
scorbot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b418  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bc8  0801b618  0801b618  0002b618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d1e0  0801d1e0  00031df4  2**0
                  CONTENTS
  4 .ARM          00000008  0801d1e0  0801d1e0  0002d1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d1e8  0801d1e8  00031df4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0801d1e8  0801d1e8  0002d1e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801d1f8  0801d1f8  0002d1f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001df4  20000000  0801d200  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e918  20001df8  0801eff4  00031df8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20010710  0801eff4  00040710  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00031df4  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  00031e22  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003493a  00000000  00000000  00031e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006540  00000000  00000000  000667d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ea8  00000000  00000000  0006cd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001781  00000000  00000000  0006ebc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000352bc  00000000  00000000  00070341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002cd65  00000000  00000000  000a55fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011eae0  00000000  00000000  000d2362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008d50  00000000  00000000  001f0e44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001f9b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20001df8 	.word	0x20001df8
 800021c:	00000000 	.word	0x00000000
 8000220:	0801b600 	.word	0x0801b600

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20001dfc 	.word	0x20001dfc
 800023c:	0801b600 	.word	0x0801b600

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800032e:	f000 b9bb 	b.w	80006a8 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <control_callback>:
#include <callbacks.hpp>

void control_callback(const void* request_msg, void* response_msg){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
		racs_services__srv__Control_Request* req_in =
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	60fb      	str	r3, [r7, #12]
				(racs_services__srv__Control_Request*) request_msg;
		racs_services__srv__Control_Response* res_in =
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	60bb      	str	r3, [r7, #8]
				(racs_services__srv__Control_Response*) response_msg;
		ScorBot.lastEvent = getCurrentTime();
 80006be:	f002 fe1f 	bl	8003300 <_Z14getCurrentTimev>
 80006c2:	4603      	mov	r3, r0
 80006c4:	4a06      	ldr	r2, [pc, #24]	; (80006e0 <control_callback+0x34>)
 80006c6:	6013      	str	r3, [r2, #0]
		ScorBot.rcvCtrl(req_in);
 80006c8:	68f9      	ldr	r1, [r7, #12]
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <control_callback+0x34>)
 80006cc:	f000 fa91 	bl	8000bf2 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request>
		ScorBot.sndCtrl(res_in);
 80006d0:	68b9      	ldr	r1, [r7, #8]
 80006d2:	4803      	ldr	r0, [pc, #12]	; (80006e0 <control_callback+0x34>)
 80006d4:	f000 fb13 	bl	8000cfe <_ZN5Robot7sndCtrlEP36racs_services__srv__Control_Response>
	}
 80006d8:	bf00      	nop
 80006da:	3710      	adds	r7, #16
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20001e14 	.word	0x20001e14

080006e4 <setup_callback>:

void setup_callback(const void* request_msg, void* response_msg){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	6039      	str	r1, [r7, #0]
		racs_services__srv__Setup_Request* req_in =
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	60fb      	str	r3, [r7, #12]
				(racs_services__srv__Setup_Request*) request_msg;
		racs_services__srv__Setup_Response* res_in =
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	60bb      	str	r3, [r7, #8]
				(racs_services__srv__Setup_Response*) response_msg;
		ScorBot.lastEvent = getCurrentTime();
 80006f6:	f002 fe03 	bl	8003300 <_Z14getCurrentTimev>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4a06      	ldr	r2, [pc, #24]	; (8000718 <setup_callback+0x34>)
 80006fe:	6013      	str	r3, [r2, #0]
		ScorBot.rcvSetup(req_in);
 8000700:	68f9      	ldr	r1, [r7, #12]
 8000702:	4805      	ldr	r0, [pc, #20]	; (8000718 <setup_callback+0x34>)
 8000704:	f000 fb0a 	bl	8000d1c <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request>
		ScorBot.sndSetup(res_in);
 8000708:	68b9      	ldr	r1, [r7, #8]
 800070a:	4803      	ldr	r0, [pc, #12]	; (8000718 <setup_callback+0x34>)
 800070c:	f000 fb66 	bl	8000ddc <_ZN5Robot8sndSetupEP34racs_services__srv__Setup_Response>
	}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20001e14 	.word	0x20001e14

0800071c <_ZN10PinControlC1EP12GPIO_TypeDeft>:

PinControl::PinControl() {

}

PinControl::PinControl(GPIO_TypeDef* port, uint16_t pin){
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	60f8      	str	r0, [r7, #12]
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	4613      	mov	r3, r2
 8000728:	80fb      	strh	r3, [r7, #6]
  this->port = port;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	68ba      	ldr	r2, [r7, #8]
 800072e:	601a      	str	r2, [r3, #0]
  this->pin = pin;
 8000730:	88fb      	ldrh	r3, [r7, #6]
 8000732:	b2da      	uxtb	r2, r3
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	711a      	strb	r2, [r3, #4]
  setLimits(0.0, 0.0);
 8000738:	eddf 0a05 	vldr	s1, [pc, #20]	; 8000750 <_ZN10PinControlC1EP12GPIO_TypeDeft+0x34>
 800073c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8000750 <_ZN10PinControlC1EP12GPIO_TypeDeft+0x34>
 8000740:	68f8      	ldr	r0, [r7, #12]
 8000742:	f000 f807 	bl	8000754 <_ZN10PinControl9setLimitsEff>
}
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4618      	mov	r0, r3
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	00000000 	.word	0x00000000

08000754 <_ZN10PinControl9setLimitsEff>:
  this->port = port;
  this->pin = pin;
  setLimits(v1, v2);
}

void PinControl::setLimits(float v1, float v2){
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000760:	edc7 0a01 	vstr	s1, [r7, #4]
  this->v1 = v1;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	68ba      	ldr	r2, [r7, #8]
 8000768:	609a      	str	r2, [r3, #8]
  this->v2 = v2;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	60da      	str	r2, [r3, #12]
}
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <_ZN10PinMeasureC1EP12GPIO_TypeDeft>:

PinMeasure::PinMeasure() {

}

PinMeasure::PinMeasure(GPIO_TypeDef* port, uint16_t pin){
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	4613      	mov	r3, r2
 8000788:	80fb      	strh	r3, [r7, #6]
  this->port = port;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	68ba      	ldr	r2, [r7, #8]
 800078e:	601a      	str	r2, [r3, #0]
  this->pin = pin;
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	88fa      	ldrh	r2, [r7, #6]
 8000794:	809a      	strh	r2, [r3, #4]
  setLimits(0.0, 0.0);
 8000796:	eddf 0a06 	vldr	s1, [pc, #24]	; 80007b0 <_ZN10PinMeasureC1EP12GPIO_TypeDeft+0x34>
 800079a:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80007b0 <_ZN10PinMeasureC1EP12GPIO_TypeDeft+0x34>
 800079e:	68f8      	ldr	r0, [r7, #12]
 80007a0:	f000 f808 	bl	80007b4 <_ZN10PinMeasure9setLimitsEff>
}
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	4618      	mov	r0, r3
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	00000000 	.word	0x00000000

080007b4 <_ZN10PinMeasure9setLimitsEff>:
  this->port = port;
  this->pin = pin;
  setLimits(v1, v2);
}

void PinMeasure::setLimits(float v1, float v2){
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	ed87 0a02 	vstr	s0, [r7, #8]
 80007c0:	edc7 0a01 	vstr	s1, [r7, #4]
  this->v1 = v1;
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	609a      	str	r2, [r3, #8]
  this->v2 = v2;
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	687a      	ldr	r2, [r7, #4]
 80007ce:	60da      	str	r2, [r3, #12]
}
 80007d0:	bf00      	nop
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <_ZN10PinMeasure5stateEv>:

bool PinMeasure::state(){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin(port, pin);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	889b      	ldrh	r3, [r3, #4]
 80007ec:	4619      	mov	r1, r3
 80007ee:	4610      	mov	r0, r2
 80007f0:	f003 fcac 	bl	800414c <HAL_GPIO_ReadPin>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	bf14      	ite	ne
 80007fa:	2301      	movne	r3, #1
 80007fc:	2300      	moveq	r3, #0
 80007fe:	b2db      	uxtb	r3, r3
}
 8000800:	4618      	mov	r0, r3
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <_ZN5MotorC1ER10PinControlS1_P17TIM_HandleTypeDefhS3_R10PinMeasure>:
Motor::Motor(PinControl &INA, PinControl &INB,
			 TIM_HandleTypeDef* htimPWM, uint8_t CCRx,
			 PinMeasure &END)
  : pin_INA(INA), pin_INB(INB), htimPWM(htimPWM), CCRx(CCRx), pin_END(END) {}

Motor::Motor(PinControl &INA, PinControl &INB,
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	607a      	str	r2, [r7, #4]
 8000814:	603b      	str	r3, [r7, #0]
			 TIM_HandleTypeDef* htimPWM, uint8_t CCRx,
			 TIM_HandleTypeDef* htimENC, PinMeasure &END)
  : pin_INA(INA), pin_INB(INB), htimPWM(htimPWM), CCRx(CCRx), htimENC(htimENC), pin_END(END) {}
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	68ba      	ldr	r2, [r7, #8]
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	683a      	ldr	r2, [r7, #0]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	7e3a      	ldrb	r2, [r7, #24]
 800082c:	731a      	strb	r2, [r3, #12]
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	69fa      	ldr	r2, [r7, #28]
 8000832:	611a      	str	r2, [r3, #16]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	6a3a      	ldr	r2, [r7, #32]
 8000838:	615a      	str	r2, [r3, #20]
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	2200      	movs	r2, #0
 800083e:	761a      	strb	r2, [r3, #24]
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	4618      	mov	r0, r3
 8000844:	3714      	adds	r7, #20
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <_ZN5MotorD1Ev>:

Motor::~Motor() {}
 800084e:	b480      	push	{r7}
 8000850:	b083      	sub	sp, #12
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4618      	mov	r0, r3
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <_ZN5Motor10getEncoderEv>:

/*void Motor::invertEncoder(bool invert){
  this->encoder_invert = invert;
}*/

long Motor::getEncoder(){
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  return htimENC->Instance->CNT;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	691b      	ldr	r3, [r3, #16]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <_ZN5Motor11isInEndStopEv>:
      break;

  }
}

bool Motor::isInEndStop(){
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  return pin_END.state();
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	695b      	ldr	r3, [r3, #20]
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff ffa5 	bl	80007dc <_ZN10PinMeasure5stateEv>
 8000892:	4603      	mov	r3, r0
}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf>:

// ==================================================
// Robot
// ==================================================

Robot::Robot(PinControl &enable, PinControl &toggle, unsigned long ts_ms, uint8_t size, Motor **motors, float *encs_div)
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
 80008a8:	603b      	str	r3, [r7, #0]
  : pin_enable(enable), pin_toggle(toggle) {
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	68ba      	ldr	r2, [r7, #8]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	609a      	str	r2, [r3, #8]
  this->ts = ts_ms;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	683a      	ldr	r2, [r7, #0]
 80008ba:	60da      	str	r2, [r3, #12]
  this->motors = 		(Motor**)	malloc(size * sizeof(Motor*));
 80008bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	4618      	mov	r0, r3
 80008c4:	f019 fb16 	bl	8019ef4 <malloc>
 80008c8:	4603      	mov	r3, r0
 80008ca:	461a      	mov	r2, r3
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	615a      	str	r2, [r3, #20]
  this->pids = 			(PID*)		malloc(size * sizeof(PID));
 80008d0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80008d4:	4613      	mov	r3, r2
 80008d6:	00db      	lsls	r3, r3, #3
 80008d8:	1a9b      	subs	r3, r3, r2
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	4618      	mov	r0, r3
 80008de:	f019 fb09 	bl	8019ef4 <malloc>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	619a      	str	r2, [r3, #24]
  this->switches = 		(bool*) 	malloc(size * sizeof(bool));
 80008ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f019 fb00 	bl	8019ef4 <malloc>
 80008f4:	4603      	mov	r3, r0
 80008f6:	461a      	mov	r2, r3
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	621a      	str	r2, [r3, #32]
  this->motors_pwm = 	(int16_t*) 	malloc(size * sizeof(int16_t));
 80008fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	4618      	mov	r0, r3
 8000904:	f019 faf6 	bl	8019ef4 <malloc>
 8000908:	4603      	mov	r3, r0
 800090a:	461a      	mov	r2, r3
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	625a      	str	r2, [r3, #36]	; 0x24
  this->encoders =		(int32_t*)	malloc(size * sizeof(int32_t));
 8000910:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4618      	mov	r0, r3
 8000918:	f019 faec 	bl	8019ef4 <malloc>
 800091c:	4603      	mov	r3, r0
 800091e:	461a      	mov	r2, r3
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	629a      	str	r2, [r3, #40]	; 0x28
  this->error_div = 	(float*) 	malloc(size * sizeof(float));
 8000924:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	4618      	mov	r0, r3
 800092c:	f019 fae2 	bl	8019ef4 <malloc>
 8000930:	4603      	mov	r3, r0
 8000932:	461a      	mov	r2, r3
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	62da      	str	r2, [r3, #44]	; 0x2c

  this->size = size;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800093e:	741a      	strb	r2, [r3, #16]
  this->status = Status::Idle;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2200      	movs	r2, #0
 8000944:	771a      	strb	r2, [r3, #28]
  this->lastEvent = getCurrentTime();
 8000946:	f002 fcdb 	bl	8003300 <_Z14getCurrentTimev>
 800094a:	4602      	mov	r2, r0
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	601a      	str	r2, [r3, #0]

  for(int i = 0; i < size; i++){
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	e01e      	b.n	8000994 <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0xf8>
    this->switches[i] = false;
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	6a1a      	ldr	r2, [r3, #32]
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	4413      	add	r3, r2
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
    this->motors_pwm[i] = 0;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	4413      	add	r3, r2
 800096c:	2200      	movs	r2, #0
 800096e:	801a      	strh	r2, [r3, #0]
    this->encoders[i] = 0;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	4413      	add	r3, r2
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
    this->error_div[i] = 0.0;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	4413      	add	r3, r2
 8000988:	f04f 0200 	mov.w	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < size; i++){
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	3301      	adds	r3, #1
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000998:	697a      	ldr	r2, [r7, #20]
 800099a:	429a      	cmp	r2, r3
 800099c:	dbdb      	blt.n	8000956 <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0xba>
  }

  if(motors != NULL){
 800099e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d02c      	beq.n	80009fe <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0x162>
    for(int i = 0; i < size; i++){
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	e024      	b.n	80009f4 <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0x158>
      if(encs_div != NULL){
 80009aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d013      	beq.n	80009d8 <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0x13c>
        setMotor(i, motors[i], encs_div[i]);
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	b2d9      	uxtb	r1, r3
 80009b4:	693b      	ldr	r3, [r7, #16]
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009ba:	4413      	add	r3, r2
 80009bc:	6818      	ldr	r0, [r3, #0]
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009c4:	4413      	add	r3, r2
 80009c6:	edd3 7a00 	vldr	s15, [r3]
 80009ca:	eeb0 0a67 	vmov.f32	s0, s15
 80009ce:	4602      	mov	r2, r0
 80009d0:	68f8      	ldr	r0, [r7, #12]
 80009d2:	f000 f88b 	bl	8000aec <_ZN5Robot8setMotorEhP5Motorf>
 80009d6:	e00a      	b.n	80009ee <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0x152>
      } else {
        setMotor(i, motors[i]);
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	b2d9      	uxtb	r1, r3
 80009dc:	693b      	ldr	r3, [r7, #16]
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009e2:	4413      	add	r3, r2
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	461a      	mov	r2, r3
 80009e8:	68f8      	ldr	r0, [r7, #12]
 80009ea:	f000 f86b 	bl	8000ac4 <_ZN5Robot8setMotorEhP5Motor>
    for(int i = 0; i < size; i++){
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	3301      	adds	r3, #1
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009f8:	693a      	ldr	r2, [r7, #16]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	dbd5      	blt.n	80009aa <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0x10e>
      }
    }
  }

  lastEvent = getCurrentTime();
 80009fe:	f002 fc7f 	bl	8003300 <_Z14getCurrentTimev>
 8000a02:	4602      	mov	r2, r0
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	601a      	str	r2, [r3, #0]
  update();
 8000a08:	68f8      	ldr	r0, [r7, #12]
 8000a0a:	f000 f9f5 	bl	8000df8 <_ZN5Robot6updateEv>
}
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	4618      	mov	r0, r3
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}

08000a18 <_ZN5RobotD1Ev>:
  : Robot(enable, toggle,ts_ms, size, motors, NULL) {}

Robot::Robot(PinControl &enable, PinControl &toggle, unsigned long ts_ms, uint8_t size)
  : Robot(enable, toggle,ts_ms, size, NULL, NULL) {}

Robot::~Robot() {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  free(this->motors);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	695b      	ldr	r3, [r3, #20]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f019 fa6d 	bl	8019f04 <free>
  free(this->pids);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f019 fa68 	bl	8019f04 <free>
  free(this->switches);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6a1b      	ldr	r3, [r3, #32]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f019 fa63 	bl	8019f04 <free>
  free(this->motors_pwm);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a42:	4618      	mov	r0, r3
 8000a44:	f019 fa5e 	bl	8019f04 <free>
  free(this->encoders);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f019 fa59 	bl	8019f04 <free>
  free(this->error_div);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a56:	4618      	mov	r0, r3
 8000a58:	f019 fa54 	bl	8019f04 <free>
}
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <_ZN5Robot9setStatusENS_6StatusEb>:

Robot::Status Robot::getStatus(){
  return this->status;
}

void Robot::setStatus(Status status, bool reset = false){
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
 8000a6e:	460b      	mov	r3, r1
 8000a70:	70fb      	strb	r3, [r7, #3]
 8000a72:	4613      	mov	r3, r2
 8000a74:	70bb      	strb	r3, [r7, #2]
  if(this->status != status || reset){
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	7f1b      	ldrb	r3, [r3, #28]
 8000a7a:	78fa      	ldrb	r2, [r7, #3]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d102      	bne.n	8000a86 <_ZN5Robot9setStatusENS_6StatusEb+0x20>
 8000a80:	78bb      	ldrb	r3, [r7, #2]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d008      	beq.n	8000a98 <_ZN5Robot9setStatusENS_6StatusEb+0x32>
    resetPWMs();
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f000 f895 	bl	8000bb6 <_ZN5Robot9resetPWMsEv>
    resetPIDs();
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f000 f873 	bl	8000b78 <_ZN5Robot9resetPIDsEv>
    this->status = status;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	78fa      	ldrb	r2, [r7, #3]
 8000a96:	771a      	strb	r2, [r3, #28]
  }
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <_ZN5Robot8getMotorEh>:

Motor * Robot::getMotor(uint8_t index){
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	460b      	mov	r3, r1
 8000aaa:	70fb      	strb	r3, [r7, #3]
  return this->motors[index];
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	695a      	ldr	r2, [r3, #20]
 8000ab0:	78fb      	ldrb	r3, [r7, #3]
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	4413      	add	r3, r2
 8000ab6:	681b      	ldr	r3, [r3, #0]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <_ZN5Robot8setMotorEhP5Motor>:

void Robot::setMotor(uint8_t index, Motor * motor){
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	460b      	mov	r3, r1
 8000ace:	607a      	str	r2, [r7, #4]
 8000ad0:	72fb      	strb	r3, [r7, #11]
  this->motors[index] = motor;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	695a      	ldr	r2, [r3, #20]
 8000ad6:	7afb      	ldrb	r3, [r7, #11]
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	4413      	add	r3, r2
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	601a      	str	r2, [r3, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <_ZN5Robot8setMotorEhP5Motorf>:

void Robot::setMotor(uint8_t index, Motor * motor, float enc_div){
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	460b      	mov	r3, r1
 8000af6:	607a      	str	r2, [r7, #4]
 8000af8:	ed87 0a00 	vstr	s0, [r7]
 8000afc:	72fb      	strb	r3, [r7, #11]
  this->motors[index] = motor;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	695a      	ldr	r2, [r3, #20]
 8000b02:	7afb      	ldrb	r3, [r7, #11]
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	4413      	add	r3, r2
 8000b08:	687a      	ldr	r2, [r7, #4]
 8000b0a:	601a      	str	r2, [r3, #0]
  this->error_div[index] = enc_div;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b10:	7afb      	ldrb	r3, [r7, #11]
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	4413      	add	r3, r2
 8000b16:	683a      	ldr	r2, [r7, #0]
 8000b18:	601a      	str	r2, [r3, #0]
}
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <_ZN5Robot17setEncoderDividerEhf>:

void Robot::setEncoderDivider(uint8_t index, float enc_div){
 8000b26:	b480      	push	{r7}
 8000b28:	b085      	sub	sp, #20
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	460b      	mov	r3, r1
 8000b30:	ed87 0a01 	vstr	s0, [r7, #4]
 8000b34:	72fb      	strb	r3, [r7, #11]
  this->error_div[index] = enc_div;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b3a:	7afb      	ldrb	r3, [r7, #11]
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	601a      	str	r2, [r3, #0]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <_ZN5Robot6getPIDEh>:

PID * Robot::getPID(uint8_t index){
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	70fb      	strb	r3, [r7, #3]
  return &(this->pids[index]);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6999      	ldr	r1, [r3, #24]
 8000b60:	78fa      	ldrb	r2, [r7, #3]
 8000b62:	4613      	mov	r3, r2
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	1a9b      	subs	r3, r3, r2
 8000b68:	00db      	lsls	r3, r3, #3
 8000b6a:	440b      	add	r3, r1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <_ZN5Robot9resetPIDsEv>:
  for(int i = 0; i < size; i++){
    getPID(i)->setup(kp, ki, kd);
  }
}

void Robot::resetPIDs(){
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < size; i++){
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	e00c      	b.n	8000ba0 <_ZN5Robot9resetPIDsEv+0x28>
    getPID(i)->reset();
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	6878      	ldr	r0, [r7, #4]
 8000b8e:	f7ff ffdf 	bl	8000b50 <_ZN5Robot6getPIDEh>
 8000b92:	4603      	mov	r3, r0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 fb4f 	bl	8001238 <_ZN3PID5resetEv>
  for(int i = 0; i < size; i++){
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	7c1b      	ldrb	r3, [r3, #16]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	dbec      	blt.n	8000b86 <_ZN5Robot9resetPIDsEv+0xe>
  }
}
 8000bac:	bf00      	nop
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <_ZN5Robot9resetPWMsEv>:
void Robot::setPWM(uint8_t index, int16_t pwm){
  motors_pwm[index] = pwm;

}

void Robot::resetPWMs(){
 8000bb6:	b480      	push	{r7}
 8000bb8:	b085      	sub	sp, #20
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < size; i++){
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	e009      	b.n	8000bd8 <_ZN5Robot9resetPWMsEv+0x22>
    motors_pwm[i] = 0;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	4413      	add	r3, r2
 8000bce:	2200      	movs	r2, #0
 8000bd0:	801a      	strh	r2, [r3, #0]
  for(int i = 0; i < size; i++){
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	7c1b      	ldrb	r3, [r3, #16]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	4293      	cmp	r3, r2
 8000be2:	dbef      	blt.n	8000bc4 <_ZN5Robot9resetPWMsEv+0xe>
  }
}
 8000be4:	bf00      	nop
 8000be6:	bf00      	nop
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request>:
void Robot::disableMotors(){
  setStatus(Status::Idle, true);
  pin_enable.set(false);
}

void Robot::rcvCtrl(racs_services__srv__Control_Request* request){
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b086      	sub	sp, #24
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	6039      	str	r1, [r7, #0]

  if(request->command > 2 || request->num_motors != size) {
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	785b      	ldrb	r3, [r3, #1]
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d805      	bhi.n	8000c10 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x1e>
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	781a      	ldrb	r2, [r3, #0]
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	7c1b      	ldrb	r3, [r3, #16]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d005      	beq.n	8000c1c <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x2a>
    setStatus(Status::Idle, true);
 8000c10:	2201      	movs	r2, #1
 8000c12:	2100      	movs	r1, #0
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f7ff ff26 	bl	8000a66 <_ZN5Robot9setStatusENS_6StatusEb>
    return;
 8000c1a:	e06d      	b.n	8000cf8 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x106>
  }

  switch(request->command){
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	785b      	ldrb	r3, [r3, #1]
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d042      	beq.n	8000caa <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xb8>
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	dc60      	bgt.n	8000cea <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xf8>
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d002      	beq.n	8000c32 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x40>
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d01b      	beq.n	8000c68 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x76>
 8000c30:	e05b      	b.n	8000cea <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xf8>
    case (unsigned char) Command::Idle:
      for(int i = 0; i < size; i++) {
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
 8000c36:	e010      	b.n	8000c5a <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x68>
        motors_pwm[i] = 0;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	4413      	add	r3, r2
 8000c42:	2200      	movs	r2, #0
 8000c44:	801a      	strh	r2, [r3, #0]
        encoders[i] = 0;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4413      	add	r3, r2
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
      for(int i = 0; i < size; i++) {
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	3301      	adds	r3, #1
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	7c1b      	ldrb	r3, [r3, #16]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	4293      	cmp	r3, r2
 8000c64:	dbe8      	blt.n	8000c38 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x46>
      }
      break;
 8000c66:	e040      	b.n	8000cea <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xf8>
    case (unsigned char) Command::DAQ:
      for(int i = 0; i < size; i++) {
 8000c68:	2300      	movs	r3, #0
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	e016      	b.n	8000c9c <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xaa>
        motors_pwm[i] = request->encoders.data[i];
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685a      	ldr	r2, [r3, #4]
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	4413      	add	r3, r2
 8000c78:	6819      	ldr	r1, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	4413      	add	r3, r2
 8000c84:	b20a      	sxth	r2, r1
 8000c86:	801a      	strh	r2, [r3, #0]
        encoders[i] = 0;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	4413      	add	r3, r2
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
      for(int i = 0; i < size; i++) {
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	7c1b      	ldrb	r3, [r3, #16]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	dbe2      	blt.n	8000c6e <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x7c>
      }
      break;
 8000ca8:	e01f      	b.n	8000cea <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xf8>
    case (unsigned char) Command::PID:
      for(int i = 0; i < size; i++) {
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	e015      	b.n	8000cdc <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xea>
        motors_pwm[i] = 0;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	4413      	add	r3, r2
 8000cba:	2200      	movs	r2, #0
 8000cbc:	801a      	strh	r2, [r3, #0]
        encoders[i] = request->encoders.data[i];
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	441a      	add	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	009b      	lsls	r3, r3, #2
 8000cd0:	440b      	add	r3, r1
 8000cd2:	6812      	ldr	r2, [r2, #0]
 8000cd4:	601a      	str	r2, [r3, #0]
      for(int i = 0; i < size; i++) {
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	7c1b      	ldrb	r3, [r3, #16]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	dbe3      	blt.n	8000cb0 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xbe>
      }
      break;
 8000ce8:	bf00      	nop
  }

  setStatus((Status) request->command);
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	785b      	ldrb	r3, [r3, #1]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff feb7 	bl	8000a66 <_ZN5Robot9setStatusENS_6StatusEb>
}
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <_ZN5Robot7sndCtrlEP36racs_services__srv__Control_Response>:

void Robot::sndCtrl(racs_services__srv__Control_Response* response){
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	6039      	str	r1, [r7, #0]
	response->response = (uint8_t) status;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	7f1a      	ldrb	r2, [r3, #28]
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	701a      	strb	r2, [r3, #0]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request>:

void Robot::rcvSetup(racs_services__srv__Setup_Request* request){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]

  setEncoderDivider(request->motor_index, request->eed);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	781a      	ldrb	r2, [r3, #0]
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d30:	eeb0 0a67 	vmov.f32	s0, s15
 8000d34:	4611      	mov	r1, r2
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff fef5 	bl	8000b26 <_ZN5Robot17setEncoderDividerEhf>
  getPID(request->motor_index)->reset();
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4619      	mov	r1, r3
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff ff04 	bl	8000b50 <_ZN5Robot6getPIDEh>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fa74 	bl	8001238 <_ZN3PID5resetEv>
  getPID(request->motor_index)->init((float) ts/1000.0, request->tau, request->sat, true);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	4619      	mov	r1, r3
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff fefa 	bl	8000b50 <_ZN5Robot6getPIDEh>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	ee07 3a90 	vmov	s15, r3
 8000d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d6a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000dd8 <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request+0xbc>
 8000d6e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	edd3 7a05 	vldr	s15, [r3, #20]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	edd3 6a06 	vldr	s13, [r3, #24]
 8000d7e:	2101      	movs	r1, #1
 8000d80:	eeb0 1a66 	vmov.f32	s2, s13
 8000d84:	eef0 0a67 	vmov.f32	s1, s15
 8000d88:	eeb0 0a47 	vmov.f32	s0, s14
 8000d8c:	4610      	mov	r0, r2
 8000d8e:	f000 f9cb 	bl	8001128 <_ZN3PID4initEfffb>
  getPID(request->motor_index)->setup(request->p, request->i, request->d);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	4619      	mov	r1, r3
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff fed9 	bl	8000b50 <_ZN5Robot6getPIDEh>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	edd3 7a02 	vldr	s15, [r3, #8]
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	ed93 7a03 	vldr	s14, [r3, #12]
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	edd3 6a04 	vldr	s13, [r3, #16]
 8000db2:	eeb0 1a66 	vmov.f32	s2, s13
 8000db6:	eef0 0a47 	vmov.f32	s1, s14
 8000dba:	eeb0 0a67 	vmov.f32	s0, s15
 8000dbe:	4610      	mov	r0, r2
 8000dc0:	f000 fa20 	bl	8001204 <_ZN3PID5setupEfff>

  setStatus(Status::Idle, true);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff fe4c 	bl	8000a66 <_ZN5Robot9setStatusENS_6StatusEb>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	447a0000 	.word	0x447a0000

08000ddc <_ZN5Robot8sndSetupEP34racs_services__srv__Setup_Response>:

void Robot::sndSetup(racs_services__srv__Setup_Response* response){
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
  response->response = (uint8_t) Status::Setup;
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	2203      	movs	r2, #3
 8000dea:	701a      	strb	r2, [r3, #0]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <_ZN5Robot6updateEv>:

void Robot::update(){
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b089      	sub	sp, #36	; 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  switch(status){
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	7f1b      	ldrb	r3, [r3, #28]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d00c      	beq.n	8000e22 <_ZN5Robot6updateEv+0x2a>
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	f200 8085 	bhi.w	8000f18 <_ZN5Robot6updateEv+0x120>
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <_ZN5Robot6updateEv+0x22>
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	f000 808a 	beq.w	8000f2c <_ZN5Robot6updateEv+0x134>
 8000e18:	e07e      	b.n	8000f18 <_ZN5Robot6updateEv+0x120>
    case Status::Idle:
      resetPWMs();
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff fecb 	bl	8000bb6 <_ZN5Robot9resetPWMsEv>
      break;
 8000e20:	e085      	b.n	8000f2e <_ZN5Robot6updateEv+0x136>

    case Status::DAQ:
      break;

    case Status::PID:
      for(int i = 0; i < size; i++){
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
 8000e26:	e070      	b.n	8000f0a <_ZN5Robot6updateEv+0x112>
        float err = (float) (getMotor(i)->getEncoder() - encoders[i]) / ((error_div[i] == 0) ? 1.0 : error_div[i]);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f7ff fe36 	bl	8000aa0 <_ZN5Robot8getMotorEh>
 8000e34:	4603      	mov	r3, r0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fd14 	bl	8000864 <_ZN5Motor10getEncoderEv>
 8000e3c:	4601      	mov	r1, r0
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	1acb      	subs	r3, r1, r3
 8000e4c:	ee07 3a90 	vmov	s15, r3
 8000e50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e54:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	4413      	add	r3, r2
 8000e62:	edd3 7a00 	vldr	s15, [r3]
 8000e66:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e6e:	d009      	beq.n	8000e84 <_ZN5Robot6updateEv+0x8c>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	4413      	add	r3, r2
 8000e7a:	edd3 7a00 	vldr	s15, [r3]
 8000e7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e82:	e001      	b.n	8000e88 <_ZN5Robot6updateEv+0x90>
 8000e84:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8000e88:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000e8c:	eef7 7bc6 	vcvt.f32.f64	s15, d6
 8000e90:	edc7 7a05 	vstr	s15, [r7, #20]
    	motors_pwm[i] = (int16_t) std::min(std::max((float) 0, getPID(i)->evolve(err)), (float) MAX_PWM) - HALF_PWM;
 8000e94:	f04f 0300 	mov.w	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff fe55 	bl	8000b50 <_ZN5Robot6getPIDEh>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	ed97 0a05 	vldr	s0, [r7, #20]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f000 fab0 	bl	8001412 <_ZN3PID6evolveEf>
 8000eb2:	eef0 7a40 	vmov.f32	s15, s0
 8000eb6:	edc7 7a03 	vstr	s15, [r7, #12]
 8000eba:	f107 020c 	add.w	r2, r7, #12
 8000ebe:	f107 0308 	add.w	r3, r7, #8
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f000 f8bb 	bl	8001040 <_ZSt3maxIfERKT_S2_S2_>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	f04f 438f 	mov.w	r3, #1199570944	; 0x47800000
 8000ed0:	613b      	str	r3, [r7, #16]
 8000ed2:	f107 0310 	add.w	r3, r7, #16
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4610      	mov	r0, r2
 8000eda:	f000 f8ca 	bl	8001072 <_ZSt3minIfERKT_S2_S2_>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	edd3 7a00 	vldr	s15, [r3]
 8000ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ee8:	ee17 3a90 	vmov	r3, s15
 8000eec:	b21b      	sxth	r3, r3
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000ef4:	b299      	uxth	r1, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	005b      	lsls	r3, r3, #1
 8000efe:	4413      	add	r3, r2
 8000f00:	b20a      	sxth	r2, r1
 8000f02:	801a      	strh	r2, [r3, #0]
      for(int i = 0; i < size; i++){
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	3301      	adds	r3, #1
 8000f08:	61fb      	str	r3, [r7, #28]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	7c1b      	ldrb	r3, [r3, #16]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	4293      	cmp	r3, r2
 8000f14:	db88      	blt.n	8000e28 <_ZN5Robot6updateEv+0x30>
      }
      break;
 8000f16:	e00a      	b.n	8000f2e <_ZN5Robot6updateEv+0x136>

    default:
      resetPWMs();
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff fe4c 	bl	8000bb6 <_ZN5Robot9resetPWMsEv>
      resetPIDs();
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff fe2a 	bl	8000b78 <_ZN5Robot9resetPIDsEv>
      status = Status::Idle;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	771a      	strb	r2, [r3, #28]
      break;
 8000f2a:	e000      	b.n	8000f2e <_ZN5Robot6updateEv+0x136>
      break;
 8000f2c:	bf00      	nop
  }

  for(int i = 0; i < size; i++){
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
 8000f32:	e012      	b.n	8000f5a <_ZN5Robot6updateEv+0x162>
    switches[i] = getMotor(i)->isInEndStop();
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	4619      	mov	r1, r3
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff fdb0 	bl	8000aa0 <_ZN5Robot8getMotorEh>
 8000f40:	4601      	mov	r1, r0
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a1a      	ldr	r2, [r3, #32]
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	18d4      	adds	r4, r2, r3
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	f7ff fc98 	bl	8000880 <_ZN5Motor11isInEndStopEv>
 8000f50:	4603      	mov	r3, r0
 8000f52:	7023      	strb	r3, [r4, #0]
  for(int i = 0; i < size; i++){
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	3301      	adds	r3, #1
 8000f58:	61bb      	str	r3, [r7, #24]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	7c1b      	ldrb	r3, [r3, #16]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	4293      	cmp	r3, r2
 8000f64:	dbe6      	blt.n	8000f34 <_ZN5Robot6updateEv+0x13c>
  }
}
 8000f66:	bf00      	nop
 8000f68:	bf00      	nop
 8000f6a:	3724      	adds	r7, #36	; 0x24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd90      	pop	{r4, r7, pc}

08000f70 <_Z12create_robotv>:
        actuate();
        pin_toggle.set(false);
      }
}

Robot create_robot() {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b0a4      	sub	sp, #144	; 0x90
 8000f74:	af04      	add	r7, sp, #16
 8000f76:	6078      	str	r0, [r7, #4]

	PinControl mot1_ina = PinControl(MOTOR1_INA_GPIO_Port, MOTOR1_INA_Pin);
 8000f78:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	492c      	ldr	r1, [pc, #176]	; (8001030 <_Z12create_robotv+0xc0>)
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fbcb 	bl	800071c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot1_inb = PinControl(MOTOR1_INB_GPIO_Port, MOTOR1_INB_Pin);
 8000f86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	4928      	ldr	r1, [pc, #160]	; (8001030 <_Z12create_robotv+0xc0>)
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fbc4 	bl	800071c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot1_end = PinMeasure(MOTOR1_END_GPIO_Port, MOTOR1_END_Pin);
 8000f94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f9c:	4925      	ldr	r1, [pc, #148]	; (8001034 <_Z12create_robotv+0xc4>)
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fbec 	bl	800077c <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot6_ina = PinControl(MOTOR6_INA_GPIO_Port, MOTOR6_INA_Pin);
	PinControl mot6_inb = PinControl(MOTOR6_INB_GPIO_Port, MOTOR6_INB_Pin);
	PinMeasure mot6_end = PinMeasure(MOTOR6_END_GPIO_Port, MOTOR6_END_Pin);*/

	PinControl enable = PinControl(MOTORS_EN_GPIO_Port, MOTORS_EN_Pin);
 8000fa4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fa8:	2240      	movs	r2, #64	; 0x40
 8000faa:	4922      	ldr	r1, [pc, #136]	; (8001034 <_Z12create_robotv+0xc4>)
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fbb5 	bl	800071c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl toggle = PinControl(PIN_TOGGLE_GPIO_Port, PIN_TOGGLE_Pin);
 8000fb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fb6:	2220      	movs	r2, #32
 8000fb8:	491e      	ldr	r1, [pc, #120]	; (8001034 <_Z12create_robotv+0xc4>)
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fbae 	bl	800071c <_ZN10PinControlC1EP12GPIO_TypeDeft>

	Motor motor1 = Motor(mot1_ina, mot1_inb, &htim1, 1, &htim2, mot1_end);
 8000fc0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000fc4:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000fc8:	f107 0008 	add.w	r0, r7, #8
 8000fcc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fd0:	9302      	str	r3, [sp, #8]
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <_Z12create_robotv+0xc8>)
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <_Z12create_robotv+0xcc>)
 8000fdc:	f7ff fc14 	bl	8000808 <_ZN5MotorC1ER10PinControlS1_P17TIM_HandleTypeDefhS3_R10PinMeasure>
	Motor motor4 = Motor(mot4_ina, mot4_inb, &htim1, 4, &htim5, mot4_end);
	Motor motor5 = Motor(mot5_ina, mot5_inb, &htim9, 1, &htim8, mot5_end);
	Motor motor6 = Motor(mot6_ina, mot6_inb, &htim9, 2, 		mot6_end);*/

	//Motor** motors = (Motor**) malloc(sizeof(Motor*)*6);
	Motor** motors = (Motor**) malloc(sizeof(Motor*)*1);
 8000fe0:	2004      	movs	r0, #4
 8000fe2:	f018 ff87 	bl	8019ef4 <malloc>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	67fb      	str	r3, [r7, #124]	; 0x7c
	//float* encs_div = (float*) malloc(sizeof(float)*6);
	float* encs_div = (float*) malloc(sizeof(float)*1);
 8000fea:	2004      	movs	r0, #4
 8000fec:	f018 ff82 	bl	8019ef4 <malloc>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	67bb      	str	r3, [r7, #120]	; 0x78

	motors[0] = &motor1; /*motors[1] = &motor2; motors[2] = &motor3; motors[3] = &motor4; motors[4] = &motor5; motors[5] = &motor6;
 8000ff4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ff6:	f107 0208 	add.w	r2, r7, #8
 8000ffa:	601a      	str	r2, [r3, #0]
	encs_div[0] = 1; encs_div[1] = 1; encs_div[2] = 1; encs_div[3] = 1; encs_div[4] = 1; encs_div[5] = 1;*/
	//Robot myRobot = Robot(enable, toggle, TS, 6, motors, encs_div);
	Robot myRobot = Robot(enable, toggle, TS, 1, motors, encs_div);
 8000ffc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001000:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	2301      	movs	r3, #1
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	230a      	movs	r3, #10
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff fc42 	bl	800089c <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf>

	return myRobot;
 8001018:	bf00      	nop
}
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fc15 	bl	800084e <_ZN5MotorD1Ev>
	return myRobot;
 8001024:	bf00      	nop
}
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	3780      	adds	r7, #128	; 0x80
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40020c00 	.word	0x40020c00
 8001034:	40021800 	.word	0x40021800
 8001038:	20006314 	.word	0x20006314
 800103c:	200062c8 	.word	0x200062c8

08001040 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	ed93 7a00 	vldr	s14, [r3]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	edd3 7a00 	vldr	s15, [r3]
 8001056:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800105a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105e:	d501      	bpl.n	8001064 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	e000      	b.n	8001066 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8001064:	687b      	ldr	r3, [r7, #4]
    }
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	ed93 7a00 	vldr	s14, [r3]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	edd3 7a00 	vldr	s15, [r3]
 8001088:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800108c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001090:	d501      	bpl.n	8001096 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	e000      	b.n	8001098 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8001096:	687b      	ldr	r3, [r7, #4]
    }
 8001098:	4618      	mov	r0, r3
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <_Z41__static_initialization_and_destruction_0ii>:

Robot ScorBot = create_robot();
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d108      	bne.n	80010c6 <_Z41__static_initialization_and_destruction_0ii+0x22>
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d103      	bne.n	80010c6 <_Z41__static_initialization_and_destruction_0ii+0x22>
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff55 	bl	8000f70 <_Z12create_robotv>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d107      	bne.n	80010dc <_Z41__static_initialization_and_destruction_0ii+0x38>
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d102      	bne.n	80010dc <_Z41__static_initialization_and_destruction_0ii+0x38>
 80010d6:	4803      	ldr	r0, [pc, #12]	; (80010e4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80010d8:	f7ff fc9e 	bl	8000a18 <_ZN5RobotD1Ev>
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20001e14 	.word	0x20001e14

080010e8 <_GLOBAL__sub_I__ZN10PinControlC2Ev>:
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80010f0:	2001      	movs	r0, #1
 80010f2:	f7ff ffd7 	bl	80010a4 <_Z41__static_initialization_and_destruction_0ii>
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <_GLOBAL__sub_D__ZN10PinControlC2Ev>:
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001100:	2000      	movs	r0, #0
 8001102:	f7ff ffcf 	bl	80010a4 <_Z41__static_initialization_and_destruction_0ii>
 8001106:	bd80      	pop	{r7, pc}

08001108 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001112:	ed97 0a01 	vldr	s0, [r7, #4]
 8001116:	f018 fdeb 	bl	8019cf0 <expf>
 800111a:	eef0 7a40 	vmov.f32	s15, s0
 800111e:	eeb0 0a67 	vmov.f32	s0, s15
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <_ZN3PID4initEfffb>:


// PID

void PID::init(float ts, float pole, float sat, bool bumpless)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6178      	str	r0, [r7, #20]
 8001130:	ed87 0a04 	vstr	s0, [r7, #16]
 8001134:	edc7 0a03 	vstr	s1, [r7, #12]
 8001138:	ed87 1a02 	vstr	s2, [r7, #8]
 800113c:	460b      	mov	r3, r1
 800113e:	71fb      	strb	r3, [r7, #7]
  this->ts = ts;
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	601a      	str	r2, [r3, #0]
  this->pole = pole;
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	68fa      	ldr	r2, [r7, #12]
 800114a:	605a      	str	r2, [r3, #4]
  this->sat = sat;
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	609a      	str	r2, [r3, #8]
  this->bumpless = bumpless;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	79fa      	ldrb	r2, [r7, #7]
 8001156:	731a      	strb	r2, [r3, #12]

  if(pole > 0)
 8001158:	edd7 7a03 	vldr	s15, [r7, #12]
 800115c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001164:	dd2d      	ble.n	80011c2 <_ZN3PID4initEfffb+0x9a>
  {
    A = exp(-pole*ts);
 8001166:	edd7 7a03 	vldr	s15, [r7, #12]
 800116a:	eeb1 7a67 	vneg.f32	s14, s15
 800116e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001176:	eeb0 0a67 	vmov.f32	s0, s15
 800117a:	f7ff ffc5 	bl	8001108 <_ZSt3expf>
 800117e:	eef0 7a40 	vmov.f32	s15, s0
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    B = (1-A)/pole;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800118e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001192:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001196:	ed97 7a03 	vldr	s14, [r7, #12]
 800119a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    C = -pole*pole;
 80011a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011a8:	eeb1 7a67 	vneg.f32	s14, s15
 80011ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80011b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    D = pole;
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	68fa      	ldr	r2, [r7, #12]
 80011be:	635a      	str	r2, [r3, #52]	; 0x34
 80011c0:	e019      	b.n	80011f6 <_ZN3PID4initEfffb+0xce>
  }
  else
  {
    A = 0;
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	629a      	str	r2, [r3, #40]	; 0x28
    B = 1;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80011d0:	62da      	str	r2, [r3, #44]	; 0x2c
    C = -1/ts;
 80011d2:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 80011d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80011da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    D = 1/ts;
 80011e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80011e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80011ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  }

  apply_saturation();
 80011f6:	6978      	ldr	r0, [r7, #20]
 80011f8:	f000 f926 	bl	8001448 <_ZN3PID16apply_saturationEv>
}
 80011fc:	bf00      	nop
 80011fe:	3718      	adds	r7, #24
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <_ZN3PID5setupEfff>:

void PID::setup(float kp, float ki, float kd)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001210:	edc7 0a01 	vstr	s1, [r7, #4]
 8001214:	ed87 1a00 	vstr	s2, [r7]
  this->kp = kp;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	68ba      	ldr	r2, [r7, #8]
 800121c:	611a      	str	r2, [r3, #16]
  this->ki = ki;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	615a      	str	r2, [r3, #20]
  this->kd = kd;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	619a      	str	r2, [r3, #24]
}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <_ZN3PID5resetEv>:

void PID::reset()
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  reset(0.0, 0.0);
 8001240:	eddf 0a05 	vldr	s1, [pc, #20]	; 8001258 <_ZN3PID5resetEv+0x20>
 8001244:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001258 <_ZN3PID5resetEv+0x20>
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 f807 	bl	800125c <_ZN3PID5resetEff>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	00000000 	.word	0x00000000

0800125c <_ZN3PID5resetEff>:

void PID::reset(float xi, float xd)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	60f8      	str	r0, [r7, #12]
 8001264:	ed87 0a02 	vstr	s0, [r7, #8]
 8001268:	edc7 0a01 	vstr	s1, [r7, #4]
  this-> xi = xi;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	621a      	str	r2, [r3, #32]
  this-> xd = xd;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	625a      	str	r2, [r3, #36]	; 0x24

  apply_saturation();
 8001278:	68f8      	ldr	r0, [r7, #12]
 800127a:	f000 f8e5 	bl	8001448 <_ZN3PID16apply_saturationEv>
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <_ZN3PID5inputEf>:

void PID::input(float e)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	ed87 0a00 	vstr	s0, [r7]
  this->e = e;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	61da      	str	r2, [r3, #28]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <_ZN3PID4stepEv>:

void PID::step()
{  
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  xi = xi + (bumpless ? ki*ts*e : ts*e);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	ed93 7a08 	vldr	s14, [r3, #32]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	7b1b      	ldrb	r3, [r3, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00d      	beq.n	80012d6 <_ZN3PID4stepEv+0x32>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	edd3 6a05 	vldr	s13, [r3, #20]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	edd3 7a00 	vldr	s15, [r3]
 80012c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	edd3 7a07 	vldr	s15, [r3, #28]
 80012d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012d4:	e007      	b.n	80012e6 <_ZN3PID4stepEv+0x42>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	edd3 6a00 	vldr	s13, [r3]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	edd3 7a07 	vldr	s15, [r3, #28]
 80012e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	edc3 7a08 	vstr	s15, [r3, #32]
  xd = A*xd + (bumpless ? kd*B*e : B*e);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80012fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	7b1b      	ldrb	r3, [r3, #12]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00d      	beq.n	8001324 <_ZN3PID4stepEv+0x80>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	edd3 6a06 	vldr	s13, [r3, #24]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001314:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	edd3 7a07 	vldr	s15, [r3, #28]
 800131e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001322:	e007      	b.n	8001334 <_ZN3PID4stepEv+0x90>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001330:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001334:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

  apply_saturation();
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 f882 	bl	8001448 <_ZN3PID16apply_saturationEv>
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <_ZN3PID6outputEv>:

float PID::output()
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  float u;

  if(bumpless) u = (kp + kd*D) * e + xi + C*xd;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	7b1b      	ldrb	r3, [r3, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d023      	beq.n	80013a4 <_ZN3PID6outputEv+0x58>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	edd3 6a06 	vldr	s13, [r3, #24]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800136e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001372:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	edd3 7a07 	vldr	s15, [r3, #28]
 800137c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	edd3 7a08 	vldr	s15, [r3, #32]
 8001386:	ee37 7a27 	vadd.f32	s14, s14, s15
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001396:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800139a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139e:	edc7 7a03 	vstr	s15, [r7, #12]
 80013a2:	e02c      	b.n	80013fe <_ZN3PID6outputEv+0xb2>
  else u = (kp + kd*D) * e + ki*xi + kd*C*xd;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	ed93 7a04 	vldr	s14, [r3, #16]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	edd3 6a06 	vldr	s13, [r3, #24]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80013b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	edd3 7a07 	vldr	s15, [r3, #28]
 80013c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	edd3 6a05 	vldr	s13, [r3, #20]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	edd3 7a08 	vldr	s15, [r3, #32]
 80013d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	edd3 6a06 	vldr	s13, [r3, #24]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80013e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80013f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fa:	edc7 7a03 	vstr	s15, [r7, #12]

  return u;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	ee07 3a90 	vmov	s15, r3
}
 8001404:	eeb0 0a67 	vmov.f32	s0, s15
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <_ZN3PID6evolveEf>:

float PID::evolve(float e)
{ 
 8001412:	b580      	push	{r7, lr}
 8001414:	b084      	sub	sp, #16
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	ed87 0a00 	vstr	s0, [r7]
  float u;
  
  input(e);
 800141e:	ed97 0a00 	vldr	s0, [r7]
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ff2f 	bl	8001286 <_ZN3PID5inputEf>
  u = output();
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff8f 	bl	800134c <_ZN3PID6outputEv>
 800142e:	ed87 0a03 	vstr	s0, [r7, #12]
  step();
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ff36 	bl	80012a4 <_ZN3PID4stepEv>

  return u;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	ee07 3a90 	vmov	s15, r3
}
 800143e:	eeb0 0a67 	vmov.f32	s0, s15
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <_ZN3PID16apply_saturationEv>:

void PID::apply_saturation()
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if(sat > 0)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	edd3 7a02 	vldr	s15, [r3, #8]
 8001456:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800145a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145e:	dc00      	bgt.n	8001462 <_ZN3PID16apply_saturationEv+0x1a>
  {
    xi = xi > +sat ? +sat : xi;
    xi = xi < -sat ? -sat : xi;
  }
}
 8001460:	e02a      	b.n	80014b8 <_ZN3PID16apply_saturationEv+0x70>
    xi = xi > +sat ? +sat : xi;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	ed93 7a08 	vldr	s14, [r3, #32]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	edd3 7a02 	vldr	s15, [r3, #8]
 800146e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001476:	dd02      	ble.n	800147e <_ZN3PID16apply_saturationEv+0x36>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	e001      	b.n	8001482 <_ZN3PID16apply_saturationEv+0x3a>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6213      	str	r3, [r2, #32]
    xi = xi < -sat ? -sat : xi;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	ed93 7a08 	vldr	s14, [r3, #32]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001492:	eef1 7a67 	vneg.f32	s15, s15
 8001496:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800149a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800149e:	d505      	bpl.n	80014ac <_ZN3PID16apply_saturationEv+0x64>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80014a6:	eef1 7a67 	vneg.f32	s15, s15
 80014aa:	e002      	b.n	80014b2 <_ZN3PID16apply_saturationEv+0x6a>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	edd3 7a08 	vldr	s15, [r3, #32]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	; 0x28
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80014d0:	f008 f9d6 	bl	8009880 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80014d4:	4b5b      	ldr	r3, [pc, #364]	; (8001644 <pvPortMallocMicroROS+0x180>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80014dc:	f000 f98a 	bl	80017f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80014e0:	4b59      	ldr	r3, [pc, #356]	; (8001648 <pvPortMallocMicroROS+0x184>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4013      	ands	r3, r2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f040 8092 	bne.w	8001612 <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d01f      	beq.n	8001534 <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 80014f4:	2208      	movs	r2, #8
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4413      	add	r3, r2
 80014fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	2b00      	cmp	r3, #0
 8001504:	d016      	beq.n	8001534 <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f023 0307 	bic.w	r3, r3, #7
 800150c:	3308      	adds	r3, #8
 800150e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00c      	beq.n	8001534 <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800151a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800151e:	b672      	cpsid	i
 8001520:	f383 8811 	msr	BASEPRI, r3
 8001524:	f3bf 8f6f 	isb	sy
 8001528:	f3bf 8f4f 	dsb	sy
 800152c:	b662      	cpsie	i
 800152e:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001530:	bf00      	nop
 8001532:	e7fe      	b.n	8001532 <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d06b      	beq.n	8001612 <pvPortMallocMicroROS+0x14e>
 800153a:	4b44      	ldr	r3, [pc, #272]	; (800164c <pvPortMallocMicroROS+0x188>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	429a      	cmp	r2, r3
 8001542:	d866      	bhi.n	8001612 <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001544:	4b42      	ldr	r3, [pc, #264]	; (8001650 <pvPortMallocMicroROS+0x18c>)
 8001546:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001548:	4b41      	ldr	r3, [pc, #260]	; (8001650 <pvPortMallocMicroROS+0x18c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800154e:	e004      	b.n	800155a <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	429a      	cmp	r2, r3
 8001562:	d903      	bls.n	800156c <pvPortMallocMicroROS+0xa8>
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1f1      	bne.n	8001550 <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800156c:	4b35      	ldr	r3, [pc, #212]	; (8001644 <pvPortMallocMicroROS+0x180>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001572:	429a      	cmp	r2, r3
 8001574:	d04d      	beq.n	8001612 <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2208      	movs	r2, #8
 800157c:	4413      	add	r3, r2
 800157e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	6a3b      	ldr	r3, [r7, #32]
 8001586:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	1ad2      	subs	r2, r2, r3
 8001590:	2308      	movs	r3, #8
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	429a      	cmp	r2, r3
 8001596:	d921      	bls.n	80015dc <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00c      	beq.n	80015c4 <pvPortMallocMicroROS+0x100>
	__asm volatile
 80015aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015ae:	b672      	cpsid	i
 80015b0:	f383 8811 	msr	BASEPRI, r3
 80015b4:	f3bf 8f6f 	isb	sy
 80015b8:	f3bf 8f4f 	dsb	sy
 80015bc:	b662      	cpsie	i
 80015be:	613b      	str	r3, [r7, #16]
}
 80015c0:	bf00      	nop
 80015c2:	e7fe      	b.n	80015c2 <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	1ad2      	subs	r2, r2, r3
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80015d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80015d6:	69b8      	ldr	r0, [r7, #24]
 80015d8:	f000 f96e 	bl	80018b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <pvPortMallocMicroROS+0x188>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	4a19      	ldr	r2, [pc, #100]	; (800164c <pvPortMallocMicroROS+0x188>)
 80015e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <pvPortMallocMicroROS+0x188>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <pvPortMallocMicroROS+0x190>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d203      	bcs.n	80015fe <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <pvPortMallocMicroROS+0x188>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a16      	ldr	r2, [pc, #88]	; (8001654 <pvPortMallocMicroROS+0x190>)
 80015fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <pvPortMallocMicroROS+0x184>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	431a      	orrs	r2, r3
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001612:	f008 f943 	bl	800989c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00c      	beq.n	800163a <pvPortMallocMicroROS+0x176>
	__asm volatile
 8001620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001624:	b672      	cpsid	i
 8001626:	f383 8811 	msr	BASEPRI, r3
 800162a:	f3bf 8f6f 	isb	sy
 800162e:	f3bf 8f4f 	dsb	sy
 8001632:	b662      	cpsie	i
 8001634:	60fb      	str	r3, [r7, #12]
}
 8001636:	bf00      	nop
 8001638:	e7fe      	b.n	8001638 <pvPortMallocMicroROS+0x174>
	return pvReturn;
 800163a:	69fb      	ldr	r3, [r7, #28]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3728      	adds	r7, #40	; 0x28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20005a4c 	.word	0x20005a4c
 8001648:	20005a58 	.word	0x20005a58
 800164c:	20005a50 	.word	0x20005a50
 8001650:	20005a44 	.word	0x20005a44
 8001654:	20005a54 	.word	0x20005a54

08001658 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d04c      	beq.n	8001704 <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800166a:	2308      	movs	r3, #8
 800166c:	425b      	negs	r3, r3
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	4413      	add	r3, r2
 8001672:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	4b23      	ldr	r3, [pc, #140]	; (800170c <vPortFreeMicroROS+0xb4>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4013      	ands	r3, r2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10c      	bne.n	80016a0 <vPortFreeMicroROS+0x48>
	__asm volatile
 8001686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800168a:	b672      	cpsid	i
 800168c:	f383 8811 	msr	BASEPRI, r3
 8001690:	f3bf 8f6f 	isb	sy
 8001694:	f3bf 8f4f 	dsb	sy
 8001698:	b662      	cpsie	i
 800169a:	60fb      	str	r3, [r7, #12]
}
 800169c:	bf00      	nop
 800169e:	e7fe      	b.n	800169e <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d00c      	beq.n	80016c2 <vPortFreeMicroROS+0x6a>
	__asm volatile
 80016a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ac:	b672      	cpsid	i
 80016ae:	f383 8811 	msr	BASEPRI, r3
 80016b2:	f3bf 8f6f 	isb	sy
 80016b6:	f3bf 8f4f 	dsb	sy
 80016ba:	b662      	cpsie	i
 80016bc:	60bb      	str	r3, [r7, #8]
}
 80016be:	bf00      	nop
 80016c0:	e7fe      	b.n	80016c0 <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	4b11      	ldr	r3, [pc, #68]	; (800170c <vPortFreeMicroROS+0xb4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4013      	ands	r3, r2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d019      	beq.n	8001704 <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d115      	bne.n	8001704 <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <vPortFreeMicroROS+0xb4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	43db      	mvns	r3, r3
 80016e2:	401a      	ands	r2, r3
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80016e8:	f008 f8ca 	bl	8009880 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <vPortFreeMicroROS+0xb8>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4413      	add	r3, r2
 80016f6:	4a06      	ldr	r2, [pc, #24]	; (8001710 <vPortFreeMicroROS+0xb8>)
 80016f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80016fa:	6938      	ldr	r0, [r7, #16]
 80016fc:	f000 f8dc 	bl	80018b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001700:	f008 f8cc 	bl	800989c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001704:	bf00      	nop
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20005a58 	.word	0x20005a58
 8001710:	20005a50 	.word	0x20005a50

08001714 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001720:	2308      	movs	r3, #8
 8001722:	425b      	negs	r3, r3
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	4413      	add	r3, r2
 8001728:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	4b06      	ldr	r3, [pc, #24]	; (800174c <getBlockSize+0x38>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	43db      	mvns	r3, r3
 8001738:	4013      	ands	r3, r2
 800173a:	60fb      	str	r3, [r7, #12]

	return count;
 800173c:	68fb      	ldr	r3, [r7, #12]
}
 800173e:	4618      	mov	r0, r3
 8001740:	371c      	adds	r7, #28
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	20005a58 	.word	0x20005a58

08001750 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800175a:	f008 f891 	bl	8009880 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 800175e:	6838      	ldr	r0, [r7, #0]
 8001760:	f7ff feb0 	bl	80014c4 <pvPortMallocMicroROS>
 8001764:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d017      	beq.n	800179c <pvPortReallocMicroROS+0x4c>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d014      	beq.n	800179c <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff ffce 	bl	8001714 <getBlockSize>
 8001778:	4603      	mov	r3, r0
 800177a:	2208      	movs	r2, #8
 800177c:	1a9b      	subs	r3, r3, r2
 800177e:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	429a      	cmp	r2, r3
 8001786:	d201      	bcs.n	800178c <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	68b8      	ldr	r0, [r7, #8]
 8001792:	f019 f858 	bl	801a846 <memcpy>

		vPortFreeMicroROS(pv);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ff5e 	bl	8001658 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 800179c:	f008 f87e 	bl	800989c <xTaskResumeAll>

	return newmem;
 80017a0:	68bb      	ldr	r3, [r7, #8]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b086      	sub	sp, #24
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80017b4:	f008 f864 	bl	8009880 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	fb02 f303 	mul.w	r3, r2, r3
 80017c0:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80017c2:	6978      	ldr	r0, [r7, #20]
 80017c4:	f7ff fe7e 	bl	80014c4 <pvPortMallocMicroROS>
 80017c8:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	613b      	str	r3, [r7, #16]

  	while(count--)
 80017ce:	e004      	b.n	80017da <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	613a      	str	r2, [r7, #16]
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	1e5a      	subs	r2, r3, #1
 80017de:	617a      	str	r2, [r7, #20]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1f5      	bne.n	80017d0 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80017e4:	f008 f85a 	bl	800989c <xTaskResumeAll>
  	return mem;
 80017e8:	68fb      	ldr	r3, [r7, #12]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80017fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80017fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001800:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <prvHeapInit+0xac>)
 8001802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00c      	beq.n	8001828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	3307      	adds	r3, #7
 8001812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f023 0307 	bic.w	r3, r3, #7
 800181a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	4a1f      	ldr	r2, [pc, #124]	; (80018a0 <prvHeapInit+0xac>)
 8001824:	4413      	add	r3, r2
 8001826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800182c:	4a1d      	ldr	r2, [pc, #116]	; (80018a4 <prvHeapInit+0xb0>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001832:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <prvHeapInit+0xb0>)
 8001834:	2200      	movs	r2, #0
 8001836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	4413      	add	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001840:	2208      	movs	r2, #8
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1a9b      	subs	r3, r3, r2
 8001846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f023 0307 	bic.w	r3, r3, #7
 800184e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4a15      	ldr	r2, [pc, #84]	; (80018a8 <prvHeapInit+0xb4>)
 8001854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001856:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <prvHeapInit+0xb4>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2200      	movs	r2, #0
 800185c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800185e:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <prvHeapInit+0xb4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	1ad2      	subs	r2, r2, r3
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <prvHeapInit+0xb4>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	4a0a      	ldr	r2, [pc, #40]	; (80018ac <prvHeapInit+0xb8>)
 8001882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	4a09      	ldr	r2, [pc, #36]	; (80018b0 <prvHeapInit+0xbc>)
 800188a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <prvHeapInit+0xc0>)
 800188e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001892:	601a      	str	r2, [r3, #0]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	20001e44 	.word	0x20001e44
 80018a4:	20005a44 	.word	0x20005a44
 80018a8:	20005a4c 	.word	0x20005a4c
 80018ac:	20005a54 	.word	0x20005a54
 80018b0:	20005a50 	.word	0x20005a50
 80018b4:	20005a58 	.word	0x20005a58

080018b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80018c0:	4b28      	ldr	r3, [pc, #160]	; (8001964 <prvInsertBlockIntoFreeList+0xac>)
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	e002      	b.n	80018cc <prvInsertBlockIntoFreeList+0x14>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d8f7      	bhi.n	80018c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	4413      	add	r3, r2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d108      	bne.n	80018fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	441a      	add	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	441a      	add	r2, r3
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d118      	bne.n	8001940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <prvInsertBlockIntoFreeList+0xb0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	d00d      	beq.n	8001936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	441a      	add	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	e008      	b.n	8001948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <prvInsertBlockIntoFreeList+0xb0>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	e003      	b.n	8001948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	429a      	cmp	r2, r3
 800194e:	d002      	beq.n	8001956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20005a44 	.word	0x20005a44
 8001968:	20005a4c 	.word	0x20005a4c

0800196c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <MX_DMA_Init+0x48>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a0f      	ldr	r2, [pc, #60]	; (80019b4 <MX_DMA_Init+0x48>)
 8001978:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <MX_DMA_Init+0x48>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	2105      	movs	r1, #5
 800198e:	200c      	movs	r0, #12
 8001990:	f001 fdf0 	bl	8003574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001994:	200c      	movs	r0, #12
 8001996:	f001 fe09 	bl	80035ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2105      	movs	r1, #5
 800199e:	200e      	movs	r0, #14
 80019a0:	f001 fde8 	bl	8003574 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80019a4:	200e      	movs	r0, #14
 80019a6:	f001 fe01 	bl	80035ac <HAL_NVIC_EnableIRQ>

}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800

080019b8 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80019c6:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80019c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019cc:	4904      	ldr	r1, [pc, #16]	; (80019e0 <cubemx_transport_open+0x28>)
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f004 ffea 	bl	80069a8 <HAL_UART_Receive_DMA>
    return true;
 80019d4:	2301      	movs	r3, #1
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20005a5c 	.word	0x20005a5c

080019e4 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80019f2:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f005 f81b 	bl	8006a30 <HAL_UART_DMAStop>
    return true;
 80019fa:	2301      	movs	r3, #1
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, const uint8_t * buf, size_t len, uint8_t * err){
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
 8001a10:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001a18:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a1e:	2b20      	cmp	r3, #32
 8001a20:	d11a      	bne.n	8001a58 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	461a      	mov	r2, r3
 8001a28:	68b9      	ldr	r1, [r7, #8]
 8001a2a:	6978      	ldr	r0, [r7, #20]
 8001a2c:	f004 ff40 	bl	80068b0 <HAL_UART_Transmit_DMA>
 8001a30:	4603      	mov	r3, r0
 8001a32:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001a34:	e002      	b.n	8001a3c <cubemx_transport_write+0x38>
            osDelay(1);
 8001a36:	2001      	movs	r0, #1
 8001a38:	f006 fe98 	bl	800876c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001a3c:	7cfb      	ldrb	r3, [r7, #19]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d103      	bne.n	8001a4a <cubemx_transport_write+0x46>
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a46:	2b20      	cmp	r3, #32
 8001a48:	d1f5      	bne.n	8001a36 <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 8001a4a:	7cfb      	ldrb	r3, [r7, #19]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <cubemx_transport_write+0x50>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	e002      	b.n	8001a5a <cubemx_transport_write+0x56>
 8001a54:	2300      	movs	r3, #0
 8001a56:	e000      	b.n	8001a5a <cubemx_transport_write+0x56>
    }else{
        return 0;
 8001a58:	2300      	movs	r3, #0
    }
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
 8001a70:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001a78:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a7e:	b672      	cpsid	i
}
 8001a80:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001a8e:	4a1c      	ldr	r2, [pc, #112]	; (8001b00 <cubemx_transport_read+0x9c>)
 8001a90:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a92:	b662      	cpsie	i
}
 8001a94:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	f006 fe65 	bl	800876c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001aa2:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <cubemx_transport_read+0xa0>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <cubemx_transport_read+0x9c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d103      	bne.n	8001ab6 <cubemx_transport_read+0x52>
 8001aae:	69fa      	ldr	r2, [r7, #28]
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	dbe3      	blt.n	8001a7e <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001aba:	e011      	b.n	8001ae0 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8001abc:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <cubemx_transport_read+0xa0>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68b9      	ldr	r1, [r7, #8]
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	440b      	add	r3, r1
 8001ac6:	4910      	ldr	r1, [pc, #64]	; (8001b08 <cubemx_transport_read+0xa4>)
 8001ac8:	5c8a      	ldrb	r2, [r1, r2]
 8001aca:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001acc:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <cubemx_transport_read+0xa0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ad6:	4a0b      	ldr	r2, [pc, #44]	; (8001b04 <cubemx_transport_read+0xa0>)
 8001ad8:	6013      	str	r3, [r2, #0]
        wrote++;
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	3301      	adds	r3, #1
 8001ade:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <cubemx_transport_read+0xa0>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <cubemx_transport_read+0x9c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d003      	beq.n	8001af4 <cubemx_transport_read+0x90>
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d3e3      	bcc.n	8001abc <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8001af4:	69bb      	ldr	r3, [r7, #24]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3720      	adds	r7, #32
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20006260 	.word	0x20006260
 8001b04:	2000625c 	.word	0x2000625c
 8001b08:	20005a5c 	.word	0x20005a5c

08001b0c <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b10:	4a08      	ldr	r2, [pc, #32]	; (8001b34 <_Z16MX_FREERTOS_Initv+0x28>)
 8001b12:	2100      	movs	r1, #0
 8001b14:	4808      	ldr	r0, [pc, #32]	; (8001b38 <_Z16MX_FREERTOS_Initv+0x2c>)
 8001b16:	f006 fd83 	bl	8008620 <osThreadNew>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4a07      	ldr	r2, [pc, #28]	; (8001b3c <_Z16MX_FREERTOS_Initv+0x30>)
 8001b1e:	6013      	str	r3, [r2, #0]

  /* creation of cycleRobot */
  cycleRobotHandle = osThreadNew(cycleRobotTask, NULL, &cycleRobot_attributes);
 8001b20:	4a07      	ldr	r2, [pc, #28]	; (8001b40 <_Z16MX_FREERTOS_Initv+0x34>)
 8001b22:	2100      	movs	r1, #0
 8001b24:	4807      	ldr	r0, [pc, #28]	; (8001b44 <_Z16MX_FREERTOS_Initv+0x38>)
 8001b26:	f006 fd7b 	bl	8008620 <osThreadNew>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	4a06      	ldr	r2, [pc, #24]	; (8001b48 <_Z16MX_FREERTOS_Initv+0x3c>)
 8001b2e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	0801b68c 	.word	0x0801b68c
 8001b38:	08001b4d 	.word	0x08001b4d
 8001b3c:	20006264 	.word	0x20006264
 8001b40:	0801b6b0 	.word	0x0801b6b0
 8001b44:	08001d59 	.word	0x08001d59
 8001b48:	20006268 	.word	0x20006268

08001b4c <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001b4c:	b5b0      	push	{r4, r5, r7, lr}
 8001b4e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001b52:	af02      	add	r7, sp, #8
 8001b54:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001b58:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001b5c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
	rmw_uros_set_custom_transport(
 8001b5e:	4b6f      	ldr	r3, [pc, #444]	; (8001d1c <_Z16StartDefaultTaskPv+0x1d0>)
 8001b60:	9301      	str	r3, [sp, #4]
 8001b62:	4b6f      	ldr	r3, [pc, #444]	; (8001d20 <_Z16StartDefaultTaskPv+0x1d4>)
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	4b6f      	ldr	r3, [pc, #444]	; (8001d24 <_Z16StartDefaultTaskPv+0x1d8>)
 8001b68:	4a6f      	ldr	r2, [pc, #444]	; (8001d28 <_Z16StartDefaultTaskPv+0x1dc>)
 8001b6a:	4970      	ldr	r1, [pc, #448]	; (8001d2c <_Z16StartDefaultTaskPv+0x1e0>)
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	f00b f94f 	bl	800ce10 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001b72:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8001b76:	4618      	mov	r0, r3
 8001b78:	f00b f880 	bl	800cc7c <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8001b7c:	4b6c      	ldr	r3, [pc, #432]	; (8001d30 <_Z16StartDefaultTaskPv+0x1e4>)
 8001b7e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
	freeRTOS_allocator.deallocate = microros_deallocate;
 8001b82:	4b6c      	ldr	r3, [pc, #432]	; (8001d34 <_Z16StartDefaultTaskPv+0x1e8>)
 8001b84:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	freeRTOS_allocator.reallocate = microros_reallocate;
 8001b88:	4b6b      	ldr	r3, [pc, #428]	; (8001d38 <_Z16StartDefaultTaskPv+0x1ec>)
 8001b8a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001b8e:	4b6b      	ldr	r3, [pc, #428]	; (8001d3c <_Z16StartDefaultTaskPv+0x1f0>)
 8001b90:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) return;
 8001b94:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f00b f87d 	bl	800cc98 <rcutils_set_default_allocator>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f083 0301 	eor.w	r3, r3, #1
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f040 80a6 	bne.w	8001cf8 <_Z16StartDefaultTaskPv+0x1ac>

	rcl_ret_t rc;
	rcl_node_t node; // nodo;
	rcl_service_t setup_service, control_service; //servizi
	const char* setup_service_name = "/setup";
 8001bac:	4b64      	ldr	r3, [pc, #400]	; (8001d40 <_Z16StartDefaultTaskPv+0x1f4>)
 8001bae:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
	const char* control_service_name = "/control"; //nomi dei servizi
 8001bb2:	4b64      	ldr	r3, [pc, #400]	; (8001d44 <_Z16StartDefaultTaskPv+0x1f8>)
 8001bb4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
	const rosidl_service_type_support_t* setup_type_support =
		ROSIDL_GET_SRV_TYPE_SUPPORT(racs_services, srv, Setup);
 8001bb8:	f009 fb0e 	bl	800b1d8 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup>
 8001bbc:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
	const rosidl_service_type_support_t* control_type_support =
		ROSIDL_GET_SRV_TYPE_SUPPORT(racs_services, srv, Control);
 8001bc0:	f009 fae4 	bl	800b18c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control>
 8001bc4:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
	racs_services__srv__Setup_Request req_setup;
	racs_services__srv__Setup_Response res_setup;
	racs_services__srv__Control_Request req_control;
	racs_services__srv__Control_Response res_control;

	allocator = rcl_get_default_allocator();
 8001bc8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f00b f881 	bl	800ccd4 <rcutils_get_default_allocator>
 8001bd2:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001bd6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001bda:	f507 74ba 	add.w	r4, r7, #372	; 0x174
 8001bde:	461d      	mov	r5, r3
 8001be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001be4:	682b      	ldr	r3, [r5, #0]
 8001be6:	6023      	str	r3, [r4, #0]

	rc = rclc_support_init(&support, 0, NULL, &allocator);
 8001be8:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001bec:	f507 70c4 	add.w	r0, r7, #392	; 0x188
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	f00a ff74 	bl	800cae0 <rclc_support_init>
 8001bf8:	f8c7 01e4 	str.w	r0, [r7, #484]	; 0x1e4
	if (rc != RCL_RET_OK) return;
 8001bfc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d17b      	bne.n	8001cfc <_Z16StartDefaultTaskPv+0x1b0>

	rc = rclc_node_init_default(&node, "STM32_node", "", &support);
 8001c04:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001c08:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
 8001c0c:	4a4e      	ldr	r2, [pc, #312]	; (8001d48 <_Z16StartDefaultTaskPv+0x1fc>)
 8001c0e:	494f      	ldr	r1, [pc, #316]	; (8001d4c <_Z16StartDefaultTaskPv+0x200>)
 8001c10:	f00a ffb0 	bl	800cb74 <rclc_node_init_default>
 8001c14:	f8c7 01e4 	str.w	r0, [r7, #484]	; 0x1e4
	if (rc != RCL_RET_OK) return;
 8001c18:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d16f      	bne.n	8001d00 <_Z16StartDefaultTaskPv+0x1b4>

	rc = rclc_service_init_default(
 8001c20:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 8001c24:	f507 70e0 	add.w	r0, r7, #448	; 0x1c0
 8001c28:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001c2c:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8001c30:	f00a ffe2 	bl	800cbf8 <rclc_service_init_default>
 8001c34:	f8c7 01e4 	str.w	r0, [r7, #484]	; 0x1e4
		&setup_service, &node, setup_type_support, setup_service_name);

	if (rc != RCL_RET_OK) return;
 8001c38:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d161      	bne.n	8001d04 <_Z16StartDefaultTaskPv+0x1b8>

	rc = rclc_service_init_default(
 8001c40:	f507 71e2 	add.w	r1, r7, #452	; 0x1c4
 8001c44:	f507 70de 	add.w	r0, r7, #444	; 0x1bc
 8001c48:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001c4c:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8001c50:	f00a ffd2 	bl	800cbf8 <rclc_service_init_default>
 8001c54:	f8c7 01e4 	str.w	r0, [r7, #484]	; 0x1e4
		&control_service, &node, control_type_support, control_service_name);

	if (rc != RCL_RET_OK) return;
 8001c58:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d153      	bne.n	8001d08 <_Z16StartDefaultTaskPv+0x1bc>

	rclc_executor_t executor;
	executor = rclc_executor_get_zero_initialized_executor();
 8001c60:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001c64:	f5a3 74a4 	sub.w	r4, r3, #328	; 0x148
 8001c68:	463b      	mov	r3, r7
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f00a fc40 	bl	800c4f0 <rclc_executor_get_zero_initialized_executor>
 8001c70:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001c74:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001c78:	4620      	mov	r0, r4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	2390      	movs	r3, #144	; 0x90
 8001c7e:	461a      	mov	r2, r3
 8001c80:	f018 fde1 	bl	801a846 <memcpy>
	unsigned int num_handles = 2;
 8001c84:	2302      	movs	r3, #2
 8001c86:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
	rclc_executor_init(&executor, &support.context, num_handles, &allocator);
 8001c8a:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001c8e:	f507 71c4 	add.w	r1, r7, #392	; 0x188
 8001c92:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8001c96:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8001c9a:	f00a fc35 	bl	800c508 <rclc_executor_init>

	rc = rclc_executor_add_service(
 8001c9e:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8001ca2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8001ca6:	f507 71e0 	add.w	r1, r7, #448	; 0x1c0
 8001caa:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8001cae:	4c28      	ldr	r4, [pc, #160]	; (8001d50 <_Z16StartDefaultTaskPv+0x204>)
 8001cb0:	9400      	str	r4, [sp, #0]
 8001cb2:	f00a fca5 	bl	800c600 <rclc_executor_add_service>
 8001cb6:	f8c7 01e4 	str.w	r0, [r7, #484]	; 0x1e4
		&executor, &setup_service, &req_setup,
		&res_setup, setup_callback);
	if (rc != RCL_RET_OK) return;
 8001cba:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d124      	bne.n	8001d0c <_Z16StartDefaultTaskPv+0x1c0>

	rc = rclc_executor_add_service(
 8001cc2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001cc6:	f507 72a2 	add.w	r2, r7, #324	; 0x144
 8001cca:	f507 71de 	add.w	r1, r7, #444	; 0x1bc
 8001cce:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8001cd2:	4c20      	ldr	r4, [pc, #128]	; (8001d54 <_Z16StartDefaultTaskPv+0x208>)
 8001cd4:	9400      	str	r4, [sp, #0]
 8001cd6:	f00a fc93 	bl	800c600 <rclc_executor_add_service>
 8001cda:	f8c7 01e4 	str.w	r0, [r7, #484]	; 0x1e4
		&executor, &control_service, &req_control,
		&res_control, control_callback);
	if (rc != RCL_RET_OK) return;
 8001cde:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d114      	bne.n	8001d10 <_Z16StartDefaultTaskPv+0x1c4>

	rclc_executor_spin(&executor);
 8001ce6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001cea:	4618      	mov	r0, r3
 8001cec:	f00a feb8 	bl	800ca60 <rclc_executor_spin>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	f006 fd3b 	bl	800876c <osDelay>
 8001cf6:	e7fb      	b.n	8001cf0 <_Z16StartDefaultTaskPv+0x1a4>
	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) return;
 8001cf8:	bf00      	nop
 8001cfa:	e00a      	b.n	8001d12 <_Z16StartDefaultTaskPv+0x1c6>
	if (rc != RCL_RET_OK) return;
 8001cfc:	bf00      	nop
 8001cfe:	e008      	b.n	8001d12 <_Z16StartDefaultTaskPv+0x1c6>
	if (rc != RCL_RET_OK) return;
 8001d00:	bf00      	nop
 8001d02:	e006      	b.n	8001d12 <_Z16StartDefaultTaskPv+0x1c6>
	if (rc != RCL_RET_OK) return;
 8001d04:	bf00      	nop
 8001d06:	e004      	b.n	8001d12 <_Z16StartDefaultTaskPv+0x1c6>
	if (rc != RCL_RET_OK) return;
 8001d08:	bf00      	nop
 8001d0a:	e002      	b.n	8001d12 <_Z16StartDefaultTaskPv+0x1c6>
	if (rc != RCL_RET_OK) return;
 8001d0c:	bf00      	nop
 8001d0e:	e000      	b.n	8001d12 <_Z16StartDefaultTaskPv+0x1c6>
	if (rc != RCL_RET_OK) return;
 8001d10:	bf00      	nop
  }
  /* USER CODE END StartDefaultTask */
}
 8001d12:	f507 77fc 	add.w	r7, r7, #504	; 0x1f8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bdb0      	pop	{r4, r5, r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	08001a65 	.word	0x08001a65
 8001d20:	08001a05 	.word	0x08001a05
 8001d24:	080019e5 	.word	0x080019e5
 8001d28:	080019b9 	.word	0x080019b9
 8001d2c:	200064dc 	.word	0x200064dc
 8001d30:	0800206d 	.word	0x0800206d
 8001d34:	080020b1 	.word	0x080020b1
 8001d38:	080020e9 	.word	0x080020e9
 8001d3c:	08002155 	.word	0x08002155
 8001d40:	0801b630 	.word	0x0801b630
 8001d44:	0801b638 	.word	0x0801b638
 8001d48:	0801b644 	.word	0x0801b644
 8001d4c:	0801b648 	.word	0x0801b648
 8001d50:	080006e5 	.word	0x080006e5
 8001d54:	080006ad 	.word	0x080006ad

08001d58 <_Z14cycleRobotTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_cycleRobotTask */
void cycleRobotTask(void *argument)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN cycleRobotTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d60:	2001      	movs	r0, #1
 8001d62:	f006 fd03 	bl	800876c <osDelay>
 8001d66:	e7fb      	b.n	8001d60 <_Z14cycleRobotTaskPv+0x8>

08001d68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08c      	sub	sp, #48	; 0x30
 8001d6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6e:	f107 031c 	add.w	r3, r7, #28
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]
 8001d7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d7e:	4b58      	ldr	r3, [pc, #352]	; (8001ee0 <MX_GPIO_Init+0x178>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a57      	ldr	r2, [pc, #348]	; (8001ee0 <MX_GPIO_Init+0x178>)
 8001d84:	f043 0310 	orr.w	r3, r3, #16
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b55      	ldr	r3, [pc, #340]	; (8001ee0 <MX_GPIO_Init+0x178>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f003 0310 	and.w	r3, r3, #16
 8001d92:	61bb      	str	r3, [r7, #24]
 8001d94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d96:	4b52      	ldr	r3, [pc, #328]	; (8001ee0 <MX_GPIO_Init+0x178>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	4a51      	ldr	r2, [pc, #324]	; (8001ee0 <MX_GPIO_Init+0x178>)
 8001d9c:	f043 0304 	orr.w	r3, r3, #4
 8001da0:	6313      	str	r3, [r2, #48]	; 0x30
 8001da2:	4b4f      	ldr	r3, [pc, #316]	; (8001ee0 <MX_GPIO_Init+0x178>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dae:	4b4c      	ldr	r3, [pc, #304]	; (8001ee0 <MX_GPIO_Init+0x178>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a4b      	ldr	r2, [pc, #300]	; (8001ee0 <MX_GPIO_Init+0x178>)
 8001db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b49      	ldr	r3, [pc, #292]	; (8001ee0 <MX_GPIO_Init+0x178>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	4b46      	ldr	r3, [pc, #280]	; (8001ee0 <MX_GPIO_Init+0x178>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a45      	ldr	r2, [pc, #276]	; (8001ee0 <MX_GPIO_Init+0x178>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b43      	ldr	r3, [pc, #268]	; (8001ee0 <MX_GPIO_Init+0x178>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dde:	4b40      	ldr	r3, [pc, #256]	; (8001ee0 <MX_GPIO_Init+0x178>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a3f      	ldr	r2, [pc, #252]	; (8001ee0 <MX_GPIO_Init+0x178>)
 8001de4:	f043 0302 	orr.w	r3, r3, #2
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b3d      	ldr	r3, [pc, #244]	; (8001ee0 <MX_GPIO_Init+0x178>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001df6:	4b3a      	ldr	r3, [pc, #232]	; (8001ee0 <MX_GPIO_Init+0x178>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a39      	ldr	r2, [pc, #228]	; (8001ee0 <MX_GPIO_Init+0x178>)
 8001dfc:	f043 0308 	orr.w	r3, r3, #8
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b37      	ldr	r3, [pc, #220]	; (8001ee0 <MX_GPIO_Init+0x178>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	607b      	str	r3, [r7, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e0e:	4b34      	ldr	r3, [pc, #208]	; (8001ee0 <MX_GPIO_Init+0x178>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	4a33      	ldr	r2, [pc, #204]	; (8001ee0 <MX_GPIO_Init+0x178>)
 8001e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e18:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1a:	4b31      	ldr	r3, [pc, #196]	; (8001ee0 <MX_GPIO_Init+0x178>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001e26:	2200      	movs	r2, #0
 8001e28:	f244 0181 	movw	r1, #16513	; 0x4081
 8001e2c:	482d      	ldr	r0, [pc, #180]	; (8001ee4 <MX_GPIO_Init+0x17c>)
 8001e2e:	f002 f9a5 	bl	800417c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR5_INA_Pin|MOTOR5_INB_Pin|MOTOR1_INA_Pin|MOTOR1_INB_Pin
 8001e32:	2200      	movs	r2, #0
 8001e34:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 8001e38:	482b      	ldr	r0, [pc, #172]	; (8001ee8 <MX_GPIO_Init+0x180>)
 8001e3a:	f002 f99f 	bl	800417c <HAL_GPIO_WritePin>
                          |MOTOR2_INA_Pin|MOTOR2_INB_Pin|MOTOR3_INA_Pin|MOTOR3_INB_Pin
                          |MOTOR4_INA_Pin|MOTOR4_INB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MOTOR6_INA_Pin|MOTOR6_INB_Pin|PIN_TOGGLE_Pin|MOTORS_EN_Pin
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f647 616c 	movw	r1, #32364	; 0x7e6c
 8001e44:	4829      	ldr	r0, [pc, #164]	; (8001eec <MX_GPIO_Init+0x184>)
 8001e46:	f002 f999 	bl	800417c <HAL_GPIO_WritePin>
                          |MOTOR1_END_Pin|MOTOR2_END_Pin|MOTOR3_END_Pin|MOTOR4_END_Pin
                          |MOTOR5_END_Pin|MOTOR6_END_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001e4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e50:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001e5a:	f107 031c 	add.w	r3, r7, #28
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4823      	ldr	r0, [pc, #140]	; (8001ef0 <MX_GPIO_Init+0x188>)
 8001e62:	f001 ffc7 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001e66:	f244 0381 	movw	r3, #16513	; 0x4081
 8001e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e74:	2300      	movs	r3, #0
 8001e76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e78:	f107 031c 	add.w	r3, r7, #28
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4819      	ldr	r0, [pc, #100]	; (8001ee4 <MX_GPIO_Init+0x17c>)
 8001e80:	f001 ffb8 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = MOTOR5_INA_Pin|MOTOR5_INB_Pin|MOTOR1_INA_Pin|MOTOR1_INB_Pin
 8001e84:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 8001e88:	61fb      	str	r3, [r7, #28]
                          |MOTOR2_INA_Pin|MOTOR2_INB_Pin|MOTOR3_INA_Pin|MOTOR3_INB_Pin
                          |MOTOR4_INA_Pin|MOTOR4_INB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e96:	f107 031c 	add.w	r3, r7, #28
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4812      	ldr	r0, [pc, #72]	; (8001ee8 <MX_GPIO_Init+0x180>)
 8001e9e:	f001 ffa9 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = MOTOR6_INA_Pin|MOTOR6_INB_Pin|PIN_TOGGLE_Pin|MOTORS_EN_Pin
 8001ea2:	f647 636c 	movw	r3, #32364	; 0x7e6c
 8001ea6:	61fb      	str	r3, [r7, #28]
                          |MOTOR1_END_Pin|MOTOR2_END_Pin|MOTOR3_END_Pin|MOTOR4_END_Pin
                          |MOTOR5_END_Pin|MOTOR6_END_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001eb4:	f107 031c 	add.w	r3, r7, #28
 8001eb8:	4619      	mov	r1, r3
 8001eba:	480c      	ldr	r0, [pc, #48]	; (8001eec <MX_GPIO_Init+0x184>)
 8001ebc:	f001 ff9a 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ecc:	f107 031c 	add.w	r3, r7, #28
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4806      	ldr	r0, [pc, #24]	; (8001eec <MX_GPIO_Init+0x184>)
 8001ed4:	f001 ff8e 	bl	8003df4 <HAL_GPIO_Init>

}
 8001ed8:	bf00      	nop
 8001eda:	3730      	adds	r7, #48	; 0x30
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020400 	.word	0x40020400
 8001ee8:	40020c00 	.word	0x40020c00
 8001eec:	40021800 	.word	0x40021800
 8001ef0:	40020800 	.word	0x40020800

08001ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ef8:	f001 fa33 	bl	8003362 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001efc:	f000 f81e 	bl	8001f3c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f00:	f7ff ff32 	bl	8001d68 <MX_GPIO_Init>
  MX_DMA_Init();
 8001f04:	f7ff fd32 	bl	800196c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001f08:	f001 f852 	bl	8002fb0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001f0c:	f001 f950 	bl	80031b0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8001f10:	f000 fbca 	bl	80026a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001f14:	f000 fc7c 	bl	8002810 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001f18:	f000 fcce 	bl	80028b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001f1c:	f000 fd22 	bl	8002964 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001f20:	f000 fd76 	bl	8002a10 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001f24:	f000 fdca 	bl	8002abc <MX_TIM8_Init>
  MX_TIM9_Init();
 8001f28:	f000 fe22 	bl	8002b70 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001f2c:	f006 fb0e 	bl	800854c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001f30:	f7ff fdec 	bl	8001b0c <_Z16MX_FREERTOS_Initv>

  /* Start scheduler */
  osKernelStart();
 8001f34:	f006 fb3e 	bl	80085b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <main+0x44>
	...

08001f3c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b094      	sub	sp, #80	; 0x50
 8001f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f42:	f107 031c 	add.w	r3, r7, #28
 8001f46:	2234      	movs	r2, #52	; 0x34
 8001f48:	2100      	movs	r1, #0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f018 fb4a 	bl	801a5e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f50:	f107 0308 	add.w	r3, r7, #8
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f60:	f002 fa6e 	bl	8004440 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f64:	4b33      	ldr	r3, [pc, #204]	; (8002034 <_Z18SystemClock_Configv+0xf8>)
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	4a32      	ldr	r2, [pc, #200]	; (8002034 <_Z18SystemClock_Configv+0xf8>)
 8001f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f70:	4b30      	ldr	r3, [pc, #192]	; (8002034 <_Z18SystemClock_Configv+0xf8>)
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f7c:	4b2e      	ldr	r3, [pc, #184]	; (8002038 <_Z18SystemClock_Configv+0xfc>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f84:	4a2c      	ldr	r2, [pc, #176]	; (8002038 <_Z18SystemClock_Configv+0xfc>)
 8001f86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	4b2a      	ldr	r3, [pc, #168]	; (8002038 <_Z18SystemClock_Configv+0xfc>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f94:	603b      	str	r3, [r7, #0]
 8001f96:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001f9c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001fa0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001faa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001fac:	2304      	movs	r3, #4
 8001fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001fb0:	2360      	movs	r3, #96	; 0x60
 8001fb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001fb8:	2304      	movs	r3, #4
 8001fba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fc0:	f107 031c 	add.w	r3, r7, #28
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f002 fa9b 	bl	8004500 <HAL_RCC_OscConfig>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf14      	ite	ne
 8001fd0:	2301      	movne	r3, #1
 8001fd2:	2300      	moveq	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001fda:	f000 f841 	bl	8002060 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001fde:	f002 fa3f 	bl	8004460 <HAL_PWREx_EnableOverDrive>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	bf14      	ite	ne
 8001fe8:	2301      	movne	r3, #1
 8001fea:	2300      	moveq	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8001ff2:	f000 f835 	bl	8002060 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ff6:	230f      	movs	r3, #15
 8001ff8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002002:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002006:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002008:	2300      	movs	r3, #0
 800200a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800200c:	f107 0308 	add.w	r3, r7, #8
 8002010:	2103      	movs	r1, #3
 8002012:	4618      	mov	r0, r3
 8002014:	f002 fd22 	bl	8004a5c <HAL_RCC_ClockConfig>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	bf14      	ite	ne
 800201e:	2301      	movne	r3, #1
 8002020:	2300      	moveq	r3, #0
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <_Z18SystemClock_Configv+0xf0>
  {
    Error_Handler();
 8002028:	f000 f81a 	bl	8002060 <Error_Handler>
  }
}
 800202c:	bf00      	nop
 800202e:	3750      	adds	r7, #80	; 0x50
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40023800 	.word	0x40023800
 8002038:	40007000 	.word	0x40007000

0800203c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a04      	ldr	r2, [pc, #16]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d101      	bne.n	8002052 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800204e:	f001 f995 	bl	800337c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40001000 	.word	0x40001000

08002060 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002064:	b672      	cpsid	i
}
 8002066:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002068:	e7fe      	b.n	8002068 <Error_Handler+0x8>
	...

0800206c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002076:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <microros_allocate+0x3c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4413      	add	r3, r2
 8002080:	461a      	mov	r2, r3
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <microros_allocate+0x3c>)
 8002084:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002086:	4b09      	ldr	r3, [pc, #36]	; (80020ac <microros_allocate+0x40>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	461a      	mov	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4413      	add	r3, r2
 8002090:	461a      	mov	r2, r3
 8002092:	4b06      	ldr	r3, [pc, #24]	; (80020ac <microros_allocate+0x40>)
 8002094:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff fa14 	bl	80014c4 <pvPortMallocMicroROS>
 800209c:	4603      	mov	r3, r0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	2000626c 	.word	0x2000626c
 80020ac:	20006270 	.word	0x20006270

080020b0 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00c      	beq.n	80020da <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff fb27 	bl	8001714 <getBlockSize>
 80020c6:	4603      	mov	r3, r0
 80020c8:	4a06      	ldr	r2, [pc, #24]	; (80020e4 <microros_deallocate+0x34>)
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	461a      	mov	r2, r3
 80020d0:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <microros_deallocate+0x34>)
 80020d2:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff fabf 	bl	8001658 <vPortFreeMicroROS>
  }
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20006270 	.word	0x20006270

080020e8 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	60b9      	str	r1, [r7, #8]
 80020f2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80020f4:	4b15      	ldr	r3, [pc, #84]	; (800214c <microros_reallocate+0x64>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	4413      	add	r3, r2
 80020fe:	461a      	mov	r2, r3
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <microros_reallocate+0x64>)
 8002102:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002104:	4b12      	ldr	r3, [pc, #72]	; (8002150 <microros_reallocate+0x68>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	4413      	add	r3, r2
 800210e:	461a      	mov	r2, r3
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <microros_reallocate+0x68>)
 8002112:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d104      	bne.n	8002124 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800211a:	68b8      	ldr	r0, [r7, #8]
 800211c:	f7ff f9d2 	bl	80014c4 <pvPortMallocMicroROS>
 8002120:	4603      	mov	r3, r0
 8002122:	e00e      	b.n	8002142 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f7ff faf5 	bl	8001714 <getBlockSize>
 800212a:	4603      	mov	r3, r0
 800212c:	4a08      	ldr	r2, [pc, #32]	; (8002150 <microros_reallocate+0x68>)
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	461a      	mov	r2, r3
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <microros_reallocate+0x68>)
 8002136:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f7ff fb08 	bl	8001750 <pvPortReallocMicroROS>
 8002140:	4603      	mov	r3, r0
  }
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	2000626c 	.word	0x2000626c
 8002150:	20006270 	.word	0x20006270

08002154 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	fb02 f303 	mul.w	r3, r2, r3
 8002168:	4a0c      	ldr	r2, [pc, #48]	; (800219c <microros_zero_allocate+0x48>)
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	4413      	add	r3, r2
 800216e:	461a      	mov	r2, r3
 8002170:	4b0a      	ldr	r3, [pc, #40]	; (800219c <microros_zero_allocate+0x48>)
 8002172:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	fb02 f303 	mul.w	r3, r2, r3
 800217c:	4a08      	ldr	r2, [pc, #32]	; (80021a0 <microros_zero_allocate+0x4c>)
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	4413      	add	r3, r2
 8002182:	461a      	mov	r2, r3
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <microros_zero_allocate+0x4c>)
 8002186:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f7ff fb0d 	bl	80017aa <pvPortCallocMicroROS>
 8002190:	4603      	mov	r3, r0
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	2000626c 	.word	0x2000626c
 80021a0:	20006270 	.word	0x20006270
 80021a4:	00000000 	.word	0x00000000

080021a8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80021a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021ac:	b086      	sub	sp, #24
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80021b4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80021ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021be:	a320      	add	r3, pc, #128	; (adr r3, 8002240 <UTILS_NanosecondsToTimespec+0x98>)
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	f7fe f8a4 	bl	8000310 <__aeabi_ldivmod>
 80021c8:	4602      	mov	r2, r0
 80021ca:	460b      	mov	r3, r1
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80021d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021d6:	a31a      	add	r3, pc, #104	; (adr r3, 8002240 <UTILS_NanosecondsToTimespec+0x98>)
 80021d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021dc:	f7fe f898 	bl	8000310 <__aeabi_ldivmod>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	da20      	bge.n	800222e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	4a11      	ldr	r2, [pc, #68]	; (8002238 <UTILS_NanosecondsToTimespec+0x90>)
 80021f2:	fb82 1203 	smull	r1, r2, r2, r3
 80021f6:	1712      	asrs	r2, r2, #28
 80021f8:	17db      	asrs	r3, r3, #31
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	3301      	adds	r3, #1
 80021fe:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002206:	6979      	ldr	r1, [r7, #20]
 8002208:	17c8      	asrs	r0, r1, #31
 800220a:	460c      	mov	r4, r1
 800220c:	4605      	mov	r5, r0
 800220e:	ebb2 0804 	subs.w	r8, r2, r4
 8002212:	eb63 0905 	sbc.w	r9, r3, r5
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	4906      	ldr	r1, [pc, #24]	; (800223c <UTILS_NanosecondsToTimespec+0x94>)
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	441a      	add	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	609a      	str	r2, [r3, #8]
    }
}
 800222e:	bf00      	nop
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002238:	44b82fa1 	.word	0x44b82fa1
 800223c:	3b9aca00 	.word	0x3b9aca00
 8002240:	3b9aca00 	.word	0x3b9aca00
 8002244:	00000000 	.word	0x00000000

08002248 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800224c:	b08e      	sub	sp, #56	; 0x38
 800224e:	af00      	add	r7, sp, #0
 8002250:	6278      	str	r0, [r7, #36]	; 0x24
 8002252:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002254:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002258:	2300      	movs	r3, #0
 800225a:	6013      	str	r3, [r2, #0]
 800225c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800226a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800226e:	4618      	mov	r0, r3
 8002270:	f007 fda0 	bl	8009db4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002276:	17da      	asrs	r2, r3, #31
 8002278:	61bb      	str	r3, [r7, #24]
 800227a:	61fa      	str	r2, [r7, #28]
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	f04f 0300 	mov.w	r3, #0
 8002284:	69b9      	ldr	r1, [r7, #24]
 8002286:	000b      	movs	r3, r1
 8002288:	2200      	movs	r2, #0
 800228a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800228e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002290:	2200      	movs	r2, #0
 8002292:	461c      	mov	r4, r3
 8002294:	4615      	mov	r5, r2
 8002296:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800229a:	1911      	adds	r1, r2, r4
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	416b      	adcs	r3, r5
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80022a6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80022aa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80022ae:	4602      	mov	r2, r0
 80022b0:	460b      	mov	r3, r1
 80022b2:	f04f 0400 	mov.w	r4, #0
 80022b6:	f04f 0500 	mov.w	r5, #0
 80022ba:	015d      	lsls	r5, r3, #5
 80022bc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80022c0:	0154      	lsls	r4, r2, #5
 80022c2:	4622      	mov	r2, r4
 80022c4:	462b      	mov	r3, r5
 80022c6:	ebb2 0800 	subs.w	r8, r2, r0
 80022ca:	eb63 0901 	sbc.w	r9, r3, r1
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80022da:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80022de:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80022e2:	4690      	mov	r8, r2
 80022e4:	4699      	mov	r9, r3
 80022e6:	eb18 0a00 	adds.w	sl, r8, r0
 80022ea:	eb49 0b01 	adc.w	fp, r9, r1
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022fa:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022fe:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002302:	ebb2 040a 	subs.w	r4, r2, sl
 8002306:	603c      	str	r4, [r7, #0]
 8002308:	eb63 030b 	sbc.w	r3, r3, fp
 800230c:	607b      	str	r3, [r7, #4]
 800230e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002312:	4623      	mov	r3, r4
 8002314:	181b      	adds	r3, r3, r0
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	462b      	mov	r3, r5
 800231a:	eb41 0303 	adc.w	r3, r1, r3
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	6a3a      	ldr	r2, [r7, #32]
 8002322:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002326:	f7ff ff3f 	bl	80021a8 <UTILS_NanosecondsToTimespec>

    return 0;
 800232a:	2300      	movs	r3, #0
 800232c:	4618      	mov	r0, r3
 800232e:	3738      	adds	r7, #56	; 0x38
 8002330:	46bd      	mov	sp, r7
 8002332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800233e:	4b11      	ldr	r3, [pc, #68]	; (8002384 <HAL_MspInit+0x4c>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	4a10      	ldr	r2, [pc, #64]	; (8002384 <HAL_MspInit+0x4c>)
 8002344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002348:	6413      	str	r3, [r2, #64]	; 0x40
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <HAL_MspInit+0x4c>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	607b      	str	r3, [r7, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002356:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_MspInit+0x4c>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	4a0a      	ldr	r2, [pc, #40]	; (8002384 <HAL_MspInit+0x4c>)
 800235c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002360:	6453      	str	r3, [r2, #68]	; 0x44
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <HAL_MspInit+0x4c>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236a:	603b      	str	r3, [r7, #0]
 800236c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800236e:	2200      	movs	r2, #0
 8002370:	210f      	movs	r1, #15
 8002372:	f06f 0001 	mvn.w	r0, #1
 8002376:	f001 f8fd 	bl	8003574 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40023800 	.word	0x40023800

08002388 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08e      	sub	sp, #56	; 0x38
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002398:	4b33      	ldr	r3, [pc, #204]	; (8002468 <HAL_InitTick+0xe0>)
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	4a32      	ldr	r2, [pc, #200]	; (8002468 <HAL_InitTick+0xe0>)
 800239e:	f043 0310 	orr.w	r3, r3, #16
 80023a2:	6413      	str	r3, [r2, #64]	; 0x40
 80023a4:	4b30      	ldr	r3, [pc, #192]	; (8002468 <HAL_InitTick+0xe0>)
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	f003 0310 	and.w	r3, r3, #16
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023b0:	f107 0210 	add.w	r2, r7, #16
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	4611      	mov	r1, r2
 80023ba:	4618      	mov	r0, r3
 80023bc:	f002 fd74 	bl	8004ea8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80023c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d103      	bne.n	80023d2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80023ca:	f002 fd45 	bl	8004e58 <HAL_RCC_GetPCLK1Freq>
 80023ce:	6378      	str	r0, [r7, #52]	; 0x34
 80023d0:	e004      	b.n	80023dc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80023d2:	f002 fd41 	bl	8004e58 <HAL_RCC_GetPCLK1Freq>
 80023d6:	4603      	mov	r3, r0
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023de:	4a23      	ldr	r2, [pc, #140]	; (800246c <HAL_InitTick+0xe4>)
 80023e0:	fba2 2303 	umull	r2, r3, r2, r3
 80023e4:	0c9b      	lsrs	r3, r3, #18
 80023e6:	3b01      	subs	r3, #1
 80023e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80023ea:	4b21      	ldr	r3, [pc, #132]	; (8002470 <HAL_InitTick+0xe8>)
 80023ec:	4a21      	ldr	r2, [pc, #132]	; (8002474 <HAL_InitTick+0xec>)
 80023ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80023f0:	4b1f      	ldr	r3, [pc, #124]	; (8002470 <HAL_InitTick+0xe8>)
 80023f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023f6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80023f8:	4a1d      	ldr	r2, [pc, #116]	; (8002470 <HAL_InitTick+0xe8>)
 80023fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80023fe:	4b1c      	ldr	r3, [pc, #112]	; (8002470 <HAL_InitTick+0xe8>)
 8002400:	2200      	movs	r2, #0
 8002402:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002404:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <HAL_InitTick+0xe8>)
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800240a:	4b19      	ldr	r3, [pc, #100]	; (8002470 <HAL_InitTick+0xe8>)
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002410:	4817      	ldr	r0, [pc, #92]	; (8002470 <HAL_InitTick+0xe8>)
 8002412:	f003 f9a3 	bl	800575c <HAL_TIM_Base_Init>
 8002416:	4603      	mov	r3, r0
 8002418:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800241c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002420:	2b00      	cmp	r3, #0
 8002422:	d11b      	bne.n	800245c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002424:	4812      	ldr	r0, [pc, #72]	; (8002470 <HAL_InitTick+0xe8>)
 8002426:	f003 f9fb 	bl	8005820 <HAL_TIM_Base_Start_IT>
 800242a:	4603      	mov	r3, r0
 800242c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002430:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002434:	2b00      	cmp	r3, #0
 8002436:	d111      	bne.n	800245c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002438:	2036      	movs	r0, #54	; 0x36
 800243a:	f001 f8b7 	bl	80035ac <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b0f      	cmp	r3, #15
 8002442:	d808      	bhi.n	8002456 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002444:	2200      	movs	r2, #0
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	2036      	movs	r0, #54	; 0x36
 800244a:	f001 f893 	bl	8003574 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800244e:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <HAL_InitTick+0xf0>)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	e002      	b.n	800245c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800245c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002460:	4618      	mov	r0, r3
 8002462:	3738      	adds	r7, #56	; 0x38
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40023800 	.word	0x40023800
 800246c:	431bde83 	.word	0x431bde83
 8002470:	20006274 	.word	0x20006274
 8002474:	40001000 	.word	0x40001000
 8002478:	20000008 	.word	0x20000008

0800247c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002480:	e7fe      	b.n	8002480 <NMI_Handler+0x4>

08002482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002486:	e7fe      	b.n	8002486 <HardFault_Handler+0x4>

08002488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800248c:	e7fe      	b.n	800248c <MemManage_Handler+0x4>

0800248e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800248e:	b480      	push	{r7}
 8002490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002492:	e7fe      	b.n	8002492 <BusFault_Handler+0x4>

08002494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002498:	e7fe      	b.n	8002498 <UsageFault_Handler+0x4>

0800249a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800249a:	b480      	push	{r7}
 800249c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800249e:	bf00      	nop
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80024ac:	4802      	ldr	r0, [pc, #8]	; (80024b8 <DMA1_Stream1_IRQHandler+0x10>)
 80024ae:	f001 fa2b 	bl	8003908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	200065c4 	.word	0x200065c4

080024bc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80024c0:	4802      	ldr	r0, [pc, #8]	; (80024cc <DMA1_Stream3_IRQHandler+0x10>)
 80024c2:	f001 fa21 	bl	8003908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20006564 	.word	0x20006564

080024d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <USART3_IRQHandler+0x10>)
 80024d6:	f004 fb3d 	bl	8006b54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	200064dc 	.word	0x200064dc

080024e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024e8:	4802      	ldr	r0, [pc, #8]	; (80024f4 <TIM6_DAC_IRQHandler+0x10>)
 80024ea:	f003 fb0f 	bl	8005b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20006274 	.word	0x20006274

080024f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return 1;
 80024fc:	2301      	movs	r3, #1
}
 80024fe:	4618      	mov	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <_kill>:

int _kill(int pid, int sig)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002512:	f018 f963 	bl	801a7dc <__errno>
 8002516:	4603      	mov	r3, r0
 8002518:	2216      	movs	r2, #22
 800251a:	601a      	str	r2, [r3, #0]
  return -1;
 800251c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <_exit>:

void _exit (int status)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002530:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff ffe7 	bl	8002508 <_kill>
  while (1) {}    /* Make sure we hang here */
 800253a:	e7fe      	b.n	800253a <_exit+0x12>

0800253c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	e00a      	b.n	8002564 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800254e:	f3af 8000 	nop.w
 8002552:	4601      	mov	r1, r0
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	60ba      	str	r2, [r7, #8]
 800255a:	b2ca      	uxtb	r2, r1
 800255c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	3301      	adds	r3, #1
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	429a      	cmp	r2, r3
 800256a:	dbf0      	blt.n	800254e <_read+0x12>
  }

  return len;
 800256c:	687b      	ldr	r3, [r7, #4]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	e009      	b.n	800259c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	1c5a      	adds	r2, r3, #1
 800258c:	60ba      	str	r2, [r7, #8]
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	3301      	adds	r3, #1
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	dbf1      	blt.n	8002588 <_write+0x12>
  }
  return len;
 80025a4:	687b      	ldr	r3, [r7, #4]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <_close>:

int _close(int file)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025d6:	605a      	str	r2, [r3, #4]
  return 0;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <_isatty>:

int _isatty(int file)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025ee:	2301      	movs	r3, #1
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002620:	4a14      	ldr	r2, [pc, #80]	; (8002674 <_sbrk+0x5c>)
 8002622:	4b15      	ldr	r3, [pc, #84]	; (8002678 <_sbrk+0x60>)
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800262c:	4b13      	ldr	r3, [pc, #76]	; (800267c <_sbrk+0x64>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d102      	bne.n	800263a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002634:	4b11      	ldr	r3, [pc, #68]	; (800267c <_sbrk+0x64>)
 8002636:	4a12      	ldr	r2, [pc, #72]	; (8002680 <_sbrk+0x68>)
 8002638:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800263a:	4b10      	ldr	r3, [pc, #64]	; (800267c <_sbrk+0x64>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4413      	add	r3, r2
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	429a      	cmp	r2, r3
 8002646:	d207      	bcs.n	8002658 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002648:	f018 f8c8 	bl	801a7dc <__errno>
 800264c:	4603      	mov	r3, r0
 800264e:	220c      	movs	r2, #12
 8002650:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002656:	e009      	b.n	800266c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002658:	4b08      	ldr	r3, [pc, #32]	; (800267c <_sbrk+0x64>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800265e:	4b07      	ldr	r3, [pc, #28]	; (800267c <_sbrk+0x64>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4413      	add	r3, r2
 8002666:	4a05      	ldr	r2, [pc, #20]	; (800267c <_sbrk+0x64>)
 8002668:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800266a:	68fb      	ldr	r3, [r7, #12]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20080000 	.word	0x20080000
 8002678:	00000400 	.word	0x00000400
 800267c:	200062c4 	.word	0x200062c4
 8002680:	20010710 	.word	0x20010710

08002684 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002688:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <SystemInit+0x20>)
 800268a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268e:	4a05      	ldr	r2, [pc, #20]	; (80026a4 <SystemInit+0x20>)
 8002690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002698:	bf00      	nop
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b096      	sub	sp, #88	; 0x58
 80026ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	605a      	str	r2, [r3, #4]
 80026b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	605a      	str	r2, [r3, #4]
 80026c4:	609a      	str	r2, [r3, #8]
 80026c6:	60da      	str	r2, [r3, #12]
 80026c8:	611a      	str	r2, [r3, #16]
 80026ca:	615a      	str	r2, [r3, #20]
 80026cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026ce:	1d3b      	adds	r3, r7, #4
 80026d0:	222c      	movs	r2, #44	; 0x2c
 80026d2:	2100      	movs	r1, #0
 80026d4:	4618      	mov	r0, r3
 80026d6:	f017 ff85 	bl	801a5e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80026da:	4b4b      	ldr	r3, [pc, #300]	; (8002808 <MX_TIM1_Init+0x160>)
 80026dc:	4a4b      	ldr	r2, [pc, #300]	; (800280c <MX_TIM1_Init+0x164>)
 80026de:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80026e0:	4b49      	ldr	r3, [pc, #292]	; (8002808 <MX_TIM1_Init+0x160>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e6:	4b48      	ldr	r3, [pc, #288]	; (8002808 <MX_TIM1_Init+0x160>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80026ec:	4b46      	ldr	r3, [pc, #280]	; (8002808 <MX_TIM1_Init+0x160>)
 80026ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026f4:	4b44      	ldr	r3, [pc, #272]	; (8002808 <MX_TIM1_Init+0x160>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80026fa:	4b43      	ldr	r3, [pc, #268]	; (8002808 <MX_TIM1_Init+0x160>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002700:	4b41      	ldr	r3, [pc, #260]	; (8002808 <MX_TIM1_Init+0x160>)
 8002702:	2200      	movs	r2, #0
 8002704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002706:	4840      	ldr	r0, [pc, #256]	; (8002808 <MX_TIM1_Init+0x160>)
 8002708:	f003 f902 	bl	8005910 <HAL_TIM_PWM_Init>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002712:	f7ff fca5 	bl	8002060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800271a:	2300      	movs	r3, #0
 800271c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800271e:	2300      	movs	r3, #0
 8002720:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002722:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002726:	4619      	mov	r1, r3
 8002728:	4837      	ldr	r0, [pc, #220]	; (8002808 <MX_TIM1_Init+0x160>)
 800272a:	f003 ff49 	bl	80065c0 <HAL_TIMEx_MasterConfigSynchronization>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002734:	f7ff fc94 	bl	8002060 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002738:	2360      	movs	r3, #96	; 0x60
 800273a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002740:	2300      	movs	r3, #0
 8002742:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002744:	2300      	movs	r3, #0
 8002746:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002748:	2300      	movs	r3, #0
 800274a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800274c:	2300      	movs	r3, #0
 800274e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002750:	2300      	movs	r3, #0
 8002752:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002754:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002758:	2200      	movs	r2, #0
 800275a:	4619      	mov	r1, r3
 800275c:	482a      	ldr	r0, [pc, #168]	; (8002808 <MX_TIM1_Init+0x160>)
 800275e:	f003 faf5 	bl	8005d4c <HAL_TIM_PWM_ConfigChannel>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002768:	f7ff fc7a 	bl	8002060 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800276c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002770:	2204      	movs	r2, #4
 8002772:	4619      	mov	r1, r3
 8002774:	4824      	ldr	r0, [pc, #144]	; (8002808 <MX_TIM1_Init+0x160>)
 8002776:	f003 fae9 	bl	8005d4c <HAL_TIM_PWM_ConfigChannel>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8002780:	f7ff fc6e 	bl	8002060 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002784:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002788:	2208      	movs	r2, #8
 800278a:	4619      	mov	r1, r3
 800278c:	481e      	ldr	r0, [pc, #120]	; (8002808 <MX_TIM1_Init+0x160>)
 800278e:	f003 fadd 	bl	8005d4c <HAL_TIM_PWM_ConfigChannel>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8002798:	f7ff fc62 	bl	8002060 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800279c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027a0:	220c      	movs	r2, #12
 80027a2:	4619      	mov	r1, r3
 80027a4:	4818      	ldr	r0, [pc, #96]	; (8002808 <MX_TIM1_Init+0x160>)
 80027a6:	f003 fad1 	bl	8005d4c <HAL_TIM_PWM_ConfigChannel>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80027b0:	f7ff fc56 	bl	8002060 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027b4:	2300      	movs	r3, #0
 80027b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80027b8:	2300      	movs	r3, #0
 80027ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80027c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80027d2:	2300      	movs	r3, #0
 80027d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80027d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80027dc:	2300      	movs	r3, #0
 80027de:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027e0:	2300      	movs	r3, #0
 80027e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80027e4:	1d3b      	adds	r3, r7, #4
 80027e6:	4619      	mov	r1, r3
 80027e8:	4807      	ldr	r0, [pc, #28]	; (8002808 <MX_TIM1_Init+0x160>)
 80027ea:	f003 ff77 	bl	80066dc <HAL_TIMEx_ConfigBreakDeadTime>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 80027f4:	f7ff fc34 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80027f8:	4803      	ldr	r0, [pc, #12]	; (8002808 <MX_TIM1_Init+0x160>)
 80027fa:	f000 fb7d 	bl	8002ef8 <HAL_TIM_MspPostInit>

}
 80027fe:	bf00      	nop
 8002800:	3758      	adds	r7, #88	; 0x58
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	200062c8 	.word	0x200062c8
 800280c:	40010000 	.word	0x40010000

08002810 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08c      	sub	sp, #48	; 0x30
 8002814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002816:	f107 030c 	add.w	r3, r7, #12
 800281a:	2224      	movs	r2, #36	; 0x24
 800281c:	2100      	movs	r1, #0
 800281e:	4618      	mov	r0, r3
 8002820:	f017 fee0 	bl	801a5e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002824:	463b      	mov	r3, r7
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	605a      	str	r2, [r3, #4]
 800282c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800282e:	4b21      	ldr	r3, [pc, #132]	; (80028b4 <MX_TIM2_Init+0xa4>)
 8002830:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002834:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002836:	4b1f      	ldr	r3, [pc, #124]	; (80028b4 <MX_TIM2_Init+0xa4>)
 8002838:	2200      	movs	r2, #0
 800283a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800283c:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <MX_TIM2_Init+0xa4>)
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002842:	4b1c      	ldr	r3, [pc, #112]	; (80028b4 <MX_TIM2_Init+0xa4>)
 8002844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002848:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800284a:	4b1a      	ldr	r3, [pc, #104]	; (80028b4 <MX_TIM2_Init+0xa4>)
 800284c:	2200      	movs	r2, #0
 800284e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002850:	4b18      	ldr	r3, [pc, #96]	; (80028b4 <MX_TIM2_Init+0xa4>)
 8002852:	2200      	movs	r2, #0
 8002854:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002856:	2301      	movs	r3, #1
 8002858:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800285e:	2301      	movs	r3, #1
 8002860:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002862:	2300      	movs	r3, #0
 8002864:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800286a:	2300      	movs	r3, #0
 800286c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800286e:	2301      	movs	r3, #1
 8002870:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002872:	2300      	movs	r3, #0
 8002874:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800287a:	f107 030c 	add.w	r3, r7, #12
 800287e:	4619      	mov	r1, r3
 8002880:	480c      	ldr	r0, [pc, #48]	; (80028b4 <MX_TIM2_Init+0xa4>)
 8002882:	f003 f89d 	bl	80059c0 <HAL_TIM_Encoder_Init>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800288c:	f7ff fbe8 	bl	8002060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002890:	2300      	movs	r3, #0
 8002892:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002894:	2300      	movs	r3, #0
 8002896:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002898:	463b      	mov	r3, r7
 800289a:	4619      	mov	r1, r3
 800289c:	4805      	ldr	r0, [pc, #20]	; (80028b4 <MX_TIM2_Init+0xa4>)
 800289e:	f003 fe8f 	bl	80065c0 <HAL_TIMEx_MasterConfigSynchronization>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80028a8:	f7ff fbda 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028ac:	bf00      	nop
 80028ae:	3730      	adds	r7, #48	; 0x30
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	20006314 	.word	0x20006314

080028b8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08c      	sub	sp, #48	; 0x30
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80028be:	f107 030c 	add.w	r3, r7, #12
 80028c2:	2224      	movs	r2, #36	; 0x24
 80028c4:	2100      	movs	r1, #0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f017 fe8c 	bl	801a5e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028cc:	463b      	mov	r3, r7
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80028d6:	4b21      	ldr	r3, [pc, #132]	; (800295c <MX_TIM3_Init+0xa4>)
 80028d8:	4a21      	ldr	r2, [pc, #132]	; (8002960 <MX_TIM3_Init+0xa8>)
 80028da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80028dc:	4b1f      	ldr	r3, [pc, #124]	; (800295c <MX_TIM3_Init+0xa4>)
 80028de:	2200      	movs	r2, #0
 80028e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028e2:	4b1e      	ldr	r3, [pc, #120]	; (800295c <MX_TIM3_Init+0xa4>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80028e8:	4b1c      	ldr	r3, [pc, #112]	; (800295c <MX_TIM3_Init+0xa4>)
 80028ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028f0:	4b1a      	ldr	r3, [pc, #104]	; (800295c <MX_TIM3_Init+0xa4>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028f6:	4b19      	ldr	r3, [pc, #100]	; (800295c <MX_TIM3_Init+0xa4>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80028fc:	2301      	movs	r3, #1
 80028fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002900:	2300      	movs	r3, #0
 8002902:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002904:	2301      	movs	r3, #1
 8002906:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002908:	2300      	movs	r3, #0
 800290a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002910:	2300      	movs	r3, #0
 8002912:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002914:	2301      	movs	r3, #1
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002918:	2300      	movs	r3, #0
 800291a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002920:	f107 030c 	add.w	r3, r7, #12
 8002924:	4619      	mov	r1, r3
 8002926:	480d      	ldr	r0, [pc, #52]	; (800295c <MX_TIM3_Init+0xa4>)
 8002928:	f003 f84a 	bl	80059c0 <HAL_TIM_Encoder_Init>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002932:	f7ff fb95 	bl	8002060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002936:	2300      	movs	r3, #0
 8002938:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800293a:	2300      	movs	r3, #0
 800293c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800293e:	463b      	mov	r3, r7
 8002940:	4619      	mov	r1, r3
 8002942:	4806      	ldr	r0, [pc, #24]	; (800295c <MX_TIM3_Init+0xa4>)
 8002944:	f003 fe3c 	bl	80065c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800294e:	f7ff fb87 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002952:	bf00      	nop
 8002954:	3730      	adds	r7, #48	; 0x30
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20006360 	.word	0x20006360
 8002960:	40000400 	.word	0x40000400

08002964 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08c      	sub	sp, #48	; 0x30
 8002968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800296a:	f107 030c 	add.w	r3, r7, #12
 800296e:	2224      	movs	r2, #36	; 0x24
 8002970:	2100      	movs	r1, #0
 8002972:	4618      	mov	r0, r3
 8002974:	f017 fe36 	bl	801a5e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002978:	463b      	mov	r3, r7
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002982:	4b21      	ldr	r3, [pc, #132]	; (8002a08 <MX_TIM4_Init+0xa4>)
 8002984:	4a21      	ldr	r2, [pc, #132]	; (8002a0c <MX_TIM4_Init+0xa8>)
 8002986:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002988:	4b1f      	ldr	r3, [pc, #124]	; (8002a08 <MX_TIM4_Init+0xa4>)
 800298a:	2200      	movs	r2, #0
 800298c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800298e:	4b1e      	ldr	r3, [pc, #120]	; (8002a08 <MX_TIM4_Init+0xa4>)
 8002990:	2200      	movs	r2, #0
 8002992:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002994:	4b1c      	ldr	r3, [pc, #112]	; (8002a08 <MX_TIM4_Init+0xa4>)
 8002996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800299a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800299c:	4b1a      	ldr	r3, [pc, #104]	; (8002a08 <MX_TIM4_Init+0xa4>)
 800299e:	2200      	movs	r2, #0
 80029a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029a2:	4b19      	ldr	r3, [pc, #100]	; (8002a08 <MX_TIM4_Init+0xa4>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80029a8:	2301      	movs	r3, #1
 80029aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029ac:	2300      	movs	r3, #0
 80029ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029b0:	2301      	movs	r3, #1
 80029b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029b4:	2300      	movs	r3, #0
 80029b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029bc:	2300      	movs	r3, #0
 80029be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029c0:	2301      	movs	r3, #1
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029c4:	2300      	movs	r3, #0
 80029c6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80029cc:	f107 030c 	add.w	r3, r7, #12
 80029d0:	4619      	mov	r1, r3
 80029d2:	480d      	ldr	r0, [pc, #52]	; (8002a08 <MX_TIM4_Init+0xa4>)
 80029d4:	f002 fff4 	bl	80059c0 <HAL_TIM_Encoder_Init>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80029de:	f7ff fb3f 	bl	8002060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029e2:	2300      	movs	r3, #0
 80029e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80029ea:	463b      	mov	r3, r7
 80029ec:	4619      	mov	r1, r3
 80029ee:	4806      	ldr	r0, [pc, #24]	; (8002a08 <MX_TIM4_Init+0xa4>)
 80029f0:	f003 fde6 	bl	80065c0 <HAL_TIMEx_MasterConfigSynchronization>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80029fa:	f7ff fb31 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80029fe:	bf00      	nop
 8002a00:	3730      	adds	r7, #48	; 0x30
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	200063ac 	.word	0x200063ac
 8002a0c:	40000800 	.word	0x40000800

08002a10 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08c      	sub	sp, #48	; 0x30
 8002a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a16:	f107 030c 	add.w	r3, r7, #12
 8002a1a:	2224      	movs	r2, #36	; 0x24
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f017 fde0 	bl	801a5e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a24:	463b      	mov	r3, r7
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002a2e:	4b21      	ldr	r3, [pc, #132]	; (8002ab4 <MX_TIM5_Init+0xa4>)
 8002a30:	4a21      	ldr	r2, [pc, #132]	; (8002ab8 <MX_TIM5_Init+0xa8>)
 8002a32:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002a34:	4b1f      	ldr	r3, [pc, #124]	; (8002ab4 <MX_TIM5_Init+0xa4>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a3a:	4b1e      	ldr	r3, [pc, #120]	; (8002ab4 <MX_TIM5_Init+0xa4>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002a40:	4b1c      	ldr	r3, [pc, #112]	; (8002ab4 <MX_TIM5_Init+0xa4>)
 8002a42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a46:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a48:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <MX_TIM5_Init+0xa4>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a4e:	4b19      	ldr	r3, [pc, #100]	; (8002ab4 <MX_TIM5_Init+0xa4>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002a54:	2301      	movs	r3, #1
 8002a56:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a70:	2300      	movs	r3, #0
 8002a72:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002a78:	f107 030c 	add.w	r3, r7, #12
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	480d      	ldr	r0, [pc, #52]	; (8002ab4 <MX_TIM5_Init+0xa4>)
 8002a80:	f002 ff9e 	bl	80059c0 <HAL_TIM_Encoder_Init>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8002a8a:	f7ff fae9 	bl	8002060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002a96:	463b      	mov	r3, r7
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4806      	ldr	r0, [pc, #24]	; (8002ab4 <MX_TIM5_Init+0xa4>)
 8002a9c:	f003 fd90 	bl	80065c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8002aa6:	f7ff fadb 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002aaa:	bf00      	nop
 8002aac:	3730      	adds	r7, #48	; 0x30
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200063f8 	.word	0x200063f8
 8002ab8:	40000c00 	.word	0x40000c00

08002abc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08c      	sub	sp, #48	; 0x30
 8002ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002ac2:	f107 030c 	add.w	r3, r7, #12
 8002ac6:	2224      	movs	r2, #36	; 0x24
 8002ac8:	2100      	movs	r1, #0
 8002aca:	4618      	mov	r0, r3
 8002acc:	f017 fd8a 	bl	801a5e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ad0:	463b      	mov	r3, r7
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	605a      	str	r2, [r3, #4]
 8002ad8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002ada:	4b23      	ldr	r3, [pc, #140]	; (8002b68 <MX_TIM8_Init+0xac>)
 8002adc:	4a23      	ldr	r2, [pc, #140]	; (8002b6c <MX_TIM8_Init+0xb0>)
 8002ade:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002ae0:	4b21      	ldr	r3, [pc, #132]	; (8002b68 <MX_TIM8_Init+0xac>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae6:	4b20      	ldr	r3, [pc, #128]	; (8002b68 <MX_TIM8_Init+0xac>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002aec:	4b1e      	ldr	r3, [pc, #120]	; (8002b68 <MX_TIM8_Init+0xac>)
 8002aee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002af2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002af4:	4b1c      	ldr	r3, [pc, #112]	; (8002b68 <MX_TIM8_Init+0xac>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002afa:	4b1b      	ldr	r3, [pc, #108]	; (8002b68 <MX_TIM8_Init+0xac>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b00:	4b19      	ldr	r3, [pc, #100]	; (8002b68 <MX_TIM8_Init+0xac>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002b06:	2301      	movs	r3, #1
 8002b08:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b22:	2300      	movs	r3, #0
 8002b24:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002b26:	2300      	movs	r3, #0
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002b2a:	f107 030c 	add.w	r3, r7, #12
 8002b2e:	4619      	mov	r1, r3
 8002b30:	480d      	ldr	r0, [pc, #52]	; (8002b68 <MX_TIM8_Init+0xac>)
 8002b32:	f002 ff45 	bl	80059c0 <HAL_TIM_Encoder_Init>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8002b3c:	f7ff fa90 	bl	8002060 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b40:	2300      	movs	r3, #0
 8002b42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002b44:	2300      	movs	r3, #0
 8002b46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002b4c:	463b      	mov	r3, r7
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4805      	ldr	r0, [pc, #20]	; (8002b68 <MX_TIM8_Init+0xac>)
 8002b52:	f003 fd35 	bl	80065c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002b5c:	f7ff fa80 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002b60:	bf00      	nop
 8002b62:	3730      	adds	r7, #48	; 0x30
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20006444 	.word	0x20006444
 8002b6c:	40010400 	.word	0x40010400

08002b70 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b76:	1d3b      	adds	r3, r7, #4
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
 8002b84:	615a      	str	r2, [r3, #20]
 8002b86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002b88:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <MX_TIM9_Init+0x98>)
 8002b8a:	4a20      	ldr	r2, [pc, #128]	; (8002c0c <MX_TIM9_Init+0x9c>)
 8002b8c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8002b8e:	4b1e      	ldr	r3, [pc, #120]	; (8002c08 <MX_TIM9_Init+0x98>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b94:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <MX_TIM9_Init+0x98>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8002b9a:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <MX_TIM9_Init+0x98>)
 8002b9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ba0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ba2:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <MX_TIM9_Init+0x98>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ba8:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <MX_TIM9_Init+0x98>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8002bae:	4816      	ldr	r0, [pc, #88]	; (8002c08 <MX_TIM9_Init+0x98>)
 8002bb0:	f002 feae 	bl	8005910 <HAL_TIM_PWM_Init>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8002bba:	f7ff fa51 	bl	8002060 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bbe:	2360      	movs	r3, #96	; 0x60
 8002bc0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002bce:	1d3b      	adds	r3, r7, #4
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	480c      	ldr	r0, [pc, #48]	; (8002c08 <MX_TIM9_Init+0x98>)
 8002bd6:	f003 f8b9 	bl	8005d4c <HAL_TIM_PWM_ConfigChannel>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8002be0:	f7ff fa3e 	bl	8002060 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002be4:	1d3b      	adds	r3, r7, #4
 8002be6:	2204      	movs	r2, #4
 8002be8:	4619      	mov	r1, r3
 8002bea:	4807      	ldr	r0, [pc, #28]	; (8002c08 <MX_TIM9_Init+0x98>)
 8002bec:	f003 f8ae 	bl	8005d4c <HAL_TIM_PWM_ConfigChannel>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8002bf6:	f7ff fa33 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002bfa:	4803      	ldr	r0, [pc, #12]	; (8002c08 <MX_TIM9_Init+0x98>)
 8002bfc:	f000 f97c 	bl	8002ef8 <HAL_TIM_MspPostInit>

}
 8002c00:	bf00      	nop
 8002c02:	3720      	adds	r7, #32
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20006490 	.word	0x20006490
 8002c0c:	40014000 	.word	0x40014000

08002c10 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a13      	ldr	r2, [pc, #76]	; (8002c6c <HAL_TIM_PWM_MspInit+0x5c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d10c      	bne.n	8002c3c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c22:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <HAL_TIM_PWM_MspInit+0x60>)
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	4a12      	ldr	r2, [pc, #72]	; (8002c70 <HAL_TIM_PWM_MspInit+0x60>)
 8002c28:	f043 0301 	orr.w	r3, r3, #1
 8002c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c2e:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <HAL_TIM_PWM_MspInit+0x60>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	60fb      	str	r3, [r7, #12]
 8002c38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8002c3a:	e010      	b.n	8002c5e <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM9)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a0c      	ldr	r2, [pc, #48]	; (8002c74 <HAL_TIM_PWM_MspInit+0x64>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d10b      	bne.n	8002c5e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002c46:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <HAL_TIM_PWM_MspInit+0x60>)
 8002c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c4a:	4a09      	ldr	r2, [pc, #36]	; (8002c70 <HAL_TIM_PWM_MspInit+0x60>)
 8002c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c50:	6453      	str	r3, [r2, #68]	; 0x44
 8002c52:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <HAL_TIM_PWM_MspInit+0x60>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
}
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	40010000 	.word	0x40010000
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40014000 	.word	0x40014000

08002c78 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b094      	sub	sp, #80	; 0x50
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c98:	d144      	bne.n	8002d24 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c9a:	4b8e      	ldr	r3, [pc, #568]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	4a8d      	ldr	r2, [pc, #564]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca6:	4b8b      	ldr	r3, [pc, #556]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb2:	4b88      	ldr	r3, [pc, #544]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	4a87      	ldr	r2, [pc, #540]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbe:	4b85      	ldr	r3, [pc, #532]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8002cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cca:	4b82      	ldr	r3, [pc, #520]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	4a81      	ldr	r2, [pc, #516]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002cd0:	f043 0302 	orr.w	r3, r3, #2
 8002cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd6:	4b7f      	ldr	r3, [pc, #508]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	633b      	str	r3, [r7, #48]	; 0x30
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR1_CHA_Pin;
 8002ce2:	2320      	movs	r3, #32
 8002ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR1_CHA_GPIO_Port, &GPIO_InitStruct);
 8002cf6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4876      	ldr	r0, [pc, #472]	; (8002ed8 <HAL_TIM_Encoder_MspInit+0x260>)
 8002cfe:	f001 f879 	bl	8003df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR1_CHB_Pin;
 8002d02:	2308      	movs	r3, #8
 8002d04:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d06:	2302      	movs	r3, #2
 8002d08:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d12:	2301      	movs	r3, #1
 8002d14:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR1_CHB_GPIO_Port, &GPIO_InitStruct);
 8002d16:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	486f      	ldr	r0, [pc, #444]	; (8002edc <HAL_TIM_Encoder_MspInit+0x264>)
 8002d1e:	f001 f869 	bl	8003df4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002d22:	e0d3      	b.n	8002ecc <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM3)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a6d      	ldr	r2, [pc, #436]	; (8002ee0 <HAL_TIM_Encoder_MspInit+0x268>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d144      	bne.n	8002db8 <HAL_TIM_Encoder_MspInit+0x140>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d2e:	4b69      	ldr	r3, [pc, #420]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	4a68      	ldr	r2, [pc, #416]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002d34:	f043 0302 	orr.w	r3, r3, #2
 8002d38:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3a:	4b66      	ldr	r3, [pc, #408]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d46:	4b63      	ldr	r3, [pc, #396]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	4a62      	ldr	r2, [pc, #392]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	6313      	str	r3, [r2, #48]	; 0x30
 8002d52:	4b60      	ldr	r3, [pc, #384]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d5e:	4b5d      	ldr	r3, [pc, #372]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	4a5c      	ldr	r2, [pc, #368]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002d64:	f043 0302 	orr.w	r3, r3, #2
 8002d68:	6313      	str	r3, [r2, #48]	; 0x30
 8002d6a:	4b5a      	ldr	r3, [pc, #360]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = MOTOR2_CHA_Pin;
 8002d76:	2340      	movs	r3, #64	; 0x40
 8002d78:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d82:	2300      	movs	r3, #0
 8002d84:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d86:	2302      	movs	r3, #2
 8002d88:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR2_CHA_GPIO_Port, &GPIO_InitStruct);
 8002d8a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4851      	ldr	r0, [pc, #324]	; (8002ed8 <HAL_TIM_Encoder_MspInit+0x260>)
 8002d92:	f001 f82f 	bl	8003df4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR2_CHB_Pin;
 8002d96:	2320      	movs	r3, #32
 8002d98:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002da2:	2300      	movs	r3, #0
 8002da4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002da6:	2302      	movs	r3, #2
 8002da8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR2_CHB_GPIO_Port, &GPIO_InitStruct);
 8002daa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002dae:	4619      	mov	r1, r3
 8002db0:	484a      	ldr	r0, [pc, #296]	; (8002edc <HAL_TIM_Encoder_MspInit+0x264>)
 8002db2:	f001 f81f 	bl	8003df4 <HAL_GPIO_Init>
}
 8002db6:	e089      	b.n	8002ecc <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM4)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a49      	ldr	r2, [pc, #292]	; (8002ee4 <HAL_TIM_Encoder_MspInit+0x26c>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d129      	bne.n	8002e16 <HAL_TIM_Encoder_MspInit+0x19e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002dc2:	4b44      	ldr	r3, [pc, #272]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	4a43      	ldr	r2, [pc, #268]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002dc8:	f043 0304 	orr.w	r3, r3, #4
 8002dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dce:	4b41      	ldr	r3, [pc, #260]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	f003 0304 	and.w	r3, r3, #4
 8002dd6:	623b      	str	r3, [r7, #32]
 8002dd8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dda:	4b3e      	ldr	r3, [pc, #248]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	4a3d      	ldr	r2, [pc, #244]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002de0:	f043 0308 	orr.w	r3, r3, #8
 8002de4:	6313      	str	r3, [r2, #48]	; 0x30
 8002de6:	4b3b      	ldr	r3, [pc, #236]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	61fb      	str	r3, [r7, #28]
 8002df0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = MOTOR3_CHA_Pin|MOTOR3_CHB_Pin;
 8002df2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002df6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e00:	2300      	movs	r3, #0
 8002e02:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e04:	2302      	movs	r3, #2
 8002e06:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e08:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	4836      	ldr	r0, [pc, #216]	; (8002ee8 <HAL_TIM_Encoder_MspInit+0x270>)
 8002e10:	f000 fff0 	bl	8003df4 <HAL_GPIO_Init>
}
 8002e14:	e05a      	b.n	8002ecc <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM5)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a34      	ldr	r2, [pc, #208]	; (8002eec <HAL_TIM_Encoder_MspInit+0x274>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d128      	bne.n	8002e72 <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002e20:	4b2c      	ldr	r3, [pc, #176]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	4a2b      	ldr	r2, [pc, #172]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002e26:	f043 0308 	orr.w	r3, r3, #8
 8002e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2c:	4b29      	ldr	r3, [pc, #164]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	61bb      	str	r3, [r7, #24]
 8002e36:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e38:	4b26      	ldr	r3, [pc, #152]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	4a25      	ldr	r2, [pc, #148]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002e3e:	f043 0301 	orr.w	r3, r3, #1
 8002e42:	6313      	str	r3, [r2, #48]	; 0x30
 8002e44:	4b23      	ldr	r3, [pc, #140]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOTOR4_CHA_Pin|MOTOR4_CHB_Pin;
 8002e50:	2303      	movs	r3, #3
 8002e52:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e54:	2302      	movs	r3, #2
 8002e56:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002e60:	2302      	movs	r3, #2
 8002e62:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e68:	4619      	mov	r1, r3
 8002e6a:	481b      	ldr	r0, [pc, #108]	; (8002ed8 <HAL_TIM_Encoder_MspInit+0x260>)
 8002e6c:	f000 ffc2 	bl	8003df4 <HAL_GPIO_Init>
}
 8002e70:	e02c      	b.n	8002ecc <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM8)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a1e      	ldr	r2, [pc, #120]	; (8002ef0 <HAL_TIM_Encoder_MspInit+0x278>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d127      	bne.n	8002ecc <HAL_TIM_Encoder_MspInit+0x254>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002e7c:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e80:	4a14      	ldr	r2, [pc, #80]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002e82:	f043 0302 	orr.w	r3, r3, #2
 8002e86:	6453      	str	r3, [r2, #68]	; 0x44
 8002e88:	4b12      	ldr	r3, [pc, #72]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e94:	4b0f      	ldr	r3, [pc, #60]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	4a0e      	ldr	r2, [pc, #56]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002e9a:	f043 0304 	orr.w	r3, r3, #4
 8002e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea0:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR5_CHA_Pin|MOTOR5_CHB_Pin;
 8002eac:	23c0      	movs	r3, #192	; 0xc0
 8002eae:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ec0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	480b      	ldr	r0, [pc, #44]	; (8002ef4 <HAL_TIM_Encoder_MspInit+0x27c>)
 8002ec8:	f000 ff94 	bl	8003df4 <HAL_GPIO_Init>
}
 8002ecc:	bf00      	nop
 8002ece:	3750      	adds	r7, #80	; 0x50
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	40020000 	.word	0x40020000
 8002edc:	40020400 	.word	0x40020400
 8002ee0:	40000400 	.word	0x40000400
 8002ee4:	40000800 	.word	0x40000800
 8002ee8:	40020c00 	.word	0x40020c00
 8002eec:	40000c00 	.word	0x40000c00
 8002ef0:	40010400 	.word	0x40010400
 8002ef4:	40020800 	.word	0x40020800

08002ef8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08a      	sub	sp, #40	; 0x28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f00:	f107 0314 	add.w	r3, r7, #20
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	60da      	str	r2, [r3, #12]
 8002f0e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a22      	ldr	r2, [pc, #136]	; (8002fa0 <HAL_TIM_MspPostInit+0xa8>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d11d      	bne.n	8002f56 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f1a:	4b22      	ldr	r3, [pc, #136]	; (8002fa4 <HAL_TIM_MspPostInit+0xac>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	4a21      	ldr	r2, [pc, #132]	; (8002fa4 <HAL_TIM_MspPostInit+0xac>)
 8002f20:	f043 0310 	orr.w	r3, r3, #16
 8002f24:	6313      	str	r3, [r2, #48]	; 0x30
 8002f26:	4b1f      	ldr	r3, [pc, #124]	; (8002fa4 <HAL_TIM_MspPostInit+0xac>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	f003 0310 	and.w	r3, r3, #16
 8002f2e:	613b      	str	r3, [r7, #16]
 8002f30:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR1_PWM_Pin|MOTOR2_PWM_Pin|MOTOR3_PWM_Pin|MOTOR4_PWM_Pin;
 8002f32:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8002f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f40:	2300      	movs	r3, #0
 8002f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002f44:	2301      	movs	r3, #1
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f48:	f107 0314 	add.w	r3, r7, #20
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4816      	ldr	r0, [pc, #88]	; (8002fa8 <HAL_TIM_MspPostInit+0xb0>)
 8002f50:	f000 ff50 	bl	8003df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002f54:	e020      	b.n	8002f98 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM9)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a14      	ldr	r2, [pc, #80]	; (8002fac <HAL_TIM_MspPostInit+0xb4>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d11b      	bne.n	8002f98 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f60:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <HAL_TIM_MspPostInit+0xac>)
 8002f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f64:	4a0f      	ldr	r2, [pc, #60]	; (8002fa4 <HAL_TIM_MspPostInit+0xac>)
 8002f66:	f043 0310 	orr.w	r3, r3, #16
 8002f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6c:	4b0d      	ldr	r3, [pc, #52]	; (8002fa4 <HAL_TIM_MspPostInit+0xac>)
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR5_PWM_Pin|MOTOR6_PWM_Pin;
 8002f78:	2360      	movs	r3, #96	; 0x60
 8002f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f84:	2300      	movs	r3, #0
 8002f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f8c:	f107 0314 	add.w	r3, r7, #20
 8002f90:	4619      	mov	r1, r3
 8002f92:	4805      	ldr	r0, [pc, #20]	; (8002fa8 <HAL_TIM_MspPostInit+0xb0>)
 8002f94:	f000 ff2e 	bl	8003df4 <HAL_GPIO_Init>
}
 8002f98:	bf00      	nop
 8002f9a:	3728      	adds	r7, #40	; 0x28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40010000 	.word	0x40010000
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	40014000 	.word	0x40014000

08002fb0 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002fb4:	4b14      	ldr	r3, [pc, #80]	; (8003008 <MX_USART3_UART_Init+0x58>)
 8002fb6:	4a15      	ldr	r2, [pc, #84]	; (800300c <MX_USART3_UART_Init+0x5c>)
 8002fb8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002fba:	4b13      	ldr	r3, [pc, #76]	; (8003008 <MX_USART3_UART_Init+0x58>)
 8002fbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fc0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002fc2:	4b11      	ldr	r3, [pc, #68]	; (8003008 <MX_USART3_UART_Init+0x58>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002fc8:	4b0f      	ldr	r3, [pc, #60]	; (8003008 <MX_USART3_UART_Init+0x58>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002fce:	4b0e      	ldr	r3, [pc, #56]	; (8003008 <MX_USART3_UART_Init+0x58>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002fd4:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <MX_USART3_UART_Init+0x58>)
 8002fd6:	220c      	movs	r2, #12
 8002fd8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fda:	4b0b      	ldr	r3, [pc, #44]	; (8003008 <MX_USART3_UART_Init+0x58>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fe0:	4b09      	ldr	r3, [pc, #36]	; (8003008 <MX_USART3_UART_Init+0x58>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fe6:	4b08      	ldr	r3, [pc, #32]	; (8003008 <MX_USART3_UART_Init+0x58>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fec:	4b06      	ldr	r3, [pc, #24]	; (8003008 <MX_USART3_UART_Init+0x58>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ff2:	4805      	ldr	r0, [pc, #20]	; (8003008 <MX_USART3_UART_Init+0x58>)
 8002ff4:	f003 fc0e 	bl	8006814 <HAL_UART_Init>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002ffe:	f7ff f82f 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003002:	bf00      	nop
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	200064dc 	.word	0x200064dc
 800300c:	40004800 	.word	0x40004800

08003010 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b0ae      	sub	sp, #184	; 0xb8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003018:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	605a      	str	r2, [r3, #4]
 8003022:	609a      	str	r2, [r3, #8]
 8003024:	60da      	str	r2, [r3, #12]
 8003026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003028:	f107 0314 	add.w	r3, r7, #20
 800302c:	2290      	movs	r2, #144	; 0x90
 800302e:	2100      	movs	r1, #0
 8003030:	4618      	mov	r0, r3
 8003032:	f017 fad7 	bl	801a5e4 <memset>
  if(uartHandle->Instance==USART3)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a56      	ldr	r2, [pc, #344]	; (8003194 <HAL_UART_MspInit+0x184>)
 800303c:	4293      	cmp	r3, r2
 800303e:	f040 80a4 	bne.w	800318a <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003042:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003046:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003048:	2300      	movs	r3, #0
 800304a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	4618      	mov	r0, r3
 8003052:	f001 ff5b 	bl	8004f0c <HAL_RCCEx_PeriphCLKConfig>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800305c:	f7ff f800 	bl	8002060 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003060:	4b4d      	ldr	r3, [pc, #308]	; (8003198 <HAL_UART_MspInit+0x188>)
 8003062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003064:	4a4c      	ldr	r2, [pc, #304]	; (8003198 <HAL_UART_MspInit+0x188>)
 8003066:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800306a:	6413      	str	r3, [r2, #64]	; 0x40
 800306c:	4b4a      	ldr	r3, [pc, #296]	; (8003198 <HAL_UART_MspInit+0x188>)
 800306e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003070:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003078:	4b47      	ldr	r3, [pc, #284]	; (8003198 <HAL_UART_MspInit+0x188>)
 800307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307c:	4a46      	ldr	r2, [pc, #280]	; (8003198 <HAL_UART_MspInit+0x188>)
 800307e:	f043 0308 	orr.w	r3, r3, #8
 8003082:	6313      	str	r3, [r2, #48]	; 0x30
 8003084:	4b44      	ldr	r3, [pc, #272]	; (8003198 <HAL_UART_MspInit+0x188>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003090:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003094:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003098:	2302      	movs	r3, #2
 800309a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a4:	2303      	movs	r3, #3
 80030a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030aa:	2307      	movs	r3, #7
 80030ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80030b4:	4619      	mov	r1, r3
 80030b6:	4839      	ldr	r0, [pc, #228]	; (800319c <HAL_UART_MspInit+0x18c>)
 80030b8:	f000 fe9c 	bl	8003df4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80030bc:	4b38      	ldr	r3, [pc, #224]	; (80031a0 <HAL_UART_MspInit+0x190>)
 80030be:	4a39      	ldr	r2, [pc, #228]	; (80031a4 <HAL_UART_MspInit+0x194>)
 80030c0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80030c2:	4b37      	ldr	r3, [pc, #220]	; (80031a0 <HAL_UART_MspInit+0x190>)
 80030c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030c8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030ca:	4b35      	ldr	r3, [pc, #212]	; (80031a0 <HAL_UART_MspInit+0x190>)
 80030cc:	2240      	movs	r2, #64	; 0x40
 80030ce:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030d0:	4b33      	ldr	r3, [pc, #204]	; (80031a0 <HAL_UART_MspInit+0x190>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030d6:	4b32      	ldr	r3, [pc, #200]	; (80031a0 <HAL_UART_MspInit+0x190>)
 80030d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030dc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030de:	4b30      	ldr	r3, [pc, #192]	; (80031a0 <HAL_UART_MspInit+0x190>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030e4:	4b2e      	ldr	r3, [pc, #184]	; (80031a0 <HAL_UART_MspInit+0x190>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80030ea:	4b2d      	ldr	r3, [pc, #180]	; (80031a0 <HAL_UART_MspInit+0x190>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80030f0:	4b2b      	ldr	r3, [pc, #172]	; (80031a0 <HAL_UART_MspInit+0x190>)
 80030f2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80030f6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030f8:	4b29      	ldr	r3, [pc, #164]	; (80031a0 <HAL_UART_MspInit+0x190>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80030fe:	4828      	ldr	r0, [pc, #160]	; (80031a0 <HAL_UART_MspInit+0x190>)
 8003100:	f000 fa62 	bl	80035c8 <HAL_DMA_Init>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 800310a:	f7fe ffa9 	bl	8002060 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a23      	ldr	r2, [pc, #140]	; (80031a0 <HAL_UART_MspInit+0x190>)
 8003112:	671a      	str	r2, [r3, #112]	; 0x70
 8003114:	4a22      	ldr	r2, [pc, #136]	; (80031a0 <HAL_UART_MspInit+0x190>)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800311a:	4b23      	ldr	r3, [pc, #140]	; (80031a8 <HAL_UART_MspInit+0x198>)
 800311c:	4a23      	ldr	r2, [pc, #140]	; (80031ac <HAL_UART_MspInit+0x19c>)
 800311e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003120:	4b21      	ldr	r3, [pc, #132]	; (80031a8 <HAL_UART_MspInit+0x198>)
 8003122:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003126:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003128:	4b1f      	ldr	r3, [pc, #124]	; (80031a8 <HAL_UART_MspInit+0x198>)
 800312a:	2200      	movs	r2, #0
 800312c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800312e:	4b1e      	ldr	r3, [pc, #120]	; (80031a8 <HAL_UART_MspInit+0x198>)
 8003130:	2200      	movs	r2, #0
 8003132:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003134:	4b1c      	ldr	r3, [pc, #112]	; (80031a8 <HAL_UART_MspInit+0x198>)
 8003136:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800313a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800313c:	4b1a      	ldr	r3, [pc, #104]	; (80031a8 <HAL_UART_MspInit+0x198>)
 800313e:	2200      	movs	r2, #0
 8003140:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003142:	4b19      	ldr	r3, [pc, #100]	; (80031a8 <HAL_UART_MspInit+0x198>)
 8003144:	2200      	movs	r2, #0
 8003146:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003148:	4b17      	ldr	r3, [pc, #92]	; (80031a8 <HAL_UART_MspInit+0x198>)
 800314a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800314e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003150:	4b15      	ldr	r3, [pc, #84]	; (80031a8 <HAL_UART_MspInit+0x198>)
 8003152:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003156:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003158:	4b13      	ldr	r3, [pc, #76]	; (80031a8 <HAL_UART_MspInit+0x198>)
 800315a:	2200      	movs	r2, #0
 800315c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800315e:	4812      	ldr	r0, [pc, #72]	; (80031a8 <HAL_UART_MspInit+0x198>)
 8003160:	f000 fa32 	bl	80035c8 <HAL_DMA_Init>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 800316a:	f7fe ff79 	bl	8002060 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a0d      	ldr	r2, [pc, #52]	; (80031a8 <HAL_UART_MspInit+0x198>)
 8003172:	675a      	str	r2, [r3, #116]	; 0x74
 8003174:	4a0c      	ldr	r2, [pc, #48]	; (80031a8 <HAL_UART_MspInit+0x198>)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800317a:	2200      	movs	r2, #0
 800317c:	2105      	movs	r1, #5
 800317e:	2027      	movs	r0, #39	; 0x27
 8003180:	f000 f9f8 	bl	8003574 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003184:	2027      	movs	r0, #39	; 0x27
 8003186:	f000 fa11 	bl	80035ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800318a:	bf00      	nop
 800318c:	37b8      	adds	r7, #184	; 0xb8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40004800 	.word	0x40004800
 8003198:	40023800 	.word	0x40023800
 800319c:	40020c00 	.word	0x40020c00
 80031a0:	20006564 	.word	0x20006564
 80031a4:	40026058 	.word	0x40026058
 80031a8:	200065c4 	.word	0x200065c4
 80031ac:	40026028 	.word	0x40026028

080031b0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80031b4:	4b14      	ldr	r3, [pc, #80]	; (8003208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80031ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80031bc:	4b12      	ldr	r3, [pc, #72]	; (8003208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031be:	2206      	movs	r2, #6
 80031c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80031c2:	4b11      	ldr	r3, [pc, #68]	; (8003208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031c4:	2202      	movs	r2, #2
 80031c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80031c8:	4b0f      	ldr	r3, [pc, #60]	; (8003208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80031ce:	4b0e      	ldr	r3, [pc, #56]	; (8003208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031d0:	2202      	movs	r2, #2
 80031d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80031d4:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031d6:	2201      	movs	r2, #1
 80031d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80031da:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031dc:	2200      	movs	r2, #0
 80031de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80031e0:	4b09      	ldr	r3, [pc, #36]	; (8003208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80031e6:	4b08      	ldr	r3, [pc, #32]	; (8003208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80031ec:	4b06      	ldr	r3, [pc, #24]	; (8003208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80031f2:	4805      	ldr	r0, [pc, #20]	; (8003208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031f4:	f000 ffdb 	bl	80041ae <HAL_PCD_Init>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80031fe:	f7fe ff2f 	bl	8002060 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003202:	bf00      	nop
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20006624 	.word	0x20006624

0800320c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b0ae      	sub	sp, #184	; 0xb8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003214:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	605a      	str	r2, [r3, #4]
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	60da      	str	r2, [r3, #12]
 8003222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003224:	f107 0314 	add.w	r3, r7, #20
 8003228:	2290      	movs	r2, #144	; 0x90
 800322a:	2100      	movs	r1, #0
 800322c:	4618      	mov	r0, r3
 800322e:	f017 f9d9 	bl	801a5e4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800323a:	d159      	bne.n	80032f0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800323c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003240:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003242:	2300      	movs	r3, #0
 8003244:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003248:	f107 0314 	add.w	r3, r7, #20
 800324c:	4618      	mov	r0, r3
 800324e:	f001 fe5d 	bl	8004f0c <HAL_RCCEx_PeriphCLKConfig>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8003258:	f7fe ff02 	bl	8002060 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800325c:	4b26      	ldr	r3, [pc, #152]	; (80032f8 <HAL_PCD_MspInit+0xec>)
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	4a25      	ldr	r2, [pc, #148]	; (80032f8 <HAL_PCD_MspInit+0xec>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	6313      	str	r3, [r2, #48]	; 0x30
 8003268:	4b23      	ldr	r3, [pc, #140]	; (80032f8 <HAL_PCD_MspInit+0xec>)
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003274:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003278:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327c:	2302      	movs	r3, #2
 800327e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003282:	2300      	movs	r3, #0
 8003284:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003288:	2303      	movs	r3, #3
 800328a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800328e:	230a      	movs	r3, #10
 8003290:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003294:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003298:	4619      	mov	r1, r3
 800329a:	4818      	ldr	r0, [pc, #96]	; (80032fc <HAL_PCD_MspInit+0xf0>)
 800329c:	f000 fdaa 	bl	8003df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80032a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032a8:	2300      	movs	r3, #0
 80032aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80032b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80032b8:	4619      	mov	r1, r3
 80032ba:	4810      	ldr	r0, [pc, #64]	; (80032fc <HAL_PCD_MspInit+0xf0>)
 80032bc:	f000 fd9a 	bl	8003df4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80032c0:	4b0d      	ldr	r3, [pc, #52]	; (80032f8 <HAL_PCD_MspInit+0xec>)
 80032c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c4:	4a0c      	ldr	r2, [pc, #48]	; (80032f8 <HAL_PCD_MspInit+0xec>)
 80032c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ca:	6353      	str	r3, [r2, #52]	; 0x34
 80032cc:	4b0a      	ldr	r3, [pc, #40]	; (80032f8 <HAL_PCD_MspInit+0xec>)
 80032ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4b07      	ldr	r3, [pc, #28]	; (80032f8 <HAL_PCD_MspInit+0xec>)
 80032da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032dc:	4a06      	ldr	r2, [pc, #24]	; (80032f8 <HAL_PCD_MspInit+0xec>)
 80032de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032e2:	6453      	str	r3, [r2, #68]	; 0x44
 80032e4:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <HAL_PCD_MspInit+0xec>)
 80032e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ec:	60bb      	str	r3, [r7, #8]
 80032ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80032f0:	bf00      	nop
 80032f2:	37b8      	adds	r7, #184	; 0xb8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40020000 	.word	0x40020000

08003300 <_Z14getCurrentTimev>:
}
long remap( long v,  long a1,  long b1,  long a2,  long b2, bool clamp = false){
  return round(remap((float) v, (float) a1, (float) b1, (float) a2, (float) b2, clamp));
}

uint32_t getCurrentTime() {
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8003304:	f000 f84e 	bl	80033a4 <HAL_GetTick>
 8003308:	4603      	mov	r3, r0
}
 800330a:	4618      	mov	r0, r3
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003310:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003348 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003314:	480d      	ldr	r0, [pc, #52]	; (800334c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003316:	490e      	ldr	r1, [pc, #56]	; (8003350 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003318:	4a0e      	ldr	r2, [pc, #56]	; (8003354 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800331a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800331c:	e002      	b.n	8003324 <LoopCopyDataInit>

0800331e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800331e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003322:	3304      	adds	r3, #4

08003324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003328:	d3f9      	bcc.n	800331e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800332a:	4a0b      	ldr	r2, [pc, #44]	; (8003358 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800332c:	4c0b      	ldr	r4, [pc, #44]	; (800335c <LoopFillZerobss+0x26>)
  movs r3, #0
 800332e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003330:	e001      	b.n	8003336 <LoopFillZerobss>

08003332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003334:	3204      	adds	r2, #4

08003336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003338:	d3fb      	bcc.n	8003332 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800333a:	f7ff f9a3 	bl	8002684 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800333e:	f017 fa53 	bl	801a7e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003342:	f7fe fdd7 	bl	8001ef4 <main>
  bx  lr    
 8003346:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003348:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800334c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003350:	20001df4 	.word	0x20001df4
  ldr r2, =_sidata
 8003354:	0801d200 	.word	0x0801d200
  ldr r2, =_sbss
 8003358:	20001df8 	.word	0x20001df8
  ldr r4, =_ebss
 800335c:	20010710 	.word	0x20010710

08003360 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003360:	e7fe      	b.n	8003360 <ADC_IRQHandler>

08003362 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003366:	2003      	movs	r0, #3
 8003368:	f000 f8f9 	bl	800355e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800336c:	200f      	movs	r0, #15
 800336e:	f7ff f80b 	bl	8002388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003372:	f7fe ffe1 	bl	8002338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003380:	4b06      	ldr	r3, [pc, #24]	; (800339c <HAL_IncTick+0x20>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	461a      	mov	r2, r3
 8003386:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <HAL_IncTick+0x24>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4413      	add	r3, r2
 800338c:	4a04      	ldr	r2, [pc, #16]	; (80033a0 <HAL_IncTick+0x24>)
 800338e:	6013      	str	r3, [r2, #0]
}
 8003390:	bf00      	nop
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	2000000c 	.word	0x2000000c
 80033a0:	20006b2c 	.word	0x20006b2c

080033a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  return uwTick;
 80033a8:	4b03      	ldr	r3, [pc, #12]	; (80033b8 <HAL_GetTick+0x14>)
 80033aa:	681b      	ldr	r3, [r3, #0]
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	20006b2c 	.word	0x20006b2c

080033bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033c4:	f7ff ffee 	bl	80033a4 <HAL_GetTick>
 80033c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033d4:	d005      	beq.n	80033e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033d6:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <HAL_Delay+0x44>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	4413      	add	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033e2:	bf00      	nop
 80033e4:	f7ff ffde 	bl	80033a4 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d8f7      	bhi.n	80033e4 <HAL_Delay+0x28>
  {
  }
}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	2000000c 	.word	0x2000000c

08003404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f003 0307 	and.w	r3, r3, #7
 8003412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <__NVIC_SetPriorityGrouping+0x40>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003420:	4013      	ands	r3, r2
 8003422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <__NVIC_SetPriorityGrouping+0x44>)
 800342e:	4313      	orrs	r3, r2
 8003430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003432:	4a04      	ldr	r2, [pc, #16]	; (8003444 <__NVIC_SetPriorityGrouping+0x40>)
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	60d3      	str	r3, [r2, #12]
}
 8003438:	bf00      	nop
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	e000ed00 	.word	0xe000ed00
 8003448:	05fa0000 	.word	0x05fa0000

0800344c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003450:	4b04      	ldr	r3, [pc, #16]	; (8003464 <__NVIC_GetPriorityGrouping+0x18>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	0a1b      	lsrs	r3, r3, #8
 8003456:	f003 0307 	and.w	r3, r3, #7
}
 800345a:	4618      	mov	r0, r3
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003476:	2b00      	cmp	r3, #0
 8003478:	db0b      	blt.n	8003492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	f003 021f 	and.w	r2, r3, #31
 8003480:	4907      	ldr	r1, [pc, #28]	; (80034a0 <__NVIC_EnableIRQ+0x38>)
 8003482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003486:	095b      	lsrs	r3, r3, #5
 8003488:	2001      	movs	r0, #1
 800348a:	fa00 f202 	lsl.w	r2, r0, r2
 800348e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	e000e100 	.word	0xe000e100

080034a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	6039      	str	r1, [r7, #0]
 80034ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	db0a      	blt.n	80034ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	490c      	ldr	r1, [pc, #48]	; (80034f0 <__NVIC_SetPriority+0x4c>)
 80034be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c2:	0112      	lsls	r2, r2, #4
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	440b      	add	r3, r1
 80034c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034cc:	e00a      	b.n	80034e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	4908      	ldr	r1, [pc, #32]	; (80034f4 <__NVIC_SetPriority+0x50>)
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	3b04      	subs	r3, #4
 80034dc:	0112      	lsls	r2, r2, #4
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	440b      	add	r3, r1
 80034e2:	761a      	strb	r2, [r3, #24]
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	e000e100 	.word	0xe000e100
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b089      	sub	sp, #36	; 0x24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f1c3 0307 	rsb	r3, r3, #7
 8003512:	2b04      	cmp	r3, #4
 8003514:	bf28      	it	cs
 8003516:	2304      	movcs	r3, #4
 8003518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	3304      	adds	r3, #4
 800351e:	2b06      	cmp	r3, #6
 8003520:	d902      	bls.n	8003528 <NVIC_EncodePriority+0x30>
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	3b03      	subs	r3, #3
 8003526:	e000      	b.n	800352a <NVIC_EncodePriority+0x32>
 8003528:	2300      	movs	r3, #0
 800352a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800352c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43da      	mvns	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	401a      	ands	r2, r3
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003540:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	fa01 f303 	lsl.w	r3, r1, r3
 800354a:	43d9      	mvns	r1, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003550:	4313      	orrs	r3, r2
         );
}
 8003552:	4618      	mov	r0, r3
 8003554:	3724      	adds	r7, #36	; 0x24
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b082      	sub	sp, #8
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff ff4c 	bl	8003404 <__NVIC_SetPriorityGrouping>
}
 800356c:	bf00      	nop
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	4603      	mov	r3, r0
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003586:	f7ff ff61 	bl	800344c <__NVIC_GetPriorityGrouping>
 800358a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	68b9      	ldr	r1, [r7, #8]
 8003590:	6978      	ldr	r0, [r7, #20]
 8003592:	f7ff ffb1 	bl	80034f8 <NVIC_EncodePriority>
 8003596:	4602      	mov	r2, r0
 8003598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800359c:	4611      	mov	r1, r2
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff ff80 	bl	80034a4 <__NVIC_SetPriority>
}
 80035a4:	bf00      	nop
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff ff54 	bl	8003468 <__NVIC_EnableIRQ>
}
 80035c0:	bf00      	nop
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035d4:	f7ff fee6 	bl	80033a4 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e099      	b.n	8003718 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003604:	e00f      	b.n	8003626 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003606:	f7ff fecd 	bl	80033a4 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b05      	cmp	r3, #5
 8003612:	d908      	bls.n	8003626 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2203      	movs	r2, #3
 800361e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e078      	b.n	8003718 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e8      	bne.n	8003606 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	4b38      	ldr	r3, [pc, #224]	; (8003720 <HAL_DMA_Init+0x158>)
 8003640:	4013      	ands	r3, r2
 8003642:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003652:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800365e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800366a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	2b04      	cmp	r3, #4
 800367e:	d107      	bne.n	8003690 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	4313      	orrs	r3, r2
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f023 0307 	bic.w	r3, r3, #7
 80036a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d117      	bne.n	80036ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00e      	beq.n	80036ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 fb15 	bl	8003cfc <DMA_CheckFifoParam>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2240      	movs	r2, #64	; 0x40
 80036dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036e6:	2301      	movs	r3, #1
 80036e8:	e016      	b.n	8003718 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 facc 	bl	8003c90 <DMA_CalcBaseAndBitshift>
 80036f8:	4603      	mov	r3, r0
 80036fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003700:	223f      	movs	r2, #63	; 0x3f
 8003702:	409a      	lsls	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	e010803f 	.word	0xe010803f

08003724 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
 8003730:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_DMA_Start_IT+0x26>
 8003746:	2302      	movs	r3, #2
 8003748:	e048      	b.n	80037dc <HAL_DMA_Start_IT+0xb8>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b01      	cmp	r3, #1
 800375c:	d137      	bne.n	80037ce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2202      	movs	r2, #2
 8003762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 fa5e 	bl	8003c34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377c:	223f      	movs	r2, #63	; 0x3f
 800377e:	409a      	lsls	r2, r3
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0216 	orr.w	r2, r2, #22
 8003792:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695a      	ldr	r2, [r3, #20]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037a2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d007      	beq.n	80037bc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0208 	orr.w	r2, r2, #8
 80037ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	e005      	b.n	80037da <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037d6:	2302      	movs	r3, #2
 80037d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037da:	7dfb      	ldrb	r3, [r7, #23]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80037f2:	f7ff fdd7 	bl	80033a4 <HAL_GetTick>
 80037f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d008      	beq.n	8003816 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2280      	movs	r2, #128	; 0x80
 8003808:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e052      	b.n	80038bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0216 	bic.w	r2, r2, #22
 8003824:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695a      	ldr	r2, [r3, #20]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003834:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	2b00      	cmp	r3, #0
 800383c:	d103      	bne.n	8003846 <HAL_DMA_Abort+0x62>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003842:	2b00      	cmp	r3, #0
 8003844:	d007      	beq.n	8003856 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0208 	bic.w	r2, r2, #8
 8003854:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0201 	bic.w	r2, r2, #1
 8003864:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003866:	e013      	b.n	8003890 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003868:	f7ff fd9c 	bl	80033a4 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b05      	cmp	r3, #5
 8003874:	d90c      	bls.n	8003890 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2220      	movs	r2, #32
 800387a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2203      	movs	r2, #3
 8003880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e015      	b.n	80038bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1e4      	bne.n	8003868 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a2:	223f      	movs	r2, #63	; 0x3f
 80038a4:	409a      	lsls	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d004      	beq.n	80038e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2280      	movs	r2, #128	; 0x80
 80038dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e00c      	b.n	80038fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2205      	movs	r2, #5
 80038e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0201 	bic.w	r2, r2, #1
 80038f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003910:	2300      	movs	r3, #0
 8003912:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003914:	4b8e      	ldr	r3, [pc, #568]	; (8003b50 <HAL_DMA_IRQHandler+0x248>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a8e      	ldr	r2, [pc, #568]	; (8003b54 <HAL_DMA_IRQHandler+0x24c>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	0a9b      	lsrs	r3, r3, #10
 8003920:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003926:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003932:	2208      	movs	r2, #8
 8003934:	409a      	lsls	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	4013      	ands	r3, r2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d01a      	beq.n	8003974 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d013      	beq.n	8003974 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 0204 	bic.w	r2, r2, #4
 800395a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003960:	2208      	movs	r2, #8
 8003962:	409a      	lsls	r2, r3
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396c:	f043 0201 	orr.w	r2, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003978:	2201      	movs	r2, #1
 800397a:	409a      	lsls	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4013      	ands	r3, r2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d012      	beq.n	80039aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00b      	beq.n	80039aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003996:	2201      	movs	r2, #1
 8003998:	409a      	lsls	r2, r3
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a2:	f043 0202 	orr.w	r2, r3, #2
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ae:	2204      	movs	r2, #4
 80039b0:	409a      	lsls	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4013      	ands	r3, r2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d012      	beq.n	80039e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00b      	beq.n	80039e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039cc:	2204      	movs	r2, #4
 80039ce:	409a      	lsls	r2, r3
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d8:	f043 0204 	orr.w	r2, r3, #4
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e4:	2210      	movs	r2, #16
 80039e6:	409a      	lsls	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4013      	ands	r3, r2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d043      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d03c      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a02:	2210      	movs	r2, #16
 8003a04:	409a      	lsls	r2, r3
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d018      	beq.n	8003a4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d108      	bne.n	8003a38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d024      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	4798      	blx	r3
 8003a36:	e01f      	b.n	8003a78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01b      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	4798      	blx	r3
 8003a48:	e016      	b.n	8003a78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d107      	bne.n	8003a68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0208 	bic.w	r2, r2, #8
 8003a66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d003      	beq.n	8003a78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4013      	ands	r3, r2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 808f 	beq.w	8003ba8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0310 	and.w	r3, r3, #16
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 8087 	beq.w	8003ba8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	409a      	lsls	r2, r3
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b05      	cmp	r3, #5
 8003ab0:	d136      	bne.n	8003b20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0216 	bic.w	r2, r2, #22
 8003ac0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695a      	ldr	r2, [r3, #20]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ad0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d103      	bne.n	8003ae2 <HAL_DMA_IRQHandler+0x1da>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d007      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0208 	bic.w	r2, r2, #8
 8003af0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af6:	223f      	movs	r2, #63	; 0x3f
 8003af8:	409a      	lsls	r2, r3
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d07e      	beq.n	8003c14 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	4798      	blx	r3
        }
        return;
 8003b1e:	e079      	b.n	8003c14 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d01d      	beq.n	8003b6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10d      	bne.n	8003b58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d031      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	4798      	blx	r3
 8003b4c:	e02c      	b.n	8003ba8 <HAL_DMA_IRQHandler+0x2a0>
 8003b4e:	bf00      	nop
 8003b50:	20000004 	.word	0x20000004
 8003b54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d023      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	4798      	blx	r3
 8003b68:	e01e      	b.n	8003ba8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10f      	bne.n	8003b98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0210 	bic.w	r2, r2, #16
 8003b86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d032      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d022      	beq.n	8003c02 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2205      	movs	r2, #5
 8003bc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0201 	bic.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d307      	bcc.n	8003bf0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f2      	bne.n	8003bd4 <HAL_DMA_IRQHandler+0x2cc>
 8003bee:	e000      	b.n	8003bf2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003bf0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d005      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	4798      	blx	r3
 8003c12:	e000      	b.n	8003c16 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c14:	bf00      	nop
    }
  }
}
 8003c16:	3718      	adds	r7, #24
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b40      	cmp	r3, #64	; 0x40
 8003c60:	d108      	bne.n	8003c74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c72:	e007      	b.n	8003c84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	60da      	str	r2, [r3, #12]
}
 8003c84:	bf00      	nop
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	3b10      	subs	r3, #16
 8003ca0:	4a13      	ldr	r2, [pc, #76]	; (8003cf0 <DMA_CalcBaseAndBitshift+0x60>)
 8003ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca6:	091b      	lsrs	r3, r3, #4
 8003ca8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003caa:	4a12      	ldr	r2, [pc, #72]	; (8003cf4 <DMA_CalcBaseAndBitshift+0x64>)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4413      	add	r3, r2
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d908      	bls.n	8003cd0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <DMA_CalcBaseAndBitshift+0x68>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	1d1a      	adds	r2, r3, #4
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	659a      	str	r2, [r3, #88]	; 0x58
 8003cce:	e006      	b.n	8003cde <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4b08      	ldr	r3, [pc, #32]	; (8003cf8 <DMA_CalcBaseAndBitshift+0x68>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	aaaaaaab 	.word	0xaaaaaaab
 8003cf4:	0801b6ec 	.word	0x0801b6ec
 8003cf8:	fffffc00 	.word	0xfffffc00

08003cfc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d11f      	bne.n	8003d56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	d856      	bhi.n	8003dca <DMA_CheckFifoParam+0xce>
 8003d1c:	a201      	add	r2, pc, #4	; (adr r2, 8003d24 <DMA_CheckFifoParam+0x28>)
 8003d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d22:	bf00      	nop
 8003d24:	08003d35 	.word	0x08003d35
 8003d28:	08003d47 	.word	0x08003d47
 8003d2c:	08003d35 	.word	0x08003d35
 8003d30:	08003dcb 	.word	0x08003dcb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d046      	beq.n	8003dce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d44:	e043      	b.n	8003dce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d4e:	d140      	bne.n	8003dd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d54:	e03d      	b.n	8003dd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d5e:	d121      	bne.n	8003da4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d837      	bhi.n	8003dd6 <DMA_CheckFifoParam+0xda>
 8003d66:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <DMA_CheckFifoParam+0x70>)
 8003d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6c:	08003d7d 	.word	0x08003d7d
 8003d70:	08003d83 	.word	0x08003d83
 8003d74:	08003d7d 	.word	0x08003d7d
 8003d78:	08003d95 	.word	0x08003d95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d80:	e030      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d025      	beq.n	8003dda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d92:	e022      	b.n	8003dda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d9c:	d11f      	bne.n	8003dde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003da2:	e01c      	b.n	8003dde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d903      	bls.n	8003db2 <DMA_CheckFifoParam+0xb6>
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d003      	beq.n	8003db8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003db0:	e018      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	73fb      	strb	r3, [r7, #15]
      break;
 8003db6:	e015      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00e      	beq.n	8003de2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc8:	e00b      	b.n	8003de2 <DMA_CheckFifoParam+0xe6>
      break;
 8003dca:	bf00      	nop
 8003dcc:	e00a      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;
 8003dce:	bf00      	nop
 8003dd0:	e008      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;
 8003dd2:	bf00      	nop
 8003dd4:	e006      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;
 8003dd6:	bf00      	nop
 8003dd8:	e004      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;
 8003dda:	bf00      	nop
 8003ddc:	e002      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003dde:	bf00      	nop
 8003de0:	e000      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;
 8003de2:	bf00      	nop
    }
  } 
  
  return status; 
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop

08003df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b089      	sub	sp, #36	; 0x24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003e06:	2300      	movs	r3, #0
 8003e08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
 8003e12:	e175      	b.n	8004100 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003e14:	2201      	movs	r2, #1
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	4013      	ands	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	f040 8164 	bne.w	80040fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d005      	beq.n	8003e4a <HAL_GPIO_Init+0x56>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d130      	bne.n	8003eac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	2203      	movs	r2, #3
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	43db      	mvns	r3, r3
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	68da      	ldr	r2, [r3, #12]
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e80:	2201      	movs	r2, #1
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	091b      	lsrs	r3, r3, #4
 8003e96:	f003 0201 	and.w	r2, r3, #1
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 0303 	and.w	r3, r3, #3
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	d017      	beq.n	8003ee8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	2203      	movs	r2, #3
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f003 0303 	and.w	r3, r3, #3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d123      	bne.n	8003f3c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	08da      	lsrs	r2, r3, #3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3208      	adds	r2, #8
 8003efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	220f      	movs	r2, #15
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	43db      	mvns	r3, r3
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	4013      	ands	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	08da      	lsrs	r2, r3, #3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3208      	adds	r2, #8
 8003f36:	69b9      	ldr	r1, [r7, #24]
 8003f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	2203      	movs	r2, #3
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4013      	ands	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f003 0203 	and.w	r2, r3, #3
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 80be 	beq.w	80040fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f7e:	4b66      	ldr	r3, [pc, #408]	; (8004118 <HAL_GPIO_Init+0x324>)
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	4a65      	ldr	r2, [pc, #404]	; (8004118 <HAL_GPIO_Init+0x324>)
 8003f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f88:	6453      	str	r3, [r2, #68]	; 0x44
 8003f8a:	4b63      	ldr	r3, [pc, #396]	; (8004118 <HAL_GPIO_Init+0x324>)
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003f96:	4a61      	ldr	r2, [pc, #388]	; (800411c <HAL_GPIO_Init+0x328>)
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	089b      	lsrs	r3, r3, #2
 8003f9c:	3302      	adds	r3, #2
 8003f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	220f      	movs	r2, #15
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a58      	ldr	r2, [pc, #352]	; (8004120 <HAL_GPIO_Init+0x32c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d037      	beq.n	8004032 <HAL_GPIO_Init+0x23e>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a57      	ldr	r2, [pc, #348]	; (8004124 <HAL_GPIO_Init+0x330>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d031      	beq.n	800402e <HAL_GPIO_Init+0x23a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a56      	ldr	r2, [pc, #344]	; (8004128 <HAL_GPIO_Init+0x334>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d02b      	beq.n	800402a <HAL_GPIO_Init+0x236>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a55      	ldr	r2, [pc, #340]	; (800412c <HAL_GPIO_Init+0x338>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d025      	beq.n	8004026 <HAL_GPIO_Init+0x232>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a54      	ldr	r2, [pc, #336]	; (8004130 <HAL_GPIO_Init+0x33c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d01f      	beq.n	8004022 <HAL_GPIO_Init+0x22e>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a53      	ldr	r2, [pc, #332]	; (8004134 <HAL_GPIO_Init+0x340>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d019      	beq.n	800401e <HAL_GPIO_Init+0x22a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a52      	ldr	r2, [pc, #328]	; (8004138 <HAL_GPIO_Init+0x344>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d013      	beq.n	800401a <HAL_GPIO_Init+0x226>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a51      	ldr	r2, [pc, #324]	; (800413c <HAL_GPIO_Init+0x348>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d00d      	beq.n	8004016 <HAL_GPIO_Init+0x222>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a50      	ldr	r2, [pc, #320]	; (8004140 <HAL_GPIO_Init+0x34c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d007      	beq.n	8004012 <HAL_GPIO_Init+0x21e>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a4f      	ldr	r2, [pc, #316]	; (8004144 <HAL_GPIO_Init+0x350>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d101      	bne.n	800400e <HAL_GPIO_Init+0x21a>
 800400a:	2309      	movs	r3, #9
 800400c:	e012      	b.n	8004034 <HAL_GPIO_Init+0x240>
 800400e:	230a      	movs	r3, #10
 8004010:	e010      	b.n	8004034 <HAL_GPIO_Init+0x240>
 8004012:	2308      	movs	r3, #8
 8004014:	e00e      	b.n	8004034 <HAL_GPIO_Init+0x240>
 8004016:	2307      	movs	r3, #7
 8004018:	e00c      	b.n	8004034 <HAL_GPIO_Init+0x240>
 800401a:	2306      	movs	r3, #6
 800401c:	e00a      	b.n	8004034 <HAL_GPIO_Init+0x240>
 800401e:	2305      	movs	r3, #5
 8004020:	e008      	b.n	8004034 <HAL_GPIO_Init+0x240>
 8004022:	2304      	movs	r3, #4
 8004024:	e006      	b.n	8004034 <HAL_GPIO_Init+0x240>
 8004026:	2303      	movs	r3, #3
 8004028:	e004      	b.n	8004034 <HAL_GPIO_Init+0x240>
 800402a:	2302      	movs	r3, #2
 800402c:	e002      	b.n	8004034 <HAL_GPIO_Init+0x240>
 800402e:	2301      	movs	r3, #1
 8004030:	e000      	b.n	8004034 <HAL_GPIO_Init+0x240>
 8004032:	2300      	movs	r3, #0
 8004034:	69fa      	ldr	r2, [r7, #28]
 8004036:	f002 0203 	and.w	r2, r2, #3
 800403a:	0092      	lsls	r2, r2, #2
 800403c:	4093      	lsls	r3, r2
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	4313      	orrs	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004044:	4935      	ldr	r1, [pc, #212]	; (800411c <HAL_GPIO_Init+0x328>)
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	089b      	lsrs	r3, r3, #2
 800404a:	3302      	adds	r3, #2
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004052:	4b3d      	ldr	r3, [pc, #244]	; (8004148 <HAL_GPIO_Init+0x354>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	43db      	mvns	r3, r3
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4013      	ands	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004076:	4a34      	ldr	r2, [pc, #208]	; (8004148 <HAL_GPIO_Init+0x354>)
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800407c:	4b32      	ldr	r3, [pc, #200]	; (8004148 <HAL_GPIO_Init+0x354>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	43db      	mvns	r3, r3
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	4013      	ands	r3, r2
 800408a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040a0:	4a29      	ldr	r2, [pc, #164]	; (8004148 <HAL_GPIO_Init+0x354>)
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040a6:	4b28      	ldr	r3, [pc, #160]	; (8004148 <HAL_GPIO_Init+0x354>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	43db      	mvns	r3, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	4013      	ands	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040ca:	4a1f      	ldr	r2, [pc, #124]	; (8004148 <HAL_GPIO_Init+0x354>)
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040d0:	4b1d      	ldr	r3, [pc, #116]	; (8004148 <HAL_GPIO_Init+0x354>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	43db      	mvns	r3, r3
 80040da:	69ba      	ldr	r2, [r7, #24]
 80040dc:	4013      	ands	r3, r2
 80040de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80040ec:	69ba      	ldr	r2, [r7, #24]
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040f4:	4a14      	ldr	r2, [pc, #80]	; (8004148 <HAL_GPIO_Init+0x354>)
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	3301      	adds	r3, #1
 80040fe:	61fb      	str	r3, [r7, #28]
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	2b0f      	cmp	r3, #15
 8004104:	f67f ae86 	bls.w	8003e14 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004108:	bf00      	nop
 800410a:	bf00      	nop
 800410c:	3724      	adds	r7, #36	; 0x24
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	40023800 	.word	0x40023800
 800411c:	40013800 	.word	0x40013800
 8004120:	40020000 	.word	0x40020000
 8004124:	40020400 	.word	0x40020400
 8004128:	40020800 	.word	0x40020800
 800412c:	40020c00 	.word	0x40020c00
 8004130:	40021000 	.word	0x40021000
 8004134:	40021400 	.word	0x40021400
 8004138:	40021800 	.word	0x40021800
 800413c:	40021c00 	.word	0x40021c00
 8004140:	40022000 	.word	0x40022000
 8004144:	40022400 	.word	0x40022400
 8004148:	40013c00 	.word	0x40013c00

0800414c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691a      	ldr	r2, [r3, #16]
 800415c:	887b      	ldrh	r3, [r7, #2]
 800415e:	4013      	ands	r3, r2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004164:	2301      	movs	r3, #1
 8004166:	73fb      	strb	r3, [r7, #15]
 8004168:	e001      	b.n	800416e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800416a:	2300      	movs	r3, #0
 800416c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800416e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	807b      	strh	r3, [r7, #2]
 8004188:	4613      	mov	r3, r2
 800418a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800418c:	787b      	ldrb	r3, [r7, #1]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004192:	887a      	ldrh	r2, [r7, #2]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004198:	e003      	b.n	80041a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800419a:	887b      	ldrh	r3, [r7, #2]
 800419c:	041a      	lsls	r2, r3, #16
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	619a      	str	r2, [r3, #24]
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80041ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041b0:	b08f      	sub	sp, #60	; 0x3c
 80041b2:	af0a      	add	r7, sp, #40	; 0x28
 80041b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e116      	b.n	80043ee <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d106      	bne.n	80041e0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff f816 	bl	800320c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2203      	movs	r2, #3
 80041e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d102      	bne.n	80041fa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f003 ff00 	bl	8008004 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	603b      	str	r3, [r7, #0]
 800420a:	687e      	ldr	r6, [r7, #4]
 800420c:	466d      	mov	r5, sp
 800420e:	f106 0410 	add.w	r4, r6, #16
 8004212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004216:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004218:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800421a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800421e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004222:	1d33      	adds	r3, r6, #4
 8004224:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004226:	6838      	ldr	r0, [r7, #0]
 8004228:	f003 fe94 	bl	8007f54 <USB_CoreInit>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d005      	beq.n	800423e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2202      	movs	r2, #2
 8004236:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e0d7      	b.n	80043ee <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2100      	movs	r1, #0
 8004244:	4618      	mov	r0, r3
 8004246:	f003 feee 	bl	8008026 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800424a:	2300      	movs	r3, #0
 800424c:	73fb      	strb	r3, [r7, #15]
 800424e:	e04a      	b.n	80042e6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004250:	7bfa      	ldrb	r2, [r7, #15]
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	4613      	mov	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	333d      	adds	r3, #61	; 0x3d
 8004260:	2201      	movs	r2, #1
 8004262:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004264:	7bfa      	ldrb	r2, [r7, #15]
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	4613      	mov	r3, r2
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	4413      	add	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	440b      	add	r3, r1
 8004272:	333c      	adds	r3, #60	; 0x3c
 8004274:	7bfa      	ldrb	r2, [r7, #15]
 8004276:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004278:	7bfa      	ldrb	r2, [r7, #15]
 800427a:	7bfb      	ldrb	r3, [r7, #15]
 800427c:	b298      	uxth	r0, r3
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	4613      	mov	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	4413      	add	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	440b      	add	r3, r1
 800428a:	3344      	adds	r3, #68	; 0x44
 800428c:	4602      	mov	r2, r0
 800428e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004290:	7bfa      	ldrb	r2, [r7, #15]
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	4613      	mov	r3, r2
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	4413      	add	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	440b      	add	r3, r1
 800429e:	3340      	adds	r3, #64	; 0x40
 80042a0:	2200      	movs	r2, #0
 80042a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042a4:	7bfa      	ldrb	r2, [r7, #15]
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	4613      	mov	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	4413      	add	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	3348      	adds	r3, #72	; 0x48
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80042b8:	7bfa      	ldrb	r2, [r7, #15]
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	4613      	mov	r3, r2
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	4413      	add	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	440b      	add	r3, r1
 80042c6:	334c      	adds	r3, #76	; 0x4c
 80042c8:	2200      	movs	r2, #0
 80042ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042cc:	7bfa      	ldrb	r2, [r7, #15]
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	4613      	mov	r3, r2
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	4413      	add	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	440b      	add	r3, r1
 80042da:	3354      	adds	r3, #84	; 0x54
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	3301      	adds	r3, #1
 80042e4:	73fb      	strb	r3, [r7, #15]
 80042e6:	7bfa      	ldrb	r2, [r7, #15]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d3af      	bcc.n	8004250 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042f0:	2300      	movs	r3, #0
 80042f2:	73fb      	strb	r3, [r7, #15]
 80042f4:	e044      	b.n	8004380 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042f6:	7bfa      	ldrb	r2, [r7, #15]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004308:	2200      	movs	r2, #0
 800430a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800430c:	7bfa      	ldrb	r2, [r7, #15]
 800430e:	6879      	ldr	r1, [r7, #4]
 8004310:	4613      	mov	r3, r2
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	4413      	add	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800431e:	7bfa      	ldrb	r2, [r7, #15]
 8004320:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004322:	7bfa      	ldrb	r2, [r7, #15]
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	4413      	add	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004334:	2200      	movs	r2, #0
 8004336:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004338:	7bfa      	ldrb	r2, [r7, #15]
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	4613      	mov	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800434e:	7bfa      	ldrb	r2, [r7, #15]
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004364:	7bfa      	ldrb	r2, [r7, #15]
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	4613      	mov	r3, r2
 800436a:	00db      	lsls	r3, r3, #3
 800436c:	4413      	add	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800437a:	7bfb      	ldrb	r3, [r7, #15]
 800437c:	3301      	adds	r3, #1
 800437e:	73fb      	strb	r3, [r7, #15]
 8004380:	7bfa      	ldrb	r2, [r7, #15]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	429a      	cmp	r2, r3
 8004388:	d3b5      	bcc.n	80042f6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	603b      	str	r3, [r7, #0]
 8004390:	687e      	ldr	r6, [r7, #4]
 8004392:	466d      	mov	r5, sp
 8004394:	f106 0410 	add.w	r4, r6, #16
 8004398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800439a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800439c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800439e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80043a8:	1d33      	adds	r3, r6, #4
 80043aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043ac:	6838      	ldr	r0, [r7, #0]
 80043ae:	f003 fe87 	bl	80080c0 <USB_DevInit>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d005      	beq.n	80043c4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e014      	b.n	80043ee <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d102      	bne.n	80043e2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f80b 	bl	80043f8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f004 f845 	bl	8008476 <USB_DevDisconnect>

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080043f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004426:	4b05      	ldr	r3, [pc, #20]	; (800443c <HAL_PCDEx_ActivateLPM+0x44>)
 8004428:	4313      	orrs	r3, r2
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3714      	adds	r7, #20
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	10000003 	.word	0x10000003

08004440 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a04      	ldr	r2, [pc, #16]	; (800445c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800444a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800444e:	6013      	str	r3, [r2, #0]
}
 8004450:	bf00      	nop
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40007000 	.word	0x40007000

08004460 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004466:	2300      	movs	r3, #0
 8004468:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800446a:	4b23      	ldr	r3, [pc, #140]	; (80044f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	4a22      	ldr	r2, [pc, #136]	; (80044f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004474:	6413      	str	r3, [r2, #64]	; 0x40
 8004476:	4b20      	ldr	r3, [pc, #128]	; (80044f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447e:	603b      	str	r3, [r7, #0]
 8004480:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004482:	4b1e      	ldr	r3, [pc, #120]	; (80044fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a1d      	ldr	r2, [pc, #116]	; (80044fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800448c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800448e:	f7fe ff89 	bl	80033a4 <HAL_GetTick>
 8004492:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004494:	e009      	b.n	80044aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004496:	f7fe ff85 	bl	80033a4 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044a4:	d901      	bls.n	80044aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e022      	b.n	80044f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80044aa:	4b14      	ldr	r3, [pc, #80]	; (80044fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b6:	d1ee      	bne.n	8004496 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80044b8:	4b10      	ldr	r3, [pc, #64]	; (80044fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a0f      	ldr	r2, [pc, #60]	; (80044fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80044be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044c4:	f7fe ff6e 	bl	80033a4 <HAL_GetTick>
 80044c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80044ca:	e009      	b.n	80044e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80044cc:	f7fe ff6a 	bl	80033a4 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044da:	d901      	bls.n	80044e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e007      	b.n	80044f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80044e0:	4b06      	ldr	r3, [pc, #24]	; (80044fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044ec:	d1ee      	bne.n	80044cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	40023800 	.word	0x40023800
 80044fc:	40007000 	.word	0x40007000

08004500 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004508:	2300      	movs	r3, #0
 800450a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e29b      	b.n	8004a4e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 8087 	beq.w	8004632 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004524:	4b96      	ldr	r3, [pc, #600]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f003 030c 	and.w	r3, r3, #12
 800452c:	2b04      	cmp	r3, #4
 800452e:	d00c      	beq.n	800454a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004530:	4b93      	ldr	r3, [pc, #588]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 030c 	and.w	r3, r3, #12
 8004538:	2b08      	cmp	r3, #8
 800453a:	d112      	bne.n	8004562 <HAL_RCC_OscConfig+0x62>
 800453c:	4b90      	ldr	r3, [pc, #576]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004544:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004548:	d10b      	bne.n	8004562 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800454a:	4b8d      	ldr	r3, [pc, #564]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d06c      	beq.n	8004630 <HAL_RCC_OscConfig+0x130>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d168      	bne.n	8004630 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e275      	b.n	8004a4e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800456a:	d106      	bne.n	800457a <HAL_RCC_OscConfig+0x7a>
 800456c:	4b84      	ldr	r3, [pc, #528]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a83      	ldr	r2, [pc, #524]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 8004572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	e02e      	b.n	80045d8 <HAL_RCC_OscConfig+0xd8>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d10c      	bne.n	800459c <HAL_RCC_OscConfig+0x9c>
 8004582:	4b7f      	ldr	r3, [pc, #508]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a7e      	ldr	r2, [pc, #504]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 8004588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	4b7c      	ldr	r3, [pc, #496]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a7b      	ldr	r2, [pc, #492]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 8004594:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	e01d      	b.n	80045d8 <HAL_RCC_OscConfig+0xd8>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045a4:	d10c      	bne.n	80045c0 <HAL_RCC_OscConfig+0xc0>
 80045a6:	4b76      	ldr	r3, [pc, #472]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a75      	ldr	r2, [pc, #468]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 80045ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045b0:	6013      	str	r3, [r2, #0]
 80045b2:	4b73      	ldr	r3, [pc, #460]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a72      	ldr	r2, [pc, #456]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 80045b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	e00b      	b.n	80045d8 <HAL_RCC_OscConfig+0xd8>
 80045c0:	4b6f      	ldr	r3, [pc, #444]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a6e      	ldr	r2, [pc, #440]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 80045c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	4b6c      	ldr	r3, [pc, #432]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a6b      	ldr	r2, [pc, #428]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 80045d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d013      	beq.n	8004608 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e0:	f7fe fee0 	bl	80033a4 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e8:	f7fe fedc 	bl	80033a4 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b64      	cmp	r3, #100	; 0x64
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e229      	b.n	8004a4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fa:	4b61      	ldr	r3, [pc, #388]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f0      	beq.n	80045e8 <HAL_RCC_OscConfig+0xe8>
 8004606:	e014      	b.n	8004632 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004608:	f7fe fecc 	bl	80033a4 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004610:	f7fe fec8 	bl	80033a4 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b64      	cmp	r3, #100	; 0x64
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e215      	b.n	8004a4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004622:	4b57      	ldr	r3, [pc, #348]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0x110>
 800462e:	e000      	b.n	8004632 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d069      	beq.n	8004712 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800463e:	4b50      	ldr	r3, [pc, #320]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 030c 	and.w	r3, r3, #12
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00b      	beq.n	8004662 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800464a:	4b4d      	ldr	r3, [pc, #308]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 030c 	and.w	r3, r3, #12
 8004652:	2b08      	cmp	r3, #8
 8004654:	d11c      	bne.n	8004690 <HAL_RCC_OscConfig+0x190>
 8004656:	4b4a      	ldr	r3, [pc, #296]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d116      	bne.n	8004690 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004662:	4b47      	ldr	r3, [pc, #284]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d005      	beq.n	800467a <HAL_RCC_OscConfig+0x17a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d001      	beq.n	800467a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e1e9      	b.n	8004a4e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467a:	4b41      	ldr	r3, [pc, #260]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	493d      	ldr	r1, [pc, #244]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 800468a:	4313      	orrs	r3, r2
 800468c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800468e:	e040      	b.n	8004712 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d023      	beq.n	80046e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004698:	4b39      	ldr	r3, [pc, #228]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a38      	ldr	r2, [pc, #224]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 800469e:	f043 0301 	orr.w	r3, r3, #1
 80046a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fe fe7e 	bl	80033a4 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ac:	f7fe fe7a 	bl	80033a4 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e1c7      	b.n	8004a4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046be:	4b30      	ldr	r3, [pc, #192]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0f0      	beq.n	80046ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ca:	4b2d      	ldr	r3, [pc, #180]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	4929      	ldr	r1, [pc, #164]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 80046da:	4313      	orrs	r3, r2
 80046dc:	600b      	str	r3, [r1, #0]
 80046de:	e018      	b.n	8004712 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046e0:	4b27      	ldr	r3, [pc, #156]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a26      	ldr	r2, [pc, #152]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 80046e6:	f023 0301 	bic.w	r3, r3, #1
 80046ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ec:	f7fe fe5a 	bl	80033a4 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046f4:	f7fe fe56 	bl	80033a4 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e1a3      	b.n	8004a4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004706:	4b1e      	ldr	r3, [pc, #120]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f0      	bne.n	80046f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0308 	and.w	r3, r3, #8
 800471a:	2b00      	cmp	r3, #0
 800471c:	d038      	beq.n	8004790 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d019      	beq.n	800475a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004726:	4b16      	ldr	r3, [pc, #88]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 8004728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472a:	4a15      	ldr	r2, [pc, #84]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 800472c:	f043 0301 	orr.w	r3, r3, #1
 8004730:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004732:	f7fe fe37 	bl	80033a4 <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004738:	e008      	b.n	800474c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800473a:	f7fe fe33 	bl	80033a4 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e180      	b.n	8004a4e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800474c:	4b0c      	ldr	r3, [pc, #48]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 800474e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0f0      	beq.n	800473a <HAL_RCC_OscConfig+0x23a>
 8004758:	e01a      	b.n	8004790 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800475a:	4b09      	ldr	r3, [pc, #36]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 800475c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800475e:	4a08      	ldr	r2, [pc, #32]	; (8004780 <HAL_RCC_OscConfig+0x280>)
 8004760:	f023 0301 	bic.w	r3, r3, #1
 8004764:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004766:	f7fe fe1d 	bl	80033a4 <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800476c:	e00a      	b.n	8004784 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800476e:	f7fe fe19 	bl	80033a4 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d903      	bls.n	8004784 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e166      	b.n	8004a4e <HAL_RCC_OscConfig+0x54e>
 8004780:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004784:	4b92      	ldr	r3, [pc, #584]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 8004786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1ee      	bne.n	800476e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 80a4 	beq.w	80048e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800479e:	4b8c      	ldr	r3, [pc, #560]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10d      	bne.n	80047c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80047aa:	4b89      	ldr	r3, [pc, #548]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	4a88      	ldr	r2, [pc, #544]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 80047b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b4:	6413      	str	r3, [r2, #64]	; 0x40
 80047b6:	4b86      	ldr	r3, [pc, #536]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047be:	60bb      	str	r3, [r7, #8]
 80047c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047c2:	2301      	movs	r3, #1
 80047c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047c6:	4b83      	ldr	r3, [pc, #524]	; (80049d4 <HAL_RCC_OscConfig+0x4d4>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d118      	bne.n	8004804 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80047d2:	4b80      	ldr	r3, [pc, #512]	; (80049d4 <HAL_RCC_OscConfig+0x4d4>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a7f      	ldr	r2, [pc, #508]	; (80049d4 <HAL_RCC_OscConfig+0x4d4>)
 80047d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047de:	f7fe fde1 	bl	80033a4 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e6:	f7fe fddd 	bl	80033a4 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b64      	cmp	r3, #100	; 0x64
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e12a      	b.n	8004a4e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047f8:	4b76      	ldr	r3, [pc, #472]	; (80049d4 <HAL_RCC_OscConfig+0x4d4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0f0      	beq.n	80047e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d106      	bne.n	800481a <HAL_RCC_OscConfig+0x31a>
 800480c:	4b70      	ldr	r3, [pc, #448]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 800480e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004810:	4a6f      	ldr	r2, [pc, #444]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 8004812:	f043 0301 	orr.w	r3, r3, #1
 8004816:	6713      	str	r3, [r2, #112]	; 0x70
 8004818:	e02d      	b.n	8004876 <HAL_RCC_OscConfig+0x376>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10c      	bne.n	800483c <HAL_RCC_OscConfig+0x33c>
 8004822:	4b6b      	ldr	r3, [pc, #428]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 8004824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004826:	4a6a      	ldr	r2, [pc, #424]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 8004828:	f023 0301 	bic.w	r3, r3, #1
 800482c:	6713      	str	r3, [r2, #112]	; 0x70
 800482e:	4b68      	ldr	r3, [pc, #416]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 8004830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004832:	4a67      	ldr	r2, [pc, #412]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 8004834:	f023 0304 	bic.w	r3, r3, #4
 8004838:	6713      	str	r3, [r2, #112]	; 0x70
 800483a:	e01c      	b.n	8004876 <HAL_RCC_OscConfig+0x376>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	2b05      	cmp	r3, #5
 8004842:	d10c      	bne.n	800485e <HAL_RCC_OscConfig+0x35e>
 8004844:	4b62      	ldr	r3, [pc, #392]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 8004846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004848:	4a61      	ldr	r2, [pc, #388]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 800484a:	f043 0304 	orr.w	r3, r3, #4
 800484e:	6713      	str	r3, [r2, #112]	; 0x70
 8004850:	4b5f      	ldr	r3, [pc, #380]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 8004852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004854:	4a5e      	ldr	r2, [pc, #376]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 8004856:	f043 0301 	orr.w	r3, r3, #1
 800485a:	6713      	str	r3, [r2, #112]	; 0x70
 800485c:	e00b      	b.n	8004876 <HAL_RCC_OscConfig+0x376>
 800485e:	4b5c      	ldr	r3, [pc, #368]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004862:	4a5b      	ldr	r2, [pc, #364]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 8004864:	f023 0301 	bic.w	r3, r3, #1
 8004868:	6713      	str	r3, [r2, #112]	; 0x70
 800486a:	4b59      	ldr	r3, [pc, #356]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 800486c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486e:	4a58      	ldr	r2, [pc, #352]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 8004870:	f023 0304 	bic.w	r3, r3, #4
 8004874:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d015      	beq.n	80048aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487e:	f7fe fd91 	bl	80033a4 <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004884:	e00a      	b.n	800489c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004886:	f7fe fd8d 	bl	80033a4 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	f241 3288 	movw	r2, #5000	; 0x1388
 8004894:	4293      	cmp	r3, r2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e0d8      	b.n	8004a4e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800489c:	4b4c      	ldr	r3, [pc, #304]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 800489e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d0ee      	beq.n	8004886 <HAL_RCC_OscConfig+0x386>
 80048a8:	e014      	b.n	80048d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048aa:	f7fe fd7b 	bl	80033a4 <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048b0:	e00a      	b.n	80048c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b2:	f7fe fd77 	bl	80033a4 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d901      	bls.n	80048c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e0c2      	b.n	8004a4e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048c8:	4b41      	ldr	r3, [pc, #260]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 80048ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1ee      	bne.n	80048b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048d4:	7dfb      	ldrb	r3, [r7, #23]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d105      	bne.n	80048e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048da:	4b3d      	ldr	r3, [pc, #244]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	4a3c      	ldr	r2, [pc, #240]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 80048e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 80ae 	beq.w	8004a4c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048f0:	4b37      	ldr	r3, [pc, #220]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f003 030c 	and.w	r3, r3, #12
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d06d      	beq.n	80049d8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	2b02      	cmp	r3, #2
 8004902:	d14b      	bne.n	800499c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004904:	4b32      	ldr	r3, [pc, #200]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a31      	ldr	r2, [pc, #196]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 800490a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800490e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004910:	f7fe fd48 	bl	80033a4 <HAL_GetTick>
 8004914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004918:	f7fe fd44 	bl	80033a4 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e091      	b.n	8004a4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800492a:	4b29      	ldr	r3, [pc, #164]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	69da      	ldr	r2, [r3, #28]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	019b      	lsls	r3, r3, #6
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800494c:	085b      	lsrs	r3, r3, #1
 800494e:	3b01      	subs	r3, #1
 8004950:	041b      	lsls	r3, r3, #16
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004958:	061b      	lsls	r3, r3, #24
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004960:	071b      	lsls	r3, r3, #28
 8004962:	491b      	ldr	r1, [pc, #108]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 8004964:	4313      	orrs	r3, r2
 8004966:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004968:	4b19      	ldr	r3, [pc, #100]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a18      	ldr	r2, [pc, #96]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 800496e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004974:	f7fe fd16 	bl	80033a4 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800497c:	f7fe fd12 	bl	80033a4 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b02      	cmp	r3, #2
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e05f      	b.n	8004a4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800498e:	4b10      	ldr	r3, [pc, #64]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0f0      	beq.n	800497c <HAL_RCC_OscConfig+0x47c>
 800499a:	e057      	b.n	8004a4c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800499c:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a0b      	ldr	r2, [pc, #44]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 80049a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a8:	f7fe fcfc 	bl	80033a4 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b0:	f7fe fcf8 	bl	80033a4 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e045      	b.n	8004a4e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c2:	4b03      	ldr	r3, [pc, #12]	; (80049d0 <HAL_RCC_OscConfig+0x4d0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f0      	bne.n	80049b0 <HAL_RCC_OscConfig+0x4b0>
 80049ce:	e03d      	b.n	8004a4c <HAL_RCC_OscConfig+0x54c>
 80049d0:	40023800 	.word	0x40023800
 80049d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80049d8:	4b1f      	ldr	r3, [pc, #124]	; (8004a58 <HAL_RCC_OscConfig+0x558>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d030      	beq.n	8004a48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d129      	bne.n	8004a48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d122      	bne.n	8004a48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a08:	4013      	ands	r3, r2
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a0e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d119      	bne.n	8004a48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1e:	085b      	lsrs	r3, r3, #1
 8004a20:	3b01      	subs	r3, #1
 8004a22:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d10f      	bne.n	8004a48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a32:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d107      	bne.n	8004a48 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a42:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d001      	beq.n	8004a4c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e000      	b.n	8004a4e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	40023800 	.word	0x40023800

08004a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004a66:	2300      	movs	r3, #0
 8004a68:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e0d0      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a74:	4b6a      	ldr	r3, [pc, #424]	; (8004c20 <HAL_RCC_ClockConfig+0x1c4>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 030f 	and.w	r3, r3, #15
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d910      	bls.n	8004aa4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a82:	4b67      	ldr	r3, [pc, #412]	; (8004c20 <HAL_RCC_ClockConfig+0x1c4>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f023 020f 	bic.w	r2, r3, #15
 8004a8a:	4965      	ldr	r1, [pc, #404]	; (8004c20 <HAL_RCC_ClockConfig+0x1c4>)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a92:	4b63      	ldr	r3, [pc, #396]	; (8004c20 <HAL_RCC_ClockConfig+0x1c4>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	683a      	ldr	r2, [r7, #0]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d001      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e0b8      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d020      	beq.n	8004af2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d005      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004abc:	4b59      	ldr	r3, [pc, #356]	; (8004c24 <HAL_RCC_ClockConfig+0x1c8>)
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	4a58      	ldr	r2, [pc, #352]	; (8004c24 <HAL_RCC_ClockConfig+0x1c8>)
 8004ac2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ac6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d005      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ad4:	4b53      	ldr	r3, [pc, #332]	; (8004c24 <HAL_RCC_ClockConfig+0x1c8>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	4a52      	ldr	r2, [pc, #328]	; (8004c24 <HAL_RCC_ClockConfig+0x1c8>)
 8004ada:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ade:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ae0:	4b50      	ldr	r3, [pc, #320]	; (8004c24 <HAL_RCC_ClockConfig+0x1c8>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	494d      	ldr	r1, [pc, #308]	; (8004c24 <HAL_RCC_ClockConfig+0x1c8>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d040      	beq.n	8004b80 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d107      	bne.n	8004b16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b06:	4b47      	ldr	r3, [pc, #284]	; (8004c24 <HAL_RCC_ClockConfig+0x1c8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d115      	bne.n	8004b3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e07f      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d107      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b1e:	4b41      	ldr	r3, [pc, #260]	; (8004c24 <HAL_RCC_ClockConfig+0x1c8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d109      	bne.n	8004b3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e073      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b2e:	4b3d      	ldr	r3, [pc, #244]	; (8004c24 <HAL_RCC_ClockConfig+0x1c8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e06b      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b3e:	4b39      	ldr	r3, [pc, #228]	; (8004c24 <HAL_RCC_ClockConfig+0x1c8>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f023 0203 	bic.w	r2, r3, #3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	4936      	ldr	r1, [pc, #216]	; (8004c24 <HAL_RCC_ClockConfig+0x1c8>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b50:	f7fe fc28 	bl	80033a4 <HAL_GetTick>
 8004b54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b56:	e00a      	b.n	8004b6e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b58:	f7fe fc24 	bl	80033a4 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e053      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6e:	4b2d      	ldr	r3, [pc, #180]	; (8004c24 <HAL_RCC_ClockConfig+0x1c8>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 020c 	and.w	r2, r3, #12
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d1eb      	bne.n	8004b58 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b80:	4b27      	ldr	r3, [pc, #156]	; (8004c20 <HAL_RCC_ClockConfig+0x1c4>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 030f 	and.w	r3, r3, #15
 8004b88:	683a      	ldr	r2, [r7, #0]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d210      	bcs.n	8004bb0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b8e:	4b24      	ldr	r3, [pc, #144]	; (8004c20 <HAL_RCC_ClockConfig+0x1c4>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f023 020f 	bic.w	r2, r3, #15
 8004b96:	4922      	ldr	r1, [pc, #136]	; (8004c20 <HAL_RCC_ClockConfig+0x1c4>)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b9e:	4b20      	ldr	r3, [pc, #128]	; (8004c20 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d001      	beq.n	8004bb0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e032      	b.n	8004c16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d008      	beq.n	8004bce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bbc:	4b19      	ldr	r3, [pc, #100]	; (8004c24 <HAL_RCC_ClockConfig+0x1c8>)
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	4916      	ldr	r1, [pc, #88]	; (8004c24 <HAL_RCC_ClockConfig+0x1c8>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0308 	and.w	r3, r3, #8
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d009      	beq.n	8004bee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004bda:	4b12      	ldr	r3, [pc, #72]	; (8004c24 <HAL_RCC_ClockConfig+0x1c8>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	490e      	ldr	r1, [pc, #56]	; (8004c24 <HAL_RCC_ClockConfig+0x1c8>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bee:	f000 f821 	bl	8004c34 <HAL_RCC_GetSysClockFreq>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	4b0b      	ldr	r3, [pc, #44]	; (8004c24 <HAL_RCC_ClockConfig+0x1c8>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	091b      	lsrs	r3, r3, #4
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	490a      	ldr	r1, [pc, #40]	; (8004c28 <HAL_RCC_ClockConfig+0x1cc>)
 8004c00:	5ccb      	ldrb	r3, [r1, r3]
 8004c02:	fa22 f303 	lsr.w	r3, r2, r3
 8004c06:	4a09      	ldr	r2, [pc, #36]	; (8004c2c <HAL_RCC_ClockConfig+0x1d0>)
 8004c08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c0a:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <HAL_RCC_ClockConfig+0x1d4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fd fbba 	bl	8002388 <HAL_InitTick>

  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	40023c00 	.word	0x40023c00
 8004c24:	40023800 	.word	0x40023800
 8004c28:	0801b6d4 	.word	0x0801b6d4
 8004c2c:	20000004 	.word	0x20000004
 8004c30:	20000008 	.word	0x20000008

08004c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c38:	b094      	sub	sp, #80	; 0x50
 8004c3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004c40:	2300      	movs	r3, #0
 8004c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c44:	2300      	movs	r3, #0
 8004c46:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c4c:	4b79      	ldr	r3, [pc, #484]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 030c 	and.w	r3, r3, #12
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	d00d      	beq.n	8004c74 <HAL_RCC_GetSysClockFreq+0x40>
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	f200 80e1 	bhi.w	8004e20 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <HAL_RCC_GetSysClockFreq+0x34>
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d003      	beq.n	8004c6e <HAL_RCC_GetSysClockFreq+0x3a>
 8004c66:	e0db      	b.n	8004e20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c68:	4b73      	ldr	r3, [pc, #460]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c6c:	e0db      	b.n	8004e26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c6e:	4b73      	ldr	r3, [pc, #460]	; (8004e3c <HAL_RCC_GetSysClockFreq+0x208>)
 8004c70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c72:	e0d8      	b.n	8004e26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c74:	4b6f      	ldr	r3, [pc, #444]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c7c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004c7e:	4b6d      	ldr	r3, [pc, #436]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d063      	beq.n	8004d52 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c8a:	4b6a      	ldr	r3, [pc, #424]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	099b      	lsrs	r3, r3, #6
 8004c90:	2200      	movs	r2, #0
 8004c92:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c9c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ca2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ca6:	4622      	mov	r2, r4
 8004ca8:	462b      	mov	r3, r5
 8004caa:	f04f 0000 	mov.w	r0, #0
 8004cae:	f04f 0100 	mov.w	r1, #0
 8004cb2:	0159      	lsls	r1, r3, #5
 8004cb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cb8:	0150      	lsls	r0, r2, #5
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	1a51      	subs	r1, r2, r1
 8004cc2:	6139      	str	r1, [r7, #16]
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	eb63 0301 	sbc.w	r3, r3, r1
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cd8:	4659      	mov	r1, fp
 8004cda:	018b      	lsls	r3, r1, #6
 8004cdc:	4651      	mov	r1, sl
 8004cde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ce2:	4651      	mov	r1, sl
 8004ce4:	018a      	lsls	r2, r1, #6
 8004ce6:	4651      	mov	r1, sl
 8004ce8:	ebb2 0801 	subs.w	r8, r2, r1
 8004cec:	4659      	mov	r1, fp
 8004cee:	eb63 0901 	sbc.w	r9, r3, r1
 8004cf2:	f04f 0200 	mov.w	r2, #0
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d06:	4690      	mov	r8, r2
 8004d08:	4699      	mov	r9, r3
 8004d0a:	4623      	mov	r3, r4
 8004d0c:	eb18 0303 	adds.w	r3, r8, r3
 8004d10:	60bb      	str	r3, [r7, #8]
 8004d12:	462b      	mov	r3, r5
 8004d14:	eb49 0303 	adc.w	r3, r9, r3
 8004d18:	60fb      	str	r3, [r7, #12]
 8004d1a:	f04f 0200 	mov.w	r2, #0
 8004d1e:	f04f 0300 	mov.w	r3, #0
 8004d22:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d26:	4629      	mov	r1, r5
 8004d28:	024b      	lsls	r3, r1, #9
 8004d2a:	4621      	mov	r1, r4
 8004d2c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d30:	4621      	mov	r1, r4
 8004d32:	024a      	lsls	r2, r1, #9
 8004d34:	4610      	mov	r0, r2
 8004d36:	4619      	mov	r1, r3
 8004d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d44:	f7fb fb34 	bl	80003b0 <__aeabi_uldivmod>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d50:	e058      	b.n	8004e04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d52:	4b38      	ldr	r3, [pc, #224]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	099b      	lsrs	r3, r3, #6
 8004d58:	2200      	movs	r2, #0
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	4611      	mov	r1, r2
 8004d5e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d62:	623b      	str	r3, [r7, #32]
 8004d64:	2300      	movs	r3, #0
 8004d66:	627b      	str	r3, [r7, #36]	; 0x24
 8004d68:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d6c:	4642      	mov	r2, r8
 8004d6e:	464b      	mov	r3, r9
 8004d70:	f04f 0000 	mov.w	r0, #0
 8004d74:	f04f 0100 	mov.w	r1, #0
 8004d78:	0159      	lsls	r1, r3, #5
 8004d7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d7e:	0150      	lsls	r0, r2, #5
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4641      	mov	r1, r8
 8004d86:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d9c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004da0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004da4:	ebb2 040a 	subs.w	r4, r2, sl
 8004da8:	eb63 050b 	sbc.w	r5, r3, fp
 8004dac:	f04f 0200 	mov.w	r2, #0
 8004db0:	f04f 0300 	mov.w	r3, #0
 8004db4:	00eb      	lsls	r3, r5, #3
 8004db6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dba:	00e2      	lsls	r2, r4, #3
 8004dbc:	4614      	mov	r4, r2
 8004dbe:	461d      	mov	r5, r3
 8004dc0:	4643      	mov	r3, r8
 8004dc2:	18e3      	adds	r3, r4, r3
 8004dc4:	603b      	str	r3, [r7, #0]
 8004dc6:	464b      	mov	r3, r9
 8004dc8:	eb45 0303 	adc.w	r3, r5, r3
 8004dcc:	607b      	str	r3, [r7, #4]
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	f04f 0300 	mov.w	r3, #0
 8004dd6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004dda:	4629      	mov	r1, r5
 8004ddc:	028b      	lsls	r3, r1, #10
 8004dde:	4621      	mov	r1, r4
 8004de0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004de4:	4621      	mov	r1, r4
 8004de6:	028a      	lsls	r2, r1, #10
 8004de8:	4610      	mov	r0, r2
 8004dea:	4619      	mov	r1, r3
 8004dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dee:	2200      	movs	r2, #0
 8004df0:	61bb      	str	r3, [r7, #24]
 8004df2:	61fa      	str	r2, [r7, #28]
 8004df4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004df8:	f7fb fada 	bl	80003b0 <__aeabi_uldivmod>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4613      	mov	r3, r2
 8004e02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004e04:	4b0b      	ldr	r3, [pc, #44]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	0c1b      	lsrs	r3, r3, #16
 8004e0a:	f003 0303 	and.w	r3, r3, #3
 8004e0e:	3301      	adds	r3, #1
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004e14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e1e:	e002      	b.n	8004e26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e20:	4b05      	ldr	r3, [pc, #20]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3750      	adds	r7, #80	; 0x50
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e32:	bf00      	nop
 8004e34:	40023800 	.word	0x40023800
 8004e38:	00f42400 	.word	0x00f42400
 8004e3c:	007a1200 	.word	0x007a1200

08004e40 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e44:	4b03      	ldr	r3, [pc, #12]	; (8004e54 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e46:	681b      	ldr	r3, [r3, #0]
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	20000004 	.word	0x20000004

08004e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e5c:	f7ff fff0 	bl	8004e40 <HAL_RCC_GetHCLKFreq>
 8004e60:	4602      	mov	r2, r0
 8004e62:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	0a9b      	lsrs	r3, r3, #10
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	4903      	ldr	r1, [pc, #12]	; (8004e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e6e:	5ccb      	ldrb	r3, [r1, r3]
 8004e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40023800 	.word	0x40023800
 8004e7c:	0801b6e4 	.word	0x0801b6e4

08004e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e84:	f7ff ffdc 	bl	8004e40 <HAL_RCC_GetHCLKFreq>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	0b5b      	lsrs	r3, r3, #13
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	4903      	ldr	r1, [pc, #12]	; (8004ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e96:	5ccb      	ldrb	r3, [r1, r3]
 8004e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	0801b6e4 	.word	0x0801b6e4

08004ea8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	220f      	movs	r2, #15
 8004eb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004eb8:	4b12      	ldr	r3, [pc, #72]	; (8004f04 <HAL_RCC_GetClockConfig+0x5c>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f003 0203 	and.w	r2, r3, #3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ec4:	4b0f      	ldr	r3, [pc, #60]	; (8004f04 <HAL_RCC_GetClockConfig+0x5c>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ed0:	4b0c      	ldr	r3, [pc, #48]	; (8004f04 <HAL_RCC_GetClockConfig+0x5c>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004edc:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <HAL_RCC_GetClockConfig+0x5c>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	08db      	lsrs	r3, r3, #3
 8004ee2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004eea:	4b07      	ldr	r3, [pc, #28]	; (8004f08 <HAL_RCC_GetClockConfig+0x60>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 020f 	and.w	r2, r3, #15
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	601a      	str	r2, [r3, #0]
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	40023800 	.word	0x40023800
 8004f08:	40023c00 	.word	0x40023c00

08004f0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b088      	sub	sp, #32
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004f14:	2300      	movs	r3, #0
 8004f16:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004f20:	2300      	movs	r3, #0
 8004f22:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004f24:	2300      	movs	r3, #0
 8004f26:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d012      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f34:	4b69      	ldr	r3, [pc, #420]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	4a68      	ldr	r2, [pc, #416]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f3a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004f3e:	6093      	str	r3, [r2, #8]
 8004f40:	4b66      	ldr	r3, [pc, #408]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f48:	4964      	ldr	r1, [pc, #400]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004f56:	2301      	movs	r3, #1
 8004f58:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d017      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f66:	4b5d      	ldr	r3, [pc, #372]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f74:	4959      	ldr	r1, [pc, #356]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f84:	d101      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004f86:	2301      	movs	r3, #1
 8004f88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004f92:	2301      	movs	r3, #1
 8004f94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d017      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004fa2:	4b4e      	ldr	r3, [pc, #312]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fa8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb0:	494a      	ldr	r1, [pc, #296]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fc0:	d101      	bne.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d101      	bne.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d001      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0320 	and.w	r3, r3, #32
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 808b 	beq.w	8005106 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ff0:	4b3a      	ldr	r3, [pc, #232]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff4:	4a39      	ldr	r2, [pc, #228]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8004ffc:	4b37      	ldr	r3, [pc, #220]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005004:	60bb      	str	r3, [r7, #8]
 8005006:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005008:	4b35      	ldr	r3, [pc, #212]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a34      	ldr	r2, [pc, #208]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800500e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005012:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005014:	f7fe f9c6 	bl	80033a4 <HAL_GetTick>
 8005018:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800501a:	e008      	b.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800501c:	f7fe f9c2 	bl	80033a4 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b64      	cmp	r3, #100	; 0x64
 8005028:	d901      	bls.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e38f      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800502e:	4b2c      	ldr	r3, [pc, #176]	; (80050e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005036:	2b00      	cmp	r3, #0
 8005038:	d0f0      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800503a:	4b28      	ldr	r3, [pc, #160]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800503c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800503e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005042:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d035      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	429a      	cmp	r2, r3
 8005056:	d02e      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005058:	4b20      	ldr	r3, [pc, #128]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800505a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005060:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005062:	4b1e      	ldr	r3, [pc, #120]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005066:	4a1d      	ldr	r2, [pc, #116]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800506c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800506e:	4b1b      	ldr	r3, [pc, #108]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005072:	4a1a      	ldr	r2, [pc, #104]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005078:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800507a:	4a18      	ldr	r2, [pc, #96]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005080:	4b16      	ldr	r3, [pc, #88]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b01      	cmp	r3, #1
 800508a:	d114      	bne.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508c:	f7fe f98a 	bl	80033a4 <HAL_GetTick>
 8005090:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005092:	e00a      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005094:	f7fe f986 	bl	80033a4 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d901      	bls.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e351      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050aa:	4b0c      	ldr	r3, [pc, #48]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0ee      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050c2:	d111      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80050c4:	4b05      	ldr	r3, [pc, #20]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80050d0:	4b04      	ldr	r3, [pc, #16]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050d2:	400b      	ands	r3, r1
 80050d4:	4901      	ldr	r1, [pc, #4]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	608b      	str	r3, [r1, #8]
 80050da:	e00b      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80050dc:	40023800 	.word	0x40023800
 80050e0:	40007000 	.word	0x40007000
 80050e4:	0ffffcff 	.word	0x0ffffcff
 80050e8:	4bac      	ldr	r3, [pc, #688]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	4aab      	ldr	r2, [pc, #684]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80050f2:	6093      	str	r3, [r2, #8]
 80050f4:	4ba9      	ldr	r3, [pc, #676]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005100:	49a6      	ldr	r1, [pc, #664]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005102:	4313      	orrs	r3, r2
 8005104:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0310 	and.w	r3, r3, #16
 800510e:	2b00      	cmp	r3, #0
 8005110:	d010      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005112:	4ba2      	ldr	r3, [pc, #648]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005118:	4aa0      	ldr	r2, [pc, #640]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800511a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800511e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005122:	4b9e      	ldr	r3, [pc, #632]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005124:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512c:	499b      	ldr	r1, [pc, #620]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00a      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005140:	4b96      	ldr	r3, [pc, #600]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005146:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800514e:	4993      	ldr	r1, [pc, #588]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005150:	4313      	orrs	r3, r2
 8005152:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00a      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005162:	4b8e      	ldr	r3, [pc, #568]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005168:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005170:	498a      	ldr	r1, [pc, #552]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00a      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005184:	4b85      	ldr	r3, [pc, #532]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005192:	4982      	ldr	r1, [pc, #520]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005194:	4313      	orrs	r3, r2
 8005196:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051a6:	4b7d      	ldr	r3, [pc, #500]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b4:	4979      	ldr	r1, [pc, #484]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00a      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80051c8:	4b74      	ldr	r3, [pc, #464]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ce:	f023 0203 	bic.w	r2, r3, #3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d6:	4971      	ldr	r1, [pc, #452]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051d8:	4313      	orrs	r3, r2
 80051da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80051ea:	4b6c      	ldr	r3, [pc, #432]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f0:	f023 020c 	bic.w	r2, r3, #12
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051f8:	4968      	ldr	r1, [pc, #416]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800520c:	4b63      	ldr	r3, [pc, #396]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800520e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005212:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800521a:	4960      	ldr	r1, [pc, #384]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800522e:	4b5b      	ldr	r3, [pc, #364]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005234:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800523c:	4957      	ldr	r1, [pc, #348]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800523e:	4313      	orrs	r3, r2
 8005240:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00a      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005250:	4b52      	ldr	r3, [pc, #328]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005256:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525e:	494f      	ldr	r1, [pc, #316]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005272:	4b4a      	ldr	r3, [pc, #296]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005278:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005280:	4946      	ldr	r1, [pc, #280]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005282:	4313      	orrs	r3, r2
 8005284:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00a      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005294:	4b41      	ldr	r3, [pc, #260]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a2:	493e      	ldr	r1, [pc, #248]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80052b6:	4b39      	ldr	r3, [pc, #228]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052c4:	4935      	ldr	r1, [pc, #212]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d00a      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80052d8:	4b30      	ldr	r3, [pc, #192]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052de:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052e6:	492d      	ldr	r1, [pc, #180]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d011      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80052fa:	4b28      	ldr	r3, [pc, #160]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80052fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005300:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005308:	4924      	ldr	r1, [pc, #144]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800530a:	4313      	orrs	r3, r2
 800530c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005314:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005318:	d101      	bne.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800531a:	2301      	movs	r3, #1
 800531c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800532a:	2301      	movs	r3, #1
 800532c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800533a:	4b18      	ldr	r3, [pc, #96]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800533c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005340:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005348:	4914      	ldr	r1, [pc, #80]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800534a:	4313      	orrs	r3, r2
 800534c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00b      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800535c:	4b0f      	ldr	r3, [pc, #60]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800535e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005362:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800536c:	490b      	ldr	r1, [pc, #44]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800536e:	4313      	orrs	r3, r2
 8005370:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00f      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005380:	4b06      	ldr	r3, [pc, #24]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005386:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005390:	4902      	ldr	r1, [pc, #8]	; (800539c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005392:	4313      	orrs	r3, r2
 8005394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005398:	e002      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800539a:	bf00      	nop
 800539c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00b      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053ac:	4b8a      	ldr	r3, [pc, #552]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053bc:	4986      	ldr	r1, [pc, #536]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00b      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80053d0:	4b81      	ldr	r3, [pc, #516]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053e0:	497d      	ldr	r1, [pc, #500]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d006      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 80d6 	beq.w	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80053fc:	4b76      	ldr	r3, [pc, #472]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a75      	ldr	r2, [pc, #468]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005402:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005406:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005408:	f7fd ffcc 	bl	80033a4 <HAL_GetTick>
 800540c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800540e:	e008      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005410:	f7fd ffc8 	bl	80033a4 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b64      	cmp	r3, #100	; 0x64
 800541c:	d901      	bls.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e195      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005422:	4b6d      	ldr	r3, [pc, #436]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1f0      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d021      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543e:	2b00      	cmp	r3, #0
 8005440:	d11d      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005442:	4b65      	ldr	r3, [pc, #404]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005448:	0c1b      	lsrs	r3, r3, #16
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005450:	4b61      	ldr	r3, [pc, #388]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005456:	0e1b      	lsrs	r3, r3, #24
 8005458:	f003 030f 	and.w	r3, r3, #15
 800545c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	019a      	lsls	r2, r3, #6
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	041b      	lsls	r3, r3, #16
 8005468:	431a      	orrs	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	061b      	lsls	r3, r3, #24
 800546e:	431a      	orrs	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	071b      	lsls	r3, r3, #28
 8005476:	4958      	ldr	r1, [pc, #352]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005478:	4313      	orrs	r3, r2
 800547a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d004      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005492:	d00a      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800549c:	2b00      	cmp	r3, #0
 800549e:	d02e      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054a8:	d129      	bne.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80054aa:	4b4b      	ldr	r3, [pc, #300]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054b0:	0c1b      	lsrs	r3, r3, #16
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80054b8:	4b47      	ldr	r3, [pc, #284]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054be:	0f1b      	lsrs	r3, r3, #28
 80054c0:	f003 0307 	and.w	r3, r3, #7
 80054c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	019a      	lsls	r2, r3, #6
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	041b      	lsls	r3, r3, #16
 80054d0:	431a      	orrs	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	061b      	lsls	r3, r3, #24
 80054d8:	431a      	orrs	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	071b      	lsls	r3, r3, #28
 80054de:	493e      	ldr	r1, [pc, #248]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80054e6:	4b3c      	ldr	r3, [pc, #240]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054ec:	f023 021f 	bic.w	r2, r3, #31
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	3b01      	subs	r3, #1
 80054f6:	4938      	ldr	r1, [pc, #224]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005506:	2b00      	cmp	r3, #0
 8005508:	d01d      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800550a:	4b33      	ldr	r3, [pc, #204]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800550c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005510:	0e1b      	lsrs	r3, r3, #24
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005518:	4b2f      	ldr	r3, [pc, #188]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800551a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800551e:	0f1b      	lsrs	r3, r3, #28
 8005520:	f003 0307 	and.w	r3, r3, #7
 8005524:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	019a      	lsls	r2, r3, #6
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	041b      	lsls	r3, r3, #16
 8005532:	431a      	orrs	r2, r3
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	061b      	lsls	r3, r3, #24
 8005538:	431a      	orrs	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	071b      	lsls	r3, r3, #28
 800553e:	4926      	ldr	r1, [pc, #152]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005540:	4313      	orrs	r3, r2
 8005542:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d011      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	019a      	lsls	r2, r3, #6
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	041b      	lsls	r3, r3, #16
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	061b      	lsls	r3, r3, #24
 8005566:	431a      	orrs	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	071b      	lsls	r3, r3, #28
 800556e:	491a      	ldr	r1, [pc, #104]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005570:	4313      	orrs	r3, r2
 8005572:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005576:	4b18      	ldr	r3, [pc, #96]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a17      	ldr	r2, [pc, #92]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800557c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005582:	f7fd ff0f 	bl	80033a4 <HAL_GetTick>
 8005586:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005588:	e008      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800558a:	f7fd ff0b 	bl	80033a4 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b64      	cmp	r3, #100	; 0x64
 8005596:	d901      	bls.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e0d8      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800559c:	4b0e      	ldr	r3, [pc, #56]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d0f0      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	f040 80ce 	bne.w	800574c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80055b0:	4b09      	ldr	r3, [pc, #36]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a08      	ldr	r2, [pc, #32]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80055b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055bc:	f7fd fef2 	bl	80033a4 <HAL_GetTick>
 80055c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80055c2:	e00b      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055c4:	f7fd feee 	bl	80033a4 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b64      	cmp	r3, #100	; 0x64
 80055d0:	d904      	bls.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e0bb      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80055d6:	bf00      	nop
 80055d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80055dc:	4b5e      	ldr	r3, [pc, #376]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055e8:	d0ec      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d009      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005606:	2b00      	cmp	r3, #0
 8005608:	d02e      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	2b00      	cmp	r3, #0
 8005610:	d12a      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005612:	4b51      	ldr	r3, [pc, #324]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005614:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005618:	0c1b      	lsrs	r3, r3, #16
 800561a:	f003 0303 	and.w	r3, r3, #3
 800561e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005620:	4b4d      	ldr	r3, [pc, #308]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005626:	0f1b      	lsrs	r3, r3, #28
 8005628:	f003 0307 	and.w	r3, r3, #7
 800562c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	019a      	lsls	r2, r3, #6
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	041b      	lsls	r3, r3, #16
 8005638:	431a      	orrs	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	061b      	lsls	r3, r3, #24
 8005640:	431a      	orrs	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	071b      	lsls	r3, r3, #28
 8005646:	4944      	ldr	r1, [pc, #272]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005648:	4313      	orrs	r3, r2
 800564a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800564e:	4b42      	ldr	r3, [pc, #264]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005654:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565c:	3b01      	subs	r3, #1
 800565e:	021b      	lsls	r3, r3, #8
 8005660:	493d      	ldr	r1, [pc, #244]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005662:	4313      	orrs	r3, r2
 8005664:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d022      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005678:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800567c:	d11d      	bne.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800567e:	4b36      	ldr	r3, [pc, #216]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005684:	0e1b      	lsrs	r3, r3, #24
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800568c:	4b32      	ldr	r3, [pc, #200]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800568e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005692:	0f1b      	lsrs	r3, r3, #28
 8005694:	f003 0307 	and.w	r3, r3, #7
 8005698:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	019a      	lsls	r2, r3, #6
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	041b      	lsls	r3, r3, #16
 80056a6:	431a      	orrs	r2, r3
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	061b      	lsls	r3, r3, #24
 80056ac:	431a      	orrs	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	071b      	lsls	r3, r3, #28
 80056b2:	4929      	ldr	r1, [pc, #164]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0308 	and.w	r3, r3, #8
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d028      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056c6:	4b24      	ldr	r3, [pc, #144]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056cc:	0e1b      	lsrs	r3, r3, #24
 80056ce:	f003 030f 	and.w	r3, r3, #15
 80056d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80056d4:	4b20      	ldr	r3, [pc, #128]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056da:	0c1b      	lsrs	r3, r3, #16
 80056dc:	f003 0303 	and.w	r3, r3, #3
 80056e0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	019a      	lsls	r2, r3, #6
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	041b      	lsls	r3, r3, #16
 80056ec:	431a      	orrs	r2, r3
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	061b      	lsls	r3, r3, #24
 80056f2:	431a      	orrs	r2, r3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	071b      	lsls	r3, r3, #28
 80056fa:	4917      	ldr	r1, [pc, #92]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80056fc:	4313      	orrs	r3, r2
 80056fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005702:	4b15      	ldr	r3, [pc, #84]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005708:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005710:	4911      	ldr	r1, [pc, #68]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005712:	4313      	orrs	r3, r2
 8005714:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005718:	4b0f      	ldr	r3, [pc, #60]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a0e      	ldr	r2, [pc, #56]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800571e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005722:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005724:	f7fd fe3e 	bl	80033a4 <HAL_GetTick>
 8005728:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800572a:	e008      	b.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800572c:	f7fd fe3a 	bl	80033a4 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b64      	cmp	r3, #100	; 0x64
 8005738:	d901      	bls.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e007      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800573e:	4b06      	ldr	r3, [pc, #24]	; (8005758 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005746:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800574a:	d1ef      	bne.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3720      	adds	r7, #32
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	40023800 	.word	0x40023800

0800575c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d101      	bne.n	800576e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e049      	b.n	8005802 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d106      	bne.n	8005788 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f841 	bl	800580a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3304      	adds	r3, #4
 8005798:	4619      	mov	r1, r3
 800579a:	4610      	mov	r0, r2
 800579c:	f000 fc12 	bl	8005fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800580a:	b480      	push	{r7}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005812:	bf00      	nop
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
	...

08005820 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b01      	cmp	r3, #1
 8005832:	d001      	beq.n	8005838 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e054      	b.n	80058e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68da      	ldr	r2, [r3, #12]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f042 0201 	orr.w	r2, r2, #1
 800584e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a26      	ldr	r2, [pc, #152]	; (80058f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d022      	beq.n	80058a0 <HAL_TIM_Base_Start_IT+0x80>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005862:	d01d      	beq.n	80058a0 <HAL_TIM_Base_Start_IT+0x80>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a22      	ldr	r2, [pc, #136]	; (80058f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d018      	beq.n	80058a0 <HAL_TIM_Base_Start_IT+0x80>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a21      	ldr	r2, [pc, #132]	; (80058f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d013      	beq.n	80058a0 <HAL_TIM_Base_Start_IT+0x80>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a1f      	ldr	r2, [pc, #124]	; (80058fc <HAL_TIM_Base_Start_IT+0xdc>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d00e      	beq.n	80058a0 <HAL_TIM_Base_Start_IT+0x80>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a1e      	ldr	r2, [pc, #120]	; (8005900 <HAL_TIM_Base_Start_IT+0xe0>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d009      	beq.n	80058a0 <HAL_TIM_Base_Start_IT+0x80>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a1c      	ldr	r2, [pc, #112]	; (8005904 <HAL_TIM_Base_Start_IT+0xe4>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d004      	beq.n	80058a0 <HAL_TIM_Base_Start_IT+0x80>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a1b      	ldr	r2, [pc, #108]	; (8005908 <HAL_TIM_Base_Start_IT+0xe8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d115      	bne.n	80058cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689a      	ldr	r2, [r3, #8]
 80058a6:	4b19      	ldr	r3, [pc, #100]	; (800590c <HAL_TIM_Base_Start_IT+0xec>)
 80058a8:	4013      	ands	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2b06      	cmp	r3, #6
 80058b0:	d015      	beq.n	80058de <HAL_TIM_Base_Start_IT+0xbe>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b8:	d011      	beq.n	80058de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f042 0201 	orr.w	r2, r2, #1
 80058c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ca:	e008      	b.n	80058de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0201 	orr.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	e000      	b.n	80058e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	40010000 	.word	0x40010000
 80058f4:	40000400 	.word	0x40000400
 80058f8:	40000800 	.word	0x40000800
 80058fc:	40000c00 	.word	0x40000c00
 8005900:	40010400 	.word	0x40010400
 8005904:	40014000 	.word	0x40014000
 8005908:	40001800 	.word	0x40001800
 800590c:	00010007 	.word	0x00010007

08005910 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e049      	b.n	80059b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d106      	bne.n	800593c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7fd f96a 	bl	8002c10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3304      	adds	r3, #4
 800594c:	4619      	mov	r1, r3
 800594e:	4610      	mov	r0, r2
 8005950:	f000 fb38 	bl	8005fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
	...

080059c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e08f      	b.n	8005af4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d106      	bne.n	80059ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f7fd f945 	bl	8002c78 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2202      	movs	r2, #2
 80059f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	6899      	ldr	r1, [r3, #8]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	4b3e      	ldr	r3, [pc, #248]	; (8005afc <HAL_TIM_Encoder_Init+0x13c>)
 8005a02:	400b      	ands	r3, r1
 8005a04:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	4619      	mov	r1, r3
 8005a10:	4610      	mov	r0, r2
 8005a12:	f000 fad7 	bl	8005fc4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	4b31      	ldr	r3, [pc, #196]	; (8005b00 <HAL_TIM_Encoder_Init+0x140>)
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	021b      	lsls	r3, r3, #8
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	4b2b      	ldr	r3, [pc, #172]	; (8005b04 <HAL_TIM_Encoder_Init+0x144>)
 8005a56:	4013      	ands	r3, r2
 8005a58:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4b2a      	ldr	r3, [pc, #168]	; (8005b08 <HAL_TIM_Encoder_Init+0x148>)
 8005a5e:	4013      	ands	r3, r2
 8005a60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	68da      	ldr	r2, [r3, #12]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	021b      	lsls	r3, r3, #8
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	011a      	lsls	r2, r3, #4
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	031b      	lsls	r3, r3, #12
 8005a80:	4313      	orrs	r3, r2
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005a8e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005a96:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	011b      	lsls	r3, r3, #4
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2201      	movs	r2, #1
 8005ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3718      	adds	r7, #24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	fffebff8 	.word	0xfffebff8
 8005b00:	fffffcfc 	.word	0xfffffcfc
 8005b04:	fffff3f3 	.word	0xfffff3f3
 8005b08:	ffff0f0f 	.word	0xffff0f0f

08005b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d122      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d11b      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f06f 0202 	mvn.w	r2, #2
 8005b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	f003 0303 	and.w	r3, r3, #3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 fa1a 	bl	8005f88 <HAL_TIM_IC_CaptureCallback>
 8005b54:	e005      	b.n	8005b62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 fa0c 	bl	8005f74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 fa1d 	bl	8005f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f003 0304 	and.w	r3, r3, #4
 8005b72:	2b04      	cmp	r3, #4
 8005b74:	d122      	bne.n	8005bbc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b04      	cmp	r3, #4
 8005b82:	d11b      	bne.n	8005bbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f06f 0204 	mvn.w	r2, #4
 8005b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2202      	movs	r2, #2
 8005b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 f9f0 	bl	8005f88 <HAL_TIM_IC_CaptureCallback>
 8005ba8:	e005      	b.n	8005bb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f9e2 	bl	8005f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f9f3 	bl	8005f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f003 0308 	and.w	r3, r3, #8
 8005bc6:	2b08      	cmp	r3, #8
 8005bc8:	d122      	bne.n	8005c10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f003 0308 	and.w	r3, r3, #8
 8005bd4:	2b08      	cmp	r3, #8
 8005bd6:	d11b      	bne.n	8005c10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f06f 0208 	mvn.w	r2, #8
 8005be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2204      	movs	r2, #4
 8005be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f9c6 	bl	8005f88 <HAL_TIM_IC_CaptureCallback>
 8005bfc:	e005      	b.n	8005c0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f9b8 	bl	8005f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 f9c9 	bl	8005f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	f003 0310 	and.w	r3, r3, #16
 8005c1a:	2b10      	cmp	r3, #16
 8005c1c:	d122      	bne.n	8005c64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	f003 0310 	and.w	r3, r3, #16
 8005c28:	2b10      	cmp	r3, #16
 8005c2a:	d11b      	bne.n	8005c64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f06f 0210 	mvn.w	r2, #16
 8005c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2208      	movs	r2, #8
 8005c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f99c 	bl	8005f88 <HAL_TIM_IC_CaptureCallback>
 8005c50:	e005      	b.n	8005c5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f98e 	bl	8005f74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f99f 	bl	8005f9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	691b      	ldr	r3, [r3, #16]
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d10e      	bne.n	8005c90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d107      	bne.n	8005c90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f06f 0201 	mvn.w	r2, #1
 8005c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7fc f9d6 	bl	800203c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c9a:	2b80      	cmp	r3, #128	; 0x80
 8005c9c:	d10e      	bne.n	8005cbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca8:	2b80      	cmp	r3, #128	; 0x80
 8005caa:	d107      	bne.n	8005cbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fd98 	bl	80067ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cca:	d10e      	bne.n	8005cea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd6:	2b80      	cmp	r3, #128	; 0x80
 8005cd8:	d107      	bne.n	8005cea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ce2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fd8b 	bl	8006800 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf4:	2b40      	cmp	r3, #64	; 0x40
 8005cf6:	d10e      	bne.n	8005d16 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d02:	2b40      	cmp	r3, #64	; 0x40
 8005d04:	d107      	bne.n	8005d16 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f94d 	bl	8005fb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	f003 0320 	and.w	r3, r3, #32
 8005d20:	2b20      	cmp	r3, #32
 8005d22:	d10e      	bne.n	8005d42 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f003 0320 	and.w	r3, r3, #32
 8005d2e:	2b20      	cmp	r3, #32
 8005d30:	d107      	bne.n	8005d42 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f06f 0220 	mvn.w	r2, #32
 8005d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 fd4b 	bl	80067d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d42:	bf00      	nop
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
	...

08005d4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d101      	bne.n	8005d6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d66:	2302      	movs	r3, #2
 8005d68:	e0ff      	b.n	8005f6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b14      	cmp	r3, #20
 8005d76:	f200 80f0 	bhi.w	8005f5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005d7a:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d80:	08005dd5 	.word	0x08005dd5
 8005d84:	08005f5b 	.word	0x08005f5b
 8005d88:	08005f5b 	.word	0x08005f5b
 8005d8c:	08005f5b 	.word	0x08005f5b
 8005d90:	08005e15 	.word	0x08005e15
 8005d94:	08005f5b 	.word	0x08005f5b
 8005d98:	08005f5b 	.word	0x08005f5b
 8005d9c:	08005f5b 	.word	0x08005f5b
 8005da0:	08005e57 	.word	0x08005e57
 8005da4:	08005f5b 	.word	0x08005f5b
 8005da8:	08005f5b 	.word	0x08005f5b
 8005dac:	08005f5b 	.word	0x08005f5b
 8005db0:	08005e97 	.word	0x08005e97
 8005db4:	08005f5b 	.word	0x08005f5b
 8005db8:	08005f5b 	.word	0x08005f5b
 8005dbc:	08005f5b 	.word	0x08005f5b
 8005dc0:	08005ed9 	.word	0x08005ed9
 8005dc4:	08005f5b 	.word	0x08005f5b
 8005dc8:	08005f5b 	.word	0x08005f5b
 8005dcc:	08005f5b 	.word	0x08005f5b
 8005dd0:	08005f19 	.word	0x08005f19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68b9      	ldr	r1, [r7, #8]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 f992 	bl	8006104 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699a      	ldr	r2, [r3, #24]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0208 	orr.w	r2, r2, #8
 8005dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	699a      	ldr	r2, [r3, #24]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 0204 	bic.w	r2, r2, #4
 8005dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	6999      	ldr	r1, [r3, #24]
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	691a      	ldr	r2, [r3, #16]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	619a      	str	r2, [r3, #24]
      break;
 8005e12:	e0a5      	b.n	8005f60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68b9      	ldr	r1, [r7, #8]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 f9e4 	bl	80061e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	699a      	ldr	r2, [r3, #24]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	699a      	ldr	r2, [r3, #24]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6999      	ldr	r1, [r3, #24]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	021a      	lsls	r2, r3, #8
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	430a      	orrs	r2, r1
 8005e52:	619a      	str	r2, [r3, #24]
      break;
 8005e54:	e084      	b.n	8005f60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68b9      	ldr	r1, [r7, #8]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 fa3b 	bl	80062d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69da      	ldr	r2, [r3, #28]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f042 0208 	orr.w	r2, r2, #8
 8005e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69da      	ldr	r2, [r3, #28]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0204 	bic.w	r2, r2, #4
 8005e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69d9      	ldr	r1, [r3, #28]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	691a      	ldr	r2, [r3, #16]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	61da      	str	r2, [r3, #28]
      break;
 8005e94:	e064      	b.n	8005f60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68b9      	ldr	r1, [r7, #8]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 fa91 	bl	80063c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69da      	ldr	r2, [r3, #28]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69da      	ldr	r2, [r3, #28]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ec0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69d9      	ldr	r1, [r3, #28]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	021a      	lsls	r2, r3, #8
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	61da      	str	r2, [r3, #28]
      break;
 8005ed6:	e043      	b.n	8005f60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68b9      	ldr	r1, [r7, #8]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 fac8 	bl	8006474 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f042 0208 	orr.w	r2, r2, #8
 8005ef2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 0204 	bic.w	r2, r2, #4
 8005f02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	691a      	ldr	r2, [r3, #16]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	430a      	orrs	r2, r1
 8005f14:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f16:	e023      	b.n	8005f60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68b9      	ldr	r1, [r7, #8]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 fafa 	bl	8006518 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	021a      	lsls	r2, r3, #8
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	430a      	orrs	r2, r1
 8005f56:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f58:	e002      	b.n	8005f60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop

08005f74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a40      	ldr	r2, [pc, #256]	; (80060d8 <TIM_Base_SetConfig+0x114>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d013      	beq.n	8006004 <TIM_Base_SetConfig+0x40>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fe2:	d00f      	beq.n	8006004 <TIM_Base_SetConfig+0x40>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a3d      	ldr	r2, [pc, #244]	; (80060dc <TIM_Base_SetConfig+0x118>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d00b      	beq.n	8006004 <TIM_Base_SetConfig+0x40>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a3c      	ldr	r2, [pc, #240]	; (80060e0 <TIM_Base_SetConfig+0x11c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d007      	beq.n	8006004 <TIM_Base_SetConfig+0x40>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a3b      	ldr	r2, [pc, #236]	; (80060e4 <TIM_Base_SetConfig+0x120>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d003      	beq.n	8006004 <TIM_Base_SetConfig+0x40>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a3a      	ldr	r2, [pc, #232]	; (80060e8 <TIM_Base_SetConfig+0x124>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d108      	bne.n	8006016 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	4313      	orrs	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a2f      	ldr	r2, [pc, #188]	; (80060d8 <TIM_Base_SetConfig+0x114>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d02b      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006024:	d027      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a2c      	ldr	r2, [pc, #176]	; (80060dc <TIM_Base_SetConfig+0x118>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d023      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a2b      	ldr	r2, [pc, #172]	; (80060e0 <TIM_Base_SetConfig+0x11c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d01f      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a2a      	ldr	r2, [pc, #168]	; (80060e4 <TIM_Base_SetConfig+0x120>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d01b      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a29      	ldr	r2, [pc, #164]	; (80060e8 <TIM_Base_SetConfig+0x124>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d017      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	4a28      	ldr	r2, [pc, #160]	; (80060ec <TIM_Base_SetConfig+0x128>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d013      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a27      	ldr	r2, [pc, #156]	; (80060f0 <TIM_Base_SetConfig+0x12c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d00f      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a26      	ldr	r2, [pc, #152]	; (80060f4 <TIM_Base_SetConfig+0x130>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d00b      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a25      	ldr	r2, [pc, #148]	; (80060f8 <TIM_Base_SetConfig+0x134>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d007      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a24      	ldr	r2, [pc, #144]	; (80060fc <TIM_Base_SetConfig+0x138>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d003      	beq.n	8006076 <TIM_Base_SetConfig+0xb2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a23      	ldr	r2, [pc, #140]	; (8006100 <TIM_Base_SetConfig+0x13c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d108      	bne.n	8006088 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800607c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	4313      	orrs	r3, r2
 8006086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	4313      	orrs	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a0a      	ldr	r2, [pc, #40]	; (80060d8 <TIM_Base_SetConfig+0x114>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d003      	beq.n	80060bc <TIM_Base_SetConfig+0xf8>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a0c      	ldr	r2, [pc, #48]	; (80060e8 <TIM_Base_SetConfig+0x124>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d103      	bne.n	80060c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	691a      	ldr	r2, [r3, #16]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	615a      	str	r2, [r3, #20]
}
 80060ca:	bf00      	nop
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	40010000 	.word	0x40010000
 80060dc:	40000400 	.word	0x40000400
 80060e0:	40000800 	.word	0x40000800
 80060e4:	40000c00 	.word	0x40000c00
 80060e8:	40010400 	.word	0x40010400
 80060ec:	40014000 	.word	0x40014000
 80060f0:	40014400 	.word	0x40014400
 80060f4:	40014800 	.word	0x40014800
 80060f8:	40001800 	.word	0x40001800
 80060fc:	40001c00 	.word	0x40001c00
 8006100:	40002000 	.word	0x40002000

08006104 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	f023 0201 	bic.w	r2, r3, #1
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4b2b      	ldr	r3, [pc, #172]	; (80061dc <TIM_OC1_SetConfig+0xd8>)
 8006130:	4013      	ands	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f023 0303 	bic.w	r3, r3, #3
 800613a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	4313      	orrs	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f023 0302 	bic.w	r3, r3, #2
 800614c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	4313      	orrs	r3, r2
 8006156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a21      	ldr	r2, [pc, #132]	; (80061e0 <TIM_OC1_SetConfig+0xdc>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d003      	beq.n	8006168 <TIM_OC1_SetConfig+0x64>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a20      	ldr	r2, [pc, #128]	; (80061e4 <TIM_OC1_SetConfig+0xe0>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d10c      	bne.n	8006182 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f023 0308 	bic.w	r3, r3, #8
 800616e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	4313      	orrs	r3, r2
 8006178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f023 0304 	bic.w	r3, r3, #4
 8006180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a16      	ldr	r2, [pc, #88]	; (80061e0 <TIM_OC1_SetConfig+0xdc>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d003      	beq.n	8006192 <TIM_OC1_SetConfig+0x8e>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a15      	ldr	r2, [pc, #84]	; (80061e4 <TIM_OC1_SetConfig+0xe0>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d111      	bne.n	80061b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	695b      	ldr	r3, [r3, #20]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	621a      	str	r2, [r3, #32]
}
 80061d0:	bf00      	nop
 80061d2:	371c      	adds	r7, #28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	fffeff8f 	.word	0xfffeff8f
 80061e0:	40010000 	.word	0x40010000
 80061e4:	40010400 	.word	0x40010400

080061e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	f023 0210 	bic.w	r2, r3, #16
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	4b2e      	ldr	r3, [pc, #184]	; (80062cc <TIM_OC2_SetConfig+0xe4>)
 8006214:	4013      	ands	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800621e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	021b      	lsls	r3, r3, #8
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	4313      	orrs	r3, r2
 800622a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f023 0320 	bic.w	r3, r3, #32
 8006232:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	011b      	lsls	r3, r3, #4
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	4313      	orrs	r3, r2
 800623e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a23      	ldr	r2, [pc, #140]	; (80062d0 <TIM_OC2_SetConfig+0xe8>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d003      	beq.n	8006250 <TIM_OC2_SetConfig+0x68>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a22      	ldr	r2, [pc, #136]	; (80062d4 <TIM_OC2_SetConfig+0xec>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d10d      	bne.n	800626c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	011b      	lsls	r3, r3, #4
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800626a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a18      	ldr	r2, [pc, #96]	; (80062d0 <TIM_OC2_SetConfig+0xe8>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d003      	beq.n	800627c <TIM_OC2_SetConfig+0x94>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a17      	ldr	r2, [pc, #92]	; (80062d4 <TIM_OC2_SetConfig+0xec>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d113      	bne.n	80062a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006282:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800628a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	4313      	orrs	r3, r2
 8006296:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	621a      	str	r2, [r3, #32]
}
 80062be:	bf00      	nop
 80062c0:	371c      	adds	r7, #28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	feff8fff 	.word	0xfeff8fff
 80062d0:	40010000 	.word	0x40010000
 80062d4:	40010400 	.word	0x40010400

080062d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062d8:	b480      	push	{r7}
 80062da:	b087      	sub	sp, #28
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	4b2d      	ldr	r3, [pc, #180]	; (80063b8 <TIM_OC3_SetConfig+0xe0>)
 8006304:	4013      	ands	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0303 	bic.w	r3, r3, #3
 800630e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006320:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	4313      	orrs	r3, r2
 800632c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a22      	ldr	r2, [pc, #136]	; (80063bc <TIM_OC3_SetConfig+0xe4>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d003      	beq.n	800633e <TIM_OC3_SetConfig+0x66>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a21      	ldr	r2, [pc, #132]	; (80063c0 <TIM_OC3_SetConfig+0xe8>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d10d      	bne.n	800635a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006344:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	021b      	lsls	r3, r3, #8
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	4313      	orrs	r3, r2
 8006350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006358:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a17      	ldr	r2, [pc, #92]	; (80063bc <TIM_OC3_SetConfig+0xe4>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d003      	beq.n	800636a <TIM_OC3_SetConfig+0x92>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a16      	ldr	r2, [pc, #88]	; (80063c0 <TIM_OC3_SetConfig+0xe8>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d113      	bne.n	8006392 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006370:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006378:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	695b      	ldr	r3, [r3, #20]
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4313      	orrs	r3, r2
 8006384:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	011b      	lsls	r3, r3, #4
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	4313      	orrs	r3, r2
 8006390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685a      	ldr	r2, [r3, #4]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	621a      	str	r2, [r3, #32]
}
 80063ac:	bf00      	nop
 80063ae:	371c      	adds	r7, #28
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	fffeff8f 	.word	0xfffeff8f
 80063bc:	40010000 	.word	0x40010000
 80063c0:	40010400 	.word	0x40010400

080063c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	4b1e      	ldr	r3, [pc, #120]	; (8006468 <TIM_OC4_SetConfig+0xa4>)
 80063f0:	4013      	ands	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800640e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	031b      	lsls	r3, r3, #12
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a13      	ldr	r2, [pc, #76]	; (800646c <TIM_OC4_SetConfig+0xa8>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d003      	beq.n	800642c <TIM_OC4_SetConfig+0x68>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a12      	ldr	r2, [pc, #72]	; (8006470 <TIM_OC4_SetConfig+0xac>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d109      	bne.n	8006440 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006432:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	695b      	ldr	r3, [r3, #20]
 8006438:	019b      	lsls	r3, r3, #6
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	4313      	orrs	r3, r2
 800643e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	621a      	str	r2, [r3, #32]
}
 800645a:	bf00      	nop
 800645c:	371c      	adds	r7, #28
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	feff8fff 	.word	0xfeff8fff
 800646c:	40010000 	.word	0x40010000
 8006470:	40010400 	.word	0x40010400

08006474 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006474:	b480      	push	{r7}
 8006476:	b087      	sub	sp, #28
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800649a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	4b1b      	ldr	r3, [pc, #108]	; (800650c <TIM_OC5_SetConfig+0x98>)
 80064a0:	4013      	ands	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80064b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	041b      	lsls	r3, r3, #16
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	4313      	orrs	r3, r2
 80064c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a12      	ldr	r2, [pc, #72]	; (8006510 <TIM_OC5_SetConfig+0x9c>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d003      	beq.n	80064d2 <TIM_OC5_SetConfig+0x5e>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a11      	ldr	r2, [pc, #68]	; (8006514 <TIM_OC5_SetConfig+0xa0>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d109      	bne.n	80064e6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	021b      	lsls	r3, r3, #8
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	621a      	str	r2, [r3, #32]
}
 8006500:	bf00      	nop
 8006502:	371c      	adds	r7, #28
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	fffeff8f 	.word	0xfffeff8f
 8006510:	40010000 	.word	0x40010000
 8006514:	40010400 	.word	0x40010400

08006518 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	4b1c      	ldr	r3, [pc, #112]	; (80065b4 <TIM_OC6_SetConfig+0x9c>)
 8006544:	4013      	ands	r3, r2
 8006546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	021b      	lsls	r3, r3, #8
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	4313      	orrs	r3, r2
 8006552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800655a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	051b      	lsls	r3, r3, #20
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	4313      	orrs	r3, r2
 8006566:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a13      	ldr	r2, [pc, #76]	; (80065b8 <TIM_OC6_SetConfig+0xa0>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d003      	beq.n	8006578 <TIM_OC6_SetConfig+0x60>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a12      	ldr	r2, [pc, #72]	; (80065bc <TIM_OC6_SetConfig+0xa4>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d109      	bne.n	800658c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800657e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	029b      	lsls	r3, r3, #10
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	4313      	orrs	r3, r2
 800658a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	621a      	str	r2, [r3, #32]
}
 80065a6:	bf00      	nop
 80065a8:	371c      	adds	r7, #28
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	feff8fff 	.word	0xfeff8fff
 80065b8:	40010000 	.word	0x40010000
 80065bc:	40010400 	.word	0x40010400

080065c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d101      	bne.n	80065d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065d4:	2302      	movs	r3, #2
 80065d6:	e06d      	b.n	80066b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2202      	movs	r2, #2
 80065e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a30      	ldr	r2, [pc, #192]	; (80066c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d004      	beq.n	800660c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a2f      	ldr	r2, [pc, #188]	; (80066c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d108      	bne.n	800661e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006612:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	4313      	orrs	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006624:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	4313      	orrs	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68fa      	ldr	r2, [r7, #12]
 8006636:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a20      	ldr	r2, [pc, #128]	; (80066c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d022      	beq.n	8006688 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800664a:	d01d      	beq.n	8006688 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a1d      	ldr	r2, [pc, #116]	; (80066c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d018      	beq.n	8006688 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a1c      	ldr	r2, [pc, #112]	; (80066cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d013      	beq.n	8006688 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a1a      	ldr	r2, [pc, #104]	; (80066d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00e      	beq.n	8006688 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a15      	ldr	r2, [pc, #84]	; (80066c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d009      	beq.n	8006688 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a16      	ldr	r2, [pc, #88]	; (80066d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d004      	beq.n	8006688 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a15      	ldr	r2, [pc, #84]	; (80066d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d10c      	bne.n	80066a2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800668e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	68ba      	ldr	r2, [r7, #8]
 8006696:	4313      	orrs	r3, r2
 8006698:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3714      	adds	r7, #20
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	40010000 	.word	0x40010000
 80066c4:	40010400 	.word	0x40010400
 80066c8:	40000400 	.word	0x40000400
 80066cc:	40000800 	.word	0x40000800
 80066d0:	40000c00 	.word	0x40000c00
 80066d4:	40014000 	.word	0x40014000
 80066d8:	40001800 	.word	0x40001800

080066dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d101      	bne.n	80066f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80066f4:	2302      	movs	r3, #2
 80066f6:	e065      	b.n	80067c4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	4313      	orrs	r3, r2
 800670c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	4313      	orrs	r3, r2
 800671a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	4313      	orrs	r3, r2
 8006728:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4313      	orrs	r3, r2
 8006736:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	4313      	orrs	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	4313      	orrs	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675e:	4313      	orrs	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	041b      	lsls	r3, r3, #16
 800676e:	4313      	orrs	r3, r2
 8006770:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a16      	ldr	r2, [pc, #88]	; (80067d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d004      	beq.n	8006786 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a14      	ldr	r2, [pc, #80]	; (80067d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d115      	bne.n	80067b2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006790:	051b      	lsls	r3, r3, #20
 8006792:	4313      	orrs	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	69db      	ldr	r3, [r3, #28]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr
 80067d0:	40010000 	.word	0x40010000
 80067d4:	40010400 	.word	0x40010400

080067d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b082      	sub	sp, #8
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d101      	bne.n	8006826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e040      	b.n	80068a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800682a:	2b00      	cmp	r3, #0
 800682c:	d106      	bne.n	800683c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7fc fbea 	bl	8003010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2224      	movs	r2, #36	; 0x24
 8006840:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f022 0201 	bic.w	r2, r2, #1
 8006850:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fcae 	bl	80071b4 <UART_SetConfig>
 8006858:	4603      	mov	r3, r0
 800685a:	2b01      	cmp	r3, #1
 800685c:	d101      	bne.n	8006862 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e022      	b.n	80068a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 ff06 	bl	800767c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800687e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689a      	ldr	r2, [r3, #8]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800688e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f042 0201 	orr.w	r2, r2, #1
 800689e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 ff8d 	bl	80077c0 <UART_CheckIdleState>
 80068a6:	4603      	mov	r3, r0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b08a      	sub	sp, #40	; 0x28
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	4613      	mov	r3, r2
 80068bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068c2:	2b20      	cmp	r3, #32
 80068c4:	d165      	bne.n	8006992 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <HAL_UART_Transmit_DMA+0x22>
 80068cc:	88fb      	ldrh	r3, [r7, #6]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d101      	bne.n	80068d6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e05e      	b.n	8006994 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	68ba      	ldr	r2, [r7, #8]
 80068da:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	88fa      	ldrh	r2, [r7, #6]
 80068e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	88fa      	ldrh	r2, [r7, #6]
 80068e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2221      	movs	r2, #33	; 0x21
 80068f8:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d027      	beq.n	8006952 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006906:	4a25      	ldr	r2, [pc, #148]	; (800699c <HAL_UART_Transmit_DMA+0xec>)
 8006908:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690e:	4a24      	ldr	r2, [pc, #144]	; (80069a0 <HAL_UART_Transmit_DMA+0xf0>)
 8006910:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006916:	4a23      	ldr	r2, [pc, #140]	; (80069a4 <HAL_UART_Transmit_DMA+0xf4>)
 8006918:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800691e:	2200      	movs	r2, #0
 8006920:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800692a:	4619      	mov	r1, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	3328      	adds	r3, #40	; 0x28
 8006932:	461a      	mov	r2, r3
 8006934:	88fb      	ldrh	r3, [r7, #6]
 8006936:	f7fc fef5 	bl	8003724 <HAL_DMA_Start_IT>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d008      	beq.n	8006952 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2210      	movs	r2, #16
 8006944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2220      	movs	r2, #32
 800694c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e020      	b.n	8006994 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2240      	movs	r2, #64	; 0x40
 8006958:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	3308      	adds	r3, #8
 8006960:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	e853 3f00 	ldrex	r3, [r3]
 8006968:	613b      	str	r3, [r7, #16]
   return(result);
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006970:	627b      	str	r3, [r7, #36]	; 0x24
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3308      	adds	r3, #8
 8006978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800697a:	623a      	str	r2, [r7, #32]
 800697c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697e:	69f9      	ldr	r1, [r7, #28]
 8006980:	6a3a      	ldr	r2, [r7, #32]
 8006982:	e841 2300 	strex	r3, r2, [r1]
 8006986:	61bb      	str	r3, [r7, #24]
   return(result);
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1e5      	bne.n	800695a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800698e:	2300      	movs	r3, #0
 8006990:	e000      	b.n	8006994 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8006992:	2302      	movs	r3, #2
  }
}
 8006994:	4618      	mov	r0, r3
 8006996:	3728      	adds	r7, #40	; 0x28
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}
 800699c:	08007c3d 	.word	0x08007c3d
 80069a0:	08007cd3 	.word	0x08007cd3
 80069a4:	08007e55 	.word	0x08007e55

080069a8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08a      	sub	sp, #40	; 0x28
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	4613      	mov	r3, r2
 80069b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069bc:	2b20      	cmp	r3, #32
 80069be:	d132      	bne.n	8006a26 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d002      	beq.n	80069cc <HAL_UART_Receive_DMA+0x24>
 80069c6:	88fb      	ldrh	r3, [r7, #6]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d101      	bne.n	80069d0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e02b      	b.n	8006a28 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d018      	beq.n	8006a16 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	e853 3f00 	ldrex	r3, [r3]
 80069f0:	613b      	str	r3, [r7, #16]
   return(result);
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069f8:	627b      	str	r3, [r7, #36]	; 0x24
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	461a      	mov	r2, r3
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	623b      	str	r3, [r7, #32]
 8006a04:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a06:	69f9      	ldr	r1, [r7, #28]
 8006a08:	6a3a      	ldr	r2, [r7, #32]
 8006a0a:	e841 2300 	strex	r3, r2, [r1]
 8006a0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1e6      	bne.n	80069e4 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006a16:	88fb      	ldrh	r3, [r7, #6]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	68b9      	ldr	r1, [r7, #8]
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f000 ffe3 	bl	80079e8 <UART_Start_Receive_DMA>
 8006a22:	4603      	mov	r3, r0
 8006a24:	e000      	b.n	8006a28 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006a26:	2302      	movs	r3, #2
  }
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3728      	adds	r7, #40	; 0x28
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b090      	sub	sp, #64	; 0x40
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a44:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a50:	2b80      	cmp	r3, #128	; 0x80
 8006a52:	d139      	bne.n	8006ac8 <HAL_UART_DMAStop+0x98>
 8006a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a56:	2b21      	cmp	r3, #33	; 0x21
 8006a58:	d136      	bne.n	8006ac8 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	3308      	adds	r3, #8
 8006a60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	e853 3f00 	ldrex	r3, [r3]
 8006a68:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a70:	637b      	str	r3, [r7, #52]	; 0x34
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3308      	adds	r3, #8
 8006a78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1e5      	bne.n	8006a5a <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d015      	beq.n	8006ac2 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fc fea2 	bl	80037e4 <HAL_DMA_Abort>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00d      	beq.n	8006ac2 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fd f8b6 	bl	8003c1c <HAL_DMA_GetError>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b20      	cmp	r3, #32
 8006ab4:	d105      	bne.n	8006ac2 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2210      	movs	r2, #16
 8006aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e044      	b.n	8006b4c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f001 f830 	bl	8007b28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad2:	2b40      	cmp	r3, #64	; 0x40
 8006ad4:	d139      	bne.n	8006b4a <HAL_UART_DMAStop+0x11a>
 8006ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad8:	2b22      	cmp	r3, #34	; 0x22
 8006ada:	d136      	bne.n	8006b4a <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	3308      	adds	r3, #8
 8006ae2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	e853 3f00 	ldrex	r3, [r3]
 8006aea:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006af2:	633b      	str	r3, [r7, #48]	; 0x30
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3308      	adds	r3, #8
 8006afa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006afc:	61ba      	str	r2, [r7, #24]
 8006afe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b00:	6979      	ldr	r1, [r7, #20]
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	e841 2300 	strex	r3, r2, [r1]
 8006b08:	613b      	str	r3, [r7, #16]
   return(result);
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d1e5      	bne.n	8006adc <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d015      	beq.n	8006b44 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fc fe61 	bl	80037e4 <HAL_DMA_Abort>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00d      	beq.n	8006b44 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7fd f875 	bl	8003c1c <HAL_DMA_GetError>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b20      	cmp	r3, #32
 8006b36:	d105      	bne.n	8006b44 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2210      	movs	r2, #16
 8006b3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e003      	b.n	8006b4c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f001 f815 	bl	8007b74 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3740      	adds	r7, #64	; 0x40
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b0ba      	sub	sp, #232	; 0xe8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006b7e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006b82:	4013      	ands	r3, r2
 8006b84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006b88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d115      	bne.n	8006bbc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b94:	f003 0320 	and.w	r3, r3, #32
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00f      	beq.n	8006bbc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ba0:	f003 0320 	and.w	r3, r3, #32
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d009      	beq.n	8006bbc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 82ac 	beq.w	800710a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	4798      	blx	r3
      }
      return;
 8006bba:	e2a6      	b.n	800710a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006bbc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 8117 	beq.w	8006df4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d106      	bne.n	8006be0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006bd2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006bd6:	4b85      	ldr	r3, [pc, #532]	; (8006dec <HAL_UART_IRQHandler+0x298>)
 8006bd8:	4013      	ands	r3, r2
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f000 810a 	beq.w	8006df4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006be4:	f003 0301 	and.w	r3, r3, #1
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d011      	beq.n	8006c10 <HAL_UART_IRQHandler+0xbc>
 8006bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00b      	beq.n	8006c10 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c06:	f043 0201 	orr.w	r2, r3, #1
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d011      	beq.n	8006c40 <HAL_UART_IRQHandler+0xec>
 8006c1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00b      	beq.n	8006c40 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2202      	movs	r2, #2
 8006c2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c36:	f043 0204 	orr.w	r2, r3, #4
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c44:	f003 0304 	and.w	r3, r3, #4
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d011      	beq.n	8006c70 <HAL_UART_IRQHandler+0x11c>
 8006c4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00b      	beq.n	8006c70 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2204      	movs	r2, #4
 8006c5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c66:	f043 0202 	orr.w	r2, r3, #2
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c74:	f003 0308 	and.w	r3, r3, #8
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d017      	beq.n	8006cac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c80:	f003 0320 	and.w	r3, r3, #32
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d105      	bne.n	8006c94 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c8c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00b      	beq.n	8006cac <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2208      	movs	r2, #8
 8006c9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ca2:	f043 0208 	orr.w	r2, r3, #8
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d012      	beq.n	8006cde <HAL_UART_IRQHandler+0x18a>
 8006cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00c      	beq.n	8006cde <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ccc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cd4:	f043 0220 	orr.w	r2, r3, #32
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 8212 	beq.w	800710e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cee:	f003 0320 	and.w	r3, r3, #32
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00d      	beq.n	8006d12 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cfa:	f003 0320 	and.w	r3, r3, #32
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d007      	beq.n	8006d12 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d003      	beq.n	8006d12 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d26:	2b40      	cmp	r3, #64	; 0x40
 8006d28:	d005      	beq.n	8006d36 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d04f      	beq.n	8006dd6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f000 ff1c 	bl	8007b74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d46:	2b40      	cmp	r3, #64	; 0x40
 8006d48:	d141      	bne.n	8006dce <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	3308      	adds	r3, #8
 8006d50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d58:	e853 3f00 	ldrex	r3, [r3]
 8006d5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006d60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	3308      	adds	r3, #8
 8006d72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006d76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006d7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006d82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006d86:	e841 2300 	strex	r3, r2, [r1]
 8006d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006d8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1d9      	bne.n	8006d4a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d013      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006da2:	4a13      	ldr	r2, [pc, #76]	; (8006df0 <HAL_UART_IRQHandler+0x29c>)
 8006da4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fc fd8a 	bl	80038c4 <HAL_DMA_Abort_IT>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d017      	beq.n	8006de6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc4:	e00f      	b.n	8006de6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f9d4 	bl	8007174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dcc:	e00b      	b.n	8006de6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f9d0 	bl	8007174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dd4:	e007      	b.n	8006de6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f9cc 	bl	8007174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006de4:	e193      	b.n	800710e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006de6:	bf00      	nop
    return;
 8006de8:	e191      	b.n	800710e <HAL_UART_IRQHandler+0x5ba>
 8006dea:	bf00      	nop
 8006dec:	04000120 	.word	0x04000120
 8006df0:	08007ed3 	.word	0x08007ed3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	f040 814c 	bne.w	8007096 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e02:	f003 0310 	and.w	r3, r3, #16
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f000 8145 	beq.w	8007096 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e10:	f003 0310 	and.w	r3, r3, #16
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 813e 	beq.w	8007096 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2210      	movs	r2, #16
 8006e20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2c:	2b40      	cmp	r3, #64	; 0x40
 8006e2e:	f040 80b6 	bne.w	8006f9e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e3e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f000 8165 	beq.w	8007112 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e52:	429a      	cmp	r2, r3
 8006e54:	f080 815d 	bcs.w	8007112 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006e5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e66:	69db      	ldr	r3, [r3, #28]
 8006e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e6c:	f000 8086 	beq.w	8006f7c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e7c:	e853 3f00 	ldrex	r3, [r3]
 8006e80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006e84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	461a      	mov	r2, r3
 8006e96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e9e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ea2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ea6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006eaa:	e841 2300 	strex	r3, r2, [r1]
 8006eae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1da      	bne.n	8006e70 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	3308      	adds	r3, #8
 8006ec0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ec4:	e853 3f00 	ldrex	r3, [r3]
 8006ec8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006eca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ecc:	f023 0301 	bic.w	r3, r3, #1
 8006ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	3308      	adds	r3, #8
 8006eda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ede:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006ee2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006ee6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006eea:	e841 2300 	strex	r3, r2, [r1]
 8006eee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d1e1      	bne.n	8006eba <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	3308      	adds	r3, #8
 8006efc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f00:	e853 3f00 	ldrex	r3, [r3]
 8006f04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3308      	adds	r3, #8
 8006f16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006f1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006f1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f22:	e841 2300 	strex	r3, r2, [r1]
 8006f26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1e3      	bne.n	8006ef6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2220      	movs	r2, #32
 8006f32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f44:	e853 3f00 	ldrex	r3, [r3]
 8006f48:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f4c:	f023 0310 	bic.w	r3, r3, #16
 8006f50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	461a      	mov	r2, r3
 8006f5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006f5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f60:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f66:	e841 2300 	strex	r3, r2, [r1]
 8006f6a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1e4      	bne.n	8006f3c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7fc fc34 	bl	80037e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	4619      	mov	r1, r3
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f8f6 	bl	8007188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f9c:	e0b9      	b.n	8007112 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 80ab 	beq.w	8007116 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006fc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f000 80a6 	beq.w	8007116 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd2:	e853 3f00 	ldrex	r3, [r3]
 8006fd6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006fec:	647b      	str	r3, [r7, #68]	; 0x44
 8006fee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ff2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ff4:	e841 2300 	strex	r3, r2, [r1]
 8006ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1e4      	bne.n	8006fca <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3308      	adds	r3, #8
 8007006:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700a:	e853 3f00 	ldrex	r3, [r3]
 800700e:	623b      	str	r3, [r7, #32]
   return(result);
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	f023 0301 	bic.w	r3, r3, #1
 8007016:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	3308      	adds	r3, #8
 8007020:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007024:	633a      	str	r2, [r7, #48]	; 0x30
 8007026:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800702a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e3      	bne.n	8007000 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2220      	movs	r2, #32
 800703c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	e853 3f00 	ldrex	r3, [r3]
 8007058:	60fb      	str	r3, [r7, #12]
   return(result);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f023 0310 	bic.w	r3, r3, #16
 8007060:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	461a      	mov	r2, r3
 800706a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800706e:	61fb      	str	r3, [r7, #28]
 8007070:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	69b9      	ldr	r1, [r7, #24]
 8007074:	69fa      	ldr	r2, [r7, #28]
 8007076:	e841 2300 	strex	r3, r2, [r1]
 800707a:	617b      	str	r3, [r7, #20]
   return(result);
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1e4      	bne.n	800704c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2202      	movs	r2, #2
 8007086:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007088:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800708c:	4619      	mov	r1, r3
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f87a 	bl	8007188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007094:	e03f      	b.n	8007116 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800709a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00e      	beq.n	80070c0 <HAL_UART_IRQHandler+0x56c>
 80070a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d008      	beq.n	80070c0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80070b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 f871 	bl	80071a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80070be:	e02d      	b.n	800711c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80070c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00e      	beq.n	80070ea <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80070cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d008      	beq.n	80070ea <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d01c      	beq.n	800711a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	4798      	blx	r3
    }
    return;
 80070e8:	e017      	b.n	800711a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80070ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d012      	beq.n	800711c <HAL_UART_IRQHandler+0x5c8>
 80070f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00c      	beq.n	800711c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fefb 	bl	8007efe <UART_EndTransmit_IT>
    return;
 8007108:	e008      	b.n	800711c <HAL_UART_IRQHandler+0x5c8>
      return;
 800710a:	bf00      	nop
 800710c:	e006      	b.n	800711c <HAL_UART_IRQHandler+0x5c8>
    return;
 800710e:	bf00      	nop
 8007110:	e004      	b.n	800711c <HAL_UART_IRQHandler+0x5c8>
      return;
 8007112:	bf00      	nop
 8007114:	e002      	b.n	800711c <HAL_UART_IRQHandler+0x5c8>
      return;
 8007116:	bf00      	nop
 8007118:	e000      	b.n	800711c <HAL_UART_IRQHandler+0x5c8>
    return;
 800711a:	bf00      	nop
  }

}
 800711c:	37e8      	adds	r7, #232	; 0xe8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop

08007124 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	460b      	mov	r3, r1
 8007192:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b088      	sub	sp, #32
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071bc:	2300      	movs	r3, #0
 80071be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	689a      	ldr	r2, [r3, #8]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	431a      	orrs	r2, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	431a      	orrs	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	69db      	ldr	r3, [r3, #28]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	4ba6      	ldr	r3, [pc, #664]	; (8007478 <UART_SetConfig+0x2c4>)
 80071e0:	4013      	ands	r3, r2
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	6812      	ldr	r2, [r2, #0]
 80071e6:	6979      	ldr	r1, [r7, #20]
 80071e8:	430b      	orrs	r3, r1
 80071ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68da      	ldr	r2, [r3, #12]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	430a      	orrs	r2, r1
 8007200:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a1b      	ldr	r3, [r3, #32]
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	4313      	orrs	r3, r2
 8007210:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	697a      	ldr	r2, [r7, #20]
 8007222:	430a      	orrs	r2, r1
 8007224:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a94      	ldr	r2, [pc, #592]	; (800747c <UART_SetConfig+0x2c8>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d120      	bne.n	8007272 <UART_SetConfig+0xbe>
 8007230:	4b93      	ldr	r3, [pc, #588]	; (8007480 <UART_SetConfig+0x2cc>)
 8007232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007236:	f003 0303 	and.w	r3, r3, #3
 800723a:	2b03      	cmp	r3, #3
 800723c:	d816      	bhi.n	800726c <UART_SetConfig+0xb8>
 800723e:	a201      	add	r2, pc, #4	; (adr r2, 8007244 <UART_SetConfig+0x90>)
 8007240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007244:	08007255 	.word	0x08007255
 8007248:	08007261 	.word	0x08007261
 800724c:	0800725b 	.word	0x0800725b
 8007250:	08007267 	.word	0x08007267
 8007254:	2301      	movs	r3, #1
 8007256:	77fb      	strb	r3, [r7, #31]
 8007258:	e150      	b.n	80074fc <UART_SetConfig+0x348>
 800725a:	2302      	movs	r3, #2
 800725c:	77fb      	strb	r3, [r7, #31]
 800725e:	e14d      	b.n	80074fc <UART_SetConfig+0x348>
 8007260:	2304      	movs	r3, #4
 8007262:	77fb      	strb	r3, [r7, #31]
 8007264:	e14a      	b.n	80074fc <UART_SetConfig+0x348>
 8007266:	2308      	movs	r3, #8
 8007268:	77fb      	strb	r3, [r7, #31]
 800726a:	e147      	b.n	80074fc <UART_SetConfig+0x348>
 800726c:	2310      	movs	r3, #16
 800726e:	77fb      	strb	r3, [r7, #31]
 8007270:	e144      	b.n	80074fc <UART_SetConfig+0x348>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a83      	ldr	r2, [pc, #524]	; (8007484 <UART_SetConfig+0x2d0>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d132      	bne.n	80072e2 <UART_SetConfig+0x12e>
 800727c:	4b80      	ldr	r3, [pc, #512]	; (8007480 <UART_SetConfig+0x2cc>)
 800727e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007282:	f003 030c 	and.w	r3, r3, #12
 8007286:	2b0c      	cmp	r3, #12
 8007288:	d828      	bhi.n	80072dc <UART_SetConfig+0x128>
 800728a:	a201      	add	r2, pc, #4	; (adr r2, 8007290 <UART_SetConfig+0xdc>)
 800728c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007290:	080072c5 	.word	0x080072c5
 8007294:	080072dd 	.word	0x080072dd
 8007298:	080072dd 	.word	0x080072dd
 800729c:	080072dd 	.word	0x080072dd
 80072a0:	080072d1 	.word	0x080072d1
 80072a4:	080072dd 	.word	0x080072dd
 80072a8:	080072dd 	.word	0x080072dd
 80072ac:	080072dd 	.word	0x080072dd
 80072b0:	080072cb 	.word	0x080072cb
 80072b4:	080072dd 	.word	0x080072dd
 80072b8:	080072dd 	.word	0x080072dd
 80072bc:	080072dd 	.word	0x080072dd
 80072c0:	080072d7 	.word	0x080072d7
 80072c4:	2300      	movs	r3, #0
 80072c6:	77fb      	strb	r3, [r7, #31]
 80072c8:	e118      	b.n	80074fc <UART_SetConfig+0x348>
 80072ca:	2302      	movs	r3, #2
 80072cc:	77fb      	strb	r3, [r7, #31]
 80072ce:	e115      	b.n	80074fc <UART_SetConfig+0x348>
 80072d0:	2304      	movs	r3, #4
 80072d2:	77fb      	strb	r3, [r7, #31]
 80072d4:	e112      	b.n	80074fc <UART_SetConfig+0x348>
 80072d6:	2308      	movs	r3, #8
 80072d8:	77fb      	strb	r3, [r7, #31]
 80072da:	e10f      	b.n	80074fc <UART_SetConfig+0x348>
 80072dc:	2310      	movs	r3, #16
 80072de:	77fb      	strb	r3, [r7, #31]
 80072e0:	e10c      	b.n	80074fc <UART_SetConfig+0x348>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a68      	ldr	r2, [pc, #416]	; (8007488 <UART_SetConfig+0x2d4>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d120      	bne.n	800732e <UART_SetConfig+0x17a>
 80072ec:	4b64      	ldr	r3, [pc, #400]	; (8007480 <UART_SetConfig+0x2cc>)
 80072ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80072f6:	2b30      	cmp	r3, #48	; 0x30
 80072f8:	d013      	beq.n	8007322 <UART_SetConfig+0x16e>
 80072fa:	2b30      	cmp	r3, #48	; 0x30
 80072fc:	d814      	bhi.n	8007328 <UART_SetConfig+0x174>
 80072fe:	2b20      	cmp	r3, #32
 8007300:	d009      	beq.n	8007316 <UART_SetConfig+0x162>
 8007302:	2b20      	cmp	r3, #32
 8007304:	d810      	bhi.n	8007328 <UART_SetConfig+0x174>
 8007306:	2b00      	cmp	r3, #0
 8007308:	d002      	beq.n	8007310 <UART_SetConfig+0x15c>
 800730a:	2b10      	cmp	r3, #16
 800730c:	d006      	beq.n	800731c <UART_SetConfig+0x168>
 800730e:	e00b      	b.n	8007328 <UART_SetConfig+0x174>
 8007310:	2300      	movs	r3, #0
 8007312:	77fb      	strb	r3, [r7, #31]
 8007314:	e0f2      	b.n	80074fc <UART_SetConfig+0x348>
 8007316:	2302      	movs	r3, #2
 8007318:	77fb      	strb	r3, [r7, #31]
 800731a:	e0ef      	b.n	80074fc <UART_SetConfig+0x348>
 800731c:	2304      	movs	r3, #4
 800731e:	77fb      	strb	r3, [r7, #31]
 8007320:	e0ec      	b.n	80074fc <UART_SetConfig+0x348>
 8007322:	2308      	movs	r3, #8
 8007324:	77fb      	strb	r3, [r7, #31]
 8007326:	e0e9      	b.n	80074fc <UART_SetConfig+0x348>
 8007328:	2310      	movs	r3, #16
 800732a:	77fb      	strb	r3, [r7, #31]
 800732c:	e0e6      	b.n	80074fc <UART_SetConfig+0x348>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a56      	ldr	r2, [pc, #344]	; (800748c <UART_SetConfig+0x2d8>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d120      	bne.n	800737a <UART_SetConfig+0x1c6>
 8007338:	4b51      	ldr	r3, [pc, #324]	; (8007480 <UART_SetConfig+0x2cc>)
 800733a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800733e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007342:	2bc0      	cmp	r3, #192	; 0xc0
 8007344:	d013      	beq.n	800736e <UART_SetConfig+0x1ba>
 8007346:	2bc0      	cmp	r3, #192	; 0xc0
 8007348:	d814      	bhi.n	8007374 <UART_SetConfig+0x1c0>
 800734a:	2b80      	cmp	r3, #128	; 0x80
 800734c:	d009      	beq.n	8007362 <UART_SetConfig+0x1ae>
 800734e:	2b80      	cmp	r3, #128	; 0x80
 8007350:	d810      	bhi.n	8007374 <UART_SetConfig+0x1c0>
 8007352:	2b00      	cmp	r3, #0
 8007354:	d002      	beq.n	800735c <UART_SetConfig+0x1a8>
 8007356:	2b40      	cmp	r3, #64	; 0x40
 8007358:	d006      	beq.n	8007368 <UART_SetConfig+0x1b4>
 800735a:	e00b      	b.n	8007374 <UART_SetConfig+0x1c0>
 800735c:	2300      	movs	r3, #0
 800735e:	77fb      	strb	r3, [r7, #31]
 8007360:	e0cc      	b.n	80074fc <UART_SetConfig+0x348>
 8007362:	2302      	movs	r3, #2
 8007364:	77fb      	strb	r3, [r7, #31]
 8007366:	e0c9      	b.n	80074fc <UART_SetConfig+0x348>
 8007368:	2304      	movs	r3, #4
 800736a:	77fb      	strb	r3, [r7, #31]
 800736c:	e0c6      	b.n	80074fc <UART_SetConfig+0x348>
 800736e:	2308      	movs	r3, #8
 8007370:	77fb      	strb	r3, [r7, #31]
 8007372:	e0c3      	b.n	80074fc <UART_SetConfig+0x348>
 8007374:	2310      	movs	r3, #16
 8007376:	77fb      	strb	r3, [r7, #31]
 8007378:	e0c0      	b.n	80074fc <UART_SetConfig+0x348>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a44      	ldr	r2, [pc, #272]	; (8007490 <UART_SetConfig+0x2dc>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d125      	bne.n	80073d0 <UART_SetConfig+0x21c>
 8007384:	4b3e      	ldr	r3, [pc, #248]	; (8007480 <UART_SetConfig+0x2cc>)
 8007386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800738a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800738e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007392:	d017      	beq.n	80073c4 <UART_SetConfig+0x210>
 8007394:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007398:	d817      	bhi.n	80073ca <UART_SetConfig+0x216>
 800739a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800739e:	d00b      	beq.n	80073b8 <UART_SetConfig+0x204>
 80073a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073a4:	d811      	bhi.n	80073ca <UART_SetConfig+0x216>
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <UART_SetConfig+0x1fe>
 80073aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ae:	d006      	beq.n	80073be <UART_SetConfig+0x20a>
 80073b0:	e00b      	b.n	80073ca <UART_SetConfig+0x216>
 80073b2:	2300      	movs	r3, #0
 80073b4:	77fb      	strb	r3, [r7, #31]
 80073b6:	e0a1      	b.n	80074fc <UART_SetConfig+0x348>
 80073b8:	2302      	movs	r3, #2
 80073ba:	77fb      	strb	r3, [r7, #31]
 80073bc:	e09e      	b.n	80074fc <UART_SetConfig+0x348>
 80073be:	2304      	movs	r3, #4
 80073c0:	77fb      	strb	r3, [r7, #31]
 80073c2:	e09b      	b.n	80074fc <UART_SetConfig+0x348>
 80073c4:	2308      	movs	r3, #8
 80073c6:	77fb      	strb	r3, [r7, #31]
 80073c8:	e098      	b.n	80074fc <UART_SetConfig+0x348>
 80073ca:	2310      	movs	r3, #16
 80073cc:	77fb      	strb	r3, [r7, #31]
 80073ce:	e095      	b.n	80074fc <UART_SetConfig+0x348>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a2f      	ldr	r2, [pc, #188]	; (8007494 <UART_SetConfig+0x2e0>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d125      	bne.n	8007426 <UART_SetConfig+0x272>
 80073da:	4b29      	ldr	r3, [pc, #164]	; (8007480 <UART_SetConfig+0x2cc>)
 80073dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80073e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073e8:	d017      	beq.n	800741a <UART_SetConfig+0x266>
 80073ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073ee:	d817      	bhi.n	8007420 <UART_SetConfig+0x26c>
 80073f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073f4:	d00b      	beq.n	800740e <UART_SetConfig+0x25a>
 80073f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073fa:	d811      	bhi.n	8007420 <UART_SetConfig+0x26c>
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d003      	beq.n	8007408 <UART_SetConfig+0x254>
 8007400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007404:	d006      	beq.n	8007414 <UART_SetConfig+0x260>
 8007406:	e00b      	b.n	8007420 <UART_SetConfig+0x26c>
 8007408:	2301      	movs	r3, #1
 800740a:	77fb      	strb	r3, [r7, #31]
 800740c:	e076      	b.n	80074fc <UART_SetConfig+0x348>
 800740e:	2302      	movs	r3, #2
 8007410:	77fb      	strb	r3, [r7, #31]
 8007412:	e073      	b.n	80074fc <UART_SetConfig+0x348>
 8007414:	2304      	movs	r3, #4
 8007416:	77fb      	strb	r3, [r7, #31]
 8007418:	e070      	b.n	80074fc <UART_SetConfig+0x348>
 800741a:	2308      	movs	r3, #8
 800741c:	77fb      	strb	r3, [r7, #31]
 800741e:	e06d      	b.n	80074fc <UART_SetConfig+0x348>
 8007420:	2310      	movs	r3, #16
 8007422:	77fb      	strb	r3, [r7, #31]
 8007424:	e06a      	b.n	80074fc <UART_SetConfig+0x348>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a1b      	ldr	r2, [pc, #108]	; (8007498 <UART_SetConfig+0x2e4>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d138      	bne.n	80074a2 <UART_SetConfig+0x2ee>
 8007430:	4b13      	ldr	r3, [pc, #76]	; (8007480 <UART_SetConfig+0x2cc>)
 8007432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007436:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800743a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800743e:	d017      	beq.n	8007470 <UART_SetConfig+0x2bc>
 8007440:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007444:	d82a      	bhi.n	800749c <UART_SetConfig+0x2e8>
 8007446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800744a:	d00b      	beq.n	8007464 <UART_SetConfig+0x2b0>
 800744c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007450:	d824      	bhi.n	800749c <UART_SetConfig+0x2e8>
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <UART_SetConfig+0x2aa>
 8007456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800745a:	d006      	beq.n	800746a <UART_SetConfig+0x2b6>
 800745c:	e01e      	b.n	800749c <UART_SetConfig+0x2e8>
 800745e:	2300      	movs	r3, #0
 8007460:	77fb      	strb	r3, [r7, #31]
 8007462:	e04b      	b.n	80074fc <UART_SetConfig+0x348>
 8007464:	2302      	movs	r3, #2
 8007466:	77fb      	strb	r3, [r7, #31]
 8007468:	e048      	b.n	80074fc <UART_SetConfig+0x348>
 800746a:	2304      	movs	r3, #4
 800746c:	77fb      	strb	r3, [r7, #31]
 800746e:	e045      	b.n	80074fc <UART_SetConfig+0x348>
 8007470:	2308      	movs	r3, #8
 8007472:	77fb      	strb	r3, [r7, #31]
 8007474:	e042      	b.n	80074fc <UART_SetConfig+0x348>
 8007476:	bf00      	nop
 8007478:	efff69f3 	.word	0xefff69f3
 800747c:	40011000 	.word	0x40011000
 8007480:	40023800 	.word	0x40023800
 8007484:	40004400 	.word	0x40004400
 8007488:	40004800 	.word	0x40004800
 800748c:	40004c00 	.word	0x40004c00
 8007490:	40005000 	.word	0x40005000
 8007494:	40011400 	.word	0x40011400
 8007498:	40007800 	.word	0x40007800
 800749c:	2310      	movs	r3, #16
 800749e:	77fb      	strb	r3, [r7, #31]
 80074a0:	e02c      	b.n	80074fc <UART_SetConfig+0x348>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a72      	ldr	r2, [pc, #456]	; (8007670 <UART_SetConfig+0x4bc>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d125      	bne.n	80074f8 <UART_SetConfig+0x344>
 80074ac:	4b71      	ldr	r3, [pc, #452]	; (8007674 <UART_SetConfig+0x4c0>)
 80074ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80074b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80074ba:	d017      	beq.n	80074ec <UART_SetConfig+0x338>
 80074bc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80074c0:	d817      	bhi.n	80074f2 <UART_SetConfig+0x33e>
 80074c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074c6:	d00b      	beq.n	80074e0 <UART_SetConfig+0x32c>
 80074c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074cc:	d811      	bhi.n	80074f2 <UART_SetConfig+0x33e>
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d003      	beq.n	80074da <UART_SetConfig+0x326>
 80074d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074d6:	d006      	beq.n	80074e6 <UART_SetConfig+0x332>
 80074d8:	e00b      	b.n	80074f2 <UART_SetConfig+0x33e>
 80074da:	2300      	movs	r3, #0
 80074dc:	77fb      	strb	r3, [r7, #31]
 80074de:	e00d      	b.n	80074fc <UART_SetConfig+0x348>
 80074e0:	2302      	movs	r3, #2
 80074e2:	77fb      	strb	r3, [r7, #31]
 80074e4:	e00a      	b.n	80074fc <UART_SetConfig+0x348>
 80074e6:	2304      	movs	r3, #4
 80074e8:	77fb      	strb	r3, [r7, #31]
 80074ea:	e007      	b.n	80074fc <UART_SetConfig+0x348>
 80074ec:	2308      	movs	r3, #8
 80074ee:	77fb      	strb	r3, [r7, #31]
 80074f0:	e004      	b.n	80074fc <UART_SetConfig+0x348>
 80074f2:	2310      	movs	r3, #16
 80074f4:	77fb      	strb	r3, [r7, #31]
 80074f6:	e001      	b.n	80074fc <UART_SetConfig+0x348>
 80074f8:	2310      	movs	r3, #16
 80074fa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	69db      	ldr	r3, [r3, #28]
 8007500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007504:	d15b      	bne.n	80075be <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007506:	7ffb      	ldrb	r3, [r7, #31]
 8007508:	2b08      	cmp	r3, #8
 800750a:	d828      	bhi.n	800755e <UART_SetConfig+0x3aa>
 800750c:	a201      	add	r2, pc, #4	; (adr r2, 8007514 <UART_SetConfig+0x360>)
 800750e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007512:	bf00      	nop
 8007514:	08007539 	.word	0x08007539
 8007518:	08007541 	.word	0x08007541
 800751c:	08007549 	.word	0x08007549
 8007520:	0800755f 	.word	0x0800755f
 8007524:	0800754f 	.word	0x0800754f
 8007528:	0800755f 	.word	0x0800755f
 800752c:	0800755f 	.word	0x0800755f
 8007530:	0800755f 	.word	0x0800755f
 8007534:	08007557 	.word	0x08007557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007538:	f7fd fc8e 	bl	8004e58 <HAL_RCC_GetPCLK1Freq>
 800753c:	61b8      	str	r0, [r7, #24]
        break;
 800753e:	e013      	b.n	8007568 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007540:	f7fd fc9e 	bl	8004e80 <HAL_RCC_GetPCLK2Freq>
 8007544:	61b8      	str	r0, [r7, #24]
        break;
 8007546:	e00f      	b.n	8007568 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007548:	4b4b      	ldr	r3, [pc, #300]	; (8007678 <UART_SetConfig+0x4c4>)
 800754a:	61bb      	str	r3, [r7, #24]
        break;
 800754c:	e00c      	b.n	8007568 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800754e:	f7fd fb71 	bl	8004c34 <HAL_RCC_GetSysClockFreq>
 8007552:	61b8      	str	r0, [r7, #24]
        break;
 8007554:	e008      	b.n	8007568 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800755a:	61bb      	str	r3, [r7, #24]
        break;
 800755c:	e004      	b.n	8007568 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800755e:	2300      	movs	r3, #0
 8007560:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	77bb      	strb	r3, [r7, #30]
        break;
 8007566:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d074      	beq.n	8007658 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	005a      	lsls	r2, r3, #1
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	085b      	lsrs	r3, r3, #1
 8007578:	441a      	add	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007582:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	2b0f      	cmp	r3, #15
 8007588:	d916      	bls.n	80075b8 <UART_SetConfig+0x404>
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007590:	d212      	bcs.n	80075b8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	b29b      	uxth	r3, r3
 8007596:	f023 030f 	bic.w	r3, r3, #15
 800759a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	085b      	lsrs	r3, r3, #1
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	f003 0307 	and.w	r3, r3, #7
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	89fb      	ldrh	r3, [r7, #14]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	89fa      	ldrh	r2, [r7, #14]
 80075b4:	60da      	str	r2, [r3, #12]
 80075b6:	e04f      	b.n	8007658 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	77bb      	strb	r3, [r7, #30]
 80075bc:	e04c      	b.n	8007658 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80075be:	7ffb      	ldrb	r3, [r7, #31]
 80075c0:	2b08      	cmp	r3, #8
 80075c2:	d828      	bhi.n	8007616 <UART_SetConfig+0x462>
 80075c4:	a201      	add	r2, pc, #4	; (adr r2, 80075cc <UART_SetConfig+0x418>)
 80075c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ca:	bf00      	nop
 80075cc:	080075f1 	.word	0x080075f1
 80075d0:	080075f9 	.word	0x080075f9
 80075d4:	08007601 	.word	0x08007601
 80075d8:	08007617 	.word	0x08007617
 80075dc:	08007607 	.word	0x08007607
 80075e0:	08007617 	.word	0x08007617
 80075e4:	08007617 	.word	0x08007617
 80075e8:	08007617 	.word	0x08007617
 80075ec:	0800760f 	.word	0x0800760f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075f0:	f7fd fc32 	bl	8004e58 <HAL_RCC_GetPCLK1Freq>
 80075f4:	61b8      	str	r0, [r7, #24]
        break;
 80075f6:	e013      	b.n	8007620 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075f8:	f7fd fc42 	bl	8004e80 <HAL_RCC_GetPCLK2Freq>
 80075fc:	61b8      	str	r0, [r7, #24]
        break;
 80075fe:	e00f      	b.n	8007620 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007600:	4b1d      	ldr	r3, [pc, #116]	; (8007678 <UART_SetConfig+0x4c4>)
 8007602:	61bb      	str	r3, [r7, #24]
        break;
 8007604:	e00c      	b.n	8007620 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007606:	f7fd fb15 	bl	8004c34 <HAL_RCC_GetSysClockFreq>
 800760a:	61b8      	str	r0, [r7, #24]
        break;
 800760c:	e008      	b.n	8007620 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800760e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007612:	61bb      	str	r3, [r7, #24]
        break;
 8007614:	e004      	b.n	8007620 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007616:	2300      	movs	r3, #0
 8007618:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	77bb      	strb	r3, [r7, #30]
        break;
 800761e:	bf00      	nop
    }

    if (pclk != 0U)
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d018      	beq.n	8007658 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	085a      	lsrs	r2, r3, #1
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	441a      	add	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	fbb2 f3f3 	udiv	r3, r2, r3
 8007638:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	2b0f      	cmp	r3, #15
 800763e:	d909      	bls.n	8007654 <UART_SetConfig+0x4a0>
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007646:	d205      	bcs.n	8007654 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	b29a      	uxth	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	60da      	str	r2, [r3, #12]
 8007652:	e001      	b.n	8007658 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007664:	7fbb      	ldrb	r3, [r7, #30]
}
 8007666:	4618      	mov	r0, r3
 8007668:	3720      	adds	r7, #32
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	40007c00 	.word	0x40007c00
 8007674:	40023800 	.word	0x40023800
 8007678:	00f42400 	.word	0x00f42400

0800767c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007688:	f003 0301 	and.w	r3, r3, #1
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00a      	beq.n	80076a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076aa:	f003 0302 	and.w	r3, r3, #2
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00a      	beq.n	80076c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	430a      	orrs	r2, r1
 80076c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076cc:	f003 0304 	and.w	r3, r3, #4
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00a      	beq.n	80076ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	430a      	orrs	r2, r1
 80076e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ee:	f003 0308 	and.w	r3, r3, #8
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00a      	beq.n	800770c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	430a      	orrs	r2, r1
 800770a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007710:	f003 0310 	and.w	r3, r3, #16
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00a      	beq.n	800772e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	430a      	orrs	r2, r1
 800772c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007732:	f003 0320 	and.w	r3, r3, #32
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00a      	beq.n	8007750 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	430a      	orrs	r2, r1
 800774e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007758:	2b00      	cmp	r3, #0
 800775a:	d01a      	beq.n	8007792 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	430a      	orrs	r2, r1
 8007770:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800777a:	d10a      	bne.n	8007792 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	430a      	orrs	r2, r1
 8007790:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00a      	beq.n	80077b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	430a      	orrs	r2, r1
 80077b2:	605a      	str	r2, [r3, #4]
  }
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af02      	add	r7, sp, #8
 80077c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80077d0:	f7fb fde8 	bl	80033a4 <HAL_GetTick>
 80077d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0308 	and.w	r3, r3, #8
 80077e0:	2b08      	cmp	r3, #8
 80077e2:	d10e      	bne.n	8007802 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077e8:	9300      	str	r3, [sp, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f831 	bl	800785a <UART_WaitOnFlagUntilTimeout>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d001      	beq.n	8007802 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e027      	b.n	8007852 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 0304 	and.w	r3, r3, #4
 800780c:	2b04      	cmp	r3, #4
 800780e:	d10e      	bne.n	800782e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007810:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f81b 	bl	800785a <UART_WaitOnFlagUntilTimeout>
 8007824:	4603      	mov	r3, r0
 8007826:	2b00      	cmp	r3, #0
 8007828:	d001      	beq.n	800782e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e011      	b.n	8007852 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2220      	movs	r2, #32
 8007832:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2220      	movs	r2, #32
 8007838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b09c      	sub	sp, #112	; 0x70
 800785e:	af00      	add	r7, sp, #0
 8007860:	60f8      	str	r0, [r7, #12]
 8007862:	60b9      	str	r1, [r7, #8]
 8007864:	603b      	str	r3, [r7, #0]
 8007866:	4613      	mov	r3, r2
 8007868:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800786a:	e0a7      	b.n	80079bc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800786c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800786e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007872:	f000 80a3 	beq.w	80079bc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007876:	f7fb fd95 	bl	80033a4 <HAL_GetTick>
 800787a:	4602      	mov	r2, r0
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007882:	429a      	cmp	r2, r3
 8007884:	d302      	bcc.n	800788c <UART_WaitOnFlagUntilTimeout+0x32>
 8007886:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007888:	2b00      	cmp	r3, #0
 800788a:	d13f      	bne.n	800790c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007894:	e853 3f00 	ldrex	r3, [r3]
 8007898:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800789a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800789c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078a0:	667b      	str	r3, [r7, #100]	; 0x64
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	461a      	mov	r2, r3
 80078a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078ac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80078b2:	e841 2300 	strex	r3, r2, [r1]
 80078b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80078b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1e6      	bne.n	800788c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	3308      	adds	r3, #8
 80078c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078c8:	e853 3f00 	ldrex	r3, [r3]
 80078cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80078ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d0:	f023 0301 	bic.w	r3, r3, #1
 80078d4:	663b      	str	r3, [r7, #96]	; 0x60
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3308      	adds	r3, #8
 80078dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078de:	64ba      	str	r2, [r7, #72]	; 0x48
 80078e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80078e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078e6:	e841 2300 	strex	r3, r2, [r1]
 80078ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80078ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1e5      	bne.n	80078be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2220      	movs	r2, #32
 80078f6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2220      	movs	r2, #32
 80078fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	e068      	b.n	80079de <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0304 	and.w	r3, r3, #4
 8007916:	2b00      	cmp	r3, #0
 8007918:	d050      	beq.n	80079bc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007924:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007928:	d148      	bne.n	80079bc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007932:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793c:	e853 3f00 	ldrex	r3, [r3]
 8007940:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007944:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007948:	66fb      	str	r3, [r7, #108]	; 0x6c
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007952:	637b      	str	r3, [r7, #52]	; 0x34
 8007954:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007956:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007958:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800795a:	e841 2300 	strex	r3, r2, [r1]
 800795e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1e6      	bne.n	8007934 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	3308      	adds	r3, #8
 800796c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	e853 3f00 	ldrex	r3, [r3]
 8007974:	613b      	str	r3, [r7, #16]
   return(result);
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	f023 0301 	bic.w	r3, r3, #1
 800797c:	66bb      	str	r3, [r7, #104]	; 0x68
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	3308      	adds	r3, #8
 8007984:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007986:	623a      	str	r2, [r7, #32]
 8007988:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798a:	69f9      	ldr	r1, [r7, #28]
 800798c:	6a3a      	ldr	r2, [r7, #32]
 800798e:	e841 2300 	strex	r3, r2, [r1]
 8007992:	61bb      	str	r3, [r7, #24]
   return(result);
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1e5      	bne.n	8007966 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2220      	movs	r2, #32
 800799e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2220      	movs	r2, #32
 80079a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2220      	movs	r2, #32
 80079ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2200      	movs	r2, #0
 80079b4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e010      	b.n	80079de <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	69da      	ldr	r2, [r3, #28]
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	4013      	ands	r3, r2
 80079c6:	68ba      	ldr	r2, [r7, #8]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	bf0c      	ite	eq
 80079cc:	2301      	moveq	r3, #1
 80079ce:	2300      	movne	r3, #0
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	461a      	mov	r2, r3
 80079d4:	79fb      	ldrb	r3, [r7, #7]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	f43f af48 	beq.w	800786c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3770      	adds	r7, #112	; 0x70
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
	...

080079e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b096      	sub	sp, #88	; 0x58
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	4613      	mov	r3, r2
 80079f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	88fa      	ldrh	r2, [r7, #6]
 8007a00:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2222      	movs	r2, #34	; 0x22
 8007a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d028      	beq.n	8007a6e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a20:	4a3e      	ldr	r2, [pc, #248]	; (8007b1c <UART_Start_Receive_DMA+0x134>)
 8007a22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a28:	4a3d      	ldr	r2, [pc, #244]	; (8007b20 <UART_Start_Receive_DMA+0x138>)
 8007a2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a30:	4a3c      	ldr	r2, [pc, #240]	; (8007b24 <UART_Start_Receive_DMA+0x13c>)
 8007a32:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a38:	2200      	movs	r2, #0
 8007a3a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3324      	adds	r3, #36	; 0x24
 8007a46:	4619      	mov	r1, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	88fb      	ldrh	r3, [r7, #6]
 8007a50:	f7fb fe68 	bl	8003724 <HAL_DMA_Start_IT>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d009      	beq.n	8007a6e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2210      	movs	r2, #16
 8007a5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2220      	movs	r2, #32
 8007a66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e051      	b.n	8007b12 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d018      	beq.n	8007aa8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a7e:	e853 3f00 	ldrex	r3, [r3]
 8007a82:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a8a:	657b      	str	r3, [r7, #84]	; 0x54
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	461a      	mov	r2, r3
 8007a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a94:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a96:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a98:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a9c:	e841 2300 	strex	r3, r2, [r1]
 8007aa0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1e6      	bne.n	8007a76 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3308      	adds	r3, #8
 8007aae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab2:	e853 3f00 	ldrex	r3, [r3]
 8007ab6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aba:	f043 0301 	orr.w	r3, r3, #1
 8007abe:	653b      	str	r3, [r7, #80]	; 0x50
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3308      	adds	r3, #8
 8007ac6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ac8:	637a      	str	r2, [r7, #52]	; 0x34
 8007aca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007acc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ace:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ad0:	e841 2300 	strex	r3, r2, [r1]
 8007ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1e5      	bne.n	8007aa8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	3308      	adds	r3, #8
 8007ae2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	e853 3f00 	ldrex	r3, [r3]
 8007aea:	613b      	str	r3, [r7, #16]
   return(result);
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007af2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	3308      	adds	r3, #8
 8007afa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007afc:	623a      	str	r2, [r7, #32]
 8007afe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b00:	69f9      	ldr	r1, [r7, #28]
 8007b02:	6a3a      	ldr	r2, [r7, #32]
 8007b04:	e841 2300 	strex	r3, r2, [r1]
 8007b08:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d1e5      	bne.n	8007adc <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3758      	adds	r7, #88	; 0x58
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	08007cef 	.word	0x08007cef
 8007b20:	08007e17 	.word	0x08007e17
 8007b24:	08007e55 	.word	0x08007e55

08007b28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b089      	sub	sp, #36	; 0x24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	e853 3f00 	ldrex	r3, [r3]
 8007b3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007b44:	61fb      	str	r3, [r7, #28]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	69fb      	ldr	r3, [r7, #28]
 8007b4e:	61bb      	str	r3, [r7, #24]
 8007b50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b52:	6979      	ldr	r1, [r7, #20]
 8007b54:	69ba      	ldr	r2, [r7, #24]
 8007b56:	e841 2300 	strex	r3, r2, [r1]
 8007b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1e6      	bne.n	8007b30 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2220      	movs	r2, #32
 8007b66:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8007b68:	bf00      	nop
 8007b6a:	3724      	adds	r7, #36	; 0x24
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b095      	sub	sp, #84	; 0x54
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b84:	e853 3f00 	ldrex	r3, [r3]
 8007b88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	461a      	mov	r2, r3
 8007b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b9a:	643b      	str	r3, [r7, #64]	; 0x40
 8007b9c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ba0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ba2:	e841 2300 	strex	r3, r2, [r1]
 8007ba6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1e6      	bne.n	8007b7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	3308      	adds	r3, #8
 8007bb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb6:	6a3b      	ldr	r3, [r7, #32]
 8007bb8:	e853 3f00 	ldrex	r3, [r3]
 8007bbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	f023 0301 	bic.w	r3, r3, #1
 8007bc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	3308      	adds	r3, #8
 8007bcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bce:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007bd0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bd6:	e841 2300 	strex	r3, r2, [r1]
 8007bda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1e5      	bne.n	8007bae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d118      	bne.n	8007c1c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	e853 3f00 	ldrex	r3, [r3]
 8007bf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	f023 0310 	bic.w	r3, r3, #16
 8007bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	461a      	mov	r2, r3
 8007c06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c08:	61bb      	str	r3, [r7, #24]
 8007c0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0c:	6979      	ldr	r1, [r7, #20]
 8007c0e:	69ba      	ldr	r2, [r7, #24]
 8007c10:	e841 2300 	strex	r3, r2, [r1]
 8007c14:	613b      	str	r3, [r7, #16]
   return(result);
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d1e6      	bne.n	8007bea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2220      	movs	r2, #32
 8007c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007c30:	bf00      	nop
 8007c32:	3754      	adds	r7, #84	; 0x54
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b090      	sub	sp, #64	; 0x40
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c48:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	69db      	ldr	r3, [r3, #28]
 8007c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c52:	d037      	beq.n	8007cc4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8007c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c56:	2200      	movs	r2, #0
 8007c58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	3308      	adds	r3, #8
 8007c62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c66:	e853 3f00 	ldrex	r3, [r3]
 8007c6a:	623b      	str	r3, [r7, #32]
   return(result);
 8007c6c:	6a3b      	ldr	r3, [r7, #32]
 8007c6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c72:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3308      	adds	r3, #8
 8007c7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c7c:	633a      	str	r2, [r7, #48]	; 0x30
 8007c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c84:	e841 2300 	strex	r3, r2, [r1]
 8007c88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1e5      	bne.n	8007c5c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	e853 3f00 	ldrex	r3, [r3]
 8007c9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cae:	61fb      	str	r3, [r7, #28]
 8007cb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb2:	69b9      	ldr	r1, [r7, #24]
 8007cb4:	69fa      	ldr	r2, [r7, #28]
 8007cb6:	e841 2300 	strex	r3, r2, [r1]
 8007cba:	617b      	str	r3, [r7, #20]
   return(result);
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1e6      	bne.n	8007c90 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007cc2:	e002      	b.n	8007cca <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8007cc4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007cc6:	f7ff fa2d 	bl	8007124 <HAL_UART_TxCpltCallback>
}
 8007cca:	bf00      	nop
 8007ccc:	3740      	adds	r7, #64	; 0x40
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b084      	sub	sp, #16
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cde:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f7ff fa29 	bl	8007138 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ce6:	bf00      	nop
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}

08007cee <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007cee:	b580      	push	{r7, lr}
 8007cf0:	b09c      	sub	sp, #112	; 0x70
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfa:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	69db      	ldr	r3, [r3, #28]
 8007d00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d04:	d071      	beq.n	8007dea <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8007d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d16:	e853 3f00 	ldrex	r3, [r3]
 8007d1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d22:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	461a      	mov	r2, r3
 8007d2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d2e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d34:	e841 2300 	strex	r3, r2, [r1]
 8007d38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d1e6      	bne.n	8007d0e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	3308      	adds	r3, #8
 8007d46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4a:	e853 3f00 	ldrex	r3, [r3]
 8007d4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d52:	f023 0301 	bic.w	r3, r3, #1
 8007d56:	667b      	str	r3, [r7, #100]	; 0x64
 8007d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	3308      	adds	r3, #8
 8007d5e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007d60:	647a      	str	r2, [r7, #68]	; 0x44
 8007d62:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d68:	e841 2300 	strex	r3, r2, [r1]
 8007d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1e5      	bne.n	8007d40 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	3308      	adds	r3, #8
 8007d7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7e:	e853 3f00 	ldrex	r3, [r3]
 8007d82:	623b      	str	r3, [r7, #32]
   return(result);
 8007d84:	6a3b      	ldr	r3, [r7, #32]
 8007d86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d8a:	663b      	str	r3, [r7, #96]	; 0x60
 8007d8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	3308      	adds	r3, #8
 8007d92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d94:	633a      	str	r2, [r7, #48]	; 0x30
 8007d96:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d9c:	e841 2300 	strex	r3, r2, [r1]
 8007da0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1e5      	bne.n	8007d74 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007daa:	2220      	movs	r2, #32
 8007dac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d118      	bne.n	8007dea <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	e853 3f00 	ldrex	r3, [r3]
 8007dc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f023 0310 	bic.w	r3, r3, #16
 8007dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dd6:	61fb      	str	r3, [r7, #28]
 8007dd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dda:	69b9      	ldr	r1, [r7, #24]
 8007ddc:	69fa      	ldr	r2, [r7, #28]
 8007dde:	e841 2300 	strex	r3, r2, [r1]
 8007de2:	617b      	str	r3, [r7, #20]
   return(result);
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d1e6      	bne.n	8007db8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dec:	2200      	movs	r2, #0
 8007dee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d107      	bne.n	8007e08 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dfa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007dfe:	4619      	mov	r1, r3
 8007e00:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007e02:	f7ff f9c1 	bl	8007188 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e06:	e002      	b.n	8007e0e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8007e08:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007e0a:	f7ff f99f 	bl	800714c <HAL_UART_RxCpltCallback>
}
 8007e0e:	bf00      	nop
 8007e10:	3770      	adds	r7, #112	; 0x70
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}

08007e16 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e16:	b580      	push	{r7, lr}
 8007e18:	b084      	sub	sp, #16
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e22:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2201      	movs	r2, #1
 8007e28:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d109      	bne.n	8007e46 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007e38:	085b      	lsrs	r3, r3, #1
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	68f8      	ldr	r0, [r7, #12]
 8007e40:	f7ff f9a2 	bl	8007188 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e44:	e002      	b.n	8007e4c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f7ff f98a 	bl	8007160 <HAL_UART_RxHalfCpltCallback>
}
 8007e4c:	bf00      	nop
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b086      	sub	sp, #24
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e60:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e66:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e6e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e7a:	2b80      	cmp	r3, #128	; 0x80
 8007e7c:	d109      	bne.n	8007e92 <UART_DMAError+0x3e>
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	2b21      	cmp	r3, #33	; 0x21
 8007e82:	d106      	bne.n	8007e92 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007e8c:	6978      	ldr	r0, [r7, #20]
 8007e8e:	f7ff fe4b 	bl	8007b28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e9c:	2b40      	cmp	r3, #64	; 0x40
 8007e9e:	d109      	bne.n	8007eb4 <UART_DMAError+0x60>
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2b22      	cmp	r3, #34	; 0x22
 8007ea4:	d106      	bne.n	8007eb4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007eae:	6978      	ldr	r0, [r7, #20]
 8007eb0:	f7ff fe60 	bl	8007b74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eba:	f043 0210 	orr.w	r2, r3, #16
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ec4:	6978      	ldr	r0, [r7, #20]
 8007ec6:	f7ff f955 	bl	8007174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eca:	bf00      	nop
 8007ecc:	3718      	adds	r7, #24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b084      	sub	sp, #16
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ede:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f7ff f93f 	bl	8007174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ef6:	bf00      	nop
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b088      	sub	sp, #32
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	e853 3f00 	ldrex	r3, [r3]
 8007f12:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f1a:	61fb      	str	r3, [r7, #28]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	461a      	mov	r2, r3
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	61bb      	str	r3, [r7, #24]
 8007f26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f28:	6979      	ldr	r1, [r7, #20]
 8007f2a:	69ba      	ldr	r2, [r7, #24]
 8007f2c:	e841 2300 	strex	r3, r2, [r1]
 8007f30:	613b      	str	r3, [r7, #16]
   return(result);
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1e6      	bne.n	8007f06 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2220      	movs	r2, #32
 8007f3c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f7ff f8ed 	bl	8007124 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f4a:	bf00      	nop
 8007f4c:	3720      	adds	r7, #32
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
	...

08007f54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f54:	b084      	sub	sp, #16
 8007f56:	b580      	push	{r7, lr}
 8007f58:	b084      	sub	sp, #16
 8007f5a:	af00      	add	r7, sp, #0
 8007f5c:	6078      	str	r0, [r7, #4]
 8007f5e:	f107 001c 	add.w	r0, r7, #28
 8007f62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d120      	bne.n	8007fae <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	68da      	ldr	r2, [r3, #12]
 8007f7c:	4b20      	ldr	r3, [pc, #128]	; (8008000 <USB_CoreInit+0xac>)
 8007f7e:	4013      	ands	r3, r2
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d105      	bne.n	8007fa2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fa96 	bl	80084d4 <USB_CoreReset>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	73fb      	strb	r3, [r7, #15]
 8007fac:	e010      	b.n	8007fd0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fa8a 	bl	80084d4 <USB_CoreReset>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d10b      	bne.n	8007fee <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	f043 0206 	orr.w	r2, r3, #6
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f043 0220 	orr.w	r2, r3, #32
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ffa:	b004      	add	sp, #16
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	ffbdffbf 	.word	0xffbdffbf

08008004 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	f023 0201 	bic.w	r2, r3, #1
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b084      	sub	sp, #16
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
 800802e:	460b      	mov	r3, r1
 8008030:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008032:	2300      	movs	r3, #0
 8008034:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008042:	78fb      	ldrb	r3, [r7, #3]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d115      	bne.n	8008074 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008054:	2001      	movs	r0, #1
 8008056:	f7fb f9b1 	bl	80033bc <HAL_Delay>
      ms++;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	3301      	adds	r3, #1
 800805e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 fa29 	bl	80084b8 <USB_GetMode>
 8008066:	4603      	mov	r3, r0
 8008068:	2b01      	cmp	r3, #1
 800806a:	d01e      	beq.n	80080aa <USB_SetCurrentMode+0x84>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2b31      	cmp	r3, #49	; 0x31
 8008070:	d9f0      	bls.n	8008054 <USB_SetCurrentMode+0x2e>
 8008072:	e01a      	b.n	80080aa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008074:	78fb      	ldrb	r3, [r7, #3]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d115      	bne.n	80080a6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008086:	2001      	movs	r0, #1
 8008088:	f7fb f998 	bl	80033bc <HAL_Delay>
      ms++;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	3301      	adds	r3, #1
 8008090:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 fa10 	bl	80084b8 <USB_GetMode>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d005      	beq.n	80080aa <USB_SetCurrentMode+0x84>
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2b31      	cmp	r3, #49	; 0x31
 80080a2:	d9f0      	bls.n	8008086 <USB_SetCurrentMode+0x60>
 80080a4:	e001      	b.n	80080aa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	e005      	b.n	80080b6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2b32      	cmp	r3, #50	; 0x32
 80080ae:	d101      	bne.n	80080b4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80080b0:	2301      	movs	r3, #1
 80080b2:	e000      	b.n	80080b6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
	...

080080c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080c0:	b084      	sub	sp, #16
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b086      	sub	sp, #24
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	6078      	str	r0, [r7, #4]
 80080ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80080ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80080d2:	2300      	movs	r3, #0
 80080d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80080da:	2300      	movs	r3, #0
 80080dc:	613b      	str	r3, [r7, #16]
 80080de:	e009      	b.n	80080f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	3340      	adds	r3, #64	; 0x40
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	4413      	add	r3, r2
 80080ea:	2200      	movs	r2, #0
 80080ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	3301      	adds	r3, #1
 80080f2:	613b      	str	r3, [r7, #16]
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	2b0e      	cmp	r3, #14
 80080f8:	d9f2      	bls.n	80080e0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80080fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d11c      	bne.n	800813a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800810e:	f043 0302 	orr.w	r3, r3, #2
 8008112:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008118:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	601a      	str	r2, [r3, #0]
 8008138:	e005      	b.n	8008146 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800814c:	461a      	mov	r2, r3
 800814e:	2300      	movs	r3, #0
 8008150:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008158:	4619      	mov	r1, r3
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008160:	461a      	mov	r2, r3
 8008162:	680b      	ldr	r3, [r1, #0]
 8008164:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008168:	2b01      	cmp	r3, #1
 800816a:	d10c      	bne.n	8008186 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800816c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800816e:	2b00      	cmp	r3, #0
 8008170:	d104      	bne.n	800817c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008172:	2100      	movs	r1, #0
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f965 	bl	8008444 <USB_SetDevSpeed>
 800817a:	e008      	b.n	800818e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800817c:	2101      	movs	r1, #1
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f960 	bl	8008444 <USB_SetDevSpeed>
 8008184:	e003      	b.n	800818e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008186:	2103      	movs	r1, #3
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f95b 	bl	8008444 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800818e:	2110      	movs	r1, #16
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f8f3 	bl	800837c <USB_FlushTxFifo>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d001      	beq.n	80081a0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f91f 	bl	80083e4 <USB_FlushRxFifo>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d001      	beq.n	80081b0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081b6:	461a      	mov	r2, r3
 80081b8:	2300      	movs	r3, #0
 80081ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c2:	461a      	mov	r2, r3
 80081c4:	2300      	movs	r3, #0
 80081c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ce:	461a      	mov	r2, r3
 80081d0:	2300      	movs	r3, #0
 80081d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081d4:	2300      	movs	r3, #0
 80081d6:	613b      	str	r3, [r7, #16]
 80081d8:	e043      	b.n	8008262 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081f0:	d118      	bne.n	8008224 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10a      	bne.n	800820e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	015a      	lsls	r2, r3, #5
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	4413      	add	r3, r2
 8008200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008204:	461a      	mov	r2, r3
 8008206:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800820a:	6013      	str	r3, [r2, #0]
 800820c:	e013      	b.n	8008236 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	015a      	lsls	r2, r3, #5
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	4413      	add	r3, r2
 8008216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800821a:	461a      	mov	r2, r3
 800821c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008220:	6013      	str	r3, [r2, #0]
 8008222:	e008      	b.n	8008236 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	015a      	lsls	r2, r3, #5
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	4413      	add	r3, r2
 800822c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008230:	461a      	mov	r2, r3
 8008232:	2300      	movs	r3, #0
 8008234:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	015a      	lsls	r2, r3, #5
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	4413      	add	r3, r2
 800823e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008242:	461a      	mov	r2, r3
 8008244:	2300      	movs	r3, #0
 8008246:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	015a      	lsls	r2, r3, #5
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	4413      	add	r3, r2
 8008250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008254:	461a      	mov	r2, r3
 8008256:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800825a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	3301      	adds	r3, #1
 8008260:	613b      	str	r3, [r7, #16]
 8008262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	429a      	cmp	r2, r3
 8008268:	d3b7      	bcc.n	80081da <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800826a:	2300      	movs	r3, #0
 800826c:	613b      	str	r3, [r7, #16]
 800826e:	e043      	b.n	80082f8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	4413      	add	r3, r2
 8008278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008282:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008286:	d118      	bne.n	80082ba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10a      	bne.n	80082a4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	4413      	add	r3, r2
 8008296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800829a:	461a      	mov	r2, r3
 800829c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082a0:	6013      	str	r3, [r2, #0]
 80082a2:	e013      	b.n	80082cc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b0:	461a      	mov	r2, r3
 80082b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80082b6:	6013      	str	r3, [r2, #0]
 80082b8:	e008      	b.n	80082cc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c6:	461a      	mov	r2, r3
 80082c8:	2300      	movs	r3, #0
 80082ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	015a      	lsls	r2, r3, #5
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	4413      	add	r3, r2
 80082d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d8:	461a      	mov	r2, r3
 80082da:	2300      	movs	r3, #0
 80082dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	015a      	lsls	r2, r3, #5
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	4413      	add	r3, r2
 80082e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ea:	461a      	mov	r2, r3
 80082ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80082f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	3301      	adds	r3, #1
 80082f6:	613b      	str	r3, [r7, #16]
 80082f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fa:	693a      	ldr	r2, [r7, #16]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d3b7      	bcc.n	8008270 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	68fa      	ldr	r2, [r7, #12]
 800830a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800830e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008312:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008320:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008324:	2b00      	cmp	r3, #0
 8008326:	d105      	bne.n	8008334 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	f043 0210 	orr.w	r2, r3, #16
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	699a      	ldr	r2, [r3, #24]
 8008338:	4b0e      	ldr	r3, [pc, #56]	; (8008374 <USB_DevInit+0x2b4>)
 800833a:	4313      	orrs	r3, r2
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008342:	2b00      	cmp	r3, #0
 8008344:	d005      	beq.n	8008352 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	f043 0208 	orr.w	r2, r3, #8
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008354:	2b01      	cmp	r3, #1
 8008356:	d105      	bne.n	8008364 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	699a      	ldr	r2, [r3, #24]
 800835c:	4b06      	ldr	r3, [pc, #24]	; (8008378 <USB_DevInit+0x2b8>)
 800835e:	4313      	orrs	r3, r2
 8008360:	687a      	ldr	r2, [r7, #4]
 8008362:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008364:	7dfb      	ldrb	r3, [r7, #23]
}
 8008366:	4618      	mov	r0, r3
 8008368:	3718      	adds	r7, #24
 800836a:	46bd      	mov	sp, r7
 800836c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008370:	b004      	add	sp, #16
 8008372:	4770      	bx	lr
 8008374:	803c3800 	.word	0x803c3800
 8008378:	40000004 	.word	0x40000004

0800837c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008386:	2300      	movs	r3, #0
 8008388:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	3301      	adds	r3, #1
 800838e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	4a13      	ldr	r2, [pc, #76]	; (80083e0 <USB_FlushTxFifo+0x64>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d901      	bls.n	800839c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008398:	2303      	movs	r3, #3
 800839a:	e01b      	b.n	80083d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	daf2      	bge.n	800838a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80083a4:	2300      	movs	r3, #0
 80083a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	019b      	lsls	r3, r3, #6
 80083ac:	f043 0220 	orr.w	r2, r3, #32
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	3301      	adds	r3, #1
 80083b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	4a08      	ldr	r2, [pc, #32]	; (80083e0 <USB_FlushTxFifo+0x64>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d901      	bls.n	80083c6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80083c2:	2303      	movs	r3, #3
 80083c4:	e006      	b.n	80083d4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	f003 0320 	and.w	r3, r3, #32
 80083ce:	2b20      	cmp	r3, #32
 80083d0:	d0f0      	beq.n	80083b4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr
 80083e0:	00030d40 	.word	0x00030d40

080083e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083ec:	2300      	movs	r3, #0
 80083ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	3301      	adds	r3, #1
 80083f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	4a11      	ldr	r2, [pc, #68]	; (8008440 <USB_FlushRxFifo+0x5c>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d901      	bls.n	8008402 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80083fe:	2303      	movs	r3, #3
 8008400:	e018      	b.n	8008434 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	2b00      	cmp	r3, #0
 8008408:	daf2      	bge.n	80083f0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800840a:	2300      	movs	r3, #0
 800840c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2210      	movs	r2, #16
 8008412:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	3301      	adds	r3, #1
 8008418:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	4a08      	ldr	r2, [pc, #32]	; (8008440 <USB_FlushRxFifo+0x5c>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d901      	bls.n	8008426 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	e006      	b.n	8008434 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	f003 0310 	and.w	r3, r3, #16
 800842e:	2b10      	cmp	r3, #16
 8008430:	d0f0      	beq.n	8008414 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3714      	adds	r7, #20
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr
 8008440:	00030d40 	.word	0x00030d40

08008444 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	460b      	mov	r3, r1
 800844e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	78fb      	ldrb	r3, [r7, #3]
 800845e:	68f9      	ldr	r1, [r7, #12]
 8008460:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008464:	4313      	orrs	r3, r2
 8008466:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3714      	adds	r7, #20
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr

08008476 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008476:	b480      	push	{r7}
 8008478:	b085      	sub	sp, #20
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008490:	f023 0303 	bic.w	r3, r3, #3
 8008494:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084a4:	f043 0302 	orr.w	r3, r3, #2
 80084a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3714      	adds	r7, #20
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	695b      	ldr	r3, [r3, #20]
 80084c4:	f003 0301 	and.w	r3, r3, #1
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b085      	sub	sp, #20
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084dc:	2300      	movs	r3, #0
 80084de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	3301      	adds	r3, #1
 80084e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	4a13      	ldr	r2, [pc, #76]	; (8008538 <USB_CoreReset+0x64>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d901      	bls.n	80084f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e01b      	b.n	800852a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	daf2      	bge.n	80084e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80084fa:	2300      	movs	r3, #0
 80084fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	691b      	ldr	r3, [r3, #16]
 8008502:	f043 0201 	orr.w	r2, r3, #1
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	3301      	adds	r3, #1
 800850e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	4a09      	ldr	r2, [pc, #36]	; (8008538 <USB_CoreReset+0x64>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d901      	bls.n	800851c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008518:	2303      	movs	r3, #3
 800851a:	e006      	b.n	800852a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	f003 0301 	and.w	r3, r3, #1
 8008524:	2b01      	cmp	r3, #1
 8008526:	d0f0      	beq.n	800850a <USB_CoreReset+0x36>

  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3714      	adds	r7, #20
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	00030d40 	.word	0x00030d40

0800853c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800853c:	b480      	push	{r7}
 800853e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008540:	bf00      	nop
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
	...

0800854c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008552:	f3ef 8305 	mrs	r3, IPSR
 8008556:	60bb      	str	r3, [r7, #8]
  return(result);
 8008558:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800855a:	2b00      	cmp	r3, #0
 800855c:	d10f      	bne.n	800857e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800855e:	f3ef 8310 	mrs	r3, PRIMASK
 8008562:	607b      	str	r3, [r7, #4]
  return(result);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d105      	bne.n	8008576 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800856a:	f3ef 8311 	mrs	r3, BASEPRI
 800856e:	603b      	str	r3, [r7, #0]
  return(result);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d007      	beq.n	8008586 <osKernelInitialize+0x3a>
 8008576:	4b0e      	ldr	r3, [pc, #56]	; (80085b0 <osKernelInitialize+0x64>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2b02      	cmp	r3, #2
 800857c:	d103      	bne.n	8008586 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800857e:	f06f 0305 	mvn.w	r3, #5
 8008582:	60fb      	str	r3, [r7, #12]
 8008584:	e00c      	b.n	80085a0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008586:	4b0a      	ldr	r3, [pc, #40]	; (80085b0 <osKernelInitialize+0x64>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d105      	bne.n	800859a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800858e:	4b08      	ldr	r3, [pc, #32]	; (80085b0 <osKernelInitialize+0x64>)
 8008590:	2201      	movs	r2, #1
 8008592:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008594:	2300      	movs	r3, #0
 8008596:	60fb      	str	r3, [r7, #12]
 8008598:	e002      	b.n	80085a0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800859a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800859e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80085a0:	68fb      	ldr	r3, [r7, #12]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3714      	adds	r7, #20
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	20006b30 	.word	0x20006b30

080085b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085ba:	f3ef 8305 	mrs	r3, IPSR
 80085be:	60bb      	str	r3, [r7, #8]
  return(result);
 80085c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10f      	bne.n	80085e6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085c6:	f3ef 8310 	mrs	r3, PRIMASK
 80085ca:	607b      	str	r3, [r7, #4]
  return(result);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d105      	bne.n	80085de <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80085d2:	f3ef 8311 	mrs	r3, BASEPRI
 80085d6:	603b      	str	r3, [r7, #0]
  return(result);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d007      	beq.n	80085ee <osKernelStart+0x3a>
 80085de:	4b0f      	ldr	r3, [pc, #60]	; (800861c <osKernelStart+0x68>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d103      	bne.n	80085ee <osKernelStart+0x3a>
    stat = osErrorISR;
 80085e6:	f06f 0305 	mvn.w	r3, #5
 80085ea:	60fb      	str	r3, [r7, #12]
 80085ec:	e010      	b.n	8008610 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80085ee:	4b0b      	ldr	r3, [pc, #44]	; (800861c <osKernelStart+0x68>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d109      	bne.n	800860a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80085f6:	f7ff ffa1 	bl	800853c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80085fa:	4b08      	ldr	r3, [pc, #32]	; (800861c <osKernelStart+0x68>)
 80085fc:	2202      	movs	r2, #2
 80085fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008600:	f001 f8ca 	bl	8009798 <vTaskStartScheduler>
      stat = osOK;
 8008604:	2300      	movs	r3, #0
 8008606:	60fb      	str	r3, [r7, #12]
 8008608:	e002      	b.n	8008610 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800860a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800860e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008610:	68fb      	ldr	r3, [r7, #12]
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	20006b30 	.word	0x20006b30

08008620 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008620:	b580      	push	{r7, lr}
 8008622:	b090      	sub	sp, #64	; 0x40
 8008624:	af04      	add	r7, sp, #16
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800862c:	2300      	movs	r3, #0
 800862e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008630:	f3ef 8305 	mrs	r3, IPSR
 8008634:	61fb      	str	r3, [r7, #28]
  return(result);
 8008636:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008638:	2b00      	cmp	r3, #0
 800863a:	f040 808f 	bne.w	800875c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800863e:	f3ef 8310 	mrs	r3, PRIMASK
 8008642:	61bb      	str	r3, [r7, #24]
  return(result);
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d105      	bne.n	8008656 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800864a:	f3ef 8311 	mrs	r3, BASEPRI
 800864e:	617b      	str	r3, [r7, #20]
  return(result);
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d003      	beq.n	800865e <osThreadNew+0x3e>
 8008656:	4b44      	ldr	r3, [pc, #272]	; (8008768 <osThreadNew+0x148>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	2b02      	cmp	r3, #2
 800865c:	d07e      	beq.n	800875c <osThreadNew+0x13c>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d07b      	beq.n	800875c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008664:	2380      	movs	r3, #128	; 0x80
 8008666:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008668:	2318      	movs	r3, #24
 800866a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800866c:	2300      	movs	r3, #0
 800866e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008674:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d045      	beq.n	8008708 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d002      	beq.n	800868a <osThreadNew+0x6a>
        name = attr->name;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	699b      	ldr	r3, [r3, #24]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d002      	beq.n	8008698 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869a:	2b00      	cmp	r3, #0
 800869c:	d008      	beq.n	80086b0 <osThreadNew+0x90>
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	2b38      	cmp	r3, #56	; 0x38
 80086a2:	d805      	bhi.n	80086b0 <osThreadNew+0x90>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	f003 0301 	and.w	r3, r3, #1
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d001      	beq.n	80086b4 <osThreadNew+0x94>
        return (NULL);
 80086b0:	2300      	movs	r3, #0
 80086b2:	e054      	b.n	800875e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	695b      	ldr	r3, [r3, #20]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d003      	beq.n	80086c4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	695b      	ldr	r3, [r3, #20]
 80086c0:	089b      	lsrs	r3, r3, #2
 80086c2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00e      	beq.n	80086ea <osThreadNew+0xca>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	2ba7      	cmp	r3, #167	; 0xa7
 80086d2:	d90a      	bls.n	80086ea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d006      	beq.n	80086ea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	695b      	ldr	r3, [r3, #20]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d002      	beq.n	80086ea <osThreadNew+0xca>
        mem = 1;
 80086e4:	2301      	movs	r3, #1
 80086e6:	623b      	str	r3, [r7, #32]
 80086e8:	e010      	b.n	800870c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10c      	bne.n	800870c <osThreadNew+0xec>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d108      	bne.n	800870c <osThreadNew+0xec>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d104      	bne.n	800870c <osThreadNew+0xec>
          mem = 0;
 8008702:	2300      	movs	r3, #0
 8008704:	623b      	str	r3, [r7, #32]
 8008706:	e001      	b.n	800870c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008708:	2300      	movs	r3, #0
 800870a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800870c:	6a3b      	ldr	r3, [r7, #32]
 800870e:	2b01      	cmp	r3, #1
 8008710:	d110      	bne.n	8008734 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800871a:	9202      	str	r2, [sp, #8]
 800871c:	9301      	str	r3, [sp, #4]
 800871e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008726:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f000 fe3f 	bl	80093ac <xTaskCreateStatic>
 800872e:	4603      	mov	r3, r0
 8008730:	613b      	str	r3, [r7, #16]
 8008732:	e013      	b.n	800875c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d110      	bne.n	800875c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800873a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873c:	b29a      	uxth	r2, r3
 800873e:	f107 0310 	add.w	r3, r7, #16
 8008742:	9301      	str	r3, [sp, #4]
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f000 fe90 	bl	8009472 <xTaskCreate>
 8008752:	4603      	mov	r3, r0
 8008754:	2b01      	cmp	r3, #1
 8008756:	d001      	beq.n	800875c <osThreadNew+0x13c>
          hTask = NULL;
 8008758:	2300      	movs	r3, #0
 800875a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800875c:	693b      	ldr	r3, [r7, #16]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3730      	adds	r7, #48	; 0x30
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	20006b30 	.word	0x20006b30

0800876c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800876c:	b580      	push	{r7, lr}
 800876e:	b086      	sub	sp, #24
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008774:	f3ef 8305 	mrs	r3, IPSR
 8008778:	613b      	str	r3, [r7, #16]
  return(result);
 800877a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800877c:	2b00      	cmp	r3, #0
 800877e:	d10f      	bne.n	80087a0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008780:	f3ef 8310 	mrs	r3, PRIMASK
 8008784:	60fb      	str	r3, [r7, #12]
  return(result);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d105      	bne.n	8008798 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800878c:	f3ef 8311 	mrs	r3, BASEPRI
 8008790:	60bb      	str	r3, [r7, #8]
  return(result);
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d007      	beq.n	80087a8 <osDelay+0x3c>
 8008798:	4b0a      	ldr	r3, [pc, #40]	; (80087c4 <osDelay+0x58>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b02      	cmp	r3, #2
 800879e:	d103      	bne.n	80087a8 <osDelay+0x3c>
    stat = osErrorISR;
 80087a0:	f06f 0305 	mvn.w	r3, #5
 80087a4:	617b      	str	r3, [r7, #20]
 80087a6:	e007      	b.n	80087b8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80087a8:	2300      	movs	r3, #0
 80087aa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d002      	beq.n	80087b8 <osDelay+0x4c>
      vTaskDelay(ticks);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 ffba 	bl	800972c <vTaskDelay>
    }
  }

  return (stat);
 80087b8:	697b      	ldr	r3, [r7, #20]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3718      	adds	r7, #24
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	20006b30 	.word	0x20006b30

080087c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	4a07      	ldr	r2, [pc, #28]	; (80087f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80087d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	4a06      	ldr	r2, [pc, #24]	; (80087f8 <vApplicationGetIdleTaskMemory+0x30>)
 80087de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2280      	movs	r2, #128	; 0x80
 80087e4:	601a      	str	r2, [r3, #0]
}
 80087e6:	bf00      	nop
 80087e8:	3714      	adds	r7, #20
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	20006b34 	.word	0x20006b34
 80087f8:	20006bdc 	.word	0x20006bdc

080087fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	4a07      	ldr	r2, [pc, #28]	; (8008828 <vApplicationGetTimerTaskMemory+0x2c>)
 800880c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	4a06      	ldr	r2, [pc, #24]	; (800882c <vApplicationGetTimerTaskMemory+0x30>)
 8008812:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f44f 7280 	mov.w	r2, #256	; 0x100
 800881a:	601a      	str	r2, [r3, #0]
}
 800881c:	bf00      	nop
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr
 8008828:	20006ddc 	.word	0x20006ddc
 800882c:	20006e84 	.word	0x20006e84

08008830 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008830:	b480      	push	{r7}
 8008832:	b083      	sub	sp, #12
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f103 0208 	add.w	r2, r3, #8
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008848:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f103 0208 	add.w	r2, r3, #8
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f103 0208 	add.w	r2, r3, #8
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800887e:	bf00      	nop
 8008880:	370c      	adds	r7, #12
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800888a:	b480      	push	{r7}
 800888c:	b085      	sub	sp, #20
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
 8008892:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	68fa      	ldr	r2, [r7, #12]
 800889e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	689a      	ldr	r2, [r3, #8]
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	683a      	ldr	r2, [r7, #0]
 80088ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	683a      	ldr	r2, [r7, #0]
 80088b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	1c5a      	adds	r2, r3, #1
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	601a      	str	r2, [r3, #0]
}
 80088c6:	bf00      	nop
 80088c8:	3714      	adds	r7, #20
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr

080088d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80088d2:	b480      	push	{r7}
 80088d4:	b085      	sub	sp, #20
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088e8:	d103      	bne.n	80088f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	60fb      	str	r3, [r7, #12]
 80088f0:	e00c      	b.n	800890c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	3308      	adds	r3, #8
 80088f6:	60fb      	str	r3, [r7, #12]
 80088f8:	e002      	b.n	8008900 <vListInsert+0x2e>
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	60fb      	str	r3, [r7, #12]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68ba      	ldr	r2, [r7, #8]
 8008908:	429a      	cmp	r2, r3
 800890a:	d2f6      	bcs.n	80088fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	685a      	ldr	r2, [r3, #4]
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	683a      	ldr	r2, [r7, #0]
 800891a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	683a      	ldr	r2, [r7, #0]
 8008926:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	1c5a      	adds	r2, r3, #1
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	601a      	str	r2, [r3, #0]
}
 8008938:	bf00      	nop
 800893a:	3714      	adds	r7, #20
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	691b      	ldr	r3, [r3, #16]
 8008950:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	6892      	ldr	r2, [r2, #8]
 800895a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	6852      	ldr	r2, [r2, #4]
 8008964:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	429a      	cmp	r2, r3
 800896e:	d103      	bne.n	8008978 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	689a      	ldr	r2, [r3, #8]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	1e5a      	subs	r2, r3, #1
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d10c      	bne.n	80089c6 <xQueueGenericReset+0x2e>
	__asm volatile
 80089ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b0:	b672      	cpsid	i
 80089b2:	f383 8811 	msr	BASEPRI, r3
 80089b6:	f3bf 8f6f 	isb	sy
 80089ba:	f3bf 8f4f 	dsb	sy
 80089be:	b662      	cpsie	i
 80089c0:	60bb      	str	r3, [r7, #8]
}
 80089c2:	bf00      	nop
 80089c4:	e7fe      	b.n	80089c4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80089c6:	f002 f8d1 	bl	800ab6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d2:	68f9      	ldr	r1, [r7, #12]
 80089d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80089d6:	fb01 f303 	mul.w	r3, r1, r3
 80089da:	441a      	add	r2, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681a      	ldr	r2, [r3, #0]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089f6:	3b01      	subs	r3, #1
 80089f8:	68f9      	ldr	r1, [r7, #12]
 80089fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80089fc:	fb01 f303 	mul.w	r3, r1, r3
 8008a00:	441a      	add	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	22ff      	movs	r2, #255	; 0xff
 8008a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	22ff      	movs	r2, #255	; 0xff
 8008a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d114      	bne.n	8008a46 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d01a      	beq.n	8008a5a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	3310      	adds	r3, #16
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f001 f95d 	bl	8009ce8 <xTaskRemoveFromEventList>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d012      	beq.n	8008a5a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008a34:	4b0c      	ldr	r3, [pc, #48]	; (8008a68 <xQueueGenericReset+0xd0>)
 8008a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a3a:	601a      	str	r2, [r3, #0]
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	f3bf 8f6f 	isb	sy
 8008a44:	e009      	b.n	8008a5a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	3310      	adds	r3, #16
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7ff fef0 	bl	8008830 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	3324      	adds	r3, #36	; 0x24
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7ff feeb 	bl	8008830 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008a5a:	f002 f8bb 	bl	800abd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008a5e:	2301      	movs	r3, #1
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	e000ed04 	.word	0xe000ed04

08008a6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b08e      	sub	sp, #56	; 0x38
 8008a70:	af02      	add	r7, sp, #8
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	607a      	str	r2, [r7, #4]
 8008a78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d10c      	bne.n	8008a9a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8008a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a84:	b672      	cpsid	i
 8008a86:	f383 8811 	msr	BASEPRI, r3
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	b662      	cpsie	i
 8008a94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a96:	bf00      	nop
 8008a98:	e7fe      	b.n	8008a98 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d10c      	bne.n	8008aba <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8008aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa4:	b672      	cpsid	i
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	b662      	cpsie	i
 8008ab4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ab6:	bf00      	nop
 8008ab8:	e7fe      	b.n	8008ab8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d002      	beq.n	8008ac6 <xQueueGenericCreateStatic+0x5a>
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d001      	beq.n	8008aca <xQueueGenericCreateStatic+0x5e>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e000      	b.n	8008acc <xQueueGenericCreateStatic+0x60>
 8008aca:	2300      	movs	r3, #0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10c      	bne.n	8008aea <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8008ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad4:	b672      	cpsid	i
 8008ad6:	f383 8811 	msr	BASEPRI, r3
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	f3bf 8f4f 	dsb	sy
 8008ae2:	b662      	cpsie	i
 8008ae4:	623b      	str	r3, [r7, #32]
}
 8008ae6:	bf00      	nop
 8008ae8:	e7fe      	b.n	8008ae8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d102      	bne.n	8008af6 <xQueueGenericCreateStatic+0x8a>
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d101      	bne.n	8008afa <xQueueGenericCreateStatic+0x8e>
 8008af6:	2301      	movs	r3, #1
 8008af8:	e000      	b.n	8008afc <xQueueGenericCreateStatic+0x90>
 8008afa:	2300      	movs	r3, #0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d10c      	bne.n	8008b1a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8008b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b04:	b672      	cpsid	i
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	b662      	cpsie	i
 8008b14:	61fb      	str	r3, [r7, #28]
}
 8008b16:	bf00      	nop
 8008b18:	e7fe      	b.n	8008b18 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008b1a:	2350      	movs	r3, #80	; 0x50
 8008b1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	2b50      	cmp	r3, #80	; 0x50
 8008b22:	d00c      	beq.n	8008b3e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8008b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b28:	b672      	cpsid	i
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	b662      	cpsie	i
 8008b38:	61bb      	str	r3, [r7, #24]
}
 8008b3a:	bf00      	nop
 8008b3c:	e7fe      	b.n	8008b3c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008b3e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00d      	beq.n	8008b66 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b52:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	687a      	ldr	r2, [r7, #4]
 8008b5e:	68b9      	ldr	r1, [r7, #8]
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f000 f805 	bl	8008b70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3730      	adds	r7, #48	; 0x30
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	60f8      	str	r0, [r7, #12]
 8008b78:	60b9      	str	r1, [r7, #8]
 8008b7a:	607a      	str	r2, [r7, #4]
 8008b7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d103      	bne.n	8008b8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	69ba      	ldr	r2, [r7, #24]
 8008b88:	601a      	str	r2, [r3, #0]
 8008b8a:	e002      	b.n	8008b92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008b9e:	2101      	movs	r1, #1
 8008ba0:	69b8      	ldr	r0, [r7, #24]
 8008ba2:	f7ff fef9 	bl	8008998 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	78fa      	ldrb	r2, [r7, #3]
 8008baa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008bae:	bf00      	nop
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
	...

08008bb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b08e      	sub	sp, #56	; 0x38
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
 8008bc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10c      	bne.n	8008bee <xQueueGenericSend+0x36>
	__asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd8:	b672      	cpsid	i
 8008bda:	f383 8811 	msr	BASEPRI, r3
 8008bde:	f3bf 8f6f 	isb	sy
 8008be2:	f3bf 8f4f 	dsb	sy
 8008be6:	b662      	cpsie	i
 8008be8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008bea:	bf00      	nop
 8008bec:	e7fe      	b.n	8008bec <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d103      	bne.n	8008bfc <xQueueGenericSend+0x44>
 8008bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d101      	bne.n	8008c00 <xQueueGenericSend+0x48>
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e000      	b.n	8008c02 <xQueueGenericSend+0x4a>
 8008c00:	2300      	movs	r3, #0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d10c      	bne.n	8008c20 <xQueueGenericSend+0x68>
	__asm volatile
 8008c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c0a:	b672      	cpsid	i
 8008c0c:	f383 8811 	msr	BASEPRI, r3
 8008c10:	f3bf 8f6f 	isb	sy
 8008c14:	f3bf 8f4f 	dsb	sy
 8008c18:	b662      	cpsie	i
 8008c1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008c1c:	bf00      	nop
 8008c1e:	e7fe      	b.n	8008c1e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	2b02      	cmp	r3, #2
 8008c24:	d103      	bne.n	8008c2e <xQueueGenericSend+0x76>
 8008c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d101      	bne.n	8008c32 <xQueueGenericSend+0x7a>
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e000      	b.n	8008c34 <xQueueGenericSend+0x7c>
 8008c32:	2300      	movs	r3, #0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10c      	bne.n	8008c52 <xQueueGenericSend+0x9a>
	__asm volatile
 8008c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3c:	b672      	cpsid	i
 8008c3e:	f383 8811 	msr	BASEPRI, r3
 8008c42:	f3bf 8f6f 	isb	sy
 8008c46:	f3bf 8f4f 	dsb	sy
 8008c4a:	b662      	cpsie	i
 8008c4c:	623b      	str	r3, [r7, #32]
}
 8008c4e:	bf00      	nop
 8008c50:	e7fe      	b.n	8008c50 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c52:	f001 fa3b 	bl	800a0cc <xTaskGetSchedulerState>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d102      	bne.n	8008c62 <xQueueGenericSend+0xaa>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d101      	bne.n	8008c66 <xQueueGenericSend+0xae>
 8008c62:	2301      	movs	r3, #1
 8008c64:	e000      	b.n	8008c68 <xQueueGenericSend+0xb0>
 8008c66:	2300      	movs	r3, #0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10c      	bne.n	8008c86 <xQueueGenericSend+0xce>
	__asm volatile
 8008c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c70:	b672      	cpsid	i
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	b662      	cpsie	i
 8008c80:	61fb      	str	r3, [r7, #28]
}
 8008c82:	bf00      	nop
 8008c84:	e7fe      	b.n	8008c84 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c86:	f001 ff71 	bl	800ab6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d302      	bcc.n	8008c9c <xQueueGenericSend+0xe4>
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d129      	bne.n	8008cf0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c9c:	683a      	ldr	r2, [r7, #0]
 8008c9e:	68b9      	ldr	r1, [r7, #8]
 8008ca0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ca2:	f000 fa15 	bl	80090d0 <prvCopyDataToQueue>
 8008ca6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d010      	beq.n	8008cd2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb2:	3324      	adds	r3, #36	; 0x24
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f001 f817 	bl	8009ce8 <xTaskRemoveFromEventList>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d013      	beq.n	8008ce8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008cc0:	4b3f      	ldr	r3, [pc, #252]	; (8008dc0 <xQueueGenericSend+0x208>)
 8008cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cc6:	601a      	str	r2, [r3, #0]
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	e00a      	b.n	8008ce8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d007      	beq.n	8008ce8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008cd8:	4b39      	ldr	r3, [pc, #228]	; (8008dc0 <xQueueGenericSend+0x208>)
 8008cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cde:	601a      	str	r2, [r3, #0]
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ce8:	f001 ff74 	bl	800abd4 <vPortExitCritical>
				return pdPASS;
 8008cec:	2301      	movs	r3, #1
 8008cee:	e063      	b.n	8008db8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d103      	bne.n	8008cfe <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008cf6:	f001 ff6d 	bl	800abd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	e05c      	b.n	8008db8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d106      	bne.n	8008d12 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008d04:	f107 0314 	add.w	r3, r7, #20
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f001 f87b 	bl	8009e04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d12:	f001 ff5f 	bl	800abd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d16:	f000 fdb3 	bl	8009880 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d1a:	f001 ff27 	bl	800ab6c <vPortEnterCritical>
 8008d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008d24:	b25b      	sxtb	r3, r3
 8008d26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d2a:	d103      	bne.n	8008d34 <xQueueGenericSend+0x17c>
 8008d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d3a:	b25b      	sxtb	r3, r3
 8008d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d40:	d103      	bne.n	8008d4a <xQueueGenericSend+0x192>
 8008d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d44:	2200      	movs	r2, #0
 8008d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d4a:	f001 ff43 	bl	800abd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d4e:	1d3a      	adds	r2, r7, #4
 8008d50:	f107 0314 	add.w	r3, r7, #20
 8008d54:	4611      	mov	r1, r2
 8008d56:	4618      	mov	r0, r3
 8008d58:	f001 f86a 	bl	8009e30 <xTaskCheckForTimeOut>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d124      	bne.n	8008dac <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008d62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d64:	f000 faac 	bl	80092c0 <prvIsQueueFull>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d018      	beq.n	8008da0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d70:	3310      	adds	r3, #16
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	4611      	mov	r1, r2
 8008d76:	4618      	mov	r0, r3
 8008d78:	f000 ff62 	bl	8009c40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008d7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d7e:	f000 fa37 	bl	80091f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008d82:	f000 fd8b 	bl	800989c <xTaskResumeAll>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f47f af7c 	bne.w	8008c86 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8008d8e:	4b0c      	ldr	r3, [pc, #48]	; (8008dc0 <xQueueGenericSend+0x208>)
 8008d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d94:	601a      	str	r2, [r3, #0]
 8008d96:	f3bf 8f4f 	dsb	sy
 8008d9a:	f3bf 8f6f 	isb	sy
 8008d9e:	e772      	b.n	8008c86 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008da0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008da2:	f000 fa25 	bl	80091f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008da6:	f000 fd79 	bl	800989c <xTaskResumeAll>
 8008daa:	e76c      	b.n	8008c86 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008dac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008dae:	f000 fa1f 	bl	80091f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008db2:	f000 fd73 	bl	800989c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008db6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3738      	adds	r7, #56	; 0x38
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	e000ed04 	.word	0xe000ed04

08008dc4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b08e      	sub	sp, #56	; 0x38
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]
 8008dd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10c      	bne.n	8008df6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de0:	b672      	cpsid	i
 8008de2:	f383 8811 	msr	BASEPRI, r3
 8008de6:	f3bf 8f6f 	isb	sy
 8008dea:	f3bf 8f4f 	dsb	sy
 8008dee:	b662      	cpsie	i
 8008df0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008df2:	bf00      	nop
 8008df4:	e7fe      	b.n	8008df4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d103      	bne.n	8008e04 <xQueueGenericSendFromISR+0x40>
 8008dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d101      	bne.n	8008e08 <xQueueGenericSendFromISR+0x44>
 8008e04:	2301      	movs	r3, #1
 8008e06:	e000      	b.n	8008e0a <xQueueGenericSendFromISR+0x46>
 8008e08:	2300      	movs	r3, #0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d10c      	bne.n	8008e28 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e12:	b672      	cpsid	i
 8008e14:	f383 8811 	msr	BASEPRI, r3
 8008e18:	f3bf 8f6f 	isb	sy
 8008e1c:	f3bf 8f4f 	dsb	sy
 8008e20:	b662      	cpsie	i
 8008e22:	623b      	str	r3, [r7, #32]
}
 8008e24:	bf00      	nop
 8008e26:	e7fe      	b.n	8008e26 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d103      	bne.n	8008e36 <xQueueGenericSendFromISR+0x72>
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d101      	bne.n	8008e3a <xQueueGenericSendFromISR+0x76>
 8008e36:	2301      	movs	r3, #1
 8008e38:	e000      	b.n	8008e3c <xQueueGenericSendFromISR+0x78>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d10c      	bne.n	8008e5a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8008e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e44:	b672      	cpsid	i
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	b662      	cpsie	i
 8008e54:	61fb      	str	r3, [r7, #28]
}
 8008e56:	bf00      	nop
 8008e58:	e7fe      	b.n	8008e58 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e5a:	f001 ff6f 	bl	800ad3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008e5e:	f3ef 8211 	mrs	r2, BASEPRI
 8008e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e66:	b672      	cpsid	i
 8008e68:	f383 8811 	msr	BASEPRI, r3
 8008e6c:	f3bf 8f6f 	isb	sy
 8008e70:	f3bf 8f4f 	dsb	sy
 8008e74:	b662      	cpsie	i
 8008e76:	61ba      	str	r2, [r7, #24]
 8008e78:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008e7a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d302      	bcc.n	8008e90 <xQueueGenericSendFromISR+0xcc>
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d12c      	bne.n	8008eea <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e9a:	683a      	ldr	r2, [r7, #0]
 8008e9c:	68b9      	ldr	r1, [r7, #8]
 8008e9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ea0:	f000 f916 	bl	80090d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008ea4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008ea8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008eac:	d112      	bne.n	8008ed4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d016      	beq.n	8008ee4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb8:	3324      	adds	r3, #36	; 0x24
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f000 ff14 	bl	8009ce8 <xTaskRemoveFromEventList>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d00e      	beq.n	8008ee4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00b      	beq.n	8008ee4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	601a      	str	r2, [r3, #0]
 8008ed2:	e007      	b.n	8008ee4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ed4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ed8:	3301      	adds	r3, #1
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	b25a      	sxtb	r2, r3
 8008ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008ee8:	e001      	b.n	8008eee <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008eea:	2300      	movs	r3, #0
 8008eec:	637b      	str	r3, [r7, #52]	; 0x34
 8008eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008ef8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3738      	adds	r7, #56	; 0x38
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b08c      	sub	sp, #48	; 0x30
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008f10:	2300      	movs	r3, #0
 8008f12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d10c      	bne.n	8008f38 <xQueueReceive+0x34>
	__asm volatile
 8008f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f22:	b672      	cpsid	i
 8008f24:	f383 8811 	msr	BASEPRI, r3
 8008f28:	f3bf 8f6f 	isb	sy
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	b662      	cpsie	i
 8008f32:	623b      	str	r3, [r7, #32]
}
 8008f34:	bf00      	nop
 8008f36:	e7fe      	b.n	8008f36 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d103      	bne.n	8008f46 <xQueueReceive+0x42>
 8008f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d101      	bne.n	8008f4a <xQueueReceive+0x46>
 8008f46:	2301      	movs	r3, #1
 8008f48:	e000      	b.n	8008f4c <xQueueReceive+0x48>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d10c      	bne.n	8008f6a <xQueueReceive+0x66>
	__asm volatile
 8008f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f54:	b672      	cpsid	i
 8008f56:	f383 8811 	msr	BASEPRI, r3
 8008f5a:	f3bf 8f6f 	isb	sy
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	b662      	cpsie	i
 8008f64:	61fb      	str	r3, [r7, #28]
}
 8008f66:	bf00      	nop
 8008f68:	e7fe      	b.n	8008f68 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f6a:	f001 f8af 	bl	800a0cc <xTaskGetSchedulerState>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d102      	bne.n	8008f7a <xQueueReceive+0x76>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d101      	bne.n	8008f7e <xQueueReceive+0x7a>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e000      	b.n	8008f80 <xQueueReceive+0x7c>
 8008f7e:	2300      	movs	r3, #0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d10c      	bne.n	8008f9e <xQueueReceive+0x9a>
	__asm volatile
 8008f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f88:	b672      	cpsid	i
 8008f8a:	f383 8811 	msr	BASEPRI, r3
 8008f8e:	f3bf 8f6f 	isb	sy
 8008f92:	f3bf 8f4f 	dsb	sy
 8008f96:	b662      	cpsie	i
 8008f98:	61bb      	str	r3, [r7, #24]
}
 8008f9a:	bf00      	nop
 8008f9c:	e7fe      	b.n	8008f9c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f9e:	f001 fde5 	bl	800ab6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fa6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d01f      	beq.n	8008fee <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008fae:	68b9      	ldr	r1, [r7, #8]
 8008fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fb2:	f000 f8f7 	bl	80091a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb8:	1e5a      	subs	r2, r3, #1
 8008fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fbc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc0:	691b      	ldr	r3, [r3, #16]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00f      	beq.n	8008fe6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc8:	3310      	adds	r3, #16
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f000 fe8c 	bl	8009ce8 <xTaskRemoveFromEventList>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d007      	beq.n	8008fe6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008fd6:	4b3d      	ldr	r3, [pc, #244]	; (80090cc <xQueueReceive+0x1c8>)
 8008fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fdc:	601a      	str	r2, [r3, #0]
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008fe6:	f001 fdf5 	bl	800abd4 <vPortExitCritical>
				return pdPASS;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e069      	b.n	80090c2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d103      	bne.n	8008ffc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ff4:	f001 fdee 	bl	800abd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	e062      	b.n	80090c2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d106      	bne.n	8009010 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009002:	f107 0310 	add.w	r3, r7, #16
 8009006:	4618      	mov	r0, r3
 8009008:	f000 fefc 	bl	8009e04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800900c:	2301      	movs	r3, #1
 800900e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009010:	f001 fde0 	bl	800abd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009014:	f000 fc34 	bl	8009880 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009018:	f001 fda8 	bl	800ab6c <vPortEnterCritical>
 800901c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009022:	b25b      	sxtb	r3, r3
 8009024:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009028:	d103      	bne.n	8009032 <xQueueReceive+0x12e>
 800902a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800902c:	2200      	movs	r2, #0
 800902e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009034:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009038:	b25b      	sxtb	r3, r3
 800903a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800903e:	d103      	bne.n	8009048 <xQueueReceive+0x144>
 8009040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009042:	2200      	movs	r2, #0
 8009044:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009048:	f001 fdc4 	bl	800abd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800904c:	1d3a      	adds	r2, r7, #4
 800904e:	f107 0310 	add.w	r3, r7, #16
 8009052:	4611      	mov	r1, r2
 8009054:	4618      	mov	r0, r3
 8009056:	f000 feeb 	bl	8009e30 <xTaskCheckForTimeOut>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d123      	bne.n	80090a8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009060:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009062:	f000 f917 	bl	8009294 <prvIsQueueEmpty>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d017      	beq.n	800909c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800906c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906e:	3324      	adds	r3, #36	; 0x24
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	4611      	mov	r1, r2
 8009074:	4618      	mov	r0, r3
 8009076:	f000 fde3 	bl	8009c40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800907a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800907c:	f000 f8b8 	bl	80091f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009080:	f000 fc0c 	bl	800989c <xTaskResumeAll>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d189      	bne.n	8008f9e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800908a:	4b10      	ldr	r3, [pc, #64]	; (80090cc <xQueueReceive+0x1c8>)
 800908c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009090:	601a      	str	r2, [r3, #0]
 8009092:	f3bf 8f4f 	dsb	sy
 8009096:	f3bf 8f6f 	isb	sy
 800909a:	e780      	b.n	8008f9e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800909c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800909e:	f000 f8a7 	bl	80091f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090a2:	f000 fbfb 	bl	800989c <xTaskResumeAll>
 80090a6:	e77a      	b.n	8008f9e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80090a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090aa:	f000 f8a1 	bl	80091f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090ae:	f000 fbf5 	bl	800989c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090b4:	f000 f8ee 	bl	8009294 <prvIsQueueEmpty>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f43f af6f 	beq.w	8008f9e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80090c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3730      	adds	r7, #48	; 0x30
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	e000ed04 	.word	0xe000ed04

080090d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b086      	sub	sp, #24
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	60b9      	str	r1, [r7, #8]
 80090da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80090dc:	2300      	movs	r3, #0
 80090de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d10d      	bne.n	800910a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d14d      	bne.n	8009192 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	4618      	mov	r0, r3
 80090fc:	f001 f804 	bl	800a108 <xTaskPriorityDisinherit>
 8009100:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2200      	movs	r2, #0
 8009106:	609a      	str	r2, [r3, #8]
 8009108:	e043      	b.n	8009192 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d119      	bne.n	8009144 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6858      	ldr	r0, [r3, #4]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009118:	461a      	mov	r2, r3
 800911a:	68b9      	ldr	r1, [r7, #8]
 800911c:	f011 fb93 	bl	801a846 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	685a      	ldr	r2, [r3, #4]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009128:	441a      	add	r2, r3
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	685a      	ldr	r2, [r3, #4]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	689b      	ldr	r3, [r3, #8]
 8009136:	429a      	cmp	r2, r3
 8009138:	d32b      	bcc.n	8009192 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	605a      	str	r2, [r3, #4]
 8009142:	e026      	b.n	8009192 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	68d8      	ldr	r0, [r3, #12]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914c:	461a      	mov	r2, r3
 800914e:	68b9      	ldr	r1, [r7, #8]
 8009150:	f011 fb79 	bl	801a846 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	68da      	ldr	r2, [r3, #12]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800915c:	425b      	negs	r3, r3
 800915e:	441a      	add	r2, r3
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	68da      	ldr	r2, [r3, #12]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	429a      	cmp	r2, r3
 800916e:	d207      	bcs.n	8009180 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	689a      	ldr	r2, [r3, #8]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009178:	425b      	negs	r3, r3
 800917a:	441a      	add	r2, r3
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2b02      	cmp	r3, #2
 8009184:	d105      	bne.n	8009192 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d002      	beq.n	8009192 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	3b01      	subs	r3, #1
 8009190:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	1c5a      	adds	r2, r3, #1
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800919a:	697b      	ldr	r3, [r7, #20]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3718      	adds	r7, #24
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d018      	beq.n	80091e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	68da      	ldr	r2, [r3, #12]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091be:	441a      	add	r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	68da      	ldr	r2, [r3, #12]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d303      	bcc.n	80091d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	68d9      	ldr	r1, [r3, #12]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e0:	461a      	mov	r2, r3
 80091e2:	6838      	ldr	r0, [r7, #0]
 80091e4:	f011 fb2f 	bl	801a846 <memcpy>
	}
}
 80091e8:	bf00      	nop
 80091ea:	3708      	adds	r7, #8
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80091f8:	f001 fcb8 	bl	800ab6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009202:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009204:	e011      	b.n	800922a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920a:	2b00      	cmp	r3, #0
 800920c:	d012      	beq.n	8009234 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	3324      	adds	r3, #36	; 0x24
 8009212:	4618      	mov	r0, r3
 8009214:	f000 fd68 	bl	8009ce8 <xTaskRemoveFromEventList>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800921e:	f000 fe6d 	bl	8009efc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009222:	7bfb      	ldrb	r3, [r7, #15]
 8009224:	3b01      	subs	r3, #1
 8009226:	b2db      	uxtb	r3, r3
 8009228:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800922a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800922e:	2b00      	cmp	r3, #0
 8009230:	dce9      	bgt.n	8009206 <prvUnlockQueue+0x16>
 8009232:	e000      	b.n	8009236 <prvUnlockQueue+0x46>
					break;
 8009234:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	22ff      	movs	r2, #255	; 0xff
 800923a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800923e:	f001 fcc9 	bl	800abd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009242:	f001 fc93 	bl	800ab6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800924c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800924e:	e011      	b.n	8009274 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d012      	beq.n	800927e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	3310      	adds	r3, #16
 800925c:	4618      	mov	r0, r3
 800925e:	f000 fd43 	bl	8009ce8 <xTaskRemoveFromEventList>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d001      	beq.n	800926c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009268:	f000 fe48 	bl	8009efc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800926c:	7bbb      	ldrb	r3, [r7, #14]
 800926e:	3b01      	subs	r3, #1
 8009270:	b2db      	uxtb	r3, r3
 8009272:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009274:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009278:	2b00      	cmp	r3, #0
 800927a:	dce9      	bgt.n	8009250 <prvUnlockQueue+0x60>
 800927c:	e000      	b.n	8009280 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800927e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	22ff      	movs	r2, #255	; 0xff
 8009284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009288:	f001 fca4 	bl	800abd4 <vPortExitCritical>
}
 800928c:	bf00      	nop
 800928e:	3710      	adds	r7, #16
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800929c:	f001 fc66 	bl	800ab6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d102      	bne.n	80092ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80092a8:	2301      	movs	r3, #1
 80092aa:	60fb      	str	r3, [r7, #12]
 80092ac:	e001      	b.n	80092b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80092ae:	2300      	movs	r3, #0
 80092b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092b2:	f001 fc8f 	bl	800abd4 <vPortExitCritical>

	return xReturn;
 80092b6:	68fb      	ldr	r3, [r7, #12]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80092c8:	f001 fc50 	bl	800ab6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d102      	bne.n	80092de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80092d8:	2301      	movs	r3, #1
 80092da:	60fb      	str	r3, [r7, #12]
 80092dc:	e001      	b.n	80092e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80092de:	2300      	movs	r3, #0
 80092e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092e2:	f001 fc77 	bl	800abd4 <vPortExitCritical>

	return xReturn;
 80092e6:	68fb      	ldr	r3, [r7, #12]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80092fa:	2300      	movs	r3, #0
 80092fc:	60fb      	str	r3, [r7, #12]
 80092fe:	e014      	b.n	800932a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009300:	4a0f      	ldr	r2, [pc, #60]	; (8009340 <vQueueAddToRegistry+0x50>)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d10b      	bne.n	8009324 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800930c:	490c      	ldr	r1, [pc, #48]	; (8009340 <vQueueAddToRegistry+0x50>)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	683a      	ldr	r2, [r7, #0]
 8009312:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009316:	4a0a      	ldr	r2, [pc, #40]	; (8009340 <vQueueAddToRegistry+0x50>)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	00db      	lsls	r3, r3, #3
 800931c:	4413      	add	r3, r2
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009322:	e006      	b.n	8009332 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	3301      	adds	r3, #1
 8009328:	60fb      	str	r3, [r7, #12]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2b07      	cmp	r3, #7
 800932e:	d9e7      	bls.n	8009300 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009330:	bf00      	nop
 8009332:	bf00      	nop
 8009334:	3714      	adds	r7, #20
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	20007284 	.word	0x20007284

08009344 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009344:	b580      	push	{r7, lr}
 8009346:	b086      	sub	sp, #24
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009354:	f001 fc0a 	bl	800ab6c <vPortEnterCritical>
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800935e:	b25b      	sxtb	r3, r3
 8009360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009364:	d103      	bne.n	800936e <vQueueWaitForMessageRestricted+0x2a>
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	2200      	movs	r2, #0
 800936a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009374:	b25b      	sxtb	r3, r3
 8009376:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800937a:	d103      	bne.n	8009384 <vQueueWaitForMessageRestricted+0x40>
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	2200      	movs	r2, #0
 8009380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009384:	f001 fc26 	bl	800abd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938c:	2b00      	cmp	r3, #0
 800938e:	d106      	bne.n	800939e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	3324      	adds	r3, #36	; 0x24
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	68b9      	ldr	r1, [r7, #8]
 8009398:	4618      	mov	r0, r3
 800939a:	f000 fc77 	bl	8009c8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800939e:	6978      	ldr	r0, [r7, #20]
 80093a0:	f7ff ff26 	bl	80091f0 <prvUnlockQueue>
	}
 80093a4:	bf00      	nop
 80093a6:	3718      	adds	r7, #24
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b08e      	sub	sp, #56	; 0x38
 80093b0:	af04      	add	r7, sp, #16
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	607a      	str	r2, [r7, #4]
 80093b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80093ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10c      	bne.n	80093da <xTaskCreateStatic+0x2e>
	__asm volatile
 80093c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c4:	b672      	cpsid	i
 80093c6:	f383 8811 	msr	BASEPRI, r3
 80093ca:	f3bf 8f6f 	isb	sy
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	b662      	cpsie	i
 80093d4:	623b      	str	r3, [r7, #32]
}
 80093d6:	bf00      	nop
 80093d8:	e7fe      	b.n	80093d8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80093da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d10c      	bne.n	80093fa <xTaskCreateStatic+0x4e>
	__asm volatile
 80093e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e4:	b672      	cpsid	i
 80093e6:	f383 8811 	msr	BASEPRI, r3
 80093ea:	f3bf 8f6f 	isb	sy
 80093ee:	f3bf 8f4f 	dsb	sy
 80093f2:	b662      	cpsie	i
 80093f4:	61fb      	str	r3, [r7, #28]
}
 80093f6:	bf00      	nop
 80093f8:	e7fe      	b.n	80093f8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80093fa:	23a8      	movs	r3, #168	; 0xa8
 80093fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	2ba8      	cmp	r3, #168	; 0xa8
 8009402:	d00c      	beq.n	800941e <xTaskCreateStatic+0x72>
	__asm volatile
 8009404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009408:	b672      	cpsid	i
 800940a:	f383 8811 	msr	BASEPRI, r3
 800940e:	f3bf 8f6f 	isb	sy
 8009412:	f3bf 8f4f 	dsb	sy
 8009416:	b662      	cpsie	i
 8009418:	61bb      	str	r3, [r7, #24]
}
 800941a:	bf00      	nop
 800941c:	e7fe      	b.n	800941c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800941e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009422:	2b00      	cmp	r3, #0
 8009424:	d01e      	beq.n	8009464 <xTaskCreateStatic+0xb8>
 8009426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009428:	2b00      	cmp	r3, #0
 800942a:	d01b      	beq.n	8009464 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800942c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800942e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009434:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009438:	2202      	movs	r2, #2
 800943a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800943e:	2300      	movs	r3, #0
 8009440:	9303      	str	r3, [sp, #12]
 8009442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009444:	9302      	str	r3, [sp, #8]
 8009446:	f107 0314 	add.w	r3, r7, #20
 800944a:	9301      	str	r3, [sp, #4]
 800944c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944e:	9300      	str	r3, [sp, #0]
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	68b9      	ldr	r1, [r7, #8]
 8009456:	68f8      	ldr	r0, [r7, #12]
 8009458:	f000 f850 	bl	80094fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800945c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800945e:	f000 f8f5 	bl	800964c <prvAddNewTaskToReadyList>
 8009462:	e001      	b.n	8009468 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8009464:	2300      	movs	r3, #0
 8009466:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009468:	697b      	ldr	r3, [r7, #20]
	}
 800946a:	4618      	mov	r0, r3
 800946c:	3728      	adds	r7, #40	; 0x28
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009472:	b580      	push	{r7, lr}
 8009474:	b08c      	sub	sp, #48	; 0x30
 8009476:	af04      	add	r7, sp, #16
 8009478:	60f8      	str	r0, [r7, #12]
 800947a:	60b9      	str	r1, [r7, #8]
 800947c:	603b      	str	r3, [r7, #0]
 800947e:	4613      	mov	r3, r2
 8009480:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009482:	88fb      	ldrh	r3, [r7, #6]
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	4618      	mov	r0, r3
 8009488:	f001 fc9c 	bl	800adc4 <pvPortMalloc>
 800948c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00e      	beq.n	80094b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009494:	20a8      	movs	r0, #168	; 0xa8
 8009496:	f001 fc95 	bl	800adc4 <pvPortMalloc>
 800949a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d003      	beq.n	80094aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	697a      	ldr	r2, [r7, #20]
 80094a6:	631a      	str	r2, [r3, #48]	; 0x30
 80094a8:	e005      	b.n	80094b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80094aa:	6978      	ldr	r0, [r7, #20]
 80094ac:	f001 fd54 	bl	800af58 <vPortFree>
 80094b0:	e001      	b.n	80094b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80094b2:	2300      	movs	r3, #0
 80094b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d017      	beq.n	80094ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	2200      	movs	r2, #0
 80094c0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80094c4:	88fa      	ldrh	r2, [r7, #6]
 80094c6:	2300      	movs	r3, #0
 80094c8:	9303      	str	r3, [sp, #12]
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	9302      	str	r3, [sp, #8]
 80094ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d0:	9301      	str	r3, [sp, #4]
 80094d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d4:	9300      	str	r3, [sp, #0]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	68b9      	ldr	r1, [r7, #8]
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f000 f80e 	bl	80094fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80094e0:	69f8      	ldr	r0, [r7, #28]
 80094e2:	f000 f8b3 	bl	800964c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80094e6:	2301      	movs	r3, #1
 80094e8:	61bb      	str	r3, [r7, #24]
 80094ea:	e002      	b.n	80094f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80094ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80094f2:	69bb      	ldr	r3, [r7, #24]
	}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3720      	adds	r7, #32
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b088      	sub	sp, #32
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
 8009508:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800950a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	461a      	mov	r2, r3
 8009514:	21a5      	movs	r1, #165	; 0xa5
 8009516:	f011 f865 	bl	801a5e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800951a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800951e:	6879      	ldr	r1, [r7, #4]
 8009520:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009524:	440b      	add	r3, r1
 8009526:	009b      	lsls	r3, r3, #2
 8009528:	4413      	add	r3, r2
 800952a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	f023 0307 	bic.w	r3, r3, #7
 8009532:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	f003 0307 	and.w	r3, r3, #7
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00c      	beq.n	8009558 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800953e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009542:	b672      	cpsid	i
 8009544:	f383 8811 	msr	BASEPRI, r3
 8009548:	f3bf 8f6f 	isb	sy
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	b662      	cpsie	i
 8009552:	617b      	str	r3, [r7, #20]
}
 8009554:	bf00      	nop
 8009556:	e7fe      	b.n	8009556 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d01f      	beq.n	800959e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800955e:	2300      	movs	r3, #0
 8009560:	61fb      	str	r3, [r7, #28]
 8009562:	e012      	b.n	800958a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	4413      	add	r3, r2
 800956a:	7819      	ldrb	r1, [r3, #0]
 800956c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800956e:	69fb      	ldr	r3, [r7, #28]
 8009570:	4413      	add	r3, r2
 8009572:	3334      	adds	r3, #52	; 0x34
 8009574:	460a      	mov	r2, r1
 8009576:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	4413      	add	r3, r2
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d006      	beq.n	8009592 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	3301      	adds	r3, #1
 8009588:	61fb      	str	r3, [r7, #28]
 800958a:	69fb      	ldr	r3, [r7, #28]
 800958c:	2b0f      	cmp	r3, #15
 800958e:	d9e9      	bls.n	8009564 <prvInitialiseNewTask+0x68>
 8009590:	e000      	b.n	8009594 <prvInitialiseNewTask+0x98>
			{
				break;
 8009592:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009596:	2200      	movs	r2, #0
 8009598:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800959c:	e003      	b.n	80095a6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800959e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a0:	2200      	movs	r2, #0
 80095a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80095a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a8:	2b37      	cmp	r3, #55	; 0x37
 80095aa:	d901      	bls.n	80095b0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80095ac:	2337      	movs	r3, #55	; 0x37
 80095ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80095b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80095b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80095bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095be:	2200      	movs	r2, #0
 80095c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80095c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c4:	3304      	adds	r3, #4
 80095c6:	4618      	mov	r0, r3
 80095c8:	f7ff f952 	bl	8008870 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80095cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ce:	3318      	adds	r3, #24
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7ff f94d 	bl	8008870 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80095d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80095e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80095e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80095ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ee:	2200      	movs	r2, #0
 80095f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80095f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80095fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fe:	3354      	adds	r3, #84	; 0x54
 8009600:	224c      	movs	r2, #76	; 0x4c
 8009602:	2100      	movs	r1, #0
 8009604:	4618      	mov	r0, r3
 8009606:	f010 ffed 	bl	801a5e4 <memset>
 800960a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960c:	4a0c      	ldr	r2, [pc, #48]	; (8009640 <prvInitialiseNewTask+0x144>)
 800960e:	659a      	str	r2, [r3, #88]	; 0x58
 8009610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009612:	4a0c      	ldr	r2, [pc, #48]	; (8009644 <prvInitialiseNewTask+0x148>)
 8009614:	65da      	str	r2, [r3, #92]	; 0x5c
 8009616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009618:	4a0b      	ldr	r2, [pc, #44]	; (8009648 <prvInitialiseNewTask+0x14c>)
 800961a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800961c:	683a      	ldr	r2, [r7, #0]
 800961e:	68f9      	ldr	r1, [r7, #12]
 8009620:	69b8      	ldr	r0, [r7, #24]
 8009622:	f001 f993 	bl	800a94c <pxPortInitialiseStack>
 8009626:	4602      	mov	r2, r0
 8009628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800962c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800962e:	2b00      	cmp	r3, #0
 8009630:	d002      	beq.n	8009638 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009636:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009638:	bf00      	nop
 800963a:	3720      	adds	r7, #32
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	200105cc 	.word	0x200105cc
 8009644:	20010634 	.word	0x20010634
 8009648:	2001069c 	.word	0x2001069c

0800964c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009654:	f001 fa8a 	bl	800ab6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009658:	4b2d      	ldr	r3, [pc, #180]	; (8009710 <prvAddNewTaskToReadyList+0xc4>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	3301      	adds	r3, #1
 800965e:	4a2c      	ldr	r2, [pc, #176]	; (8009710 <prvAddNewTaskToReadyList+0xc4>)
 8009660:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009662:	4b2c      	ldr	r3, [pc, #176]	; (8009714 <prvAddNewTaskToReadyList+0xc8>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d109      	bne.n	800967e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800966a:	4a2a      	ldr	r2, [pc, #168]	; (8009714 <prvAddNewTaskToReadyList+0xc8>)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009670:	4b27      	ldr	r3, [pc, #156]	; (8009710 <prvAddNewTaskToReadyList+0xc4>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2b01      	cmp	r3, #1
 8009676:	d110      	bne.n	800969a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009678:	f000 fc64 	bl	8009f44 <prvInitialiseTaskLists>
 800967c:	e00d      	b.n	800969a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800967e:	4b26      	ldr	r3, [pc, #152]	; (8009718 <prvAddNewTaskToReadyList+0xcc>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d109      	bne.n	800969a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009686:	4b23      	ldr	r3, [pc, #140]	; (8009714 <prvAddNewTaskToReadyList+0xc8>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009690:	429a      	cmp	r2, r3
 8009692:	d802      	bhi.n	800969a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009694:	4a1f      	ldr	r2, [pc, #124]	; (8009714 <prvAddNewTaskToReadyList+0xc8>)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800969a:	4b20      	ldr	r3, [pc, #128]	; (800971c <prvAddNewTaskToReadyList+0xd0>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	3301      	adds	r3, #1
 80096a0:	4a1e      	ldr	r2, [pc, #120]	; (800971c <prvAddNewTaskToReadyList+0xd0>)
 80096a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80096a4:	4b1d      	ldr	r3, [pc, #116]	; (800971c <prvAddNewTaskToReadyList+0xd0>)
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096b0:	4b1b      	ldr	r3, [pc, #108]	; (8009720 <prvAddNewTaskToReadyList+0xd4>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d903      	bls.n	80096c0 <prvAddNewTaskToReadyList+0x74>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096bc:	4a18      	ldr	r2, [pc, #96]	; (8009720 <prvAddNewTaskToReadyList+0xd4>)
 80096be:	6013      	str	r3, [r2, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c4:	4613      	mov	r3, r2
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	4413      	add	r3, r2
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	4a15      	ldr	r2, [pc, #84]	; (8009724 <prvAddNewTaskToReadyList+0xd8>)
 80096ce:	441a      	add	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	3304      	adds	r3, #4
 80096d4:	4619      	mov	r1, r3
 80096d6:	4610      	mov	r0, r2
 80096d8:	f7ff f8d7 	bl	800888a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80096dc:	f001 fa7a 	bl	800abd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80096e0:	4b0d      	ldr	r3, [pc, #52]	; (8009718 <prvAddNewTaskToReadyList+0xcc>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d00e      	beq.n	8009706 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80096e8:	4b0a      	ldr	r3, [pc, #40]	; (8009714 <prvAddNewTaskToReadyList+0xc8>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d207      	bcs.n	8009706 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80096f6:	4b0c      	ldr	r3, [pc, #48]	; (8009728 <prvAddNewTaskToReadyList+0xdc>)
 80096f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096fc:	601a      	str	r2, [r3, #0]
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009706:	bf00      	nop
 8009708:	3708      	adds	r7, #8
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	20007798 	.word	0x20007798
 8009714:	200072c4 	.word	0x200072c4
 8009718:	200077a4 	.word	0x200077a4
 800971c:	200077b4 	.word	0x200077b4
 8009720:	200077a0 	.word	0x200077a0
 8009724:	200072c8 	.word	0x200072c8
 8009728:	e000ed04 	.word	0xe000ed04

0800972c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009734:	2300      	movs	r3, #0
 8009736:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d019      	beq.n	8009772 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800973e:	4b14      	ldr	r3, [pc, #80]	; (8009790 <vTaskDelay+0x64>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d00c      	beq.n	8009760 <vTaskDelay+0x34>
	__asm volatile
 8009746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800974a:	b672      	cpsid	i
 800974c:	f383 8811 	msr	BASEPRI, r3
 8009750:	f3bf 8f6f 	isb	sy
 8009754:	f3bf 8f4f 	dsb	sy
 8009758:	b662      	cpsie	i
 800975a:	60bb      	str	r3, [r7, #8]
}
 800975c:	bf00      	nop
 800975e:	e7fe      	b.n	800975e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8009760:	f000 f88e 	bl	8009880 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009764:	2100      	movs	r1, #0
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f000 fd40 	bl	800a1ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800976c:	f000 f896 	bl	800989c <xTaskResumeAll>
 8009770:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d107      	bne.n	8009788 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8009778:	4b06      	ldr	r3, [pc, #24]	; (8009794 <vTaskDelay+0x68>)
 800977a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800977e:	601a      	str	r2, [r3, #0]
 8009780:	f3bf 8f4f 	dsb	sy
 8009784:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009788:	bf00      	nop
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	200077c0 	.word	0x200077c0
 8009794:	e000ed04 	.word	0xe000ed04

08009798 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b08a      	sub	sp, #40	; 0x28
 800979c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800979e:	2300      	movs	r3, #0
 80097a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80097a2:	2300      	movs	r3, #0
 80097a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80097a6:	463a      	mov	r2, r7
 80097a8:	1d39      	adds	r1, r7, #4
 80097aa:	f107 0308 	add.w	r3, r7, #8
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7ff f80a 	bl	80087c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80097b4:	6839      	ldr	r1, [r7, #0]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	68ba      	ldr	r2, [r7, #8]
 80097ba:	9202      	str	r2, [sp, #8]
 80097bc:	9301      	str	r3, [sp, #4]
 80097be:	2300      	movs	r3, #0
 80097c0:	9300      	str	r3, [sp, #0]
 80097c2:	2300      	movs	r3, #0
 80097c4:	460a      	mov	r2, r1
 80097c6:	4926      	ldr	r1, [pc, #152]	; (8009860 <vTaskStartScheduler+0xc8>)
 80097c8:	4826      	ldr	r0, [pc, #152]	; (8009864 <vTaskStartScheduler+0xcc>)
 80097ca:	f7ff fdef 	bl	80093ac <xTaskCreateStatic>
 80097ce:	4603      	mov	r3, r0
 80097d0:	4a25      	ldr	r2, [pc, #148]	; (8009868 <vTaskStartScheduler+0xd0>)
 80097d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80097d4:	4b24      	ldr	r3, [pc, #144]	; (8009868 <vTaskStartScheduler+0xd0>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d002      	beq.n	80097e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80097dc:	2301      	movs	r3, #1
 80097de:	617b      	str	r3, [r7, #20]
 80097e0:	e001      	b.n	80097e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80097e2:	2300      	movs	r3, #0
 80097e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d102      	bne.n	80097f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80097ec:	f000 fd52 	bl	800a294 <xTimerCreateTimerTask>
 80097f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d11d      	bne.n	8009834 <vTaskStartScheduler+0x9c>
	__asm volatile
 80097f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fc:	b672      	cpsid	i
 80097fe:	f383 8811 	msr	BASEPRI, r3
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	f3bf 8f4f 	dsb	sy
 800980a:	b662      	cpsie	i
 800980c:	613b      	str	r3, [r7, #16]
}
 800980e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009810:	4b16      	ldr	r3, [pc, #88]	; (800986c <vTaskStartScheduler+0xd4>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	3354      	adds	r3, #84	; 0x54
 8009816:	4a16      	ldr	r2, [pc, #88]	; (8009870 <vTaskStartScheduler+0xd8>)
 8009818:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800981a:	4b16      	ldr	r3, [pc, #88]	; (8009874 <vTaskStartScheduler+0xdc>)
 800981c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009820:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009822:	4b15      	ldr	r3, [pc, #84]	; (8009878 <vTaskStartScheduler+0xe0>)
 8009824:	2201      	movs	r2, #1
 8009826:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009828:	4b14      	ldr	r3, [pc, #80]	; (800987c <vTaskStartScheduler+0xe4>)
 800982a:	2200      	movs	r2, #0
 800982c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800982e:	f001 f91f 	bl	800aa70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009832:	e010      	b.n	8009856 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800983a:	d10c      	bne.n	8009856 <vTaskStartScheduler+0xbe>
	__asm volatile
 800983c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009840:	b672      	cpsid	i
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	b662      	cpsie	i
 8009850:	60fb      	str	r3, [r7, #12]
}
 8009852:	bf00      	nop
 8009854:	e7fe      	b.n	8009854 <vTaskStartScheduler+0xbc>
}
 8009856:	bf00      	nop
 8009858:	3718      	adds	r7, #24
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	0801b654 	.word	0x0801b654
 8009864:	08009f15 	.word	0x08009f15
 8009868:	200077bc 	.word	0x200077bc
 800986c:	200072c4 	.word	0x200072c4
 8009870:	20001df0 	.word	0x20001df0
 8009874:	200077b8 	.word	0x200077b8
 8009878:	200077a4 	.word	0x200077a4
 800987c:	2000779c 	.word	0x2000779c

08009880 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009880:	b480      	push	{r7}
 8009882:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009884:	4b04      	ldr	r3, [pc, #16]	; (8009898 <vTaskSuspendAll+0x18>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	3301      	adds	r3, #1
 800988a:	4a03      	ldr	r2, [pc, #12]	; (8009898 <vTaskSuspendAll+0x18>)
 800988c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800988e:	bf00      	nop
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr
 8009898:	200077c0 	.word	0x200077c0

0800989c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b084      	sub	sp, #16
 80098a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80098a2:	2300      	movs	r3, #0
 80098a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80098a6:	2300      	movs	r3, #0
 80098a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80098aa:	4b43      	ldr	r3, [pc, #268]	; (80099b8 <xTaskResumeAll+0x11c>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10c      	bne.n	80098cc <xTaskResumeAll+0x30>
	__asm volatile
 80098b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b6:	b672      	cpsid	i
 80098b8:	f383 8811 	msr	BASEPRI, r3
 80098bc:	f3bf 8f6f 	isb	sy
 80098c0:	f3bf 8f4f 	dsb	sy
 80098c4:	b662      	cpsie	i
 80098c6:	603b      	str	r3, [r7, #0]
}
 80098c8:	bf00      	nop
 80098ca:	e7fe      	b.n	80098ca <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80098cc:	f001 f94e 	bl	800ab6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80098d0:	4b39      	ldr	r3, [pc, #228]	; (80099b8 <xTaskResumeAll+0x11c>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	3b01      	subs	r3, #1
 80098d6:	4a38      	ldr	r2, [pc, #224]	; (80099b8 <xTaskResumeAll+0x11c>)
 80098d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098da:	4b37      	ldr	r3, [pc, #220]	; (80099b8 <xTaskResumeAll+0x11c>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d162      	bne.n	80099a8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80098e2:	4b36      	ldr	r3, [pc, #216]	; (80099bc <xTaskResumeAll+0x120>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d05e      	beq.n	80099a8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80098ea:	e02f      	b.n	800994c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098ec:	4b34      	ldr	r3, [pc, #208]	; (80099c0 <xTaskResumeAll+0x124>)
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	3318      	adds	r3, #24
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7ff f823 	bl	8008944 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	3304      	adds	r3, #4
 8009902:	4618      	mov	r0, r3
 8009904:	f7ff f81e 	bl	8008944 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800990c:	4b2d      	ldr	r3, [pc, #180]	; (80099c4 <xTaskResumeAll+0x128>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	429a      	cmp	r2, r3
 8009912:	d903      	bls.n	800991c <xTaskResumeAll+0x80>
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009918:	4a2a      	ldr	r2, [pc, #168]	; (80099c4 <xTaskResumeAll+0x128>)
 800991a:	6013      	str	r3, [r2, #0]
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009920:	4613      	mov	r3, r2
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	4413      	add	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4a27      	ldr	r2, [pc, #156]	; (80099c8 <xTaskResumeAll+0x12c>)
 800992a:	441a      	add	r2, r3
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	3304      	adds	r3, #4
 8009930:	4619      	mov	r1, r3
 8009932:	4610      	mov	r0, r2
 8009934:	f7fe ffa9 	bl	800888a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800993c:	4b23      	ldr	r3, [pc, #140]	; (80099cc <xTaskResumeAll+0x130>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009942:	429a      	cmp	r2, r3
 8009944:	d302      	bcc.n	800994c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8009946:	4b22      	ldr	r3, [pc, #136]	; (80099d0 <xTaskResumeAll+0x134>)
 8009948:	2201      	movs	r2, #1
 800994a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800994c:	4b1c      	ldr	r3, [pc, #112]	; (80099c0 <xTaskResumeAll+0x124>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d1cb      	bne.n	80098ec <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d001      	beq.n	800995e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800995a:	f000 fb97 	bl	800a08c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800995e:	4b1d      	ldr	r3, [pc, #116]	; (80099d4 <xTaskResumeAll+0x138>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d010      	beq.n	800998c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800996a:	f000 f847 	bl	80099fc <xTaskIncrementTick>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d002      	beq.n	800997a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8009974:	4b16      	ldr	r3, [pc, #88]	; (80099d0 <xTaskResumeAll+0x134>)
 8009976:	2201      	movs	r2, #1
 8009978:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	3b01      	subs	r3, #1
 800997e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d1f1      	bne.n	800996a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8009986:	4b13      	ldr	r3, [pc, #76]	; (80099d4 <xTaskResumeAll+0x138>)
 8009988:	2200      	movs	r2, #0
 800998a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800998c:	4b10      	ldr	r3, [pc, #64]	; (80099d0 <xTaskResumeAll+0x134>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d009      	beq.n	80099a8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009994:	2301      	movs	r3, #1
 8009996:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009998:	4b0f      	ldr	r3, [pc, #60]	; (80099d8 <xTaskResumeAll+0x13c>)
 800999a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800999e:	601a      	str	r2, [r3, #0]
 80099a0:	f3bf 8f4f 	dsb	sy
 80099a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80099a8:	f001 f914 	bl	800abd4 <vPortExitCritical>

	return xAlreadyYielded;
 80099ac:	68bb      	ldr	r3, [r7, #8]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	200077c0 	.word	0x200077c0
 80099bc:	20007798 	.word	0x20007798
 80099c0:	20007758 	.word	0x20007758
 80099c4:	200077a0 	.word	0x200077a0
 80099c8:	200072c8 	.word	0x200072c8
 80099cc:	200072c4 	.word	0x200072c4
 80099d0:	200077ac 	.word	0x200077ac
 80099d4:	200077a8 	.word	0x200077a8
 80099d8:	e000ed04 	.word	0xe000ed04

080099dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80099e2:	4b05      	ldr	r3, [pc, #20]	; (80099f8 <xTaskGetTickCount+0x1c>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80099e8:	687b      	ldr	r3, [r7, #4]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	370c      	adds	r7, #12
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	2000779c 	.word	0x2000779c

080099fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b086      	sub	sp, #24
 8009a00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009a02:	2300      	movs	r3, #0
 8009a04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a06:	4b50      	ldr	r3, [pc, #320]	; (8009b48 <xTaskIncrementTick+0x14c>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	f040 808b 	bne.w	8009b26 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009a10:	4b4e      	ldr	r3, [pc, #312]	; (8009b4c <xTaskIncrementTick+0x150>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	3301      	adds	r3, #1
 8009a16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009a18:	4a4c      	ldr	r2, [pc, #304]	; (8009b4c <xTaskIncrementTick+0x150>)
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d122      	bne.n	8009a6a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009a24:	4b4a      	ldr	r3, [pc, #296]	; (8009b50 <xTaskIncrementTick+0x154>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00c      	beq.n	8009a48 <xTaskIncrementTick+0x4c>
	__asm volatile
 8009a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a32:	b672      	cpsid	i
 8009a34:	f383 8811 	msr	BASEPRI, r3
 8009a38:	f3bf 8f6f 	isb	sy
 8009a3c:	f3bf 8f4f 	dsb	sy
 8009a40:	b662      	cpsie	i
 8009a42:	603b      	str	r3, [r7, #0]
}
 8009a44:	bf00      	nop
 8009a46:	e7fe      	b.n	8009a46 <xTaskIncrementTick+0x4a>
 8009a48:	4b41      	ldr	r3, [pc, #260]	; (8009b50 <xTaskIncrementTick+0x154>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	60fb      	str	r3, [r7, #12]
 8009a4e:	4b41      	ldr	r3, [pc, #260]	; (8009b54 <xTaskIncrementTick+0x158>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a3f      	ldr	r2, [pc, #252]	; (8009b50 <xTaskIncrementTick+0x154>)
 8009a54:	6013      	str	r3, [r2, #0]
 8009a56:	4a3f      	ldr	r2, [pc, #252]	; (8009b54 <xTaskIncrementTick+0x158>)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	6013      	str	r3, [r2, #0]
 8009a5c:	4b3e      	ldr	r3, [pc, #248]	; (8009b58 <xTaskIncrementTick+0x15c>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	3301      	adds	r3, #1
 8009a62:	4a3d      	ldr	r2, [pc, #244]	; (8009b58 <xTaskIncrementTick+0x15c>)
 8009a64:	6013      	str	r3, [r2, #0]
 8009a66:	f000 fb11 	bl	800a08c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009a6a:	4b3c      	ldr	r3, [pc, #240]	; (8009b5c <xTaskIncrementTick+0x160>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	693a      	ldr	r2, [r7, #16]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d349      	bcc.n	8009b08 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a74:	4b36      	ldr	r3, [pc, #216]	; (8009b50 <xTaskIncrementTick+0x154>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d104      	bne.n	8009a88 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a7e:	4b37      	ldr	r3, [pc, #220]	; (8009b5c <xTaskIncrementTick+0x160>)
 8009a80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a84:	601a      	str	r2, [r3, #0]
					break;
 8009a86:	e03f      	b.n	8009b08 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a88:	4b31      	ldr	r3, [pc, #196]	; (8009b50 <xTaskIncrementTick+0x154>)
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	68db      	ldr	r3, [r3, #12]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009a98:	693a      	ldr	r2, [r7, #16]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d203      	bcs.n	8009aa8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009aa0:	4a2e      	ldr	r2, [pc, #184]	; (8009b5c <xTaskIncrementTick+0x160>)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009aa6:	e02f      	b.n	8009b08 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	3304      	adds	r3, #4
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7fe ff49 	bl	8008944 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d004      	beq.n	8009ac4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009aba:	68bb      	ldr	r3, [r7, #8]
 8009abc:	3318      	adds	r3, #24
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7fe ff40 	bl	8008944 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ac8:	4b25      	ldr	r3, [pc, #148]	; (8009b60 <xTaskIncrementTick+0x164>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d903      	bls.n	8009ad8 <xTaskIncrementTick+0xdc>
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad4:	4a22      	ldr	r2, [pc, #136]	; (8009b60 <xTaskIncrementTick+0x164>)
 8009ad6:	6013      	str	r3, [r2, #0]
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009adc:	4613      	mov	r3, r2
 8009ade:	009b      	lsls	r3, r3, #2
 8009ae0:	4413      	add	r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4a1f      	ldr	r2, [pc, #124]	; (8009b64 <xTaskIncrementTick+0x168>)
 8009ae6:	441a      	add	r2, r3
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	3304      	adds	r3, #4
 8009aec:	4619      	mov	r1, r3
 8009aee:	4610      	mov	r0, r2
 8009af0:	f7fe fecb 	bl	800888a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af8:	4b1b      	ldr	r3, [pc, #108]	; (8009b68 <xTaskIncrementTick+0x16c>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d3b8      	bcc.n	8009a74 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8009b02:	2301      	movs	r3, #1
 8009b04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b06:	e7b5      	b.n	8009a74 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009b08:	4b17      	ldr	r3, [pc, #92]	; (8009b68 <xTaskIncrementTick+0x16c>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b0e:	4915      	ldr	r1, [pc, #84]	; (8009b64 <xTaskIncrementTick+0x168>)
 8009b10:	4613      	mov	r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	4413      	add	r3, r2
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	440b      	add	r3, r1
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d907      	bls.n	8009b30 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8009b20:	2301      	movs	r3, #1
 8009b22:	617b      	str	r3, [r7, #20]
 8009b24:	e004      	b.n	8009b30 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009b26:	4b11      	ldr	r3, [pc, #68]	; (8009b6c <xTaskIncrementTick+0x170>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	4a0f      	ldr	r2, [pc, #60]	; (8009b6c <xTaskIncrementTick+0x170>)
 8009b2e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009b30:	4b0f      	ldr	r3, [pc, #60]	; (8009b70 <xTaskIncrementTick+0x174>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d001      	beq.n	8009b3c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009b3c:	697b      	ldr	r3, [r7, #20]
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3718      	adds	r7, #24
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	200077c0 	.word	0x200077c0
 8009b4c:	2000779c 	.word	0x2000779c
 8009b50:	20007750 	.word	0x20007750
 8009b54:	20007754 	.word	0x20007754
 8009b58:	200077b0 	.word	0x200077b0
 8009b5c:	200077b8 	.word	0x200077b8
 8009b60:	200077a0 	.word	0x200077a0
 8009b64:	200072c8 	.word	0x200072c8
 8009b68:	200072c4 	.word	0x200072c4
 8009b6c:	200077a8 	.word	0x200077a8
 8009b70:	200077ac 	.word	0x200077ac

08009b74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009b7a:	4b2b      	ldr	r3, [pc, #172]	; (8009c28 <vTaskSwitchContext+0xb4>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d003      	beq.n	8009b8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009b82:	4b2a      	ldr	r3, [pc, #168]	; (8009c2c <vTaskSwitchContext+0xb8>)
 8009b84:	2201      	movs	r2, #1
 8009b86:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009b88:	e048      	b.n	8009c1c <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8009b8a:	4b28      	ldr	r3, [pc, #160]	; (8009c2c <vTaskSwitchContext+0xb8>)
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b90:	4b27      	ldr	r3, [pc, #156]	; (8009c30 <vTaskSwitchContext+0xbc>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	60fb      	str	r3, [r7, #12]
 8009b96:	e012      	b.n	8009bbe <vTaskSwitchContext+0x4a>
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d10c      	bne.n	8009bb8 <vTaskSwitchContext+0x44>
	__asm volatile
 8009b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba2:	b672      	cpsid	i
 8009ba4:	f383 8811 	msr	BASEPRI, r3
 8009ba8:	f3bf 8f6f 	isb	sy
 8009bac:	f3bf 8f4f 	dsb	sy
 8009bb0:	b662      	cpsie	i
 8009bb2:	607b      	str	r3, [r7, #4]
}
 8009bb4:	bf00      	nop
 8009bb6:	e7fe      	b.n	8009bb6 <vTaskSwitchContext+0x42>
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	60fb      	str	r3, [r7, #12]
 8009bbe:	491d      	ldr	r1, [pc, #116]	; (8009c34 <vTaskSwitchContext+0xc0>)
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	4413      	add	r3, r2
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	440b      	add	r3, r1
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d0e2      	beq.n	8009b98 <vTaskSwitchContext+0x24>
 8009bd2:	68fa      	ldr	r2, [r7, #12]
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	4413      	add	r3, r2
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	4a15      	ldr	r2, [pc, #84]	; (8009c34 <vTaskSwitchContext+0xc0>)
 8009bde:	4413      	add	r3, r2
 8009be0:	60bb      	str	r3, [r7, #8]
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	685a      	ldr	r2, [r3, #4]
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	605a      	str	r2, [r3, #4]
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	685a      	ldr	r2, [r3, #4]
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	3308      	adds	r3, #8
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d104      	bne.n	8009c02 <vTaskSwitchContext+0x8e>
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	685a      	ldr	r2, [r3, #4]
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	605a      	str	r2, [r3, #4]
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	4a0b      	ldr	r2, [pc, #44]	; (8009c38 <vTaskSwitchContext+0xc4>)
 8009c0a:	6013      	str	r3, [r2, #0]
 8009c0c:	4a08      	ldr	r2, [pc, #32]	; (8009c30 <vTaskSwitchContext+0xbc>)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c12:	4b09      	ldr	r3, [pc, #36]	; (8009c38 <vTaskSwitchContext+0xc4>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	3354      	adds	r3, #84	; 0x54
 8009c18:	4a08      	ldr	r2, [pc, #32]	; (8009c3c <vTaskSwitchContext+0xc8>)
 8009c1a:	6013      	str	r3, [r2, #0]
}
 8009c1c:	bf00      	nop
 8009c1e:	3714      	adds	r7, #20
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr
 8009c28:	200077c0 	.word	0x200077c0
 8009c2c:	200077ac 	.word	0x200077ac
 8009c30:	200077a0 	.word	0x200077a0
 8009c34:	200072c8 	.word	0x200072c8
 8009c38:	200072c4 	.word	0x200072c4
 8009c3c:	20001df0 	.word	0x20001df0

08009c40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d10c      	bne.n	8009c6a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8009c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c54:	b672      	cpsid	i
 8009c56:	f383 8811 	msr	BASEPRI, r3
 8009c5a:	f3bf 8f6f 	isb	sy
 8009c5e:	f3bf 8f4f 	dsb	sy
 8009c62:	b662      	cpsie	i
 8009c64:	60fb      	str	r3, [r7, #12]
}
 8009c66:	bf00      	nop
 8009c68:	e7fe      	b.n	8009c68 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009c6a:	4b07      	ldr	r3, [pc, #28]	; (8009c88 <vTaskPlaceOnEventList+0x48>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	3318      	adds	r3, #24
 8009c70:	4619      	mov	r1, r3
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f7fe fe2d 	bl	80088d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009c78:	2101      	movs	r1, #1
 8009c7a:	6838      	ldr	r0, [r7, #0]
 8009c7c:	f000 fab6 	bl	800a1ec <prvAddCurrentTaskToDelayedList>
}
 8009c80:	bf00      	nop
 8009c82:	3710      	adds	r7, #16
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	200072c4 	.word	0x200072c4

08009c8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b086      	sub	sp, #24
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d10c      	bne.n	8009cb8 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8009c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca2:	b672      	cpsid	i
 8009ca4:	f383 8811 	msr	BASEPRI, r3
 8009ca8:	f3bf 8f6f 	isb	sy
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	b662      	cpsie	i
 8009cb2:	617b      	str	r3, [r7, #20]
}
 8009cb4:	bf00      	nop
 8009cb6:	e7fe      	b.n	8009cb6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009cb8:	4b0a      	ldr	r3, [pc, #40]	; (8009ce4 <vTaskPlaceOnEventListRestricted+0x58>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	3318      	adds	r3, #24
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	f7fe fde2 	bl	800888a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d002      	beq.n	8009cd2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8009ccc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cd0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009cd2:	6879      	ldr	r1, [r7, #4]
 8009cd4:	68b8      	ldr	r0, [r7, #8]
 8009cd6:	f000 fa89 	bl	800a1ec <prvAddCurrentTaskToDelayedList>
	}
 8009cda:	bf00      	nop
 8009cdc:	3718      	adds	r7, #24
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	200072c4 	.word	0x200072c4

08009ce8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b086      	sub	sp, #24
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	68db      	ldr	r3, [r3, #12]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d10c      	bne.n	8009d18 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8009cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d02:	b672      	cpsid	i
 8009d04:	f383 8811 	msr	BASEPRI, r3
 8009d08:	f3bf 8f6f 	isb	sy
 8009d0c:	f3bf 8f4f 	dsb	sy
 8009d10:	b662      	cpsie	i
 8009d12:	60fb      	str	r3, [r7, #12]
}
 8009d14:	bf00      	nop
 8009d16:	e7fe      	b.n	8009d16 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	3318      	adds	r3, #24
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	f7fe fe11 	bl	8008944 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d22:	4b1e      	ldr	r3, [pc, #120]	; (8009d9c <xTaskRemoveFromEventList+0xb4>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d11d      	bne.n	8009d66 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	3304      	adds	r3, #4
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7fe fe08 	bl	8008944 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d38:	4b19      	ldr	r3, [pc, #100]	; (8009da0 <xTaskRemoveFromEventList+0xb8>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d903      	bls.n	8009d48 <xTaskRemoveFromEventList+0x60>
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d44:	4a16      	ldr	r2, [pc, #88]	; (8009da0 <xTaskRemoveFromEventList+0xb8>)
 8009d46:	6013      	str	r3, [r2, #0]
 8009d48:	693b      	ldr	r3, [r7, #16]
 8009d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d4c:	4613      	mov	r3, r2
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	4413      	add	r3, r2
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	4a13      	ldr	r2, [pc, #76]	; (8009da4 <xTaskRemoveFromEventList+0xbc>)
 8009d56:	441a      	add	r2, r3
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	3304      	adds	r3, #4
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	4610      	mov	r0, r2
 8009d60:	f7fe fd93 	bl	800888a <vListInsertEnd>
 8009d64:	e005      	b.n	8009d72 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	3318      	adds	r3, #24
 8009d6a:	4619      	mov	r1, r3
 8009d6c:	480e      	ldr	r0, [pc, #56]	; (8009da8 <xTaskRemoveFromEventList+0xc0>)
 8009d6e:	f7fe fd8c 	bl	800888a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d76:	4b0d      	ldr	r3, [pc, #52]	; (8009dac <xTaskRemoveFromEventList+0xc4>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d905      	bls.n	8009d8c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009d80:	2301      	movs	r3, #1
 8009d82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009d84:	4b0a      	ldr	r3, [pc, #40]	; (8009db0 <xTaskRemoveFromEventList+0xc8>)
 8009d86:	2201      	movs	r2, #1
 8009d88:	601a      	str	r2, [r3, #0]
 8009d8a:	e001      	b.n	8009d90 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009d90:	697b      	ldr	r3, [r7, #20]
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3718      	adds	r7, #24
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	200077c0 	.word	0x200077c0
 8009da0:	200077a0 	.word	0x200077a0
 8009da4:	200072c8 	.word	0x200072c8
 8009da8:	20007758 	.word	0x20007758
 8009dac:	200072c4 	.word	0x200072c4
 8009db0:	200077ac 	.word	0x200077ac

08009db4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d10c      	bne.n	8009ddc <vTaskSetTimeOutState+0x28>
	__asm volatile
 8009dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc6:	b672      	cpsid	i
 8009dc8:	f383 8811 	msr	BASEPRI, r3
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	f3bf 8f4f 	dsb	sy
 8009dd4:	b662      	cpsie	i
 8009dd6:	60fb      	str	r3, [r7, #12]
}
 8009dd8:	bf00      	nop
 8009dda:	e7fe      	b.n	8009dda <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 8009ddc:	f000 fec6 	bl	800ab6c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009de0:	4b06      	ldr	r3, [pc, #24]	; (8009dfc <vTaskSetTimeOutState+0x48>)
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8009de8:	4b05      	ldr	r3, [pc, #20]	; (8009e00 <vTaskSetTimeOutState+0x4c>)
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8009df0:	f000 fef0 	bl	800abd4 <vPortExitCritical>
}
 8009df4:	bf00      	nop
 8009df6:	3710      	adds	r7, #16
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	200077b0 	.word	0x200077b0
 8009e00:	2000779c 	.word	0x2000779c

08009e04 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009e0c:	4b06      	ldr	r3, [pc, #24]	; (8009e28 <vTaskInternalSetTimeOutState+0x24>)
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009e14:	4b05      	ldr	r3, [pc, #20]	; (8009e2c <vTaskInternalSetTimeOutState+0x28>)
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	605a      	str	r2, [r3, #4]
}
 8009e1c:	bf00      	nop
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr
 8009e28:	200077b0 	.word	0x200077b0
 8009e2c:	2000779c 	.word	0x2000779c

08009e30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b088      	sub	sp, #32
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
 8009e38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d10c      	bne.n	8009e5a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e44:	b672      	cpsid	i
 8009e46:	f383 8811 	msr	BASEPRI, r3
 8009e4a:	f3bf 8f6f 	isb	sy
 8009e4e:	f3bf 8f4f 	dsb	sy
 8009e52:	b662      	cpsie	i
 8009e54:	613b      	str	r3, [r7, #16]
}
 8009e56:	bf00      	nop
 8009e58:	e7fe      	b.n	8009e58 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d10c      	bne.n	8009e7a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e64:	b672      	cpsid	i
 8009e66:	f383 8811 	msr	BASEPRI, r3
 8009e6a:	f3bf 8f6f 	isb	sy
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	b662      	cpsie	i
 8009e74:	60fb      	str	r3, [r7, #12]
}
 8009e76:	bf00      	nop
 8009e78:	e7fe      	b.n	8009e78 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8009e7a:	f000 fe77 	bl	800ab6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009e7e:	4b1d      	ldr	r3, [pc, #116]	; (8009ef4 <xTaskCheckForTimeOut+0xc4>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	69ba      	ldr	r2, [r7, #24]
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e96:	d102      	bne.n	8009e9e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	61fb      	str	r3, [r7, #28]
 8009e9c:	e023      	b.n	8009ee6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	4b15      	ldr	r3, [pc, #84]	; (8009ef8 <xTaskCheckForTimeOut+0xc8>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d007      	beq.n	8009eba <xTaskCheckForTimeOut+0x8a>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	69ba      	ldr	r2, [r7, #24]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d302      	bcc.n	8009eba <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	61fb      	str	r3, [r7, #28]
 8009eb8:	e015      	b.n	8009ee6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	697a      	ldr	r2, [r7, #20]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d20b      	bcs.n	8009edc <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	1ad2      	subs	r2, r2, r3
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f7ff ff97 	bl	8009e04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	61fb      	str	r3, [r7, #28]
 8009eda:	e004      	b.n	8009ee6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009ee6:	f000 fe75 	bl	800abd4 <vPortExitCritical>

	return xReturn;
 8009eea:	69fb      	ldr	r3, [r7, #28]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3720      	adds	r7, #32
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}
 8009ef4:	2000779c 	.word	0x2000779c
 8009ef8:	200077b0 	.word	0x200077b0

08009efc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009efc:	b480      	push	{r7}
 8009efe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009f00:	4b03      	ldr	r3, [pc, #12]	; (8009f10 <vTaskMissedYield+0x14>)
 8009f02:	2201      	movs	r2, #1
 8009f04:	601a      	str	r2, [r3, #0]
}
 8009f06:	bf00      	nop
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr
 8009f10:	200077ac 	.word	0x200077ac

08009f14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009f1c:	f000 f852 	bl	8009fc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009f20:	4b06      	ldr	r3, [pc, #24]	; (8009f3c <prvIdleTask+0x28>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	d9f9      	bls.n	8009f1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009f28:	4b05      	ldr	r3, [pc, #20]	; (8009f40 <prvIdleTask+0x2c>)
 8009f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f2e:	601a      	str	r2, [r3, #0]
 8009f30:	f3bf 8f4f 	dsb	sy
 8009f34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009f38:	e7f0      	b.n	8009f1c <prvIdleTask+0x8>
 8009f3a:	bf00      	nop
 8009f3c:	200072c8 	.word	0x200072c8
 8009f40:	e000ed04 	.word	0xe000ed04

08009f44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	607b      	str	r3, [r7, #4]
 8009f4e:	e00c      	b.n	8009f6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	4613      	mov	r3, r2
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	4413      	add	r3, r2
 8009f58:	009b      	lsls	r3, r3, #2
 8009f5a:	4a12      	ldr	r2, [pc, #72]	; (8009fa4 <prvInitialiseTaskLists+0x60>)
 8009f5c:	4413      	add	r3, r2
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fe fc66 	bl	8008830 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	3301      	adds	r3, #1
 8009f68:	607b      	str	r3, [r7, #4]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2b37      	cmp	r3, #55	; 0x37
 8009f6e:	d9ef      	bls.n	8009f50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009f70:	480d      	ldr	r0, [pc, #52]	; (8009fa8 <prvInitialiseTaskLists+0x64>)
 8009f72:	f7fe fc5d 	bl	8008830 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009f76:	480d      	ldr	r0, [pc, #52]	; (8009fac <prvInitialiseTaskLists+0x68>)
 8009f78:	f7fe fc5a 	bl	8008830 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009f7c:	480c      	ldr	r0, [pc, #48]	; (8009fb0 <prvInitialiseTaskLists+0x6c>)
 8009f7e:	f7fe fc57 	bl	8008830 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009f82:	480c      	ldr	r0, [pc, #48]	; (8009fb4 <prvInitialiseTaskLists+0x70>)
 8009f84:	f7fe fc54 	bl	8008830 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009f88:	480b      	ldr	r0, [pc, #44]	; (8009fb8 <prvInitialiseTaskLists+0x74>)
 8009f8a:	f7fe fc51 	bl	8008830 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009f8e:	4b0b      	ldr	r3, [pc, #44]	; (8009fbc <prvInitialiseTaskLists+0x78>)
 8009f90:	4a05      	ldr	r2, [pc, #20]	; (8009fa8 <prvInitialiseTaskLists+0x64>)
 8009f92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009f94:	4b0a      	ldr	r3, [pc, #40]	; (8009fc0 <prvInitialiseTaskLists+0x7c>)
 8009f96:	4a05      	ldr	r2, [pc, #20]	; (8009fac <prvInitialiseTaskLists+0x68>)
 8009f98:	601a      	str	r2, [r3, #0]
}
 8009f9a:	bf00      	nop
 8009f9c:	3708      	adds	r7, #8
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	200072c8 	.word	0x200072c8
 8009fa8:	20007728 	.word	0x20007728
 8009fac:	2000773c 	.word	0x2000773c
 8009fb0:	20007758 	.word	0x20007758
 8009fb4:	2000776c 	.word	0x2000776c
 8009fb8:	20007784 	.word	0x20007784
 8009fbc:	20007750 	.word	0x20007750
 8009fc0:	20007754 	.word	0x20007754

08009fc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009fca:	e019      	b.n	800a000 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009fcc:	f000 fdce 	bl	800ab6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fd0:	4b10      	ldr	r3, [pc, #64]	; (800a014 <prvCheckTasksWaitingTermination+0x50>)
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	3304      	adds	r3, #4
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f7fe fcb1 	bl	8008944 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009fe2:	4b0d      	ldr	r3, [pc, #52]	; (800a018 <prvCheckTasksWaitingTermination+0x54>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	4a0b      	ldr	r2, [pc, #44]	; (800a018 <prvCheckTasksWaitingTermination+0x54>)
 8009fea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009fec:	4b0b      	ldr	r3, [pc, #44]	; (800a01c <prvCheckTasksWaitingTermination+0x58>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	4a0a      	ldr	r2, [pc, #40]	; (800a01c <prvCheckTasksWaitingTermination+0x58>)
 8009ff4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ff6:	f000 fded 	bl	800abd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f000 f810 	bl	800a020 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a000:	4b06      	ldr	r3, [pc, #24]	; (800a01c <prvCheckTasksWaitingTermination+0x58>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1e1      	bne.n	8009fcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a008:	bf00      	nop
 800a00a:	bf00      	nop
 800a00c:	3708      	adds	r7, #8
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
 800a012:	bf00      	nop
 800a014:	2000776c 	.word	0x2000776c
 800a018:	20007798 	.word	0x20007798
 800a01c:	20007780 	.word	0x20007780

0800a020 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	3354      	adds	r3, #84	; 0x54
 800a02c:	4618      	mov	r0, r3
 800a02e:	f010 fb39 	bl	801a6a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d108      	bne.n	800a04e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a040:	4618      	mov	r0, r3
 800a042:	f000 ff89 	bl	800af58 <vPortFree>
				vPortFree( pxTCB );
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 ff86 	bl	800af58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a04c:	e01a      	b.n	800a084 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a054:	2b01      	cmp	r3, #1
 800a056:	d103      	bne.n	800a060 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 ff7d 	bl	800af58 <vPortFree>
	}
 800a05e:	e011      	b.n	800a084 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a066:	2b02      	cmp	r3, #2
 800a068:	d00c      	beq.n	800a084 <prvDeleteTCB+0x64>
	__asm volatile
 800a06a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a06e:	b672      	cpsid	i
 800a070:	f383 8811 	msr	BASEPRI, r3
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	b662      	cpsie	i
 800a07e:	60fb      	str	r3, [r7, #12]
}
 800a080:	bf00      	nop
 800a082:	e7fe      	b.n	800a082 <prvDeleteTCB+0x62>
	}
 800a084:	bf00      	nop
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a092:	4b0c      	ldr	r3, [pc, #48]	; (800a0c4 <prvResetNextTaskUnblockTime+0x38>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d104      	bne.n	800a0a6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a09c:	4b0a      	ldr	r3, [pc, #40]	; (800a0c8 <prvResetNextTaskUnblockTime+0x3c>)
 800a09e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0a2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a0a4:	e008      	b.n	800a0b8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0a6:	4b07      	ldr	r3, [pc, #28]	; (800a0c4 <prvResetNextTaskUnblockTime+0x38>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	68db      	ldr	r3, [r3, #12]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	4a04      	ldr	r2, [pc, #16]	; (800a0c8 <prvResetNextTaskUnblockTime+0x3c>)
 800a0b6:	6013      	str	r3, [r2, #0]
}
 800a0b8:	bf00      	nop
 800a0ba:	370c      	adds	r7, #12
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr
 800a0c4:	20007750 	.word	0x20007750
 800a0c8:	200077b8 	.word	0x200077b8

0800a0cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a0d2:	4b0b      	ldr	r3, [pc, #44]	; (800a100 <xTaskGetSchedulerState+0x34>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d102      	bne.n	800a0e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	607b      	str	r3, [r7, #4]
 800a0de:	e008      	b.n	800a0f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0e0:	4b08      	ldr	r3, [pc, #32]	; (800a104 <xTaskGetSchedulerState+0x38>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d102      	bne.n	800a0ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a0e8:	2302      	movs	r3, #2
 800a0ea:	607b      	str	r3, [r7, #4]
 800a0ec:	e001      	b.n	800a0f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a0f2:	687b      	ldr	r3, [r7, #4]
	}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr
 800a100:	200077a4 	.word	0x200077a4
 800a104:	200077c0 	.word	0x200077c0

0800a108 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b086      	sub	sp, #24
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a114:	2300      	movs	r3, #0
 800a116:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d05a      	beq.n	800a1d4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a11e:	4b30      	ldr	r3, [pc, #192]	; (800a1e0 <xTaskPriorityDisinherit+0xd8>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	693a      	ldr	r2, [r7, #16]
 800a124:	429a      	cmp	r2, r3
 800a126:	d00c      	beq.n	800a142 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800a128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12c:	b672      	cpsid	i
 800a12e:	f383 8811 	msr	BASEPRI, r3
 800a132:	f3bf 8f6f 	isb	sy
 800a136:	f3bf 8f4f 	dsb	sy
 800a13a:	b662      	cpsie	i
 800a13c:	60fb      	str	r3, [r7, #12]
}
 800a13e:	bf00      	nop
 800a140:	e7fe      	b.n	800a140 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10c      	bne.n	800a164 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800a14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14e:	b672      	cpsid	i
 800a150:	f383 8811 	msr	BASEPRI, r3
 800a154:	f3bf 8f6f 	isb	sy
 800a158:	f3bf 8f4f 	dsb	sy
 800a15c:	b662      	cpsie	i
 800a15e:	60bb      	str	r3, [r7, #8]
}
 800a160:	bf00      	nop
 800a162:	e7fe      	b.n	800a162 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a168:	1e5a      	subs	r2, r3, #1
 800a16a:	693b      	ldr	r3, [r7, #16]
 800a16c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a176:	429a      	cmp	r2, r3
 800a178:	d02c      	beq.n	800a1d4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d128      	bne.n	800a1d4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	3304      	adds	r3, #4
 800a186:	4618      	mov	r0, r3
 800a188:	f7fe fbdc 	bl	8008944 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a198:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a4:	4b0f      	ldr	r3, [pc, #60]	; (800a1e4 <xTaskPriorityDisinherit+0xdc>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d903      	bls.n	800a1b4 <xTaskPriorityDisinherit+0xac>
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b0:	4a0c      	ldr	r2, [pc, #48]	; (800a1e4 <xTaskPriorityDisinherit+0xdc>)
 800a1b2:	6013      	str	r3, [r2, #0]
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	4413      	add	r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	4a09      	ldr	r2, [pc, #36]	; (800a1e8 <xTaskPriorityDisinherit+0xe0>)
 800a1c2:	441a      	add	r2, r3
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	3304      	adds	r3, #4
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	4610      	mov	r0, r2
 800a1cc:	f7fe fb5d 	bl	800888a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a1d4:	697b      	ldr	r3, [r7, #20]
	}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3718      	adds	r7, #24
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	200072c4 	.word	0x200072c4
 800a1e4:	200077a0 	.word	0x200077a0
 800a1e8:	200072c8 	.word	0x200072c8

0800a1ec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a1f6:	4b21      	ldr	r3, [pc, #132]	; (800a27c <prvAddCurrentTaskToDelayedList+0x90>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1fc:	4b20      	ldr	r3, [pc, #128]	; (800a280 <prvAddCurrentTaskToDelayedList+0x94>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	3304      	adds	r3, #4
 800a202:	4618      	mov	r0, r3
 800a204:	f7fe fb9e 	bl	8008944 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a20e:	d10a      	bne.n	800a226 <prvAddCurrentTaskToDelayedList+0x3a>
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d007      	beq.n	800a226 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a216:	4b1a      	ldr	r3, [pc, #104]	; (800a280 <prvAddCurrentTaskToDelayedList+0x94>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	3304      	adds	r3, #4
 800a21c:	4619      	mov	r1, r3
 800a21e:	4819      	ldr	r0, [pc, #100]	; (800a284 <prvAddCurrentTaskToDelayedList+0x98>)
 800a220:	f7fe fb33 	bl	800888a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a224:	e026      	b.n	800a274 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4413      	add	r3, r2
 800a22c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a22e:	4b14      	ldr	r3, [pc, #80]	; (800a280 <prvAddCurrentTaskToDelayedList+0x94>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	68ba      	ldr	r2, [r7, #8]
 800a234:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a236:	68ba      	ldr	r2, [r7, #8]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d209      	bcs.n	800a252 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a23e:	4b12      	ldr	r3, [pc, #72]	; (800a288 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	4b0f      	ldr	r3, [pc, #60]	; (800a280 <prvAddCurrentTaskToDelayedList+0x94>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	3304      	adds	r3, #4
 800a248:	4619      	mov	r1, r3
 800a24a:	4610      	mov	r0, r2
 800a24c:	f7fe fb41 	bl	80088d2 <vListInsert>
}
 800a250:	e010      	b.n	800a274 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a252:	4b0e      	ldr	r3, [pc, #56]	; (800a28c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	4b0a      	ldr	r3, [pc, #40]	; (800a280 <prvAddCurrentTaskToDelayedList+0x94>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	3304      	adds	r3, #4
 800a25c:	4619      	mov	r1, r3
 800a25e:	4610      	mov	r0, r2
 800a260:	f7fe fb37 	bl	80088d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a264:	4b0a      	ldr	r3, [pc, #40]	; (800a290 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d202      	bcs.n	800a274 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a26e:	4a08      	ldr	r2, [pc, #32]	; (800a290 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	6013      	str	r3, [r2, #0]
}
 800a274:	bf00      	nop
 800a276:	3710      	adds	r7, #16
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	2000779c 	.word	0x2000779c
 800a280:	200072c4 	.word	0x200072c4
 800a284:	20007784 	.word	0x20007784
 800a288:	20007754 	.word	0x20007754
 800a28c:	20007750 	.word	0x20007750
 800a290:	200077b8 	.word	0x200077b8

0800a294 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b08a      	sub	sp, #40	; 0x28
 800a298:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a29a:	2300      	movs	r3, #0
 800a29c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a29e:	f000 fb15 	bl	800a8cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a2a2:	4b1d      	ldr	r3, [pc, #116]	; (800a318 <xTimerCreateTimerTask+0x84>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d021      	beq.n	800a2ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a2b2:	1d3a      	adds	r2, r7, #4
 800a2b4:	f107 0108 	add.w	r1, r7, #8
 800a2b8:	f107 030c 	add.w	r3, r7, #12
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f7fe fa9d 	bl	80087fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a2c2:	6879      	ldr	r1, [r7, #4]
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	9202      	str	r2, [sp, #8]
 800a2ca:	9301      	str	r3, [sp, #4]
 800a2cc:	2302      	movs	r3, #2
 800a2ce:	9300      	str	r3, [sp, #0]
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	460a      	mov	r2, r1
 800a2d4:	4911      	ldr	r1, [pc, #68]	; (800a31c <xTimerCreateTimerTask+0x88>)
 800a2d6:	4812      	ldr	r0, [pc, #72]	; (800a320 <xTimerCreateTimerTask+0x8c>)
 800a2d8:	f7ff f868 	bl	80093ac <xTaskCreateStatic>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	4a11      	ldr	r2, [pc, #68]	; (800a324 <xTimerCreateTimerTask+0x90>)
 800a2e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a2e2:	4b10      	ldr	r3, [pc, #64]	; (800a324 <xTimerCreateTimerTask+0x90>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d001      	beq.n	800a2ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d10c      	bne.n	800a30e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800a2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2f8:	b672      	cpsid	i
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	b662      	cpsie	i
 800a308:	613b      	str	r3, [r7, #16]
}
 800a30a:	bf00      	nop
 800a30c:	e7fe      	b.n	800a30c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800a30e:	697b      	ldr	r3, [r7, #20]
}
 800a310:	4618      	mov	r0, r3
 800a312:	3718      	adds	r7, #24
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	200077f4 	.word	0x200077f4
 800a31c:	0801b65c 	.word	0x0801b65c
 800a320:	0800a465 	.word	0x0800a465
 800a324:	200077f8 	.word	0x200077f8

0800a328 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b08a      	sub	sp, #40	; 0x28
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	60b9      	str	r1, [r7, #8]
 800a332:	607a      	str	r2, [r7, #4]
 800a334:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a336:	2300      	movs	r3, #0
 800a338:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d10c      	bne.n	800a35a <xTimerGenericCommand+0x32>
	__asm volatile
 800a340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a344:	b672      	cpsid	i
 800a346:	f383 8811 	msr	BASEPRI, r3
 800a34a:	f3bf 8f6f 	isb	sy
 800a34e:	f3bf 8f4f 	dsb	sy
 800a352:	b662      	cpsie	i
 800a354:	623b      	str	r3, [r7, #32]
}
 800a356:	bf00      	nop
 800a358:	e7fe      	b.n	800a358 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a35a:	4b1a      	ldr	r3, [pc, #104]	; (800a3c4 <xTimerGenericCommand+0x9c>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d02a      	beq.n	800a3b8 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	2b05      	cmp	r3, #5
 800a372:	dc18      	bgt.n	800a3a6 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a374:	f7ff feaa 	bl	800a0cc <xTaskGetSchedulerState>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d109      	bne.n	800a392 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a37e:	4b11      	ldr	r3, [pc, #68]	; (800a3c4 <xTimerGenericCommand+0x9c>)
 800a380:	6818      	ldr	r0, [r3, #0]
 800a382:	f107 0110 	add.w	r1, r7, #16
 800a386:	2300      	movs	r3, #0
 800a388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a38a:	f7fe fc15 	bl	8008bb8 <xQueueGenericSend>
 800a38e:	6278      	str	r0, [r7, #36]	; 0x24
 800a390:	e012      	b.n	800a3b8 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a392:	4b0c      	ldr	r3, [pc, #48]	; (800a3c4 <xTimerGenericCommand+0x9c>)
 800a394:	6818      	ldr	r0, [r3, #0]
 800a396:	f107 0110 	add.w	r1, r7, #16
 800a39a:	2300      	movs	r3, #0
 800a39c:	2200      	movs	r2, #0
 800a39e:	f7fe fc0b 	bl	8008bb8 <xQueueGenericSend>
 800a3a2:	6278      	str	r0, [r7, #36]	; 0x24
 800a3a4:	e008      	b.n	800a3b8 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a3a6:	4b07      	ldr	r3, [pc, #28]	; (800a3c4 <xTimerGenericCommand+0x9c>)
 800a3a8:	6818      	ldr	r0, [r3, #0]
 800a3aa:	f107 0110 	add.w	r1, r7, #16
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	683a      	ldr	r2, [r7, #0]
 800a3b2:	f7fe fd07 	bl	8008dc4 <xQueueGenericSendFromISR>
 800a3b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3728      	adds	r7, #40	; 0x28
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	200077f4 	.word	0x200077f4

0800a3c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b088      	sub	sp, #32
 800a3cc:	af02      	add	r7, sp, #8
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3d2:	4b23      	ldr	r3, [pc, #140]	; (800a460 <prvProcessExpiredTimer+0x98>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	3304      	adds	r3, #4
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f7fe faaf 	bl	8008944 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3ec:	f003 0304 	and.w	r3, r3, #4
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d024      	beq.n	800a43e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	699a      	ldr	r2, [r3, #24]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	18d1      	adds	r1, r2, r3
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	683a      	ldr	r2, [r7, #0]
 800a400:	6978      	ldr	r0, [r7, #20]
 800a402:	f000 f8d3 	bl	800a5ac <prvInsertTimerInActiveList>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d021      	beq.n	800a450 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a40c:	2300      	movs	r3, #0
 800a40e:	9300      	str	r3, [sp, #0]
 800a410:	2300      	movs	r3, #0
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	2100      	movs	r1, #0
 800a416:	6978      	ldr	r0, [r7, #20]
 800a418:	f7ff ff86 	bl	800a328 <xTimerGenericCommand>
 800a41c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d115      	bne.n	800a450 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800a424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a428:	b672      	cpsid	i
 800a42a:	f383 8811 	msr	BASEPRI, r3
 800a42e:	f3bf 8f6f 	isb	sy
 800a432:	f3bf 8f4f 	dsb	sy
 800a436:	b662      	cpsie	i
 800a438:	60fb      	str	r3, [r7, #12]
}
 800a43a:	bf00      	nop
 800a43c:	e7fe      	b.n	800a43c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a444:	f023 0301 	bic.w	r3, r3, #1
 800a448:	b2da      	uxtb	r2, r3
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	6a1b      	ldr	r3, [r3, #32]
 800a454:	6978      	ldr	r0, [r7, #20]
 800a456:	4798      	blx	r3
}
 800a458:	bf00      	nop
 800a45a:	3718      	adds	r7, #24
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	200077ec 	.word	0x200077ec

0800a464 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a46c:	f107 0308 	add.w	r3, r7, #8
 800a470:	4618      	mov	r0, r3
 800a472:	f000 f857 	bl	800a524 <prvGetNextExpireTime>
 800a476:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	4619      	mov	r1, r3
 800a47c:	68f8      	ldr	r0, [r7, #12]
 800a47e:	f000 f803 	bl	800a488 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a482:	f000 f8d5 	bl	800a630 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a486:	e7f1      	b.n	800a46c <prvTimerTask+0x8>

0800a488 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a492:	f7ff f9f5 	bl	8009880 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a496:	f107 0308 	add.w	r3, r7, #8
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 f866 	bl	800a56c <prvSampleTimeNow>
 800a4a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d130      	bne.n	800a50a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d10a      	bne.n	800a4c4 <prvProcessTimerOrBlockTask+0x3c>
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d806      	bhi.n	800a4c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a4b6:	f7ff f9f1 	bl	800989c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a4ba:	68f9      	ldr	r1, [r7, #12]
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f7ff ff83 	bl	800a3c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a4c2:	e024      	b.n	800a50e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d008      	beq.n	800a4dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a4ca:	4b13      	ldr	r3, [pc, #76]	; (800a518 <prvProcessTimerOrBlockTask+0x90>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d101      	bne.n	800a4d8 <prvProcessTimerOrBlockTask+0x50>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e000      	b.n	800a4da <prvProcessTimerOrBlockTask+0x52>
 800a4d8:	2300      	movs	r3, #0
 800a4da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a4dc:	4b0f      	ldr	r3, [pc, #60]	; (800a51c <prvProcessTimerOrBlockTask+0x94>)
 800a4de:	6818      	ldr	r0, [r3, #0]
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	1ad3      	subs	r3, r2, r3
 800a4e6:	683a      	ldr	r2, [r7, #0]
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	f7fe ff2b 	bl	8009344 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a4ee:	f7ff f9d5 	bl	800989c <xTaskResumeAll>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d10a      	bne.n	800a50e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a4f8:	4b09      	ldr	r3, [pc, #36]	; (800a520 <prvProcessTimerOrBlockTask+0x98>)
 800a4fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4fe:	601a      	str	r2, [r3, #0]
 800a500:	f3bf 8f4f 	dsb	sy
 800a504:	f3bf 8f6f 	isb	sy
}
 800a508:	e001      	b.n	800a50e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a50a:	f7ff f9c7 	bl	800989c <xTaskResumeAll>
}
 800a50e:	bf00      	nop
 800a510:	3710      	adds	r7, #16
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	200077f0 	.word	0x200077f0
 800a51c:	200077f4 	.word	0x200077f4
 800a520:	e000ed04 	.word	0xe000ed04

0800a524 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a524:	b480      	push	{r7}
 800a526:	b085      	sub	sp, #20
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a52c:	4b0e      	ldr	r3, [pc, #56]	; (800a568 <prvGetNextExpireTime+0x44>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d101      	bne.n	800a53a <prvGetNextExpireTime+0x16>
 800a536:	2201      	movs	r2, #1
 800a538:	e000      	b.n	800a53c <prvGetNextExpireTime+0x18>
 800a53a:	2200      	movs	r2, #0
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d105      	bne.n	800a554 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a548:	4b07      	ldr	r3, [pc, #28]	; (800a568 <prvGetNextExpireTime+0x44>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	68db      	ldr	r3, [r3, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	60fb      	str	r3, [r7, #12]
 800a552:	e001      	b.n	800a558 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a554:	2300      	movs	r3, #0
 800a556:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a558:	68fb      	ldr	r3, [r7, #12]
}
 800a55a:	4618      	mov	r0, r3
 800a55c:	3714      	adds	r7, #20
 800a55e:	46bd      	mov	sp, r7
 800a560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a564:	4770      	bx	lr
 800a566:	bf00      	nop
 800a568:	200077ec 	.word	0x200077ec

0800a56c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a574:	f7ff fa32 	bl	80099dc <xTaskGetTickCount>
 800a578:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a57a:	4b0b      	ldr	r3, [pc, #44]	; (800a5a8 <prvSampleTimeNow+0x3c>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	68fa      	ldr	r2, [r7, #12]
 800a580:	429a      	cmp	r2, r3
 800a582:	d205      	bcs.n	800a590 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a584:	f000 f93c 	bl	800a800 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	601a      	str	r2, [r3, #0]
 800a58e:	e002      	b.n	800a596 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a596:	4a04      	ldr	r2, [pc, #16]	; (800a5a8 <prvSampleTimeNow+0x3c>)
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a59c:	68fb      	ldr	r3, [r7, #12]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	200077fc 	.word	0x200077fc

0800a5ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b086      	sub	sp, #24
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	607a      	str	r2, [r7, #4]
 800a5b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	68ba      	ldr	r2, [r7, #8]
 800a5c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	68fa      	ldr	r2, [r7, #12]
 800a5c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a5ca:	68ba      	ldr	r2, [r7, #8]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d812      	bhi.n	800a5f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	1ad2      	subs	r2, r2, r3
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	699b      	ldr	r3, [r3, #24]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d302      	bcc.n	800a5e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	617b      	str	r3, [r7, #20]
 800a5e4:	e01b      	b.n	800a61e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a5e6:	4b10      	ldr	r3, [pc, #64]	; (800a628 <prvInsertTimerInActiveList+0x7c>)
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	3304      	adds	r3, #4
 800a5ee:	4619      	mov	r1, r3
 800a5f0:	4610      	mov	r0, r2
 800a5f2:	f7fe f96e 	bl	80088d2 <vListInsert>
 800a5f6:	e012      	b.n	800a61e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d206      	bcs.n	800a60e <prvInsertTimerInActiveList+0x62>
 800a600:	68ba      	ldr	r2, [r7, #8]
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	429a      	cmp	r2, r3
 800a606:	d302      	bcc.n	800a60e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a608:	2301      	movs	r3, #1
 800a60a:	617b      	str	r3, [r7, #20]
 800a60c:	e007      	b.n	800a61e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a60e:	4b07      	ldr	r3, [pc, #28]	; (800a62c <prvInsertTimerInActiveList+0x80>)
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	3304      	adds	r3, #4
 800a616:	4619      	mov	r1, r3
 800a618:	4610      	mov	r0, r2
 800a61a:	f7fe f95a 	bl	80088d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a61e:	697b      	ldr	r3, [r7, #20]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3718      	adds	r7, #24
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	200077f0 	.word	0x200077f0
 800a62c:	200077ec 	.word	0x200077ec

0800a630 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b08e      	sub	sp, #56	; 0x38
 800a634:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a636:	e0d0      	b.n	800a7da <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	da1a      	bge.n	800a674 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a63e:	1d3b      	adds	r3, r7, #4
 800a640:	3304      	adds	r3, #4
 800a642:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a646:	2b00      	cmp	r3, #0
 800a648:	d10c      	bne.n	800a664 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800a64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64e:	b672      	cpsid	i
 800a650:	f383 8811 	msr	BASEPRI, r3
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	b662      	cpsie	i
 800a65e:	61fb      	str	r3, [r7, #28]
}
 800a660:	bf00      	nop
 800a662:	e7fe      	b.n	800a662 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a66a:	6850      	ldr	r0, [r2, #4]
 800a66c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a66e:	6892      	ldr	r2, [r2, #8]
 800a670:	4611      	mov	r1, r2
 800a672:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	f2c0 80af 	blt.w	800a7da <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a682:	695b      	ldr	r3, [r3, #20]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d004      	beq.n	800a692 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a68a:	3304      	adds	r3, #4
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7fe f959 	bl	8008944 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a692:	463b      	mov	r3, r7
 800a694:	4618      	mov	r0, r3
 800a696:	f7ff ff69 	bl	800a56c <prvSampleTimeNow>
 800a69a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2b09      	cmp	r3, #9
 800a6a0:	f200 809a 	bhi.w	800a7d8 <prvProcessReceivedCommands+0x1a8>
 800a6a4:	a201      	add	r2, pc, #4	; (adr r2, 800a6ac <prvProcessReceivedCommands+0x7c>)
 800a6a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6aa:	bf00      	nop
 800a6ac:	0800a6d5 	.word	0x0800a6d5
 800a6b0:	0800a6d5 	.word	0x0800a6d5
 800a6b4:	0800a6d5 	.word	0x0800a6d5
 800a6b8:	0800a74d 	.word	0x0800a74d
 800a6bc:	0800a761 	.word	0x0800a761
 800a6c0:	0800a7af 	.word	0x0800a7af
 800a6c4:	0800a6d5 	.word	0x0800a6d5
 800a6c8:	0800a6d5 	.word	0x0800a6d5
 800a6cc:	0800a74d 	.word	0x0800a74d
 800a6d0:	0800a761 	.word	0x0800a761
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6da:	f043 0301 	orr.w	r3, r3, #1
 800a6de:	b2da      	uxtb	r2, r3
 800a6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a6e6:	68ba      	ldr	r2, [r7, #8]
 800a6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ea:	699b      	ldr	r3, [r3, #24]
 800a6ec:	18d1      	adds	r1, r2, r3
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6f4:	f7ff ff5a 	bl	800a5ac <prvInsertTimerInActiveList>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d06d      	beq.n	800a7da <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a700:	6a1b      	ldr	r3, [r3, #32]
 800a702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a704:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a708:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a70c:	f003 0304 	and.w	r3, r3, #4
 800a710:	2b00      	cmp	r3, #0
 800a712:	d062      	beq.n	800a7da <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a714:	68ba      	ldr	r2, [r7, #8]
 800a716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a718:	699b      	ldr	r3, [r3, #24]
 800a71a:	441a      	add	r2, r3
 800a71c:	2300      	movs	r3, #0
 800a71e:	9300      	str	r3, [sp, #0]
 800a720:	2300      	movs	r3, #0
 800a722:	2100      	movs	r1, #0
 800a724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a726:	f7ff fdff 	bl	800a328 <xTimerGenericCommand>
 800a72a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a72c:	6a3b      	ldr	r3, [r7, #32]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d153      	bne.n	800a7da <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800a732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a736:	b672      	cpsid	i
 800a738:	f383 8811 	msr	BASEPRI, r3
 800a73c:	f3bf 8f6f 	isb	sy
 800a740:	f3bf 8f4f 	dsb	sy
 800a744:	b662      	cpsie	i
 800a746:	61bb      	str	r3, [r7, #24]
}
 800a748:	bf00      	nop
 800a74a:	e7fe      	b.n	800a74a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a752:	f023 0301 	bic.w	r3, r3, #1
 800a756:	b2da      	uxtb	r2, r3
 800a758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a75e:	e03c      	b.n	800a7da <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a762:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a766:	f043 0301 	orr.w	r3, r3, #1
 800a76a:	b2da      	uxtb	r2, r3
 800a76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a76e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a772:	68ba      	ldr	r2, [r7, #8]
 800a774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a776:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77a:	699b      	ldr	r3, [r3, #24]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d10c      	bne.n	800a79a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800a780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a784:	b672      	cpsid	i
 800a786:	f383 8811 	msr	BASEPRI, r3
 800a78a:	f3bf 8f6f 	isb	sy
 800a78e:	f3bf 8f4f 	dsb	sy
 800a792:	b662      	cpsie	i
 800a794:	617b      	str	r3, [r7, #20]
}
 800a796:	bf00      	nop
 800a798:	e7fe      	b.n	800a798 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79c:	699a      	ldr	r2, [r3, #24]
 800a79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a0:	18d1      	adds	r1, r2, r3
 800a7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7a8:	f7ff ff00 	bl	800a5ac <prvInsertTimerInActiveList>
					break;
 800a7ac:	e015      	b.n	800a7da <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7b4:	f003 0302 	and.w	r3, r3, #2
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d103      	bne.n	800a7c4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800a7bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7be:	f000 fbcb 	bl	800af58 <vPortFree>
 800a7c2:	e00a      	b.n	800a7da <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7ca:	f023 0301 	bic.w	r3, r3, #1
 800a7ce:	b2da      	uxtb	r2, r3
 800a7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a7d6:	e000      	b.n	800a7da <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800a7d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a7da:	4b08      	ldr	r3, [pc, #32]	; (800a7fc <prvProcessReceivedCommands+0x1cc>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	1d39      	adds	r1, r7, #4
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fe fb8e 	bl	8008f04 <xQueueReceive>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	f47f af24 	bne.w	800a638 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a7f0:	bf00      	nop
 800a7f2:	bf00      	nop
 800a7f4:	3730      	adds	r7, #48	; 0x30
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	200077f4 	.word	0x200077f4

0800a800 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b088      	sub	sp, #32
 800a804:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a806:	e04a      	b.n	800a89e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a808:	4b2e      	ldr	r3, [pc, #184]	; (800a8c4 <prvSwitchTimerLists+0xc4>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a812:	4b2c      	ldr	r3, [pc, #176]	; (800a8c4 <prvSwitchTimerLists+0xc4>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	3304      	adds	r3, #4
 800a820:	4618      	mov	r0, r3
 800a822:	f7fe f88f 	bl	8008944 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	6a1b      	ldr	r3, [r3, #32]
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a834:	f003 0304 	and.w	r3, r3, #4
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d030      	beq.n	800a89e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	699b      	ldr	r3, [r3, #24]
 800a840:	693a      	ldr	r2, [r7, #16]
 800a842:	4413      	add	r3, r2
 800a844:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a846:	68ba      	ldr	r2, [r7, #8]
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d90e      	bls.n	800a86c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	68ba      	ldr	r2, [r7, #8]
 800a852:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	68fa      	ldr	r2, [r7, #12]
 800a858:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a85a:	4b1a      	ldr	r3, [pc, #104]	; (800a8c4 <prvSwitchTimerLists+0xc4>)
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	3304      	adds	r3, #4
 800a862:	4619      	mov	r1, r3
 800a864:	4610      	mov	r0, r2
 800a866:	f7fe f834 	bl	80088d2 <vListInsert>
 800a86a:	e018      	b.n	800a89e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a86c:	2300      	movs	r3, #0
 800a86e:	9300      	str	r3, [sp, #0]
 800a870:	2300      	movs	r3, #0
 800a872:	693a      	ldr	r2, [r7, #16]
 800a874:	2100      	movs	r1, #0
 800a876:	68f8      	ldr	r0, [r7, #12]
 800a878:	f7ff fd56 	bl	800a328 <xTimerGenericCommand>
 800a87c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d10c      	bne.n	800a89e <prvSwitchTimerLists+0x9e>
	__asm volatile
 800a884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a888:	b672      	cpsid	i
 800a88a:	f383 8811 	msr	BASEPRI, r3
 800a88e:	f3bf 8f6f 	isb	sy
 800a892:	f3bf 8f4f 	dsb	sy
 800a896:	b662      	cpsie	i
 800a898:	603b      	str	r3, [r7, #0]
}
 800a89a:	bf00      	nop
 800a89c:	e7fe      	b.n	800a89c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a89e:	4b09      	ldr	r3, [pc, #36]	; (800a8c4 <prvSwitchTimerLists+0xc4>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d1af      	bne.n	800a808 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a8a8:	4b06      	ldr	r3, [pc, #24]	; (800a8c4 <prvSwitchTimerLists+0xc4>)
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a8ae:	4b06      	ldr	r3, [pc, #24]	; (800a8c8 <prvSwitchTimerLists+0xc8>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4a04      	ldr	r2, [pc, #16]	; (800a8c4 <prvSwitchTimerLists+0xc4>)
 800a8b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a8b6:	4a04      	ldr	r2, [pc, #16]	; (800a8c8 <prvSwitchTimerLists+0xc8>)
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	6013      	str	r3, [r2, #0]
}
 800a8bc:	bf00      	nop
 800a8be:	3718      	adds	r7, #24
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	200077ec 	.word	0x200077ec
 800a8c8:	200077f0 	.word	0x200077f0

0800a8cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b082      	sub	sp, #8
 800a8d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a8d2:	f000 f94b 	bl	800ab6c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a8d6:	4b15      	ldr	r3, [pc, #84]	; (800a92c <prvCheckForValidListAndQueue+0x60>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d120      	bne.n	800a920 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a8de:	4814      	ldr	r0, [pc, #80]	; (800a930 <prvCheckForValidListAndQueue+0x64>)
 800a8e0:	f7fd ffa6 	bl	8008830 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a8e4:	4813      	ldr	r0, [pc, #76]	; (800a934 <prvCheckForValidListAndQueue+0x68>)
 800a8e6:	f7fd ffa3 	bl	8008830 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a8ea:	4b13      	ldr	r3, [pc, #76]	; (800a938 <prvCheckForValidListAndQueue+0x6c>)
 800a8ec:	4a10      	ldr	r2, [pc, #64]	; (800a930 <prvCheckForValidListAndQueue+0x64>)
 800a8ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a8f0:	4b12      	ldr	r3, [pc, #72]	; (800a93c <prvCheckForValidListAndQueue+0x70>)
 800a8f2:	4a10      	ldr	r2, [pc, #64]	; (800a934 <prvCheckForValidListAndQueue+0x68>)
 800a8f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	9300      	str	r3, [sp, #0]
 800a8fa:	4b11      	ldr	r3, [pc, #68]	; (800a940 <prvCheckForValidListAndQueue+0x74>)
 800a8fc:	4a11      	ldr	r2, [pc, #68]	; (800a944 <prvCheckForValidListAndQueue+0x78>)
 800a8fe:	2110      	movs	r1, #16
 800a900:	200a      	movs	r0, #10
 800a902:	f7fe f8b3 	bl	8008a6c <xQueueGenericCreateStatic>
 800a906:	4603      	mov	r3, r0
 800a908:	4a08      	ldr	r2, [pc, #32]	; (800a92c <prvCheckForValidListAndQueue+0x60>)
 800a90a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a90c:	4b07      	ldr	r3, [pc, #28]	; (800a92c <prvCheckForValidListAndQueue+0x60>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d005      	beq.n	800a920 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a914:	4b05      	ldr	r3, [pc, #20]	; (800a92c <prvCheckForValidListAndQueue+0x60>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	490b      	ldr	r1, [pc, #44]	; (800a948 <prvCheckForValidListAndQueue+0x7c>)
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7fe fce8 	bl	80092f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a920:	f000 f958 	bl	800abd4 <vPortExitCritical>
}
 800a924:	bf00      	nop
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop
 800a92c:	200077f4 	.word	0x200077f4
 800a930:	200077c4 	.word	0x200077c4
 800a934:	200077d8 	.word	0x200077d8
 800a938:	200077ec 	.word	0x200077ec
 800a93c:	200077f0 	.word	0x200077f0
 800a940:	200078a0 	.word	0x200078a0
 800a944:	20007800 	.word	0x20007800
 800a948:	0801b664 	.word	0x0801b664

0800a94c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a94c:	b480      	push	{r7}
 800a94e:	b085      	sub	sp, #20
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	3b04      	subs	r3, #4
 800a95c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a964:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	3b04      	subs	r3, #4
 800a96a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	f023 0201 	bic.w	r2, r3, #1
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	3b04      	subs	r3, #4
 800a97a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a97c:	4a0c      	ldr	r2, [pc, #48]	; (800a9b0 <pxPortInitialiseStack+0x64>)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	3b14      	subs	r3, #20
 800a986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	3b04      	subs	r3, #4
 800a992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f06f 0202 	mvn.w	r2, #2
 800a99a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	3b20      	subs	r3, #32
 800a9a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3714      	adds	r7, #20
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr
 800a9b0:	0800a9b5 	.word	0x0800a9b5

0800a9b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a9be:	4b14      	ldr	r3, [pc, #80]	; (800aa10 <prvTaskExitError+0x5c>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9c6:	d00c      	beq.n	800a9e2 <prvTaskExitError+0x2e>
	__asm volatile
 800a9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9cc:	b672      	cpsid	i
 800a9ce:	f383 8811 	msr	BASEPRI, r3
 800a9d2:	f3bf 8f6f 	isb	sy
 800a9d6:	f3bf 8f4f 	dsb	sy
 800a9da:	b662      	cpsie	i
 800a9dc:	60fb      	str	r3, [r7, #12]
}
 800a9de:	bf00      	nop
 800a9e0:	e7fe      	b.n	800a9e0 <prvTaskExitError+0x2c>
	__asm volatile
 800a9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e6:	b672      	cpsid	i
 800a9e8:	f383 8811 	msr	BASEPRI, r3
 800a9ec:	f3bf 8f6f 	isb	sy
 800a9f0:	f3bf 8f4f 	dsb	sy
 800a9f4:	b662      	cpsie	i
 800a9f6:	60bb      	str	r3, [r7, #8]
}
 800a9f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a9fa:	bf00      	nop
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d0fc      	beq.n	800a9fc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aa02:	bf00      	nop
 800aa04:	bf00      	nop
 800aa06:	3714      	adds	r7, #20
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr
 800aa10:	20000010 	.word	0x20000010
	...

0800aa20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa20:	4b07      	ldr	r3, [pc, #28]	; (800aa40 <pxCurrentTCBConst2>)
 800aa22:	6819      	ldr	r1, [r3, #0]
 800aa24:	6808      	ldr	r0, [r1, #0]
 800aa26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2a:	f380 8809 	msr	PSP, r0
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	f04f 0000 	mov.w	r0, #0
 800aa36:	f380 8811 	msr	BASEPRI, r0
 800aa3a:	4770      	bx	lr
 800aa3c:	f3af 8000 	nop.w

0800aa40 <pxCurrentTCBConst2>:
 800aa40:	200072c4 	.word	0x200072c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa44:	bf00      	nop
 800aa46:	bf00      	nop

0800aa48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800aa48:	4808      	ldr	r0, [pc, #32]	; (800aa6c <prvPortStartFirstTask+0x24>)
 800aa4a:	6800      	ldr	r0, [r0, #0]
 800aa4c:	6800      	ldr	r0, [r0, #0]
 800aa4e:	f380 8808 	msr	MSP, r0
 800aa52:	f04f 0000 	mov.w	r0, #0
 800aa56:	f380 8814 	msr	CONTROL, r0
 800aa5a:	b662      	cpsie	i
 800aa5c:	b661      	cpsie	f
 800aa5e:	f3bf 8f4f 	dsb	sy
 800aa62:	f3bf 8f6f 	isb	sy
 800aa66:	df00      	svc	0
 800aa68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aa6a:	bf00      	nop
 800aa6c:	e000ed08 	.word	0xe000ed08

0800aa70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aa76:	4b37      	ldr	r3, [pc, #220]	; (800ab54 <xPortStartScheduler+0xe4>)
 800aa78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	22ff      	movs	r2, #255	; 0xff
 800aa86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aa90:	78fb      	ldrb	r3, [r7, #3]
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aa98:	b2da      	uxtb	r2, r3
 800aa9a:	4b2f      	ldr	r3, [pc, #188]	; (800ab58 <xPortStartScheduler+0xe8>)
 800aa9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aa9e:	4b2f      	ldr	r3, [pc, #188]	; (800ab5c <xPortStartScheduler+0xec>)
 800aaa0:	2207      	movs	r2, #7
 800aaa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aaa4:	e009      	b.n	800aaba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800aaa6:	4b2d      	ldr	r3, [pc, #180]	; (800ab5c <xPortStartScheduler+0xec>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	3b01      	subs	r3, #1
 800aaac:	4a2b      	ldr	r2, [pc, #172]	; (800ab5c <xPortStartScheduler+0xec>)
 800aaae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aab0:	78fb      	ldrb	r3, [r7, #3]
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	005b      	lsls	r3, r3, #1
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aaba:	78fb      	ldrb	r3, [r7, #3]
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aac2:	2b80      	cmp	r3, #128	; 0x80
 800aac4:	d0ef      	beq.n	800aaa6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aac6:	4b25      	ldr	r3, [pc, #148]	; (800ab5c <xPortStartScheduler+0xec>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f1c3 0307 	rsb	r3, r3, #7
 800aace:	2b04      	cmp	r3, #4
 800aad0:	d00c      	beq.n	800aaec <xPortStartScheduler+0x7c>
	__asm volatile
 800aad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad6:	b672      	cpsid	i
 800aad8:	f383 8811 	msr	BASEPRI, r3
 800aadc:	f3bf 8f6f 	isb	sy
 800aae0:	f3bf 8f4f 	dsb	sy
 800aae4:	b662      	cpsie	i
 800aae6:	60bb      	str	r3, [r7, #8]
}
 800aae8:	bf00      	nop
 800aaea:	e7fe      	b.n	800aaea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aaec:	4b1b      	ldr	r3, [pc, #108]	; (800ab5c <xPortStartScheduler+0xec>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	021b      	lsls	r3, r3, #8
 800aaf2:	4a1a      	ldr	r2, [pc, #104]	; (800ab5c <xPortStartScheduler+0xec>)
 800aaf4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aaf6:	4b19      	ldr	r3, [pc, #100]	; (800ab5c <xPortStartScheduler+0xec>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aafe:	4a17      	ldr	r2, [pc, #92]	; (800ab5c <xPortStartScheduler+0xec>)
 800ab00:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	b2da      	uxtb	r2, r3
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ab0a:	4b15      	ldr	r3, [pc, #84]	; (800ab60 <xPortStartScheduler+0xf0>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a14      	ldr	r2, [pc, #80]	; (800ab60 <xPortStartScheduler+0xf0>)
 800ab10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab14:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ab16:	4b12      	ldr	r3, [pc, #72]	; (800ab60 <xPortStartScheduler+0xf0>)
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a11      	ldr	r2, [pc, #68]	; (800ab60 <xPortStartScheduler+0xf0>)
 800ab1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ab20:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ab22:	f000 f8dd 	bl	800ace0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ab26:	4b0f      	ldr	r3, [pc, #60]	; (800ab64 <xPortStartScheduler+0xf4>)
 800ab28:	2200      	movs	r2, #0
 800ab2a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ab2c:	f000 f8fc 	bl	800ad28 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ab30:	4b0d      	ldr	r3, [pc, #52]	; (800ab68 <xPortStartScheduler+0xf8>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a0c      	ldr	r2, [pc, #48]	; (800ab68 <xPortStartScheduler+0xf8>)
 800ab36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ab3a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ab3c:	f7ff ff84 	bl	800aa48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ab40:	f7ff f818 	bl	8009b74 <vTaskSwitchContext>
	prvTaskExitError();
 800ab44:	f7ff ff36 	bl	800a9b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ab48:	2300      	movs	r3, #0
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3710      	adds	r7, #16
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	e000e400 	.word	0xe000e400
 800ab58:	200078f0 	.word	0x200078f0
 800ab5c:	200078f4 	.word	0x200078f4
 800ab60:	e000ed20 	.word	0xe000ed20
 800ab64:	20000010 	.word	0x20000010
 800ab68:	e000ef34 	.word	0xe000ef34

0800ab6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b083      	sub	sp, #12
 800ab70:	af00      	add	r7, sp, #0
	__asm volatile
 800ab72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab76:	b672      	cpsid	i
 800ab78:	f383 8811 	msr	BASEPRI, r3
 800ab7c:	f3bf 8f6f 	isb	sy
 800ab80:	f3bf 8f4f 	dsb	sy
 800ab84:	b662      	cpsie	i
 800ab86:	607b      	str	r3, [r7, #4]
}
 800ab88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ab8a:	4b10      	ldr	r3, [pc, #64]	; (800abcc <vPortEnterCritical+0x60>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	4a0e      	ldr	r2, [pc, #56]	; (800abcc <vPortEnterCritical+0x60>)
 800ab92:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ab94:	4b0d      	ldr	r3, [pc, #52]	; (800abcc <vPortEnterCritical+0x60>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d111      	bne.n	800abc0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ab9c:	4b0c      	ldr	r3, [pc, #48]	; (800abd0 <vPortEnterCritical+0x64>)
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00c      	beq.n	800abc0 <vPortEnterCritical+0x54>
	__asm volatile
 800aba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abaa:	b672      	cpsid	i
 800abac:	f383 8811 	msr	BASEPRI, r3
 800abb0:	f3bf 8f6f 	isb	sy
 800abb4:	f3bf 8f4f 	dsb	sy
 800abb8:	b662      	cpsie	i
 800abba:	603b      	str	r3, [r7, #0]
}
 800abbc:	bf00      	nop
 800abbe:	e7fe      	b.n	800abbe <vPortEnterCritical+0x52>
	}
}
 800abc0:	bf00      	nop
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr
 800abcc:	20000010 	.word	0x20000010
 800abd0:	e000ed04 	.word	0xe000ed04

0800abd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800abda:	4b13      	ldr	r3, [pc, #76]	; (800ac28 <vPortExitCritical+0x54>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d10c      	bne.n	800abfc <vPortExitCritical+0x28>
	__asm volatile
 800abe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe6:	b672      	cpsid	i
 800abe8:	f383 8811 	msr	BASEPRI, r3
 800abec:	f3bf 8f6f 	isb	sy
 800abf0:	f3bf 8f4f 	dsb	sy
 800abf4:	b662      	cpsie	i
 800abf6:	607b      	str	r3, [r7, #4]
}
 800abf8:	bf00      	nop
 800abfa:	e7fe      	b.n	800abfa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800abfc:	4b0a      	ldr	r3, [pc, #40]	; (800ac28 <vPortExitCritical+0x54>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	3b01      	subs	r3, #1
 800ac02:	4a09      	ldr	r2, [pc, #36]	; (800ac28 <vPortExitCritical+0x54>)
 800ac04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ac06:	4b08      	ldr	r3, [pc, #32]	; (800ac28 <vPortExitCritical+0x54>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d105      	bne.n	800ac1a <vPortExitCritical+0x46>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	f383 8811 	msr	BASEPRI, r3
}
 800ac18:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ac1a:	bf00      	nop
 800ac1c:	370c      	adds	r7, #12
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop
 800ac28:	20000010 	.word	0x20000010
 800ac2c:	00000000 	.word	0x00000000

0800ac30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ac30:	f3ef 8009 	mrs	r0, PSP
 800ac34:	f3bf 8f6f 	isb	sy
 800ac38:	4b15      	ldr	r3, [pc, #84]	; (800ac90 <pxCurrentTCBConst>)
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	f01e 0f10 	tst.w	lr, #16
 800ac40:	bf08      	it	eq
 800ac42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ac46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac4a:	6010      	str	r0, [r2, #0]
 800ac4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ac50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ac54:	b672      	cpsid	i
 800ac56:	f380 8811 	msr	BASEPRI, r0
 800ac5a:	f3bf 8f4f 	dsb	sy
 800ac5e:	f3bf 8f6f 	isb	sy
 800ac62:	b662      	cpsie	i
 800ac64:	f7fe ff86 	bl	8009b74 <vTaskSwitchContext>
 800ac68:	f04f 0000 	mov.w	r0, #0
 800ac6c:	f380 8811 	msr	BASEPRI, r0
 800ac70:	bc09      	pop	{r0, r3}
 800ac72:	6819      	ldr	r1, [r3, #0]
 800ac74:	6808      	ldr	r0, [r1, #0]
 800ac76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac7a:	f01e 0f10 	tst.w	lr, #16
 800ac7e:	bf08      	it	eq
 800ac80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ac84:	f380 8809 	msr	PSP, r0
 800ac88:	f3bf 8f6f 	isb	sy
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop

0800ac90 <pxCurrentTCBConst>:
 800ac90:	200072c4 	.word	0x200072c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ac94:	bf00      	nop
 800ac96:	bf00      	nop

0800ac98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca2:	b672      	cpsid	i
 800aca4:	f383 8811 	msr	BASEPRI, r3
 800aca8:	f3bf 8f6f 	isb	sy
 800acac:	f3bf 8f4f 	dsb	sy
 800acb0:	b662      	cpsie	i
 800acb2:	607b      	str	r3, [r7, #4]
}
 800acb4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800acb6:	f7fe fea1 	bl	80099fc <xTaskIncrementTick>
 800acba:	4603      	mov	r3, r0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d003      	beq.n	800acc8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800acc0:	4b06      	ldr	r3, [pc, #24]	; (800acdc <SysTick_Handler+0x44>)
 800acc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acc6:	601a      	str	r2, [r3, #0]
 800acc8:	2300      	movs	r3, #0
 800acca:	603b      	str	r3, [r7, #0]
	__asm volatile
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	f383 8811 	msr	BASEPRI, r3
}
 800acd2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800acd4:	bf00      	nop
 800acd6:	3708      	adds	r7, #8
 800acd8:	46bd      	mov	sp, r7
 800acda:	bd80      	pop	{r7, pc}
 800acdc:	e000ed04 	.word	0xe000ed04

0800ace0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ace0:	b480      	push	{r7}
 800ace2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ace4:	4b0b      	ldr	r3, [pc, #44]	; (800ad14 <vPortSetupTimerInterrupt+0x34>)
 800ace6:	2200      	movs	r2, #0
 800ace8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800acea:	4b0b      	ldr	r3, [pc, #44]	; (800ad18 <vPortSetupTimerInterrupt+0x38>)
 800acec:	2200      	movs	r2, #0
 800acee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800acf0:	4b0a      	ldr	r3, [pc, #40]	; (800ad1c <vPortSetupTimerInterrupt+0x3c>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a0a      	ldr	r2, [pc, #40]	; (800ad20 <vPortSetupTimerInterrupt+0x40>)
 800acf6:	fba2 2303 	umull	r2, r3, r2, r3
 800acfa:	099b      	lsrs	r3, r3, #6
 800acfc:	4a09      	ldr	r2, [pc, #36]	; (800ad24 <vPortSetupTimerInterrupt+0x44>)
 800acfe:	3b01      	subs	r3, #1
 800ad00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ad02:	4b04      	ldr	r3, [pc, #16]	; (800ad14 <vPortSetupTimerInterrupt+0x34>)
 800ad04:	2207      	movs	r2, #7
 800ad06:	601a      	str	r2, [r3, #0]
}
 800ad08:	bf00      	nop
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr
 800ad12:	bf00      	nop
 800ad14:	e000e010 	.word	0xe000e010
 800ad18:	e000e018 	.word	0xe000e018
 800ad1c:	20000004 	.word	0x20000004
 800ad20:	10624dd3 	.word	0x10624dd3
 800ad24:	e000e014 	.word	0xe000e014

0800ad28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ad28:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ad38 <vPortEnableVFP+0x10>
 800ad2c:	6801      	ldr	r1, [r0, #0]
 800ad2e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ad32:	6001      	str	r1, [r0, #0]
 800ad34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ad36:	bf00      	nop
 800ad38:	e000ed88 	.word	0xe000ed88

0800ad3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ad42:	f3ef 8305 	mrs	r3, IPSR
 800ad46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	2b0f      	cmp	r3, #15
 800ad4c:	d916      	bls.n	800ad7c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ad4e:	4a19      	ldr	r2, [pc, #100]	; (800adb4 <vPortValidateInterruptPriority+0x78>)
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	4413      	add	r3, r2
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ad58:	4b17      	ldr	r3, [pc, #92]	; (800adb8 <vPortValidateInterruptPriority+0x7c>)
 800ad5a:	781b      	ldrb	r3, [r3, #0]
 800ad5c:	7afa      	ldrb	r2, [r7, #11]
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d20c      	bcs.n	800ad7c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800ad62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad66:	b672      	cpsid	i
 800ad68:	f383 8811 	msr	BASEPRI, r3
 800ad6c:	f3bf 8f6f 	isb	sy
 800ad70:	f3bf 8f4f 	dsb	sy
 800ad74:	b662      	cpsie	i
 800ad76:	607b      	str	r3, [r7, #4]
}
 800ad78:	bf00      	nop
 800ad7a:	e7fe      	b.n	800ad7a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ad7c:	4b0f      	ldr	r3, [pc, #60]	; (800adbc <vPortValidateInterruptPriority+0x80>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ad84:	4b0e      	ldr	r3, [pc, #56]	; (800adc0 <vPortValidateInterruptPriority+0x84>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d90c      	bls.n	800ada6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ad8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad90:	b672      	cpsid	i
 800ad92:	f383 8811 	msr	BASEPRI, r3
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	b662      	cpsie	i
 800ada0:	603b      	str	r3, [r7, #0]
}
 800ada2:	bf00      	nop
 800ada4:	e7fe      	b.n	800ada4 <vPortValidateInterruptPriority+0x68>
	}
 800ada6:	bf00      	nop
 800ada8:	3714      	adds	r7, #20
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop
 800adb4:	e000e3f0 	.word	0xe000e3f0
 800adb8:	200078f0 	.word	0x200078f0
 800adbc:	e000ed0c 	.word	0xe000ed0c
 800adc0:	200078f4 	.word	0x200078f4

0800adc4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b08a      	sub	sp, #40	; 0x28
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800adcc:	2300      	movs	r3, #0
 800adce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800add0:	f7fe fd56 	bl	8009880 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800add4:	4b5b      	ldr	r3, [pc, #364]	; (800af44 <pvPortMalloc+0x180>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d101      	bne.n	800ade0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800addc:	f000 f91a 	bl	800b014 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ade0:	4b59      	ldr	r3, [pc, #356]	; (800af48 <pvPortMalloc+0x184>)
 800ade2:	681a      	ldr	r2, [r3, #0]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	4013      	ands	r3, r2
 800ade8:	2b00      	cmp	r3, #0
 800adea:	f040 8092 	bne.w	800af12 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d01f      	beq.n	800ae34 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800adf4:	2208      	movs	r2, #8
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	4413      	add	r3, r2
 800adfa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f003 0307 	and.w	r3, r3, #7
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d016      	beq.n	800ae34 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f023 0307 	bic.w	r3, r3, #7
 800ae0c:	3308      	adds	r3, #8
 800ae0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f003 0307 	and.w	r3, r3, #7
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d00c      	beq.n	800ae34 <pvPortMalloc+0x70>
	__asm volatile
 800ae1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1e:	b672      	cpsid	i
 800ae20:	f383 8811 	msr	BASEPRI, r3
 800ae24:	f3bf 8f6f 	isb	sy
 800ae28:	f3bf 8f4f 	dsb	sy
 800ae2c:	b662      	cpsie	i
 800ae2e:	617b      	str	r3, [r7, #20]
}
 800ae30:	bf00      	nop
 800ae32:	e7fe      	b.n	800ae32 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d06b      	beq.n	800af12 <pvPortMalloc+0x14e>
 800ae3a:	4b44      	ldr	r3, [pc, #272]	; (800af4c <pvPortMalloc+0x188>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d866      	bhi.n	800af12 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ae44:	4b42      	ldr	r3, [pc, #264]	; (800af50 <pvPortMalloc+0x18c>)
 800ae46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ae48:	4b41      	ldr	r3, [pc, #260]	; (800af50 <pvPortMalloc+0x18c>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae4e:	e004      	b.n	800ae5a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800ae50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ae54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ae5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d903      	bls.n	800ae6c <pvPortMalloc+0xa8>
 800ae64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d1f1      	bne.n	800ae50 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ae6c:	4b35      	ldr	r3, [pc, #212]	; (800af44 <pvPortMalloc+0x180>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d04d      	beq.n	800af12 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ae76:	6a3b      	ldr	r3, [r7, #32]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2208      	movs	r2, #8
 800ae7c:	4413      	add	r3, r2
 800ae7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ae80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	6a3b      	ldr	r3, [r7, #32]
 800ae86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ae88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8a:	685a      	ldr	r2, [r3, #4]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	1ad2      	subs	r2, r2, r3
 800ae90:	2308      	movs	r3, #8
 800ae92:	005b      	lsls	r3, r3, #1
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d921      	bls.n	800aedc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ae98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4413      	add	r3, r2
 800ae9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aea0:	69bb      	ldr	r3, [r7, #24]
 800aea2:	f003 0307 	and.w	r3, r3, #7
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00c      	beq.n	800aec4 <pvPortMalloc+0x100>
	__asm volatile
 800aeaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeae:	b672      	cpsid	i
 800aeb0:	f383 8811 	msr	BASEPRI, r3
 800aeb4:	f3bf 8f6f 	isb	sy
 800aeb8:	f3bf 8f4f 	dsb	sy
 800aebc:	b662      	cpsie	i
 800aebe:	613b      	str	r3, [r7, #16]
}
 800aec0:	bf00      	nop
 800aec2:	e7fe      	b.n	800aec2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec6:	685a      	ldr	r2, [r3, #4]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	1ad2      	subs	r2, r2, r3
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aed6:	69b8      	ldr	r0, [r7, #24]
 800aed8:	f000 f8fe 	bl	800b0d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aedc:	4b1b      	ldr	r3, [pc, #108]	; (800af4c <pvPortMalloc+0x188>)
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	1ad3      	subs	r3, r2, r3
 800aee6:	4a19      	ldr	r2, [pc, #100]	; (800af4c <pvPortMalloc+0x188>)
 800aee8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aeea:	4b18      	ldr	r3, [pc, #96]	; (800af4c <pvPortMalloc+0x188>)
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	4b19      	ldr	r3, [pc, #100]	; (800af54 <pvPortMalloc+0x190>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	429a      	cmp	r2, r3
 800aef4:	d203      	bcs.n	800aefe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aef6:	4b15      	ldr	r3, [pc, #84]	; (800af4c <pvPortMalloc+0x188>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4a16      	ldr	r2, [pc, #88]	; (800af54 <pvPortMalloc+0x190>)
 800aefc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af00:	685a      	ldr	r2, [r3, #4]
 800af02:	4b11      	ldr	r3, [pc, #68]	; (800af48 <pvPortMalloc+0x184>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	431a      	orrs	r2, r3
 800af08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800af0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af0e:	2200      	movs	r2, #0
 800af10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800af12:	f7fe fcc3 	bl	800989c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	f003 0307 	and.w	r3, r3, #7
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d00c      	beq.n	800af3a <pvPortMalloc+0x176>
	__asm volatile
 800af20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af24:	b672      	cpsid	i
 800af26:	f383 8811 	msr	BASEPRI, r3
 800af2a:	f3bf 8f6f 	isb	sy
 800af2e:	f3bf 8f4f 	dsb	sy
 800af32:	b662      	cpsie	i
 800af34:	60fb      	str	r3, [r7, #12]
}
 800af36:	bf00      	nop
 800af38:	e7fe      	b.n	800af38 <pvPortMalloc+0x174>
	return pvReturn;
 800af3a:	69fb      	ldr	r3, [r7, #28]
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3728      	adds	r7, #40	; 0x28
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	2000b500 	.word	0x2000b500
 800af48:	2000b50c 	.word	0x2000b50c
 800af4c:	2000b504 	.word	0x2000b504
 800af50:	2000b4f8 	.word	0x2000b4f8
 800af54:	2000b508 	.word	0x2000b508

0800af58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b086      	sub	sp, #24
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d04c      	beq.n	800b004 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800af6a:	2308      	movs	r3, #8
 800af6c:	425b      	negs	r3, r3
 800af6e:	697a      	ldr	r2, [r7, #20]
 800af70:	4413      	add	r3, r2
 800af72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	685a      	ldr	r2, [r3, #4]
 800af7c:	4b23      	ldr	r3, [pc, #140]	; (800b00c <vPortFree+0xb4>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4013      	ands	r3, r2
 800af82:	2b00      	cmp	r3, #0
 800af84:	d10c      	bne.n	800afa0 <vPortFree+0x48>
	__asm volatile
 800af86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8a:	b672      	cpsid	i
 800af8c:	f383 8811 	msr	BASEPRI, r3
 800af90:	f3bf 8f6f 	isb	sy
 800af94:	f3bf 8f4f 	dsb	sy
 800af98:	b662      	cpsie	i
 800af9a:	60fb      	str	r3, [r7, #12]
}
 800af9c:	bf00      	nop
 800af9e:	e7fe      	b.n	800af9e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d00c      	beq.n	800afc2 <vPortFree+0x6a>
	__asm volatile
 800afa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afac:	b672      	cpsid	i
 800afae:	f383 8811 	msr	BASEPRI, r3
 800afb2:	f3bf 8f6f 	isb	sy
 800afb6:	f3bf 8f4f 	dsb	sy
 800afba:	b662      	cpsie	i
 800afbc:	60bb      	str	r3, [r7, #8]
}
 800afbe:	bf00      	nop
 800afc0:	e7fe      	b.n	800afc0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	685a      	ldr	r2, [r3, #4]
 800afc6:	4b11      	ldr	r3, [pc, #68]	; (800b00c <vPortFree+0xb4>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4013      	ands	r3, r2
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d019      	beq.n	800b004 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d115      	bne.n	800b004 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	685a      	ldr	r2, [r3, #4]
 800afdc:	4b0b      	ldr	r3, [pc, #44]	; (800b00c <vPortFree+0xb4>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	43db      	mvns	r3, r3
 800afe2:	401a      	ands	r2, r3
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800afe8:	f7fe fc4a 	bl	8009880 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	685a      	ldr	r2, [r3, #4]
 800aff0:	4b07      	ldr	r3, [pc, #28]	; (800b010 <vPortFree+0xb8>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4413      	add	r3, r2
 800aff6:	4a06      	ldr	r2, [pc, #24]	; (800b010 <vPortFree+0xb8>)
 800aff8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800affa:	6938      	ldr	r0, [r7, #16]
 800affc:	f000 f86c 	bl	800b0d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b000:	f7fe fc4c 	bl	800989c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b004:	bf00      	nop
 800b006:	3718      	adds	r7, #24
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}
 800b00c:	2000b50c 	.word	0x2000b50c
 800b010:	2000b504 	.word	0x2000b504

0800b014 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b014:	b480      	push	{r7}
 800b016:	b085      	sub	sp, #20
 800b018:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b01a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b01e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b020:	4b27      	ldr	r3, [pc, #156]	; (800b0c0 <prvHeapInit+0xac>)
 800b022:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f003 0307 	and.w	r3, r3, #7
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d00c      	beq.n	800b048 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	3307      	adds	r3, #7
 800b032:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f023 0307 	bic.w	r3, r3, #7
 800b03a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b03c:	68ba      	ldr	r2, [r7, #8]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	1ad3      	subs	r3, r2, r3
 800b042:	4a1f      	ldr	r2, [pc, #124]	; (800b0c0 <prvHeapInit+0xac>)
 800b044:	4413      	add	r3, r2
 800b046:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b04c:	4a1d      	ldr	r2, [pc, #116]	; (800b0c4 <prvHeapInit+0xb0>)
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b052:	4b1c      	ldr	r3, [pc, #112]	; (800b0c4 <prvHeapInit+0xb0>)
 800b054:	2200      	movs	r2, #0
 800b056:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	68ba      	ldr	r2, [r7, #8]
 800b05c:	4413      	add	r3, r2
 800b05e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b060:	2208      	movs	r2, #8
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	1a9b      	subs	r3, r3, r2
 800b066:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f023 0307 	bic.w	r3, r3, #7
 800b06e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	4a15      	ldr	r2, [pc, #84]	; (800b0c8 <prvHeapInit+0xb4>)
 800b074:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b076:	4b14      	ldr	r3, [pc, #80]	; (800b0c8 <prvHeapInit+0xb4>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2200      	movs	r2, #0
 800b07c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b07e:	4b12      	ldr	r3, [pc, #72]	; (800b0c8 <prvHeapInit+0xb4>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	2200      	movs	r2, #0
 800b084:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	1ad2      	subs	r2, r2, r3
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b094:	4b0c      	ldr	r3, [pc, #48]	; (800b0c8 <prvHeapInit+0xb4>)
 800b096:	681a      	ldr	r2, [r3, #0]
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	4a0a      	ldr	r2, [pc, #40]	; (800b0cc <prvHeapInit+0xb8>)
 800b0a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	4a09      	ldr	r2, [pc, #36]	; (800b0d0 <prvHeapInit+0xbc>)
 800b0aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b0ac:	4b09      	ldr	r3, [pc, #36]	; (800b0d4 <prvHeapInit+0xc0>)
 800b0ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b0b2:	601a      	str	r2, [r3, #0]
}
 800b0b4:	bf00      	nop
 800b0b6:	3714      	adds	r7, #20
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0be:	4770      	bx	lr
 800b0c0:	200078f8 	.word	0x200078f8
 800b0c4:	2000b4f8 	.word	0x2000b4f8
 800b0c8:	2000b500 	.word	0x2000b500
 800b0cc:	2000b508 	.word	0x2000b508
 800b0d0:	2000b504 	.word	0x2000b504
 800b0d4:	2000b50c 	.word	0x2000b50c

0800b0d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b085      	sub	sp, #20
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b0e0:	4b28      	ldr	r3, [pc, #160]	; (800b184 <prvInsertBlockIntoFreeList+0xac>)
 800b0e2:	60fb      	str	r3, [r7, #12]
 800b0e4:	e002      	b.n	800b0ec <prvInsertBlockIntoFreeList+0x14>
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	60fb      	str	r3, [r7, #12]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	687a      	ldr	r2, [r7, #4]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d8f7      	bhi.n	800b0e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	68ba      	ldr	r2, [r7, #8]
 800b100:	4413      	add	r3, r2
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	429a      	cmp	r2, r3
 800b106:	d108      	bne.n	800b11a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	685a      	ldr	r2, [r3, #4]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	441a      	add	r2, r3
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	68ba      	ldr	r2, [r7, #8]
 800b124:	441a      	add	r2, r3
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d118      	bne.n	800b160 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	4b15      	ldr	r3, [pc, #84]	; (800b188 <prvInsertBlockIntoFreeList+0xb0>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	429a      	cmp	r2, r3
 800b138:	d00d      	beq.n	800b156 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	685a      	ldr	r2, [r3, #4]
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	441a      	add	r2, r3
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	681a      	ldr	r2, [r3, #0]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	601a      	str	r2, [r3, #0]
 800b154:	e008      	b.n	800b168 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b156:	4b0c      	ldr	r3, [pc, #48]	; (800b188 <prvInsertBlockIntoFreeList+0xb0>)
 800b158:	681a      	ldr	r2, [r3, #0]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	601a      	str	r2, [r3, #0]
 800b15e:	e003      	b.n	800b168 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b168:	68fa      	ldr	r2, [r7, #12]
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d002      	beq.n	800b176 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b176:	bf00      	nop
 800b178:	3714      	adds	r7, #20
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr
 800b182:	bf00      	nop
 800b184:	2000b4f8 	.word	0x2000b4f8
 800b188:	2000b500 	.word	0x2000b500

0800b18c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control>:
 800b18c:	4b04      	ldr	r3, [pc, #16]	; (800b1a0 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	b10a      	cbz	r2, 800b196 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0xa>
 800b192:	4803      	ldr	r0, [pc, #12]	; (800b1a0 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800b194:	4770      	bx	lr
 800b196:	4a03      	ldr	r2, [pc, #12]	; (800b1a4 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x18>)
 800b198:	4801      	ldr	r0, [pc, #4]	; (800b1a0 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800b19a:	6812      	ldr	r2, [r2, #0]
 800b19c:	601a      	str	r2, [r3, #0]
 800b19e:	4770      	bx	lr
 800b1a0:	2000001c 	.word	0x2000001c
 800b1a4:	20000848 	.word	0x20000848

0800b1a8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800b1a8:	4b06      	ldr	r3, [pc, #24]	; (800b1c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x1c>)
 800b1aa:	4807      	ldr	r0, [pc, #28]	; (800b1c8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x20>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	4907      	ldr	r1, [pc, #28]	; (800b1cc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x24>)
 800b1b0:	4a07      	ldr	r2, [pc, #28]	; (800b1d0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x28>)
 800b1b2:	b410      	push	{r4}
 800b1b4:	4c07      	ldr	r4, [pc, #28]	; (800b1d4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x2c>)
 800b1b6:	6003      	str	r3, [r0, #0]
 800b1b8:	6023      	str	r3, [r4, #0]
 800b1ba:	600b      	str	r3, [r1, #0]
 800b1bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1c0:	6013      	str	r3, [r2, #0]
 800b1c2:	4770      	bx	lr
 800b1c4:	20000848 	.word	0x20000848
 800b1c8:	20000090 	.word	0x20000090
 800b1cc:	20000050 	.word	0x20000050
 800b1d0:	2000001c 	.word	0x2000001c
 800b1d4:	20000078 	.word	0x20000078

0800b1d8 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800b1d8:	4b04      	ldr	r3, [pc, #16]	; (800b1ec <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800b1da:	681a      	ldr	r2, [r3, #0]
 800b1dc:	b10a      	cbz	r2, 800b1e2 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0xa>
 800b1de:	4803      	ldr	r0, [pc, #12]	; (800b1ec <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800b1e0:	4770      	bx	lr
 800b1e2:	4a03      	ldr	r2, [pc, #12]	; (800b1f0 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x18>)
 800b1e4:	4801      	ldr	r0, [pc, #4]	; (800b1ec <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800b1e6:	6812      	ldr	r2, [r2, #0]
 800b1e8:	601a      	str	r2, [r3, #0]
 800b1ea:	4770      	bx	lr
 800b1ec:	200000b0 	.word	0x200000b0
 800b1f0:	20000848 	.word	0x20000848

0800b1f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800b1f4:	4b06      	ldr	r3, [pc, #24]	; (800b210 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x1c>)
 800b1f6:	4807      	ldr	r0, [pc, #28]	; (800b214 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x20>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4907      	ldr	r1, [pc, #28]	; (800b218 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x24>)
 800b1fc:	4a07      	ldr	r2, [pc, #28]	; (800b21c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x28>)
 800b1fe:	b410      	push	{r4}
 800b200:	4c07      	ldr	r4, [pc, #28]	; (800b220 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x2c>)
 800b202:	6003      	str	r3, [r0, #0]
 800b204:	6023      	str	r3, [r4, #0]
 800b206:	600b      	str	r3, [r1, #0]
 800b208:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b20c:	6013      	str	r3, [r2, #0]
 800b20e:	4770      	bx	lr
 800b210:	20000848 	.word	0x20000848
 800b214:	20000124 	.word	0x20000124
 800b218:	200000e4 	.word	0x200000e4
 800b21c:	200000b0 	.word	0x200000b0
 800b220:	2000010c 	.word	0x2000010c

0800b224 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__size_function__Control_Request__encoders>:
 800b224:	6840      	ldr	r0, [r0, #4]
 800b226:	4770      	bx	lr

0800b228 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__get_const_function__Control_Request__encoders>:
 800b228:	6800      	ldr	r0, [r0, #0]
 800b22a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b22e:	4770      	bx	lr

0800b230 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__fetch_function__Control_Request__encoders>:
 800b230:	6803      	ldr	r3, [r0, #0]
 800b232:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b236:	6013      	str	r3, [r2, #0]
 800b238:	4770      	bx	lr
 800b23a:	bf00      	nop

0800b23c <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__assign_function__Control_Request__encoders>:
 800b23c:	6812      	ldr	r2, [r2, #0]
 800b23e:	6803      	ldr	r3, [r0, #0]
 800b240:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800b244:	4770      	bx	lr
 800b246:	bf00      	nop

0800b248 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__size_function__Control_Event__request>:
 800b248:	6840      	ldr	r0, [r0, #4]
 800b24a:	4770      	bx	lr

0800b24c <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_const_function__Control_Event__request>:
 800b24c:	6800      	ldr	r0, [r0, #0]
 800b24e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800b252:	4770      	bx	lr

0800b254 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__fetch_function__Control_Event__request>:
 800b254:	6803      	ldr	r3, [r0, #0]
 800b256:	4694      	mov	ip, r2
 800b258:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800b25c:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800b25e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800b262:	4770      	bx	lr

0800b264 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__assign_function__Control_Event__request>:
 800b264:	6803      	ldr	r3, [r0, #0]
 800b266:	eb03 1c01 	add.w	ip, r3, r1, lsl #4
 800b26a:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800b26c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop

0800b274 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__size_function__Control_Event__response>:
 800b274:	6840      	ldr	r0, [r0, #4]
 800b276:	4770      	bx	lr

0800b278 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_const_function__Control_Event__response>:
 800b278:	6800      	ldr	r0, [r0, #0]
 800b27a:	4408      	add	r0, r1
 800b27c:	4770      	bx	lr
 800b27e:	bf00      	nop

0800b280 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__fetch_function__Control_Event__response>:
 800b280:	6803      	ldr	r3, [r0, #0]
 800b282:	5c5b      	ldrb	r3, [r3, r1]
 800b284:	7013      	strb	r3, [r2, #0]
 800b286:	4770      	bx	lr

0800b288 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__assign_function__Control_Event__response>:
 800b288:	6803      	ldr	r3, [r0, #0]
 800b28a:	7812      	ldrb	r2, [r2, #0]
 800b28c:	545a      	strb	r2, [r3, r1]
 800b28e:	4770      	bx	lr

0800b290 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__Control_Request_init_function>:
 800b290:	f004 b8da 	b.w	800f448 <racs_services__srv__Control_Request__init>

0800b294 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__Control_Request_fini_function>:
 800b294:	f004 b8ec 	b.w	800f470 <racs_services__srv__Control_Request__fini>

0800b298 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__resize_function__Control_Request__encoders>:
 800b298:	b510      	push	{r4, lr}
 800b29a:	4604      	mov	r4, r0
 800b29c:	b082      	sub	sp, #8
 800b29e:	9101      	str	r1, [sp, #4]
 800b2a0:	f001 fdee 	bl	800ce80 <rosidl_runtime_c__int32__Sequence__fini>
 800b2a4:	9901      	ldr	r1, [sp, #4]
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	b002      	add	sp, #8
 800b2aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2ae:	f001 bdcf 	b.w	800ce50 <rosidl_runtime_c__int32__Sequence__init>
 800b2b2:	bf00      	nop

0800b2b4 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__Control_Response_init_function>:
 800b2b4:	f004 b918 	b.w	800f4e8 <racs_services__srv__Control_Response__init>

0800b2b8 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__Control_Response_fini_function>:
 800b2b8:	f004 b91a 	b.w	800f4f0 <racs_services__srv__Control_Response__fini>

0800b2bc <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__Control_Event_init_function>:
 800b2bc:	f004 b950 	b.w	800f560 <racs_services__srv__Control_Event__init>

0800b2c0 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__Control_Event_fini_function>:
 800b2c0:	f004 b970 	b.w	800f5a4 <racs_services__srv__Control_Event__fini>

0800b2c4 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__resize_function__Control_Event__request>:
 800b2c4:	b510      	push	{r4, lr}
 800b2c6:	4604      	mov	r4, r0
 800b2c8:	b082      	sub	sp, #8
 800b2ca:	9101      	str	r1, [sp, #4]
 800b2cc:	f004 f8e4 	bl	800f498 <racs_services__srv__Control_Request__Sequence__fini>
 800b2d0:	9901      	ldr	r1, [sp, #4]
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	b002      	add	sp, #8
 800b2d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2da:	f004 b8d9 	b.w	800f490 <racs_services__srv__Control_Request__Sequence__init>
 800b2de:	bf00      	nop

0800b2e0 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__resize_function__Control_Event__response>:
 800b2e0:	b510      	push	{r4, lr}
 800b2e2:	4604      	mov	r4, r0
 800b2e4:	b082      	sub	sp, #8
 800b2e6:	9101      	str	r1, [sp, #4]
 800b2e8:	f004 f926 	bl	800f538 <racs_services__srv__Control_Response__Sequence__fini>
 800b2ec:	9901      	ldr	r1, [sp, #4]
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	b002      	add	sp, #8
 800b2f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2f6:	f004 b905 	b.w	800f504 <racs_services__srv__Control_Response__Sequence__init>
 800b2fa:	bf00      	nop

0800b2fc <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_function__Control_Event__response>:
 800b2fc:	6800      	ldr	r0, [r0, #0]
 800b2fe:	4408      	add	r0, r1
 800b300:	4770      	bx	lr
 800b302:	bf00      	nop

0800b304 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__get_function__Control_Request__encoders>:
 800b304:	6800      	ldr	r0, [r0, #0]
 800b306:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b30a:	4770      	bx	lr

0800b30c <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_function__Control_Event__request>:
 800b30c:	6800      	ldr	r0, [r0, #0]
 800b30e:	eb00 1001 	add.w	r0, r0, r1, lsl #4
 800b312:	4770      	bx	lr

0800b314 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800b314:	4b04      	ldr	r3, [pc, #16]	; (800b328 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	b10a      	cbz	r2, 800b31e <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0xa>
 800b31a:	4803      	ldr	r0, [pc, #12]	; (800b328 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800b31c:	4770      	bx	lr
 800b31e:	4a03      	ldr	r2, [pc, #12]	; (800b32c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x18>)
 800b320:	4801      	ldr	r0, [pc, #4]	; (800b328 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800b322:	6812      	ldr	r2, [r2, #0]
 800b324:	601a      	str	r2, [r3, #0]
 800b326:	4770      	bx	lr
 800b328:	200002bc 	.word	0x200002bc
 800b32c:	2000084c 	.word	0x2000084c

0800b330 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response>:
 800b330:	4b04      	ldr	r3, [pc, #16]	; (800b344 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	b10a      	cbz	r2, 800b33a <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0xa>
 800b336:	4803      	ldr	r0, [pc, #12]	; (800b344 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800b338:	4770      	bx	lr
 800b33a:	4a03      	ldr	r2, [pc, #12]	; (800b348 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x18>)
 800b33c:	4801      	ldr	r0, [pc, #4]	; (800b344 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800b33e:	6812      	ldr	r2, [r2, #0]
 800b340:	601a      	str	r2, [r3, #0]
 800b342:	4770      	bx	lr
 800b344:	20000310 	.word	0x20000310
 800b348:	2000084c 	.word	0x2000084c

0800b34c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event>:
 800b34c:	b508      	push	{r3, lr}
 800b34e:	f001 fe53 	bl	800cff8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800b352:	4913      	ldr	r1, [pc, #76]	; (800b3a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x54>)
 800b354:	4b13      	ldr	r3, [pc, #76]	; (800b3a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x58>)
 800b356:	680a      	ldr	r2, [r1, #0]
 800b358:	60d8      	str	r0, [r3, #12]
 800b35a:	b152      	cbz	r2, 800b372 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x26>
 800b35c:	4a12      	ldr	r2, [pc, #72]	; (800b3a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x5c>)
 800b35e:	6499      	str	r1, [r3, #72]	; 0x48
 800b360:	6811      	ldr	r1, [r2, #0]
 800b362:	b171      	cbz	r1, 800b382 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x36>
 800b364:	4911      	ldr	r1, [pc, #68]	; (800b3ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800b366:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b36a:	680b      	ldr	r3, [r1, #0]
 800b36c:	b193      	cbz	r3, 800b394 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x48>
 800b36e:	480f      	ldr	r0, [pc, #60]	; (800b3ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800b370:	bd08      	pop	{r3, pc}
 800b372:	4a0f      	ldr	r2, [pc, #60]	; (800b3b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800b374:	6499      	str	r1, [r3, #72]	; 0x48
 800b376:	6812      	ldr	r2, [r2, #0]
 800b378:	600a      	str	r2, [r1, #0]
 800b37a:	4a0b      	ldr	r2, [pc, #44]	; (800b3a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x5c>)
 800b37c:	6811      	ldr	r1, [r2, #0]
 800b37e:	2900      	cmp	r1, #0
 800b380:	d1f0      	bne.n	800b364 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x18>
 800b382:	490b      	ldr	r1, [pc, #44]	; (800b3b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800b384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b388:	6809      	ldr	r1, [r1, #0]
 800b38a:	6011      	str	r1, [r2, #0]
 800b38c:	4907      	ldr	r1, [pc, #28]	; (800b3ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800b38e:	680b      	ldr	r3, [r1, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d1ec      	bne.n	800b36e <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x22>
 800b394:	4b06      	ldr	r3, [pc, #24]	; (800b3b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800b396:	4805      	ldr	r0, [pc, #20]	; (800b3ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	600b      	str	r3, [r1, #0]
 800b39c:	bd08      	pop	{r3, pc}
 800b39e:	bf00      	nop
 800b3a0:	200002bc 	.word	0x200002bc
 800b3a4:	2000013c 	.word	0x2000013c
 800b3a8:	20000310 	.word	0x20000310
 800b3ac:	200001f0 	.word	0x200001f0
 800b3b0:	2000084c 	.word	0x2000084c

0800b3b4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control>:
 800b3b4:	4b25      	ldr	r3, [pc, #148]	; (800b44c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	b510      	push	{r4, lr}
 800b3ba:	b142      	cbz	r2, 800b3ce <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x1a>
 800b3bc:	685c      	ldr	r4, [r3, #4]
 800b3be:	68a3      	ldr	r3, [r4, #8]
 800b3c0:	b163      	cbz	r3, 800b3dc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x28>
 800b3c2:	68e3      	ldr	r3, [r4, #12]
 800b3c4:	b193      	cbz	r3, 800b3ec <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x38>
 800b3c6:	6923      	ldr	r3, [r4, #16]
 800b3c8:	b1c3      	cbz	r3, 800b3fc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x48>
 800b3ca:	4820      	ldr	r0, [pc, #128]	; (800b44c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800b3cc:	bd10      	pop	{r4, pc}
 800b3ce:	4a20      	ldr	r2, [pc, #128]	; (800b450 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800b3d0:	685c      	ldr	r4, [r3, #4]
 800b3d2:	6812      	ldr	r2, [r2, #0]
 800b3d4:	601a      	str	r2, [r3, #0]
 800b3d6:	68a3      	ldr	r3, [r4, #8]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d1f2      	bne.n	800b3c2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xe>
 800b3dc:	4a1d      	ldr	r2, [pc, #116]	; (800b454 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa0>)
 800b3de:	6813      	ldr	r3, [r2, #0]
 800b3e0:	b303      	cbz	r3, 800b424 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x70>
 800b3e2:	6853      	ldr	r3, [r2, #4]
 800b3e4:	60a3      	str	r3, [r4, #8]
 800b3e6:	68e3      	ldr	r3, [r4, #12]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d1ec      	bne.n	800b3c6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x12>
 800b3ec:	4b1a      	ldr	r3, [pc, #104]	; (800b458 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa4>)
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	b1e2      	cbz	r2, 800b42c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x78>
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	60e3      	str	r3, [r4, #12]
 800b3f6:	6923      	ldr	r3, [r4, #16]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d1e6      	bne.n	800b3ca <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x16>
 800b3fc:	f001 fdfc 	bl	800cff8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800b400:	4a14      	ldr	r2, [pc, #80]	; (800b454 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa0>)
 800b402:	4916      	ldr	r1, [pc, #88]	; (800b45c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa8>)
 800b404:	6813      	ldr	r3, [r2, #0]
 800b406:	60c8      	str	r0, [r1, #12]
 800b408:	b1e3      	cbz	r3, 800b444 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x90>
 800b40a:	4b13      	ldr	r3, [pc, #76]	; (800b458 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa4>)
 800b40c:	648a      	str	r2, [r1, #72]	; 0x48
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	b1a2      	cbz	r2, 800b43c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x88>
 800b412:	4a13      	ldr	r2, [pc, #76]	; (800b460 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xac>)
 800b414:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800b418:	6813      	ldr	r3, [r2, #0]
 800b41a:	b15b      	cbz	r3, 800b434 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x80>
 800b41c:	6853      	ldr	r3, [r2, #4]
 800b41e:	480b      	ldr	r0, [pc, #44]	; (800b44c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800b420:	6123      	str	r3, [r4, #16]
 800b422:	bd10      	pop	{r4, pc}
 800b424:	4b0a      	ldr	r3, [pc, #40]	; (800b450 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	6013      	str	r3, [r2, #0]
 800b42a:	e7da      	b.n	800b3e2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x2e>
 800b42c:	4a08      	ldr	r2, [pc, #32]	; (800b450 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800b42e:	6812      	ldr	r2, [r2, #0]
 800b430:	601a      	str	r2, [r3, #0]
 800b432:	e7de      	b.n	800b3f2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x3e>
 800b434:	4b06      	ldr	r3, [pc, #24]	; (800b450 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	6013      	str	r3, [r2, #0]
 800b43a:	e7ef      	b.n	800b41c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x68>
 800b43c:	4a04      	ldr	r2, [pc, #16]	; (800b450 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800b43e:	6812      	ldr	r2, [r2, #0]
 800b440:	601a      	str	r2, [r3, #0]
 800b442:	e7e6      	b.n	800b412 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x5e>
 800b444:	4b02      	ldr	r3, [pc, #8]	; (800b450 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	6013      	str	r3, [r2, #0]
 800b44a:	e7de      	b.n	800b40a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x56>
 800b44c:	2000033c 	.word	0x2000033c
 800b450:	2000084c 	.word	0x2000084c
 800b454:	200002bc 	.word	0x200002bc
 800b458:	20000310 	.word	0x20000310
 800b45c:	2000013c 	.word	0x2000013c
 800b460:	200001f0 	.word	0x200001f0

0800b464 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__size_function__Setup_Event__request>:
 800b464:	6840      	ldr	r0, [r0, #4]
 800b466:	4770      	bx	lr

0800b468 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_const_function__Setup_Event__request>:
 800b468:	6800      	ldr	r0, [r0, #0]
 800b46a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b46e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b472:	4770      	bx	lr

0800b474 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__fetch_function__Setup_Event__request>:
 800b474:	6803      	ldr	r3, [r0, #0]
 800b476:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b47a:	4694      	mov	ip, r2
 800b47c:	b500      	push	{lr}
 800b47e:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800b482:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b486:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b48a:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800b48e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800b492:	f85d fb04 	ldr.w	pc, [sp], #4
 800b496:	bf00      	nop

0800b498 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__assign_function__Setup_Event__request>:
 800b498:	6803      	ldr	r3, [r0, #0]
 800b49a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b49e:	b500      	push	{lr}
 800b4a0:	4696      	mov	lr, r2
 800b4a2:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800b4a6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b4aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b4ae:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800b4b2:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800b4b6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b4ba:	bf00      	nop

0800b4bc <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__size_function__Setup_Event__response>:
 800b4bc:	6840      	ldr	r0, [r0, #4]
 800b4be:	4770      	bx	lr

0800b4c0 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_const_function__Setup_Event__response>:
 800b4c0:	6800      	ldr	r0, [r0, #0]
 800b4c2:	4408      	add	r0, r1
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop

0800b4c8 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__fetch_function__Setup_Event__response>:
 800b4c8:	6803      	ldr	r3, [r0, #0]
 800b4ca:	5c5b      	ldrb	r3, [r3, r1]
 800b4cc:	7013      	strb	r3, [r2, #0]
 800b4ce:	4770      	bx	lr

0800b4d0 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__assign_function__Setup_Event__response>:
 800b4d0:	6803      	ldr	r3, [r0, #0]
 800b4d2:	7812      	ldrb	r2, [r2, #0]
 800b4d4:	545a      	strb	r2, [r3, r1]
 800b4d6:	4770      	bx	lr

0800b4d8 <racs_services__srv__Setup_Request__rosidl_typesupport_introspection_c__Setup_Request_init_function>:
 800b4d8:	f004 baee 	b.w	800fab8 <racs_services__srv__Setup_Request__init>

0800b4dc <racs_services__srv__Setup_Request__rosidl_typesupport_introspection_c__Setup_Request_fini_function>:
 800b4dc:	f004 baf0 	b.w	800fac0 <racs_services__srv__Setup_Request__fini>

0800b4e0 <racs_services__srv__Setup_Response__rosidl_typesupport_introspection_c__Setup_Response_init_function>:
 800b4e0:	f004 bb38 	b.w	800fb54 <racs_services__srv__Setup_Response__init>

0800b4e4 <racs_services__srv__Setup_Response__rosidl_typesupport_introspection_c__Setup_Response_fini_function>:
 800b4e4:	f004 bb3a 	b.w	800fb5c <racs_services__srv__Setup_Response__fini>

0800b4e8 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__Setup_Event_init_function>:
 800b4e8:	f004 bb70 	b.w	800fbcc <racs_services__srv__Setup_Event__init>

0800b4ec <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__Setup_Event_fini_function>:
 800b4ec:	f004 bb90 	b.w	800fc10 <racs_services__srv__Setup_Event__fini>

0800b4f0 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__resize_function__Setup_Event__request>:
 800b4f0:	b510      	push	{r4, lr}
 800b4f2:	4604      	mov	r4, r0
 800b4f4:	b082      	sub	sp, #8
 800b4f6:	9101      	str	r1, [sp, #4]
 800b4f8:	f004 fb18 	bl	800fb2c <racs_services__srv__Setup_Request__Sequence__fini>
 800b4fc:	9901      	ldr	r1, [sp, #4]
 800b4fe:	4620      	mov	r0, r4
 800b500:	b002      	add	sp, #8
 800b502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b506:	f004 baf7 	b.w	800faf8 <racs_services__srv__Setup_Request__Sequence__init>
 800b50a:	bf00      	nop

0800b50c <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__resize_function__Setup_Event__response>:
 800b50c:	b510      	push	{r4, lr}
 800b50e:	4604      	mov	r4, r0
 800b510:	b082      	sub	sp, #8
 800b512:	9101      	str	r1, [sp, #4]
 800b514:	f004 fb46 	bl	800fba4 <racs_services__srv__Setup_Response__Sequence__fini>
 800b518:	9901      	ldr	r1, [sp, #4]
 800b51a:	4620      	mov	r0, r4
 800b51c:	b002      	add	sp, #8
 800b51e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b522:	f004 bb25 	b.w	800fb70 <racs_services__srv__Setup_Response__Sequence__init>
 800b526:	bf00      	nop

0800b528 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_function__Setup_Event__response>:
 800b528:	6800      	ldr	r0, [r0, #0]
 800b52a:	4408      	add	r0, r1
 800b52c:	4770      	bx	lr
 800b52e:	bf00      	nop

0800b530 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_function__Setup_Event__request>:
 800b530:	6800      	ldr	r0, [r0, #0]
 800b532:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b536:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800b53a:	4770      	bx	lr

0800b53c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800b53c:	4b04      	ldr	r3, [pc, #16]	; (800b550 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	b10a      	cbz	r2, 800b546 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0xa>
 800b542:	4803      	ldr	r0, [pc, #12]	; (800b550 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800b544:	4770      	bx	lr
 800b546:	4a03      	ldr	r2, [pc, #12]	; (800b554 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x18>)
 800b548:	4801      	ldr	r0, [pc, #4]	; (800b550 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800b54a:	6812      	ldr	r2, [r2, #0]
 800b54c:	601a      	str	r2, [r3, #0]
 800b54e:	4770      	bx	lr
 800b550:	200005d8 	.word	0x200005d8
 800b554:	2000084c 	.word	0x2000084c

0800b558 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response>:
 800b558:	4b04      	ldr	r3, [pc, #16]	; (800b56c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	b10a      	cbz	r2, 800b562 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0xa>
 800b55e:	4803      	ldr	r0, [pc, #12]	; (800b56c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800b560:	4770      	bx	lr
 800b562:	4a03      	ldr	r2, [pc, #12]	; (800b570 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x18>)
 800b564:	4801      	ldr	r0, [pc, #4]	; (800b56c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800b566:	6812      	ldr	r2, [r2, #0]
 800b568:	601a      	str	r2, [r3, #0]
 800b56a:	4770      	bx	lr
 800b56c:	2000062c 	.word	0x2000062c
 800b570:	2000084c 	.word	0x2000084c

0800b574 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event>:
 800b574:	b508      	push	{r3, lr}
 800b576:	f001 fd3f 	bl	800cff8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800b57a:	4913      	ldr	r1, [pc, #76]	; (800b5c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x54>)
 800b57c:	4b13      	ldr	r3, [pc, #76]	; (800b5cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x58>)
 800b57e:	680a      	ldr	r2, [r1, #0]
 800b580:	60d8      	str	r0, [r3, #12]
 800b582:	b152      	cbz	r2, 800b59a <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x26>
 800b584:	4a12      	ldr	r2, [pc, #72]	; (800b5d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x5c>)
 800b586:	6499      	str	r1, [r3, #72]	; 0x48
 800b588:	6811      	ldr	r1, [r2, #0]
 800b58a:	b171      	cbz	r1, 800b5aa <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x36>
 800b58c:	4911      	ldr	r1, [pc, #68]	; (800b5d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800b58e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b592:	680b      	ldr	r3, [r1, #0]
 800b594:	b193      	cbz	r3, 800b5bc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x48>
 800b596:	480f      	ldr	r0, [pc, #60]	; (800b5d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800b598:	bd08      	pop	{r3, pc}
 800b59a:	4a0f      	ldr	r2, [pc, #60]	; (800b5d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800b59c:	6499      	str	r1, [r3, #72]	; 0x48
 800b59e:	6812      	ldr	r2, [r2, #0]
 800b5a0:	600a      	str	r2, [r1, #0]
 800b5a2:	4a0b      	ldr	r2, [pc, #44]	; (800b5d0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x5c>)
 800b5a4:	6811      	ldr	r1, [r2, #0]
 800b5a6:	2900      	cmp	r1, #0
 800b5a8:	d1f0      	bne.n	800b58c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x18>
 800b5aa:	490b      	ldr	r1, [pc, #44]	; (800b5d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800b5ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800b5b0:	6809      	ldr	r1, [r1, #0]
 800b5b2:	6011      	str	r1, [r2, #0]
 800b5b4:	4907      	ldr	r1, [pc, #28]	; (800b5d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800b5b6:	680b      	ldr	r3, [r1, #0]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d1ec      	bne.n	800b596 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x22>
 800b5bc:	4b06      	ldr	r3, [pc, #24]	; (800b5d8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800b5be:	4805      	ldr	r0, [pc, #20]	; (800b5d4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	600b      	str	r3, [r1, #0]
 800b5c4:	bd08      	pop	{r3, pc}
 800b5c6:	bf00      	nop
 800b5c8:	200005d8 	.word	0x200005d8
 800b5cc:	20000368 	.word	0x20000368
 800b5d0:	2000062c 	.word	0x2000062c
 800b5d4:	2000041c 	.word	0x2000041c
 800b5d8:	2000084c 	.word	0x2000084c

0800b5dc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800b5dc:	4b25      	ldr	r3, [pc, #148]	; (800b674 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800b5de:	681a      	ldr	r2, [r3, #0]
 800b5e0:	b510      	push	{r4, lr}
 800b5e2:	b142      	cbz	r2, 800b5f6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x1a>
 800b5e4:	685c      	ldr	r4, [r3, #4]
 800b5e6:	68a3      	ldr	r3, [r4, #8]
 800b5e8:	b163      	cbz	r3, 800b604 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x28>
 800b5ea:	68e3      	ldr	r3, [r4, #12]
 800b5ec:	b193      	cbz	r3, 800b614 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x38>
 800b5ee:	6923      	ldr	r3, [r4, #16]
 800b5f0:	b1c3      	cbz	r3, 800b624 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x48>
 800b5f2:	4820      	ldr	r0, [pc, #128]	; (800b674 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800b5f4:	bd10      	pop	{r4, pc}
 800b5f6:	4a20      	ldr	r2, [pc, #128]	; (800b678 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800b5f8:	685c      	ldr	r4, [r3, #4]
 800b5fa:	6812      	ldr	r2, [r2, #0]
 800b5fc:	601a      	str	r2, [r3, #0]
 800b5fe:	68a3      	ldr	r3, [r4, #8]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d1f2      	bne.n	800b5ea <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xe>
 800b604:	4a1d      	ldr	r2, [pc, #116]	; (800b67c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa0>)
 800b606:	6813      	ldr	r3, [r2, #0]
 800b608:	b303      	cbz	r3, 800b64c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x70>
 800b60a:	6853      	ldr	r3, [r2, #4]
 800b60c:	60a3      	str	r3, [r4, #8]
 800b60e:	68e3      	ldr	r3, [r4, #12]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d1ec      	bne.n	800b5ee <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x12>
 800b614:	4b1a      	ldr	r3, [pc, #104]	; (800b680 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa4>)
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	b1e2      	cbz	r2, 800b654 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x78>
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	60e3      	str	r3, [r4, #12]
 800b61e:	6923      	ldr	r3, [r4, #16]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d1e6      	bne.n	800b5f2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x16>
 800b624:	f001 fce8 	bl	800cff8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800b628:	4a14      	ldr	r2, [pc, #80]	; (800b67c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa0>)
 800b62a:	4916      	ldr	r1, [pc, #88]	; (800b684 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa8>)
 800b62c:	6813      	ldr	r3, [r2, #0]
 800b62e:	60c8      	str	r0, [r1, #12]
 800b630:	b1e3      	cbz	r3, 800b66c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x90>
 800b632:	4b13      	ldr	r3, [pc, #76]	; (800b680 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa4>)
 800b634:	648a      	str	r2, [r1, #72]	; 0x48
 800b636:	681a      	ldr	r2, [r3, #0]
 800b638:	b1a2      	cbz	r2, 800b664 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x88>
 800b63a:	4a13      	ldr	r2, [pc, #76]	; (800b688 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xac>)
 800b63c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800b640:	6813      	ldr	r3, [r2, #0]
 800b642:	b15b      	cbz	r3, 800b65c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x80>
 800b644:	6853      	ldr	r3, [r2, #4]
 800b646:	480b      	ldr	r0, [pc, #44]	; (800b674 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800b648:	6123      	str	r3, [r4, #16]
 800b64a:	bd10      	pop	{r4, pc}
 800b64c:	4b0a      	ldr	r3, [pc, #40]	; (800b678 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	6013      	str	r3, [r2, #0]
 800b652:	e7da      	b.n	800b60a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x2e>
 800b654:	4a08      	ldr	r2, [pc, #32]	; (800b678 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800b656:	6812      	ldr	r2, [r2, #0]
 800b658:	601a      	str	r2, [r3, #0]
 800b65a:	e7de      	b.n	800b61a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x3e>
 800b65c:	4b06      	ldr	r3, [pc, #24]	; (800b678 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	6013      	str	r3, [r2, #0]
 800b662:	e7ef      	b.n	800b644 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x68>
 800b664:	4a04      	ldr	r2, [pc, #16]	; (800b678 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800b666:	6812      	ldr	r2, [r2, #0]
 800b668:	601a      	str	r2, [r3, #0]
 800b66a:	e7e6      	b.n	800b63a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x5e>
 800b66c:	4b02      	ldr	r3, [pc, #8]	; (800b678 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	6013      	str	r3, [r2, #0]
 800b672:	e7de      	b.n	800b632 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x56>
 800b674:	20000658 	.word	0x20000658
 800b678:	2000084c 	.word	0x2000084c
 800b67c:	200005d8 	.word	0x200005d8
 800b680:	2000062c 	.word	0x2000062c
 800b684:	20000368 	.word	0x20000368
 800b688:	2000041c 	.word	0x2000041c

0800b68c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800b68c:	4800      	ldr	r0, [pc, #0]	; (800b690 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x4>)
 800b68e:	4770      	bx	lr
 800b690:	200006d8 	.word	0x200006d8

0800b694 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Response>:
 800b694:	4800      	ldr	r0, [pc, #0]	; (800b698 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x4>)
 800b696:	4770      	bx	lr
 800b698:	200006f0 	.word	0x200006f0

0800b69c <_Control_Response__max_serialized_size>:
 800b69c:	2101      	movs	r1, #1
 800b69e:	2000      	movs	r0, #0
 800b6a0:	b508      	push	{r3, lr}
 800b6a2:	f003 fba5 	bl	800edf0 <ucdr_alignment>
 800b6a6:	3001      	adds	r0, #1
 800b6a8:	bd08      	pop	{r3, pc}
 800b6aa:	bf00      	nop

0800b6ac <_Control_Response__cdr_deserialize>:
 800b6ac:	b109      	cbz	r1, 800b6b2 <_Control_Response__cdr_deserialize+0x6>
 800b6ae:	f002 b819 	b.w	800d6e4 <ucdr_deserialize_uint8_t>
 800b6b2:	4608      	mov	r0, r1
 800b6b4:	4770      	bx	lr
 800b6b6:	bf00      	nop

0800b6b8 <_Control_Event__max_serialized_size>:
 800b6b8:	b500      	push	{lr}
 800b6ba:	b083      	sub	sp, #12
 800b6bc:	2301      	movs	r3, #1
 800b6be:	2100      	movs	r1, #0
 800b6c0:	f10d 0007 	add.w	r0, sp, #7
 800b6c4:	f88d 3007 	strb.w	r3, [sp, #7]
 800b6c8:	f001 fd46 	bl	800d158 <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800b6cc:	b003      	add	sp, #12
 800b6ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800b6d2:	bf00      	nop

0800b6d4 <get_serialized_size_racs_services__srv__Control_Request>:
 800b6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6d6:	4604      	mov	r4, r0
 800b6d8:	b1a8      	cbz	r0, 800b706 <get_serialized_size_racs_services__srv__Control_Request+0x32>
 800b6da:	460d      	mov	r5, r1
 800b6dc:	2101      	movs	r1, #1
 800b6de:	1c6f      	adds	r7, r5, #1
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	f003 fb85 	bl	800edf0 <ucdr_alignment>
 800b6e6:	2101      	movs	r1, #1
 800b6e8:	4407      	add	r7, r0
 800b6ea:	4638      	mov	r0, r7
 800b6ec:	f003 fb80 	bl	800edf0 <ucdr_alignment>
 800b6f0:	68a6      	ldr	r6, [r4, #8]
 800b6f2:	1c44      	adds	r4, r0, #1
 800b6f4:	2104      	movs	r1, #4
 800b6f6:	443c      	add	r4, r7
 800b6f8:	4620      	mov	r0, r4
 800b6fa:	f003 fb79 	bl	800edf0 <ucdr_alignment>
 800b6fe:	1d03      	adds	r3, r0, #4
 800b700:	441c      	add	r4, r3
 800b702:	b90e      	cbnz	r6, 800b708 <get_serialized_size_racs_services__srv__Control_Request+0x34>
 800b704:	1b60      	subs	r0, r4, r5
 800b706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b708:	4620      	mov	r0, r4
 800b70a:	2104      	movs	r1, #4
 800b70c:	f003 fb70 	bl	800edf0 <ucdr_alignment>
 800b710:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b714:	181c      	adds	r4, r3, r0
 800b716:	1b60      	subs	r0, r4, r5
 800b718:	e7f5      	b.n	800b706 <get_serialized_size_racs_services__srv__Control_Request+0x32>
 800b71a:	bf00      	nop

0800b71c <get_serialized_size_racs_services__srv__Control_Response>:
 800b71c:	b138      	cbz	r0, 800b72e <get_serialized_size_racs_services__srv__Control_Response+0x12>
 800b71e:	b508      	push	{r3, lr}
 800b720:	460b      	mov	r3, r1
 800b722:	2101      	movs	r1, #1
 800b724:	4618      	mov	r0, r3
 800b726:	f003 fb63 	bl	800edf0 <ucdr_alignment>
 800b72a:	3001      	adds	r0, #1
 800b72c:	bd08      	pop	{r3, pc}
 800b72e:	4770      	bx	lr

0800b730 <_Control_Request__cdr_deserialize>:
 800b730:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b732:	460c      	mov	r4, r1
 800b734:	b083      	sub	sp, #12
 800b736:	b1c9      	cbz	r1, 800b76c <_Control_Request__cdr_deserialize+0x3c>
 800b738:	4605      	mov	r5, r0
 800b73a:	f001 ffd3 	bl	800d6e4 <ucdr_deserialize_uint8_t>
 800b73e:	1c61      	adds	r1, r4, #1
 800b740:	4628      	mov	r0, r5
 800b742:	f001 ffcf 	bl	800d6e4 <ucdr_deserialize_uint8_t>
 800b746:	68e7      	ldr	r7, [r4, #12]
 800b748:	ab01      	add	r3, sp, #4
 800b74a:	6861      	ldr	r1, [r4, #4]
 800b74c:	463a      	mov	r2, r7
 800b74e:	4628      	mov	r0, r5
 800b750:	f003 fc28 	bl	800efa4 <ucdr_deserialize_sequence_int32_t>
 800b754:	9b01      	ldr	r3, [sp, #4]
 800b756:	4606      	mov	r6, r0
 800b758:	b920      	cbnz	r0, 800b764 <_Control_Request__cdr_deserialize+0x34>
 800b75a:	429f      	cmp	r7, r3
 800b75c:	d30a      	bcc.n	800b774 <_Control_Request__cdr_deserialize+0x44>
 800b75e:	4630      	mov	r0, r6
 800b760:	b003      	add	sp, #12
 800b762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b764:	4630      	mov	r0, r6
 800b766:	60a3      	str	r3, [r4, #8]
 800b768:	b003      	add	sp, #12
 800b76a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b76c:	460e      	mov	r6, r1
 800b76e:	4630      	mov	r0, r6
 800b770:	b003      	add	sp, #12
 800b772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b774:	2301      	movs	r3, #1
 800b776:	4628      	mov	r0, r5
 800b778:	75ae      	strb	r6, [r5, #22]
 800b77a:	2104      	movs	r1, #4
 800b77c:	756b      	strb	r3, [r5, #21]
 800b77e:	60a6      	str	r6, [r4, #8]
 800b780:	f003 fb4e 	bl	800ee20 <ucdr_align_to>
 800b784:	9901      	ldr	r1, [sp, #4]
 800b786:	4628      	mov	r0, r5
 800b788:	0089      	lsls	r1, r1, #2
 800b78a:	f003 fb81 	bl	800ee90 <ucdr_advance_buffer>
 800b78e:	4630      	mov	r0, r6
 800b790:	b003      	add	sp, #12
 800b792:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b794 <_Control_Response__cdr_serialize>:
 800b794:	460a      	mov	r2, r1
 800b796:	b118      	cbz	r0, 800b7a0 <_Control_Response__cdr_serialize+0xc>
 800b798:	7801      	ldrb	r1, [r0, #0]
 800b79a:	4610      	mov	r0, r2
 800b79c:	f001 bf8c 	b.w	800d6b8 <ucdr_serialize_uint8_t>
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop

0800b7a4 <_Control_Request__cdr_serialize>:
 800b7a4:	b188      	cbz	r0, 800b7ca <_Control_Request__cdr_serialize+0x26>
 800b7a6:	b538      	push	{r3, r4, r5, lr}
 800b7a8:	460d      	mov	r5, r1
 800b7aa:	4604      	mov	r4, r0
 800b7ac:	7801      	ldrb	r1, [r0, #0]
 800b7ae:	4628      	mov	r0, r5
 800b7b0:	f001 ff82 	bl	800d6b8 <ucdr_serialize_uint8_t>
 800b7b4:	7861      	ldrb	r1, [r4, #1]
 800b7b6:	4628      	mov	r0, r5
 800b7b8:	f001 ff7e 	bl	800d6b8 <ucdr_serialize_uint8_t>
 800b7bc:	4628      	mov	r0, r5
 800b7be:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800b7c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7c6:	f003 bbdb 	b.w	800ef80 <ucdr_serialize_sequence_int32_t>
 800b7ca:	4770      	bx	lr

0800b7cc <get_serialized_size_racs_services__srv__Control_Event.part.0>:
 800b7cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7d0:	460e      	mov	r6, r1
 800b7d2:	4605      	mov	r5, r0
 800b7d4:	f001 fc26 	bl	800d024 <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800b7d8:	2104      	movs	r1, #4
 800b7da:	1837      	adds	r7, r6, r0
 800b7dc:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
 800b7e0:	4638      	mov	r0, r7
 800b7e2:	f003 fb05 	bl	800edf0 <ucdr_alignment>
 800b7e6:	3004      	adds	r0, #4
 800b7e8:	4407      	add	r7, r0
 800b7ea:	f1b9 0f00 	cmp.w	r9, #0
 800b7ee:	d019      	beq.n	800b824 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x58>
 800b7f0:	f04f 0800 	mov.w	r8, #0
 800b7f4:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800b874 <get_serialized_size_racs_services__srv__Control_Event.part.0+0xa8>
 800b7f8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800b7fa:	4639      	mov	r1, r7
 800b7fc:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b800:	eb00 1008 	add.w	r0, r0, r8, lsl #4
 800b804:	f108 0801 	add.w	r8, r8, #1
 800b808:	695b      	ldr	r3, [r3, #20]
 800b80a:	4798      	blx	r3
 800b80c:	4604      	mov	r4, r0
 800b80e:	4638      	mov	r0, r7
 800b810:	2c04      	cmp	r4, #4
 800b812:	4621      	mov	r1, r4
 800b814:	bf28      	it	cs
 800b816:	2104      	movcs	r1, #4
 800b818:	f003 faea 	bl	800edf0 <ucdr_alignment>
 800b81c:	45c1      	cmp	r9, r8
 800b81e:	4420      	add	r0, r4
 800b820:	4407      	add	r7, r0
 800b822:	d1e9      	bne.n	800b7f8 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x2c>
 800b824:	4638      	mov	r0, r7
 800b826:	2104      	movs	r1, #4
 800b828:	f8d5 8038 	ldr.w	r8, [r5, #56]	; 0x38
 800b82c:	f003 fae0 	bl	800edf0 <ucdr_alignment>
 800b830:	4407      	add	r7, r0
 800b832:	3704      	adds	r7, #4
 800b834:	f1b8 0f00 	cmp.w	r8, #0
 800b838:	d018      	beq.n	800b86c <get_serialized_size_racs_services__srv__Control_Event.part.0+0xa0>
 800b83a:	f04f 0900 	mov.w	r9, #0
 800b83e:	f8df a038 	ldr.w	sl, [pc, #56]	; 800b878 <get_serialized_size_racs_services__srv__Control_Event.part.0+0xac>
 800b842:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800b844:	4639      	mov	r1, r7
 800b846:	f8da 3004 	ldr.w	r3, [sl, #4]
 800b84a:	4448      	add	r0, r9
 800b84c:	f109 0901 	add.w	r9, r9, #1
 800b850:	695b      	ldr	r3, [r3, #20]
 800b852:	4798      	blx	r3
 800b854:	4604      	mov	r4, r0
 800b856:	4638      	mov	r0, r7
 800b858:	2c04      	cmp	r4, #4
 800b85a:	4621      	mov	r1, r4
 800b85c:	bf28      	it	cs
 800b85e:	2104      	movcs	r1, #4
 800b860:	f003 fac6 	bl	800edf0 <ucdr_alignment>
 800b864:	45c8      	cmp	r8, r9
 800b866:	4420      	add	r0, r4
 800b868:	4407      	add	r7, r0
 800b86a:	d1ea      	bne.n	800b842 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x76>
 800b86c:	1bb8      	subs	r0, r7, r6
 800b86e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b872:	bf00      	nop
 800b874:	200006d8 	.word	0x200006d8
 800b878:	200006f0 	.word	0x200006f0

0800b87c <get_serialized_size_racs_services__srv__Control_Event>:
 800b87c:	b108      	cbz	r0, 800b882 <get_serialized_size_racs_services__srv__Control_Event+0x6>
 800b87e:	f7ff bfa5 	b.w	800b7cc <get_serialized_size_racs_services__srv__Control_Event.part.0>
 800b882:	4770      	bx	lr

0800b884 <_Control_Event__get_serialized_size>:
 800b884:	b110      	cbz	r0, 800b88c <_Control_Event__get_serialized_size+0x8>
 800b886:	2100      	movs	r1, #0
 800b888:	f7ff bfa0 	b.w	800b7cc <get_serialized_size_racs_services__srv__Control_Event.part.0>
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop

0800b890 <_Control_Event__cdr_deserialize>:
 800b890:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b892:	460d      	mov	r5, r1
 800b894:	b083      	sub	sp, #12
 800b896:	2900      	cmp	r1, #0
 800b898:	d040      	beq.n	800b91c <_Control_Event__cdr_deserialize+0x8c>
 800b89a:	4606      	mov	r6, r0
 800b89c:	f001 fc82 	bl	800d1a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	4629      	mov	r1, r5
 800b8a4:	4630      	mov	r0, r6
 800b8a6:	685b      	ldr	r3, [r3, #4]
 800b8a8:	68db      	ldr	r3, [r3, #12]
 800b8aa:	4798      	blx	r3
 800b8ac:	4630      	mov	r0, r6
 800b8ae:	a901      	add	r1, sp, #4
 800b8b0:	f002 fa48 	bl	800dd44 <ucdr_deserialize_uint32_t>
 800b8b4:	9b01      	ldr	r3, [sp, #4]
 800b8b6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d32c      	bcc.n	800b916 <_Control_Event__cdr_deserialize+0x86>
 800b8bc:	62eb      	str	r3, [r5, #44]	; 0x2c
 800b8be:	b17b      	cbz	r3, 800b8e0 <_Control_Event__cdr_deserialize+0x50>
 800b8c0:	2400      	movs	r4, #0
 800b8c2:	4f18      	ldr	r7, [pc, #96]	; (800b924 <_Control_Event__cdr_deserialize+0x94>)
 800b8c4:	e002      	b.n	800b8cc <_Control_Event__cdr_deserialize+0x3c>
 800b8c6:	9b01      	ldr	r3, [sp, #4]
 800b8c8:	429c      	cmp	r4, r3
 800b8ca:	d209      	bcs.n	800b8e0 <_Control_Event__cdr_deserialize+0x50>
 800b8cc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800b8ce:	4630      	mov	r0, r6
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800b8d6:	3401      	adds	r4, #1
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	4798      	blx	r3
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	d1f2      	bne.n	800b8c6 <_Control_Event__cdr_deserialize+0x36>
 800b8e0:	a901      	add	r1, sp, #4
 800b8e2:	4630      	mov	r0, r6
 800b8e4:	f002 fa2e 	bl	800dd44 <ucdr_deserialize_uint32_t>
 800b8e8:	9b01      	ldr	r3, [sp, #4]
 800b8ea:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d312      	bcc.n	800b916 <_Control_Event__cdr_deserialize+0x86>
 800b8f0:	63ab      	str	r3, [r5, #56]	; 0x38
 800b8f2:	b18b      	cbz	r3, 800b918 <_Control_Event__cdr_deserialize+0x88>
 800b8f4:	2400      	movs	r4, #0
 800b8f6:	4f0c      	ldr	r7, [pc, #48]	; (800b928 <_Control_Event__cdr_deserialize+0x98>)
 800b8f8:	e002      	b.n	800b900 <_Control_Event__cdr_deserialize+0x70>
 800b8fa:	9b01      	ldr	r3, [sp, #4]
 800b8fc:	429c      	cmp	r4, r3
 800b8fe:	d20b      	bcs.n	800b918 <_Control_Event__cdr_deserialize+0x88>
 800b900:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800b902:	4630      	mov	r0, r6
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	4421      	add	r1, r4
 800b908:	3401      	adds	r4, #1
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	4798      	blx	r3
 800b90e:	2800      	cmp	r0, #0
 800b910:	d1f3      	bne.n	800b8fa <_Control_Event__cdr_deserialize+0x6a>
 800b912:	b003      	add	sp, #12
 800b914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b916:	2000      	movs	r0, #0
 800b918:	b003      	add	sp, #12
 800b91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b91c:	4608      	mov	r0, r1
 800b91e:	b003      	add	sp, #12
 800b920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b922:	bf00      	nop
 800b924:	200006d8 	.word	0x200006d8
 800b928:	200006f0 	.word	0x200006f0

0800b92c <_Control_Event__cdr_serialize>:
 800b92c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b930:	2800      	cmp	r0, #0
 800b932:	d039      	beq.n	800b9a8 <_Control_Event__cdr_serialize+0x7c>
 800b934:	4605      	mov	r5, r0
 800b936:	460e      	mov	r6, r1
 800b938:	f001 fc34 	bl	800d1a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800b93c:	4603      	mov	r3, r0
 800b93e:	4631      	mov	r1, r6
 800b940:	4628      	mov	r0, r5
 800b942:	685b      	ldr	r3, [r3, #4]
 800b944:	689b      	ldr	r3, [r3, #8]
 800b946:	4798      	blx	r3
 800b948:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800b94a:	4630      	mov	r0, r6
 800b94c:	4639      	mov	r1, r7
 800b94e:	f002 f8c9 	bl	800dae4 <ucdr_serialize_uint32_t>
 800b952:	b188      	cbz	r0, 800b978 <_Control_Event__cdr_serialize+0x4c>
 800b954:	b187      	cbz	r7, 800b978 <_Control_Event__cdr_serialize+0x4c>
 800b956:	2400      	movs	r4, #0
 800b958:	f8df 8058 	ldr.w	r8, [pc, #88]	; 800b9b4 <_Control_Event__cdr_serialize+0x88>
 800b95c:	e001      	b.n	800b962 <_Control_Event__cdr_serialize+0x36>
 800b95e:	42a7      	cmp	r7, r4
 800b960:	d00a      	beq.n	800b978 <_Control_Event__cdr_serialize+0x4c>
 800b962:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800b964:	4631      	mov	r1, r6
 800b966:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b96a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800b96e:	3401      	adds	r4, #1
 800b970:	689b      	ldr	r3, [r3, #8]
 800b972:	4798      	blx	r3
 800b974:	2800      	cmp	r0, #0
 800b976:	d1f2      	bne.n	800b95e <_Control_Event__cdr_serialize+0x32>
 800b978:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800b97a:	4630      	mov	r0, r6
 800b97c:	4639      	mov	r1, r7
 800b97e:	f002 f8b1 	bl	800dae4 <ucdr_serialize_uint32_t>
 800b982:	4680      	mov	r8, r0
 800b984:	b180      	cbz	r0, 800b9a8 <_Control_Event__cdr_serialize+0x7c>
 800b986:	b18f      	cbz	r7, 800b9ac <_Control_Event__cdr_serialize+0x80>
 800b988:	2400      	movs	r4, #0
 800b98a:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800b9b8 <_Control_Event__cdr_serialize+0x8c>
 800b98e:	e001      	b.n	800b994 <_Control_Event__cdr_serialize+0x68>
 800b990:	42a7      	cmp	r7, r4
 800b992:	d00b      	beq.n	800b9ac <_Control_Event__cdr_serialize+0x80>
 800b994:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800b996:	4631      	mov	r1, r6
 800b998:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b99c:	4420      	add	r0, r4
 800b99e:	3401      	adds	r4, #1
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	4798      	blx	r3
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	d1f3      	bne.n	800b990 <_Control_Event__cdr_serialize+0x64>
 800b9a8:	f04f 0800 	mov.w	r8, #0
 800b9ac:	4640      	mov	r0, r8
 800b9ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9b2:	bf00      	nop
 800b9b4:	200006d8 	.word	0x200006d8
 800b9b8:	200006f0 	.word	0x200006f0

0800b9bc <_Control_Response__get_serialized_size>:
 800b9bc:	b130      	cbz	r0, 800b9cc <_Control_Response__get_serialized_size+0x10>
 800b9be:	2101      	movs	r1, #1
 800b9c0:	2000      	movs	r0, #0
 800b9c2:	b508      	push	{r3, lr}
 800b9c4:	f003 fa14 	bl	800edf0 <ucdr_alignment>
 800b9c8:	3001      	adds	r0, #1
 800b9ca:	bd08      	pop	{r3, pc}
 800b9cc:	4770      	bx	lr
 800b9ce:	bf00      	nop

0800b9d0 <_Control_Request__max_serialized_size>:
 800b9d0:	b510      	push	{r4, lr}
 800b9d2:	2101      	movs	r1, #1
 800b9d4:	2000      	movs	r0, #0
 800b9d6:	f003 fa0b 	bl	800edf0 <ucdr_alignment>
 800b9da:	2101      	movs	r1, #1
 800b9dc:	1844      	adds	r4, r0, r1
 800b9de:	4620      	mov	r0, r4
 800b9e0:	f003 fa06 	bl	800edf0 <ucdr_alignment>
 800b9e4:	3001      	adds	r0, #1
 800b9e6:	4420      	add	r0, r4
 800b9e8:	bd10      	pop	{r4, pc}
 800b9ea:	bf00      	nop

0800b9ec <_Control_Request__get_serialized_size>:
 800b9ec:	b570      	push	{r4, r5, r6, lr}
 800b9ee:	4604      	mov	r4, r0
 800b9f0:	b190      	cbz	r0, 800ba18 <_Control_Request__get_serialized_size+0x2c>
 800b9f2:	2101      	movs	r1, #1
 800b9f4:	2000      	movs	r0, #0
 800b9f6:	f003 f9fb 	bl	800edf0 <ucdr_alignment>
 800b9fa:	2101      	movs	r1, #1
 800b9fc:	1845      	adds	r5, r0, r1
 800b9fe:	4628      	mov	r0, r5
 800ba00:	f003 f9f6 	bl	800edf0 <ucdr_alignment>
 800ba04:	68a6      	ldr	r6, [r4, #8]
 800ba06:	1c44      	adds	r4, r0, #1
 800ba08:	2104      	movs	r1, #4
 800ba0a:	4425      	add	r5, r4
 800ba0c:	4628      	mov	r0, r5
 800ba0e:	f003 f9ef 	bl	800edf0 <ucdr_alignment>
 800ba12:	1d04      	adds	r4, r0, #4
 800ba14:	442c      	add	r4, r5
 800ba16:	b90e      	cbnz	r6, 800ba1c <_Control_Request__get_serialized_size+0x30>
 800ba18:	4620      	mov	r0, r4
 800ba1a:	bd70      	pop	{r4, r5, r6, pc}
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800ba22:	2104      	movs	r1, #4
 800ba24:	f003 f9e4 	bl	800edf0 <ucdr_alignment>
 800ba28:	4404      	add	r4, r0
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	bd70      	pop	{r4, r5, r6, pc}
 800ba2e:	bf00      	nop

0800ba30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Event>:
 800ba30:	4800      	ldr	r0, [pc, #0]	; (800ba34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x4>)
 800ba32:	4770      	bx	lr
 800ba34:	200006c0 	.word	0x200006c0

0800ba38 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Control>:
 800ba38:	4800      	ldr	r0, [pc, #0]	; (800ba3c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Control+0x4>)
 800ba3a:	4770      	bx	lr
 800ba3c:	20000694 	.word	0x20000694

0800ba40 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800ba40:	4800      	ldr	r0, [pc, #0]	; (800ba44 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x4>)
 800ba42:	4770      	bx	lr
 800ba44:	200007b0 	.word	0x200007b0

0800ba48 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Response>:
 800ba48:	4800      	ldr	r0, [pc, #0]	; (800ba4c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x4>)
 800ba4a:	4770      	bx	lr
 800ba4c:	200007c8 	.word	0x200007c8

0800ba50 <_Setup_Response__max_serialized_size>:
 800ba50:	2101      	movs	r1, #1
 800ba52:	2000      	movs	r0, #0
 800ba54:	b508      	push	{r3, lr}
 800ba56:	f003 f9cb 	bl	800edf0 <ucdr_alignment>
 800ba5a:	3001      	adds	r0, #1
 800ba5c:	bd08      	pop	{r3, pc}
 800ba5e:	bf00      	nop

0800ba60 <_Setup_Response__cdr_deserialize>:
 800ba60:	b109      	cbz	r1, 800ba66 <_Setup_Response__cdr_deserialize+0x6>
 800ba62:	f001 be3f 	b.w	800d6e4 <ucdr_deserialize_uint8_t>
 800ba66:	4608      	mov	r0, r1
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop

0800ba6c <_Setup_Event__max_serialized_size>:
 800ba6c:	b500      	push	{lr}
 800ba6e:	b083      	sub	sp, #12
 800ba70:	2301      	movs	r3, #1
 800ba72:	2100      	movs	r1, #0
 800ba74:	f10d 0007 	add.w	r0, sp, #7
 800ba78:	f88d 3007 	strb.w	r3, [sp, #7]
 800ba7c:	f001 fb6c 	bl	800d158 <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800ba80:	b003      	add	sp, #12
 800ba82:	f85d fb04 	ldr.w	pc, [sp], #4
 800ba86:	bf00      	nop

0800ba88 <get_serialized_size_racs_services__srv__Setup_Request.part.0>:
 800ba88:	b570      	push	{r4, r5, r6, lr}
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	2101      	movs	r1, #1
 800ba8e:	f003 f9af 	bl	800edf0 <ucdr_alignment>
 800ba92:	2104      	movs	r1, #4
 800ba94:	1c65      	adds	r5, r4, #1
 800ba96:	f1c4 0404 	rsb	r4, r4, #4
 800ba9a:	4405      	add	r5, r0
 800ba9c:	4628      	mov	r0, r5
 800ba9e:	f003 f9a7 	bl	800edf0 <ucdr_alignment>
 800baa2:	2104      	movs	r1, #4
 800baa4:	1846      	adds	r6, r0, r1
 800baa6:	442e      	add	r6, r5
 800baa8:	4630      	mov	r0, r6
 800baaa:	f003 f9a1 	bl	800edf0 <ucdr_alignment>
 800baae:	2104      	movs	r1, #4
 800bab0:	1845      	adds	r5, r0, r1
 800bab2:	442e      	add	r6, r5
 800bab4:	4630      	mov	r0, r6
 800bab6:	f003 f99b 	bl	800edf0 <ucdr_alignment>
 800baba:	2104      	movs	r1, #4
 800babc:	4408      	add	r0, r1
 800babe:	4406      	add	r6, r0
 800bac0:	4630      	mov	r0, r6
 800bac2:	f003 f995 	bl	800edf0 <ucdr_alignment>
 800bac6:	2104      	movs	r1, #4
 800bac8:	1845      	adds	r5, r0, r1
 800baca:	4435      	add	r5, r6
 800bacc:	4628      	mov	r0, r5
 800bace:	f003 f98f 	bl	800edf0 <ucdr_alignment>
 800bad2:	2104      	movs	r1, #4
 800bad4:	4408      	add	r0, r1
 800bad6:	4405      	add	r5, r0
 800bad8:	4628      	mov	r0, r5
 800bada:	f003 f989 	bl	800edf0 <ucdr_alignment>
 800bade:	4420      	add	r0, r4
 800bae0:	4428      	add	r0, r5
 800bae2:	bd70      	pop	{r4, r5, r6, pc}

0800bae4 <get_serialized_size_racs_services__srv__Setup_Request>:
 800bae4:	b110      	cbz	r0, 800baec <get_serialized_size_racs_services__srv__Setup_Request+0x8>
 800bae6:	4608      	mov	r0, r1
 800bae8:	f7ff bfce 	b.w	800ba88 <get_serialized_size_racs_services__srv__Setup_Request.part.0>
 800baec:	4770      	bx	lr
 800baee:	bf00      	nop

0800baf0 <_Setup_Request__get_serialized_size>:
 800baf0:	b110      	cbz	r0, 800baf8 <_Setup_Request__get_serialized_size+0x8>
 800baf2:	2000      	movs	r0, #0
 800baf4:	f7ff bfc8 	b.w	800ba88 <get_serialized_size_racs_services__srv__Setup_Request.part.0>
 800baf8:	4770      	bx	lr
 800bafa:	bf00      	nop

0800bafc <get_serialized_size_racs_services__srv__Setup_Response>:
 800bafc:	b138      	cbz	r0, 800bb0e <get_serialized_size_racs_services__srv__Setup_Response+0x12>
 800bafe:	b508      	push	{r3, lr}
 800bb00:	460b      	mov	r3, r1
 800bb02:	2101      	movs	r1, #1
 800bb04:	4618      	mov	r0, r3
 800bb06:	f003 f973 	bl	800edf0 <ucdr_alignment>
 800bb0a:	3001      	adds	r0, #1
 800bb0c:	bd08      	pop	{r3, pc}
 800bb0e:	4770      	bx	lr

0800bb10 <_Setup_Request__cdr_deserialize>:
 800bb10:	b538      	push	{r3, r4, r5, lr}
 800bb12:	460c      	mov	r4, r1
 800bb14:	b309      	cbz	r1, 800bb5a <_Setup_Request__cdr_deserialize+0x4a>
 800bb16:	4605      	mov	r5, r0
 800bb18:	f001 fde4 	bl	800d6e4 <ucdr_deserialize_uint8_t>
 800bb1c:	1d21      	adds	r1, r4, #4
 800bb1e:	4628      	mov	r0, r5
 800bb20:	f003 f87e 	bl	800ec20 <ucdr_deserialize_float>
 800bb24:	f104 0108 	add.w	r1, r4, #8
 800bb28:	4628      	mov	r0, r5
 800bb2a:	f003 f879 	bl	800ec20 <ucdr_deserialize_float>
 800bb2e:	f104 010c 	add.w	r1, r4, #12
 800bb32:	4628      	mov	r0, r5
 800bb34:	f003 f874 	bl	800ec20 <ucdr_deserialize_float>
 800bb38:	f104 0110 	add.w	r1, r4, #16
 800bb3c:	4628      	mov	r0, r5
 800bb3e:	f003 f86f 	bl	800ec20 <ucdr_deserialize_float>
 800bb42:	f104 0114 	add.w	r1, r4, #20
 800bb46:	4628      	mov	r0, r5
 800bb48:	f003 f86a 	bl	800ec20 <ucdr_deserialize_float>
 800bb4c:	f104 0118 	add.w	r1, r4, #24
 800bb50:	4628      	mov	r0, r5
 800bb52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb56:	f003 b863 	b.w	800ec20 <ucdr_deserialize_float>
 800bb5a:	4608      	mov	r0, r1
 800bb5c:	bd38      	pop	{r3, r4, r5, pc}
 800bb5e:	bf00      	nop

0800bb60 <_Setup_Response__cdr_serialize>:
 800bb60:	460a      	mov	r2, r1
 800bb62:	b118      	cbz	r0, 800bb6c <_Setup_Response__cdr_serialize+0xc>
 800bb64:	7801      	ldrb	r1, [r0, #0]
 800bb66:	4610      	mov	r0, r2
 800bb68:	f001 bda6 	b.w	800d6b8 <ucdr_serialize_uint8_t>
 800bb6c:	4770      	bx	lr
 800bb6e:	bf00      	nop

0800bb70 <_Setup_Request__cdr_serialize>:
 800bb70:	b330      	cbz	r0, 800bbc0 <_Setup_Request__cdr_serialize+0x50>
 800bb72:	b538      	push	{r3, r4, r5, lr}
 800bb74:	460d      	mov	r5, r1
 800bb76:	4604      	mov	r4, r0
 800bb78:	7801      	ldrb	r1, [r0, #0]
 800bb7a:	4628      	mov	r0, r5
 800bb7c:	f001 fd9c 	bl	800d6b8 <ucdr_serialize_uint8_t>
 800bb80:	ed94 0a01 	vldr	s0, [r4, #4]
 800bb84:	4628      	mov	r0, r5
 800bb86:	f002 ffb3 	bl	800eaf0 <ucdr_serialize_float>
 800bb8a:	ed94 0a02 	vldr	s0, [r4, #8]
 800bb8e:	4628      	mov	r0, r5
 800bb90:	f002 ffae 	bl	800eaf0 <ucdr_serialize_float>
 800bb94:	ed94 0a03 	vldr	s0, [r4, #12]
 800bb98:	4628      	mov	r0, r5
 800bb9a:	f002 ffa9 	bl	800eaf0 <ucdr_serialize_float>
 800bb9e:	ed94 0a04 	vldr	s0, [r4, #16]
 800bba2:	4628      	mov	r0, r5
 800bba4:	f002 ffa4 	bl	800eaf0 <ucdr_serialize_float>
 800bba8:	ed94 0a05 	vldr	s0, [r4, #20]
 800bbac:	4628      	mov	r0, r5
 800bbae:	f002 ff9f 	bl	800eaf0 <ucdr_serialize_float>
 800bbb2:	ed94 0a06 	vldr	s0, [r4, #24]
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbbc:	f002 bf98 	b.w	800eaf0 <ucdr_serialize_float>
 800bbc0:	4770      	bx	lr
 800bbc2:	bf00      	nop

0800bbc4 <get_serialized_size_racs_services__srv__Setup_Event.part.0>:
 800bbc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbc8:	460e      	mov	r6, r1
 800bbca:	4605      	mov	r5, r0
 800bbcc:	f001 fa2a 	bl	800d024 <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800bbd0:	2104      	movs	r1, #4
 800bbd2:	eb06 0800 	add.w	r8, r6, r0
 800bbd6:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
 800bbda:	4640      	mov	r0, r8
 800bbdc:	f003 f908 	bl	800edf0 <ucdr_alignment>
 800bbe0:	3004      	adds	r0, #4
 800bbe2:	4480      	add	r8, r0
 800bbe4:	f1b9 0f00 	cmp.w	r9, #0
 800bbe8:	d019      	beq.n	800bc1e <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x5a>
 800bbea:	2700      	movs	r7, #0
 800bbec:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800bc6c <get_serialized_size_racs_services__srv__Setup_Event.part.0+0xa8>
 800bbf0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800bbf2:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
 800bbf6:	f8da 3004 	ldr.w	r3, [sl, #4]
 800bbfa:	4641      	mov	r1, r8
 800bbfc:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800bc00:	3701      	adds	r7, #1
 800bc02:	695b      	ldr	r3, [r3, #20]
 800bc04:	4798      	blx	r3
 800bc06:	4604      	mov	r4, r0
 800bc08:	4640      	mov	r0, r8
 800bc0a:	2c04      	cmp	r4, #4
 800bc0c:	4621      	mov	r1, r4
 800bc0e:	bf28      	it	cs
 800bc10:	2104      	movcs	r1, #4
 800bc12:	f003 f8ed 	bl	800edf0 <ucdr_alignment>
 800bc16:	45b9      	cmp	r9, r7
 800bc18:	4420      	add	r0, r4
 800bc1a:	4480      	add	r8, r0
 800bc1c:	d1e8      	bne.n	800bbf0 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x2c>
 800bc1e:	4640      	mov	r0, r8
 800bc20:	2104      	movs	r1, #4
 800bc22:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800bc24:	f003 f8e4 	bl	800edf0 <ucdr_alignment>
 800bc28:	4480      	add	r8, r0
 800bc2a:	f108 0804 	add.w	r8, r8, #4
 800bc2e:	b1c7      	cbz	r7, 800bc62 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x9e>
 800bc30:	f04f 0900 	mov.w	r9, #0
 800bc34:	f8df a038 	ldr.w	sl, [pc, #56]	; 800bc70 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0xac>
 800bc38:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800bc3a:	4641      	mov	r1, r8
 800bc3c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800bc40:	4448      	add	r0, r9
 800bc42:	f109 0901 	add.w	r9, r9, #1
 800bc46:	695b      	ldr	r3, [r3, #20]
 800bc48:	4798      	blx	r3
 800bc4a:	4604      	mov	r4, r0
 800bc4c:	4640      	mov	r0, r8
 800bc4e:	2c04      	cmp	r4, #4
 800bc50:	4621      	mov	r1, r4
 800bc52:	bf28      	it	cs
 800bc54:	2104      	movcs	r1, #4
 800bc56:	f003 f8cb 	bl	800edf0 <ucdr_alignment>
 800bc5a:	454f      	cmp	r7, r9
 800bc5c:	4420      	add	r0, r4
 800bc5e:	4480      	add	r8, r0
 800bc60:	d1ea      	bne.n	800bc38 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x74>
 800bc62:	eba8 0006 	sub.w	r0, r8, r6
 800bc66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc6a:	bf00      	nop
 800bc6c:	200007b0 	.word	0x200007b0
 800bc70:	200007c8 	.word	0x200007c8

0800bc74 <get_serialized_size_racs_services__srv__Setup_Event>:
 800bc74:	b108      	cbz	r0, 800bc7a <get_serialized_size_racs_services__srv__Setup_Event+0x6>
 800bc76:	f7ff bfa5 	b.w	800bbc4 <get_serialized_size_racs_services__srv__Setup_Event.part.0>
 800bc7a:	4770      	bx	lr

0800bc7c <_Setup_Event__get_serialized_size>:
 800bc7c:	b110      	cbz	r0, 800bc84 <_Setup_Event__get_serialized_size+0x8>
 800bc7e:	2100      	movs	r1, #0
 800bc80:	f7ff bfa0 	b.w	800bbc4 <get_serialized_size_racs_services__srv__Setup_Event.part.0>
 800bc84:	4770      	bx	lr
 800bc86:	bf00      	nop

0800bc88 <_Setup_Event__cdr_deserialize>:
 800bc88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc8c:	460c      	mov	r4, r1
 800bc8e:	b082      	sub	sp, #8
 800bc90:	2900      	cmp	r1, #0
 800bc92:	d045      	beq.n	800bd20 <_Setup_Event__cdr_deserialize+0x98>
 800bc94:	4607      	mov	r7, r0
 800bc96:	f001 fa85 	bl	800d1a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	4621      	mov	r1, r4
 800bc9e:	4638      	mov	r0, r7
 800bca0:	685b      	ldr	r3, [r3, #4]
 800bca2:	68db      	ldr	r3, [r3, #12]
 800bca4:	4798      	blx	r3
 800bca6:	4638      	mov	r0, r7
 800bca8:	a901      	add	r1, sp, #4
 800bcaa:	f002 f84b 	bl	800dd44 <ucdr_deserialize_uint32_t>
 800bcae:	9b01      	ldr	r3, [sp, #4]
 800bcb0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d330      	bcc.n	800bd18 <_Setup_Event__cdr_deserialize+0x90>
 800bcb6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bcb8:	b193      	cbz	r3, 800bce0 <_Setup_Event__cdr_deserialize+0x58>
 800bcba:	2500      	movs	r5, #0
 800bcbc:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800bd2c <_Setup_Event__cdr_deserialize+0xa4>
 800bcc0:	462e      	mov	r6, r5
 800bcc2:	e002      	b.n	800bcca <_Setup_Event__cdr_deserialize+0x42>
 800bcc4:	9b01      	ldr	r3, [sp, #4]
 800bcc6:	429e      	cmp	r6, r3
 800bcc8:	d20a      	bcs.n	800bce0 <_Setup_Event__cdr_deserialize+0x58>
 800bcca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800bccc:	4638      	mov	r0, r7
 800bcce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bcd2:	3601      	adds	r6, #1
 800bcd4:	4429      	add	r1, r5
 800bcd6:	351c      	adds	r5, #28
 800bcd8:	68db      	ldr	r3, [r3, #12]
 800bcda:	4798      	blx	r3
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	d1f1      	bne.n	800bcc4 <_Setup_Event__cdr_deserialize+0x3c>
 800bce0:	a901      	add	r1, sp, #4
 800bce2:	4638      	mov	r0, r7
 800bce4:	f002 f82e 	bl	800dd44 <ucdr_deserialize_uint32_t>
 800bce8:	9b01      	ldr	r3, [sp, #4]
 800bcea:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d313      	bcc.n	800bd18 <_Setup_Event__cdr_deserialize+0x90>
 800bcf0:	63a3      	str	r3, [r4, #56]	; 0x38
 800bcf2:	b193      	cbz	r3, 800bd1a <_Setup_Event__cdr_deserialize+0x92>
 800bcf4:	2500      	movs	r5, #0
 800bcf6:	4e0c      	ldr	r6, [pc, #48]	; (800bd28 <_Setup_Event__cdr_deserialize+0xa0>)
 800bcf8:	e002      	b.n	800bd00 <_Setup_Event__cdr_deserialize+0x78>
 800bcfa:	9b01      	ldr	r3, [sp, #4]
 800bcfc:	429d      	cmp	r5, r3
 800bcfe:	d20c      	bcs.n	800bd1a <_Setup_Event__cdr_deserialize+0x92>
 800bd00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd02:	4638      	mov	r0, r7
 800bd04:	6873      	ldr	r3, [r6, #4]
 800bd06:	4429      	add	r1, r5
 800bd08:	3501      	adds	r5, #1
 800bd0a:	68db      	ldr	r3, [r3, #12]
 800bd0c:	4798      	blx	r3
 800bd0e:	2800      	cmp	r0, #0
 800bd10:	d1f3      	bne.n	800bcfa <_Setup_Event__cdr_deserialize+0x72>
 800bd12:	b002      	add	sp, #8
 800bd14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd18:	2000      	movs	r0, #0
 800bd1a:	b002      	add	sp, #8
 800bd1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd20:	4608      	mov	r0, r1
 800bd22:	b002      	add	sp, #8
 800bd24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd28:	200007c8 	.word	0x200007c8
 800bd2c:	200007b0 	.word	0x200007b0

0800bd30 <_Setup_Event__cdr_serialize>:
 800bd30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd34:	2800      	cmp	r0, #0
 800bd36:	d03b      	beq.n	800bdb0 <_Setup_Event__cdr_serialize+0x80>
 800bd38:	4605      	mov	r5, r0
 800bd3a:	460e      	mov	r6, r1
 800bd3c:	f001 fa32 	bl	800d1a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800bd40:	4603      	mov	r3, r0
 800bd42:	4631      	mov	r1, r6
 800bd44:	4628      	mov	r0, r5
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	689b      	ldr	r3, [r3, #8]
 800bd4a:	4798      	blx	r3
 800bd4c:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800bd4e:	4630      	mov	r0, r6
 800bd50:	4639      	mov	r1, r7
 800bd52:	f001 fec7 	bl	800dae4 <ucdr_serialize_uint32_t>
 800bd56:	b198      	cbz	r0, 800bd80 <_Setup_Event__cdr_serialize+0x50>
 800bd58:	b197      	cbz	r7, 800bd80 <_Setup_Event__cdr_serialize+0x50>
 800bd5a:	2400      	movs	r4, #0
 800bd5c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800bdbc <_Setup_Event__cdr_serialize+0x8c>
 800bd60:	e001      	b.n	800bd66 <_Setup_Event__cdr_serialize+0x36>
 800bd62:	42a7      	cmp	r7, r4
 800bd64:	d00c      	beq.n	800bd80 <_Setup_Event__cdr_serialize+0x50>
 800bd66:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800bd6a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800bd6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bd70:	4631      	mov	r1, r6
 800bd72:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800bd76:	3401      	adds	r4, #1
 800bd78:	689b      	ldr	r3, [r3, #8]
 800bd7a:	4798      	blx	r3
 800bd7c:	2800      	cmp	r0, #0
 800bd7e:	d1f0      	bne.n	800bd62 <_Setup_Event__cdr_serialize+0x32>
 800bd80:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800bd82:	4630      	mov	r0, r6
 800bd84:	4639      	mov	r1, r7
 800bd86:	f001 fead 	bl	800dae4 <ucdr_serialize_uint32_t>
 800bd8a:	4680      	mov	r8, r0
 800bd8c:	b180      	cbz	r0, 800bdb0 <_Setup_Event__cdr_serialize+0x80>
 800bd8e:	b18f      	cbz	r7, 800bdb4 <_Setup_Event__cdr_serialize+0x84>
 800bd90:	2400      	movs	r4, #0
 800bd92:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800bdc0 <_Setup_Event__cdr_serialize+0x90>
 800bd96:	e001      	b.n	800bd9c <_Setup_Event__cdr_serialize+0x6c>
 800bd98:	42a7      	cmp	r7, r4
 800bd9a:	d00b      	beq.n	800bdb4 <_Setup_Event__cdr_serialize+0x84>
 800bd9c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800bd9e:	4631      	mov	r1, r6
 800bda0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bda4:	4420      	add	r0, r4
 800bda6:	3401      	adds	r4, #1
 800bda8:	689b      	ldr	r3, [r3, #8]
 800bdaa:	4798      	blx	r3
 800bdac:	2800      	cmp	r0, #0
 800bdae:	d1f3      	bne.n	800bd98 <_Setup_Event__cdr_serialize+0x68>
 800bdb0:	f04f 0800 	mov.w	r8, #0
 800bdb4:	4640      	mov	r0, r8
 800bdb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdba:	bf00      	nop
 800bdbc:	200007b0 	.word	0x200007b0
 800bdc0:	200007c8 	.word	0x200007c8

0800bdc4 <_Setup_Response__get_serialized_size>:
 800bdc4:	b130      	cbz	r0, 800bdd4 <_Setup_Response__get_serialized_size+0x10>
 800bdc6:	2101      	movs	r1, #1
 800bdc8:	2000      	movs	r0, #0
 800bdca:	b508      	push	{r3, lr}
 800bdcc:	f003 f810 	bl	800edf0 <ucdr_alignment>
 800bdd0:	3001      	adds	r0, #1
 800bdd2:	bd08      	pop	{r3, pc}
 800bdd4:	4770      	bx	lr
 800bdd6:	bf00      	nop

0800bdd8 <max_serialized_size_racs_services__srv__Setup_Request>:
 800bdd8:	b570      	push	{r4, r5, r6, lr}
 800bdda:	460c      	mov	r4, r1
 800bddc:	2301      	movs	r3, #1
 800bdde:	1c65      	adds	r5, r4, #1
 800bde0:	4619      	mov	r1, r3
 800bde2:	7003      	strb	r3, [r0, #0]
 800bde4:	4620      	mov	r0, r4
 800bde6:	f003 f803 	bl	800edf0 <ucdr_alignment>
 800bdea:	4405      	add	r5, r0
 800bdec:	2104      	movs	r1, #4
 800bdee:	f1c4 0404 	rsb	r4, r4, #4
 800bdf2:	4628      	mov	r0, r5
 800bdf4:	f002 fffc 	bl	800edf0 <ucdr_alignment>
 800bdf8:	2104      	movs	r1, #4
 800bdfa:	1846      	adds	r6, r0, r1
 800bdfc:	442e      	add	r6, r5
 800bdfe:	4630      	mov	r0, r6
 800be00:	f002 fff6 	bl	800edf0 <ucdr_alignment>
 800be04:	2104      	movs	r1, #4
 800be06:	1845      	adds	r5, r0, r1
 800be08:	442e      	add	r6, r5
 800be0a:	4630      	mov	r0, r6
 800be0c:	f002 fff0 	bl	800edf0 <ucdr_alignment>
 800be10:	2104      	movs	r1, #4
 800be12:	4408      	add	r0, r1
 800be14:	4406      	add	r6, r0
 800be16:	4630      	mov	r0, r6
 800be18:	f002 ffea 	bl	800edf0 <ucdr_alignment>
 800be1c:	2104      	movs	r1, #4
 800be1e:	1845      	adds	r5, r0, r1
 800be20:	4435      	add	r5, r6
 800be22:	4628      	mov	r0, r5
 800be24:	f002 ffe4 	bl	800edf0 <ucdr_alignment>
 800be28:	2104      	movs	r1, #4
 800be2a:	4408      	add	r0, r1
 800be2c:	4405      	add	r5, r0
 800be2e:	4628      	mov	r0, r5
 800be30:	f002 ffde 	bl	800edf0 <ucdr_alignment>
 800be34:	4420      	add	r0, r4
 800be36:	4428      	add	r0, r5
 800be38:	bd70      	pop	{r4, r5, r6, pc}
 800be3a:	bf00      	nop

0800be3c <_Setup_Request__max_serialized_size>:
 800be3c:	b500      	push	{lr}
 800be3e:	b083      	sub	sp, #12
 800be40:	2100      	movs	r1, #0
 800be42:	f10d 0007 	add.w	r0, sp, #7
 800be46:	f7ff ffc7 	bl	800bdd8 <max_serialized_size_racs_services__srv__Setup_Request>
 800be4a:	b003      	add	sp, #12
 800be4c:	f85d fb04 	ldr.w	pc, [sp], #4

0800be50 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Event>:
 800be50:	4800      	ldr	r0, [pc, #0]	; (800be54 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x4>)
 800be52:	4770      	bx	lr
 800be54:	20000798 	.word	0x20000798

0800be58 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800be58:	4800      	ldr	r0, [pc, #0]	; (800be5c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Setup+0x4>)
 800be5a:	4770      	bx	lr
 800be5c:	2000076c 	.word	0x2000076c

0800be60 <_rclc_check_for_new_data>:
 800be60:	2800      	cmp	r0, #0
 800be62:	d046      	beq.n	800bef2 <_rclc_check_for_new_data+0x92>
 800be64:	4603      	mov	r3, r0
 800be66:	b530      	push	{r4, r5, lr}
 800be68:	7802      	ldrb	r2, [r0, #0]
 800be6a:	b085      	sub	sp, #20
 800be6c:	2a0a      	cmp	r2, #10
 800be6e:	d842      	bhi.n	800bef6 <_rclc_check_for_new_data+0x96>
 800be70:	e8df f002 	tbb	[pc, r2]
 800be74:	14181212 	.word	0x14181212
 800be78:	06060614 	.word	0x06060614
 800be7c:	2e1a      	.short	0x2e1a
 800be7e:	16          	.byte	0x16
 800be7f:	00          	.byte	0x00
 800be80:	6a0a      	ldr	r2, [r1, #32]
 800be82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800be84:	2000      	movs	r0, #0
 800be86:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800be8a:	1a12      	subs	r2, r2, r0
 800be8c:	bf18      	it	ne
 800be8e:	2201      	movne	r2, #1
 800be90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800be94:	b005      	add	sp, #20
 800be96:	bd30      	pop	{r4, r5, pc}
 800be98:	680a      	ldr	r2, [r1, #0]
 800be9a:	e7f2      	b.n	800be82 <_rclc_check_for_new_data+0x22>
 800be9c:	698a      	ldr	r2, [r1, #24]
 800be9e:	e7f0      	b.n	800be82 <_rclc_check_for_new_data+0x22>
 800bea0:	688a      	ldr	r2, [r1, #8]
 800bea2:	e7ee      	b.n	800be82 <_rclc_check_for_new_data+0x22>
 800bea4:	690a      	ldr	r2, [r1, #16]
 800bea6:	e7ec      	b.n	800be82 <_rclc_check_for_new_data+0x22>
 800bea8:	685c      	ldr	r4, [r3, #4]
 800beaa:	4608      	mov	r0, r1
 800beac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800beb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800beb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800beb8:	f104 0110 	add.w	r1, r4, #16
 800bebc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800bec0:	9500      	str	r5, [sp, #0]
 800bec2:	f104 0341 	add.w	r3, r4, #65	; 0x41
 800bec6:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800beca:	f006 fa4d 	bl	8012368 <rcl_action_client_wait_set_get_entities_ready>
 800bece:	e7e1      	b.n	800be94 <_rclc_check_for_new_data+0x34>
 800bed0:	685c      	ldr	r4, [r3, #4]
 800bed2:	4608      	mov	r0, r1
 800bed4:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800bed8:	f104 0123 	add.w	r1, r4, #35	; 0x23
 800bedc:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800bee0:	e9cd 2100 	strd	r2, r1, [sp]
 800bee4:	f104 0220 	add.w	r2, r4, #32
 800bee8:	f104 0110 	add.w	r1, r4, #16
 800beec:	f006 fc54 	bl	8012798 <rcl_action_server_wait_set_get_entities_ready>
 800bef0:	e7d0      	b.n	800be94 <_rclc_check_for_new_data+0x34>
 800bef2:	200b      	movs	r0, #11
 800bef4:	4770      	bx	lr
 800bef6:	2001      	movs	r0, #1
 800bef8:	e7cc      	b.n	800be94 <_rclc_check_for_new_data+0x34>
 800befa:	bf00      	nop

0800befc <_rclc_take_new_data>:
 800befc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800befe:	b099      	sub	sp, #100	; 0x64
 800bf00:	2800      	cmp	r0, #0
 800bf02:	f000 8088 	beq.w	800c016 <_rclc_take_new_data+0x11a>
 800bf06:	7803      	ldrb	r3, [r0, #0]
 800bf08:	4604      	mov	r4, r0
 800bf0a:	2b0a      	cmp	r3, #10
 800bf0c:	f200 8167 	bhi.w	800c1de <_rclc_take_new_data+0x2e2>
 800bf10:	e8df f003 	tbb	[pc, r3]
 800bf14:	44152d2d 	.word	0x44152d2d
 800bf18:	19191944 	.word	0x19191944
 800bf1c:	065a      	.short	0x065a
 800bf1e:	15          	.byte	0x15
 800bf1f:	00          	.byte	0x00
 800bf20:	6840      	ldr	r0, [r0, #4]
 800bf22:	f890 3020 	ldrb.w	r3, [r0, #32]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	f040 80b2 	bne.w	800c090 <_rclc_take_new_data+0x194>
 800bf2c:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	f040 80e4 	bne.w	800c0fe <_rclc_take_new_data+0x202>
 800bf36:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d16f      	bne.n	800c01e <_rclc_take_new_data+0x122>
 800bf3e:	2500      	movs	r5, #0
 800bf40:	4628      	mov	r0, r5
 800bf42:	b019      	add	sp, #100	; 0x64
 800bf44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf46:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800bf48:	6a0b      	ldr	r3, [r1, #32]
 800bf4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d0f5      	beq.n	800bf3e <_rclc_take_new_data+0x42>
 800bf52:	6882      	ldr	r2, [r0, #8]
 800bf54:	f100 0110 	add.w	r1, r0, #16
 800bf58:	6840      	ldr	r0, [r0, #4]
 800bf5a:	f004 fed5 	bl	8010d08 <rcl_take_request>
 800bf5e:	4605      	mov	r5, r0
 800bf60:	2800      	cmp	r0, #0
 800bf62:	d0ec      	beq.n	800bf3e <_rclc_take_new_data+0x42>
 800bf64:	f240 2359 	movw	r3, #601	; 0x259
 800bf68:	4298      	cmp	r0, r3
 800bf6a:	d013      	beq.n	800bf94 <_rclc_take_new_data+0x98>
 800bf6c:	e029      	b.n	800bfc2 <_rclc_take_new_data+0xc6>
 800bf6e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800bf70:	680b      	ldr	r3, [r1, #0]
 800bf72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d0e1      	beq.n	800bf3e <_rclc_take_new_data+0x42>
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	aa0a      	add	r2, sp, #40	; 0x28
 800bf7e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800bf82:	f004 ffe9 	bl	8010f58 <rcl_take>
 800bf86:	4605      	mov	r5, r0
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	d0d9      	beq.n	800bf40 <_rclc_take_new_data+0x44>
 800bf8c:	f240 1391 	movw	r3, #401	; 0x191
 800bf90:	4298      	cmp	r0, r3
 800bf92:	d116      	bne.n	800bfc2 <_rclc_take_new_data+0xc6>
 800bf94:	2300      	movs	r3, #0
 800bf96:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800bf9a:	e7d1      	b.n	800bf40 <_rclc_take_new_data+0x44>
 800bf9c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800bf9e:	698b      	ldr	r3, [r1, #24]
 800bfa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d0ca      	beq.n	800bf3e <_rclc_take_new_data+0x42>
 800bfa8:	6882      	ldr	r2, [r0, #8]
 800bfaa:	f100 0110 	add.w	r1, r0, #16
 800bfae:	6840      	ldr	r0, [r0, #4]
 800bfb0:	f003 ff1a 	bl	800fde8 <rcl_take_response>
 800bfb4:	4605      	mov	r5, r0
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	d0c1      	beq.n	800bf3e <_rclc_take_new_data+0x42>
 800bfba:	f240 13f5 	movw	r3, #501	; 0x1f5
 800bfbe:	4298      	cmp	r0, r3
 800bfc0:	d0be      	beq.n	800bf40 <_rclc_take_new_data+0x44>
 800bfc2:	f000 feb9 	bl	800cd38 <rcutils_reset_error>
 800bfc6:	e7bb      	b.n	800bf40 <_rclc_take_new_data+0x44>
 800bfc8:	6840      	ldr	r0, [r0, #4]
 800bfca:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d17d      	bne.n	800c0ce <_rclc_take_new_data+0x1d2>
 800bfd2:	69c3      	ldr	r3, [r0, #28]
 800bfd4:	b11b      	cbz	r3, 800bfde <_rclc_take_new_data+0xe2>
 800bfd6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d144      	bne.n	800c068 <_rclc_take_new_data+0x16c>
 800bfde:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	f040 80ac 	bne.w	800c140 <_rclc_take_new_data+0x244>
 800bfe8:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d0a6      	beq.n	800bf3e <_rclc_take_new_data+0x42>
 800bff0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800bff2:	a90a      	add	r1, sp, #40	; 0x28
 800bff4:	3010      	adds	r0, #16
 800bff6:	f006 f88f 	bl	8012118 <rcl_action_take_result_response>
 800bffa:	4605      	mov	r5, r0
 800bffc:	2800      	cmp	r0, #0
 800bffe:	d1e0      	bne.n	800bfc2 <_rclc_take_new_data+0xc6>
 800c000:	6860      	ldr	r0, [r4, #4]
 800c002:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c006:	f006 fcf7 	bl	80129f8 <rclc_action_find_handle_by_result_request_sequence_number>
 800c00a:	2800      	cmp	r0, #0
 800c00c:	d098      	beq.n	800bf40 <_rclc_take_new_data+0x44>
 800c00e:	2301      	movs	r3, #1
 800c010:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 800c014:	e794      	b.n	800bf40 <_rclc_take_new_data+0x44>
 800c016:	250b      	movs	r5, #11
 800c018:	4628      	mov	r0, r5
 800c01a:	b019      	add	sp, #100	; 0x64
 800c01c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c01e:	ae04      	add	r6, sp, #16
 800c020:	3010      	adds	r0, #16
 800c022:	aa0a      	add	r2, sp, #40	; 0x28
 800c024:	4631      	mov	r1, r6
 800c026:	f006 faeb 	bl	8012600 <rcl_action_take_cancel_request>
 800c02a:	4605      	mov	r5, r0
 800c02c:	2800      	cmp	r0, #0
 800c02e:	d1c8      	bne.n	800bfc2 <_rclc_take_new_data+0xc6>
 800c030:	a90a      	add	r1, sp, #40	; 0x28
 800c032:	6860      	ldr	r0, [r4, #4]
 800c034:	f006 fca0 	bl	8012978 <rclc_action_find_goal_handle_by_uuid>
 800c038:	4607      	mov	r7, r0
 800c03a:	2800      	cmp	r0, #0
 800c03c:	f000 80bb 	beq.w	800c1b6 <_rclc_take_new_data+0x2ba>
 800c040:	2101      	movs	r1, #1
 800c042:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800c046:	f006 fc21 	bl	801288c <rcl_action_transition_goal_state>
 800c04a:	2803      	cmp	r0, #3
 800c04c:	4684      	mov	ip, r0
 800c04e:	f040 80a7 	bne.w	800c1a0 <_rclc_take_new_data+0x2a4>
 800c052:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800c056:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c058:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c05a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c05e:	e884 0003 	stmia.w	r4, {r0, r1}
 800c062:	f887 c008 	strb.w	ip, [r7, #8]
 800c066:	e76b      	b.n	800bf40 <_rclc_take_new_data+0x44>
 800c068:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800c06a:	3010      	adds	r0, #16
 800c06c:	f006 f8d4 	bl	8012218 <rcl_action_take_feedback>
 800c070:	4605      	mov	r5, r0
 800c072:	2800      	cmp	r0, #0
 800c074:	d1a5      	bne.n	800bfc2 <_rclc_take_new_data+0xc6>
 800c076:	6860      	ldr	r0, [r4, #4]
 800c078:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800c07a:	f006 fc7d 	bl	8012978 <rclc_action_find_goal_handle_by_uuid>
 800c07e:	4603      	mov	r3, r0
 800c080:	2800      	cmp	r0, #0
 800c082:	f000 80a3 	beq.w	800c1cc <_rclc_take_new_data+0x2d0>
 800c086:	2201      	movs	r2, #1
 800c088:	6860      	ldr	r0, [r4, #4]
 800c08a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800c08e:	e7a6      	b.n	800bfde <_rclc_take_new_data+0xe2>
 800c090:	f006 fc4c 	bl	801292c <rclc_action_take_goal_handle>
 800c094:	4606      	mov	r6, r0
 800c096:	6860      	ldr	r0, [r4, #4]
 800c098:	2e00      	cmp	r6, #0
 800c09a:	f43f af47 	beq.w	800bf2c <_rclc_take_new_data+0x30>
 800c09e:	6070      	str	r0, [r6, #4]
 800c0a0:	f106 0128 	add.w	r1, r6, #40	; 0x28
 800c0a4:	69f2      	ldr	r2, [r6, #28]
 800c0a6:	3010      	adds	r0, #16
 800c0a8:	f006 f9f4 	bl	8012494 <rcl_action_take_goal_request>
 800c0ac:	4605      	mov	r5, r0
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	f040 808e 	bne.w	800c1d0 <_rclc_take_new_data+0x2d4>
 800c0b4:	69f7      	ldr	r7, [r6, #28]
 800c0b6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c0b8:	7235      	strb	r5, [r6, #8]
 800c0ba:	f8c6 0009 	str.w	r0, [r6, #9]
 800c0be:	f8c6 100d 	str.w	r1, [r6, #13]
 800c0c2:	6860      	ldr	r0, [r4, #4]
 800c0c4:	f8c6 2011 	str.w	r2, [r6, #17]
 800c0c8:	f8c6 3015 	str.w	r3, [r6, #21]
 800c0cc:	e72e      	b.n	800bf2c <_rclc_take_new_data+0x30>
 800c0ce:	aa04      	add	r2, sp, #16
 800c0d0:	a90a      	add	r1, sp, #40	; 0x28
 800c0d2:	3010      	adds	r0, #16
 800c0d4:	f005 ffa8 	bl	8012028 <rcl_action_take_goal_response>
 800c0d8:	4605      	mov	r5, r0
 800c0da:	2800      	cmp	r0, #0
 800c0dc:	f47f af71 	bne.w	800bfc2 <_rclc_take_new_data+0xc6>
 800c0e0:	6860      	ldr	r0, [r4, #4]
 800c0e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c0e6:	f006 fc75 	bl	80129d4 <rclc_action_find_handle_by_goal_request_sequence_number>
 800c0ea:	b130      	cbz	r0, 800c0fa <_rclc_take_new_data+0x1fe>
 800c0ec:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800c0f6:	f880 2020 	strb.w	r2, [r0, #32]
 800c0fa:	6860      	ldr	r0, [r4, #4]
 800c0fc:	e769      	b.n	800bfd2 <_rclc_take_new_data+0xd6>
 800c0fe:	3010      	adds	r0, #16
 800c100:	aa04      	add	r2, sp, #16
 800c102:	a90a      	add	r1, sp, #40	; 0x28
 800c104:	f006 fa3c 	bl	8012580 <rcl_action_take_result_request>
 800c108:	4605      	mov	r5, r0
 800c10a:	2800      	cmp	r0, #0
 800c10c:	f47f af59 	bne.w	800bfc2 <_rclc_take_new_data+0xc6>
 800c110:	a904      	add	r1, sp, #16
 800c112:	6860      	ldr	r0, [r4, #4]
 800c114:	f006 fc30 	bl	8012978 <rclc_action_find_goal_handle_by_uuid>
 800c118:	4607      	mov	r7, r0
 800c11a:	b160      	cbz	r0, 800c136 <_rclc_take_new_data+0x23a>
 800c11c:	ad0a      	add	r5, sp, #40	; 0x28
 800c11e:	f100 0640 	add.w	r6, r0, #64	; 0x40
 800c122:	f04f 0c02 	mov.w	ip, #2
 800c126:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c128:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c12a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c12e:	e886 0003 	stmia.w	r6, {r0, r1}
 800c132:	f887 c008 	strb.w	ip, [r7, #8]
 800c136:	6860      	ldr	r0, [r4, #4]
 800c138:	2300      	movs	r3, #0
 800c13a:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 800c13e:	e6fa      	b.n	800bf36 <_rclc_take_new_data+0x3a>
 800c140:	f100 0230 	add.w	r2, r0, #48	; 0x30
 800c144:	a90a      	add	r1, sp, #40	; 0x28
 800c146:	3010      	adds	r0, #16
 800c148:	f006 f826 	bl	8012198 <rcl_action_take_cancel_response>
 800c14c:	4605      	mov	r5, r0
 800c14e:	2800      	cmp	r0, #0
 800c150:	f47f af37 	bne.w	800bfc2 <_rclc_take_new_data+0xc6>
 800c154:	6860      	ldr	r0, [r4, #4]
 800c156:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c15a:	f006 fc5f 	bl	8012a1c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800c15e:	4606      	mov	r6, r0
 800c160:	6860      	ldr	r0, [r4, #4]
 800c162:	2e00      	cmp	r6, #0
 800c164:	f43f af40 	beq.w	800bfe8 <_rclc_take_new_data+0xec>
 800c168:	2701      	movs	r7, #1
 800c16a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c16c:	84b7      	strh	r7, [r6, #36]	; 0x24
 800c16e:	2b00      	cmp	r3, #0
 800c170:	f43f af3a 	beq.w	800bfe8 <_rclc_take_new_data+0xec>
 800c174:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800c176:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c17a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c17e:	f006 fbfb 	bl	8012978 <rclc_action_find_goal_handle_by_uuid>
 800c182:	b138      	cbz	r0, 800c194 <_rclc_take_new_data+0x298>
 800c184:	6860      	ldr	r0, [r4, #4]
 800c186:	3501      	adds	r5, #1
 800c188:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 800c18c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c18e:	42ab      	cmp	r3, r5
 800c190:	d8f0      	bhi.n	800c174 <_rclc_take_new_data+0x278>
 800c192:	e729      	b.n	800bfe8 <_rclc_take_new_data+0xec>
 800c194:	6860      	ldr	r0, [r4, #4]
 800c196:	3501      	adds	r5, #1
 800c198:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c19a:	42ab      	cmp	r3, r5
 800c19c:	d8ea      	bhi.n	800c174 <_rclc_take_new_data+0x278>
 800c19e:	e723      	b.n	800bfe8 <_rclc_take_new_data+0xec>
 800c1a0:	ab06      	add	r3, sp, #24
 800c1a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c1a4:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c1a8:	2103      	movs	r1, #3
 800c1aa:	6860      	ldr	r0, [r4, #4]
 800c1ac:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c1b0:	f006 fcaa 	bl	8012b08 <rclc_action_server_goal_cancel_reject>
 800c1b4:	e6c4      	b.n	800bf40 <_rclc_take_new_data+0x44>
 800c1b6:	ab06      	add	r3, sp, #24
 800c1b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c1ba:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c1be:	2102      	movs	r1, #2
 800c1c0:	6860      	ldr	r0, [r4, #4]
 800c1c2:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c1c6:	f006 fc9f 	bl	8012b08 <rclc_action_server_goal_cancel_reject>
 800c1ca:	e6b9      	b.n	800bf40 <_rclc_take_new_data+0x44>
 800c1cc:	6860      	ldr	r0, [r4, #4]
 800c1ce:	e706      	b.n	800bfde <_rclc_take_new_data+0xe2>
 800c1d0:	4631      	mov	r1, r6
 800c1d2:	6860      	ldr	r0, [r4, #4]
 800c1d4:	f006 fbba 	bl	801294c <rclc_action_remove_used_goal_handle>
 800c1d8:	f000 fdae 	bl	800cd38 <rcutils_reset_error>
 800c1dc:	e6b0      	b.n	800bf40 <_rclc_take_new_data+0x44>
 800c1de:	2501      	movs	r5, #1
 800c1e0:	e6ae      	b.n	800bf40 <_rclc_take_new_data+0x44>
 800c1e2:	bf00      	nop

0800c1e4 <_rclc_execute.part.0>:
 800c1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1e6:	7803      	ldrb	r3, [r0, #0]
 800c1e8:	b085      	sub	sp, #20
 800c1ea:	4604      	mov	r4, r0
 800c1ec:	2b0a      	cmp	r3, #10
 800c1ee:	f200 8139 	bhi.w	800c464 <_rclc_execute.part.0+0x280>
 800c1f2:	e8df f003 	tbb	[pc, r3]
 800c1f6:	4268      	.short	0x4268
 800c1f8:	06a75b4d 	.word	0x06a75b4d
 800c1fc:	721d0606 	.word	0x721d0606
 800c200:	62          	.byte	0x62
 800c201:	00          	.byte	0x00
 800c202:	2b06      	cmp	r3, #6
 800c204:	f000 8126 	beq.w	800c454 <_rclc_execute.part.0+0x270>
 800c208:	2b07      	cmp	r3, #7
 800c20a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800c20c:	f040 811c 	bne.w	800c448 <_rclc_execute.part.0+0x264>
 800c210:	f104 0510 	add.w	r5, r4, #16
 800c214:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800c218:	6880      	ldr	r0, [r0, #8]
 800c21a:	4798      	blx	r3
 800c21c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800c21e:	4629      	mov	r1, r5
 800c220:	6860      	ldr	r0, [r4, #4]
 800c222:	f004 fdc1 	bl	8010da8 <rcl_send_response>
 800c226:	4604      	mov	r4, r0
 800c228:	b378      	cbz	r0, 800c28a <_rclc_execute.part.0+0xa6>
 800c22a:	f000 fd85 	bl	800cd38 <rcutils_reset_error>
 800c22e:	e02c      	b.n	800c28a <_rclc_execute.part.0+0xa6>
 800c230:	6840      	ldr	r0, [r0, #4]
 800c232:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800c236:	2b00      	cmp	r3, #0
 800c238:	f000 808e 	beq.w	800c358 <_rclc_execute.part.0+0x174>
 800c23c:	2600      	movs	r6, #0
 800c23e:	2701      	movs	r7, #1
 800c240:	e004      	b.n	800c24c <_rclc_execute.part.0+0x68>
 800c242:	f006 fb4d 	bl	80128e0 <rclc_action_send_result_request>
 800c246:	b998      	cbnz	r0, 800c270 <_rclc_execute.part.0+0x8c>
 800c248:	722f      	strb	r7, [r5, #8]
 800c24a:	6860      	ldr	r0, [r4, #4]
 800c24c:	f006 fbf8 	bl	8012a40 <rclc_action_find_first_handle_with_goal_response>
 800c250:	4605      	mov	r5, r0
 800c252:	2800      	cmp	r0, #0
 800c254:	d07f      	beq.n	800c356 <_rclc_execute.part.0+0x172>
 800c256:	6863      	ldr	r3, [r4, #4]
 800c258:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c25a:	699b      	ldr	r3, [r3, #24]
 800c25c:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 800c260:	f885 6020 	strb.w	r6, [r5, #32]
 800c264:	4798      	blx	r3
 800c266:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800c26a:	4628      	mov	r0, r5
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d1e8      	bne.n	800c242 <_rclc_execute.part.0+0x5e>
 800c270:	6860      	ldr	r0, [r4, #4]
 800c272:	4629      	mov	r1, r5
 800c274:	f006 fb6a 	bl	801294c <rclc_action_remove_used_goal_handle>
 800c278:	e7e7      	b.n	800c24a <_rclc_execute.part.0+0x66>
 800c27a:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800c27e:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 800c282:	b100      	cbz	r0, 800c286 <_rclc_execute.part.0+0xa2>
 800c284:	68a0      	ldr	r0, [r4, #8]
 800c286:	2400      	movs	r4, #0
 800c288:	4798      	blx	r3
 800c28a:	4620      	mov	r0, r4
 800c28c:	b005      	add	sp, #20
 800c28e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c290:	6840      	ldr	r0, [r0, #4]
 800c292:	f004 ff7f 	bl	8011194 <rcl_timer_call>
 800c296:	f240 3321 	movw	r3, #801	; 0x321
 800c29a:	4604      	mov	r4, r0
 800c29c:	4298      	cmp	r0, r3
 800c29e:	d001      	beq.n	800c2a4 <_rclc_execute.part.0+0xc0>
 800c2a0:	2800      	cmp	r0, #0
 800c2a2:	d1c2      	bne.n	800c22a <_rclc_execute.part.0+0x46>
 800c2a4:	2400      	movs	r4, #0
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	b005      	add	sp, #20
 800c2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2ac:	2400      	movs	r4, #0
 800c2ae:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800c2b0:	6880      	ldr	r0, [r0, #8]
 800c2b2:	4798      	blx	r3
 800c2b4:	4620      	mov	r0, r4
 800c2b6:	b005      	add	sp, #20
 800c2b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2ba:	2400      	movs	r4, #0
 800c2bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800c2be:	4798      	blx	r3
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	b005      	add	sp, #20
 800c2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2c6:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800c2ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c2cc:	b100      	cbz	r0, 800c2d0 <_rclc_execute.part.0+0xec>
 800c2ce:	68a0      	ldr	r0, [r4, #8]
 800c2d0:	2400      	movs	r4, #0
 800c2d2:	4798      	blx	r3
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	b005      	add	sp, #20
 800c2d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2da:	6840      	ldr	r0, [r0, #4]
 800c2dc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800c2e0:	bb3b      	cbnz	r3, 800c332 <_rclc_execute.part.0+0x14e>
 800c2e2:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d07d      	beq.n	800c3e6 <_rclc_execute.part.0+0x202>
 800c2ea:	f640 0634 	movw	r6, #2100	; 0x834
 800c2ee:	2701      	movs	r7, #1
 800c2f0:	e007      	b.n	800c302 <_rclc_execute.part.0+0x11e>
 800c2f2:	4628      	mov	r0, r5
 800c2f4:	f006 fbbc 	bl	8012a70 <rclc_action_server_response_goal_request>
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	6860      	ldr	r0, [r4, #4]
 800c2fc:	f006 fb26 	bl	801294c <rclc_action_remove_used_goal_handle>
 800c300:	6860      	ldr	r0, [r4, #4]
 800c302:	2100      	movs	r1, #0
 800c304:	f006 fb4e 	bl	80129a4 <rclc_action_find_first_handle_by_status>
 800c308:	4605      	mov	r5, r0
 800c30a:	2800      	cmp	r0, #0
 800c30c:	d068      	beq.n	800c3e0 <_rclc_execute.part.0+0x1fc>
 800c30e:	6863      	ldr	r3, [r4, #4]
 800c310:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c312:	699b      	ldr	r3, [r3, #24]
 800c314:	4798      	blx	r3
 800c316:	42b0      	cmp	r0, r6
 800c318:	f04f 0100 	mov.w	r1, #0
 800c31c:	d1e9      	bne.n	800c2f2 <_rclc_execute.part.0+0x10e>
 800c31e:	2101      	movs	r1, #1
 800c320:	4628      	mov	r0, r5
 800c322:	f006 fba5 	bl	8012a70 <rclc_action_server_response_goal_request>
 800c326:	722f      	strb	r7, [r5, #8]
 800c328:	e7ea      	b.n	800c300 <_rclc_execute.part.0+0x11c>
 800c32a:	6848      	ldr	r0, [r1, #4]
 800c32c:	f006 fb0e 	bl	801294c <rclc_action_remove_used_goal_handle>
 800c330:	6860      	ldr	r0, [r4, #4]
 800c332:	f006 fb43 	bl	80129bc <rclc_action_find_first_terminated_handle>
 800c336:	4601      	mov	r1, r0
 800c338:	2800      	cmp	r0, #0
 800c33a:	d1f6      	bne.n	800c32a <_rclc_execute.part.0+0x146>
 800c33c:	6860      	ldr	r0, [r4, #4]
 800c33e:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800c342:	e7ce      	b.n	800c2e2 <_rclc_execute.part.0+0xfe>
 800c344:	2400      	movs	r4, #0
 800c346:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800c348:	f100 0110 	add.w	r1, r0, #16
 800c34c:	6880      	ldr	r0, [r0, #8]
 800c34e:	4798      	blx	r3
 800c350:	4620      	mov	r0, r4
 800c352:	b005      	add	sp, #20
 800c354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c356:	6860      	ldr	r0, [r4, #4]
 800c358:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800c35c:	b18b      	cbz	r3, 800c382 <_rclc_execute.part.0+0x19e>
 800c35e:	68c5      	ldr	r5, [r0, #12]
 800c360:	b32d      	cbz	r5, 800c3ae <_rclc_execute.part.0+0x1ca>
 800c362:	2600      	movs	r6, #0
 800c364:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800c368:	b143      	cbz	r3, 800c37c <_rclc_execute.part.0+0x198>
 800c36a:	69c3      	ldr	r3, [r0, #28]
 800c36c:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 800c370:	b123      	cbz	r3, 800c37c <_rclc_execute.part.0+0x198>
 800c372:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800c374:	4628      	mov	r0, r5
 800c376:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c378:	4798      	blx	r3
 800c37a:	6860      	ldr	r0, [r4, #4]
 800c37c:	682d      	ldr	r5, [r5, #0]
 800c37e:	2d00      	cmp	r5, #0
 800c380:	d1f0      	bne.n	800c364 <_rclc_execute.part.0+0x180>
 800c382:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800c386:	b193      	cbz	r3, 800c3ae <_rclc_execute.part.0+0x1ca>
 800c388:	68c5      	ldr	r5, [r0, #12]
 800c38a:	b185      	cbz	r5, 800c3ae <_rclc_execute.part.0+0x1ca>
 800c38c:	2600      	movs	r6, #0
 800c38e:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800c392:	b14b      	cbz	r3, 800c3a8 <_rclc_execute.part.0+0x1c4>
 800c394:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c396:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 800c39a:	b12b      	cbz	r3, 800c3a8 <_rclc_execute.part.0+0x1c4>
 800c39c:	4628      	mov	r0, r5
 800c39e:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 800c3a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c3a4:	4798      	blx	r3
 800c3a6:	6860      	ldr	r0, [r4, #4]
 800c3a8:	682d      	ldr	r5, [r5, #0]
 800c3aa:	2d00      	cmp	r5, #0
 800c3ac:	d1ef      	bne.n	800c38e <_rclc_execute.part.0+0x1aa>
 800c3ae:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	f43f af76 	beq.w	800c2a4 <_rclc_execute.part.0+0xc0>
 800c3b8:	2700      	movs	r7, #0
 800c3ba:	e00b      	b.n	800c3d4 <_rclc_execute.part.0+0x1f0>
 800c3bc:	6863      	ldr	r3, [r4, #4]
 800c3be:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c3c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800c3c2:	6a1e      	ldr	r6, [r3, #32]
 800c3c4:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 800c3c8:	47b0      	blx	r6
 800c3ca:	6860      	ldr	r0, [r4, #4]
 800c3cc:	4629      	mov	r1, r5
 800c3ce:	f006 fabd 	bl	801294c <rclc_action_remove_used_goal_handle>
 800c3d2:	6860      	ldr	r0, [r4, #4]
 800c3d4:	f006 fb40 	bl	8012a58 <rclc_action_find_first_handle_with_result_response>
 800c3d8:	4605      	mov	r5, r0
 800c3da:	2800      	cmp	r0, #0
 800c3dc:	d1ee      	bne.n	800c3bc <_rclc_execute.part.0+0x1d8>
 800c3de:	e761      	b.n	800c2a4 <_rclc_execute.part.0+0xc0>
 800c3e0:	6860      	ldr	r0, [r4, #4]
 800c3e2:	f880 5020 	strb.w	r5, [r0, #32]
 800c3e6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	f43f af5a 	beq.w	800c2a4 <_rclc_execute.part.0+0xc0>
 800c3f0:	68c5      	ldr	r5, [r0, #12]
 800c3f2:	b1b5      	cbz	r5, 800c422 <_rclc_execute.part.0+0x23e>
 800c3f4:	2602      	movs	r6, #2
 800c3f6:	e001      	b.n	800c3fc <_rclc_execute.part.0+0x218>
 800c3f8:	682d      	ldr	r5, [r5, #0]
 800c3fa:	b195      	cbz	r5, 800c422 <_rclc_execute.part.0+0x23e>
 800c3fc:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800c400:	2b03      	cmp	r3, #3
 800c402:	d1f9      	bne.n	800c3f8 <_rclc_execute.part.0+0x214>
 800c404:	69c3      	ldr	r3, [r0, #28]
 800c406:	4628      	mov	r0, r5
 800c408:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c40a:	4798      	blx	r3
 800c40c:	4603      	mov	r3, r0
 800c40e:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800c412:	4628      	mov	r0, r5
 800c414:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800c418:	b143      	cbz	r3, 800c42c <_rclc_execute.part.0+0x248>
 800c41a:	f006 fb49 	bl	8012ab0 <rclc_action_server_goal_cancel_accept>
 800c41e:	6860      	ldr	r0, [r4, #4]
 800c420:	e7ea      	b.n	800c3f8 <_rclc_execute.part.0+0x214>
 800c422:	2300      	movs	r3, #0
 800c424:	461c      	mov	r4, r3
 800c426:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800c42a:	e72e      	b.n	800c28a <_rclc_execute.part.0+0xa6>
 800c42c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800c42e:	f105 0758 	add.w	r7, r5, #88	; 0x58
 800c432:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c436:	2101      	movs	r1, #1
 800c438:	6860      	ldr	r0, [r4, #4]
 800c43a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c43e:	f006 fb63 	bl	8012b08 <rclc_action_server_goal_cancel_reject>
 800c442:	722e      	strb	r6, [r5, #8]
 800c444:	6860      	ldr	r0, [r4, #4]
 800c446:	e7d7      	b.n	800c3f8 <_rclc_execute.part.0+0x214>
 800c448:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800c44a:	f104 0510 	add.w	r5, r4, #16
 800c44e:	6880      	ldr	r0, [r0, #8]
 800c450:	4798      	blx	r3
 800c452:	e6e3      	b.n	800c21c <_rclc_execute.part.0+0x38>
 800c454:	f100 0510 	add.w	r5, r0, #16
 800c458:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800c45a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800c45c:	4629      	mov	r1, r5
 800c45e:	6880      	ldr	r0, [r0, #8]
 800c460:	4798      	blx	r3
 800c462:	e6db      	b.n	800c21c <_rclc_execute.part.0+0x38>
 800c464:	2401      	movs	r4, #1
 800c466:	e710      	b.n	800c28a <_rclc_execute.part.0+0xa6>

0800c468 <rclc_executor_trigger_any>:
 800c468:	2800      	cmp	r0, #0
 800c46a:	d03d      	beq.n	800c4e8 <rclc_executor_trigger_any+0x80>
 800c46c:	2900      	cmp	r1, #0
 800c46e:	d03c      	beq.n	800c4ea <rclc_executor_trigger_any+0x82>
 800c470:	4603      	mov	r3, r0
 800c472:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800c476:	2200      	movs	r2, #0
 800c478:	2800      	cmp	r0, #0
 800c47a:	d035      	beq.n	800c4e8 <rclc_executor_trigger_any+0x80>
 800c47c:	b430      	push	{r4, r5}
 800c47e:	f893 c000 	ldrb.w	ip, [r3]
 800c482:	f1bc 0f08 	cmp.w	ip, #8
 800c486:	d11d      	bne.n	800c4c4 <rclc_executor_trigger_any+0x5c>
 800c488:	685c      	ldr	r4, [r3, #4]
 800c48a:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800c48c:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800c490:	d105      	bne.n	800c49e <rclc_executor_trigger_any+0x36>
 800c492:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800c496:	b910      	cbnz	r0, 800c49e <rclc_executor_trigger_any+0x36>
 800c498:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 800c49c:	b128      	cbz	r0, 800c4aa <rclc_executor_trigger_any+0x42>
 800c49e:	bc30      	pop	{r4, r5}
 800c4a0:	4770      	bx	lr
 800c4a2:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800c4a6:	2800      	cmp	r0, #0
 800c4a8:	d1f9      	bne.n	800c49e <rclc_executor_trigger_any+0x36>
 800c4aa:	3201      	adds	r2, #1
 800c4ac:	3340      	adds	r3, #64	; 0x40
 800c4ae:	4291      	cmp	r1, r2
 800c4b0:	d017      	beq.n	800c4e2 <rclc_executor_trigger_any+0x7a>
 800c4b2:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800c4b6:	2800      	cmp	r0, #0
 800c4b8:	d0f1      	beq.n	800c49e <rclc_executor_trigger_any+0x36>
 800c4ba:	f893 c000 	ldrb.w	ip, [r3]
 800c4be:	f1bc 0f08 	cmp.w	ip, #8
 800c4c2:	d0e1      	beq.n	800c488 <rclc_executor_trigger_any+0x20>
 800c4c4:	f1bc 0f09 	cmp.w	ip, #9
 800c4c8:	d1eb      	bne.n	800c4a2 <rclc_executor_trigger_any+0x3a>
 800c4ca:	685c      	ldr	r4, [r3, #4]
 800c4cc:	6a25      	ldr	r5, [r4, #32]
 800c4ce:	2d00      	cmp	r5, #0
 800c4d0:	d1e5      	bne.n	800c49e <rclc_executor_trigger_any+0x36>
 800c4d2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	d1e1      	bne.n	800c49e <rclc_executor_trigger_any+0x36>
 800c4da:	3201      	adds	r2, #1
 800c4dc:	3340      	adds	r3, #64	; 0x40
 800c4de:	4291      	cmp	r1, r2
 800c4e0:	d1e7      	bne.n	800c4b2 <rclc_executor_trigger_any+0x4a>
 800c4e2:	2000      	movs	r0, #0
 800c4e4:	bc30      	pop	{r4, r5}
 800c4e6:	4770      	bx	lr
 800c4e8:	4770      	bx	lr
 800c4ea:	4608      	mov	r0, r1
 800c4ec:	4770      	bx	lr
 800c4ee:	bf00      	nop

0800c4f0 <rclc_executor_get_zero_initialized_executor>:
 800c4f0:	b510      	push	{r4, lr}
 800c4f2:	4604      	mov	r4, r0
 800c4f4:	2290      	movs	r2, #144	; 0x90
 800c4f6:	4902      	ldr	r1, [pc, #8]	; (800c500 <rclc_executor_get_zero_initialized_executor+0x10>)
 800c4f8:	f00e f9a5 	bl	801a846 <memcpy>
 800c4fc:	4620      	mov	r0, r4
 800c4fe:	bd10      	pop	{r4, pc}
 800c500:	0801c008 	.word	0x0801c008
 800c504:	00000000 	.word	0x00000000

0800c508 <rclc_executor_init>:
 800c508:	2900      	cmp	r1, #0
 800c50a:	d06a      	beq.n	800c5e2 <rclc_executor_init+0xda>
 800c50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c510:	4605      	mov	r5, r0
 800c512:	b0b2      	sub	sp, #200	; 0xc8
 800c514:	2800      	cmp	r0, #0
 800c516:	d05c      	beq.n	800c5d2 <rclc_executor_init+0xca>
 800c518:	4616      	mov	r6, r2
 800c51a:	4618      	mov	r0, r3
 800c51c:	4688      	mov	r8, r1
 800c51e:	461f      	mov	r7, r3
 800c520:	f000 fbe6 	bl	800ccf0 <rcutils_allocator_is_valid>
 800c524:	2e00      	cmp	r6, #0
 800c526:	d054      	beq.n	800c5d2 <rclc_executor_init+0xca>
 800c528:	f080 0401 	eor.w	r4, r0, #1
 800c52c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800c530:	d14f      	bne.n	800c5d2 <rclc_executor_init+0xca>
 800c532:	2290      	movs	r2, #144	; 0x90
 800c534:	4930      	ldr	r1, [pc, #192]	; (800c5f8 <rclc_executor_init+0xf0>)
 800c536:	a80e      	add	r0, sp, #56	; 0x38
 800c538:	f00e f985 	bl	801a846 <memcpy>
 800c53c:	a90e      	add	r1, sp, #56	; 0x38
 800c53e:	2290      	movs	r2, #144	; 0x90
 800c540:	4628      	mov	r0, r5
 800c542:	f00e f980 	bl	801a846 <memcpy>
 800c546:	4668      	mov	r0, sp
 800c548:	f8c5 8004 	str.w	r8, [r5, #4]
 800c54c:	60ee      	str	r6, [r5, #12]
 800c54e:	f004 ff97 	bl	8011480 <rcl_get_zero_initialized_wait_set>
 800c552:	46ec      	mov	ip, sp
 800c554:	f105 0e18 	add.w	lr, r5, #24
 800c558:	f8d7 8000 	ldr.w	r8, [r7]
 800c55c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c560:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c564:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c568:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c56c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c570:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800c5f0 <rclc_executor_init+0xe8>
 800c574:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c578:	f8dc 3000 	ldr.w	r3, [ip]
 800c57c:	01b0      	lsls	r0, r6, #6
 800c57e:	6939      	ldr	r1, [r7, #16]
 800c580:	f8ce 3000 	str.w	r3, [lr]
 800c584:	616f      	str	r7, [r5, #20]
 800c586:	ed85 7b1c 	vstr	d7, [r5, #112]	; 0x70
 800c58a:	47c0      	blx	r8
 800c58c:	60a8      	str	r0, [r5, #8]
 800c58e:	b908      	cbnz	r0, 800c594 <rclc_executor_init+0x8c>
 800c590:	e029      	b.n	800c5e6 <rclc_executor_init+0xde>
 800c592:	68a8      	ldr	r0, [r5, #8]
 800c594:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800c598:	3401      	adds	r4, #1
 800c59a:	4631      	mov	r1, r6
 800c59c:	f000 fa88 	bl	800cab0 <rclc_executor_handle_init>
 800c5a0:	42a6      	cmp	r6, r4
 800c5a2:	d8f6      	bhi.n	800c592 <rclc_executor_init+0x8a>
 800c5a4:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 800c5a8:	f000 fa78 	bl	800ca9c <rclc_executor_handle_counters_zero_init>
 800c5ac:	4a13      	ldr	r2, [pc, #76]	; (800c5fc <rclc_executor_init+0xf4>)
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	68a8      	ldr	r0, [r5, #8]
 800c5b2:	e9c5 2320 	strd	r2, r3, [r5, #128]	; 0x80
 800c5b6:	b168      	cbz	r0, 800c5d4 <rclc_executor_init+0xcc>
 800c5b8:	68eb      	ldr	r3, [r5, #12]
 800c5ba:	b173      	cbz	r3, 800c5da <rclc_executor_init+0xd2>
 800c5bc:	696a      	ldr	r2, [r5, #20]
 800c5be:	fab2 f382 	clz	r3, r2
 800c5c2:	095b      	lsrs	r3, r3, #5
 800c5c4:	b14a      	cbz	r2, 800c5da <rclc_executor_init+0xd2>
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f885 3088 	strb.w	r3, [r5, #136]	; 0x88
 800c5cc:	b032      	add	sp, #200	; 0xc8
 800c5ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5d2:	200b      	movs	r0, #11
 800c5d4:	b032      	add	sp, #200	; 0xc8
 800c5d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5da:	2000      	movs	r0, #0
 800c5dc:	b032      	add	sp, #200	; 0xc8
 800c5de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5e2:	200b      	movs	r0, #11
 800c5e4:	4770      	bx	lr
 800c5e6:	200a      	movs	r0, #10
 800c5e8:	e7f4      	b.n	800c5d4 <rclc_executor_init+0xcc>
 800c5ea:	bf00      	nop
 800c5ec:	f3af 8000 	nop.w
 800c5f0:	3b9aca00 	.word	0x3b9aca00
 800c5f4:	00000000 	.word	0x00000000
 800c5f8:	0801c008 	.word	0x0801c008
 800c5fc:	0800c469 	.word	0x0800c469

0800c600 <rclc_executor_add_service>:
 800c600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c602:	9d06      	ldr	r5, [sp, #24]
 800c604:	4604      	mov	r4, r0
 800c606:	2b00      	cmp	r3, #0
 800c608:	bf18      	it	ne
 800c60a:	2d00      	cmpne	r5, #0
 800c60c:	bf0c      	ite	eq
 800c60e:	2001      	moveq	r0, #1
 800c610:	2000      	movne	r0, #0
 800c612:	2a00      	cmp	r2, #0
 800c614:	bf08      	it	eq
 800c616:	f040 0001 	orreq.w	r0, r0, #1
 800c61a:	2900      	cmp	r1, #0
 800c61c:	bf08      	it	eq
 800c61e:	f040 0001 	orreq.w	r0, r0, #1
 800c622:	bb40      	cbnz	r0, 800c676 <rclc_executor_add_service+0x76>
 800c624:	fab4 f684 	clz	r6, r4
 800c628:	0976      	lsrs	r6, r6, #5
 800c62a:	b324      	cbz	r4, 800c676 <rclc_executor_add_service+0x76>
 800c62c:	e9d4 7003 	ldrd	r7, r0, [r4, #12]
 800c630:	42b8      	cmp	r0, r7
 800c632:	d301      	bcc.n	800c638 <rclc_executor_add_service+0x38>
 800c634:	2001      	movs	r0, #1
 800c636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c638:	68a7      	ldr	r7, [r4, #8]
 800c63a:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800c63e:	f100 0c01 	add.w	ip, r0, #1
 800c642:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 800c646:	6283      	str	r3, [r0, #40]	; 0x28
 800c648:	2305      	movs	r3, #5
 800c64a:	6305      	str	r5, [r0, #48]	; 0x30
 800c64c:	f104 0518 	add.w	r5, r4, #24
 800c650:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800c654:	f827 300e 	strh.w	r3, [r7, lr]
 800c658:	2301      	movs	r3, #1
 800c65a:	62c6      	str	r6, [r0, #44]	; 0x2c
 800c65c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800c660:	4628      	mov	r0, r5
 800c662:	f8c4 c010 	str.w	ip, [r4, #16]
 800c666:	f004 ff1f 	bl	80114a8 <rcl_wait_set_is_valid>
 800c66a:	b930      	cbnz	r0, 800c67a <rclc_executor_add_service+0x7a>
 800c66c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c66e:	2000      	movs	r0, #0
 800c670:	3301      	adds	r3, #1
 800c672:	65a3      	str	r3, [r4, #88]	; 0x58
 800c674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c676:	200b      	movs	r0, #11
 800c678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c67a:	4628      	mov	r0, r5
 800c67c:	f004 ff1a 	bl	80114b4 <rcl_wait_set_fini>
 800c680:	2800      	cmp	r0, #0
 800c682:	d0f3      	beq.n	800c66c <rclc_executor_add_service+0x6c>
 800c684:	e7d7      	b.n	800c636 <rclc_executor_add_service+0x36>
 800c686:	bf00      	nop

0800c688 <rclc_executor_prepare>:
 800c688:	2800      	cmp	r0, #0
 800c68a:	d044      	beq.n	800c716 <rclc_executor_prepare+0x8e>
 800c68c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c68e:	f100 0518 	add.w	r5, r0, #24
 800c692:	b09b      	sub	sp, #108	; 0x6c
 800c694:	4604      	mov	r4, r0
 800c696:	4628      	mov	r0, r5
 800c698:	f004 ff06 	bl	80114a8 <rcl_wait_set_is_valid>
 800c69c:	b110      	cbz	r0, 800c6a4 <rclc_executor_prepare+0x1c>
 800c69e:	2000      	movs	r0, #0
 800c6a0:	b01b      	add	sp, #108	; 0x6c
 800c6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6a4:	4628      	mov	r0, r5
 800c6a6:	f004 ff05 	bl	80114b4 <rcl_wait_set_fini>
 800c6aa:	2800      	cmp	r0, #0
 800c6ac:	d130      	bne.n	800c710 <rclc_executor_prepare+0x88>
 800c6ae:	a80c      	add	r0, sp, #48	; 0x30
 800c6b0:	ae04      	add	r6, sp, #16
 800c6b2:	f004 fee5 	bl	8011480 <rcl_get_zero_initialized_wait_set>
 800c6b6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800c6ba:	46ae      	mov	lr, r5
 800c6bc:	6967      	ldr	r7, [r4, #20]
 800c6be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c6c2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c6c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c6ca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c6ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c6d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c6d6:	f8dc 3000 	ldr.w	r3, [ip]
 800c6da:	f8ce 3000 	str.w	r3, [lr]
 800c6de:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c6e0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	4628      	mov	r0, r5
 800c6e6:	6862      	ldr	r2, [r4, #4]
 800c6e8:	6033      	str	r3, [r6, #0]
 800c6ea:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800c6ec:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c6ee:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800c6f2:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800c6f6:	e9cd 2100 	strd	r2, r1, [sp]
 800c6fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c6fc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800c6fe:	f005 f9d9 	bl	8011ab4 <rcl_wait_set_init>
 800c702:	2800      	cmp	r0, #0
 800c704:	d0cc      	beq.n	800c6a0 <rclc_executor_prepare+0x18>
 800c706:	900b      	str	r0, [sp, #44]	; 0x2c
 800c708:	f000 fb16 	bl	800cd38 <rcutils_reset_error>
 800c70c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c70e:	e7c7      	b.n	800c6a0 <rclc_executor_prepare+0x18>
 800c710:	f000 fb12 	bl	800cd38 <rcutils_reset_error>
 800c714:	e7cb      	b.n	800c6ae <rclc_executor_prepare+0x26>
 800c716:	200b      	movs	r0, #11
 800c718:	4770      	bx	lr
 800c71a:	bf00      	nop

0800c71c <rclc_executor_spin_some.part.0>:
 800c71c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c720:	4605      	mov	r5, r0
 800c722:	4691      	mov	r9, r2
 800c724:	4698      	mov	r8, r3
 800c726:	f7ff ffaf 	bl	800c688 <rclc_executor_prepare>
 800c72a:	f105 0618 	add.w	r6, r5, #24
 800c72e:	4630      	mov	r0, r6
 800c730:	f004 ff8c 	bl	801164c <rcl_wait_set_clear>
 800c734:	4607      	mov	r7, r0
 800c736:	2800      	cmp	r0, #0
 800c738:	f040 80a8 	bne.w	800c88c <rclc_executor_spin_some.part.0+0x170>
 800c73c:	68eb      	ldr	r3, [r5, #12]
 800c73e:	b30b      	cbz	r3, 800c784 <rclc_executor_spin_some.part.0+0x68>
 800c740:	4604      	mov	r4, r0
 800c742:	68a9      	ldr	r1, [r5, #8]
 800c744:	01a2      	lsls	r2, r4, #6
 800c746:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800c74a:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 800c74e:	b1cb      	cbz	r3, 800c784 <rclc_executor_spin_some.part.0+0x68>
 800c750:	5c8b      	ldrb	r3, [r1, r2]
 800c752:	2b0a      	cmp	r3, #10
 800c754:	f200 80de 	bhi.w	800c914 <rclc_executor_spin_some.part.0+0x1f8>
 800c758:	e8df f003 	tbb	[pc, r3]
 800c75c:	8da99d9d 	.word	0x8da99d9d
 800c760:	0606068d 	.word	0x0606068d
 800c764:	c1ce      	.short	0xc1ce
 800c766:	b5          	.byte	0xb5
 800c767:	00          	.byte	0x00
 800c768:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800c76c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c770:	4630      	mov	r0, r6
 800c772:	f005 fabb 	bl	8011cec <rcl_wait_set_add_service>
 800c776:	2800      	cmp	r0, #0
 800c778:	f040 8087 	bne.w	800c88a <rclc_executor_spin_some.part.0+0x16e>
 800c77c:	3401      	adds	r4, #1
 800c77e:	68eb      	ldr	r3, [r5, #12]
 800c780:	429c      	cmp	r4, r3
 800c782:	d3de      	bcc.n	800c742 <rclc_executor_spin_some.part.0+0x26>
 800c784:	4643      	mov	r3, r8
 800c786:	464a      	mov	r2, r9
 800c788:	4630      	mov	r0, r6
 800c78a:	f005 fadd 	bl	8011d48 <rcl_wait>
 800c78e:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
 800c792:	2b00      	cmp	r3, #0
 800c794:	f000 80c6 	beq.w	800c924 <rclc_executor_spin_some.part.0+0x208>
 800c798:	2b01      	cmp	r3, #1
 800c79a:	f040 80bb 	bne.w	800c914 <rclc_executor_spin_some.part.0+0x1f8>
 800c79e:	68eb      	ldr	r3, [r5, #12]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	f000 8159 	beq.w	800ca58 <rclc_executor_spin_some.part.0+0x33c>
 800c7a6:	2400      	movs	r4, #0
 800c7a8:	f240 1991 	movw	r9, #401	; 0x191
 800c7ac:	46a0      	mov	r8, r4
 800c7ae:	e00a      	b.n	800c7c6 <rclc_executor_spin_some.part.0+0xaa>
 800c7b0:	f7ff fb56 	bl	800be60 <_rclc_check_for_new_data>
 800c7b4:	4604      	mov	r4, r0
 800c7b6:	b110      	cbz	r0, 800c7be <rclc_executor_spin_some.part.0+0xa2>
 800c7b8:	4548      	cmp	r0, r9
 800c7ba:	f040 80b1 	bne.w	800c920 <rclc_executor_spin_some.part.0+0x204>
 800c7be:	68eb      	ldr	r3, [r5, #12]
 800c7c0:	4598      	cmp	r8, r3
 800c7c2:	f080 8126 	bcs.w	800ca12 <rclc_executor_spin_some.part.0+0x2f6>
 800c7c6:	68aa      	ldr	r2, [r5, #8]
 800c7c8:	4631      	mov	r1, r6
 800c7ca:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800c7ce:	f108 0801 	add.w	r8, r8, #1
 800c7d2:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800c7d6:	f1bc 0f00 	cmp.w	ip, #0
 800c7da:	d1e9      	bne.n	800c7b0 <rclc_executor_spin_some.part.0+0x94>
 800c7dc:	4619      	mov	r1, r3
 800c7de:	4610      	mov	r0, r2
 800c7e0:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 800c7e4:	4798      	blx	r3
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	f000 809a 	beq.w	800c920 <rclc_executor_spin_some.part.0+0x204>
 800c7ec:	68eb      	ldr	r3, [r5, #12]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	f000 8096 	beq.w	800c920 <rclc_executor_spin_some.part.0+0x204>
 800c7f4:	f04f 0800 	mov.w	r8, #0
 800c7f8:	f240 1991 	movw	r9, #401	; 0x191
 800c7fc:	e009      	b.n	800c812 <rclc_executor_spin_some.part.0+0xf6>
 800c7fe:	f7ff fb7d 	bl	800befc <_rclc_take_new_data>
 800c802:	4604      	mov	r4, r0
 800c804:	b110      	cbz	r0, 800c80c <rclc_executor_spin_some.part.0+0xf0>
 800c806:	4548      	cmp	r0, r9
 800c808:	f040 808a 	bne.w	800c920 <rclc_executor_spin_some.part.0+0x204>
 800c80c:	68eb      	ldr	r3, [r5, #12]
 800c80e:	4598      	cmp	r8, r3
 800c810:	d209      	bcs.n	800c826 <rclc_executor_spin_some.part.0+0x10a>
 800c812:	68a8      	ldr	r0, [r5, #8]
 800c814:	4631      	mov	r1, r6
 800c816:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800c81a:	f108 0801 	add.w	r8, r8, #1
 800c81e:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800c822:	2a00      	cmp	r2, #0
 800c824:	d1eb      	bne.n	800c7fe <rclc_executor_spin_some.part.0+0xe2>
 800c826:	2b00      	cmp	r3, #0
 800c828:	d07a      	beq.n	800c920 <rclc_executor_spin_some.part.0+0x204>
 800c82a:	2600      	movs	r6, #0
 800c82c:	e00e      	b.n	800c84c <rclc_executor_spin_some.part.0+0x130>
 800c82e:	f812 200c 	ldrb.w	r2, [r2, ip]
 800c832:	2a08      	cmp	r2, #8
 800c834:	f000 80fc 	beq.w	800ca30 <rclc_executor_spin_some.part.0+0x314>
 800c838:	2a09      	cmp	r2, #9
 800c83a:	f000 80ee 	beq.w	800ca1a <rclc_executor_spin_some.part.0+0x2fe>
 800c83e:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800c842:	b98a      	cbnz	r2, 800c868 <rclc_executor_spin_some.part.0+0x14c>
 800c844:	3601      	adds	r6, #1
 800c846:	429e      	cmp	r6, r3
 800c848:	d267      	bcs.n	800c91a <rclc_executor_spin_some.part.0+0x1fe>
 800c84a:	2400      	movs	r4, #0
 800c84c:	68aa      	ldr	r2, [r5, #8]
 800c84e:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800c852:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800c856:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 800c85a:	2900      	cmp	r1, #0
 800c85c:	d060      	beq.n	800c920 <rclc_executor_spin_some.part.0+0x204>
 800c85e:	7841      	ldrb	r1, [r0, #1]
 800c860:	2900      	cmp	r1, #0
 800c862:	d0e4      	beq.n	800c82e <rclc_executor_spin_some.part.0+0x112>
 800c864:	2901      	cmp	r1, #1
 800c866:	d1ed      	bne.n	800c844 <rclc_executor_spin_some.part.0+0x128>
 800c868:	f7ff fcbc 	bl	800c1e4 <_rclc_execute.part.0>
 800c86c:	2800      	cmp	r0, #0
 800c86e:	f040 80b5 	bne.w	800c9dc <rclc_executor_spin_some.part.0+0x2c0>
 800c872:	68eb      	ldr	r3, [r5, #12]
 800c874:	e7e6      	b.n	800c844 <rclc_executor_spin_some.part.0+0x128>
 800c876:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800c87a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c87e:	4630      	mov	r0, r6
 800c880:	f005 fa08 	bl	8011c94 <rcl_wait_set_add_client>
 800c884:	2800      	cmp	r0, #0
 800c886:	f43f af79 	beq.w	800c77c <rclc_executor_spin_some.part.0+0x60>
 800c88a:	4607      	mov	r7, r0
 800c88c:	f000 fa54 	bl	800cd38 <rcutils_reset_error>
 800c890:	4638      	mov	r0, r7
 800c892:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c896:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800c89a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c89e:	4630      	mov	r0, r6
 800c8a0:	f004 fea8 	bl	80115f4 <rcl_wait_set_add_subscription>
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	f43f af69 	beq.w	800c77c <rclc_executor_spin_some.part.0+0x60>
 800c8aa:	4607      	mov	r7, r0
 800c8ac:	e7ee      	b.n	800c88c <rclc_executor_spin_some.part.0+0x170>
 800c8ae:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800c8b2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c8b6:	4630      	mov	r0, r6
 800c8b8:	f005 f9bc 	bl	8011c34 <rcl_wait_set_add_timer>
 800c8bc:	2800      	cmp	r0, #0
 800c8be:	f43f af5d 	beq.w	800c77c <rclc_executor_spin_some.part.0+0x60>
 800c8c2:	4607      	mov	r7, r0
 800c8c4:	e7e2      	b.n	800c88c <rclc_executor_spin_some.part.0+0x170>
 800c8c6:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800c8ca:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c8ce:	4630      	mov	r0, r6
 800c8d0:	f005 f984 	bl	8011bdc <rcl_wait_set_add_guard_condition>
 800c8d4:	2800      	cmp	r0, #0
 800c8d6:	f43f af51 	beq.w	800c77c <rclc_executor_spin_some.part.0+0x60>
 800c8da:	4607      	mov	r7, r0
 800c8dc:	e7d6      	b.n	800c88c <rclc_executor_spin_some.part.0+0x170>
 800c8de:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c8e2:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800c8e6:	4630      	mov	r0, r6
 800c8e8:	3110      	adds	r1, #16
 800c8ea:	f005 ff01 	bl	80126f0 <rcl_action_wait_set_add_action_server>
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	f43f af44 	beq.w	800c77c <rclc_executor_spin_some.part.0+0x60>
 800c8f4:	4607      	mov	r7, r0
 800c8f6:	e7c9      	b.n	800c88c <rclc_executor_spin_some.part.0+0x170>
 800c8f8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800c902:	4630      	mov	r0, r6
 800c904:	3110      	adds	r1, #16
 800c906:	f005 fccb 	bl	80122a0 <rcl_action_wait_set_add_action_client>
 800c90a:	2800      	cmp	r0, #0
 800c90c:	f43f af36 	beq.w	800c77c <rclc_executor_spin_some.part.0+0x60>
 800c910:	4607      	mov	r7, r0
 800c912:	e7bb      	b.n	800c88c <rclc_executor_spin_some.part.0+0x170>
 800c914:	2701      	movs	r7, #1
 800c916:	f000 fa0f 	bl	800cd38 <rcutils_reset_error>
 800c91a:	4638      	mov	r0, r7
 800c91c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c920:	4627      	mov	r7, r4
 800c922:	e7fa      	b.n	800c91a <rclc_executor_spin_some.part.0+0x1fe>
 800c924:	68eb      	ldr	r3, [r5, #12]
 800c926:	2b00      	cmp	r3, #0
 800c928:	f000 8093 	beq.w	800ca52 <rclc_executor_spin_some.part.0+0x336>
 800c92c:	2400      	movs	r4, #0
 800c92e:	f240 1991 	movw	r9, #401	; 0x191
 800c932:	46a0      	mov	r8, r4
 800c934:	e008      	b.n	800c948 <rclc_executor_spin_some.part.0+0x22c>
 800c936:	f7ff fa93 	bl	800be60 <_rclc_check_for_new_data>
 800c93a:	4604      	mov	r4, r0
 800c93c:	b108      	cbz	r0, 800c942 <rclc_executor_spin_some.part.0+0x226>
 800c93e:	4548      	cmp	r0, r9
 800c940:	d1ee      	bne.n	800c920 <rclc_executor_spin_some.part.0+0x204>
 800c942:	68eb      	ldr	r3, [r5, #12]
 800c944:	4598      	cmp	r8, r3
 800c946:	d266      	bcs.n	800ca16 <rclc_executor_spin_some.part.0+0x2fa>
 800c948:	68aa      	ldr	r2, [r5, #8]
 800c94a:	4631      	mov	r1, r6
 800c94c:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800c950:	f108 0801 	add.w	r8, r8, #1
 800c954:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800c958:	f1bc 0f00 	cmp.w	ip, #0
 800c95c:	d1eb      	bne.n	800c936 <rclc_executor_spin_some.part.0+0x21a>
 800c95e:	4619      	mov	r1, r3
 800c960:	4610      	mov	r0, r2
 800c962:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 800c966:	4798      	blx	r3
 800c968:	2800      	cmp	r0, #0
 800c96a:	d0d9      	beq.n	800c920 <rclc_executor_spin_some.part.0+0x204>
 800c96c:	68eb      	ldr	r3, [r5, #12]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d0d6      	beq.n	800c920 <rclc_executor_spin_some.part.0+0x204>
 800c972:	f04f 0a00 	mov.w	sl, #0
 800c976:	f240 1891 	movw	r8, #401	; 0x191
 800c97a:	f240 2959 	movw	r9, #601	; 0x259
 800c97e:	e00e      	b.n	800c99e <rclc_executor_spin_some.part.0+0x282>
 800c980:	f813 300b 	ldrb.w	r3, [r3, fp]
 800c984:	2b08      	cmp	r3, #8
 800c986:	d034      	beq.n	800c9f2 <rclc_executor_spin_some.part.0+0x2d6>
 800c988:	2b09      	cmp	r3, #9
 800c98a:	d029      	beq.n	800c9e0 <rclc_executor_spin_some.part.0+0x2c4>
 800c98c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800c990:	bb03      	cbnz	r3, 800c9d4 <rclc_executor_spin_some.part.0+0x2b8>
 800c992:	f10a 0a01 	add.w	sl, sl, #1
 800c996:	68eb      	ldr	r3, [r5, #12]
 800c998:	459a      	cmp	sl, r3
 800c99a:	d2be      	bcs.n	800c91a <rclc_executor_spin_some.part.0+0x1fe>
 800c99c:	2400      	movs	r4, #0
 800c99e:	68a8      	ldr	r0, [r5, #8]
 800c9a0:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800c9a4:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800c9a8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d0b7      	beq.n	800c920 <rclc_executor_spin_some.part.0+0x204>
 800c9b0:	4631      	mov	r1, r6
 800c9b2:	f7ff faa3 	bl	800befc <_rclc_take_new_data>
 800c9b6:	2800      	cmp	r0, #0
 800c9b8:	bf18      	it	ne
 800c9ba:	4540      	cmpne	r0, r8
 800c9bc:	d001      	beq.n	800c9c2 <rclc_executor_spin_some.part.0+0x2a6>
 800c9be:	4548      	cmp	r0, r9
 800c9c0:	d10c      	bne.n	800c9dc <rclc_executor_spin_some.part.0+0x2c0>
 800c9c2:	68ab      	ldr	r3, [r5, #8]
 800c9c4:	eb13 000b 	adds.w	r0, r3, fp
 800c9c8:	d021      	beq.n	800ca0e <rclc_executor_spin_some.part.0+0x2f2>
 800c9ca:	7842      	ldrb	r2, [r0, #1]
 800c9cc:	2a00      	cmp	r2, #0
 800c9ce:	d0d7      	beq.n	800c980 <rclc_executor_spin_some.part.0+0x264>
 800c9d0:	2a01      	cmp	r2, #1
 800c9d2:	d1de      	bne.n	800c992 <rclc_executor_spin_some.part.0+0x276>
 800c9d4:	f7ff fc06 	bl	800c1e4 <_rclc_execute.part.0>
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	d0da      	beq.n	800c992 <rclc_executor_spin_some.part.0+0x276>
 800c9dc:	4607      	mov	r7, r0
 800c9de:	e79c      	b.n	800c91a <rclc_executor_spin_some.part.0+0x1fe>
 800c9e0:	6843      	ldr	r3, [r0, #4]
 800c9e2:	6a1a      	ldr	r2, [r3, #32]
 800c9e4:	2a00      	cmp	r2, #0
 800c9e6:	d1f5      	bne.n	800c9d4 <rclc_executor_spin_some.part.0+0x2b8>
 800c9e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d0d0      	beq.n	800c992 <rclc_executor_spin_some.part.0+0x276>
 800c9f0:	e7f0      	b.n	800c9d4 <rclc_executor_spin_some.part.0+0x2b8>
 800c9f2:	6843      	ldr	r3, [r0, #4]
 800c9f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c9f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800c9fa:	d1eb      	bne.n	800c9d4 <rclc_executor_spin_some.part.0+0x2b8>
 800c9fc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ca00:	2a00      	cmp	r2, #0
 800ca02:	d1e7      	bne.n	800c9d4 <rclc_executor_spin_some.part.0+0x2b8>
 800ca04:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d0c2      	beq.n	800c992 <rclc_executor_spin_some.part.0+0x276>
 800ca0c:	e7e2      	b.n	800c9d4 <rclc_executor_spin_some.part.0+0x2b8>
 800ca0e:	270b      	movs	r7, #11
 800ca10:	e783      	b.n	800c91a <rclc_executor_spin_some.part.0+0x1fe>
 800ca12:	68aa      	ldr	r2, [r5, #8]
 800ca14:	e6e2      	b.n	800c7dc <rclc_executor_spin_some.part.0+0xc0>
 800ca16:	68aa      	ldr	r2, [r5, #8]
 800ca18:	e7a1      	b.n	800c95e <rclc_executor_spin_some.part.0+0x242>
 800ca1a:	6842      	ldr	r2, [r0, #4]
 800ca1c:	6a11      	ldr	r1, [r2, #32]
 800ca1e:	2900      	cmp	r1, #0
 800ca20:	f47f af22 	bne.w	800c868 <rclc_executor_spin_some.part.0+0x14c>
 800ca24:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800ca28:	2a00      	cmp	r2, #0
 800ca2a:	f43f af0b 	beq.w	800c844 <rclc_executor_spin_some.part.0+0x128>
 800ca2e:	e71b      	b.n	800c868 <rclc_executor_spin_some.part.0+0x14c>
 800ca30:	6842      	ldr	r2, [r0, #4]
 800ca32:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800ca34:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 800ca38:	f47f af16 	bne.w	800c868 <rclc_executor_spin_some.part.0+0x14c>
 800ca3c:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 800ca40:	2900      	cmp	r1, #0
 800ca42:	f47f af11 	bne.w	800c868 <rclc_executor_spin_some.part.0+0x14c>
 800ca46:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800ca4a:	2a00      	cmp	r2, #0
 800ca4c:	f43f aefa 	beq.w	800c844 <rclc_executor_spin_some.part.0+0x128>
 800ca50:	e70a      	b.n	800c868 <rclc_executor_spin_some.part.0+0x14c>
 800ca52:	68aa      	ldr	r2, [r5, #8]
 800ca54:	461c      	mov	r4, r3
 800ca56:	e782      	b.n	800c95e <rclc_executor_spin_some.part.0+0x242>
 800ca58:	68aa      	ldr	r2, [r5, #8]
 800ca5a:	461c      	mov	r4, r3
 800ca5c:	e6be      	b.n	800c7dc <rclc_executor_spin_some.part.0+0xc0>
 800ca5e:	bf00      	nop

0800ca60 <rclc_executor_spin>:
 800ca60:	b1d0      	cbz	r0, 800ca98 <rclc_executor_spin+0x38>
 800ca62:	b510      	push	{r4, lr}
 800ca64:	4604      	mov	r4, r0
 800ca66:	b082      	sub	sp, #8
 800ca68:	e004      	b.n	800ca74 <rclc_executor_spin+0x14>
 800ca6a:	f7ff fe57 	bl	800c71c <rclc_executor_spin_some.part.0>
 800ca6e:	f030 0302 	bics.w	r3, r0, #2
 800ca72:	d10f      	bne.n	800ca94 <rclc_executor_spin+0x34>
 800ca74:	6860      	ldr	r0, [r4, #4]
 800ca76:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
 800ca7a:	e9cd 2300 	strd	r2, r3, [sp]
 800ca7e:	f003 fa43 	bl	800ff08 <rcl_context_is_valid>
 800ca82:	4601      	mov	r1, r0
 800ca84:	4620      	mov	r0, r4
 800ca86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca8a:	2900      	cmp	r1, #0
 800ca8c:	d1ed      	bne.n	800ca6a <rclc_executor_spin+0xa>
 800ca8e:	f000 f953 	bl	800cd38 <rcutils_reset_error>
 800ca92:	2001      	movs	r0, #1
 800ca94:	b002      	add	sp, #8
 800ca96:	bd10      	pop	{r4, pc}
 800ca98:	200b      	movs	r0, #11
 800ca9a:	4770      	bx	lr

0800ca9c <rclc_executor_handle_counters_zero_init>:
 800ca9c:	b130      	cbz	r0, 800caac <rclc_executor_handle_counters_zero_init+0x10>
 800ca9e:	2220      	movs	r2, #32
 800caa0:	2100      	movs	r1, #0
 800caa2:	b508      	push	{r3, lr}
 800caa4:	f00d fd9e 	bl	801a5e4 <memset>
 800caa8:	2000      	movs	r0, #0
 800caaa:	bd08      	pop	{r3, pc}
 800caac:	200b      	movs	r0, #11
 800caae:	4770      	bx	lr

0800cab0 <rclc_executor_handle_init>:
 800cab0:	4603      	mov	r3, r0
 800cab2:	b178      	cbz	r0, 800cad4 <rclc_executor_handle_init+0x24>
 800cab4:	2200      	movs	r2, #0
 800cab6:	f04f 0c0b 	mov.w	ip, #11
 800caba:	6341      	str	r1, [r0, #52]	; 0x34
 800cabc:	4610      	mov	r0, r2
 800cabe:	f8a3 c000 	strh.w	ip, [r3]
 800cac2:	631a      	str	r2, [r3, #48]	; 0x30
 800cac4:	871a      	strh	r2, [r3, #56]	; 0x38
 800cac6:	ed9f 7b04 	vldr	d7, [pc, #16]	; 800cad8 <rclc_executor_handle_init+0x28>
 800caca:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800cace:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 800cad2:	4770      	bx	lr
 800cad4:	200b      	movs	r0, #11
 800cad6:	4770      	bx	lr
	...

0800cae0 <rclc_support_init>:
 800cae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cae4:	b086      	sub	sp, #24
 800cae6:	b3bb      	cbz	r3, 800cb58 <rclc_support_init+0x78>
 800cae8:	4606      	mov	r6, r0
 800caea:	b3a8      	cbz	r0, 800cb58 <rclc_support_init+0x78>
 800caec:	461c      	mov	r4, r3
 800caee:	460f      	mov	r7, r1
 800caf0:	4690      	mov	r8, r2
 800caf2:	f003 fba9 	bl	8010248 <rcl_get_zero_initialized_init_options>
 800caf6:	f104 050c 	add.w	r5, r4, #12
 800cafa:	9005      	str	r0, [sp, #20]
 800cafc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cb00:	e88d 0003 	stmia.w	sp, {r0, r1}
 800cb04:	a805      	add	r0, sp, #20
 800cb06:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800cb0a:	f003 fb9f 	bl	801024c <rcl_init_options_init>
 800cb0e:	4605      	mov	r5, r0
 800cb10:	b9e0      	cbnz	r0, 800cb4c <rclc_support_init+0x6c>
 800cb12:	ad02      	add	r5, sp, #8
 800cb14:	4628      	mov	r0, r5
 800cb16:	f003 f9ed 	bl	800fef4 <rcl_get_zero_initialized_context>
 800cb1a:	4633      	mov	r3, r6
 800cb1c:	aa05      	add	r2, sp, #20
 800cb1e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cb22:	e886 0003 	stmia.w	r6, {r0, r1}
 800cb26:	4641      	mov	r1, r8
 800cb28:	4638      	mov	r0, r7
 800cb2a:	f003 fa53 	bl	800ffd4 <rcl_init>
 800cb2e:	4605      	mov	r5, r0
 800cb30:	b9b8      	cbnz	r0, 800cb62 <rclc_support_init+0x82>
 800cb32:	4622      	mov	r2, r4
 800cb34:	f106 010c 	add.w	r1, r6, #12
 800cb38:	2003      	movs	r0, #3
 800cb3a:	60b4      	str	r4, [r6, #8]
 800cb3c:	f004 fa96 	bl	801106c <rcl_clock_init>
 800cb40:	4605      	mov	r5, r0
 800cb42:	b970      	cbnz	r0, 800cb62 <rclc_support_init+0x82>
 800cb44:	a805      	add	r0, sp, #20
 800cb46:	f003 fbdd 	bl	8010304 <rcl_init_options_fini>
 800cb4a:	b108      	cbz	r0, 800cb50 <rclc_support_init+0x70>
 800cb4c:	f000 f8f4 	bl	800cd38 <rcutils_reset_error>
 800cb50:	4628      	mov	r0, r5
 800cb52:	b006      	add	sp, #24
 800cb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb58:	250b      	movs	r5, #11
 800cb5a:	4628      	mov	r0, r5
 800cb5c:	b006      	add	sp, #24
 800cb5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb62:	f000 f8e9 	bl	800cd38 <rcutils_reset_error>
 800cb66:	a805      	add	r0, sp, #20
 800cb68:	f003 fbcc 	bl	8010304 <rcl_init_options_fini>
 800cb6c:	2800      	cmp	r0, #0
 800cb6e:	d0ef      	beq.n	800cb50 <rclc_support_init+0x70>
 800cb70:	e7ec      	b.n	800cb4c <rclc_support_init+0x6c>
 800cb72:	bf00      	nop

0800cb74 <rclc_node_init_default>:
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	bf18      	it	ne
 800cb78:	2a00      	cmpne	r2, #0
 800cb7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb7e:	4616      	mov	r6, r2
 800cb80:	bf0c      	ite	eq
 800cb82:	2201      	moveq	r2, #1
 800cb84:	2200      	movne	r2, #0
 800cb86:	b0a3      	sub	sp, #140	; 0x8c
 800cb88:	2900      	cmp	r1, #0
 800cb8a:	bf08      	it	eq
 800cb8c:	f042 0201 	orreq.w	r2, r2, #1
 800cb90:	bb22      	cbnz	r2, 800cbdc <rclc_node_init_default+0x68>
 800cb92:	4604      	mov	r4, r0
 800cb94:	b310      	cbz	r0, 800cbdc <rclc_node_init_default+0x68>
 800cb96:	f10d 0810 	add.w	r8, sp, #16
 800cb9a:	461f      	mov	r7, r3
 800cb9c:	460d      	mov	r5, r1
 800cb9e:	f10d 0918 	add.w	r9, sp, #24
 800cba2:	4640      	mov	r0, r8
 800cba4:	f003 fc5a 	bl	801045c <rcl_get_zero_initialized_node>
 800cba8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cbac:	e884 0003 	stmia.w	r4, {r0, r1}
 800cbb0:	4648      	mov	r0, r9
 800cbb2:	f003 fdcd 	bl	8010750 <rcl_node_get_default_options>
 800cbb6:	4640      	mov	r0, r8
 800cbb8:	f003 fc50 	bl	801045c <rcl_get_zero_initialized_node>
 800cbbc:	f8cd 9000 	str.w	r9, [sp]
 800cbc0:	463b      	mov	r3, r7
 800cbc2:	4632      	mov	r2, r6
 800cbc4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800cbc8:	e884 0003 	stmia.w	r4, {r0, r1}
 800cbcc:	4629      	mov	r1, r5
 800cbce:	4620      	mov	r0, r4
 800cbd0:	f003 fc4e 	bl	8010470 <rcl_node_init>
 800cbd4:	b930      	cbnz	r0, 800cbe4 <rclc_node_init_default+0x70>
 800cbd6:	b023      	add	sp, #140	; 0x8c
 800cbd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbdc:	200b      	movs	r0, #11
 800cbde:	b023      	add	sp, #140	; 0x8c
 800cbe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbe4:	9003      	str	r0, [sp, #12]
 800cbe6:	f000 f8a7 	bl	800cd38 <rcutils_reset_error>
 800cbea:	f000 f8a5 	bl	800cd38 <rcutils_reset_error>
 800cbee:	9803      	ldr	r0, [sp, #12]
 800cbf0:	b023      	add	sp, #140	; 0x8c
 800cbf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbf6:	bf00      	nop

0800cbf8 <rclc_service_init_default>:
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	bf18      	it	ne
 800cbfc:	2a00      	cmpne	r2, #0
 800cbfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc02:	4616      	mov	r6, r2
 800cc04:	bf0c      	ite	eq
 800cc06:	2201      	moveq	r2, #1
 800cc08:	2200      	movne	r2, #0
 800cc0a:	b09e      	sub	sp, #120	; 0x78
 800cc0c:	2900      	cmp	r1, #0
 800cc0e:	bf08      	it	eq
 800cc10:	f042 0201 	orreq.w	r2, r2, #1
 800cc14:	bb1a      	cbnz	r2, 800cc5e <rclc_service_init_default+0x66>
 800cc16:	4604      	mov	r4, r0
 800cc18:	b308      	cbz	r0, 800cc5e <rclc_service_init_default+0x66>
 800cc1a:	f10d 0810 	add.w	r8, sp, #16
 800cc1e:	461f      	mov	r7, r3
 800cc20:	460d      	mov	r5, r1
 800cc22:	f003 ff99 	bl	8010b58 <rcl_get_zero_initialized_service>
 800cc26:	6020      	str	r0, [r4, #0]
 800cc28:	4640      	mov	r0, r8
 800cc2a:	f004 f843 	bl	8010cb4 <rcl_service_get_default_options>
 800cc2e:	2250      	movs	r2, #80	; 0x50
 800cc30:	490d      	ldr	r1, [pc, #52]	; (800cc68 <rclc_service_init_default+0x70>)
 800cc32:	4640      	mov	r0, r8
 800cc34:	f00d fe07 	bl	801a846 <memcpy>
 800cc38:	463b      	mov	r3, r7
 800cc3a:	4632      	mov	r2, r6
 800cc3c:	4629      	mov	r1, r5
 800cc3e:	4620      	mov	r0, r4
 800cc40:	f8cd 8000 	str.w	r8, [sp]
 800cc44:	f003 ff8e 	bl	8010b64 <rcl_service_init>
 800cc48:	b910      	cbnz	r0, 800cc50 <rclc_service_init_default+0x58>
 800cc4a:	b01e      	add	sp, #120	; 0x78
 800cc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc50:	9003      	str	r0, [sp, #12]
 800cc52:	f000 f871 	bl	800cd38 <rcutils_reset_error>
 800cc56:	9803      	ldr	r0, [sp, #12]
 800cc58:	b01e      	add	sp, #120	; 0x78
 800cc5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc5e:	200b      	movs	r0, #11
 800cc60:	b01e      	add	sp, #120	; 0x78
 800cc62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc66:	bf00      	nop
 800cc68:	0801c098 	.word	0x0801c098

0800cc6c <__default_zero_allocate>:
 800cc6c:	f00d b8dc 	b.w	8019e28 <calloc>

0800cc70 <__default_reallocate>:
 800cc70:	f00d ba68 	b.w	801a144 <realloc>

0800cc74 <__default_deallocate>:
 800cc74:	f00d b946 	b.w	8019f04 <free>

0800cc78 <__default_allocate>:
 800cc78:	f00d b93c 	b.w	8019ef4 <malloc>

0800cc7c <rcutils_get_zero_initialized_allocator>:
 800cc7c:	b510      	push	{r4, lr}
 800cc7e:	4c05      	ldr	r4, [pc, #20]	; (800cc94 <rcutils_get_zero_initialized_allocator+0x18>)
 800cc80:	4686      	mov	lr, r0
 800cc82:	4684      	mov	ip, r0
 800cc84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cc86:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cc8a:	6823      	ldr	r3, [r4, #0]
 800cc8c:	4670      	mov	r0, lr
 800cc8e:	f8cc 3000 	str.w	r3, [ip]
 800cc92:	bd10      	pop	{r4, pc}
 800cc94:	0801c0e8 	.word	0x0801c0e8

0800cc98 <rcutils_set_default_allocator>:
 800cc98:	b1a8      	cbz	r0, 800ccc6 <rcutils_set_default_allocator+0x2e>
 800cc9a:	6802      	ldr	r2, [r0, #0]
 800cc9c:	b1a2      	cbz	r2, 800ccc8 <rcutils_set_default_allocator+0x30>
 800cc9e:	6841      	ldr	r1, [r0, #4]
 800cca0:	b1a1      	cbz	r1, 800cccc <rcutils_set_default_allocator+0x34>
 800cca2:	b410      	push	{r4}
 800cca4:	68c4      	ldr	r4, [r0, #12]
 800cca6:	b164      	cbz	r4, 800ccc2 <rcutils_set_default_allocator+0x2a>
 800cca8:	6880      	ldr	r0, [r0, #8]
 800ccaa:	b138      	cbz	r0, 800ccbc <rcutils_set_default_allocator+0x24>
 800ccac:	4b08      	ldr	r3, [pc, #32]	; (800ccd0 <rcutils_set_default_allocator+0x38>)
 800ccae:	601a      	str	r2, [r3, #0]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800ccb6:	2001      	movs	r0, #1
 800ccb8:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800ccbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccc0:	4770      	bx	lr
 800ccc2:	4620      	mov	r0, r4
 800ccc4:	e7fa      	b.n	800ccbc <rcutils_set_default_allocator+0x24>
 800ccc6:	4770      	bx	lr
 800ccc8:	4610      	mov	r0, r2
 800ccca:	4770      	bx	lr
 800cccc:	4608      	mov	r0, r1
 800ccce:	4770      	bx	lr
 800ccd0:	20000834 	.word	0x20000834

0800ccd4 <rcutils_get_default_allocator>:
 800ccd4:	b510      	push	{r4, lr}
 800ccd6:	4c05      	ldr	r4, [pc, #20]	; (800ccec <rcutils_get_default_allocator+0x18>)
 800ccd8:	4686      	mov	lr, r0
 800ccda:	4684      	mov	ip, r0
 800ccdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ccde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cce2:	6823      	ldr	r3, [r4, #0]
 800cce4:	4670      	mov	r0, lr
 800cce6:	f8cc 3000 	str.w	r3, [ip]
 800ccea:	bd10      	pop	{r4, pc}
 800ccec:	20000834 	.word	0x20000834

0800ccf0 <rcutils_allocator_is_valid>:
 800ccf0:	b158      	cbz	r0, 800cd0a <rcutils_allocator_is_valid+0x1a>
 800ccf2:	6803      	ldr	r3, [r0, #0]
 800ccf4:	b143      	cbz	r3, 800cd08 <rcutils_allocator_is_valid+0x18>
 800ccf6:	6843      	ldr	r3, [r0, #4]
 800ccf8:	b133      	cbz	r3, 800cd08 <rcutils_allocator_is_valid+0x18>
 800ccfa:	68c3      	ldr	r3, [r0, #12]
 800ccfc:	b123      	cbz	r3, 800cd08 <rcutils_allocator_is_valid+0x18>
 800ccfe:	6880      	ldr	r0, [r0, #8]
 800cd00:	3800      	subs	r0, #0
 800cd02:	bf18      	it	ne
 800cd04:	2001      	movne	r0, #1
 800cd06:	4770      	bx	lr
 800cd08:	4618      	mov	r0, r3
 800cd0a:	4770      	bx	lr

0800cd0c <rcutils_get_error_string>:
 800cd0c:	4b06      	ldr	r3, [pc, #24]	; (800cd28 <rcutils_get_error_string+0x1c>)
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	b13b      	cbz	r3, 800cd22 <rcutils_get_error_string+0x16>
 800cd12:	4b06      	ldr	r3, [pc, #24]	; (800cd2c <rcutils_get_error_string+0x20>)
 800cd14:	781a      	ldrb	r2, [r3, #0]
 800cd16:	b90a      	cbnz	r2, 800cd1c <rcutils_get_error_string+0x10>
 800cd18:	2201      	movs	r2, #1
 800cd1a:	701a      	strb	r2, [r3, #0]
 800cd1c:	4b04      	ldr	r3, [pc, #16]	; (800cd30 <rcutils_get_error_string+0x24>)
 800cd1e:	7818      	ldrb	r0, [r3, #0]
 800cd20:	4770      	bx	lr
 800cd22:	4b04      	ldr	r3, [pc, #16]	; (800cd34 <rcutils_get_error_string+0x28>)
 800cd24:	7818      	ldrb	r0, [r3, #0]
 800cd26:	4770      	bx	lr
 800cd28:	2000b510 	.word	0x2000b510
 800cd2c:	2000b529 	.word	0x2000b529
 800cd30:	2000b528 	.word	0x2000b528
 800cd34:	0801b948 	.word	0x0801b948

0800cd38 <rcutils_reset_error>:
 800cd38:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800cd58 <rcutils_reset_error+0x20>
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	4a08      	ldr	r2, [pc, #32]	; (800cd60 <rcutils_reset_error+0x28>)
 800cd40:	4808      	ldr	r0, [pc, #32]	; (800cd64 <rcutils_reset_error+0x2c>)
 800cd42:	8013      	strh	r3, [r2, #0]
 800cd44:	4908      	ldr	r1, [pc, #32]	; (800cd68 <rcutils_reset_error+0x30>)
 800cd46:	7003      	strb	r3, [r0, #0]
 800cd48:	700b      	strb	r3, [r1, #0]
 800cd4a:	ed82 7b02 	vstr	d7, [r2, #8]
 800cd4e:	4a07      	ldr	r2, [pc, #28]	; (800cd6c <rcutils_reset_error+0x34>)
 800cd50:	7013      	strb	r3, [r2, #0]
 800cd52:	4770      	bx	lr
 800cd54:	f3af 8000 	nop.w
	...
 800cd60:	2000b518 	.word	0x2000b518
 800cd64:	2000b529 	.word	0x2000b529
 800cd68:	2000b528 	.word	0x2000b528
 800cd6c:	2000b510 	.word	0x2000b510

0800cd70 <rcutils_system_time_now>:
 800cd70:	b310      	cbz	r0, 800cdb8 <rcutils_system_time_now+0x48>
 800cd72:	b570      	push	{r4, r5, r6, lr}
 800cd74:	b084      	sub	sp, #16
 800cd76:	4604      	mov	r4, r0
 800cd78:	2001      	movs	r0, #1
 800cd7a:	4669      	mov	r1, sp
 800cd7c:	f7f5 fa64 	bl	8002248 <clock_gettime>
 800cd80:	2800      	cmp	r0, #0
 800cd82:	db16      	blt.n	800cdb2 <rcutils_system_time_now+0x42>
 800cd84:	e9dd 3100 	ldrd	r3, r1, [sp]
 800cd88:	2900      	cmp	r1, #0
 800cd8a:	db12      	blt.n	800cdb2 <rcutils_system_time_now+0x42>
 800cd8c:	ea53 0201 	orrs.w	r2, r3, r1
 800cd90:	9d02      	ldr	r5, [sp, #8]
 800cd92:	d101      	bne.n	800cd98 <rcutils_system_time_now+0x28>
 800cd94:	2d00      	cmp	r5, #0
 800cd96:	db0c      	blt.n	800cdb2 <rcutils_system_time_now+0x42>
 800cd98:	4e08      	ldr	r6, [pc, #32]	; (800cdbc <rcutils_system_time_now+0x4c>)
 800cd9a:	2000      	movs	r0, #0
 800cd9c:	fba3 3206 	umull	r3, r2, r3, r6
 800cda0:	195b      	adds	r3, r3, r5
 800cda2:	fb06 2201 	mla	r2, r6, r1, r2
 800cda6:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800cdaa:	e9c4 3200 	strd	r3, r2, [r4]
 800cdae:	b004      	add	sp, #16
 800cdb0:	bd70      	pop	{r4, r5, r6, pc}
 800cdb2:	2002      	movs	r0, #2
 800cdb4:	b004      	add	sp, #16
 800cdb6:	bd70      	pop	{r4, r5, r6, pc}
 800cdb8:	200b      	movs	r0, #11
 800cdba:	4770      	bx	lr
 800cdbc:	3b9aca00 	.word	0x3b9aca00

0800cdc0 <rcutils_steady_time_now>:
 800cdc0:	b310      	cbz	r0, 800ce08 <rcutils_steady_time_now+0x48>
 800cdc2:	b570      	push	{r4, r5, r6, lr}
 800cdc4:	b084      	sub	sp, #16
 800cdc6:	4604      	mov	r4, r0
 800cdc8:	2000      	movs	r0, #0
 800cdca:	4669      	mov	r1, sp
 800cdcc:	f7f5 fa3c 	bl	8002248 <clock_gettime>
 800cdd0:	2800      	cmp	r0, #0
 800cdd2:	db16      	blt.n	800ce02 <rcutils_steady_time_now+0x42>
 800cdd4:	e9dd 3100 	ldrd	r3, r1, [sp]
 800cdd8:	2900      	cmp	r1, #0
 800cdda:	db12      	blt.n	800ce02 <rcutils_steady_time_now+0x42>
 800cddc:	ea53 0201 	orrs.w	r2, r3, r1
 800cde0:	9d02      	ldr	r5, [sp, #8]
 800cde2:	d101      	bne.n	800cde8 <rcutils_steady_time_now+0x28>
 800cde4:	2d00      	cmp	r5, #0
 800cde6:	db0c      	blt.n	800ce02 <rcutils_steady_time_now+0x42>
 800cde8:	4e08      	ldr	r6, [pc, #32]	; (800ce0c <rcutils_steady_time_now+0x4c>)
 800cdea:	2000      	movs	r0, #0
 800cdec:	fba3 3206 	umull	r3, r2, r3, r6
 800cdf0:	195b      	adds	r3, r3, r5
 800cdf2:	fb06 2201 	mla	r2, r6, r1, r2
 800cdf6:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800cdfa:	e9c4 3200 	strd	r3, r2, [r4]
 800cdfe:	b004      	add	sp, #16
 800ce00:	bd70      	pop	{r4, r5, r6, pc}
 800ce02:	2002      	movs	r0, #2
 800ce04:	b004      	add	sp, #16
 800ce06:	bd70      	pop	{r4, r5, r6, pc}
 800ce08:	200b      	movs	r0, #11
 800ce0a:	4770      	bx	lr
 800ce0c:	3b9aca00 	.word	0x3b9aca00

0800ce10 <rmw_uros_set_custom_transport>:
 800ce10:	b470      	push	{r4, r5, r6}
 800ce12:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800ce16:	b162      	cbz	r2, 800ce32 <rmw_uros_set_custom_transport+0x22>
 800ce18:	b15b      	cbz	r3, 800ce32 <rmw_uros_set_custom_transport+0x22>
 800ce1a:	b155      	cbz	r5, 800ce32 <rmw_uros_set_custom_transport+0x22>
 800ce1c:	b14e      	cbz	r6, 800ce32 <rmw_uros_set_custom_transport+0x22>
 800ce1e:	4c06      	ldr	r4, [pc, #24]	; (800ce38 <rmw_uros_set_custom_transport+0x28>)
 800ce20:	7020      	strb	r0, [r4, #0]
 800ce22:	2000      	movs	r0, #0
 800ce24:	6166      	str	r6, [r4, #20]
 800ce26:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800ce2a:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ce2e:	bc70      	pop	{r4, r5, r6}
 800ce30:	4770      	bx	lr
 800ce32:	200b      	movs	r0, #11
 800ce34:	bc70      	pop	{r4, r5, r6}
 800ce36:	4770      	bx	lr
 800ce38:	2000b52c 	.word	0x2000b52c

0800ce3c <get_message_typesupport_handle_function>:
 800ce3c:	b510      	push	{r4, lr}
 800ce3e:	4604      	mov	r4, r0
 800ce40:	6800      	ldr	r0, [r0, #0]
 800ce42:	f7f3 f9fd 	bl	8000240 <strcmp>
 800ce46:	2800      	cmp	r0, #0
 800ce48:	bf0c      	ite	eq
 800ce4a:	4620      	moveq	r0, r4
 800ce4c:	2000      	movne	r0, #0
 800ce4e:	bd10      	pop	{r4, pc}

0800ce50 <rosidl_runtime_c__int32__Sequence__init>:
 800ce50:	b530      	push	{r4, r5, lr}
 800ce52:	4604      	mov	r4, r0
 800ce54:	b087      	sub	sp, #28
 800ce56:	b130      	cbz	r0, 800ce66 <rosidl_runtime_c__int32__Sequence__init+0x16>
 800ce58:	460d      	mov	r5, r1
 800ce5a:	b931      	cbnz	r1, 800ce6a <rosidl_runtime_c__int32__Sequence__init+0x1a>
 800ce5c:	460b      	mov	r3, r1
 800ce5e:	2001      	movs	r0, #1
 800ce60:	60a5      	str	r5, [r4, #8]
 800ce62:	e9c4 3500 	strd	r3, r5, [r4]
 800ce66:	b007      	add	sp, #28
 800ce68:	bd30      	pop	{r4, r5, pc}
 800ce6a:	a801      	add	r0, sp, #4
 800ce6c:	f7ff ff32 	bl	800ccd4 <rcutils_get_default_allocator>
 800ce70:	9b01      	ldr	r3, [sp, #4]
 800ce72:	9905      	ldr	r1, [sp, #20]
 800ce74:	00a8      	lsls	r0, r5, #2
 800ce76:	4798      	blx	r3
 800ce78:	4603      	mov	r3, r0
 800ce7a:	2800      	cmp	r0, #0
 800ce7c:	d1ef      	bne.n	800ce5e <rosidl_runtime_c__int32__Sequence__init+0xe>
 800ce7e:	e7f2      	b.n	800ce66 <rosidl_runtime_c__int32__Sequence__init+0x16>

0800ce80 <rosidl_runtime_c__int32__Sequence__fini>:
 800ce80:	b188      	cbz	r0, 800cea6 <rosidl_runtime_c__int32__Sequence__fini+0x26>
 800ce82:	6803      	ldr	r3, [r0, #0]
 800ce84:	b510      	push	{r4, lr}
 800ce86:	4604      	mov	r4, r0
 800ce88:	b086      	sub	sp, #24
 800ce8a:	b153      	cbz	r3, 800cea2 <rosidl_runtime_c__int32__Sequence__fini+0x22>
 800ce8c:	a801      	add	r0, sp, #4
 800ce8e:	f7ff ff21 	bl	800ccd4 <rcutils_get_default_allocator>
 800ce92:	9b02      	ldr	r3, [sp, #8]
 800ce94:	9905      	ldr	r1, [sp, #20]
 800ce96:	6820      	ldr	r0, [r4, #0]
 800ce98:	4798      	blx	r3
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	e9c4 3300 	strd	r3, r3, [r4]
 800cea0:	60a3      	str	r3, [r4, #8]
 800cea2:	b006      	add	sp, #24
 800cea4:	bd10      	pop	{r4, pc}
 800cea6:	4770      	bx	lr

0800cea8 <rosidl_runtime_c__int32__Sequence__copy>:
 800cea8:	2900      	cmp	r1, #0
 800ceaa:	bf18      	it	ne
 800ceac:	2800      	cmpne	r0, #0
 800ceae:	b570      	push	{r4, r5, r6, lr}
 800ceb0:	bf08      	it	eq
 800ceb2:	2501      	moveq	r5, #1
 800ceb4:	b086      	sub	sp, #24
 800ceb6:	bf18      	it	ne
 800ceb8:	2500      	movne	r5, #0
 800ceba:	d01f      	beq.n	800cefc <rosidl_runtime_c__int32__Sequence__copy+0x54>
 800cebc:	6842      	ldr	r2, [r0, #4]
 800cebe:	4606      	mov	r6, r0
 800cec0:	688b      	ldr	r3, [r1, #8]
 800cec2:	460c      	mov	r4, r1
 800cec4:	4293      	cmp	r3, r2
 800cec6:	d30a      	bcc.n	800cede <rosidl_runtime_c__int32__Sequence__copy+0x36>
 800cec8:	6808      	ldr	r0, [r1, #0]
 800ceca:	0092      	lsls	r2, r2, #2
 800cecc:	6831      	ldr	r1, [r6, #0]
 800cece:	f00d fcba 	bl	801a846 <memcpy>
 800ced2:	2501      	movs	r5, #1
 800ced4:	6873      	ldr	r3, [r6, #4]
 800ced6:	6063      	str	r3, [r4, #4]
 800ced8:	4628      	mov	r0, r5
 800ceda:	b006      	add	sp, #24
 800cedc:	bd70      	pop	{r4, r5, r6, pc}
 800cede:	a801      	add	r0, sp, #4
 800cee0:	f7ff fef8 	bl	800ccd4 <rcutils_get_default_allocator>
 800cee4:	6871      	ldr	r1, [r6, #4]
 800cee6:	9b03      	ldr	r3, [sp, #12]
 800cee8:	0089      	lsls	r1, r1, #2
 800ceea:	9a05      	ldr	r2, [sp, #20]
 800ceec:	6820      	ldr	r0, [r4, #0]
 800ceee:	4798      	blx	r3
 800cef0:	2800      	cmp	r0, #0
 800cef2:	d0f1      	beq.n	800ced8 <rosidl_runtime_c__int32__Sequence__copy+0x30>
 800cef4:	6872      	ldr	r2, [r6, #4]
 800cef6:	6020      	str	r0, [r4, #0]
 800cef8:	60a2      	str	r2, [r4, #8]
 800cefa:	e7e6      	b.n	800ceca <rosidl_runtime_c__int32__Sequence__copy+0x22>
 800cefc:	2500      	movs	r5, #0
 800cefe:	4628      	mov	r0, r5
 800cf00:	b006      	add	sp, #24
 800cf02:	bd70      	pop	{r4, r5, r6, pc}

0800cf04 <get_service_typesupport_handle>:
 800cf04:	6883      	ldr	r3, [r0, #8]
 800cf06:	4718      	bx	r3

0800cf08 <get_service_typesupport_handle_function>:
 800cf08:	b510      	push	{r4, lr}
 800cf0a:	4604      	mov	r4, r0
 800cf0c:	6800      	ldr	r0, [r0, #0]
 800cf0e:	f7f3 f997 	bl	8000240 <strcmp>
 800cf12:	2800      	cmp	r0, #0
 800cf14:	bf0c      	ite	eq
 800cf16:	4620      	moveq	r0, r4
 800cf18:	2000      	movne	r0, #0
 800cf1a:	bd10      	pop	{r4, pc}

0800cf1c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800cf1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf20:	6805      	ldr	r5, [r0, #0]
 800cf22:	4604      	mov	r4, r0
 800cf24:	460e      	mov	r6, r1
 800cf26:	4628      	mov	r0, r5
 800cf28:	f7f3 f98a 	bl	8000240 <strcmp>
 800cf2c:	b1c8      	cbz	r0, 800cf62 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800cf2e:	4b11      	ldr	r3, [pc, #68]	; (800cf74 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	429d      	cmp	r5, r3
 800cf34:	d112      	bne.n	800cf5c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800cf36:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800cf3a:	f8d8 4000 	ldr.w	r4, [r8]
 800cf3e:	b16c      	cbz	r4, 800cf5c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800cf40:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800cf44:	2700      	movs	r7, #0
 800cf46:	3d04      	subs	r5, #4
 800cf48:	4631      	mov	r1, r6
 800cf4a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800cf4e:	f7f3 f977 	bl	8000240 <strcmp>
 800cf52:	00bb      	lsls	r3, r7, #2
 800cf54:	b140      	cbz	r0, 800cf68 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800cf56:	3701      	adds	r7, #1
 800cf58:	42bc      	cmp	r4, r7
 800cf5a:	d1f5      	bne.n	800cf48 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800cf5c:	2000      	movs	r0, #0
 800cf5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf62:	4620      	mov	r0, r4
 800cf64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf68:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cf6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf70:	58d3      	ldr	r3, [r2, r3]
 800cf72:	4718      	bx	r3
 800cf74:	20000848 	.word	0x20000848

0800cf78 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800cf78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf7c:	6805      	ldr	r5, [r0, #0]
 800cf7e:	4604      	mov	r4, r0
 800cf80:	460e      	mov	r6, r1
 800cf82:	4628      	mov	r0, r5
 800cf84:	f7f3 f95c 	bl	8000240 <strcmp>
 800cf88:	b1c8      	cbz	r0, 800cfbe <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800cf8a:	4b11      	ldr	r3, [pc, #68]	; (800cfd0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	429d      	cmp	r5, r3
 800cf90:	d112      	bne.n	800cfb8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800cf92:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800cf96:	f8d8 4000 	ldr.w	r4, [r8]
 800cf9a:	b16c      	cbz	r4, 800cfb8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800cf9c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800cfa0:	2700      	movs	r7, #0
 800cfa2:	3d04      	subs	r5, #4
 800cfa4:	4631      	mov	r1, r6
 800cfa6:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800cfaa:	f7f3 f949 	bl	8000240 <strcmp>
 800cfae:	00bb      	lsls	r3, r7, #2
 800cfb0:	b140      	cbz	r0, 800cfc4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800cfb2:	3701      	adds	r7, #1
 800cfb4:	42bc      	cmp	r4, r7
 800cfb6:	d1f5      	bne.n	800cfa4 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800cfb8:	2000      	movs	r0, #0
 800cfba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfbe:	4620      	mov	r0, r4
 800cfc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfc4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cfc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfcc:	58d3      	ldr	r3, [r2, r3]
 800cfce:	4718      	bx	r3
 800cfd0:	20000848 	.word	0x20000848

0800cfd4 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__size_function__ServiceEventInfo__client_gid>:
 800cfd4:	2010      	movs	r0, #16
 800cfd6:	4770      	bx	lr

0800cfd8 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_const_function__ServiceEventInfo__client_gid>:
 800cfd8:	4408      	add	r0, r1
 800cfda:	4770      	bx	lr

0800cfdc <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__fetch_function__ServiceEventInfo__client_gid>:
 800cfdc:	5c43      	ldrb	r3, [r0, r1]
 800cfde:	7013      	strb	r3, [r2, #0]
 800cfe0:	4770      	bx	lr
 800cfe2:	bf00      	nop

0800cfe4 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__assign_function__ServiceEventInfo__client_gid>:
 800cfe4:	7813      	ldrb	r3, [r2, #0]
 800cfe6:	5443      	strb	r3, [r0, r1]
 800cfe8:	4770      	bx	lr
 800cfea:	bf00      	nop

0800cfec <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_init_function>:
 800cfec:	f007 bf78 	b.w	8014ee0 <service_msgs__msg__ServiceEventInfo__init>

0800cff0 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_fini_function>:
 800cff0:	f007 bf88 	b.w	8014f04 <service_msgs__msg__ServiceEventInfo__fini>

0800cff4 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_function__ServiceEventInfo__client_gid>:
 800cff4:	4408      	add	r0, r1
 800cff6:	4770      	bx	lr

0800cff8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800cff8:	b508      	push	{r3, lr}
 800cffa:	f000 f8db 	bl	800d1b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800cffe:	4b06      	ldr	r3, [pc, #24]	; (800d018 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800d000:	4906      	ldr	r1, [pc, #24]	; (800d01c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x24>)
 800d002:	681a      	ldr	r2, [r3, #0]
 800d004:	6488      	str	r0, [r1, #72]	; 0x48
 800d006:	b10a      	cbz	r2, 800d00c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x14>
 800d008:	4803      	ldr	r0, [pc, #12]	; (800d018 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800d00a:	bd08      	pop	{r3, pc}
 800d00c:	4a04      	ldr	r2, [pc, #16]	; (800d020 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x28>)
 800d00e:	4802      	ldr	r0, [pc, #8]	; (800d018 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800d010:	6812      	ldr	r2, [r2, #0]
 800d012:	601a      	str	r2, [r3, #0]
 800d014:	bd08      	pop	{r3, pc}
 800d016:	bf00      	nop
 800d018:	20000940 	.word	0x20000940
 800d01c:	20000850 	.word	0x20000850
 800d020:	2000084c 	.word	0x2000084c

0800d024 <get_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800d024:	b5b0      	push	{r4, r5, r7, lr}
 800d026:	4604      	mov	r4, r0
 800d028:	b1d8      	cbz	r0, 800d062 <get_serialized_size_service_msgs__msg__ServiceEventInfo+0x3e>
 800d02a:	460d      	mov	r5, r1
 800d02c:	2101      	movs	r1, #1
 800d02e:	4628      	mov	r0, r5
 800d030:	f001 fede 	bl	800edf0 <ucdr_alignment>
 800d034:	1c6b      	adds	r3, r5, #1
 800d036:	4607      	mov	r7, r0
 800d038:	1d20      	adds	r0, r4, #4
 800d03a:	f1c5 0508 	rsb	r5, r5, #8
 800d03e:	441f      	add	r7, r3
 800d040:	4639      	mov	r1, r7
 800d042:	f000 f8c5 	bl	800d1d0 <get_serialized_size_builtin_interfaces__msg__Time>
 800d046:	4407      	add	r7, r0
 800d048:	2101      	movs	r1, #1
 800d04a:	4638      	mov	r0, r7
 800d04c:	f001 fed0 	bl	800edf0 <ucdr_alignment>
 800d050:	f100 0410 	add.w	r4, r0, #16
 800d054:	2108      	movs	r1, #8
 800d056:	443c      	add	r4, r7
 800d058:	4620      	mov	r0, r4
 800d05a:	f001 fec9 	bl	800edf0 <ucdr_alignment>
 800d05e:	4428      	add	r0, r5
 800d060:	4420      	add	r0, r4
 800d062:	bdb0      	pop	{r4, r5, r7, pc}

0800d064 <_ServiceEventInfo__cdr_deserialize>:
 800d064:	b538      	push	{r3, r4, r5, lr}
 800d066:	460c      	mov	r4, r1
 800d068:	b1b9      	cbz	r1, 800d09a <_ServiceEventInfo__cdr_deserialize+0x36>
 800d06a:	4605      	mov	r5, r0
 800d06c:	f000 fb3a 	bl	800d6e4 <ucdr_deserialize_uint8_t>
 800d070:	f000 f912 	bl	800d298 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d074:	4603      	mov	r3, r0
 800d076:	1d21      	adds	r1, r4, #4
 800d078:	4628      	mov	r0, r5
 800d07a:	685b      	ldr	r3, [r3, #4]
 800d07c:	68db      	ldr	r3, [r3, #12]
 800d07e:	4798      	blx	r3
 800d080:	f104 010c 	add.w	r1, r4, #12
 800d084:	4628      	mov	r0, r5
 800d086:	2210      	movs	r2, #16
 800d088:	f000 f9d4 	bl	800d434 <ucdr_deserialize_array_uint8_t>
 800d08c:	f104 0120 	add.w	r1, r4, #32
 800d090:	4628      	mov	r0, r5
 800d092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d096:	f001 bc65 	b.w	800e964 <ucdr_deserialize_int64_t>
 800d09a:	4608      	mov	r0, r1
 800d09c:	bd38      	pop	{r3, r4, r5, pc}
 800d09e:	bf00      	nop

0800d0a0 <_ServiceEventInfo__cdr_serialize>:
 800d0a0:	b1e8      	cbz	r0, 800d0de <_ServiceEventInfo__cdr_serialize+0x3e>
 800d0a2:	b570      	push	{r4, r5, r6, lr}
 800d0a4:	4606      	mov	r6, r0
 800d0a6:	460d      	mov	r5, r1
 800d0a8:	4604      	mov	r4, r0
 800d0aa:	4608      	mov	r0, r1
 800d0ac:	f816 1b04 	ldrb.w	r1, [r6], #4
 800d0b0:	f000 fb02 	bl	800d6b8 <ucdr_serialize_uint8_t>
 800d0b4:	f000 f8f0 	bl	800d298 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	4629      	mov	r1, r5
 800d0bc:	4630      	mov	r0, r6
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	689b      	ldr	r3, [r3, #8]
 800d0c2:	4798      	blx	r3
 800d0c4:	2210      	movs	r2, #16
 800d0c6:	f104 010c 	add.w	r1, r4, #12
 800d0ca:	4628      	mov	r0, r5
 800d0cc:	f000 f94e 	bl	800d36c <ucdr_serialize_array_uint8_t>
 800d0d0:	4628      	mov	r0, r5
 800d0d2:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800d0d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d0da:	f001 bb73 	b.w	800e7c4 <ucdr_serialize_int64_t>
 800d0de:	4770      	bx	lr

0800d0e0 <_ServiceEventInfo__get_serialized_size>:
 800d0e0:	b538      	push	{r3, r4, r5, lr}
 800d0e2:	4604      	mov	r4, r0
 800d0e4:	b1b0      	cbz	r0, 800d114 <_ServiceEventInfo__get_serialized_size+0x34>
 800d0e6:	2101      	movs	r1, #1
 800d0e8:	2000      	movs	r0, #0
 800d0ea:	f001 fe81 	bl	800edf0 <ucdr_alignment>
 800d0ee:	4605      	mov	r5, r0
 800d0f0:	1d20      	adds	r0, r4, #4
 800d0f2:	3501      	adds	r5, #1
 800d0f4:	4629      	mov	r1, r5
 800d0f6:	f000 f86b 	bl	800d1d0 <get_serialized_size_builtin_interfaces__msg__Time>
 800d0fa:	4405      	add	r5, r0
 800d0fc:	2101      	movs	r1, #1
 800d0fe:	4628      	mov	r0, r5
 800d100:	f001 fe76 	bl	800edf0 <ucdr_alignment>
 800d104:	3010      	adds	r0, #16
 800d106:	2108      	movs	r1, #8
 800d108:	4405      	add	r5, r0
 800d10a:	4628      	mov	r0, r5
 800d10c:	f001 fe70 	bl	800edf0 <ucdr_alignment>
 800d110:	3008      	adds	r0, #8
 800d112:	4428      	add	r0, r5
 800d114:	bd38      	pop	{r3, r4, r5, pc}
 800d116:	bf00      	nop

0800d118 <_ServiceEventInfo__max_serialized_size>:
 800d118:	b550      	push	{r4, r6, lr}
 800d11a:	2601      	movs	r6, #1
 800d11c:	b083      	sub	sp, #12
 800d11e:	2000      	movs	r0, #0
 800d120:	4631      	mov	r1, r6
 800d122:	f88d 6007 	strb.w	r6, [sp, #7]
 800d126:	f001 fe63 	bl	800edf0 <ucdr_alignment>
 800d12a:	4604      	mov	r4, r0
 800d12c:	f10d 0007 	add.w	r0, sp, #7
 800d130:	4434      	add	r4, r6
 800d132:	4621      	mov	r1, r4
 800d134:	f000 f89c 	bl	800d270 <max_serialized_size_builtin_interfaces__msg__Time>
 800d138:	4404      	add	r4, r0
 800d13a:	4631      	mov	r1, r6
 800d13c:	4620      	mov	r0, r4
 800d13e:	f001 fe57 	bl	800edf0 <ucdr_alignment>
 800d142:	3010      	adds	r0, #16
 800d144:	2108      	movs	r1, #8
 800d146:	4404      	add	r4, r0
 800d148:	4620      	mov	r0, r4
 800d14a:	f001 fe51 	bl	800edf0 <ucdr_alignment>
 800d14e:	3008      	adds	r0, #8
 800d150:	4420      	add	r0, r4
 800d152:	b003      	add	sp, #12
 800d154:	bd50      	pop	{r4, r6, pc}
 800d156:	bf00      	nop

0800d158 <max_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800d158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d15c:	f04f 0801 	mov.w	r8, #1
 800d160:	460c      	mov	r4, r1
 800d162:	4607      	mov	r7, r0
 800d164:	4641      	mov	r1, r8
 800d166:	4620      	mov	r0, r4
 800d168:	f887 8000 	strb.w	r8, [r7]
 800d16c:	eb04 0608 	add.w	r6, r4, r8
 800d170:	f001 fe3e 	bl	800edf0 <ucdr_alignment>
 800d174:	4605      	mov	r5, r0
 800d176:	4638      	mov	r0, r7
 800d178:	f1c4 0408 	rsb	r4, r4, #8
 800d17c:	4435      	add	r5, r6
 800d17e:	4629      	mov	r1, r5
 800d180:	f000 f876 	bl	800d270 <max_serialized_size_builtin_interfaces__msg__Time>
 800d184:	4405      	add	r5, r0
 800d186:	4641      	mov	r1, r8
 800d188:	4628      	mov	r0, r5
 800d18a:	f001 fe31 	bl	800edf0 <ucdr_alignment>
 800d18e:	3010      	adds	r0, #16
 800d190:	2108      	movs	r1, #8
 800d192:	4405      	add	r5, r0
 800d194:	4628      	mov	r0, r5
 800d196:	f001 fe2b 	bl	800edf0 <ucdr_alignment>
 800d19a:	4420      	add	r0, r4
 800d19c:	4428      	add	r0, r5
 800d19e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1a2:	bf00      	nop

0800d1a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800d1a4:	4800      	ldr	r0, [pc, #0]	; (800d1a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x4>)
 800d1a6:	4770      	bx	lr
 800d1a8:	20000958 	.word	0x20000958

0800d1ac <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800d1ac:	f007 bee0 	b.w	8014f70 <builtin_interfaces__msg__Time__init>

0800d1b0 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800d1b0:	f007 bee2 	b.w	8014f78 <builtin_interfaces__msg__Time__fini>

0800d1b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800d1b4:	4b04      	ldr	r3, [pc, #16]	; (800d1c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800d1b6:	681a      	ldr	r2, [r3, #0]
 800d1b8:	b10a      	cbz	r2, 800d1be <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800d1ba:	4803      	ldr	r0, [pc, #12]	; (800d1c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800d1bc:	4770      	bx	lr
 800d1be:	4a03      	ldr	r2, [pc, #12]	; (800d1cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800d1c0:	4801      	ldr	r0, [pc, #4]	; (800d1c8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800d1c2:	6812      	ldr	r2, [r2, #0]
 800d1c4:	601a      	str	r2, [r3, #0]
 800d1c6:	4770      	bx	lr
 800d1c8:	20000a04 	.word	0x20000a04
 800d1cc:	2000084c 	.word	0x2000084c

0800d1d0 <get_serialized_size_builtin_interfaces__msg__Time>:
 800d1d0:	b180      	cbz	r0, 800d1f4 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800d1d2:	b538      	push	{r3, r4, r5, lr}
 800d1d4:	460d      	mov	r5, r1
 800d1d6:	2104      	movs	r1, #4
 800d1d8:	4628      	mov	r0, r5
 800d1da:	f001 fe09 	bl	800edf0 <ucdr_alignment>
 800d1de:	1d2b      	adds	r3, r5, #4
 800d1e0:	f1c5 0504 	rsb	r5, r5, #4
 800d1e4:	2104      	movs	r1, #4
 800d1e6:	181c      	adds	r4, r3, r0
 800d1e8:	4620      	mov	r0, r4
 800d1ea:	f001 fe01 	bl	800edf0 <ucdr_alignment>
 800d1ee:	4428      	add	r0, r5
 800d1f0:	4420      	add	r0, r4
 800d1f2:	bd38      	pop	{r3, r4, r5, pc}
 800d1f4:	4770      	bx	lr
 800d1f6:	bf00      	nop

0800d1f8 <_Time__cdr_deserialize>:
 800d1f8:	b538      	push	{r3, r4, r5, lr}
 800d1fa:	460c      	mov	r4, r1
 800d1fc:	b141      	cbz	r1, 800d210 <_Time__cdr_deserialize+0x18>
 800d1fe:	4605      	mov	r5, r0
 800d200:	f001 f9ba 	bl	800e578 <ucdr_deserialize_int32_t>
 800d204:	1d21      	adds	r1, r4, #4
 800d206:	4628      	mov	r0, r5
 800d208:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d20c:	f000 bd9a 	b.w	800dd44 <ucdr_deserialize_uint32_t>
 800d210:	4608      	mov	r0, r1
 800d212:	bd38      	pop	{r3, r4, r5, pc}

0800d214 <_Time__cdr_serialize>:
 800d214:	b160      	cbz	r0, 800d230 <_Time__cdr_serialize+0x1c>
 800d216:	b538      	push	{r3, r4, r5, lr}
 800d218:	460d      	mov	r5, r1
 800d21a:	4604      	mov	r4, r0
 800d21c:	6801      	ldr	r1, [r0, #0]
 800d21e:	4628      	mov	r0, r5
 800d220:	f001 f87a 	bl	800e318 <ucdr_serialize_int32_t>
 800d224:	6861      	ldr	r1, [r4, #4]
 800d226:	4628      	mov	r0, r5
 800d228:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d22c:	f000 bc5a 	b.w	800dae4 <ucdr_serialize_uint32_t>
 800d230:	4770      	bx	lr
 800d232:	bf00      	nop

0800d234 <_Time__get_serialized_size>:
 800d234:	b160      	cbz	r0, 800d250 <_Time__get_serialized_size+0x1c>
 800d236:	2104      	movs	r1, #4
 800d238:	2000      	movs	r0, #0
 800d23a:	b510      	push	{r4, lr}
 800d23c:	f001 fdd8 	bl	800edf0 <ucdr_alignment>
 800d240:	2104      	movs	r1, #4
 800d242:	1844      	adds	r4, r0, r1
 800d244:	4620      	mov	r0, r4
 800d246:	f001 fdd3 	bl	800edf0 <ucdr_alignment>
 800d24a:	3004      	adds	r0, #4
 800d24c:	4420      	add	r0, r4
 800d24e:	bd10      	pop	{r4, pc}
 800d250:	4770      	bx	lr
 800d252:	bf00      	nop

0800d254 <_Time__max_serialized_size>:
 800d254:	b510      	push	{r4, lr}
 800d256:	2104      	movs	r1, #4
 800d258:	2000      	movs	r0, #0
 800d25a:	f001 fdc9 	bl	800edf0 <ucdr_alignment>
 800d25e:	2104      	movs	r1, #4
 800d260:	1844      	adds	r4, r0, r1
 800d262:	4620      	mov	r0, r4
 800d264:	f001 fdc4 	bl	800edf0 <ucdr_alignment>
 800d268:	3004      	adds	r0, #4
 800d26a:	4420      	add	r0, r4
 800d26c:	bd10      	pop	{r4, pc}
 800d26e:	bf00      	nop

0800d270 <max_serialized_size_builtin_interfaces__msg__Time>:
 800d270:	b538      	push	{r3, r4, r5, lr}
 800d272:	460c      	mov	r4, r1
 800d274:	2301      	movs	r3, #1
 800d276:	2104      	movs	r1, #4
 800d278:	1d25      	adds	r5, r4, #4
 800d27a:	7003      	strb	r3, [r0, #0]
 800d27c:	4620      	mov	r0, r4
 800d27e:	f1c4 0404 	rsb	r4, r4, #4
 800d282:	f001 fdb5 	bl	800edf0 <ucdr_alignment>
 800d286:	4405      	add	r5, r0
 800d288:	2104      	movs	r1, #4
 800d28a:	4628      	mov	r0, r5
 800d28c:	f001 fdb0 	bl	800edf0 <ucdr_alignment>
 800d290:	4420      	add	r0, r4
 800d292:	4428      	add	r0, r5
 800d294:	bd38      	pop	{r3, r4, r5, pc}
 800d296:	bf00      	nop

0800d298 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800d298:	4800      	ldr	r0, [pc, #0]	; (800d29c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800d29a:	4770      	bx	lr
 800d29c:	20000a1c 	.word	0x20000a1c

0800d2a0 <ucdr_serialize_endian_array_char>:
 800d2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2a4:	4619      	mov	r1, r3
 800d2a6:	461f      	mov	r7, r3
 800d2a8:	4605      	mov	r5, r0
 800d2aa:	4690      	mov	r8, r2
 800d2ac:	f001 fd48 	bl	800ed40 <ucdr_check_buffer_available_for>
 800d2b0:	b9e0      	cbnz	r0, 800d2ec <ucdr_serialize_endian_array_char+0x4c>
 800d2b2:	463e      	mov	r6, r7
 800d2b4:	e00b      	b.n	800d2ce <ucdr_serialize_endian_array_char+0x2e>
 800d2b6:	4441      	add	r1, r8
 800d2b8:	68a8      	ldr	r0, [r5, #8]
 800d2ba:	4622      	mov	r2, r4
 800d2bc:	1b36      	subs	r6, r6, r4
 800d2be:	f00d fac2 	bl	801a846 <memcpy>
 800d2c2:	68ab      	ldr	r3, [r5, #8]
 800d2c4:	6928      	ldr	r0, [r5, #16]
 800d2c6:	4423      	add	r3, r4
 800d2c8:	4420      	add	r0, r4
 800d2ca:	60ab      	str	r3, [r5, #8]
 800d2cc:	6128      	str	r0, [r5, #16]
 800d2ce:	4631      	mov	r1, r6
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	4628      	mov	r0, r5
 800d2d4:	f001 fdbe 	bl	800ee54 <ucdr_check_final_buffer_behavior_array>
 800d2d8:	1bb9      	subs	r1, r7, r6
 800d2da:	4604      	mov	r4, r0
 800d2dc:	2800      	cmp	r0, #0
 800d2de:	d1ea      	bne.n	800d2b6 <ucdr_serialize_endian_array_char+0x16>
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	7da8      	ldrb	r0, [r5, #22]
 800d2e4:	756b      	strb	r3, [r5, #21]
 800d2e6:	4058      	eors	r0, r3
 800d2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2ec:	463a      	mov	r2, r7
 800d2ee:	4641      	mov	r1, r8
 800d2f0:	68a8      	ldr	r0, [r5, #8]
 800d2f2:	f00d faa8 	bl	801a846 <memcpy>
 800d2f6:	68aa      	ldr	r2, [r5, #8]
 800d2f8:	692b      	ldr	r3, [r5, #16]
 800d2fa:	443a      	add	r2, r7
 800d2fc:	443b      	add	r3, r7
 800d2fe:	60aa      	str	r2, [r5, #8]
 800d300:	612b      	str	r3, [r5, #16]
 800d302:	e7ed      	b.n	800d2e0 <ucdr_serialize_endian_array_char+0x40>

0800d304 <ucdr_deserialize_endian_array_char>:
 800d304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d308:	4619      	mov	r1, r3
 800d30a:	461f      	mov	r7, r3
 800d30c:	4605      	mov	r5, r0
 800d30e:	4690      	mov	r8, r2
 800d310:	f001 fd16 	bl	800ed40 <ucdr_check_buffer_available_for>
 800d314:	b9e8      	cbnz	r0, 800d352 <ucdr_deserialize_endian_array_char+0x4e>
 800d316:	463e      	mov	r6, r7
 800d318:	e00c      	b.n	800d334 <ucdr_deserialize_endian_array_char+0x30>
 800d31a:	eb08 0003 	add.w	r0, r8, r3
 800d31e:	68a9      	ldr	r1, [r5, #8]
 800d320:	4622      	mov	r2, r4
 800d322:	1b36      	subs	r6, r6, r4
 800d324:	f00d fa8f 	bl	801a846 <memcpy>
 800d328:	68ab      	ldr	r3, [r5, #8]
 800d32a:	6928      	ldr	r0, [r5, #16]
 800d32c:	4423      	add	r3, r4
 800d32e:	4420      	add	r0, r4
 800d330:	60ab      	str	r3, [r5, #8]
 800d332:	6128      	str	r0, [r5, #16]
 800d334:	4631      	mov	r1, r6
 800d336:	2201      	movs	r2, #1
 800d338:	4628      	mov	r0, r5
 800d33a:	f001 fd8b 	bl	800ee54 <ucdr_check_final_buffer_behavior_array>
 800d33e:	1bbb      	subs	r3, r7, r6
 800d340:	4604      	mov	r4, r0
 800d342:	2800      	cmp	r0, #0
 800d344:	d1e9      	bne.n	800d31a <ucdr_deserialize_endian_array_char+0x16>
 800d346:	2301      	movs	r3, #1
 800d348:	7da8      	ldrb	r0, [r5, #22]
 800d34a:	756b      	strb	r3, [r5, #21]
 800d34c:	4058      	eors	r0, r3
 800d34e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d352:	463a      	mov	r2, r7
 800d354:	68a9      	ldr	r1, [r5, #8]
 800d356:	4640      	mov	r0, r8
 800d358:	f00d fa75 	bl	801a846 <memcpy>
 800d35c:	68aa      	ldr	r2, [r5, #8]
 800d35e:	692b      	ldr	r3, [r5, #16]
 800d360:	443a      	add	r2, r7
 800d362:	443b      	add	r3, r7
 800d364:	60aa      	str	r2, [r5, #8]
 800d366:	612b      	str	r3, [r5, #16]
 800d368:	e7ed      	b.n	800d346 <ucdr_deserialize_endian_array_char+0x42>
 800d36a:	bf00      	nop

0800d36c <ucdr_serialize_array_uint8_t>:
 800d36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d370:	4688      	mov	r8, r1
 800d372:	4611      	mov	r1, r2
 800d374:	4617      	mov	r7, r2
 800d376:	4605      	mov	r5, r0
 800d378:	f001 fce2 	bl	800ed40 <ucdr_check_buffer_available_for>
 800d37c:	b9e0      	cbnz	r0, 800d3b8 <ucdr_serialize_array_uint8_t+0x4c>
 800d37e:	463e      	mov	r6, r7
 800d380:	e00b      	b.n	800d39a <ucdr_serialize_array_uint8_t+0x2e>
 800d382:	4441      	add	r1, r8
 800d384:	68a8      	ldr	r0, [r5, #8]
 800d386:	4622      	mov	r2, r4
 800d388:	1b36      	subs	r6, r6, r4
 800d38a:	f00d fa5c 	bl	801a846 <memcpy>
 800d38e:	68ab      	ldr	r3, [r5, #8]
 800d390:	6928      	ldr	r0, [r5, #16]
 800d392:	4423      	add	r3, r4
 800d394:	4420      	add	r0, r4
 800d396:	60ab      	str	r3, [r5, #8]
 800d398:	6128      	str	r0, [r5, #16]
 800d39a:	4631      	mov	r1, r6
 800d39c:	2201      	movs	r2, #1
 800d39e:	4628      	mov	r0, r5
 800d3a0:	f001 fd58 	bl	800ee54 <ucdr_check_final_buffer_behavior_array>
 800d3a4:	1bb9      	subs	r1, r7, r6
 800d3a6:	4604      	mov	r4, r0
 800d3a8:	2800      	cmp	r0, #0
 800d3aa:	d1ea      	bne.n	800d382 <ucdr_serialize_array_uint8_t+0x16>
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	7da8      	ldrb	r0, [r5, #22]
 800d3b0:	756b      	strb	r3, [r5, #21]
 800d3b2:	4058      	eors	r0, r3
 800d3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3b8:	463a      	mov	r2, r7
 800d3ba:	4641      	mov	r1, r8
 800d3bc:	68a8      	ldr	r0, [r5, #8]
 800d3be:	f00d fa42 	bl	801a846 <memcpy>
 800d3c2:	68aa      	ldr	r2, [r5, #8]
 800d3c4:	692b      	ldr	r3, [r5, #16]
 800d3c6:	443a      	add	r2, r7
 800d3c8:	443b      	add	r3, r7
 800d3ca:	60aa      	str	r2, [r5, #8]
 800d3cc:	612b      	str	r3, [r5, #16]
 800d3ce:	e7ed      	b.n	800d3ac <ucdr_serialize_array_uint8_t+0x40>

0800d3d0 <ucdr_serialize_endian_array_uint8_t>:
 800d3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	461f      	mov	r7, r3
 800d3d8:	4605      	mov	r5, r0
 800d3da:	4690      	mov	r8, r2
 800d3dc:	f001 fcb0 	bl	800ed40 <ucdr_check_buffer_available_for>
 800d3e0:	b9e0      	cbnz	r0, 800d41c <ucdr_serialize_endian_array_uint8_t+0x4c>
 800d3e2:	463e      	mov	r6, r7
 800d3e4:	e00b      	b.n	800d3fe <ucdr_serialize_endian_array_uint8_t+0x2e>
 800d3e6:	4441      	add	r1, r8
 800d3e8:	68a8      	ldr	r0, [r5, #8]
 800d3ea:	4622      	mov	r2, r4
 800d3ec:	1b36      	subs	r6, r6, r4
 800d3ee:	f00d fa2a 	bl	801a846 <memcpy>
 800d3f2:	68ab      	ldr	r3, [r5, #8]
 800d3f4:	6928      	ldr	r0, [r5, #16]
 800d3f6:	4423      	add	r3, r4
 800d3f8:	4420      	add	r0, r4
 800d3fa:	60ab      	str	r3, [r5, #8]
 800d3fc:	6128      	str	r0, [r5, #16]
 800d3fe:	4631      	mov	r1, r6
 800d400:	2201      	movs	r2, #1
 800d402:	4628      	mov	r0, r5
 800d404:	f001 fd26 	bl	800ee54 <ucdr_check_final_buffer_behavior_array>
 800d408:	1bb9      	subs	r1, r7, r6
 800d40a:	4604      	mov	r4, r0
 800d40c:	2800      	cmp	r0, #0
 800d40e:	d1ea      	bne.n	800d3e6 <ucdr_serialize_endian_array_uint8_t+0x16>
 800d410:	2301      	movs	r3, #1
 800d412:	7da8      	ldrb	r0, [r5, #22]
 800d414:	756b      	strb	r3, [r5, #21]
 800d416:	4058      	eors	r0, r3
 800d418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d41c:	463a      	mov	r2, r7
 800d41e:	4641      	mov	r1, r8
 800d420:	68a8      	ldr	r0, [r5, #8]
 800d422:	f00d fa10 	bl	801a846 <memcpy>
 800d426:	68aa      	ldr	r2, [r5, #8]
 800d428:	692b      	ldr	r3, [r5, #16]
 800d42a:	443a      	add	r2, r7
 800d42c:	443b      	add	r3, r7
 800d42e:	60aa      	str	r2, [r5, #8]
 800d430:	612b      	str	r3, [r5, #16]
 800d432:	e7ed      	b.n	800d410 <ucdr_serialize_endian_array_uint8_t+0x40>

0800d434 <ucdr_deserialize_array_uint8_t>:
 800d434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d438:	4688      	mov	r8, r1
 800d43a:	4611      	mov	r1, r2
 800d43c:	4617      	mov	r7, r2
 800d43e:	4605      	mov	r5, r0
 800d440:	f001 fc7e 	bl	800ed40 <ucdr_check_buffer_available_for>
 800d444:	b9e8      	cbnz	r0, 800d482 <ucdr_deserialize_array_uint8_t+0x4e>
 800d446:	463e      	mov	r6, r7
 800d448:	e00c      	b.n	800d464 <ucdr_deserialize_array_uint8_t+0x30>
 800d44a:	eb08 0003 	add.w	r0, r8, r3
 800d44e:	68a9      	ldr	r1, [r5, #8]
 800d450:	4622      	mov	r2, r4
 800d452:	1b36      	subs	r6, r6, r4
 800d454:	f00d f9f7 	bl	801a846 <memcpy>
 800d458:	68ab      	ldr	r3, [r5, #8]
 800d45a:	6928      	ldr	r0, [r5, #16]
 800d45c:	4423      	add	r3, r4
 800d45e:	4420      	add	r0, r4
 800d460:	60ab      	str	r3, [r5, #8]
 800d462:	6128      	str	r0, [r5, #16]
 800d464:	4631      	mov	r1, r6
 800d466:	2201      	movs	r2, #1
 800d468:	4628      	mov	r0, r5
 800d46a:	f001 fcf3 	bl	800ee54 <ucdr_check_final_buffer_behavior_array>
 800d46e:	1bbb      	subs	r3, r7, r6
 800d470:	4604      	mov	r4, r0
 800d472:	2800      	cmp	r0, #0
 800d474:	d1e9      	bne.n	800d44a <ucdr_deserialize_array_uint8_t+0x16>
 800d476:	2301      	movs	r3, #1
 800d478:	7da8      	ldrb	r0, [r5, #22]
 800d47a:	756b      	strb	r3, [r5, #21]
 800d47c:	4058      	eors	r0, r3
 800d47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d482:	463a      	mov	r2, r7
 800d484:	68a9      	ldr	r1, [r5, #8]
 800d486:	4640      	mov	r0, r8
 800d488:	f00d f9dd 	bl	801a846 <memcpy>
 800d48c:	68aa      	ldr	r2, [r5, #8]
 800d48e:	692b      	ldr	r3, [r5, #16]
 800d490:	443a      	add	r2, r7
 800d492:	443b      	add	r3, r7
 800d494:	60aa      	str	r2, [r5, #8]
 800d496:	612b      	str	r3, [r5, #16]
 800d498:	e7ed      	b.n	800d476 <ucdr_deserialize_array_uint8_t+0x42>
 800d49a:	bf00      	nop

0800d49c <ucdr_deserialize_endian_array_uint8_t>:
 800d49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	461f      	mov	r7, r3
 800d4a4:	4605      	mov	r5, r0
 800d4a6:	4690      	mov	r8, r2
 800d4a8:	f001 fc4a 	bl	800ed40 <ucdr_check_buffer_available_for>
 800d4ac:	b9e8      	cbnz	r0, 800d4ea <ucdr_deserialize_endian_array_uint8_t+0x4e>
 800d4ae:	463e      	mov	r6, r7
 800d4b0:	e00c      	b.n	800d4cc <ucdr_deserialize_endian_array_uint8_t+0x30>
 800d4b2:	eb08 0003 	add.w	r0, r8, r3
 800d4b6:	68a9      	ldr	r1, [r5, #8]
 800d4b8:	4622      	mov	r2, r4
 800d4ba:	1b36      	subs	r6, r6, r4
 800d4bc:	f00d f9c3 	bl	801a846 <memcpy>
 800d4c0:	68ab      	ldr	r3, [r5, #8]
 800d4c2:	6928      	ldr	r0, [r5, #16]
 800d4c4:	4423      	add	r3, r4
 800d4c6:	4420      	add	r0, r4
 800d4c8:	60ab      	str	r3, [r5, #8]
 800d4ca:	6128      	str	r0, [r5, #16]
 800d4cc:	4631      	mov	r1, r6
 800d4ce:	2201      	movs	r2, #1
 800d4d0:	4628      	mov	r0, r5
 800d4d2:	f001 fcbf 	bl	800ee54 <ucdr_check_final_buffer_behavior_array>
 800d4d6:	1bbb      	subs	r3, r7, r6
 800d4d8:	4604      	mov	r4, r0
 800d4da:	2800      	cmp	r0, #0
 800d4dc:	d1e9      	bne.n	800d4b2 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800d4de:	2301      	movs	r3, #1
 800d4e0:	7da8      	ldrb	r0, [r5, #22]
 800d4e2:	756b      	strb	r3, [r5, #21]
 800d4e4:	4058      	eors	r0, r3
 800d4e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4ea:	463a      	mov	r2, r7
 800d4ec:	68a9      	ldr	r1, [r5, #8]
 800d4ee:	4640      	mov	r0, r8
 800d4f0:	f00d f9a9 	bl	801a846 <memcpy>
 800d4f4:	68aa      	ldr	r2, [r5, #8]
 800d4f6:	692b      	ldr	r3, [r5, #16]
 800d4f8:	443a      	add	r2, r7
 800d4fa:	443b      	add	r3, r7
 800d4fc:	60aa      	str	r2, [r5, #8]
 800d4fe:	612b      	str	r3, [r5, #16]
 800d500:	e7ed      	b.n	800d4de <ucdr_deserialize_endian_array_uint8_t+0x42>
 800d502:	bf00      	nop

0800d504 <ucdr_serialize_endian_array_int32_t>:
 800d504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d508:	4604      	mov	r4, r0
 800d50a:	4688      	mov	r8, r1
 800d50c:	2104      	movs	r1, #4
 800d50e:	4616      	mov	r6, r2
 800d510:	461f      	mov	r7, r3
 800d512:	f001 fc75 	bl	800ee00 <ucdr_buffer_alignment>
 800d516:	4601      	mov	r1, r0
 800d518:	4620      	mov	r0, r4
 800d51a:	7d65      	ldrb	r5, [r4, #21]
 800d51c:	f001 fcb8 	bl	800ee90 <ucdr_advance_buffer>
 800d520:	f1b8 0f01 	cmp.w	r8, #1
 800d524:	7565      	strb	r5, [r4, #21]
 800d526:	d010      	beq.n	800d54a <ucdr_serialize_endian_array_int32_t+0x46>
 800d528:	b157      	cbz	r7, 800d540 <ucdr_serialize_endian_array_int32_t+0x3c>
 800d52a:	3e04      	subs	r6, #4
 800d52c:	2500      	movs	r5, #0
 800d52e:	3501      	adds	r5, #1
 800d530:	f856 2f04 	ldr.w	r2, [r6, #4]!
 800d534:	4641      	mov	r1, r8
 800d536:	4620      	mov	r0, r4
 800d538:	f000 ff86 	bl	800e448 <ucdr_serialize_endian_int32_t>
 800d53c:	42af      	cmp	r7, r5
 800d53e:	d1f6      	bne.n	800d52e <ucdr_serialize_endian_array_int32_t+0x2a>
 800d540:	7da0      	ldrb	r0, [r4, #22]
 800d542:	f080 0001 	eor.w	r0, r0, #1
 800d546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d54a:	00bf      	lsls	r7, r7, #2
 800d54c:	4620      	mov	r0, r4
 800d54e:	4639      	mov	r1, r7
 800d550:	f001 fbf6 	bl	800ed40 <ucdr_check_buffer_available_for>
 800d554:	b9f8      	cbnz	r0, 800d596 <ucdr_serialize_endian_array_int32_t+0x92>
 800d556:	46b8      	mov	r8, r7
 800d558:	e00c      	b.n	800d574 <ucdr_serialize_endian_array_int32_t+0x70>
 800d55a:	462a      	mov	r2, r5
 800d55c:	4431      	add	r1, r6
 800d55e:	68a0      	ldr	r0, [r4, #8]
 800d560:	eba8 0805 	sub.w	r8, r8, r5
 800d564:	f00d f96f 	bl	801a846 <memcpy>
 800d568:	68a2      	ldr	r2, [r4, #8]
 800d56a:	6923      	ldr	r3, [r4, #16]
 800d56c:	442a      	add	r2, r5
 800d56e:	442b      	add	r3, r5
 800d570:	60a2      	str	r2, [r4, #8]
 800d572:	6123      	str	r3, [r4, #16]
 800d574:	4641      	mov	r1, r8
 800d576:	2204      	movs	r2, #4
 800d578:	4620      	mov	r0, r4
 800d57a:	f001 fc6b 	bl	800ee54 <ucdr_check_final_buffer_behavior_array>
 800d57e:	eba7 0108 	sub.w	r1, r7, r8
 800d582:	4605      	mov	r5, r0
 800d584:	2800      	cmp	r0, #0
 800d586:	d1e8      	bne.n	800d55a <ucdr_serialize_endian_array_int32_t+0x56>
 800d588:	2304      	movs	r3, #4
 800d58a:	7da0      	ldrb	r0, [r4, #22]
 800d58c:	7563      	strb	r3, [r4, #21]
 800d58e:	f080 0001 	eor.w	r0, r0, #1
 800d592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d596:	463a      	mov	r2, r7
 800d598:	4631      	mov	r1, r6
 800d59a:	68a0      	ldr	r0, [r4, #8]
 800d59c:	f00d f953 	bl	801a846 <memcpy>
 800d5a0:	68a2      	ldr	r2, [r4, #8]
 800d5a2:	6923      	ldr	r3, [r4, #16]
 800d5a4:	443a      	add	r2, r7
 800d5a6:	441f      	add	r7, r3
 800d5a8:	60a2      	str	r2, [r4, #8]
 800d5aa:	6127      	str	r7, [r4, #16]
 800d5ac:	e7ec      	b.n	800d588 <ucdr_serialize_endian_array_int32_t+0x84>
 800d5ae:	bf00      	nop

0800d5b0 <ucdr_deserialize_endian_array_int32_t>:
 800d5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b4:	4605      	mov	r5, r0
 800d5b6:	4688      	mov	r8, r1
 800d5b8:	2104      	movs	r1, #4
 800d5ba:	4614      	mov	r4, r2
 800d5bc:	461f      	mov	r7, r3
 800d5be:	f001 fc1f 	bl	800ee00 <ucdr_buffer_alignment>
 800d5c2:	4601      	mov	r1, r0
 800d5c4:	4628      	mov	r0, r5
 800d5c6:	7d6e      	ldrb	r6, [r5, #21]
 800d5c8:	f001 fc62 	bl	800ee90 <ucdr_advance_buffer>
 800d5cc:	f1b8 0f01 	cmp.w	r8, #1
 800d5d0:	756e      	strb	r6, [r5, #21]
 800d5d2:	d010      	beq.n	800d5f6 <ucdr_deserialize_endian_array_int32_t+0x46>
 800d5d4:	b157      	cbz	r7, 800d5ec <ucdr_deserialize_endian_array_int32_t+0x3c>
 800d5d6:	2600      	movs	r6, #0
 800d5d8:	3601      	adds	r6, #1
 800d5da:	4622      	mov	r2, r4
 800d5dc:	4641      	mov	r1, r8
 800d5de:	4628      	mov	r0, r5
 800d5e0:	f001 f85a 	bl	800e698 <ucdr_deserialize_endian_int32_t>
 800d5e4:	42b7      	cmp	r7, r6
 800d5e6:	f104 0404 	add.w	r4, r4, #4
 800d5ea:	d1f5      	bne.n	800d5d8 <ucdr_deserialize_endian_array_int32_t+0x28>
 800d5ec:	7da8      	ldrb	r0, [r5, #22]
 800d5ee:	f080 0001 	eor.w	r0, r0, #1
 800d5f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5f6:	00bf      	lsls	r7, r7, #2
 800d5f8:	4628      	mov	r0, r5
 800d5fa:	4639      	mov	r1, r7
 800d5fc:	f001 fba0 	bl	800ed40 <ucdr_check_buffer_available_for>
 800d600:	b9f8      	cbnz	r0, 800d642 <ucdr_deserialize_endian_array_int32_t+0x92>
 800d602:	46b8      	mov	r8, r7
 800d604:	e00c      	b.n	800d620 <ucdr_deserialize_endian_array_int32_t+0x70>
 800d606:	18e0      	adds	r0, r4, r3
 800d608:	4632      	mov	r2, r6
 800d60a:	68a9      	ldr	r1, [r5, #8]
 800d60c:	eba8 0806 	sub.w	r8, r8, r6
 800d610:	f00d f919 	bl	801a846 <memcpy>
 800d614:	68aa      	ldr	r2, [r5, #8]
 800d616:	692b      	ldr	r3, [r5, #16]
 800d618:	4432      	add	r2, r6
 800d61a:	4433      	add	r3, r6
 800d61c:	60aa      	str	r2, [r5, #8]
 800d61e:	612b      	str	r3, [r5, #16]
 800d620:	4641      	mov	r1, r8
 800d622:	2204      	movs	r2, #4
 800d624:	4628      	mov	r0, r5
 800d626:	f001 fc15 	bl	800ee54 <ucdr_check_final_buffer_behavior_array>
 800d62a:	eba7 0308 	sub.w	r3, r7, r8
 800d62e:	4606      	mov	r6, r0
 800d630:	2800      	cmp	r0, #0
 800d632:	d1e8      	bne.n	800d606 <ucdr_deserialize_endian_array_int32_t+0x56>
 800d634:	2304      	movs	r3, #4
 800d636:	7da8      	ldrb	r0, [r5, #22]
 800d638:	756b      	strb	r3, [r5, #21]
 800d63a:	f080 0001 	eor.w	r0, r0, #1
 800d63e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d642:	463a      	mov	r2, r7
 800d644:	68a9      	ldr	r1, [r5, #8]
 800d646:	4620      	mov	r0, r4
 800d648:	f00d f8fd 	bl	801a846 <memcpy>
 800d64c:	68aa      	ldr	r2, [r5, #8]
 800d64e:	692b      	ldr	r3, [r5, #16]
 800d650:	443a      	add	r2, r7
 800d652:	441f      	add	r7, r3
 800d654:	60aa      	str	r2, [r5, #8]
 800d656:	612f      	str	r7, [r5, #16]
 800d658:	e7ec      	b.n	800d634 <ucdr_deserialize_endian_array_int32_t+0x84>
 800d65a:	bf00      	nop

0800d65c <ucdr_serialize_bool>:
 800d65c:	b538      	push	{r3, r4, r5, lr}
 800d65e:	460d      	mov	r5, r1
 800d660:	2101      	movs	r1, #1
 800d662:	4604      	mov	r4, r0
 800d664:	f001 fb78 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800d668:	b148      	cbz	r0, 800d67e <ucdr_serialize_bool+0x22>
 800d66a:	68a3      	ldr	r3, [r4, #8]
 800d66c:	2101      	movs	r1, #1
 800d66e:	701d      	strb	r5, [r3, #0]
 800d670:	68a2      	ldr	r2, [r4, #8]
 800d672:	6923      	ldr	r3, [r4, #16]
 800d674:	440a      	add	r2, r1
 800d676:	7561      	strb	r1, [r4, #21]
 800d678:	440b      	add	r3, r1
 800d67a:	60a2      	str	r2, [r4, #8]
 800d67c:	6123      	str	r3, [r4, #16]
 800d67e:	7da0      	ldrb	r0, [r4, #22]
 800d680:	f080 0001 	eor.w	r0, r0, #1
 800d684:	bd38      	pop	{r3, r4, r5, pc}
 800d686:	bf00      	nop

0800d688 <ucdr_deserialize_bool>:
 800d688:	b538      	push	{r3, r4, r5, lr}
 800d68a:	460d      	mov	r5, r1
 800d68c:	2101      	movs	r1, #1
 800d68e:	4604      	mov	r4, r0
 800d690:	f001 fb62 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800d694:	b160      	cbz	r0, 800d6b0 <ucdr_deserialize_bool+0x28>
 800d696:	68a2      	ldr	r2, [r4, #8]
 800d698:	2101      	movs	r1, #1
 800d69a:	6923      	ldr	r3, [r4, #16]
 800d69c:	f812 0b01 	ldrb.w	r0, [r2], #1
 800d6a0:	440b      	add	r3, r1
 800d6a2:	3800      	subs	r0, #0
 800d6a4:	bf18      	it	ne
 800d6a6:	2001      	movne	r0, #1
 800d6a8:	7028      	strb	r0, [r5, #0]
 800d6aa:	60a2      	str	r2, [r4, #8]
 800d6ac:	6123      	str	r3, [r4, #16]
 800d6ae:	7561      	strb	r1, [r4, #21]
 800d6b0:	7da0      	ldrb	r0, [r4, #22]
 800d6b2:	f080 0001 	eor.w	r0, r0, #1
 800d6b6:	bd38      	pop	{r3, r4, r5, pc}

0800d6b8 <ucdr_serialize_uint8_t>:
 800d6b8:	b538      	push	{r3, r4, r5, lr}
 800d6ba:	460d      	mov	r5, r1
 800d6bc:	2101      	movs	r1, #1
 800d6be:	4604      	mov	r4, r0
 800d6c0:	f001 fb4a 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800d6c4:	b148      	cbz	r0, 800d6da <ucdr_serialize_uint8_t+0x22>
 800d6c6:	68a3      	ldr	r3, [r4, #8]
 800d6c8:	2101      	movs	r1, #1
 800d6ca:	701d      	strb	r5, [r3, #0]
 800d6cc:	68a2      	ldr	r2, [r4, #8]
 800d6ce:	6923      	ldr	r3, [r4, #16]
 800d6d0:	440a      	add	r2, r1
 800d6d2:	7561      	strb	r1, [r4, #21]
 800d6d4:	440b      	add	r3, r1
 800d6d6:	60a2      	str	r2, [r4, #8]
 800d6d8:	6123      	str	r3, [r4, #16]
 800d6da:	7da0      	ldrb	r0, [r4, #22]
 800d6dc:	f080 0001 	eor.w	r0, r0, #1
 800d6e0:	bd38      	pop	{r3, r4, r5, pc}
 800d6e2:	bf00      	nop

0800d6e4 <ucdr_deserialize_uint8_t>:
 800d6e4:	b538      	push	{r3, r4, r5, lr}
 800d6e6:	460d      	mov	r5, r1
 800d6e8:	2101      	movs	r1, #1
 800d6ea:	4604      	mov	r4, r0
 800d6ec:	f001 fb34 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800d6f0:	b150      	cbz	r0, 800d708 <ucdr_deserialize_uint8_t+0x24>
 800d6f2:	68a3      	ldr	r3, [r4, #8]
 800d6f4:	2101      	movs	r1, #1
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	702b      	strb	r3, [r5, #0]
 800d6fa:	68a2      	ldr	r2, [r4, #8]
 800d6fc:	6923      	ldr	r3, [r4, #16]
 800d6fe:	440a      	add	r2, r1
 800d700:	7561      	strb	r1, [r4, #21]
 800d702:	440b      	add	r3, r1
 800d704:	60a2      	str	r2, [r4, #8]
 800d706:	6123      	str	r3, [r4, #16]
 800d708:	7da0      	ldrb	r0, [r4, #22]
 800d70a:	f080 0001 	eor.w	r0, r0, #1
 800d70e:	bd38      	pop	{r3, r4, r5, pc}

0800d710 <ucdr_serialize_uint16_t>:
 800d710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d714:	460b      	mov	r3, r1
 800d716:	b082      	sub	sp, #8
 800d718:	4604      	mov	r4, r0
 800d71a:	2102      	movs	r1, #2
 800d71c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d720:	f001 fb6e 	bl	800ee00 <ucdr_buffer_alignment>
 800d724:	4601      	mov	r1, r0
 800d726:	4620      	mov	r0, r4
 800d728:	7d67      	ldrb	r7, [r4, #21]
 800d72a:	f001 fbb1 	bl	800ee90 <ucdr_advance_buffer>
 800d72e:	2102      	movs	r1, #2
 800d730:	4620      	mov	r0, r4
 800d732:	f001 fb05 	bl	800ed40 <ucdr_check_buffer_available_for>
 800d736:	bb78      	cbnz	r0, 800d798 <ucdr_serialize_uint16_t+0x88>
 800d738:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d73c:	42ab      	cmp	r3, r5
 800d73e:	d926      	bls.n	800d78e <ucdr_serialize_uint16_t+0x7e>
 800d740:	1b5e      	subs	r6, r3, r5
 800d742:	60a3      	str	r3, [r4, #8]
 800d744:	6923      	ldr	r3, [r4, #16]
 800d746:	4620      	mov	r0, r4
 800d748:	f1c6 0802 	rsb	r8, r6, #2
 800d74c:	4433      	add	r3, r6
 800d74e:	4641      	mov	r1, r8
 800d750:	6123      	str	r3, [r4, #16]
 800d752:	f001 fb01 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800d756:	2800      	cmp	r0, #0
 800d758:	d03b      	beq.n	800d7d2 <ucdr_serialize_uint16_t+0xc2>
 800d75a:	7d23      	ldrb	r3, [r4, #20]
 800d75c:	2b01      	cmp	r3, #1
 800d75e:	d04a      	beq.n	800d7f6 <ucdr_serialize_uint16_t+0xe6>
 800d760:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d764:	702b      	strb	r3, [r5, #0]
 800d766:	2e00      	cmp	r6, #0
 800d768:	d040      	beq.n	800d7ec <ucdr_serialize_uint16_t+0xdc>
 800d76a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d76e:	706b      	strb	r3, [r5, #1]
 800d770:	6923      	ldr	r3, [r4, #16]
 800d772:	2102      	movs	r1, #2
 800d774:	68a2      	ldr	r2, [r4, #8]
 800d776:	3302      	adds	r3, #2
 800d778:	7da0      	ldrb	r0, [r4, #22]
 800d77a:	4442      	add	r2, r8
 800d77c:	7561      	strb	r1, [r4, #21]
 800d77e:	1b9e      	subs	r6, r3, r6
 800d780:	f080 0001 	eor.w	r0, r0, #1
 800d784:	60a2      	str	r2, [r4, #8]
 800d786:	6126      	str	r6, [r4, #16]
 800d788:	b002      	add	sp, #8
 800d78a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d78e:	2102      	movs	r1, #2
 800d790:	4620      	mov	r0, r4
 800d792:	f001 fae1 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800d796:	b190      	cbz	r0, 800d7be <ucdr_serialize_uint16_t+0xae>
 800d798:	7d23      	ldrb	r3, [r4, #20]
 800d79a:	2b01      	cmp	r3, #1
 800d79c:	68a3      	ldr	r3, [r4, #8]
 800d79e:	d014      	beq.n	800d7ca <ucdr_serialize_uint16_t+0xba>
 800d7a0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d7a4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d7a8:	7019      	strb	r1, [r3, #0]
 800d7aa:	68a3      	ldr	r3, [r4, #8]
 800d7ac:	705a      	strb	r2, [r3, #1]
 800d7ae:	2102      	movs	r1, #2
 800d7b0:	68a2      	ldr	r2, [r4, #8]
 800d7b2:	6923      	ldr	r3, [r4, #16]
 800d7b4:	440a      	add	r2, r1
 800d7b6:	7561      	strb	r1, [r4, #21]
 800d7b8:	440b      	add	r3, r1
 800d7ba:	60a2      	str	r2, [r4, #8]
 800d7bc:	6123      	str	r3, [r4, #16]
 800d7be:	7da0      	ldrb	r0, [r4, #22]
 800d7c0:	f080 0001 	eor.w	r0, r0, #1
 800d7c4:	b002      	add	sp, #8
 800d7c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7ca:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d7ce:	801a      	strh	r2, [r3, #0]
 800d7d0:	e7ed      	b.n	800d7ae <ucdr_serialize_uint16_t+0x9e>
 800d7d2:	68a2      	ldr	r2, [r4, #8]
 800d7d4:	6923      	ldr	r3, [r4, #16]
 800d7d6:	7da0      	ldrb	r0, [r4, #22]
 800d7d8:	1b92      	subs	r2, r2, r6
 800d7da:	1b9b      	subs	r3, r3, r6
 800d7dc:	7567      	strb	r7, [r4, #21]
 800d7de:	f080 0001 	eor.w	r0, r0, #1
 800d7e2:	60a2      	str	r2, [r4, #8]
 800d7e4:	6123      	str	r3, [r4, #16]
 800d7e6:	b002      	add	sp, #8
 800d7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7ec:	68a3      	ldr	r3, [r4, #8]
 800d7ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d7f2:	701a      	strb	r2, [r3, #0]
 800d7f4:	e7bc      	b.n	800d770 <ucdr_serialize_uint16_t+0x60>
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	f10d 0506 	add.w	r5, sp, #6
 800d7fc:	4632      	mov	r2, r6
 800d7fe:	4629      	mov	r1, r5
 800d800:	f00d f821 	bl	801a846 <memcpy>
 800d804:	4642      	mov	r2, r8
 800d806:	19a9      	adds	r1, r5, r6
 800d808:	68a0      	ldr	r0, [r4, #8]
 800d80a:	f00d f81c 	bl	801a846 <memcpy>
 800d80e:	e7af      	b.n	800d770 <ucdr_serialize_uint16_t+0x60>

0800d810 <ucdr_serialize_endian_uint16_t>:
 800d810:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d814:	4604      	mov	r4, r0
 800d816:	b083      	sub	sp, #12
 800d818:	460d      	mov	r5, r1
 800d81a:	2102      	movs	r1, #2
 800d81c:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d820:	f001 faee 	bl	800ee00 <ucdr_buffer_alignment>
 800d824:	4601      	mov	r1, r0
 800d826:	4620      	mov	r0, r4
 800d828:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d82c:	f001 fb30 	bl	800ee90 <ucdr_advance_buffer>
 800d830:	2102      	movs	r1, #2
 800d832:	4620      	mov	r0, r4
 800d834:	f001 fa84 	bl	800ed40 <ucdr_check_buffer_available_for>
 800d838:	bb70      	cbnz	r0, 800d898 <ucdr_serialize_endian_uint16_t+0x88>
 800d83a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d83e:	42be      	cmp	r6, r7
 800d840:	d925      	bls.n	800d88e <ucdr_serialize_endian_uint16_t+0x7e>
 800d842:	6923      	ldr	r3, [r4, #16]
 800d844:	4620      	mov	r0, r4
 800d846:	60a6      	str	r6, [r4, #8]
 800d848:	1bf6      	subs	r6, r6, r7
 800d84a:	4433      	add	r3, r6
 800d84c:	f1c6 0902 	rsb	r9, r6, #2
 800d850:	6123      	str	r3, [r4, #16]
 800d852:	4649      	mov	r1, r9
 800d854:	f001 fa80 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800d858:	2800      	cmp	r0, #0
 800d85a:	d039      	beq.n	800d8d0 <ucdr_serialize_endian_uint16_t+0xc0>
 800d85c:	2d01      	cmp	r5, #1
 800d85e:	d04a      	beq.n	800d8f6 <ucdr_serialize_endian_uint16_t+0xe6>
 800d860:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d864:	703b      	strb	r3, [r7, #0]
 800d866:	2e00      	cmp	r6, #0
 800d868:	d040      	beq.n	800d8ec <ucdr_serialize_endian_uint16_t+0xdc>
 800d86a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d86e:	707b      	strb	r3, [r7, #1]
 800d870:	6923      	ldr	r3, [r4, #16]
 800d872:	2102      	movs	r1, #2
 800d874:	68a2      	ldr	r2, [r4, #8]
 800d876:	7da0      	ldrb	r0, [r4, #22]
 800d878:	3302      	adds	r3, #2
 800d87a:	444a      	add	r2, r9
 800d87c:	7561      	strb	r1, [r4, #21]
 800d87e:	1b9b      	subs	r3, r3, r6
 800d880:	f080 0001 	eor.w	r0, r0, #1
 800d884:	60a2      	str	r2, [r4, #8]
 800d886:	6123      	str	r3, [r4, #16]
 800d888:	b003      	add	sp, #12
 800d88a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d88e:	2102      	movs	r1, #2
 800d890:	4620      	mov	r0, r4
 800d892:	f001 fa61 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800d896:	b188      	cbz	r0, 800d8bc <ucdr_serialize_endian_uint16_t+0xac>
 800d898:	2d01      	cmp	r5, #1
 800d89a:	68a3      	ldr	r3, [r4, #8]
 800d89c:	d014      	beq.n	800d8c8 <ucdr_serialize_endian_uint16_t+0xb8>
 800d89e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d8a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d8a6:	7019      	strb	r1, [r3, #0]
 800d8a8:	68a3      	ldr	r3, [r4, #8]
 800d8aa:	705a      	strb	r2, [r3, #1]
 800d8ac:	2102      	movs	r1, #2
 800d8ae:	68a2      	ldr	r2, [r4, #8]
 800d8b0:	6923      	ldr	r3, [r4, #16]
 800d8b2:	440a      	add	r2, r1
 800d8b4:	7561      	strb	r1, [r4, #21]
 800d8b6:	440b      	add	r3, r1
 800d8b8:	60a2      	str	r2, [r4, #8]
 800d8ba:	6123      	str	r3, [r4, #16]
 800d8bc:	7da0      	ldrb	r0, [r4, #22]
 800d8be:	f080 0001 	eor.w	r0, r0, #1
 800d8c2:	b003      	add	sp, #12
 800d8c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8c8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d8cc:	801a      	strh	r2, [r3, #0]
 800d8ce:	e7ed      	b.n	800d8ac <ucdr_serialize_endian_uint16_t+0x9c>
 800d8d0:	68a2      	ldr	r2, [r4, #8]
 800d8d2:	6923      	ldr	r3, [r4, #16]
 800d8d4:	7da0      	ldrb	r0, [r4, #22]
 800d8d6:	1b92      	subs	r2, r2, r6
 800d8d8:	1b9b      	subs	r3, r3, r6
 800d8da:	f884 8015 	strb.w	r8, [r4, #21]
 800d8de:	f080 0001 	eor.w	r0, r0, #1
 800d8e2:	60a2      	str	r2, [r4, #8]
 800d8e4:	6123      	str	r3, [r4, #16]
 800d8e6:	b003      	add	sp, #12
 800d8e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d8ec:	68a3      	ldr	r3, [r4, #8]
 800d8ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d8f2:	701a      	strb	r2, [r3, #0]
 800d8f4:	e7bc      	b.n	800d870 <ucdr_serialize_endian_uint16_t+0x60>
 800d8f6:	f10d 0506 	add.w	r5, sp, #6
 800d8fa:	4632      	mov	r2, r6
 800d8fc:	4638      	mov	r0, r7
 800d8fe:	4629      	mov	r1, r5
 800d900:	f00c ffa1 	bl	801a846 <memcpy>
 800d904:	464a      	mov	r2, r9
 800d906:	19a9      	adds	r1, r5, r6
 800d908:	68a0      	ldr	r0, [r4, #8]
 800d90a:	f00c ff9c 	bl	801a846 <memcpy>
 800d90e:	e7af      	b.n	800d870 <ucdr_serialize_endian_uint16_t+0x60>

0800d910 <ucdr_deserialize_uint16_t>:
 800d910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d914:	4604      	mov	r4, r0
 800d916:	460d      	mov	r5, r1
 800d918:	2102      	movs	r1, #2
 800d91a:	f001 fa71 	bl	800ee00 <ucdr_buffer_alignment>
 800d91e:	4601      	mov	r1, r0
 800d920:	4620      	mov	r0, r4
 800d922:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d926:	f001 fab3 	bl	800ee90 <ucdr_advance_buffer>
 800d92a:	2102      	movs	r1, #2
 800d92c:	4620      	mov	r0, r4
 800d92e:	f001 fa07 	bl	800ed40 <ucdr_check_buffer_available_for>
 800d932:	bb60      	cbnz	r0, 800d98e <ucdr_deserialize_uint16_t+0x7e>
 800d934:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d938:	42be      	cmp	r6, r7
 800d93a:	d923      	bls.n	800d984 <ucdr_deserialize_uint16_t+0x74>
 800d93c:	6923      	ldr	r3, [r4, #16]
 800d93e:	4620      	mov	r0, r4
 800d940:	60a6      	str	r6, [r4, #8]
 800d942:	1bf6      	subs	r6, r6, r7
 800d944:	4433      	add	r3, r6
 800d946:	f1c6 0902 	rsb	r9, r6, #2
 800d94a:	6123      	str	r3, [r4, #16]
 800d94c:	4649      	mov	r1, r9
 800d94e:	f001 fa03 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800d952:	2800      	cmp	r0, #0
 800d954:	d034      	beq.n	800d9c0 <ucdr_deserialize_uint16_t+0xb0>
 800d956:	7d23      	ldrb	r3, [r4, #20]
 800d958:	2b01      	cmp	r3, #1
 800d95a:	d042      	beq.n	800d9e2 <ucdr_deserialize_uint16_t+0xd2>
 800d95c:	787b      	ldrb	r3, [r7, #1]
 800d95e:	702b      	strb	r3, [r5, #0]
 800d960:	2e00      	cmp	r6, #0
 800d962:	d03a      	beq.n	800d9da <ucdr_deserialize_uint16_t+0xca>
 800d964:	783b      	ldrb	r3, [r7, #0]
 800d966:	706b      	strb	r3, [r5, #1]
 800d968:	6923      	ldr	r3, [r4, #16]
 800d96a:	2102      	movs	r1, #2
 800d96c:	68a2      	ldr	r2, [r4, #8]
 800d96e:	3302      	adds	r3, #2
 800d970:	7da0      	ldrb	r0, [r4, #22]
 800d972:	444a      	add	r2, r9
 800d974:	7561      	strb	r1, [r4, #21]
 800d976:	1b9b      	subs	r3, r3, r6
 800d978:	f080 0001 	eor.w	r0, r0, #1
 800d97c:	60a2      	str	r2, [r4, #8]
 800d97e:	6123      	str	r3, [r4, #16]
 800d980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d984:	2102      	movs	r1, #2
 800d986:	4620      	mov	r0, r4
 800d988:	f001 f9e6 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800d98c:	b180      	cbz	r0, 800d9b0 <ucdr_deserialize_uint16_t+0xa0>
 800d98e:	7d23      	ldrb	r3, [r4, #20]
 800d990:	2b01      	cmp	r3, #1
 800d992:	68a3      	ldr	r3, [r4, #8]
 800d994:	d011      	beq.n	800d9ba <ucdr_deserialize_uint16_t+0xaa>
 800d996:	785b      	ldrb	r3, [r3, #1]
 800d998:	702b      	strb	r3, [r5, #0]
 800d99a:	68a3      	ldr	r3, [r4, #8]
 800d99c:	781b      	ldrb	r3, [r3, #0]
 800d99e:	706b      	strb	r3, [r5, #1]
 800d9a0:	2102      	movs	r1, #2
 800d9a2:	68a2      	ldr	r2, [r4, #8]
 800d9a4:	6923      	ldr	r3, [r4, #16]
 800d9a6:	440a      	add	r2, r1
 800d9a8:	7561      	strb	r1, [r4, #21]
 800d9aa:	440b      	add	r3, r1
 800d9ac:	60a2      	str	r2, [r4, #8]
 800d9ae:	6123      	str	r3, [r4, #16]
 800d9b0:	7da0      	ldrb	r0, [r4, #22]
 800d9b2:	f080 0001 	eor.w	r0, r0, #1
 800d9b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9ba:	881b      	ldrh	r3, [r3, #0]
 800d9bc:	802b      	strh	r3, [r5, #0]
 800d9be:	e7ef      	b.n	800d9a0 <ucdr_deserialize_uint16_t+0x90>
 800d9c0:	68a2      	ldr	r2, [r4, #8]
 800d9c2:	6923      	ldr	r3, [r4, #16]
 800d9c4:	1b92      	subs	r2, r2, r6
 800d9c6:	7da0      	ldrb	r0, [r4, #22]
 800d9c8:	1b9b      	subs	r3, r3, r6
 800d9ca:	f884 8015 	strb.w	r8, [r4, #21]
 800d9ce:	f080 0001 	eor.w	r0, r0, #1
 800d9d2:	60a2      	str	r2, [r4, #8]
 800d9d4:	6123      	str	r3, [r4, #16]
 800d9d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9da:	68a3      	ldr	r3, [r4, #8]
 800d9dc:	781b      	ldrb	r3, [r3, #0]
 800d9de:	706b      	strb	r3, [r5, #1]
 800d9e0:	e7c2      	b.n	800d968 <ucdr_deserialize_uint16_t+0x58>
 800d9e2:	4639      	mov	r1, r7
 800d9e4:	4632      	mov	r2, r6
 800d9e6:	4628      	mov	r0, r5
 800d9e8:	f00c ff2d 	bl	801a846 <memcpy>
 800d9ec:	464a      	mov	r2, r9
 800d9ee:	19a8      	adds	r0, r5, r6
 800d9f0:	68a1      	ldr	r1, [r4, #8]
 800d9f2:	f00c ff28 	bl	801a846 <memcpy>
 800d9f6:	e7b7      	b.n	800d968 <ucdr_deserialize_uint16_t+0x58>

0800d9f8 <ucdr_deserialize_endian_uint16_t>:
 800d9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9fc:	4604      	mov	r4, r0
 800d9fe:	460e      	mov	r6, r1
 800da00:	2102      	movs	r1, #2
 800da02:	4615      	mov	r5, r2
 800da04:	f001 f9fc 	bl	800ee00 <ucdr_buffer_alignment>
 800da08:	4601      	mov	r1, r0
 800da0a:	4620      	mov	r0, r4
 800da0c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800da10:	f001 fa3e 	bl	800ee90 <ucdr_advance_buffer>
 800da14:	2102      	movs	r1, #2
 800da16:	4620      	mov	r0, r4
 800da18:	f001 f992 	bl	800ed40 <ucdr_check_buffer_available_for>
 800da1c:	bb70      	cbnz	r0, 800da7c <ucdr_deserialize_endian_uint16_t+0x84>
 800da1e:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800da22:	454f      	cmp	r7, r9
 800da24:	d925      	bls.n	800da72 <ucdr_deserialize_endian_uint16_t+0x7a>
 800da26:	6923      	ldr	r3, [r4, #16]
 800da28:	4620      	mov	r0, r4
 800da2a:	60a7      	str	r7, [r4, #8]
 800da2c:	eba7 0709 	sub.w	r7, r7, r9
 800da30:	443b      	add	r3, r7
 800da32:	f1c7 0a02 	rsb	sl, r7, #2
 800da36:	6123      	str	r3, [r4, #16]
 800da38:	4651      	mov	r1, sl
 800da3a:	f001 f98d 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800da3e:	2800      	cmp	r0, #0
 800da40:	d034      	beq.n	800daac <ucdr_deserialize_endian_uint16_t+0xb4>
 800da42:	2e01      	cmp	r6, #1
 800da44:	d043      	beq.n	800dace <ucdr_deserialize_endian_uint16_t+0xd6>
 800da46:	f899 3001 	ldrb.w	r3, [r9, #1]
 800da4a:	702b      	strb	r3, [r5, #0]
 800da4c:	2f00      	cmp	r7, #0
 800da4e:	d03a      	beq.n	800dac6 <ucdr_deserialize_endian_uint16_t+0xce>
 800da50:	f899 3000 	ldrb.w	r3, [r9]
 800da54:	706b      	strb	r3, [r5, #1]
 800da56:	6923      	ldr	r3, [r4, #16]
 800da58:	2102      	movs	r1, #2
 800da5a:	68a2      	ldr	r2, [r4, #8]
 800da5c:	3302      	adds	r3, #2
 800da5e:	7da0      	ldrb	r0, [r4, #22]
 800da60:	4452      	add	r2, sl
 800da62:	7561      	strb	r1, [r4, #21]
 800da64:	1bdb      	subs	r3, r3, r7
 800da66:	f080 0001 	eor.w	r0, r0, #1
 800da6a:	60a2      	str	r2, [r4, #8]
 800da6c:	6123      	str	r3, [r4, #16]
 800da6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da72:	2102      	movs	r1, #2
 800da74:	4620      	mov	r0, r4
 800da76:	f001 f96f 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800da7a:	b178      	cbz	r0, 800da9c <ucdr_deserialize_endian_uint16_t+0xa4>
 800da7c:	2e01      	cmp	r6, #1
 800da7e:	68a3      	ldr	r3, [r4, #8]
 800da80:	d011      	beq.n	800daa6 <ucdr_deserialize_endian_uint16_t+0xae>
 800da82:	785b      	ldrb	r3, [r3, #1]
 800da84:	702b      	strb	r3, [r5, #0]
 800da86:	68a3      	ldr	r3, [r4, #8]
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	706b      	strb	r3, [r5, #1]
 800da8c:	2102      	movs	r1, #2
 800da8e:	68a2      	ldr	r2, [r4, #8]
 800da90:	6923      	ldr	r3, [r4, #16]
 800da92:	440a      	add	r2, r1
 800da94:	7561      	strb	r1, [r4, #21]
 800da96:	440b      	add	r3, r1
 800da98:	60a2      	str	r2, [r4, #8]
 800da9a:	6123      	str	r3, [r4, #16]
 800da9c:	7da0      	ldrb	r0, [r4, #22]
 800da9e:	f080 0001 	eor.w	r0, r0, #1
 800daa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daa6:	881b      	ldrh	r3, [r3, #0]
 800daa8:	802b      	strh	r3, [r5, #0]
 800daaa:	e7ef      	b.n	800da8c <ucdr_deserialize_endian_uint16_t+0x94>
 800daac:	68a2      	ldr	r2, [r4, #8]
 800daae:	6923      	ldr	r3, [r4, #16]
 800dab0:	1bd2      	subs	r2, r2, r7
 800dab2:	7da0      	ldrb	r0, [r4, #22]
 800dab4:	1bdb      	subs	r3, r3, r7
 800dab6:	f884 8015 	strb.w	r8, [r4, #21]
 800daba:	f080 0001 	eor.w	r0, r0, #1
 800dabe:	60a2      	str	r2, [r4, #8]
 800dac0:	6123      	str	r3, [r4, #16]
 800dac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dac6:	68a3      	ldr	r3, [r4, #8]
 800dac8:	781b      	ldrb	r3, [r3, #0]
 800daca:	706b      	strb	r3, [r5, #1]
 800dacc:	e7c3      	b.n	800da56 <ucdr_deserialize_endian_uint16_t+0x5e>
 800dace:	4649      	mov	r1, r9
 800dad0:	463a      	mov	r2, r7
 800dad2:	4628      	mov	r0, r5
 800dad4:	f00c feb7 	bl	801a846 <memcpy>
 800dad8:	4652      	mov	r2, sl
 800dada:	19e8      	adds	r0, r5, r7
 800dadc:	68a1      	ldr	r1, [r4, #8]
 800dade:	f00c feb2 	bl	801a846 <memcpy>
 800dae2:	e7b8      	b.n	800da56 <ucdr_deserialize_endian_uint16_t+0x5e>

0800dae4 <ucdr_serialize_uint32_t>:
 800dae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dae8:	b082      	sub	sp, #8
 800daea:	4604      	mov	r4, r0
 800daec:	9101      	str	r1, [sp, #4]
 800daee:	2104      	movs	r1, #4
 800daf0:	f001 f986 	bl	800ee00 <ucdr_buffer_alignment>
 800daf4:	4601      	mov	r1, r0
 800daf6:	4620      	mov	r0, r4
 800daf8:	7d67      	ldrb	r7, [r4, #21]
 800dafa:	f001 f9c9 	bl	800ee90 <ucdr_advance_buffer>
 800dafe:	2104      	movs	r1, #4
 800db00:	4620      	mov	r0, r4
 800db02:	f001 f91d 	bl	800ed40 <ucdr_check_buffer_available_for>
 800db06:	2800      	cmp	r0, #0
 800db08:	d139      	bne.n	800db7e <ucdr_serialize_uint32_t+0x9a>
 800db0a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800db0e:	42ab      	cmp	r3, r5
 800db10:	d930      	bls.n	800db74 <ucdr_serialize_uint32_t+0x90>
 800db12:	1b5e      	subs	r6, r3, r5
 800db14:	60a3      	str	r3, [r4, #8]
 800db16:	6923      	ldr	r3, [r4, #16]
 800db18:	4620      	mov	r0, r4
 800db1a:	f1c6 0804 	rsb	r8, r6, #4
 800db1e:	4433      	add	r3, r6
 800db20:	4641      	mov	r1, r8
 800db22:	6123      	str	r3, [r4, #16]
 800db24:	f001 f918 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800db28:	2800      	cmp	r0, #0
 800db2a:	d04c      	beq.n	800dbc6 <ucdr_serialize_uint32_t+0xe2>
 800db2c:	7d23      	ldrb	r3, [r4, #20]
 800db2e:	2b01      	cmp	r3, #1
 800db30:	d063      	beq.n	800dbfa <ucdr_serialize_uint32_t+0x116>
 800db32:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800db36:	702b      	strb	r3, [r5, #0]
 800db38:	2e00      	cmp	r6, #0
 800db3a:	d051      	beq.n	800dbe0 <ucdr_serialize_uint32_t+0xfc>
 800db3c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800db40:	2e01      	cmp	r6, #1
 800db42:	706b      	strb	r3, [r5, #1]
 800db44:	d050      	beq.n	800dbe8 <ucdr_serialize_uint32_t+0x104>
 800db46:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800db4a:	2e02      	cmp	r6, #2
 800db4c:	70ab      	strb	r3, [r5, #2]
 800db4e:	d04f      	beq.n	800dbf0 <ucdr_serialize_uint32_t+0x10c>
 800db50:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800db54:	70eb      	strb	r3, [r5, #3]
 800db56:	6923      	ldr	r3, [r4, #16]
 800db58:	2104      	movs	r1, #4
 800db5a:	68a2      	ldr	r2, [r4, #8]
 800db5c:	3304      	adds	r3, #4
 800db5e:	7da0      	ldrb	r0, [r4, #22]
 800db60:	4442      	add	r2, r8
 800db62:	7561      	strb	r1, [r4, #21]
 800db64:	1b9e      	subs	r6, r3, r6
 800db66:	f080 0001 	eor.w	r0, r0, #1
 800db6a:	60a2      	str	r2, [r4, #8]
 800db6c:	6126      	str	r6, [r4, #16]
 800db6e:	b002      	add	sp, #8
 800db70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db74:	2104      	movs	r1, #4
 800db76:	4620      	mov	r0, r4
 800db78:	f001 f8ee 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800db7c:	b1d0      	cbz	r0, 800dbb4 <ucdr_serialize_uint32_t+0xd0>
 800db7e:	7d23      	ldrb	r3, [r4, #20]
 800db80:	2b01      	cmp	r3, #1
 800db82:	68a3      	ldr	r3, [r4, #8]
 800db84:	d01c      	beq.n	800dbc0 <ucdr_serialize_uint32_t+0xdc>
 800db86:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800db8a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800db8e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800db92:	7018      	strb	r0, [r3, #0]
 800db94:	68a3      	ldr	r3, [r4, #8]
 800db96:	705a      	strb	r2, [r3, #1]
 800db98:	68a3      	ldr	r3, [r4, #8]
 800db9a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800db9e:	7099      	strb	r1, [r3, #2]
 800dba0:	68a3      	ldr	r3, [r4, #8]
 800dba2:	70da      	strb	r2, [r3, #3]
 800dba4:	2104      	movs	r1, #4
 800dba6:	68a2      	ldr	r2, [r4, #8]
 800dba8:	6923      	ldr	r3, [r4, #16]
 800dbaa:	440a      	add	r2, r1
 800dbac:	7561      	strb	r1, [r4, #21]
 800dbae:	440b      	add	r3, r1
 800dbb0:	60a2      	str	r2, [r4, #8]
 800dbb2:	6123      	str	r3, [r4, #16]
 800dbb4:	7da0      	ldrb	r0, [r4, #22]
 800dbb6:	f080 0001 	eor.w	r0, r0, #1
 800dbba:	b002      	add	sp, #8
 800dbbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbc0:	9a01      	ldr	r2, [sp, #4]
 800dbc2:	601a      	str	r2, [r3, #0]
 800dbc4:	e7ee      	b.n	800dba4 <ucdr_serialize_uint32_t+0xc0>
 800dbc6:	68a2      	ldr	r2, [r4, #8]
 800dbc8:	6923      	ldr	r3, [r4, #16]
 800dbca:	7da0      	ldrb	r0, [r4, #22]
 800dbcc:	1b92      	subs	r2, r2, r6
 800dbce:	1b9b      	subs	r3, r3, r6
 800dbd0:	7567      	strb	r7, [r4, #21]
 800dbd2:	f080 0001 	eor.w	r0, r0, #1
 800dbd6:	60a2      	str	r2, [r4, #8]
 800dbd8:	6123      	str	r3, [r4, #16]
 800dbda:	b002      	add	sp, #8
 800dbdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbe0:	68a3      	ldr	r3, [r4, #8]
 800dbe2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dbe6:	701a      	strb	r2, [r3, #0]
 800dbe8:	68a3      	ldr	r3, [r4, #8]
 800dbea:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dbee:	701a      	strb	r2, [r3, #0]
 800dbf0:	68a3      	ldr	r3, [r4, #8]
 800dbf2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dbf6:	701a      	strb	r2, [r3, #0]
 800dbf8:	e7ad      	b.n	800db56 <ucdr_serialize_uint32_t+0x72>
 800dbfa:	4628      	mov	r0, r5
 800dbfc:	ad01      	add	r5, sp, #4
 800dbfe:	4632      	mov	r2, r6
 800dc00:	4629      	mov	r1, r5
 800dc02:	f00c fe20 	bl	801a846 <memcpy>
 800dc06:	4642      	mov	r2, r8
 800dc08:	19a9      	adds	r1, r5, r6
 800dc0a:	68a0      	ldr	r0, [r4, #8]
 800dc0c:	f00c fe1b 	bl	801a846 <memcpy>
 800dc10:	e7a1      	b.n	800db56 <ucdr_serialize_uint32_t+0x72>
 800dc12:	bf00      	nop

0800dc14 <ucdr_serialize_endian_uint32_t>:
 800dc14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc18:	4604      	mov	r4, r0
 800dc1a:	b083      	sub	sp, #12
 800dc1c:	460d      	mov	r5, r1
 800dc1e:	2104      	movs	r1, #4
 800dc20:	9201      	str	r2, [sp, #4]
 800dc22:	f001 f8ed 	bl	800ee00 <ucdr_buffer_alignment>
 800dc26:	4601      	mov	r1, r0
 800dc28:	4620      	mov	r0, r4
 800dc2a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dc2e:	f001 f92f 	bl	800ee90 <ucdr_advance_buffer>
 800dc32:	2104      	movs	r1, #4
 800dc34:	4620      	mov	r0, r4
 800dc36:	f001 f883 	bl	800ed40 <ucdr_check_buffer_available_for>
 800dc3a:	2800      	cmp	r0, #0
 800dc3c:	d138      	bne.n	800dcb0 <ucdr_serialize_endian_uint32_t+0x9c>
 800dc3e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800dc42:	42b7      	cmp	r7, r6
 800dc44:	d92f      	bls.n	800dca6 <ucdr_serialize_endian_uint32_t+0x92>
 800dc46:	6923      	ldr	r3, [r4, #16]
 800dc48:	4620      	mov	r0, r4
 800dc4a:	60a7      	str	r7, [r4, #8]
 800dc4c:	1bbf      	subs	r7, r7, r6
 800dc4e:	443b      	add	r3, r7
 800dc50:	f1c7 0904 	rsb	r9, r7, #4
 800dc54:	6123      	str	r3, [r4, #16]
 800dc56:	4649      	mov	r1, r9
 800dc58:	f001 f87e 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800dc5c:	2800      	cmp	r0, #0
 800dc5e:	d04a      	beq.n	800dcf6 <ucdr_serialize_endian_uint32_t+0xe2>
 800dc60:	2d01      	cmp	r5, #1
 800dc62:	d063      	beq.n	800dd2c <ucdr_serialize_endian_uint32_t+0x118>
 800dc64:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dc68:	7033      	strb	r3, [r6, #0]
 800dc6a:	2f00      	cmp	r7, #0
 800dc6c:	d051      	beq.n	800dd12 <ucdr_serialize_endian_uint32_t+0xfe>
 800dc6e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dc72:	2f01      	cmp	r7, #1
 800dc74:	7073      	strb	r3, [r6, #1]
 800dc76:	d050      	beq.n	800dd1a <ucdr_serialize_endian_uint32_t+0x106>
 800dc78:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dc7c:	2f02      	cmp	r7, #2
 800dc7e:	70b3      	strb	r3, [r6, #2]
 800dc80:	d04f      	beq.n	800dd22 <ucdr_serialize_endian_uint32_t+0x10e>
 800dc82:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800dc86:	70f3      	strb	r3, [r6, #3]
 800dc88:	6923      	ldr	r3, [r4, #16]
 800dc8a:	2104      	movs	r1, #4
 800dc8c:	68a2      	ldr	r2, [r4, #8]
 800dc8e:	7da0      	ldrb	r0, [r4, #22]
 800dc90:	3304      	adds	r3, #4
 800dc92:	444a      	add	r2, r9
 800dc94:	7561      	strb	r1, [r4, #21]
 800dc96:	1bdb      	subs	r3, r3, r7
 800dc98:	f080 0001 	eor.w	r0, r0, #1
 800dc9c:	60a2      	str	r2, [r4, #8]
 800dc9e:	6123      	str	r3, [r4, #16]
 800dca0:	b003      	add	sp, #12
 800dca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dca6:	2104      	movs	r1, #4
 800dca8:	4620      	mov	r0, r4
 800dcaa:	f001 f855 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800dcae:	b1c8      	cbz	r0, 800dce4 <ucdr_serialize_endian_uint32_t+0xd0>
 800dcb0:	2d01      	cmp	r5, #1
 800dcb2:	68a3      	ldr	r3, [r4, #8]
 800dcb4:	d01c      	beq.n	800dcf0 <ucdr_serialize_endian_uint32_t+0xdc>
 800dcb6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800dcba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dcbe:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800dcc2:	7018      	strb	r0, [r3, #0]
 800dcc4:	68a3      	ldr	r3, [r4, #8]
 800dcc6:	705a      	strb	r2, [r3, #1]
 800dcc8:	68a3      	ldr	r3, [r4, #8]
 800dcca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dcce:	7099      	strb	r1, [r3, #2]
 800dcd0:	68a3      	ldr	r3, [r4, #8]
 800dcd2:	70da      	strb	r2, [r3, #3]
 800dcd4:	2104      	movs	r1, #4
 800dcd6:	68a2      	ldr	r2, [r4, #8]
 800dcd8:	6923      	ldr	r3, [r4, #16]
 800dcda:	440a      	add	r2, r1
 800dcdc:	7561      	strb	r1, [r4, #21]
 800dcde:	440b      	add	r3, r1
 800dce0:	60a2      	str	r2, [r4, #8]
 800dce2:	6123      	str	r3, [r4, #16]
 800dce4:	7da0      	ldrb	r0, [r4, #22]
 800dce6:	f080 0001 	eor.w	r0, r0, #1
 800dcea:	b003      	add	sp, #12
 800dcec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dcf0:	9a01      	ldr	r2, [sp, #4]
 800dcf2:	601a      	str	r2, [r3, #0]
 800dcf4:	e7ee      	b.n	800dcd4 <ucdr_serialize_endian_uint32_t+0xc0>
 800dcf6:	68a2      	ldr	r2, [r4, #8]
 800dcf8:	6923      	ldr	r3, [r4, #16]
 800dcfa:	7da0      	ldrb	r0, [r4, #22]
 800dcfc:	1bd2      	subs	r2, r2, r7
 800dcfe:	1bdb      	subs	r3, r3, r7
 800dd00:	f884 8015 	strb.w	r8, [r4, #21]
 800dd04:	f080 0001 	eor.w	r0, r0, #1
 800dd08:	60a2      	str	r2, [r4, #8]
 800dd0a:	6123      	str	r3, [r4, #16]
 800dd0c:	b003      	add	sp, #12
 800dd0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd12:	68a3      	ldr	r3, [r4, #8]
 800dd14:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dd18:	701a      	strb	r2, [r3, #0]
 800dd1a:	68a3      	ldr	r3, [r4, #8]
 800dd1c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800dd20:	701a      	strb	r2, [r3, #0]
 800dd22:	68a3      	ldr	r3, [r4, #8]
 800dd24:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dd28:	701a      	strb	r2, [r3, #0]
 800dd2a:	e7ad      	b.n	800dc88 <ucdr_serialize_endian_uint32_t+0x74>
 800dd2c:	ad01      	add	r5, sp, #4
 800dd2e:	463a      	mov	r2, r7
 800dd30:	4630      	mov	r0, r6
 800dd32:	4629      	mov	r1, r5
 800dd34:	f00c fd87 	bl	801a846 <memcpy>
 800dd38:	464a      	mov	r2, r9
 800dd3a:	19e9      	adds	r1, r5, r7
 800dd3c:	68a0      	ldr	r0, [r4, #8]
 800dd3e:	f00c fd82 	bl	801a846 <memcpy>
 800dd42:	e7a1      	b.n	800dc88 <ucdr_serialize_endian_uint32_t+0x74>

0800dd44 <ucdr_deserialize_uint32_t>:
 800dd44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd48:	4604      	mov	r4, r0
 800dd4a:	460d      	mov	r5, r1
 800dd4c:	2104      	movs	r1, #4
 800dd4e:	f001 f857 	bl	800ee00 <ucdr_buffer_alignment>
 800dd52:	4601      	mov	r1, r0
 800dd54:	4620      	mov	r0, r4
 800dd56:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dd5a:	f001 f899 	bl	800ee90 <ucdr_advance_buffer>
 800dd5e:	2104      	movs	r1, #4
 800dd60:	4620      	mov	r0, r4
 800dd62:	f000 ffed 	bl	800ed40 <ucdr_check_buffer_available_for>
 800dd66:	2800      	cmp	r0, #0
 800dd68:	d138      	bne.n	800dddc <ucdr_deserialize_uint32_t+0x98>
 800dd6a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800dd6e:	42b7      	cmp	r7, r6
 800dd70:	d92f      	bls.n	800ddd2 <ucdr_deserialize_uint32_t+0x8e>
 800dd72:	6923      	ldr	r3, [r4, #16]
 800dd74:	4620      	mov	r0, r4
 800dd76:	60a7      	str	r7, [r4, #8]
 800dd78:	1bbf      	subs	r7, r7, r6
 800dd7a:	443b      	add	r3, r7
 800dd7c:	f1c7 0904 	rsb	r9, r7, #4
 800dd80:	6123      	str	r3, [r4, #16]
 800dd82:	4649      	mov	r1, r9
 800dd84:	f000 ffe8 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800dd88:	2800      	cmp	r0, #0
 800dd8a:	d046      	beq.n	800de1a <ucdr_deserialize_uint32_t+0xd6>
 800dd8c:	7d23      	ldrb	r3, [r4, #20]
 800dd8e:	2b01      	cmp	r3, #1
 800dd90:	d05c      	beq.n	800de4c <ucdr_deserialize_uint32_t+0x108>
 800dd92:	78f3      	ldrb	r3, [r6, #3]
 800dd94:	702b      	strb	r3, [r5, #0]
 800dd96:	2f00      	cmp	r7, #0
 800dd98:	d04c      	beq.n	800de34 <ucdr_deserialize_uint32_t+0xf0>
 800dd9a:	78b3      	ldrb	r3, [r6, #2]
 800dd9c:	2f01      	cmp	r7, #1
 800dd9e:	706b      	strb	r3, [r5, #1]
 800dda0:	f105 0302 	add.w	r3, r5, #2
 800dda4:	d04a      	beq.n	800de3c <ucdr_deserialize_uint32_t+0xf8>
 800dda6:	7873      	ldrb	r3, [r6, #1]
 800dda8:	2f02      	cmp	r7, #2
 800ddaa:	70ab      	strb	r3, [r5, #2]
 800ddac:	f105 0303 	add.w	r3, r5, #3
 800ddb0:	d048      	beq.n	800de44 <ucdr_deserialize_uint32_t+0x100>
 800ddb2:	7833      	ldrb	r3, [r6, #0]
 800ddb4:	70eb      	strb	r3, [r5, #3]
 800ddb6:	6923      	ldr	r3, [r4, #16]
 800ddb8:	2104      	movs	r1, #4
 800ddba:	68a2      	ldr	r2, [r4, #8]
 800ddbc:	3304      	adds	r3, #4
 800ddbe:	7da0      	ldrb	r0, [r4, #22]
 800ddc0:	444a      	add	r2, r9
 800ddc2:	7561      	strb	r1, [r4, #21]
 800ddc4:	1bdb      	subs	r3, r3, r7
 800ddc6:	f080 0001 	eor.w	r0, r0, #1
 800ddca:	60a2      	str	r2, [r4, #8]
 800ddcc:	6123      	str	r3, [r4, #16]
 800ddce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddd2:	2104      	movs	r1, #4
 800ddd4:	4620      	mov	r0, r4
 800ddd6:	f000 ffbf 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800ddda:	b1b0      	cbz	r0, 800de0a <ucdr_deserialize_uint32_t+0xc6>
 800dddc:	7d23      	ldrb	r3, [r4, #20]
 800ddde:	2b01      	cmp	r3, #1
 800dde0:	68a3      	ldr	r3, [r4, #8]
 800dde2:	d017      	beq.n	800de14 <ucdr_deserialize_uint32_t+0xd0>
 800dde4:	78db      	ldrb	r3, [r3, #3]
 800dde6:	702b      	strb	r3, [r5, #0]
 800dde8:	68a3      	ldr	r3, [r4, #8]
 800ddea:	789b      	ldrb	r3, [r3, #2]
 800ddec:	706b      	strb	r3, [r5, #1]
 800ddee:	68a3      	ldr	r3, [r4, #8]
 800ddf0:	785b      	ldrb	r3, [r3, #1]
 800ddf2:	70ab      	strb	r3, [r5, #2]
 800ddf4:	68a3      	ldr	r3, [r4, #8]
 800ddf6:	781b      	ldrb	r3, [r3, #0]
 800ddf8:	70eb      	strb	r3, [r5, #3]
 800ddfa:	2104      	movs	r1, #4
 800ddfc:	68a2      	ldr	r2, [r4, #8]
 800ddfe:	6923      	ldr	r3, [r4, #16]
 800de00:	440a      	add	r2, r1
 800de02:	7561      	strb	r1, [r4, #21]
 800de04:	440b      	add	r3, r1
 800de06:	60a2      	str	r2, [r4, #8]
 800de08:	6123      	str	r3, [r4, #16]
 800de0a:	7da0      	ldrb	r0, [r4, #22]
 800de0c:	f080 0001 	eor.w	r0, r0, #1
 800de10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	602b      	str	r3, [r5, #0]
 800de18:	e7ef      	b.n	800ddfa <ucdr_deserialize_uint32_t+0xb6>
 800de1a:	68a2      	ldr	r2, [r4, #8]
 800de1c:	6923      	ldr	r3, [r4, #16]
 800de1e:	1bd2      	subs	r2, r2, r7
 800de20:	7da0      	ldrb	r0, [r4, #22]
 800de22:	1bdb      	subs	r3, r3, r7
 800de24:	f884 8015 	strb.w	r8, [r4, #21]
 800de28:	f080 0001 	eor.w	r0, r0, #1
 800de2c:	60a2      	str	r2, [r4, #8]
 800de2e:	6123      	str	r3, [r4, #16]
 800de30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de34:	68a3      	ldr	r3, [r4, #8]
 800de36:	789b      	ldrb	r3, [r3, #2]
 800de38:	706b      	strb	r3, [r5, #1]
 800de3a:	1cab      	adds	r3, r5, #2
 800de3c:	68a2      	ldr	r2, [r4, #8]
 800de3e:	7852      	ldrb	r2, [r2, #1]
 800de40:	f803 2b01 	strb.w	r2, [r3], #1
 800de44:	68a2      	ldr	r2, [r4, #8]
 800de46:	7812      	ldrb	r2, [r2, #0]
 800de48:	701a      	strb	r2, [r3, #0]
 800de4a:	e7b4      	b.n	800ddb6 <ucdr_deserialize_uint32_t+0x72>
 800de4c:	4631      	mov	r1, r6
 800de4e:	463a      	mov	r2, r7
 800de50:	4628      	mov	r0, r5
 800de52:	f00c fcf8 	bl	801a846 <memcpy>
 800de56:	464a      	mov	r2, r9
 800de58:	19e8      	adds	r0, r5, r7
 800de5a:	68a1      	ldr	r1, [r4, #8]
 800de5c:	f00c fcf3 	bl	801a846 <memcpy>
 800de60:	e7a9      	b.n	800ddb6 <ucdr_deserialize_uint32_t+0x72>
 800de62:	bf00      	nop

0800de64 <ucdr_deserialize_endian_uint32_t>:
 800de64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de68:	4604      	mov	r4, r0
 800de6a:	460e      	mov	r6, r1
 800de6c:	2104      	movs	r1, #4
 800de6e:	4615      	mov	r5, r2
 800de70:	f000 ffc6 	bl	800ee00 <ucdr_buffer_alignment>
 800de74:	4601      	mov	r1, r0
 800de76:	4620      	mov	r0, r4
 800de78:	f894 8015 	ldrb.w	r8, [r4, #21]
 800de7c:	f001 f808 	bl	800ee90 <ucdr_advance_buffer>
 800de80:	2104      	movs	r1, #4
 800de82:	4620      	mov	r0, r4
 800de84:	f000 ff5c 	bl	800ed40 <ucdr_check_buffer_available_for>
 800de88:	2800      	cmp	r0, #0
 800de8a:	d13c      	bne.n	800df06 <ucdr_deserialize_endian_uint32_t+0xa2>
 800de8c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800de90:	42bb      	cmp	r3, r7
 800de92:	d933      	bls.n	800defc <ucdr_deserialize_endian_uint32_t+0x98>
 800de94:	eba3 0907 	sub.w	r9, r3, r7
 800de98:	60a3      	str	r3, [r4, #8]
 800de9a:	6923      	ldr	r3, [r4, #16]
 800de9c:	4620      	mov	r0, r4
 800de9e:	f1c9 0a04 	rsb	sl, r9, #4
 800dea2:	444b      	add	r3, r9
 800dea4:	4651      	mov	r1, sl
 800dea6:	6123      	str	r3, [r4, #16]
 800dea8:	f000 ff56 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800deac:	2800      	cmp	r0, #0
 800deae:	d048      	beq.n	800df42 <ucdr_deserialize_endian_uint32_t+0xde>
 800deb0:	2e01      	cmp	r6, #1
 800deb2:	d061      	beq.n	800df78 <ucdr_deserialize_endian_uint32_t+0x114>
 800deb4:	78fb      	ldrb	r3, [r7, #3]
 800deb6:	702b      	strb	r3, [r5, #0]
 800deb8:	f1b9 0f00 	cmp.w	r9, #0
 800debc:	d050      	beq.n	800df60 <ucdr_deserialize_endian_uint32_t+0xfc>
 800debe:	78bb      	ldrb	r3, [r7, #2]
 800dec0:	f1b9 0f01 	cmp.w	r9, #1
 800dec4:	706b      	strb	r3, [r5, #1]
 800dec6:	f105 0302 	add.w	r3, r5, #2
 800deca:	d04d      	beq.n	800df68 <ucdr_deserialize_endian_uint32_t+0x104>
 800decc:	787b      	ldrb	r3, [r7, #1]
 800dece:	f1b9 0f02 	cmp.w	r9, #2
 800ded2:	70ab      	strb	r3, [r5, #2]
 800ded4:	f105 0303 	add.w	r3, r5, #3
 800ded8:	d04a      	beq.n	800df70 <ucdr_deserialize_endian_uint32_t+0x10c>
 800deda:	783b      	ldrb	r3, [r7, #0]
 800dedc:	70eb      	strb	r3, [r5, #3]
 800dede:	6923      	ldr	r3, [r4, #16]
 800dee0:	2104      	movs	r1, #4
 800dee2:	68a2      	ldr	r2, [r4, #8]
 800dee4:	3304      	adds	r3, #4
 800dee6:	7da0      	ldrb	r0, [r4, #22]
 800dee8:	4452      	add	r2, sl
 800deea:	7561      	strb	r1, [r4, #21]
 800deec:	eba3 0309 	sub.w	r3, r3, r9
 800def0:	f080 0001 	eor.w	r0, r0, #1
 800def4:	60a2      	str	r2, [r4, #8]
 800def6:	6123      	str	r3, [r4, #16]
 800def8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800defc:	2104      	movs	r1, #4
 800defe:	4620      	mov	r0, r4
 800df00:	f000 ff2a 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800df04:	b1a8      	cbz	r0, 800df32 <ucdr_deserialize_endian_uint32_t+0xce>
 800df06:	2e01      	cmp	r6, #1
 800df08:	68a3      	ldr	r3, [r4, #8]
 800df0a:	d017      	beq.n	800df3c <ucdr_deserialize_endian_uint32_t+0xd8>
 800df0c:	78db      	ldrb	r3, [r3, #3]
 800df0e:	702b      	strb	r3, [r5, #0]
 800df10:	68a3      	ldr	r3, [r4, #8]
 800df12:	789b      	ldrb	r3, [r3, #2]
 800df14:	706b      	strb	r3, [r5, #1]
 800df16:	68a3      	ldr	r3, [r4, #8]
 800df18:	785b      	ldrb	r3, [r3, #1]
 800df1a:	70ab      	strb	r3, [r5, #2]
 800df1c:	68a3      	ldr	r3, [r4, #8]
 800df1e:	781b      	ldrb	r3, [r3, #0]
 800df20:	70eb      	strb	r3, [r5, #3]
 800df22:	2104      	movs	r1, #4
 800df24:	68a2      	ldr	r2, [r4, #8]
 800df26:	6923      	ldr	r3, [r4, #16]
 800df28:	440a      	add	r2, r1
 800df2a:	7561      	strb	r1, [r4, #21]
 800df2c:	440b      	add	r3, r1
 800df2e:	60a2      	str	r2, [r4, #8]
 800df30:	6123      	str	r3, [r4, #16]
 800df32:	7da0      	ldrb	r0, [r4, #22]
 800df34:	f080 0001 	eor.w	r0, r0, #1
 800df38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	602b      	str	r3, [r5, #0]
 800df40:	e7ef      	b.n	800df22 <ucdr_deserialize_endian_uint32_t+0xbe>
 800df42:	68a2      	ldr	r2, [r4, #8]
 800df44:	6923      	ldr	r3, [r4, #16]
 800df46:	eba2 0209 	sub.w	r2, r2, r9
 800df4a:	7da0      	ldrb	r0, [r4, #22]
 800df4c:	eba3 0309 	sub.w	r3, r3, r9
 800df50:	f884 8015 	strb.w	r8, [r4, #21]
 800df54:	f080 0001 	eor.w	r0, r0, #1
 800df58:	60a2      	str	r2, [r4, #8]
 800df5a:	6123      	str	r3, [r4, #16]
 800df5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df60:	68a3      	ldr	r3, [r4, #8]
 800df62:	789b      	ldrb	r3, [r3, #2]
 800df64:	706b      	strb	r3, [r5, #1]
 800df66:	1cab      	adds	r3, r5, #2
 800df68:	68a2      	ldr	r2, [r4, #8]
 800df6a:	7852      	ldrb	r2, [r2, #1]
 800df6c:	f803 2b01 	strb.w	r2, [r3], #1
 800df70:	68a2      	ldr	r2, [r4, #8]
 800df72:	7812      	ldrb	r2, [r2, #0]
 800df74:	701a      	strb	r2, [r3, #0]
 800df76:	e7b2      	b.n	800dede <ucdr_deserialize_endian_uint32_t+0x7a>
 800df78:	4639      	mov	r1, r7
 800df7a:	464a      	mov	r2, r9
 800df7c:	4628      	mov	r0, r5
 800df7e:	f00c fc62 	bl	801a846 <memcpy>
 800df82:	4652      	mov	r2, sl
 800df84:	eb05 0009 	add.w	r0, r5, r9
 800df88:	68a1      	ldr	r1, [r4, #8]
 800df8a:	f00c fc5c 	bl	801a846 <memcpy>
 800df8e:	e7a6      	b.n	800dede <ucdr_deserialize_endian_uint32_t+0x7a>

0800df90 <ucdr_serialize_uint64_t>:
 800df90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df94:	4604      	mov	r4, r0
 800df96:	b082      	sub	sp, #8
 800df98:	2108      	movs	r1, #8
 800df9a:	e9cd 2300 	strd	r2, r3, [sp]
 800df9e:	f000 ff2f 	bl	800ee00 <ucdr_buffer_alignment>
 800dfa2:	4601      	mov	r1, r0
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	7d67      	ldrb	r7, [r4, #21]
 800dfa8:	f000 ff72 	bl	800ee90 <ucdr_advance_buffer>
 800dfac:	2108      	movs	r1, #8
 800dfae:	4620      	mov	r0, r4
 800dfb0:	f000 fec6 	bl	800ed40 <ucdr_check_buffer_available_for>
 800dfb4:	2800      	cmp	r0, #0
 800dfb6:	d14e      	bne.n	800e056 <ucdr_serialize_uint64_t+0xc6>
 800dfb8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dfbc:	42ab      	cmp	r3, r5
 800dfbe:	d945      	bls.n	800e04c <ucdr_serialize_uint64_t+0xbc>
 800dfc0:	1b5e      	subs	r6, r3, r5
 800dfc2:	60a3      	str	r3, [r4, #8]
 800dfc4:	6923      	ldr	r3, [r4, #16]
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	f1c6 0808 	rsb	r8, r6, #8
 800dfcc:	4433      	add	r3, r6
 800dfce:	4641      	mov	r1, r8
 800dfd0:	6123      	str	r3, [r4, #16]
 800dfd2:	f000 fec1 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	d074      	beq.n	800e0c4 <ucdr_serialize_uint64_t+0x134>
 800dfda:	7d23      	ldrb	r3, [r4, #20]
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	f000 809b 	beq.w	800e118 <ucdr_serialize_uint64_t+0x188>
 800dfe2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dfe6:	702b      	strb	r3, [r5, #0]
 800dfe8:	2e00      	cmp	r6, #0
 800dfea:	d078      	beq.n	800e0de <ucdr_serialize_uint64_t+0x14e>
 800dfec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dff0:	2e01      	cmp	r6, #1
 800dff2:	706b      	strb	r3, [r5, #1]
 800dff4:	d077      	beq.n	800e0e6 <ucdr_serialize_uint64_t+0x156>
 800dff6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dffa:	2e02      	cmp	r6, #2
 800dffc:	70ab      	strb	r3, [r5, #2]
 800dffe:	d076      	beq.n	800e0ee <ucdr_serialize_uint64_t+0x15e>
 800e000:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e004:	2e03      	cmp	r6, #3
 800e006:	70eb      	strb	r3, [r5, #3]
 800e008:	d075      	beq.n	800e0f6 <ucdr_serialize_uint64_t+0x166>
 800e00a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e00e:	2e04      	cmp	r6, #4
 800e010:	712b      	strb	r3, [r5, #4]
 800e012:	d074      	beq.n	800e0fe <ucdr_serialize_uint64_t+0x16e>
 800e014:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e018:	2e05      	cmp	r6, #5
 800e01a:	716b      	strb	r3, [r5, #5]
 800e01c:	d073      	beq.n	800e106 <ucdr_serialize_uint64_t+0x176>
 800e01e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e022:	2e06      	cmp	r6, #6
 800e024:	71ab      	strb	r3, [r5, #6]
 800e026:	d072      	beq.n	800e10e <ucdr_serialize_uint64_t+0x17e>
 800e028:	f89d 3000 	ldrb.w	r3, [sp]
 800e02c:	71eb      	strb	r3, [r5, #7]
 800e02e:	6923      	ldr	r3, [r4, #16]
 800e030:	2108      	movs	r1, #8
 800e032:	68a2      	ldr	r2, [r4, #8]
 800e034:	3308      	adds	r3, #8
 800e036:	7da0      	ldrb	r0, [r4, #22]
 800e038:	4442      	add	r2, r8
 800e03a:	7561      	strb	r1, [r4, #21]
 800e03c:	1b9e      	subs	r6, r3, r6
 800e03e:	f080 0001 	eor.w	r0, r0, #1
 800e042:	60a2      	str	r2, [r4, #8]
 800e044:	6126      	str	r6, [r4, #16]
 800e046:	b002      	add	sp, #8
 800e048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e04c:	2108      	movs	r1, #8
 800e04e:	4620      	mov	r0, r4
 800e050:	f000 fe82 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800e054:	b350      	cbz	r0, 800e0ac <ucdr_serialize_uint64_t+0x11c>
 800e056:	7d23      	ldrb	r3, [r4, #20]
 800e058:	2b01      	cmp	r3, #1
 800e05a:	d02d      	beq.n	800e0b8 <ucdr_serialize_uint64_t+0x128>
 800e05c:	68a3      	ldr	r3, [r4, #8]
 800e05e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e062:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e066:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e06a:	7018      	strb	r0, [r3, #0]
 800e06c:	68a3      	ldr	r3, [r4, #8]
 800e06e:	705a      	strb	r2, [r3, #1]
 800e070:	68a3      	ldr	r3, [r4, #8]
 800e072:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e076:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800e07a:	7099      	strb	r1, [r3, #2]
 800e07c:	68a3      	ldr	r3, [r4, #8]
 800e07e:	70da      	strb	r2, [r3, #3]
 800e080:	68a3      	ldr	r3, [r4, #8]
 800e082:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e086:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800e08a:	7118      	strb	r0, [r3, #4]
 800e08c:	68a3      	ldr	r3, [r4, #8]
 800e08e:	715a      	strb	r2, [r3, #5]
 800e090:	68a3      	ldr	r3, [r4, #8]
 800e092:	f89d 2000 	ldrb.w	r2, [sp]
 800e096:	7199      	strb	r1, [r3, #6]
 800e098:	68a3      	ldr	r3, [r4, #8]
 800e09a:	71da      	strb	r2, [r3, #7]
 800e09c:	2108      	movs	r1, #8
 800e09e:	68a2      	ldr	r2, [r4, #8]
 800e0a0:	6923      	ldr	r3, [r4, #16]
 800e0a2:	440a      	add	r2, r1
 800e0a4:	7561      	strb	r1, [r4, #21]
 800e0a6:	440b      	add	r3, r1
 800e0a8:	60a2      	str	r2, [r4, #8]
 800e0aa:	6123      	str	r3, [r4, #16]
 800e0ac:	7da0      	ldrb	r0, [r4, #22]
 800e0ae:	f080 0001 	eor.w	r0, r0, #1
 800e0b2:	b002      	add	sp, #8
 800e0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0b8:	466b      	mov	r3, sp
 800e0ba:	68a2      	ldr	r2, [r4, #8]
 800e0bc:	cb03      	ldmia	r3!, {r0, r1}
 800e0be:	6010      	str	r0, [r2, #0]
 800e0c0:	6051      	str	r1, [r2, #4]
 800e0c2:	e7eb      	b.n	800e09c <ucdr_serialize_uint64_t+0x10c>
 800e0c4:	68a2      	ldr	r2, [r4, #8]
 800e0c6:	6923      	ldr	r3, [r4, #16]
 800e0c8:	7da0      	ldrb	r0, [r4, #22]
 800e0ca:	1b92      	subs	r2, r2, r6
 800e0cc:	1b9b      	subs	r3, r3, r6
 800e0ce:	7567      	strb	r7, [r4, #21]
 800e0d0:	f080 0001 	eor.w	r0, r0, #1
 800e0d4:	60a2      	str	r2, [r4, #8]
 800e0d6:	6123      	str	r3, [r4, #16]
 800e0d8:	b002      	add	sp, #8
 800e0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0de:	68a3      	ldr	r3, [r4, #8]
 800e0e0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e0e4:	701a      	strb	r2, [r3, #0]
 800e0e6:	68a3      	ldr	r3, [r4, #8]
 800e0e8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e0ec:	701a      	strb	r2, [r3, #0]
 800e0ee:	68a3      	ldr	r3, [r4, #8]
 800e0f0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e0f4:	701a      	strb	r2, [r3, #0]
 800e0f6:	68a3      	ldr	r3, [r4, #8]
 800e0f8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e0fc:	701a      	strb	r2, [r3, #0]
 800e0fe:	68a3      	ldr	r3, [r4, #8]
 800e100:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e104:	701a      	strb	r2, [r3, #0]
 800e106:	68a3      	ldr	r3, [r4, #8]
 800e108:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e10c:	701a      	strb	r2, [r3, #0]
 800e10e:	68a3      	ldr	r3, [r4, #8]
 800e110:	f89d 2000 	ldrb.w	r2, [sp]
 800e114:	701a      	strb	r2, [r3, #0]
 800e116:	e78a      	b.n	800e02e <ucdr_serialize_uint64_t+0x9e>
 800e118:	4628      	mov	r0, r5
 800e11a:	466d      	mov	r5, sp
 800e11c:	4632      	mov	r2, r6
 800e11e:	4629      	mov	r1, r5
 800e120:	f00c fb91 	bl	801a846 <memcpy>
 800e124:	4642      	mov	r2, r8
 800e126:	19a9      	adds	r1, r5, r6
 800e128:	68a0      	ldr	r0, [r4, #8]
 800e12a:	f00c fb8c 	bl	801a846 <memcpy>
 800e12e:	e77e      	b.n	800e02e <ucdr_serialize_uint64_t+0x9e>

0800e130 <ucdr_serialize_int16_t>:
 800e130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e134:	460b      	mov	r3, r1
 800e136:	b082      	sub	sp, #8
 800e138:	4604      	mov	r4, r0
 800e13a:	2102      	movs	r1, #2
 800e13c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e140:	f000 fe5e 	bl	800ee00 <ucdr_buffer_alignment>
 800e144:	4601      	mov	r1, r0
 800e146:	4620      	mov	r0, r4
 800e148:	7d67      	ldrb	r7, [r4, #21]
 800e14a:	f000 fea1 	bl	800ee90 <ucdr_advance_buffer>
 800e14e:	2102      	movs	r1, #2
 800e150:	4620      	mov	r0, r4
 800e152:	f000 fdf5 	bl	800ed40 <ucdr_check_buffer_available_for>
 800e156:	bb78      	cbnz	r0, 800e1b8 <ucdr_serialize_int16_t+0x88>
 800e158:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e15c:	42ab      	cmp	r3, r5
 800e15e:	d926      	bls.n	800e1ae <ucdr_serialize_int16_t+0x7e>
 800e160:	1b5e      	subs	r6, r3, r5
 800e162:	60a3      	str	r3, [r4, #8]
 800e164:	6923      	ldr	r3, [r4, #16]
 800e166:	4620      	mov	r0, r4
 800e168:	f1c6 0802 	rsb	r8, r6, #2
 800e16c:	4433      	add	r3, r6
 800e16e:	4641      	mov	r1, r8
 800e170:	6123      	str	r3, [r4, #16]
 800e172:	f000 fdf1 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800e176:	2800      	cmp	r0, #0
 800e178:	d03b      	beq.n	800e1f2 <ucdr_serialize_int16_t+0xc2>
 800e17a:	7d23      	ldrb	r3, [r4, #20]
 800e17c:	2b01      	cmp	r3, #1
 800e17e:	d04a      	beq.n	800e216 <ucdr_serialize_int16_t+0xe6>
 800e180:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e184:	702b      	strb	r3, [r5, #0]
 800e186:	2e00      	cmp	r6, #0
 800e188:	d040      	beq.n	800e20c <ucdr_serialize_int16_t+0xdc>
 800e18a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e18e:	706b      	strb	r3, [r5, #1]
 800e190:	6923      	ldr	r3, [r4, #16]
 800e192:	2102      	movs	r1, #2
 800e194:	68a2      	ldr	r2, [r4, #8]
 800e196:	3302      	adds	r3, #2
 800e198:	7da0      	ldrb	r0, [r4, #22]
 800e19a:	4442      	add	r2, r8
 800e19c:	7561      	strb	r1, [r4, #21]
 800e19e:	1b9e      	subs	r6, r3, r6
 800e1a0:	f080 0001 	eor.w	r0, r0, #1
 800e1a4:	60a2      	str	r2, [r4, #8]
 800e1a6:	6126      	str	r6, [r4, #16]
 800e1a8:	b002      	add	sp, #8
 800e1aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1ae:	2102      	movs	r1, #2
 800e1b0:	4620      	mov	r0, r4
 800e1b2:	f000 fdd1 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800e1b6:	b190      	cbz	r0, 800e1de <ucdr_serialize_int16_t+0xae>
 800e1b8:	7d23      	ldrb	r3, [r4, #20]
 800e1ba:	2b01      	cmp	r3, #1
 800e1bc:	68a3      	ldr	r3, [r4, #8]
 800e1be:	d014      	beq.n	800e1ea <ucdr_serialize_int16_t+0xba>
 800e1c0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e1c4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e1c8:	7019      	strb	r1, [r3, #0]
 800e1ca:	68a3      	ldr	r3, [r4, #8]
 800e1cc:	705a      	strb	r2, [r3, #1]
 800e1ce:	2102      	movs	r1, #2
 800e1d0:	68a2      	ldr	r2, [r4, #8]
 800e1d2:	6923      	ldr	r3, [r4, #16]
 800e1d4:	440a      	add	r2, r1
 800e1d6:	7561      	strb	r1, [r4, #21]
 800e1d8:	440b      	add	r3, r1
 800e1da:	60a2      	str	r2, [r4, #8]
 800e1dc:	6123      	str	r3, [r4, #16]
 800e1de:	7da0      	ldrb	r0, [r4, #22]
 800e1e0:	f080 0001 	eor.w	r0, r0, #1
 800e1e4:	b002      	add	sp, #8
 800e1e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1ea:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e1ee:	801a      	strh	r2, [r3, #0]
 800e1f0:	e7ed      	b.n	800e1ce <ucdr_serialize_int16_t+0x9e>
 800e1f2:	68a2      	ldr	r2, [r4, #8]
 800e1f4:	6923      	ldr	r3, [r4, #16]
 800e1f6:	7da0      	ldrb	r0, [r4, #22]
 800e1f8:	1b92      	subs	r2, r2, r6
 800e1fa:	1b9b      	subs	r3, r3, r6
 800e1fc:	7567      	strb	r7, [r4, #21]
 800e1fe:	f080 0001 	eor.w	r0, r0, #1
 800e202:	60a2      	str	r2, [r4, #8]
 800e204:	6123      	str	r3, [r4, #16]
 800e206:	b002      	add	sp, #8
 800e208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e20c:	68a3      	ldr	r3, [r4, #8]
 800e20e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e212:	701a      	strb	r2, [r3, #0]
 800e214:	e7bc      	b.n	800e190 <ucdr_serialize_int16_t+0x60>
 800e216:	4628      	mov	r0, r5
 800e218:	f10d 0506 	add.w	r5, sp, #6
 800e21c:	4632      	mov	r2, r6
 800e21e:	4629      	mov	r1, r5
 800e220:	f00c fb11 	bl	801a846 <memcpy>
 800e224:	4642      	mov	r2, r8
 800e226:	19a9      	adds	r1, r5, r6
 800e228:	68a0      	ldr	r0, [r4, #8]
 800e22a:	f00c fb0c 	bl	801a846 <memcpy>
 800e22e:	e7af      	b.n	800e190 <ucdr_serialize_int16_t+0x60>

0800e230 <ucdr_deserialize_int16_t>:
 800e230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e234:	4604      	mov	r4, r0
 800e236:	460d      	mov	r5, r1
 800e238:	2102      	movs	r1, #2
 800e23a:	f000 fde1 	bl	800ee00 <ucdr_buffer_alignment>
 800e23e:	4601      	mov	r1, r0
 800e240:	4620      	mov	r0, r4
 800e242:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e246:	f000 fe23 	bl	800ee90 <ucdr_advance_buffer>
 800e24a:	2102      	movs	r1, #2
 800e24c:	4620      	mov	r0, r4
 800e24e:	f000 fd77 	bl	800ed40 <ucdr_check_buffer_available_for>
 800e252:	bb60      	cbnz	r0, 800e2ae <ucdr_deserialize_int16_t+0x7e>
 800e254:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e258:	42be      	cmp	r6, r7
 800e25a:	d923      	bls.n	800e2a4 <ucdr_deserialize_int16_t+0x74>
 800e25c:	6923      	ldr	r3, [r4, #16]
 800e25e:	4620      	mov	r0, r4
 800e260:	60a6      	str	r6, [r4, #8]
 800e262:	1bf6      	subs	r6, r6, r7
 800e264:	4433      	add	r3, r6
 800e266:	f1c6 0902 	rsb	r9, r6, #2
 800e26a:	6123      	str	r3, [r4, #16]
 800e26c:	4649      	mov	r1, r9
 800e26e:	f000 fd73 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800e272:	2800      	cmp	r0, #0
 800e274:	d034      	beq.n	800e2e0 <ucdr_deserialize_int16_t+0xb0>
 800e276:	7d23      	ldrb	r3, [r4, #20]
 800e278:	2b01      	cmp	r3, #1
 800e27a:	d042      	beq.n	800e302 <ucdr_deserialize_int16_t+0xd2>
 800e27c:	787b      	ldrb	r3, [r7, #1]
 800e27e:	702b      	strb	r3, [r5, #0]
 800e280:	2e00      	cmp	r6, #0
 800e282:	d03a      	beq.n	800e2fa <ucdr_deserialize_int16_t+0xca>
 800e284:	783b      	ldrb	r3, [r7, #0]
 800e286:	706b      	strb	r3, [r5, #1]
 800e288:	6923      	ldr	r3, [r4, #16]
 800e28a:	2102      	movs	r1, #2
 800e28c:	68a2      	ldr	r2, [r4, #8]
 800e28e:	3302      	adds	r3, #2
 800e290:	7da0      	ldrb	r0, [r4, #22]
 800e292:	444a      	add	r2, r9
 800e294:	7561      	strb	r1, [r4, #21]
 800e296:	1b9b      	subs	r3, r3, r6
 800e298:	f080 0001 	eor.w	r0, r0, #1
 800e29c:	60a2      	str	r2, [r4, #8]
 800e29e:	6123      	str	r3, [r4, #16]
 800e2a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2a4:	2102      	movs	r1, #2
 800e2a6:	4620      	mov	r0, r4
 800e2a8:	f000 fd56 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800e2ac:	b180      	cbz	r0, 800e2d0 <ucdr_deserialize_int16_t+0xa0>
 800e2ae:	7d23      	ldrb	r3, [r4, #20]
 800e2b0:	2b01      	cmp	r3, #1
 800e2b2:	68a3      	ldr	r3, [r4, #8]
 800e2b4:	d011      	beq.n	800e2da <ucdr_deserialize_int16_t+0xaa>
 800e2b6:	785b      	ldrb	r3, [r3, #1]
 800e2b8:	702b      	strb	r3, [r5, #0]
 800e2ba:	68a3      	ldr	r3, [r4, #8]
 800e2bc:	781b      	ldrb	r3, [r3, #0]
 800e2be:	706b      	strb	r3, [r5, #1]
 800e2c0:	2102      	movs	r1, #2
 800e2c2:	68a2      	ldr	r2, [r4, #8]
 800e2c4:	6923      	ldr	r3, [r4, #16]
 800e2c6:	440a      	add	r2, r1
 800e2c8:	7561      	strb	r1, [r4, #21]
 800e2ca:	440b      	add	r3, r1
 800e2cc:	60a2      	str	r2, [r4, #8]
 800e2ce:	6123      	str	r3, [r4, #16]
 800e2d0:	7da0      	ldrb	r0, [r4, #22]
 800e2d2:	f080 0001 	eor.w	r0, r0, #1
 800e2d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2da:	881b      	ldrh	r3, [r3, #0]
 800e2dc:	802b      	strh	r3, [r5, #0]
 800e2de:	e7ef      	b.n	800e2c0 <ucdr_deserialize_int16_t+0x90>
 800e2e0:	68a2      	ldr	r2, [r4, #8]
 800e2e2:	6923      	ldr	r3, [r4, #16]
 800e2e4:	1b92      	subs	r2, r2, r6
 800e2e6:	7da0      	ldrb	r0, [r4, #22]
 800e2e8:	1b9b      	subs	r3, r3, r6
 800e2ea:	f884 8015 	strb.w	r8, [r4, #21]
 800e2ee:	f080 0001 	eor.w	r0, r0, #1
 800e2f2:	60a2      	str	r2, [r4, #8]
 800e2f4:	6123      	str	r3, [r4, #16]
 800e2f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e2fa:	68a3      	ldr	r3, [r4, #8]
 800e2fc:	781b      	ldrb	r3, [r3, #0]
 800e2fe:	706b      	strb	r3, [r5, #1]
 800e300:	e7c2      	b.n	800e288 <ucdr_deserialize_int16_t+0x58>
 800e302:	4639      	mov	r1, r7
 800e304:	4632      	mov	r2, r6
 800e306:	4628      	mov	r0, r5
 800e308:	f00c fa9d 	bl	801a846 <memcpy>
 800e30c:	464a      	mov	r2, r9
 800e30e:	19a8      	adds	r0, r5, r6
 800e310:	68a1      	ldr	r1, [r4, #8]
 800e312:	f00c fa98 	bl	801a846 <memcpy>
 800e316:	e7b7      	b.n	800e288 <ucdr_deserialize_int16_t+0x58>

0800e318 <ucdr_serialize_int32_t>:
 800e318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e31c:	b082      	sub	sp, #8
 800e31e:	4604      	mov	r4, r0
 800e320:	9101      	str	r1, [sp, #4]
 800e322:	2104      	movs	r1, #4
 800e324:	f000 fd6c 	bl	800ee00 <ucdr_buffer_alignment>
 800e328:	4601      	mov	r1, r0
 800e32a:	4620      	mov	r0, r4
 800e32c:	7d67      	ldrb	r7, [r4, #21]
 800e32e:	f000 fdaf 	bl	800ee90 <ucdr_advance_buffer>
 800e332:	2104      	movs	r1, #4
 800e334:	4620      	mov	r0, r4
 800e336:	f000 fd03 	bl	800ed40 <ucdr_check_buffer_available_for>
 800e33a:	2800      	cmp	r0, #0
 800e33c:	d139      	bne.n	800e3b2 <ucdr_serialize_int32_t+0x9a>
 800e33e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e342:	42ab      	cmp	r3, r5
 800e344:	d930      	bls.n	800e3a8 <ucdr_serialize_int32_t+0x90>
 800e346:	1b5e      	subs	r6, r3, r5
 800e348:	60a3      	str	r3, [r4, #8]
 800e34a:	6923      	ldr	r3, [r4, #16]
 800e34c:	4620      	mov	r0, r4
 800e34e:	f1c6 0804 	rsb	r8, r6, #4
 800e352:	4433      	add	r3, r6
 800e354:	4641      	mov	r1, r8
 800e356:	6123      	str	r3, [r4, #16]
 800e358:	f000 fcfe 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800e35c:	2800      	cmp	r0, #0
 800e35e:	d04c      	beq.n	800e3fa <ucdr_serialize_int32_t+0xe2>
 800e360:	7d23      	ldrb	r3, [r4, #20]
 800e362:	2b01      	cmp	r3, #1
 800e364:	d063      	beq.n	800e42e <ucdr_serialize_int32_t+0x116>
 800e366:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e36a:	702b      	strb	r3, [r5, #0]
 800e36c:	2e00      	cmp	r6, #0
 800e36e:	d051      	beq.n	800e414 <ucdr_serialize_int32_t+0xfc>
 800e370:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e374:	2e01      	cmp	r6, #1
 800e376:	706b      	strb	r3, [r5, #1]
 800e378:	d050      	beq.n	800e41c <ucdr_serialize_int32_t+0x104>
 800e37a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e37e:	2e02      	cmp	r6, #2
 800e380:	70ab      	strb	r3, [r5, #2]
 800e382:	d04f      	beq.n	800e424 <ucdr_serialize_int32_t+0x10c>
 800e384:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e388:	70eb      	strb	r3, [r5, #3]
 800e38a:	6923      	ldr	r3, [r4, #16]
 800e38c:	2104      	movs	r1, #4
 800e38e:	68a2      	ldr	r2, [r4, #8]
 800e390:	3304      	adds	r3, #4
 800e392:	7da0      	ldrb	r0, [r4, #22]
 800e394:	4442      	add	r2, r8
 800e396:	7561      	strb	r1, [r4, #21]
 800e398:	1b9e      	subs	r6, r3, r6
 800e39a:	f080 0001 	eor.w	r0, r0, #1
 800e39e:	60a2      	str	r2, [r4, #8]
 800e3a0:	6126      	str	r6, [r4, #16]
 800e3a2:	b002      	add	sp, #8
 800e3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3a8:	2104      	movs	r1, #4
 800e3aa:	4620      	mov	r0, r4
 800e3ac:	f000 fcd4 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800e3b0:	b1d0      	cbz	r0, 800e3e8 <ucdr_serialize_int32_t+0xd0>
 800e3b2:	7d23      	ldrb	r3, [r4, #20]
 800e3b4:	2b01      	cmp	r3, #1
 800e3b6:	68a3      	ldr	r3, [r4, #8]
 800e3b8:	d01c      	beq.n	800e3f4 <ucdr_serialize_int32_t+0xdc>
 800e3ba:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e3be:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e3c2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e3c6:	7018      	strb	r0, [r3, #0]
 800e3c8:	68a3      	ldr	r3, [r4, #8]
 800e3ca:	705a      	strb	r2, [r3, #1]
 800e3cc:	68a3      	ldr	r3, [r4, #8]
 800e3ce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e3d2:	7099      	strb	r1, [r3, #2]
 800e3d4:	68a3      	ldr	r3, [r4, #8]
 800e3d6:	70da      	strb	r2, [r3, #3]
 800e3d8:	2104      	movs	r1, #4
 800e3da:	68a2      	ldr	r2, [r4, #8]
 800e3dc:	6923      	ldr	r3, [r4, #16]
 800e3de:	440a      	add	r2, r1
 800e3e0:	7561      	strb	r1, [r4, #21]
 800e3e2:	440b      	add	r3, r1
 800e3e4:	60a2      	str	r2, [r4, #8]
 800e3e6:	6123      	str	r3, [r4, #16]
 800e3e8:	7da0      	ldrb	r0, [r4, #22]
 800e3ea:	f080 0001 	eor.w	r0, r0, #1
 800e3ee:	b002      	add	sp, #8
 800e3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3f4:	9a01      	ldr	r2, [sp, #4]
 800e3f6:	601a      	str	r2, [r3, #0]
 800e3f8:	e7ee      	b.n	800e3d8 <ucdr_serialize_int32_t+0xc0>
 800e3fa:	68a2      	ldr	r2, [r4, #8]
 800e3fc:	6923      	ldr	r3, [r4, #16]
 800e3fe:	7da0      	ldrb	r0, [r4, #22]
 800e400:	1b92      	subs	r2, r2, r6
 800e402:	1b9b      	subs	r3, r3, r6
 800e404:	7567      	strb	r7, [r4, #21]
 800e406:	f080 0001 	eor.w	r0, r0, #1
 800e40a:	60a2      	str	r2, [r4, #8]
 800e40c:	6123      	str	r3, [r4, #16]
 800e40e:	b002      	add	sp, #8
 800e410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e414:	68a3      	ldr	r3, [r4, #8]
 800e416:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e41a:	701a      	strb	r2, [r3, #0]
 800e41c:	68a3      	ldr	r3, [r4, #8]
 800e41e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e422:	701a      	strb	r2, [r3, #0]
 800e424:	68a3      	ldr	r3, [r4, #8]
 800e426:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e42a:	701a      	strb	r2, [r3, #0]
 800e42c:	e7ad      	b.n	800e38a <ucdr_serialize_int32_t+0x72>
 800e42e:	4628      	mov	r0, r5
 800e430:	ad01      	add	r5, sp, #4
 800e432:	4632      	mov	r2, r6
 800e434:	4629      	mov	r1, r5
 800e436:	f00c fa06 	bl	801a846 <memcpy>
 800e43a:	4642      	mov	r2, r8
 800e43c:	19a9      	adds	r1, r5, r6
 800e43e:	68a0      	ldr	r0, [r4, #8]
 800e440:	f00c fa01 	bl	801a846 <memcpy>
 800e444:	e7a1      	b.n	800e38a <ucdr_serialize_int32_t+0x72>
 800e446:	bf00      	nop

0800e448 <ucdr_serialize_endian_int32_t>:
 800e448:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e44c:	4604      	mov	r4, r0
 800e44e:	b083      	sub	sp, #12
 800e450:	460d      	mov	r5, r1
 800e452:	2104      	movs	r1, #4
 800e454:	9201      	str	r2, [sp, #4]
 800e456:	f000 fcd3 	bl	800ee00 <ucdr_buffer_alignment>
 800e45a:	4601      	mov	r1, r0
 800e45c:	4620      	mov	r0, r4
 800e45e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e462:	f000 fd15 	bl	800ee90 <ucdr_advance_buffer>
 800e466:	2104      	movs	r1, #4
 800e468:	4620      	mov	r0, r4
 800e46a:	f000 fc69 	bl	800ed40 <ucdr_check_buffer_available_for>
 800e46e:	2800      	cmp	r0, #0
 800e470:	d138      	bne.n	800e4e4 <ucdr_serialize_endian_int32_t+0x9c>
 800e472:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e476:	42b7      	cmp	r7, r6
 800e478:	d92f      	bls.n	800e4da <ucdr_serialize_endian_int32_t+0x92>
 800e47a:	6923      	ldr	r3, [r4, #16]
 800e47c:	4620      	mov	r0, r4
 800e47e:	60a7      	str	r7, [r4, #8]
 800e480:	1bbf      	subs	r7, r7, r6
 800e482:	443b      	add	r3, r7
 800e484:	f1c7 0904 	rsb	r9, r7, #4
 800e488:	6123      	str	r3, [r4, #16]
 800e48a:	4649      	mov	r1, r9
 800e48c:	f000 fc64 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800e490:	2800      	cmp	r0, #0
 800e492:	d04a      	beq.n	800e52a <ucdr_serialize_endian_int32_t+0xe2>
 800e494:	2d01      	cmp	r5, #1
 800e496:	d063      	beq.n	800e560 <ucdr_serialize_endian_int32_t+0x118>
 800e498:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e49c:	7033      	strb	r3, [r6, #0]
 800e49e:	2f00      	cmp	r7, #0
 800e4a0:	d051      	beq.n	800e546 <ucdr_serialize_endian_int32_t+0xfe>
 800e4a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e4a6:	2f01      	cmp	r7, #1
 800e4a8:	7073      	strb	r3, [r6, #1]
 800e4aa:	d050      	beq.n	800e54e <ucdr_serialize_endian_int32_t+0x106>
 800e4ac:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e4b0:	2f02      	cmp	r7, #2
 800e4b2:	70b3      	strb	r3, [r6, #2]
 800e4b4:	d04f      	beq.n	800e556 <ucdr_serialize_endian_int32_t+0x10e>
 800e4b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e4ba:	70f3      	strb	r3, [r6, #3]
 800e4bc:	6923      	ldr	r3, [r4, #16]
 800e4be:	2104      	movs	r1, #4
 800e4c0:	68a2      	ldr	r2, [r4, #8]
 800e4c2:	7da0      	ldrb	r0, [r4, #22]
 800e4c4:	3304      	adds	r3, #4
 800e4c6:	444a      	add	r2, r9
 800e4c8:	7561      	strb	r1, [r4, #21]
 800e4ca:	1bdb      	subs	r3, r3, r7
 800e4cc:	f080 0001 	eor.w	r0, r0, #1
 800e4d0:	60a2      	str	r2, [r4, #8]
 800e4d2:	6123      	str	r3, [r4, #16]
 800e4d4:	b003      	add	sp, #12
 800e4d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e4da:	2104      	movs	r1, #4
 800e4dc:	4620      	mov	r0, r4
 800e4de:	f000 fc3b 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800e4e2:	b1c8      	cbz	r0, 800e518 <ucdr_serialize_endian_int32_t+0xd0>
 800e4e4:	2d01      	cmp	r5, #1
 800e4e6:	68a3      	ldr	r3, [r4, #8]
 800e4e8:	d01c      	beq.n	800e524 <ucdr_serialize_endian_int32_t+0xdc>
 800e4ea:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e4ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e4f2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e4f6:	7018      	strb	r0, [r3, #0]
 800e4f8:	68a3      	ldr	r3, [r4, #8]
 800e4fa:	705a      	strb	r2, [r3, #1]
 800e4fc:	68a3      	ldr	r3, [r4, #8]
 800e4fe:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e502:	7099      	strb	r1, [r3, #2]
 800e504:	68a3      	ldr	r3, [r4, #8]
 800e506:	70da      	strb	r2, [r3, #3]
 800e508:	2104      	movs	r1, #4
 800e50a:	68a2      	ldr	r2, [r4, #8]
 800e50c:	6923      	ldr	r3, [r4, #16]
 800e50e:	440a      	add	r2, r1
 800e510:	7561      	strb	r1, [r4, #21]
 800e512:	440b      	add	r3, r1
 800e514:	60a2      	str	r2, [r4, #8]
 800e516:	6123      	str	r3, [r4, #16]
 800e518:	7da0      	ldrb	r0, [r4, #22]
 800e51a:	f080 0001 	eor.w	r0, r0, #1
 800e51e:	b003      	add	sp, #12
 800e520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e524:	9a01      	ldr	r2, [sp, #4]
 800e526:	601a      	str	r2, [r3, #0]
 800e528:	e7ee      	b.n	800e508 <ucdr_serialize_endian_int32_t+0xc0>
 800e52a:	68a2      	ldr	r2, [r4, #8]
 800e52c:	6923      	ldr	r3, [r4, #16]
 800e52e:	7da0      	ldrb	r0, [r4, #22]
 800e530:	1bd2      	subs	r2, r2, r7
 800e532:	1bdb      	subs	r3, r3, r7
 800e534:	f884 8015 	strb.w	r8, [r4, #21]
 800e538:	f080 0001 	eor.w	r0, r0, #1
 800e53c:	60a2      	str	r2, [r4, #8]
 800e53e:	6123      	str	r3, [r4, #16]
 800e540:	b003      	add	sp, #12
 800e542:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e546:	68a3      	ldr	r3, [r4, #8]
 800e548:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e54c:	701a      	strb	r2, [r3, #0]
 800e54e:	68a3      	ldr	r3, [r4, #8]
 800e550:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e554:	701a      	strb	r2, [r3, #0]
 800e556:	68a3      	ldr	r3, [r4, #8]
 800e558:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e55c:	701a      	strb	r2, [r3, #0]
 800e55e:	e7ad      	b.n	800e4bc <ucdr_serialize_endian_int32_t+0x74>
 800e560:	ad01      	add	r5, sp, #4
 800e562:	463a      	mov	r2, r7
 800e564:	4630      	mov	r0, r6
 800e566:	4629      	mov	r1, r5
 800e568:	f00c f96d 	bl	801a846 <memcpy>
 800e56c:	464a      	mov	r2, r9
 800e56e:	19e9      	adds	r1, r5, r7
 800e570:	68a0      	ldr	r0, [r4, #8]
 800e572:	f00c f968 	bl	801a846 <memcpy>
 800e576:	e7a1      	b.n	800e4bc <ucdr_serialize_endian_int32_t+0x74>

0800e578 <ucdr_deserialize_int32_t>:
 800e578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e57c:	4604      	mov	r4, r0
 800e57e:	460d      	mov	r5, r1
 800e580:	2104      	movs	r1, #4
 800e582:	f000 fc3d 	bl	800ee00 <ucdr_buffer_alignment>
 800e586:	4601      	mov	r1, r0
 800e588:	4620      	mov	r0, r4
 800e58a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e58e:	f000 fc7f 	bl	800ee90 <ucdr_advance_buffer>
 800e592:	2104      	movs	r1, #4
 800e594:	4620      	mov	r0, r4
 800e596:	f000 fbd3 	bl	800ed40 <ucdr_check_buffer_available_for>
 800e59a:	2800      	cmp	r0, #0
 800e59c:	d138      	bne.n	800e610 <ucdr_deserialize_int32_t+0x98>
 800e59e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e5a2:	42b7      	cmp	r7, r6
 800e5a4:	d92f      	bls.n	800e606 <ucdr_deserialize_int32_t+0x8e>
 800e5a6:	6923      	ldr	r3, [r4, #16]
 800e5a8:	4620      	mov	r0, r4
 800e5aa:	60a7      	str	r7, [r4, #8]
 800e5ac:	1bbf      	subs	r7, r7, r6
 800e5ae:	443b      	add	r3, r7
 800e5b0:	f1c7 0904 	rsb	r9, r7, #4
 800e5b4:	6123      	str	r3, [r4, #16]
 800e5b6:	4649      	mov	r1, r9
 800e5b8:	f000 fbce 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800e5bc:	2800      	cmp	r0, #0
 800e5be:	d046      	beq.n	800e64e <ucdr_deserialize_int32_t+0xd6>
 800e5c0:	7d23      	ldrb	r3, [r4, #20]
 800e5c2:	2b01      	cmp	r3, #1
 800e5c4:	d05c      	beq.n	800e680 <ucdr_deserialize_int32_t+0x108>
 800e5c6:	78f3      	ldrb	r3, [r6, #3]
 800e5c8:	702b      	strb	r3, [r5, #0]
 800e5ca:	2f00      	cmp	r7, #0
 800e5cc:	d04c      	beq.n	800e668 <ucdr_deserialize_int32_t+0xf0>
 800e5ce:	78b3      	ldrb	r3, [r6, #2]
 800e5d0:	2f01      	cmp	r7, #1
 800e5d2:	706b      	strb	r3, [r5, #1]
 800e5d4:	f105 0302 	add.w	r3, r5, #2
 800e5d8:	d04a      	beq.n	800e670 <ucdr_deserialize_int32_t+0xf8>
 800e5da:	7873      	ldrb	r3, [r6, #1]
 800e5dc:	2f02      	cmp	r7, #2
 800e5de:	70ab      	strb	r3, [r5, #2]
 800e5e0:	f105 0303 	add.w	r3, r5, #3
 800e5e4:	d048      	beq.n	800e678 <ucdr_deserialize_int32_t+0x100>
 800e5e6:	7833      	ldrb	r3, [r6, #0]
 800e5e8:	70eb      	strb	r3, [r5, #3]
 800e5ea:	6923      	ldr	r3, [r4, #16]
 800e5ec:	2104      	movs	r1, #4
 800e5ee:	68a2      	ldr	r2, [r4, #8]
 800e5f0:	3304      	adds	r3, #4
 800e5f2:	7da0      	ldrb	r0, [r4, #22]
 800e5f4:	444a      	add	r2, r9
 800e5f6:	7561      	strb	r1, [r4, #21]
 800e5f8:	1bdb      	subs	r3, r3, r7
 800e5fa:	f080 0001 	eor.w	r0, r0, #1
 800e5fe:	60a2      	str	r2, [r4, #8]
 800e600:	6123      	str	r3, [r4, #16]
 800e602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e606:	2104      	movs	r1, #4
 800e608:	4620      	mov	r0, r4
 800e60a:	f000 fba5 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800e60e:	b1b0      	cbz	r0, 800e63e <ucdr_deserialize_int32_t+0xc6>
 800e610:	7d23      	ldrb	r3, [r4, #20]
 800e612:	2b01      	cmp	r3, #1
 800e614:	68a3      	ldr	r3, [r4, #8]
 800e616:	d017      	beq.n	800e648 <ucdr_deserialize_int32_t+0xd0>
 800e618:	78db      	ldrb	r3, [r3, #3]
 800e61a:	702b      	strb	r3, [r5, #0]
 800e61c:	68a3      	ldr	r3, [r4, #8]
 800e61e:	789b      	ldrb	r3, [r3, #2]
 800e620:	706b      	strb	r3, [r5, #1]
 800e622:	68a3      	ldr	r3, [r4, #8]
 800e624:	785b      	ldrb	r3, [r3, #1]
 800e626:	70ab      	strb	r3, [r5, #2]
 800e628:	68a3      	ldr	r3, [r4, #8]
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	70eb      	strb	r3, [r5, #3]
 800e62e:	2104      	movs	r1, #4
 800e630:	68a2      	ldr	r2, [r4, #8]
 800e632:	6923      	ldr	r3, [r4, #16]
 800e634:	440a      	add	r2, r1
 800e636:	7561      	strb	r1, [r4, #21]
 800e638:	440b      	add	r3, r1
 800e63a:	60a2      	str	r2, [r4, #8]
 800e63c:	6123      	str	r3, [r4, #16]
 800e63e:	7da0      	ldrb	r0, [r4, #22]
 800e640:	f080 0001 	eor.w	r0, r0, #1
 800e644:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	602b      	str	r3, [r5, #0]
 800e64c:	e7ef      	b.n	800e62e <ucdr_deserialize_int32_t+0xb6>
 800e64e:	68a2      	ldr	r2, [r4, #8]
 800e650:	6923      	ldr	r3, [r4, #16]
 800e652:	1bd2      	subs	r2, r2, r7
 800e654:	7da0      	ldrb	r0, [r4, #22]
 800e656:	1bdb      	subs	r3, r3, r7
 800e658:	f884 8015 	strb.w	r8, [r4, #21]
 800e65c:	f080 0001 	eor.w	r0, r0, #1
 800e660:	60a2      	str	r2, [r4, #8]
 800e662:	6123      	str	r3, [r4, #16]
 800e664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e668:	68a3      	ldr	r3, [r4, #8]
 800e66a:	789b      	ldrb	r3, [r3, #2]
 800e66c:	706b      	strb	r3, [r5, #1]
 800e66e:	1cab      	adds	r3, r5, #2
 800e670:	68a2      	ldr	r2, [r4, #8]
 800e672:	7852      	ldrb	r2, [r2, #1]
 800e674:	f803 2b01 	strb.w	r2, [r3], #1
 800e678:	68a2      	ldr	r2, [r4, #8]
 800e67a:	7812      	ldrb	r2, [r2, #0]
 800e67c:	701a      	strb	r2, [r3, #0]
 800e67e:	e7b4      	b.n	800e5ea <ucdr_deserialize_int32_t+0x72>
 800e680:	4631      	mov	r1, r6
 800e682:	463a      	mov	r2, r7
 800e684:	4628      	mov	r0, r5
 800e686:	f00c f8de 	bl	801a846 <memcpy>
 800e68a:	464a      	mov	r2, r9
 800e68c:	19e8      	adds	r0, r5, r7
 800e68e:	68a1      	ldr	r1, [r4, #8]
 800e690:	f00c f8d9 	bl	801a846 <memcpy>
 800e694:	e7a9      	b.n	800e5ea <ucdr_deserialize_int32_t+0x72>
 800e696:	bf00      	nop

0800e698 <ucdr_deserialize_endian_int32_t>:
 800e698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e69c:	4604      	mov	r4, r0
 800e69e:	460e      	mov	r6, r1
 800e6a0:	2104      	movs	r1, #4
 800e6a2:	4615      	mov	r5, r2
 800e6a4:	f000 fbac 	bl	800ee00 <ucdr_buffer_alignment>
 800e6a8:	4601      	mov	r1, r0
 800e6aa:	4620      	mov	r0, r4
 800e6ac:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e6b0:	f000 fbee 	bl	800ee90 <ucdr_advance_buffer>
 800e6b4:	2104      	movs	r1, #4
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	f000 fb42 	bl	800ed40 <ucdr_check_buffer_available_for>
 800e6bc:	2800      	cmp	r0, #0
 800e6be:	d13c      	bne.n	800e73a <ucdr_deserialize_endian_int32_t+0xa2>
 800e6c0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800e6c4:	42bb      	cmp	r3, r7
 800e6c6:	d933      	bls.n	800e730 <ucdr_deserialize_endian_int32_t+0x98>
 800e6c8:	eba3 0907 	sub.w	r9, r3, r7
 800e6cc:	60a3      	str	r3, [r4, #8]
 800e6ce:	6923      	ldr	r3, [r4, #16]
 800e6d0:	4620      	mov	r0, r4
 800e6d2:	f1c9 0a04 	rsb	sl, r9, #4
 800e6d6:	444b      	add	r3, r9
 800e6d8:	4651      	mov	r1, sl
 800e6da:	6123      	str	r3, [r4, #16]
 800e6dc:	f000 fb3c 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800e6e0:	2800      	cmp	r0, #0
 800e6e2:	d048      	beq.n	800e776 <ucdr_deserialize_endian_int32_t+0xde>
 800e6e4:	2e01      	cmp	r6, #1
 800e6e6:	d061      	beq.n	800e7ac <ucdr_deserialize_endian_int32_t+0x114>
 800e6e8:	78fb      	ldrb	r3, [r7, #3]
 800e6ea:	702b      	strb	r3, [r5, #0]
 800e6ec:	f1b9 0f00 	cmp.w	r9, #0
 800e6f0:	d050      	beq.n	800e794 <ucdr_deserialize_endian_int32_t+0xfc>
 800e6f2:	78bb      	ldrb	r3, [r7, #2]
 800e6f4:	f1b9 0f01 	cmp.w	r9, #1
 800e6f8:	706b      	strb	r3, [r5, #1]
 800e6fa:	f105 0302 	add.w	r3, r5, #2
 800e6fe:	d04d      	beq.n	800e79c <ucdr_deserialize_endian_int32_t+0x104>
 800e700:	787b      	ldrb	r3, [r7, #1]
 800e702:	f1b9 0f02 	cmp.w	r9, #2
 800e706:	70ab      	strb	r3, [r5, #2]
 800e708:	f105 0303 	add.w	r3, r5, #3
 800e70c:	d04a      	beq.n	800e7a4 <ucdr_deserialize_endian_int32_t+0x10c>
 800e70e:	783b      	ldrb	r3, [r7, #0]
 800e710:	70eb      	strb	r3, [r5, #3]
 800e712:	6923      	ldr	r3, [r4, #16]
 800e714:	2104      	movs	r1, #4
 800e716:	68a2      	ldr	r2, [r4, #8]
 800e718:	3304      	adds	r3, #4
 800e71a:	7da0      	ldrb	r0, [r4, #22]
 800e71c:	4452      	add	r2, sl
 800e71e:	7561      	strb	r1, [r4, #21]
 800e720:	eba3 0309 	sub.w	r3, r3, r9
 800e724:	f080 0001 	eor.w	r0, r0, #1
 800e728:	60a2      	str	r2, [r4, #8]
 800e72a:	6123      	str	r3, [r4, #16]
 800e72c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e730:	2104      	movs	r1, #4
 800e732:	4620      	mov	r0, r4
 800e734:	f000 fb10 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800e738:	b1a8      	cbz	r0, 800e766 <ucdr_deserialize_endian_int32_t+0xce>
 800e73a:	2e01      	cmp	r6, #1
 800e73c:	68a3      	ldr	r3, [r4, #8]
 800e73e:	d017      	beq.n	800e770 <ucdr_deserialize_endian_int32_t+0xd8>
 800e740:	78db      	ldrb	r3, [r3, #3]
 800e742:	702b      	strb	r3, [r5, #0]
 800e744:	68a3      	ldr	r3, [r4, #8]
 800e746:	789b      	ldrb	r3, [r3, #2]
 800e748:	706b      	strb	r3, [r5, #1]
 800e74a:	68a3      	ldr	r3, [r4, #8]
 800e74c:	785b      	ldrb	r3, [r3, #1]
 800e74e:	70ab      	strb	r3, [r5, #2]
 800e750:	68a3      	ldr	r3, [r4, #8]
 800e752:	781b      	ldrb	r3, [r3, #0]
 800e754:	70eb      	strb	r3, [r5, #3]
 800e756:	2104      	movs	r1, #4
 800e758:	68a2      	ldr	r2, [r4, #8]
 800e75a:	6923      	ldr	r3, [r4, #16]
 800e75c:	440a      	add	r2, r1
 800e75e:	7561      	strb	r1, [r4, #21]
 800e760:	440b      	add	r3, r1
 800e762:	60a2      	str	r2, [r4, #8]
 800e764:	6123      	str	r3, [r4, #16]
 800e766:	7da0      	ldrb	r0, [r4, #22]
 800e768:	f080 0001 	eor.w	r0, r0, #1
 800e76c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	602b      	str	r3, [r5, #0]
 800e774:	e7ef      	b.n	800e756 <ucdr_deserialize_endian_int32_t+0xbe>
 800e776:	68a2      	ldr	r2, [r4, #8]
 800e778:	6923      	ldr	r3, [r4, #16]
 800e77a:	eba2 0209 	sub.w	r2, r2, r9
 800e77e:	7da0      	ldrb	r0, [r4, #22]
 800e780:	eba3 0309 	sub.w	r3, r3, r9
 800e784:	f884 8015 	strb.w	r8, [r4, #21]
 800e788:	f080 0001 	eor.w	r0, r0, #1
 800e78c:	60a2      	str	r2, [r4, #8]
 800e78e:	6123      	str	r3, [r4, #16]
 800e790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e794:	68a3      	ldr	r3, [r4, #8]
 800e796:	789b      	ldrb	r3, [r3, #2]
 800e798:	706b      	strb	r3, [r5, #1]
 800e79a:	1cab      	adds	r3, r5, #2
 800e79c:	68a2      	ldr	r2, [r4, #8]
 800e79e:	7852      	ldrb	r2, [r2, #1]
 800e7a0:	f803 2b01 	strb.w	r2, [r3], #1
 800e7a4:	68a2      	ldr	r2, [r4, #8]
 800e7a6:	7812      	ldrb	r2, [r2, #0]
 800e7a8:	701a      	strb	r2, [r3, #0]
 800e7aa:	e7b2      	b.n	800e712 <ucdr_deserialize_endian_int32_t+0x7a>
 800e7ac:	4639      	mov	r1, r7
 800e7ae:	464a      	mov	r2, r9
 800e7b0:	4628      	mov	r0, r5
 800e7b2:	f00c f848 	bl	801a846 <memcpy>
 800e7b6:	4652      	mov	r2, sl
 800e7b8:	eb05 0009 	add.w	r0, r5, r9
 800e7bc:	68a1      	ldr	r1, [r4, #8]
 800e7be:	f00c f842 	bl	801a846 <memcpy>
 800e7c2:	e7a6      	b.n	800e712 <ucdr_deserialize_endian_int32_t+0x7a>

0800e7c4 <ucdr_serialize_int64_t>:
 800e7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7c8:	4604      	mov	r4, r0
 800e7ca:	b082      	sub	sp, #8
 800e7cc:	2108      	movs	r1, #8
 800e7ce:	e9cd 2300 	strd	r2, r3, [sp]
 800e7d2:	f000 fb15 	bl	800ee00 <ucdr_buffer_alignment>
 800e7d6:	4601      	mov	r1, r0
 800e7d8:	4620      	mov	r0, r4
 800e7da:	7d67      	ldrb	r7, [r4, #21]
 800e7dc:	f000 fb58 	bl	800ee90 <ucdr_advance_buffer>
 800e7e0:	2108      	movs	r1, #8
 800e7e2:	4620      	mov	r0, r4
 800e7e4:	f000 faac 	bl	800ed40 <ucdr_check_buffer_available_for>
 800e7e8:	2800      	cmp	r0, #0
 800e7ea:	d14e      	bne.n	800e88a <ucdr_serialize_int64_t+0xc6>
 800e7ec:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e7f0:	42ab      	cmp	r3, r5
 800e7f2:	d945      	bls.n	800e880 <ucdr_serialize_int64_t+0xbc>
 800e7f4:	1b5e      	subs	r6, r3, r5
 800e7f6:	60a3      	str	r3, [r4, #8]
 800e7f8:	6923      	ldr	r3, [r4, #16]
 800e7fa:	4620      	mov	r0, r4
 800e7fc:	f1c6 0808 	rsb	r8, r6, #8
 800e800:	4433      	add	r3, r6
 800e802:	4641      	mov	r1, r8
 800e804:	6123      	str	r3, [r4, #16]
 800e806:	f000 faa7 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800e80a:	2800      	cmp	r0, #0
 800e80c:	d074      	beq.n	800e8f8 <ucdr_serialize_int64_t+0x134>
 800e80e:	7d23      	ldrb	r3, [r4, #20]
 800e810:	2b01      	cmp	r3, #1
 800e812:	f000 809b 	beq.w	800e94c <ucdr_serialize_int64_t+0x188>
 800e816:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e81a:	702b      	strb	r3, [r5, #0]
 800e81c:	2e00      	cmp	r6, #0
 800e81e:	d078      	beq.n	800e912 <ucdr_serialize_int64_t+0x14e>
 800e820:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e824:	2e01      	cmp	r6, #1
 800e826:	706b      	strb	r3, [r5, #1]
 800e828:	d077      	beq.n	800e91a <ucdr_serialize_int64_t+0x156>
 800e82a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e82e:	2e02      	cmp	r6, #2
 800e830:	70ab      	strb	r3, [r5, #2]
 800e832:	d076      	beq.n	800e922 <ucdr_serialize_int64_t+0x15e>
 800e834:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e838:	2e03      	cmp	r6, #3
 800e83a:	70eb      	strb	r3, [r5, #3]
 800e83c:	d075      	beq.n	800e92a <ucdr_serialize_int64_t+0x166>
 800e83e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e842:	2e04      	cmp	r6, #4
 800e844:	712b      	strb	r3, [r5, #4]
 800e846:	d074      	beq.n	800e932 <ucdr_serialize_int64_t+0x16e>
 800e848:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e84c:	2e05      	cmp	r6, #5
 800e84e:	716b      	strb	r3, [r5, #5]
 800e850:	d073      	beq.n	800e93a <ucdr_serialize_int64_t+0x176>
 800e852:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e856:	2e06      	cmp	r6, #6
 800e858:	71ab      	strb	r3, [r5, #6]
 800e85a:	d072      	beq.n	800e942 <ucdr_serialize_int64_t+0x17e>
 800e85c:	f89d 3000 	ldrb.w	r3, [sp]
 800e860:	71eb      	strb	r3, [r5, #7]
 800e862:	6923      	ldr	r3, [r4, #16]
 800e864:	2108      	movs	r1, #8
 800e866:	68a2      	ldr	r2, [r4, #8]
 800e868:	3308      	adds	r3, #8
 800e86a:	7da0      	ldrb	r0, [r4, #22]
 800e86c:	4442      	add	r2, r8
 800e86e:	7561      	strb	r1, [r4, #21]
 800e870:	1b9e      	subs	r6, r3, r6
 800e872:	f080 0001 	eor.w	r0, r0, #1
 800e876:	60a2      	str	r2, [r4, #8]
 800e878:	6126      	str	r6, [r4, #16]
 800e87a:	b002      	add	sp, #8
 800e87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e880:	2108      	movs	r1, #8
 800e882:	4620      	mov	r0, r4
 800e884:	f000 fa68 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800e888:	b350      	cbz	r0, 800e8e0 <ucdr_serialize_int64_t+0x11c>
 800e88a:	7d23      	ldrb	r3, [r4, #20]
 800e88c:	2b01      	cmp	r3, #1
 800e88e:	d02d      	beq.n	800e8ec <ucdr_serialize_int64_t+0x128>
 800e890:	68a3      	ldr	r3, [r4, #8]
 800e892:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e896:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e89a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e89e:	7018      	strb	r0, [r3, #0]
 800e8a0:	68a3      	ldr	r3, [r4, #8]
 800e8a2:	705a      	strb	r2, [r3, #1]
 800e8a4:	68a3      	ldr	r3, [r4, #8]
 800e8a6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e8aa:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800e8ae:	7099      	strb	r1, [r3, #2]
 800e8b0:	68a3      	ldr	r3, [r4, #8]
 800e8b2:	70da      	strb	r2, [r3, #3]
 800e8b4:	68a3      	ldr	r3, [r4, #8]
 800e8b6:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e8ba:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800e8be:	7118      	strb	r0, [r3, #4]
 800e8c0:	68a3      	ldr	r3, [r4, #8]
 800e8c2:	715a      	strb	r2, [r3, #5]
 800e8c4:	68a3      	ldr	r3, [r4, #8]
 800e8c6:	f89d 2000 	ldrb.w	r2, [sp]
 800e8ca:	7199      	strb	r1, [r3, #6]
 800e8cc:	68a3      	ldr	r3, [r4, #8]
 800e8ce:	71da      	strb	r2, [r3, #7]
 800e8d0:	2108      	movs	r1, #8
 800e8d2:	68a2      	ldr	r2, [r4, #8]
 800e8d4:	6923      	ldr	r3, [r4, #16]
 800e8d6:	440a      	add	r2, r1
 800e8d8:	7561      	strb	r1, [r4, #21]
 800e8da:	440b      	add	r3, r1
 800e8dc:	60a2      	str	r2, [r4, #8]
 800e8de:	6123      	str	r3, [r4, #16]
 800e8e0:	7da0      	ldrb	r0, [r4, #22]
 800e8e2:	f080 0001 	eor.w	r0, r0, #1
 800e8e6:	b002      	add	sp, #8
 800e8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8ec:	466b      	mov	r3, sp
 800e8ee:	68a2      	ldr	r2, [r4, #8]
 800e8f0:	cb03      	ldmia	r3!, {r0, r1}
 800e8f2:	6010      	str	r0, [r2, #0]
 800e8f4:	6051      	str	r1, [r2, #4]
 800e8f6:	e7eb      	b.n	800e8d0 <ucdr_serialize_int64_t+0x10c>
 800e8f8:	68a2      	ldr	r2, [r4, #8]
 800e8fa:	6923      	ldr	r3, [r4, #16]
 800e8fc:	7da0      	ldrb	r0, [r4, #22]
 800e8fe:	1b92      	subs	r2, r2, r6
 800e900:	1b9b      	subs	r3, r3, r6
 800e902:	7567      	strb	r7, [r4, #21]
 800e904:	f080 0001 	eor.w	r0, r0, #1
 800e908:	60a2      	str	r2, [r4, #8]
 800e90a:	6123      	str	r3, [r4, #16]
 800e90c:	b002      	add	sp, #8
 800e90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e912:	68a3      	ldr	r3, [r4, #8]
 800e914:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e918:	701a      	strb	r2, [r3, #0]
 800e91a:	68a3      	ldr	r3, [r4, #8]
 800e91c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e920:	701a      	strb	r2, [r3, #0]
 800e922:	68a3      	ldr	r3, [r4, #8]
 800e924:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e928:	701a      	strb	r2, [r3, #0]
 800e92a:	68a3      	ldr	r3, [r4, #8]
 800e92c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e930:	701a      	strb	r2, [r3, #0]
 800e932:	68a3      	ldr	r3, [r4, #8]
 800e934:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e938:	701a      	strb	r2, [r3, #0]
 800e93a:	68a3      	ldr	r3, [r4, #8]
 800e93c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e940:	701a      	strb	r2, [r3, #0]
 800e942:	68a3      	ldr	r3, [r4, #8]
 800e944:	f89d 2000 	ldrb.w	r2, [sp]
 800e948:	701a      	strb	r2, [r3, #0]
 800e94a:	e78a      	b.n	800e862 <ucdr_serialize_int64_t+0x9e>
 800e94c:	4628      	mov	r0, r5
 800e94e:	466d      	mov	r5, sp
 800e950:	4632      	mov	r2, r6
 800e952:	4629      	mov	r1, r5
 800e954:	f00b ff77 	bl	801a846 <memcpy>
 800e958:	4642      	mov	r2, r8
 800e95a:	19a9      	adds	r1, r5, r6
 800e95c:	68a0      	ldr	r0, [r4, #8]
 800e95e:	f00b ff72 	bl	801a846 <memcpy>
 800e962:	e77e      	b.n	800e862 <ucdr_serialize_int64_t+0x9e>

0800e964 <ucdr_deserialize_int64_t>:
 800e964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e968:	4604      	mov	r4, r0
 800e96a:	460d      	mov	r5, r1
 800e96c:	2108      	movs	r1, #8
 800e96e:	f000 fa47 	bl	800ee00 <ucdr_buffer_alignment>
 800e972:	4601      	mov	r1, r0
 800e974:	4620      	mov	r0, r4
 800e976:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e97a:	f000 fa89 	bl	800ee90 <ucdr_advance_buffer>
 800e97e:	2108      	movs	r1, #8
 800e980:	4620      	mov	r0, r4
 800e982:	f000 f9dd 	bl	800ed40 <ucdr_check_buffer_available_for>
 800e986:	2800      	cmp	r0, #0
 800e988:	d151      	bne.n	800ea2e <ucdr_deserialize_int64_t+0xca>
 800e98a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e98e:	42be      	cmp	r6, r7
 800e990:	d948      	bls.n	800ea24 <ucdr_deserialize_int64_t+0xc0>
 800e992:	6923      	ldr	r3, [r4, #16]
 800e994:	4620      	mov	r0, r4
 800e996:	60a6      	str	r6, [r4, #8]
 800e998:	1bf6      	subs	r6, r6, r7
 800e99a:	4433      	add	r3, r6
 800e99c:	f1c6 0908 	rsb	r9, r6, #8
 800e9a0:	6123      	str	r3, [r4, #16]
 800e9a2:	4649      	mov	r1, r9
 800e9a4:	f000 f9d8 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800e9a8:	2800      	cmp	r0, #0
 800e9aa:	d06d      	beq.n	800ea88 <ucdr_deserialize_int64_t+0x124>
 800e9ac:	7d23      	ldrb	r3, [r4, #20]
 800e9ae:	2b01      	cmp	r3, #1
 800e9b0:	f000 8093 	beq.w	800eada <ucdr_deserialize_int64_t+0x176>
 800e9b4:	79fb      	ldrb	r3, [r7, #7]
 800e9b6:	702b      	strb	r3, [r5, #0]
 800e9b8:	2e00      	cmp	r6, #0
 800e9ba:	d072      	beq.n	800eaa2 <ucdr_deserialize_int64_t+0x13e>
 800e9bc:	79bb      	ldrb	r3, [r7, #6]
 800e9be:	2e01      	cmp	r6, #1
 800e9c0:	706b      	strb	r3, [r5, #1]
 800e9c2:	f105 0302 	add.w	r3, r5, #2
 800e9c6:	d070      	beq.n	800eaaa <ucdr_deserialize_int64_t+0x146>
 800e9c8:	797b      	ldrb	r3, [r7, #5]
 800e9ca:	2e02      	cmp	r6, #2
 800e9cc:	70ab      	strb	r3, [r5, #2]
 800e9ce:	f105 0303 	add.w	r3, r5, #3
 800e9d2:	d06e      	beq.n	800eab2 <ucdr_deserialize_int64_t+0x14e>
 800e9d4:	793b      	ldrb	r3, [r7, #4]
 800e9d6:	2e03      	cmp	r6, #3
 800e9d8:	70eb      	strb	r3, [r5, #3]
 800e9da:	f105 0304 	add.w	r3, r5, #4
 800e9de:	d06c      	beq.n	800eaba <ucdr_deserialize_int64_t+0x156>
 800e9e0:	78fb      	ldrb	r3, [r7, #3]
 800e9e2:	2e04      	cmp	r6, #4
 800e9e4:	712b      	strb	r3, [r5, #4]
 800e9e6:	f105 0305 	add.w	r3, r5, #5
 800e9ea:	d06a      	beq.n	800eac2 <ucdr_deserialize_int64_t+0x15e>
 800e9ec:	78bb      	ldrb	r3, [r7, #2]
 800e9ee:	2e05      	cmp	r6, #5
 800e9f0:	716b      	strb	r3, [r5, #5]
 800e9f2:	f105 0306 	add.w	r3, r5, #6
 800e9f6:	d068      	beq.n	800eaca <ucdr_deserialize_int64_t+0x166>
 800e9f8:	787b      	ldrb	r3, [r7, #1]
 800e9fa:	2e06      	cmp	r6, #6
 800e9fc:	71ab      	strb	r3, [r5, #6]
 800e9fe:	f105 0307 	add.w	r3, r5, #7
 800ea02:	d066      	beq.n	800ead2 <ucdr_deserialize_int64_t+0x16e>
 800ea04:	783b      	ldrb	r3, [r7, #0]
 800ea06:	71eb      	strb	r3, [r5, #7]
 800ea08:	6923      	ldr	r3, [r4, #16]
 800ea0a:	2108      	movs	r1, #8
 800ea0c:	68a2      	ldr	r2, [r4, #8]
 800ea0e:	3308      	adds	r3, #8
 800ea10:	7da0      	ldrb	r0, [r4, #22]
 800ea12:	444a      	add	r2, r9
 800ea14:	7561      	strb	r1, [r4, #21]
 800ea16:	1b9e      	subs	r6, r3, r6
 800ea18:	f080 0001 	eor.w	r0, r0, #1
 800ea1c:	60a2      	str	r2, [r4, #8]
 800ea1e:	6126      	str	r6, [r4, #16]
 800ea20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea24:	2108      	movs	r1, #8
 800ea26:	4620      	mov	r0, r4
 800ea28:	f000 f996 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800ea2c:	b310      	cbz	r0, 800ea74 <ucdr_deserialize_int64_t+0x110>
 800ea2e:	7d23      	ldrb	r3, [r4, #20]
 800ea30:	2b01      	cmp	r3, #1
 800ea32:	68a3      	ldr	r3, [r4, #8]
 800ea34:	d023      	beq.n	800ea7e <ucdr_deserialize_int64_t+0x11a>
 800ea36:	79db      	ldrb	r3, [r3, #7]
 800ea38:	702b      	strb	r3, [r5, #0]
 800ea3a:	68a3      	ldr	r3, [r4, #8]
 800ea3c:	799b      	ldrb	r3, [r3, #6]
 800ea3e:	706b      	strb	r3, [r5, #1]
 800ea40:	68a3      	ldr	r3, [r4, #8]
 800ea42:	795b      	ldrb	r3, [r3, #5]
 800ea44:	70ab      	strb	r3, [r5, #2]
 800ea46:	68a3      	ldr	r3, [r4, #8]
 800ea48:	791b      	ldrb	r3, [r3, #4]
 800ea4a:	70eb      	strb	r3, [r5, #3]
 800ea4c:	68a3      	ldr	r3, [r4, #8]
 800ea4e:	78db      	ldrb	r3, [r3, #3]
 800ea50:	712b      	strb	r3, [r5, #4]
 800ea52:	68a3      	ldr	r3, [r4, #8]
 800ea54:	789b      	ldrb	r3, [r3, #2]
 800ea56:	716b      	strb	r3, [r5, #5]
 800ea58:	68a3      	ldr	r3, [r4, #8]
 800ea5a:	785b      	ldrb	r3, [r3, #1]
 800ea5c:	71ab      	strb	r3, [r5, #6]
 800ea5e:	68a3      	ldr	r3, [r4, #8]
 800ea60:	781b      	ldrb	r3, [r3, #0]
 800ea62:	71eb      	strb	r3, [r5, #7]
 800ea64:	2108      	movs	r1, #8
 800ea66:	68a2      	ldr	r2, [r4, #8]
 800ea68:	6923      	ldr	r3, [r4, #16]
 800ea6a:	440a      	add	r2, r1
 800ea6c:	7561      	strb	r1, [r4, #21]
 800ea6e:	440b      	add	r3, r1
 800ea70:	60a2      	str	r2, [r4, #8]
 800ea72:	6123      	str	r3, [r4, #16]
 800ea74:	7da0      	ldrb	r0, [r4, #22]
 800ea76:	f080 0001 	eor.w	r0, r0, #1
 800ea7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea7e:	681a      	ldr	r2, [r3, #0]
 800ea80:	685b      	ldr	r3, [r3, #4]
 800ea82:	602a      	str	r2, [r5, #0]
 800ea84:	606b      	str	r3, [r5, #4]
 800ea86:	e7ed      	b.n	800ea64 <ucdr_deserialize_int64_t+0x100>
 800ea88:	68a2      	ldr	r2, [r4, #8]
 800ea8a:	6923      	ldr	r3, [r4, #16]
 800ea8c:	1b92      	subs	r2, r2, r6
 800ea8e:	7da0      	ldrb	r0, [r4, #22]
 800ea90:	1b9b      	subs	r3, r3, r6
 800ea92:	f884 8015 	strb.w	r8, [r4, #21]
 800ea96:	f080 0001 	eor.w	r0, r0, #1
 800ea9a:	60a2      	str	r2, [r4, #8]
 800ea9c:	6123      	str	r3, [r4, #16]
 800ea9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eaa2:	68a3      	ldr	r3, [r4, #8]
 800eaa4:	799b      	ldrb	r3, [r3, #6]
 800eaa6:	706b      	strb	r3, [r5, #1]
 800eaa8:	1cab      	adds	r3, r5, #2
 800eaaa:	68a2      	ldr	r2, [r4, #8]
 800eaac:	7952      	ldrb	r2, [r2, #5]
 800eaae:	f803 2b01 	strb.w	r2, [r3], #1
 800eab2:	68a2      	ldr	r2, [r4, #8]
 800eab4:	7912      	ldrb	r2, [r2, #4]
 800eab6:	f803 2b01 	strb.w	r2, [r3], #1
 800eaba:	68a2      	ldr	r2, [r4, #8]
 800eabc:	78d2      	ldrb	r2, [r2, #3]
 800eabe:	f803 2b01 	strb.w	r2, [r3], #1
 800eac2:	68a2      	ldr	r2, [r4, #8]
 800eac4:	7892      	ldrb	r2, [r2, #2]
 800eac6:	f803 2b01 	strb.w	r2, [r3], #1
 800eaca:	68a2      	ldr	r2, [r4, #8]
 800eacc:	7852      	ldrb	r2, [r2, #1]
 800eace:	f803 2b01 	strb.w	r2, [r3], #1
 800ead2:	68a2      	ldr	r2, [r4, #8]
 800ead4:	7812      	ldrb	r2, [r2, #0]
 800ead6:	701a      	strb	r2, [r3, #0]
 800ead8:	e796      	b.n	800ea08 <ucdr_deserialize_int64_t+0xa4>
 800eada:	4639      	mov	r1, r7
 800eadc:	4632      	mov	r2, r6
 800eade:	4628      	mov	r0, r5
 800eae0:	f00b feb1 	bl	801a846 <memcpy>
 800eae4:	464a      	mov	r2, r9
 800eae6:	19a8      	adds	r0, r5, r6
 800eae8:	68a1      	ldr	r1, [r4, #8]
 800eaea:	f00b feac 	bl	801a846 <memcpy>
 800eaee:	e78b      	b.n	800ea08 <ucdr_deserialize_int64_t+0xa4>

0800eaf0 <ucdr_serialize_float>:
 800eaf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaf4:	4604      	mov	r4, r0
 800eaf6:	b082      	sub	sp, #8
 800eaf8:	2104      	movs	r1, #4
 800eafa:	ed8d 0a01 	vstr	s0, [sp, #4]
 800eafe:	f000 f97f 	bl	800ee00 <ucdr_buffer_alignment>
 800eb02:	4601      	mov	r1, r0
 800eb04:	4620      	mov	r0, r4
 800eb06:	7d67      	ldrb	r7, [r4, #21]
 800eb08:	f000 f9c2 	bl	800ee90 <ucdr_advance_buffer>
 800eb0c:	2104      	movs	r1, #4
 800eb0e:	4620      	mov	r0, r4
 800eb10:	f000 f916 	bl	800ed40 <ucdr_check_buffer_available_for>
 800eb14:	2800      	cmp	r0, #0
 800eb16:	d139      	bne.n	800eb8c <ucdr_serialize_float+0x9c>
 800eb18:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800eb1c:	42ab      	cmp	r3, r5
 800eb1e:	d930      	bls.n	800eb82 <ucdr_serialize_float+0x92>
 800eb20:	1b5e      	subs	r6, r3, r5
 800eb22:	60a3      	str	r3, [r4, #8]
 800eb24:	6923      	ldr	r3, [r4, #16]
 800eb26:	4620      	mov	r0, r4
 800eb28:	f1c6 0804 	rsb	r8, r6, #4
 800eb2c:	4433      	add	r3, r6
 800eb2e:	4641      	mov	r1, r8
 800eb30:	6123      	str	r3, [r4, #16]
 800eb32:	f000 f911 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800eb36:	2800      	cmp	r0, #0
 800eb38:	d04c      	beq.n	800ebd4 <ucdr_serialize_float+0xe4>
 800eb3a:	7d23      	ldrb	r3, [r4, #20]
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	d063      	beq.n	800ec08 <ucdr_serialize_float+0x118>
 800eb40:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800eb44:	702b      	strb	r3, [r5, #0]
 800eb46:	2e00      	cmp	r6, #0
 800eb48:	d051      	beq.n	800ebee <ucdr_serialize_float+0xfe>
 800eb4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800eb4e:	2e01      	cmp	r6, #1
 800eb50:	706b      	strb	r3, [r5, #1]
 800eb52:	d050      	beq.n	800ebf6 <ucdr_serialize_float+0x106>
 800eb54:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800eb58:	2e02      	cmp	r6, #2
 800eb5a:	70ab      	strb	r3, [r5, #2]
 800eb5c:	d04f      	beq.n	800ebfe <ucdr_serialize_float+0x10e>
 800eb5e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800eb62:	70eb      	strb	r3, [r5, #3]
 800eb64:	6923      	ldr	r3, [r4, #16]
 800eb66:	2104      	movs	r1, #4
 800eb68:	68a2      	ldr	r2, [r4, #8]
 800eb6a:	3304      	adds	r3, #4
 800eb6c:	7da0      	ldrb	r0, [r4, #22]
 800eb6e:	4442      	add	r2, r8
 800eb70:	7561      	strb	r1, [r4, #21]
 800eb72:	1b9e      	subs	r6, r3, r6
 800eb74:	f080 0001 	eor.w	r0, r0, #1
 800eb78:	60a2      	str	r2, [r4, #8]
 800eb7a:	6126      	str	r6, [r4, #16]
 800eb7c:	b002      	add	sp, #8
 800eb7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb82:	2104      	movs	r1, #4
 800eb84:	4620      	mov	r0, r4
 800eb86:	f000 f8e7 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800eb8a:	b1d0      	cbz	r0, 800ebc2 <ucdr_serialize_float+0xd2>
 800eb8c:	7d23      	ldrb	r3, [r4, #20]
 800eb8e:	2b01      	cmp	r3, #1
 800eb90:	68a3      	ldr	r3, [r4, #8]
 800eb92:	d01c      	beq.n	800ebce <ucdr_serialize_float+0xde>
 800eb94:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800eb98:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eb9c:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800eba0:	7018      	strb	r0, [r3, #0]
 800eba2:	68a3      	ldr	r3, [r4, #8]
 800eba4:	705a      	strb	r2, [r3, #1]
 800eba6:	68a3      	ldr	r3, [r4, #8]
 800eba8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ebac:	7099      	strb	r1, [r3, #2]
 800ebae:	68a3      	ldr	r3, [r4, #8]
 800ebb0:	70da      	strb	r2, [r3, #3]
 800ebb2:	2104      	movs	r1, #4
 800ebb4:	68a2      	ldr	r2, [r4, #8]
 800ebb6:	6923      	ldr	r3, [r4, #16]
 800ebb8:	440a      	add	r2, r1
 800ebba:	7561      	strb	r1, [r4, #21]
 800ebbc:	440b      	add	r3, r1
 800ebbe:	60a2      	str	r2, [r4, #8]
 800ebc0:	6123      	str	r3, [r4, #16]
 800ebc2:	7da0      	ldrb	r0, [r4, #22]
 800ebc4:	f080 0001 	eor.w	r0, r0, #1
 800ebc8:	b002      	add	sp, #8
 800ebca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebce:	9a01      	ldr	r2, [sp, #4]
 800ebd0:	601a      	str	r2, [r3, #0]
 800ebd2:	e7ee      	b.n	800ebb2 <ucdr_serialize_float+0xc2>
 800ebd4:	68a2      	ldr	r2, [r4, #8]
 800ebd6:	6923      	ldr	r3, [r4, #16]
 800ebd8:	7da0      	ldrb	r0, [r4, #22]
 800ebda:	1b92      	subs	r2, r2, r6
 800ebdc:	1b9b      	subs	r3, r3, r6
 800ebde:	7567      	strb	r7, [r4, #21]
 800ebe0:	f080 0001 	eor.w	r0, r0, #1
 800ebe4:	60a2      	str	r2, [r4, #8]
 800ebe6:	6123      	str	r3, [r4, #16]
 800ebe8:	b002      	add	sp, #8
 800ebea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebee:	68a3      	ldr	r3, [r4, #8]
 800ebf0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ebf4:	701a      	strb	r2, [r3, #0]
 800ebf6:	68a3      	ldr	r3, [r4, #8]
 800ebf8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ebfc:	701a      	strb	r2, [r3, #0]
 800ebfe:	68a3      	ldr	r3, [r4, #8]
 800ec00:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ec04:	701a      	strb	r2, [r3, #0]
 800ec06:	e7ad      	b.n	800eb64 <ucdr_serialize_float+0x74>
 800ec08:	4628      	mov	r0, r5
 800ec0a:	ad01      	add	r5, sp, #4
 800ec0c:	4632      	mov	r2, r6
 800ec0e:	4629      	mov	r1, r5
 800ec10:	f00b fe19 	bl	801a846 <memcpy>
 800ec14:	4642      	mov	r2, r8
 800ec16:	19a9      	adds	r1, r5, r6
 800ec18:	68a0      	ldr	r0, [r4, #8]
 800ec1a:	f00b fe14 	bl	801a846 <memcpy>
 800ec1e:	e7a1      	b.n	800eb64 <ucdr_serialize_float+0x74>

0800ec20 <ucdr_deserialize_float>:
 800ec20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec24:	4604      	mov	r4, r0
 800ec26:	460d      	mov	r5, r1
 800ec28:	2104      	movs	r1, #4
 800ec2a:	f000 f8e9 	bl	800ee00 <ucdr_buffer_alignment>
 800ec2e:	4601      	mov	r1, r0
 800ec30:	4620      	mov	r0, r4
 800ec32:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ec36:	f000 f92b 	bl	800ee90 <ucdr_advance_buffer>
 800ec3a:	2104      	movs	r1, #4
 800ec3c:	4620      	mov	r0, r4
 800ec3e:	f000 f87f 	bl	800ed40 <ucdr_check_buffer_available_for>
 800ec42:	2800      	cmp	r0, #0
 800ec44:	d138      	bne.n	800ecb8 <ucdr_deserialize_float+0x98>
 800ec46:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ec4a:	42b7      	cmp	r7, r6
 800ec4c:	d92f      	bls.n	800ecae <ucdr_deserialize_float+0x8e>
 800ec4e:	6923      	ldr	r3, [r4, #16]
 800ec50:	4620      	mov	r0, r4
 800ec52:	60a7      	str	r7, [r4, #8]
 800ec54:	1bbf      	subs	r7, r7, r6
 800ec56:	443b      	add	r3, r7
 800ec58:	f1c7 0904 	rsb	r9, r7, #4
 800ec5c:	6123      	str	r3, [r4, #16]
 800ec5e:	4649      	mov	r1, r9
 800ec60:	f000 f87a 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800ec64:	2800      	cmp	r0, #0
 800ec66:	d046      	beq.n	800ecf6 <ucdr_deserialize_float+0xd6>
 800ec68:	7d23      	ldrb	r3, [r4, #20]
 800ec6a:	2b01      	cmp	r3, #1
 800ec6c:	d05c      	beq.n	800ed28 <ucdr_deserialize_float+0x108>
 800ec6e:	78f3      	ldrb	r3, [r6, #3]
 800ec70:	702b      	strb	r3, [r5, #0]
 800ec72:	2f00      	cmp	r7, #0
 800ec74:	d04c      	beq.n	800ed10 <ucdr_deserialize_float+0xf0>
 800ec76:	78b3      	ldrb	r3, [r6, #2]
 800ec78:	2f01      	cmp	r7, #1
 800ec7a:	706b      	strb	r3, [r5, #1]
 800ec7c:	f105 0302 	add.w	r3, r5, #2
 800ec80:	d04a      	beq.n	800ed18 <ucdr_deserialize_float+0xf8>
 800ec82:	7873      	ldrb	r3, [r6, #1]
 800ec84:	2f02      	cmp	r7, #2
 800ec86:	70ab      	strb	r3, [r5, #2]
 800ec88:	f105 0303 	add.w	r3, r5, #3
 800ec8c:	d048      	beq.n	800ed20 <ucdr_deserialize_float+0x100>
 800ec8e:	7833      	ldrb	r3, [r6, #0]
 800ec90:	70eb      	strb	r3, [r5, #3]
 800ec92:	6923      	ldr	r3, [r4, #16]
 800ec94:	2104      	movs	r1, #4
 800ec96:	68a2      	ldr	r2, [r4, #8]
 800ec98:	3304      	adds	r3, #4
 800ec9a:	7da0      	ldrb	r0, [r4, #22]
 800ec9c:	444a      	add	r2, r9
 800ec9e:	7561      	strb	r1, [r4, #21]
 800eca0:	1bdb      	subs	r3, r3, r7
 800eca2:	f080 0001 	eor.w	r0, r0, #1
 800eca6:	60a2      	str	r2, [r4, #8]
 800eca8:	6123      	str	r3, [r4, #16]
 800ecaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecae:	2104      	movs	r1, #4
 800ecb0:	4620      	mov	r0, r4
 800ecb2:	f000 f851 	bl	800ed58 <ucdr_check_final_buffer_behavior>
 800ecb6:	b1b0      	cbz	r0, 800ece6 <ucdr_deserialize_float+0xc6>
 800ecb8:	7d23      	ldrb	r3, [r4, #20]
 800ecba:	2b01      	cmp	r3, #1
 800ecbc:	68a3      	ldr	r3, [r4, #8]
 800ecbe:	d017      	beq.n	800ecf0 <ucdr_deserialize_float+0xd0>
 800ecc0:	78db      	ldrb	r3, [r3, #3]
 800ecc2:	702b      	strb	r3, [r5, #0]
 800ecc4:	68a3      	ldr	r3, [r4, #8]
 800ecc6:	789b      	ldrb	r3, [r3, #2]
 800ecc8:	706b      	strb	r3, [r5, #1]
 800ecca:	68a3      	ldr	r3, [r4, #8]
 800eccc:	785b      	ldrb	r3, [r3, #1]
 800ecce:	70ab      	strb	r3, [r5, #2]
 800ecd0:	68a3      	ldr	r3, [r4, #8]
 800ecd2:	781b      	ldrb	r3, [r3, #0]
 800ecd4:	70eb      	strb	r3, [r5, #3]
 800ecd6:	2104      	movs	r1, #4
 800ecd8:	68a2      	ldr	r2, [r4, #8]
 800ecda:	6923      	ldr	r3, [r4, #16]
 800ecdc:	440a      	add	r2, r1
 800ecde:	7561      	strb	r1, [r4, #21]
 800ece0:	440b      	add	r3, r1
 800ece2:	60a2      	str	r2, [r4, #8]
 800ece4:	6123      	str	r3, [r4, #16]
 800ece6:	7da0      	ldrb	r0, [r4, #22]
 800ece8:	f080 0001 	eor.w	r0, r0, #1
 800ecec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	602b      	str	r3, [r5, #0]
 800ecf4:	e7ef      	b.n	800ecd6 <ucdr_deserialize_float+0xb6>
 800ecf6:	68a2      	ldr	r2, [r4, #8]
 800ecf8:	6923      	ldr	r3, [r4, #16]
 800ecfa:	1bd2      	subs	r2, r2, r7
 800ecfc:	7da0      	ldrb	r0, [r4, #22]
 800ecfe:	1bdb      	subs	r3, r3, r7
 800ed00:	f884 8015 	strb.w	r8, [r4, #21]
 800ed04:	f080 0001 	eor.w	r0, r0, #1
 800ed08:	60a2      	str	r2, [r4, #8]
 800ed0a:	6123      	str	r3, [r4, #16]
 800ed0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed10:	68a3      	ldr	r3, [r4, #8]
 800ed12:	789b      	ldrb	r3, [r3, #2]
 800ed14:	706b      	strb	r3, [r5, #1]
 800ed16:	1cab      	adds	r3, r5, #2
 800ed18:	68a2      	ldr	r2, [r4, #8]
 800ed1a:	7852      	ldrb	r2, [r2, #1]
 800ed1c:	f803 2b01 	strb.w	r2, [r3], #1
 800ed20:	68a2      	ldr	r2, [r4, #8]
 800ed22:	7812      	ldrb	r2, [r2, #0]
 800ed24:	701a      	strb	r2, [r3, #0]
 800ed26:	e7b4      	b.n	800ec92 <ucdr_deserialize_float+0x72>
 800ed28:	4631      	mov	r1, r6
 800ed2a:	463a      	mov	r2, r7
 800ed2c:	4628      	mov	r0, r5
 800ed2e:	f00b fd8a 	bl	801a846 <memcpy>
 800ed32:	464a      	mov	r2, r9
 800ed34:	19e8      	adds	r0, r5, r7
 800ed36:	68a1      	ldr	r1, [r4, #8]
 800ed38:	f00b fd85 	bl	801a846 <memcpy>
 800ed3c:	e7a9      	b.n	800ec92 <ucdr_deserialize_float+0x72>
 800ed3e:	bf00      	nop

0800ed40 <ucdr_check_buffer_available_for>:
 800ed40:	7d83      	ldrb	r3, [r0, #22]
 800ed42:	b93b      	cbnz	r3, 800ed54 <ucdr_check_buffer_available_for+0x14>
 800ed44:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800ed48:	4419      	add	r1, r3
 800ed4a:	4288      	cmp	r0, r1
 800ed4c:	bf34      	ite	cc
 800ed4e:	2000      	movcc	r0, #0
 800ed50:	2001      	movcs	r0, #1
 800ed52:	4770      	bx	lr
 800ed54:	2000      	movs	r0, #0
 800ed56:	4770      	bx	lr

0800ed58 <ucdr_check_final_buffer_behavior>:
 800ed58:	7d83      	ldrb	r3, [r0, #22]
 800ed5a:	b943      	cbnz	r3, 800ed6e <ucdr_check_final_buffer_behavior+0x16>
 800ed5c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800ed60:	b510      	push	{r4, lr}
 800ed62:	4291      	cmp	r1, r2
 800ed64:	4604      	mov	r4, r0
 800ed66:	d205      	bcs.n	800ed74 <ucdr_check_final_buffer_behavior+0x1c>
 800ed68:	2301      	movs	r3, #1
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	bd10      	pop	{r4, pc}
 800ed6e:	2300      	movs	r3, #0
 800ed70:	4618      	mov	r0, r3
 800ed72:	4770      	bx	lr
 800ed74:	6982      	ldr	r2, [r0, #24]
 800ed76:	b13a      	cbz	r2, 800ed88 <ucdr_check_final_buffer_behavior+0x30>
 800ed78:	69c1      	ldr	r1, [r0, #28]
 800ed7a:	4790      	blx	r2
 800ed7c:	f080 0301 	eor.w	r3, r0, #1
 800ed80:	75a0      	strb	r0, [r4, #22]
 800ed82:	b2db      	uxtb	r3, r3
 800ed84:	4618      	mov	r0, r3
 800ed86:	bd10      	pop	{r4, pc}
 800ed88:	2001      	movs	r0, #1
 800ed8a:	75a0      	strb	r0, [r4, #22]
 800ed8c:	e7fa      	b.n	800ed84 <ucdr_check_final_buffer_behavior+0x2c>
 800ed8e:	bf00      	nop

0800ed90 <ucdr_set_on_full_buffer_callback>:
 800ed90:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800ed94:	4770      	bx	lr
 800ed96:	bf00      	nop

0800ed98 <ucdr_init_buffer_origin_offset_endian>:
 800ed98:	b410      	push	{r4}
 800ed9a:	9c01      	ldr	r4, [sp, #4]
 800ed9c:	440a      	add	r2, r1
 800ed9e:	6001      	str	r1, [r0, #0]
 800eda0:	6042      	str	r2, [r0, #4]
 800eda2:	190a      	adds	r2, r1, r4
 800eda4:	441c      	add	r4, r3
 800eda6:	6082      	str	r2, [r0, #8]
 800eda8:	2200      	movs	r2, #0
 800edaa:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800edae:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800edb2:	7542      	strb	r2, [r0, #21]
 800edb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800edb8:	7582      	strb	r2, [r0, #22]
 800edba:	7503      	strb	r3, [r0, #20]
 800edbc:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800edc0:	4770      	bx	lr
 800edc2:	bf00      	nop

0800edc4 <ucdr_init_buffer_origin_offset>:
 800edc4:	b510      	push	{r4, lr}
 800edc6:	b082      	sub	sp, #8
 800edc8:	9c04      	ldr	r4, [sp, #16]
 800edca:	9400      	str	r4, [sp, #0]
 800edcc:	2401      	movs	r4, #1
 800edce:	9401      	str	r4, [sp, #4]
 800edd0:	f7ff ffe2 	bl	800ed98 <ucdr_init_buffer_origin_offset_endian>
 800edd4:	b002      	add	sp, #8
 800edd6:	bd10      	pop	{r4, pc}

0800edd8 <ucdr_init_buffer_origin>:
 800edd8:	b510      	push	{r4, lr}
 800edda:	2400      	movs	r4, #0
 800eddc:	b082      	sub	sp, #8
 800edde:	9400      	str	r4, [sp, #0]
 800ede0:	f7ff fff0 	bl	800edc4 <ucdr_init_buffer_origin_offset>
 800ede4:	b002      	add	sp, #8
 800ede6:	bd10      	pop	{r4, pc}

0800ede8 <ucdr_init_buffer>:
 800ede8:	2300      	movs	r3, #0
 800edea:	f7ff bff5 	b.w	800edd8 <ucdr_init_buffer_origin>
 800edee:	bf00      	nop

0800edf0 <ucdr_alignment>:
 800edf0:	fbb0 f2f1 	udiv	r2, r0, r1
 800edf4:	fb02 0011 	mls	r0, r2, r1, r0
 800edf8:	1e4b      	subs	r3, r1, #1
 800edfa:	1a08      	subs	r0, r1, r0
 800edfc:	4018      	ands	r0, r3
 800edfe:	4770      	bx	lr

0800ee00 <ucdr_buffer_alignment>:
 800ee00:	7d43      	ldrb	r3, [r0, #21]
 800ee02:	428b      	cmp	r3, r1
 800ee04:	d209      	bcs.n	800ee1a <ucdr_buffer_alignment+0x1a>
 800ee06:	6903      	ldr	r3, [r0, #16]
 800ee08:	1e4a      	subs	r2, r1, #1
 800ee0a:	fbb3 f0f1 	udiv	r0, r3, r1
 800ee0e:	fb01 3010 	mls	r0, r1, r0, r3
 800ee12:	1a09      	subs	r1, r1, r0
 800ee14:	ea01 0002 	and.w	r0, r1, r2
 800ee18:	4770      	bx	lr
 800ee1a:	2000      	movs	r0, #0
 800ee1c:	4770      	bx	lr
 800ee1e:	bf00      	nop

0800ee20 <ucdr_align_to>:
 800ee20:	b538      	push	{r3, r4, r5, lr}
 800ee22:	4604      	mov	r4, r0
 800ee24:	460d      	mov	r5, r1
 800ee26:	f7ff ffeb 	bl	800ee00 <ucdr_buffer_alignment>
 800ee2a:	68a3      	ldr	r3, [r4, #8]
 800ee2c:	7565      	strb	r5, [r4, #21]
 800ee2e:	181a      	adds	r2, r3, r0
 800ee30:	6923      	ldr	r3, [r4, #16]
 800ee32:	4418      	add	r0, r3
 800ee34:	6863      	ldr	r3, [r4, #4]
 800ee36:	4293      	cmp	r3, r2
 800ee38:	6120      	str	r0, [r4, #16]
 800ee3a:	bf28      	it	cs
 800ee3c:	4613      	movcs	r3, r2
 800ee3e:	60a3      	str	r3, [r4, #8]
 800ee40:	bd38      	pop	{r3, r4, r5, pc}
 800ee42:	bf00      	nop

0800ee44 <ucdr_buffer_length>:
 800ee44:	6882      	ldr	r2, [r0, #8]
 800ee46:	6800      	ldr	r0, [r0, #0]
 800ee48:	1a10      	subs	r0, r2, r0
 800ee4a:	4770      	bx	lr

0800ee4c <ucdr_buffer_remaining>:
 800ee4c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800ee50:	1a10      	subs	r0, r2, r0
 800ee52:	4770      	bx	lr

0800ee54 <ucdr_check_final_buffer_behavior_array>:
 800ee54:	b538      	push	{r3, r4, r5, lr}
 800ee56:	7d83      	ldrb	r3, [r0, #22]
 800ee58:	b9a3      	cbnz	r3, 800ee84 <ucdr_check_final_buffer_behavior_array+0x30>
 800ee5a:	4604      	mov	r4, r0
 800ee5c:	460d      	mov	r5, r1
 800ee5e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d300      	bcc.n	800ee68 <ucdr_check_final_buffer_behavior_array+0x14>
 800ee66:	b931      	cbnz	r1, 800ee76 <ucdr_check_final_buffer_behavior_array+0x22>
 800ee68:	4620      	mov	r0, r4
 800ee6a:	f7ff ffef 	bl	800ee4c <ucdr_buffer_remaining>
 800ee6e:	42a8      	cmp	r0, r5
 800ee70:	bf28      	it	cs
 800ee72:	4628      	movcs	r0, r5
 800ee74:	bd38      	pop	{r3, r4, r5, pc}
 800ee76:	6983      	ldr	r3, [r0, #24]
 800ee78:	b133      	cbz	r3, 800ee88 <ucdr_check_final_buffer_behavior_array+0x34>
 800ee7a:	69c1      	ldr	r1, [r0, #28]
 800ee7c:	4798      	blx	r3
 800ee7e:	75a0      	strb	r0, [r4, #22]
 800ee80:	2800      	cmp	r0, #0
 800ee82:	d0f1      	beq.n	800ee68 <ucdr_check_final_buffer_behavior_array+0x14>
 800ee84:	2000      	movs	r0, #0
 800ee86:	bd38      	pop	{r3, r4, r5, pc}
 800ee88:	2301      	movs	r3, #1
 800ee8a:	7583      	strb	r3, [r0, #22]
 800ee8c:	e7fa      	b.n	800ee84 <ucdr_check_final_buffer_behavior_array+0x30>
 800ee8e:	bf00      	nop

0800ee90 <ucdr_advance_buffer>:
 800ee90:	b538      	push	{r3, r4, r5, lr}
 800ee92:	4604      	mov	r4, r0
 800ee94:	460d      	mov	r5, r1
 800ee96:	f7ff ff53 	bl	800ed40 <ucdr_check_buffer_available_for>
 800ee9a:	b178      	cbz	r0, 800eebc <ucdr_advance_buffer+0x2c>
 800ee9c:	6923      	ldr	r3, [r4, #16]
 800ee9e:	68a2      	ldr	r2, [r4, #8]
 800eea0:	442b      	add	r3, r5
 800eea2:	442a      	add	r2, r5
 800eea4:	6123      	str	r3, [r4, #16]
 800eea6:	2301      	movs	r3, #1
 800eea8:	60a2      	str	r2, [r4, #8]
 800eeaa:	7563      	strb	r3, [r4, #21]
 800eeac:	bd38      	pop	{r3, r4, r5, pc}
 800eeae:	68a2      	ldr	r2, [r4, #8]
 800eeb0:	1a2d      	subs	r5, r5, r0
 800eeb2:	6923      	ldr	r3, [r4, #16]
 800eeb4:	4402      	add	r2, r0
 800eeb6:	4418      	add	r0, r3
 800eeb8:	60a2      	str	r2, [r4, #8]
 800eeba:	6120      	str	r0, [r4, #16]
 800eebc:	4629      	mov	r1, r5
 800eebe:	2201      	movs	r2, #1
 800eec0:	4620      	mov	r0, r4
 800eec2:	f7ff ffc7 	bl	800ee54 <ucdr_check_final_buffer_behavior_array>
 800eec6:	2800      	cmp	r0, #0
 800eec8:	d1f1      	bne.n	800eeae <ucdr_advance_buffer+0x1e>
 800eeca:	2301      	movs	r3, #1
 800eecc:	7563      	strb	r3, [r4, #21]
 800eece:	bd38      	pop	{r3, r4, r5, pc}

0800eed0 <ucdr_serialize_sequence_char>:
 800eed0:	b570      	push	{r4, r5, r6, lr}
 800eed2:	4615      	mov	r5, r2
 800eed4:	460e      	mov	r6, r1
 800eed6:	7d01      	ldrb	r1, [r0, #20]
 800eed8:	4604      	mov	r4, r0
 800eeda:	f7fe fe9b 	bl	800dc14 <ucdr_serialize_endian_uint32_t>
 800eede:	b90d      	cbnz	r5, 800eee4 <ucdr_serialize_sequence_char+0x14>
 800eee0:	2001      	movs	r0, #1
 800eee2:	bd70      	pop	{r4, r5, r6, pc}
 800eee4:	462b      	mov	r3, r5
 800eee6:	4632      	mov	r2, r6
 800eee8:	7d21      	ldrb	r1, [r4, #20]
 800eeea:	4620      	mov	r0, r4
 800eeec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eef0:	f7fe b9d6 	b.w	800d2a0 <ucdr_serialize_endian_array_char>

0800eef4 <ucdr_deserialize_sequence_char>:
 800eef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eef8:	461d      	mov	r5, r3
 800eefa:	4616      	mov	r6, r2
 800eefc:	460f      	mov	r7, r1
 800eefe:	461a      	mov	r2, r3
 800ef00:	7d01      	ldrb	r1, [r0, #20]
 800ef02:	4604      	mov	r4, r0
 800ef04:	f7fe ffae 	bl	800de64 <ucdr_deserialize_endian_uint32_t>
 800ef08:	682b      	ldr	r3, [r5, #0]
 800ef0a:	429e      	cmp	r6, r3
 800ef0c:	d201      	bcs.n	800ef12 <ucdr_deserialize_sequence_char+0x1e>
 800ef0e:	2201      	movs	r2, #1
 800ef10:	75a2      	strb	r2, [r4, #22]
 800ef12:	b913      	cbnz	r3, 800ef1a <ucdr_deserialize_sequence_char+0x26>
 800ef14:	2001      	movs	r0, #1
 800ef16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef1a:	463a      	mov	r2, r7
 800ef1c:	7d21      	ldrb	r1, [r4, #20]
 800ef1e:	4620      	mov	r0, r4
 800ef20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef24:	f7fe b9ee 	b.w	800d304 <ucdr_deserialize_endian_array_char>

0800ef28 <ucdr_serialize_sequence_uint8_t>:
 800ef28:	b570      	push	{r4, r5, r6, lr}
 800ef2a:	4615      	mov	r5, r2
 800ef2c:	460e      	mov	r6, r1
 800ef2e:	7d01      	ldrb	r1, [r0, #20]
 800ef30:	4604      	mov	r4, r0
 800ef32:	f7fe fe6f 	bl	800dc14 <ucdr_serialize_endian_uint32_t>
 800ef36:	b90d      	cbnz	r5, 800ef3c <ucdr_serialize_sequence_uint8_t+0x14>
 800ef38:	2001      	movs	r0, #1
 800ef3a:	bd70      	pop	{r4, r5, r6, pc}
 800ef3c:	462b      	mov	r3, r5
 800ef3e:	4632      	mov	r2, r6
 800ef40:	7d21      	ldrb	r1, [r4, #20]
 800ef42:	4620      	mov	r0, r4
 800ef44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef48:	f7fe ba42 	b.w	800d3d0 <ucdr_serialize_endian_array_uint8_t>

0800ef4c <ucdr_deserialize_sequence_uint8_t>:
 800ef4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef50:	461d      	mov	r5, r3
 800ef52:	4616      	mov	r6, r2
 800ef54:	460f      	mov	r7, r1
 800ef56:	461a      	mov	r2, r3
 800ef58:	7d01      	ldrb	r1, [r0, #20]
 800ef5a:	4604      	mov	r4, r0
 800ef5c:	f7fe ff82 	bl	800de64 <ucdr_deserialize_endian_uint32_t>
 800ef60:	682b      	ldr	r3, [r5, #0]
 800ef62:	429e      	cmp	r6, r3
 800ef64:	d201      	bcs.n	800ef6a <ucdr_deserialize_sequence_uint8_t+0x1e>
 800ef66:	2201      	movs	r2, #1
 800ef68:	75a2      	strb	r2, [r4, #22]
 800ef6a:	b913      	cbnz	r3, 800ef72 <ucdr_deserialize_sequence_uint8_t+0x26>
 800ef6c:	2001      	movs	r0, #1
 800ef6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef72:	463a      	mov	r2, r7
 800ef74:	7d21      	ldrb	r1, [r4, #20]
 800ef76:	4620      	mov	r0, r4
 800ef78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef7c:	f7fe ba8e 	b.w	800d49c <ucdr_deserialize_endian_array_uint8_t>

0800ef80 <ucdr_serialize_sequence_int32_t>:
 800ef80:	b570      	push	{r4, r5, r6, lr}
 800ef82:	4615      	mov	r5, r2
 800ef84:	460e      	mov	r6, r1
 800ef86:	7d01      	ldrb	r1, [r0, #20]
 800ef88:	4604      	mov	r4, r0
 800ef8a:	f7fe fe43 	bl	800dc14 <ucdr_serialize_endian_uint32_t>
 800ef8e:	b90d      	cbnz	r5, 800ef94 <ucdr_serialize_sequence_int32_t+0x14>
 800ef90:	2001      	movs	r0, #1
 800ef92:	bd70      	pop	{r4, r5, r6, pc}
 800ef94:	462b      	mov	r3, r5
 800ef96:	4632      	mov	r2, r6
 800ef98:	7d21      	ldrb	r1, [r4, #20]
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800efa0:	f7fe bab0 	b.w	800d504 <ucdr_serialize_endian_array_int32_t>

0800efa4 <ucdr_deserialize_sequence_int32_t>:
 800efa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efa8:	461d      	mov	r5, r3
 800efaa:	4616      	mov	r6, r2
 800efac:	460f      	mov	r7, r1
 800efae:	461a      	mov	r2, r3
 800efb0:	7d01      	ldrb	r1, [r0, #20]
 800efb2:	4604      	mov	r4, r0
 800efb4:	f7fe ff56 	bl	800de64 <ucdr_deserialize_endian_uint32_t>
 800efb8:	682b      	ldr	r3, [r5, #0]
 800efba:	429e      	cmp	r6, r3
 800efbc:	d201      	bcs.n	800efc2 <ucdr_deserialize_sequence_int32_t+0x1e>
 800efbe:	2201      	movs	r2, #1
 800efc0:	75a2      	strb	r2, [r4, #22]
 800efc2:	b913      	cbnz	r3, 800efca <ucdr_deserialize_sequence_int32_t+0x26>
 800efc4:	2001      	movs	r0, #1
 800efc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efca:	463a      	mov	r2, r7
 800efcc:	7d21      	ldrb	r1, [r4, #20]
 800efce:	4620      	mov	r0, r4
 800efd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efd4:	f7fe baec 	b.w	800d5b0 <ucdr_deserialize_endian_array_int32_t>

0800efd8 <racs_services__srv__Control_Event__get_type_description.part.0>:
 800efd8:	b510      	push	{r4, lr}
 800efda:	2000      	movs	r0, #0
 800efdc:	4c13      	ldr	r4, [pc, #76]	; (800f02c <racs_services__srv__Control_Event__get_type_description.part.0+0x54>)
 800efde:	f005 ff9b 	bl	8014f18 <builtin_interfaces__msg__Time__get_type_description>
 800efe2:	300c      	adds	r0, #12
 800efe4:	4b12      	ldr	r3, [pc, #72]	; (800f030 <racs_services__srv__Control_Event__get_type_description.part.0+0x58>)
 800efe6:	c807      	ldmia	r0, {r0, r1, r2}
 800efe8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800efec:	7823      	ldrb	r3, [r4, #0]
 800efee:	b90b      	cbnz	r3, 800eff4 <racs_services__srv__Control_Event__get_type_description.part.0+0x1c>
 800eff0:	2301      	movs	r3, #1
 800eff2:	7023      	strb	r3, [r4, #0]
 800eff4:	4a0f      	ldr	r2, [pc, #60]	; (800f034 <racs_services__srv__Control_Event__get_type_description.part.0+0x5c>)
 800eff6:	4b10      	ldr	r3, [pc, #64]	; (800f038 <racs_services__srv__Control_Event__get_type_description.part.0+0x60>)
 800eff8:	4c10      	ldr	r4, [pc, #64]	; (800f03c <racs_services__srv__Control_Event__get_type_description.part.0+0x64>)
 800effa:	ca07      	ldmia	r2, {r0, r1, r2}
 800effc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f000:	7823      	ldrb	r3, [r4, #0]
 800f002:	b90b      	cbnz	r3, 800f008 <racs_services__srv__Control_Event__get_type_description.part.0+0x30>
 800f004:	2301      	movs	r3, #1
 800f006:	7023      	strb	r3, [r4, #0]
 800f008:	4b0d      	ldr	r3, [pc, #52]	; (800f040 <racs_services__srv__Control_Event__get_type_description.part.0+0x68>)
 800f00a:	4c0e      	ldr	r4, [pc, #56]	; (800f044 <racs_services__srv__Control_Event__get_type_description.part.0+0x6c>)
 800f00c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f010:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f014:	2000      	movs	r0, #0
 800f016:	3418      	adds	r4, #24
 800f018:	f005 ff1e 	bl	8014e58 <service_msgs__msg__ServiceEventInfo__get_type_description>
 800f01c:	300c      	adds	r0, #12
 800f01e:	4b0a      	ldr	r3, [pc, #40]	; (800f048 <racs_services__srv__Control_Event__get_type_description.part.0+0x70>)
 800f020:	c807      	ldmia	r0, {r0, r1, r2}
 800f022:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f026:	2201      	movs	r2, #1
 800f028:	701a      	strb	r2, [r3, #0]
 800f02a:	bd10      	pop	{r4, pc}
 800f02c:	2000b54c 	.word	0x2000b54c
 800f030:	20000c08 	.word	0x20000c08
 800f034:	0801c24c 	.word	0x0801c24c
 800f038:	20000c20 	.word	0x20000c20
 800f03c:	2000b54a 	.word	0x2000b54a
 800f040:	0801c228 	.word	0x0801c228
 800f044:	20000c38 	.word	0x20000c38
 800f048:	2000b549 	.word	0x2000b549

0800f04c <racs_services__srv__Control__get_type_hash>:
 800f04c:	4800      	ldr	r0, [pc, #0]	; (800f050 <racs_services__srv__Control__get_type_hash+0x4>)
 800f04e:	4770      	bx	lr
 800f050:	20000ad8 	.word	0x20000ad8

0800f054 <racs_services__srv__Control_Request__get_type_hash>:
 800f054:	4800      	ldr	r0, [pc, #0]	; (800f058 <racs_services__srv__Control_Request__get_type_hash+0x4>)
 800f056:	4770      	bx	lr
 800f058:	20000ab4 	.word	0x20000ab4

0800f05c <racs_services__srv__Control_Response__get_type_hash>:
 800f05c:	4800      	ldr	r0, [pc, #0]	; (800f060 <racs_services__srv__Control_Response__get_type_hash+0x4>)
 800f05e:	4770      	bx	lr
 800f060:	20000a90 	.word	0x20000a90

0800f064 <racs_services__srv__Control_Event__get_type_hash>:
 800f064:	4800      	ldr	r0, [pc, #0]	; (800f068 <racs_services__srv__Control_Event__get_type_hash+0x4>)
 800f066:	4770      	bx	lr
 800f068:	20000a6c 	.word	0x20000a6c

0800f06c <racs_services__srv__Control__get_type_description>:
 800f06c:	b538      	push	{r3, r4, r5, lr}
 800f06e:	4d1c      	ldr	r5, [pc, #112]	; (800f0e0 <racs_services__srv__Control__get_type_description+0x74>)
 800f070:	7828      	ldrb	r0, [r5, #0]
 800f072:	b108      	cbz	r0, 800f078 <racs_services__srv__Control__get_type_description+0xc>
 800f074:	481b      	ldr	r0, [pc, #108]	; (800f0e4 <racs_services__srv__Control__get_type_description+0x78>)
 800f076:	bd38      	pop	{r3, r4, r5, pc}
 800f078:	f005 ff4e 	bl	8014f18 <builtin_interfaces__msg__Time__get_type_description>
 800f07c:	300c      	adds	r0, #12
 800f07e:	4b1a      	ldr	r3, [pc, #104]	; (800f0e8 <racs_services__srv__Control__get_type_description+0x7c>)
 800f080:	c807      	ldmia	r0, {r0, r1, r2}
 800f082:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f086:	4b19      	ldr	r3, [pc, #100]	; (800f0ec <racs_services__srv__Control__get_type_description+0x80>)
 800f088:	781b      	ldrb	r3, [r3, #0]
 800f08a:	b32b      	cbz	r3, 800f0d8 <racs_services__srv__Control__get_type_description+0x6c>
 800f08c:	4a18      	ldr	r2, [pc, #96]	; (800f0f0 <racs_services__srv__Control__get_type_description+0x84>)
 800f08e:	4b19      	ldr	r3, [pc, #100]	; (800f0f4 <racs_services__srv__Control__get_type_description+0x88>)
 800f090:	4c19      	ldr	r4, [pc, #100]	; (800f0f8 <racs_services__srv__Control__get_type_description+0x8c>)
 800f092:	ca07      	ldmia	r2, {r0, r1, r2}
 800f094:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f098:	7823      	ldrb	r3, [r4, #0]
 800f09a:	b90b      	cbnz	r3, 800f0a0 <racs_services__srv__Control__get_type_description+0x34>
 800f09c:	2301      	movs	r3, #1
 800f09e:	7023      	strb	r3, [r4, #0]
 800f0a0:	4a16      	ldr	r2, [pc, #88]	; (800f0fc <racs_services__srv__Control__get_type_description+0x90>)
 800f0a2:	4b17      	ldr	r3, [pc, #92]	; (800f100 <racs_services__srv__Control__get_type_description+0x94>)
 800f0a4:	4c17      	ldr	r4, [pc, #92]	; (800f104 <racs_services__srv__Control__get_type_description+0x98>)
 800f0a6:	ca07      	ldmia	r2, {r0, r1, r2}
 800f0a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f0ac:	7823      	ldrb	r3, [r4, #0]
 800f0ae:	b90b      	cbnz	r3, 800f0b4 <racs_services__srv__Control__get_type_description+0x48>
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	7023      	strb	r3, [r4, #0]
 800f0b4:	4b14      	ldr	r3, [pc, #80]	; (800f108 <racs_services__srv__Control__get_type_description+0x9c>)
 800f0b6:	4c15      	ldr	r4, [pc, #84]	; (800f10c <racs_services__srv__Control__get_type_description+0xa0>)
 800f0b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f0bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f0c0:	2000      	movs	r0, #0
 800f0c2:	3418      	adds	r4, #24
 800f0c4:	f005 fec8 	bl	8014e58 <service_msgs__msg__ServiceEventInfo__get_type_description>
 800f0c8:	300c      	adds	r0, #12
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	c807      	ldmia	r0, {r0, r1, r2}
 800f0ce:	702b      	strb	r3, [r5, #0]
 800f0d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f0d4:	4803      	ldr	r0, [pc, #12]	; (800f0e4 <racs_services__srv__Control__get_type_description+0x78>)
 800f0d6:	bd38      	pop	{r3, r4, r5, pc}
 800f0d8:	f7ff ff7e 	bl	800efd8 <racs_services__srv__Control_Event__get_type_description.part.0>
 800f0dc:	e7d6      	b.n	800f08c <racs_services__srv__Control__get_type_description+0x20>
 800f0de:	bf00      	nop
 800f0e0:	2000b54d 	.word	0x2000b54d
 800f0e4:	0801c264 	.word	0x0801c264
 800f0e8:	20000f30 	.word	0x20000f30
 800f0ec:	2000b549 	.word	0x2000b549
 800f0f0:	0801c204 	.word	0x0801c204
 800f0f4:	20000f48 	.word	0x20000f48
 800f0f8:	2000b54c 	.word	0x2000b54c
 800f0fc:	0801c24c 	.word	0x0801c24c
 800f100:	20000f60 	.word	0x20000f60
 800f104:	2000b54a 	.word	0x2000b54a
 800f108:	0801c228 	.word	0x0801c228
 800f10c:	20000f78 	.word	0x20000f78

0800f110 <racs_services__srv__Control_Request__get_type_description>:
 800f110:	4b03      	ldr	r3, [pc, #12]	; (800f120 <racs_services__srv__Control_Request__get_type_description+0x10>)
 800f112:	781a      	ldrb	r2, [r3, #0]
 800f114:	b90a      	cbnz	r2, 800f11a <racs_services__srv__Control_Request__get_type_description+0xa>
 800f116:	2201      	movs	r2, #1
 800f118:	701a      	strb	r2, [r3, #0]
 800f11a:	4802      	ldr	r0, [pc, #8]	; (800f124 <racs_services__srv__Control_Request__get_type_description+0x14>)
 800f11c:	4770      	bx	lr
 800f11e:	bf00      	nop
 800f120:	2000b54c 	.word	0x2000b54c
 800f124:	0801c240 	.word	0x0801c240

0800f128 <racs_services__srv__Control_Response__get_type_description>:
 800f128:	4b03      	ldr	r3, [pc, #12]	; (800f138 <racs_services__srv__Control_Response__get_type_description+0x10>)
 800f12a:	781a      	ldrb	r2, [r3, #0]
 800f12c:	b90a      	cbnz	r2, 800f132 <racs_services__srv__Control_Response__get_type_description+0xa>
 800f12e:	2201      	movs	r2, #1
 800f130:	701a      	strb	r2, [r3, #0]
 800f132:	4802      	ldr	r0, [pc, #8]	; (800f13c <racs_services__srv__Control_Response__get_type_description+0x14>)
 800f134:	4770      	bx	lr
 800f136:	bf00      	nop
 800f138:	2000b54a 	.word	0x2000b54a
 800f13c:	0801c21c 	.word	0x0801c21c

0800f140 <racs_services__srv__Control_Event__get_type_description>:
 800f140:	b508      	push	{r3, lr}
 800f142:	4b04      	ldr	r3, [pc, #16]	; (800f154 <racs_services__srv__Control_Event__get_type_description+0x14>)
 800f144:	781b      	ldrb	r3, [r3, #0]
 800f146:	b10b      	cbz	r3, 800f14c <racs_services__srv__Control_Event__get_type_description+0xc>
 800f148:	4803      	ldr	r0, [pc, #12]	; (800f158 <racs_services__srv__Control_Event__get_type_description+0x18>)
 800f14a:	bd08      	pop	{r3, pc}
 800f14c:	f7ff ff44 	bl	800efd8 <racs_services__srv__Control_Event__get_type_description.part.0>
 800f150:	4801      	ldr	r0, [pc, #4]	; (800f158 <racs_services__srv__Control_Event__get_type_description+0x18>)
 800f152:	bd08      	pop	{r3, pc}
 800f154:	2000b549 	.word	0x2000b549
 800f158:	0801c1f8 	.word	0x0801c1f8

0800f15c <racs_services__srv__Control__get_type_description_sources>:
 800f15c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f160:	4b2c      	ldr	r3, [pc, #176]	; (800f214 <racs_services__srv__Control__get_type_description_sources+0xb8>)
 800f162:	f893 9000 	ldrb.w	r9, [r3]
 800f166:	f1b9 0f00 	cmp.w	r9, #0
 800f16a:	d002      	beq.n	800f172 <racs_services__srv__Control__get_type_description_sources+0x16>
 800f16c:	482a      	ldr	r0, [pc, #168]	; (800f218 <racs_services__srv__Control__get_type_description_sources+0xbc>)
 800f16e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f172:	4d2a      	ldr	r5, [pc, #168]	; (800f21c <racs_services__srv__Control__get_type_description_sources+0xc0>)
 800f174:	4c2a      	ldr	r4, [pc, #168]	; (800f220 <racs_services__srv__Control__get_type_description_sources+0xc4>)
 800f176:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800f228 <racs_services__srv__Control__get_type_description_sources+0xcc>
 800f17a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800f22c <racs_services__srv__Control__get_type_description_sources+0xd0>
 800f17e:	4e29      	ldr	r6, [pc, #164]	; (800f224 <racs_services__srv__Control__get_type_description_sources+0xc8>)
 800f180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f188:	682b      	ldr	r3, [r5, #0]
 800f18a:	4625      	mov	r5, r4
 800f18c:	4648      	mov	r0, r9
 800f18e:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 800f192:	f845 3b04 	str.w	r3, [r5], #4
 800f196:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 800f19a:	f005 fec9 	bl	8014f30 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 800f19e:	4684      	mov	ip, r0
 800f1a0:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 800f1a4:	3494      	adds	r4, #148	; 0x94
 800f1a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f1aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f1ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f1b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f1b2:	f8dc 3000 	ldr.w	r3, [ip]
 800f1b6:	602b      	str	r3, [r5, #0]
 800f1b8:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800f1bc:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 800f1c0:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800f1c4:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 800f1c8:	f8db 3000 	ldr.w	r3, [fp]
 800f1cc:	f8ca 3000 	str.w	r3, [sl]
 800f1d0:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800f1d4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f1d6:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800f1da:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f1dc:	f8d8 3000 	ldr.w	r3, [r8]
 800f1e0:	603b      	str	r3, [r7, #0]
 800f1e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f1e4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f1e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f1ea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f1ee:	6833      	ldr	r3, [r6, #0]
 800f1f0:	4648      	mov	r0, r9
 800f1f2:	f8ce 3000 	str.w	r3, [lr]
 800f1f6:	f005 fe47 	bl	8014e88 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 800f1fa:	2301      	movs	r3, #1
 800f1fc:	4a05      	ldr	r2, [pc, #20]	; (800f214 <racs_services__srv__Control__get_type_description_sources+0xb8>)
 800f1fe:	4605      	mov	r5, r0
 800f200:	7013      	strb	r3, [r2, #0]
 800f202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f20a:	682b      	ldr	r3, [r5, #0]
 800f20c:	4802      	ldr	r0, [pc, #8]	; (800f218 <racs_services__srv__Control__get_type_description_sources+0xbc>)
 800f20e:	6023      	str	r3, [r4, #0]
 800f210:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f214:	2000b548 	.word	0x2000b548
 800f218:	0801c33c 	.word	0x0801c33c
 800f21c:	0801c2f4 	.word	0x0801c2f4
 800f220:	2000b604 	.word	0x2000b604
 800f224:	0801c2ac 	.word	0x0801c2ac
 800f228:	0801c288 	.word	0x0801c288
 800f22c:	0801c2d0 	.word	0x0801c2d0

0800f230 <racs_services__srv__Control_Request__get_type_description_sources>:
 800f230:	4b09      	ldr	r3, [pc, #36]	; (800f258 <racs_services__srv__Control_Request__get_type_description_sources+0x28>)
 800f232:	781a      	ldrb	r2, [r3, #0]
 800f234:	b96a      	cbnz	r2, 800f252 <racs_services__srv__Control_Request__get_type_description_sources+0x22>
 800f236:	2201      	movs	r2, #1
 800f238:	b430      	push	{r4, r5}
 800f23a:	4d08      	ldr	r5, [pc, #32]	; (800f25c <racs_services__srv__Control_Request__get_type_description_sources+0x2c>)
 800f23c:	4c08      	ldr	r4, [pc, #32]	; (800f260 <racs_services__srv__Control_Request__get_type_description_sources+0x30>)
 800f23e:	701a      	strb	r2, [r3, #0]
 800f240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f248:	682b      	ldr	r3, [r5, #0]
 800f24a:	4806      	ldr	r0, [pc, #24]	; (800f264 <racs_services__srv__Control_Request__get_type_description_sources+0x34>)
 800f24c:	6023      	str	r3, [r4, #0]
 800f24e:	bc30      	pop	{r4, r5}
 800f250:	4770      	bx	lr
 800f252:	4804      	ldr	r0, [pc, #16]	; (800f264 <racs_services__srv__Control_Request__get_type_description_sources+0x34>)
 800f254:	4770      	bx	lr
 800f256:	bf00      	nop
 800f258:	2000b54f 	.word	0x2000b54f
 800f25c:	0801c2d0 	.word	0x0801c2d0
 800f260:	2000b700 	.word	0x2000b700
 800f264:	0801c330 	.word	0x0801c330

0800f268 <racs_services__srv__Control_Response__get_type_description_sources>:
 800f268:	4b09      	ldr	r3, [pc, #36]	; (800f290 <racs_services__srv__Control_Response__get_type_description_sources+0x28>)
 800f26a:	781a      	ldrb	r2, [r3, #0]
 800f26c:	b96a      	cbnz	r2, 800f28a <racs_services__srv__Control_Response__get_type_description_sources+0x22>
 800f26e:	2201      	movs	r2, #1
 800f270:	b430      	push	{r4, r5}
 800f272:	4d08      	ldr	r5, [pc, #32]	; (800f294 <racs_services__srv__Control_Response__get_type_description_sources+0x2c>)
 800f274:	4c08      	ldr	r4, [pc, #32]	; (800f298 <racs_services__srv__Control_Response__get_type_description_sources+0x30>)
 800f276:	701a      	strb	r2, [r3, #0]
 800f278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f27a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f27c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f27e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f280:	682b      	ldr	r3, [r5, #0]
 800f282:	4806      	ldr	r0, [pc, #24]	; (800f29c <racs_services__srv__Control_Response__get_type_description_sources+0x34>)
 800f284:	6023      	str	r3, [r4, #0]
 800f286:	bc30      	pop	{r4, r5}
 800f288:	4770      	bx	lr
 800f28a:	4804      	ldr	r0, [pc, #16]	; (800f29c <racs_services__srv__Control_Response__get_type_description_sources+0x34>)
 800f28c:	4770      	bx	lr
 800f28e:	bf00      	nop
 800f290:	2000b54e 	.word	0x2000b54e
 800f294:	0801c2ac 	.word	0x0801c2ac
 800f298:	2000b6dc 	.word	0x2000b6dc
 800f29c:	0801c324 	.word	0x0801c324

0800f2a0 <racs_services__srv__Control_Event__get_type_description_sources>:
 800f2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2a4:	4e27      	ldr	r6, [pc, #156]	; (800f344 <racs_services__srv__Control_Event__get_type_description_sources+0xa4>)
 800f2a6:	f896 8000 	ldrb.w	r8, [r6]
 800f2aa:	f1b8 0f00 	cmp.w	r8, #0
 800f2ae:	d002      	beq.n	800f2b6 <racs_services__srv__Control_Event__get_type_description_sources+0x16>
 800f2b0:	4825      	ldr	r0, [pc, #148]	; (800f348 <racs_services__srv__Control_Event__get_type_description_sources+0xa8>)
 800f2b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2b6:	4d25      	ldr	r5, [pc, #148]	; (800f34c <racs_services__srv__Control_Event__get_type_description_sources+0xac>)
 800f2b8:	4c25      	ldr	r4, [pc, #148]	; (800f350 <racs_services__srv__Control_Event__get_type_description_sources+0xb0>)
 800f2ba:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800f358 <racs_services__srv__Control_Event__get_type_description_sources+0xb8>
 800f2be:	4f25      	ldr	r7, [pc, #148]	; (800f354 <racs_services__srv__Control_Event__get_type_description_sources+0xb4>)
 800f2c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f2c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f2c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f2c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f2c8:	682b      	ldr	r3, [r5, #0]
 800f2ca:	4625      	mov	r5, r4
 800f2cc:	4640      	mov	r0, r8
 800f2ce:	f104 0928 	add.w	r9, r4, #40	; 0x28
 800f2d2:	f845 3b04 	str.w	r3, [r5], #4
 800f2d6:	f005 fe2b 	bl	8014f30 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 800f2da:	4684      	mov	ip, r0
 800f2dc:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 800f2e0:	3470      	adds	r4, #112	; 0x70
 800f2e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f2e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f2e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f2ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f2ee:	f8dc 3000 	ldr.w	r3, [ip]
 800f2f2:	602b      	str	r3, [r5, #0]
 800f2f4:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 800f2f8:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800f2fc:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 800f300:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800f304:	f8da 3000 	ldr.w	r3, [sl]
 800f308:	f8c9 3000 	str.w	r3, [r9]
 800f30c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f30e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f312:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800f314:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	4640      	mov	r0, r8
 800f31c:	f8ce 3000 	str.w	r3, [lr]
 800f320:	f005 fdb2 	bl	8014e88 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 800f324:	2301      	movs	r3, #1
 800f326:	4684      	mov	ip, r0
 800f328:	7033      	strb	r3, [r6, #0]
 800f32a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f32e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f330:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f336:	f8dc 3000 	ldr.w	r3, [ip]
 800f33a:	4803      	ldr	r0, [pc, #12]	; (800f348 <racs_services__srv__Control_Event__get_type_description_sources+0xa8>)
 800f33c:	6023      	str	r3, [r4, #0]
 800f33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f342:	bf00      	nop
 800f344:	2000b54b 	.word	0x2000b54b
 800f348:	0801c318 	.word	0x0801c318
 800f34c:	0801c288 	.word	0x0801c288
 800f350:	2000b550 	.word	0x2000b550
 800f354:	0801c2ac 	.word	0x0801c2ac
 800f358:	0801c2d0 	.word	0x0801c2d0

0800f35c <racs_services__srv__Control_Request__Sequence__init.part.0>:
 800f35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f360:	b086      	sub	sp, #24
 800f362:	460f      	mov	r7, r1
 800f364:	4680      	mov	r8, r0
 800f366:	a801      	add	r0, sp, #4
 800f368:	f7fd fcb4 	bl	800ccd4 <rcutils_get_default_allocator>
 800f36c:	b367      	cbz	r7, 800f3c8 <racs_services__srv__Control_Request__Sequence__init.part.0+0x6c>
 800f36e:	2110      	movs	r1, #16
 800f370:	4638      	mov	r0, r7
 800f372:	e9dd 3a04 	ldrd	r3, sl, [sp, #16]
 800f376:	4652      	mov	r2, sl
 800f378:	4798      	blx	r3
 800f37a:	4681      	mov	r9, r0
 800f37c:	b370      	cbz	r0, 800f3dc <racs_services__srv__Control_Request__Sequence__init.part.0+0x80>
 800f37e:	1d06      	adds	r6, r0, #4
 800f380:	2500      	movs	r5, #0
 800f382:	e003      	b.n	800f38c <racs_services__srv__Control_Request__Sequence__init.part.0+0x30>
 800f384:	3501      	adds	r5, #1
 800f386:	3610      	adds	r6, #16
 800f388:	42af      	cmp	r7, r5
 800f38a:	d01e      	beq.n	800f3ca <racs_services__srv__Control_Request__Sequence__init.part.0+0x6e>
 800f38c:	4630      	mov	r0, r6
 800f38e:	2100      	movs	r1, #0
 800f390:	f7fd fd5e 	bl	800ce50 <rosidl_runtime_c__int32__Sequence__init>
 800f394:	4604      	mov	r4, r0
 800f396:	2800      	cmp	r0, #0
 800f398:	d1f4      	bne.n	800f384 <racs_services__srv__Control_Request__Sequence__init.part.0+0x28>
 800f39a:	4630      	mov	r0, r6
 800f39c:	f7fd fd70 	bl	800ce80 <rosidl_runtime_c__int32__Sequence__fini>
 800f3a0:	42af      	cmp	r7, r5
 800f3a2:	d912      	bls.n	800f3ca <racs_services__srv__Control_Request__Sequence__init.part.0+0x6e>
 800f3a4:	b145      	cbz	r5, 800f3b8 <racs_services__srv__Control_Request__Sequence__init.part.0+0x5c>
 800f3a6:	eb09 1605 	add.w	r6, r9, r5, lsl #4
 800f3aa:	3e0c      	subs	r6, #12
 800f3ac:	4630      	mov	r0, r6
 800f3ae:	3e10      	subs	r6, #16
 800f3b0:	f7fd fd66 	bl	800ce80 <rosidl_runtime_c__int32__Sequence__fini>
 800f3b4:	3d01      	subs	r5, #1
 800f3b6:	d1f9      	bne.n	800f3ac <racs_services__srv__Control_Request__Sequence__init.part.0+0x50>
 800f3b8:	4648      	mov	r0, r9
 800f3ba:	9b02      	ldr	r3, [sp, #8]
 800f3bc:	4651      	mov	r1, sl
 800f3be:	4798      	blx	r3
 800f3c0:	4620      	mov	r0, r4
 800f3c2:	b006      	add	sp, #24
 800f3c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3c8:	46b9      	mov	r9, r7
 800f3ca:	2401      	movs	r4, #1
 800f3cc:	f8c8 7008 	str.w	r7, [r8, #8]
 800f3d0:	e9c8 9700 	strd	r9, r7, [r8]
 800f3d4:	4620      	mov	r0, r4
 800f3d6:	b006      	add	sp, #24
 800f3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3dc:	4604      	mov	r4, r0
 800f3de:	e7f9      	b.n	800f3d4 <racs_services__srv__Control_Request__Sequence__init.part.0+0x78>

0800f3e0 <racs_services__srv__Control_Event__fini.part.0>:
 800f3e0:	b530      	push	{r4, r5, lr}
 800f3e2:	b087      	sub	sp, #28
 800f3e4:	4605      	mov	r5, r0
 800f3e6:	f005 fd8d 	bl	8014f04 <service_msgs__msg__ServiceEventInfo__fini>
 800f3ea:	a801      	add	r0, sp, #4
 800f3ec:	f7fd fc72 	bl	800ccd4 <rcutils_get_default_allocator>
 800f3f0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800f3f2:	b1b3      	cbz	r3, 800f422 <racs_services__srv__Control_Event__fini.part.0+0x42>
 800f3f4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800f3f6:	b162      	cbz	r2, 800f412 <racs_services__srv__Control_Event__fini.part.0+0x32>
 800f3f8:	2400      	movs	r4, #0
 800f3fa:	eb13 1004 	adds.w	r0, r3, r4, lsl #4
 800f3fe:	f100 0004 	add.w	r0, r0, #4
 800f402:	d01c      	beq.n	800f43e <racs_services__srv__Control_Event__fini.part.0+0x5e>
 800f404:	f7fd fd3c 	bl	800ce80 <rosidl_runtime_c__int32__Sequence__fini>
 800f408:	3401      	adds	r4, #1
 800f40a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800f40c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800f40e:	4294      	cmp	r4, r2
 800f410:	d3f3      	bcc.n	800f3fa <racs_services__srv__Control_Event__fini.part.0+0x1a>
 800f412:	4618      	mov	r0, r3
 800f414:	9a02      	ldr	r2, [sp, #8]
 800f416:	9905      	ldr	r1, [sp, #20]
 800f418:	4790      	blx	r2
 800f41a:	2300      	movs	r3, #0
 800f41c:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 800f420:	632b      	str	r3, [r5, #48]	; 0x30
 800f422:	a801      	add	r0, sp, #4
 800f424:	f7fd fc56 	bl	800ccd4 <rcutils_get_default_allocator>
 800f428:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800f42a:	b130      	cbz	r0, 800f43a <racs_services__srv__Control_Event__fini.part.0+0x5a>
 800f42c:	9b02      	ldr	r3, [sp, #8]
 800f42e:	9905      	ldr	r1, [sp, #20]
 800f430:	4798      	blx	r3
 800f432:	2300      	movs	r3, #0
 800f434:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 800f438:	63eb      	str	r3, [r5, #60]	; 0x3c
 800f43a:	b007      	add	sp, #28
 800f43c:	bd30      	pop	{r4, r5, pc}
 800f43e:	3401      	adds	r4, #1
 800f440:	4294      	cmp	r4, r2
 800f442:	d3da      	bcc.n	800f3fa <racs_services__srv__Control_Event__fini.part.0+0x1a>
 800f444:	e7e5      	b.n	800f412 <racs_services__srv__Control_Event__fini.part.0+0x32>
 800f446:	bf00      	nop

0800f448 <racs_services__srv__Control_Request__init>:
 800f448:	b538      	push	{r3, r4, r5, lr}
 800f44a:	b140      	cbz	r0, 800f45e <racs_services__srv__Control_Request__init+0x16>
 800f44c:	1d05      	adds	r5, r0, #4
 800f44e:	2100      	movs	r1, #0
 800f450:	4628      	mov	r0, r5
 800f452:	f7fd fcfd 	bl	800ce50 <rosidl_runtime_c__int32__Sequence__init>
 800f456:	4604      	mov	r4, r0
 800f458:	b120      	cbz	r0, 800f464 <racs_services__srv__Control_Request__init+0x1c>
 800f45a:	4620      	mov	r0, r4
 800f45c:	bd38      	pop	{r3, r4, r5, pc}
 800f45e:	4604      	mov	r4, r0
 800f460:	4620      	mov	r0, r4
 800f462:	bd38      	pop	{r3, r4, r5, pc}
 800f464:	4628      	mov	r0, r5
 800f466:	f7fd fd0b 	bl	800ce80 <rosidl_runtime_c__int32__Sequence__fini>
 800f46a:	4620      	mov	r0, r4
 800f46c:	bd38      	pop	{r3, r4, r5, pc}
 800f46e:	bf00      	nop

0800f470 <racs_services__srv__Control_Request__fini>:
 800f470:	b110      	cbz	r0, 800f478 <racs_services__srv__Control_Request__fini+0x8>
 800f472:	3004      	adds	r0, #4
 800f474:	f7fd bd04 	b.w	800ce80 <rosidl_runtime_c__int32__Sequence__fini>
 800f478:	4770      	bx	lr
 800f47a:	bf00      	nop

0800f47c <racs_services__srv__Control_Request__copy>:
 800f47c:	b130      	cbz	r0, 800f48c <racs_services__srv__Control_Request__copy+0x10>
 800f47e:	b129      	cbz	r1, 800f48c <racs_services__srv__Control_Request__copy+0x10>
 800f480:	f830 3b04 	ldrh.w	r3, [r0], #4
 800f484:	f821 3b04 	strh.w	r3, [r1], #4
 800f488:	f7fd bd0e 	b.w	800cea8 <rosidl_runtime_c__int32__Sequence__copy>
 800f48c:	2000      	movs	r0, #0
 800f48e:	4770      	bx	lr

0800f490 <racs_services__srv__Control_Request__Sequence__init>:
 800f490:	b108      	cbz	r0, 800f496 <racs_services__srv__Control_Request__Sequence__init+0x6>
 800f492:	f7ff bf63 	b.w	800f35c <racs_services__srv__Control_Request__Sequence__init.part.0>
 800f496:	4770      	bx	lr

0800f498 <racs_services__srv__Control_Request__Sequence__fini>:
 800f498:	b320      	cbz	r0, 800f4e4 <racs_services__srv__Control_Request__Sequence__fini+0x4c>
 800f49a:	b530      	push	{r4, r5, lr}
 800f49c:	b087      	sub	sp, #28
 800f49e:	4605      	mov	r5, r0
 800f4a0:	a801      	add	r0, sp, #4
 800f4a2:	f7fd fc17 	bl	800ccd4 <rcutils_get_default_allocator>
 800f4a6:	682b      	ldr	r3, [r5, #0]
 800f4a8:	b1b3      	cbz	r3, 800f4d8 <racs_services__srv__Control_Request__Sequence__fini+0x40>
 800f4aa:	68aa      	ldr	r2, [r5, #8]
 800f4ac:	b162      	cbz	r2, 800f4c8 <racs_services__srv__Control_Request__Sequence__fini+0x30>
 800f4ae:	2400      	movs	r4, #0
 800f4b0:	eb13 1004 	adds.w	r0, r3, r4, lsl #4
 800f4b4:	f100 0004 	add.w	r0, r0, #4
 800f4b8:	d010      	beq.n	800f4dc <racs_services__srv__Control_Request__Sequence__fini+0x44>
 800f4ba:	f7fd fce1 	bl	800ce80 <rosidl_runtime_c__int32__Sequence__fini>
 800f4be:	3401      	adds	r4, #1
 800f4c0:	68aa      	ldr	r2, [r5, #8]
 800f4c2:	682b      	ldr	r3, [r5, #0]
 800f4c4:	4294      	cmp	r4, r2
 800f4c6:	d3f3      	bcc.n	800f4b0 <racs_services__srv__Control_Request__Sequence__fini+0x18>
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	9a02      	ldr	r2, [sp, #8]
 800f4cc:	9905      	ldr	r1, [sp, #20]
 800f4ce:	4790      	blx	r2
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	e9c5 3300 	strd	r3, r3, [r5]
 800f4d6:	60ab      	str	r3, [r5, #8]
 800f4d8:	b007      	add	sp, #28
 800f4da:	bd30      	pop	{r4, r5, pc}
 800f4dc:	3401      	adds	r4, #1
 800f4de:	4294      	cmp	r4, r2
 800f4e0:	d3e6      	bcc.n	800f4b0 <racs_services__srv__Control_Request__Sequence__fini+0x18>
 800f4e2:	e7f1      	b.n	800f4c8 <racs_services__srv__Control_Request__Sequence__fini+0x30>
 800f4e4:	4770      	bx	lr
 800f4e6:	bf00      	nop

0800f4e8 <racs_services__srv__Control_Response__init>:
 800f4e8:	3800      	subs	r0, #0
 800f4ea:	bf18      	it	ne
 800f4ec:	2001      	movne	r0, #1
 800f4ee:	4770      	bx	lr

0800f4f0 <racs_services__srv__Control_Response__fini>:
 800f4f0:	4770      	bx	lr
 800f4f2:	bf00      	nop

0800f4f4 <racs_services__srv__Control_Response__copy>:
 800f4f4:	b120      	cbz	r0, 800f500 <racs_services__srv__Control_Response__copy+0xc>
 800f4f6:	b119      	cbz	r1, 800f500 <racs_services__srv__Control_Response__copy+0xc>
 800f4f8:	7803      	ldrb	r3, [r0, #0]
 800f4fa:	2001      	movs	r0, #1
 800f4fc:	700b      	strb	r3, [r1, #0]
 800f4fe:	4770      	bx	lr
 800f500:	2000      	movs	r0, #0
 800f502:	4770      	bx	lr

0800f504 <racs_services__srv__Control_Response__Sequence__init>:
 800f504:	b530      	push	{r4, r5, lr}
 800f506:	4604      	mov	r4, r0
 800f508:	b087      	sub	sp, #28
 800f50a:	b148      	cbz	r0, 800f520 <racs_services__srv__Control_Response__Sequence__init+0x1c>
 800f50c:	460d      	mov	r5, r1
 800f50e:	a801      	add	r0, sp, #4
 800f510:	f7fd fbe0 	bl	800ccd4 <rcutils_get_default_allocator>
 800f514:	b935      	cbnz	r5, 800f524 <racs_services__srv__Control_Response__Sequence__init+0x20>
 800f516:	462b      	mov	r3, r5
 800f518:	2001      	movs	r0, #1
 800f51a:	60a5      	str	r5, [r4, #8]
 800f51c:	e9c4 3500 	strd	r3, r5, [r4]
 800f520:	b007      	add	sp, #28
 800f522:	bd30      	pop	{r4, r5, pc}
 800f524:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800f528:	2101      	movs	r1, #1
 800f52a:	4628      	mov	r0, r5
 800f52c:	4798      	blx	r3
 800f52e:	4603      	mov	r3, r0
 800f530:	2800      	cmp	r0, #0
 800f532:	d1f1      	bne.n	800f518 <racs_services__srv__Control_Response__Sequence__init+0x14>
 800f534:	e7f4      	b.n	800f520 <racs_services__srv__Control_Response__Sequence__init+0x1c>
 800f536:	bf00      	nop

0800f538 <racs_services__srv__Control_Response__Sequence__fini>:
 800f538:	b180      	cbz	r0, 800f55c <racs_services__srv__Control_Response__Sequence__fini+0x24>
 800f53a:	b510      	push	{r4, lr}
 800f53c:	b086      	sub	sp, #24
 800f53e:	4604      	mov	r4, r0
 800f540:	a801      	add	r0, sp, #4
 800f542:	f7fd fbc7 	bl	800ccd4 <rcutils_get_default_allocator>
 800f546:	6820      	ldr	r0, [r4, #0]
 800f548:	b130      	cbz	r0, 800f558 <racs_services__srv__Control_Response__Sequence__fini+0x20>
 800f54a:	9b02      	ldr	r3, [sp, #8]
 800f54c:	9905      	ldr	r1, [sp, #20]
 800f54e:	4798      	blx	r3
 800f550:	2300      	movs	r3, #0
 800f552:	e9c4 3300 	strd	r3, r3, [r4]
 800f556:	60a3      	str	r3, [r4, #8]
 800f558:	b006      	add	sp, #24
 800f55a:	bd10      	pop	{r4, pc}
 800f55c:	4770      	bx	lr
 800f55e:	bf00      	nop

0800f560 <racs_services__srv__Control_Event__init>:
 800f560:	b570      	push	{r4, r5, r6, lr}
 800f562:	4604      	mov	r4, r0
 800f564:	b086      	sub	sp, #24
 800f566:	b1c8      	cbz	r0, 800f59c <racs_services__srv__Control_Event__init+0x3c>
 800f568:	f005 fcba 	bl	8014ee0 <service_msgs__msg__ServiceEventInfo__init>
 800f56c:	4605      	mov	r5, r0
 800f56e:	b178      	cbz	r0, 800f590 <racs_services__srv__Control_Event__init+0x30>
 800f570:	2600      	movs	r6, #0
 800f572:	a801      	add	r0, sp, #4
 800f574:	f7fd fbae 	bl	800ccd4 <rcutils_get_default_allocator>
 800f578:	a801      	add	r0, sp, #4
 800f57a:	6326      	str	r6, [r4, #48]	; 0x30
 800f57c:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
 800f580:	f7fd fba8 	bl	800ccd4 <rcutils_get_default_allocator>
 800f584:	4628      	mov	r0, r5
 800f586:	63e6      	str	r6, [r4, #60]	; 0x3c
 800f588:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
 800f58c:	b006      	add	sp, #24
 800f58e:	bd70      	pop	{r4, r5, r6, pc}
 800f590:	4620      	mov	r0, r4
 800f592:	f7ff ff25 	bl	800f3e0 <racs_services__srv__Control_Event__fini.part.0>
 800f596:	4628      	mov	r0, r5
 800f598:	b006      	add	sp, #24
 800f59a:	bd70      	pop	{r4, r5, r6, pc}
 800f59c:	4605      	mov	r5, r0
 800f59e:	4628      	mov	r0, r5
 800f5a0:	b006      	add	sp, #24
 800f5a2:	bd70      	pop	{r4, r5, r6, pc}

0800f5a4 <racs_services__srv__Control_Event__fini>:
 800f5a4:	2800      	cmp	r0, #0
 800f5a6:	d032      	beq.n	800f60e <racs_services__srv__Control_Event__fini+0x6a>
 800f5a8:	b530      	push	{r4, r5, lr}
 800f5aa:	b087      	sub	sp, #28
 800f5ac:	4605      	mov	r5, r0
 800f5ae:	f005 fca9 	bl	8014f04 <service_msgs__msg__ServiceEventInfo__fini>
 800f5b2:	a801      	add	r0, sp, #4
 800f5b4:	f7fd fb8e 	bl	800ccd4 <rcutils_get_default_allocator>
 800f5b8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800f5ba:	b1b3      	cbz	r3, 800f5ea <racs_services__srv__Control_Event__fini+0x46>
 800f5bc:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800f5be:	b162      	cbz	r2, 800f5da <racs_services__srv__Control_Event__fini+0x36>
 800f5c0:	2400      	movs	r4, #0
 800f5c2:	eb13 1004 	adds.w	r0, r3, r4, lsl #4
 800f5c6:	f100 0004 	add.w	r0, r0, #4
 800f5ca:	d01c      	beq.n	800f606 <racs_services__srv__Control_Event__fini+0x62>
 800f5cc:	f7fd fc58 	bl	800ce80 <rosidl_runtime_c__int32__Sequence__fini>
 800f5d0:	3401      	adds	r4, #1
 800f5d2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800f5d4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800f5d6:	4294      	cmp	r4, r2
 800f5d8:	d3f3      	bcc.n	800f5c2 <racs_services__srv__Control_Event__fini+0x1e>
 800f5da:	4618      	mov	r0, r3
 800f5dc:	9a02      	ldr	r2, [sp, #8]
 800f5de:	9905      	ldr	r1, [sp, #20]
 800f5e0:	4790      	blx	r2
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 800f5e8:	632b      	str	r3, [r5, #48]	; 0x30
 800f5ea:	a801      	add	r0, sp, #4
 800f5ec:	f7fd fb72 	bl	800ccd4 <rcutils_get_default_allocator>
 800f5f0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800f5f2:	b130      	cbz	r0, 800f602 <racs_services__srv__Control_Event__fini+0x5e>
 800f5f4:	9b02      	ldr	r3, [sp, #8]
 800f5f6:	9905      	ldr	r1, [sp, #20]
 800f5f8:	4798      	blx	r3
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 800f600:	63eb      	str	r3, [r5, #60]	; 0x3c
 800f602:	b007      	add	sp, #28
 800f604:	bd30      	pop	{r4, r5, pc}
 800f606:	3401      	adds	r4, #1
 800f608:	4294      	cmp	r4, r2
 800f60a:	d3da      	bcc.n	800f5c2 <racs_services__srv__Control_Event__fini+0x1e>
 800f60c:	e7e5      	b.n	800f5da <racs_services__srv__Control_Event__fini+0x36>
 800f60e:	4770      	bx	lr

0800f610 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control>:
 800f610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f614:	2900      	cmp	r1, #0
 800f616:	d04d      	beq.n	800f6b4 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0xa4>
 800f618:	4605      	mov	r5, r0
 800f61a:	2800      	cmp	r0, #0
 800f61c:	d04a      	beq.n	800f6b4 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0xa4>
 800f61e:	460e      	mov	r6, r1
 800f620:	4698      	mov	r8, r3
 800f622:	2040      	movs	r0, #64	; 0x40
 800f624:	680b      	ldr	r3, [r1, #0]
 800f626:	6909      	ldr	r1, [r1, #16]
 800f628:	4617      	mov	r7, r2
 800f62a:	4798      	blx	r3
 800f62c:	4604      	mov	r4, r0
 800f62e:	f7ff ff97 	bl	800f560 <racs_services__srv__Control_Event__init>
 800f632:	4684      	mov	ip, r0
 800f634:	b370      	cbz	r0, 800f694 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x84>
 800f636:	782b      	ldrb	r3, [r5, #0]
 800f638:	7023      	strb	r3, [r4, #0]
 800f63a:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 800f63e:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800f642:	e9c4 2301 	strd	r2, r3, [r4, #4]
 800f646:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800f64a:	68e8      	ldr	r0, [r5, #12]
 800f64c:	6929      	ldr	r1, [r5, #16]
 800f64e:	696a      	ldr	r2, [r5, #20]
 800f650:	69ab      	ldr	r3, [r5, #24]
 800f652:	60e0      	str	r0, [r4, #12]
 800f654:	6121      	str	r1, [r4, #16]
 800f656:	6162      	str	r2, [r4, #20]
 800f658:	61a3      	str	r3, [r4, #24]
 800f65a:	b157      	cbz	r7, 800f672 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x62>
 800f65c:	2101      	movs	r1, #1
 800f65e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800f662:	f7ff ff15 	bl	800f490 <racs_services__srv__Control_Request__Sequence__init>
 800f666:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800f668:	4638      	mov	r0, r7
 800f66a:	f7ff ff07 	bl	800f47c <racs_services__srv__Control_Request__copy>
 800f66e:	4603      	mov	r3, r0
 800f670:	b1c0      	cbz	r0, 800f6a4 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x94>
 800f672:	f1b8 0f00 	cmp.w	r8, #0
 800f676:	d00a      	beq.n	800f68e <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x7e>
 800f678:	2101      	movs	r1, #1
 800f67a:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800f67e:	f7ff ff41 	bl	800f504 <racs_services__srv__Control_Response__Sequence__init>
 800f682:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f684:	4640      	mov	r0, r8
 800f686:	f7ff ff35 	bl	800f4f4 <racs_services__srv__Control_Response__copy>
 800f68a:	4603      	mov	r3, r0
 800f68c:	b150      	cbz	r0, 800f6a4 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x94>
 800f68e:	4620      	mov	r0, r4
 800f690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f694:	4620      	mov	r0, r4
 800f696:	4664      	mov	r4, ip
 800f698:	6873      	ldr	r3, [r6, #4]
 800f69a:	6931      	ldr	r1, [r6, #16]
 800f69c:	4798      	blx	r3
 800f69e:	4620      	mov	r0, r4
 800f6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6a4:	4620      	mov	r0, r4
 800f6a6:	461c      	mov	r4, r3
 800f6a8:	6872      	ldr	r2, [r6, #4]
 800f6aa:	6931      	ldr	r1, [r6, #16]
 800f6ac:	4790      	blx	r2
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6b4:	2400      	movs	r4, #0
 800f6b6:	4620      	mov	r0, r4
 800f6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f6bc <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control>:
 800f6bc:	b1b9      	cbz	r1, 800f6ee <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x32>
 800f6be:	b538      	push	{r3, r4, r5, lr}
 800f6c0:	4605      	mov	r5, r0
 800f6c2:	b190      	cbz	r0, 800f6ea <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x2e>
 800f6c4:	460c      	mov	r4, r1
 800f6c6:	f7ff ff6d 	bl	800f5a4 <racs_services__srv__Control_Event__fini>
 800f6ca:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800f6cc:	b110      	cbz	r0, 800f6d4 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x18>
 800f6ce:	6863      	ldr	r3, [r4, #4]
 800f6d0:	6921      	ldr	r1, [r4, #16]
 800f6d2:	4798      	blx	r3
 800f6d4:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800f6d6:	b110      	cbz	r0, 800f6de <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x22>
 800f6d8:	6863      	ldr	r3, [r4, #4]
 800f6da:	6921      	ldr	r1, [r4, #16]
 800f6dc:	4798      	blx	r3
 800f6de:	4628      	mov	r0, r5
 800f6e0:	6863      	ldr	r3, [r4, #4]
 800f6e2:	6921      	ldr	r1, [r4, #16]
 800f6e4:	4798      	blx	r3
 800f6e6:	2001      	movs	r0, #1
 800f6e8:	bd38      	pop	{r3, r4, r5, pc}
 800f6ea:	2000      	movs	r0, #0
 800f6ec:	bd38      	pop	{r3, r4, r5, pc}
 800f6ee:	2000      	movs	r0, #0
 800f6f0:	4770      	bx	lr
 800f6f2:	bf00      	nop

0800f6f4 <racs_services__srv__Setup_Event__get_type_description.part.0>:
 800f6f4:	b510      	push	{r4, lr}
 800f6f6:	2000      	movs	r0, #0
 800f6f8:	4c13      	ldr	r4, [pc, #76]	; (800f748 <racs_services__srv__Setup_Event__get_type_description.part.0+0x54>)
 800f6fa:	f005 fc0d 	bl	8014f18 <builtin_interfaces__msg__Time__get_type_description>
 800f6fe:	300c      	adds	r0, #12
 800f700:	4b12      	ldr	r3, [pc, #72]	; (800f74c <racs_services__srv__Setup_Event__get_type_description.part.0+0x58>)
 800f702:	c807      	ldmia	r0, {r0, r1, r2}
 800f704:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f708:	7823      	ldrb	r3, [r4, #0]
 800f70a:	b90b      	cbnz	r3, 800f710 <racs_services__srv__Setup_Event__get_type_description.part.0+0x1c>
 800f70c:	2301      	movs	r3, #1
 800f70e:	7023      	strb	r3, [r4, #0]
 800f710:	4a0f      	ldr	r2, [pc, #60]	; (800f750 <racs_services__srv__Setup_Event__get_type_description.part.0+0x5c>)
 800f712:	4b10      	ldr	r3, [pc, #64]	; (800f754 <racs_services__srv__Setup_Event__get_type_description.part.0+0x60>)
 800f714:	4c10      	ldr	r4, [pc, #64]	; (800f758 <racs_services__srv__Setup_Event__get_type_description.part.0+0x64>)
 800f716:	ca07      	ldmia	r2, {r0, r1, r2}
 800f718:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f71c:	7823      	ldrb	r3, [r4, #0]
 800f71e:	b90b      	cbnz	r3, 800f724 <racs_services__srv__Setup_Event__get_type_description.part.0+0x30>
 800f720:	2301      	movs	r3, #1
 800f722:	7023      	strb	r3, [r4, #0]
 800f724:	4b0d      	ldr	r3, [pc, #52]	; (800f75c <racs_services__srv__Setup_Event__get_type_description.part.0+0x68>)
 800f726:	4c0e      	ldr	r4, [pc, #56]	; (800f760 <racs_services__srv__Setup_Event__get_type_description.part.0+0x6c>)
 800f728:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f72c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f730:	2000      	movs	r0, #0
 800f732:	3418      	adds	r4, #24
 800f734:	f005 fb90 	bl	8014e58 <service_msgs__msg__ServiceEventInfo__get_type_description>
 800f738:	300c      	adds	r0, #12
 800f73a:	4b0a      	ldr	r3, [pc, #40]	; (800f764 <racs_services__srv__Setup_Event__get_type_description.part.0+0x70>)
 800f73c:	c807      	ldmia	r0, {r0, r1, r2}
 800f73e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f742:	2201      	movs	r2, #1
 800f744:	701a      	strb	r2, [r3, #0]
 800f746:	bd10      	pop	{r4, pc}
 800f748:	2000b728 	.word	0x2000b728
 800f74c:	200011e0 	.word	0x200011e0
 800f750:	0801c39c 	.word	0x0801c39c
 800f754:	200011f8 	.word	0x200011f8
 800f758:	2000b726 	.word	0x2000b726
 800f75c:	0801c378 	.word	0x0801c378
 800f760:	20001210 	.word	0x20001210
 800f764:	2000b725 	.word	0x2000b725

0800f768 <racs_services__srv__Setup__get_type_hash>:
 800f768:	4800      	ldr	r0, [pc, #0]	; (800f76c <racs_services__srv__Setup__get_type_hash+0x4>)
 800f76a:	4770      	bx	lr
 800f76c:	200010ac 	.word	0x200010ac

0800f770 <racs_services__srv__Setup_Request__get_type_hash>:
 800f770:	4800      	ldr	r0, [pc, #0]	; (800f774 <racs_services__srv__Setup_Request__get_type_hash+0x4>)
 800f772:	4770      	bx	lr
 800f774:	20001088 	.word	0x20001088

0800f778 <racs_services__srv__Setup_Response__get_type_hash>:
 800f778:	4800      	ldr	r0, [pc, #0]	; (800f77c <racs_services__srv__Setup_Response__get_type_hash+0x4>)
 800f77a:	4770      	bx	lr
 800f77c:	20001064 	.word	0x20001064

0800f780 <racs_services__srv__Setup_Event__get_type_hash>:
 800f780:	4800      	ldr	r0, [pc, #0]	; (800f784 <racs_services__srv__Setup_Event__get_type_hash+0x4>)
 800f782:	4770      	bx	lr
 800f784:	20001040 	.word	0x20001040

0800f788 <racs_services__srv__Setup__get_type_description>:
 800f788:	b538      	push	{r3, r4, r5, lr}
 800f78a:	4d1c      	ldr	r5, [pc, #112]	; (800f7fc <racs_services__srv__Setup__get_type_description+0x74>)
 800f78c:	7828      	ldrb	r0, [r5, #0]
 800f78e:	b108      	cbz	r0, 800f794 <racs_services__srv__Setup__get_type_description+0xc>
 800f790:	481b      	ldr	r0, [pc, #108]	; (800f800 <racs_services__srv__Setup__get_type_description+0x78>)
 800f792:	bd38      	pop	{r3, r4, r5, pc}
 800f794:	f005 fbc0 	bl	8014f18 <builtin_interfaces__msg__Time__get_type_description>
 800f798:	300c      	adds	r0, #12
 800f79a:	4b1a      	ldr	r3, [pc, #104]	; (800f804 <racs_services__srv__Setup__get_type_description+0x7c>)
 800f79c:	c807      	ldmia	r0, {r0, r1, r2}
 800f79e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f7a2:	4b19      	ldr	r3, [pc, #100]	; (800f808 <racs_services__srv__Setup__get_type_description+0x80>)
 800f7a4:	781b      	ldrb	r3, [r3, #0]
 800f7a6:	b32b      	cbz	r3, 800f7f4 <racs_services__srv__Setup__get_type_description+0x6c>
 800f7a8:	4a18      	ldr	r2, [pc, #96]	; (800f80c <racs_services__srv__Setup__get_type_description+0x84>)
 800f7aa:	4b19      	ldr	r3, [pc, #100]	; (800f810 <racs_services__srv__Setup__get_type_description+0x88>)
 800f7ac:	4c19      	ldr	r4, [pc, #100]	; (800f814 <racs_services__srv__Setup__get_type_description+0x8c>)
 800f7ae:	ca07      	ldmia	r2, {r0, r1, r2}
 800f7b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f7b4:	7823      	ldrb	r3, [r4, #0]
 800f7b6:	b90b      	cbnz	r3, 800f7bc <racs_services__srv__Setup__get_type_description+0x34>
 800f7b8:	2301      	movs	r3, #1
 800f7ba:	7023      	strb	r3, [r4, #0]
 800f7bc:	4a16      	ldr	r2, [pc, #88]	; (800f818 <racs_services__srv__Setup__get_type_description+0x90>)
 800f7be:	4b17      	ldr	r3, [pc, #92]	; (800f81c <racs_services__srv__Setup__get_type_description+0x94>)
 800f7c0:	4c17      	ldr	r4, [pc, #92]	; (800f820 <racs_services__srv__Setup__get_type_description+0x98>)
 800f7c2:	ca07      	ldmia	r2, {r0, r1, r2}
 800f7c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f7c8:	7823      	ldrb	r3, [r4, #0]
 800f7ca:	b90b      	cbnz	r3, 800f7d0 <racs_services__srv__Setup__get_type_description+0x48>
 800f7cc:	2301      	movs	r3, #1
 800f7ce:	7023      	strb	r3, [r4, #0]
 800f7d0:	4b14      	ldr	r3, [pc, #80]	; (800f824 <racs_services__srv__Setup__get_type_description+0x9c>)
 800f7d2:	4c15      	ldr	r4, [pc, #84]	; (800f828 <racs_services__srv__Setup__get_type_description+0xa0>)
 800f7d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f7d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f7dc:	2000      	movs	r0, #0
 800f7de:	3418      	adds	r4, #24
 800f7e0:	f005 fb3a 	bl	8014e58 <service_msgs__msg__ServiceEventInfo__get_type_description>
 800f7e4:	300c      	adds	r0, #12
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	c807      	ldmia	r0, {r0, r1, r2}
 800f7ea:	702b      	strb	r3, [r5, #0]
 800f7ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f7f0:	4803      	ldr	r0, [pc, #12]	; (800f800 <racs_services__srv__Setup__get_type_description+0x78>)
 800f7f2:	bd38      	pop	{r3, r4, r5, pc}
 800f7f4:	f7ff ff7e 	bl	800f6f4 <racs_services__srv__Setup_Event__get_type_description.part.0>
 800f7f8:	e7d6      	b.n	800f7a8 <racs_services__srv__Setup__get_type_description+0x20>
 800f7fa:	bf00      	nop
 800f7fc:	2000b729 	.word	0x2000b729
 800f800:	0801c3b4 	.word	0x0801c3b4
 800f804:	20001628 	.word	0x20001628
 800f808:	2000b725 	.word	0x2000b725
 800f80c:	0801c354 	.word	0x0801c354
 800f810:	20001640 	.word	0x20001640
 800f814:	2000b728 	.word	0x2000b728
 800f818:	0801c39c 	.word	0x0801c39c
 800f81c:	20001658 	.word	0x20001658
 800f820:	2000b726 	.word	0x2000b726
 800f824:	0801c378 	.word	0x0801c378
 800f828:	20001670 	.word	0x20001670

0800f82c <racs_services__srv__Setup_Request__get_type_description>:
 800f82c:	4b03      	ldr	r3, [pc, #12]	; (800f83c <racs_services__srv__Setup_Request__get_type_description+0x10>)
 800f82e:	781a      	ldrb	r2, [r3, #0]
 800f830:	b90a      	cbnz	r2, 800f836 <racs_services__srv__Setup_Request__get_type_description+0xa>
 800f832:	2201      	movs	r2, #1
 800f834:	701a      	strb	r2, [r3, #0]
 800f836:	4802      	ldr	r0, [pc, #8]	; (800f840 <racs_services__srv__Setup_Request__get_type_description+0x14>)
 800f838:	4770      	bx	lr
 800f83a:	bf00      	nop
 800f83c:	2000b728 	.word	0x2000b728
 800f840:	0801c390 	.word	0x0801c390

0800f844 <racs_services__srv__Setup_Response__get_type_description>:
 800f844:	4b03      	ldr	r3, [pc, #12]	; (800f854 <racs_services__srv__Setup_Response__get_type_description+0x10>)
 800f846:	781a      	ldrb	r2, [r3, #0]
 800f848:	b90a      	cbnz	r2, 800f84e <racs_services__srv__Setup_Response__get_type_description+0xa>
 800f84a:	2201      	movs	r2, #1
 800f84c:	701a      	strb	r2, [r3, #0]
 800f84e:	4802      	ldr	r0, [pc, #8]	; (800f858 <racs_services__srv__Setup_Response__get_type_description+0x14>)
 800f850:	4770      	bx	lr
 800f852:	bf00      	nop
 800f854:	2000b726 	.word	0x2000b726
 800f858:	0801c36c 	.word	0x0801c36c

0800f85c <racs_services__srv__Setup_Event__get_type_description>:
 800f85c:	b508      	push	{r3, lr}
 800f85e:	4b04      	ldr	r3, [pc, #16]	; (800f870 <racs_services__srv__Setup_Event__get_type_description+0x14>)
 800f860:	781b      	ldrb	r3, [r3, #0]
 800f862:	b10b      	cbz	r3, 800f868 <racs_services__srv__Setup_Event__get_type_description+0xc>
 800f864:	4803      	ldr	r0, [pc, #12]	; (800f874 <racs_services__srv__Setup_Event__get_type_description+0x18>)
 800f866:	bd08      	pop	{r3, pc}
 800f868:	f7ff ff44 	bl	800f6f4 <racs_services__srv__Setup_Event__get_type_description.part.0>
 800f86c:	4801      	ldr	r0, [pc, #4]	; (800f874 <racs_services__srv__Setup_Event__get_type_description+0x18>)
 800f86e:	bd08      	pop	{r3, pc}
 800f870:	2000b725 	.word	0x2000b725
 800f874:	0801c348 	.word	0x0801c348

0800f878 <racs_services__srv__Setup__get_type_description_sources>:
 800f878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f87c:	4b2c      	ldr	r3, [pc, #176]	; (800f930 <racs_services__srv__Setup__get_type_description_sources+0xb8>)
 800f87e:	f893 9000 	ldrb.w	r9, [r3]
 800f882:	f1b9 0f00 	cmp.w	r9, #0
 800f886:	d002      	beq.n	800f88e <racs_services__srv__Setup__get_type_description_sources+0x16>
 800f888:	482a      	ldr	r0, [pc, #168]	; (800f934 <racs_services__srv__Setup__get_type_description_sources+0xbc>)
 800f88a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f88e:	4d2a      	ldr	r5, [pc, #168]	; (800f938 <racs_services__srv__Setup__get_type_description_sources+0xc0>)
 800f890:	4c2a      	ldr	r4, [pc, #168]	; (800f93c <racs_services__srv__Setup__get_type_description_sources+0xc4>)
 800f892:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 800f944 <racs_services__srv__Setup__get_type_description_sources+0xcc>
 800f896:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800f948 <racs_services__srv__Setup__get_type_description_sources+0xd0>
 800f89a:	4e29      	ldr	r6, [pc, #164]	; (800f940 <racs_services__srv__Setup__get_type_description_sources+0xc8>)
 800f89c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f89e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f8a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f8a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f8a4:	682b      	ldr	r3, [r5, #0]
 800f8a6:	4625      	mov	r5, r4
 800f8a8:	4648      	mov	r0, r9
 800f8aa:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 800f8ae:	f845 3b04 	str.w	r3, [r5], #4
 800f8b2:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 800f8b6:	f005 fb3b 	bl	8014f30 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 800f8ba:	4684      	mov	ip, r0
 800f8bc:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 800f8c0:	3494      	adds	r4, #148	; 0x94
 800f8c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f8c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f8c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f8cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f8ce:	f8dc 3000 	ldr.w	r3, [ip]
 800f8d2:	602b      	str	r3, [r5, #0]
 800f8d4:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800f8d8:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 800f8dc:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 800f8e0:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 800f8e4:	f8db 3000 	ldr.w	r3, [fp]
 800f8e8:	f8ca 3000 	str.w	r3, [sl]
 800f8ec:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800f8f0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f8f2:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800f8f6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800f8f8:	f8d8 3000 	ldr.w	r3, [r8]
 800f8fc:	603b      	str	r3, [r7, #0]
 800f8fe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f900:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f904:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800f906:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f90a:	6833      	ldr	r3, [r6, #0]
 800f90c:	4648      	mov	r0, r9
 800f90e:	f8ce 3000 	str.w	r3, [lr]
 800f912:	f005 fab9 	bl	8014e88 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 800f916:	2301      	movs	r3, #1
 800f918:	4a05      	ldr	r2, [pc, #20]	; (800f930 <racs_services__srv__Setup__get_type_description_sources+0xb8>)
 800f91a:	4605      	mov	r5, r0
 800f91c:	7013      	strb	r3, [r2, #0]
 800f91e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f920:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f922:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f926:	682b      	ldr	r3, [r5, #0]
 800f928:	4802      	ldr	r0, [pc, #8]	; (800f934 <racs_services__srv__Setup__get_type_description_sources+0xbc>)
 800f92a:	6023      	str	r3, [r4, #0]
 800f92c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f930:	2000b724 	.word	0x2000b724
 800f934:	0801c48c 	.word	0x0801c48c
 800f938:	0801c444 	.word	0x0801c444
 800f93c:	2000b7e0 	.word	0x2000b7e0
 800f940:	0801c3fc 	.word	0x0801c3fc
 800f944:	0801c3d8 	.word	0x0801c3d8
 800f948:	0801c420 	.word	0x0801c420

0800f94c <racs_services__srv__Setup_Request__get_type_description_sources>:
 800f94c:	4b09      	ldr	r3, [pc, #36]	; (800f974 <racs_services__srv__Setup_Request__get_type_description_sources+0x28>)
 800f94e:	781a      	ldrb	r2, [r3, #0]
 800f950:	b96a      	cbnz	r2, 800f96e <racs_services__srv__Setup_Request__get_type_description_sources+0x22>
 800f952:	2201      	movs	r2, #1
 800f954:	b430      	push	{r4, r5}
 800f956:	4d08      	ldr	r5, [pc, #32]	; (800f978 <racs_services__srv__Setup_Request__get_type_description_sources+0x2c>)
 800f958:	4c08      	ldr	r4, [pc, #32]	; (800f97c <racs_services__srv__Setup_Request__get_type_description_sources+0x30>)
 800f95a:	701a      	strb	r2, [r3, #0]
 800f95c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f95e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f964:	682b      	ldr	r3, [r5, #0]
 800f966:	4806      	ldr	r0, [pc, #24]	; (800f980 <racs_services__srv__Setup_Request__get_type_description_sources+0x34>)
 800f968:	6023      	str	r3, [r4, #0]
 800f96a:	bc30      	pop	{r4, r5}
 800f96c:	4770      	bx	lr
 800f96e:	4804      	ldr	r0, [pc, #16]	; (800f980 <racs_services__srv__Setup_Request__get_type_description_sources+0x34>)
 800f970:	4770      	bx	lr
 800f972:	bf00      	nop
 800f974:	2000b72b 	.word	0x2000b72b
 800f978:	0801c420 	.word	0x0801c420
 800f97c:	2000b8dc 	.word	0x2000b8dc
 800f980:	0801c480 	.word	0x0801c480

0800f984 <racs_services__srv__Setup_Response__get_type_description_sources>:
 800f984:	4b09      	ldr	r3, [pc, #36]	; (800f9ac <racs_services__srv__Setup_Response__get_type_description_sources+0x28>)
 800f986:	781a      	ldrb	r2, [r3, #0]
 800f988:	b96a      	cbnz	r2, 800f9a6 <racs_services__srv__Setup_Response__get_type_description_sources+0x22>
 800f98a:	2201      	movs	r2, #1
 800f98c:	b430      	push	{r4, r5}
 800f98e:	4d08      	ldr	r5, [pc, #32]	; (800f9b0 <racs_services__srv__Setup_Response__get_type_description_sources+0x2c>)
 800f990:	4c08      	ldr	r4, [pc, #32]	; (800f9b4 <racs_services__srv__Setup_Response__get_type_description_sources+0x30>)
 800f992:	701a      	strb	r2, [r3, #0]
 800f994:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f996:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f998:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f99a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f99c:	682b      	ldr	r3, [r5, #0]
 800f99e:	4806      	ldr	r0, [pc, #24]	; (800f9b8 <racs_services__srv__Setup_Response__get_type_description_sources+0x34>)
 800f9a0:	6023      	str	r3, [r4, #0]
 800f9a2:	bc30      	pop	{r4, r5}
 800f9a4:	4770      	bx	lr
 800f9a6:	4804      	ldr	r0, [pc, #16]	; (800f9b8 <racs_services__srv__Setup_Response__get_type_description_sources+0x34>)
 800f9a8:	4770      	bx	lr
 800f9aa:	bf00      	nop
 800f9ac:	2000b72a 	.word	0x2000b72a
 800f9b0:	0801c3fc 	.word	0x0801c3fc
 800f9b4:	2000b8b8 	.word	0x2000b8b8
 800f9b8:	0801c474 	.word	0x0801c474

0800f9bc <racs_services__srv__Setup_Event__get_type_description_sources>:
 800f9bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9c0:	4e27      	ldr	r6, [pc, #156]	; (800fa60 <racs_services__srv__Setup_Event__get_type_description_sources+0xa4>)
 800f9c2:	f896 8000 	ldrb.w	r8, [r6]
 800f9c6:	f1b8 0f00 	cmp.w	r8, #0
 800f9ca:	d002      	beq.n	800f9d2 <racs_services__srv__Setup_Event__get_type_description_sources+0x16>
 800f9cc:	4825      	ldr	r0, [pc, #148]	; (800fa64 <racs_services__srv__Setup_Event__get_type_description_sources+0xa8>)
 800f9ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9d2:	4d25      	ldr	r5, [pc, #148]	; (800fa68 <racs_services__srv__Setup_Event__get_type_description_sources+0xac>)
 800f9d4:	4c25      	ldr	r4, [pc, #148]	; (800fa6c <racs_services__srv__Setup_Event__get_type_description_sources+0xb0>)
 800f9d6:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800fa74 <racs_services__srv__Setup_Event__get_type_description_sources+0xb8>
 800f9da:	4f25      	ldr	r7, [pc, #148]	; (800fa70 <racs_services__srv__Setup_Event__get_type_description_sources+0xb4>)
 800f9dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f9de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f9e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f9e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f9e4:	682b      	ldr	r3, [r5, #0]
 800f9e6:	4625      	mov	r5, r4
 800f9e8:	4640      	mov	r0, r8
 800f9ea:	f104 0928 	add.w	r9, r4, #40	; 0x28
 800f9ee:	f845 3b04 	str.w	r3, [r5], #4
 800f9f2:	f005 fa9d 	bl	8014f30 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 800f9f6:	4684      	mov	ip, r0
 800f9f8:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 800f9fc:	3470      	adds	r4, #112	; 0x70
 800f9fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fa02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fa04:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fa08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800fa0a:	f8dc 3000 	ldr.w	r3, [ip]
 800fa0e:	602b      	str	r3, [r5, #0]
 800fa10:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 800fa14:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800fa18:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 800fa1c:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 800fa20:	f8da 3000 	ldr.w	r3, [sl]
 800fa24:	f8c9 3000 	str.w	r3, [r9]
 800fa28:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800fa2a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fa2e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800fa30:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fa34:	683b      	ldr	r3, [r7, #0]
 800fa36:	4640      	mov	r0, r8
 800fa38:	f8ce 3000 	str.w	r3, [lr]
 800fa3c:	f005 fa24 	bl	8014e88 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 800fa40:	2301      	movs	r3, #1
 800fa42:	4684      	mov	ip, r0
 800fa44:	7033      	strb	r3, [r6, #0]
 800fa46:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fa4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa4c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fa50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fa52:	f8dc 3000 	ldr.w	r3, [ip]
 800fa56:	4803      	ldr	r0, [pc, #12]	; (800fa64 <racs_services__srv__Setup_Event__get_type_description_sources+0xa8>)
 800fa58:	6023      	str	r3, [r4, #0]
 800fa5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa5e:	bf00      	nop
 800fa60:	2000b727 	.word	0x2000b727
 800fa64:	0801c468 	.word	0x0801c468
 800fa68:	0801c3d8 	.word	0x0801c3d8
 800fa6c:	2000b72c 	.word	0x2000b72c
 800fa70:	0801c3fc 	.word	0x0801c3fc
 800fa74:	0801c420 	.word	0x0801c420

0800fa78 <racs_services__srv__Setup_Event__fini.part.0>:
 800fa78:	b510      	push	{r4, lr}
 800fa7a:	b086      	sub	sp, #24
 800fa7c:	4604      	mov	r4, r0
 800fa7e:	f005 fa41 	bl	8014f04 <service_msgs__msg__ServiceEventInfo__fini>
 800fa82:	a801      	add	r0, sp, #4
 800fa84:	f7fd f926 	bl	800ccd4 <rcutils_get_default_allocator>
 800fa88:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800fa8a:	b130      	cbz	r0, 800fa9a <racs_services__srv__Setup_Event__fini.part.0+0x22>
 800fa8c:	9b02      	ldr	r3, [sp, #8]
 800fa8e:	9905      	ldr	r1, [sp, #20]
 800fa90:	4798      	blx	r3
 800fa92:	2300      	movs	r3, #0
 800fa94:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 800fa98:	6323      	str	r3, [r4, #48]	; 0x30
 800fa9a:	a801      	add	r0, sp, #4
 800fa9c:	f7fd f91a 	bl	800ccd4 <rcutils_get_default_allocator>
 800faa0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800faa2:	b130      	cbz	r0, 800fab2 <racs_services__srv__Setup_Event__fini.part.0+0x3a>
 800faa4:	9b02      	ldr	r3, [sp, #8]
 800faa6:	9905      	ldr	r1, [sp, #20]
 800faa8:	4798      	blx	r3
 800faaa:	2300      	movs	r3, #0
 800faac:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 800fab0:	63e3      	str	r3, [r4, #60]	; 0x3c
 800fab2:	b006      	add	sp, #24
 800fab4:	bd10      	pop	{r4, pc}
 800fab6:	bf00      	nop

0800fab8 <racs_services__srv__Setup_Request__init>:
 800fab8:	3800      	subs	r0, #0
 800faba:	bf18      	it	ne
 800fabc:	2001      	movne	r0, #1
 800fabe:	4770      	bx	lr

0800fac0 <racs_services__srv__Setup_Request__fini>:
 800fac0:	4770      	bx	lr
 800fac2:	bf00      	nop

0800fac4 <racs_services__srv__Setup_Request__copy>:
 800fac4:	4603      	mov	r3, r0
 800fac6:	b1a0      	cbz	r0, 800faf2 <racs_services__srv__Setup_Request__copy+0x2e>
 800fac8:	b199      	cbz	r1, 800faf2 <racs_services__srv__Setup_Request__copy+0x2e>
 800faca:	7802      	ldrb	r2, [r0, #0]
 800facc:	2001      	movs	r0, #1
 800face:	700a      	strb	r2, [r1, #0]
 800fad0:	689a      	ldr	r2, [r3, #8]
 800fad2:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800fad6:	608a      	str	r2, [r1, #8]
 800fad8:	691a      	ldr	r2, [r3, #16]
 800fada:	f8c1 c004 	str.w	ip, [r1, #4]
 800fade:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800fae2:	610a      	str	r2, [r1, #16]
 800fae4:	695a      	ldr	r2, [r3, #20]
 800fae6:	699b      	ldr	r3, [r3, #24]
 800fae8:	f8c1 c00c 	str.w	ip, [r1, #12]
 800faec:	614a      	str	r2, [r1, #20]
 800faee:	618b      	str	r3, [r1, #24]
 800faf0:	4770      	bx	lr
 800faf2:	2000      	movs	r0, #0
 800faf4:	4770      	bx	lr
 800faf6:	bf00      	nop

0800faf8 <racs_services__srv__Setup_Request__Sequence__init>:
 800faf8:	b530      	push	{r4, r5, lr}
 800fafa:	4604      	mov	r4, r0
 800fafc:	b087      	sub	sp, #28
 800fafe:	b148      	cbz	r0, 800fb14 <racs_services__srv__Setup_Request__Sequence__init+0x1c>
 800fb00:	460d      	mov	r5, r1
 800fb02:	a801      	add	r0, sp, #4
 800fb04:	f7fd f8e6 	bl	800ccd4 <rcutils_get_default_allocator>
 800fb08:	b935      	cbnz	r5, 800fb18 <racs_services__srv__Setup_Request__Sequence__init+0x20>
 800fb0a:	462b      	mov	r3, r5
 800fb0c:	2001      	movs	r0, #1
 800fb0e:	60a5      	str	r5, [r4, #8]
 800fb10:	e9c4 3500 	strd	r3, r5, [r4]
 800fb14:	b007      	add	sp, #28
 800fb16:	bd30      	pop	{r4, r5, pc}
 800fb18:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800fb1c:	211c      	movs	r1, #28
 800fb1e:	4628      	mov	r0, r5
 800fb20:	4798      	blx	r3
 800fb22:	4603      	mov	r3, r0
 800fb24:	2800      	cmp	r0, #0
 800fb26:	d1f1      	bne.n	800fb0c <racs_services__srv__Setup_Request__Sequence__init+0x14>
 800fb28:	e7f4      	b.n	800fb14 <racs_services__srv__Setup_Request__Sequence__init+0x1c>
 800fb2a:	bf00      	nop

0800fb2c <racs_services__srv__Setup_Request__Sequence__fini>:
 800fb2c:	b180      	cbz	r0, 800fb50 <racs_services__srv__Setup_Request__Sequence__fini+0x24>
 800fb2e:	b510      	push	{r4, lr}
 800fb30:	b086      	sub	sp, #24
 800fb32:	4604      	mov	r4, r0
 800fb34:	a801      	add	r0, sp, #4
 800fb36:	f7fd f8cd 	bl	800ccd4 <rcutils_get_default_allocator>
 800fb3a:	6820      	ldr	r0, [r4, #0]
 800fb3c:	b130      	cbz	r0, 800fb4c <racs_services__srv__Setup_Request__Sequence__fini+0x20>
 800fb3e:	9b02      	ldr	r3, [sp, #8]
 800fb40:	9905      	ldr	r1, [sp, #20]
 800fb42:	4798      	blx	r3
 800fb44:	2300      	movs	r3, #0
 800fb46:	e9c4 3300 	strd	r3, r3, [r4]
 800fb4a:	60a3      	str	r3, [r4, #8]
 800fb4c:	b006      	add	sp, #24
 800fb4e:	bd10      	pop	{r4, pc}
 800fb50:	4770      	bx	lr
 800fb52:	bf00      	nop

0800fb54 <racs_services__srv__Setup_Response__init>:
 800fb54:	3800      	subs	r0, #0
 800fb56:	bf18      	it	ne
 800fb58:	2001      	movne	r0, #1
 800fb5a:	4770      	bx	lr

0800fb5c <racs_services__srv__Setup_Response__fini>:
 800fb5c:	4770      	bx	lr
 800fb5e:	bf00      	nop

0800fb60 <racs_services__srv__Setup_Response__copy>:
 800fb60:	b120      	cbz	r0, 800fb6c <racs_services__srv__Setup_Response__copy+0xc>
 800fb62:	b119      	cbz	r1, 800fb6c <racs_services__srv__Setup_Response__copy+0xc>
 800fb64:	7803      	ldrb	r3, [r0, #0]
 800fb66:	2001      	movs	r0, #1
 800fb68:	700b      	strb	r3, [r1, #0]
 800fb6a:	4770      	bx	lr
 800fb6c:	2000      	movs	r0, #0
 800fb6e:	4770      	bx	lr

0800fb70 <racs_services__srv__Setup_Response__Sequence__init>:
 800fb70:	b530      	push	{r4, r5, lr}
 800fb72:	4604      	mov	r4, r0
 800fb74:	b087      	sub	sp, #28
 800fb76:	b148      	cbz	r0, 800fb8c <racs_services__srv__Setup_Response__Sequence__init+0x1c>
 800fb78:	460d      	mov	r5, r1
 800fb7a:	a801      	add	r0, sp, #4
 800fb7c:	f7fd f8aa 	bl	800ccd4 <rcutils_get_default_allocator>
 800fb80:	b935      	cbnz	r5, 800fb90 <racs_services__srv__Setup_Response__Sequence__init+0x20>
 800fb82:	462b      	mov	r3, r5
 800fb84:	2001      	movs	r0, #1
 800fb86:	60a5      	str	r5, [r4, #8]
 800fb88:	e9c4 3500 	strd	r3, r5, [r4]
 800fb8c:	b007      	add	sp, #28
 800fb8e:	bd30      	pop	{r4, r5, pc}
 800fb90:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800fb94:	2101      	movs	r1, #1
 800fb96:	4628      	mov	r0, r5
 800fb98:	4798      	blx	r3
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	2800      	cmp	r0, #0
 800fb9e:	d1f1      	bne.n	800fb84 <racs_services__srv__Setup_Response__Sequence__init+0x14>
 800fba0:	e7f4      	b.n	800fb8c <racs_services__srv__Setup_Response__Sequence__init+0x1c>
 800fba2:	bf00      	nop

0800fba4 <racs_services__srv__Setup_Response__Sequence__fini>:
 800fba4:	b180      	cbz	r0, 800fbc8 <racs_services__srv__Setup_Response__Sequence__fini+0x24>
 800fba6:	b510      	push	{r4, lr}
 800fba8:	b086      	sub	sp, #24
 800fbaa:	4604      	mov	r4, r0
 800fbac:	a801      	add	r0, sp, #4
 800fbae:	f7fd f891 	bl	800ccd4 <rcutils_get_default_allocator>
 800fbb2:	6820      	ldr	r0, [r4, #0]
 800fbb4:	b130      	cbz	r0, 800fbc4 <racs_services__srv__Setup_Response__Sequence__fini+0x20>
 800fbb6:	9b02      	ldr	r3, [sp, #8]
 800fbb8:	9905      	ldr	r1, [sp, #20]
 800fbba:	4798      	blx	r3
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	e9c4 3300 	strd	r3, r3, [r4]
 800fbc2:	60a3      	str	r3, [r4, #8]
 800fbc4:	b006      	add	sp, #24
 800fbc6:	bd10      	pop	{r4, pc}
 800fbc8:	4770      	bx	lr
 800fbca:	bf00      	nop

0800fbcc <racs_services__srv__Setup_Event__init>:
 800fbcc:	b570      	push	{r4, r5, r6, lr}
 800fbce:	4604      	mov	r4, r0
 800fbd0:	b086      	sub	sp, #24
 800fbd2:	b1c8      	cbz	r0, 800fc08 <racs_services__srv__Setup_Event__init+0x3c>
 800fbd4:	f005 f984 	bl	8014ee0 <service_msgs__msg__ServiceEventInfo__init>
 800fbd8:	4605      	mov	r5, r0
 800fbda:	b178      	cbz	r0, 800fbfc <racs_services__srv__Setup_Event__init+0x30>
 800fbdc:	2600      	movs	r6, #0
 800fbde:	a801      	add	r0, sp, #4
 800fbe0:	f7fd f878 	bl	800ccd4 <rcutils_get_default_allocator>
 800fbe4:	a801      	add	r0, sp, #4
 800fbe6:	6326      	str	r6, [r4, #48]	; 0x30
 800fbe8:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
 800fbec:	f7fd f872 	bl	800ccd4 <rcutils_get_default_allocator>
 800fbf0:	4628      	mov	r0, r5
 800fbf2:	63e6      	str	r6, [r4, #60]	; 0x3c
 800fbf4:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
 800fbf8:	b006      	add	sp, #24
 800fbfa:	bd70      	pop	{r4, r5, r6, pc}
 800fbfc:	4620      	mov	r0, r4
 800fbfe:	f7ff ff3b 	bl	800fa78 <racs_services__srv__Setup_Event__fini.part.0>
 800fc02:	4628      	mov	r0, r5
 800fc04:	b006      	add	sp, #24
 800fc06:	bd70      	pop	{r4, r5, r6, pc}
 800fc08:	4605      	mov	r5, r0
 800fc0a:	4628      	mov	r0, r5
 800fc0c:	b006      	add	sp, #24
 800fc0e:	bd70      	pop	{r4, r5, r6, pc}

0800fc10 <racs_services__srv__Setup_Event__fini>:
 800fc10:	b1f0      	cbz	r0, 800fc50 <racs_services__srv__Setup_Event__fini+0x40>
 800fc12:	b510      	push	{r4, lr}
 800fc14:	b086      	sub	sp, #24
 800fc16:	4604      	mov	r4, r0
 800fc18:	f005 f974 	bl	8014f04 <service_msgs__msg__ServiceEventInfo__fini>
 800fc1c:	a801      	add	r0, sp, #4
 800fc1e:	f7fd f859 	bl	800ccd4 <rcutils_get_default_allocator>
 800fc22:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800fc24:	b130      	cbz	r0, 800fc34 <racs_services__srv__Setup_Event__fini+0x24>
 800fc26:	9b02      	ldr	r3, [sp, #8]
 800fc28:	9905      	ldr	r1, [sp, #20]
 800fc2a:	4798      	blx	r3
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 800fc32:	6323      	str	r3, [r4, #48]	; 0x30
 800fc34:	a801      	add	r0, sp, #4
 800fc36:	f7fd f84d 	bl	800ccd4 <rcutils_get_default_allocator>
 800fc3a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800fc3c:	b130      	cbz	r0, 800fc4c <racs_services__srv__Setup_Event__fini+0x3c>
 800fc3e:	9b02      	ldr	r3, [sp, #8]
 800fc40:	9905      	ldr	r1, [sp, #20]
 800fc42:	4798      	blx	r3
 800fc44:	2300      	movs	r3, #0
 800fc46:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 800fc4a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800fc4c:	b006      	add	sp, #24
 800fc4e:	bd10      	pop	{r4, pc}
 800fc50:	4770      	bx	lr
 800fc52:	bf00      	nop

0800fc54 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup>:
 800fc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc58:	2900      	cmp	r1, #0
 800fc5a:	d04d      	beq.n	800fcf8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0xa4>
 800fc5c:	4605      	mov	r5, r0
 800fc5e:	2800      	cmp	r0, #0
 800fc60:	d04a      	beq.n	800fcf8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0xa4>
 800fc62:	460e      	mov	r6, r1
 800fc64:	4698      	mov	r8, r3
 800fc66:	2040      	movs	r0, #64	; 0x40
 800fc68:	680b      	ldr	r3, [r1, #0]
 800fc6a:	6909      	ldr	r1, [r1, #16]
 800fc6c:	4617      	mov	r7, r2
 800fc6e:	4798      	blx	r3
 800fc70:	4604      	mov	r4, r0
 800fc72:	f7ff ffab 	bl	800fbcc <racs_services__srv__Setup_Event__init>
 800fc76:	4684      	mov	ip, r0
 800fc78:	b370      	cbz	r0, 800fcd8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x84>
 800fc7a:	782b      	ldrb	r3, [r5, #0]
 800fc7c:	7023      	strb	r3, [r4, #0]
 800fc7e:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 800fc82:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800fc86:	e9c4 2301 	strd	r2, r3, [r4, #4]
 800fc8a:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800fc8e:	68e8      	ldr	r0, [r5, #12]
 800fc90:	6929      	ldr	r1, [r5, #16]
 800fc92:	696a      	ldr	r2, [r5, #20]
 800fc94:	69ab      	ldr	r3, [r5, #24]
 800fc96:	60e0      	str	r0, [r4, #12]
 800fc98:	6121      	str	r1, [r4, #16]
 800fc9a:	6162      	str	r2, [r4, #20]
 800fc9c:	61a3      	str	r3, [r4, #24]
 800fc9e:	b157      	cbz	r7, 800fcb6 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x62>
 800fca0:	2101      	movs	r1, #1
 800fca2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800fca6:	f7ff ff27 	bl	800faf8 <racs_services__srv__Setup_Request__Sequence__init>
 800fcaa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800fcac:	4638      	mov	r0, r7
 800fcae:	f7ff ff09 	bl	800fac4 <racs_services__srv__Setup_Request__copy>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	b1c0      	cbz	r0, 800fce8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x94>
 800fcb6:	f1b8 0f00 	cmp.w	r8, #0
 800fcba:	d00a      	beq.n	800fcd2 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x7e>
 800fcbc:	2101      	movs	r1, #1
 800fcbe:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800fcc2:	f7ff ff55 	bl	800fb70 <racs_services__srv__Setup_Response__Sequence__init>
 800fcc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fcc8:	4640      	mov	r0, r8
 800fcca:	f7ff ff49 	bl	800fb60 <racs_services__srv__Setup_Response__copy>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	b150      	cbz	r0, 800fce8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x94>
 800fcd2:	4620      	mov	r0, r4
 800fcd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcd8:	4620      	mov	r0, r4
 800fcda:	4664      	mov	r4, ip
 800fcdc:	6873      	ldr	r3, [r6, #4]
 800fcde:	6931      	ldr	r1, [r6, #16]
 800fce0:	4798      	blx	r3
 800fce2:	4620      	mov	r0, r4
 800fce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fce8:	4620      	mov	r0, r4
 800fcea:	461c      	mov	r4, r3
 800fcec:	6872      	ldr	r2, [r6, #4]
 800fcee:	6931      	ldr	r1, [r6, #16]
 800fcf0:	4790      	blx	r2
 800fcf2:	4620      	mov	r0, r4
 800fcf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcf8:	2400      	movs	r4, #0
 800fcfa:	4620      	mov	r0, r4
 800fcfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fd00 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup>:
 800fd00:	b1b9      	cbz	r1, 800fd32 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x32>
 800fd02:	b538      	push	{r3, r4, r5, lr}
 800fd04:	4605      	mov	r5, r0
 800fd06:	b190      	cbz	r0, 800fd2e <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x2e>
 800fd08:	460c      	mov	r4, r1
 800fd0a:	f7ff ff81 	bl	800fc10 <racs_services__srv__Setup_Event__fini>
 800fd0e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800fd10:	b110      	cbz	r0, 800fd18 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x18>
 800fd12:	6863      	ldr	r3, [r4, #4]
 800fd14:	6921      	ldr	r1, [r4, #16]
 800fd16:	4798      	blx	r3
 800fd18:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800fd1a:	b110      	cbz	r0, 800fd22 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x22>
 800fd1c:	6863      	ldr	r3, [r4, #4]
 800fd1e:	6921      	ldr	r1, [r4, #16]
 800fd20:	4798      	blx	r3
 800fd22:	4628      	mov	r0, r5
 800fd24:	6863      	ldr	r3, [r4, #4]
 800fd26:	6921      	ldr	r1, [r4, #16]
 800fd28:	4798      	blx	r3
 800fd2a:	2001      	movs	r0, #1
 800fd2c:	bd38      	pop	{r3, r4, r5, pc}
 800fd2e:	2000      	movs	r0, #0
 800fd30:	bd38      	pop	{r3, r4, r5, pc}
 800fd32:	2000      	movs	r0, #0
 800fd34:	4770      	bx	lr
 800fd36:	bf00      	nop

0800fd38 <rcl_client_get_rmw_handle>:
 800fd38:	b118      	cbz	r0, 800fd42 <rcl_client_get_rmw_handle+0xa>
 800fd3a:	6800      	ldr	r0, [r0, #0]
 800fd3c:	b108      	cbz	r0, 800fd42 <rcl_client_get_rmw_handle+0xa>
 800fd3e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800fd42:	4770      	bx	lr

0800fd44 <rcl_send_request>:
 800fd44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd46:	b08b      	sub	sp, #44	; 0x2c
 800fd48:	b1e8      	cbz	r0, 800fd86 <rcl_send_request+0x42>
 800fd4a:	4604      	mov	r4, r0
 800fd4c:	6800      	ldr	r0, [r0, #0]
 800fd4e:	b1d0      	cbz	r0, 800fd86 <rcl_send_request+0x42>
 800fd50:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800fd54:	b1bb      	cbz	r3, 800fd86 <rcl_send_request+0x42>
 800fd56:	460f      	mov	r7, r1
 800fd58:	b1d1      	cbz	r1, 800fd90 <rcl_send_request+0x4c>
 800fd5a:	4615      	mov	r5, r2
 800fd5c:	b1c2      	cbz	r2, 800fd90 <rcl_send_request+0x4c>
 800fd5e:	2105      	movs	r1, #5
 800fd60:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800fd64:	f002 fef0 	bl	8012b48 <__atomic_load_8>
 800fd68:	6823      	ldr	r3, [r4, #0]
 800fd6a:	462a      	mov	r2, r5
 800fd6c:	e9c5 0100 	strd	r0, r1, [r5]
 800fd70:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800fd74:	4639      	mov	r1, r7
 800fd76:	f003 ffc7 	bl	8013d08 <rmw_send_request>
 800fd7a:	4606      	mov	r6, r0
 800fd7c:	b160      	cbz	r0, 800fd98 <rcl_send_request+0x54>
 800fd7e:	2601      	movs	r6, #1
 800fd80:	4630      	mov	r0, r6
 800fd82:	b00b      	add	sp, #44	; 0x2c
 800fd84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd86:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 800fd8a:	4630      	mov	r0, r6
 800fd8c:	b00b      	add	sp, #44	; 0x2c
 800fd8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd90:	260b      	movs	r6, #11
 800fd92:	4630      	mov	r0, r6
 800fd94:	b00b      	add	sp, #44	; 0x2c
 800fd96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd98:	6820      	ldr	r0, [r4, #0]
 800fd9a:	2305      	movs	r3, #5
 800fd9c:	f500 7088 	add.w	r0, r0, #272	; 0x110
 800fda0:	9300      	str	r3, [sp, #0]
 800fda2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fda6:	f002 ff3b 	bl	8012c20 <__atomic_exchange_8>
 800fdaa:	6823      	ldr	r3, [r4, #0]
 800fdac:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800fdb0:	2a00      	cmp	r2, #0
 800fdb2:	d0e5      	beq.n	800fd80 <rcl_send_request+0x3c>
 800fdb4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800fdb8:	a905      	add	r1, sp, #20
 800fdba:	f003 fbdf 	bl	801357c <rmw_get_gid_for_client>
 800fdbe:	b970      	cbnz	r0, 800fdde <rcl_send_request+0x9a>
 800fdc0:	6820      	ldr	r0, [r4, #0]
 800fdc2:	ab06      	add	r3, sp, #24
 800fdc4:	4631      	mov	r1, r6
 800fdc6:	463a      	mov	r2, r7
 800fdc8:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
 800fdcc:	9302      	str	r3, [sp, #8]
 800fdce:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fdd2:	e9cd 4500 	strd	r4, r5, [sp]
 800fdd6:	f001 f823 	bl	8010e20 <rcl_send_service_event_message>
 800fdda:	4606      	mov	r6, r0
 800fddc:	e7d0      	b.n	800fd80 <rcl_send_request+0x3c>
 800fdde:	f000 f875 	bl	800fecc <rcl_convert_rmw_ret_to_rcl_ret>
 800fde2:	4606      	mov	r6, r0
 800fde4:	e7cc      	b.n	800fd80 <rcl_send_request+0x3c>
 800fde6:	bf00      	nop

0800fde8 <rcl_take_response>:
 800fde8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdea:	468e      	mov	lr, r1
 800fdec:	b095      	sub	sp, #84	; 0x54
 800fdee:	460c      	mov	r4, r1
 800fdf0:	4616      	mov	r6, r2
 800fdf2:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 800fdf6:	4605      	mov	r5, r0
 800fdf8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fdfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fe00:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fe04:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fe08:	2d00      	cmp	r5, #0
 800fe0a:	d042      	beq.n	800fe92 <rcl_take_response+0xaa>
 800fe0c:	682b      	ldr	r3, [r5, #0]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d03f      	beq.n	800fe92 <rcl_take_response+0xaa>
 800fe12:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800fe16:	2800      	cmp	r0, #0
 800fe18:	d03b      	beq.n	800fe92 <rcl_take_response+0xaa>
 800fe1a:	2e00      	cmp	r6, #0
 800fe1c:	d03c      	beq.n	800fe98 <rcl_take_response+0xb0>
 800fe1e:	2300      	movs	r3, #0
 800fe20:	4632      	mov	r2, r6
 800fe22:	a90a      	add	r1, sp, #40	; 0x28
 800fe24:	f88d 3013 	strb.w	r3, [sp, #19]
 800fe28:	f10d 0313 	add.w	r3, sp, #19
 800fe2c:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800feb0 <rcl_take_response+0xc8>
 800fe30:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800fe34:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800fe38:	f004 f86e 	bl	8013f18 <rmw_take_response>
 800fe3c:	4607      	mov	r7, r0
 800fe3e:	bb68      	cbnz	r0, 800fe9c <rcl_take_response+0xb4>
 800fe40:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800fe44:	b363      	cbz	r3, 800fea0 <rcl_take_response+0xb8>
 800fe46:	682b      	ldr	r3, [r5, #0]
 800fe48:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800fe4c:	b19a      	cbz	r2, 800fe76 <rcl_take_response+0x8e>
 800fe4e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800fe52:	a905      	add	r1, sp, #20
 800fe54:	f003 fb92 	bl	801357c <rmw_get_gid_for_client>
 800fe58:	bb28      	cbnz	r0, 800fea6 <rcl_take_response+0xbe>
 800fe5a:	6829      	ldr	r1, [r5, #0]
 800fe5c:	ab06      	add	r3, sp, #24
 800fe5e:	4632      	mov	r2, r6
 800fe60:	f8d1 0118 	ldr.w	r0, [r1, #280]	; 0x118
 800fe64:	2103      	movs	r1, #3
 800fe66:	9302      	str	r3, [sp, #8]
 800fe68:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800fe6c:	e9cd 6700 	strd	r6, r7, [sp]
 800fe70:	f000 ffd6 	bl	8010e20 <rcl_send_service_event_message>
 800fe74:	4607      	mov	r7, r0
 800fe76:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 800fe7a:	46a4      	mov	ip, r4
 800fe7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fe80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fe84:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fe88:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fe8c:	4638      	mov	r0, r7
 800fe8e:	b015      	add	sp, #84	; 0x54
 800fe90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe92:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 800fe96:	e7ee      	b.n	800fe76 <rcl_take_response+0x8e>
 800fe98:	270b      	movs	r7, #11
 800fe9a:	e7ec      	b.n	800fe76 <rcl_take_response+0x8e>
 800fe9c:	2701      	movs	r7, #1
 800fe9e:	e7ea      	b.n	800fe76 <rcl_take_response+0x8e>
 800fea0:	f240 17f5 	movw	r7, #501	; 0x1f5
 800fea4:	e7e7      	b.n	800fe76 <rcl_take_response+0x8e>
 800fea6:	f000 f811 	bl	800fecc <rcl_convert_rmw_ret_to_rcl_ret>
 800feaa:	4607      	mov	r7, r0
 800feac:	e7e3      	b.n	800fe76 <rcl_take_response+0x8e>
 800feae:	bf00      	nop
	...

0800feb8 <rcl_client_is_valid>:
 800feb8:	b130      	cbz	r0, 800fec8 <rcl_client_is_valid+0x10>
 800feba:	6800      	ldr	r0, [r0, #0]
 800febc:	b120      	cbz	r0, 800fec8 <rcl_client_is_valid+0x10>
 800febe:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800fec2:	3800      	subs	r0, #0
 800fec4:	bf18      	it	ne
 800fec6:	2001      	movne	r0, #1
 800fec8:	4770      	bx	lr
 800feca:	bf00      	nop

0800fecc <rcl_convert_rmw_ret_to_rcl_ret>:
 800fecc:	280b      	cmp	r0, #11
 800fece:	dc0d      	bgt.n	800feec <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800fed0:	2800      	cmp	r0, #0
 800fed2:	db09      	blt.n	800fee8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800fed4:	280b      	cmp	r0, #11
 800fed6:	d807      	bhi.n	800fee8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800fed8:	e8df f000 	tbb	[pc, r0]
 800fedc:	07060607 	.word	0x07060607
 800fee0:	06060606 	.word	0x06060606
 800fee4:	07070606 	.word	0x07070606
 800fee8:	2001      	movs	r0, #1
 800feea:	4770      	bx	lr
 800feec:	28cb      	cmp	r0, #203	; 0xcb
 800feee:	bf18      	it	ne
 800fef0:	2001      	movne	r0, #1
 800fef2:	4770      	bx	lr

0800fef4 <rcl_get_zero_initialized_context>:
 800fef4:	4a03      	ldr	r2, [pc, #12]	; (800ff04 <rcl_get_zero_initialized_context+0x10>)
 800fef6:	4603      	mov	r3, r0
 800fef8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fefc:	e883 0003 	stmia.w	r3, {r0, r1}
 800ff00:	4618      	mov	r0, r3
 800ff02:	4770      	bx	lr
 800ff04:	0801c498 	.word	0x0801c498

0800ff08 <rcl_context_is_valid>:
 800ff08:	b118      	cbz	r0, 800ff12 <rcl_context_is_valid+0xa>
 800ff0a:	6840      	ldr	r0, [r0, #4]
 800ff0c:	3800      	subs	r0, #0
 800ff0e:	bf18      	it	ne
 800ff10:	2001      	movne	r0, #1
 800ff12:	4770      	bx	lr

0800ff14 <__cleanup_context>:
 800ff14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff18:	4606      	mov	r6, r0
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	6800      	ldr	r0, [r0, #0]
 800ff1e:	6073      	str	r3, [r6, #4]
 800ff20:	2800      	cmp	r0, #0
 800ff22:	d049      	beq.n	800ffb8 <__cleanup_context+0xa4>
 800ff24:	6947      	ldr	r7, [r0, #20]
 800ff26:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800ff2a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800ff2e:	b137      	cbz	r7, 800ff3e <__cleanup_context+0x2a>
 800ff30:	3014      	adds	r0, #20
 800ff32:	f000 f9e7 	bl	8010304 <rcl_init_options_fini>
 800ff36:	4607      	mov	r7, r0
 800ff38:	2800      	cmp	r0, #0
 800ff3a:	d144      	bne.n	800ffc6 <__cleanup_context+0xb2>
 800ff3c:	6830      	ldr	r0, [r6, #0]
 800ff3e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800ff40:	b143      	cbz	r3, 800ff54 <__cleanup_context+0x40>
 800ff42:	3028      	adds	r0, #40	; 0x28
 800ff44:	f003 fd44 	bl	80139d0 <rmw_context_fini>
 800ff48:	b118      	cbz	r0, 800ff52 <__cleanup_context+0x3e>
 800ff4a:	2f00      	cmp	r7, #0
 800ff4c:	d03e      	beq.n	800ffcc <__cleanup_context+0xb8>
 800ff4e:	f7fc fef3 	bl	800cd38 <rcutils_reset_error>
 800ff52:	6830      	ldr	r0, [r6, #0]
 800ff54:	6a03      	ldr	r3, [r0, #32]
 800ff56:	b1db      	cbz	r3, 800ff90 <__cleanup_context+0x7c>
 800ff58:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800ff5c:	2a01      	cmp	r2, #1
 800ff5e:	f17c 0100 	sbcs.w	r1, ip, #0
 800ff62:	db11      	blt.n	800ff88 <__cleanup_context+0x74>
 800ff64:	2400      	movs	r4, #0
 800ff66:	4625      	mov	r5, r4
 800ff68:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ff6c:	4649      	mov	r1, r9
 800ff6e:	b1b8      	cbz	r0, 800ffa0 <__cleanup_context+0x8c>
 800ff70:	47c0      	blx	r8
 800ff72:	6833      	ldr	r3, [r6, #0]
 800ff74:	3401      	adds	r4, #1
 800ff76:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800ff7a:	f145 0500 	adc.w	r5, r5, #0
 800ff7e:	6a1b      	ldr	r3, [r3, #32]
 800ff80:	4294      	cmp	r4, r2
 800ff82:	eb75 010c 	sbcs.w	r1, r5, ip
 800ff86:	dbef      	blt.n	800ff68 <__cleanup_context+0x54>
 800ff88:	4618      	mov	r0, r3
 800ff8a:	4649      	mov	r1, r9
 800ff8c:	47c0      	blx	r8
 800ff8e:	6830      	ldr	r0, [r6, #0]
 800ff90:	4649      	mov	r1, r9
 800ff92:	47c0      	blx	r8
 800ff94:	2300      	movs	r3, #0
 800ff96:	4638      	mov	r0, r7
 800ff98:	e9c6 3300 	strd	r3, r3, [r6]
 800ff9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffa0:	3401      	adds	r4, #1
 800ffa2:	f145 0500 	adc.w	r5, r5, #0
 800ffa6:	4294      	cmp	r4, r2
 800ffa8:	eb75 010c 	sbcs.w	r1, r5, ip
 800ffac:	dbdc      	blt.n	800ff68 <__cleanup_context+0x54>
 800ffae:	4618      	mov	r0, r3
 800ffb0:	4649      	mov	r1, r9
 800ffb2:	47c0      	blx	r8
 800ffb4:	6830      	ldr	r0, [r6, #0]
 800ffb6:	e7eb      	b.n	800ff90 <__cleanup_context+0x7c>
 800ffb8:	4607      	mov	r7, r0
 800ffba:	2300      	movs	r3, #0
 800ffbc:	4638      	mov	r0, r7
 800ffbe:	e9c6 3300 	strd	r3, r3, [r6]
 800ffc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffc6:	f7fc feb7 	bl	800cd38 <rcutils_reset_error>
 800ffca:	e7b7      	b.n	800ff3c <__cleanup_context+0x28>
 800ffcc:	f7ff ff7e 	bl	800fecc <rcl_convert_rmw_ret_to_rcl_ret>
 800ffd0:	4607      	mov	r7, r0
 800ffd2:	e7bc      	b.n	800ff4e <__cleanup_context+0x3a>

0800ffd4 <rcl_init>:
 800ffd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffd8:	1e05      	subs	r5, r0, #0
 800ffda:	b0a7      	sub	sp, #156	; 0x9c
 800ffdc:	460e      	mov	r6, r1
 800ffde:	4690      	mov	r8, r2
 800ffe0:	461f      	mov	r7, r3
 800ffe2:	f340 80a0 	ble.w	8010126 <rcl_init+0x152>
 800ffe6:	2900      	cmp	r1, #0
 800ffe8:	f000 80a0 	beq.w	801012c <rcl_init+0x158>
 800ffec:	f1a1 0e04 	sub.w	lr, r1, #4
 800fff0:	f04f 0c00 	mov.w	ip, #0
 800fff4:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800fff8:	f10c 0c01 	add.w	ip, ip, #1
 800fffc:	2c00      	cmp	r4, #0
 800fffe:	f000 8095 	beq.w	801012c <rcl_init+0x158>
 8010002:	4565      	cmp	r5, ip
 8010004:	d1f6      	bne.n	800fff4 <rcl_init+0x20>
 8010006:	f1b8 0f00 	cmp.w	r8, #0
 801000a:	f000 808f 	beq.w	801012c <rcl_init+0x158>
 801000e:	f8d8 4000 	ldr.w	r4, [r8]
 8010012:	2c00      	cmp	r4, #0
 8010014:	f000 808a 	beq.w	801012c <rcl_init+0x158>
 8010018:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 801001c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801001e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010022:	6823      	ldr	r3, [r4, #0]
 8010024:	a821      	add	r0, sp, #132	; 0x84
 8010026:	f8cc 3000 	str.w	r3, [ip]
 801002a:	f7fc fe61 	bl	800ccf0 <rcutils_allocator_is_valid>
 801002e:	f080 0001 	eor.w	r0, r0, #1
 8010032:	b2c0      	uxtb	r0, r0
 8010034:	2800      	cmp	r0, #0
 8010036:	d179      	bne.n	801012c <rcl_init+0x158>
 8010038:	2f00      	cmp	r7, #0
 801003a:	d077      	beq.n	801012c <rcl_init+0x158>
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d179      	bne.n	8010136 <rcl_init+0x162>
 8010042:	2198      	movs	r1, #152	; 0x98
 8010044:	2001      	movs	r0, #1
 8010046:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 801004a:	4798      	blx	r3
 801004c:	4604      	mov	r4, r0
 801004e:	6038      	str	r0, [r7, #0]
 8010050:	2800      	cmp	r0, #0
 8010052:	f000 80cd 	beq.w	80101f0 <rcl_init+0x21c>
 8010056:	a802      	add	r0, sp, #8
 8010058:	f003 f8ca 	bl	80131f0 <rmw_get_zero_initialized_context>
 801005c:	a902      	add	r1, sp, #8
 801005e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8010062:	2270      	movs	r2, #112	; 0x70
 8010064:	f00a fbef 	bl	801a846 <memcpy>
 8010068:	f8d7 e000 	ldr.w	lr, [r7]
 801006c:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 8010070:	4674      	mov	r4, lr
 8010072:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010076:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010078:	f8dc 3000 	ldr.w	r3, [ip]
 801007c:	f10e 0114 	add.w	r1, lr, #20
 8010080:	4640      	mov	r0, r8
 8010082:	6023      	str	r3, [r4, #0]
 8010084:	f000 f968 	bl	8010358 <rcl_init_options_copy>
 8010088:	4604      	mov	r4, r0
 801008a:	2800      	cmp	r0, #0
 801008c:	d144      	bne.n	8010118 <rcl_init+0x144>
 801008e:	f8d7 9000 	ldr.w	r9, [r7]
 8010092:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 8010096:	f8c9 0020 	str.w	r0, [r9, #32]
 801009a:	f8c9 5018 	str.w	r5, [r9, #24]
 801009e:	f8c9 a01c 	str.w	sl, [r9, #28]
 80100a2:	2d00      	cmp	r5, #0
 80100a4:	d04e      	beq.n	8010144 <rcl_init+0x170>
 80100a6:	2e00      	cmp	r6, #0
 80100a8:	d04c      	beq.n	8010144 <rcl_init+0x170>
 80100aa:	2104      	movs	r1, #4
 80100ac:	4628      	mov	r0, r5
 80100ae:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 80100b2:	4798      	blx	r3
 80100b4:	f8c9 0020 	str.w	r0, [r9, #32]
 80100b8:	f8d7 9000 	ldr.w	r9, [r7]
 80100bc:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80100c0:	46cb      	mov	fp, r9
 80100c2:	b343      	cbz	r3, 8010116 <rcl_init+0x142>
 80100c4:	2d01      	cmp	r5, #1
 80100c6:	f17a 0300 	sbcs.w	r3, sl, #0
 80100ca:	db3b      	blt.n	8010144 <rcl_init+0x170>
 80100cc:	2400      	movs	r4, #0
 80100ce:	3e04      	subs	r6, #4
 80100d0:	46a1      	mov	r9, r4
 80100d2:	e00b      	b.n	80100ec <rcl_init+0x118>
 80100d4:	6831      	ldr	r1, [r6, #0]
 80100d6:	f00a fbb6 	bl	801a846 <memcpy>
 80100da:	3401      	adds	r4, #1
 80100dc:	f149 0900 	adc.w	r9, r9, #0
 80100e0:	45ca      	cmp	sl, r9
 80100e2:	bf08      	it	eq
 80100e4:	42a5      	cmpeq	r5, r4
 80100e6:	d02b      	beq.n	8010140 <rcl_init+0x16c>
 80100e8:	f8d7 b000 	ldr.w	fp, [r7]
 80100ec:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80100f0:	f7f0 f906 	bl	8000300 <strlen>
 80100f4:	1c42      	adds	r2, r0, #1
 80100f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80100f8:	4610      	mov	r0, r2
 80100fa:	9925      	ldr	r1, [sp, #148]	; 0x94
 80100fc:	f8db b020 	ldr.w	fp, [fp, #32]
 8010100:	9201      	str	r2, [sp, #4]
 8010102:	4798      	blx	r3
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	f84b 0024 	str.w	r0, [fp, r4, lsl #2]
 801010a:	6a1b      	ldr	r3, [r3, #32]
 801010c:	9a01      	ldr	r2, [sp, #4]
 801010e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8010112:	2800      	cmp	r0, #0
 8010114:	d1de      	bne.n	80100d4 <rcl_init+0x100>
 8010116:	240a      	movs	r4, #10
 8010118:	4638      	mov	r0, r7
 801011a:	f7ff fefb 	bl	800ff14 <__cleanup_context>
 801011e:	4620      	mov	r0, r4
 8010120:	b027      	add	sp, #156	; 0x9c
 8010122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010126:	2900      	cmp	r1, #0
 8010128:	f43f af6d 	beq.w	8010006 <rcl_init+0x32>
 801012c:	240b      	movs	r4, #11
 801012e:	4620      	mov	r0, r4
 8010130:	b027      	add	sp, #156	; 0x9c
 8010132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010136:	2464      	movs	r4, #100	; 0x64
 8010138:	4620      	mov	r0, r4
 801013a:	b027      	add	sp, #156	; 0x9c
 801013c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010140:	f8d7 9000 	ldr.w	r9, [r7]
 8010144:	493f      	ldr	r1, [pc, #252]	; (8010244 <rcl_init+0x270>)
 8010146:	680b      	ldr	r3, [r1, #0]
 8010148:	3301      	adds	r3, #1
 801014a:	d04c      	beq.n	80101e6 <rcl_init+0x212>
 801014c:	461a      	mov	r2, r3
 801014e:	2000      	movs	r0, #0
 8010150:	600b      	str	r3, [r1, #0]
 8010152:	f8d9 5014 	ldr.w	r5, [r9, #20]
 8010156:	607b      	str	r3, [r7, #4]
 8010158:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801015a:	3301      	adds	r3, #1
 801015c:	e9c5 2006 	strd	r2, r0, [r5, #24]
 8010160:	d05d      	beq.n	801021e <rcl_init+0x24a>
 8010162:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8010166:	2b00      	cmp	r3, #0
 8010168:	d044      	beq.n	80101f4 <rcl_init+0x220>
 801016a:	2b01      	cmp	r3, #1
 801016c:	d04e      	beq.n	801020c <rcl_init+0x238>
 801016e:	f8d8 3000 	ldr.w	r3, [r8]
 8010172:	f105 0634 	add.w	r6, r5, #52	; 0x34
 8010176:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801017a:	2b00      	cmp	r3, #0
 801017c:	d05a      	beq.n	8010234 <rcl_init+0x260>
 801017e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8010180:	b953      	cbnz	r3, 8010198 <rcl_init+0x1c4>
 8010182:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8010186:	2801      	cmp	r0, #1
 8010188:	d008      	beq.n	801019c <rcl_init+0x1c8>
 801018a:	a921      	add	r1, sp, #132	; 0x84
 801018c:	4630      	mov	r0, r6
 801018e:	f008 f8e7 	bl	8018360 <rcl_get_discovery_static_peers>
 8010192:	4604      	mov	r4, r0
 8010194:	2800      	cmp	r0, #0
 8010196:	d1bf      	bne.n	8010118 <rcl_init+0x144>
 8010198:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 801019c:	f008 f8d6 	bl	801834c <rcl_automatic_discovery_range_to_string>
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	aa20      	add	r2, sp, #128	; 0x80
 80101a4:	a91f      	add	r1, sp, #124	; 0x7c
 80101a6:	695b      	ldr	r3, [r3, #20]
 80101a8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80101aa:	f001 f957 	bl	801145c <rcl_validate_enclave_name>
 80101ae:	4604      	mov	r4, r0
 80101b0:	2800      	cmp	r0, #0
 80101b2:	d1b1      	bne.n	8010118 <rcl_init+0x144>
 80101b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80101b6:	bb83      	cbnz	r3, 801021a <rcl_init+0x246>
 80101b8:	6839      	ldr	r1, [r7, #0]
 80101ba:	694b      	ldr	r3, [r1, #20]
 80101bc:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80101c0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80101c2:	f000 fc77 	bl	8010ab4 <rcl_get_security_options_from_environment>
 80101c6:	4604      	mov	r4, r0
 80101c8:	2800      	cmp	r0, #0
 80101ca:	d1a5      	bne.n	8010118 <rcl_init+0x144>
 80101cc:	6839      	ldr	r1, [r7, #0]
 80101ce:	6948      	ldr	r0, [r1, #20]
 80101d0:	3128      	adds	r1, #40	; 0x28
 80101d2:	3018      	adds	r0, #24
 80101d4:	f003 fac6 	bl	8013764 <rmw_init>
 80101d8:	4604      	mov	r4, r0
 80101da:	2800      	cmp	r0, #0
 80101dc:	d0a7      	beq.n	801012e <rcl_init+0x15a>
 80101de:	f7ff fe75 	bl	800fecc <rcl_convert_rmw_ret_to_rcl_ret>
 80101e2:	4604      	mov	r4, r0
 80101e4:	e798      	b.n	8010118 <rcl_init+0x144>
 80101e6:	2201      	movs	r2, #1
 80101e8:	4618      	mov	r0, r3
 80101ea:	600a      	str	r2, [r1, #0]
 80101ec:	4613      	mov	r3, r2
 80101ee:	e7b0      	b.n	8010152 <rcl_init+0x17e>
 80101f0:	240a      	movs	r4, #10
 80101f2:	e79c      	b.n	801012e <rcl_init+0x15a>
 80101f4:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80101f8:	f000 f90c 	bl	8010414 <rcl_get_localhost_only>
 80101fc:	4604      	mov	r4, r0
 80101fe:	2800      	cmp	r0, #0
 8010200:	d18a      	bne.n	8010118 <rcl_init+0x144>
 8010202:	683a      	ldr	r2, [r7, #0]
 8010204:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8010208:	6955      	ldr	r5, [r2, #20]
 801020a:	e7ae      	b.n	801016a <rcl_init+0x196>
 801020c:	2302      	movs	r3, #2
 801020e:	2200      	movs	r2, #0
 8010210:	4618      	mov	r0, r3
 8010212:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 8010216:	63ea      	str	r2, [r5, #60]	; 0x3c
 8010218:	e7c0      	b.n	801019c <rcl_init+0x1c8>
 801021a:	2401      	movs	r4, #1
 801021c:	e77c      	b.n	8010118 <rcl_init+0x144>
 801021e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8010222:	f008 f903 	bl	801842c <rcl_get_default_domain_id>
 8010226:	4604      	mov	r4, r0
 8010228:	2800      	cmp	r0, #0
 801022a:	f47f af75 	bne.w	8010118 <rcl_init+0x144>
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	695d      	ldr	r5, [r3, #20]
 8010232:	e796      	b.n	8010162 <rcl_init+0x18e>
 8010234:	4630      	mov	r0, r6
 8010236:	f008 f847 	bl	80182c8 <rcl_get_automatic_discovery_range>
 801023a:	4604      	mov	r4, r0
 801023c:	2800      	cmp	r0, #0
 801023e:	d09e      	beq.n	801017e <rcl_init+0x1aa>
 8010240:	e76a      	b.n	8010118 <rcl_init+0x144>
 8010242:	bf00      	nop
 8010244:	2000b900 	.word	0x2000b900

08010248 <rcl_get_zero_initialized_init_options>:
 8010248:	2000      	movs	r0, #0
 801024a:	4770      	bx	lr

0801024c <rcl_init_options_init>:
 801024c:	b084      	sub	sp, #16
 801024e:	b570      	push	{r4, r5, r6, lr}
 8010250:	b09e      	sub	sp, #120	; 0x78
 8010252:	ad23      	add	r5, sp, #140	; 0x8c
 8010254:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8010258:	2800      	cmp	r0, #0
 801025a:	d046      	beq.n	80102ea <rcl_init_options_init+0x9e>
 801025c:	6803      	ldr	r3, [r0, #0]
 801025e:	4604      	mov	r4, r0
 8010260:	b133      	cbz	r3, 8010270 <rcl_init_options_init+0x24>
 8010262:	2564      	movs	r5, #100	; 0x64
 8010264:	4628      	mov	r0, r5
 8010266:	b01e      	add	sp, #120	; 0x78
 8010268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801026c:	b004      	add	sp, #16
 801026e:	4770      	bx	lr
 8010270:	4628      	mov	r0, r5
 8010272:	f7fc fd3d 	bl	800ccf0 <rcutils_allocator_is_valid>
 8010276:	2800      	cmp	r0, #0
 8010278:	d037      	beq.n	80102ea <rcl_init_options_init+0x9e>
 801027a:	46ae      	mov	lr, r5
 801027c:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8010280:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010284:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010288:	f8de 3000 	ldr.w	r3, [lr]
 801028c:	2070      	movs	r0, #112	; 0x70
 801028e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8010290:	f8cc 3000 	str.w	r3, [ip]
 8010294:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010296:	4798      	blx	r3
 8010298:	4606      	mov	r6, r0
 801029a:	6020      	str	r0, [r4, #0]
 801029c:	b338      	cbz	r0, 80102ee <rcl_init_options_init+0xa2>
 801029e:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 80102a2:	4686      	mov	lr, r0
 80102a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80102a8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80102ac:	f8dc 3000 	ldr.w	r3, [ip]
 80102b0:	a802      	add	r0, sp, #8
 80102b2:	f8ce 3000 	str.w	r3, [lr]
 80102b6:	f002 ffaf 	bl	8013218 <rmw_get_zero_initialized_init_options>
 80102ba:	2258      	movs	r2, #88	; 0x58
 80102bc:	a902      	add	r1, sp, #8
 80102be:	f106 0018 	add.w	r0, r6, #24
 80102c2:	f00a fac0 	bl	801a846 <memcpy>
 80102c6:	ab26      	add	r3, sp, #152	; 0x98
 80102c8:	6826      	ldr	r6, [r4, #0]
 80102ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80102ce:	e88d 0003 	stmia.w	sp, {r0, r1}
 80102d2:	f106 0018 	add.w	r0, r6, #24
 80102d6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80102da:	f003 f973 	bl	80135c4 <rmw_init_options_init>
 80102de:	4605      	mov	r5, r0
 80102e0:	b938      	cbnz	r0, 80102f2 <rcl_init_options_init+0xa6>
 80102e2:	6823      	ldr	r3, [r4, #0]
 80102e4:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
 80102e8:	e7bc      	b.n	8010264 <rcl_init_options_init+0x18>
 80102ea:	250b      	movs	r5, #11
 80102ec:	e7ba      	b.n	8010264 <rcl_init_options_init+0x18>
 80102ee:	250a      	movs	r5, #10
 80102f0:	e7b8      	b.n	8010264 <rcl_init_options_init+0x18>
 80102f2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80102f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80102f6:	6820      	ldr	r0, [r4, #0]
 80102f8:	4798      	blx	r3
 80102fa:	4628      	mov	r0, r5
 80102fc:	f7ff fde6 	bl	800fecc <rcl_convert_rmw_ret_to_rcl_ret>
 8010300:	4605      	mov	r5, r0
 8010302:	e7af      	b.n	8010264 <rcl_init_options_init+0x18>

08010304 <rcl_init_options_fini>:
 8010304:	b530      	push	{r4, r5, lr}
 8010306:	b087      	sub	sp, #28
 8010308:	b1f0      	cbz	r0, 8010348 <rcl_init_options_fini+0x44>
 801030a:	6803      	ldr	r3, [r0, #0]
 801030c:	4604      	mov	r4, r0
 801030e:	b1db      	cbz	r3, 8010348 <rcl_init_options_fini+0x44>
 8010310:	469c      	mov	ip, r3
 8010312:	f10d 0e04 	add.w	lr, sp, #4
 8010316:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801031a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801031e:	f8dc 3000 	ldr.w	r3, [ip]
 8010322:	a801      	add	r0, sp, #4
 8010324:	f8ce 3000 	str.w	r3, [lr]
 8010328:	f7fc fce2 	bl	800ccf0 <rcutils_allocator_is_valid>
 801032c:	b160      	cbz	r0, 8010348 <rcl_init_options_fini+0x44>
 801032e:	6820      	ldr	r0, [r4, #0]
 8010330:	3018      	adds	r0, #24
 8010332:	f003 f9e1 	bl	80136f8 <rmw_init_options_fini>
 8010336:	4605      	mov	r5, r0
 8010338:	b950      	cbnz	r0, 8010350 <rcl_init_options_fini+0x4c>
 801033a:	6820      	ldr	r0, [r4, #0]
 801033c:	9b02      	ldr	r3, [sp, #8]
 801033e:	9905      	ldr	r1, [sp, #20]
 8010340:	4798      	blx	r3
 8010342:	4628      	mov	r0, r5
 8010344:	b007      	add	sp, #28
 8010346:	bd30      	pop	{r4, r5, pc}
 8010348:	250b      	movs	r5, #11
 801034a:	4628      	mov	r0, r5
 801034c:	b007      	add	sp, #28
 801034e:	bd30      	pop	{r4, r5, pc}
 8010350:	f7ff fdbc 	bl	800fecc <rcl_convert_rmw_ret_to_rcl_ret>
 8010354:	4605      	mov	r5, r0
 8010356:	e7f8      	b.n	801034a <rcl_init_options_fini+0x46>

08010358 <rcl_init_options_copy>:
 8010358:	b5f0      	push	{r4, r5, r6, r7, lr}
 801035a:	b09d      	sub	sp, #116	; 0x74
 801035c:	2800      	cmp	r0, #0
 801035e:	d04d      	beq.n	80103fc <rcl_init_options_copy+0xa4>
 8010360:	4604      	mov	r4, r0
 8010362:	6800      	ldr	r0, [r0, #0]
 8010364:	2800      	cmp	r0, #0
 8010366:	d049      	beq.n	80103fc <rcl_init_options_copy+0xa4>
 8010368:	460d      	mov	r5, r1
 801036a:	f7fc fcc1 	bl	800ccf0 <rcutils_allocator_is_valid>
 801036e:	2d00      	cmp	r5, #0
 8010370:	d044      	beq.n	80103fc <rcl_init_options_copy+0xa4>
 8010372:	f080 0001 	eor.w	r0, r0, #1
 8010376:	b2c0      	uxtb	r0, r0
 8010378:	2800      	cmp	r0, #0
 801037a:	d13f      	bne.n	80103fc <rcl_init_options_copy+0xa4>
 801037c:	682b      	ldr	r3, [r5, #0]
 801037e:	b11b      	cbz	r3, 8010388 <rcl_init_options_copy+0x30>
 8010380:	2464      	movs	r4, #100	; 0x64
 8010382:	4620      	mov	r0, r4
 8010384:	b01d      	add	sp, #116	; 0x74
 8010386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010388:	6826      	ldr	r6, [r4, #0]
 801038a:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 801038e:	46b6      	mov	lr, r6
 8010390:	6837      	ldr	r7, [r6, #0]
 8010392:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010396:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801039a:	f8de 3000 	ldr.w	r3, [lr]
 801039e:	2070      	movs	r0, #112	; 0x70
 80103a0:	4619      	mov	r1, r3
 80103a2:	f8cc 3000 	str.w	r3, [ip]
 80103a6:	47b8      	blx	r7
 80103a8:	4606      	mov	r6, r0
 80103aa:	6028      	str	r0, [r5, #0]
 80103ac:	b350      	cbz	r0, 8010404 <rcl_init_options_copy+0xac>
 80103ae:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 80103b2:	4686      	mov	lr, r0
 80103b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80103b8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80103bc:	f8dc 3000 	ldr.w	r3, [ip]
 80103c0:	4668      	mov	r0, sp
 80103c2:	f8ce 3000 	str.w	r3, [lr]
 80103c6:	f002 ff27 	bl	8013218 <rmw_get_zero_initialized_init_options>
 80103ca:	2258      	movs	r2, #88	; 0x58
 80103cc:	4669      	mov	r1, sp
 80103ce:	f106 0018 	add.w	r0, r6, #24
 80103d2:	f00a fa38 	bl	801a846 <memcpy>
 80103d6:	6820      	ldr	r0, [r4, #0]
 80103d8:	6829      	ldr	r1, [r5, #0]
 80103da:	3018      	adds	r0, #24
 80103dc:	3118      	adds	r1, #24
 80103de:	f003 f959 	bl	8013694 <rmw_init_options_copy>
 80103e2:	4604      	mov	r4, r0
 80103e4:	2800      	cmp	r0, #0
 80103e6:	d0cc      	beq.n	8010382 <rcl_init_options_copy+0x2a>
 80103e8:	f7fc fc90 	bl	800cd0c <rcutils_get_error_string>
 80103ec:	f7fc fca4 	bl	800cd38 <rcutils_reset_error>
 80103f0:	4628      	mov	r0, r5
 80103f2:	f7ff ff87 	bl	8010304 <rcl_init_options_fini>
 80103f6:	b138      	cbz	r0, 8010408 <rcl_init_options_copy+0xb0>
 80103f8:	4604      	mov	r4, r0
 80103fa:	e7c2      	b.n	8010382 <rcl_init_options_copy+0x2a>
 80103fc:	240b      	movs	r4, #11
 80103fe:	4620      	mov	r0, r4
 8010400:	b01d      	add	sp, #116	; 0x74
 8010402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010404:	240a      	movs	r4, #10
 8010406:	e7bc      	b.n	8010382 <rcl_init_options_copy+0x2a>
 8010408:	4620      	mov	r0, r4
 801040a:	b01d      	add	sp, #116	; 0x74
 801040c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010410:	f7ff bd5c 	b.w	800fecc <rcl_convert_rmw_ret_to_rcl_ret>

08010414 <rcl_get_localhost_only>:
 8010414:	b510      	push	{r4, lr}
 8010416:	2300      	movs	r3, #0
 8010418:	b082      	sub	sp, #8
 801041a:	9301      	str	r3, [sp, #4]
 801041c:	b1c0      	cbz	r0, 8010450 <rcl_get_localhost_only+0x3c>
 801041e:	4604      	mov	r4, r0
 8010420:	a901      	add	r1, sp, #4
 8010422:	480d      	ldr	r0, [pc, #52]	; (8010458 <rcl_get_localhost_only+0x44>)
 8010424:	f002 fc34 	bl	8012c90 <rcutils_get_env>
 8010428:	b110      	cbz	r0, 8010430 <rcl_get_localhost_only+0x1c>
 801042a:	2001      	movs	r0, #1
 801042c:	b002      	add	sp, #8
 801042e:	bd10      	pop	{r4, pc}
 8010430:	9b01      	ldr	r3, [sp, #4]
 8010432:	b10b      	cbz	r3, 8010438 <rcl_get_localhost_only+0x24>
 8010434:	781b      	ldrb	r3, [r3, #0]
 8010436:	b923      	cbnz	r3, 8010442 <rcl_get_localhost_only+0x2e>
 8010438:	2300      	movs	r3, #0
 801043a:	4618      	mov	r0, r3
 801043c:	7023      	strb	r3, [r4, #0]
 801043e:	b002      	add	sp, #8
 8010440:	bd10      	pop	{r4, pc}
 8010442:	2b31      	cmp	r3, #49	; 0x31
 8010444:	bf0c      	ite	eq
 8010446:	2301      	moveq	r3, #1
 8010448:	2302      	movne	r3, #2
 801044a:	7023      	strb	r3, [r4, #0]
 801044c:	b002      	add	sp, #8
 801044e:	bd10      	pop	{r4, pc}
 8010450:	200b      	movs	r0, #11
 8010452:	b002      	add	sp, #8
 8010454:	bd10      	pop	{r4, pc}
 8010456:	bf00      	nop
 8010458:	0801c4a0 	.word	0x0801c4a0

0801045c <rcl_get_zero_initialized_node>:
 801045c:	4a03      	ldr	r2, [pc, #12]	; (801046c <rcl_get_zero_initialized_node+0x10>)
 801045e:	4603      	mov	r3, r0
 8010460:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010464:	e883 0003 	stmia.w	r3, {r0, r1}
 8010468:	4618      	mov	r0, r3
 801046a:	4770      	bx	lr
 801046c:	0801c4d0 	.word	0x0801c4d0

08010470 <rcl_node_init>:
 8010470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010474:	b0ab      	sub	sp, #172	; 0xac
 8010476:	4604      	mov	r4, r0
 8010478:	460e      	mov	r6, r1
 801047a:	4615      	mov	r5, r2
 801047c:	f8dd 80d0 	ldr.w	r8, [sp, #208]	; 0xd0
 8010480:	a825      	add	r0, sp, #148	; 0x94
 8010482:	461f      	mov	r7, r3
 8010484:	f008 f9f8 	bl	8018878 <rcl_guard_condition_get_default_options>
 8010488:	f1b8 0f00 	cmp.w	r8, #0
 801048c:	f000 80f3 	beq.w	8010676 <rcl_node_init+0x206>
 8010490:	4640      	mov	r0, r8
 8010492:	f7fc fc2d 	bl	800ccf0 <rcutils_allocator_is_valid>
 8010496:	2d00      	cmp	r5, #0
 8010498:	bf18      	it	ne
 801049a:	2c00      	cmpne	r4, #0
 801049c:	f080 0001 	eor.w	r0, r0, #1
 80104a0:	bf0c      	ite	eq
 80104a2:	f04f 0c01 	moveq.w	ip, #1
 80104a6:	f04f 0c00 	movne.w	ip, #0
 80104aa:	2e00      	cmp	r6, #0
 80104ac:	bf08      	it	eq
 80104ae:	f04c 0c01 	orreq.w	ip, ip, #1
 80104b2:	ea4c 0c00 	orr.w	ip, ip, r0
 80104b6:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 80104ba:	f040 80dc 	bne.w	8010676 <rcl_node_init+0x206>
 80104be:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80104c2:	f1ba 0f00 	cmp.w	sl, #0
 80104c6:	f040 80fc 	bne.w	80106c2 <rcl_node_init+0x252>
 80104ca:	2f00      	cmp	r7, #0
 80104cc:	f000 80d3 	beq.w	8010676 <rcl_node_init+0x206>
 80104d0:	4638      	mov	r0, r7
 80104d2:	f7ff fd19 	bl	800ff08 <rcl_context_is_valid>
 80104d6:	4683      	mov	fp, r0
 80104d8:	2800      	cmp	r0, #0
 80104da:	f000 80d2 	beq.w	8010682 <rcl_node_init+0x212>
 80104de:	4652      	mov	r2, sl
 80104e0:	4630      	mov	r0, r6
 80104e2:	a924      	add	r1, sp, #144	; 0x90
 80104e4:	f8cd a090 	str.w	sl, [sp, #144]	; 0x90
 80104e8:	f002 ffa4 	bl	8013434 <rmw_validate_node_name>
 80104ec:	4682      	mov	sl, r0
 80104ee:	2800      	cmp	r0, #0
 80104f0:	f040 80c3 	bne.w	801067a <rcl_node_init+0x20a>
 80104f4:	9824      	ldr	r0, [sp, #144]	; 0x90
 80104f6:	2800      	cmp	r0, #0
 80104f8:	f040 80f1 	bne.w	80106de <rcl_node_init+0x26e>
 80104fc:	4628      	mov	r0, r5
 80104fe:	f7ef feff 	bl	8000300 <strlen>
 8010502:	2800      	cmp	r0, #0
 8010504:	f040 80c0 	bne.w	8010688 <rcl_node_init+0x218>
 8010508:	4d79      	ldr	r5, [pc, #484]	; (80106f0 <rcl_node_init+0x280>)
 801050a:	a924      	add	r1, sp, #144	; 0x90
 801050c:	2200      	movs	r2, #0
 801050e:	4628      	mov	r0, r5
 8010510:	f002 ff72 	bl	80133f8 <rmw_validate_namespace>
 8010514:	4682      	mov	sl, r0
 8010516:	2800      	cmp	r0, #0
 8010518:	f040 80af 	bne.w	801067a <rcl_node_init+0x20a>
 801051c:	9824      	ldr	r0, [sp, #144]	; 0x90
 801051e:	2800      	cmp	r0, #0
 8010520:	f040 80d5 	bne.w	80106ce <rcl_node_init+0x25e>
 8010524:	f8d8 3000 	ldr.w	r3, [r8]
 8010528:	2080      	movs	r0, #128	; 0x80
 801052a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801052e:	4798      	blx	r3
 8010530:	4682      	mov	sl, r0
 8010532:	6060      	str	r0, [r4, #4]
 8010534:	2800      	cmp	r0, #0
 8010536:	f000 80cf 	beq.w	80106d8 <rcl_node_init+0x268>
 801053a:	2200      	movs	r2, #0
 801053c:	2300      	movs	r3, #0
 801053e:	a808      	add	r0, sp, #32
 8010540:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 8010544:	e9ca 231e 	strd	r2, r3, [sl, #120]	; 0x78
 8010548:	f000 f902 	bl	8010750 <rcl_node_get_default_options>
 801054c:	a908      	add	r1, sp, #32
 801054e:	4650      	mov	r0, sl
 8010550:	2270      	movs	r2, #112	; 0x70
 8010552:	f00a f978 	bl	801a846 <memcpy>
 8010556:	6861      	ldr	r1, [r4, #4]
 8010558:	4640      	mov	r0, r8
 801055a:	6027      	str	r7, [r4, #0]
 801055c:	f000 f906 	bl	801076c <rcl_node_options_copy>
 8010560:	2800      	cmp	r0, #0
 8010562:	d158      	bne.n	8010616 <rcl_node_init+0x1a6>
 8010564:	4628      	mov	r0, r5
 8010566:	f7ef fecb 	bl	8000300 <strlen>
 801056a:	4428      	add	r0, r5
 801056c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8010570:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8010574:	2b2f      	cmp	r3, #47	; 0x2f
 8010576:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801057a:	9300      	str	r3, [sp, #0]
 801057c:	bf0c      	ite	eq
 801057e:	4b5d      	ldreq	r3, [pc, #372]	; (80106f4 <rcl_node_init+0x284>)
 8010580:	4b5d      	ldrne	r3, [pc, #372]	; (80106f8 <rcl_node_init+0x288>)
 8010582:	9302      	str	r3, [sp, #8]
 8010584:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010588:	9301      	str	r3, [sp, #4]
 801058a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 801058e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8010592:	f002 fba5 	bl	8012ce0 <rcutils_format_string_limit>
 8010596:	6823      	ldr	r3, [r4, #0]
 8010598:	f8ca 007c 	str.w	r0, [sl, #124]	; 0x7c
 801059c:	4631      	mov	r1, r6
 801059e:	6818      	ldr	r0, [r3, #0]
 80105a0:	462a      	mov	r2, r5
 80105a2:	6866      	ldr	r6, [r4, #4]
 80105a4:	3028      	adds	r0, #40	; 0x28
 80105a6:	f003 fac5 	bl	8013b34 <rmw_create_node>
 80105aa:	6863      	ldr	r3, [r4, #4]
 80105ac:	6730      	str	r0, [r6, #112]	; 0x70
 80105ae:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80105b0:	2800      	cmp	r0, #0
 80105b2:	d032      	beq.n	801061a <rcl_node_init+0x1aa>
 80105b4:	f003 fb4e 	bl	8013c54 <rmw_node_get_graph_guard_condition>
 80105b8:	4682      	mov	sl, r0
 80105ba:	b360      	cbz	r0, 8010616 <rcl_node_init+0x1a6>
 80105bc:	f8d8 3000 	ldr.w	r3, [r8]
 80105c0:	2008      	movs	r0, #8
 80105c2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80105c6:	6866      	ldr	r6, [r4, #4]
 80105c8:	4798      	blx	r3
 80105ca:	6863      	ldr	r3, [r4, #4]
 80105cc:	6770      	str	r0, [r6, #116]	; 0x74
 80105ce:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
 80105d2:	f1bb 0f00 	cmp.w	fp, #0
 80105d6:	d020      	beq.n	801061a <rcl_node_init+0x1aa>
 80105d8:	a806      	add	r0, sp, #24
 80105da:	ae25      	add	r6, sp, #148	; 0x94
 80105dc:	f008 f8c0 	bl	8018760 <rcl_get_zero_initialized_guard_condition>
 80105e0:	a806      	add	r0, sp, #24
 80105e2:	6863      	ldr	r3, [r4, #4]
 80105e4:	46c4      	mov	ip, r8
 80105e6:	c803      	ldmia	r0, {r0, r1}
 80105e8:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
 80105ec:	e88b 0003 	stmia.w	fp, {r0, r1}
 80105f0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80105f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80105f6:	f8dc 3000 	ldr.w	r3, [ip]
 80105fa:	6033      	str	r3, [r6, #0]
 80105fc:	ab2a      	add	r3, sp, #168	; 0xa8
 80105fe:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8010602:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010606:	4651      	mov	r1, sl
 8010608:	463a      	mov	r2, r7
 801060a:	4670      	mov	r0, lr
 801060c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801060e:	f008 f8b1 	bl	8018774 <rcl_guard_condition_init_from_rmw>
 8010612:	4682      	mov	sl, r0
 8010614:	b328      	cbz	r0, 8010662 <rcl_node_init+0x1f2>
 8010616:	6863      	ldr	r3, [r4, #4]
 8010618:	b1f3      	cbz	r3, 8010658 <rcl_node_init+0x1e8>
 801061a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 801061c:	b128      	cbz	r0, 801062a <rcl_node_init+0x1ba>
 801061e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010622:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010626:	4798      	blx	r3
 8010628:	6863      	ldr	r3, [r4, #4]
 801062a:	6f18      	ldr	r0, [r3, #112]	; 0x70
 801062c:	b110      	cbz	r0, 8010634 <rcl_node_init+0x1c4>
 801062e:	f003 fa93 	bl	8013b58 <rmw_destroy_node>
 8010632:	6863      	ldr	r3, [r4, #4]
 8010634:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8010636:	b148      	cbz	r0, 801064c <rcl_node_init+0x1dc>
 8010638:	f008 f8f8 	bl	801882c <rcl_guard_condition_fini>
 801063c:	6863      	ldr	r3, [r4, #4]
 801063e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010642:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8010644:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010648:	4798      	blx	r3
 801064a:	6863      	ldr	r3, [r4, #4]
 801064c:	4618      	mov	r0, r3
 801064e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010652:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010656:	4798      	blx	r3
 8010658:	2300      	movs	r3, #0
 801065a:	f04f 0a01 	mov.w	sl, #1
 801065e:	e9c4 3300 	strd	r3, r3, [r4]
 8010662:	f1b9 0f00 	cmp.w	r9, #0
 8010666:	d008      	beq.n	801067a <rcl_node_init+0x20a>
 8010668:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801066c:	4628      	mov	r0, r5
 801066e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010672:	4798      	blx	r3
 8010674:	e001      	b.n	801067a <rcl_node_init+0x20a>
 8010676:	f04f 0a0b 	mov.w	sl, #11
 801067a:	4650      	mov	r0, sl
 801067c:	b02b      	add	sp, #172	; 0xac
 801067e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010682:	f04f 0a65 	mov.w	sl, #101	; 0x65
 8010686:	e7f8      	b.n	801067a <rcl_node_init+0x20a>
 8010688:	782b      	ldrb	r3, [r5, #0]
 801068a:	2b2f      	cmp	r3, #47	; 0x2f
 801068c:	f43f af3d 	beq.w	801050a <rcl_node_init+0x9a>
 8010690:	9503      	str	r5, [sp, #12]
 8010692:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8010696:	9300      	str	r3, [sp, #0]
 8010698:	4b18      	ldr	r3, [pc, #96]	; (80106fc <rcl_node_init+0x28c>)
 801069a:	9302      	str	r3, [sp, #8]
 801069c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80106a0:	9301      	str	r3, [sp, #4]
 80106a2:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80106a6:	f002 fb1b 	bl	8012ce0 <rcutils_format_string_limit>
 80106aa:	4605      	mov	r5, r0
 80106ac:	b1e0      	cbz	r0, 80106e8 <rcl_node_init+0x278>
 80106ae:	2200      	movs	r2, #0
 80106b0:	a924      	add	r1, sp, #144	; 0x90
 80106b2:	9224      	str	r2, [sp, #144]	; 0x90
 80106b4:	f002 fea0 	bl	80133f8 <rmw_validate_namespace>
 80106b8:	4682      	mov	sl, r0
 80106ba:	2800      	cmp	r0, #0
 80106bc:	d1d4      	bne.n	8010668 <rcl_node_init+0x1f8>
 80106be:	46d9      	mov	r9, fp
 80106c0:	e72c      	b.n	801051c <rcl_node_init+0xac>
 80106c2:	f04f 0a64 	mov.w	sl, #100	; 0x64
 80106c6:	4650      	mov	r0, sl
 80106c8:	b02b      	add	sp, #172	; 0xac
 80106ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106ce:	f04f 0aca 	mov.w	sl, #202	; 0xca
 80106d2:	f002 fea3 	bl	801341c <rmw_namespace_validation_result_string>
 80106d6:	e7c4      	b.n	8010662 <rcl_node_init+0x1f2>
 80106d8:	f04f 0a0a 	mov.w	sl, #10
 80106dc:	e7c1      	b.n	8010662 <rcl_node_init+0x1f2>
 80106de:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 80106e2:	f002 fefb 	bl	80134dc <rmw_node_name_validation_result_string>
 80106e6:	e7c8      	b.n	801067a <rcl_node_init+0x20a>
 80106e8:	f04f 0a0a 	mov.w	sl, #10
 80106ec:	e7c5      	b.n	801067a <rcl_node_init+0x20a>
 80106ee:	bf00      	nop
 80106f0:	0801c4b8 	.word	0x0801c4b8
 80106f4:	0801c4c0 	.word	0x0801c4c0
 80106f8:	0801c4c8 	.word	0x0801c4c8
 80106fc:	0801c4bc 	.word	0x0801c4bc

08010700 <rcl_node_is_valid>:
 8010700:	b130      	cbz	r0, 8010710 <rcl_node_is_valid+0x10>
 8010702:	6843      	ldr	r3, [r0, #4]
 8010704:	b123      	cbz	r3, 8010710 <rcl_node_is_valid+0x10>
 8010706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010708:	b113      	cbz	r3, 8010710 <rcl_node_is_valid+0x10>
 801070a:	6800      	ldr	r0, [r0, #0]
 801070c:	f7ff bbfc 	b.w	800ff08 <rcl_context_is_valid>
 8010710:	2000      	movs	r0, #0
 8010712:	4770      	bx	lr

08010714 <rcl_node_get_name>:
 8010714:	b120      	cbz	r0, 8010720 <rcl_node_get_name+0xc>
 8010716:	6840      	ldr	r0, [r0, #4]
 8010718:	b110      	cbz	r0, 8010720 <rcl_node_get_name+0xc>
 801071a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801071c:	b100      	cbz	r0, 8010720 <rcl_node_get_name+0xc>
 801071e:	6880      	ldr	r0, [r0, #8]
 8010720:	4770      	bx	lr
 8010722:	bf00      	nop

08010724 <rcl_node_get_namespace>:
 8010724:	b120      	cbz	r0, 8010730 <rcl_node_get_namespace+0xc>
 8010726:	6840      	ldr	r0, [r0, #4]
 8010728:	b110      	cbz	r0, 8010730 <rcl_node_get_namespace+0xc>
 801072a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801072c:	b100      	cbz	r0, 8010730 <rcl_node_get_namespace+0xc>
 801072e:	68c0      	ldr	r0, [r0, #12]
 8010730:	4770      	bx	lr
 8010732:	bf00      	nop

08010734 <rcl_node_get_options>:
 8010734:	b128      	cbz	r0, 8010742 <rcl_node_get_options+0xe>
 8010736:	6840      	ldr	r0, [r0, #4]
 8010738:	b118      	cbz	r0, 8010742 <rcl_node_get_options+0xe>
 801073a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 801073c:	2b00      	cmp	r3, #0
 801073e:	bf08      	it	eq
 8010740:	2000      	moveq	r0, #0
 8010742:	4770      	bx	lr

08010744 <rcl_node_get_rmw_handle>:
 8010744:	b110      	cbz	r0, 801074c <rcl_node_get_rmw_handle+0x8>
 8010746:	6840      	ldr	r0, [r0, #4]
 8010748:	b100      	cbz	r0, 801074c <rcl_node_get_rmw_handle+0x8>
 801074a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801074c:	4770      	bx	lr
 801074e:	bf00      	nop

08010750 <rcl_node_get_default_options>:
 8010750:	b510      	push	{r4, lr}
 8010752:	4604      	mov	r4, r0
 8010754:	2270      	movs	r2, #112	; 0x70
 8010756:	2100      	movs	r1, #0
 8010758:	f009 ff44 	bl	801a5e4 <memset>
 801075c:	4620      	mov	r0, r4
 801075e:	f7fc fab9 	bl	800ccd4 <rcutils_get_default_allocator>
 8010762:	2301      	movs	r3, #1
 8010764:	4620      	mov	r0, r4
 8010766:	7523      	strb	r3, [r4, #20]
 8010768:	bd10      	pop	{r4, pc}
 801076a:	bf00      	nop

0801076c <rcl_node_options_copy>:
 801076c:	2800      	cmp	r0, #0
 801076e:	bf18      	it	ne
 8010770:	4288      	cmpne	r0, r1
 8010772:	d01b      	beq.n	80107ac <rcl_node_options_copy+0x40>
 8010774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010776:	fab1 f681 	clz	r6, r1
 801077a:	460c      	mov	r4, r1
 801077c:	0976      	lsrs	r6, r6, #5
 801077e:	b199      	cbz	r1, 80107a8 <rcl_node_options_copy+0x3c>
 8010780:	4605      	mov	r5, r0
 8010782:	8a87      	ldrh	r7, [r0, #20]
 8010784:	4684      	mov	ip, r0
 8010786:	468e      	mov	lr, r1
 8010788:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801078a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801078e:	682b      	ldr	r3, [r5, #0]
 8010790:	2250      	movs	r2, #80	; 0x50
 8010792:	f10c 0118 	add.w	r1, ip, #24
 8010796:	f104 0018 	add.w	r0, r4, #24
 801079a:	f8ce 3000 	str.w	r3, [lr]
 801079e:	82a7      	strh	r7, [r4, #20]
 80107a0:	f00a f851 	bl	801a846 <memcpy>
 80107a4:	4630      	mov	r0, r6
 80107a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107a8:	200b      	movs	r0, #11
 80107aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107ac:	200b      	movs	r0, #11
 80107ae:	4770      	bx	lr

080107b0 <rcl_node_resolve_name>:
 80107b0:	b082      	sub	sp, #8
 80107b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107b6:	b091      	sub	sp, #68	; 0x44
 80107b8:	ac1a      	add	r4, sp, #104	; 0x68
 80107ba:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 80107be:	e884 000c 	stmia.w	r4, {r2, r3}
 80107c2:	2800      	cmp	r0, #0
 80107c4:	d03d      	beq.n	8010842 <rcl_node_resolve_name+0x92>
 80107c6:	460c      	mov	r4, r1
 80107c8:	4605      	mov	r5, r0
 80107ca:	f7ff ffb3 	bl	8010734 <rcl_node_get_options>
 80107ce:	2800      	cmp	r0, #0
 80107d0:	d03a      	beq.n	8010848 <rcl_node_resolve_name+0x98>
 80107d2:	4628      	mov	r0, r5
 80107d4:	f7ff ff9e 	bl	8010714 <rcl_node_get_name>
 80107d8:	4606      	mov	r6, r0
 80107da:	4628      	mov	r0, r5
 80107dc:	ad0b      	add	r5, sp, #44	; 0x2c
 80107de:	f7ff ffa1 	bl	8010724 <rcl_node_get_namespace>
 80107e2:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 80107e6:	4607      	mov	r7, r0
 80107e8:	46ac      	mov	ip, r5
 80107ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80107ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80107f2:	f8de 3000 	ldr.w	r3, [lr]
 80107f6:	f8cc 3000 	str.w	r3, [ip]
 80107fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80107fc:	b30b      	cbz	r3, 8010842 <rcl_node_resolve_name+0x92>
 80107fe:	4689      	mov	r9, r1
 8010800:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8010804:	f002 fbee 	bl	8012fe4 <rcutils_get_zero_initialized_string_map>
 8010808:	ab10      	add	r3, sp, #64	; 0x40
 801080a:	9008      	str	r0, [sp, #32]
 801080c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8010810:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010814:	2100      	movs	r1, #0
 8010816:	a808      	add	r0, sp, #32
 8010818:	e895 000c 	ldmia.w	r5, {r2, r3}
 801081c:	f002 fc34 	bl	8013088 <rcutils_string_map_init>
 8010820:	4683      	mov	fp, r0
 8010822:	b1a0      	cbz	r0, 801084e <rcl_node_resolve_name+0x9e>
 8010824:	f7fc fa72 	bl	800cd0c <rcutils_get_error_string>
 8010828:	f7fc fa86 	bl	800cd38 <rcutils_reset_error>
 801082c:	f1bb 0f0a 	cmp.w	fp, #10
 8010830:	bf18      	it	ne
 8010832:	f04f 0b01 	movne.w	fp, #1
 8010836:	4658      	mov	r0, fp
 8010838:	b011      	add	sp, #68	; 0x44
 801083a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801083e:	b002      	add	sp, #8
 8010840:	4770      	bx	lr
 8010842:	f04f 0b0b 	mov.w	fp, #11
 8010846:	e7f6      	b.n	8010836 <rcl_node_resolve_name+0x86>
 8010848:	f04f 0b01 	mov.w	fp, #1
 801084c:	e7f3      	b.n	8010836 <rcl_node_resolve_name+0x86>
 801084e:	9009      	str	r0, [sp, #36]	; 0x24
 8010850:	9007      	str	r0, [sp, #28]
 8010852:	a808      	add	r0, sp, #32
 8010854:	f007 ff7e 	bl	8018754 <rcl_get_default_topic_name_substitutions>
 8010858:	4683      	mov	fp, r0
 801085a:	b180      	cbz	r0, 801087e <rcl_node_resolve_name+0xce>
 801085c:	280a      	cmp	r0, #10
 801085e:	a808      	add	r0, sp, #32
 8010860:	bf18      	it	ne
 8010862:	f04f 0b01 	movne.w	fp, #1
 8010866:	f002 fc4d 	bl	8013104 <rcutils_string_map_fini>
 801086a:	4604      	mov	r4, r0
 801086c:	2800      	cmp	r0, #0
 801086e:	d15b      	bne.n	8010928 <rcl_node_resolve_name+0x178>
 8010870:	4651      	mov	r1, sl
 8010872:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010874:	47c8      	blx	r9
 8010876:	4651      	mov	r1, sl
 8010878:	4620      	mov	r0, r4
 801087a:	47c8      	blx	r9
 801087c:	e7db      	b.n	8010836 <rcl_node_resolve_name+0x86>
 801087e:	ab09      	add	r3, sp, #36	; 0x24
 8010880:	46ec      	mov	ip, sp
 8010882:	9305      	str	r3, [sp, #20]
 8010884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010886:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801088a:	682b      	ldr	r3, [r5, #0]
 801088c:	463a      	mov	r2, r7
 801088e:	4631      	mov	r1, r6
 8010890:	4620      	mov	r0, r4
 8010892:	f8cc 3000 	str.w	r3, [ip]
 8010896:	ab08      	add	r3, sp, #32
 8010898:	f007 fdfc 	bl	8018494 <rcl_expand_topic_name>
 801089c:	4683      	mov	fp, r0
 801089e:	b9d8      	cbnz	r0, 80108d8 <rcl_node_resolve_name+0x128>
 80108a0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80108a2:	4602      	mov	r2, r0
 80108a4:	9009      	str	r0, [sp, #36]	; 0x24
 80108a6:	a90a      	add	r1, sp, #40	; 0x28
 80108a8:	4620      	mov	r0, r4
 80108aa:	f002 fcd5 	bl	8013258 <rmw_validate_full_topic_name>
 80108ae:	bb50      	cbnz	r0, 8010906 <rcl_node_resolve_name+0x156>
 80108b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80108b2:	2d00      	cmp	r5, #0
 80108b4:	d140      	bne.n	8010938 <rcl_node_resolve_name+0x188>
 80108b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80108b8:	a808      	add	r0, sp, #32
 80108ba:	601c      	str	r4, [r3, #0]
 80108bc:	f002 fc22 	bl	8013104 <rcutils_string_map_fini>
 80108c0:	4683      	mov	fp, r0
 80108c2:	2800      	cmp	r0, #0
 80108c4:	d043      	beq.n	801094e <rcl_node_resolve_name+0x19e>
 80108c6:	f7fc fa21 	bl	800cd0c <rcutils_get_error_string>
 80108ca:	46a8      	mov	r8, r5
 80108cc:	f04f 0b01 	mov.w	fp, #1
 80108d0:	462c      	mov	r4, r5
 80108d2:	f7fc fa31 	bl	800cd38 <rcutils_reset_error>
 80108d6:	e00a      	b.n	80108ee <rcl_node_resolve_name+0x13e>
 80108d8:	2867      	cmp	r0, #103	; 0x67
 80108da:	bf14      	ite	ne
 80108dc:	f04f 0800 	movne.w	r8, #0
 80108e0:	f008 0801 	andeq.w	r8, r8, #1
 80108e4:	9c07      	ldr	r4, [sp, #28]
 80108e6:	a808      	add	r0, sp, #32
 80108e8:	f002 fc0c 	bl	8013104 <rcutils_string_map_fini>
 80108ec:	bb50      	cbnz	r0, 8010944 <rcl_node_resolve_name+0x194>
 80108ee:	4651      	mov	r1, sl
 80108f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80108f2:	47c8      	blx	r9
 80108f4:	4651      	mov	r1, sl
 80108f6:	4620      	mov	r0, r4
 80108f8:	47c8      	blx	r9
 80108fa:	f1b8 0f00 	cmp.w	r8, #0
 80108fe:	bf18      	it	ne
 8010900:	f04f 0b68 	movne.w	fp, #104	; 0x68
 8010904:	e797      	b.n	8010836 <rcl_node_resolve_name+0x86>
 8010906:	f7fc fa01 	bl	800cd0c <rcutils_get_error_string>
 801090a:	f7fc fa15 	bl	800cd38 <rcutils_reset_error>
 801090e:	a808      	add	r0, sp, #32
 8010910:	f002 fbf8 	bl	8013104 <rcutils_string_map_fini>
 8010914:	b998      	cbnz	r0, 801093e <rcl_node_resolve_name+0x18e>
 8010916:	4651      	mov	r1, sl
 8010918:	9809      	ldr	r0, [sp, #36]	; 0x24
 801091a:	47c8      	blx	r9
 801091c:	4651      	mov	r1, sl
 801091e:	4620      	mov	r0, r4
 8010920:	f04f 0b01 	mov.w	fp, #1
 8010924:	47c8      	blx	r9
 8010926:	e786      	b.n	8010836 <rcl_node_resolve_name+0x86>
 8010928:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801092c:	f7fc f9ee 	bl	800cd0c <rcutils_get_error_string>
 8010930:	f7fc fa02 	bl	800cd38 <rcutils_reset_error>
 8010934:	4644      	mov	r4, r8
 8010936:	e7da      	b.n	80108ee <rcl_node_resolve_name+0x13e>
 8010938:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801093c:	e7d3      	b.n	80108e6 <rcl_node_resolve_name+0x136>
 801093e:	46d8      	mov	r8, fp
 8010940:	f04f 0b01 	mov.w	fp, #1
 8010944:	f7fc f9e2 	bl	800cd0c <rcutils_get_error_string>
 8010948:	f7fc f9f6 	bl	800cd38 <rcutils_reset_error>
 801094c:	e7cf      	b.n	80108ee <rcl_node_resolve_name+0x13e>
 801094e:	4651      	mov	r1, sl
 8010950:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010952:	47c8      	blx	r9
 8010954:	4651      	mov	r1, sl
 8010956:	4658      	mov	r0, fp
 8010958:	47c8      	blx	r9
 801095a:	e76c      	b.n	8010836 <rcl_node_resolve_name+0x86>

0801095c <exact_match_lookup>:
 801095c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801095e:	f102 0708 	add.w	r7, r2, #8
 8010962:	460b      	mov	r3, r1
 8010964:	b085      	sub	sp, #20
 8010966:	4614      	mov	r4, r2
 8010968:	4606      	mov	r6, r0
 801096a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801096e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010972:	4618      	mov	r0, r3
 8010974:	4919      	ldr	r1, [pc, #100]	; (80109dc <exact_match_lookup+0x80>)
 8010976:	e894 000c 	ldmia.w	r4, {r2, r3}
 801097a:	f002 f9a3 	bl	8012cc4 <rcutils_join_path>
 801097e:	7833      	ldrb	r3, [r6, #0]
 8010980:	4605      	mov	r5, r0
 8010982:	2b2f      	cmp	r3, #47	; 0x2f
 8010984:	d023      	beq.n	80109ce <exact_match_lookup+0x72>
 8010986:	f104 030c 	add.w	r3, r4, #12
 801098a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801098e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010992:	1c70      	adds	r0, r6, #1
 8010994:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010998:	f002 f99a 	bl	8012cd0 <rcutils_to_native_path>
 801099c:	4606      	mov	r6, r0
 801099e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80109a2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80109a6:	4631      	mov	r1, r6
 80109a8:	4628      	mov	r0, r5
 80109aa:	e894 000c 	ldmia.w	r4, {r2, r3}
 80109ae:	f002 f989 	bl	8012cc4 <rcutils_join_path>
 80109b2:	4603      	mov	r3, r0
 80109b4:	4630      	mov	r0, r6
 80109b6:	6862      	ldr	r2, [r4, #4]
 80109b8:	461e      	mov	r6, r3
 80109ba:	6921      	ldr	r1, [r4, #16]
 80109bc:	4790      	blx	r2
 80109be:	4628      	mov	r0, r5
 80109c0:	4635      	mov	r5, r6
 80109c2:	6863      	ldr	r3, [r4, #4]
 80109c4:	6921      	ldr	r1, [r4, #16]
 80109c6:	4798      	blx	r3
 80109c8:	4628      	mov	r0, r5
 80109ca:	b005      	add	sp, #20
 80109cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109ce:	7873      	ldrb	r3, [r6, #1]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d1d8      	bne.n	8010986 <exact_match_lookup+0x2a>
 80109d4:	4628      	mov	r0, r5
 80109d6:	b005      	add	sp, #20
 80109d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109da:	bf00      	nop
 80109dc:	0801c514 	.word	0x0801c514

080109e0 <rcl_get_secure_root>:
 80109e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80109e4:	b085      	sub	sp, #20
 80109e6:	b168      	cbz	r0, 8010a04 <rcl_get_secure_root+0x24>
 80109e8:	4607      	mov	r7, r0
 80109ea:	4608      	mov	r0, r1
 80109ec:	460c      	mov	r4, r1
 80109ee:	f7fc f97f 	bl	800ccf0 <rcutils_allocator_is_valid>
 80109f2:	b138      	cbz	r0, 8010a04 <rcl_get_secure_root+0x24>
 80109f4:	2300      	movs	r3, #0
 80109f6:	482d      	ldr	r0, [pc, #180]	; (8010aac <rcl_get_secure_root+0xcc>)
 80109f8:	a903      	add	r1, sp, #12
 80109fa:	9303      	str	r3, [sp, #12]
 80109fc:	f002 f948 	bl	8012c90 <rcutils_get_env>
 8010a00:	4605      	mov	r5, r0
 8010a02:	b120      	cbz	r0, 8010a0e <rcl_get_secure_root+0x2e>
 8010a04:	2500      	movs	r5, #0
 8010a06:	4628      	mov	r0, r5
 8010a08:	b005      	add	sp, #20
 8010a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a0e:	9b03      	ldr	r3, [sp, #12]
 8010a10:	781a      	ldrb	r2, [r3, #0]
 8010a12:	2a00      	cmp	r2, #0
 8010a14:	d0f6      	beq.n	8010a04 <rcl_get_secure_root+0x24>
 8010a16:	f104 090c 	add.w	r9, r4, #12
 8010a1a:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010a1e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010a22:	4618      	mov	r0, r3
 8010a24:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010a28:	f002 fa94 	bl	8012f54 <rcutils_strdup>
 8010a2c:	4680      	mov	r8, r0
 8010a2e:	2800      	cmp	r0, #0
 8010a30:	d0e8      	beq.n	8010a04 <rcl_get_secure_root+0x24>
 8010a32:	a903      	add	r1, sp, #12
 8010a34:	481e      	ldr	r0, [pc, #120]	; (8010ab0 <rcl_get_secure_root+0xd0>)
 8010a36:	9503      	str	r5, [sp, #12]
 8010a38:	f002 f92a 	bl	8012c90 <rcutils_get_env>
 8010a3c:	b160      	cbz	r0, 8010a58 <rcl_get_secure_root+0x78>
 8010a3e:	2600      	movs	r6, #0
 8010a40:	4630      	mov	r0, r6
 8010a42:	6863      	ldr	r3, [r4, #4]
 8010a44:	6921      	ldr	r1, [r4, #16]
 8010a46:	4798      	blx	r3
 8010a48:	4640      	mov	r0, r8
 8010a4a:	6863      	ldr	r3, [r4, #4]
 8010a4c:	6921      	ldr	r1, [r4, #16]
 8010a4e:	4798      	blx	r3
 8010a50:	4628      	mov	r0, r5
 8010a52:	b005      	add	sp, #20
 8010a54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a58:	9b03      	ldr	r3, [sp, #12]
 8010a5a:	781e      	ldrb	r6, [r3, #0]
 8010a5c:	b1f6      	cbz	r6, 8010a9c <rcl_get_secure_root+0xbc>
 8010a5e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010a62:	e88d 0003 	stmia.w	sp, {r0, r1}
 8010a66:	4618      	mov	r0, r3
 8010a68:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8010a6c:	f002 fa72 	bl	8012f54 <rcutils_strdup>
 8010a70:	4606      	mov	r6, r0
 8010a72:	2800      	cmp	r0, #0
 8010a74:	d0e3      	beq.n	8010a3e <rcl_get_secure_root+0x5e>
 8010a76:	4622      	mov	r2, r4
 8010a78:	4641      	mov	r1, r8
 8010a7a:	f7ff ff6f 	bl	801095c <exact_match_lookup>
 8010a7e:	4605      	mov	r5, r0
 8010a80:	2d00      	cmp	r5, #0
 8010a82:	d0dd      	beq.n	8010a40 <rcl_get_secure_root+0x60>
 8010a84:	4628      	mov	r0, r5
 8010a86:	f002 f91b 	bl	8012cc0 <rcutils_is_directory>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	2800      	cmp	r0, #0
 8010a8e:	d1d7      	bne.n	8010a40 <rcl_get_secure_root+0x60>
 8010a90:	4628      	mov	r0, r5
 8010a92:	6921      	ldr	r1, [r4, #16]
 8010a94:	461d      	mov	r5, r3
 8010a96:	6863      	ldr	r3, [r4, #4]
 8010a98:	4798      	blx	r3
 8010a9a:	e7d1      	b.n	8010a40 <rcl_get_secure_root+0x60>
 8010a9c:	4622      	mov	r2, r4
 8010a9e:	4638      	mov	r0, r7
 8010aa0:	4641      	mov	r1, r8
 8010aa2:	f7ff ff5b 	bl	801095c <exact_match_lookup>
 8010aa6:	4605      	mov	r5, r0
 8010aa8:	e7ea      	b.n	8010a80 <rcl_get_secure_root+0xa0>
 8010aaa:	bf00      	nop
 8010aac:	0801c520 	.word	0x0801c520
 8010ab0:	0801c538 	.word	0x0801c538

08010ab4 <rcl_get_security_options_from_environment>:
 8010ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ab8:	b082      	sub	sp, #8
 8010aba:	2300      	movs	r3, #0
 8010abc:	4606      	mov	r6, r0
 8010abe:	460f      	mov	r7, r1
 8010ac0:	4821      	ldr	r0, [pc, #132]	; (8010b48 <rcl_get_security_options_from_environment+0x94>)
 8010ac2:	a901      	add	r1, sp, #4
 8010ac4:	4690      	mov	r8, r2
 8010ac6:	9301      	str	r3, [sp, #4]
 8010ac8:	f002 f8e2 	bl	8012c90 <rcutils_get_env>
 8010acc:	b120      	cbz	r0, 8010ad8 <rcl_get_security_options_from_environment+0x24>
 8010ace:	2501      	movs	r5, #1
 8010ad0:	4628      	mov	r0, r5
 8010ad2:	b002      	add	sp, #8
 8010ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ad8:	4604      	mov	r4, r0
 8010ada:	491c      	ldr	r1, [pc, #112]	; (8010b4c <rcl_get_security_options_from_environment+0x98>)
 8010adc:	9801      	ldr	r0, [sp, #4]
 8010ade:	f7ef fbaf 	bl	8000240 <strcmp>
 8010ae2:	4605      	mov	r5, r0
 8010ae4:	b9f0      	cbnz	r0, 8010b24 <rcl_get_security_options_from_environment+0x70>
 8010ae6:	9001      	str	r0, [sp, #4]
 8010ae8:	f1b8 0f00 	cmp.w	r8, #0
 8010aec:	d021      	beq.n	8010b32 <rcl_get_security_options_from_environment+0x7e>
 8010aee:	a901      	add	r1, sp, #4
 8010af0:	4817      	ldr	r0, [pc, #92]	; (8010b50 <rcl_get_security_options_from_environment+0x9c>)
 8010af2:	f002 f8cd 	bl	8012c90 <rcutils_get_env>
 8010af6:	2800      	cmp	r0, #0
 8010af8:	d1e9      	bne.n	8010ace <rcl_get_security_options_from_environment+0x1a>
 8010afa:	4916      	ldr	r1, [pc, #88]	; (8010b54 <rcl_get_security_options_from_environment+0xa0>)
 8010afc:	9801      	ldr	r0, [sp, #4]
 8010afe:	f7ef fb9f 	bl	8000240 <strcmp>
 8010b02:	4603      	mov	r3, r0
 8010b04:	4639      	mov	r1, r7
 8010b06:	4630      	mov	r0, r6
 8010b08:	fab3 f383 	clz	r3, r3
 8010b0c:	095b      	lsrs	r3, r3, #5
 8010b0e:	f888 3000 	strb.w	r3, [r8]
 8010b12:	f7ff ff65 	bl	80109e0 <rcl_get_secure_root>
 8010b16:	b170      	cbz	r0, 8010b36 <rcl_get_security_options_from_environment+0x82>
 8010b18:	f8c8 0004 	str.w	r0, [r8, #4]
 8010b1c:	4628      	mov	r0, r5
 8010b1e:	b002      	add	sp, #8
 8010b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b24:	4625      	mov	r5, r4
 8010b26:	f888 4000 	strb.w	r4, [r8]
 8010b2a:	4628      	mov	r0, r5
 8010b2c:	b002      	add	sp, #8
 8010b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b32:	250b      	movs	r5, #11
 8010b34:	e7cc      	b.n	8010ad0 <rcl_get_security_options_from_environment+0x1c>
 8010b36:	f898 5000 	ldrb.w	r5, [r8]
 8010b3a:	f1a5 0501 	sub.w	r5, r5, #1
 8010b3e:	fab5 f585 	clz	r5, r5
 8010b42:	096d      	lsrs	r5, r5, #5
 8010b44:	e7c4      	b.n	8010ad0 <rcl_get_security_options_from_environment+0x1c>
 8010b46:	bf00      	nop
 8010b48:	0801c4d8 	.word	0x0801c4d8
 8010b4c:	0801c4ec 	.word	0x0801c4ec
 8010b50:	0801c4f4 	.word	0x0801c4f4
 8010b54:	0801c50c 	.word	0x0801c50c

08010b58 <rcl_get_zero_initialized_service>:
 8010b58:	4b01      	ldr	r3, [pc, #4]	; (8010b60 <rcl_get_zero_initialized_service+0x8>)
 8010b5a:	6818      	ldr	r0, [r3, #0]
 8010b5c:	4770      	bx	lr
 8010b5e:	bf00      	nop
 8010b60:	0801c558 	.word	0x0801c558

08010b64 <rcl_service_init>:
 8010b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b68:	b086      	sub	sp, #24
 8010b6a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8010b6c:	2d00      	cmp	r5, #0
 8010b6e:	d04d      	beq.n	8010c0c <rcl_service_init+0xa8>
 8010b70:	f105 0950 	add.w	r9, r5, #80	; 0x50
 8010b74:	4604      	mov	r4, r0
 8010b76:	460e      	mov	r6, r1
 8010b78:	4690      	mov	r8, r2
 8010b7a:	4648      	mov	r0, r9
 8010b7c:	461f      	mov	r7, r3
 8010b7e:	f7fc f8b7 	bl	800ccf0 <rcutils_allocator_is_valid>
 8010b82:	2c00      	cmp	r4, #0
 8010b84:	d042      	beq.n	8010c0c <rcl_service_init+0xa8>
 8010b86:	f080 0001 	eor.w	r0, r0, #1
 8010b8a:	b2c0      	uxtb	r0, r0
 8010b8c:	2800      	cmp	r0, #0
 8010b8e:	d13d      	bne.n	8010c0c <rcl_service_init+0xa8>
 8010b90:	4630      	mov	r0, r6
 8010b92:	f7ff fdb5 	bl	8010700 <rcl_node_is_valid>
 8010b96:	2800      	cmp	r0, #0
 8010b98:	d042      	beq.n	8010c20 <rcl_service_init+0xbc>
 8010b9a:	2f00      	cmp	r7, #0
 8010b9c:	d036      	beq.n	8010c0c <rcl_service_init+0xa8>
 8010b9e:	f1b8 0f00 	cmp.w	r8, #0
 8010ba2:	d033      	beq.n	8010c0c <rcl_service_init+0xa8>
 8010ba4:	f8d4 a000 	ldr.w	sl, [r4]
 8010ba8:	f1ba 0f00 	cmp.w	sl, #0
 8010bac:	d133      	bne.n	8010c16 <rcl_service_init+0xb2>
 8010bae:	f44f 718c 	mov.w	r1, #280	; 0x118
 8010bb2:	2001      	movs	r0, #1
 8010bb4:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	; 0x5c
 8010bb8:	4798      	blx	r3
 8010bba:	6020      	str	r0, [r4, #0]
 8010bbc:	2800      	cmp	r0, #0
 8010bbe:	d075      	beq.n	8010cac <rcl_service_init+0x148>
 8010bc0:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8010bc4:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8010bc8:	2201      	movs	r2, #1
 8010bca:	f8cd a010 	str.w	sl, [sp, #16]
 8010bce:	9005      	str	r0, [sp, #20]
 8010bd0:	9203      	str	r2, [sp, #12]
 8010bd2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010bd6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010bda:	4639      	mov	r1, r7
 8010bdc:	4630      	mov	r0, r6
 8010bde:	e899 000c 	ldmia.w	r9, {r2, r3}
 8010be2:	f7ff fde5 	bl	80107b0 <rcl_node_resolve_name>
 8010be6:	4607      	mov	r7, r0
 8010be8:	b1f8      	cbz	r0, 8010c2a <rcl_service_init+0xc6>
 8010bea:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 8010bee:	6820      	ldr	r0, [r4, #0]
 8010bf0:	2b01      	cmp	r3, #1
 8010bf2:	d943      	bls.n	8010c7c <rcl_service_init+0x118>
 8010bf4:	2f0a      	cmp	r7, #10
 8010bf6:	d000      	beq.n	8010bfa <rcl_service_init+0x96>
 8010bf8:	2701      	movs	r7, #1
 8010bfa:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8010bfc:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8010bfe:	4798      	blx	r3
 8010c00:	2300      	movs	r3, #0
 8010c02:	4638      	mov	r0, r7
 8010c04:	6023      	str	r3, [r4, #0]
 8010c06:	b006      	add	sp, #24
 8010c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c0c:	270b      	movs	r7, #11
 8010c0e:	4638      	mov	r0, r7
 8010c10:	b006      	add	sp, #24
 8010c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c16:	2764      	movs	r7, #100	; 0x64
 8010c18:	4638      	mov	r0, r7
 8010c1a:	b006      	add	sp, #24
 8010c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c20:	27c8      	movs	r7, #200	; 0xc8
 8010c22:	4638      	mov	r0, r7
 8010c24:	b006      	add	sp, #24
 8010c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c2a:	4630      	mov	r0, r6
 8010c2c:	f7ff fd8a 	bl	8010744 <rcl_node_get_rmw_handle>
 8010c30:	6827      	ldr	r7, [r4, #0]
 8010c32:	4641      	mov	r1, r8
 8010c34:	462b      	mov	r3, r5
 8010c36:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8010c3a:	f003 f9b5 	bl	8013fa8 <rmw_create_service>
 8010c3e:	6821      	ldr	r1, [r4, #0]
 8010c40:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8010c44:	f8d1 0108 	ldr.w	r0, [r1, #264]	; 0x108
 8010c48:	b390      	cbz	r0, 8010cb0 <rcl_service_init+0x14c>
 8010c4a:	3168      	adds	r1, #104	; 0x68
 8010c4c:	f003 fade 	bl	801420c <rmw_service_request_subscription_get_actual_qos>
 8010c50:	b9b0      	cbnz	r0, 8010c80 <rcl_service_init+0x11c>
 8010c52:	6823      	ldr	r3, [r4, #0]
 8010c54:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8010c58:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8010c5c:	f003 fac2 	bl	80141e4 <rmw_service_response_publisher_get_actual_qos>
 8010c60:	4607      	mov	r7, r0
 8010c62:	b968      	cbnz	r0, 8010c80 <rcl_service_init+0x11c>
 8010c64:	6820      	ldr	r0, [r4, #0]
 8010c66:	2268      	movs	r2, #104	; 0x68
 8010c68:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 8010c6c:	4629      	mov	r1, r5
 8010c6e:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 8010c72:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
 8010c76:	f009 fde6 	bl	801a846 <memcpy>
 8010c7a:	e7c8      	b.n	8010c0e <rcl_service_init+0xaa>
 8010c7c:	2768      	movs	r7, #104	; 0x68
 8010c7e:	e7bc      	b.n	8010bfa <rcl_service_init+0x96>
 8010c80:	f7ff f924 	bl	800fecc <rcl_convert_rmw_ret_to_rcl_ret>
 8010c84:	4607      	mov	r7, r0
 8010c86:	4630      	mov	r0, r6
 8010c88:	f7ff fd5c 	bl	8010744 <rcl_node_get_rmw_handle>
 8010c8c:	6823      	ldr	r3, [r4, #0]
 8010c8e:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8010c92:	f003 fa63 	bl	801415c <rmw_destroy_service>
 8010c96:	6821      	ldr	r1, [r4, #0]
 8010c98:	f8d1 0110 	ldr.w	r0, [r1, #272]	; 0x110
 8010c9c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8010c9e:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8010ca0:	4798      	blx	r3
 8010ca2:	6820      	ldr	r0, [r4, #0]
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 8010caa:	e7a6      	b.n	8010bfa <rcl_service_init+0x96>
 8010cac:	270a      	movs	r7, #10
 8010cae:	e7ae      	b.n	8010c0e <rcl_service_init+0xaa>
 8010cb0:	2701      	movs	r7, #1
 8010cb2:	e7f1      	b.n	8010c98 <rcl_service_init+0x134>

08010cb4 <rcl_service_get_default_options>:
 8010cb4:	b530      	push	{r4, r5, lr}
 8010cb6:	4d0f      	ldr	r5, [pc, #60]	; (8010cf4 <rcl_service_get_default_options+0x40>)
 8010cb8:	b087      	sub	sp, #28
 8010cba:	4604      	mov	r4, r0
 8010cbc:	2250      	movs	r2, #80	; 0x50
 8010cbe:	490e      	ldr	r1, [pc, #56]	; (8010cf8 <rcl_service_get_default_options+0x44>)
 8010cc0:	4628      	mov	r0, r5
 8010cc2:	f009 fdc0 	bl	801a846 <memcpy>
 8010cc6:	4668      	mov	r0, sp
 8010cc8:	f7fc f804 	bl	800ccd4 <rcutils_get_default_allocator>
 8010ccc:	46ec      	mov	ip, sp
 8010cce:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8010cd2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010cd6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010cda:	f8dc 3000 	ldr.w	r3, [ip]
 8010cde:	2268      	movs	r2, #104	; 0x68
 8010ce0:	4629      	mov	r1, r5
 8010ce2:	4620      	mov	r0, r4
 8010ce4:	f8ce 3000 	str.w	r3, [lr]
 8010ce8:	f009 fdad 	bl	801a846 <memcpy>
 8010cec:	4620      	mov	r0, r4
 8010cee:	b007      	add	sp, #28
 8010cf0:	bd30      	pop	{r4, r5, pc}
 8010cf2:	bf00      	nop
 8010cf4:	2000b908 	.word	0x2000b908
 8010cf8:	0801c560 	.word	0x0801c560

08010cfc <rcl_service_get_rmw_handle>:
 8010cfc:	b118      	cbz	r0, 8010d06 <rcl_service_get_rmw_handle+0xa>
 8010cfe:	6800      	ldr	r0, [r0, #0]
 8010d00:	b108      	cbz	r0, 8010d06 <rcl_service_get_rmw_handle+0xa>
 8010d02:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8010d06:	4770      	bx	lr

08010d08 <rcl_take_request>:
 8010d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d0a:	468e      	mov	lr, r1
 8010d0c:	b091      	sub	sp, #68	; 0x44
 8010d0e:	460c      	mov	r4, r1
 8010d10:	4617      	mov	r7, r2
 8010d12:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8010d16:	4605      	mov	r5, r0
 8010d18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010d1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010d20:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8010d24:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010d28:	b30d      	cbz	r5, 8010d6e <rcl_take_request+0x66>
 8010d2a:	682b      	ldr	r3, [r5, #0]
 8010d2c:	b1fb      	cbz	r3, 8010d6e <rcl_take_request+0x66>
 8010d2e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8010d32:	b1e0      	cbz	r0, 8010d6e <rcl_take_request+0x66>
 8010d34:	b397      	cbz	r7, 8010d9c <rcl_take_request+0x94>
 8010d36:	2300      	movs	r3, #0
 8010d38:	463a      	mov	r2, r7
 8010d3a:	a906      	add	r1, sp, #24
 8010d3c:	f88d 3017 	strb.w	r3, [sp, #23]
 8010d40:	f10d 0317 	add.w	r3, sp, #23
 8010d44:	f003 f82e 	bl	8013da4 <rmw_take_request>
 8010d48:	4606      	mov	r6, r0
 8010d4a:	b198      	cbz	r0, 8010d74 <rcl_take_request+0x6c>
 8010d4c:	280a      	cmp	r0, #10
 8010d4e:	bf18      	it	ne
 8010d50:	2601      	movne	r6, #1
 8010d52:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8010d56:	46a6      	mov	lr, r4
 8010d58:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010d5c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010d60:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8010d64:	e88e 0003 	stmia.w	lr, {r0, r1}
 8010d68:	4630      	mov	r0, r6
 8010d6a:	b011      	add	sp, #68	; 0x44
 8010d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d6e:	f44f 7616 	mov.w	r6, #600	; 0x258
 8010d72:	e7ee      	b.n	8010d52 <rcl_take_request+0x4a>
 8010d74:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8010d78:	b193      	cbz	r3, 8010da0 <rcl_take_request+0x98>
 8010d7a:	682b      	ldr	r3, [r5, #0]
 8010d7c:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 8010d80:	2800      	cmp	r0, #0
 8010d82:	d0e6      	beq.n	8010d52 <rcl_take_request+0x4a>
 8010d84:	463a      	mov	r2, r7
 8010d86:	ab0a      	add	r3, sp, #40	; 0x28
 8010d88:	2101      	movs	r1, #1
 8010d8a:	9302      	str	r3, [sp, #8]
 8010d8c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8010d90:	e9cd 6700 	strd	r6, r7, [sp]
 8010d94:	f000 f844 	bl	8010e20 <rcl_send_service_event_message>
 8010d98:	4606      	mov	r6, r0
 8010d9a:	e7da      	b.n	8010d52 <rcl_take_request+0x4a>
 8010d9c:	260b      	movs	r6, #11
 8010d9e:	e7d8      	b.n	8010d52 <rcl_take_request+0x4a>
 8010da0:	f240 2659 	movw	r6, #601	; 0x259
 8010da4:	e7d5      	b.n	8010d52 <rcl_take_request+0x4a>
 8010da6:	bf00      	nop

08010da8 <rcl_send_response>:
 8010da8:	b350      	cbz	r0, 8010e00 <rcl_send_response+0x58>
 8010daa:	6803      	ldr	r3, [r0, #0]
 8010dac:	b570      	push	{r4, r5, r6, lr}
 8010dae:	4604      	mov	r4, r0
 8010db0:	b084      	sub	sp, #16
 8010db2:	b1cb      	cbz	r3, 8010de8 <rcl_send_response+0x40>
 8010db4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8010db8:	b1b0      	cbz	r0, 8010de8 <rcl_send_response+0x40>
 8010dba:	4615      	mov	r5, r2
 8010dbc:	b1ea      	cbz	r2, 8010dfa <rcl_send_response+0x52>
 8010dbe:	460e      	mov	r6, r1
 8010dc0:	b1d9      	cbz	r1, 8010dfa <rcl_send_response+0x52>
 8010dc2:	f003 f84d 	bl	8013e60 <rmw_send_response>
 8010dc6:	b998      	cbnz	r0, 8010df0 <rcl_send_response+0x48>
 8010dc8:	6823      	ldr	r3, [r4, #0]
 8010dca:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8010dce:	b16b      	cbz	r3, 8010dec <rcl_send_response+0x44>
 8010dd0:	462a      	mov	r2, r5
 8010dd2:	2102      	movs	r1, #2
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	ed96 7b04 	vldr	d7, [r6, #16]
 8010dda:	9602      	str	r6, [sp, #8]
 8010ddc:	ed8d 7b00 	vstr	d7, [sp]
 8010de0:	f000 f81e 	bl	8010e20 <rcl_send_service_event_message>
 8010de4:	b004      	add	sp, #16
 8010de6:	bd70      	pop	{r4, r5, r6, pc}
 8010de8:	f44f 7016 	mov.w	r0, #600	; 0x258
 8010dec:	b004      	add	sp, #16
 8010dee:	bd70      	pop	{r4, r5, r6, pc}
 8010df0:	2802      	cmp	r0, #2
 8010df2:	bf18      	it	ne
 8010df4:	2001      	movne	r0, #1
 8010df6:	b004      	add	sp, #16
 8010df8:	bd70      	pop	{r4, r5, r6, pc}
 8010dfa:	200b      	movs	r0, #11
 8010dfc:	b004      	add	sp, #16
 8010dfe:	bd70      	pop	{r4, r5, r6, pc}
 8010e00:	f44f 7016 	mov.w	r0, #600	; 0x258
 8010e04:	4770      	bx	lr
 8010e06:	bf00      	nop

08010e08 <rcl_service_is_valid>:
 8010e08:	b130      	cbz	r0, 8010e18 <rcl_service_is_valid+0x10>
 8010e0a:	6800      	ldr	r0, [r0, #0]
 8010e0c:	b120      	cbz	r0, 8010e18 <rcl_service_is_valid+0x10>
 8010e0e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8010e12:	3800      	subs	r0, #0
 8010e14:	bf18      	it	ne
 8010e16:	2001      	movne	r0, #1
 8010e18:	4770      	bx	lr
 8010e1a:	bf00      	nop
 8010e1c:	0000      	movs	r0, r0
	...

08010e20 <rcl_send_service_event_message>:
 8010e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010e24:	b093      	sub	sp, #76	; 0x4c
 8010e26:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8010e28:	b196      	cbz	r6, 8010e50 <rcl_send_service_event_message+0x30>
 8010e2a:	4615      	mov	r5, r2
 8010e2c:	b182      	cbz	r2, 8010e50 <rcl_send_service_event_message+0x30>
 8010e2e:	4604      	mov	r4, r0
 8010e30:	b148      	cbz	r0, 8010e46 <rcl_send_service_event_message+0x26>
 8010e32:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8010e36:	b133      	cbz	r3, 8010e46 <rcl_send_service_event_message+0x26>
 8010e38:	68c0      	ldr	r0, [r0, #12]
 8010e3a:	460f      	mov	r7, r1
 8010e3c:	f000 f90c 	bl	8011058 <rcl_clock_valid>
 8010e40:	b108      	cbz	r0, 8010e46 <rcl_send_service_event_message+0x26>
 8010e42:	7a23      	ldrb	r3, [r4, #8]
 8010e44:	b94b      	cbnz	r3, 8010e5a <rcl_send_service_event_message+0x3a>
 8010e46:	2401      	movs	r4, #1
 8010e48:	4620      	mov	r0, r4
 8010e4a:	b013      	add	sp, #76	; 0x4c
 8010e4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e50:	240b      	movs	r4, #11
 8010e52:	4620      	mov	r0, r4
 8010e54:	b013      	add	sp, #76	; 0x4c
 8010e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e5a:	f104 0e60 	add.w	lr, r4, #96	; 0x60
 8010e5e:	f10d 0c0c 	add.w	ip, sp, #12
 8010e62:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010e66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010e6a:	f8de 3000 	ldr.w	r3, [lr]
 8010e6e:	a803      	add	r0, sp, #12
 8010e70:	f8cc 3000 	str.w	r3, [ip]
 8010e74:	f7fb ff3c 	bl	800ccf0 <rcutils_allocator_is_valid>
 8010e78:	2800      	cmp	r0, #0
 8010e7a:	d0e9      	beq.n	8010e50 <rcl_send_service_event_message+0x30>
 8010e7c:	6820      	ldr	r0, [r4, #0]
 8010e7e:	f007 fd41 	bl	8018904 <rcl_publisher_is_valid>
 8010e82:	2800      	cmp	r0, #0
 8010e84:	d05e      	beq.n	8010f44 <rcl_send_service_event_message+0x124>
 8010e86:	4669      	mov	r1, sp
 8010e88:	68e0      	ldr	r0, [r4, #12]
 8010e8a:	f000 f977 	bl	801117c <rcl_clock_get_now>
 8010e8e:	4601      	mov	r1, r0
 8010e90:	2800      	cmp	r0, #0
 8010e92:	d146      	bne.n	8010f22 <rcl_send_service_event_message+0x102>
 8010e94:	2220      	movs	r2, #32
 8010e96:	eb0d 0002 	add.w	r0, sp, r2
 8010e9a:	f009 fba3 	bl	801a5e4 <memset>
 8010e9e:	f88d 7020 	strb.w	r7, [sp, #32]
 8010ea2:	e9dd 8900 	ldrd	r8, r9, [sp]
 8010ea6:	a32a      	add	r3, pc, #168	; (adr r3, 8010f50 <rcl_send_service_event_message+0x130>)
 8010ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eac:	4640      	mov	r0, r8
 8010eae:	4649      	mov	r1, r9
 8010eb0:	f7ef fa2e 	bl	8000310 <__aeabi_ldivmod>
 8010eb4:	4649      	mov	r1, r9
 8010eb6:	9009      	str	r0, [sp, #36]	; 0x24
 8010eb8:	4640      	mov	r0, r8
 8010eba:	a325      	add	r3, pc, #148	; (adr r3, 8010f50 <rcl_send_service_event_message+0x130>)
 8010ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec0:	f7ef fa26 	bl	8000310 <__aeabi_ldivmod>
 8010ec4:	920a      	str	r2, [sp, #40]	; 0x28
 8010ec6:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 8010eca:	6830      	ldr	r0, [r6, #0]
 8010ecc:	6871      	ldr	r1, [r6, #4]
 8010ece:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8010ed2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8010ed6:	7a23      	ldrb	r3, [r4, #8]
 8010ed8:	68b2      	ldr	r2, [r6, #8]
 8010eda:	2b01      	cmp	r3, #1
 8010edc:	68f3      	ldr	r3, [r6, #12]
 8010ede:	bf08      	it	eq
 8010ee0:	2500      	moveq	r5, #0
 8010ee2:	2f01      	cmp	r7, #1
 8010ee4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010ee8:	d81f      	bhi.n	8010f2a <rcl_send_service_event_message+0x10a>
 8010eea:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8010eee:	462a      	mov	r2, r5
 8010ef0:	a808      	add	r0, sp, #32
 8010ef2:	a903      	add	r1, sp, #12
 8010ef4:	699d      	ldr	r5, [r3, #24]
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	47a8      	blx	r5
 8010efa:	4605      	mov	r5, r0
 8010efc:	2d00      	cmp	r5, #0
 8010efe:	d0a2      	beq.n	8010e46 <rcl_send_service_event_message+0x26>
 8010f00:	4629      	mov	r1, r5
 8010f02:	6820      	ldr	r0, [r4, #0]
 8010f04:	2200      	movs	r2, #0
 8010f06:	f007 fcd9 	bl	80188bc <rcl_publish>
 8010f0a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8010f0e:	4604      	mov	r4, r0
 8010f10:	a903      	add	r1, sp, #12
 8010f12:	4628      	mov	r0, r5
 8010f14:	69db      	ldr	r3, [r3, #28]
 8010f16:	4798      	blx	r3
 8010f18:	2c00      	cmp	r4, #0
 8010f1a:	d095      	beq.n	8010e48 <rcl_send_service_event_message+0x28>
 8010f1c:	f7fb ff0c 	bl	800cd38 <rcutils_reset_error>
 8010f20:	e792      	b.n	8010e48 <rcl_send_service_event_message+0x28>
 8010f22:	2401      	movs	r4, #1
 8010f24:	f7fb ff08 	bl	800cd38 <rcutils_reset_error>
 8010f28:	e78e      	b.n	8010e48 <rcl_send_service_event_message+0x28>
 8010f2a:	1eb9      	subs	r1, r7, #2
 8010f2c:	2901      	cmp	r1, #1
 8010f2e:	d8f8      	bhi.n	8010f22 <rcl_send_service_event_message+0x102>
 8010f30:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8010f34:	462b      	mov	r3, r5
 8010f36:	a808      	add	r0, sp, #32
 8010f38:	a903      	add	r1, sp, #12
 8010f3a:	6995      	ldr	r5, [r2, #24]
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	47a8      	blx	r5
 8010f40:	4605      	mov	r5, r0
 8010f42:	e7db      	b.n	8010efc <rcl_send_service_event_message+0xdc>
 8010f44:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8010f48:	e77e      	b.n	8010e48 <rcl_send_service_event_message+0x28>
 8010f4a:	bf00      	nop
 8010f4c:	f3af 8000 	nop.w
 8010f50:	3b9aca00 	.word	0x3b9aca00
 8010f54:	00000000 	.word	0x00000000

08010f58 <rcl_take>:
 8010f58:	2800      	cmp	r0, #0
 8010f5a:	d049      	beq.n	8010ff0 <rcl_take+0x98>
 8010f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f60:	4615      	mov	r5, r2
 8010f62:	6802      	ldr	r2, [r0, #0]
 8010f64:	b0a0      	sub	sp, #128	; 0x80
 8010f66:	4604      	mov	r4, r0
 8010f68:	2a00      	cmp	r2, #0
 8010f6a:	d039      	beq.n	8010fe0 <rcl_take+0x88>
 8010f6c:	461f      	mov	r7, r3
 8010f6e:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8010f72:	b3ab      	cbz	r3, 8010fe0 <rcl_take+0x88>
 8010f74:	460e      	mov	r6, r1
 8010f76:	2900      	cmp	r1, #0
 8010f78:	d038      	beq.n	8010fec <rcl_take+0x94>
 8010f7a:	2d00      	cmp	r5, #0
 8010f7c:	d03c      	beq.n	8010ff8 <rcl_take+0xa0>
 8010f7e:	a802      	add	r0, sp, #8
 8010f80:	f002 f962 	bl	8013248 <rmw_get_zero_initialized_message_info>
 8010f84:	6823      	ldr	r3, [r4, #0]
 8010f86:	f10d 0c08 	add.w	ip, sp, #8
 8010f8a:	46ae      	mov	lr, r5
 8010f8c:	f8d3 80c8 	ldr.w	r8, [r3, #200]	; 0xc8
 8010f90:	2400      	movs	r4, #0
 8010f92:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010f96:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010f9a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010f9e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010fa2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010fa6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010faa:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8010fae:	462b      	mov	r3, r5
 8010fb0:	f10d 0247 	add.w	r2, sp, #71	; 0x47
 8010fb4:	f88d 4047 	strb.w	r4, [sp, #71]	; 0x47
 8010fb8:	e88e 0003 	stmia.w	lr, {r0, r1}
 8010fbc:	4631      	mov	r1, r6
 8010fbe:	4640      	mov	r0, r8
 8010fc0:	9700      	str	r7, [sp, #0]
 8010fc2:	f003 f999 	bl	80142f8 <rmw_take_with_info>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	b9c0      	cbnz	r0, 8010ffc <rcl_take+0xa4>
 8010fca:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
 8010fce:	f240 1291 	movw	r2, #401	; 0x191
 8010fd2:	2900      	cmp	r1, #0
 8010fd4:	bf08      	it	eq
 8010fd6:	4613      	moveq	r3, r2
 8010fd8:	4618      	mov	r0, r3
 8010fda:	b020      	add	sp, #128	; 0x80
 8010fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fe0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	b020      	add	sp, #128	; 0x80
 8010fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fec:	230b      	movs	r3, #11
 8010fee:	e7f3      	b.n	8010fd8 <rcl_take+0x80>
 8010ff0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	4770      	bx	lr
 8010ff8:	ad12      	add	r5, sp, #72	; 0x48
 8010ffa:	e7c0      	b.n	8010f7e <rcl_take+0x26>
 8010ffc:	f7fe ff66 	bl	800fecc <rcl_convert_rmw_ret_to_rcl_ret>
 8011000:	4603      	mov	r3, r0
 8011002:	e7e9      	b.n	8010fd8 <rcl_take+0x80>

08011004 <rcl_subscription_get_rmw_handle>:
 8011004:	b118      	cbz	r0, 801100e <rcl_subscription_get_rmw_handle+0xa>
 8011006:	6800      	ldr	r0, [r0, #0]
 8011008:	b108      	cbz	r0, 801100e <rcl_subscription_get_rmw_handle+0xa>
 801100a:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 801100e:	4770      	bx	lr

08011010 <rcl_subscription_is_valid>:
 8011010:	b130      	cbz	r0, 8011020 <rcl_subscription_is_valid+0x10>
 8011012:	6800      	ldr	r0, [r0, #0]
 8011014:	b120      	cbz	r0, 8011020 <rcl_subscription_is_valid+0x10>
 8011016:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 801101a:	3800      	subs	r0, #0
 801101c:	bf18      	it	ne
 801101e:	2001      	movne	r0, #1
 8011020:	4770      	bx	lr
 8011022:	bf00      	nop

08011024 <rcl_get_system_time>:
 8011024:	4608      	mov	r0, r1
 8011026:	f7fb bea3 	b.w	800cd70 <rcutils_system_time_now>
 801102a:	bf00      	nop

0801102c <rcl_get_steady_time>:
 801102c:	4608      	mov	r0, r1
 801102e:	f7fb bec7 	b.w	800cdc0 <rcutils_steady_time_now>
 8011032:	bf00      	nop

08011034 <rcl_get_ros_time>:
 8011034:	7a03      	ldrb	r3, [r0, #8]
 8011036:	b510      	push	{r4, lr}
 8011038:	460c      	mov	r4, r1
 801103a:	b143      	cbz	r3, 801104e <rcl_get_ros_time+0x1a>
 801103c:	2105      	movs	r1, #5
 801103e:	f001 fd83 	bl	8012b48 <__atomic_load_8>
 8011042:	4602      	mov	r2, r0
 8011044:	460b      	mov	r3, r1
 8011046:	2000      	movs	r0, #0
 8011048:	e9c4 2300 	strd	r2, r3, [r4]
 801104c:	bd10      	pop	{r4, pc}
 801104e:	4608      	mov	r0, r1
 8011050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011054:	f7fb be8c 	b.w	800cd70 <rcutils_system_time_now>

08011058 <rcl_clock_valid>:
 8011058:	b138      	cbz	r0, 801106a <rcl_clock_valid+0x12>
 801105a:	7803      	ldrb	r3, [r0, #0]
 801105c:	b123      	cbz	r3, 8011068 <rcl_clock_valid+0x10>
 801105e:	68c0      	ldr	r0, [r0, #12]
 8011060:	3800      	subs	r0, #0
 8011062:	bf18      	it	ne
 8011064:	2001      	movne	r0, #1
 8011066:	4770      	bx	lr
 8011068:	4618      	mov	r0, r3
 801106a:	4770      	bx	lr

0801106c <rcl_clock_init>:
 801106c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801106e:	4605      	mov	r5, r0
 8011070:	4610      	mov	r0, r2
 8011072:	4614      	mov	r4, r2
 8011074:	460e      	mov	r6, r1
 8011076:	f7fb fe3b 	bl	800ccf0 <rcutils_allocator_is_valid>
 801107a:	b128      	cbz	r0, 8011088 <rcl_clock_init+0x1c>
 801107c:	2d03      	cmp	r5, #3
 801107e:	d803      	bhi.n	8011088 <rcl_clock_init+0x1c>
 8011080:	e8df f005 	tbb	[pc, r5]
 8011084:	0659301f 	.word	0x0659301f
 8011088:	f04f 0c0b 	mov.w	ip, #11
 801108c:	4660      	mov	r0, ip
 801108e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011090:	2c00      	cmp	r4, #0
 8011092:	d0f9      	beq.n	8011088 <rcl_clock_init+0x1c>
 8011094:	fab6 f386 	clz	r3, r6
 8011098:	095b      	lsrs	r3, r3, #5
 801109a:	2e00      	cmp	r6, #0
 801109c:	d0f4      	beq.n	8011088 <rcl_clock_init+0x1c>
 801109e:	6133      	str	r3, [r6, #16]
 80110a0:	469c      	mov	ip, r3
 80110a2:	f106 0514 	add.w	r5, r6, #20
 80110a6:	4f32      	ldr	r7, [pc, #200]	; (8011170 <rcl_clock_init+0x104>)
 80110a8:	f04f 0e03 	mov.w	lr, #3
 80110ac:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80110b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80110b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80110b4:	6823      	ldr	r3, [r4, #0]
 80110b6:	4660      	mov	r0, ip
 80110b8:	602b      	str	r3, [r5, #0]
 80110ba:	60f7      	str	r7, [r6, #12]
 80110bc:	f886 e000 	strb.w	lr, [r6]
 80110c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110c2:	2e00      	cmp	r6, #0
 80110c4:	d0e0      	beq.n	8011088 <rcl_clock_init+0x1c>
 80110c6:	2300      	movs	r3, #0
 80110c8:	f106 0514 	add.w	r5, r6, #20
 80110cc:	7033      	strb	r3, [r6, #0]
 80110ce:	469c      	mov	ip, r3
 80110d0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80110d4:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80110d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80110da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80110dc:	6823      	ldr	r3, [r4, #0]
 80110de:	4660      	mov	r0, ip
 80110e0:	602b      	str	r3, [r5, #0]
 80110e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80110e4:	2c00      	cmp	r4, #0
 80110e6:	d0cf      	beq.n	8011088 <rcl_clock_init+0x1c>
 80110e8:	fab6 f586 	clz	r5, r6
 80110ec:	096d      	lsrs	r5, r5, #5
 80110ee:	2e00      	cmp	r6, #0
 80110f0:	d0ca      	beq.n	8011088 <rcl_clock_init+0x1c>
 80110f2:	46a6      	mov	lr, r4
 80110f4:	7035      	strb	r5, [r6, #0]
 80110f6:	f106 0c14 	add.w	ip, r6, #20
 80110fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80110fe:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8011102:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8011106:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801110a:	f8de 3000 	ldr.w	r3, [lr]
 801110e:	2010      	movs	r0, #16
 8011110:	f8cc 3000 	str.w	r3, [ip]
 8011114:	6823      	ldr	r3, [r4, #0]
 8011116:	6921      	ldr	r1, [r4, #16]
 8011118:	4798      	blx	r3
 801111a:	6130      	str	r0, [r6, #16]
 801111c:	b320      	cbz	r0, 8011168 <rcl_clock_init+0xfc>
 801111e:	2200      	movs	r2, #0
 8011120:	2300      	movs	r3, #0
 8011122:	46ac      	mov	ip, r5
 8011124:	7205      	strb	r5, [r0, #8]
 8011126:	e9c0 2300 	strd	r2, r3, [r0]
 801112a:	4a12      	ldr	r2, [pc, #72]	; (8011174 <rcl_clock_init+0x108>)
 801112c:	2301      	movs	r3, #1
 801112e:	4660      	mov	r0, ip
 8011130:	60f2      	str	r2, [r6, #12]
 8011132:	7033      	strb	r3, [r6, #0]
 8011134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011136:	2c00      	cmp	r4, #0
 8011138:	d0a6      	beq.n	8011088 <rcl_clock_init+0x1c>
 801113a:	fab6 f386 	clz	r3, r6
 801113e:	095b      	lsrs	r3, r3, #5
 8011140:	2e00      	cmp	r6, #0
 8011142:	d0a1      	beq.n	8011088 <rcl_clock_init+0x1c>
 8011144:	6133      	str	r3, [r6, #16]
 8011146:	469c      	mov	ip, r3
 8011148:	f106 0514 	add.w	r5, r6, #20
 801114c:	f8df e028 	ldr.w	lr, [pc, #40]	; 8011178 <rcl_clock_init+0x10c>
 8011150:	2702      	movs	r7, #2
 8011152:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8011156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801115a:	6823      	ldr	r3, [r4, #0]
 801115c:	4660      	mov	r0, ip
 801115e:	602b      	str	r3, [r5, #0]
 8011160:	f8c6 e00c 	str.w	lr, [r6, #12]
 8011164:	7037      	strb	r7, [r6, #0]
 8011166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011168:	f04f 0c0a 	mov.w	ip, #10
 801116c:	e78e      	b.n	801108c <rcl_clock_init+0x20>
 801116e:	bf00      	nop
 8011170:	0801102d 	.word	0x0801102d
 8011174:	08011035 	.word	0x08011035
 8011178:	08011025 	.word	0x08011025

0801117c <rcl_clock_get_now>:
 801117c:	b140      	cbz	r0, 8011190 <rcl_clock_get_now+0x14>
 801117e:	b139      	cbz	r1, 8011190 <rcl_clock_get_now+0x14>
 8011180:	7803      	ldrb	r3, [r0, #0]
 8011182:	b11b      	cbz	r3, 801118c <rcl_clock_get_now+0x10>
 8011184:	68c3      	ldr	r3, [r0, #12]
 8011186:	b10b      	cbz	r3, 801118c <rcl_clock_get_now+0x10>
 8011188:	6900      	ldr	r0, [r0, #16]
 801118a:	4718      	bx	r3
 801118c:	2001      	movs	r0, #1
 801118e:	4770      	bx	lr
 8011190:	200b      	movs	r0, #11
 8011192:	4770      	bx	lr

08011194 <rcl_timer_call>:
 8011194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011198:	b087      	sub	sp, #28
 801119a:	2800      	cmp	r0, #0
 801119c:	d06c      	beq.n	8011278 <rcl_timer_call+0xe4>
 801119e:	6803      	ldr	r3, [r0, #0]
 80111a0:	4604      	mov	r4, r0
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d062      	beq.n	801126c <rcl_timer_call+0xd8>
 80111a6:	f3bf 8f5b 	dmb	ish
 80111aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80111ae:	f3bf 8f5b 	dmb	ish
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d14f      	bne.n	8011256 <rcl_timer_call+0xc2>
 80111b6:	6803      	ldr	r3, [r0, #0]
 80111b8:	a904      	add	r1, sp, #16
 80111ba:	6818      	ldr	r0, [r3, #0]
 80111bc:	f7ff ffde 	bl	801117c <rcl_clock_get_now>
 80111c0:	4605      	mov	r5, r0
 80111c2:	2800      	cmp	r0, #0
 80111c4:	d149      	bne.n	801125a <rcl_timer_call+0xc6>
 80111c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	db49      	blt.n	8011262 <rcl_timer_call+0xce>
 80111ce:	2605      	movs	r6, #5
 80111d0:	6820      	ldr	r0, [r4, #0]
 80111d2:	9600      	str	r6, [sp, #0]
 80111d4:	3020      	adds	r0, #32
 80111d6:	f001 fd23 	bl	8012c20 <__atomic_exchange_8>
 80111da:	6823      	ldr	r3, [r4, #0]
 80111dc:	4680      	mov	r8, r0
 80111de:	f3bf 8f5b 	dmb	ish
 80111e2:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80111e6:	f3bf 8f5b 	dmb	ish
 80111ea:	6820      	ldr	r0, [r4, #0]
 80111ec:	4689      	mov	r9, r1
 80111ee:	4631      	mov	r1, r6
 80111f0:	3028      	adds	r0, #40	; 0x28
 80111f2:	f001 fca9 	bl	8012b48 <__atomic_load_8>
 80111f6:	460f      	mov	r7, r1
 80111f8:	4631      	mov	r1, r6
 80111fa:	4606      	mov	r6, r0
 80111fc:	6820      	ldr	r0, [r4, #0]
 80111fe:	3018      	adds	r0, #24
 8011200:	f001 fca2 	bl	8012b48 <__atomic_load_8>
 8011204:	4602      	mov	r2, r0
 8011206:	9804      	ldr	r0, [sp, #16]
 8011208:	460b      	mov	r3, r1
 801120a:	18b6      	adds	r6, r6, r2
 801120c:	f8dd c014 	ldr.w	ip, [sp, #20]
 8011210:	4692      	mov	sl, r2
 8011212:	eb47 0701 	adc.w	r7, r7, r1
 8011216:	4286      	cmp	r6, r0
 8011218:	eb77 010c 	sbcs.w	r1, r7, ip
 801121c:	da04      	bge.n	8011228 <rcl_timer_call+0x94>
 801121e:	ea53 0102 	orrs.w	r1, r3, r2
 8011222:	d12e      	bne.n	8011282 <rcl_timer_call+0xee>
 8011224:	4606      	mov	r6, r0
 8011226:	4667      	mov	r7, ip
 8011228:	6820      	ldr	r0, [r4, #0]
 801122a:	2105      	movs	r1, #5
 801122c:	4632      	mov	r2, r6
 801122e:	463b      	mov	r3, r7
 8011230:	3028      	adds	r0, #40	; 0x28
 8011232:	9100      	str	r1, [sp, #0]
 8011234:	f001 fcbe 	bl	8012bb4 <__atomic_store_8>
 8011238:	f1bb 0f00 	cmp.w	fp, #0
 801123c:	d00d      	beq.n	801125a <rcl_timer_call+0xc6>
 801123e:	9a04      	ldr	r2, [sp, #16]
 8011240:	4620      	mov	r0, r4
 8011242:	9b05      	ldr	r3, [sp, #20]
 8011244:	ebb2 0208 	subs.w	r2, r2, r8
 8011248:	eb63 0309 	sbc.w	r3, r3, r9
 801124c:	47d8      	blx	fp
 801124e:	4628      	mov	r0, r5
 8011250:	b007      	add	sp, #28
 8011252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011256:	f240 3521 	movw	r5, #801	; 0x321
 801125a:	4628      	mov	r0, r5
 801125c:	b007      	add	sp, #28
 801125e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011262:	2501      	movs	r5, #1
 8011264:	4628      	mov	r0, r5
 8011266:	b007      	add	sp, #28
 8011268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801126c:	f44f 7548 	mov.w	r5, #800	; 0x320
 8011270:	4628      	mov	r0, r5
 8011272:	b007      	add	sp, #28
 8011274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011278:	250b      	movs	r5, #11
 801127a:	4628      	mov	r0, r5
 801127c:	b007      	add	sp, #28
 801127e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011282:	1b80      	subs	r0, r0, r6
 8011284:	eb6c 0107 	sbc.w	r1, ip, r7
 8011288:	3801      	subs	r0, #1
 801128a:	f161 0100 	sbc.w	r1, r1, #0
 801128e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8011292:	f7ef f83d 	bl	8000310 <__aeabi_ldivmod>
 8011296:	9b02      	ldr	r3, [sp, #8]
 8011298:	3001      	adds	r0, #1
 801129a:	f141 0100 	adc.w	r1, r1, #0
 801129e:	fb00 f303 	mul.w	r3, r0, r3
 80112a2:	fb01 330a 	mla	r3, r1, sl, r3
 80112a6:	fba0 0a0a 	umull	r0, sl, r0, sl
 80112aa:	1986      	adds	r6, r0, r6
 80112ac:	4453      	add	r3, sl
 80112ae:	eb43 0707 	adc.w	r7, r3, r7
 80112b2:	e7b9      	b.n	8011228 <rcl_timer_call+0x94>

080112b4 <rcl_timer_is_ready>:
 80112b4:	b570      	push	{r4, r5, r6, lr}
 80112b6:	b082      	sub	sp, #8
 80112b8:	b380      	cbz	r0, 801131c <rcl_timer_is_ready+0x68>
 80112ba:	6803      	ldr	r3, [r0, #0]
 80112bc:	4604      	mov	r4, r0
 80112be:	b38b      	cbz	r3, 8011324 <rcl_timer_is_ready+0x70>
 80112c0:	460d      	mov	r5, r1
 80112c2:	b359      	cbz	r1, 801131c <rcl_timer_is_ready+0x68>
 80112c4:	f3bf 8f5b 	dmb	ish
 80112c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80112cc:	f3bf 8f5b 	dmb	ish
 80112d0:	b953      	cbnz	r3, 80112e8 <rcl_timer_is_ready+0x34>
 80112d2:	6803      	ldr	r3, [r0, #0]
 80112d4:	4669      	mov	r1, sp
 80112d6:	6818      	ldr	r0, [r3, #0]
 80112d8:	f7ff ff50 	bl	801117c <rcl_clock_get_now>
 80112dc:	4606      	mov	r6, r0
 80112de:	b148      	cbz	r0, 80112f4 <rcl_timer_is_ready+0x40>
 80112e0:	f240 3321 	movw	r3, #801	; 0x321
 80112e4:	4298      	cmp	r0, r3
 80112e6:	d102      	bne.n	80112ee <rcl_timer_is_ready+0x3a>
 80112e8:	2300      	movs	r3, #0
 80112ea:	461e      	mov	r6, r3
 80112ec:	702b      	strb	r3, [r5, #0]
 80112ee:	4630      	mov	r0, r6
 80112f0:	b002      	add	sp, #8
 80112f2:	bd70      	pop	{r4, r5, r6, pc}
 80112f4:	6820      	ldr	r0, [r4, #0]
 80112f6:	2105      	movs	r1, #5
 80112f8:	3028      	adds	r0, #40	; 0x28
 80112fa:	f001 fc25 	bl	8012b48 <__atomic_load_8>
 80112fe:	9b00      	ldr	r3, [sp, #0]
 8011300:	1ac0      	subs	r0, r0, r3
 8011302:	9b01      	ldr	r3, [sp, #4]
 8011304:	eb61 0103 	sbc.w	r1, r1, r3
 8011308:	2801      	cmp	r0, #1
 801130a:	4630      	mov	r0, r6
 801130c:	f171 0300 	sbcs.w	r3, r1, #0
 8011310:	bfb4      	ite	lt
 8011312:	2301      	movlt	r3, #1
 8011314:	2300      	movge	r3, #0
 8011316:	702b      	strb	r3, [r5, #0]
 8011318:	b002      	add	sp, #8
 801131a:	bd70      	pop	{r4, r5, r6, pc}
 801131c:	260b      	movs	r6, #11
 801131e:	4630      	mov	r0, r6
 8011320:	b002      	add	sp, #8
 8011322:	bd70      	pop	{r4, r5, r6, pc}
 8011324:	f44f 7648 	mov.w	r6, #800	; 0x320
 8011328:	e7e1      	b.n	80112ee <rcl_timer_is_ready+0x3a>
 801132a:	bf00      	nop

0801132c <rcl_timer_get_time_until_next_call>:
 801132c:	b570      	push	{r4, r5, r6, lr}
 801132e:	b082      	sub	sp, #8
 8011330:	b330      	cbz	r0, 8011380 <rcl_timer_get_time_until_next_call+0x54>
 8011332:	6803      	ldr	r3, [r0, #0]
 8011334:	4604      	mov	r4, r0
 8011336:	b33b      	cbz	r3, 8011388 <rcl_timer_get_time_until_next_call+0x5c>
 8011338:	460d      	mov	r5, r1
 801133a:	b309      	cbz	r1, 8011380 <rcl_timer_get_time_until_next_call+0x54>
 801133c:	f3bf 8f5b 	dmb	ish
 8011340:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011344:	f3bf 8f5b 	dmb	ish
 8011348:	b9ab      	cbnz	r3, 8011376 <rcl_timer_get_time_until_next_call+0x4a>
 801134a:	6803      	ldr	r3, [r0, #0]
 801134c:	4669      	mov	r1, sp
 801134e:	6818      	ldr	r0, [r3, #0]
 8011350:	f7ff ff14 	bl	801117c <rcl_clock_get_now>
 8011354:	4606      	mov	r6, r0
 8011356:	b958      	cbnz	r0, 8011370 <rcl_timer_get_time_until_next_call+0x44>
 8011358:	6820      	ldr	r0, [r4, #0]
 801135a:	2105      	movs	r1, #5
 801135c:	3028      	adds	r0, #40	; 0x28
 801135e:	f001 fbf3 	bl	8012b48 <__atomic_load_8>
 8011362:	9b00      	ldr	r3, [sp, #0]
 8011364:	1ac0      	subs	r0, r0, r3
 8011366:	9b01      	ldr	r3, [sp, #4]
 8011368:	eb61 0103 	sbc.w	r1, r1, r3
 801136c:	6028      	str	r0, [r5, #0]
 801136e:	6069      	str	r1, [r5, #4]
 8011370:	4630      	mov	r0, r6
 8011372:	b002      	add	sp, #8
 8011374:	bd70      	pop	{r4, r5, r6, pc}
 8011376:	f240 3621 	movw	r6, #801	; 0x321
 801137a:	4630      	mov	r0, r6
 801137c:	b002      	add	sp, #8
 801137e:	bd70      	pop	{r4, r5, r6, pc}
 8011380:	260b      	movs	r6, #11
 8011382:	4630      	mov	r0, r6
 8011384:	b002      	add	sp, #8
 8011386:	bd70      	pop	{r4, r5, r6, pc}
 8011388:	f44f 7648 	mov.w	r6, #800	; 0x320
 801138c:	e7f0      	b.n	8011370 <rcl_timer_get_time_until_next_call+0x44>
 801138e:	bf00      	nop

08011390 <rcl_timer_get_guard_condition>:
 8011390:	b130      	cbz	r0, 80113a0 <rcl_timer_get_guard_condition+0x10>
 8011392:	6800      	ldr	r0, [r0, #0]
 8011394:	b120      	cbz	r0, 80113a0 <rcl_timer_get_guard_condition+0x10>
 8011396:	68c3      	ldr	r3, [r0, #12]
 8011398:	b10b      	cbz	r3, 801139e <rcl_timer_get_guard_condition+0xe>
 801139a:	3008      	adds	r0, #8
 801139c:	4770      	bx	lr
 801139e:	4618      	mov	r0, r3
 80113a0:	4770      	bx	lr
 80113a2:	bf00      	nop

080113a4 <rcl_validate_enclave_name_with_size>:
 80113a4:	2800      	cmp	r0, #0
 80113a6:	d049      	beq.n	801143c <rcl_validate_enclave_name_with_size+0x98>
 80113a8:	b570      	push	{r4, r5, r6, lr}
 80113aa:	4615      	mov	r5, r2
 80113ac:	b0c2      	sub	sp, #264	; 0x108
 80113ae:	b19a      	cbz	r2, 80113d8 <rcl_validate_enclave_name_with_size+0x34>
 80113b0:	461e      	mov	r6, r3
 80113b2:	466a      	mov	r2, sp
 80113b4:	ab01      	add	r3, sp, #4
 80113b6:	460c      	mov	r4, r1
 80113b8:	f001 ffca 	bl	8013350 <rmw_validate_namespace_with_size>
 80113bc:	4684      	mov	ip, r0
 80113be:	b9b8      	cbnz	r0, 80113f0 <rcl_validate_enclave_name_with_size+0x4c>
 80113c0:	9900      	ldr	r1, [sp, #0]
 80113c2:	b171      	cbz	r1, 80113e2 <rcl_validate_enclave_name_with_size+0x3e>
 80113c4:	2907      	cmp	r1, #7
 80113c6:	d019      	beq.n	80113fc <rcl_validate_enclave_name_with_size+0x58>
 80113c8:	1e4b      	subs	r3, r1, #1
 80113ca:	2b05      	cmp	r3, #5
 80113cc:	d83a      	bhi.n	8011444 <rcl_validate_enclave_name_with_size+0xa0>
 80113ce:	e8df f003 	tbb	[pc, r3]
 80113d2:	2926      	.short	0x2926
 80113d4:	1d322f2c 	.word	0x1d322f2c
 80113d8:	f04f 0c0b 	mov.w	ip, #11
 80113dc:	4660      	mov	r0, ip
 80113de:	b042      	add	sp, #264	; 0x108
 80113e0:	bd70      	pop	{r4, r5, r6, pc}
 80113e2:	2907      	cmp	r1, #7
 80113e4:	d00a      	beq.n	80113fc <rcl_validate_enclave_name_with_size+0x58>
 80113e6:	2300      	movs	r3, #0
 80113e8:	4660      	mov	r0, ip
 80113ea:	602b      	str	r3, [r5, #0]
 80113ec:	b042      	add	sp, #264	; 0x108
 80113ee:	bd70      	pop	{r4, r5, r6, pc}
 80113f0:	f7fe fd6c 	bl	800fecc <rcl_convert_rmw_ret_to_rcl_ret>
 80113f4:	4684      	mov	ip, r0
 80113f6:	4660      	mov	r0, ip
 80113f8:	b042      	add	sp, #264	; 0x108
 80113fa:	bd70      	pop	{r4, r5, r6, pc}
 80113fc:	2cff      	cmp	r4, #255	; 0xff
 80113fe:	d9f2      	bls.n	80113e6 <rcl_validate_enclave_name_with_size+0x42>
 8011400:	6029      	str	r1, [r5, #0]
 8011402:	2e00      	cmp	r6, #0
 8011404:	d0ea      	beq.n	80113dc <rcl_validate_enclave_name_with_size+0x38>
 8011406:	23fe      	movs	r3, #254	; 0xfe
 8011408:	6033      	str	r3, [r6, #0]
 801140a:	e7e7      	b.n	80113dc <rcl_validate_enclave_name_with_size+0x38>
 801140c:	2306      	movs	r3, #6
 801140e:	602b      	str	r3, [r5, #0]
 8011410:	2e00      	cmp	r6, #0
 8011412:	d0e3      	beq.n	80113dc <rcl_validate_enclave_name_with_size+0x38>
 8011414:	9b01      	ldr	r3, [sp, #4]
 8011416:	4660      	mov	r0, ip
 8011418:	6033      	str	r3, [r6, #0]
 801141a:	b042      	add	sp, #264	; 0x108
 801141c:	bd70      	pop	{r4, r5, r6, pc}
 801141e:	2301      	movs	r3, #1
 8011420:	602b      	str	r3, [r5, #0]
 8011422:	e7f5      	b.n	8011410 <rcl_validate_enclave_name_with_size+0x6c>
 8011424:	2302      	movs	r3, #2
 8011426:	602b      	str	r3, [r5, #0]
 8011428:	e7f2      	b.n	8011410 <rcl_validate_enclave_name_with_size+0x6c>
 801142a:	2303      	movs	r3, #3
 801142c:	602b      	str	r3, [r5, #0]
 801142e:	e7ef      	b.n	8011410 <rcl_validate_enclave_name_with_size+0x6c>
 8011430:	2304      	movs	r3, #4
 8011432:	602b      	str	r3, [r5, #0]
 8011434:	e7ec      	b.n	8011410 <rcl_validate_enclave_name_with_size+0x6c>
 8011436:	2305      	movs	r3, #5
 8011438:	602b      	str	r3, [r5, #0]
 801143a:	e7e9      	b.n	8011410 <rcl_validate_enclave_name_with_size+0x6c>
 801143c:	f04f 0c0b 	mov.w	ip, #11
 8011440:	4660      	mov	r0, ip
 8011442:	4770      	bx	lr
 8011444:	460b      	mov	r3, r1
 8011446:	4a04      	ldr	r2, [pc, #16]	; (8011458 <rcl_validate_enclave_name_with_size+0xb4>)
 8011448:	f44f 7180 	mov.w	r1, #256	; 0x100
 801144c:	a802      	add	r0, sp, #8
 801144e:	f001 fd33 	bl	8012eb8 <rcutils_snprintf>
 8011452:	f04f 0c01 	mov.w	ip, #1
 8011456:	e7c1      	b.n	80113dc <rcl_validate_enclave_name_with_size+0x38>
 8011458:	0801c5b0 	.word	0x0801c5b0

0801145c <rcl_validate_enclave_name>:
 801145c:	b168      	cbz	r0, 801147a <rcl_validate_enclave_name+0x1e>
 801145e:	b570      	push	{r4, r5, r6, lr}
 8011460:	460d      	mov	r5, r1
 8011462:	4616      	mov	r6, r2
 8011464:	4604      	mov	r4, r0
 8011466:	f7ee ff4b 	bl	8000300 <strlen>
 801146a:	4633      	mov	r3, r6
 801146c:	4601      	mov	r1, r0
 801146e:	462a      	mov	r2, r5
 8011470:	4620      	mov	r0, r4
 8011472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011476:	f7ff bf95 	b.w	80113a4 <rcl_validate_enclave_name_with_size>
 801147a:	200b      	movs	r0, #11
 801147c:	4770      	bx	lr
 801147e:	bf00      	nop

08011480 <rcl_get_zero_initialized_wait_set>:
 8011480:	b510      	push	{r4, lr}
 8011482:	4c08      	ldr	r4, [pc, #32]	; (80114a4 <rcl_get_zero_initialized_wait_set+0x24>)
 8011484:	4686      	mov	lr, r0
 8011486:	4684      	mov	ip, r0
 8011488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801148a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801148e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011490:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011496:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801149a:	6823      	ldr	r3, [r4, #0]
 801149c:	4670      	mov	r0, lr
 801149e:	f8cc 3000 	str.w	r3, [ip]
 80114a2:	bd10      	pop	{r4, pc}
 80114a4:	0801c610 	.word	0x0801c610

080114a8 <rcl_wait_set_is_valid>:
 80114a8:	b118      	cbz	r0, 80114b2 <rcl_wait_set_is_valid+0xa>
 80114aa:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80114ac:	3800      	subs	r0, #0
 80114ae:	bf18      	it	ne
 80114b0:	2001      	movne	r0, #1
 80114b2:	4770      	bx	lr

080114b4 <rcl_wait_set_fini>:
 80114b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80114b8:	b082      	sub	sp, #8
 80114ba:	2800      	cmp	r0, #0
 80114bc:	f000 8095 	beq.w	80115ea <rcl_wait_set_fini+0x136>
 80114c0:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80114c2:	4604      	mov	r4, r0
 80114c4:	2e00      	cmp	r6, #0
 80114c6:	f000 808c 	beq.w	80115e2 <rcl_wait_set_fini+0x12e>
 80114ca:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 80114cc:	f003 f8ee 	bl	80146ac <rmw_destroy_wait_set>
 80114d0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80114d2:	1e06      	subs	r6, r0, #0
 80114d4:	bf18      	it	ne
 80114d6:	f44f 7661 	movne.w	r6, #900	; 0x384
 80114da:	2d00      	cmp	r5, #0
 80114dc:	f000 8081 	beq.w	80115e2 <rcl_wait_set_fini+0x12e>
 80114e0:	2700      	movs	r7, #0
 80114e2:	6820      	ldr	r0, [r4, #0]
 80114e4:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80114e8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80114ea:	6067      	str	r7, [r4, #4]
 80114ec:	602f      	str	r7, [r5, #0]
 80114ee:	b120      	cbz	r0, 80114fa <rcl_wait_set_fini+0x46>
 80114f0:	9101      	str	r1, [sp, #4]
 80114f2:	47c0      	blx	r8
 80114f4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80114f6:	9901      	ldr	r1, [sp, #4]
 80114f8:	6027      	str	r7, [r4, #0]
 80114fa:	68a8      	ldr	r0, [r5, #8]
 80114fc:	b120      	cbz	r0, 8011508 <rcl_wait_set_fini+0x54>
 80114fe:	47c0      	blx	r8
 8011500:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011502:	2300      	movs	r3, #0
 8011504:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8011508:	f04f 0800 	mov.w	r8, #0
 801150c:	68a0      	ldr	r0, [r4, #8]
 801150e:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8011510:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011512:	f8c4 800c 	str.w	r8, [r4, #12]
 8011516:	f8c5 800c 	str.w	r8, [r5, #12]
 801151a:	b128      	cbz	r0, 8011528 <rcl_wait_set_fini+0x74>
 801151c:	47b8      	blx	r7
 801151e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011520:	f8c4 8008 	str.w	r8, [r4, #8]
 8011524:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8011526:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011528:	f04f 0800 	mov.w	r8, #0
 801152c:	6968      	ldr	r0, [r5, #20]
 801152e:	f8c5 8010 	str.w	r8, [r5, #16]
 8011532:	b128      	cbz	r0, 8011540 <rcl_wait_set_fini+0x8c>
 8011534:	47b8      	blx	r7
 8011536:	f8c5 8014 	str.w	r8, [r5, #20]
 801153a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801153c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801153e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011540:	f04f 0800 	mov.w	r8, #0
 8011544:	6920      	ldr	r0, [r4, #16]
 8011546:	f8c4 8014 	str.w	r8, [r4, #20]
 801154a:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 801154e:	b128      	cbz	r0, 801155c <rcl_wait_set_fini+0xa8>
 8011550:	47b8      	blx	r7
 8011552:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011554:	f8c4 8010 	str.w	r8, [r4, #16]
 8011558:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801155a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801155c:	f04f 0800 	mov.w	r8, #0
 8011560:	69a0      	ldr	r0, [r4, #24]
 8011562:	f8c4 801c 	str.w	r8, [r4, #28]
 8011566:	f8c5 8018 	str.w	r8, [r5, #24]
 801156a:	b128      	cbz	r0, 8011578 <rcl_wait_set_fini+0xc4>
 801156c:	9101      	str	r1, [sp, #4]
 801156e:	47b8      	blx	r7
 8011570:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011572:	9901      	ldr	r1, [sp, #4]
 8011574:	f8c4 8018 	str.w	r8, [r4, #24]
 8011578:	6a28      	ldr	r0, [r5, #32]
 801157a:	b120      	cbz	r0, 8011586 <rcl_wait_set_fini+0xd2>
 801157c:	47b8      	blx	r7
 801157e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8011580:	2300      	movs	r3, #0
 8011582:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8011586:	2700      	movs	r7, #0
 8011588:	6a20      	ldr	r0, [r4, #32]
 801158a:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801158e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8011590:	6267      	str	r7, [r4, #36]	; 0x24
 8011592:	626f      	str	r7, [r5, #36]	; 0x24
 8011594:	b120      	cbz	r0, 80115a0 <rcl_wait_set_fini+0xec>
 8011596:	9101      	str	r1, [sp, #4]
 8011598:	47c0      	blx	r8
 801159a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801159c:	9901      	ldr	r1, [sp, #4]
 801159e:	6227      	str	r7, [r4, #32]
 80115a0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80115a2:	b120      	cbz	r0, 80115ae <rcl_wait_set_fini+0xfa>
 80115a4:	47c0      	blx	r8
 80115a6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80115a8:	2300      	movs	r3, #0
 80115aa:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 80115ae:	2700      	movs	r7, #0
 80115b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80115b2:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80115b6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80115b8:	62e7      	str	r7, [r4, #44]	; 0x2c
 80115ba:	632f      	str	r7, [r5, #48]	; 0x30
 80115bc:	b120      	cbz	r0, 80115c8 <rcl_wait_set_fini+0x114>
 80115be:	9101      	str	r1, [sp, #4]
 80115c0:	47c0      	blx	r8
 80115c2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80115c4:	9901      	ldr	r1, [sp, #4]
 80115c6:	62a7      	str	r7, [r4, #40]	; 0x28
 80115c8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80115ca:	b120      	cbz	r0, 80115d6 <rcl_wait_set_fini+0x122>
 80115cc:	47c0      	blx	r8
 80115ce:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80115d0:	2300      	movs	r3, #0
 80115d2:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 80115d6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80115d8:	4628      	mov	r0, r5
 80115da:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80115dc:	4798      	blx	r3
 80115de:	2300      	movs	r3, #0
 80115e0:	6323      	str	r3, [r4, #48]	; 0x30
 80115e2:	4630      	mov	r0, r6
 80115e4:	b002      	add	sp, #8
 80115e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115ea:	260b      	movs	r6, #11
 80115ec:	4630      	mov	r0, r6
 80115ee:	b002      	add	sp, #8
 80115f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080115f4 <rcl_wait_set_add_subscription>:
 80115f4:	b318      	cbz	r0, 801163e <rcl_wait_set_add_subscription+0x4a>
 80115f6:	b538      	push	{r3, r4, r5, lr}
 80115f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80115fa:	4604      	mov	r4, r0
 80115fc:	b30b      	cbz	r3, 8011642 <rcl_wait_set_add_subscription+0x4e>
 80115fe:	b319      	cbz	r1, 8011648 <rcl_wait_set_add_subscription+0x54>
 8011600:	681d      	ldr	r5, [r3, #0]
 8011602:	6840      	ldr	r0, [r0, #4]
 8011604:	4285      	cmp	r5, r0
 8011606:	d217      	bcs.n	8011638 <rcl_wait_set_add_subscription+0x44>
 8011608:	1c68      	adds	r0, r5, #1
 801160a:	6018      	str	r0, [r3, #0]
 801160c:	6823      	ldr	r3, [r4, #0]
 801160e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8011612:	b102      	cbz	r2, 8011616 <rcl_wait_set_add_subscription+0x22>
 8011614:	6015      	str	r5, [r2, #0]
 8011616:	4608      	mov	r0, r1
 8011618:	f7ff fcf4 	bl	8011004 <rcl_subscription_get_rmw_handle>
 801161c:	b150      	cbz	r0, 8011634 <rcl_wait_set_add_subscription+0x40>
 801161e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011620:	6842      	ldr	r2, [r0, #4]
 8011622:	2000      	movs	r0, #0
 8011624:	689b      	ldr	r3, [r3, #8]
 8011626:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801162a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801162c:	6853      	ldr	r3, [r2, #4]
 801162e:	3301      	adds	r3, #1
 8011630:	6053      	str	r3, [r2, #4]
 8011632:	bd38      	pop	{r3, r4, r5, pc}
 8011634:	2001      	movs	r0, #1
 8011636:	bd38      	pop	{r3, r4, r5, pc}
 8011638:	f240 3086 	movw	r0, #902	; 0x386
 801163c:	bd38      	pop	{r3, r4, r5, pc}
 801163e:	200b      	movs	r0, #11
 8011640:	4770      	bx	lr
 8011642:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011646:	bd38      	pop	{r3, r4, r5, pc}
 8011648:	200b      	movs	r0, #11
 801164a:	bd38      	pop	{r3, r4, r5, pc}

0801164c <rcl_wait_set_clear>:
 801164c:	2800      	cmp	r0, #0
 801164e:	d074      	beq.n	801173a <rcl_wait_set_clear+0xee>
 8011650:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011652:	b510      	push	{r4, lr}
 8011654:	4604      	mov	r4, r0
 8011656:	2b00      	cmp	r3, #0
 8011658:	d071      	beq.n	801173e <rcl_wait_set_clear+0xf2>
 801165a:	6800      	ldr	r0, [r0, #0]
 801165c:	b138      	cbz	r0, 801166e <rcl_wait_set_clear+0x22>
 801165e:	6862      	ldr	r2, [r4, #4]
 8011660:	2100      	movs	r1, #0
 8011662:	0092      	lsls	r2, r2, #2
 8011664:	f008 ffbe 	bl	801a5e4 <memset>
 8011668:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801166a:	2200      	movs	r2, #0
 801166c:	601a      	str	r2, [r3, #0]
 801166e:	68a0      	ldr	r0, [r4, #8]
 8011670:	b138      	cbz	r0, 8011682 <rcl_wait_set_clear+0x36>
 8011672:	68e2      	ldr	r2, [r4, #12]
 8011674:	2100      	movs	r1, #0
 8011676:	0092      	lsls	r2, r2, #2
 8011678:	f008 ffb4 	bl	801a5e4 <memset>
 801167c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801167e:	2200      	movs	r2, #0
 8011680:	60da      	str	r2, [r3, #12]
 8011682:	69a0      	ldr	r0, [r4, #24]
 8011684:	b138      	cbz	r0, 8011696 <rcl_wait_set_clear+0x4a>
 8011686:	69e2      	ldr	r2, [r4, #28]
 8011688:	2100      	movs	r1, #0
 801168a:	0092      	lsls	r2, r2, #2
 801168c:	f008 ffaa 	bl	801a5e4 <memset>
 8011690:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011692:	2200      	movs	r2, #0
 8011694:	619a      	str	r2, [r3, #24]
 8011696:	6a20      	ldr	r0, [r4, #32]
 8011698:	b138      	cbz	r0, 80116aa <rcl_wait_set_clear+0x5e>
 801169a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801169c:	2100      	movs	r1, #0
 801169e:	0092      	lsls	r2, r2, #2
 80116a0:	f008 ffa0 	bl	801a5e4 <memset>
 80116a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80116a6:	2200      	movs	r2, #0
 80116a8:	625a      	str	r2, [r3, #36]	; 0x24
 80116aa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80116ac:	b138      	cbz	r0, 80116be <rcl_wait_set_clear+0x72>
 80116ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80116b0:	2100      	movs	r1, #0
 80116b2:	0092      	lsls	r2, r2, #2
 80116b4:	f008 ff96 	bl	801a5e4 <memset>
 80116b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80116ba:	2200      	movs	r2, #0
 80116bc:	631a      	str	r2, [r3, #48]	; 0x30
 80116be:	6920      	ldr	r0, [r4, #16]
 80116c0:	b138      	cbz	r0, 80116d2 <rcl_wait_set_clear+0x86>
 80116c2:	6962      	ldr	r2, [r4, #20]
 80116c4:	2100      	movs	r1, #0
 80116c6:	0092      	lsls	r2, r2, #2
 80116c8:	f008 ff8c 	bl	801a5e4 <memset>
 80116cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80116ce:	2200      	movs	r2, #0
 80116d0:	641a      	str	r2, [r3, #64]	; 0x40
 80116d2:	6898      	ldr	r0, [r3, #8]
 80116d4:	b138      	cbz	r0, 80116e6 <rcl_wait_set_clear+0x9a>
 80116d6:	685a      	ldr	r2, [r3, #4]
 80116d8:	2100      	movs	r1, #0
 80116da:	0092      	lsls	r2, r2, #2
 80116dc:	f008 ff82 	bl	801a5e4 <memset>
 80116e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80116e2:	2200      	movs	r2, #0
 80116e4:	605a      	str	r2, [r3, #4]
 80116e6:	6958      	ldr	r0, [r3, #20]
 80116e8:	b138      	cbz	r0, 80116fa <rcl_wait_set_clear+0xae>
 80116ea:	691a      	ldr	r2, [r3, #16]
 80116ec:	2100      	movs	r1, #0
 80116ee:	0092      	lsls	r2, r2, #2
 80116f0:	f008 ff78 	bl	801a5e4 <memset>
 80116f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80116f6:	2200      	movs	r2, #0
 80116f8:	611a      	str	r2, [r3, #16]
 80116fa:	6a18      	ldr	r0, [r3, #32]
 80116fc:	b138      	cbz	r0, 801170e <rcl_wait_set_clear+0xc2>
 80116fe:	69da      	ldr	r2, [r3, #28]
 8011700:	2100      	movs	r1, #0
 8011702:	0092      	lsls	r2, r2, #2
 8011704:	f008 ff6e 	bl	801a5e4 <memset>
 8011708:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801170a:	2200      	movs	r2, #0
 801170c:	61da      	str	r2, [r3, #28]
 801170e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8011710:	b138      	cbz	r0, 8011722 <rcl_wait_set_clear+0xd6>
 8011712:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011714:	2100      	movs	r1, #0
 8011716:	0092      	lsls	r2, r2, #2
 8011718:	f008 ff64 	bl	801a5e4 <memset>
 801171c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801171e:	2200      	movs	r2, #0
 8011720:	629a      	str	r2, [r3, #40]	; 0x28
 8011722:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8011724:	b140      	cbz	r0, 8011738 <rcl_wait_set_clear+0xec>
 8011726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011728:	2100      	movs	r1, #0
 801172a:	0092      	lsls	r2, r2, #2
 801172c:	f008 ff5a 	bl	801a5e4 <memset>
 8011730:	2300      	movs	r3, #0
 8011732:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011734:	4618      	mov	r0, r3
 8011736:	6353      	str	r3, [r2, #52]	; 0x34
 8011738:	bd10      	pop	{r4, pc}
 801173a:	200b      	movs	r0, #11
 801173c:	4770      	bx	lr
 801173e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011742:	bd10      	pop	{r4, pc}

08011744 <rcl_wait_set_resize>:
 8011744:	2800      	cmp	r0, #0
 8011746:	f000 8180 	beq.w	8011a4a <rcl_wait_set_resize+0x306>
 801174a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801174e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8011750:	b083      	sub	sp, #12
 8011752:	4605      	mov	r5, r0
 8011754:	2c00      	cmp	r4, #0
 8011756:	f000 817a 	beq.w	8011a4e <rcl_wait_set_resize+0x30a>
 801175a:	f04f 0900 	mov.w	r9, #0
 801175e:	461f      	mov	r7, r3
 8011760:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8011764:	4688      	mov	r8, r1
 8011766:	4616      	mov	r6, r2
 8011768:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 801176c:	f8c0 9004 	str.w	r9, [r0, #4]
 8011770:	f8c4 9000 	str.w	r9, [r4]
 8011774:	2900      	cmp	r1, #0
 8011776:	f000 80bf 	beq.w	80118f8 <rcl_wait_set_resize+0x1b4>
 801177a:	008c      	lsls	r4, r1, #2
 801177c:	4652      	mov	r2, sl
 801177e:	6800      	ldr	r0, [r0, #0]
 8011780:	4621      	mov	r1, r4
 8011782:	9301      	str	r3, [sp, #4]
 8011784:	4798      	blx	r3
 8011786:	9b01      	ldr	r3, [sp, #4]
 8011788:	6028      	str	r0, [r5, #0]
 801178a:	2800      	cmp	r0, #0
 801178c:	f000 80f6 	beq.w	801197c <rcl_wait_set_resize+0x238>
 8011790:	4622      	mov	r2, r4
 8011792:	4649      	mov	r1, r9
 8011794:	9301      	str	r3, [sp, #4]
 8011796:	f008 ff25 	bl	801a5e4 <memset>
 801179a:	f8c5 8004 	str.w	r8, [r5, #4]
 801179e:	4652      	mov	r2, sl
 80117a0:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 80117a4:	4621      	mov	r1, r4
 80117a6:	9b01      	ldr	r3, [sp, #4]
 80117a8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80117ac:	f8c8 9004 	str.w	r9, [r8, #4]
 80117b0:	4798      	blx	r3
 80117b2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80117b4:	f8c8 0008 	str.w	r0, [r8, #8]
 80117b8:	689b      	ldr	r3, [r3, #8]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	f000 814a 	beq.w	8011a54 <rcl_wait_set_resize+0x310>
 80117c0:	4622      	mov	r2, r4
 80117c2:	4649      	mov	r1, r9
 80117c4:	4618      	mov	r0, r3
 80117c6:	f008 ff0d 	bl	801a5e4 <memset>
 80117ca:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80117cc:	f04f 0800 	mov.w	r8, #0
 80117d0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80117d4:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 80117d8:	f8c5 800c 	str.w	r8, [r5, #12]
 80117dc:	f8c4 800c 	str.w	r8, [r4, #12]
 80117e0:	2e00      	cmp	r6, #0
 80117e2:	f040 809b 	bne.w	801191c <rcl_wait_set_resize+0x1d8>
 80117e6:	68a8      	ldr	r0, [r5, #8]
 80117e8:	b128      	cbz	r0, 80117f6 <rcl_wait_set_resize+0xb2>
 80117ea:	4649      	mov	r1, r9
 80117ec:	4790      	blx	r2
 80117ee:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80117f0:	60ae      	str	r6, [r5, #8]
 80117f2:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80117f6:	f04f 0800 	mov.w	r8, #0
 80117fa:	19f6      	adds	r6, r6, r7
 80117fc:	f8c4 8010 	str.w	r8, [r4, #16]
 8011800:	f040 80a2 	bne.w	8011948 <rcl_wait_set_resize+0x204>
 8011804:	6960      	ldr	r0, [r4, #20]
 8011806:	b130      	cbz	r0, 8011816 <rcl_wait_set_resize+0xd2>
 8011808:	4649      	mov	r1, r9
 801180a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801180c:	4798      	blx	r3
 801180e:	6166      	str	r6, [r4, #20]
 8011810:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011812:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8011816:	2600      	movs	r6, #0
 8011818:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801181c:	616e      	str	r6, [r5, #20]
 801181e:	6426      	str	r6, [r4, #64]	; 0x40
 8011820:	2f00      	cmp	r7, #0
 8011822:	f040 80af 	bne.w	8011984 <rcl_wait_set_resize+0x240>
 8011826:	6928      	ldr	r0, [r5, #16]
 8011828:	b138      	cbz	r0, 801183a <rcl_wait_set_resize+0xf6>
 801182a:	4649      	mov	r1, r9
 801182c:	47d0      	blx	sl
 801182e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011830:	612f      	str	r7, [r5, #16]
 8011832:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8011836:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801183a:	2600      	movs	r6, #0
 801183c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801183e:	61ee      	str	r6, [r5, #28]
 8011840:	61a6      	str	r6, [r4, #24]
 8011842:	2b00      	cmp	r3, #0
 8011844:	f040 8093 	bne.w	801196e <rcl_wait_set_resize+0x22a>
 8011848:	69a8      	ldr	r0, [r5, #24]
 801184a:	b120      	cbz	r0, 8011856 <rcl_wait_set_resize+0x112>
 801184c:	4649      	mov	r1, r9
 801184e:	47d0      	blx	sl
 8011850:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011852:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011854:	61ab      	str	r3, [r5, #24]
 8011856:	6a20      	ldr	r0, [r4, #32]
 8011858:	b128      	cbz	r0, 8011866 <rcl_wait_set_resize+0x122>
 801185a:	4649      	mov	r1, r9
 801185c:	47d0      	blx	sl
 801185e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011860:	2300      	movs	r3, #0
 8011862:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8011866:	2600      	movs	r6, #0
 8011868:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801186a:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801186c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 8011870:	626e      	str	r6, [r5, #36]	; 0x24
 8011872:	6266      	str	r6, [r4, #36]	; 0x24
 8011874:	2b00      	cmp	r3, #0
 8011876:	f000 8098 	beq.w	80119aa <rcl_wait_set_resize+0x266>
 801187a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 801187e:	463a      	mov	r2, r7
 8011880:	6a28      	ldr	r0, [r5, #32]
 8011882:	4651      	mov	r1, sl
 8011884:	47c8      	blx	r9
 8011886:	6228      	str	r0, [r5, #32]
 8011888:	2800      	cmp	r0, #0
 801188a:	d077      	beq.n	801197c <rcl_wait_set_resize+0x238>
 801188c:	4652      	mov	r2, sl
 801188e:	4631      	mov	r1, r6
 8011890:	f008 fea8 	bl	801a5e4 <memset>
 8011894:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011896:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011898:	463a      	mov	r2, r7
 801189a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801189c:	4651      	mov	r1, sl
 801189e:	626b      	str	r3, [r5, #36]	; 0x24
 80118a0:	62a6      	str	r6, [r4, #40]	; 0x28
 80118a2:	47c8      	blx	r9
 80118a4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80118a6:	62e0      	str	r0, [r4, #44]	; 0x2c
 80118a8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80118aa:	2c00      	cmp	r4, #0
 80118ac:	f000 80f2 	beq.w	8011a94 <rcl_wait_set_resize+0x350>
 80118b0:	4620      	mov	r0, r4
 80118b2:	4652      	mov	r2, sl
 80118b4:	4631      	mov	r1, r6
 80118b6:	f008 fe95 	bl	801a5e4 <memset>
 80118ba:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80118bc:	2600      	movs	r6, #0
 80118be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80118c0:	6da7      	ldr	r7, [r4, #88]	; 0x58
 80118c2:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 80118c6:	62ee      	str	r6, [r5, #44]	; 0x2c
 80118c8:	6326      	str	r6, [r4, #48]	; 0x30
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	f040 8097 	bne.w	80119fe <rcl_wait_set_resize+0x2ba>
 80118d0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80118d2:	b120      	cbz	r0, 80118de <rcl_wait_set_resize+0x19a>
 80118d4:	4639      	mov	r1, r7
 80118d6:	47c0      	blx	r8
 80118d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80118da:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80118dc:	62ab      	str	r3, [r5, #40]	; 0x28
 80118de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80118e0:	2800      	cmp	r0, #0
 80118e2:	d04c      	beq.n	801197e <rcl_wait_set_resize+0x23a>
 80118e4:	4639      	mov	r1, r7
 80118e6:	47c0      	blx	r8
 80118e8:	2300      	movs	r3, #0
 80118ea:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80118ec:	4618      	mov	r0, r3
 80118ee:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 80118f2:	b003      	add	sp, #12
 80118f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118f8:	6800      	ldr	r0, [r0, #0]
 80118fa:	b120      	cbz	r0, 8011906 <rcl_wait_set_resize+0x1c2>
 80118fc:	4651      	mov	r1, sl
 80118fe:	47d8      	blx	fp
 8011900:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011902:	f8c5 8000 	str.w	r8, [r5]
 8011906:	68a0      	ldr	r0, [r4, #8]
 8011908:	2800      	cmp	r0, #0
 801190a:	f43f af5f 	beq.w	80117cc <rcl_wait_set_resize+0x88>
 801190e:	4651      	mov	r1, sl
 8011910:	47d8      	blx	fp
 8011912:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011914:	2300      	movs	r3, #0
 8011916:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801191a:	e757      	b.n	80117cc <rcl_wait_set_resize+0x88>
 801191c:	00b4      	lsls	r4, r6, #2
 801191e:	464a      	mov	r2, r9
 8011920:	68a8      	ldr	r0, [r5, #8]
 8011922:	4621      	mov	r1, r4
 8011924:	4798      	blx	r3
 8011926:	60a8      	str	r0, [r5, #8]
 8011928:	b340      	cbz	r0, 801197c <rcl_wait_set_resize+0x238>
 801192a:	4622      	mov	r2, r4
 801192c:	4641      	mov	r1, r8
 801192e:	f008 fe59 	bl	801a5e4 <memset>
 8011932:	f04f 0800 	mov.w	r8, #0
 8011936:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011938:	60ee      	str	r6, [r5, #12]
 801193a:	19f6      	adds	r6, r6, r7
 801193c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8011940:	f8c4 8010 	str.w	r8, [r4, #16]
 8011944:	f43f af5e 	beq.w	8011804 <rcl_wait_set_resize+0xc0>
 8011948:	00b6      	lsls	r6, r6, #2
 801194a:	464a      	mov	r2, r9
 801194c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801194e:	6960      	ldr	r0, [r4, #20]
 8011950:	4631      	mov	r1, r6
 8011952:	4798      	blx	r3
 8011954:	4681      	mov	r9, r0
 8011956:	6160      	str	r0, [r4, #20]
 8011958:	2800      	cmp	r0, #0
 801195a:	f000 8084 	beq.w	8011a66 <rcl_wait_set_resize+0x322>
 801195e:	4632      	mov	r2, r6
 8011960:	4641      	mov	r1, r8
 8011962:	f008 fe3f 	bl	801a5e4 <memset>
 8011966:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8011968:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801196c:	e753      	b.n	8011816 <rcl_wait_set_resize+0xd2>
 801196e:	009c      	lsls	r4, r3, #2
 8011970:	464a      	mov	r2, r9
 8011972:	69a8      	ldr	r0, [r5, #24]
 8011974:	4621      	mov	r1, r4
 8011976:	47c0      	blx	r8
 8011978:	61a8      	str	r0, [r5, #24]
 801197a:	bb40      	cbnz	r0, 80119ce <rcl_wait_set_resize+0x28a>
 801197c:	200a      	movs	r0, #10
 801197e:	b003      	add	sp, #12
 8011980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011984:	00bc      	lsls	r4, r7, #2
 8011986:	464a      	mov	r2, r9
 8011988:	6928      	ldr	r0, [r5, #16]
 801198a:	4621      	mov	r1, r4
 801198c:	47c0      	blx	r8
 801198e:	6128      	str	r0, [r5, #16]
 8011990:	2800      	cmp	r0, #0
 8011992:	d0f3      	beq.n	801197c <rcl_wait_set_resize+0x238>
 8011994:	4622      	mov	r2, r4
 8011996:	4631      	mov	r1, r6
 8011998:	f008 fe24 	bl	801a5e4 <memset>
 801199c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801199e:	616f      	str	r7, [r5, #20]
 80119a0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80119a4:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 80119a8:	e747      	b.n	801183a <rcl_wait_set_resize+0xf6>
 80119aa:	6a28      	ldr	r0, [r5, #32]
 80119ac:	b120      	cbz	r0, 80119b8 <rcl_wait_set_resize+0x274>
 80119ae:	4639      	mov	r1, r7
 80119b0:	47c0      	blx	r8
 80119b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80119b4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80119b6:	622b      	str	r3, [r5, #32]
 80119b8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80119ba:	2800      	cmp	r0, #0
 80119bc:	f43f af7e 	beq.w	80118bc <rcl_wait_set_resize+0x178>
 80119c0:	4639      	mov	r1, r7
 80119c2:	47c0      	blx	r8
 80119c4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80119c6:	2300      	movs	r3, #0
 80119c8:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 80119cc:	e776      	b.n	80118bc <rcl_wait_set_resize+0x178>
 80119ce:	4622      	mov	r2, r4
 80119d0:	4631      	mov	r1, r6
 80119d2:	f008 fe07 	bl	801a5e4 <memset>
 80119d6:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 80119d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80119da:	464a      	mov	r2, r9
 80119dc:	6a38      	ldr	r0, [r7, #32]
 80119de:	4621      	mov	r1, r4
 80119e0:	61eb      	str	r3, [r5, #28]
 80119e2:	61fe      	str	r6, [r7, #28]
 80119e4:	47c0      	blx	r8
 80119e6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80119e8:	6238      	str	r0, [r7, #32]
 80119ea:	6a1f      	ldr	r7, [r3, #32]
 80119ec:	2f00      	cmp	r7, #0
 80119ee:	d04a      	beq.n	8011a86 <rcl_wait_set_resize+0x342>
 80119f0:	4622      	mov	r2, r4
 80119f2:	4631      	mov	r1, r6
 80119f4:	4638      	mov	r0, r7
 80119f6:	f008 fdf5 	bl	801a5e4 <memset>
 80119fa:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80119fc:	e733      	b.n	8011866 <rcl_wait_set_resize+0x122>
 80119fe:	009c      	lsls	r4, r3, #2
 8011a00:	463a      	mov	r2, r7
 8011a02:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8011a04:	4621      	mov	r1, r4
 8011a06:	47c8      	blx	r9
 8011a08:	62a8      	str	r0, [r5, #40]	; 0x28
 8011a0a:	2800      	cmp	r0, #0
 8011a0c:	d0b6      	beq.n	801197c <rcl_wait_set_resize+0x238>
 8011a0e:	4622      	mov	r2, r4
 8011a10:	4631      	mov	r1, r6
 8011a12:	f008 fde7 	bl	801a5e4 <memset>
 8011a16:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8011a1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a1c:	463a      	mov	r2, r7
 8011a1e:	4621      	mov	r1, r4
 8011a20:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8011a24:	62eb      	str	r3, [r5, #44]	; 0x2c
 8011a26:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 8011a2a:	47c8      	blx	r9
 8011a2c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011a2e:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8011a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d034      	beq.n	8011aa2 <rcl_wait_set_resize+0x35e>
 8011a38:	4622      	mov	r2, r4
 8011a3a:	4631      	mov	r1, r6
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	f008 fdd1 	bl	801a5e4 <memset>
 8011a42:	4630      	mov	r0, r6
 8011a44:	b003      	add	sp, #12
 8011a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a4a:	200b      	movs	r0, #11
 8011a4c:	4770      	bx	lr
 8011a4e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011a52:	e794      	b.n	801197e <rcl_wait_set_resize+0x23a>
 8011a54:	6828      	ldr	r0, [r5, #0]
 8011a56:	4651      	mov	r1, sl
 8011a58:	9301      	str	r3, [sp, #4]
 8011a5a:	47d8      	blx	fp
 8011a5c:	9b01      	ldr	r3, [sp, #4]
 8011a5e:	200a      	movs	r0, #10
 8011a60:	e9c5 3300 	strd	r3, r3, [r5]
 8011a64:	e78b      	b.n	801197e <rcl_wait_set_resize+0x23a>
 8011a66:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011a68:	68a8      	ldr	r0, [r5, #8]
 8011a6a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8011a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a6e:	4798      	blx	r3
 8011a70:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011a72:	6928      	ldr	r0, [r5, #16]
 8011a74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011a76:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8011a78:	e9c5 9902 	strd	r9, r9, [r5, #8]
 8011a7c:	4790      	blx	r2
 8011a7e:	200a      	movs	r0, #10
 8011a80:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8011a84:	e77b      	b.n	801197e <rcl_wait_set_resize+0x23a>
 8011a86:	69a8      	ldr	r0, [r5, #24]
 8011a88:	4649      	mov	r1, r9
 8011a8a:	47d0      	blx	sl
 8011a8c:	200a      	movs	r0, #10
 8011a8e:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8011a92:	e774      	b.n	801197e <rcl_wait_set_resize+0x23a>
 8011a94:	6a28      	ldr	r0, [r5, #32]
 8011a96:	4639      	mov	r1, r7
 8011a98:	47c0      	blx	r8
 8011a9a:	200a      	movs	r0, #10
 8011a9c:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8011aa0:	e76d      	b.n	801197e <rcl_wait_set_resize+0x23a>
 8011aa2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8011aa4:	4639      	mov	r1, r7
 8011aa6:	9301      	str	r3, [sp, #4]
 8011aa8:	47c0      	blx	r8
 8011aaa:	9b01      	ldr	r3, [sp, #4]
 8011aac:	200a      	movs	r0, #10
 8011aae:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8011ab2:	e764      	b.n	801197e <rcl_wait_set_resize+0x23a>

08011ab4 <rcl_wait_set_init>:
 8011ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ab8:	b085      	sub	sp, #20
 8011aba:	4605      	mov	r5, r0
 8011abc:	460e      	mov	r6, r1
 8011abe:	4617      	mov	r7, r2
 8011ac0:	a812      	add	r0, sp, #72	; 0x48
 8011ac2:	4698      	mov	r8, r3
 8011ac4:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8011ac8:	f7fb f912 	bl	800ccf0 <rcutils_allocator_is_valid>
 8011acc:	2d00      	cmp	r5, #0
 8011ace:	d072      	beq.n	8011bb6 <rcl_wait_set_init+0x102>
 8011ad0:	f080 0001 	eor.w	r0, r0, #1
 8011ad4:	b2c0      	uxtb	r0, r0
 8011ad6:	2800      	cmp	r0, #0
 8011ad8:	d16d      	bne.n	8011bb6 <rcl_wait_set_init+0x102>
 8011ada:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8011ade:	f1ba 0f00 	cmp.w	sl, #0
 8011ae2:	d004      	beq.n	8011aee <rcl_wait_set_init+0x3a>
 8011ae4:	2464      	movs	r4, #100	; 0x64
 8011ae6:	4620      	mov	r0, r4
 8011ae8:	b005      	add	sp, #20
 8011aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aee:	f1b9 0f00 	cmp.w	r9, #0
 8011af2:	d060      	beq.n	8011bb6 <rcl_wait_set_init+0x102>
 8011af4:	4648      	mov	r0, r9
 8011af6:	f7fe fa07 	bl	800ff08 <rcl_context_is_valid>
 8011afa:	2800      	cmp	r0, #0
 8011afc:	d068      	beq.n	8011bd0 <rcl_wait_set_init+0x11c>
 8011afe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011b00:	205c      	movs	r0, #92	; 0x5c
 8011b02:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011b04:	4798      	blx	r3
 8011b06:	6328      	str	r0, [r5, #48]	; 0x30
 8011b08:	2800      	cmp	r0, #0
 8011b0a:	d063      	beq.n	8011bd4 <rcl_wait_set_init+0x120>
 8011b0c:	225c      	movs	r2, #92	; 0x5c
 8011b0e:	4651      	mov	r1, sl
 8011b10:	f008 fd68 	bl	801a5e4 <memset>
 8011b14:	ac12      	add	r4, sp, #72	; 0x48
 8011b16:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 8011b1a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8011b1e:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 8011b22:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 8011b26:	eb03 0e02 	add.w	lr, r3, r2
 8011b2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011b2c:	f8d9 9000 	ldr.w	r9, [r9]
 8011b30:	449e      	add	lr, r3
 8011b32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011b34:	e9cb aa01 	strd	sl, sl, [fp, #4]
 8011b38:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8011b3c:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8011b40:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 8011b44:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 8011b48:	44be      	add	lr, r7
 8011b4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011b4e:	6823      	ldr	r3, [r4, #0]
 8011b50:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 8011b54:	f109 0028 	add.w	r0, r9, #40	; 0x28
 8011b58:	f8cc 3000 	str.w	r3, [ip]
 8011b5c:	f002 fd9c 	bl	8014698 <rmw_create_wait_set>
 8011b60:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011b62:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 8011b66:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8011b68:	b350      	cbz	r0, 8011bc0 <rcl_wait_set_init+0x10c>
 8011b6a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8011b6c:	4643      	mov	r3, r8
 8011b6e:	463a      	mov	r2, r7
 8011b70:	4631      	mov	r1, r6
 8011b72:	9402      	str	r4, [sp, #8]
 8011b74:	4628      	mov	r0, r5
 8011b76:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8011b78:	9401      	str	r4, [sp, #4]
 8011b7a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8011b7c:	9400      	str	r4, [sp, #0]
 8011b7e:	f7ff fde1 	bl	8011744 <rcl_wait_set_resize>
 8011b82:	4604      	mov	r4, r0
 8011b84:	2800      	cmp	r0, #0
 8011b86:	d0ae      	beq.n	8011ae6 <rcl_wait_set_init+0x32>
 8011b88:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011b8a:	bb2b      	cbnz	r3, 8011bd8 <rcl_wait_set_init+0x124>
 8011b8c:	2600      	movs	r6, #0
 8011b8e:	4628      	mov	r0, r5
 8011b90:	4633      	mov	r3, r6
 8011b92:	4632      	mov	r2, r6
 8011b94:	4631      	mov	r1, r6
 8011b96:	9600      	str	r6, [sp, #0]
 8011b98:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8011b9c:	f7ff fdd2 	bl	8011744 <rcl_wait_set_resize>
 8011ba0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8011ba2:	2800      	cmp	r0, #0
 8011ba4:	d09f      	beq.n	8011ae6 <rcl_wait_set_init+0x32>
 8011ba6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8011ba8:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8011baa:	4798      	blx	r3
 8011bac:	4620      	mov	r0, r4
 8011bae:	632e      	str	r6, [r5, #48]	; 0x30
 8011bb0:	b005      	add	sp, #20
 8011bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bb6:	240b      	movs	r4, #11
 8011bb8:	4620      	mov	r0, r4
 8011bba:	b005      	add	sp, #20
 8011bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bc0:	2401      	movs	r4, #1
 8011bc2:	f002 fd73 	bl	80146ac <rmw_destroy_wait_set>
 8011bc6:	2800      	cmp	r0, #0
 8011bc8:	bf18      	it	ne
 8011bca:	f44f 7461 	movne.w	r4, #900	; 0x384
 8011bce:	e7dd      	b.n	8011b8c <rcl_wait_set_init+0xd8>
 8011bd0:	2465      	movs	r4, #101	; 0x65
 8011bd2:	e788      	b.n	8011ae6 <rcl_wait_set_init+0x32>
 8011bd4:	240a      	movs	r4, #10
 8011bd6:	e786      	b.n	8011ae6 <rcl_wait_set_init+0x32>
 8011bd8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8011bda:	e7f2      	b.n	8011bc2 <rcl_wait_set_init+0x10e>

08011bdc <rcl_wait_set_add_guard_condition>:
 8011bdc:	b318      	cbz	r0, 8011c26 <rcl_wait_set_add_guard_condition+0x4a>
 8011bde:	b538      	push	{r3, r4, r5, lr}
 8011be0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011be2:	4604      	mov	r4, r0
 8011be4:	b30b      	cbz	r3, 8011c2a <rcl_wait_set_add_guard_condition+0x4e>
 8011be6:	b319      	cbz	r1, 8011c30 <rcl_wait_set_add_guard_condition+0x54>
 8011be8:	68dd      	ldr	r5, [r3, #12]
 8011bea:	68c0      	ldr	r0, [r0, #12]
 8011bec:	4285      	cmp	r5, r0
 8011bee:	d217      	bcs.n	8011c20 <rcl_wait_set_add_guard_condition+0x44>
 8011bf0:	1c68      	adds	r0, r5, #1
 8011bf2:	60d8      	str	r0, [r3, #12]
 8011bf4:	68a3      	ldr	r3, [r4, #8]
 8011bf6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8011bfa:	b102      	cbz	r2, 8011bfe <rcl_wait_set_add_guard_condition+0x22>
 8011bfc:	6015      	str	r5, [r2, #0]
 8011bfe:	4608      	mov	r0, r1
 8011c00:	f006 fe56 	bl	80188b0 <rcl_guard_condition_get_rmw_handle>
 8011c04:	b150      	cbz	r0, 8011c1c <rcl_wait_set_add_guard_condition+0x40>
 8011c06:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011c08:	6842      	ldr	r2, [r0, #4]
 8011c0a:	2000      	movs	r0, #0
 8011c0c:	695b      	ldr	r3, [r3, #20]
 8011c0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011c12:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011c14:	6913      	ldr	r3, [r2, #16]
 8011c16:	3301      	adds	r3, #1
 8011c18:	6113      	str	r3, [r2, #16]
 8011c1a:	bd38      	pop	{r3, r4, r5, pc}
 8011c1c:	2001      	movs	r0, #1
 8011c1e:	bd38      	pop	{r3, r4, r5, pc}
 8011c20:	f240 3086 	movw	r0, #902	; 0x386
 8011c24:	bd38      	pop	{r3, r4, r5, pc}
 8011c26:	200b      	movs	r0, #11
 8011c28:	4770      	bx	lr
 8011c2a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011c2e:	bd38      	pop	{r3, r4, r5, pc}
 8011c30:	200b      	movs	r0, #11
 8011c32:	bd38      	pop	{r3, r4, r5, pc}

08011c34 <rcl_wait_set_add_timer>:
 8011c34:	b328      	cbz	r0, 8011c82 <rcl_wait_set_add_timer+0x4e>
 8011c36:	b538      	push	{r3, r4, r5, lr}
 8011c38:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011c3a:	4604      	mov	r4, r0
 8011c3c:	b31b      	cbz	r3, 8011c86 <rcl_wait_set_add_timer+0x52>
 8011c3e:	b329      	cbz	r1, 8011c8c <rcl_wait_set_add_timer+0x58>
 8011c40:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8011c42:	6965      	ldr	r5, [r4, #20]
 8011c44:	42a8      	cmp	r0, r5
 8011c46:	d219      	bcs.n	8011c7c <rcl_wait_set_add_timer+0x48>
 8011c48:	1c45      	adds	r5, r0, #1
 8011c4a:	641d      	str	r5, [r3, #64]	; 0x40
 8011c4c:	6923      	ldr	r3, [r4, #16]
 8011c4e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8011c52:	b102      	cbz	r2, 8011c56 <rcl_wait_set_add_timer+0x22>
 8011c54:	6010      	str	r0, [r2, #0]
 8011c56:	4608      	mov	r0, r1
 8011c58:	f7ff fb9a 	bl	8011390 <rcl_timer_get_guard_condition>
 8011c5c:	b168      	cbz	r0, 8011c7a <rcl_wait_set_add_timer+0x46>
 8011c5e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011c60:	68e3      	ldr	r3, [r4, #12]
 8011c62:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8011c64:	3b01      	subs	r3, #1
 8011c66:	441d      	add	r5, r3
 8011c68:	f006 fe22 	bl	80188b0 <rcl_guard_condition_get_rmw_handle>
 8011c6c:	b180      	cbz	r0, 8011c90 <rcl_wait_set_add_timer+0x5c>
 8011c6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011c70:	6842      	ldr	r2, [r0, #4]
 8011c72:	2000      	movs	r0, #0
 8011c74:	695b      	ldr	r3, [r3, #20]
 8011c76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011c7a:	bd38      	pop	{r3, r4, r5, pc}
 8011c7c:	f240 3086 	movw	r0, #902	; 0x386
 8011c80:	bd38      	pop	{r3, r4, r5, pc}
 8011c82:	200b      	movs	r0, #11
 8011c84:	4770      	bx	lr
 8011c86:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011c8a:	bd38      	pop	{r3, r4, r5, pc}
 8011c8c:	200b      	movs	r0, #11
 8011c8e:	bd38      	pop	{r3, r4, r5, pc}
 8011c90:	2001      	movs	r0, #1
 8011c92:	bd38      	pop	{r3, r4, r5, pc}

08011c94 <rcl_wait_set_add_client>:
 8011c94:	b318      	cbz	r0, 8011cde <rcl_wait_set_add_client+0x4a>
 8011c96:	b538      	push	{r3, r4, r5, lr}
 8011c98:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011c9a:	4604      	mov	r4, r0
 8011c9c:	b30b      	cbz	r3, 8011ce2 <rcl_wait_set_add_client+0x4e>
 8011c9e:	b319      	cbz	r1, 8011ce8 <rcl_wait_set_add_client+0x54>
 8011ca0:	699d      	ldr	r5, [r3, #24]
 8011ca2:	69c0      	ldr	r0, [r0, #28]
 8011ca4:	4285      	cmp	r5, r0
 8011ca6:	d217      	bcs.n	8011cd8 <rcl_wait_set_add_client+0x44>
 8011ca8:	1c68      	adds	r0, r5, #1
 8011caa:	6198      	str	r0, [r3, #24]
 8011cac:	69a3      	ldr	r3, [r4, #24]
 8011cae:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8011cb2:	b102      	cbz	r2, 8011cb6 <rcl_wait_set_add_client+0x22>
 8011cb4:	6015      	str	r5, [r2, #0]
 8011cb6:	4608      	mov	r0, r1
 8011cb8:	f7fe f83e 	bl	800fd38 <rcl_client_get_rmw_handle>
 8011cbc:	b150      	cbz	r0, 8011cd4 <rcl_wait_set_add_client+0x40>
 8011cbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011cc0:	6842      	ldr	r2, [r0, #4]
 8011cc2:	2000      	movs	r0, #0
 8011cc4:	6a1b      	ldr	r3, [r3, #32]
 8011cc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011cca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011ccc:	69d3      	ldr	r3, [r2, #28]
 8011cce:	3301      	adds	r3, #1
 8011cd0:	61d3      	str	r3, [r2, #28]
 8011cd2:	bd38      	pop	{r3, r4, r5, pc}
 8011cd4:	2001      	movs	r0, #1
 8011cd6:	bd38      	pop	{r3, r4, r5, pc}
 8011cd8:	f240 3086 	movw	r0, #902	; 0x386
 8011cdc:	bd38      	pop	{r3, r4, r5, pc}
 8011cde:	200b      	movs	r0, #11
 8011ce0:	4770      	bx	lr
 8011ce2:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011ce6:	bd38      	pop	{r3, r4, r5, pc}
 8011ce8:	200b      	movs	r0, #11
 8011cea:	bd38      	pop	{r3, r4, r5, pc}

08011cec <rcl_wait_set_add_service>:
 8011cec:	b318      	cbz	r0, 8011d36 <rcl_wait_set_add_service+0x4a>
 8011cee:	b538      	push	{r3, r4, r5, lr}
 8011cf0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8011cf2:	4604      	mov	r4, r0
 8011cf4:	b30b      	cbz	r3, 8011d3a <rcl_wait_set_add_service+0x4e>
 8011cf6:	b319      	cbz	r1, 8011d40 <rcl_wait_set_add_service+0x54>
 8011cf8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8011cfa:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8011cfc:	4285      	cmp	r5, r0
 8011cfe:	d217      	bcs.n	8011d30 <rcl_wait_set_add_service+0x44>
 8011d00:	1c68      	adds	r0, r5, #1
 8011d02:	6258      	str	r0, [r3, #36]	; 0x24
 8011d04:	6a23      	ldr	r3, [r4, #32]
 8011d06:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8011d0a:	b102      	cbz	r2, 8011d0e <rcl_wait_set_add_service+0x22>
 8011d0c:	6015      	str	r5, [r2, #0]
 8011d0e:	4608      	mov	r0, r1
 8011d10:	f7fe fff4 	bl	8010cfc <rcl_service_get_rmw_handle>
 8011d14:	b150      	cbz	r0, 8011d2c <rcl_wait_set_add_service+0x40>
 8011d16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011d18:	6842      	ldr	r2, [r0, #4]
 8011d1a:	2000      	movs	r0, #0
 8011d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011d22:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8011d24:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8011d26:	3301      	adds	r3, #1
 8011d28:	6293      	str	r3, [r2, #40]	; 0x28
 8011d2a:	bd38      	pop	{r3, r4, r5, pc}
 8011d2c:	2001      	movs	r0, #1
 8011d2e:	bd38      	pop	{r3, r4, r5, pc}
 8011d30:	f240 3086 	movw	r0, #902	; 0x386
 8011d34:	bd38      	pop	{r3, r4, r5, pc}
 8011d36:	200b      	movs	r0, #11
 8011d38:	4770      	bx	lr
 8011d3a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011d3e:	bd38      	pop	{r3, r4, r5, pc}
 8011d40:	200b      	movs	r0, #11
 8011d42:	bd38      	pop	{r3, r4, r5, pc}
 8011d44:	0000      	movs	r0, r0
	...

08011d48 <rcl_wait>:
 8011d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d4c:	ed2d 8b02 	vpush	{d8}
 8011d50:	b08d      	sub	sp, #52	; 0x34
 8011d52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011d56:	2800      	cmp	r0, #0
 8011d58:	f000 814f 	beq.w	8011ffa <rcl_wait+0x2b2>
 8011d5c:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8011d5e:	4605      	mov	r5, r0
 8011d60:	2e00      	cmp	r6, #0
 8011d62:	f000 811a 	beq.w	8011f9a <rcl_wait+0x252>
 8011d66:	6843      	ldr	r3, [r0, #4]
 8011d68:	b983      	cbnz	r3, 8011d8c <rcl_wait+0x44>
 8011d6a:	68eb      	ldr	r3, [r5, #12]
 8011d6c:	b973      	cbnz	r3, 8011d8c <rcl_wait+0x44>
 8011d6e:	696b      	ldr	r3, [r5, #20]
 8011d70:	b963      	cbnz	r3, 8011d8c <rcl_wait+0x44>
 8011d72:	69eb      	ldr	r3, [r5, #28]
 8011d74:	b953      	cbnz	r3, 8011d8c <rcl_wait+0x44>
 8011d76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011d78:	b943      	cbnz	r3, 8011d8c <rcl_wait+0x44>
 8011d7a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8011d7c:	b933      	cbnz	r3, 8011d8c <rcl_wait+0x44>
 8011d7e:	f240 3085 	movw	r0, #901	; 0x385
 8011d82:	b00d      	add	sp, #52	; 0x34
 8011d84:	ecbd 8b02 	vpop	{d8}
 8011d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d8c:	9b04      	ldr	r3, [sp, #16]
 8011d8e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8011d90:	2b01      	cmp	r3, #1
 8011d92:	9b05      	ldr	r3, [sp, #20]
 8011d94:	f173 0300 	sbcs.w	r3, r3, #0
 8011d98:	f2c0 80f8 	blt.w	8011f8c <rcl_wait+0x244>
 8011d9c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8011da0:	2a00      	cmp	r2, #0
 8011da2:	f000 810f 	beq.w	8011fc4 <rcl_wait+0x27c>
 8011da6:	2400      	movs	r4, #0
 8011da8:	4613      	mov	r3, r2
 8011daa:	f240 3921 	movw	r9, #801	; 0x321
 8011dae:	4632      	mov	r2, r6
 8011db0:	46a2      	mov	sl, r4
 8011db2:	46a3      	mov	fp, r4
 8011db4:	ed9f 8b98 	vldr	d8, [pc, #608]	; 8012018 <rcl_wait+0x2d0>
 8011db8:	e014      	b.n	8011de4 <rcl_wait+0x9c>
 8011dba:	2800      	cmp	r0, #0
 8011dbc:	d1e1      	bne.n	8011d82 <rcl_wait+0x3a>
 8011dbe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011dc2:	4542      	cmp	r2, r8
 8011dc4:	eb73 0107 	sbcs.w	r1, r3, r7
 8011dc8:	da03      	bge.n	8011dd2 <rcl_wait+0x8a>
 8011dca:	4690      	mov	r8, r2
 8011dcc:	461f      	mov	r7, r3
 8011dce:	f04f 0b01 	mov.w	fp, #1
 8011dd2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8011dd4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011dd6:	3401      	adds	r4, #1
 8011dd8:	f14a 0a00 	adc.w	sl, sl, #0
 8011ddc:	429c      	cmp	r4, r3
 8011dde:	f17a 0100 	sbcs.w	r1, sl, #0
 8011de2:	d228      	bcs.n	8011e36 <rcl_wait+0xee>
 8011de4:	6928      	ldr	r0, [r5, #16]
 8011de6:	a908      	add	r1, sp, #32
 8011de8:	00a6      	lsls	r6, r4, #2
 8011dea:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8011dee:	2800      	cmp	r0, #0
 8011df0:	d0f1      	beq.n	8011dd6 <rcl_wait+0x8e>
 8011df2:	68eb      	ldr	r3, [r5, #12]
 8011df4:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8011df8:	4423      	add	r3, r4
 8011dfa:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8011dfe:	f1be 0f00 	cmp.w	lr, #0
 8011e02:	d006      	beq.n	8011e12 <rcl_wait+0xca>
 8011e04:	6913      	ldr	r3, [r2, #16]
 8011e06:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8011e0a:	3301      	adds	r3, #1
 8011e0c:	6113      	str	r3, [r2, #16]
 8011e0e:	692b      	ldr	r3, [r5, #16]
 8011e10:	5998      	ldr	r0, [r3, r6]
 8011e12:	ed8d 8b08 	vstr	d8, [sp, #32]
 8011e16:	f7ff fa89 	bl	801132c <rcl_timer_get_time_until_next_call>
 8011e1a:	4548      	cmp	r0, r9
 8011e1c:	d1cd      	bne.n	8011dba <rcl_wait+0x72>
 8011e1e:	692b      	ldr	r3, [r5, #16]
 8011e20:	2200      	movs	r2, #0
 8011e22:	3401      	adds	r4, #1
 8011e24:	519a      	str	r2, [r3, r6]
 8011e26:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8011e28:	f14a 0a00 	adc.w	sl, sl, #0
 8011e2c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011e2e:	429c      	cmp	r4, r3
 8011e30:	f17a 0100 	sbcs.w	r1, sl, #0
 8011e34:	d3d6      	bcc.n	8011de4 <rcl_wait+0x9c>
 8011e36:	4659      	mov	r1, fp
 8011e38:	4616      	mov	r6, r2
 8011e3a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8011e3e:	4313      	orrs	r3, r2
 8011e40:	f040 80b4 	bne.w	8011fac <rcl_wait+0x264>
 8011e44:	2300      	movs	r3, #0
 8011e46:	2200      	movs	r2, #0
 8011e48:	460c      	mov	r4, r1
 8011e4a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011e4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011e52:	ab08      	add	r3, sp, #32
 8011e54:	9302      	str	r3, [sp, #8]
 8011e56:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8011e5a:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8011e5c:	f106 0110 	add.w	r1, r6, #16
 8011e60:	9300      	str	r3, [sp, #0]
 8011e62:	1d30      	adds	r0, r6, #4
 8011e64:	f106 031c 	add.w	r3, r6, #28
 8011e68:	9201      	str	r2, [sp, #4]
 8011e6a:	f106 0228 	add.w	r2, r6, #40	; 0x28
 8011e6e:	f002 faaf 	bl	80143d0 <rmw_wait>
 8011e72:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011e74:	4680      	mov	r8, r0
 8011e76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011e78:	b1e2      	cbz	r2, 8011eb4 <rcl_wait+0x16c>
 8011e7a:	f04f 0900 	mov.w	r9, #0
 8011e7e:	464f      	mov	r7, r9
 8011e80:	692a      	ldr	r2, [r5, #16]
 8011e82:	f10d 011f 	add.w	r1, sp, #31
 8011e86:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8011e8a:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8011e8e:	b160      	cbz	r0, 8011eaa <rcl_wait+0x162>
 8011e90:	f88d 701f 	strb.w	r7, [sp, #31]
 8011e94:	f7ff fa0e 	bl	80112b4 <rcl_timer_is_ready>
 8011e98:	2800      	cmp	r0, #0
 8011e9a:	f47f af72 	bne.w	8011d82 <rcl_wait+0x3a>
 8011e9e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8011ea2:	b90b      	cbnz	r3, 8011ea8 <rcl_wait+0x160>
 8011ea4:	692a      	ldr	r2, [r5, #16]
 8011ea6:	5193      	str	r3, [r2, r6]
 8011ea8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011eaa:	f109 0901 	add.w	r9, r9, #1
 8011eae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011eb0:	454a      	cmp	r2, r9
 8011eb2:	d8e5      	bhi.n	8011e80 <rcl_wait+0x138>
 8011eb4:	f038 0002 	bics.w	r0, r8, #2
 8011eb8:	d176      	bne.n	8011fa8 <rcl_wait+0x260>
 8011eba:	686f      	ldr	r7, [r5, #4]
 8011ebc:	b17f      	cbz	r7, 8011ede <rcl_wait+0x196>
 8011ebe:	4602      	mov	r2, r0
 8011ec0:	e002      	b.n	8011ec8 <rcl_wait+0x180>
 8011ec2:	3201      	adds	r2, #1
 8011ec4:	42ba      	cmp	r2, r7
 8011ec6:	d00a      	beq.n	8011ede <rcl_wait+0x196>
 8011ec8:	6899      	ldr	r1, [r3, #8]
 8011eca:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011ece:	2900      	cmp	r1, #0
 8011ed0:	d1f7      	bne.n	8011ec2 <rcl_wait+0x17a>
 8011ed2:	682e      	ldr	r6, [r5, #0]
 8011ed4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8011ed8:	3201      	adds	r2, #1
 8011eda:	42ba      	cmp	r2, r7
 8011edc:	d1f4      	bne.n	8011ec8 <rcl_wait+0x180>
 8011ede:	68ef      	ldr	r7, [r5, #12]
 8011ee0:	b17f      	cbz	r7, 8011f02 <rcl_wait+0x1ba>
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	e002      	b.n	8011eec <rcl_wait+0x1a4>
 8011ee6:	3201      	adds	r2, #1
 8011ee8:	42ba      	cmp	r2, r7
 8011eea:	d00a      	beq.n	8011f02 <rcl_wait+0x1ba>
 8011eec:	6959      	ldr	r1, [r3, #20]
 8011eee:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011ef2:	2900      	cmp	r1, #0
 8011ef4:	d1f7      	bne.n	8011ee6 <rcl_wait+0x19e>
 8011ef6:	68ae      	ldr	r6, [r5, #8]
 8011ef8:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8011efc:	3201      	adds	r2, #1
 8011efe:	42ba      	cmp	r2, r7
 8011f00:	d1f4      	bne.n	8011eec <rcl_wait+0x1a4>
 8011f02:	69ef      	ldr	r7, [r5, #28]
 8011f04:	b17f      	cbz	r7, 8011f26 <rcl_wait+0x1de>
 8011f06:	2200      	movs	r2, #0
 8011f08:	e002      	b.n	8011f10 <rcl_wait+0x1c8>
 8011f0a:	3201      	adds	r2, #1
 8011f0c:	42ba      	cmp	r2, r7
 8011f0e:	d00a      	beq.n	8011f26 <rcl_wait+0x1de>
 8011f10:	6a19      	ldr	r1, [r3, #32]
 8011f12:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011f16:	2900      	cmp	r1, #0
 8011f18:	d1f7      	bne.n	8011f0a <rcl_wait+0x1c2>
 8011f1a:	69ae      	ldr	r6, [r5, #24]
 8011f1c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8011f20:	3201      	adds	r2, #1
 8011f22:	42ba      	cmp	r2, r7
 8011f24:	d1f4      	bne.n	8011f10 <rcl_wait+0x1c8>
 8011f26:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8011f28:	b17f      	cbz	r7, 8011f4a <rcl_wait+0x202>
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	e002      	b.n	8011f34 <rcl_wait+0x1ec>
 8011f2e:	3201      	adds	r2, #1
 8011f30:	42ba      	cmp	r2, r7
 8011f32:	d00a      	beq.n	8011f4a <rcl_wait+0x202>
 8011f34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8011f36:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011f3a:	2900      	cmp	r1, #0
 8011f3c:	d1f7      	bne.n	8011f2e <rcl_wait+0x1e6>
 8011f3e:	6a2e      	ldr	r6, [r5, #32]
 8011f40:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8011f44:	3201      	adds	r2, #1
 8011f46:	42ba      	cmp	r2, r7
 8011f48:	d1f4      	bne.n	8011f34 <rcl_wait+0x1ec>
 8011f4a:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 8011f4c:	b17f      	cbz	r7, 8011f6e <rcl_wait+0x226>
 8011f4e:	2200      	movs	r2, #0
 8011f50:	e002      	b.n	8011f58 <rcl_wait+0x210>
 8011f52:	3201      	adds	r2, #1
 8011f54:	42ba      	cmp	r2, r7
 8011f56:	d00a      	beq.n	8011f6e <rcl_wait+0x226>
 8011f58:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8011f5a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8011f5e:	2900      	cmp	r1, #0
 8011f60:	d1f7      	bne.n	8011f52 <rcl_wait+0x20a>
 8011f62:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8011f64:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8011f68:	3201      	adds	r2, #1
 8011f6a:	42ba      	cmp	r2, r7
 8011f6c:	d1f4      	bne.n	8011f58 <rcl_wait+0x210>
 8011f6e:	f1b8 0f02 	cmp.w	r8, #2
 8011f72:	f47f af06 	bne.w	8011d82 <rcl_wait+0x3a>
 8011f76:	f084 0301 	eor.w	r3, r4, #1
 8011f7a:	b2db      	uxtb	r3, r3
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	bf18      	it	ne
 8011f80:	2002      	movne	r0, #2
 8011f82:	b00d      	add	sp, #52	; 0x34
 8011f84:	ecbd 8b02 	vpop	{d8}
 8011f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f8c:	2a00      	cmp	r2, #0
 8011f8e:	d03a      	beq.n	8012006 <rcl_wait+0x2be>
 8011f90:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8011f94:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8011f98:	e705      	b.n	8011da6 <rcl_wait+0x5e>
 8011f9a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8011f9e:	b00d      	add	sp, #52	; 0x34
 8011fa0:	ecbd 8b02 	vpop	{d8}
 8011fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fa8:	2001      	movs	r0, #1
 8011faa:	e6ea      	b.n	8011d82 <rcl_wait+0x3a>
 8011fac:	9b04      	ldr	r3, [sp, #16]
 8011fae:	460c      	mov	r4, r1
 8011fb0:	2b01      	cmp	r3, #1
 8011fb2:	9b05      	ldr	r3, [sp, #20]
 8011fb4:	f173 0300 	sbcs.w	r3, r3, #0
 8011fb8:	bfa8      	it	ge
 8011fba:	f044 0401 	orrge.w	r4, r4, #1
 8011fbe:	b914      	cbnz	r4, 8011fc6 <rcl_wait+0x27e>
 8011fc0:	4623      	mov	r3, r4
 8011fc2:	e747      	b.n	8011e54 <rcl_wait+0x10c>
 8011fc4:	4611      	mov	r1, r2
 8011fc6:	2f00      	cmp	r7, #0
 8011fc8:	da02      	bge.n	8011fd0 <rcl_wait+0x288>
 8011fca:	f04f 0800 	mov.w	r8, #0
 8011fce:	4647      	mov	r7, r8
 8011fd0:	460c      	mov	r4, r1
 8011fd2:	4640      	mov	r0, r8
 8011fd4:	4639      	mov	r1, r7
 8011fd6:	a312      	add	r3, pc, #72	; (adr r3, 8012020 <rcl_wait+0x2d8>)
 8011fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fdc:	f7ee f998 	bl	8000310 <__aeabi_ldivmod>
 8011fe0:	a30f      	add	r3, pc, #60	; (adr r3, 8012020 <rcl_wait+0x2d8>)
 8011fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011fea:	4640      	mov	r0, r8
 8011fec:	4639      	mov	r1, r7
 8011fee:	f7ee f98f 	bl	8000310 <__aeabi_ldivmod>
 8011ff2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011ff6:	ab08      	add	r3, sp, #32
 8011ff8:	e72c      	b.n	8011e54 <rcl_wait+0x10c>
 8011ffa:	200b      	movs	r0, #11
 8011ffc:	b00d      	add	sp, #52	; 0x34
 8011ffe:	ecbd 8b02 	vpop	{d8}
 8012002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012006:	4611      	mov	r1, r2
 8012008:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801200c:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8012010:	e713      	b.n	8011e3a <rcl_wait+0xf2>
 8012012:	bf00      	nop
 8012014:	f3af 8000 	nop.w
 8012018:	ffffffff 	.word	0xffffffff
 801201c:	7fffffff 	.word	0x7fffffff
 8012020:	3b9aca00 	.word	0x3b9aca00
 8012024:	00000000 	.word	0x00000000

08012028 <rcl_action_take_goal_response>:
 8012028:	2800      	cmp	r0, #0
 801202a:	d039      	beq.n	80120a0 <rcl_action_take_goal_response+0x78>
 801202c:	b570      	push	{r4, r5, r6, lr}
 801202e:	4604      	mov	r4, r0
 8012030:	6800      	ldr	r0, [r0, #0]
 8012032:	b380      	cbz	r0, 8012096 <rcl_action_take_goal_response+0x6e>
 8012034:	460e      	mov	r6, r1
 8012036:	4615      	mov	r5, r2
 8012038:	f7fd ff3e 	bl	800feb8 <rcl_client_is_valid>
 801203c:	b330      	cbz	r0, 801208c <rcl_action_take_goal_response+0x64>
 801203e:	6820      	ldr	r0, [r4, #0]
 8012040:	3004      	adds	r0, #4
 8012042:	f7fd ff39 	bl	800feb8 <rcl_client_is_valid>
 8012046:	b308      	cbz	r0, 801208c <rcl_action_take_goal_response+0x64>
 8012048:	6820      	ldr	r0, [r4, #0]
 801204a:	3008      	adds	r0, #8
 801204c:	f7fd ff34 	bl	800feb8 <rcl_client_is_valid>
 8012050:	b1e0      	cbz	r0, 801208c <rcl_action_take_goal_response+0x64>
 8012052:	6820      	ldr	r0, [r4, #0]
 8012054:	300c      	adds	r0, #12
 8012056:	f7fe ffdb 	bl	8011010 <rcl_subscription_is_valid>
 801205a:	b1b8      	cbz	r0, 801208c <rcl_action_take_goal_response+0x64>
 801205c:	6820      	ldr	r0, [r4, #0]
 801205e:	3010      	adds	r0, #16
 8012060:	f7fe ffd6 	bl	8011010 <rcl_subscription_is_valid>
 8012064:	b190      	cbz	r0, 801208c <rcl_action_take_goal_response+0x64>
 8012066:	b1cd      	cbz	r5, 801209c <rcl_action_take_goal_response+0x74>
 8012068:	b1c6      	cbz	r6, 801209c <rcl_action_take_goal_response+0x74>
 801206a:	462a      	mov	r2, r5
 801206c:	4631      	mov	r1, r6
 801206e:	6820      	ldr	r0, [r4, #0]
 8012070:	f7fd feba 	bl	800fde8 <rcl_take_response>
 8012074:	b148      	cbz	r0, 801208a <rcl_action_take_goal_response+0x62>
 8012076:	280a      	cmp	r0, #10
 8012078:	d007      	beq.n	801208a <rcl_action_take_goal_response+0x62>
 801207a:	f240 12f5 	movw	r2, #501	; 0x1f5
 801207e:	f640 0337 	movw	r3, #2103	; 0x837
 8012082:	4290      	cmp	r0, r2
 8012084:	bf0c      	ite	eq
 8012086:	4618      	moveq	r0, r3
 8012088:	2001      	movne	r0, #1
 801208a:	bd70      	pop	{r4, r5, r6, pc}
 801208c:	f7fa fe54 	bl	800cd38 <rcutils_reset_error>
 8012090:	f640 0036 	movw	r0, #2102	; 0x836
 8012094:	bd70      	pop	{r4, r5, r6, pc}
 8012096:	f640 0036 	movw	r0, #2102	; 0x836
 801209a:	bd70      	pop	{r4, r5, r6, pc}
 801209c:	200b      	movs	r0, #11
 801209e:	bd70      	pop	{r4, r5, r6, pc}
 80120a0:	f640 0036 	movw	r0, #2102	; 0x836
 80120a4:	4770      	bx	lr
 80120a6:	bf00      	nop

080120a8 <rcl_action_send_result_request>:
 80120a8:	b390      	cbz	r0, 8012110 <rcl_action_send_result_request+0x68>
 80120aa:	b570      	push	{r4, r5, r6, lr}
 80120ac:	4604      	mov	r4, r0
 80120ae:	6800      	ldr	r0, [r0, #0]
 80120b0:	b348      	cbz	r0, 8012106 <rcl_action_send_result_request+0x5e>
 80120b2:	460e      	mov	r6, r1
 80120b4:	4615      	mov	r5, r2
 80120b6:	f7fd feff 	bl	800feb8 <rcl_client_is_valid>
 80120ba:	b1f8      	cbz	r0, 80120fc <rcl_action_send_result_request+0x54>
 80120bc:	6820      	ldr	r0, [r4, #0]
 80120be:	3004      	adds	r0, #4
 80120c0:	f7fd fefa 	bl	800feb8 <rcl_client_is_valid>
 80120c4:	b1d0      	cbz	r0, 80120fc <rcl_action_send_result_request+0x54>
 80120c6:	6820      	ldr	r0, [r4, #0]
 80120c8:	3008      	adds	r0, #8
 80120ca:	f7fd fef5 	bl	800feb8 <rcl_client_is_valid>
 80120ce:	b1a8      	cbz	r0, 80120fc <rcl_action_send_result_request+0x54>
 80120d0:	6820      	ldr	r0, [r4, #0]
 80120d2:	300c      	adds	r0, #12
 80120d4:	f7fe ff9c 	bl	8011010 <rcl_subscription_is_valid>
 80120d8:	b180      	cbz	r0, 80120fc <rcl_action_send_result_request+0x54>
 80120da:	6820      	ldr	r0, [r4, #0]
 80120dc:	3010      	adds	r0, #16
 80120de:	f7fe ff97 	bl	8011010 <rcl_subscription_is_valid>
 80120e2:	b158      	cbz	r0, 80120fc <rcl_action_send_result_request+0x54>
 80120e4:	b195      	cbz	r5, 801210c <rcl_action_send_result_request+0x64>
 80120e6:	b18e      	cbz	r6, 801210c <rcl_action_send_result_request+0x64>
 80120e8:	6820      	ldr	r0, [r4, #0]
 80120ea:	462a      	mov	r2, r5
 80120ec:	4631      	mov	r1, r6
 80120ee:	3008      	adds	r0, #8
 80120f0:	f7fd fe28 	bl	800fd44 <rcl_send_request>
 80120f4:	3800      	subs	r0, #0
 80120f6:	bf18      	it	ne
 80120f8:	2001      	movne	r0, #1
 80120fa:	bd70      	pop	{r4, r5, r6, pc}
 80120fc:	f7fa fe1c 	bl	800cd38 <rcutils_reset_error>
 8012100:	f640 0036 	movw	r0, #2102	; 0x836
 8012104:	bd70      	pop	{r4, r5, r6, pc}
 8012106:	f640 0036 	movw	r0, #2102	; 0x836
 801210a:	bd70      	pop	{r4, r5, r6, pc}
 801210c:	200b      	movs	r0, #11
 801210e:	bd70      	pop	{r4, r5, r6, pc}
 8012110:	f640 0036 	movw	r0, #2102	; 0x836
 8012114:	4770      	bx	lr
 8012116:	bf00      	nop

08012118 <rcl_action_take_result_response>:
 8012118:	2800      	cmp	r0, #0
 801211a:	d03a      	beq.n	8012192 <rcl_action_take_result_response+0x7a>
 801211c:	b570      	push	{r4, r5, r6, lr}
 801211e:	4604      	mov	r4, r0
 8012120:	6800      	ldr	r0, [r0, #0]
 8012122:	b388      	cbz	r0, 8012188 <rcl_action_take_result_response+0x70>
 8012124:	460e      	mov	r6, r1
 8012126:	4615      	mov	r5, r2
 8012128:	f7fd fec6 	bl	800feb8 <rcl_client_is_valid>
 801212c:	b338      	cbz	r0, 801217e <rcl_action_take_result_response+0x66>
 801212e:	6820      	ldr	r0, [r4, #0]
 8012130:	3004      	adds	r0, #4
 8012132:	f7fd fec1 	bl	800feb8 <rcl_client_is_valid>
 8012136:	b310      	cbz	r0, 801217e <rcl_action_take_result_response+0x66>
 8012138:	6820      	ldr	r0, [r4, #0]
 801213a:	3008      	adds	r0, #8
 801213c:	f7fd febc 	bl	800feb8 <rcl_client_is_valid>
 8012140:	b1e8      	cbz	r0, 801217e <rcl_action_take_result_response+0x66>
 8012142:	6820      	ldr	r0, [r4, #0]
 8012144:	300c      	adds	r0, #12
 8012146:	f7fe ff63 	bl	8011010 <rcl_subscription_is_valid>
 801214a:	b1c0      	cbz	r0, 801217e <rcl_action_take_result_response+0x66>
 801214c:	6820      	ldr	r0, [r4, #0]
 801214e:	3010      	adds	r0, #16
 8012150:	f7fe ff5e 	bl	8011010 <rcl_subscription_is_valid>
 8012154:	b198      	cbz	r0, 801217e <rcl_action_take_result_response+0x66>
 8012156:	b1d5      	cbz	r5, 801218e <rcl_action_take_result_response+0x76>
 8012158:	b1ce      	cbz	r6, 801218e <rcl_action_take_result_response+0x76>
 801215a:	6820      	ldr	r0, [r4, #0]
 801215c:	462a      	mov	r2, r5
 801215e:	4631      	mov	r1, r6
 8012160:	3008      	adds	r0, #8
 8012162:	f7fd fe41 	bl	800fde8 <rcl_take_response>
 8012166:	b148      	cbz	r0, 801217c <rcl_action_take_result_response+0x64>
 8012168:	280a      	cmp	r0, #10
 801216a:	d007      	beq.n	801217c <rcl_action_take_result_response+0x64>
 801216c:	f240 12f5 	movw	r2, #501	; 0x1f5
 8012170:	f640 0337 	movw	r3, #2103	; 0x837
 8012174:	4290      	cmp	r0, r2
 8012176:	bf0c      	ite	eq
 8012178:	4618      	moveq	r0, r3
 801217a:	2001      	movne	r0, #1
 801217c:	bd70      	pop	{r4, r5, r6, pc}
 801217e:	f7fa fddb 	bl	800cd38 <rcutils_reset_error>
 8012182:	f640 0036 	movw	r0, #2102	; 0x836
 8012186:	bd70      	pop	{r4, r5, r6, pc}
 8012188:	f640 0036 	movw	r0, #2102	; 0x836
 801218c:	bd70      	pop	{r4, r5, r6, pc}
 801218e:	200b      	movs	r0, #11
 8012190:	bd70      	pop	{r4, r5, r6, pc}
 8012192:	f640 0036 	movw	r0, #2102	; 0x836
 8012196:	4770      	bx	lr

08012198 <rcl_action_take_cancel_response>:
 8012198:	2800      	cmp	r0, #0
 801219a:	d03a      	beq.n	8012212 <rcl_action_take_cancel_response+0x7a>
 801219c:	b570      	push	{r4, r5, r6, lr}
 801219e:	4604      	mov	r4, r0
 80121a0:	6800      	ldr	r0, [r0, #0]
 80121a2:	b388      	cbz	r0, 8012208 <rcl_action_take_cancel_response+0x70>
 80121a4:	460e      	mov	r6, r1
 80121a6:	4615      	mov	r5, r2
 80121a8:	f7fd fe86 	bl	800feb8 <rcl_client_is_valid>
 80121ac:	b338      	cbz	r0, 80121fe <rcl_action_take_cancel_response+0x66>
 80121ae:	6820      	ldr	r0, [r4, #0]
 80121b0:	3004      	adds	r0, #4
 80121b2:	f7fd fe81 	bl	800feb8 <rcl_client_is_valid>
 80121b6:	b310      	cbz	r0, 80121fe <rcl_action_take_cancel_response+0x66>
 80121b8:	6820      	ldr	r0, [r4, #0]
 80121ba:	3008      	adds	r0, #8
 80121bc:	f7fd fe7c 	bl	800feb8 <rcl_client_is_valid>
 80121c0:	b1e8      	cbz	r0, 80121fe <rcl_action_take_cancel_response+0x66>
 80121c2:	6820      	ldr	r0, [r4, #0]
 80121c4:	300c      	adds	r0, #12
 80121c6:	f7fe ff23 	bl	8011010 <rcl_subscription_is_valid>
 80121ca:	b1c0      	cbz	r0, 80121fe <rcl_action_take_cancel_response+0x66>
 80121cc:	6820      	ldr	r0, [r4, #0]
 80121ce:	3010      	adds	r0, #16
 80121d0:	f7fe ff1e 	bl	8011010 <rcl_subscription_is_valid>
 80121d4:	b198      	cbz	r0, 80121fe <rcl_action_take_cancel_response+0x66>
 80121d6:	b1d5      	cbz	r5, 801220e <rcl_action_take_cancel_response+0x76>
 80121d8:	b1ce      	cbz	r6, 801220e <rcl_action_take_cancel_response+0x76>
 80121da:	6820      	ldr	r0, [r4, #0]
 80121dc:	462a      	mov	r2, r5
 80121de:	4631      	mov	r1, r6
 80121e0:	3004      	adds	r0, #4
 80121e2:	f7fd fe01 	bl	800fde8 <rcl_take_response>
 80121e6:	b148      	cbz	r0, 80121fc <rcl_action_take_cancel_response+0x64>
 80121e8:	280a      	cmp	r0, #10
 80121ea:	d007      	beq.n	80121fc <rcl_action_take_cancel_response+0x64>
 80121ec:	f240 12f5 	movw	r2, #501	; 0x1f5
 80121f0:	f640 0337 	movw	r3, #2103	; 0x837
 80121f4:	4290      	cmp	r0, r2
 80121f6:	bf0c      	ite	eq
 80121f8:	4618      	moveq	r0, r3
 80121fa:	2001      	movne	r0, #1
 80121fc:	bd70      	pop	{r4, r5, r6, pc}
 80121fe:	f7fa fd9b 	bl	800cd38 <rcutils_reset_error>
 8012202:	f640 0036 	movw	r0, #2102	; 0x836
 8012206:	bd70      	pop	{r4, r5, r6, pc}
 8012208:	f640 0036 	movw	r0, #2102	; 0x836
 801220c:	bd70      	pop	{r4, r5, r6, pc}
 801220e:	200b      	movs	r0, #11
 8012210:	bd70      	pop	{r4, r5, r6, pc}
 8012212:	f640 0036 	movw	r0, #2102	; 0x836
 8012216:	4770      	bx	lr

08012218 <rcl_action_take_feedback>:
 8012218:	2800      	cmp	r0, #0
 801221a:	d038      	beq.n	801228e <rcl_action_take_feedback+0x76>
 801221c:	b530      	push	{r4, r5, lr}
 801221e:	4604      	mov	r4, r0
 8012220:	6800      	ldr	r0, [r0, #0]
 8012222:	b08f      	sub	sp, #60	; 0x3c
 8012224:	b378      	cbz	r0, 8012286 <rcl_action_take_feedback+0x6e>
 8012226:	460d      	mov	r5, r1
 8012228:	f7fd fe46 	bl	800feb8 <rcl_client_is_valid>
 801222c:	b328      	cbz	r0, 801227a <rcl_action_take_feedback+0x62>
 801222e:	6820      	ldr	r0, [r4, #0]
 8012230:	3004      	adds	r0, #4
 8012232:	f7fd fe41 	bl	800feb8 <rcl_client_is_valid>
 8012236:	b300      	cbz	r0, 801227a <rcl_action_take_feedback+0x62>
 8012238:	6820      	ldr	r0, [r4, #0]
 801223a:	3008      	adds	r0, #8
 801223c:	f7fd fe3c 	bl	800feb8 <rcl_client_is_valid>
 8012240:	b1d8      	cbz	r0, 801227a <rcl_action_take_feedback+0x62>
 8012242:	6820      	ldr	r0, [r4, #0]
 8012244:	300c      	adds	r0, #12
 8012246:	f7fe fee3 	bl	8011010 <rcl_subscription_is_valid>
 801224a:	b1b0      	cbz	r0, 801227a <rcl_action_take_feedback+0x62>
 801224c:	6820      	ldr	r0, [r4, #0]
 801224e:	3010      	adds	r0, #16
 8012250:	f7fe fede 	bl	8011010 <rcl_subscription_is_valid>
 8012254:	b188      	cbz	r0, 801227a <rcl_action_take_feedback+0x62>
 8012256:	b1ed      	cbz	r5, 8012294 <rcl_action_take_feedback+0x7c>
 8012258:	6820      	ldr	r0, [r4, #0]
 801225a:	2300      	movs	r3, #0
 801225c:	466a      	mov	r2, sp
 801225e:	4629      	mov	r1, r5
 8012260:	300c      	adds	r0, #12
 8012262:	f7fe fe79 	bl	8010f58 <rcl_take>
 8012266:	b160      	cbz	r0, 8012282 <rcl_action_take_feedback+0x6a>
 8012268:	f240 1391 	movw	r3, #401	; 0x191
 801226c:	4298      	cmp	r0, r3
 801226e:	d014      	beq.n	801229a <rcl_action_take_feedback+0x82>
 8012270:	280a      	cmp	r0, #10
 8012272:	bf18      	it	ne
 8012274:	2001      	movne	r0, #1
 8012276:	b00f      	add	sp, #60	; 0x3c
 8012278:	bd30      	pop	{r4, r5, pc}
 801227a:	f7fa fd5d 	bl	800cd38 <rcutils_reset_error>
 801227e:	f640 0036 	movw	r0, #2102	; 0x836
 8012282:	b00f      	add	sp, #60	; 0x3c
 8012284:	bd30      	pop	{r4, r5, pc}
 8012286:	f640 0036 	movw	r0, #2102	; 0x836
 801228a:	b00f      	add	sp, #60	; 0x3c
 801228c:	bd30      	pop	{r4, r5, pc}
 801228e:	f640 0036 	movw	r0, #2102	; 0x836
 8012292:	4770      	bx	lr
 8012294:	200b      	movs	r0, #11
 8012296:	b00f      	add	sp, #60	; 0x3c
 8012298:	bd30      	pop	{r4, r5, pc}
 801229a:	f640 0037 	movw	r0, #2103	; 0x837
 801229e:	e7f0      	b.n	8012282 <rcl_action_take_feedback+0x6a>

080122a0 <rcl_action_wait_set_add_action_client>:
 80122a0:	2800      	cmp	r0, #0
 80122a2:	d048      	beq.n	8012336 <rcl_action_wait_set_add_action_client+0x96>
 80122a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122a6:	460c      	mov	r4, r1
 80122a8:	2900      	cmp	r1, #0
 80122aa:	d03c      	beq.n	8012326 <rcl_action_wait_set_add_action_client+0x86>
 80122ac:	4605      	mov	r5, r0
 80122ae:	6808      	ldr	r0, [r1, #0]
 80122b0:	2800      	cmp	r0, #0
 80122b2:	d038      	beq.n	8012326 <rcl_action_wait_set_add_action_client+0x86>
 80122b4:	4617      	mov	r7, r2
 80122b6:	461e      	mov	r6, r3
 80122b8:	f7fd fdfe 	bl	800feb8 <rcl_client_is_valid>
 80122bc:	b3b0      	cbz	r0, 801232c <rcl_action_wait_set_add_action_client+0x8c>
 80122be:	6820      	ldr	r0, [r4, #0]
 80122c0:	3004      	adds	r0, #4
 80122c2:	f7fd fdf9 	bl	800feb8 <rcl_client_is_valid>
 80122c6:	b388      	cbz	r0, 801232c <rcl_action_wait_set_add_action_client+0x8c>
 80122c8:	6820      	ldr	r0, [r4, #0]
 80122ca:	3008      	adds	r0, #8
 80122cc:	f7fd fdf4 	bl	800feb8 <rcl_client_is_valid>
 80122d0:	b360      	cbz	r0, 801232c <rcl_action_wait_set_add_action_client+0x8c>
 80122d2:	6820      	ldr	r0, [r4, #0]
 80122d4:	300c      	adds	r0, #12
 80122d6:	f7fe fe9b 	bl	8011010 <rcl_subscription_is_valid>
 80122da:	b338      	cbz	r0, 801232c <rcl_action_wait_set_add_action_client+0x8c>
 80122dc:	6820      	ldr	r0, [r4, #0]
 80122de:	3010      	adds	r0, #16
 80122e0:	f7fe fe96 	bl	8011010 <rcl_subscription_is_valid>
 80122e4:	b310      	cbz	r0, 801232c <rcl_action_wait_set_add_action_client+0x8c>
 80122e6:	6821      	ldr	r1, [r4, #0]
 80122e8:	4628      	mov	r0, r5
 80122ea:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 80122ee:	f7ff fcd1 	bl	8011c94 <rcl_wait_set_add_client>
 80122f2:	b9b8      	cbnz	r0, 8012324 <rcl_action_wait_set_add_action_client+0x84>
 80122f4:	6821      	ldr	r1, [r4, #0]
 80122f6:	4628      	mov	r0, r5
 80122f8:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 80122fc:	3104      	adds	r1, #4
 80122fe:	f7ff fcc9 	bl	8011c94 <rcl_wait_set_add_client>
 8012302:	b978      	cbnz	r0, 8012324 <rcl_action_wait_set_add_action_client+0x84>
 8012304:	6821      	ldr	r1, [r4, #0]
 8012306:	4628      	mov	r0, r5
 8012308:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 801230c:	3108      	adds	r1, #8
 801230e:	f7ff fcc1 	bl	8011c94 <rcl_wait_set_add_client>
 8012312:	b938      	cbnz	r0, 8012324 <rcl_action_wait_set_add_action_client+0x84>
 8012314:	6821      	ldr	r1, [r4, #0]
 8012316:	4628      	mov	r0, r5
 8012318:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 801231c:	310c      	adds	r1, #12
 801231e:	f7ff f969 	bl	80115f4 <rcl_wait_set_add_subscription>
 8012322:	b158      	cbz	r0, 801233c <rcl_action_wait_set_add_action_client+0x9c>
 8012324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012326:	f640 0036 	movw	r0, #2102	; 0x836
 801232a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801232c:	f7fa fd04 	bl	800cd38 <rcutils_reset_error>
 8012330:	f640 0036 	movw	r0, #2102	; 0x836
 8012334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012336:	f44f 7061 	mov.w	r0, #900	; 0x384
 801233a:	4770      	bx	lr
 801233c:	6821      	ldr	r1, [r4, #0]
 801233e:	4628      	mov	r0, r5
 8012340:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 8012344:	3110      	adds	r1, #16
 8012346:	f7ff f955 	bl	80115f4 <rcl_wait_set_add_subscription>
 801234a:	2800      	cmp	r0, #0
 801234c:	d1ea      	bne.n	8012324 <rcl_action_wait_set_add_action_client+0x84>
 801234e:	b11f      	cbz	r7, 8012358 <rcl_action_wait_set_add_action_client+0xb8>
 8012350:	6823      	ldr	r3, [r4, #0]
 8012352:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8012356:	603b      	str	r3, [r7, #0]
 8012358:	2e00      	cmp	r6, #0
 801235a:	d0e3      	beq.n	8012324 <rcl_action_wait_set_add_action_client+0x84>
 801235c:	6823      	ldr	r3, [r4, #0]
 801235e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8012362:	6033      	str	r3, [r6, #0]
 8012364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012366:	bf00      	nop

08012368 <rcl_action_client_wait_set_get_entities_ready>:
 8012368:	2800      	cmp	r0, #0
 801236a:	d050      	beq.n	801240e <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801236c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012370:	460c      	mov	r4, r1
 8012372:	2900      	cmp	r1, #0
 8012374:	d03e      	beq.n	80123f4 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8012376:	4605      	mov	r5, r0
 8012378:	6808      	ldr	r0, [r1, #0]
 801237a:	2800      	cmp	r0, #0
 801237c:	d03a      	beq.n	80123f4 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801237e:	4616      	mov	r6, r2
 8012380:	461f      	mov	r7, r3
 8012382:	f7fd fd99 	bl	800feb8 <rcl_client_is_valid>
 8012386:	2800      	cmp	r0, #0
 8012388:	d038      	beq.n	80123fc <rcl_action_client_wait_set_get_entities_ready+0x94>
 801238a:	6820      	ldr	r0, [r4, #0]
 801238c:	3004      	adds	r0, #4
 801238e:	f7fd fd93 	bl	800feb8 <rcl_client_is_valid>
 8012392:	2800      	cmp	r0, #0
 8012394:	d032      	beq.n	80123fc <rcl_action_client_wait_set_get_entities_ready+0x94>
 8012396:	6820      	ldr	r0, [r4, #0]
 8012398:	3008      	adds	r0, #8
 801239a:	f7fd fd8d 	bl	800feb8 <rcl_client_is_valid>
 801239e:	b368      	cbz	r0, 80123fc <rcl_action_client_wait_set_get_entities_ready+0x94>
 80123a0:	6820      	ldr	r0, [r4, #0]
 80123a2:	300c      	adds	r0, #12
 80123a4:	f7fe fe34 	bl	8011010 <rcl_subscription_is_valid>
 80123a8:	b340      	cbz	r0, 80123fc <rcl_action_client_wait_set_get_entities_ready+0x94>
 80123aa:	6820      	ldr	r0, [r4, #0]
 80123ac:	3010      	adds	r0, #16
 80123ae:	f7fe fe2f 	bl	8011010 <rcl_subscription_is_valid>
 80123b2:	b318      	cbz	r0, 80123fc <rcl_action_client_wait_set_get_entities_ready+0x94>
 80123b4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80123b8:	2a00      	cmp	r2, #0
 80123ba:	bf18      	it	ne
 80123bc:	2b00      	cmpne	r3, #0
 80123be:	9b08      	ldr	r3, [sp, #32]
 80123c0:	bf0c      	ite	eq
 80123c2:	2101      	moveq	r1, #1
 80123c4:	2100      	movne	r1, #0
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	bf08      	it	eq
 80123ca:	f041 0101 	orreq.w	r1, r1, #1
 80123ce:	2f00      	cmp	r7, #0
 80123d0:	bf08      	it	eq
 80123d2:	f041 0101 	orreq.w	r1, r1, #1
 80123d6:	b9b9      	cbnz	r1, 8012408 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 80123d8:	b1b6      	cbz	r6, 8012408 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 80123da:	6823      	ldr	r3, [r4, #0]
 80123dc:	686c      	ldr	r4, [r5, #4]
 80123de:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 80123e2:	428a      	cmp	r2, r1
 80123e4:	4610      	mov	r0, r2
 80123e6:	bf38      	it	cc
 80123e8:	4608      	movcc	r0, r1
 80123ea:	4284      	cmp	r4, r0
 80123ec:	d812      	bhi.n	8012414 <rcl_action_client_wait_set_get_entities_ready+0xac>
 80123ee:	2001      	movs	r0, #1
 80123f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123f4:	f640 0036 	movw	r0, #2102	; 0x836
 80123f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123fc:	f7fa fc9c 	bl	800cd38 <rcutils_reset_error>
 8012400:	f640 0036 	movw	r0, #2102	; 0x836
 8012404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012408:	200b      	movs	r0, #11
 801240a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801240e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012412:	4770      	bx	lr
 8012414:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 8012418:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 801241c:	45f0      	cmp	r8, lr
 801241e:	4640      	mov	r0, r8
 8012420:	69ec      	ldr	r4, [r5, #28]
 8012422:	bf38      	it	cc
 8012424:	4670      	movcc	r0, lr
 8012426:	4560      	cmp	r0, ip
 8012428:	bf38      	it	cc
 801242a:	4660      	movcc	r0, ip
 801242c:	4284      	cmp	r4, r0
 801242e:	d9de      	bls.n	80123ee <rcl_action_client_wait_set_get_entities_ready+0x86>
 8012430:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8012434:	682d      	ldr	r5, [r5, #0]
 8012436:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801243a:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801243e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8012442:	1a18      	subs	r0, r3, r0
 8012444:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8012448:	f103 0c0c 	add.w	ip, r3, #12
 801244c:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 8012450:	fab0 f080 	clz	r0, r0
 8012454:	eba5 050c 	sub.w	r5, r5, ip
 8012458:	0940      	lsrs	r0, r0, #5
 801245a:	fab5 f585 	clz	r5, r5
 801245e:	096d      	lsrs	r5, r5, #5
 8012460:	7035      	strb	r5, [r6, #0]
 8012462:	f103 0510 	add.w	r5, r3, #16
 8012466:	1b64      	subs	r4, r4, r5
 8012468:	9d08      	ldr	r5, [sp, #32]
 801246a:	fab4 f484 	clz	r4, r4
 801246e:	0964      	lsrs	r4, r4, #5
 8012470:	703c      	strb	r4, [r7, #0]
 8012472:	1d1c      	adds	r4, r3, #4
 8012474:	3308      	adds	r3, #8
 8012476:	7028      	strb	r0, [r5, #0]
 8012478:	1b09      	subs	r1, r1, r4
 801247a:	2000      	movs	r0, #0
 801247c:	1ad3      	subs	r3, r2, r3
 801247e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012480:	fab1 f181 	clz	r1, r1
 8012484:	fab3 f383 	clz	r3, r3
 8012488:	0949      	lsrs	r1, r1, #5
 801248a:	095b      	lsrs	r3, r3, #5
 801248c:	7011      	strb	r1, [r2, #0]
 801248e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012490:	7013      	strb	r3, [r2, #0]
 8012492:	e7b1      	b.n	80123f8 <rcl_action_client_wait_set_get_entities_ready+0x90>

08012494 <rcl_action_take_goal_request>:
 8012494:	2800      	cmp	r0, #0
 8012496:	d039      	beq.n	801250c <rcl_action_take_goal_request+0x78>
 8012498:	b570      	push	{r4, r5, r6, lr}
 801249a:	4604      	mov	r4, r0
 801249c:	6800      	ldr	r0, [r0, #0]
 801249e:	b380      	cbz	r0, 8012502 <rcl_action_take_goal_request+0x6e>
 80124a0:	460e      	mov	r6, r1
 80124a2:	4615      	mov	r5, r2
 80124a4:	f7fe fcb0 	bl	8010e08 <rcl_service_is_valid>
 80124a8:	b330      	cbz	r0, 80124f8 <rcl_action_take_goal_request+0x64>
 80124aa:	6820      	ldr	r0, [r4, #0]
 80124ac:	3004      	adds	r0, #4
 80124ae:	f7fe fcab 	bl	8010e08 <rcl_service_is_valid>
 80124b2:	b308      	cbz	r0, 80124f8 <rcl_action_take_goal_request+0x64>
 80124b4:	6820      	ldr	r0, [r4, #0]
 80124b6:	3008      	adds	r0, #8
 80124b8:	f7fe fca6 	bl	8010e08 <rcl_service_is_valid>
 80124bc:	b1e0      	cbz	r0, 80124f8 <rcl_action_take_goal_request+0x64>
 80124be:	6820      	ldr	r0, [r4, #0]
 80124c0:	300c      	adds	r0, #12
 80124c2:	f006 fa1f 	bl	8018904 <rcl_publisher_is_valid>
 80124c6:	b1b8      	cbz	r0, 80124f8 <rcl_action_take_goal_request+0x64>
 80124c8:	6820      	ldr	r0, [r4, #0]
 80124ca:	3010      	adds	r0, #16
 80124cc:	f006 fa1a 	bl	8018904 <rcl_publisher_is_valid>
 80124d0:	b190      	cbz	r0, 80124f8 <rcl_action_take_goal_request+0x64>
 80124d2:	b1cd      	cbz	r5, 8012508 <rcl_action_take_goal_request+0x74>
 80124d4:	b1c6      	cbz	r6, 8012508 <rcl_action_take_goal_request+0x74>
 80124d6:	462a      	mov	r2, r5
 80124d8:	4631      	mov	r1, r6
 80124da:	6820      	ldr	r0, [r4, #0]
 80124dc:	f7fe fc14 	bl	8010d08 <rcl_take_request>
 80124e0:	b148      	cbz	r0, 80124f6 <rcl_action_take_goal_request+0x62>
 80124e2:	280a      	cmp	r0, #10
 80124e4:	d007      	beq.n	80124f6 <rcl_action_take_goal_request+0x62>
 80124e6:	f240 2259 	movw	r2, #601	; 0x259
 80124ea:	f640 0399 	movw	r3, #2201	; 0x899
 80124ee:	4290      	cmp	r0, r2
 80124f0:	bf0c      	ite	eq
 80124f2:	4618      	moveq	r0, r3
 80124f4:	2001      	movne	r0, #1
 80124f6:	bd70      	pop	{r4, r5, r6, pc}
 80124f8:	f7fa fc1e 	bl	800cd38 <rcutils_reset_error>
 80124fc:	f640 0098 	movw	r0, #2200	; 0x898
 8012500:	bd70      	pop	{r4, r5, r6, pc}
 8012502:	f640 0098 	movw	r0, #2200	; 0x898
 8012506:	bd70      	pop	{r4, r5, r6, pc}
 8012508:	200b      	movs	r0, #11
 801250a:	bd70      	pop	{r4, r5, r6, pc}
 801250c:	f640 0098 	movw	r0, #2200	; 0x898
 8012510:	4770      	bx	lr
 8012512:	bf00      	nop

08012514 <rcl_action_send_goal_response>:
 8012514:	b388      	cbz	r0, 801257a <rcl_action_send_goal_response+0x66>
 8012516:	b570      	push	{r4, r5, r6, lr}
 8012518:	4604      	mov	r4, r0
 801251a:	6800      	ldr	r0, [r0, #0]
 801251c:	b340      	cbz	r0, 8012570 <rcl_action_send_goal_response+0x5c>
 801251e:	460e      	mov	r6, r1
 8012520:	4615      	mov	r5, r2
 8012522:	f7fe fc71 	bl	8010e08 <rcl_service_is_valid>
 8012526:	b1f0      	cbz	r0, 8012566 <rcl_action_send_goal_response+0x52>
 8012528:	6820      	ldr	r0, [r4, #0]
 801252a:	3004      	adds	r0, #4
 801252c:	f7fe fc6c 	bl	8010e08 <rcl_service_is_valid>
 8012530:	b1c8      	cbz	r0, 8012566 <rcl_action_send_goal_response+0x52>
 8012532:	6820      	ldr	r0, [r4, #0]
 8012534:	3008      	adds	r0, #8
 8012536:	f7fe fc67 	bl	8010e08 <rcl_service_is_valid>
 801253a:	b1a0      	cbz	r0, 8012566 <rcl_action_send_goal_response+0x52>
 801253c:	6820      	ldr	r0, [r4, #0]
 801253e:	300c      	adds	r0, #12
 8012540:	f006 f9e0 	bl	8018904 <rcl_publisher_is_valid>
 8012544:	b178      	cbz	r0, 8012566 <rcl_action_send_goal_response+0x52>
 8012546:	6820      	ldr	r0, [r4, #0]
 8012548:	3010      	adds	r0, #16
 801254a:	f006 f9db 	bl	8018904 <rcl_publisher_is_valid>
 801254e:	b150      	cbz	r0, 8012566 <rcl_action_send_goal_response+0x52>
 8012550:	b18d      	cbz	r5, 8012576 <rcl_action_send_goal_response+0x62>
 8012552:	b186      	cbz	r6, 8012576 <rcl_action_send_goal_response+0x62>
 8012554:	462a      	mov	r2, r5
 8012556:	4631      	mov	r1, r6
 8012558:	6820      	ldr	r0, [r4, #0]
 801255a:	f7fe fc25 	bl	8010da8 <rcl_send_response>
 801255e:	3800      	subs	r0, #0
 8012560:	bf18      	it	ne
 8012562:	2001      	movne	r0, #1
 8012564:	bd70      	pop	{r4, r5, r6, pc}
 8012566:	f7fa fbe7 	bl	800cd38 <rcutils_reset_error>
 801256a:	f640 0098 	movw	r0, #2200	; 0x898
 801256e:	bd70      	pop	{r4, r5, r6, pc}
 8012570:	f640 0098 	movw	r0, #2200	; 0x898
 8012574:	bd70      	pop	{r4, r5, r6, pc}
 8012576:	200b      	movs	r0, #11
 8012578:	bd70      	pop	{r4, r5, r6, pc}
 801257a:	f640 0098 	movw	r0, #2200	; 0x898
 801257e:	4770      	bx	lr

08012580 <rcl_action_take_result_request>:
 8012580:	2800      	cmp	r0, #0
 8012582:	d03a      	beq.n	80125fa <rcl_action_take_result_request+0x7a>
 8012584:	b570      	push	{r4, r5, r6, lr}
 8012586:	4604      	mov	r4, r0
 8012588:	6800      	ldr	r0, [r0, #0]
 801258a:	b388      	cbz	r0, 80125f0 <rcl_action_take_result_request+0x70>
 801258c:	460e      	mov	r6, r1
 801258e:	4615      	mov	r5, r2
 8012590:	f7fe fc3a 	bl	8010e08 <rcl_service_is_valid>
 8012594:	b338      	cbz	r0, 80125e6 <rcl_action_take_result_request+0x66>
 8012596:	6820      	ldr	r0, [r4, #0]
 8012598:	3004      	adds	r0, #4
 801259a:	f7fe fc35 	bl	8010e08 <rcl_service_is_valid>
 801259e:	b310      	cbz	r0, 80125e6 <rcl_action_take_result_request+0x66>
 80125a0:	6820      	ldr	r0, [r4, #0]
 80125a2:	3008      	adds	r0, #8
 80125a4:	f7fe fc30 	bl	8010e08 <rcl_service_is_valid>
 80125a8:	b1e8      	cbz	r0, 80125e6 <rcl_action_take_result_request+0x66>
 80125aa:	6820      	ldr	r0, [r4, #0]
 80125ac:	300c      	adds	r0, #12
 80125ae:	f006 f9a9 	bl	8018904 <rcl_publisher_is_valid>
 80125b2:	b1c0      	cbz	r0, 80125e6 <rcl_action_take_result_request+0x66>
 80125b4:	6820      	ldr	r0, [r4, #0]
 80125b6:	3010      	adds	r0, #16
 80125b8:	f006 f9a4 	bl	8018904 <rcl_publisher_is_valid>
 80125bc:	b198      	cbz	r0, 80125e6 <rcl_action_take_result_request+0x66>
 80125be:	b1d5      	cbz	r5, 80125f6 <rcl_action_take_result_request+0x76>
 80125c0:	b1ce      	cbz	r6, 80125f6 <rcl_action_take_result_request+0x76>
 80125c2:	6820      	ldr	r0, [r4, #0]
 80125c4:	462a      	mov	r2, r5
 80125c6:	4631      	mov	r1, r6
 80125c8:	3008      	adds	r0, #8
 80125ca:	f7fe fb9d 	bl	8010d08 <rcl_take_request>
 80125ce:	b148      	cbz	r0, 80125e4 <rcl_action_take_result_request+0x64>
 80125d0:	280a      	cmp	r0, #10
 80125d2:	d007      	beq.n	80125e4 <rcl_action_take_result_request+0x64>
 80125d4:	f240 2259 	movw	r2, #601	; 0x259
 80125d8:	f640 0399 	movw	r3, #2201	; 0x899
 80125dc:	4290      	cmp	r0, r2
 80125de:	bf0c      	ite	eq
 80125e0:	4618      	moveq	r0, r3
 80125e2:	2001      	movne	r0, #1
 80125e4:	bd70      	pop	{r4, r5, r6, pc}
 80125e6:	f7fa fba7 	bl	800cd38 <rcutils_reset_error>
 80125ea:	f640 0098 	movw	r0, #2200	; 0x898
 80125ee:	bd70      	pop	{r4, r5, r6, pc}
 80125f0:	f640 0098 	movw	r0, #2200	; 0x898
 80125f4:	bd70      	pop	{r4, r5, r6, pc}
 80125f6:	200b      	movs	r0, #11
 80125f8:	bd70      	pop	{r4, r5, r6, pc}
 80125fa:	f640 0098 	movw	r0, #2200	; 0x898
 80125fe:	4770      	bx	lr

08012600 <rcl_action_take_cancel_request>:
 8012600:	2800      	cmp	r0, #0
 8012602:	d03a      	beq.n	801267a <rcl_action_take_cancel_request+0x7a>
 8012604:	b570      	push	{r4, r5, r6, lr}
 8012606:	4604      	mov	r4, r0
 8012608:	6800      	ldr	r0, [r0, #0]
 801260a:	b388      	cbz	r0, 8012670 <rcl_action_take_cancel_request+0x70>
 801260c:	460e      	mov	r6, r1
 801260e:	4615      	mov	r5, r2
 8012610:	f7fe fbfa 	bl	8010e08 <rcl_service_is_valid>
 8012614:	b338      	cbz	r0, 8012666 <rcl_action_take_cancel_request+0x66>
 8012616:	6820      	ldr	r0, [r4, #0]
 8012618:	3004      	adds	r0, #4
 801261a:	f7fe fbf5 	bl	8010e08 <rcl_service_is_valid>
 801261e:	b310      	cbz	r0, 8012666 <rcl_action_take_cancel_request+0x66>
 8012620:	6820      	ldr	r0, [r4, #0]
 8012622:	3008      	adds	r0, #8
 8012624:	f7fe fbf0 	bl	8010e08 <rcl_service_is_valid>
 8012628:	b1e8      	cbz	r0, 8012666 <rcl_action_take_cancel_request+0x66>
 801262a:	6820      	ldr	r0, [r4, #0]
 801262c:	300c      	adds	r0, #12
 801262e:	f006 f969 	bl	8018904 <rcl_publisher_is_valid>
 8012632:	b1c0      	cbz	r0, 8012666 <rcl_action_take_cancel_request+0x66>
 8012634:	6820      	ldr	r0, [r4, #0]
 8012636:	3010      	adds	r0, #16
 8012638:	f006 f964 	bl	8018904 <rcl_publisher_is_valid>
 801263c:	b198      	cbz	r0, 8012666 <rcl_action_take_cancel_request+0x66>
 801263e:	b1d5      	cbz	r5, 8012676 <rcl_action_take_cancel_request+0x76>
 8012640:	b1ce      	cbz	r6, 8012676 <rcl_action_take_cancel_request+0x76>
 8012642:	6820      	ldr	r0, [r4, #0]
 8012644:	462a      	mov	r2, r5
 8012646:	4631      	mov	r1, r6
 8012648:	3004      	adds	r0, #4
 801264a:	f7fe fb5d 	bl	8010d08 <rcl_take_request>
 801264e:	b148      	cbz	r0, 8012664 <rcl_action_take_cancel_request+0x64>
 8012650:	280a      	cmp	r0, #10
 8012652:	d007      	beq.n	8012664 <rcl_action_take_cancel_request+0x64>
 8012654:	f240 2259 	movw	r2, #601	; 0x259
 8012658:	f640 0399 	movw	r3, #2201	; 0x899
 801265c:	4290      	cmp	r0, r2
 801265e:	bf0c      	ite	eq
 8012660:	4618      	moveq	r0, r3
 8012662:	2001      	movne	r0, #1
 8012664:	bd70      	pop	{r4, r5, r6, pc}
 8012666:	f7fa fb67 	bl	800cd38 <rcutils_reset_error>
 801266a:	f640 0098 	movw	r0, #2200	; 0x898
 801266e:	bd70      	pop	{r4, r5, r6, pc}
 8012670:	f640 0098 	movw	r0, #2200	; 0x898
 8012674:	bd70      	pop	{r4, r5, r6, pc}
 8012676:	200b      	movs	r0, #11
 8012678:	bd70      	pop	{r4, r5, r6, pc}
 801267a:	f640 0098 	movw	r0, #2200	; 0x898
 801267e:	4770      	bx	lr

08012680 <rcl_action_send_cancel_response>:
 8012680:	b390      	cbz	r0, 80126e8 <rcl_action_send_cancel_response+0x68>
 8012682:	b570      	push	{r4, r5, r6, lr}
 8012684:	4604      	mov	r4, r0
 8012686:	6800      	ldr	r0, [r0, #0]
 8012688:	b348      	cbz	r0, 80126de <rcl_action_send_cancel_response+0x5e>
 801268a:	460e      	mov	r6, r1
 801268c:	4615      	mov	r5, r2
 801268e:	f7fe fbbb 	bl	8010e08 <rcl_service_is_valid>
 8012692:	b1f8      	cbz	r0, 80126d4 <rcl_action_send_cancel_response+0x54>
 8012694:	6820      	ldr	r0, [r4, #0]
 8012696:	3004      	adds	r0, #4
 8012698:	f7fe fbb6 	bl	8010e08 <rcl_service_is_valid>
 801269c:	b1d0      	cbz	r0, 80126d4 <rcl_action_send_cancel_response+0x54>
 801269e:	6820      	ldr	r0, [r4, #0]
 80126a0:	3008      	adds	r0, #8
 80126a2:	f7fe fbb1 	bl	8010e08 <rcl_service_is_valid>
 80126a6:	b1a8      	cbz	r0, 80126d4 <rcl_action_send_cancel_response+0x54>
 80126a8:	6820      	ldr	r0, [r4, #0]
 80126aa:	300c      	adds	r0, #12
 80126ac:	f006 f92a 	bl	8018904 <rcl_publisher_is_valid>
 80126b0:	b180      	cbz	r0, 80126d4 <rcl_action_send_cancel_response+0x54>
 80126b2:	6820      	ldr	r0, [r4, #0]
 80126b4:	3010      	adds	r0, #16
 80126b6:	f006 f925 	bl	8018904 <rcl_publisher_is_valid>
 80126ba:	b158      	cbz	r0, 80126d4 <rcl_action_send_cancel_response+0x54>
 80126bc:	b195      	cbz	r5, 80126e4 <rcl_action_send_cancel_response+0x64>
 80126be:	b18e      	cbz	r6, 80126e4 <rcl_action_send_cancel_response+0x64>
 80126c0:	6820      	ldr	r0, [r4, #0]
 80126c2:	462a      	mov	r2, r5
 80126c4:	4631      	mov	r1, r6
 80126c6:	3004      	adds	r0, #4
 80126c8:	f7fe fb6e 	bl	8010da8 <rcl_send_response>
 80126cc:	3800      	subs	r0, #0
 80126ce:	bf18      	it	ne
 80126d0:	2001      	movne	r0, #1
 80126d2:	bd70      	pop	{r4, r5, r6, pc}
 80126d4:	f7fa fb30 	bl	800cd38 <rcutils_reset_error>
 80126d8:	f640 0098 	movw	r0, #2200	; 0x898
 80126dc:	bd70      	pop	{r4, r5, r6, pc}
 80126de:	f640 0098 	movw	r0, #2200	; 0x898
 80126e2:	bd70      	pop	{r4, r5, r6, pc}
 80126e4:	200b      	movs	r0, #11
 80126e6:	bd70      	pop	{r4, r5, r6, pc}
 80126e8:	f640 0098 	movw	r0, #2200	; 0x898
 80126ec:	4770      	bx	lr
 80126ee:	bf00      	nop

080126f0 <rcl_action_wait_set_add_action_server>:
 80126f0:	2800      	cmp	r0, #0
 80126f2:	d04d      	beq.n	8012790 <rcl_action_wait_set_add_action_server+0xa0>
 80126f4:	b570      	push	{r4, r5, r6, lr}
 80126f6:	460c      	mov	r4, r1
 80126f8:	b159      	cbz	r1, 8012712 <rcl_action_wait_set_add_action_server+0x22>
 80126fa:	4605      	mov	r5, r0
 80126fc:	6808      	ldr	r0, [r1, #0]
 80126fe:	b140      	cbz	r0, 8012712 <rcl_action_wait_set_add_action_server+0x22>
 8012700:	4616      	mov	r6, r2
 8012702:	f7fe fb81 	bl	8010e08 <rcl_service_is_valid>
 8012706:	b120      	cbz	r0, 8012712 <rcl_action_wait_set_add_action_server+0x22>
 8012708:	6820      	ldr	r0, [r4, #0]
 801270a:	3004      	adds	r0, #4
 801270c:	f7fe fb7c 	bl	8010e08 <rcl_service_is_valid>
 8012710:	b910      	cbnz	r0, 8012718 <rcl_action_wait_set_add_action_server+0x28>
 8012712:	f640 0098 	movw	r0, #2200	; 0x898
 8012716:	bd70      	pop	{r4, r5, r6, pc}
 8012718:	6820      	ldr	r0, [r4, #0]
 801271a:	3008      	adds	r0, #8
 801271c:	f7fe fb74 	bl	8010e08 <rcl_service_is_valid>
 8012720:	2800      	cmp	r0, #0
 8012722:	d0f6      	beq.n	8012712 <rcl_action_wait_set_add_action_server+0x22>
 8012724:	6820      	ldr	r0, [r4, #0]
 8012726:	300c      	adds	r0, #12
 8012728:	f006 f904 	bl	8018934 <rcl_publisher_is_valid_except_context>
 801272c:	2800      	cmp	r0, #0
 801272e:	d0f0      	beq.n	8012712 <rcl_action_wait_set_add_action_server+0x22>
 8012730:	6820      	ldr	r0, [r4, #0]
 8012732:	3010      	adds	r0, #16
 8012734:	f006 f8fe 	bl	8018934 <rcl_publisher_is_valid_except_context>
 8012738:	2800      	cmp	r0, #0
 801273a:	d0ea      	beq.n	8012712 <rcl_action_wait_set_add_action_server+0x22>
 801273c:	6821      	ldr	r1, [r4, #0]
 801273e:	4628      	mov	r0, r5
 8012740:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 8012744:	f7ff fad2 	bl	8011cec <rcl_wait_set_add_service>
 8012748:	2800      	cmp	r0, #0
 801274a:	d1e4      	bne.n	8012716 <rcl_action_wait_set_add_action_server+0x26>
 801274c:	6821      	ldr	r1, [r4, #0]
 801274e:	4628      	mov	r0, r5
 8012750:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 8012754:	3104      	adds	r1, #4
 8012756:	f7ff fac9 	bl	8011cec <rcl_wait_set_add_service>
 801275a:	2800      	cmp	r0, #0
 801275c:	d1db      	bne.n	8012716 <rcl_action_wait_set_add_action_server+0x26>
 801275e:	6821      	ldr	r1, [r4, #0]
 8012760:	4628      	mov	r0, r5
 8012762:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 8012766:	3108      	adds	r1, #8
 8012768:	f7ff fac0 	bl	8011cec <rcl_wait_set_add_service>
 801276c:	2800      	cmp	r0, #0
 801276e:	d1d2      	bne.n	8012716 <rcl_action_wait_set_add_action_server+0x26>
 8012770:	6821      	ldr	r1, [r4, #0]
 8012772:	4628      	mov	r0, r5
 8012774:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 8012778:	3114      	adds	r1, #20
 801277a:	f7ff fa5b 	bl	8011c34 <rcl_wait_set_add_timer>
 801277e:	2800      	cmp	r0, #0
 8012780:	d1c9      	bne.n	8012716 <rcl_action_wait_set_add_action_server+0x26>
 8012782:	2e00      	cmp	r6, #0
 8012784:	d0c7      	beq.n	8012716 <rcl_action_wait_set_add_action_server+0x26>
 8012786:	6823      	ldr	r3, [r4, #0]
 8012788:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801278c:	6033      	str	r3, [r6, #0]
 801278e:	bd70      	pop	{r4, r5, r6, pc}
 8012790:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012794:	4770      	bx	lr
 8012796:	bf00      	nop

08012798 <rcl_action_server_wait_set_get_entities_ready>:
 8012798:	2800      	cmp	r0, #0
 801279a:	d067      	beq.n	801286c <rcl_action_server_wait_set_get_entities_ready+0xd4>
 801279c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127a0:	460c      	mov	r4, r1
 80127a2:	b161      	cbz	r1, 80127be <rcl_action_server_wait_set_get_entities_ready+0x26>
 80127a4:	4605      	mov	r5, r0
 80127a6:	6808      	ldr	r0, [r1, #0]
 80127a8:	b148      	cbz	r0, 80127be <rcl_action_server_wait_set_get_entities_ready+0x26>
 80127aa:	4616      	mov	r6, r2
 80127ac:	4698      	mov	r8, r3
 80127ae:	f7fe fb2b 	bl	8010e08 <rcl_service_is_valid>
 80127b2:	b120      	cbz	r0, 80127be <rcl_action_server_wait_set_get_entities_ready+0x26>
 80127b4:	6820      	ldr	r0, [r4, #0]
 80127b6:	3004      	adds	r0, #4
 80127b8:	f7fe fb26 	bl	8010e08 <rcl_service_is_valid>
 80127bc:	b918      	cbnz	r0, 80127c6 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 80127be:	f640 0098 	movw	r0, #2200	; 0x898
 80127c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127c6:	6820      	ldr	r0, [r4, #0]
 80127c8:	3008      	adds	r0, #8
 80127ca:	f7fe fb1d 	bl	8010e08 <rcl_service_is_valid>
 80127ce:	2800      	cmp	r0, #0
 80127d0:	d0f5      	beq.n	80127be <rcl_action_server_wait_set_get_entities_ready+0x26>
 80127d2:	6820      	ldr	r0, [r4, #0]
 80127d4:	300c      	adds	r0, #12
 80127d6:	f006 f8ad 	bl	8018934 <rcl_publisher_is_valid_except_context>
 80127da:	2800      	cmp	r0, #0
 80127dc:	d0ef      	beq.n	80127be <rcl_action_server_wait_set_get_entities_ready+0x26>
 80127de:	6820      	ldr	r0, [r4, #0]
 80127e0:	3010      	adds	r0, #16
 80127e2:	f006 f8a7 	bl	8018934 <rcl_publisher_is_valid_except_context>
 80127e6:	2800      	cmp	r0, #0
 80127e8:	d0e9      	beq.n	80127be <rcl_action_server_wait_set_get_entities_ready+0x26>
 80127ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80127ee:	2a00      	cmp	r2, #0
 80127f0:	bf18      	it	ne
 80127f2:	2b00      	cmpne	r3, #0
 80127f4:	bf0c      	ite	eq
 80127f6:	2101      	moveq	r1, #1
 80127f8:	2100      	movne	r1, #0
 80127fa:	f1b8 0f00 	cmp.w	r8, #0
 80127fe:	bf08      	it	eq
 8012800:	f041 0101 	orreq.w	r1, r1, #1
 8012804:	bba9      	cbnz	r1, 8012872 <rcl_action_server_wait_set_get_entities_ready+0xda>
 8012806:	b3a6      	cbz	r6, 8012872 <rcl_action_server_wait_set_get_entities_ready+0xda>
 8012808:	6821      	ldr	r1, [r4, #0]
 801280a:	2000      	movs	r0, #0
 801280c:	692c      	ldr	r4, [r5, #16]
 801280e:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 8012812:	6a2f      	ldr	r7, [r5, #32]
 8012814:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012818:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 801281c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 8012820:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 8012824:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 8012828:	1a64      	subs	r4, r4, r1
 801282a:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 801282e:	fab4 f484 	clz	r4, r4
 8012832:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8012836:	0964      	lsrs	r4, r4, #5
 8012838:	7034      	strb	r4, [r6, #0]
 801283a:	1d0c      	adds	r4, r1, #4
 801283c:	1b2c      	subs	r4, r5, r4
 801283e:	fab4 f484 	clz	r4, r4
 8012842:	0964      	lsrs	r4, r4, #5
 8012844:	f888 4000 	strb.w	r4, [r8]
 8012848:	f101 0408 	add.w	r4, r1, #8
 801284c:	1b1b      	subs	r3, r3, r4
 801284e:	9c06      	ldr	r4, [sp, #24]
 8012850:	fab3 f383 	clz	r3, r3
 8012854:	095b      	lsrs	r3, r3, #5
 8012856:	7023      	strb	r3, [r4, #0]
 8012858:	f101 0314 	add.w	r3, r1, #20
 801285c:	1ad3      	subs	r3, r2, r3
 801285e:	9a07      	ldr	r2, [sp, #28]
 8012860:	fab3 f383 	clz	r3, r3
 8012864:	095b      	lsrs	r3, r3, #5
 8012866:	7013      	strb	r3, [r2, #0]
 8012868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801286c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8012870:	4770      	bx	lr
 8012872:	200b      	movs	r0, #11
 8012874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012878 <_execute_event_handler>:
 8012878:	2002      	movs	r0, #2
 801287a:	4770      	bx	lr

0801287c <_cancel_goal_event_handler>:
 801287c:	2003      	movs	r0, #3
 801287e:	4770      	bx	lr

08012880 <_succeed_event_handler>:
 8012880:	2004      	movs	r0, #4
 8012882:	4770      	bx	lr

08012884 <_abort_event_handler>:
 8012884:	2006      	movs	r0, #6
 8012886:	4770      	bx	lr

08012888 <_canceled_event_handler>:
 8012888:	2005      	movs	r0, #5
 801288a:	4770      	bx	lr

0801288c <rcl_action_transition_goal_state>:
 801288c:	b2c2      	uxtb	r2, r0
 801288e:	2a06      	cmp	r2, #6
 8012890:	d810      	bhi.n	80128b4 <rcl_action_transition_goal_state+0x28>
 8012892:	2904      	cmp	r1, #4
 8012894:	d80e      	bhi.n	80128b4 <rcl_action_transition_goal_state+0x28>
 8012896:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801289a:	b410      	push	{r4}
 801289c:	1853      	adds	r3, r2, r1
 801289e:	4c06      	ldr	r4, [pc, #24]	; (80128b8 <rcl_action_transition_goal_state+0x2c>)
 80128a0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80128a4:	b113      	cbz	r3, 80128ac <rcl_action_transition_goal_state+0x20>
 80128a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80128aa:	4718      	bx	r3
 80128ac:	2000      	movs	r0, #0
 80128ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80128b2:	4770      	bx	lr
 80128b4:	2000      	movs	r0, #0
 80128b6:	4770      	bx	lr
 80128b8:	0801c644 	.word	0x0801c644

080128bc <rcl_action_get_zero_initialized_cancel_response>:
 80128bc:	b510      	push	{r4, lr}
 80128be:	4c07      	ldr	r4, [pc, #28]	; (80128dc <rcl_action_get_zero_initialized_cancel_response+0x20>)
 80128c0:	4686      	mov	lr, r0
 80128c2:	4684      	mov	ip, r0
 80128c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80128c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80128ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80128cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80128d0:	6823      	ldr	r3, [r4, #0]
 80128d2:	4670      	mov	r0, lr
 80128d4:	f8cc 3000 	str.w	r3, [ip]
 80128d8:	bd10      	pop	{r4, pc}
 80128da:	bf00      	nop
 80128dc:	0801c6d0 	.word	0x0801c6d0

080128e0 <rclc_action_send_result_request>:
 80128e0:	b1d0      	cbz	r0, 8012918 <rclc_action_send_result_request+0x38>
 80128e2:	4684      	mov	ip, r0
 80128e4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80128e8:	b500      	push	{lr}
 80128ea:	b087      	sub	sp, #28
 80128ec:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80128f0:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80128f4:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80128f8:	f10d 0e08 	add.w	lr, sp, #8
 80128fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012900:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8012904:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 8012908:	a902      	add	r1, sp, #8
 801290a:	3010      	adds	r0, #16
 801290c:	f7ff fbcc 	bl	80120a8 <rcl_action_send_result_request>
 8012910:	b920      	cbnz	r0, 801291c <rclc_action_send_result_request+0x3c>
 8012912:	b007      	add	sp, #28
 8012914:	f85d fb04 	ldr.w	pc, [sp], #4
 8012918:	200b      	movs	r0, #11
 801291a:	4770      	bx	lr
 801291c:	9001      	str	r0, [sp, #4]
 801291e:	f7fa fa0b 	bl	800cd38 <rcutils_reset_error>
 8012922:	9801      	ldr	r0, [sp, #4]
 8012924:	b007      	add	sp, #28
 8012926:	f85d fb04 	ldr.w	pc, [sp], #4
 801292a:	bf00      	nop

0801292c <rclc_action_take_goal_handle>:
 801292c:	b160      	cbz	r0, 8012948 <rclc_action_take_goal_handle+0x1c>
 801292e:	6883      	ldr	r3, [r0, #8]
 8012930:	b143      	cbz	r3, 8012944 <rclc_action_take_goal_handle+0x18>
 8012932:	6819      	ldr	r1, [r3, #0]
 8012934:	2200      	movs	r2, #0
 8012936:	6081      	str	r1, [r0, #8]
 8012938:	721a      	strb	r2, [r3, #8]
 801293a:	68c1      	ldr	r1, [r0, #12]
 801293c:	621a      	str	r2, [r3, #32]
 801293e:	849a      	strh	r2, [r3, #36]	; 0x24
 8012940:	6019      	str	r1, [r3, #0]
 8012942:	60c3      	str	r3, [r0, #12]
 8012944:	4618      	mov	r0, r3
 8012946:	4770      	bx	lr
 8012948:	4603      	mov	r3, r0
 801294a:	e7fb      	b.n	8012944 <rclc_action_take_goal_handle+0x18>

0801294c <rclc_action_remove_used_goal_handle>:
 801294c:	b180      	cbz	r0, 8012970 <rclc_action_remove_used_goal_handle+0x24>
 801294e:	b179      	cbz	r1, 8012970 <rclc_action_remove_used_goal_handle+0x24>
 8012950:	68c3      	ldr	r3, [r0, #12]
 8012952:	4299      	cmp	r1, r3
 8012954:	d00d      	beq.n	8012972 <rclc_action_remove_used_goal_handle+0x26>
 8012956:	b12b      	cbz	r3, 8012964 <rclc_action_remove_used_goal_handle+0x18>
 8012958:	681a      	ldr	r2, [r3, #0]
 801295a:	4291      	cmp	r1, r2
 801295c:	d003      	beq.n	8012966 <rclc_action_remove_used_goal_handle+0x1a>
 801295e:	4613      	mov	r3, r2
 8012960:	2b00      	cmp	r3, #0
 8012962:	d1f9      	bne.n	8012958 <rclc_action_remove_used_goal_handle+0xc>
 8012964:	4770      	bx	lr
 8012966:	680a      	ldr	r2, [r1, #0]
 8012968:	601a      	str	r2, [r3, #0]
 801296a:	6883      	ldr	r3, [r0, #8]
 801296c:	600b      	str	r3, [r1, #0]
 801296e:	6081      	str	r1, [r0, #8]
 8012970:	4770      	bx	lr
 8012972:	680b      	ldr	r3, [r1, #0]
 8012974:	60c3      	str	r3, [r0, #12]
 8012976:	e7f8      	b.n	801296a <rclc_action_remove_used_goal_handle+0x1e>

08012978 <rclc_action_find_goal_handle_by_uuid>:
 8012978:	b538      	push	{r3, r4, r5, lr}
 801297a:	b181      	cbz	r1, 801299e <rclc_action_find_goal_handle_by_uuid+0x26>
 801297c:	b178      	cbz	r0, 801299e <rclc_action_find_goal_handle_by_uuid+0x26>
 801297e:	68c4      	ldr	r4, [r0, #12]
 8012980:	460d      	mov	r5, r1
 8012982:	b914      	cbnz	r4, 801298a <rclc_action_find_goal_handle_by_uuid+0x12>
 8012984:	e009      	b.n	801299a <rclc_action_find_goal_handle_by_uuid+0x22>
 8012986:	6824      	ldr	r4, [r4, #0]
 8012988:	b13c      	cbz	r4, 801299a <rclc_action_find_goal_handle_by_uuid+0x22>
 801298a:	f104 0009 	add.w	r0, r4, #9
 801298e:	2210      	movs	r2, #16
 8012990:	4629      	mov	r1, r5
 8012992:	f007 fdfd 	bl	801a590 <memcmp>
 8012996:	2800      	cmp	r0, #0
 8012998:	d1f5      	bne.n	8012986 <rclc_action_find_goal_handle_by_uuid+0xe>
 801299a:	4620      	mov	r0, r4
 801299c:	bd38      	pop	{r3, r4, r5, pc}
 801299e:	2400      	movs	r4, #0
 80129a0:	4620      	mov	r0, r4
 80129a2:	bd38      	pop	{r3, r4, r5, pc}

080129a4 <rclc_action_find_first_handle_by_status>:
 80129a4:	b140      	cbz	r0, 80129b8 <rclc_action_find_first_handle_by_status+0x14>
 80129a6:	68c0      	ldr	r0, [r0, #12]
 80129a8:	b910      	cbnz	r0, 80129b0 <rclc_action_find_first_handle_by_status+0xc>
 80129aa:	e005      	b.n	80129b8 <rclc_action_find_first_handle_by_status+0x14>
 80129ac:	6800      	ldr	r0, [r0, #0]
 80129ae:	b118      	cbz	r0, 80129b8 <rclc_action_find_first_handle_by_status+0x14>
 80129b0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80129b4:	428b      	cmp	r3, r1
 80129b6:	d1f9      	bne.n	80129ac <rclc_action_find_first_handle_by_status+0x8>
 80129b8:	4770      	bx	lr
 80129ba:	bf00      	nop

080129bc <rclc_action_find_first_terminated_handle>:
 80129bc:	b140      	cbz	r0, 80129d0 <rclc_action_find_first_terminated_handle+0x14>
 80129be:	68c0      	ldr	r0, [r0, #12]
 80129c0:	b910      	cbnz	r0, 80129c8 <rclc_action_find_first_terminated_handle+0xc>
 80129c2:	e005      	b.n	80129d0 <rclc_action_find_first_terminated_handle+0x14>
 80129c4:	6800      	ldr	r0, [r0, #0]
 80129c6:	b118      	cbz	r0, 80129d0 <rclc_action_find_first_terminated_handle+0x14>
 80129c8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80129cc:	2b03      	cmp	r3, #3
 80129ce:	ddf9      	ble.n	80129c4 <rclc_action_find_first_terminated_handle+0x8>
 80129d0:	4770      	bx	lr
 80129d2:	bf00      	nop

080129d4 <rclc_action_find_handle_by_goal_request_sequence_number>:
 80129d4:	b170      	cbz	r0, 80129f4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80129d6:	68c0      	ldr	r0, [r0, #12]
 80129d8:	b160      	cbz	r0, 80129f4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 80129da:	b410      	push	{r4}
 80129dc:	e001      	b.n	80129e2 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 80129de:	6800      	ldr	r0, [r0, #0]
 80129e0:	b128      	cbz	r0, 80129ee <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 80129e2:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 80129e6:	4299      	cmp	r1, r3
 80129e8:	bf08      	it	eq
 80129ea:	4294      	cmpeq	r4, r2
 80129ec:	d1f7      	bne.n	80129de <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80129ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129f2:	4770      	bx	lr
 80129f4:	4770      	bx	lr
 80129f6:	bf00      	nop

080129f8 <rclc_action_find_handle_by_result_request_sequence_number>:
 80129f8:	b170      	cbz	r0, 8012a18 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80129fa:	68c0      	ldr	r0, [r0, #12]
 80129fc:	b160      	cbz	r0, 8012a18 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80129fe:	b410      	push	{r4}
 8012a00:	e001      	b.n	8012a06 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8012a02:	6800      	ldr	r0, [r0, #0]
 8012a04:	b128      	cbz	r0, 8012a12 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8012a06:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 8012a0a:	4299      	cmp	r1, r3
 8012a0c:	bf08      	it	eq
 8012a0e:	4294      	cmpeq	r4, r2
 8012a10:	d1f7      	bne.n	8012a02 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8012a12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a16:	4770      	bx	lr
 8012a18:	4770      	bx	lr
 8012a1a:	bf00      	nop

08012a1c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8012a1c:	b170      	cbz	r0, 8012a3c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8012a1e:	68c0      	ldr	r0, [r0, #12]
 8012a20:	b160      	cbz	r0, 8012a3c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8012a22:	b410      	push	{r4}
 8012a24:	e001      	b.n	8012a2a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8012a26:	6800      	ldr	r0, [r0, #0]
 8012a28:	b128      	cbz	r0, 8012a36 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8012a2a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 8012a2e:	4299      	cmp	r1, r3
 8012a30:	bf08      	it	eq
 8012a32:	4294      	cmpeq	r4, r2
 8012a34:	d1f7      	bne.n	8012a26 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8012a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012a3a:	4770      	bx	lr
 8012a3c:	4770      	bx	lr
 8012a3e:	bf00      	nop

08012a40 <rclc_action_find_first_handle_with_goal_response>:
 8012a40:	b140      	cbz	r0, 8012a54 <rclc_action_find_first_handle_with_goal_response+0x14>
 8012a42:	68c0      	ldr	r0, [r0, #12]
 8012a44:	b910      	cbnz	r0, 8012a4c <rclc_action_find_first_handle_with_goal_response+0xc>
 8012a46:	e005      	b.n	8012a54 <rclc_action_find_first_handle_with_goal_response+0x14>
 8012a48:	6800      	ldr	r0, [r0, #0]
 8012a4a:	b118      	cbz	r0, 8012a54 <rclc_action_find_first_handle_with_goal_response+0x14>
 8012a4c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d0f9      	beq.n	8012a48 <rclc_action_find_first_handle_with_goal_response+0x8>
 8012a54:	4770      	bx	lr
 8012a56:	bf00      	nop

08012a58 <rclc_action_find_first_handle_with_result_response>:
 8012a58:	b140      	cbz	r0, 8012a6c <rclc_action_find_first_handle_with_result_response+0x14>
 8012a5a:	68c0      	ldr	r0, [r0, #12]
 8012a5c:	b910      	cbnz	r0, 8012a64 <rclc_action_find_first_handle_with_result_response+0xc>
 8012a5e:	e005      	b.n	8012a6c <rclc_action_find_first_handle_with_result_response+0x14>
 8012a60:	6800      	ldr	r0, [r0, #0]
 8012a62:	b118      	cbz	r0, 8012a6c <rclc_action_find_first_handle_with_result_response+0x14>
 8012a64:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d0f9      	beq.n	8012a60 <rclc_action_find_first_handle_with_result_response+0x8>
 8012a6c:	4770      	bx	lr
 8012a6e:	bf00      	nop

08012a70 <rclc_action_server_response_goal_request>:
 8012a70:	b198      	cbz	r0, 8012a9a <rclc_action_server_response_goal_request+0x2a>
 8012a72:	2200      	movs	r2, #0
 8012a74:	460b      	mov	r3, r1
 8012a76:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8012a7a:	b510      	push	{r4, lr}
 8012a7c:	6844      	ldr	r4, [r0, #4]
 8012a7e:	b086      	sub	sp, #24
 8012a80:	f104 0010 	add.w	r0, r4, #16
 8012a84:	9205      	str	r2, [sp, #20]
 8012a86:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8012a8a:	aa03      	add	r2, sp, #12
 8012a8c:	f88d 300c 	strb.w	r3, [sp, #12]
 8012a90:	f7ff fd40 	bl	8012514 <rcl_action_send_goal_response>
 8012a94:	b918      	cbnz	r0, 8012a9e <rclc_action_server_response_goal_request+0x2e>
 8012a96:	b006      	add	sp, #24
 8012a98:	bd10      	pop	{r4, pc}
 8012a9a:	200b      	movs	r0, #11
 8012a9c:	4770      	bx	lr
 8012a9e:	9001      	str	r0, [sp, #4]
 8012aa0:	f7fa f94a 	bl	800cd38 <rcutils_reset_error>
 8012aa4:	9801      	ldr	r0, [sp, #4]
 8012aa6:	b006      	add	sp, #24
 8012aa8:	bd10      	pop	{r4, pc}
 8012aaa:	bf00      	nop
 8012aac:	0000      	movs	r0, r0
	...

08012ab0 <rclc_action_server_goal_cancel_accept>:
 8012ab0:	b310      	cbz	r0, 8012af8 <rclc_action_server_goal_cancel_accept+0x48>
 8012ab2:	b510      	push	{r4, lr}
 8012ab4:	b090      	sub	sp, #64	; 0x40
 8012ab6:	4604      	mov	r4, r0
 8012ab8:	a806      	add	r0, sp, #24
 8012aba:	f7ff feff 	bl	80128bc <rcl_action_get_zero_initialized_cancel_response>
 8012abe:	2300      	movs	r3, #0
 8012ac0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8012ac4:	46ec      	mov	ip, sp
 8012ac6:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8012aca:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8012ace:	f88d 3018 	strb.w	r3, [sp, #24]
 8012ad2:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8012ad6:	f8cd d01c 	str.w	sp, [sp, #28]
 8012ada:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012ade:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8012b00 <rclc_action_server_goal_cancel_accept+0x50>
 8012ae2:	6860      	ldr	r0, [r4, #4]
 8012ae4:	aa06      	add	r2, sp, #24
 8012ae6:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8012aea:	3010      	adds	r0, #16
 8012aec:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012af0:	f7ff fdc6 	bl	8012680 <rcl_action_send_cancel_response>
 8012af4:	b010      	add	sp, #64	; 0x40
 8012af6:	bd10      	pop	{r4, pc}
 8012af8:	200b      	movs	r0, #11
 8012afa:	4770      	bx	lr
 8012afc:	f3af 8000 	nop.w
 8012b00:	00000001 	.word	0x00000001
 8012b04:	00000001 	.word	0x00000001

08012b08 <rclc_action_server_goal_cancel_reject>:
 8012b08:	b082      	sub	sp, #8
 8012b0a:	b530      	push	{r4, r5, lr}
 8012b0c:	b08b      	sub	sp, #44	; 0x2c
 8012b0e:	ac0e      	add	r4, sp, #56	; 0x38
 8012b10:	e884 000c 	stmia.w	r4, {r2, r3}
 8012b14:	b188      	cbz	r0, 8012b3a <rclc_action_server_goal_cancel_reject+0x32>
 8012b16:	4604      	mov	r4, r0
 8012b18:	a801      	add	r0, sp, #4
 8012b1a:	460d      	mov	r5, r1
 8012b1c:	f7ff fece 	bl	80128bc <rcl_action_get_zero_initialized_cancel_response>
 8012b20:	aa01      	add	r2, sp, #4
 8012b22:	a90e      	add	r1, sp, #56	; 0x38
 8012b24:	f104 0010 	add.w	r0, r4, #16
 8012b28:	f88d 5004 	strb.w	r5, [sp, #4]
 8012b2c:	f7ff fda8 	bl	8012680 <rcl_action_send_cancel_response>
 8012b30:	b00b      	add	sp, #44	; 0x2c
 8012b32:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012b36:	b002      	add	sp, #8
 8012b38:	4770      	bx	lr
 8012b3a:	200b      	movs	r0, #11
 8012b3c:	b00b      	add	sp, #44	; 0x2c
 8012b3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012b42:	b002      	add	sp, #8
 8012b44:	4770      	bx	lr
 8012b46:	bf00      	nop

08012b48 <__atomic_load_8>:
 8012b48:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8012b4c:	4a16      	ldr	r2, [pc, #88]	; (8012ba8 <__atomic_load_8+0x60>)
 8012b4e:	4b17      	ldr	r3, [pc, #92]	; (8012bac <__atomic_load_8+0x64>)
 8012b50:	f04f 0c01 	mov.w	ip, #1
 8012b54:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8012b58:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8012b5c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8012b60:	fb02 f101 	mul.w	r1, r2, r1
 8012b64:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8012b68:	fba3 2301 	umull	r2, r3, r3, r1
 8012b6c:	091b      	lsrs	r3, r3, #4
 8012b6e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8012b72:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8012b76:	b4d0      	push	{r4, r6, r7}
 8012b78:	1ac9      	subs	r1, r1, r3
 8012b7a:	4c0d      	ldr	r4, [pc, #52]	; (8012bb0 <__atomic_load_8+0x68>)
 8012b7c:	1862      	adds	r2, r4, r1
 8012b7e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8012b82:	e8c2 cf46 	strexb	r6, ip, [r2]
 8012b86:	2e00      	cmp	r6, #0
 8012b88:	d1f9      	bne.n	8012b7e <__atomic_load_8+0x36>
 8012b8a:	b2db      	uxtb	r3, r3
 8012b8c:	f3bf 8f5b 	dmb	ish
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d1f4      	bne.n	8012b7e <__atomic_load_8+0x36>
 8012b94:	e9d0 6700 	ldrd	r6, r7, [r0]
 8012b98:	f3bf 8f5b 	dmb	ish
 8012b9c:	5463      	strb	r3, [r4, r1]
 8012b9e:	4630      	mov	r0, r6
 8012ba0:	4639      	mov	r1, r7
 8012ba2:	bcd0      	pop	{r4, r6, r7}
 8012ba4:	4770      	bx	lr
 8012ba6:	bf00      	nop
 8012ba8:	27d4eb2d 	.word	0x27d4eb2d
 8012bac:	b21642c9 	.word	0xb21642c9
 8012bb0:	2000b970 	.word	0x2000b970

08012bb4 <__atomic_store_8>:
 8012bb4:	b570      	push	{r4, r5, r6, lr}
 8012bb6:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8012bba:	4916      	ldr	r1, [pc, #88]	; (8012c14 <__atomic_store_8+0x60>)
 8012bbc:	4c16      	ldr	r4, [pc, #88]	; (8012c18 <__atomic_store_8+0x64>)
 8012bbe:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 8012bc2:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8012bc6:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8012bca:	fb01 fe0e 	mul.w	lr, r1, lr
 8012bce:	4913      	ldr	r1, [pc, #76]	; (8012c1c <__atomic_store_8+0x68>)
 8012bd0:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8012bd4:	fba1 510e 	umull	r5, r1, r1, lr
 8012bd8:	f04f 0501 	mov.w	r5, #1
 8012bdc:	0909      	lsrs	r1, r1, #4
 8012bde:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8012be2:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 8012be6:	ebae 0e01 	sub.w	lr, lr, r1
 8012bea:	eb04 0c0e 	add.w	ip, r4, lr
 8012bee:	e8dc 1f4f 	ldrexb	r1, [ip]
 8012bf2:	e8cc 5f46 	strexb	r6, r5, [ip]
 8012bf6:	2e00      	cmp	r6, #0
 8012bf8:	d1f9      	bne.n	8012bee <__atomic_store_8+0x3a>
 8012bfa:	b2c9      	uxtb	r1, r1
 8012bfc:	f3bf 8f5b 	dmb	ish
 8012c00:	2900      	cmp	r1, #0
 8012c02:	d1f4      	bne.n	8012bee <__atomic_store_8+0x3a>
 8012c04:	e9c0 2300 	strd	r2, r3, [r0]
 8012c08:	f3bf 8f5b 	dmb	ish
 8012c0c:	f804 100e 	strb.w	r1, [r4, lr]
 8012c10:	bd70      	pop	{r4, r5, r6, pc}
 8012c12:	bf00      	nop
 8012c14:	27d4eb2d 	.word	0x27d4eb2d
 8012c18:	2000b970 	.word	0x2000b970
 8012c1c:	b21642c9 	.word	0xb21642c9

08012c20 <__atomic_exchange_8>:
 8012c20:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8012c24:	4917      	ldr	r1, [pc, #92]	; (8012c84 <__atomic_exchange_8+0x64>)
 8012c26:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 8012c2a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8012c2e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8012c32:	fb01 fc0c 	mul.w	ip, r1, ip
 8012c36:	4914      	ldr	r1, [pc, #80]	; (8012c88 <__atomic_exchange_8+0x68>)
 8012c38:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8012c3c:	b570      	push	{r4, r5, r6, lr}
 8012c3e:	4686      	mov	lr, r0
 8012c40:	fba1 010c 	umull	r0, r1, r1, ip
 8012c44:	4d11      	ldr	r5, [pc, #68]	; (8012c8c <__atomic_exchange_8+0x6c>)
 8012c46:	f04f 0001 	mov.w	r0, #1
 8012c4a:	0909      	lsrs	r1, r1, #4
 8012c4c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8012c50:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8012c54:	ebac 0c01 	sub.w	ip, ip, r1
 8012c58:	eb05 010c 	add.w	r1, r5, ip
 8012c5c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8012c60:	e8c1 0f46 	strexb	r6, r0, [r1]
 8012c64:	2e00      	cmp	r6, #0
 8012c66:	d1f9      	bne.n	8012c5c <__atomic_exchange_8+0x3c>
 8012c68:	b2e4      	uxtb	r4, r4
 8012c6a:	f3bf 8f5b 	dmb	ish
 8012c6e:	2c00      	cmp	r4, #0
 8012c70:	d1f4      	bne.n	8012c5c <__atomic_exchange_8+0x3c>
 8012c72:	e9de 0100 	ldrd	r0, r1, [lr]
 8012c76:	e9ce 2300 	strd	r2, r3, [lr]
 8012c7a:	f3bf 8f5b 	dmb	ish
 8012c7e:	f805 400c 	strb.w	r4, [r5, ip]
 8012c82:	bd70      	pop	{r4, r5, r6, pc}
 8012c84:	27d4eb2d 	.word	0x27d4eb2d
 8012c88:	b21642c9 	.word	0xb21642c9
 8012c8c:	2000b970 	.word	0x2000b970

08012c90 <rcutils_get_env>:
 8012c90:	b168      	cbz	r0, 8012cae <rcutils_get_env+0x1e>
 8012c92:	b510      	push	{r4, lr}
 8012c94:	460c      	mov	r4, r1
 8012c96:	b129      	cbz	r1, 8012ca4 <rcutils_get_env+0x14>
 8012c98:	f007 f8e4 	bl	8019e64 <getenv>
 8012c9c:	b120      	cbz	r0, 8012ca8 <rcutils_get_env+0x18>
 8012c9e:	6020      	str	r0, [r4, #0]
 8012ca0:	2000      	movs	r0, #0
 8012ca2:	bd10      	pop	{r4, pc}
 8012ca4:	4803      	ldr	r0, [pc, #12]	; (8012cb4 <rcutils_get_env+0x24>)
 8012ca6:	bd10      	pop	{r4, pc}
 8012ca8:	4b03      	ldr	r3, [pc, #12]	; (8012cb8 <rcutils_get_env+0x28>)
 8012caa:	6023      	str	r3, [r4, #0]
 8012cac:	bd10      	pop	{r4, pc}
 8012cae:	4803      	ldr	r0, [pc, #12]	; (8012cbc <rcutils_get_env+0x2c>)
 8012cb0:	4770      	bx	lr
 8012cb2:	bf00      	nop
 8012cb4:	0801c710 	.word	0x0801c710
 8012cb8:	0801c834 	.word	0x0801c834
 8012cbc:	0801c6f4 	.word	0x0801c6f4

08012cc0 <rcutils_is_directory>:
 8012cc0:	2000      	movs	r0, #0
 8012cc2:	4770      	bx	lr

08012cc4 <rcutils_join_path>:
 8012cc4:	b082      	sub	sp, #8
 8012cc6:	2000      	movs	r0, #0
 8012cc8:	e88d 000c 	stmia.w	sp, {r2, r3}
 8012ccc:	b002      	add	sp, #8
 8012cce:	4770      	bx	lr

08012cd0 <rcutils_to_native_path>:
 8012cd0:	b084      	sub	sp, #16
 8012cd2:	2000      	movs	r0, #0
 8012cd4:	f10d 0c04 	add.w	ip, sp, #4
 8012cd8:	b004      	add	sp, #16
 8012cda:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8012cde:	4770      	bx	lr

08012ce0 <rcutils_format_string_limit>:
 8012ce0:	b40f      	push	{r0, r1, r2, r3}
 8012ce2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ce4:	b083      	sub	sp, #12
 8012ce6:	ac08      	add	r4, sp, #32
 8012ce8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8012cea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012cee:	b326      	cbz	r6, 8012d3a <rcutils_format_string_limit+0x5a>
 8012cf0:	a808      	add	r0, sp, #32
 8012cf2:	f7f9 fffd 	bl	800ccf0 <rcutils_allocator_is_valid>
 8012cf6:	b300      	cbz	r0, 8012d3a <rcutils_format_string_limit+0x5a>
 8012cf8:	2100      	movs	r1, #0
 8012cfa:	ab0f      	add	r3, sp, #60	; 0x3c
 8012cfc:	4632      	mov	r2, r6
 8012cfe:	4608      	mov	r0, r1
 8012d00:	e9cd 3300 	strd	r3, r3, [sp]
 8012d04:	f000 f906 	bl	8012f14 <rcutils_vsnprintf>
 8012d08:	1c43      	adds	r3, r0, #1
 8012d0a:	4605      	mov	r5, r0
 8012d0c:	d015      	beq.n	8012d3a <rcutils_format_string_limit+0x5a>
 8012d0e:	1c47      	adds	r7, r0, #1
 8012d10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012d12:	429f      	cmp	r7, r3
 8012d14:	d901      	bls.n	8012d1a <rcutils_format_string_limit+0x3a>
 8012d16:	1e5d      	subs	r5, r3, #1
 8012d18:	461f      	mov	r7, r3
 8012d1a:	9b08      	ldr	r3, [sp, #32]
 8012d1c:	4638      	mov	r0, r7
 8012d1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012d20:	4798      	blx	r3
 8012d22:	4604      	mov	r4, r0
 8012d24:	b148      	cbz	r0, 8012d3a <rcutils_format_string_limit+0x5a>
 8012d26:	4632      	mov	r2, r6
 8012d28:	4639      	mov	r1, r7
 8012d2a:	9b01      	ldr	r3, [sp, #4]
 8012d2c:	f000 f8f2 	bl	8012f14 <rcutils_vsnprintf>
 8012d30:	2800      	cmp	r0, #0
 8012d32:	db09      	blt.n	8012d48 <rcutils_format_string_limit+0x68>
 8012d34:	2300      	movs	r3, #0
 8012d36:	5563      	strb	r3, [r4, r5]
 8012d38:	e000      	b.n	8012d3c <rcutils_format_string_limit+0x5c>
 8012d3a:	2400      	movs	r4, #0
 8012d3c:	4620      	mov	r0, r4
 8012d3e:	b003      	add	sp, #12
 8012d40:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012d44:	b004      	add	sp, #16
 8012d46:	4770      	bx	lr
 8012d48:	4620      	mov	r0, r4
 8012d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d4c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012d4e:	2400      	movs	r4, #0
 8012d50:	4798      	blx	r3
 8012d52:	e7f3      	b.n	8012d3c <rcutils_format_string_limit+0x5c>

08012d54 <rcutils_repl_str>:
 8012d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d58:	ed2d 8b02 	vpush	{d8}
 8012d5c:	b087      	sub	sp, #28
 8012d5e:	2600      	movs	r6, #0
 8012d60:	4680      	mov	r8, r0
 8012d62:	468a      	mov	sl, r1
 8012d64:	9000      	str	r0, [sp, #0]
 8012d66:	4608      	mov	r0, r1
 8012d68:	ee08 2a10 	vmov	s16, r2
 8012d6c:	4699      	mov	r9, r3
 8012d6e:	2510      	movs	r5, #16
 8012d70:	f7ed fac6 	bl	8000300 <strlen>
 8012d74:	4637      	mov	r7, r6
 8012d76:	46b3      	mov	fp, r6
 8012d78:	9001      	str	r0, [sp, #4]
 8012d7a:	e01e      	b.n	8012dba <rcutils_repl_str+0x66>
 8012d7c:	f10b 0b01 	add.w	fp, fp, #1
 8012d80:	9b01      	ldr	r3, [sp, #4]
 8012d82:	455e      	cmp	r6, fp
 8012d84:	eb04 0803 	add.w	r8, r4, r3
 8012d88:	d211      	bcs.n	8012dae <rcutils_repl_str+0x5a>
 8012d8a:	442e      	add	r6, r5
 8012d8c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8012d90:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8012d94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012d98:	00b1      	lsls	r1, r6, #2
 8012d9a:	4798      	blx	r3
 8012d9c:	2800      	cmp	r0, #0
 8012d9e:	f000 8088 	beq.w	8012eb2 <rcutils_repl_str+0x15e>
 8012da2:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8012da6:	4607      	mov	r7, r0
 8012da8:	bf28      	it	cs
 8012daa:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8012dae:	9a00      	ldr	r2, [sp, #0]
 8012db0:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8012db4:	1aa4      	subs	r4, r4, r2
 8012db6:	f843 4c04 	str.w	r4, [r3, #-4]
 8012dba:	4651      	mov	r1, sl
 8012dbc:	4640      	mov	r0, r8
 8012dbe:	f007 fc4b 	bl	801a658 <strstr>
 8012dc2:	4604      	mov	r4, r0
 8012dc4:	4638      	mov	r0, r7
 8012dc6:	2c00      	cmp	r4, #0
 8012dc8:	d1d8      	bne.n	8012d7c <rcutils_repl_str+0x28>
 8012dca:	4640      	mov	r0, r8
 8012dcc:	f7ed fa98 	bl	8000300 <strlen>
 8012dd0:	9b00      	ldr	r3, [sp, #0]
 8012dd2:	eba8 0803 	sub.w	r8, r8, r3
 8012dd6:	eb08 0400 	add.w	r4, r8, r0
 8012dda:	9402      	str	r4, [sp, #8]
 8012ddc:	f1bb 0f00 	cmp.w	fp, #0
 8012de0:	d045      	beq.n	8012e6e <rcutils_repl_str+0x11a>
 8012de2:	ee18 0a10 	vmov	r0, s16
 8012de6:	f7ed fa8b 	bl	8000300 <strlen>
 8012dea:	9a01      	ldr	r2, [sp, #4]
 8012dec:	4606      	mov	r6, r0
 8012dee:	f8d9 3000 	ldr.w	r3, [r9]
 8012df2:	1a82      	subs	r2, r0, r2
 8012df4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012df8:	fb0b 4202 	mla	r2, fp, r2, r4
 8012dfc:	1c50      	adds	r0, r2, #1
 8012dfe:	9205      	str	r2, [sp, #20]
 8012e00:	4798      	blx	r3
 8012e02:	4682      	mov	sl, r0
 8012e04:	2800      	cmp	r0, #0
 8012e06:	d054      	beq.n	8012eb2 <rcutils_repl_str+0x15e>
 8012e08:	683a      	ldr	r2, [r7, #0]
 8012e0a:	463d      	mov	r5, r7
 8012e0c:	9900      	ldr	r1, [sp, #0]
 8012e0e:	2401      	movs	r4, #1
 8012e10:	f007 fd19 	bl	801a846 <memcpy>
 8012e14:	683b      	ldr	r3, [r7, #0]
 8012e16:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8012e1a:	eb0a 0803 	add.w	r8, sl, r3
 8012e1e:	ee18 7a10 	vmov	r7, s16
 8012e22:	f8dd a000 	ldr.w	sl, [sp]
 8012e26:	f8cd 9000 	str.w	r9, [sp]
 8012e2a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8012e2e:	4632      	mov	r2, r6
 8012e30:	4639      	mov	r1, r7
 8012e32:	4640      	mov	r0, r8
 8012e34:	44b0      	add	r8, r6
 8012e36:	f007 fd06 	bl	801a846 <memcpy>
 8012e3a:	f855 2b04 	ldr.w	r2, [r5], #4
 8012e3e:	45a3      	cmp	fp, r4
 8012e40:	444a      	add	r2, r9
 8012e42:	eb0a 0102 	add.w	r1, sl, r2
 8012e46:	d02a      	beq.n	8012e9e <rcutils_repl_str+0x14a>
 8012e48:	6828      	ldr	r0, [r5, #0]
 8012e4a:	1a82      	subs	r2, r0, r2
 8012e4c:	4640      	mov	r0, r8
 8012e4e:	4490      	add	r8, r2
 8012e50:	f007 fcf9 	bl	801a846 <memcpy>
 8012e54:	1c62      	adds	r2, r4, #1
 8012e56:	45a3      	cmp	fp, r4
 8012e58:	4614      	mov	r4, r2
 8012e5a:	d8e8      	bhi.n	8012e2e <rcutils_repl_str+0xda>
 8012e5c:	f8dd 9000 	ldr.w	r9, [sp]
 8012e60:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8012e64:	2300      	movs	r3, #0
 8012e66:	9a05      	ldr	r2, [sp, #20]
 8012e68:	f80a 3002 	strb.w	r3, [sl, r2]
 8012e6c:	e00b      	b.n	8012e86 <rcutils_repl_str+0x132>
 8012e6e:	4620      	mov	r0, r4
 8012e70:	f8d9 3000 	ldr.w	r3, [r9]
 8012e74:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012e78:	3001      	adds	r0, #1
 8012e7a:	4798      	blx	r3
 8012e7c:	4682      	mov	sl, r0
 8012e7e:	b110      	cbz	r0, 8012e86 <rcutils_repl_str+0x132>
 8012e80:	9900      	ldr	r1, [sp, #0]
 8012e82:	f007 fcd8 	bl	801a836 <strcpy>
 8012e86:	4638      	mov	r0, r7
 8012e88:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012e8c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8012e90:	4798      	blx	r3
 8012e92:	4650      	mov	r0, sl
 8012e94:	b007      	add	sp, #28
 8012e96:	ecbd 8b02 	vpop	{d8}
 8012e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e9e:	9b02      	ldr	r3, [sp, #8]
 8012ea0:	4640      	mov	r0, r8
 8012ea2:	f8dd 9000 	ldr.w	r9, [sp]
 8012ea6:	1a9a      	subs	r2, r3, r2
 8012ea8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8012eac:	f007 fccb 	bl	801a846 <memcpy>
 8012eb0:	e7d8      	b.n	8012e64 <rcutils_repl_str+0x110>
 8012eb2:	f04f 0a00 	mov.w	sl, #0
 8012eb6:	e7e6      	b.n	8012e86 <rcutils_repl_str+0x132>

08012eb8 <rcutils_snprintf>:
 8012eb8:	b40c      	push	{r2, r3}
 8012eba:	b530      	push	{r4, r5, lr}
 8012ebc:	b083      	sub	sp, #12
 8012ebe:	ab06      	add	r3, sp, #24
 8012ec0:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ec4:	9301      	str	r3, [sp, #4]
 8012ec6:	b1e2      	cbz	r2, 8012f02 <rcutils_snprintf+0x4a>
 8012ec8:	fab0 f480 	clz	r4, r0
 8012ecc:	fab1 f581 	clz	r5, r1
 8012ed0:	ea50 0c01 	orrs.w	ip, r0, r1
 8012ed4:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8012ed8:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8012edc:	d008      	beq.n	8012ef0 <rcutils_snprintf+0x38>
 8012ede:	b984      	cbnz	r4, 8012f02 <rcutils_snprintf+0x4a>
 8012ee0:	b97d      	cbnz	r5, 8012f02 <rcutils_snprintf+0x4a>
 8012ee2:	f007 fb47 	bl	801a574 <vsniprintf>
 8012ee6:	b003      	add	sp, #12
 8012ee8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012eec:	b002      	add	sp, #8
 8012eee:	4770      	bx	lr
 8012ef0:	4661      	mov	r1, ip
 8012ef2:	4660      	mov	r0, ip
 8012ef4:	f007 fb3e 	bl	801a574 <vsniprintf>
 8012ef8:	b003      	add	sp, #12
 8012efa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012efe:	b002      	add	sp, #8
 8012f00:	4770      	bx	lr
 8012f02:	f007 fc6b 	bl	801a7dc <__errno>
 8012f06:	2216      	movs	r2, #22
 8012f08:	4603      	mov	r3, r0
 8012f0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f0e:	601a      	str	r2, [r3, #0]
 8012f10:	e7e9      	b.n	8012ee6 <rcutils_snprintf+0x2e>
 8012f12:	bf00      	nop

08012f14 <rcutils_vsnprintf>:
 8012f14:	b570      	push	{r4, r5, r6, lr}
 8012f16:	b1b2      	cbz	r2, 8012f46 <rcutils_vsnprintf+0x32>
 8012f18:	fab0 f480 	clz	r4, r0
 8012f1c:	fab1 f581 	clz	r5, r1
 8012f20:	ea50 0c01 	orrs.w	ip, r0, r1
 8012f24:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8012f28:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8012f2c:	d005      	beq.n	8012f3a <rcutils_vsnprintf+0x26>
 8012f2e:	b954      	cbnz	r4, 8012f46 <rcutils_vsnprintf+0x32>
 8012f30:	b94d      	cbnz	r5, 8012f46 <rcutils_vsnprintf+0x32>
 8012f32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f36:	f007 bb1d 	b.w	801a574 <vsniprintf>
 8012f3a:	4661      	mov	r1, ip
 8012f3c:	4660      	mov	r0, ip
 8012f3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f42:	f007 bb17 	b.w	801a574 <vsniprintf>
 8012f46:	f007 fc49 	bl	801a7dc <__errno>
 8012f4a:	2316      	movs	r3, #22
 8012f4c:	6003      	str	r3, [r0, #0]
 8012f4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012f52:	bd70      	pop	{r4, r5, r6, pc}

08012f54 <rcutils_strdup>:
 8012f54:	b084      	sub	sp, #16
 8012f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f58:	ac07      	add	r4, sp, #28
 8012f5a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8012f5c:	4605      	mov	r5, r0
 8012f5e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8012f62:	b1d0      	cbz	r0, 8012f9a <rcutils_strdup+0x46>
 8012f64:	460c      	mov	r4, r1
 8012f66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012f6a:	2100      	movs	r1, #0
 8012f6c:	f7ed f978 	bl	8000260 <memchr>
 8012f70:	b180      	cbz	r0, 8012f94 <rcutils_strdup+0x40>
 8012f72:	1b46      	subs	r6, r0, r5
 8012f74:	1c70      	adds	r0, r6, #1
 8012f76:	4639      	mov	r1, r7
 8012f78:	47a0      	blx	r4
 8012f7a:	4604      	mov	r4, r0
 8012f7c:	b128      	cbz	r0, 8012f8a <rcutils_strdup+0x36>
 8012f7e:	4632      	mov	r2, r6
 8012f80:	4629      	mov	r1, r5
 8012f82:	f007 fc60 	bl	801a846 <memcpy>
 8012f86:	2300      	movs	r3, #0
 8012f88:	55a3      	strb	r3, [r4, r6]
 8012f8a:	4620      	mov	r0, r4
 8012f8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012f90:	b004      	add	sp, #16
 8012f92:	4770      	bx	lr
 8012f94:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8012f98:	e7ed      	b.n	8012f76 <rcutils_strdup+0x22>
 8012f9a:	4604      	mov	r4, r0
 8012f9c:	e7f5      	b.n	8012f8a <rcutils_strdup+0x36>
 8012f9e:	bf00      	nop

08012fa0 <rcutils_strndup>:
 8012fa0:	b082      	sub	sp, #8
 8012fa2:	b570      	push	{r4, r5, r6, lr}
 8012fa4:	ac04      	add	r4, sp, #16
 8012fa6:	4606      	mov	r6, r0
 8012fa8:	e884 000c 	stmia.w	r4, {r2, r3}
 8012fac:	b1b8      	cbz	r0, 8012fde <rcutils_strndup+0x3e>
 8012fae:	460c      	mov	r4, r1
 8012fb0:	460a      	mov	r2, r1
 8012fb2:	2100      	movs	r1, #0
 8012fb4:	f7ed f954 	bl	8000260 <memchr>
 8012fb8:	b100      	cbz	r0, 8012fbc <rcutils_strndup+0x1c>
 8012fba:	1b84      	subs	r4, r0, r6
 8012fbc:	9b04      	ldr	r3, [sp, #16]
 8012fbe:	1c60      	adds	r0, r4, #1
 8012fc0:	9908      	ldr	r1, [sp, #32]
 8012fc2:	4798      	blx	r3
 8012fc4:	4605      	mov	r5, r0
 8012fc6:	b128      	cbz	r0, 8012fd4 <rcutils_strndup+0x34>
 8012fc8:	4622      	mov	r2, r4
 8012fca:	4631      	mov	r1, r6
 8012fcc:	f007 fc3b 	bl	801a846 <memcpy>
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	552b      	strb	r3, [r5, r4]
 8012fd4:	4628      	mov	r0, r5
 8012fd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012fda:	b002      	add	sp, #8
 8012fdc:	4770      	bx	lr
 8012fde:	4605      	mov	r5, r0
 8012fe0:	e7f8      	b.n	8012fd4 <rcutils_strndup+0x34>
 8012fe2:	bf00      	nop

08012fe4 <rcutils_get_zero_initialized_string_map>:
 8012fe4:	2000      	movs	r0, #0
 8012fe6:	4b01      	ldr	r3, [pc, #4]	; (8012fec <rcutils_get_zero_initialized_string_map+0x8>)
 8012fe8:	6018      	str	r0, [r3, #0]
 8012fea:	4770      	bx	lr
 8012fec:	2000b988 	.word	0x2000b988

08012ff0 <rcutils_string_map_reserve>:
 8012ff0:	2800      	cmp	r0, #0
 8012ff2:	d03e      	beq.n	8013072 <rcutils_string_map_reserve+0x82>
 8012ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ff6:	6805      	ldr	r5, [r0, #0]
 8012ff8:	4606      	mov	r6, r0
 8012ffa:	460c      	mov	r4, r1
 8012ffc:	b12d      	cbz	r5, 801300a <rcutils_string_map_reserve+0x1a>
 8012ffe:	68ab      	ldr	r3, [r5, #8]
 8013000:	42a3      	cmp	r3, r4
 8013002:	d904      	bls.n	801300e <rcutils_string_map_reserve+0x1e>
 8013004:	461c      	mov	r4, r3
 8013006:	2d00      	cmp	r5, #0
 8013008:	d1f9      	bne.n	8012ffe <rcutils_string_map_reserve+0xe>
 801300a:	201f      	movs	r0, #31
 801300c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801300e:	686b      	ldr	r3, [r5, #4]
 8013010:	42a3      	cmp	r3, r4
 8013012:	d02a      	beq.n	801306a <rcutils_string_map_reserve+0x7a>
 8013014:	69e9      	ldr	r1, [r5, #28]
 8013016:	b304      	cbz	r4, 801305a <rcutils_string_map_reserve+0x6a>
 8013018:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 801301c:	d227      	bcs.n	801306e <rcutils_string_map_reserve+0x7e>
 801301e:	00e7      	lsls	r7, r4, #3
 8013020:	460a      	mov	r2, r1
 8013022:	696b      	ldr	r3, [r5, #20]
 8013024:	6828      	ldr	r0, [r5, #0]
 8013026:	4639      	mov	r1, r7
 8013028:	4798      	blx	r3
 801302a:	b300      	cbz	r0, 801306e <rcutils_string_map_reserve+0x7e>
 801302c:	6835      	ldr	r5, [r6, #0]
 801302e:	686a      	ldr	r2, [r5, #4]
 8013030:	6028      	str	r0, [r5, #0]
 8013032:	42a2      	cmp	r2, r4
 8013034:	d216      	bcs.n	8013064 <rcutils_string_map_reserve+0x74>
 8013036:	43d1      	mvns	r1, r2
 8013038:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 801303c:	4421      	add	r1, r4
 801303e:	2909      	cmp	r1, #9
 8013040:	d919      	bls.n	8013076 <rcutils_string_map_reserve+0x86>
 8013042:	0759      	lsls	r1, r3, #29
 8013044:	d117      	bne.n	8013076 <rcutils_string_map_reserve+0x86>
 8013046:	1aa1      	subs	r1, r4, r2
 8013048:	2600      	movs	r6, #0
 801304a:	2200      	movs	r2, #0
 801304c:	2700      	movs	r7, #0
 801304e:	3201      	adds	r2, #1
 8013050:	4291      	cmp	r1, r2
 8013052:	e8e3 6702 	strd	r6, r7, [r3], #8
 8013056:	d8fa      	bhi.n	801304e <rcutils_string_map_reserve+0x5e>
 8013058:	e004      	b.n	8013064 <rcutils_string_map_reserve+0x74>
 801305a:	692b      	ldr	r3, [r5, #16]
 801305c:	6828      	ldr	r0, [r5, #0]
 801305e:	4798      	blx	r3
 8013060:	6835      	ldr	r5, [r6, #0]
 8013062:	602c      	str	r4, [r5, #0]
 8013064:	2000      	movs	r0, #0
 8013066:	606c      	str	r4, [r5, #4]
 8013068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801306a:	2000      	movs	r0, #0
 801306c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801306e:	200a      	movs	r0, #10
 8013070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013072:	200b      	movs	r0, #11
 8013074:	4770      	bx	lr
 8013076:	4438      	add	r0, r7
 8013078:	2200      	movs	r2, #0
 801307a:	e9c3 2200 	strd	r2, r2, [r3]
 801307e:	3308      	adds	r3, #8
 8013080:	4283      	cmp	r3, r0
 8013082:	d1fa      	bne.n	801307a <rcutils_string_map_reserve+0x8a>
 8013084:	e7ee      	b.n	8013064 <rcutils_string_map_reserve+0x74>
 8013086:	bf00      	nop

08013088 <rcutils_string_map_init>:
 8013088:	b082      	sub	sp, #8
 801308a:	b570      	push	{r4, r5, r6, lr}
 801308c:	ac04      	add	r4, sp, #16
 801308e:	e884 000c 	stmia.w	r4, {r2, r3}
 8013092:	b378      	cbz	r0, 80130f4 <rcutils_string_map_init+0x6c>
 8013094:	6806      	ldr	r6, [r0, #0]
 8013096:	4604      	mov	r4, r0
 8013098:	b12e      	cbz	r6, 80130a6 <rcutils_string_map_init+0x1e>
 801309a:	251e      	movs	r5, #30
 801309c:	4628      	mov	r0, r5
 801309e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130a2:	b002      	add	sp, #8
 80130a4:	4770      	bx	lr
 80130a6:	a804      	add	r0, sp, #16
 80130a8:	460d      	mov	r5, r1
 80130aa:	f7f9 fe21 	bl	800ccf0 <rcutils_allocator_is_valid>
 80130ae:	b308      	cbz	r0, 80130f4 <rcutils_string_map_init+0x6c>
 80130b0:	9b04      	ldr	r3, [sp, #16]
 80130b2:	2020      	movs	r0, #32
 80130b4:	9908      	ldr	r1, [sp, #32]
 80130b6:	4798      	blx	r3
 80130b8:	6020      	str	r0, [r4, #0]
 80130ba:	b308      	cbz	r0, 8013100 <rcutils_string_map_init+0x78>
 80130bc:	f10d 0e10 	add.w	lr, sp, #16
 80130c0:	6086      	str	r6, [r0, #8]
 80130c2:	f100 0c0c 	add.w	ip, r0, #12
 80130c6:	e9c0 6600 	strd	r6, r6, [r0]
 80130ca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80130ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80130d2:	f8de 3000 	ldr.w	r3, [lr]
 80130d6:	4629      	mov	r1, r5
 80130d8:	4620      	mov	r0, r4
 80130da:	f8cc 3000 	str.w	r3, [ip]
 80130de:	f7ff ff87 	bl	8012ff0 <rcutils_string_map_reserve>
 80130e2:	4605      	mov	r5, r0
 80130e4:	2800      	cmp	r0, #0
 80130e6:	d0d9      	beq.n	801309c <rcutils_string_map_init+0x14>
 80130e8:	9b05      	ldr	r3, [sp, #20]
 80130ea:	9908      	ldr	r1, [sp, #32]
 80130ec:	6820      	ldr	r0, [r4, #0]
 80130ee:	4798      	blx	r3
 80130f0:	6026      	str	r6, [r4, #0]
 80130f2:	e7d3      	b.n	801309c <rcutils_string_map_init+0x14>
 80130f4:	250b      	movs	r5, #11
 80130f6:	4628      	mov	r0, r5
 80130f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80130fc:	b002      	add	sp, #8
 80130fe:	4770      	bx	lr
 8013100:	250a      	movs	r5, #10
 8013102:	e7cb      	b.n	801309c <rcutils_string_map_init+0x14>

08013104 <rcutils_string_map_fini>:
 8013104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013108:	b083      	sub	sp, #12
 801310a:	2800      	cmp	r0, #0
 801310c:	d03e      	beq.n	801318c <rcutils_string_map_fini+0x88>
 801310e:	6804      	ldr	r4, [r0, #0]
 8013110:	4606      	mov	r6, r0
 8013112:	2c00      	cmp	r4, #0
 8013114:	d036      	beq.n	8013184 <rcutils_string_map_fini+0x80>
 8013116:	6863      	ldr	r3, [r4, #4]
 8013118:	b34b      	cbz	r3, 801316e <rcutils_string_map_fini+0x6a>
 801311a:	2500      	movs	r5, #0
 801311c:	6822      	ldr	r2, [r4, #0]
 801311e:	462f      	mov	r7, r5
 8013120:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 8013124:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8013128:	b1f0      	cbz	r0, 8013168 <rcutils_string_map_fini+0x64>
 801312a:	69e1      	ldr	r1, [r4, #28]
 801312c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013130:	9101      	str	r1, [sp, #4]
 8013132:	47c8      	blx	r9
 8013134:	6823      	ldr	r3, [r4, #0]
 8013136:	9901      	ldr	r1, [sp, #4]
 8013138:	eb03 0208 	add.w	r2, r3, r8
 801313c:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
 8013140:	3501      	adds	r5, #1
 8013142:	6850      	ldr	r0, [r2, #4]
 8013144:	47c8      	blx	r9
 8013146:	68a3      	ldr	r3, [r4, #8]
 8013148:	6822      	ldr	r2, [r4, #0]
 801314a:	3b01      	subs	r3, #1
 801314c:	4442      	add	r2, r8
 801314e:	6057      	str	r7, [r2, #4]
 8013150:	60a3      	str	r3, [r4, #8]
 8013152:	6834      	ldr	r4, [r6, #0]
 8013154:	6863      	ldr	r3, [r4, #4]
 8013156:	429d      	cmp	r5, r3
 8013158:	d209      	bcs.n	801316e <rcutils_string_map_fini+0x6a>
 801315a:	6822      	ldr	r2, [r4, #0]
 801315c:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8013160:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 8013164:	2800      	cmp	r0, #0
 8013166:	d1e0      	bne.n	801312a <rcutils_string_map_fini+0x26>
 8013168:	3501      	adds	r5, #1
 801316a:	429d      	cmp	r5, r3
 801316c:	d3d8      	bcc.n	8013120 <rcutils_string_map_fini+0x1c>
 801316e:	2100      	movs	r1, #0
 8013170:	4630      	mov	r0, r6
 8013172:	f7ff ff3d 	bl	8012ff0 <rcutils_string_map_reserve>
 8013176:	4604      	mov	r4, r0
 8013178:	b920      	cbnz	r0, 8013184 <rcutils_string_map_fini+0x80>
 801317a:	6830      	ldr	r0, [r6, #0]
 801317c:	6903      	ldr	r3, [r0, #16]
 801317e:	69c1      	ldr	r1, [r0, #28]
 8013180:	4798      	blx	r3
 8013182:	6034      	str	r4, [r6, #0]
 8013184:	4620      	mov	r0, r4
 8013186:	b003      	add	sp, #12
 8013188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801318c:	240b      	movs	r4, #11
 801318e:	4620      	mov	r0, r4
 8013190:	b003      	add	sp, #12
 8013192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013196:	bf00      	nop

08013198 <rcutils_string_map_getn>:
 8013198:	b338      	cbz	r0, 80131ea <rcutils_string_map_getn+0x52>
 801319a:	6803      	ldr	r3, [r0, #0]
 801319c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131a0:	4688      	mov	r8, r1
 80131a2:	b1d9      	cbz	r1, 80131dc <rcutils_string_map_getn+0x44>
 80131a4:	fab3 f483 	clz	r4, r3
 80131a8:	0964      	lsrs	r4, r4, #5
 80131aa:	b1bb      	cbz	r3, 80131dc <rcutils_string_map_getn+0x44>
 80131ac:	4691      	mov	r9, r2
 80131ae:	e9d3 7600 	ldrd	r7, r6, [r3]
 80131b2:	b19e      	cbz	r6, 80131dc <rcutils_string_map_getn+0x44>
 80131b4:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
 80131b8:	eb07 0ac4 	add.w	sl, r7, r4, lsl #3
 80131bc:	3401      	adds	r4, #1
 80131be:	4628      	mov	r0, r5
 80131c0:	b155      	cbz	r5, 80131d8 <rcutils_string_map_getn+0x40>
 80131c2:	f7ed f89d 	bl	8000300 <strlen>
 80131c6:	4602      	mov	r2, r0
 80131c8:	4629      	mov	r1, r5
 80131ca:	4640      	mov	r0, r8
 80131cc:	454a      	cmp	r2, r9
 80131ce:	bf38      	it	cc
 80131d0:	464a      	movcc	r2, r9
 80131d2:	f007 fa1c 	bl	801a60e <strncmp>
 80131d6:	b120      	cbz	r0, 80131e2 <rcutils_string_map_getn+0x4a>
 80131d8:	42a6      	cmp	r6, r4
 80131da:	d1eb      	bne.n	80131b4 <rcutils_string_map_getn+0x1c>
 80131dc:	2000      	movs	r0, #0
 80131de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131e2:	f8da 0004 	ldr.w	r0, [sl, #4]
 80131e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131ea:	4770      	bx	lr
 80131ec:	0000      	movs	r0, r0
	...

080131f0 <rmw_get_zero_initialized_context>:
 80131f0:	b510      	push	{r4, lr}
 80131f2:	4604      	mov	r4, r0
 80131f4:	3010      	adds	r0, #16
 80131f6:	f000 f80f 	bl	8013218 <rmw_get_zero_initialized_init_options>
 80131fa:	2300      	movs	r3, #0
 80131fc:	4620      	mov	r0, r4
 80131fe:	60a3      	str	r3, [r4, #8]
 8013200:	66a3      	str	r3, [r4, #104]	; 0x68
 8013202:	66e3      	str	r3, [r4, #108]	; 0x6c
 8013204:	ed9f 7b02 	vldr	d7, [pc, #8]	; 8013210 <rmw_get_zero_initialized_context+0x20>
 8013208:	ed84 7b00 	vstr	d7, [r4]
 801320c:	bd10      	pop	{r4, pc}
 801320e:	bf00      	nop
	...

08013218 <rmw_get_zero_initialized_init_options>:
 8013218:	b510      	push	{r4, lr}
 801321a:	4604      	mov	r4, r0
 801321c:	2258      	movs	r2, #88	; 0x58
 801321e:	2100      	movs	r1, #0
 8013220:	f007 f9e0 	bl	801a5e4 <memset>
 8013224:	f104 0010 	add.w	r0, r4, #16
 8013228:	f000 f80a 	bl	8013240 <rmw_get_default_security_options>
 801322c:	f104 001c 	add.w	r0, r4, #28
 8013230:	f005 fd54 	bl	8018cdc <rmw_get_zero_initialized_discovery_options>
 8013234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013238:	4620      	mov	r0, r4
 801323a:	60e3      	str	r3, [r4, #12]
 801323c:	bd10      	pop	{r4, pc}
 801323e:	bf00      	nop

08013240 <rmw_get_default_security_options>:
 8013240:	2200      	movs	r2, #0
 8013242:	7002      	strb	r2, [r0, #0]
 8013244:	6042      	str	r2, [r0, #4]
 8013246:	4770      	bx	lr

08013248 <rmw_get_zero_initialized_message_info>:
 8013248:	b510      	push	{r4, lr}
 801324a:	4604      	mov	r4, r0
 801324c:	2238      	movs	r2, #56	; 0x38
 801324e:	2100      	movs	r1, #0
 8013250:	f007 f9c8 	bl	801a5e4 <memset>
 8013254:	4620      	mov	r0, r4
 8013256:	bd10      	pop	{r4, pc}

08013258 <rmw_validate_full_topic_name>:
 8013258:	2800      	cmp	r0, #0
 801325a:	d05d      	beq.n	8013318 <rmw_validate_full_topic_name+0xc0>
 801325c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013260:	460d      	mov	r5, r1
 8013262:	2900      	cmp	r1, #0
 8013264:	d05a      	beq.n	801331c <rmw_validate_full_topic_name+0xc4>
 8013266:	4604      	mov	r4, r0
 8013268:	4616      	mov	r6, r2
 801326a:	f7ed f849 	bl	8000300 <strlen>
 801326e:	b150      	cbz	r0, 8013286 <rmw_validate_full_topic_name+0x2e>
 8013270:	7823      	ldrb	r3, [r4, #0]
 8013272:	2b2f      	cmp	r3, #47	; 0x2f
 8013274:	d00e      	beq.n	8013294 <rmw_validate_full_topic_name+0x3c>
 8013276:	2302      	movs	r3, #2
 8013278:	602b      	str	r3, [r5, #0]
 801327a:	b146      	cbz	r6, 801328e <rmw_validate_full_topic_name+0x36>
 801327c:	2300      	movs	r3, #0
 801327e:	4618      	mov	r0, r3
 8013280:	6033      	str	r3, [r6, #0]
 8013282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013286:	2301      	movs	r3, #1
 8013288:	602b      	str	r3, [r5, #0]
 801328a:	2e00      	cmp	r6, #0
 801328c:	d1f6      	bne.n	801327c <rmw_validate_full_topic_name+0x24>
 801328e:	2000      	movs	r0, #0
 8013290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013294:	1e43      	subs	r3, r0, #1
 8013296:	5ce2      	ldrb	r2, [r4, r3]
 8013298:	2a2f      	cmp	r2, #47	; 0x2f
 801329a:	d041      	beq.n	8013320 <rmw_validate_full_topic_name+0xc8>
 801329c:	1e62      	subs	r2, r4, #1
 801329e:	f1c4 0e01 	rsb	lr, r4, #1
 80132a2:	eb02 0800 	add.w	r8, r2, r0
 80132a6:	eb0e 0702 	add.w	r7, lr, r2
 80132aa:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80132ae:	f023 0120 	bic.w	r1, r3, #32
 80132b2:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 80132b6:	3941      	subs	r1, #65	; 0x41
 80132b8:	2919      	cmp	r1, #25
 80132ba:	d90f      	bls.n	80132dc <rmw_validate_full_topic_name+0x84>
 80132bc:	f1bc 0f0a 	cmp.w	ip, #10
 80132c0:	d90c      	bls.n	80132dc <rmw_validate_full_topic_name+0x84>
 80132c2:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 80132c6:	fab3 f383 	clz	r3, r3
 80132ca:	095b      	lsrs	r3, r3, #5
 80132cc:	b933      	cbnz	r3, 80132dc <rmw_validate_full_topic_name+0x84>
 80132ce:	2204      	movs	r2, #4
 80132d0:	602a      	str	r2, [r5, #0]
 80132d2:	2e00      	cmp	r6, #0
 80132d4:	d0db      	beq.n	801328e <rmw_validate_full_topic_name+0x36>
 80132d6:	4618      	mov	r0, r3
 80132d8:	6037      	str	r7, [r6, #0]
 80132da:	e7d2      	b.n	8013282 <rmw_validate_full_topic_name+0x2a>
 80132dc:	4542      	cmp	r2, r8
 80132de:	d1e2      	bne.n	80132a6 <rmw_validate_full_topic_name+0x4e>
 80132e0:	2301      	movs	r3, #1
 80132e2:	4f1a      	ldr	r7, [pc, #104]	; (801334c <rmw_validate_full_topic_name+0xf4>)
 80132e4:	e004      	b.n	80132f0 <rmw_validate_full_topic_name+0x98>
 80132e6:	4298      	cmp	r0, r3
 80132e8:	f104 0401 	add.w	r4, r4, #1
 80132ec:	4613      	mov	r3, r2
 80132ee:	d91c      	bls.n	801332a <rmw_validate_full_topic_name+0xd2>
 80132f0:	4298      	cmp	r0, r3
 80132f2:	f103 0201 	add.w	r2, r3, #1
 80132f6:	d0f6      	beq.n	80132e6 <rmw_validate_full_topic_name+0x8e>
 80132f8:	7821      	ldrb	r1, [r4, #0]
 80132fa:	292f      	cmp	r1, #47	; 0x2f
 80132fc:	d1f3      	bne.n	80132e6 <rmw_validate_full_topic_name+0x8e>
 80132fe:	7861      	ldrb	r1, [r4, #1]
 8013300:	292f      	cmp	r1, #47	; 0x2f
 8013302:	d01e      	beq.n	8013342 <rmw_validate_full_topic_name+0xea>
 8013304:	5dc9      	ldrb	r1, [r1, r7]
 8013306:	0749      	lsls	r1, r1, #29
 8013308:	d5ed      	bpl.n	80132e6 <rmw_validate_full_topic_name+0x8e>
 801330a:	2206      	movs	r2, #6
 801330c:	602a      	str	r2, [r5, #0]
 801330e:	2e00      	cmp	r6, #0
 8013310:	d0bd      	beq.n	801328e <rmw_validate_full_topic_name+0x36>
 8013312:	2000      	movs	r0, #0
 8013314:	6033      	str	r3, [r6, #0]
 8013316:	e7b4      	b.n	8013282 <rmw_validate_full_topic_name+0x2a>
 8013318:	200b      	movs	r0, #11
 801331a:	4770      	bx	lr
 801331c:	200b      	movs	r0, #11
 801331e:	e7b0      	b.n	8013282 <rmw_validate_full_topic_name+0x2a>
 8013320:	2203      	movs	r2, #3
 8013322:	602a      	str	r2, [r5, #0]
 8013324:	2e00      	cmp	r6, #0
 8013326:	d1f4      	bne.n	8013312 <rmw_validate_full_topic_name+0xba>
 8013328:	e7b1      	b.n	801328e <rmw_validate_full_topic_name+0x36>
 801332a:	28f7      	cmp	r0, #247	; 0xf7
 801332c:	d803      	bhi.n	8013336 <rmw_validate_full_topic_name+0xde>
 801332e:	2300      	movs	r3, #0
 8013330:	4618      	mov	r0, r3
 8013332:	602b      	str	r3, [r5, #0]
 8013334:	e7a5      	b.n	8013282 <rmw_validate_full_topic_name+0x2a>
 8013336:	2307      	movs	r3, #7
 8013338:	602b      	str	r3, [r5, #0]
 801333a:	2e00      	cmp	r6, #0
 801333c:	d0a7      	beq.n	801328e <rmw_validate_full_topic_name+0x36>
 801333e:	23f6      	movs	r3, #246	; 0xf6
 8013340:	e7e7      	b.n	8013312 <rmw_validate_full_topic_name+0xba>
 8013342:	2205      	movs	r2, #5
 8013344:	602a      	str	r2, [r5, #0]
 8013346:	2e00      	cmp	r6, #0
 8013348:	d1e3      	bne.n	8013312 <rmw_validate_full_topic_name+0xba>
 801334a:	e7a0      	b.n	801328e <rmw_validate_full_topic_name+0x36>
 801334c:	0801d070 	.word	0x0801d070

08013350 <rmw_validate_namespace_with_size>:
 8013350:	2800      	cmp	r0, #0
 8013352:	d043      	beq.n	80133dc <rmw_validate_namespace_with_size+0x8c>
 8013354:	b570      	push	{r4, r5, r6, lr}
 8013356:	4614      	mov	r4, r2
 8013358:	b0c2      	sub	sp, #264	; 0x108
 801335a:	b32a      	cbz	r2, 80133a8 <rmw_validate_namespace_with_size+0x58>
 801335c:	2901      	cmp	r1, #1
 801335e:	460d      	mov	r5, r1
 8013360:	461e      	mov	r6, r3
 8013362:	d102      	bne.n	801336a <rmw_validate_namespace_with_size+0x1a>
 8013364:	7803      	ldrb	r3, [r0, #0]
 8013366:	2b2f      	cmp	r3, #47	; 0x2f
 8013368:	d012      	beq.n	8013390 <rmw_validate_namespace_with_size+0x40>
 801336a:	aa01      	add	r2, sp, #4
 801336c:	4669      	mov	r1, sp
 801336e:	f7ff ff73 	bl	8013258 <rmw_validate_full_topic_name>
 8013372:	b980      	cbnz	r0, 8013396 <rmw_validate_namespace_with_size+0x46>
 8013374:	9a00      	ldr	r2, [sp, #0]
 8013376:	b14a      	cbz	r2, 801338c <rmw_validate_namespace_with_size+0x3c>
 8013378:	2a07      	cmp	r2, #7
 801337a:	d007      	beq.n	801338c <rmw_validate_namespace_with_size+0x3c>
 801337c:	1e53      	subs	r3, r2, #1
 801337e:	2b05      	cmp	r3, #5
 8013380:	d82e      	bhi.n	80133e0 <rmw_validate_namespace_with_size+0x90>
 8013382:	e8df f003 	tbb	[pc, r3]
 8013386:	1f1c      	.short	0x1f1c
 8013388:	14282522 	.word	0x14282522
 801338c:	2df5      	cmp	r5, #245	; 0xf5
 801338e:	d804      	bhi.n	801339a <rmw_validate_namespace_with_size+0x4a>
 8013390:	2300      	movs	r3, #0
 8013392:	4618      	mov	r0, r3
 8013394:	6023      	str	r3, [r4, #0]
 8013396:	b042      	add	sp, #264	; 0x108
 8013398:	bd70      	pop	{r4, r5, r6, pc}
 801339a:	2307      	movs	r3, #7
 801339c:	6023      	str	r3, [r4, #0]
 801339e:	2e00      	cmp	r6, #0
 80133a0:	d0f9      	beq.n	8013396 <rmw_validate_namespace_with_size+0x46>
 80133a2:	23f4      	movs	r3, #244	; 0xf4
 80133a4:	6033      	str	r3, [r6, #0]
 80133a6:	e7f6      	b.n	8013396 <rmw_validate_namespace_with_size+0x46>
 80133a8:	200b      	movs	r0, #11
 80133aa:	b042      	add	sp, #264	; 0x108
 80133ac:	bd70      	pop	{r4, r5, r6, pc}
 80133ae:	2306      	movs	r3, #6
 80133b0:	6023      	str	r3, [r4, #0]
 80133b2:	2e00      	cmp	r6, #0
 80133b4:	d0ef      	beq.n	8013396 <rmw_validate_namespace_with_size+0x46>
 80133b6:	9b01      	ldr	r3, [sp, #4]
 80133b8:	6033      	str	r3, [r6, #0]
 80133ba:	b042      	add	sp, #264	; 0x108
 80133bc:	bd70      	pop	{r4, r5, r6, pc}
 80133be:	2301      	movs	r3, #1
 80133c0:	6023      	str	r3, [r4, #0]
 80133c2:	e7f6      	b.n	80133b2 <rmw_validate_namespace_with_size+0x62>
 80133c4:	2302      	movs	r3, #2
 80133c6:	6023      	str	r3, [r4, #0]
 80133c8:	e7f3      	b.n	80133b2 <rmw_validate_namespace_with_size+0x62>
 80133ca:	2303      	movs	r3, #3
 80133cc:	6023      	str	r3, [r4, #0]
 80133ce:	e7f0      	b.n	80133b2 <rmw_validate_namespace_with_size+0x62>
 80133d0:	2304      	movs	r3, #4
 80133d2:	6023      	str	r3, [r4, #0]
 80133d4:	e7ed      	b.n	80133b2 <rmw_validate_namespace_with_size+0x62>
 80133d6:	2305      	movs	r3, #5
 80133d8:	6023      	str	r3, [r4, #0]
 80133da:	e7ea      	b.n	80133b2 <rmw_validate_namespace_with_size+0x62>
 80133dc:	200b      	movs	r0, #11
 80133de:	4770      	bx	lr
 80133e0:	4613      	mov	r3, r2
 80133e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80133e6:	4a03      	ldr	r2, [pc, #12]	; (80133f4 <rmw_validate_namespace_with_size+0xa4>)
 80133e8:	a802      	add	r0, sp, #8
 80133ea:	f7ff fd65 	bl	8012eb8 <rcutils_snprintf>
 80133ee:	2001      	movs	r0, #1
 80133f0:	e7d1      	b.n	8013396 <rmw_validate_namespace_with_size+0x46>
 80133f2:	bf00      	nop
 80133f4:	0801c72c 	.word	0x0801c72c

080133f8 <rmw_validate_namespace>:
 80133f8:	b168      	cbz	r0, 8013416 <rmw_validate_namespace+0x1e>
 80133fa:	b570      	push	{r4, r5, r6, lr}
 80133fc:	460d      	mov	r5, r1
 80133fe:	4616      	mov	r6, r2
 8013400:	4604      	mov	r4, r0
 8013402:	f7ec ff7d 	bl	8000300 <strlen>
 8013406:	4633      	mov	r3, r6
 8013408:	4601      	mov	r1, r0
 801340a:	462a      	mov	r2, r5
 801340c:	4620      	mov	r0, r4
 801340e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013412:	f7ff bf9d 	b.w	8013350 <rmw_validate_namespace_with_size>
 8013416:	200b      	movs	r0, #11
 8013418:	4770      	bx	lr
 801341a:	bf00      	nop

0801341c <rmw_namespace_validation_result_string>:
 801341c:	2807      	cmp	r0, #7
 801341e:	d803      	bhi.n	8013428 <rmw_namespace_validation_result_string+0xc>
 8013420:	4b02      	ldr	r3, [pc, #8]	; (801342c <rmw_namespace_validation_result_string+0x10>)
 8013422:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8013426:	4770      	bx	lr
 8013428:	4801      	ldr	r0, [pc, #4]	; (8013430 <rmw_namespace_validation_result_string+0x14>)
 801342a:	4770      	bx	lr
 801342c:	0801c924 	.word	0x0801c924
 8013430:	0801c77c 	.word	0x0801c77c

08013434 <rmw_validate_node_name>:
 8013434:	2800      	cmp	r0, #0
 8013436:	d042      	beq.n	80134be <rmw_validate_node_name+0x8a>
 8013438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801343c:	460d      	mov	r5, r1
 801343e:	2900      	cmp	r1, #0
 8013440:	d03f      	beq.n	80134c2 <rmw_validate_node_name+0x8e>
 8013442:	4604      	mov	r4, r0
 8013444:	4616      	mov	r6, r2
 8013446:	f7ec ff5b 	bl	8000300 <strlen>
 801344a:	b310      	cbz	r0, 8013492 <rmw_validate_node_name+0x5e>
 801344c:	1e63      	subs	r3, r4, #1
 801344e:	f1c4 0101 	rsb	r1, r4, #1
 8013452:	eb03 0800 	add.w	r8, r3, r0
 8013456:	18cf      	adds	r7, r1, r3
 8013458:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801345c:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8013460:	f02e 0c20 	bic.w	ip, lr, #32
 8013464:	2a09      	cmp	r2, #9
 8013466:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 801346a:	d905      	bls.n	8013478 <rmw_validate_node_name+0x44>
 801346c:	f1bc 0f19 	cmp.w	ip, #25
 8013470:	d902      	bls.n	8013478 <rmw_validate_node_name+0x44>
 8013472:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8013476:	d114      	bne.n	80134a2 <rmw_validate_node_name+0x6e>
 8013478:	4598      	cmp	r8, r3
 801347a:	d1ec      	bne.n	8013456 <rmw_validate_node_name+0x22>
 801347c:	7822      	ldrb	r2, [r4, #0]
 801347e:	4b16      	ldr	r3, [pc, #88]	; (80134d8 <rmw_validate_node_name+0xa4>)
 8013480:	5cd3      	ldrb	r3, [r2, r3]
 8013482:	f013 0304 	ands.w	r3, r3, #4
 8013486:	d113      	bne.n	80134b0 <rmw_validate_node_name+0x7c>
 8013488:	28ff      	cmp	r0, #255	; 0xff
 801348a:	d81c      	bhi.n	80134c6 <rmw_validate_node_name+0x92>
 801348c:	4618      	mov	r0, r3
 801348e:	602b      	str	r3, [r5, #0]
 8013490:	e00c      	b.n	80134ac <rmw_validate_node_name+0x78>
 8013492:	2301      	movs	r3, #1
 8013494:	602b      	str	r3, [r5, #0]
 8013496:	b17e      	cbz	r6, 80134b8 <rmw_validate_node_name+0x84>
 8013498:	2300      	movs	r3, #0
 801349a:	4618      	mov	r0, r3
 801349c:	6033      	str	r3, [r6, #0]
 801349e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134a2:	2302      	movs	r3, #2
 80134a4:	602b      	str	r3, [r5, #0]
 80134a6:	b13e      	cbz	r6, 80134b8 <rmw_validate_node_name+0x84>
 80134a8:	2000      	movs	r0, #0
 80134aa:	6037      	str	r7, [r6, #0]
 80134ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134b0:	2303      	movs	r3, #3
 80134b2:	602b      	str	r3, [r5, #0]
 80134b4:	2e00      	cmp	r6, #0
 80134b6:	d1ef      	bne.n	8013498 <rmw_validate_node_name+0x64>
 80134b8:	2000      	movs	r0, #0
 80134ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134be:	200b      	movs	r0, #11
 80134c0:	4770      	bx	lr
 80134c2:	200b      	movs	r0, #11
 80134c4:	e7f2      	b.n	80134ac <rmw_validate_node_name+0x78>
 80134c6:	2204      	movs	r2, #4
 80134c8:	602a      	str	r2, [r5, #0]
 80134ca:	2e00      	cmp	r6, #0
 80134cc:	d0f4      	beq.n	80134b8 <rmw_validate_node_name+0x84>
 80134ce:	22fe      	movs	r2, #254	; 0xfe
 80134d0:	4618      	mov	r0, r3
 80134d2:	6032      	str	r2, [r6, #0]
 80134d4:	e7ea      	b.n	80134ac <rmw_validate_node_name+0x78>
 80134d6:	bf00      	nop
 80134d8:	0801d070 	.word	0x0801d070

080134dc <rmw_node_name_validation_result_string>:
 80134dc:	2804      	cmp	r0, #4
 80134de:	d803      	bhi.n	80134e8 <rmw_node_name_validation_result_string+0xc>
 80134e0:	4b02      	ldr	r3, [pc, #8]	; (80134ec <rmw_node_name_validation_result_string+0x10>)
 80134e2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80134e6:	4770      	bx	lr
 80134e8:	4801      	ldr	r0, [pc, #4]	; (80134f0 <rmw_node_name_validation_result_string+0x14>)
 80134ea:	4770      	bx	lr
 80134ec:	0801ca30 	.word	0x0801ca30
 80134f0:	0801c944 	.word	0x0801c944

080134f4 <rmw_destroy_client>:
 80134f4:	b570      	push	{r4, r5, r6, lr}
 80134f6:	b128      	cbz	r0, 8013504 <rmw_destroy_client+0x10>
 80134f8:	4604      	mov	r4, r0
 80134fa:	6800      	ldr	r0, [r0, #0]
 80134fc:	460d      	mov	r5, r1
 80134fe:	f001 fc99 	bl	8014e34 <is_uxrce_rmw_identifier_valid>
 8013502:	b910      	cbnz	r0, 801350a <rmw_destroy_client+0x16>
 8013504:	2401      	movs	r4, #1
 8013506:	4620      	mov	r0, r4
 8013508:	bd70      	pop	{r4, r5, r6, pc}
 801350a:	6863      	ldr	r3, [r4, #4]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d0f9      	beq.n	8013504 <rmw_destroy_client+0x10>
 8013510:	2d00      	cmp	r5, #0
 8013512:	d0f7      	beq.n	8013504 <rmw_destroy_client+0x10>
 8013514:	6828      	ldr	r0, [r5, #0]
 8013516:	f001 fc8d 	bl	8014e34 <is_uxrce_rmw_identifier_valid>
 801351a:	2800      	cmp	r0, #0
 801351c:	d0f2      	beq.n	8013504 <rmw_destroy_client+0x10>
 801351e:	686e      	ldr	r6, [r5, #4]
 8013520:	2e00      	cmp	r6, #0
 8013522:	d0ef      	beq.n	8013504 <rmw_destroy_client+0x10>
 8013524:	6864      	ldr	r4, [r4, #4]
 8013526:	6932      	ldr	r2, [r6, #16]
 8013528:	6920      	ldr	r0, [r4, #16]
 801352a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801352e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013532:	6819      	ldr	r1, [r3, #0]
 8013534:	f001 ff02 	bl	801533c <uxr_buffer_cancel_data>
 8013538:	4602      	mov	r2, r0
 801353a:	6920      	ldr	r0, [r4, #16]
 801353c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8013540:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013544:	f001 fbaa 	bl	8014c9c <run_xrce_session>
 8013548:	6920      	ldr	r0, [r4, #16]
 801354a:	6932      	ldr	r2, [r6, #16]
 801354c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013550:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013554:	6819      	ldr	r1, [r3, #0]
 8013556:	f001 fd11 	bl	8014f7c <uxr_buffer_delete_entity>
 801355a:	4602      	mov	r2, r0
 801355c:	6920      	ldr	r0, [r4, #16]
 801355e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8013562:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013566:	f001 fb99 	bl	8014c9c <run_xrce_session>
 801356a:	4603      	mov	r3, r0
 801356c:	4628      	mov	r0, r5
 801356e:	2b00      	cmp	r3, #0
 8013570:	bf14      	ite	ne
 8013572:	2400      	movne	r4, #0
 8013574:	2402      	moveq	r4, #2
 8013576:	f001 fa6d 	bl	8014a54 <rmw_uxrce_fini_client_memory>
 801357a:	e7c4      	b.n	8013506 <rmw_destroy_client+0x12>

0801357c <rmw_get_gid_for_client>:
 801357c:	b1b9      	cbz	r1, 80135ae <rmw_get_gid_for_client+0x32>
 801357e:	b538      	push	{r3, r4, r5, lr}
 8013580:	4605      	mov	r5, r0
 8013582:	b180      	cbz	r0, 80135a6 <rmw_get_gid_for_client+0x2a>
 8013584:	6800      	ldr	r0, [r0, #0]
 8013586:	460c      	mov	r4, r1
 8013588:	b120      	cbz	r0, 8013594 <rmw_get_gid_for_client+0x18>
 801358a:	4b0a      	ldr	r3, [pc, #40]	; (80135b4 <rmw_get_gid_for_client+0x38>)
 801358c:	6819      	ldr	r1, [r3, #0]
 801358e:	f7ec fe57 	bl	8000240 <strcmp>
 8013592:	b950      	cbnz	r0, 80135aa <rmw_get_gid_for_client+0x2e>
 8013594:	686b      	ldr	r3, [r5, #4]
 8013596:	2000      	movs	r0, #0
 8013598:	6060      	str	r0, [r4, #4]
 801359a:	60a0      	str	r0, [r4, #8]
 801359c:	60e0      	str	r0, [r4, #12]
 801359e:	6120      	str	r0, [r4, #16]
 80135a0:	691b      	ldr	r3, [r3, #16]
 80135a2:	6063      	str	r3, [r4, #4]
 80135a4:	bd38      	pop	{r3, r4, r5, pc}
 80135a6:	200b      	movs	r0, #11
 80135a8:	bd38      	pop	{r3, r4, r5, pc}
 80135aa:	200c      	movs	r0, #12
 80135ac:	bd38      	pop	{r3, r4, r5, pc}
 80135ae:	200b      	movs	r0, #11
 80135b0:	4770      	bx	lr
 80135b2:	bf00      	nop
 80135b4:	0801ceb0 	.word	0x0801ceb0

080135b8 <rmw_get_implementation_identifier>:
 80135b8:	4b01      	ldr	r3, [pc, #4]	; (80135c0 <rmw_get_implementation_identifier+0x8>)
 80135ba:	6818      	ldr	r0, [r3, #0]
 80135bc:	4770      	bx	lr
 80135be:	bf00      	nop
 80135c0:	0801ceb0 	.word	0x0801ceb0

080135c4 <rmw_init_options_init>:
 80135c4:	b084      	sub	sp, #16
 80135c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135c8:	b083      	sub	sp, #12
 80135ca:	ad09      	add	r5, sp, #36	; 0x24
 80135cc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80135d0:	b130      	cbz	r0, 80135e0 <rmw_init_options_init+0x1c>
 80135d2:	4604      	mov	r4, r0
 80135d4:	4628      	mov	r0, r5
 80135d6:	f7f9 fb8b 	bl	800ccf0 <rcutils_allocator_is_valid>
 80135da:	b108      	cbz	r0, 80135e0 <rmw_init_options_init+0x1c>
 80135dc:	68a6      	ldr	r6, [r4, #8]
 80135de:	b12e      	cbz	r6, 80135ec <rmw_init_options_init+0x28>
 80135e0:	200b      	movs	r0, #11
 80135e2:	b003      	add	sp, #12
 80135e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80135e8:	b004      	add	sp, #16
 80135ea:	4770      	bx	lr
 80135ec:	2200      	movs	r2, #0
 80135ee:	2300      	movs	r3, #0
 80135f0:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 80135f4:	f8df e098 	ldr.w	lr, [pc, #152]	; 8013690 <rmw_init_options_init+0xcc>
 80135f8:	466f      	mov	r7, sp
 80135fa:	e9c4 2300 	strd	r2, r3, [r4]
 80135fe:	4b20      	ldr	r3, [pc, #128]	; (8013680 <rmw_init_options_init+0xbc>)
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	60a3      	str	r3, [r4, #8]
 8013604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013606:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801360a:	682b      	ldr	r3, [r5, #0]
 801360c:	4638      	mov	r0, r7
 801360e:	f8cc 3000 	str.w	r3, [ip]
 8013612:	f8c4 e03c 	str.w	lr, [r4, #60]	; 0x3c
 8013616:	60e6      	str	r6, [r4, #12]
 8013618:	f7ff fe12 	bl	8013240 <rmw_get_default_security_options>
 801361c:	f104 0310 	add.w	r3, r4, #16
 8013620:	2203      	movs	r2, #3
 8013622:	e897 0003 	ldmia.w	r7, {r0, r1}
 8013626:	e883 0003 	stmia.w	r3, {r0, r1}
 801362a:	4816      	ldr	r0, [pc, #88]	; (8013684 <rmw_init_options_init+0xc0>)
 801362c:	4916      	ldr	r1, [pc, #88]	; (8013688 <rmw_init_options_init+0xc4>)
 801362e:	7626      	strb	r6, [r4, #24]
 8013630:	f001 f950 	bl	80148d4 <rmw_uxrce_init_init_options_impl_memory>
 8013634:	4813      	ldr	r0, [pc, #76]	; (8013684 <rmw_init_options_init+0xc0>)
 8013636:	f005 fcf5 	bl	8019024 <get_memory>
 801363a:	b1f0      	cbz	r0, 801367a <rmw_init_options_init+0xb6>
 801363c:	4a13      	ldr	r2, [pc, #76]	; (801368c <rmw_init_options_init+0xc8>)
 801363e:	6883      	ldr	r3, [r0, #8]
 8013640:	6851      	ldr	r1, [r2, #4]
 8013642:	6563      	str	r3, [r4, #84]	; 0x54
 8013644:	7810      	ldrb	r0, [r2, #0]
 8013646:	6159      	str	r1, [r3, #20]
 8013648:	68d1      	ldr	r1, [r2, #12]
 801364a:	7418      	strb	r0, [r3, #16]
 801364c:	61d9      	str	r1, [r3, #28]
 801364e:	6911      	ldr	r1, [r2, #16]
 8013650:	6219      	str	r1, [r3, #32]
 8013652:	6951      	ldr	r1, [r2, #20]
 8013654:	6892      	ldr	r2, [r2, #8]
 8013656:	6259      	str	r1, [r3, #36]	; 0x24
 8013658:	619a      	str	r2, [r3, #24]
 801365a:	f003 fe1b 	bl	8017294 <uxr_nanos>
 801365e:	f006 fd05 	bl	801a06c <srand>
 8013662:	f006 fd31 	bl	801a0c8 <rand>
 8013666:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8013668:	6298      	str	r0, [r3, #40]	; 0x28
 801366a:	2800      	cmp	r0, #0
 801366c:	d0f9      	beq.n	8013662 <rmw_init_options_init+0x9e>
 801366e:	2000      	movs	r0, #0
 8013670:	b003      	add	sp, #12
 8013672:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013676:	b004      	add	sp, #16
 8013678:	4770      	bx	lr
 801367a:	2001      	movs	r0, #1
 801367c:	e7b1      	b.n	80135e2 <rmw_init_options_init+0x1e>
 801367e:	bf00      	nop
 8013680:	0801ceb0 	.word	0x0801ceb0
 8013684:	2001048c 	.word	0x2001048c
 8013688:	2000bc60 	.word	0x2000bc60
 801368c:	2000b52c 	.word	0x2000b52c
 8013690:	0801c4b8 	.word	0x0801c4b8

08013694 <rmw_init_options_copy>:
 8013694:	b570      	push	{r4, r5, r6, lr}
 8013696:	b158      	cbz	r0, 80136b0 <rmw_init_options_copy+0x1c>
 8013698:	460d      	mov	r5, r1
 801369a:	b149      	cbz	r1, 80136b0 <rmw_init_options_copy+0x1c>
 801369c:	4604      	mov	r4, r0
 801369e:	6880      	ldr	r0, [r0, #8]
 80136a0:	b120      	cbz	r0, 80136ac <rmw_init_options_copy+0x18>
 80136a2:	4b13      	ldr	r3, [pc, #76]	; (80136f0 <rmw_init_options_copy+0x5c>)
 80136a4:	6819      	ldr	r1, [r3, #0]
 80136a6:	f7ec fdcb 	bl	8000240 <strcmp>
 80136aa:	b9d8      	cbnz	r0, 80136e4 <rmw_init_options_copy+0x50>
 80136ac:	68ae      	ldr	r6, [r5, #8]
 80136ae:	b116      	cbz	r6, 80136b6 <rmw_init_options_copy+0x22>
 80136b0:	260b      	movs	r6, #11
 80136b2:	4630      	mov	r0, r6
 80136b4:	bd70      	pop	{r4, r5, r6, pc}
 80136b6:	2258      	movs	r2, #88	; 0x58
 80136b8:	4621      	mov	r1, r4
 80136ba:	4628      	mov	r0, r5
 80136bc:	f007 f8c3 	bl	801a846 <memcpy>
 80136c0:	480c      	ldr	r0, [pc, #48]	; (80136f4 <rmw_init_options_copy+0x60>)
 80136c2:	f005 fcaf 	bl	8019024 <get_memory>
 80136c6:	b180      	cbz	r0, 80136ea <rmw_init_options_copy+0x56>
 80136c8:	6883      	ldr	r3, [r0, #8]
 80136ca:	656b      	str	r3, [r5, #84]	; 0x54
 80136cc:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80136ce:	f103 0410 	add.w	r4, r3, #16
 80136d2:	3510      	adds	r5, #16
 80136d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80136d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80136d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80136dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80136e0:	4630      	mov	r0, r6
 80136e2:	bd70      	pop	{r4, r5, r6, pc}
 80136e4:	260c      	movs	r6, #12
 80136e6:	4630      	mov	r0, r6
 80136e8:	bd70      	pop	{r4, r5, r6, pc}
 80136ea:	2601      	movs	r6, #1
 80136ec:	e7e1      	b.n	80136b2 <rmw_init_options_copy+0x1e>
 80136ee:	bf00      	nop
 80136f0:	0801ceb0 	.word	0x0801ceb0
 80136f4:	2001048c 	.word	0x2001048c

080136f8 <rmw_init_options_fini>:
 80136f8:	b368      	cbz	r0, 8013756 <rmw_init_options_fini+0x5e>
 80136fa:	b510      	push	{r4, lr}
 80136fc:	4604      	mov	r4, r0
 80136fe:	b096      	sub	sp, #88	; 0x58
 8013700:	3040      	adds	r0, #64	; 0x40
 8013702:	f7f9 faf5 	bl	800ccf0 <rcutils_allocator_is_valid>
 8013706:	b1f0      	cbz	r0, 8013746 <rmw_init_options_fini+0x4e>
 8013708:	68a0      	ldr	r0, [r4, #8]
 801370a:	b120      	cbz	r0, 8013716 <rmw_init_options_fini+0x1e>
 801370c:	4b13      	ldr	r3, [pc, #76]	; (801375c <rmw_init_options_fini+0x64>)
 801370e:	6819      	ldr	r1, [r3, #0]
 8013710:	f7ec fd96 	bl	8000240 <strcmp>
 8013714:	b9e8      	cbnz	r0, 8013752 <rmw_init_options_fini+0x5a>
 8013716:	4b12      	ldr	r3, [pc, #72]	; (8013760 <rmw_init_options_fini+0x68>)
 8013718:	6819      	ldr	r1, [r3, #0]
 801371a:	b1b9      	cbz	r1, 801374c <rmw_init_options_fini+0x54>
 801371c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801371e:	e001      	b.n	8013724 <rmw_init_options_fini+0x2c>
 8013720:	6849      	ldr	r1, [r1, #4]
 8013722:	b199      	cbz	r1, 801374c <rmw_init_options_fini+0x54>
 8013724:	688b      	ldr	r3, [r1, #8]
 8013726:	429a      	cmp	r2, r3
 8013728:	d1fa      	bne.n	8013720 <rmw_init_options_fini+0x28>
 801372a:	480d      	ldr	r0, [pc, #52]	; (8013760 <rmw_init_options_fini+0x68>)
 801372c:	f005 fc8a 	bl	8019044 <put_memory>
 8013730:	4668      	mov	r0, sp
 8013732:	f7ff fd71 	bl	8013218 <rmw_get_zero_initialized_init_options>
 8013736:	2258      	movs	r2, #88	; 0x58
 8013738:	4669      	mov	r1, sp
 801373a:	4620      	mov	r0, r4
 801373c:	f007 f883 	bl	801a846 <memcpy>
 8013740:	2000      	movs	r0, #0
 8013742:	b016      	add	sp, #88	; 0x58
 8013744:	bd10      	pop	{r4, pc}
 8013746:	200b      	movs	r0, #11
 8013748:	b016      	add	sp, #88	; 0x58
 801374a:	bd10      	pop	{r4, pc}
 801374c:	2001      	movs	r0, #1
 801374e:	b016      	add	sp, #88	; 0x58
 8013750:	bd10      	pop	{r4, pc}
 8013752:	200c      	movs	r0, #12
 8013754:	e7f5      	b.n	8013742 <rmw_init_options_fini+0x4a>
 8013756:	200b      	movs	r0, #11
 8013758:	4770      	bx	lr
 801375a:	bf00      	nop
 801375c:	0801ceb0 	.word	0x0801ceb0
 8013760:	2001048c 	.word	0x2001048c

08013764 <rmw_init>:
 8013764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013768:	b083      	sub	sp, #12
 801376a:	2800      	cmp	r0, #0
 801376c:	f000 80d3 	beq.w	8013916 <rmw_init+0x1b2>
 8013770:	460e      	mov	r6, r1
 8013772:	2900      	cmp	r1, #0
 8013774:	f000 80cf 	beq.w	8013916 <rmw_init+0x1b2>
 8013778:	6d43      	ldr	r3, [r0, #84]	; 0x54
 801377a:	4605      	mov	r5, r0
 801377c:	2b00      	cmp	r3, #0
 801377e:	f000 80ca 	beq.w	8013916 <rmw_init+0x1b2>
 8013782:	4b78      	ldr	r3, [pc, #480]	; (8013964 <rmw_init+0x200>)
 8013784:	6880      	ldr	r0, [r0, #8]
 8013786:	681f      	ldr	r7, [r3, #0]
 8013788:	b128      	cbz	r0, 8013796 <rmw_init+0x32>
 801378a:	4639      	mov	r1, r7
 801378c:	f7ec fd58 	bl	8000240 <strcmp>
 8013790:	2800      	cmp	r0, #0
 8013792:	f040 80ca 	bne.w	801392a <rmw_init+0x1c6>
 8013796:	4c74      	ldr	r4, [pc, #464]	; (8013968 <rmw_init+0x204>)
 8013798:	f04f 0800 	mov.w	r8, #0
 801379c:	4973      	ldr	r1, [pc, #460]	; (801396c <rmw_init+0x208>)
 801379e:	4874      	ldr	r0, [pc, #464]	; (8013970 <rmw_init+0x20c>)
 80137a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80137a4:	60b7      	str	r7, [r6, #8]
 80137a6:	e9c6 2300 	strd	r2, r3, [r6]
 80137aa:	68eb      	ldr	r3, [r5, #12]
 80137ac:	2201      	movs	r2, #1
 80137ae:	66b3      	str	r3, [r6, #104]	; 0x68
 80137b0:	f001 f830 	bl	8014814 <rmw_uxrce_init_session_memory>
 80137b4:	4620      	mov	r0, r4
 80137b6:	2204      	movs	r2, #4
 80137b8:	496e      	ldr	r1, [pc, #440]	; (8013974 <rmw_init+0x210>)
 80137ba:	f001 f86b 	bl	8014894 <rmw_uxrce_init_static_input_buffer_memory>
 80137be:	486c      	ldr	r0, [pc, #432]	; (8013970 <rmw_init+0x20c>)
 80137c0:	f884 800d 	strb.w	r8, [r4, #13]
 80137c4:	f005 fc2e 	bl	8019024 <get_memory>
 80137c8:	2800      	cmp	r0, #0
 80137ca:	f000 80a9 	beq.w	8013920 <rmw_init+0x1bc>
 80137ce:	6884      	ldr	r4, [r0, #8]
 80137d0:	6d68      	ldr	r0, [r5, #84]	; 0x54
 80137d2:	f104 0910 	add.w	r9, r4, #16
 80137d6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80137d8:	f890 c010 	ldrb.w	ip, [r0, #16]
 80137dc:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80137e0:	9101      	str	r1, [sp, #4]
 80137e2:	4661      	mov	r1, ip
 80137e4:	6a00      	ldr	r0, [r0, #32]
 80137e6:	9000      	str	r0, [sp, #0]
 80137e8:	4648      	mov	r0, r9
 80137ea:	f001 fcfb 	bl	80151e4 <uxr_set_custom_transport_callbacks>
 80137ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80137f2:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80137f6:	4960      	ldr	r1, [pc, #384]	; (8013978 <rmw_init+0x214>)
 80137f8:	4860      	ldr	r0, [pc, #384]	; (801397c <rmw_init+0x218>)
 80137fa:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 80137fe:	f504 725e 	add.w	r2, r4, #888	; 0x378
 8013802:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 8013806:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 801380a:	2201      	movs	r2, #1
 801380c:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8013810:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 8013814:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8013818:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 801381c:	66f4      	str	r4, [r6, #108]	; 0x6c
 801381e:	f000 ffd9 	bl	80147d4 <rmw_uxrce_init_node_memory>
 8013822:	2205      	movs	r2, #5
 8013824:	4956      	ldr	r1, [pc, #344]	; (8013980 <rmw_init+0x21c>)
 8013826:	4857      	ldr	r0, [pc, #348]	; (8013984 <rmw_init+0x220>)
 8013828:	f000 ffb4 	bl	8014794 <rmw_uxrce_init_subscription_memory>
 801382c:	220a      	movs	r2, #10
 801382e:	4956      	ldr	r1, [pc, #344]	; (8013988 <rmw_init+0x224>)
 8013830:	4856      	ldr	r0, [pc, #344]	; (801398c <rmw_init+0x228>)
 8013832:	f000 ff8f 	bl	8014754 <rmw_uxrce_init_publisher_memory>
 8013836:	2202      	movs	r2, #2
 8013838:	4955      	ldr	r1, [pc, #340]	; (8013990 <rmw_init+0x22c>)
 801383a:	4856      	ldr	r0, [pc, #344]	; (8013994 <rmw_init+0x230>)
 801383c:	f000 ff4a 	bl	80146d4 <rmw_uxrce_init_service_memory>
 8013840:	2201      	movs	r2, #1
 8013842:	4955      	ldr	r1, [pc, #340]	; (8013998 <rmw_init+0x234>)
 8013844:	4855      	ldr	r0, [pc, #340]	; (801399c <rmw_init+0x238>)
 8013846:	f000 ff65 	bl	8014714 <rmw_uxrce_init_client_memory>
 801384a:	220f      	movs	r2, #15
 801384c:	4954      	ldr	r1, [pc, #336]	; (80139a0 <rmw_init+0x23c>)
 801384e:	4855      	ldr	r0, [pc, #340]	; (80139a4 <rmw_init+0x240>)
 8013850:	f001 f800 	bl	8014854 <rmw_uxrce_init_topic_memory>
 8013854:	2203      	movs	r2, #3
 8013856:	4954      	ldr	r1, [pc, #336]	; (80139a8 <rmw_init+0x244>)
 8013858:	4854      	ldr	r0, [pc, #336]	; (80139ac <rmw_init+0x248>)
 801385a:	f001 f83b 	bl	80148d4 <rmw_uxrce_init_init_options_impl_memory>
 801385e:	2204      	movs	r2, #4
 8013860:	4953      	ldr	r1, [pc, #332]	; (80139b0 <rmw_init+0x24c>)
 8013862:	4854      	ldr	r0, [pc, #336]	; (80139b4 <rmw_init+0x250>)
 8013864:	f001 f856 	bl	8014914 <rmw_uxrce_init_wait_set_memory>
 8013868:	4953      	ldr	r1, [pc, #332]	; (80139b8 <rmw_init+0x254>)
 801386a:	4854      	ldr	r0, [pc, #336]	; (80139bc <rmw_init+0x258>)
 801386c:	2204      	movs	r2, #4
 801386e:	f001 f871 	bl	8014954 <rmw_uxrce_init_guard_condition_memory>
 8013872:	4642      	mov	r2, r8
 8013874:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8013876:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 8013878:	f000 fd92 	bl	80143a0 <rmw_uxrce_transport_init>
 801387c:	4607      	mov	r7, r0
 801387e:	2800      	cmp	r0, #0
 8013880:	d158      	bne.n	8013934 <rmw_init+0x1d0>
 8013882:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8013884:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8013888:	f504 7122 	add.w	r1, r4, #648	; 0x288
 801388c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801388e:	4628      	mov	r0, r5
 8013890:	f001 feda 	bl	8015648 <uxr_init_session>
 8013894:	4622      	mov	r2, r4
 8013896:	494a      	ldr	r1, [pc, #296]	; (80139c0 <rmw_init+0x25c>)
 8013898:	4628      	mov	r0, r5
 801389a:	f001 fef9 	bl	8015690 <uxr_set_topic_callback>
 801389e:	463a      	mov	r2, r7
 80138a0:	4948      	ldr	r1, [pc, #288]	; (80139c4 <rmw_init+0x260>)
 80138a2:	4628      	mov	r0, r5
 80138a4:	f001 fef0 	bl	8015688 <uxr_set_status_callback>
 80138a8:	463a      	mov	r2, r7
 80138aa:	4947      	ldr	r1, [pc, #284]	; (80139c8 <rmw_init+0x264>)
 80138ac:	4628      	mov	r0, r5
 80138ae:	f001 fef3 	bl	8015698 <uxr_set_request_callback>
 80138b2:	463a      	mov	r2, r7
 80138b4:	4945      	ldr	r1, [pc, #276]	; (80139cc <rmw_init+0x268>)
 80138b6:	4628      	mov	r0, r5
 80138b8:	f001 fef2 	bl	80156a0 <uxr_set_reply_callback>
 80138bc:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80138c0:	2304      	movs	r3, #4
 80138c2:	f504 7165 	add.w	r1, r4, #916	; 0x394
 80138c6:	0092      	lsls	r2, r2, #2
 80138c8:	4628      	mov	r0, r5
 80138ca:	f001 ff29 	bl	8015720 <uxr_create_input_reliable_stream>
 80138ce:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80138d2:	2304      	movs	r3, #4
 80138d4:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 80138d8:	0092      	lsls	r2, r2, #2
 80138da:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 80138de:	4628      	mov	r0, r5
 80138e0:	f001 fef4 	bl	80156cc <uxr_create_output_reliable_stream>
 80138e4:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 80138e8:	4628      	mov	r0, r5
 80138ea:	f001 ff13 	bl	8015714 <uxr_create_input_best_effort_stream>
 80138ee:	f241 3194 	movw	r1, #5012	; 0x1394
 80138f2:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 80138f6:	4628      	mov	r0, r5
 80138f8:	4421      	add	r1, r4
 80138fa:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80138fe:	f001 fed3 	bl	80156a8 <uxr_create_output_best_effort_stream>
 8013902:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8013906:	4628      	mov	r0, r5
 8013908:	f002 fc5c 	bl	80161c4 <uxr_create_session>
 801390c:	b1f8      	cbz	r0, 801394e <rmw_init+0x1ea>
 801390e:	4638      	mov	r0, r7
 8013910:	b003      	add	sp, #12
 8013912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013916:	270b      	movs	r7, #11
 8013918:	4638      	mov	r0, r7
 801391a:	b003      	add	sp, #12
 801391c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013920:	2701      	movs	r7, #1
 8013922:	4638      	mov	r0, r7
 8013924:	b003      	add	sp, #12
 8013926:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801392a:	270c      	movs	r7, #12
 801392c:	4638      	mov	r0, r7
 801392e:	b003      	add	sp, #12
 8013930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013934:	4648      	mov	r0, r9
 8013936:	f001 fc93 	bl	8015260 <uxr_close_custom_transport>
 801393a:	4621      	mov	r1, r4
 801393c:	480c      	ldr	r0, [pc, #48]	; (8013970 <rmw_init+0x20c>)
 801393e:	f005 fb81 	bl	8019044 <put_memory>
 8013942:	4638      	mov	r0, r7
 8013944:	f8c6 806c 	str.w	r8, [r6, #108]	; 0x6c
 8013948:	b003      	add	sp, #12
 801394a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801394e:	4648      	mov	r0, r9
 8013950:	f001 fc86 	bl	8015260 <uxr_close_custom_transport>
 8013954:	4621      	mov	r1, r4
 8013956:	4806      	ldr	r0, [pc, #24]	; (8013970 <rmw_init+0x20c>)
 8013958:	f005 fb74 	bl	8019044 <put_memory>
 801395c:	66f7      	str	r7, [r6, #108]	; 0x6c
 801395e:	2701      	movs	r7, #1
 8013960:	e7d5      	b.n	801390e <rmw_init+0x1aa>
 8013962:	bf00      	nop
 8013964:	0801ceb0 	.word	0x0801ceb0
 8013968:	200104dc 	.word	0x200104dc
 801396c:	2000c788 	.word	0x2000c788
 8013970:	200104cc 	.word	0x200104cc
 8013974:	2000dd30 	.word	0x2000dd30
 8013978:	2000bce4 	.word	0x2000bce4
 801397c:	2001049c 	.word	0x2001049c
 8013980:	2000fe30 	.word	0x2000fe30
 8013984:	200104ec 	.word	0x200104ec
 8013988:	2000bd88 	.word	0x2000bd88
 801398c:	200104ac 	.word	0x200104ac
 8013990:	2000c5f8 	.word	0x2000c5f8
 8013994:	200104bc 	.word	0x200104bc
 8013998:	2000bb18 	.word	0x2000bb18
 801399c:	2000bb08 	.word	0x2000bb08
 80139a0:	20010268 	.word	0x20010268
 80139a4:	200104fc 	.word	0x200104fc
 80139a8:	2000bc60 	.word	0x2000bc60
 80139ac:	2001048c 	.word	0x2001048c
 80139b0:	2001040c 	.word	0x2001040c
 80139b4:	2001050c 	.word	0x2001050c
 80139b8:	2000bbe0 	.word	0x2000bbe0
 80139bc:	2001047c 	.word	0x2001047c
 80139c0:	08018e5d 	.word	0x08018e5d
 80139c4:	08018e55 	.word	0x08018e55
 80139c8:	08018ef5 	.word	0x08018ef5
 80139cc:	08018f91 	.word	0x08018f91

080139d0 <rmw_context_fini>:
 80139d0:	4b17      	ldr	r3, [pc, #92]	; (8013a30 <rmw_context_fini+0x60>)
 80139d2:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 80139d4:	b570      	push	{r4, r5, r6, lr}
 80139d6:	681c      	ldr	r4, [r3, #0]
 80139d8:	4605      	mov	r5, r0
 80139da:	b334      	cbz	r4, 8013a2a <rmw_context_fini+0x5a>
 80139dc:	2600      	movs	r6, #0
 80139de:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 80139e2:	6902      	ldr	r2, [r0, #16]
 80139e4:	428a      	cmp	r2, r1
 80139e6:	d018      	beq.n	8013a1a <rmw_context_fini+0x4a>
 80139e8:	2c00      	cmp	r4, #0
 80139ea:	d1f8      	bne.n	80139de <rmw_context_fini+0xe>
 80139ec:	b189      	cbz	r1, 8013a12 <rmw_context_fini+0x42>
 80139ee:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 80139f2:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 80139f6:	789b      	ldrb	r3, [r3, #2]
 80139f8:	2b01      	cmp	r3, #1
 80139fa:	bf14      	ite	ne
 80139fc:	210a      	movne	r1, #10
 80139fe:	2100      	moveq	r1, #0
 8013a00:	f002 fbb8 	bl	8016174 <uxr_delete_session_retries>
 8013a04:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8013a06:	f000 ffc5 	bl	8014994 <rmw_uxrce_fini_session_memory>
 8013a0a:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8013a0c:	3010      	adds	r0, #16
 8013a0e:	f001 fc27 	bl	8015260 <uxr_close_custom_transport>
 8013a12:	2300      	movs	r3, #0
 8013a14:	4630      	mov	r0, r6
 8013a16:	66eb      	str	r3, [r5, #108]	; 0x6c
 8013a18:	bd70      	pop	{r4, r5, r6, pc}
 8013a1a:	3018      	adds	r0, #24
 8013a1c:	f000 f89c 	bl	8013b58 <rmw_destroy_node>
 8013a20:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8013a22:	4606      	mov	r6, r0
 8013a24:	2c00      	cmp	r4, #0
 8013a26:	d1da      	bne.n	80139de <rmw_context_fini+0xe>
 8013a28:	e7e0      	b.n	80139ec <rmw_context_fini+0x1c>
 8013a2a:	4626      	mov	r6, r4
 8013a2c:	e7de      	b.n	80139ec <rmw_context_fini+0x1c>
 8013a2e:	bf00      	nop
 8013a30:	2001049c 	.word	0x2001049c

08013a34 <create_node>:
 8013a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a38:	b083      	sub	sp, #12
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d064      	beq.n	8013b08 <create_node+0xd4>
 8013a3e:	4606      	mov	r6, r0
 8013a40:	4838      	ldr	r0, [pc, #224]	; (8013b24 <create_node+0xf0>)
 8013a42:	460f      	mov	r7, r1
 8013a44:	4690      	mov	r8, r2
 8013a46:	461d      	mov	r5, r3
 8013a48:	f005 faec 	bl	8019024 <get_memory>
 8013a4c:	2800      	cmp	r0, #0
 8013a4e:	d05b      	beq.n	8013b08 <create_node+0xd4>
 8013a50:	6884      	ldr	r4, [r0, #8]
 8013a52:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8013a54:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8013a58:	f104 0518 	add.w	r5, r4, #24
 8013a5c:	6123      	str	r3, [r4, #16]
 8013a5e:	f7ff fdab 	bl	80135b8 <rmw_get_implementation_identifier>
 8013a62:	f8c4 9020 	str.w	r9, [r4, #32]
 8013a66:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8013a6a:	4630      	mov	r0, r6
 8013a6c:	f7ec fc48 	bl	8000300 <strlen>
 8013a70:	1c42      	adds	r2, r0, #1
 8013a72:	2a3c      	cmp	r2, #60	; 0x3c
 8013a74:	d840      	bhi.n	8013af8 <create_node+0xc4>
 8013a76:	4648      	mov	r0, r9
 8013a78:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8013a7c:	4631      	mov	r1, r6
 8013a7e:	f006 fee2 	bl	801a846 <memcpy>
 8013a82:	4638      	mov	r0, r7
 8013a84:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8013a88:	f7ec fc3a 	bl	8000300 <strlen>
 8013a8c:	1c42      	adds	r2, r0, #1
 8013a8e:	2a3c      	cmp	r2, #60	; 0x3c
 8013a90:	d832      	bhi.n	8013af8 <create_node+0xc4>
 8013a92:	4639      	mov	r1, r7
 8013a94:	4648      	mov	r0, r9
 8013a96:	f006 fed6 	bl	801a846 <memcpy>
 8013a9a:	6923      	ldr	r3, [r4, #16]
 8013a9c:	2101      	movs	r1, #1
 8013a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013aa2:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8013aa6:	1842      	adds	r2, r0, r1
 8013aa8:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8013aac:	f001 fbdc 	bl	8015268 <uxr_object_id>
 8013ab0:	6160      	str	r0, [r4, #20]
 8013ab2:	783b      	ldrb	r3, [r7, #0]
 8013ab4:	2b2f      	cmp	r3, #47	; 0x2f
 8013ab6:	d12c      	bne.n	8013b12 <create_node+0xde>
 8013ab8:	787b      	ldrb	r3, [r7, #1]
 8013aba:	bb53      	cbnz	r3, 8013b12 <create_node+0xde>
 8013abc:	4633      	mov	r3, r6
 8013abe:	4a1a      	ldr	r2, [pc, #104]	; (8013b28 <create_node+0xf4>)
 8013ac0:	213c      	movs	r1, #60	; 0x3c
 8013ac2:	481a      	ldr	r0, [pc, #104]	; (8013b2c <create_node+0xf8>)
 8013ac4:	f006 fcb4 	bl	801a430 <sniprintf>
 8013ac8:	6920      	ldr	r0, [r4, #16]
 8013aca:	2106      	movs	r1, #6
 8013acc:	fa1f f388 	uxth.w	r3, r8
 8013ad0:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8013ad4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013ad8:	9101      	str	r1, [sp, #4]
 8013ada:	4914      	ldr	r1, [pc, #80]	; (8013b2c <create_node+0xf8>)
 8013adc:	9100      	str	r1, [sp, #0]
 8013ade:	6811      	ldr	r1, [r2, #0]
 8013ae0:	6962      	ldr	r2, [r4, #20]
 8013ae2:	f001 fa97 	bl	8015014 <uxr_buffer_create_participant_bin>
 8013ae6:	4602      	mov	r2, r0
 8013ae8:	6920      	ldr	r0, [r4, #16]
 8013aea:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8013aee:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8013af2:	f001 f8d3 	bl	8014c9c <run_xrce_session>
 8013af6:	b918      	cbnz	r0, 8013b00 <create_node+0xcc>
 8013af8:	4628      	mov	r0, r5
 8013afa:	2500      	movs	r5, #0
 8013afc:	f000 ff50 	bl	80149a0 <rmw_uxrce_fini_node_memory>
 8013b00:	4628      	mov	r0, r5
 8013b02:	b003      	add	sp, #12
 8013b04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b08:	2500      	movs	r5, #0
 8013b0a:	4628      	mov	r0, r5
 8013b0c:	b003      	add	sp, #12
 8013b0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b12:	463b      	mov	r3, r7
 8013b14:	4a06      	ldr	r2, [pc, #24]	; (8013b30 <create_node+0xfc>)
 8013b16:	213c      	movs	r1, #60	; 0x3c
 8013b18:	9600      	str	r6, [sp, #0]
 8013b1a:	4804      	ldr	r0, [pc, #16]	; (8013b2c <create_node+0xf8>)
 8013b1c:	f006 fc88 	bl	801a430 <sniprintf>
 8013b20:	e7d2      	b.n	8013ac8 <create_node+0x94>
 8013b22:	bf00      	nop
 8013b24:	2001049c 	.word	0x2001049c
 8013b28:	0801ca54 	.word	0x0801ca54
 8013b2c:	2000b98c 	.word	0x2000b98c
 8013b30:	0801c4c8 	.word	0x0801c4c8

08013b34 <rmw_create_node>:
 8013b34:	468c      	mov	ip, r1
 8013b36:	4611      	mov	r1, r2
 8013b38:	f1bc 0f00 	cmp.w	ip, #0
 8013b3c:	d00a      	beq.n	8013b54 <rmw_create_node+0x20>
 8013b3e:	f89c 3000 	ldrb.w	r3, [ip]
 8013b42:	b13b      	cbz	r3, 8013b54 <rmw_create_node+0x20>
 8013b44:	b132      	cbz	r2, 8013b54 <rmw_create_node+0x20>
 8013b46:	7813      	ldrb	r3, [r2, #0]
 8013b48:	b123      	cbz	r3, 8013b54 <rmw_create_node+0x20>
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8013b4e:	4660      	mov	r0, ip
 8013b50:	f7ff bf70 	b.w	8013a34 <create_node>
 8013b54:	2000      	movs	r0, #0
 8013b56:	4770      	bx	lr

08013b58 <rmw_destroy_node>:
 8013b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b5a:	b328      	cbz	r0, 8013ba8 <rmw_destroy_node+0x50>
 8013b5c:	4607      	mov	r7, r0
 8013b5e:	6800      	ldr	r0, [r0, #0]
 8013b60:	b120      	cbz	r0, 8013b6c <rmw_destroy_node+0x14>
 8013b62:	4b37      	ldr	r3, [pc, #220]	; (8013c40 <rmw_destroy_node+0xe8>)
 8013b64:	6819      	ldr	r1, [r3, #0]
 8013b66:	f7ec fb6b 	bl	8000240 <strcmp>
 8013b6a:	b9e8      	cbnz	r0, 8013ba8 <rmw_destroy_node+0x50>
 8013b6c:	687d      	ldr	r5, [r7, #4]
 8013b6e:	b1dd      	cbz	r5, 8013ba8 <rmw_destroy_node+0x50>
 8013b70:	4b34      	ldr	r3, [pc, #208]	; (8013c44 <rmw_destroy_node+0xec>)
 8013b72:	681c      	ldr	r4, [r3, #0]
 8013b74:	2c00      	cmp	r4, #0
 8013b76:	d060      	beq.n	8013c3a <rmw_destroy_node+0xe2>
 8013b78:	2600      	movs	r6, #0
 8013b7a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013b7e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8013b82:	429d      	cmp	r5, r3
 8013b84:	d013      	beq.n	8013bae <rmw_destroy_node+0x56>
 8013b86:	2c00      	cmp	r4, #0
 8013b88:	d1f7      	bne.n	8013b7a <rmw_destroy_node+0x22>
 8013b8a:	4b2f      	ldr	r3, [pc, #188]	; (8013c48 <rmw_destroy_node+0xf0>)
 8013b8c:	681c      	ldr	r4, [r3, #0]
 8013b8e:	b1c4      	cbz	r4, 8013bc2 <rmw_destroy_node+0x6a>
 8013b90:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013b94:	6a0b      	ldr	r3, [r1, #32]
 8013b96:	429d      	cmp	r5, r3
 8013b98:	d1f9      	bne.n	8013b8e <rmw_destroy_node+0x36>
 8013b9a:	317c      	adds	r1, #124	; 0x7c
 8013b9c:	4638      	mov	r0, r7
 8013b9e:	f000 fb49 	bl	8014234 <rmw_destroy_subscription>
 8013ba2:	2801      	cmp	r0, #1
 8013ba4:	4606      	mov	r6, r0
 8013ba6:	d1f2      	bne.n	8013b8e <rmw_destroy_node+0x36>
 8013ba8:	2601      	movs	r6, #1
 8013baa:	4630      	mov	r0, r6
 8013bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bae:	3184      	adds	r1, #132	; 0x84
 8013bb0:	4638      	mov	r0, r7
 8013bb2:	f000 f855 	bl	8013c60 <rmw_destroy_publisher>
 8013bb6:	2801      	cmp	r0, #1
 8013bb8:	4606      	mov	r6, r0
 8013bba:	d0f5      	beq.n	8013ba8 <rmw_destroy_node+0x50>
 8013bbc:	2c00      	cmp	r4, #0
 8013bbe:	d1dc      	bne.n	8013b7a <rmw_destroy_node+0x22>
 8013bc0:	e7e3      	b.n	8013b8a <rmw_destroy_node+0x32>
 8013bc2:	4b22      	ldr	r3, [pc, #136]	; (8013c4c <rmw_destroy_node+0xf4>)
 8013bc4:	681c      	ldr	r4, [r3, #0]
 8013bc6:	b16c      	cbz	r4, 8013be4 <rmw_destroy_node+0x8c>
 8013bc8:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013bcc:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8013bce:	429d      	cmp	r5, r3
 8013bd0:	d1f9      	bne.n	8013bc6 <rmw_destroy_node+0x6e>
 8013bd2:	317c      	adds	r1, #124	; 0x7c
 8013bd4:	4638      	mov	r0, r7
 8013bd6:	f000 fac1 	bl	801415c <rmw_destroy_service>
 8013bda:	2801      	cmp	r0, #1
 8013bdc:	4606      	mov	r6, r0
 8013bde:	d0e3      	beq.n	8013ba8 <rmw_destroy_node+0x50>
 8013be0:	2c00      	cmp	r4, #0
 8013be2:	d1f1      	bne.n	8013bc8 <rmw_destroy_node+0x70>
 8013be4:	4b1a      	ldr	r3, [pc, #104]	; (8013c50 <rmw_destroy_node+0xf8>)
 8013be6:	681c      	ldr	r4, [r3, #0]
 8013be8:	b16c      	cbz	r4, 8013c06 <rmw_destroy_node+0xae>
 8013bea:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8013bee:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8013bf0:	429d      	cmp	r5, r3
 8013bf2:	d1f9      	bne.n	8013be8 <rmw_destroy_node+0x90>
 8013bf4:	317c      	adds	r1, #124	; 0x7c
 8013bf6:	4638      	mov	r0, r7
 8013bf8:	f7ff fc7c 	bl	80134f4 <rmw_destroy_client>
 8013bfc:	2801      	cmp	r0, #1
 8013bfe:	4606      	mov	r6, r0
 8013c00:	d0d2      	beq.n	8013ba8 <rmw_destroy_node+0x50>
 8013c02:	2c00      	cmp	r4, #0
 8013c04:	d1f1      	bne.n	8013bea <rmw_destroy_node+0x92>
 8013c06:	6928      	ldr	r0, [r5, #16]
 8013c08:	696a      	ldr	r2, [r5, #20]
 8013c0a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013c0e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013c12:	6819      	ldr	r1, [r3, #0]
 8013c14:	f001 f9b2 	bl	8014f7c <uxr_buffer_delete_entity>
 8013c18:	4602      	mov	r2, r0
 8013c1a:	6928      	ldr	r0, [r5, #16]
 8013c1c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013c20:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8013c24:	f001 f83a 	bl	8014c9c <run_xrce_session>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	4638      	mov	r0, r7
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	bf08      	it	eq
 8013c30:	2602      	moveq	r6, #2
 8013c32:	f000 feb5 	bl	80149a0 <rmw_uxrce_fini_node_memory>
 8013c36:	4630      	mov	r0, r6
 8013c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c3a:	4626      	mov	r6, r4
 8013c3c:	e7a5      	b.n	8013b8a <rmw_destroy_node+0x32>
 8013c3e:	bf00      	nop
 8013c40:	0801ceb0 	.word	0x0801ceb0
 8013c44:	200104ac 	.word	0x200104ac
 8013c48:	200104ec 	.word	0x200104ec
 8013c4c:	200104bc 	.word	0x200104bc
 8013c50:	2000bb08 	.word	0x2000bb08

08013c54 <rmw_node_get_graph_guard_condition>:
 8013c54:	6843      	ldr	r3, [r0, #4]
 8013c56:	6918      	ldr	r0, [r3, #16]
 8013c58:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8013c5c:	4770      	bx	lr
 8013c5e:	bf00      	nop

08013c60 <rmw_destroy_publisher>:
 8013c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c64:	b128      	cbz	r0, 8013c72 <rmw_destroy_publisher+0x12>
 8013c66:	4604      	mov	r4, r0
 8013c68:	6800      	ldr	r0, [r0, #0]
 8013c6a:	460d      	mov	r5, r1
 8013c6c:	f001 f8e2 	bl	8014e34 <is_uxrce_rmw_identifier_valid>
 8013c70:	b918      	cbnz	r0, 8013c7a <rmw_destroy_publisher+0x1a>
 8013c72:	2401      	movs	r4, #1
 8013c74:	4620      	mov	r0, r4
 8013c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c7a:	6863      	ldr	r3, [r4, #4]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d0f8      	beq.n	8013c72 <rmw_destroy_publisher+0x12>
 8013c80:	fab5 f485 	clz	r4, r5
 8013c84:	0964      	lsrs	r4, r4, #5
 8013c86:	2d00      	cmp	r5, #0
 8013c88:	d0f3      	beq.n	8013c72 <rmw_destroy_publisher+0x12>
 8013c8a:	6828      	ldr	r0, [r5, #0]
 8013c8c:	f001 f8d2 	bl	8014e34 <is_uxrce_rmw_identifier_valid>
 8013c90:	2800      	cmp	r0, #0
 8013c92:	d0ee      	beq.n	8013c72 <rmw_destroy_publisher+0x12>
 8013c94:	686e      	ldr	r6, [r5, #4]
 8013c96:	2e00      	cmp	r6, #0
 8013c98:	d0eb      	beq.n	8013c72 <rmw_destroy_publisher+0x12>
 8013c9a:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8013c9c:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 8013ca0:	f005 fa0e 	bl	80190c0 <destroy_topic>
 8013ca4:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8013ca8:	6972      	ldr	r2, [r6, #20]
 8013caa:	6918      	ldr	r0, [r3, #16]
 8013cac:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013cb0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013cb4:	6819      	ldr	r1, [r3, #0]
 8013cb6:	f001 f961 	bl	8014f7c <uxr_buffer_delete_entity>
 8013cba:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8013cbe:	4680      	mov	r8, r0
 8013cc0:	6932      	ldr	r2, [r6, #16]
 8013cc2:	6918      	ldr	r0, [r3, #16]
 8013cc4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8013cc8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013ccc:	6819      	ldr	r1, [r3, #0]
 8013cce:	f001 f955 	bl	8014f7c <uxr_buffer_delete_entity>
 8013cd2:	4606      	mov	r6, r0
 8013cd4:	6938      	ldr	r0, [r7, #16]
 8013cd6:	4642      	mov	r2, r8
 8013cd8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8013cdc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8013ce0:	f000 ffdc 	bl	8014c9c <run_xrce_session>
 8013ce4:	693f      	ldr	r7, [r7, #16]
 8013ce6:	4632      	mov	r2, r6
 8013ce8:	4606      	mov	r6, r0
 8013cea:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8013cee:	4638      	mov	r0, r7
 8013cf0:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8013cf4:	f000 ffd2 	bl	8014c9c <run_xrce_session>
 8013cf8:	b126      	cbz	r6, 8013d04 <rmw_destroy_publisher+0xa4>
 8013cfa:	b118      	cbz	r0, 8013d04 <rmw_destroy_publisher+0xa4>
 8013cfc:	4628      	mov	r0, r5
 8013cfe:	f000 fe67 	bl	80149d0 <rmw_uxrce_fini_publisher_memory>
 8013d02:	e7b7      	b.n	8013c74 <rmw_destroy_publisher+0x14>
 8013d04:	2402      	movs	r4, #2
 8013d06:	e7f9      	b.n	8013cfc <rmw_destroy_publisher+0x9c>

08013d08 <rmw_send_request>:
 8013d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013d0c:	4604      	mov	r4, r0
 8013d0e:	6800      	ldr	r0, [r0, #0]
 8013d10:	b08b      	sub	sp, #44	; 0x2c
 8013d12:	460e      	mov	r6, r1
 8013d14:	4615      	mov	r5, r2
 8013d16:	b128      	cbz	r0, 8013d24 <rmw_send_request+0x1c>
 8013d18:	4b21      	ldr	r3, [pc, #132]	; (8013da0 <rmw_send_request+0x98>)
 8013d1a:	6819      	ldr	r1, [r3, #0]
 8013d1c:	f7ec fa90 	bl	8000240 <strcmp>
 8013d20:	2800      	cmp	r0, #0
 8013d22:	d139      	bne.n	8013d98 <rmw_send_request+0x90>
 8013d24:	6864      	ldr	r4, [r4, #4]
 8013d26:	2700      	movs	r7, #0
 8013d28:	6963      	ldr	r3, [r4, #20]
 8013d2a:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 8013d2e:	689b      	ldr	r3, [r3, #8]
 8013d30:	4798      	blx	r3
 8013d32:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8013d36:	4630      	mov	r0, r6
 8013d38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013d3c:	4798      	blx	r3
 8013d3e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8013d42:	9000      	str	r0, [sp, #0]
 8013d44:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8013d48:	6922      	ldr	r2, [r4, #16]
 8013d4a:	ab02      	add	r3, sp, #8
 8013d4c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8013d4e:	f003 fb41 	bl	80173d4 <uxr_prepare_output_stream>
 8013d52:	e9c5 0700 	strd	r0, r7, [r5]
 8013d56:	b198      	cbz	r0, 8013d80 <rmw_send_request+0x78>
 8013d58:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8013d5c:	a902      	add	r1, sp, #8
 8013d5e:	4630      	mov	r0, r6
 8013d60:	4798      	blx	r3
 8013d62:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8013d66:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8013d6a:	2b01      	cmp	r3, #1
 8013d6c:	d00c      	beq.n	8013d88 <rmw_send_request+0x80>
 8013d6e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8013d70:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013d74:	f002 f8b4 	bl	8015ee0 <uxr_run_session_until_confirm_delivery>
 8013d78:	4638      	mov	r0, r7
 8013d7a:	b00b      	add	sp, #44	; 0x2c
 8013d7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d80:	2001      	movs	r0, #1
 8013d82:	b00b      	add	sp, #44	; 0x2c
 8013d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d88:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013d8c:	f001 fcee 	bl	801576c <uxr_flash_output_streams>
 8013d90:	4638      	mov	r0, r7
 8013d92:	b00b      	add	sp, #44	; 0x2c
 8013d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d98:	200c      	movs	r0, #12
 8013d9a:	b00b      	add	sp, #44	; 0x2c
 8013d9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013da0:	0801ceb0 	.word	0x0801ceb0

08013da4 <rmw_take_request>:
 8013da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013da8:	4605      	mov	r5, r0
 8013daa:	6800      	ldr	r0, [r0, #0]
 8013dac:	b089      	sub	sp, #36	; 0x24
 8013dae:	460c      	mov	r4, r1
 8013db0:	4690      	mov	r8, r2
 8013db2:	461e      	mov	r6, r3
 8013db4:	b128      	cbz	r0, 8013dc2 <rmw_take_request+0x1e>
 8013db6:	4b28      	ldr	r3, [pc, #160]	; (8013e58 <rmw_take_request+0xb4>)
 8013db8:	6819      	ldr	r1, [r3, #0]
 8013dba:	f7ec fa41 	bl	8000240 <strcmp>
 8013dbe:	2800      	cmp	r0, #0
 8013dc0:	d146      	bne.n	8013e50 <rmw_take_request+0xac>
 8013dc2:	b10e      	cbz	r6, 8013dc8 <rmw_take_request+0x24>
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	7033      	strb	r3, [r6, #0]
 8013dc8:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8013dcc:	f000 fee8 	bl	8014ba0 <rmw_uxrce_clean_expired_static_input_buffer>
 8013dd0:	4648      	mov	r0, r9
 8013dd2:	f000 febb 	bl	8014b4c <rmw_uxrce_find_static_input_buffer_by_owner>
 8013dd6:	4607      	mov	r7, r0
 8013dd8:	b3b0      	cbz	r0, 8013e48 <rmw_take_request+0xa4>
 8013dda:	6885      	ldr	r5, [r0, #8]
 8013ddc:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8013de0:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 8013de4:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8013de8:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8013dec:	7423      	strb	r3, [r4, #16]
 8013dee:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 8013df2:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 8013df6:	f8a4 2011 	strh.w	r2, [r4, #17]
 8013dfa:	74e3      	strb	r3, [r4, #19]
 8013dfc:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 8013e00:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 8013e04:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 8013e08:	6161      	str	r1, [r4, #20]
 8013e0a:	61a2      	str	r2, [r4, #24]
 8013e0c:	61e3      	str	r3, [r4, #28]
 8013e0e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8013e12:	689b      	ldr	r3, [r3, #8]
 8013e14:	4798      	blx	r3
 8013e16:	6844      	ldr	r4, [r0, #4]
 8013e18:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8013e1c:	f105 0110 	add.w	r1, r5, #16
 8013e20:	4668      	mov	r0, sp
 8013e22:	f7fa ffe1 	bl	800ede8 <ucdr_init_buffer>
 8013e26:	4641      	mov	r1, r8
 8013e28:	68e3      	ldr	r3, [r4, #12]
 8013e2a:	4668      	mov	r0, sp
 8013e2c:	4798      	blx	r3
 8013e2e:	4639      	mov	r1, r7
 8013e30:	4604      	mov	r4, r0
 8013e32:	480a      	ldr	r0, [pc, #40]	; (8013e5c <rmw_take_request+0xb8>)
 8013e34:	f005 f906 	bl	8019044 <put_memory>
 8013e38:	b106      	cbz	r6, 8013e3c <rmw_take_request+0x98>
 8013e3a:	7034      	strb	r4, [r6, #0]
 8013e3c:	f084 0001 	eor.w	r0, r4, #1
 8013e40:	b2c0      	uxtb	r0, r0
 8013e42:	b009      	add	sp, #36	; 0x24
 8013e44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e48:	2001      	movs	r0, #1
 8013e4a:	b009      	add	sp, #36	; 0x24
 8013e4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e50:	200c      	movs	r0, #12
 8013e52:	b009      	add	sp, #36	; 0x24
 8013e54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e58:	0801ceb0 	.word	0x0801ceb0
 8013e5c:	200104dc 	.word	0x200104dc

08013e60 <rmw_send_response>:
 8013e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e62:	4605      	mov	r5, r0
 8013e64:	6800      	ldr	r0, [r0, #0]
 8013e66:	b091      	sub	sp, #68	; 0x44
 8013e68:	460c      	mov	r4, r1
 8013e6a:	4616      	mov	r6, r2
 8013e6c:	b128      	cbz	r0, 8013e7a <rmw_send_response+0x1a>
 8013e6e:	4b29      	ldr	r3, [pc, #164]	; (8013f14 <rmw_send_response+0xb4>)
 8013e70:	6819      	ldr	r1, [r3, #0]
 8013e72:	f7ec f9e5 	bl	8000240 <strcmp>
 8013e76:	2800      	cmp	r0, #0
 8013e78:	d141      	bne.n	8013efe <rmw_send_response+0x9e>
 8013e7a:	686d      	ldr	r5, [r5, #4]
 8013e7c:	68a1      	ldr	r1, [r4, #8]
 8013e7e:	6860      	ldr	r0, [r4, #4]
 8013e80:	6faf      	ldr	r7, [r5, #120]	; 0x78
 8013e82:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8013e86:	9307      	str	r3, [sp, #28]
 8013e88:	4623      	mov	r3, r4
 8013e8a:	9206      	str	r2, [sp, #24]
 8013e8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e90:	789b      	ldrb	r3, [r3, #2]
 8013e92:	f88d 2017 	strb.w	r2, [sp, #23]
 8013e96:	f88d 3016 	strb.w	r3, [sp, #22]
 8013e9a:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8013e9e:	68e2      	ldr	r2, [r4, #12]
 8013ea0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013ea4:	ab02      	add	r3, sp, #8
 8013ea6:	696c      	ldr	r4, [r5, #20]
 8013ea8:	c307      	stmia	r3!, {r0, r1, r2}
 8013eaa:	68e3      	ldr	r3, [r4, #12]
 8013eac:	4798      	blx	r3
 8013eae:	6844      	ldr	r4, [r0, #4]
 8013eb0:	4630      	mov	r0, r6
 8013eb2:	6923      	ldr	r3, [r4, #16]
 8013eb4:	4798      	blx	r3
 8013eb6:	f100 0318 	add.w	r3, r0, #24
 8013eba:	6938      	ldr	r0, [r7, #16]
 8013ebc:	9300      	str	r3, [sp, #0]
 8013ebe:	ab08      	add	r3, sp, #32
 8013ec0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013ec4:	692a      	ldr	r2, [r5, #16]
 8013ec6:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8013ec8:	f003 fa84 	bl	80173d4 <uxr_prepare_output_stream>
 8013ecc:	b910      	cbnz	r0, 8013ed4 <rmw_send_response+0x74>
 8013ece:	2001      	movs	r0, #1
 8013ed0:	b011      	add	sp, #68	; 0x44
 8013ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013ed4:	a902      	add	r1, sp, #8
 8013ed6:	a808      	add	r0, sp, #32
 8013ed8:	f004 f9a6 	bl	8018228 <uxr_serialize_SampleIdentity>
 8013edc:	68a3      	ldr	r3, [r4, #8]
 8013ede:	a908      	add	r1, sp, #32
 8013ee0:	4630      	mov	r0, r6
 8013ee2:	4798      	blx	r3
 8013ee4:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8013ee8:	6938      	ldr	r0, [r7, #16]
 8013eea:	2b01      	cmp	r3, #1
 8013eec:	d00a      	beq.n	8013f04 <rmw_send_response+0xa4>
 8013eee:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8013ef0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013ef4:	f001 fff4 	bl	8015ee0 <uxr_run_session_until_confirm_delivery>
 8013ef8:	2000      	movs	r0, #0
 8013efa:	b011      	add	sp, #68	; 0x44
 8013efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013efe:	200c      	movs	r0, #12
 8013f00:	b011      	add	sp, #68	; 0x44
 8013f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f04:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013f08:	f001 fc30 	bl	801576c <uxr_flash_output_streams>
 8013f0c:	2000      	movs	r0, #0
 8013f0e:	b011      	add	sp, #68	; 0x44
 8013f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f12:	bf00      	nop
 8013f14:	0801ceb0 	.word	0x0801ceb0

08013f18 <rmw_take_response>:
 8013f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f1c:	4604      	mov	r4, r0
 8013f1e:	6800      	ldr	r0, [r0, #0]
 8013f20:	b088      	sub	sp, #32
 8013f22:	460f      	mov	r7, r1
 8013f24:	4690      	mov	r8, r2
 8013f26:	461d      	mov	r5, r3
 8013f28:	b120      	cbz	r0, 8013f34 <rmw_take_response+0x1c>
 8013f2a:	4b1d      	ldr	r3, [pc, #116]	; (8013fa0 <rmw_take_response+0x88>)
 8013f2c:	6819      	ldr	r1, [r3, #0]
 8013f2e:	f7ec f987 	bl	8000240 <strcmp>
 8013f32:	bb68      	cbnz	r0, 8013f90 <rmw_take_response+0x78>
 8013f34:	b10d      	cbz	r5, 8013f3a <rmw_take_response+0x22>
 8013f36:	2300      	movs	r3, #0
 8013f38:	702b      	strb	r3, [r5, #0]
 8013f3a:	6864      	ldr	r4, [r4, #4]
 8013f3c:	f000 fe30 	bl	8014ba0 <rmw_uxrce_clean_expired_static_input_buffer>
 8013f40:	4620      	mov	r0, r4
 8013f42:	f000 fe03 	bl	8014b4c <rmw_uxrce_find_static_input_buffer_by_owner>
 8013f46:	4606      	mov	r6, r0
 8013f48:	b330      	cbz	r0, 8013f98 <rmw_take_response+0x80>
 8013f4a:	6963      	ldr	r3, [r4, #20]
 8013f4c:	6884      	ldr	r4, [r0, #8]
 8013f4e:	68db      	ldr	r3, [r3, #12]
 8013f50:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 8013f54:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8013f58:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8013f5c:	4798      	blx	r3
 8013f5e:	6847      	ldr	r7, [r0, #4]
 8013f60:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 8013f64:	f104 0110 	add.w	r1, r4, #16
 8013f68:	4668      	mov	r0, sp
 8013f6a:	f7fa ff3d 	bl	800ede8 <ucdr_init_buffer>
 8013f6e:	4641      	mov	r1, r8
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	4668      	mov	r0, sp
 8013f74:	4798      	blx	r3
 8013f76:	4631      	mov	r1, r6
 8013f78:	4604      	mov	r4, r0
 8013f7a:	480a      	ldr	r0, [pc, #40]	; (8013fa4 <rmw_take_response+0x8c>)
 8013f7c:	f005 f862 	bl	8019044 <put_memory>
 8013f80:	b105      	cbz	r5, 8013f84 <rmw_take_response+0x6c>
 8013f82:	702c      	strb	r4, [r5, #0]
 8013f84:	f084 0001 	eor.w	r0, r4, #1
 8013f88:	b2c0      	uxtb	r0, r0
 8013f8a:	b008      	add	sp, #32
 8013f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f90:	200c      	movs	r0, #12
 8013f92:	b008      	add	sp, #32
 8013f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f98:	2001      	movs	r0, #1
 8013f9a:	b008      	add	sp, #32
 8013f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fa0:	0801ceb0 	.word	0x0801ceb0
 8013fa4:	200104dc 	.word	0x200104dc

08013fa8 <rmw_create_service>:
 8013fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fac:	b091      	sub	sp, #68	; 0x44
 8013fae:	2900      	cmp	r1, #0
 8013fb0:	f000 80bb 	beq.w	801412a <rmw_create_service+0x182>
 8013fb4:	4606      	mov	r6, r0
 8013fb6:	2800      	cmp	r0, #0
 8013fb8:	f000 80b7 	beq.w	801412a <rmw_create_service+0x182>
 8013fbc:	4614      	mov	r4, r2
 8013fbe:	6800      	ldr	r0, [r0, #0]
 8013fc0:	4689      	mov	r9, r1
 8013fc2:	461d      	mov	r5, r3
 8013fc4:	f000 ff36 	bl	8014e34 <is_uxrce_rmw_identifier_valid>
 8013fc8:	2c00      	cmp	r4, #0
 8013fca:	f000 80ae 	beq.w	801412a <rmw_create_service+0x182>
 8013fce:	f080 0001 	eor.w	r0, r0, #1
 8013fd2:	b2c0      	uxtb	r0, r0
 8013fd4:	2800      	cmp	r0, #0
 8013fd6:	f040 80a8 	bne.w	801412a <rmw_create_service+0x182>
 8013fda:	7823      	ldrb	r3, [r4, #0]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	f000 80a4 	beq.w	801412a <rmw_create_service+0x182>
 8013fe2:	2d00      	cmp	r5, #0
 8013fe4:	f000 80a1 	beq.w	801412a <rmw_create_service+0x182>
 8013fe8:	4856      	ldr	r0, [pc, #344]	; (8014144 <rmw_create_service+0x19c>)
 8013fea:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8013fee:	f005 f819 	bl	8019024 <get_memory>
 8013ff2:	4606      	mov	r6, r0
 8013ff4:	2800      	cmp	r0, #0
 8013ff6:	f000 8099 	beq.w	801412c <rmw_create_service+0x184>
 8013ffa:	6887      	ldr	r7, [r0, #8]
 8013ffc:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 8014000:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 8014004:	f7ff fad8 	bl	80135b8 <rmw_get_implementation_identifier>
 8014008:	67f8      	str	r0, [r7, #124]	; 0x7c
 801400a:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 801400e:	4620      	mov	r0, r4
 8014010:	f7ec f976 	bl	8000300 <strlen>
 8014014:	1c42      	adds	r2, r0, #1
 8014016:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 801401a:	2a3c      	cmp	r2, #60	; 0x3c
 801401c:	f200 808a 	bhi.w	8014134 <rmw_create_service+0x18c>
 8014020:	4621      	mov	r1, r4
 8014022:	4650      	mov	r0, sl
 8014024:	f006 fc0f 	bl	801a846 <memcpy>
 8014028:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801402c:	4629      	mov	r1, r5
 801402e:	2250      	movs	r2, #80	; 0x50
 8014030:	f107 0020 	add.w	r0, r7, #32
 8014034:	f8c7 8078 	str.w	r8, [r7, #120]	; 0x78
 8014038:	677b      	str	r3, [r7, #116]	; 0x74
 801403a:	f006 fc04 	bl	801a846 <memcpy>
 801403e:	4648      	mov	r0, r9
 8014040:	4941      	ldr	r1, [pc, #260]	; (8014148 <rmw_create_service+0x1a0>)
 8014042:	f7f8 ff5f 	bl	800cf04 <get_service_typesupport_handle>
 8014046:	2800      	cmp	r0, #0
 8014048:	d074      	beq.n	8014134 <rmw_create_service+0x18c>
 801404a:	6843      	ldr	r3, [r0, #4]
 801404c:	617b      	str	r3, [r7, #20]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d070      	beq.n	8014134 <rmw_create_service+0x18c>
 8014052:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014056:	2108      	movs	r1, #8
 8014058:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8014150 <rmw_create_service+0x1a8>
 801405c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014060:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8014154 <rmw_create_service+0x1ac>
 8014064:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	; 0x5a2
 8014068:	1c42      	adds	r2, r0, #1
 801406a:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
 801406e:	f001 f8fb 	bl	8015268 <uxr_object_id>
 8014072:	2364      	movs	r3, #100	; 0x64
 8014074:	6138      	str	r0, [r7, #16]
 8014076:	4652      	mov	r2, sl
 8014078:	4649      	mov	r1, r9
 801407a:	6978      	ldr	r0, [r7, #20]
 801407c:	f000 fe74 	bl	8014d68 <generate_service_types>
 8014080:	2800      	cmp	r0, #0
 8014082:	d057      	beq.n	8014134 <rmw_create_service+0x18c>
 8014084:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8014158 <rmw_create_service+0x1b0>
 8014088:	233c      	movs	r3, #60	; 0x3c
 801408a:	4a30      	ldr	r2, [pc, #192]	; (801414c <rmw_create_service+0x1a4>)
 801408c:	4620      	mov	r0, r4
 801408e:	4659      	mov	r1, fp
 8014090:	f000 fe38 	bl	8014d04 <generate_service_topics>
 8014094:	2800      	cmp	r0, #0
 8014096:	d04d      	beq.n	8014134 <rmw_create_service+0x18c>
 8014098:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801409c:	a80c      	add	r0, sp, #48	; 0x30
 801409e:	4629      	mov	r1, r5
 80140a0:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80140a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80140a8:	f000 fe14 	bl	8014cd4 <convert_qos_profile>
 80140ac:	4a27      	ldr	r2, [pc, #156]	; (801414c <rmw_create_service+0x1a4>)
 80140ae:	a80c      	add	r0, sp, #48	; 0x30
 80140b0:	9400      	str	r4, [sp, #0]
 80140b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140b4:	e9cd b203 	strd	fp, r2, [sp, #12]
 80140b8:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 80140bc:	c803      	ldmia	r0, {r0, r1}
 80140be:	9a08      	ldr	r2, [sp, #32]
 80140c0:	9005      	str	r0, [sp, #20]
 80140c2:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80140c6:	2306      	movs	r3, #6
 80140c8:	f8ad 1018 	strh.w	r1, [sp, #24]
 80140cc:	9307      	str	r3, [sp, #28]
 80140ce:	6811      	ldr	r1, [r2, #0]
 80140d0:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80140d4:	693a      	ldr	r2, [r7, #16]
 80140d6:	f000 ffcf 	bl	8015078 <uxr_buffer_create_replier_bin>
 80140da:	4602      	mov	r2, r0
 80140dc:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80140e0:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80140e4:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80140e8:	f000 fdd8 	bl	8014c9c <run_xrce_session>
 80140ec:	b310      	cbz	r0, 8014134 <rmw_create_service+0x18c>
 80140ee:	7a2b      	ldrb	r3, [r5, #8]
 80140f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80140f4:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80140f8:	2b02      	cmp	r3, #2
 80140fa:	920e      	str	r2, [sp, #56]	; 0x38
 80140fc:	f04f 0200 	mov.w	r2, #0
 8014100:	920f      	str	r2, [sp, #60]	; 0x3c
 8014102:	bf0c      	ite	eq
 8014104:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	; 0x37c
 8014108:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	; 0x374
 801410c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014110:	930b      	str	r3, [sp, #44]	; 0x2c
 8014112:	ab0e      	add	r3, sp, #56	; 0x38
 8014114:	673a      	str	r2, [r7, #112]	; 0x70
 8014116:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 801411a:	9300      	str	r3, [sp, #0]
 801411c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801411e:	6811      	ldr	r1, [r2, #0]
 8014120:	693a      	ldr	r2, [r7, #16]
 8014122:	f001 f8d1 	bl	80152c8 <uxr_buffer_request_data>
 8014126:	8338      	strh	r0, [r7, #24]
 8014128:	e000      	b.n	801412c <rmw_create_service+0x184>
 801412a:	2600      	movs	r6, #0
 801412c:	4630      	mov	r0, r6
 801412e:	b011      	add	sp, #68	; 0x44
 8014130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014134:	4630      	mov	r0, r6
 8014136:	2600      	movs	r6, #0
 8014138:	f000 fc76 	bl	8014a28 <rmw_uxrce_fini_service_memory>
 801413c:	4630      	mov	r0, r6
 801413e:	b011      	add	sp, #68	; 0x44
 8014140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014144:	200104bc 	.word	0x200104bc
 8014148:	0801b7ec 	.word	0x0801b7ec
 801414c:	2000ba68 	.word	0x2000ba68
 8014150:	2000baa4 	.word	0x2000baa4
 8014154:	2000ba04 	.word	0x2000ba04
 8014158:	2000b9c8 	.word	0x2000b9c8

0801415c <rmw_destroy_service>:
 801415c:	b570      	push	{r4, r5, r6, lr}
 801415e:	b128      	cbz	r0, 801416c <rmw_destroy_service+0x10>
 8014160:	4604      	mov	r4, r0
 8014162:	6800      	ldr	r0, [r0, #0]
 8014164:	460d      	mov	r5, r1
 8014166:	f000 fe65 	bl	8014e34 <is_uxrce_rmw_identifier_valid>
 801416a:	b910      	cbnz	r0, 8014172 <rmw_destroy_service+0x16>
 801416c:	2401      	movs	r4, #1
 801416e:	4620      	mov	r0, r4
 8014170:	bd70      	pop	{r4, r5, r6, pc}
 8014172:	6863      	ldr	r3, [r4, #4]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d0f9      	beq.n	801416c <rmw_destroy_service+0x10>
 8014178:	2d00      	cmp	r5, #0
 801417a:	d0f7      	beq.n	801416c <rmw_destroy_service+0x10>
 801417c:	6828      	ldr	r0, [r5, #0]
 801417e:	f000 fe59 	bl	8014e34 <is_uxrce_rmw_identifier_valid>
 8014182:	2800      	cmp	r0, #0
 8014184:	d0f2      	beq.n	801416c <rmw_destroy_service+0x10>
 8014186:	686e      	ldr	r6, [r5, #4]
 8014188:	2e00      	cmp	r6, #0
 801418a:	d0ef      	beq.n	801416c <rmw_destroy_service+0x10>
 801418c:	6864      	ldr	r4, [r4, #4]
 801418e:	6932      	ldr	r2, [r6, #16]
 8014190:	6920      	ldr	r0, [r4, #16]
 8014192:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014196:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801419a:	6819      	ldr	r1, [r3, #0]
 801419c:	f001 f8ce 	bl	801533c <uxr_buffer_cancel_data>
 80141a0:	4602      	mov	r2, r0
 80141a2:	6920      	ldr	r0, [r4, #16]
 80141a4:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80141a8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80141ac:	f000 fd76 	bl	8014c9c <run_xrce_session>
 80141b0:	6920      	ldr	r0, [r4, #16]
 80141b2:	6932      	ldr	r2, [r6, #16]
 80141b4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80141b8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80141bc:	6819      	ldr	r1, [r3, #0]
 80141be:	f000 fedd 	bl	8014f7c <uxr_buffer_delete_entity>
 80141c2:	4602      	mov	r2, r0
 80141c4:	6920      	ldr	r0, [r4, #16]
 80141c6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80141ca:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80141ce:	f000 fd65 	bl	8014c9c <run_xrce_session>
 80141d2:	4603      	mov	r3, r0
 80141d4:	4628      	mov	r0, r5
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	bf14      	ite	ne
 80141da:	2400      	movne	r4, #0
 80141dc:	2402      	moveq	r4, #2
 80141de:	f000 fc23 	bl	8014a28 <rmw_uxrce_fini_service_memory>
 80141e2:	e7c4      	b.n	801416e <rmw_destroy_service+0x12>

080141e4 <rmw_service_response_publisher_get_actual_qos>:
 80141e4:	b181      	cbz	r1, 8014208 <rmw_service_response_publisher_get_actual_qos+0x24>
 80141e6:	4603      	mov	r3, r0
 80141e8:	b510      	push	{r4, lr}
 80141ea:	fab0 f480 	clz	r4, r0
 80141ee:	0964      	lsrs	r4, r4, #5
 80141f0:	b140      	cbz	r0, 8014204 <rmw_service_response_publisher_get_actual_qos+0x20>
 80141f2:	685b      	ldr	r3, [r3, #4]
 80141f4:	4608      	mov	r0, r1
 80141f6:	2250      	movs	r2, #80	; 0x50
 80141f8:	f103 0120 	add.w	r1, r3, #32
 80141fc:	f006 fb23 	bl	801a846 <memcpy>
 8014200:	4620      	mov	r0, r4
 8014202:	bd10      	pop	{r4, pc}
 8014204:	200b      	movs	r0, #11
 8014206:	bd10      	pop	{r4, pc}
 8014208:	200b      	movs	r0, #11
 801420a:	4770      	bx	lr

0801420c <rmw_service_request_subscription_get_actual_qos>:
 801420c:	b178      	cbz	r0, 801422e <rmw_service_request_subscription_get_actual_qos+0x22>
 801420e:	b510      	push	{r4, lr}
 8014210:	fab1 f481 	clz	r4, r1
 8014214:	0964      	lsrs	r4, r4, #5
 8014216:	b141      	cbz	r1, 801422a <rmw_service_request_subscription_get_actual_qos+0x1e>
 8014218:	6843      	ldr	r3, [r0, #4]
 801421a:	2250      	movs	r2, #80	; 0x50
 801421c:	4608      	mov	r0, r1
 801421e:	f103 0120 	add.w	r1, r3, #32
 8014222:	f006 fb10 	bl	801a846 <memcpy>
 8014226:	4620      	mov	r0, r4
 8014228:	bd10      	pop	{r4, pc}
 801422a:	200b      	movs	r0, #11
 801422c:	bd10      	pop	{r4, pc}
 801422e:	200b      	movs	r0, #11
 8014230:	4770      	bx	lr
 8014232:	bf00      	nop

08014234 <rmw_destroy_subscription>:
 8014234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014238:	b128      	cbz	r0, 8014246 <rmw_destroy_subscription+0x12>
 801423a:	4604      	mov	r4, r0
 801423c:	6800      	ldr	r0, [r0, #0]
 801423e:	460d      	mov	r5, r1
 8014240:	f000 fdf8 	bl	8014e34 <is_uxrce_rmw_identifier_valid>
 8014244:	b918      	cbnz	r0, 801424e <rmw_destroy_subscription+0x1a>
 8014246:	2401      	movs	r4, #1
 8014248:	4620      	mov	r0, r4
 801424a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801424e:	6863      	ldr	r3, [r4, #4]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d0f8      	beq.n	8014246 <rmw_destroy_subscription+0x12>
 8014254:	fab5 f485 	clz	r4, r5
 8014258:	0964      	lsrs	r4, r4, #5
 801425a:	2d00      	cmp	r5, #0
 801425c:	d0f3      	beq.n	8014246 <rmw_destroy_subscription+0x12>
 801425e:	6828      	ldr	r0, [r5, #0]
 8014260:	f000 fde8 	bl	8014e34 <is_uxrce_rmw_identifier_valid>
 8014264:	2800      	cmp	r0, #0
 8014266:	d0ee      	beq.n	8014246 <rmw_destroy_subscription+0x12>
 8014268:	686e      	ldr	r6, [r5, #4]
 801426a:	2e00      	cmp	r6, #0
 801426c:	d0eb      	beq.n	8014246 <rmw_destroy_subscription+0x12>
 801426e:	6a37      	ldr	r7, [r6, #32]
 8014270:	6972      	ldr	r2, [r6, #20]
 8014272:	6938      	ldr	r0, [r7, #16]
 8014274:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8014278:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801427c:	6819      	ldr	r1, [r3, #0]
 801427e:	f001 f85d 	bl	801533c <uxr_buffer_cancel_data>
 8014282:	4602      	mov	r2, r0
 8014284:	6938      	ldr	r0, [r7, #16]
 8014286:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801428a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801428e:	f000 fd05 	bl	8014c9c <run_xrce_session>
 8014292:	69f0      	ldr	r0, [r6, #28]
 8014294:	f004 ff14 	bl	80190c0 <destroy_topic>
 8014298:	6a33      	ldr	r3, [r6, #32]
 801429a:	6972      	ldr	r2, [r6, #20]
 801429c:	6918      	ldr	r0, [r3, #16]
 801429e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80142a2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80142a6:	6819      	ldr	r1, [r3, #0]
 80142a8:	f000 fe68 	bl	8014f7c <uxr_buffer_delete_entity>
 80142ac:	6a33      	ldr	r3, [r6, #32]
 80142ae:	4680      	mov	r8, r0
 80142b0:	6932      	ldr	r2, [r6, #16]
 80142b2:	6918      	ldr	r0, [r3, #16]
 80142b4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80142b8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80142bc:	6819      	ldr	r1, [r3, #0]
 80142be:	f000 fe5d 	bl	8014f7c <uxr_buffer_delete_entity>
 80142c2:	4606      	mov	r6, r0
 80142c4:	6938      	ldr	r0, [r7, #16]
 80142c6:	4642      	mov	r2, r8
 80142c8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80142cc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80142d0:	f000 fce4 	bl	8014c9c <run_xrce_session>
 80142d4:	693f      	ldr	r7, [r7, #16]
 80142d6:	4632      	mov	r2, r6
 80142d8:	4606      	mov	r6, r0
 80142da:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 80142de:	4638      	mov	r0, r7
 80142e0:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 80142e4:	f000 fcda 	bl	8014c9c <run_xrce_session>
 80142e8:	b126      	cbz	r6, 80142f4 <rmw_destroy_subscription+0xc0>
 80142ea:	b118      	cbz	r0, 80142f4 <rmw_destroy_subscription+0xc0>
 80142ec:	4628      	mov	r0, r5
 80142ee:	f000 fb85 	bl	80149fc <rmw_uxrce_fini_subscription_memory>
 80142f2:	e7a9      	b.n	8014248 <rmw_destroy_subscription+0x14>
 80142f4:	2402      	movs	r4, #2
 80142f6:	e7f9      	b.n	80142ec <rmw_destroy_subscription+0xb8>

080142f8 <rmw_take_with_info>:
 80142f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142fa:	4604      	mov	r4, r0
 80142fc:	6800      	ldr	r0, [r0, #0]
 80142fe:	b089      	sub	sp, #36	; 0x24
 8014300:	460f      	mov	r7, r1
 8014302:	4615      	mov	r5, r2
 8014304:	b128      	cbz	r0, 8014312 <rmw_take_with_info+0x1a>
 8014306:	4b24      	ldr	r3, [pc, #144]	; (8014398 <rmw_take_with_info+0xa0>)
 8014308:	6819      	ldr	r1, [r3, #0]
 801430a:	f7eb ff99 	bl	8000240 <strcmp>
 801430e:	2800      	cmp	r0, #0
 8014310:	d13e      	bne.n	8014390 <rmw_take_with_info+0x98>
 8014312:	b305      	cbz	r5, 8014356 <rmw_take_with_info+0x5e>
 8014314:	2300      	movs	r3, #0
 8014316:	6864      	ldr	r4, [r4, #4]
 8014318:	702b      	strb	r3, [r5, #0]
 801431a:	f000 fc41 	bl	8014ba0 <rmw_uxrce_clean_expired_static_input_buffer>
 801431e:	4620      	mov	r0, r4
 8014320:	f000 fc14 	bl	8014b4c <rmw_uxrce_find_static_input_buffer_by_owner>
 8014324:	4606      	mov	r6, r0
 8014326:	b1f0      	cbz	r0, 8014366 <rmw_take_with_info+0x6e>
 8014328:	6881      	ldr	r1, [r0, #8]
 801432a:	4668      	mov	r0, sp
 801432c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8014330:	3110      	adds	r1, #16
 8014332:	f7fa fd59 	bl	800ede8 <ucdr_init_buffer>
 8014336:	69a3      	ldr	r3, [r4, #24]
 8014338:	4639      	mov	r1, r7
 801433a:	4668      	mov	r0, sp
 801433c:	68db      	ldr	r3, [r3, #12]
 801433e:	4798      	blx	r3
 8014340:	4604      	mov	r4, r0
 8014342:	4631      	mov	r1, r6
 8014344:	4815      	ldr	r0, [pc, #84]	; (801439c <rmw_take_with_info+0xa4>)
 8014346:	f004 fe7d 	bl	8019044 <put_memory>
 801434a:	702c      	strb	r4, [r5, #0]
 801434c:	f084 0001 	eor.w	r0, r4, #1
 8014350:	b2c0      	uxtb	r0, r0
 8014352:	b009      	add	sp, #36	; 0x24
 8014354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014356:	6864      	ldr	r4, [r4, #4]
 8014358:	f000 fc22 	bl	8014ba0 <rmw_uxrce_clean_expired_static_input_buffer>
 801435c:	4620      	mov	r0, r4
 801435e:	f000 fbf5 	bl	8014b4c <rmw_uxrce_find_static_input_buffer_by_owner>
 8014362:	4605      	mov	r5, r0
 8014364:	b910      	cbnz	r0, 801436c <rmw_take_with_info+0x74>
 8014366:	2001      	movs	r0, #1
 8014368:	b009      	add	sp, #36	; 0x24
 801436a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801436c:	68a9      	ldr	r1, [r5, #8]
 801436e:	4668      	mov	r0, sp
 8014370:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8014374:	3110      	adds	r1, #16
 8014376:	f7fa fd37 	bl	800ede8 <ucdr_init_buffer>
 801437a:	69a3      	ldr	r3, [r4, #24]
 801437c:	4639      	mov	r1, r7
 801437e:	4668      	mov	r0, sp
 8014380:	68db      	ldr	r3, [r3, #12]
 8014382:	4798      	blx	r3
 8014384:	4629      	mov	r1, r5
 8014386:	4604      	mov	r4, r0
 8014388:	4804      	ldr	r0, [pc, #16]	; (801439c <rmw_take_with_info+0xa4>)
 801438a:	f004 fe5b 	bl	8019044 <put_memory>
 801438e:	e7dd      	b.n	801434c <rmw_take_with_info+0x54>
 8014390:	200c      	movs	r0, #12
 8014392:	b009      	add	sp, #36	; 0x24
 8014394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014396:	bf00      	nop
 8014398:	0801ceb0 	.word	0x0801ceb0
 801439c:	200104dc 	.word	0x200104dc

080143a0 <rmw_uxrce_transport_init>:
 80143a0:	b508      	push	{r3, lr}
 80143a2:	b108      	cbz	r0, 80143a8 <rmw_uxrce_transport_init+0x8>
 80143a4:	f100 0210 	add.w	r2, r0, #16
 80143a8:	b139      	cbz	r1, 80143ba <rmw_uxrce_transport_init+0x1a>
 80143aa:	6949      	ldr	r1, [r1, #20]
 80143ac:	4610      	mov	r0, r2
 80143ae:	f000 ff23 	bl	80151f8 <uxr_init_custom_transport>
 80143b2:	f080 0001 	eor.w	r0, r0, #1
 80143b6:	b2c0      	uxtb	r0, r0
 80143b8:	bd08      	pop	{r3, pc}
 80143ba:	4b04      	ldr	r3, [pc, #16]	; (80143cc <rmw_uxrce_transport_init+0x2c>)
 80143bc:	4610      	mov	r0, r2
 80143be:	6859      	ldr	r1, [r3, #4]
 80143c0:	f000 ff1a 	bl	80151f8 <uxr_init_custom_transport>
 80143c4:	f080 0001 	eor.w	r0, r0, #1
 80143c8:	b2c0      	uxtb	r0, r0
 80143ca:	bd08      	pop	{r3, pc}
 80143cc:	2000b52c 	.word	0x2000b52c

080143d0 <rmw_wait>:
 80143d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80143d4:	4698      	mov	r8, r3
 80143d6:	ea40 0301 	orr.w	r3, r0, r1
 80143da:	b089      	sub	sp, #36	; 0x24
 80143dc:	ea48 0303 	orr.w	r3, r8, r3
 80143e0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80143e2:	4313      	orrs	r3, r2
 80143e4:	f000 8106 	beq.w	80145f4 <rmw_wait+0x224>
 80143e8:	4605      	mov	r5, r0
 80143ea:	460e      	mov	r6, r1
 80143ec:	4691      	mov	r9, r2
 80143ee:	b16c      	cbz	r4, 801440c <rmw_wait+0x3c>
 80143f0:	4ba6      	ldr	r3, [pc, #664]	; (801468c <rmw_wait+0x2bc>)
 80143f2:	af04      	add	r7, sp, #16
 80143f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80143f6:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80143fa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80143fe:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014402:	f004 fc9f 	bl	8018d44 <rmw_time_equal>
 8014406:	2800      	cmp	r0, #0
 8014408:	f000 810b 	beq.w	8014622 <rmw_wait+0x252>
 801440c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014410:	f000 fbc6 	bl	8014ba0 <rmw_uxrce_clean_expired_static_input_buffer>
 8014414:	4b9e      	ldr	r3, [pc, #632]	; (8014690 <rmw_wait+0x2c0>)
 8014416:	681c      	ldr	r4, [r3, #0]
 8014418:	b14c      	cbz	r4, 801442e <rmw_wait+0x5e>
 801441a:	4623      	mov	r3, r4
 801441c:	2100      	movs	r1, #0
 801441e:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8014422:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8014426:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 801442a:	2b00      	cmp	r3, #0
 801442c:	d1f7      	bne.n	801441e <rmw_wait+0x4e>
 801442e:	f1b9 0f00 	cmp.w	r9, #0
 8014432:	d011      	beq.n	8014458 <rmw_wait+0x88>
 8014434:	f8d9 1000 	ldr.w	r1, [r9]
 8014438:	b171      	cbz	r1, 8014458 <rmw_wait+0x88>
 801443a:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801443e:	2300      	movs	r3, #0
 8014440:	2001      	movs	r0, #1
 8014442:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014446:	3301      	adds	r3, #1
 8014448:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801444a:	4299      	cmp	r1, r3
 801444c:	6912      	ldr	r2, [r2, #16]
 801444e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8014452:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8014456:	d1f4      	bne.n	8014442 <rmw_wait+0x72>
 8014458:	f1b8 0f00 	cmp.w	r8, #0
 801445c:	d011      	beq.n	8014482 <rmw_wait+0xb2>
 801445e:	f8d8 1000 	ldr.w	r1, [r8]
 8014462:	b171      	cbz	r1, 8014482 <rmw_wait+0xb2>
 8014464:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8014468:	2300      	movs	r3, #0
 801446a:	2001      	movs	r0, #1
 801446c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014470:	3301      	adds	r3, #1
 8014472:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8014474:	4299      	cmp	r1, r3
 8014476:	6912      	ldr	r2, [r2, #16]
 8014478:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801447c:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8014480:	d1f4      	bne.n	801446c <rmw_wait+0x9c>
 8014482:	b185      	cbz	r5, 80144a6 <rmw_wait+0xd6>
 8014484:	6829      	ldr	r1, [r5, #0]
 8014486:	b171      	cbz	r1, 80144a6 <rmw_wait+0xd6>
 8014488:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801448c:	2300      	movs	r3, #0
 801448e:	2001      	movs	r0, #1
 8014490:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8014494:	3301      	adds	r3, #1
 8014496:	6a12      	ldr	r2, [r2, #32]
 8014498:	4299      	cmp	r1, r3
 801449a:	6912      	ldr	r2, [r2, #16]
 801449c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80144a0:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 80144a4:	d1f4      	bne.n	8014490 <rmw_wait+0xc0>
 80144a6:	b344      	cbz	r4, 80144fa <rmw_wait+0x12a>
 80144a8:	4622      	mov	r2, r4
 80144aa:	2300      	movs	r3, #0
 80144ac:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80144b0:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80144b4:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 80144b8:	440b      	add	r3, r1
 80144ba:	b2db      	uxtb	r3, r3
 80144bc:	2a00      	cmp	r2, #0
 80144be:	d1f5      	bne.n	80144ac <rmw_wait+0xdc>
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d05f      	beq.n	8014584 <rmw_wait+0x1b4>
 80144c4:	1c7a      	adds	r2, r7, #1
 80144c6:	d00d      	beq.n	80144e4 <rmw_wait+0x114>
 80144c8:	ee07 7a90 	vmov	s15, r7
 80144cc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80144d0:	ee07 3a90 	vmov	s15, r3
 80144d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80144d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80144dc:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80144e0:	ee17 7a90 	vmov	r7, s15
 80144e4:	68a0      	ldr	r0, [r4, #8]
 80144e6:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 80144ea:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	f040 808d 	bne.w	801460e <rmw_wait+0x23e>
 80144f4:	6864      	ldr	r4, [r4, #4]
 80144f6:	2c00      	cmp	r4, #0
 80144f8:	d1f4      	bne.n	80144e4 <rmw_wait+0x114>
 80144fa:	f1b9 0f00 	cmp.w	r9, #0
 80144fe:	f000 80a1 	beq.w	8014644 <rmw_wait+0x274>
 8014502:	f8d9 7000 	ldr.w	r7, [r9]
 8014506:	2f00      	cmp	r7, #0
 8014508:	f000 80a4 	beq.w	8014654 <rmw_wait+0x284>
 801450c:	2400      	movs	r4, #0
 801450e:	4627      	mov	r7, r4
 8014510:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014514:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014518:	f000 fb18 	bl	8014b4c <rmw_uxrce_find_static_input_buffer_by_owner>
 801451c:	2800      	cmp	r0, #0
 801451e:	d03b      	beq.n	8014598 <rmw_wait+0x1c8>
 8014520:	3401      	adds	r4, #1
 8014522:	f8d9 3000 	ldr.w	r3, [r9]
 8014526:	2701      	movs	r7, #1
 8014528:	42a3      	cmp	r3, r4
 801452a:	d8f1      	bhi.n	8014510 <rmw_wait+0x140>
 801452c:	2701      	movs	r7, #1
 801452e:	f1b8 0f00 	cmp.w	r8, #0
 8014532:	d010      	beq.n	8014556 <rmw_wait+0x186>
 8014534:	f8d8 3000 	ldr.w	r3, [r8]
 8014538:	b16b      	cbz	r3, 8014556 <rmw_wait+0x186>
 801453a:	2400      	movs	r4, #0
 801453c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014540:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014544:	f000 fb02 	bl	8014b4c <rmw_uxrce_find_static_input_buffer_by_owner>
 8014548:	b370      	cbz	r0, 80145a8 <rmw_wait+0x1d8>
 801454a:	3401      	adds	r4, #1
 801454c:	f8d8 3000 	ldr.w	r3, [r8]
 8014550:	2701      	movs	r7, #1
 8014552:	42a3      	cmp	r3, r4
 8014554:	d8f2      	bhi.n	801453c <rmw_wait+0x16c>
 8014556:	2d00      	cmp	r5, #0
 8014558:	d035      	beq.n	80145c6 <rmw_wait+0x1f6>
 801455a:	682b      	ldr	r3, [r5, #0]
 801455c:	b39b      	cbz	r3, 80145c6 <rmw_wait+0x1f6>
 801455e:	2400      	movs	r4, #0
 8014560:	686b      	ldr	r3, [r5, #4]
 8014562:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014566:	f000 faf1 	bl	8014b4c <rmw_uxrce_find_static_input_buffer_by_owner>
 801456a:	b328      	cbz	r0, 80145b8 <rmw_wait+0x1e8>
 801456c:	3401      	adds	r4, #1
 801456e:	682b      	ldr	r3, [r5, #0]
 8014570:	2701      	movs	r7, #1
 8014572:	42a3      	cmp	r3, r4
 8014574:	d8f4      	bhi.n	8014560 <rmw_wait+0x190>
 8014576:	2e00      	cmp	r6, #0
 8014578:	d03c      	beq.n	80145f4 <rmw_wait+0x224>
 801457a:	6834      	ldr	r4, [r6, #0]
 801457c:	2c00      	cmp	r4, #0
 801457e:	d039      	beq.n	80145f4 <rmw_wait+0x224>
 8014580:	2701      	movs	r7, #1
 8014582:	e023      	b.n	80145cc <rmw_wait+0x1fc>
 8014584:	68a0      	ldr	r0, [r4, #8]
 8014586:	2100      	movs	r1, #0
 8014588:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801458c:	f001 fc6e 	bl	8015e6c <uxr_run_session_timeout>
 8014590:	6864      	ldr	r4, [r4, #4]
 8014592:	2c00      	cmp	r4, #0
 8014594:	d1f6      	bne.n	8014584 <rmw_wait+0x1b4>
 8014596:	e7b0      	b.n	80144fa <rmw_wait+0x12a>
 8014598:	e9d9 3200 	ldrd	r3, r2, [r9]
 801459c:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80145a0:	3401      	adds	r4, #1
 80145a2:	42a3      	cmp	r3, r4
 80145a4:	d8b4      	bhi.n	8014510 <rmw_wait+0x140>
 80145a6:	e7c2      	b.n	801452e <rmw_wait+0x15e>
 80145a8:	e9d8 3200 	ldrd	r3, r2, [r8]
 80145ac:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80145b0:	3401      	adds	r4, #1
 80145b2:	429c      	cmp	r4, r3
 80145b4:	d3c2      	bcc.n	801453c <rmw_wait+0x16c>
 80145b6:	e7ce      	b.n	8014556 <rmw_wait+0x186>
 80145b8:	e9d5 3200 	ldrd	r3, r2, [r5]
 80145bc:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80145c0:	3401      	adds	r4, #1
 80145c2:	42a3      	cmp	r3, r4
 80145c4:	d8cc      	bhi.n	8014560 <rmw_wait+0x190>
 80145c6:	b1a6      	cbz	r6, 80145f2 <rmw_wait+0x222>
 80145c8:	6834      	ldr	r4, [r6, #0]
 80145ca:	b194      	cbz	r4, 80145f2 <rmw_wait+0x222>
 80145cc:	2300      	movs	r3, #0
 80145ce:	461d      	mov	r5, r3
 80145d0:	e004      	b.n	80145dc <rmw_wait+0x20c>
 80145d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80145d6:	3301      	adds	r3, #1
 80145d8:	42a3      	cmp	r3, r4
 80145da:	d00a      	beq.n	80145f2 <rmw_wait+0x222>
 80145dc:	6870      	ldr	r0, [r6, #4]
 80145de:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 80145e2:	7c0a      	ldrb	r2, [r1, #16]
 80145e4:	2a00      	cmp	r2, #0
 80145e6:	d0f4      	beq.n	80145d2 <rmw_wait+0x202>
 80145e8:	3301      	adds	r3, #1
 80145ea:	4617      	mov	r7, r2
 80145ec:	740d      	strb	r5, [r1, #16]
 80145ee:	42a3      	cmp	r3, r4
 80145f0:	d1f4      	bne.n	80145dc <rmw_wait+0x20c>
 80145f2:	b147      	cbz	r7, 8014606 <rmw_wait+0x236>
 80145f4:	2000      	movs	r0, #0
 80145f6:	b009      	add	sp, #36	; 0x24
 80145f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80145fc:	b11e      	cbz	r6, 8014606 <rmw_wait+0x236>
 80145fe:	6834      	ldr	r4, [r6, #0]
 8014600:	462f      	mov	r7, r5
 8014602:	2c00      	cmp	r4, #0
 8014604:	d1e2      	bne.n	80145cc <rmw_wait+0x1fc>
 8014606:	2002      	movs	r0, #2
 8014608:	b009      	add	sp, #36	; 0x24
 801460a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801460e:	4639      	mov	r1, r7
 8014610:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014614:	f001 fc44 	bl	8015ea0 <uxr_run_session_until_data>
 8014618:	6864      	ldr	r4, [r4, #4]
 801461a:	2c00      	cmp	r4, #0
 801461c:	f47f af62 	bne.w	80144e4 <rmw_wait+0x114>
 8014620:	e76b      	b.n	80144fa <rmw_wait+0x12a>
 8014622:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014626:	f004 fbe3 	bl	8018df0 <rmw_time_total_nsec>
 801462a:	2300      	movs	r3, #0
 801462c:	4a19      	ldr	r2, [pc, #100]	; (8014694 <rmw_wait+0x2c4>)
 801462e:	f7eb febf 	bl	80003b0 <__aeabi_uldivmod>
 8014632:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8014636:	4607      	mov	r7, r0
 8014638:	f171 0300 	sbcs.w	r3, r1, #0
 801463c:	bfa8      	it	ge
 801463e:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 8014642:	e6e5      	b.n	8014410 <rmw_wait+0x40>
 8014644:	f1b8 0f00 	cmp.w	r8, #0
 8014648:	d00f      	beq.n	801466a <rmw_wait+0x29a>
 801464a:	f8d8 3000 	ldr.w	r3, [r8]
 801464e:	b193      	cbz	r3, 8014676 <rmw_wait+0x2a6>
 8014650:	464f      	mov	r7, r9
 8014652:	e772      	b.n	801453a <rmw_wait+0x16a>
 8014654:	f1b8 0f00 	cmp.w	r8, #0
 8014658:	d007      	beq.n	801466a <rmw_wait+0x29a>
 801465a:	f8d8 3000 	ldr.w	r3, [r8]
 801465e:	2b00      	cmp	r3, #0
 8014660:	f47f af6b 	bne.w	801453a <rmw_wait+0x16a>
 8014664:	b155      	cbz	r5, 801467c <rmw_wait+0x2ac>
 8014666:	461f      	mov	r7, r3
 8014668:	e777      	b.n	801455a <rmw_wait+0x18a>
 801466a:	2d00      	cmp	r5, #0
 801466c:	d0c6      	beq.n	80145fc <rmw_wait+0x22c>
 801466e:	682b      	ldr	r3, [r5, #0]
 8014670:	b143      	cbz	r3, 8014684 <rmw_wait+0x2b4>
 8014672:	4647      	mov	r7, r8
 8014674:	e773      	b.n	801455e <rmw_wait+0x18e>
 8014676:	b10d      	cbz	r5, 801467c <rmw_wait+0x2ac>
 8014678:	464f      	mov	r7, r9
 801467a:	e76e      	b.n	801455a <rmw_wait+0x18a>
 801467c:	462f      	mov	r7, r5
 801467e:	2e00      	cmp	r6, #0
 8014680:	d1a2      	bne.n	80145c8 <rmw_wait+0x1f8>
 8014682:	e7c0      	b.n	8014606 <rmw_wait+0x236>
 8014684:	4647      	mov	r7, r8
 8014686:	2e00      	cmp	r6, #0
 8014688:	d19e      	bne.n	80145c8 <rmw_wait+0x1f8>
 801468a:	e7bc      	b.n	8014606 <rmw_wait+0x236>
 801468c:	0801b670 	.word	0x0801b670
 8014690:	200104cc 	.word	0x200104cc
 8014694:	000f4240 	.word	0x000f4240

08014698 <rmw_create_wait_set>:
 8014698:	b508      	push	{r3, lr}
 801469a:	4803      	ldr	r0, [pc, #12]	; (80146a8 <rmw_create_wait_set+0x10>)
 801469c:	f004 fcc2 	bl	8019024 <get_memory>
 80146a0:	b108      	cbz	r0, 80146a6 <rmw_create_wait_set+0xe>
 80146a2:	6880      	ldr	r0, [r0, #8]
 80146a4:	3010      	adds	r0, #16
 80146a6:	bd08      	pop	{r3, pc}
 80146a8:	2001050c 	.word	0x2001050c

080146ac <rmw_destroy_wait_set>:
 80146ac:	b508      	push	{r3, lr}
 80146ae:	4b08      	ldr	r3, [pc, #32]	; (80146d0 <rmw_destroy_wait_set+0x24>)
 80146b0:	6819      	ldr	r1, [r3, #0]
 80146b2:	b911      	cbnz	r1, 80146ba <rmw_destroy_wait_set+0xe>
 80146b4:	e00a      	b.n	80146cc <rmw_destroy_wait_set+0x20>
 80146b6:	6849      	ldr	r1, [r1, #4]
 80146b8:	b141      	cbz	r1, 80146cc <rmw_destroy_wait_set+0x20>
 80146ba:	688b      	ldr	r3, [r1, #8]
 80146bc:	3310      	adds	r3, #16
 80146be:	4298      	cmp	r0, r3
 80146c0:	d1f9      	bne.n	80146b6 <rmw_destroy_wait_set+0xa>
 80146c2:	4803      	ldr	r0, [pc, #12]	; (80146d0 <rmw_destroy_wait_set+0x24>)
 80146c4:	f004 fcbe 	bl	8019044 <put_memory>
 80146c8:	2000      	movs	r0, #0
 80146ca:	bd08      	pop	{r3, pc}
 80146cc:	2001      	movs	r0, #1
 80146ce:	bd08      	pop	{r3, pc}
 80146d0:	2001050c 	.word	0x2001050c

080146d4 <rmw_uxrce_init_service_memory>:
 80146d4:	b1e2      	cbz	r2, 8014710 <rmw_uxrce_init_service_memory+0x3c>
 80146d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146da:	7b05      	ldrb	r5, [r0, #12]
 80146dc:	4606      	mov	r6, r0
 80146de:	b9ad      	cbnz	r5, 801470c <rmw_uxrce_init_service_memory+0x38>
 80146e0:	23c8      	movs	r3, #200	; 0xc8
 80146e2:	4617      	mov	r7, r2
 80146e4:	460c      	mov	r4, r1
 80146e6:	46a8      	mov	r8, r5
 80146e8:	6083      	str	r3, [r0, #8]
 80146ea:	f240 1301 	movw	r3, #257	; 0x101
 80146ee:	e9c0 5500 	strd	r5, r5, [r0]
 80146f2:	8183      	strh	r3, [r0, #12]
 80146f4:	3501      	adds	r5, #1
 80146f6:	4621      	mov	r1, r4
 80146f8:	4630      	mov	r0, r6
 80146fa:	f004 fca3 	bl	8019044 <put_memory>
 80146fe:	42af      	cmp	r7, r5
 8014700:	60a4      	str	r4, [r4, #8]
 8014702:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8014706:	f804 8cbc 	strb.w	r8, [r4, #-188]
 801470a:	d1f3      	bne.n	80146f4 <rmw_uxrce_init_service_memory+0x20>
 801470c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014710:	4770      	bx	lr
 8014712:	bf00      	nop

08014714 <rmw_uxrce_init_client_memory>:
 8014714:	b1e2      	cbz	r2, 8014750 <rmw_uxrce_init_client_memory+0x3c>
 8014716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801471a:	7b05      	ldrb	r5, [r0, #12]
 801471c:	4606      	mov	r6, r0
 801471e:	b9ad      	cbnz	r5, 801474c <rmw_uxrce_init_client_memory+0x38>
 8014720:	23c8      	movs	r3, #200	; 0xc8
 8014722:	4617      	mov	r7, r2
 8014724:	460c      	mov	r4, r1
 8014726:	46a8      	mov	r8, r5
 8014728:	6083      	str	r3, [r0, #8]
 801472a:	f240 1301 	movw	r3, #257	; 0x101
 801472e:	e9c0 5500 	strd	r5, r5, [r0]
 8014732:	8183      	strh	r3, [r0, #12]
 8014734:	3501      	adds	r5, #1
 8014736:	4621      	mov	r1, r4
 8014738:	4630      	mov	r0, r6
 801473a:	f004 fc83 	bl	8019044 <put_memory>
 801473e:	42af      	cmp	r7, r5
 8014740:	60a4      	str	r4, [r4, #8]
 8014742:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8014746:	f804 8cbc 	strb.w	r8, [r4, #-188]
 801474a:	d1f3      	bne.n	8014734 <rmw_uxrce_init_client_memory+0x20>
 801474c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014750:	4770      	bx	lr
 8014752:	bf00      	nop

08014754 <rmw_uxrce_init_publisher_memory>:
 8014754:	b1e2      	cbz	r2, 8014790 <rmw_uxrce_init_publisher_memory+0x3c>
 8014756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801475a:	7b05      	ldrb	r5, [r0, #12]
 801475c:	4606      	mov	r6, r0
 801475e:	b9ad      	cbnz	r5, 801478c <rmw_uxrce_init_publisher_memory+0x38>
 8014760:	23d8      	movs	r3, #216	; 0xd8
 8014762:	4617      	mov	r7, r2
 8014764:	460c      	mov	r4, r1
 8014766:	46a8      	mov	r8, r5
 8014768:	6083      	str	r3, [r0, #8]
 801476a:	f240 1301 	movw	r3, #257	; 0x101
 801476e:	e9c0 5500 	strd	r5, r5, [r0]
 8014772:	8183      	strh	r3, [r0, #12]
 8014774:	3501      	adds	r5, #1
 8014776:	4621      	mov	r1, r4
 8014778:	4630      	mov	r0, r6
 801477a:	f004 fc63 	bl	8019044 <put_memory>
 801477e:	42af      	cmp	r7, r5
 8014780:	60a4      	str	r4, [r4, #8]
 8014782:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8014786:	f804 8ccc 	strb.w	r8, [r4, #-204]
 801478a:	d1f3      	bne.n	8014774 <rmw_uxrce_init_publisher_memory+0x20>
 801478c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014790:	4770      	bx	lr
 8014792:	bf00      	nop

08014794 <rmw_uxrce_init_subscription_memory>:
 8014794:	b1e2      	cbz	r2, 80147d0 <rmw_uxrce_init_subscription_memory+0x3c>
 8014796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801479a:	7b05      	ldrb	r5, [r0, #12]
 801479c:	4606      	mov	r6, r0
 801479e:	b9ad      	cbnz	r5, 80147cc <rmw_uxrce_init_subscription_memory+0x38>
 80147a0:	23d8      	movs	r3, #216	; 0xd8
 80147a2:	4617      	mov	r7, r2
 80147a4:	460c      	mov	r4, r1
 80147a6:	46a8      	mov	r8, r5
 80147a8:	6083      	str	r3, [r0, #8]
 80147aa:	f240 1301 	movw	r3, #257	; 0x101
 80147ae:	e9c0 5500 	strd	r5, r5, [r0]
 80147b2:	8183      	strh	r3, [r0, #12]
 80147b4:	3501      	adds	r5, #1
 80147b6:	4621      	mov	r1, r4
 80147b8:	4630      	mov	r0, r6
 80147ba:	f004 fc43 	bl	8019044 <put_memory>
 80147be:	42af      	cmp	r7, r5
 80147c0:	60a4      	str	r4, [r4, #8]
 80147c2:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 80147c6:	f804 8ccc 	strb.w	r8, [r4, #-204]
 80147ca:	d1f3      	bne.n	80147b4 <rmw_uxrce_init_subscription_memory+0x20>
 80147cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147d0:	4770      	bx	lr
 80147d2:	bf00      	nop

080147d4 <rmw_uxrce_init_node_memory>:
 80147d4:	b1e2      	cbz	r2, 8014810 <rmw_uxrce_init_node_memory+0x3c>
 80147d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80147da:	7b05      	ldrb	r5, [r0, #12]
 80147dc:	4606      	mov	r6, r0
 80147de:	b9ad      	cbnz	r5, 801480c <rmw_uxrce_init_node_memory+0x38>
 80147e0:	23a4      	movs	r3, #164	; 0xa4
 80147e2:	4617      	mov	r7, r2
 80147e4:	460c      	mov	r4, r1
 80147e6:	46a8      	mov	r8, r5
 80147e8:	6083      	str	r3, [r0, #8]
 80147ea:	f240 1301 	movw	r3, #257	; 0x101
 80147ee:	e9c0 5500 	strd	r5, r5, [r0]
 80147f2:	8183      	strh	r3, [r0, #12]
 80147f4:	3501      	adds	r5, #1
 80147f6:	4621      	mov	r1, r4
 80147f8:	4630      	mov	r0, r6
 80147fa:	f004 fc23 	bl	8019044 <put_memory>
 80147fe:	42af      	cmp	r7, r5
 8014800:	60a4      	str	r4, [r4, #8]
 8014802:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 8014806:	f804 8c98 	strb.w	r8, [r4, #-152]
 801480a:	d1f3      	bne.n	80147f4 <rmw_uxrce_init_node_memory+0x20>
 801480c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014810:	4770      	bx	lr
 8014812:	bf00      	nop

08014814 <rmw_uxrce_init_session_memory>:
 8014814:	b1ea      	cbz	r2, 8014852 <rmw_uxrce_init_session_memory+0x3e>
 8014816:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801481a:	7b05      	ldrb	r5, [r0, #12]
 801481c:	4606      	mov	r6, r0
 801481e:	b9b5      	cbnz	r5, 801484e <rmw_uxrce_init_session_memory+0x3a>
 8014820:	f241 58a8 	movw	r8, #5544	; 0x15a8
 8014824:	f240 1301 	movw	r3, #257	; 0x101
 8014828:	4617      	mov	r7, r2
 801482a:	460c      	mov	r4, r1
 801482c:	46a9      	mov	r9, r5
 801482e:	f8c0 8008 	str.w	r8, [r0, #8]
 8014832:	8183      	strh	r3, [r0, #12]
 8014834:	e9c0 5500 	strd	r5, r5, [r0]
 8014838:	3501      	adds	r5, #1
 801483a:	4621      	mov	r1, r4
 801483c:	4630      	mov	r0, r6
 801483e:	f004 fc01 	bl	8019044 <put_memory>
 8014842:	42af      	cmp	r7, r5
 8014844:	60a4      	str	r4, [r4, #8]
 8014846:	f884 900c 	strb.w	r9, [r4, #12]
 801484a:	4444      	add	r4, r8
 801484c:	d1f4      	bne.n	8014838 <rmw_uxrce_init_session_memory+0x24>
 801484e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014852:	4770      	bx	lr

08014854 <rmw_uxrce_init_topic_memory>:
 8014854:	b1e2      	cbz	r2, 8014890 <rmw_uxrce_init_topic_memory+0x3c>
 8014856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801485a:	7b05      	ldrb	r5, [r0, #12]
 801485c:	4606      	mov	r6, r0
 801485e:	b9ad      	cbnz	r5, 801488c <rmw_uxrce_init_topic_memory+0x38>
 8014860:	231c      	movs	r3, #28
 8014862:	4617      	mov	r7, r2
 8014864:	460c      	mov	r4, r1
 8014866:	46a8      	mov	r8, r5
 8014868:	6083      	str	r3, [r0, #8]
 801486a:	f240 1301 	movw	r3, #257	; 0x101
 801486e:	e9c0 5500 	strd	r5, r5, [r0]
 8014872:	8183      	strh	r3, [r0, #12]
 8014874:	3501      	adds	r5, #1
 8014876:	4621      	mov	r1, r4
 8014878:	4630      	mov	r0, r6
 801487a:	f004 fbe3 	bl	8019044 <put_memory>
 801487e:	42af      	cmp	r7, r5
 8014880:	60a4      	str	r4, [r4, #8]
 8014882:	f104 041c 	add.w	r4, r4, #28
 8014886:	f804 8c10 	strb.w	r8, [r4, #-16]
 801488a:	d1f3      	bne.n	8014874 <rmw_uxrce_init_topic_memory+0x20>
 801488c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014890:	4770      	bx	lr
 8014892:	bf00      	nop

08014894 <rmw_uxrce_init_static_input_buffer_memory>:
 8014894:	b1ea      	cbz	r2, 80148d2 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8014896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801489a:	7b05      	ldrb	r5, [r0, #12]
 801489c:	4606      	mov	r6, r0
 801489e:	b9b5      	cbnz	r5, 80148ce <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 80148a0:	f44f 6304 	mov.w	r3, #2112	; 0x840
 80148a4:	4617      	mov	r7, r2
 80148a6:	460c      	mov	r4, r1
 80148a8:	46a8      	mov	r8, r5
 80148aa:	6083      	str	r3, [r0, #8]
 80148ac:	f240 1301 	movw	r3, #257	; 0x101
 80148b0:	e9c0 5500 	strd	r5, r5, [r0]
 80148b4:	8183      	strh	r3, [r0, #12]
 80148b6:	3501      	adds	r5, #1
 80148b8:	4621      	mov	r1, r4
 80148ba:	4630      	mov	r0, r6
 80148bc:	f004 fbc2 	bl	8019044 <put_memory>
 80148c0:	42af      	cmp	r7, r5
 80148c2:	60a4      	str	r4, [r4, #8]
 80148c4:	f884 800c 	strb.w	r8, [r4, #12]
 80148c8:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 80148cc:	d1f3      	bne.n	80148b6 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 80148ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148d2:	4770      	bx	lr

080148d4 <rmw_uxrce_init_init_options_impl_memory>:
 80148d4:	b1e2      	cbz	r2, 8014910 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 80148d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148da:	7b05      	ldrb	r5, [r0, #12]
 80148dc:	4606      	mov	r6, r0
 80148de:	b9ad      	cbnz	r5, 801490c <rmw_uxrce_init_init_options_impl_memory+0x38>
 80148e0:	232c      	movs	r3, #44	; 0x2c
 80148e2:	4617      	mov	r7, r2
 80148e4:	460c      	mov	r4, r1
 80148e6:	46a8      	mov	r8, r5
 80148e8:	6083      	str	r3, [r0, #8]
 80148ea:	f240 1301 	movw	r3, #257	; 0x101
 80148ee:	e9c0 5500 	strd	r5, r5, [r0]
 80148f2:	8183      	strh	r3, [r0, #12]
 80148f4:	3501      	adds	r5, #1
 80148f6:	4621      	mov	r1, r4
 80148f8:	4630      	mov	r0, r6
 80148fa:	f004 fba3 	bl	8019044 <put_memory>
 80148fe:	42af      	cmp	r7, r5
 8014900:	60a4      	str	r4, [r4, #8]
 8014902:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8014906:	f804 8c20 	strb.w	r8, [r4, #-32]
 801490a:	d1f3      	bne.n	80148f4 <rmw_uxrce_init_init_options_impl_memory+0x20>
 801490c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014910:	4770      	bx	lr
 8014912:	bf00      	nop

08014914 <rmw_uxrce_init_wait_set_memory>:
 8014914:	b1e2      	cbz	r2, 8014950 <rmw_uxrce_init_wait_set_memory+0x3c>
 8014916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801491a:	7b05      	ldrb	r5, [r0, #12]
 801491c:	4606      	mov	r6, r0
 801491e:	b9ad      	cbnz	r5, 801494c <rmw_uxrce_init_wait_set_memory+0x38>
 8014920:	231c      	movs	r3, #28
 8014922:	4617      	mov	r7, r2
 8014924:	460c      	mov	r4, r1
 8014926:	46a8      	mov	r8, r5
 8014928:	6083      	str	r3, [r0, #8]
 801492a:	f240 1301 	movw	r3, #257	; 0x101
 801492e:	e9c0 5500 	strd	r5, r5, [r0]
 8014932:	8183      	strh	r3, [r0, #12]
 8014934:	3501      	adds	r5, #1
 8014936:	4621      	mov	r1, r4
 8014938:	4630      	mov	r0, r6
 801493a:	f004 fb83 	bl	8019044 <put_memory>
 801493e:	42af      	cmp	r7, r5
 8014940:	60a4      	str	r4, [r4, #8]
 8014942:	f104 041c 	add.w	r4, r4, #28
 8014946:	f804 8c10 	strb.w	r8, [r4, #-16]
 801494a:	d1f3      	bne.n	8014934 <rmw_uxrce_init_wait_set_memory+0x20>
 801494c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014950:	4770      	bx	lr
 8014952:	bf00      	nop

08014954 <rmw_uxrce_init_guard_condition_memory>:
 8014954:	b1e2      	cbz	r2, 8014990 <rmw_uxrce_init_guard_condition_memory+0x3c>
 8014956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801495a:	7b05      	ldrb	r5, [r0, #12]
 801495c:	4606      	mov	r6, r0
 801495e:	b9ad      	cbnz	r5, 801498c <rmw_uxrce_init_guard_condition_memory+0x38>
 8014960:	2320      	movs	r3, #32
 8014962:	4617      	mov	r7, r2
 8014964:	460c      	mov	r4, r1
 8014966:	46a8      	mov	r8, r5
 8014968:	6083      	str	r3, [r0, #8]
 801496a:	f240 1301 	movw	r3, #257	; 0x101
 801496e:	e9c0 5500 	strd	r5, r5, [r0]
 8014972:	8183      	strh	r3, [r0, #12]
 8014974:	3501      	adds	r5, #1
 8014976:	4621      	mov	r1, r4
 8014978:	4630      	mov	r0, r6
 801497a:	f004 fb63 	bl	8019044 <put_memory>
 801497e:	42af      	cmp	r7, r5
 8014980:	60a4      	str	r4, [r4, #8]
 8014982:	f104 0420 	add.w	r4, r4, #32
 8014986:	f804 8c14 	strb.w	r8, [r4, #-20]
 801498a:	d1f3      	bne.n	8014974 <rmw_uxrce_init_guard_condition_memory+0x20>
 801498c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014990:	4770      	bx	lr
 8014992:	bf00      	nop

08014994 <rmw_uxrce_fini_session_memory>:
 8014994:	4601      	mov	r1, r0
 8014996:	4801      	ldr	r0, [pc, #4]	; (801499c <rmw_uxrce_fini_session_memory+0x8>)
 8014998:	f004 bb54 	b.w	8019044 <put_memory>
 801499c:	200104cc 	.word	0x200104cc

080149a0 <rmw_uxrce_fini_node_memory>:
 80149a0:	b538      	push	{r3, r4, r5, lr}
 80149a2:	4604      	mov	r4, r0
 80149a4:	6800      	ldr	r0, [r0, #0]
 80149a6:	b128      	cbz	r0, 80149b4 <rmw_uxrce_fini_node_memory+0x14>
 80149a8:	4b07      	ldr	r3, [pc, #28]	; (80149c8 <rmw_uxrce_fini_node_memory+0x28>)
 80149aa:	6819      	ldr	r1, [r3, #0]
 80149ac:	f7eb fc48 	bl	8000240 <strcmp>
 80149b0:	b940      	cbnz	r0, 80149c4 <rmw_uxrce_fini_node_memory+0x24>
 80149b2:	6020      	str	r0, [r4, #0]
 80149b4:	6861      	ldr	r1, [r4, #4]
 80149b6:	b129      	cbz	r1, 80149c4 <rmw_uxrce_fini_node_memory+0x24>
 80149b8:	2500      	movs	r5, #0
 80149ba:	4804      	ldr	r0, [pc, #16]	; (80149cc <rmw_uxrce_fini_node_memory+0x2c>)
 80149bc:	610d      	str	r5, [r1, #16]
 80149be:	f004 fb41 	bl	8019044 <put_memory>
 80149c2:	6065      	str	r5, [r4, #4]
 80149c4:	bd38      	pop	{r3, r4, r5, pc}
 80149c6:	bf00      	nop
 80149c8:	0801ceb0 	.word	0x0801ceb0
 80149cc:	2001049c 	.word	0x2001049c

080149d0 <rmw_uxrce_fini_publisher_memory>:
 80149d0:	b510      	push	{r4, lr}
 80149d2:	4604      	mov	r4, r0
 80149d4:	6800      	ldr	r0, [r0, #0]
 80149d6:	b128      	cbz	r0, 80149e4 <rmw_uxrce_fini_publisher_memory+0x14>
 80149d8:	4b06      	ldr	r3, [pc, #24]	; (80149f4 <rmw_uxrce_fini_publisher_memory+0x24>)
 80149da:	6819      	ldr	r1, [r3, #0]
 80149dc:	f7eb fc30 	bl	8000240 <strcmp>
 80149e0:	b938      	cbnz	r0, 80149f2 <rmw_uxrce_fini_publisher_memory+0x22>
 80149e2:	6020      	str	r0, [r4, #0]
 80149e4:	6861      	ldr	r1, [r4, #4]
 80149e6:	b121      	cbz	r1, 80149f2 <rmw_uxrce_fini_publisher_memory+0x22>
 80149e8:	4803      	ldr	r0, [pc, #12]	; (80149f8 <rmw_uxrce_fini_publisher_memory+0x28>)
 80149ea:	f004 fb2b 	bl	8019044 <put_memory>
 80149ee:	2300      	movs	r3, #0
 80149f0:	6063      	str	r3, [r4, #4]
 80149f2:	bd10      	pop	{r4, pc}
 80149f4:	0801ceb0 	.word	0x0801ceb0
 80149f8:	200104ac 	.word	0x200104ac

080149fc <rmw_uxrce_fini_subscription_memory>:
 80149fc:	b510      	push	{r4, lr}
 80149fe:	4604      	mov	r4, r0
 8014a00:	6800      	ldr	r0, [r0, #0]
 8014a02:	b128      	cbz	r0, 8014a10 <rmw_uxrce_fini_subscription_memory+0x14>
 8014a04:	4b06      	ldr	r3, [pc, #24]	; (8014a20 <rmw_uxrce_fini_subscription_memory+0x24>)
 8014a06:	6819      	ldr	r1, [r3, #0]
 8014a08:	f7eb fc1a 	bl	8000240 <strcmp>
 8014a0c:	b938      	cbnz	r0, 8014a1e <rmw_uxrce_fini_subscription_memory+0x22>
 8014a0e:	6020      	str	r0, [r4, #0]
 8014a10:	6861      	ldr	r1, [r4, #4]
 8014a12:	b121      	cbz	r1, 8014a1e <rmw_uxrce_fini_subscription_memory+0x22>
 8014a14:	4803      	ldr	r0, [pc, #12]	; (8014a24 <rmw_uxrce_fini_subscription_memory+0x28>)
 8014a16:	f004 fb15 	bl	8019044 <put_memory>
 8014a1a:	2300      	movs	r3, #0
 8014a1c:	6063      	str	r3, [r4, #4]
 8014a1e:	bd10      	pop	{r4, pc}
 8014a20:	0801ceb0 	.word	0x0801ceb0
 8014a24:	200104ec 	.word	0x200104ec

08014a28 <rmw_uxrce_fini_service_memory>:
 8014a28:	b510      	push	{r4, lr}
 8014a2a:	4604      	mov	r4, r0
 8014a2c:	6800      	ldr	r0, [r0, #0]
 8014a2e:	b128      	cbz	r0, 8014a3c <rmw_uxrce_fini_service_memory+0x14>
 8014a30:	4b06      	ldr	r3, [pc, #24]	; (8014a4c <rmw_uxrce_fini_service_memory+0x24>)
 8014a32:	6819      	ldr	r1, [r3, #0]
 8014a34:	f7eb fc04 	bl	8000240 <strcmp>
 8014a38:	b938      	cbnz	r0, 8014a4a <rmw_uxrce_fini_service_memory+0x22>
 8014a3a:	6020      	str	r0, [r4, #0]
 8014a3c:	6861      	ldr	r1, [r4, #4]
 8014a3e:	b121      	cbz	r1, 8014a4a <rmw_uxrce_fini_service_memory+0x22>
 8014a40:	4803      	ldr	r0, [pc, #12]	; (8014a50 <rmw_uxrce_fini_service_memory+0x28>)
 8014a42:	f004 faff 	bl	8019044 <put_memory>
 8014a46:	2300      	movs	r3, #0
 8014a48:	6063      	str	r3, [r4, #4]
 8014a4a:	bd10      	pop	{r4, pc}
 8014a4c:	0801ceb0 	.word	0x0801ceb0
 8014a50:	200104bc 	.word	0x200104bc

08014a54 <rmw_uxrce_fini_client_memory>:
 8014a54:	b510      	push	{r4, lr}
 8014a56:	4604      	mov	r4, r0
 8014a58:	6800      	ldr	r0, [r0, #0]
 8014a5a:	b128      	cbz	r0, 8014a68 <rmw_uxrce_fini_client_memory+0x14>
 8014a5c:	4b06      	ldr	r3, [pc, #24]	; (8014a78 <rmw_uxrce_fini_client_memory+0x24>)
 8014a5e:	6819      	ldr	r1, [r3, #0]
 8014a60:	f7eb fbee 	bl	8000240 <strcmp>
 8014a64:	b938      	cbnz	r0, 8014a76 <rmw_uxrce_fini_client_memory+0x22>
 8014a66:	6020      	str	r0, [r4, #0]
 8014a68:	6861      	ldr	r1, [r4, #4]
 8014a6a:	b121      	cbz	r1, 8014a76 <rmw_uxrce_fini_client_memory+0x22>
 8014a6c:	4803      	ldr	r0, [pc, #12]	; (8014a7c <rmw_uxrce_fini_client_memory+0x28>)
 8014a6e:	f004 fae9 	bl	8019044 <put_memory>
 8014a72:	2300      	movs	r3, #0
 8014a74:	6063      	str	r3, [r4, #4]
 8014a76:	bd10      	pop	{r4, pc}
 8014a78:	0801ceb0 	.word	0x0801ceb0
 8014a7c:	2000bb08 	.word	0x2000bb08

08014a80 <rmw_uxrce_fini_topic_memory>:
 8014a80:	b510      	push	{r4, lr}
 8014a82:	4604      	mov	r4, r0
 8014a84:	4803      	ldr	r0, [pc, #12]	; (8014a94 <rmw_uxrce_fini_topic_memory+0x14>)
 8014a86:	4621      	mov	r1, r4
 8014a88:	f004 fadc 	bl	8019044 <put_memory>
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	61a3      	str	r3, [r4, #24]
 8014a90:	bd10      	pop	{r4, pc}
 8014a92:	bf00      	nop
 8014a94:	200104fc 	.word	0x200104fc

08014a98 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8014a98:	b082      	sub	sp, #8
 8014a9a:	492b      	ldr	r1, [pc, #172]	; (8014b48 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8014a9c:	b530      	push	{r4, r5, lr}
 8014a9e:	680d      	ldr	r5, [r1, #0]
 8014aa0:	ac03      	add	r4, sp, #12
 8014aa2:	e884 000c 	stmia.w	r4, {r2, r3}
 8014aa6:	461c      	mov	r4, r3
 8014aa8:	2d00      	cmp	r5, #0
 8014aaa:	d04b      	beq.n	8014b44 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8014aac:	462b      	mov	r3, r5
 8014aae:	2100      	movs	r1, #0
 8014ab0:	689a      	ldr	r2, [r3, #8]
 8014ab2:	685b      	ldr	r3, [r3, #4]
 8014ab4:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8014ab8:	4290      	cmp	r0, r2
 8014aba:	bf08      	it	eq
 8014abc:	3101      	addeq	r1, #1
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d1f6      	bne.n	8014ab0 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8014ac2:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8014ac6:	2b02      	cmp	r3, #2
 8014ac8:	d029      	beq.n	8014b1e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8014aca:	d820      	bhi.n	8014b0e <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8014acc:	428c      	cmp	r4, r1
 8014ace:	d828      	bhi.n	8014b22 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8014ad0:	fab4 f284 	clz	r2, r4
 8014ad4:	0952      	lsrs	r2, r2, #5
 8014ad6:	b324      	cbz	r4, 8014b22 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8014ad8:	b1dd      	cbz	r5, 8014b12 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8014ada:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8014ade:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8014ae2:	e001      	b.n	8014ae8 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8014ae4:	686d      	ldr	r5, [r5, #4]
 8014ae6:	b1ad      	cbz	r5, 8014b14 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8014ae8:	68ab      	ldr	r3, [r5, #8]
 8014aea:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 8014aee:	4288      	cmp	r0, r1
 8014af0:	d1f8      	bne.n	8014ae4 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8014af2:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 8014af6:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8014afa:	4561      	cmp	r1, ip
 8014afc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8014b00:	eb73 0e04 	sbcs.w	lr, r3, r4
 8014b04:	daee      	bge.n	8014ae4 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8014b06:	468c      	mov	ip, r1
 8014b08:	461c      	mov	r4, r3
 8014b0a:	462a      	mov	r2, r5
 8014b0c:	e7ea      	b.n	8014ae4 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8014b0e:	2b03      	cmp	r3, #3
 8014b10:	d0dc      	beq.n	8014acc <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8014b12:	2200      	movs	r2, #0
 8014b14:	4610      	mov	r0, r2
 8014b16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014b1a:	b002      	add	sp, #8
 8014b1c:	4770      	bx	lr
 8014b1e:	428c      	cmp	r4, r1
 8014b20:	d905      	bls.n	8014b2e <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 8014b22:	4809      	ldr	r0, [pc, #36]	; (8014b48 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8014b24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014b28:	b002      	add	sp, #8
 8014b2a:	f004 ba7b 	b.w	8019024 <get_memory>
 8014b2e:	fab4 f284 	clz	r2, r4
 8014b32:	0952      	lsrs	r2, r2, #5
 8014b34:	2c00      	cmp	r4, #0
 8014b36:	d1ed      	bne.n	8014b14 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8014b38:	4803      	ldr	r0, [pc, #12]	; (8014b48 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8014b3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014b3e:	b002      	add	sp, #8
 8014b40:	f004 ba70 	b.w	8019024 <get_memory>
 8014b44:	4629      	mov	r1, r5
 8014b46:	e7bc      	b.n	8014ac2 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 8014b48:	200104dc 	.word	0x200104dc

08014b4c <rmw_uxrce_find_static_input_buffer_by_owner>:
 8014b4c:	4b12      	ldr	r3, [pc, #72]	; (8014b98 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	b530      	push	{r4, r5, lr}
 8014b52:	b1f3      	cbz	r3, 8014b92 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8014b54:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8014b58:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 8014b5c:	2400      	movs	r4, #0
 8014b5e:	e001      	b.n	8014b64 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8014b60:	685b      	ldr	r3, [r3, #4]
 8014b62:	b1a3      	cbz	r3, 8014b8e <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8014b64:	689a      	ldr	r2, [r3, #8]
 8014b66:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 8014b6a:	4288      	cmp	r0, r1
 8014b6c:	d1f8      	bne.n	8014b60 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8014b6e:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 8014b72:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 8014b76:	4571      	cmp	r1, lr
 8014b78:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8014b7c:	eb72 050c 	sbcs.w	r5, r2, ip
 8014b80:	daee      	bge.n	8014b60 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8014b82:	461c      	mov	r4, r3
 8014b84:	685b      	ldr	r3, [r3, #4]
 8014b86:	468e      	mov	lr, r1
 8014b88:	4694      	mov	ip, r2
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d1ea      	bne.n	8014b64 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8014b8e:	4620      	mov	r0, r4
 8014b90:	bd30      	pop	{r4, r5, pc}
 8014b92:	461c      	mov	r4, r3
 8014b94:	4620      	mov	r0, r4
 8014b96:	bd30      	pop	{r4, r5, pc}
 8014b98:	200104dc 	.word	0x200104dc
 8014b9c:	00000000 	.word	0x00000000

08014ba0 <rmw_uxrce_clean_expired_static_input_buffer>:
 8014ba0:	4b3d      	ldr	r3, [pc, #244]	; (8014c98 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8014ba2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ba6:	681f      	ldr	r7, [r3, #0]
 8014ba8:	ed2d 8b06 	vpush	{d8-d10}
 8014bac:	b08d      	sub	sp, #52	; 0x34
 8014bae:	f004 fb0d 	bl	80191cc <rmw_uros_epoch_nanos>
 8014bb2:	2f00      	cmp	r7, #0
 8014bb4:	d05d      	beq.n	8014c72 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8014bb6:	46b8      	mov	r8, r7
 8014bb8:	4681      	mov	r9, r0
 8014bba:	468a      	mov	sl, r1
 8014bbc:	ac04      	add	r4, sp, #16
 8014bbe:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8014bc2:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 8014bc6:	2b04      	cmp	r3, #4
 8014bc8:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 8014c80 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8014bcc:	ed9f ab2e 	vldr	d10, [pc, #184]	; 8014c88 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8014bd0:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 8014c90 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8014bd4:	d03f      	beq.n	8014c56 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8014bd6:	2b05      	cmp	r3, #5
 8014bd8:	d044      	beq.n	8014c64 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8014bda:	2b03      	cmp	r3, #3
 8014bdc:	d03b      	beq.n	8014c56 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8014bde:	ed8d 8b04 	vstr	d8, [sp, #16]
 8014be2:	ed8d ab06 	vstr	d10, [sp, #24]
 8014be6:	ab08      	add	r3, sp, #32
 8014be8:	ed8d 8b08 	vstr	d8, [sp, #32]
 8014bec:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 8014bf0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014bf2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014bf6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014bfa:	f004 f8a3 	bl	8018d44 <rmw_time_equal>
 8014bfe:	b118      	cbz	r0, 8014c08 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8014c00:	ed8d 9b04 	vstr	d9, [sp, #16]
 8014c04:	ed8d 8b06 	vstr	d8, [sp, #24]
 8014c08:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 8014c0c:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 8014c10:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8014c14:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8014c18:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014c1c:	f004 f8e8 	bl	8018df0 <rmw_time_total_nsec>
 8014c20:	1830      	adds	r0, r6, r0
 8014c22:	eb47 0101 	adc.w	r1, r7, r1
 8014c26:	4548      	cmp	r0, r9
 8014c28:	eb71 030a 	sbcs.w	r3, r1, sl
 8014c2c:	db05      	blt.n	8014c3a <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8014c2e:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 8014c32:	4591      	cmp	r9, r2
 8014c34:	eb7a 0303 	sbcs.w	r3, sl, r3
 8014c38:	da03      	bge.n	8014c42 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 8014c3a:	4641      	mov	r1, r8
 8014c3c:	4816      	ldr	r0, [pc, #88]	; (8014c98 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8014c3e:	f004 fa01 	bl	8019044 <put_memory>
 8014c42:	f1bb 0f00 	cmp.w	fp, #0
 8014c46:	d014      	beq.n	8014c72 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8014c48:	46d8      	mov	r8, fp
 8014c4a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8014c4e:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 8014c52:	2b04      	cmp	r3, #4
 8014c54:	d1bf      	bne.n	8014bd6 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8014c56:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8014c5a:	3340      	adds	r3, #64	; 0x40
 8014c5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014c5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014c62:	e7c0      	b.n	8014be6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8014c64:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 8014c68:	3348      	adds	r3, #72	; 0x48
 8014c6a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8014c6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014c70:	e7b9      	b.n	8014be6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8014c72:	b00d      	add	sp, #52	; 0x34
 8014c74:	ecbd 8b06 	vpop	{d8-d10}
 8014c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c7c:	f3af 8000 	nop.w
	...
 8014c88:	00000001 	.word	0x00000001
 8014c8c:	00000000 	.word	0x00000000
 8014c90:	0000001e 	.word	0x0000001e
 8014c94:	00000000 	.word	0x00000000
 8014c98:	200104dc 	.word	0x200104dc

08014c9c <run_xrce_session>:
 8014c9c:	b510      	push	{r4, lr}
 8014c9e:	788c      	ldrb	r4, [r1, #2]
 8014ca0:	b086      	sub	sp, #24
 8014ca2:	2c01      	cmp	r4, #1
 8014ca4:	f8ad 200e 	strh.w	r2, [sp, #14]
 8014ca8:	d00c      	beq.n	8014cc4 <run_xrce_session+0x28>
 8014caa:	2401      	movs	r4, #1
 8014cac:	4619      	mov	r1, r3
 8014cae:	f10d 020e 	add.w	r2, sp, #14
 8014cb2:	f10d 0317 	add.w	r3, sp, #23
 8014cb6:	9400      	str	r4, [sp, #0]
 8014cb8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014cbc:	f001 f934 	bl	8015f28 <uxr_run_session_until_all_status>
 8014cc0:	b006      	add	sp, #24
 8014cc2:	bd10      	pop	{r4, pc}
 8014cc4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8014cc8:	f000 fd50 	bl	801576c <uxr_flash_output_streams>
 8014ccc:	4620      	mov	r0, r4
 8014cce:	b006      	add	sp, #24
 8014cd0:	bd10      	pop	{r4, pc}
 8014cd2:	bf00      	nop

08014cd4 <convert_qos_profile>:
 8014cd4:	7a4a      	ldrb	r2, [r1, #9]
 8014cd6:	f891 c008 	ldrb.w	ip, [r1, #8]
 8014cda:	2a02      	cmp	r2, #2
 8014cdc:	bf18      	it	ne
 8014cde:	2200      	movne	r2, #0
 8014ce0:	7002      	strb	r2, [r0, #0]
 8014ce2:	f1ac 0202 	sub.w	r2, ip, #2
 8014ce6:	fab2 f282 	clz	r2, r2
 8014cea:	0952      	lsrs	r2, r2, #5
 8014cec:	7042      	strb	r2, [r0, #1]
 8014cee:	780a      	ldrb	r2, [r1, #0]
 8014cf0:	8889      	ldrh	r1, [r1, #4]
 8014cf2:	f1a2 0202 	sub.w	r2, r2, #2
 8014cf6:	8081      	strh	r1, [r0, #4]
 8014cf8:	fab2 f282 	clz	r2, r2
 8014cfc:	0952      	lsrs	r2, r2, #5
 8014cfe:	7082      	strb	r2, [r0, #2]
 8014d00:	4770      	bx	lr
 8014d02:	bf00      	nop

08014d04 <generate_service_topics>:
 8014d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d06:	461d      	mov	r5, r3
 8014d08:	b083      	sub	sp, #12
 8014d0a:	4606      	mov	r6, r0
 8014d0c:	4c11      	ldr	r4, [pc, #68]	; (8014d54 <generate_service_topics+0x50>)
 8014d0e:	4608      	mov	r0, r1
 8014d10:	4b11      	ldr	r3, [pc, #68]	; (8014d58 <generate_service_topics+0x54>)
 8014d12:	4617      	mov	r7, r2
 8014d14:	4629      	mov	r1, r5
 8014d16:	4a11      	ldr	r2, [pc, #68]	; (8014d5c <generate_service_topics+0x58>)
 8014d18:	9401      	str	r4, [sp, #4]
 8014d1a:	9600      	str	r6, [sp, #0]
 8014d1c:	f005 fb88 	bl	801a430 <sniprintf>
 8014d20:	4a0f      	ldr	r2, [pc, #60]	; (8014d60 <generate_service_topics+0x5c>)
 8014d22:	4604      	mov	r4, r0
 8014d24:	4b0f      	ldr	r3, [pc, #60]	; (8014d64 <generate_service_topics+0x60>)
 8014d26:	9201      	str	r2, [sp, #4]
 8014d28:	4638      	mov	r0, r7
 8014d2a:	4a0c      	ldr	r2, [pc, #48]	; (8014d5c <generate_service_topics+0x58>)
 8014d2c:	4629      	mov	r1, r5
 8014d2e:	9600      	str	r6, [sp, #0]
 8014d30:	f005 fb7e 	bl	801a430 <sniprintf>
 8014d34:	2c00      	cmp	r4, #0
 8014d36:	bfa8      	it	ge
 8014d38:	42a5      	cmpge	r5, r4
 8014d3a:	bfcc      	ite	gt
 8014d3c:	2401      	movgt	r4, #1
 8014d3e:	2400      	movle	r4, #0
 8014d40:	dd05      	ble.n	8014d4e <generate_service_topics+0x4a>
 8014d42:	2800      	cmp	r0, #0
 8014d44:	bfa8      	it	ge
 8014d46:	4285      	cmpge	r5, r0
 8014d48:	bfcc      	ite	gt
 8014d4a:	2401      	movgt	r4, #1
 8014d4c:	2400      	movle	r4, #0
 8014d4e:	4620      	mov	r0, r4
 8014d50:	b003      	add	sp, #12
 8014d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d54:	0801ca70 	.word	0x0801ca70
 8014d58:	0801ca6c 	.word	0x0801ca6c
 8014d5c:	0801ca50 	.word	0x0801ca50
 8014d60:	0801ca64 	.word	0x0801ca64
 8014d64:	0801ca60 	.word	0x0801ca60

08014d68 <generate_service_types>:
 8014d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d6c:	4606      	mov	r6, r0
 8014d6e:	b087      	sub	sp, #28
 8014d70:	461c      	mov	r4, r3
 8014d72:	6883      	ldr	r3, [r0, #8]
 8014d74:	460d      	mov	r5, r1
 8014d76:	4617      	mov	r7, r2
 8014d78:	4798      	blx	r3
 8014d7a:	68f3      	ldr	r3, [r6, #12]
 8014d7c:	4606      	mov	r6, r0
 8014d7e:	4798      	blx	r3
 8014d80:	2300      	movs	r3, #0
 8014d82:	f8d0 b004 	ldr.w	fp, [r0, #4]
 8014d86:	6872      	ldr	r2, [r6, #4]
 8014d88:	702b      	strb	r3, [r5, #0]
 8014d8a:	6813      	ldr	r3, [r2, #0]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d03f      	beq.n	8014e10 <generate_service_types+0xa8>
 8014d90:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8014e24 <generate_service_types+0xbc>
 8014d94:	4649      	mov	r1, r9
 8014d96:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8014e2c <generate_service_types+0xc4>
 8014d9a:	4628      	mov	r0, r5
 8014d9c:	f8df a090 	ldr.w	sl, [pc, #144]	; 8014e30 <generate_service_types+0xc8>
 8014da0:	f8cd 8014 	str.w	r8, [sp, #20]
 8014da4:	6852      	ldr	r2, [r2, #4]
 8014da6:	9100      	str	r1, [sp, #0]
 8014da8:	4621      	mov	r1, r4
 8014daa:	f8cd 8008 	str.w	r8, [sp, #8]
 8014dae:	f8cd a004 	str.w	sl, [sp, #4]
 8014db2:	e9cd 9203 	strd	r9, r2, [sp, #12]
 8014db6:	4a1a      	ldr	r2, [pc, #104]	; (8014e20 <generate_service_types+0xb8>)
 8014db8:	f005 fb3a 	bl	801a430 <sniprintf>
 8014dbc:	2300      	movs	r3, #0
 8014dbe:	42a0      	cmp	r0, r4
 8014dc0:	ea6f 0600 	mvn.w	r6, r0
 8014dc4:	703b      	strb	r3, [r7, #0]
 8014dc6:	f8db 3000 	ldr.w	r3, [fp]
 8014dca:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 8014dce:	bfac      	ite	ge
 8014dd0:	2500      	movge	r5, #0
 8014dd2:	2501      	movlt	r5, #1
 8014dd4:	b30b      	cbz	r3, 8014e1a <generate_service_types+0xb2>
 8014dd6:	4a13      	ldr	r2, [pc, #76]	; (8014e24 <generate_service_types+0xbc>)
 8014dd8:	f8cd 8014 	str.w	r8, [sp, #20]
 8014ddc:	402e      	ands	r6, r5
 8014dde:	f8db 1004 	ldr.w	r1, [fp, #4]
 8014de2:	4638      	mov	r0, r7
 8014de4:	9104      	str	r1, [sp, #16]
 8014de6:	4621      	mov	r1, r4
 8014de8:	e9cd 2a00 	strd	r2, sl, [sp]
 8014dec:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8014df0:	4a0b      	ldr	r2, [pc, #44]	; (8014e20 <generate_service_types+0xb8>)
 8014df2:	f005 fb1d 	bl	801a430 <sniprintf>
 8014df6:	2800      	cmp	r0, #0
 8014df8:	bfb4      	ite	lt
 8014dfa:	2600      	movlt	r6, #0
 8014dfc:	f006 0601 	andge.w	r6, r6, #1
 8014e00:	42a0      	cmp	r0, r4
 8014e02:	bfac      	ite	ge
 8014e04:	2000      	movge	r0, #0
 8014e06:	f006 0001 	andlt.w	r0, r6, #1
 8014e0a:	b007      	add	sp, #28
 8014e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e10:	4b05      	ldr	r3, [pc, #20]	; (8014e28 <generate_service_types+0xc0>)
 8014e12:	f8df 9010 	ldr.w	r9, [pc, #16]	; 8014e24 <generate_service_types+0xbc>
 8014e16:	4619      	mov	r1, r3
 8014e18:	e7bd      	b.n	8014d96 <generate_service_types+0x2e>
 8014e1a:	4b03      	ldr	r3, [pc, #12]	; (8014e28 <generate_service_types+0xc0>)
 8014e1c:	461a      	mov	r2, r3
 8014e1e:	e7db      	b.n	8014dd8 <generate_service_types+0x70>
 8014e20:	0801ca48 	.word	0x0801ca48
 8014e24:	0801ca44 	.word	0x0801ca44
 8014e28:	0801c834 	.word	0x0801c834
 8014e2c:	0801ca58 	.word	0x0801ca58
 8014e30:	0801ca5c 	.word	0x0801ca5c

08014e34 <is_uxrce_rmw_identifier_valid>:
 8014e34:	b510      	push	{r4, lr}
 8014e36:	4604      	mov	r4, r0
 8014e38:	b140      	cbz	r0, 8014e4c <is_uxrce_rmw_identifier_valid+0x18>
 8014e3a:	f7fe fbbd 	bl	80135b8 <rmw_get_implementation_identifier>
 8014e3e:	4601      	mov	r1, r0
 8014e40:	4620      	mov	r0, r4
 8014e42:	f7eb f9fd 	bl	8000240 <strcmp>
 8014e46:	fab0 f080 	clz	r0, r0
 8014e4a:	0940      	lsrs	r0, r0, #5
 8014e4c:	bd10      	pop	{r4, pc}
 8014e4e:	bf00      	nop

08014e50 <service_msgs__msg__ServiceEventInfo__get_type_hash>:
 8014e50:	4800      	ldr	r0, [pc, #0]	; (8014e54 <service_msgs__msg__ServiceEventInfo__get_type_hash+0x4>)
 8014e52:	4770      	bx	lr
 8014e54:	20001758 	.word	0x20001758

08014e58 <service_msgs__msg__ServiceEventInfo__get_type_description>:
 8014e58:	b510      	push	{r4, lr}
 8014e5a:	4c08      	ldr	r4, [pc, #32]	; (8014e7c <service_msgs__msg__ServiceEventInfo__get_type_description+0x24>)
 8014e5c:	7820      	ldrb	r0, [r4, #0]
 8014e5e:	b108      	cbz	r0, 8014e64 <service_msgs__msg__ServiceEventInfo__get_type_description+0xc>
 8014e60:	4807      	ldr	r0, [pc, #28]	; (8014e80 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 8014e62:	bd10      	pop	{r4, pc}
 8014e64:	f000 f858 	bl	8014f18 <builtin_interfaces__msg__Time__get_type_description>
 8014e68:	300c      	adds	r0, #12
 8014e6a:	4b06      	ldr	r3, [pc, #24]	; (8014e84 <service_msgs__msg__ServiceEventInfo__get_type_description+0x2c>)
 8014e6c:	c807      	ldmia	r0, {r0, r1, r2}
 8014e6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014e72:	2301      	movs	r3, #1
 8014e74:	4802      	ldr	r0, [pc, #8]	; (8014e80 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 8014e76:	7023      	strb	r3, [r4, #0]
 8014e78:	bd10      	pop	{r4, pc}
 8014e7a:	bf00      	nop
 8014e7c:	2001051d 	.word	0x2001051d
 8014e80:	0801ca78 	.word	0x0801ca78
 8014e84:	200018dc 	.word	0x200018dc

08014e88 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>:
 8014e88:	4800      	ldr	r0, [pc, #0]	; (8014e8c <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source+0x4>)
 8014e8a:	4770      	bx	lr
 8014e8c:	0801ca9c 	.word	0x0801ca9c

08014e90 <service_msgs__msg__ServiceEventInfo__get_type_description_sources>:
 8014e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e92:	4e0f      	ldr	r6, [pc, #60]	; (8014ed0 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x40>)
 8014e94:	7837      	ldrb	r7, [r6, #0]
 8014e96:	b10f      	cbz	r7, 8014e9c <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0xc>
 8014e98:	480e      	ldr	r0, [pc, #56]	; (8014ed4 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 8014e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e9c:	4d0e      	ldr	r5, [pc, #56]	; (8014ed8 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x48>)
 8014e9e:	4c0f      	ldr	r4, [pc, #60]	; (8014edc <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x4c>)
 8014ea0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ea4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ea6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ea8:	682b      	ldr	r3, [r5, #0]
 8014eaa:	4638      	mov	r0, r7
 8014eac:	f844 3b04 	str.w	r3, [r4], #4
 8014eb0:	f000 f83e 	bl	8014f30 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8014eb4:	2301      	movs	r3, #1
 8014eb6:	4684      	mov	ip, r0
 8014eb8:	7033      	strb	r3, [r6, #0]
 8014eba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014ebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ec0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014ec4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ec6:	f8dc 3000 	ldr.w	r3, [ip]
 8014eca:	4802      	ldr	r0, [pc, #8]	; (8014ed4 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 8014ecc:	6023      	str	r3, [r4, #0]
 8014ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ed0:	2001051c 	.word	0x2001051c
 8014ed4:	0801cac0 	.word	0x0801cac0
 8014ed8:	0801ca9c 	.word	0x0801ca9c
 8014edc:	20010520 	.word	0x20010520

08014ee0 <service_msgs__msg__ServiceEventInfo__init>:
 8014ee0:	b538      	push	{r3, r4, r5, lr}
 8014ee2:	b138      	cbz	r0, 8014ef4 <service_msgs__msg__ServiceEventInfo__init+0x14>
 8014ee4:	1d05      	adds	r5, r0, #4
 8014ee6:	4628      	mov	r0, r5
 8014ee8:	f000 f842 	bl	8014f70 <builtin_interfaces__msg__Time__init>
 8014eec:	4604      	mov	r4, r0
 8014eee:	b120      	cbz	r0, 8014efa <service_msgs__msg__ServiceEventInfo__init+0x1a>
 8014ef0:	4620      	mov	r0, r4
 8014ef2:	bd38      	pop	{r3, r4, r5, pc}
 8014ef4:	4604      	mov	r4, r0
 8014ef6:	4620      	mov	r0, r4
 8014ef8:	bd38      	pop	{r3, r4, r5, pc}
 8014efa:	4628      	mov	r0, r5
 8014efc:	f000 f83c 	bl	8014f78 <builtin_interfaces__msg__Time__fini>
 8014f00:	4620      	mov	r0, r4
 8014f02:	bd38      	pop	{r3, r4, r5, pc}

08014f04 <service_msgs__msg__ServiceEventInfo__fini>:
 8014f04:	b110      	cbz	r0, 8014f0c <service_msgs__msg__ServiceEventInfo__fini+0x8>
 8014f06:	3004      	adds	r0, #4
 8014f08:	f000 b836 	b.w	8014f78 <builtin_interfaces__msg__Time__fini>
 8014f0c:	4770      	bx	lr
 8014f0e:	bf00      	nop

08014f10 <builtin_interfaces__msg__Time__get_type_hash>:
 8014f10:	4800      	ldr	r0, [pc, #0]	; (8014f14 <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 8014f12:	4770      	bx	lr
 8014f14:	20001c78 	.word	0x20001c78

08014f18 <builtin_interfaces__msg__Time__get_type_description>:
 8014f18:	4b03      	ldr	r3, [pc, #12]	; (8014f28 <builtin_interfaces__msg__Time__get_type_description+0x10>)
 8014f1a:	781a      	ldrb	r2, [r3, #0]
 8014f1c:	b90a      	cbnz	r2, 8014f22 <builtin_interfaces__msg__Time__get_type_description+0xa>
 8014f1e:	2201      	movs	r2, #1
 8014f20:	701a      	strb	r2, [r3, #0]
 8014f22:	4802      	ldr	r0, [pc, #8]	; (8014f2c <builtin_interfaces__msg__Time__get_type_description+0x14>)
 8014f24:	4770      	bx	lr
 8014f26:	bf00      	nop
 8014f28:	20010569 	.word	0x20010569
 8014f2c:	0801cacc 	.word	0x0801cacc

08014f30 <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 8014f30:	4800      	ldr	r0, [pc, #0]	; (8014f34 <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 8014f32:	4770      	bx	lr
 8014f34:	0801caf0 	.word	0x0801caf0

08014f38 <builtin_interfaces__msg__Time__get_type_description_sources>:
 8014f38:	4b09      	ldr	r3, [pc, #36]	; (8014f60 <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 8014f3a:	781a      	ldrb	r2, [r3, #0]
 8014f3c:	b96a      	cbnz	r2, 8014f5a <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 8014f3e:	2201      	movs	r2, #1
 8014f40:	b430      	push	{r4, r5}
 8014f42:	4d08      	ldr	r5, [pc, #32]	; (8014f64 <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 8014f44:	4c08      	ldr	r4, [pc, #32]	; (8014f68 <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 8014f46:	701a      	strb	r2, [r3, #0]
 8014f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014f50:	682b      	ldr	r3, [r5, #0]
 8014f52:	4806      	ldr	r0, [pc, #24]	; (8014f6c <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 8014f54:	6023      	str	r3, [r4, #0]
 8014f56:	bc30      	pop	{r4, r5}
 8014f58:	4770      	bx	lr
 8014f5a:	4804      	ldr	r0, [pc, #16]	; (8014f6c <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 8014f5c:	4770      	bx	lr
 8014f5e:	bf00      	nop
 8014f60:	20010568 	.word	0x20010568
 8014f64:	0801caf0 	.word	0x0801caf0
 8014f68:	2001056c 	.word	0x2001056c
 8014f6c:	0801cb14 	.word	0x0801cb14

08014f70 <builtin_interfaces__msg__Time__init>:
 8014f70:	3800      	subs	r0, #0
 8014f72:	bf18      	it	ne
 8014f74:	2001      	movne	r0, #1
 8014f76:	4770      	bx	lr

08014f78 <builtin_interfaces__msg__Time__fini>:
 8014f78:	4770      	bx	lr
 8014f7a:	bf00      	nop

08014f7c <uxr_buffer_delete_entity>:
 8014f7c:	b510      	push	{r4, lr}
 8014f7e:	2300      	movs	r3, #0
 8014f80:	b08e      	sub	sp, #56	; 0x38
 8014f82:	4604      	mov	r4, r0
 8014f84:	9103      	str	r1, [sp, #12]
 8014f86:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8014f8a:	2303      	movs	r3, #3
 8014f8c:	2204      	movs	r2, #4
 8014f8e:	9300      	str	r3, [sp, #0]
 8014f90:	ab06      	add	r3, sp, #24
 8014f92:	f001 f9f5 	bl	8016380 <uxr_prepare_stream_to_write_submessage>
 8014f96:	b918      	cbnz	r0, 8014fa0 <uxr_buffer_delete_entity+0x24>
 8014f98:	4604      	mov	r4, r0
 8014f9a:	4620      	mov	r0, r4
 8014f9c:	b00e      	add	sp, #56	; 0x38
 8014f9e:	bd10      	pop	{r4, pc}
 8014fa0:	9902      	ldr	r1, [sp, #8]
 8014fa2:	aa05      	add	r2, sp, #20
 8014fa4:	4620      	mov	r0, r4
 8014fa6:	f001 fb27 	bl	80165f8 <uxr_init_base_object_request>
 8014faa:	4604      	mov	r4, r0
 8014fac:	a905      	add	r1, sp, #20
 8014fae:	a806      	add	r0, sp, #24
 8014fb0:	f002 ffea 	bl	8017f88 <uxr_serialize_DELETE_Payload>
 8014fb4:	4620      	mov	r0, r4
 8014fb6:	b00e      	add	sp, #56	; 0x38
 8014fb8:	bd10      	pop	{r4, pc}
 8014fba:	bf00      	nop

08014fbc <uxr_common_create_entity>:
 8014fbc:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8014fc0:	b510      	push	{r4, lr}
 8014fc2:	f1bc 0f01 	cmp.w	ip, #1
 8014fc6:	b08c      	sub	sp, #48	; 0x30
 8014fc8:	4604      	mov	r4, r0
 8014fca:	9202      	str	r2, [sp, #8]
 8014fcc:	bf0c      	ite	eq
 8014fce:	f003 0201 	andeq.w	r2, r3, #1
 8014fd2:	2200      	movne	r2, #0
 8014fd4:	330e      	adds	r3, #14
 8014fd6:	9103      	str	r1, [sp, #12]
 8014fd8:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8014fdc:	441a      	add	r2, r3
 8014fde:	ab04      	add	r3, sp, #16
 8014fe0:	9101      	str	r1, [sp, #4]
 8014fe2:	2101      	movs	r1, #1
 8014fe4:	b292      	uxth	r2, r2
 8014fe6:	9100      	str	r1, [sp, #0]
 8014fe8:	9903      	ldr	r1, [sp, #12]
 8014fea:	f001 f9c9 	bl	8016380 <uxr_prepare_stream_to_write_submessage>
 8014fee:	b918      	cbnz	r0, 8014ff8 <uxr_common_create_entity+0x3c>
 8014ff0:	4604      	mov	r4, r0
 8014ff2:	4620      	mov	r0, r4
 8014ff4:	b00c      	add	sp, #48	; 0x30
 8014ff6:	bd10      	pop	{r4, pc}
 8014ff8:	9902      	ldr	r1, [sp, #8]
 8014ffa:	4620      	mov	r0, r4
 8014ffc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014ffe:	f001 fafb 	bl	80165f8 <uxr_init_base_object_request>
 8015002:	4604      	mov	r4, r0
 8015004:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015006:	a804      	add	r0, sp, #16
 8015008:	f002 ff18 	bl	8017e3c <uxr_serialize_CREATE_Payload>
 801500c:	4620      	mov	r0, r4
 801500e:	b00c      	add	sp, #48	; 0x30
 8015010:	bd10      	pop	{r4, pc}
 8015012:	bf00      	nop

08015014 <uxr_buffer_create_participant_bin>:
 8015014:	b570      	push	{r4, r5, r6, lr}
 8015016:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 801501a:	4605      	mov	r5, r0
 801501c:	ac11      	add	r4, sp, #68	; 0x44
 801501e:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 8015022:	2303      	movs	r3, #3
 8015024:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 8015028:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801502c:	7223      	strb	r3, [r4, #8]
 801502e:	2300      	movs	r3, #0
 8015030:	2201      	movs	r2, #1
 8015032:	f88d 3014 	strb.w	r3, [sp, #20]
 8015036:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8015038:	7122      	strb	r2, [r4, #4]
 801503a:	b1cb      	cbz	r3, 8015070 <uxr_buffer_create_participant_bin+0x5c>
 801503c:	f88d 201c 	strb.w	r2, [sp, #28]
 8015040:	9308      	str	r3, [sp, #32]
 8015042:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015046:	a915      	add	r1, sp, #84	; 0x54
 8015048:	a809      	add	r0, sp, #36	; 0x24
 801504a:	f7f9 fecd 	bl	800ede8 <ucdr_init_buffer>
 801504e:	a905      	add	r1, sp, #20
 8015050:	a809      	add	r0, sp, #36	; 0x24
 8015052:	f002 fceb 	bl	8017a2c <uxr_serialize_OBJK_DomainParticipant_Binary>
 8015056:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015058:	9600      	str	r6, [sp, #0]
 801505a:	4628      	mov	r0, r5
 801505c:	9401      	str	r4, [sp, #4]
 801505e:	60e3      	str	r3, [r4, #12]
 8015060:	b29b      	uxth	r3, r3
 8015062:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8015066:	f7ff ffa9 	bl	8014fbc <uxr_common_create_entity>
 801506a:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 801506e:	bd70      	pop	{r4, r5, r6, pc}
 8015070:	f88d 301c 	strb.w	r3, [sp, #28]
 8015074:	e7e5      	b.n	8015042 <uxr_buffer_create_participant_bin+0x2e>
 8015076:	bf00      	nop

08015078 <uxr_buffer_create_replier_bin>:
 8015078:	b570      	push	{r4, r5, r6, lr}
 801507a:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 801507e:	4605      	mov	r5, r0
 8015080:	4618      	mov	r0, r3
 8015082:	9105      	str	r1, [sp, #20]
 8015084:	a999      	add	r1, sp, #612	; 0x264
 8015086:	f89d 6294 	ldrb.w	r6, [sp, #660]	; 0x294
 801508a:	ac15      	add	r4, sp, #84	; 0x54
 801508c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8015090:	2308      	movs	r3, #8
 8015092:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8015096:	f000 f909 	bl	80152ac <uxr_object_id_to_raw>
 801509a:	9b9e      	ldr	r3, [sp, #632]	; 0x278
 801509c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80150a0:	a919      	add	r1, sp, #100	; 0x64
 80150a2:	a80d      	add	r0, sp, #52	; 0x34
 80150a4:	9306      	str	r3, [sp, #24]
 80150a6:	9b9f      	ldr	r3, [sp, #636]	; 0x27c
 80150a8:	9307      	str	r3, [sp, #28]
 80150aa:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 80150ac:	9308      	str	r3, [sp, #32]
 80150ae:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80150b0:	930c      	str	r3, [sp, #48]	; 0x30
 80150b2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80150b4:	930a      	str	r3, [sp, #40]	; 0x28
 80150b6:	2301      	movs	r3, #1
 80150b8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80150bc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80150c0:	2303      	movs	r3, #3
 80150c2:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 80150c6:	f7f9 fe8f 	bl	800ede8 <ucdr_init_buffer>
 80150ca:	a906      	add	r1, sp, #24
 80150cc:	a80d      	add	r0, sp, #52	; 0x34
 80150ce:	f002 fccf 	bl	8017a70 <uxr_serialize_OBJK_Replier_Binary>
 80150d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80150d4:	4628      	mov	r0, r5
 80150d6:	9600      	str	r6, [sp, #0]
 80150d8:	9318      	str	r3, [sp, #96]	; 0x60
 80150da:	b29b      	uxth	r3, r3
 80150dc:	9401      	str	r4, [sp, #4]
 80150de:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80150e2:	f7ff ff6b 	bl	8014fbc <uxr_common_create_entity>
 80150e6:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
 80150ea:	bd70      	pop	{r4, r5, r6, pc}

080150ec <get_custom_error>:
 80150ec:	4b01      	ldr	r3, [pc, #4]	; (80150f4 <get_custom_error+0x8>)
 80150ee:	7818      	ldrb	r0, [r3, #0]
 80150f0:	4770      	bx	lr
 80150f2:	bf00      	nop
 80150f4:	20010590 	.word	0x20010590

080150f8 <recv_custom_msg>:
 80150f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80150fc:	4693      	mov	fp, r2
 80150fe:	b089      	sub	sp, #36	; 0x24
 8015100:	2200      	movs	r2, #0
 8015102:	4604      	mov	r4, r0
 8015104:	468a      	mov	sl, r1
 8015106:	9305      	str	r3, [sp, #20]
 8015108:	f88d 201e 	strb.w	r2, [sp, #30]
 801510c:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8015110:	b322      	cbz	r2, 801515c <recv_custom_msg+0x64>
 8015112:	f200 2902 	addw	r9, r0, #514	; 0x202
 8015116:	f10d 081f 	add.w	r8, sp, #31
 801511a:	af05      	add	r7, sp, #20
 801511c:	f10d 061e 	add.w	r6, sp, #30
 8015120:	f44f 7500 	mov.w	r5, #512	; 0x200
 8015124:	e002      	b.n	801512c <recv_custom_msg+0x34>
 8015126:	9b05      	ldr	r3, [sp, #20]
 8015128:	2b00      	cmp	r3, #0
 801512a:	dd0f      	ble.n	801514c <recv_custom_msg+0x54>
 801512c:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8015130:	4623      	mov	r3, r4
 8015132:	4622      	mov	r2, r4
 8015134:	4648      	mov	r0, r9
 8015136:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801513a:	e9cd 5600 	strd	r5, r6, [sp]
 801513e:	f001 fc71 	bl	8016a24 <uxr_read_framed_msg>
 8015142:	2800      	cmp	r0, #0
 8015144:	d0ef      	beq.n	8015126 <recv_custom_msg+0x2e>
 8015146:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801514a:	b1b3      	cbz	r3, 801517a <recv_custom_msg+0x82>
 801514c:	4b0f      	ldr	r3, [pc, #60]	; (801518c <recv_custom_msg+0x94>)
 801514e:	2000      	movs	r0, #0
 8015150:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8015154:	701a      	strb	r2, [r3, #0]
 8015156:	b009      	add	sp, #36	; 0x24
 8015158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801515c:	f10d 021f 	add.w	r2, sp, #31
 8015160:	4601      	mov	r1, r0
 8015162:	9200      	str	r2, [sp, #0]
 8015164:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015168:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 801516c:	47a8      	blx	r5
 801516e:	2800      	cmp	r0, #0
 8015170:	d0ec      	beq.n	801514c <recv_custom_msg+0x54>
 8015172:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d1e8      	bne.n	801514c <recv_custom_msg+0x54>
 801517a:	f8cb 0000 	str.w	r0, [fp]
 801517e:	2001      	movs	r0, #1
 8015180:	f8ca 4000 	str.w	r4, [sl]
 8015184:	b009      	add	sp, #36	; 0x24
 8015186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801518a:	bf00      	nop
 801518c:	20010590 	.word	0x20010590

08015190 <send_custom_msg>:
 8015190:	b530      	push	{r4, r5, lr}
 8015192:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8015196:	b087      	sub	sp, #28
 8015198:	4614      	mov	r4, r2
 801519a:	b995      	cbnz	r5, 80151c2 <send_custom_msg+0x32>
 801519c:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 80151a0:	f10d 0317 	add.w	r3, sp, #23
 80151a4:	47a8      	blx	r5
 80151a6:	1e03      	subs	r3, r0, #0
 80151a8:	bf18      	it	ne
 80151aa:	2301      	movne	r3, #1
 80151ac:	42a0      	cmp	r0, r4
 80151ae:	bf18      	it	ne
 80151b0:	2300      	movne	r3, #0
 80151b2:	b91b      	cbnz	r3, 80151bc <send_custom_msg+0x2c>
 80151b4:	4a0a      	ldr	r2, [pc, #40]	; (80151e0 <send_custom_msg+0x50>)
 80151b6:	f89d 1017 	ldrb.w	r1, [sp, #23]
 80151ba:	7011      	strb	r1, [r2, #0]
 80151bc:	4618      	mov	r0, r3
 80151be:	b007      	add	sp, #28
 80151c0:	bd30      	pop	{r4, r5, pc}
 80151c2:	460b      	mov	r3, r1
 80151c4:	2200      	movs	r2, #0
 80151c6:	f10d 0117 	add.w	r1, sp, #23
 80151ca:	9400      	str	r4, [sp, #0]
 80151cc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80151d0:	4602      	mov	r2, r0
 80151d2:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 80151d6:	f200 2002 	addw	r0, r0, #514	; 0x202
 80151da:	f001 fa45 	bl	8016668 <uxr_write_framed_msg>
 80151de:	e7e2      	b.n	80151a6 <send_custom_msg+0x16>
 80151e0:	20010590 	.word	0x20010590

080151e4 <uxr_set_custom_transport_callbacks>:
 80151e4:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 80151e8:	9901      	ldr	r1, [sp, #4]
 80151ea:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 80151ee:	9b00      	ldr	r3, [sp, #0]
 80151f0:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 80151f4:	4770      	bx	lr
 80151f6:	bf00      	nop

080151f8 <uxr_init_custom_transport>:
 80151f8:	b538      	push	{r3, r4, r5, lr}
 80151fa:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 80151fe:	b303      	cbz	r3, 8015242 <uxr_init_custom_transport+0x4a>
 8015200:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8015204:	4604      	mov	r4, r0
 8015206:	b1e2      	cbz	r2, 8015242 <uxr_init_custom_transport+0x4a>
 8015208:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 801520c:	b1ca      	cbz	r2, 8015242 <uxr_init_custom_transport+0x4a>
 801520e:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8015212:	b1b2      	cbz	r2, 8015242 <uxr_init_custom_transport+0x4a>
 8015214:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8015218:	4798      	blx	r3
 801521a:	4605      	mov	r5, r0
 801521c:	b188      	cbz	r0, 8015242 <uxr_init_custom_transport+0x4a>
 801521e:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8015222:	b98b      	cbnz	r3, 8015248 <uxr_init_custom_transport+0x50>
 8015224:	4b0b      	ldr	r3, [pc, #44]	; (8015254 <uxr_init_custom_transport+0x5c>)
 8015226:	4628      	mov	r0, r5
 8015228:	490b      	ldr	r1, [pc, #44]	; (8015258 <uxr_init_custom_transport+0x60>)
 801522a:	4a0c      	ldr	r2, [pc, #48]	; (801525c <uxr_init_custom_transport+0x64>)
 801522c:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8015230:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015234:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8015238:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 801523c:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8015240:	bd38      	pop	{r3, r4, r5, pc}
 8015242:	2500      	movs	r5, #0
 8015244:	4628      	mov	r0, r5
 8015246:	bd38      	pop	{r3, r4, r5, pc}
 8015248:	2100      	movs	r1, #0
 801524a:	f204 2002 	addw	r0, r4, #514	; 0x202
 801524e:	f001 fa05 	bl	801665c <uxr_init_framing_io>
 8015252:	e7e7      	b.n	8015224 <uxr_init_custom_transport+0x2c>
 8015254:	080150f9 	.word	0x080150f9
 8015258:	08015191 	.word	0x08015191
 801525c:	080150ed 	.word	0x080150ed

08015260 <uxr_close_custom_transport>:
 8015260:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8015264:	4718      	bx	r3
 8015266:	bf00      	nop

08015268 <uxr_object_id>:
 8015268:	b082      	sub	sp, #8
 801526a:	2300      	movs	r3, #0
 801526c:	f88d 1006 	strb.w	r1, [sp, #6]
 8015270:	f360 030f 	bfi	r3, r0, #0, #16
 8015274:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8015278:	f362 431f 	bfi	r3, r2, #16, #16
 801527c:	4618      	mov	r0, r3
 801527e:	b002      	add	sp, #8
 8015280:	4770      	bx	lr
 8015282:	bf00      	nop

08015284 <uxr_object_id_from_raw>:
 8015284:	7843      	ldrb	r3, [r0, #1]
 8015286:	b082      	sub	sp, #8
 8015288:	7801      	ldrb	r1, [r0, #0]
 801528a:	2000      	movs	r0, #0
 801528c:	091a      	lsrs	r2, r3, #4
 801528e:	f003 030f 	and.w	r3, r3, #15
 8015292:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8015296:	f88d 3006 	strb.w	r3, [sp, #6]
 801529a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801529e:	f362 000f 	bfi	r0, r2, #0, #16
 80152a2:	f363 401f 	bfi	r0, r3, #16, #16
 80152a6:	b002      	add	sp, #8
 80152a8:	4770      	bx	lr
 80152aa:	bf00      	nop

080152ac <uxr_object_id_to_raw>:
 80152ac:	4602      	mov	r2, r0
 80152ae:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80152b2:	b082      	sub	sp, #8
 80152b4:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 80152b8:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80152bc:	f881 c000 	strb.w	ip, [r1]
 80152c0:	7048      	strb	r0, [r1, #1]
 80152c2:	b002      	add	sp, #8
 80152c4:	4770      	bx	lr
 80152c6:	bf00      	nop

080152c8 <uxr_buffer_request_data>:
 80152c8:	b530      	push	{r4, r5, lr}
 80152ca:	b095      	sub	sp, #84	; 0x54
 80152cc:	4604      	mov	r4, r0
 80152ce:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80152d0:	9303      	str	r3, [sp, #12]
 80152d2:	2d00      	cmp	r5, #0
 80152d4:	f88d 301c 	strb.w	r3, [sp, #28]
 80152d8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80152dc:	f04f 0200 	mov.w	r2, #0
 80152e0:	bf14      	ite	ne
 80152e2:	2101      	movne	r1, #1
 80152e4:	4611      	moveq	r1, r2
 80152e6:	f88d 201d 	strb.w	r2, [sp, #29]
 80152ea:	f88d 201e 	strb.w	r2, [sp, #30]
 80152ee:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80152f2:	d021      	beq.n	8015338 <uxr_buffer_request_data+0x70>
 80152f4:	686b      	ldr	r3, [r5, #4]
 80152f6:	2210      	movs	r2, #16
 80152f8:	6829      	ldr	r1, [r5, #0]
 80152fa:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 80152fe:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 8015302:	2308      	movs	r3, #8
 8015304:	2100      	movs	r1, #0
 8015306:	4620      	mov	r0, r4
 8015308:	e9cd 3100 	strd	r3, r1, [sp]
 801530c:	ab0c      	add	r3, sp, #48	; 0x30
 801530e:	9905      	ldr	r1, [sp, #20]
 8015310:	f001 f836 	bl	8016380 <uxr_prepare_stream_to_write_submessage>
 8015314:	b918      	cbnz	r0, 801531e <uxr_buffer_request_data+0x56>
 8015316:	4604      	mov	r4, r0
 8015318:	4620      	mov	r0, r4
 801531a:	b015      	add	sp, #84	; 0x54
 801531c:	bd30      	pop	{r4, r5, pc}
 801531e:	9904      	ldr	r1, [sp, #16]
 8015320:	aa06      	add	r2, sp, #24
 8015322:	4620      	mov	r0, r4
 8015324:	f001 f968 	bl	80165f8 <uxr_init_base_object_request>
 8015328:	4604      	mov	r4, r0
 801532a:	a906      	add	r1, sp, #24
 801532c:	a80c      	add	r0, sp, #48	; 0x30
 801532e:	f002 fed5 	bl	80180dc <uxr_serialize_READ_DATA_Payload>
 8015332:	4620      	mov	r0, r4
 8015334:	b015      	add	sp, #84	; 0x54
 8015336:	bd30      	pop	{r4, r5, pc}
 8015338:	2208      	movs	r2, #8
 801533a:	e7e2      	b.n	8015302 <uxr_buffer_request_data+0x3a>

0801533c <uxr_buffer_cancel_data>:
 801533c:	b510      	push	{r4, lr}
 801533e:	2300      	movs	r3, #0
 8015340:	b094      	sub	sp, #80	; 0x50
 8015342:	4604      	mov	r4, r0
 8015344:	9205      	str	r2, [sp, #20]
 8015346:	9301      	str	r3, [sp, #4]
 8015348:	f8ad 301c 	strh.w	r3, [sp, #28]
 801534c:	f88d 301e 	strb.w	r3, [sp, #30]
 8015350:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8015354:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8015358:	2308      	movs	r3, #8
 801535a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801535e:	2201      	movs	r2, #1
 8015360:	9300      	str	r3, [sp, #0]
 8015362:	ab0c      	add	r3, sp, #48	; 0x30
 8015364:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8015368:	2210      	movs	r2, #16
 801536a:	f001 f809 	bl	8016380 <uxr_prepare_stream_to_write_submessage>
 801536e:	b918      	cbnz	r0, 8015378 <uxr_buffer_cancel_data+0x3c>
 8015370:	4604      	mov	r4, r0
 8015372:	4620      	mov	r0, r4
 8015374:	b014      	add	sp, #80	; 0x50
 8015376:	bd10      	pop	{r4, pc}
 8015378:	9905      	ldr	r1, [sp, #20]
 801537a:	aa06      	add	r2, sp, #24
 801537c:	4620      	mov	r0, r4
 801537e:	f001 f93b 	bl	80165f8 <uxr_init_base_object_request>
 8015382:	4604      	mov	r4, r0
 8015384:	a906      	add	r1, sp, #24
 8015386:	a80c      	add	r0, sp, #48	; 0x30
 8015388:	f002 fea8 	bl	80180dc <uxr_serialize_READ_DATA_Payload>
 801538c:	4620      	mov	r0, r4
 801538e:	b014      	add	sp, #80	; 0x50
 8015390:	bd10      	pop	{r4, pc}
 8015392:	bf00      	nop

08015394 <read_submessage_format>:
 8015394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015398:	b095      	sub	sp, #84	; 0x54
 801539a:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 801539e:	b113      	cbz	r3, 80153a6 <read_submessage_format+0x12>
 80153a0:	b015      	add	sp, #84	; 0x54
 80153a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153a6:	4606      	mov	r6, r0
 80153a8:	981c      	ldr	r0, [sp, #112]	; 0x70
 80153aa:	460c      	mov	r4, r1
 80153ac:	4615      	mov	r5, r2
 80153ae:	9004      	str	r0, [sp, #16]
 80153b0:	4699      	mov	r9, r3
 80153b2:	981d      	ldr	r0, [sp, #116]	; 0x74
 80153b4:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 80153b8:	9005      	str	r0, [sp, #20]
 80153ba:	a80c      	add	r0, sp, #48	; 0x30
 80153bc:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80153c0:	1a52      	subs	r2, r2, r1
 80153c2:	f7f9 fd11 	bl	800ede8 <ucdr_init_buffer>
 80153c6:	a80c      	add	r0, sp, #48	; 0x30
 80153c8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80153cc:	f7f9 fce0 	bl	800ed90 <ucdr_set_on_full_buffer_callback>
 80153d0:	69e2      	ldr	r2, [r4, #28]
 80153d2:	b19a      	cbz	r2, 80153fc <read_submessage_format+0x68>
 80153d4:	f1b8 0f07 	cmp.w	r8, #7
 80153d8:	f882 9014 	strb.w	r9, [r2, #20]
 80153dc:	d040      	beq.n	8015460 <read_submessage_format+0xcc>
 80153de:	f1b8 0f08 	cmp.w	r8, #8
 80153e2:	d02e      	beq.n	8015442 <read_submessage_format+0xae>
 80153e4:	f1b8 0f06 	cmp.w	r8, #6
 80153e8:	d011      	beq.n	801540e <read_submessage_format+0x7a>
 80153ea:	2301      	movs	r3, #1
 80153ec:	7513      	strb	r3, [r2, #20]
 80153ee:	4629      	mov	r1, r5
 80153f0:	4620      	mov	r0, r4
 80153f2:	f7f9 fd4d 	bl	800ee90 <ucdr_advance_buffer>
 80153f6:	b015      	add	sp, #84	; 0x54
 80153f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153fc:	f1b8 0f07 	cmp.w	r8, #7
 8015400:	d02e      	beq.n	8015460 <read_submessage_format+0xcc>
 8015402:	f1b8 0f08 	cmp.w	r8, #8
 8015406:	d01c      	beq.n	8015442 <read_submessage_format+0xae>
 8015408:	f1b8 0f06 	cmp.w	r8, #6
 801540c:	d1ef      	bne.n	80153ee <read_submessage_format+0x5a>
 801540e:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 8015412:	f1b8 0f00 	cmp.w	r8, #0
 8015416:	d011      	beq.n	801543c <read_submessage_format+0xa8>
 8015418:	ab0c      	add	r3, sp, #48	; 0x30
 801541a:	9501      	str	r5, [sp, #4]
 801541c:	463a      	mov	r2, r7
 801541e:	4630      	mov	r0, r6
 8015420:	9300      	str	r3, [sp, #0]
 8015422:	2306      	movs	r3, #6
 8015424:	f88d 3016 	strb.w	r3, [sp, #22]
 8015428:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 801542c:	9302      	str	r3, [sp, #8]
 801542e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8015432:	47c0      	blx	r8
 8015434:	2301      	movs	r3, #1
 8015436:	69e2      	ldr	r2, [r4, #28]
 8015438:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801543c:	2a00      	cmp	r2, #0
 801543e:	d1d4      	bne.n	80153ea <read_submessage_format+0x56>
 8015440:	e7d5      	b.n	80153ee <read_submessage_format+0x5a>
 8015442:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 8015446:	2b00      	cmp	r3, #0
 8015448:	d0f8      	beq.n	801543c <read_submessage_format+0xa8>
 801544a:	a80c      	add	r0, sp, #48	; 0x30
 801544c:	a906      	add	r1, sp, #24
 801544e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8015452:	f002 ff0f 	bl	8018274 <uxr_deserialize_SampleIdentity>
 8015456:	b9a0      	cbnz	r0, 8015482 <read_submessage_format+0xee>
 8015458:	69e2      	ldr	r2, [r4, #28]
 801545a:	2a00      	cmp	r2, #0
 801545c:	d1c5      	bne.n	80153ea <read_submessage_format+0x56>
 801545e:	e7c6      	b.n	80153ee <read_submessage_format+0x5a>
 8015460:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8015464:	b13b      	cbz	r3, 8015476 <read_submessage_format+0xe2>
 8015466:	a906      	add	r1, sp, #24
 8015468:	a80c      	add	r0, sp, #48	; 0x30
 801546a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801546e:	f002 fbd5 	bl	8017c1c <uxr_deserialize_BaseObjectRequest>
 8015472:	bb60      	cbnz	r0, 80154ce <read_submessage_format+0x13a>
 8015474:	69e2      	ldr	r2, [r4, #28]
 8015476:	68a3      	ldr	r3, [r4, #8]
 8015478:	442b      	add	r3, r5
 801547a:	60a3      	str	r3, [r4, #8]
 801547c:	2a00      	cmp	r2, #0
 801547e:	d1b4      	bne.n	80153ea <read_submessage_format+0x56>
 8015480:	e7b5      	b.n	80153ee <read_submessage_format+0x5a>
 8015482:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015484:	a80c      	add	r0, sp, #48	; 0x30
 8015486:	eba8 0803 	sub.w	r8, r8, r3
 801548a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801548e:	44a8      	add	r8, r5
 8015490:	1a52      	subs	r2, r2, r1
 8015492:	f7f9 fca9 	bl	800ede8 <ucdr_init_buffer>
 8015496:	a80c      	add	r0, sp, #48	; 0x30
 8015498:	fa1f f888 	uxth.w	r8, r8
 801549c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80154a0:	f7f9 fc76 	bl	800ed90 <ucdr_set_on_full_buffer_callback>
 80154a4:	ab0c      	add	r3, sp, #48	; 0x30
 80154a6:	2108      	movs	r1, #8
 80154a8:	f8cd 8004 	str.w	r8, [sp, #4]
 80154ac:	9300      	str	r3, [sp, #0]
 80154ae:	463a      	mov	r2, r7
 80154b0:	f88d 1016 	strb.w	r1, [sp, #22]
 80154b4:	ab06      	add	r3, sp, #24
 80154b6:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 80154ba:	4630      	mov	r0, r6
 80154bc:	9102      	str	r1, [sp, #8]
 80154be:	9905      	ldr	r1, [sp, #20]
 80154c0:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 80154c4:	47b8      	blx	r7
 80154c6:	2301      	movs	r3, #1
 80154c8:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 80154cc:	e7c4      	b.n	8015458 <read_submessage_format+0xc4>
 80154ce:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80154d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80154d4:	a80c      	add	r0, sp, #48	; 0x30
 80154d6:	1a52      	subs	r2, r2, r1
 80154d8:	eba8 0803 	sub.w	r8, r8, r3
 80154dc:	f7f9 fc84 	bl	800ede8 <ucdr_init_buffer>
 80154e0:	a80c      	add	r0, sp, #48	; 0x30
 80154e2:	44a8      	add	r8, r5
 80154e4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80154e8:	f7f9 fc52 	bl	800ed90 <ucdr_set_on_full_buffer_callback>
 80154ec:	ab0c      	add	r3, sp, #48	; 0x30
 80154ee:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80154f2:	fa1f f888 	uxth.w	r8, r8
 80154f6:	9300      	str	r3, [sp, #0]
 80154f8:	463a      	mov	r2, r7
 80154fa:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80154fe:	4630      	mov	r0, r6
 8015500:	f8cd 8004 	str.w	r8, [sp, #4]
 8015504:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8015508:	2107      	movs	r1, #7
 801550a:	f88d 1016 	strb.w	r1, [sp, #22]
 801550e:	b29b      	uxth	r3, r3
 8015510:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 8015514:	9102      	str	r1, [sp, #8]
 8015516:	9905      	ldr	r1, [sp, #20]
 8015518:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 801551c:	47b8      	blx	r7
 801551e:	2301      	movs	r3, #1
 8015520:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8015524:	e7a6      	b.n	8015474 <read_submessage_format+0xe0>
 8015526:	bf00      	nop

08015528 <on_get_fragmentation_info>:
 8015528:	b500      	push	{lr}
 801552a:	b08b      	sub	sp, #44	; 0x2c
 801552c:	4601      	mov	r1, r0
 801552e:	2204      	movs	r2, #4
 8015530:	a802      	add	r0, sp, #8
 8015532:	f7f9 fc59 	bl	800ede8 <ucdr_init_buffer>
 8015536:	f10d 0305 	add.w	r3, sp, #5
 801553a:	f10d 0206 	add.w	r2, sp, #6
 801553e:	a901      	add	r1, sp, #4
 8015540:	a802      	add	r0, sp, #8
 8015542:	f001 fe5f 	bl	8017204 <uxr_read_submessage_header>
 8015546:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801554a:	2b0d      	cmp	r3, #13
 801554c:	d003      	beq.n	8015556 <on_get_fragmentation_info+0x2e>
 801554e:	2000      	movs	r0, #0
 8015550:	b00b      	add	sp, #44	; 0x2c
 8015552:	f85d fb04 	ldr.w	pc, [sp], #4
 8015556:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801555a:	f013 0f02 	tst.w	r3, #2
 801555e:	bf14      	ite	ne
 8015560:	2002      	movne	r0, #2
 8015562:	2001      	moveq	r0, #1
 8015564:	b00b      	add	sp, #44	; 0x2c
 8015566:	f85d fb04 	ldr.w	pc, [sp], #4
 801556a:	bf00      	nop

0801556c <read_submessage_get_info>:
 801556c:	b570      	push	{r4, r5, r6, lr}
 801556e:	2500      	movs	r5, #0
 8015570:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8015574:	460e      	mov	r6, r1
 8015576:	4604      	mov	r4, r0
 8015578:	f44f 7224 	mov.w	r2, #656	; 0x290
 801557c:	4629      	mov	r1, r5
 801557e:	a810      	add	r0, sp, #64	; 0x40
 8015580:	9503      	str	r5, [sp, #12]
 8015582:	9504      	str	r5, [sp, #16]
 8015584:	f005 f82e 	bl	801a5e4 <memset>
 8015588:	a903      	add	r1, sp, #12
 801558a:	4630      	mov	r0, r6
 801558c:	f002 fce6 	bl	8017f5c <uxr_deserialize_GET_INFO_Payload>
 8015590:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8015594:	4620      	mov	r0, r4
 8015596:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801559a:	f001 f825 	bl	80165e8 <uxr_session_header_offset>
 801559e:	462b      	mov	r3, r5
 80155a0:	220c      	movs	r2, #12
 80155a2:	a905      	add	r1, sp, #20
 80155a4:	9000      	str	r0, [sp, #0]
 80155a6:	a808      	add	r0, sp, #32
 80155a8:	f7f9 fc0c 	bl	800edc4 <ucdr_init_buffer_origin_offset>
 80155ac:	a910      	add	r1, sp, #64	; 0x40
 80155ae:	a808      	add	r0, sp, #32
 80155b0:	f002 fd48 	bl	8018044 <uxr_serialize_INFO_Payload>
 80155b4:	9b08      	ldr	r3, [sp, #32]
 80155b6:	462a      	mov	r2, r5
 80155b8:	4629      	mov	r1, r5
 80155ba:	4620      	mov	r0, r4
 80155bc:	f000 ffc0 	bl	8016540 <uxr_stamp_session_header>
 80155c0:	a808      	add	r0, sp, #32
 80155c2:	f7f9 fc3f 	bl	800ee44 <ucdr_buffer_length>
 80155c6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80155c8:	4602      	mov	r2, r0
 80155ca:	a905      	add	r1, sp, #20
 80155cc:	e9d3 0400 	ldrd	r0, r4, [r3]
 80155d0:	47a0      	blx	r4
 80155d2:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 80155d6:	bd70      	pop	{r4, r5, r6, pc}

080155d8 <write_submessage_acknack.isra.0>:
 80155d8:	b570      	push	{r4, r5, r6, lr}
 80155da:	b092      	sub	sp, #72	; 0x48
 80155dc:	4605      	mov	r5, r0
 80155de:	460e      	mov	r6, r1
 80155e0:	4614      	mov	r4, r2
 80155e2:	f001 f801 	bl	80165e8 <uxr_session_header_offset>
 80155e6:	a905      	add	r1, sp, #20
 80155e8:	9000      	str	r0, [sp, #0]
 80155ea:	2300      	movs	r3, #0
 80155ec:	a80a      	add	r0, sp, #40	; 0x28
 80155ee:	2211      	movs	r2, #17
 80155f0:	f7f9 fbe8 	bl	800edc4 <ucdr_init_buffer_origin_offset>
 80155f4:	2218      	movs	r2, #24
 80155f6:	2300      	movs	r3, #0
 80155f8:	210a      	movs	r1, #10
 80155fa:	fb02 5404 	mla	r4, r2, r4, r5
 80155fe:	a80a      	add	r0, sp, #40	; 0x28
 8015600:	2205      	movs	r2, #5
 8015602:	3450      	adds	r4, #80	; 0x50
 8015604:	f001 fde4 	bl	80171d0 <uxr_buffer_submessage_header>
 8015608:	a903      	add	r1, sp, #12
 801560a:	4620      	mov	r0, r4
 801560c:	f003 ff9e 	bl	801954c <uxr_compute_acknack>
 8015610:	ba40      	rev16	r0, r0
 8015612:	a903      	add	r1, sp, #12
 8015614:	f88d 6010 	strb.w	r6, [sp, #16]
 8015618:	f8ad 000e 	strh.w	r0, [sp, #14]
 801561c:	a80a      	add	r0, sp, #40	; 0x28
 801561e:	f002 fd83 	bl	8018128 <uxr_serialize_ACKNACK_Payload>
 8015622:	2200      	movs	r2, #0
 8015624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015626:	4628      	mov	r0, r5
 8015628:	4611      	mov	r1, r2
 801562a:	f000 ff89 	bl	8016540 <uxr_stamp_session_header>
 801562e:	a80a      	add	r0, sp, #40	; 0x28
 8015630:	f7f9 fc08 	bl	800ee44 <ucdr_buffer_length>
 8015634:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8015636:	4602      	mov	r2, r0
 8015638:	a905      	add	r1, sp, #20
 801563a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801563e:	47a0      	blx	r4
 8015640:	b012      	add	sp, #72	; 0x48
 8015642:	bd70      	pop	{r4, r5, r6, pc}
 8015644:	0000      	movs	r0, r0
	...

08015648 <uxr_init_session>:
 8015648:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8015680 <uxr_init_session+0x38>
 801564c:	2300      	movs	r3, #0
 801564e:	b510      	push	{r4, lr}
 8015650:	4604      	mov	r4, r0
 8015652:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8015656:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 801565a:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 801565e:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 8015662:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 8015666:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 801566a:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 801566e:	2181      	movs	r1, #129	; 0x81
 8015670:	f000 feca 	bl	8016408 <uxr_init_session_info>
 8015674:	f104 0008 	add.w	r0, r4, #8
 8015678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801567c:	f001 bcc4 	b.w	8017008 <uxr_init_stream_storage>
	...

08015688 <uxr_set_status_callback>:
 8015688:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 801568c:	4770      	bx	lr
 801568e:	bf00      	nop

08015690 <uxr_set_topic_callback>:
 8015690:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8015694:	4770      	bx	lr
 8015696:	bf00      	nop

08015698 <uxr_set_request_callback>:
 8015698:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 801569c:	4770      	bx	lr
 801569e:	bf00      	nop

080156a0 <uxr_set_reply_callback>:
 80156a0:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 80156a4:	4770      	bx	lr
 80156a6:	bf00      	nop

080156a8 <uxr_create_output_best_effort_stream>:
 80156a8:	b510      	push	{r4, lr}
 80156aa:	4604      	mov	r4, r0
 80156ac:	b084      	sub	sp, #16
 80156ae:	e9cd 2100 	strd	r2, r1, [sp]
 80156b2:	f000 ff99 	bl	80165e8 <uxr_session_header_offset>
 80156b6:	4603      	mov	r3, r0
 80156b8:	f104 0008 	add.w	r0, r4, #8
 80156bc:	e9dd 2100 	ldrd	r2, r1, [sp]
 80156c0:	b004      	add	sp, #16
 80156c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80156c6:	f001 bce5 	b.w	8017094 <uxr_add_output_best_effort_buffer>
 80156ca:	bf00      	nop

080156cc <uxr_create_output_reliable_stream>:
 80156cc:	b530      	push	{r4, r5, lr}
 80156ce:	b089      	sub	sp, #36	; 0x24
 80156d0:	4604      	mov	r4, r0
 80156d2:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80156d6:	9303      	str	r3, [sp, #12]
 80156d8:	f000 ff86 	bl	80165e8 <uxr_session_header_offset>
 80156dc:	4605      	mov	r5, r0
 80156de:	9905      	ldr	r1, [sp, #20]
 80156e0:	f104 0008 	add.w	r0, r4, #8
 80156e4:	9500      	str	r5, [sp, #0]
 80156e6:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80156ea:	f001 fce7 	bl	80170bc <uxr_add_output_reliable_buffer>
 80156ee:	2200      	movs	r2, #0
 80156f0:	fa5f fc80 	uxtb.w	ip, r0
 80156f4:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80156f8:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80156fc:	0e03      	lsrs	r3, r0, #24
 80156fe:	f36c 0207 	bfi	r2, ip, #0, #8
 8015702:	f364 220f 	bfi	r2, r4, #8, #8
 8015706:	f361 4217 	bfi	r2, r1, #16, #8
 801570a:	f363 621f 	bfi	r2, r3, #24, #8
 801570e:	4610      	mov	r0, r2
 8015710:	b009      	add	sp, #36	; 0x24
 8015712:	bd30      	pop	{r4, r5, pc}

08015714 <uxr_create_input_best_effort_stream>:
 8015714:	b082      	sub	sp, #8
 8015716:	3008      	adds	r0, #8
 8015718:	b002      	add	sp, #8
 801571a:	f001 bce9 	b.w	80170f0 <uxr_add_input_best_effort_buffer>
 801571e:	bf00      	nop

08015720 <uxr_create_input_reliable_stream>:
 8015720:	b510      	push	{r4, lr}
 8015722:	4c0c      	ldr	r4, [pc, #48]	; (8015754 <uxr_create_input_reliable_stream+0x34>)
 8015724:	b084      	sub	sp, #16
 8015726:	3008      	adds	r0, #8
 8015728:	9400      	str	r4, [sp, #0]
 801572a:	f001 fcf7 	bl	801711c <uxr_add_input_reliable_buffer>
 801572e:	2200      	movs	r2, #0
 8015730:	fa5f fe80 	uxtb.w	lr, r0
 8015734:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8015738:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801573c:	0e03      	lsrs	r3, r0, #24
 801573e:	f36e 0207 	bfi	r2, lr, #0, #8
 8015742:	f36c 220f 	bfi	r2, ip, #8, #8
 8015746:	f361 4217 	bfi	r2, r1, #16, #8
 801574a:	f363 621f 	bfi	r2, r3, #24, #8
 801574e:	4610      	mov	r0, r2
 8015750:	b004      	add	sp, #16
 8015752:	bd10      	pop	{r4, pc}
 8015754:	08015529 	.word	0x08015529

08015758 <uxr_epoch_nanos>:
 8015758:	b510      	push	{r4, lr}
 801575a:	4604      	mov	r4, r0
 801575c:	f001 fd9a 	bl	8017294 <uxr_nanos>
 8015760:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8015764:	1ac0      	subs	r0, r0, r3
 8015766:	eb61 0102 	sbc.w	r1, r1, r2
 801576a:	bd10      	pop	{r4, pc}

0801576c <uxr_flash_output_streams>:
 801576c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015770:	7e03      	ldrb	r3, [r0, #24]
 8015772:	b084      	sub	sp, #16
 8015774:	4604      	mov	r4, r0
 8015776:	b1fb      	cbz	r3, 80157b8 <uxr_flash_output_streams+0x4c>
 8015778:	f04f 0900 	mov.w	r9, #0
 801577c:	f10d 0802 	add.w	r8, sp, #2
 8015780:	af03      	add	r7, sp, #12
 8015782:	ae02      	add	r6, sp, #8
 8015784:	4648      	mov	r0, r9
 8015786:	2201      	movs	r2, #1
 8015788:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 801578c:	4611      	mov	r1, r2
 801578e:	3508      	adds	r5, #8
 8015790:	f001 fbe0 	bl	8016f54 <uxr_stream_id>
 8015794:	4684      	mov	ip, r0
 8015796:	4643      	mov	r3, r8
 8015798:	463a      	mov	r2, r7
 801579a:	4631      	mov	r1, r6
 801579c:	4628      	mov	r0, r5
 801579e:	f8cd c004 	str.w	ip, [sp, #4]
 80157a2:	f003 ff5d 	bl	8019660 <uxr_prepare_best_effort_buffer_to_send>
 80157a6:	2800      	cmp	r0, #0
 80157a8:	d13d      	bne.n	8015826 <uxr_flash_output_streams+0xba>
 80157aa:	f109 0901 	add.w	r9, r9, #1
 80157ae:	7e23      	ldrb	r3, [r4, #24]
 80157b0:	fa5f f089 	uxtb.w	r0, r9
 80157b4:	4283      	cmp	r3, r0
 80157b6:	d8e6      	bhi.n	8015786 <uxr_flash_output_streams+0x1a>
 80157b8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80157bc:	b383      	cbz	r3, 8015820 <uxr_flash_output_streams+0xb4>
 80157be:	f04f 0900 	mov.w	r9, #0
 80157c2:	f10d 0802 	add.w	r8, sp, #2
 80157c6:	af03      	add	r7, sp, #12
 80157c8:	ae02      	add	r6, sp, #8
 80157ca:	4648      	mov	r0, r9
 80157cc:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 80157d0:	2201      	movs	r2, #1
 80157d2:	2102      	movs	r1, #2
 80157d4:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 80157d8:	f001 fbbc 	bl	8016f54 <uxr_stream_id>
 80157dc:	9001      	str	r0, [sp, #4]
 80157de:	3520      	adds	r5, #32
 80157e0:	e00c      	b.n	80157fc <uxr_flash_output_streams+0x90>
 80157e2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80157e6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80157ea:	9b02      	ldr	r3, [sp, #8]
 80157ec:	f000 fea8 	bl	8016540 <uxr_stamp_session_header>
 80157f0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80157f2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80157f6:	e9d3 0a00 	ldrd	r0, sl, [r3]
 80157fa:	47d0      	blx	sl
 80157fc:	4643      	mov	r3, r8
 80157fe:	463a      	mov	r2, r7
 8015800:	4631      	mov	r1, r6
 8015802:	4628      	mov	r0, r5
 8015804:	f004 f950 	bl	8019aa8 <uxr_prepare_next_reliable_buffer_to_send>
 8015808:	4603      	mov	r3, r0
 801580a:	4620      	mov	r0, r4
 801580c:	2b00      	cmp	r3, #0
 801580e:	d1e8      	bne.n	80157e2 <uxr_flash_output_streams+0x76>
 8015810:	f109 0901 	add.w	r9, r9, #1
 8015814:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8015818:	fa5f f089 	uxtb.w	r0, r9
 801581c:	4283      	cmp	r3, r0
 801581e:	d8d5      	bhi.n	80157cc <uxr_flash_output_streams+0x60>
 8015820:	b004      	add	sp, #16
 8015822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015826:	9b02      	ldr	r3, [sp, #8]
 8015828:	4620      	mov	r0, r4
 801582a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801582e:	f109 0901 	add.w	r9, r9, #1
 8015832:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8015836:	f000 fe83 	bl	8016540 <uxr_stamp_session_header>
 801583a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801583c:	9a03      	ldr	r2, [sp, #12]
 801583e:	685d      	ldr	r5, [r3, #4]
 8015840:	6818      	ldr	r0, [r3, #0]
 8015842:	9902      	ldr	r1, [sp, #8]
 8015844:	47a8      	blx	r5
 8015846:	7e23      	ldrb	r3, [r4, #24]
 8015848:	fa5f f089 	uxtb.w	r0, r9
 801584c:	4283      	cmp	r3, r0
 801584e:	d89a      	bhi.n	8015786 <uxr_flash_output_streams+0x1a>
 8015850:	e7b2      	b.n	80157b8 <uxr_flash_output_streams+0x4c>
 8015852:	bf00      	nop

08015854 <read_submessage_info>:
 8015854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015858:	460d      	mov	r5, r1
 801585a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 801585e:	4606      	mov	r6, r0
 8015860:	4669      	mov	r1, sp
 8015862:	4628      	mov	r0, r5
 8015864:	f002 fa8c 	bl	8017d80 <uxr_deserialize_BaseObjectReply>
 8015868:	4604      	mov	r4, r0
 801586a:	a902      	add	r1, sp, #8
 801586c:	4628      	mov	r0, r5
 801586e:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8015872:	f7f7 ff09 	bl	800d688 <ucdr_deserialize_bool>
 8015876:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801587a:	4004      	ands	r4, r0
 801587c:	b2e4      	uxtb	r4, r4
 801587e:	b95b      	cbnz	r3, 8015898 <read_submessage_info+0x44>
 8015880:	a987      	add	r1, sp, #540	; 0x21c
 8015882:	4628      	mov	r0, r5
 8015884:	f7f7 ff00 	bl	800d688 <ucdr_deserialize_bool>
 8015888:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 801588c:	4680      	mov	r8, r0
 801588e:	b94b      	cbnz	r3, 80158a4 <read_submessage_info+0x50>
 8015890:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8015894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015898:	a903      	add	r1, sp, #12
 801589a:	4628      	mov	r0, r5
 801589c:	f002 f91c 	bl	8017ad8 <uxr_deserialize_ObjectVariant>
 80158a0:	4004      	ands	r4, r0
 80158a2:	e7ed      	b.n	8015880 <read_submessage_info+0x2c>
 80158a4:	a988      	add	r1, sp, #544	; 0x220
 80158a6:	4628      	mov	r0, r5
 80158a8:	f7f7 ff1c 	bl	800d6e4 <ucdr_deserialize_uint8_t>
 80158ac:	ea14 0f08 	tst.w	r4, r8
 80158b0:	d0ee      	beq.n	8015890 <read_submessage_info+0x3c>
 80158b2:	2800      	cmp	r0, #0
 80158b4:	d0ec      	beq.n	8015890 <read_submessage_info+0x3c>
 80158b6:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 80158ba:	2b0d      	cmp	r3, #13
 80158bc:	d1e8      	bne.n	8015890 <read_submessage_info+0x3c>
 80158be:	a98a      	add	r1, sp, #552	; 0x228
 80158c0:	4628      	mov	r0, r5
 80158c2:	f7f8 fcb5 	bl	800e230 <ucdr_deserialize_int16_t>
 80158c6:	b138      	cbz	r0, 80158d8 <read_submessage_info+0x84>
 80158c8:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	dd06      	ble.n	80158de <read_submessage_info+0x8a>
 80158d0:	2f00      	cmp	r7, #0
 80158d2:	bf14      	ite	ne
 80158d4:	2001      	movne	r0, #1
 80158d6:	2002      	moveq	r0, #2
 80158d8:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 80158dc:	e7d8      	b.n	8015890 <read_submessage_info+0x3c>
 80158de:	2000      	movs	r0, #0
 80158e0:	e7fa      	b.n	80158d8 <read_submessage_info+0x84>
 80158e2:	bf00      	nop

080158e4 <read_submessage_list>:
 80158e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158e8:	4604      	mov	r4, r0
 80158ea:	b097      	sub	sp, #92	; 0x5c
 80158ec:	460d      	mov	r5, r1
 80158ee:	4ec1      	ldr	r6, [pc, #772]	; (8015bf4 <read_submessage_list+0x310>)
 80158f0:	9209      	str	r2, [sp, #36]	; 0x24
 80158f2:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80158f6:	aa0c      	add	r2, sp, #48	; 0x30
 80158f8:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 80158fc:	4628      	mov	r0, r5
 80158fe:	f001 fc81 	bl	8017204 <uxr_read_submessage_header>
 8015902:	2800      	cmp	r0, #0
 8015904:	f000 8142 	beq.w	8015b8c <read_submessage_list+0x2a8>
 8015908:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 801590c:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8015910:	3b02      	subs	r3, #2
 8015912:	2b0d      	cmp	r3, #13
 8015914:	d8ed      	bhi.n	80158f2 <read_submessage_list+0xe>
 8015916:	a101      	add	r1, pc, #4	; (adr r1, 801591c <read_submessage_list+0x38>)
 8015918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801591c:	08015b83 	.word	0x08015b83
 8015920:	080158f3 	.word	0x080158f3
 8015924:	08015b73 	.word	0x08015b73
 8015928:	08015b11 	.word	0x08015b11
 801592c:	08015b07 	.word	0x08015b07
 8015930:	080158f3 	.word	0x080158f3
 8015934:	080158f3 	.word	0x080158f3
 8015938:	08015a5d 	.word	0x08015a5d
 801593c:	080159ef 	.word	0x080159ef
 8015940:	080159af 	.word	0x080159af
 8015944:	080158f3 	.word	0x080158f3
 8015948:	080158f3 	.word	0x080158f3
 801594c:	080158f3 	.word	0x080158f3
 8015950:	08015955 	.word	0x08015955
 8015954:	a910      	add	r1, sp, #64	; 0x40
 8015956:	4628      	mov	r0, r5
 8015958:	f002 fc3a 	bl	80181d0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 801595c:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 8015960:	f1b8 0f00 	cmp.w	r8, #0
 8015964:	f000 811a 	beq.w	8015b9c <read_submessage_list+0x2b8>
 8015968:	f001 fc94 	bl	8017294 <uxr_nanos>
 801596c:	4602      	mov	r2, r0
 801596e:	460b      	mov	r3, r1
 8015970:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8015974:	2100      	movs	r1, #0
 8015976:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8015978:	9006      	str	r0, [sp, #24]
 801597a:	468c      	mov	ip, r1
 801597c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801597e:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8015982:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8015984:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8015988:	468c      	mov	ip, r1
 801598a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801598c:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8015990:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8015994:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 8015998:	fbc7 0106 	smlal	r0, r1, r7, r6
 801599c:	e9cd 0100 	strd	r0, r1, [sp]
 80159a0:	4620      	mov	r0, r4
 80159a2:	47c0      	blx	r8
 80159a4:	f04f 0301 	mov.w	r3, #1
 80159a8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 80159ac:	e7a1      	b.n	80158f2 <read_submessage_list+0xe>
 80159ae:	a910      	add	r1, sp, #64	; 0x40
 80159b0:	4628      	mov	r0, r5
 80159b2:	f002 fbf9 	bl	80181a8 <uxr_deserialize_HEARTBEAT_Payload>
 80159b6:	2100      	movs	r1, #0
 80159b8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80159bc:	f001 faf8 	bl	8016fb0 <uxr_stream_id_from_raw>
 80159c0:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80159c4:	900f      	str	r0, [sp, #60]	; 0x3c
 80159c6:	f104 0008 	add.w	r0, r4, #8
 80159ca:	4641      	mov	r1, r8
 80159cc:	f001 fbde 	bl	801718c <uxr_get_input_reliable_stream>
 80159d0:	2800      	cmp	r0, #0
 80159d2:	d08e      	beq.n	80158f2 <read_submessage_list+0xe>
 80159d4:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 80159d8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80159dc:	f003 fdaa 	bl	8019534 <uxr_process_heartbeat>
 80159e0:	4642      	mov	r2, r8
 80159e2:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80159e6:	4620      	mov	r0, r4
 80159e8:	f7ff fdf6 	bl	80155d8 <write_submessage_acknack.isra.0>
 80159ec:	e781      	b.n	80158f2 <read_submessage_list+0xe>
 80159ee:	a910      	add	r1, sp, #64	; 0x40
 80159f0:	4628      	mov	r0, r5
 80159f2:	f002 fbb1 	bl	8018158 <uxr_deserialize_ACKNACK_Payload>
 80159f6:	2100      	movs	r1, #0
 80159f8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80159fc:	f001 fad8 	bl	8016fb0 <uxr_stream_id_from_raw>
 8015a00:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8015a04:	900d      	str	r0, [sp, #52]	; 0x34
 8015a06:	f104 0008 	add.w	r0, r4, #8
 8015a0a:	f001 fba9 	bl	8017160 <uxr_get_output_reliable_stream>
 8015a0e:	4680      	mov	r8, r0
 8015a10:	2800      	cmp	r0, #0
 8015a12:	f43f af6e 	beq.w	80158f2 <read_submessage_list+0xe>
 8015a16:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8015a1a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8015a1e:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 8015a22:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8015a26:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8015a2a:	b289      	uxth	r1, r1
 8015a2c:	f004 f8e4 	bl	8019bf8 <uxr_process_acknack>
 8015a30:	4640      	mov	r0, r8
 8015a32:	f004 f8a5 	bl	8019b80 <uxr_begin_output_nack_buffer_it>
 8015a36:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8015a3a:	e005      	b.n	8015a48 <read_submessage_list+0x164>
 8015a3c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015a3e:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 8015a42:	e9d3 0900 	ldrd	r0, r9, [r3]
 8015a46:	47c8      	blx	r9
 8015a48:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8015a4c:	aa0f      	add	r2, sp, #60	; 0x3c
 8015a4e:	4651      	mov	r1, sl
 8015a50:	4640      	mov	r0, r8
 8015a52:	f004 f897 	bl	8019b84 <uxr_next_reliable_nack_buffer_to_send>
 8015a56:	2800      	cmp	r0, #0
 8015a58:	d1f0      	bne.n	8015a3c <read_submessage_list+0x158>
 8015a5a:	e74a      	b.n	80158f2 <read_submessage_list+0xe>
 8015a5c:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8015a60:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8015a64:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8015a68:	4628      	mov	r0, r5
 8015a6a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 8015a6e:	4651      	mov	r1, sl
 8015a70:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8015a74:	f1a8 0804 	sub.w	r8, r8, #4
 8015a78:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8015a7c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8015a80:	fa1f f888 	uxth.w	r8, r8
 8015a84:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8015a88:	f009 090e 	and.w	r9, r9, #14
 8015a8c:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8015a90:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8015a94:	f002 f8c2 	bl	8017c1c <uxr_deserialize_BaseObjectRequest>
 8015a98:	4650      	mov	r0, sl
 8015a9a:	a90f      	add	r1, sp, #60	; 0x3c
 8015a9c:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8015aa0:	f000 fdca 	bl	8016638 <uxr_parse_base_object_request>
 8015aa4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015aa6:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 8015aaa:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 8015aae:	9110      	str	r1, [sp, #64]	; 0x40
 8015ab0:	f1bb 0f00 	cmp.w	fp, #0
 8015ab4:	d006      	beq.n	8015ac4 <read_submessage_list+0x1e0>
 8015ab6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8015aba:	4652      	mov	r2, sl
 8015abc:	4620      	mov	r0, r4
 8015abe:	9300      	str	r3, [sp, #0]
 8015ac0:	2300      	movs	r3, #0
 8015ac2:	47d8      	blx	fp
 8015ac4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8015ac6:	b182      	cbz	r2, 8015aea <read_submessage_list+0x206>
 8015ac8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8015aca:	f04f 0c00 	mov.w	ip, #0
 8015ace:	3902      	subs	r1, #2
 8015ad0:	e003      	b.n	8015ada <read_submessage_list+0x1f6>
 8015ad2:	f10c 0c01 	add.w	ip, ip, #1
 8015ad6:	4594      	cmp	ip, r2
 8015ad8:	d007      	beq.n	8015aea <read_submessage_list+0x206>
 8015ada:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8015ade:	4553      	cmp	r3, sl
 8015ae0:	d1f7      	bne.n	8015ad2 <read_submessage_list+0x1ee>
 8015ae2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015ae4:	2200      	movs	r2, #0
 8015ae6:	f803 200c 	strb.w	r2, [r3, ip]
 8015aea:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8015aee:	464b      	mov	r3, r9
 8015af0:	4642      	mov	r2, r8
 8015af2:	4620      	mov	r0, r4
 8015af4:	9102      	str	r1, [sp, #8]
 8015af6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015af8:	9101      	str	r1, [sp, #4]
 8015afa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015afc:	9100      	str	r1, [sp, #0]
 8015afe:	4629      	mov	r1, r5
 8015b00:	f7ff fc48 	bl	8015394 <read_submessage_format>
 8015b04:	e6f5      	b.n	80158f2 <read_submessage_list+0xe>
 8015b06:	4629      	mov	r1, r5
 8015b08:	4620      	mov	r0, r4
 8015b0a:	f7ff fea3 	bl	8015854 <read_submessage_info>
 8015b0e:	e6f0      	b.n	80158f2 <read_submessage_list+0xe>
 8015b10:	2a00      	cmp	r2, #0
 8015b12:	d03e      	beq.n	8015b92 <read_submessage_list+0x2ae>
 8015b14:	a910      	add	r1, sp, #64	; 0x40
 8015b16:	4628      	mov	r0, r5
 8015b18:	f002 fa76 	bl	8018008 <uxr_deserialize_STATUS_Payload>
 8015b1c:	a90e      	add	r1, sp, #56	; 0x38
 8015b1e:	aa0d      	add	r2, sp, #52	; 0x34
 8015b20:	a810      	add	r0, sp, #64	; 0x40
 8015b22:	f000 fd89 	bl	8016638 <uxr_parse_base_object_request>
 8015b26:	990e      	ldr	r1, [sp, #56]	; 0x38
 8015b28:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8015b2c:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8015b30:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 8015b34:	910f      	str	r1, [sp, #60]	; 0x3c
 8015b36:	f1ba 0f00 	cmp.w	sl, #0
 8015b3a:	d006      	beq.n	8015b4a <read_submessage_list+0x266>
 8015b3c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8015b40:	4642      	mov	r2, r8
 8015b42:	4620      	mov	r0, r4
 8015b44:	9300      	str	r3, [sp, #0]
 8015b46:	464b      	mov	r3, r9
 8015b48:	47d0      	blx	sl
 8015b4a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8015b4c:	2a00      	cmp	r2, #0
 8015b4e:	f43f aed0 	beq.w	80158f2 <read_submessage_list+0xe>
 8015b52:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8015b54:	2100      	movs	r1, #0
 8015b56:	3802      	subs	r0, #2
 8015b58:	e003      	b.n	8015b62 <read_submessage_list+0x27e>
 8015b5a:	3101      	adds	r1, #1
 8015b5c:	4291      	cmp	r1, r2
 8015b5e:	f43f aec8 	beq.w	80158f2 <read_submessage_list+0xe>
 8015b62:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8015b66:	4543      	cmp	r3, r8
 8015b68:	d1f7      	bne.n	8015b5a <read_submessage_list+0x276>
 8015b6a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8015b6c:	f803 9001 	strb.w	r9, [r3, r1]
 8015b70:	e6bf      	b.n	80158f2 <read_submessage_list+0xe>
 8015b72:	2a00      	cmp	r2, #0
 8015b74:	f47f aebd 	bne.w	80158f2 <read_submessage_list+0xe>
 8015b78:	4629      	mov	r1, r5
 8015b7a:	4620      	mov	r0, r4
 8015b7c:	f000 fca0 	bl	80164c0 <uxr_read_create_session_status>
 8015b80:	e6b7      	b.n	80158f2 <read_submessage_list+0xe>
 8015b82:	4629      	mov	r1, r5
 8015b84:	4620      	mov	r0, r4
 8015b86:	f7ff fcf1 	bl	801556c <read_submessage_get_info>
 8015b8a:	e6b2      	b.n	80158f2 <read_submessage_list+0xe>
 8015b8c:	b017      	add	sp, #92	; 0x5c
 8015b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b92:	4629      	mov	r1, r5
 8015b94:	4620      	mov	r0, r4
 8015b96:	f000 fca1 	bl	80164dc <uxr_read_delete_session_status>
 8015b9a:	e6aa      	b.n	80158f2 <read_submessage_list+0xe>
 8015b9c:	f001 fb7a 	bl	8017294 <uxr_nanos>
 8015ba0:	4642      	mov	r2, r8
 8015ba2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8015ba4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015ba6:	fbc7 3206 	smlal	r3, r2, r7, r6
 8015baa:	1818      	adds	r0, r3, r0
 8015bac:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8015bae:	eb42 0101 	adc.w	r1, r2, r1
 8015bb2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015bb4:	4642      	mov	r2, r8
 8015bb6:	fbc7 3206 	smlal	r3, r2, r7, r6
 8015bba:	469c      	mov	ip, r3
 8015bbc:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 8015bc0:	fbc3 7806 	smlal	r7, r8, r3, r6
 8015bc4:	4643      	mov	r3, r8
 8015bc6:	eb1c 0c07 	adds.w	ip, ip, r7
 8015bca:	eb42 0203 	adc.w	r2, r2, r3
 8015bce:	ebb0 030c 	subs.w	r3, r0, ip
 8015bd2:	eb61 0202 	sbc.w	r2, r1, r2
 8015bd6:	2a00      	cmp	r2, #0
 8015bd8:	db08      	blt.n	8015bec <read_submessage_list+0x308>
 8015bda:	085b      	lsrs	r3, r3, #1
 8015bdc:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8015be0:	1052      	asrs	r2, r2, #1
 8015be2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8015be6:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 8015bea:	e6db      	b.n	80159a4 <read_submessage_list+0xc0>
 8015bec:	3301      	adds	r3, #1
 8015bee:	f142 0200 	adc.w	r2, r2, #0
 8015bf2:	e7f2      	b.n	8015bda <read_submessage_list+0x2f6>
 8015bf4:	3b9aca00 	.word	0x3b9aca00

08015bf8 <listen_message_reliably>:
 8015bf8:	1e0b      	subs	r3, r1, #0
 8015bfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bfe:	bfb8      	it	lt
 8015c00:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8015c04:	b09d      	sub	sp, #116	; 0x74
 8015c06:	4680      	mov	r8, r0
 8015c08:	9305      	str	r3, [sp, #20]
 8015c0a:	f001 fb27 	bl	801725c <uxr_millis>
 8015c0e:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 8015c12:	4681      	mov	r9, r0
 8015c14:	2a00      	cmp	r2, #0
 8015c16:	f000 809a 	beq.w	8015d4e <listen_message_reliably+0x156>
 8015c1a:	2600      	movs	r6, #0
 8015c1c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015c20:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8015c24:	460f      	mov	r7, r1
 8015c26:	4630      	mov	r0, r6
 8015c28:	9303      	str	r3, [sp, #12]
 8015c2a:	e00e      	b.n	8015c4a <listen_message_reliably+0x52>
 8015c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015c2e:	3601      	adds	r6, #1
 8015c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015c32:	455a      	cmp	r2, fp
 8015c34:	9903      	ldr	r1, [sp, #12]
 8015c36:	b2f0      	uxtb	r0, r6
 8015c38:	eb73 0101 	sbcs.w	r1, r3, r1
 8015c3c:	da01      	bge.n	8015c42 <listen_message_reliably+0x4a>
 8015c3e:	4693      	mov	fp, r2
 8015c40:	9303      	str	r3, [sp, #12]
 8015c42:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8015c46:	4283      	cmp	r3, r0
 8015c48:	d95f      	bls.n	8015d0a <listen_message_reliably+0x112>
 8015c4a:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8015c4e:	2102      	movs	r1, #2
 8015c50:	2201      	movs	r2, #1
 8015c52:	00e4      	lsls	r4, r4, #3
 8015c54:	f001 f97e 	bl	8016f54 <uxr_stream_id>
 8015c58:	4601      	mov	r1, r0
 8015c5a:	f104 0520 	add.w	r5, r4, #32
 8015c5e:	463b      	mov	r3, r7
 8015c60:	464a      	mov	r2, r9
 8015c62:	9109      	str	r1, [sp, #36]	; 0x24
 8015c64:	4445      	add	r5, r8
 8015c66:	4628      	mov	r0, r5
 8015c68:	f003 ff5e 	bl	8019b28 <uxr_update_output_stream_heartbeat_timestamp>
 8015c6c:	eb08 0304 	add.w	r3, r8, r4
 8015c70:	2800      	cmp	r0, #0
 8015c72:	d0db      	beq.n	8015c2c <listen_message_reliably+0x34>
 8015c74:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 8015c78:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8015c7c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8015c80:	4640      	mov	r0, r8
 8015c82:	3501      	adds	r5, #1
 8015c84:	4444      	add	r4, r8
 8015c86:	9304      	str	r3, [sp, #16]
 8015c88:	f000 fcae 	bl	80165e8 <uxr_session_header_offset>
 8015c8c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8015c90:	2300      	movs	r3, #0
 8015c92:	2211      	movs	r2, #17
 8015c94:	a90c      	add	r1, sp, #48	; 0x30
 8015c96:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8015c9a:	9000      	str	r0, [sp, #0]
 8015c9c:	4650      	mov	r0, sl
 8015c9e:	3601      	adds	r6, #1
 8015ca0:	f7f9 f890 	bl	800edc4 <ucdr_init_buffer_origin_offset>
 8015ca4:	2300      	movs	r3, #0
 8015ca6:	2205      	movs	r2, #5
 8015ca8:	210b      	movs	r1, #11
 8015caa:	4650      	mov	r0, sl
 8015cac:	f001 fa90 	bl	80171d0 <uxr_buffer_submessage_header>
 8015cb0:	2101      	movs	r1, #1
 8015cb2:	8968      	ldrh	r0, [r5, #10]
 8015cb4:	f003 fffc 	bl	8019cb0 <uxr_seq_num_add>
 8015cb8:	892b      	ldrh	r3, [r5, #8]
 8015cba:	4602      	mov	r2, r0
 8015cbc:	a90a      	add	r1, sp, #40	; 0x28
 8015cbe:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8015cc2:	4650      	mov	r0, sl
 8015cc4:	9b04      	ldr	r3, [sp, #16]
 8015cc6:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8015cca:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8015cce:	f002 fa57 	bl	8018180 <uxr_serialize_HEARTBEAT_Payload>
 8015cd2:	2200      	movs	r2, #0
 8015cd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015cd6:	4640      	mov	r0, r8
 8015cd8:	4611      	mov	r1, r2
 8015cda:	f000 fc31 	bl	8016540 <uxr_stamp_session_header>
 8015cde:	4650      	mov	r0, sl
 8015ce0:	f7f9 f8b0 	bl	800ee44 <ucdr_buffer_length>
 8015ce4:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8015ce8:	4602      	mov	r2, r0
 8015cea:	a90c      	add	r1, sp, #48	; 0x30
 8015cec:	e9d3 0500 	ldrd	r0, r5, [r3]
 8015cf0:	47a8      	blx	r5
 8015cf2:	9903      	ldr	r1, [sp, #12]
 8015cf4:	b2f0      	uxtb	r0, r6
 8015cf6:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8015cfa:	455a      	cmp	r2, fp
 8015cfc:	eb73 0101 	sbcs.w	r1, r3, r1
 8015d00:	db9d      	blt.n	8015c3e <listen_message_reliably+0x46>
 8015d02:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8015d06:	4283      	cmp	r3, r0
 8015d08:	d89f      	bhi.n	8015c4a <listen_message_reliably+0x52>
 8015d0a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015d0e:	9a03      	ldr	r2, [sp, #12]
 8015d10:	429a      	cmp	r2, r3
 8015d12:	bf08      	it	eq
 8015d14:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 8015d18:	d019      	beq.n	8015d4e <listen_message_reliably+0x156>
 8015d1a:	ebab 0309 	sub.w	r3, fp, r9
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	9d05      	ldr	r5, [sp, #20]
 8015d22:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 8015d26:	aa08      	add	r2, sp, #32
 8015d28:	bf08      	it	eq
 8015d2a:	2301      	moveq	r3, #1
 8015d2c:	a907      	add	r1, sp, #28
 8015d2e:	6884      	ldr	r4, [r0, #8]
 8015d30:	429d      	cmp	r5, r3
 8015d32:	6800      	ldr	r0, [r0, #0]
 8015d34:	bfa8      	it	ge
 8015d36:	461d      	movge	r5, r3
 8015d38:	462b      	mov	r3, r5
 8015d3a:	47a0      	blx	r4
 8015d3c:	b948      	cbnz	r0, 8015d52 <listen_message_reliably+0x15a>
 8015d3e:	9b05      	ldr	r3, [sp, #20]
 8015d40:	1b5b      	subs	r3, r3, r5
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	9305      	str	r3, [sp, #20]
 8015d46:	f73f af60 	bgt.w	8015c0a <listen_message_reliably+0x12>
 8015d4a:	4604      	mov	r4, r0
 8015d4c:	e012      	b.n	8015d74 <listen_message_reliably+0x17c>
 8015d4e:	9b05      	ldr	r3, [sp, #20]
 8015d50:	e7e5      	b.n	8015d1e <listen_message_reliably+0x126>
 8015d52:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8015d56:	4604      	mov	r4, r0
 8015d58:	2500      	movs	r5, #0
 8015d5a:	a80c      	add	r0, sp, #48	; 0x30
 8015d5c:	f7f9 f844 	bl	800ede8 <ucdr_init_buffer>
 8015d60:	f10d 031a 	add.w	r3, sp, #26
 8015d64:	aa06      	add	r2, sp, #24
 8015d66:	a90c      	add	r1, sp, #48	; 0x30
 8015d68:	4640      	mov	r0, r8
 8015d6a:	f88d 5018 	strb.w	r5, [sp, #24]
 8015d6e:	f000 fbfb 	bl	8016568 <uxr_read_session_header>
 8015d72:	b918      	cbnz	r0, 8015d7c <listen_message_reliably+0x184>
 8015d74:	4620      	mov	r0, r4
 8015d76:	b01d      	add	sp, #116	; 0x74
 8015d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d7c:	4629      	mov	r1, r5
 8015d7e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8015d82:	f001 f915 	bl	8016fb0 <uxr_stream_id_from_raw>
 8015d86:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8015d8a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8015d8e:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8015d92:	2e01      	cmp	r6, #1
 8015d94:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8015d98:	d04b      	beq.n	8015e32 <listen_message_reliably+0x23a>
 8015d9a:	2e02      	cmp	r6, #2
 8015d9c:	d00f      	beq.n	8015dbe <listen_message_reliably+0x1c6>
 8015d9e:	2e00      	cmp	r6, #0
 8015da0:	d1e8      	bne.n	8015d74 <listen_message_reliably+0x17c>
 8015da2:	4631      	mov	r1, r6
 8015da4:	4630      	mov	r0, r6
 8015da6:	f001 f903 	bl	8016fb0 <uxr_stream_id_from_raw>
 8015daa:	4602      	mov	r2, r0
 8015dac:	a90c      	add	r1, sp, #48	; 0x30
 8015dae:	4640      	mov	r0, r8
 8015db0:	920a      	str	r2, [sp, #40]	; 0x28
 8015db2:	f7ff fd97 	bl	80158e4 <read_submessage_list>
 8015db6:	4620      	mov	r0, r4
 8015db8:	b01d      	add	sp, #116	; 0x74
 8015dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dbe:	4629      	mov	r1, r5
 8015dc0:	f108 0008 	add.w	r0, r8, #8
 8015dc4:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8015dc8:	f001 f9e0 	bl	801718c <uxr_get_input_reliable_stream>
 8015dcc:	4607      	mov	r7, r0
 8015dce:	b338      	cbz	r0, 8015e20 <listen_message_reliably+0x228>
 8015dd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015dd2:	a80c      	add	r0, sp, #48	; 0x30
 8015dd4:	9203      	str	r2, [sp, #12]
 8015dd6:	f7f9 f839 	bl	800ee4c <ucdr_buffer_remaining>
 8015dda:	4603      	mov	r3, r0
 8015ddc:	f10d 0019 	add.w	r0, sp, #25
 8015de0:	9a03      	ldr	r2, [sp, #12]
 8015de2:	4651      	mov	r1, sl
 8015de4:	9000      	str	r0, [sp, #0]
 8015de6:	4638      	mov	r0, r7
 8015de8:	f003 faa8 	bl	801933c <uxr_receive_reliable_message>
 8015dec:	b1c0      	cbz	r0, 8015e20 <listen_message_reliably+0x228>
 8015dee:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8015df2:	b393      	cbz	r3, 8015e5a <listen_message_reliably+0x262>
 8015df4:	ae14      	add	r6, sp, #80	; 0x50
 8015df6:	f04f 0a02 	mov.w	sl, #2
 8015dfa:	e00a      	b.n	8015e12 <listen_message_reliably+0x21a>
 8015dfc:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 8015e00:	4631      	mov	r1, r6
 8015e02:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8015e06:	4640      	mov	r0, r8
 8015e08:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8015e0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e0e:	f7ff fd69 	bl	80158e4 <read_submessage_list>
 8015e12:	2204      	movs	r2, #4
 8015e14:	4631      	mov	r1, r6
 8015e16:	4638      	mov	r0, r7
 8015e18:	f003 fb12 	bl	8019440 <uxr_next_input_reliable_buffer_available>
 8015e1c:	2800      	cmp	r0, #0
 8015e1e:	d1ed      	bne.n	8015dfc <listen_message_reliably+0x204>
 8015e20:	4640      	mov	r0, r8
 8015e22:	462a      	mov	r2, r5
 8015e24:	4649      	mov	r1, r9
 8015e26:	f7ff fbd7 	bl	80155d8 <write_submessage_acknack.isra.0>
 8015e2a:	4620      	mov	r0, r4
 8015e2c:	b01d      	add	sp, #116	; 0x74
 8015e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e32:	4629      	mov	r1, r5
 8015e34:	f108 0008 	add.w	r0, r8, #8
 8015e38:	f001 f99e 	bl	8017178 <uxr_get_input_best_effort_stream>
 8015e3c:	2800      	cmp	r0, #0
 8015e3e:	d099      	beq.n	8015d74 <listen_message_reliably+0x17c>
 8015e40:	4651      	mov	r1, sl
 8015e42:	f003 f9f1 	bl	8019228 <uxr_receive_best_effort_message>
 8015e46:	2800      	cmp	r0, #0
 8015e48:	d094      	beq.n	8015d74 <listen_message_reliably+0x17c>
 8015e4a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8015e4e:	a90c      	add	r1, sp, #48	; 0x30
 8015e50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e52:	4640      	mov	r0, r8
 8015e54:	f7ff fd46 	bl	80158e4 <read_submessage_list>
 8015e58:	e78c      	b.n	8015d74 <listen_message_reliably+0x17c>
 8015e5a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8015e5e:	a90c      	add	r1, sp, #48	; 0x30
 8015e60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e62:	4640      	mov	r0, r8
 8015e64:	f7ff fd3e 	bl	80158e4 <read_submessage_list>
 8015e68:	e7c4      	b.n	8015df4 <listen_message_reliably+0x1fc>
 8015e6a:	bf00      	nop

08015e6c <uxr_run_session_timeout>:
 8015e6c:	b570      	push	{r4, r5, r6, lr}
 8015e6e:	4604      	mov	r4, r0
 8015e70:	460d      	mov	r5, r1
 8015e72:	f001 f9f3 	bl	801725c <uxr_millis>
 8015e76:	4606      	mov	r6, r0
 8015e78:	4620      	mov	r0, r4
 8015e7a:	f7ff fc77 	bl	801576c <uxr_flash_output_streams>
 8015e7e:	4629      	mov	r1, r5
 8015e80:	4620      	mov	r0, r4
 8015e82:	f7ff feb9 	bl	8015bf8 <listen_message_reliably>
 8015e86:	f001 f9e9 	bl	801725c <uxr_millis>
 8015e8a:	1b83      	subs	r3, r0, r6
 8015e8c:	1ae9      	subs	r1, r5, r3
 8015e8e:	2900      	cmp	r1, #0
 8015e90:	dcf6      	bgt.n	8015e80 <uxr_run_session_timeout+0x14>
 8015e92:	f104 0008 	add.w	r0, r4, #8
 8015e96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015e9a:	f001 b983 	b.w	80171a4 <uxr_output_streams_confirmed>
 8015e9e:	bf00      	nop

08015ea0 <uxr_run_session_until_data>:
 8015ea0:	b570      	push	{r4, r5, r6, lr}
 8015ea2:	4604      	mov	r4, r0
 8015ea4:	460d      	mov	r5, r1
 8015ea6:	f001 f9d9 	bl	801725c <uxr_millis>
 8015eaa:	4606      	mov	r6, r0
 8015eac:	4620      	mov	r0, r4
 8015eae:	f7ff fc5d 	bl	801576c <uxr_flash_output_streams>
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	4629      	mov	r1, r5
 8015eb6:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8015eba:	e005      	b.n	8015ec8 <uxr_run_session_until_data+0x28>
 8015ebc:	f001 f9ce 	bl	801725c <uxr_millis>
 8015ec0:	1b83      	subs	r3, r0, r6
 8015ec2:	1ae9      	subs	r1, r5, r3
 8015ec4:	2900      	cmp	r1, #0
 8015ec6:	dd07      	ble.n	8015ed8 <uxr_run_session_until_data+0x38>
 8015ec8:	4620      	mov	r0, r4
 8015eca:	f7ff fe95 	bl	8015bf8 <listen_message_reliably>
 8015ece:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8015ed2:	2800      	cmp	r0, #0
 8015ed4:	d0f2      	beq.n	8015ebc <uxr_run_session_until_data+0x1c>
 8015ed6:	bd70      	pop	{r4, r5, r6, pc}
 8015ed8:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8015edc:	bd70      	pop	{r4, r5, r6, pc}
 8015ede:	bf00      	nop

08015ee0 <uxr_run_session_until_confirm_delivery>:
 8015ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ee4:	4606      	mov	r6, r0
 8015ee6:	460d      	mov	r5, r1
 8015ee8:	f001 f9b8 	bl	801725c <uxr_millis>
 8015eec:	4607      	mov	r7, r0
 8015eee:	4630      	mov	r0, r6
 8015ef0:	f106 0808 	add.w	r8, r6, #8
 8015ef4:	f7ff fc3a 	bl	801576c <uxr_flash_output_streams>
 8015ef8:	2d00      	cmp	r5, #0
 8015efa:	db10      	blt.n	8015f1e <uxr_run_session_until_confirm_delivery+0x3e>
 8015efc:	462c      	mov	r4, r5
 8015efe:	e006      	b.n	8015f0e <uxr_run_session_until_confirm_delivery+0x2e>
 8015f00:	f7ff fe7a 	bl	8015bf8 <listen_message_reliably>
 8015f04:	f001 f9aa 	bl	801725c <uxr_millis>
 8015f08:	1bc3      	subs	r3, r0, r7
 8015f0a:	1aec      	subs	r4, r5, r3
 8015f0c:	d407      	bmi.n	8015f1e <uxr_run_session_until_confirm_delivery+0x3e>
 8015f0e:	4640      	mov	r0, r8
 8015f10:	f001 f948 	bl	80171a4 <uxr_output_streams_confirmed>
 8015f14:	4603      	mov	r3, r0
 8015f16:	4621      	mov	r1, r4
 8015f18:	4630      	mov	r0, r6
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d0f0      	beq.n	8015f00 <uxr_run_session_until_confirm_delivery+0x20>
 8015f1e:	4640      	mov	r0, r8
 8015f20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f24:	f001 b93e 	b.w	80171a4 <uxr_output_streams_confirmed>

08015f28 <uxr_run_session_until_all_status>:
 8015f28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f2c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8015f30:	4606      	mov	r6, r0
 8015f32:	4688      	mov	r8, r1
 8015f34:	4692      	mov	sl, r2
 8015f36:	461f      	mov	r7, r3
 8015f38:	f7ff fc18 	bl	801576c <uxr_flash_output_streams>
 8015f3c:	f1bb 0f00 	cmp.w	fp, #0
 8015f40:	d004      	beq.n	8015f4c <uxr_run_session_until_all_status+0x24>
 8015f42:	465a      	mov	r2, fp
 8015f44:	21ff      	movs	r1, #255	; 0xff
 8015f46:	4638      	mov	r0, r7
 8015f48:	f004 fb4c 	bl	801a5e4 <memset>
 8015f4c:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8015f50:	1e7d      	subs	r5, r7, #1
 8015f52:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 8015f56:	f001 f981 	bl	801725c <uxr_millis>
 8015f5a:	4641      	mov	r1, r8
 8015f5c:	4681      	mov	r9, r0
 8015f5e:	4630      	mov	r0, r6
 8015f60:	f7ff fe4a 	bl	8015bf8 <listen_message_reliably>
 8015f64:	f001 f97a 	bl	801725c <uxr_millis>
 8015f68:	eba0 0009 	sub.w	r0, r0, r9
 8015f6c:	eba8 0100 	sub.w	r1, r8, r0
 8015f70:	f1bb 0f00 	cmp.w	fp, #0
 8015f74:	d029      	beq.n	8015fca <uxr_run_session_until_all_status+0xa2>
 8015f76:	46ae      	mov	lr, r5
 8015f78:	f04f 0c00 	mov.w	ip, #0
 8015f7c:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8015f80:	2cff      	cmp	r4, #255	; 0xff
 8015f82:	d015      	beq.n	8015fb0 <uxr_run_session_until_all_status+0x88>
 8015f84:	f10c 0c01 	add.w	ip, ip, #1
 8015f88:	45e3      	cmp	fp, ip
 8015f8a:	d8f7      	bhi.n	8015f7c <uxr_run_session_until_all_status+0x54>
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	67f3      	str	r3, [r6, #124]	; 0x7c
 8015f90:	e000      	b.n	8015f94 <uxr_run_session_until_all_status+0x6c>
 8015f92:	b158      	cbz	r0, 8015fac <uxr_run_session_until_all_status+0x84>
 8015f94:	462b      	mov	r3, r5
 8015f96:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8015f9a:	3302      	adds	r3, #2
 8015f9c:	2801      	cmp	r0, #1
 8015f9e:	eba3 0307 	sub.w	r3, r3, r7
 8015fa2:	bf8c      	ite	hi
 8015fa4:	2000      	movhi	r0, #0
 8015fa6:	2001      	movls	r0, #1
 8015fa8:	459b      	cmp	fp, r3
 8015faa:	d8f2      	bhi.n	8015f92 <uxr_run_session_until_all_status+0x6a>
 8015fac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fb0:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8015fb4:	f10c 0c01 	add.w	ip, ip, #1
 8015fb8:	45dc      	cmp	ip, fp
 8015fba:	d201      	bcs.n	8015fc0 <uxr_run_session_until_all_status+0x98>
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d0dd      	beq.n	8015f7c <uxr_run_session_until_all_status+0x54>
 8015fc0:	2900      	cmp	r1, #0
 8015fc2:	dde3      	ble.n	8015f8c <uxr_run_session_until_all_status+0x64>
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d1ca      	bne.n	8015f5e <uxr_run_session_until_all_status+0x36>
 8015fc8:	e7e0      	b.n	8015f8c <uxr_run_session_until_all_status+0x64>
 8015fca:	2001      	movs	r0, #1
 8015fcc:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8015fd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015fd4 <wait_session_status>:
 8015fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fd8:	4604      	mov	r4, r0
 8015fda:	b09d      	sub	sp, #116	; 0x74
 8015fdc:	20ff      	movs	r0, #255	; 0xff
 8015fde:	9303      	str	r3, [sp, #12]
 8015fe0:	7160      	strb	r0, [r4, #5]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	f000 80b6 	beq.w	8016154 <wait_session_status+0x180>
 8015fe8:	4689      	mov	r9, r1
 8015fea:	4692      	mov	sl, r2
 8015fec:	f04f 0b00 	mov.w	fp, #0
 8015ff0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8015ff2:	4652      	mov	r2, sl
 8015ff4:	4649      	mov	r1, r9
 8015ff6:	e9d3 0500 	ldrd	r0, r5, [r3]
 8015ffa:	47a8      	blx	r5
 8015ffc:	f001 f92e 	bl	801725c <uxr_millis>
 8016000:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016004:	4605      	mov	r5, r0
 8016006:	e009      	b.n	801601c <wait_session_status+0x48>
 8016008:	f001 f928 	bl	801725c <uxr_millis>
 801600c:	1b40      	subs	r0, r0, r5
 801600e:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8016012:	2b00      	cmp	r3, #0
 8016014:	dd40      	ble.n	8016098 <wait_session_status+0xc4>
 8016016:	7960      	ldrb	r0, [r4, #5]
 8016018:	28ff      	cmp	r0, #255	; 0xff
 801601a:	d145      	bne.n	80160a8 <wait_session_status+0xd4>
 801601c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801601e:	a908      	add	r1, sp, #32
 8016020:	6896      	ldr	r6, [r2, #8]
 8016022:	6810      	ldr	r0, [r2, #0]
 8016024:	aa09      	add	r2, sp, #36	; 0x24
 8016026:	47b0      	blx	r6
 8016028:	2800      	cmp	r0, #0
 801602a:	d0ed      	beq.n	8016008 <wait_session_status+0x34>
 801602c:	a80c      	add	r0, sp, #48	; 0x30
 801602e:	2600      	movs	r6, #0
 8016030:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8016034:	f7f8 fed8 	bl	800ede8 <ucdr_init_buffer>
 8016038:	f10d 031e 	add.w	r3, sp, #30
 801603c:	aa07      	add	r2, sp, #28
 801603e:	a90c      	add	r1, sp, #48	; 0x30
 8016040:	4620      	mov	r0, r4
 8016042:	f88d 601c 	strb.w	r6, [sp, #28]
 8016046:	f000 fa8f 	bl	8016568 <uxr_read_session_header>
 801604a:	2800      	cmp	r0, #0
 801604c:	d0dc      	beq.n	8016008 <wait_session_status+0x34>
 801604e:	4631      	mov	r1, r6
 8016050:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8016054:	f000 ffac 	bl	8016fb0 <uxr_stream_id_from_raw>
 8016058:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801605c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8016060:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8016064:	2f01      	cmp	r7, #1
 8016066:	9302      	str	r3, [sp, #8]
 8016068:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 801606c:	d05c      	beq.n	8016128 <wait_session_status+0x154>
 801606e:	2f02      	cmp	r7, #2
 8016070:	d020      	beq.n	80160b4 <wait_session_status+0xe0>
 8016072:	2f00      	cmp	r7, #0
 8016074:	d1c8      	bne.n	8016008 <wait_session_status+0x34>
 8016076:	4639      	mov	r1, r7
 8016078:	4638      	mov	r0, r7
 801607a:	f000 ff99 	bl	8016fb0 <uxr_stream_id_from_raw>
 801607e:	a90c      	add	r1, sp, #48	; 0x30
 8016080:	4602      	mov	r2, r0
 8016082:	900b      	str	r0, [sp, #44]	; 0x2c
 8016084:	4620      	mov	r0, r4
 8016086:	f7ff fc2d 	bl	80158e4 <read_submessage_list>
 801608a:	f001 f8e7 	bl	801725c <uxr_millis>
 801608e:	1b40      	subs	r0, r0, r5
 8016090:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8016094:	2b00      	cmp	r3, #0
 8016096:	dcbe      	bgt.n	8016016 <wait_session_status+0x42>
 8016098:	f10b 0b01 	add.w	fp, fp, #1
 801609c:	9b03      	ldr	r3, [sp, #12]
 801609e:	7960      	ldrb	r0, [r4, #5]
 80160a0:	455b      	cmp	r3, fp
 80160a2:	d001      	beq.n	80160a8 <wait_session_status+0xd4>
 80160a4:	28ff      	cmp	r0, #255	; 0xff
 80160a6:	d0a3      	beq.n	8015ff0 <wait_session_status+0x1c>
 80160a8:	38ff      	subs	r0, #255	; 0xff
 80160aa:	bf18      	it	ne
 80160ac:	2001      	movne	r0, #1
 80160ae:	b01d      	add	sp, #116	; 0x74
 80160b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160b4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80160b8:	4631      	mov	r1, r6
 80160ba:	f104 0008 	add.w	r0, r4, #8
 80160be:	9304      	str	r3, [sp, #16]
 80160c0:	f001 f864 	bl	801718c <uxr_get_input_reliable_stream>
 80160c4:	4680      	mov	r8, r0
 80160c6:	b348      	cbz	r0, 801611c <wait_session_status+0x148>
 80160c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80160ca:	a80c      	add	r0, sp, #48	; 0x30
 80160cc:	9205      	str	r2, [sp, #20]
 80160ce:	f7f8 febd 	bl	800ee4c <ucdr_buffer_remaining>
 80160d2:	4603      	mov	r3, r0
 80160d4:	f10d 001d 	add.w	r0, sp, #29
 80160d8:	9a05      	ldr	r2, [sp, #20]
 80160da:	9000      	str	r0, [sp, #0]
 80160dc:	4640      	mov	r0, r8
 80160de:	9902      	ldr	r1, [sp, #8]
 80160e0:	f003 f92c 	bl	801933c <uxr_receive_reliable_message>
 80160e4:	b1d0      	cbz	r0, 801611c <wait_session_status+0x148>
 80160e6:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d03a      	beq.n	8016164 <wait_session_status+0x190>
 80160ee:	9f04      	ldr	r7, [sp, #16]
 80160f0:	e00a      	b.n	8016108 <wait_session_status+0x134>
 80160f2:	f04f 0302 	mov.w	r3, #2
 80160f6:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 80160fa:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 80160fe:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8016102:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016104:	f7ff fbee 	bl	80158e4 <read_submessage_list>
 8016108:	a914      	add	r1, sp, #80	; 0x50
 801610a:	2204      	movs	r2, #4
 801610c:	4640      	mov	r0, r8
 801610e:	f003 f997 	bl	8019440 <uxr_next_input_reliable_buffer_available>
 8016112:	4603      	mov	r3, r0
 8016114:	a914      	add	r1, sp, #80	; 0x50
 8016116:	4620      	mov	r0, r4
 8016118:	2b00      	cmp	r3, #0
 801611a:	d1ea      	bne.n	80160f2 <wait_session_status+0x11e>
 801611c:	4632      	mov	r2, r6
 801611e:	9904      	ldr	r1, [sp, #16]
 8016120:	4620      	mov	r0, r4
 8016122:	f7ff fa59 	bl	80155d8 <write_submessage_acknack.isra.0>
 8016126:	e76f      	b.n	8016008 <wait_session_status+0x34>
 8016128:	4631      	mov	r1, r6
 801612a:	f104 0008 	add.w	r0, r4, #8
 801612e:	f001 f823 	bl	8017178 <uxr_get_input_best_effort_stream>
 8016132:	2800      	cmp	r0, #0
 8016134:	f43f af68 	beq.w	8016008 <wait_session_status+0x34>
 8016138:	9902      	ldr	r1, [sp, #8]
 801613a:	f003 f875 	bl	8019228 <uxr_receive_best_effort_message>
 801613e:	2800      	cmp	r0, #0
 8016140:	f43f af62 	beq.w	8016008 <wait_session_status+0x34>
 8016144:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8016148:	a90c      	add	r1, sp, #48	; 0x30
 801614a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801614c:	4620      	mov	r0, r4
 801614e:	f7ff fbc9 	bl	80158e4 <read_submessage_list>
 8016152:	e759      	b.n	8016008 <wait_session_status+0x34>
 8016154:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016156:	e9d3 0400 	ldrd	r0, r4, [r3]
 801615a:	47a0      	blx	r4
 801615c:	2001      	movs	r0, #1
 801615e:	b01d      	add	sp, #116	; 0x74
 8016160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016164:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8016168:	a90c      	add	r1, sp, #48	; 0x30
 801616a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801616c:	4620      	mov	r0, r4
 801616e:	f7ff fbb9 	bl	80158e4 <read_submessage_list>
 8016172:	e7bc      	b.n	80160ee <wait_session_status+0x11a>

08016174 <uxr_delete_session_retries>:
 8016174:	b530      	push	{r4, r5, lr}
 8016176:	b08f      	sub	sp, #60	; 0x3c
 8016178:	4604      	mov	r4, r0
 801617a:	460d      	mov	r5, r1
 801617c:	f000 fa34 	bl	80165e8 <uxr_session_header_offset>
 8016180:	2300      	movs	r3, #0
 8016182:	2210      	movs	r2, #16
 8016184:	a902      	add	r1, sp, #8
 8016186:	9000      	str	r0, [sp, #0]
 8016188:	a806      	add	r0, sp, #24
 801618a:	f7f8 fe1b 	bl	800edc4 <ucdr_init_buffer_origin_offset>
 801618e:	a906      	add	r1, sp, #24
 8016190:	4620      	mov	r0, r4
 8016192:	f000 f979 	bl	8016488 <uxr_buffer_delete_session>
 8016196:	2200      	movs	r2, #0
 8016198:	9b06      	ldr	r3, [sp, #24]
 801619a:	4620      	mov	r0, r4
 801619c:	4611      	mov	r1, r2
 801619e:	f000 f9cf 	bl	8016540 <uxr_stamp_session_header>
 80161a2:	a806      	add	r0, sp, #24
 80161a4:	f7f8 fe4e 	bl	800ee44 <ucdr_buffer_length>
 80161a8:	462b      	mov	r3, r5
 80161aa:	4602      	mov	r2, r0
 80161ac:	a902      	add	r1, sp, #8
 80161ae:	4620      	mov	r0, r4
 80161b0:	f7ff ff10 	bl	8015fd4 <wait_session_status>
 80161b4:	b118      	cbz	r0, 80161be <uxr_delete_session_retries+0x4a>
 80161b6:	7960      	ldrb	r0, [r4, #5]
 80161b8:	fab0 f080 	clz	r0, r0
 80161bc:	0940      	lsrs	r0, r0, #5
 80161be:	b00f      	add	sp, #60	; 0x3c
 80161c0:	bd30      	pop	{r4, r5, pc}
 80161c2:	bf00      	nop

080161c4 <uxr_create_session>:
 80161c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161c8:	f100 0b08 	add.w	fp, r0, #8
 80161cc:	4604      	mov	r4, r0
 80161ce:	b0ab      	sub	sp, #172	; 0xac
 80161d0:	4658      	mov	r0, fp
 80161d2:	465e      	mov	r6, fp
 80161d4:	f000 ff22 	bl	801701c <uxr_reset_stream_storage>
 80161d8:	4620      	mov	r0, r4
 80161da:	f000 fa05 	bl	80165e8 <uxr_session_header_offset>
 80161de:	2300      	movs	r3, #0
 80161e0:	221c      	movs	r2, #28
 80161e2:	a90b      	add	r1, sp, #44	; 0x2c
 80161e4:	9000      	str	r0, [sp, #0]
 80161e6:	a812      	add	r0, sp, #72	; 0x48
 80161e8:	f7f8 fdec 	bl	800edc4 <ucdr_init_buffer_origin_offset>
 80161ec:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80161ee:	a912      	add	r1, sp, #72	; 0x48
 80161f0:	4620      	mov	r0, r4
 80161f2:	8a1a      	ldrh	r2, [r3, #16]
 80161f4:	3a04      	subs	r2, #4
 80161f6:	b292      	uxth	r2, r2
 80161f8:	f000 f91c 	bl	8016434 <uxr_buffer_create_session>
 80161fc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80161fe:	4620      	mov	r0, r4
 8016200:	f000 f98a 	bl	8016518 <uxr_stamp_create_session_header>
 8016204:	a812      	add	r0, sp, #72	; 0x48
 8016206:	f7f8 fe1d 	bl	800ee44 <ucdr_buffer_length>
 801620a:	23ff      	movs	r3, #255	; 0xff
 801620c:	4681      	mov	r9, r0
 801620e:	7163      	strb	r3, [r4, #5]
 8016210:	230a      	movs	r3, #10
 8016212:	9303      	str	r3, [sp, #12]
 8016214:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016216:	464a      	mov	r2, r9
 8016218:	a90b      	add	r1, sp, #44	; 0x2c
 801621a:	e9d3 0500 	ldrd	r0, r5, [r3]
 801621e:	47a8      	blx	r5
 8016220:	f001 f81c 	bl	801725c <uxr_millis>
 8016224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016228:	4605      	mov	r5, r0
 801622a:	e009      	b.n	8016240 <uxr_create_session+0x7c>
 801622c:	f001 f816 	bl	801725c <uxr_millis>
 8016230:	1b40      	subs	r0, r0, r5
 8016232:	7962      	ldrb	r2, [r4, #5]
 8016234:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8016238:	2b00      	cmp	r3, #0
 801623a:	dd38      	ble.n	80162ae <uxr_create_session+0xea>
 801623c:	2aff      	cmp	r2, #255	; 0xff
 801623e:	d13c      	bne.n	80162ba <uxr_create_session+0xf6>
 8016240:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8016242:	a907      	add	r1, sp, #28
 8016244:	6897      	ldr	r7, [r2, #8]
 8016246:	6810      	ldr	r0, [r2, #0]
 8016248:	aa08      	add	r2, sp, #32
 801624a:	47b8      	blx	r7
 801624c:	2800      	cmp	r0, #0
 801624e:	d0ed      	beq.n	801622c <uxr_create_session+0x68>
 8016250:	a81a      	add	r0, sp, #104	; 0x68
 8016252:	2700      	movs	r7, #0
 8016254:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8016258:	f7f8 fdc6 	bl	800ede8 <ucdr_init_buffer>
 801625c:	f10d 031a 	add.w	r3, sp, #26
 8016260:	aa06      	add	r2, sp, #24
 8016262:	a91a      	add	r1, sp, #104	; 0x68
 8016264:	4620      	mov	r0, r4
 8016266:	f88d 7018 	strb.w	r7, [sp, #24]
 801626a:	f000 f97d 	bl	8016568 <uxr_read_session_header>
 801626e:	2800      	cmp	r0, #0
 8016270:	d0dc      	beq.n	801622c <uxr_create_session+0x68>
 8016272:	4639      	mov	r1, r7
 8016274:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8016278:	f000 fe9a 	bl	8016fb0 <uxr_stream_id_from_raw>
 801627c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8016280:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8016284:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8016288:	2f01      	cmp	r7, #1
 801628a:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 801628e:	d053      	beq.n	8016338 <uxr_create_session+0x174>
 8016290:	2f02      	cmp	r7, #2
 8016292:	d018      	beq.n	80162c6 <uxr_create_session+0x102>
 8016294:	2f00      	cmp	r7, #0
 8016296:	d1c9      	bne.n	801622c <uxr_create_session+0x68>
 8016298:	4639      	mov	r1, r7
 801629a:	4638      	mov	r0, r7
 801629c:	f000 fe88 	bl	8016fb0 <uxr_stream_id_from_raw>
 80162a0:	a91a      	add	r1, sp, #104	; 0x68
 80162a2:	4602      	mov	r2, r0
 80162a4:	900a      	str	r0, [sp, #40]	; 0x28
 80162a6:	4620      	mov	r0, r4
 80162a8:	f7ff fb1c 	bl	80158e4 <read_submessage_list>
 80162ac:	e7be      	b.n	801622c <uxr_create_session+0x68>
 80162ae:	9b03      	ldr	r3, [sp, #12]
 80162b0:	3b01      	subs	r3, #1
 80162b2:	9303      	str	r3, [sp, #12]
 80162b4:	d001      	beq.n	80162ba <uxr_create_session+0xf6>
 80162b6:	2aff      	cmp	r2, #255	; 0xff
 80162b8:	d0ac      	beq.n	8016214 <uxr_create_session+0x50>
 80162ba:	2a00      	cmp	r2, #0
 80162bc:	d051      	beq.n	8016362 <uxr_create_session+0x19e>
 80162be:	2000      	movs	r0, #0
 80162c0:	b02b      	add	sp, #172	; 0xac
 80162c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162c6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80162ca:	4641      	mov	r1, r8
 80162cc:	4630      	mov	r0, r6
 80162ce:	9304      	str	r3, [sp, #16]
 80162d0:	f000 ff5c 	bl	801718c <uxr_get_input_reliable_stream>
 80162d4:	4682      	mov	sl, r0
 80162d6:	b348      	cbz	r0, 801632c <uxr_create_session+0x168>
 80162d8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80162da:	a81a      	add	r0, sp, #104	; 0x68
 80162dc:	9205      	str	r2, [sp, #20]
 80162de:	f7f8 fdb5 	bl	800ee4c <ucdr_buffer_remaining>
 80162e2:	4603      	mov	r3, r0
 80162e4:	f10d 0019 	add.w	r0, sp, #25
 80162e8:	9a05      	ldr	r2, [sp, #20]
 80162ea:	4659      	mov	r1, fp
 80162ec:	9000      	str	r0, [sp, #0]
 80162ee:	4650      	mov	r0, sl
 80162f0:	f003 f824 	bl	801933c <uxr_receive_reliable_message>
 80162f4:	b1d0      	cbz	r0, 801632c <uxr_create_session+0x168>
 80162f6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d038      	beq.n	8016370 <uxr_create_session+0x1ac>
 80162fe:	9f04      	ldr	r7, [sp, #16]
 8016300:	e00a      	b.n	8016318 <uxr_create_session+0x154>
 8016302:	f04f 0302 	mov.w	r3, #2
 8016306:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 801630a:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 801630e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016312:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016314:	f7ff fae6 	bl	80158e4 <read_submessage_list>
 8016318:	a922      	add	r1, sp, #136	; 0x88
 801631a:	2204      	movs	r2, #4
 801631c:	4650      	mov	r0, sl
 801631e:	f003 f88f 	bl	8019440 <uxr_next_input_reliable_buffer_available>
 8016322:	4603      	mov	r3, r0
 8016324:	a922      	add	r1, sp, #136	; 0x88
 8016326:	4620      	mov	r0, r4
 8016328:	2b00      	cmp	r3, #0
 801632a:	d1ea      	bne.n	8016302 <uxr_create_session+0x13e>
 801632c:	4642      	mov	r2, r8
 801632e:	9904      	ldr	r1, [sp, #16]
 8016330:	4620      	mov	r0, r4
 8016332:	f7ff f951 	bl	80155d8 <write_submessage_acknack.isra.0>
 8016336:	e779      	b.n	801622c <uxr_create_session+0x68>
 8016338:	4641      	mov	r1, r8
 801633a:	4630      	mov	r0, r6
 801633c:	f000 ff1c 	bl	8017178 <uxr_get_input_best_effort_stream>
 8016340:	2800      	cmp	r0, #0
 8016342:	f43f af73 	beq.w	801622c <uxr_create_session+0x68>
 8016346:	4659      	mov	r1, fp
 8016348:	f002 ff6e 	bl	8019228 <uxr_receive_best_effort_message>
 801634c:	2800      	cmp	r0, #0
 801634e:	f43f af6d 	beq.w	801622c <uxr_create_session+0x68>
 8016352:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8016356:	a91a      	add	r1, sp, #104	; 0x68
 8016358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801635a:	4620      	mov	r0, r4
 801635c:	f7ff fac2 	bl	80158e4 <read_submessage_list>
 8016360:	e764      	b.n	801622c <uxr_create_session+0x68>
 8016362:	4630      	mov	r0, r6
 8016364:	f000 fe5a 	bl	801701c <uxr_reset_stream_storage>
 8016368:	2001      	movs	r0, #1
 801636a:	b02b      	add	sp, #172	; 0xac
 801636c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016370:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8016374:	a91a      	add	r1, sp, #104	; 0x68
 8016376:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016378:	4620      	mov	r0, r4
 801637a:	f7ff fab3 	bl	80158e4 <read_submessage_list>
 801637e:	e7be      	b.n	80162fe <uxr_create_session+0x13a>

08016380 <uxr_prepare_stream_to_write_submessage>:
 8016380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016384:	b082      	sub	sp, #8
 8016386:	4604      	mov	r4, r0
 8016388:	4610      	mov	r0, r2
 801638a:	4615      	mov	r5, r2
 801638c:	461e      	mov	r6, r3
 801638e:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8016392:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8016396:	f105 0904 	add.w	r9, r5, #4
 801639a:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 801639e:	9101      	str	r1, [sp, #4]
 80163a0:	f000 ff56 	bl	8017250 <uxr_submessage_padding>
 80163a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80163a8:	4481      	add	r9, r0
 80163aa:	2b01      	cmp	r3, #1
 80163ac:	d01d      	beq.n	80163ea <uxr_prepare_stream_to_write_submessage+0x6a>
 80163ae:	2b02      	cmp	r3, #2
 80163b0:	d116      	bne.n	80163e0 <uxr_prepare_stream_to_write_submessage+0x60>
 80163b2:	f104 0008 	add.w	r0, r4, #8
 80163b6:	4651      	mov	r1, sl
 80163b8:	f000 fed2 	bl	8017160 <uxr_get_output_reliable_stream>
 80163bc:	4604      	mov	r4, r0
 80163be:	b158      	cbz	r0, 80163d8 <uxr_prepare_stream_to_write_submessage+0x58>
 80163c0:	4649      	mov	r1, r9
 80163c2:	4632      	mov	r2, r6
 80163c4:	f003 fa02 	bl	80197cc <uxr_prepare_reliable_buffer_to_write>
 80163c8:	4604      	mov	r4, r0
 80163ca:	b12c      	cbz	r4, 80163d8 <uxr_prepare_stream_to_write_submessage+0x58>
 80163cc:	4643      	mov	r3, r8
 80163ce:	b2aa      	uxth	r2, r5
 80163d0:	4639      	mov	r1, r7
 80163d2:	4630      	mov	r0, r6
 80163d4:	f000 fefc 	bl	80171d0 <uxr_buffer_submessage_header>
 80163d8:	4620      	mov	r0, r4
 80163da:	b002      	add	sp, #8
 80163dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163e0:	2400      	movs	r4, #0
 80163e2:	4620      	mov	r0, r4
 80163e4:	b002      	add	sp, #8
 80163e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80163ea:	f104 0008 	add.w	r0, r4, #8
 80163ee:	4651      	mov	r1, sl
 80163f0:	f000 feae 	bl	8017150 <uxr_get_output_best_effort_stream>
 80163f4:	4604      	mov	r4, r0
 80163f6:	2800      	cmp	r0, #0
 80163f8:	d0ee      	beq.n	80163d8 <uxr_prepare_stream_to_write_submessage+0x58>
 80163fa:	4649      	mov	r1, r9
 80163fc:	4632      	mov	r2, r6
 80163fe:	f003 f90f 	bl	8019620 <uxr_prepare_best_effort_buffer_to_write>
 8016402:	4604      	mov	r4, r0
 8016404:	e7e1      	b.n	80163ca <uxr_prepare_stream_to_write_submessage+0x4a>
 8016406:	bf00      	nop

08016408 <uxr_init_session_info>:
 8016408:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 801640c:	23ff      	movs	r3, #255	; 0xff
 801640e:	7102      	strb	r2, [r0, #4]
 8016410:	f880 c001 	strb.w	ip, [r0, #1]
 8016414:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8016418:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801641c:	7001      	strb	r1, [r0, #0]
 801641e:	f880 c002 	strb.w	ip, [r0, #2]
 8016422:	7143      	strb	r3, [r0, #5]
 8016424:	70c2      	strb	r2, [r0, #3]
 8016426:	b500      	push	{lr}
 8016428:	f04f 0e09 	mov.w	lr, #9
 801642c:	f8a0 e006 	strh.w	lr, [r0, #6]
 8016430:	f85d fb04 	ldr.w	pc, [sp], #4

08016434 <uxr_buffer_create_session>:
 8016434:	b530      	push	{r4, r5, lr}
 8016436:	2300      	movs	r3, #0
 8016438:	b089      	sub	sp, #36	; 0x24
 801643a:	4d12      	ldr	r5, [pc, #72]	; (8016484 <uxr_buffer_create_session+0x50>)
 801643c:	460c      	mov	r4, r1
 801643e:	9307      	str	r3, [sp, #28]
 8016440:	4619      	mov	r1, r3
 8016442:	f8ad 201c 	strh.w	r2, [sp, #28]
 8016446:	2201      	movs	r2, #1
 8016448:	9301      	str	r3, [sp, #4]
 801644a:	80c2      	strh	r2, [r0, #6]
 801644c:	f88d 2004 	strb.w	r2, [sp, #4]
 8016450:	682a      	ldr	r2, [r5, #0]
 8016452:	9303      	str	r3, [sp, #12]
 8016454:	9200      	str	r2, [sp, #0]
 8016456:	88aa      	ldrh	r2, [r5, #4]
 8016458:	9306      	str	r3, [sp, #24]
 801645a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801645e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8016462:	9202      	str	r2, [sp, #8]
 8016464:	7802      	ldrb	r2, [r0, #0]
 8016466:	4620      	mov	r0, r4
 8016468:	f88d 200c 	strb.w	r2, [sp, #12]
 801646c:	2210      	movs	r2, #16
 801646e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8016472:	f000 fead 	bl	80171d0 <uxr_buffer_submessage_header>
 8016476:	4669      	mov	r1, sp
 8016478:	4620      	mov	r0, r4
 801647a:	f001 fcdd 	bl	8017e38 <uxr_serialize_CREATE_CLIENT_Payload>
 801647e:	b009      	add	sp, #36	; 0x24
 8016480:	bd30      	pop	{r4, r5, pc}
 8016482:	bf00      	nop
 8016484:	0801b680 	.word	0x0801b680

08016488 <uxr_buffer_delete_session>:
 8016488:	4a0c      	ldr	r2, [pc, #48]	; (80164bc <uxr_buffer_delete_session+0x34>)
 801648a:	2302      	movs	r3, #2
 801648c:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8016490:	b510      	push	{r4, lr}
 8016492:	460c      	mov	r4, r1
 8016494:	b082      	sub	sp, #8
 8016496:	8911      	ldrh	r1, [r2, #8]
 8016498:	2204      	movs	r2, #4
 801649a:	80c3      	strh	r3, [r0, #6]
 801649c:	2300      	movs	r3, #0
 801649e:	f8ad 1006 	strh.w	r1, [sp, #6]
 80164a2:	4620      	mov	r0, r4
 80164a4:	2103      	movs	r1, #3
 80164a6:	f8ad c004 	strh.w	ip, [sp, #4]
 80164aa:	f000 fe91 	bl	80171d0 <uxr_buffer_submessage_header>
 80164ae:	a901      	add	r1, sp, #4
 80164b0:	4620      	mov	r0, r4
 80164b2:	f001 fd69 	bl	8017f88 <uxr_serialize_DELETE_Payload>
 80164b6:	b002      	add	sp, #8
 80164b8:	bd10      	pop	{r4, pc}
 80164ba:	bf00      	nop
 80164bc:	0801b680 	.word	0x0801b680

080164c0 <uxr_read_create_session_status>:
 80164c0:	b510      	push	{r4, lr}
 80164c2:	460b      	mov	r3, r1
 80164c4:	b088      	sub	sp, #32
 80164c6:	4604      	mov	r4, r0
 80164c8:	a901      	add	r1, sp, #4
 80164ca:	4618      	mov	r0, r3
 80164cc:	f001 fd6c 	bl	8017fa8 <uxr_deserialize_STATUS_AGENT_Payload>
 80164d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80164d4:	7163      	strb	r3, [r4, #5]
 80164d6:	b008      	add	sp, #32
 80164d8:	bd10      	pop	{r4, pc}
 80164da:	bf00      	nop

080164dc <uxr_read_delete_session_status>:
 80164dc:	b510      	push	{r4, lr}
 80164de:	b084      	sub	sp, #16
 80164e0:	4604      	mov	r4, r0
 80164e2:	4608      	mov	r0, r1
 80164e4:	a902      	add	r1, sp, #8
 80164e6:	f001 fd8f 	bl	8018008 <uxr_deserialize_STATUS_Payload>
 80164ea:	88e3      	ldrh	r3, [r4, #6]
 80164ec:	2b02      	cmp	r3, #2
 80164ee:	d001      	beq.n	80164f4 <uxr_read_delete_session_status+0x18>
 80164f0:	b004      	add	sp, #16
 80164f2:	bd10      	pop	{r4, pc}
 80164f4:	f10d 000a 	add.w	r0, sp, #10
 80164f8:	f7fe fec4 	bl	8015284 <uxr_object_id_from_raw>
 80164fc:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8016500:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8016504:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8016508:	b29b      	uxth	r3, r3
 801650a:	2b02      	cmp	r3, #2
 801650c:	d1f0      	bne.n	80164f0 <uxr_read_delete_session_status+0x14>
 801650e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8016512:	7163      	strb	r3, [r4, #5]
 8016514:	e7ec      	b.n	80164f0 <uxr_read_delete_session_status+0x14>
 8016516:	bf00      	nop

08016518 <uxr_stamp_create_session_header>:
 8016518:	b510      	push	{r4, lr}
 801651a:	2208      	movs	r2, #8
 801651c:	b08a      	sub	sp, #40	; 0x28
 801651e:	4604      	mov	r4, r0
 8016520:	eb0d 0002 	add.w	r0, sp, r2
 8016524:	f7f8 fc60 	bl	800ede8 <ucdr_init_buffer>
 8016528:	f814 1b01 	ldrb.w	r1, [r4], #1
 801652c:	2300      	movs	r3, #0
 801652e:	a802      	add	r0, sp, #8
 8016530:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8016534:	9400      	str	r4, [sp, #0]
 8016536:	461a      	mov	r2, r3
 8016538:	f001 f846 	bl	80175c8 <uxr_serialize_message_header>
 801653c:	b00a      	add	sp, #40	; 0x28
 801653e:	bd10      	pop	{r4, pc}

08016540 <uxr_stamp_session_header>:
 8016540:	b530      	push	{r4, r5, lr}
 8016542:	b08d      	sub	sp, #52	; 0x34
 8016544:	4604      	mov	r4, r0
 8016546:	460d      	mov	r5, r1
 8016548:	4619      	mov	r1, r3
 801654a:	a804      	add	r0, sp, #16
 801654c:	9203      	str	r2, [sp, #12]
 801654e:	2208      	movs	r2, #8
 8016550:	f7f8 fc4a 	bl	800ede8 <ucdr_init_buffer>
 8016554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016558:	9b03      	ldr	r3, [sp, #12]
 801655a:	462a      	mov	r2, r5
 801655c:	a804      	add	r0, sp, #16
 801655e:	9400      	str	r4, [sp, #0]
 8016560:	f001 f832 	bl	80175c8 <uxr_serialize_message_header>
 8016564:	b00d      	add	sp, #52	; 0x34
 8016566:	bd30      	pop	{r4, r5, pc}

08016568 <uxr_read_session_header>:
 8016568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801656c:	4607      	mov	r7, r0
 801656e:	b084      	sub	sp, #16
 8016570:	4608      	mov	r0, r1
 8016572:	460c      	mov	r4, r1
 8016574:	4615      	mov	r5, r2
 8016576:	461e      	mov	r6, r3
 8016578:	f7f8 fc68 	bl	800ee4c <ucdr_buffer_remaining>
 801657c:	2808      	cmp	r0, #8
 801657e:	d803      	bhi.n	8016588 <uxr_read_session_header+0x20>
 8016580:	2000      	movs	r0, #0
 8016582:	b004      	add	sp, #16
 8016584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016588:	f10d 080c 	add.w	r8, sp, #12
 801658c:	4633      	mov	r3, r6
 801658e:	462a      	mov	r2, r5
 8016590:	4620      	mov	r0, r4
 8016592:	f10d 010b 	add.w	r1, sp, #11
 8016596:	f8cd 8000 	str.w	r8, [sp]
 801659a:	f001 f833 	bl	8017604 <uxr_deserialize_message_header>
 801659e:	783a      	ldrb	r2, [r7, #0]
 80165a0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80165a4:	4293      	cmp	r3, r2
 80165a6:	d1eb      	bne.n	8016580 <uxr_read_session_header+0x18>
 80165a8:	061b      	lsls	r3, r3, #24
 80165aa:	d41b      	bmi.n	80165e4 <uxr_read_session_header+0x7c>
 80165ac:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80165b0:	787b      	ldrb	r3, [r7, #1]
 80165b2:	429a      	cmp	r2, r3
 80165b4:	d003      	beq.n	80165be <uxr_read_session_header+0x56>
 80165b6:	2001      	movs	r0, #1
 80165b8:	f080 0001 	eor.w	r0, r0, #1
 80165bc:	e7e1      	b.n	8016582 <uxr_read_session_header+0x1a>
 80165be:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80165c2:	1cb8      	adds	r0, r7, #2
 80165c4:	78bb      	ldrb	r3, [r7, #2]
 80165c6:	429a      	cmp	r2, r3
 80165c8:	d1f5      	bne.n	80165b6 <uxr_read_session_header+0x4e>
 80165ca:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80165ce:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80165d2:	429a      	cmp	r2, r3
 80165d4:	d1ef      	bne.n	80165b6 <uxr_read_session_header+0x4e>
 80165d6:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80165da:	7843      	ldrb	r3, [r0, #1]
 80165dc:	429a      	cmp	r2, r3
 80165de:	d1ea      	bne.n	80165b6 <uxr_read_session_header+0x4e>
 80165e0:	2000      	movs	r0, #0
 80165e2:	e7e9      	b.n	80165b8 <uxr_read_session_header+0x50>
 80165e4:	2001      	movs	r0, #1
 80165e6:	e7cc      	b.n	8016582 <uxr_read_session_header+0x1a>

080165e8 <uxr_session_header_offset>:
 80165e8:	f990 3000 	ldrsb.w	r3, [r0]
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	bfac      	ite	ge
 80165f0:	2008      	movge	r0, #8
 80165f2:	2004      	movlt	r0, #4
 80165f4:	4770      	bx	lr
 80165f6:	bf00      	nop

080165f8 <uxr_init_base_object_request>:
 80165f8:	b510      	push	{r4, lr}
 80165fa:	b082      	sub	sp, #8
 80165fc:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8016600:	9101      	str	r1, [sp, #4]
 8016602:	88c3      	ldrh	r3, [r0, #6]
 8016604:	f1a3 010a 	sub.w	r1, r3, #10
 8016608:	b289      	uxth	r1, r1
 801660a:	42a1      	cmp	r1, r4
 801660c:	d80f      	bhi.n	801662e <uxr_init_base_object_request+0x36>
 801660e:	3301      	adds	r3, #1
 8016610:	b29c      	uxth	r4, r3
 8016612:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8016616:	b2db      	uxtb	r3, r3
 8016618:	80c4      	strh	r4, [r0, #6]
 801661a:	1c91      	adds	r1, r2, #2
 801661c:	9801      	ldr	r0, [sp, #4]
 801661e:	f882 c000 	strb.w	ip, [r2]
 8016622:	7053      	strb	r3, [r2, #1]
 8016624:	f7fe fe42 	bl	80152ac <uxr_object_id_to_raw>
 8016628:	4620      	mov	r0, r4
 801662a:	b002      	add	sp, #8
 801662c:	bd10      	pop	{r4, pc}
 801662e:	230a      	movs	r3, #10
 8016630:	f04f 0c00 	mov.w	ip, #0
 8016634:	461c      	mov	r4, r3
 8016636:	e7ef      	b.n	8016618 <uxr_init_base_object_request+0x20>

08016638 <uxr_parse_base_object_request>:
 8016638:	b570      	push	{r4, r5, r6, lr}
 801663a:	4604      	mov	r4, r0
 801663c:	3002      	adds	r0, #2
 801663e:	460d      	mov	r5, r1
 8016640:	4616      	mov	r6, r2
 8016642:	f7fe fe1f 	bl	8015284 <uxr_object_id_from_raw>
 8016646:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801664a:	8028      	strh	r0, [r5, #0]
 801664c:	806b      	strh	r3, [r5, #2]
 801664e:	7822      	ldrb	r2, [r4, #0]
 8016650:	7863      	ldrb	r3, [r4, #1]
 8016652:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8016656:	8033      	strh	r3, [r6, #0]
 8016658:	bd70      	pop	{r4, r5, r6, pc}
 801665a:	bf00      	nop

0801665c <uxr_init_framing_io>:
 801665c:	2300      	movs	r3, #0
 801665e:	7041      	strb	r1, [r0, #1]
 8016660:	7003      	strb	r3, [r0, #0]
 8016662:	8583      	strh	r3, [r0, #44]	; 0x2c
 8016664:	4770      	bx	lr
 8016666:	bf00      	nop

08016668 <uxr_write_framed_msg>:
 8016668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801666c:	4617      	mov	r7, r2
 801666e:	7842      	ldrb	r2, [r0, #1]
 8016670:	460e      	mov	r6, r1
 8016672:	b083      	sub	sp, #12
 8016674:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8016678:	469b      	mov	fp, r3
 801667a:	237e      	movs	r3, #126	; 0x7e
 801667c:	4604      	mov	r4, r0
 801667e:	2901      	cmp	r1, #1
 8016680:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8016684:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8016688:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801668c:	f240 8115 	bls.w	80168ba <uxr_write_framed_msg+0x252>
 8016690:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8016694:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8016698:	2202      	movs	r2, #2
 801669a:	2901      	cmp	r1, #1
 801669c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80166a0:	d952      	bls.n	8016748 <uxr_write_framed_msg+0xe0>
 80166a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80166a4:	2103      	movs	r1, #3
 80166a6:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 80166aa:	b2dd      	uxtb	r5, r3
 80166ac:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80166b0:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 80166b4:	2a01      	cmp	r2, #1
 80166b6:	d95c      	bls.n	8016772 <uxr_write_framed_msg+0x10a>
 80166b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80166ba:	1862      	adds	r2, r4, r1
 80166bc:	3101      	adds	r1, #1
 80166be:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80166c2:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 80166c6:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80166ca:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 80166ce:	2a01      	cmp	r2, #1
 80166d0:	d961      	bls.n	8016796 <uxr_write_framed_msg+0x12e>
 80166d2:	1c4a      	adds	r2, r1, #1
 80166d4:	4421      	add	r1, r4
 80166d6:	b2d2      	uxtb	r2, r2
 80166d8:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 80166dc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d06a      	beq.n	80167ba <uxr_write_framed_msg+0x152>
 80166e4:	f04f 0800 	mov.w	r8, #0
 80166e8:	46c1      	mov	r9, r8
 80166ea:	e016      	b.n	801671a <uxr_write_framed_msg+0xb2>
 80166ec:	2a29      	cmp	r2, #41	; 0x29
 80166ee:	d868      	bhi.n	80167c2 <uxr_write_framed_msg+0x15a>
 80166f0:	18a0      	adds	r0, r4, r2
 80166f2:	3201      	adds	r2, #1
 80166f4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80166f8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80166fc:	ea88 0101 	eor.w	r1, r8, r1
 8016700:	4b7d      	ldr	r3, [pc, #500]	; (80168f8 <uxr_write_framed_msg+0x290>)
 8016702:	f109 0901 	add.w	r9, r9, #1
 8016706:	b2c9      	uxtb	r1, r1
 8016708:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 801670c:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8016710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016712:	454b      	cmp	r3, r9
 8016714:	d969      	bls.n	80167ea <uxr_write_framed_msg+0x182>
 8016716:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801671a:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801671e:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8016722:	2801      	cmp	r0, #1
 8016724:	d8e2      	bhi.n	80166ec <uxr_write_framed_msg+0x84>
 8016726:	1c50      	adds	r0, r2, #1
 8016728:	b2c0      	uxtb	r0, r0
 801672a:	2829      	cmp	r0, #41	; 0x29
 801672c:	d849      	bhi.n	80167c2 <uxr_write_framed_msg+0x15a>
 801672e:	18a0      	adds	r0, r4, r2
 8016730:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8016734:	3202      	adds	r2, #2
 8016736:	f081 0520 	eor.w	r5, r1, #32
 801673a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801673e:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 8016742:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016746:	e7d9      	b.n	80166fc <uxr_write_framed_msg+0x94>
 8016748:	2104      	movs	r1, #4
 801674a:	f04f 0c03 	mov.w	ip, #3
 801674e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016750:	4422      	add	r2, r4
 8016752:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 8016756:	44a4      	add	ip, r4
 8016758:	b2dd      	uxtb	r5, r3
 801675a:	f080 0020 	eor.w	r0, r0, #32
 801675e:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 8016762:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8016766:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 801676a:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801676e:	2a01      	cmp	r2, #1
 8016770:	d8a2      	bhi.n	80166b8 <uxr_write_framed_msg+0x50>
 8016772:	1862      	adds	r2, r4, r1
 8016774:	207d      	movs	r0, #125	; 0x7d
 8016776:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016778:	f085 0520 	eor.w	r5, r5, #32
 801677c:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 8016780:	3102      	adds	r1, #2
 8016782:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8016786:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 801678a:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801678e:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8016792:	2a01      	cmp	r2, #1
 8016794:	d89d      	bhi.n	80166d2 <uxr_write_framed_msg+0x6a>
 8016796:	1c4d      	adds	r5, r1, #1
 8016798:	1c8a      	adds	r2, r1, #2
 801679a:	f080 0020 	eor.w	r0, r0, #32
 801679e:	4421      	add	r1, r4
 80167a0:	fa54 f585 	uxtab	r5, r4, r5
 80167a4:	b2d2      	uxtb	r2, r2
 80167a6:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 80167aa:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 80167ae:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 80167b2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d194      	bne.n	80166e4 <uxr_write_framed_msg+0x7c>
 80167ba:	4619      	mov	r1, r3
 80167bc:	f8ad 3004 	strh.w	r3, [sp, #4]
 80167c0:	e019      	b.n	80167f6 <uxr_write_framed_msg+0x18e>
 80167c2:	2500      	movs	r5, #0
 80167c4:	e000      	b.n	80167c8 <uxr_write_framed_msg+0x160>
 80167c6:	b160      	cbz	r0, 80167e2 <uxr_write_framed_msg+0x17a>
 80167c8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 80167cc:	1b52      	subs	r2, r2, r5
 80167ce:	4653      	mov	r3, sl
 80167d0:	4638      	mov	r0, r7
 80167d2:	4421      	add	r1, r4
 80167d4:	47b0      	blx	r6
 80167d6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80167da:	4405      	add	r5, r0
 80167dc:	4295      	cmp	r5, r2
 80167de:	d3f2      	bcc.n	80167c6 <uxr_write_framed_msg+0x15e>
 80167e0:	d066      	beq.n	80168b0 <uxr_write_framed_msg+0x248>
 80167e2:	2000      	movs	r0, #0
 80167e4:	b003      	add	sp, #12
 80167e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167ea:	fa5f f188 	uxtb.w	r1, r8
 80167ee:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80167f2:	f8ad 8004 	strh.w	r8, [sp, #4]
 80167f6:	f04f 0900 	mov.w	r9, #0
 80167fa:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 80167fe:	46c8      	mov	r8, r9
 8016800:	e013      	b.n	801682a <uxr_write_framed_msg+0x1c2>
 8016802:	2a29      	cmp	r2, #41	; 0x29
 8016804:	d824      	bhi.n	8016850 <uxr_write_framed_msg+0x1e8>
 8016806:	18a3      	adds	r3, r4, r2
 8016808:	3201      	adds	r2, #1
 801680a:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 801680e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8016812:	f109 0901 	add.w	r9, r9, #1
 8016816:	f1b9 0f02 	cmp.w	r9, #2
 801681a:	d02d      	beq.n	8016878 <uxr_write_framed_msg+0x210>
 801681c:	f109 0308 	add.w	r3, r9, #8
 8016820:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8016824:	446b      	add	r3, sp
 8016826:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 801682a:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 801682e:	2b01      	cmp	r3, #1
 8016830:	d8e7      	bhi.n	8016802 <uxr_write_framed_msg+0x19a>
 8016832:	1c53      	adds	r3, r2, #1
 8016834:	b2db      	uxtb	r3, r3
 8016836:	2b29      	cmp	r3, #41	; 0x29
 8016838:	d80a      	bhi.n	8016850 <uxr_write_framed_msg+0x1e8>
 801683a:	18a3      	adds	r3, r4, r2
 801683c:	f081 0120 	eor.w	r1, r1, #32
 8016840:	3202      	adds	r2, #2
 8016842:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 8016846:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 801684a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801684e:	e7e0      	b.n	8016812 <uxr_write_framed_msg+0x1aa>
 8016850:	2500      	movs	r5, #0
 8016852:	e001      	b.n	8016858 <uxr_write_framed_msg+0x1f0>
 8016854:	2800      	cmp	r0, #0
 8016856:	d0c4      	beq.n	80167e2 <uxr_write_framed_msg+0x17a>
 8016858:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801685c:	1b52      	subs	r2, r2, r5
 801685e:	4653      	mov	r3, sl
 8016860:	4638      	mov	r0, r7
 8016862:	4421      	add	r1, r4
 8016864:	47b0      	blx	r6
 8016866:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801686a:	4405      	add	r5, r0
 801686c:	4295      	cmp	r5, r2
 801686e:	d3f1      	bcc.n	8016854 <uxr_write_framed_msg+0x1ec>
 8016870:	d1b7      	bne.n	80167e2 <uxr_write_framed_msg+0x17a>
 8016872:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 8016876:	e7d1      	b.n	801681c <uxr_write_framed_msg+0x1b4>
 8016878:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801687c:	b19a      	cbz	r2, 80168a6 <uxr_write_framed_msg+0x23e>
 801687e:	2500      	movs	r5, #0
 8016880:	e001      	b.n	8016886 <uxr_write_framed_msg+0x21e>
 8016882:	2800      	cmp	r0, #0
 8016884:	d0ad      	beq.n	80167e2 <uxr_write_framed_msg+0x17a>
 8016886:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801688a:	1b52      	subs	r2, r2, r5
 801688c:	4653      	mov	r3, sl
 801688e:	4638      	mov	r0, r7
 8016890:	4421      	add	r1, r4
 8016892:	47b0      	blx	r6
 8016894:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8016898:	4405      	add	r5, r0
 801689a:	4295      	cmp	r5, r2
 801689c:	d3f1      	bcc.n	8016882 <uxr_write_framed_msg+0x21a>
 801689e:	d1a0      	bne.n	80167e2 <uxr_write_framed_msg+0x17a>
 80168a0:	2300      	movs	r3, #0
 80168a2:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80168a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80168a8:	b298      	uxth	r0, r3
 80168aa:	b003      	add	sp, #12
 80168ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168b0:	f04f 0300 	mov.w	r3, #0
 80168b4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 80168b8:	e72a      	b.n	8016710 <uxr_write_framed_msg+0xa8>
 80168ba:	217d      	movs	r1, #125	; 0x7d
 80168bc:	f082 0220 	eor.w	r2, r2, #32
 80168c0:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 80168c4:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 80168c8:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 80168cc:	2203      	movs	r2, #3
 80168ce:	2901      	cmp	r1, #1
 80168d0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80168d4:	d803      	bhi.n	80168de <uxr_write_framed_msg+0x276>
 80168d6:	2105      	movs	r1, #5
 80168d8:	f04f 0c04 	mov.w	ip, #4
 80168dc:	e737      	b.n	801674e <uxr_write_framed_msg+0xe6>
 80168de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80168e0:	2104      	movs	r1, #4
 80168e2:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 80168e6:	b2dd      	uxtb	r5, r3
 80168e8:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80168ec:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 80168f0:	2a01      	cmp	r2, #1
 80168f2:	f63f aee1 	bhi.w	80166b8 <uxr_write_framed_msg+0x50>
 80168f6:	e73c      	b.n	8016772 <uxr_write_framed_msg+0x10a>
 80168f8:	0801cb20 	.word	0x0801cb20

080168fc <uxr_framing_read_transport>:
 80168fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016900:	4604      	mov	r4, r0
 8016902:	b085      	sub	sp, #20
 8016904:	4692      	mov	sl, r2
 8016906:	4689      	mov	r9, r1
 8016908:	461d      	mov	r5, r3
 801690a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801690c:	f000 fca6 	bl	801725c <uxr_millis>
 8016910:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8016914:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 8016918:	4680      	mov	r8, r0
 801691a:	42ba      	cmp	r2, r7
 801691c:	d05f      	beq.n	80169de <uxr_framing_read_transport+0xe2>
 801691e:	d817      	bhi.n	8016950 <uxr_framing_read_transport+0x54>
 8016920:	3f01      	subs	r7, #1
 8016922:	1aba      	subs	r2, r7, r2
 8016924:	2700      	movs	r7, #0
 8016926:	b2d2      	uxtb	r2, r2
 8016928:	42b2      	cmp	r2, r6
 801692a:	d81a      	bhi.n	8016962 <uxr_framing_read_transport+0x66>
 801692c:	19d3      	adds	r3, r2, r7
 801692e:	42b3      	cmp	r3, r6
 8016930:	d852      	bhi.n	80169d8 <uxr_framing_read_transport+0xdc>
 8016932:	b9d2      	cbnz	r2, 801696a <uxr_framing_read_transport+0x6e>
 8016934:	2600      	movs	r6, #0
 8016936:	f000 fc91 	bl	801725c <uxr_millis>
 801693a:	682b      	ldr	r3, [r5, #0]
 801693c:	eba0 0008 	sub.w	r0, r0, r8
 8016940:	1a1b      	subs	r3, r3, r0
 8016942:	4630      	mov	r0, r6
 8016944:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016948:	602b      	str	r3, [r5, #0]
 801694a:	b005      	add	sp, #20
 801694c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016950:	2f00      	cmp	r7, #0
 8016952:	d060      	beq.n	8016a16 <uxr_framing_read_transport+0x11a>
 8016954:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 8016958:	3f01      	subs	r7, #1
 801695a:	b2d2      	uxtb	r2, r2
 801695c:	b2ff      	uxtb	r7, r7
 801695e:	42b2      	cmp	r2, r6
 8016960:	d9e4      	bls.n	801692c <uxr_framing_read_transport+0x30>
 8016962:	b2f2      	uxtb	r2, r6
 8016964:	2700      	movs	r7, #0
 8016966:	2a00      	cmp	r2, #0
 8016968:	d0e4      	beq.n	8016934 <uxr_framing_read_transport+0x38>
 801696a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801696c:	4650      	mov	r0, sl
 801696e:	9203      	str	r2, [sp, #12]
 8016970:	9300      	str	r3, [sp, #0]
 8016972:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8016976:	682b      	ldr	r3, [r5, #0]
 8016978:	3102      	adds	r1, #2
 801697a:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8016a20 <uxr_framing_read_transport+0x124>
 801697e:	4421      	add	r1, r4
 8016980:	47c8      	blx	r9
 8016982:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8016986:	4606      	mov	r6, r0
 8016988:	4403      	add	r3, r0
 801698a:	0859      	lsrs	r1, r3, #1
 801698c:	fbab 2101 	umull	r2, r1, fp, r1
 8016990:	222a      	movs	r2, #42	; 0x2a
 8016992:	0889      	lsrs	r1, r1, #2
 8016994:	fb02 3111 	mls	r1, r2, r1, r3
 8016998:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 801699c:	2800      	cmp	r0, #0
 801699e:	d0c9      	beq.n	8016934 <uxr_framing_read_transport+0x38>
 80169a0:	9a03      	ldr	r2, [sp, #12]
 80169a2:	4290      	cmp	r0, r2
 80169a4:	d1c7      	bne.n	8016936 <uxr_framing_read_transport+0x3a>
 80169a6:	2f00      	cmp	r7, #0
 80169a8:	d0c5      	beq.n	8016936 <uxr_framing_read_transport+0x3a>
 80169aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80169ac:	3102      	adds	r1, #2
 80169ae:	463a      	mov	r2, r7
 80169b0:	4650      	mov	r0, sl
 80169b2:	4421      	add	r1, r4
 80169b4:	9300      	str	r3, [sp, #0]
 80169b6:	2300      	movs	r3, #0
 80169b8:	47c8      	blx	r9
 80169ba:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80169be:	4406      	add	r6, r0
 80169c0:	1813      	adds	r3, r2, r0
 80169c2:	085a      	lsrs	r2, r3, #1
 80169c4:	fbab 1b02 	umull	r1, fp, fp, r2
 80169c8:	222a      	movs	r2, #42	; 0x2a
 80169ca:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 80169ce:	fb02 331b 	mls	r3, r2, fp, r3
 80169d2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80169d6:	e7ae      	b.n	8016936 <uxr_framing_read_transport+0x3a>
 80169d8:	1ab6      	subs	r6, r6, r2
 80169da:	b2f7      	uxtb	r7, r6
 80169dc:	e7a9      	b.n	8016932 <uxr_framing_read_transport+0x36>
 80169de:	2300      	movs	r3, #0
 80169e0:	2e28      	cmp	r6, #40	; 0x28
 80169e2:	85a3      	strh	r3, [r4, #44]	; 0x2c
 80169e4:	d9bd      	bls.n	8016962 <uxr_framing_read_transport+0x66>
 80169e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80169e8:	2229      	movs	r2, #41	; 0x29
 80169ea:	1ca1      	adds	r1, r4, #2
 80169ec:	4650      	mov	r0, sl
 80169ee:	9300      	str	r3, [sp, #0]
 80169f0:	682b      	ldr	r3, [r5, #0]
 80169f2:	47c8      	blx	r9
 80169f4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80169f8:	4606      	mov	r6, r0
 80169fa:	212a      	movs	r1, #42	; 0x2a
 80169fc:	4403      	add	r3, r0
 80169fe:	4808      	ldr	r0, [pc, #32]	; (8016a20 <uxr_framing_read_transport+0x124>)
 8016a00:	085a      	lsrs	r2, r3, #1
 8016a02:	fba0 0202 	umull	r0, r2, r0, r2
 8016a06:	0892      	lsrs	r2, r2, #2
 8016a08:	fb01 3312 	mls	r3, r1, r2, r3
 8016a0c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8016a10:	2e00      	cmp	r6, #0
 8016a12:	d08f      	beq.n	8016934 <uxr_framing_read_transport+0x38>
 8016a14:	e78f      	b.n	8016936 <uxr_framing_read_transport+0x3a>
 8016a16:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 8016a1a:	b2d2      	uxtb	r2, r2
 8016a1c:	e784      	b.n	8016928 <uxr_framing_read_transport+0x2c>
 8016a1e:	bf00      	nop
 8016a20:	30c30c31 	.word	0x30c30c31

08016a24 <uxr_read_framed_msg>:
 8016a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a28:	461e      	mov	r6, r3
 8016a2a:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8016a2e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8016a32:	b083      	sub	sp, #12
 8016a34:	4604      	mov	r4, r0
 8016a36:	4688      	mov	r8, r1
 8016a38:	429d      	cmp	r5, r3
 8016a3a:	4691      	mov	r9, r2
 8016a3c:	f000 818c 	beq.w	8016d58 <uxr_read_framed_msg+0x334>
 8016a40:	7823      	ldrb	r3, [r4, #0]
 8016a42:	4dc3      	ldr	r5, [pc, #780]	; (8016d50 <uxr_read_framed_msg+0x32c>)
 8016a44:	4fc3      	ldr	r7, [pc, #780]	; (8016d54 <uxr_read_framed_msg+0x330>)
 8016a46:	2b07      	cmp	r3, #7
 8016a48:	d8fd      	bhi.n	8016a46 <uxr_read_framed_msg+0x22>
 8016a4a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8016a4e:	011c      	.short	0x011c
 8016a50:	00d900fb 	.word	0x00d900fb
 8016a54:	008f00ba 	.word	0x008f00ba
 8016a58:	00320051 	.word	0x00320051
 8016a5c:	0008      	.short	0x0008
 8016a5e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8016a62:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8016a66:	4299      	cmp	r1, r3
 8016a68:	f000 814d 	beq.w	8016d06 <uxr_read_framed_msg+0x2e2>
 8016a6c:	18e2      	adds	r2, r4, r3
 8016a6e:	7892      	ldrb	r2, [r2, #2]
 8016a70:	2a7d      	cmp	r2, #125	; 0x7d
 8016a72:	f000 81b8 	beq.w	8016de6 <uxr_read_framed_msg+0x3c2>
 8016a76:	3301      	adds	r3, #1
 8016a78:	212a      	movs	r1, #42	; 0x2a
 8016a7a:	2a7e      	cmp	r2, #126	; 0x7e
 8016a7c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8016a80:	fba5 c000 	umull	ip, r0, r5, r0
 8016a84:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8016a88:	fb01 3310 	mls	r3, r1, r0, r3
 8016a8c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016a90:	f000 8257 	beq.w	8016f42 <uxr_read_framed_msg+0x51e>
 8016a94:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8016a96:	2000      	movs	r0, #0
 8016a98:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8016a9a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8016a9e:	7020      	strb	r0, [r4, #0]
 8016aa0:	b29b      	uxth	r3, r3
 8016aa2:	4299      	cmp	r1, r3
 8016aa4:	86a3      	strh	r3, [r4, #52]	; 0x34
 8016aa6:	f000 8178 	beq.w	8016d9a <uxr_read_framed_msg+0x376>
 8016aaa:	2000      	movs	r0, #0
 8016aac:	b003      	add	sp, #12
 8016aae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ab2:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8016ab6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8016aba:	4298      	cmp	r0, r3
 8016abc:	f000 8132 	beq.w	8016d24 <uxr_read_framed_msg+0x300>
 8016ac0:	18e2      	adds	r2, r4, r3
 8016ac2:	7891      	ldrb	r1, [r2, #2]
 8016ac4:	297d      	cmp	r1, #125	; 0x7d
 8016ac6:	f000 8170 	beq.w	8016daa <uxr_read_framed_msg+0x386>
 8016aca:	3301      	adds	r3, #1
 8016acc:	202a      	movs	r0, #42	; 0x2a
 8016ace:	297e      	cmp	r1, #126	; 0x7e
 8016ad0:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8016ad4:	fba5 c202 	umull	ip, r2, r5, r2
 8016ad8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016adc:	fb00 3312 	mls	r3, r0, r2, r3
 8016ae0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016ae4:	f000 821d 	beq.w	8016f22 <uxr_read_framed_msg+0x4fe>
 8016ae8:	2307      	movs	r3, #7
 8016aea:	86a1      	strh	r1, [r4, #52]	; 0x34
 8016aec:	7023      	strb	r3, [r4, #0]
 8016aee:	e7aa      	b.n	8016a46 <uxr_read_framed_msg+0x22>
 8016af0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8016af2:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8016af6:	459e      	cmp	lr, r3
 8016af8:	d827      	bhi.n	8016b4a <uxr_read_framed_msg+0x126>
 8016afa:	e032      	b.n	8016b62 <uxr_read_framed_msg+0x13e>
 8016afc:	fba5 b101 	umull	fp, r1, r5, r1
 8016b00:	f89c c002 	ldrb.w	ip, [ip, #2]
 8016b04:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8016b08:	0889      	lsrs	r1, r1, #2
 8016b0a:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8016b0e:	fb0b 0111 	mls	r1, fp, r1, r0
 8016b12:	f000 80d4 	beq.w	8016cbe <uxr_read_framed_msg+0x29a>
 8016b16:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8016b1a:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8016b1e:	f000 80cb 	beq.w	8016cb8 <uxr_read_framed_msg+0x294>
 8016b22:	f806 c003 	strb.w	ip, [r6, r3]
 8016b26:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8016b28:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8016b2a:	ea80 010c 	eor.w	r1, r0, ip
 8016b2e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8016b32:	3301      	adds	r3, #1
 8016b34:	b2c9      	uxtb	r1, r1
 8016b36:	b29b      	uxth	r3, r3
 8016b38:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8016b3c:	4573      	cmp	r3, lr
 8016b3e:	8663      	strh	r3, [r4, #50]	; 0x32
 8016b40:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8016b44:	86e2      	strh	r2, [r4, #54]	; 0x36
 8016b46:	f080 811d 	bcs.w	8016d84 <uxr_read_framed_msg+0x360>
 8016b4a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8016b4e:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8016b52:	1c50      	adds	r0, r2, #1
 8016b54:	eb04 0c02 	add.w	ip, r4, r2
 8016b58:	4592      	cmp	sl, r2
 8016b5a:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8016b5e:	d1cd      	bne.n	8016afc <uxr_read_framed_msg+0xd8>
 8016b60:	459e      	cmp	lr, r3
 8016b62:	f040 8114 	bne.w	8016d8e <uxr_read_framed_msg+0x36a>
 8016b66:	2306      	movs	r3, #6
 8016b68:	7023      	strb	r3, [r4, #0]
 8016b6a:	e76c      	b.n	8016a46 <uxr_read_framed_msg+0x22>
 8016b6c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8016b70:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8016b74:	4298      	cmp	r0, r3
 8016b76:	f000 80c6 	beq.w	8016d06 <uxr_read_framed_msg+0x2e2>
 8016b7a:	18e2      	adds	r2, r4, r3
 8016b7c:	7891      	ldrb	r1, [r2, #2]
 8016b7e:	297d      	cmp	r1, #125	; 0x7d
 8016b80:	f000 8193 	beq.w	8016eaa <uxr_read_framed_msg+0x486>
 8016b84:	3301      	adds	r3, #1
 8016b86:	202a      	movs	r0, #42	; 0x2a
 8016b88:	297e      	cmp	r1, #126	; 0x7e
 8016b8a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8016b8e:	fba5 c202 	umull	ip, r2, r5, r2
 8016b92:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016b96:	fb00 3312 	mls	r3, r0, r2, r3
 8016b9a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016b9e:	f000 81d0 	beq.w	8016f42 <uxr_read_framed_msg+0x51e>
 8016ba2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8016ba4:	2000      	movs	r0, #0
 8016ba6:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8016baa:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016bac:	8660      	strh	r0, [r4, #50]	; 0x32
 8016bae:	b29b      	uxth	r3, r3
 8016bb0:	86e0      	strh	r0, [r4, #54]	; 0x36
 8016bb2:	428b      	cmp	r3, r1
 8016bb4:	8623      	strh	r3, [r4, #48]	; 0x30
 8016bb6:	f240 80e2 	bls.w	8016d7e <uxr_read_framed_msg+0x35a>
 8016bba:	7020      	strb	r0, [r4, #0]
 8016bbc:	b003      	add	sp, #12
 8016bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bc2:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8016bc6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8016bca:	4298      	cmp	r0, r3
 8016bcc:	f000 80aa 	beq.w	8016d24 <uxr_read_framed_msg+0x300>
 8016bd0:	18e2      	adds	r2, r4, r3
 8016bd2:	7891      	ldrb	r1, [r2, #2]
 8016bd4:	297d      	cmp	r1, #125	; 0x7d
 8016bd6:	f000 8186 	beq.w	8016ee6 <uxr_read_framed_msg+0x4c2>
 8016bda:	3301      	adds	r3, #1
 8016bdc:	202a      	movs	r0, #42	; 0x2a
 8016bde:	297e      	cmp	r1, #126	; 0x7e
 8016be0:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8016be4:	fba5 c202 	umull	ip, r2, r5, r2
 8016be8:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016bec:	fb00 3312 	mls	r3, r0, r2, r3
 8016bf0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016bf4:	f000 8195 	beq.w	8016f22 <uxr_read_framed_msg+0x4fe>
 8016bf8:	2304      	movs	r3, #4
 8016bfa:	8621      	strh	r1, [r4, #48]	; 0x30
 8016bfc:	7023      	strb	r3, [r4, #0]
 8016bfe:	e722      	b.n	8016a46 <uxr_read_framed_msg+0x22>
 8016c00:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8016c04:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8016c08:	4290      	cmp	r0, r2
 8016c0a:	f000 80b4 	beq.w	8016d76 <uxr_read_framed_msg+0x352>
 8016c0e:	18a3      	adds	r3, r4, r2
 8016c10:	7899      	ldrb	r1, [r3, #2]
 8016c12:	297d      	cmp	r1, #125	; 0x7d
 8016c14:	f000 8107 	beq.w	8016e26 <uxr_read_framed_msg+0x402>
 8016c18:	3201      	adds	r2, #1
 8016c1a:	232a      	movs	r3, #42	; 0x2a
 8016c1c:	297e      	cmp	r1, #126	; 0x7e
 8016c1e:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8016c22:	fba5 c000 	umull	ip, r0, r5, r0
 8016c26:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8016c2a:	fb03 2210 	mls	r2, r3, r0, r2
 8016c2e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8016c32:	f000 818a 	beq.w	8016f4a <uxr_read_framed_msg+0x526>
 8016c36:	7863      	ldrb	r3, [r4, #1]
 8016c38:	428b      	cmp	r3, r1
 8016c3a:	bf0c      	ite	eq
 8016c3c:	2303      	moveq	r3, #3
 8016c3e:	2300      	movne	r3, #0
 8016c40:	7023      	strb	r3, [r4, #0]
 8016c42:	e700      	b.n	8016a46 <uxr_read_framed_msg+0x22>
 8016c44:	2300      	movs	r3, #0
 8016c46:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8016c4a:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8016c4e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8016c52:	4299      	cmp	r1, r3
 8016c54:	d06a      	beq.n	8016d2c <uxr_read_framed_msg+0x308>
 8016c56:	18e2      	adds	r2, r4, r3
 8016c58:	7890      	ldrb	r0, [r2, #2]
 8016c5a:	287d      	cmp	r0, #125	; 0x7d
 8016c5c:	f000 8100 	beq.w	8016e60 <uxr_read_framed_msg+0x43c>
 8016c60:	3301      	adds	r3, #1
 8016c62:	212a      	movs	r1, #42	; 0x2a
 8016c64:	287e      	cmp	r0, #126	; 0x7e
 8016c66:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8016c6a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8016c6e:	fba5 c202 	umull	ip, r2, r5, r2
 8016c72:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016c76:	fb01 3312 	mls	r3, r1, r2, r3
 8016c7a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016c7e:	d055      	beq.n	8016d2c <uxr_read_framed_msg+0x308>
 8016c80:	2302      	movs	r3, #2
 8016c82:	7023      	strb	r3, [r4, #0]
 8016c84:	e6df      	b.n	8016a46 <uxr_read_framed_msg+0x22>
 8016c86:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 8016c8a:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8016c8e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8016c92:	1c5a      	adds	r2, r3, #1
 8016c94:	459c      	cmp	ip, r3
 8016c96:	eb04 0103 	add.w	r1, r4, r3
 8016c9a:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8016c9e:	f43f af04 	beq.w	8016aaa <uxr_read_framed_msg+0x86>
 8016ca2:	fba5 0303 	umull	r0, r3, r5, r3
 8016ca6:	7889      	ldrb	r1, [r1, #2]
 8016ca8:	089b      	lsrs	r3, r3, #2
 8016caa:	297e      	cmp	r1, #126	; 0x7e
 8016cac:	fb0e 2313 	mls	r3, lr, r3, r2
 8016cb0:	b2db      	uxtb	r3, r3
 8016cb2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016cb6:	d1ec      	bne.n	8016c92 <uxr_read_framed_msg+0x26e>
 8016cb8:	2301      	movs	r3, #1
 8016cba:	7023      	strb	r3, [r4, #0]
 8016cbc:	e6c3      	b.n	8016a46 <uxr_read_framed_msg+0x22>
 8016cbe:	1c50      	adds	r0, r2, #1
 8016cc0:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8016cc4:	3202      	adds	r2, #2
 8016cc6:	0841      	lsrs	r1, r0, #1
 8016cc8:	fba5 c101 	umull	ip, r1, r5, r1
 8016ccc:	0889      	lsrs	r1, r1, #2
 8016cce:	fb0b 0111 	mls	r1, fp, r1, r0
 8016cd2:	1860      	adds	r0, r4, r1
 8016cd4:	b2c9      	uxtb	r1, r1
 8016cd6:	458a      	cmp	sl, r1
 8016cd8:	f43f af42 	beq.w	8016b60 <uxr_read_framed_msg+0x13c>
 8016cdc:	0851      	lsrs	r1, r2, #1
 8016cde:	7880      	ldrb	r0, [r0, #2]
 8016ce0:	fba5 a101 	umull	sl, r1, r5, r1
 8016ce4:	287e      	cmp	r0, #126	; 0x7e
 8016ce6:	f080 0c20 	eor.w	ip, r0, #32
 8016cea:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8016cee:	fb0b 2211 	mls	r2, fp, r1, r2
 8016cf2:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8016cf6:	f47f af14 	bne.w	8016b22 <uxr_read_framed_msg+0xfe>
 8016cfa:	459e      	cmp	lr, r3
 8016cfc:	f43f af33 	beq.w	8016b66 <uxr_read_framed_msg+0x142>
 8016d00:	2301      	movs	r3, #1
 8016d02:	7023      	strb	r3, [r4, #0]
 8016d04:	e69f      	b.n	8016a46 <uxr_read_framed_msg+0x22>
 8016d06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d08:	9300      	str	r3, [sp, #0]
 8016d0a:	2301      	movs	r3, #1
 8016d0c:	9301      	str	r3, [sp, #4]
 8016d0e:	464a      	mov	r2, r9
 8016d10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d12:	4641      	mov	r1, r8
 8016d14:	4620      	mov	r0, r4
 8016d16:	f7ff fdf1 	bl	80168fc <uxr_framing_read_transport>
 8016d1a:	2800      	cmp	r0, #0
 8016d1c:	f43f aec5 	beq.w	8016aaa <uxr_read_framed_msg+0x86>
 8016d20:	7823      	ldrb	r3, [r4, #0]
 8016d22:	e690      	b.n	8016a46 <uxr_read_framed_msg+0x22>
 8016d24:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d26:	9300      	str	r3, [sp, #0]
 8016d28:	2302      	movs	r3, #2
 8016d2a:	e7ef      	b.n	8016d0c <uxr_read_framed_msg+0x2e8>
 8016d2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d2e:	464a      	mov	r2, r9
 8016d30:	4641      	mov	r1, r8
 8016d32:	4620      	mov	r0, r4
 8016d34:	9300      	str	r3, [sp, #0]
 8016d36:	2304      	movs	r3, #4
 8016d38:	9301      	str	r3, [sp, #4]
 8016d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d3c:	f7ff fdde 	bl	80168fc <uxr_framing_read_transport>
 8016d40:	2800      	cmp	r0, #0
 8016d42:	d1ed      	bne.n	8016d20 <uxr_read_framed_msg+0x2fc>
 8016d44:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8016d48:	2b7e      	cmp	r3, #126	; 0x7e
 8016d4a:	d0e9      	beq.n	8016d20 <uxr_read_framed_msg+0x2fc>
 8016d4c:	e6ad      	b.n	8016aaa <uxr_read_framed_msg+0x86>
 8016d4e:	bf00      	nop
 8016d50:	30c30c31 	.word	0x30c30c31
 8016d54:	0801cb20 	.word	0x0801cb20
 8016d58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d5a:	9300      	str	r3, [sp, #0]
 8016d5c:	2305      	movs	r3, #5
 8016d5e:	9301      	str	r3, [sp, #4]
 8016d60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016d62:	f7ff fdcb 	bl	80168fc <uxr_framing_read_transport>
 8016d66:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8016d6a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8016d6e:	429a      	cmp	r2, r3
 8016d70:	f43f ae9b 	beq.w	8016aaa <uxr_read_framed_msg+0x86>
 8016d74:	e664      	b.n	8016a40 <uxr_read_framed_msg+0x1c>
 8016d76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d78:	9300      	str	r3, [sp, #0]
 8016d7a:	2303      	movs	r3, #3
 8016d7c:	e7c6      	b.n	8016d0c <uxr_read_framed_msg+0x2e8>
 8016d7e:	2305      	movs	r3, #5
 8016d80:	7023      	strb	r3, [r4, #0]
 8016d82:	e660      	b.n	8016a46 <uxr_read_framed_msg+0x22>
 8016d84:	f43f aeef 	beq.w	8016b66 <uxr_read_framed_msg+0x142>
 8016d88:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8016d8c:	d094      	beq.n	8016cb8 <uxr_read_framed_msg+0x294>
 8016d8e:	ebae 0303 	sub.w	r3, lr, r3
 8016d92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016d94:	3302      	adds	r3, #2
 8016d96:	9200      	str	r2, [sp, #0]
 8016d98:	e7b8      	b.n	8016d0c <uxr_read_framed_msg+0x2e8>
 8016d9a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8016d9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016da0:	7013      	strb	r3, [r2, #0]
 8016da2:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8016da4:	b003      	add	sp, #12
 8016da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016daa:	1c59      	adds	r1, r3, #1
 8016dac:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8016db0:	084a      	lsrs	r2, r1, #1
 8016db2:	fba5 e202 	umull	lr, r2, r5, r2
 8016db6:	0892      	lsrs	r2, r2, #2
 8016db8:	fb0c 1212 	mls	r2, ip, r2, r1
 8016dbc:	b2d1      	uxtb	r1, r2
 8016dbe:	4288      	cmp	r0, r1
 8016dc0:	d0b0      	beq.n	8016d24 <uxr_read_framed_msg+0x300>
 8016dc2:	3302      	adds	r3, #2
 8016dc4:	4422      	add	r2, r4
 8016dc6:	7891      	ldrb	r1, [r2, #2]
 8016dc8:	085a      	lsrs	r2, r3, #1
 8016dca:	fba5 0202 	umull	r0, r2, r5, r2
 8016dce:	297e      	cmp	r1, #126	; 0x7e
 8016dd0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016dd4:	fb0c 3312 	mls	r3, ip, r2, r3
 8016dd8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016ddc:	f000 80a1 	beq.w	8016f22 <uxr_read_framed_msg+0x4fe>
 8016de0:	f081 0120 	eor.w	r1, r1, #32
 8016de4:	e680      	b.n	8016ae8 <uxr_read_framed_msg+0xc4>
 8016de6:	f103 0c01 	add.w	ip, r3, #1
 8016dea:	202a      	movs	r0, #42	; 0x2a
 8016dec:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016df0:	fba5 e202 	umull	lr, r2, r5, r2
 8016df4:	0892      	lsrs	r2, r2, #2
 8016df6:	fb00 c212 	mls	r2, r0, r2, ip
 8016dfa:	fa5f fc82 	uxtb.w	ip, r2
 8016dfe:	4561      	cmp	r1, ip
 8016e00:	d081      	beq.n	8016d06 <uxr_read_framed_msg+0x2e2>
 8016e02:	3302      	adds	r3, #2
 8016e04:	4422      	add	r2, r4
 8016e06:	0859      	lsrs	r1, r3, #1
 8016e08:	7892      	ldrb	r2, [r2, #2]
 8016e0a:	fba5 c101 	umull	ip, r1, r5, r1
 8016e0e:	2a7e      	cmp	r2, #126	; 0x7e
 8016e10:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8016e14:	fb00 3311 	mls	r3, r0, r1, r3
 8016e18:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016e1c:	f000 8091 	beq.w	8016f42 <uxr_read_framed_msg+0x51e>
 8016e20:	f082 0220 	eor.w	r2, r2, #32
 8016e24:	e636      	b.n	8016a94 <uxr_read_framed_msg+0x70>
 8016e26:	1c51      	adds	r1, r2, #1
 8016e28:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8016e2c:	084b      	lsrs	r3, r1, #1
 8016e2e:	fba5 e303 	umull	lr, r3, r5, r3
 8016e32:	089b      	lsrs	r3, r3, #2
 8016e34:	fb0c 1313 	mls	r3, ip, r3, r1
 8016e38:	b2d9      	uxtb	r1, r3
 8016e3a:	4288      	cmp	r0, r1
 8016e3c:	d09b      	beq.n	8016d76 <uxr_read_framed_msg+0x352>
 8016e3e:	3202      	adds	r2, #2
 8016e40:	4423      	add	r3, r4
 8016e42:	0850      	lsrs	r0, r2, #1
 8016e44:	789b      	ldrb	r3, [r3, #2]
 8016e46:	fba5 1000 	umull	r1, r0, r5, r0
 8016e4a:	2b7e      	cmp	r3, #126	; 0x7e
 8016e4c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8016e50:	fb0c 2210 	mls	r2, ip, r0, r2
 8016e54:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8016e58:	d077      	beq.n	8016f4a <uxr_read_framed_msg+0x526>
 8016e5a:	f083 0120 	eor.w	r1, r3, #32
 8016e5e:	e6ea      	b.n	8016c36 <uxr_read_framed_msg+0x212>
 8016e60:	f103 0c01 	add.w	ip, r3, #1
 8016e64:	202a      	movs	r0, #42	; 0x2a
 8016e66:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8016e6a:	fba5 e202 	umull	lr, r2, r5, r2
 8016e6e:	0892      	lsrs	r2, r2, #2
 8016e70:	fb00 c212 	mls	r2, r0, r2, ip
 8016e74:	fa5f fc82 	uxtb.w	ip, r2
 8016e78:	4561      	cmp	r1, ip
 8016e7a:	f43f af57 	beq.w	8016d2c <uxr_read_framed_msg+0x308>
 8016e7e:	3302      	adds	r3, #2
 8016e80:	4422      	add	r2, r4
 8016e82:	7891      	ldrb	r1, [r2, #2]
 8016e84:	085a      	lsrs	r2, r3, #1
 8016e86:	fba5 c202 	umull	ip, r2, r5, r2
 8016e8a:	297e      	cmp	r1, #126	; 0x7e
 8016e8c:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8016e90:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016e94:	fb00 3312 	mls	r3, r0, r2, r3
 8016e98:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016e9c:	f43f af46 	beq.w	8016d2c <uxr_read_framed_msg+0x308>
 8016ea0:	f081 0120 	eor.w	r1, r1, #32
 8016ea4:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8016ea8:	e6ea      	b.n	8016c80 <uxr_read_framed_msg+0x25c>
 8016eaa:	1c59      	adds	r1, r3, #1
 8016eac:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8016eb0:	084a      	lsrs	r2, r1, #1
 8016eb2:	fba5 e202 	umull	lr, r2, r5, r2
 8016eb6:	0892      	lsrs	r2, r2, #2
 8016eb8:	fb0c 1212 	mls	r2, ip, r2, r1
 8016ebc:	b2d1      	uxtb	r1, r2
 8016ebe:	4288      	cmp	r0, r1
 8016ec0:	f43f af21 	beq.w	8016d06 <uxr_read_framed_msg+0x2e2>
 8016ec4:	3302      	adds	r3, #2
 8016ec6:	4422      	add	r2, r4
 8016ec8:	7891      	ldrb	r1, [r2, #2]
 8016eca:	085a      	lsrs	r2, r3, #1
 8016ecc:	fba5 0202 	umull	r0, r2, r5, r2
 8016ed0:	297e      	cmp	r1, #126	; 0x7e
 8016ed2:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016ed6:	fb0c 3312 	mls	r3, ip, r2, r3
 8016eda:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016ede:	d030      	beq.n	8016f42 <uxr_read_framed_msg+0x51e>
 8016ee0:	f081 0120 	eor.w	r1, r1, #32
 8016ee4:	e65d      	b.n	8016ba2 <uxr_read_framed_msg+0x17e>
 8016ee6:	1c59      	adds	r1, r3, #1
 8016ee8:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8016eec:	084a      	lsrs	r2, r1, #1
 8016eee:	fba5 e202 	umull	lr, r2, r5, r2
 8016ef2:	0892      	lsrs	r2, r2, #2
 8016ef4:	fb0c 1212 	mls	r2, ip, r2, r1
 8016ef8:	b2d1      	uxtb	r1, r2
 8016efa:	4288      	cmp	r0, r1
 8016efc:	f43f af12 	beq.w	8016d24 <uxr_read_framed_msg+0x300>
 8016f00:	3302      	adds	r3, #2
 8016f02:	4422      	add	r2, r4
 8016f04:	7891      	ldrb	r1, [r2, #2]
 8016f06:	085a      	lsrs	r2, r3, #1
 8016f08:	fba5 0202 	umull	r0, r2, r5, r2
 8016f0c:	297e      	cmp	r1, #126	; 0x7e
 8016f0e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8016f12:	fb0c 3312 	mls	r3, ip, r2, r3
 8016f16:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8016f1a:	d002      	beq.n	8016f22 <uxr_read_framed_msg+0x4fe>
 8016f1c:	f081 0120 	eor.w	r1, r1, #32
 8016f20:	e66a      	b.n	8016bf8 <uxr_read_framed_msg+0x1d4>
 8016f22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f24:	9300      	str	r3, [sp, #0]
 8016f26:	2302      	movs	r3, #2
 8016f28:	9301      	str	r3, [sp, #4]
 8016f2a:	464a      	mov	r2, r9
 8016f2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016f2e:	4641      	mov	r1, r8
 8016f30:	4620      	mov	r0, r4
 8016f32:	f7ff fce3 	bl	80168fc <uxr_framing_read_transport>
 8016f36:	2800      	cmp	r0, #0
 8016f38:	f47f aef2 	bne.w	8016d20 <uxr_read_framed_msg+0x2fc>
 8016f3c:	2301      	movs	r3, #1
 8016f3e:	7023      	strb	r3, [r4, #0]
 8016f40:	e581      	b.n	8016a46 <uxr_read_framed_msg+0x22>
 8016f42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f44:	9300      	str	r3, [sp, #0]
 8016f46:	2301      	movs	r3, #1
 8016f48:	e7ee      	b.n	8016f28 <uxr_read_framed_msg+0x504>
 8016f4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016f4c:	9300      	str	r3, [sp, #0]
 8016f4e:	2303      	movs	r3, #3
 8016f50:	e7ea      	b.n	8016f28 <uxr_read_framed_msg+0x504>
 8016f52:	bf00      	nop

08016f54 <uxr_stream_id>:
 8016f54:	2901      	cmp	r1, #1
 8016f56:	4684      	mov	ip, r0
 8016f58:	b500      	push	{lr}
 8016f5a:	b083      	sub	sp, #12
 8016f5c:	d01f      	beq.n	8016f9e <uxr_stream_id+0x4a>
 8016f5e:	2902      	cmp	r1, #2
 8016f60:	f04f 0e00 	mov.w	lr, #0
 8016f64:	d020      	beq.n	8016fa8 <uxr_stream_id+0x54>
 8016f66:	2300      	movs	r3, #0
 8016f68:	2000      	movs	r0, #0
 8016f6a:	f36e 0307 	bfi	r3, lr, #0, #8
 8016f6e:	f36c 230f 	bfi	r3, ip, #8, #8
 8016f72:	f361 4317 	bfi	r3, r1, #16, #8
 8016f76:	f362 631f 	bfi	r3, r2, #24, #8
 8016f7a:	fa5f fc83 	uxtb.w	ip, r3
 8016f7e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8016f82:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8016f86:	0e1b      	lsrs	r3, r3, #24
 8016f88:	f36c 0007 	bfi	r0, ip, #0, #8
 8016f8c:	f361 200f 	bfi	r0, r1, #8, #8
 8016f90:	f362 4017 	bfi	r0, r2, #16, #8
 8016f94:	f363 601f 	bfi	r0, r3, #24, #8
 8016f98:	b003      	add	sp, #12
 8016f9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8016f9e:	f100 0e01 	add.w	lr, r0, #1
 8016fa2:	fa5f fe8e 	uxtb.w	lr, lr
 8016fa6:	e7de      	b.n	8016f66 <uxr_stream_id+0x12>
 8016fa8:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 8016fac:	e7db      	b.n	8016f66 <uxr_stream_id+0x12>
 8016fae:	bf00      	nop

08016fb0 <uxr_stream_id_from_raw>:
 8016fb0:	b082      	sub	sp, #8
 8016fb2:	b130      	cbz	r0, 8016fc2 <uxr_stream_id_from_raw+0x12>
 8016fb4:	0603      	lsls	r3, r0, #24
 8016fb6:	d421      	bmi.n	8016ffc <uxr_stream_id_from_raw+0x4c>
 8016fb8:	1e42      	subs	r2, r0, #1
 8016fba:	f04f 0c01 	mov.w	ip, #1
 8016fbe:	b2d2      	uxtb	r2, r2
 8016fc0:	e001      	b.n	8016fc6 <uxr_stream_id_from_raw+0x16>
 8016fc2:	4684      	mov	ip, r0
 8016fc4:	4602      	mov	r2, r0
 8016fc6:	2300      	movs	r3, #0
 8016fc8:	f360 0307 	bfi	r3, r0, #0, #8
 8016fcc:	2000      	movs	r0, #0
 8016fce:	f362 230f 	bfi	r3, r2, #8, #8
 8016fd2:	f36c 4317 	bfi	r3, ip, #16, #8
 8016fd6:	f361 631f 	bfi	r3, r1, #24, #8
 8016fda:	fa5f fc83 	uxtb.w	ip, r3
 8016fde:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8016fe2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8016fe6:	0e1b      	lsrs	r3, r3, #24
 8016fe8:	f36c 0007 	bfi	r0, ip, #0, #8
 8016fec:	f361 200f 	bfi	r0, r1, #8, #8
 8016ff0:	f362 4017 	bfi	r0, r2, #16, #8
 8016ff4:	f363 601f 	bfi	r0, r3, #24, #8
 8016ff8:	b002      	add	sp, #8
 8016ffa:	4770      	bx	lr
 8016ffc:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 8017000:	f04f 0c02 	mov.w	ip, #2
 8017004:	e7df      	b.n	8016fc6 <uxr_stream_id_from_raw+0x16>
 8017006:	bf00      	nop

08017008 <uxr_init_stream_storage>:
 8017008:	2300      	movs	r3, #0
 801700a:	7403      	strb	r3, [r0, #16]
 801700c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8017010:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8017014:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8017018:	4770      	bx	lr
 801701a:	bf00      	nop

0801701c <uxr_reset_stream_storage>:
 801701c:	b570      	push	{r4, r5, r6, lr}
 801701e:	7c03      	ldrb	r3, [r0, #16]
 8017020:	4604      	mov	r4, r0
 8017022:	b14b      	cbz	r3, 8017038 <uxr_reset_stream_storage+0x1c>
 8017024:	4606      	mov	r6, r0
 8017026:	2500      	movs	r5, #0
 8017028:	4630      	mov	r0, r6
 801702a:	3501      	adds	r5, #1
 801702c:	f002 faf2 	bl	8019614 <uxr_reset_output_best_effort_stream>
 8017030:	7c23      	ldrb	r3, [r4, #16]
 8017032:	3610      	adds	r6, #16
 8017034:	42ab      	cmp	r3, r5
 8017036:	d8f7      	bhi.n	8017028 <uxr_reset_stream_storage+0xc>
 8017038:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801703c:	b15b      	cbz	r3, 8017056 <uxr_reset_stream_storage+0x3a>
 801703e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017042:	2500      	movs	r5, #0
 8017044:	4630      	mov	r0, r6
 8017046:	3501      	adds	r5, #1
 8017048:	f002 f8ea 	bl	8019220 <uxr_reset_input_best_effort_stream>
 801704c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017050:	3602      	adds	r6, #2
 8017052:	42ab      	cmp	r3, r5
 8017054:	d8f6      	bhi.n	8017044 <uxr_reset_stream_storage+0x28>
 8017056:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801705a:	b15b      	cbz	r3, 8017074 <uxr_reset_stream_storage+0x58>
 801705c:	f104 0618 	add.w	r6, r4, #24
 8017060:	2500      	movs	r5, #0
 8017062:	4630      	mov	r0, r6
 8017064:	3501      	adds	r5, #1
 8017066:	f002 fb83 	bl	8019770 <uxr_reset_output_reliable_stream>
 801706a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801706e:	3628      	adds	r6, #40	; 0x28
 8017070:	42ab      	cmp	r3, r5
 8017072:	d8f6      	bhi.n	8017062 <uxr_reset_stream_storage+0x46>
 8017074:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8017078:	b15b      	cbz	r3, 8017092 <uxr_reset_stream_storage+0x76>
 801707a:	f104 0648 	add.w	r6, r4, #72	; 0x48
 801707e:	2500      	movs	r5, #0
 8017080:	4630      	mov	r0, r6
 8017082:	3501      	adds	r5, #1
 8017084:	f002 f938 	bl	80192f8 <uxr_reset_input_reliable_stream>
 8017088:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801708c:	3618      	adds	r6, #24
 801708e:	42ab      	cmp	r3, r5
 8017090:	d8f6      	bhi.n	8017080 <uxr_reset_stream_storage+0x64>
 8017092:	bd70      	pop	{r4, r5, r6, pc}

08017094 <uxr_add_output_best_effort_buffer>:
 8017094:	b510      	push	{r4, lr}
 8017096:	7c04      	ldrb	r4, [r0, #16]
 8017098:	b082      	sub	sp, #8
 801709a:	f104 0c01 	add.w	ip, r4, #1
 801709e:	f880 c010 	strb.w	ip, [r0, #16]
 80170a2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80170a6:	f002 faab 	bl	8019600 <uxr_init_output_best_effort_stream>
 80170aa:	2201      	movs	r2, #1
 80170ac:	4620      	mov	r0, r4
 80170ae:	4611      	mov	r1, r2
 80170b0:	b002      	add	sp, #8
 80170b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80170b6:	f7ff bf4d 	b.w	8016f54 <uxr_stream_id>
 80170ba:	bf00      	nop

080170bc <uxr_add_output_reliable_buffer>:
 80170bc:	b510      	push	{r4, lr}
 80170be:	b084      	sub	sp, #16
 80170c0:	4684      	mov	ip, r0
 80170c2:	2028      	movs	r0, #40	; 0x28
 80170c4:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80170c8:	9400      	str	r4, [sp, #0]
 80170ca:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 80170ce:	fb00 c004 	mla	r0, r0, r4, ip
 80170d2:	f104 0e01 	add.w	lr, r4, #1
 80170d6:	3018      	adds	r0, #24
 80170d8:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 80170dc:	f002 fb10 	bl	8019700 <uxr_init_output_reliable_stream>
 80170e0:	2201      	movs	r2, #1
 80170e2:	2102      	movs	r1, #2
 80170e4:	4620      	mov	r0, r4
 80170e6:	b004      	add	sp, #16
 80170e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80170ec:	f7ff bf32 	b.w	8016f54 <uxr_stream_id>

080170f0 <uxr_add_input_best_effort_buffer>:
 80170f0:	b510      	push	{r4, lr}
 80170f2:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 80170f6:	b082      	sub	sp, #8
 80170f8:	1c62      	adds	r2, r4, #1
 80170fa:	f104 0321 	add.w	r3, r4, #33	; 0x21
 80170fe:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8017102:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8017106:	f002 f887 	bl	8019218 <uxr_init_input_best_effort_stream>
 801710a:	2200      	movs	r2, #0
 801710c:	2101      	movs	r1, #1
 801710e:	4620      	mov	r0, r4
 8017110:	b002      	add	sp, #8
 8017112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017116:	f7ff bf1d 	b.w	8016f54 <uxr_stream_id>
 801711a:	bf00      	nop

0801711c <uxr_add_input_reliable_buffer>:
 801711c:	b510      	push	{r4, lr}
 801711e:	b084      	sub	sp, #16
 8017120:	4684      	mov	ip, r0
 8017122:	2018      	movs	r0, #24
 8017124:	9c06      	ldr	r4, [sp, #24]
 8017126:	9400      	str	r4, [sp, #0]
 8017128:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 801712c:	fb00 c004 	mla	r0, r0, r4, ip
 8017130:	f104 0e01 	add.w	lr, r4, #1
 8017134:	3048      	adds	r0, #72	; 0x48
 8017136:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 801713a:	f002 f8b7 	bl	80192ac <uxr_init_input_reliable_stream>
 801713e:	2200      	movs	r2, #0
 8017140:	2102      	movs	r1, #2
 8017142:	4620      	mov	r0, r4
 8017144:	b004      	add	sp, #16
 8017146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801714a:	f7ff bf03 	b.w	8016f54 <uxr_stream_id>
 801714e:	bf00      	nop

08017150 <uxr_get_output_best_effort_stream>:
 8017150:	7c03      	ldrb	r3, [r0, #16]
 8017152:	428b      	cmp	r3, r1
 8017154:	bf8c      	ite	hi
 8017156:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801715a:	2000      	movls	r0, #0
 801715c:	4770      	bx	lr
 801715e:	bf00      	nop

08017160 <uxr_get_output_reliable_stream>:
 8017160:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8017164:	428b      	cmp	r3, r1
 8017166:	d904      	bls.n	8017172 <uxr_get_output_reliable_stream+0x12>
 8017168:	2328      	movs	r3, #40	; 0x28
 801716a:	fb03 0001 	mla	r0, r3, r1, r0
 801716e:	3018      	adds	r0, #24
 8017170:	4770      	bx	lr
 8017172:	2000      	movs	r0, #0
 8017174:	4770      	bx	lr
 8017176:	bf00      	nop

08017178 <uxr_get_input_best_effort_stream>:
 8017178:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 801717c:	428b      	cmp	r3, r1
 801717e:	d903      	bls.n	8017188 <uxr_get_input_best_effort_stream+0x10>
 8017180:	3121      	adds	r1, #33	; 0x21
 8017182:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8017186:	4770      	bx	lr
 8017188:	2000      	movs	r0, #0
 801718a:	4770      	bx	lr

0801718c <uxr_get_input_reliable_stream>:
 801718c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8017190:	428b      	cmp	r3, r1
 8017192:	d904      	bls.n	801719e <uxr_get_input_reliable_stream+0x12>
 8017194:	2318      	movs	r3, #24
 8017196:	fb03 0001 	mla	r0, r3, r1, r0
 801719a:	3048      	adds	r0, #72	; 0x48
 801719c:	4770      	bx	lr
 801719e:	2000      	movs	r0, #0
 80171a0:	4770      	bx	lr
 80171a2:	bf00      	nop

080171a4 <uxr_output_streams_confirmed>:
 80171a4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80171a8:	b183      	cbz	r3, 80171cc <uxr_output_streams_confirmed+0x28>
 80171aa:	b570      	push	{r4, r5, r6, lr}
 80171ac:	4606      	mov	r6, r0
 80171ae:	f100 0518 	add.w	r5, r0, #24
 80171b2:	2400      	movs	r4, #0
 80171b4:	e000      	b.n	80171b8 <uxr_output_streams_confirmed+0x14>
 80171b6:	b140      	cbz	r0, 80171ca <uxr_output_streams_confirmed+0x26>
 80171b8:	4628      	mov	r0, r5
 80171ba:	3401      	adds	r4, #1
 80171bc:	f002 fd4c 	bl	8019c58 <uxr_is_output_up_to_date>
 80171c0:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 80171c4:	3528      	adds	r5, #40	; 0x28
 80171c6:	42a3      	cmp	r3, r4
 80171c8:	d8f5      	bhi.n	80171b6 <uxr_output_streams_confirmed+0x12>
 80171ca:	bd70      	pop	{r4, r5, r6, pc}
 80171cc:	2001      	movs	r0, #1
 80171ce:	4770      	bx	lr

080171d0 <uxr_buffer_submessage_header>:
 80171d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171d2:	460e      	mov	r6, r1
 80171d4:	2104      	movs	r1, #4
 80171d6:	4604      	mov	r4, r0
 80171d8:	4615      	mov	r5, r2
 80171da:	461f      	mov	r7, r3
 80171dc:	f7f7 fe20 	bl	800ee20 <ucdr_align_to>
 80171e0:	2301      	movs	r3, #1
 80171e2:	4631      	mov	r1, r6
 80171e4:	4620      	mov	r0, r4
 80171e6:	ea47 0203 	orr.w	r2, r7, r3
 80171ea:	7523      	strb	r3, [r4, #20]
 80171ec:	462b      	mov	r3, r5
 80171ee:	f000 fa29 	bl	8017644 <uxr_serialize_submessage_header>
 80171f2:	4620      	mov	r0, r4
 80171f4:	f7f7 fe2a 	bl	800ee4c <ucdr_buffer_remaining>
 80171f8:	42a8      	cmp	r0, r5
 80171fa:	bf34      	ite	cc
 80171fc:	2000      	movcc	r0, #0
 80171fe:	2001      	movcs	r0, #1
 8017200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017202:	bf00      	nop

08017204 <uxr_read_submessage_header>:
 8017204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017208:	4604      	mov	r4, r0
 801720a:	460d      	mov	r5, r1
 801720c:	2104      	movs	r1, #4
 801720e:	4616      	mov	r6, r2
 8017210:	4698      	mov	r8, r3
 8017212:	f7f7 fe05 	bl	800ee20 <ucdr_align_to>
 8017216:	4620      	mov	r0, r4
 8017218:	f7f7 fe18 	bl	800ee4c <ucdr_buffer_remaining>
 801721c:	2803      	cmp	r0, #3
 801721e:	bf8c      	ite	hi
 8017220:	2701      	movhi	r7, #1
 8017222:	2700      	movls	r7, #0
 8017224:	d802      	bhi.n	801722c <uxr_read_submessage_header+0x28>
 8017226:	4638      	mov	r0, r7
 8017228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801722c:	4633      	mov	r3, r6
 801722e:	4642      	mov	r2, r8
 8017230:	4620      	mov	r0, r4
 8017232:	4629      	mov	r1, r5
 8017234:	f000 fa1a 	bl	801766c <uxr_deserialize_submessage_header>
 8017238:	f898 3000 	ldrb.w	r3, [r8]
 801723c:	4638      	mov	r0, r7
 801723e:	f003 0201 	and.w	r2, r3, #1
 8017242:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8017246:	f888 3000 	strb.w	r3, [r8]
 801724a:	7522      	strb	r2, [r4, #20]
 801724c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017250 <uxr_submessage_padding>:
 8017250:	f010 0003 	ands.w	r0, r0, #3
 8017254:	bf18      	it	ne
 8017256:	f1c0 0004 	rsbne	r0, r0, #4
 801725a:	4770      	bx	lr

0801725c <uxr_millis>:
 801725c:	b510      	push	{r4, lr}
 801725e:	b084      	sub	sp, #16
 8017260:	2001      	movs	r0, #1
 8017262:	4669      	mov	r1, sp
 8017264:	f7ea fff0 	bl	8002248 <clock_gettime>
 8017268:	4908      	ldr	r1, [pc, #32]	; (801728c <uxr_millis+0x30>)
 801726a:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 801726e:	fba0 0301 	umull	r0, r3, r0, r1
 8017272:	1900      	adds	r0, r0, r4
 8017274:	fb01 3102 	mla	r1, r1, r2, r3
 8017278:	4a05      	ldr	r2, [pc, #20]	; (8017290 <uxr_millis+0x34>)
 801727a:	f04f 0300 	mov.w	r3, #0
 801727e:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8017282:	f7e9 f845 	bl	8000310 <__aeabi_ldivmod>
 8017286:	b004      	add	sp, #16
 8017288:	bd10      	pop	{r4, pc}
 801728a:	bf00      	nop
 801728c:	3b9aca00 	.word	0x3b9aca00
 8017290:	000f4240 	.word	0x000f4240

08017294 <uxr_nanos>:
 8017294:	b510      	push	{r4, lr}
 8017296:	b084      	sub	sp, #16
 8017298:	2001      	movs	r0, #1
 801729a:	4669      	mov	r1, sp
 801729c:	f7ea ffd4 	bl	8002248 <clock_gettime>
 80172a0:	4a06      	ldr	r2, [pc, #24]	; (80172bc <uxr_nanos+0x28>)
 80172a2:	9800      	ldr	r0, [sp, #0]
 80172a4:	9902      	ldr	r1, [sp, #8]
 80172a6:	fba0 0302 	umull	r0, r3, r0, r2
 80172aa:	9c01      	ldr	r4, [sp, #4]
 80172ac:	1840      	adds	r0, r0, r1
 80172ae:	fb02 3304 	mla	r3, r2, r4, r3
 80172b2:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80172b6:	b004      	add	sp, #16
 80172b8:	bd10      	pop	{r4, pc}
 80172ba:	bf00      	nop
 80172bc:	3b9aca00 	.word	0x3b9aca00

080172c0 <on_full_output_buffer_fragmented>:
 80172c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172c4:	460c      	mov	r4, r1
 80172c6:	b08a      	sub	sp, #40	; 0x28
 80172c8:	4606      	mov	r6, r0
 80172ca:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 80172ce:	f104 0008 	add.w	r0, r4, #8
 80172d2:	f7ff ff45 	bl	8017160 <uxr_get_output_reliable_stream>
 80172d6:	4605      	mov	r5, r0
 80172d8:	f002 fcc8 	bl	8019c6c <get_available_free_slots>
 80172dc:	b968      	cbnz	r0, 80172fa <on_full_output_buffer_fragmented+0x3a>
 80172de:	4620      	mov	r0, r4
 80172e0:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 80172e4:	4798      	blx	r3
 80172e6:	b918      	cbnz	r0, 80172f0 <on_full_output_buffer_fragmented+0x30>
 80172e8:	2001      	movs	r0, #1
 80172ea:	b00a      	add	sp, #40	; 0x28
 80172ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172f0:	4628      	mov	r0, r5
 80172f2:	f002 fcbb 	bl	8019c6c <get_available_free_slots>
 80172f6:	2800      	cmp	r0, #0
 80172f8:	d0f6      	beq.n	80172e8 <on_full_output_buffer_fragmented+0x28>
 80172fa:	8929      	ldrh	r1, [r5, #8]
 80172fc:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8017300:	89eb      	ldrh	r3, [r5, #14]
 8017302:	7b28      	ldrb	r0, [r5, #12]
 8017304:	686f      	ldr	r7, [r5, #4]
 8017306:	1a12      	subs	r2, r2, r0
 8017308:	fbb3 f0f1 	udiv	r0, r3, r1
 801730c:	fbb7 f7f1 	udiv	r7, r7, r1
 8017310:	fb01 3110 	mls	r1, r1, r0, r3
 8017314:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8017318:	b289      	uxth	r1, r1
 801731a:	fb07 f101 	mul.w	r1, r7, r1
 801731e:	3f04      	subs	r7, #4
 8017320:	443a      	add	r2, r7
 8017322:	3104      	adds	r1, #4
 8017324:	fa1f f882 	uxth.w	r8, r2
 8017328:	463a      	mov	r2, r7
 801732a:	eba3 0308 	sub.w	r3, r3, r8
 801732e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8017332:	682b      	ldr	r3, [r5, #0]
 8017334:	4419      	add	r1, r3
 8017336:	2300      	movs	r3, #0
 8017338:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801733c:	9000      	str	r0, [sp, #0]
 801733e:	a802      	add	r0, sp, #8
 8017340:	f7f7 fd40 	bl	800edc4 <ucdr_init_buffer_origin_offset>
 8017344:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8017348:	f102 0308 	add.w	r3, r2, #8
 801734c:	42bb      	cmp	r3, r7
 801734e:	d927      	bls.n	80173a0 <on_full_output_buffer_fragmented+0xe0>
 8017350:	4642      	mov	r2, r8
 8017352:	2300      	movs	r3, #0
 8017354:	210d      	movs	r1, #13
 8017356:	a802      	add	r0, sp, #8
 8017358:	f7ff ff3a 	bl	80171d0 <uxr_buffer_submessage_header>
 801735c:	8929      	ldrh	r1, [r5, #8]
 801735e:	89eb      	ldrh	r3, [r5, #14]
 8017360:	686a      	ldr	r2, [r5, #4]
 8017362:	fbb3 f0f1 	udiv	r0, r3, r1
 8017366:	fbb2 f2f1 	udiv	r2, r2, r1
 801736a:	fb01 3310 	mls	r3, r1, r0, r3
 801736e:	b29b      	uxth	r3, r3
 8017370:	fb02 f303 	mul.w	r3, r2, r3
 8017374:	682a      	ldr	r2, [r5, #0]
 8017376:	50d7      	str	r7, [r2, r3]
 8017378:	2101      	movs	r1, #1
 801737a:	89e8      	ldrh	r0, [r5, #14]
 801737c:	f002 fc98 	bl	8019cb0 <uxr_seq_num_add>
 8017380:	9904      	ldr	r1, [sp, #16]
 8017382:	9a03      	ldr	r2, [sp, #12]
 8017384:	81e8      	strh	r0, [r5, #14]
 8017386:	4630      	mov	r0, r6
 8017388:	1a52      	subs	r2, r2, r1
 801738a:	f7f7 fd2d 	bl	800ede8 <ucdr_init_buffer>
 801738e:	4630      	mov	r0, r6
 8017390:	4622      	mov	r2, r4
 8017392:	490f      	ldr	r1, [pc, #60]	; (80173d0 <on_full_output_buffer_fragmented+0x110>)
 8017394:	f7f7 fcfc 	bl	800ed90 <ucdr_set_on_full_buffer_callback>
 8017398:	2000      	movs	r0, #0
 801739a:	b00a      	add	sp, #40	; 0x28
 801739c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173a0:	b292      	uxth	r2, r2
 80173a2:	2302      	movs	r3, #2
 80173a4:	210d      	movs	r1, #13
 80173a6:	a802      	add	r0, sp, #8
 80173a8:	f7ff ff12 	bl	80171d0 <uxr_buffer_submessage_header>
 80173ac:	8928      	ldrh	r0, [r5, #8]
 80173ae:	89eb      	ldrh	r3, [r5, #14]
 80173b0:	6869      	ldr	r1, [r5, #4]
 80173b2:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80173b6:	fbb3 f7f0 	udiv	r7, r3, r0
 80173ba:	fbb1 f1f0 	udiv	r1, r1, r0
 80173be:	fb00 3317 	mls	r3, r0, r7, r3
 80173c2:	3208      	adds	r2, #8
 80173c4:	b29b      	uxth	r3, r3
 80173c6:	fb01 f303 	mul.w	r3, r1, r3
 80173ca:	6829      	ldr	r1, [r5, #0]
 80173cc:	50ca      	str	r2, [r1, r3]
 80173ce:	e7d3      	b.n	8017378 <on_full_output_buffer_fragmented+0xb8>
 80173d0:	080172c1 	.word	0x080172c1

080173d4 <uxr_prepare_output_stream>:
 80173d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80173d6:	b087      	sub	sp, #28
 80173d8:	2707      	movs	r7, #7
 80173da:	2500      	movs	r5, #0
 80173dc:	461c      	mov	r4, r3
 80173de:	4606      	mov	r6, r0
 80173e0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80173e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80173e6:	e9cd 7500 	strd	r7, r5, [sp]
 80173ea:	3204      	adds	r2, #4
 80173ec:	f7fe ffc8 	bl	8016380 <uxr_prepare_stream_to_write_submessage>
 80173f0:	f080 0201 	eor.w	r2, r0, #1
 80173f4:	b2d2      	uxtb	r2, r2
 80173f6:	75a2      	strb	r2, [r4, #22]
 80173f8:	b112      	cbz	r2, 8017400 <uxr_prepare_output_stream+0x2c>
 80173fa:	4628      	mov	r0, r5
 80173fc:	b007      	add	sp, #28
 80173fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017400:	aa05      	add	r2, sp, #20
 8017402:	9902      	ldr	r1, [sp, #8]
 8017404:	4630      	mov	r0, r6
 8017406:	f7ff f8f7 	bl	80165f8 <uxr_init_base_object_request>
 801740a:	a905      	add	r1, sp, #20
 801740c:	4605      	mov	r5, r0
 801740e:	4620      	mov	r0, r4
 8017410:	f000 fe7a 	bl	8018108 <uxr_serialize_WRITE_DATA_Payload_Data>
 8017414:	69a6      	ldr	r6, [r4, #24]
 8017416:	69e7      	ldr	r7, [r4, #28]
 8017418:	4620      	mov	r0, r4
 801741a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801741e:	1a52      	subs	r2, r2, r1
 8017420:	f7f7 fce2 	bl	800ede8 <ucdr_init_buffer>
 8017424:	4620      	mov	r0, r4
 8017426:	463a      	mov	r2, r7
 8017428:	4631      	mov	r1, r6
 801742a:	f7f7 fcb1 	bl	800ed90 <ucdr_set_on_full_buffer_callback>
 801742e:	4628      	mov	r0, r5
 8017430:	b007      	add	sp, #28
 8017432:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017434 <uxr_prepare_output_stream_fragmented>:
 8017434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017438:	b091      	sub	sp, #68	; 0x44
 801743a:	4605      	mov	r5, r0
 801743c:	3008      	adds	r0, #8
 801743e:	461e      	mov	r6, r3
 8017440:	9105      	str	r1, [sp, #20]
 8017442:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8017446:	9204      	str	r2, [sp, #16]
 8017448:	f7ff fe8a 	bl	8017160 <uxr_get_output_reliable_stream>
 801744c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8017450:	2b01      	cmp	r3, #1
 8017452:	f000 8093 	beq.w	801757c <uxr_prepare_output_stream_fragmented+0x148>
 8017456:	4604      	mov	r4, r0
 8017458:	2800      	cmp	r0, #0
 801745a:	f000 808f 	beq.w	801757c <uxr_prepare_output_stream_fragmented+0x148>
 801745e:	f002 fc05 	bl	8019c6c <get_available_free_slots>
 8017462:	2800      	cmp	r0, #0
 8017464:	f000 8085 	beq.w	8017572 <uxr_prepare_output_stream_fragmented+0x13e>
 8017468:	8923      	ldrh	r3, [r4, #8]
 801746a:	89e7      	ldrh	r7, [r4, #14]
 801746c:	6862      	ldr	r2, [r4, #4]
 801746e:	fbb7 f9f3 	udiv	r9, r7, r3
 8017472:	fbb2 f2f3 	udiv	r2, r2, r3
 8017476:	fb03 7919 	mls	r9, r3, r9, r7
 801747a:	6823      	ldr	r3, [r4, #0]
 801747c:	f1a2 0b04 	sub.w	fp, r2, #4
 8017480:	9203      	str	r2, [sp, #12]
 8017482:	fa1f f989 	uxth.w	r9, r9
 8017486:	fb02 f909 	mul.w	r9, r2, r9
 801748a:	f109 0904 	add.w	r9, r9, #4
 801748e:	4499      	add	r9, r3
 8017490:	7b23      	ldrb	r3, [r4, #12]
 8017492:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8017496:	4543      	cmp	r3, r8
 8017498:	d37c      	bcc.n	8017594 <uxr_prepare_output_stream_fragmented+0x160>
 801749a:	f1ab 0a04 	sub.w	sl, fp, #4
 801749e:	465a      	mov	r2, fp
 80174a0:	4649      	mov	r1, r9
 80174a2:	a808      	add	r0, sp, #32
 80174a4:	ebaa 0a03 	sub.w	sl, sl, r3
 80174a8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80174aa:	f8cd 8000 	str.w	r8, [sp]
 80174ae:	3308      	adds	r3, #8
 80174b0:	fa1f fa8a 	uxth.w	sl, sl
 80174b4:	9302      	str	r3, [sp, #8]
 80174b6:	2300      	movs	r3, #0
 80174b8:	f7f7 fc84 	bl	800edc4 <ucdr_init_buffer_origin_offset>
 80174bc:	9b02      	ldr	r3, [sp, #8]
 80174be:	4652      	mov	r2, sl
 80174c0:	210d      	movs	r1, #13
 80174c2:	455b      	cmp	r3, fp
 80174c4:	bf34      	ite	cc
 80174c6:	2302      	movcc	r3, #2
 80174c8:	2300      	movcs	r3, #0
 80174ca:	a808      	add	r0, sp, #32
 80174cc:	f7ff fe80 	bl	80171d0 <uxr_buffer_submessage_header>
 80174d0:	8921      	ldrh	r1, [r4, #8]
 80174d2:	6863      	ldr	r3, [r4, #4]
 80174d4:	4638      	mov	r0, r7
 80174d6:	fbb7 f2f1 	udiv	r2, r7, r1
 80174da:	fbb3 f3f1 	udiv	r3, r3, r1
 80174de:	fb01 7212 	mls	r2, r1, r2, r7
 80174e2:	2101      	movs	r1, #1
 80174e4:	b292      	uxth	r2, r2
 80174e6:	fb02 f303 	mul.w	r3, r2, r3
 80174ea:	6822      	ldr	r2, [r4, #0]
 80174ec:	f842 b003 	str.w	fp, [r2, r3]
 80174f0:	f002 fbde 	bl	8019cb0 <uxr_seq_num_add>
 80174f4:	9b03      	ldr	r3, [sp, #12]
 80174f6:	f108 0104 	add.w	r1, r8, #4
 80174fa:	4607      	mov	r7, r0
 80174fc:	f1a3 0208 	sub.w	r2, r3, #8
 8017500:	4630      	mov	r0, r6
 8017502:	4449      	add	r1, r9
 8017504:	eba2 0208 	sub.w	r2, r2, r8
 8017508:	f7f7 fc6e 	bl	800ede8 <ucdr_init_buffer>
 801750c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801750e:	2107      	movs	r1, #7
 8017510:	81e7      	strh	r7, [r4, #14]
 8017512:	1d1a      	adds	r2, r3, #4
 8017514:	2300      	movs	r3, #0
 8017516:	4630      	mov	r0, r6
 8017518:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801751c:	bf28      	it	cs
 801751e:	461a      	movcs	r2, r3
 8017520:	b292      	uxth	r2, r2
 8017522:	f7ff fe55 	bl	80171d0 <uxr_buffer_submessage_header>
 8017526:	aa07      	add	r2, sp, #28
 8017528:	9904      	ldr	r1, [sp, #16]
 801752a:	4628      	mov	r0, r5
 801752c:	f7ff f864 	bl	80165f8 <uxr_init_base_object_request>
 8017530:	4604      	mov	r4, r0
 8017532:	b320      	cbz	r0, 801757e <uxr_prepare_output_stream_fragmented+0x14a>
 8017534:	a907      	add	r1, sp, #28
 8017536:	4630      	mov	r0, r6
 8017538:	f000 fde6 	bl	8018108 <uxr_serialize_WRITE_DATA_Payload_Data>
 801753c:	4630      	mov	r0, r6
 801753e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8017542:	1a52      	subs	r2, r2, r1
 8017544:	f7f7 fc50 	bl	800ede8 <ucdr_init_buffer>
 8017548:	9b05      	ldr	r3, [sp, #20]
 801754a:	9a02      	ldr	r2, [sp, #8]
 801754c:	4630      	mov	r0, r6
 801754e:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 8017552:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017554:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 8017558:	462a      	mov	r2, r5
 801755a:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 801755e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8017560:	4918      	ldr	r1, [pc, #96]	; (80175c4 <uxr_prepare_output_stream_fragmented+0x190>)
 8017562:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 8017566:	f7f7 fc13 	bl	800ed90 <ucdr_set_on_full_buffer_callback>
 801756a:	4620      	mov	r0, r4
 801756c:	b011      	add	sp, #68	; 0x44
 801756e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017572:	991c      	ldr	r1, [sp, #112]	; 0x70
 8017574:	4628      	mov	r0, r5
 8017576:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017578:	4798      	blx	r3
 801757a:	b920      	cbnz	r0, 8017586 <uxr_prepare_output_stream_fragmented+0x152>
 801757c:	2400      	movs	r4, #0
 801757e:	4620      	mov	r0, r4
 8017580:	b011      	add	sp, #68	; 0x44
 8017582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017586:	4620      	mov	r0, r4
 8017588:	f002 fb70 	bl	8019c6c <get_available_free_slots>
 801758c:	2800      	cmp	r0, #0
 801758e:	f47f af6b 	bne.w	8017468 <uxr_prepare_output_stream_fragmented+0x34>
 8017592:	e7f3      	b.n	801757c <uxr_prepare_output_stream_fragmented+0x148>
 8017594:	4638      	mov	r0, r7
 8017596:	2101      	movs	r1, #1
 8017598:	f002 fb8a 	bl	8019cb0 <uxr_seq_num_add>
 801759c:	8922      	ldrh	r2, [r4, #8]
 801759e:	6863      	ldr	r3, [r4, #4]
 80175a0:	4607      	mov	r7, r0
 80175a2:	fbb3 f9f2 	udiv	r9, r3, r2
 80175a6:	fbb0 f3f2 	udiv	r3, r0, r2
 80175aa:	fb02 0313 	mls	r3, r2, r3, r0
 80175ae:	b29b      	uxth	r3, r3
 80175b0:	fb03 f909 	mul.w	r9, r3, r9
 80175b4:	6823      	ldr	r3, [r4, #0]
 80175b6:	f109 0904 	add.w	r9, r9, #4
 80175ba:	4499      	add	r9, r3
 80175bc:	7b23      	ldrb	r3, [r4, #12]
 80175be:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80175c2:	e76a      	b.n	801749a <uxr_prepare_output_stream_fragmented+0x66>
 80175c4:	080172c1 	.word	0x080172c1

080175c8 <uxr_serialize_message_header>:
 80175c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80175ca:	4616      	mov	r6, r2
 80175cc:	b083      	sub	sp, #12
 80175ce:	4604      	mov	r4, r0
 80175d0:	460d      	mov	r5, r1
 80175d2:	9301      	str	r3, [sp, #4]
 80175d4:	9f08      	ldr	r7, [sp, #32]
 80175d6:	f7f6 f86f 	bl	800d6b8 <ucdr_serialize_uint8_t>
 80175da:	4631      	mov	r1, r6
 80175dc:	4620      	mov	r0, r4
 80175de:	f7f6 f86b 	bl	800d6b8 <ucdr_serialize_uint8_t>
 80175e2:	9a01      	ldr	r2, [sp, #4]
 80175e4:	2101      	movs	r1, #1
 80175e6:	4620      	mov	r0, r4
 80175e8:	f7f6 f912 	bl	800d810 <ucdr_serialize_endian_uint16_t>
 80175ec:	062b      	lsls	r3, r5, #24
 80175ee:	d501      	bpl.n	80175f4 <uxr_serialize_message_header+0x2c>
 80175f0:	b003      	add	sp, #12
 80175f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80175f4:	2204      	movs	r2, #4
 80175f6:	4639      	mov	r1, r7
 80175f8:	4620      	mov	r0, r4
 80175fa:	b003      	add	sp, #12
 80175fc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017600:	f7f5 beb4 	b.w	800d36c <ucdr_serialize_array_uint8_t>

08017604 <uxr_deserialize_message_header>:
 8017604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017606:	4616      	mov	r6, r2
 8017608:	b083      	sub	sp, #12
 801760a:	4604      	mov	r4, r0
 801760c:	460d      	mov	r5, r1
 801760e:	9301      	str	r3, [sp, #4]
 8017610:	9f08      	ldr	r7, [sp, #32]
 8017612:	f7f6 f867 	bl	800d6e4 <ucdr_deserialize_uint8_t>
 8017616:	4631      	mov	r1, r6
 8017618:	4620      	mov	r0, r4
 801761a:	f7f6 f863 	bl	800d6e4 <ucdr_deserialize_uint8_t>
 801761e:	9a01      	ldr	r2, [sp, #4]
 8017620:	2101      	movs	r1, #1
 8017622:	4620      	mov	r0, r4
 8017624:	f7f6 f9e8 	bl	800d9f8 <ucdr_deserialize_endian_uint16_t>
 8017628:	f995 3000 	ldrsb.w	r3, [r5]
 801762c:	2b00      	cmp	r3, #0
 801762e:	da01      	bge.n	8017634 <uxr_deserialize_message_header+0x30>
 8017630:	b003      	add	sp, #12
 8017632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017634:	2204      	movs	r2, #4
 8017636:	4639      	mov	r1, r7
 8017638:	4620      	mov	r0, r4
 801763a:	b003      	add	sp, #12
 801763c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017640:	f7f5 bef8 	b.w	800d434 <ucdr_deserialize_array_uint8_t>

08017644 <uxr_serialize_submessage_header>:
 8017644:	b530      	push	{r4, r5, lr}
 8017646:	4615      	mov	r5, r2
 8017648:	b083      	sub	sp, #12
 801764a:	4604      	mov	r4, r0
 801764c:	9301      	str	r3, [sp, #4]
 801764e:	f7f6 f833 	bl	800d6b8 <ucdr_serialize_uint8_t>
 8017652:	4629      	mov	r1, r5
 8017654:	4620      	mov	r0, r4
 8017656:	f7f6 f82f 	bl	800d6b8 <ucdr_serialize_uint8_t>
 801765a:	9a01      	ldr	r2, [sp, #4]
 801765c:	2101      	movs	r1, #1
 801765e:	4620      	mov	r0, r4
 8017660:	b003      	add	sp, #12
 8017662:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017666:	f7f6 b8d3 	b.w	800d810 <ucdr_serialize_endian_uint16_t>
 801766a:	bf00      	nop

0801766c <uxr_deserialize_submessage_header>:
 801766c:	b530      	push	{r4, r5, lr}
 801766e:	4615      	mov	r5, r2
 8017670:	b083      	sub	sp, #12
 8017672:	4604      	mov	r4, r0
 8017674:	9301      	str	r3, [sp, #4]
 8017676:	f7f6 f835 	bl	800d6e4 <ucdr_deserialize_uint8_t>
 801767a:	4629      	mov	r1, r5
 801767c:	4620      	mov	r0, r4
 801767e:	f7f6 f831 	bl	800d6e4 <ucdr_deserialize_uint8_t>
 8017682:	9a01      	ldr	r2, [sp, #4]
 8017684:	2101      	movs	r1, #1
 8017686:	4620      	mov	r0, r4
 8017688:	b003      	add	sp, #12
 801768a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801768e:	f7f6 b9b3 	b.w	800d9f8 <ucdr_deserialize_endian_uint16_t>
 8017692:	bf00      	nop

08017694 <uxr_serialize_CLIENT_Representation>:
 8017694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017698:	2204      	movs	r2, #4
 801769a:	460e      	mov	r6, r1
 801769c:	4605      	mov	r5, r0
 801769e:	f7f5 fe65 	bl	800d36c <ucdr_serialize_array_uint8_t>
 80176a2:	4607      	mov	r7, r0
 80176a4:	2202      	movs	r2, #2
 80176a6:	1d31      	adds	r1, r6, #4
 80176a8:	4628      	mov	r0, r5
 80176aa:	f7f5 fe5f 	bl	800d36c <ucdr_serialize_array_uint8_t>
 80176ae:	4038      	ands	r0, r7
 80176b0:	2202      	movs	r2, #2
 80176b2:	1db1      	adds	r1, r6, #6
 80176b4:	b2c7      	uxtb	r7, r0
 80176b6:	4628      	mov	r0, r5
 80176b8:	f7f5 fe58 	bl	800d36c <ucdr_serialize_array_uint8_t>
 80176bc:	2204      	movs	r2, #4
 80176be:	4007      	ands	r7, r0
 80176c0:	f106 0108 	add.w	r1, r6, #8
 80176c4:	4628      	mov	r0, r5
 80176c6:	f7f5 fe51 	bl	800d36c <ucdr_serialize_array_uint8_t>
 80176ca:	4007      	ands	r7, r0
 80176cc:	7b31      	ldrb	r1, [r6, #12]
 80176ce:	4628      	mov	r0, r5
 80176d0:	f7f5 fff2 	bl	800d6b8 <ucdr_serialize_uint8_t>
 80176d4:	7b71      	ldrb	r1, [r6, #13]
 80176d6:	4007      	ands	r7, r0
 80176d8:	4628      	mov	r0, r5
 80176da:	f7f5 ffbf 	bl	800d65c <ucdr_serialize_bool>
 80176de:	7b73      	ldrb	r3, [r6, #13]
 80176e0:	ea07 0800 	and.w	r8, r7, r0
 80176e4:	b93b      	cbnz	r3, 80176f6 <uxr_serialize_CLIENT_Representation+0x62>
 80176e6:	8bb1      	ldrh	r1, [r6, #28]
 80176e8:	4628      	mov	r0, r5
 80176ea:	f7f6 f811 	bl	800d710 <ucdr_serialize_uint16_t>
 80176ee:	ea08 0000 	and.w	r0, r8, r0
 80176f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80176f6:	6931      	ldr	r1, [r6, #16]
 80176f8:	4628      	mov	r0, r5
 80176fa:	f7f6 f9f3 	bl	800dae4 <ucdr_serialize_uint32_t>
 80176fe:	6933      	ldr	r3, [r6, #16]
 8017700:	b1e3      	cbz	r3, 801773c <uxr_serialize_CLIENT_Representation+0xa8>
 8017702:	b1c0      	cbz	r0, 8017736 <uxr_serialize_CLIENT_Representation+0xa2>
 8017704:	4637      	mov	r7, r6
 8017706:	f04f 0900 	mov.w	r9, #0
 801770a:	e000      	b.n	801770e <uxr_serialize_CLIENT_Representation+0x7a>
 801770c:	b19c      	cbz	r4, 8017736 <uxr_serialize_CLIENT_Representation+0xa2>
 801770e:	6979      	ldr	r1, [r7, #20]
 8017710:	4628      	mov	r0, r5
 8017712:	f001 fd69 	bl	80191e8 <ucdr_serialize_string>
 8017716:	69b9      	ldr	r1, [r7, #24]
 8017718:	4604      	mov	r4, r0
 801771a:	4628      	mov	r0, r5
 801771c:	f001 fd64 	bl	80191e8 <ucdr_serialize_string>
 8017720:	f109 0901 	add.w	r9, r9, #1
 8017724:	6933      	ldr	r3, [r6, #16]
 8017726:	4004      	ands	r4, r0
 8017728:	3708      	adds	r7, #8
 801772a:	4599      	cmp	r9, r3
 801772c:	b2e4      	uxtb	r4, r4
 801772e:	d3ed      	bcc.n	801770c <uxr_serialize_CLIENT_Representation+0x78>
 8017730:	ea08 0804 	and.w	r8, r8, r4
 8017734:	e7d7      	b.n	80176e6 <uxr_serialize_CLIENT_Representation+0x52>
 8017736:	f04f 0800 	mov.w	r8, #0
 801773a:	e7d4      	b.n	80176e6 <uxr_serialize_CLIENT_Representation+0x52>
 801773c:	ea08 0800 	and.w	r8, r8, r0
 8017740:	e7d1      	b.n	80176e6 <uxr_serialize_CLIENT_Representation+0x52>
 8017742:	bf00      	nop

08017744 <uxr_deserialize_CLIENT_Representation>:
 8017744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017748:	2204      	movs	r2, #4
 801774a:	460c      	mov	r4, r1
 801774c:	4605      	mov	r5, r0
 801774e:	f7f5 fe71 	bl	800d434 <ucdr_deserialize_array_uint8_t>
 8017752:	4607      	mov	r7, r0
 8017754:	2202      	movs	r2, #2
 8017756:	1d21      	adds	r1, r4, #4
 8017758:	4628      	mov	r0, r5
 801775a:	f7f5 fe6b 	bl	800d434 <ucdr_deserialize_array_uint8_t>
 801775e:	4038      	ands	r0, r7
 8017760:	2202      	movs	r2, #2
 8017762:	1da1      	adds	r1, r4, #6
 8017764:	b2c6      	uxtb	r6, r0
 8017766:	4628      	mov	r0, r5
 8017768:	f7f5 fe64 	bl	800d434 <ucdr_deserialize_array_uint8_t>
 801776c:	2204      	movs	r2, #4
 801776e:	4006      	ands	r6, r0
 8017770:	f104 0108 	add.w	r1, r4, #8
 8017774:	4628      	mov	r0, r5
 8017776:	f7f5 fe5d 	bl	800d434 <ucdr_deserialize_array_uint8_t>
 801777a:	4006      	ands	r6, r0
 801777c:	f104 010c 	add.w	r1, r4, #12
 8017780:	4628      	mov	r0, r5
 8017782:	f7f5 ffaf 	bl	800d6e4 <ucdr_deserialize_uint8_t>
 8017786:	f104 010d 	add.w	r1, r4, #13
 801778a:	ea06 0700 	and.w	r7, r6, r0
 801778e:	4628      	mov	r0, r5
 8017790:	f7f5 ff7a 	bl	800d688 <ucdr_deserialize_bool>
 8017794:	7b63      	ldrb	r3, [r4, #13]
 8017796:	4007      	ands	r7, r0
 8017798:	b93b      	cbnz	r3, 80177aa <uxr_deserialize_CLIENT_Representation+0x66>
 801779a:	f104 011c 	add.w	r1, r4, #28
 801779e:	4628      	mov	r0, r5
 80177a0:	f7f6 f8b6 	bl	800d910 <ucdr_deserialize_uint16_t>
 80177a4:	4038      	ands	r0, r7
 80177a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80177aa:	f104 0110 	add.w	r1, r4, #16
 80177ae:	4628      	mov	r0, r5
 80177b0:	f7f6 fac8 	bl	800dd44 <ucdr_deserialize_uint32_t>
 80177b4:	6923      	ldr	r3, [r4, #16]
 80177b6:	2b01      	cmp	r3, #1
 80177b8:	d903      	bls.n	80177c2 <uxr_deserialize_CLIENT_Representation+0x7e>
 80177ba:	2301      	movs	r3, #1
 80177bc:	2700      	movs	r7, #0
 80177be:	75ab      	strb	r3, [r5, #22]
 80177c0:	e7eb      	b.n	801779a <uxr_deserialize_CLIENT_Representation+0x56>
 80177c2:	b30b      	cbz	r3, 8017808 <uxr_deserialize_CLIENT_Representation+0xc4>
 80177c4:	b1f0      	cbz	r0, 8017804 <uxr_deserialize_CLIENT_Representation+0xc0>
 80177c6:	46a0      	mov	r8, r4
 80177c8:	f04f 0900 	mov.w	r9, #0
 80177cc:	e000      	b.n	80177d0 <uxr_deserialize_CLIENT_Representation+0x8c>
 80177ce:	b1ce      	cbz	r6, 8017804 <uxr_deserialize_CLIENT_Representation+0xc0>
 80177d0:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80177d4:	f108 0808 	add.w	r8, r8, #8
 80177d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80177dc:	4628      	mov	r0, r5
 80177de:	f001 fd13 	bl	8019208 <ucdr_deserialize_string>
 80177e2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80177e6:	4606      	mov	r6, r0
 80177e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80177ec:	4628      	mov	r0, r5
 80177ee:	f109 0901 	add.w	r9, r9, #1
 80177f2:	f001 fd09 	bl	8019208 <ucdr_deserialize_string>
 80177f6:	6923      	ldr	r3, [r4, #16]
 80177f8:	4006      	ands	r6, r0
 80177fa:	4599      	cmp	r9, r3
 80177fc:	b2f6      	uxtb	r6, r6
 80177fe:	d3e6      	bcc.n	80177ce <uxr_deserialize_CLIENT_Representation+0x8a>
 8017800:	4037      	ands	r7, r6
 8017802:	e7ca      	b.n	801779a <uxr_deserialize_CLIENT_Representation+0x56>
 8017804:	2700      	movs	r7, #0
 8017806:	e7c8      	b.n	801779a <uxr_deserialize_CLIENT_Representation+0x56>
 8017808:	4007      	ands	r7, r0
 801780a:	e7c6      	b.n	801779a <uxr_deserialize_CLIENT_Representation+0x56>

0801780c <uxr_serialize_AGENT_Representation>:
 801780c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017810:	2204      	movs	r2, #4
 8017812:	460f      	mov	r7, r1
 8017814:	4605      	mov	r5, r0
 8017816:	f7f5 fda9 	bl	800d36c <ucdr_serialize_array_uint8_t>
 801781a:	4604      	mov	r4, r0
 801781c:	2202      	movs	r2, #2
 801781e:	1d39      	adds	r1, r7, #4
 8017820:	4628      	mov	r0, r5
 8017822:	f7f5 fda3 	bl	800d36c <ucdr_serialize_array_uint8_t>
 8017826:	4020      	ands	r0, r4
 8017828:	2202      	movs	r2, #2
 801782a:	1db9      	adds	r1, r7, #6
 801782c:	b2c4      	uxtb	r4, r0
 801782e:	4628      	mov	r0, r5
 8017830:	f7f5 fd9c 	bl	800d36c <ucdr_serialize_array_uint8_t>
 8017834:	7a39      	ldrb	r1, [r7, #8]
 8017836:	4004      	ands	r4, r0
 8017838:	4628      	mov	r0, r5
 801783a:	f7f5 ff0f 	bl	800d65c <ucdr_serialize_bool>
 801783e:	7a3b      	ldrb	r3, [r7, #8]
 8017840:	ea00 0804 	and.w	r8, r0, r4
 8017844:	b913      	cbnz	r3, 801784c <uxr_serialize_AGENT_Representation+0x40>
 8017846:	4640      	mov	r0, r8
 8017848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801784c:	68f9      	ldr	r1, [r7, #12]
 801784e:	4628      	mov	r0, r5
 8017850:	f7f6 f948 	bl	800dae4 <ucdr_serialize_uint32_t>
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	b303      	cbz	r3, 801789a <uxr_serialize_AGENT_Representation+0x8e>
 8017858:	b1d0      	cbz	r0, 8017890 <uxr_serialize_AGENT_Representation+0x84>
 801785a:	463e      	mov	r6, r7
 801785c:	f04f 0900 	mov.w	r9, #0
 8017860:	e000      	b.n	8017864 <uxr_serialize_AGENT_Representation+0x58>
 8017862:	b1ac      	cbz	r4, 8017890 <uxr_serialize_AGENT_Representation+0x84>
 8017864:	6931      	ldr	r1, [r6, #16]
 8017866:	4628      	mov	r0, r5
 8017868:	f001 fcbe 	bl	80191e8 <ucdr_serialize_string>
 801786c:	6971      	ldr	r1, [r6, #20]
 801786e:	4604      	mov	r4, r0
 8017870:	4628      	mov	r0, r5
 8017872:	f001 fcb9 	bl	80191e8 <ucdr_serialize_string>
 8017876:	f109 0901 	add.w	r9, r9, #1
 801787a:	68fb      	ldr	r3, [r7, #12]
 801787c:	4004      	ands	r4, r0
 801787e:	3608      	adds	r6, #8
 8017880:	4599      	cmp	r9, r3
 8017882:	b2e4      	uxtb	r4, r4
 8017884:	d3ed      	bcc.n	8017862 <uxr_serialize_AGENT_Representation+0x56>
 8017886:	ea08 0804 	and.w	r8, r8, r4
 801788a:	4640      	mov	r0, r8
 801788c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017890:	f04f 0800 	mov.w	r8, #0
 8017894:	4640      	mov	r0, r8
 8017896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801789a:	ea08 0800 	and.w	r8, r8, r0
 801789e:	e7d2      	b.n	8017846 <uxr_serialize_AGENT_Representation+0x3a>

080178a0 <uxr_serialize_DATAWRITER_Representation>:
 80178a0:	b570      	push	{r4, r5, r6, lr}
 80178a2:	460d      	mov	r5, r1
 80178a4:	7809      	ldrb	r1, [r1, #0]
 80178a6:	4606      	mov	r6, r0
 80178a8:	f7f5 ff06 	bl	800d6b8 <ucdr_serialize_uint8_t>
 80178ac:	4604      	mov	r4, r0
 80178ae:	b130      	cbz	r0, 80178be <uxr_serialize_DATAWRITER_Representation+0x1e>
 80178b0:	782b      	ldrb	r3, [r5, #0]
 80178b2:	2b02      	cmp	r3, #2
 80178b4:	d00c      	beq.n	80178d0 <uxr_serialize_DATAWRITER_Representation+0x30>
 80178b6:	2b03      	cmp	r3, #3
 80178b8:	d010      	beq.n	80178dc <uxr_serialize_DATAWRITER_Representation+0x3c>
 80178ba:	2b01      	cmp	r3, #1
 80178bc:	d008      	beq.n	80178d0 <uxr_serialize_DATAWRITER_Representation+0x30>
 80178be:	2202      	movs	r2, #2
 80178c0:	f505 7102 	add.w	r1, r5, #520	; 0x208
 80178c4:	4630      	mov	r0, r6
 80178c6:	f7f5 fd51 	bl	800d36c <ucdr_serialize_array_uint8_t>
 80178ca:	4020      	ands	r0, r4
 80178cc:	b2c0      	uxtb	r0, r0
 80178ce:	bd70      	pop	{r4, r5, r6, pc}
 80178d0:	6869      	ldr	r1, [r5, #4]
 80178d2:	4630      	mov	r0, r6
 80178d4:	f001 fc88 	bl	80191e8 <ucdr_serialize_string>
 80178d8:	4604      	mov	r4, r0
 80178da:	e7f0      	b.n	80178be <uxr_serialize_DATAWRITER_Representation+0x1e>
 80178dc:	4629      	mov	r1, r5
 80178de:	4630      	mov	r0, r6
 80178e0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80178e4:	3104      	adds	r1, #4
 80178e6:	f7f7 fb1f 	bl	800ef28 <ucdr_serialize_sequence_uint8_t>
 80178ea:	4604      	mov	r4, r0
 80178ec:	e7e7      	b.n	80178be <uxr_serialize_DATAWRITER_Representation+0x1e>
 80178ee:	bf00      	nop

080178f0 <uxr_serialize_ObjectVariant.part.0>:
 80178f0:	b570      	push	{r4, r5, r6, lr}
 80178f2:	780b      	ldrb	r3, [r1, #0]
 80178f4:	460c      	mov	r4, r1
 80178f6:	4605      	mov	r5, r0
 80178f8:	3b01      	subs	r3, #1
 80178fa:	2b0d      	cmp	r3, #13
 80178fc:	d854      	bhi.n	80179a8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80178fe:	e8df f003 	tbb	[pc, r3]
 8017902:	0730      	.short	0x0730
 8017904:	07071b1b 	.word	0x07071b1b
 8017908:	0c530707 	.word	0x0c530707
 801790c:	494e0c0c 	.word	0x494e0c0c
 8017910:	3104      	adds	r1, #4
 8017912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017916:	f7ff bfc3 	b.w	80178a0 <uxr_serialize_DATAWRITER_Representation>
 801791a:	7909      	ldrb	r1, [r1, #4]
 801791c:	f7f5 fecc 	bl	800d6b8 <ucdr_serialize_uint8_t>
 8017920:	b1e8      	cbz	r0, 801795e <uxr_serialize_ObjectVariant.part.0+0x6e>
 8017922:	7923      	ldrb	r3, [r4, #4]
 8017924:	2b01      	cmp	r3, #1
 8017926:	d001      	beq.n	801792c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8017928:	2b02      	cmp	r3, #2
 801792a:	d13d      	bne.n	80179a8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801792c:	68a1      	ldr	r1, [r4, #8]
 801792e:	4628      	mov	r0, r5
 8017930:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017934:	f001 bc58 	b.w	80191e8 <ucdr_serialize_string>
 8017938:	7909      	ldrb	r1, [r1, #4]
 801793a:	f7f5 febd 	bl	800d6b8 <ucdr_serialize_uint8_t>
 801793e:	4606      	mov	r6, r0
 8017940:	b120      	cbz	r0, 801794c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8017942:	7923      	ldrb	r3, [r4, #4]
 8017944:	2b02      	cmp	r3, #2
 8017946:	d039      	beq.n	80179bc <uxr_serialize_ObjectVariant.part.0+0xcc>
 8017948:	2b03      	cmp	r3, #3
 801794a:	d02f      	beq.n	80179ac <uxr_serialize_ObjectVariant.part.0+0xbc>
 801794c:	2202      	movs	r2, #2
 801794e:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8017952:	4628      	mov	r0, r5
 8017954:	f7f5 fd0a 	bl	800d36c <ucdr_serialize_array_uint8_t>
 8017958:	4030      	ands	r0, r6
 801795a:	b2c0      	uxtb	r0, r0
 801795c:	bd70      	pop	{r4, r5, r6, pc}
 801795e:	2000      	movs	r0, #0
 8017960:	bd70      	pop	{r4, r5, r6, pc}
 8017962:	7909      	ldrb	r1, [r1, #4]
 8017964:	f7f5 fea8 	bl	800d6b8 <ucdr_serialize_uint8_t>
 8017968:	4606      	mov	r6, r0
 801796a:	b158      	cbz	r0, 8017984 <uxr_serialize_ObjectVariant.part.0+0x94>
 801796c:	7923      	ldrb	r3, [r4, #4]
 801796e:	2b02      	cmp	r3, #2
 8017970:	d003      	beq.n	801797a <uxr_serialize_ObjectVariant.part.0+0x8a>
 8017972:	2b03      	cmp	r3, #3
 8017974:	d028      	beq.n	80179c8 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8017976:	2b01      	cmp	r3, #1
 8017978:	d104      	bne.n	8017984 <uxr_serialize_ObjectVariant.part.0+0x94>
 801797a:	68a1      	ldr	r1, [r4, #8]
 801797c:	4628      	mov	r0, r5
 801797e:	f001 fc33 	bl	80191e8 <ucdr_serialize_string>
 8017982:	4606      	mov	r6, r0
 8017984:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8017988:	4628      	mov	r0, r5
 801798a:	f7f6 fbd1 	bl	800e130 <ucdr_serialize_int16_t>
 801798e:	4030      	ands	r0, r6
 8017990:	b2c0      	uxtb	r0, r0
 8017992:	bd70      	pop	{r4, r5, r6, pc}
 8017994:	3104      	adds	r1, #4
 8017996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801799a:	f7ff be7b 	b.w	8017694 <uxr_serialize_CLIENT_Representation>
 801799e:	3104      	adds	r1, #4
 80179a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80179a4:	f7ff bf32 	b.w	801780c <uxr_serialize_AGENT_Representation>
 80179a8:	2001      	movs	r0, #1
 80179aa:	bd70      	pop	{r4, r5, r6, pc}
 80179ac:	68a2      	ldr	r2, [r4, #8]
 80179ae:	f104 010c 	add.w	r1, r4, #12
 80179b2:	4628      	mov	r0, r5
 80179b4:	f7f7 fab8 	bl	800ef28 <ucdr_serialize_sequence_uint8_t>
 80179b8:	4606      	mov	r6, r0
 80179ba:	e7c7      	b.n	801794c <uxr_serialize_ObjectVariant.part.0+0x5c>
 80179bc:	68a1      	ldr	r1, [r4, #8]
 80179be:	4628      	mov	r0, r5
 80179c0:	f001 fc12 	bl	80191e8 <ucdr_serialize_string>
 80179c4:	4606      	mov	r6, r0
 80179c6:	e7c1      	b.n	801794c <uxr_serialize_ObjectVariant.part.0+0x5c>
 80179c8:	68a2      	ldr	r2, [r4, #8]
 80179ca:	f104 010c 	add.w	r1, r4, #12
 80179ce:	4628      	mov	r0, r5
 80179d0:	f7f7 faaa 	bl	800ef28 <ucdr_serialize_sequence_uint8_t>
 80179d4:	4606      	mov	r6, r0
 80179d6:	e7d5      	b.n	8017984 <uxr_serialize_ObjectVariant.part.0+0x94>

080179d8 <uxr_deserialize_DATAWRITER_Representation>:
 80179d8:	b570      	push	{r4, r5, r6, lr}
 80179da:	4606      	mov	r6, r0
 80179dc:	460d      	mov	r5, r1
 80179de:	f7f5 fe81 	bl	800d6e4 <ucdr_deserialize_uint8_t>
 80179e2:	4604      	mov	r4, r0
 80179e4:	b130      	cbz	r0, 80179f4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80179e6:	782b      	ldrb	r3, [r5, #0]
 80179e8:	2b02      	cmp	r3, #2
 80179ea:	d00c      	beq.n	8017a06 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80179ec:	2b03      	cmp	r3, #3
 80179ee:	d012      	beq.n	8017a16 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80179f0:	2b01      	cmp	r3, #1
 80179f2:	d008      	beq.n	8017a06 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80179f4:	2202      	movs	r2, #2
 80179f6:	f505 7102 	add.w	r1, r5, #520	; 0x208
 80179fa:	4630      	mov	r0, r6
 80179fc:	f7f5 fd1a 	bl	800d434 <ucdr_deserialize_array_uint8_t>
 8017a00:	4020      	ands	r0, r4
 8017a02:	b2c0      	uxtb	r0, r0
 8017a04:	bd70      	pop	{r4, r5, r6, pc}
 8017a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017a0a:	6869      	ldr	r1, [r5, #4]
 8017a0c:	4630      	mov	r0, r6
 8017a0e:	f001 fbfb 	bl	8019208 <ucdr_deserialize_string>
 8017a12:	4604      	mov	r4, r0
 8017a14:	e7ee      	b.n	80179f4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8017a16:	1d2b      	adds	r3, r5, #4
 8017a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017a1c:	f105 0108 	add.w	r1, r5, #8
 8017a20:	4630      	mov	r0, r6
 8017a22:	f7f7 fa93 	bl	800ef4c <ucdr_deserialize_sequence_uint8_t>
 8017a26:	4604      	mov	r4, r0
 8017a28:	e7e4      	b.n	80179f4 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8017a2a:	bf00      	nop

08017a2c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8017a2c:	b570      	push	{r4, r5, r6, lr}
 8017a2e:	460d      	mov	r5, r1
 8017a30:	7809      	ldrb	r1, [r1, #0]
 8017a32:	4606      	mov	r6, r0
 8017a34:	f7f5 fe12 	bl	800d65c <ucdr_serialize_bool>
 8017a38:	782b      	ldrb	r3, [r5, #0]
 8017a3a:	4604      	mov	r4, r0
 8017a3c:	b94b      	cbnz	r3, 8017a52 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8017a3e:	7a29      	ldrb	r1, [r5, #8]
 8017a40:	4630      	mov	r0, r6
 8017a42:	f7f5 fe0b 	bl	800d65c <ucdr_serialize_bool>
 8017a46:	7a2b      	ldrb	r3, [r5, #8]
 8017a48:	4004      	ands	r4, r0
 8017a4a:	b2e4      	uxtb	r4, r4
 8017a4c:	b943      	cbnz	r3, 8017a60 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8017a4e:	4620      	mov	r0, r4
 8017a50:	bd70      	pop	{r4, r5, r6, pc}
 8017a52:	6869      	ldr	r1, [r5, #4]
 8017a54:	4630      	mov	r0, r6
 8017a56:	f001 fbc7 	bl	80191e8 <ucdr_serialize_string>
 8017a5a:	4004      	ands	r4, r0
 8017a5c:	b2e4      	uxtb	r4, r4
 8017a5e:	e7ee      	b.n	8017a3e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8017a60:	68e9      	ldr	r1, [r5, #12]
 8017a62:	4630      	mov	r0, r6
 8017a64:	f001 fbc0 	bl	80191e8 <ucdr_serialize_string>
 8017a68:	4004      	ands	r4, r0
 8017a6a:	4620      	mov	r0, r4
 8017a6c:	bd70      	pop	{r4, r5, r6, pc}
 8017a6e:	bf00      	nop

08017a70 <uxr_serialize_OBJK_Replier_Binary>:
 8017a70:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8017a74:	460f      	mov	r7, r1
 8017a76:	4680      	mov	r8, r0
 8017a78:	6809      	ldr	r1, [r1, #0]
 8017a7a:	f001 fbb5 	bl	80191e8 <ucdr_serialize_string>
 8017a7e:	4605      	mov	r5, r0
 8017a80:	6879      	ldr	r1, [r7, #4]
 8017a82:	4640      	mov	r0, r8
 8017a84:	f001 fbb0 	bl	80191e8 <ucdr_serialize_string>
 8017a88:	4005      	ands	r5, r0
 8017a8a:	68b9      	ldr	r1, [r7, #8]
 8017a8c:	4640      	mov	r0, r8
 8017a8e:	b2ec      	uxtb	r4, r5
 8017a90:	f001 fbaa 	bl	80191e8 <ucdr_serialize_string>
 8017a94:	7b39      	ldrb	r1, [r7, #12]
 8017a96:	4004      	ands	r4, r0
 8017a98:	4640      	mov	r0, r8
 8017a9a:	f7f5 fddf 	bl	800d65c <ucdr_serialize_bool>
 8017a9e:	7b3b      	ldrb	r3, [r7, #12]
 8017aa0:	4004      	ands	r4, r0
 8017aa2:	b94b      	cbnz	r3, 8017ab8 <uxr_serialize_OBJK_Replier_Binary+0x48>
 8017aa4:	7d39      	ldrb	r1, [r7, #20]
 8017aa6:	4640      	mov	r0, r8
 8017aa8:	f7f5 fdd8 	bl	800d65c <ucdr_serialize_bool>
 8017aac:	7d3b      	ldrb	r3, [r7, #20]
 8017aae:	4004      	ands	r4, r0
 8017ab0:	b943      	cbnz	r3, 8017ac4 <uxr_serialize_OBJK_Replier_Binary+0x54>
 8017ab2:	4620      	mov	r0, r4
 8017ab4:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8017ab8:	6939      	ldr	r1, [r7, #16]
 8017aba:	4640      	mov	r0, r8
 8017abc:	f001 fb94 	bl	80191e8 <ucdr_serialize_string>
 8017ac0:	4004      	ands	r4, r0
 8017ac2:	e7ef      	b.n	8017aa4 <uxr_serialize_OBJK_Replier_Binary+0x34>
 8017ac4:	69b9      	ldr	r1, [r7, #24]
 8017ac6:	4640      	mov	r0, r8
 8017ac8:	f001 fb8e 	bl	80191e8 <ucdr_serialize_string>
 8017acc:	4004      	ands	r4, r0
 8017ace:	b2e4      	uxtb	r4, r4
 8017ad0:	4620      	mov	r0, r4
 8017ad2:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8017ad6:	bf00      	nop

08017ad8 <uxr_deserialize_ObjectVariant>:
 8017ad8:	b570      	push	{r4, r5, r6, lr}
 8017ada:	4605      	mov	r5, r0
 8017adc:	460e      	mov	r6, r1
 8017ade:	f7f5 fe01 	bl	800d6e4 <ucdr_deserialize_uint8_t>
 8017ae2:	b168      	cbz	r0, 8017b00 <uxr_deserialize_ObjectVariant+0x28>
 8017ae4:	7833      	ldrb	r3, [r6, #0]
 8017ae6:	4604      	mov	r4, r0
 8017ae8:	3b01      	subs	r3, #1
 8017aea:	2b0d      	cmp	r3, #13
 8017aec:	d809      	bhi.n	8017b02 <uxr_deserialize_ObjectVariant+0x2a>
 8017aee:	e8df f003 	tbb	[pc, r3]
 8017af2:	0a41      	.short	0x0a41
 8017af4:	0a0a2323 	.word	0x0a0a2323
 8017af8:	10080a0a 	.word	0x10080a0a
 8017afc:	565c1010 	.word	0x565c1010
 8017b00:	2400      	movs	r4, #0
 8017b02:	4620      	mov	r0, r4
 8017b04:	bd70      	pop	{r4, r5, r6, pc}
 8017b06:	1d31      	adds	r1, r6, #4
 8017b08:	4628      	mov	r0, r5
 8017b0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b0e:	f7ff bf63 	b.w	80179d8 <uxr_deserialize_DATAWRITER_Representation>
 8017b12:	1d31      	adds	r1, r6, #4
 8017b14:	4628      	mov	r0, r5
 8017b16:	f7f5 fde5 	bl	800d6e4 <ucdr_deserialize_uint8_t>
 8017b1a:	2800      	cmp	r0, #0
 8017b1c:	d0f0      	beq.n	8017b00 <uxr_deserialize_ObjectVariant+0x28>
 8017b1e:	7933      	ldrb	r3, [r6, #4]
 8017b20:	2b01      	cmp	r3, #1
 8017b22:	d001      	beq.n	8017b28 <uxr_deserialize_ObjectVariant+0x50>
 8017b24:	2b02      	cmp	r3, #2
 8017b26:	d1ec      	bne.n	8017b02 <uxr_deserialize_ObjectVariant+0x2a>
 8017b28:	68b1      	ldr	r1, [r6, #8]
 8017b2a:	4628      	mov	r0, r5
 8017b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017b30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b34:	f001 bb68 	b.w	8019208 <ucdr_deserialize_string>
 8017b38:	1d31      	adds	r1, r6, #4
 8017b3a:	4628      	mov	r0, r5
 8017b3c:	f7f5 fdd2 	bl	800d6e4 <ucdr_deserialize_uint8_t>
 8017b40:	4604      	mov	r4, r0
 8017b42:	b170      	cbz	r0, 8017b62 <uxr_deserialize_ObjectVariant+0x8a>
 8017b44:	7933      	ldrb	r3, [r6, #4]
 8017b46:	2b02      	cmp	r3, #2
 8017b48:	d04c      	beq.n	8017be4 <uxr_deserialize_ObjectVariant+0x10c>
 8017b4a:	2b03      	cmp	r3, #3
 8017b4c:	d109      	bne.n	8017b62 <uxr_deserialize_ObjectVariant+0x8a>
 8017b4e:	f106 0308 	add.w	r3, r6, #8
 8017b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017b56:	f106 010c 	add.w	r1, r6, #12
 8017b5a:	4628      	mov	r0, r5
 8017b5c:	f7f7 f9f6 	bl	800ef4c <ucdr_deserialize_sequence_uint8_t>
 8017b60:	4604      	mov	r4, r0
 8017b62:	2202      	movs	r2, #2
 8017b64:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8017b68:	4628      	mov	r0, r5
 8017b6a:	f7f5 fc63 	bl	800d434 <ucdr_deserialize_array_uint8_t>
 8017b6e:	4020      	ands	r0, r4
 8017b70:	b2c4      	uxtb	r4, r0
 8017b72:	e7c6      	b.n	8017b02 <uxr_deserialize_ObjectVariant+0x2a>
 8017b74:	1d31      	adds	r1, r6, #4
 8017b76:	4628      	mov	r0, r5
 8017b78:	f7f5 fdb4 	bl	800d6e4 <ucdr_deserialize_uint8_t>
 8017b7c:	4604      	mov	r4, r0
 8017b7e:	b130      	cbz	r0, 8017b8e <uxr_deserialize_ObjectVariant+0xb6>
 8017b80:	7933      	ldrb	r3, [r6, #4]
 8017b82:	2b02      	cmp	r3, #2
 8017b84:	d036      	beq.n	8017bf4 <uxr_deserialize_ObjectVariant+0x11c>
 8017b86:	2b03      	cmp	r3, #3
 8017b88:	d03c      	beq.n	8017c04 <uxr_deserialize_ObjectVariant+0x12c>
 8017b8a:	2b01      	cmp	r3, #1
 8017b8c:	d032      	beq.n	8017bf4 <uxr_deserialize_ObjectVariant+0x11c>
 8017b8e:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8017b92:	4628      	mov	r0, r5
 8017b94:	f7f6 fb4c 	bl	800e230 <ucdr_deserialize_int16_t>
 8017b98:	4020      	ands	r0, r4
 8017b9a:	b2c4      	uxtb	r4, r0
 8017b9c:	e7b1      	b.n	8017b02 <uxr_deserialize_ObjectVariant+0x2a>
 8017b9e:	1d31      	adds	r1, r6, #4
 8017ba0:	4628      	mov	r0, r5
 8017ba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017ba6:	f7ff bdcd 	b.w	8017744 <uxr_deserialize_CLIENT_Representation>
 8017baa:	2204      	movs	r2, #4
 8017bac:	4628      	mov	r0, r5
 8017bae:	18b1      	adds	r1, r6, r2
 8017bb0:	f7f5 fc40 	bl	800d434 <ucdr_deserialize_array_uint8_t>
 8017bb4:	4604      	mov	r4, r0
 8017bb6:	2202      	movs	r2, #2
 8017bb8:	f106 0108 	add.w	r1, r6, #8
 8017bbc:	4628      	mov	r0, r5
 8017bbe:	f7f5 fc39 	bl	800d434 <ucdr_deserialize_array_uint8_t>
 8017bc2:	4004      	ands	r4, r0
 8017bc4:	2202      	movs	r2, #2
 8017bc6:	f106 010a 	add.w	r1, r6, #10
 8017bca:	4628      	mov	r0, r5
 8017bcc:	b2e4      	uxtb	r4, r4
 8017bce:	f7f5 fc31 	bl	800d434 <ucdr_deserialize_array_uint8_t>
 8017bd2:	4603      	mov	r3, r0
 8017bd4:	f106 010c 	add.w	r1, r6, #12
 8017bd8:	4628      	mov	r0, r5
 8017bda:	401c      	ands	r4, r3
 8017bdc:	f7f5 fd54 	bl	800d688 <ucdr_deserialize_bool>
 8017be0:	4004      	ands	r4, r0
 8017be2:	e78e      	b.n	8017b02 <uxr_deserialize_ObjectVariant+0x2a>
 8017be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017be8:	68b1      	ldr	r1, [r6, #8]
 8017bea:	4628      	mov	r0, r5
 8017bec:	f001 fb0c 	bl	8019208 <ucdr_deserialize_string>
 8017bf0:	4604      	mov	r4, r0
 8017bf2:	e7b6      	b.n	8017b62 <uxr_deserialize_ObjectVariant+0x8a>
 8017bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017bf8:	68b1      	ldr	r1, [r6, #8]
 8017bfa:	4628      	mov	r0, r5
 8017bfc:	f001 fb04 	bl	8019208 <ucdr_deserialize_string>
 8017c00:	4604      	mov	r4, r0
 8017c02:	e7c4      	b.n	8017b8e <uxr_deserialize_ObjectVariant+0xb6>
 8017c04:	f106 0308 	add.w	r3, r6, #8
 8017c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017c0c:	f106 010c 	add.w	r1, r6, #12
 8017c10:	4628      	mov	r0, r5
 8017c12:	f7f7 f99b 	bl	800ef4c <ucdr_deserialize_sequence_uint8_t>
 8017c16:	4604      	mov	r4, r0
 8017c18:	e7b9      	b.n	8017b8e <uxr_deserialize_ObjectVariant+0xb6>
 8017c1a:	bf00      	nop

08017c1c <uxr_deserialize_BaseObjectRequest>:
 8017c1c:	b570      	push	{r4, r5, r6, lr}
 8017c1e:	2202      	movs	r2, #2
 8017c20:	4605      	mov	r5, r0
 8017c22:	460e      	mov	r6, r1
 8017c24:	f7f5 fc06 	bl	800d434 <ucdr_deserialize_array_uint8_t>
 8017c28:	2202      	movs	r2, #2
 8017c2a:	4604      	mov	r4, r0
 8017c2c:	4628      	mov	r0, r5
 8017c2e:	18b1      	adds	r1, r6, r2
 8017c30:	f7f5 fc00 	bl	800d434 <ucdr_deserialize_array_uint8_t>
 8017c34:	4020      	ands	r0, r4
 8017c36:	b2c0      	uxtb	r0, r0
 8017c38:	bd70      	pop	{r4, r5, r6, pc}
 8017c3a:	bf00      	nop

08017c3c <uxr_serialize_ActivityInfoVariant>:
 8017c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017c40:	460e      	mov	r6, r1
 8017c42:	7809      	ldrb	r1, [r1, #0]
 8017c44:	4680      	mov	r8, r0
 8017c46:	f7f5 fd37 	bl	800d6b8 <ucdr_serialize_uint8_t>
 8017c4a:	4607      	mov	r7, r0
 8017c4c:	b138      	cbz	r0, 8017c5e <uxr_serialize_ActivityInfoVariant+0x22>
 8017c4e:	7833      	ldrb	r3, [r6, #0]
 8017c50:	2b06      	cmp	r3, #6
 8017c52:	f000 8081 	beq.w	8017d58 <uxr_serialize_ActivityInfoVariant+0x11c>
 8017c56:	2b0d      	cmp	r3, #13
 8017c58:	d014      	beq.n	8017c84 <uxr_serialize_ActivityInfoVariant+0x48>
 8017c5a:	2b05      	cmp	r3, #5
 8017c5c:	d002      	beq.n	8017c64 <uxr_serialize_ActivityInfoVariant+0x28>
 8017c5e:	4638      	mov	r0, r7
 8017c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c64:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8017c68:	4640      	mov	r0, r8
 8017c6a:	f7f6 fa61 	bl	800e130 <ucdr_serialize_int16_t>
 8017c6e:	4607      	mov	r7, r0
 8017c70:	4640      	mov	r0, r8
 8017c72:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8017c76:	f7f6 f98b 	bl	800df90 <ucdr_serialize_uint64_t>
 8017c7a:	4038      	ands	r0, r7
 8017c7c:	b2c7      	uxtb	r7, r0
 8017c7e:	4638      	mov	r0, r7
 8017c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c84:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8017c88:	4640      	mov	r0, r8
 8017c8a:	f7f6 fa51 	bl	800e130 <ucdr_serialize_int16_t>
 8017c8e:	68f1      	ldr	r1, [r6, #12]
 8017c90:	4607      	mov	r7, r0
 8017c92:	4640      	mov	r0, r8
 8017c94:	f7f5 ff26 	bl	800dae4 <ucdr_serialize_uint32_t>
 8017c98:	68f3      	ldr	r3, [r6, #12]
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d0ed      	beq.n	8017c7a <uxr_serialize_ActivityInfoVariant+0x3e>
 8017c9e:	b318      	cbz	r0, 8017ce8 <uxr_serialize_ActivityInfoVariant+0xac>
 8017ca0:	f106 090c 	add.w	r9, r6, #12
 8017ca4:	2400      	movs	r4, #0
 8017ca6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8017caa:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8017cae:	7c29      	ldrb	r1, [r5, #16]
 8017cb0:	4640      	mov	r0, r8
 8017cb2:	f7f5 fd01 	bl	800d6b8 <ucdr_serialize_uint8_t>
 8017cb6:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8017cba:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8017cbe:	2800      	cmp	r0, #0
 8017cc0:	d051      	beq.n	8017d66 <uxr_serialize_ActivityInfoVariant+0x12a>
 8017cc2:	7c2b      	ldrb	r3, [r5, #16]
 8017cc4:	00c9      	lsls	r1, r1, #3
 8017cc6:	2b03      	cmp	r3, #3
 8017cc8:	d854      	bhi.n	8017d74 <uxr_serialize_ActivityInfoVariant+0x138>
 8017cca:	e8df f003 	tbb	[pc, r3]
 8017cce:	2133      	.short	0x2133
 8017cd0:	020f      	.short	0x020f
 8017cd2:	4449      	add	r1, r9
 8017cd4:	4640      	mov	r0, r8
 8017cd6:	6889      	ldr	r1, [r1, #8]
 8017cd8:	f001 fa86 	bl	80191e8 <ucdr_serialize_string>
 8017cdc:	3401      	adds	r4, #1
 8017cde:	68f2      	ldr	r2, [r6, #12]
 8017ce0:	4294      	cmp	r4, r2
 8017ce2:	d244      	bcs.n	8017d6e <uxr_serialize_ActivityInfoVariant+0x132>
 8017ce4:	2800      	cmp	r0, #0
 8017ce6:	d1de      	bne.n	8017ca6 <uxr_serialize_ActivityInfoVariant+0x6a>
 8017ce8:	2700      	movs	r7, #0
 8017cea:	e7b8      	b.n	8017c5e <uxr_serialize_ActivityInfoVariant+0x22>
 8017cec:	3108      	adds	r1, #8
 8017cee:	44a2      	add	sl, r4
 8017cf0:	2210      	movs	r2, #16
 8017cf2:	4640      	mov	r0, r8
 8017cf4:	4449      	add	r1, r9
 8017cf6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8017cfa:	f7f5 fb37 	bl	800d36c <ucdr_serialize_array_uint8_t>
 8017cfe:	4605      	mov	r5, r0
 8017d00:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 8017d04:	4640      	mov	r0, r8
 8017d06:	f7f5 feed 	bl	800dae4 <ucdr_serialize_uint32_t>
 8017d0a:	4028      	ands	r0, r5
 8017d0c:	b2c0      	uxtb	r0, r0
 8017d0e:	e7e5      	b.n	8017cdc <uxr_serialize_ActivityInfoVariant+0xa0>
 8017d10:	3108      	adds	r1, #8
 8017d12:	44a2      	add	sl, r4
 8017d14:	2204      	movs	r2, #4
 8017d16:	4640      	mov	r0, r8
 8017d18:	4449      	add	r1, r9
 8017d1a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8017d1e:	f7f5 fb25 	bl	800d36c <ucdr_serialize_array_uint8_t>
 8017d22:	4605      	mov	r5, r0
 8017d24:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 8017d28:	4640      	mov	r0, r8
 8017d2a:	f7f5 fcf1 	bl	800d710 <ucdr_serialize_uint16_t>
 8017d2e:	4028      	ands	r0, r5
 8017d30:	b2c0      	uxtb	r0, r0
 8017d32:	e7d3      	b.n	8017cdc <uxr_serialize_ActivityInfoVariant+0xa0>
 8017d34:	3108      	adds	r1, #8
 8017d36:	44a2      	add	sl, r4
 8017d38:	2202      	movs	r2, #2
 8017d3a:	4640      	mov	r0, r8
 8017d3c:	4449      	add	r1, r9
 8017d3e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8017d42:	f7f5 fb13 	bl	800d36c <ucdr_serialize_array_uint8_t>
 8017d46:	4605      	mov	r5, r0
 8017d48:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8017d4c:	4640      	mov	r0, r8
 8017d4e:	f7f5 fcb3 	bl	800d6b8 <ucdr_serialize_uint8_t>
 8017d52:	4028      	ands	r0, r5
 8017d54:	b2c0      	uxtb	r0, r0
 8017d56:	e7c1      	b.n	8017cdc <uxr_serialize_ActivityInfoVariant+0xa0>
 8017d58:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8017d5c:	4640      	mov	r0, r8
 8017d5e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d62:	f7f6 b9e5 	b.w	800e130 <ucdr_serialize_int16_t>
 8017d66:	3401      	adds	r4, #1
 8017d68:	68f2      	ldr	r2, [r6, #12]
 8017d6a:	42a2      	cmp	r2, r4
 8017d6c:	d8bc      	bhi.n	8017ce8 <uxr_serialize_ActivityInfoVariant+0xac>
 8017d6e:	4007      	ands	r7, r0
 8017d70:	b2ff      	uxtb	r7, r7
 8017d72:	e774      	b.n	8017c5e <uxr_serialize_ActivityInfoVariant+0x22>
 8017d74:	3401      	adds	r4, #1
 8017d76:	68f3      	ldr	r3, [r6, #12]
 8017d78:	3518      	adds	r5, #24
 8017d7a:	429c      	cmp	r4, r3
 8017d7c:	d397      	bcc.n	8017cae <uxr_serialize_ActivityInfoVariant+0x72>
 8017d7e:	e76e      	b.n	8017c5e <uxr_serialize_ActivityInfoVariant+0x22>

08017d80 <uxr_deserialize_BaseObjectReply>:
 8017d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d84:	2202      	movs	r2, #2
 8017d86:	4606      	mov	r6, r0
 8017d88:	460f      	mov	r7, r1
 8017d8a:	f7f5 fb53 	bl	800d434 <ucdr_deserialize_array_uint8_t>
 8017d8e:	2202      	movs	r2, #2
 8017d90:	4605      	mov	r5, r0
 8017d92:	4630      	mov	r0, r6
 8017d94:	18b9      	adds	r1, r7, r2
 8017d96:	f7f5 fb4d 	bl	800d434 <ucdr_deserialize_array_uint8_t>
 8017d9a:	4680      	mov	r8, r0
 8017d9c:	1d39      	adds	r1, r7, #4
 8017d9e:	4630      	mov	r0, r6
 8017da0:	f7f5 fca0 	bl	800d6e4 <ucdr_deserialize_uint8_t>
 8017da4:	ea05 0508 	and.w	r5, r5, r8
 8017da8:	4604      	mov	r4, r0
 8017daa:	1d79      	adds	r1, r7, #5
 8017dac:	4630      	mov	r0, r6
 8017dae:	402c      	ands	r4, r5
 8017db0:	f7f5 fc98 	bl	800d6e4 <ucdr_deserialize_uint8_t>
 8017db4:	4020      	ands	r0, r4
 8017db6:	b2c0      	uxtb	r0, r0
 8017db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017dbc <uxr_serialize_ReadSpecification>:
 8017dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017dbe:	460e      	mov	r6, r1
 8017dc0:	4607      	mov	r7, r0
 8017dc2:	7809      	ldrb	r1, [r1, #0]
 8017dc4:	f7f5 fc78 	bl	800d6b8 <ucdr_serialize_uint8_t>
 8017dc8:	4604      	mov	r4, r0
 8017dca:	7871      	ldrb	r1, [r6, #1]
 8017dcc:	4638      	mov	r0, r7
 8017dce:	f7f5 fc73 	bl	800d6b8 <ucdr_serialize_uint8_t>
 8017dd2:	4004      	ands	r4, r0
 8017dd4:	78b1      	ldrb	r1, [r6, #2]
 8017dd6:	4638      	mov	r0, r7
 8017dd8:	f7f5 fc40 	bl	800d65c <ucdr_serialize_bool>
 8017ddc:	78b3      	ldrb	r3, [r6, #2]
 8017dde:	b2e4      	uxtb	r4, r4
 8017de0:	4004      	ands	r4, r0
 8017de2:	b943      	cbnz	r3, 8017df6 <uxr_serialize_ReadSpecification+0x3a>
 8017de4:	7a31      	ldrb	r1, [r6, #8]
 8017de6:	4638      	mov	r0, r7
 8017de8:	f7f5 fc38 	bl	800d65c <ucdr_serialize_bool>
 8017dec:	7a33      	ldrb	r3, [r6, #8]
 8017dee:	4004      	ands	r4, r0
 8017df0:	b93b      	cbnz	r3, 8017e02 <uxr_serialize_ReadSpecification+0x46>
 8017df2:	4620      	mov	r0, r4
 8017df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017df6:	6871      	ldr	r1, [r6, #4]
 8017df8:	4638      	mov	r0, r7
 8017dfa:	f001 f9f5 	bl	80191e8 <ucdr_serialize_string>
 8017dfe:	4004      	ands	r4, r0
 8017e00:	e7f0      	b.n	8017de4 <uxr_serialize_ReadSpecification+0x28>
 8017e02:	8971      	ldrh	r1, [r6, #10]
 8017e04:	4638      	mov	r0, r7
 8017e06:	f7f5 fc83 	bl	800d710 <ucdr_serialize_uint16_t>
 8017e0a:	4605      	mov	r5, r0
 8017e0c:	89b1      	ldrh	r1, [r6, #12]
 8017e0e:	4638      	mov	r0, r7
 8017e10:	f7f5 fc7e 	bl	800d710 <ucdr_serialize_uint16_t>
 8017e14:	4005      	ands	r5, r0
 8017e16:	89f1      	ldrh	r1, [r6, #14]
 8017e18:	4638      	mov	r0, r7
 8017e1a:	b2ed      	uxtb	r5, r5
 8017e1c:	f7f5 fc78 	bl	800d710 <ucdr_serialize_uint16_t>
 8017e20:	8a31      	ldrh	r1, [r6, #16]
 8017e22:	4025      	ands	r5, r4
 8017e24:	4604      	mov	r4, r0
 8017e26:	4638      	mov	r0, r7
 8017e28:	4025      	ands	r5, r4
 8017e2a:	f7f5 fc71 	bl	800d710 <ucdr_serialize_uint16_t>
 8017e2e:	ea00 0405 	and.w	r4, r0, r5
 8017e32:	4620      	mov	r0, r4
 8017e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e36:	bf00      	nop

08017e38 <uxr_serialize_CREATE_CLIENT_Payload>:
 8017e38:	f7ff bc2c 	b.w	8017694 <uxr_serialize_CLIENT_Representation>

08017e3c <uxr_serialize_CREATE_Payload>:
 8017e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e3e:	2202      	movs	r2, #2
 8017e40:	4607      	mov	r7, r0
 8017e42:	460e      	mov	r6, r1
 8017e44:	f7f5 fa92 	bl	800d36c <ucdr_serialize_array_uint8_t>
 8017e48:	2202      	movs	r2, #2
 8017e4a:	4605      	mov	r5, r0
 8017e4c:	4638      	mov	r0, r7
 8017e4e:	18b1      	adds	r1, r6, r2
 8017e50:	f7f5 fa8c 	bl	800d36c <ucdr_serialize_array_uint8_t>
 8017e54:	7931      	ldrb	r1, [r6, #4]
 8017e56:	4604      	mov	r4, r0
 8017e58:	4638      	mov	r0, r7
 8017e5a:	f7f5 fc2d 	bl	800d6b8 <ucdr_serialize_uint8_t>
 8017e5e:	b170      	cbz	r0, 8017e7e <uxr_serialize_CREATE_Payload+0x42>
 8017e60:	7933      	ldrb	r3, [r6, #4]
 8017e62:	402c      	ands	r4, r5
 8017e64:	3b01      	subs	r3, #1
 8017e66:	b2e4      	uxtb	r4, r4
 8017e68:	2b0d      	cmp	r3, #13
 8017e6a:	d809      	bhi.n	8017e80 <uxr_serialize_CREATE_Payload+0x44>
 8017e6c:	e8df f003 	tbb	[pc, r3]
 8017e70:	23230a4c 	.word	0x23230a4c
 8017e74:	0a0a0a0a 	.word	0x0a0a0a0a
 8017e78:	12121208 	.word	0x12121208
 8017e7c:	3e45      	.short	0x3e45
 8017e7e:	2400      	movs	r4, #0
 8017e80:	4620      	mov	r0, r4
 8017e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e84:	f106 0108 	add.w	r1, r6, #8
 8017e88:	4638      	mov	r0, r7
 8017e8a:	f7ff fd09 	bl	80178a0 <uxr_serialize_DATAWRITER_Representation>
 8017e8e:	4004      	ands	r4, r0
 8017e90:	4620      	mov	r0, r4
 8017e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e94:	7a31      	ldrb	r1, [r6, #8]
 8017e96:	4638      	mov	r0, r7
 8017e98:	f7f5 fc0e 	bl	800d6b8 <ucdr_serialize_uint8_t>
 8017e9c:	2800      	cmp	r0, #0
 8017e9e:	d0ee      	beq.n	8017e7e <uxr_serialize_CREATE_Payload+0x42>
 8017ea0:	7a33      	ldrb	r3, [r6, #8]
 8017ea2:	2b01      	cmp	r3, #1
 8017ea4:	d001      	beq.n	8017eaa <uxr_serialize_CREATE_Payload+0x6e>
 8017ea6:	2b02      	cmp	r3, #2
 8017ea8:	d1ea      	bne.n	8017e80 <uxr_serialize_CREATE_Payload+0x44>
 8017eaa:	68f1      	ldr	r1, [r6, #12]
 8017eac:	4638      	mov	r0, r7
 8017eae:	f001 f99b 	bl	80191e8 <ucdr_serialize_string>
 8017eb2:	4004      	ands	r4, r0
 8017eb4:	e7e4      	b.n	8017e80 <uxr_serialize_CREATE_Payload+0x44>
 8017eb6:	7a31      	ldrb	r1, [r6, #8]
 8017eb8:	4638      	mov	r0, r7
 8017eba:	f7f5 fbfd 	bl	800d6b8 <ucdr_serialize_uint8_t>
 8017ebe:	4605      	mov	r5, r0
 8017ec0:	b158      	cbz	r0, 8017eda <uxr_serialize_CREATE_Payload+0x9e>
 8017ec2:	7a33      	ldrb	r3, [r6, #8]
 8017ec4:	2b02      	cmp	r3, #2
 8017ec6:	d034      	beq.n	8017f32 <uxr_serialize_CREATE_Payload+0xf6>
 8017ec8:	2b03      	cmp	r3, #3
 8017eca:	d106      	bne.n	8017eda <uxr_serialize_CREATE_Payload+0x9e>
 8017ecc:	68f2      	ldr	r2, [r6, #12]
 8017ece:	f106 0110 	add.w	r1, r6, #16
 8017ed2:	4638      	mov	r0, r7
 8017ed4:	f7f7 f828 	bl	800ef28 <ucdr_serialize_sequence_uint8_t>
 8017ed8:	4605      	mov	r5, r0
 8017eda:	2202      	movs	r2, #2
 8017edc:	f506 7104 	add.w	r1, r6, #528	; 0x210
 8017ee0:	4638      	mov	r0, r7
 8017ee2:	f7f5 fa43 	bl	800d36c <ucdr_serialize_array_uint8_t>
 8017ee6:	4028      	ands	r0, r5
 8017ee8:	4004      	ands	r4, r0
 8017eea:	e7c9      	b.n	8017e80 <uxr_serialize_CREATE_Payload+0x44>
 8017eec:	f106 0108 	add.w	r1, r6, #8
 8017ef0:	4638      	mov	r0, r7
 8017ef2:	f7ff fbcf 	bl	8017694 <uxr_serialize_CLIENT_Representation>
 8017ef6:	4004      	ands	r4, r0
 8017ef8:	e7c2      	b.n	8017e80 <uxr_serialize_CREATE_Payload+0x44>
 8017efa:	f106 0108 	add.w	r1, r6, #8
 8017efe:	4638      	mov	r0, r7
 8017f00:	f7ff fc84 	bl	801780c <uxr_serialize_AGENT_Representation>
 8017f04:	4004      	ands	r4, r0
 8017f06:	e7bb      	b.n	8017e80 <uxr_serialize_CREATE_Payload+0x44>
 8017f08:	7a31      	ldrb	r1, [r6, #8]
 8017f0a:	4638      	mov	r0, r7
 8017f0c:	f7f5 fbd4 	bl	800d6b8 <ucdr_serialize_uint8_t>
 8017f10:	4605      	mov	r5, r0
 8017f12:	b130      	cbz	r0, 8017f22 <uxr_serialize_CREATE_Payload+0xe6>
 8017f14:	7a33      	ldrb	r3, [r6, #8]
 8017f16:	2b02      	cmp	r3, #2
 8017f18:	d011      	beq.n	8017f3e <uxr_serialize_CREATE_Payload+0x102>
 8017f1a:	2b03      	cmp	r3, #3
 8017f1c:	d015      	beq.n	8017f4a <uxr_serialize_CREATE_Payload+0x10e>
 8017f1e:	2b01      	cmp	r3, #1
 8017f20:	d00d      	beq.n	8017f3e <uxr_serialize_CREATE_Payload+0x102>
 8017f22:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 8017f26:	4638      	mov	r0, r7
 8017f28:	f7f6 f902 	bl	800e130 <ucdr_serialize_int16_t>
 8017f2c:	4028      	ands	r0, r5
 8017f2e:	4004      	ands	r4, r0
 8017f30:	e7a6      	b.n	8017e80 <uxr_serialize_CREATE_Payload+0x44>
 8017f32:	68f1      	ldr	r1, [r6, #12]
 8017f34:	4638      	mov	r0, r7
 8017f36:	f001 f957 	bl	80191e8 <ucdr_serialize_string>
 8017f3a:	4605      	mov	r5, r0
 8017f3c:	e7cd      	b.n	8017eda <uxr_serialize_CREATE_Payload+0x9e>
 8017f3e:	68f1      	ldr	r1, [r6, #12]
 8017f40:	4638      	mov	r0, r7
 8017f42:	f001 f951 	bl	80191e8 <ucdr_serialize_string>
 8017f46:	4605      	mov	r5, r0
 8017f48:	e7eb      	b.n	8017f22 <uxr_serialize_CREATE_Payload+0xe6>
 8017f4a:	68f2      	ldr	r2, [r6, #12]
 8017f4c:	f106 0110 	add.w	r1, r6, #16
 8017f50:	4638      	mov	r0, r7
 8017f52:	f7f6 ffe9 	bl	800ef28 <ucdr_serialize_sequence_uint8_t>
 8017f56:	4605      	mov	r5, r0
 8017f58:	e7e3      	b.n	8017f22 <uxr_serialize_CREATE_Payload+0xe6>
 8017f5a:	bf00      	nop

08017f5c <uxr_deserialize_GET_INFO_Payload>:
 8017f5c:	b570      	push	{r4, r5, r6, lr}
 8017f5e:	2202      	movs	r2, #2
 8017f60:	4605      	mov	r5, r0
 8017f62:	460e      	mov	r6, r1
 8017f64:	f7f5 fa66 	bl	800d434 <ucdr_deserialize_array_uint8_t>
 8017f68:	2202      	movs	r2, #2
 8017f6a:	4604      	mov	r4, r0
 8017f6c:	4628      	mov	r0, r5
 8017f6e:	18b1      	adds	r1, r6, r2
 8017f70:	f7f5 fa60 	bl	800d434 <ucdr_deserialize_array_uint8_t>
 8017f74:	4603      	mov	r3, r0
 8017f76:	1d31      	adds	r1, r6, #4
 8017f78:	4628      	mov	r0, r5
 8017f7a:	401c      	ands	r4, r3
 8017f7c:	f7f5 fee2 	bl	800dd44 <ucdr_deserialize_uint32_t>
 8017f80:	b2e4      	uxtb	r4, r4
 8017f82:	4020      	ands	r0, r4
 8017f84:	bd70      	pop	{r4, r5, r6, pc}
 8017f86:	bf00      	nop

08017f88 <uxr_serialize_DELETE_Payload>:
 8017f88:	b570      	push	{r4, r5, r6, lr}
 8017f8a:	2202      	movs	r2, #2
 8017f8c:	4605      	mov	r5, r0
 8017f8e:	460e      	mov	r6, r1
 8017f90:	f7f5 f9ec 	bl	800d36c <ucdr_serialize_array_uint8_t>
 8017f94:	2202      	movs	r2, #2
 8017f96:	4604      	mov	r4, r0
 8017f98:	4628      	mov	r0, r5
 8017f9a:	18b1      	adds	r1, r6, r2
 8017f9c:	f7f5 f9e6 	bl	800d36c <ucdr_serialize_array_uint8_t>
 8017fa0:	4020      	ands	r0, r4
 8017fa2:	b2c0      	uxtb	r0, r0
 8017fa4:	bd70      	pop	{r4, r5, r6, pc}
 8017fa6:	bf00      	nop

08017fa8 <uxr_deserialize_STATUS_AGENT_Payload>:
 8017fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017fac:	460e      	mov	r6, r1
 8017fae:	4605      	mov	r5, r0
 8017fb0:	f7f5 fb98 	bl	800d6e4 <ucdr_deserialize_uint8_t>
 8017fb4:	4604      	mov	r4, r0
 8017fb6:	1c71      	adds	r1, r6, #1
 8017fb8:	4628      	mov	r0, r5
 8017fba:	f7f5 fb93 	bl	800d6e4 <ucdr_deserialize_uint8_t>
 8017fbe:	2204      	movs	r2, #4
 8017fc0:	4681      	mov	r9, r0
 8017fc2:	4628      	mov	r0, r5
 8017fc4:	18b1      	adds	r1, r6, r2
 8017fc6:	f7f5 fa35 	bl	800d434 <ucdr_deserialize_array_uint8_t>
 8017fca:	f106 0108 	add.w	r1, r6, #8
 8017fce:	4680      	mov	r8, r0
 8017fd0:	2202      	movs	r2, #2
 8017fd2:	4628      	mov	r0, r5
 8017fd4:	f7f5 fa2e 	bl	800d434 <ucdr_deserialize_array_uint8_t>
 8017fd8:	ea04 0309 	and.w	r3, r4, r9
 8017fdc:	4607      	mov	r7, r0
 8017fde:	2202      	movs	r2, #2
 8017fe0:	b2db      	uxtb	r3, r3
 8017fe2:	f106 010a 	add.w	r1, r6, #10
 8017fe6:	4628      	mov	r0, r5
 8017fe8:	ea03 0408 	and.w	r4, r3, r8
 8017fec:	f7f5 fa22 	bl	800d434 <ucdr_deserialize_array_uint8_t>
 8017ff0:	4603      	mov	r3, r0
 8017ff2:	4628      	mov	r0, r5
 8017ff4:	403c      	ands	r4, r7
 8017ff6:	f106 010c 	add.w	r1, r6, #12
 8017ffa:	461d      	mov	r5, r3
 8017ffc:	f7f5 fb44 	bl	800d688 <ucdr_deserialize_bool>
 8018000:	4025      	ands	r5, r4
 8018002:	4028      	ands	r0, r5
 8018004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018008 <uxr_deserialize_STATUS_Payload>:
 8018008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801800c:	2202      	movs	r2, #2
 801800e:	4606      	mov	r6, r0
 8018010:	460f      	mov	r7, r1
 8018012:	f7f5 fa0f 	bl	800d434 <ucdr_deserialize_array_uint8_t>
 8018016:	2202      	movs	r2, #2
 8018018:	4605      	mov	r5, r0
 801801a:	4630      	mov	r0, r6
 801801c:	18b9      	adds	r1, r7, r2
 801801e:	f7f5 fa09 	bl	800d434 <ucdr_deserialize_array_uint8_t>
 8018022:	4680      	mov	r8, r0
 8018024:	1d39      	adds	r1, r7, #4
 8018026:	4630      	mov	r0, r6
 8018028:	f7f5 fb5c 	bl	800d6e4 <ucdr_deserialize_uint8_t>
 801802c:	ea05 0508 	and.w	r5, r5, r8
 8018030:	4604      	mov	r4, r0
 8018032:	1d79      	adds	r1, r7, #5
 8018034:	4630      	mov	r0, r6
 8018036:	402c      	ands	r4, r5
 8018038:	f7f5 fb54 	bl	800d6e4 <ucdr_deserialize_uint8_t>
 801803c:	4020      	ands	r0, r4
 801803e:	b2c0      	uxtb	r0, r0
 8018040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018044 <uxr_serialize_INFO_Payload>:
 8018044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018048:	2202      	movs	r2, #2
 801804a:	460c      	mov	r4, r1
 801804c:	4605      	mov	r5, r0
 801804e:	f7f5 f98d 	bl	800d36c <ucdr_serialize_array_uint8_t>
 8018052:	2202      	movs	r2, #2
 8018054:	4680      	mov	r8, r0
 8018056:	4628      	mov	r0, r5
 8018058:	18a1      	adds	r1, r4, r2
 801805a:	f7f5 f987 	bl	800d36c <ucdr_serialize_array_uint8_t>
 801805e:	4607      	mov	r7, r0
 8018060:	7921      	ldrb	r1, [r4, #4]
 8018062:	4628      	mov	r0, r5
 8018064:	f7f5 fb28 	bl	800d6b8 <ucdr_serialize_uint8_t>
 8018068:	ea08 0807 	and.w	r8, r8, r7
 801806c:	4606      	mov	r6, r0
 801806e:	7961      	ldrb	r1, [r4, #5]
 8018070:	4628      	mov	r0, r5
 8018072:	ea06 0608 	and.w	r6, r6, r8
 8018076:	f7f5 fb1f 	bl	800d6b8 <ucdr_serialize_uint8_t>
 801807a:	7a21      	ldrb	r1, [r4, #8]
 801807c:	4030      	ands	r0, r6
 801807e:	b2c7      	uxtb	r7, r0
 8018080:	4628      	mov	r0, r5
 8018082:	f7f5 faeb 	bl	800d65c <ucdr_serialize_bool>
 8018086:	7a23      	ldrb	r3, [r4, #8]
 8018088:	4606      	mov	r6, r0
 801808a:	b96b      	cbnz	r3, 80180a8 <uxr_serialize_INFO_Payload+0x64>
 801808c:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 8018090:	4628      	mov	r0, r5
 8018092:	f7f5 fae3 	bl	800d65c <ucdr_serialize_bool>
 8018096:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 801809a:	4030      	ands	r0, r6
 801809c:	b2c6      	uxtb	r6, r0
 801809e:	b983      	cbnz	r3, 80180c2 <uxr_serialize_INFO_Payload+0x7e>
 80180a0:	ea06 0007 	and.w	r0, r6, r7
 80180a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180a8:	7b21      	ldrb	r1, [r4, #12]
 80180aa:	4628      	mov	r0, r5
 80180ac:	f7f5 fb04 	bl	800d6b8 <ucdr_serialize_uint8_t>
 80180b0:	b188      	cbz	r0, 80180d6 <uxr_serialize_INFO_Payload+0x92>
 80180b2:	f104 010c 	add.w	r1, r4, #12
 80180b6:	4628      	mov	r0, r5
 80180b8:	f7ff fc1a 	bl	80178f0 <uxr_serialize_ObjectVariant.part.0>
 80180bc:	4030      	ands	r0, r6
 80180be:	b2c6      	uxtb	r6, r0
 80180c0:	e7e4      	b.n	801808c <uxr_serialize_INFO_Payload+0x48>
 80180c2:	f504 7108 	add.w	r1, r4, #544	; 0x220
 80180c6:	4628      	mov	r0, r5
 80180c8:	f7ff fdb8 	bl	8017c3c <uxr_serialize_ActivityInfoVariant>
 80180cc:	4006      	ands	r6, r0
 80180ce:	ea06 0007 	and.w	r0, r6, r7
 80180d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180d6:	4606      	mov	r6, r0
 80180d8:	e7d8      	b.n	801808c <uxr_serialize_INFO_Payload+0x48>
 80180da:	bf00      	nop

080180dc <uxr_serialize_READ_DATA_Payload>:
 80180dc:	b570      	push	{r4, r5, r6, lr}
 80180de:	2202      	movs	r2, #2
 80180e0:	4605      	mov	r5, r0
 80180e2:	460e      	mov	r6, r1
 80180e4:	f7f5 f942 	bl	800d36c <ucdr_serialize_array_uint8_t>
 80180e8:	2202      	movs	r2, #2
 80180ea:	4604      	mov	r4, r0
 80180ec:	4628      	mov	r0, r5
 80180ee:	18b1      	adds	r1, r6, r2
 80180f0:	f7f5 f93c 	bl	800d36c <ucdr_serialize_array_uint8_t>
 80180f4:	4603      	mov	r3, r0
 80180f6:	1d31      	adds	r1, r6, #4
 80180f8:	4628      	mov	r0, r5
 80180fa:	401c      	ands	r4, r3
 80180fc:	f7ff fe5e 	bl	8017dbc <uxr_serialize_ReadSpecification>
 8018100:	b2e4      	uxtb	r4, r4
 8018102:	4020      	ands	r0, r4
 8018104:	bd70      	pop	{r4, r5, r6, pc}
 8018106:	bf00      	nop

08018108 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8018108:	b570      	push	{r4, r5, r6, lr}
 801810a:	2202      	movs	r2, #2
 801810c:	4605      	mov	r5, r0
 801810e:	460e      	mov	r6, r1
 8018110:	f7f5 f92c 	bl	800d36c <ucdr_serialize_array_uint8_t>
 8018114:	2202      	movs	r2, #2
 8018116:	4604      	mov	r4, r0
 8018118:	4628      	mov	r0, r5
 801811a:	18b1      	adds	r1, r6, r2
 801811c:	f7f5 f926 	bl	800d36c <ucdr_serialize_array_uint8_t>
 8018120:	4020      	ands	r0, r4
 8018122:	b2c0      	uxtb	r0, r0
 8018124:	bd70      	pop	{r4, r5, r6, pc}
 8018126:	bf00      	nop

08018128 <uxr_serialize_ACKNACK_Payload>:
 8018128:	b570      	push	{r4, r5, r6, lr}
 801812a:	460c      	mov	r4, r1
 801812c:	4605      	mov	r5, r0
 801812e:	460e      	mov	r6, r1
 8018130:	f834 1b02 	ldrh.w	r1, [r4], #2
 8018134:	f7f5 faec 	bl	800d710 <ucdr_serialize_uint16_t>
 8018138:	2202      	movs	r2, #2
 801813a:	4621      	mov	r1, r4
 801813c:	4604      	mov	r4, r0
 801813e:	4628      	mov	r0, r5
 8018140:	f7f5 f914 	bl	800d36c <ucdr_serialize_array_uint8_t>
 8018144:	4603      	mov	r3, r0
 8018146:	7931      	ldrb	r1, [r6, #4]
 8018148:	4628      	mov	r0, r5
 801814a:	401c      	ands	r4, r3
 801814c:	f7f5 fab4 	bl	800d6b8 <ucdr_serialize_uint8_t>
 8018150:	b2e4      	uxtb	r4, r4
 8018152:	4020      	ands	r0, r4
 8018154:	bd70      	pop	{r4, r5, r6, pc}
 8018156:	bf00      	nop

08018158 <uxr_deserialize_ACKNACK_Payload>:
 8018158:	b570      	push	{r4, r5, r6, lr}
 801815a:	460e      	mov	r6, r1
 801815c:	4605      	mov	r5, r0
 801815e:	f7f5 fbd7 	bl	800d910 <ucdr_deserialize_uint16_t>
 8018162:	2202      	movs	r2, #2
 8018164:	4604      	mov	r4, r0
 8018166:	4628      	mov	r0, r5
 8018168:	18b1      	adds	r1, r6, r2
 801816a:	f7f5 f963 	bl	800d434 <ucdr_deserialize_array_uint8_t>
 801816e:	4603      	mov	r3, r0
 8018170:	1d31      	adds	r1, r6, #4
 8018172:	4628      	mov	r0, r5
 8018174:	401c      	ands	r4, r3
 8018176:	f7f5 fab5 	bl	800d6e4 <ucdr_deserialize_uint8_t>
 801817a:	b2e4      	uxtb	r4, r4
 801817c:	4020      	ands	r0, r4
 801817e:	bd70      	pop	{r4, r5, r6, pc}

08018180 <uxr_serialize_HEARTBEAT_Payload>:
 8018180:	b570      	push	{r4, r5, r6, lr}
 8018182:	460d      	mov	r5, r1
 8018184:	4606      	mov	r6, r0
 8018186:	8809      	ldrh	r1, [r1, #0]
 8018188:	f7f5 fac2 	bl	800d710 <ucdr_serialize_uint16_t>
 801818c:	8869      	ldrh	r1, [r5, #2]
 801818e:	4604      	mov	r4, r0
 8018190:	4630      	mov	r0, r6
 8018192:	f7f5 fabd 	bl	800d710 <ucdr_serialize_uint16_t>
 8018196:	4603      	mov	r3, r0
 8018198:	7929      	ldrb	r1, [r5, #4]
 801819a:	4630      	mov	r0, r6
 801819c:	401c      	ands	r4, r3
 801819e:	f7f5 fa8b 	bl	800d6b8 <ucdr_serialize_uint8_t>
 80181a2:	b2e4      	uxtb	r4, r4
 80181a4:	4020      	ands	r0, r4
 80181a6:	bd70      	pop	{r4, r5, r6, pc}

080181a8 <uxr_deserialize_HEARTBEAT_Payload>:
 80181a8:	b570      	push	{r4, r5, r6, lr}
 80181aa:	460e      	mov	r6, r1
 80181ac:	4605      	mov	r5, r0
 80181ae:	f7f5 fbaf 	bl	800d910 <ucdr_deserialize_uint16_t>
 80181b2:	4604      	mov	r4, r0
 80181b4:	1cb1      	adds	r1, r6, #2
 80181b6:	4628      	mov	r0, r5
 80181b8:	f7f5 fbaa 	bl	800d910 <ucdr_deserialize_uint16_t>
 80181bc:	4603      	mov	r3, r0
 80181be:	1d31      	adds	r1, r6, #4
 80181c0:	4628      	mov	r0, r5
 80181c2:	401c      	ands	r4, r3
 80181c4:	f7f5 fa8e 	bl	800d6e4 <ucdr_deserialize_uint8_t>
 80181c8:	b2e4      	uxtb	r4, r4
 80181ca:	4020      	ands	r0, r4
 80181cc:	bd70      	pop	{r4, r5, r6, pc}
 80181ce:	bf00      	nop

080181d0 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80181d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181d4:	460e      	mov	r6, r1
 80181d6:	4605      	mov	r5, r0
 80181d8:	f7f6 f9ce 	bl	800e578 <ucdr_deserialize_int32_t>
 80181dc:	4607      	mov	r7, r0
 80181de:	1d31      	adds	r1, r6, #4
 80181e0:	4628      	mov	r0, r5
 80181e2:	f7f5 fdaf 	bl	800dd44 <ucdr_deserialize_uint32_t>
 80181e6:	4680      	mov	r8, r0
 80181e8:	f106 0108 	add.w	r1, r6, #8
 80181ec:	4628      	mov	r0, r5
 80181ee:	f7f6 f9c3 	bl	800e578 <ucdr_deserialize_int32_t>
 80181f2:	ea07 0708 	and.w	r7, r7, r8
 80181f6:	4604      	mov	r4, r0
 80181f8:	f106 010c 	add.w	r1, r6, #12
 80181fc:	4628      	mov	r0, r5
 80181fe:	403c      	ands	r4, r7
 8018200:	f7f5 fda0 	bl	800dd44 <ucdr_deserialize_uint32_t>
 8018204:	f106 0110 	add.w	r1, r6, #16
 8018208:	4004      	ands	r4, r0
 801820a:	4628      	mov	r0, r5
 801820c:	f7f6 f9b4 	bl	800e578 <ucdr_deserialize_int32_t>
 8018210:	4603      	mov	r3, r0
 8018212:	b2e4      	uxtb	r4, r4
 8018214:	4628      	mov	r0, r5
 8018216:	461d      	mov	r5, r3
 8018218:	f106 0114 	add.w	r1, r6, #20
 801821c:	f7f5 fd92 	bl	800dd44 <ucdr_deserialize_uint32_t>
 8018220:	402c      	ands	r4, r5
 8018222:	4020      	ands	r0, r4
 8018224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018228 <uxr_serialize_SampleIdentity>:
 8018228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801822c:	4604      	mov	r4, r0
 801822e:	460d      	mov	r5, r1
 8018230:	220c      	movs	r2, #12
 8018232:	f7f5 f89b 	bl	800d36c <ucdr_serialize_array_uint8_t>
 8018236:	2203      	movs	r2, #3
 8018238:	f105 010c 	add.w	r1, r5, #12
 801823c:	4607      	mov	r7, r0
 801823e:	4620      	mov	r0, r4
 8018240:	f7f5 f894 	bl	800d36c <ucdr_serialize_array_uint8_t>
 8018244:	7be9      	ldrb	r1, [r5, #15]
 8018246:	4680      	mov	r8, r0
 8018248:	4620      	mov	r0, r4
 801824a:	f7f5 fa35 	bl	800d6b8 <ucdr_serialize_uint8_t>
 801824e:	6929      	ldr	r1, [r5, #16]
 8018250:	4606      	mov	r6, r0
 8018252:	4620      	mov	r0, r4
 8018254:	f7f6 f860 	bl	800e318 <ucdr_serialize_int32_t>
 8018258:	ea07 0708 	and.w	r7, r7, r8
 801825c:	4603      	mov	r3, r0
 801825e:	4620      	mov	r0, r4
 8018260:	403e      	ands	r6, r7
 8018262:	6969      	ldr	r1, [r5, #20]
 8018264:	461c      	mov	r4, r3
 8018266:	f7f5 fc3d 	bl	800dae4 <ucdr_serialize_uint32_t>
 801826a:	4034      	ands	r4, r6
 801826c:	4020      	ands	r0, r4
 801826e:	b2c0      	uxtb	r0, r0
 8018270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018274 <uxr_deserialize_SampleIdentity>:
 8018274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018278:	4604      	mov	r4, r0
 801827a:	460d      	mov	r5, r1
 801827c:	220c      	movs	r2, #12
 801827e:	f7f5 f8d9 	bl	800d434 <ucdr_deserialize_array_uint8_t>
 8018282:	2203      	movs	r2, #3
 8018284:	f105 010c 	add.w	r1, r5, #12
 8018288:	4607      	mov	r7, r0
 801828a:	4620      	mov	r0, r4
 801828c:	f7f5 f8d2 	bl	800d434 <ucdr_deserialize_array_uint8_t>
 8018290:	f105 010f 	add.w	r1, r5, #15
 8018294:	4680      	mov	r8, r0
 8018296:	4620      	mov	r0, r4
 8018298:	f7f5 fa24 	bl	800d6e4 <ucdr_deserialize_uint8_t>
 801829c:	f105 0110 	add.w	r1, r5, #16
 80182a0:	4606      	mov	r6, r0
 80182a2:	4620      	mov	r0, r4
 80182a4:	f7f6 f968 	bl	800e578 <ucdr_deserialize_int32_t>
 80182a8:	ea07 0708 	and.w	r7, r7, r8
 80182ac:	4603      	mov	r3, r0
 80182ae:	4620      	mov	r0, r4
 80182b0:	403e      	ands	r6, r7
 80182b2:	f105 0114 	add.w	r1, r5, #20
 80182b6:	461c      	mov	r4, r3
 80182b8:	f7f5 fd44 	bl	800dd44 <ucdr_deserialize_uint32_t>
 80182bc:	4034      	ands	r4, r6
 80182be:	4020      	ands	r0, r4
 80182c0:	b2c0      	uxtb	r0, r0
 80182c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182c6:	bf00      	nop

080182c8 <rcl_get_automatic_discovery_range>:
 80182c8:	b530      	push	{r4, r5, lr}
 80182ca:	2300      	movs	r3, #0
 80182cc:	b083      	sub	sp, #12
 80182ce:	9301      	str	r3, [sp, #4]
 80182d0:	b1c0      	cbz	r0, 8018304 <rcl_get_automatic_discovery_range+0x3c>
 80182d2:	4604      	mov	r4, r0
 80182d4:	a901      	add	r1, sp, #4
 80182d6:	4818      	ldr	r0, [pc, #96]	; (8018338 <rcl_get_automatic_discovery_range+0x70>)
 80182d8:	f7fa fcda 	bl	8012c90 <rcutils_get_env>
 80182dc:	b110      	cbz	r0, 80182e4 <rcl_get_automatic_discovery_range+0x1c>
 80182de:	2001      	movs	r0, #1
 80182e0:	b003      	add	sp, #12
 80182e2:	bd30      	pop	{r4, r5, pc}
 80182e4:	9d01      	ldr	r5, [sp, #4]
 80182e6:	782b      	ldrb	r3, [r5, #0]
 80182e8:	b13b      	cbz	r3, 80182fa <rcl_get_automatic_discovery_range+0x32>
 80182ea:	4914      	ldr	r1, [pc, #80]	; (801833c <rcl_get_automatic_discovery_range+0x74>)
 80182ec:	4628      	mov	r0, r5
 80182ee:	f7e7 ffa7 	bl	8000240 <strcmp>
 80182f2:	b950      	cbnz	r0, 801830a <rcl_get_automatic_discovery_range+0x42>
 80182f4:	2301      	movs	r3, #1
 80182f6:	7023      	strb	r3, [r4, #0]
 80182f8:	e7f2      	b.n	80182e0 <rcl_get_automatic_discovery_range+0x18>
 80182fa:	2303      	movs	r3, #3
 80182fc:	2000      	movs	r0, #0
 80182fe:	7023      	strb	r3, [r4, #0]
 8018300:	b003      	add	sp, #12
 8018302:	bd30      	pop	{r4, r5, pc}
 8018304:	200b      	movs	r0, #11
 8018306:	b003      	add	sp, #12
 8018308:	bd30      	pop	{r4, r5, pc}
 801830a:	490d      	ldr	r1, [pc, #52]	; (8018340 <rcl_get_automatic_discovery_range+0x78>)
 801830c:	4628      	mov	r0, r5
 801830e:	f7e7 ff97 	bl	8000240 <strcmp>
 8018312:	b168      	cbz	r0, 8018330 <rcl_get_automatic_discovery_range+0x68>
 8018314:	490b      	ldr	r1, [pc, #44]	; (8018344 <rcl_get_automatic_discovery_range+0x7c>)
 8018316:	4628      	mov	r0, r5
 8018318:	f7e7 ff92 	bl	8000240 <strcmp>
 801831c:	2800      	cmp	r0, #0
 801831e:	d0ec      	beq.n	80182fa <rcl_get_automatic_discovery_range+0x32>
 8018320:	4909      	ldr	r1, [pc, #36]	; (8018348 <rcl_get_automatic_discovery_range+0x80>)
 8018322:	4628      	mov	r0, r5
 8018324:	f7e7 ff8c 	bl	8000240 <strcmp>
 8018328:	b910      	cbnz	r0, 8018330 <rcl_get_automatic_discovery_range+0x68>
 801832a:	2304      	movs	r3, #4
 801832c:	7023      	strb	r3, [r4, #0]
 801832e:	e7d7      	b.n	80182e0 <rcl_get_automatic_discovery_range+0x18>
 8018330:	2302      	movs	r3, #2
 8018332:	2000      	movs	r0, #0
 8018334:	7023      	strb	r3, [r4, #0]
 8018336:	e7d3      	b.n	80182e0 <rcl_get_automatic_discovery_range+0x18>
 8018338:	0801cd20 	.word	0x0801cd20
 801833c:	0801cd40 	.word	0x0801cd40
 8018340:	0801cd44 	.word	0x0801cd44
 8018344:	0801cd50 	.word	0x0801cd50
 8018348:	0801cd58 	.word	0x0801cd58

0801834c <rcl_automatic_discovery_range_to_string>:
 801834c:	2804      	cmp	r0, #4
 801834e:	d803      	bhi.n	8018358 <rcl_automatic_discovery_range_to_string+0xc>
 8018350:	4b02      	ldr	r3, [pc, #8]	; (801835c <rcl_automatic_discovery_range_to_string+0x10>)
 8018352:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8018356:	4770      	bx	lr
 8018358:	2000      	movs	r0, #0
 801835a:	4770      	bx	lr
 801835c:	0801ce48 	.word	0x0801ce48

08018360 <rcl_get_discovery_static_peers>:
 8018360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018364:	2300      	movs	r3, #0
 8018366:	b08e      	sub	sp, #56	; 0x38
 8018368:	9306      	str	r3, [sp, #24]
 801836a:	2900      	cmp	r1, #0
 801836c:	d04b      	beq.n	8018406 <rcl_get_discovery_static_peers+0xa6>
 801836e:	4605      	mov	r5, r0
 8018370:	2800      	cmp	r0, #0
 8018372:	d048      	beq.n	8018406 <rcl_get_discovery_static_peers+0xa6>
 8018374:	460c      	mov	r4, r1
 8018376:	482c      	ldr	r0, [pc, #176]	; (8018428 <rcl_get_discovery_static_peers+0xc8>)
 8018378:	a906      	add	r1, sp, #24
 801837a:	f7fa fc89 	bl	8012c90 <rcutils_get_env>
 801837e:	b118      	cbz	r0, 8018388 <rcl_get_discovery_static_peers+0x28>
 8018380:	2001      	movs	r0, #1
 8018382:	b00e      	add	sp, #56	; 0x38
 8018384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018388:	9b06      	ldr	r3, [sp, #24]
 801838a:	2b00      	cmp	r3, #0
 801838c:	d0f8      	beq.n	8018380 <rcl_get_discovery_static_peers+0x20>
 801838e:	af07      	add	r7, sp, #28
 8018390:	4638      	mov	r0, r7
 8018392:	f000 fc5b 	bl	8018c4c <rcutils_get_zero_initialized_string_array>
 8018396:	f104 0308 	add.w	r3, r4, #8
 801839a:	9703      	str	r7, [sp, #12]
 801839c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80183a0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80183a4:	213b      	movs	r1, #59	; 0x3b
 80183a6:	9806      	ldr	r0, [sp, #24]
 80183a8:	e894 000c 	ldmia.w	r4, {r2, r3}
 80183ac:	f000 fb90 	bl	8018ad0 <rcutils_split>
 80183b0:	2800      	cmp	r0, #0
 80183b2:	d1e5      	bne.n	8018380 <rcl_get_discovery_static_peers+0x20>
 80183b4:	4622      	mov	r2, r4
 80183b6:	9907      	ldr	r1, [sp, #28]
 80183b8:	4628      	mov	r0, r5
 80183ba:	f000 fc97 	bl	8018cec <rmw_discovery_options_init>
 80183be:	4604      	mov	r4, r0
 80183c0:	bb78      	cbnz	r0, 8018422 <rcl_get_discovery_static_peers+0xc2>
 80183c2:	9e07      	ldr	r6, [sp, #28]
 80183c4:	b336      	cbz	r6, 8018414 <rcl_get_discovery_static_peers+0xb4>
 80183c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80183ca:	4680      	mov	r8, r0
 80183cc:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 80183d0:	ea4f 2904 	mov.w	r9, r4, lsl #8
 80183d4:	4608      	mov	r0, r1
 80183d6:	9105      	str	r1, [sp, #20]
 80183d8:	f7e7 ff92 	bl	8000300 <strlen>
 80183dc:	28ff      	cmp	r0, #255	; 0xff
 80183de:	9905      	ldr	r1, [sp, #20]
 80183e0:	d815      	bhi.n	801840e <rcl_get_discovery_static_peers+0xae>
 80183e2:	6868      	ldr	r0, [r5, #4]
 80183e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80183e8:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 80183ec:	3401      	adds	r4, #1
 80183ee:	f002 f920 	bl	801a632 <strncpy>
 80183f2:	686b      	ldr	r3, [r5, #4]
 80183f4:	9e07      	ldr	r6, [sp, #28]
 80183f6:	444b      	add	r3, r9
 80183f8:	42b4      	cmp	r4, r6
 80183fa:	f883 80ff 	strb.w	r8, [r3, #255]	; 0xff
 80183fe:	d209      	bcs.n	8018414 <rcl_get_discovery_static_peers+0xb4>
 8018400:	f8dd a020 	ldr.w	sl, [sp, #32]
 8018404:	e7e2      	b.n	80183cc <rcl_get_discovery_static_peers+0x6c>
 8018406:	200b      	movs	r0, #11
 8018408:	b00e      	add	sp, #56	; 0x38
 801840a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801840e:	3401      	adds	r4, #1
 8018410:	42b4      	cmp	r4, r6
 8018412:	d3db      	bcc.n	80183cc <rcl_get_discovery_static_peers+0x6c>
 8018414:	4638      	mov	r0, r7
 8018416:	f000 fc37 	bl	8018c88 <rcutils_string_array_fini>
 801841a:	3800      	subs	r0, #0
 801841c:	bf18      	it	ne
 801841e:	2001      	movne	r0, #1
 8018420:	e7af      	b.n	8018382 <rcl_get_discovery_static_peers+0x22>
 8018422:	f7f7 fd53 	bl	800fecc <rcl_convert_rmw_ret_to_rcl_ret>
 8018426:	e7ac      	b.n	8018382 <rcl_get_discovery_static_peers+0x22>
 8018428:	0801cd68 	.word	0x0801cd68

0801842c <rcl_get_default_domain_id>:
 801842c:	b530      	push	{r4, r5, lr}
 801842e:	2300      	movs	r3, #0
 8018430:	b083      	sub	sp, #12
 8018432:	9300      	str	r3, [sp, #0]
 8018434:	b1d0      	cbz	r0, 801846c <rcl_get_default_domain_id+0x40>
 8018436:	4604      	mov	r4, r0
 8018438:	4669      	mov	r1, sp
 801843a:	4815      	ldr	r0, [pc, #84]	; (8018490 <rcl_get_default_domain_id+0x64>)
 801843c:	f7fa fc28 	bl	8012c90 <rcutils_get_env>
 8018440:	4602      	mov	r2, r0
 8018442:	b110      	cbz	r0, 801844a <rcl_get_default_domain_id+0x1e>
 8018444:	2001      	movs	r0, #1
 8018446:	b003      	add	sp, #12
 8018448:	bd30      	pop	{r4, r5, pc}
 801844a:	9b00      	ldr	r3, [sp, #0]
 801844c:	b18b      	cbz	r3, 8018472 <rcl_get_default_domain_id+0x46>
 801844e:	7818      	ldrb	r0, [r3, #0]
 8018450:	2800      	cmp	r0, #0
 8018452:	d0f8      	beq.n	8018446 <rcl_get_default_domain_id+0x1a>
 8018454:	a901      	add	r1, sp, #4
 8018456:	4618      	mov	r0, r3
 8018458:	9201      	str	r2, [sp, #4]
 801845a:	f001 ff1d 	bl	801a298 <strtoul>
 801845e:	4605      	mov	r5, r0
 8018460:	b150      	cbz	r0, 8018478 <rcl_get_default_domain_id+0x4c>
 8018462:	1c43      	adds	r3, r0, #1
 8018464:	d00d      	beq.n	8018482 <rcl_get_default_domain_id+0x56>
 8018466:	2000      	movs	r0, #0
 8018468:	6025      	str	r5, [r4, #0]
 801846a:	e7ec      	b.n	8018446 <rcl_get_default_domain_id+0x1a>
 801846c:	200b      	movs	r0, #11
 801846e:	b003      	add	sp, #12
 8018470:	bd30      	pop	{r4, r5, pc}
 8018472:	4618      	mov	r0, r3
 8018474:	b003      	add	sp, #12
 8018476:	bd30      	pop	{r4, r5, pc}
 8018478:	9b01      	ldr	r3, [sp, #4]
 801847a:	781b      	ldrb	r3, [r3, #0]
 801847c:	2b00      	cmp	r3, #0
 801847e:	d0f2      	beq.n	8018466 <rcl_get_default_domain_id+0x3a>
 8018480:	e7e0      	b.n	8018444 <rcl_get_default_domain_id+0x18>
 8018482:	f002 f9ab 	bl	801a7dc <__errno>
 8018486:	6803      	ldr	r3, [r0, #0]
 8018488:	2b22      	cmp	r3, #34	; 0x22
 801848a:	d1ec      	bne.n	8018466 <rcl_get_default_domain_id+0x3a>
 801848c:	e7da      	b.n	8018444 <rcl_get_default_domain_id+0x18>
 801848e:	bf00      	nop
 8018490:	0801ce5c 	.word	0x0801ce5c

08018494 <rcl_expand_topic_name>:
 8018494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018498:	b08d      	sub	sp, #52	; 0x34
 801849a:	4698      	mov	r8, r3
 801849c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801849e:	9207      	str	r2, [sp, #28]
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	bf18      	it	ne
 80184a4:	f1b8 0f00 	cmpne.w	r8, #0
 80184a8:	bf0c      	ite	eq
 80184aa:	2301      	moveq	r3, #1
 80184ac:	2300      	movne	r3, #0
 80184ae:	2a00      	cmp	r2, #0
 80184b0:	bf08      	it	eq
 80184b2:	f043 0301 	orreq.w	r3, r3, #1
 80184b6:	2900      	cmp	r1, #0
 80184b8:	bf08      	it	eq
 80184ba:	f043 0301 	orreq.w	r3, r3, #1
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d13d      	bne.n	801853e <rcl_expand_topic_name+0xaa>
 80184c2:	fab0 f280 	clz	r2, r0
 80184c6:	4604      	mov	r4, r0
 80184c8:	0952      	lsrs	r2, r2, #5
 80184ca:	2800      	cmp	r0, #0
 80184cc:	d037      	beq.n	801853e <rcl_expand_topic_name+0xaa>
 80184ce:	460f      	mov	r7, r1
 80184d0:	a90b      	add	r1, sp, #44	; 0x2c
 80184d2:	f000 fa39 	bl	8018948 <rcl_validate_topic_name>
 80184d6:	4605      	mov	r5, r0
 80184d8:	bb68      	cbnz	r0, 8018536 <rcl_expand_topic_name+0xa2>
 80184da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d137      	bne.n	8018550 <rcl_expand_topic_name+0xbc>
 80184e0:	4602      	mov	r2, r0
 80184e2:	a90b      	add	r1, sp, #44	; 0x2c
 80184e4:	4638      	mov	r0, r7
 80184e6:	f7fa ffa5 	bl	8013434 <rmw_validate_node_name>
 80184ea:	bb68      	cbnz	r0, 8018548 <rcl_expand_topic_name+0xb4>
 80184ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d133      	bne.n	801855a <rcl_expand_topic_name+0xc6>
 80184f2:	462a      	mov	r2, r5
 80184f4:	a90b      	add	r1, sp, #44	; 0x2c
 80184f6:	9807      	ldr	r0, [sp, #28]
 80184f8:	f7fa ff7e 	bl	80133f8 <rmw_validate_namespace>
 80184fc:	bb20      	cbnz	r0, 8018548 <rcl_expand_topic_name+0xb4>
 80184fe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8018500:	2d00      	cmp	r5, #0
 8018502:	f040 80a2 	bne.w	801864a <rcl_expand_topic_name+0x1b6>
 8018506:	217b      	movs	r1, #123	; 0x7b
 8018508:	4620      	mov	r0, r4
 801850a:	f002 f873 	bl	801a5f4 <strchr>
 801850e:	7823      	ldrb	r3, [r4, #0]
 8018510:	4681      	mov	r9, r0
 8018512:	bb20      	cbnz	r0, 801855e <rcl_expand_topic_name+0xca>
 8018514:	2b2f      	cmp	r3, #47	; 0x2f
 8018516:	d122      	bne.n	801855e <rcl_expand_topic_name+0xca>
 8018518:	ab19      	add	r3, sp, #100	; 0x64
 801851a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801851e:	ab16      	add	r3, sp, #88	; 0x58
 8018520:	e88d 0003 	stmia.w	sp, {r0, r1}
 8018524:	4620      	mov	r0, r4
 8018526:	cb0e      	ldmia	r3, {r1, r2, r3}
 8018528:	f7fa fd14 	bl	8012f54 <rcutils_strdup>
 801852c:	2800      	cmp	r0, #0
 801852e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8018530:	bf08      	it	eq
 8018532:	250a      	moveq	r5, #10
 8018534:	6018      	str	r0, [r3, #0]
 8018536:	4628      	mov	r0, r5
 8018538:	b00d      	add	sp, #52	; 0x34
 801853a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801853e:	250b      	movs	r5, #11
 8018540:	4628      	mov	r0, r5
 8018542:	b00d      	add	sp, #52	; 0x34
 8018544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018548:	f7f7 fcc0 	bl	800fecc <rcl_convert_rmw_ret_to_rcl_ret>
 801854c:	4605      	mov	r5, r0
 801854e:	e7f2      	b.n	8018536 <rcl_expand_topic_name+0xa2>
 8018550:	2567      	movs	r5, #103	; 0x67
 8018552:	4628      	mov	r0, r5
 8018554:	b00d      	add	sp, #52	; 0x34
 8018556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801855a:	25c9      	movs	r5, #201	; 0xc9
 801855c:	e7eb      	b.n	8018536 <rcl_expand_topic_name+0xa2>
 801855e:	2b7e      	cmp	r3, #126	; 0x7e
 8018560:	d075      	beq.n	801864e <rcl_expand_topic_name+0x1ba>
 8018562:	f1b9 0f00 	cmp.w	r9, #0
 8018566:	f000 80c2 	beq.w	80186ee <rcl_expand_topic_name+0x25a>
 801856a:	2300      	movs	r3, #0
 801856c:	46a2      	mov	sl, r4
 801856e:	461e      	mov	r6, r3
 8018570:	9508      	str	r5, [sp, #32]
 8018572:	4655      	mov	r5, sl
 8018574:	9409      	str	r4, [sp, #36]	; 0x24
 8018576:	46b2      	mov	sl, r6
 8018578:	464c      	mov	r4, r9
 801857a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801857e:	2c00      	cmp	r4, #0
 8018580:	f000 80ae 	beq.w	80186e0 <rcl_expand_topic_name+0x24c>
 8018584:	217d      	movs	r1, #125	; 0x7d
 8018586:	4628      	mov	r0, r5
 8018588:	f002 f834 	bl	801a5f4 <strchr>
 801858c:	eba0 0904 	sub.w	r9, r0, r4
 8018590:	4621      	mov	r1, r4
 8018592:	4869      	ldr	r0, [pc, #420]	; (8018738 <rcl_expand_topic_name+0x2a4>)
 8018594:	f109 0601 	add.w	r6, r9, #1
 8018598:	4632      	mov	r2, r6
 801859a:	f002 f838 	bl	801a60e <strncmp>
 801859e:	2800      	cmp	r0, #0
 80185a0:	d051      	beq.n	8018646 <rcl_expand_topic_name+0x1b2>
 80185a2:	4632      	mov	r2, r6
 80185a4:	4621      	mov	r1, r4
 80185a6:	4865      	ldr	r0, [pc, #404]	; (801873c <rcl_expand_topic_name+0x2a8>)
 80185a8:	f002 f831 	bl	801a60e <strncmp>
 80185ac:	b128      	cbz	r0, 80185ba <rcl_expand_topic_name+0x126>
 80185ae:	4632      	mov	r2, r6
 80185b0:	4621      	mov	r1, r4
 80185b2:	4863      	ldr	r0, [pc, #396]	; (8018740 <rcl_expand_topic_name+0x2ac>)
 80185b4:	f002 f82b 	bl	801a60e <strncmp>
 80185b8:	bb38      	cbnz	r0, 801860a <rcl_expand_topic_name+0x176>
 80185ba:	46d9      	mov	r9, fp
 80185bc:	ab18      	add	r3, sp, #96	; 0x60
 80185be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80185c2:	ab16      	add	r3, sp, #88	; 0x58
 80185c4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80185c8:	4620      	mov	r0, r4
 80185ca:	4631      	mov	r1, r6
 80185cc:	cb0c      	ldmia	r3, {r2, r3}
 80185ce:	f7fa fce7 	bl	8012fa0 <rcutils_strndup>
 80185d2:	4604      	mov	r4, r0
 80185d4:	2800      	cmp	r0, #0
 80185d6:	f000 80a3 	beq.w	8018720 <rcl_expand_topic_name+0x28c>
 80185da:	464a      	mov	r2, r9
 80185dc:	4628      	mov	r0, r5
 80185de:	ab16      	add	r3, sp, #88	; 0x58
 80185e0:	4621      	mov	r1, r4
 80185e2:	f7fa fbb7 	bl	8012d54 <rcutils_repl_str>
 80185e6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80185e8:	4605      	mov	r5, r0
 80185ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80185ec:	4620      	mov	r0, r4
 80185ee:	4798      	blx	r3
 80185f0:	4650      	mov	r0, sl
 80185f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80185f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80185f6:	4798      	blx	r3
 80185f8:	2d00      	cmp	r5, #0
 80185fa:	d06c      	beq.n	80186d6 <rcl_expand_topic_name+0x242>
 80185fc:	217b      	movs	r1, #123	; 0x7b
 80185fe:	4628      	mov	r0, r5
 8018600:	f001 fff8 	bl	801a5f4 <strchr>
 8018604:	46aa      	mov	sl, r5
 8018606:	4604      	mov	r4, r0
 8018608:	e7b9      	b.n	801857e <rcl_expand_topic_name+0xea>
 801860a:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801860e:	1c61      	adds	r1, r4, #1
 8018610:	4640      	mov	r0, r8
 8018612:	f7fa fdc1 	bl	8013198 <rcutils_string_map_getn>
 8018616:	4681      	mov	r9, r0
 8018618:	2800      	cmp	r0, #0
 801861a:	d1cf      	bne.n	80185bc <rcl_expand_topic_name+0x128>
 801861c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801861e:	aa18      	add	r2, sp, #96	; 0x60
 8018620:	2569      	movs	r5, #105	; 0x69
 8018622:	6018      	str	r0, [r3, #0]
 8018624:	ab16      	add	r3, sp, #88	; 0x58
 8018626:	ca07      	ldmia	r2, {r0, r1, r2}
 8018628:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801862c:	4631      	mov	r1, r6
 801862e:	4620      	mov	r0, r4
 8018630:	cb0c      	ldmia	r3, {r2, r3}
 8018632:	f7fa fcb5 	bl	8012fa0 <rcutils_strndup>
 8018636:	991a      	ldr	r1, [sp, #104]	; 0x68
 8018638:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801863a:	4798      	blx	r3
 801863c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801863e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8018640:	4650      	mov	r0, sl
 8018642:	4798      	blx	r3
 8018644:	e777      	b.n	8018536 <rcl_expand_topic_name+0xa2>
 8018646:	46b9      	mov	r9, r7
 8018648:	e7b8      	b.n	80185bc <rcl_expand_topic_name+0x128>
 801864a:	25ca      	movs	r5, #202	; 0xca
 801864c:	e773      	b.n	8018536 <rcl_expand_topic_name+0xa2>
 801864e:	9e07      	ldr	r6, [sp, #28]
 8018650:	4630      	mov	r0, r6
 8018652:	f7e7 fe55 	bl	8000300 <strlen>
 8018656:	4a3b      	ldr	r2, [pc, #236]	; (8018744 <rcl_expand_topic_name+0x2b0>)
 8018658:	4b3b      	ldr	r3, [pc, #236]	; (8018748 <rcl_expand_topic_name+0x2b4>)
 801865a:	9603      	str	r6, [sp, #12]
 801865c:	2801      	cmp	r0, #1
 801865e:	bf18      	it	ne
 8018660:	4613      	movne	r3, r2
 8018662:	9704      	str	r7, [sp, #16]
 8018664:	9302      	str	r3, [sp, #8]
 8018666:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8018668:	9300      	str	r3, [sp, #0]
 801866a:	1c63      	adds	r3, r4, #1
 801866c:	9305      	str	r3, [sp, #20]
 801866e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018672:	9301      	str	r3, [sp, #4]
 8018674:	ab16      	add	r3, sp, #88	; 0x58
 8018676:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018678:	f7fa fb32 	bl	8012ce0 <rcutils_format_string_limit>
 801867c:	4606      	mov	r6, r0
 801867e:	b350      	cbz	r0, 80186d6 <rcl_expand_topic_name+0x242>
 8018680:	f1b9 0f00 	cmp.w	r9, #0
 8018684:	d005      	beq.n	8018692 <rcl_expand_topic_name+0x1fe>
 8018686:	217b      	movs	r1, #123	; 0x7b
 8018688:	46b2      	mov	sl, r6
 801868a:	f001 ffb3 	bl	801a5f4 <strchr>
 801868e:	4681      	mov	r9, r0
 8018690:	e76e      	b.n	8018570 <rcl_expand_topic_name+0xdc>
 8018692:	7833      	ldrb	r3, [r6, #0]
 8018694:	2b2f      	cmp	r3, #47	; 0x2f
 8018696:	d01b      	beq.n	80186d0 <rcl_expand_topic_name+0x23c>
 8018698:	9c07      	ldr	r4, [sp, #28]
 801869a:	4620      	mov	r0, r4
 801869c:	f7e7 fe30 	bl	8000300 <strlen>
 80186a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80186a4:	4a29      	ldr	r2, [pc, #164]	; (801874c <rcl_expand_topic_name+0x2b8>)
 80186a6:	9301      	str	r3, [sp, #4]
 80186a8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80186aa:	9604      	str	r6, [sp, #16]
 80186ac:	9300      	str	r3, [sp, #0]
 80186ae:	4b28      	ldr	r3, [pc, #160]	; (8018750 <rcl_expand_topic_name+0x2bc>)
 80186b0:	9403      	str	r4, [sp, #12]
 80186b2:	2801      	cmp	r0, #1
 80186b4:	bf18      	it	ne
 80186b6:	4613      	movne	r3, r2
 80186b8:	9302      	str	r3, [sp, #8]
 80186ba:	ab16      	add	r3, sp, #88	; 0x58
 80186bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80186be:	f7fa fb0f 	bl	8012ce0 <rcutils_format_string_limit>
 80186c2:	4603      	mov	r3, r0
 80186c4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80186c6:	4630      	mov	r0, r6
 80186c8:	991a      	ldr	r1, [sp, #104]	; 0x68
 80186ca:	461e      	mov	r6, r3
 80186cc:	4790      	blx	r2
 80186ce:	b116      	cbz	r6, 80186d6 <rcl_expand_topic_name+0x242>
 80186d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80186d2:	601e      	str	r6, [r3, #0]
 80186d4:	e72f      	b.n	8018536 <rcl_expand_topic_name+0xa2>
 80186d6:	2300      	movs	r3, #0
 80186d8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80186da:	250a      	movs	r5, #10
 80186dc:	6013      	str	r3, [r2, #0]
 80186de:	e72a      	b.n	8018536 <rcl_expand_topic_name+0xa2>
 80186e0:	4653      	mov	r3, sl
 80186e2:	4656      	mov	r6, sl
 80186e4:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d1d2      	bne.n	8018692 <rcl_expand_topic_name+0x1fe>
 80186ec:	7823      	ldrb	r3, [r4, #0]
 80186ee:	2b2f      	cmp	r3, #47	; 0x2f
 80186f0:	d01e      	beq.n	8018730 <rcl_expand_topic_name+0x29c>
 80186f2:	9e07      	ldr	r6, [sp, #28]
 80186f4:	4630      	mov	r0, r6
 80186f6:	f7e7 fe03 	bl	8000300 <strlen>
 80186fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80186fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018700:	9603      	str	r6, [sp, #12]
 8018702:	9404      	str	r4, [sp, #16]
 8018704:	e9cd 2300 	strd	r2, r3, [sp]
 8018708:	4a10      	ldr	r2, [pc, #64]	; (801874c <rcl_expand_topic_name+0x2b8>)
 801870a:	4b11      	ldr	r3, [pc, #68]	; (8018750 <rcl_expand_topic_name+0x2bc>)
 801870c:	2801      	cmp	r0, #1
 801870e:	bf18      	it	ne
 8018710:	4613      	movne	r3, r2
 8018712:	9302      	str	r3, [sp, #8]
 8018714:	ab16      	add	r3, sp, #88	; 0x58
 8018716:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018718:	f7fa fae2 	bl	8012ce0 <rcutils_format_string_limit>
 801871c:	4606      	mov	r6, r0
 801871e:	e7d6      	b.n	80186ce <rcl_expand_topic_name+0x23a>
 8018720:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 8018724:	4650      	mov	r0, sl
 8018726:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8018728:	6014      	str	r4, [r2, #0]
 801872a:	250a      	movs	r5, #10
 801872c:	4798      	blx	r3
 801872e:	e702      	b.n	8018536 <rcl_expand_topic_name+0xa2>
 8018730:	2300      	movs	r3, #0
 8018732:	461e      	mov	r6, r3
 8018734:	e7cc      	b.n	80186d0 <rcl_expand_topic_name+0x23c>
 8018736:	bf00      	nop
 8018738:	0801ce74 	.word	0x0801ce74
 801873c:	0801ce7c 	.word	0x0801ce7c
 8018740:	0801ce84 	.word	0x0801ce84
 8018744:	0801ce6c 	.word	0x0801ce6c
 8018748:	0801ca50 	.word	0x0801ca50
 801874c:	0801c4c8 	.word	0x0801c4c8
 8018750:	0801c4c0 	.word	0x0801c4c0

08018754 <rcl_get_default_topic_name_substitutions>:
 8018754:	2800      	cmp	r0, #0
 8018756:	bf0c      	ite	eq
 8018758:	200b      	moveq	r0, #11
 801875a:	2000      	movne	r0, #0
 801875c:	4770      	bx	lr
 801875e:	bf00      	nop

08018760 <rcl_get_zero_initialized_guard_condition>:
 8018760:	4a03      	ldr	r2, [pc, #12]	; (8018770 <rcl_get_zero_initialized_guard_condition+0x10>)
 8018762:	4603      	mov	r3, r0
 8018764:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018768:	e883 0003 	stmia.w	r3, {r0, r1}
 801876c:	4618      	mov	r0, r3
 801876e:	4770      	bx	lr
 8018770:	0801ce90 	.word	0x0801ce90

08018774 <rcl_guard_condition_init_from_rmw>:
 8018774:	b082      	sub	sp, #8
 8018776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801877a:	b086      	sub	sp, #24
 801877c:	4604      	mov	r4, r0
 801877e:	460e      	mov	r6, r1
 8018780:	4615      	mov	r5, r2
 8018782:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8018786:	f10d 0e04 	add.w	lr, sp, #4
 801878a:	f84c 3f04 	str.w	r3, [ip, #4]!
 801878e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018792:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018796:	f8dc 3000 	ldr.w	r3, [ip]
 801879a:	a801      	add	r0, sp, #4
 801879c:	f8ce 3000 	str.w	r3, [lr]
 80187a0:	f7f4 faa6 	bl	800ccf0 <rcutils_allocator_is_valid>
 80187a4:	f080 0301 	eor.w	r3, r0, #1
 80187a8:	b2db      	uxtb	r3, r3
 80187aa:	bb3b      	cbnz	r3, 80187fc <rcl_guard_condition_init_from_rmw+0x88>
 80187ac:	b334      	cbz	r4, 80187fc <rcl_guard_condition_init_from_rmw+0x88>
 80187ae:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80187b2:	f1b8 0f00 	cmp.w	r8, #0
 80187b6:	d11a      	bne.n	80187ee <rcl_guard_condition_init_from_rmw+0x7a>
 80187b8:	b305      	cbz	r5, 80187fc <rcl_guard_condition_init_from_rmw+0x88>
 80187ba:	4628      	mov	r0, r5
 80187bc:	f7f7 fba4 	bl	800ff08 <rcl_context_is_valid>
 80187c0:	b1f0      	cbz	r0, 8018800 <rcl_guard_condition_init_from_rmw+0x8c>
 80187c2:	9b01      	ldr	r3, [sp, #4]
 80187c4:	201c      	movs	r0, #28
 80187c6:	9905      	ldr	r1, [sp, #20]
 80187c8:	4798      	blx	r3
 80187ca:	4607      	mov	r7, r0
 80187cc:	6060      	str	r0, [r4, #4]
 80187ce:	b320      	cbz	r0, 801881a <rcl_guard_condition_init_from_rmw+0xa6>
 80187d0:	b1c6      	cbz	r6, 8018804 <rcl_guard_condition_init_from_rmw+0x90>
 80187d2:	6006      	str	r6, [r0, #0]
 80187d4:	f880 8004 	strb.w	r8, [r0, #4]
 80187d8:	ac01      	add	r4, sp, #4
 80187da:	f107 0c08 	add.w	ip, r7, #8
 80187de:	2500      	movs	r5, #0
 80187e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80187e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80187e6:	6823      	ldr	r3, [r4, #0]
 80187e8:	f8cc 3000 	str.w	r3, [ip]
 80187ec:	e000      	b.n	80187f0 <rcl_guard_condition_init_from_rmw+0x7c>
 80187ee:	2564      	movs	r5, #100	; 0x64
 80187f0:	4628      	mov	r0, r5
 80187f2:	b006      	add	sp, #24
 80187f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80187f8:	b002      	add	sp, #8
 80187fa:	4770      	bx	lr
 80187fc:	250b      	movs	r5, #11
 80187fe:	e7f7      	b.n	80187f0 <rcl_guard_condition_init_from_rmw+0x7c>
 8018800:	2565      	movs	r5, #101	; 0x65
 8018802:	e7f5      	b.n	80187f0 <rcl_guard_condition_init_from_rmw+0x7c>
 8018804:	6828      	ldr	r0, [r5, #0]
 8018806:	3028      	adds	r0, #40	; 0x28
 8018808:	f000 fc30 	bl	801906c <rmw_create_guard_condition>
 801880c:	6038      	str	r0, [r7, #0]
 801880e:	6867      	ldr	r7, [r4, #4]
 8018810:	683e      	ldr	r6, [r7, #0]
 8018812:	b126      	cbz	r6, 801881e <rcl_guard_condition_init_from_rmw+0xaa>
 8018814:	2301      	movs	r3, #1
 8018816:	713b      	strb	r3, [r7, #4]
 8018818:	e7de      	b.n	80187d8 <rcl_guard_condition_init_from_rmw+0x64>
 801881a:	250a      	movs	r5, #10
 801881c:	e7e8      	b.n	80187f0 <rcl_guard_condition_init_from_rmw+0x7c>
 801881e:	9b02      	ldr	r3, [sp, #8]
 8018820:	4638      	mov	r0, r7
 8018822:	9905      	ldr	r1, [sp, #20]
 8018824:	2501      	movs	r5, #1
 8018826:	4798      	blx	r3
 8018828:	6066      	str	r6, [r4, #4]
 801882a:	e7e1      	b.n	80187f0 <rcl_guard_condition_init_from_rmw+0x7c>

0801882c <rcl_guard_condition_fini>:
 801882c:	b570      	push	{r4, r5, r6, lr}
 801882e:	b082      	sub	sp, #8
 8018830:	b1f0      	cbz	r0, 8018870 <rcl_guard_condition_fini+0x44>
 8018832:	6843      	ldr	r3, [r0, #4]
 8018834:	4604      	mov	r4, r0
 8018836:	b163      	cbz	r3, 8018852 <rcl_guard_condition_fini+0x26>
 8018838:	6818      	ldr	r0, [r3, #0]
 801883a:	68de      	ldr	r6, [r3, #12]
 801883c:	6999      	ldr	r1, [r3, #24]
 801883e:	b160      	cbz	r0, 801885a <rcl_guard_condition_fini+0x2e>
 8018840:	791d      	ldrb	r5, [r3, #4]
 8018842:	b965      	cbnz	r5, 801885e <rcl_guard_condition_fini+0x32>
 8018844:	4618      	mov	r0, r3
 8018846:	47b0      	blx	r6
 8018848:	2300      	movs	r3, #0
 801884a:	4628      	mov	r0, r5
 801884c:	6063      	str	r3, [r4, #4]
 801884e:	b002      	add	sp, #8
 8018850:	bd70      	pop	{r4, r5, r6, pc}
 8018852:	461d      	mov	r5, r3
 8018854:	4628      	mov	r0, r5
 8018856:	b002      	add	sp, #8
 8018858:	bd70      	pop	{r4, r5, r6, pc}
 801885a:	4605      	mov	r5, r0
 801885c:	e7f2      	b.n	8018844 <rcl_guard_condition_fini+0x18>
 801885e:	9101      	str	r1, [sp, #4]
 8018860:	f000 fc1a 	bl	8019098 <rmw_destroy_guard_condition>
 8018864:	1e05      	subs	r5, r0, #0
 8018866:	6863      	ldr	r3, [r4, #4]
 8018868:	9901      	ldr	r1, [sp, #4]
 801886a:	bf18      	it	ne
 801886c:	2501      	movne	r5, #1
 801886e:	e7e9      	b.n	8018844 <rcl_guard_condition_fini+0x18>
 8018870:	250b      	movs	r5, #11
 8018872:	4628      	mov	r0, r5
 8018874:	b002      	add	sp, #8
 8018876:	bd70      	pop	{r4, r5, r6, pc}

08018878 <rcl_guard_condition_get_default_options>:
 8018878:	b5f0      	push	{r4, r5, r6, r7, lr}
 801887a:	b087      	sub	sp, #28
 801887c:	4606      	mov	r6, r0
 801887e:	4c0b      	ldr	r4, [pc, #44]	; (80188ac <rcl_guard_condition_get_default_options+0x34>)
 8018880:	4668      	mov	r0, sp
 8018882:	f7f4 fa27 	bl	800ccd4 <rcutils_get_default_allocator>
 8018886:	46ee      	mov	lr, sp
 8018888:	46a4      	mov	ip, r4
 801888a:	4625      	mov	r5, r4
 801888c:	4634      	mov	r4, r6
 801888e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018892:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018898:	f8de 7000 	ldr.w	r7, [lr]
 801889c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801889e:	4630      	mov	r0, r6
 80188a0:	f8cc 7000 	str.w	r7, [ip]
 80188a4:	6027      	str	r7, [r4, #0]
 80188a6:	b007      	add	sp, #28
 80188a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80188aa:	bf00      	nop
 80188ac:	20010594 	.word	0x20010594

080188b0 <rcl_guard_condition_get_rmw_handle>:
 80188b0:	b110      	cbz	r0, 80188b8 <rcl_guard_condition_get_rmw_handle+0x8>
 80188b2:	6840      	ldr	r0, [r0, #4]
 80188b4:	b100      	cbz	r0, 80188b8 <rcl_guard_condition_get_rmw_handle+0x8>
 80188b6:	6800      	ldr	r0, [r0, #0]
 80188b8:	4770      	bx	lr
 80188ba:	bf00      	nop

080188bc <rcl_publish>:
 80188bc:	b1f8      	cbz	r0, 80188fe <rcl_publish+0x42>
 80188be:	6803      	ldr	r3, [r0, #0]
 80188c0:	b570      	push	{r4, r5, r6, lr}
 80188c2:	4604      	mov	r4, r0
 80188c4:	b1b3      	cbz	r3, 80188f4 <rcl_publish+0x38>
 80188c6:	4616      	mov	r6, r2
 80188c8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80188cc:	b192      	cbz	r2, 80188f4 <rcl_publish+0x38>
 80188ce:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 80188d2:	460d      	mov	r5, r1
 80188d4:	f7f7 fb18 	bl	800ff08 <rcl_context_is_valid>
 80188d8:	b160      	cbz	r0, 80188f4 <rcl_publish+0x38>
 80188da:	6823      	ldr	r3, [r4, #0]
 80188dc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 80188e0:	b140      	cbz	r0, 80188f4 <rcl_publish+0x38>
 80188e2:	b155      	cbz	r5, 80188fa <rcl_publish+0x3e>
 80188e4:	4632      	mov	r2, r6
 80188e6:	4629      	mov	r1, r5
 80188e8:	f000 fc10 	bl	801910c <rmw_publish>
 80188ec:	3800      	subs	r0, #0
 80188ee:	bf18      	it	ne
 80188f0:	2001      	movne	r0, #1
 80188f2:	bd70      	pop	{r4, r5, r6, pc}
 80188f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80188f8:	bd70      	pop	{r4, r5, r6, pc}
 80188fa:	200b      	movs	r0, #11
 80188fc:	bd70      	pop	{r4, r5, r6, pc}
 80188fe:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8018902:	4770      	bx	lr

08018904 <rcl_publisher_is_valid>:
 8018904:	b1a0      	cbz	r0, 8018930 <rcl_publisher_is_valid+0x2c>
 8018906:	6803      	ldr	r3, [r0, #0]
 8018908:	b510      	push	{r4, lr}
 801890a:	4604      	mov	r4, r0
 801890c:	b173      	cbz	r3, 801892c <rcl_publisher_is_valid+0x28>
 801890e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8018912:	b15a      	cbz	r2, 801892c <rcl_publisher_is_valid+0x28>
 8018914:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 8018918:	f7f7 faf6 	bl	800ff08 <rcl_context_is_valid>
 801891c:	b130      	cbz	r0, 801892c <rcl_publisher_is_valid+0x28>
 801891e:	6823      	ldr	r3, [r4, #0]
 8018920:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 8018924:	3800      	subs	r0, #0
 8018926:	bf18      	it	ne
 8018928:	2001      	movne	r0, #1
 801892a:	bd10      	pop	{r4, pc}
 801892c:	2000      	movs	r0, #0
 801892e:	bd10      	pop	{r4, pc}
 8018930:	2000      	movs	r0, #0
 8018932:	4770      	bx	lr

08018934 <rcl_publisher_is_valid_except_context>:
 8018934:	b130      	cbz	r0, 8018944 <rcl_publisher_is_valid_except_context+0x10>
 8018936:	6800      	ldr	r0, [r0, #0]
 8018938:	b120      	cbz	r0, 8018944 <rcl_publisher_is_valid_except_context+0x10>
 801893a:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 801893e:	3800      	subs	r0, #0
 8018940:	bf18      	it	ne
 8018942:	2001      	movne	r0, #1
 8018944:	4770      	bx	lr
 8018946:	bf00      	nop

08018948 <rcl_validate_topic_name>:
 8018948:	2800      	cmp	r0, #0
 801894a:	f000 8089 	beq.w	8018a60 <rcl_validate_topic_name+0x118>
 801894e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018952:	460e      	mov	r6, r1
 8018954:	2900      	cmp	r1, #0
 8018956:	f000 8085 	beq.w	8018a64 <rcl_validate_topic_name+0x11c>
 801895a:	4604      	mov	r4, r0
 801895c:	4617      	mov	r7, r2
 801895e:	f7e7 fccf 	bl	8000300 <strlen>
 8018962:	b1b0      	cbz	r0, 8018992 <rcl_validate_topic_name+0x4a>
 8018964:	f894 e000 	ldrb.w	lr, [r4]
 8018968:	f8df c160 	ldr.w	ip, [pc, #352]	; 8018acc <rcl_validate_topic_name+0x184>
 801896c:	f81c 300e 	ldrb.w	r3, [ip, lr]
 8018970:	f013 0304 	ands.w	r3, r3, #4
 8018974:	d139      	bne.n	80189ea <rcl_validate_topic_name+0xa2>
 8018976:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801897a:	f814 2008 	ldrb.w	r2, [r4, r8]
 801897e:	2a2f      	cmp	r2, #47	; 0x2f
 8018980:	d10f      	bne.n	80189a2 <rcl_validate_topic_name+0x5a>
 8018982:	2202      	movs	r2, #2
 8018984:	6032      	str	r2, [r6, #0]
 8018986:	b3a7      	cbz	r7, 80189f2 <rcl_validate_topic_name+0xaa>
 8018988:	4618      	mov	r0, r3
 801898a:	f8c7 8000 	str.w	r8, [r7]
 801898e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018992:	2301      	movs	r3, #1
 8018994:	6033      	str	r3, [r6, #0]
 8018996:	b367      	cbz	r7, 80189f2 <rcl_validate_topic_name+0xaa>
 8018998:	2300      	movs	r3, #0
 801899a:	4618      	mov	r0, r3
 801899c:	603b      	str	r3, [r7, #0]
 801899e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189a2:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 80189a6:	461d      	mov	r5, r3
 80189a8:	4619      	mov	r1, r3
 80189aa:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80189ae:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 80189b2:	f1b9 0f09 	cmp.w	r9, #9
 80189b6:	d91f      	bls.n	80189f8 <rcl_validate_topic_name+0xb0>
 80189b8:	f022 0920 	bic.w	r9, r2, #32
 80189bc:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 80189c0:	f1b9 0f19 	cmp.w	r9, #25
 80189c4:	d918      	bls.n	80189f8 <rcl_validate_topic_name+0xb0>
 80189c6:	2a5f      	cmp	r2, #95	; 0x5f
 80189c8:	d024      	beq.n	8018a14 <rcl_validate_topic_name+0xcc>
 80189ca:	2a2f      	cmp	r2, #47	; 0x2f
 80189cc:	d058      	beq.n	8018a80 <rcl_validate_topic_name+0x138>
 80189ce:	2a7e      	cmp	r2, #126	; 0x7e
 80189d0:	d04a      	beq.n	8018a68 <rcl_validate_topic_name+0x120>
 80189d2:	2a7b      	cmp	r2, #123	; 0x7b
 80189d4:	d05b      	beq.n	8018a8e <rcl_validate_topic_name+0x146>
 80189d6:	2a7d      	cmp	r2, #125	; 0x7d
 80189d8:	d169      	bne.n	8018aae <rcl_validate_topic_name+0x166>
 80189da:	2d00      	cmp	r5, #0
 80189dc:	d15c      	bne.n	8018a98 <rcl_validate_topic_name+0x150>
 80189de:	2305      	movs	r3, #5
 80189e0:	6033      	str	r3, [r6, #0]
 80189e2:	b137      	cbz	r7, 80189f2 <rcl_validate_topic_name+0xaa>
 80189e4:	2000      	movs	r0, #0
 80189e6:	6039      	str	r1, [r7, #0]
 80189e8:	e7d9      	b.n	801899e <rcl_validate_topic_name+0x56>
 80189ea:	2304      	movs	r3, #4
 80189ec:	6033      	str	r3, [r6, #0]
 80189ee:	2f00      	cmp	r7, #0
 80189f0:	d1d2      	bne.n	8018998 <rcl_validate_topic_name+0x50>
 80189f2:	2000      	movs	r0, #0
 80189f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189f8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80189fc:	0752      	lsls	r2, r2, #29
 80189fe:	d509      	bpl.n	8018a14 <rcl_validate_topic_name+0xcc>
 8018a00:	2900      	cmp	r1, #0
 8018a02:	bf0c      	ite	eq
 8018a04:	2200      	moveq	r2, #0
 8018a06:	f005 0201 	andne.w	r2, r5, #1
 8018a0a:	b11a      	cbz	r2, 8018a14 <rcl_validate_topic_name+0xcc>
 8018a0c:	1e4d      	subs	r5, r1, #1
 8018a0e:	429d      	cmp	r5, r3
 8018a10:	d031      	beq.n	8018a76 <rcl_validate_topic_name+0x12e>
 8018a12:	4615      	mov	r5, r2
 8018a14:	3101      	adds	r1, #1
 8018a16:	4288      	cmp	r0, r1
 8018a18:	d1c7      	bne.n	80189aa <rcl_validate_topic_name+0x62>
 8018a1a:	2d00      	cmp	r5, #0
 8018a1c:	d142      	bne.n	8018aa4 <rcl_validate_topic_name+0x15c>
 8018a1e:	4628      	mov	r0, r5
 8018a20:	2301      	movs	r3, #1
 8018a22:	e00c      	b.n	8018a3e <rcl_validate_topic_name+0xf6>
 8018a24:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 8018a28:	d101      	bne.n	8018a2e <rcl_validate_topic_name+0xe6>
 8018a2a:	2801      	cmp	r0, #1
 8018a2c:	d047      	beq.n	8018abe <rcl_validate_topic_name+0x176>
 8018a2e:	1c5a      	adds	r2, r3, #1
 8018a30:	428b      	cmp	r3, r1
 8018a32:	f100 0001 	add.w	r0, r0, #1
 8018a36:	f104 0401 	add.w	r4, r4, #1
 8018a3a:	4613      	mov	r3, r2
 8018a3c:	d22e      	bcs.n	8018a9c <rcl_validate_topic_name+0x154>
 8018a3e:	4580      	cmp	r8, r0
 8018a40:	d0f5      	beq.n	8018a2e <rcl_validate_topic_name+0xe6>
 8018a42:	7822      	ldrb	r2, [r4, #0]
 8018a44:	2a2f      	cmp	r2, #47	; 0x2f
 8018a46:	d1ed      	bne.n	8018a24 <rcl_validate_topic_name+0xdc>
 8018a48:	7862      	ldrb	r2, [r4, #1]
 8018a4a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8018a4e:	0752      	lsls	r2, r2, #29
 8018a50:	d5ed      	bpl.n	8018a2e <rcl_validate_topic_name+0xe6>
 8018a52:	2204      	movs	r2, #4
 8018a54:	6032      	str	r2, [r6, #0]
 8018a56:	2f00      	cmp	r7, #0
 8018a58:	d0cb      	beq.n	80189f2 <rcl_validate_topic_name+0xaa>
 8018a5a:	2000      	movs	r0, #0
 8018a5c:	603b      	str	r3, [r7, #0]
 8018a5e:	e79e      	b.n	801899e <rcl_validate_topic_name+0x56>
 8018a60:	200b      	movs	r0, #11
 8018a62:	4770      	bx	lr
 8018a64:	200b      	movs	r0, #11
 8018a66:	e79a      	b.n	801899e <rcl_validate_topic_name+0x56>
 8018a68:	2900      	cmp	r1, #0
 8018a6a:	d0d3      	beq.n	8018a14 <rcl_validate_topic_name+0xcc>
 8018a6c:	2306      	movs	r3, #6
 8018a6e:	6033      	str	r3, [r6, #0]
 8018a70:	2f00      	cmp	r7, #0
 8018a72:	d1b7      	bne.n	80189e4 <rcl_validate_topic_name+0x9c>
 8018a74:	e7bd      	b.n	80189f2 <rcl_validate_topic_name+0xaa>
 8018a76:	2309      	movs	r3, #9
 8018a78:	6033      	str	r3, [r6, #0]
 8018a7a:	2f00      	cmp	r7, #0
 8018a7c:	d1b2      	bne.n	80189e4 <rcl_validate_topic_name+0x9c>
 8018a7e:	e7b8      	b.n	80189f2 <rcl_validate_topic_name+0xaa>
 8018a80:	2d00      	cmp	r5, #0
 8018a82:	d0c7      	beq.n	8018a14 <rcl_validate_topic_name+0xcc>
 8018a84:	2308      	movs	r3, #8
 8018a86:	6033      	str	r3, [r6, #0]
 8018a88:	2f00      	cmp	r7, #0
 8018a8a:	d1ab      	bne.n	80189e4 <rcl_validate_topic_name+0x9c>
 8018a8c:	e7b1      	b.n	80189f2 <rcl_validate_topic_name+0xaa>
 8018a8e:	2d00      	cmp	r5, #0
 8018a90:	d1f8      	bne.n	8018a84 <rcl_validate_topic_name+0x13c>
 8018a92:	460b      	mov	r3, r1
 8018a94:	2501      	movs	r5, #1
 8018a96:	e7bd      	b.n	8018a14 <rcl_validate_topic_name+0xcc>
 8018a98:	2500      	movs	r5, #0
 8018a9a:	e7bb      	b.n	8018a14 <rcl_validate_topic_name+0xcc>
 8018a9c:	2300      	movs	r3, #0
 8018a9e:	4618      	mov	r0, r3
 8018aa0:	6033      	str	r3, [r6, #0]
 8018aa2:	e77c      	b.n	801899e <rcl_validate_topic_name+0x56>
 8018aa4:	2205      	movs	r2, #5
 8018aa6:	6032      	str	r2, [r6, #0]
 8018aa8:	2f00      	cmp	r7, #0
 8018aaa:	d1d6      	bne.n	8018a5a <rcl_validate_topic_name+0x112>
 8018aac:	e7a1      	b.n	80189f2 <rcl_validate_topic_name+0xaa>
 8018aae:	2d00      	cmp	r5, #0
 8018ab0:	bf14      	ite	ne
 8018ab2:	2308      	movne	r3, #8
 8018ab4:	2303      	moveq	r3, #3
 8018ab6:	6033      	str	r3, [r6, #0]
 8018ab8:	2f00      	cmp	r7, #0
 8018aba:	d193      	bne.n	80189e4 <rcl_validate_topic_name+0x9c>
 8018abc:	e799      	b.n	80189f2 <rcl_validate_topic_name+0xaa>
 8018abe:	2307      	movs	r3, #7
 8018ac0:	6033      	str	r3, [r6, #0]
 8018ac2:	2f00      	cmp	r7, #0
 8018ac4:	d095      	beq.n	80189f2 <rcl_validate_topic_name+0xaa>
 8018ac6:	2301      	movs	r3, #1
 8018ac8:	e7c7      	b.n	8018a5a <rcl_validate_topic_name+0x112>
 8018aca:	bf00      	nop
 8018acc:	0801d070 	.word	0x0801d070

08018ad0 <rcutils_split>:
 8018ad0:	b082      	sub	sp, #8
 8018ad2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ad6:	b08d      	sub	sp, #52	; 0x34
 8018ad8:	ac16      	add	r4, sp, #88	; 0x58
 8018ada:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8018adc:	e884 000c 	stmia.w	r4, {r2, r3}
 8018ae0:	2f00      	cmp	r7, #0
 8018ae2:	f000 80a8 	beq.w	8018c36 <rcutils_split+0x166>
 8018ae6:	4605      	mov	r5, r0
 8018ae8:	2800      	cmp	r0, #0
 8018aea:	d07e      	beq.n	8018bea <rcutils_split+0x11a>
 8018aec:	7803      	ldrb	r3, [r0, #0]
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d07b      	beq.n	8018bea <rcutils_split+0x11a>
 8018af2:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 8018af6:	460e      	mov	r6, r1
 8018af8:	9203      	str	r2, [sp, #12]
 8018afa:	f107 0408 	add.w	r4, r7, #8
 8018afe:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 8018b02:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018b06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018b08:	4628      	mov	r0, r5
 8018b0a:	f8c4 b000 	str.w	fp, [r4]
 8018b0e:	f7e7 fbf7 	bl	8000300 <strlen>
 8018b12:	782c      	ldrb	r4, [r5, #0]
 8018b14:	182b      	adds	r3, r5, r0
 8018b16:	1ba4      	subs	r4, r4, r6
 8018b18:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018b1c:	fab4 f484 	clz	r4, r4
 8018b20:	42b3      	cmp	r3, r6
 8018b22:	bf14      	ite	ne
 8018b24:	4680      	movne	r8, r0
 8018b26:	f1a0 0801 	subeq.w	r8, r0, #1
 8018b2a:	2001      	movs	r0, #1
 8018b2c:	0964      	lsrs	r4, r4, #5
 8018b2e:	6038      	str	r0, [r7, #0]
 8018b30:	4544      	cmp	r4, r8
 8018b32:	d26b      	bcs.n	8018c0c <rcutils_split+0x13c>
 8018b34:	192b      	adds	r3, r5, r4
 8018b36:	eb05 0108 	add.w	r1, r5, r8
 8018b3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018b3e:	42b2      	cmp	r2, r6
 8018b40:	d101      	bne.n	8018b46 <rcutils_split+0x76>
 8018b42:	3001      	adds	r0, #1
 8018b44:	6038      	str	r0, [r7, #0]
 8018b46:	4299      	cmp	r1, r3
 8018b48:	d1f7      	bne.n	8018b3a <rcutils_split+0x6a>
 8018b4a:	9b03      	ldr	r3, [sp, #12]
 8018b4c:	0080      	lsls	r0, r0, #2
 8018b4e:	4659      	mov	r1, fp
 8018b50:	4798      	blx	r3
 8018b52:	4603      	mov	r3, r0
 8018b54:	6078      	str	r0, [r7, #4]
 8018b56:	2800      	cmp	r0, #0
 8018b58:	d05f      	beq.n	8018c1a <rcutils_split+0x14a>
 8018b5a:	f04f 0a00 	mov.w	sl, #0
 8018b5e:	46a1      	mov	r9, r4
 8018b60:	e002      	b.n	8018b68 <rcutils_split+0x98>
 8018b62:	3401      	adds	r4, #1
 8018b64:	45a0      	cmp	r8, r4
 8018b66:	d922      	bls.n	8018bae <rcutils_split+0xde>
 8018b68:	5d2a      	ldrb	r2, [r5, r4]
 8018b6a:	42b2      	cmp	r2, r6
 8018b6c:	d1f9      	bne.n	8018b62 <rcutils_split+0x92>
 8018b6e:	45a1      	cmp	r9, r4
 8018b70:	eba4 0209 	sub.w	r2, r4, r9
 8018b74:	d032      	beq.n	8018bdc <rcutils_split+0x10c>
 8018b76:	4659      	mov	r1, fp
 8018b78:	1c90      	adds	r0, r2, #2
 8018b7a:	9302      	str	r3, [sp, #8]
 8018b7c:	9b03      	ldr	r3, [sp, #12]
 8018b7e:	9201      	str	r2, [sp, #4]
 8018b80:	4798      	blx	r3
 8018b82:	9a01      	ldr	r2, [sp, #4]
 8018b84:	9b02      	ldr	r3, [sp, #8]
 8018b86:	1c51      	adds	r1, r2, #1
 8018b88:	687a      	ldr	r2, [r7, #4]
 8018b8a:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 8018b8e:	eb05 0309 	add.w	r3, r5, r9
 8018b92:	f852 002a 	ldr.w	r0, [r2, sl, lsl #2]
 8018b96:	2800      	cmp	r0, #0
 8018b98:	d04f      	beq.n	8018c3a <rcutils_split+0x16a>
 8018b9a:	4a2b      	ldr	r2, [pc, #172]	; (8018c48 <rcutils_split+0x178>)
 8018b9c:	f10a 0a01 	add.w	sl, sl, #1
 8018ba0:	f001 fc46 	bl	801a430 <sniprintf>
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	3401      	adds	r4, #1
 8018ba8:	45a0      	cmp	r8, r4
 8018baa:	46a1      	mov	r9, r4
 8018bac:	d8dc      	bhi.n	8018b68 <rcutils_split+0x98>
 8018bae:	45a1      	cmp	r9, r4
 8018bb0:	d039      	beq.n	8018c26 <rcutils_split+0x156>
 8018bb2:	eba4 0409 	sub.w	r4, r4, r9
 8018bb6:	4659      	mov	r1, fp
 8018bb8:	9301      	str	r3, [sp, #4]
 8018bba:	1ca0      	adds	r0, r4, #2
 8018bbc:	9b03      	ldr	r3, [sp, #12]
 8018bbe:	4798      	blx	r3
 8018bc0:	9b01      	ldr	r3, [sp, #4]
 8018bc2:	4a21      	ldr	r2, [pc, #132]	; (8018c48 <rcutils_split+0x178>)
 8018bc4:	1c61      	adds	r1, r4, #1
 8018bc6:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 8018bca:	eb05 0309 	add.w	r3, r5, r9
 8018bce:	6878      	ldr	r0, [r7, #4]
 8018bd0:	2500      	movs	r5, #0
 8018bd2:	f850 002a 	ldr.w	r0, [r0, sl, lsl #2]
 8018bd6:	f001 fc2b 	bl	801a430 <sniprintf>
 8018bda:	e011      	b.n	8018c00 <rcutils_split+0x130>
 8018bdc:	683a      	ldr	r2, [r7, #0]
 8018bde:	2100      	movs	r1, #0
 8018be0:	3a01      	subs	r2, #1
 8018be2:	603a      	str	r2, [r7, #0]
 8018be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018be8:	e7dd      	b.n	8018ba6 <rcutils_split+0xd6>
 8018bea:	ac04      	add	r4, sp, #16
 8018bec:	a804      	add	r0, sp, #16
 8018bee:	f000 f82d 	bl	8018c4c <rcutils_get_zero_initialized_string_array>
 8018bf2:	2500      	movs	r5, #0
 8018bf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018bf6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8018bf8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018bfc:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8018c00:	4628      	mov	r0, r5
 8018c02:	b00d      	add	sp, #52	; 0x34
 8018c04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c08:	b002      	add	sp, #8
 8018c0a:	4770      	bx	lr
 8018c0c:	9b03      	ldr	r3, [sp, #12]
 8018c0e:	4659      	mov	r1, fp
 8018c10:	2004      	movs	r0, #4
 8018c12:	4798      	blx	r3
 8018c14:	4603      	mov	r3, r0
 8018c16:	6078      	str	r0, [r7, #4]
 8018c18:	b928      	cbnz	r0, 8018c26 <rcutils_split+0x156>
 8018c1a:	4638      	mov	r0, r7
 8018c1c:	f000 f834 	bl	8018c88 <rcutils_string_array_fini>
 8018c20:	b970      	cbnz	r0, 8018c40 <rcutils_split+0x170>
 8018c22:	2502      	movs	r5, #2
 8018c24:	e7ec      	b.n	8018c00 <rcutils_split+0x130>
 8018c26:	683a      	ldr	r2, [r7, #0]
 8018c28:	2100      	movs	r1, #0
 8018c2a:	3a01      	subs	r2, #1
 8018c2c:	460d      	mov	r5, r1
 8018c2e:	603a      	str	r2, [r7, #0]
 8018c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018c34:	e7e4      	b.n	8018c00 <rcutils_split+0x130>
 8018c36:	250b      	movs	r5, #11
 8018c38:	e7e2      	b.n	8018c00 <rcutils_split+0x130>
 8018c3a:	f8c7 a000 	str.w	sl, [r7]
 8018c3e:	e7ec      	b.n	8018c1a <rcutils_split+0x14a>
 8018c40:	2502      	movs	r5, #2
 8018c42:	f7f4 f879 	bl	800cd38 <rcutils_reset_error>
 8018c46:	e7db      	b.n	8018c00 <rcutils_split+0x130>
 8018c48:	0801ca54 	.word	0x0801ca54

08018c4c <rcutils_get_zero_initialized_string_array>:
 8018c4c:	b570      	push	{r4, r5, r6, lr}
 8018c4e:	b086      	sub	sp, #24
 8018c50:	4606      	mov	r6, r0
 8018c52:	4c0c      	ldr	r4, [pc, #48]	; (8018c84 <rcutils_get_zero_initialized_string_array+0x38>)
 8018c54:	4668      	mov	r0, sp
 8018c56:	f7f4 f811 	bl	800cc7c <rcutils_get_zero_initialized_allocator>
 8018c5a:	46ee      	mov	lr, sp
 8018c5c:	f104 0508 	add.w	r5, r4, #8
 8018c60:	46a4      	mov	ip, r4
 8018c62:	4634      	mov	r4, r6
 8018c64:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018c68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018c6a:	f8de 3000 	ldr.w	r3, [lr]
 8018c6e:	602b      	str	r3, [r5, #0]
 8018c70:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018c74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018c76:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8018c7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8018c7e:	4630      	mov	r0, r6
 8018c80:	b006      	add	sp, #24
 8018c82:	bd70      	pop	{r4, r5, r6, pc}
 8018c84:	200105a8 	.word	0x200105a8

08018c88 <rcutils_string_array_fini>:
 8018c88:	b328      	cbz	r0, 8018cd6 <rcutils_string_array_fini+0x4e>
 8018c8a:	b570      	push	{r4, r5, r6, lr}
 8018c8c:	4604      	mov	r4, r0
 8018c8e:	6840      	ldr	r0, [r0, #4]
 8018c90:	b1e0      	cbz	r0, 8018ccc <rcutils_string_array_fini+0x44>
 8018c92:	f104 0008 	add.w	r0, r4, #8
 8018c96:	f7f4 f82b 	bl	800ccf0 <rcutils_allocator_is_valid>
 8018c9a:	b1c0      	cbz	r0, 8018cce <rcutils_string_array_fini+0x46>
 8018c9c:	6823      	ldr	r3, [r4, #0]
 8018c9e:	b1c3      	cbz	r3, 8018cd2 <rcutils_string_array_fini+0x4a>
 8018ca0:	2500      	movs	r5, #0
 8018ca2:	6860      	ldr	r0, [r4, #4]
 8018ca4:	462e      	mov	r6, r5
 8018ca6:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8018caa:	68e3      	ldr	r3, [r4, #12]
 8018cac:	69a1      	ldr	r1, [r4, #24]
 8018cae:	4798      	blx	r3
 8018cb0:	e9d4 3000 	ldrd	r3, r0, [r4]
 8018cb4:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8018cb8:	3501      	adds	r5, #1
 8018cba:	429d      	cmp	r5, r3
 8018cbc:	d3f3      	bcc.n	8018ca6 <rcutils_string_array_fini+0x1e>
 8018cbe:	68e3      	ldr	r3, [r4, #12]
 8018cc0:	69a1      	ldr	r1, [r4, #24]
 8018cc2:	4798      	blx	r3
 8018cc4:	2300      	movs	r3, #0
 8018cc6:	4618      	mov	r0, r3
 8018cc8:	e9c4 3300 	strd	r3, r3, [r4]
 8018ccc:	bd70      	pop	{r4, r5, r6, pc}
 8018cce:	200b      	movs	r0, #11
 8018cd0:	bd70      	pop	{r4, r5, r6, pc}
 8018cd2:	6860      	ldr	r0, [r4, #4]
 8018cd4:	e7f3      	b.n	8018cbe <rcutils_string_array_fini+0x36>
 8018cd6:	200b      	movs	r0, #11
 8018cd8:	4770      	bx	lr
 8018cda:	bf00      	nop

08018cdc <rmw_get_zero_initialized_discovery_options>:
 8018cdc:	b510      	push	{r4, lr}
 8018cde:	4604      	mov	r4, r0
 8018ce0:	2220      	movs	r2, #32
 8018ce2:	2100      	movs	r1, #0
 8018ce4:	f001 fc7e 	bl	801a5e4 <memset>
 8018ce8:	4620      	mov	r0, r4
 8018cea:	bd10      	pop	{r4, pc}

08018cec <rmw_discovery_options_init>:
 8018cec:	b570      	push	{r4, r5, r6, lr}
 8018cee:	b318      	cbz	r0, 8018d38 <rmw_discovery_options_init+0x4c>
 8018cf0:	4604      	mov	r4, r0
 8018cf2:	4610      	mov	r0, r2
 8018cf4:	460e      	mov	r6, r1
 8018cf6:	4615      	mov	r5, r2
 8018cf8:	f7f3 fffa 	bl	800ccf0 <rcutils_allocator_is_valid>
 8018cfc:	b1e0      	cbz	r0, 8018d38 <rmw_discovery_options_init+0x4c>
 8018cfe:	68a3      	ldr	r3, [r4, #8]
 8018d00:	b9d3      	cbnz	r3, 8018d38 <rmw_discovery_options_init+0x4c>
 8018d02:	6863      	ldr	r3, [r4, #4]
 8018d04:	b9c3      	cbnz	r3, 8018d38 <rmw_discovery_options_init+0x4c>
 8018d06:	7823      	ldrb	r3, [r4, #0]
 8018d08:	b90b      	cbnz	r3, 8018d0e <rmw_discovery_options_init+0x22>
 8018d0a:	2302      	movs	r3, #2
 8018d0c:	7023      	strb	r3, [r4, #0]
 8018d0e:	b1a6      	cbz	r6, 8018d3a <rmw_discovery_options_init+0x4e>
 8018d10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8018d14:	4630      	mov	r0, r6
 8018d16:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 8018d1a:	4798      	blx	r3
 8018d1c:	6060      	str	r0, [r4, #4]
 8018d1e:	b170      	cbz	r0, 8018d3e <rmw_discovery_options_init+0x52>
 8018d20:	f104 0c0c 	add.w	ip, r4, #12
 8018d24:	60a6      	str	r6, [r4, #8]
 8018d26:	2600      	movs	r6, #0
 8018d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018d2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018d2e:	682b      	ldr	r3, [r5, #0]
 8018d30:	4630      	mov	r0, r6
 8018d32:	f8cc 3000 	str.w	r3, [ip]
 8018d36:	bd70      	pop	{r4, r5, r6, pc}
 8018d38:	260b      	movs	r6, #11
 8018d3a:	4630      	mov	r0, r6
 8018d3c:	bd70      	pop	{r4, r5, r6, pc}
 8018d3e:	260a      	movs	r6, #10
 8018d40:	e7fb      	b.n	8018d3a <rmw_discovery_options_init+0x4e>
 8018d42:	bf00      	nop

08018d44 <rmw_time_equal>:
 8018d44:	b4f0      	push	{r4, r5, r6, r7}
 8018d46:	b084      	sub	sp, #16
 8018d48:	ac04      	add	r4, sp, #16
 8018d4a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8018d4e:	4603      	mov	r3, r0
 8018d50:	4925      	ldr	r1, [pc, #148]	; (8018de8 <rmw_time_equal+0xa4>)
 8018d52:	9d01      	ldr	r5, [sp, #4]
 8018d54:	4610      	mov	r0, r2
 8018d56:	4299      	cmp	r1, r3
 8018d58:	f04f 0202 	mov.w	r2, #2
 8018d5c:	9e03      	ldr	r6, [sp, #12]
 8018d5e:	41aa      	sbcs	r2, r5
 8018d60:	d330      	bcc.n	8018dc4 <rmw_time_equal+0x80>
 8018d62:	4c22      	ldr	r4, [pc, #136]	; (8018dec <rmw_time_equal+0xa8>)
 8018d64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018d68:	fba3 3204 	umull	r3, r2, r3, r4
 8018d6c:	fb04 2205 	mla	r2, r4, r5, r2
 8018d70:	43dd      	mvns	r5, r3
 8018d72:	1a8c      	subs	r4, r1, r2
 8018d74:	4285      	cmp	r5, r0
 8018d76:	41b4      	sbcs	r4, r6
 8018d78:	d332      	bcc.n	8018de0 <rmw_time_equal+0x9c>
 8018d7a:	eb10 0c03 	adds.w	ip, r0, r3
 8018d7e:	eb42 0106 	adc.w	r1, r2, r6
 8018d82:	4819      	ldr	r0, [pc, #100]	; (8018de8 <rmw_time_equal+0xa4>)
 8018d84:	2202      	movs	r2, #2
 8018d86:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8018d88:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8018d8a:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8018d8e:	4298      	cmp	r0, r3
 8018d90:	41b2      	sbcs	r2, r6
 8018d92:	d31c      	bcc.n	8018dce <rmw_time_equal+0x8a>
 8018d94:	4c15      	ldr	r4, [pc, #84]	; (8018dec <rmw_time_equal+0xa8>)
 8018d96:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8018d9a:	fba3 3204 	umull	r3, r2, r3, r4
 8018d9e:	fb04 2206 	mla	r2, r4, r6, r2
 8018da2:	43de      	mvns	r6, r3
 8018da4:	1a84      	subs	r4, r0, r2
 8018da6:	42ae      	cmp	r6, r5
 8018da8:	41bc      	sbcs	r4, r7
 8018daa:	d315      	bcc.n	8018dd8 <rmw_time_equal+0x94>
 8018dac:	195b      	adds	r3, r3, r5
 8018dae:	eb42 0207 	adc.w	r2, r2, r7
 8018db2:	428a      	cmp	r2, r1
 8018db4:	bf08      	it	eq
 8018db6:	4563      	cmpeq	r3, ip
 8018db8:	bf0c      	ite	eq
 8018dba:	2001      	moveq	r0, #1
 8018dbc:	2000      	movne	r0, #0
 8018dbe:	b004      	add	sp, #16
 8018dc0:	bcf0      	pop	{r4, r5, r6, r7}
 8018dc2:	4770      	bx	lr
 8018dc4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8018dc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018dcc:	e7d9      	b.n	8018d82 <rmw_time_equal+0x3e>
 8018dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018dd2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8018dd6:	e7ec      	b.n	8018db2 <rmw_time_equal+0x6e>
 8018dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ddc:	4602      	mov	r2, r0
 8018dde:	e7e8      	b.n	8018db2 <rmw_time_equal+0x6e>
 8018de0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8018de4:	e7cd      	b.n	8018d82 <rmw_time_equal+0x3e>
 8018de6:	bf00      	nop
 8018de8:	25c17d04 	.word	0x25c17d04
 8018dec:	3b9aca00 	.word	0x3b9aca00

08018df0 <rmw_time_total_nsec>:
 8018df0:	b470      	push	{r4, r5, r6}
 8018df2:	b085      	sub	sp, #20
 8018df4:	ac04      	add	r4, sp, #16
 8018df6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8018dfa:	4603      	mov	r3, r0
 8018dfc:	4913      	ldr	r1, [pc, #76]	; (8018e4c <rmw_time_total_nsec+0x5c>)
 8018dfe:	9d01      	ldr	r5, [sp, #4]
 8018e00:	4610      	mov	r0, r2
 8018e02:	4299      	cmp	r1, r3
 8018e04:	f04f 0202 	mov.w	r2, #2
 8018e08:	9e03      	ldr	r6, [sp, #12]
 8018e0a:	41aa      	sbcs	r2, r5
 8018e0c:	d311      	bcc.n	8018e32 <rmw_time_total_nsec+0x42>
 8018e0e:	4c10      	ldr	r4, [pc, #64]	; (8018e50 <rmw_time_total_nsec+0x60>)
 8018e10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018e14:	fba3 3204 	umull	r3, r2, r3, r4
 8018e18:	fb04 2205 	mla	r2, r4, r5, r2
 8018e1c:	43dd      	mvns	r5, r3
 8018e1e:	1a8c      	subs	r4, r1, r2
 8018e20:	4285      	cmp	r5, r0
 8018e22:	41b4      	sbcs	r4, r6
 8018e24:	d30c      	bcc.n	8018e40 <rmw_time_total_nsec+0x50>
 8018e26:	1818      	adds	r0, r3, r0
 8018e28:	eb42 0106 	adc.w	r1, r2, r6
 8018e2c:	b005      	add	sp, #20
 8018e2e:	bc70      	pop	{r4, r5, r6}
 8018e30:	4770      	bx	lr
 8018e32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018e36:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018e3a:	b005      	add	sp, #20
 8018e3c:	bc70      	pop	{r4, r5, r6}
 8018e3e:	4770      	bx	lr
 8018e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018e44:	b005      	add	sp, #20
 8018e46:	bc70      	pop	{r4, r5, r6}
 8018e48:	4770      	bx	lr
 8018e4a:	bf00      	nop
 8018e4c:	25c17d04 	.word	0x25c17d04
 8018e50:	3b9aca00 	.word	0x3b9aca00

08018e54 <on_status>:
 8018e54:	b082      	sub	sp, #8
 8018e56:	b002      	add	sp, #8
 8018e58:	4770      	bx	lr
 8018e5a:	bf00      	nop

08018e5c <on_topic>:
 8018e5c:	4a23      	ldr	r2, [pc, #140]	; (8018eec <on_topic+0x90>)
 8018e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e62:	6812      	ldr	r2, [r2, #0]
 8018e64:	b094      	sub	sp, #80	; 0x50
 8018e66:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8018e68:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 8018e6c:	9113      	str	r1, [sp, #76]	; 0x4c
 8018e6e:	9312      	str	r3, [sp, #72]	; 0x48
 8018e70:	b3c2      	cbz	r2, 8018ee4 <on_topic+0x88>
 8018e72:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8018e76:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8018e7a:	e001      	b.n	8018e80 <on_topic+0x24>
 8018e7c:	6852      	ldr	r2, [r2, #4]
 8018e7e:	b38a      	cbz	r2, 8018ee4 <on_topic+0x88>
 8018e80:	6894      	ldr	r4, [r2, #8]
 8018e82:	8aa3      	ldrh	r3, [r4, #20]
 8018e84:	428b      	cmp	r3, r1
 8018e86:	d1f9      	bne.n	8018e7c <on_topic+0x20>
 8018e88:	7da3      	ldrb	r3, [r4, #22]
 8018e8a:	4283      	cmp	r3, r0
 8018e8c:	d1f6      	bne.n	8018e7c <on_topic+0x20>
 8018e8e:	2248      	movs	r2, #72	; 0x48
 8018e90:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8018e94:	4668      	mov	r0, sp
 8018e96:	f001 fcd6 	bl	801a846 <memcpy>
 8018e9a:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8018e9e:	4620      	mov	r0, r4
 8018ea0:	cb0c      	ldmia	r3, {r2, r3}
 8018ea2:	f7fb fdf9 	bl	8014a98 <rmw_uxrce_get_static_input_buffer_for_entity>
 8018ea6:	4607      	mov	r7, r0
 8018ea8:	b1e0      	cbz	r0, 8018ee4 <on_topic+0x88>
 8018eaa:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8018eae:	462a      	mov	r2, r5
 8018eb0:	4630      	mov	r0, r6
 8018eb2:	f108 0110 	add.w	r1, r8, #16
 8018eb6:	f7f4 fabd 	bl	800d434 <ucdr_deserialize_array_uint8_t>
 8018eba:	b930      	cbnz	r0, 8018eca <on_topic+0x6e>
 8018ebc:	4639      	mov	r1, r7
 8018ebe:	480c      	ldr	r0, [pc, #48]	; (8018ef0 <on_topic+0x94>)
 8018ec0:	b014      	add	sp, #80	; 0x50
 8018ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018ec6:	f000 b8bd 	b.w	8019044 <put_memory>
 8018eca:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8018ece:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 8018ed2:	f000 f97b 	bl	80191cc <rmw_uros_epoch_nanos>
 8018ed6:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 8018eda:	2305      	movs	r3, #5
 8018edc:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018ee0:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8018ee4:	b014      	add	sp, #80	; 0x50
 8018ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018eea:	bf00      	nop
 8018eec:	200104ec 	.word	0x200104ec
 8018ef0:	200104dc 	.word	0x200104dc

08018ef4 <on_request>:
 8018ef4:	4824      	ldr	r0, [pc, #144]	; (8018f88 <on_request+0x94>)
 8018ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018efa:	6800      	ldr	r0, [r0, #0]
 8018efc:	b094      	sub	sp, #80	; 0x50
 8018efe:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8018f00:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 8018f04:	9113      	str	r1, [sp, #76]	; 0x4c
 8018f06:	2800      	cmp	r0, #0
 8018f08:	d03b      	beq.n	8018f82 <on_request+0x8e>
 8018f0a:	461d      	mov	r5, r3
 8018f0c:	e001      	b.n	8018f12 <on_request+0x1e>
 8018f0e:	6840      	ldr	r0, [r0, #4]
 8018f10:	b3b8      	cbz	r0, 8018f82 <on_request+0x8e>
 8018f12:	6884      	ldr	r4, [r0, #8]
 8018f14:	8b21      	ldrh	r1, [r4, #24]
 8018f16:	4291      	cmp	r1, r2
 8018f18:	d1f9      	bne.n	8018f0e <on_request+0x1a>
 8018f1a:	2248      	movs	r2, #72	; 0x48
 8018f1c:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8018f20:	4668      	mov	r0, sp
 8018f22:	f001 fc90 	bl	801a846 <memcpy>
 8018f26:	f104 0320 	add.w	r3, r4, #32
 8018f2a:	4620      	mov	r0, r4
 8018f2c:	cb0c      	ldmia	r3, {r2, r3}
 8018f2e:	f7fb fdb3 	bl	8014a98 <rmw_uxrce_get_static_input_buffer_for_entity>
 8018f32:	4680      	mov	r8, r0
 8018f34:	b328      	cbz	r0, 8018f82 <on_request+0x8e>
 8018f36:	4630      	mov	r0, r6
 8018f38:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8018f3c:	463a      	mov	r2, r7
 8018f3e:	f106 0110 	add.w	r1, r6, #16
 8018f42:	f7f4 fa77 	bl	800d434 <ucdr_deserialize_array_uint8_t>
 8018f46:	b930      	cbnz	r0, 8018f56 <on_request+0x62>
 8018f48:	4641      	mov	r1, r8
 8018f4a:	4810      	ldr	r0, [pc, #64]	; (8018f8c <on_request+0x98>)
 8018f4c:	b014      	add	sp, #80	; 0x50
 8018f4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018f52:	f000 b877 	b.w	8019044 <put_memory>
 8018f56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018f58:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 8018f5c:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 8018f60:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 8018f64:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018f68:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018f6c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8018f70:	f000 f92c 	bl	80191cc <rmw_uros_epoch_nanos>
 8018f74:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 8018f78:	2303      	movs	r3, #3
 8018f7a:	e942 0102 	strd	r0, r1, [r2, #-8]
 8018f7e:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 8018f82:	b014      	add	sp, #80	; 0x50
 8018f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f88:	200104bc 	.word	0x200104bc
 8018f8c:	200104dc 	.word	0x200104dc

08018f90 <on_reply>:
 8018f90:	4822      	ldr	r0, [pc, #136]	; (801901c <on_reply+0x8c>)
 8018f92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f96:	6800      	ldr	r0, [r0, #0]
 8018f98:	b094      	sub	sp, #80	; 0x50
 8018f9a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8018f9c:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 8018fa0:	9113      	str	r1, [sp, #76]	; 0x4c
 8018fa2:	b3b8      	cbz	r0, 8019014 <on_reply+0x84>
 8018fa4:	461d      	mov	r5, r3
 8018fa6:	e001      	b.n	8018fac <on_reply+0x1c>
 8018fa8:	6840      	ldr	r0, [r0, #4]
 8018faa:	b398      	cbz	r0, 8019014 <on_reply+0x84>
 8018fac:	6884      	ldr	r4, [r0, #8]
 8018fae:	8b21      	ldrh	r1, [r4, #24]
 8018fb0:	4291      	cmp	r1, r2
 8018fb2:	d1f9      	bne.n	8018fa8 <on_reply+0x18>
 8018fb4:	2248      	movs	r2, #72	; 0x48
 8018fb6:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8018fba:	4668      	mov	r0, sp
 8018fbc:	f001 fc43 	bl	801a846 <memcpy>
 8018fc0:	f104 0320 	add.w	r3, r4, #32
 8018fc4:	4620      	mov	r0, r4
 8018fc6:	cb0c      	ldmia	r3, {r2, r3}
 8018fc8:	f7fb fd66 	bl	8014a98 <rmw_uxrce_get_static_input_buffer_for_entity>
 8018fcc:	4680      	mov	r8, r0
 8018fce:	b308      	cbz	r0, 8019014 <on_reply+0x84>
 8018fd0:	4630      	mov	r0, r6
 8018fd2:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8018fd6:	463a      	mov	r2, r7
 8018fd8:	f106 0110 	add.w	r1, r6, #16
 8018fdc:	f7f4 fa2a 	bl	800d434 <ucdr_deserialize_array_uint8_t>
 8018fe0:	b930      	cbnz	r0, 8018ff0 <on_reply+0x60>
 8018fe2:	4641      	mov	r1, r8
 8018fe4:	480e      	ldr	r0, [pc, #56]	; (8019020 <on_reply+0x90>)
 8018fe6:	b014      	add	sp, #80	; 0x50
 8018fe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018fec:	f000 b82a 	b.w	8019044 <put_memory>
 8018ff0:	2200      	movs	r2, #0
 8018ff2:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 8018ff6:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 8018ffa:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 8018ffe:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 8019002:	f000 f8e3 	bl	80191cc <rmw_uros_epoch_nanos>
 8019006:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801900a:	2304      	movs	r3, #4
 801900c:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019010:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 8019014:	b014      	add	sp, #80	; 0x50
 8019016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801901a:	bf00      	nop
 801901c:	2000bb08 	.word	0x2000bb08
 8019020:	200104dc 	.word	0x200104dc

08019024 <get_memory>:
 8019024:	4603      	mov	r3, r0
 8019026:	6840      	ldr	r0, [r0, #4]
 8019028:	b158      	cbz	r0, 8019042 <get_memory+0x1e>
 801902a:	6842      	ldr	r2, [r0, #4]
 801902c:	605a      	str	r2, [r3, #4]
 801902e:	b10a      	cbz	r2, 8019034 <get_memory+0x10>
 8019030:	2100      	movs	r1, #0
 8019032:	6011      	str	r1, [r2, #0]
 8019034:	681a      	ldr	r2, [r3, #0]
 8019036:	6042      	str	r2, [r0, #4]
 8019038:	b102      	cbz	r2, 801903c <get_memory+0x18>
 801903a:	6010      	str	r0, [r2, #0]
 801903c:	2200      	movs	r2, #0
 801903e:	6002      	str	r2, [r0, #0]
 8019040:	6018      	str	r0, [r3, #0]
 8019042:	4770      	bx	lr

08019044 <put_memory>:
 8019044:	680b      	ldr	r3, [r1, #0]
 8019046:	b10b      	cbz	r3, 801904c <put_memory+0x8>
 8019048:	684a      	ldr	r2, [r1, #4]
 801904a:	605a      	str	r2, [r3, #4]
 801904c:	684a      	ldr	r2, [r1, #4]
 801904e:	b102      	cbz	r2, 8019052 <put_memory+0xe>
 8019050:	6013      	str	r3, [r2, #0]
 8019052:	6803      	ldr	r3, [r0, #0]
 8019054:	428b      	cmp	r3, r1
 8019056:	6843      	ldr	r3, [r0, #4]
 8019058:	bf08      	it	eq
 801905a:	6002      	streq	r2, [r0, #0]
 801905c:	604b      	str	r3, [r1, #4]
 801905e:	b103      	cbz	r3, 8019062 <put_memory+0x1e>
 8019060:	6019      	str	r1, [r3, #0]
 8019062:	2300      	movs	r3, #0
 8019064:	600b      	str	r3, [r1, #0]
 8019066:	6041      	str	r1, [r0, #4]
 8019068:	4770      	bx	lr
 801906a:	bf00      	nop

0801906c <rmw_create_guard_condition>:
 801906c:	b538      	push	{r3, r4, r5, lr}
 801906e:	4605      	mov	r5, r0
 8019070:	4808      	ldr	r0, [pc, #32]	; (8019094 <rmw_create_guard_condition+0x28>)
 8019072:	f7ff ffd7 	bl	8019024 <get_memory>
 8019076:	4603      	mov	r3, r0
 8019078:	b148      	cbz	r0, 801908e <rmw_create_guard_condition+0x22>
 801907a:	6884      	ldr	r4, [r0, #8]
 801907c:	2300      	movs	r3, #0
 801907e:	61e5      	str	r5, [r4, #28]
 8019080:	7423      	strb	r3, [r4, #16]
 8019082:	f7fa fa99 	bl	80135b8 <rmw_get_implementation_identifier>
 8019086:	f104 0314 	add.w	r3, r4, #20
 801908a:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801908e:	4618      	mov	r0, r3
 8019090:	bd38      	pop	{r3, r4, r5, pc}
 8019092:	bf00      	nop
 8019094:	2001047c 	.word	0x2001047c

08019098 <rmw_destroy_guard_condition>:
 8019098:	b508      	push	{r3, lr}
 801909a:	4b08      	ldr	r3, [pc, #32]	; (80190bc <rmw_destroy_guard_condition+0x24>)
 801909c:	6819      	ldr	r1, [r3, #0]
 801909e:	b911      	cbnz	r1, 80190a6 <rmw_destroy_guard_condition+0xe>
 80190a0:	e00a      	b.n	80190b8 <rmw_destroy_guard_condition+0x20>
 80190a2:	6849      	ldr	r1, [r1, #4]
 80190a4:	b141      	cbz	r1, 80190b8 <rmw_destroy_guard_condition+0x20>
 80190a6:	688b      	ldr	r3, [r1, #8]
 80190a8:	3314      	adds	r3, #20
 80190aa:	4298      	cmp	r0, r3
 80190ac:	d1f9      	bne.n	80190a2 <rmw_destroy_guard_condition+0xa>
 80190ae:	4803      	ldr	r0, [pc, #12]	; (80190bc <rmw_destroy_guard_condition+0x24>)
 80190b0:	f7ff ffc8 	bl	8019044 <put_memory>
 80190b4:	2000      	movs	r0, #0
 80190b6:	bd08      	pop	{r3, pc}
 80190b8:	2001      	movs	r0, #1
 80190ba:	bd08      	pop	{r3, pc}
 80190bc:	2001047c 	.word	0x2001047c

080190c0 <destroy_topic>:
 80190c0:	b538      	push	{r3, r4, r5, lr}
 80190c2:	6985      	ldr	r5, [r0, #24]
 80190c4:	b1dd      	cbz	r5, 80190fe <destroy_topic+0x3e>
 80190c6:	4604      	mov	r4, r0
 80190c8:	6928      	ldr	r0, [r5, #16]
 80190ca:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80190ce:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80190d2:	6922      	ldr	r2, [r4, #16]
 80190d4:	6819      	ldr	r1, [r3, #0]
 80190d6:	f7fb ff51 	bl	8014f7c <uxr_buffer_delete_entity>
 80190da:	4602      	mov	r2, r0
 80190dc:	6928      	ldr	r0, [r5, #16]
 80190de:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80190e2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80190e6:	f7fb fdd9 	bl	8014c9c <run_xrce_session>
 80190ea:	4603      	mov	r3, r0
 80190ec:	4620      	mov	r0, r4
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	bf14      	ite	ne
 80190f2:	2400      	movne	r4, #0
 80190f4:	2402      	moveq	r4, #2
 80190f6:	f7fb fcc3 	bl	8014a80 <rmw_uxrce_fini_topic_memory>
 80190fa:	4620      	mov	r0, r4
 80190fc:	bd38      	pop	{r3, r4, r5, pc}
 80190fe:	2401      	movs	r4, #1
 8019100:	4620      	mov	r0, r4
 8019102:	bd38      	pop	{r3, r4, r5, pc}

08019104 <flush_session>:
 8019104:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8019106:	f7fc beeb 	b.w	8015ee0 <uxr_run_session_until_confirm_delivery>
 801910a:	bf00      	nop

0801910c <rmw_publish>:
 801910c:	2800      	cmp	r0, #0
 801910e:	d053      	beq.n	80191b8 <rmw_publish+0xac>
 8019110:	b570      	push	{r4, r5, r6, lr}
 8019112:	460d      	mov	r5, r1
 8019114:	b08e      	sub	sp, #56	; 0x38
 8019116:	2900      	cmp	r1, #0
 8019118:	d04b      	beq.n	80191b2 <rmw_publish+0xa6>
 801911a:	4604      	mov	r4, r0
 801911c:	6800      	ldr	r0, [r0, #0]
 801911e:	f7fb fe89 	bl	8014e34 <is_uxrce_rmw_identifier_valid>
 8019122:	2800      	cmp	r0, #0
 8019124:	d045      	beq.n	80191b2 <rmw_publish+0xa6>
 8019126:	6866      	ldr	r6, [r4, #4]
 8019128:	2e00      	cmp	r6, #0
 801912a:	d042      	beq.n	80191b2 <rmw_publish+0xa6>
 801912c:	69b4      	ldr	r4, [r6, #24]
 801912e:	4628      	mov	r0, r5
 8019130:	6923      	ldr	r3, [r4, #16]
 8019132:	4798      	blx	r3
 8019134:	69f3      	ldr	r3, [r6, #28]
 8019136:	9005      	str	r0, [sp, #20]
 8019138:	b113      	cbz	r3, 8019140 <rmw_publish+0x34>
 801913a:	a805      	add	r0, sp, #20
 801913c:	4798      	blx	r3
 801913e:	9805      	ldr	r0, [sp, #20]
 8019140:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8019144:	691b      	ldr	r3, [r3, #16]
 8019146:	9000      	str	r0, [sp, #0]
 8019148:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 801914c:	6972      	ldr	r2, [r6, #20]
 801914e:	ab06      	add	r3, sp, #24
 8019150:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8019152:	f7fe f93f 	bl	80173d4 <uxr_prepare_output_stream>
 8019156:	b1d8      	cbz	r0, 8019190 <rmw_publish+0x84>
 8019158:	68a3      	ldr	r3, [r4, #8]
 801915a:	a906      	add	r1, sp, #24
 801915c:	4628      	mov	r0, r5
 801915e:	4798      	blx	r3
 8019160:	6a33      	ldr	r3, [r6, #32]
 8019162:	4604      	mov	r4, r0
 8019164:	b10b      	cbz	r3, 801916a <rmw_publish+0x5e>
 8019166:	a806      	add	r0, sp, #24
 8019168:	4798      	blx	r3
 801916a:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 801916e:	2b01      	cmp	r3, #1
 8019170:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8019174:	d022      	beq.n	80191bc <rmw_publish+0xb0>
 8019176:	6918      	ldr	r0, [r3, #16]
 8019178:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 801917a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801917e:	f7fc feaf 	bl	8015ee0 <uxr_run_session_until_confirm_delivery>
 8019182:	4020      	ands	r0, r4
 8019184:	b2c4      	uxtb	r4, r0
 8019186:	f084 0001 	eor.w	r0, r4, #1
 801918a:	b2c0      	uxtb	r0, r0
 801918c:	b00e      	add	sp, #56	; 0x38
 801918e:	bd70      	pop	{r4, r5, r6, pc}
 8019190:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8019194:	6918      	ldr	r0, [r3, #16]
 8019196:	9b05      	ldr	r3, [sp, #20]
 8019198:	9602      	str	r6, [sp, #8]
 801919a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801919e:	9300      	str	r3, [sp, #0]
 80191a0:	4b09      	ldr	r3, [pc, #36]	; (80191c8 <rmw_publish+0xbc>)
 80191a2:	9301      	str	r3, [sp, #4]
 80191a4:	ab06      	add	r3, sp, #24
 80191a6:	6972      	ldr	r2, [r6, #20]
 80191a8:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 80191aa:	f7fe f943 	bl	8017434 <uxr_prepare_output_stream_fragmented>
 80191ae:	2800      	cmp	r0, #0
 80191b0:	d1d2      	bne.n	8019158 <rmw_publish+0x4c>
 80191b2:	2001      	movs	r0, #1
 80191b4:	b00e      	add	sp, #56	; 0x38
 80191b6:	bd70      	pop	{r4, r5, r6, pc}
 80191b8:	2001      	movs	r0, #1
 80191ba:	4770      	bx	lr
 80191bc:	6918      	ldr	r0, [r3, #16]
 80191be:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80191c2:	f7fc fad3 	bl	801576c <uxr_flash_output_streams>
 80191c6:	e7de      	b.n	8019186 <rmw_publish+0x7a>
 80191c8:	08019105 	.word	0x08019105

080191cc <rmw_uros_epoch_nanos>:
 80191cc:	4b05      	ldr	r3, [pc, #20]	; (80191e4 <rmw_uros_epoch_nanos+0x18>)
 80191ce:	681b      	ldr	r3, [r3, #0]
 80191d0:	b123      	cbz	r3, 80191dc <rmw_uros_epoch_nanos+0x10>
 80191d2:	6898      	ldr	r0, [r3, #8]
 80191d4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80191d8:	f7fc babe 	b.w	8015758 <uxr_epoch_nanos>
 80191dc:	2000      	movs	r0, #0
 80191de:	2100      	movs	r1, #0
 80191e0:	4770      	bx	lr
 80191e2:	bf00      	nop
 80191e4:	200104cc 	.word	0x200104cc

080191e8 <ucdr_serialize_string>:
 80191e8:	b510      	push	{r4, lr}
 80191ea:	b082      	sub	sp, #8
 80191ec:	4604      	mov	r4, r0
 80191ee:	4608      	mov	r0, r1
 80191f0:	9101      	str	r1, [sp, #4]
 80191f2:	f7e7 f885 	bl	8000300 <strlen>
 80191f6:	4602      	mov	r2, r0
 80191f8:	9901      	ldr	r1, [sp, #4]
 80191fa:	4620      	mov	r0, r4
 80191fc:	3201      	adds	r2, #1
 80191fe:	b002      	add	sp, #8
 8019200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019204:	f7f5 be64 	b.w	800eed0 <ucdr_serialize_sequence_char>

08019208 <ucdr_deserialize_string>:
 8019208:	b500      	push	{lr}
 801920a:	b083      	sub	sp, #12
 801920c:	ab01      	add	r3, sp, #4
 801920e:	f7f5 fe71 	bl	800eef4 <ucdr_deserialize_sequence_char>
 8019212:	b003      	add	sp, #12
 8019214:	f85d fb04 	ldr.w	pc, [sp], #4

08019218 <uxr_init_input_best_effort_stream>:
 8019218:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801921c:	8003      	strh	r3, [r0, #0]
 801921e:	4770      	bx	lr

08019220 <uxr_reset_input_best_effort_stream>:
 8019220:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019224:	8003      	strh	r3, [r0, #0]
 8019226:	4770      	bx	lr

08019228 <uxr_receive_best_effort_message>:
 8019228:	b538      	push	{r3, r4, r5, lr}
 801922a:	4604      	mov	r4, r0
 801922c:	8800      	ldrh	r0, [r0, #0]
 801922e:	460d      	mov	r5, r1
 8019230:	f000 fd46 	bl	8019cc0 <uxr_seq_num_cmp>
 8019234:	4603      	mov	r3, r0
 8019236:	0fc0      	lsrs	r0, r0, #31
 8019238:	2b00      	cmp	r3, #0
 801923a:	bfb8      	it	lt
 801923c:	8025      	strhlt	r5, [r4, #0]
 801923e:	bd38      	pop	{r3, r4, r5, pc}

08019240 <on_full_input_buffer>:
 8019240:	b570      	push	{r4, r5, r6, lr}
 8019242:	460c      	mov	r4, r1
 8019244:	4605      	mov	r5, r0
 8019246:	8908      	ldrh	r0, [r1, #8]
 8019248:	682b      	ldr	r3, [r5, #0]
 801924a:	7d26      	ldrb	r6, [r4, #20]
 801924c:	e9d1 1200 	ldrd	r1, r2, [r1]
 8019250:	fbb2 f2f0 	udiv	r2, r2, r0
 8019254:	eba3 0c01 	sub.w	ip, r3, r1
 8019258:	fbbc fcf2 	udiv	ip, ip, r2
 801925c:	f10c 0c01 	add.w	ip, ip, #1
 8019260:	fa1f f38c 	uxth.w	r3, ip
 8019264:	fbb3 fcf0 	udiv	ip, r3, r0
 8019268:	fb00 331c 	mls	r3, r0, ip, r3
 801926c:	b29b      	uxth	r3, r3
 801926e:	fb02 f303 	mul.w	r3, r2, r3
 8019272:	1d18      	adds	r0, r3, #4
 8019274:	4408      	add	r0, r1
 8019276:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801927a:	b116      	cbz	r6, 8019282 <on_full_input_buffer+0x42>
 801927c:	2600      	movs	r6, #0
 801927e:	f840 6c04 	str.w	r6, [r0, #-4]
 8019282:	2a03      	cmp	r2, #3
 8019284:	d801      	bhi.n	801928a <on_full_input_buffer+0x4a>
 8019286:	2001      	movs	r0, #1
 8019288:	bd70      	pop	{r4, r5, r6, pc}
 801928a:	3308      	adds	r3, #8
 801928c:	4628      	mov	r0, r5
 801928e:	3a04      	subs	r2, #4
 8019290:	4419      	add	r1, r3
 8019292:	692b      	ldr	r3, [r5, #16]
 8019294:	f7f5 fda0 	bl	800edd8 <ucdr_init_buffer_origin>
 8019298:	4628      	mov	r0, r5
 801929a:	4622      	mov	r2, r4
 801929c:	4902      	ldr	r1, [pc, #8]	; (80192a8 <on_full_input_buffer+0x68>)
 801929e:	f7f5 fd77 	bl	800ed90 <ucdr_set_on_full_buffer_callback>
 80192a2:	2000      	movs	r0, #0
 80192a4:	bd70      	pop	{r4, r5, r6, pc}
 80192a6:	bf00      	nop
 80192a8:	08019241 	.word	0x08019241

080192ac <uxr_init_input_reliable_stream>:
 80192ac:	b510      	push	{r4, lr}
 80192ae:	e9c0 1200 	strd	r1, r2, [r0]
 80192b2:	2400      	movs	r4, #0
 80192b4:	9a02      	ldr	r2, [sp, #8]
 80192b6:	8103      	strh	r3, [r0, #8]
 80192b8:	6102      	str	r2, [r0, #16]
 80192ba:	7504      	strb	r4, [r0, #20]
 80192bc:	b1c3      	cbz	r3, 80192f0 <uxr_init_input_reliable_stream+0x44>
 80192be:	600c      	str	r4, [r1, #0]
 80192c0:	8901      	ldrh	r1, [r0, #8]
 80192c2:	2901      	cmp	r1, #1
 80192c4:	d914      	bls.n	80192f0 <uxr_init_input_reliable_stream+0x44>
 80192c6:	f04f 0c01 	mov.w	ip, #1
 80192ca:	6843      	ldr	r3, [r0, #4]
 80192cc:	f10c 0e01 	add.w	lr, ip, #1
 80192d0:	fbbc f2f1 	udiv	r2, ip, r1
 80192d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80192d8:	fb01 c212 	mls	r2, r1, r2, ip
 80192dc:	fa1f fc8e 	uxth.w	ip, lr
 80192e0:	b292      	uxth	r2, r2
 80192e2:	fb02 f303 	mul.w	r3, r2, r3
 80192e6:	6802      	ldr	r2, [r0, #0]
 80192e8:	50d4      	str	r4, [r2, r3]
 80192ea:	8901      	ldrh	r1, [r0, #8]
 80192ec:	4561      	cmp	r1, ip
 80192ee:	d8ec      	bhi.n	80192ca <uxr_init_input_reliable_stream+0x1e>
 80192f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80192f4:	60c3      	str	r3, [r0, #12]
 80192f6:	bd10      	pop	{r4, pc}

080192f8 <uxr_reset_input_reliable_stream>:
 80192f8:	8901      	ldrh	r1, [r0, #8]
 80192fa:	b1d9      	cbz	r1, 8019334 <uxr_reset_input_reliable_stream+0x3c>
 80192fc:	b510      	push	{r4, lr}
 80192fe:	f04f 0e00 	mov.w	lr, #0
 8019302:	46f4      	mov	ip, lr
 8019304:	4674      	mov	r4, lr
 8019306:	6843      	ldr	r3, [r0, #4]
 8019308:	f10e 0e01 	add.w	lr, lr, #1
 801930c:	fbbc f2f1 	udiv	r2, ip, r1
 8019310:	fbb3 f3f1 	udiv	r3, r3, r1
 8019314:	fb01 c212 	mls	r2, r1, r2, ip
 8019318:	fa1f fc8e 	uxth.w	ip, lr
 801931c:	b292      	uxth	r2, r2
 801931e:	fb02 f303 	mul.w	r3, r2, r3
 8019322:	6802      	ldr	r2, [r0, #0]
 8019324:	50d4      	str	r4, [r2, r3]
 8019326:	8901      	ldrh	r1, [r0, #8]
 8019328:	4561      	cmp	r1, ip
 801932a:	d8ec      	bhi.n	8019306 <uxr_reset_input_reliable_stream+0xe>
 801932c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019330:	60c3      	str	r3, [r0, #12]
 8019332:	bd10      	pop	{r4, pc}
 8019334:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019338:	60c3      	str	r3, [r0, #12]
 801933a:	4770      	bx	lr

0801933c <uxr_receive_reliable_message>:
 801933c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019340:	4604      	mov	r4, r0
 8019342:	460d      	mov	r5, r1
 8019344:	8901      	ldrh	r1, [r0, #8]
 8019346:	4617      	mov	r7, r2
 8019348:	8980      	ldrh	r0, [r0, #12]
 801934a:	4698      	mov	r8, r3
 801934c:	f000 fcb0 	bl	8019cb0 <uxr_seq_num_add>
 8019350:	4629      	mov	r1, r5
 8019352:	4606      	mov	r6, r0
 8019354:	89a0      	ldrh	r0, [r4, #12]
 8019356:	f000 fcb3 	bl	8019cc0 <uxr_seq_num_cmp>
 801935a:	2800      	cmp	r0, #0
 801935c:	db0a      	blt.n	8019374 <uxr_receive_reliable_message+0x38>
 801935e:	2600      	movs	r6, #0
 8019360:	4629      	mov	r1, r5
 8019362:	89e0      	ldrh	r0, [r4, #14]
 8019364:	f000 fcac 	bl	8019cc0 <uxr_seq_num_cmp>
 8019368:	2800      	cmp	r0, #0
 801936a:	da00      	bge.n	801936e <uxr_receive_reliable_message+0x32>
 801936c:	81e5      	strh	r5, [r4, #14]
 801936e:	4630      	mov	r0, r6
 8019370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019374:	4630      	mov	r0, r6
 8019376:	4629      	mov	r1, r5
 8019378:	f000 fca2 	bl	8019cc0 <uxr_seq_num_cmp>
 801937c:	2800      	cmp	r0, #0
 801937e:	dbee      	blt.n	801935e <uxr_receive_reliable_message+0x22>
 8019380:	6923      	ldr	r3, [r4, #16]
 8019382:	4638      	mov	r0, r7
 8019384:	4798      	blx	r3
 8019386:	4681      	mov	r9, r0
 8019388:	2101      	movs	r1, #1
 801938a:	89a0      	ldrh	r0, [r4, #12]
 801938c:	f000 fc90 	bl	8019cb0 <uxr_seq_num_add>
 8019390:	f1b9 0f00 	cmp.w	r9, #0
 8019394:	bf08      	it	eq
 8019396:	4285      	cmpeq	r5, r0
 8019398:	bf0c      	ite	eq
 801939a:	2601      	moveq	r6, #1
 801939c:	2600      	movne	r6, #0
 801939e:	d104      	bne.n	80193aa <uxr_receive_reliable_message+0x6e>
 80193a0:	2300      	movs	r3, #0
 80193a2:	9a08      	ldr	r2, [sp, #32]
 80193a4:	81a0      	strh	r0, [r4, #12]
 80193a6:	7013      	strb	r3, [r2, #0]
 80193a8:	e7da      	b.n	8019360 <uxr_receive_reliable_message+0x24>
 80193aa:	8922      	ldrh	r2, [r4, #8]
 80193ac:	6863      	ldr	r3, [r4, #4]
 80193ae:	fbb5 f0f2 	udiv	r0, r5, r2
 80193b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80193b6:	fb02 5010 	mls	r0, r2, r0, r5
 80193ba:	b280      	uxth	r0, r0
 80193bc:	fb03 f000 	mul.w	r0, r3, r0
 80193c0:	6823      	ldr	r3, [r4, #0]
 80193c2:	3004      	adds	r0, #4
 80193c4:	4418      	add	r0, r3
 80193c6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	d1c7      	bne.n	801935e <uxr_receive_reliable_message+0x22>
 80193ce:	4639      	mov	r1, r7
 80193d0:	4642      	mov	r2, r8
 80193d2:	f001 fa38 	bl	801a846 <memcpy>
 80193d6:	8921      	ldrh	r1, [r4, #8]
 80193d8:	6863      	ldr	r3, [r4, #4]
 80193da:	fbb5 f2f1 	udiv	r2, r5, r1
 80193de:	fbb3 f3f1 	udiv	r3, r3, r1
 80193e2:	fb01 5212 	mls	r2, r1, r2, r5
 80193e6:	b292      	uxth	r2, r2
 80193e8:	fb02 f303 	mul.w	r3, r2, r3
 80193ec:	6822      	ldr	r2, [r4, #0]
 80193ee:	f842 8003 	str.w	r8, [r2, r3]
 80193f2:	2301      	movs	r3, #1
 80193f4:	9a08      	ldr	r2, [sp, #32]
 80193f6:	7013      	strb	r3, [r2, #0]
 80193f8:	f1b9 0f00 	cmp.w	r9, #0
 80193fc:	d0af      	beq.n	801935e <uxr_receive_reliable_message+0x22>
 80193fe:	89a6      	ldrh	r6, [r4, #12]
 8019400:	2101      	movs	r1, #1
 8019402:	4630      	mov	r0, r6
 8019404:	f000 fc54 	bl	8019cb0 <uxr_seq_num_add>
 8019408:	8921      	ldrh	r1, [r4, #8]
 801940a:	6863      	ldr	r3, [r4, #4]
 801940c:	4606      	mov	r6, r0
 801940e:	fbb0 f2f1 	udiv	r2, r0, r1
 8019412:	fbb3 f3f1 	udiv	r3, r3, r1
 8019416:	fb01 0212 	mls	r2, r1, r2, r0
 801941a:	6820      	ldr	r0, [r4, #0]
 801941c:	b292      	uxth	r2, r2
 801941e:	fb02 f303 	mul.w	r3, r2, r3
 8019422:	3304      	adds	r3, #4
 8019424:	4418      	add	r0, r3
 8019426:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801942a:	2b00      	cmp	r3, #0
 801942c:	d097      	beq.n	801935e <uxr_receive_reliable_message+0x22>
 801942e:	6923      	ldr	r3, [r4, #16]
 8019430:	4798      	blx	r3
 8019432:	2802      	cmp	r0, #2
 8019434:	d002      	beq.n	801943c <uxr_receive_reliable_message+0x100>
 8019436:	2801      	cmp	r0, #1
 8019438:	d0e2      	beq.n	8019400 <uxr_receive_reliable_message+0xc4>
 801943a:	e790      	b.n	801935e <uxr_receive_reliable_message+0x22>
 801943c:	2601      	movs	r6, #1
 801943e:	e78f      	b.n	8019360 <uxr_receive_reliable_message+0x24>

08019440 <uxr_next_input_reliable_buffer_available>:
 8019440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019444:	4604      	mov	r4, r0
 8019446:	460f      	mov	r7, r1
 8019448:	8980      	ldrh	r0, [r0, #12]
 801944a:	2101      	movs	r1, #1
 801944c:	4690      	mov	r8, r2
 801944e:	f000 fc2f 	bl	8019cb0 <uxr_seq_num_add>
 8019452:	8922      	ldrh	r2, [r4, #8]
 8019454:	6866      	ldr	r6, [r4, #4]
 8019456:	fbb0 f3f2 	udiv	r3, r0, r2
 801945a:	fbb6 f6f2 	udiv	r6, r6, r2
 801945e:	fb02 0313 	mls	r3, r2, r3, r0
 8019462:	b29b      	uxth	r3, r3
 8019464:	fb03 f606 	mul.w	r6, r3, r6
 8019468:	6823      	ldr	r3, [r4, #0]
 801946a:	3604      	adds	r6, #4
 801946c:	441e      	add	r6, r3
 801946e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8019472:	f1b9 0f00 	cmp.w	r9, #0
 8019476:	d023      	beq.n	80194c0 <uxr_next_input_reliable_buffer_available+0x80>
 8019478:	4605      	mov	r5, r0
 801947a:	6923      	ldr	r3, [r4, #16]
 801947c:	4630      	mov	r0, r6
 801947e:	4798      	blx	r3
 8019480:	4682      	mov	sl, r0
 8019482:	b300      	cbz	r0, 80194c6 <uxr_next_input_reliable_buffer_available+0x86>
 8019484:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8019488:	2101      	movs	r1, #1
 801948a:	4650      	mov	r0, sl
 801948c:	f000 fc10 	bl	8019cb0 <uxr_seq_num_add>
 8019490:	8921      	ldrh	r1, [r4, #8]
 8019492:	4682      	mov	sl, r0
 8019494:	6863      	ldr	r3, [r4, #4]
 8019496:	6820      	ldr	r0, [r4, #0]
 8019498:	fbba f2f1 	udiv	r2, sl, r1
 801949c:	fbb3 f3f1 	udiv	r3, r3, r1
 80194a0:	fb01 a212 	mls	r2, r1, r2, sl
 80194a4:	b292      	uxth	r2, r2
 80194a6:	fb02 f303 	mul.w	r3, r2, r3
 80194aa:	3304      	adds	r3, #4
 80194ac:	4418      	add	r0, r3
 80194ae:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80194b2:	b12b      	cbz	r3, 80194c0 <uxr_next_input_reliable_buffer_available+0x80>
 80194b4:	6923      	ldr	r3, [r4, #16]
 80194b6:	4798      	blx	r3
 80194b8:	2802      	cmp	r0, #2
 80194ba:	d01b      	beq.n	80194f4 <uxr_next_input_reliable_buffer_available+0xb4>
 80194bc:	2801      	cmp	r0, #1
 80194be:	d0e3      	beq.n	8019488 <uxr_next_input_reliable_buffer_available+0x48>
 80194c0:	2000      	movs	r0, #0
 80194c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194c6:	464a      	mov	r2, r9
 80194c8:	4631      	mov	r1, r6
 80194ca:	4638      	mov	r0, r7
 80194cc:	f7f5 fc8c 	bl	800ede8 <ucdr_init_buffer>
 80194d0:	8921      	ldrh	r1, [r4, #8]
 80194d2:	6863      	ldr	r3, [r4, #4]
 80194d4:	2001      	movs	r0, #1
 80194d6:	fbb5 f2f1 	udiv	r2, r5, r1
 80194da:	fbb3 f3f1 	udiv	r3, r3, r1
 80194de:	fb01 5212 	mls	r2, r1, r2, r5
 80194e2:	b292      	uxth	r2, r2
 80194e4:	fb02 f303 	mul.w	r3, r2, r3
 80194e8:	6822      	ldr	r2, [r4, #0]
 80194ea:	f842 a003 	str.w	sl, [r2, r3]
 80194ee:	81a5      	strh	r5, [r4, #12]
 80194f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194f4:	8920      	ldrh	r0, [r4, #8]
 80194f6:	eb06 0108 	add.w	r1, r6, r8
 80194fa:	6863      	ldr	r3, [r4, #4]
 80194fc:	eba9 0208 	sub.w	r2, r9, r8
 8019500:	fbb5 f6f0 	udiv	r6, r5, r0
 8019504:	fbb3 f3f0 	udiv	r3, r3, r0
 8019508:	fb00 5516 	mls	r5, r0, r6, r5
 801950c:	2000      	movs	r0, #0
 801950e:	b2ad      	uxth	r5, r5
 8019510:	fb03 f505 	mul.w	r5, r3, r5
 8019514:	6823      	ldr	r3, [r4, #0]
 8019516:	5158      	str	r0, [r3, r5]
 8019518:	4638      	mov	r0, r7
 801951a:	f7f5 fc65 	bl	800ede8 <ucdr_init_buffer>
 801951e:	4638      	mov	r0, r7
 8019520:	4622      	mov	r2, r4
 8019522:	4903      	ldr	r1, [pc, #12]	; (8019530 <uxr_next_input_reliable_buffer_available+0xf0>)
 8019524:	f7f5 fc34 	bl	800ed90 <ucdr_set_on_full_buffer_callback>
 8019528:	2001      	movs	r0, #1
 801952a:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801952e:	e7c8      	b.n	80194c2 <uxr_next_input_reliable_buffer_available+0x82>
 8019530:	08019241 	.word	0x08019241

08019534 <uxr_process_heartbeat>:
 8019534:	b538      	push	{r3, r4, r5, lr}
 8019536:	4611      	mov	r1, r2
 8019538:	4604      	mov	r4, r0
 801953a:	89c0      	ldrh	r0, [r0, #14]
 801953c:	4615      	mov	r5, r2
 801953e:	f000 fbbf 	bl	8019cc0 <uxr_seq_num_cmp>
 8019542:	2800      	cmp	r0, #0
 8019544:	bfb8      	it	lt
 8019546:	81e5      	strhlt	r5, [r4, #14]
 8019548:	bd38      	pop	{r3, r4, r5, pc}
 801954a:	bf00      	nop

0801954c <uxr_compute_acknack>:
 801954c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019550:	8903      	ldrh	r3, [r0, #8]
 8019552:	4604      	mov	r4, r0
 8019554:	460f      	mov	r7, r1
 8019556:	8985      	ldrh	r5, [r0, #12]
 8019558:	b1db      	cbz	r3, 8019592 <uxr_compute_acknack+0x46>
 801955a:	4628      	mov	r0, r5
 801955c:	2601      	movs	r6, #1
 801955e:	e004      	b.n	801956a <uxr_compute_acknack+0x1e>
 8019560:	4566      	cmp	r6, ip
 8019562:	f106 0601 	add.w	r6, r6, #1
 8019566:	d214      	bcs.n	8019592 <uxr_compute_acknack+0x46>
 8019568:	89a0      	ldrh	r0, [r4, #12]
 801956a:	b2b1      	uxth	r1, r6
 801956c:	f000 fba0 	bl	8019cb0 <uxr_seq_num_add>
 8019570:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019574:	fbb0 f2fc 	udiv	r2, r0, ip
 8019578:	e9d4 1300 	ldrd	r1, r3, [r4]
 801957c:	fb0c 0212 	mls	r2, ip, r2, r0
 8019580:	fbb3 f3fc 	udiv	r3, r3, ip
 8019584:	b292      	uxth	r2, r2
 8019586:	fb02 f303 	mul.w	r3, r2, r3
 801958a:	58cb      	ldr	r3, [r1, r3]
 801958c:	2b00      	cmp	r3, #0
 801958e:	d1e7      	bne.n	8019560 <uxr_compute_acknack+0x14>
 8019590:	4605      	mov	r5, r0
 8019592:	803d      	strh	r5, [r7, #0]
 8019594:	2101      	movs	r1, #1
 8019596:	89e6      	ldrh	r6, [r4, #14]
 8019598:	4628      	mov	r0, r5
 801959a:	f000 fb8d 	bl	8019cb8 <uxr_seq_num_sub>
 801959e:	4601      	mov	r1, r0
 80195a0:	4630      	mov	r0, r6
 80195a2:	f000 fb89 	bl	8019cb8 <uxr_seq_num_sub>
 80195a6:	4606      	mov	r6, r0
 80195a8:	b328      	cbz	r0, 80195f6 <uxr_compute_acknack+0xaa>
 80195aa:	f04f 0900 	mov.w	r9, #0
 80195ae:	f04f 0801 	mov.w	r8, #1
 80195b2:	464d      	mov	r5, r9
 80195b4:	fa1f f189 	uxth.w	r1, r9
 80195b8:	8838      	ldrh	r0, [r7, #0]
 80195ba:	f000 fb79 	bl	8019cb0 <uxr_seq_num_add>
 80195be:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80195c2:	6861      	ldr	r1, [r4, #4]
 80195c4:	fa08 fe09 	lsl.w	lr, r8, r9
 80195c8:	6822      	ldr	r2, [r4, #0]
 80195ca:	f109 0901 	add.w	r9, r9, #1
 80195ce:	ea4e 0e05 	orr.w	lr, lr, r5
 80195d2:	fbb0 f3fc 	udiv	r3, r0, ip
 80195d6:	fbb1 f1fc 	udiv	r1, r1, ip
 80195da:	fb03 001c 	mls	r0, r3, ip, r0
 80195de:	b283      	uxth	r3, r0
 80195e0:	fb01 f303 	mul.w	r3, r1, r3
 80195e4:	58d3      	ldr	r3, [r2, r3]
 80195e6:	b90b      	cbnz	r3, 80195ec <uxr_compute_acknack+0xa0>
 80195e8:	fa1f f58e 	uxth.w	r5, lr
 80195ec:	454e      	cmp	r6, r9
 80195ee:	d1e1      	bne.n	80195b4 <uxr_compute_acknack+0x68>
 80195f0:	4628      	mov	r0, r5
 80195f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80195f6:	4605      	mov	r5, r0
 80195f8:	4628      	mov	r0, r5
 80195fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80195fe:	bf00      	nop

08019600 <uxr_init_output_best_effort_stream>:
 8019600:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8019604:	6001      	str	r1, [r0, #0]
 8019606:	7303      	strb	r3, [r0, #12]
 8019608:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801960c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8019610:	4770      	bx	lr
 8019612:	bf00      	nop

08019614 <uxr_reset_output_best_effort_stream>:
 8019614:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019618:	7b03      	ldrb	r3, [r0, #12]
 801961a:	81c2      	strh	r2, [r0, #14]
 801961c:	6043      	str	r3, [r0, #4]
 801961e:	4770      	bx	lr

08019620 <uxr_prepare_best_effort_buffer_to_write>:
 8019620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019622:	4604      	mov	r4, r0
 8019624:	b083      	sub	sp, #12
 8019626:	6840      	ldr	r0, [r0, #4]
 8019628:	460d      	mov	r5, r1
 801962a:	4616      	mov	r6, r2
 801962c:	f7fd fe10 	bl	8017250 <uxr_submessage_padding>
 8019630:	6863      	ldr	r3, [r4, #4]
 8019632:	4418      	add	r0, r3
 8019634:	68a3      	ldr	r3, [r4, #8]
 8019636:	1942      	adds	r2, r0, r5
 8019638:	4293      	cmp	r3, r2
 801963a:	bf2c      	ite	cs
 801963c:	2701      	movcs	r7, #1
 801963e:	2700      	movcc	r7, #0
 8019640:	d202      	bcs.n	8019648 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8019642:	4638      	mov	r0, r7
 8019644:	b003      	add	sp, #12
 8019646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019648:	9000      	str	r0, [sp, #0]
 801964a:	2300      	movs	r3, #0
 801964c:	4630      	mov	r0, r6
 801964e:	6821      	ldr	r1, [r4, #0]
 8019650:	f7f5 fbb8 	bl	800edc4 <ucdr_init_buffer_origin_offset>
 8019654:	6861      	ldr	r1, [r4, #4]
 8019656:	4638      	mov	r0, r7
 8019658:	4429      	add	r1, r5
 801965a:	6061      	str	r1, [r4, #4]
 801965c:	b003      	add	sp, #12
 801965e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019660 <uxr_prepare_best_effort_buffer_to_send>:
 8019660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019664:	4604      	mov	r4, r0
 8019666:	461d      	mov	r5, r3
 8019668:	6840      	ldr	r0, [r0, #4]
 801966a:	7b23      	ldrb	r3, [r4, #12]
 801966c:	4298      	cmp	r0, r3
 801966e:	bf8c      	ite	hi
 8019670:	2601      	movhi	r6, #1
 8019672:	2600      	movls	r6, #0
 8019674:	d802      	bhi.n	801967c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8019676:	4630      	mov	r0, r6
 8019678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801967c:	4688      	mov	r8, r1
 801967e:	89e0      	ldrh	r0, [r4, #14]
 8019680:	2101      	movs	r1, #1
 8019682:	4617      	mov	r7, r2
 8019684:	f000 fb14 	bl	8019cb0 <uxr_seq_num_add>
 8019688:	6823      	ldr	r3, [r4, #0]
 801968a:	81e0      	strh	r0, [r4, #14]
 801968c:	8028      	strh	r0, [r5, #0]
 801968e:	4630      	mov	r0, r6
 8019690:	f8c8 3000 	str.w	r3, [r8]
 8019694:	6863      	ldr	r3, [r4, #4]
 8019696:	603b      	str	r3, [r7, #0]
 8019698:	7b23      	ldrb	r3, [r4, #12]
 801969a:	6063      	str	r3, [r4, #4]
 801969c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080196a0 <on_full_output_buffer>:
 80196a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196a2:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 80196a6:	460c      	mov	r4, r1
 80196a8:	6803      	ldr	r3, [r0, #0]
 80196aa:	4605      	mov	r5, r0
 80196ac:	7b26      	ldrb	r6, [r4, #12]
 80196ae:	e9d1 1200 	ldrd	r1, r2, [r1]
 80196b2:	fbb2 f2fc 	udiv	r2, r2, ip
 80196b6:	eba3 0e01 	sub.w	lr, r3, r1
 80196ba:	6903      	ldr	r3, [r0, #16]
 80196bc:	fbbe fef2 	udiv	lr, lr, r2
 80196c0:	f10e 0e01 	add.w	lr, lr, #1
 80196c4:	fa1f fe8e 	uxth.w	lr, lr
 80196c8:	fbbe f7fc 	udiv	r7, lr, ip
 80196cc:	fb0c ec17 	mls	ip, ip, r7, lr
 80196d0:	fa1f fc8c 	uxth.w	ip, ip
 80196d4:	fb02 fc0c 	mul.w	ip, r2, ip
 80196d8:	f851 200c 	ldr.w	r2, [r1, ip]
 80196dc:	44b4      	add	ip, r6
 80196de:	1b92      	subs	r2, r2, r6
 80196e0:	f10c 0c08 	add.w	ip, ip, #8
 80196e4:	3a04      	subs	r2, #4
 80196e6:	4461      	add	r1, ip
 80196e8:	f7f5 fb76 	bl	800edd8 <ucdr_init_buffer_origin>
 80196ec:	4628      	mov	r0, r5
 80196ee:	4622      	mov	r2, r4
 80196f0:	4902      	ldr	r1, [pc, #8]	; (80196fc <on_full_output_buffer+0x5c>)
 80196f2:	f7f5 fb4d 	bl	800ed90 <ucdr_set_on_full_buffer_callback>
 80196f6:	2000      	movs	r0, #0
 80196f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80196fa:	bf00      	nop
 80196fc:	080196a1 	.word	0x080196a1

08019700 <uxr_init_output_reliable_stream>:
 8019700:	b530      	push	{r4, r5, lr}
 8019702:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8019706:	8103      	strh	r3, [r0, #8]
 8019708:	7304      	strb	r4, [r0, #12]
 801970a:	e9c0 1200 	strd	r1, r2, [r0]
 801970e:	b1e3      	cbz	r3, 801974a <uxr_init_output_reliable_stream+0x4a>
 8019710:	600c      	str	r4, [r1, #0]
 8019712:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8019716:	f1bc 0f01 	cmp.w	ip, #1
 801971a:	d916      	bls.n	801974a <uxr_init_output_reliable_stream+0x4a>
 801971c:	f04f 0e01 	mov.w	lr, #1
 8019720:	6843      	ldr	r3, [r0, #4]
 8019722:	f10e 0501 	add.w	r5, lr, #1
 8019726:	7b04      	ldrb	r4, [r0, #12]
 8019728:	6801      	ldr	r1, [r0, #0]
 801972a:	fbbe f2fc 	udiv	r2, lr, ip
 801972e:	fbb3 f3fc 	udiv	r3, r3, ip
 8019732:	fb0c e212 	mls	r2, ip, r2, lr
 8019736:	fa1f fe85 	uxth.w	lr, r5
 801973a:	b292      	uxth	r2, r2
 801973c:	fb02 f303 	mul.w	r3, r2, r3
 8019740:	50cc      	str	r4, [r1, r3]
 8019742:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8019746:	45f4      	cmp	ip, lr
 8019748:	d8ea      	bhi.n	8019720 <uxr_init_output_reliable_stream+0x20>
 801974a:	4b07      	ldr	r3, [pc, #28]	; (8019768 <uxr_init_output_reliable_stream+0x68>)
 801974c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019750:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019754:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8019758:	f8c0 300e 	str.w	r3, [r0, #14]
 801975c:	2300      	movs	r3, #0
 801975e:	8242      	strh	r2, [r0, #18]
 8019760:	8403      	strh	r3, [r0, #32]
 8019762:	e9c0 4506 	strd	r4, r5, [r0, #24]
 8019766:	bd30      	pop	{r4, r5, pc}
 8019768:	ffff0000 	.word	0xffff0000
 801976c:	00000000 	.word	0x00000000

08019770 <uxr_reset_output_reliable_stream>:
 8019770:	8901      	ldrh	r1, [r0, #8]
 8019772:	b510      	push	{r4, lr}
 8019774:	b1b1      	cbz	r1, 80197a4 <uxr_reset_output_reliable_stream+0x34>
 8019776:	f04f 0e00 	mov.w	lr, #0
 801977a:	46f4      	mov	ip, lr
 801977c:	6843      	ldr	r3, [r0, #4]
 801977e:	f10e 0e01 	add.w	lr, lr, #1
 8019782:	7b04      	ldrb	r4, [r0, #12]
 8019784:	fbbc f2f1 	udiv	r2, ip, r1
 8019788:	fbb3 f3f1 	udiv	r3, r3, r1
 801978c:	fb01 c212 	mls	r2, r1, r2, ip
 8019790:	fa1f fc8e 	uxth.w	ip, lr
 8019794:	b292      	uxth	r2, r2
 8019796:	fb02 f303 	mul.w	r3, r2, r3
 801979a:	6802      	ldr	r2, [r0, #0]
 801979c:	50d4      	str	r4, [r2, r3]
 801979e:	8901      	ldrh	r1, [r0, #8]
 80197a0:	4561      	cmp	r1, ip
 80197a2:	d8eb      	bhi.n	801977c <uxr_reset_output_reliable_stream+0xc>
 80197a4:	4b08      	ldr	r3, [pc, #32]	; (80197c8 <uxr_reset_output_reliable_stream+0x58>)
 80197a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80197aa:	ed9f 7b05 	vldr	d7, [pc, #20]	; 80197c0 <uxr_reset_output_reliable_stream+0x50>
 80197ae:	f8c0 300e 	str.w	r3, [r0, #14]
 80197b2:	2300      	movs	r3, #0
 80197b4:	8242      	strh	r2, [r0, #18]
 80197b6:	8403      	strh	r3, [r0, #32]
 80197b8:	ed80 7b06 	vstr	d7, [r0, #24]
 80197bc:	bd10      	pop	{r4, pc}
 80197be:	bf00      	nop
 80197c0:	ffffffff 	.word	0xffffffff
 80197c4:	7fffffff 	.word	0x7fffffff
 80197c8:	ffff0000 	.word	0xffff0000

080197cc <uxr_prepare_reliable_buffer_to_write>:
 80197cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197d0:	4604      	mov	r4, r0
 80197d2:	b091      	sub	sp, #68	; 0x44
 80197d4:	8900      	ldrh	r0, [r0, #8]
 80197d6:	468b      	mov	fp, r1
 80197d8:	89e6      	ldrh	r6, [r4, #14]
 80197da:	9204      	str	r2, [sp, #16]
 80197dc:	6865      	ldr	r5, [r4, #4]
 80197de:	6823      	ldr	r3, [r4, #0]
 80197e0:	f894 900c 	ldrb.w	r9, [r4, #12]
 80197e4:	fbb6 f2f0 	udiv	r2, r6, r0
 80197e8:	fbb5 f5f0 	udiv	r5, r5, r0
 80197ec:	fb00 6212 	mls	r2, r0, r2, r6
 80197f0:	1f2f      	subs	r7, r5, #4
 80197f2:	b292      	uxth	r2, r2
 80197f4:	fb05 3202 	mla	r2, r5, r2, r3
 80197f8:	1d11      	adds	r1, r2, #4
 80197fa:	f8d2 8000 	ldr.w	r8, [r2]
 80197fe:	9103      	str	r1, [sp, #12]
 8019800:	2800      	cmp	r0, #0
 8019802:	f000 814a 	beq.w	8019a9a <uxr_prepare_reliable_buffer_to_write+0x2ce>
 8019806:	f04f 0c00 	mov.w	ip, #0
 801980a:	46e2      	mov	sl, ip
 801980c:	4661      	mov	r1, ip
 801980e:	f10c 0c01 	add.w	ip, ip, #1
 8019812:	fbb1 f2f0 	udiv	r2, r1, r0
 8019816:	fb00 1212 	mls	r2, r0, r2, r1
 801981a:	fa1f f18c 	uxth.w	r1, ip
 801981e:	b292      	uxth	r2, r2
 8019820:	fb05 f202 	mul.w	r2, r5, r2
 8019824:	589a      	ldr	r2, [r3, r2]
 8019826:	454a      	cmp	r2, r9
 8019828:	d103      	bne.n	8019832 <uxr_prepare_reliable_buffer_to_write+0x66>
 801982a:	f10a 0a01 	add.w	sl, sl, #1
 801982e:	fa1f fa8a 	uxth.w	sl, sl
 8019832:	4281      	cmp	r1, r0
 8019834:	d3eb      	bcc.n	801980e <uxr_prepare_reliable_buffer_to_write+0x42>
 8019836:	4640      	mov	r0, r8
 8019838:	2104      	movs	r1, #4
 801983a:	f8cd a014 	str.w	sl, [sp, #20]
 801983e:	f7f5 fad7 	bl	800edf0 <ucdr_alignment>
 8019842:	4480      	add	r8, r0
 8019844:	eb08 020b 	add.w	r2, r8, fp
 8019848:	42ba      	cmp	r2, r7
 801984a:	f240 80ca 	bls.w	80199e2 <uxr_prepare_reliable_buffer_to_write+0x216>
 801984e:	7b22      	ldrb	r2, [r4, #12]
 8019850:	445a      	add	r2, fp
 8019852:	42ba      	cmp	r2, r7
 8019854:	f240 80b2 	bls.w	80199bc <uxr_prepare_reliable_buffer_to_write+0x1f0>
 8019858:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801985c:	b2bb      	uxth	r3, r7
 801985e:	eba2 0209 	sub.w	r2, r2, r9
 8019862:	441a      	add	r2, r3
 8019864:	b292      	uxth	r2, r2
 8019866:	fb0a f902 	mul.w	r9, sl, r2
 801986a:	9205      	str	r2, [sp, #20]
 801986c:	45d9      	cmp	r9, fp
 801986e:	9206      	str	r2, [sp, #24]
 8019870:	f0c0 80b3 	bcc.w	80199da <uxr_prepare_reliable_buffer_to_write+0x20e>
 8019874:	f108 0204 	add.w	r2, r8, #4
 8019878:	42ba      	cmp	r2, r7
 801987a:	f080 80da 	bcs.w	8019a32 <uxr_prepare_reliable_buffer_to_write+0x266>
 801987e:	f1a3 0904 	sub.w	r9, r3, #4
 8019882:	9b05      	ldr	r3, [sp, #20]
 8019884:	eba9 0908 	sub.w	r9, r9, r8
 8019888:	fa1f f989 	uxth.w	r9, r9
 801988c:	ebab 0b09 	sub.w	fp, fp, r9
 8019890:	fbbb f2f3 	udiv	r2, fp, r3
 8019894:	fb03 b312 	mls	r3, r3, r2, fp
 8019898:	2b00      	cmp	r3, #0
 801989a:	f040 80c4 	bne.w	8019a26 <uxr_prepare_reliable_buffer_to_write+0x25a>
 801989e:	b293      	uxth	r3, r2
 80198a0:	4553      	cmp	r3, sl
 80198a2:	f200 809a 	bhi.w	80199da <uxr_prepare_reliable_buffer_to_write+0x20e>
 80198a6:	2b00      	cmp	r3, #0
 80198a8:	f000 80f9 	beq.w	8019a9e <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80198ac:	f8cd 801c 	str.w	r8, [sp, #28]
 80198b0:	f04f 0a00 	mov.w	sl, #0
 80198b4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80198b8:	f10d 0b20 	add.w	fp, sp, #32
 80198bc:	9505      	str	r5, [sp, #20]
 80198be:	461d      	mov	r5, r3
 80198c0:	e000      	b.n	80198c4 <uxr_prepare_reliable_buffer_to_write+0xf8>
 80198c2:	46c1      	mov	r9, r8
 80198c4:	8922      	ldrh	r2, [r4, #8]
 80198c6:	4658      	mov	r0, fp
 80198c8:	6863      	ldr	r3, [r4, #4]
 80198ca:	f10a 0a01 	add.w	sl, sl, #1
 80198ce:	fbb6 f1f2 	udiv	r1, r6, r2
 80198d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80198d6:	fb02 6111 	mls	r1, r2, r1, r6
 80198da:	463a      	mov	r2, r7
 80198dc:	b289      	uxth	r1, r1
 80198de:	fb03 f101 	mul.w	r1, r3, r1
 80198e2:	6823      	ldr	r3, [r4, #0]
 80198e4:	3104      	adds	r1, #4
 80198e6:	4419      	add	r1, r3
 80198e8:	2300      	movs	r3, #0
 80198ea:	f851 cc04 	ldr.w	ip, [r1, #-4]
 80198ee:	f8cd c000 	str.w	ip, [sp]
 80198f2:	f7f5 fa67 	bl	800edc4 <ucdr_init_buffer_origin_offset>
 80198f6:	464a      	mov	r2, r9
 80198f8:	2300      	movs	r3, #0
 80198fa:	210d      	movs	r1, #13
 80198fc:	4658      	mov	r0, fp
 80198fe:	f7fd fc67 	bl	80171d0 <uxr_buffer_submessage_header>
 8019902:	8921      	ldrh	r1, [r4, #8]
 8019904:	6863      	ldr	r3, [r4, #4]
 8019906:	4630      	mov	r0, r6
 8019908:	fbb6 f2f1 	udiv	r2, r6, r1
 801990c:	fbb3 f3f1 	udiv	r3, r3, r1
 8019910:	fb01 6212 	mls	r2, r1, r2, r6
 8019914:	2101      	movs	r1, #1
 8019916:	b292      	uxth	r2, r2
 8019918:	fb02 f303 	mul.w	r3, r2, r3
 801991c:	6822      	ldr	r2, [r4, #0]
 801991e:	50d7      	str	r7, [r2, r3]
 8019920:	f000 f9c6 	bl	8019cb0 <uxr_seq_num_add>
 8019924:	4606      	mov	r6, r0
 8019926:	fa1f f38a 	uxth.w	r3, sl
 801992a:	429d      	cmp	r5, r3
 801992c:	d8c9      	bhi.n	80198c2 <uxr_prepare_reliable_buffer_to_write+0xf6>
 801992e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8019932:	9d05      	ldr	r5, [sp, #20]
 8019934:	8920      	ldrh	r0, [r4, #8]
 8019936:	463a      	mov	r2, r7
 8019938:	6863      	ldr	r3, [r4, #4]
 801993a:	fbb6 f1f0 	udiv	r1, r6, r0
 801993e:	fbb3 f3f0 	udiv	r3, r3, r0
 8019942:	fb00 6111 	mls	r1, r0, r1, r6
 8019946:	4658      	mov	r0, fp
 8019948:	b289      	uxth	r1, r1
 801994a:	fb01 f303 	mul.w	r3, r1, r3
 801994e:	6821      	ldr	r1, [r4, #0]
 8019950:	3304      	adds	r3, #4
 8019952:	4419      	add	r1, r3
 8019954:	2300      	movs	r3, #0
 8019956:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801995a:	9700      	str	r7, [sp, #0]
 801995c:	f7f5 fa32 	bl	800edc4 <ucdr_init_buffer_origin_offset>
 8019960:	9f06      	ldr	r7, [sp, #24]
 8019962:	4658      	mov	r0, fp
 8019964:	2302      	movs	r3, #2
 8019966:	b2ba      	uxth	r2, r7
 8019968:	210d      	movs	r1, #13
 801996a:	f7fd fc31 	bl	80171d0 <uxr_buffer_submessage_header>
 801996e:	f108 0104 	add.w	r1, r8, #4
 8019972:	9b03      	ldr	r3, [sp, #12]
 8019974:	f1a5 0208 	sub.w	r2, r5, #8
 8019978:	8925      	ldrh	r5, [r4, #8]
 801997a:	440b      	add	r3, r1
 801997c:	eba2 0208 	sub.w	r2, r2, r8
 8019980:	fbb6 f0f5 	udiv	r0, r6, r5
 8019984:	4619      	mov	r1, r3
 8019986:	6863      	ldr	r3, [r4, #4]
 8019988:	fb05 6010 	mls	r0, r5, r0, r6
 801998c:	fbb3 f3f5 	udiv	r3, r3, r5
 8019990:	b280      	uxth	r0, r0
 8019992:	6825      	ldr	r5, [r4, #0]
 8019994:	fb00 f303 	mul.w	r3, r0, r3
 8019998:	7b20      	ldrb	r0, [r4, #12]
 801999a:	3004      	adds	r0, #4
 801999c:	4438      	add	r0, r7
 801999e:	50e8      	str	r0, [r5, r3]
 80199a0:	9d04      	ldr	r5, [sp, #16]
 80199a2:	4628      	mov	r0, r5
 80199a4:	f7f5 fa20 	bl	800ede8 <ucdr_init_buffer>
 80199a8:	4628      	mov	r0, r5
 80199aa:	4622      	mov	r2, r4
 80199ac:	493d      	ldr	r1, [pc, #244]	; (8019aa4 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 80199ae:	f7f5 f9ef 	bl	800ed90 <ucdr_set_on_full_buffer_callback>
 80199b2:	2001      	movs	r0, #1
 80199b4:	81e6      	strh	r6, [r4, #14]
 80199b6:	b011      	add	sp, #68	; 0x44
 80199b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199bc:	2101      	movs	r1, #1
 80199be:	89e0      	ldrh	r0, [r4, #14]
 80199c0:	f000 f976 	bl	8019cb0 <uxr_seq_num_add>
 80199c4:	4605      	mov	r5, r0
 80199c6:	8921      	ldrh	r1, [r4, #8]
 80199c8:	8a60      	ldrh	r0, [r4, #18]
 80199ca:	f000 f971 	bl	8019cb0 <uxr_seq_num_add>
 80199ce:	4601      	mov	r1, r0
 80199d0:	4628      	mov	r0, r5
 80199d2:	f000 f975 	bl	8019cc0 <uxr_seq_num_cmp>
 80199d6:	2800      	cmp	r0, #0
 80199d8:	dd44      	ble.n	8019a64 <uxr_prepare_reliable_buffer_to_write+0x298>
 80199da:	2000      	movs	r0, #0
 80199dc:	b011      	add	sp, #68	; 0x44
 80199de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199e2:	8921      	ldrh	r1, [r4, #8]
 80199e4:	8a60      	ldrh	r0, [r4, #18]
 80199e6:	9205      	str	r2, [sp, #20]
 80199e8:	f000 f962 	bl	8019cb0 <uxr_seq_num_add>
 80199ec:	4601      	mov	r1, r0
 80199ee:	4630      	mov	r0, r6
 80199f0:	f000 f966 	bl	8019cc0 <uxr_seq_num_cmp>
 80199f4:	2800      	cmp	r0, #0
 80199f6:	9a05      	ldr	r2, [sp, #20]
 80199f8:	dcef      	bgt.n	80199da <uxr_prepare_reliable_buffer_to_write+0x20e>
 80199fa:	8925      	ldrh	r5, [r4, #8]
 80199fc:	e9d4 7300 	ldrd	r7, r3, [r4]
 8019a00:	fbb6 f4f5 	udiv	r4, r6, r5
 8019a04:	fbb3 f3f5 	udiv	r3, r3, r5
 8019a08:	fb05 6414 	mls	r4, r5, r4, r6
 8019a0c:	b2a4      	uxth	r4, r4
 8019a0e:	fb04 f303 	mul.w	r3, r4, r3
 8019a12:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8019a16:	50fa      	str	r2, [r7, r3]
 8019a18:	2300      	movs	r3, #0
 8019a1a:	f8cd 8000 	str.w	r8, [sp]
 8019a1e:	f7f5 f9d1 	bl	800edc4 <ucdr_init_buffer_origin_offset>
 8019a22:	2001      	movs	r0, #1
 8019a24:	e7da      	b.n	80199dc <uxr_prepare_reliable_buffer_to_write+0x210>
 8019a26:	3201      	adds	r2, #1
 8019a28:	9306      	str	r3, [sp, #24]
 8019a2a:	b293      	uxth	r3, r2
 8019a2c:	4553      	cmp	r3, sl
 8019a2e:	d8d4      	bhi.n	80199da <uxr_prepare_reliable_buffer_to_write+0x20e>
 8019a30:	e739      	b.n	80198a6 <uxr_prepare_reliable_buffer_to_write+0xda>
 8019a32:	4630      	mov	r0, r6
 8019a34:	2101      	movs	r1, #1
 8019a36:	9307      	str	r3, [sp, #28]
 8019a38:	f000 f93a 	bl	8019cb0 <uxr_seq_num_add>
 8019a3c:	4606      	mov	r6, r0
 8019a3e:	8920      	ldrh	r0, [r4, #8]
 8019a40:	6862      	ldr	r2, [r4, #4]
 8019a42:	fbb6 f1f0 	udiv	r1, r6, r0
 8019a46:	fbb2 f2f0 	udiv	r2, r2, r0
 8019a4a:	fb00 6111 	mls	r1, r0, r1, r6
 8019a4e:	b289      	uxth	r1, r1
 8019a50:	fb01 f202 	mul.w	r2, r1, r2
 8019a54:	6821      	ldr	r1, [r4, #0]
 8019a56:	3204      	adds	r2, #4
 8019a58:	188b      	adds	r3, r1, r2
 8019a5a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 8019a5e:	9303      	str	r3, [sp, #12]
 8019a60:	9b07      	ldr	r3, [sp, #28]
 8019a62:	e70c      	b.n	801987e <uxr_prepare_reliable_buffer_to_write+0xb2>
 8019a64:	8921      	ldrh	r1, [r4, #8]
 8019a66:	6863      	ldr	r3, [r4, #4]
 8019a68:	9804      	ldr	r0, [sp, #16]
 8019a6a:	fbb5 f2f1 	udiv	r2, r5, r1
 8019a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8019a72:	fb01 5212 	mls	r2, r1, r2, r5
 8019a76:	6821      	ldr	r1, [r4, #0]
 8019a78:	b292      	uxth	r2, r2
 8019a7a:	fb02 f303 	mul.w	r3, r2, r3
 8019a7e:	7b22      	ldrb	r2, [r4, #12]
 8019a80:	3304      	adds	r3, #4
 8019a82:	445a      	add	r2, fp
 8019a84:	4419      	add	r1, r3
 8019a86:	f841 2c04 	str.w	r2, [r1, #-4]
 8019a8a:	7b23      	ldrb	r3, [r4, #12]
 8019a8c:	9300      	str	r3, [sp, #0]
 8019a8e:	2300      	movs	r3, #0
 8019a90:	f7f5 f998 	bl	800edc4 <ucdr_init_buffer_origin_offset>
 8019a94:	2001      	movs	r0, #1
 8019a96:	81e5      	strh	r5, [r4, #14]
 8019a98:	e7a0      	b.n	80199dc <uxr_prepare_reliable_buffer_to_write+0x210>
 8019a9a:	4682      	mov	sl, r0
 8019a9c:	e6cb      	b.n	8019836 <uxr_prepare_reliable_buffer_to_write+0x6a>
 8019a9e:	f10d 0b20 	add.w	fp, sp, #32
 8019aa2:	e747      	b.n	8019934 <uxr_prepare_reliable_buffer_to_write+0x168>
 8019aa4:	080196a1 	.word	0x080196a1

08019aa8 <uxr_prepare_next_reliable_buffer_to_send>:
 8019aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019aaa:	4604      	mov	r4, r0
 8019aac:	461d      	mov	r5, r3
 8019aae:	460f      	mov	r7, r1
 8019ab0:	8a00      	ldrh	r0, [r0, #16]
 8019ab2:	2101      	movs	r1, #1
 8019ab4:	4616      	mov	r6, r2
 8019ab6:	f000 f8fb 	bl	8019cb0 <uxr_seq_num_add>
 8019aba:	8028      	strh	r0, [r5, #0]
 8019abc:	8922      	ldrh	r2, [r4, #8]
 8019abe:	6863      	ldr	r3, [r4, #4]
 8019ac0:	fbb0 f1f2 	udiv	r1, r0, r2
 8019ac4:	fbb3 f3f2 	udiv	r3, r3, r2
 8019ac8:	fb02 0c11 	mls	ip, r2, r1, r0
 8019acc:	89e1      	ldrh	r1, [r4, #14]
 8019ace:	fa1f fc8c 	uxth.w	ip, ip
 8019ad2:	fb0c fc03 	mul.w	ip, ip, r3
 8019ad6:	6823      	ldr	r3, [r4, #0]
 8019ad8:	f10c 0c04 	add.w	ip, ip, #4
 8019adc:	4463      	add	r3, ip
 8019ade:	603b      	str	r3, [r7, #0]
 8019ae0:	6823      	ldr	r3, [r4, #0]
 8019ae2:	449c      	add	ip, r3
 8019ae4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8019ae8:	6033      	str	r3, [r6, #0]
 8019aea:	f000 f8e9 	bl	8019cc0 <uxr_seq_num_cmp>
 8019aee:	2800      	cmp	r0, #0
 8019af0:	dd01      	ble.n	8019af6 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8019af2:	2000      	movs	r0, #0
 8019af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019af6:	7b23      	ldrb	r3, [r4, #12]
 8019af8:	6832      	ldr	r2, [r6, #0]
 8019afa:	429a      	cmp	r2, r3
 8019afc:	d9f9      	bls.n	8019af2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8019afe:	8a61      	ldrh	r1, [r4, #18]
 8019b00:	8a20      	ldrh	r0, [r4, #16]
 8019b02:	f000 f8d9 	bl	8019cb8 <uxr_seq_num_sub>
 8019b06:	8923      	ldrh	r3, [r4, #8]
 8019b08:	4283      	cmp	r3, r0
 8019b0a:	d0f2      	beq.n	8019af2 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8019b0c:	8828      	ldrh	r0, [r5, #0]
 8019b0e:	89e3      	ldrh	r3, [r4, #14]
 8019b10:	8220      	strh	r0, [r4, #16]
 8019b12:	4298      	cmp	r0, r3
 8019b14:	d001      	beq.n	8019b1a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8019b16:	2001      	movs	r0, #1
 8019b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b1a:	2101      	movs	r1, #1
 8019b1c:	f000 f8c8 	bl	8019cb0 <uxr_seq_num_add>
 8019b20:	4603      	mov	r3, r0
 8019b22:	2001      	movs	r0, #1
 8019b24:	81e3      	strh	r3, [r4, #14]
 8019b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019b28 <uxr_update_output_stream_heartbeat_timestamp>:
 8019b28:	b570      	push	{r4, r5, r6, lr}
 8019b2a:	8a01      	ldrh	r1, [r0, #16]
 8019b2c:	4604      	mov	r4, r0
 8019b2e:	8a40      	ldrh	r0, [r0, #18]
 8019b30:	4615      	mov	r5, r2
 8019b32:	461e      	mov	r6, r3
 8019b34:	f000 f8c4 	bl	8019cc0 <uxr_seq_num_cmp>
 8019b38:	2800      	cmp	r0, #0
 8019b3a:	db07      	blt.n	8019b4c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8019b3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019b40:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8019b44:	2000      	movs	r0, #0
 8019b46:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8019b4a:	bd70      	pop	{r4, r5, r6, pc}
 8019b4c:	f894 0020 	ldrb.w	r0, [r4, #32]
 8019b50:	b940      	cbnz	r0, 8019b64 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8019b52:	2301      	movs	r3, #1
 8019b54:	f884 3020 	strb.w	r3, [r4, #32]
 8019b58:	3564      	adds	r5, #100	; 0x64
 8019b5a:	f146 0600 	adc.w	r6, r6, #0
 8019b5e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8019b62:	bd70      	pop	{r4, r5, r6, pc}
 8019b64:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8019b68:	4295      	cmp	r5, r2
 8019b6a:	eb76 0303 	sbcs.w	r3, r6, r3
 8019b6e:	db04      	blt.n	8019b7a <uxr_update_output_stream_heartbeat_timestamp+0x52>
 8019b70:	1c43      	adds	r3, r0, #1
 8019b72:	2001      	movs	r0, #1
 8019b74:	f884 3020 	strb.w	r3, [r4, #32]
 8019b78:	e7ee      	b.n	8019b58 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8019b7a:	2000      	movs	r0, #0
 8019b7c:	e7ec      	b.n	8019b58 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 8019b7e:	bf00      	nop

08019b80 <uxr_begin_output_nack_buffer_it>:
 8019b80:	8a40      	ldrh	r0, [r0, #18]
 8019b82:	4770      	bx	lr

08019b84 <uxr_next_reliable_nack_buffer_to_send>:
 8019b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b88:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 8019b8c:	b197      	cbz	r7, 8019bb4 <uxr_next_reliable_nack_buffer_to_send+0x30>
 8019b8e:	4680      	mov	r8, r0
 8019b90:	460d      	mov	r5, r1
 8019b92:	4616      	mov	r6, r2
 8019b94:	461c      	mov	r4, r3
 8019b96:	8818      	ldrh	r0, [r3, #0]
 8019b98:	2101      	movs	r1, #1
 8019b9a:	f000 f889 	bl	8019cb0 <uxr_seq_num_add>
 8019b9e:	8020      	strh	r0, [r4, #0]
 8019ba0:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 8019ba4:	f000 f88c 	bl	8019cc0 <uxr_seq_num_cmp>
 8019ba8:	2800      	cmp	r0, #0
 8019baa:	dd06      	ble.n	8019bba <uxr_next_reliable_nack_buffer_to_send+0x36>
 8019bac:	2300      	movs	r3, #0
 8019bae:	461f      	mov	r7, r3
 8019bb0:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 8019bb4:	4638      	mov	r0, r7
 8019bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019bba:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 8019bbe:	8820      	ldrh	r0, [r4, #0]
 8019bc0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019bc4:	fbb0 f3f2 	udiv	r3, r0, r2
 8019bc8:	fbb1 fcf2 	udiv	ip, r1, r2
 8019bcc:	fb02 0313 	mls	r3, r2, r3, r0
 8019bd0:	b29b      	uxth	r3, r3
 8019bd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8019bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8019bda:	f10c 0c04 	add.w	ip, ip, #4
 8019bde:	4463      	add	r3, ip
 8019be0:	602b      	str	r3, [r5, #0]
 8019be2:	f8d8 3000 	ldr.w	r3, [r8]
 8019be6:	4463      	add	r3, ip
 8019be8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8019bec:	6033      	str	r3, [r6, #0]
 8019bee:	f898 200c 	ldrb.w	r2, [r8, #12]
 8019bf2:	429a      	cmp	r2, r3
 8019bf4:	d0d0      	beq.n	8019b98 <uxr_next_reliable_nack_buffer_to_send+0x14>
 8019bf6:	e7dd      	b.n	8019bb4 <uxr_next_reliable_nack_buffer_to_send+0x30>

08019bf8 <uxr_process_acknack>:
 8019bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bfa:	4604      	mov	r4, r0
 8019bfc:	460e      	mov	r6, r1
 8019bfe:	4610      	mov	r0, r2
 8019c00:	2101      	movs	r1, #1
 8019c02:	f000 f859 	bl	8019cb8 <uxr_seq_num_sub>
 8019c06:	8a61      	ldrh	r1, [r4, #18]
 8019c08:	f000 f856 	bl	8019cb8 <uxr_seq_num_sub>
 8019c0c:	b1c8      	cbz	r0, 8019c42 <uxr_process_acknack+0x4a>
 8019c0e:	4605      	mov	r5, r0
 8019c10:	2700      	movs	r7, #0
 8019c12:	2101      	movs	r1, #1
 8019c14:	8a60      	ldrh	r0, [r4, #18]
 8019c16:	f000 f84b 	bl	8019cb0 <uxr_seq_num_add>
 8019c1a:	8923      	ldrh	r3, [r4, #8]
 8019c1c:	6862      	ldr	r2, [r4, #4]
 8019c1e:	3701      	adds	r7, #1
 8019c20:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8019c24:	6821      	ldr	r1, [r4, #0]
 8019c26:	42bd      	cmp	r5, r7
 8019c28:	8260      	strh	r0, [r4, #18]
 8019c2a:	fbb0 fef3 	udiv	lr, r0, r3
 8019c2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8019c32:	fb03 031e 	mls	r3, r3, lr, r0
 8019c36:	b29b      	uxth	r3, r3
 8019c38:	fb02 f303 	mul.w	r3, r2, r3
 8019c3c:	f841 c003 	str.w	ip, [r1, r3]
 8019c40:	d1e7      	bne.n	8019c12 <uxr_process_acknack+0x1a>
 8019c42:	3e00      	subs	r6, #0
 8019c44:	f04f 0300 	mov.w	r3, #0
 8019c48:	bf18      	it	ne
 8019c4a:	2601      	movne	r6, #1
 8019c4c:	f884 3020 	strb.w	r3, [r4, #32]
 8019c50:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 8019c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c56:	bf00      	nop

08019c58 <uxr_is_output_up_to_date>:
 8019c58:	8a01      	ldrh	r1, [r0, #16]
 8019c5a:	8a40      	ldrh	r0, [r0, #18]
 8019c5c:	b508      	push	{r3, lr}
 8019c5e:	f000 f82f 	bl	8019cc0 <uxr_seq_num_cmp>
 8019c62:	fab0 f080 	clz	r0, r0
 8019c66:	0940      	lsrs	r0, r0, #5
 8019c68:	bd08      	pop	{r3, pc}
 8019c6a:	bf00      	nop

08019c6c <get_available_free_slots>:
 8019c6c:	8901      	ldrh	r1, [r0, #8]
 8019c6e:	b1e1      	cbz	r1, 8019caa <get_available_free_slots+0x3e>
 8019c70:	6843      	ldr	r3, [r0, #4]
 8019c72:	f04f 0c00 	mov.w	ip, #0
 8019c76:	b530      	push	{r4, r5, lr}
 8019c78:	fbb3 fef1 	udiv	lr, r3, r1
 8019c7c:	6805      	ldr	r5, [r0, #0]
 8019c7e:	4662      	mov	r2, ip
 8019c80:	7b04      	ldrb	r4, [r0, #12]
 8019c82:	4660      	mov	r0, ip
 8019c84:	f10c 0c01 	add.w	ip, ip, #1
 8019c88:	fbb2 f3f1 	udiv	r3, r2, r1
 8019c8c:	fb01 2313 	mls	r3, r1, r3, r2
 8019c90:	fa1f f28c 	uxth.w	r2, ip
 8019c94:	b29b      	uxth	r3, r3
 8019c96:	fb0e f303 	mul.w	r3, lr, r3
 8019c9a:	58eb      	ldr	r3, [r5, r3]
 8019c9c:	429c      	cmp	r4, r3
 8019c9e:	d101      	bne.n	8019ca4 <get_available_free_slots+0x38>
 8019ca0:	3001      	adds	r0, #1
 8019ca2:	b280      	uxth	r0, r0
 8019ca4:	428a      	cmp	r2, r1
 8019ca6:	d3ed      	bcc.n	8019c84 <get_available_free_slots+0x18>
 8019ca8:	bd30      	pop	{r4, r5, pc}
 8019caa:	4608      	mov	r0, r1
 8019cac:	4770      	bx	lr
 8019cae:	bf00      	nop

08019cb0 <uxr_seq_num_add>:
 8019cb0:	4408      	add	r0, r1
 8019cb2:	b280      	uxth	r0, r0
 8019cb4:	4770      	bx	lr
 8019cb6:	bf00      	nop

08019cb8 <uxr_seq_num_sub>:
 8019cb8:	1a40      	subs	r0, r0, r1
 8019cba:	b280      	uxth	r0, r0
 8019cbc:	4770      	bx	lr
 8019cbe:	bf00      	nop

08019cc0 <uxr_seq_num_cmp>:
 8019cc0:	4288      	cmp	r0, r1
 8019cc2:	d011      	beq.n	8019ce8 <uxr_seq_num_cmp+0x28>
 8019cc4:	d309      	bcc.n	8019cda <uxr_seq_num_cmp+0x1a>
 8019cc6:	4288      	cmp	r0, r1
 8019cc8:	d910      	bls.n	8019cec <uxr_seq_num_cmp+0x2c>
 8019cca:	1a40      	subs	r0, r0, r1
 8019ccc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8019cd0:	bfd4      	ite	le
 8019cd2:	2001      	movle	r0, #1
 8019cd4:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8019cd8:	4770      	bx	lr
 8019cda:	1a0b      	subs	r3, r1, r0
 8019cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019ce0:	daf1      	bge.n	8019cc6 <uxr_seq_num_cmp+0x6>
 8019ce2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019ce6:	4770      	bx	lr
 8019ce8:	2000      	movs	r0, #0
 8019cea:	4770      	bx	lr
 8019cec:	2001      	movs	r0, #1
 8019cee:	4770      	bx	lr

08019cf0 <expf>:
 8019cf0:	ee10 2a10 	vmov	r2, s0
 8019cf4:	f240 412a 	movw	r1, #1066	; 0x42a
 8019cf8:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8019cfc:	428b      	cmp	r3, r1
 8019cfe:	b430      	push	{r4, r5}
 8019d00:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8019d04:	d92a      	bls.n	8019d5c <expf+0x6c>
 8019d06:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8019d0a:	d058      	beq.n	8019dbe <expf+0xce>
 8019d0c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8019d10:	d303      	bcc.n	8019d1a <expf+0x2a>
 8019d12:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019d16:	bc30      	pop	{r4, r5}
 8019d18:	4770      	bx	lr
 8019d1a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8019dc4 <expf+0xd4>
 8019d1e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d26:	dd03      	ble.n	8019d30 <expf+0x40>
 8019d28:	bc30      	pop	{r4, r5}
 8019d2a:	2000      	movs	r0, #0
 8019d2c:	f000 b876 	b.w	8019e1c <__math_oflowf>
 8019d30:	eddf 7a25 	vldr	s15, [pc, #148]	; 8019dc8 <expf+0xd8>
 8019d34:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d3c:	d503      	bpl.n	8019d46 <expf+0x56>
 8019d3e:	bc30      	pop	{r4, r5}
 8019d40:	2000      	movs	r0, #0
 8019d42:	f000 b85f 	b.w	8019e04 <__math_uflowf>
 8019d46:	eddf 7a21 	vldr	s15, [pc, #132]	; 8019dcc <expf+0xdc>
 8019d4a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d52:	d503      	bpl.n	8019d5c <expf+0x6c>
 8019d54:	bc30      	pop	{r4, r5}
 8019d56:	2000      	movs	r0, #0
 8019d58:	f000 b85a 	b.w	8019e10 <__math_may_uflowf>
 8019d5c:	4b1c      	ldr	r3, [pc, #112]	; (8019dd0 <expf+0xe0>)
 8019d5e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8019d62:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 8019d66:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 8019d6a:	eeb0 7b44 	vmov.f64	d7, d4
 8019d6e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8019d72:	ee17 0a10 	vmov	r0, s14
 8019d76:	ee37 7b44 	vsub.f64	d7, d7, d4
 8019d7a:	f000 021f 	and.w	r2, r0, #31
 8019d7e:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8019d82:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 8019d86:	ee27 4b07 	vmul.f64	d4, d7, d7
 8019d8a:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8019d8e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8019d92:	eea5 6b07 	vfma.f64	d6, d5, d7
 8019d96:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8019d9a:	684d      	ldr	r5, [r1, #4]
 8019d9c:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8019da0:	2100      	movs	r1, #0
 8019da2:	190a      	adds	r2, r1, r4
 8019da4:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8019da8:	eea5 0b07 	vfma.f64	d0, d5, d7
 8019dac:	ec43 2b17 	vmov	d7, r2, r3
 8019db0:	eea6 0b04 	vfma.f64	d0, d6, d4
 8019db4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8019db8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8019dbc:	e7ab      	b.n	8019d16 <expf+0x26>
 8019dbe:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8019dd4 <expf+0xe4>
 8019dc2:	e7a8      	b.n	8019d16 <expf+0x26>
 8019dc4:	42b17217 	.word	0x42b17217
 8019dc8:	c2cff1b4 	.word	0xc2cff1b4
 8019dcc:	c2ce8ecf 	.word	0xc2ce8ecf
 8019dd0:	0801ceb8 	.word	0x0801ceb8
 8019dd4:	00000000 	.word	0x00000000

08019dd8 <with_errnof>:
 8019dd8:	b513      	push	{r0, r1, r4, lr}
 8019dda:	4604      	mov	r4, r0
 8019ddc:	ed8d 0a01 	vstr	s0, [sp, #4]
 8019de0:	f000 fcfc 	bl	801a7dc <__errno>
 8019de4:	ed9d 0a01 	vldr	s0, [sp, #4]
 8019de8:	6004      	str	r4, [r0, #0]
 8019dea:	b002      	add	sp, #8
 8019dec:	bd10      	pop	{r4, pc}

08019dee <xflowf>:
 8019dee:	b130      	cbz	r0, 8019dfe <xflowf+0x10>
 8019df0:	eef1 7a40 	vneg.f32	s15, s0
 8019df4:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019df8:	2022      	movs	r0, #34	; 0x22
 8019dfa:	f7ff bfed 	b.w	8019dd8 <with_errnof>
 8019dfe:	eef0 7a40 	vmov.f32	s15, s0
 8019e02:	e7f7      	b.n	8019df4 <xflowf+0x6>

08019e04 <__math_uflowf>:
 8019e04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019e0c <__math_uflowf+0x8>
 8019e08:	f7ff bff1 	b.w	8019dee <xflowf>
 8019e0c:	10000000 	.word	0x10000000

08019e10 <__math_may_uflowf>:
 8019e10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019e18 <__math_may_uflowf+0x8>
 8019e14:	f7ff bfeb 	b.w	8019dee <xflowf>
 8019e18:	1a200000 	.word	0x1a200000

08019e1c <__math_oflowf>:
 8019e1c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019e24 <__math_oflowf+0x8>
 8019e20:	f7ff bfe5 	b.w	8019dee <xflowf>
 8019e24:	70000000 	.word	0x70000000

08019e28 <calloc>:
 8019e28:	4b02      	ldr	r3, [pc, #8]	; (8019e34 <calloc+0xc>)
 8019e2a:	460a      	mov	r2, r1
 8019e2c:	4601      	mov	r1, r0
 8019e2e:	6818      	ldr	r0, [r3, #0]
 8019e30:	f000 b802 	b.w	8019e38 <_calloc_r>
 8019e34:	20001df0 	.word	0x20001df0

08019e38 <_calloc_r>:
 8019e38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019e3a:	fba1 2402 	umull	r2, r4, r1, r2
 8019e3e:	b94c      	cbnz	r4, 8019e54 <_calloc_r+0x1c>
 8019e40:	4611      	mov	r1, r2
 8019e42:	9201      	str	r2, [sp, #4]
 8019e44:	f000 f886 	bl	8019f54 <_malloc_r>
 8019e48:	9a01      	ldr	r2, [sp, #4]
 8019e4a:	4605      	mov	r5, r0
 8019e4c:	b930      	cbnz	r0, 8019e5c <_calloc_r+0x24>
 8019e4e:	4628      	mov	r0, r5
 8019e50:	b003      	add	sp, #12
 8019e52:	bd30      	pop	{r4, r5, pc}
 8019e54:	220c      	movs	r2, #12
 8019e56:	6002      	str	r2, [r0, #0]
 8019e58:	2500      	movs	r5, #0
 8019e5a:	e7f8      	b.n	8019e4e <_calloc_r+0x16>
 8019e5c:	4621      	mov	r1, r4
 8019e5e:	f000 fbc1 	bl	801a5e4 <memset>
 8019e62:	e7f4      	b.n	8019e4e <_calloc_r+0x16>

08019e64 <getenv>:
 8019e64:	b507      	push	{r0, r1, r2, lr}
 8019e66:	4b04      	ldr	r3, [pc, #16]	; (8019e78 <getenv+0x14>)
 8019e68:	4601      	mov	r1, r0
 8019e6a:	aa01      	add	r2, sp, #4
 8019e6c:	6818      	ldr	r0, [r3, #0]
 8019e6e:	f000 f805 	bl	8019e7c <_findenv_r>
 8019e72:	b003      	add	sp, #12
 8019e74:	f85d fb04 	ldr.w	pc, [sp], #4
 8019e78:	20001df0 	.word	0x20001df0

08019e7c <_findenv_r>:
 8019e7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e80:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8019ef0 <_findenv_r+0x74>
 8019e84:	4607      	mov	r7, r0
 8019e86:	4689      	mov	r9, r1
 8019e88:	4616      	mov	r6, r2
 8019e8a:	f000 fd09 	bl	801a8a0 <__env_lock>
 8019e8e:	f8da 4000 	ldr.w	r4, [sl]
 8019e92:	b134      	cbz	r4, 8019ea2 <_findenv_r+0x26>
 8019e94:	464b      	mov	r3, r9
 8019e96:	4698      	mov	r8, r3
 8019e98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019e9c:	b13a      	cbz	r2, 8019eae <_findenv_r+0x32>
 8019e9e:	2a3d      	cmp	r2, #61	; 0x3d
 8019ea0:	d1f9      	bne.n	8019e96 <_findenv_r+0x1a>
 8019ea2:	4638      	mov	r0, r7
 8019ea4:	f000 fd02 	bl	801a8ac <__env_unlock>
 8019ea8:	2000      	movs	r0, #0
 8019eaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019eae:	eba8 0809 	sub.w	r8, r8, r9
 8019eb2:	46a3      	mov	fp, r4
 8019eb4:	f854 0b04 	ldr.w	r0, [r4], #4
 8019eb8:	2800      	cmp	r0, #0
 8019eba:	d0f2      	beq.n	8019ea2 <_findenv_r+0x26>
 8019ebc:	4642      	mov	r2, r8
 8019ebe:	4649      	mov	r1, r9
 8019ec0:	f000 fba5 	bl	801a60e <strncmp>
 8019ec4:	2800      	cmp	r0, #0
 8019ec6:	d1f4      	bne.n	8019eb2 <_findenv_r+0x36>
 8019ec8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019ecc:	eb03 0508 	add.w	r5, r3, r8
 8019ed0:	f813 3008 	ldrb.w	r3, [r3, r8]
 8019ed4:	2b3d      	cmp	r3, #61	; 0x3d
 8019ed6:	d1ec      	bne.n	8019eb2 <_findenv_r+0x36>
 8019ed8:	f8da 3000 	ldr.w	r3, [sl]
 8019edc:	ebab 0303 	sub.w	r3, fp, r3
 8019ee0:	109b      	asrs	r3, r3, #2
 8019ee2:	4638      	mov	r0, r7
 8019ee4:	6033      	str	r3, [r6, #0]
 8019ee6:	f000 fce1 	bl	801a8ac <__env_unlock>
 8019eea:	1c68      	adds	r0, r5, #1
 8019eec:	e7dd      	b.n	8019eaa <_findenv_r+0x2e>
 8019eee:	bf00      	nop
 8019ef0:	20000000 	.word	0x20000000

08019ef4 <malloc>:
 8019ef4:	4b02      	ldr	r3, [pc, #8]	; (8019f00 <malloc+0xc>)
 8019ef6:	4601      	mov	r1, r0
 8019ef8:	6818      	ldr	r0, [r3, #0]
 8019efa:	f000 b82b 	b.w	8019f54 <_malloc_r>
 8019efe:	bf00      	nop
 8019f00:	20001df0 	.word	0x20001df0

08019f04 <free>:
 8019f04:	4b02      	ldr	r3, [pc, #8]	; (8019f10 <free+0xc>)
 8019f06:	4601      	mov	r1, r0
 8019f08:	6818      	ldr	r0, [r3, #0]
 8019f0a:	f000 bcd5 	b.w	801a8b8 <_free_r>
 8019f0e:	bf00      	nop
 8019f10:	20001df0 	.word	0x20001df0

08019f14 <sbrk_aligned>:
 8019f14:	b570      	push	{r4, r5, r6, lr}
 8019f16:	4e0e      	ldr	r6, [pc, #56]	; (8019f50 <sbrk_aligned+0x3c>)
 8019f18:	460c      	mov	r4, r1
 8019f1a:	6831      	ldr	r1, [r6, #0]
 8019f1c:	4605      	mov	r5, r0
 8019f1e:	b911      	cbnz	r1, 8019f26 <sbrk_aligned+0x12>
 8019f20:	f000 fc3a 	bl	801a798 <_sbrk_r>
 8019f24:	6030      	str	r0, [r6, #0]
 8019f26:	4621      	mov	r1, r4
 8019f28:	4628      	mov	r0, r5
 8019f2a:	f000 fc35 	bl	801a798 <_sbrk_r>
 8019f2e:	1c43      	adds	r3, r0, #1
 8019f30:	d00a      	beq.n	8019f48 <sbrk_aligned+0x34>
 8019f32:	1cc4      	adds	r4, r0, #3
 8019f34:	f024 0403 	bic.w	r4, r4, #3
 8019f38:	42a0      	cmp	r0, r4
 8019f3a:	d007      	beq.n	8019f4c <sbrk_aligned+0x38>
 8019f3c:	1a21      	subs	r1, r4, r0
 8019f3e:	4628      	mov	r0, r5
 8019f40:	f000 fc2a 	bl	801a798 <_sbrk_r>
 8019f44:	3001      	adds	r0, #1
 8019f46:	d101      	bne.n	8019f4c <sbrk_aligned+0x38>
 8019f48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019f4c:	4620      	mov	r0, r4
 8019f4e:	bd70      	pop	{r4, r5, r6, pc}
 8019f50:	200105c8 	.word	0x200105c8

08019f54 <_malloc_r>:
 8019f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f58:	1ccd      	adds	r5, r1, #3
 8019f5a:	f025 0503 	bic.w	r5, r5, #3
 8019f5e:	3508      	adds	r5, #8
 8019f60:	2d0c      	cmp	r5, #12
 8019f62:	bf38      	it	cc
 8019f64:	250c      	movcc	r5, #12
 8019f66:	2d00      	cmp	r5, #0
 8019f68:	4607      	mov	r7, r0
 8019f6a:	db01      	blt.n	8019f70 <_malloc_r+0x1c>
 8019f6c:	42a9      	cmp	r1, r5
 8019f6e:	d905      	bls.n	8019f7c <_malloc_r+0x28>
 8019f70:	230c      	movs	r3, #12
 8019f72:	603b      	str	r3, [r7, #0]
 8019f74:	2600      	movs	r6, #0
 8019f76:	4630      	mov	r0, r6
 8019f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801a050 <_malloc_r+0xfc>
 8019f80:	f000 f868 	bl	801a054 <__malloc_lock>
 8019f84:	f8d8 3000 	ldr.w	r3, [r8]
 8019f88:	461c      	mov	r4, r3
 8019f8a:	bb5c      	cbnz	r4, 8019fe4 <_malloc_r+0x90>
 8019f8c:	4629      	mov	r1, r5
 8019f8e:	4638      	mov	r0, r7
 8019f90:	f7ff ffc0 	bl	8019f14 <sbrk_aligned>
 8019f94:	1c43      	adds	r3, r0, #1
 8019f96:	4604      	mov	r4, r0
 8019f98:	d155      	bne.n	801a046 <_malloc_r+0xf2>
 8019f9a:	f8d8 4000 	ldr.w	r4, [r8]
 8019f9e:	4626      	mov	r6, r4
 8019fa0:	2e00      	cmp	r6, #0
 8019fa2:	d145      	bne.n	801a030 <_malloc_r+0xdc>
 8019fa4:	2c00      	cmp	r4, #0
 8019fa6:	d048      	beq.n	801a03a <_malloc_r+0xe6>
 8019fa8:	6823      	ldr	r3, [r4, #0]
 8019faa:	4631      	mov	r1, r6
 8019fac:	4638      	mov	r0, r7
 8019fae:	eb04 0903 	add.w	r9, r4, r3
 8019fb2:	f000 fbf1 	bl	801a798 <_sbrk_r>
 8019fb6:	4581      	cmp	r9, r0
 8019fb8:	d13f      	bne.n	801a03a <_malloc_r+0xe6>
 8019fba:	6821      	ldr	r1, [r4, #0]
 8019fbc:	1a6d      	subs	r5, r5, r1
 8019fbe:	4629      	mov	r1, r5
 8019fc0:	4638      	mov	r0, r7
 8019fc2:	f7ff ffa7 	bl	8019f14 <sbrk_aligned>
 8019fc6:	3001      	adds	r0, #1
 8019fc8:	d037      	beq.n	801a03a <_malloc_r+0xe6>
 8019fca:	6823      	ldr	r3, [r4, #0]
 8019fcc:	442b      	add	r3, r5
 8019fce:	6023      	str	r3, [r4, #0]
 8019fd0:	f8d8 3000 	ldr.w	r3, [r8]
 8019fd4:	2b00      	cmp	r3, #0
 8019fd6:	d038      	beq.n	801a04a <_malloc_r+0xf6>
 8019fd8:	685a      	ldr	r2, [r3, #4]
 8019fda:	42a2      	cmp	r2, r4
 8019fdc:	d12b      	bne.n	801a036 <_malloc_r+0xe2>
 8019fde:	2200      	movs	r2, #0
 8019fe0:	605a      	str	r2, [r3, #4]
 8019fe2:	e00f      	b.n	801a004 <_malloc_r+0xb0>
 8019fe4:	6822      	ldr	r2, [r4, #0]
 8019fe6:	1b52      	subs	r2, r2, r5
 8019fe8:	d41f      	bmi.n	801a02a <_malloc_r+0xd6>
 8019fea:	2a0b      	cmp	r2, #11
 8019fec:	d917      	bls.n	801a01e <_malloc_r+0xca>
 8019fee:	1961      	adds	r1, r4, r5
 8019ff0:	42a3      	cmp	r3, r4
 8019ff2:	6025      	str	r5, [r4, #0]
 8019ff4:	bf18      	it	ne
 8019ff6:	6059      	strne	r1, [r3, #4]
 8019ff8:	6863      	ldr	r3, [r4, #4]
 8019ffa:	bf08      	it	eq
 8019ffc:	f8c8 1000 	streq.w	r1, [r8]
 801a000:	5162      	str	r2, [r4, r5]
 801a002:	604b      	str	r3, [r1, #4]
 801a004:	4638      	mov	r0, r7
 801a006:	f104 060b 	add.w	r6, r4, #11
 801a00a:	f000 f829 	bl	801a060 <__malloc_unlock>
 801a00e:	f026 0607 	bic.w	r6, r6, #7
 801a012:	1d23      	adds	r3, r4, #4
 801a014:	1af2      	subs	r2, r6, r3
 801a016:	d0ae      	beq.n	8019f76 <_malloc_r+0x22>
 801a018:	1b9b      	subs	r3, r3, r6
 801a01a:	50a3      	str	r3, [r4, r2]
 801a01c:	e7ab      	b.n	8019f76 <_malloc_r+0x22>
 801a01e:	42a3      	cmp	r3, r4
 801a020:	6862      	ldr	r2, [r4, #4]
 801a022:	d1dd      	bne.n	8019fe0 <_malloc_r+0x8c>
 801a024:	f8c8 2000 	str.w	r2, [r8]
 801a028:	e7ec      	b.n	801a004 <_malloc_r+0xb0>
 801a02a:	4623      	mov	r3, r4
 801a02c:	6864      	ldr	r4, [r4, #4]
 801a02e:	e7ac      	b.n	8019f8a <_malloc_r+0x36>
 801a030:	4634      	mov	r4, r6
 801a032:	6876      	ldr	r6, [r6, #4]
 801a034:	e7b4      	b.n	8019fa0 <_malloc_r+0x4c>
 801a036:	4613      	mov	r3, r2
 801a038:	e7cc      	b.n	8019fd4 <_malloc_r+0x80>
 801a03a:	230c      	movs	r3, #12
 801a03c:	603b      	str	r3, [r7, #0]
 801a03e:	4638      	mov	r0, r7
 801a040:	f000 f80e 	bl	801a060 <__malloc_unlock>
 801a044:	e797      	b.n	8019f76 <_malloc_r+0x22>
 801a046:	6025      	str	r5, [r4, #0]
 801a048:	e7dc      	b.n	801a004 <_malloc_r+0xb0>
 801a04a:	605b      	str	r3, [r3, #4]
 801a04c:	deff      	udf	#255	; 0xff
 801a04e:	bf00      	nop
 801a050:	200105c4 	.word	0x200105c4

0801a054 <__malloc_lock>:
 801a054:	4801      	ldr	r0, [pc, #4]	; (801a05c <__malloc_lock+0x8>)
 801a056:	f000 bbec 	b.w	801a832 <__retarget_lock_acquire_recursive>
 801a05a:	bf00      	nop
 801a05c:	2001070d 	.word	0x2001070d

0801a060 <__malloc_unlock>:
 801a060:	4801      	ldr	r0, [pc, #4]	; (801a068 <__malloc_unlock+0x8>)
 801a062:	f000 bbe7 	b.w	801a834 <__retarget_lock_release_recursive>
 801a066:	bf00      	nop
 801a068:	2001070d 	.word	0x2001070d

0801a06c <srand>:
 801a06c:	b538      	push	{r3, r4, r5, lr}
 801a06e:	4b10      	ldr	r3, [pc, #64]	; (801a0b0 <srand+0x44>)
 801a070:	681d      	ldr	r5, [r3, #0]
 801a072:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801a074:	4604      	mov	r4, r0
 801a076:	b9b3      	cbnz	r3, 801a0a6 <srand+0x3a>
 801a078:	2018      	movs	r0, #24
 801a07a:	f7ff ff3b 	bl	8019ef4 <malloc>
 801a07e:	4602      	mov	r2, r0
 801a080:	6328      	str	r0, [r5, #48]	; 0x30
 801a082:	b920      	cbnz	r0, 801a08e <srand+0x22>
 801a084:	4b0b      	ldr	r3, [pc, #44]	; (801a0b4 <srand+0x48>)
 801a086:	480c      	ldr	r0, [pc, #48]	; (801a0b8 <srand+0x4c>)
 801a088:	2146      	movs	r1, #70	; 0x46
 801a08a:	f000 fbeb 	bl	801a864 <__assert_func>
 801a08e:	490b      	ldr	r1, [pc, #44]	; (801a0bc <srand+0x50>)
 801a090:	4b0b      	ldr	r3, [pc, #44]	; (801a0c0 <srand+0x54>)
 801a092:	e9c0 1300 	strd	r1, r3, [r0]
 801a096:	4b0b      	ldr	r3, [pc, #44]	; (801a0c4 <srand+0x58>)
 801a098:	6083      	str	r3, [r0, #8]
 801a09a:	230b      	movs	r3, #11
 801a09c:	8183      	strh	r3, [r0, #12]
 801a09e:	2100      	movs	r1, #0
 801a0a0:	2001      	movs	r0, #1
 801a0a2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a0a6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801a0a8:	2200      	movs	r2, #0
 801a0aa:	611c      	str	r4, [r3, #16]
 801a0ac:	615a      	str	r2, [r3, #20]
 801a0ae:	bd38      	pop	{r3, r4, r5, pc}
 801a0b0:	20001df0 	.word	0x20001df0
 801a0b4:	0801d000 	.word	0x0801d000
 801a0b8:	0801d017 	.word	0x0801d017
 801a0bc:	abcd330e 	.word	0xabcd330e
 801a0c0:	e66d1234 	.word	0xe66d1234
 801a0c4:	0005deec 	.word	0x0005deec

0801a0c8 <rand>:
 801a0c8:	4b16      	ldr	r3, [pc, #88]	; (801a124 <rand+0x5c>)
 801a0ca:	b510      	push	{r4, lr}
 801a0cc:	681c      	ldr	r4, [r3, #0]
 801a0ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801a0d0:	b9b3      	cbnz	r3, 801a100 <rand+0x38>
 801a0d2:	2018      	movs	r0, #24
 801a0d4:	f7ff ff0e 	bl	8019ef4 <malloc>
 801a0d8:	4602      	mov	r2, r0
 801a0da:	6320      	str	r0, [r4, #48]	; 0x30
 801a0dc:	b920      	cbnz	r0, 801a0e8 <rand+0x20>
 801a0de:	4b12      	ldr	r3, [pc, #72]	; (801a128 <rand+0x60>)
 801a0e0:	4812      	ldr	r0, [pc, #72]	; (801a12c <rand+0x64>)
 801a0e2:	2152      	movs	r1, #82	; 0x52
 801a0e4:	f000 fbbe 	bl	801a864 <__assert_func>
 801a0e8:	4911      	ldr	r1, [pc, #68]	; (801a130 <rand+0x68>)
 801a0ea:	4b12      	ldr	r3, [pc, #72]	; (801a134 <rand+0x6c>)
 801a0ec:	e9c0 1300 	strd	r1, r3, [r0]
 801a0f0:	4b11      	ldr	r3, [pc, #68]	; (801a138 <rand+0x70>)
 801a0f2:	6083      	str	r3, [r0, #8]
 801a0f4:	230b      	movs	r3, #11
 801a0f6:	8183      	strh	r3, [r0, #12]
 801a0f8:	2100      	movs	r1, #0
 801a0fa:	2001      	movs	r0, #1
 801a0fc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a100:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a102:	480e      	ldr	r0, [pc, #56]	; (801a13c <rand+0x74>)
 801a104:	690b      	ldr	r3, [r1, #16]
 801a106:	694c      	ldr	r4, [r1, #20]
 801a108:	4a0d      	ldr	r2, [pc, #52]	; (801a140 <rand+0x78>)
 801a10a:	4358      	muls	r0, r3
 801a10c:	fb02 0004 	mla	r0, r2, r4, r0
 801a110:	fba3 3202 	umull	r3, r2, r3, r2
 801a114:	3301      	adds	r3, #1
 801a116:	eb40 0002 	adc.w	r0, r0, r2
 801a11a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801a11e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a122:	bd10      	pop	{r4, pc}
 801a124:	20001df0 	.word	0x20001df0
 801a128:	0801d000 	.word	0x0801d000
 801a12c:	0801d017 	.word	0x0801d017
 801a130:	abcd330e 	.word	0xabcd330e
 801a134:	e66d1234 	.word	0xe66d1234
 801a138:	0005deec 	.word	0x0005deec
 801a13c:	5851f42d 	.word	0x5851f42d
 801a140:	4c957f2d 	.word	0x4c957f2d

0801a144 <realloc>:
 801a144:	4b02      	ldr	r3, [pc, #8]	; (801a150 <realloc+0xc>)
 801a146:	460a      	mov	r2, r1
 801a148:	4601      	mov	r1, r0
 801a14a:	6818      	ldr	r0, [r3, #0]
 801a14c:	f000 b802 	b.w	801a154 <_realloc_r>
 801a150:	20001df0 	.word	0x20001df0

0801a154 <_realloc_r>:
 801a154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a158:	4680      	mov	r8, r0
 801a15a:	4614      	mov	r4, r2
 801a15c:	460e      	mov	r6, r1
 801a15e:	b921      	cbnz	r1, 801a16a <_realloc_r+0x16>
 801a160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a164:	4611      	mov	r1, r2
 801a166:	f7ff bef5 	b.w	8019f54 <_malloc_r>
 801a16a:	b92a      	cbnz	r2, 801a178 <_realloc_r+0x24>
 801a16c:	f000 fba4 	bl	801a8b8 <_free_r>
 801a170:	4625      	mov	r5, r4
 801a172:	4628      	mov	r0, r5
 801a174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a178:	f000 fbea 	bl	801a950 <_malloc_usable_size_r>
 801a17c:	4284      	cmp	r4, r0
 801a17e:	4607      	mov	r7, r0
 801a180:	d802      	bhi.n	801a188 <_realloc_r+0x34>
 801a182:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801a186:	d812      	bhi.n	801a1ae <_realloc_r+0x5a>
 801a188:	4621      	mov	r1, r4
 801a18a:	4640      	mov	r0, r8
 801a18c:	f7ff fee2 	bl	8019f54 <_malloc_r>
 801a190:	4605      	mov	r5, r0
 801a192:	2800      	cmp	r0, #0
 801a194:	d0ed      	beq.n	801a172 <_realloc_r+0x1e>
 801a196:	42bc      	cmp	r4, r7
 801a198:	4622      	mov	r2, r4
 801a19a:	4631      	mov	r1, r6
 801a19c:	bf28      	it	cs
 801a19e:	463a      	movcs	r2, r7
 801a1a0:	f000 fb51 	bl	801a846 <memcpy>
 801a1a4:	4631      	mov	r1, r6
 801a1a6:	4640      	mov	r0, r8
 801a1a8:	f000 fb86 	bl	801a8b8 <_free_r>
 801a1ac:	e7e1      	b.n	801a172 <_realloc_r+0x1e>
 801a1ae:	4635      	mov	r5, r6
 801a1b0:	e7df      	b.n	801a172 <_realloc_r+0x1e>
	...

0801a1b4 <_strtoul_l.constprop.0>:
 801a1b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a1b8:	4f36      	ldr	r7, [pc, #216]	; (801a294 <_strtoul_l.constprop.0+0xe0>)
 801a1ba:	4686      	mov	lr, r0
 801a1bc:	460d      	mov	r5, r1
 801a1be:	4628      	mov	r0, r5
 801a1c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a1c4:	5d3e      	ldrb	r6, [r7, r4]
 801a1c6:	f016 0608 	ands.w	r6, r6, #8
 801a1ca:	d1f8      	bne.n	801a1be <_strtoul_l.constprop.0+0xa>
 801a1cc:	2c2d      	cmp	r4, #45	; 0x2d
 801a1ce:	d130      	bne.n	801a232 <_strtoul_l.constprop.0+0x7e>
 801a1d0:	782c      	ldrb	r4, [r5, #0]
 801a1d2:	2601      	movs	r6, #1
 801a1d4:	1c85      	adds	r5, r0, #2
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	d057      	beq.n	801a28a <_strtoul_l.constprop.0+0xd6>
 801a1da:	2b10      	cmp	r3, #16
 801a1dc:	d109      	bne.n	801a1f2 <_strtoul_l.constprop.0+0x3e>
 801a1de:	2c30      	cmp	r4, #48	; 0x30
 801a1e0:	d107      	bne.n	801a1f2 <_strtoul_l.constprop.0+0x3e>
 801a1e2:	7828      	ldrb	r0, [r5, #0]
 801a1e4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801a1e8:	2858      	cmp	r0, #88	; 0x58
 801a1ea:	d149      	bne.n	801a280 <_strtoul_l.constprop.0+0xcc>
 801a1ec:	786c      	ldrb	r4, [r5, #1]
 801a1ee:	2310      	movs	r3, #16
 801a1f0:	3502      	adds	r5, #2
 801a1f2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801a1f6:	2700      	movs	r7, #0
 801a1f8:	fbb8 f8f3 	udiv	r8, r8, r3
 801a1fc:	fb03 f908 	mul.w	r9, r3, r8
 801a200:	ea6f 0909 	mvn.w	r9, r9
 801a204:	4638      	mov	r0, r7
 801a206:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801a20a:	f1bc 0f09 	cmp.w	ip, #9
 801a20e:	d815      	bhi.n	801a23c <_strtoul_l.constprop.0+0x88>
 801a210:	4664      	mov	r4, ip
 801a212:	42a3      	cmp	r3, r4
 801a214:	dd23      	ble.n	801a25e <_strtoul_l.constprop.0+0xaa>
 801a216:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801a21a:	d007      	beq.n	801a22c <_strtoul_l.constprop.0+0x78>
 801a21c:	4580      	cmp	r8, r0
 801a21e:	d31b      	bcc.n	801a258 <_strtoul_l.constprop.0+0xa4>
 801a220:	d101      	bne.n	801a226 <_strtoul_l.constprop.0+0x72>
 801a222:	45a1      	cmp	r9, r4
 801a224:	db18      	blt.n	801a258 <_strtoul_l.constprop.0+0xa4>
 801a226:	fb00 4003 	mla	r0, r0, r3, r4
 801a22a:	2701      	movs	r7, #1
 801a22c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a230:	e7e9      	b.n	801a206 <_strtoul_l.constprop.0+0x52>
 801a232:	2c2b      	cmp	r4, #43	; 0x2b
 801a234:	bf04      	itt	eq
 801a236:	782c      	ldrbeq	r4, [r5, #0]
 801a238:	1c85      	addeq	r5, r0, #2
 801a23a:	e7cc      	b.n	801a1d6 <_strtoul_l.constprop.0+0x22>
 801a23c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801a240:	f1bc 0f19 	cmp.w	ip, #25
 801a244:	d801      	bhi.n	801a24a <_strtoul_l.constprop.0+0x96>
 801a246:	3c37      	subs	r4, #55	; 0x37
 801a248:	e7e3      	b.n	801a212 <_strtoul_l.constprop.0+0x5e>
 801a24a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801a24e:	f1bc 0f19 	cmp.w	ip, #25
 801a252:	d804      	bhi.n	801a25e <_strtoul_l.constprop.0+0xaa>
 801a254:	3c57      	subs	r4, #87	; 0x57
 801a256:	e7dc      	b.n	801a212 <_strtoul_l.constprop.0+0x5e>
 801a258:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a25c:	e7e6      	b.n	801a22c <_strtoul_l.constprop.0+0x78>
 801a25e:	1c7b      	adds	r3, r7, #1
 801a260:	d106      	bne.n	801a270 <_strtoul_l.constprop.0+0xbc>
 801a262:	2322      	movs	r3, #34	; 0x22
 801a264:	f8ce 3000 	str.w	r3, [lr]
 801a268:	4638      	mov	r0, r7
 801a26a:	b932      	cbnz	r2, 801a27a <_strtoul_l.constprop.0+0xc6>
 801a26c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a270:	b106      	cbz	r6, 801a274 <_strtoul_l.constprop.0+0xc0>
 801a272:	4240      	negs	r0, r0
 801a274:	2a00      	cmp	r2, #0
 801a276:	d0f9      	beq.n	801a26c <_strtoul_l.constprop.0+0xb8>
 801a278:	b107      	cbz	r7, 801a27c <_strtoul_l.constprop.0+0xc8>
 801a27a:	1e69      	subs	r1, r5, #1
 801a27c:	6011      	str	r1, [r2, #0]
 801a27e:	e7f5      	b.n	801a26c <_strtoul_l.constprop.0+0xb8>
 801a280:	2430      	movs	r4, #48	; 0x30
 801a282:	2b00      	cmp	r3, #0
 801a284:	d1b5      	bne.n	801a1f2 <_strtoul_l.constprop.0+0x3e>
 801a286:	2308      	movs	r3, #8
 801a288:	e7b3      	b.n	801a1f2 <_strtoul_l.constprop.0+0x3e>
 801a28a:	2c30      	cmp	r4, #48	; 0x30
 801a28c:	d0a9      	beq.n	801a1e2 <_strtoul_l.constprop.0+0x2e>
 801a28e:	230a      	movs	r3, #10
 801a290:	e7af      	b.n	801a1f2 <_strtoul_l.constprop.0+0x3e>
 801a292:	bf00      	nop
 801a294:	0801d070 	.word	0x0801d070

0801a298 <strtoul>:
 801a298:	4613      	mov	r3, r2
 801a29a:	460a      	mov	r2, r1
 801a29c:	4601      	mov	r1, r0
 801a29e:	4802      	ldr	r0, [pc, #8]	; (801a2a8 <strtoul+0x10>)
 801a2a0:	6800      	ldr	r0, [r0, #0]
 801a2a2:	f7ff bf87 	b.w	801a1b4 <_strtoul_l.constprop.0>
 801a2a6:	bf00      	nop
 801a2a8:	20001df0 	.word	0x20001df0

0801a2ac <std>:
 801a2ac:	2300      	movs	r3, #0
 801a2ae:	b510      	push	{r4, lr}
 801a2b0:	4604      	mov	r4, r0
 801a2b2:	e9c0 3300 	strd	r3, r3, [r0]
 801a2b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a2ba:	6083      	str	r3, [r0, #8]
 801a2bc:	8181      	strh	r1, [r0, #12]
 801a2be:	6643      	str	r3, [r0, #100]	; 0x64
 801a2c0:	81c2      	strh	r2, [r0, #14]
 801a2c2:	6183      	str	r3, [r0, #24]
 801a2c4:	4619      	mov	r1, r3
 801a2c6:	2208      	movs	r2, #8
 801a2c8:	305c      	adds	r0, #92	; 0x5c
 801a2ca:	f000 f98b 	bl	801a5e4 <memset>
 801a2ce:	4b0d      	ldr	r3, [pc, #52]	; (801a304 <std+0x58>)
 801a2d0:	6263      	str	r3, [r4, #36]	; 0x24
 801a2d2:	4b0d      	ldr	r3, [pc, #52]	; (801a308 <std+0x5c>)
 801a2d4:	62a3      	str	r3, [r4, #40]	; 0x28
 801a2d6:	4b0d      	ldr	r3, [pc, #52]	; (801a30c <std+0x60>)
 801a2d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a2da:	4b0d      	ldr	r3, [pc, #52]	; (801a310 <std+0x64>)
 801a2dc:	6323      	str	r3, [r4, #48]	; 0x30
 801a2de:	4b0d      	ldr	r3, [pc, #52]	; (801a314 <std+0x68>)
 801a2e0:	6224      	str	r4, [r4, #32]
 801a2e2:	429c      	cmp	r4, r3
 801a2e4:	d006      	beq.n	801a2f4 <std+0x48>
 801a2e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801a2ea:	4294      	cmp	r4, r2
 801a2ec:	d002      	beq.n	801a2f4 <std+0x48>
 801a2ee:	33d0      	adds	r3, #208	; 0xd0
 801a2f0:	429c      	cmp	r4, r3
 801a2f2:	d105      	bne.n	801a300 <std+0x54>
 801a2f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a2f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a2fc:	f000 ba98 	b.w	801a830 <__retarget_lock_init_recursive>
 801a300:	bd10      	pop	{r4, pc}
 801a302:	bf00      	nop
 801a304:	0801a499 	.word	0x0801a499
 801a308:	0801a4bb 	.word	0x0801a4bb
 801a30c:	0801a4f3 	.word	0x0801a4f3
 801a310:	0801a517 	.word	0x0801a517
 801a314:	200105cc 	.word	0x200105cc

0801a318 <stdio_exit_handler>:
 801a318:	4a02      	ldr	r2, [pc, #8]	; (801a324 <stdio_exit_handler+0xc>)
 801a31a:	4903      	ldr	r1, [pc, #12]	; (801a328 <stdio_exit_handler+0x10>)
 801a31c:	4803      	ldr	r0, [pc, #12]	; (801a32c <stdio_exit_handler+0x14>)
 801a31e:	f000 b869 	b.w	801a3f4 <_fwalk_sglue>
 801a322:	bf00      	nop
 801a324:	20001d98 	.word	0x20001d98
 801a328:	0801b03d 	.word	0x0801b03d
 801a32c:	20001da4 	.word	0x20001da4

0801a330 <cleanup_stdio>:
 801a330:	6841      	ldr	r1, [r0, #4]
 801a332:	4b0c      	ldr	r3, [pc, #48]	; (801a364 <cleanup_stdio+0x34>)
 801a334:	4299      	cmp	r1, r3
 801a336:	b510      	push	{r4, lr}
 801a338:	4604      	mov	r4, r0
 801a33a:	d001      	beq.n	801a340 <cleanup_stdio+0x10>
 801a33c:	f000 fe7e 	bl	801b03c <_fflush_r>
 801a340:	68a1      	ldr	r1, [r4, #8]
 801a342:	4b09      	ldr	r3, [pc, #36]	; (801a368 <cleanup_stdio+0x38>)
 801a344:	4299      	cmp	r1, r3
 801a346:	d002      	beq.n	801a34e <cleanup_stdio+0x1e>
 801a348:	4620      	mov	r0, r4
 801a34a:	f000 fe77 	bl	801b03c <_fflush_r>
 801a34e:	68e1      	ldr	r1, [r4, #12]
 801a350:	4b06      	ldr	r3, [pc, #24]	; (801a36c <cleanup_stdio+0x3c>)
 801a352:	4299      	cmp	r1, r3
 801a354:	d004      	beq.n	801a360 <cleanup_stdio+0x30>
 801a356:	4620      	mov	r0, r4
 801a358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a35c:	f000 be6e 	b.w	801b03c <_fflush_r>
 801a360:	bd10      	pop	{r4, pc}
 801a362:	bf00      	nop
 801a364:	200105cc 	.word	0x200105cc
 801a368:	20010634 	.word	0x20010634
 801a36c:	2001069c 	.word	0x2001069c

0801a370 <global_stdio_init.part.0>:
 801a370:	b510      	push	{r4, lr}
 801a372:	4b0b      	ldr	r3, [pc, #44]	; (801a3a0 <global_stdio_init.part.0+0x30>)
 801a374:	4c0b      	ldr	r4, [pc, #44]	; (801a3a4 <global_stdio_init.part.0+0x34>)
 801a376:	4a0c      	ldr	r2, [pc, #48]	; (801a3a8 <global_stdio_init.part.0+0x38>)
 801a378:	601a      	str	r2, [r3, #0]
 801a37a:	4620      	mov	r0, r4
 801a37c:	2200      	movs	r2, #0
 801a37e:	2104      	movs	r1, #4
 801a380:	f7ff ff94 	bl	801a2ac <std>
 801a384:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801a388:	2201      	movs	r2, #1
 801a38a:	2109      	movs	r1, #9
 801a38c:	f7ff ff8e 	bl	801a2ac <std>
 801a390:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801a394:	2202      	movs	r2, #2
 801a396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a39a:	2112      	movs	r1, #18
 801a39c:	f7ff bf86 	b.w	801a2ac <std>
 801a3a0:	20010704 	.word	0x20010704
 801a3a4:	200105cc 	.word	0x200105cc
 801a3a8:	0801a319 	.word	0x0801a319

0801a3ac <__sfp_lock_acquire>:
 801a3ac:	4801      	ldr	r0, [pc, #4]	; (801a3b4 <__sfp_lock_acquire+0x8>)
 801a3ae:	f000 ba40 	b.w	801a832 <__retarget_lock_acquire_recursive>
 801a3b2:	bf00      	nop
 801a3b4:	2001070e 	.word	0x2001070e

0801a3b8 <__sfp_lock_release>:
 801a3b8:	4801      	ldr	r0, [pc, #4]	; (801a3c0 <__sfp_lock_release+0x8>)
 801a3ba:	f000 ba3b 	b.w	801a834 <__retarget_lock_release_recursive>
 801a3be:	bf00      	nop
 801a3c0:	2001070e 	.word	0x2001070e

0801a3c4 <__sinit>:
 801a3c4:	b510      	push	{r4, lr}
 801a3c6:	4604      	mov	r4, r0
 801a3c8:	f7ff fff0 	bl	801a3ac <__sfp_lock_acquire>
 801a3cc:	6a23      	ldr	r3, [r4, #32]
 801a3ce:	b11b      	cbz	r3, 801a3d8 <__sinit+0x14>
 801a3d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a3d4:	f7ff bff0 	b.w	801a3b8 <__sfp_lock_release>
 801a3d8:	4b04      	ldr	r3, [pc, #16]	; (801a3ec <__sinit+0x28>)
 801a3da:	6223      	str	r3, [r4, #32]
 801a3dc:	4b04      	ldr	r3, [pc, #16]	; (801a3f0 <__sinit+0x2c>)
 801a3de:	681b      	ldr	r3, [r3, #0]
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	d1f5      	bne.n	801a3d0 <__sinit+0xc>
 801a3e4:	f7ff ffc4 	bl	801a370 <global_stdio_init.part.0>
 801a3e8:	e7f2      	b.n	801a3d0 <__sinit+0xc>
 801a3ea:	bf00      	nop
 801a3ec:	0801a331 	.word	0x0801a331
 801a3f0:	20010704 	.word	0x20010704

0801a3f4 <_fwalk_sglue>:
 801a3f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a3f8:	4607      	mov	r7, r0
 801a3fa:	4688      	mov	r8, r1
 801a3fc:	4614      	mov	r4, r2
 801a3fe:	2600      	movs	r6, #0
 801a400:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a404:	f1b9 0901 	subs.w	r9, r9, #1
 801a408:	d505      	bpl.n	801a416 <_fwalk_sglue+0x22>
 801a40a:	6824      	ldr	r4, [r4, #0]
 801a40c:	2c00      	cmp	r4, #0
 801a40e:	d1f7      	bne.n	801a400 <_fwalk_sglue+0xc>
 801a410:	4630      	mov	r0, r6
 801a412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a416:	89ab      	ldrh	r3, [r5, #12]
 801a418:	2b01      	cmp	r3, #1
 801a41a:	d907      	bls.n	801a42c <_fwalk_sglue+0x38>
 801a41c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a420:	3301      	adds	r3, #1
 801a422:	d003      	beq.n	801a42c <_fwalk_sglue+0x38>
 801a424:	4629      	mov	r1, r5
 801a426:	4638      	mov	r0, r7
 801a428:	47c0      	blx	r8
 801a42a:	4306      	orrs	r6, r0
 801a42c:	3568      	adds	r5, #104	; 0x68
 801a42e:	e7e9      	b.n	801a404 <_fwalk_sglue+0x10>

0801a430 <sniprintf>:
 801a430:	b40c      	push	{r2, r3}
 801a432:	b530      	push	{r4, r5, lr}
 801a434:	4b17      	ldr	r3, [pc, #92]	; (801a494 <sniprintf+0x64>)
 801a436:	1e0c      	subs	r4, r1, #0
 801a438:	681d      	ldr	r5, [r3, #0]
 801a43a:	b09d      	sub	sp, #116	; 0x74
 801a43c:	da08      	bge.n	801a450 <sniprintf+0x20>
 801a43e:	238b      	movs	r3, #139	; 0x8b
 801a440:	602b      	str	r3, [r5, #0]
 801a442:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a446:	b01d      	add	sp, #116	; 0x74
 801a448:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a44c:	b002      	add	sp, #8
 801a44e:	4770      	bx	lr
 801a450:	f44f 7302 	mov.w	r3, #520	; 0x208
 801a454:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a458:	bf14      	ite	ne
 801a45a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801a45e:	4623      	moveq	r3, r4
 801a460:	9304      	str	r3, [sp, #16]
 801a462:	9307      	str	r3, [sp, #28]
 801a464:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a468:	9002      	str	r0, [sp, #8]
 801a46a:	9006      	str	r0, [sp, #24]
 801a46c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a470:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a472:	ab21      	add	r3, sp, #132	; 0x84
 801a474:	a902      	add	r1, sp, #8
 801a476:	4628      	mov	r0, r5
 801a478:	9301      	str	r3, [sp, #4]
 801a47a:	f000 facb 	bl	801aa14 <_svfiprintf_r>
 801a47e:	1c43      	adds	r3, r0, #1
 801a480:	bfbc      	itt	lt
 801a482:	238b      	movlt	r3, #139	; 0x8b
 801a484:	602b      	strlt	r3, [r5, #0]
 801a486:	2c00      	cmp	r4, #0
 801a488:	d0dd      	beq.n	801a446 <sniprintf+0x16>
 801a48a:	9b02      	ldr	r3, [sp, #8]
 801a48c:	2200      	movs	r2, #0
 801a48e:	701a      	strb	r2, [r3, #0]
 801a490:	e7d9      	b.n	801a446 <sniprintf+0x16>
 801a492:	bf00      	nop
 801a494:	20001df0 	.word	0x20001df0

0801a498 <__sread>:
 801a498:	b510      	push	{r4, lr}
 801a49a:	460c      	mov	r4, r1
 801a49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4a0:	f000 f968 	bl	801a774 <_read_r>
 801a4a4:	2800      	cmp	r0, #0
 801a4a6:	bfab      	itete	ge
 801a4a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a4aa:	89a3      	ldrhlt	r3, [r4, #12]
 801a4ac:	181b      	addge	r3, r3, r0
 801a4ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a4b2:	bfac      	ite	ge
 801a4b4:	6563      	strge	r3, [r4, #84]	; 0x54
 801a4b6:	81a3      	strhlt	r3, [r4, #12]
 801a4b8:	bd10      	pop	{r4, pc}

0801a4ba <__swrite>:
 801a4ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4be:	461f      	mov	r7, r3
 801a4c0:	898b      	ldrh	r3, [r1, #12]
 801a4c2:	05db      	lsls	r3, r3, #23
 801a4c4:	4605      	mov	r5, r0
 801a4c6:	460c      	mov	r4, r1
 801a4c8:	4616      	mov	r6, r2
 801a4ca:	d505      	bpl.n	801a4d8 <__swrite+0x1e>
 801a4cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4d0:	2302      	movs	r3, #2
 801a4d2:	2200      	movs	r2, #0
 801a4d4:	f000 f93c 	bl	801a750 <_lseek_r>
 801a4d8:	89a3      	ldrh	r3, [r4, #12]
 801a4da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a4de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a4e2:	81a3      	strh	r3, [r4, #12]
 801a4e4:	4632      	mov	r2, r6
 801a4e6:	463b      	mov	r3, r7
 801a4e8:	4628      	mov	r0, r5
 801a4ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a4ee:	f000 b963 	b.w	801a7b8 <_write_r>

0801a4f2 <__sseek>:
 801a4f2:	b510      	push	{r4, lr}
 801a4f4:	460c      	mov	r4, r1
 801a4f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4fa:	f000 f929 	bl	801a750 <_lseek_r>
 801a4fe:	1c43      	adds	r3, r0, #1
 801a500:	89a3      	ldrh	r3, [r4, #12]
 801a502:	bf15      	itete	ne
 801a504:	6560      	strne	r0, [r4, #84]	; 0x54
 801a506:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a50a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a50e:	81a3      	strheq	r3, [r4, #12]
 801a510:	bf18      	it	ne
 801a512:	81a3      	strhne	r3, [r4, #12]
 801a514:	bd10      	pop	{r4, pc}

0801a516 <__sclose>:
 801a516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a51a:	f000 b8b3 	b.w	801a684 <_close_r>

0801a51e <_vsniprintf_r>:
 801a51e:	b530      	push	{r4, r5, lr}
 801a520:	4614      	mov	r4, r2
 801a522:	2c00      	cmp	r4, #0
 801a524:	b09b      	sub	sp, #108	; 0x6c
 801a526:	4605      	mov	r5, r0
 801a528:	461a      	mov	r2, r3
 801a52a:	da05      	bge.n	801a538 <_vsniprintf_r+0x1a>
 801a52c:	238b      	movs	r3, #139	; 0x8b
 801a52e:	6003      	str	r3, [r0, #0]
 801a530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a534:	b01b      	add	sp, #108	; 0x6c
 801a536:	bd30      	pop	{r4, r5, pc}
 801a538:	f44f 7302 	mov.w	r3, #520	; 0x208
 801a53c:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a540:	bf14      	ite	ne
 801a542:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801a546:	4623      	moveq	r3, r4
 801a548:	9302      	str	r3, [sp, #8]
 801a54a:	9305      	str	r3, [sp, #20]
 801a54c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a550:	9100      	str	r1, [sp, #0]
 801a552:	9104      	str	r1, [sp, #16]
 801a554:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a558:	4669      	mov	r1, sp
 801a55a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801a55c:	f000 fa5a 	bl	801aa14 <_svfiprintf_r>
 801a560:	1c43      	adds	r3, r0, #1
 801a562:	bfbc      	itt	lt
 801a564:	238b      	movlt	r3, #139	; 0x8b
 801a566:	602b      	strlt	r3, [r5, #0]
 801a568:	2c00      	cmp	r4, #0
 801a56a:	d0e3      	beq.n	801a534 <_vsniprintf_r+0x16>
 801a56c:	9b00      	ldr	r3, [sp, #0]
 801a56e:	2200      	movs	r2, #0
 801a570:	701a      	strb	r2, [r3, #0]
 801a572:	e7df      	b.n	801a534 <_vsniprintf_r+0x16>

0801a574 <vsniprintf>:
 801a574:	b507      	push	{r0, r1, r2, lr}
 801a576:	9300      	str	r3, [sp, #0]
 801a578:	4613      	mov	r3, r2
 801a57a:	460a      	mov	r2, r1
 801a57c:	4601      	mov	r1, r0
 801a57e:	4803      	ldr	r0, [pc, #12]	; (801a58c <vsniprintf+0x18>)
 801a580:	6800      	ldr	r0, [r0, #0]
 801a582:	f7ff ffcc 	bl	801a51e <_vsniprintf_r>
 801a586:	b003      	add	sp, #12
 801a588:	f85d fb04 	ldr.w	pc, [sp], #4
 801a58c:	20001df0 	.word	0x20001df0

0801a590 <memcmp>:
 801a590:	b510      	push	{r4, lr}
 801a592:	3901      	subs	r1, #1
 801a594:	4402      	add	r2, r0
 801a596:	4290      	cmp	r0, r2
 801a598:	d101      	bne.n	801a59e <memcmp+0xe>
 801a59a:	2000      	movs	r0, #0
 801a59c:	e005      	b.n	801a5aa <memcmp+0x1a>
 801a59e:	7803      	ldrb	r3, [r0, #0]
 801a5a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a5a4:	42a3      	cmp	r3, r4
 801a5a6:	d001      	beq.n	801a5ac <memcmp+0x1c>
 801a5a8:	1b18      	subs	r0, r3, r4
 801a5aa:	bd10      	pop	{r4, pc}
 801a5ac:	3001      	adds	r0, #1
 801a5ae:	e7f2      	b.n	801a596 <memcmp+0x6>

0801a5b0 <memmove>:
 801a5b0:	4288      	cmp	r0, r1
 801a5b2:	b510      	push	{r4, lr}
 801a5b4:	eb01 0402 	add.w	r4, r1, r2
 801a5b8:	d902      	bls.n	801a5c0 <memmove+0x10>
 801a5ba:	4284      	cmp	r4, r0
 801a5bc:	4623      	mov	r3, r4
 801a5be:	d807      	bhi.n	801a5d0 <memmove+0x20>
 801a5c0:	1e43      	subs	r3, r0, #1
 801a5c2:	42a1      	cmp	r1, r4
 801a5c4:	d008      	beq.n	801a5d8 <memmove+0x28>
 801a5c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a5ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a5ce:	e7f8      	b.n	801a5c2 <memmove+0x12>
 801a5d0:	4402      	add	r2, r0
 801a5d2:	4601      	mov	r1, r0
 801a5d4:	428a      	cmp	r2, r1
 801a5d6:	d100      	bne.n	801a5da <memmove+0x2a>
 801a5d8:	bd10      	pop	{r4, pc}
 801a5da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a5de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a5e2:	e7f7      	b.n	801a5d4 <memmove+0x24>

0801a5e4 <memset>:
 801a5e4:	4402      	add	r2, r0
 801a5e6:	4603      	mov	r3, r0
 801a5e8:	4293      	cmp	r3, r2
 801a5ea:	d100      	bne.n	801a5ee <memset+0xa>
 801a5ec:	4770      	bx	lr
 801a5ee:	f803 1b01 	strb.w	r1, [r3], #1
 801a5f2:	e7f9      	b.n	801a5e8 <memset+0x4>

0801a5f4 <strchr>:
 801a5f4:	b2c9      	uxtb	r1, r1
 801a5f6:	4603      	mov	r3, r0
 801a5f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a5fc:	b11a      	cbz	r2, 801a606 <strchr+0x12>
 801a5fe:	428a      	cmp	r2, r1
 801a600:	d1f9      	bne.n	801a5f6 <strchr+0x2>
 801a602:	4618      	mov	r0, r3
 801a604:	4770      	bx	lr
 801a606:	2900      	cmp	r1, #0
 801a608:	bf18      	it	ne
 801a60a:	2300      	movne	r3, #0
 801a60c:	e7f9      	b.n	801a602 <strchr+0xe>

0801a60e <strncmp>:
 801a60e:	b510      	push	{r4, lr}
 801a610:	b16a      	cbz	r2, 801a62e <strncmp+0x20>
 801a612:	3901      	subs	r1, #1
 801a614:	1884      	adds	r4, r0, r2
 801a616:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a61a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a61e:	429a      	cmp	r2, r3
 801a620:	d103      	bne.n	801a62a <strncmp+0x1c>
 801a622:	42a0      	cmp	r0, r4
 801a624:	d001      	beq.n	801a62a <strncmp+0x1c>
 801a626:	2a00      	cmp	r2, #0
 801a628:	d1f5      	bne.n	801a616 <strncmp+0x8>
 801a62a:	1ad0      	subs	r0, r2, r3
 801a62c:	bd10      	pop	{r4, pc}
 801a62e:	4610      	mov	r0, r2
 801a630:	e7fc      	b.n	801a62c <strncmp+0x1e>

0801a632 <strncpy>:
 801a632:	b510      	push	{r4, lr}
 801a634:	3901      	subs	r1, #1
 801a636:	4603      	mov	r3, r0
 801a638:	b132      	cbz	r2, 801a648 <strncpy+0x16>
 801a63a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a63e:	f803 4b01 	strb.w	r4, [r3], #1
 801a642:	3a01      	subs	r2, #1
 801a644:	2c00      	cmp	r4, #0
 801a646:	d1f7      	bne.n	801a638 <strncpy+0x6>
 801a648:	441a      	add	r2, r3
 801a64a:	2100      	movs	r1, #0
 801a64c:	4293      	cmp	r3, r2
 801a64e:	d100      	bne.n	801a652 <strncpy+0x20>
 801a650:	bd10      	pop	{r4, pc}
 801a652:	f803 1b01 	strb.w	r1, [r3], #1
 801a656:	e7f9      	b.n	801a64c <strncpy+0x1a>

0801a658 <strstr>:
 801a658:	780a      	ldrb	r2, [r1, #0]
 801a65a:	b570      	push	{r4, r5, r6, lr}
 801a65c:	b96a      	cbnz	r2, 801a67a <strstr+0x22>
 801a65e:	bd70      	pop	{r4, r5, r6, pc}
 801a660:	429a      	cmp	r2, r3
 801a662:	d109      	bne.n	801a678 <strstr+0x20>
 801a664:	460c      	mov	r4, r1
 801a666:	4605      	mov	r5, r0
 801a668:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d0f6      	beq.n	801a65e <strstr+0x6>
 801a670:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801a674:	429e      	cmp	r6, r3
 801a676:	d0f7      	beq.n	801a668 <strstr+0x10>
 801a678:	3001      	adds	r0, #1
 801a67a:	7803      	ldrb	r3, [r0, #0]
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d1ef      	bne.n	801a660 <strstr+0x8>
 801a680:	4618      	mov	r0, r3
 801a682:	e7ec      	b.n	801a65e <strstr+0x6>

0801a684 <_close_r>:
 801a684:	b538      	push	{r3, r4, r5, lr}
 801a686:	4d06      	ldr	r5, [pc, #24]	; (801a6a0 <_close_r+0x1c>)
 801a688:	2300      	movs	r3, #0
 801a68a:	4604      	mov	r4, r0
 801a68c:	4608      	mov	r0, r1
 801a68e:	602b      	str	r3, [r5, #0]
 801a690:	f7e7 ff8d 	bl	80025ae <_close>
 801a694:	1c43      	adds	r3, r0, #1
 801a696:	d102      	bne.n	801a69e <_close_r+0x1a>
 801a698:	682b      	ldr	r3, [r5, #0]
 801a69a:	b103      	cbz	r3, 801a69e <_close_r+0x1a>
 801a69c:	6023      	str	r3, [r4, #0]
 801a69e:	bd38      	pop	{r3, r4, r5, pc}
 801a6a0:	20010708 	.word	0x20010708

0801a6a4 <_reclaim_reent>:
 801a6a4:	4b29      	ldr	r3, [pc, #164]	; (801a74c <_reclaim_reent+0xa8>)
 801a6a6:	681b      	ldr	r3, [r3, #0]
 801a6a8:	4283      	cmp	r3, r0
 801a6aa:	b570      	push	{r4, r5, r6, lr}
 801a6ac:	4604      	mov	r4, r0
 801a6ae:	d04b      	beq.n	801a748 <_reclaim_reent+0xa4>
 801a6b0:	69c3      	ldr	r3, [r0, #28]
 801a6b2:	b143      	cbz	r3, 801a6c6 <_reclaim_reent+0x22>
 801a6b4:	68db      	ldr	r3, [r3, #12]
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d144      	bne.n	801a744 <_reclaim_reent+0xa0>
 801a6ba:	69e3      	ldr	r3, [r4, #28]
 801a6bc:	6819      	ldr	r1, [r3, #0]
 801a6be:	b111      	cbz	r1, 801a6c6 <_reclaim_reent+0x22>
 801a6c0:	4620      	mov	r0, r4
 801a6c2:	f000 f8f9 	bl	801a8b8 <_free_r>
 801a6c6:	6961      	ldr	r1, [r4, #20]
 801a6c8:	b111      	cbz	r1, 801a6d0 <_reclaim_reent+0x2c>
 801a6ca:	4620      	mov	r0, r4
 801a6cc:	f000 f8f4 	bl	801a8b8 <_free_r>
 801a6d0:	69e1      	ldr	r1, [r4, #28]
 801a6d2:	b111      	cbz	r1, 801a6da <_reclaim_reent+0x36>
 801a6d4:	4620      	mov	r0, r4
 801a6d6:	f000 f8ef 	bl	801a8b8 <_free_r>
 801a6da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a6dc:	b111      	cbz	r1, 801a6e4 <_reclaim_reent+0x40>
 801a6de:	4620      	mov	r0, r4
 801a6e0:	f000 f8ea 	bl	801a8b8 <_free_r>
 801a6e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a6e6:	b111      	cbz	r1, 801a6ee <_reclaim_reent+0x4a>
 801a6e8:	4620      	mov	r0, r4
 801a6ea:	f000 f8e5 	bl	801a8b8 <_free_r>
 801a6ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a6f0:	b111      	cbz	r1, 801a6f8 <_reclaim_reent+0x54>
 801a6f2:	4620      	mov	r0, r4
 801a6f4:	f000 f8e0 	bl	801a8b8 <_free_r>
 801a6f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801a6fa:	b111      	cbz	r1, 801a702 <_reclaim_reent+0x5e>
 801a6fc:	4620      	mov	r0, r4
 801a6fe:	f000 f8db 	bl	801a8b8 <_free_r>
 801a702:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801a704:	b111      	cbz	r1, 801a70c <_reclaim_reent+0x68>
 801a706:	4620      	mov	r0, r4
 801a708:	f000 f8d6 	bl	801a8b8 <_free_r>
 801a70c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801a70e:	b111      	cbz	r1, 801a716 <_reclaim_reent+0x72>
 801a710:	4620      	mov	r0, r4
 801a712:	f000 f8d1 	bl	801a8b8 <_free_r>
 801a716:	6a23      	ldr	r3, [r4, #32]
 801a718:	b1b3      	cbz	r3, 801a748 <_reclaim_reent+0xa4>
 801a71a:	4620      	mov	r0, r4
 801a71c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a720:	4718      	bx	r3
 801a722:	5949      	ldr	r1, [r1, r5]
 801a724:	b941      	cbnz	r1, 801a738 <_reclaim_reent+0x94>
 801a726:	3504      	adds	r5, #4
 801a728:	69e3      	ldr	r3, [r4, #28]
 801a72a:	2d80      	cmp	r5, #128	; 0x80
 801a72c:	68d9      	ldr	r1, [r3, #12]
 801a72e:	d1f8      	bne.n	801a722 <_reclaim_reent+0x7e>
 801a730:	4620      	mov	r0, r4
 801a732:	f000 f8c1 	bl	801a8b8 <_free_r>
 801a736:	e7c0      	b.n	801a6ba <_reclaim_reent+0x16>
 801a738:	680e      	ldr	r6, [r1, #0]
 801a73a:	4620      	mov	r0, r4
 801a73c:	f000 f8bc 	bl	801a8b8 <_free_r>
 801a740:	4631      	mov	r1, r6
 801a742:	e7ef      	b.n	801a724 <_reclaim_reent+0x80>
 801a744:	2500      	movs	r5, #0
 801a746:	e7ef      	b.n	801a728 <_reclaim_reent+0x84>
 801a748:	bd70      	pop	{r4, r5, r6, pc}
 801a74a:	bf00      	nop
 801a74c:	20001df0 	.word	0x20001df0

0801a750 <_lseek_r>:
 801a750:	b538      	push	{r3, r4, r5, lr}
 801a752:	4d07      	ldr	r5, [pc, #28]	; (801a770 <_lseek_r+0x20>)
 801a754:	4604      	mov	r4, r0
 801a756:	4608      	mov	r0, r1
 801a758:	4611      	mov	r1, r2
 801a75a:	2200      	movs	r2, #0
 801a75c:	602a      	str	r2, [r5, #0]
 801a75e:	461a      	mov	r2, r3
 801a760:	f7e7 ff4c 	bl	80025fc <_lseek>
 801a764:	1c43      	adds	r3, r0, #1
 801a766:	d102      	bne.n	801a76e <_lseek_r+0x1e>
 801a768:	682b      	ldr	r3, [r5, #0]
 801a76a:	b103      	cbz	r3, 801a76e <_lseek_r+0x1e>
 801a76c:	6023      	str	r3, [r4, #0]
 801a76e:	bd38      	pop	{r3, r4, r5, pc}
 801a770:	20010708 	.word	0x20010708

0801a774 <_read_r>:
 801a774:	b538      	push	{r3, r4, r5, lr}
 801a776:	4d07      	ldr	r5, [pc, #28]	; (801a794 <_read_r+0x20>)
 801a778:	4604      	mov	r4, r0
 801a77a:	4608      	mov	r0, r1
 801a77c:	4611      	mov	r1, r2
 801a77e:	2200      	movs	r2, #0
 801a780:	602a      	str	r2, [r5, #0]
 801a782:	461a      	mov	r2, r3
 801a784:	f7e7 feda 	bl	800253c <_read>
 801a788:	1c43      	adds	r3, r0, #1
 801a78a:	d102      	bne.n	801a792 <_read_r+0x1e>
 801a78c:	682b      	ldr	r3, [r5, #0]
 801a78e:	b103      	cbz	r3, 801a792 <_read_r+0x1e>
 801a790:	6023      	str	r3, [r4, #0]
 801a792:	bd38      	pop	{r3, r4, r5, pc}
 801a794:	20010708 	.word	0x20010708

0801a798 <_sbrk_r>:
 801a798:	b538      	push	{r3, r4, r5, lr}
 801a79a:	4d06      	ldr	r5, [pc, #24]	; (801a7b4 <_sbrk_r+0x1c>)
 801a79c:	2300      	movs	r3, #0
 801a79e:	4604      	mov	r4, r0
 801a7a0:	4608      	mov	r0, r1
 801a7a2:	602b      	str	r3, [r5, #0]
 801a7a4:	f7e7 ff38 	bl	8002618 <_sbrk>
 801a7a8:	1c43      	adds	r3, r0, #1
 801a7aa:	d102      	bne.n	801a7b2 <_sbrk_r+0x1a>
 801a7ac:	682b      	ldr	r3, [r5, #0]
 801a7ae:	b103      	cbz	r3, 801a7b2 <_sbrk_r+0x1a>
 801a7b0:	6023      	str	r3, [r4, #0]
 801a7b2:	bd38      	pop	{r3, r4, r5, pc}
 801a7b4:	20010708 	.word	0x20010708

0801a7b8 <_write_r>:
 801a7b8:	b538      	push	{r3, r4, r5, lr}
 801a7ba:	4d07      	ldr	r5, [pc, #28]	; (801a7d8 <_write_r+0x20>)
 801a7bc:	4604      	mov	r4, r0
 801a7be:	4608      	mov	r0, r1
 801a7c0:	4611      	mov	r1, r2
 801a7c2:	2200      	movs	r2, #0
 801a7c4:	602a      	str	r2, [r5, #0]
 801a7c6:	461a      	mov	r2, r3
 801a7c8:	f7e7 fed5 	bl	8002576 <_write>
 801a7cc:	1c43      	adds	r3, r0, #1
 801a7ce:	d102      	bne.n	801a7d6 <_write_r+0x1e>
 801a7d0:	682b      	ldr	r3, [r5, #0]
 801a7d2:	b103      	cbz	r3, 801a7d6 <_write_r+0x1e>
 801a7d4:	6023      	str	r3, [r4, #0]
 801a7d6:	bd38      	pop	{r3, r4, r5, pc}
 801a7d8:	20010708 	.word	0x20010708

0801a7dc <__errno>:
 801a7dc:	4b01      	ldr	r3, [pc, #4]	; (801a7e4 <__errno+0x8>)
 801a7de:	6818      	ldr	r0, [r3, #0]
 801a7e0:	4770      	bx	lr
 801a7e2:	bf00      	nop
 801a7e4:	20001df0 	.word	0x20001df0

0801a7e8 <__libc_init_array>:
 801a7e8:	b570      	push	{r4, r5, r6, lr}
 801a7ea:	4d0d      	ldr	r5, [pc, #52]	; (801a820 <__libc_init_array+0x38>)
 801a7ec:	4c0d      	ldr	r4, [pc, #52]	; (801a824 <__libc_init_array+0x3c>)
 801a7ee:	1b64      	subs	r4, r4, r5
 801a7f0:	10a4      	asrs	r4, r4, #2
 801a7f2:	2600      	movs	r6, #0
 801a7f4:	42a6      	cmp	r6, r4
 801a7f6:	d109      	bne.n	801a80c <__libc_init_array+0x24>
 801a7f8:	4d0b      	ldr	r5, [pc, #44]	; (801a828 <__libc_init_array+0x40>)
 801a7fa:	4c0c      	ldr	r4, [pc, #48]	; (801a82c <__libc_init_array+0x44>)
 801a7fc:	f000 ff00 	bl	801b600 <_init>
 801a800:	1b64      	subs	r4, r4, r5
 801a802:	10a4      	asrs	r4, r4, #2
 801a804:	2600      	movs	r6, #0
 801a806:	42a6      	cmp	r6, r4
 801a808:	d105      	bne.n	801a816 <__libc_init_array+0x2e>
 801a80a:	bd70      	pop	{r4, r5, r6, pc}
 801a80c:	f855 3b04 	ldr.w	r3, [r5], #4
 801a810:	4798      	blx	r3
 801a812:	3601      	adds	r6, #1
 801a814:	e7ee      	b.n	801a7f4 <__libc_init_array+0xc>
 801a816:	f855 3b04 	ldr.w	r3, [r5], #4
 801a81a:	4798      	blx	r3
 801a81c:	3601      	adds	r6, #1
 801a81e:	e7f2      	b.n	801a806 <__libc_init_array+0x1e>
 801a820:	0801d1e8 	.word	0x0801d1e8
 801a824:	0801d1e8 	.word	0x0801d1e8
 801a828:	0801d1e8 	.word	0x0801d1e8
 801a82c:	0801d1f8 	.word	0x0801d1f8

0801a830 <__retarget_lock_init_recursive>:
 801a830:	4770      	bx	lr

0801a832 <__retarget_lock_acquire_recursive>:
 801a832:	4770      	bx	lr

0801a834 <__retarget_lock_release_recursive>:
 801a834:	4770      	bx	lr

0801a836 <strcpy>:
 801a836:	4603      	mov	r3, r0
 801a838:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a83c:	f803 2b01 	strb.w	r2, [r3], #1
 801a840:	2a00      	cmp	r2, #0
 801a842:	d1f9      	bne.n	801a838 <strcpy+0x2>
 801a844:	4770      	bx	lr

0801a846 <memcpy>:
 801a846:	440a      	add	r2, r1
 801a848:	4291      	cmp	r1, r2
 801a84a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a84e:	d100      	bne.n	801a852 <memcpy+0xc>
 801a850:	4770      	bx	lr
 801a852:	b510      	push	{r4, lr}
 801a854:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a858:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a85c:	4291      	cmp	r1, r2
 801a85e:	d1f9      	bne.n	801a854 <memcpy+0xe>
 801a860:	bd10      	pop	{r4, pc}
	...

0801a864 <__assert_func>:
 801a864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a866:	4614      	mov	r4, r2
 801a868:	461a      	mov	r2, r3
 801a86a:	4b09      	ldr	r3, [pc, #36]	; (801a890 <__assert_func+0x2c>)
 801a86c:	681b      	ldr	r3, [r3, #0]
 801a86e:	4605      	mov	r5, r0
 801a870:	68d8      	ldr	r0, [r3, #12]
 801a872:	b14c      	cbz	r4, 801a888 <__assert_func+0x24>
 801a874:	4b07      	ldr	r3, [pc, #28]	; (801a894 <__assert_func+0x30>)
 801a876:	9100      	str	r1, [sp, #0]
 801a878:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a87c:	4906      	ldr	r1, [pc, #24]	; (801a898 <__assert_func+0x34>)
 801a87e:	462b      	mov	r3, r5
 801a880:	f000 fc04 	bl	801b08c <fiprintf>
 801a884:	f000 fc14 	bl	801b0b0 <abort>
 801a888:	4b04      	ldr	r3, [pc, #16]	; (801a89c <__assert_func+0x38>)
 801a88a:	461c      	mov	r4, r3
 801a88c:	e7f3      	b.n	801a876 <__assert_func+0x12>
 801a88e:	bf00      	nop
 801a890:	20001df0 	.word	0x20001df0
 801a894:	0801d170 	.word	0x0801d170
 801a898:	0801d17d 	.word	0x0801d17d
 801a89c:	0801d1ab 	.word	0x0801d1ab

0801a8a0 <__env_lock>:
 801a8a0:	4801      	ldr	r0, [pc, #4]	; (801a8a8 <__env_lock+0x8>)
 801a8a2:	f7ff bfc6 	b.w	801a832 <__retarget_lock_acquire_recursive>
 801a8a6:	bf00      	nop
 801a8a8:	2001070c 	.word	0x2001070c

0801a8ac <__env_unlock>:
 801a8ac:	4801      	ldr	r0, [pc, #4]	; (801a8b4 <__env_unlock+0x8>)
 801a8ae:	f7ff bfc1 	b.w	801a834 <__retarget_lock_release_recursive>
 801a8b2:	bf00      	nop
 801a8b4:	2001070c 	.word	0x2001070c

0801a8b8 <_free_r>:
 801a8b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a8ba:	2900      	cmp	r1, #0
 801a8bc:	d044      	beq.n	801a948 <_free_r+0x90>
 801a8be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a8c2:	9001      	str	r0, [sp, #4]
 801a8c4:	2b00      	cmp	r3, #0
 801a8c6:	f1a1 0404 	sub.w	r4, r1, #4
 801a8ca:	bfb8      	it	lt
 801a8cc:	18e4      	addlt	r4, r4, r3
 801a8ce:	f7ff fbc1 	bl	801a054 <__malloc_lock>
 801a8d2:	4a1e      	ldr	r2, [pc, #120]	; (801a94c <_free_r+0x94>)
 801a8d4:	9801      	ldr	r0, [sp, #4]
 801a8d6:	6813      	ldr	r3, [r2, #0]
 801a8d8:	b933      	cbnz	r3, 801a8e8 <_free_r+0x30>
 801a8da:	6063      	str	r3, [r4, #4]
 801a8dc:	6014      	str	r4, [r2, #0]
 801a8de:	b003      	add	sp, #12
 801a8e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a8e4:	f7ff bbbc 	b.w	801a060 <__malloc_unlock>
 801a8e8:	42a3      	cmp	r3, r4
 801a8ea:	d908      	bls.n	801a8fe <_free_r+0x46>
 801a8ec:	6825      	ldr	r5, [r4, #0]
 801a8ee:	1961      	adds	r1, r4, r5
 801a8f0:	428b      	cmp	r3, r1
 801a8f2:	bf01      	itttt	eq
 801a8f4:	6819      	ldreq	r1, [r3, #0]
 801a8f6:	685b      	ldreq	r3, [r3, #4]
 801a8f8:	1949      	addeq	r1, r1, r5
 801a8fa:	6021      	streq	r1, [r4, #0]
 801a8fc:	e7ed      	b.n	801a8da <_free_r+0x22>
 801a8fe:	461a      	mov	r2, r3
 801a900:	685b      	ldr	r3, [r3, #4]
 801a902:	b10b      	cbz	r3, 801a908 <_free_r+0x50>
 801a904:	42a3      	cmp	r3, r4
 801a906:	d9fa      	bls.n	801a8fe <_free_r+0x46>
 801a908:	6811      	ldr	r1, [r2, #0]
 801a90a:	1855      	adds	r5, r2, r1
 801a90c:	42a5      	cmp	r5, r4
 801a90e:	d10b      	bne.n	801a928 <_free_r+0x70>
 801a910:	6824      	ldr	r4, [r4, #0]
 801a912:	4421      	add	r1, r4
 801a914:	1854      	adds	r4, r2, r1
 801a916:	42a3      	cmp	r3, r4
 801a918:	6011      	str	r1, [r2, #0]
 801a91a:	d1e0      	bne.n	801a8de <_free_r+0x26>
 801a91c:	681c      	ldr	r4, [r3, #0]
 801a91e:	685b      	ldr	r3, [r3, #4]
 801a920:	6053      	str	r3, [r2, #4]
 801a922:	440c      	add	r4, r1
 801a924:	6014      	str	r4, [r2, #0]
 801a926:	e7da      	b.n	801a8de <_free_r+0x26>
 801a928:	d902      	bls.n	801a930 <_free_r+0x78>
 801a92a:	230c      	movs	r3, #12
 801a92c:	6003      	str	r3, [r0, #0]
 801a92e:	e7d6      	b.n	801a8de <_free_r+0x26>
 801a930:	6825      	ldr	r5, [r4, #0]
 801a932:	1961      	adds	r1, r4, r5
 801a934:	428b      	cmp	r3, r1
 801a936:	bf04      	itt	eq
 801a938:	6819      	ldreq	r1, [r3, #0]
 801a93a:	685b      	ldreq	r3, [r3, #4]
 801a93c:	6063      	str	r3, [r4, #4]
 801a93e:	bf04      	itt	eq
 801a940:	1949      	addeq	r1, r1, r5
 801a942:	6021      	streq	r1, [r4, #0]
 801a944:	6054      	str	r4, [r2, #4]
 801a946:	e7ca      	b.n	801a8de <_free_r+0x26>
 801a948:	b003      	add	sp, #12
 801a94a:	bd30      	pop	{r4, r5, pc}
 801a94c:	200105c4 	.word	0x200105c4

0801a950 <_malloc_usable_size_r>:
 801a950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a954:	1f18      	subs	r0, r3, #4
 801a956:	2b00      	cmp	r3, #0
 801a958:	bfbc      	itt	lt
 801a95a:	580b      	ldrlt	r3, [r1, r0]
 801a95c:	18c0      	addlt	r0, r0, r3
 801a95e:	4770      	bx	lr

0801a960 <__ssputs_r>:
 801a960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a964:	688e      	ldr	r6, [r1, #8]
 801a966:	461f      	mov	r7, r3
 801a968:	42be      	cmp	r6, r7
 801a96a:	680b      	ldr	r3, [r1, #0]
 801a96c:	4682      	mov	sl, r0
 801a96e:	460c      	mov	r4, r1
 801a970:	4690      	mov	r8, r2
 801a972:	d82c      	bhi.n	801a9ce <__ssputs_r+0x6e>
 801a974:	898a      	ldrh	r2, [r1, #12]
 801a976:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a97a:	d026      	beq.n	801a9ca <__ssputs_r+0x6a>
 801a97c:	6965      	ldr	r5, [r4, #20]
 801a97e:	6909      	ldr	r1, [r1, #16]
 801a980:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a984:	eba3 0901 	sub.w	r9, r3, r1
 801a988:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a98c:	1c7b      	adds	r3, r7, #1
 801a98e:	444b      	add	r3, r9
 801a990:	106d      	asrs	r5, r5, #1
 801a992:	429d      	cmp	r5, r3
 801a994:	bf38      	it	cc
 801a996:	461d      	movcc	r5, r3
 801a998:	0553      	lsls	r3, r2, #21
 801a99a:	d527      	bpl.n	801a9ec <__ssputs_r+0x8c>
 801a99c:	4629      	mov	r1, r5
 801a99e:	f7ff fad9 	bl	8019f54 <_malloc_r>
 801a9a2:	4606      	mov	r6, r0
 801a9a4:	b360      	cbz	r0, 801aa00 <__ssputs_r+0xa0>
 801a9a6:	6921      	ldr	r1, [r4, #16]
 801a9a8:	464a      	mov	r2, r9
 801a9aa:	f7ff ff4c 	bl	801a846 <memcpy>
 801a9ae:	89a3      	ldrh	r3, [r4, #12]
 801a9b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a9b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a9b8:	81a3      	strh	r3, [r4, #12]
 801a9ba:	6126      	str	r6, [r4, #16]
 801a9bc:	6165      	str	r5, [r4, #20]
 801a9be:	444e      	add	r6, r9
 801a9c0:	eba5 0509 	sub.w	r5, r5, r9
 801a9c4:	6026      	str	r6, [r4, #0]
 801a9c6:	60a5      	str	r5, [r4, #8]
 801a9c8:	463e      	mov	r6, r7
 801a9ca:	42be      	cmp	r6, r7
 801a9cc:	d900      	bls.n	801a9d0 <__ssputs_r+0x70>
 801a9ce:	463e      	mov	r6, r7
 801a9d0:	6820      	ldr	r0, [r4, #0]
 801a9d2:	4632      	mov	r2, r6
 801a9d4:	4641      	mov	r1, r8
 801a9d6:	f7ff fdeb 	bl	801a5b0 <memmove>
 801a9da:	68a3      	ldr	r3, [r4, #8]
 801a9dc:	1b9b      	subs	r3, r3, r6
 801a9de:	60a3      	str	r3, [r4, #8]
 801a9e0:	6823      	ldr	r3, [r4, #0]
 801a9e2:	4433      	add	r3, r6
 801a9e4:	6023      	str	r3, [r4, #0]
 801a9e6:	2000      	movs	r0, #0
 801a9e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a9ec:	462a      	mov	r2, r5
 801a9ee:	f7ff fbb1 	bl	801a154 <_realloc_r>
 801a9f2:	4606      	mov	r6, r0
 801a9f4:	2800      	cmp	r0, #0
 801a9f6:	d1e0      	bne.n	801a9ba <__ssputs_r+0x5a>
 801a9f8:	6921      	ldr	r1, [r4, #16]
 801a9fa:	4650      	mov	r0, sl
 801a9fc:	f7ff ff5c 	bl	801a8b8 <_free_r>
 801aa00:	230c      	movs	r3, #12
 801aa02:	f8ca 3000 	str.w	r3, [sl]
 801aa06:	89a3      	ldrh	r3, [r4, #12]
 801aa08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aa0c:	81a3      	strh	r3, [r4, #12]
 801aa0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aa12:	e7e9      	b.n	801a9e8 <__ssputs_r+0x88>

0801aa14 <_svfiprintf_r>:
 801aa14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa18:	4698      	mov	r8, r3
 801aa1a:	898b      	ldrh	r3, [r1, #12]
 801aa1c:	061b      	lsls	r3, r3, #24
 801aa1e:	b09d      	sub	sp, #116	; 0x74
 801aa20:	4607      	mov	r7, r0
 801aa22:	460d      	mov	r5, r1
 801aa24:	4614      	mov	r4, r2
 801aa26:	d50e      	bpl.n	801aa46 <_svfiprintf_r+0x32>
 801aa28:	690b      	ldr	r3, [r1, #16]
 801aa2a:	b963      	cbnz	r3, 801aa46 <_svfiprintf_r+0x32>
 801aa2c:	2140      	movs	r1, #64	; 0x40
 801aa2e:	f7ff fa91 	bl	8019f54 <_malloc_r>
 801aa32:	6028      	str	r0, [r5, #0]
 801aa34:	6128      	str	r0, [r5, #16]
 801aa36:	b920      	cbnz	r0, 801aa42 <_svfiprintf_r+0x2e>
 801aa38:	230c      	movs	r3, #12
 801aa3a:	603b      	str	r3, [r7, #0]
 801aa3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aa40:	e0d0      	b.n	801abe4 <_svfiprintf_r+0x1d0>
 801aa42:	2340      	movs	r3, #64	; 0x40
 801aa44:	616b      	str	r3, [r5, #20]
 801aa46:	2300      	movs	r3, #0
 801aa48:	9309      	str	r3, [sp, #36]	; 0x24
 801aa4a:	2320      	movs	r3, #32
 801aa4c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801aa50:	f8cd 800c 	str.w	r8, [sp, #12]
 801aa54:	2330      	movs	r3, #48	; 0x30
 801aa56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801abfc <_svfiprintf_r+0x1e8>
 801aa5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801aa5e:	f04f 0901 	mov.w	r9, #1
 801aa62:	4623      	mov	r3, r4
 801aa64:	469a      	mov	sl, r3
 801aa66:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aa6a:	b10a      	cbz	r2, 801aa70 <_svfiprintf_r+0x5c>
 801aa6c:	2a25      	cmp	r2, #37	; 0x25
 801aa6e:	d1f9      	bne.n	801aa64 <_svfiprintf_r+0x50>
 801aa70:	ebba 0b04 	subs.w	fp, sl, r4
 801aa74:	d00b      	beq.n	801aa8e <_svfiprintf_r+0x7a>
 801aa76:	465b      	mov	r3, fp
 801aa78:	4622      	mov	r2, r4
 801aa7a:	4629      	mov	r1, r5
 801aa7c:	4638      	mov	r0, r7
 801aa7e:	f7ff ff6f 	bl	801a960 <__ssputs_r>
 801aa82:	3001      	adds	r0, #1
 801aa84:	f000 80a9 	beq.w	801abda <_svfiprintf_r+0x1c6>
 801aa88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aa8a:	445a      	add	r2, fp
 801aa8c:	9209      	str	r2, [sp, #36]	; 0x24
 801aa8e:	f89a 3000 	ldrb.w	r3, [sl]
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	f000 80a1 	beq.w	801abda <_svfiprintf_r+0x1c6>
 801aa98:	2300      	movs	r3, #0
 801aa9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801aa9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801aaa2:	f10a 0a01 	add.w	sl, sl, #1
 801aaa6:	9304      	str	r3, [sp, #16]
 801aaa8:	9307      	str	r3, [sp, #28]
 801aaaa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801aaae:	931a      	str	r3, [sp, #104]	; 0x68
 801aab0:	4654      	mov	r4, sl
 801aab2:	2205      	movs	r2, #5
 801aab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aab8:	4850      	ldr	r0, [pc, #320]	; (801abfc <_svfiprintf_r+0x1e8>)
 801aaba:	f7e5 fbd1 	bl	8000260 <memchr>
 801aabe:	9a04      	ldr	r2, [sp, #16]
 801aac0:	b9d8      	cbnz	r0, 801aafa <_svfiprintf_r+0xe6>
 801aac2:	06d0      	lsls	r0, r2, #27
 801aac4:	bf44      	itt	mi
 801aac6:	2320      	movmi	r3, #32
 801aac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aacc:	0711      	lsls	r1, r2, #28
 801aace:	bf44      	itt	mi
 801aad0:	232b      	movmi	r3, #43	; 0x2b
 801aad2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801aad6:	f89a 3000 	ldrb.w	r3, [sl]
 801aada:	2b2a      	cmp	r3, #42	; 0x2a
 801aadc:	d015      	beq.n	801ab0a <_svfiprintf_r+0xf6>
 801aade:	9a07      	ldr	r2, [sp, #28]
 801aae0:	4654      	mov	r4, sl
 801aae2:	2000      	movs	r0, #0
 801aae4:	f04f 0c0a 	mov.w	ip, #10
 801aae8:	4621      	mov	r1, r4
 801aaea:	f811 3b01 	ldrb.w	r3, [r1], #1
 801aaee:	3b30      	subs	r3, #48	; 0x30
 801aaf0:	2b09      	cmp	r3, #9
 801aaf2:	d94d      	bls.n	801ab90 <_svfiprintf_r+0x17c>
 801aaf4:	b1b0      	cbz	r0, 801ab24 <_svfiprintf_r+0x110>
 801aaf6:	9207      	str	r2, [sp, #28]
 801aaf8:	e014      	b.n	801ab24 <_svfiprintf_r+0x110>
 801aafa:	eba0 0308 	sub.w	r3, r0, r8
 801aafe:	fa09 f303 	lsl.w	r3, r9, r3
 801ab02:	4313      	orrs	r3, r2
 801ab04:	9304      	str	r3, [sp, #16]
 801ab06:	46a2      	mov	sl, r4
 801ab08:	e7d2      	b.n	801aab0 <_svfiprintf_r+0x9c>
 801ab0a:	9b03      	ldr	r3, [sp, #12]
 801ab0c:	1d19      	adds	r1, r3, #4
 801ab0e:	681b      	ldr	r3, [r3, #0]
 801ab10:	9103      	str	r1, [sp, #12]
 801ab12:	2b00      	cmp	r3, #0
 801ab14:	bfbb      	ittet	lt
 801ab16:	425b      	neglt	r3, r3
 801ab18:	f042 0202 	orrlt.w	r2, r2, #2
 801ab1c:	9307      	strge	r3, [sp, #28]
 801ab1e:	9307      	strlt	r3, [sp, #28]
 801ab20:	bfb8      	it	lt
 801ab22:	9204      	strlt	r2, [sp, #16]
 801ab24:	7823      	ldrb	r3, [r4, #0]
 801ab26:	2b2e      	cmp	r3, #46	; 0x2e
 801ab28:	d10c      	bne.n	801ab44 <_svfiprintf_r+0x130>
 801ab2a:	7863      	ldrb	r3, [r4, #1]
 801ab2c:	2b2a      	cmp	r3, #42	; 0x2a
 801ab2e:	d134      	bne.n	801ab9a <_svfiprintf_r+0x186>
 801ab30:	9b03      	ldr	r3, [sp, #12]
 801ab32:	1d1a      	adds	r2, r3, #4
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	9203      	str	r2, [sp, #12]
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	bfb8      	it	lt
 801ab3c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801ab40:	3402      	adds	r4, #2
 801ab42:	9305      	str	r3, [sp, #20]
 801ab44:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801ac0c <_svfiprintf_r+0x1f8>
 801ab48:	7821      	ldrb	r1, [r4, #0]
 801ab4a:	2203      	movs	r2, #3
 801ab4c:	4650      	mov	r0, sl
 801ab4e:	f7e5 fb87 	bl	8000260 <memchr>
 801ab52:	b138      	cbz	r0, 801ab64 <_svfiprintf_r+0x150>
 801ab54:	9b04      	ldr	r3, [sp, #16]
 801ab56:	eba0 000a 	sub.w	r0, r0, sl
 801ab5a:	2240      	movs	r2, #64	; 0x40
 801ab5c:	4082      	lsls	r2, r0
 801ab5e:	4313      	orrs	r3, r2
 801ab60:	3401      	adds	r4, #1
 801ab62:	9304      	str	r3, [sp, #16]
 801ab64:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ab68:	4825      	ldr	r0, [pc, #148]	; (801ac00 <_svfiprintf_r+0x1ec>)
 801ab6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ab6e:	2206      	movs	r2, #6
 801ab70:	f7e5 fb76 	bl	8000260 <memchr>
 801ab74:	2800      	cmp	r0, #0
 801ab76:	d038      	beq.n	801abea <_svfiprintf_r+0x1d6>
 801ab78:	4b22      	ldr	r3, [pc, #136]	; (801ac04 <_svfiprintf_r+0x1f0>)
 801ab7a:	bb1b      	cbnz	r3, 801abc4 <_svfiprintf_r+0x1b0>
 801ab7c:	9b03      	ldr	r3, [sp, #12]
 801ab7e:	3307      	adds	r3, #7
 801ab80:	f023 0307 	bic.w	r3, r3, #7
 801ab84:	3308      	adds	r3, #8
 801ab86:	9303      	str	r3, [sp, #12]
 801ab88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab8a:	4433      	add	r3, r6
 801ab8c:	9309      	str	r3, [sp, #36]	; 0x24
 801ab8e:	e768      	b.n	801aa62 <_svfiprintf_r+0x4e>
 801ab90:	fb0c 3202 	mla	r2, ip, r2, r3
 801ab94:	460c      	mov	r4, r1
 801ab96:	2001      	movs	r0, #1
 801ab98:	e7a6      	b.n	801aae8 <_svfiprintf_r+0xd4>
 801ab9a:	2300      	movs	r3, #0
 801ab9c:	3401      	adds	r4, #1
 801ab9e:	9305      	str	r3, [sp, #20]
 801aba0:	4619      	mov	r1, r3
 801aba2:	f04f 0c0a 	mov.w	ip, #10
 801aba6:	4620      	mov	r0, r4
 801aba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801abac:	3a30      	subs	r2, #48	; 0x30
 801abae:	2a09      	cmp	r2, #9
 801abb0:	d903      	bls.n	801abba <_svfiprintf_r+0x1a6>
 801abb2:	2b00      	cmp	r3, #0
 801abb4:	d0c6      	beq.n	801ab44 <_svfiprintf_r+0x130>
 801abb6:	9105      	str	r1, [sp, #20]
 801abb8:	e7c4      	b.n	801ab44 <_svfiprintf_r+0x130>
 801abba:	fb0c 2101 	mla	r1, ip, r1, r2
 801abbe:	4604      	mov	r4, r0
 801abc0:	2301      	movs	r3, #1
 801abc2:	e7f0      	b.n	801aba6 <_svfiprintf_r+0x192>
 801abc4:	ab03      	add	r3, sp, #12
 801abc6:	9300      	str	r3, [sp, #0]
 801abc8:	462a      	mov	r2, r5
 801abca:	4b0f      	ldr	r3, [pc, #60]	; (801ac08 <_svfiprintf_r+0x1f4>)
 801abcc:	a904      	add	r1, sp, #16
 801abce:	4638      	mov	r0, r7
 801abd0:	f3af 8000 	nop.w
 801abd4:	1c42      	adds	r2, r0, #1
 801abd6:	4606      	mov	r6, r0
 801abd8:	d1d6      	bne.n	801ab88 <_svfiprintf_r+0x174>
 801abda:	89ab      	ldrh	r3, [r5, #12]
 801abdc:	065b      	lsls	r3, r3, #25
 801abde:	f53f af2d 	bmi.w	801aa3c <_svfiprintf_r+0x28>
 801abe2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801abe4:	b01d      	add	sp, #116	; 0x74
 801abe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abea:	ab03      	add	r3, sp, #12
 801abec:	9300      	str	r3, [sp, #0]
 801abee:	462a      	mov	r2, r5
 801abf0:	4b05      	ldr	r3, [pc, #20]	; (801ac08 <_svfiprintf_r+0x1f4>)
 801abf2:	a904      	add	r1, sp, #16
 801abf4:	4638      	mov	r0, r7
 801abf6:	f000 f879 	bl	801acec <_printf_i>
 801abfa:	e7eb      	b.n	801abd4 <_svfiprintf_r+0x1c0>
 801abfc:	0801d1ac 	.word	0x0801d1ac
 801ac00:	0801d1b6 	.word	0x0801d1b6
 801ac04:	00000000 	.word	0x00000000
 801ac08:	0801a961 	.word	0x0801a961
 801ac0c:	0801d1b2 	.word	0x0801d1b2

0801ac10 <_printf_common>:
 801ac10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac14:	4616      	mov	r6, r2
 801ac16:	4699      	mov	r9, r3
 801ac18:	688a      	ldr	r2, [r1, #8]
 801ac1a:	690b      	ldr	r3, [r1, #16]
 801ac1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ac20:	4293      	cmp	r3, r2
 801ac22:	bfb8      	it	lt
 801ac24:	4613      	movlt	r3, r2
 801ac26:	6033      	str	r3, [r6, #0]
 801ac28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ac2c:	4607      	mov	r7, r0
 801ac2e:	460c      	mov	r4, r1
 801ac30:	b10a      	cbz	r2, 801ac36 <_printf_common+0x26>
 801ac32:	3301      	adds	r3, #1
 801ac34:	6033      	str	r3, [r6, #0]
 801ac36:	6823      	ldr	r3, [r4, #0]
 801ac38:	0699      	lsls	r1, r3, #26
 801ac3a:	bf42      	ittt	mi
 801ac3c:	6833      	ldrmi	r3, [r6, #0]
 801ac3e:	3302      	addmi	r3, #2
 801ac40:	6033      	strmi	r3, [r6, #0]
 801ac42:	6825      	ldr	r5, [r4, #0]
 801ac44:	f015 0506 	ands.w	r5, r5, #6
 801ac48:	d106      	bne.n	801ac58 <_printf_common+0x48>
 801ac4a:	f104 0a19 	add.w	sl, r4, #25
 801ac4e:	68e3      	ldr	r3, [r4, #12]
 801ac50:	6832      	ldr	r2, [r6, #0]
 801ac52:	1a9b      	subs	r3, r3, r2
 801ac54:	42ab      	cmp	r3, r5
 801ac56:	dc26      	bgt.n	801aca6 <_printf_common+0x96>
 801ac58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ac5c:	1e13      	subs	r3, r2, #0
 801ac5e:	6822      	ldr	r2, [r4, #0]
 801ac60:	bf18      	it	ne
 801ac62:	2301      	movne	r3, #1
 801ac64:	0692      	lsls	r2, r2, #26
 801ac66:	d42b      	bmi.n	801acc0 <_printf_common+0xb0>
 801ac68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ac6c:	4649      	mov	r1, r9
 801ac6e:	4638      	mov	r0, r7
 801ac70:	47c0      	blx	r8
 801ac72:	3001      	adds	r0, #1
 801ac74:	d01e      	beq.n	801acb4 <_printf_common+0xa4>
 801ac76:	6823      	ldr	r3, [r4, #0]
 801ac78:	6922      	ldr	r2, [r4, #16]
 801ac7a:	f003 0306 	and.w	r3, r3, #6
 801ac7e:	2b04      	cmp	r3, #4
 801ac80:	bf02      	ittt	eq
 801ac82:	68e5      	ldreq	r5, [r4, #12]
 801ac84:	6833      	ldreq	r3, [r6, #0]
 801ac86:	1aed      	subeq	r5, r5, r3
 801ac88:	68a3      	ldr	r3, [r4, #8]
 801ac8a:	bf0c      	ite	eq
 801ac8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ac90:	2500      	movne	r5, #0
 801ac92:	4293      	cmp	r3, r2
 801ac94:	bfc4      	itt	gt
 801ac96:	1a9b      	subgt	r3, r3, r2
 801ac98:	18ed      	addgt	r5, r5, r3
 801ac9a:	2600      	movs	r6, #0
 801ac9c:	341a      	adds	r4, #26
 801ac9e:	42b5      	cmp	r5, r6
 801aca0:	d11a      	bne.n	801acd8 <_printf_common+0xc8>
 801aca2:	2000      	movs	r0, #0
 801aca4:	e008      	b.n	801acb8 <_printf_common+0xa8>
 801aca6:	2301      	movs	r3, #1
 801aca8:	4652      	mov	r2, sl
 801acaa:	4649      	mov	r1, r9
 801acac:	4638      	mov	r0, r7
 801acae:	47c0      	blx	r8
 801acb0:	3001      	adds	r0, #1
 801acb2:	d103      	bne.n	801acbc <_printf_common+0xac>
 801acb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801acb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801acbc:	3501      	adds	r5, #1
 801acbe:	e7c6      	b.n	801ac4e <_printf_common+0x3e>
 801acc0:	18e1      	adds	r1, r4, r3
 801acc2:	1c5a      	adds	r2, r3, #1
 801acc4:	2030      	movs	r0, #48	; 0x30
 801acc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801acca:	4422      	add	r2, r4
 801accc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801acd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801acd4:	3302      	adds	r3, #2
 801acd6:	e7c7      	b.n	801ac68 <_printf_common+0x58>
 801acd8:	2301      	movs	r3, #1
 801acda:	4622      	mov	r2, r4
 801acdc:	4649      	mov	r1, r9
 801acde:	4638      	mov	r0, r7
 801ace0:	47c0      	blx	r8
 801ace2:	3001      	adds	r0, #1
 801ace4:	d0e6      	beq.n	801acb4 <_printf_common+0xa4>
 801ace6:	3601      	adds	r6, #1
 801ace8:	e7d9      	b.n	801ac9e <_printf_common+0x8e>
	...

0801acec <_printf_i>:
 801acec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801acf0:	7e0f      	ldrb	r7, [r1, #24]
 801acf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801acf4:	2f78      	cmp	r7, #120	; 0x78
 801acf6:	4691      	mov	r9, r2
 801acf8:	4680      	mov	r8, r0
 801acfa:	460c      	mov	r4, r1
 801acfc:	469a      	mov	sl, r3
 801acfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ad02:	d807      	bhi.n	801ad14 <_printf_i+0x28>
 801ad04:	2f62      	cmp	r7, #98	; 0x62
 801ad06:	d80a      	bhi.n	801ad1e <_printf_i+0x32>
 801ad08:	2f00      	cmp	r7, #0
 801ad0a:	f000 80d4 	beq.w	801aeb6 <_printf_i+0x1ca>
 801ad0e:	2f58      	cmp	r7, #88	; 0x58
 801ad10:	f000 80c0 	beq.w	801ae94 <_printf_i+0x1a8>
 801ad14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ad18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ad1c:	e03a      	b.n	801ad94 <_printf_i+0xa8>
 801ad1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ad22:	2b15      	cmp	r3, #21
 801ad24:	d8f6      	bhi.n	801ad14 <_printf_i+0x28>
 801ad26:	a101      	add	r1, pc, #4	; (adr r1, 801ad2c <_printf_i+0x40>)
 801ad28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ad2c:	0801ad85 	.word	0x0801ad85
 801ad30:	0801ad99 	.word	0x0801ad99
 801ad34:	0801ad15 	.word	0x0801ad15
 801ad38:	0801ad15 	.word	0x0801ad15
 801ad3c:	0801ad15 	.word	0x0801ad15
 801ad40:	0801ad15 	.word	0x0801ad15
 801ad44:	0801ad99 	.word	0x0801ad99
 801ad48:	0801ad15 	.word	0x0801ad15
 801ad4c:	0801ad15 	.word	0x0801ad15
 801ad50:	0801ad15 	.word	0x0801ad15
 801ad54:	0801ad15 	.word	0x0801ad15
 801ad58:	0801ae9d 	.word	0x0801ae9d
 801ad5c:	0801adc5 	.word	0x0801adc5
 801ad60:	0801ae57 	.word	0x0801ae57
 801ad64:	0801ad15 	.word	0x0801ad15
 801ad68:	0801ad15 	.word	0x0801ad15
 801ad6c:	0801aebf 	.word	0x0801aebf
 801ad70:	0801ad15 	.word	0x0801ad15
 801ad74:	0801adc5 	.word	0x0801adc5
 801ad78:	0801ad15 	.word	0x0801ad15
 801ad7c:	0801ad15 	.word	0x0801ad15
 801ad80:	0801ae5f 	.word	0x0801ae5f
 801ad84:	682b      	ldr	r3, [r5, #0]
 801ad86:	1d1a      	adds	r2, r3, #4
 801ad88:	681b      	ldr	r3, [r3, #0]
 801ad8a:	602a      	str	r2, [r5, #0]
 801ad8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ad90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ad94:	2301      	movs	r3, #1
 801ad96:	e09f      	b.n	801aed8 <_printf_i+0x1ec>
 801ad98:	6820      	ldr	r0, [r4, #0]
 801ad9a:	682b      	ldr	r3, [r5, #0]
 801ad9c:	0607      	lsls	r7, r0, #24
 801ad9e:	f103 0104 	add.w	r1, r3, #4
 801ada2:	6029      	str	r1, [r5, #0]
 801ada4:	d501      	bpl.n	801adaa <_printf_i+0xbe>
 801ada6:	681e      	ldr	r6, [r3, #0]
 801ada8:	e003      	b.n	801adb2 <_printf_i+0xc6>
 801adaa:	0646      	lsls	r6, r0, #25
 801adac:	d5fb      	bpl.n	801ada6 <_printf_i+0xba>
 801adae:	f9b3 6000 	ldrsh.w	r6, [r3]
 801adb2:	2e00      	cmp	r6, #0
 801adb4:	da03      	bge.n	801adbe <_printf_i+0xd2>
 801adb6:	232d      	movs	r3, #45	; 0x2d
 801adb8:	4276      	negs	r6, r6
 801adba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801adbe:	485a      	ldr	r0, [pc, #360]	; (801af28 <_printf_i+0x23c>)
 801adc0:	230a      	movs	r3, #10
 801adc2:	e012      	b.n	801adea <_printf_i+0xfe>
 801adc4:	682b      	ldr	r3, [r5, #0]
 801adc6:	6820      	ldr	r0, [r4, #0]
 801adc8:	1d19      	adds	r1, r3, #4
 801adca:	6029      	str	r1, [r5, #0]
 801adcc:	0605      	lsls	r5, r0, #24
 801adce:	d501      	bpl.n	801add4 <_printf_i+0xe8>
 801add0:	681e      	ldr	r6, [r3, #0]
 801add2:	e002      	b.n	801adda <_printf_i+0xee>
 801add4:	0641      	lsls	r1, r0, #25
 801add6:	d5fb      	bpl.n	801add0 <_printf_i+0xe4>
 801add8:	881e      	ldrh	r6, [r3, #0]
 801adda:	4853      	ldr	r0, [pc, #332]	; (801af28 <_printf_i+0x23c>)
 801addc:	2f6f      	cmp	r7, #111	; 0x6f
 801adde:	bf0c      	ite	eq
 801ade0:	2308      	moveq	r3, #8
 801ade2:	230a      	movne	r3, #10
 801ade4:	2100      	movs	r1, #0
 801ade6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801adea:	6865      	ldr	r5, [r4, #4]
 801adec:	60a5      	str	r5, [r4, #8]
 801adee:	2d00      	cmp	r5, #0
 801adf0:	bfa2      	ittt	ge
 801adf2:	6821      	ldrge	r1, [r4, #0]
 801adf4:	f021 0104 	bicge.w	r1, r1, #4
 801adf8:	6021      	strge	r1, [r4, #0]
 801adfa:	b90e      	cbnz	r6, 801ae00 <_printf_i+0x114>
 801adfc:	2d00      	cmp	r5, #0
 801adfe:	d04b      	beq.n	801ae98 <_printf_i+0x1ac>
 801ae00:	4615      	mov	r5, r2
 801ae02:	fbb6 f1f3 	udiv	r1, r6, r3
 801ae06:	fb03 6711 	mls	r7, r3, r1, r6
 801ae0a:	5dc7      	ldrb	r7, [r0, r7]
 801ae0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801ae10:	4637      	mov	r7, r6
 801ae12:	42bb      	cmp	r3, r7
 801ae14:	460e      	mov	r6, r1
 801ae16:	d9f4      	bls.n	801ae02 <_printf_i+0x116>
 801ae18:	2b08      	cmp	r3, #8
 801ae1a:	d10b      	bne.n	801ae34 <_printf_i+0x148>
 801ae1c:	6823      	ldr	r3, [r4, #0]
 801ae1e:	07de      	lsls	r6, r3, #31
 801ae20:	d508      	bpl.n	801ae34 <_printf_i+0x148>
 801ae22:	6923      	ldr	r3, [r4, #16]
 801ae24:	6861      	ldr	r1, [r4, #4]
 801ae26:	4299      	cmp	r1, r3
 801ae28:	bfde      	ittt	le
 801ae2a:	2330      	movle	r3, #48	; 0x30
 801ae2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ae30:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801ae34:	1b52      	subs	r2, r2, r5
 801ae36:	6122      	str	r2, [r4, #16]
 801ae38:	f8cd a000 	str.w	sl, [sp]
 801ae3c:	464b      	mov	r3, r9
 801ae3e:	aa03      	add	r2, sp, #12
 801ae40:	4621      	mov	r1, r4
 801ae42:	4640      	mov	r0, r8
 801ae44:	f7ff fee4 	bl	801ac10 <_printf_common>
 801ae48:	3001      	adds	r0, #1
 801ae4a:	d14a      	bne.n	801aee2 <_printf_i+0x1f6>
 801ae4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ae50:	b004      	add	sp, #16
 801ae52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae56:	6823      	ldr	r3, [r4, #0]
 801ae58:	f043 0320 	orr.w	r3, r3, #32
 801ae5c:	6023      	str	r3, [r4, #0]
 801ae5e:	4833      	ldr	r0, [pc, #204]	; (801af2c <_printf_i+0x240>)
 801ae60:	2778      	movs	r7, #120	; 0x78
 801ae62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ae66:	6823      	ldr	r3, [r4, #0]
 801ae68:	6829      	ldr	r1, [r5, #0]
 801ae6a:	061f      	lsls	r7, r3, #24
 801ae6c:	f851 6b04 	ldr.w	r6, [r1], #4
 801ae70:	d402      	bmi.n	801ae78 <_printf_i+0x18c>
 801ae72:	065f      	lsls	r7, r3, #25
 801ae74:	bf48      	it	mi
 801ae76:	b2b6      	uxthmi	r6, r6
 801ae78:	07df      	lsls	r7, r3, #31
 801ae7a:	bf48      	it	mi
 801ae7c:	f043 0320 	orrmi.w	r3, r3, #32
 801ae80:	6029      	str	r1, [r5, #0]
 801ae82:	bf48      	it	mi
 801ae84:	6023      	strmi	r3, [r4, #0]
 801ae86:	b91e      	cbnz	r6, 801ae90 <_printf_i+0x1a4>
 801ae88:	6823      	ldr	r3, [r4, #0]
 801ae8a:	f023 0320 	bic.w	r3, r3, #32
 801ae8e:	6023      	str	r3, [r4, #0]
 801ae90:	2310      	movs	r3, #16
 801ae92:	e7a7      	b.n	801ade4 <_printf_i+0xf8>
 801ae94:	4824      	ldr	r0, [pc, #144]	; (801af28 <_printf_i+0x23c>)
 801ae96:	e7e4      	b.n	801ae62 <_printf_i+0x176>
 801ae98:	4615      	mov	r5, r2
 801ae9a:	e7bd      	b.n	801ae18 <_printf_i+0x12c>
 801ae9c:	682b      	ldr	r3, [r5, #0]
 801ae9e:	6826      	ldr	r6, [r4, #0]
 801aea0:	6961      	ldr	r1, [r4, #20]
 801aea2:	1d18      	adds	r0, r3, #4
 801aea4:	6028      	str	r0, [r5, #0]
 801aea6:	0635      	lsls	r5, r6, #24
 801aea8:	681b      	ldr	r3, [r3, #0]
 801aeaa:	d501      	bpl.n	801aeb0 <_printf_i+0x1c4>
 801aeac:	6019      	str	r1, [r3, #0]
 801aeae:	e002      	b.n	801aeb6 <_printf_i+0x1ca>
 801aeb0:	0670      	lsls	r0, r6, #25
 801aeb2:	d5fb      	bpl.n	801aeac <_printf_i+0x1c0>
 801aeb4:	8019      	strh	r1, [r3, #0]
 801aeb6:	2300      	movs	r3, #0
 801aeb8:	6123      	str	r3, [r4, #16]
 801aeba:	4615      	mov	r5, r2
 801aebc:	e7bc      	b.n	801ae38 <_printf_i+0x14c>
 801aebe:	682b      	ldr	r3, [r5, #0]
 801aec0:	1d1a      	adds	r2, r3, #4
 801aec2:	602a      	str	r2, [r5, #0]
 801aec4:	681d      	ldr	r5, [r3, #0]
 801aec6:	6862      	ldr	r2, [r4, #4]
 801aec8:	2100      	movs	r1, #0
 801aeca:	4628      	mov	r0, r5
 801aecc:	f7e5 f9c8 	bl	8000260 <memchr>
 801aed0:	b108      	cbz	r0, 801aed6 <_printf_i+0x1ea>
 801aed2:	1b40      	subs	r0, r0, r5
 801aed4:	6060      	str	r0, [r4, #4]
 801aed6:	6863      	ldr	r3, [r4, #4]
 801aed8:	6123      	str	r3, [r4, #16]
 801aeda:	2300      	movs	r3, #0
 801aedc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aee0:	e7aa      	b.n	801ae38 <_printf_i+0x14c>
 801aee2:	6923      	ldr	r3, [r4, #16]
 801aee4:	462a      	mov	r2, r5
 801aee6:	4649      	mov	r1, r9
 801aee8:	4640      	mov	r0, r8
 801aeea:	47d0      	blx	sl
 801aeec:	3001      	adds	r0, #1
 801aeee:	d0ad      	beq.n	801ae4c <_printf_i+0x160>
 801aef0:	6823      	ldr	r3, [r4, #0]
 801aef2:	079b      	lsls	r3, r3, #30
 801aef4:	d413      	bmi.n	801af1e <_printf_i+0x232>
 801aef6:	68e0      	ldr	r0, [r4, #12]
 801aef8:	9b03      	ldr	r3, [sp, #12]
 801aefa:	4298      	cmp	r0, r3
 801aefc:	bfb8      	it	lt
 801aefe:	4618      	movlt	r0, r3
 801af00:	e7a6      	b.n	801ae50 <_printf_i+0x164>
 801af02:	2301      	movs	r3, #1
 801af04:	4632      	mov	r2, r6
 801af06:	4649      	mov	r1, r9
 801af08:	4640      	mov	r0, r8
 801af0a:	47d0      	blx	sl
 801af0c:	3001      	adds	r0, #1
 801af0e:	d09d      	beq.n	801ae4c <_printf_i+0x160>
 801af10:	3501      	adds	r5, #1
 801af12:	68e3      	ldr	r3, [r4, #12]
 801af14:	9903      	ldr	r1, [sp, #12]
 801af16:	1a5b      	subs	r3, r3, r1
 801af18:	42ab      	cmp	r3, r5
 801af1a:	dcf2      	bgt.n	801af02 <_printf_i+0x216>
 801af1c:	e7eb      	b.n	801aef6 <_printf_i+0x20a>
 801af1e:	2500      	movs	r5, #0
 801af20:	f104 0619 	add.w	r6, r4, #25
 801af24:	e7f5      	b.n	801af12 <_printf_i+0x226>
 801af26:	bf00      	nop
 801af28:	0801d1bd 	.word	0x0801d1bd
 801af2c:	0801d1ce 	.word	0x0801d1ce

0801af30 <__sflush_r>:
 801af30:	898a      	ldrh	r2, [r1, #12]
 801af32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af36:	4605      	mov	r5, r0
 801af38:	0710      	lsls	r0, r2, #28
 801af3a:	460c      	mov	r4, r1
 801af3c:	d458      	bmi.n	801aff0 <__sflush_r+0xc0>
 801af3e:	684b      	ldr	r3, [r1, #4]
 801af40:	2b00      	cmp	r3, #0
 801af42:	dc05      	bgt.n	801af50 <__sflush_r+0x20>
 801af44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801af46:	2b00      	cmp	r3, #0
 801af48:	dc02      	bgt.n	801af50 <__sflush_r+0x20>
 801af4a:	2000      	movs	r0, #0
 801af4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801af52:	2e00      	cmp	r6, #0
 801af54:	d0f9      	beq.n	801af4a <__sflush_r+0x1a>
 801af56:	2300      	movs	r3, #0
 801af58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801af5c:	682f      	ldr	r7, [r5, #0]
 801af5e:	6a21      	ldr	r1, [r4, #32]
 801af60:	602b      	str	r3, [r5, #0]
 801af62:	d032      	beq.n	801afca <__sflush_r+0x9a>
 801af64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801af66:	89a3      	ldrh	r3, [r4, #12]
 801af68:	075a      	lsls	r2, r3, #29
 801af6a:	d505      	bpl.n	801af78 <__sflush_r+0x48>
 801af6c:	6863      	ldr	r3, [r4, #4]
 801af6e:	1ac0      	subs	r0, r0, r3
 801af70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801af72:	b10b      	cbz	r3, 801af78 <__sflush_r+0x48>
 801af74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801af76:	1ac0      	subs	r0, r0, r3
 801af78:	2300      	movs	r3, #0
 801af7a:	4602      	mov	r2, r0
 801af7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801af7e:	6a21      	ldr	r1, [r4, #32]
 801af80:	4628      	mov	r0, r5
 801af82:	47b0      	blx	r6
 801af84:	1c43      	adds	r3, r0, #1
 801af86:	89a3      	ldrh	r3, [r4, #12]
 801af88:	d106      	bne.n	801af98 <__sflush_r+0x68>
 801af8a:	6829      	ldr	r1, [r5, #0]
 801af8c:	291d      	cmp	r1, #29
 801af8e:	d82b      	bhi.n	801afe8 <__sflush_r+0xb8>
 801af90:	4a29      	ldr	r2, [pc, #164]	; (801b038 <__sflush_r+0x108>)
 801af92:	410a      	asrs	r2, r1
 801af94:	07d6      	lsls	r6, r2, #31
 801af96:	d427      	bmi.n	801afe8 <__sflush_r+0xb8>
 801af98:	2200      	movs	r2, #0
 801af9a:	6062      	str	r2, [r4, #4]
 801af9c:	04d9      	lsls	r1, r3, #19
 801af9e:	6922      	ldr	r2, [r4, #16]
 801afa0:	6022      	str	r2, [r4, #0]
 801afa2:	d504      	bpl.n	801afae <__sflush_r+0x7e>
 801afa4:	1c42      	adds	r2, r0, #1
 801afa6:	d101      	bne.n	801afac <__sflush_r+0x7c>
 801afa8:	682b      	ldr	r3, [r5, #0]
 801afaa:	b903      	cbnz	r3, 801afae <__sflush_r+0x7e>
 801afac:	6560      	str	r0, [r4, #84]	; 0x54
 801afae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801afb0:	602f      	str	r7, [r5, #0]
 801afb2:	2900      	cmp	r1, #0
 801afb4:	d0c9      	beq.n	801af4a <__sflush_r+0x1a>
 801afb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801afba:	4299      	cmp	r1, r3
 801afbc:	d002      	beq.n	801afc4 <__sflush_r+0x94>
 801afbe:	4628      	mov	r0, r5
 801afc0:	f7ff fc7a 	bl	801a8b8 <_free_r>
 801afc4:	2000      	movs	r0, #0
 801afc6:	6360      	str	r0, [r4, #52]	; 0x34
 801afc8:	e7c0      	b.n	801af4c <__sflush_r+0x1c>
 801afca:	2301      	movs	r3, #1
 801afcc:	4628      	mov	r0, r5
 801afce:	47b0      	blx	r6
 801afd0:	1c41      	adds	r1, r0, #1
 801afd2:	d1c8      	bne.n	801af66 <__sflush_r+0x36>
 801afd4:	682b      	ldr	r3, [r5, #0]
 801afd6:	2b00      	cmp	r3, #0
 801afd8:	d0c5      	beq.n	801af66 <__sflush_r+0x36>
 801afda:	2b1d      	cmp	r3, #29
 801afdc:	d001      	beq.n	801afe2 <__sflush_r+0xb2>
 801afde:	2b16      	cmp	r3, #22
 801afe0:	d101      	bne.n	801afe6 <__sflush_r+0xb6>
 801afe2:	602f      	str	r7, [r5, #0]
 801afe4:	e7b1      	b.n	801af4a <__sflush_r+0x1a>
 801afe6:	89a3      	ldrh	r3, [r4, #12]
 801afe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801afec:	81a3      	strh	r3, [r4, #12]
 801afee:	e7ad      	b.n	801af4c <__sflush_r+0x1c>
 801aff0:	690f      	ldr	r7, [r1, #16]
 801aff2:	2f00      	cmp	r7, #0
 801aff4:	d0a9      	beq.n	801af4a <__sflush_r+0x1a>
 801aff6:	0793      	lsls	r3, r2, #30
 801aff8:	680e      	ldr	r6, [r1, #0]
 801affa:	bf08      	it	eq
 801affc:	694b      	ldreq	r3, [r1, #20]
 801affe:	600f      	str	r7, [r1, #0]
 801b000:	bf18      	it	ne
 801b002:	2300      	movne	r3, #0
 801b004:	eba6 0807 	sub.w	r8, r6, r7
 801b008:	608b      	str	r3, [r1, #8]
 801b00a:	f1b8 0f00 	cmp.w	r8, #0
 801b00e:	dd9c      	ble.n	801af4a <__sflush_r+0x1a>
 801b010:	6a21      	ldr	r1, [r4, #32]
 801b012:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b014:	4643      	mov	r3, r8
 801b016:	463a      	mov	r2, r7
 801b018:	4628      	mov	r0, r5
 801b01a:	47b0      	blx	r6
 801b01c:	2800      	cmp	r0, #0
 801b01e:	dc06      	bgt.n	801b02e <__sflush_r+0xfe>
 801b020:	89a3      	ldrh	r3, [r4, #12]
 801b022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b026:	81a3      	strh	r3, [r4, #12]
 801b028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b02c:	e78e      	b.n	801af4c <__sflush_r+0x1c>
 801b02e:	4407      	add	r7, r0
 801b030:	eba8 0800 	sub.w	r8, r8, r0
 801b034:	e7e9      	b.n	801b00a <__sflush_r+0xda>
 801b036:	bf00      	nop
 801b038:	dfbffffe 	.word	0xdfbffffe

0801b03c <_fflush_r>:
 801b03c:	b538      	push	{r3, r4, r5, lr}
 801b03e:	690b      	ldr	r3, [r1, #16]
 801b040:	4605      	mov	r5, r0
 801b042:	460c      	mov	r4, r1
 801b044:	b913      	cbnz	r3, 801b04c <_fflush_r+0x10>
 801b046:	2500      	movs	r5, #0
 801b048:	4628      	mov	r0, r5
 801b04a:	bd38      	pop	{r3, r4, r5, pc}
 801b04c:	b118      	cbz	r0, 801b056 <_fflush_r+0x1a>
 801b04e:	6a03      	ldr	r3, [r0, #32]
 801b050:	b90b      	cbnz	r3, 801b056 <_fflush_r+0x1a>
 801b052:	f7ff f9b7 	bl	801a3c4 <__sinit>
 801b056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d0f3      	beq.n	801b046 <_fflush_r+0xa>
 801b05e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b060:	07d0      	lsls	r0, r2, #31
 801b062:	d404      	bmi.n	801b06e <_fflush_r+0x32>
 801b064:	0599      	lsls	r1, r3, #22
 801b066:	d402      	bmi.n	801b06e <_fflush_r+0x32>
 801b068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b06a:	f7ff fbe2 	bl	801a832 <__retarget_lock_acquire_recursive>
 801b06e:	4628      	mov	r0, r5
 801b070:	4621      	mov	r1, r4
 801b072:	f7ff ff5d 	bl	801af30 <__sflush_r>
 801b076:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b078:	07da      	lsls	r2, r3, #31
 801b07a:	4605      	mov	r5, r0
 801b07c:	d4e4      	bmi.n	801b048 <_fflush_r+0xc>
 801b07e:	89a3      	ldrh	r3, [r4, #12]
 801b080:	059b      	lsls	r3, r3, #22
 801b082:	d4e1      	bmi.n	801b048 <_fflush_r+0xc>
 801b084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b086:	f7ff fbd5 	bl	801a834 <__retarget_lock_release_recursive>
 801b08a:	e7dd      	b.n	801b048 <_fflush_r+0xc>

0801b08c <fiprintf>:
 801b08c:	b40e      	push	{r1, r2, r3}
 801b08e:	b503      	push	{r0, r1, lr}
 801b090:	4601      	mov	r1, r0
 801b092:	ab03      	add	r3, sp, #12
 801b094:	4805      	ldr	r0, [pc, #20]	; (801b0ac <fiprintf+0x20>)
 801b096:	f853 2b04 	ldr.w	r2, [r3], #4
 801b09a:	6800      	ldr	r0, [r0, #0]
 801b09c:	9301      	str	r3, [sp, #4]
 801b09e:	f000 f837 	bl	801b110 <_vfiprintf_r>
 801b0a2:	b002      	add	sp, #8
 801b0a4:	f85d eb04 	ldr.w	lr, [sp], #4
 801b0a8:	b003      	add	sp, #12
 801b0aa:	4770      	bx	lr
 801b0ac:	20001df0 	.word	0x20001df0

0801b0b0 <abort>:
 801b0b0:	b508      	push	{r3, lr}
 801b0b2:	2006      	movs	r0, #6
 801b0b4:	f000 fa04 	bl	801b4c0 <raise>
 801b0b8:	2001      	movs	r0, #1
 801b0ba:	f7e7 fa35 	bl	8002528 <_exit>

0801b0be <__sfputc_r>:
 801b0be:	6893      	ldr	r3, [r2, #8]
 801b0c0:	3b01      	subs	r3, #1
 801b0c2:	2b00      	cmp	r3, #0
 801b0c4:	b410      	push	{r4}
 801b0c6:	6093      	str	r3, [r2, #8]
 801b0c8:	da08      	bge.n	801b0dc <__sfputc_r+0x1e>
 801b0ca:	6994      	ldr	r4, [r2, #24]
 801b0cc:	42a3      	cmp	r3, r4
 801b0ce:	db01      	blt.n	801b0d4 <__sfputc_r+0x16>
 801b0d0:	290a      	cmp	r1, #10
 801b0d2:	d103      	bne.n	801b0dc <__sfputc_r+0x1e>
 801b0d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b0d8:	f000 b934 	b.w	801b344 <__swbuf_r>
 801b0dc:	6813      	ldr	r3, [r2, #0]
 801b0de:	1c58      	adds	r0, r3, #1
 801b0e0:	6010      	str	r0, [r2, #0]
 801b0e2:	7019      	strb	r1, [r3, #0]
 801b0e4:	4608      	mov	r0, r1
 801b0e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b0ea:	4770      	bx	lr

0801b0ec <__sfputs_r>:
 801b0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b0ee:	4606      	mov	r6, r0
 801b0f0:	460f      	mov	r7, r1
 801b0f2:	4614      	mov	r4, r2
 801b0f4:	18d5      	adds	r5, r2, r3
 801b0f6:	42ac      	cmp	r4, r5
 801b0f8:	d101      	bne.n	801b0fe <__sfputs_r+0x12>
 801b0fa:	2000      	movs	r0, #0
 801b0fc:	e007      	b.n	801b10e <__sfputs_r+0x22>
 801b0fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b102:	463a      	mov	r2, r7
 801b104:	4630      	mov	r0, r6
 801b106:	f7ff ffda 	bl	801b0be <__sfputc_r>
 801b10a:	1c43      	adds	r3, r0, #1
 801b10c:	d1f3      	bne.n	801b0f6 <__sfputs_r+0xa>
 801b10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b110 <_vfiprintf_r>:
 801b110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b114:	460d      	mov	r5, r1
 801b116:	b09d      	sub	sp, #116	; 0x74
 801b118:	4614      	mov	r4, r2
 801b11a:	4698      	mov	r8, r3
 801b11c:	4606      	mov	r6, r0
 801b11e:	b118      	cbz	r0, 801b128 <_vfiprintf_r+0x18>
 801b120:	6a03      	ldr	r3, [r0, #32]
 801b122:	b90b      	cbnz	r3, 801b128 <_vfiprintf_r+0x18>
 801b124:	f7ff f94e 	bl	801a3c4 <__sinit>
 801b128:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b12a:	07d9      	lsls	r1, r3, #31
 801b12c:	d405      	bmi.n	801b13a <_vfiprintf_r+0x2a>
 801b12e:	89ab      	ldrh	r3, [r5, #12]
 801b130:	059a      	lsls	r2, r3, #22
 801b132:	d402      	bmi.n	801b13a <_vfiprintf_r+0x2a>
 801b134:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b136:	f7ff fb7c 	bl	801a832 <__retarget_lock_acquire_recursive>
 801b13a:	89ab      	ldrh	r3, [r5, #12]
 801b13c:	071b      	lsls	r3, r3, #28
 801b13e:	d501      	bpl.n	801b144 <_vfiprintf_r+0x34>
 801b140:	692b      	ldr	r3, [r5, #16]
 801b142:	b99b      	cbnz	r3, 801b16c <_vfiprintf_r+0x5c>
 801b144:	4629      	mov	r1, r5
 801b146:	4630      	mov	r0, r6
 801b148:	f000 f93a 	bl	801b3c0 <__swsetup_r>
 801b14c:	b170      	cbz	r0, 801b16c <_vfiprintf_r+0x5c>
 801b14e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b150:	07dc      	lsls	r4, r3, #31
 801b152:	d504      	bpl.n	801b15e <_vfiprintf_r+0x4e>
 801b154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b158:	b01d      	add	sp, #116	; 0x74
 801b15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b15e:	89ab      	ldrh	r3, [r5, #12]
 801b160:	0598      	lsls	r0, r3, #22
 801b162:	d4f7      	bmi.n	801b154 <_vfiprintf_r+0x44>
 801b164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b166:	f7ff fb65 	bl	801a834 <__retarget_lock_release_recursive>
 801b16a:	e7f3      	b.n	801b154 <_vfiprintf_r+0x44>
 801b16c:	2300      	movs	r3, #0
 801b16e:	9309      	str	r3, [sp, #36]	; 0x24
 801b170:	2320      	movs	r3, #32
 801b172:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b176:	f8cd 800c 	str.w	r8, [sp, #12]
 801b17a:	2330      	movs	r3, #48	; 0x30
 801b17c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801b330 <_vfiprintf_r+0x220>
 801b180:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b184:	f04f 0901 	mov.w	r9, #1
 801b188:	4623      	mov	r3, r4
 801b18a:	469a      	mov	sl, r3
 801b18c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b190:	b10a      	cbz	r2, 801b196 <_vfiprintf_r+0x86>
 801b192:	2a25      	cmp	r2, #37	; 0x25
 801b194:	d1f9      	bne.n	801b18a <_vfiprintf_r+0x7a>
 801b196:	ebba 0b04 	subs.w	fp, sl, r4
 801b19a:	d00b      	beq.n	801b1b4 <_vfiprintf_r+0xa4>
 801b19c:	465b      	mov	r3, fp
 801b19e:	4622      	mov	r2, r4
 801b1a0:	4629      	mov	r1, r5
 801b1a2:	4630      	mov	r0, r6
 801b1a4:	f7ff ffa2 	bl	801b0ec <__sfputs_r>
 801b1a8:	3001      	adds	r0, #1
 801b1aa:	f000 80a9 	beq.w	801b300 <_vfiprintf_r+0x1f0>
 801b1ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b1b0:	445a      	add	r2, fp
 801b1b2:	9209      	str	r2, [sp, #36]	; 0x24
 801b1b4:	f89a 3000 	ldrb.w	r3, [sl]
 801b1b8:	2b00      	cmp	r3, #0
 801b1ba:	f000 80a1 	beq.w	801b300 <_vfiprintf_r+0x1f0>
 801b1be:	2300      	movs	r3, #0
 801b1c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b1c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b1c8:	f10a 0a01 	add.w	sl, sl, #1
 801b1cc:	9304      	str	r3, [sp, #16]
 801b1ce:	9307      	str	r3, [sp, #28]
 801b1d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b1d4:	931a      	str	r3, [sp, #104]	; 0x68
 801b1d6:	4654      	mov	r4, sl
 801b1d8:	2205      	movs	r2, #5
 801b1da:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b1de:	4854      	ldr	r0, [pc, #336]	; (801b330 <_vfiprintf_r+0x220>)
 801b1e0:	f7e5 f83e 	bl	8000260 <memchr>
 801b1e4:	9a04      	ldr	r2, [sp, #16]
 801b1e6:	b9d8      	cbnz	r0, 801b220 <_vfiprintf_r+0x110>
 801b1e8:	06d1      	lsls	r1, r2, #27
 801b1ea:	bf44      	itt	mi
 801b1ec:	2320      	movmi	r3, #32
 801b1ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b1f2:	0713      	lsls	r3, r2, #28
 801b1f4:	bf44      	itt	mi
 801b1f6:	232b      	movmi	r3, #43	; 0x2b
 801b1f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b1fc:	f89a 3000 	ldrb.w	r3, [sl]
 801b200:	2b2a      	cmp	r3, #42	; 0x2a
 801b202:	d015      	beq.n	801b230 <_vfiprintf_r+0x120>
 801b204:	9a07      	ldr	r2, [sp, #28]
 801b206:	4654      	mov	r4, sl
 801b208:	2000      	movs	r0, #0
 801b20a:	f04f 0c0a 	mov.w	ip, #10
 801b20e:	4621      	mov	r1, r4
 801b210:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b214:	3b30      	subs	r3, #48	; 0x30
 801b216:	2b09      	cmp	r3, #9
 801b218:	d94d      	bls.n	801b2b6 <_vfiprintf_r+0x1a6>
 801b21a:	b1b0      	cbz	r0, 801b24a <_vfiprintf_r+0x13a>
 801b21c:	9207      	str	r2, [sp, #28]
 801b21e:	e014      	b.n	801b24a <_vfiprintf_r+0x13a>
 801b220:	eba0 0308 	sub.w	r3, r0, r8
 801b224:	fa09 f303 	lsl.w	r3, r9, r3
 801b228:	4313      	orrs	r3, r2
 801b22a:	9304      	str	r3, [sp, #16]
 801b22c:	46a2      	mov	sl, r4
 801b22e:	e7d2      	b.n	801b1d6 <_vfiprintf_r+0xc6>
 801b230:	9b03      	ldr	r3, [sp, #12]
 801b232:	1d19      	adds	r1, r3, #4
 801b234:	681b      	ldr	r3, [r3, #0]
 801b236:	9103      	str	r1, [sp, #12]
 801b238:	2b00      	cmp	r3, #0
 801b23a:	bfbb      	ittet	lt
 801b23c:	425b      	neglt	r3, r3
 801b23e:	f042 0202 	orrlt.w	r2, r2, #2
 801b242:	9307      	strge	r3, [sp, #28]
 801b244:	9307      	strlt	r3, [sp, #28]
 801b246:	bfb8      	it	lt
 801b248:	9204      	strlt	r2, [sp, #16]
 801b24a:	7823      	ldrb	r3, [r4, #0]
 801b24c:	2b2e      	cmp	r3, #46	; 0x2e
 801b24e:	d10c      	bne.n	801b26a <_vfiprintf_r+0x15a>
 801b250:	7863      	ldrb	r3, [r4, #1]
 801b252:	2b2a      	cmp	r3, #42	; 0x2a
 801b254:	d134      	bne.n	801b2c0 <_vfiprintf_r+0x1b0>
 801b256:	9b03      	ldr	r3, [sp, #12]
 801b258:	1d1a      	adds	r2, r3, #4
 801b25a:	681b      	ldr	r3, [r3, #0]
 801b25c:	9203      	str	r2, [sp, #12]
 801b25e:	2b00      	cmp	r3, #0
 801b260:	bfb8      	it	lt
 801b262:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b266:	3402      	adds	r4, #2
 801b268:	9305      	str	r3, [sp, #20]
 801b26a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801b340 <_vfiprintf_r+0x230>
 801b26e:	7821      	ldrb	r1, [r4, #0]
 801b270:	2203      	movs	r2, #3
 801b272:	4650      	mov	r0, sl
 801b274:	f7e4 fff4 	bl	8000260 <memchr>
 801b278:	b138      	cbz	r0, 801b28a <_vfiprintf_r+0x17a>
 801b27a:	9b04      	ldr	r3, [sp, #16]
 801b27c:	eba0 000a 	sub.w	r0, r0, sl
 801b280:	2240      	movs	r2, #64	; 0x40
 801b282:	4082      	lsls	r2, r0
 801b284:	4313      	orrs	r3, r2
 801b286:	3401      	adds	r4, #1
 801b288:	9304      	str	r3, [sp, #16]
 801b28a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b28e:	4829      	ldr	r0, [pc, #164]	; (801b334 <_vfiprintf_r+0x224>)
 801b290:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b294:	2206      	movs	r2, #6
 801b296:	f7e4 ffe3 	bl	8000260 <memchr>
 801b29a:	2800      	cmp	r0, #0
 801b29c:	d03f      	beq.n	801b31e <_vfiprintf_r+0x20e>
 801b29e:	4b26      	ldr	r3, [pc, #152]	; (801b338 <_vfiprintf_r+0x228>)
 801b2a0:	bb1b      	cbnz	r3, 801b2ea <_vfiprintf_r+0x1da>
 801b2a2:	9b03      	ldr	r3, [sp, #12]
 801b2a4:	3307      	adds	r3, #7
 801b2a6:	f023 0307 	bic.w	r3, r3, #7
 801b2aa:	3308      	adds	r3, #8
 801b2ac:	9303      	str	r3, [sp, #12]
 801b2ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b2b0:	443b      	add	r3, r7
 801b2b2:	9309      	str	r3, [sp, #36]	; 0x24
 801b2b4:	e768      	b.n	801b188 <_vfiprintf_r+0x78>
 801b2b6:	fb0c 3202 	mla	r2, ip, r2, r3
 801b2ba:	460c      	mov	r4, r1
 801b2bc:	2001      	movs	r0, #1
 801b2be:	e7a6      	b.n	801b20e <_vfiprintf_r+0xfe>
 801b2c0:	2300      	movs	r3, #0
 801b2c2:	3401      	adds	r4, #1
 801b2c4:	9305      	str	r3, [sp, #20]
 801b2c6:	4619      	mov	r1, r3
 801b2c8:	f04f 0c0a 	mov.w	ip, #10
 801b2cc:	4620      	mov	r0, r4
 801b2ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b2d2:	3a30      	subs	r2, #48	; 0x30
 801b2d4:	2a09      	cmp	r2, #9
 801b2d6:	d903      	bls.n	801b2e0 <_vfiprintf_r+0x1d0>
 801b2d8:	2b00      	cmp	r3, #0
 801b2da:	d0c6      	beq.n	801b26a <_vfiprintf_r+0x15a>
 801b2dc:	9105      	str	r1, [sp, #20]
 801b2de:	e7c4      	b.n	801b26a <_vfiprintf_r+0x15a>
 801b2e0:	fb0c 2101 	mla	r1, ip, r1, r2
 801b2e4:	4604      	mov	r4, r0
 801b2e6:	2301      	movs	r3, #1
 801b2e8:	e7f0      	b.n	801b2cc <_vfiprintf_r+0x1bc>
 801b2ea:	ab03      	add	r3, sp, #12
 801b2ec:	9300      	str	r3, [sp, #0]
 801b2ee:	462a      	mov	r2, r5
 801b2f0:	4b12      	ldr	r3, [pc, #72]	; (801b33c <_vfiprintf_r+0x22c>)
 801b2f2:	a904      	add	r1, sp, #16
 801b2f4:	4630      	mov	r0, r6
 801b2f6:	f3af 8000 	nop.w
 801b2fa:	4607      	mov	r7, r0
 801b2fc:	1c78      	adds	r0, r7, #1
 801b2fe:	d1d6      	bne.n	801b2ae <_vfiprintf_r+0x19e>
 801b300:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b302:	07d9      	lsls	r1, r3, #31
 801b304:	d405      	bmi.n	801b312 <_vfiprintf_r+0x202>
 801b306:	89ab      	ldrh	r3, [r5, #12]
 801b308:	059a      	lsls	r2, r3, #22
 801b30a:	d402      	bmi.n	801b312 <_vfiprintf_r+0x202>
 801b30c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b30e:	f7ff fa91 	bl	801a834 <__retarget_lock_release_recursive>
 801b312:	89ab      	ldrh	r3, [r5, #12]
 801b314:	065b      	lsls	r3, r3, #25
 801b316:	f53f af1d 	bmi.w	801b154 <_vfiprintf_r+0x44>
 801b31a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b31c:	e71c      	b.n	801b158 <_vfiprintf_r+0x48>
 801b31e:	ab03      	add	r3, sp, #12
 801b320:	9300      	str	r3, [sp, #0]
 801b322:	462a      	mov	r2, r5
 801b324:	4b05      	ldr	r3, [pc, #20]	; (801b33c <_vfiprintf_r+0x22c>)
 801b326:	a904      	add	r1, sp, #16
 801b328:	4630      	mov	r0, r6
 801b32a:	f7ff fcdf 	bl	801acec <_printf_i>
 801b32e:	e7e4      	b.n	801b2fa <_vfiprintf_r+0x1ea>
 801b330:	0801d1ac 	.word	0x0801d1ac
 801b334:	0801d1b6 	.word	0x0801d1b6
 801b338:	00000000 	.word	0x00000000
 801b33c:	0801b0ed 	.word	0x0801b0ed
 801b340:	0801d1b2 	.word	0x0801d1b2

0801b344 <__swbuf_r>:
 801b344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b346:	460e      	mov	r6, r1
 801b348:	4614      	mov	r4, r2
 801b34a:	4605      	mov	r5, r0
 801b34c:	b118      	cbz	r0, 801b356 <__swbuf_r+0x12>
 801b34e:	6a03      	ldr	r3, [r0, #32]
 801b350:	b90b      	cbnz	r3, 801b356 <__swbuf_r+0x12>
 801b352:	f7ff f837 	bl	801a3c4 <__sinit>
 801b356:	69a3      	ldr	r3, [r4, #24]
 801b358:	60a3      	str	r3, [r4, #8]
 801b35a:	89a3      	ldrh	r3, [r4, #12]
 801b35c:	071a      	lsls	r2, r3, #28
 801b35e:	d525      	bpl.n	801b3ac <__swbuf_r+0x68>
 801b360:	6923      	ldr	r3, [r4, #16]
 801b362:	b31b      	cbz	r3, 801b3ac <__swbuf_r+0x68>
 801b364:	6823      	ldr	r3, [r4, #0]
 801b366:	6922      	ldr	r2, [r4, #16]
 801b368:	1a98      	subs	r0, r3, r2
 801b36a:	6963      	ldr	r3, [r4, #20]
 801b36c:	b2f6      	uxtb	r6, r6
 801b36e:	4283      	cmp	r3, r0
 801b370:	4637      	mov	r7, r6
 801b372:	dc04      	bgt.n	801b37e <__swbuf_r+0x3a>
 801b374:	4621      	mov	r1, r4
 801b376:	4628      	mov	r0, r5
 801b378:	f7ff fe60 	bl	801b03c <_fflush_r>
 801b37c:	b9e0      	cbnz	r0, 801b3b8 <__swbuf_r+0x74>
 801b37e:	68a3      	ldr	r3, [r4, #8]
 801b380:	3b01      	subs	r3, #1
 801b382:	60a3      	str	r3, [r4, #8]
 801b384:	6823      	ldr	r3, [r4, #0]
 801b386:	1c5a      	adds	r2, r3, #1
 801b388:	6022      	str	r2, [r4, #0]
 801b38a:	701e      	strb	r6, [r3, #0]
 801b38c:	6962      	ldr	r2, [r4, #20]
 801b38e:	1c43      	adds	r3, r0, #1
 801b390:	429a      	cmp	r2, r3
 801b392:	d004      	beq.n	801b39e <__swbuf_r+0x5a>
 801b394:	89a3      	ldrh	r3, [r4, #12]
 801b396:	07db      	lsls	r3, r3, #31
 801b398:	d506      	bpl.n	801b3a8 <__swbuf_r+0x64>
 801b39a:	2e0a      	cmp	r6, #10
 801b39c:	d104      	bne.n	801b3a8 <__swbuf_r+0x64>
 801b39e:	4621      	mov	r1, r4
 801b3a0:	4628      	mov	r0, r5
 801b3a2:	f7ff fe4b 	bl	801b03c <_fflush_r>
 801b3a6:	b938      	cbnz	r0, 801b3b8 <__swbuf_r+0x74>
 801b3a8:	4638      	mov	r0, r7
 801b3aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b3ac:	4621      	mov	r1, r4
 801b3ae:	4628      	mov	r0, r5
 801b3b0:	f000 f806 	bl	801b3c0 <__swsetup_r>
 801b3b4:	2800      	cmp	r0, #0
 801b3b6:	d0d5      	beq.n	801b364 <__swbuf_r+0x20>
 801b3b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801b3bc:	e7f4      	b.n	801b3a8 <__swbuf_r+0x64>
	...

0801b3c0 <__swsetup_r>:
 801b3c0:	b538      	push	{r3, r4, r5, lr}
 801b3c2:	4b2a      	ldr	r3, [pc, #168]	; (801b46c <__swsetup_r+0xac>)
 801b3c4:	4605      	mov	r5, r0
 801b3c6:	6818      	ldr	r0, [r3, #0]
 801b3c8:	460c      	mov	r4, r1
 801b3ca:	b118      	cbz	r0, 801b3d4 <__swsetup_r+0x14>
 801b3cc:	6a03      	ldr	r3, [r0, #32]
 801b3ce:	b90b      	cbnz	r3, 801b3d4 <__swsetup_r+0x14>
 801b3d0:	f7fe fff8 	bl	801a3c4 <__sinit>
 801b3d4:	89a3      	ldrh	r3, [r4, #12]
 801b3d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b3da:	0718      	lsls	r0, r3, #28
 801b3dc:	d422      	bmi.n	801b424 <__swsetup_r+0x64>
 801b3de:	06d9      	lsls	r1, r3, #27
 801b3e0:	d407      	bmi.n	801b3f2 <__swsetup_r+0x32>
 801b3e2:	2309      	movs	r3, #9
 801b3e4:	602b      	str	r3, [r5, #0]
 801b3e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b3ea:	81a3      	strh	r3, [r4, #12]
 801b3ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b3f0:	e034      	b.n	801b45c <__swsetup_r+0x9c>
 801b3f2:	0758      	lsls	r0, r3, #29
 801b3f4:	d512      	bpl.n	801b41c <__swsetup_r+0x5c>
 801b3f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b3f8:	b141      	cbz	r1, 801b40c <__swsetup_r+0x4c>
 801b3fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b3fe:	4299      	cmp	r1, r3
 801b400:	d002      	beq.n	801b408 <__swsetup_r+0x48>
 801b402:	4628      	mov	r0, r5
 801b404:	f7ff fa58 	bl	801a8b8 <_free_r>
 801b408:	2300      	movs	r3, #0
 801b40a:	6363      	str	r3, [r4, #52]	; 0x34
 801b40c:	89a3      	ldrh	r3, [r4, #12]
 801b40e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b412:	81a3      	strh	r3, [r4, #12]
 801b414:	2300      	movs	r3, #0
 801b416:	6063      	str	r3, [r4, #4]
 801b418:	6923      	ldr	r3, [r4, #16]
 801b41a:	6023      	str	r3, [r4, #0]
 801b41c:	89a3      	ldrh	r3, [r4, #12]
 801b41e:	f043 0308 	orr.w	r3, r3, #8
 801b422:	81a3      	strh	r3, [r4, #12]
 801b424:	6923      	ldr	r3, [r4, #16]
 801b426:	b94b      	cbnz	r3, 801b43c <__swsetup_r+0x7c>
 801b428:	89a3      	ldrh	r3, [r4, #12]
 801b42a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b42e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b432:	d003      	beq.n	801b43c <__swsetup_r+0x7c>
 801b434:	4621      	mov	r1, r4
 801b436:	4628      	mov	r0, r5
 801b438:	f000 f884 	bl	801b544 <__smakebuf_r>
 801b43c:	89a0      	ldrh	r0, [r4, #12]
 801b43e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b442:	f010 0301 	ands.w	r3, r0, #1
 801b446:	d00a      	beq.n	801b45e <__swsetup_r+0x9e>
 801b448:	2300      	movs	r3, #0
 801b44a:	60a3      	str	r3, [r4, #8]
 801b44c:	6963      	ldr	r3, [r4, #20]
 801b44e:	425b      	negs	r3, r3
 801b450:	61a3      	str	r3, [r4, #24]
 801b452:	6923      	ldr	r3, [r4, #16]
 801b454:	b943      	cbnz	r3, 801b468 <__swsetup_r+0xa8>
 801b456:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b45a:	d1c4      	bne.n	801b3e6 <__swsetup_r+0x26>
 801b45c:	bd38      	pop	{r3, r4, r5, pc}
 801b45e:	0781      	lsls	r1, r0, #30
 801b460:	bf58      	it	pl
 801b462:	6963      	ldrpl	r3, [r4, #20]
 801b464:	60a3      	str	r3, [r4, #8]
 801b466:	e7f4      	b.n	801b452 <__swsetup_r+0x92>
 801b468:	2000      	movs	r0, #0
 801b46a:	e7f7      	b.n	801b45c <__swsetup_r+0x9c>
 801b46c:	20001df0 	.word	0x20001df0

0801b470 <_raise_r>:
 801b470:	291f      	cmp	r1, #31
 801b472:	b538      	push	{r3, r4, r5, lr}
 801b474:	4604      	mov	r4, r0
 801b476:	460d      	mov	r5, r1
 801b478:	d904      	bls.n	801b484 <_raise_r+0x14>
 801b47a:	2316      	movs	r3, #22
 801b47c:	6003      	str	r3, [r0, #0]
 801b47e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b482:	bd38      	pop	{r3, r4, r5, pc}
 801b484:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801b486:	b112      	cbz	r2, 801b48e <_raise_r+0x1e>
 801b488:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b48c:	b94b      	cbnz	r3, 801b4a2 <_raise_r+0x32>
 801b48e:	4620      	mov	r0, r4
 801b490:	f000 f830 	bl	801b4f4 <_getpid_r>
 801b494:	462a      	mov	r2, r5
 801b496:	4601      	mov	r1, r0
 801b498:	4620      	mov	r0, r4
 801b49a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b49e:	f000 b817 	b.w	801b4d0 <_kill_r>
 801b4a2:	2b01      	cmp	r3, #1
 801b4a4:	d00a      	beq.n	801b4bc <_raise_r+0x4c>
 801b4a6:	1c59      	adds	r1, r3, #1
 801b4a8:	d103      	bne.n	801b4b2 <_raise_r+0x42>
 801b4aa:	2316      	movs	r3, #22
 801b4ac:	6003      	str	r3, [r0, #0]
 801b4ae:	2001      	movs	r0, #1
 801b4b0:	e7e7      	b.n	801b482 <_raise_r+0x12>
 801b4b2:	2400      	movs	r4, #0
 801b4b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b4b8:	4628      	mov	r0, r5
 801b4ba:	4798      	blx	r3
 801b4bc:	2000      	movs	r0, #0
 801b4be:	e7e0      	b.n	801b482 <_raise_r+0x12>

0801b4c0 <raise>:
 801b4c0:	4b02      	ldr	r3, [pc, #8]	; (801b4cc <raise+0xc>)
 801b4c2:	4601      	mov	r1, r0
 801b4c4:	6818      	ldr	r0, [r3, #0]
 801b4c6:	f7ff bfd3 	b.w	801b470 <_raise_r>
 801b4ca:	bf00      	nop
 801b4cc:	20001df0 	.word	0x20001df0

0801b4d0 <_kill_r>:
 801b4d0:	b538      	push	{r3, r4, r5, lr}
 801b4d2:	4d07      	ldr	r5, [pc, #28]	; (801b4f0 <_kill_r+0x20>)
 801b4d4:	2300      	movs	r3, #0
 801b4d6:	4604      	mov	r4, r0
 801b4d8:	4608      	mov	r0, r1
 801b4da:	4611      	mov	r1, r2
 801b4dc:	602b      	str	r3, [r5, #0]
 801b4de:	f7e7 f813 	bl	8002508 <_kill>
 801b4e2:	1c43      	adds	r3, r0, #1
 801b4e4:	d102      	bne.n	801b4ec <_kill_r+0x1c>
 801b4e6:	682b      	ldr	r3, [r5, #0]
 801b4e8:	b103      	cbz	r3, 801b4ec <_kill_r+0x1c>
 801b4ea:	6023      	str	r3, [r4, #0]
 801b4ec:	bd38      	pop	{r3, r4, r5, pc}
 801b4ee:	bf00      	nop
 801b4f0:	20010708 	.word	0x20010708

0801b4f4 <_getpid_r>:
 801b4f4:	f7e7 b800 	b.w	80024f8 <_getpid>

0801b4f8 <__swhatbuf_r>:
 801b4f8:	b570      	push	{r4, r5, r6, lr}
 801b4fa:	460c      	mov	r4, r1
 801b4fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b500:	2900      	cmp	r1, #0
 801b502:	b096      	sub	sp, #88	; 0x58
 801b504:	4615      	mov	r5, r2
 801b506:	461e      	mov	r6, r3
 801b508:	da0d      	bge.n	801b526 <__swhatbuf_r+0x2e>
 801b50a:	89a3      	ldrh	r3, [r4, #12]
 801b50c:	f013 0f80 	tst.w	r3, #128	; 0x80
 801b510:	f04f 0100 	mov.w	r1, #0
 801b514:	bf0c      	ite	eq
 801b516:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801b51a:	2340      	movne	r3, #64	; 0x40
 801b51c:	2000      	movs	r0, #0
 801b51e:	6031      	str	r1, [r6, #0]
 801b520:	602b      	str	r3, [r5, #0]
 801b522:	b016      	add	sp, #88	; 0x58
 801b524:	bd70      	pop	{r4, r5, r6, pc}
 801b526:	466a      	mov	r2, sp
 801b528:	f000 f848 	bl	801b5bc <_fstat_r>
 801b52c:	2800      	cmp	r0, #0
 801b52e:	dbec      	blt.n	801b50a <__swhatbuf_r+0x12>
 801b530:	9901      	ldr	r1, [sp, #4]
 801b532:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801b536:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801b53a:	4259      	negs	r1, r3
 801b53c:	4159      	adcs	r1, r3
 801b53e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b542:	e7eb      	b.n	801b51c <__swhatbuf_r+0x24>

0801b544 <__smakebuf_r>:
 801b544:	898b      	ldrh	r3, [r1, #12]
 801b546:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b548:	079d      	lsls	r5, r3, #30
 801b54a:	4606      	mov	r6, r0
 801b54c:	460c      	mov	r4, r1
 801b54e:	d507      	bpl.n	801b560 <__smakebuf_r+0x1c>
 801b550:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b554:	6023      	str	r3, [r4, #0]
 801b556:	6123      	str	r3, [r4, #16]
 801b558:	2301      	movs	r3, #1
 801b55a:	6163      	str	r3, [r4, #20]
 801b55c:	b002      	add	sp, #8
 801b55e:	bd70      	pop	{r4, r5, r6, pc}
 801b560:	ab01      	add	r3, sp, #4
 801b562:	466a      	mov	r2, sp
 801b564:	f7ff ffc8 	bl	801b4f8 <__swhatbuf_r>
 801b568:	9900      	ldr	r1, [sp, #0]
 801b56a:	4605      	mov	r5, r0
 801b56c:	4630      	mov	r0, r6
 801b56e:	f7fe fcf1 	bl	8019f54 <_malloc_r>
 801b572:	b948      	cbnz	r0, 801b588 <__smakebuf_r+0x44>
 801b574:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b578:	059a      	lsls	r2, r3, #22
 801b57a:	d4ef      	bmi.n	801b55c <__smakebuf_r+0x18>
 801b57c:	f023 0303 	bic.w	r3, r3, #3
 801b580:	f043 0302 	orr.w	r3, r3, #2
 801b584:	81a3      	strh	r3, [r4, #12]
 801b586:	e7e3      	b.n	801b550 <__smakebuf_r+0xc>
 801b588:	89a3      	ldrh	r3, [r4, #12]
 801b58a:	6020      	str	r0, [r4, #0]
 801b58c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b590:	81a3      	strh	r3, [r4, #12]
 801b592:	9b00      	ldr	r3, [sp, #0]
 801b594:	6163      	str	r3, [r4, #20]
 801b596:	9b01      	ldr	r3, [sp, #4]
 801b598:	6120      	str	r0, [r4, #16]
 801b59a:	b15b      	cbz	r3, 801b5b4 <__smakebuf_r+0x70>
 801b59c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b5a0:	4630      	mov	r0, r6
 801b5a2:	f000 f81d 	bl	801b5e0 <_isatty_r>
 801b5a6:	b128      	cbz	r0, 801b5b4 <__smakebuf_r+0x70>
 801b5a8:	89a3      	ldrh	r3, [r4, #12]
 801b5aa:	f023 0303 	bic.w	r3, r3, #3
 801b5ae:	f043 0301 	orr.w	r3, r3, #1
 801b5b2:	81a3      	strh	r3, [r4, #12]
 801b5b4:	89a3      	ldrh	r3, [r4, #12]
 801b5b6:	431d      	orrs	r5, r3
 801b5b8:	81a5      	strh	r5, [r4, #12]
 801b5ba:	e7cf      	b.n	801b55c <__smakebuf_r+0x18>

0801b5bc <_fstat_r>:
 801b5bc:	b538      	push	{r3, r4, r5, lr}
 801b5be:	4d07      	ldr	r5, [pc, #28]	; (801b5dc <_fstat_r+0x20>)
 801b5c0:	2300      	movs	r3, #0
 801b5c2:	4604      	mov	r4, r0
 801b5c4:	4608      	mov	r0, r1
 801b5c6:	4611      	mov	r1, r2
 801b5c8:	602b      	str	r3, [r5, #0]
 801b5ca:	f7e6 fffc 	bl	80025c6 <_fstat>
 801b5ce:	1c43      	adds	r3, r0, #1
 801b5d0:	d102      	bne.n	801b5d8 <_fstat_r+0x1c>
 801b5d2:	682b      	ldr	r3, [r5, #0]
 801b5d4:	b103      	cbz	r3, 801b5d8 <_fstat_r+0x1c>
 801b5d6:	6023      	str	r3, [r4, #0]
 801b5d8:	bd38      	pop	{r3, r4, r5, pc}
 801b5da:	bf00      	nop
 801b5dc:	20010708 	.word	0x20010708

0801b5e0 <_isatty_r>:
 801b5e0:	b538      	push	{r3, r4, r5, lr}
 801b5e2:	4d06      	ldr	r5, [pc, #24]	; (801b5fc <_isatty_r+0x1c>)
 801b5e4:	2300      	movs	r3, #0
 801b5e6:	4604      	mov	r4, r0
 801b5e8:	4608      	mov	r0, r1
 801b5ea:	602b      	str	r3, [r5, #0]
 801b5ec:	f7e6 fffb 	bl	80025e6 <_isatty>
 801b5f0:	1c43      	adds	r3, r0, #1
 801b5f2:	d102      	bne.n	801b5fa <_isatty_r+0x1a>
 801b5f4:	682b      	ldr	r3, [r5, #0]
 801b5f6:	b103      	cbz	r3, 801b5fa <_isatty_r+0x1a>
 801b5f8:	6023      	str	r3, [r4, #0]
 801b5fa:	bd38      	pop	{r3, r4, r5, pc}
 801b5fc:	20010708 	.word	0x20010708

0801b600 <_init>:
 801b600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b602:	bf00      	nop
 801b604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b606:	bc08      	pop	{r3}
 801b608:	469e      	mov	lr, r3
 801b60a:	4770      	bx	lr

0801b60c <_fini>:
 801b60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b60e:	bf00      	nop
 801b610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b612:	bc08      	pop	{r3}
 801b614:	469e      	mov	lr, r3
 801b616:	4770      	bx	lr
