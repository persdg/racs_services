
scorbot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d4e8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002038  0801d6e8  0801d6e8  0002d6e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f720  0801f720  000321dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801f720  0801f720  0002f720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f728  0801f728  000321dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  0801f728  0801f728  0002f728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801f740  0801f740  0002f740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000021dc  20000000  0801f748  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000eaf4  200021e0  08021924  000321e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20010cd4  08021924  00040cd4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000321dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  0003220a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003523e  00000000  00000000  00032280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000065e5  00000000  00000000  000674be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ec8  00000000  00000000  0006daa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000179a  00000000  00000000  0006f970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000358c2  00000000  00000000  0007110a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002dbd7  00000000  00000000  000a69cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011f003  00000000  00000000  000d45a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008dec  00000000  00000000  001f35a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001fc394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200021e0 	.word	0x200021e0
 800021c:	00000000 	.word	0x00000000
 8000220:	0801d6d0 	.word	0x0801d6d0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200021e4 	.word	0x200021e4
 800023c:	0801d6d0 	.word	0x0801d6d0

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800032e:	f000 b9bb 	b.w	80006a8 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <pwm_callback>:
#include <callbacks.hpp>

void pwm_callback(const void* msgin) {
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	const racs_services__msg__DirectAccess* pwm_msg =
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	60fb      	str	r3, [r7, #12]
		(const racs_services__msg__DirectAccess*) msgin;

	if(pwm_msg->num_motors != ScorBot.getSize()) {
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461c      	mov	r4, r3
 80006be:	480f      	ldr	r0, [pc, #60]	; (80006fc <pwm_callback+0x50>)
 80006c0:	f000 fb73 	bl	8000daa <_ZN5Robot7getSizeEv>
 80006c4:	4603      	mov	r3, r0
 80006c6:	429c      	cmp	r4, r3
 80006c8:	bf14      	ite	ne
 80006ca:	2301      	movne	r3, #1
 80006cc:	2300      	moveq	r3, #0
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d005      	beq.n	80006e0 <pwm_callback+0x34>
	    ScorBot.setStatus(Robot::Status::Idle, true);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2100      	movs	r1, #0
 80006d8:	4808      	ldr	r0, [pc, #32]	; (80006fc <pwm_callback+0x50>)
 80006da:	f000 fb72 	bl	8000dc2 <_ZN5Robot9setStatusENS_6StatusEb>
	    return;
 80006de:	e00a      	b.n	80006f6 <pwm_callback+0x4a>
	}

	ScorBot.setPWMs(pwm_msg->pwms);
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	3302      	adds	r3, #2
 80006e4:	4619      	mov	r1, r3
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <pwm_callback+0x50>)
 80006e8:	f000 fc23 	bl	8000f32 <_ZN5Robot7setPWMsEPKs>
	ScorBot.setStatus(Robot::Status::DAQ, false);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2101      	movs	r1, #1
 80006f0:	4802      	ldr	r0, [pc, #8]	; (80006fc <pwm_callback+0x50>)
 80006f2:	f000 fb66 	bl	8000dc2 <_ZN5Robot9setStatusENS_6StatusEb>
}
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd90      	pop	{r4, r7, pc}
 80006fc:	200021fc 	.word	0x200021fc

08000700 <control_callback>:

void control_callback(const void* request_msg, void* response_msg){
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
		racs_services__srv__Control_Request* req_in =
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	60fb      	str	r3, [r7, #12]
				(racs_services__srv__Control_Request*) request_msg;
		racs_services__srv__Control_Response* res_in =
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	60bb      	str	r3, [r7, #8]
				(racs_services__srv__Control_Response*) response_msg;
		ScorBot.lastEvent = getCurrentTime();
 8000712:	f003 fa1d 	bl	8003b50 <_Z14getCurrentTimev>
 8000716:	4603      	mov	r3, r0
 8000718:	4a06      	ldr	r2, [pc, #24]	; (8000734 <control_callback+0x34>)
 800071a:	6013      	str	r3, [r2, #0]
		ScorBot.rcvCtrl(req_in);
 800071c:	68f9      	ldr	r1, [r7, #12]
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <control_callback+0x34>)
 8000720:	f000 fc5c 	bl	8000fdc <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request>
		ScorBot.sndCtrl(res_in);
 8000724:	68b9      	ldr	r1, [r7, #8]
 8000726:	4803      	ldr	r0, [pc, #12]	; (8000734 <control_callback+0x34>)
 8000728:	f000 fcb9 	bl	800109e <_ZN5Robot7sndCtrlEP36racs_services__srv__Control_Response>
	}
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200021fc 	.word	0x200021fc

08000738 <setup_callback>:

void setup_callback(const void* request_msg, void* response_msg){
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
		racs_services__srv__Setup_Request* req_in =
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	60fb      	str	r3, [r7, #12]
				(racs_services__srv__Setup_Request*) request_msg;
		racs_services__srv__Setup_Response* res_in =
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	60bb      	str	r3, [r7, #8]
				(racs_services__srv__Setup_Response*) response_msg;
		ScorBot.lastEvent = getCurrentTime();
 800074a:	f003 fa01 	bl	8003b50 <_Z14getCurrentTimev>
 800074e:	4603      	mov	r3, r0
 8000750:	4a06      	ldr	r2, [pc, #24]	; (800076c <setup_callback+0x34>)
 8000752:	6013      	str	r3, [r2, #0]
		ScorBot.rcvSetup(req_in);
 8000754:	68f9      	ldr	r1, [r7, #12]
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <setup_callback+0x34>)
 8000758:	f000 fcb0 	bl	80010bc <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request>
		ScorBot.sndSetup(res_in);
 800075c:	68b9      	ldr	r1, [r7, #8]
 800075e:	4803      	ldr	r0, [pc, #12]	; (800076c <setup_callback+0x34>)
 8000760:	f000 fd0c 	bl	800117c <_ZN5Robot8sndSetupEP34racs_services__srv__Setup_Response>
	}
 8000764:	bf00      	nop
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200021fc 	.word	0x200021fc

08000770 <feedback_timer_callback>:

void feedback_timer_callback(rcl_timer_t* timer, int64_t last_call_time)
{
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b08d      	sub	sp, #52	; 0x34
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	e9c7 2300 	strd	r2, r3, [r7]
	//UNUSED(timer);
	UNUSED(last_call_time);

	if (timer != NULL) {
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d043      	beq.n	800080a <feedback_timer_callback+0x9a>
		racs_services__msg__Feedback feedback;
		rcl_ret_t rc;

		int size = ScorBot.getSize();
 8000782:	4823      	ldr	r0, [pc, #140]	; (8000810 <feedback_timer_callback+0xa0>)
 8000784:	f000 fb11 	bl	8000daa <_ZN5Robot7getSizeEv>
 8000788:	62b8      	str	r0, [r7, #40]	; 0x28
		feedback.num_motors = size;
 800078a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800078c:	b2db      	uxtb	r3, r3
 800078e:	753b      	strb	r3, [r7, #20]
		for(uint8_t i = 0; i < size; i++) {
 8000790:	2300      	movs	r3, #0
 8000792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000796:	e013      	b.n	80007c0 <feedback_timer_callback+0x50>
			feedback.encoders[i] = ScorBot.getEncoder(i);
 8000798:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800079c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007a0:	4619      	mov	r1, r3
 80007a2:	481b      	ldr	r0, [pc, #108]	; (8000810 <feedback_timer_callback+0xa0>)
 80007a4:	f000 fbb2 	bl	8000f0c <_ZN5Robot10getEncoderEh>
 80007a8:	4603      	mov	r3, r0
 80007aa:	461a      	mov	r2, r3
 80007ac:	0063      	lsls	r3, r4, #1
 80007ae:	3330      	adds	r3, #48	; 0x30
 80007b0:	443b      	add	r3, r7
 80007b2:	f823 2c1a 	strh.w	r2, [r3, #-26]
		for(uint8_t i = 0; i < size; i++) {
 80007b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007ba:	3301      	adds	r3, #1
 80007bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80007c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007c6:	429a      	cmp	r2, r3
 80007c8:	dce6      	bgt.n	8000798 <feedback_timer_callback+0x28>
		}

		for(uint8_t i = 6; i > size; i--) {
 80007ca:	2306      	movs	r3, #6
 80007cc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80007d0:	e00c      	b.n	80007ec <feedback_timer_callback+0x7c>
			feedback.encoders[i] = 0;
 80007d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	3330      	adds	r3, #48	; 0x30
 80007da:	443b      	add	r3, r7
 80007dc:	2200      	movs	r2, #0
 80007de:	f823 2c1a 	strh.w	r2, [r3, #-26]
		for(uint8_t i = 6; i > size; i--) {
 80007e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80007e6:	3b01      	subs	r3, #1
 80007e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80007ec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80007f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007f2:	429a      	cmp	r2, r3
 80007f4:	dbed      	blt.n	80007d2 <feedback_timer_callback+0x62>
		}
		rc = rcl_publish(&feedback_publisher, &feedback, NULL);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	2200      	movs	r2, #0
 80007fc:	4619      	mov	r1, r3
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <feedback_timer_callback+0xa4>)
 8000800:	f00c f946 	bl	800ca90 <rcl_publish>
 8000804:	6278      	str	r0, [r7, #36]	; 0x24
		if (rc != RCL_RET_OK) return;
 8000806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000808:	2b00      	cmp	r3, #0
	}
}
 800080a:	3734      	adds	r7, #52	; 0x34
 800080c:	46bd      	mov	sp, r7
 800080e:	bd90      	pop	{r4, r7, pc}
 8000810:	200021fc 	.word	0x200021fc
 8000814:	2000664c 	.word	0x2000664c

08000818 <robot_timer_callback>:

void robot_timer_callback(rcl_timer_t* timer, int64_t last_call_time)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	e9c7 2300 	strd	r2, r3, [r7]
	//UNUSED(timer);
	UNUSED(last_call_time);
	if (timer != NULL) {
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d003      	beq.n	8000832 <robot_timer_callback+0x1a>
		ScorBot.cycle(0);	//0 è un numero qualunque, probabilmente cycle verrà
 800082a:	2100      	movs	r1, #0
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <robot_timer_callback+0x24>)
 800082e:	f000 fd95 	bl	800135c <_ZN5Robot5cycleEm>
							//cambiata e non accetterà più input
	}

}
 8000832:	bf00      	nop
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200021fc 	.word	0x200021fc

08000840 <_ZN10PinControlC1EP12GPIO_TypeDeft>:

PinControl::PinControl() {

}

PinControl::PinControl(GPIO_TypeDef* port, uint16_t pin){
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	4613      	mov	r3, r2
 800084c:	80fb      	strh	r3, [r7, #6]
  this->port = port;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	68ba      	ldr	r2, [r7, #8]
 8000852:	601a      	str	r2, [r3, #0]
  this->pin = pin;
 8000854:	88fb      	ldrh	r3, [r7, #6]
 8000856:	b2da      	uxtb	r2, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	711a      	strb	r2, [r3, #4]
  setLimits(0.0, 0.0);
 800085c:	eddf 0a05 	vldr	s1, [pc, #20]	; 8000874 <_ZN10PinControlC1EP12GPIO_TypeDeft+0x34>
 8000860:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8000874 <_ZN10PinControlC1EP12GPIO_TypeDeft+0x34>
 8000864:	68f8      	ldr	r0, [r7, #12]
 8000866:	f000 f807 	bl	8000878 <_ZN10PinControl9setLimitsEff>
}
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	4618      	mov	r0, r3
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	00000000 	.word	0x00000000

08000878 <_ZN10PinControl9setLimitsEff>:
  this->port = port;
  this->pin = pin;
  setLimits(v1, v2);
}

void PinControl::setLimits(float v1, float v2){
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	60f8      	str	r0, [r7, #12]
 8000880:	ed87 0a02 	vstr	s0, [r7, #8]
 8000884:	edc7 0a01 	vstr	s1, [r7, #4]
  this->v1 = v1;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	68ba      	ldr	r2, [r7, #8]
 800088c:	609a      	str	r2, [r3, #8]
  this->v2 = v2;
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	60da      	str	r2, [r3, #12]
}
 8000894:	bf00      	nop
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <_ZN10PinControl3setEb>:

void PinControl::set(bool state){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	460b      	mov	r3, r1
 80008aa:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(port, pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6818      	ldr	r0, [r3, #0]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	791b      	ldrb	r3, [r3, #4]
 80008b4:	b299      	uxth	r1, r3
 80008b6:	78fb      	ldrb	r3, [r7, #3]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <_ZN10PinControl3setEb+0x20>
 80008bc:	2301      	movs	r3, #1
 80008be:	e000      	b.n	80008c2 <_ZN10PinControl3setEb+0x22>
 80008c0:	2300      	movs	r3, #0
 80008c2:	461a      	mov	r2, r3
 80008c4:	f004 f882 	bl	80049cc <HAL_GPIO_WritePin>
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>:

PinMeasure::PinMeasure() {

}

PinMeasure::PinMeasure(GPIO_TypeDef* port, uint16_t pin){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	4613      	mov	r3, r2
 80008dc:	80fb      	strh	r3, [r7, #6]
  this->port = port;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	68ba      	ldr	r2, [r7, #8]
 80008e2:	601a      	str	r2, [r3, #0]
  this->pin = pin;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	88fa      	ldrh	r2, [r7, #6]
 80008e8:	809a      	strh	r2, [r3, #4]
  setLimits(0.0, 0.0);
 80008ea:	eddf 0a06 	vldr	s1, [pc, #24]	; 8000904 <_ZN10PinMeasureC1EP12GPIO_TypeDeft+0x34>
 80008ee:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000904 <_ZN10PinMeasureC1EP12GPIO_TypeDeft+0x34>
 80008f2:	68f8      	ldr	r0, [r7, #12]
 80008f4:	f000 f808 	bl	8000908 <_ZN10PinMeasure9setLimitsEff>
}
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4618      	mov	r0, r3
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	00000000 	.word	0x00000000

08000908 <_ZN10PinMeasure9setLimitsEff>:
  this->port = port;
  this->pin = pin;
  setLimits(v1, v2);
}

void PinMeasure::setLimits(float v1, float v2){
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	ed87 0a02 	vstr	s0, [r7, #8]
 8000914:	edc7 0a01 	vstr	s1, [r7, #4]
  this->v1 = v1;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	609a      	str	r2, [r3, #8]
  this->v2 = v2;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	60da      	str	r2, [r3, #12]
}
 8000924:	bf00      	nop
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <_ZN10PinMeasure5stateEv>:

bool PinMeasure::state(){
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin(port, pin);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	889b      	ldrh	r3, [r3, #4]
 8000940:	4619      	mov	r1, r3
 8000942:	4610      	mov	r0, r2
 8000944:	f004 f82a 	bl	800499c <HAL_GPIO_ReadPin>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	bf14      	ite	ne
 800094e:	2301      	movne	r3, #1
 8000950:	2300      	moveq	r3, #0
 8000952:	b2db      	uxtb	r3, r3
}
 8000954:	4618      	mov	r0, r3
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <_ZN5MotorC1ER10PinControlS1_P17TIM_HandleTypeDefhR10PinMeasure>:

// ==================================================
// Motor
// ==================================================

Motor::Motor(PinControl &INA, PinControl &INB,
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
 8000968:	603b      	str	r3, [r7, #0]
			 TIM_HandleTypeDef* htimPWM, uint8_t CCRx,
			 PinMeasure &END)
  : pin_INA(INA), pin_INB(INB), htimPWM(htimPWM), CCRx(CCRx), pin_END(END) {}
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	68ba      	ldr	r2, [r7, #8]
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	683a      	ldr	r2, [r7, #0]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	7e3a      	ldrb	r2, [r7, #24]
 8000980:	731a      	strb	r2, [r3, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	69fa      	ldr	r2, [r7, #28]
 8000986:	615a      	str	r2, [r3, #20]
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	2200      	movs	r2, #0
 800098c:	761a      	strb	r2, [r3, #24]
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	4618      	mov	r0, r3
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <_ZN5MotorC1ER10PinControlS1_P17TIM_HandleTypeDefhS3_R10PinMeasure>:

Motor::Motor(PinControl &INA, PinControl &INB,
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
 80009a8:	603b      	str	r3, [r7, #0]
			 TIM_HandleTypeDef* htimPWM, uint8_t CCRx,
			 TIM_HandleTypeDef* htimENC, PinMeasure &END)
  : pin_INA(INA), pin_INB(INB), htimPWM(htimPWM), CCRx(CCRx), htimENC(htimENC), pin_END(END) {}
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	68ba      	ldr	r2, [r7, #8]
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	687a      	ldr	r2, [r7, #4]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	683a      	ldr	r2, [r7, #0]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	7e3a      	ldrb	r2, [r7, #24]
 80009c0:	731a      	strb	r2, [r3, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	69fa      	ldr	r2, [r7, #28]
 80009c6:	611a      	str	r2, [r3, #16]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	6a3a      	ldr	r2, [r7, #32]
 80009cc:	615a      	str	r2, [r3, #20]
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	2200      	movs	r2, #0
 80009d2:	761a      	strb	r2, [r3, #24]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	4618      	mov	r0, r3
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <_ZN5MotorD1Ev>:

Motor::~Motor() {}
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4618      	mov	r0, r3
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <_ZN5Motor10getEncoderEv>:

/*void Motor::invertEncoder(bool invert){
  this->encoder_invert = invert;
}*/

long Motor::getEncoder(){
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  return htimENC->Instance->CNT;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	691b      	ldr	r3, [r3, #16]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <_ZN5Motor10driveMotorEs>:

void Motor::invertMotor(bool invert){
  this->motor_invert = invert;
}
void Motor::driveMotor(int16_t spwm){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
 8000a1c:	460b      	mov	r3, r1
 8000a1e:	807b      	strh	r3, [r7, #2]
  OperatingMode mode = OperatingMode::BRAKE_GND;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  spwm = std::min(std::max(spwm, (int16_t)-255), (int16_t)255);
 8000a24:	f64f 7301 	movw	r3, #65281	; 0xff01
 8000a28:	813b      	strh	r3, [r7, #8]
 8000a2a:	f107 0208 	add.w	r2, r7, #8
 8000a2e:	1cbb      	adds	r3, r7, #2
 8000a30:	4611      	mov	r1, r2
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 fe54 	bl	80016e0 <_ZSt3maxIsERKT_S2_S2_>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	23ff      	movs	r3, #255	; 0xff
 8000a3c:	817b      	strh	r3, [r7, #10]
 8000a3e:	f107 030a 	add.w	r3, r7, #10
 8000a42:	4619      	mov	r1, r3
 8000a44:	4610      	mov	r0, r2
 8000a46:	f000 fe61 	bl	800170c <_ZSt3minIsERKT_S2_S2_>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a50:	807b      	strh	r3, [r7, #2]

  if(spwm > 0) {
 8000a52:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	dd08      	ble.n	8000a6c <_ZN5Motor10driveMotorEs+0x58>
    mode = motor_invert ? OperatingMode::SPIN_CCW : OperatingMode::SPIN_CW;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	7e1b      	ldrb	r3, [r3, #24]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <_ZN5Motor10driveMotorEs+0x52>
 8000a62:	2301      	movs	r3, #1
 8000a64:	e000      	b.n	8000a68 <_ZN5Motor10driveMotorEs+0x54>
 8000a66:	2302      	movs	r3, #2
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	e00e      	b.n	8000a8a <_ZN5Motor10driveMotorEs+0x76>
  } else if (spwm < 0) {
 8000a6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	da08      	bge.n	8000a86 <_ZN5Motor10driveMotorEs+0x72>
    mode = motor_invert ? OperatingMode::SPIN_CW : OperatingMode::SPIN_CCW;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	7e1b      	ldrb	r3, [r3, #24]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <_ZN5Motor10driveMotorEs+0x6c>
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	e000      	b.n	8000a82 <_ZN5Motor10driveMotorEs+0x6e>
 8000a80:	2301      	movs	r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	e001      	b.n	8000a8a <_ZN5Motor10driveMotorEs+0x76>
  } else {
    mode = OperatingMode::BRAKE_GND;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
  }

  switch(mode){
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	2b03      	cmp	r3, #3
 8000a8e:	d83f      	bhi.n	8000b10 <_ZN5Motor10driveMotorEs+0xfc>
 8000a90:	a201      	add	r2, pc, #4	; (adr r2, 8000a98 <_ZN5Motor10driveMotorEs+0x84>)
 8000a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a96:	bf00      	nop
 8000a98:	08000aa9 	.word	0x08000aa9
 8000a9c:	08000ac3 	.word	0x08000ac3
 8000aa0:	08000add 	.word	0x08000add
 8000aa4:	08000af7 	.word	0x08000af7
    case OperatingMode::BRAKE_GND:
      pin_INA.set(false);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2100      	movs	r1, #0
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff fef6 	bl	80008a0 <_ZN10PinControl3setEb>
      pin_INB.set(false);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fef0 	bl	80008a0 <_ZN10PinControl3setEb>
      break;
 8000ac0:	e026      	b.n	8000b10 <_ZN5Motor10driveMotorEs+0xfc>
    case OperatingMode::SPIN_CCW:
      pin_INA.set(false);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fee9 	bl	80008a0 <_ZN10PinControl3setEb>
      pin_INB.set(true);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fee3 	bl	80008a0 <_ZN10PinControl3setEb>
      break;
 8000ada:	e019      	b.n	8000b10 <_ZN5Motor10driveMotorEs+0xfc>
    case OperatingMode::SPIN_CW:
      pin_INA.set(true);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2101      	movs	r1, #1
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff fedc 	bl	80008a0 <_ZN10PinControl3setEb>
      pin_INB.set(false);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fed6 	bl	80008a0 <_ZN10PinControl3setEb>
      break;
 8000af4:	e00c      	b.n	8000b10 <_ZN5Motor10driveMotorEs+0xfc>
    case OperatingMode::BRAKE_VCC:
      pin_INA.set(true);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2101      	movs	r1, #1
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fecf 	bl	80008a0 <_ZN10PinControl3setEb>
      pin_INB.set(true);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	2101      	movs	r1, #1
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fec9 	bl	80008a0 <_ZN10PinControl3setEb>
      break;
 8000b0e:	bf00      	nop
  }
  switch(CCRx) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	7b1b      	ldrb	r3, [r3, #12]
 8000b14:	3b01      	subs	r3, #1
 8000b16:	2b05      	cmp	r3, #5
 8000b18:	d850      	bhi.n	8000bbc <_ZN5Motor10driveMotorEs+0x1a8>
 8000b1a:	a201      	add	r2, pc, #4	; (adr r2, 8000b20 <_ZN5Motor10driveMotorEs+0x10c>)
 8000b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b20:	08000b39 	.word	0x08000b39
 8000b24:	08000b4f 	.word	0x08000b4f
 8000b28:	08000b65 	.word	0x08000b65
 8000b2c:	08000b7b 	.word	0x08000b7b
 8000b30:	08000b91 	.word	0x08000b91
 8000b34:	08000ba7 	.word	0x08000ba7
    case 1:
      htimPWM->Instance->CCR1 = (uint16_t) abs(spwm);
 8000b38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	bfb8      	it	lt
 8000b40:	425b      	neglt	r3, r3
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	635a      	str	r2, [r3, #52]	; 0x34
      break;
 8000b4c:	e036      	b.n	8000bbc <_ZN5Motor10driveMotorEs+0x1a8>
    case 2:
      htimPWM->Instance->CCR2 = (uint16_t) abs(spwm);
 8000b4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	bfb8      	it	lt
 8000b56:	425b      	neglt	r3, r3
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	639a      	str	r2, [r3, #56]	; 0x38
      break;
 8000b62:	e02b      	b.n	8000bbc <_ZN5Motor10driveMotorEs+0x1a8>
    case 3:
      htimPWM->Instance->CCR3 = (uint16_t) abs(spwm);
 8000b64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	bfb8      	it	lt
 8000b6c:	425b      	neglt	r3, r3
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8000b78:	e020      	b.n	8000bbc <_ZN5Motor10driveMotorEs+0x1a8>
    case 4:
      htimPWM->Instance->CCR4 = (uint16_t) abs(spwm);
 8000b7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	bfb8      	it	lt
 8000b82:	425b      	neglt	r3, r3
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8000b8e:	e015      	b.n	8000bbc <_ZN5Motor10driveMotorEs+0x1a8>
    case 5:
      htimPWM->Instance->CCR5 = (uint16_t) abs(spwm);
 8000b90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	bfb8      	it	lt
 8000b98:	425b      	neglt	r3, r3
 8000b9a:	b29a      	uxth	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8000ba4:	e00a      	b.n	8000bbc <_ZN5Motor10driveMotorEs+0x1a8>
    case 6:
      htimPWM->Instance->CCR6 = (uint16_t) abs(spwm);
 8000ba6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	bfb8      	it	lt
 8000bae:	425b      	neglt	r3, r3
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8000bba:	bf00      	nop

  }
}
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <_ZN5Motor11isInEndStopEv>:

bool Motor::isInEndStop(){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  return pin_END.state();
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	695b      	ldr	r3, [r3, #20]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fead 	bl	8000930 <_ZN10PinMeasure5stateEv>
 8000bd6:	4603      	mov	r3, r0
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf>:

// ==================================================
// Robot
// ==================================================

Robot::Robot(PinControl &enable, PinControl &toggle, unsigned long ts_ms, uint8_t size, Motor **motors, float *encs_div)
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]
 8000bec:	603b      	str	r3, [r7, #0]
  : pin_enable(enable), pin_toggle(toggle) {
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	68ba      	ldr	r2, [r7, #8]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
  this->ts = ts_ms;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	683a      	ldr	r2, [r7, #0]
 8000bfe:	60da      	str	r2, [r3, #12]
  this->motors = 		(Motor**)	malloc(size * sizeof(Motor*));
 8000c00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f01b f9dc 	bl	801bfc4 <malloc>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	461a      	mov	r2, r3
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	615a      	str	r2, [r3, #20]
  this->pids = 			(PID*)		malloc(size * sizeof(PID));
 8000c14:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	1a9b      	subs	r3, r3, r2
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	4618      	mov	r0, r3
 8000c22:	f01b f9cf 	bl	801bfc4 <malloc>
 8000c26:	4603      	mov	r3, r0
 8000c28:	461a      	mov	r2, r3
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	619a      	str	r2, [r3, #24]
  this->switches = 		(bool*) 	malloc(size * sizeof(bool));
 8000c2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f01b f9c6 	bl	801bfc4 <malloc>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	621a      	str	r2, [r3, #32]
  this->motors_pwm = 	(int16_t*) 	malloc(size * sizeof(int16_t));
 8000c40:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	4618      	mov	r0, r3
 8000c48:	f01b f9bc 	bl	801bfc4 <malloc>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	461a      	mov	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	625a      	str	r2, [r3, #36]	; 0x24
  this->encoders =		(int16_t*)	malloc(size * sizeof(int16_t));
 8000c54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f01b f9b2 	bl	801bfc4 <malloc>
 8000c60:	4603      	mov	r3, r0
 8000c62:	461a      	mov	r2, r3
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	629a      	str	r2, [r3, #40]	; 0x28
  this->error_div = 	(float*) 	malloc(size * sizeof(float));
 8000c68:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f01b f9a8 	bl	801bfc4 <malloc>
 8000c74:	4603      	mov	r3, r0
 8000c76:	461a      	mov	r2, r3
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	62da      	str	r2, [r3, #44]	; 0x2c

  this->size = size;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000c82:	741a      	strb	r2, [r3, #16]
  this->status = Status::Idle;
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	2200      	movs	r2, #0
 8000c88:	771a      	strb	r2, [r3, #28]
  this->lastEvent = getCurrentTime();
 8000c8a:	f002 ff61 	bl	8003b50 <_Z14getCurrentTimev>
 8000c8e:	4602      	mov	r2, r0
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	601a      	str	r2, [r3, #0]

  for(int i = 0; i < size; i++){
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
 8000c98:	e01e      	b.n	8000cd8 <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0xf8>
    this->switches[i] = false;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	6a1a      	ldr	r2, [r3, #32]
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
    this->motors_pwm[i] = 0;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	4413      	add	r3, r2
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	801a      	strh	r2, [r3, #0]
    this->encoders[i] = 0;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	4413      	add	r3, r2
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	801a      	strh	r2, [r3, #0]
    this->error_div[i] = 0.0;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	4413      	add	r3, r2
 8000ccc:	f04f 0200 	mov.w	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < size; i++){
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	dbdb      	blt.n	8000c9a <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0xba>
  }

  if(motors != NULL){
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d02c      	beq.n	8000d42 <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0x162>
    for(int i = 0; i < size; i++){
 8000ce8:	2300      	movs	r3, #0
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	e024      	b.n	8000d38 <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0x158>
      if(encs_div != NULL){
 8000cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d013      	beq.n	8000d1c <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0x13c>
        setMotor(i, motors[i], encs_div[i]);
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	b2d9      	uxtb	r1, r3
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cfe:	4413      	add	r3, r2
 8000d00:	6818      	ldr	r0, [r3, #0]
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d08:	4413      	add	r3, r2
 8000d0a:	edd3 7a00 	vldr	s15, [r3]
 8000d0e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d12:	4602      	mov	r2, r0
 8000d14:	68f8      	ldr	r0, [r7, #12]
 8000d16:	f000 f894 	bl	8000e42 <_ZN5Robot8setMotorEhP5Motorf>
 8000d1a:	e00a      	b.n	8000d32 <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0x152>
      } else {
        setMotor(i, motors[i]);
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	b2d9      	uxtb	r1, r3
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d26:	4413      	add	r3, r2
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	68f8      	ldr	r0, [r7, #12]
 8000d2e:	f000 f874 	bl	8000e1a <_ZN5Robot8setMotorEhP5Motor>
    for(int i = 0; i < size; i++){
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	3301      	adds	r3, #1
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	dbd5      	blt.n	8000cee <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf+0x10e>
      }
    }
  }

  lastEvent = getCurrentTime();
 8000d42:	f002 ff05 	bl	8003b50 <_Z14getCurrentTimev>
 8000d46:	4602      	mov	r2, r0
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	601a      	str	r2, [r3, #0]
  update();
 8000d4c:	68f8      	ldr	r0, [r7, #12]
 8000d4e:	f000 fa23 	bl	8001198 <_ZN5Robot6updateEv>
}
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	4618      	mov	r0, r3
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <_ZN5RobotD1Ev>:
  : Robot(enable, toggle,ts_ms, size, motors, NULL) {}

Robot::Robot(PinControl &enable, PinControl &toggle, unsigned long ts_ms, uint8_t size)
  : Robot(enable, toggle,ts_ms, size, NULL, NULL) {}

Robot::~Robot() {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  free(this->motors);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	695b      	ldr	r3, [r3, #20]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f01b f933 	bl	801bfd4 <free>
  free(this->pids);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	699b      	ldr	r3, [r3, #24]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f01b f92e 	bl	801bfd4 <free>
  free(this->switches);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6a1b      	ldr	r3, [r3, #32]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f01b f929 	bl	801bfd4 <free>
  free(this->motors_pwm);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d86:	4618      	mov	r0, r3
 8000d88:	f01b f924 	bl	801bfd4 <free>
  free(this->encoders);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d90:	4618      	mov	r0, r3
 8000d92:	f01b f91f 	bl	801bfd4 <free>
  free(this->error_div);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f01b f91a 	bl	801bfd4 <free>
}
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <_ZN5Robot7getSizeEv>:

int Robot::getSize(){
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  return this->size;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	7c1b      	ldrb	r3, [r3, #16]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <_ZN5Robot9setStatusENS_6StatusEb>:

Robot::Status Robot::getStatus(){
  return this->status;
}

void Robot::setStatus(Status status, bool reset = false){
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	460b      	mov	r3, r1
 8000dcc:	70fb      	strb	r3, [r7, #3]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	70bb      	strb	r3, [r7, #2]
  if(this->status != status || reset){
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	7f1b      	ldrb	r3, [r3, #28]
 8000dd6:	78fa      	ldrb	r2, [r7, #3]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d102      	bne.n	8000de2 <_ZN5Robot9setStatusENS_6StatusEb+0x20>
 8000ddc:	78bb      	ldrb	r3, [r7, #2]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d005      	beq.n	8000dee <_ZN5Robot9setStatusENS_6StatusEb+0x2c>
    //resetPWMs(); riga non necessaria?
    resetPIDs();
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f000 f873 	bl	8000ece <_ZN5Robot9resetPIDsEv>
    this->status = status;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	78fa      	ldrb	r2, [r7, #3]
 8000dec:	771a      	strb	r2, [r3, #28]
  }
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <_ZN5Robot8getMotorEh>:

Motor * Robot::getMotor(uint8_t index){
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	460b      	mov	r3, r1
 8000e00:	70fb      	strb	r3, [r7, #3]
  return this->motors[index];
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	695a      	ldr	r2, [r3, #20]
 8000e06:	78fb      	ldrb	r3, [r7, #3]
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	4413      	add	r3, r2
 8000e0c:	681b      	ldr	r3, [r3, #0]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <_ZN5Robot8setMotorEhP5Motor>:

void Robot::setMotor(uint8_t index, Motor * motor){
 8000e1a:	b480      	push	{r7}
 8000e1c:	b085      	sub	sp, #20
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	460b      	mov	r3, r1
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	72fb      	strb	r3, [r7, #11]
  this->motors[index] = motor;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	695a      	ldr	r2, [r3, #20]
 8000e2c:	7afb      	ldrb	r3, [r7, #11]
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	601a      	str	r2, [r3, #0]
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <_ZN5Robot8setMotorEhP5Motorf>:

void Robot::setMotor(uint8_t index, Motor * motor, float enc_div){
 8000e42:	b480      	push	{r7}
 8000e44:	b085      	sub	sp, #20
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	60f8      	str	r0, [r7, #12]
 8000e4a:	460b      	mov	r3, r1
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	ed87 0a00 	vstr	s0, [r7]
 8000e52:	72fb      	strb	r3, [r7, #11]
  this->motors[index] = motor;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	695a      	ldr	r2, [r3, #20]
 8000e58:	7afb      	ldrb	r3, [r7, #11]
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	4413      	add	r3, r2
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	601a      	str	r2, [r3, #0]
  this->error_div[index] = enc_div;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e66:	7afb      	ldrb	r3, [r7, #11]
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	683a      	ldr	r2, [r7, #0]
 8000e6e:	601a      	str	r2, [r3, #0]
}
 8000e70:	bf00      	nop
 8000e72:	3714      	adds	r7, #20
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <_ZN5Robot17setEncoderDividerEhf>:

void Robot::setEncoderDivider(uint8_t index, float enc_div){
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	460b      	mov	r3, r1
 8000e86:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e8a:	72fb      	strb	r3, [r7, #11]
  this->error_div[index] = enc_div;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e90:	7afb      	ldrb	r3, [r7, #11]
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	4413      	add	r3, r2
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	601a      	str	r2, [r3, #0]
}
 8000e9a:	bf00      	nop
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <_ZN5Robot6getPIDEh>:

PID * Robot::getPID(uint8_t index){
 8000ea6:	b480      	push	{r7}
 8000ea8:	b083      	sub	sp, #12
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	460b      	mov	r3, r1
 8000eb0:	70fb      	strb	r3, [r7, #3]
  return &(this->pids[index]);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6999      	ldr	r1, [r3, #24]
 8000eb6:	78fa      	ldrb	r2, [r7, #3]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	1a9b      	subs	r3, r3, r2
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	440b      	add	r3, r1
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <_ZN5Robot9resetPIDsEv>:
  for(int i = 0; i < size; i++){
    getPID(i)->setup(kp, ki, kd);
  }
}

void Robot::resetPIDs(){
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b084      	sub	sp, #16
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < size; i++){
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	e00c      	b.n	8000ef6 <_ZN5Robot9resetPIDsEv+0x28>
    getPID(i)->reset();
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ffdf 	bl	8000ea6 <_ZN5Robot6getPIDEh>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 fd20 	bl	8001930 <_ZN3PID5resetEv>
  for(int i = 0; i < size; i++){
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	7c1b      	ldrb	r3, [r3, #16]
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4293      	cmp	r3, r2
 8000f00:	dbec      	blt.n	8000edc <_ZN5Robot9resetPIDsEv+0xe>
  }
}
 8000f02:	bf00      	nop
 8000f04:	bf00      	nop
 8000f06:	3710      	adds	r7, #16
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <_ZN5Robot10getEncoderEh>:
  for(int i = 0; i < size; i++){
    setEncoder(i, 0);
  }
}*/

int16_t Robot::getEncoder(uint8_t index) {
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	70fb      	strb	r3, [r7, #3]
	return this->encoders[index];
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f1c:	78fb      	ldrb	r3, [r7, #3]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4413      	add	r3, r2
 8000f22:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <_ZN5Robot7setPWMsEPKs>:

void Robot::setPWMs(const int16_t *pwms){
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b084      	sub	sp, #16
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
 8000f3a:	6039      	str	r1, [r7, #0]
  for(int i = 0; i < size; i++){
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	e00e      	b.n	8000f60 <_ZN5Robot7setPWMsEPKs+0x2e>
    setPWM(i, pwms[i]);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	b2d9      	uxtb	r1, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f52:	461a      	mov	r2, r3
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 f80e 	bl	8000f76 <_ZN5Robot6setPWMEhs>
  for(int i = 0; i < size; i++){
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	7c1b      	ldrb	r3, [r3, #16]
 8000f64:	461a      	mov	r2, r3
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	dbea      	blt.n	8000f42 <_ZN5Robot7setPWMsEPKs+0x10>
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <_ZN5Robot6setPWMEhs>:

void Robot::setPWM(uint8_t index, const int16_t pwm){
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	460b      	mov	r3, r1
 8000f80:	70fb      	strb	r3, [r7, #3]
 8000f82:	4613      	mov	r3, r2
 8000f84:	803b      	strh	r3, [r7, #0]
  motors_pwm[index] = pwm;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f8a:	78fb      	ldrb	r3, [r7, #3]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	4413      	add	r3, r2
 8000f90:	883a      	ldrh	r2, [r7, #0]
 8000f92:	801a      	strh	r2, [r3, #0]

}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <_ZN5Robot9resetPWMsEv>:

void Robot::resetPWMs(){
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < size; i++){
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	e009      	b.n	8000fc2 <_ZN5Robot9resetPWMsEv+0x22>
    motors_pwm[i] = 0;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	4413      	add	r3, r2
 8000fb8:	2200      	movs	r2, #0
 8000fba:	801a      	strh	r2, [r3, #0]
  for(int i = 0; i < size; i++){
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	7c1b      	ldrb	r3, [r3, #16]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	dbef      	blt.n	8000fae <_ZN5Robot9resetPWMsEv+0xe>
  }
}
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request>:
void Robot::disableMotors(){
  setStatus(Status::Idle, true);
  pin_enable.set(false);
}

void Robot::rcvCtrl(racs_services__srv__Control_Request* request){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]

  if(request->command > 2 || request->num_motors != size) {
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	785b      	ldrb	r3, [r3, #1]
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d805      	bhi.n	8000ffa <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x1e>
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	781a      	ldrb	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	7c1b      	ldrb	r3, [r3, #16]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d005      	beq.n	8001006 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x2a>
    setStatus(Status::Idle, true);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff fedf 	bl	8000dc2 <_ZN5Robot9setStatusENS_6StatusEb>
    return;
 8001004:	e048      	b.n	8001098 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xbc>
  }

  switch(request->command){
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	785b      	ldrb	r3, [r3, #1]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d002      	beq.n	8001014 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x38>
 800100e:	2b02      	cmp	r3, #2
 8001010:	d01b      	beq.n	800104a <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x6e>
 8001012:	e03a      	b.n	800108a <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xae>
    case (unsigned char) Command::Idle:
      for(int i = 0; i < size; i++) {
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e010      	b.n	800103c <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x60>
        motors_pwm[i] = 0;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	2200      	movs	r2, #0
 8001026:	801a      	strh	r2, [r3, #0]
        encoders[i] = 0;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	2200      	movs	r2, #0
 8001034:	801a      	strh	r2, [r3, #0]
      for(int i = 0; i < size; i++) {
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	3301      	adds	r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	7c1b      	ldrb	r3, [r3, #16]
 8001040:	461a      	mov	r2, r3
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4293      	cmp	r3, r2
 8001046:	dbe8      	blt.n	800101a <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x3e>
      }
      break;
 8001048:	e01f      	b.n	800108a <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xae>
        motors_pwm[i] = request->encoders[i];
        encoders[i] = 0;
      }
      break;*/
    case (unsigned char) Command::PID:
      for(int i = 0; i < size; i++) {
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	e015      	b.n	800107c <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xa0>
        motors_pwm[i] = 0;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	2200      	movs	r2, #0
 800105c:	801a      	strh	r2, [r3, #0]
        encoders[i] = request->encoders[i];
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	441a      	add	r2, r3
 8001068:	6839      	ldr	r1, [r7, #0]
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	440b      	add	r3, r1
 8001070:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001074:	8013      	strh	r3, [r2, #0]
      for(int i = 0; i < size; i++) {
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	3301      	adds	r3, #1
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7c1b      	ldrb	r3, [r3, #16]
 8001080:	461a      	mov	r2, r3
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	4293      	cmp	r3, r2
 8001086:	dbe3      	blt.n	8001050 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x74>
      }
      break;
 8001088:	bf00      	nop
  }

  setStatus((Status) request->command);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	785b      	ldrb	r3, [r3, #1]
 800108e:	2200      	movs	r2, #0
 8001090:	4619      	mov	r1, r3
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff fe95 	bl	8000dc2 <_ZN5Robot9setStatusENS_6StatusEb>
}
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <_ZN5Robot7sndCtrlEP36racs_services__srv__Control_Response>:

void Robot::sndCtrl(racs_services__srv__Control_Response* response){
 800109e:	b480      	push	{r7}
 80010a0:	b083      	sub	sp, #12
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
 80010a6:	6039      	str	r1, [r7, #0]
	response->response = (uint8_t) status;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	7f1a      	ldrb	r2, [r3, #28]
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	701a      	strb	r2, [r3, #0]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request>:

void Robot::rcvSetup(racs_services__srv__Setup_Request* request){
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]

  setEncoderDivider(request->motor_index, request->eed);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	781a      	ldrb	r2, [r3, #0]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80010d0:	eeb0 0a67 	vmov.f32	s0, s15
 80010d4:	4611      	mov	r1, r2
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff fed0 	bl	8000e7c <_ZN5Robot17setEncoderDividerEhf>
  getPID(request->motor_index)->reset();
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4619      	mov	r1, r3
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff fedf 	bl	8000ea6 <_ZN5Robot6getPIDEh>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 fc20 	bl	8001930 <_ZN3PID5resetEv>
  getPID(request->motor_index)->init((float) ts/1000.0, request->tau, request->sat, true);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4619      	mov	r1, r3
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff fed5 	bl	8000ea6 <_ZN5Robot6getPIDEh>
 80010fc:	4602      	mov	r2, r0
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	ee07 3a90 	vmov	s15, r3
 8001106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800110a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001178 <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request+0xbc>
 800110e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	edd3 7a05 	vldr	s15, [r3, #20]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	edd3 6a06 	vldr	s13, [r3, #24]
 800111e:	2101      	movs	r1, #1
 8001120:	eeb0 1a66 	vmov.f32	s2, s13
 8001124:	eef0 0a67 	vmov.f32	s1, s15
 8001128:	eeb0 0a47 	vmov.f32	s0, s14
 800112c:	4610      	mov	r0, r2
 800112e:	f000 fb77 	bl	8001820 <_ZN3PID4initEfffb>
  getPID(request->motor_index)->setup(request->p, request->i, request->d);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	4619      	mov	r1, r3
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff feb4 	bl	8000ea6 <_ZN5Robot6getPIDEh>
 800113e:	4602      	mov	r2, r0
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	edd3 7a02 	vldr	s15, [r3, #8]
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	ed93 7a03 	vldr	s14, [r3, #12]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001152:	eeb0 1a66 	vmov.f32	s2, s13
 8001156:	eef0 0a47 	vmov.f32	s1, s14
 800115a:	eeb0 0a67 	vmov.f32	s0, s15
 800115e:	4610      	mov	r0, r2
 8001160:	f000 fbcc 	bl	80018fc <_ZN3PID5setupEfff>

  setStatus(Status::Idle, true);
 8001164:	2201      	movs	r2, #1
 8001166:	2100      	movs	r1, #0
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff fe2a 	bl	8000dc2 <_ZN5Robot9setStatusENS_6StatusEb>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	447a0000 	.word	0x447a0000

0800117c <_ZN5Robot8sndSetupEP34racs_services__srv__Setup_Response>:

void Robot::sndSetup(racs_services__srv__Setup_Response* response){
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  response->response = (uint8_t) Status::Setup;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	2203      	movs	r2, #3
 800118a:	701a      	strb	r2, [r3, #0]
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <_ZN5Robot6updateEv>:

void Robot::update(){
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  switch(status){
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	7f1b      	ldrb	r3, [r3, #28]
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d00c      	beq.n	80011c2 <_ZN5Robot6updateEv+0x2a>
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	f200 8086 	bhi.w	80012ba <_ZN5Robot6updateEv+0x122>
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <_ZN5Robot6updateEv+0x22>
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	f000 808b 	beq.w	80012ce <_ZN5Robot6updateEv+0x136>
 80011b8:	e07f      	b.n	80012ba <_ZN5Robot6updateEv+0x122>
    case Status::Idle:
      resetPWMs();
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff fef0 	bl	8000fa0 <_ZN5Robot9resetPWMsEv>
      break;
 80011c0:	e086      	b.n	80012d0 <_ZN5Robot6updateEv+0x138>

    case Status::DAQ:
      break;

    case Status::PID:
      for(int i = 0; i < size; i++){
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
 80011c6:	e071      	b.n	80012ac <_ZN5Robot6updateEv+0x114>
        float err = (float) (getMotor(i)->getEncoder() - encoders[i]) / ((error_div[i] == 0) ? 1.0 : error_div[i]);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	4619      	mov	r1, r3
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff fe11 	bl	8000df6 <_ZN5Robot8getMotorEh>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fc0e 	bl	80009f8 <_ZN5Motor10getEncoderEv>
 80011dc:	4601      	mov	r1, r0
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4413      	add	r3, r2
 80011e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ec:	1acb      	subs	r3, r1, r3
 80011ee:	ee07 3a90 	vmov	s15, r3
 80011f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f6:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	4413      	add	r3, r2
 8001204:	edd3 7a00 	vldr	s15, [r3]
 8001208:	eef5 7a40 	vcmp.f32	s15, #0.0
 800120c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001210:	d009      	beq.n	8001226 <_ZN5Robot6updateEv+0x8e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	edd3 7a00 	vldr	s15, [r3]
 8001220:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001224:	e001      	b.n	800122a <_ZN5Robot6updateEv+0x92>
 8001226:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800122a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800122e:	eef7 7bc6 	vcvt.f32.f64	s15, d6
 8001232:	edc7 7a05 	vstr	s15, [r7, #20]
    	motors_pwm[i] = (int16_t) std::min(std::max((float) 0, getPID(i)->evolve(err)), (float) MAX_PWM) - HALF_PWM;
 8001236:	f04f 0300 	mov.w	r3, #0
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	4619      	mov	r1, r3
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff fe2f 	bl	8000ea6 <_ZN5Robot6getPIDEh>
 8001248:	4603      	mov	r3, r0
 800124a:	ed97 0a05 	vldr	s0, [r7, #20]
 800124e:	4618      	mov	r0, r3
 8001250:	f000 fc5b 	bl	8001b0a <_ZN3PID6evolveEf>
 8001254:	eef0 7a40 	vmov.f32	s15, s0
 8001258:	edc7 7a03 	vstr	s15, [r7, #12]
 800125c:	f107 020c 	add.w	r2, r7, #12
 8001260:	f107 0308 	add.w	r3, r7, #8
 8001264:	4611      	mov	r1, r2
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fa66 	bl	8001738 <_ZSt3maxIfERKT_S2_S2_>
 800126c:	4602      	mov	r2, r0
 800126e:	f04f 438f 	mov.w	r3, #1199570944	; 0x47800000
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	4619      	mov	r1, r3
 800127a:	4610      	mov	r0, r2
 800127c:	f000 fa75 	bl	800176a <_ZSt3minIfERKT_S2_S2_>
 8001280:	4603      	mov	r3, r0
 8001282:	edd3 7a00 	vldr	s15, [r3]
 8001286:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800128a:	ee17 3a90 	vmov	r3, s15
 800128e:	b21b      	sxth	r3, r3
 8001290:	b29b      	uxth	r3, r3
 8001292:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001296:	b299      	uxth	r1, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	b20a      	sxth	r2, r1
 80012a4:	801a      	strh	r2, [r3, #0]
      for(int i = 0; i < size; i++){
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3301      	adds	r3, #1
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	7c1b      	ldrb	r3, [r3, #16]
 80012b0:	461a      	mov	r2, r3
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	4293      	cmp	r3, r2
 80012b6:	db87      	blt.n	80011c8 <_ZN5Robot6updateEv+0x30>
      }
      break;
 80012b8:	e00a      	b.n	80012d0 <_ZN5Robot6updateEv+0x138>

    default:
      resetPWMs();
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff fe70 	bl	8000fa0 <_ZN5Robot9resetPWMsEv>
      resetPIDs();
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff fe04 	bl	8000ece <_ZN5Robot9resetPIDsEv>
      status = Status::Idle;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	771a      	strb	r2, [r3, #28]
      break;
 80012cc:	e000      	b.n	80012d0 <_ZN5Robot6updateEv+0x138>
      break;
 80012ce:	bf00      	nop
  }

  for(int i = 0; i < size; i++){
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
 80012d4:	e012      	b.n	80012fc <_ZN5Robot6updateEv+0x164>
    switches[i] = getMotor(i)->isInEndStop();
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	4619      	mov	r1, r3
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff fd8a 	bl	8000df6 <_ZN5Robot8getMotorEh>
 80012e2:	4601      	mov	r1, r0
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a1a      	ldr	r2, [r3, #32]
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	18d4      	adds	r4, r2, r3
 80012ec:	4608      	mov	r0, r1
 80012ee:	f7ff fc69 	bl	8000bc4 <_ZN5Motor11isInEndStopEv>
 80012f2:	4603      	mov	r3, r0
 80012f4:	7023      	strb	r3, [r4, #0]
  for(int i = 0; i < size; i++){
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	3301      	adds	r3, #1
 80012fa:	61bb      	str	r3, [r7, #24]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	7c1b      	ldrb	r3, [r3, #16]
 8001300:	461a      	mov	r2, r3
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	4293      	cmp	r3, r2
 8001306:	dbe6      	blt.n	80012d6 <_ZN5Robot6updateEv+0x13e>
  }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3724      	adds	r7, #36	; 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd90      	pop	{r4, r7, pc}

08001312 <_ZN5Robot7actuateEv>:

void Robot::actuate(){
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < size; i++){
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	e012      	b.n	8001346 <_ZN5Robot7actuateEv+0x34>
    getMotor(i)->driveMotor(motors_pwm[i]);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	4619      	mov	r1, r3
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff fd65 	bl	8000df6 <_ZN5Robot8getMotorEh>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	4413      	add	r3, r2
 8001336:	f9b3 3000 	ldrsh.w	r3, [r3]
 800133a:	4619      	mov	r1, r3
 800133c:	f7ff fb6a 	bl	8000a14 <_ZN5Motor10driveMotorEs>
  for(int i = 0; i < size; i++){
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	3301      	adds	r3, #1
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	7c1b      	ldrb	r3, [r3, #16]
 800134a:	461a      	mov	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	4293      	cmp	r3, r2
 8001350:	dbe6      	blt.n	8001320 <_ZN5Robot7actuateEv+0xe>
  }
}
 8001352:	bf00      	nop
 8001354:	bf00      	nop
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <_ZN5Robot5cycleEm>:
      }
    }
  }
}*/

void Robot::cycle(unsigned long time_ms){
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
      //if (getElapsedTime(lastEvent) >= time_ms){
    	//lastEvent = getCurrentTime();
        pin_toggle.set(true);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	2101      	movs	r1, #1
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fa97 	bl	80008a0 <_ZN10PinControl3setEb>
        update();
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ff10 	bl	8001198 <_ZN5Robot6updateEv>
        actuate();
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ffca 	bl	8001312 <_ZN5Robot7actuateEv>
        pin_toggle.set(false);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	2100      	movs	r1, #0
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fa8b 	bl	80008a0 <_ZN10PinControl3setEb>
      //}
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <_Z12create_robotv>:

Robot create_robot() {
 8001394:	b580      	push	{r7, lr}
 8001396:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 800139a:	af04      	add	r7, sp, #16
 800139c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013a0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80013a4:	6018      	str	r0, [r3, #0]

	PinControl mot1_ina = PinControl(MOTOR1_INA_GPIO_Port, MOTOR1_INA_Pin);
 80013a6:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80013aa:	2201      	movs	r2, #1
 80013ac:	49c3      	ldr	r1, [pc, #780]	; (80016bc <_Z12create_robotv+0x328>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fa46 	bl	8000840 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot1_inb = PinControl(MOTOR1_INB_GPIO_Port, MOTOR1_INB_Pin);
 80013b4:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80013b8:	2202      	movs	r2, #2
 80013ba:	49c0      	ldr	r1, [pc, #768]	; (80016bc <_Z12create_robotv+0x328>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff fa3f 	bl	8000840 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot1_end = PinMeasure(MOTOR1_END_GPIO_Port, MOTOR1_END_Pin);
 80013c2:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80013c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ca:	49bd      	ldr	r1, [pc, #756]	; (80016c0 <_Z12create_robotv+0x32c>)
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fa7f 	bl	80008d0 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot2_ina = PinControl(MOTOR2_INA_GPIO_Port, MOTOR2_INA_Pin);
 80013d2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80013d6:	2204      	movs	r2, #4
 80013d8:	49b8      	ldr	r1, [pc, #736]	; (80016bc <_Z12create_robotv+0x328>)
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fa30 	bl	8000840 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot2_inb = PinControl(MOTOR2_INB_GPIO_Port, MOTOR2_INB_Pin);
 80013e0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80013e4:	2208      	movs	r2, #8
 80013e6:	49b5      	ldr	r1, [pc, #724]	; (80016bc <_Z12create_robotv+0x328>)
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fa29 	bl	8000840 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot2_end = PinMeasure(MOTOR2_END_GPIO_Port, MOTOR2_END_Pin);
 80013ee:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80013f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013f6:	49b2      	ldr	r1, [pc, #712]	; (80016c0 <_Z12create_robotv+0x32c>)
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fa69 	bl	80008d0 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot3_ina = PinControl(MOTOR3_INA_GPIO_Port, MOTOR3_INA_Pin);
 80013fe:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001402:	2210      	movs	r2, #16
 8001404:	49ad      	ldr	r1, [pc, #692]	; (80016bc <_Z12create_robotv+0x328>)
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fa1a 	bl	8000840 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot3_inb = PinControl(MOTOR3_INB_GPIO_Port, MOTOR3_INB_Pin);
 800140c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8001410:	2220      	movs	r2, #32
 8001412:	49aa      	ldr	r1, [pc, #680]	; (80016bc <_Z12create_robotv+0x328>)
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fa13 	bl	8000840 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot3_end = PinMeasure(MOTOR3_END_GPIO_Port, MOTOR3_END_Pin);
 800141a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800141e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001422:	49a7      	ldr	r1, [pc, #668]	; (80016c0 <_Z12create_robotv+0x32c>)
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fa53 	bl	80008d0 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot4_ina = PinControl(MOTOR4_INA_GPIO_Port, MOTOR4_INA_Pin);
 800142a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800142e:	2240      	movs	r2, #64	; 0x40
 8001430:	49a2      	ldr	r1, [pc, #648]	; (80016bc <_Z12create_robotv+0x328>)
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fa04 	bl	8000840 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot4_inb = PinControl(MOTOR4_INB_GPIO_Port, MOTOR4_INB_Pin);
 8001438:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800143c:	2280      	movs	r2, #128	; 0x80
 800143e:	499f      	ldr	r1, [pc, #636]	; (80016bc <_Z12create_robotv+0x328>)
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff f9fd 	bl	8000840 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot4_end = PinMeasure(MOTOR4_END_GPIO_Port, MOTOR4_END_Pin);
 8001446:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800144a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800144e:	499c      	ldr	r1, [pc, #624]	; (80016c0 <_Z12create_robotv+0x32c>)
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fa3d 	bl	80008d0 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot5_ina = PinControl(MOTOR5_INA_GPIO_Port, MOTOR5_INA_Pin);
 8001456:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800145a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800145e:	4997      	ldr	r1, [pc, #604]	; (80016bc <_Z12create_robotv+0x328>)
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff f9ed 	bl	8000840 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot5_inb = PinControl(MOTOR5_INB_GPIO_Port, MOTOR5_INB_Pin);
 8001466:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800146a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800146e:	4993      	ldr	r1, [pc, #588]	; (80016bc <_Z12create_robotv+0x328>)
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff f9e5 	bl	8000840 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot5_end = PinMeasure(MOTOR5_END_GPIO_Port, MOTOR5_END_Pin);
 8001476:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800147a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800147e:	4990      	ldr	r1, [pc, #576]	; (80016c0 <_Z12create_robotv+0x32c>)
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fa25 	bl	80008d0 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot6_ina = PinControl(MOTOR6_INA_GPIO_Port, MOTOR6_INA_Pin);
 8001486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800148a:	2204      	movs	r2, #4
 800148c:	498c      	ldr	r1, [pc, #560]	; (80016c0 <_Z12create_robotv+0x32c>)
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f9d6 	bl	8000840 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot6_inb = PinControl(MOTOR6_INB_GPIO_Port, MOTOR6_INB_Pin);
 8001494:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001498:	2208      	movs	r2, #8
 800149a:	4989      	ldr	r1, [pc, #548]	; (80016c0 <_Z12create_robotv+0x32c>)
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff f9cf 	bl	8000840 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot6_end = PinMeasure(MOTOR6_END_GPIO_Port, MOTOR6_END_Pin);
 80014a2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80014a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014aa:	4985      	ldr	r1, [pc, #532]	; (80016c0 <_Z12create_robotv+0x32c>)
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fa0f 	bl	80008d0 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl enable = PinControl(MOTORS_EN_GPIO_Port, MOTORS_EN_Pin);
 80014b2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80014b6:	2240      	movs	r2, #64	; 0x40
 80014b8:	4981      	ldr	r1, [pc, #516]	; (80016c0 <_Z12create_robotv+0x32c>)
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f9c0 	bl	8000840 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl toggle = PinControl(PIN_TOGGLE_GPIO_Port, PIN_TOGGLE_Pin);
 80014c0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80014c4:	2220      	movs	r2, #32
 80014c6:	497e      	ldr	r1, [pc, #504]	; (80016c0 <_Z12create_robotv+0x32c>)
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff f9b9 	bl	8000840 <_ZN10PinControlC1EP12GPIO_TypeDeft>

	Motor motor1 = Motor(mot1_ina, mot1_inb, &htim1, 1, &htim2, mot1_end);
 80014ce:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 80014d2:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 80014d6:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 80014da:	f507 73ec 	add.w	r3, r7, #472	; 0x1d8
 80014de:	9302      	str	r3, [sp, #8]
 80014e0:	4b78      	ldr	r3, [pc, #480]	; (80016c4 <_Z12create_robotv+0x330>)
 80014e2:	9301      	str	r3, [sp, #4]
 80014e4:	2301      	movs	r3, #1
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	4b77      	ldr	r3, [pc, #476]	; (80016c8 <_Z12create_robotv+0x334>)
 80014ea:	f7ff fa57 	bl	800099c <_ZN5MotorC1ER10PinControlS1_P17TIM_HandleTypeDefhS3_R10PinMeasure>
	Motor motor2 = Motor(mot2_ina, mot2_inb, &htim1, 2, &htim3, mot2_end);
 80014ee:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 80014f2:	f507 71e4 	add.w	r1, r7, #456	; 0x1c8
 80014f6:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80014fa:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80014fe:	9302      	str	r3, [sp, #8]
 8001500:	4b72      	ldr	r3, [pc, #456]	; (80016cc <_Z12create_robotv+0x338>)
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	2302      	movs	r3, #2
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	4b6f      	ldr	r3, [pc, #444]	; (80016c8 <_Z12create_robotv+0x334>)
 800150a:	f7ff fa47 	bl	800099c <_ZN5MotorC1ER10PinControlS1_P17TIM_HandleTypeDefhS3_R10PinMeasure>
	Motor motor3 = Motor(mot3_ina, mot3_inb, &htim1, 3, &htim4, mot3_end);
 800150e:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8001512:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8001516:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800151a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800151e:	9302      	str	r3, [sp, #8]
 8001520:	4b6b      	ldr	r3, [pc, #428]	; (80016d0 <_Z12create_robotv+0x33c>)
 8001522:	9301      	str	r3, [sp, #4]
 8001524:	2303      	movs	r3, #3
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	4b67      	ldr	r3, [pc, #412]	; (80016c8 <_Z12create_robotv+0x334>)
 800152a:	f7ff fa37 	bl	800099c <_ZN5MotorC1ER10PinControlS1_P17TIM_HandleTypeDefhS3_R10PinMeasure>
	Motor motor4 = Motor(mot4_ina, mot4_inb, &htim1, 4, &htim5, mot4_end);
 800152e:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8001532:	f507 71b4 	add.w	r1, r7, #360	; 0x168
 8001536:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800153a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800153e:	9302      	str	r3, [sp, #8]
 8001540:	4b64      	ldr	r3, [pc, #400]	; (80016d4 <_Z12create_robotv+0x340>)
 8001542:	9301      	str	r3, [sp, #4]
 8001544:	2304      	movs	r3, #4
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	4b5f      	ldr	r3, [pc, #380]	; (80016c8 <_Z12create_robotv+0x334>)
 800154a:	f7ff fa27 	bl	800099c <_ZN5MotorC1ER10PinControlS1_P17TIM_HandleTypeDefhS3_R10PinMeasure>
	Motor motor5 = Motor(mot5_ina, mot5_inb, &htim9, 1, &htim8, mot5_end);
 800154e:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001552:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8001556:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800155a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800155e:	9302      	str	r3, [sp, #8]
 8001560:	4b5d      	ldr	r3, [pc, #372]	; (80016d8 <_Z12create_robotv+0x344>)
 8001562:	9301      	str	r3, [sp, #4]
 8001564:	2301      	movs	r3, #1
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	4b5c      	ldr	r3, [pc, #368]	; (80016dc <_Z12create_robotv+0x348>)
 800156a:	f7ff fa17 	bl	800099c <_ZN5MotorC1ER10PinControlS1_P17TIM_HandleTypeDefhS3_R10PinMeasure>
	Motor motor6 = Motor(mot6_ina, mot6_inb, &htim9, 2, 		mot6_end);
 800156e:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8001572:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8001576:	f107 0008 	add.w	r0, r7, #8
 800157a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	2302      	movs	r3, #2
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	4b55      	ldr	r3, [pc, #340]	; (80016dc <_Z12create_robotv+0x348>)
 8001586:	f7ff f9e9 	bl	800095c <_ZN5MotorC1ER10PinControlS1_P17TIM_HandleTypeDefhR10PinMeasure>

	Motor** motors = (Motor**) malloc(sizeof(Motor*)*6);
 800158a:	2018      	movs	r0, #24
 800158c:	f01a fd1a 	bl	801bfc4 <malloc>
 8001590:	4603      	mov	r3, r0
 8001592:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
	//Motor** motors = (Motor**) malloc(sizeof(Motor*)*1);
	float* encs_div = (float*) malloc(sizeof(float)*6);
 8001596:	2018      	movs	r0, #24
 8001598:	f01a fd14 	bl	801bfc4 <malloc>
 800159c:	4603      	mov	r3, r0
 800159e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	//float* encs_div = (float*) malloc(sizeof(float)*1);

	motors[0] = &motor1; motors[1] = &motor2; motors[2] = &motor3; motors[3] = &motor4; motors[4] = &motor5; motors[5] = &motor6;
 80015a2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80015a6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80015b0:	3304      	adds	r3, #4
 80015b2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80015bc:	3308      	adds	r3, #8
 80015be:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80015c8:	330c      	adds	r3, #12
 80015ca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80015d4:	3310      	adds	r3, #16
 80015d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80015e0:	3314      	adds	r3, #20
 80015e2:	f107 0208 	add.w	r2, r7, #8
 80015e6:	601a      	str	r2, [r3, #0]
	encs_div[0] = 1; encs_div[1] = 1; encs_div[2] = 1; encs_div[3] = 1; encs_div[4] = 1; encs_div[5] = 1;
 80015e8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80015ec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80015f6:	3304      	adds	r3, #4
 80015f8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8001602:	3308      	adds	r3, #8
 8001604:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800160e:	330c      	adds	r3, #12
 8001610:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800161a:	3310      	adds	r3, #16
 800161c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8001626:	3314      	adds	r3, #20
 8001628:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800162c:	601a      	str	r2, [r3, #0]
	Robot myRobot = Robot(enable, toggle, TS, 6, motors, encs_div);
 800162e:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001632:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8001636:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800163a:	f5a3 7003 	sub.w	r0, r3, #524	; 0x20c
 800163e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8001642:	9302      	str	r3, [sp, #8]
 8001644:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001648:	9301      	str	r3, [sp, #4]
 800164a:	2306      	movs	r3, #6
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	230a      	movs	r3, #10
 8001650:	6800      	ldr	r0, [r0, #0]
 8001652:	f7ff fac5 	bl	8000be0 <_ZN5RobotC1ER10PinControlS1_mhPP5MotorPf>
	//Robot myRobot = Robot(enable, toggle, TS, 1, motors, encs_div);

	return myRobot;
 8001656:	bf00      	nop
}
 8001658:	f107 0308 	add.w	r3, r7, #8
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff f9c0 	bl	80009e2 <_ZN5MotorD1Ev>
 8001662:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff f9bb 	bl	80009e2 <_ZN5MotorD1Ev>
 800166c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff f9b6 	bl	80009e2 <_ZN5MotorD1Ev>
 8001676:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff f9b1 	bl	80009e2 <_ZN5MotorD1Ev>
 8001680:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff f9ac 	bl	80009e2 <_ZN5MotorD1Ev>
 800168a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff f9a7 	bl	80009e2 <_ZN5MotorD1Ev>
	return myRobot;
 8001694:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001698:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800169c:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80016a0:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 80016a4:	6812      	ldr	r2, [r2, #0]
 80016a6:	601a      	str	r2, [r3, #0]
}
 80016a8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80016ac:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80016b0:	6818      	ldr	r0, [r3, #0]
 80016b2:	f507 7704 	add.w	r7, r7, #528	; 0x210
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40020c00 	.word	0x40020c00
 80016c0:	40021800 	.word	0x40021800
 80016c4:	20006700 	.word	0x20006700
 80016c8:	200066b4 	.word	0x200066b4
 80016cc:	2000674c 	.word	0x2000674c
 80016d0:	20006798 	.word	0x20006798
 80016d4:	200067e4 	.word	0x200067e4
 80016d8:	20006830 	.word	0x20006830
 80016dc:	2000687c 	.word	0x2000687c

080016e0 <_ZSt3maxIsERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	da01      	bge.n	80016fe <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	e000      	b.n	8001700 <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 80016fe:	687b      	ldr	r3, [r7, #4]
    }
 8001700:	4618      	mov	r0, r3
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <_ZSt3minIsERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	f9b3 2000 	ldrsh.w	r2, [r3]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001722:	429a      	cmp	r2, r3
 8001724:	da01      	bge.n	800172a <_ZSt3minIsERKT_S2_S2_+0x1e>
	return __b;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	e000      	b.n	800172c <_ZSt3minIsERKT_S2_S2_+0x20>
      return __a;
 800172a:	687b      	ldr	r3, [r7, #4]
    }
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	ed93 7a00 	vldr	s14, [r3]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	edd3 7a00 	vldr	s15, [r3]
 800174e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001756:	d501      	bpl.n	800175c <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	e000      	b.n	800175e <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 800175c:	687b      	ldr	r3, [r7, #4]
    }
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	ed93 7a00 	vldr	s14, [r3]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	edd3 7a00 	vldr	s15, [r3]
 8001780:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001788:	d501      	bpl.n	800178e <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	e000      	b.n	8001790 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 800178e:	687b      	ldr	r3, [r7, #4]
    }
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <_Z41__static_initialization_and_destruction_0ii>:

Robot ScorBot = create_robot();
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d108      	bne.n	80017be <_Z41__static_initialization_and_destruction_0ii+0x22>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d103      	bne.n	80017be <_Z41__static_initialization_and_destruction_0ii+0x22>
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fdeb 	bl	8001394 <_Z12create_robotv>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d107      	bne.n	80017d4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d102      	bne.n	80017d4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80017ce:	4803      	ldr	r0, [pc, #12]	; (80017dc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80017d0:	f7ff fac4 	bl	8000d5c <_ZN5RobotD1Ev>
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	200021fc 	.word	0x200021fc

080017e0 <_GLOBAL__sub_I__ZN10PinControlC2Ev>:
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017e8:	2001      	movs	r0, #1
 80017ea:	f7ff ffd7 	bl	800179c <_Z41__static_initialization_and_destruction_0ii>
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <_GLOBAL__sub_D__ZN10PinControlC2Ev>:
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017f8:	2000      	movs	r0, #0
 80017fa:	f7ff ffcf 	bl	800179c <_Z41__static_initialization_and_destruction_0ii>
 80017fe:	bd80      	pop	{r7, pc}

08001800 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	ed87 0a01 	vstr	s0, [r7, #4]
 800180a:	ed97 0a01 	vldr	s0, [r7, #4]
 800180e:	f01a fad7 	bl	801bdc0 <expf>
 8001812:	eef0 7a40 	vmov.f32	s15, s0
 8001816:	eeb0 0a67 	vmov.f32	s0, s15
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <_ZN3PID4initEfffb>:


// PID

void PID::init(float ts, float pole, float sat, bool bumpless)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6178      	str	r0, [r7, #20]
 8001828:	ed87 0a04 	vstr	s0, [r7, #16]
 800182c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001830:	ed87 1a02 	vstr	s2, [r7, #8]
 8001834:	460b      	mov	r3, r1
 8001836:	71fb      	strb	r3, [r7, #7]
  this->ts = ts;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	601a      	str	r2, [r3, #0]
  this->pole = pole;
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	68fa      	ldr	r2, [r7, #12]
 8001842:	605a      	str	r2, [r3, #4]
  this->sat = sat;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	609a      	str	r2, [r3, #8]
  this->bumpless = bumpless;
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	79fa      	ldrb	r2, [r7, #7]
 800184e:	731a      	strb	r2, [r3, #12]

  if(pole > 0)
 8001850:	edd7 7a03 	vldr	s15, [r7, #12]
 8001854:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185c:	dd2d      	ble.n	80018ba <_ZN3PID4initEfffb+0x9a>
  {
    A = exp(-pole*ts);
 800185e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001862:	eeb1 7a67 	vneg.f32	s14, s15
 8001866:	edd7 7a04 	vldr	s15, [r7, #16]
 800186a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800186e:	eeb0 0a67 	vmov.f32	s0, s15
 8001872:	f7ff ffc5 	bl	8001800 <_ZSt3expf>
 8001876:	eef0 7a40 	vmov.f32	s15, s0
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    B = (1-A)/pole;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001886:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800188a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800188e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    C = -pole*pole;
 800189c:	edd7 7a03 	vldr	s15, [r7, #12]
 80018a0:	eeb1 7a67 	vneg.f32	s14, s15
 80018a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80018a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    D = pole;
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	635a      	str	r2, [r3, #52]	; 0x34
 80018b8:	e019      	b.n	80018ee <_ZN3PID4initEfffb+0xce>
  }
  else
  {
    A = 0;
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	629a      	str	r2, [r3, #40]	; 0x28
    B = 1;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80018c8:	62da      	str	r2, [r3, #44]	; 0x2c
    C = -1/ts;
 80018ca:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 80018ce:	ed97 7a04 	vldr	s14, [r7, #16]
 80018d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    D = 1/ts;
 80018dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80018e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80018e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  }

  apply_saturation();
 80018ee:	6978      	ldr	r0, [r7, #20]
 80018f0:	f000 f926 	bl	8001b40 <_ZN3PID16apply_saturationEv>
}
 80018f4:	bf00      	nop
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <_ZN3PID5setupEfff>:

void PID::setup(float kp, float ki, float kd)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	ed87 0a02 	vstr	s0, [r7, #8]
 8001908:	edc7 0a01 	vstr	s1, [r7, #4]
 800190c:	ed87 1a00 	vstr	s2, [r7]
  this->kp = kp;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	611a      	str	r2, [r3, #16]
  this->ki = ki;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	615a      	str	r2, [r3, #20]
  this->kd = kd;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	619a      	str	r2, [r3, #24]
}
 8001922:	bf00      	nop
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <_ZN3PID5resetEv>:

void PID::reset()
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  reset(0.0, 0.0);
 8001938:	eddf 0a05 	vldr	s1, [pc, #20]	; 8001950 <_ZN3PID5resetEv+0x20>
 800193c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001950 <_ZN3PID5resetEv+0x20>
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f807 	bl	8001954 <_ZN3PID5resetEff>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	00000000 	.word	0x00000000

08001954 <_ZN3PID5resetEff>:

void PID::reset(float xi, float xd)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001960:	edc7 0a01 	vstr	s1, [r7, #4]
  this-> xi = xi;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	621a      	str	r2, [r3, #32]
  this-> xd = xd;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	625a      	str	r2, [r3, #36]	; 0x24

  apply_saturation();
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 f8e5 	bl	8001b40 <_ZN3PID16apply_saturationEv>
}
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <_ZN3PID5inputEf>:

void PID::input(float e)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	ed87 0a00 	vstr	s0, [r7]
  this->e = e;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	61da      	str	r2, [r3, #28]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <_ZN3PID4stepEv>:

void PID::step()
{  
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  xi = xi + (bumpless ? ki*ts*e : ts*e);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	ed93 7a08 	vldr	s14, [r3, #32]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	7b1b      	ldrb	r3, [r3, #12]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00d      	beq.n	80019ce <_ZN3PID4stepEv+0x32>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	edd3 6a05 	vldr	s13, [r3, #20]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	edd3 7a00 	vldr	s15, [r3]
 80019be:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	edd3 7a07 	vldr	s15, [r3, #28]
 80019c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019cc:	e007      	b.n	80019de <_ZN3PID4stepEv+0x42>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	edd3 6a00 	vldr	s13, [r3]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	edd3 7a07 	vldr	s15, [r3, #28]
 80019da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	edc3 7a08 	vstr	s15, [r3, #32]
  xd = A*xd + (bumpless ? kd*B*e : B*e);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80019f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	7b1b      	ldrb	r3, [r3, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d00d      	beq.n	8001a1c <_ZN3PID4stepEv+0x80>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	edd3 6a06 	vldr	s13, [r3, #24]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001a0c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a1a:	e007      	b.n	8001a2c <_ZN3PID4stepEv+0x90>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

  apply_saturation();
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f000 f882 	bl	8001b40 <_ZN3PID16apply_saturationEv>
}
 8001a3c:	bf00      	nop
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <_ZN3PID6outputEv>:

float PID::output()
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  float u;

  if(bumpless) u = (kp + kd*D) * e + xi + C*xd;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7b1b      	ldrb	r3, [r3, #12]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d023      	beq.n	8001a9c <_ZN3PID6outputEv+0x58>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	edd3 6a06 	vldr	s13, [r3, #24]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001a66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001a8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a96:	edc7 7a03 	vstr	s15, [r7, #12]
 8001a9a:	e02c      	b.n	8001af6 <_ZN3PID6outputEv+0xb2>
  else u = (kp + kd*D) * e + ki*xi + kd*C*xd;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	edd3 6a06 	vldr	s13, [r3, #24]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001aae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	edd3 7a07 	vldr	s15, [r3, #28]
 8001abc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	edd3 6a05 	vldr	s13, [r3, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	edd3 7a08 	vldr	s15, [r3, #32]
 8001acc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	edd3 6a06 	vldr	s13, [r3, #24]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001ae0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001aea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af2:	edc7 7a03 	vstr	s15, [r7, #12]

  return u;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	ee07 3a90 	vmov	s15, r3
}
 8001afc:	eeb0 0a67 	vmov.f32	s0, s15
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <_ZN3PID6evolveEf>:

float PID::evolve(float e)
{ 
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b084      	sub	sp, #16
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	ed87 0a00 	vstr	s0, [r7]
  float u;
  
  input(e);
 8001b16:	ed97 0a00 	vldr	s0, [r7]
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff ff2f 	bl	800197e <_ZN3PID5inputEf>
  u = output();
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff ff8f 	bl	8001a44 <_ZN3PID6outputEv>
 8001b26:	ed87 0a03 	vstr	s0, [r7, #12]
  step();
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff ff36 	bl	800199c <_ZN3PID4stepEv>

  return u;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	ee07 3a90 	vmov	s15, r3
}
 8001b36:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <_ZN3PID16apply_saturationEv>:

void PID::apply_saturation()
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if(sat > 0)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b56:	dc00      	bgt.n	8001b5a <_ZN3PID16apply_saturationEv+0x1a>
  {
    xi = xi > +sat ? +sat : xi;
    xi = xi < -sat ? -sat : xi;
  }
}
 8001b58:	e02a      	b.n	8001bb0 <_ZN3PID16apply_saturationEv+0x70>
    xi = xi > +sat ? +sat : xi;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	ed93 7a08 	vldr	s14, [r3, #32]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6e:	dd02      	ble.n	8001b76 <_ZN3PID16apply_saturationEv+0x36>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	e001      	b.n	8001b7a <_ZN3PID16apply_saturationEv+0x3a>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6213      	str	r3, [r2, #32]
    xi = xi < -sat ? -sat : xi;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	ed93 7a08 	vldr	s14, [r3, #32]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b8a:	eef1 7a67 	vneg.f32	s15, s15
 8001b8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b96:	d505      	bpl.n	8001ba4 <_ZN3PID16apply_saturationEv+0x64>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b9e:	eef1 7a67 	vneg.f32	s15, s15
 8001ba2:	e002      	b.n	8001baa <_ZN3PID16apply_saturationEv+0x6a>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	edd3 7a08 	vldr	s15, [r3, #32]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001bc8:	f008 fa82 	bl	800a0d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001bcc:	4b5b      	ldr	r3, [pc, #364]	; (8001d3c <pvPortMallocMicroROS+0x180>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001bd4:	f000 f98a 	bl	8001eec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001bd8:	4b59      	ldr	r3, [pc, #356]	; (8001d40 <pvPortMallocMicroROS+0x184>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4013      	ands	r3, r2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f040 8092 	bne.w	8001d0a <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d01f      	beq.n	8001c2c <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 8001bec:	2208      	movs	r2, #8
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d016      	beq.n	8001c2c <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f023 0307 	bic.w	r3, r3, #7
 8001c04:	3308      	adds	r3, #8
 8001c06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00c      	beq.n	8001c2c <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c16:	b672      	cpsid	i
 8001c18:	f383 8811 	msr	BASEPRI, r3
 8001c1c:	f3bf 8f6f 	isb	sy
 8001c20:	f3bf 8f4f 	dsb	sy
 8001c24:	b662      	cpsie	i
 8001c26:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001c28:	bf00      	nop
 8001c2a:	e7fe      	b.n	8001c2a <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d06b      	beq.n	8001d0a <pvPortMallocMicroROS+0x14e>
 8001c32:	4b44      	ldr	r3, [pc, #272]	; (8001d44 <pvPortMallocMicroROS+0x188>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d866      	bhi.n	8001d0a <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001c3c:	4b42      	ldr	r3, [pc, #264]	; (8001d48 <pvPortMallocMicroROS+0x18c>)
 8001c3e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001c40:	4b41      	ldr	r3, [pc, #260]	; (8001d48 <pvPortMallocMicroROS+0x18c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001c46:	e004      	b.n	8001c52 <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 8001c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d903      	bls.n	8001c64 <pvPortMallocMicroROS+0xa8>
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1f1      	bne.n	8001c48 <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001c64:	4b35      	ldr	r3, [pc, #212]	; (8001d3c <pvPortMallocMicroROS+0x180>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d04d      	beq.n	8001d0a <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2208      	movs	r2, #8
 8001c74:	4413      	add	r3, r2
 8001c76:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	1ad2      	subs	r2, r2, r3
 8001c88:	2308      	movs	r3, #8
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d921      	bls.n	8001cd4 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4413      	add	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	f003 0307 	and.w	r3, r3, #7
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00c      	beq.n	8001cbc <pvPortMallocMicroROS+0x100>
	__asm volatile
 8001ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ca6:	b672      	cpsid	i
 8001ca8:	f383 8811 	msr	BASEPRI, r3
 8001cac:	f3bf 8f6f 	isb	sy
 8001cb0:	f3bf 8f4f 	dsb	sy
 8001cb4:	b662      	cpsie	i
 8001cb6:	613b      	str	r3, [r7, #16]
}
 8001cb8:	bf00      	nop
 8001cba:	e7fe      	b.n	8001cba <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	1ad2      	subs	r2, r2, r3
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001cce:	69b8      	ldr	r0, [r7, #24]
 8001cd0:	f000 f96e 	bl	8001fb0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001cd4:	4b1b      	ldr	r3, [pc, #108]	; (8001d44 <pvPortMallocMicroROS+0x188>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	4a19      	ldr	r2, [pc, #100]	; (8001d44 <pvPortMallocMicroROS+0x188>)
 8001ce0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001ce2:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <pvPortMallocMicroROS+0x188>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <pvPortMallocMicroROS+0x190>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d203      	bcs.n	8001cf6 <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <pvPortMallocMicroROS+0x188>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a16      	ldr	r2, [pc, #88]	; (8001d4c <pvPortMallocMicroROS+0x190>)
 8001cf4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	685a      	ldr	r2, [r3, #4]
 8001cfa:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <pvPortMallocMicroROS+0x184>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	2200      	movs	r2, #0
 8001d08:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001d0a:	f008 f9ef 	bl	800a0ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00c      	beq.n	8001d32 <pvPortMallocMicroROS+0x176>
	__asm volatile
 8001d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d1c:	b672      	cpsid	i
 8001d1e:	f383 8811 	msr	BASEPRI, r3
 8001d22:	f3bf 8f6f 	isb	sy
 8001d26:	f3bf 8f4f 	dsb	sy
 8001d2a:	b662      	cpsie	i
 8001d2c:	60fb      	str	r3, [r7, #12]
}
 8001d2e:	bf00      	nop
 8001d30:	e7fe      	b.n	8001d30 <pvPortMallocMicroROS+0x174>
	return pvReturn;
 8001d32:	69fb      	ldr	r3, [r7, #28]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3728      	adds	r7, #40	; 0x28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20005e34 	.word	0x20005e34
 8001d40:	20005e40 	.word	0x20005e40
 8001d44:	20005e38 	.word	0x20005e38
 8001d48:	20005e2c 	.word	0x20005e2c
 8001d4c:	20005e3c 	.word	0x20005e3c

08001d50 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d04c      	beq.n	8001dfc <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001d62:	2308      	movs	r3, #8
 8001d64:	425b      	negs	r3, r3
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4413      	add	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	4b23      	ldr	r3, [pc, #140]	; (8001e04 <vPortFreeMicroROS+0xb4>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10c      	bne.n	8001d98 <vPortFreeMicroROS+0x48>
	__asm volatile
 8001d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d82:	b672      	cpsid	i
 8001d84:	f383 8811 	msr	BASEPRI, r3
 8001d88:	f3bf 8f6f 	isb	sy
 8001d8c:	f3bf 8f4f 	dsb	sy
 8001d90:	b662      	cpsie	i
 8001d92:	60fb      	str	r3, [r7, #12]
}
 8001d94:	bf00      	nop
 8001d96:	e7fe      	b.n	8001d96 <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00c      	beq.n	8001dba <vPortFreeMicroROS+0x6a>
	__asm volatile
 8001da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001da4:	b672      	cpsid	i
 8001da6:	f383 8811 	msr	BASEPRI, r3
 8001daa:	f3bf 8f6f 	isb	sy
 8001dae:	f3bf 8f4f 	dsb	sy
 8001db2:	b662      	cpsie	i
 8001db4:	60bb      	str	r3, [r7, #8]
}
 8001db6:	bf00      	nop
 8001db8:	e7fe      	b.n	8001db8 <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <vPortFreeMicroROS+0xb4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d019      	beq.n	8001dfc <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d115      	bne.n	8001dfc <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <vPortFreeMicroROS+0xb4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	401a      	ands	r2, r3
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001de0:	f008 f976 	bl	800a0d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	4b07      	ldr	r3, [pc, #28]	; (8001e08 <vPortFreeMicroROS+0xb8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4413      	add	r3, r2
 8001dee:	4a06      	ldr	r2, [pc, #24]	; (8001e08 <vPortFreeMicroROS+0xb8>)
 8001df0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001df2:	6938      	ldr	r0, [r7, #16]
 8001df4:	f000 f8dc 	bl	8001fb0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001df8:	f008 f978 	bl	800a0ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001dfc:	bf00      	nop
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20005e40 	.word	0x20005e40
 8001e08:	20005e38 	.word	0x20005e38

08001e0c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b087      	sub	sp, #28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001e18:	2308      	movs	r3, #8
 8001e1a:	425b      	negs	r3, r3
 8001e1c:	697a      	ldr	r2, [r7, #20]
 8001e1e:	4413      	add	r3, r2
 8001e20:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <getBlockSize+0x38>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	4013      	ands	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]

	return count;
 8001e34:	68fb      	ldr	r3, [r7, #12]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	371c      	adds	r7, #28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20005e40 	.word	0x20005e40

08001e48 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001e52:	f008 f93d 	bl	800a0d0 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001e56:	6838      	ldr	r0, [r7, #0]
 8001e58:	f7ff feb0 	bl	8001bbc <pvPortMallocMicroROS>
 8001e5c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d017      	beq.n	8001e94 <pvPortReallocMicroROS+0x4c>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d014      	beq.n	8001e94 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ffce 	bl	8001e0c <getBlockSize>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2208      	movs	r2, #8
 8001e74:	1a9b      	subs	r3, r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d201      	bcs.n	8001e84 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	68b8      	ldr	r0, [r7, #8]
 8001e8a:	f01a fd44 	bl	801c916 <memcpy>

		vPortFreeMicroROS(pv);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ff5e 	bl	8001d50 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001e94:	f008 f92a 	bl	800a0ec <xTaskResumeAll>

	return newmem;
 8001e98:	68bb      	ldr	r3, [r7, #8]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001eac:	f008 f910 	bl	800a0d0 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	fb02 f303 	mul.w	r3, r2, r3
 8001eb8:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001eba:	6978      	ldr	r0, [r7, #20]
 8001ebc:	f7ff fe7e 	bl	8001bbc <pvPortMallocMicroROS>
 8001ec0:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001ec6:	e004      	b.n	8001ed2 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	613a      	str	r2, [r7, #16]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	1e5a      	subs	r2, r3, #1
 8001ed6:	617a      	str	r2, [r7, #20]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1f5      	bne.n	8001ec8 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001edc:	f008 f906 	bl	800a0ec <xTaskResumeAll>
  	return mem;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001ef2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001ef6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001ef8:	4b27      	ldr	r3, [pc, #156]	; (8001f98 <prvHeapInit+0xac>)
 8001efa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00c      	beq.n	8001f20 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	3307      	adds	r3, #7
 8001f0a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f023 0307 	bic.w	r3, r3, #7
 8001f12:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	4a1f      	ldr	r2, [pc, #124]	; (8001f98 <prvHeapInit+0xac>)
 8001f1c:	4413      	add	r3, r2
 8001f1e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001f24:	4a1d      	ldr	r2, [pc, #116]	; (8001f9c <prvHeapInit+0xb0>)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <prvHeapInit+0xb0>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	4413      	add	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001f38:	2208      	movs	r2, #8
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1a9b      	subs	r3, r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f023 0307 	bic.w	r3, r3, #7
 8001f46:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4a15      	ldr	r2, [pc, #84]	; (8001fa0 <prvHeapInit+0xb4>)
 8001f4c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001f4e:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <prvHeapInit+0xb4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2200      	movs	r2, #0
 8001f54:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001f56:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <prvHeapInit+0xb4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	1ad2      	subs	r2, r2, r3
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <prvHeapInit+0xb4>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <prvHeapInit+0xb8>)
 8001f7a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4a09      	ldr	r2, [pc, #36]	; (8001fa8 <prvHeapInit+0xbc>)
 8001f82:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <prvHeapInit+0xc0>)
 8001f86:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f8a:	601a      	str	r2, [r3, #0]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	2000222c 	.word	0x2000222c
 8001f9c:	20005e2c 	.word	0x20005e2c
 8001fa0:	20005e34 	.word	0x20005e34
 8001fa4:	20005e3c 	.word	0x20005e3c
 8001fa8:	20005e38 	.word	0x20005e38
 8001fac:	20005e40 	.word	0x20005e40

08001fb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001fb8:	4b28      	ldr	r3, [pc, #160]	; (800205c <prvInsertBlockIntoFreeList+0xac>)
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	e002      	b.n	8001fc4 <prvInsertBlockIntoFreeList+0x14>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d8f7      	bhi.n	8001fbe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	4413      	add	r3, r2
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d108      	bne.n	8001ff2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	441a      	add	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	441a      	add	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d118      	bne.n	8002038 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <prvInsertBlockIntoFreeList+0xb0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d00d      	beq.n	800202e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	441a      	add	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	e008      	b.n	8002040 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <prvInsertBlockIntoFreeList+0xb0>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	e003      	b.n	8002040 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	429a      	cmp	r2, r3
 8002046:	d002      	beq.n	800204e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800204e:	bf00      	nop
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	20005e2c 	.word	0x20005e2c
 8002060:	20005e34 	.word	0x20005e34

08002064 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800206a:	4b10      	ldr	r3, [pc, #64]	; (80020ac <MX_DMA_Init+0x48>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4a0f      	ldr	r2, [pc, #60]	; (80020ac <MX_DMA_Init+0x48>)
 8002070:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002074:	6313      	str	r3, [r2, #48]	; 0x30
 8002076:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <MX_DMA_Init+0x48>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002082:	2200      	movs	r2, #0
 8002084:	2105      	movs	r1, #5
 8002086:	200c      	movs	r0, #12
 8002088:	f001 fe9c 	bl	8003dc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800208c:	200c      	movs	r0, #12
 800208e:	f001 feb5 	bl	8003dfc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002092:	2200      	movs	r2, #0
 8002094:	2105      	movs	r1, #5
 8002096:	200e      	movs	r0, #14
 8002098:	f001 fe94 	bl	8003dc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800209c:	200e      	movs	r0, #14
 800209e:	f001 fead 	bl	8003dfc <HAL_NVIC_EnableIRQ>

}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40023800 	.word	0x40023800

080020b0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80020be:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80020c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020c4:	4904      	ldr	r1, [pc, #16]	; (80020d8 <cubemx_transport_open+0x28>)
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f005 f896 	bl	80071f8 <HAL_UART_Receive_DMA>
    return true;
 80020cc:	2301      	movs	r3, #1
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20005e44 	.word	0x20005e44

080020dc <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80020ea:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f005 f8c7 	bl	8007280 <HAL_UART_DMAStop>
    return true;
 80020f2:	2301      	movs	r3, #1
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, const uint8_t * buf, size_t len, uint8_t * err){
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
 8002108:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002110:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002116:	2b20      	cmp	r3, #32
 8002118:	d11a      	bne.n	8002150 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	b29b      	uxth	r3, r3
 800211e:	461a      	mov	r2, r3
 8002120:	68b9      	ldr	r1, [r7, #8]
 8002122:	6978      	ldr	r0, [r7, #20]
 8002124:	f004 ffec 	bl	8007100 <HAL_UART_Transmit_DMA>
 8002128:	4603      	mov	r3, r0
 800212a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800212c:	e002      	b.n	8002134 <cubemx_transport_write+0x38>
            osDelay(1);
 800212e:	2001      	movs	r0, #1
 8002130:	f006 ff44 	bl	8008fbc <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002134:	7cfb      	ldrb	r3, [r7, #19]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d103      	bne.n	8002142 <cubemx_transport_write+0x46>
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800213e:	2b20      	cmp	r3, #32
 8002140:	d1f5      	bne.n	800212e <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 8002142:	7cfb      	ldrb	r3, [r7, #19]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <cubemx_transport_write+0x50>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	e002      	b.n	8002152 <cubemx_transport_write+0x56>
 800214c:	2300      	movs	r3, #0
 800214e:	e000      	b.n	8002152 <cubemx_transport_write+0x56>
    }else{
        return 0;
 8002150:	2300      	movs	r3, #0
    }
}
 8002152:	4618      	mov	r0, r3
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
	...

0800215c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 800215c:	b580      	push	{r7, lr}
 800215e:	b088      	sub	sp, #32
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
 8002168:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002170:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002176:	b672      	cpsid	i
}
 8002178:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002186:	4a1c      	ldr	r2, [pc, #112]	; (80021f8 <cubemx_transport_read+0x9c>)
 8002188:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800218a:	b662      	cpsie	i
}
 800218c:	bf00      	nop
        __enable_irq();
        ms_used++;
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3301      	adds	r3, #1
 8002192:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002194:	2001      	movs	r0, #1
 8002196:	f006 ff11 	bl	8008fbc <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800219a:	4b18      	ldr	r3, [pc, #96]	; (80021fc <cubemx_transport_read+0xa0>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	4b16      	ldr	r3, [pc, #88]	; (80021f8 <cubemx_transport_read+0x9c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d103      	bne.n	80021ae <cubemx_transport_read+0x52>
 80021a6:	69fa      	ldr	r2, [r7, #28]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	dbe3      	blt.n	8002176 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80021b2:	e011      	b.n	80021d8 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80021b4:	4b11      	ldr	r3, [pc, #68]	; (80021fc <cubemx_transport_read+0xa0>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	440b      	add	r3, r1
 80021be:	4910      	ldr	r1, [pc, #64]	; (8002200 <cubemx_transport_read+0xa4>)
 80021c0:	5c8a      	ldrb	r2, [r1, r2]
 80021c2:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80021c4:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <cubemx_transport_read+0xa0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	3301      	adds	r3, #1
 80021ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021ce:	4a0b      	ldr	r2, [pc, #44]	; (80021fc <cubemx_transport_read+0xa0>)
 80021d0:	6013      	str	r3, [r2, #0]
        wrote++;
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	3301      	adds	r3, #1
 80021d6:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80021d8:	4b08      	ldr	r3, [pc, #32]	; (80021fc <cubemx_transport_read+0xa0>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <cubemx_transport_read+0x9c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d003      	beq.n	80021ec <cubemx_transport_read+0x90>
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d3e3      	bcc.n	80021b4 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 80021ec:	69bb      	ldr	r3, [r7, #24]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3720      	adds	r7, #32
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20006648 	.word	0x20006648
 80021fc:	20006644 	.word	0x20006644
 8002200:	20005e44 	.word	0x20005e44

08002204 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002208:	4a08      	ldr	r2, [pc, #32]	; (800222c <_Z16MX_FREERTOS_Initv+0x28>)
 800220a:	2100      	movs	r1, #0
 800220c:	4808      	ldr	r0, [pc, #32]	; (8002230 <_Z16MX_FREERTOS_Initv+0x2c>)
 800220e:	f006 fe2f 	bl	8008e70 <osThreadNew>
 8002212:	4603      	mov	r3, r0
 8002214:	4a07      	ldr	r2, [pc, #28]	; (8002234 <_Z16MX_FREERTOS_Initv+0x30>)
 8002216:	6013      	str	r3, [r2, #0]

  /* creation of cycleRobot */
  cycleRobotHandle = osThreadNew(cycleRobotTask, NULL, &cycleRobot_attributes);
 8002218:	4a07      	ldr	r2, [pc, #28]	; (8002238 <_Z16MX_FREERTOS_Initv+0x34>)
 800221a:	2100      	movs	r1, #0
 800221c:	4807      	ldr	r0, [pc, #28]	; (800223c <_Z16MX_FREERTOS_Initv+0x38>)
 800221e:	f006 fe27 	bl	8008e70 <osThreadNew>
 8002222:	4603      	mov	r3, r0
 8002224:	4a06      	ldr	r2, [pc, #24]	; (8002240 <_Z16MX_FREERTOS_Initv+0x3c>)
 8002226:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}
 800222c:	0801d770 	.word	0x0801d770
 8002230:	08002249 	.word	0x08002249
 8002234:	20006650 	.word	0x20006650
 8002238:	0801d794 	.word	0x0801d794
 800223c:	080025ad 	.word	0x080025ad
 8002240:	20006654 	.word	0x20006654
 8002244:	00000000 	.word	0x00000000

08002248 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002248:	b5b0      	push	{r4, r5, r7, lr}
 800224a:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800224e:	af02      	add	r7, sp, #8
 8002250:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002254:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002258:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
	rmw_uros_set_custom_transport(
 800225a:	4bbd      	ldr	r3, [pc, #756]	; (8002550 <_Z16StartDefaultTaskPv+0x308>)
 800225c:	9301      	str	r3, [sp, #4]
 800225e:	4bbd      	ldr	r3, [pc, #756]	; (8002554 <_Z16StartDefaultTaskPv+0x30c>)
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	4bbd      	ldr	r3, [pc, #756]	; (8002558 <_Z16StartDefaultTaskPv+0x310>)
 8002264:	4abd      	ldr	r2, [pc, #756]	; (800255c <_Z16StartDefaultTaskPv+0x314>)
 8002266:	49be      	ldr	r1, [pc, #760]	; (8002560 <_Z16StartDefaultTaskPv+0x318>)
 8002268:	2001      	movs	r0, #1
 800226a:	f00b fd41 	bl	800dcf0 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 800226e:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8002272:	4618      	mov	r0, r3
 8002274:	f00b fc6e 	bl	800db54 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8002278:	4bba      	ldr	r3, [pc, #744]	; (8002564 <_Z16StartDefaultTaskPv+0x31c>)
 800227a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
	freeRTOS_allocator.deallocate = microros_deallocate;
 800227e:	4bba      	ldr	r3, [pc, #744]	; (8002568 <_Z16StartDefaultTaskPv+0x320>)
 8002280:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
	freeRTOS_allocator.reallocate = microros_reallocate;
 8002284:	4bb9      	ldr	r3, [pc, #740]	; (800256c <_Z16StartDefaultTaskPv+0x324>)
 8002286:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 800228a:	4bb9      	ldr	r3, [pc, #740]	; (8002570 <_Z16StartDefaultTaskPv+0x328>)
 800228c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) return;
 8002290:	f507 73f6 	add.w	r3, r7, #492	; 0x1ec
 8002294:	4618      	mov	r0, r3
 8002296:	f00b fc6b 	bl	800db70 <rcutils_set_default_allocator>
 800229a:	4603      	mov	r3, r0
 800229c:	f083 0301 	eor.w	r3, r3, #1
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f040 8130 	bne.w	8002508 <_Z16StartDefaultTaskPv+0x2c0>

	rcl_ret_t rc;
	rcl_node_t node; // nodo;
	rcl_timer_t feedback_timer, robot_timer;
	const unsigned int feedback_timer_period = RCL_MS_TO_NS(1000);
 80022a8:	4bb2      	ldr	r3, [pc, #712]	; (8002574 <_Z16StartDefaultTaskPv+0x32c>)
 80022aa:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	const unsigned int robot_timer_period = RCL_MS_TO_NS(10);
 80022ae:	4bb2      	ldr	r3, [pc, #712]	; (8002578 <_Z16StartDefaultTaskPv+0x330>)
 80022b0:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
	//rcl_publisher_t feedback_publisher; // publisher
	rcl_subscription_t subscriber;
	rcl_service_t setup_service, control_service; //servizi

	const char* feedback_publisher_name = "/feedback";	//publisher
 80022b4:	4bb1      	ldr	r3, [pc, #708]	; (800257c <_Z16StartDefaultTaskPv+0x334>)
 80022b6:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
	const char* pwm_subscriber_name = "/pwm";			//subscriber
 80022ba:	4bb1      	ldr	r3, [pc, #708]	; (8002580 <_Z16StartDefaultTaskPv+0x338>)
 80022bc:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	const char* setup_service_name = "/setup";			//servizi
 80022c0:	4bb0      	ldr	r3, [pc, #704]	; (8002584 <_Z16StartDefaultTaskPv+0x33c>)
 80022c2:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	const char* control_service_name = "/control";
 80022c6:	4bb0      	ldr	r3, [pc, #704]	; (8002588 <_Z16StartDefaultTaskPv+0x340>)
 80022c8:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218

	const rosidl_message_type_support_t* feedback_type_support =
		ROSIDL_GET_MSG_TYPE_SUPPORT(racs_services, msg, Feedback);
 80022cc:	f009 fbc4 	bl	800ba58 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback>
 80022d0:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
	const rosidl_message_type_support_t * pwm_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(racs_services, msg, DirectAccess);
 80022d4:	f009 fba8 	bl	800ba28 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess>
 80022d8:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
	const rosidl_service_type_support_t* setup_type_support =
		ROSIDL_GET_SRV_TYPE_SUPPORT(racs_services, srv, Setup);
 80022dc:	f009 fbd4 	bl	800ba88 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup>
 80022e0:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
	const rosidl_service_type_support_t* control_type_support =
		ROSIDL_GET_SRV_TYPE_SUPPORT(racs_services, srv, Control);
 80022e4:	f009 fb7a 	bl	800b9dc <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control>
 80022e8:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
	racs_services__srv__Setup_Request req_setup;
	racs_services__srv__Setup_Response res_setup;
	racs_services__srv__Control_Request req_control;
	racs_services__srv__Control_Response res_control;

	allocator = rcl_get_default_allocator();
 80022ec:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80022f0:	4618      	mov	r0, r3
 80022f2:	f00b fc5b 	bl	800dbac <rcutils_get_default_allocator>
 80022f6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80022fa:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80022fe:	f507 74c4 	add.w	r4, r7, #392	; 0x188
 8002302:	461d      	mov	r5, r3
 8002304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002308:	682b      	ldr	r3, [r5, #0]
 800230a:	6023      	str	r3, [r4, #0]

	rc = rclc_support_init(&support, 0, NULL, &allocator);
 800230c:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002310:	f507 70ce 	add.w	r0, r7, #412	; 0x19c
 8002314:	2200      	movs	r2, #0
 8002316:	2100      	movs	r1, #0
 8002318:	f00b faaa 	bl	800d870 <rclc_support_init>
 800231c:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
	if (rc != RCL_RET_OK) return;
 8002320:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002324:	2b00      	cmp	r3, #0
 8002326:	f040 80f1 	bne.w	800250c <_Z16StartDefaultTaskPv+0x2c4>

	rc = rclc_timer_init_default(&feedback_timer, &support, feedback_timer_period, feedback_timer_callback);
 800232a:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 800232e:	f507 70f0 	add.w	r0, r7, #480	; 0x1e0
 8002332:	4b96      	ldr	r3, [pc, #600]	; (800258c <_Z16StartDefaultTaskPv+0x344>)
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	a384      	add	r3, pc, #528	; (adr r3, 8002548 <_Z16StartDefaultTaskPv+0x300>)
 8002338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233c:	f00b fbd2 	bl	800dae4 <rclc_timer_init_default>
 8002340:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
	if (rc != RCL_RET_OK) return;
 8002344:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002348:	2b00      	cmp	r3, #0
 800234a:	f040 80e1 	bne.w	8002510 <_Z16StartDefaultTaskPv+0x2c8>

	rc = rclc_timer_init_default(&robot_timer, &support, robot_timer_period, robot_timer_callback);
 800234e:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8002352:	f507 70ee 	add.w	r0, r7, #476	; 0x1dc
 8002356:	4b8e      	ldr	r3, [pc, #568]	; (8002590 <_Z16StartDefaultTaskPv+0x348>)
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	4a87      	ldr	r2, [pc, #540]	; (8002578 <_Z16StartDefaultTaskPv+0x330>)
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	f00b fbc0 	bl	800dae4 <rclc_timer_init_default>
 8002364:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
	if (rc != RCL_RET_OK) return;
 8002368:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800236c:	2b00      	cmp	r3, #0
 800236e:	f040 80d1 	bne.w	8002514 <_Z16StartDefaultTaskPv+0x2cc>

	rc = rclc_node_init_default(&node, "STM32_node", "", &support);
 8002372:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8002376:	f507 70f2 	add.w	r0, r7, #484	; 0x1e4
 800237a:	4a86      	ldr	r2, [pc, #536]	; (8002594 <_Z16StartDefaultTaskPv+0x34c>)
 800237c:	4986      	ldr	r1, [pc, #536]	; (8002598 <_Z16StartDefaultTaskPv+0x350>)
 800237e:	f00b fac1 	bl	800d904 <rclc_node_init_default>
 8002382:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
	if (rc != RCL_RET_OK) return;
 8002386:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800238a:	2b00      	cmp	r3, #0
 800238c:	f040 80c4 	bne.w	8002518 <_Z16StartDefaultTaskPv+0x2d0>

	rc = rclc_publisher_init_best_effort(
 8002390:	f507 71f2 	add.w	r1, r7, #484	; 0x1e4
 8002394:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002398:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800239c:	487f      	ldr	r0, [pc, #508]	; (800259c <_Z16StartDefaultTaskPv+0x354>)
 800239e:	f00b faf3 	bl	800d988 <rclc_publisher_init_best_effort>
 80023a2:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
	  &feedback_publisher, &node, feedback_type_support, feedback_publisher_name);
	if (rc != RCL_RET_OK) return;
 80023a6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f040 80b6 	bne.w	800251c <_Z16StartDefaultTaskPv+0x2d4>

	rc = rclc_subscription_init_best_effort(
 80023b0:	f507 71f2 	add.w	r1, r7, #484	; 0x1e4
 80023b4:	f507 70ec 	add.w	r0, r7, #472	; 0x1d8
 80023b8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80023bc:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80023c0:	f00b fb56 	bl	800da70 <rclc_subscription_init_best_effort>
 80023c4:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
	  &subscriber, &node, pwm_type_support, pwm_subscriber_name);
	if (rc != RCL_RET_OK) return;
 80023c8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f040 80a7 	bne.w	8002520 <_Z16StartDefaultTaskPv+0x2d8>

	rc = rclc_service_init_default(
 80023d2:	f507 71f2 	add.w	r1, r7, #484	; 0x1e4
 80023d6:	f507 70ea 	add.w	r0, r7, #468	; 0x1d4
 80023da:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80023de:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80023e2:	f00b fb0b 	bl	800d9fc <rclc_service_init_default>
 80023e6:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
		&setup_service, &node, setup_type_support, setup_service_name);
	if (rc != RCL_RET_OK) return;
 80023ea:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f040 8098 	bne.w	8002524 <_Z16StartDefaultTaskPv+0x2dc>

	rc = rclc_service_init_default(
 80023f4:	f507 71f2 	add.w	r1, r7, #484	; 0x1e4
 80023f8:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 80023fc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002400:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8002404:	f00b fafa 	bl	800d9fc <rclc_service_init_default>
 8002408:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
		&control_service, &node, control_type_support, control_service_name);
	if (rc != RCL_RET_OK) return;
 800240c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002410:	2b00      	cmp	r3, #0
 8002412:	f040 8089 	bne.w	8002528 <_Z16StartDefaultTaskPv+0x2e0>

	rclc_executor_t executor;
	executor = rclc_executor_get_zero_initialized_executor();
 8002416:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800241a:	f5a3 74c0 	sub.w	r4, r3, #384	; 0x180
 800241e:	463b      	mov	r3, r7
 8002420:	4618      	mov	r0, r3
 8002422:	f00a fec3 	bl	800d1ac <rclc_executor_get_zero_initialized_executor>
 8002426:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800242a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800242e:	4620      	mov	r0, r4
 8002430:	4619      	mov	r1, r3
 8002432:	2390      	movs	r3, #144	; 0x90
 8002434:	461a      	mov	r2, r3
 8002436:	f01a fa6e 	bl	801c916 <memcpy>
	unsigned int num_handles = 5; //2 servizi, 2 timer e 1 sub
 800243a:	2305      	movs	r3, #5
 800243c:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
	rclc_executor_init(&executor, &support.context, num_handles, &allocator);
 8002440:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8002444:	f507 71ce 	add.w	r1, r7, #412	; 0x19c
 8002448:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800244c:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8002450:	f00a feb6 	bl	800d1c0 <rclc_executor_init>

	rc = rclc_executor_add_timer(&executor, &feedback_timer);
 8002454:	f507 72f0 	add.w	r2, r7, #480	; 0x1e0
 8002458:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800245c:	4611      	mov	r1, r2
 800245e:	4618      	mov	r0, r3
 8002460:	f00a ff68 	bl	800d334 <rclc_executor_add_timer>
 8002464:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
	if (rc != RCL_RET_OK) return;
 8002468:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800246c:	2b00      	cmp	r3, #0
 800246e:	d15d      	bne.n	800252c <_Z16StartDefaultTaskPv+0x2e4>

	rc = rclc_executor_add_timer(&executor, &robot_timer);
 8002470:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 8002474:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002478:	4611      	mov	r1, r2
 800247a:	4618      	mov	r0, r3
 800247c:	f00a ff5a 	bl	800d334 <rclc_executor_add_timer>
 8002480:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
	if (rc != RCL_RET_OK) return;
 8002484:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002488:	2b00      	cmp	r3, #0
 800248a:	d151      	bne.n	8002530 <_Z16StartDefaultTaskPv+0x2e8>

	rc = rclc_executor_add_subscription(
 800248c:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8002490:	f507 71ec 	add.w	r1, r7, #472	; 0x1d8
 8002494:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 8002498:	2300      	movs	r3, #0
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	4b40      	ldr	r3, [pc, #256]	; (80025a0 <_Z16StartDefaultTaskPv+0x358>)
 800249e:	f00a ff0b 	bl	800d2b8 <rclc_executor_add_subscription>
 80024a2:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
	  &executor, &subscriber, &pwm_msg,
	  &pwm_callback, ON_NEW_DATA);
	if (rc != RCL_RET_OK) return;
 80024a6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d142      	bne.n	8002534 <_Z16StartDefaultTaskPv+0x2ec>

	rc = rclc_executor_add_service(
 80024ae:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80024b2:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 80024b6:	f507 71ea 	add.w	r1, r7, #468	; 0x1d4
 80024ba:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80024be:	4c39      	ldr	r4, [pc, #228]	; (80025a4 <_Z16StartDefaultTaskPv+0x35c>)
 80024c0:	9400      	str	r4, [sp, #0]
 80024c2:	f00a ff65 	bl	800d390 <rclc_executor_add_service>
 80024c6:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
		&executor, &setup_service, &req_setup,
		&res_setup, setup_callback);
	if (rc != RCL_RET_OK) return;
 80024ca:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d132      	bne.n	8002538 <_Z16StartDefaultTaskPv+0x2f0>

	rc = rclc_executor_add_service(
 80024d2:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80024d6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 80024da:	f507 71e8 	add.w	r1, r7, #464	; 0x1d0
 80024de:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 80024e2:	4c31      	ldr	r4, [pc, #196]	; (80025a8 <_Z16StartDefaultTaskPv+0x360>)
 80024e4:	9400      	str	r4, [sp, #0]
 80024e6:	f00a ff53 	bl	800d390 <rclc_executor_add_service>
 80024ea:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
		&executor, &control_service, &req_control,
		&res_control, control_callback);
	if (rc != RCL_RET_OK) return;
 80024ee:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d122      	bne.n	800253c <_Z16StartDefaultTaskPv+0x2f4>

	rclc_executor_spin(&executor);
 80024f6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80024fa:	4618      	mov	r0, r3
 80024fc:	f00b f978 	bl	800d7f0 <rclc_executor_spin>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002500:	2001      	movs	r0, #1
 8002502:	f006 fd5b 	bl	8008fbc <osDelay>
 8002506:	e7fb      	b.n	8002500 <_Z16StartDefaultTaskPv+0x2b8>
	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) return;
 8002508:	bf00      	nop
 800250a:	e018      	b.n	800253e <_Z16StartDefaultTaskPv+0x2f6>
	if (rc != RCL_RET_OK) return;
 800250c:	bf00      	nop
 800250e:	e016      	b.n	800253e <_Z16StartDefaultTaskPv+0x2f6>
	if (rc != RCL_RET_OK) return;
 8002510:	bf00      	nop
 8002512:	e014      	b.n	800253e <_Z16StartDefaultTaskPv+0x2f6>
	if (rc != RCL_RET_OK) return;
 8002514:	bf00      	nop
 8002516:	e012      	b.n	800253e <_Z16StartDefaultTaskPv+0x2f6>
	if (rc != RCL_RET_OK) return;
 8002518:	bf00      	nop
 800251a:	e010      	b.n	800253e <_Z16StartDefaultTaskPv+0x2f6>
	if (rc != RCL_RET_OK) return;
 800251c:	bf00      	nop
 800251e:	e00e      	b.n	800253e <_Z16StartDefaultTaskPv+0x2f6>
	if (rc != RCL_RET_OK) return;
 8002520:	bf00      	nop
 8002522:	e00c      	b.n	800253e <_Z16StartDefaultTaskPv+0x2f6>
	if (rc != RCL_RET_OK) return;
 8002524:	bf00      	nop
 8002526:	e00a      	b.n	800253e <_Z16StartDefaultTaskPv+0x2f6>
	if (rc != RCL_RET_OK) return;
 8002528:	bf00      	nop
 800252a:	e008      	b.n	800253e <_Z16StartDefaultTaskPv+0x2f6>
	if (rc != RCL_RET_OK) return;
 800252c:	bf00      	nop
 800252e:	e006      	b.n	800253e <_Z16StartDefaultTaskPv+0x2f6>
	if (rc != RCL_RET_OK) return;
 8002530:	bf00      	nop
 8002532:	e004      	b.n	800253e <_Z16StartDefaultTaskPv+0x2f6>
	if (rc != RCL_RET_OK) return;
 8002534:	bf00      	nop
 8002536:	e002      	b.n	800253e <_Z16StartDefaultTaskPv+0x2f6>
	if (rc != RCL_RET_OK) return;
 8002538:	bf00      	nop
 800253a:	e000      	b.n	800253e <_Z16StartDefaultTaskPv+0x2f6>
	if (rc != RCL_RET_OK) return;
 800253c:	bf00      	nop
  }
  /* USER CODE END StartDefaultTask */
}
 800253e:	f507 770c 	add.w	r7, r7, #560	; 0x230
 8002542:	46bd      	mov	sp, r7
 8002544:	bdb0      	pop	{r4, r5, r7, pc}
 8002546:	bf00      	nop
 8002548:	3b9aca00 	.word	0x3b9aca00
 800254c:	00000000 	.word	0x00000000
 8002550:	0800215d 	.word	0x0800215d
 8002554:	080020fd 	.word	0x080020fd
 8002558:	080020dd 	.word	0x080020dd
 800255c:	080020b1 	.word	0x080020b1
 8002560:	200068c8 	.word	0x200068c8
 8002564:	080028c1 	.word	0x080028c1
 8002568:	08002905 	.word	0x08002905
 800256c:	0800293d 	.word	0x0800293d
 8002570:	080029a9 	.word	0x080029a9
 8002574:	3b9aca00 	.word	0x3b9aca00
 8002578:	00989680 	.word	0x00989680
 800257c:	0801d700 	.word	0x0801d700
 8002580:	0801d70c 	.word	0x0801d70c
 8002584:	0801d714 	.word	0x0801d714
 8002588:	0801d71c 	.word	0x0801d71c
 800258c:	08000771 	.word	0x08000771
 8002590:	08000819 	.word	0x08000819
 8002594:	0801d728 	.word	0x0801d728
 8002598:	0801d72c 	.word	0x0801d72c
 800259c:	2000664c 	.word	0x2000664c
 80025a0:	080006ad 	.word	0x080006ad
 80025a4:	08000739 	.word	0x08000739
 80025a8:	08000701 	.word	0x08000701

080025ac <_Z14cycleRobotTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_cycleRobotTask */
void cycleRobotTask(void *argument)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN cycleRobotTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80025b4:	2001      	movs	r0, #1
 80025b6:	f006 fd01 	bl	8008fbc <osDelay>
 80025ba:	e7fb      	b.n	80025b4 <_Z14cycleRobotTaskPv+0x8>

080025bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08c      	sub	sp, #48	; 0x30
 80025c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c2:	f107 031c 	add.w	r3, r7, #28
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	609a      	str	r2, [r3, #8]
 80025ce:	60da      	str	r2, [r3, #12]
 80025d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025d2:	4b58      	ldr	r3, [pc, #352]	; (8002734 <MX_GPIO_Init+0x178>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	4a57      	ldr	r2, [pc, #348]	; (8002734 <MX_GPIO_Init+0x178>)
 80025d8:	f043 0310 	orr.w	r3, r3, #16
 80025dc:	6313      	str	r3, [r2, #48]	; 0x30
 80025de:	4b55      	ldr	r3, [pc, #340]	; (8002734 <MX_GPIO_Init+0x178>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	61bb      	str	r3, [r7, #24]
 80025e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ea:	4b52      	ldr	r3, [pc, #328]	; (8002734 <MX_GPIO_Init+0x178>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a51      	ldr	r2, [pc, #324]	; (8002734 <MX_GPIO_Init+0x178>)
 80025f0:	f043 0304 	orr.w	r3, r3, #4
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b4f      	ldr	r3, [pc, #316]	; (8002734 <MX_GPIO_Init+0x178>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002602:	4b4c      	ldr	r3, [pc, #304]	; (8002734 <MX_GPIO_Init+0x178>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	4a4b      	ldr	r2, [pc, #300]	; (8002734 <MX_GPIO_Init+0x178>)
 8002608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800260c:	6313      	str	r3, [r2, #48]	; 0x30
 800260e:	4b49      	ldr	r3, [pc, #292]	; (8002734 <MX_GPIO_Init+0x178>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800261a:	4b46      	ldr	r3, [pc, #280]	; (8002734 <MX_GPIO_Init+0x178>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	4a45      	ldr	r2, [pc, #276]	; (8002734 <MX_GPIO_Init+0x178>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6313      	str	r3, [r2, #48]	; 0x30
 8002626:	4b43      	ldr	r3, [pc, #268]	; (8002734 <MX_GPIO_Init+0x178>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002632:	4b40      	ldr	r3, [pc, #256]	; (8002734 <MX_GPIO_Init+0x178>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	4a3f      	ldr	r2, [pc, #252]	; (8002734 <MX_GPIO_Init+0x178>)
 8002638:	f043 0302 	orr.w	r3, r3, #2
 800263c:	6313      	str	r3, [r2, #48]	; 0x30
 800263e:	4b3d      	ldr	r3, [pc, #244]	; (8002734 <MX_GPIO_Init+0x178>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800264a:	4b3a      	ldr	r3, [pc, #232]	; (8002734 <MX_GPIO_Init+0x178>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a39      	ldr	r2, [pc, #228]	; (8002734 <MX_GPIO_Init+0x178>)
 8002650:	f043 0308 	orr.w	r3, r3, #8
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b37      	ldr	r3, [pc, #220]	; (8002734 <MX_GPIO_Init+0x178>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002662:	4b34      	ldr	r3, [pc, #208]	; (8002734 <MX_GPIO_Init+0x178>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	4a33      	ldr	r2, [pc, #204]	; (8002734 <MX_GPIO_Init+0x178>)
 8002668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800266c:	6313      	str	r3, [r2, #48]	; 0x30
 800266e:	4b31      	ldr	r3, [pc, #196]	; (8002734 <MX_GPIO_Init+0x178>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800267a:	2200      	movs	r2, #0
 800267c:	f244 0181 	movw	r1, #16513	; 0x4081
 8002680:	482d      	ldr	r0, [pc, #180]	; (8002738 <MX_GPIO_Init+0x17c>)
 8002682:	f002 f9a3 	bl	80049cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR5_INA_Pin|MOTOR5_INB_Pin|MOTOR1_INA_Pin|MOTOR1_INB_Pin
 8002686:	2200      	movs	r2, #0
 8002688:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 800268c:	482b      	ldr	r0, [pc, #172]	; (800273c <MX_GPIO_Init+0x180>)
 800268e:	f002 f99d 	bl	80049cc <HAL_GPIO_WritePin>
                          |MOTOR2_INA_Pin|MOTOR2_INB_Pin|MOTOR3_INA_Pin|MOTOR3_INB_Pin
                          |MOTOR4_INA_Pin|MOTOR4_INB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MOTOR6_INA_Pin|MOTOR6_INB_Pin|PIN_TOGGLE_Pin|MOTORS_EN_Pin
 8002692:	2200      	movs	r2, #0
 8002694:	f647 616c 	movw	r1, #32364	; 0x7e6c
 8002698:	4829      	ldr	r0, [pc, #164]	; (8002740 <MX_GPIO_Init+0x184>)
 800269a:	f002 f997 	bl	80049cc <HAL_GPIO_WritePin>
                          |MOTOR1_END_Pin|MOTOR2_END_Pin|MOTOR3_END_Pin|MOTOR4_END_Pin
                          |MOTOR5_END_Pin|MOTOR6_END_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800269e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80026a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80026ae:	f107 031c 	add.w	r3, r7, #28
 80026b2:	4619      	mov	r1, r3
 80026b4:	4823      	ldr	r0, [pc, #140]	; (8002744 <MX_GPIO_Init+0x188>)
 80026b6:	f001 ffc5 	bl	8004644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80026ba:	f244 0381 	movw	r3, #16513	; 0x4081
 80026be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c0:	2301      	movs	r3, #1
 80026c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c8:	2300      	movs	r3, #0
 80026ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026cc:	f107 031c 	add.w	r3, r7, #28
 80026d0:	4619      	mov	r1, r3
 80026d2:	4819      	ldr	r0, [pc, #100]	; (8002738 <MX_GPIO_Init+0x17c>)
 80026d4:	f001 ffb6 	bl	8004644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = MOTOR5_INA_Pin|MOTOR5_INB_Pin|MOTOR1_INA_Pin|MOTOR1_INB_Pin
 80026d8:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 80026dc:	61fb      	str	r3, [r7, #28]
                          |MOTOR2_INA_Pin|MOTOR2_INB_Pin|MOTOR3_INA_Pin|MOTOR3_INB_Pin
                          |MOTOR4_INA_Pin|MOTOR4_INB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026de:	2301      	movs	r3, #1
 80026e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e6:	2300      	movs	r3, #0
 80026e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026ea:	f107 031c 	add.w	r3, r7, #28
 80026ee:	4619      	mov	r1, r3
 80026f0:	4812      	ldr	r0, [pc, #72]	; (800273c <MX_GPIO_Init+0x180>)
 80026f2:	f001 ffa7 	bl	8004644 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = MOTOR6_INA_Pin|MOTOR6_INB_Pin|PIN_TOGGLE_Pin|MOTORS_EN_Pin
 80026f6:	f647 636c 	movw	r3, #32364	; 0x7e6c
 80026fa:	61fb      	str	r3, [r7, #28]
                          |MOTOR1_END_Pin|MOTOR2_END_Pin|MOTOR3_END_Pin|MOTOR4_END_Pin
                          |MOTOR5_END_Pin|MOTOR6_END_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026fc:	2301      	movs	r3, #1
 80026fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	2300      	movs	r3, #0
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002704:	2300      	movs	r3, #0
 8002706:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002708:	f107 031c 	add.w	r3, r7, #28
 800270c:	4619      	mov	r1, r3
 800270e:	480c      	ldr	r0, [pc, #48]	; (8002740 <MX_GPIO_Init+0x184>)
 8002710:	f001 ff98 	bl	8004644 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002714:	2380      	movs	r3, #128	; 0x80
 8002716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002718:	2300      	movs	r3, #0
 800271a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002720:	f107 031c 	add.w	r3, r7, #28
 8002724:	4619      	mov	r1, r3
 8002726:	4806      	ldr	r0, [pc, #24]	; (8002740 <MX_GPIO_Init+0x184>)
 8002728:	f001 ff8c 	bl	8004644 <HAL_GPIO_Init>

}
 800272c:	bf00      	nop
 800272e:	3730      	adds	r7, #48	; 0x30
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40023800 	.word	0x40023800
 8002738:	40020400 	.word	0x40020400
 800273c:	40020c00 	.word	0x40020c00
 8002740:	40021800 	.word	0x40021800
 8002744:	40020800 	.word	0x40020800

08002748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800274c:	f001 fa31 	bl	8003bb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002750:	f000 f81e 	bl	8002790 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002754:	f7ff ff32 	bl	80025bc <MX_GPIO_Init>
  MX_DMA_Init();
 8002758:	f7ff fc84 	bl	8002064 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800275c:	f001 f850 	bl	8003800 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002760:	f001 f94e 	bl	8003a00 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8002764:	f000 fbc8 	bl	8002ef8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002768:	f000 fc7a 	bl	8003060 <MX_TIM2_Init>
  MX_TIM3_Init();
 800276c:	f000 fccc 	bl	8003108 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002770:	f000 fd20 	bl	80031b4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002774:	f000 fd74 	bl	8003260 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002778:	f000 fdc8 	bl	800330c <MX_TIM8_Init>
  MX_TIM9_Init();
 800277c:	f000 fe20 	bl	80033c0 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002780:	f006 fb0c 	bl	8008d9c <osKernelInitialize>
  MX_FREERTOS_Init();
 8002784:	f7ff fd3e 	bl	8002204 <_Z16MX_FREERTOS_Initv>

  /* Start scheduler */
  osKernelStart();
 8002788:	f006 fb3c 	bl	8008e04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800278c:	e7fe      	b.n	800278c <main+0x44>
	...

08002790 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b094      	sub	sp, #80	; 0x50
 8002794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002796:	f107 031c 	add.w	r3, r7, #28
 800279a:	2234      	movs	r2, #52	; 0x34
 800279c:	2100      	movs	r1, #0
 800279e:	4618      	mov	r0, r3
 80027a0:	f019 ff88 	bl	801c6b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027a4:	f107 0308 	add.w	r3, r7, #8
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80027b4:	f002 fa6c 	bl	8004c90 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027b8:	4b33      	ldr	r3, [pc, #204]	; (8002888 <_Z18SystemClock_Configv+0xf8>)
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	4a32      	ldr	r2, [pc, #200]	; (8002888 <_Z18SystemClock_Configv+0xf8>)
 80027be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c2:	6413      	str	r3, [r2, #64]	; 0x40
 80027c4:	4b30      	ldr	r3, [pc, #192]	; (8002888 <_Z18SystemClock_Configv+0xf8>)
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027cc:	607b      	str	r3, [r7, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80027d0:	4b2e      	ldr	r3, [pc, #184]	; (800288c <_Z18SystemClock_Configv+0xfc>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80027d8:	4a2c      	ldr	r2, [pc, #176]	; (800288c <_Z18SystemClock_Configv+0xfc>)
 80027da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027de:	6013      	str	r3, [r2, #0]
 80027e0:	4b2a      	ldr	r3, [pc, #168]	; (800288c <_Z18SystemClock_Configv+0xfc>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027e8:	603b      	str	r3, [r7, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027ec:	2301      	movs	r3, #1
 80027ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80027f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80027f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027f6:	2302      	movs	r3, #2
 80027f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002800:	2304      	movs	r3, #4
 8002802:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002804:	2360      	movs	r3, #96	; 0x60
 8002806:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002808:	2302      	movs	r3, #2
 800280a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800280c:	2304      	movs	r3, #4
 800280e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002810:	2302      	movs	r3, #2
 8002812:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002814:	f107 031c 	add.w	r3, r7, #28
 8002818:	4618      	mov	r0, r3
 800281a:	f002 fa99 	bl	8004d50 <HAL_RCC_OscConfig>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	bf14      	ite	ne
 8002824:	2301      	movne	r3, #1
 8002826:	2300      	moveq	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800282e:	f000 f841 	bl	80028b4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002832:	f002 fa3d 	bl	8004cb0 <HAL_PWREx_EnableOverDrive>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	bf14      	ite	ne
 800283c:	2301      	movne	r3, #1
 800283e:	2300      	moveq	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8002846:	f000 f835 	bl	80028b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800284a:	230f      	movs	r3, #15
 800284c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800284e:	2302      	movs	r3, #2
 8002850:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800285a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002860:	f107 0308 	add.w	r3, r7, #8
 8002864:	2103      	movs	r1, #3
 8002866:	4618      	mov	r0, r3
 8002868:	f002 fd20 	bl	80052ac <HAL_RCC_ClockConfig>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	bf14      	ite	ne
 8002872:	2301      	movne	r3, #1
 8002874:	2300      	moveq	r3, #0
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <_Z18SystemClock_Configv+0xf0>
  {
    Error_Handler();
 800287c:	f000 f81a 	bl	80028b4 <Error_Handler>
  }
}
 8002880:	bf00      	nop
 8002882:	3750      	adds	r7, #80	; 0x50
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40023800 	.word	0x40023800
 800288c:	40007000 	.word	0x40007000

08002890 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d101      	bne.n	80028a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80028a2:	f001 f993 	bl	8003bcc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80028a6:	bf00      	nop
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40001000 	.word	0x40001000

080028b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80028b8:	b672      	cpsid	i
}
 80028ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028bc:	e7fe      	b.n	80028bc <Error_Handler+0x8>
	...

080028c0 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80028ca:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <microros_allocate+0x3c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4413      	add	r3, r2
 80028d4:	461a      	mov	r2, r3
 80028d6:	4b09      	ldr	r3, [pc, #36]	; (80028fc <microros_allocate+0x3c>)
 80028d8:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80028da:	4b09      	ldr	r3, [pc, #36]	; (8002900 <microros_allocate+0x40>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4413      	add	r3, r2
 80028e4:	461a      	mov	r2, r3
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <microros_allocate+0x40>)
 80028e8:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff f966 	bl	8001bbc <pvPortMallocMicroROS>
 80028f0:	4603      	mov	r3, r0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20006658 	.word	0x20006658
 8002900:	2000665c 	.word	0x2000665c

08002904 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00c      	beq.n	800292e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff fa79 	bl	8001e0c <getBlockSize>
 800291a:	4603      	mov	r3, r0
 800291c:	4a06      	ldr	r2, [pc, #24]	; (8002938 <microros_deallocate+0x34>)
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	461a      	mov	r2, r3
 8002924:	4b04      	ldr	r3, [pc, #16]	; (8002938 <microros_deallocate+0x34>)
 8002926:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7ff fa11 	bl	8001d50 <vPortFreeMicroROS>
  }
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	2000665c 	.word	0x2000665c

0800293c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8002948:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <microros_reallocate+0x64>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	461a      	mov	r2, r3
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	4413      	add	r3, r2
 8002952:	461a      	mov	r2, r3
 8002954:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <microros_reallocate+0x64>)
 8002956:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8002958:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <microros_reallocate+0x68>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	4413      	add	r3, r2
 8002962:	461a      	mov	r2, r3
 8002964:	4b0f      	ldr	r3, [pc, #60]	; (80029a4 <microros_reallocate+0x68>)
 8002966:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d104      	bne.n	8002978 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800296e:	68b8      	ldr	r0, [r7, #8]
 8002970:	f7ff f924 	bl	8001bbc <pvPortMallocMicroROS>
 8002974:	4603      	mov	r3, r0
 8002976:	e00e      	b.n	8002996 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8002978:	68f8      	ldr	r0, [r7, #12]
 800297a:	f7ff fa47 	bl	8001e0c <getBlockSize>
 800297e:	4603      	mov	r3, r0
 8002980:	4a08      	ldr	r2, [pc, #32]	; (80029a4 <microros_reallocate+0x68>)
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	461a      	mov	r2, r3
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <microros_reallocate+0x68>)
 800298a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f7ff fa5a 	bl	8001e48 <pvPortReallocMicroROS>
 8002994:	4603      	mov	r3, r0
  }
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20006658 	.word	0x20006658
 80029a4:	2000665c 	.word	0x2000665c

080029a8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	68ba      	ldr	r2, [r7, #8]
 80029b8:	fb02 f303 	mul.w	r3, r2, r3
 80029bc:	4a0c      	ldr	r2, [pc, #48]	; (80029f0 <microros_zero_allocate+0x48>)
 80029be:	6812      	ldr	r2, [r2, #0]
 80029c0:	4413      	add	r3, r2
 80029c2:	461a      	mov	r2, r3
 80029c4:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <microros_zero_allocate+0x48>)
 80029c6:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	fb02 f303 	mul.w	r3, r2, r3
 80029d0:	4a08      	ldr	r2, [pc, #32]	; (80029f4 <microros_zero_allocate+0x4c>)
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	4413      	add	r3, r2
 80029d6:	461a      	mov	r2, r3
 80029d8:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <microros_zero_allocate+0x4c>)
 80029da:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f7ff fa5f 	bl	8001ea2 <pvPortCallocMicroROS>
 80029e4:	4603      	mov	r3, r0
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	20006658 	.word	0x20006658
 80029f4:	2000665c 	.word	0x2000665c

080029f8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80029f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029fc:	b086      	sub	sp, #24
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002a04:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002a0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a0e:	a320      	add	r3, pc, #128	; (adr r3, 8002a90 <UTILS_NanosecondsToTimespec+0x98>)
 8002a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a14:	f7fd fc7c 	bl	8000310 <__aeabi_ldivmod>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002a22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a26:	a31a      	add	r3, pc, #104	; (adr r3, 8002a90 <UTILS_NanosecondsToTimespec+0x98>)
 8002a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2c:	f7fd fc70 	bl	8000310 <__aeabi_ldivmod>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	da20      	bge.n	8002a7e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	4a11      	ldr	r2, [pc, #68]	; (8002a88 <UTILS_NanosecondsToTimespec+0x90>)
 8002a42:	fb82 1203 	smull	r1, r2, r2, r3
 8002a46:	1712      	asrs	r2, r2, #28
 8002a48:	17db      	asrs	r3, r3, #31
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a56:	6979      	ldr	r1, [r7, #20]
 8002a58:	17c8      	asrs	r0, r1, #31
 8002a5a:	460c      	mov	r4, r1
 8002a5c:	4605      	mov	r5, r0
 8002a5e:	ebb2 0804 	subs.w	r8, r2, r4
 8002a62:	eb63 0905 	sbc.w	r9, r3, r5
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	4906      	ldr	r1, [pc, #24]	; (8002a8c <UTILS_NanosecondsToTimespec+0x94>)
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	441a      	add	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	609a      	str	r2, [r3, #8]
    }
}
 8002a7e:	bf00      	nop
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a88:	44b82fa1 	.word	0x44b82fa1
 8002a8c:	3b9aca00 	.word	0x3b9aca00
 8002a90:	3b9aca00 	.word	0x3b9aca00
 8002a94:	00000000 	.word	0x00000000

08002a98 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a9c:	b08e      	sub	sp, #56	; 0x38
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6278      	str	r0, [r7, #36]	; 0x24
 8002aa2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002aa4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	6013      	str	r3, [r2, #0]
 8002aac:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002aba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f007 fda0 	bl	800a604 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac6:	17da      	asrs	r2, r3, #31
 8002ac8:	61bb      	str	r3, [r7, #24]
 8002aca:	61fa      	str	r2, [r7, #28]
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	69b9      	ldr	r1, [r7, #24]
 8002ad6:	000b      	movs	r3, r1
 8002ad8:	2200      	movs	r2, #0
 8002ada:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	461c      	mov	r4, r3
 8002ae4:	4615      	mov	r5, r2
 8002ae6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002aea:	1911      	adds	r1, r2, r4
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	416b      	adcs	r3, r5
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002af6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002afa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	f04f 0400 	mov.w	r4, #0
 8002b06:	f04f 0500 	mov.w	r5, #0
 8002b0a:	015d      	lsls	r5, r3, #5
 8002b0c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002b10:	0154      	lsls	r4, r2, #5
 8002b12:	4622      	mov	r2, r4
 8002b14:	462b      	mov	r3, r5
 8002b16:	ebb2 0800 	subs.w	r8, r2, r0
 8002b1a:	eb63 0901 	sbc.w	r9, r3, r1
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002b2a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002b2e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002b32:	4690      	mov	r8, r2
 8002b34:	4699      	mov	r9, r3
 8002b36:	eb18 0a00 	adds.w	sl, r8, r0
 8002b3a:	eb49 0b01 	adc.w	fp, r9, r1
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	f04f 0300 	mov.w	r3, #0
 8002b46:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b4a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b4e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b52:	ebb2 040a 	subs.w	r4, r2, sl
 8002b56:	603c      	str	r4, [r7, #0]
 8002b58:	eb63 030b 	sbc.w	r3, r3, fp
 8002b5c:	607b      	str	r3, [r7, #4]
 8002b5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b62:	4623      	mov	r3, r4
 8002b64:	181b      	adds	r3, r3, r0
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	462b      	mov	r3, r5
 8002b6a:	eb41 0303 	adc.w	r3, r1, r3
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	6a3a      	ldr	r2, [r7, #32]
 8002b72:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b76:	f7ff ff3f 	bl	80029f8 <UTILS_NanosecondsToTimespec>

    return 0;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3738      	adds	r7, #56	; 0x38
 8002b80:	46bd      	mov	sp, r7
 8002b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <HAL_MspInit+0x4c>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	4a10      	ldr	r2, [pc, #64]	; (8002bd4 <HAL_MspInit+0x4c>)
 8002b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b98:	6413      	str	r3, [r2, #64]	; 0x40
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	; (8002bd4 <HAL_MspInit+0x4c>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	607b      	str	r3, [r7, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <HAL_MspInit+0x4c>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	4a0a      	ldr	r2, [pc, #40]	; (8002bd4 <HAL_MspInit+0x4c>)
 8002bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bb2:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <HAL_MspInit+0x4c>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bba:	603b      	str	r3, [r7, #0]
 8002bbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	210f      	movs	r1, #15
 8002bc2:	f06f 0001 	mvn.w	r0, #1
 8002bc6:	f001 f8fd 	bl	8003dc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40023800 	.word	0x40023800

08002bd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08e      	sub	sp, #56	; 0x38
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002be8:	4b33      	ldr	r3, [pc, #204]	; (8002cb8 <HAL_InitTick+0xe0>)
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	4a32      	ldr	r2, [pc, #200]	; (8002cb8 <HAL_InitTick+0xe0>)
 8002bee:	f043 0310 	orr.w	r3, r3, #16
 8002bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf4:	4b30      	ldr	r3, [pc, #192]	; (8002cb8 <HAL_InitTick+0xe0>)
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	f003 0310 	and.w	r3, r3, #16
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c00:	f107 0210 	add.w	r2, r7, #16
 8002c04:	f107 0314 	add.w	r3, r7, #20
 8002c08:	4611      	mov	r1, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f002 fd74 	bl	80056f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d103      	bne.n	8002c22 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c1a:	f002 fd45 	bl	80056a8 <HAL_RCC_GetPCLK1Freq>
 8002c1e:	6378      	str	r0, [r7, #52]	; 0x34
 8002c20:	e004      	b.n	8002c2c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002c22:	f002 fd41 	bl	80056a8 <HAL_RCC_GetPCLK1Freq>
 8002c26:	4603      	mov	r3, r0
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c2e:	4a23      	ldr	r2, [pc, #140]	; (8002cbc <HAL_InitTick+0xe4>)
 8002c30:	fba2 2303 	umull	r2, r3, r2, r3
 8002c34:	0c9b      	lsrs	r3, r3, #18
 8002c36:	3b01      	subs	r3, #1
 8002c38:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002c3a:	4b21      	ldr	r3, [pc, #132]	; (8002cc0 <HAL_InitTick+0xe8>)
 8002c3c:	4a21      	ldr	r2, [pc, #132]	; (8002cc4 <HAL_InitTick+0xec>)
 8002c3e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002c40:	4b1f      	ldr	r3, [pc, #124]	; (8002cc0 <HAL_InitTick+0xe8>)
 8002c42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c46:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002c48:	4a1d      	ldr	r2, [pc, #116]	; (8002cc0 <HAL_InitTick+0xe8>)
 8002c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002c4e:	4b1c      	ldr	r3, [pc, #112]	; (8002cc0 <HAL_InitTick+0xe8>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c54:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <HAL_InitTick+0xe8>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c5a:	4b19      	ldr	r3, [pc, #100]	; (8002cc0 <HAL_InitTick+0xe8>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002c60:	4817      	ldr	r0, [pc, #92]	; (8002cc0 <HAL_InitTick+0xe8>)
 8002c62:	f003 f9a3 	bl	8005fac <HAL_TIM_Base_Init>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002c6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d11b      	bne.n	8002cac <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002c74:	4812      	ldr	r0, [pc, #72]	; (8002cc0 <HAL_InitTick+0xe8>)
 8002c76:	f003 f9fb 	bl	8006070 <HAL_TIM_Base_Start_IT>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002c80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d111      	bne.n	8002cac <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c88:	2036      	movs	r0, #54	; 0x36
 8002c8a:	f001 f8b7 	bl	8003dfc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b0f      	cmp	r3, #15
 8002c92:	d808      	bhi.n	8002ca6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002c94:	2200      	movs	r2, #0
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	2036      	movs	r0, #54	; 0x36
 8002c9a:	f001 f893 	bl	8003dc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <HAL_InitTick+0xf0>)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6013      	str	r3, [r2, #0]
 8002ca4:	e002      	b.n	8002cac <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002cac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3738      	adds	r7, #56	; 0x38
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	431bde83 	.word	0x431bde83
 8002cc0:	20006660 	.word	0x20006660
 8002cc4:	40001000 	.word	0x40001000
 8002cc8:	20000008 	.word	0x20000008

08002ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cd0:	e7fe      	b.n	8002cd0 <NMI_Handler+0x4>

08002cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cd6:	e7fe      	b.n	8002cd6 <HardFault_Handler+0x4>

08002cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cdc:	e7fe      	b.n	8002cdc <MemManage_Handler+0x4>

08002cde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ce2:	e7fe      	b.n	8002ce2 <BusFault_Handler+0x4>

08002ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ce8:	e7fe      	b.n	8002ce8 <UsageFault_Handler+0x4>

08002cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002cfc:	4802      	ldr	r0, [pc, #8]	; (8002d08 <DMA1_Stream1_IRQHandler+0x10>)
 8002cfe:	f001 fa2b 	bl	8004158 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	200069b0 	.word	0x200069b0

08002d0c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002d10:	4802      	ldr	r0, [pc, #8]	; (8002d1c <DMA1_Stream3_IRQHandler+0x10>)
 8002d12:	f001 fa21 	bl	8004158 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002d16:	bf00      	nop
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20006950 	.word	0x20006950

08002d20 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d24:	4802      	ldr	r0, [pc, #8]	; (8002d30 <USART3_IRQHandler+0x10>)
 8002d26:	f004 fb3d 	bl	80073a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002d2a:	bf00      	nop
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	200068c8 	.word	0x200068c8

08002d34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002d38:	4802      	ldr	r0, [pc, #8]	; (8002d44 <TIM6_DAC_IRQHandler+0x10>)
 8002d3a:	f003 fb0f 	bl	800635c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20006660 	.word	0x20006660

08002d48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return 1;
 8002d4c:	2301      	movs	r3, #1
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <_kill>:

int _kill(int pid, int sig)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d62:	f019 fda3 	bl	801c8ac <__errno>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2216      	movs	r2, #22
 8002d6a:	601a      	str	r2, [r3, #0]
  return -1;
 8002d6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <_exit>:

void _exit (int status)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff ffe7 	bl	8002d58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d8a:	e7fe      	b.n	8002d8a <_exit+0x12>

08002d8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d98:	2300      	movs	r3, #0
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	e00a      	b.n	8002db4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d9e:	f3af 8000 	nop.w
 8002da2:	4601      	mov	r1, r0
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	60ba      	str	r2, [r7, #8]
 8002daa:	b2ca      	uxtb	r2, r1
 8002dac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	3301      	adds	r3, #1
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	dbf0      	blt.n	8002d9e <_read+0x12>
  }

  return len;
 8002dbc:	687b      	ldr	r3, [r7, #4]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b086      	sub	sp, #24
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	60f8      	str	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	617b      	str	r3, [r7, #20]
 8002dd6:	e009      	b.n	8002dec <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	1c5a      	adds	r2, r3, #1
 8002ddc:	60ba      	str	r2, [r7, #8]
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	3301      	adds	r3, #1
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	dbf1      	blt.n	8002dd8 <_write+0x12>
  }
  return len;
 8002df4:	687b      	ldr	r3, [r7, #4]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <_close>:

int _close(int file)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e26:	605a      	str	r2, [r3, #4]
  return 0;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <_isatty>:

int _isatty(int file)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e3e:	2301      	movs	r3, #1
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3714      	adds	r7, #20
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
	...

08002e68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e70:	4a14      	ldr	r2, [pc, #80]	; (8002ec4 <_sbrk+0x5c>)
 8002e72:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <_sbrk+0x60>)
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e7c:	4b13      	ldr	r3, [pc, #76]	; (8002ecc <_sbrk+0x64>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d102      	bne.n	8002e8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e84:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <_sbrk+0x64>)
 8002e86:	4a12      	ldr	r2, [pc, #72]	; (8002ed0 <_sbrk+0x68>)
 8002e88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e8a:	4b10      	ldr	r3, [pc, #64]	; (8002ecc <_sbrk+0x64>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4413      	add	r3, r2
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d207      	bcs.n	8002ea8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e98:	f019 fd08 	bl	801c8ac <__errno>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	220c      	movs	r2, #12
 8002ea0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ea2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ea6:	e009      	b.n	8002ebc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ea8:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <_sbrk+0x64>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002eae:	4b07      	ldr	r3, [pc, #28]	; (8002ecc <_sbrk+0x64>)
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	4a05      	ldr	r2, [pc, #20]	; (8002ecc <_sbrk+0x64>)
 8002eb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eba:	68fb      	ldr	r3, [r7, #12]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20080000 	.word	0x20080000
 8002ec8:	00000400 	.word	0x00000400
 8002ecc:	200066b0 	.word	0x200066b0
 8002ed0:	20010cd8 	.word	0x20010cd8

08002ed4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <SystemInit+0x20>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ede:	4a05      	ldr	r2, [pc, #20]	; (8002ef4 <SystemInit+0x20>)
 8002ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	e000ed00 	.word	0xe000ed00

08002ef8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b096      	sub	sp, #88	; 0x58
 8002efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002efe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	605a      	str	r2, [r3, #4]
 8002f08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f0e:	2200      	movs	r2, #0
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	605a      	str	r2, [r3, #4]
 8002f14:	609a      	str	r2, [r3, #8]
 8002f16:	60da      	str	r2, [r3, #12]
 8002f18:	611a      	str	r2, [r3, #16]
 8002f1a:	615a      	str	r2, [r3, #20]
 8002f1c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f1e:	1d3b      	adds	r3, r7, #4
 8002f20:	222c      	movs	r2, #44	; 0x2c
 8002f22:	2100      	movs	r1, #0
 8002f24:	4618      	mov	r0, r3
 8002f26:	f019 fbc5 	bl	801c6b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f2a:	4b4b      	ldr	r3, [pc, #300]	; (8003058 <MX_TIM1_Init+0x160>)
 8002f2c:	4a4b      	ldr	r2, [pc, #300]	; (800305c <MX_TIM1_Init+0x164>)
 8002f2e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002f30:	4b49      	ldr	r3, [pc, #292]	; (8003058 <MX_TIM1_Init+0x160>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f36:	4b48      	ldr	r3, [pc, #288]	; (8003058 <MX_TIM1_Init+0x160>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002f3c:	4b46      	ldr	r3, [pc, #280]	; (8003058 <MX_TIM1_Init+0x160>)
 8002f3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f44:	4b44      	ldr	r3, [pc, #272]	; (8003058 <MX_TIM1_Init+0x160>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f4a:	4b43      	ldr	r3, [pc, #268]	; (8003058 <MX_TIM1_Init+0x160>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f50:	4b41      	ldr	r3, [pc, #260]	; (8003058 <MX_TIM1_Init+0x160>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002f56:	4840      	ldr	r0, [pc, #256]	; (8003058 <MX_TIM1_Init+0x160>)
 8002f58:	f003 f902 	bl	8006160 <HAL_TIM_PWM_Init>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002f62:	f7ff fca7 	bl	80028b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f66:	2300      	movs	r3, #0
 8002f68:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f72:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f76:	4619      	mov	r1, r3
 8002f78:	4837      	ldr	r0, [pc, #220]	; (8003058 <MX_TIM1_Init+0x160>)
 8002f7a:	f003 ff49 	bl	8006e10 <HAL_TIMEx_MasterConfigSynchronization>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002f84:	f7ff fc96 	bl	80028b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f88:	2360      	movs	r3, #96	; 0x60
 8002f8a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f90:	2300      	movs	r3, #0
 8002f92:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f94:	2300      	movs	r3, #0
 8002f96:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fa4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002fa8:	2200      	movs	r2, #0
 8002faa:	4619      	mov	r1, r3
 8002fac:	482a      	ldr	r0, [pc, #168]	; (8003058 <MX_TIM1_Init+0x160>)
 8002fae:	f003 faf5 	bl	800659c <HAL_TIM_PWM_ConfigChannel>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002fb8:	f7ff fc7c 	bl	80028b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002fbc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002fc0:	2204      	movs	r2, #4
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4824      	ldr	r0, [pc, #144]	; (8003058 <MX_TIM1_Init+0x160>)
 8002fc6:	f003 fae9 	bl	800659c <HAL_TIM_PWM_ConfigChannel>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8002fd0:	f7ff fc70 	bl	80028b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002fd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002fd8:	2208      	movs	r2, #8
 8002fda:	4619      	mov	r1, r3
 8002fdc:	481e      	ldr	r0, [pc, #120]	; (8003058 <MX_TIM1_Init+0x160>)
 8002fde:	f003 fadd 	bl	800659c <HAL_TIM_PWM_ConfigChannel>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8002fe8:	f7ff fc64 	bl	80028b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002fec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ff0:	220c      	movs	r2, #12
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4818      	ldr	r0, [pc, #96]	; (8003058 <MX_TIM1_Init+0x160>)
 8002ff6:	f003 fad1 	bl	800659c <HAL_TIM_PWM_ConfigChannel>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8003000:	f7ff fc58 	bl	80028b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003004:	2300      	movs	r3, #0
 8003006:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003008:	2300      	movs	r3, #0
 800300a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800300c:	2300      	movs	r3, #0
 800300e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003018:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800301c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003022:	2300      	movs	r3, #0
 8003024:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003026:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800302c:	2300      	movs	r3, #0
 800302e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003030:	2300      	movs	r3, #0
 8003032:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003034:	1d3b      	adds	r3, r7, #4
 8003036:	4619      	mov	r1, r3
 8003038:	4807      	ldr	r0, [pc, #28]	; (8003058 <MX_TIM1_Init+0x160>)
 800303a:	f003 ff77 	bl	8006f2c <HAL_TIMEx_ConfigBreakDeadTime>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 8003044:	f7ff fc36 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003048:	4803      	ldr	r0, [pc, #12]	; (8003058 <MX_TIM1_Init+0x160>)
 800304a:	f000 fb7d 	bl	8003748 <HAL_TIM_MspPostInit>

}
 800304e:	bf00      	nop
 8003050:	3758      	adds	r7, #88	; 0x58
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	200066b4 	.word	0x200066b4
 800305c:	40010000 	.word	0x40010000

08003060 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08c      	sub	sp, #48	; 0x30
 8003064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003066:	f107 030c 	add.w	r3, r7, #12
 800306a:	2224      	movs	r2, #36	; 0x24
 800306c:	2100      	movs	r1, #0
 800306e:	4618      	mov	r0, r3
 8003070:	f019 fb20 	bl	801c6b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003074:	463b      	mov	r3, r7
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	605a      	str	r2, [r3, #4]
 800307c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800307e:	4b21      	ldr	r3, [pc, #132]	; (8003104 <MX_TIM2_Init+0xa4>)
 8003080:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003084:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003086:	4b1f      	ldr	r3, [pc, #124]	; (8003104 <MX_TIM2_Init+0xa4>)
 8003088:	2200      	movs	r2, #0
 800308a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800308c:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <MX_TIM2_Init+0xa4>)
 800308e:	2200      	movs	r2, #0
 8003090:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003092:	4b1c      	ldr	r3, [pc, #112]	; (8003104 <MX_TIM2_Init+0xa4>)
 8003094:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003098:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800309a:	4b1a      	ldr	r3, [pc, #104]	; (8003104 <MX_TIM2_Init+0xa4>)
 800309c:	2200      	movs	r2, #0
 800309e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030a0:	4b18      	ldr	r3, [pc, #96]	; (8003104 <MX_TIM2_Init+0xa4>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80030a6:	2301      	movs	r3, #1
 80030a8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80030aa:	2300      	movs	r3, #0
 80030ac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80030ae:	2301      	movs	r3, #1
 80030b0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80030ba:	2300      	movs	r3, #0
 80030bc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80030be:	2301      	movs	r3, #1
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80030c2:	2300      	movs	r3, #0
 80030c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80030c6:	2300      	movs	r3, #0
 80030c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80030ca:	f107 030c 	add.w	r3, r7, #12
 80030ce:	4619      	mov	r1, r3
 80030d0:	480c      	ldr	r0, [pc, #48]	; (8003104 <MX_TIM2_Init+0xa4>)
 80030d2:	f003 f89d 	bl	8006210 <HAL_TIM_Encoder_Init>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80030dc:	f7ff fbea 	bl	80028b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030e0:	2300      	movs	r3, #0
 80030e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030e8:	463b      	mov	r3, r7
 80030ea:	4619      	mov	r1, r3
 80030ec:	4805      	ldr	r0, [pc, #20]	; (8003104 <MX_TIM2_Init+0xa4>)
 80030ee:	f003 fe8f 	bl	8006e10 <HAL_TIMEx_MasterConfigSynchronization>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80030f8:	f7ff fbdc 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80030fc:	bf00      	nop
 80030fe:	3730      	adds	r7, #48	; 0x30
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20006700 	.word	0x20006700

08003108 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08c      	sub	sp, #48	; 0x30
 800310c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800310e:	f107 030c 	add.w	r3, r7, #12
 8003112:	2224      	movs	r2, #36	; 0x24
 8003114:	2100      	movs	r1, #0
 8003116:	4618      	mov	r0, r3
 8003118:	f019 facc 	bl	801c6b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800311c:	463b      	mov	r3, r7
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	605a      	str	r2, [r3, #4]
 8003124:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003126:	4b21      	ldr	r3, [pc, #132]	; (80031ac <MX_TIM3_Init+0xa4>)
 8003128:	4a21      	ldr	r2, [pc, #132]	; (80031b0 <MX_TIM3_Init+0xa8>)
 800312a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800312c:	4b1f      	ldr	r3, [pc, #124]	; (80031ac <MX_TIM3_Init+0xa4>)
 800312e:	2200      	movs	r2, #0
 8003130:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003132:	4b1e      	ldr	r3, [pc, #120]	; (80031ac <MX_TIM3_Init+0xa4>)
 8003134:	2200      	movs	r2, #0
 8003136:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003138:	4b1c      	ldr	r3, [pc, #112]	; (80031ac <MX_TIM3_Init+0xa4>)
 800313a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800313e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003140:	4b1a      	ldr	r3, [pc, #104]	; (80031ac <MX_TIM3_Init+0xa4>)
 8003142:	2200      	movs	r2, #0
 8003144:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003146:	4b19      	ldr	r3, [pc, #100]	; (80031ac <MX_TIM3_Init+0xa4>)
 8003148:	2200      	movs	r2, #0
 800314a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800314c:	2301      	movs	r3, #1
 800314e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003150:	2300      	movs	r3, #0
 8003152:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003154:	2301      	movs	r3, #1
 8003156:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003158:	2300      	movs	r3, #0
 800315a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003160:	2300      	movs	r3, #0
 8003162:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003164:	2301      	movs	r3, #1
 8003166:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003168:	2300      	movs	r3, #0
 800316a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800316c:	2300      	movs	r3, #0
 800316e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003170:	f107 030c 	add.w	r3, r7, #12
 8003174:	4619      	mov	r1, r3
 8003176:	480d      	ldr	r0, [pc, #52]	; (80031ac <MX_TIM3_Init+0xa4>)
 8003178:	f003 f84a 	bl	8006210 <HAL_TIM_Encoder_Init>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003182:	f7ff fb97 	bl	80028b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003186:	2300      	movs	r3, #0
 8003188:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800318a:	2300      	movs	r3, #0
 800318c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800318e:	463b      	mov	r3, r7
 8003190:	4619      	mov	r1, r3
 8003192:	4806      	ldr	r0, [pc, #24]	; (80031ac <MX_TIM3_Init+0xa4>)
 8003194:	f003 fe3c 	bl	8006e10 <HAL_TIMEx_MasterConfigSynchronization>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800319e:	f7ff fb89 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80031a2:	bf00      	nop
 80031a4:	3730      	adds	r7, #48	; 0x30
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	2000674c 	.word	0x2000674c
 80031b0:	40000400 	.word	0x40000400

080031b4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08c      	sub	sp, #48	; 0x30
 80031b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80031ba:	f107 030c 	add.w	r3, r7, #12
 80031be:	2224      	movs	r2, #36	; 0x24
 80031c0:	2100      	movs	r1, #0
 80031c2:	4618      	mov	r0, r3
 80031c4:	f019 fa76 	bl	801c6b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031c8:	463b      	mov	r3, r7
 80031ca:	2200      	movs	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	605a      	str	r2, [r3, #4]
 80031d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80031d2:	4b21      	ldr	r3, [pc, #132]	; (8003258 <MX_TIM4_Init+0xa4>)
 80031d4:	4a21      	ldr	r2, [pc, #132]	; (800325c <MX_TIM4_Init+0xa8>)
 80031d6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80031d8:	4b1f      	ldr	r3, [pc, #124]	; (8003258 <MX_TIM4_Init+0xa4>)
 80031da:	2200      	movs	r2, #0
 80031dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031de:	4b1e      	ldr	r3, [pc, #120]	; (8003258 <MX_TIM4_Init+0xa4>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80031e4:	4b1c      	ldr	r3, [pc, #112]	; (8003258 <MX_TIM4_Init+0xa4>)
 80031e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031ec:	4b1a      	ldr	r3, [pc, #104]	; (8003258 <MX_TIM4_Init+0xa4>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031f2:	4b19      	ldr	r3, [pc, #100]	; (8003258 <MX_TIM4_Init+0xa4>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80031f8:	2301      	movs	r3, #1
 80031fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80031fc:	2300      	movs	r3, #0
 80031fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003200:	2301      	movs	r3, #1
 8003202:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003204:	2300      	movs	r3, #0
 8003206:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003208:	2300      	movs	r3, #0
 800320a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800320c:	2300      	movs	r3, #0
 800320e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003210:	2301      	movs	r3, #1
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003214:	2300      	movs	r3, #0
 8003216:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003218:	2300      	movs	r3, #0
 800321a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800321c:	f107 030c 	add.w	r3, r7, #12
 8003220:	4619      	mov	r1, r3
 8003222:	480d      	ldr	r0, [pc, #52]	; (8003258 <MX_TIM4_Init+0xa4>)
 8003224:	f002 fff4 	bl	8006210 <HAL_TIM_Encoder_Init>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800322e:	f7ff fb41 	bl	80028b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003232:	2300      	movs	r3, #0
 8003234:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003236:	2300      	movs	r3, #0
 8003238:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800323a:	463b      	mov	r3, r7
 800323c:	4619      	mov	r1, r3
 800323e:	4806      	ldr	r0, [pc, #24]	; (8003258 <MX_TIM4_Init+0xa4>)
 8003240:	f003 fde6 	bl	8006e10 <HAL_TIMEx_MasterConfigSynchronization>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800324a:	f7ff fb33 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800324e:	bf00      	nop
 8003250:	3730      	adds	r7, #48	; 0x30
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20006798 	.word	0x20006798
 800325c:	40000800 	.word	0x40000800

08003260 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08c      	sub	sp, #48	; 0x30
 8003264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003266:	f107 030c 	add.w	r3, r7, #12
 800326a:	2224      	movs	r2, #36	; 0x24
 800326c:	2100      	movs	r1, #0
 800326e:	4618      	mov	r0, r3
 8003270:	f019 fa20 	bl	801c6b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003274:	463b      	mov	r3, r7
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	605a      	str	r2, [r3, #4]
 800327c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800327e:	4b21      	ldr	r3, [pc, #132]	; (8003304 <MX_TIM5_Init+0xa4>)
 8003280:	4a21      	ldr	r2, [pc, #132]	; (8003308 <MX_TIM5_Init+0xa8>)
 8003282:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003284:	4b1f      	ldr	r3, [pc, #124]	; (8003304 <MX_TIM5_Init+0xa4>)
 8003286:	2200      	movs	r2, #0
 8003288:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800328a:	4b1e      	ldr	r3, [pc, #120]	; (8003304 <MX_TIM5_Init+0xa4>)
 800328c:	2200      	movs	r2, #0
 800328e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003290:	4b1c      	ldr	r3, [pc, #112]	; (8003304 <MX_TIM5_Init+0xa4>)
 8003292:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003296:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003298:	4b1a      	ldr	r3, [pc, #104]	; (8003304 <MX_TIM5_Init+0xa4>)
 800329a:	2200      	movs	r2, #0
 800329c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800329e:	4b19      	ldr	r3, [pc, #100]	; (8003304 <MX_TIM5_Init+0xa4>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80032a4:	2301      	movs	r3, #1
 80032a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80032a8:	2300      	movs	r3, #0
 80032aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80032ac:	2301      	movs	r3, #1
 80032ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80032b8:	2300      	movs	r3, #0
 80032ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80032bc:	2301      	movs	r3, #1
 80032be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80032c0:	2300      	movs	r3, #0
 80032c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80032c8:	f107 030c 	add.w	r3, r7, #12
 80032cc:	4619      	mov	r1, r3
 80032ce:	480d      	ldr	r0, [pc, #52]	; (8003304 <MX_TIM5_Init+0xa4>)
 80032d0:	f002 ff9e 	bl	8006210 <HAL_TIM_Encoder_Init>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80032da:	f7ff faeb 	bl	80028b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032de:	2300      	movs	r3, #0
 80032e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032e2:	2300      	movs	r3, #0
 80032e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80032e6:	463b      	mov	r3, r7
 80032e8:	4619      	mov	r1, r3
 80032ea:	4806      	ldr	r0, [pc, #24]	; (8003304 <MX_TIM5_Init+0xa4>)
 80032ec:	f003 fd90 	bl	8006e10 <HAL_TIMEx_MasterConfigSynchronization>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80032f6:	f7ff fadd 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80032fa:	bf00      	nop
 80032fc:	3730      	adds	r7, #48	; 0x30
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	200067e4 	.word	0x200067e4
 8003308:	40000c00 	.word	0x40000c00

0800330c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b08c      	sub	sp, #48	; 0x30
 8003310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003312:	f107 030c 	add.w	r3, r7, #12
 8003316:	2224      	movs	r2, #36	; 0x24
 8003318:	2100      	movs	r1, #0
 800331a:	4618      	mov	r0, r3
 800331c:	f019 f9ca 	bl	801c6b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003320:	463b      	mov	r3, r7
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	605a      	str	r2, [r3, #4]
 8003328:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800332a:	4b23      	ldr	r3, [pc, #140]	; (80033b8 <MX_TIM8_Init+0xac>)
 800332c:	4a23      	ldr	r2, [pc, #140]	; (80033bc <MX_TIM8_Init+0xb0>)
 800332e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003330:	4b21      	ldr	r3, [pc, #132]	; (80033b8 <MX_TIM8_Init+0xac>)
 8003332:	2200      	movs	r2, #0
 8003334:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003336:	4b20      	ldr	r3, [pc, #128]	; (80033b8 <MX_TIM8_Init+0xac>)
 8003338:	2200      	movs	r2, #0
 800333a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800333c:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <MX_TIM8_Init+0xac>)
 800333e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003342:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003344:	4b1c      	ldr	r3, [pc, #112]	; (80033b8 <MX_TIM8_Init+0xac>)
 8003346:	2200      	movs	r2, #0
 8003348:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800334a:	4b1b      	ldr	r3, [pc, #108]	; (80033b8 <MX_TIM8_Init+0xac>)
 800334c:	2200      	movs	r2, #0
 800334e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003350:	4b19      	ldr	r3, [pc, #100]	; (80033b8 <MX_TIM8_Init+0xac>)
 8003352:	2200      	movs	r2, #0
 8003354:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003356:	2301      	movs	r3, #1
 8003358:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800335e:	2301      	movs	r3, #1
 8003360:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003362:	2300      	movs	r3, #0
 8003364:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003366:	2300      	movs	r3, #0
 8003368:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800336a:	2300      	movs	r3, #0
 800336c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800336e:	2301      	movs	r3, #1
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003372:	2300      	movs	r3, #0
 8003374:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003376:	2300      	movs	r3, #0
 8003378:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800337a:	f107 030c 	add.w	r3, r7, #12
 800337e:	4619      	mov	r1, r3
 8003380:	480d      	ldr	r0, [pc, #52]	; (80033b8 <MX_TIM8_Init+0xac>)
 8003382:	f002 ff45 	bl	8006210 <HAL_TIM_Encoder_Init>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 800338c:	f7ff fa92 	bl	80028b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003390:	2300      	movs	r3, #0
 8003392:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003394:	2300      	movs	r3, #0
 8003396:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003398:	2300      	movs	r3, #0
 800339a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800339c:	463b      	mov	r3, r7
 800339e:	4619      	mov	r1, r3
 80033a0:	4805      	ldr	r0, [pc, #20]	; (80033b8 <MX_TIM8_Init+0xac>)
 80033a2:	f003 fd35 	bl	8006e10 <HAL_TIMEx_MasterConfigSynchronization>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80033ac:	f7ff fa82 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80033b0:	bf00      	nop
 80033b2:	3730      	adds	r7, #48	; 0x30
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	20006830 	.word	0x20006830
 80033bc:	40010400 	.word	0x40010400

080033c0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80033c6:	1d3b      	adds	r3, r7, #4
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	60da      	str	r2, [r3, #12]
 80033d2:	611a      	str	r2, [r3, #16]
 80033d4:	615a      	str	r2, [r3, #20]
 80033d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80033d8:	4b1f      	ldr	r3, [pc, #124]	; (8003458 <MX_TIM9_Init+0x98>)
 80033da:	4a20      	ldr	r2, [pc, #128]	; (800345c <MX_TIM9_Init+0x9c>)
 80033dc:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 80033de:	4b1e      	ldr	r3, [pc, #120]	; (8003458 <MX_TIM9_Init+0x98>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033e4:	4b1c      	ldr	r3, [pc, #112]	; (8003458 <MX_TIM9_Init+0x98>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80033ea:	4b1b      	ldr	r3, [pc, #108]	; (8003458 <MX_TIM9_Init+0x98>)
 80033ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033f0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033f2:	4b19      	ldr	r3, [pc, #100]	; (8003458 <MX_TIM9_Init+0x98>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033f8:	4b17      	ldr	r3, [pc, #92]	; (8003458 <MX_TIM9_Init+0x98>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80033fe:	4816      	ldr	r0, [pc, #88]	; (8003458 <MX_TIM9_Init+0x98>)
 8003400:	f002 feae 	bl	8006160 <HAL_TIM_PWM_Init>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 800340a:	f7ff fa53 	bl	80028b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800340e:	2360      	movs	r3, #96	; 0x60
 8003410:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003412:	2300      	movs	r3, #0
 8003414:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003416:	2300      	movs	r3, #0
 8003418:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800341e:	1d3b      	adds	r3, r7, #4
 8003420:	2200      	movs	r2, #0
 8003422:	4619      	mov	r1, r3
 8003424:	480c      	ldr	r0, [pc, #48]	; (8003458 <MX_TIM9_Init+0x98>)
 8003426:	f003 f8b9 	bl	800659c <HAL_TIM_PWM_ConfigChannel>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8003430:	f7ff fa40 	bl	80028b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003434:	1d3b      	adds	r3, r7, #4
 8003436:	2204      	movs	r2, #4
 8003438:	4619      	mov	r1, r3
 800343a:	4807      	ldr	r0, [pc, #28]	; (8003458 <MX_TIM9_Init+0x98>)
 800343c:	f003 f8ae 	bl	800659c <HAL_TIM_PWM_ConfigChannel>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8003446:	f7ff fa35 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800344a:	4803      	ldr	r0, [pc, #12]	; (8003458 <MX_TIM9_Init+0x98>)
 800344c:	f000 f97c 	bl	8003748 <HAL_TIM_MspPostInit>

}
 8003450:	bf00      	nop
 8003452:	3720      	adds	r7, #32
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	2000687c 	.word	0x2000687c
 800345c:	40014000 	.word	0x40014000

08003460 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a13      	ldr	r2, [pc, #76]	; (80034bc <HAL_TIM_PWM_MspInit+0x5c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d10c      	bne.n	800348c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003472:	4b13      	ldr	r3, [pc, #76]	; (80034c0 <HAL_TIM_PWM_MspInit+0x60>)
 8003474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003476:	4a12      	ldr	r2, [pc, #72]	; (80034c0 <HAL_TIM_PWM_MspInit+0x60>)
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	6453      	str	r3, [r2, #68]	; 0x44
 800347e:	4b10      	ldr	r3, [pc, #64]	; (80034c0 <HAL_TIM_PWM_MspInit+0x60>)
 8003480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800348a:	e010      	b.n	80034ae <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM9)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a0c      	ldr	r2, [pc, #48]	; (80034c4 <HAL_TIM_PWM_MspInit+0x64>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d10b      	bne.n	80034ae <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003496:	4b0a      	ldr	r3, [pc, #40]	; (80034c0 <HAL_TIM_PWM_MspInit+0x60>)
 8003498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349a:	4a09      	ldr	r2, [pc, #36]	; (80034c0 <HAL_TIM_PWM_MspInit+0x60>)
 800349c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a0:	6453      	str	r3, [r2, #68]	; 0x44
 80034a2:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <HAL_TIM_PWM_MspInit+0x60>)
 80034a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034aa:	60bb      	str	r3, [r7, #8]
 80034ac:	68bb      	ldr	r3, [r7, #8]
}
 80034ae:	bf00      	nop
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40010000 	.word	0x40010000
 80034c0:	40023800 	.word	0x40023800
 80034c4:	40014000 	.word	0x40014000

080034c8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b094      	sub	sp, #80	; 0x50
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	609a      	str	r2, [r3, #8]
 80034dc:	60da      	str	r2, [r3, #12]
 80034de:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e8:	d144      	bne.n	8003574 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034ea:	4b8e      	ldr	r3, [pc, #568]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	4a8d      	ldr	r2, [pc, #564]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	6413      	str	r3, [r2, #64]	; 0x40
 80034f6:	4b8b      	ldr	r3, [pc, #556]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003500:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003502:	4b88      	ldr	r3, [pc, #544]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	4a87      	ldr	r2, [pc, #540]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	6313      	str	r3, [r2, #48]	; 0x30
 800350e:	4b85      	ldr	r3, [pc, #532]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	637b      	str	r3, [r7, #52]	; 0x34
 8003518:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800351a:	4b82      	ldr	r3, [pc, #520]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	4a81      	ldr	r2, [pc, #516]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003520:	f043 0302 	orr.w	r3, r3, #2
 8003524:	6313      	str	r3, [r2, #48]	; 0x30
 8003526:	4b7f      	ldr	r3, [pc, #508]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	633b      	str	r3, [r7, #48]	; 0x30
 8003530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR1_CHA_Pin;
 8003532:	2320      	movs	r3, #32
 8003534:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003536:	2302      	movs	r3, #2
 8003538:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353a:	2300      	movs	r3, #0
 800353c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800353e:	2300      	movs	r3, #0
 8003540:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003542:	2301      	movs	r3, #1
 8003544:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR1_CHA_GPIO_Port, &GPIO_InitStruct);
 8003546:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800354a:	4619      	mov	r1, r3
 800354c:	4876      	ldr	r0, [pc, #472]	; (8003728 <HAL_TIM_Encoder_MspInit+0x260>)
 800354e:	f001 f879 	bl	8004644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR1_CHB_Pin;
 8003552:	2308      	movs	r3, #8
 8003554:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003556:	2302      	movs	r3, #2
 8003558:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355a:	2300      	movs	r3, #0
 800355c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355e:	2300      	movs	r3, #0
 8003560:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003562:	2301      	movs	r3, #1
 8003564:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR1_CHB_GPIO_Port, &GPIO_InitStruct);
 8003566:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800356a:	4619      	mov	r1, r3
 800356c:	486f      	ldr	r0, [pc, #444]	; (800372c <HAL_TIM_Encoder_MspInit+0x264>)
 800356e:	f001 f869 	bl	8004644 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003572:	e0d3      	b.n	800371c <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM3)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a6d      	ldr	r2, [pc, #436]	; (8003730 <HAL_TIM_Encoder_MspInit+0x268>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d144      	bne.n	8003608 <HAL_TIM_Encoder_MspInit+0x140>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800357e:	4b69      	ldr	r3, [pc, #420]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	4a68      	ldr	r2, [pc, #416]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003584:	f043 0302 	orr.w	r3, r3, #2
 8003588:	6413      	str	r3, [r2, #64]	; 0x40
 800358a:	4b66      	ldr	r3, [pc, #408]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003596:	4b63      	ldr	r3, [pc, #396]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	4a62      	ldr	r2, [pc, #392]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 800359c:	f043 0301 	orr.w	r3, r3, #1
 80035a0:	6313      	str	r3, [r2, #48]	; 0x30
 80035a2:	4b60      	ldr	r3, [pc, #384]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ae:	4b5d      	ldr	r3, [pc, #372]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	4a5c      	ldr	r2, [pc, #368]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 80035b4:	f043 0302 	orr.w	r3, r3, #2
 80035b8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ba:	4b5a      	ldr	r3, [pc, #360]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = MOTOR2_CHA_Pin;
 80035c6:	2340      	movs	r3, #64	; 0x40
 80035c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ca:	2302      	movs	r3, #2
 80035cc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d2:	2300      	movs	r3, #0
 80035d4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035d6:	2302      	movs	r3, #2
 80035d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR2_CHA_GPIO_Port, &GPIO_InitStruct);
 80035da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035de:	4619      	mov	r1, r3
 80035e0:	4851      	ldr	r0, [pc, #324]	; (8003728 <HAL_TIM_Encoder_MspInit+0x260>)
 80035e2:	f001 f82f 	bl	8004644 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR2_CHB_Pin;
 80035e6:	2320      	movs	r3, #32
 80035e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ea:	2302      	movs	r3, #2
 80035ec:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f2:	2300      	movs	r3, #0
 80035f4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035f6:	2302      	movs	r3, #2
 80035f8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR2_CHB_GPIO_Port, &GPIO_InitStruct);
 80035fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035fe:	4619      	mov	r1, r3
 8003600:	484a      	ldr	r0, [pc, #296]	; (800372c <HAL_TIM_Encoder_MspInit+0x264>)
 8003602:	f001 f81f 	bl	8004644 <HAL_GPIO_Init>
}
 8003606:	e089      	b.n	800371c <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM4)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a49      	ldr	r2, [pc, #292]	; (8003734 <HAL_TIM_Encoder_MspInit+0x26c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d129      	bne.n	8003666 <HAL_TIM_Encoder_MspInit+0x19e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003612:	4b44      	ldr	r3, [pc, #272]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	4a43      	ldr	r2, [pc, #268]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003618:	f043 0304 	orr.w	r3, r3, #4
 800361c:	6413      	str	r3, [r2, #64]	; 0x40
 800361e:	4b41      	ldr	r3, [pc, #260]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f003 0304 	and.w	r3, r3, #4
 8003626:	623b      	str	r3, [r7, #32]
 8003628:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800362a:	4b3e      	ldr	r3, [pc, #248]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	4a3d      	ldr	r2, [pc, #244]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003630:	f043 0308 	orr.w	r3, r3, #8
 8003634:	6313      	str	r3, [r2, #48]	; 0x30
 8003636:	4b3b      	ldr	r3, [pc, #236]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	61fb      	str	r3, [r7, #28]
 8003640:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = MOTOR3_CHA_Pin|MOTOR3_CHB_Pin;
 8003642:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003646:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003648:	2302      	movs	r3, #2
 800364a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364c:	2300      	movs	r3, #0
 800364e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003650:	2300      	movs	r3, #0
 8003652:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003654:	2302      	movs	r3, #2
 8003656:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003658:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800365c:	4619      	mov	r1, r3
 800365e:	4836      	ldr	r0, [pc, #216]	; (8003738 <HAL_TIM_Encoder_MspInit+0x270>)
 8003660:	f000 fff0 	bl	8004644 <HAL_GPIO_Init>
}
 8003664:	e05a      	b.n	800371c <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM5)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a34      	ldr	r2, [pc, #208]	; (800373c <HAL_TIM_Encoder_MspInit+0x274>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d128      	bne.n	80036c2 <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003670:	4b2c      	ldr	r3, [pc, #176]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	4a2b      	ldr	r2, [pc, #172]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003676:	f043 0308 	orr.w	r3, r3, #8
 800367a:	6413      	str	r3, [r2, #64]	; 0x40
 800367c:	4b29      	ldr	r3, [pc, #164]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	61bb      	str	r3, [r7, #24]
 8003686:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003688:	4b26      	ldr	r3, [pc, #152]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	4a25      	ldr	r2, [pc, #148]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	6313      	str	r3, [r2, #48]	; 0x30
 8003694:	4b23      	ldr	r3, [pc, #140]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOTOR4_CHA_Pin|MOTOR4_CHB_Pin;
 80036a0:	2303      	movs	r3, #3
 80036a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a4:	2302      	movs	r3, #2
 80036a6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ac:	2300      	movs	r3, #0
 80036ae:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80036b0:	2302      	movs	r3, #2
 80036b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80036b8:	4619      	mov	r1, r3
 80036ba:	481b      	ldr	r0, [pc, #108]	; (8003728 <HAL_TIM_Encoder_MspInit+0x260>)
 80036bc:	f000 ffc2 	bl	8004644 <HAL_GPIO_Init>
}
 80036c0:	e02c      	b.n	800371c <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM8)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1e      	ldr	r2, [pc, #120]	; (8003740 <HAL_TIM_Encoder_MspInit+0x278>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d127      	bne.n	800371c <HAL_TIM_Encoder_MspInit+0x254>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80036cc:	4b15      	ldr	r3, [pc, #84]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 80036ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d0:	4a14      	ldr	r2, [pc, #80]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 80036d2:	f043 0302 	orr.w	r3, r3, #2
 80036d6:	6453      	str	r3, [r2, #68]	; 0x44
 80036d8:	4b12      	ldr	r3, [pc, #72]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 80036da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036e4:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	4a0e      	ldr	r2, [pc, #56]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 80036ea:	f043 0304 	orr.w	r3, r3, #4
 80036ee:	6313      	str	r3, [r2, #48]	; 0x30
 80036f0:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <HAL_TIM_Encoder_MspInit+0x25c>)
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR5_CHA_Pin|MOTOR5_CHB_Pin;
 80036fc:	23c0      	movs	r3, #192	; 0xc0
 80036fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003700:	2302      	movs	r3, #2
 8003702:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003704:	2300      	movs	r3, #0
 8003706:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003708:	2300      	movs	r3, #0
 800370a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800370c:	2303      	movs	r3, #3
 800370e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003710:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003714:	4619      	mov	r1, r3
 8003716:	480b      	ldr	r0, [pc, #44]	; (8003744 <HAL_TIM_Encoder_MspInit+0x27c>)
 8003718:	f000 ff94 	bl	8004644 <HAL_GPIO_Init>
}
 800371c:	bf00      	nop
 800371e:	3750      	adds	r7, #80	; 0x50
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40023800 	.word	0x40023800
 8003728:	40020000 	.word	0x40020000
 800372c:	40020400 	.word	0x40020400
 8003730:	40000400 	.word	0x40000400
 8003734:	40000800 	.word	0x40000800
 8003738:	40020c00 	.word	0x40020c00
 800373c:	40000c00 	.word	0x40000c00
 8003740:	40010400 	.word	0x40010400
 8003744:	40020800 	.word	0x40020800

08003748 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08a      	sub	sp, #40	; 0x28
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003750:	f107 0314 	add.w	r3, r7, #20
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	609a      	str	r2, [r3, #8]
 800375c:	60da      	str	r2, [r3, #12]
 800375e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a22      	ldr	r2, [pc, #136]	; (80037f0 <HAL_TIM_MspPostInit+0xa8>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d11d      	bne.n	80037a6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800376a:	4b22      	ldr	r3, [pc, #136]	; (80037f4 <HAL_TIM_MspPostInit+0xac>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	4a21      	ldr	r2, [pc, #132]	; (80037f4 <HAL_TIM_MspPostInit+0xac>)
 8003770:	f043 0310 	orr.w	r3, r3, #16
 8003774:	6313      	str	r3, [r2, #48]	; 0x30
 8003776:	4b1f      	ldr	r3, [pc, #124]	; (80037f4 <HAL_TIM_MspPostInit+0xac>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	f003 0310 	and.w	r3, r3, #16
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR1_PWM_Pin|MOTOR2_PWM_Pin|MOTOR3_PWM_Pin|MOTOR4_PWM_Pin;
 8003782:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8003786:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003788:	2302      	movs	r3, #2
 800378a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378c:	2300      	movs	r3, #0
 800378e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003790:	2300      	movs	r3, #0
 8003792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003794:	2301      	movs	r3, #1
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003798:	f107 0314 	add.w	r3, r7, #20
 800379c:	4619      	mov	r1, r3
 800379e:	4816      	ldr	r0, [pc, #88]	; (80037f8 <HAL_TIM_MspPostInit+0xb0>)
 80037a0:	f000 ff50 	bl	8004644 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80037a4:	e020      	b.n	80037e8 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM9)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a14      	ldr	r2, [pc, #80]	; (80037fc <HAL_TIM_MspPostInit+0xb4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d11b      	bne.n	80037e8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80037b0:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <HAL_TIM_MspPostInit+0xac>)
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b4:	4a0f      	ldr	r2, [pc, #60]	; (80037f4 <HAL_TIM_MspPostInit+0xac>)
 80037b6:	f043 0310 	orr.w	r3, r3, #16
 80037ba:	6313      	str	r3, [r2, #48]	; 0x30
 80037bc:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <HAL_TIM_MspPostInit+0xac>)
 80037be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR5_PWM_Pin|MOTOR6_PWM_Pin;
 80037c8:	2360      	movs	r3, #96	; 0x60
 80037ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037cc:	2302      	movs	r3, #2
 80037ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d4:	2300      	movs	r3, #0
 80037d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80037d8:	2303      	movs	r3, #3
 80037da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037dc:	f107 0314 	add.w	r3, r7, #20
 80037e0:	4619      	mov	r1, r3
 80037e2:	4805      	ldr	r0, [pc, #20]	; (80037f8 <HAL_TIM_MspPostInit+0xb0>)
 80037e4:	f000 ff2e 	bl	8004644 <HAL_GPIO_Init>
}
 80037e8:	bf00      	nop
 80037ea:	3728      	adds	r7, #40	; 0x28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40010000 	.word	0x40010000
 80037f4:	40023800 	.word	0x40023800
 80037f8:	40021000 	.word	0x40021000
 80037fc:	40014000 	.word	0x40014000

08003800 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003804:	4b14      	ldr	r3, [pc, #80]	; (8003858 <MX_USART3_UART_Init+0x58>)
 8003806:	4a15      	ldr	r2, [pc, #84]	; (800385c <MX_USART3_UART_Init+0x5c>)
 8003808:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800380a:	4b13      	ldr	r3, [pc, #76]	; (8003858 <MX_USART3_UART_Init+0x58>)
 800380c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003810:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003812:	4b11      	ldr	r3, [pc, #68]	; (8003858 <MX_USART3_UART_Init+0x58>)
 8003814:	2200      	movs	r2, #0
 8003816:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003818:	4b0f      	ldr	r3, [pc, #60]	; (8003858 <MX_USART3_UART_Init+0x58>)
 800381a:	2200      	movs	r2, #0
 800381c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800381e:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <MX_USART3_UART_Init+0x58>)
 8003820:	2200      	movs	r2, #0
 8003822:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003824:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <MX_USART3_UART_Init+0x58>)
 8003826:	220c      	movs	r2, #12
 8003828:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800382a:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <MX_USART3_UART_Init+0x58>)
 800382c:	2200      	movs	r2, #0
 800382e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003830:	4b09      	ldr	r3, [pc, #36]	; (8003858 <MX_USART3_UART_Init+0x58>)
 8003832:	2200      	movs	r2, #0
 8003834:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003836:	4b08      	ldr	r3, [pc, #32]	; (8003858 <MX_USART3_UART_Init+0x58>)
 8003838:	2200      	movs	r2, #0
 800383a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800383c:	4b06      	ldr	r3, [pc, #24]	; (8003858 <MX_USART3_UART_Init+0x58>)
 800383e:	2200      	movs	r2, #0
 8003840:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003842:	4805      	ldr	r0, [pc, #20]	; (8003858 <MX_USART3_UART_Init+0x58>)
 8003844:	f003 fc0e 	bl	8007064 <HAL_UART_Init>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800384e:	f7ff f831 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003852:	bf00      	nop
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	200068c8 	.word	0x200068c8
 800385c:	40004800 	.word	0x40004800

08003860 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b0ae      	sub	sp, #184	; 0xb8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003868:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	609a      	str	r2, [r3, #8]
 8003874:	60da      	str	r2, [r3, #12]
 8003876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003878:	f107 0314 	add.w	r3, r7, #20
 800387c:	2290      	movs	r2, #144	; 0x90
 800387e:	2100      	movs	r1, #0
 8003880:	4618      	mov	r0, r3
 8003882:	f018 ff17 	bl	801c6b4 <memset>
  if(uartHandle->Instance==USART3)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a56      	ldr	r2, [pc, #344]	; (80039e4 <HAL_UART_MspInit+0x184>)
 800388c:	4293      	cmp	r3, r2
 800388e:	f040 80a4 	bne.w	80039da <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003896:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003898:	2300      	movs	r3, #0
 800389a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800389c:	f107 0314 	add.w	r3, r7, #20
 80038a0:	4618      	mov	r0, r3
 80038a2:	f001 ff5b 	bl	800575c <HAL_RCCEx_PeriphCLKConfig>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80038ac:	f7ff f802 	bl	80028b4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80038b0:	4b4d      	ldr	r3, [pc, #308]	; (80039e8 <HAL_UART_MspInit+0x188>)
 80038b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b4:	4a4c      	ldr	r2, [pc, #304]	; (80039e8 <HAL_UART_MspInit+0x188>)
 80038b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038ba:	6413      	str	r3, [r2, #64]	; 0x40
 80038bc:	4b4a      	ldr	r3, [pc, #296]	; (80039e8 <HAL_UART_MspInit+0x188>)
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038c4:	613b      	str	r3, [r7, #16]
 80038c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038c8:	4b47      	ldr	r3, [pc, #284]	; (80039e8 <HAL_UART_MspInit+0x188>)
 80038ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038cc:	4a46      	ldr	r2, [pc, #280]	; (80039e8 <HAL_UART_MspInit+0x188>)
 80038ce:	f043 0308 	orr.w	r3, r3, #8
 80038d2:	6313      	str	r3, [r2, #48]	; 0x30
 80038d4:	4b44      	ldr	r3, [pc, #272]	; (80039e8 <HAL_UART_MspInit+0x188>)
 80038d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80038e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e8:	2302      	movs	r3, #2
 80038ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038f4:	2303      	movs	r3, #3
 80038f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80038fa:	2307      	movs	r3, #7
 80038fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003900:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003904:	4619      	mov	r1, r3
 8003906:	4839      	ldr	r0, [pc, #228]	; (80039ec <HAL_UART_MspInit+0x18c>)
 8003908:	f000 fe9c 	bl	8004644 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800390c:	4b38      	ldr	r3, [pc, #224]	; (80039f0 <HAL_UART_MspInit+0x190>)
 800390e:	4a39      	ldr	r2, [pc, #228]	; (80039f4 <HAL_UART_MspInit+0x194>)
 8003910:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003912:	4b37      	ldr	r3, [pc, #220]	; (80039f0 <HAL_UART_MspInit+0x190>)
 8003914:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003918:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800391a:	4b35      	ldr	r3, [pc, #212]	; (80039f0 <HAL_UART_MspInit+0x190>)
 800391c:	2240      	movs	r2, #64	; 0x40
 800391e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003920:	4b33      	ldr	r3, [pc, #204]	; (80039f0 <HAL_UART_MspInit+0x190>)
 8003922:	2200      	movs	r2, #0
 8003924:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003926:	4b32      	ldr	r3, [pc, #200]	; (80039f0 <HAL_UART_MspInit+0x190>)
 8003928:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800392c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800392e:	4b30      	ldr	r3, [pc, #192]	; (80039f0 <HAL_UART_MspInit+0x190>)
 8003930:	2200      	movs	r2, #0
 8003932:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003934:	4b2e      	ldr	r3, [pc, #184]	; (80039f0 <HAL_UART_MspInit+0x190>)
 8003936:	2200      	movs	r2, #0
 8003938:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800393a:	4b2d      	ldr	r3, [pc, #180]	; (80039f0 <HAL_UART_MspInit+0x190>)
 800393c:	2200      	movs	r2, #0
 800393e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003940:	4b2b      	ldr	r3, [pc, #172]	; (80039f0 <HAL_UART_MspInit+0x190>)
 8003942:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003946:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003948:	4b29      	ldr	r3, [pc, #164]	; (80039f0 <HAL_UART_MspInit+0x190>)
 800394a:	2200      	movs	r2, #0
 800394c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800394e:	4828      	ldr	r0, [pc, #160]	; (80039f0 <HAL_UART_MspInit+0x190>)
 8003950:	f000 fa62 	bl	8003e18 <HAL_DMA_Init>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 800395a:	f7fe ffab 	bl	80028b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a23      	ldr	r2, [pc, #140]	; (80039f0 <HAL_UART_MspInit+0x190>)
 8003962:	671a      	str	r2, [r3, #112]	; 0x70
 8003964:	4a22      	ldr	r2, [pc, #136]	; (80039f0 <HAL_UART_MspInit+0x190>)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800396a:	4b23      	ldr	r3, [pc, #140]	; (80039f8 <HAL_UART_MspInit+0x198>)
 800396c:	4a23      	ldr	r2, [pc, #140]	; (80039fc <HAL_UART_MspInit+0x19c>)
 800396e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003970:	4b21      	ldr	r3, [pc, #132]	; (80039f8 <HAL_UART_MspInit+0x198>)
 8003972:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003976:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003978:	4b1f      	ldr	r3, [pc, #124]	; (80039f8 <HAL_UART_MspInit+0x198>)
 800397a:	2200      	movs	r2, #0
 800397c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800397e:	4b1e      	ldr	r3, [pc, #120]	; (80039f8 <HAL_UART_MspInit+0x198>)
 8003980:	2200      	movs	r2, #0
 8003982:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003984:	4b1c      	ldr	r3, [pc, #112]	; (80039f8 <HAL_UART_MspInit+0x198>)
 8003986:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800398a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800398c:	4b1a      	ldr	r3, [pc, #104]	; (80039f8 <HAL_UART_MspInit+0x198>)
 800398e:	2200      	movs	r2, #0
 8003990:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003992:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <HAL_UART_MspInit+0x198>)
 8003994:	2200      	movs	r2, #0
 8003996:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003998:	4b17      	ldr	r3, [pc, #92]	; (80039f8 <HAL_UART_MspInit+0x198>)
 800399a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800399e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80039a0:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <HAL_UART_MspInit+0x198>)
 80039a2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80039a6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039a8:	4b13      	ldr	r3, [pc, #76]	; (80039f8 <HAL_UART_MspInit+0x198>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80039ae:	4812      	ldr	r0, [pc, #72]	; (80039f8 <HAL_UART_MspInit+0x198>)
 80039b0:	f000 fa32 	bl	8003e18 <HAL_DMA_Init>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 80039ba:	f7fe ff7b 	bl	80028b4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a0d      	ldr	r2, [pc, #52]	; (80039f8 <HAL_UART_MspInit+0x198>)
 80039c2:	675a      	str	r2, [r3, #116]	; 0x74
 80039c4:	4a0c      	ldr	r2, [pc, #48]	; (80039f8 <HAL_UART_MspInit+0x198>)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80039ca:	2200      	movs	r2, #0
 80039cc:	2105      	movs	r1, #5
 80039ce:	2027      	movs	r0, #39	; 0x27
 80039d0:	f000 f9f8 	bl	8003dc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80039d4:	2027      	movs	r0, #39	; 0x27
 80039d6:	f000 fa11 	bl	8003dfc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80039da:	bf00      	nop
 80039dc:	37b8      	adds	r7, #184	; 0xb8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	40004800 	.word	0x40004800
 80039e8:	40023800 	.word	0x40023800
 80039ec:	40020c00 	.word	0x40020c00
 80039f0:	20006950 	.word	0x20006950
 80039f4:	40026058 	.word	0x40026058
 80039f8:	200069b0 	.word	0x200069b0
 80039fc:	40026028 	.word	0x40026028

08003a00 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003a04:	4b14      	ldr	r3, [pc, #80]	; (8003a58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003a0a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003a0c:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a0e:	2206      	movs	r2, #6
 8003a10:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003a12:	4b11      	ldr	r3, [pc, #68]	; (8003a58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a14:	2202      	movs	r2, #2
 8003a16:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003a18:	4b0f      	ldr	r3, [pc, #60]	; (8003a58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003a1e:	4b0e      	ldr	r3, [pc, #56]	; (8003a58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a20:	2202      	movs	r2, #2
 8003a22:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003a24:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003a2a:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003a30:	4b09      	ldr	r3, [pc, #36]	; (8003a58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003a36:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a38:	2201      	movs	r2, #1
 8003a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003a3c:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003a42:	4805      	ldr	r0, [pc, #20]	; (8003a58 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a44:	f000 ffdb 	bl	80049fe <HAL_PCD_Init>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003a4e:	f7fe ff31 	bl	80028b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003a52:	bf00      	nop
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20006a10 	.word	0x20006a10

08003a5c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b0ae      	sub	sp, #184	; 0xb8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a74:	f107 0314 	add.w	r3, r7, #20
 8003a78:	2290      	movs	r2, #144	; 0x90
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f018 fe19 	bl	801c6b4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a8a:	d159      	bne.n	8003b40 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003a8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a90:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a98:	f107 0314 	add.w	r3, r7, #20
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f001 fe5d 	bl	800575c <HAL_RCCEx_PeriphCLKConfig>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8003aa8:	f7fe ff04 	bl	80028b4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aac:	4b26      	ldr	r3, [pc, #152]	; (8003b48 <HAL_PCD_MspInit+0xec>)
 8003aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab0:	4a25      	ldr	r2, [pc, #148]	; (8003b48 <HAL_PCD_MspInit+0xec>)
 8003ab2:	f043 0301 	orr.w	r3, r3, #1
 8003ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab8:	4b23      	ldr	r3, [pc, #140]	; (8003b48 <HAL_PCD_MspInit+0xec>)
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003ac4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003ac8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003acc:	2302      	movs	r3, #2
 8003ace:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003ade:	230a      	movs	r3, #10
 8003ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4818      	ldr	r0, [pc, #96]	; (8003b4c <HAL_PCD_MspInit+0xf0>)
 8003aec:	f000 fdaa 	bl	8004644 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003af0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003af4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003af8:	2300      	movs	r3, #0
 8003afa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003b04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4810      	ldr	r0, [pc, #64]	; (8003b4c <HAL_PCD_MspInit+0xf0>)
 8003b0c:	f000 fd9a 	bl	8004644 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003b10:	4b0d      	ldr	r3, [pc, #52]	; (8003b48 <HAL_PCD_MspInit+0xec>)
 8003b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b14:	4a0c      	ldr	r2, [pc, #48]	; (8003b48 <HAL_PCD_MspInit+0xec>)
 8003b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b1a:	6353      	str	r3, [r2, #52]	; 0x34
 8003b1c:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <HAL_PCD_MspInit+0xec>)
 8003b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <HAL_PCD_MspInit+0xec>)
 8003b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2c:	4a06      	ldr	r2, [pc, #24]	; (8003b48 <HAL_PCD_MspInit+0xec>)
 8003b2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b32:	6453      	str	r3, [r2, #68]	; 0x44
 8003b34:	4b04      	ldr	r3, [pc, #16]	; (8003b48 <HAL_PCD_MspInit+0xec>)
 8003b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003b40:	bf00      	nop
 8003b42:	37b8      	adds	r7, #184	; 0xb8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	40020000 	.word	0x40020000

08003b50 <_Z14getCurrentTimev>:
}
long remap( long v,  long a1,  long b1,  long a2,  long b2, bool clamp = false){
  return round(remap((float) v, (float) a1, (float) b1, (float) a2, (float) b2, clamp));
}

uint32_t getCurrentTime() {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8003b54:	f000 f84e 	bl	8003bf4 <HAL_GetTick>
 8003b58:	4603      	mov	r3, r0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b64:	480d      	ldr	r0, [pc, #52]	; (8003b9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003b66:	490e      	ldr	r1, [pc, #56]	; (8003ba0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003b68:	4a0e      	ldr	r2, [pc, #56]	; (8003ba4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b6c:	e002      	b.n	8003b74 <LoopCopyDataInit>

08003b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b72:	3304      	adds	r3, #4

08003b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b78:	d3f9      	bcc.n	8003b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b7a:	4a0b      	ldr	r2, [pc, #44]	; (8003ba8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b7c:	4c0b      	ldr	r4, [pc, #44]	; (8003bac <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b80:	e001      	b.n	8003b86 <LoopFillZerobss>

08003b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b84:	3204      	adds	r2, #4

08003b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b88:	d3fb      	bcc.n	8003b82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003b8a:	f7ff f9a3 	bl	8002ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b8e:	f018 fe93 	bl	801c8b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b92:	f7fe fdd9 	bl	8002748 <main>
  bx  lr    
 8003b96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b98:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ba0:	200021dc 	.word	0x200021dc
  ldr r2, =_sidata
 8003ba4:	0801f748 	.word	0x0801f748
  ldr r2, =_sbss
 8003ba8:	200021e0 	.word	0x200021e0
  ldr r4, =_ebss
 8003bac:	20010cd4 	.word	0x20010cd4

08003bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bb0:	e7fe      	b.n	8003bb0 <ADC_IRQHandler>

08003bb2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bb6:	2003      	movs	r0, #3
 8003bb8:	f000 f8f9 	bl	8003dae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bbc:	200f      	movs	r0, #15
 8003bbe:	f7ff f80b 	bl	8002bd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bc2:	f7fe ffe1 	bl	8002b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bd0:	4b06      	ldr	r3, [pc, #24]	; (8003bec <HAL_IncTick+0x20>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	4b06      	ldr	r3, [pc, #24]	; (8003bf0 <HAL_IncTick+0x24>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4413      	add	r3, r2
 8003bdc:	4a04      	ldr	r2, [pc, #16]	; (8003bf0 <HAL_IncTick+0x24>)
 8003bde:	6013      	str	r3, [r2, #0]
}
 8003be0:	bf00      	nop
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	2000000c 	.word	0x2000000c
 8003bf0:	20006f18 	.word	0x20006f18

08003bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8003bf8:	4b03      	ldr	r3, [pc, #12]	; (8003c08 <HAL_GetTick+0x14>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20006f18 	.word	0x20006f18

08003c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c14:	f7ff ffee 	bl	8003bf4 <HAL_GetTick>
 8003c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c24:	d005      	beq.n	8003c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c26:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <HAL_Delay+0x44>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4413      	add	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c32:	bf00      	nop
 8003c34:	f7ff ffde 	bl	8003bf4 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d8f7      	bhi.n	8003c34 <HAL_Delay+0x28>
  {
  }
}
 8003c44:	bf00      	nop
 8003c46:	bf00      	nop
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	2000000c 	.word	0x2000000c

08003c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c64:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <__NVIC_SetPriorityGrouping+0x40>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c70:	4013      	ands	r3, r2
 8003c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003c7c:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <__NVIC_SetPriorityGrouping+0x44>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c82:	4a04      	ldr	r2, [pc, #16]	; (8003c94 <__NVIC_SetPriorityGrouping+0x40>)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	60d3      	str	r3, [r2, #12]
}
 8003c88:	bf00      	nop
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	e000ed00 	.word	0xe000ed00
 8003c98:	05fa0000 	.word	0x05fa0000

08003c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ca0:	4b04      	ldr	r3, [pc, #16]	; (8003cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	0a1b      	lsrs	r3, r3, #8
 8003ca6:	f003 0307 	and.w	r3, r3, #7
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	e000ed00 	.word	0xe000ed00

08003cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	db0b      	blt.n	8003ce2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cca:	79fb      	ldrb	r3, [r7, #7]
 8003ccc:	f003 021f 	and.w	r2, r3, #31
 8003cd0:	4907      	ldr	r1, [pc, #28]	; (8003cf0 <__NVIC_EnableIRQ+0x38>)
 8003cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd6:	095b      	lsrs	r3, r3, #5
 8003cd8:	2001      	movs	r0, #1
 8003cda:	fa00 f202 	lsl.w	r2, r0, r2
 8003cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	e000e100 	.word	0xe000e100

08003cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	6039      	str	r1, [r7, #0]
 8003cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	db0a      	blt.n	8003d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	490c      	ldr	r1, [pc, #48]	; (8003d40 <__NVIC_SetPriority+0x4c>)
 8003d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d12:	0112      	lsls	r2, r2, #4
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	440b      	add	r3, r1
 8003d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d1c:	e00a      	b.n	8003d34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	4908      	ldr	r1, [pc, #32]	; (8003d44 <__NVIC_SetPriority+0x50>)
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	f003 030f 	and.w	r3, r3, #15
 8003d2a:	3b04      	subs	r3, #4
 8003d2c:	0112      	lsls	r2, r2, #4
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	440b      	add	r3, r1
 8003d32:	761a      	strb	r2, [r3, #24]
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr
 8003d40:	e000e100 	.word	0xe000e100
 8003d44:	e000ed00 	.word	0xe000ed00

08003d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b089      	sub	sp, #36	; 0x24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f003 0307 	and.w	r3, r3, #7
 8003d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f1c3 0307 	rsb	r3, r3, #7
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	bf28      	it	cs
 8003d66:	2304      	movcs	r3, #4
 8003d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	2b06      	cmp	r3, #6
 8003d70:	d902      	bls.n	8003d78 <NVIC_EncodePriority+0x30>
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	3b03      	subs	r3, #3
 8003d76:	e000      	b.n	8003d7a <NVIC_EncodePriority+0x32>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43da      	mvns	r2, r3
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	401a      	ands	r2, r3
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9a:	43d9      	mvns	r1, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003da0:	4313      	orrs	r3, r2
         );
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3724      	adds	r7, #36	; 0x24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff ff4c 	bl	8003c54 <__NVIC_SetPriorityGrouping>
}
 8003dbc:	bf00      	nop
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
 8003dd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dd6:	f7ff ff61 	bl	8003c9c <__NVIC_GetPriorityGrouping>
 8003dda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	68b9      	ldr	r1, [r7, #8]
 8003de0:	6978      	ldr	r0, [r7, #20]
 8003de2:	f7ff ffb1 	bl	8003d48 <NVIC_EncodePriority>
 8003de6:	4602      	mov	r2, r0
 8003de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dec:	4611      	mov	r1, r2
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff ff80 	bl	8003cf4 <__NVIC_SetPriority>
}
 8003df4:	bf00      	nop
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff ff54 	bl	8003cb8 <__NVIC_EnableIRQ>
}
 8003e10:	bf00      	nop
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e24:	f7ff fee6 	bl	8003bf4 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e099      	b.n	8003f68 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0201 	bic.w	r2, r2, #1
 8003e52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e54:	e00f      	b.n	8003e76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e56:	f7ff fecd 	bl	8003bf4 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	2b05      	cmp	r3, #5
 8003e62:	d908      	bls.n	8003e76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2220      	movs	r2, #32
 8003e68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2203      	movs	r2, #3
 8003e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e078      	b.n	8003f68 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1e8      	bne.n	8003e56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	4b38      	ldr	r3, [pc, #224]	; (8003f70 <HAL_DMA_Init+0x158>)
 8003e90:	4013      	ands	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ea2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d107      	bne.n	8003ee0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f023 0307 	bic.w	r3, r3, #7
 8003ef6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d117      	bne.n	8003f3a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00e      	beq.n	8003f3a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fb15 	bl	800454c <DMA_CheckFifoParam>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d008      	beq.n	8003f3a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2240      	movs	r2, #64	; 0x40
 8003f2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f36:	2301      	movs	r3, #1
 8003f38:	e016      	b.n	8003f68 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 facc 	bl	80044e0 <DMA_CalcBaseAndBitshift>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f50:	223f      	movs	r2, #63	; 0x3f
 8003f52:	409a      	lsls	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	e010803f 	.word	0xe010803f

08003f74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
 8003f80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d101      	bne.n	8003f9a <HAL_DMA_Start_IT+0x26>
 8003f96:	2302      	movs	r3, #2
 8003f98:	e048      	b.n	800402c <HAL_DMA_Start_IT+0xb8>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d137      	bne.n	800401e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	68b9      	ldr	r1, [r7, #8]
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 fa5e 	bl	8004484 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fcc:	223f      	movs	r2, #63	; 0x3f
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0216 	orr.w	r2, r2, #22
 8003fe2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695a      	ldr	r2, [r3, #20]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ff2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d007      	beq.n	800400c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f042 0208 	orr.w	r2, r2, #8
 800400a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0201 	orr.w	r2, r2, #1
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	e005      	b.n	800402a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004026:	2302      	movs	r3, #2
 8004028:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800402a:	7dfb      	ldrb	r3, [r7, #23]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004040:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004042:	f7ff fdd7 	bl	8003bf4 <HAL_GetTick>
 8004046:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800404e:	b2db      	uxtb	r3, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d008      	beq.n	8004066 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2280      	movs	r2, #128	; 0x80
 8004058:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e052      	b.n	800410c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0216 	bic.w	r2, r2, #22
 8004074:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695a      	ldr	r2, [r3, #20]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004084:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	2b00      	cmp	r3, #0
 800408c:	d103      	bne.n	8004096 <HAL_DMA_Abort+0x62>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004092:	2b00      	cmp	r3, #0
 8004094:	d007      	beq.n	80040a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0208 	bic.w	r2, r2, #8
 80040a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0201 	bic.w	r2, r2, #1
 80040b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040b6:	e013      	b.n	80040e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040b8:	f7ff fd9c 	bl	8003bf4 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b05      	cmp	r3, #5
 80040c4:	d90c      	bls.n	80040e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2203      	movs	r2, #3
 80040d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e015      	b.n	800410c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1e4      	bne.n	80040b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f2:	223f      	movs	r2, #63	; 0x3f
 80040f4:	409a      	lsls	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d004      	beq.n	8004132 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2280      	movs	r2, #128	; 0x80
 800412c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e00c      	b.n	800414c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2205      	movs	r2, #5
 8004136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0201 	bic.w	r2, r2, #1
 8004148:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004160:	2300      	movs	r3, #0
 8004162:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004164:	4b8e      	ldr	r3, [pc, #568]	; (80043a0 <HAL_DMA_IRQHandler+0x248>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a8e      	ldr	r2, [pc, #568]	; (80043a4 <HAL_DMA_IRQHandler+0x24c>)
 800416a:	fba2 2303 	umull	r2, r3, r2, r3
 800416e:	0a9b      	lsrs	r3, r3, #10
 8004170:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004176:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004182:	2208      	movs	r2, #8
 8004184:	409a      	lsls	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	4013      	ands	r3, r2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d01a      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	d013      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0204 	bic.w	r2, r2, #4
 80041aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b0:	2208      	movs	r2, #8
 80041b2:	409a      	lsls	r2, r3
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041bc:	f043 0201 	orr.w	r2, r3, #1
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c8:	2201      	movs	r2, #1
 80041ca:	409a      	lsls	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4013      	ands	r3, r2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d012      	beq.n	80041fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00b      	beq.n	80041fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e6:	2201      	movs	r2, #1
 80041e8:	409a      	lsls	r2, r3
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f2:	f043 0202 	orr.w	r2, r3, #2
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fe:	2204      	movs	r2, #4
 8004200:	409a      	lsls	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4013      	ands	r3, r2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d012      	beq.n	8004230 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00b      	beq.n	8004230 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800421c:	2204      	movs	r2, #4
 800421e:	409a      	lsls	r2, r3
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004228:	f043 0204 	orr.w	r2, r3, #4
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004234:	2210      	movs	r2, #16
 8004236:	409a      	lsls	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4013      	ands	r3, r2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d043      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	2b00      	cmp	r3, #0
 800424c:	d03c      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004252:	2210      	movs	r2, #16
 8004254:	409a      	lsls	r2, r3
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d018      	beq.n	800429a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d108      	bne.n	8004288 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	2b00      	cmp	r3, #0
 800427c:	d024      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	4798      	blx	r3
 8004286:	e01f      	b.n	80042c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800428c:	2b00      	cmp	r3, #0
 800428e:	d01b      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	4798      	blx	r3
 8004298:	e016      	b.n	80042c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d107      	bne.n	80042b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0208 	bic.w	r2, r2, #8
 80042b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042cc:	2220      	movs	r2, #32
 80042ce:	409a      	lsls	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4013      	ands	r3, r2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 808f 	beq.w	80043f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0310 	and.w	r3, r3, #16
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 8087 	beq.w	80043f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ee:	2220      	movs	r2, #32
 80042f0:	409a      	lsls	r2, r3
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b05      	cmp	r3, #5
 8004300:	d136      	bne.n	8004370 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0216 	bic.w	r2, r2, #22
 8004310:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695a      	ldr	r2, [r3, #20]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004320:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	2b00      	cmp	r3, #0
 8004328:	d103      	bne.n	8004332 <HAL_DMA_IRQHandler+0x1da>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800432e:	2b00      	cmp	r3, #0
 8004330:	d007      	beq.n	8004342 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0208 	bic.w	r2, r2, #8
 8004340:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004346:	223f      	movs	r2, #63	; 0x3f
 8004348:	409a      	lsls	r2, r3
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004362:	2b00      	cmp	r3, #0
 8004364:	d07e      	beq.n	8004464 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	4798      	blx	r3
        }
        return;
 800436e:	e079      	b.n	8004464 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d01d      	beq.n	80043ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10d      	bne.n	80043a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004390:	2b00      	cmp	r3, #0
 8004392:	d031      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	4798      	blx	r3
 800439c:	e02c      	b.n	80043f8 <HAL_DMA_IRQHandler+0x2a0>
 800439e:	bf00      	nop
 80043a0:	20000004 	.word	0x20000004
 80043a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d023      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	4798      	blx	r3
 80043b8:	e01e      	b.n	80043f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10f      	bne.n	80043e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 0210 	bic.w	r2, r2, #16
 80043d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d003      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d032      	beq.n	8004466 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d022      	beq.n	8004452 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2205      	movs	r2, #5
 8004410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0201 	bic.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	3301      	adds	r3, #1
 8004428:	60bb      	str	r3, [r7, #8]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	429a      	cmp	r2, r3
 800442e:	d307      	bcc.n	8004440 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f2      	bne.n	8004424 <HAL_DMA_IRQHandler+0x2cc>
 800443e:	e000      	b.n	8004442 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004440:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	4798      	blx	r3
 8004462:	e000      	b.n	8004466 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004464:	bf00      	nop
    }
  }
}
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004478:	4618      	mov	r0, r3
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2b40      	cmp	r3, #64	; 0x40
 80044b0:	d108      	bne.n	80044c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044c2:	e007      	b.n	80044d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	60da      	str	r2, [r3, #12]
}
 80044d4:	bf00      	nop
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b085      	sub	sp, #20
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	3b10      	subs	r3, #16
 80044f0:	4a13      	ldr	r2, [pc, #76]	; (8004540 <DMA_CalcBaseAndBitshift+0x60>)
 80044f2:	fba2 2303 	umull	r2, r3, r2, r3
 80044f6:	091b      	lsrs	r3, r3, #4
 80044f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80044fa:	4a12      	ldr	r2, [pc, #72]	; (8004544 <DMA_CalcBaseAndBitshift+0x64>)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	4413      	add	r3, r2
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b03      	cmp	r3, #3
 800450c:	d908      	bls.n	8004520 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	461a      	mov	r2, r3
 8004514:	4b0c      	ldr	r3, [pc, #48]	; (8004548 <DMA_CalcBaseAndBitshift+0x68>)
 8004516:	4013      	ands	r3, r2
 8004518:	1d1a      	adds	r2, r3, #4
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	659a      	str	r2, [r3, #88]	; 0x58
 800451e:	e006      	b.n	800452e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	461a      	mov	r2, r3
 8004526:	4b08      	ldr	r3, [pc, #32]	; (8004548 <DMA_CalcBaseAndBitshift+0x68>)
 8004528:	4013      	ands	r3, r2
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004532:	4618      	mov	r0, r3
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	aaaaaaab 	.word	0xaaaaaaab
 8004544:	0801d7d0 	.word	0x0801d7d0
 8004548:	fffffc00 	.word	0xfffffc00

0800454c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d11f      	bne.n	80045a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2b03      	cmp	r3, #3
 800456a:	d856      	bhi.n	800461a <DMA_CheckFifoParam+0xce>
 800456c:	a201      	add	r2, pc, #4	; (adr r2, 8004574 <DMA_CheckFifoParam+0x28>)
 800456e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004572:	bf00      	nop
 8004574:	08004585 	.word	0x08004585
 8004578:	08004597 	.word	0x08004597
 800457c:	08004585 	.word	0x08004585
 8004580:	0800461b 	.word	0x0800461b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d046      	beq.n	800461e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004594:	e043      	b.n	800461e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800459e:	d140      	bne.n	8004622 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045a4:	e03d      	b.n	8004622 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ae:	d121      	bne.n	80045f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b03      	cmp	r3, #3
 80045b4:	d837      	bhi.n	8004626 <DMA_CheckFifoParam+0xda>
 80045b6:	a201      	add	r2, pc, #4	; (adr r2, 80045bc <DMA_CheckFifoParam+0x70>)
 80045b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045bc:	080045cd 	.word	0x080045cd
 80045c0:	080045d3 	.word	0x080045d3
 80045c4:	080045cd 	.word	0x080045cd
 80045c8:	080045e5 	.word	0x080045e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	73fb      	strb	r3, [r7, #15]
      break;
 80045d0:	e030      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d025      	beq.n	800462a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045e2:	e022      	b.n	800462a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045ec:	d11f      	bne.n	800462e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80045f2:	e01c      	b.n	800462e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d903      	bls.n	8004602 <DMA_CheckFifoParam+0xb6>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d003      	beq.n	8004608 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004600:	e018      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	73fb      	strb	r3, [r7, #15]
      break;
 8004606:	e015      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00e      	beq.n	8004632 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	73fb      	strb	r3, [r7, #15]
      break;
 8004618:	e00b      	b.n	8004632 <DMA_CheckFifoParam+0xe6>
      break;
 800461a:	bf00      	nop
 800461c:	e00a      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      break;
 800461e:	bf00      	nop
 8004620:	e008      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      break;
 8004622:	bf00      	nop
 8004624:	e006      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      break;
 8004626:	bf00      	nop
 8004628:	e004      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      break;
 800462a:	bf00      	nop
 800462c:	e002      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      break;   
 800462e:	bf00      	nop
 8004630:	e000      	b.n	8004634 <DMA_CheckFifoParam+0xe8>
      break;
 8004632:	bf00      	nop
    }
  } 
  
  return status; 
 8004634:	7bfb      	ldrb	r3, [r7, #15]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop

08004644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004644:	b480      	push	{r7}
 8004646:	b089      	sub	sp, #36	; 0x24
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800464e:	2300      	movs	r3, #0
 8004650:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004656:	2300      	movs	r3, #0
 8004658:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800465a:	2300      	movs	r3, #0
 800465c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800465e:	2300      	movs	r3, #0
 8004660:	61fb      	str	r3, [r7, #28]
 8004662:	e175      	b.n	8004950 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004664:	2201      	movs	r2, #1
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4013      	ands	r3, r2
 8004676:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	429a      	cmp	r2, r3
 800467e:	f040 8164 	bne.w	800494a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	2b01      	cmp	r3, #1
 800468c:	d005      	beq.n	800469a <HAL_GPIO_Init+0x56>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d130      	bne.n	80046fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	2203      	movs	r2, #3
 80046a6:	fa02 f303 	lsl.w	r3, r2, r3
 80046aa:	43db      	mvns	r3, r3
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	4013      	ands	r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80046d0:	2201      	movs	r2, #1
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	43db      	mvns	r3, r3
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	4013      	ands	r3, r2
 80046de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	091b      	lsrs	r3, r3, #4
 80046e6:	f003 0201 	and.w	r2, r3, #1
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	2b03      	cmp	r3, #3
 8004706:	d017      	beq.n	8004738 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	005b      	lsls	r3, r3, #1
 8004712:	2203      	movs	r2, #3
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	43db      	mvns	r3, r3
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	4013      	ands	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4313      	orrs	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f003 0303 	and.w	r3, r3, #3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d123      	bne.n	800478c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	08da      	lsrs	r2, r3, #3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3208      	adds	r2, #8
 800474c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	220f      	movs	r2, #15
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4013      	ands	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	691a      	ldr	r2, [r3, #16]
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	4313      	orrs	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	08da      	lsrs	r2, r3, #3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3208      	adds	r2, #8
 8004786:	69b9      	ldr	r1, [r7, #24]
 8004788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	2203      	movs	r2, #3
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	43db      	mvns	r3, r3
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	4013      	ands	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f003 0203 	and.w	r2, r3, #3
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	fa02 f303 	lsl.w	r3, r2, r3
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69ba      	ldr	r2, [r7, #24]
 80047be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 80be 	beq.w	800494a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ce:	4b66      	ldr	r3, [pc, #408]	; (8004968 <HAL_GPIO_Init+0x324>)
 80047d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d2:	4a65      	ldr	r2, [pc, #404]	; (8004968 <HAL_GPIO_Init+0x324>)
 80047d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047d8:	6453      	str	r3, [r2, #68]	; 0x44
 80047da:	4b63      	ldr	r3, [pc, #396]	; (8004968 <HAL_GPIO_Init+0x324>)
 80047dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047e2:	60fb      	str	r3, [r7, #12]
 80047e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80047e6:	4a61      	ldr	r2, [pc, #388]	; (800496c <HAL_GPIO_Init+0x328>)
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	089b      	lsrs	r3, r3, #2
 80047ec:	3302      	adds	r3, #2
 80047ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	220f      	movs	r2, #15
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	43db      	mvns	r3, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	4013      	ands	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a58      	ldr	r2, [pc, #352]	; (8004970 <HAL_GPIO_Init+0x32c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d037      	beq.n	8004882 <HAL_GPIO_Init+0x23e>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a57      	ldr	r2, [pc, #348]	; (8004974 <HAL_GPIO_Init+0x330>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d031      	beq.n	800487e <HAL_GPIO_Init+0x23a>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a56      	ldr	r2, [pc, #344]	; (8004978 <HAL_GPIO_Init+0x334>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d02b      	beq.n	800487a <HAL_GPIO_Init+0x236>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a55      	ldr	r2, [pc, #340]	; (800497c <HAL_GPIO_Init+0x338>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d025      	beq.n	8004876 <HAL_GPIO_Init+0x232>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a54      	ldr	r2, [pc, #336]	; (8004980 <HAL_GPIO_Init+0x33c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d01f      	beq.n	8004872 <HAL_GPIO_Init+0x22e>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a53      	ldr	r2, [pc, #332]	; (8004984 <HAL_GPIO_Init+0x340>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d019      	beq.n	800486e <HAL_GPIO_Init+0x22a>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a52      	ldr	r2, [pc, #328]	; (8004988 <HAL_GPIO_Init+0x344>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d013      	beq.n	800486a <HAL_GPIO_Init+0x226>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a51      	ldr	r2, [pc, #324]	; (800498c <HAL_GPIO_Init+0x348>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00d      	beq.n	8004866 <HAL_GPIO_Init+0x222>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a50      	ldr	r2, [pc, #320]	; (8004990 <HAL_GPIO_Init+0x34c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d007      	beq.n	8004862 <HAL_GPIO_Init+0x21e>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a4f      	ldr	r2, [pc, #316]	; (8004994 <HAL_GPIO_Init+0x350>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d101      	bne.n	800485e <HAL_GPIO_Init+0x21a>
 800485a:	2309      	movs	r3, #9
 800485c:	e012      	b.n	8004884 <HAL_GPIO_Init+0x240>
 800485e:	230a      	movs	r3, #10
 8004860:	e010      	b.n	8004884 <HAL_GPIO_Init+0x240>
 8004862:	2308      	movs	r3, #8
 8004864:	e00e      	b.n	8004884 <HAL_GPIO_Init+0x240>
 8004866:	2307      	movs	r3, #7
 8004868:	e00c      	b.n	8004884 <HAL_GPIO_Init+0x240>
 800486a:	2306      	movs	r3, #6
 800486c:	e00a      	b.n	8004884 <HAL_GPIO_Init+0x240>
 800486e:	2305      	movs	r3, #5
 8004870:	e008      	b.n	8004884 <HAL_GPIO_Init+0x240>
 8004872:	2304      	movs	r3, #4
 8004874:	e006      	b.n	8004884 <HAL_GPIO_Init+0x240>
 8004876:	2303      	movs	r3, #3
 8004878:	e004      	b.n	8004884 <HAL_GPIO_Init+0x240>
 800487a:	2302      	movs	r3, #2
 800487c:	e002      	b.n	8004884 <HAL_GPIO_Init+0x240>
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <HAL_GPIO_Init+0x240>
 8004882:	2300      	movs	r3, #0
 8004884:	69fa      	ldr	r2, [r7, #28]
 8004886:	f002 0203 	and.w	r2, r2, #3
 800488a:	0092      	lsls	r2, r2, #2
 800488c:	4093      	lsls	r3, r2
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	4313      	orrs	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004894:	4935      	ldr	r1, [pc, #212]	; (800496c <HAL_GPIO_Init+0x328>)
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	089b      	lsrs	r3, r3, #2
 800489a:	3302      	adds	r3, #2
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048a2:	4b3d      	ldr	r3, [pc, #244]	; (8004998 <HAL_GPIO_Init+0x354>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	43db      	mvns	r3, r3
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	4013      	ands	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048c6:	4a34      	ldr	r2, [pc, #208]	; (8004998 <HAL_GPIO_Init+0x354>)
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048cc:	4b32      	ldr	r3, [pc, #200]	; (8004998 <HAL_GPIO_Init+0x354>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	43db      	mvns	r3, r3
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	4013      	ands	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048f0:	4a29      	ldr	r2, [pc, #164]	; (8004998 <HAL_GPIO_Init+0x354>)
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048f6:	4b28      	ldr	r3, [pc, #160]	; (8004998 <HAL_GPIO_Init+0x354>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	43db      	mvns	r3, r3
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	4013      	ands	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	4313      	orrs	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800491a:	4a1f      	ldr	r2, [pc, #124]	; (8004998 <HAL_GPIO_Init+0x354>)
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004920:	4b1d      	ldr	r3, [pc, #116]	; (8004998 <HAL_GPIO_Init+0x354>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	43db      	mvns	r3, r3
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	4013      	ands	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	4313      	orrs	r3, r2
 8004942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004944:	4a14      	ldr	r2, [pc, #80]	; (8004998 <HAL_GPIO_Init+0x354>)
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	3301      	adds	r3, #1
 800494e:	61fb      	str	r3, [r7, #28]
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	2b0f      	cmp	r3, #15
 8004954:	f67f ae86 	bls.w	8004664 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004958:	bf00      	nop
 800495a:	bf00      	nop
 800495c:	3724      	adds	r7, #36	; 0x24
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	40023800 	.word	0x40023800
 800496c:	40013800 	.word	0x40013800
 8004970:	40020000 	.word	0x40020000
 8004974:	40020400 	.word	0x40020400
 8004978:	40020800 	.word	0x40020800
 800497c:	40020c00 	.word	0x40020c00
 8004980:	40021000 	.word	0x40021000
 8004984:	40021400 	.word	0x40021400
 8004988:	40021800 	.word	0x40021800
 800498c:	40021c00 	.word	0x40021c00
 8004990:	40022000 	.word	0x40022000
 8004994:	40022400 	.word	0x40022400
 8004998:	40013c00 	.word	0x40013c00

0800499c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	691a      	ldr	r2, [r3, #16]
 80049ac:	887b      	ldrh	r3, [r7, #2]
 80049ae:	4013      	ands	r3, r2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049b4:	2301      	movs	r3, #1
 80049b6:	73fb      	strb	r3, [r7, #15]
 80049b8:	e001      	b.n	80049be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049ba:	2300      	movs	r3, #0
 80049bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049be:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	460b      	mov	r3, r1
 80049d6:	807b      	strh	r3, [r7, #2]
 80049d8:	4613      	mov	r3, r2
 80049da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049dc:	787b      	ldrb	r3, [r7, #1]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049e2:	887a      	ldrh	r2, [r7, #2]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80049e8:	e003      	b.n	80049f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80049ea:	887b      	ldrh	r3, [r7, #2]
 80049ec:	041a      	lsls	r2, r3, #16
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	619a      	str	r2, [r3, #24]
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80049fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a00:	b08f      	sub	sp, #60	; 0x3c
 8004a02:	af0a      	add	r7, sp, #40	; 0x28
 8004a04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d101      	bne.n	8004a10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e116      	b.n	8004c3e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7ff f816 	bl	8003a5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2203      	movs	r2, #3
 8004a34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d102      	bne.n	8004a4a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f003 ff00 	bl	8008854 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	603b      	str	r3, [r7, #0]
 8004a5a:	687e      	ldr	r6, [r7, #4]
 8004a5c:	466d      	mov	r5, sp
 8004a5e:	f106 0410 	add.w	r4, r6, #16
 8004a62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a72:	1d33      	adds	r3, r6, #4
 8004a74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a76:	6838      	ldr	r0, [r7, #0]
 8004a78:	f003 fe94 	bl	80087a4 <USB_CoreInit>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d005      	beq.n	8004a8e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2202      	movs	r2, #2
 8004a86:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e0d7      	b.n	8004c3e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	2100      	movs	r1, #0
 8004a94:	4618      	mov	r0, r3
 8004a96:	f003 feee 	bl	8008876 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	73fb      	strb	r3, [r7, #15]
 8004a9e:	e04a      	b.n	8004b36 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004aa0:	7bfa      	ldrb	r2, [r7, #15]
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	4413      	add	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	440b      	add	r3, r1
 8004aae:	333d      	adds	r3, #61	; 0x3d
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004ab4:	7bfa      	ldrb	r2, [r7, #15]
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	4413      	add	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	333c      	adds	r3, #60	; 0x3c
 8004ac4:	7bfa      	ldrb	r2, [r7, #15]
 8004ac6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004ac8:	7bfa      	ldrb	r2, [r7, #15]
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	b298      	uxth	r0, r3
 8004ace:	6879      	ldr	r1, [r7, #4]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	00db      	lsls	r3, r3, #3
 8004ad4:	4413      	add	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	440b      	add	r3, r1
 8004ada:	3344      	adds	r3, #68	; 0x44
 8004adc:	4602      	mov	r2, r0
 8004ade:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ae0:	7bfa      	ldrb	r2, [r7, #15]
 8004ae2:	6879      	ldr	r1, [r7, #4]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	4413      	add	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	440b      	add	r3, r1
 8004aee:	3340      	adds	r3, #64	; 0x40
 8004af0:	2200      	movs	r2, #0
 8004af2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004af4:	7bfa      	ldrb	r2, [r7, #15]
 8004af6:	6879      	ldr	r1, [r7, #4]
 8004af8:	4613      	mov	r3, r2
 8004afa:	00db      	lsls	r3, r3, #3
 8004afc:	4413      	add	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	440b      	add	r3, r1
 8004b02:	3348      	adds	r3, #72	; 0x48
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b08:	7bfa      	ldrb	r2, [r7, #15]
 8004b0a:	6879      	ldr	r1, [r7, #4]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	00db      	lsls	r3, r3, #3
 8004b10:	4413      	add	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	440b      	add	r3, r1
 8004b16:	334c      	adds	r3, #76	; 0x4c
 8004b18:	2200      	movs	r2, #0
 8004b1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b1c:	7bfa      	ldrb	r2, [r7, #15]
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	4613      	mov	r3, r2
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	4413      	add	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	3354      	adds	r3, #84	; 0x54
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
 8004b32:	3301      	adds	r3, #1
 8004b34:	73fb      	strb	r3, [r7, #15]
 8004b36:	7bfa      	ldrb	r2, [r7, #15]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d3af      	bcc.n	8004aa0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b40:	2300      	movs	r3, #0
 8004b42:	73fb      	strb	r3, [r7, #15]
 8004b44:	e044      	b.n	8004bd0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b46:	7bfa      	ldrb	r2, [r7, #15]
 8004b48:	6879      	ldr	r1, [r7, #4]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	4413      	add	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	440b      	add	r3, r1
 8004b54:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004b58:	2200      	movs	r2, #0
 8004b5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004b5c:	7bfa      	ldrb	r2, [r7, #15]
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	4613      	mov	r3, r2
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	4413      	add	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004b6e:	7bfa      	ldrb	r2, [r7, #15]
 8004b70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004b72:	7bfa      	ldrb	r2, [r7, #15]
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	4613      	mov	r3, r2
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	4413      	add	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	440b      	add	r3, r1
 8004b80:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004b84:	2200      	movs	r2, #0
 8004b86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b88:	7bfa      	ldrb	r2, [r7, #15]
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	4413      	add	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b9e:	7bfa      	ldrb	r2, [r7, #15]
 8004ba0:	6879      	ldr	r1, [r7, #4]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	440b      	add	r3, r1
 8004bac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004bb4:	7bfa      	ldrb	r2, [r7, #15]
 8004bb6:	6879      	ldr	r1, [r7, #4]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	4413      	add	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bca:	7bfb      	ldrb	r3, [r7, #15]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	73fb      	strb	r3, [r7, #15]
 8004bd0:	7bfa      	ldrb	r2, [r7, #15]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d3b5      	bcc.n	8004b46 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	603b      	str	r3, [r7, #0]
 8004be0:	687e      	ldr	r6, [r7, #4]
 8004be2:	466d      	mov	r5, sp
 8004be4:	f106 0410 	add.w	r4, r6, #16
 8004be8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bf0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004bf4:	e885 0003 	stmia.w	r5, {r0, r1}
 8004bf8:	1d33      	adds	r3, r6, #4
 8004bfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bfc:	6838      	ldr	r0, [r7, #0]
 8004bfe:	f003 fe87 	bl	8008910 <USB_DevInit>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d005      	beq.n	8004c14 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e014      	b.n	8004c3e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d102      	bne.n	8004c32 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f80b 	bl	8004c48 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f004 f845 	bl	8008cc6 <USB_DevDisconnect>

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004c48 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c76:	4b05      	ldr	r3, [pc, #20]	; (8004c8c <HAL_PCDEx_ActivateLPM+0x44>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	10000003 	.word	0x10000003

08004c90 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c94:	4b05      	ldr	r3, [pc, #20]	; (8004cac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a04      	ldr	r2, [pc, #16]	; (8004cac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c9e:	6013      	str	r3, [r2, #0]
}
 8004ca0:	bf00      	nop
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	40007000 	.word	0x40007000

08004cb0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004cba:	4b23      	ldr	r3, [pc, #140]	; (8004d48 <HAL_PWREx_EnableOverDrive+0x98>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	4a22      	ldr	r2, [pc, #136]	; (8004d48 <HAL_PWREx_EnableOverDrive+0x98>)
 8004cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8004cc6:	4b20      	ldr	r3, [pc, #128]	; (8004d48 <HAL_PWREx_EnableOverDrive+0x98>)
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cce:	603b      	str	r3, [r7, #0]
 8004cd0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004cd2:	4b1e      	ldr	r3, [pc, #120]	; (8004d4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a1d      	ldr	r2, [pc, #116]	; (8004d4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cdc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cde:	f7fe ff89 	bl	8003bf4 <HAL_GetTick>
 8004ce2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ce4:	e009      	b.n	8004cfa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004ce6:	f7fe ff85 	bl	8003bf4 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cf4:	d901      	bls.n	8004cfa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e022      	b.n	8004d40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004cfa:	4b14      	ldr	r3, [pc, #80]	; (8004d4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d06:	d1ee      	bne.n	8004ce6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004d08:	4b10      	ldr	r3, [pc, #64]	; (8004d4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a0f      	ldr	r2, [pc, #60]	; (8004d4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d12:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d14:	f7fe ff6e 	bl	8003bf4 <HAL_GetTick>
 8004d18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d1a:	e009      	b.n	8004d30 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d1c:	f7fe ff6a 	bl	8003bf4 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d2a:	d901      	bls.n	8004d30 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e007      	b.n	8004d40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d30:	4b06      	ldr	r3, [pc, #24]	; (8004d4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d3c:	d1ee      	bne.n	8004d1c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	40023800 	.word	0x40023800
 8004d4c:	40007000 	.word	0x40007000

08004d50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e29b      	b.n	800529e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	f000 8087 	beq.w	8004e82 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d74:	4b96      	ldr	r3, [pc, #600]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f003 030c 	and.w	r3, r3, #12
 8004d7c:	2b04      	cmp	r3, #4
 8004d7e:	d00c      	beq.n	8004d9a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d80:	4b93      	ldr	r3, [pc, #588]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f003 030c 	and.w	r3, r3, #12
 8004d88:	2b08      	cmp	r3, #8
 8004d8a:	d112      	bne.n	8004db2 <HAL_RCC_OscConfig+0x62>
 8004d8c:	4b90      	ldr	r3, [pc, #576]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d98:	d10b      	bne.n	8004db2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d9a:	4b8d      	ldr	r3, [pc, #564]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d06c      	beq.n	8004e80 <HAL_RCC_OscConfig+0x130>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d168      	bne.n	8004e80 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e275      	b.n	800529e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dba:	d106      	bne.n	8004dca <HAL_RCC_OscConfig+0x7a>
 8004dbc:	4b84      	ldr	r3, [pc, #528]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a83      	ldr	r2, [pc, #524]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004dc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	e02e      	b.n	8004e28 <HAL_RCC_OscConfig+0xd8>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10c      	bne.n	8004dec <HAL_RCC_OscConfig+0x9c>
 8004dd2:	4b7f      	ldr	r3, [pc, #508]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a7e      	ldr	r2, [pc, #504]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004dd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	4b7c      	ldr	r3, [pc, #496]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a7b      	ldr	r2, [pc, #492]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004de4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004de8:	6013      	str	r3, [r2, #0]
 8004dea:	e01d      	b.n	8004e28 <HAL_RCC_OscConfig+0xd8>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004df4:	d10c      	bne.n	8004e10 <HAL_RCC_OscConfig+0xc0>
 8004df6:	4b76      	ldr	r3, [pc, #472]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a75      	ldr	r2, [pc, #468]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004dfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	4b73      	ldr	r3, [pc, #460]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a72      	ldr	r2, [pc, #456]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	e00b      	b.n	8004e28 <HAL_RCC_OscConfig+0xd8>
 8004e10:	4b6f      	ldr	r3, [pc, #444]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a6e      	ldr	r2, [pc, #440]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e1a:	6013      	str	r3, [r2, #0]
 8004e1c:	4b6c      	ldr	r3, [pc, #432]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a6b      	ldr	r2, [pc, #428]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d013      	beq.n	8004e58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e30:	f7fe fee0 	bl	8003bf4 <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e38:	f7fe fedc 	bl	8003bf4 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b64      	cmp	r3, #100	; 0x64
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e229      	b.n	800529e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e4a:	4b61      	ldr	r3, [pc, #388]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d0f0      	beq.n	8004e38 <HAL_RCC_OscConfig+0xe8>
 8004e56:	e014      	b.n	8004e82 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e58:	f7fe fecc 	bl	8003bf4 <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e60:	f7fe fec8 	bl	8003bf4 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b64      	cmp	r3, #100	; 0x64
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e215      	b.n	800529e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e72:	4b57      	ldr	r3, [pc, #348]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1f0      	bne.n	8004e60 <HAL_RCC_OscConfig+0x110>
 8004e7e:	e000      	b.n	8004e82 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d069      	beq.n	8004f62 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e8e:	4b50      	ldr	r3, [pc, #320]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f003 030c 	and.w	r3, r3, #12
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00b      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e9a:	4b4d      	ldr	r3, [pc, #308]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 030c 	and.w	r3, r3, #12
 8004ea2:	2b08      	cmp	r3, #8
 8004ea4:	d11c      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x190>
 8004ea6:	4b4a      	ldr	r3, [pc, #296]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d116      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eb2:	4b47      	ldr	r3, [pc, #284]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0302 	and.w	r3, r3, #2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d005      	beq.n	8004eca <HAL_RCC_OscConfig+0x17a>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d001      	beq.n	8004eca <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e1e9      	b.n	800529e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eca:	4b41      	ldr	r3, [pc, #260]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	493d      	ldr	r1, [pc, #244]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ede:	e040      	b.n	8004f62 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d023      	beq.n	8004f30 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ee8:	4b39      	ldr	r3, [pc, #228]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a38      	ldr	r2, [pc, #224]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004eee:	f043 0301 	orr.w	r3, r3, #1
 8004ef2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef4:	f7fe fe7e 	bl	8003bf4 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004efc:	f7fe fe7a 	bl	8003bf4 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e1c7      	b.n	800529e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f0e:	4b30      	ldr	r3, [pc, #192]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0f0      	beq.n	8004efc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f1a:	4b2d      	ldr	r3, [pc, #180]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	4929      	ldr	r1, [pc, #164]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	600b      	str	r3, [r1, #0]
 8004f2e:	e018      	b.n	8004f62 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f30:	4b27      	ldr	r3, [pc, #156]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a26      	ldr	r2, [pc, #152]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004f36:	f023 0301 	bic.w	r3, r3, #1
 8004f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3c:	f7fe fe5a 	bl	8003bf4 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f44:	f7fe fe56 	bl	8003bf4 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e1a3      	b.n	800529e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f56:	4b1e      	ldr	r3, [pc, #120]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f0      	bne.n	8004f44 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d038      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d019      	beq.n	8004faa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f76:	4b16      	ldr	r3, [pc, #88]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f7a:	4a15      	ldr	r2, [pc, #84]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004f7c:	f043 0301 	orr.w	r3, r3, #1
 8004f80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f82:	f7fe fe37 	bl	8003bf4 <HAL_GetTick>
 8004f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f88:	e008      	b.n	8004f9c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f8a:	f7fe fe33 	bl	8003bf4 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e180      	b.n	800529e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f9c:	4b0c      	ldr	r3, [pc, #48]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0f0      	beq.n	8004f8a <HAL_RCC_OscConfig+0x23a>
 8004fa8:	e01a      	b.n	8004fe0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004faa:	4b09      	ldr	r3, [pc, #36]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fae:	4a08      	ldr	r2, [pc, #32]	; (8004fd0 <HAL_RCC_OscConfig+0x280>)
 8004fb0:	f023 0301 	bic.w	r3, r3, #1
 8004fb4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fb6:	f7fe fe1d 	bl	8003bf4 <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fbc:	e00a      	b.n	8004fd4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fbe:	f7fe fe19 	bl	8003bf4 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d903      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e166      	b.n	800529e <HAL_RCC_OscConfig+0x54e>
 8004fd0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fd4:	4b92      	ldr	r3, [pc, #584]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 8004fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1ee      	bne.n	8004fbe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 80a4 	beq.w	8005136 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fee:	4b8c      	ldr	r3, [pc, #560]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10d      	bne.n	8005016 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ffa:	4b89      	ldr	r3, [pc, #548]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	4a88      	ldr	r2, [pc, #544]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 8005000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005004:	6413      	str	r3, [r2, #64]	; 0x40
 8005006:	4b86      	ldr	r3, [pc, #536]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800500e:	60bb      	str	r3, [r7, #8]
 8005010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005012:	2301      	movs	r3, #1
 8005014:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005016:	4b83      	ldr	r3, [pc, #524]	; (8005224 <HAL_RCC_OscConfig+0x4d4>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800501e:	2b00      	cmp	r3, #0
 8005020:	d118      	bne.n	8005054 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005022:	4b80      	ldr	r3, [pc, #512]	; (8005224 <HAL_RCC_OscConfig+0x4d4>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a7f      	ldr	r2, [pc, #508]	; (8005224 <HAL_RCC_OscConfig+0x4d4>)
 8005028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800502c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800502e:	f7fe fde1 	bl	8003bf4 <HAL_GetTick>
 8005032:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005034:	e008      	b.n	8005048 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005036:	f7fe fddd 	bl	8003bf4 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	2b64      	cmp	r3, #100	; 0x64
 8005042:	d901      	bls.n	8005048 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e12a      	b.n	800529e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005048:	4b76      	ldr	r3, [pc, #472]	; (8005224 <HAL_RCC_OscConfig+0x4d4>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0f0      	beq.n	8005036 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d106      	bne.n	800506a <HAL_RCC_OscConfig+0x31a>
 800505c:	4b70      	ldr	r3, [pc, #448]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 800505e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005060:	4a6f      	ldr	r2, [pc, #444]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 8005062:	f043 0301 	orr.w	r3, r3, #1
 8005066:	6713      	str	r3, [r2, #112]	; 0x70
 8005068:	e02d      	b.n	80050c6 <HAL_RCC_OscConfig+0x376>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10c      	bne.n	800508c <HAL_RCC_OscConfig+0x33c>
 8005072:	4b6b      	ldr	r3, [pc, #428]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 8005074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005076:	4a6a      	ldr	r2, [pc, #424]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 8005078:	f023 0301 	bic.w	r3, r3, #1
 800507c:	6713      	str	r3, [r2, #112]	; 0x70
 800507e:	4b68      	ldr	r3, [pc, #416]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 8005080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005082:	4a67      	ldr	r2, [pc, #412]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 8005084:	f023 0304 	bic.w	r3, r3, #4
 8005088:	6713      	str	r3, [r2, #112]	; 0x70
 800508a:	e01c      	b.n	80050c6 <HAL_RCC_OscConfig+0x376>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	2b05      	cmp	r3, #5
 8005092:	d10c      	bne.n	80050ae <HAL_RCC_OscConfig+0x35e>
 8005094:	4b62      	ldr	r3, [pc, #392]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 8005096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005098:	4a61      	ldr	r2, [pc, #388]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 800509a:	f043 0304 	orr.w	r3, r3, #4
 800509e:	6713      	str	r3, [r2, #112]	; 0x70
 80050a0:	4b5f      	ldr	r3, [pc, #380]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 80050a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050a4:	4a5e      	ldr	r2, [pc, #376]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 80050a6:	f043 0301 	orr.w	r3, r3, #1
 80050aa:	6713      	str	r3, [r2, #112]	; 0x70
 80050ac:	e00b      	b.n	80050c6 <HAL_RCC_OscConfig+0x376>
 80050ae:	4b5c      	ldr	r3, [pc, #368]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 80050b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b2:	4a5b      	ldr	r2, [pc, #364]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 80050b4:	f023 0301 	bic.w	r3, r3, #1
 80050b8:	6713      	str	r3, [r2, #112]	; 0x70
 80050ba:	4b59      	ldr	r3, [pc, #356]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 80050bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050be:	4a58      	ldr	r2, [pc, #352]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 80050c0:	f023 0304 	bic.w	r3, r3, #4
 80050c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d015      	beq.n	80050fa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ce:	f7fe fd91 	bl	8003bf4 <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050d4:	e00a      	b.n	80050ec <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050d6:	f7fe fd8d 	bl	8003bf4 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d901      	bls.n	80050ec <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e0d8      	b.n	800529e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ec:	4b4c      	ldr	r3, [pc, #304]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 80050ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d0ee      	beq.n	80050d6 <HAL_RCC_OscConfig+0x386>
 80050f8:	e014      	b.n	8005124 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050fa:	f7fe fd7b 	bl	8003bf4 <HAL_GetTick>
 80050fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005100:	e00a      	b.n	8005118 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005102:	f7fe fd77 	bl	8003bf4 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005110:	4293      	cmp	r3, r2
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e0c2      	b.n	800529e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005118:	4b41      	ldr	r3, [pc, #260]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 800511a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1ee      	bne.n	8005102 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005124:	7dfb      	ldrb	r3, [r7, #23]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d105      	bne.n	8005136 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800512a:	4b3d      	ldr	r3, [pc, #244]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	4a3c      	ldr	r2, [pc, #240]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 8005130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005134:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 80ae 	beq.w	800529c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005140:	4b37      	ldr	r3, [pc, #220]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 030c 	and.w	r3, r3, #12
 8005148:	2b08      	cmp	r3, #8
 800514a:	d06d      	beq.n	8005228 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	2b02      	cmp	r3, #2
 8005152:	d14b      	bne.n	80051ec <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005154:	4b32      	ldr	r3, [pc, #200]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a31      	ldr	r2, [pc, #196]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 800515a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800515e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005160:	f7fe fd48 	bl	8003bf4 <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005166:	e008      	b.n	800517a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005168:	f7fe fd44 	bl	8003bf4 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e091      	b.n	800529e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800517a:	4b29      	ldr	r3, [pc, #164]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1f0      	bne.n	8005168 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69da      	ldr	r2, [r3, #28]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	019b      	lsls	r3, r3, #6
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519c:	085b      	lsrs	r3, r3, #1
 800519e:	3b01      	subs	r3, #1
 80051a0:	041b      	lsls	r3, r3, #16
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a8:	061b      	lsls	r3, r3, #24
 80051aa:	431a      	orrs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b0:	071b      	lsls	r3, r3, #28
 80051b2:	491b      	ldr	r1, [pc, #108]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051b8:	4b19      	ldr	r3, [pc, #100]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a18      	ldr	r2, [pc, #96]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 80051be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c4:	f7fe fd16 	bl	8003bf4 <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051cc:	f7fe fd12 	bl	8003bf4 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e05f      	b.n	800529e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051de:	4b10      	ldr	r3, [pc, #64]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d0f0      	beq.n	80051cc <HAL_RCC_OscConfig+0x47c>
 80051ea:	e057      	b.n	800529c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ec:	4b0c      	ldr	r3, [pc, #48]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a0b      	ldr	r2, [pc, #44]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 80051f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f8:	f7fe fcfc 	bl	8003bf4 <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005200:	f7fe fcf8 	bl	8003bf4 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e045      	b.n	800529e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005212:	4b03      	ldr	r3, [pc, #12]	; (8005220 <HAL_RCC_OscConfig+0x4d0>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1f0      	bne.n	8005200 <HAL_RCC_OscConfig+0x4b0>
 800521e:	e03d      	b.n	800529c <HAL_RCC_OscConfig+0x54c>
 8005220:	40023800 	.word	0x40023800
 8005224:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005228:	4b1f      	ldr	r3, [pc, #124]	; (80052a8 <HAL_RCC_OscConfig+0x558>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d030      	beq.n	8005298 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005240:	429a      	cmp	r2, r3
 8005242:	d129      	bne.n	8005298 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800524e:	429a      	cmp	r2, r3
 8005250:	d122      	bne.n	8005298 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005258:	4013      	ands	r3, r2
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800525e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005260:	4293      	cmp	r3, r2
 8005262:	d119      	bne.n	8005298 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526e:	085b      	lsrs	r3, r3, #1
 8005270:	3b01      	subs	r3, #1
 8005272:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005274:	429a      	cmp	r2, r3
 8005276:	d10f      	bne.n	8005298 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005282:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005284:	429a      	cmp	r2, r3
 8005286:	d107      	bne.n	8005298 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005292:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005294:	429a      	cmp	r2, r3
 8005296:	d001      	beq.n	800529c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e000      	b.n	800529e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	40023800 	.word	0x40023800

080052ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80052b6:	2300      	movs	r3, #0
 80052b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d101      	bne.n	80052c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e0d0      	b.n	8005466 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052c4:	4b6a      	ldr	r3, [pc, #424]	; (8005470 <HAL_RCC_ClockConfig+0x1c4>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 030f 	and.w	r3, r3, #15
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d910      	bls.n	80052f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052d2:	4b67      	ldr	r3, [pc, #412]	; (8005470 <HAL_RCC_ClockConfig+0x1c4>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f023 020f 	bic.w	r2, r3, #15
 80052da:	4965      	ldr	r1, [pc, #404]	; (8005470 <HAL_RCC_ClockConfig+0x1c4>)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	4313      	orrs	r3, r2
 80052e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052e2:	4b63      	ldr	r3, [pc, #396]	; (8005470 <HAL_RCC_ClockConfig+0x1c4>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d001      	beq.n	80052f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e0b8      	b.n	8005466 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d020      	beq.n	8005342 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	d005      	beq.n	8005318 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800530c:	4b59      	ldr	r3, [pc, #356]	; (8005474 <HAL_RCC_ClockConfig+0x1c8>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	4a58      	ldr	r2, [pc, #352]	; (8005474 <HAL_RCC_ClockConfig+0x1c8>)
 8005312:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005316:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0308 	and.w	r3, r3, #8
 8005320:	2b00      	cmp	r3, #0
 8005322:	d005      	beq.n	8005330 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005324:	4b53      	ldr	r3, [pc, #332]	; (8005474 <HAL_RCC_ClockConfig+0x1c8>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	4a52      	ldr	r2, [pc, #328]	; (8005474 <HAL_RCC_ClockConfig+0x1c8>)
 800532a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800532e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005330:	4b50      	ldr	r3, [pc, #320]	; (8005474 <HAL_RCC_ClockConfig+0x1c8>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	494d      	ldr	r1, [pc, #308]	; (8005474 <HAL_RCC_ClockConfig+0x1c8>)
 800533e:	4313      	orrs	r3, r2
 8005340:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d040      	beq.n	80053d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d107      	bne.n	8005366 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005356:	4b47      	ldr	r3, [pc, #284]	; (8005474 <HAL_RCC_ClockConfig+0x1c8>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d115      	bne.n	800538e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e07f      	b.n	8005466 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	2b02      	cmp	r3, #2
 800536c:	d107      	bne.n	800537e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800536e:	4b41      	ldr	r3, [pc, #260]	; (8005474 <HAL_RCC_ClockConfig+0x1c8>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d109      	bne.n	800538e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e073      	b.n	8005466 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800537e:	4b3d      	ldr	r3, [pc, #244]	; (8005474 <HAL_RCC_ClockConfig+0x1c8>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e06b      	b.n	8005466 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800538e:	4b39      	ldr	r3, [pc, #228]	; (8005474 <HAL_RCC_ClockConfig+0x1c8>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f023 0203 	bic.w	r2, r3, #3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	4936      	ldr	r1, [pc, #216]	; (8005474 <HAL_RCC_ClockConfig+0x1c8>)
 800539c:	4313      	orrs	r3, r2
 800539e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053a0:	f7fe fc28 	bl	8003bf4 <HAL_GetTick>
 80053a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053a6:	e00a      	b.n	80053be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053a8:	f7fe fc24 	bl	8003bf4 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e053      	b.n	8005466 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053be:	4b2d      	ldr	r3, [pc, #180]	; (8005474 <HAL_RCC_ClockConfig+0x1c8>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 020c 	and.w	r2, r3, #12
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d1eb      	bne.n	80053a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053d0:	4b27      	ldr	r3, [pc, #156]	; (8005470 <HAL_RCC_ClockConfig+0x1c4>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 030f 	and.w	r3, r3, #15
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d210      	bcs.n	8005400 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053de:	4b24      	ldr	r3, [pc, #144]	; (8005470 <HAL_RCC_ClockConfig+0x1c4>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f023 020f 	bic.w	r2, r3, #15
 80053e6:	4922      	ldr	r1, [pc, #136]	; (8005470 <HAL_RCC_ClockConfig+0x1c4>)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ee:	4b20      	ldr	r3, [pc, #128]	; (8005470 <HAL_RCC_ClockConfig+0x1c4>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d001      	beq.n	8005400 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e032      	b.n	8005466 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0304 	and.w	r3, r3, #4
 8005408:	2b00      	cmp	r3, #0
 800540a:	d008      	beq.n	800541e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800540c:	4b19      	ldr	r3, [pc, #100]	; (8005474 <HAL_RCC_ClockConfig+0x1c8>)
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	4916      	ldr	r1, [pc, #88]	; (8005474 <HAL_RCC_ClockConfig+0x1c8>)
 800541a:	4313      	orrs	r3, r2
 800541c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0308 	and.w	r3, r3, #8
 8005426:	2b00      	cmp	r3, #0
 8005428:	d009      	beq.n	800543e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800542a:	4b12      	ldr	r3, [pc, #72]	; (8005474 <HAL_RCC_ClockConfig+0x1c8>)
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	00db      	lsls	r3, r3, #3
 8005438:	490e      	ldr	r1, [pc, #56]	; (8005474 <HAL_RCC_ClockConfig+0x1c8>)
 800543a:	4313      	orrs	r3, r2
 800543c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800543e:	f000 f821 	bl	8005484 <HAL_RCC_GetSysClockFreq>
 8005442:	4602      	mov	r2, r0
 8005444:	4b0b      	ldr	r3, [pc, #44]	; (8005474 <HAL_RCC_ClockConfig+0x1c8>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	091b      	lsrs	r3, r3, #4
 800544a:	f003 030f 	and.w	r3, r3, #15
 800544e:	490a      	ldr	r1, [pc, #40]	; (8005478 <HAL_RCC_ClockConfig+0x1cc>)
 8005450:	5ccb      	ldrb	r3, [r1, r3]
 8005452:	fa22 f303 	lsr.w	r3, r2, r3
 8005456:	4a09      	ldr	r2, [pc, #36]	; (800547c <HAL_RCC_ClockConfig+0x1d0>)
 8005458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800545a:	4b09      	ldr	r3, [pc, #36]	; (8005480 <HAL_RCC_ClockConfig+0x1d4>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4618      	mov	r0, r3
 8005460:	f7fd fbba 	bl	8002bd8 <HAL_InitTick>

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	40023c00 	.word	0x40023c00
 8005474:	40023800 	.word	0x40023800
 8005478:	0801d7b8 	.word	0x0801d7b8
 800547c:	20000004 	.word	0x20000004
 8005480:	20000008 	.word	0x20000008

08005484 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005488:	b094      	sub	sp, #80	; 0x50
 800548a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800548c:	2300      	movs	r3, #0
 800548e:	647b      	str	r3, [r7, #68]	; 0x44
 8005490:	2300      	movs	r3, #0
 8005492:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005494:	2300      	movs	r3, #0
 8005496:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005498:	2300      	movs	r3, #0
 800549a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800549c:	4b79      	ldr	r3, [pc, #484]	; (8005684 <HAL_RCC_GetSysClockFreq+0x200>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f003 030c 	and.w	r3, r3, #12
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d00d      	beq.n	80054c4 <HAL_RCC_GetSysClockFreq+0x40>
 80054a8:	2b08      	cmp	r3, #8
 80054aa:	f200 80e1 	bhi.w	8005670 <HAL_RCC_GetSysClockFreq+0x1ec>
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d002      	beq.n	80054b8 <HAL_RCC_GetSysClockFreq+0x34>
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d003      	beq.n	80054be <HAL_RCC_GetSysClockFreq+0x3a>
 80054b6:	e0db      	b.n	8005670 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054b8:	4b73      	ldr	r3, [pc, #460]	; (8005688 <HAL_RCC_GetSysClockFreq+0x204>)
 80054ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054bc:	e0db      	b.n	8005676 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054be:	4b73      	ldr	r3, [pc, #460]	; (800568c <HAL_RCC_GetSysClockFreq+0x208>)
 80054c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054c2:	e0d8      	b.n	8005676 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054c4:	4b6f      	ldr	r3, [pc, #444]	; (8005684 <HAL_RCC_GetSysClockFreq+0x200>)
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054cc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80054ce:	4b6d      	ldr	r3, [pc, #436]	; (8005684 <HAL_RCC_GetSysClockFreq+0x200>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d063      	beq.n	80055a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054da:	4b6a      	ldr	r3, [pc, #424]	; (8005684 <HAL_RCC_GetSysClockFreq+0x200>)
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	099b      	lsrs	r3, r3, #6
 80054e0:	2200      	movs	r2, #0
 80054e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80054e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80054e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ec:	633b      	str	r3, [r7, #48]	; 0x30
 80054ee:	2300      	movs	r3, #0
 80054f0:	637b      	str	r3, [r7, #52]	; 0x34
 80054f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80054f6:	4622      	mov	r2, r4
 80054f8:	462b      	mov	r3, r5
 80054fa:	f04f 0000 	mov.w	r0, #0
 80054fe:	f04f 0100 	mov.w	r1, #0
 8005502:	0159      	lsls	r1, r3, #5
 8005504:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005508:	0150      	lsls	r0, r2, #5
 800550a:	4602      	mov	r2, r0
 800550c:	460b      	mov	r3, r1
 800550e:	4621      	mov	r1, r4
 8005510:	1a51      	subs	r1, r2, r1
 8005512:	6139      	str	r1, [r7, #16]
 8005514:	4629      	mov	r1, r5
 8005516:	eb63 0301 	sbc.w	r3, r3, r1
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	f04f 0200 	mov.w	r2, #0
 8005520:	f04f 0300 	mov.w	r3, #0
 8005524:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005528:	4659      	mov	r1, fp
 800552a:	018b      	lsls	r3, r1, #6
 800552c:	4651      	mov	r1, sl
 800552e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005532:	4651      	mov	r1, sl
 8005534:	018a      	lsls	r2, r1, #6
 8005536:	4651      	mov	r1, sl
 8005538:	ebb2 0801 	subs.w	r8, r2, r1
 800553c:	4659      	mov	r1, fp
 800553e:	eb63 0901 	sbc.w	r9, r3, r1
 8005542:	f04f 0200 	mov.w	r2, #0
 8005546:	f04f 0300 	mov.w	r3, #0
 800554a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800554e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005552:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005556:	4690      	mov	r8, r2
 8005558:	4699      	mov	r9, r3
 800555a:	4623      	mov	r3, r4
 800555c:	eb18 0303 	adds.w	r3, r8, r3
 8005560:	60bb      	str	r3, [r7, #8]
 8005562:	462b      	mov	r3, r5
 8005564:	eb49 0303 	adc.w	r3, r9, r3
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	f04f 0200 	mov.w	r2, #0
 800556e:	f04f 0300 	mov.w	r3, #0
 8005572:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005576:	4629      	mov	r1, r5
 8005578:	024b      	lsls	r3, r1, #9
 800557a:	4621      	mov	r1, r4
 800557c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005580:	4621      	mov	r1, r4
 8005582:	024a      	lsls	r2, r1, #9
 8005584:	4610      	mov	r0, r2
 8005586:	4619      	mov	r1, r3
 8005588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800558a:	2200      	movs	r2, #0
 800558c:	62bb      	str	r3, [r7, #40]	; 0x28
 800558e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005590:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005594:	f7fa ff0c 	bl	80003b0 <__aeabi_uldivmod>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4613      	mov	r3, r2
 800559e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055a0:	e058      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055a2:	4b38      	ldr	r3, [pc, #224]	; (8005684 <HAL_RCC_GetSysClockFreq+0x200>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	099b      	lsrs	r3, r3, #6
 80055a8:	2200      	movs	r2, #0
 80055aa:	4618      	mov	r0, r3
 80055ac:	4611      	mov	r1, r2
 80055ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80055b2:	623b      	str	r3, [r7, #32]
 80055b4:	2300      	movs	r3, #0
 80055b6:	627b      	str	r3, [r7, #36]	; 0x24
 80055b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055bc:	4642      	mov	r2, r8
 80055be:	464b      	mov	r3, r9
 80055c0:	f04f 0000 	mov.w	r0, #0
 80055c4:	f04f 0100 	mov.w	r1, #0
 80055c8:	0159      	lsls	r1, r3, #5
 80055ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055ce:	0150      	lsls	r0, r2, #5
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	4641      	mov	r1, r8
 80055d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80055da:	4649      	mov	r1, r9
 80055dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80055e0:	f04f 0200 	mov.w	r2, #0
 80055e4:	f04f 0300 	mov.w	r3, #0
 80055e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055f4:	ebb2 040a 	subs.w	r4, r2, sl
 80055f8:	eb63 050b 	sbc.w	r5, r3, fp
 80055fc:	f04f 0200 	mov.w	r2, #0
 8005600:	f04f 0300 	mov.w	r3, #0
 8005604:	00eb      	lsls	r3, r5, #3
 8005606:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800560a:	00e2      	lsls	r2, r4, #3
 800560c:	4614      	mov	r4, r2
 800560e:	461d      	mov	r5, r3
 8005610:	4643      	mov	r3, r8
 8005612:	18e3      	adds	r3, r4, r3
 8005614:	603b      	str	r3, [r7, #0]
 8005616:	464b      	mov	r3, r9
 8005618:	eb45 0303 	adc.w	r3, r5, r3
 800561c:	607b      	str	r3, [r7, #4]
 800561e:	f04f 0200 	mov.w	r2, #0
 8005622:	f04f 0300 	mov.w	r3, #0
 8005626:	e9d7 4500 	ldrd	r4, r5, [r7]
 800562a:	4629      	mov	r1, r5
 800562c:	028b      	lsls	r3, r1, #10
 800562e:	4621      	mov	r1, r4
 8005630:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005634:	4621      	mov	r1, r4
 8005636:	028a      	lsls	r2, r1, #10
 8005638:	4610      	mov	r0, r2
 800563a:	4619      	mov	r1, r3
 800563c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800563e:	2200      	movs	r2, #0
 8005640:	61bb      	str	r3, [r7, #24]
 8005642:	61fa      	str	r2, [r7, #28]
 8005644:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005648:	f7fa feb2 	bl	80003b0 <__aeabi_uldivmod>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4613      	mov	r3, r2
 8005652:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005654:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <HAL_RCC_GetSysClockFreq+0x200>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	0c1b      	lsrs	r3, r3, #16
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	3301      	adds	r3, #1
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005664:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005668:	fbb2 f3f3 	udiv	r3, r2, r3
 800566c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800566e:	e002      	b.n	8005676 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005670:	4b05      	ldr	r3, [pc, #20]	; (8005688 <HAL_RCC_GetSysClockFreq+0x204>)
 8005672:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005674:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005678:	4618      	mov	r0, r3
 800567a:	3750      	adds	r7, #80	; 0x50
 800567c:	46bd      	mov	sp, r7
 800567e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005682:	bf00      	nop
 8005684:	40023800 	.word	0x40023800
 8005688:	00f42400 	.word	0x00f42400
 800568c:	007a1200 	.word	0x007a1200

08005690 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005694:	4b03      	ldr	r3, [pc, #12]	; (80056a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005696:	681b      	ldr	r3, [r3, #0]
}
 8005698:	4618      	mov	r0, r3
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	20000004 	.word	0x20000004

080056a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056ac:	f7ff fff0 	bl	8005690 <HAL_RCC_GetHCLKFreq>
 80056b0:	4602      	mov	r2, r0
 80056b2:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	0a9b      	lsrs	r3, r3, #10
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	4903      	ldr	r1, [pc, #12]	; (80056cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80056be:	5ccb      	ldrb	r3, [r1, r3]
 80056c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	40023800 	.word	0x40023800
 80056cc:	0801d7c8 	.word	0x0801d7c8

080056d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80056d4:	f7ff ffdc 	bl	8005690 <HAL_RCC_GetHCLKFreq>
 80056d8:	4602      	mov	r2, r0
 80056da:	4b05      	ldr	r3, [pc, #20]	; (80056f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	0b5b      	lsrs	r3, r3, #13
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	4903      	ldr	r1, [pc, #12]	; (80056f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056e6:	5ccb      	ldrb	r3, [r1, r3]
 80056e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40023800 	.word	0x40023800
 80056f4:	0801d7c8 	.word	0x0801d7c8

080056f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	220f      	movs	r2, #15
 8005706:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005708:	4b12      	ldr	r3, [pc, #72]	; (8005754 <HAL_RCC_GetClockConfig+0x5c>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f003 0203 	and.w	r2, r3, #3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005714:	4b0f      	ldr	r3, [pc, #60]	; (8005754 <HAL_RCC_GetClockConfig+0x5c>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005720:	4b0c      	ldr	r3, [pc, #48]	; (8005754 <HAL_RCC_GetClockConfig+0x5c>)
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800572c:	4b09      	ldr	r3, [pc, #36]	; (8005754 <HAL_RCC_GetClockConfig+0x5c>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	08db      	lsrs	r3, r3, #3
 8005732:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800573a:	4b07      	ldr	r3, [pc, #28]	; (8005758 <HAL_RCC_GetClockConfig+0x60>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 020f 	and.w	r2, r3, #15
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	601a      	str	r2, [r3, #0]
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	40023800 	.word	0x40023800
 8005758:	40023c00 	.word	0x40023c00

0800575c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b088      	sub	sp, #32
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005764:	2300      	movs	r3, #0
 8005766:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005768:	2300      	movs	r3, #0
 800576a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800576c:	2300      	movs	r3, #0
 800576e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005770:	2300      	movs	r3, #0
 8005772:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005774:	2300      	movs	r3, #0
 8005776:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d012      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005784:	4b69      	ldr	r3, [pc, #420]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	4a68      	ldr	r2, [pc, #416]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800578a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800578e:	6093      	str	r3, [r2, #8]
 8005790:	4b66      	ldr	r3, [pc, #408]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005798:	4964      	ldr	r1, [pc, #400]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800579a:	4313      	orrs	r3, r2
 800579c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80057a6:	2301      	movs	r3, #1
 80057a8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d017      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057b6:	4b5d      	ldr	r3, [pc, #372]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c4:	4959      	ldr	r1, [pc, #356]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057d4:	d101      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80057d6:	2301      	movs	r3, #1
 80057d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80057e2:	2301      	movs	r3, #1
 80057e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d017      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80057f2:	4b4e      	ldr	r3, [pc, #312]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005800:	494a      	ldr	r1, [pc, #296]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005802:	4313      	orrs	r3, r2
 8005804:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005810:	d101      	bne.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005812:	2301      	movs	r3, #1
 8005814:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	2b00      	cmp	r3, #0
 800581c:	d101      	bne.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800581e:	2301      	movs	r3, #1
 8005820:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800582e:	2301      	movs	r3, #1
 8005830:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0320 	and.w	r3, r3, #32
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 808b 	beq.w	8005956 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005840:	4b3a      	ldr	r3, [pc, #232]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005844:	4a39      	ldr	r2, [pc, #228]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800584a:	6413      	str	r3, [r2, #64]	; 0x40
 800584c:	4b37      	ldr	r3, [pc, #220]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800584e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005854:	60bb      	str	r3, [r7, #8]
 8005856:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005858:	4b35      	ldr	r3, [pc, #212]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a34      	ldr	r2, [pc, #208]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800585e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005862:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005864:	f7fe f9c6 	bl	8003bf4 <HAL_GetTick>
 8005868:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800586a:	e008      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800586c:	f7fe f9c2 	bl	8003bf4 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b64      	cmp	r3, #100	; 0x64
 8005878:	d901      	bls.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e38f      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800587e:	4b2c      	ldr	r3, [pc, #176]	; (8005930 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005886:	2b00      	cmp	r3, #0
 8005888:	d0f0      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800588a:	4b28      	ldr	r3, [pc, #160]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800588c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005892:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d035      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058a2:	693a      	ldr	r2, [r7, #16]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d02e      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058a8:	4b20      	ldr	r3, [pc, #128]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058b0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058b2:	4b1e      	ldr	r3, [pc, #120]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b6:	4a1d      	ldr	r2, [pc, #116]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058bc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058be:	4b1b      	ldr	r3, [pc, #108]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c2:	4a1a      	ldr	r2, [pc, #104]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80058ca:	4a18      	ldr	r2, [pc, #96]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80058d0:	4b16      	ldr	r3, [pc, #88]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d114      	bne.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058dc:	f7fe f98a 	bl	8003bf4 <HAL_GetTick>
 80058e0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058e2:	e00a      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058e4:	f7fe f986 	bl	8003bf4 <HAL_GetTick>
 80058e8:	4602      	mov	r2, r0
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d901      	bls.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e351      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058fa:	4b0c      	ldr	r3, [pc, #48]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d0ee      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800590e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005912:	d111      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005914:	4b05      	ldr	r3, [pc, #20]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005920:	4b04      	ldr	r3, [pc, #16]	; (8005934 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005922:	400b      	ands	r3, r1
 8005924:	4901      	ldr	r1, [pc, #4]	; (800592c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005926:	4313      	orrs	r3, r2
 8005928:	608b      	str	r3, [r1, #8]
 800592a:	e00b      	b.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800592c:	40023800 	.word	0x40023800
 8005930:	40007000 	.word	0x40007000
 8005934:	0ffffcff 	.word	0x0ffffcff
 8005938:	4bac      	ldr	r3, [pc, #688]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	4aab      	ldr	r2, [pc, #684]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800593e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005942:	6093      	str	r3, [r2, #8]
 8005944:	4ba9      	ldr	r3, [pc, #676]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005946:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005950:	49a6      	ldr	r1, [pc, #664]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005952:	4313      	orrs	r3, r2
 8005954:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0310 	and.w	r3, r3, #16
 800595e:	2b00      	cmp	r3, #0
 8005960:	d010      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005962:	4ba2      	ldr	r3, [pc, #648]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005964:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005968:	4aa0      	ldr	r2, [pc, #640]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800596a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800596e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005972:	4b9e      	ldr	r3, [pc, #632]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005974:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597c:	499b      	ldr	r1, [pc, #620]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800597e:	4313      	orrs	r3, r2
 8005980:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00a      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005990:	4b96      	ldr	r3, [pc, #600]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005996:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800599e:	4993      	ldr	r1, [pc, #588]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00a      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059b2:	4b8e      	ldr	r3, [pc, #568]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059c0:	498a      	ldr	r1, [pc, #552]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00a      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059d4:	4b85      	ldr	r3, [pc, #532]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059e2:	4982      	ldr	r1, [pc, #520]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00a      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059f6:	4b7d      	ldr	r3, [pc, #500]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a04:	4979      	ldr	r1, [pc, #484]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00a      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a18:	4b74      	ldr	r3, [pc, #464]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a1e:	f023 0203 	bic.w	r2, r3, #3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a26:	4971      	ldr	r1, [pc, #452]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00a      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a3a:	4b6c      	ldr	r3, [pc, #432]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a40:	f023 020c 	bic.w	r2, r3, #12
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a48:	4968      	ldr	r1, [pc, #416]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00a      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a5c:	4b63      	ldr	r3, [pc, #396]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a62:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a6a:	4960      	ldr	r1, [pc, #384]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a7e:	4b5b      	ldr	r3, [pc, #364]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a84:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a8c:	4957      	ldr	r1, [pc, #348]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00a      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005aa0:	4b52      	ldr	r3, [pc, #328]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aae:	494f      	ldr	r1, [pc, #316]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00a      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005ac2:	4b4a      	ldr	r3, [pc, #296]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad0:	4946      	ldr	r1, [pc, #280]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00a      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005ae4:	4b41      	ldr	r3, [pc, #260]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af2:	493e      	ldr	r1, [pc, #248]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00a      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005b06:	4b39      	ldr	r3, [pc, #228]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b14:	4935      	ldr	r1, [pc, #212]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00a      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b28:	4b30      	ldr	r3, [pc, #192]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b2e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b36:	492d      	ldr	r1, [pc, #180]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d011      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005b4a:	4b28      	ldr	r3, [pc, #160]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b50:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b58:	4924      	ldr	r1, [pc, #144]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b68:	d101      	bne.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0308 	and.w	r3, r3, #8
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00a      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b8a:	4b18      	ldr	r3, [pc, #96]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b90:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b98:	4914      	ldr	r1, [pc, #80]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00b      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005bac:	4b0f      	ldr	r3, [pc, #60]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bbc:	490b      	ldr	r1, [pc, #44]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00f      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005bd0:	4b06      	ldr	r3, [pc, #24]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005be0:	4902      	ldr	r1, [pc, #8]	; (8005bec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005be8:	e002      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005bea:	bf00      	nop
 8005bec:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00b      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bfc:	4b8a      	ldr	r3, [pc, #552]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c0c:	4986      	ldr	r1, [pc, #536]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d00b      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005c20:	4b81      	ldr	r3, [pc, #516]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c26:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c30:	497d      	ldr	r1, [pc, #500]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d006      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f000 80d6 	beq.w	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c4c:	4b76      	ldr	r3, [pc, #472]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a75      	ldr	r2, [pc, #468]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c58:	f7fd ffcc 	bl	8003bf4 <HAL_GetTick>
 8005c5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c5e:	e008      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c60:	f7fd ffc8 	bl	8003bf4 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	2b64      	cmp	r3, #100	; 0x64
 8005c6c:	d901      	bls.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e195      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c72:	4b6d      	ldr	r3, [pc, #436]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1f0      	bne.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d021      	beq.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d11d      	bne.n	8005cce <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005c92:	4b65      	ldr	r3, [pc, #404]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c98:	0c1b      	lsrs	r3, r3, #16
 8005c9a:	f003 0303 	and.w	r3, r3, #3
 8005c9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005ca0:	4b61      	ldr	r3, [pc, #388]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ca6:	0e1b      	lsrs	r3, r3, #24
 8005ca8:	f003 030f 	and.w	r3, r3, #15
 8005cac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	019a      	lsls	r2, r3, #6
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	041b      	lsls	r3, r3, #16
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	061b      	lsls	r3, r3, #24
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	071b      	lsls	r3, r3, #28
 8005cc6:	4958      	ldr	r1, [pc, #352]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d004      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ce2:	d00a      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d02e      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cf8:	d129      	bne.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005cfa:	4b4b      	ldr	r3, [pc, #300]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d00:	0c1b      	lsrs	r3, r3, #16
 8005d02:	f003 0303 	and.w	r3, r3, #3
 8005d06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d08:	4b47      	ldr	r3, [pc, #284]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d0e:	0f1b      	lsrs	r3, r3, #28
 8005d10:	f003 0307 	and.w	r3, r3, #7
 8005d14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	019a      	lsls	r2, r3, #6
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	041b      	lsls	r3, r3, #16
 8005d20:	431a      	orrs	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	061b      	lsls	r3, r3, #24
 8005d28:	431a      	orrs	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	071b      	lsls	r3, r3, #28
 8005d2e:	493e      	ldr	r1, [pc, #248]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005d36:	4b3c      	ldr	r3, [pc, #240]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d3c:	f023 021f 	bic.w	r2, r3, #31
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	3b01      	subs	r3, #1
 8005d46:	4938      	ldr	r1, [pc, #224]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d01d      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d5a:	4b33      	ldr	r3, [pc, #204]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d60:	0e1b      	lsrs	r3, r3, #24
 8005d62:	f003 030f 	and.w	r3, r3, #15
 8005d66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d68:	4b2f      	ldr	r3, [pc, #188]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d6e:	0f1b      	lsrs	r3, r3, #28
 8005d70:	f003 0307 	and.w	r3, r3, #7
 8005d74:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	019a      	lsls	r2, r3, #6
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	041b      	lsls	r3, r3, #16
 8005d82:	431a      	orrs	r2, r3
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	061b      	lsls	r3, r3, #24
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	071b      	lsls	r3, r3, #28
 8005d8e:	4926      	ldr	r1, [pc, #152]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d011      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	019a      	lsls	r2, r3, #6
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	041b      	lsls	r3, r3, #16
 8005dae:	431a      	orrs	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	061b      	lsls	r3, r3, #24
 8005db6:	431a      	orrs	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	071b      	lsls	r3, r3, #28
 8005dbe:	491a      	ldr	r1, [pc, #104]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005dc6:	4b18      	ldr	r3, [pc, #96]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a17      	ldr	r2, [pc, #92]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dcc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005dd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dd2:	f7fd ff0f 	bl	8003bf4 <HAL_GetTick>
 8005dd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dd8:	e008      	b.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005dda:	f7fd ff0b 	bl	8003bf4 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	2b64      	cmp	r3, #100	; 0x64
 8005de6:	d901      	bls.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e0d8      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dec:	4b0e      	ldr	r3, [pc, #56]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d0f0      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	f040 80ce 	bne.w	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005e00:	4b09      	ldr	r3, [pc, #36]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a08      	ldr	r2, [pc, #32]	; (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e0c:	f7fd fef2 	bl	8003bf4 <HAL_GetTick>
 8005e10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e12:	e00b      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e14:	f7fd feee 	bl	8003bf4 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b64      	cmp	r3, #100	; 0x64
 8005e20:	d904      	bls.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e0bb      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005e26:	bf00      	nop
 8005e28:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e2c:	4b5e      	ldr	r3, [pc, #376]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e38:	d0ec      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d009      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d02e      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d12a      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005e62:	4b51      	ldr	r3, [pc, #324]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e68:	0c1b      	lsrs	r3, r3, #16
 8005e6a:	f003 0303 	and.w	r3, r3, #3
 8005e6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e70:	4b4d      	ldr	r3, [pc, #308]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e76:	0f1b      	lsrs	r3, r3, #28
 8005e78:	f003 0307 	and.w	r3, r3, #7
 8005e7c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	019a      	lsls	r2, r3, #6
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	041b      	lsls	r3, r3, #16
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	061b      	lsls	r3, r3, #24
 8005e90:	431a      	orrs	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	071b      	lsls	r3, r3, #28
 8005e96:	4944      	ldr	r1, [pc, #272]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005e9e:	4b42      	ldr	r3, [pc, #264]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ea4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eac:	3b01      	subs	r3, #1
 8005eae:	021b      	lsls	r3, r3, #8
 8005eb0:	493d      	ldr	r1, [pc, #244]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d022      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ec8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ecc:	d11d      	bne.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ece:	4b36      	ldr	r3, [pc, #216]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed4:	0e1b      	lsrs	r3, r3, #24
 8005ed6:	f003 030f 	and.w	r3, r3, #15
 8005eda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005edc:	4b32      	ldr	r3, [pc, #200]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee2:	0f1b      	lsrs	r3, r3, #28
 8005ee4:	f003 0307 	and.w	r3, r3, #7
 8005ee8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	019a      	lsls	r2, r3, #6
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	041b      	lsls	r3, r3, #16
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	061b      	lsls	r3, r3, #24
 8005efc:	431a      	orrs	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	071b      	lsls	r3, r3, #28
 8005f02:	4929      	ldr	r1, [pc, #164]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0308 	and.w	r3, r3, #8
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d028      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f16:	4b24      	ldr	r3, [pc, #144]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1c:	0e1b      	lsrs	r3, r3, #24
 8005f1e:	f003 030f 	and.w	r3, r3, #15
 8005f22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f24:	4b20      	ldr	r3, [pc, #128]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f2a:	0c1b      	lsrs	r3, r3, #16
 8005f2c:	f003 0303 	and.w	r3, r3, #3
 8005f30:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	019a      	lsls	r2, r3, #6
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	041b      	lsls	r3, r3, #16
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	061b      	lsls	r3, r3, #24
 8005f42:	431a      	orrs	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	69db      	ldr	r3, [r3, #28]
 8005f48:	071b      	lsls	r3, r3, #28
 8005f4a:	4917      	ldr	r1, [pc, #92]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005f52:	4b15      	ldr	r3, [pc, #84]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f60:	4911      	ldr	r1, [pc, #68]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005f68:	4b0f      	ldr	r3, [pc, #60]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a0e      	ldr	r2, [pc, #56]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f74:	f7fd fe3e 	bl	8003bf4 <HAL_GetTick>
 8005f78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f7a:	e008      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005f7c:	f7fd fe3a 	bl	8003bf4 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	2b64      	cmp	r3, #100	; 0x64
 8005f88:	d901      	bls.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e007      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f8e:	4b06      	ldr	r3, [pc, #24]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f9a:	d1ef      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3720      	adds	r7, #32
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	40023800 	.word	0x40023800

08005fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e049      	b.n	8006052 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d106      	bne.n	8005fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f841 	bl	800605a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	4619      	mov	r1, r3
 8005fea:	4610      	mov	r0, r2
 8005fec:	f000 fc12 	bl	8006814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800605a:	b480      	push	{r7}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006062:	bf00      	nop
 8006064:	370c      	adds	r7, #12
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
	...

08006070 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b01      	cmp	r3, #1
 8006082:	d001      	beq.n	8006088 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006084:	2301      	movs	r3, #1
 8006086:	e054      	b.n	8006132 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0201 	orr.w	r2, r2, #1
 800609e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a26      	ldr	r2, [pc, #152]	; (8006140 <HAL_TIM_Base_Start_IT+0xd0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d022      	beq.n	80060f0 <HAL_TIM_Base_Start_IT+0x80>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060b2:	d01d      	beq.n	80060f0 <HAL_TIM_Base_Start_IT+0x80>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a22      	ldr	r2, [pc, #136]	; (8006144 <HAL_TIM_Base_Start_IT+0xd4>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d018      	beq.n	80060f0 <HAL_TIM_Base_Start_IT+0x80>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a21      	ldr	r2, [pc, #132]	; (8006148 <HAL_TIM_Base_Start_IT+0xd8>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d013      	beq.n	80060f0 <HAL_TIM_Base_Start_IT+0x80>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a1f      	ldr	r2, [pc, #124]	; (800614c <HAL_TIM_Base_Start_IT+0xdc>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d00e      	beq.n	80060f0 <HAL_TIM_Base_Start_IT+0x80>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a1e      	ldr	r2, [pc, #120]	; (8006150 <HAL_TIM_Base_Start_IT+0xe0>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d009      	beq.n	80060f0 <HAL_TIM_Base_Start_IT+0x80>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a1c      	ldr	r2, [pc, #112]	; (8006154 <HAL_TIM_Base_Start_IT+0xe4>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d004      	beq.n	80060f0 <HAL_TIM_Base_Start_IT+0x80>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a1b      	ldr	r2, [pc, #108]	; (8006158 <HAL_TIM_Base_Start_IT+0xe8>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d115      	bne.n	800611c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689a      	ldr	r2, [r3, #8]
 80060f6:	4b19      	ldr	r3, [pc, #100]	; (800615c <HAL_TIM_Base_Start_IT+0xec>)
 80060f8:	4013      	ands	r3, r2
 80060fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2b06      	cmp	r3, #6
 8006100:	d015      	beq.n	800612e <HAL_TIM_Base_Start_IT+0xbe>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006108:	d011      	beq.n	800612e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f042 0201 	orr.w	r2, r2, #1
 8006118:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800611a:	e008      	b.n	800612e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f042 0201 	orr.w	r2, r2, #1
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	e000      	b.n	8006130 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800612e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3714      	adds	r7, #20
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	40010000 	.word	0x40010000
 8006144:	40000400 	.word	0x40000400
 8006148:	40000800 	.word	0x40000800
 800614c:	40000c00 	.word	0x40000c00
 8006150:	40010400 	.word	0x40010400
 8006154:	40014000 	.word	0x40014000
 8006158:	40001800 	.word	0x40001800
 800615c:	00010007 	.word	0x00010007

08006160 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b082      	sub	sp, #8
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e049      	b.n	8006206 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d106      	bne.n	800618c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7fd f96a 	bl	8003460 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2202      	movs	r2, #2
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	3304      	adds	r3, #4
 800619c:	4619      	mov	r1, r3
 800619e:	4610      	mov	r0, r2
 80061a0:	f000 fb38 	bl	8006814 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e08f      	b.n	8006344 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b00      	cmp	r3, #0
 800622e:	d106      	bne.n	800623e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7fd f945 	bl	80034c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2202      	movs	r2, #2
 8006242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6899      	ldr	r1, [r3, #8]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	4b3e      	ldr	r3, [pc, #248]	; (800634c <HAL_TIM_Encoder_Init+0x13c>)
 8006252:	400b      	ands	r3, r1
 8006254:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	3304      	adds	r3, #4
 800625e:	4619      	mov	r1, r3
 8006260:	4610      	mov	r0, r2
 8006262:	f000 fad7 	bl	8006814 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	4313      	orrs	r3, r2
 8006286:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006288:	693a      	ldr	r2, [r7, #16]
 800628a:	4b31      	ldr	r3, [pc, #196]	; (8006350 <HAL_TIM_Encoder_Init+0x140>)
 800628c:	4013      	ands	r3, r2
 800628e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	689a      	ldr	r2, [r3, #8]
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	021b      	lsls	r3, r3, #8
 800629a:	4313      	orrs	r3, r2
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	4313      	orrs	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	4b2b      	ldr	r3, [pc, #172]	; (8006354 <HAL_TIM_Encoder_Init+0x144>)
 80062a6:	4013      	ands	r3, r2
 80062a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	4b2a      	ldr	r3, [pc, #168]	; (8006358 <HAL_TIM_Encoder_Init+0x148>)
 80062ae:	4013      	ands	r3, r2
 80062b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	68da      	ldr	r2, [r3, #12]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	021b      	lsls	r3, r3, #8
 80062bc:	4313      	orrs	r3, r2
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	011a      	lsls	r2, r3, #4
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	031b      	lsls	r3, r3, #12
 80062d0:	4313      	orrs	r3, r2
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80062de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80062e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685a      	ldr	r2, [r3, #4]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	011b      	lsls	r3, r3, #4
 80062f2:	4313      	orrs	r3, r2
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	697a      	ldr	r2, [r7, #20]
 8006300:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3718      	adds	r7, #24
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	fffebff8 	.word	0xfffebff8
 8006350:	fffffcfc 	.word	0xfffffcfc
 8006354:	fffff3f3 	.word	0xfffff3f3
 8006358:	ffff0f0f 	.word	0xffff0f0f

0800635c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	f003 0302 	and.w	r3, r3, #2
 800636e:	2b02      	cmp	r3, #2
 8006370:	d122      	bne.n	80063b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	f003 0302 	and.w	r3, r3, #2
 800637c:	2b02      	cmp	r3, #2
 800637e:	d11b      	bne.n	80063b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f06f 0202 	mvn.w	r2, #2
 8006388:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	f003 0303 	and.w	r3, r3, #3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 fa1a 	bl	80067d8 <HAL_TIM_IC_CaptureCallback>
 80063a4:	e005      	b.n	80063b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fa0c 	bl	80067c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 fa1d 	bl	80067ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f003 0304 	and.w	r3, r3, #4
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d122      	bne.n	800640c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b04      	cmp	r3, #4
 80063d2:	d11b      	bne.n	800640c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f06f 0204 	mvn.w	r2, #4
 80063dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2202      	movs	r2, #2
 80063e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d003      	beq.n	80063fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f9f0 	bl	80067d8 <HAL_TIM_IC_CaptureCallback>
 80063f8:	e005      	b.n	8006406 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f9e2 	bl	80067c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f9f3 	bl	80067ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f003 0308 	and.w	r3, r3, #8
 8006416:	2b08      	cmp	r3, #8
 8006418:	d122      	bne.n	8006460 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	f003 0308 	and.w	r3, r3, #8
 8006424:	2b08      	cmp	r3, #8
 8006426:	d11b      	bne.n	8006460 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f06f 0208 	mvn.w	r2, #8
 8006430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2204      	movs	r2, #4
 8006436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69db      	ldr	r3, [r3, #28]
 800643e:	f003 0303 	and.w	r3, r3, #3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f9c6 	bl	80067d8 <HAL_TIM_IC_CaptureCallback>
 800644c:	e005      	b.n	800645a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f9b8 	bl	80067c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 f9c9 	bl	80067ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	f003 0310 	and.w	r3, r3, #16
 800646a:	2b10      	cmp	r3, #16
 800646c:	d122      	bne.n	80064b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	f003 0310 	and.w	r3, r3, #16
 8006478:	2b10      	cmp	r3, #16
 800647a:	d11b      	bne.n	80064b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f06f 0210 	mvn.w	r2, #16
 8006484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2208      	movs	r2, #8
 800648a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f99c 	bl	80067d8 <HAL_TIM_IC_CaptureCallback>
 80064a0:	e005      	b.n	80064ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f98e 	bl	80067c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f99f 	bl	80067ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d10e      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d107      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f06f 0201 	mvn.w	r2, #1
 80064d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7fc f9d8 	bl	8002890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ea:	2b80      	cmp	r3, #128	; 0x80
 80064ec:	d10e      	bne.n	800650c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f8:	2b80      	cmp	r3, #128	; 0x80
 80064fa:	d107      	bne.n	800650c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fd98 	bl	800703c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800651a:	d10e      	bne.n	800653a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006526:	2b80      	cmp	r3, #128	; 0x80
 8006528:	d107      	bne.n	800653a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fd8b 	bl	8007050 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006544:	2b40      	cmp	r3, #64	; 0x40
 8006546:	d10e      	bne.n	8006566 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006552:	2b40      	cmp	r3, #64	; 0x40
 8006554:	d107      	bne.n	8006566 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800655e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 f94d 	bl	8006800 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	f003 0320 	and.w	r3, r3, #32
 8006570:	2b20      	cmp	r3, #32
 8006572:	d10e      	bne.n	8006592 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b20      	cmp	r3, #32
 8006580:	d107      	bne.n	8006592 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f06f 0220 	mvn.w	r2, #32
 800658a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fd4b 	bl	8007028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006592:	bf00      	nop
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d101      	bne.n	80065ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065b6:	2302      	movs	r3, #2
 80065b8:	e0ff      	b.n	80067ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2b14      	cmp	r3, #20
 80065c6:	f200 80f0 	bhi.w	80067aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80065ca:	a201      	add	r2, pc, #4	; (adr r2, 80065d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d0:	08006625 	.word	0x08006625
 80065d4:	080067ab 	.word	0x080067ab
 80065d8:	080067ab 	.word	0x080067ab
 80065dc:	080067ab 	.word	0x080067ab
 80065e0:	08006665 	.word	0x08006665
 80065e4:	080067ab 	.word	0x080067ab
 80065e8:	080067ab 	.word	0x080067ab
 80065ec:	080067ab 	.word	0x080067ab
 80065f0:	080066a7 	.word	0x080066a7
 80065f4:	080067ab 	.word	0x080067ab
 80065f8:	080067ab 	.word	0x080067ab
 80065fc:	080067ab 	.word	0x080067ab
 8006600:	080066e7 	.word	0x080066e7
 8006604:	080067ab 	.word	0x080067ab
 8006608:	080067ab 	.word	0x080067ab
 800660c:	080067ab 	.word	0x080067ab
 8006610:	08006729 	.word	0x08006729
 8006614:	080067ab 	.word	0x080067ab
 8006618:	080067ab 	.word	0x080067ab
 800661c:	080067ab 	.word	0x080067ab
 8006620:	08006769 	.word	0x08006769
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68b9      	ldr	r1, [r7, #8]
 800662a:	4618      	mov	r0, r3
 800662c:	f000 f992 	bl	8006954 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	699a      	ldr	r2, [r3, #24]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0208 	orr.w	r2, r2, #8
 800663e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	699a      	ldr	r2, [r3, #24]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f022 0204 	bic.w	r2, r2, #4
 800664e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6999      	ldr	r1, [r3, #24]
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	691a      	ldr	r2, [r3, #16]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	619a      	str	r2, [r3, #24]
      break;
 8006662:	e0a5      	b.n	80067b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68b9      	ldr	r1, [r7, #8]
 800666a:	4618      	mov	r0, r3
 800666c:	f000 f9e4 	bl	8006a38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	699a      	ldr	r2, [r3, #24]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800667e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	699a      	ldr	r2, [r3, #24]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800668e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	6999      	ldr	r1, [r3, #24]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	021a      	lsls	r2, r3, #8
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	619a      	str	r2, [r3, #24]
      break;
 80066a4:	e084      	b.n	80067b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68b9      	ldr	r1, [r7, #8]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 fa3b 	bl	8006b28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	69da      	ldr	r2, [r3, #28]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f042 0208 	orr.w	r2, r2, #8
 80066c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	69da      	ldr	r2, [r3, #28]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 0204 	bic.w	r2, r2, #4
 80066d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	69d9      	ldr	r1, [r3, #28]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	691a      	ldr	r2, [r3, #16]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	61da      	str	r2, [r3, #28]
      break;
 80066e4:	e064      	b.n	80067b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68b9      	ldr	r1, [r7, #8]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 fa91 	bl	8006c14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	69da      	ldr	r2, [r3, #28]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	69da      	ldr	r2, [r3, #28]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	69d9      	ldr	r1, [r3, #28]
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	021a      	lsls	r2, r3, #8
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	430a      	orrs	r2, r1
 8006724:	61da      	str	r2, [r3, #28]
      break;
 8006726:	e043      	b.n	80067b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68b9      	ldr	r1, [r7, #8]
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fac8 	bl	8006cc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f042 0208 	orr.w	r2, r2, #8
 8006742:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f022 0204 	bic.w	r2, r2, #4
 8006752:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	691a      	ldr	r2, [r3, #16]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	430a      	orrs	r2, r1
 8006764:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006766:	e023      	b.n	80067b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68b9      	ldr	r1, [r7, #8]
 800676e:	4618      	mov	r0, r3
 8006770:	f000 fafa 	bl	8006d68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006782:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006792:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	021a      	lsls	r2, r3, #8
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067a8:	e002      	b.n	80067b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	75fb      	strb	r3, [r7, #23]
      break;
 80067ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3718      	adds	r7, #24
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop

080067c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a40      	ldr	r2, [pc, #256]	; (8006928 <TIM_Base_SetConfig+0x114>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d013      	beq.n	8006854 <TIM_Base_SetConfig+0x40>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006832:	d00f      	beq.n	8006854 <TIM_Base_SetConfig+0x40>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a3d      	ldr	r2, [pc, #244]	; (800692c <TIM_Base_SetConfig+0x118>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d00b      	beq.n	8006854 <TIM_Base_SetConfig+0x40>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a3c      	ldr	r2, [pc, #240]	; (8006930 <TIM_Base_SetConfig+0x11c>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d007      	beq.n	8006854 <TIM_Base_SetConfig+0x40>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a3b      	ldr	r2, [pc, #236]	; (8006934 <TIM_Base_SetConfig+0x120>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d003      	beq.n	8006854 <TIM_Base_SetConfig+0x40>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a3a      	ldr	r2, [pc, #232]	; (8006938 <TIM_Base_SetConfig+0x124>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d108      	bne.n	8006866 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800685a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	4313      	orrs	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a2f      	ldr	r2, [pc, #188]	; (8006928 <TIM_Base_SetConfig+0x114>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d02b      	beq.n	80068c6 <TIM_Base_SetConfig+0xb2>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006874:	d027      	beq.n	80068c6 <TIM_Base_SetConfig+0xb2>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a2c      	ldr	r2, [pc, #176]	; (800692c <TIM_Base_SetConfig+0x118>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d023      	beq.n	80068c6 <TIM_Base_SetConfig+0xb2>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a2b      	ldr	r2, [pc, #172]	; (8006930 <TIM_Base_SetConfig+0x11c>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d01f      	beq.n	80068c6 <TIM_Base_SetConfig+0xb2>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a2a      	ldr	r2, [pc, #168]	; (8006934 <TIM_Base_SetConfig+0x120>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d01b      	beq.n	80068c6 <TIM_Base_SetConfig+0xb2>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a29      	ldr	r2, [pc, #164]	; (8006938 <TIM_Base_SetConfig+0x124>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d017      	beq.n	80068c6 <TIM_Base_SetConfig+0xb2>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a28      	ldr	r2, [pc, #160]	; (800693c <TIM_Base_SetConfig+0x128>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d013      	beq.n	80068c6 <TIM_Base_SetConfig+0xb2>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a27      	ldr	r2, [pc, #156]	; (8006940 <TIM_Base_SetConfig+0x12c>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d00f      	beq.n	80068c6 <TIM_Base_SetConfig+0xb2>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a26      	ldr	r2, [pc, #152]	; (8006944 <TIM_Base_SetConfig+0x130>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d00b      	beq.n	80068c6 <TIM_Base_SetConfig+0xb2>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a25      	ldr	r2, [pc, #148]	; (8006948 <TIM_Base_SetConfig+0x134>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d007      	beq.n	80068c6 <TIM_Base_SetConfig+0xb2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a24      	ldr	r2, [pc, #144]	; (800694c <TIM_Base_SetConfig+0x138>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d003      	beq.n	80068c6 <TIM_Base_SetConfig+0xb2>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a23      	ldr	r2, [pc, #140]	; (8006950 <TIM_Base_SetConfig+0x13c>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d108      	bne.n	80068d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	689a      	ldr	r2, [r3, #8]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a0a      	ldr	r2, [pc, #40]	; (8006928 <TIM_Base_SetConfig+0x114>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d003      	beq.n	800690c <TIM_Base_SetConfig+0xf8>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a0c      	ldr	r2, [pc, #48]	; (8006938 <TIM_Base_SetConfig+0x124>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d103      	bne.n	8006914 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	691a      	ldr	r2, [r3, #16]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	615a      	str	r2, [r3, #20]
}
 800691a:	bf00      	nop
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	40010000 	.word	0x40010000
 800692c:	40000400 	.word	0x40000400
 8006930:	40000800 	.word	0x40000800
 8006934:	40000c00 	.word	0x40000c00
 8006938:	40010400 	.word	0x40010400
 800693c:	40014000 	.word	0x40014000
 8006940:	40014400 	.word	0x40014400
 8006944:	40014800 	.word	0x40014800
 8006948:	40001800 	.word	0x40001800
 800694c:	40001c00 	.word	0x40001c00
 8006950:	40002000 	.word	0x40002000

08006954 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006954:	b480      	push	{r7}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	f023 0201 	bic.w	r2, r3, #1
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a1b      	ldr	r3, [r3, #32]
 800696e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	4b2b      	ldr	r3, [pc, #172]	; (8006a2c <TIM_OC1_SetConfig+0xd8>)
 8006980:	4013      	ands	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 0303 	bic.w	r3, r3, #3
 800698a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	4313      	orrs	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f023 0302 	bic.w	r3, r3, #2
 800699c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	4a21      	ldr	r2, [pc, #132]	; (8006a30 <TIM_OC1_SetConfig+0xdc>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d003      	beq.n	80069b8 <TIM_OC1_SetConfig+0x64>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a20      	ldr	r2, [pc, #128]	; (8006a34 <TIM_OC1_SetConfig+0xe0>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d10c      	bne.n	80069d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f023 0308 	bic.w	r3, r3, #8
 80069be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f023 0304 	bic.w	r3, r3, #4
 80069d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a16      	ldr	r2, [pc, #88]	; (8006a30 <TIM_OC1_SetConfig+0xdc>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d003      	beq.n	80069e2 <TIM_OC1_SetConfig+0x8e>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a15      	ldr	r2, [pc, #84]	; (8006a34 <TIM_OC1_SetConfig+0xe0>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d111      	bne.n	8006a06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	685a      	ldr	r2, [r3, #4]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	621a      	str	r2, [r3, #32]
}
 8006a20:	bf00      	nop
 8006a22:	371c      	adds	r7, #28
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	fffeff8f 	.word	0xfffeff8f
 8006a30:	40010000 	.word	0x40010000
 8006a34:	40010400 	.word	0x40010400

08006a38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	f023 0210 	bic.w	r2, r3, #16
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a60:	68fa      	ldr	r2, [r7, #12]
 8006a62:	4b2e      	ldr	r3, [pc, #184]	; (8006b1c <TIM_OC2_SetConfig+0xe4>)
 8006a64:	4013      	ands	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	021b      	lsls	r3, r3, #8
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	f023 0320 	bic.w	r3, r3, #32
 8006a82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	011b      	lsls	r3, r3, #4
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a23      	ldr	r2, [pc, #140]	; (8006b20 <TIM_OC2_SetConfig+0xe8>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d003      	beq.n	8006aa0 <TIM_OC2_SetConfig+0x68>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a22      	ldr	r2, [pc, #136]	; (8006b24 <TIM_OC2_SetConfig+0xec>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d10d      	bne.n	8006abc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	011b      	lsls	r3, r3, #4
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a18      	ldr	r2, [pc, #96]	; (8006b20 <TIM_OC2_SetConfig+0xe8>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d003      	beq.n	8006acc <TIM_OC2_SetConfig+0x94>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a17      	ldr	r2, [pc, #92]	; (8006b24 <TIM_OC2_SetConfig+0xec>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d113      	bne.n	8006af4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ad2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ada:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	695b      	ldr	r3, [r3, #20]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	693a      	ldr	r2, [r7, #16]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	699b      	ldr	r3, [r3, #24]
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	621a      	str	r2, [r3, #32]
}
 8006b0e:	bf00      	nop
 8006b10:	371c      	adds	r7, #28
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	feff8fff 	.word	0xfeff8fff
 8006b20:	40010000 	.word	0x40010000
 8006b24:	40010400 	.word	0x40010400

08006b28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b087      	sub	sp, #28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	4b2d      	ldr	r3, [pc, #180]	; (8006c08 <TIM_OC3_SetConfig+0xe0>)
 8006b54:	4013      	ands	r3, r2
 8006b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f023 0303 	bic.w	r3, r3, #3
 8006b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	021b      	lsls	r3, r3, #8
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a22      	ldr	r2, [pc, #136]	; (8006c0c <TIM_OC3_SetConfig+0xe4>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d003      	beq.n	8006b8e <TIM_OC3_SetConfig+0x66>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a21      	ldr	r2, [pc, #132]	; (8006c10 <TIM_OC3_SetConfig+0xe8>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d10d      	bne.n	8006baa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	021b      	lsls	r3, r3, #8
 8006b9c:	697a      	ldr	r2, [r7, #20]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a17      	ldr	r2, [pc, #92]	; (8006c0c <TIM_OC3_SetConfig+0xe4>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d003      	beq.n	8006bba <TIM_OC3_SetConfig+0x92>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a16      	ldr	r2, [pc, #88]	; (8006c10 <TIM_OC3_SetConfig+0xe8>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d113      	bne.n	8006be2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	011b      	lsls	r3, r3, #4
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	011b      	lsls	r3, r3, #4
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	621a      	str	r2, [r3, #32]
}
 8006bfc:	bf00      	nop
 8006bfe:	371c      	adds	r7, #28
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr
 8006c08:	fffeff8f 	.word	0xfffeff8f
 8006c0c:	40010000 	.word	0x40010000
 8006c10:	40010400 	.word	0x40010400

08006c14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b087      	sub	sp, #28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a1b      	ldr	r3, [r3, #32]
 8006c22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	4b1e      	ldr	r3, [pc, #120]	; (8006cb8 <TIM_OC4_SetConfig+0xa4>)
 8006c40:	4013      	ands	r3, r2
 8006c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	021b      	lsls	r3, r3, #8
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	031b      	lsls	r3, r3, #12
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a13      	ldr	r2, [pc, #76]	; (8006cbc <TIM_OC4_SetConfig+0xa8>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d003      	beq.n	8006c7c <TIM_OC4_SetConfig+0x68>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a12      	ldr	r2, [pc, #72]	; (8006cc0 <TIM_OC4_SetConfig+0xac>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d109      	bne.n	8006c90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	695b      	ldr	r3, [r3, #20]
 8006c88:	019b      	lsls	r3, r3, #6
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	621a      	str	r2, [r3, #32]
}
 8006caa:	bf00      	nop
 8006cac:	371c      	adds	r7, #28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	feff8fff 	.word	0xfeff8fff
 8006cbc:	40010000 	.word	0x40010000
 8006cc0:	40010400 	.word	0x40010400

08006cc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	4b1b      	ldr	r3, [pc, #108]	; (8006d5c <TIM_OC5_SetConfig+0x98>)
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	041b      	lsls	r3, r3, #16
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a12      	ldr	r2, [pc, #72]	; (8006d60 <TIM_OC5_SetConfig+0x9c>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d003      	beq.n	8006d22 <TIM_OC5_SetConfig+0x5e>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a11      	ldr	r2, [pc, #68]	; (8006d64 <TIM_OC5_SetConfig+0xa0>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d109      	bne.n	8006d36 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	695b      	ldr	r3, [r3, #20]
 8006d2e:	021b      	lsls	r3, r3, #8
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	621a      	str	r2, [r3, #32]
}
 8006d50:	bf00      	nop
 8006d52:	371c      	adds	r7, #28
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	fffeff8f 	.word	0xfffeff8f
 8006d60:	40010000 	.word	0x40010000
 8006d64:	40010400 	.word	0x40010400

08006d68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b087      	sub	sp, #28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	4b1c      	ldr	r3, [pc, #112]	; (8006e04 <TIM_OC6_SetConfig+0x9c>)
 8006d94:	4013      	ands	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	021b      	lsls	r3, r3, #8
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006daa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	051b      	lsls	r3, r3, #20
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a13      	ldr	r2, [pc, #76]	; (8006e08 <TIM_OC6_SetConfig+0xa0>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d003      	beq.n	8006dc8 <TIM_OC6_SetConfig+0x60>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a12      	ldr	r2, [pc, #72]	; (8006e0c <TIM_OC6_SetConfig+0xa4>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d109      	bne.n	8006ddc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	029b      	lsls	r3, r3, #10
 8006dd6:	697a      	ldr	r2, [r7, #20]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	621a      	str	r2, [r3, #32]
}
 8006df6:	bf00      	nop
 8006df8:	371c      	adds	r7, #28
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	feff8fff 	.word	0xfeff8fff
 8006e08:	40010000 	.word	0x40010000
 8006e0c:	40010400 	.word	0x40010400

08006e10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d101      	bne.n	8006e28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e24:	2302      	movs	r3, #2
 8006e26:	e06d      	b.n	8006f04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2202      	movs	r2, #2
 8006e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a30      	ldr	r2, [pc, #192]	; (8006f10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d004      	beq.n	8006e5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a2f      	ldr	r2, [pc, #188]	; (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d108      	bne.n	8006e6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a20      	ldr	r2, [pc, #128]	; (8006f10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d022      	beq.n	8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e9a:	d01d      	beq.n	8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a1d      	ldr	r2, [pc, #116]	; (8006f18 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d018      	beq.n	8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a1c      	ldr	r2, [pc, #112]	; (8006f1c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d013      	beq.n	8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a1a      	ldr	r2, [pc, #104]	; (8006f20 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d00e      	beq.n	8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a15      	ldr	r2, [pc, #84]	; (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d009      	beq.n	8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a16      	ldr	r2, [pc, #88]	; (8006f24 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d004      	beq.n	8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a15      	ldr	r2, [pc, #84]	; (8006f28 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d10c      	bne.n	8006ef2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ede:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	40010000 	.word	0x40010000
 8006f14:	40010400 	.word	0x40010400
 8006f18:	40000400 	.word	0x40000400
 8006f1c:	40000800 	.word	0x40000800
 8006f20:	40000c00 	.word	0x40000c00
 8006f24:	40014000 	.word	0x40014000
 8006f28:	40001800 	.word	0x40001800

08006f2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006f36:	2300      	movs	r3, #0
 8006f38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d101      	bne.n	8006f48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006f44:	2302      	movs	r3, #2
 8006f46:	e065      	b.n	8007014 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	041b      	lsls	r3, r3, #16
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a16      	ldr	r2, [pc, #88]	; (8007020 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d004      	beq.n	8006fd6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a14      	ldr	r2, [pc, #80]	; (8007024 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d115      	bne.n	8007002 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	051b      	lsls	r3, r3, #20
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	69db      	ldr	r3, [r3, #28]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr
 8007020:	40010000 	.word	0x40010000
 8007024:	40010400 	.word	0x40010400

08007028 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007028:	b480      	push	{r7}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e040      	b.n	80070f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800707a:	2b00      	cmp	r3, #0
 800707c:	d106      	bne.n	800708c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7fc fbea 	bl	8003860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2224      	movs	r2, #36	; 0x24
 8007090:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f022 0201 	bic.w	r2, r2, #1
 80070a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fcae 	bl	8007a04 <UART_SetConfig>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d101      	bne.n	80070b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e022      	b.n	80070f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d002      	beq.n	80070c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 ff06 	bl	8007ecc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	689a      	ldr	r2, [r3, #8]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f042 0201 	orr.w	r2, r2, #1
 80070ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 ff8d 	bl	8008010 <UART_CheckIdleState>
 80070f6:	4603      	mov	r3, r0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b08a      	sub	sp, #40	; 0x28
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	4613      	mov	r3, r2
 800710c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007112:	2b20      	cmp	r3, #32
 8007114:	d165      	bne.n	80071e2 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <HAL_UART_Transmit_DMA+0x22>
 800711c:	88fb      	ldrh	r3, [r7, #6]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d101      	bne.n	8007126 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e05e      	b.n	80071e4 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	88fa      	ldrh	r2, [r7, #6]
 8007130:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	88fa      	ldrh	r2, [r7, #6]
 8007138:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2221      	movs	r2, #33	; 0x21
 8007148:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800714e:	2b00      	cmp	r3, #0
 8007150:	d027      	beq.n	80071a2 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007156:	4a25      	ldr	r2, [pc, #148]	; (80071ec <HAL_UART_Transmit_DMA+0xec>)
 8007158:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800715e:	4a24      	ldr	r2, [pc, #144]	; (80071f0 <HAL_UART_Transmit_DMA+0xf0>)
 8007160:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007166:	4a23      	ldr	r2, [pc, #140]	; (80071f4 <HAL_UART_Transmit_DMA+0xf4>)
 8007168:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800716e:	2200      	movs	r2, #0
 8007170:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800717a:	4619      	mov	r1, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	3328      	adds	r3, #40	; 0x28
 8007182:	461a      	mov	r2, r3
 8007184:	88fb      	ldrh	r3, [r7, #6]
 8007186:	f7fc fef5 	bl	8003f74 <HAL_DMA_Start_IT>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d008      	beq.n	80071a2 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2210      	movs	r2, #16
 8007194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2220      	movs	r2, #32
 800719c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e020      	b.n	80071e4 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2240      	movs	r2, #64	; 0x40
 80071a8:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	3308      	adds	r3, #8
 80071b0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	e853 3f00 	ldrex	r3, [r3]
 80071b8:	613b      	str	r3, [r7, #16]
   return(result);
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c0:	627b      	str	r3, [r7, #36]	; 0x24
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	3308      	adds	r3, #8
 80071c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ca:	623a      	str	r2, [r7, #32]
 80071cc:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ce:	69f9      	ldr	r1, [r7, #28]
 80071d0:	6a3a      	ldr	r2, [r7, #32]
 80071d2:	e841 2300 	strex	r3, r2, [r1]
 80071d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1e5      	bne.n	80071aa <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80071de:	2300      	movs	r3, #0
 80071e0:	e000      	b.n	80071e4 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80071e2:	2302      	movs	r3, #2
  }
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3728      	adds	r7, #40	; 0x28
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	0800848d 	.word	0x0800848d
 80071f0:	08008523 	.word	0x08008523
 80071f4:	080086a5 	.word	0x080086a5

080071f8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b08a      	sub	sp, #40	; 0x28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	4613      	mov	r3, r2
 8007204:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800720c:	2b20      	cmp	r3, #32
 800720e:	d132      	bne.n	8007276 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d002      	beq.n	800721c <HAL_UART_Receive_DMA+0x24>
 8007216:	88fb      	ldrh	r3, [r7, #6]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e02b      	b.n	8007278 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d018      	beq.n	8007266 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	e853 3f00 	ldrex	r3, [r3]
 8007240:	613b      	str	r3, [r7, #16]
   return(result);
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007248:	627b      	str	r3, [r7, #36]	; 0x24
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	461a      	mov	r2, r3
 8007250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007252:	623b      	str	r3, [r7, #32]
 8007254:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007256:	69f9      	ldr	r1, [r7, #28]
 8007258:	6a3a      	ldr	r2, [r7, #32]
 800725a:	e841 2300 	strex	r3, r2, [r1]
 800725e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1e6      	bne.n	8007234 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007266:	88fb      	ldrh	r3, [r7, #6]
 8007268:	461a      	mov	r2, r3
 800726a:	68b9      	ldr	r1, [r7, #8]
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f000 ffe3 	bl	8008238 <UART_Start_Receive_DMA>
 8007272:	4603      	mov	r3, r0
 8007274:	e000      	b.n	8007278 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8007276:	2302      	movs	r3, #2
  }
}
 8007278:	4618      	mov	r0, r3
 800727a:	3728      	adds	r7, #40	; 0x28
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b090      	sub	sp, #64	; 0x40
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800728c:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007294:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a0:	2b80      	cmp	r3, #128	; 0x80
 80072a2:	d139      	bne.n	8007318 <HAL_UART_DMAStop+0x98>
 80072a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072a6:	2b21      	cmp	r3, #33	; 0x21
 80072a8:	d136      	bne.n	8007318 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3308      	adds	r3, #8
 80072b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b2:	6a3b      	ldr	r3, [r7, #32]
 80072b4:	e853 3f00 	ldrex	r3, [r3]
 80072b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072c0:	637b      	str	r3, [r7, #52]	; 0x34
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	3308      	adds	r3, #8
 80072c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072d2:	e841 2300 	strex	r3, r2, [r1]
 80072d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1e5      	bne.n	80072aa <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d015      	beq.n	8007312 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7fc fea2 	bl	8004034 <HAL_DMA_Abort>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00d      	beq.n	8007312 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fa:	4618      	mov	r0, r3
 80072fc:	f7fd f8b6 	bl	800446c <HAL_DMA_GetError>
 8007300:	4603      	mov	r3, r0
 8007302:	2b20      	cmp	r3, #32
 8007304:	d105      	bne.n	8007312 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2210      	movs	r2, #16
 800730a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e044      	b.n	800739c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f001 f830 	bl	8008378 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007322:	2b40      	cmp	r3, #64	; 0x40
 8007324:	d139      	bne.n	800739a <HAL_UART_DMAStop+0x11a>
 8007326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007328:	2b22      	cmp	r3, #34	; 0x22
 800732a:	d136      	bne.n	800739a <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	3308      	adds	r3, #8
 8007332:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	e853 3f00 	ldrex	r3, [r3]
 800733a:	60bb      	str	r3, [r7, #8]
   return(result);
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007342:	633b      	str	r3, [r7, #48]	; 0x30
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	3308      	adds	r3, #8
 800734a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800734c:	61ba      	str	r2, [r7, #24]
 800734e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007350:	6979      	ldr	r1, [r7, #20]
 8007352:	69ba      	ldr	r2, [r7, #24]
 8007354:	e841 2300 	strex	r3, r2, [r1]
 8007358:	613b      	str	r3, [r7, #16]
   return(result);
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1e5      	bne.n	800732c <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007364:	2b00      	cmp	r3, #0
 8007366:	d015      	beq.n	8007394 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800736c:	4618      	mov	r0, r3
 800736e:	f7fc fe61 	bl	8004034 <HAL_DMA_Abort>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00d      	beq.n	8007394 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800737c:	4618      	mov	r0, r3
 800737e:	f7fd f875 	bl	800446c <HAL_DMA_GetError>
 8007382:	4603      	mov	r3, r0
 8007384:	2b20      	cmp	r3, #32
 8007386:	d105      	bne.n	8007394 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2210      	movs	r2, #16
 800738c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007390:	2303      	movs	r3, #3
 8007392:	e003      	b.n	800739c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f001 f815 	bl	80083c4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3740      	adds	r7, #64	; 0x40
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b0ba      	sub	sp, #232	; 0xe8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	69db      	ldr	r3, [r3, #28]
 80073b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80073ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80073ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80073d2:	4013      	ands	r3, r2
 80073d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80073d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d115      	bne.n	800740c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80073e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e4:	f003 0320 	and.w	r3, r3, #32
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00f      	beq.n	800740c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80073ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073f0:	f003 0320 	and.w	r3, r3, #32
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d009      	beq.n	800740c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f000 82ac 	beq.w	800795a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	4798      	blx	r3
      }
      return;
 800740a:	e2a6      	b.n	800795a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800740c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 8117 	beq.w	8007644 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b00      	cmp	r3, #0
 8007420:	d106      	bne.n	8007430 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007422:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007426:	4b85      	ldr	r3, [pc, #532]	; (800763c <HAL_UART_IRQHandler+0x298>)
 8007428:	4013      	ands	r3, r2
 800742a:	2b00      	cmp	r3, #0
 800742c:	f000 810a 	beq.w	8007644 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007434:	f003 0301 	and.w	r3, r3, #1
 8007438:	2b00      	cmp	r3, #0
 800743a:	d011      	beq.n	8007460 <HAL_UART_IRQHandler+0xbc>
 800743c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00b      	beq.n	8007460 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2201      	movs	r2, #1
 800744e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007456:	f043 0201 	orr.w	r2, r3, #1
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007464:	f003 0302 	and.w	r3, r3, #2
 8007468:	2b00      	cmp	r3, #0
 800746a:	d011      	beq.n	8007490 <HAL_UART_IRQHandler+0xec>
 800746c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00b      	beq.n	8007490 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2202      	movs	r2, #2
 800747e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007486:	f043 0204 	orr.w	r2, r3, #4
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007494:	f003 0304 	and.w	r3, r3, #4
 8007498:	2b00      	cmp	r3, #0
 800749a:	d011      	beq.n	80074c0 <HAL_UART_IRQHandler+0x11c>
 800749c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074a0:	f003 0301 	and.w	r3, r3, #1
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00b      	beq.n	80074c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2204      	movs	r2, #4
 80074ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074b6:	f043 0202 	orr.w	r2, r3, #2
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80074c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c4:	f003 0308 	and.w	r3, r3, #8
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d017      	beq.n	80074fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80074cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074d0:	f003 0320 	and.w	r3, r3, #32
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d105      	bne.n	80074e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80074d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00b      	beq.n	80074fc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2208      	movs	r2, #8
 80074ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074f2:	f043 0208 	orr.w	r2, r3, #8
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80074fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007504:	2b00      	cmp	r3, #0
 8007506:	d012      	beq.n	800752e <HAL_UART_IRQHandler+0x18a>
 8007508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800750c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00c      	beq.n	800752e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800751c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007524:	f043 0220 	orr.w	r2, r3, #32
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 8212 	beq.w	800795e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800753a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800753e:	f003 0320 	and.w	r3, r3, #32
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00d      	beq.n	8007562 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800754a:	f003 0320 	and.w	r3, r3, #32
 800754e:	2b00      	cmp	r3, #0
 8007550:	d007      	beq.n	8007562 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007556:	2b00      	cmp	r3, #0
 8007558:	d003      	beq.n	8007562 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007568:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007576:	2b40      	cmp	r3, #64	; 0x40
 8007578:	d005      	beq.n	8007586 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800757a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800757e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007582:	2b00      	cmp	r3, #0
 8007584:	d04f      	beq.n	8007626 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 ff1c 	bl	80083c4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007596:	2b40      	cmp	r3, #64	; 0x40
 8007598:	d141      	bne.n	800761e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	3308      	adds	r3, #8
 80075a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075a8:	e853 3f00 	ldrex	r3, [r3]
 80075ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80075b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3308      	adds	r3, #8
 80075c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80075c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80075ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80075d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80075d6:	e841 2300 	strex	r3, r2, [r1]
 80075da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80075de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1d9      	bne.n	800759a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d013      	beq.n	8007616 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075f2:	4a13      	ldr	r2, [pc, #76]	; (8007640 <HAL_UART_IRQHandler+0x29c>)
 80075f4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fc fd8a 	bl	8004114 <HAL_DMA_Abort_IT>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d017      	beq.n	8007636 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800760a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800760c:	687a      	ldr	r2, [r7, #4]
 800760e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007610:	4610      	mov	r0, r2
 8007612:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007614:	e00f      	b.n	8007636 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f9d4 	bl	80079c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800761c:	e00b      	b.n	8007636 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f9d0 	bl	80079c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007624:	e007      	b.n	8007636 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f9cc 	bl	80079c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007634:	e193      	b.n	800795e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007636:	bf00      	nop
    return;
 8007638:	e191      	b.n	800795e <HAL_UART_IRQHandler+0x5ba>
 800763a:	bf00      	nop
 800763c:	04000120 	.word	0x04000120
 8007640:	08008723 	.word	0x08008723

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007648:	2b01      	cmp	r3, #1
 800764a:	f040 814c 	bne.w	80078e6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800764e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007652:	f003 0310 	and.w	r3, r3, #16
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 8145 	beq.w	80078e6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800765c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007660:	f003 0310 	and.w	r3, r3, #16
 8007664:	2b00      	cmp	r3, #0
 8007666:	f000 813e 	beq.w	80078e6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2210      	movs	r2, #16
 8007670:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767c:	2b40      	cmp	r3, #64	; 0x40
 800767e:	f040 80b6 	bne.w	80077ee <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800768e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007692:	2b00      	cmp	r3, #0
 8007694:	f000 8165 	beq.w	8007962 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800769e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076a2:	429a      	cmp	r2, r3
 80076a4:	f080 815d 	bcs.w	8007962 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076b6:	69db      	ldr	r3, [r3, #28]
 80076b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076bc:	f000 8086 	beq.w	80077cc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076cc:	e853 3f00 	ldrex	r3, [r3]
 80076d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80076d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	461a      	mov	r2, r3
 80076e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80076ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80076f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80076fa:	e841 2300 	strex	r3, r2, [r1]
 80076fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007702:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1da      	bne.n	80076c0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	3308      	adds	r3, #8
 8007710:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007712:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007714:	e853 3f00 	ldrex	r3, [r3]
 8007718:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800771a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800771c:	f023 0301 	bic.w	r3, r3, #1
 8007720:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3308      	adds	r3, #8
 800772a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800772e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007732:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007734:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007736:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800773a:	e841 2300 	strex	r3, r2, [r1]
 800773e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007742:	2b00      	cmp	r3, #0
 8007744:	d1e1      	bne.n	800770a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	3308      	adds	r3, #8
 800774c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007750:	e853 3f00 	ldrex	r3, [r3]
 8007754:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800775c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3308      	adds	r3, #8
 8007766:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800776a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800776c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007770:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007772:	e841 2300 	strex	r3, r2, [r1]
 8007776:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007778:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1e3      	bne.n	8007746 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2220      	movs	r2, #32
 8007782:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007794:	e853 3f00 	ldrex	r3, [r3]
 8007798:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800779a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800779c:	f023 0310 	bic.w	r3, r3, #16
 80077a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	461a      	mov	r2, r3
 80077aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80077b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077b6:	e841 2300 	strex	r3, r2, [r1]
 80077ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80077bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1e4      	bne.n	800778c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fc fc34 	bl	8004034 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077de:	b29b      	uxth	r3, r3
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	4619      	mov	r1, r3
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f8f6 	bl	80079d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077ec:	e0b9      	b.n	8007962 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007808:	b29b      	uxth	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 80ab 	beq.w	8007966 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8007810:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 80a6 	beq.w	8007966 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007822:	e853 3f00 	ldrex	r3, [r3]
 8007826:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800782a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800782e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	461a      	mov	r2, r3
 8007838:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800783c:	647b      	str	r3, [r7, #68]	; 0x44
 800783e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007840:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007842:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007844:	e841 2300 	strex	r3, r2, [r1]
 8007848:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800784a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1e4      	bne.n	800781a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	3308      	adds	r3, #8
 8007856:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785a:	e853 3f00 	ldrex	r3, [r3]
 800785e:	623b      	str	r3, [r7, #32]
   return(result);
 8007860:	6a3b      	ldr	r3, [r7, #32]
 8007862:	f023 0301 	bic.w	r3, r3, #1
 8007866:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	3308      	adds	r3, #8
 8007870:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007874:	633a      	str	r2, [r7, #48]	; 0x30
 8007876:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007878:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800787a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800787c:	e841 2300 	strex	r3, r2, [r1]
 8007880:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1e3      	bne.n	8007850 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2220      	movs	r2, #32
 800788c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	e853 3f00 	ldrex	r3, [r3]
 80078a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f023 0310 	bic.w	r3, r3, #16
 80078b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	461a      	mov	r2, r3
 80078ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80078be:	61fb      	str	r3, [r7, #28]
 80078c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c2:	69b9      	ldr	r1, [r7, #24]
 80078c4:	69fa      	ldr	r2, [r7, #28]
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	617b      	str	r3, [r7, #20]
   return(result);
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1e4      	bne.n	800789c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2202      	movs	r2, #2
 80078d6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f87a 	bl	80079d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078e4:	e03f      	b.n	8007966 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80078e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00e      	beq.n	8007910 <HAL_UART_IRQHandler+0x56c>
 80078f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d008      	beq.n	8007910 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007906:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f871 	bl	80079f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800790e:	e02d      	b.n	800796c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00e      	beq.n	800793a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800791c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007924:	2b00      	cmp	r3, #0
 8007926:	d008      	beq.n	800793a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800792c:	2b00      	cmp	r3, #0
 800792e:	d01c      	beq.n	800796a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	4798      	blx	r3
    }
    return;
 8007938:	e017      	b.n	800796a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800793a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800793e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007942:	2b00      	cmp	r3, #0
 8007944:	d012      	beq.n	800796c <HAL_UART_IRQHandler+0x5c8>
 8007946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800794a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00c      	beq.n	800796c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 fefb 	bl	800874e <UART_EndTransmit_IT>
    return;
 8007958:	e008      	b.n	800796c <HAL_UART_IRQHandler+0x5c8>
      return;
 800795a:	bf00      	nop
 800795c:	e006      	b.n	800796c <HAL_UART_IRQHandler+0x5c8>
    return;
 800795e:	bf00      	nop
 8007960:	e004      	b.n	800796c <HAL_UART_IRQHandler+0x5c8>
      return;
 8007962:	bf00      	nop
 8007964:	e002      	b.n	800796c <HAL_UART_IRQHandler+0x5c8>
      return;
 8007966:	bf00      	nop
 8007968:	e000      	b.n	800796c <HAL_UART_IRQHandler+0x5c8>
    return;
 800796a:	bf00      	nop
  }

}
 800796c:	37e8      	adds	r7, #232	; 0xe8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop

08007974 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	460b      	mov	r3, r1
 80079e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b088      	sub	sp, #32
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	689a      	ldr	r2, [r3, #8]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	431a      	orrs	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	431a      	orrs	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	69db      	ldr	r3, [r3, #28]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	4ba6      	ldr	r3, [pc, #664]	; (8007cc8 <UART_SetConfig+0x2c4>)
 8007a30:	4013      	ands	r3, r2
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	6812      	ldr	r2, [r2, #0]
 8007a36:	6979      	ldr	r1, [r7, #20]
 8007a38:	430b      	orrs	r3, r1
 8007a3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68da      	ldr	r2, [r3, #12]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	430a      	orrs	r2, r1
 8007a50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6a1b      	ldr	r3, [r3, #32]
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	697a      	ldr	r2, [r7, #20]
 8007a72:	430a      	orrs	r2, r1
 8007a74:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a94      	ldr	r2, [pc, #592]	; (8007ccc <UART_SetConfig+0x2c8>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d120      	bne.n	8007ac2 <UART_SetConfig+0xbe>
 8007a80:	4b93      	ldr	r3, [pc, #588]	; (8007cd0 <UART_SetConfig+0x2cc>)
 8007a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a86:	f003 0303 	and.w	r3, r3, #3
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	d816      	bhi.n	8007abc <UART_SetConfig+0xb8>
 8007a8e:	a201      	add	r2, pc, #4	; (adr r2, 8007a94 <UART_SetConfig+0x90>)
 8007a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a94:	08007aa5 	.word	0x08007aa5
 8007a98:	08007ab1 	.word	0x08007ab1
 8007a9c:	08007aab 	.word	0x08007aab
 8007aa0:	08007ab7 	.word	0x08007ab7
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	77fb      	strb	r3, [r7, #31]
 8007aa8:	e150      	b.n	8007d4c <UART_SetConfig+0x348>
 8007aaa:	2302      	movs	r3, #2
 8007aac:	77fb      	strb	r3, [r7, #31]
 8007aae:	e14d      	b.n	8007d4c <UART_SetConfig+0x348>
 8007ab0:	2304      	movs	r3, #4
 8007ab2:	77fb      	strb	r3, [r7, #31]
 8007ab4:	e14a      	b.n	8007d4c <UART_SetConfig+0x348>
 8007ab6:	2308      	movs	r3, #8
 8007ab8:	77fb      	strb	r3, [r7, #31]
 8007aba:	e147      	b.n	8007d4c <UART_SetConfig+0x348>
 8007abc:	2310      	movs	r3, #16
 8007abe:	77fb      	strb	r3, [r7, #31]
 8007ac0:	e144      	b.n	8007d4c <UART_SetConfig+0x348>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a83      	ldr	r2, [pc, #524]	; (8007cd4 <UART_SetConfig+0x2d0>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d132      	bne.n	8007b32 <UART_SetConfig+0x12e>
 8007acc:	4b80      	ldr	r3, [pc, #512]	; (8007cd0 <UART_SetConfig+0x2cc>)
 8007ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ad2:	f003 030c 	and.w	r3, r3, #12
 8007ad6:	2b0c      	cmp	r3, #12
 8007ad8:	d828      	bhi.n	8007b2c <UART_SetConfig+0x128>
 8007ada:	a201      	add	r2, pc, #4	; (adr r2, 8007ae0 <UART_SetConfig+0xdc>)
 8007adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae0:	08007b15 	.word	0x08007b15
 8007ae4:	08007b2d 	.word	0x08007b2d
 8007ae8:	08007b2d 	.word	0x08007b2d
 8007aec:	08007b2d 	.word	0x08007b2d
 8007af0:	08007b21 	.word	0x08007b21
 8007af4:	08007b2d 	.word	0x08007b2d
 8007af8:	08007b2d 	.word	0x08007b2d
 8007afc:	08007b2d 	.word	0x08007b2d
 8007b00:	08007b1b 	.word	0x08007b1b
 8007b04:	08007b2d 	.word	0x08007b2d
 8007b08:	08007b2d 	.word	0x08007b2d
 8007b0c:	08007b2d 	.word	0x08007b2d
 8007b10:	08007b27 	.word	0x08007b27
 8007b14:	2300      	movs	r3, #0
 8007b16:	77fb      	strb	r3, [r7, #31]
 8007b18:	e118      	b.n	8007d4c <UART_SetConfig+0x348>
 8007b1a:	2302      	movs	r3, #2
 8007b1c:	77fb      	strb	r3, [r7, #31]
 8007b1e:	e115      	b.n	8007d4c <UART_SetConfig+0x348>
 8007b20:	2304      	movs	r3, #4
 8007b22:	77fb      	strb	r3, [r7, #31]
 8007b24:	e112      	b.n	8007d4c <UART_SetConfig+0x348>
 8007b26:	2308      	movs	r3, #8
 8007b28:	77fb      	strb	r3, [r7, #31]
 8007b2a:	e10f      	b.n	8007d4c <UART_SetConfig+0x348>
 8007b2c:	2310      	movs	r3, #16
 8007b2e:	77fb      	strb	r3, [r7, #31]
 8007b30:	e10c      	b.n	8007d4c <UART_SetConfig+0x348>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a68      	ldr	r2, [pc, #416]	; (8007cd8 <UART_SetConfig+0x2d4>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d120      	bne.n	8007b7e <UART_SetConfig+0x17a>
 8007b3c:	4b64      	ldr	r3, [pc, #400]	; (8007cd0 <UART_SetConfig+0x2cc>)
 8007b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b42:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007b46:	2b30      	cmp	r3, #48	; 0x30
 8007b48:	d013      	beq.n	8007b72 <UART_SetConfig+0x16e>
 8007b4a:	2b30      	cmp	r3, #48	; 0x30
 8007b4c:	d814      	bhi.n	8007b78 <UART_SetConfig+0x174>
 8007b4e:	2b20      	cmp	r3, #32
 8007b50:	d009      	beq.n	8007b66 <UART_SetConfig+0x162>
 8007b52:	2b20      	cmp	r3, #32
 8007b54:	d810      	bhi.n	8007b78 <UART_SetConfig+0x174>
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d002      	beq.n	8007b60 <UART_SetConfig+0x15c>
 8007b5a:	2b10      	cmp	r3, #16
 8007b5c:	d006      	beq.n	8007b6c <UART_SetConfig+0x168>
 8007b5e:	e00b      	b.n	8007b78 <UART_SetConfig+0x174>
 8007b60:	2300      	movs	r3, #0
 8007b62:	77fb      	strb	r3, [r7, #31]
 8007b64:	e0f2      	b.n	8007d4c <UART_SetConfig+0x348>
 8007b66:	2302      	movs	r3, #2
 8007b68:	77fb      	strb	r3, [r7, #31]
 8007b6a:	e0ef      	b.n	8007d4c <UART_SetConfig+0x348>
 8007b6c:	2304      	movs	r3, #4
 8007b6e:	77fb      	strb	r3, [r7, #31]
 8007b70:	e0ec      	b.n	8007d4c <UART_SetConfig+0x348>
 8007b72:	2308      	movs	r3, #8
 8007b74:	77fb      	strb	r3, [r7, #31]
 8007b76:	e0e9      	b.n	8007d4c <UART_SetConfig+0x348>
 8007b78:	2310      	movs	r3, #16
 8007b7a:	77fb      	strb	r3, [r7, #31]
 8007b7c:	e0e6      	b.n	8007d4c <UART_SetConfig+0x348>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a56      	ldr	r2, [pc, #344]	; (8007cdc <UART_SetConfig+0x2d8>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d120      	bne.n	8007bca <UART_SetConfig+0x1c6>
 8007b88:	4b51      	ldr	r3, [pc, #324]	; (8007cd0 <UART_SetConfig+0x2cc>)
 8007b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007b92:	2bc0      	cmp	r3, #192	; 0xc0
 8007b94:	d013      	beq.n	8007bbe <UART_SetConfig+0x1ba>
 8007b96:	2bc0      	cmp	r3, #192	; 0xc0
 8007b98:	d814      	bhi.n	8007bc4 <UART_SetConfig+0x1c0>
 8007b9a:	2b80      	cmp	r3, #128	; 0x80
 8007b9c:	d009      	beq.n	8007bb2 <UART_SetConfig+0x1ae>
 8007b9e:	2b80      	cmp	r3, #128	; 0x80
 8007ba0:	d810      	bhi.n	8007bc4 <UART_SetConfig+0x1c0>
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d002      	beq.n	8007bac <UART_SetConfig+0x1a8>
 8007ba6:	2b40      	cmp	r3, #64	; 0x40
 8007ba8:	d006      	beq.n	8007bb8 <UART_SetConfig+0x1b4>
 8007baa:	e00b      	b.n	8007bc4 <UART_SetConfig+0x1c0>
 8007bac:	2300      	movs	r3, #0
 8007bae:	77fb      	strb	r3, [r7, #31]
 8007bb0:	e0cc      	b.n	8007d4c <UART_SetConfig+0x348>
 8007bb2:	2302      	movs	r3, #2
 8007bb4:	77fb      	strb	r3, [r7, #31]
 8007bb6:	e0c9      	b.n	8007d4c <UART_SetConfig+0x348>
 8007bb8:	2304      	movs	r3, #4
 8007bba:	77fb      	strb	r3, [r7, #31]
 8007bbc:	e0c6      	b.n	8007d4c <UART_SetConfig+0x348>
 8007bbe:	2308      	movs	r3, #8
 8007bc0:	77fb      	strb	r3, [r7, #31]
 8007bc2:	e0c3      	b.n	8007d4c <UART_SetConfig+0x348>
 8007bc4:	2310      	movs	r3, #16
 8007bc6:	77fb      	strb	r3, [r7, #31]
 8007bc8:	e0c0      	b.n	8007d4c <UART_SetConfig+0x348>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a44      	ldr	r2, [pc, #272]	; (8007ce0 <UART_SetConfig+0x2dc>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d125      	bne.n	8007c20 <UART_SetConfig+0x21c>
 8007bd4:	4b3e      	ldr	r3, [pc, #248]	; (8007cd0 <UART_SetConfig+0x2cc>)
 8007bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007be2:	d017      	beq.n	8007c14 <UART_SetConfig+0x210>
 8007be4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007be8:	d817      	bhi.n	8007c1a <UART_SetConfig+0x216>
 8007bea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bee:	d00b      	beq.n	8007c08 <UART_SetConfig+0x204>
 8007bf0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bf4:	d811      	bhi.n	8007c1a <UART_SetConfig+0x216>
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d003      	beq.n	8007c02 <UART_SetConfig+0x1fe>
 8007bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bfe:	d006      	beq.n	8007c0e <UART_SetConfig+0x20a>
 8007c00:	e00b      	b.n	8007c1a <UART_SetConfig+0x216>
 8007c02:	2300      	movs	r3, #0
 8007c04:	77fb      	strb	r3, [r7, #31]
 8007c06:	e0a1      	b.n	8007d4c <UART_SetConfig+0x348>
 8007c08:	2302      	movs	r3, #2
 8007c0a:	77fb      	strb	r3, [r7, #31]
 8007c0c:	e09e      	b.n	8007d4c <UART_SetConfig+0x348>
 8007c0e:	2304      	movs	r3, #4
 8007c10:	77fb      	strb	r3, [r7, #31]
 8007c12:	e09b      	b.n	8007d4c <UART_SetConfig+0x348>
 8007c14:	2308      	movs	r3, #8
 8007c16:	77fb      	strb	r3, [r7, #31]
 8007c18:	e098      	b.n	8007d4c <UART_SetConfig+0x348>
 8007c1a:	2310      	movs	r3, #16
 8007c1c:	77fb      	strb	r3, [r7, #31]
 8007c1e:	e095      	b.n	8007d4c <UART_SetConfig+0x348>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a2f      	ldr	r2, [pc, #188]	; (8007ce4 <UART_SetConfig+0x2e0>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d125      	bne.n	8007c76 <UART_SetConfig+0x272>
 8007c2a:	4b29      	ldr	r3, [pc, #164]	; (8007cd0 <UART_SetConfig+0x2cc>)
 8007c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c30:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007c34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c38:	d017      	beq.n	8007c6a <UART_SetConfig+0x266>
 8007c3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c3e:	d817      	bhi.n	8007c70 <UART_SetConfig+0x26c>
 8007c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c44:	d00b      	beq.n	8007c5e <UART_SetConfig+0x25a>
 8007c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c4a:	d811      	bhi.n	8007c70 <UART_SetConfig+0x26c>
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d003      	beq.n	8007c58 <UART_SetConfig+0x254>
 8007c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c54:	d006      	beq.n	8007c64 <UART_SetConfig+0x260>
 8007c56:	e00b      	b.n	8007c70 <UART_SetConfig+0x26c>
 8007c58:	2301      	movs	r3, #1
 8007c5a:	77fb      	strb	r3, [r7, #31]
 8007c5c:	e076      	b.n	8007d4c <UART_SetConfig+0x348>
 8007c5e:	2302      	movs	r3, #2
 8007c60:	77fb      	strb	r3, [r7, #31]
 8007c62:	e073      	b.n	8007d4c <UART_SetConfig+0x348>
 8007c64:	2304      	movs	r3, #4
 8007c66:	77fb      	strb	r3, [r7, #31]
 8007c68:	e070      	b.n	8007d4c <UART_SetConfig+0x348>
 8007c6a:	2308      	movs	r3, #8
 8007c6c:	77fb      	strb	r3, [r7, #31]
 8007c6e:	e06d      	b.n	8007d4c <UART_SetConfig+0x348>
 8007c70:	2310      	movs	r3, #16
 8007c72:	77fb      	strb	r3, [r7, #31]
 8007c74:	e06a      	b.n	8007d4c <UART_SetConfig+0x348>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a1b      	ldr	r2, [pc, #108]	; (8007ce8 <UART_SetConfig+0x2e4>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d138      	bne.n	8007cf2 <UART_SetConfig+0x2ee>
 8007c80:	4b13      	ldr	r3, [pc, #76]	; (8007cd0 <UART_SetConfig+0x2cc>)
 8007c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c86:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007c8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c8e:	d017      	beq.n	8007cc0 <UART_SetConfig+0x2bc>
 8007c90:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c94:	d82a      	bhi.n	8007cec <UART_SetConfig+0x2e8>
 8007c96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c9a:	d00b      	beq.n	8007cb4 <UART_SetConfig+0x2b0>
 8007c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ca0:	d824      	bhi.n	8007cec <UART_SetConfig+0x2e8>
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d003      	beq.n	8007cae <UART_SetConfig+0x2aa>
 8007ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007caa:	d006      	beq.n	8007cba <UART_SetConfig+0x2b6>
 8007cac:	e01e      	b.n	8007cec <UART_SetConfig+0x2e8>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	77fb      	strb	r3, [r7, #31]
 8007cb2:	e04b      	b.n	8007d4c <UART_SetConfig+0x348>
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	77fb      	strb	r3, [r7, #31]
 8007cb8:	e048      	b.n	8007d4c <UART_SetConfig+0x348>
 8007cba:	2304      	movs	r3, #4
 8007cbc:	77fb      	strb	r3, [r7, #31]
 8007cbe:	e045      	b.n	8007d4c <UART_SetConfig+0x348>
 8007cc0:	2308      	movs	r3, #8
 8007cc2:	77fb      	strb	r3, [r7, #31]
 8007cc4:	e042      	b.n	8007d4c <UART_SetConfig+0x348>
 8007cc6:	bf00      	nop
 8007cc8:	efff69f3 	.word	0xefff69f3
 8007ccc:	40011000 	.word	0x40011000
 8007cd0:	40023800 	.word	0x40023800
 8007cd4:	40004400 	.word	0x40004400
 8007cd8:	40004800 	.word	0x40004800
 8007cdc:	40004c00 	.word	0x40004c00
 8007ce0:	40005000 	.word	0x40005000
 8007ce4:	40011400 	.word	0x40011400
 8007ce8:	40007800 	.word	0x40007800
 8007cec:	2310      	movs	r3, #16
 8007cee:	77fb      	strb	r3, [r7, #31]
 8007cf0:	e02c      	b.n	8007d4c <UART_SetConfig+0x348>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a72      	ldr	r2, [pc, #456]	; (8007ec0 <UART_SetConfig+0x4bc>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d125      	bne.n	8007d48 <UART_SetConfig+0x344>
 8007cfc:	4b71      	ldr	r3, [pc, #452]	; (8007ec4 <UART_SetConfig+0x4c0>)
 8007cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007d06:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007d0a:	d017      	beq.n	8007d3c <UART_SetConfig+0x338>
 8007d0c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007d10:	d817      	bhi.n	8007d42 <UART_SetConfig+0x33e>
 8007d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d16:	d00b      	beq.n	8007d30 <UART_SetConfig+0x32c>
 8007d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d1c:	d811      	bhi.n	8007d42 <UART_SetConfig+0x33e>
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <UART_SetConfig+0x326>
 8007d22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d26:	d006      	beq.n	8007d36 <UART_SetConfig+0x332>
 8007d28:	e00b      	b.n	8007d42 <UART_SetConfig+0x33e>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	77fb      	strb	r3, [r7, #31]
 8007d2e:	e00d      	b.n	8007d4c <UART_SetConfig+0x348>
 8007d30:	2302      	movs	r3, #2
 8007d32:	77fb      	strb	r3, [r7, #31]
 8007d34:	e00a      	b.n	8007d4c <UART_SetConfig+0x348>
 8007d36:	2304      	movs	r3, #4
 8007d38:	77fb      	strb	r3, [r7, #31]
 8007d3a:	e007      	b.n	8007d4c <UART_SetConfig+0x348>
 8007d3c:	2308      	movs	r3, #8
 8007d3e:	77fb      	strb	r3, [r7, #31]
 8007d40:	e004      	b.n	8007d4c <UART_SetConfig+0x348>
 8007d42:	2310      	movs	r3, #16
 8007d44:	77fb      	strb	r3, [r7, #31]
 8007d46:	e001      	b.n	8007d4c <UART_SetConfig+0x348>
 8007d48:	2310      	movs	r3, #16
 8007d4a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	69db      	ldr	r3, [r3, #28]
 8007d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d54:	d15b      	bne.n	8007e0e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007d56:	7ffb      	ldrb	r3, [r7, #31]
 8007d58:	2b08      	cmp	r3, #8
 8007d5a:	d828      	bhi.n	8007dae <UART_SetConfig+0x3aa>
 8007d5c:	a201      	add	r2, pc, #4	; (adr r2, 8007d64 <UART_SetConfig+0x360>)
 8007d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d62:	bf00      	nop
 8007d64:	08007d89 	.word	0x08007d89
 8007d68:	08007d91 	.word	0x08007d91
 8007d6c:	08007d99 	.word	0x08007d99
 8007d70:	08007daf 	.word	0x08007daf
 8007d74:	08007d9f 	.word	0x08007d9f
 8007d78:	08007daf 	.word	0x08007daf
 8007d7c:	08007daf 	.word	0x08007daf
 8007d80:	08007daf 	.word	0x08007daf
 8007d84:	08007da7 	.word	0x08007da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d88:	f7fd fc8e 	bl	80056a8 <HAL_RCC_GetPCLK1Freq>
 8007d8c:	61b8      	str	r0, [r7, #24]
        break;
 8007d8e:	e013      	b.n	8007db8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d90:	f7fd fc9e 	bl	80056d0 <HAL_RCC_GetPCLK2Freq>
 8007d94:	61b8      	str	r0, [r7, #24]
        break;
 8007d96:	e00f      	b.n	8007db8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d98:	4b4b      	ldr	r3, [pc, #300]	; (8007ec8 <UART_SetConfig+0x4c4>)
 8007d9a:	61bb      	str	r3, [r7, #24]
        break;
 8007d9c:	e00c      	b.n	8007db8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d9e:	f7fd fb71 	bl	8005484 <HAL_RCC_GetSysClockFreq>
 8007da2:	61b8      	str	r0, [r7, #24]
        break;
 8007da4:	e008      	b.n	8007db8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007daa:	61bb      	str	r3, [r7, #24]
        break;
 8007dac:	e004      	b.n	8007db8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007dae:	2300      	movs	r3, #0
 8007db0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	77bb      	strb	r3, [r7, #30]
        break;
 8007db6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d074      	beq.n	8007ea8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	005a      	lsls	r2, r3, #1
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	085b      	lsrs	r3, r3, #1
 8007dc8:	441a      	add	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dd2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	2b0f      	cmp	r3, #15
 8007dd8:	d916      	bls.n	8007e08 <UART_SetConfig+0x404>
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007de0:	d212      	bcs.n	8007e08 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	f023 030f 	bic.w	r3, r3, #15
 8007dea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	085b      	lsrs	r3, r3, #1
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	f003 0307 	and.w	r3, r3, #7
 8007df6:	b29a      	uxth	r2, r3
 8007df8:	89fb      	ldrh	r3, [r7, #14]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	89fa      	ldrh	r2, [r7, #14]
 8007e04:	60da      	str	r2, [r3, #12]
 8007e06:	e04f      	b.n	8007ea8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	77bb      	strb	r3, [r7, #30]
 8007e0c:	e04c      	b.n	8007ea8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e0e:	7ffb      	ldrb	r3, [r7, #31]
 8007e10:	2b08      	cmp	r3, #8
 8007e12:	d828      	bhi.n	8007e66 <UART_SetConfig+0x462>
 8007e14:	a201      	add	r2, pc, #4	; (adr r2, 8007e1c <UART_SetConfig+0x418>)
 8007e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1a:	bf00      	nop
 8007e1c:	08007e41 	.word	0x08007e41
 8007e20:	08007e49 	.word	0x08007e49
 8007e24:	08007e51 	.word	0x08007e51
 8007e28:	08007e67 	.word	0x08007e67
 8007e2c:	08007e57 	.word	0x08007e57
 8007e30:	08007e67 	.word	0x08007e67
 8007e34:	08007e67 	.word	0x08007e67
 8007e38:	08007e67 	.word	0x08007e67
 8007e3c:	08007e5f 	.word	0x08007e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e40:	f7fd fc32 	bl	80056a8 <HAL_RCC_GetPCLK1Freq>
 8007e44:	61b8      	str	r0, [r7, #24]
        break;
 8007e46:	e013      	b.n	8007e70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e48:	f7fd fc42 	bl	80056d0 <HAL_RCC_GetPCLK2Freq>
 8007e4c:	61b8      	str	r0, [r7, #24]
        break;
 8007e4e:	e00f      	b.n	8007e70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e50:	4b1d      	ldr	r3, [pc, #116]	; (8007ec8 <UART_SetConfig+0x4c4>)
 8007e52:	61bb      	str	r3, [r7, #24]
        break;
 8007e54:	e00c      	b.n	8007e70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e56:	f7fd fb15 	bl	8005484 <HAL_RCC_GetSysClockFreq>
 8007e5a:	61b8      	str	r0, [r7, #24]
        break;
 8007e5c:	e008      	b.n	8007e70 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e62:	61bb      	str	r3, [r7, #24]
        break;
 8007e64:	e004      	b.n	8007e70 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007e66:	2300      	movs	r3, #0
 8007e68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	77bb      	strb	r3, [r7, #30]
        break;
 8007e6e:	bf00      	nop
    }

    if (pclk != 0U)
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d018      	beq.n	8007ea8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	085a      	lsrs	r2, r3, #1
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	441a      	add	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	2b0f      	cmp	r3, #15
 8007e8e:	d909      	bls.n	8007ea4 <UART_SetConfig+0x4a0>
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e96:	d205      	bcs.n	8007ea4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	60da      	str	r2, [r3, #12]
 8007ea2:	e001      	b.n	8007ea8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007eb4:	7fbb      	ldrb	r3, [r7, #30]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3720      	adds	r7, #32
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	40007c00 	.word	0x40007c00
 8007ec4:	40023800 	.word	0x40023800
 8007ec8:	00f42400 	.word	0x00f42400

08007ecc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed8:	f003 0301 	and.w	r3, r3, #1
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00a      	beq.n	8007ef6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efa:	f003 0302 	and.w	r3, r3, #2
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00a      	beq.n	8007f18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	430a      	orrs	r2, r1
 8007f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1c:	f003 0304 	and.w	r3, r3, #4
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00a      	beq.n	8007f3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	430a      	orrs	r2, r1
 8007f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f3e:	f003 0308 	and.w	r3, r3, #8
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00a      	beq.n	8007f5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	430a      	orrs	r2, r1
 8007f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f60:	f003 0310 	and.w	r3, r3, #16
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00a      	beq.n	8007f7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f82:	f003 0320 	and.w	r3, r3, #32
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00a      	beq.n	8007fa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	430a      	orrs	r2, r1
 8007f9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d01a      	beq.n	8007fe2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fca:	d10a      	bne.n	8007fe2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	430a      	orrs	r2, r1
 8007fe0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00a      	beq.n	8008004 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	430a      	orrs	r2, r1
 8008002:	605a      	str	r2, [r3, #4]
  }
}
 8008004:	bf00      	nop
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af02      	add	r7, sp, #8
 8008016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008020:	f7fb fde8 	bl	8003bf4 <HAL_GetTick>
 8008024:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0308 	and.w	r3, r3, #8
 8008030:	2b08      	cmp	r3, #8
 8008032:	d10e      	bne.n	8008052 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008034:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f831 	bl	80080aa <UART_WaitOnFlagUntilTimeout>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d001      	beq.n	8008052 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800804e:	2303      	movs	r3, #3
 8008050:	e027      	b.n	80080a2 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 0304 	and.w	r3, r3, #4
 800805c:	2b04      	cmp	r3, #4
 800805e:	d10e      	bne.n	800807e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008060:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008064:	9300      	str	r3, [sp, #0]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2200      	movs	r2, #0
 800806a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f81b 	bl	80080aa <UART_WaitOnFlagUntilTimeout>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d001      	beq.n	800807e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800807a:	2303      	movs	r3, #3
 800807c:	e011      	b.n	80080a2 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2220      	movs	r2, #32
 8008082:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2220      	movs	r2, #32
 8008088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b09c      	sub	sp, #112	; 0x70
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	60f8      	str	r0, [r7, #12]
 80080b2:	60b9      	str	r1, [r7, #8]
 80080b4:	603b      	str	r3, [r7, #0]
 80080b6:	4613      	mov	r3, r2
 80080b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080ba:	e0a7      	b.n	800820c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080c2:	f000 80a3 	beq.w	800820c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080c6:	f7fb fd95 	bl	8003bf4 <HAL_GetTick>
 80080ca:	4602      	mov	r2, r0
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	1ad3      	subs	r3, r2, r3
 80080d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d302      	bcc.n	80080dc <UART_WaitOnFlagUntilTimeout+0x32>
 80080d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d13f      	bne.n	800815c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080e4:	e853 3f00 	ldrex	r3, [r3]
 80080e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80080ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80080f0:	667b      	str	r3, [r7, #100]	; 0x64
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	461a      	mov	r2, r3
 80080f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080fc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008100:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008102:	e841 2300 	strex	r3, r2, [r1]
 8008106:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1e6      	bne.n	80080dc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	3308      	adds	r3, #8
 8008114:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008118:	e853 3f00 	ldrex	r3, [r3]
 800811c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800811e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008120:	f023 0301 	bic.w	r3, r3, #1
 8008124:	663b      	str	r3, [r7, #96]	; 0x60
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3308      	adds	r3, #8
 800812c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800812e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008130:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008132:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008134:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008136:	e841 2300 	strex	r3, r2, [r1]
 800813a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800813c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1e5      	bne.n	800810e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2220      	movs	r2, #32
 8008146:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2220      	movs	r2, #32
 800814c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008158:	2303      	movs	r3, #3
 800815a:	e068      	b.n	800822e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 0304 	and.w	r3, r3, #4
 8008166:	2b00      	cmp	r3, #0
 8008168:	d050      	beq.n	800820c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	69db      	ldr	r3, [r3, #28]
 8008170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008174:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008178:	d148      	bne.n	800820c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008182:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818c:	e853 3f00 	ldrex	r3, [r3]
 8008190:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008194:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008198:	66fb      	str	r3, [r7, #108]	; 0x6c
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	461a      	mov	r2, r3
 80081a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081a2:	637b      	str	r3, [r7, #52]	; 0x34
 80081a4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081aa:	e841 2300 	strex	r3, r2, [r1]
 80081ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80081b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1e6      	bne.n	8008184 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	3308      	adds	r3, #8
 80081bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	e853 3f00 	ldrex	r3, [r3]
 80081c4:	613b      	str	r3, [r7, #16]
   return(result);
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	f023 0301 	bic.w	r3, r3, #1
 80081cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	3308      	adds	r3, #8
 80081d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80081d6:	623a      	str	r2, [r7, #32]
 80081d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081da:	69f9      	ldr	r1, [r7, #28]
 80081dc:	6a3a      	ldr	r2, [r7, #32]
 80081de:	e841 2300 	strex	r3, r2, [r1]
 80081e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1e5      	bne.n	80081b6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2220      	movs	r2, #32
 80081ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2220      	movs	r2, #32
 80081f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2220      	movs	r2, #32
 80081fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008208:	2303      	movs	r3, #3
 800820a:	e010      	b.n	800822e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	69da      	ldr	r2, [r3, #28]
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	4013      	ands	r3, r2
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	429a      	cmp	r2, r3
 800821a:	bf0c      	ite	eq
 800821c:	2301      	moveq	r3, #1
 800821e:	2300      	movne	r3, #0
 8008220:	b2db      	uxtb	r3, r3
 8008222:	461a      	mov	r2, r3
 8008224:	79fb      	ldrb	r3, [r7, #7]
 8008226:	429a      	cmp	r2, r3
 8008228:	f43f af48 	beq.w	80080bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800822c:	2300      	movs	r3, #0
}
 800822e:	4618      	mov	r0, r3
 8008230:	3770      	adds	r7, #112	; 0x70
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
	...

08008238 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b096      	sub	sp, #88	; 0x58
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	4613      	mov	r3, r2
 8008244:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	88fa      	ldrh	r2, [r7, #6]
 8008250:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2222      	movs	r2, #34	; 0x22
 8008260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008268:	2b00      	cmp	r3, #0
 800826a:	d028      	beq.n	80082be <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008270:	4a3e      	ldr	r2, [pc, #248]	; (800836c <UART_Start_Receive_DMA+0x134>)
 8008272:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008278:	4a3d      	ldr	r2, [pc, #244]	; (8008370 <UART_Start_Receive_DMA+0x138>)
 800827a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008280:	4a3c      	ldr	r2, [pc, #240]	; (8008374 <UART_Start_Receive_DMA+0x13c>)
 8008282:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008288:	2200      	movs	r2, #0
 800828a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	3324      	adds	r3, #36	; 0x24
 8008296:	4619      	mov	r1, r3
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800829c:	461a      	mov	r2, r3
 800829e:	88fb      	ldrh	r3, [r7, #6]
 80082a0:	f7fb fe68 	bl	8003f74 <HAL_DMA_Start_IT>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d009      	beq.n	80082be <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2210      	movs	r2, #16
 80082ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2220      	movs	r2, #32
 80082b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	e051      	b.n	8008362 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d018      	beq.n	80082f8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ce:	e853 3f00 	ldrex	r3, [r3]
 80082d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082da:	657b      	str	r3, [r7, #84]	; 0x54
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	461a      	mov	r2, r3
 80082e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80082e6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082ec:	e841 2300 	strex	r3, r2, [r1]
 80082f0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80082f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d1e6      	bne.n	80082c6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	3308      	adds	r3, #8
 80082fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008302:	e853 3f00 	ldrex	r3, [r3]
 8008306:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830a:	f043 0301 	orr.w	r3, r3, #1
 800830e:	653b      	str	r3, [r7, #80]	; 0x50
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	3308      	adds	r3, #8
 8008316:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008318:	637a      	str	r2, [r7, #52]	; 0x34
 800831a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800831c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800831e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008320:	e841 2300 	strex	r3, r2, [r1]
 8008324:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1e5      	bne.n	80082f8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	3308      	adds	r3, #8
 8008332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	e853 3f00 	ldrex	r3, [r3]
 800833a:	613b      	str	r3, [r7, #16]
   return(result);
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	3308      	adds	r3, #8
 800834a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800834c:	623a      	str	r2, [r7, #32]
 800834e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008350:	69f9      	ldr	r1, [r7, #28]
 8008352:	6a3a      	ldr	r2, [r7, #32]
 8008354:	e841 2300 	strex	r3, r2, [r1]
 8008358:	61bb      	str	r3, [r7, #24]
   return(result);
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1e5      	bne.n	800832c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3758      	adds	r7, #88	; 0x58
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	0800853f 	.word	0x0800853f
 8008370:	08008667 	.word	0x08008667
 8008374:	080086a5 	.word	0x080086a5

08008378 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008378:	b480      	push	{r7}
 800837a:	b089      	sub	sp, #36	; 0x24
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	e853 3f00 	ldrex	r3, [r3]
 800838c:	60bb      	str	r3, [r7, #8]
   return(result);
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008394:	61fb      	str	r3, [r7, #28]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	461a      	mov	r2, r3
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	61bb      	str	r3, [r7, #24]
 80083a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a2:	6979      	ldr	r1, [r7, #20]
 80083a4:	69ba      	ldr	r2, [r7, #24]
 80083a6:	e841 2300 	strex	r3, r2, [r1]
 80083aa:	613b      	str	r3, [r7, #16]
   return(result);
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1e6      	bne.n	8008380 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2220      	movs	r2, #32
 80083b6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80083b8:	bf00      	nop
 80083ba:	3724      	adds	r7, #36	; 0x24
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b095      	sub	sp, #84	; 0x54
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d4:	e853 3f00 	ldrex	r3, [r3]
 80083d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80083da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	461a      	mov	r2, r3
 80083e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ea:	643b      	str	r3, [r7, #64]	; 0x40
 80083ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80083f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80083f2:	e841 2300 	strex	r3, r2, [r1]
 80083f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d1e6      	bne.n	80083cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	3308      	adds	r3, #8
 8008404:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008406:	6a3b      	ldr	r3, [r7, #32]
 8008408:	e853 3f00 	ldrex	r3, [r3]
 800840c:	61fb      	str	r3, [r7, #28]
   return(result);
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	f023 0301 	bic.w	r3, r3, #1
 8008414:	64bb      	str	r3, [r7, #72]	; 0x48
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3308      	adds	r3, #8
 800841c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800841e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008420:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008422:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008426:	e841 2300 	strex	r3, r2, [r1]
 800842a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800842c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1e5      	bne.n	80083fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008436:	2b01      	cmp	r3, #1
 8008438:	d118      	bne.n	800846c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	e853 3f00 	ldrex	r3, [r3]
 8008446:	60bb      	str	r3, [r7, #8]
   return(result);
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	f023 0310 	bic.w	r3, r3, #16
 800844e:	647b      	str	r3, [r7, #68]	; 0x44
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	461a      	mov	r2, r3
 8008456:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008458:	61bb      	str	r3, [r7, #24]
 800845a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800845c:	6979      	ldr	r1, [r7, #20]
 800845e:	69ba      	ldr	r2, [r7, #24]
 8008460:	e841 2300 	strex	r3, r2, [r1]
 8008464:	613b      	str	r3, [r7, #16]
   return(result);
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1e6      	bne.n	800843a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2220      	movs	r2, #32
 8008470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008480:	bf00      	nop
 8008482:	3754      	adds	r7, #84	; 0x54
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b090      	sub	sp, #64	; 0x40
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008498:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	69db      	ldr	r3, [r3, #28]
 800849e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084a2:	d037      	beq.n	8008514 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80084a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084a6:	2200      	movs	r2, #0
 80084a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80084ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	3308      	adds	r3, #8
 80084b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b6:	e853 3f00 	ldrex	r3, [r3]
 80084ba:	623b      	str	r3, [r7, #32]
   return(result);
 80084bc:	6a3b      	ldr	r3, [r7, #32]
 80084be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80084c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3308      	adds	r3, #8
 80084ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084cc:	633a      	str	r2, [r7, #48]	; 0x30
 80084ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084d4:	e841 2300 	strex	r3, r2, [r1]
 80084d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d1e5      	bne.n	80084ac <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	e853 3f00 	ldrex	r3, [r3]
 80084ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084f4:	637b      	str	r3, [r7, #52]	; 0x34
 80084f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	461a      	mov	r2, r3
 80084fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084fe:	61fb      	str	r3, [r7, #28]
 8008500:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008502:	69b9      	ldr	r1, [r7, #24]
 8008504:	69fa      	ldr	r2, [r7, #28]
 8008506:	e841 2300 	strex	r3, r2, [r1]
 800850a:	617b      	str	r3, [r7, #20]
   return(result);
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d1e6      	bne.n	80084e0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008512:	e002      	b.n	800851a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8008514:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008516:	f7ff fa2d 	bl	8007974 <HAL_UART_TxCpltCallback>
}
 800851a:	bf00      	nop
 800851c:	3740      	adds	r7, #64	; 0x40
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}

08008522 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008522:	b580      	push	{r7, lr}
 8008524:	b084      	sub	sp, #16
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f7ff fa29 	bl	8007988 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008536:	bf00      	nop
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}

0800853e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b09c      	sub	sp, #112	; 0x70
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	69db      	ldr	r3, [r3, #28]
 8008550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008554:	d071      	beq.n	800863a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8008556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008558:	2200      	movs	r2, #0
 800855a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800855e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008566:	e853 3f00 	ldrex	r3, [r3]
 800856a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800856c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800856e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008572:	66bb      	str	r3, [r7, #104]	; 0x68
 8008574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	461a      	mov	r2, r3
 800857a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800857c:	65bb      	str	r3, [r7, #88]	; 0x58
 800857e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008580:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008582:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008584:	e841 2300 	strex	r3, r2, [r1]
 8008588:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800858a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1e6      	bne.n	800855e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	3308      	adds	r3, #8
 8008596:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859a:	e853 3f00 	ldrex	r3, [r3]
 800859e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80085a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a2:	f023 0301 	bic.w	r3, r3, #1
 80085a6:	667b      	str	r3, [r7, #100]	; 0x64
 80085a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	3308      	adds	r3, #8
 80085ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80085b0:	647a      	str	r2, [r7, #68]	; 0x44
 80085b2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80085b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80085b8:	e841 2300 	strex	r3, r2, [r1]
 80085bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80085be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d1e5      	bne.n	8008590 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	3308      	adds	r3, #8
 80085ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ce:	e853 3f00 	ldrex	r3, [r3]
 80085d2:	623b      	str	r3, [r7, #32]
   return(result);
 80085d4:	6a3b      	ldr	r3, [r7, #32]
 80085d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085da:	663b      	str	r3, [r7, #96]	; 0x60
 80085dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	3308      	adds	r3, #8
 80085e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80085e4:	633a      	str	r2, [r7, #48]	; 0x30
 80085e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ec:	e841 2300 	strex	r3, r2, [r1]
 80085f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d1e5      	bne.n	80085c4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80085f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085fa:	2220      	movs	r2, #32
 80085fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008604:	2b01      	cmp	r3, #1
 8008606:	d118      	bne.n	800863a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	e853 3f00 	ldrex	r3, [r3]
 8008614:	60fb      	str	r3, [r7, #12]
   return(result);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f023 0310 	bic.w	r3, r3, #16
 800861c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800861e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	461a      	mov	r2, r3
 8008624:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008626:	61fb      	str	r3, [r7, #28]
 8008628:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862a:	69b9      	ldr	r1, [r7, #24]
 800862c:	69fa      	ldr	r2, [r7, #28]
 800862e:	e841 2300 	strex	r3, r2, [r1]
 8008632:	617b      	str	r3, [r7, #20]
   return(result);
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d1e6      	bne.n	8008608 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800863a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800863c:	2200      	movs	r2, #0
 800863e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008644:	2b01      	cmp	r3, #1
 8008646:	d107      	bne.n	8008658 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800864a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800864e:	4619      	mov	r1, r3
 8008650:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008652:	f7ff f9c1 	bl	80079d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008656:	e002      	b.n	800865e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8008658:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800865a:	f7ff f99f 	bl	800799c <HAL_UART_RxCpltCallback>
}
 800865e:	bf00      	nop
 8008660:	3770      	adds	r7, #112	; 0x70
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}

08008666 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b084      	sub	sp, #16
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008672:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2201      	movs	r2, #1
 8008678:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800867e:	2b01      	cmp	r3, #1
 8008680:	d109      	bne.n	8008696 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008688:	085b      	lsrs	r3, r3, #1
 800868a:	b29b      	uxth	r3, r3
 800868c:	4619      	mov	r1, r3
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f7ff f9a2 	bl	80079d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008694:	e002      	b.n	800869c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f7ff f98a 	bl	80079b0 <HAL_UART_RxHalfCpltCallback>
}
 800869c:	bf00      	nop
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b086      	sub	sp, #24
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086b6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086be:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086ca:	2b80      	cmp	r3, #128	; 0x80
 80086cc:	d109      	bne.n	80086e2 <UART_DMAError+0x3e>
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	2b21      	cmp	r3, #33	; 0x21
 80086d2:	d106      	bne.n	80086e2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80086dc:	6978      	ldr	r0, [r7, #20]
 80086de:	f7ff fe4b 	bl	8008378 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ec:	2b40      	cmp	r3, #64	; 0x40
 80086ee:	d109      	bne.n	8008704 <UART_DMAError+0x60>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2b22      	cmp	r3, #34	; 0x22
 80086f4:	d106      	bne.n	8008704 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80086fe:	6978      	ldr	r0, [r7, #20]
 8008700:	f7ff fe60 	bl	80083c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800870a:	f043 0210 	orr.w	r2, r3, #16
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008714:	6978      	ldr	r0, [r7, #20]
 8008716:	f7ff f955 	bl	80079c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800871a:	bf00      	nop
 800871c:	3718      	adds	r7, #24
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008722:	b580      	push	{r7, lr}
 8008724:	b084      	sub	sp, #16
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f7ff f93f 	bl	80079c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008746:	bf00      	nop
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b088      	sub	sp, #32
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	e853 3f00 	ldrex	r3, [r3]
 8008762:	60bb      	str	r3, [r7, #8]
   return(result);
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800876a:	61fb      	str	r3, [r7, #28]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	461a      	mov	r2, r3
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	61bb      	str	r3, [r7, #24]
 8008776:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008778:	6979      	ldr	r1, [r7, #20]
 800877a:	69ba      	ldr	r2, [r7, #24]
 800877c:	e841 2300 	strex	r3, r2, [r1]
 8008780:	613b      	str	r3, [r7, #16]
   return(result);
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d1e6      	bne.n	8008756 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2220      	movs	r2, #32
 800878c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f7ff f8ed 	bl	8007974 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800879a:	bf00      	nop
 800879c:	3720      	adds	r7, #32
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
	...

080087a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087a4:	b084      	sub	sp, #16
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b084      	sub	sp, #16
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
 80087ae:	f107 001c 	add.w	r0, r7, #28
 80087b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d120      	bne.n	80087fe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	68da      	ldr	r2, [r3, #12]
 80087cc:	4b20      	ldr	r3, [pc, #128]	; (8008850 <USB_CoreInit+0xac>)
 80087ce:	4013      	ands	r3, r2
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80087e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d105      	bne.n	80087f2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 fa96 	bl	8008d24 <USB_CoreReset>
 80087f8:	4603      	mov	r3, r0
 80087fa:	73fb      	strb	r3, [r7, #15]
 80087fc:	e010      	b.n	8008820 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 fa8a 	bl	8008d24 <USB_CoreReset>
 8008810:	4603      	mov	r3, r0
 8008812:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008818:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008822:	2b01      	cmp	r3, #1
 8008824:	d10b      	bne.n	800883e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	f043 0206 	orr.w	r2, r3, #6
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	f043 0220 	orr.w	r2, r3, #32
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800883e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800884a:	b004      	add	sp, #16
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop
 8008850:	ffbdffbf 	.word	0xffbdffbf

08008854 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	f023 0201 	bic.w	r2, r3, #1
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b084      	sub	sp, #16
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
 800887e:	460b      	mov	r3, r1
 8008880:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008882:	2300      	movs	r3, #0
 8008884:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008892:	78fb      	ldrb	r3, [r7, #3]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d115      	bne.n	80088c4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80088a4:	2001      	movs	r0, #1
 80088a6:	f7fb f9b1 	bl	8003c0c <HAL_Delay>
      ms++;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	3301      	adds	r3, #1
 80088ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f000 fa29 	bl	8008d08 <USB_GetMode>
 80088b6:	4603      	mov	r3, r0
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d01e      	beq.n	80088fa <USB_SetCurrentMode+0x84>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2b31      	cmp	r3, #49	; 0x31
 80088c0:	d9f0      	bls.n	80088a4 <USB_SetCurrentMode+0x2e>
 80088c2:	e01a      	b.n	80088fa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80088c4:	78fb      	ldrb	r3, [r7, #3]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d115      	bne.n	80088f6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80088d6:	2001      	movs	r0, #1
 80088d8:	f7fb f998 	bl	8003c0c <HAL_Delay>
      ms++;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	3301      	adds	r3, #1
 80088e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fa10 	bl	8008d08 <USB_GetMode>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d005      	beq.n	80088fa <USB_SetCurrentMode+0x84>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2b31      	cmp	r3, #49	; 0x31
 80088f2:	d9f0      	bls.n	80088d6 <USB_SetCurrentMode+0x60>
 80088f4:	e001      	b.n	80088fa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e005      	b.n	8008906 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2b32      	cmp	r3, #50	; 0x32
 80088fe:	d101      	bne.n	8008904 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	e000      	b.n	8008906 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3710      	adds	r7, #16
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
	...

08008910 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008910:	b084      	sub	sp, #16
 8008912:	b580      	push	{r7, lr}
 8008914:	b086      	sub	sp, #24
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
 800891a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800891e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800892a:	2300      	movs	r3, #0
 800892c:	613b      	str	r3, [r7, #16]
 800892e:	e009      	b.n	8008944 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	3340      	adds	r3, #64	; 0x40
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	4413      	add	r3, r2
 800893a:	2200      	movs	r2, #0
 800893c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	3301      	adds	r3, #1
 8008942:	613b      	str	r3, [r7, #16]
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	2b0e      	cmp	r3, #14
 8008948:	d9f2      	bls.n	8008930 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800894a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800894c:	2b00      	cmp	r3, #0
 800894e:	d11c      	bne.n	800898a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800895e:	f043 0302 	orr.w	r3, r3, #2
 8008962:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008968:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	601a      	str	r2, [r3, #0]
 8008988:	e005      	b.n	8008996 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800899c:	461a      	mov	r2, r3
 800899e:	2300      	movs	r3, #0
 80089a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089a8:	4619      	mov	r1, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089b0:	461a      	mov	r2, r3
 80089b2:	680b      	ldr	r3, [r1, #0]
 80089b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80089b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d10c      	bne.n	80089d6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80089bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d104      	bne.n	80089cc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80089c2:	2100      	movs	r1, #0
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f965 	bl	8008c94 <USB_SetDevSpeed>
 80089ca:	e008      	b.n	80089de <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80089cc:	2101      	movs	r1, #1
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 f960 	bl	8008c94 <USB_SetDevSpeed>
 80089d4:	e003      	b.n	80089de <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80089d6:	2103      	movs	r1, #3
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f95b 	bl	8008c94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80089de:	2110      	movs	r1, #16
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f8f3 	bl	8008bcc <USB_FlushTxFifo>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d001      	beq.n	80089f0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f91f 	bl	8008c34 <USB_FlushRxFifo>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d001      	beq.n	8008a00 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a06:	461a      	mov	r2, r3
 8008a08:	2300      	movs	r3, #0
 8008a0a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a12:	461a      	mov	r2, r3
 8008a14:	2300      	movs	r3, #0
 8008a16:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a1e:	461a      	mov	r2, r3
 8008a20:	2300      	movs	r3, #0
 8008a22:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a24:	2300      	movs	r3, #0
 8008a26:	613b      	str	r3, [r7, #16]
 8008a28:	e043      	b.n	8008ab2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	015a      	lsls	r2, r3, #5
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	4413      	add	r3, r2
 8008a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a40:	d118      	bne.n	8008a74 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d10a      	bne.n	8008a5e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	015a      	lsls	r2, r3, #5
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	4413      	add	r3, r2
 8008a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a54:	461a      	mov	r2, r3
 8008a56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a5a:	6013      	str	r3, [r2, #0]
 8008a5c:	e013      	b.n	8008a86 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	015a      	lsls	r2, r3, #5
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	4413      	add	r3, r2
 8008a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a70:	6013      	str	r3, [r2, #0]
 8008a72:	e008      	b.n	8008a86 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	015a      	lsls	r2, r3, #5
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a80:	461a      	mov	r2, r3
 8008a82:	2300      	movs	r3, #0
 8008a84:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	015a      	lsls	r2, r3, #5
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a92:	461a      	mov	r2, r3
 8008a94:	2300      	movs	r3, #0
 8008a96:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	015a      	lsls	r2, r3, #5
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008aaa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	613b      	str	r3, [r7, #16]
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab4:	693a      	ldr	r2, [r7, #16]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d3b7      	bcc.n	8008a2a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008aba:	2300      	movs	r3, #0
 8008abc:	613b      	str	r3, [r7, #16]
 8008abe:	e043      	b.n	8008b48 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	015a      	lsls	r2, r3, #5
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ad2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ad6:	d118      	bne.n	8008b0a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10a      	bne.n	8008af4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aea:	461a      	mov	r2, r3
 8008aec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008af0:	6013      	str	r3, [r2, #0]
 8008af2:	e013      	b.n	8008b1c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	015a      	lsls	r2, r3, #5
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	4413      	add	r3, r2
 8008afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b00:	461a      	mov	r2, r3
 8008b02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b06:	6013      	str	r3, [r2, #0]
 8008b08:	e008      	b.n	8008b1c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	015a      	lsls	r2, r3, #5
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	4413      	add	r3, r2
 8008b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b16:	461a      	mov	r2, r3
 8008b18:	2300      	movs	r3, #0
 8008b1a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	015a      	lsls	r2, r3, #5
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	4413      	add	r3, r2
 8008b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b28:	461a      	mov	r2, r3
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	015a      	lsls	r2, r3, #5
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	4413      	add	r3, r2
 8008b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	3301      	adds	r3, #1
 8008b46:	613b      	str	r3, [r7, #16]
 8008b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d3b7      	bcc.n	8008ac0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b62:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008b70:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d105      	bne.n	8008b84 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	f043 0210 	orr.w	r2, r3, #16
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	699a      	ldr	r2, [r3, #24]
 8008b88:	4b0e      	ldr	r3, [pc, #56]	; (8008bc4 <USB_DevInit+0x2b4>)
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d005      	beq.n	8008ba2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	f043 0208 	orr.w	r2, r3, #8
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d105      	bne.n	8008bb4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	699a      	ldr	r2, [r3, #24]
 8008bac:	4b06      	ldr	r3, [pc, #24]	; (8008bc8 <USB_DevInit+0x2b8>)
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3718      	adds	r7, #24
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008bc0:	b004      	add	sp, #16
 8008bc2:	4770      	bx	lr
 8008bc4:	803c3800 	.word	0x803c3800
 8008bc8:	40000004 	.word	0x40000004

08008bcc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b085      	sub	sp, #20
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	3301      	adds	r3, #1
 8008bde:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	4a13      	ldr	r2, [pc, #76]	; (8008c30 <USB_FlushTxFifo+0x64>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d901      	bls.n	8008bec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008be8:	2303      	movs	r3, #3
 8008bea:	e01b      	b.n	8008c24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	daf2      	bge.n	8008bda <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	019b      	lsls	r3, r3, #6
 8008bfc:	f043 0220 	orr.w	r2, r3, #32
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	3301      	adds	r3, #1
 8008c08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	4a08      	ldr	r2, [pc, #32]	; (8008c30 <USB_FlushTxFifo+0x64>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d901      	bls.n	8008c16 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008c12:	2303      	movs	r3, #3
 8008c14:	e006      	b.n	8008c24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	f003 0320 	and.w	r3, r3, #32
 8008c1e:	2b20      	cmp	r3, #32
 8008c20:	d0f0      	beq.n	8008c04 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3714      	adds	r7, #20
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr
 8008c30:	00030d40 	.word	0x00030d40

08008c34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b085      	sub	sp, #20
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	3301      	adds	r3, #1
 8008c44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	4a11      	ldr	r2, [pc, #68]	; (8008c90 <USB_FlushRxFifo+0x5c>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d901      	bls.n	8008c52 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008c4e:	2303      	movs	r3, #3
 8008c50:	e018      	b.n	8008c84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	daf2      	bge.n	8008c40 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2210      	movs	r2, #16
 8008c62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	3301      	adds	r3, #1
 8008c68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	4a08      	ldr	r2, [pc, #32]	; (8008c90 <USB_FlushRxFifo+0x5c>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d901      	bls.n	8008c76 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008c72:	2303      	movs	r3, #3
 8008c74:	e006      	b.n	8008c84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	f003 0310 	and.w	r3, r3, #16
 8008c7e:	2b10      	cmp	r3, #16
 8008c80:	d0f0      	beq.n	8008c64 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3714      	adds	r7, #20
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr
 8008c90:	00030d40 	.word	0x00030d40

08008c94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	78fb      	ldrb	r3, [r7, #3]
 8008cae:	68f9      	ldr	r1, [r7, #12]
 8008cb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3714      	adds	r7, #20
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr

08008cc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008cc6:	b480      	push	{r7}
 8008cc8:	b085      	sub	sp, #20
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ce0:	f023 0303 	bic.w	r3, r3, #3
 8008ce4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cf4:	f043 0302 	orr.w	r3, r3, #2
 8008cf8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3714      	adds	r7, #20
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	695b      	ldr	r3, [r3, #20]
 8008d14:	f003 0301 	and.w	r3, r3, #1
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	370c      	adds	r7, #12
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	3301      	adds	r3, #1
 8008d34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	4a13      	ldr	r2, [pc, #76]	; (8008d88 <USB_CoreReset+0x64>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d901      	bls.n	8008d42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	e01b      	b.n	8008d7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	daf2      	bge.n	8008d30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	f043 0201 	orr.w	r2, r3, #1
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	4a09      	ldr	r2, [pc, #36]	; (8008d88 <USB_CoreReset+0x64>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d901      	bls.n	8008d6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	e006      	b.n	8008d7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	f003 0301 	and.w	r3, r3, #1
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d0f0      	beq.n	8008d5a <USB_CoreReset+0x36>

  return HAL_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	00030d40 	.word	0x00030d40

08008d8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008d8c:	b480      	push	{r7}
 8008d8e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008d90:	bf00      	nop
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
	...

08008d9c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008da2:	f3ef 8305 	mrs	r3, IPSR
 8008da6:	60bb      	str	r3, [r7, #8]
  return(result);
 8008da8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10f      	bne.n	8008dce <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dae:	f3ef 8310 	mrs	r3, PRIMASK
 8008db2:	607b      	str	r3, [r7, #4]
  return(result);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d105      	bne.n	8008dc6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008dba:	f3ef 8311 	mrs	r3, BASEPRI
 8008dbe:	603b      	str	r3, [r7, #0]
  return(result);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d007      	beq.n	8008dd6 <osKernelInitialize+0x3a>
 8008dc6:	4b0e      	ldr	r3, [pc, #56]	; (8008e00 <osKernelInitialize+0x64>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	d103      	bne.n	8008dd6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008dce:	f06f 0305 	mvn.w	r3, #5
 8008dd2:	60fb      	str	r3, [r7, #12]
 8008dd4:	e00c      	b.n	8008df0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008dd6:	4b0a      	ldr	r3, [pc, #40]	; (8008e00 <osKernelInitialize+0x64>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d105      	bne.n	8008dea <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008dde:	4b08      	ldr	r3, [pc, #32]	; (8008e00 <osKernelInitialize+0x64>)
 8008de0:	2201      	movs	r2, #1
 8008de2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008de4:	2300      	movs	r3, #0
 8008de6:	60fb      	str	r3, [r7, #12]
 8008de8:	e002      	b.n	8008df0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008dea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008dee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008df0:	68fb      	ldr	r3, [r7, #12]
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3714      	adds	r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	20006f1c 	.word	0x20006f1c

08008e04 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e0a:	f3ef 8305 	mrs	r3, IPSR
 8008e0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e10:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d10f      	bne.n	8008e36 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e16:	f3ef 8310 	mrs	r3, PRIMASK
 8008e1a:	607b      	str	r3, [r7, #4]
  return(result);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d105      	bne.n	8008e2e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e22:	f3ef 8311 	mrs	r3, BASEPRI
 8008e26:	603b      	str	r3, [r7, #0]
  return(result);
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d007      	beq.n	8008e3e <osKernelStart+0x3a>
 8008e2e:	4b0f      	ldr	r3, [pc, #60]	; (8008e6c <osKernelStart+0x68>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d103      	bne.n	8008e3e <osKernelStart+0x3a>
    stat = osErrorISR;
 8008e36:	f06f 0305 	mvn.w	r3, #5
 8008e3a:	60fb      	str	r3, [r7, #12]
 8008e3c:	e010      	b.n	8008e60 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008e3e:	4b0b      	ldr	r3, [pc, #44]	; (8008e6c <osKernelStart+0x68>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d109      	bne.n	8008e5a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008e46:	f7ff ffa1 	bl	8008d8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008e4a:	4b08      	ldr	r3, [pc, #32]	; (8008e6c <osKernelStart+0x68>)
 8008e4c:	2202      	movs	r2, #2
 8008e4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008e50:	f001 f8ca 	bl	8009fe8 <vTaskStartScheduler>
      stat = osOK;
 8008e54:	2300      	movs	r3, #0
 8008e56:	60fb      	str	r3, [r7, #12]
 8008e58:	e002      	b.n	8008e60 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008e5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008e60:	68fb      	ldr	r3, [r7, #12]
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	20006f1c 	.word	0x20006f1c

08008e70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b090      	sub	sp, #64	; 0x40
 8008e74:	af04      	add	r7, sp, #16
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e80:	f3ef 8305 	mrs	r3, IPSR
 8008e84:	61fb      	str	r3, [r7, #28]
  return(result);
 8008e86:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f040 808f 	bne.w	8008fac <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8008e92:	61bb      	str	r3, [r7, #24]
  return(result);
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d105      	bne.n	8008ea6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e9a:	f3ef 8311 	mrs	r3, BASEPRI
 8008e9e:	617b      	str	r3, [r7, #20]
  return(result);
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d003      	beq.n	8008eae <osThreadNew+0x3e>
 8008ea6:	4b44      	ldr	r3, [pc, #272]	; (8008fb8 <osThreadNew+0x148>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d07e      	beq.n	8008fac <osThreadNew+0x13c>
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d07b      	beq.n	8008fac <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008eb4:	2380      	movs	r3, #128	; 0x80
 8008eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008eb8:	2318      	movs	r3, #24
 8008eba:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008ec0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ec4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d045      	beq.n	8008f58 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d002      	beq.n	8008eda <osThreadNew+0x6a>
        name = attr->name;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	699b      	ldr	r3, [r3, #24]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d002      	beq.n	8008ee8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	699b      	ldr	r3, [r3, #24]
 8008ee6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d008      	beq.n	8008f00 <osThreadNew+0x90>
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	2b38      	cmp	r3, #56	; 0x38
 8008ef2:	d805      	bhi.n	8008f00 <osThreadNew+0x90>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	f003 0301 	and.w	r3, r3, #1
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d001      	beq.n	8008f04 <osThreadNew+0x94>
        return (NULL);
 8008f00:	2300      	movs	r3, #0
 8008f02:	e054      	b.n	8008fae <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	695b      	ldr	r3, [r3, #20]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d003      	beq.n	8008f14 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	695b      	ldr	r3, [r3, #20]
 8008f10:	089b      	lsrs	r3, r3, #2
 8008f12:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00e      	beq.n	8008f3a <osThreadNew+0xca>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	2ba7      	cmp	r3, #167	; 0xa7
 8008f22:	d90a      	bls.n	8008f3a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d006      	beq.n	8008f3a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	695b      	ldr	r3, [r3, #20]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d002      	beq.n	8008f3a <osThreadNew+0xca>
        mem = 1;
 8008f34:	2301      	movs	r3, #1
 8008f36:	623b      	str	r3, [r7, #32]
 8008f38:	e010      	b.n	8008f5c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d10c      	bne.n	8008f5c <osThreadNew+0xec>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d108      	bne.n	8008f5c <osThreadNew+0xec>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d104      	bne.n	8008f5c <osThreadNew+0xec>
          mem = 0;
 8008f52:	2300      	movs	r3, #0
 8008f54:	623b      	str	r3, [r7, #32]
 8008f56:	e001      	b.n	8008f5c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008f5c:	6a3b      	ldr	r3, [r7, #32]
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d110      	bne.n	8008f84 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f6a:	9202      	str	r2, [sp, #8]
 8008f6c:	9301      	str	r3, [sp, #4]
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f000 fe3f 	bl	8009bfc <xTaskCreateStatic>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	613b      	str	r3, [r7, #16]
 8008f82:	e013      	b.n	8008fac <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008f84:	6a3b      	ldr	r3, [r7, #32]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d110      	bne.n	8008fac <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8c:	b29a      	uxth	r2, r3
 8008f8e:	f107 0310 	add.w	r3, r7, #16
 8008f92:	9301      	str	r3, [sp, #4]
 8008f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f96:	9300      	str	r3, [sp, #0]
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f000 fe90 	bl	8009cc2 <xTaskCreate>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d001      	beq.n	8008fac <osThreadNew+0x13c>
          hTask = NULL;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008fac:	693b      	ldr	r3, [r7, #16]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3730      	adds	r7, #48	; 0x30
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	20006f1c 	.word	0x20006f1c

08008fbc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b086      	sub	sp, #24
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fc4:	f3ef 8305 	mrs	r3, IPSR
 8008fc8:	613b      	str	r3, [r7, #16]
  return(result);
 8008fca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d10f      	bne.n	8008ff0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8008fd4:	60fb      	str	r3, [r7, #12]
  return(result);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d105      	bne.n	8008fe8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008fdc:	f3ef 8311 	mrs	r3, BASEPRI
 8008fe0:	60bb      	str	r3, [r7, #8]
  return(result);
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d007      	beq.n	8008ff8 <osDelay+0x3c>
 8008fe8:	4b0a      	ldr	r3, [pc, #40]	; (8009014 <osDelay+0x58>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2b02      	cmp	r3, #2
 8008fee:	d103      	bne.n	8008ff8 <osDelay+0x3c>
    stat = osErrorISR;
 8008ff0:	f06f 0305 	mvn.w	r3, #5
 8008ff4:	617b      	str	r3, [r7, #20]
 8008ff6:	e007      	b.n	8009008 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d002      	beq.n	8009008 <osDelay+0x4c>
      vTaskDelay(ticks);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 ffba 	bl	8009f7c <vTaskDelay>
    }
  }

  return (stat);
 8009008:	697b      	ldr	r3, [r7, #20]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3718      	adds	r7, #24
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	20006f1c 	.word	0x20006f1c

08009018 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009018:	b480      	push	{r7}
 800901a:	b085      	sub	sp, #20
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	4a07      	ldr	r2, [pc, #28]	; (8009044 <vApplicationGetIdleTaskMemory+0x2c>)
 8009028:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	4a06      	ldr	r2, [pc, #24]	; (8009048 <vApplicationGetIdleTaskMemory+0x30>)
 800902e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2280      	movs	r2, #128	; 0x80
 8009034:	601a      	str	r2, [r3, #0]
}
 8009036:	bf00      	nop
 8009038:	3714      	adds	r7, #20
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	20006f20 	.word	0x20006f20
 8009048:	20006fc8 	.word	0x20006fc8

0800904c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800904c:	b480      	push	{r7}
 800904e:	b085      	sub	sp, #20
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	4a07      	ldr	r2, [pc, #28]	; (8009078 <vApplicationGetTimerTaskMemory+0x2c>)
 800905c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	4a06      	ldr	r2, [pc, #24]	; (800907c <vApplicationGetTimerTaskMemory+0x30>)
 8009062:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f44f 7280 	mov.w	r2, #256	; 0x100
 800906a:	601a      	str	r2, [r3, #0]
}
 800906c:	bf00      	nop
 800906e:	3714      	adds	r7, #20
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	200071c8 	.word	0x200071c8
 800907c:	20007270 	.word	0x20007270

08009080 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f103 0208 	add.w	r2, r3, #8
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009098:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f103 0208 	add.w	r2, r3, #8
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f103 0208 	add.w	r2, r3, #8
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80090ce:	bf00      	nop
 80090d0:	370c      	adds	r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090da:	b480      	push	{r7}
 80090dc:	b085      	sub	sp, #20
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	689a      	ldr	r2, [r3, #8]
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	683a      	ldr	r2, [r7, #0]
 80090fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	683a      	ldr	r2, [r7, #0]
 8009104:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	1c5a      	adds	r2, r3, #1
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	601a      	str	r2, [r3, #0]
}
 8009116:	bf00      	nop
 8009118:	3714      	adds	r7, #20
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr

08009122 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009122:	b480      	push	{r7}
 8009124:	b085      	sub	sp, #20
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
 800912a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009138:	d103      	bne.n	8009142 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	691b      	ldr	r3, [r3, #16]
 800913e:	60fb      	str	r3, [r7, #12]
 8009140:	e00c      	b.n	800915c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	3308      	adds	r3, #8
 8009146:	60fb      	str	r3, [r7, #12]
 8009148:	e002      	b.n	8009150 <vListInsert+0x2e>
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	60fb      	str	r3, [r7, #12]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	429a      	cmp	r2, r3
 800915a:	d2f6      	bcs.n	800914a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	685a      	ldr	r2, [r3, #4]
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	683a      	ldr	r2, [r7, #0]
 800916a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	683a      	ldr	r2, [r7, #0]
 8009176:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	1c5a      	adds	r2, r3, #1
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	601a      	str	r2, [r3, #0]
}
 8009188:	bf00      	nop
 800918a:	3714      	adds	r7, #20
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	6892      	ldr	r2, [r2, #8]
 80091aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	6852      	ldr	r2, [r2, #4]
 80091b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d103      	bne.n	80091c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	689a      	ldr	r2, [r3, #8]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2200      	movs	r2, #0
 80091cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	1e5a      	subs	r2, r3, #1
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3714      	adds	r7, #20
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10c      	bne.n	8009216 <xQueueGenericReset+0x2e>
	__asm volatile
 80091fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009200:	b672      	cpsid	i
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	b662      	cpsie	i
 8009210:	60bb      	str	r3, [r7, #8]
}
 8009212:	bf00      	nop
 8009214:	e7fe      	b.n	8009214 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8009216:	f002 f8d1 	bl	800b3bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009222:	68f9      	ldr	r1, [r7, #12]
 8009224:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009226:	fb01 f303 	mul.w	r3, r1, r3
 800922a:	441a      	add	r2, r3
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009246:	3b01      	subs	r3, #1
 8009248:	68f9      	ldr	r1, [r7, #12]
 800924a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800924c:	fb01 f303 	mul.w	r3, r1, r3
 8009250:	441a      	add	r2, r3
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	22ff      	movs	r2, #255	; 0xff
 800925a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	22ff      	movs	r2, #255	; 0xff
 8009262:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d114      	bne.n	8009296 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d01a      	beq.n	80092aa <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	3310      	adds	r3, #16
 8009278:	4618      	mov	r0, r3
 800927a:	f001 f95d 	bl	800a538 <xTaskRemoveFromEventList>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d012      	beq.n	80092aa <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009284:	4b0c      	ldr	r3, [pc, #48]	; (80092b8 <xQueueGenericReset+0xd0>)
 8009286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800928a:	601a      	str	r2, [r3, #0]
 800928c:	f3bf 8f4f 	dsb	sy
 8009290:	f3bf 8f6f 	isb	sy
 8009294:	e009      	b.n	80092aa <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	3310      	adds	r3, #16
 800929a:	4618      	mov	r0, r3
 800929c:	f7ff fef0 	bl	8009080 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	3324      	adds	r3, #36	; 0x24
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7ff feeb 	bl	8009080 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80092aa:	f002 f8bb 	bl	800b424 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80092ae:	2301      	movs	r3, #1
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	e000ed04 	.word	0xe000ed04

080092bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b08e      	sub	sp, #56	; 0x38
 80092c0:	af02      	add	r7, sp, #8
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
 80092c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d10c      	bne.n	80092ea <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80092d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d4:	b672      	cpsid	i
 80092d6:	f383 8811 	msr	BASEPRI, r3
 80092da:	f3bf 8f6f 	isb	sy
 80092de:	f3bf 8f4f 	dsb	sy
 80092e2:	b662      	cpsie	i
 80092e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80092e6:	bf00      	nop
 80092e8:	e7fe      	b.n	80092e8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d10c      	bne.n	800930a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80092f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f4:	b672      	cpsid	i
 80092f6:	f383 8811 	msr	BASEPRI, r3
 80092fa:	f3bf 8f6f 	isb	sy
 80092fe:	f3bf 8f4f 	dsb	sy
 8009302:	b662      	cpsie	i
 8009304:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009306:	bf00      	nop
 8009308:	e7fe      	b.n	8009308 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d002      	beq.n	8009316 <xQueueGenericCreateStatic+0x5a>
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d001      	beq.n	800931a <xQueueGenericCreateStatic+0x5e>
 8009316:	2301      	movs	r3, #1
 8009318:	e000      	b.n	800931c <xQueueGenericCreateStatic+0x60>
 800931a:	2300      	movs	r3, #0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d10c      	bne.n	800933a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8009320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009324:	b672      	cpsid	i
 8009326:	f383 8811 	msr	BASEPRI, r3
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	b662      	cpsie	i
 8009334:	623b      	str	r3, [r7, #32]
}
 8009336:	bf00      	nop
 8009338:	e7fe      	b.n	8009338 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d102      	bne.n	8009346 <xQueueGenericCreateStatic+0x8a>
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d101      	bne.n	800934a <xQueueGenericCreateStatic+0x8e>
 8009346:	2301      	movs	r3, #1
 8009348:	e000      	b.n	800934c <xQueueGenericCreateStatic+0x90>
 800934a:	2300      	movs	r3, #0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d10c      	bne.n	800936a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8009350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009354:	b672      	cpsid	i
 8009356:	f383 8811 	msr	BASEPRI, r3
 800935a:	f3bf 8f6f 	isb	sy
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	b662      	cpsie	i
 8009364:	61fb      	str	r3, [r7, #28]
}
 8009366:	bf00      	nop
 8009368:	e7fe      	b.n	8009368 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800936a:	2350      	movs	r3, #80	; 0x50
 800936c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	2b50      	cmp	r3, #80	; 0x50
 8009372:	d00c      	beq.n	800938e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8009374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009378:	b672      	cpsid	i
 800937a:	f383 8811 	msr	BASEPRI, r3
 800937e:	f3bf 8f6f 	isb	sy
 8009382:	f3bf 8f4f 	dsb	sy
 8009386:	b662      	cpsie	i
 8009388:	61bb      	str	r3, [r7, #24]
}
 800938a:	bf00      	nop
 800938c:	e7fe      	b.n	800938c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800938e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00d      	beq.n	80093b6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800939a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939c:	2201      	movs	r2, #1
 800939e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80093a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80093a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	4613      	mov	r3, r2
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	68b9      	ldr	r1, [r7, #8]
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f000 f805 	bl	80093c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80093b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3730      	adds	r7, #48	; 0x30
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	60f8      	str	r0, [r7, #12]
 80093c8:	60b9      	str	r1, [r7, #8]
 80093ca:	607a      	str	r2, [r7, #4]
 80093cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d103      	bne.n	80093dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80093d4:	69bb      	ldr	r3, [r7, #24]
 80093d6:	69ba      	ldr	r2, [r7, #24]
 80093d8:	601a      	str	r2, [r3, #0]
 80093da:	e002      	b.n	80093e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	68ba      	ldr	r2, [r7, #8]
 80093ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80093ee:	2101      	movs	r1, #1
 80093f0:	69b8      	ldr	r0, [r7, #24]
 80093f2:	f7ff fef9 	bl	80091e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	78fa      	ldrb	r2, [r7, #3]
 80093fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80093fe:	bf00      	nop
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
	...

08009408 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b08e      	sub	sp, #56	; 0x38
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
 8009414:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009416:	2300      	movs	r3, #0
 8009418:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800941e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10c      	bne.n	800943e <xQueueGenericSend+0x36>
	__asm volatile
 8009424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009428:	b672      	cpsid	i
 800942a:	f383 8811 	msr	BASEPRI, r3
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	b662      	cpsie	i
 8009438:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800943a:	bf00      	nop
 800943c:	e7fe      	b.n	800943c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d103      	bne.n	800944c <xQueueGenericSend+0x44>
 8009444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009448:	2b00      	cmp	r3, #0
 800944a:	d101      	bne.n	8009450 <xQueueGenericSend+0x48>
 800944c:	2301      	movs	r3, #1
 800944e:	e000      	b.n	8009452 <xQueueGenericSend+0x4a>
 8009450:	2300      	movs	r3, #0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d10c      	bne.n	8009470 <xQueueGenericSend+0x68>
	__asm volatile
 8009456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945a:	b672      	cpsid	i
 800945c:	f383 8811 	msr	BASEPRI, r3
 8009460:	f3bf 8f6f 	isb	sy
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	b662      	cpsie	i
 800946a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800946c:	bf00      	nop
 800946e:	e7fe      	b.n	800946e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	2b02      	cmp	r3, #2
 8009474:	d103      	bne.n	800947e <xQueueGenericSend+0x76>
 8009476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800947a:	2b01      	cmp	r3, #1
 800947c:	d101      	bne.n	8009482 <xQueueGenericSend+0x7a>
 800947e:	2301      	movs	r3, #1
 8009480:	e000      	b.n	8009484 <xQueueGenericSend+0x7c>
 8009482:	2300      	movs	r3, #0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d10c      	bne.n	80094a2 <xQueueGenericSend+0x9a>
	__asm volatile
 8009488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948c:	b672      	cpsid	i
 800948e:	f383 8811 	msr	BASEPRI, r3
 8009492:	f3bf 8f6f 	isb	sy
 8009496:	f3bf 8f4f 	dsb	sy
 800949a:	b662      	cpsie	i
 800949c:	623b      	str	r3, [r7, #32]
}
 800949e:	bf00      	nop
 80094a0:	e7fe      	b.n	80094a0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80094a2:	f001 fa3b 	bl	800a91c <xTaskGetSchedulerState>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d102      	bne.n	80094b2 <xQueueGenericSend+0xaa>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d101      	bne.n	80094b6 <xQueueGenericSend+0xae>
 80094b2:	2301      	movs	r3, #1
 80094b4:	e000      	b.n	80094b8 <xQueueGenericSend+0xb0>
 80094b6:	2300      	movs	r3, #0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d10c      	bne.n	80094d6 <xQueueGenericSend+0xce>
	__asm volatile
 80094bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c0:	b672      	cpsid	i
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	b662      	cpsie	i
 80094d0:	61fb      	str	r3, [r7, #28]
}
 80094d2:	bf00      	nop
 80094d4:	e7fe      	b.n	80094d4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80094d6:	f001 ff71 	bl	800b3bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d302      	bcc.n	80094ec <xQueueGenericSend+0xe4>
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	2b02      	cmp	r3, #2
 80094ea:	d129      	bne.n	8009540 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094ec:	683a      	ldr	r2, [r7, #0]
 80094ee:	68b9      	ldr	r1, [r7, #8]
 80094f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094f2:	f000 fa15 	bl	8009920 <prvCopyDataToQueue>
 80094f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d010      	beq.n	8009522 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009502:	3324      	adds	r3, #36	; 0x24
 8009504:	4618      	mov	r0, r3
 8009506:	f001 f817 	bl	800a538 <xTaskRemoveFromEventList>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d013      	beq.n	8009538 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009510:	4b3f      	ldr	r3, [pc, #252]	; (8009610 <xQueueGenericSend+0x208>)
 8009512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009516:	601a      	str	r2, [r3, #0]
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	e00a      	b.n	8009538 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009524:	2b00      	cmp	r3, #0
 8009526:	d007      	beq.n	8009538 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009528:	4b39      	ldr	r3, [pc, #228]	; (8009610 <xQueueGenericSend+0x208>)
 800952a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800952e:	601a      	str	r2, [r3, #0]
 8009530:	f3bf 8f4f 	dsb	sy
 8009534:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009538:	f001 ff74 	bl	800b424 <vPortExitCritical>
				return pdPASS;
 800953c:	2301      	movs	r3, #1
 800953e:	e063      	b.n	8009608 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d103      	bne.n	800954e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009546:	f001 ff6d 	bl	800b424 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800954a:	2300      	movs	r3, #0
 800954c:	e05c      	b.n	8009608 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800954e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009550:	2b00      	cmp	r3, #0
 8009552:	d106      	bne.n	8009562 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009554:	f107 0314 	add.w	r3, r7, #20
 8009558:	4618      	mov	r0, r3
 800955a:	f001 f87b 	bl	800a654 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800955e:	2301      	movs	r3, #1
 8009560:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009562:	f001 ff5f 	bl	800b424 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009566:	f000 fdb3 	bl	800a0d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800956a:	f001 ff27 	bl	800b3bc <vPortEnterCritical>
 800956e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009570:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009574:	b25b      	sxtb	r3, r3
 8009576:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800957a:	d103      	bne.n	8009584 <xQueueGenericSend+0x17c>
 800957c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957e:	2200      	movs	r2, #0
 8009580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009586:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800958a:	b25b      	sxtb	r3, r3
 800958c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009590:	d103      	bne.n	800959a <xQueueGenericSend+0x192>
 8009592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009594:	2200      	movs	r2, #0
 8009596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800959a:	f001 ff43 	bl	800b424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800959e:	1d3a      	adds	r2, r7, #4
 80095a0:	f107 0314 	add.w	r3, r7, #20
 80095a4:	4611      	mov	r1, r2
 80095a6:	4618      	mov	r0, r3
 80095a8:	f001 f86a 	bl	800a680 <xTaskCheckForTimeOut>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d124      	bne.n	80095fc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80095b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095b4:	f000 faac 	bl	8009b10 <prvIsQueueFull>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d018      	beq.n	80095f0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80095be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c0:	3310      	adds	r3, #16
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	4611      	mov	r1, r2
 80095c6:	4618      	mov	r0, r3
 80095c8:	f000 ff62 	bl	800a490 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80095cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095ce:	f000 fa37 	bl	8009a40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80095d2:	f000 fd8b 	bl	800a0ec <xTaskResumeAll>
 80095d6:	4603      	mov	r3, r0
 80095d8:	2b00      	cmp	r3, #0
 80095da:	f47f af7c 	bne.w	80094d6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80095de:	4b0c      	ldr	r3, [pc, #48]	; (8009610 <xQueueGenericSend+0x208>)
 80095e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095e4:	601a      	str	r2, [r3, #0]
 80095e6:	f3bf 8f4f 	dsb	sy
 80095ea:	f3bf 8f6f 	isb	sy
 80095ee:	e772      	b.n	80094d6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80095f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095f2:	f000 fa25 	bl	8009a40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80095f6:	f000 fd79 	bl	800a0ec <xTaskResumeAll>
 80095fa:	e76c      	b.n	80094d6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80095fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095fe:	f000 fa1f 	bl	8009a40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009602:	f000 fd73 	bl	800a0ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009606:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009608:	4618      	mov	r0, r3
 800960a:	3738      	adds	r7, #56	; 0x38
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	e000ed04 	.word	0xe000ed04

08009614 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b08e      	sub	sp, #56	; 0x38
 8009618:	af00      	add	r7, sp, #0
 800961a:	60f8      	str	r0, [r7, #12]
 800961c:	60b9      	str	r1, [r7, #8]
 800961e:	607a      	str	r2, [r7, #4]
 8009620:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009628:	2b00      	cmp	r3, #0
 800962a:	d10c      	bne.n	8009646 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800962c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009630:	b672      	cpsid	i
 8009632:	f383 8811 	msr	BASEPRI, r3
 8009636:	f3bf 8f6f 	isb	sy
 800963a:	f3bf 8f4f 	dsb	sy
 800963e:	b662      	cpsie	i
 8009640:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009642:	bf00      	nop
 8009644:	e7fe      	b.n	8009644 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d103      	bne.n	8009654 <xQueueGenericSendFromISR+0x40>
 800964c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009650:	2b00      	cmp	r3, #0
 8009652:	d101      	bne.n	8009658 <xQueueGenericSendFromISR+0x44>
 8009654:	2301      	movs	r3, #1
 8009656:	e000      	b.n	800965a <xQueueGenericSendFromISR+0x46>
 8009658:	2300      	movs	r3, #0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d10c      	bne.n	8009678 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800965e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009662:	b672      	cpsid	i
 8009664:	f383 8811 	msr	BASEPRI, r3
 8009668:	f3bf 8f6f 	isb	sy
 800966c:	f3bf 8f4f 	dsb	sy
 8009670:	b662      	cpsie	i
 8009672:	623b      	str	r3, [r7, #32]
}
 8009674:	bf00      	nop
 8009676:	e7fe      	b.n	8009676 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	2b02      	cmp	r3, #2
 800967c:	d103      	bne.n	8009686 <xQueueGenericSendFromISR+0x72>
 800967e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009682:	2b01      	cmp	r3, #1
 8009684:	d101      	bne.n	800968a <xQueueGenericSendFromISR+0x76>
 8009686:	2301      	movs	r3, #1
 8009688:	e000      	b.n	800968c <xQueueGenericSendFromISR+0x78>
 800968a:	2300      	movs	r3, #0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d10c      	bne.n	80096aa <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8009690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009694:	b672      	cpsid	i
 8009696:	f383 8811 	msr	BASEPRI, r3
 800969a:	f3bf 8f6f 	isb	sy
 800969e:	f3bf 8f4f 	dsb	sy
 80096a2:	b662      	cpsie	i
 80096a4:	61fb      	str	r3, [r7, #28]
}
 80096a6:	bf00      	nop
 80096a8:	e7fe      	b.n	80096a8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096aa:	f001 ff6f 	bl	800b58c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80096ae:	f3ef 8211 	mrs	r2, BASEPRI
 80096b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b6:	b672      	cpsid	i
 80096b8:	f383 8811 	msr	BASEPRI, r3
 80096bc:	f3bf 8f6f 	isb	sy
 80096c0:	f3bf 8f4f 	dsb	sy
 80096c4:	b662      	cpsie	i
 80096c6:	61ba      	str	r2, [r7, #24]
 80096c8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80096ca:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80096cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80096ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d302      	bcc.n	80096e0 <xQueueGenericSendFromISR+0xcc>
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	2b02      	cmp	r3, #2
 80096de:	d12c      	bne.n	800973a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80096e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80096e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80096ea:	683a      	ldr	r2, [r7, #0]
 80096ec:	68b9      	ldr	r1, [r7, #8]
 80096ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80096f0:	f000 f916 	bl	8009920 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80096f4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80096f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096fc:	d112      	bne.n	8009724 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009702:	2b00      	cmp	r3, #0
 8009704:	d016      	beq.n	8009734 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009708:	3324      	adds	r3, #36	; 0x24
 800970a:	4618      	mov	r0, r3
 800970c:	f000 ff14 	bl	800a538 <xTaskRemoveFromEventList>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00e      	beq.n	8009734 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d00b      	beq.n	8009734 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	601a      	str	r2, [r3, #0]
 8009722:	e007      	b.n	8009734 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009724:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009728:	3301      	adds	r3, #1
 800972a:	b2db      	uxtb	r3, r3
 800972c:	b25a      	sxtb	r2, r3
 800972e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009734:	2301      	movs	r3, #1
 8009736:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009738:	e001      	b.n	800973e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800973a:	2300      	movs	r3, #0
 800973c:	637b      	str	r3, [r7, #52]	; 0x34
 800973e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009740:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009748:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800974a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800974c:	4618      	mov	r0, r3
 800974e:	3738      	adds	r7, #56	; 0x38
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b08c      	sub	sp, #48	; 0x30
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009760:	2300      	movs	r3, #0
 8009762:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976a:	2b00      	cmp	r3, #0
 800976c:	d10c      	bne.n	8009788 <xQueueReceive+0x34>
	__asm volatile
 800976e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009772:	b672      	cpsid	i
 8009774:	f383 8811 	msr	BASEPRI, r3
 8009778:	f3bf 8f6f 	isb	sy
 800977c:	f3bf 8f4f 	dsb	sy
 8009780:	b662      	cpsie	i
 8009782:	623b      	str	r3, [r7, #32]
}
 8009784:	bf00      	nop
 8009786:	e7fe      	b.n	8009786 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d103      	bne.n	8009796 <xQueueReceive+0x42>
 800978e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009792:	2b00      	cmp	r3, #0
 8009794:	d101      	bne.n	800979a <xQueueReceive+0x46>
 8009796:	2301      	movs	r3, #1
 8009798:	e000      	b.n	800979c <xQueueReceive+0x48>
 800979a:	2300      	movs	r3, #0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d10c      	bne.n	80097ba <xQueueReceive+0x66>
	__asm volatile
 80097a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a4:	b672      	cpsid	i
 80097a6:	f383 8811 	msr	BASEPRI, r3
 80097aa:	f3bf 8f6f 	isb	sy
 80097ae:	f3bf 8f4f 	dsb	sy
 80097b2:	b662      	cpsie	i
 80097b4:	61fb      	str	r3, [r7, #28]
}
 80097b6:	bf00      	nop
 80097b8:	e7fe      	b.n	80097b8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097ba:	f001 f8af 	bl	800a91c <xTaskGetSchedulerState>
 80097be:	4603      	mov	r3, r0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d102      	bne.n	80097ca <xQueueReceive+0x76>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d101      	bne.n	80097ce <xQueueReceive+0x7a>
 80097ca:	2301      	movs	r3, #1
 80097cc:	e000      	b.n	80097d0 <xQueueReceive+0x7c>
 80097ce:	2300      	movs	r3, #0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10c      	bne.n	80097ee <xQueueReceive+0x9a>
	__asm volatile
 80097d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d8:	b672      	cpsid	i
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	b662      	cpsie	i
 80097e8:	61bb      	str	r3, [r7, #24]
}
 80097ea:	bf00      	nop
 80097ec:	e7fe      	b.n	80097ec <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80097ee:	f001 fde5 	bl	800b3bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80097f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d01f      	beq.n	800983e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80097fe:	68b9      	ldr	r1, [r7, #8]
 8009800:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009802:	f000 f8f7 	bl	80099f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009808:	1e5a      	subs	r2, r3, #1
 800980a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800980e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00f      	beq.n	8009836 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009818:	3310      	adds	r3, #16
 800981a:	4618      	mov	r0, r3
 800981c:	f000 fe8c 	bl	800a538 <xTaskRemoveFromEventList>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d007      	beq.n	8009836 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009826:	4b3d      	ldr	r3, [pc, #244]	; (800991c <xQueueReceive+0x1c8>)
 8009828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800982c:	601a      	str	r2, [r3, #0]
 800982e:	f3bf 8f4f 	dsb	sy
 8009832:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009836:	f001 fdf5 	bl	800b424 <vPortExitCritical>
				return pdPASS;
 800983a:	2301      	movs	r3, #1
 800983c:	e069      	b.n	8009912 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d103      	bne.n	800984c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009844:	f001 fdee 	bl	800b424 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009848:	2300      	movs	r3, #0
 800984a:	e062      	b.n	8009912 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800984c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800984e:	2b00      	cmp	r3, #0
 8009850:	d106      	bne.n	8009860 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009852:	f107 0310 	add.w	r3, r7, #16
 8009856:	4618      	mov	r0, r3
 8009858:	f000 fefc 	bl	800a654 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800985c:	2301      	movs	r3, #1
 800985e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009860:	f001 fde0 	bl	800b424 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009864:	f000 fc34 	bl	800a0d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009868:	f001 fda8 	bl	800b3bc <vPortEnterCritical>
 800986c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800986e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009872:	b25b      	sxtb	r3, r3
 8009874:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009878:	d103      	bne.n	8009882 <xQueueReceive+0x12e>
 800987a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987c:	2200      	movs	r2, #0
 800987e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009884:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009888:	b25b      	sxtb	r3, r3
 800988a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800988e:	d103      	bne.n	8009898 <xQueueReceive+0x144>
 8009890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009892:	2200      	movs	r2, #0
 8009894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009898:	f001 fdc4 	bl	800b424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800989c:	1d3a      	adds	r2, r7, #4
 800989e:	f107 0310 	add.w	r3, r7, #16
 80098a2:	4611      	mov	r1, r2
 80098a4:	4618      	mov	r0, r3
 80098a6:	f000 feeb 	bl	800a680 <xTaskCheckForTimeOut>
 80098aa:	4603      	mov	r3, r0
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d123      	bne.n	80098f8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098b2:	f000 f917 	bl	8009ae4 <prvIsQueueEmpty>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d017      	beq.n	80098ec <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80098bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098be:	3324      	adds	r3, #36	; 0x24
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	4611      	mov	r1, r2
 80098c4:	4618      	mov	r0, r3
 80098c6:	f000 fde3 	bl	800a490 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80098ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098cc:	f000 f8b8 	bl	8009a40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80098d0:	f000 fc0c 	bl	800a0ec <xTaskResumeAll>
 80098d4:	4603      	mov	r3, r0
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d189      	bne.n	80097ee <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80098da:	4b10      	ldr	r3, [pc, #64]	; (800991c <xQueueReceive+0x1c8>)
 80098dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098e0:	601a      	str	r2, [r3, #0]
 80098e2:	f3bf 8f4f 	dsb	sy
 80098e6:	f3bf 8f6f 	isb	sy
 80098ea:	e780      	b.n	80097ee <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80098ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098ee:	f000 f8a7 	bl	8009a40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80098f2:	f000 fbfb 	bl	800a0ec <xTaskResumeAll>
 80098f6:	e77a      	b.n	80097ee <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80098f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098fa:	f000 f8a1 	bl	8009a40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098fe:	f000 fbf5 	bl	800a0ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009902:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009904:	f000 f8ee 	bl	8009ae4 <prvIsQueueEmpty>
 8009908:	4603      	mov	r3, r0
 800990a:	2b00      	cmp	r3, #0
 800990c:	f43f af6f 	beq.w	80097ee <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009910:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009912:	4618      	mov	r0, r3
 8009914:	3730      	adds	r7, #48	; 0x30
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	e000ed04 	.word	0xe000ed04

08009920 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b086      	sub	sp, #24
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800992c:	2300      	movs	r3, #0
 800992e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009934:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993a:	2b00      	cmp	r3, #0
 800993c:	d10d      	bne.n	800995a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d14d      	bne.n	80099e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	689b      	ldr	r3, [r3, #8]
 800994a:	4618      	mov	r0, r3
 800994c:	f001 f804 	bl	800a958 <xTaskPriorityDisinherit>
 8009950:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2200      	movs	r2, #0
 8009956:	609a      	str	r2, [r3, #8]
 8009958:	e043      	b.n	80099e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d119      	bne.n	8009994 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6858      	ldr	r0, [r3, #4]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009968:	461a      	mov	r2, r3
 800996a:	68b9      	ldr	r1, [r7, #8]
 800996c:	f012 ffd3 	bl	801c916 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	685a      	ldr	r2, [r3, #4]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009978:	441a      	add	r2, r3
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	685a      	ldr	r2, [r3, #4]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	429a      	cmp	r2, r3
 8009988:	d32b      	bcc.n	80099e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	605a      	str	r2, [r3, #4]
 8009992:	e026      	b.n	80099e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	68d8      	ldr	r0, [r3, #12]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800999c:	461a      	mov	r2, r3
 800999e:	68b9      	ldr	r1, [r7, #8]
 80099a0:	f012 ffb9 	bl	801c916 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	68da      	ldr	r2, [r3, #12]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ac:	425b      	negs	r3, r3
 80099ae:	441a      	add	r2, r3
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	68da      	ldr	r2, [r3, #12]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	429a      	cmp	r2, r3
 80099be:	d207      	bcs.n	80099d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	689a      	ldr	r2, [r3, #8]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c8:	425b      	negs	r3, r3
 80099ca:	441a      	add	r2, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	d105      	bne.n	80099e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d002      	beq.n	80099e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	3b01      	subs	r3, #1
 80099e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	1c5a      	adds	r2, r3, #1
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80099ea:	697b      	ldr	r3, [r7, #20]
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3718      	adds	r7, #24
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d018      	beq.n	8009a38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	68da      	ldr	r2, [r3, #12]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a0e:	441a      	add	r2, r3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	68da      	ldr	r2, [r3, #12]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d303      	bcc.n	8009a28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	68d9      	ldr	r1, [r3, #12]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a30:	461a      	mov	r2, r3
 8009a32:	6838      	ldr	r0, [r7, #0]
 8009a34:	f012 ff6f 	bl	801c916 <memcpy>
	}
}
 8009a38:	bf00      	nop
 8009a3a:	3708      	adds	r7, #8
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}

08009a40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009a48:	f001 fcb8 	bl	800b3bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a54:	e011      	b.n	8009a7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d012      	beq.n	8009a84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	3324      	adds	r3, #36	; 0x24
 8009a62:	4618      	mov	r0, r3
 8009a64:	f000 fd68 	bl	800a538 <xTaskRemoveFromEventList>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d001      	beq.n	8009a72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009a6e:	f000 fe6d 	bl	800a74c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
 8009a74:	3b01      	subs	r3, #1
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	dce9      	bgt.n	8009a56 <prvUnlockQueue+0x16>
 8009a82:	e000      	b.n	8009a86 <prvUnlockQueue+0x46>
					break;
 8009a84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	22ff      	movs	r2, #255	; 0xff
 8009a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009a8e:	f001 fcc9 	bl	800b424 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009a92:	f001 fc93 	bl	800b3bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a9e:	e011      	b.n	8009ac4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d012      	beq.n	8009ace <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	3310      	adds	r3, #16
 8009aac:	4618      	mov	r0, r3
 8009aae:	f000 fd43 	bl	800a538 <xTaskRemoveFromEventList>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d001      	beq.n	8009abc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009ab8:	f000 fe48 	bl	800a74c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009abc:	7bbb      	ldrb	r3, [r7, #14]
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ac4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	dce9      	bgt.n	8009aa0 <prvUnlockQueue+0x60>
 8009acc:	e000      	b.n	8009ad0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009ace:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	22ff      	movs	r2, #255	; 0xff
 8009ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009ad8:	f001 fca4 	bl	800b424 <vPortExitCritical>
}
 8009adc:	bf00      	nop
 8009ade:	3710      	adds	r7, #16
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009aec:	f001 fc66 	bl	800b3bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d102      	bne.n	8009afe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009af8:	2301      	movs	r3, #1
 8009afa:	60fb      	str	r3, [r7, #12]
 8009afc:	e001      	b.n	8009b02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009afe:	2300      	movs	r3, #0
 8009b00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b02:	f001 fc8f 	bl	800b424 <vPortExitCritical>

	return xReturn;
 8009b06:	68fb      	ldr	r3, [r7, #12]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b18:	f001 fc50 	bl	800b3bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d102      	bne.n	8009b2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	60fb      	str	r3, [r7, #12]
 8009b2c:	e001      	b.n	8009b32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b32:	f001 fc77 	bl	800b424 <vPortExitCritical>

	return xReturn;
 8009b36:	68fb      	ldr	r3, [r7, #12]
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3710      	adds	r7, #16
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	60fb      	str	r3, [r7, #12]
 8009b4e:	e014      	b.n	8009b7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009b50:	4a0f      	ldr	r2, [pc, #60]	; (8009b90 <vQueueAddToRegistry+0x50>)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d10b      	bne.n	8009b74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009b5c:	490c      	ldr	r1, [pc, #48]	; (8009b90 <vQueueAddToRegistry+0x50>)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	683a      	ldr	r2, [r7, #0]
 8009b62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009b66:	4a0a      	ldr	r2, [pc, #40]	; (8009b90 <vQueueAddToRegistry+0x50>)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	00db      	lsls	r3, r3, #3
 8009b6c:	4413      	add	r3, r2
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009b72:	e006      	b.n	8009b82 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	3301      	adds	r3, #1
 8009b78:	60fb      	str	r3, [r7, #12]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2b07      	cmp	r3, #7
 8009b7e:	d9e7      	bls.n	8009b50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009b80:	bf00      	nop
 8009b82:	bf00      	nop
 8009b84:	3714      	adds	r7, #20
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	20007670 	.word	0x20007670

08009b94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b086      	sub	sp, #24
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009ba4:	f001 fc0a 	bl	800b3bc <vPortEnterCritical>
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bae:	b25b      	sxtb	r3, r3
 8009bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bb4:	d103      	bne.n	8009bbe <vQueueWaitForMessageRestricted+0x2a>
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bc4:	b25b      	sxtb	r3, r3
 8009bc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bca:	d103      	bne.n	8009bd4 <vQueueWaitForMessageRestricted+0x40>
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bd4:	f001 fc26 	bl	800b424 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d106      	bne.n	8009bee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	3324      	adds	r3, #36	; 0x24
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	68b9      	ldr	r1, [r7, #8]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f000 fc77 	bl	800a4dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009bee:	6978      	ldr	r0, [r7, #20]
 8009bf0:	f7ff ff26 	bl	8009a40 <prvUnlockQueue>
	}
 8009bf4:	bf00      	nop
 8009bf6:	3718      	adds	r7, #24
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b08e      	sub	sp, #56	; 0x38
 8009c00:	af04      	add	r7, sp, #16
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	607a      	str	r2, [r7, #4]
 8009c08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d10c      	bne.n	8009c2a <xTaskCreateStatic+0x2e>
	__asm volatile
 8009c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c14:	b672      	cpsid	i
 8009c16:	f383 8811 	msr	BASEPRI, r3
 8009c1a:	f3bf 8f6f 	isb	sy
 8009c1e:	f3bf 8f4f 	dsb	sy
 8009c22:	b662      	cpsie	i
 8009c24:	623b      	str	r3, [r7, #32]
}
 8009c26:	bf00      	nop
 8009c28:	e7fe      	b.n	8009c28 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8009c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d10c      	bne.n	8009c4a <xTaskCreateStatic+0x4e>
	__asm volatile
 8009c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c34:	b672      	cpsid	i
 8009c36:	f383 8811 	msr	BASEPRI, r3
 8009c3a:	f3bf 8f6f 	isb	sy
 8009c3e:	f3bf 8f4f 	dsb	sy
 8009c42:	b662      	cpsie	i
 8009c44:	61fb      	str	r3, [r7, #28]
}
 8009c46:	bf00      	nop
 8009c48:	e7fe      	b.n	8009c48 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009c4a:	23a8      	movs	r3, #168	; 0xa8
 8009c4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	2ba8      	cmp	r3, #168	; 0xa8
 8009c52:	d00c      	beq.n	8009c6e <xTaskCreateStatic+0x72>
	__asm volatile
 8009c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c58:	b672      	cpsid	i
 8009c5a:	f383 8811 	msr	BASEPRI, r3
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	f3bf 8f4f 	dsb	sy
 8009c66:	b662      	cpsie	i
 8009c68:	61bb      	str	r3, [r7, #24]
}
 8009c6a:	bf00      	nop
 8009c6c:	e7fe      	b.n	8009c6c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009c6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d01e      	beq.n	8009cb4 <xTaskCreateStatic+0xb8>
 8009c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d01b      	beq.n	8009cb4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c88:	2202      	movs	r2, #2
 8009c8a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009c8e:	2300      	movs	r3, #0
 8009c90:	9303      	str	r3, [sp, #12]
 8009c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c94:	9302      	str	r3, [sp, #8]
 8009c96:	f107 0314 	add.w	r3, r7, #20
 8009c9a:	9301      	str	r3, [sp, #4]
 8009c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9e:	9300      	str	r3, [sp, #0]
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	68b9      	ldr	r1, [r7, #8]
 8009ca6:	68f8      	ldr	r0, [r7, #12]
 8009ca8:	f000 f850 	bl	8009d4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009cac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009cae:	f000 f8f5 	bl	8009e9c <prvAddNewTaskToReadyList>
 8009cb2:	e001      	b.n	8009cb8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009cb8:	697b      	ldr	r3, [r7, #20]
	}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3728      	adds	r7, #40	; 0x28
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}

08009cc2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b08c      	sub	sp, #48	; 0x30
 8009cc6:	af04      	add	r7, sp, #16
 8009cc8:	60f8      	str	r0, [r7, #12]
 8009cca:	60b9      	str	r1, [r7, #8]
 8009ccc:	603b      	str	r3, [r7, #0]
 8009cce:	4613      	mov	r3, r2
 8009cd0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009cd2:	88fb      	ldrh	r3, [r7, #6]
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f001 fc9c 	bl	800b614 <pvPortMalloc>
 8009cdc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d00e      	beq.n	8009d02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009ce4:	20a8      	movs	r0, #168	; 0xa8
 8009ce6:	f001 fc95 	bl	800b614 <pvPortMalloc>
 8009cea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d003      	beq.n	8009cfa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	697a      	ldr	r2, [r7, #20]
 8009cf6:	631a      	str	r2, [r3, #48]	; 0x30
 8009cf8:	e005      	b.n	8009d06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009cfa:	6978      	ldr	r0, [r7, #20]
 8009cfc:	f001 fd54 	bl	800b7a8 <vPortFree>
 8009d00:	e001      	b.n	8009d06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d02:	2300      	movs	r3, #0
 8009d04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d017      	beq.n	8009d3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d14:	88fa      	ldrh	r2, [r7, #6]
 8009d16:	2300      	movs	r3, #0
 8009d18:	9303      	str	r3, [sp, #12]
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	9302      	str	r3, [sp, #8]
 8009d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d20:	9301      	str	r3, [sp, #4]
 8009d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d24:	9300      	str	r3, [sp, #0]
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	68b9      	ldr	r1, [r7, #8]
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	f000 f80e 	bl	8009d4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d30:	69f8      	ldr	r0, [r7, #28]
 8009d32:	f000 f8b3 	bl	8009e9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009d36:	2301      	movs	r3, #1
 8009d38:	61bb      	str	r3, [r7, #24]
 8009d3a:	e002      	b.n	8009d42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009d42:	69bb      	ldr	r3, [r7, #24]
	}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3720      	adds	r7, #32
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b088      	sub	sp, #32
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
 8009d58:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	461a      	mov	r2, r3
 8009d64:	21a5      	movs	r1, #165	; 0xa5
 8009d66:	f012 fca5 	bl	801c6b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d6e:	6879      	ldr	r1, [r7, #4]
 8009d70:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009d74:	440b      	add	r3, r1
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	4413      	add	r3, r2
 8009d7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	f023 0307 	bic.w	r3, r3, #7
 8009d82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	f003 0307 	and.w	r3, r3, #7
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00c      	beq.n	8009da8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8009d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d92:	b672      	cpsid	i
 8009d94:	f383 8811 	msr	BASEPRI, r3
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	b662      	cpsie	i
 8009da2:	617b      	str	r3, [r7, #20]
}
 8009da4:	bf00      	nop
 8009da6:	e7fe      	b.n	8009da6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d01f      	beq.n	8009dee <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009dae:	2300      	movs	r3, #0
 8009db0:	61fb      	str	r3, [r7, #28]
 8009db2:	e012      	b.n	8009dda <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009db4:	68ba      	ldr	r2, [r7, #8]
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	4413      	add	r3, r2
 8009dba:	7819      	ldrb	r1, [r3, #0]
 8009dbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dbe:	69fb      	ldr	r3, [r7, #28]
 8009dc0:	4413      	add	r3, r2
 8009dc2:	3334      	adds	r3, #52	; 0x34
 8009dc4:	460a      	mov	r2, r1
 8009dc6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009dc8:	68ba      	ldr	r2, [r7, #8]
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	4413      	add	r3, r2
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d006      	beq.n	8009de2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	61fb      	str	r3, [r7, #28]
 8009dda:	69fb      	ldr	r3, [r7, #28]
 8009ddc:	2b0f      	cmp	r3, #15
 8009dde:	d9e9      	bls.n	8009db4 <prvInitialiseNewTask+0x68>
 8009de0:	e000      	b.n	8009de4 <prvInitialiseNewTask+0x98>
			{
				break;
 8009de2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de6:	2200      	movs	r2, #0
 8009de8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009dec:	e003      	b.n	8009df6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df0:	2200      	movs	r2, #0
 8009df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df8:	2b37      	cmp	r3, #55	; 0x37
 8009dfa:	d901      	bls.n	8009e00 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009dfc:	2337      	movs	r3, #55	; 0x37
 8009dfe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e0a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0e:	2200      	movs	r2, #0
 8009e10:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e14:	3304      	adds	r3, #4
 8009e16:	4618      	mov	r0, r3
 8009e18:	f7ff f952 	bl	80090c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1e:	3318      	adds	r3, #24
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7ff f94d 	bl	80090c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e46:	2200      	movs	r2, #0
 8009e48:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e4e:	3354      	adds	r3, #84	; 0x54
 8009e50:	224c      	movs	r2, #76	; 0x4c
 8009e52:	2100      	movs	r1, #0
 8009e54:	4618      	mov	r0, r3
 8009e56:	f012 fc2d 	bl	801c6b4 <memset>
 8009e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5c:	4a0c      	ldr	r2, [pc, #48]	; (8009e90 <prvInitialiseNewTask+0x144>)
 8009e5e:	659a      	str	r2, [r3, #88]	; 0x58
 8009e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e62:	4a0c      	ldr	r2, [pc, #48]	; (8009e94 <prvInitialiseNewTask+0x148>)
 8009e64:	65da      	str	r2, [r3, #92]	; 0x5c
 8009e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e68:	4a0b      	ldr	r2, [pc, #44]	; (8009e98 <prvInitialiseNewTask+0x14c>)
 8009e6a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009e6c:	683a      	ldr	r2, [r7, #0]
 8009e6e:	68f9      	ldr	r1, [r7, #12]
 8009e70:	69b8      	ldr	r0, [r7, #24]
 8009e72:	f001 f993 	bl	800b19c <pxPortInitialiseStack>
 8009e76:	4602      	mov	r2, r0
 8009e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d002      	beq.n	8009e88 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e86:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e88:	bf00      	nop
 8009e8a:	3720      	adds	r7, #32
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}
 8009e90:	20010b90 	.word	0x20010b90
 8009e94:	20010bf8 	.word	0x20010bf8
 8009e98:	20010c60 	.word	0x20010c60

08009e9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009ea4:	f001 fa8a 	bl	800b3bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009ea8:	4b2d      	ldr	r3, [pc, #180]	; (8009f60 <prvAddNewTaskToReadyList+0xc4>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	3301      	adds	r3, #1
 8009eae:	4a2c      	ldr	r2, [pc, #176]	; (8009f60 <prvAddNewTaskToReadyList+0xc4>)
 8009eb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009eb2:	4b2c      	ldr	r3, [pc, #176]	; (8009f64 <prvAddNewTaskToReadyList+0xc8>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d109      	bne.n	8009ece <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009eba:	4a2a      	ldr	r2, [pc, #168]	; (8009f64 <prvAddNewTaskToReadyList+0xc8>)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009ec0:	4b27      	ldr	r3, [pc, #156]	; (8009f60 <prvAddNewTaskToReadyList+0xc4>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d110      	bne.n	8009eea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009ec8:	f000 fc64 	bl	800a794 <prvInitialiseTaskLists>
 8009ecc:	e00d      	b.n	8009eea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009ece:	4b26      	ldr	r3, [pc, #152]	; (8009f68 <prvAddNewTaskToReadyList+0xcc>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d109      	bne.n	8009eea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009ed6:	4b23      	ldr	r3, [pc, #140]	; (8009f64 <prvAddNewTaskToReadyList+0xc8>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d802      	bhi.n	8009eea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009ee4:	4a1f      	ldr	r2, [pc, #124]	; (8009f64 <prvAddNewTaskToReadyList+0xc8>)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009eea:	4b20      	ldr	r3, [pc, #128]	; (8009f6c <prvAddNewTaskToReadyList+0xd0>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	3301      	adds	r3, #1
 8009ef0:	4a1e      	ldr	r2, [pc, #120]	; (8009f6c <prvAddNewTaskToReadyList+0xd0>)
 8009ef2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009ef4:	4b1d      	ldr	r3, [pc, #116]	; (8009f6c <prvAddNewTaskToReadyList+0xd0>)
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f00:	4b1b      	ldr	r3, [pc, #108]	; (8009f70 <prvAddNewTaskToReadyList+0xd4>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d903      	bls.n	8009f10 <prvAddNewTaskToReadyList+0x74>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f0c:	4a18      	ldr	r2, [pc, #96]	; (8009f70 <prvAddNewTaskToReadyList+0xd4>)
 8009f0e:	6013      	str	r3, [r2, #0]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f14:	4613      	mov	r3, r2
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	4413      	add	r3, r2
 8009f1a:	009b      	lsls	r3, r3, #2
 8009f1c:	4a15      	ldr	r2, [pc, #84]	; (8009f74 <prvAddNewTaskToReadyList+0xd8>)
 8009f1e:	441a      	add	r2, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	3304      	adds	r3, #4
 8009f24:	4619      	mov	r1, r3
 8009f26:	4610      	mov	r0, r2
 8009f28:	f7ff f8d7 	bl	80090da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009f2c:	f001 fa7a 	bl	800b424 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009f30:	4b0d      	ldr	r3, [pc, #52]	; (8009f68 <prvAddNewTaskToReadyList+0xcc>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00e      	beq.n	8009f56 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009f38:	4b0a      	ldr	r3, [pc, #40]	; (8009f64 <prvAddNewTaskToReadyList+0xc8>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d207      	bcs.n	8009f56 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009f46:	4b0c      	ldr	r3, [pc, #48]	; (8009f78 <prvAddNewTaskToReadyList+0xdc>)
 8009f48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f4c:	601a      	str	r2, [r3, #0]
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f56:	bf00      	nop
 8009f58:	3708      	adds	r7, #8
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	20007b84 	.word	0x20007b84
 8009f64:	200076b0 	.word	0x200076b0
 8009f68:	20007b90 	.word	0x20007b90
 8009f6c:	20007ba0 	.word	0x20007ba0
 8009f70:	20007b8c 	.word	0x20007b8c
 8009f74:	200076b4 	.word	0x200076b4
 8009f78:	e000ed04 	.word	0xe000ed04

08009f7c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009f84:	2300      	movs	r3, #0
 8009f86:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d019      	beq.n	8009fc2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009f8e:	4b14      	ldr	r3, [pc, #80]	; (8009fe0 <vTaskDelay+0x64>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d00c      	beq.n	8009fb0 <vTaskDelay+0x34>
	__asm volatile
 8009f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9a:	b672      	cpsid	i
 8009f9c:	f383 8811 	msr	BASEPRI, r3
 8009fa0:	f3bf 8f6f 	isb	sy
 8009fa4:	f3bf 8f4f 	dsb	sy
 8009fa8:	b662      	cpsie	i
 8009faa:	60bb      	str	r3, [r7, #8]
}
 8009fac:	bf00      	nop
 8009fae:	e7fe      	b.n	8009fae <vTaskDelay+0x32>
			vTaskSuspendAll();
 8009fb0:	f000 f88e 	bl	800a0d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009fb4:	2100      	movs	r1, #0
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 fd40 	bl	800aa3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009fbc:	f000 f896 	bl	800a0ec <xTaskResumeAll>
 8009fc0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d107      	bne.n	8009fd8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8009fc8:	4b06      	ldr	r3, [pc, #24]	; (8009fe4 <vTaskDelay+0x68>)
 8009fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fce:	601a      	str	r2, [r3, #0]
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009fd8:	bf00      	nop
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}
 8009fe0:	20007bac 	.word	0x20007bac
 8009fe4:	e000ed04 	.word	0xe000ed04

08009fe8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b08a      	sub	sp, #40	; 0x28
 8009fec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009ff6:	463a      	mov	r2, r7
 8009ff8:	1d39      	adds	r1, r7, #4
 8009ffa:	f107 0308 	add.w	r3, r7, #8
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7ff f80a 	bl	8009018 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a004:	6839      	ldr	r1, [r7, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	68ba      	ldr	r2, [r7, #8]
 800a00a:	9202      	str	r2, [sp, #8]
 800a00c:	9301      	str	r3, [sp, #4]
 800a00e:	2300      	movs	r3, #0
 800a010:	9300      	str	r3, [sp, #0]
 800a012:	2300      	movs	r3, #0
 800a014:	460a      	mov	r2, r1
 800a016:	4926      	ldr	r1, [pc, #152]	; (800a0b0 <vTaskStartScheduler+0xc8>)
 800a018:	4826      	ldr	r0, [pc, #152]	; (800a0b4 <vTaskStartScheduler+0xcc>)
 800a01a:	f7ff fdef 	bl	8009bfc <xTaskCreateStatic>
 800a01e:	4603      	mov	r3, r0
 800a020:	4a25      	ldr	r2, [pc, #148]	; (800a0b8 <vTaskStartScheduler+0xd0>)
 800a022:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a024:	4b24      	ldr	r3, [pc, #144]	; (800a0b8 <vTaskStartScheduler+0xd0>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d002      	beq.n	800a032 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a02c:	2301      	movs	r3, #1
 800a02e:	617b      	str	r3, [r7, #20]
 800a030:	e001      	b.n	800a036 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a032:	2300      	movs	r3, #0
 800a034:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d102      	bne.n	800a042 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a03c:	f000 fd52 	bl	800aae4 <xTimerCreateTimerTask>
 800a040:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	2b01      	cmp	r3, #1
 800a046:	d11d      	bne.n	800a084 <vTaskStartScheduler+0x9c>
	__asm volatile
 800a048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04c:	b672      	cpsid	i
 800a04e:	f383 8811 	msr	BASEPRI, r3
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	b662      	cpsie	i
 800a05c:	613b      	str	r3, [r7, #16]
}
 800a05e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a060:	4b16      	ldr	r3, [pc, #88]	; (800a0bc <vTaskStartScheduler+0xd4>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	3354      	adds	r3, #84	; 0x54
 800a066:	4a16      	ldr	r2, [pc, #88]	; (800a0c0 <vTaskStartScheduler+0xd8>)
 800a068:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a06a:	4b16      	ldr	r3, [pc, #88]	; (800a0c4 <vTaskStartScheduler+0xdc>)
 800a06c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a070:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a072:	4b15      	ldr	r3, [pc, #84]	; (800a0c8 <vTaskStartScheduler+0xe0>)
 800a074:	2201      	movs	r2, #1
 800a076:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a078:	4b14      	ldr	r3, [pc, #80]	; (800a0cc <vTaskStartScheduler+0xe4>)
 800a07a:	2200      	movs	r2, #0
 800a07c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a07e:	f001 f91f 	bl	800b2c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a082:	e010      	b.n	800a0a6 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a08a:	d10c      	bne.n	800a0a6 <vTaskStartScheduler+0xbe>
	__asm volatile
 800a08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a090:	b672      	cpsid	i
 800a092:	f383 8811 	msr	BASEPRI, r3
 800a096:	f3bf 8f6f 	isb	sy
 800a09a:	f3bf 8f4f 	dsb	sy
 800a09e:	b662      	cpsie	i
 800a0a0:	60fb      	str	r3, [r7, #12]
}
 800a0a2:	bf00      	nop
 800a0a4:	e7fe      	b.n	800a0a4 <vTaskStartScheduler+0xbc>
}
 800a0a6:	bf00      	nop
 800a0a8:	3718      	adds	r7, #24
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	0801d738 	.word	0x0801d738
 800a0b4:	0800a765 	.word	0x0800a765
 800a0b8:	20007ba8 	.word	0x20007ba8
 800a0bc:	200076b0 	.word	0x200076b0
 800a0c0:	200021d8 	.word	0x200021d8
 800a0c4:	20007ba4 	.word	0x20007ba4
 800a0c8:	20007b90 	.word	0x20007b90
 800a0cc:	20007b88 	.word	0x20007b88

0800a0d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a0d4:	4b04      	ldr	r3, [pc, #16]	; (800a0e8 <vTaskSuspendAll+0x18>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	4a03      	ldr	r2, [pc, #12]	; (800a0e8 <vTaskSuspendAll+0x18>)
 800a0dc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a0de:	bf00      	nop
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr
 800a0e8:	20007bac 	.word	0x20007bac

0800a0ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a0fa:	4b43      	ldr	r3, [pc, #268]	; (800a208 <xTaskResumeAll+0x11c>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d10c      	bne.n	800a11c <xTaskResumeAll+0x30>
	__asm volatile
 800a102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a106:	b672      	cpsid	i
 800a108:	f383 8811 	msr	BASEPRI, r3
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	b662      	cpsie	i
 800a116:	603b      	str	r3, [r7, #0]
}
 800a118:	bf00      	nop
 800a11a:	e7fe      	b.n	800a11a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a11c:	f001 f94e 	bl	800b3bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a120:	4b39      	ldr	r3, [pc, #228]	; (800a208 <xTaskResumeAll+0x11c>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	3b01      	subs	r3, #1
 800a126:	4a38      	ldr	r2, [pc, #224]	; (800a208 <xTaskResumeAll+0x11c>)
 800a128:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a12a:	4b37      	ldr	r3, [pc, #220]	; (800a208 <xTaskResumeAll+0x11c>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d162      	bne.n	800a1f8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a132:	4b36      	ldr	r3, [pc, #216]	; (800a20c <xTaskResumeAll+0x120>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d05e      	beq.n	800a1f8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a13a:	e02f      	b.n	800a19c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a13c:	4b34      	ldr	r3, [pc, #208]	; (800a210 <xTaskResumeAll+0x124>)
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	68db      	ldr	r3, [r3, #12]
 800a142:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	3318      	adds	r3, #24
 800a148:	4618      	mov	r0, r3
 800a14a:	f7ff f823 	bl	8009194 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	3304      	adds	r3, #4
 800a152:	4618      	mov	r0, r3
 800a154:	f7ff f81e 	bl	8009194 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a15c:	4b2d      	ldr	r3, [pc, #180]	; (800a214 <xTaskResumeAll+0x128>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	429a      	cmp	r2, r3
 800a162:	d903      	bls.n	800a16c <xTaskResumeAll+0x80>
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a168:	4a2a      	ldr	r2, [pc, #168]	; (800a214 <xTaskResumeAll+0x128>)
 800a16a:	6013      	str	r3, [r2, #0]
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a170:	4613      	mov	r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	4413      	add	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	4a27      	ldr	r2, [pc, #156]	; (800a218 <xTaskResumeAll+0x12c>)
 800a17a:	441a      	add	r2, r3
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	3304      	adds	r3, #4
 800a180:	4619      	mov	r1, r3
 800a182:	4610      	mov	r0, r2
 800a184:	f7fe ffa9 	bl	80090da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a18c:	4b23      	ldr	r3, [pc, #140]	; (800a21c <xTaskResumeAll+0x130>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a192:	429a      	cmp	r2, r3
 800a194:	d302      	bcc.n	800a19c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800a196:	4b22      	ldr	r3, [pc, #136]	; (800a220 <xTaskResumeAll+0x134>)
 800a198:	2201      	movs	r2, #1
 800a19a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a19c:	4b1c      	ldr	r3, [pc, #112]	; (800a210 <xTaskResumeAll+0x124>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d1cb      	bne.n	800a13c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d001      	beq.n	800a1ae <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a1aa:	f000 fb97 	bl	800a8dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a1ae:	4b1d      	ldr	r3, [pc, #116]	; (800a224 <xTaskResumeAll+0x138>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d010      	beq.n	800a1dc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a1ba:	f000 f847 	bl	800a24c <xTaskIncrementTick>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d002      	beq.n	800a1ca <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800a1c4:	4b16      	ldr	r3, [pc, #88]	; (800a220 <xTaskResumeAll+0x134>)
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	3b01      	subs	r3, #1
 800a1ce:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d1f1      	bne.n	800a1ba <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800a1d6:	4b13      	ldr	r3, [pc, #76]	; (800a224 <xTaskResumeAll+0x138>)
 800a1d8:	2200      	movs	r2, #0
 800a1da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a1dc:	4b10      	ldr	r3, [pc, #64]	; (800a220 <xTaskResumeAll+0x134>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d009      	beq.n	800a1f8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a1e8:	4b0f      	ldr	r3, [pc, #60]	; (800a228 <xTaskResumeAll+0x13c>)
 800a1ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1ee:	601a      	str	r2, [r3, #0]
 800a1f0:	f3bf 8f4f 	dsb	sy
 800a1f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1f8:	f001 f914 	bl	800b424 <vPortExitCritical>

	return xAlreadyYielded;
 800a1fc:	68bb      	ldr	r3, [r7, #8]
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	20007bac 	.word	0x20007bac
 800a20c:	20007b84 	.word	0x20007b84
 800a210:	20007b44 	.word	0x20007b44
 800a214:	20007b8c 	.word	0x20007b8c
 800a218:	200076b4 	.word	0x200076b4
 800a21c:	200076b0 	.word	0x200076b0
 800a220:	20007b98 	.word	0x20007b98
 800a224:	20007b94 	.word	0x20007b94
 800a228:	e000ed04 	.word	0xe000ed04

0800a22c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a232:	4b05      	ldr	r3, [pc, #20]	; (800a248 <xTaskGetTickCount+0x1c>)
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a238:	687b      	ldr	r3, [r7, #4]
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	370c      	adds	r7, #12
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	20007b88 	.word	0x20007b88

0800a24c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b086      	sub	sp, #24
 800a250:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a252:	2300      	movs	r3, #0
 800a254:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a256:	4b50      	ldr	r3, [pc, #320]	; (800a398 <xTaskIncrementTick+0x14c>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	f040 808b 	bne.w	800a376 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a260:	4b4e      	ldr	r3, [pc, #312]	; (800a39c <xTaskIncrementTick+0x150>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	3301      	adds	r3, #1
 800a266:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a268:	4a4c      	ldr	r2, [pc, #304]	; (800a39c <xTaskIncrementTick+0x150>)
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d122      	bne.n	800a2ba <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800a274:	4b4a      	ldr	r3, [pc, #296]	; (800a3a0 <xTaskIncrementTick+0x154>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00c      	beq.n	800a298 <xTaskIncrementTick+0x4c>
	__asm volatile
 800a27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a282:	b672      	cpsid	i
 800a284:	f383 8811 	msr	BASEPRI, r3
 800a288:	f3bf 8f6f 	isb	sy
 800a28c:	f3bf 8f4f 	dsb	sy
 800a290:	b662      	cpsie	i
 800a292:	603b      	str	r3, [r7, #0]
}
 800a294:	bf00      	nop
 800a296:	e7fe      	b.n	800a296 <xTaskIncrementTick+0x4a>
 800a298:	4b41      	ldr	r3, [pc, #260]	; (800a3a0 <xTaskIncrementTick+0x154>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	60fb      	str	r3, [r7, #12]
 800a29e:	4b41      	ldr	r3, [pc, #260]	; (800a3a4 <xTaskIncrementTick+0x158>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a3f      	ldr	r2, [pc, #252]	; (800a3a0 <xTaskIncrementTick+0x154>)
 800a2a4:	6013      	str	r3, [r2, #0]
 800a2a6:	4a3f      	ldr	r2, [pc, #252]	; (800a3a4 <xTaskIncrementTick+0x158>)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6013      	str	r3, [r2, #0]
 800a2ac:	4b3e      	ldr	r3, [pc, #248]	; (800a3a8 <xTaskIncrementTick+0x15c>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	4a3d      	ldr	r2, [pc, #244]	; (800a3a8 <xTaskIncrementTick+0x15c>)
 800a2b4:	6013      	str	r3, [r2, #0]
 800a2b6:	f000 fb11 	bl	800a8dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a2ba:	4b3c      	ldr	r3, [pc, #240]	; (800a3ac <xTaskIncrementTick+0x160>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	693a      	ldr	r2, [r7, #16]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d349      	bcc.n	800a358 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2c4:	4b36      	ldr	r3, [pc, #216]	; (800a3a0 <xTaskIncrementTick+0x154>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d104      	bne.n	800a2d8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2ce:	4b37      	ldr	r3, [pc, #220]	; (800a3ac <xTaskIncrementTick+0x160>)
 800a2d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2d4:	601a      	str	r2, [r3, #0]
					break;
 800a2d6:	e03f      	b.n	800a358 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2d8:	4b31      	ldr	r3, [pc, #196]	; (800a3a0 <xTaskIncrementTick+0x154>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a2e8:	693a      	ldr	r2, [r7, #16]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	429a      	cmp	r2, r3
 800a2ee:	d203      	bcs.n	800a2f8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a2f0:	4a2e      	ldr	r2, [pc, #184]	; (800a3ac <xTaskIncrementTick+0x160>)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a2f6:	e02f      	b.n	800a358 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	3304      	adds	r3, #4
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f7fe ff49 	bl	8009194 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a302:	68bb      	ldr	r3, [r7, #8]
 800a304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a306:	2b00      	cmp	r3, #0
 800a308:	d004      	beq.n	800a314 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	3318      	adds	r3, #24
 800a30e:	4618      	mov	r0, r3
 800a310:	f7fe ff40 	bl	8009194 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a318:	4b25      	ldr	r3, [pc, #148]	; (800a3b0 <xTaskIncrementTick+0x164>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d903      	bls.n	800a328 <xTaskIncrementTick+0xdc>
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a324:	4a22      	ldr	r2, [pc, #136]	; (800a3b0 <xTaskIncrementTick+0x164>)
 800a326:	6013      	str	r3, [r2, #0]
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a32c:	4613      	mov	r3, r2
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	4413      	add	r3, r2
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	4a1f      	ldr	r2, [pc, #124]	; (800a3b4 <xTaskIncrementTick+0x168>)
 800a336:	441a      	add	r2, r3
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	3304      	adds	r3, #4
 800a33c:	4619      	mov	r1, r3
 800a33e:	4610      	mov	r0, r2
 800a340:	f7fe fecb 	bl	80090da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a348:	4b1b      	ldr	r3, [pc, #108]	; (800a3b8 <xTaskIncrementTick+0x16c>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34e:	429a      	cmp	r2, r3
 800a350:	d3b8      	bcc.n	800a2c4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800a352:	2301      	movs	r3, #1
 800a354:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a356:	e7b5      	b.n	800a2c4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a358:	4b17      	ldr	r3, [pc, #92]	; (800a3b8 <xTaskIncrementTick+0x16c>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a35e:	4915      	ldr	r1, [pc, #84]	; (800a3b4 <xTaskIncrementTick+0x168>)
 800a360:	4613      	mov	r3, r2
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	4413      	add	r3, r2
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	440b      	add	r3, r1
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d907      	bls.n	800a380 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800a370:	2301      	movs	r3, #1
 800a372:	617b      	str	r3, [r7, #20]
 800a374:	e004      	b.n	800a380 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a376:	4b11      	ldr	r3, [pc, #68]	; (800a3bc <xTaskIncrementTick+0x170>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	3301      	adds	r3, #1
 800a37c:	4a0f      	ldr	r2, [pc, #60]	; (800a3bc <xTaskIncrementTick+0x170>)
 800a37e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a380:	4b0f      	ldr	r3, [pc, #60]	; (800a3c0 <xTaskIncrementTick+0x174>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d001      	beq.n	800a38c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800a388:	2301      	movs	r3, #1
 800a38a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a38c:	697b      	ldr	r3, [r7, #20]
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3718      	adds	r7, #24
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	20007bac 	.word	0x20007bac
 800a39c:	20007b88 	.word	0x20007b88
 800a3a0:	20007b3c 	.word	0x20007b3c
 800a3a4:	20007b40 	.word	0x20007b40
 800a3a8:	20007b9c 	.word	0x20007b9c
 800a3ac:	20007ba4 	.word	0x20007ba4
 800a3b0:	20007b8c 	.word	0x20007b8c
 800a3b4:	200076b4 	.word	0x200076b4
 800a3b8:	200076b0 	.word	0x200076b0
 800a3bc:	20007b94 	.word	0x20007b94
 800a3c0:	20007b98 	.word	0x20007b98

0800a3c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b085      	sub	sp, #20
 800a3c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a3ca:	4b2b      	ldr	r3, [pc, #172]	; (800a478 <vTaskSwitchContext+0xb4>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d003      	beq.n	800a3da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a3d2:	4b2a      	ldr	r3, [pc, #168]	; (800a47c <vTaskSwitchContext+0xb8>)
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a3d8:	e048      	b.n	800a46c <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800a3da:	4b28      	ldr	r3, [pc, #160]	; (800a47c <vTaskSwitchContext+0xb8>)
 800a3dc:	2200      	movs	r2, #0
 800a3de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3e0:	4b27      	ldr	r3, [pc, #156]	; (800a480 <vTaskSwitchContext+0xbc>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	60fb      	str	r3, [r7, #12]
 800a3e6:	e012      	b.n	800a40e <vTaskSwitchContext+0x4a>
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d10c      	bne.n	800a408 <vTaskSwitchContext+0x44>
	__asm volatile
 800a3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f2:	b672      	cpsid	i
 800a3f4:	f383 8811 	msr	BASEPRI, r3
 800a3f8:	f3bf 8f6f 	isb	sy
 800a3fc:	f3bf 8f4f 	dsb	sy
 800a400:	b662      	cpsie	i
 800a402:	607b      	str	r3, [r7, #4]
}
 800a404:	bf00      	nop
 800a406:	e7fe      	b.n	800a406 <vTaskSwitchContext+0x42>
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	3b01      	subs	r3, #1
 800a40c:	60fb      	str	r3, [r7, #12]
 800a40e:	491d      	ldr	r1, [pc, #116]	; (800a484 <vTaskSwitchContext+0xc0>)
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	4613      	mov	r3, r2
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	4413      	add	r3, r2
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	440b      	add	r3, r1
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d0e2      	beq.n	800a3e8 <vTaskSwitchContext+0x24>
 800a422:	68fa      	ldr	r2, [r7, #12]
 800a424:	4613      	mov	r3, r2
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	4413      	add	r3, r2
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	4a15      	ldr	r2, [pc, #84]	; (800a484 <vTaskSwitchContext+0xc0>)
 800a42e:	4413      	add	r3, r2
 800a430:	60bb      	str	r3, [r7, #8]
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	685a      	ldr	r2, [r3, #4]
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	605a      	str	r2, [r3, #4]
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	685a      	ldr	r2, [r3, #4]
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	3308      	adds	r3, #8
 800a444:	429a      	cmp	r2, r3
 800a446:	d104      	bne.n	800a452 <vTaskSwitchContext+0x8e>
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	685a      	ldr	r2, [r3, #4]
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	605a      	str	r2, [r3, #4]
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	4a0b      	ldr	r2, [pc, #44]	; (800a488 <vTaskSwitchContext+0xc4>)
 800a45a:	6013      	str	r3, [r2, #0]
 800a45c:	4a08      	ldr	r2, [pc, #32]	; (800a480 <vTaskSwitchContext+0xbc>)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a462:	4b09      	ldr	r3, [pc, #36]	; (800a488 <vTaskSwitchContext+0xc4>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	3354      	adds	r3, #84	; 0x54
 800a468:	4a08      	ldr	r2, [pc, #32]	; (800a48c <vTaskSwitchContext+0xc8>)
 800a46a:	6013      	str	r3, [r2, #0]
}
 800a46c:	bf00      	nop
 800a46e:	3714      	adds	r7, #20
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr
 800a478:	20007bac 	.word	0x20007bac
 800a47c:	20007b98 	.word	0x20007b98
 800a480:	20007b8c 	.word	0x20007b8c
 800a484:	200076b4 	.word	0x200076b4
 800a488:	200076b0 	.word	0x200076b0
 800a48c:	200021d8 	.word	0x200021d8

0800a490 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d10c      	bne.n	800a4ba <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800a4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a4:	b672      	cpsid	i
 800a4a6:	f383 8811 	msr	BASEPRI, r3
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	b662      	cpsie	i
 800a4b4:	60fb      	str	r3, [r7, #12]
}
 800a4b6:	bf00      	nop
 800a4b8:	e7fe      	b.n	800a4b8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a4ba:	4b07      	ldr	r3, [pc, #28]	; (800a4d8 <vTaskPlaceOnEventList+0x48>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	3318      	adds	r3, #24
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f7fe fe2d 	bl	8009122 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a4c8:	2101      	movs	r1, #1
 800a4ca:	6838      	ldr	r0, [r7, #0]
 800a4cc:	f000 fab6 	bl	800aa3c <prvAddCurrentTaskToDelayedList>
}
 800a4d0:	bf00      	nop
 800a4d2:	3710      	adds	r7, #16
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	200076b0 	.word	0x200076b0

0800a4dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b086      	sub	sp, #24
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d10c      	bne.n	800a508 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800a4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f2:	b672      	cpsid	i
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	b662      	cpsie	i
 800a502:	617b      	str	r3, [r7, #20]
}
 800a504:	bf00      	nop
 800a506:	e7fe      	b.n	800a506 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a508:	4b0a      	ldr	r3, [pc, #40]	; (800a534 <vTaskPlaceOnEventListRestricted+0x58>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	3318      	adds	r3, #24
 800a50e:	4619      	mov	r1, r3
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	f7fe fde2 	bl	80090da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d002      	beq.n	800a522 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800a51c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a520:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a522:	6879      	ldr	r1, [r7, #4]
 800a524:	68b8      	ldr	r0, [r7, #8]
 800a526:	f000 fa89 	bl	800aa3c <prvAddCurrentTaskToDelayedList>
	}
 800a52a:	bf00      	nop
 800a52c:	3718      	adds	r7, #24
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	200076b0 	.word	0x200076b0

0800a538 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b086      	sub	sp, #24
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	68db      	ldr	r3, [r3, #12]
 800a544:	68db      	ldr	r3, [r3, #12]
 800a546:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d10c      	bne.n	800a568 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800a54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a552:	b672      	cpsid	i
 800a554:	f383 8811 	msr	BASEPRI, r3
 800a558:	f3bf 8f6f 	isb	sy
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	b662      	cpsie	i
 800a562:	60fb      	str	r3, [r7, #12]
}
 800a564:	bf00      	nop
 800a566:	e7fe      	b.n	800a566 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	3318      	adds	r3, #24
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7fe fe11 	bl	8009194 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a572:	4b1e      	ldr	r3, [pc, #120]	; (800a5ec <xTaskRemoveFromEventList+0xb4>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d11d      	bne.n	800a5b6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	3304      	adds	r3, #4
 800a57e:	4618      	mov	r0, r3
 800a580:	f7fe fe08 	bl	8009194 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a588:	4b19      	ldr	r3, [pc, #100]	; (800a5f0 <xTaskRemoveFromEventList+0xb8>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d903      	bls.n	800a598 <xTaskRemoveFromEventList+0x60>
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a594:	4a16      	ldr	r2, [pc, #88]	; (800a5f0 <xTaskRemoveFromEventList+0xb8>)
 800a596:	6013      	str	r3, [r2, #0]
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a59c:	4613      	mov	r3, r2
 800a59e:	009b      	lsls	r3, r3, #2
 800a5a0:	4413      	add	r3, r2
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	4a13      	ldr	r2, [pc, #76]	; (800a5f4 <xTaskRemoveFromEventList+0xbc>)
 800a5a6:	441a      	add	r2, r3
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	3304      	adds	r3, #4
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	4610      	mov	r0, r2
 800a5b0:	f7fe fd93 	bl	80090da <vListInsertEnd>
 800a5b4:	e005      	b.n	800a5c2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	3318      	adds	r3, #24
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	480e      	ldr	r0, [pc, #56]	; (800a5f8 <xTaskRemoveFromEventList+0xc0>)
 800a5be:	f7fe fd8c 	bl	80090da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5c6:	4b0d      	ldr	r3, [pc, #52]	; (800a5fc <xTaskRemoveFromEventList+0xc4>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d905      	bls.n	800a5dc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a5d4:	4b0a      	ldr	r3, [pc, #40]	; (800a600 <xTaskRemoveFromEventList+0xc8>)
 800a5d6:	2201      	movs	r2, #1
 800a5d8:	601a      	str	r2, [r3, #0]
 800a5da:	e001      	b.n	800a5e0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a5e0:	697b      	ldr	r3, [r7, #20]
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3718      	adds	r7, #24
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	20007bac 	.word	0x20007bac
 800a5f0:	20007b8c 	.word	0x20007b8c
 800a5f4:	200076b4 	.word	0x200076b4
 800a5f8:	20007b44 	.word	0x20007b44
 800a5fc:	200076b0 	.word	0x200076b0
 800a600:	20007b98 	.word	0x20007b98

0800a604 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d10c      	bne.n	800a62c <vTaskSetTimeOutState+0x28>
	__asm volatile
 800a612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a616:	b672      	cpsid	i
 800a618:	f383 8811 	msr	BASEPRI, r3
 800a61c:	f3bf 8f6f 	isb	sy
 800a620:	f3bf 8f4f 	dsb	sy
 800a624:	b662      	cpsie	i
 800a626:	60fb      	str	r3, [r7, #12]
}
 800a628:	bf00      	nop
 800a62a:	e7fe      	b.n	800a62a <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 800a62c:	f000 fec6 	bl	800b3bc <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a630:	4b06      	ldr	r3, [pc, #24]	; (800a64c <vTaskSetTimeOutState+0x48>)
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800a638:	4b05      	ldr	r3, [pc, #20]	; (800a650 <vTaskSetTimeOutState+0x4c>)
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800a640:	f000 fef0 	bl	800b424 <vPortExitCritical>
}
 800a644:	bf00      	nop
 800a646:	3710      	adds	r7, #16
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	20007b9c 	.word	0x20007b9c
 800a650:	20007b88 	.word	0x20007b88

0800a654 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a65c:	4b06      	ldr	r3, [pc, #24]	; (800a678 <vTaskInternalSetTimeOutState+0x24>)
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a664:	4b05      	ldr	r3, [pc, #20]	; (800a67c <vTaskInternalSetTimeOutState+0x28>)
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	605a      	str	r2, [r3, #4]
}
 800a66c:	bf00      	nop
 800a66e:	370c      	adds	r7, #12
 800a670:	46bd      	mov	sp, r7
 800a672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a676:	4770      	bx	lr
 800a678:	20007b9c 	.word	0x20007b9c
 800a67c:	20007b88 	.word	0x20007b88

0800a680 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b088      	sub	sp, #32
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
 800a688:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d10c      	bne.n	800a6aa <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800a690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a694:	b672      	cpsid	i
 800a696:	f383 8811 	msr	BASEPRI, r3
 800a69a:	f3bf 8f6f 	isb	sy
 800a69e:	f3bf 8f4f 	dsb	sy
 800a6a2:	b662      	cpsie	i
 800a6a4:	613b      	str	r3, [r7, #16]
}
 800a6a6:	bf00      	nop
 800a6a8:	e7fe      	b.n	800a6a8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d10c      	bne.n	800a6ca <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800a6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b4:	b672      	cpsid	i
 800a6b6:	f383 8811 	msr	BASEPRI, r3
 800a6ba:	f3bf 8f6f 	isb	sy
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	b662      	cpsie	i
 800a6c4:	60fb      	str	r3, [r7, #12]
}
 800a6c6:	bf00      	nop
 800a6c8:	e7fe      	b.n	800a6c8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800a6ca:	f000 fe77 	bl	800b3bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a6ce:	4b1d      	ldr	r3, [pc, #116]	; (800a744 <xTaskCheckForTimeOut+0xc4>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	69ba      	ldr	r2, [r7, #24]
 800a6da:	1ad3      	subs	r3, r2, r3
 800a6dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6e6:	d102      	bne.n	800a6ee <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	61fb      	str	r3, [r7, #28]
 800a6ec:	e023      	b.n	800a736 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681a      	ldr	r2, [r3, #0]
 800a6f2:	4b15      	ldr	r3, [pc, #84]	; (800a748 <xTaskCheckForTimeOut+0xc8>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d007      	beq.n	800a70a <xTaskCheckForTimeOut+0x8a>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	69ba      	ldr	r2, [r7, #24]
 800a700:	429a      	cmp	r2, r3
 800a702:	d302      	bcc.n	800a70a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a704:	2301      	movs	r3, #1
 800a706:	61fb      	str	r3, [r7, #28]
 800a708:	e015      	b.n	800a736 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	697a      	ldr	r2, [r7, #20]
 800a710:	429a      	cmp	r2, r3
 800a712:	d20b      	bcs.n	800a72c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	1ad2      	subs	r2, r2, r3
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f7ff ff97 	bl	800a654 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a726:	2300      	movs	r3, #0
 800a728:	61fb      	str	r3, [r7, #28]
 800a72a:	e004      	b.n	800a736 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	2200      	movs	r2, #0
 800a730:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a732:	2301      	movs	r3, #1
 800a734:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a736:	f000 fe75 	bl	800b424 <vPortExitCritical>

	return xReturn;
 800a73a:	69fb      	ldr	r3, [r7, #28]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3720      	adds	r7, #32
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	20007b88 	.word	0x20007b88
 800a748:	20007b9c 	.word	0x20007b9c

0800a74c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a74c:	b480      	push	{r7}
 800a74e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a750:	4b03      	ldr	r3, [pc, #12]	; (800a760 <vTaskMissedYield+0x14>)
 800a752:	2201      	movs	r2, #1
 800a754:	601a      	str	r2, [r3, #0]
}
 800a756:	bf00      	nop
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr
 800a760:	20007b98 	.word	0x20007b98

0800a764 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a76c:	f000 f852 	bl	800a814 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a770:	4b06      	ldr	r3, [pc, #24]	; (800a78c <prvIdleTask+0x28>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2b01      	cmp	r3, #1
 800a776:	d9f9      	bls.n	800a76c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a778:	4b05      	ldr	r3, [pc, #20]	; (800a790 <prvIdleTask+0x2c>)
 800a77a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a77e:	601a      	str	r2, [r3, #0]
 800a780:	f3bf 8f4f 	dsb	sy
 800a784:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a788:	e7f0      	b.n	800a76c <prvIdleTask+0x8>
 800a78a:	bf00      	nop
 800a78c:	200076b4 	.word	0x200076b4
 800a790:	e000ed04 	.word	0xe000ed04

0800a794 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a79a:	2300      	movs	r3, #0
 800a79c:	607b      	str	r3, [r7, #4]
 800a79e:	e00c      	b.n	800a7ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	4613      	mov	r3, r2
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	4413      	add	r3, r2
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	4a12      	ldr	r2, [pc, #72]	; (800a7f4 <prvInitialiseTaskLists+0x60>)
 800a7ac:	4413      	add	r3, r2
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7fe fc66 	bl	8009080 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	607b      	str	r3, [r7, #4]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2b37      	cmp	r3, #55	; 0x37
 800a7be:	d9ef      	bls.n	800a7a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a7c0:	480d      	ldr	r0, [pc, #52]	; (800a7f8 <prvInitialiseTaskLists+0x64>)
 800a7c2:	f7fe fc5d 	bl	8009080 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a7c6:	480d      	ldr	r0, [pc, #52]	; (800a7fc <prvInitialiseTaskLists+0x68>)
 800a7c8:	f7fe fc5a 	bl	8009080 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a7cc:	480c      	ldr	r0, [pc, #48]	; (800a800 <prvInitialiseTaskLists+0x6c>)
 800a7ce:	f7fe fc57 	bl	8009080 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a7d2:	480c      	ldr	r0, [pc, #48]	; (800a804 <prvInitialiseTaskLists+0x70>)
 800a7d4:	f7fe fc54 	bl	8009080 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a7d8:	480b      	ldr	r0, [pc, #44]	; (800a808 <prvInitialiseTaskLists+0x74>)
 800a7da:	f7fe fc51 	bl	8009080 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a7de:	4b0b      	ldr	r3, [pc, #44]	; (800a80c <prvInitialiseTaskLists+0x78>)
 800a7e0:	4a05      	ldr	r2, [pc, #20]	; (800a7f8 <prvInitialiseTaskLists+0x64>)
 800a7e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a7e4:	4b0a      	ldr	r3, [pc, #40]	; (800a810 <prvInitialiseTaskLists+0x7c>)
 800a7e6:	4a05      	ldr	r2, [pc, #20]	; (800a7fc <prvInitialiseTaskLists+0x68>)
 800a7e8:	601a      	str	r2, [r3, #0]
}
 800a7ea:	bf00      	nop
 800a7ec:	3708      	adds	r7, #8
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	200076b4 	.word	0x200076b4
 800a7f8:	20007b14 	.word	0x20007b14
 800a7fc:	20007b28 	.word	0x20007b28
 800a800:	20007b44 	.word	0x20007b44
 800a804:	20007b58 	.word	0x20007b58
 800a808:	20007b70 	.word	0x20007b70
 800a80c:	20007b3c 	.word	0x20007b3c
 800a810:	20007b40 	.word	0x20007b40

0800a814 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a81a:	e019      	b.n	800a850 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a81c:	f000 fdce 	bl	800b3bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a820:	4b10      	ldr	r3, [pc, #64]	; (800a864 <prvCheckTasksWaitingTermination+0x50>)
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	3304      	adds	r3, #4
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7fe fcb1 	bl	8009194 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a832:	4b0d      	ldr	r3, [pc, #52]	; (800a868 <prvCheckTasksWaitingTermination+0x54>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	3b01      	subs	r3, #1
 800a838:	4a0b      	ldr	r2, [pc, #44]	; (800a868 <prvCheckTasksWaitingTermination+0x54>)
 800a83a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a83c:	4b0b      	ldr	r3, [pc, #44]	; (800a86c <prvCheckTasksWaitingTermination+0x58>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	3b01      	subs	r3, #1
 800a842:	4a0a      	ldr	r2, [pc, #40]	; (800a86c <prvCheckTasksWaitingTermination+0x58>)
 800a844:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a846:	f000 fded 	bl	800b424 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 f810 	bl	800a870 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a850:	4b06      	ldr	r3, [pc, #24]	; (800a86c <prvCheckTasksWaitingTermination+0x58>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d1e1      	bne.n	800a81c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a858:	bf00      	nop
 800a85a:	bf00      	nop
 800a85c:	3708      	adds	r7, #8
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	20007b58 	.word	0x20007b58
 800a868:	20007b84 	.word	0x20007b84
 800a86c:	20007b6c 	.word	0x20007b6c

0800a870 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	3354      	adds	r3, #84	; 0x54
 800a87c:	4618      	mov	r0, r3
 800a87e:	f011 ff79 	bl	801c774 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d108      	bne.n	800a89e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a890:	4618      	mov	r0, r3
 800a892:	f000 ff89 	bl	800b7a8 <vPortFree>
				vPortFree( pxTCB );
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 ff86 	bl	800b7a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a89c:	e01a      	b.n	800a8d4 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d103      	bne.n	800a8b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 ff7d 	bl	800b7a8 <vPortFree>
	}
 800a8ae:	e011      	b.n	800a8d4 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	d00c      	beq.n	800a8d4 <prvDeleteTCB+0x64>
	__asm volatile
 800a8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8be:	b672      	cpsid	i
 800a8c0:	f383 8811 	msr	BASEPRI, r3
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	b662      	cpsie	i
 800a8ce:	60fb      	str	r3, [r7, #12]
}
 800a8d0:	bf00      	nop
 800a8d2:	e7fe      	b.n	800a8d2 <prvDeleteTCB+0x62>
	}
 800a8d4:	bf00      	nop
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8e2:	4b0c      	ldr	r3, [pc, #48]	; (800a914 <prvResetNextTaskUnblockTime+0x38>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d104      	bne.n	800a8f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a8ec:	4b0a      	ldr	r3, [pc, #40]	; (800a918 <prvResetNextTaskUnblockTime+0x3c>)
 800a8ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a8f4:	e008      	b.n	800a908 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8f6:	4b07      	ldr	r3, [pc, #28]	; (800a914 <prvResetNextTaskUnblockTime+0x38>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	4a04      	ldr	r2, [pc, #16]	; (800a918 <prvResetNextTaskUnblockTime+0x3c>)
 800a906:	6013      	str	r3, [r2, #0]
}
 800a908:	bf00      	nop
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	20007b3c 	.word	0x20007b3c
 800a918:	20007ba4 	.word	0x20007ba4

0800a91c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a922:	4b0b      	ldr	r3, [pc, #44]	; (800a950 <xTaskGetSchedulerState+0x34>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d102      	bne.n	800a930 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a92a:	2301      	movs	r3, #1
 800a92c:	607b      	str	r3, [r7, #4]
 800a92e:	e008      	b.n	800a942 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a930:	4b08      	ldr	r3, [pc, #32]	; (800a954 <xTaskGetSchedulerState+0x38>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d102      	bne.n	800a93e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a938:	2302      	movs	r3, #2
 800a93a:	607b      	str	r3, [r7, #4]
 800a93c:	e001      	b.n	800a942 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a93e:	2300      	movs	r3, #0
 800a940:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a942:	687b      	ldr	r3, [r7, #4]
	}
 800a944:	4618      	mov	r0, r3
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr
 800a950:	20007b90 	.word	0x20007b90
 800a954:	20007bac 	.word	0x20007bac

0800a958 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b086      	sub	sp, #24
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a964:	2300      	movs	r3, #0
 800a966:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d05a      	beq.n	800aa24 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a96e:	4b30      	ldr	r3, [pc, #192]	; (800aa30 <xTaskPriorityDisinherit+0xd8>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	693a      	ldr	r2, [r7, #16]
 800a974:	429a      	cmp	r2, r3
 800a976:	d00c      	beq.n	800a992 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800a978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97c:	b672      	cpsid	i
 800a97e:	f383 8811 	msr	BASEPRI, r3
 800a982:	f3bf 8f6f 	isb	sy
 800a986:	f3bf 8f4f 	dsb	sy
 800a98a:	b662      	cpsie	i
 800a98c:	60fb      	str	r3, [r7, #12]
}
 800a98e:	bf00      	nop
 800a990:	e7fe      	b.n	800a990 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a996:	2b00      	cmp	r3, #0
 800a998:	d10c      	bne.n	800a9b4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800a99a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a99e:	b672      	cpsid	i
 800a9a0:	f383 8811 	msr	BASEPRI, r3
 800a9a4:	f3bf 8f6f 	isb	sy
 800a9a8:	f3bf 8f4f 	dsb	sy
 800a9ac:	b662      	cpsie	i
 800a9ae:	60bb      	str	r3, [r7, #8]
}
 800a9b0:	bf00      	nop
 800a9b2:	e7fe      	b.n	800a9b2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9b8:	1e5a      	subs	r2, r3, #1
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d02c      	beq.n	800aa24 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d128      	bne.n	800aa24 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	3304      	adds	r3, #4
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7fe fbdc 	bl	8009194 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9f4:	4b0f      	ldr	r3, [pc, #60]	; (800aa34 <xTaskPriorityDisinherit+0xdc>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d903      	bls.n	800aa04 <xTaskPriorityDisinherit+0xac>
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa00:	4a0c      	ldr	r2, [pc, #48]	; (800aa34 <xTaskPriorityDisinherit+0xdc>)
 800aa02:	6013      	str	r3, [r2, #0]
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa08:	4613      	mov	r3, r2
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	4413      	add	r3, r2
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	4a09      	ldr	r2, [pc, #36]	; (800aa38 <xTaskPriorityDisinherit+0xe0>)
 800aa12:	441a      	add	r2, r3
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	3304      	adds	r3, #4
 800aa18:	4619      	mov	r1, r3
 800aa1a:	4610      	mov	r0, r2
 800aa1c:	f7fe fb5d 	bl	80090da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aa20:	2301      	movs	r3, #1
 800aa22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa24:	697b      	ldr	r3, [r7, #20]
	}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3718      	adds	r7, #24
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	200076b0 	.word	0x200076b0
 800aa34:	20007b8c 	.word	0x20007b8c
 800aa38:	200076b4 	.word	0x200076b4

0800aa3c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aa46:	4b21      	ldr	r3, [pc, #132]	; (800aacc <prvAddCurrentTaskToDelayedList+0x90>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa4c:	4b20      	ldr	r3, [pc, #128]	; (800aad0 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	3304      	adds	r3, #4
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7fe fb9e 	bl	8009194 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa5e:	d10a      	bne.n	800aa76 <prvAddCurrentTaskToDelayedList+0x3a>
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d007      	beq.n	800aa76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa66:	4b1a      	ldr	r3, [pc, #104]	; (800aad0 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	3304      	adds	r3, #4
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	4819      	ldr	r0, [pc, #100]	; (800aad4 <prvAddCurrentTaskToDelayedList+0x98>)
 800aa70:	f7fe fb33 	bl	80090da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aa74:	e026      	b.n	800aac4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aa76:	68fa      	ldr	r2, [r7, #12]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aa7e:	4b14      	ldr	r3, [pc, #80]	; (800aad0 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	68ba      	ldr	r2, [r7, #8]
 800aa84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aa86:	68ba      	ldr	r2, [r7, #8]
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d209      	bcs.n	800aaa2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa8e:	4b12      	ldr	r3, [pc, #72]	; (800aad8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	4b0f      	ldr	r3, [pc, #60]	; (800aad0 <prvAddCurrentTaskToDelayedList+0x94>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	3304      	adds	r3, #4
 800aa98:	4619      	mov	r1, r3
 800aa9a:	4610      	mov	r0, r2
 800aa9c:	f7fe fb41 	bl	8009122 <vListInsert>
}
 800aaa0:	e010      	b.n	800aac4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aaa2:	4b0e      	ldr	r3, [pc, #56]	; (800aadc <prvAddCurrentTaskToDelayedList+0xa0>)
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	4b0a      	ldr	r3, [pc, #40]	; (800aad0 <prvAddCurrentTaskToDelayedList+0x94>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	3304      	adds	r3, #4
 800aaac:	4619      	mov	r1, r3
 800aaae:	4610      	mov	r0, r2
 800aab0:	f7fe fb37 	bl	8009122 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aab4:	4b0a      	ldr	r3, [pc, #40]	; (800aae0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	68ba      	ldr	r2, [r7, #8]
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d202      	bcs.n	800aac4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800aabe:	4a08      	ldr	r2, [pc, #32]	; (800aae0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	6013      	str	r3, [r2, #0]
}
 800aac4:	bf00      	nop
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	20007b88 	.word	0x20007b88
 800aad0:	200076b0 	.word	0x200076b0
 800aad4:	20007b70 	.word	0x20007b70
 800aad8:	20007b40 	.word	0x20007b40
 800aadc:	20007b3c 	.word	0x20007b3c
 800aae0:	20007ba4 	.word	0x20007ba4

0800aae4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b08a      	sub	sp, #40	; 0x28
 800aae8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aaea:	2300      	movs	r3, #0
 800aaec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aaee:	f000 fb15 	bl	800b11c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aaf2:	4b1d      	ldr	r3, [pc, #116]	; (800ab68 <xTimerCreateTimerTask+0x84>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d021      	beq.n	800ab3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aafa:	2300      	movs	r3, #0
 800aafc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aafe:	2300      	movs	r3, #0
 800ab00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ab02:	1d3a      	adds	r2, r7, #4
 800ab04:	f107 0108 	add.w	r1, r7, #8
 800ab08:	f107 030c 	add.w	r3, r7, #12
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7fe fa9d 	bl	800904c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ab12:	6879      	ldr	r1, [r7, #4]
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	9202      	str	r2, [sp, #8]
 800ab1a:	9301      	str	r3, [sp, #4]
 800ab1c:	2302      	movs	r3, #2
 800ab1e:	9300      	str	r3, [sp, #0]
 800ab20:	2300      	movs	r3, #0
 800ab22:	460a      	mov	r2, r1
 800ab24:	4911      	ldr	r1, [pc, #68]	; (800ab6c <xTimerCreateTimerTask+0x88>)
 800ab26:	4812      	ldr	r0, [pc, #72]	; (800ab70 <xTimerCreateTimerTask+0x8c>)
 800ab28:	f7ff f868 	bl	8009bfc <xTaskCreateStatic>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	4a11      	ldr	r2, [pc, #68]	; (800ab74 <xTimerCreateTimerTask+0x90>)
 800ab30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ab32:	4b10      	ldr	r3, [pc, #64]	; (800ab74 <xTimerCreateTimerTask+0x90>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d001      	beq.n	800ab3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d10c      	bne.n	800ab5e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800ab44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab48:	b672      	cpsid	i
 800ab4a:	f383 8811 	msr	BASEPRI, r3
 800ab4e:	f3bf 8f6f 	isb	sy
 800ab52:	f3bf 8f4f 	dsb	sy
 800ab56:	b662      	cpsie	i
 800ab58:	613b      	str	r3, [r7, #16]
}
 800ab5a:	bf00      	nop
 800ab5c:	e7fe      	b.n	800ab5c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800ab5e:	697b      	ldr	r3, [r7, #20]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3718      	adds	r7, #24
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	20007be0 	.word	0x20007be0
 800ab6c:	0801d740 	.word	0x0801d740
 800ab70:	0800acb5 	.word	0x0800acb5
 800ab74:	20007be4 	.word	0x20007be4

0800ab78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b08a      	sub	sp, #40	; 0x28
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	60b9      	str	r1, [r7, #8]
 800ab82:	607a      	str	r2, [r7, #4]
 800ab84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ab86:	2300      	movs	r3, #0
 800ab88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d10c      	bne.n	800abaa <xTimerGenericCommand+0x32>
	__asm volatile
 800ab90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab94:	b672      	cpsid	i
 800ab96:	f383 8811 	msr	BASEPRI, r3
 800ab9a:	f3bf 8f6f 	isb	sy
 800ab9e:	f3bf 8f4f 	dsb	sy
 800aba2:	b662      	cpsie	i
 800aba4:	623b      	str	r3, [r7, #32]
}
 800aba6:	bf00      	nop
 800aba8:	e7fe      	b.n	800aba8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800abaa:	4b1a      	ldr	r3, [pc, #104]	; (800ac14 <xTimerGenericCommand+0x9c>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d02a      	beq.n	800ac08 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	2b05      	cmp	r3, #5
 800abc2:	dc18      	bgt.n	800abf6 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800abc4:	f7ff feaa 	bl	800a91c <xTaskGetSchedulerState>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b02      	cmp	r3, #2
 800abcc:	d109      	bne.n	800abe2 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800abce:	4b11      	ldr	r3, [pc, #68]	; (800ac14 <xTimerGenericCommand+0x9c>)
 800abd0:	6818      	ldr	r0, [r3, #0]
 800abd2:	f107 0110 	add.w	r1, r7, #16
 800abd6:	2300      	movs	r3, #0
 800abd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abda:	f7fe fc15 	bl	8009408 <xQueueGenericSend>
 800abde:	6278      	str	r0, [r7, #36]	; 0x24
 800abe0:	e012      	b.n	800ac08 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800abe2:	4b0c      	ldr	r3, [pc, #48]	; (800ac14 <xTimerGenericCommand+0x9c>)
 800abe4:	6818      	ldr	r0, [r3, #0]
 800abe6:	f107 0110 	add.w	r1, r7, #16
 800abea:	2300      	movs	r3, #0
 800abec:	2200      	movs	r2, #0
 800abee:	f7fe fc0b 	bl	8009408 <xQueueGenericSend>
 800abf2:	6278      	str	r0, [r7, #36]	; 0x24
 800abf4:	e008      	b.n	800ac08 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800abf6:	4b07      	ldr	r3, [pc, #28]	; (800ac14 <xTimerGenericCommand+0x9c>)
 800abf8:	6818      	ldr	r0, [r3, #0]
 800abfa:	f107 0110 	add.w	r1, r7, #16
 800abfe:	2300      	movs	r3, #0
 800ac00:	683a      	ldr	r2, [r7, #0]
 800ac02:	f7fe fd07 	bl	8009614 <xQueueGenericSendFromISR>
 800ac06:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ac08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3728      	adds	r7, #40	; 0x28
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
 800ac12:	bf00      	nop
 800ac14:	20007be0 	.word	0x20007be0

0800ac18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b088      	sub	sp, #32
 800ac1c:	af02      	add	r7, sp, #8
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac22:	4b23      	ldr	r3, [pc, #140]	; (800acb0 <prvProcessExpiredTimer+0x98>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	3304      	adds	r3, #4
 800ac30:	4618      	mov	r0, r3
 800ac32:	f7fe faaf 	bl	8009194 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac3c:	f003 0304 	and.w	r3, r3, #4
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d024      	beq.n	800ac8e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	699a      	ldr	r2, [r3, #24]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	18d1      	adds	r1, r2, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	683a      	ldr	r2, [r7, #0]
 800ac50:	6978      	ldr	r0, [r7, #20]
 800ac52:	f000 f8d3 	bl	800adfc <prvInsertTimerInActiveList>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d021      	beq.n	800aca0 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	9300      	str	r3, [sp, #0]
 800ac60:	2300      	movs	r3, #0
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	2100      	movs	r1, #0
 800ac66:	6978      	ldr	r0, [r7, #20]
 800ac68:	f7ff ff86 	bl	800ab78 <xTimerGenericCommand>
 800ac6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d115      	bne.n	800aca0 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800ac74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac78:	b672      	cpsid	i
 800ac7a:	f383 8811 	msr	BASEPRI, r3
 800ac7e:	f3bf 8f6f 	isb	sy
 800ac82:	f3bf 8f4f 	dsb	sy
 800ac86:	b662      	cpsie	i
 800ac88:	60fb      	str	r3, [r7, #12]
}
 800ac8a:	bf00      	nop
 800ac8c:	e7fe      	b.n	800ac8c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac94:	f023 0301 	bic.w	r3, r3, #1
 800ac98:	b2da      	uxtb	r2, r3
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	6a1b      	ldr	r3, [r3, #32]
 800aca4:	6978      	ldr	r0, [r7, #20]
 800aca6:	4798      	blx	r3
}
 800aca8:	bf00      	nop
 800acaa:	3718      	adds	r7, #24
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}
 800acb0:	20007bd8 	.word	0x20007bd8

0800acb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800acbc:	f107 0308 	add.w	r3, r7, #8
 800acc0:	4618      	mov	r0, r3
 800acc2:	f000 f857 	bl	800ad74 <prvGetNextExpireTime>
 800acc6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	4619      	mov	r1, r3
 800accc:	68f8      	ldr	r0, [r7, #12]
 800acce:	f000 f803 	bl	800acd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800acd2:	f000 f8d5 	bl	800ae80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800acd6:	e7f1      	b.n	800acbc <prvTimerTask+0x8>

0800acd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ace2:	f7ff f9f5 	bl	800a0d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ace6:	f107 0308 	add.w	r3, r7, #8
 800acea:	4618      	mov	r0, r3
 800acec:	f000 f866 	bl	800adbc <prvSampleTimeNow>
 800acf0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d130      	bne.n	800ad5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d10a      	bne.n	800ad14 <prvProcessTimerOrBlockTask+0x3c>
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d806      	bhi.n	800ad14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ad06:	f7ff f9f1 	bl	800a0ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ad0a:	68f9      	ldr	r1, [r7, #12]
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f7ff ff83 	bl	800ac18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ad12:	e024      	b.n	800ad5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d008      	beq.n	800ad2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ad1a:	4b13      	ldr	r3, [pc, #76]	; (800ad68 <prvProcessTimerOrBlockTask+0x90>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d101      	bne.n	800ad28 <prvProcessTimerOrBlockTask+0x50>
 800ad24:	2301      	movs	r3, #1
 800ad26:	e000      	b.n	800ad2a <prvProcessTimerOrBlockTask+0x52>
 800ad28:	2300      	movs	r3, #0
 800ad2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ad2c:	4b0f      	ldr	r3, [pc, #60]	; (800ad6c <prvProcessTimerOrBlockTask+0x94>)
 800ad2e:	6818      	ldr	r0, [r3, #0]
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	1ad3      	subs	r3, r2, r3
 800ad36:	683a      	ldr	r2, [r7, #0]
 800ad38:	4619      	mov	r1, r3
 800ad3a:	f7fe ff2b 	bl	8009b94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ad3e:	f7ff f9d5 	bl	800a0ec <xTaskResumeAll>
 800ad42:	4603      	mov	r3, r0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d10a      	bne.n	800ad5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ad48:	4b09      	ldr	r3, [pc, #36]	; (800ad70 <prvProcessTimerOrBlockTask+0x98>)
 800ad4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad4e:	601a      	str	r2, [r3, #0]
 800ad50:	f3bf 8f4f 	dsb	sy
 800ad54:	f3bf 8f6f 	isb	sy
}
 800ad58:	e001      	b.n	800ad5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ad5a:	f7ff f9c7 	bl	800a0ec <xTaskResumeAll>
}
 800ad5e:	bf00      	nop
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	20007bdc 	.word	0x20007bdc
 800ad6c:	20007be0 	.word	0x20007be0
 800ad70:	e000ed04 	.word	0xe000ed04

0800ad74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ad74:	b480      	push	{r7}
 800ad76:	b085      	sub	sp, #20
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ad7c:	4b0e      	ldr	r3, [pc, #56]	; (800adb8 <prvGetNextExpireTime+0x44>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d101      	bne.n	800ad8a <prvGetNextExpireTime+0x16>
 800ad86:	2201      	movs	r2, #1
 800ad88:	e000      	b.n	800ad8c <prvGetNextExpireTime+0x18>
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d105      	bne.n	800ada4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad98:	4b07      	ldr	r3, [pc, #28]	; (800adb8 <prvGetNextExpireTime+0x44>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	60fb      	str	r3, [r7, #12]
 800ada2:	e001      	b.n	800ada8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ada4:	2300      	movs	r3, #0
 800ada6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ada8:	68fb      	ldr	r3, [r7, #12]
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3714      	adds	r7, #20
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr
 800adb6:	bf00      	nop
 800adb8:	20007bd8 	.word	0x20007bd8

0800adbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800adc4:	f7ff fa32 	bl	800a22c <xTaskGetTickCount>
 800adc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800adca:	4b0b      	ldr	r3, [pc, #44]	; (800adf8 <prvSampleTimeNow+0x3c>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	68fa      	ldr	r2, [r7, #12]
 800add0:	429a      	cmp	r2, r3
 800add2:	d205      	bcs.n	800ade0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800add4:	f000 f93c 	bl	800b050 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2201      	movs	r2, #1
 800addc:	601a      	str	r2, [r3, #0]
 800adde:	e002      	b.n	800ade6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ade6:	4a04      	ldr	r2, [pc, #16]	; (800adf8 <prvSampleTimeNow+0x3c>)
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800adec:	68fb      	ldr	r3, [r7, #12]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3710      	adds	r7, #16
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	20007be8 	.word	0x20007be8

0800adfc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b086      	sub	sp, #24
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	60f8      	str	r0, [r7, #12]
 800ae04:	60b9      	str	r1, [r7, #8]
 800ae06:	607a      	str	r2, [r7, #4]
 800ae08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	68ba      	ldr	r2, [r7, #8]
 800ae12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	68fa      	ldr	r2, [r7, #12]
 800ae18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ae1a:	68ba      	ldr	r2, [r7, #8]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d812      	bhi.n	800ae48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	1ad2      	subs	r2, r2, r3
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	699b      	ldr	r3, [r3, #24]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d302      	bcc.n	800ae36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ae30:	2301      	movs	r3, #1
 800ae32:	617b      	str	r3, [r7, #20]
 800ae34:	e01b      	b.n	800ae6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ae36:	4b10      	ldr	r3, [pc, #64]	; (800ae78 <prvInsertTimerInActiveList+0x7c>)
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	3304      	adds	r3, #4
 800ae3e:	4619      	mov	r1, r3
 800ae40:	4610      	mov	r0, r2
 800ae42:	f7fe f96e 	bl	8009122 <vListInsert>
 800ae46:	e012      	b.n	800ae6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d206      	bcs.n	800ae5e <prvInsertTimerInActiveList+0x62>
 800ae50:	68ba      	ldr	r2, [r7, #8]
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d302      	bcc.n	800ae5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	617b      	str	r3, [r7, #20]
 800ae5c:	e007      	b.n	800ae6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ae5e:	4b07      	ldr	r3, [pc, #28]	; (800ae7c <prvInsertTimerInActiveList+0x80>)
 800ae60:	681a      	ldr	r2, [r3, #0]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	3304      	adds	r3, #4
 800ae66:	4619      	mov	r1, r3
 800ae68:	4610      	mov	r0, r2
 800ae6a:	f7fe f95a 	bl	8009122 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ae6e:	697b      	ldr	r3, [r7, #20]
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3718      	adds	r7, #24
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	20007bdc 	.word	0x20007bdc
 800ae7c:	20007bd8 	.word	0x20007bd8

0800ae80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b08e      	sub	sp, #56	; 0x38
 800ae84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ae86:	e0d0      	b.n	800b02a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	da1a      	bge.n	800aec4 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ae8e:	1d3b      	adds	r3, r7, #4
 800ae90:	3304      	adds	r3, #4
 800ae92:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ae94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d10c      	bne.n	800aeb4 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800ae9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9e:	b672      	cpsid	i
 800aea0:	f383 8811 	msr	BASEPRI, r3
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	b662      	cpsie	i
 800aeae:	61fb      	str	r3, [r7, #28]
}
 800aeb0:	bf00      	nop
 800aeb2:	e7fe      	b.n	800aeb2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aeb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aeba:	6850      	ldr	r0, [r2, #4]
 800aebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aebe:	6892      	ldr	r2, [r2, #8]
 800aec0:	4611      	mov	r1, r2
 800aec2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	f2c0 80af 	blt.w	800b02a <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aed2:	695b      	ldr	r3, [r3, #20]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d004      	beq.n	800aee2 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeda:	3304      	adds	r3, #4
 800aedc:	4618      	mov	r0, r3
 800aede:	f7fe f959 	bl	8009194 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aee2:	463b      	mov	r3, r7
 800aee4:	4618      	mov	r0, r3
 800aee6:	f7ff ff69 	bl	800adbc <prvSampleTimeNow>
 800aeea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2b09      	cmp	r3, #9
 800aef0:	f200 809a 	bhi.w	800b028 <prvProcessReceivedCommands+0x1a8>
 800aef4:	a201      	add	r2, pc, #4	; (adr r2, 800aefc <prvProcessReceivedCommands+0x7c>)
 800aef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aefa:	bf00      	nop
 800aefc:	0800af25 	.word	0x0800af25
 800af00:	0800af25 	.word	0x0800af25
 800af04:	0800af25 	.word	0x0800af25
 800af08:	0800af9d 	.word	0x0800af9d
 800af0c:	0800afb1 	.word	0x0800afb1
 800af10:	0800afff 	.word	0x0800afff
 800af14:	0800af25 	.word	0x0800af25
 800af18:	0800af25 	.word	0x0800af25
 800af1c:	0800af9d 	.word	0x0800af9d
 800af20:	0800afb1 	.word	0x0800afb1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800af24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af2a:	f043 0301 	orr.w	r3, r3, #1
 800af2e:	b2da      	uxtb	r2, r3
 800af30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3a:	699b      	ldr	r3, [r3, #24]
 800af3c:	18d1      	adds	r1, r2, r3
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af44:	f7ff ff5a 	bl	800adfc <prvInsertTimerInActiveList>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d06d      	beq.n	800b02a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af50:	6a1b      	ldr	r3, [r3, #32]
 800af52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af5c:	f003 0304 	and.w	r3, r3, #4
 800af60:	2b00      	cmp	r3, #0
 800af62:	d062      	beq.n	800b02a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800af64:	68ba      	ldr	r2, [r7, #8]
 800af66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af68:	699b      	ldr	r3, [r3, #24]
 800af6a:	441a      	add	r2, r3
 800af6c:	2300      	movs	r3, #0
 800af6e:	9300      	str	r3, [sp, #0]
 800af70:	2300      	movs	r3, #0
 800af72:	2100      	movs	r1, #0
 800af74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af76:	f7ff fdff 	bl	800ab78 <xTimerGenericCommand>
 800af7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800af7c:	6a3b      	ldr	r3, [r7, #32]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d153      	bne.n	800b02a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800af82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af86:	b672      	cpsid	i
 800af88:	f383 8811 	msr	BASEPRI, r3
 800af8c:	f3bf 8f6f 	isb	sy
 800af90:	f3bf 8f4f 	dsb	sy
 800af94:	b662      	cpsie	i
 800af96:	61bb      	str	r3, [r7, #24]
}
 800af98:	bf00      	nop
 800af9a:	e7fe      	b.n	800af9a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afa2:	f023 0301 	bic.w	r3, r3, #1
 800afa6:	b2da      	uxtb	r2, r3
 800afa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800afae:	e03c      	b.n	800b02a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800afb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afb6:	f043 0301 	orr.w	r3, r3, #1
 800afba:	b2da      	uxtb	r2, r3
 800afbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800afc2:	68ba      	ldr	r2, [r7, #8]
 800afc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800afc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afca:	699b      	ldr	r3, [r3, #24]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d10c      	bne.n	800afea <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800afd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd4:	b672      	cpsid	i
 800afd6:	f383 8811 	msr	BASEPRI, r3
 800afda:	f3bf 8f6f 	isb	sy
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	b662      	cpsie	i
 800afe4:	617b      	str	r3, [r7, #20]
}
 800afe6:	bf00      	nop
 800afe8:	e7fe      	b.n	800afe8 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800afea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afec:	699a      	ldr	r2, [r3, #24]
 800afee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff0:	18d1      	adds	r1, r2, r3
 800aff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aff8:	f7ff ff00 	bl	800adfc <prvInsertTimerInActiveList>
					break;
 800affc:	e015      	b.n	800b02a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800affe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b000:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b004:	f003 0302 	and.w	r3, r3, #2
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d103      	bne.n	800b014 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800b00c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b00e:	f000 fbcb 	bl	800b7a8 <vPortFree>
 800b012:	e00a      	b.n	800b02a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b01a:	f023 0301 	bic.w	r3, r3, #1
 800b01e:	b2da      	uxtb	r2, r3
 800b020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b022:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b026:	e000      	b.n	800b02a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800b028:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b02a:	4b08      	ldr	r3, [pc, #32]	; (800b04c <prvProcessReceivedCommands+0x1cc>)
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	1d39      	adds	r1, r7, #4
 800b030:	2200      	movs	r2, #0
 800b032:	4618      	mov	r0, r3
 800b034:	f7fe fb8e 	bl	8009754 <xQueueReceive>
 800b038:	4603      	mov	r3, r0
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	f47f af24 	bne.w	800ae88 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b040:	bf00      	nop
 800b042:	bf00      	nop
 800b044:	3730      	adds	r7, #48	; 0x30
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	bf00      	nop
 800b04c:	20007be0 	.word	0x20007be0

0800b050 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b088      	sub	sp, #32
 800b054:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b056:	e04a      	b.n	800b0ee <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b058:	4b2e      	ldr	r3, [pc, #184]	; (800b114 <prvSwitchTimerLists+0xc4>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	68db      	ldr	r3, [r3, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b062:	4b2c      	ldr	r3, [pc, #176]	; (800b114 <prvSwitchTimerLists+0xc4>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	68db      	ldr	r3, [r3, #12]
 800b06a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	3304      	adds	r3, #4
 800b070:	4618      	mov	r0, r3
 800b072:	f7fe f88f 	bl	8009194 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	6a1b      	ldr	r3, [r3, #32]
 800b07a:	68f8      	ldr	r0, [r7, #12]
 800b07c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b084:	f003 0304 	and.w	r3, r3, #4
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d030      	beq.n	800b0ee <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	699b      	ldr	r3, [r3, #24]
 800b090:	693a      	ldr	r2, [r7, #16]
 800b092:	4413      	add	r3, r2
 800b094:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b096:	68ba      	ldr	r2, [r7, #8]
 800b098:	693b      	ldr	r3, [r7, #16]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d90e      	bls.n	800b0bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	68ba      	ldr	r2, [r7, #8]
 800b0a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	68fa      	ldr	r2, [r7, #12]
 800b0a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b0aa:	4b1a      	ldr	r3, [pc, #104]	; (800b114 <prvSwitchTimerLists+0xc4>)
 800b0ac:	681a      	ldr	r2, [r3, #0]
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	3304      	adds	r3, #4
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	4610      	mov	r0, r2
 800b0b6:	f7fe f834 	bl	8009122 <vListInsert>
 800b0ba:	e018      	b.n	800b0ee <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b0bc:	2300      	movs	r3, #0
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	693a      	ldr	r2, [r7, #16]
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	f7ff fd56 	bl	800ab78 <xTimerGenericCommand>
 800b0cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d10c      	bne.n	800b0ee <prvSwitchTimerLists+0x9e>
	__asm volatile
 800b0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d8:	b672      	cpsid	i
 800b0da:	f383 8811 	msr	BASEPRI, r3
 800b0de:	f3bf 8f6f 	isb	sy
 800b0e2:	f3bf 8f4f 	dsb	sy
 800b0e6:	b662      	cpsie	i
 800b0e8:	603b      	str	r3, [r7, #0]
}
 800b0ea:	bf00      	nop
 800b0ec:	e7fe      	b.n	800b0ec <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b0ee:	4b09      	ldr	r3, [pc, #36]	; (800b114 <prvSwitchTimerLists+0xc4>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d1af      	bne.n	800b058 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b0f8:	4b06      	ldr	r3, [pc, #24]	; (800b114 <prvSwitchTimerLists+0xc4>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b0fe:	4b06      	ldr	r3, [pc, #24]	; (800b118 <prvSwitchTimerLists+0xc8>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a04      	ldr	r2, [pc, #16]	; (800b114 <prvSwitchTimerLists+0xc4>)
 800b104:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b106:	4a04      	ldr	r2, [pc, #16]	; (800b118 <prvSwitchTimerLists+0xc8>)
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	6013      	str	r3, [r2, #0]
}
 800b10c:	bf00      	nop
 800b10e:	3718      	adds	r7, #24
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}
 800b114:	20007bd8 	.word	0x20007bd8
 800b118:	20007bdc 	.word	0x20007bdc

0800b11c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b122:	f000 f94b 	bl	800b3bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b126:	4b15      	ldr	r3, [pc, #84]	; (800b17c <prvCheckForValidListAndQueue+0x60>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d120      	bne.n	800b170 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b12e:	4814      	ldr	r0, [pc, #80]	; (800b180 <prvCheckForValidListAndQueue+0x64>)
 800b130:	f7fd ffa6 	bl	8009080 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b134:	4813      	ldr	r0, [pc, #76]	; (800b184 <prvCheckForValidListAndQueue+0x68>)
 800b136:	f7fd ffa3 	bl	8009080 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b13a:	4b13      	ldr	r3, [pc, #76]	; (800b188 <prvCheckForValidListAndQueue+0x6c>)
 800b13c:	4a10      	ldr	r2, [pc, #64]	; (800b180 <prvCheckForValidListAndQueue+0x64>)
 800b13e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b140:	4b12      	ldr	r3, [pc, #72]	; (800b18c <prvCheckForValidListAndQueue+0x70>)
 800b142:	4a10      	ldr	r2, [pc, #64]	; (800b184 <prvCheckForValidListAndQueue+0x68>)
 800b144:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b146:	2300      	movs	r3, #0
 800b148:	9300      	str	r3, [sp, #0]
 800b14a:	4b11      	ldr	r3, [pc, #68]	; (800b190 <prvCheckForValidListAndQueue+0x74>)
 800b14c:	4a11      	ldr	r2, [pc, #68]	; (800b194 <prvCheckForValidListAndQueue+0x78>)
 800b14e:	2110      	movs	r1, #16
 800b150:	200a      	movs	r0, #10
 800b152:	f7fe f8b3 	bl	80092bc <xQueueGenericCreateStatic>
 800b156:	4603      	mov	r3, r0
 800b158:	4a08      	ldr	r2, [pc, #32]	; (800b17c <prvCheckForValidListAndQueue+0x60>)
 800b15a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b15c:	4b07      	ldr	r3, [pc, #28]	; (800b17c <prvCheckForValidListAndQueue+0x60>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d005      	beq.n	800b170 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b164:	4b05      	ldr	r3, [pc, #20]	; (800b17c <prvCheckForValidListAndQueue+0x60>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	490b      	ldr	r1, [pc, #44]	; (800b198 <prvCheckForValidListAndQueue+0x7c>)
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7fe fce8 	bl	8009b40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b170:	f000 f958 	bl	800b424 <vPortExitCritical>
}
 800b174:	bf00      	nop
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	20007be0 	.word	0x20007be0
 800b180:	20007bb0 	.word	0x20007bb0
 800b184:	20007bc4 	.word	0x20007bc4
 800b188:	20007bd8 	.word	0x20007bd8
 800b18c:	20007bdc 	.word	0x20007bdc
 800b190:	20007c8c 	.word	0x20007c8c
 800b194:	20007bec 	.word	0x20007bec
 800b198:	0801d748 	.word	0x0801d748

0800b19c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b19c:	b480      	push	{r7}
 800b19e:	b085      	sub	sp, #20
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	60f8      	str	r0, [r7, #12]
 800b1a4:	60b9      	str	r1, [r7, #8]
 800b1a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	3b04      	subs	r3, #4
 800b1ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b1b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	3b04      	subs	r3, #4
 800b1ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	f023 0201 	bic.w	r2, r3, #1
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	3b04      	subs	r3, #4
 800b1ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b1cc:	4a0c      	ldr	r2, [pc, #48]	; (800b200 <pxPortInitialiseStack+0x64>)
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	3b14      	subs	r3, #20
 800b1d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	3b04      	subs	r3, #4
 800b1e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f06f 0202 	mvn.w	r2, #2
 800b1ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	3b20      	subs	r3, #32
 800b1f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3714      	adds	r7, #20
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fe:	4770      	bx	lr
 800b200:	0800b205 	.word	0x0800b205

0800b204 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b204:	b480      	push	{r7}
 800b206:	b085      	sub	sp, #20
 800b208:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b20a:	2300      	movs	r3, #0
 800b20c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b20e:	4b14      	ldr	r3, [pc, #80]	; (800b260 <prvTaskExitError+0x5c>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b216:	d00c      	beq.n	800b232 <prvTaskExitError+0x2e>
	__asm volatile
 800b218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21c:	b672      	cpsid	i
 800b21e:	f383 8811 	msr	BASEPRI, r3
 800b222:	f3bf 8f6f 	isb	sy
 800b226:	f3bf 8f4f 	dsb	sy
 800b22a:	b662      	cpsie	i
 800b22c:	60fb      	str	r3, [r7, #12]
}
 800b22e:	bf00      	nop
 800b230:	e7fe      	b.n	800b230 <prvTaskExitError+0x2c>
	__asm volatile
 800b232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b236:	b672      	cpsid	i
 800b238:	f383 8811 	msr	BASEPRI, r3
 800b23c:	f3bf 8f6f 	isb	sy
 800b240:	f3bf 8f4f 	dsb	sy
 800b244:	b662      	cpsie	i
 800b246:	60bb      	str	r3, [r7, #8]
}
 800b248:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b24a:	bf00      	nop
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d0fc      	beq.n	800b24c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b252:	bf00      	nop
 800b254:	bf00      	nop
 800b256:	3714      	adds	r7, #20
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr
 800b260:	20000010 	.word	0x20000010
	...

0800b270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b270:	4b07      	ldr	r3, [pc, #28]	; (800b290 <pxCurrentTCBConst2>)
 800b272:	6819      	ldr	r1, [r3, #0]
 800b274:	6808      	ldr	r0, [r1, #0]
 800b276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b27a:	f380 8809 	msr	PSP, r0
 800b27e:	f3bf 8f6f 	isb	sy
 800b282:	f04f 0000 	mov.w	r0, #0
 800b286:	f380 8811 	msr	BASEPRI, r0
 800b28a:	4770      	bx	lr
 800b28c:	f3af 8000 	nop.w

0800b290 <pxCurrentTCBConst2>:
 800b290:	200076b0 	.word	0x200076b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b294:	bf00      	nop
 800b296:	bf00      	nop

0800b298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b298:	4808      	ldr	r0, [pc, #32]	; (800b2bc <prvPortStartFirstTask+0x24>)
 800b29a:	6800      	ldr	r0, [r0, #0]
 800b29c:	6800      	ldr	r0, [r0, #0]
 800b29e:	f380 8808 	msr	MSP, r0
 800b2a2:	f04f 0000 	mov.w	r0, #0
 800b2a6:	f380 8814 	msr	CONTROL, r0
 800b2aa:	b662      	cpsie	i
 800b2ac:	b661      	cpsie	f
 800b2ae:	f3bf 8f4f 	dsb	sy
 800b2b2:	f3bf 8f6f 	isb	sy
 800b2b6:	df00      	svc	0
 800b2b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b2ba:	bf00      	nop
 800b2bc:	e000ed08 	.word	0xe000ed08

0800b2c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b2c6:	4b37      	ldr	r3, [pc, #220]	; (800b3a4 <xPortStartScheduler+0xe4>)
 800b2c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	781b      	ldrb	r3, [r3, #0]
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	22ff      	movs	r2, #255	; 0xff
 800b2d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b2e0:	78fb      	ldrb	r3, [r7, #3]
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b2e8:	b2da      	uxtb	r2, r3
 800b2ea:	4b2f      	ldr	r3, [pc, #188]	; (800b3a8 <xPortStartScheduler+0xe8>)
 800b2ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b2ee:	4b2f      	ldr	r3, [pc, #188]	; (800b3ac <xPortStartScheduler+0xec>)
 800b2f0:	2207      	movs	r2, #7
 800b2f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b2f4:	e009      	b.n	800b30a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b2f6:	4b2d      	ldr	r3, [pc, #180]	; (800b3ac <xPortStartScheduler+0xec>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	3b01      	subs	r3, #1
 800b2fc:	4a2b      	ldr	r2, [pc, #172]	; (800b3ac <xPortStartScheduler+0xec>)
 800b2fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b300:	78fb      	ldrb	r3, [r7, #3]
 800b302:	b2db      	uxtb	r3, r3
 800b304:	005b      	lsls	r3, r3, #1
 800b306:	b2db      	uxtb	r3, r3
 800b308:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b30a:	78fb      	ldrb	r3, [r7, #3]
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b312:	2b80      	cmp	r3, #128	; 0x80
 800b314:	d0ef      	beq.n	800b2f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b316:	4b25      	ldr	r3, [pc, #148]	; (800b3ac <xPortStartScheduler+0xec>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f1c3 0307 	rsb	r3, r3, #7
 800b31e:	2b04      	cmp	r3, #4
 800b320:	d00c      	beq.n	800b33c <xPortStartScheduler+0x7c>
	__asm volatile
 800b322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b326:	b672      	cpsid	i
 800b328:	f383 8811 	msr	BASEPRI, r3
 800b32c:	f3bf 8f6f 	isb	sy
 800b330:	f3bf 8f4f 	dsb	sy
 800b334:	b662      	cpsie	i
 800b336:	60bb      	str	r3, [r7, #8]
}
 800b338:	bf00      	nop
 800b33a:	e7fe      	b.n	800b33a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b33c:	4b1b      	ldr	r3, [pc, #108]	; (800b3ac <xPortStartScheduler+0xec>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	021b      	lsls	r3, r3, #8
 800b342:	4a1a      	ldr	r2, [pc, #104]	; (800b3ac <xPortStartScheduler+0xec>)
 800b344:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b346:	4b19      	ldr	r3, [pc, #100]	; (800b3ac <xPortStartScheduler+0xec>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b34e:	4a17      	ldr	r2, [pc, #92]	; (800b3ac <xPortStartScheduler+0xec>)
 800b350:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	b2da      	uxtb	r2, r3
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b35a:	4b15      	ldr	r3, [pc, #84]	; (800b3b0 <xPortStartScheduler+0xf0>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a14      	ldr	r2, [pc, #80]	; (800b3b0 <xPortStartScheduler+0xf0>)
 800b360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b364:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b366:	4b12      	ldr	r3, [pc, #72]	; (800b3b0 <xPortStartScheduler+0xf0>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4a11      	ldr	r2, [pc, #68]	; (800b3b0 <xPortStartScheduler+0xf0>)
 800b36c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b370:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b372:	f000 f8dd 	bl	800b530 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b376:	4b0f      	ldr	r3, [pc, #60]	; (800b3b4 <xPortStartScheduler+0xf4>)
 800b378:	2200      	movs	r2, #0
 800b37a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b37c:	f000 f8fc 	bl	800b578 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b380:	4b0d      	ldr	r3, [pc, #52]	; (800b3b8 <xPortStartScheduler+0xf8>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4a0c      	ldr	r2, [pc, #48]	; (800b3b8 <xPortStartScheduler+0xf8>)
 800b386:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b38a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b38c:	f7ff ff84 	bl	800b298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b390:	f7ff f818 	bl	800a3c4 <vTaskSwitchContext>
	prvTaskExitError();
 800b394:	f7ff ff36 	bl	800b204 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b398:	2300      	movs	r3, #0
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3710      	adds	r7, #16
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	e000e400 	.word	0xe000e400
 800b3a8:	20007cdc 	.word	0x20007cdc
 800b3ac:	20007ce0 	.word	0x20007ce0
 800b3b0:	e000ed20 	.word	0xe000ed20
 800b3b4:	20000010 	.word	0x20000010
 800b3b8:	e000ef34 	.word	0xe000ef34

0800b3bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
	__asm volatile
 800b3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c6:	b672      	cpsid	i
 800b3c8:	f383 8811 	msr	BASEPRI, r3
 800b3cc:	f3bf 8f6f 	isb	sy
 800b3d0:	f3bf 8f4f 	dsb	sy
 800b3d4:	b662      	cpsie	i
 800b3d6:	607b      	str	r3, [r7, #4]
}
 800b3d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b3da:	4b10      	ldr	r3, [pc, #64]	; (800b41c <vPortEnterCritical+0x60>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	3301      	adds	r3, #1
 800b3e0:	4a0e      	ldr	r2, [pc, #56]	; (800b41c <vPortEnterCritical+0x60>)
 800b3e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b3e4:	4b0d      	ldr	r3, [pc, #52]	; (800b41c <vPortEnterCritical+0x60>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d111      	bne.n	800b410 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b3ec:	4b0c      	ldr	r3, [pc, #48]	; (800b420 <vPortEnterCritical+0x64>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	b2db      	uxtb	r3, r3
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d00c      	beq.n	800b410 <vPortEnterCritical+0x54>
	__asm volatile
 800b3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fa:	b672      	cpsid	i
 800b3fc:	f383 8811 	msr	BASEPRI, r3
 800b400:	f3bf 8f6f 	isb	sy
 800b404:	f3bf 8f4f 	dsb	sy
 800b408:	b662      	cpsie	i
 800b40a:	603b      	str	r3, [r7, #0]
}
 800b40c:	bf00      	nop
 800b40e:	e7fe      	b.n	800b40e <vPortEnterCritical+0x52>
	}
}
 800b410:	bf00      	nop
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr
 800b41c:	20000010 	.word	0x20000010
 800b420:	e000ed04 	.word	0xe000ed04

0800b424 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b42a:	4b13      	ldr	r3, [pc, #76]	; (800b478 <vPortExitCritical+0x54>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d10c      	bne.n	800b44c <vPortExitCritical+0x28>
	__asm volatile
 800b432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b436:	b672      	cpsid	i
 800b438:	f383 8811 	msr	BASEPRI, r3
 800b43c:	f3bf 8f6f 	isb	sy
 800b440:	f3bf 8f4f 	dsb	sy
 800b444:	b662      	cpsie	i
 800b446:	607b      	str	r3, [r7, #4]
}
 800b448:	bf00      	nop
 800b44a:	e7fe      	b.n	800b44a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800b44c:	4b0a      	ldr	r3, [pc, #40]	; (800b478 <vPortExitCritical+0x54>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	3b01      	subs	r3, #1
 800b452:	4a09      	ldr	r2, [pc, #36]	; (800b478 <vPortExitCritical+0x54>)
 800b454:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b456:	4b08      	ldr	r3, [pc, #32]	; (800b478 <vPortExitCritical+0x54>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d105      	bne.n	800b46a <vPortExitCritical+0x46>
 800b45e:	2300      	movs	r3, #0
 800b460:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	f383 8811 	msr	BASEPRI, r3
}
 800b468:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b46a:	bf00      	nop
 800b46c:	370c      	adds	r7, #12
 800b46e:	46bd      	mov	sp, r7
 800b470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b474:	4770      	bx	lr
 800b476:	bf00      	nop
 800b478:	20000010 	.word	0x20000010
 800b47c:	00000000 	.word	0x00000000

0800b480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b480:	f3ef 8009 	mrs	r0, PSP
 800b484:	f3bf 8f6f 	isb	sy
 800b488:	4b15      	ldr	r3, [pc, #84]	; (800b4e0 <pxCurrentTCBConst>)
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	f01e 0f10 	tst.w	lr, #16
 800b490:	bf08      	it	eq
 800b492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b49a:	6010      	str	r0, [r2, #0]
 800b49c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b4a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b4a4:	b672      	cpsid	i
 800b4a6:	f380 8811 	msr	BASEPRI, r0
 800b4aa:	f3bf 8f4f 	dsb	sy
 800b4ae:	f3bf 8f6f 	isb	sy
 800b4b2:	b662      	cpsie	i
 800b4b4:	f7fe ff86 	bl	800a3c4 <vTaskSwitchContext>
 800b4b8:	f04f 0000 	mov.w	r0, #0
 800b4bc:	f380 8811 	msr	BASEPRI, r0
 800b4c0:	bc09      	pop	{r0, r3}
 800b4c2:	6819      	ldr	r1, [r3, #0]
 800b4c4:	6808      	ldr	r0, [r1, #0]
 800b4c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ca:	f01e 0f10 	tst.w	lr, #16
 800b4ce:	bf08      	it	eq
 800b4d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b4d4:	f380 8809 	msr	PSP, r0
 800b4d8:	f3bf 8f6f 	isb	sy
 800b4dc:	4770      	bx	lr
 800b4de:	bf00      	nop

0800b4e0 <pxCurrentTCBConst>:
 800b4e0:	200076b0 	.word	0x200076b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b4e4:	bf00      	nop
 800b4e6:	bf00      	nop

0800b4e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
	__asm volatile
 800b4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f2:	b672      	cpsid	i
 800b4f4:	f383 8811 	msr	BASEPRI, r3
 800b4f8:	f3bf 8f6f 	isb	sy
 800b4fc:	f3bf 8f4f 	dsb	sy
 800b500:	b662      	cpsie	i
 800b502:	607b      	str	r3, [r7, #4]
}
 800b504:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b506:	f7fe fea1 	bl	800a24c <xTaskIncrementTick>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d003      	beq.n	800b518 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b510:	4b06      	ldr	r3, [pc, #24]	; (800b52c <SysTick_Handler+0x44>)
 800b512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b516:	601a      	str	r2, [r3, #0]
 800b518:	2300      	movs	r3, #0
 800b51a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	f383 8811 	msr	BASEPRI, r3
}
 800b522:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b524:	bf00      	nop
 800b526:	3708      	adds	r7, #8
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	e000ed04 	.word	0xe000ed04

0800b530 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b530:	b480      	push	{r7}
 800b532:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b534:	4b0b      	ldr	r3, [pc, #44]	; (800b564 <vPortSetupTimerInterrupt+0x34>)
 800b536:	2200      	movs	r2, #0
 800b538:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b53a:	4b0b      	ldr	r3, [pc, #44]	; (800b568 <vPortSetupTimerInterrupt+0x38>)
 800b53c:	2200      	movs	r2, #0
 800b53e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b540:	4b0a      	ldr	r3, [pc, #40]	; (800b56c <vPortSetupTimerInterrupt+0x3c>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a0a      	ldr	r2, [pc, #40]	; (800b570 <vPortSetupTimerInterrupt+0x40>)
 800b546:	fba2 2303 	umull	r2, r3, r2, r3
 800b54a:	099b      	lsrs	r3, r3, #6
 800b54c:	4a09      	ldr	r2, [pc, #36]	; (800b574 <vPortSetupTimerInterrupt+0x44>)
 800b54e:	3b01      	subs	r3, #1
 800b550:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b552:	4b04      	ldr	r3, [pc, #16]	; (800b564 <vPortSetupTimerInterrupt+0x34>)
 800b554:	2207      	movs	r2, #7
 800b556:	601a      	str	r2, [r3, #0]
}
 800b558:	bf00      	nop
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr
 800b562:	bf00      	nop
 800b564:	e000e010 	.word	0xe000e010
 800b568:	e000e018 	.word	0xe000e018
 800b56c:	20000004 	.word	0x20000004
 800b570:	10624dd3 	.word	0x10624dd3
 800b574:	e000e014 	.word	0xe000e014

0800b578 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b578:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b588 <vPortEnableVFP+0x10>
 800b57c:	6801      	ldr	r1, [r0, #0]
 800b57e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b582:	6001      	str	r1, [r0, #0]
 800b584:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b586:	bf00      	nop
 800b588:	e000ed88 	.word	0xe000ed88

0800b58c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b58c:	b480      	push	{r7}
 800b58e:	b085      	sub	sp, #20
 800b590:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b592:	f3ef 8305 	mrs	r3, IPSR
 800b596:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2b0f      	cmp	r3, #15
 800b59c:	d916      	bls.n	800b5cc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b59e:	4a19      	ldr	r2, [pc, #100]	; (800b604 <vPortValidateInterruptPriority+0x78>)
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b5a8:	4b17      	ldr	r3, [pc, #92]	; (800b608 <vPortValidateInterruptPriority+0x7c>)
 800b5aa:	781b      	ldrb	r3, [r3, #0]
 800b5ac:	7afa      	ldrb	r2, [r7, #11]
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d20c      	bcs.n	800b5cc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800b5b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b6:	b672      	cpsid	i
 800b5b8:	f383 8811 	msr	BASEPRI, r3
 800b5bc:	f3bf 8f6f 	isb	sy
 800b5c0:	f3bf 8f4f 	dsb	sy
 800b5c4:	b662      	cpsie	i
 800b5c6:	607b      	str	r3, [r7, #4]
}
 800b5c8:	bf00      	nop
 800b5ca:	e7fe      	b.n	800b5ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b5cc:	4b0f      	ldr	r3, [pc, #60]	; (800b60c <vPortValidateInterruptPriority+0x80>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b5d4:	4b0e      	ldr	r3, [pc, #56]	; (800b610 <vPortValidateInterruptPriority+0x84>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d90c      	bls.n	800b5f6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800b5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e0:	b672      	cpsid	i
 800b5e2:	f383 8811 	msr	BASEPRI, r3
 800b5e6:	f3bf 8f6f 	isb	sy
 800b5ea:	f3bf 8f4f 	dsb	sy
 800b5ee:	b662      	cpsie	i
 800b5f0:	603b      	str	r3, [r7, #0]
}
 800b5f2:	bf00      	nop
 800b5f4:	e7fe      	b.n	800b5f4 <vPortValidateInterruptPriority+0x68>
	}
 800b5f6:	bf00      	nop
 800b5f8:	3714      	adds	r7, #20
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr
 800b602:	bf00      	nop
 800b604:	e000e3f0 	.word	0xe000e3f0
 800b608:	20007cdc 	.word	0x20007cdc
 800b60c:	e000ed0c 	.word	0xe000ed0c
 800b610:	20007ce0 	.word	0x20007ce0

0800b614 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b08a      	sub	sp, #40	; 0x28
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b61c:	2300      	movs	r3, #0
 800b61e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b620:	f7fe fd56 	bl	800a0d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b624:	4b5b      	ldr	r3, [pc, #364]	; (800b794 <pvPortMalloc+0x180>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d101      	bne.n	800b630 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b62c:	f000 f91a 	bl	800b864 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b630:	4b59      	ldr	r3, [pc, #356]	; (800b798 <pvPortMalloc+0x184>)
 800b632:	681a      	ldr	r2, [r3, #0]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	4013      	ands	r3, r2
 800b638:	2b00      	cmp	r3, #0
 800b63a:	f040 8092 	bne.w	800b762 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d01f      	beq.n	800b684 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800b644:	2208      	movs	r2, #8
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	4413      	add	r3, r2
 800b64a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f003 0307 	and.w	r3, r3, #7
 800b652:	2b00      	cmp	r3, #0
 800b654:	d016      	beq.n	800b684 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f023 0307 	bic.w	r3, r3, #7
 800b65c:	3308      	adds	r3, #8
 800b65e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f003 0307 	and.w	r3, r3, #7
 800b666:	2b00      	cmp	r3, #0
 800b668:	d00c      	beq.n	800b684 <pvPortMalloc+0x70>
	__asm volatile
 800b66a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b66e:	b672      	cpsid	i
 800b670:	f383 8811 	msr	BASEPRI, r3
 800b674:	f3bf 8f6f 	isb	sy
 800b678:	f3bf 8f4f 	dsb	sy
 800b67c:	b662      	cpsie	i
 800b67e:	617b      	str	r3, [r7, #20]
}
 800b680:	bf00      	nop
 800b682:	e7fe      	b.n	800b682 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d06b      	beq.n	800b762 <pvPortMalloc+0x14e>
 800b68a:	4b44      	ldr	r3, [pc, #272]	; (800b79c <pvPortMalloc+0x188>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	429a      	cmp	r2, r3
 800b692:	d866      	bhi.n	800b762 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b694:	4b42      	ldr	r3, [pc, #264]	; (800b7a0 <pvPortMalloc+0x18c>)
 800b696:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b698:	4b41      	ldr	r3, [pc, #260]	; (800b7a0 <pvPortMalloc+0x18c>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b69e:	e004      	b.n	800b6aa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d903      	bls.n	800b6bc <pvPortMalloc+0xa8>
 800b6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d1f1      	bne.n	800b6a0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b6bc:	4b35      	ldr	r3, [pc, #212]	; (800b794 <pvPortMalloc+0x180>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d04d      	beq.n	800b762 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b6c6:	6a3b      	ldr	r3, [r7, #32]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	2208      	movs	r2, #8
 800b6cc:	4413      	add	r3, r2
 800b6ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	6a3b      	ldr	r3, [r7, #32]
 800b6d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6da:	685a      	ldr	r2, [r3, #4]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	1ad2      	subs	r2, r2, r3
 800b6e0:	2308      	movs	r3, #8
 800b6e2:	005b      	lsls	r3, r3, #1
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d921      	bls.n	800b72c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b6e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	4413      	add	r3, r2
 800b6ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6f0:	69bb      	ldr	r3, [r7, #24]
 800b6f2:	f003 0307 	and.w	r3, r3, #7
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d00c      	beq.n	800b714 <pvPortMalloc+0x100>
	__asm volatile
 800b6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6fe:	b672      	cpsid	i
 800b700:	f383 8811 	msr	BASEPRI, r3
 800b704:	f3bf 8f6f 	isb	sy
 800b708:	f3bf 8f4f 	dsb	sy
 800b70c:	b662      	cpsie	i
 800b70e:	613b      	str	r3, [r7, #16]
}
 800b710:	bf00      	nop
 800b712:	e7fe      	b.n	800b712 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b716:	685a      	ldr	r2, [r3, #4]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	1ad2      	subs	r2, r2, r3
 800b71c:	69bb      	ldr	r3, [r7, #24]
 800b71e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b726:	69b8      	ldr	r0, [r7, #24]
 800b728:	f000 f8fe 	bl	800b928 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b72c:	4b1b      	ldr	r3, [pc, #108]	; (800b79c <pvPortMalloc+0x188>)
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	1ad3      	subs	r3, r2, r3
 800b736:	4a19      	ldr	r2, [pc, #100]	; (800b79c <pvPortMalloc+0x188>)
 800b738:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b73a:	4b18      	ldr	r3, [pc, #96]	; (800b79c <pvPortMalloc+0x188>)
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	4b19      	ldr	r3, [pc, #100]	; (800b7a4 <pvPortMalloc+0x190>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	429a      	cmp	r2, r3
 800b744:	d203      	bcs.n	800b74e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b746:	4b15      	ldr	r3, [pc, #84]	; (800b79c <pvPortMalloc+0x188>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4a16      	ldr	r2, [pc, #88]	; (800b7a4 <pvPortMalloc+0x190>)
 800b74c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b750:	685a      	ldr	r2, [r3, #4]
 800b752:	4b11      	ldr	r3, [pc, #68]	; (800b798 <pvPortMalloc+0x184>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	431a      	orrs	r2, r3
 800b758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b75a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b75e:	2200      	movs	r2, #0
 800b760:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b762:	f7fe fcc3 	bl	800a0ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b766:	69fb      	ldr	r3, [r7, #28]
 800b768:	f003 0307 	and.w	r3, r3, #7
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d00c      	beq.n	800b78a <pvPortMalloc+0x176>
	__asm volatile
 800b770:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b774:	b672      	cpsid	i
 800b776:	f383 8811 	msr	BASEPRI, r3
 800b77a:	f3bf 8f6f 	isb	sy
 800b77e:	f3bf 8f4f 	dsb	sy
 800b782:	b662      	cpsie	i
 800b784:	60fb      	str	r3, [r7, #12]
}
 800b786:	bf00      	nop
 800b788:	e7fe      	b.n	800b788 <pvPortMalloc+0x174>
	return pvReturn;
 800b78a:	69fb      	ldr	r3, [r7, #28]
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3728      	adds	r7, #40	; 0x28
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}
 800b794:	2000b8ec 	.word	0x2000b8ec
 800b798:	2000b8f8 	.word	0x2000b8f8
 800b79c:	2000b8f0 	.word	0x2000b8f0
 800b7a0:	2000b8e4 	.word	0x2000b8e4
 800b7a4:	2000b8f4 	.word	0x2000b8f4

0800b7a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b086      	sub	sp, #24
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d04c      	beq.n	800b854 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b7ba:	2308      	movs	r3, #8
 800b7bc:	425b      	negs	r3, r3
 800b7be:	697a      	ldr	r2, [r7, #20]
 800b7c0:	4413      	add	r3, r2
 800b7c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	685a      	ldr	r2, [r3, #4]
 800b7cc:	4b23      	ldr	r3, [pc, #140]	; (800b85c <vPortFree+0xb4>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4013      	ands	r3, r2
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d10c      	bne.n	800b7f0 <vPortFree+0x48>
	__asm volatile
 800b7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7da:	b672      	cpsid	i
 800b7dc:	f383 8811 	msr	BASEPRI, r3
 800b7e0:	f3bf 8f6f 	isb	sy
 800b7e4:	f3bf 8f4f 	dsb	sy
 800b7e8:	b662      	cpsie	i
 800b7ea:	60fb      	str	r3, [r7, #12]
}
 800b7ec:	bf00      	nop
 800b7ee:	e7fe      	b.n	800b7ee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d00c      	beq.n	800b812 <vPortFree+0x6a>
	__asm volatile
 800b7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7fc:	b672      	cpsid	i
 800b7fe:	f383 8811 	msr	BASEPRI, r3
 800b802:	f3bf 8f6f 	isb	sy
 800b806:	f3bf 8f4f 	dsb	sy
 800b80a:	b662      	cpsie	i
 800b80c:	60bb      	str	r3, [r7, #8]
}
 800b80e:	bf00      	nop
 800b810:	e7fe      	b.n	800b810 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	685a      	ldr	r2, [r3, #4]
 800b816:	4b11      	ldr	r3, [pc, #68]	; (800b85c <vPortFree+0xb4>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	4013      	ands	r3, r2
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d019      	beq.n	800b854 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d115      	bne.n	800b854 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	685a      	ldr	r2, [r3, #4]
 800b82c:	4b0b      	ldr	r3, [pc, #44]	; (800b85c <vPortFree+0xb4>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	43db      	mvns	r3, r3
 800b832:	401a      	ands	r2, r3
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b838:	f7fe fc4a 	bl	800a0d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	685a      	ldr	r2, [r3, #4]
 800b840:	4b07      	ldr	r3, [pc, #28]	; (800b860 <vPortFree+0xb8>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4413      	add	r3, r2
 800b846:	4a06      	ldr	r2, [pc, #24]	; (800b860 <vPortFree+0xb8>)
 800b848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b84a:	6938      	ldr	r0, [r7, #16]
 800b84c:	f000 f86c 	bl	800b928 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b850:	f7fe fc4c 	bl	800a0ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b854:	bf00      	nop
 800b856:	3718      	adds	r7, #24
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}
 800b85c:	2000b8f8 	.word	0x2000b8f8
 800b860:	2000b8f0 	.word	0x2000b8f0

0800b864 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b864:	b480      	push	{r7}
 800b866:	b085      	sub	sp, #20
 800b868:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b86a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b86e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b870:	4b27      	ldr	r3, [pc, #156]	; (800b910 <prvHeapInit+0xac>)
 800b872:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f003 0307 	and.w	r3, r3, #7
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00c      	beq.n	800b898 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	3307      	adds	r3, #7
 800b882:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f023 0307 	bic.w	r3, r3, #7
 800b88a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b88c:	68ba      	ldr	r2, [r7, #8]
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	1ad3      	subs	r3, r2, r3
 800b892:	4a1f      	ldr	r2, [pc, #124]	; (800b910 <prvHeapInit+0xac>)
 800b894:	4413      	add	r3, r2
 800b896:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b89c:	4a1d      	ldr	r2, [pc, #116]	; (800b914 <prvHeapInit+0xb0>)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b8a2:	4b1c      	ldr	r3, [pc, #112]	; (800b914 <prvHeapInit+0xb0>)
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	68ba      	ldr	r2, [r7, #8]
 800b8ac:	4413      	add	r3, r2
 800b8ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b8b0:	2208      	movs	r2, #8
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	1a9b      	subs	r3, r3, r2
 800b8b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	f023 0307 	bic.w	r3, r3, #7
 800b8be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	4a15      	ldr	r2, [pc, #84]	; (800b918 <prvHeapInit+0xb4>)
 800b8c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b8c6:	4b14      	ldr	r3, [pc, #80]	; (800b918 <prvHeapInit+0xb4>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b8ce:	4b12      	ldr	r3, [pc, #72]	; (800b918 <prvHeapInit+0xb4>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	68fa      	ldr	r2, [r7, #12]
 800b8de:	1ad2      	subs	r2, r2, r3
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b8e4:	4b0c      	ldr	r3, [pc, #48]	; (800b918 <prvHeapInit+0xb4>)
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	4a0a      	ldr	r2, [pc, #40]	; (800b91c <prvHeapInit+0xb8>)
 800b8f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	4a09      	ldr	r2, [pc, #36]	; (800b920 <prvHeapInit+0xbc>)
 800b8fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b8fc:	4b09      	ldr	r3, [pc, #36]	; (800b924 <prvHeapInit+0xc0>)
 800b8fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b902:	601a      	str	r2, [r3, #0]
}
 800b904:	bf00      	nop
 800b906:	3714      	adds	r7, #20
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr
 800b910:	20007ce4 	.word	0x20007ce4
 800b914:	2000b8e4 	.word	0x2000b8e4
 800b918:	2000b8ec 	.word	0x2000b8ec
 800b91c:	2000b8f4 	.word	0x2000b8f4
 800b920:	2000b8f0 	.word	0x2000b8f0
 800b924:	2000b8f8 	.word	0x2000b8f8

0800b928 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b928:	b480      	push	{r7}
 800b92a:	b085      	sub	sp, #20
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b930:	4b28      	ldr	r3, [pc, #160]	; (800b9d4 <prvInsertBlockIntoFreeList+0xac>)
 800b932:	60fb      	str	r3, [r7, #12]
 800b934:	e002      	b.n	800b93c <prvInsertBlockIntoFreeList+0x14>
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	60fb      	str	r3, [r7, #12]
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	429a      	cmp	r2, r3
 800b944:	d8f7      	bhi.n	800b936 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	68ba      	ldr	r2, [r7, #8]
 800b950:	4413      	add	r3, r2
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	429a      	cmp	r2, r3
 800b956:	d108      	bne.n	800b96a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	685a      	ldr	r2, [r3, #4]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	441a      	add	r2, r3
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	68ba      	ldr	r2, [r7, #8]
 800b974:	441a      	add	r2, r3
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d118      	bne.n	800b9b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	4b15      	ldr	r3, [pc, #84]	; (800b9d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	429a      	cmp	r2, r3
 800b988:	d00d      	beq.n	800b9a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	685a      	ldr	r2, [r3, #4]
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	441a      	add	r2, r3
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	601a      	str	r2, [r3, #0]
 800b9a4:	e008      	b.n	800b9b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b9a6:	4b0c      	ldr	r3, [pc, #48]	; (800b9d8 <prvInsertBlockIntoFreeList+0xb0>)
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	601a      	str	r2, [r3, #0]
 800b9ae:	e003      	b.n	800b9b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d002      	beq.n	800b9c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	687a      	ldr	r2, [r7, #4]
 800b9c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b9c6:	bf00      	nop
 800b9c8:	3714      	adds	r7, #20
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d0:	4770      	bx	lr
 800b9d2:	bf00      	nop
 800b9d4:	2000b8e4 	.word	0x2000b8e4
 800b9d8:	2000b8ec 	.word	0x2000b8ec

0800b9dc <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control>:
 800b9dc:	4b04      	ldr	r3, [pc, #16]	; (800b9f0 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	b10a      	cbz	r2, 800b9e6 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0xa>
 800b9e2:	4803      	ldr	r0, [pc, #12]	; (800b9f0 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800b9e4:	4770      	bx	lr
 800b9e6:	4a03      	ldr	r2, [pc, #12]	; (800b9f4 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x18>)
 800b9e8:	4801      	ldr	r0, [pc, #4]	; (800b9f0 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800b9ea:	6812      	ldr	r2, [r2, #0]
 800b9ec:	601a      	str	r2, [r3, #0]
 800b9ee:	4770      	bx	lr
 800b9f0:	2000001c 	.word	0x2000001c
 800b9f4:	20000a10 	.word	0x20000a10

0800b9f8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800b9f8:	4b06      	ldr	r3, [pc, #24]	; (800ba14 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x1c>)
 800b9fa:	4807      	ldr	r0, [pc, #28]	; (800ba18 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x20>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4907      	ldr	r1, [pc, #28]	; (800ba1c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x24>)
 800ba00:	4a07      	ldr	r2, [pc, #28]	; (800ba20 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x28>)
 800ba02:	b410      	push	{r4}
 800ba04:	4c07      	ldr	r4, [pc, #28]	; (800ba24 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x2c>)
 800ba06:	6003      	str	r3, [r0, #0]
 800ba08:	6023      	str	r3, [r4, #0]
 800ba0a:	600b      	str	r3, [r1, #0]
 800ba0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba10:	6013      	str	r3, [r2, #0]
 800ba12:	4770      	bx	lr
 800ba14:	20000a10 	.word	0x20000a10
 800ba18:	20000090 	.word	0x20000090
 800ba1c:	20000050 	.word	0x20000050
 800ba20:	2000001c 	.word	0x2000001c
 800ba24:	20000078 	.word	0x20000078

0800ba28 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800ba28:	4b04      	ldr	r3, [pc, #16]	; (800ba3c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800ba2a:	681a      	ldr	r2, [r3, #0]
 800ba2c:	b10a      	cbz	r2, 800ba32 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0xa>
 800ba2e:	4803      	ldr	r0, [pc, #12]	; (800ba3c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800ba30:	4770      	bx	lr
 800ba32:	4a03      	ldr	r2, [pc, #12]	; (800ba40 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x18>)
 800ba34:	4801      	ldr	r0, [pc, #4]	; (800ba3c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800ba36:	6812      	ldr	r2, [r2, #0]
 800ba38:	601a      	str	r2, [r3, #0]
 800ba3a:	4770      	bx	lr
 800ba3c:	200000b0 	.word	0x200000b0
 800ba40:	20000a10 	.word	0x20000a10

0800ba44 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800ba44:	4a02      	ldr	r2, [pc, #8]	; (800ba50 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0xc>)
 800ba46:	4b03      	ldr	r3, [pc, #12]	; (800ba54 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x10>)
 800ba48:	6812      	ldr	r2, [r2, #0]
 800ba4a:	601a      	str	r2, [r3, #0]
 800ba4c:	4770      	bx	lr
 800ba4e:	bf00      	nop
 800ba50:	20000a10 	.word	0x20000a10
 800ba54:	200000b0 	.word	0x200000b0

0800ba58 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800ba58:	4b04      	ldr	r3, [pc, #16]	; (800ba6c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800ba5a:	681a      	ldr	r2, [r3, #0]
 800ba5c:	b10a      	cbz	r2, 800ba62 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0xa>
 800ba5e:	4803      	ldr	r0, [pc, #12]	; (800ba6c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800ba60:	4770      	bx	lr
 800ba62:	4a03      	ldr	r2, [pc, #12]	; (800ba70 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x18>)
 800ba64:	4801      	ldr	r0, [pc, #4]	; (800ba6c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800ba66:	6812      	ldr	r2, [r2, #0]
 800ba68:	601a      	str	r2, [r3, #0]
 800ba6a:	4770      	bx	lr
 800ba6c:	200000d0 	.word	0x200000d0
 800ba70:	20000a10 	.word	0x20000a10

0800ba74 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800ba74:	4a02      	ldr	r2, [pc, #8]	; (800ba80 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0xc>)
 800ba76:	4b03      	ldr	r3, [pc, #12]	; (800ba84 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x10>)
 800ba78:	6812      	ldr	r2, [r2, #0]
 800ba7a:	601a      	str	r2, [r3, #0]
 800ba7c:	4770      	bx	lr
 800ba7e:	bf00      	nop
 800ba80:	20000a10 	.word	0x20000a10
 800ba84:	200000d0 	.word	0x200000d0

0800ba88 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800ba88:	4b04      	ldr	r3, [pc, #16]	; (800ba9c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	b10a      	cbz	r2, 800ba92 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0xa>
 800ba8e:	4803      	ldr	r0, [pc, #12]	; (800ba9c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800ba90:	4770      	bx	lr
 800ba92:	4a03      	ldr	r2, [pc, #12]	; (800baa0 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x18>)
 800ba94:	4801      	ldr	r0, [pc, #4]	; (800ba9c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800ba96:	6812      	ldr	r2, [r2, #0]
 800ba98:	601a      	str	r2, [r3, #0]
 800ba9a:	4770      	bx	lr
 800ba9c:	200000f0 	.word	0x200000f0
 800baa0:	20000a10 	.word	0x20000a10

0800baa4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800baa4:	4b06      	ldr	r3, [pc, #24]	; (800bac0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x1c>)
 800baa6:	4807      	ldr	r0, [pc, #28]	; (800bac4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x20>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4907      	ldr	r1, [pc, #28]	; (800bac8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x24>)
 800baac:	4a07      	ldr	r2, [pc, #28]	; (800bacc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x28>)
 800baae:	b410      	push	{r4}
 800bab0:	4c07      	ldr	r4, [pc, #28]	; (800bad0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x2c>)
 800bab2:	6003      	str	r3, [r0, #0]
 800bab4:	6023      	str	r3, [r4, #0]
 800bab6:	600b      	str	r3, [r1, #0]
 800bab8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800babc:	6013      	str	r3, [r2, #0]
 800babe:	4770      	bx	lr
 800bac0:	20000a10 	.word	0x20000a10
 800bac4:	20000164 	.word	0x20000164
 800bac8:	20000124 	.word	0x20000124
 800bacc:	200000f0 	.word	0x200000f0
 800bad0:	2000014c 	.word	0x2000014c

0800bad4 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__size_function__Control_Request__encoders>:
 800bad4:	2006      	movs	r0, #6
 800bad6:	4770      	bx	lr

0800bad8 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__get_const_function__Control_Request__encoders>:
 800bad8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800badc:	4770      	bx	lr
 800bade:	bf00      	nop

0800bae0 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__fetch_function__Control_Request__encoders>:
 800bae0:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 800bae4:	8013      	strh	r3, [r2, #0]
 800bae6:	4770      	bx	lr

0800bae8 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__assign_function__Control_Request__encoders>:
 800bae8:	f9b2 3000 	ldrsh.w	r3, [r2]
 800baec:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800baf0:	4770      	bx	lr
 800baf2:	bf00      	nop

0800baf4 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__size_function__Control_Event__request>:
 800baf4:	6840      	ldr	r0, [r0, #4]
 800baf6:	4770      	bx	lr

0800baf8 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_const_function__Control_Event__request>:
 800baf8:	6800      	ldr	r0, [r0, #0]
 800bafa:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800bafe:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bb02:	4770      	bx	lr

0800bb04 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__fetch_function__Control_Event__request>:
 800bb04:	6800      	ldr	r0, [r0, #0]
 800bb06:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800bb0a:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 800bb0e:	f850 c011 	ldr.w	ip, [r0, r1, lsl #1]
 800bb12:	6858      	ldr	r0, [r3, #4]
 800bb14:	6899      	ldr	r1, [r3, #8]
 800bb16:	f8c2 c000 	str.w	ip, [r2]
 800bb1a:	6050      	str	r0, [r2, #4]
 800bb1c:	6091      	str	r1, [r2, #8]
 800bb1e:	899b      	ldrh	r3, [r3, #12]
 800bb20:	8193      	strh	r3, [r2, #12]
 800bb22:	4770      	bx	lr

0800bb24 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__assign_function__Control_Event__request>:
 800bb24:	6800      	ldr	r0, [r0, #0]
 800bb26:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800bb2a:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800bb2e:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 800bb32:	b510      	push	{r4, lr}
 800bb34:	6814      	ldr	r4, [r2, #0]
 800bb36:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800bb3a:	f840 4011 	str.w	r4, [r0, r1, lsl #1]
 800bb3e:	f8c3 e004 	str.w	lr, [r3, #4]
 800bb42:	f8c3 c008 	str.w	ip, [r3, #8]
 800bb46:	8992      	ldrh	r2, [r2, #12]
 800bb48:	819a      	strh	r2, [r3, #12]
 800bb4a:	bd10      	pop	{r4, pc}

0800bb4c <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__size_function__Control_Event__response>:
 800bb4c:	6840      	ldr	r0, [r0, #4]
 800bb4e:	4770      	bx	lr

0800bb50 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_const_function__Control_Event__response>:
 800bb50:	6800      	ldr	r0, [r0, #0]
 800bb52:	4408      	add	r0, r1
 800bb54:	4770      	bx	lr
 800bb56:	bf00      	nop

0800bb58 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__fetch_function__Control_Event__response>:
 800bb58:	6803      	ldr	r3, [r0, #0]
 800bb5a:	5c5b      	ldrb	r3, [r3, r1]
 800bb5c:	7013      	strb	r3, [r2, #0]
 800bb5e:	4770      	bx	lr

0800bb60 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__assign_function__Control_Event__response>:
 800bb60:	6803      	ldr	r3, [r0, #0]
 800bb62:	7812      	ldrb	r2, [r2, #0]
 800bb64:	545a      	strb	r2, [r3, r1]
 800bb66:	4770      	bx	lr

0800bb68 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__Control_Request_init_function>:
 800bb68:	f007 bf26 	b.w	80139b8 <racs_services__srv__Control_Request__init>

0800bb6c <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__Control_Request_fini_function>:
 800bb6c:	f007 bf28 	b.w	80139c0 <racs_services__srv__Control_Request__fini>

0800bb70 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__Control_Response_init_function>:
 800bb70:	f007 bf68 	b.w	8013a44 <racs_services__srv__Control_Response__init>

0800bb74 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__Control_Response_fini_function>:
 800bb74:	f007 bf6a 	b.w	8013a4c <racs_services__srv__Control_Response__fini>

0800bb78 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__Control_Event_init_function>:
 800bb78:	f007 bfa0 	b.w	8013abc <racs_services__srv__Control_Event__init>

0800bb7c <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__Control_Event_fini_function>:
 800bb7c:	f007 bfc0 	b.w	8013b00 <racs_services__srv__Control_Event__fini>

0800bb80 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__resize_function__Control_Event__request>:
 800bb80:	b510      	push	{r4, lr}
 800bb82:	4604      	mov	r4, r0
 800bb84:	b082      	sub	sp, #8
 800bb86:	9101      	str	r1, [sp, #4]
 800bb88:	f007 ff48 	bl	8013a1c <racs_services__srv__Control_Request__Sequence__fini>
 800bb8c:	9901      	ldr	r1, [sp, #4]
 800bb8e:	4620      	mov	r0, r4
 800bb90:	b002      	add	sp, #8
 800bb92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb96:	f007 bf27 	b.w	80139e8 <racs_services__srv__Control_Request__Sequence__init>
 800bb9a:	bf00      	nop

0800bb9c <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__resize_function__Control_Event__response>:
 800bb9c:	b510      	push	{r4, lr}
 800bb9e:	4604      	mov	r4, r0
 800bba0:	b082      	sub	sp, #8
 800bba2:	9101      	str	r1, [sp, #4]
 800bba4:	f007 ff76 	bl	8013a94 <racs_services__srv__Control_Response__Sequence__fini>
 800bba8:	9901      	ldr	r1, [sp, #4]
 800bbaa:	4620      	mov	r0, r4
 800bbac:	b002      	add	sp, #8
 800bbae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbb2:	f007 bf55 	b.w	8013a60 <racs_services__srv__Control_Response__Sequence__init>
 800bbb6:	bf00      	nop

0800bbb8 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_function__Control_Event__response>:
 800bbb8:	6800      	ldr	r0, [r0, #0]
 800bbba:	4408      	add	r0, r1
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop

0800bbc0 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__get_function__Control_Request__encoders>:
 800bbc0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bbc4:	4770      	bx	lr
 800bbc6:	bf00      	nop

0800bbc8 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_function__Control_Event__request>:
 800bbc8:	6800      	ldr	r0, [r0, #0]
 800bbca:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800bbce:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bbd2:	4770      	bx	lr

0800bbd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800bbd4:	4b04      	ldr	r3, [pc, #16]	; (800bbe8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800bbd6:	681a      	ldr	r2, [r3, #0]
 800bbd8:	b10a      	cbz	r2, 800bbde <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0xa>
 800bbda:	4803      	ldr	r0, [pc, #12]	; (800bbe8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800bbdc:	4770      	bx	lr
 800bbde:	4a03      	ldr	r2, [pc, #12]	; (800bbec <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x18>)
 800bbe0:	4801      	ldr	r0, [pc, #4]	; (800bbe8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800bbe2:	6812      	ldr	r2, [r2, #0]
 800bbe4:	601a      	str	r2, [r3, #0]
 800bbe6:	4770      	bx	lr
 800bbe8:	200002fc 	.word	0x200002fc
 800bbec:	20000a14 	.word	0x20000a14

0800bbf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response>:
 800bbf0:	4b04      	ldr	r3, [pc, #16]	; (800bc04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800bbf2:	681a      	ldr	r2, [r3, #0]
 800bbf4:	b10a      	cbz	r2, 800bbfa <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0xa>
 800bbf6:	4803      	ldr	r0, [pc, #12]	; (800bc04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800bbf8:	4770      	bx	lr
 800bbfa:	4a03      	ldr	r2, [pc, #12]	; (800bc08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x18>)
 800bbfc:	4801      	ldr	r0, [pc, #4]	; (800bc04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800bbfe:	6812      	ldr	r2, [r2, #0]
 800bc00:	601a      	str	r2, [r3, #0]
 800bc02:	4770      	bx	lr
 800bc04:	20000350 	.word	0x20000350
 800bc08:	20000a14 	.word	0x20000a14

0800bc0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event>:
 800bc0c:	b508      	push	{r3, lr}
 800bc0e:	f002 febf 	bl	800e990 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800bc12:	4913      	ldr	r1, [pc, #76]	; (800bc60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x54>)
 800bc14:	4b13      	ldr	r3, [pc, #76]	; (800bc64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x58>)
 800bc16:	680a      	ldr	r2, [r1, #0]
 800bc18:	60d8      	str	r0, [r3, #12]
 800bc1a:	b152      	cbz	r2, 800bc32 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x26>
 800bc1c:	4a12      	ldr	r2, [pc, #72]	; (800bc68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x5c>)
 800bc1e:	6499      	str	r1, [r3, #72]	; 0x48
 800bc20:	6811      	ldr	r1, [r2, #0]
 800bc22:	b171      	cbz	r1, 800bc42 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x36>
 800bc24:	4911      	ldr	r1, [pc, #68]	; (800bc6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800bc26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800bc2a:	680b      	ldr	r3, [r1, #0]
 800bc2c:	b193      	cbz	r3, 800bc54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x48>
 800bc2e:	480f      	ldr	r0, [pc, #60]	; (800bc6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800bc30:	bd08      	pop	{r3, pc}
 800bc32:	4a0f      	ldr	r2, [pc, #60]	; (800bc70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800bc34:	6499      	str	r1, [r3, #72]	; 0x48
 800bc36:	6812      	ldr	r2, [r2, #0]
 800bc38:	600a      	str	r2, [r1, #0]
 800bc3a:	4a0b      	ldr	r2, [pc, #44]	; (800bc68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x5c>)
 800bc3c:	6811      	ldr	r1, [r2, #0]
 800bc3e:	2900      	cmp	r1, #0
 800bc40:	d1f0      	bne.n	800bc24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x18>
 800bc42:	490b      	ldr	r1, [pc, #44]	; (800bc70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800bc44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800bc48:	6809      	ldr	r1, [r1, #0]
 800bc4a:	6011      	str	r1, [r2, #0]
 800bc4c:	4907      	ldr	r1, [pc, #28]	; (800bc6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800bc4e:	680b      	ldr	r3, [r1, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d1ec      	bne.n	800bc2e <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x22>
 800bc54:	4b06      	ldr	r3, [pc, #24]	; (800bc70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800bc56:	4805      	ldr	r0, [pc, #20]	; (800bc6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	600b      	str	r3, [r1, #0]
 800bc5c:	bd08      	pop	{r3, pc}
 800bc5e:	bf00      	nop
 800bc60:	200002fc 	.word	0x200002fc
 800bc64:	2000017c 	.word	0x2000017c
 800bc68:	20000350 	.word	0x20000350
 800bc6c:	20000230 	.word	0x20000230
 800bc70:	20000a14 	.word	0x20000a14

0800bc74 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control>:
 800bc74:	4b25      	ldr	r3, [pc, #148]	; (800bd0c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	b510      	push	{r4, lr}
 800bc7a:	b142      	cbz	r2, 800bc8e <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x1a>
 800bc7c:	685c      	ldr	r4, [r3, #4]
 800bc7e:	68a3      	ldr	r3, [r4, #8]
 800bc80:	b163      	cbz	r3, 800bc9c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x28>
 800bc82:	68e3      	ldr	r3, [r4, #12]
 800bc84:	b193      	cbz	r3, 800bcac <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x38>
 800bc86:	6923      	ldr	r3, [r4, #16]
 800bc88:	b1c3      	cbz	r3, 800bcbc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x48>
 800bc8a:	4820      	ldr	r0, [pc, #128]	; (800bd0c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800bc8c:	bd10      	pop	{r4, pc}
 800bc8e:	4a20      	ldr	r2, [pc, #128]	; (800bd10 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800bc90:	685c      	ldr	r4, [r3, #4]
 800bc92:	6812      	ldr	r2, [r2, #0]
 800bc94:	601a      	str	r2, [r3, #0]
 800bc96:	68a3      	ldr	r3, [r4, #8]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d1f2      	bne.n	800bc82 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xe>
 800bc9c:	4a1d      	ldr	r2, [pc, #116]	; (800bd14 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa0>)
 800bc9e:	6813      	ldr	r3, [r2, #0]
 800bca0:	b303      	cbz	r3, 800bce4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x70>
 800bca2:	6853      	ldr	r3, [r2, #4]
 800bca4:	60a3      	str	r3, [r4, #8]
 800bca6:	68e3      	ldr	r3, [r4, #12]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d1ec      	bne.n	800bc86 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x12>
 800bcac:	4b1a      	ldr	r3, [pc, #104]	; (800bd18 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa4>)
 800bcae:	681a      	ldr	r2, [r3, #0]
 800bcb0:	b1e2      	cbz	r2, 800bcec <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x78>
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	60e3      	str	r3, [r4, #12]
 800bcb6:	6923      	ldr	r3, [r4, #16]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d1e6      	bne.n	800bc8a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x16>
 800bcbc:	f002 fe68 	bl	800e990 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800bcc0:	4a14      	ldr	r2, [pc, #80]	; (800bd14 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa0>)
 800bcc2:	4916      	ldr	r1, [pc, #88]	; (800bd1c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa8>)
 800bcc4:	6813      	ldr	r3, [r2, #0]
 800bcc6:	60c8      	str	r0, [r1, #12]
 800bcc8:	b1e3      	cbz	r3, 800bd04 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x90>
 800bcca:	4b13      	ldr	r3, [pc, #76]	; (800bd18 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa4>)
 800bccc:	648a      	str	r2, [r1, #72]	; 0x48
 800bcce:	681a      	ldr	r2, [r3, #0]
 800bcd0:	b1a2      	cbz	r2, 800bcfc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x88>
 800bcd2:	4a13      	ldr	r2, [pc, #76]	; (800bd20 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xac>)
 800bcd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800bcd8:	6813      	ldr	r3, [r2, #0]
 800bcda:	b15b      	cbz	r3, 800bcf4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x80>
 800bcdc:	6853      	ldr	r3, [r2, #4]
 800bcde:	480b      	ldr	r0, [pc, #44]	; (800bd0c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800bce0:	6123      	str	r3, [r4, #16]
 800bce2:	bd10      	pop	{r4, pc}
 800bce4:	4b0a      	ldr	r3, [pc, #40]	; (800bd10 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	6013      	str	r3, [r2, #0]
 800bcea:	e7da      	b.n	800bca2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x2e>
 800bcec:	4a08      	ldr	r2, [pc, #32]	; (800bd10 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800bcee:	6812      	ldr	r2, [r2, #0]
 800bcf0:	601a      	str	r2, [r3, #0]
 800bcf2:	e7de      	b.n	800bcb2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x3e>
 800bcf4:	4b06      	ldr	r3, [pc, #24]	; (800bd10 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	6013      	str	r3, [r2, #0]
 800bcfa:	e7ef      	b.n	800bcdc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x68>
 800bcfc:	4a04      	ldr	r2, [pc, #16]	; (800bd10 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800bcfe:	6812      	ldr	r2, [r2, #0]
 800bd00:	601a      	str	r2, [r3, #0]
 800bd02:	e7e6      	b.n	800bcd2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x5e>
 800bd04:	4b02      	ldr	r3, [pc, #8]	; (800bd10 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	6013      	str	r3, [r2, #0]
 800bd0a:	e7de      	b.n	800bcca <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x56>
 800bd0c:	2000037c 	.word	0x2000037c
 800bd10:	20000a14 	.word	0x20000a14
 800bd14:	200002fc 	.word	0x200002fc
 800bd18:	20000350 	.word	0x20000350
 800bd1c:	2000017c 	.word	0x2000017c
 800bd20:	20000230 	.word	0x20000230

0800bd24 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__size_function__DirectAccess__pwms>:
 800bd24:	2006      	movs	r0, #6
 800bd26:	4770      	bx	lr

0800bd28 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__get_const_function__DirectAccess__pwms>:
 800bd28:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bd2c:	4770      	bx	lr
 800bd2e:	bf00      	nop

0800bd30 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__fetch_function__DirectAccess__pwms>:
 800bd30:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 800bd34:	8013      	strh	r3, [r2, #0]
 800bd36:	4770      	bx	lr

0800bd38 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__assign_function__DirectAccess__pwms>:
 800bd38:	f9b2 3000 	ldrsh.w	r3, [r2]
 800bd3c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800bd40:	4770      	bx	lr
 800bd42:	bf00      	nop

0800bd44 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__DirectAccess_init_function>:
 800bd44:	f007 bf9c 	b.w	8013c80 <racs_services__msg__DirectAccess__init>

0800bd48 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__DirectAccess_fini_function>:
 800bd48:	f007 bf9e 	b.w	8013c88 <racs_services__msg__DirectAccess__fini>

0800bd4c <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__get_function__DirectAccess__pwms>:
 800bd4c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bd50:	4770      	bx	lr
 800bd52:	bf00      	nop

0800bd54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800bd54:	4b04      	ldr	r3, [pc, #16]	; (800bd68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800bd56:	681a      	ldr	r2, [r3, #0]
 800bd58:	b10a      	cbz	r2, 800bd5e <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0xa>
 800bd5a:	4803      	ldr	r0, [pc, #12]	; (800bd68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800bd5c:	4770      	bx	lr
 800bd5e:	4a03      	ldr	r2, [pc, #12]	; (800bd6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x18>)
 800bd60:	4801      	ldr	r0, [pc, #4]	; (800bd68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800bd62:	6812      	ldr	r2, [r2, #0]
 800bd64:	601a      	str	r2, [r3, #0]
 800bd66:	4770      	bx	lr
 800bd68:	20000420 	.word	0x20000420
 800bd6c:	20000a14 	.word	0x20000a14

0800bd70 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__size_function__Feedback__encoders>:
 800bd70:	2006      	movs	r0, #6
 800bd72:	4770      	bx	lr

0800bd74 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__get_const_function__Feedback__encoders>:
 800bd74:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bd78:	4770      	bx	lr
 800bd7a:	bf00      	nop

0800bd7c <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__fetch_function__Feedback__encoders>:
 800bd7c:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 800bd80:	8013      	strh	r3, [r2, #0]
 800bd82:	4770      	bx	lr

0800bd84 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__assign_function__Feedback__encoders>:
 800bd84:	f9b2 3000 	ldrsh.w	r3, [r2]
 800bd88:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop

0800bd90 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__Feedback_init_function>:
 800bd90:	f007 bfa8 	b.w	8013ce4 <racs_services__msg__Feedback__init>

0800bd94 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__Feedback_fini_function>:
 800bd94:	f007 bfaa 	b.w	8013cec <racs_services__msg__Feedback__fini>

0800bd98 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__get_function__Feedback__encoders>:
 800bd98:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bd9c:	4770      	bx	lr
 800bd9e:	bf00      	nop

0800bda0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800bda0:	4b04      	ldr	r3, [pc, #16]	; (800bdb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	b10a      	cbz	r2, 800bdaa <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0xa>
 800bda6:	4803      	ldr	r0, [pc, #12]	; (800bdb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800bda8:	4770      	bx	lr
 800bdaa:	4a03      	ldr	r2, [pc, #12]	; (800bdb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x18>)
 800bdac:	4801      	ldr	r0, [pc, #4]	; (800bdb4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800bdae:	6812      	ldr	r2, [r2, #0]
 800bdb0:	601a      	str	r2, [r3, #0]
 800bdb2:	4770      	bx	lr
 800bdb4:	200004b0 	.word	0x200004b0
 800bdb8:	20000a14 	.word	0x20000a14

0800bdbc <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__size_function__Setup_Event__request>:
 800bdbc:	6840      	ldr	r0, [r0, #4]
 800bdbe:	4770      	bx	lr

0800bdc0 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_const_function__Setup_Event__request>:
 800bdc0:	6800      	ldr	r0, [r0, #0]
 800bdc2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800bdc6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800bdca:	4770      	bx	lr

0800bdcc <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__fetch_function__Setup_Event__request>:
 800bdcc:	6803      	ldr	r3, [r0, #0]
 800bdce:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800bdd2:	4694      	mov	ip, r2
 800bdd4:	b500      	push	{lr}
 800bdd6:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800bdda:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800bdde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800bde2:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800bde6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800bdea:	f85d fb04 	ldr.w	pc, [sp], #4
 800bdee:	bf00      	nop

0800bdf0 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__assign_function__Setup_Event__request>:
 800bdf0:	6803      	ldr	r3, [r0, #0]
 800bdf2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800bdf6:	b500      	push	{lr}
 800bdf8:	4696      	mov	lr, r2
 800bdfa:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800bdfe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800be02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800be06:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800be0a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800be0e:	f85d fb04 	ldr.w	pc, [sp], #4
 800be12:	bf00      	nop

0800be14 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__size_function__Setup_Event__response>:
 800be14:	6840      	ldr	r0, [r0, #4]
 800be16:	4770      	bx	lr

0800be18 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_const_function__Setup_Event__response>:
 800be18:	6800      	ldr	r0, [r0, #0]
 800be1a:	4408      	add	r0, r1
 800be1c:	4770      	bx	lr
 800be1e:	bf00      	nop

0800be20 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__fetch_function__Setup_Event__response>:
 800be20:	6803      	ldr	r3, [r0, #0]
 800be22:	5c5b      	ldrb	r3, [r3, r1]
 800be24:	7013      	strb	r3, [r2, #0]
 800be26:	4770      	bx	lr

0800be28 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__assign_function__Setup_Event__response>:
 800be28:	6803      	ldr	r3, [r0, #0]
 800be2a:	7812      	ldrb	r2, [r2, #0]
 800be2c:	545a      	strb	r2, [r3, r1]
 800be2e:	4770      	bx	lr

0800be30 <racs_services__srv__Setup_Request__rosidl_typesupport_introspection_c__Setup_Request_init_function>:
 800be30:	f008 b940 	b.w	80140b4 <racs_services__srv__Setup_Request__init>

0800be34 <racs_services__srv__Setup_Request__rosidl_typesupport_introspection_c__Setup_Request_fini_function>:
 800be34:	f008 b942 	b.w	80140bc <racs_services__srv__Setup_Request__fini>

0800be38 <racs_services__srv__Setup_Response__rosidl_typesupport_introspection_c__Setup_Response_init_function>:
 800be38:	f008 b98a 	b.w	8014150 <racs_services__srv__Setup_Response__init>

0800be3c <racs_services__srv__Setup_Response__rosidl_typesupport_introspection_c__Setup_Response_fini_function>:
 800be3c:	f008 b98c 	b.w	8014158 <racs_services__srv__Setup_Response__fini>

0800be40 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__Setup_Event_init_function>:
 800be40:	f008 b9c2 	b.w	80141c8 <racs_services__srv__Setup_Event__init>

0800be44 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__Setup_Event_fini_function>:
 800be44:	f008 b9e2 	b.w	801420c <racs_services__srv__Setup_Event__fini>

0800be48 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__resize_function__Setup_Event__request>:
 800be48:	b510      	push	{r4, lr}
 800be4a:	4604      	mov	r4, r0
 800be4c:	b082      	sub	sp, #8
 800be4e:	9101      	str	r1, [sp, #4]
 800be50:	f008 f96a 	bl	8014128 <racs_services__srv__Setup_Request__Sequence__fini>
 800be54:	9901      	ldr	r1, [sp, #4]
 800be56:	4620      	mov	r0, r4
 800be58:	b002      	add	sp, #8
 800be5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be5e:	f008 b949 	b.w	80140f4 <racs_services__srv__Setup_Request__Sequence__init>
 800be62:	bf00      	nop

0800be64 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__resize_function__Setup_Event__response>:
 800be64:	b510      	push	{r4, lr}
 800be66:	4604      	mov	r4, r0
 800be68:	b082      	sub	sp, #8
 800be6a:	9101      	str	r1, [sp, #4]
 800be6c:	f008 f998 	bl	80141a0 <racs_services__srv__Setup_Response__Sequence__fini>
 800be70:	9901      	ldr	r1, [sp, #4]
 800be72:	4620      	mov	r0, r4
 800be74:	b002      	add	sp, #8
 800be76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800be7a:	f008 b977 	b.w	801416c <racs_services__srv__Setup_Response__Sequence__init>
 800be7e:	bf00      	nop

0800be80 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_function__Setup_Event__response>:
 800be80:	6800      	ldr	r0, [r0, #0]
 800be82:	4408      	add	r0, r1
 800be84:	4770      	bx	lr
 800be86:	bf00      	nop

0800be88 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_function__Setup_Event__request>:
 800be88:	6800      	ldr	r0, [r0, #0]
 800be8a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800be8e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800be92:	4770      	bx	lr

0800be94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800be94:	4b04      	ldr	r3, [pc, #16]	; (800bea8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800be96:	681a      	ldr	r2, [r3, #0]
 800be98:	b10a      	cbz	r2, 800be9e <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0xa>
 800be9a:	4803      	ldr	r0, [pc, #12]	; (800bea8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800be9c:	4770      	bx	lr
 800be9e:	4a03      	ldr	r2, [pc, #12]	; (800beac <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x18>)
 800bea0:	4801      	ldr	r0, [pc, #4]	; (800bea8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800bea2:	6812      	ldr	r2, [r2, #0]
 800bea4:	601a      	str	r2, [r3, #0]
 800bea6:	4770      	bx	lr
 800bea8:	20000738 	.word	0x20000738
 800beac:	20000a14 	.word	0x20000a14

0800beb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response>:
 800beb0:	4b04      	ldr	r3, [pc, #16]	; (800bec4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	b10a      	cbz	r2, 800beba <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0xa>
 800beb6:	4803      	ldr	r0, [pc, #12]	; (800bec4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800beb8:	4770      	bx	lr
 800beba:	4a03      	ldr	r2, [pc, #12]	; (800bec8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x18>)
 800bebc:	4801      	ldr	r0, [pc, #4]	; (800bec4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800bebe:	6812      	ldr	r2, [r2, #0]
 800bec0:	601a      	str	r2, [r3, #0]
 800bec2:	4770      	bx	lr
 800bec4:	2000078c 	.word	0x2000078c
 800bec8:	20000a14 	.word	0x20000a14

0800becc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event>:
 800becc:	b508      	push	{r3, lr}
 800bece:	f002 fd5f 	bl	800e990 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800bed2:	4913      	ldr	r1, [pc, #76]	; (800bf20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x54>)
 800bed4:	4b13      	ldr	r3, [pc, #76]	; (800bf24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x58>)
 800bed6:	680a      	ldr	r2, [r1, #0]
 800bed8:	60d8      	str	r0, [r3, #12]
 800beda:	b152      	cbz	r2, 800bef2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x26>
 800bedc:	4a12      	ldr	r2, [pc, #72]	; (800bf28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x5c>)
 800bede:	6499      	str	r1, [r3, #72]	; 0x48
 800bee0:	6811      	ldr	r1, [r2, #0]
 800bee2:	b171      	cbz	r1, 800bf02 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x36>
 800bee4:	4911      	ldr	r1, [pc, #68]	; (800bf2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800bee6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800beea:	680b      	ldr	r3, [r1, #0]
 800beec:	b193      	cbz	r3, 800bf14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x48>
 800beee:	480f      	ldr	r0, [pc, #60]	; (800bf2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800bef0:	bd08      	pop	{r3, pc}
 800bef2:	4a0f      	ldr	r2, [pc, #60]	; (800bf30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800bef4:	6499      	str	r1, [r3, #72]	; 0x48
 800bef6:	6812      	ldr	r2, [r2, #0]
 800bef8:	600a      	str	r2, [r1, #0]
 800befa:	4a0b      	ldr	r2, [pc, #44]	; (800bf28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x5c>)
 800befc:	6811      	ldr	r1, [r2, #0]
 800befe:	2900      	cmp	r1, #0
 800bf00:	d1f0      	bne.n	800bee4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x18>
 800bf02:	490b      	ldr	r1, [pc, #44]	; (800bf30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800bf04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800bf08:	6809      	ldr	r1, [r1, #0]
 800bf0a:	6011      	str	r1, [r2, #0]
 800bf0c:	4907      	ldr	r1, [pc, #28]	; (800bf2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800bf0e:	680b      	ldr	r3, [r1, #0]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d1ec      	bne.n	800beee <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x22>
 800bf14:	4b06      	ldr	r3, [pc, #24]	; (800bf30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800bf16:	4805      	ldr	r0, [pc, #20]	; (800bf2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	600b      	str	r3, [r1, #0]
 800bf1c:	bd08      	pop	{r3, pc}
 800bf1e:	bf00      	nop
 800bf20:	20000738 	.word	0x20000738
 800bf24:	200004c8 	.word	0x200004c8
 800bf28:	2000078c 	.word	0x2000078c
 800bf2c:	2000057c 	.word	0x2000057c
 800bf30:	20000a14 	.word	0x20000a14

0800bf34 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800bf34:	4b25      	ldr	r3, [pc, #148]	; (800bfcc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800bf36:	681a      	ldr	r2, [r3, #0]
 800bf38:	b510      	push	{r4, lr}
 800bf3a:	b142      	cbz	r2, 800bf4e <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x1a>
 800bf3c:	685c      	ldr	r4, [r3, #4]
 800bf3e:	68a3      	ldr	r3, [r4, #8]
 800bf40:	b163      	cbz	r3, 800bf5c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x28>
 800bf42:	68e3      	ldr	r3, [r4, #12]
 800bf44:	b193      	cbz	r3, 800bf6c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x38>
 800bf46:	6923      	ldr	r3, [r4, #16]
 800bf48:	b1c3      	cbz	r3, 800bf7c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x48>
 800bf4a:	4820      	ldr	r0, [pc, #128]	; (800bfcc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800bf4c:	bd10      	pop	{r4, pc}
 800bf4e:	4a20      	ldr	r2, [pc, #128]	; (800bfd0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800bf50:	685c      	ldr	r4, [r3, #4]
 800bf52:	6812      	ldr	r2, [r2, #0]
 800bf54:	601a      	str	r2, [r3, #0]
 800bf56:	68a3      	ldr	r3, [r4, #8]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d1f2      	bne.n	800bf42 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xe>
 800bf5c:	4a1d      	ldr	r2, [pc, #116]	; (800bfd4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa0>)
 800bf5e:	6813      	ldr	r3, [r2, #0]
 800bf60:	b303      	cbz	r3, 800bfa4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x70>
 800bf62:	6853      	ldr	r3, [r2, #4]
 800bf64:	60a3      	str	r3, [r4, #8]
 800bf66:	68e3      	ldr	r3, [r4, #12]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d1ec      	bne.n	800bf46 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x12>
 800bf6c:	4b1a      	ldr	r3, [pc, #104]	; (800bfd8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa4>)
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	b1e2      	cbz	r2, 800bfac <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x78>
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	60e3      	str	r3, [r4, #12]
 800bf76:	6923      	ldr	r3, [r4, #16]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d1e6      	bne.n	800bf4a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x16>
 800bf7c:	f002 fd08 	bl	800e990 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800bf80:	4a14      	ldr	r2, [pc, #80]	; (800bfd4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa0>)
 800bf82:	4916      	ldr	r1, [pc, #88]	; (800bfdc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa8>)
 800bf84:	6813      	ldr	r3, [r2, #0]
 800bf86:	60c8      	str	r0, [r1, #12]
 800bf88:	b1e3      	cbz	r3, 800bfc4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x90>
 800bf8a:	4b13      	ldr	r3, [pc, #76]	; (800bfd8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa4>)
 800bf8c:	648a      	str	r2, [r1, #72]	; 0x48
 800bf8e:	681a      	ldr	r2, [r3, #0]
 800bf90:	b1a2      	cbz	r2, 800bfbc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x88>
 800bf92:	4a13      	ldr	r2, [pc, #76]	; (800bfe0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xac>)
 800bf94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800bf98:	6813      	ldr	r3, [r2, #0]
 800bf9a:	b15b      	cbz	r3, 800bfb4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x80>
 800bf9c:	6853      	ldr	r3, [r2, #4]
 800bf9e:	480b      	ldr	r0, [pc, #44]	; (800bfcc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800bfa0:	6123      	str	r3, [r4, #16]
 800bfa2:	bd10      	pop	{r4, pc}
 800bfa4:	4b0a      	ldr	r3, [pc, #40]	; (800bfd0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	6013      	str	r3, [r2, #0]
 800bfaa:	e7da      	b.n	800bf62 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x2e>
 800bfac:	4a08      	ldr	r2, [pc, #32]	; (800bfd0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800bfae:	6812      	ldr	r2, [r2, #0]
 800bfb0:	601a      	str	r2, [r3, #0]
 800bfb2:	e7de      	b.n	800bf72 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x3e>
 800bfb4:	4b06      	ldr	r3, [pc, #24]	; (800bfd0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	6013      	str	r3, [r2, #0]
 800bfba:	e7ef      	b.n	800bf9c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x68>
 800bfbc:	4a04      	ldr	r2, [pc, #16]	; (800bfd0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800bfbe:	6812      	ldr	r2, [r2, #0]
 800bfc0:	601a      	str	r2, [r3, #0]
 800bfc2:	e7e6      	b.n	800bf92 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x5e>
 800bfc4:	4b02      	ldr	r3, [pc, #8]	; (800bfd0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	6013      	str	r3, [r2, #0]
 800bfca:	e7de      	b.n	800bf8a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x56>
 800bfcc:	200007b8 	.word	0x200007b8
 800bfd0:	20000a14 	.word	0x20000a14
 800bfd4:	20000738 	.word	0x20000738
 800bfd8:	2000078c 	.word	0x2000078c
 800bfdc:	200004c8 	.word	0x200004c8
 800bfe0:	2000057c 	.word	0x2000057c

0800bfe4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800bfe4:	4800      	ldr	r0, [pc, #0]	; (800bfe8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x4>)
 800bfe6:	4770      	bx	lr
 800bfe8:	20000838 	.word	0x20000838

0800bfec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Response>:
 800bfec:	4800      	ldr	r0, [pc, #0]	; (800bff0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x4>)
 800bfee:	4770      	bx	lr
 800bff0:	20000850 	.word	0x20000850

0800bff4 <_Control_Response__max_serialized_size>:
 800bff4:	2101      	movs	r1, #1
 800bff6:	2000      	movs	r0, #0
 800bff8:	b508      	push	{r3, lr}
 800bffa:	f004 fb8b 	bl	8010714 <ucdr_alignment>
 800bffe:	3001      	adds	r0, #1
 800c000:	bd08      	pop	{r3, pc}
 800c002:	bf00      	nop

0800c004 <_Control_Response__cdr_deserialize>:
 800c004:	b109      	cbz	r1, 800c00a <_Control_Response__cdr_deserialize+0x6>
 800c006:	f003 b837 	b.w	800f078 <ucdr_deserialize_uint8_t>
 800c00a:	4608      	mov	r0, r1
 800c00c:	4770      	bx	lr
 800c00e:	bf00      	nop

0800c010 <_Control_Event__max_serialized_size>:
 800c010:	b500      	push	{lr}
 800c012:	b083      	sub	sp, #12
 800c014:	2301      	movs	r3, #1
 800c016:	2100      	movs	r1, #0
 800c018:	f10d 0007 	add.w	r0, sp, #7
 800c01c:	f88d 3007 	strb.w	r3, [sp, #7]
 800c020:	f002 fd66 	bl	800eaf0 <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800c024:	b003      	add	sp, #12
 800c026:	f85d fb04 	ldr.w	pc, [sp], #4
 800c02a:	bf00      	nop

0800c02c <get_serialized_size_racs_services__srv__Control_Request>:
 800c02c:	b1b0      	cbz	r0, 800c05c <get_serialized_size_racs_services__srv__Control_Request+0x30>
 800c02e:	b538      	push	{r3, r4, r5, lr}
 800c030:	460d      	mov	r5, r1
 800c032:	2101      	movs	r1, #1
 800c034:	4628      	mov	r0, r5
 800c036:	f004 fb6d 	bl	8010714 <ucdr_alignment>
 800c03a:	1c6b      	adds	r3, r5, #1
 800c03c:	2101      	movs	r1, #1
 800c03e:	f1c5 050c 	rsb	r5, r5, #12
 800c042:	181c      	adds	r4, r3, r0
 800c044:	4620      	mov	r0, r4
 800c046:	f004 fb65 	bl	8010714 <ucdr_alignment>
 800c04a:	3001      	adds	r0, #1
 800c04c:	2102      	movs	r1, #2
 800c04e:	4404      	add	r4, r0
 800c050:	4620      	mov	r0, r4
 800c052:	f004 fb5f 	bl	8010714 <ucdr_alignment>
 800c056:	4428      	add	r0, r5
 800c058:	4420      	add	r0, r4
 800c05a:	bd38      	pop	{r3, r4, r5, pc}
 800c05c:	4770      	bx	lr
 800c05e:	bf00      	nop

0800c060 <get_serialized_size_racs_services__srv__Control_Response>:
 800c060:	b138      	cbz	r0, 800c072 <get_serialized_size_racs_services__srv__Control_Response+0x12>
 800c062:	b508      	push	{r3, lr}
 800c064:	460b      	mov	r3, r1
 800c066:	2101      	movs	r1, #1
 800c068:	4618      	mov	r0, r3
 800c06a:	f004 fb53 	bl	8010714 <ucdr_alignment>
 800c06e:	3001      	adds	r0, #1
 800c070:	bd08      	pop	{r3, pc}
 800c072:	4770      	bx	lr

0800c074 <_Control_Request__cdr_deserialize>:
 800c074:	b538      	push	{r3, r4, r5, lr}
 800c076:	460c      	mov	r4, r1
 800c078:	b169      	cbz	r1, 800c096 <_Control_Request__cdr_deserialize+0x22>
 800c07a:	4605      	mov	r5, r0
 800c07c:	f002 fffc 	bl	800f078 <ucdr_deserialize_uint8_t>
 800c080:	1c61      	adds	r1, r4, #1
 800c082:	4628      	mov	r0, r5
 800c084:	f002 fff8 	bl	800f078 <ucdr_deserialize_uint8_t>
 800c088:	1ca1      	adds	r1, r4, #2
 800c08a:	4628      	mov	r0, r5
 800c08c:	2206      	movs	r2, #6
 800c08e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c092:	f002 bf59 	b.w	800ef48 <ucdr_deserialize_array_int16_t>
 800c096:	4608      	mov	r0, r1
 800c098:	bd38      	pop	{r3, r4, r5, pc}
 800c09a:	bf00      	nop

0800c09c <_Control_Response__cdr_serialize>:
 800c09c:	460a      	mov	r2, r1
 800c09e:	b118      	cbz	r0, 800c0a8 <_Control_Response__cdr_serialize+0xc>
 800c0a0:	7801      	ldrb	r1, [r0, #0]
 800c0a2:	4610      	mov	r0, r2
 800c0a4:	f002 bfd2 	b.w	800f04c <ucdr_serialize_uint8_t>
 800c0a8:	4770      	bx	lr
 800c0aa:	bf00      	nop

0800c0ac <_Control_Request__cdr_serialize>:
 800c0ac:	b188      	cbz	r0, 800c0d2 <_Control_Request__cdr_serialize+0x26>
 800c0ae:	b538      	push	{r3, r4, r5, lr}
 800c0b0:	460d      	mov	r5, r1
 800c0b2:	4604      	mov	r4, r0
 800c0b4:	7801      	ldrb	r1, [r0, #0]
 800c0b6:	4628      	mov	r0, r5
 800c0b8:	f002 ffc8 	bl	800f04c <ucdr_serialize_uint8_t>
 800c0bc:	7861      	ldrb	r1, [r4, #1]
 800c0be:	4628      	mov	r0, r5
 800c0c0:	f002 ffc4 	bl	800f04c <ucdr_serialize_uint8_t>
 800c0c4:	1ca1      	adds	r1, r4, #2
 800c0c6:	4628      	mov	r0, r5
 800c0c8:	2206      	movs	r2, #6
 800c0ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0ce:	f002 bee5 	b.w	800ee9c <ucdr_serialize_array_int16_t>
 800c0d2:	4770      	bx	lr

0800c0d4 <get_serialized_size_racs_services__srv__Control_Event.part.0>:
 800c0d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0d8:	460e      	mov	r6, r1
 800c0da:	4605      	mov	r5, r0
 800c0dc:	f002 fc6e 	bl	800e9bc <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800c0e0:	2104      	movs	r1, #4
 800c0e2:	eb06 0800 	add.w	r8, r6, r0
 800c0e6:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
 800c0ea:	4640      	mov	r0, r8
 800c0ec:	f004 fb12 	bl	8010714 <ucdr_alignment>
 800c0f0:	3004      	adds	r0, #4
 800c0f2:	4480      	add	r8, r0
 800c0f4:	f1b9 0f00 	cmp.w	r9, #0
 800c0f8:	d019      	beq.n	800c12e <get_serialized_size_racs_services__srv__Control_Event.part.0+0x5a>
 800c0fa:	2700      	movs	r7, #0
 800c0fc:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800c17c <get_serialized_size_racs_services__srv__Control_Event.part.0+0xa8>
 800c100:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800c102:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
 800c106:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c10a:	4641      	mov	r1, r8
 800c10c:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800c110:	3701      	adds	r7, #1
 800c112:	695b      	ldr	r3, [r3, #20]
 800c114:	4798      	blx	r3
 800c116:	4604      	mov	r4, r0
 800c118:	4640      	mov	r0, r8
 800c11a:	2c04      	cmp	r4, #4
 800c11c:	4621      	mov	r1, r4
 800c11e:	bf28      	it	cs
 800c120:	2104      	movcs	r1, #4
 800c122:	f004 faf7 	bl	8010714 <ucdr_alignment>
 800c126:	45b9      	cmp	r9, r7
 800c128:	4420      	add	r0, r4
 800c12a:	4480      	add	r8, r0
 800c12c:	d1e8      	bne.n	800c100 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x2c>
 800c12e:	4640      	mov	r0, r8
 800c130:	2104      	movs	r1, #4
 800c132:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800c134:	f004 faee 	bl	8010714 <ucdr_alignment>
 800c138:	4480      	add	r8, r0
 800c13a:	f108 0804 	add.w	r8, r8, #4
 800c13e:	b1c7      	cbz	r7, 800c172 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x9e>
 800c140:	f04f 0900 	mov.w	r9, #0
 800c144:	f8df a038 	ldr.w	sl, [pc, #56]	; 800c180 <get_serialized_size_racs_services__srv__Control_Event.part.0+0xac>
 800c148:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800c14a:	4641      	mov	r1, r8
 800c14c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c150:	4448      	add	r0, r9
 800c152:	f109 0901 	add.w	r9, r9, #1
 800c156:	695b      	ldr	r3, [r3, #20]
 800c158:	4798      	blx	r3
 800c15a:	4604      	mov	r4, r0
 800c15c:	4640      	mov	r0, r8
 800c15e:	2c04      	cmp	r4, #4
 800c160:	4621      	mov	r1, r4
 800c162:	bf28      	it	cs
 800c164:	2104      	movcs	r1, #4
 800c166:	f004 fad5 	bl	8010714 <ucdr_alignment>
 800c16a:	454f      	cmp	r7, r9
 800c16c:	4420      	add	r0, r4
 800c16e:	4480      	add	r8, r0
 800c170:	d1ea      	bne.n	800c148 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x74>
 800c172:	eba8 0006 	sub.w	r0, r8, r6
 800c176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c17a:	bf00      	nop
 800c17c:	20000838 	.word	0x20000838
 800c180:	20000850 	.word	0x20000850

0800c184 <get_serialized_size_racs_services__srv__Control_Event>:
 800c184:	b108      	cbz	r0, 800c18a <get_serialized_size_racs_services__srv__Control_Event+0x6>
 800c186:	f7ff bfa5 	b.w	800c0d4 <get_serialized_size_racs_services__srv__Control_Event.part.0>
 800c18a:	4770      	bx	lr

0800c18c <_Control_Event__get_serialized_size>:
 800c18c:	b110      	cbz	r0, 800c194 <_Control_Event__get_serialized_size+0x8>
 800c18e:	2100      	movs	r1, #0
 800c190:	f7ff bfa0 	b.w	800c0d4 <get_serialized_size_racs_services__srv__Control_Event.part.0>
 800c194:	4770      	bx	lr
 800c196:	bf00      	nop

0800c198 <_Control_Event__cdr_deserialize>:
 800c198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c19c:	460c      	mov	r4, r1
 800c19e:	b082      	sub	sp, #8
 800c1a0:	2900      	cmp	r1, #0
 800c1a2:	d045      	beq.n	800c230 <_Control_Event__cdr_deserialize+0x98>
 800c1a4:	4607      	mov	r7, r0
 800c1a6:	f002 fcc9 	bl	800eb3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	4621      	mov	r1, r4
 800c1ae:	4638      	mov	r0, r7
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	68db      	ldr	r3, [r3, #12]
 800c1b4:	4798      	blx	r3
 800c1b6:	4638      	mov	r0, r7
 800c1b8:	a901      	add	r1, sp, #4
 800c1ba:	f003 fa8d 	bl	800f6d8 <ucdr_deserialize_uint32_t>
 800c1be:	9b01      	ldr	r3, [sp, #4]
 800c1c0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c1c2:	429a      	cmp	r2, r3
 800c1c4:	d330      	bcc.n	800c228 <_Control_Event__cdr_deserialize+0x90>
 800c1c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c1c8:	b193      	cbz	r3, 800c1f0 <_Control_Event__cdr_deserialize+0x58>
 800c1ca:	2500      	movs	r5, #0
 800c1cc:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800c23c <_Control_Event__cdr_deserialize+0xa4>
 800c1d0:	462e      	mov	r6, r5
 800c1d2:	e002      	b.n	800c1da <_Control_Event__cdr_deserialize+0x42>
 800c1d4:	9b01      	ldr	r3, [sp, #4]
 800c1d6:	429e      	cmp	r6, r3
 800c1d8:	d20a      	bcs.n	800c1f0 <_Control_Event__cdr_deserialize+0x58>
 800c1da:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800c1dc:	4638      	mov	r0, r7
 800c1de:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c1e2:	3601      	adds	r6, #1
 800c1e4:	4429      	add	r1, r5
 800c1e6:	350e      	adds	r5, #14
 800c1e8:	68db      	ldr	r3, [r3, #12]
 800c1ea:	4798      	blx	r3
 800c1ec:	2800      	cmp	r0, #0
 800c1ee:	d1f1      	bne.n	800c1d4 <_Control_Event__cdr_deserialize+0x3c>
 800c1f0:	a901      	add	r1, sp, #4
 800c1f2:	4638      	mov	r0, r7
 800c1f4:	f003 fa70 	bl	800f6d8 <ucdr_deserialize_uint32_t>
 800c1f8:	9b01      	ldr	r3, [sp, #4]
 800c1fa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d313      	bcc.n	800c228 <_Control_Event__cdr_deserialize+0x90>
 800c200:	63a3      	str	r3, [r4, #56]	; 0x38
 800c202:	b193      	cbz	r3, 800c22a <_Control_Event__cdr_deserialize+0x92>
 800c204:	2500      	movs	r5, #0
 800c206:	4e0c      	ldr	r6, [pc, #48]	; (800c238 <_Control_Event__cdr_deserialize+0xa0>)
 800c208:	e002      	b.n	800c210 <_Control_Event__cdr_deserialize+0x78>
 800c20a:	9b01      	ldr	r3, [sp, #4]
 800c20c:	429d      	cmp	r5, r3
 800c20e:	d20c      	bcs.n	800c22a <_Control_Event__cdr_deserialize+0x92>
 800c210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c212:	4638      	mov	r0, r7
 800c214:	6873      	ldr	r3, [r6, #4]
 800c216:	4429      	add	r1, r5
 800c218:	3501      	adds	r5, #1
 800c21a:	68db      	ldr	r3, [r3, #12]
 800c21c:	4798      	blx	r3
 800c21e:	2800      	cmp	r0, #0
 800c220:	d1f3      	bne.n	800c20a <_Control_Event__cdr_deserialize+0x72>
 800c222:	b002      	add	sp, #8
 800c224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c228:	2000      	movs	r0, #0
 800c22a:	b002      	add	sp, #8
 800c22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c230:	4608      	mov	r0, r1
 800c232:	b002      	add	sp, #8
 800c234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c238:	20000850 	.word	0x20000850
 800c23c:	20000838 	.word	0x20000838

0800c240 <_Control_Event__cdr_serialize>:
 800c240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c244:	2800      	cmp	r0, #0
 800c246:	d03b      	beq.n	800c2c0 <_Control_Event__cdr_serialize+0x80>
 800c248:	4605      	mov	r5, r0
 800c24a:	460e      	mov	r6, r1
 800c24c:	f002 fc76 	bl	800eb3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c250:	4603      	mov	r3, r0
 800c252:	4631      	mov	r1, r6
 800c254:	4628      	mov	r0, r5
 800c256:	685b      	ldr	r3, [r3, #4]
 800c258:	689b      	ldr	r3, [r3, #8]
 800c25a:	4798      	blx	r3
 800c25c:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800c25e:	4630      	mov	r0, r6
 800c260:	4639      	mov	r1, r7
 800c262:	f003 f909 	bl	800f478 <ucdr_serialize_uint32_t>
 800c266:	b198      	cbz	r0, 800c290 <_Control_Event__cdr_serialize+0x50>
 800c268:	b197      	cbz	r7, 800c290 <_Control_Event__cdr_serialize+0x50>
 800c26a:	2400      	movs	r4, #0
 800c26c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800c2cc <_Control_Event__cdr_serialize+0x8c>
 800c270:	e001      	b.n	800c276 <_Control_Event__cdr_serialize+0x36>
 800c272:	42a7      	cmp	r7, r4
 800c274:	d00c      	beq.n	800c290 <_Control_Event__cdr_serialize+0x50>
 800c276:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800c27a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800c27c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c280:	4631      	mov	r1, r6
 800c282:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800c286:	3401      	adds	r4, #1
 800c288:	689b      	ldr	r3, [r3, #8]
 800c28a:	4798      	blx	r3
 800c28c:	2800      	cmp	r0, #0
 800c28e:	d1f0      	bne.n	800c272 <_Control_Event__cdr_serialize+0x32>
 800c290:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800c292:	4630      	mov	r0, r6
 800c294:	4639      	mov	r1, r7
 800c296:	f003 f8ef 	bl	800f478 <ucdr_serialize_uint32_t>
 800c29a:	4680      	mov	r8, r0
 800c29c:	b180      	cbz	r0, 800c2c0 <_Control_Event__cdr_serialize+0x80>
 800c29e:	b18f      	cbz	r7, 800c2c4 <_Control_Event__cdr_serialize+0x84>
 800c2a0:	2400      	movs	r4, #0
 800c2a2:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800c2d0 <_Control_Event__cdr_serialize+0x90>
 800c2a6:	e001      	b.n	800c2ac <_Control_Event__cdr_serialize+0x6c>
 800c2a8:	42a7      	cmp	r7, r4
 800c2aa:	d00b      	beq.n	800c2c4 <_Control_Event__cdr_serialize+0x84>
 800c2ac:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800c2ae:	4631      	mov	r1, r6
 800c2b0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c2b4:	4420      	add	r0, r4
 800c2b6:	3401      	adds	r4, #1
 800c2b8:	689b      	ldr	r3, [r3, #8]
 800c2ba:	4798      	blx	r3
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	d1f3      	bne.n	800c2a8 <_Control_Event__cdr_serialize+0x68>
 800c2c0:	f04f 0800 	mov.w	r8, #0
 800c2c4:	4640      	mov	r0, r8
 800c2c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2ca:	bf00      	nop
 800c2cc:	20000838 	.word	0x20000838
 800c2d0:	20000850 	.word	0x20000850

0800c2d4 <_Control_Response__get_serialized_size>:
 800c2d4:	b130      	cbz	r0, 800c2e4 <_Control_Response__get_serialized_size+0x10>
 800c2d6:	2101      	movs	r1, #1
 800c2d8:	2000      	movs	r0, #0
 800c2da:	b508      	push	{r3, lr}
 800c2dc:	f004 fa1a 	bl	8010714 <ucdr_alignment>
 800c2e0:	3001      	adds	r0, #1
 800c2e2:	bd08      	pop	{r3, pc}
 800c2e4:	4770      	bx	lr
 800c2e6:	bf00      	nop

0800c2e8 <_Control_Request__get_serialized_size>:
 800c2e8:	b190      	cbz	r0, 800c310 <_Control_Request__get_serialized_size+0x28>
 800c2ea:	2101      	movs	r1, #1
 800c2ec:	2000      	movs	r0, #0
 800c2ee:	b510      	push	{r4, lr}
 800c2f0:	f004 fa10 	bl	8010714 <ucdr_alignment>
 800c2f4:	2101      	movs	r1, #1
 800c2f6:	1844      	adds	r4, r0, r1
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	f004 fa0b 	bl	8010714 <ucdr_alignment>
 800c2fe:	3001      	adds	r0, #1
 800c300:	2102      	movs	r1, #2
 800c302:	4404      	add	r4, r0
 800c304:	4620      	mov	r0, r4
 800c306:	f004 fa05 	bl	8010714 <ucdr_alignment>
 800c30a:	300c      	adds	r0, #12
 800c30c:	4420      	add	r0, r4
 800c30e:	bd10      	pop	{r4, pc}
 800c310:	4770      	bx	lr
 800c312:	bf00      	nop

0800c314 <_Control_Request__max_serialized_size>:
 800c314:	b538      	push	{r3, r4, r5, lr}
 800c316:	2101      	movs	r1, #1
 800c318:	2000      	movs	r0, #0
 800c31a:	f004 f9fb 	bl	8010714 <ucdr_alignment>
 800c31e:	2101      	movs	r1, #1
 800c320:	1845      	adds	r5, r0, r1
 800c322:	4628      	mov	r0, r5
 800c324:	f004 f9f6 	bl	8010714 <ucdr_alignment>
 800c328:	1c44      	adds	r4, r0, #1
 800c32a:	2102      	movs	r1, #2
 800c32c:	442c      	add	r4, r5
 800c32e:	4620      	mov	r0, r4
 800c330:	f004 f9f0 	bl	8010714 <ucdr_alignment>
 800c334:	300c      	adds	r0, #12
 800c336:	4420      	add	r0, r4
 800c338:	bd38      	pop	{r3, r4, r5, pc}
 800c33a:	bf00      	nop

0800c33c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Event>:
 800c33c:	4800      	ldr	r0, [pc, #0]	; (800c340 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x4>)
 800c33e:	4770      	bx	lr
 800c340:	20000820 	.word	0x20000820

0800c344 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Control>:
 800c344:	4800      	ldr	r0, [pc, #0]	; (800c348 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Control+0x4>)
 800c346:	4770      	bx	lr
 800c348:	200007f4 	.word	0x200007f4

0800c34c <get_serialized_size_racs_services__msg__DirectAccess>:
 800c34c:	b180      	cbz	r0, 800c370 <get_serialized_size_racs_services__msg__DirectAccess+0x24>
 800c34e:	b538      	push	{r3, r4, r5, lr}
 800c350:	460d      	mov	r5, r1
 800c352:	2101      	movs	r1, #1
 800c354:	4628      	mov	r0, r5
 800c356:	f004 f9dd 	bl	8010714 <ucdr_alignment>
 800c35a:	1c6b      	adds	r3, r5, #1
 800c35c:	f1c5 050c 	rsb	r5, r5, #12
 800c360:	2102      	movs	r1, #2
 800c362:	181c      	adds	r4, r3, r0
 800c364:	4620      	mov	r0, r4
 800c366:	f004 f9d5 	bl	8010714 <ucdr_alignment>
 800c36a:	4428      	add	r0, r5
 800c36c:	4420      	add	r0, r4
 800c36e:	bd38      	pop	{r3, r4, r5, pc}
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop

0800c374 <_DirectAccess__cdr_deserialize>:
 800c374:	b538      	push	{r3, r4, r5, lr}
 800c376:	460c      	mov	r4, r1
 800c378:	b149      	cbz	r1, 800c38e <_DirectAccess__cdr_deserialize+0x1a>
 800c37a:	4605      	mov	r5, r0
 800c37c:	f002 fe7c 	bl	800f078 <ucdr_deserialize_uint8_t>
 800c380:	1ca1      	adds	r1, r4, #2
 800c382:	2206      	movs	r2, #6
 800c384:	4628      	mov	r0, r5
 800c386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c38a:	f002 bddd 	b.w	800ef48 <ucdr_deserialize_array_int16_t>
 800c38e:	4608      	mov	r0, r1
 800c390:	bd38      	pop	{r3, r4, r5, pc}
 800c392:	bf00      	nop

0800c394 <_DirectAccess__cdr_serialize>:
 800c394:	b170      	cbz	r0, 800c3b4 <_DirectAccess__cdr_serialize+0x20>
 800c396:	b538      	push	{r3, r4, r5, lr}
 800c398:	4604      	mov	r4, r0
 800c39a:	460d      	mov	r5, r1
 800c39c:	4608      	mov	r0, r1
 800c39e:	f814 1b02 	ldrb.w	r1, [r4], #2
 800c3a2:	f002 fe53 	bl	800f04c <ucdr_serialize_uint8_t>
 800c3a6:	4628      	mov	r0, r5
 800c3a8:	4621      	mov	r1, r4
 800c3aa:	2206      	movs	r2, #6
 800c3ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3b0:	f002 bd74 	b.w	800ee9c <ucdr_serialize_array_int16_t>
 800c3b4:	4770      	bx	lr
 800c3b6:	bf00      	nop

0800c3b8 <_DirectAccess__get_serialized_size>:
 800c3b8:	b160      	cbz	r0, 800c3d4 <_DirectAccess__get_serialized_size+0x1c>
 800c3ba:	2101      	movs	r1, #1
 800c3bc:	2000      	movs	r0, #0
 800c3be:	b510      	push	{r4, lr}
 800c3c0:	f004 f9a8 	bl	8010714 <ucdr_alignment>
 800c3c4:	1c44      	adds	r4, r0, #1
 800c3c6:	2102      	movs	r1, #2
 800c3c8:	4620      	mov	r0, r4
 800c3ca:	f004 f9a3 	bl	8010714 <ucdr_alignment>
 800c3ce:	300c      	adds	r0, #12
 800c3d0:	4420      	add	r0, r4
 800c3d2:	bd10      	pop	{r4, pc}
 800c3d4:	4770      	bx	lr
 800c3d6:	bf00      	nop

0800c3d8 <_DirectAccess__max_serialized_size>:
 800c3d8:	b510      	push	{r4, lr}
 800c3da:	2101      	movs	r1, #1
 800c3dc:	2000      	movs	r0, #0
 800c3de:	f004 f999 	bl	8010714 <ucdr_alignment>
 800c3e2:	1c44      	adds	r4, r0, #1
 800c3e4:	2102      	movs	r1, #2
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	f004 f994 	bl	8010714 <ucdr_alignment>
 800c3ec:	300c      	adds	r0, #12
 800c3ee:	4420      	add	r0, r4
 800c3f0:	bd10      	pop	{r4, pc}
 800c3f2:	bf00      	nop

0800c3f4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800c3f4:	4800      	ldr	r0, [pc, #0]	; (800c3f8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x4>)
 800c3f6:	4770      	bx	lr
 800c3f8:	200008bc 	.word	0x200008bc

0800c3fc <get_serialized_size_racs_services__msg__Feedback>:
 800c3fc:	b180      	cbz	r0, 800c420 <get_serialized_size_racs_services__msg__Feedback+0x24>
 800c3fe:	b538      	push	{r3, r4, r5, lr}
 800c400:	460d      	mov	r5, r1
 800c402:	2101      	movs	r1, #1
 800c404:	4628      	mov	r0, r5
 800c406:	f004 f985 	bl	8010714 <ucdr_alignment>
 800c40a:	1c6b      	adds	r3, r5, #1
 800c40c:	f1c5 050c 	rsb	r5, r5, #12
 800c410:	2102      	movs	r1, #2
 800c412:	181c      	adds	r4, r3, r0
 800c414:	4620      	mov	r0, r4
 800c416:	f004 f97d 	bl	8010714 <ucdr_alignment>
 800c41a:	4428      	add	r0, r5
 800c41c:	4420      	add	r0, r4
 800c41e:	bd38      	pop	{r3, r4, r5, pc}
 800c420:	4770      	bx	lr
 800c422:	bf00      	nop

0800c424 <_Feedback__cdr_deserialize>:
 800c424:	b538      	push	{r3, r4, r5, lr}
 800c426:	460c      	mov	r4, r1
 800c428:	b149      	cbz	r1, 800c43e <_Feedback__cdr_deserialize+0x1a>
 800c42a:	4605      	mov	r5, r0
 800c42c:	f002 fe24 	bl	800f078 <ucdr_deserialize_uint8_t>
 800c430:	1ca1      	adds	r1, r4, #2
 800c432:	2206      	movs	r2, #6
 800c434:	4628      	mov	r0, r5
 800c436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c43a:	f002 bd85 	b.w	800ef48 <ucdr_deserialize_array_int16_t>
 800c43e:	4608      	mov	r0, r1
 800c440:	bd38      	pop	{r3, r4, r5, pc}
 800c442:	bf00      	nop

0800c444 <_Feedback__cdr_serialize>:
 800c444:	b170      	cbz	r0, 800c464 <_Feedback__cdr_serialize+0x20>
 800c446:	b538      	push	{r3, r4, r5, lr}
 800c448:	4604      	mov	r4, r0
 800c44a:	460d      	mov	r5, r1
 800c44c:	4608      	mov	r0, r1
 800c44e:	f814 1b02 	ldrb.w	r1, [r4], #2
 800c452:	f002 fdfb 	bl	800f04c <ucdr_serialize_uint8_t>
 800c456:	4628      	mov	r0, r5
 800c458:	4621      	mov	r1, r4
 800c45a:	2206      	movs	r2, #6
 800c45c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c460:	f002 bd1c 	b.w	800ee9c <ucdr_serialize_array_int16_t>
 800c464:	4770      	bx	lr
 800c466:	bf00      	nop

0800c468 <_Feedback__get_serialized_size>:
 800c468:	b160      	cbz	r0, 800c484 <_Feedback__get_serialized_size+0x1c>
 800c46a:	2101      	movs	r1, #1
 800c46c:	2000      	movs	r0, #0
 800c46e:	b510      	push	{r4, lr}
 800c470:	f004 f950 	bl	8010714 <ucdr_alignment>
 800c474:	1c44      	adds	r4, r0, #1
 800c476:	2102      	movs	r1, #2
 800c478:	4620      	mov	r0, r4
 800c47a:	f004 f94b 	bl	8010714 <ucdr_alignment>
 800c47e:	300c      	adds	r0, #12
 800c480:	4420      	add	r0, r4
 800c482:	bd10      	pop	{r4, pc}
 800c484:	4770      	bx	lr
 800c486:	bf00      	nop

0800c488 <_Feedback__max_serialized_size>:
 800c488:	b510      	push	{r4, lr}
 800c48a:	2101      	movs	r1, #1
 800c48c:	2000      	movs	r0, #0
 800c48e:	f004 f941 	bl	8010714 <ucdr_alignment>
 800c492:	1c44      	adds	r4, r0, #1
 800c494:	2102      	movs	r1, #2
 800c496:	4620      	mov	r0, r4
 800c498:	f004 f93c 	bl	8010714 <ucdr_alignment>
 800c49c:	300c      	adds	r0, #12
 800c49e:	4420      	add	r0, r4
 800c4a0:	bd10      	pop	{r4, pc}
 800c4a2:	bf00      	nop

0800c4a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800c4a4:	4800      	ldr	r0, [pc, #0]	; (800c4a8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Feedback+0x4>)
 800c4a6:	4770      	bx	lr
 800c4a8:	200008f0 	.word	0x200008f0

0800c4ac <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800c4ac:	4800      	ldr	r0, [pc, #0]	; (800c4b0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x4>)
 800c4ae:	4770      	bx	lr
 800c4b0:	20000978 	.word	0x20000978

0800c4b4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Response>:
 800c4b4:	4800      	ldr	r0, [pc, #0]	; (800c4b8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x4>)
 800c4b6:	4770      	bx	lr
 800c4b8:	20000990 	.word	0x20000990

0800c4bc <_Setup_Response__max_serialized_size>:
 800c4bc:	2101      	movs	r1, #1
 800c4be:	2000      	movs	r0, #0
 800c4c0:	b508      	push	{r3, lr}
 800c4c2:	f004 f927 	bl	8010714 <ucdr_alignment>
 800c4c6:	3001      	adds	r0, #1
 800c4c8:	bd08      	pop	{r3, pc}
 800c4ca:	bf00      	nop

0800c4cc <_Setup_Response__cdr_deserialize>:
 800c4cc:	b109      	cbz	r1, 800c4d2 <_Setup_Response__cdr_deserialize+0x6>
 800c4ce:	f002 bdd3 	b.w	800f078 <ucdr_deserialize_uint8_t>
 800c4d2:	4608      	mov	r0, r1
 800c4d4:	4770      	bx	lr
 800c4d6:	bf00      	nop

0800c4d8 <_Setup_Event__max_serialized_size>:
 800c4d8:	b500      	push	{lr}
 800c4da:	b083      	sub	sp, #12
 800c4dc:	2301      	movs	r3, #1
 800c4de:	2100      	movs	r1, #0
 800c4e0:	f10d 0007 	add.w	r0, sp, #7
 800c4e4:	f88d 3007 	strb.w	r3, [sp, #7]
 800c4e8:	f002 fb02 	bl	800eaf0 <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800c4ec:	b003      	add	sp, #12
 800c4ee:	f85d fb04 	ldr.w	pc, [sp], #4
 800c4f2:	bf00      	nop

0800c4f4 <get_serialized_size_racs_services__srv__Setup_Request.part.0>:
 800c4f4:	b570      	push	{r4, r5, r6, lr}
 800c4f6:	4604      	mov	r4, r0
 800c4f8:	2101      	movs	r1, #1
 800c4fa:	f004 f90b 	bl	8010714 <ucdr_alignment>
 800c4fe:	2104      	movs	r1, #4
 800c500:	1c65      	adds	r5, r4, #1
 800c502:	f1c4 0404 	rsb	r4, r4, #4
 800c506:	4405      	add	r5, r0
 800c508:	4628      	mov	r0, r5
 800c50a:	f004 f903 	bl	8010714 <ucdr_alignment>
 800c50e:	2104      	movs	r1, #4
 800c510:	1846      	adds	r6, r0, r1
 800c512:	442e      	add	r6, r5
 800c514:	4630      	mov	r0, r6
 800c516:	f004 f8fd 	bl	8010714 <ucdr_alignment>
 800c51a:	2104      	movs	r1, #4
 800c51c:	1845      	adds	r5, r0, r1
 800c51e:	442e      	add	r6, r5
 800c520:	4630      	mov	r0, r6
 800c522:	f004 f8f7 	bl	8010714 <ucdr_alignment>
 800c526:	2104      	movs	r1, #4
 800c528:	4408      	add	r0, r1
 800c52a:	4406      	add	r6, r0
 800c52c:	4630      	mov	r0, r6
 800c52e:	f004 f8f1 	bl	8010714 <ucdr_alignment>
 800c532:	2104      	movs	r1, #4
 800c534:	1845      	adds	r5, r0, r1
 800c536:	4435      	add	r5, r6
 800c538:	4628      	mov	r0, r5
 800c53a:	f004 f8eb 	bl	8010714 <ucdr_alignment>
 800c53e:	2104      	movs	r1, #4
 800c540:	4408      	add	r0, r1
 800c542:	4405      	add	r5, r0
 800c544:	4628      	mov	r0, r5
 800c546:	f004 f8e5 	bl	8010714 <ucdr_alignment>
 800c54a:	4420      	add	r0, r4
 800c54c:	4428      	add	r0, r5
 800c54e:	bd70      	pop	{r4, r5, r6, pc}

0800c550 <get_serialized_size_racs_services__srv__Setup_Request>:
 800c550:	b110      	cbz	r0, 800c558 <get_serialized_size_racs_services__srv__Setup_Request+0x8>
 800c552:	4608      	mov	r0, r1
 800c554:	f7ff bfce 	b.w	800c4f4 <get_serialized_size_racs_services__srv__Setup_Request.part.0>
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop

0800c55c <_Setup_Request__get_serialized_size>:
 800c55c:	b110      	cbz	r0, 800c564 <_Setup_Request__get_serialized_size+0x8>
 800c55e:	2000      	movs	r0, #0
 800c560:	f7ff bfc8 	b.w	800c4f4 <get_serialized_size_racs_services__srv__Setup_Request.part.0>
 800c564:	4770      	bx	lr
 800c566:	bf00      	nop

0800c568 <get_serialized_size_racs_services__srv__Setup_Response>:
 800c568:	b138      	cbz	r0, 800c57a <get_serialized_size_racs_services__srv__Setup_Response+0x12>
 800c56a:	b508      	push	{r3, lr}
 800c56c:	460b      	mov	r3, r1
 800c56e:	2101      	movs	r1, #1
 800c570:	4618      	mov	r0, r3
 800c572:	f004 f8cf 	bl	8010714 <ucdr_alignment>
 800c576:	3001      	adds	r0, #1
 800c578:	bd08      	pop	{r3, pc}
 800c57a:	4770      	bx	lr

0800c57c <_Setup_Request__cdr_deserialize>:
 800c57c:	b538      	push	{r3, r4, r5, lr}
 800c57e:	460c      	mov	r4, r1
 800c580:	b309      	cbz	r1, 800c5c6 <_Setup_Request__cdr_deserialize+0x4a>
 800c582:	4605      	mov	r5, r0
 800c584:	f002 fd78 	bl	800f078 <ucdr_deserialize_uint8_t>
 800c588:	1d21      	adds	r1, r4, #4
 800c58a:	4628      	mov	r0, r5
 800c58c:	f003 ffda 	bl	8010544 <ucdr_deserialize_float>
 800c590:	f104 0108 	add.w	r1, r4, #8
 800c594:	4628      	mov	r0, r5
 800c596:	f003 ffd5 	bl	8010544 <ucdr_deserialize_float>
 800c59a:	f104 010c 	add.w	r1, r4, #12
 800c59e:	4628      	mov	r0, r5
 800c5a0:	f003 ffd0 	bl	8010544 <ucdr_deserialize_float>
 800c5a4:	f104 0110 	add.w	r1, r4, #16
 800c5a8:	4628      	mov	r0, r5
 800c5aa:	f003 ffcb 	bl	8010544 <ucdr_deserialize_float>
 800c5ae:	f104 0114 	add.w	r1, r4, #20
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	f003 ffc6 	bl	8010544 <ucdr_deserialize_float>
 800c5b8:	f104 0118 	add.w	r1, r4, #24
 800c5bc:	4628      	mov	r0, r5
 800c5be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5c2:	f003 bfbf 	b.w	8010544 <ucdr_deserialize_float>
 800c5c6:	4608      	mov	r0, r1
 800c5c8:	bd38      	pop	{r3, r4, r5, pc}
 800c5ca:	bf00      	nop

0800c5cc <_Setup_Response__cdr_serialize>:
 800c5cc:	460a      	mov	r2, r1
 800c5ce:	b118      	cbz	r0, 800c5d8 <_Setup_Response__cdr_serialize+0xc>
 800c5d0:	7801      	ldrb	r1, [r0, #0]
 800c5d2:	4610      	mov	r0, r2
 800c5d4:	f002 bd3a 	b.w	800f04c <ucdr_serialize_uint8_t>
 800c5d8:	4770      	bx	lr
 800c5da:	bf00      	nop

0800c5dc <_Setup_Request__cdr_serialize>:
 800c5dc:	b330      	cbz	r0, 800c62c <_Setup_Request__cdr_serialize+0x50>
 800c5de:	b538      	push	{r3, r4, r5, lr}
 800c5e0:	460d      	mov	r5, r1
 800c5e2:	4604      	mov	r4, r0
 800c5e4:	7801      	ldrb	r1, [r0, #0]
 800c5e6:	4628      	mov	r0, r5
 800c5e8:	f002 fd30 	bl	800f04c <ucdr_serialize_uint8_t>
 800c5ec:	ed94 0a01 	vldr	s0, [r4, #4]
 800c5f0:	4628      	mov	r0, r5
 800c5f2:	f003 ff0f 	bl	8010414 <ucdr_serialize_float>
 800c5f6:	ed94 0a02 	vldr	s0, [r4, #8]
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	f003 ff0a 	bl	8010414 <ucdr_serialize_float>
 800c600:	ed94 0a03 	vldr	s0, [r4, #12]
 800c604:	4628      	mov	r0, r5
 800c606:	f003 ff05 	bl	8010414 <ucdr_serialize_float>
 800c60a:	ed94 0a04 	vldr	s0, [r4, #16]
 800c60e:	4628      	mov	r0, r5
 800c610:	f003 ff00 	bl	8010414 <ucdr_serialize_float>
 800c614:	ed94 0a05 	vldr	s0, [r4, #20]
 800c618:	4628      	mov	r0, r5
 800c61a:	f003 fefb 	bl	8010414 <ucdr_serialize_float>
 800c61e:	ed94 0a06 	vldr	s0, [r4, #24]
 800c622:	4628      	mov	r0, r5
 800c624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c628:	f003 bef4 	b.w	8010414 <ucdr_serialize_float>
 800c62c:	4770      	bx	lr
 800c62e:	bf00      	nop

0800c630 <get_serialized_size_racs_services__srv__Setup_Event.part.0>:
 800c630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c634:	460e      	mov	r6, r1
 800c636:	4605      	mov	r5, r0
 800c638:	f002 f9c0 	bl	800e9bc <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800c63c:	2104      	movs	r1, #4
 800c63e:	eb06 0800 	add.w	r8, r6, r0
 800c642:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
 800c646:	4640      	mov	r0, r8
 800c648:	f004 f864 	bl	8010714 <ucdr_alignment>
 800c64c:	3004      	adds	r0, #4
 800c64e:	4480      	add	r8, r0
 800c650:	f1b9 0f00 	cmp.w	r9, #0
 800c654:	d019      	beq.n	800c68a <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x5a>
 800c656:	2700      	movs	r7, #0
 800c658:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800c6d8 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0xa8>
 800c65c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800c65e:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
 800c662:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c666:	4641      	mov	r1, r8
 800c668:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800c66c:	3701      	adds	r7, #1
 800c66e:	695b      	ldr	r3, [r3, #20]
 800c670:	4798      	blx	r3
 800c672:	4604      	mov	r4, r0
 800c674:	4640      	mov	r0, r8
 800c676:	2c04      	cmp	r4, #4
 800c678:	4621      	mov	r1, r4
 800c67a:	bf28      	it	cs
 800c67c:	2104      	movcs	r1, #4
 800c67e:	f004 f849 	bl	8010714 <ucdr_alignment>
 800c682:	45b9      	cmp	r9, r7
 800c684:	4420      	add	r0, r4
 800c686:	4480      	add	r8, r0
 800c688:	d1e8      	bne.n	800c65c <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x2c>
 800c68a:	4640      	mov	r0, r8
 800c68c:	2104      	movs	r1, #4
 800c68e:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800c690:	f004 f840 	bl	8010714 <ucdr_alignment>
 800c694:	4480      	add	r8, r0
 800c696:	f108 0804 	add.w	r8, r8, #4
 800c69a:	b1c7      	cbz	r7, 800c6ce <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x9e>
 800c69c:	f04f 0900 	mov.w	r9, #0
 800c6a0:	f8df a038 	ldr.w	sl, [pc, #56]	; 800c6dc <get_serialized_size_racs_services__srv__Setup_Event.part.0+0xac>
 800c6a4:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800c6a6:	4641      	mov	r1, r8
 800c6a8:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c6ac:	4448      	add	r0, r9
 800c6ae:	f109 0901 	add.w	r9, r9, #1
 800c6b2:	695b      	ldr	r3, [r3, #20]
 800c6b4:	4798      	blx	r3
 800c6b6:	4604      	mov	r4, r0
 800c6b8:	4640      	mov	r0, r8
 800c6ba:	2c04      	cmp	r4, #4
 800c6bc:	4621      	mov	r1, r4
 800c6be:	bf28      	it	cs
 800c6c0:	2104      	movcs	r1, #4
 800c6c2:	f004 f827 	bl	8010714 <ucdr_alignment>
 800c6c6:	454f      	cmp	r7, r9
 800c6c8:	4420      	add	r0, r4
 800c6ca:	4480      	add	r8, r0
 800c6cc:	d1ea      	bne.n	800c6a4 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x74>
 800c6ce:	eba8 0006 	sub.w	r0, r8, r6
 800c6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6d6:	bf00      	nop
 800c6d8:	20000978 	.word	0x20000978
 800c6dc:	20000990 	.word	0x20000990

0800c6e0 <get_serialized_size_racs_services__srv__Setup_Event>:
 800c6e0:	b108      	cbz	r0, 800c6e6 <get_serialized_size_racs_services__srv__Setup_Event+0x6>
 800c6e2:	f7ff bfa5 	b.w	800c630 <get_serialized_size_racs_services__srv__Setup_Event.part.0>
 800c6e6:	4770      	bx	lr

0800c6e8 <_Setup_Event__get_serialized_size>:
 800c6e8:	b110      	cbz	r0, 800c6f0 <_Setup_Event__get_serialized_size+0x8>
 800c6ea:	2100      	movs	r1, #0
 800c6ec:	f7ff bfa0 	b.w	800c630 <get_serialized_size_racs_services__srv__Setup_Event.part.0>
 800c6f0:	4770      	bx	lr
 800c6f2:	bf00      	nop

0800c6f4 <_Setup_Event__cdr_deserialize>:
 800c6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f8:	460c      	mov	r4, r1
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	2900      	cmp	r1, #0
 800c6fe:	d045      	beq.n	800c78c <_Setup_Event__cdr_deserialize+0x98>
 800c700:	4607      	mov	r7, r0
 800c702:	f002 fa1b 	bl	800eb3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c706:	4603      	mov	r3, r0
 800c708:	4621      	mov	r1, r4
 800c70a:	4638      	mov	r0, r7
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	68db      	ldr	r3, [r3, #12]
 800c710:	4798      	blx	r3
 800c712:	4638      	mov	r0, r7
 800c714:	a901      	add	r1, sp, #4
 800c716:	f002 ffdf 	bl	800f6d8 <ucdr_deserialize_uint32_t>
 800c71a:	9b01      	ldr	r3, [sp, #4]
 800c71c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c71e:	429a      	cmp	r2, r3
 800c720:	d330      	bcc.n	800c784 <_Setup_Event__cdr_deserialize+0x90>
 800c722:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c724:	b193      	cbz	r3, 800c74c <_Setup_Event__cdr_deserialize+0x58>
 800c726:	2500      	movs	r5, #0
 800c728:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800c798 <_Setup_Event__cdr_deserialize+0xa4>
 800c72c:	462e      	mov	r6, r5
 800c72e:	e002      	b.n	800c736 <_Setup_Event__cdr_deserialize+0x42>
 800c730:	9b01      	ldr	r3, [sp, #4]
 800c732:	429e      	cmp	r6, r3
 800c734:	d20a      	bcs.n	800c74c <_Setup_Event__cdr_deserialize+0x58>
 800c736:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800c738:	4638      	mov	r0, r7
 800c73a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c73e:	3601      	adds	r6, #1
 800c740:	4429      	add	r1, r5
 800c742:	351c      	adds	r5, #28
 800c744:	68db      	ldr	r3, [r3, #12]
 800c746:	4798      	blx	r3
 800c748:	2800      	cmp	r0, #0
 800c74a:	d1f1      	bne.n	800c730 <_Setup_Event__cdr_deserialize+0x3c>
 800c74c:	a901      	add	r1, sp, #4
 800c74e:	4638      	mov	r0, r7
 800c750:	f002 ffc2 	bl	800f6d8 <ucdr_deserialize_uint32_t>
 800c754:	9b01      	ldr	r3, [sp, #4]
 800c756:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c758:	429a      	cmp	r2, r3
 800c75a:	d313      	bcc.n	800c784 <_Setup_Event__cdr_deserialize+0x90>
 800c75c:	63a3      	str	r3, [r4, #56]	; 0x38
 800c75e:	b193      	cbz	r3, 800c786 <_Setup_Event__cdr_deserialize+0x92>
 800c760:	2500      	movs	r5, #0
 800c762:	4e0c      	ldr	r6, [pc, #48]	; (800c794 <_Setup_Event__cdr_deserialize+0xa0>)
 800c764:	e002      	b.n	800c76c <_Setup_Event__cdr_deserialize+0x78>
 800c766:	9b01      	ldr	r3, [sp, #4]
 800c768:	429d      	cmp	r5, r3
 800c76a:	d20c      	bcs.n	800c786 <_Setup_Event__cdr_deserialize+0x92>
 800c76c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c76e:	4638      	mov	r0, r7
 800c770:	6873      	ldr	r3, [r6, #4]
 800c772:	4429      	add	r1, r5
 800c774:	3501      	adds	r5, #1
 800c776:	68db      	ldr	r3, [r3, #12]
 800c778:	4798      	blx	r3
 800c77a:	2800      	cmp	r0, #0
 800c77c:	d1f3      	bne.n	800c766 <_Setup_Event__cdr_deserialize+0x72>
 800c77e:	b002      	add	sp, #8
 800c780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c784:	2000      	movs	r0, #0
 800c786:	b002      	add	sp, #8
 800c788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c78c:	4608      	mov	r0, r1
 800c78e:	b002      	add	sp, #8
 800c790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c794:	20000990 	.word	0x20000990
 800c798:	20000978 	.word	0x20000978

0800c79c <_Setup_Event__cdr_serialize>:
 800c79c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7a0:	2800      	cmp	r0, #0
 800c7a2:	d03b      	beq.n	800c81c <_Setup_Event__cdr_serialize+0x80>
 800c7a4:	4605      	mov	r5, r0
 800c7a6:	460e      	mov	r6, r1
 800c7a8:	f002 f9c8 	bl	800eb3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	4631      	mov	r1, r6
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	689b      	ldr	r3, [r3, #8]
 800c7b6:	4798      	blx	r3
 800c7b8:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800c7ba:	4630      	mov	r0, r6
 800c7bc:	4639      	mov	r1, r7
 800c7be:	f002 fe5b 	bl	800f478 <ucdr_serialize_uint32_t>
 800c7c2:	b198      	cbz	r0, 800c7ec <_Setup_Event__cdr_serialize+0x50>
 800c7c4:	b197      	cbz	r7, 800c7ec <_Setup_Event__cdr_serialize+0x50>
 800c7c6:	2400      	movs	r4, #0
 800c7c8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800c828 <_Setup_Event__cdr_serialize+0x8c>
 800c7cc:	e001      	b.n	800c7d2 <_Setup_Event__cdr_serialize+0x36>
 800c7ce:	42a7      	cmp	r7, r4
 800c7d0:	d00c      	beq.n	800c7ec <_Setup_Event__cdr_serialize+0x50>
 800c7d2:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800c7d6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800c7d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c7dc:	4631      	mov	r1, r6
 800c7de:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800c7e2:	3401      	adds	r4, #1
 800c7e4:	689b      	ldr	r3, [r3, #8]
 800c7e6:	4798      	blx	r3
 800c7e8:	2800      	cmp	r0, #0
 800c7ea:	d1f0      	bne.n	800c7ce <_Setup_Event__cdr_serialize+0x32>
 800c7ec:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	4639      	mov	r1, r7
 800c7f2:	f002 fe41 	bl	800f478 <ucdr_serialize_uint32_t>
 800c7f6:	4680      	mov	r8, r0
 800c7f8:	b180      	cbz	r0, 800c81c <_Setup_Event__cdr_serialize+0x80>
 800c7fa:	b18f      	cbz	r7, 800c820 <_Setup_Event__cdr_serialize+0x84>
 800c7fc:	2400      	movs	r4, #0
 800c7fe:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800c82c <_Setup_Event__cdr_serialize+0x90>
 800c802:	e001      	b.n	800c808 <_Setup_Event__cdr_serialize+0x6c>
 800c804:	42a7      	cmp	r7, r4
 800c806:	d00b      	beq.n	800c820 <_Setup_Event__cdr_serialize+0x84>
 800c808:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800c80a:	4631      	mov	r1, r6
 800c80c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c810:	4420      	add	r0, r4
 800c812:	3401      	adds	r4, #1
 800c814:	689b      	ldr	r3, [r3, #8]
 800c816:	4798      	blx	r3
 800c818:	2800      	cmp	r0, #0
 800c81a:	d1f3      	bne.n	800c804 <_Setup_Event__cdr_serialize+0x68>
 800c81c:	f04f 0800 	mov.w	r8, #0
 800c820:	4640      	mov	r0, r8
 800c822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c826:	bf00      	nop
 800c828:	20000978 	.word	0x20000978
 800c82c:	20000990 	.word	0x20000990

0800c830 <_Setup_Response__get_serialized_size>:
 800c830:	b130      	cbz	r0, 800c840 <_Setup_Response__get_serialized_size+0x10>
 800c832:	2101      	movs	r1, #1
 800c834:	2000      	movs	r0, #0
 800c836:	b508      	push	{r3, lr}
 800c838:	f003 ff6c 	bl	8010714 <ucdr_alignment>
 800c83c:	3001      	adds	r0, #1
 800c83e:	bd08      	pop	{r3, pc}
 800c840:	4770      	bx	lr
 800c842:	bf00      	nop

0800c844 <max_serialized_size_racs_services__srv__Setup_Request>:
 800c844:	b570      	push	{r4, r5, r6, lr}
 800c846:	460c      	mov	r4, r1
 800c848:	2301      	movs	r3, #1
 800c84a:	1c65      	adds	r5, r4, #1
 800c84c:	4619      	mov	r1, r3
 800c84e:	7003      	strb	r3, [r0, #0]
 800c850:	4620      	mov	r0, r4
 800c852:	f003 ff5f 	bl	8010714 <ucdr_alignment>
 800c856:	4405      	add	r5, r0
 800c858:	2104      	movs	r1, #4
 800c85a:	f1c4 0404 	rsb	r4, r4, #4
 800c85e:	4628      	mov	r0, r5
 800c860:	f003 ff58 	bl	8010714 <ucdr_alignment>
 800c864:	2104      	movs	r1, #4
 800c866:	1846      	adds	r6, r0, r1
 800c868:	442e      	add	r6, r5
 800c86a:	4630      	mov	r0, r6
 800c86c:	f003 ff52 	bl	8010714 <ucdr_alignment>
 800c870:	2104      	movs	r1, #4
 800c872:	1845      	adds	r5, r0, r1
 800c874:	442e      	add	r6, r5
 800c876:	4630      	mov	r0, r6
 800c878:	f003 ff4c 	bl	8010714 <ucdr_alignment>
 800c87c:	2104      	movs	r1, #4
 800c87e:	4408      	add	r0, r1
 800c880:	4406      	add	r6, r0
 800c882:	4630      	mov	r0, r6
 800c884:	f003 ff46 	bl	8010714 <ucdr_alignment>
 800c888:	2104      	movs	r1, #4
 800c88a:	1845      	adds	r5, r0, r1
 800c88c:	4435      	add	r5, r6
 800c88e:	4628      	mov	r0, r5
 800c890:	f003 ff40 	bl	8010714 <ucdr_alignment>
 800c894:	2104      	movs	r1, #4
 800c896:	4408      	add	r0, r1
 800c898:	4405      	add	r5, r0
 800c89a:	4628      	mov	r0, r5
 800c89c:	f003 ff3a 	bl	8010714 <ucdr_alignment>
 800c8a0:	4420      	add	r0, r4
 800c8a2:	4428      	add	r0, r5
 800c8a4:	bd70      	pop	{r4, r5, r6, pc}
 800c8a6:	bf00      	nop

0800c8a8 <_Setup_Request__max_serialized_size>:
 800c8a8:	b500      	push	{lr}
 800c8aa:	b083      	sub	sp, #12
 800c8ac:	2100      	movs	r1, #0
 800c8ae:	f10d 0007 	add.w	r0, sp, #7
 800c8b2:	f7ff ffc7 	bl	800c844 <max_serialized_size_racs_services__srv__Setup_Request>
 800c8b6:	b003      	add	sp, #12
 800c8b8:	f85d fb04 	ldr.w	pc, [sp], #4

0800c8bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Event>:
 800c8bc:	4800      	ldr	r0, [pc, #0]	; (800c8c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x4>)
 800c8be:	4770      	bx	lr
 800c8c0:	20000960 	.word	0x20000960

0800c8c4 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800c8c4:	4800      	ldr	r0, [pc, #0]	; (800c8c8 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Setup+0x4>)
 800c8c6:	4770      	bx	lr
 800c8c8:	20000934 	.word	0x20000934

0800c8cc <rcl_get_zero_initialized_publisher>:
 800c8cc:	4b01      	ldr	r3, [pc, #4]	; (800c8d4 <rcl_get_zero_initialized_publisher+0x8>)
 800c8ce:	6818      	ldr	r0, [r3, #0]
 800c8d0:	4770      	bx	lr
 800c8d2:	bf00      	nop
 800c8d4:	0801e330 	.word	0x0801e330

0800c8d8 <rcl_publisher_init>:
 800c8d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8dc:	b088      	sub	sp, #32
 800c8de:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800c8e0:	2e00      	cmp	r6, #0
 800c8e2:	d06c      	beq.n	800c9be <rcl_publisher_init+0xe6>
 800c8e4:	f106 0a50 	add.w	sl, r6, #80	; 0x50
 800c8e8:	4605      	mov	r5, r0
 800c8ea:	460f      	mov	r7, r1
 800c8ec:	4690      	mov	r8, r2
 800c8ee:	4650      	mov	r0, sl
 800c8f0:	4699      	mov	r9, r3
 800c8f2:	f001 f969 	bl	800dbc8 <rcutils_allocator_is_valid>
 800c8f6:	f080 0401 	eor.w	r4, r0, #1
 800c8fa:	b2e4      	uxtb	r4, r4
 800c8fc:	2c00      	cmp	r4, #0
 800c8fe:	d15e      	bne.n	800c9be <rcl_publisher_init+0xe6>
 800c900:	2d00      	cmp	r5, #0
 800c902:	d05c      	beq.n	800c9be <rcl_publisher_init+0xe6>
 800c904:	682b      	ldr	r3, [r5, #0]
 800c906:	b123      	cbz	r3, 800c912 <rcl_publisher_init+0x3a>
 800c908:	2464      	movs	r4, #100	; 0x64
 800c90a:	4620      	mov	r0, r4
 800c90c:	b008      	add	sp, #32
 800c90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c912:	4638      	mov	r0, r7
 800c914:	f008 f9f4 	bl	8014d00 <rcl_node_is_valid>
 800c918:	2800      	cmp	r0, #0
 800c91a:	d055      	beq.n	800c9c8 <rcl_publisher_init+0xf0>
 800c91c:	f1b8 0f00 	cmp.w	r8, #0
 800c920:	d04d      	beq.n	800c9be <rcl_publisher_init+0xe6>
 800c922:	fab9 f389 	clz	r3, r9
 800c926:	095b      	lsrs	r3, r3, #5
 800c928:	f1b9 0f00 	cmp.w	r9, #0
 800c92c:	d047      	beq.n	800c9be <rcl_publisher_init+0xe6>
 800c92e:	aa07      	add	r2, sp, #28
 800c930:	9307      	str	r3, [sp, #28]
 800c932:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800c936:	f106 0358 	add.w	r3, r6, #88	; 0x58
 800c93a:	9205      	str	r2, [sp, #20]
 800c93c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c940:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c944:	4649      	mov	r1, r9
 800c946:	4638      	mov	r0, r7
 800c948:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800c94c:	f008 fa50 	bl	8014df0 <rcl_node_resolve_name>
 800c950:	2800      	cmp	r0, #0
 800c952:	d150      	bne.n	800c9f6 <rcl_publisher_init+0x11e>
 800c954:	21c8      	movs	r1, #200	; 0xc8
 800c956:	2001      	movs	r0, #1
 800c958:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	; 0x5c
 800c95c:	4798      	blx	r3
 800c95e:	6028      	str	r0, [r5, #0]
 800c960:	2800      	cmp	r0, #0
 800c962:	d050      	beq.n	800ca06 <rcl_publisher_init+0x12e>
 800c964:	4638      	mov	r0, r7
 800c966:	f008 f9ed 	bl	8014d44 <rcl_node_get_rmw_handle>
 800c96a:	f106 0364 	add.w	r3, r6, #100	; 0x64
 800c96e:	4641      	mov	r1, r8
 800c970:	9a07      	ldr	r2, [sp, #28]
 800c972:	9300      	str	r3, [sp, #0]
 800c974:	4633      	mov	r3, r6
 800c976:	682c      	ldr	r4, [r5, #0]
 800c978:	f001 fa34 	bl	800dde4 <rmw_create_publisher>
 800c97c:	682b      	ldr	r3, [r5, #0]
 800c97e:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 800c982:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800c986:	b370      	cbz	r0, 800c9e6 <rcl_publisher_init+0x10e>
 800c988:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800c98c:	f001 fb0e 	bl	800dfac <rmw_publisher_get_actual_qos>
 800c990:	682b      	ldr	r3, [r5, #0]
 800c992:	4604      	mov	r4, r0
 800c994:	b9d0      	cbnz	r0, 800c9cc <rcl_publisher_init+0xf4>
 800c996:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
 800c99a:	4631      	mov	r1, r6
 800c99c:	4618      	mov	r0, r3
 800c99e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800c9a2:	2270      	movs	r2, #112	; 0x70
 800c9a4:	f00f ffb7 	bl	801c916 <memcpy>
 800c9a8:	683a      	ldr	r2, [r7, #0]
 800c9aa:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800c9ae:	9807      	ldr	r0, [sp, #28]
 800c9b0:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800c9b2:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800c9b4:	4798      	blx	r3
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	b008      	add	sp, #32
 800c9ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9be:	240b      	movs	r4, #11
 800c9c0:	4620      	mov	r0, r4
 800c9c2:	b008      	add	sp, #32
 800c9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9c8:	24c8      	movs	r4, #200	; 0xc8
 800c9ca:	e79e      	b.n	800c90a <rcl_publisher_init+0x32>
 800c9cc:	b1cb      	cbz	r3, 800ca02 <rcl_publisher_init+0x12a>
 800c9ce:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800c9d2:	b142      	cbz	r2, 800c9e6 <rcl_publisher_init+0x10e>
 800c9d4:	4638      	mov	r0, r7
 800c9d6:	f008 f9b5 	bl	8014d44 <rcl_node_get_rmw_handle>
 800c9da:	682b      	ldr	r3, [r5, #0]
 800c9dc:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800c9e0:	f001 faf8 	bl	800dfd4 <rmw_destroy_publisher>
 800c9e4:	682b      	ldr	r3, [r5, #0]
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800c9ea:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800c9ec:	2401      	movs	r4, #1
 800c9ee:	4790      	blx	r2
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	602b      	str	r3, [r5, #0]
 800c9f4:	e7db      	b.n	800c9ae <rcl_publisher_init+0xd6>
 800c9f6:	2867      	cmp	r0, #103	; 0x67
 800c9f8:	d007      	beq.n	800ca0a <rcl_publisher_init+0x132>
 800c9fa:	2869      	cmp	r0, #105	; 0x69
 800c9fc:	d005      	beq.n	800ca0a <rcl_publisher_init+0x132>
 800c9fe:	280a      	cmp	r0, #10
 800ca00:	d001      	beq.n	800ca06 <rcl_publisher_init+0x12e>
 800ca02:	2401      	movs	r4, #1
 800ca04:	e7d3      	b.n	800c9ae <rcl_publisher_init+0xd6>
 800ca06:	240a      	movs	r4, #10
 800ca08:	e7d1      	b.n	800c9ae <rcl_publisher_init+0xd6>
 800ca0a:	2467      	movs	r4, #103	; 0x67
 800ca0c:	e7cf      	b.n	800c9ae <rcl_publisher_init+0xd6>
 800ca0e:	bf00      	nop

0800ca10 <rcl_publisher_get_default_options>:
 800ca10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca12:	4d1d      	ldr	r5, [pc, #116]	; (800ca88 <rcl_publisher_get_default_options+0x78>)
 800ca14:	b08b      	sub	sp, #44	; 0x2c
 800ca16:	2250      	movs	r2, #80	; 0x50
 800ca18:	491c      	ldr	r1, [pc, #112]	; (800ca8c <rcl_publisher_get_default_options+0x7c>)
 800ca1a:	4604      	mov	r4, r0
 800ca1c:	4628      	mov	r0, r5
 800ca1e:	f00f ff7a 	bl	801c916 <memcpy>
 800ca22:	a802      	add	r0, sp, #8
 800ca24:	f001 f8c2 	bl	800dbac <rcutils_get_default_allocator>
 800ca28:	f10d 0c08 	add.w	ip, sp, #8
 800ca2c:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800ca30:	466e      	mov	r6, sp
 800ca32:	2700      	movs	r7, #0
 800ca34:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ca38:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ca3c:	f8dc 3000 	ldr.w	r3, [ip]
 800ca40:	4630      	mov	r0, r6
 800ca42:	f8ce 3000 	str.w	r3, [lr]
 800ca46:	f001 f94f 	bl	800dce8 <rmw_get_default_publisher_options>
 800ca4a:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800ca4e:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 800ca52:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ca56:	e883 0003 	stmia.w	r3, {r0, r1}
 800ca5a:	f10d 0027 	add.w	r0, sp, #39	; 0x27
 800ca5e:	f008 f977 	bl	8014d50 <rcl_get_disable_loaned_message>
 800ca62:	b958      	cbnz	r0, 800ca7c <rcl_publisher_get_default_options+0x6c>
 800ca64:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800ca68:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
 800ca6c:	2270      	movs	r2, #112	; 0x70
 800ca6e:	4906      	ldr	r1, [pc, #24]	; (800ca88 <rcl_publisher_get_default_options+0x78>)
 800ca70:	4620      	mov	r0, r4
 800ca72:	f00f ff50 	bl	801c916 <memcpy>
 800ca76:	4620      	mov	r0, r4
 800ca78:	b00b      	add	sp, #44	; 0x2c
 800ca7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca7c:	f001 f8c8 	bl	800dc10 <rcutils_reset_error>
 800ca80:	f885 706c 	strb.w	r7, [r5, #108]	; 0x6c
 800ca84:	e7f2      	b.n	800ca6c <rcl_publisher_get_default_options+0x5c>
 800ca86:	bf00      	nop
 800ca88:	2000b900 	.word	0x2000b900
 800ca8c:	0801e338 	.word	0x0801e338

0800ca90 <rcl_publish>:
 800ca90:	b1f8      	cbz	r0, 800cad2 <rcl_publish+0x42>
 800ca92:	6803      	ldr	r3, [r0, #0]
 800ca94:	b570      	push	{r4, r5, r6, lr}
 800ca96:	4604      	mov	r4, r0
 800ca98:	b1b3      	cbz	r3, 800cac8 <rcl_publish+0x38>
 800ca9a:	4616      	mov	r6, r2
 800ca9c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800caa0:	b192      	cbz	r2, 800cac8 <rcl_publish+0x38>
 800caa2:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800caa6:	460d      	mov	r5, r1
 800caa8:	f007 fd2e 	bl	8014508 <rcl_context_is_valid>
 800caac:	b160      	cbz	r0, 800cac8 <rcl_publish+0x38>
 800caae:	6823      	ldr	r3, [r4, #0]
 800cab0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800cab4:	b140      	cbz	r0, 800cac8 <rcl_publish+0x38>
 800cab6:	b155      	cbz	r5, 800cace <rcl_publish+0x3e>
 800cab8:	4632      	mov	r2, r6
 800caba:	4629      	mov	r1, r5
 800cabc:	f001 f932 	bl	800dd24 <rmw_publish>
 800cac0:	3800      	subs	r0, #0
 800cac2:	bf18      	it	ne
 800cac4:	2001      	movne	r0, #1
 800cac6:	bd70      	pop	{r4, r5, r6, pc}
 800cac8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800cacc:	bd70      	pop	{r4, r5, r6, pc}
 800cace:	200b      	movs	r0, #11
 800cad0:	bd70      	pop	{r4, r5, r6, pc}
 800cad2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800cad6:	4770      	bx	lr

0800cad8 <rcl_publisher_is_valid>:
 800cad8:	b1a0      	cbz	r0, 800cb04 <rcl_publisher_is_valid+0x2c>
 800cada:	6803      	ldr	r3, [r0, #0]
 800cadc:	b510      	push	{r4, lr}
 800cade:	4604      	mov	r4, r0
 800cae0:	b173      	cbz	r3, 800cb00 <rcl_publisher_is_valid+0x28>
 800cae2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800cae6:	b15a      	cbz	r2, 800cb00 <rcl_publisher_is_valid+0x28>
 800cae8:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800caec:	f007 fd0c 	bl	8014508 <rcl_context_is_valid>
 800caf0:	b130      	cbz	r0, 800cb00 <rcl_publisher_is_valid+0x28>
 800caf2:	6823      	ldr	r3, [r4, #0]
 800caf4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800caf8:	3800      	subs	r0, #0
 800cafa:	bf18      	it	ne
 800cafc:	2001      	movne	r0, #1
 800cafe:	bd10      	pop	{r4, pc}
 800cb00:	2000      	movs	r0, #0
 800cb02:	bd10      	pop	{r4, pc}
 800cb04:	2000      	movs	r0, #0
 800cb06:	4770      	bx	lr

0800cb08 <rcl_publisher_is_valid_except_context>:
 800cb08:	b130      	cbz	r0, 800cb18 <rcl_publisher_is_valid_except_context+0x10>
 800cb0a:	6800      	ldr	r0, [r0, #0]
 800cb0c:	b120      	cbz	r0, 800cb18 <rcl_publisher_is_valid_except_context+0x10>
 800cb0e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 800cb12:	3800      	subs	r0, #0
 800cb14:	bf18      	it	ne
 800cb16:	2001      	movne	r0, #1
 800cb18:	4770      	bx	lr
 800cb1a:	bf00      	nop

0800cb1c <_rclc_check_for_new_data>:
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	d046      	beq.n	800cbae <_rclc_check_for_new_data+0x92>
 800cb20:	4603      	mov	r3, r0
 800cb22:	b530      	push	{r4, r5, lr}
 800cb24:	7802      	ldrb	r2, [r0, #0]
 800cb26:	b085      	sub	sp, #20
 800cb28:	2a0a      	cmp	r2, #10
 800cb2a:	d842      	bhi.n	800cbb2 <_rclc_check_for_new_data+0x96>
 800cb2c:	e8df f002 	tbb	[pc, r2]
 800cb30:	14181212 	.word	0x14181212
 800cb34:	06060614 	.word	0x06060614
 800cb38:	2e1a      	.short	0x2e1a
 800cb3a:	16          	.byte	0x16
 800cb3b:	00          	.byte	0x00
 800cb3c:	6a0a      	ldr	r2, [r1, #32]
 800cb3e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800cb40:	2000      	movs	r0, #0
 800cb42:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800cb46:	1a12      	subs	r2, r2, r0
 800cb48:	bf18      	it	ne
 800cb4a:	2201      	movne	r2, #1
 800cb4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800cb50:	b005      	add	sp, #20
 800cb52:	bd30      	pop	{r4, r5, pc}
 800cb54:	680a      	ldr	r2, [r1, #0]
 800cb56:	e7f2      	b.n	800cb3e <_rclc_check_for_new_data+0x22>
 800cb58:	698a      	ldr	r2, [r1, #24]
 800cb5a:	e7f0      	b.n	800cb3e <_rclc_check_for_new_data+0x22>
 800cb5c:	688a      	ldr	r2, [r1, #8]
 800cb5e:	e7ee      	b.n	800cb3e <_rclc_check_for_new_data+0x22>
 800cb60:	690a      	ldr	r2, [r1, #16]
 800cb62:	e7ec      	b.n	800cb3e <_rclc_check_for_new_data+0x22>
 800cb64:	685c      	ldr	r4, [r3, #4]
 800cb66:	4608      	mov	r0, r1
 800cb68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb74:	f104 0110 	add.w	r1, r4, #16
 800cb78:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800cb7c:	9500      	str	r5, [sp, #0]
 800cb7e:	f104 0341 	add.w	r3, r4, #65	; 0x41
 800cb82:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800cb86:	f00a fa0f 	bl	8016fa8 <rcl_action_client_wait_set_get_entities_ready>
 800cb8a:	e7e1      	b.n	800cb50 <_rclc_check_for_new_data+0x34>
 800cb8c:	685c      	ldr	r4, [r3, #4]
 800cb8e:	4608      	mov	r0, r1
 800cb90:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800cb94:	f104 0123 	add.w	r1, r4, #35	; 0x23
 800cb98:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800cb9c:	e9cd 2100 	strd	r2, r1, [sp]
 800cba0:	f104 0220 	add.w	r2, r4, #32
 800cba4:	f104 0110 	add.w	r1, r4, #16
 800cba8:	f00a fc16 	bl	80173d8 <rcl_action_server_wait_set_get_entities_ready>
 800cbac:	e7d0      	b.n	800cb50 <_rclc_check_for_new_data+0x34>
 800cbae:	200b      	movs	r0, #11
 800cbb0:	4770      	bx	lr
 800cbb2:	2001      	movs	r0, #1
 800cbb4:	e7cc      	b.n	800cb50 <_rclc_check_for_new_data+0x34>
 800cbb6:	bf00      	nop

0800cbb8 <_rclc_take_new_data>:
 800cbb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbba:	b099      	sub	sp, #100	; 0x64
 800cbbc:	2800      	cmp	r0, #0
 800cbbe:	f000 8088 	beq.w	800ccd2 <_rclc_take_new_data+0x11a>
 800cbc2:	7803      	ldrb	r3, [r0, #0]
 800cbc4:	4604      	mov	r4, r0
 800cbc6:	2b0a      	cmp	r3, #10
 800cbc8:	f200 8167 	bhi.w	800ce9a <_rclc_take_new_data+0x2e2>
 800cbcc:	e8df f003 	tbb	[pc, r3]
 800cbd0:	44152d2d 	.word	0x44152d2d
 800cbd4:	19191944 	.word	0x19191944
 800cbd8:	065a      	.short	0x065a
 800cbda:	15          	.byte	0x15
 800cbdb:	00          	.byte	0x00
 800cbdc:	6840      	ldr	r0, [r0, #4]
 800cbde:	f890 3020 	ldrb.w	r3, [r0, #32]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	f040 80b2 	bne.w	800cd4c <_rclc_take_new_data+0x194>
 800cbe8:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	f040 80e4 	bne.w	800cdba <_rclc_take_new_data+0x202>
 800cbf2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d16f      	bne.n	800ccda <_rclc_take_new_data+0x122>
 800cbfa:	2500      	movs	r5, #0
 800cbfc:	4628      	mov	r0, r5
 800cbfe:	b019      	add	sp, #100	; 0x64
 800cc00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc02:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800cc04:	6a0b      	ldr	r3, [r1, #32]
 800cc06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d0f5      	beq.n	800cbfa <_rclc_take_new_data+0x42>
 800cc0e:	6882      	ldr	r2, [r0, #8]
 800cc10:	f100 0110 	add.w	r1, r0, #16
 800cc14:	6840      	ldr	r0, [r0, #4]
 800cc16:	f008 fb97 	bl	8015348 <rcl_take_request>
 800cc1a:	4605      	mov	r5, r0
 800cc1c:	2800      	cmp	r0, #0
 800cc1e:	d0ec      	beq.n	800cbfa <_rclc_take_new_data+0x42>
 800cc20:	f240 2359 	movw	r3, #601	; 0x259
 800cc24:	4298      	cmp	r0, r3
 800cc26:	d013      	beq.n	800cc50 <_rclc_take_new_data+0x98>
 800cc28:	e029      	b.n	800cc7e <_rclc_take_new_data+0xc6>
 800cc2a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800cc2c:	680b      	ldr	r3, [r1, #0]
 800cc2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d0e1      	beq.n	800cbfa <_rclc_take_new_data+0x42>
 800cc36:	2300      	movs	r3, #0
 800cc38:	aa0a      	add	r2, sp, #40	; 0x28
 800cc3a:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800cc3e:	f008 fd91 	bl	8015764 <rcl_take>
 800cc42:	4605      	mov	r5, r0
 800cc44:	2800      	cmp	r0, #0
 800cc46:	d0d9      	beq.n	800cbfc <_rclc_take_new_data+0x44>
 800cc48:	f240 1391 	movw	r3, #401	; 0x191
 800cc4c:	4298      	cmp	r0, r3
 800cc4e:	d116      	bne.n	800cc7e <_rclc_take_new_data+0xc6>
 800cc50:	2300      	movs	r3, #0
 800cc52:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800cc56:	e7d1      	b.n	800cbfc <_rclc_take_new_data+0x44>
 800cc58:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800cc5a:	698b      	ldr	r3, [r1, #24]
 800cc5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d0ca      	beq.n	800cbfa <_rclc_take_new_data+0x42>
 800cc64:	6882      	ldr	r2, [r0, #8]
 800cc66:	f100 0110 	add.w	r1, r0, #16
 800cc6a:	6840      	ldr	r0, [r0, #4]
 800cc6c:	f007 fbbc 	bl	80143e8 <rcl_take_response>
 800cc70:	4605      	mov	r5, r0
 800cc72:	2800      	cmp	r0, #0
 800cc74:	d0c1      	beq.n	800cbfa <_rclc_take_new_data+0x42>
 800cc76:	f240 13f5 	movw	r3, #501	; 0x1f5
 800cc7a:	4298      	cmp	r0, r3
 800cc7c:	d0be      	beq.n	800cbfc <_rclc_take_new_data+0x44>
 800cc7e:	f000 ffc7 	bl	800dc10 <rcutils_reset_error>
 800cc82:	e7bb      	b.n	800cbfc <_rclc_take_new_data+0x44>
 800cc84:	6840      	ldr	r0, [r0, #4]
 800cc86:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d17d      	bne.n	800cd8a <_rclc_take_new_data+0x1d2>
 800cc8e:	69c3      	ldr	r3, [r0, #28]
 800cc90:	b11b      	cbz	r3, 800cc9a <_rclc_take_new_data+0xe2>
 800cc92:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d144      	bne.n	800cd24 <_rclc_take_new_data+0x16c>
 800cc9a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	f040 80ac 	bne.w	800cdfc <_rclc_take_new_data+0x244>
 800cca4:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d0a6      	beq.n	800cbfa <_rclc_take_new_data+0x42>
 800ccac:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800ccae:	a90a      	add	r1, sp, #40	; 0x28
 800ccb0:	3010      	adds	r0, #16
 800ccb2:	f00a f851 	bl	8016d58 <rcl_action_take_result_response>
 800ccb6:	4605      	mov	r5, r0
 800ccb8:	2800      	cmp	r0, #0
 800ccba:	d1e0      	bne.n	800cc7e <_rclc_take_new_data+0xc6>
 800ccbc:	6860      	ldr	r0, [r4, #4]
 800ccbe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ccc2:	f00a fcb9 	bl	8017638 <rclc_action_find_handle_by_result_request_sequence_number>
 800ccc6:	2800      	cmp	r0, #0
 800ccc8:	d098      	beq.n	800cbfc <_rclc_take_new_data+0x44>
 800ccca:	2301      	movs	r3, #1
 800cccc:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 800ccd0:	e794      	b.n	800cbfc <_rclc_take_new_data+0x44>
 800ccd2:	250b      	movs	r5, #11
 800ccd4:	4628      	mov	r0, r5
 800ccd6:	b019      	add	sp, #100	; 0x64
 800ccd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccda:	ae04      	add	r6, sp, #16
 800ccdc:	3010      	adds	r0, #16
 800ccde:	aa0a      	add	r2, sp, #40	; 0x28
 800cce0:	4631      	mov	r1, r6
 800cce2:	f00a faad 	bl	8017240 <rcl_action_take_cancel_request>
 800cce6:	4605      	mov	r5, r0
 800cce8:	2800      	cmp	r0, #0
 800ccea:	d1c8      	bne.n	800cc7e <_rclc_take_new_data+0xc6>
 800ccec:	a90a      	add	r1, sp, #40	; 0x28
 800ccee:	6860      	ldr	r0, [r4, #4]
 800ccf0:	f00a fc62 	bl	80175b8 <rclc_action_find_goal_handle_by_uuid>
 800ccf4:	4607      	mov	r7, r0
 800ccf6:	2800      	cmp	r0, #0
 800ccf8:	f000 80bb 	beq.w	800ce72 <_rclc_take_new_data+0x2ba>
 800ccfc:	2101      	movs	r1, #1
 800ccfe:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800cd02:	f00a fbe3 	bl	80174cc <rcl_action_transition_goal_state>
 800cd06:	2803      	cmp	r0, #3
 800cd08:	4684      	mov	ip, r0
 800cd0a:	f040 80a7 	bne.w	800ce5c <_rclc_take_new_data+0x2a4>
 800cd0e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800cd12:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cd14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd16:	e896 0003 	ldmia.w	r6, {r0, r1}
 800cd1a:	e884 0003 	stmia.w	r4, {r0, r1}
 800cd1e:	f887 c008 	strb.w	ip, [r7, #8]
 800cd22:	e76b      	b.n	800cbfc <_rclc_take_new_data+0x44>
 800cd24:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800cd26:	3010      	adds	r0, #16
 800cd28:	f00a f896 	bl	8016e58 <rcl_action_take_feedback>
 800cd2c:	4605      	mov	r5, r0
 800cd2e:	2800      	cmp	r0, #0
 800cd30:	d1a5      	bne.n	800cc7e <_rclc_take_new_data+0xc6>
 800cd32:	6860      	ldr	r0, [r4, #4]
 800cd34:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800cd36:	f00a fc3f 	bl	80175b8 <rclc_action_find_goal_handle_by_uuid>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	2800      	cmp	r0, #0
 800cd3e:	f000 80a3 	beq.w	800ce88 <_rclc_take_new_data+0x2d0>
 800cd42:	2201      	movs	r2, #1
 800cd44:	6860      	ldr	r0, [r4, #4]
 800cd46:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800cd4a:	e7a6      	b.n	800cc9a <_rclc_take_new_data+0xe2>
 800cd4c:	f00a fc0e 	bl	801756c <rclc_action_take_goal_handle>
 800cd50:	4606      	mov	r6, r0
 800cd52:	6860      	ldr	r0, [r4, #4]
 800cd54:	2e00      	cmp	r6, #0
 800cd56:	f43f af47 	beq.w	800cbe8 <_rclc_take_new_data+0x30>
 800cd5a:	6070      	str	r0, [r6, #4]
 800cd5c:	f106 0128 	add.w	r1, r6, #40	; 0x28
 800cd60:	69f2      	ldr	r2, [r6, #28]
 800cd62:	3010      	adds	r0, #16
 800cd64:	f00a f9b6 	bl	80170d4 <rcl_action_take_goal_request>
 800cd68:	4605      	mov	r5, r0
 800cd6a:	2800      	cmp	r0, #0
 800cd6c:	f040 808e 	bne.w	800ce8c <_rclc_take_new_data+0x2d4>
 800cd70:	69f7      	ldr	r7, [r6, #28]
 800cd72:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cd74:	7235      	strb	r5, [r6, #8]
 800cd76:	f8c6 0009 	str.w	r0, [r6, #9]
 800cd7a:	f8c6 100d 	str.w	r1, [r6, #13]
 800cd7e:	6860      	ldr	r0, [r4, #4]
 800cd80:	f8c6 2011 	str.w	r2, [r6, #17]
 800cd84:	f8c6 3015 	str.w	r3, [r6, #21]
 800cd88:	e72e      	b.n	800cbe8 <_rclc_take_new_data+0x30>
 800cd8a:	aa04      	add	r2, sp, #16
 800cd8c:	a90a      	add	r1, sp, #40	; 0x28
 800cd8e:	3010      	adds	r0, #16
 800cd90:	f009 ff6a 	bl	8016c68 <rcl_action_take_goal_response>
 800cd94:	4605      	mov	r5, r0
 800cd96:	2800      	cmp	r0, #0
 800cd98:	f47f af71 	bne.w	800cc7e <_rclc_take_new_data+0xc6>
 800cd9c:	6860      	ldr	r0, [r4, #4]
 800cd9e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800cda2:	f00a fc37 	bl	8017614 <rclc_action_find_handle_by_goal_request_sequence_number>
 800cda6:	b130      	cbz	r0, 800cdb6 <_rclc_take_new_data+0x1fe>
 800cda8:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800cdac:	2201      	movs	r2, #1
 800cdae:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800cdb2:	f880 2020 	strb.w	r2, [r0, #32]
 800cdb6:	6860      	ldr	r0, [r4, #4]
 800cdb8:	e769      	b.n	800cc8e <_rclc_take_new_data+0xd6>
 800cdba:	3010      	adds	r0, #16
 800cdbc:	aa04      	add	r2, sp, #16
 800cdbe:	a90a      	add	r1, sp, #40	; 0x28
 800cdc0:	f00a f9fe 	bl	80171c0 <rcl_action_take_result_request>
 800cdc4:	4605      	mov	r5, r0
 800cdc6:	2800      	cmp	r0, #0
 800cdc8:	f47f af59 	bne.w	800cc7e <_rclc_take_new_data+0xc6>
 800cdcc:	a904      	add	r1, sp, #16
 800cdce:	6860      	ldr	r0, [r4, #4]
 800cdd0:	f00a fbf2 	bl	80175b8 <rclc_action_find_goal_handle_by_uuid>
 800cdd4:	4607      	mov	r7, r0
 800cdd6:	b160      	cbz	r0, 800cdf2 <_rclc_take_new_data+0x23a>
 800cdd8:	ad0a      	add	r5, sp, #40	; 0x28
 800cdda:	f100 0640 	add.w	r6, r0, #64	; 0x40
 800cdde:	f04f 0c02 	mov.w	ip, #2
 800cde2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cde4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800cde6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800cdea:	e886 0003 	stmia.w	r6, {r0, r1}
 800cdee:	f887 c008 	strb.w	ip, [r7, #8]
 800cdf2:	6860      	ldr	r0, [r4, #4]
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 800cdfa:	e6fa      	b.n	800cbf2 <_rclc_take_new_data+0x3a>
 800cdfc:	f100 0230 	add.w	r2, r0, #48	; 0x30
 800ce00:	a90a      	add	r1, sp, #40	; 0x28
 800ce02:	3010      	adds	r0, #16
 800ce04:	f009 ffe8 	bl	8016dd8 <rcl_action_take_cancel_response>
 800ce08:	4605      	mov	r5, r0
 800ce0a:	2800      	cmp	r0, #0
 800ce0c:	f47f af37 	bne.w	800cc7e <_rclc_take_new_data+0xc6>
 800ce10:	6860      	ldr	r0, [r4, #4]
 800ce12:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ce16:	f00a fc21 	bl	801765c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800ce1a:	4606      	mov	r6, r0
 800ce1c:	6860      	ldr	r0, [r4, #4]
 800ce1e:	2e00      	cmp	r6, #0
 800ce20:	f43f af40 	beq.w	800cca4 <_rclc_take_new_data+0xec>
 800ce24:	2701      	movs	r7, #1
 800ce26:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ce28:	84b7      	strh	r7, [r6, #36]	; 0x24
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	f43f af3a 	beq.w	800cca4 <_rclc_take_new_data+0xec>
 800ce30:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ce32:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800ce36:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ce3a:	f00a fbbd 	bl	80175b8 <rclc_action_find_goal_handle_by_uuid>
 800ce3e:	b138      	cbz	r0, 800ce50 <_rclc_take_new_data+0x298>
 800ce40:	6860      	ldr	r0, [r4, #4]
 800ce42:	3501      	adds	r5, #1
 800ce44:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 800ce48:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ce4a:	42ab      	cmp	r3, r5
 800ce4c:	d8f0      	bhi.n	800ce30 <_rclc_take_new_data+0x278>
 800ce4e:	e729      	b.n	800cca4 <_rclc_take_new_data+0xec>
 800ce50:	6860      	ldr	r0, [r4, #4]
 800ce52:	3501      	adds	r5, #1
 800ce54:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ce56:	42ab      	cmp	r3, r5
 800ce58:	d8ea      	bhi.n	800ce30 <_rclc_take_new_data+0x278>
 800ce5a:	e723      	b.n	800cca4 <_rclc_take_new_data+0xec>
 800ce5c:	ab06      	add	r3, sp, #24
 800ce5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ce60:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ce64:	2103      	movs	r1, #3
 800ce66:	6860      	ldr	r0, [r4, #4]
 800ce68:	e896 000c 	ldmia.w	r6, {r2, r3}
 800ce6c:	f00a fc6c 	bl	8017748 <rclc_action_server_goal_cancel_reject>
 800ce70:	e6c4      	b.n	800cbfc <_rclc_take_new_data+0x44>
 800ce72:	ab06      	add	r3, sp, #24
 800ce74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ce76:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ce7a:	2102      	movs	r1, #2
 800ce7c:	6860      	ldr	r0, [r4, #4]
 800ce7e:	e896 000c 	ldmia.w	r6, {r2, r3}
 800ce82:	f00a fc61 	bl	8017748 <rclc_action_server_goal_cancel_reject>
 800ce86:	e6b9      	b.n	800cbfc <_rclc_take_new_data+0x44>
 800ce88:	6860      	ldr	r0, [r4, #4]
 800ce8a:	e706      	b.n	800cc9a <_rclc_take_new_data+0xe2>
 800ce8c:	4631      	mov	r1, r6
 800ce8e:	6860      	ldr	r0, [r4, #4]
 800ce90:	f00a fb7c 	bl	801758c <rclc_action_remove_used_goal_handle>
 800ce94:	f000 febc 	bl	800dc10 <rcutils_reset_error>
 800ce98:	e6b0      	b.n	800cbfc <_rclc_take_new_data+0x44>
 800ce9a:	2501      	movs	r5, #1
 800ce9c:	e6ae      	b.n	800cbfc <_rclc_take_new_data+0x44>
 800ce9e:	bf00      	nop

0800cea0 <_rclc_execute.part.0>:
 800cea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cea2:	7803      	ldrb	r3, [r0, #0]
 800cea4:	b085      	sub	sp, #20
 800cea6:	4604      	mov	r4, r0
 800cea8:	2b0a      	cmp	r3, #10
 800ceaa:	f200 8139 	bhi.w	800d120 <_rclc_execute.part.0+0x280>
 800ceae:	e8df f003 	tbb	[pc, r3]
 800ceb2:	4268      	.short	0x4268
 800ceb4:	06a75b4d 	.word	0x06a75b4d
 800ceb8:	721d0606 	.word	0x721d0606
 800cebc:	62          	.byte	0x62
 800cebd:	00          	.byte	0x00
 800cebe:	2b06      	cmp	r3, #6
 800cec0:	f000 8126 	beq.w	800d110 <_rclc_execute.part.0+0x270>
 800cec4:	2b07      	cmp	r3, #7
 800cec6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800cec8:	f040 811c 	bne.w	800d104 <_rclc_execute.part.0+0x264>
 800cecc:	f104 0510 	add.w	r5, r4, #16
 800ced0:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800ced4:	6880      	ldr	r0, [r0, #8]
 800ced6:	4798      	blx	r3
 800ced8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800ceda:	4629      	mov	r1, r5
 800cedc:	6860      	ldr	r0, [r4, #4]
 800cede:	f008 fa83 	bl	80153e8 <rcl_send_response>
 800cee2:	4604      	mov	r4, r0
 800cee4:	b378      	cbz	r0, 800cf46 <_rclc_execute.part.0+0xa6>
 800cee6:	f000 fe93 	bl	800dc10 <rcutils_reset_error>
 800ceea:	e02c      	b.n	800cf46 <_rclc_execute.part.0+0xa6>
 800ceec:	6840      	ldr	r0, [r0, #4]
 800ceee:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	f000 808e 	beq.w	800d014 <_rclc_execute.part.0+0x174>
 800cef8:	2600      	movs	r6, #0
 800cefa:	2701      	movs	r7, #1
 800cefc:	e004      	b.n	800cf08 <_rclc_execute.part.0+0x68>
 800cefe:	f00a fb0f 	bl	8017520 <rclc_action_send_result_request>
 800cf02:	b998      	cbnz	r0, 800cf2c <_rclc_execute.part.0+0x8c>
 800cf04:	722f      	strb	r7, [r5, #8]
 800cf06:	6860      	ldr	r0, [r4, #4]
 800cf08:	f00a fbba 	bl	8017680 <rclc_action_find_first_handle_with_goal_response>
 800cf0c:	4605      	mov	r5, r0
 800cf0e:	2800      	cmp	r0, #0
 800cf10:	d07f      	beq.n	800d012 <_rclc_execute.part.0+0x172>
 800cf12:	6863      	ldr	r3, [r4, #4]
 800cf14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800cf16:	699b      	ldr	r3, [r3, #24]
 800cf18:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 800cf1c:	f885 6020 	strb.w	r6, [r5, #32]
 800cf20:	4798      	blx	r3
 800cf22:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800cf26:	4628      	mov	r0, r5
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d1e8      	bne.n	800cefe <_rclc_execute.part.0+0x5e>
 800cf2c:	6860      	ldr	r0, [r4, #4]
 800cf2e:	4629      	mov	r1, r5
 800cf30:	f00a fb2c 	bl	801758c <rclc_action_remove_used_goal_handle>
 800cf34:	e7e7      	b.n	800cf06 <_rclc_execute.part.0+0x66>
 800cf36:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800cf3a:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 800cf3e:	b100      	cbz	r0, 800cf42 <_rclc_execute.part.0+0xa2>
 800cf40:	68a0      	ldr	r0, [r4, #8]
 800cf42:	2400      	movs	r4, #0
 800cf44:	4798      	blx	r3
 800cf46:	4620      	mov	r0, r4
 800cf48:	b005      	add	sp, #20
 800cf4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf4c:	6840      	ldr	r0, [r0, #4]
 800cf4e:	f008 ff43 	bl	8015dd8 <rcl_timer_call>
 800cf52:	f240 3321 	movw	r3, #801	; 0x321
 800cf56:	4604      	mov	r4, r0
 800cf58:	4298      	cmp	r0, r3
 800cf5a:	d001      	beq.n	800cf60 <_rclc_execute.part.0+0xc0>
 800cf5c:	2800      	cmp	r0, #0
 800cf5e:	d1c2      	bne.n	800cee6 <_rclc_execute.part.0+0x46>
 800cf60:	2400      	movs	r4, #0
 800cf62:	4620      	mov	r0, r4
 800cf64:	b005      	add	sp, #20
 800cf66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf68:	2400      	movs	r4, #0
 800cf6a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800cf6c:	6880      	ldr	r0, [r0, #8]
 800cf6e:	4798      	blx	r3
 800cf70:	4620      	mov	r0, r4
 800cf72:	b005      	add	sp, #20
 800cf74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf76:	2400      	movs	r4, #0
 800cf78:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800cf7a:	4798      	blx	r3
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	b005      	add	sp, #20
 800cf80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf82:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800cf86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800cf88:	b100      	cbz	r0, 800cf8c <_rclc_execute.part.0+0xec>
 800cf8a:	68a0      	ldr	r0, [r4, #8]
 800cf8c:	2400      	movs	r4, #0
 800cf8e:	4798      	blx	r3
 800cf90:	4620      	mov	r0, r4
 800cf92:	b005      	add	sp, #20
 800cf94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf96:	6840      	ldr	r0, [r0, #4]
 800cf98:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800cf9c:	bb3b      	cbnz	r3, 800cfee <_rclc_execute.part.0+0x14e>
 800cf9e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d07d      	beq.n	800d0a2 <_rclc_execute.part.0+0x202>
 800cfa6:	f640 0634 	movw	r6, #2100	; 0x834
 800cfaa:	2701      	movs	r7, #1
 800cfac:	e007      	b.n	800cfbe <_rclc_execute.part.0+0x11e>
 800cfae:	4628      	mov	r0, r5
 800cfb0:	f00a fb7e 	bl	80176b0 <rclc_action_server_response_goal_request>
 800cfb4:	4629      	mov	r1, r5
 800cfb6:	6860      	ldr	r0, [r4, #4]
 800cfb8:	f00a fae8 	bl	801758c <rclc_action_remove_used_goal_handle>
 800cfbc:	6860      	ldr	r0, [r4, #4]
 800cfbe:	2100      	movs	r1, #0
 800cfc0:	f00a fb10 	bl	80175e4 <rclc_action_find_first_handle_by_status>
 800cfc4:	4605      	mov	r5, r0
 800cfc6:	2800      	cmp	r0, #0
 800cfc8:	d068      	beq.n	800d09c <_rclc_execute.part.0+0x1fc>
 800cfca:	6863      	ldr	r3, [r4, #4]
 800cfcc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800cfce:	699b      	ldr	r3, [r3, #24]
 800cfd0:	4798      	blx	r3
 800cfd2:	42b0      	cmp	r0, r6
 800cfd4:	f04f 0100 	mov.w	r1, #0
 800cfd8:	d1e9      	bne.n	800cfae <_rclc_execute.part.0+0x10e>
 800cfda:	2101      	movs	r1, #1
 800cfdc:	4628      	mov	r0, r5
 800cfde:	f00a fb67 	bl	80176b0 <rclc_action_server_response_goal_request>
 800cfe2:	722f      	strb	r7, [r5, #8]
 800cfe4:	e7ea      	b.n	800cfbc <_rclc_execute.part.0+0x11c>
 800cfe6:	6848      	ldr	r0, [r1, #4]
 800cfe8:	f00a fad0 	bl	801758c <rclc_action_remove_used_goal_handle>
 800cfec:	6860      	ldr	r0, [r4, #4]
 800cfee:	f00a fb05 	bl	80175fc <rclc_action_find_first_terminated_handle>
 800cff2:	4601      	mov	r1, r0
 800cff4:	2800      	cmp	r0, #0
 800cff6:	d1f6      	bne.n	800cfe6 <_rclc_execute.part.0+0x146>
 800cff8:	6860      	ldr	r0, [r4, #4]
 800cffa:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800cffe:	e7ce      	b.n	800cf9e <_rclc_execute.part.0+0xfe>
 800d000:	2400      	movs	r4, #0
 800d002:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d004:	f100 0110 	add.w	r1, r0, #16
 800d008:	6880      	ldr	r0, [r0, #8]
 800d00a:	4798      	blx	r3
 800d00c:	4620      	mov	r0, r4
 800d00e:	b005      	add	sp, #20
 800d010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d012:	6860      	ldr	r0, [r4, #4]
 800d014:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d018:	b18b      	cbz	r3, 800d03e <_rclc_execute.part.0+0x19e>
 800d01a:	68c5      	ldr	r5, [r0, #12]
 800d01c:	b32d      	cbz	r5, 800d06a <_rclc_execute.part.0+0x1ca>
 800d01e:	2600      	movs	r6, #0
 800d020:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800d024:	b143      	cbz	r3, 800d038 <_rclc_execute.part.0+0x198>
 800d026:	69c3      	ldr	r3, [r0, #28]
 800d028:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 800d02c:	b123      	cbz	r3, 800d038 <_rclc_execute.part.0+0x198>
 800d02e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800d030:	4628      	mov	r0, r5
 800d032:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d034:	4798      	blx	r3
 800d036:	6860      	ldr	r0, [r4, #4]
 800d038:	682d      	ldr	r5, [r5, #0]
 800d03a:	2d00      	cmp	r5, #0
 800d03c:	d1f0      	bne.n	800d020 <_rclc_execute.part.0+0x180>
 800d03e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800d042:	b193      	cbz	r3, 800d06a <_rclc_execute.part.0+0x1ca>
 800d044:	68c5      	ldr	r5, [r0, #12]
 800d046:	b185      	cbz	r5, 800d06a <_rclc_execute.part.0+0x1ca>
 800d048:	2600      	movs	r6, #0
 800d04a:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800d04e:	b14b      	cbz	r3, 800d064 <_rclc_execute.part.0+0x1c4>
 800d050:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d052:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 800d056:	b12b      	cbz	r3, 800d064 <_rclc_execute.part.0+0x1c4>
 800d058:	4628      	mov	r0, r5
 800d05a:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 800d05e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d060:	4798      	blx	r3
 800d062:	6860      	ldr	r0, [r4, #4]
 800d064:	682d      	ldr	r5, [r5, #0]
 800d066:	2d00      	cmp	r5, #0
 800d068:	d1ef      	bne.n	800d04a <_rclc_execute.part.0+0x1aa>
 800d06a:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800d06e:	2b00      	cmp	r3, #0
 800d070:	f43f af76 	beq.w	800cf60 <_rclc_execute.part.0+0xc0>
 800d074:	2700      	movs	r7, #0
 800d076:	e00b      	b.n	800d090 <_rclc_execute.part.0+0x1f0>
 800d078:	6863      	ldr	r3, [r4, #4]
 800d07a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d07c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d07e:	6a1e      	ldr	r6, [r3, #32]
 800d080:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 800d084:	47b0      	blx	r6
 800d086:	6860      	ldr	r0, [r4, #4]
 800d088:	4629      	mov	r1, r5
 800d08a:	f00a fa7f 	bl	801758c <rclc_action_remove_used_goal_handle>
 800d08e:	6860      	ldr	r0, [r4, #4]
 800d090:	f00a fb02 	bl	8017698 <rclc_action_find_first_handle_with_result_response>
 800d094:	4605      	mov	r5, r0
 800d096:	2800      	cmp	r0, #0
 800d098:	d1ee      	bne.n	800d078 <_rclc_execute.part.0+0x1d8>
 800d09a:	e761      	b.n	800cf60 <_rclc_execute.part.0+0xc0>
 800d09c:	6860      	ldr	r0, [r4, #4]
 800d09e:	f880 5020 	strb.w	r5, [r0, #32]
 800d0a2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	f43f af5a 	beq.w	800cf60 <_rclc_execute.part.0+0xc0>
 800d0ac:	68c5      	ldr	r5, [r0, #12]
 800d0ae:	b1b5      	cbz	r5, 800d0de <_rclc_execute.part.0+0x23e>
 800d0b0:	2602      	movs	r6, #2
 800d0b2:	e001      	b.n	800d0b8 <_rclc_execute.part.0+0x218>
 800d0b4:	682d      	ldr	r5, [r5, #0]
 800d0b6:	b195      	cbz	r5, 800d0de <_rclc_execute.part.0+0x23e>
 800d0b8:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800d0bc:	2b03      	cmp	r3, #3
 800d0be:	d1f9      	bne.n	800d0b4 <_rclc_execute.part.0+0x214>
 800d0c0:	69c3      	ldr	r3, [r0, #28]
 800d0c2:	4628      	mov	r0, r5
 800d0c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d0c6:	4798      	blx	r3
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800d0ce:	4628      	mov	r0, r5
 800d0d0:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800d0d4:	b143      	cbz	r3, 800d0e8 <_rclc_execute.part.0+0x248>
 800d0d6:	f00a fb0b 	bl	80176f0 <rclc_action_server_goal_cancel_accept>
 800d0da:	6860      	ldr	r0, [r4, #4]
 800d0dc:	e7ea      	b.n	800d0b4 <_rclc_execute.part.0+0x214>
 800d0de:	2300      	movs	r3, #0
 800d0e0:	461c      	mov	r4, r3
 800d0e2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800d0e6:	e72e      	b.n	800cf46 <_rclc_execute.part.0+0xa6>
 800d0e8:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800d0ea:	f105 0758 	add.w	r7, r5, #88	; 0x58
 800d0ee:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d0f2:	2101      	movs	r1, #1
 800d0f4:	6860      	ldr	r0, [r4, #4]
 800d0f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0fa:	f00a fb25 	bl	8017748 <rclc_action_server_goal_cancel_reject>
 800d0fe:	722e      	strb	r6, [r5, #8]
 800d100:	6860      	ldr	r0, [r4, #4]
 800d102:	e7d7      	b.n	800d0b4 <_rclc_execute.part.0+0x214>
 800d104:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800d106:	f104 0510 	add.w	r5, r4, #16
 800d10a:	6880      	ldr	r0, [r0, #8]
 800d10c:	4798      	blx	r3
 800d10e:	e6e3      	b.n	800ced8 <_rclc_execute.part.0+0x38>
 800d110:	f100 0510 	add.w	r5, r0, #16
 800d114:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d116:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d118:	4629      	mov	r1, r5
 800d11a:	6880      	ldr	r0, [r0, #8]
 800d11c:	4798      	blx	r3
 800d11e:	e6db      	b.n	800ced8 <_rclc_execute.part.0+0x38>
 800d120:	2401      	movs	r4, #1
 800d122:	e710      	b.n	800cf46 <_rclc_execute.part.0+0xa6>

0800d124 <rclc_executor_trigger_any>:
 800d124:	2800      	cmp	r0, #0
 800d126:	d03d      	beq.n	800d1a4 <rclc_executor_trigger_any+0x80>
 800d128:	2900      	cmp	r1, #0
 800d12a:	d03c      	beq.n	800d1a6 <rclc_executor_trigger_any+0x82>
 800d12c:	4603      	mov	r3, r0
 800d12e:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800d132:	2200      	movs	r2, #0
 800d134:	2800      	cmp	r0, #0
 800d136:	d035      	beq.n	800d1a4 <rclc_executor_trigger_any+0x80>
 800d138:	b430      	push	{r4, r5}
 800d13a:	f893 c000 	ldrb.w	ip, [r3]
 800d13e:	f1bc 0f08 	cmp.w	ip, #8
 800d142:	d11d      	bne.n	800d180 <rclc_executor_trigger_any+0x5c>
 800d144:	685c      	ldr	r4, [r3, #4]
 800d146:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800d148:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800d14c:	d105      	bne.n	800d15a <rclc_executor_trigger_any+0x36>
 800d14e:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800d152:	b910      	cbnz	r0, 800d15a <rclc_executor_trigger_any+0x36>
 800d154:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 800d158:	b128      	cbz	r0, 800d166 <rclc_executor_trigger_any+0x42>
 800d15a:	bc30      	pop	{r4, r5}
 800d15c:	4770      	bx	lr
 800d15e:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800d162:	2800      	cmp	r0, #0
 800d164:	d1f9      	bne.n	800d15a <rclc_executor_trigger_any+0x36>
 800d166:	3201      	adds	r2, #1
 800d168:	3340      	adds	r3, #64	; 0x40
 800d16a:	4291      	cmp	r1, r2
 800d16c:	d017      	beq.n	800d19e <rclc_executor_trigger_any+0x7a>
 800d16e:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800d172:	2800      	cmp	r0, #0
 800d174:	d0f1      	beq.n	800d15a <rclc_executor_trigger_any+0x36>
 800d176:	f893 c000 	ldrb.w	ip, [r3]
 800d17a:	f1bc 0f08 	cmp.w	ip, #8
 800d17e:	d0e1      	beq.n	800d144 <rclc_executor_trigger_any+0x20>
 800d180:	f1bc 0f09 	cmp.w	ip, #9
 800d184:	d1eb      	bne.n	800d15e <rclc_executor_trigger_any+0x3a>
 800d186:	685c      	ldr	r4, [r3, #4]
 800d188:	6a25      	ldr	r5, [r4, #32]
 800d18a:	2d00      	cmp	r5, #0
 800d18c:	d1e5      	bne.n	800d15a <rclc_executor_trigger_any+0x36>
 800d18e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800d192:	2800      	cmp	r0, #0
 800d194:	d1e1      	bne.n	800d15a <rclc_executor_trigger_any+0x36>
 800d196:	3201      	adds	r2, #1
 800d198:	3340      	adds	r3, #64	; 0x40
 800d19a:	4291      	cmp	r1, r2
 800d19c:	d1e7      	bne.n	800d16e <rclc_executor_trigger_any+0x4a>
 800d19e:	2000      	movs	r0, #0
 800d1a0:	bc30      	pop	{r4, r5}
 800d1a2:	4770      	bx	lr
 800d1a4:	4770      	bx	lr
 800d1a6:	4608      	mov	r0, r1
 800d1a8:	4770      	bx	lr
 800d1aa:	bf00      	nop

0800d1ac <rclc_executor_get_zero_initialized_executor>:
 800d1ac:	b510      	push	{r4, lr}
 800d1ae:	4604      	mov	r4, r0
 800d1b0:	2290      	movs	r2, #144	; 0x90
 800d1b2:	4902      	ldr	r1, [pc, #8]	; (800d1bc <rclc_executor_get_zero_initialized_executor+0x10>)
 800d1b4:	f00f fbaf 	bl	801c916 <memcpy>
 800d1b8:	4620      	mov	r0, r4
 800d1ba:	bd10      	pop	{r4, pc}
 800d1bc:	0801e388 	.word	0x0801e388

0800d1c0 <rclc_executor_init>:
 800d1c0:	2900      	cmp	r1, #0
 800d1c2:	d06a      	beq.n	800d29a <rclc_executor_init+0xda>
 800d1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1c8:	4605      	mov	r5, r0
 800d1ca:	b0b2      	sub	sp, #200	; 0xc8
 800d1cc:	2800      	cmp	r0, #0
 800d1ce:	d05c      	beq.n	800d28a <rclc_executor_init+0xca>
 800d1d0:	4616      	mov	r6, r2
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	4688      	mov	r8, r1
 800d1d6:	461f      	mov	r7, r3
 800d1d8:	f000 fcf6 	bl	800dbc8 <rcutils_allocator_is_valid>
 800d1dc:	2e00      	cmp	r6, #0
 800d1de:	d054      	beq.n	800d28a <rclc_executor_init+0xca>
 800d1e0:	f080 0401 	eor.w	r4, r0, #1
 800d1e4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800d1e8:	d14f      	bne.n	800d28a <rclc_executor_init+0xca>
 800d1ea:	2290      	movs	r2, #144	; 0x90
 800d1ec:	4930      	ldr	r1, [pc, #192]	; (800d2b0 <rclc_executor_init+0xf0>)
 800d1ee:	a80e      	add	r0, sp, #56	; 0x38
 800d1f0:	f00f fb91 	bl	801c916 <memcpy>
 800d1f4:	a90e      	add	r1, sp, #56	; 0x38
 800d1f6:	2290      	movs	r2, #144	; 0x90
 800d1f8:	4628      	mov	r0, r5
 800d1fa:	f00f fb8c 	bl	801c916 <memcpy>
 800d1fe:	4668      	mov	r0, sp
 800d200:	f8c5 8004 	str.w	r8, [r5, #4]
 800d204:	60ee      	str	r6, [r5, #12]
 800d206:	f008 ff5d 	bl	80160c4 <rcl_get_zero_initialized_wait_set>
 800d20a:	46ec      	mov	ip, sp
 800d20c:	f105 0e18 	add.w	lr, r5, #24
 800d210:	f8d7 8000 	ldr.w	r8, [r7]
 800d214:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d218:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d21c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d220:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d224:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d228:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800d2a8 <rclc_executor_init+0xe8>
 800d22c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d230:	f8dc 3000 	ldr.w	r3, [ip]
 800d234:	01b0      	lsls	r0, r6, #6
 800d236:	6939      	ldr	r1, [r7, #16]
 800d238:	f8ce 3000 	str.w	r3, [lr]
 800d23c:	616f      	str	r7, [r5, #20]
 800d23e:	ed85 7b1c 	vstr	d7, [r5, #112]	; 0x70
 800d242:	47c0      	blx	r8
 800d244:	60a8      	str	r0, [r5, #8]
 800d246:	b908      	cbnz	r0, 800d24c <rclc_executor_init+0x8c>
 800d248:	e029      	b.n	800d29e <rclc_executor_init+0xde>
 800d24a:	68a8      	ldr	r0, [r5, #8]
 800d24c:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800d250:	3401      	adds	r4, #1
 800d252:	4631      	mov	r1, r6
 800d254:	f000 faf4 	bl	800d840 <rclc_executor_handle_init>
 800d258:	42a6      	cmp	r6, r4
 800d25a:	d8f6      	bhi.n	800d24a <rclc_executor_init+0x8a>
 800d25c:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 800d260:	f000 fae4 	bl	800d82c <rclc_executor_handle_counters_zero_init>
 800d264:	4a13      	ldr	r2, [pc, #76]	; (800d2b4 <rclc_executor_init+0xf4>)
 800d266:	2300      	movs	r3, #0
 800d268:	68a8      	ldr	r0, [r5, #8]
 800d26a:	e9c5 2320 	strd	r2, r3, [r5, #128]	; 0x80
 800d26e:	b168      	cbz	r0, 800d28c <rclc_executor_init+0xcc>
 800d270:	68eb      	ldr	r3, [r5, #12]
 800d272:	b173      	cbz	r3, 800d292 <rclc_executor_init+0xd2>
 800d274:	696a      	ldr	r2, [r5, #20]
 800d276:	fab2 f382 	clz	r3, r2
 800d27a:	095b      	lsrs	r3, r3, #5
 800d27c:	b14a      	cbz	r2, 800d292 <rclc_executor_init+0xd2>
 800d27e:	4618      	mov	r0, r3
 800d280:	f885 3088 	strb.w	r3, [r5, #136]	; 0x88
 800d284:	b032      	add	sp, #200	; 0xc8
 800d286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d28a:	200b      	movs	r0, #11
 800d28c:	b032      	add	sp, #200	; 0xc8
 800d28e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d292:	2000      	movs	r0, #0
 800d294:	b032      	add	sp, #200	; 0xc8
 800d296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d29a:	200b      	movs	r0, #11
 800d29c:	4770      	bx	lr
 800d29e:	200a      	movs	r0, #10
 800d2a0:	e7f4      	b.n	800d28c <rclc_executor_init+0xcc>
 800d2a2:	bf00      	nop
 800d2a4:	f3af 8000 	nop.w
 800d2a8:	3b9aca00 	.word	0x3b9aca00
 800d2ac:	00000000 	.word	0x00000000
 800d2b0:	0801e388 	.word	0x0801e388
 800d2b4:	0800d125 	.word	0x0800d125

0800d2b8 <rclc_executor_add_subscription>:
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	bf18      	it	ne
 800d2bc:	2a00      	cmpne	r2, #0
 800d2be:	b570      	push	{r4, r5, r6, lr}
 800d2c0:	4604      	mov	r4, r0
 800d2c2:	bf0c      	ite	eq
 800d2c4:	2001      	moveq	r0, #1
 800d2c6:	2000      	movne	r0, #0
 800d2c8:	f89d c010 	ldrb.w	ip, [sp, #16]
 800d2cc:	2900      	cmp	r1, #0
 800d2ce:	bf08      	it	eq
 800d2d0:	f040 0001 	orreq.w	r0, r0, #1
 800d2d4:	bb28      	cbnz	r0, 800d322 <rclc_executor_add_subscription+0x6a>
 800d2d6:	fab4 f584 	clz	r5, r4
 800d2da:	096d      	lsrs	r5, r5, #5
 800d2dc:	b30c      	cbz	r4, 800d322 <rclc_executor_add_subscription+0x6a>
 800d2de:	e9d4 0603 	ldrd	r0, r6, [r4, #12]
 800d2e2:	4286      	cmp	r6, r0
 800d2e4:	d301      	bcc.n	800d2ea <rclc_executor_add_subscription+0x32>
 800d2e6:	2001      	movs	r0, #1
 800d2e8:	bd70      	pop	{r4, r5, r6, pc}
 800d2ea:	68a0      	ldr	r0, [r4, #8]
 800d2ec:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 800d2f0:	f800 500e 	strb.w	r5, [r0, lr]
 800d2f4:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800d2f8:	3601      	adds	r6, #1
 800d2fa:	6303      	str	r3, [r0, #48]	; 0x30
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	62c5      	str	r5, [r0, #44]	; 0x2c
 800d300:	f104 0518 	add.w	r5, r4, #24
 800d304:	f880 c001 	strb.w	ip, [r0, #1]
 800d308:	8703      	strh	r3, [r0, #56]	; 0x38
 800d30a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800d30e:	4628      	mov	r0, r5
 800d310:	6126      	str	r6, [r4, #16]
 800d312:	f008 feeb 	bl	80160ec <rcl_wait_set_is_valid>
 800d316:	b930      	cbnz	r0, 800d326 <rclc_executor_add_subscription+0x6e>
 800d318:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d31a:	2000      	movs	r0, #0
 800d31c:	3301      	adds	r3, #1
 800d31e:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d320:	bd70      	pop	{r4, r5, r6, pc}
 800d322:	200b      	movs	r0, #11
 800d324:	bd70      	pop	{r4, r5, r6, pc}
 800d326:	4628      	mov	r0, r5
 800d328:	f008 fee6 	bl	80160f8 <rcl_wait_set_fini>
 800d32c:	2800      	cmp	r0, #0
 800d32e:	d0f3      	beq.n	800d318 <rclc_executor_add_subscription+0x60>
 800d330:	bd70      	pop	{r4, r5, r6, pc}
 800d332:	bf00      	nop

0800d334 <rclc_executor_add_timer>:
 800d334:	b351      	cbz	r1, 800d38c <rclc_executor_add_timer+0x58>
 800d336:	fab0 f280 	clz	r2, r0
 800d33a:	b570      	push	{r4, r5, r6, lr}
 800d33c:	0952      	lsrs	r2, r2, #5
 800d33e:	4604      	mov	r4, r0
 800d340:	b1e0      	cbz	r0, 800d37c <rclc_executor_add_timer+0x48>
 800d342:	e9d0 0303 	ldrd	r0, r3, [r0, #12]
 800d346:	4283      	cmp	r3, r0
 800d348:	d301      	bcc.n	800d34e <rclc_executor_add_timer+0x1a>
 800d34a:	2001      	movs	r0, #1
 800d34c:	bd70      	pop	{r4, r5, r6, pc}
 800d34e:	68a0      	ldr	r0, [r4, #8]
 800d350:	019d      	lsls	r5, r3, #6
 800d352:	1c5e      	adds	r6, r3, #1
 800d354:	eb00 1383 	add.w	r3, r0, r3, lsl #6
 800d358:	6059      	str	r1, [r3, #4]
 800d35a:	2102      	movs	r1, #2
 800d35c:	5341      	strh	r1, [r0, r5]
 800d35e:	2101      	movs	r1, #1
 800d360:	f104 0518 	add.w	r5, r4, #24
 800d364:	62da      	str	r2, [r3, #44]	; 0x2c
 800d366:	8719      	strh	r1, [r3, #56]	; 0x38
 800d368:	4628      	mov	r0, r5
 800d36a:	6126      	str	r6, [r4, #16]
 800d36c:	f008 febe 	bl	80160ec <rcl_wait_set_is_valid>
 800d370:	b930      	cbnz	r0, 800d380 <rclc_executor_add_timer+0x4c>
 800d372:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d374:	2000      	movs	r0, #0
 800d376:	3301      	adds	r3, #1
 800d378:	6523      	str	r3, [r4, #80]	; 0x50
 800d37a:	bd70      	pop	{r4, r5, r6, pc}
 800d37c:	200b      	movs	r0, #11
 800d37e:	bd70      	pop	{r4, r5, r6, pc}
 800d380:	4628      	mov	r0, r5
 800d382:	f008 feb9 	bl	80160f8 <rcl_wait_set_fini>
 800d386:	2800      	cmp	r0, #0
 800d388:	d0f3      	beq.n	800d372 <rclc_executor_add_timer+0x3e>
 800d38a:	bd70      	pop	{r4, r5, r6, pc}
 800d38c:	200b      	movs	r0, #11
 800d38e:	4770      	bx	lr

0800d390 <rclc_executor_add_service>:
 800d390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d392:	9d06      	ldr	r5, [sp, #24]
 800d394:	4604      	mov	r4, r0
 800d396:	2b00      	cmp	r3, #0
 800d398:	bf18      	it	ne
 800d39a:	2d00      	cmpne	r5, #0
 800d39c:	bf0c      	ite	eq
 800d39e:	2001      	moveq	r0, #1
 800d3a0:	2000      	movne	r0, #0
 800d3a2:	2a00      	cmp	r2, #0
 800d3a4:	bf08      	it	eq
 800d3a6:	f040 0001 	orreq.w	r0, r0, #1
 800d3aa:	2900      	cmp	r1, #0
 800d3ac:	bf08      	it	eq
 800d3ae:	f040 0001 	orreq.w	r0, r0, #1
 800d3b2:	bb40      	cbnz	r0, 800d406 <rclc_executor_add_service+0x76>
 800d3b4:	fab4 f684 	clz	r6, r4
 800d3b8:	0976      	lsrs	r6, r6, #5
 800d3ba:	b324      	cbz	r4, 800d406 <rclc_executor_add_service+0x76>
 800d3bc:	e9d4 7003 	ldrd	r7, r0, [r4, #12]
 800d3c0:	42b8      	cmp	r0, r7
 800d3c2:	d301      	bcc.n	800d3c8 <rclc_executor_add_service+0x38>
 800d3c4:	2001      	movs	r0, #1
 800d3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3c8:	68a7      	ldr	r7, [r4, #8]
 800d3ca:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800d3ce:	f100 0c01 	add.w	ip, r0, #1
 800d3d2:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 800d3d6:	6283      	str	r3, [r0, #40]	; 0x28
 800d3d8:	2305      	movs	r3, #5
 800d3da:	6305      	str	r5, [r0, #48]	; 0x30
 800d3dc:	f104 0518 	add.w	r5, r4, #24
 800d3e0:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800d3e4:	f827 300e 	strh.w	r3, [r7, lr]
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	62c6      	str	r6, [r0, #44]	; 0x2c
 800d3ec:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800d3f0:	4628      	mov	r0, r5
 800d3f2:	f8c4 c010 	str.w	ip, [r4, #16]
 800d3f6:	f008 fe79 	bl	80160ec <rcl_wait_set_is_valid>
 800d3fa:	b930      	cbnz	r0, 800d40a <rclc_executor_add_service+0x7a>
 800d3fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d3fe:	2000      	movs	r0, #0
 800d400:	3301      	adds	r3, #1
 800d402:	65a3      	str	r3, [r4, #88]	; 0x58
 800d404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d406:	200b      	movs	r0, #11
 800d408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d40a:	4628      	mov	r0, r5
 800d40c:	f008 fe74 	bl	80160f8 <rcl_wait_set_fini>
 800d410:	2800      	cmp	r0, #0
 800d412:	d0f3      	beq.n	800d3fc <rclc_executor_add_service+0x6c>
 800d414:	e7d7      	b.n	800d3c6 <rclc_executor_add_service+0x36>
 800d416:	bf00      	nop

0800d418 <rclc_executor_prepare>:
 800d418:	2800      	cmp	r0, #0
 800d41a:	d044      	beq.n	800d4a6 <rclc_executor_prepare+0x8e>
 800d41c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d41e:	f100 0518 	add.w	r5, r0, #24
 800d422:	b09b      	sub	sp, #108	; 0x6c
 800d424:	4604      	mov	r4, r0
 800d426:	4628      	mov	r0, r5
 800d428:	f008 fe60 	bl	80160ec <rcl_wait_set_is_valid>
 800d42c:	b110      	cbz	r0, 800d434 <rclc_executor_prepare+0x1c>
 800d42e:	2000      	movs	r0, #0
 800d430:	b01b      	add	sp, #108	; 0x6c
 800d432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d434:	4628      	mov	r0, r5
 800d436:	f008 fe5f 	bl	80160f8 <rcl_wait_set_fini>
 800d43a:	2800      	cmp	r0, #0
 800d43c:	d130      	bne.n	800d4a0 <rclc_executor_prepare+0x88>
 800d43e:	a80c      	add	r0, sp, #48	; 0x30
 800d440:	ae04      	add	r6, sp, #16
 800d442:	f008 fe3f 	bl	80160c4 <rcl_get_zero_initialized_wait_set>
 800d446:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800d44a:	46ae      	mov	lr, r5
 800d44c:	6967      	ldr	r7, [r4, #20]
 800d44e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d452:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d456:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d45a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d45e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d462:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d466:	f8dc 3000 	ldr.w	r3, [ip]
 800d46a:	f8ce 3000 	str.w	r3, [lr]
 800d46e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d470:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	4628      	mov	r0, r5
 800d476:	6862      	ldr	r2, [r4, #4]
 800d478:	6033      	str	r3, [r6, #0]
 800d47a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800d47c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d47e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800d482:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800d486:	e9cd 2100 	strd	r2, r1, [sp]
 800d48a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d48c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800d48e:	f009 f933 	bl	80166f8 <rcl_wait_set_init>
 800d492:	2800      	cmp	r0, #0
 800d494:	d0cc      	beq.n	800d430 <rclc_executor_prepare+0x18>
 800d496:	900b      	str	r0, [sp, #44]	; 0x2c
 800d498:	f000 fbba 	bl	800dc10 <rcutils_reset_error>
 800d49c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d49e:	e7c7      	b.n	800d430 <rclc_executor_prepare+0x18>
 800d4a0:	f000 fbb6 	bl	800dc10 <rcutils_reset_error>
 800d4a4:	e7cb      	b.n	800d43e <rclc_executor_prepare+0x26>
 800d4a6:	200b      	movs	r0, #11
 800d4a8:	4770      	bx	lr
 800d4aa:	bf00      	nop

0800d4ac <rclc_executor_spin_some.part.0>:
 800d4ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4b0:	4605      	mov	r5, r0
 800d4b2:	4691      	mov	r9, r2
 800d4b4:	4698      	mov	r8, r3
 800d4b6:	f7ff ffaf 	bl	800d418 <rclc_executor_prepare>
 800d4ba:	f105 0618 	add.w	r6, r5, #24
 800d4be:	4630      	mov	r0, r6
 800d4c0:	f008 fee6 	bl	8016290 <rcl_wait_set_clear>
 800d4c4:	4607      	mov	r7, r0
 800d4c6:	2800      	cmp	r0, #0
 800d4c8:	f040 80a8 	bne.w	800d61c <rclc_executor_spin_some.part.0+0x170>
 800d4cc:	68eb      	ldr	r3, [r5, #12]
 800d4ce:	b30b      	cbz	r3, 800d514 <rclc_executor_spin_some.part.0+0x68>
 800d4d0:	4604      	mov	r4, r0
 800d4d2:	68a9      	ldr	r1, [r5, #8]
 800d4d4:	01a2      	lsls	r2, r4, #6
 800d4d6:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800d4da:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 800d4de:	b1cb      	cbz	r3, 800d514 <rclc_executor_spin_some.part.0+0x68>
 800d4e0:	5c8b      	ldrb	r3, [r1, r2]
 800d4e2:	2b0a      	cmp	r3, #10
 800d4e4:	f200 80de 	bhi.w	800d6a4 <rclc_executor_spin_some.part.0+0x1f8>
 800d4e8:	e8df f003 	tbb	[pc, r3]
 800d4ec:	8da99d9d 	.word	0x8da99d9d
 800d4f0:	0606068d 	.word	0x0606068d
 800d4f4:	c1ce      	.short	0xc1ce
 800d4f6:	b5          	.byte	0xb5
 800d4f7:	00          	.byte	0x00
 800d4f8:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d4fc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d500:	4630      	mov	r0, r6
 800d502:	f009 fa15 	bl	8016930 <rcl_wait_set_add_service>
 800d506:	2800      	cmp	r0, #0
 800d508:	f040 8087 	bne.w	800d61a <rclc_executor_spin_some.part.0+0x16e>
 800d50c:	3401      	adds	r4, #1
 800d50e:	68eb      	ldr	r3, [r5, #12]
 800d510:	429c      	cmp	r4, r3
 800d512:	d3de      	bcc.n	800d4d2 <rclc_executor_spin_some.part.0+0x26>
 800d514:	4643      	mov	r3, r8
 800d516:	464a      	mov	r2, r9
 800d518:	4630      	mov	r0, r6
 800d51a:	f009 fa35 	bl	8016988 <rcl_wait>
 800d51e:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
 800d522:	2b00      	cmp	r3, #0
 800d524:	f000 80c6 	beq.w	800d6b4 <rclc_executor_spin_some.part.0+0x208>
 800d528:	2b01      	cmp	r3, #1
 800d52a:	f040 80bb 	bne.w	800d6a4 <rclc_executor_spin_some.part.0+0x1f8>
 800d52e:	68eb      	ldr	r3, [r5, #12]
 800d530:	2b00      	cmp	r3, #0
 800d532:	f000 8159 	beq.w	800d7e8 <rclc_executor_spin_some.part.0+0x33c>
 800d536:	2400      	movs	r4, #0
 800d538:	f240 1991 	movw	r9, #401	; 0x191
 800d53c:	46a0      	mov	r8, r4
 800d53e:	e00a      	b.n	800d556 <rclc_executor_spin_some.part.0+0xaa>
 800d540:	f7ff faec 	bl	800cb1c <_rclc_check_for_new_data>
 800d544:	4604      	mov	r4, r0
 800d546:	b110      	cbz	r0, 800d54e <rclc_executor_spin_some.part.0+0xa2>
 800d548:	4548      	cmp	r0, r9
 800d54a:	f040 80b1 	bne.w	800d6b0 <rclc_executor_spin_some.part.0+0x204>
 800d54e:	68eb      	ldr	r3, [r5, #12]
 800d550:	4598      	cmp	r8, r3
 800d552:	f080 8126 	bcs.w	800d7a2 <rclc_executor_spin_some.part.0+0x2f6>
 800d556:	68aa      	ldr	r2, [r5, #8]
 800d558:	4631      	mov	r1, r6
 800d55a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d55e:	f108 0801 	add.w	r8, r8, #1
 800d562:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800d566:	f1bc 0f00 	cmp.w	ip, #0
 800d56a:	d1e9      	bne.n	800d540 <rclc_executor_spin_some.part.0+0x94>
 800d56c:	4619      	mov	r1, r3
 800d56e:	4610      	mov	r0, r2
 800d570:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 800d574:	4798      	blx	r3
 800d576:	2800      	cmp	r0, #0
 800d578:	f000 809a 	beq.w	800d6b0 <rclc_executor_spin_some.part.0+0x204>
 800d57c:	68eb      	ldr	r3, [r5, #12]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	f000 8096 	beq.w	800d6b0 <rclc_executor_spin_some.part.0+0x204>
 800d584:	f04f 0800 	mov.w	r8, #0
 800d588:	f240 1991 	movw	r9, #401	; 0x191
 800d58c:	e009      	b.n	800d5a2 <rclc_executor_spin_some.part.0+0xf6>
 800d58e:	f7ff fb13 	bl	800cbb8 <_rclc_take_new_data>
 800d592:	4604      	mov	r4, r0
 800d594:	b110      	cbz	r0, 800d59c <rclc_executor_spin_some.part.0+0xf0>
 800d596:	4548      	cmp	r0, r9
 800d598:	f040 808a 	bne.w	800d6b0 <rclc_executor_spin_some.part.0+0x204>
 800d59c:	68eb      	ldr	r3, [r5, #12]
 800d59e:	4598      	cmp	r8, r3
 800d5a0:	d209      	bcs.n	800d5b6 <rclc_executor_spin_some.part.0+0x10a>
 800d5a2:	68a8      	ldr	r0, [r5, #8]
 800d5a4:	4631      	mov	r1, r6
 800d5a6:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800d5aa:	f108 0801 	add.w	r8, r8, #1
 800d5ae:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800d5b2:	2a00      	cmp	r2, #0
 800d5b4:	d1eb      	bne.n	800d58e <rclc_executor_spin_some.part.0+0xe2>
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d07a      	beq.n	800d6b0 <rclc_executor_spin_some.part.0+0x204>
 800d5ba:	2600      	movs	r6, #0
 800d5bc:	e00e      	b.n	800d5dc <rclc_executor_spin_some.part.0+0x130>
 800d5be:	f812 200c 	ldrb.w	r2, [r2, ip]
 800d5c2:	2a08      	cmp	r2, #8
 800d5c4:	f000 80fc 	beq.w	800d7c0 <rclc_executor_spin_some.part.0+0x314>
 800d5c8:	2a09      	cmp	r2, #9
 800d5ca:	f000 80ee 	beq.w	800d7aa <rclc_executor_spin_some.part.0+0x2fe>
 800d5ce:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800d5d2:	b98a      	cbnz	r2, 800d5f8 <rclc_executor_spin_some.part.0+0x14c>
 800d5d4:	3601      	adds	r6, #1
 800d5d6:	429e      	cmp	r6, r3
 800d5d8:	d267      	bcs.n	800d6aa <rclc_executor_spin_some.part.0+0x1fe>
 800d5da:	2400      	movs	r4, #0
 800d5dc:	68aa      	ldr	r2, [r5, #8]
 800d5de:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800d5e2:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800d5e6:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 800d5ea:	2900      	cmp	r1, #0
 800d5ec:	d060      	beq.n	800d6b0 <rclc_executor_spin_some.part.0+0x204>
 800d5ee:	7841      	ldrb	r1, [r0, #1]
 800d5f0:	2900      	cmp	r1, #0
 800d5f2:	d0e4      	beq.n	800d5be <rclc_executor_spin_some.part.0+0x112>
 800d5f4:	2901      	cmp	r1, #1
 800d5f6:	d1ed      	bne.n	800d5d4 <rclc_executor_spin_some.part.0+0x128>
 800d5f8:	f7ff fc52 	bl	800cea0 <_rclc_execute.part.0>
 800d5fc:	2800      	cmp	r0, #0
 800d5fe:	f040 80b5 	bne.w	800d76c <rclc_executor_spin_some.part.0+0x2c0>
 800d602:	68eb      	ldr	r3, [r5, #12]
 800d604:	e7e6      	b.n	800d5d4 <rclc_executor_spin_some.part.0+0x128>
 800d606:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d60a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d60e:	4630      	mov	r0, r6
 800d610:	f009 f962 	bl	80168d8 <rcl_wait_set_add_client>
 800d614:	2800      	cmp	r0, #0
 800d616:	f43f af79 	beq.w	800d50c <rclc_executor_spin_some.part.0+0x60>
 800d61a:	4607      	mov	r7, r0
 800d61c:	f000 faf8 	bl	800dc10 <rcutils_reset_error>
 800d620:	4638      	mov	r0, r7
 800d622:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d626:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d62a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d62e:	4630      	mov	r0, r6
 800d630:	f008 fe02 	bl	8016238 <rcl_wait_set_add_subscription>
 800d634:	2800      	cmp	r0, #0
 800d636:	f43f af69 	beq.w	800d50c <rclc_executor_spin_some.part.0+0x60>
 800d63a:	4607      	mov	r7, r0
 800d63c:	e7ee      	b.n	800d61c <rclc_executor_spin_some.part.0+0x170>
 800d63e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d642:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d646:	4630      	mov	r0, r6
 800d648:	f009 f916 	bl	8016878 <rcl_wait_set_add_timer>
 800d64c:	2800      	cmp	r0, #0
 800d64e:	f43f af5d 	beq.w	800d50c <rclc_executor_spin_some.part.0+0x60>
 800d652:	4607      	mov	r7, r0
 800d654:	e7e2      	b.n	800d61c <rclc_executor_spin_some.part.0+0x170>
 800d656:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d65a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d65e:	4630      	mov	r0, r6
 800d660:	f009 f8de 	bl	8016820 <rcl_wait_set_add_guard_condition>
 800d664:	2800      	cmp	r0, #0
 800d666:	f43f af51 	beq.w	800d50c <rclc_executor_spin_some.part.0+0x60>
 800d66a:	4607      	mov	r7, r0
 800d66c:	e7d6      	b.n	800d61c <rclc_executor_spin_some.part.0+0x170>
 800d66e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d672:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d676:	4630      	mov	r0, r6
 800d678:	3110      	adds	r1, #16
 800d67a:	f009 fe59 	bl	8017330 <rcl_action_wait_set_add_action_server>
 800d67e:	2800      	cmp	r0, #0
 800d680:	f43f af44 	beq.w	800d50c <rclc_executor_spin_some.part.0+0x60>
 800d684:	4607      	mov	r7, r0
 800d686:	e7c9      	b.n	800d61c <rclc_executor_spin_some.part.0+0x170>
 800d688:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d68c:	2300      	movs	r3, #0
 800d68e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d692:	4630      	mov	r0, r6
 800d694:	3110      	adds	r1, #16
 800d696:	f009 fc23 	bl	8016ee0 <rcl_action_wait_set_add_action_client>
 800d69a:	2800      	cmp	r0, #0
 800d69c:	f43f af36 	beq.w	800d50c <rclc_executor_spin_some.part.0+0x60>
 800d6a0:	4607      	mov	r7, r0
 800d6a2:	e7bb      	b.n	800d61c <rclc_executor_spin_some.part.0+0x170>
 800d6a4:	2701      	movs	r7, #1
 800d6a6:	f000 fab3 	bl	800dc10 <rcutils_reset_error>
 800d6aa:	4638      	mov	r0, r7
 800d6ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b0:	4627      	mov	r7, r4
 800d6b2:	e7fa      	b.n	800d6aa <rclc_executor_spin_some.part.0+0x1fe>
 800d6b4:	68eb      	ldr	r3, [r5, #12]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	f000 8093 	beq.w	800d7e2 <rclc_executor_spin_some.part.0+0x336>
 800d6bc:	2400      	movs	r4, #0
 800d6be:	f240 1991 	movw	r9, #401	; 0x191
 800d6c2:	46a0      	mov	r8, r4
 800d6c4:	e008      	b.n	800d6d8 <rclc_executor_spin_some.part.0+0x22c>
 800d6c6:	f7ff fa29 	bl	800cb1c <_rclc_check_for_new_data>
 800d6ca:	4604      	mov	r4, r0
 800d6cc:	b108      	cbz	r0, 800d6d2 <rclc_executor_spin_some.part.0+0x226>
 800d6ce:	4548      	cmp	r0, r9
 800d6d0:	d1ee      	bne.n	800d6b0 <rclc_executor_spin_some.part.0+0x204>
 800d6d2:	68eb      	ldr	r3, [r5, #12]
 800d6d4:	4598      	cmp	r8, r3
 800d6d6:	d266      	bcs.n	800d7a6 <rclc_executor_spin_some.part.0+0x2fa>
 800d6d8:	68aa      	ldr	r2, [r5, #8]
 800d6da:	4631      	mov	r1, r6
 800d6dc:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d6e0:	f108 0801 	add.w	r8, r8, #1
 800d6e4:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800d6e8:	f1bc 0f00 	cmp.w	ip, #0
 800d6ec:	d1eb      	bne.n	800d6c6 <rclc_executor_spin_some.part.0+0x21a>
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	4610      	mov	r0, r2
 800d6f2:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 800d6f6:	4798      	blx	r3
 800d6f8:	2800      	cmp	r0, #0
 800d6fa:	d0d9      	beq.n	800d6b0 <rclc_executor_spin_some.part.0+0x204>
 800d6fc:	68eb      	ldr	r3, [r5, #12]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d0d6      	beq.n	800d6b0 <rclc_executor_spin_some.part.0+0x204>
 800d702:	f04f 0a00 	mov.w	sl, #0
 800d706:	f240 1891 	movw	r8, #401	; 0x191
 800d70a:	f240 2959 	movw	r9, #601	; 0x259
 800d70e:	e00e      	b.n	800d72e <rclc_executor_spin_some.part.0+0x282>
 800d710:	f813 300b 	ldrb.w	r3, [r3, fp]
 800d714:	2b08      	cmp	r3, #8
 800d716:	d034      	beq.n	800d782 <rclc_executor_spin_some.part.0+0x2d6>
 800d718:	2b09      	cmp	r3, #9
 800d71a:	d029      	beq.n	800d770 <rclc_executor_spin_some.part.0+0x2c4>
 800d71c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800d720:	bb03      	cbnz	r3, 800d764 <rclc_executor_spin_some.part.0+0x2b8>
 800d722:	f10a 0a01 	add.w	sl, sl, #1
 800d726:	68eb      	ldr	r3, [r5, #12]
 800d728:	459a      	cmp	sl, r3
 800d72a:	d2be      	bcs.n	800d6aa <rclc_executor_spin_some.part.0+0x1fe>
 800d72c:	2400      	movs	r4, #0
 800d72e:	68a8      	ldr	r0, [r5, #8]
 800d730:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800d734:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800d738:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d0b7      	beq.n	800d6b0 <rclc_executor_spin_some.part.0+0x204>
 800d740:	4631      	mov	r1, r6
 800d742:	f7ff fa39 	bl	800cbb8 <_rclc_take_new_data>
 800d746:	2800      	cmp	r0, #0
 800d748:	bf18      	it	ne
 800d74a:	4540      	cmpne	r0, r8
 800d74c:	d001      	beq.n	800d752 <rclc_executor_spin_some.part.0+0x2a6>
 800d74e:	4548      	cmp	r0, r9
 800d750:	d10c      	bne.n	800d76c <rclc_executor_spin_some.part.0+0x2c0>
 800d752:	68ab      	ldr	r3, [r5, #8]
 800d754:	eb13 000b 	adds.w	r0, r3, fp
 800d758:	d021      	beq.n	800d79e <rclc_executor_spin_some.part.0+0x2f2>
 800d75a:	7842      	ldrb	r2, [r0, #1]
 800d75c:	2a00      	cmp	r2, #0
 800d75e:	d0d7      	beq.n	800d710 <rclc_executor_spin_some.part.0+0x264>
 800d760:	2a01      	cmp	r2, #1
 800d762:	d1de      	bne.n	800d722 <rclc_executor_spin_some.part.0+0x276>
 800d764:	f7ff fb9c 	bl	800cea0 <_rclc_execute.part.0>
 800d768:	2800      	cmp	r0, #0
 800d76a:	d0da      	beq.n	800d722 <rclc_executor_spin_some.part.0+0x276>
 800d76c:	4607      	mov	r7, r0
 800d76e:	e79c      	b.n	800d6aa <rclc_executor_spin_some.part.0+0x1fe>
 800d770:	6843      	ldr	r3, [r0, #4]
 800d772:	6a1a      	ldr	r2, [r3, #32]
 800d774:	2a00      	cmp	r2, #0
 800d776:	d1f5      	bne.n	800d764 <rclc_executor_spin_some.part.0+0x2b8>
 800d778:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d0d0      	beq.n	800d722 <rclc_executor_spin_some.part.0+0x276>
 800d780:	e7f0      	b.n	800d764 <rclc_executor_spin_some.part.0+0x2b8>
 800d782:	6843      	ldr	r3, [r0, #4]
 800d784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d786:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800d78a:	d1eb      	bne.n	800d764 <rclc_executor_spin_some.part.0+0x2b8>
 800d78c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d790:	2a00      	cmp	r2, #0
 800d792:	d1e7      	bne.n	800d764 <rclc_executor_spin_some.part.0+0x2b8>
 800d794:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d0c2      	beq.n	800d722 <rclc_executor_spin_some.part.0+0x276>
 800d79c:	e7e2      	b.n	800d764 <rclc_executor_spin_some.part.0+0x2b8>
 800d79e:	270b      	movs	r7, #11
 800d7a0:	e783      	b.n	800d6aa <rclc_executor_spin_some.part.0+0x1fe>
 800d7a2:	68aa      	ldr	r2, [r5, #8]
 800d7a4:	e6e2      	b.n	800d56c <rclc_executor_spin_some.part.0+0xc0>
 800d7a6:	68aa      	ldr	r2, [r5, #8]
 800d7a8:	e7a1      	b.n	800d6ee <rclc_executor_spin_some.part.0+0x242>
 800d7aa:	6842      	ldr	r2, [r0, #4]
 800d7ac:	6a11      	ldr	r1, [r2, #32]
 800d7ae:	2900      	cmp	r1, #0
 800d7b0:	f47f af22 	bne.w	800d5f8 <rclc_executor_spin_some.part.0+0x14c>
 800d7b4:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800d7b8:	2a00      	cmp	r2, #0
 800d7ba:	f43f af0b 	beq.w	800d5d4 <rclc_executor_spin_some.part.0+0x128>
 800d7be:	e71b      	b.n	800d5f8 <rclc_executor_spin_some.part.0+0x14c>
 800d7c0:	6842      	ldr	r2, [r0, #4]
 800d7c2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800d7c4:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 800d7c8:	f47f af16 	bne.w	800d5f8 <rclc_executor_spin_some.part.0+0x14c>
 800d7cc:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 800d7d0:	2900      	cmp	r1, #0
 800d7d2:	f47f af11 	bne.w	800d5f8 <rclc_executor_spin_some.part.0+0x14c>
 800d7d6:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800d7da:	2a00      	cmp	r2, #0
 800d7dc:	f43f aefa 	beq.w	800d5d4 <rclc_executor_spin_some.part.0+0x128>
 800d7e0:	e70a      	b.n	800d5f8 <rclc_executor_spin_some.part.0+0x14c>
 800d7e2:	68aa      	ldr	r2, [r5, #8]
 800d7e4:	461c      	mov	r4, r3
 800d7e6:	e782      	b.n	800d6ee <rclc_executor_spin_some.part.0+0x242>
 800d7e8:	68aa      	ldr	r2, [r5, #8]
 800d7ea:	461c      	mov	r4, r3
 800d7ec:	e6be      	b.n	800d56c <rclc_executor_spin_some.part.0+0xc0>
 800d7ee:	bf00      	nop

0800d7f0 <rclc_executor_spin>:
 800d7f0:	b1d0      	cbz	r0, 800d828 <rclc_executor_spin+0x38>
 800d7f2:	b510      	push	{r4, lr}
 800d7f4:	4604      	mov	r4, r0
 800d7f6:	b082      	sub	sp, #8
 800d7f8:	e004      	b.n	800d804 <rclc_executor_spin+0x14>
 800d7fa:	f7ff fe57 	bl	800d4ac <rclc_executor_spin_some.part.0>
 800d7fe:	f030 0302 	bics.w	r3, r0, #2
 800d802:	d10f      	bne.n	800d824 <rclc_executor_spin+0x34>
 800d804:	6860      	ldr	r0, [r4, #4]
 800d806:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
 800d80a:	e9cd 2300 	strd	r2, r3, [sp]
 800d80e:	f006 fe7b 	bl	8014508 <rcl_context_is_valid>
 800d812:	4601      	mov	r1, r0
 800d814:	4620      	mov	r0, r4
 800d816:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d81a:	2900      	cmp	r1, #0
 800d81c:	d1ed      	bne.n	800d7fa <rclc_executor_spin+0xa>
 800d81e:	f000 f9f7 	bl	800dc10 <rcutils_reset_error>
 800d822:	2001      	movs	r0, #1
 800d824:	b002      	add	sp, #8
 800d826:	bd10      	pop	{r4, pc}
 800d828:	200b      	movs	r0, #11
 800d82a:	4770      	bx	lr

0800d82c <rclc_executor_handle_counters_zero_init>:
 800d82c:	b130      	cbz	r0, 800d83c <rclc_executor_handle_counters_zero_init+0x10>
 800d82e:	2220      	movs	r2, #32
 800d830:	2100      	movs	r1, #0
 800d832:	b508      	push	{r3, lr}
 800d834:	f00e ff3e 	bl	801c6b4 <memset>
 800d838:	2000      	movs	r0, #0
 800d83a:	bd08      	pop	{r3, pc}
 800d83c:	200b      	movs	r0, #11
 800d83e:	4770      	bx	lr

0800d840 <rclc_executor_handle_init>:
 800d840:	4603      	mov	r3, r0
 800d842:	b178      	cbz	r0, 800d864 <rclc_executor_handle_init+0x24>
 800d844:	2200      	movs	r2, #0
 800d846:	f04f 0c0b 	mov.w	ip, #11
 800d84a:	6341      	str	r1, [r0, #52]	; 0x34
 800d84c:	4610      	mov	r0, r2
 800d84e:	f8a3 c000 	strh.w	ip, [r3]
 800d852:	631a      	str	r2, [r3, #48]	; 0x30
 800d854:	871a      	strh	r2, [r3, #56]	; 0x38
 800d856:	ed9f 7b04 	vldr	d7, [pc, #16]	; 800d868 <rclc_executor_handle_init+0x28>
 800d85a:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800d85e:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 800d862:	4770      	bx	lr
 800d864:	200b      	movs	r0, #11
 800d866:	4770      	bx	lr
	...

0800d870 <rclc_support_init>:
 800d870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d874:	b086      	sub	sp, #24
 800d876:	b3bb      	cbz	r3, 800d8e8 <rclc_support_init+0x78>
 800d878:	4606      	mov	r6, r0
 800d87a:	b3a8      	cbz	r0, 800d8e8 <rclc_support_init+0x78>
 800d87c:	461c      	mov	r4, r3
 800d87e:	460f      	mov	r7, r1
 800d880:	4690      	mov	r8, r2
 800d882:	f006 ffe1 	bl	8014848 <rcl_get_zero_initialized_init_options>
 800d886:	f104 050c 	add.w	r5, r4, #12
 800d88a:	9005      	str	r0, [sp, #20]
 800d88c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d890:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d894:	a805      	add	r0, sp, #20
 800d896:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d89a:	f006 ffd7 	bl	801484c <rcl_init_options_init>
 800d89e:	4605      	mov	r5, r0
 800d8a0:	b9e0      	cbnz	r0, 800d8dc <rclc_support_init+0x6c>
 800d8a2:	ad02      	add	r5, sp, #8
 800d8a4:	4628      	mov	r0, r5
 800d8a6:	f006 fe25 	bl	80144f4 <rcl_get_zero_initialized_context>
 800d8aa:	4633      	mov	r3, r6
 800d8ac:	aa05      	add	r2, sp, #20
 800d8ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d8b2:	e886 0003 	stmia.w	r6, {r0, r1}
 800d8b6:	4641      	mov	r1, r8
 800d8b8:	4638      	mov	r0, r7
 800d8ba:	f006 fe8b 	bl	80145d4 <rcl_init>
 800d8be:	4605      	mov	r5, r0
 800d8c0:	b9b8      	cbnz	r0, 800d8f2 <rclc_support_init+0x82>
 800d8c2:	4622      	mov	r2, r4
 800d8c4:	f106 010c 	add.w	r1, r6, #12
 800d8c8:	2003      	movs	r0, #3
 800d8ca:	60b4      	str	r4, [r6, #8]
 800d8cc:	f007 ffd4 	bl	8015878 <rcl_clock_init>
 800d8d0:	4605      	mov	r5, r0
 800d8d2:	b970      	cbnz	r0, 800d8f2 <rclc_support_init+0x82>
 800d8d4:	a805      	add	r0, sp, #20
 800d8d6:	f007 f815 	bl	8014904 <rcl_init_options_fini>
 800d8da:	b108      	cbz	r0, 800d8e0 <rclc_support_init+0x70>
 800d8dc:	f000 f998 	bl	800dc10 <rcutils_reset_error>
 800d8e0:	4628      	mov	r0, r5
 800d8e2:	b006      	add	sp, #24
 800d8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8e8:	250b      	movs	r5, #11
 800d8ea:	4628      	mov	r0, r5
 800d8ec:	b006      	add	sp, #24
 800d8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8f2:	f000 f98d 	bl	800dc10 <rcutils_reset_error>
 800d8f6:	a805      	add	r0, sp, #20
 800d8f8:	f007 f804 	bl	8014904 <rcl_init_options_fini>
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	d0ef      	beq.n	800d8e0 <rclc_support_init+0x70>
 800d900:	e7ec      	b.n	800d8dc <rclc_support_init+0x6c>
 800d902:	bf00      	nop

0800d904 <rclc_node_init_default>:
 800d904:	2b00      	cmp	r3, #0
 800d906:	bf18      	it	ne
 800d908:	2a00      	cmpne	r2, #0
 800d90a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d90e:	4616      	mov	r6, r2
 800d910:	bf0c      	ite	eq
 800d912:	2201      	moveq	r2, #1
 800d914:	2200      	movne	r2, #0
 800d916:	b0a3      	sub	sp, #140	; 0x8c
 800d918:	2900      	cmp	r1, #0
 800d91a:	bf08      	it	eq
 800d91c:	f042 0201 	orreq.w	r2, r2, #1
 800d920:	bb22      	cbnz	r2, 800d96c <rclc_node_init_default+0x68>
 800d922:	4604      	mov	r4, r0
 800d924:	b310      	cbz	r0, 800d96c <rclc_node_init_default+0x68>
 800d926:	f10d 0810 	add.w	r8, sp, #16
 800d92a:	461f      	mov	r7, r3
 800d92c:	460d      	mov	r5, r1
 800d92e:	f10d 0918 	add.w	r9, sp, #24
 800d932:	4640      	mov	r0, r8
 800d934:	f007 f892 	bl	8014a5c <rcl_get_zero_initialized_node>
 800d938:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d93c:	e884 0003 	stmia.w	r4, {r0, r1}
 800d940:	4648      	mov	r0, r9
 800d942:	f007 fa25 	bl	8014d90 <rcl_node_get_default_options>
 800d946:	4640      	mov	r0, r8
 800d948:	f007 f888 	bl	8014a5c <rcl_get_zero_initialized_node>
 800d94c:	f8cd 9000 	str.w	r9, [sp]
 800d950:	463b      	mov	r3, r7
 800d952:	4632      	mov	r2, r6
 800d954:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d958:	e884 0003 	stmia.w	r4, {r0, r1}
 800d95c:	4629      	mov	r1, r5
 800d95e:	4620      	mov	r0, r4
 800d960:	f007 f886 	bl	8014a70 <rcl_node_init>
 800d964:	b930      	cbnz	r0, 800d974 <rclc_node_init_default+0x70>
 800d966:	b023      	add	sp, #140	; 0x8c
 800d968:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d96c:	200b      	movs	r0, #11
 800d96e:	b023      	add	sp, #140	; 0x8c
 800d970:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d974:	9003      	str	r0, [sp, #12]
 800d976:	f000 f94b 	bl	800dc10 <rcutils_reset_error>
 800d97a:	f000 f949 	bl	800dc10 <rcutils_reset_error>
 800d97e:	9803      	ldr	r0, [sp, #12]
 800d980:	b023      	add	sp, #140	; 0x8c
 800d982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d986:	bf00      	nop

0800d988 <rclc_publisher_init_best_effort>:
 800d988:	2b00      	cmp	r3, #0
 800d98a:	bf18      	it	ne
 800d98c:	2a00      	cmpne	r2, #0
 800d98e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d992:	4616      	mov	r6, r2
 800d994:	bf0c      	ite	eq
 800d996:	2201      	moveq	r2, #1
 800d998:	2200      	movne	r2, #0
 800d99a:	b0a0      	sub	sp, #128	; 0x80
 800d99c:	2900      	cmp	r1, #0
 800d99e:	bf08      	it	eq
 800d9a0:	f042 0201 	orreq.w	r2, r2, #1
 800d9a4:	bb1a      	cbnz	r2, 800d9ee <rclc_publisher_init_best_effort+0x66>
 800d9a6:	4604      	mov	r4, r0
 800d9a8:	b308      	cbz	r0, 800d9ee <rclc_publisher_init_best_effort+0x66>
 800d9aa:	f10d 0810 	add.w	r8, sp, #16
 800d9ae:	461f      	mov	r7, r3
 800d9b0:	460d      	mov	r5, r1
 800d9b2:	f7fe ff8b 	bl	800c8cc <rcl_get_zero_initialized_publisher>
 800d9b6:	6020      	str	r0, [r4, #0]
 800d9b8:	4640      	mov	r0, r8
 800d9ba:	f7ff f829 	bl	800ca10 <rcl_publisher_get_default_options>
 800d9be:	2250      	movs	r2, #80	; 0x50
 800d9c0:	490d      	ldr	r1, [pc, #52]	; (800d9f8 <rclc_publisher_init_best_effort+0x70>)
 800d9c2:	4640      	mov	r0, r8
 800d9c4:	f00e ffa7 	bl	801c916 <memcpy>
 800d9c8:	463b      	mov	r3, r7
 800d9ca:	4632      	mov	r2, r6
 800d9cc:	4629      	mov	r1, r5
 800d9ce:	4620      	mov	r0, r4
 800d9d0:	f8cd 8000 	str.w	r8, [sp]
 800d9d4:	f7fe ff80 	bl	800c8d8 <rcl_publisher_init>
 800d9d8:	b910      	cbnz	r0, 800d9e0 <rclc_publisher_init_best_effort+0x58>
 800d9da:	b020      	add	sp, #128	; 0x80
 800d9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9e0:	9003      	str	r0, [sp, #12]
 800d9e2:	f000 f915 	bl	800dc10 <rcutils_reset_error>
 800d9e6:	9803      	ldr	r0, [sp, #12]
 800d9e8:	b020      	add	sp, #128	; 0x80
 800d9ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9ee:	200b      	movs	r0, #11
 800d9f0:	b020      	add	sp, #128	; 0x80
 800d9f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9f6:	bf00      	nop
 800d9f8:	0801e418 	.word	0x0801e418

0800d9fc <rclc_service_init_default>:
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	bf18      	it	ne
 800da00:	2a00      	cmpne	r2, #0
 800da02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da06:	4616      	mov	r6, r2
 800da08:	bf0c      	ite	eq
 800da0a:	2201      	moveq	r2, #1
 800da0c:	2200      	movne	r2, #0
 800da0e:	b09e      	sub	sp, #120	; 0x78
 800da10:	2900      	cmp	r1, #0
 800da12:	bf08      	it	eq
 800da14:	f042 0201 	orreq.w	r2, r2, #1
 800da18:	bb1a      	cbnz	r2, 800da62 <rclc_service_init_default+0x66>
 800da1a:	4604      	mov	r4, r0
 800da1c:	b308      	cbz	r0, 800da62 <rclc_service_init_default+0x66>
 800da1e:	f10d 0810 	add.w	r8, sp, #16
 800da22:	461f      	mov	r7, r3
 800da24:	460d      	mov	r5, r1
 800da26:	f007 fbb7 	bl	8015198 <rcl_get_zero_initialized_service>
 800da2a:	6020      	str	r0, [r4, #0]
 800da2c:	4640      	mov	r0, r8
 800da2e:	f007 fc61 	bl	80152f4 <rcl_service_get_default_options>
 800da32:	2250      	movs	r2, #80	; 0x50
 800da34:	490d      	ldr	r1, [pc, #52]	; (800da6c <rclc_service_init_default+0x70>)
 800da36:	4640      	mov	r0, r8
 800da38:	f00e ff6d 	bl	801c916 <memcpy>
 800da3c:	463b      	mov	r3, r7
 800da3e:	4632      	mov	r2, r6
 800da40:	4629      	mov	r1, r5
 800da42:	4620      	mov	r0, r4
 800da44:	f8cd 8000 	str.w	r8, [sp]
 800da48:	f007 fbac 	bl	80151a4 <rcl_service_init>
 800da4c:	b910      	cbnz	r0, 800da54 <rclc_service_init_default+0x58>
 800da4e:	b01e      	add	sp, #120	; 0x78
 800da50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da54:	9003      	str	r0, [sp, #12]
 800da56:	f000 f8db 	bl	800dc10 <rcutils_reset_error>
 800da5a:	9803      	ldr	r0, [sp, #12]
 800da5c:	b01e      	add	sp, #120	; 0x78
 800da5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da62:	200b      	movs	r0, #11
 800da64:	b01e      	add	sp, #120	; 0x78
 800da66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da6a:	bf00      	nop
 800da6c:	0801e468 	.word	0x0801e468

0800da70 <rclc_subscription_init_best_effort>:
 800da70:	2b00      	cmp	r3, #0
 800da72:	bf18      	it	ne
 800da74:	2a00      	cmpne	r2, #0
 800da76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da7a:	4616      	mov	r6, r2
 800da7c:	bf0c      	ite	eq
 800da7e:	2201      	moveq	r2, #1
 800da80:	2200      	movne	r2, #0
 800da82:	b0a2      	sub	sp, #136	; 0x88
 800da84:	2900      	cmp	r1, #0
 800da86:	bf08      	it	eq
 800da88:	f042 0201 	orreq.w	r2, r2, #1
 800da8c:	bb1a      	cbnz	r2, 800dad6 <rclc_subscription_init_best_effort+0x66>
 800da8e:	4604      	mov	r4, r0
 800da90:	b308      	cbz	r0, 800dad6 <rclc_subscription_init_best_effort+0x66>
 800da92:	f10d 0810 	add.w	r8, sp, #16
 800da96:	461f      	mov	r7, r3
 800da98:	460d      	mov	r5, r1
 800da9a:	f007 fd7d 	bl	8015598 <rcl_get_zero_initialized_subscription>
 800da9e:	6020      	str	r0, [r4, #0]
 800daa0:	4640      	mov	r0, r8
 800daa2:	f007 fe2d 	bl	8015700 <rcl_subscription_get_default_options>
 800daa6:	2250      	movs	r2, #80	; 0x50
 800daa8:	490d      	ldr	r1, [pc, #52]	; (800dae0 <rclc_subscription_init_best_effort+0x70>)
 800daaa:	4640      	mov	r0, r8
 800daac:	f00e ff33 	bl	801c916 <memcpy>
 800dab0:	463b      	mov	r3, r7
 800dab2:	4632      	mov	r2, r6
 800dab4:	4629      	mov	r1, r5
 800dab6:	4620      	mov	r0, r4
 800dab8:	f8cd 8000 	str.w	r8, [sp]
 800dabc:	f007 fd72 	bl	80155a4 <rcl_subscription_init>
 800dac0:	b910      	cbnz	r0, 800dac8 <rclc_subscription_init_best_effort+0x58>
 800dac2:	b022      	add	sp, #136	; 0x88
 800dac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dac8:	9003      	str	r0, [sp, #12]
 800daca:	f000 f8a1 	bl	800dc10 <rcutils_reset_error>
 800dace:	9803      	ldr	r0, [sp, #12]
 800dad0:	b022      	add	sp, #136	; 0x88
 800dad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dad6:	200b      	movs	r0, #11
 800dad8:	b022      	add	sp, #136	; 0x88
 800dada:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dade:	bf00      	nop
 800dae0:	0801e4b8 	.word	0x0801e4b8

0800dae4 <rclc_timer_init_default>:
 800dae4:	b361      	cbz	r1, 800db40 <rclc_timer_init_default+0x5c>
 800dae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800daea:	4606      	mov	r6, r0
 800daec:	b08a      	sub	sp, #40	; 0x28
 800daee:	b318      	cbz	r0, 800db38 <rclc_timer_init_default+0x54>
 800daf0:	460d      	mov	r5, r1
 800daf2:	4690      	mov	r8, r2
 800daf4:	461f      	mov	r7, r3
 800daf6:	f008 f8b7 	bl	8015c68 <rcl_get_zero_initialized_timer>
 800dafa:	68ac      	ldr	r4, [r5, #8]
 800dafc:	f10d 0c0c 	add.w	ip, sp, #12
 800db00:	6030      	str	r0, [r6, #0]
 800db02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800db04:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800db08:	6823      	ldr	r3, [r4, #0]
 800db0a:	462a      	mov	r2, r5
 800db0c:	f105 010c 	add.w	r1, r5, #12
 800db10:	4630      	mov	r0, r6
 800db12:	f8cc 3000 	str.w	r3, [ip]
 800db16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db18:	e9cd 8700 	strd	r8, r7, [sp]
 800db1c:	9302      	str	r3, [sp, #8]
 800db1e:	f008 f8a9 	bl	8015c74 <rcl_timer_init>
 800db22:	b910      	cbnz	r0, 800db2a <rclc_timer_init_default+0x46>
 800db24:	b00a      	add	sp, #40	; 0x28
 800db26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db2a:	9009      	str	r0, [sp, #36]	; 0x24
 800db2c:	f000 f870 	bl	800dc10 <rcutils_reset_error>
 800db30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db32:	b00a      	add	sp, #40	; 0x28
 800db34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db38:	200b      	movs	r0, #11
 800db3a:	b00a      	add	sp, #40	; 0x28
 800db3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db40:	200b      	movs	r0, #11
 800db42:	4770      	bx	lr

0800db44 <__default_zero_allocate>:
 800db44:	f00e b9d8 	b.w	801bef8 <calloc>

0800db48 <__default_reallocate>:
 800db48:	f00e bb64 	b.w	801c214 <realloc>

0800db4c <__default_deallocate>:
 800db4c:	f00e ba42 	b.w	801bfd4 <free>

0800db50 <__default_allocate>:
 800db50:	f00e ba38 	b.w	801bfc4 <malloc>

0800db54 <rcutils_get_zero_initialized_allocator>:
 800db54:	b510      	push	{r4, lr}
 800db56:	4c05      	ldr	r4, [pc, #20]	; (800db6c <rcutils_get_zero_initialized_allocator+0x18>)
 800db58:	4686      	mov	lr, r0
 800db5a:	4684      	mov	ip, r0
 800db5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800db5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800db62:	6823      	ldr	r3, [r4, #0]
 800db64:	4670      	mov	r0, lr
 800db66:	f8cc 3000 	str.w	r3, [ip]
 800db6a:	bd10      	pop	{r4, pc}
 800db6c:	0801e508 	.word	0x0801e508

0800db70 <rcutils_set_default_allocator>:
 800db70:	b1a8      	cbz	r0, 800db9e <rcutils_set_default_allocator+0x2e>
 800db72:	6802      	ldr	r2, [r0, #0]
 800db74:	b1a2      	cbz	r2, 800dba0 <rcutils_set_default_allocator+0x30>
 800db76:	6841      	ldr	r1, [r0, #4]
 800db78:	b1a1      	cbz	r1, 800dba4 <rcutils_set_default_allocator+0x34>
 800db7a:	b410      	push	{r4}
 800db7c:	68c4      	ldr	r4, [r0, #12]
 800db7e:	b164      	cbz	r4, 800db9a <rcutils_set_default_allocator+0x2a>
 800db80:	6880      	ldr	r0, [r0, #8]
 800db82:	b138      	cbz	r0, 800db94 <rcutils_set_default_allocator+0x24>
 800db84:	4b08      	ldr	r3, [pc, #32]	; (800dba8 <rcutils_set_default_allocator+0x38>)
 800db86:	601a      	str	r2, [r3, #0]
 800db88:	2200      	movs	r2, #0
 800db8a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800db8e:	2001      	movs	r0, #1
 800db90:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800db94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db98:	4770      	bx	lr
 800db9a:	4620      	mov	r0, r4
 800db9c:	e7fa      	b.n	800db94 <rcutils_set_default_allocator+0x24>
 800db9e:	4770      	bx	lr
 800dba0:	4610      	mov	r0, r2
 800dba2:	4770      	bx	lr
 800dba4:	4608      	mov	r0, r1
 800dba6:	4770      	bx	lr
 800dba8:	200009fc 	.word	0x200009fc

0800dbac <rcutils_get_default_allocator>:
 800dbac:	b510      	push	{r4, lr}
 800dbae:	4c05      	ldr	r4, [pc, #20]	; (800dbc4 <rcutils_get_default_allocator+0x18>)
 800dbb0:	4686      	mov	lr, r0
 800dbb2:	4684      	mov	ip, r0
 800dbb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dbb6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dbba:	6823      	ldr	r3, [r4, #0]
 800dbbc:	4670      	mov	r0, lr
 800dbbe:	f8cc 3000 	str.w	r3, [ip]
 800dbc2:	bd10      	pop	{r4, pc}
 800dbc4:	200009fc 	.word	0x200009fc

0800dbc8 <rcutils_allocator_is_valid>:
 800dbc8:	b158      	cbz	r0, 800dbe2 <rcutils_allocator_is_valid+0x1a>
 800dbca:	6803      	ldr	r3, [r0, #0]
 800dbcc:	b143      	cbz	r3, 800dbe0 <rcutils_allocator_is_valid+0x18>
 800dbce:	6843      	ldr	r3, [r0, #4]
 800dbd0:	b133      	cbz	r3, 800dbe0 <rcutils_allocator_is_valid+0x18>
 800dbd2:	68c3      	ldr	r3, [r0, #12]
 800dbd4:	b123      	cbz	r3, 800dbe0 <rcutils_allocator_is_valid+0x18>
 800dbd6:	6880      	ldr	r0, [r0, #8]
 800dbd8:	3800      	subs	r0, #0
 800dbda:	bf18      	it	ne
 800dbdc:	2001      	movne	r0, #1
 800dbde:	4770      	bx	lr
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	4770      	bx	lr

0800dbe4 <rcutils_get_error_string>:
 800dbe4:	4b06      	ldr	r3, [pc, #24]	; (800dc00 <rcutils_get_error_string+0x1c>)
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	b13b      	cbz	r3, 800dbfa <rcutils_get_error_string+0x16>
 800dbea:	4b06      	ldr	r3, [pc, #24]	; (800dc04 <rcutils_get_error_string+0x20>)
 800dbec:	781a      	ldrb	r2, [r3, #0]
 800dbee:	b90a      	cbnz	r2, 800dbf4 <rcutils_get_error_string+0x10>
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	701a      	strb	r2, [r3, #0]
 800dbf4:	4b04      	ldr	r3, [pc, #16]	; (800dc08 <rcutils_get_error_string+0x24>)
 800dbf6:	7818      	ldrb	r0, [r3, #0]
 800dbf8:	4770      	bx	lr
 800dbfa:	4b04      	ldr	r3, [pc, #16]	; (800dc0c <rcutils_get_error_string+0x28>)
 800dbfc:	7818      	ldrb	r0, [r3, #0]
 800dbfe:	4770      	bx	lr
 800dc00:	2000b970 	.word	0x2000b970
 800dc04:	2000b989 	.word	0x2000b989
 800dc08:	2000b988 	.word	0x2000b988
 800dc0c:	0801da2c 	.word	0x0801da2c

0800dc10 <rcutils_reset_error>:
 800dc10:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800dc30 <rcutils_reset_error+0x20>
 800dc14:	2300      	movs	r3, #0
 800dc16:	4a08      	ldr	r2, [pc, #32]	; (800dc38 <rcutils_reset_error+0x28>)
 800dc18:	4808      	ldr	r0, [pc, #32]	; (800dc3c <rcutils_reset_error+0x2c>)
 800dc1a:	8013      	strh	r3, [r2, #0]
 800dc1c:	4908      	ldr	r1, [pc, #32]	; (800dc40 <rcutils_reset_error+0x30>)
 800dc1e:	7003      	strb	r3, [r0, #0]
 800dc20:	700b      	strb	r3, [r1, #0]
 800dc22:	ed82 7b02 	vstr	d7, [r2, #8]
 800dc26:	4a07      	ldr	r2, [pc, #28]	; (800dc44 <rcutils_reset_error+0x34>)
 800dc28:	7013      	strb	r3, [r2, #0]
 800dc2a:	4770      	bx	lr
 800dc2c:	f3af 8000 	nop.w
	...
 800dc38:	2000b978 	.word	0x2000b978
 800dc3c:	2000b989 	.word	0x2000b989
 800dc40:	2000b988 	.word	0x2000b988
 800dc44:	2000b970 	.word	0x2000b970

0800dc48 <rcutils_system_time_now>:
 800dc48:	b310      	cbz	r0, 800dc90 <rcutils_system_time_now+0x48>
 800dc4a:	b570      	push	{r4, r5, r6, lr}
 800dc4c:	b084      	sub	sp, #16
 800dc4e:	4604      	mov	r4, r0
 800dc50:	2001      	movs	r0, #1
 800dc52:	4669      	mov	r1, sp
 800dc54:	f7f4 ff20 	bl	8002a98 <clock_gettime>
 800dc58:	2800      	cmp	r0, #0
 800dc5a:	db16      	blt.n	800dc8a <rcutils_system_time_now+0x42>
 800dc5c:	e9dd 3100 	ldrd	r3, r1, [sp]
 800dc60:	2900      	cmp	r1, #0
 800dc62:	db12      	blt.n	800dc8a <rcutils_system_time_now+0x42>
 800dc64:	ea53 0201 	orrs.w	r2, r3, r1
 800dc68:	9d02      	ldr	r5, [sp, #8]
 800dc6a:	d101      	bne.n	800dc70 <rcutils_system_time_now+0x28>
 800dc6c:	2d00      	cmp	r5, #0
 800dc6e:	db0c      	blt.n	800dc8a <rcutils_system_time_now+0x42>
 800dc70:	4e08      	ldr	r6, [pc, #32]	; (800dc94 <rcutils_system_time_now+0x4c>)
 800dc72:	2000      	movs	r0, #0
 800dc74:	fba3 3206 	umull	r3, r2, r3, r6
 800dc78:	195b      	adds	r3, r3, r5
 800dc7a:	fb06 2201 	mla	r2, r6, r1, r2
 800dc7e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800dc82:	e9c4 3200 	strd	r3, r2, [r4]
 800dc86:	b004      	add	sp, #16
 800dc88:	bd70      	pop	{r4, r5, r6, pc}
 800dc8a:	2002      	movs	r0, #2
 800dc8c:	b004      	add	sp, #16
 800dc8e:	bd70      	pop	{r4, r5, r6, pc}
 800dc90:	200b      	movs	r0, #11
 800dc92:	4770      	bx	lr
 800dc94:	3b9aca00 	.word	0x3b9aca00

0800dc98 <rcutils_steady_time_now>:
 800dc98:	b310      	cbz	r0, 800dce0 <rcutils_steady_time_now+0x48>
 800dc9a:	b570      	push	{r4, r5, r6, lr}
 800dc9c:	b084      	sub	sp, #16
 800dc9e:	4604      	mov	r4, r0
 800dca0:	2000      	movs	r0, #0
 800dca2:	4669      	mov	r1, sp
 800dca4:	f7f4 fef8 	bl	8002a98 <clock_gettime>
 800dca8:	2800      	cmp	r0, #0
 800dcaa:	db16      	blt.n	800dcda <rcutils_steady_time_now+0x42>
 800dcac:	e9dd 3100 	ldrd	r3, r1, [sp]
 800dcb0:	2900      	cmp	r1, #0
 800dcb2:	db12      	blt.n	800dcda <rcutils_steady_time_now+0x42>
 800dcb4:	ea53 0201 	orrs.w	r2, r3, r1
 800dcb8:	9d02      	ldr	r5, [sp, #8]
 800dcba:	d101      	bne.n	800dcc0 <rcutils_steady_time_now+0x28>
 800dcbc:	2d00      	cmp	r5, #0
 800dcbe:	db0c      	blt.n	800dcda <rcutils_steady_time_now+0x42>
 800dcc0:	4e08      	ldr	r6, [pc, #32]	; (800dce4 <rcutils_steady_time_now+0x4c>)
 800dcc2:	2000      	movs	r0, #0
 800dcc4:	fba3 3206 	umull	r3, r2, r3, r6
 800dcc8:	195b      	adds	r3, r3, r5
 800dcca:	fb06 2201 	mla	r2, r6, r1, r2
 800dcce:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800dcd2:	e9c4 3200 	strd	r3, r2, [r4]
 800dcd6:	b004      	add	sp, #16
 800dcd8:	bd70      	pop	{r4, r5, r6, pc}
 800dcda:	2002      	movs	r0, #2
 800dcdc:	b004      	add	sp, #16
 800dcde:	bd70      	pop	{r4, r5, r6, pc}
 800dce0:	200b      	movs	r0, #11
 800dce2:	4770      	bx	lr
 800dce4:	3b9aca00 	.word	0x3b9aca00

0800dce8 <rmw_get_default_publisher_options>:
 800dce8:	2200      	movs	r2, #0
 800dcea:	6002      	str	r2, [r0, #0]
 800dcec:	7102      	strb	r2, [r0, #4]
 800dcee:	4770      	bx	lr

0800dcf0 <rmw_uros_set_custom_transport>:
 800dcf0:	b470      	push	{r4, r5, r6}
 800dcf2:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800dcf6:	b162      	cbz	r2, 800dd12 <rmw_uros_set_custom_transport+0x22>
 800dcf8:	b15b      	cbz	r3, 800dd12 <rmw_uros_set_custom_transport+0x22>
 800dcfa:	b155      	cbz	r5, 800dd12 <rmw_uros_set_custom_transport+0x22>
 800dcfc:	b14e      	cbz	r6, 800dd12 <rmw_uros_set_custom_transport+0x22>
 800dcfe:	4c06      	ldr	r4, [pc, #24]	; (800dd18 <rmw_uros_set_custom_transport+0x28>)
 800dd00:	7020      	strb	r0, [r4, #0]
 800dd02:	2000      	movs	r0, #0
 800dd04:	6166      	str	r6, [r4, #20]
 800dd06:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800dd0a:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800dd0e:	bc70      	pop	{r4, r5, r6}
 800dd10:	4770      	bx	lr
 800dd12:	200b      	movs	r0, #11
 800dd14:	bc70      	pop	{r4, r5, r6}
 800dd16:	4770      	bx	lr
 800dd18:	2000b98c 	.word	0x2000b98c

0800dd1c <flush_session>:
 800dd1c:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800dd1e:	f003 bcaf 	b.w	8011680 <uxr_run_session_until_confirm_delivery>
 800dd22:	bf00      	nop

0800dd24 <rmw_publish>:
 800dd24:	2800      	cmp	r0, #0
 800dd26:	d053      	beq.n	800ddd0 <rmw_publish+0xac>
 800dd28:	b570      	push	{r4, r5, r6, lr}
 800dd2a:	460d      	mov	r5, r1
 800dd2c:	b08e      	sub	sp, #56	; 0x38
 800dd2e:	2900      	cmp	r1, #0
 800dd30:	d04b      	beq.n	800ddca <rmw_publish+0xa6>
 800dd32:	4604      	mov	r4, r0
 800dd34:	6800      	ldr	r0, [r0, #0]
 800dd36:	f000 fd97 	bl	800e868 <is_uxrce_rmw_identifier_valid>
 800dd3a:	2800      	cmp	r0, #0
 800dd3c:	d045      	beq.n	800ddca <rmw_publish+0xa6>
 800dd3e:	6866      	ldr	r6, [r4, #4]
 800dd40:	2e00      	cmp	r6, #0
 800dd42:	d042      	beq.n	800ddca <rmw_publish+0xa6>
 800dd44:	69b4      	ldr	r4, [r6, #24]
 800dd46:	4628      	mov	r0, r5
 800dd48:	6923      	ldr	r3, [r4, #16]
 800dd4a:	4798      	blx	r3
 800dd4c:	69f3      	ldr	r3, [r6, #28]
 800dd4e:	9005      	str	r0, [sp, #20]
 800dd50:	b113      	cbz	r3, 800dd58 <rmw_publish+0x34>
 800dd52:	a805      	add	r0, sp, #20
 800dd54:	4798      	blx	r3
 800dd56:	9805      	ldr	r0, [sp, #20]
 800dd58:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800dd5c:	691b      	ldr	r3, [r3, #16]
 800dd5e:	9000      	str	r0, [sp, #0]
 800dd60:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800dd64:	6972      	ldr	r2, [r6, #20]
 800dd66:	ab06      	add	r3, sp, #24
 800dd68:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800dd6a:	f004 fa87 	bl	801227c <uxr_prepare_output_stream>
 800dd6e:	b1d8      	cbz	r0, 800dda8 <rmw_publish+0x84>
 800dd70:	68a3      	ldr	r3, [r4, #8]
 800dd72:	a906      	add	r1, sp, #24
 800dd74:	4628      	mov	r0, r5
 800dd76:	4798      	blx	r3
 800dd78:	6a33      	ldr	r3, [r6, #32]
 800dd7a:	4604      	mov	r4, r0
 800dd7c:	b10b      	cbz	r3, 800dd82 <rmw_publish+0x5e>
 800dd7e:	a806      	add	r0, sp, #24
 800dd80:	4798      	blx	r3
 800dd82:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800dd86:	2b01      	cmp	r3, #1
 800dd88:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800dd8c:	d022      	beq.n	800ddd4 <rmw_publish+0xb0>
 800dd8e:	6918      	ldr	r0, [r3, #16]
 800dd90:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800dd92:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800dd96:	f003 fc73 	bl	8011680 <uxr_run_session_until_confirm_delivery>
 800dd9a:	4020      	ands	r0, r4
 800dd9c:	b2c4      	uxtb	r4, r0
 800dd9e:	f084 0001 	eor.w	r0, r4, #1
 800dda2:	b2c0      	uxtb	r0, r0
 800dda4:	b00e      	add	sp, #56	; 0x38
 800dda6:	bd70      	pop	{r4, r5, r6, pc}
 800dda8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ddac:	6918      	ldr	r0, [r3, #16]
 800ddae:	9b05      	ldr	r3, [sp, #20]
 800ddb0:	9602      	str	r6, [sp, #8]
 800ddb2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ddb6:	9300      	str	r3, [sp, #0]
 800ddb8:	4b09      	ldr	r3, [pc, #36]	; (800dde0 <rmw_publish+0xbc>)
 800ddba:	9301      	str	r3, [sp, #4]
 800ddbc:	ab06      	add	r3, sp, #24
 800ddbe:	6972      	ldr	r2, [r6, #20]
 800ddc0:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800ddc2:	f004 fa8b 	bl	80122dc <uxr_prepare_output_stream_fragmented>
 800ddc6:	2800      	cmp	r0, #0
 800ddc8:	d1d2      	bne.n	800dd70 <rmw_publish+0x4c>
 800ddca:	2001      	movs	r0, #1
 800ddcc:	b00e      	add	sp, #56	; 0x38
 800ddce:	bd70      	pop	{r4, r5, r6, pc}
 800ddd0:	2001      	movs	r0, #1
 800ddd2:	4770      	bx	lr
 800ddd4:	6918      	ldr	r0, [r3, #16]
 800ddd6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ddda:	f003 f897 	bl	8010f0c <uxr_flash_output_streams>
 800ddde:	e7de      	b.n	800dd9e <rmw_publish+0x7a>
 800dde0:	0800dd1d 	.word	0x0800dd1d

0800dde4 <rmw_create_publisher>:
 800dde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dde8:	b087      	sub	sp, #28
 800ddea:	2800      	cmp	r0, #0
 800ddec:	f000 80d2 	beq.w	800df94 <rmw_create_publisher+0x1b0>
 800ddf0:	460e      	mov	r6, r1
 800ddf2:	2900      	cmp	r1, #0
 800ddf4:	f000 80ce 	beq.w	800df94 <rmw_create_publisher+0x1b0>
 800ddf8:	4604      	mov	r4, r0
 800ddfa:	6800      	ldr	r0, [r0, #0]
 800ddfc:	4615      	mov	r5, r2
 800ddfe:	461f      	mov	r7, r3
 800de00:	f000 fd32 	bl	800e868 <is_uxrce_rmw_identifier_valid>
 800de04:	f080 0001 	eor.w	r0, r0, #1
 800de08:	b2c0      	uxtb	r0, r0
 800de0a:	2800      	cmp	r0, #0
 800de0c:	f040 80c2 	bne.w	800df94 <rmw_create_publisher+0x1b0>
 800de10:	2d00      	cmp	r5, #0
 800de12:	f000 80bf 	beq.w	800df94 <rmw_create_publisher+0x1b0>
 800de16:	782b      	ldrb	r3, [r5, #0]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	f000 80bb 	beq.w	800df94 <rmw_create_publisher+0x1b0>
 800de1e:	2f00      	cmp	r7, #0
 800de20:	f000 80b8 	beq.w	800df94 <rmw_create_publisher+0x1b0>
 800de24:	485e      	ldr	r0, [pc, #376]	; (800dfa0 <rmw_create_publisher+0x1bc>)
 800de26:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800de2a:	f00a fa2b 	bl	8018284 <get_memory>
 800de2e:	2800      	cmp	r0, #0
 800de30:	f000 80b0 	beq.w	800df94 <rmw_create_publisher+0x1b0>
 800de34:	6884      	ldr	r4, [r0, #8]
 800de36:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 800de3a:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800de3e:	f00a faa7 	bl	8018390 <rmw_get_implementation_identifier>
 800de42:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800de46:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800de4a:	4628      	mov	r0, r5
 800de4c:	f7f2 fa58 	bl	8000300 <strlen>
 800de50:	3001      	adds	r0, #1
 800de52:	f104 0884 	add.w	r8, r4, #132	; 0x84
 800de56:	283c      	cmp	r0, #60	; 0x3c
 800de58:	f200 808f 	bhi.w	800df7a <rmw_create_publisher+0x196>
 800de5c:	462b      	mov	r3, r5
 800de5e:	4a51      	ldr	r2, [pc, #324]	; (800dfa4 <rmw_create_publisher+0x1c0>)
 800de60:	213c      	movs	r1, #60	; 0x3c
 800de62:	4650      	mov	r0, sl
 800de64:	f00e fb4c 	bl	801c500 <sniprintf>
 800de68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800de6c:	4639      	mov	r1, r7
 800de6e:	2250      	movs	r2, #80	; 0x50
 800de70:	67e3      	str	r3, [r4, #124]	; 0x7c
 800de72:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800de76:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 800de7a:	f00e fd4c 	bl	801c916 <memcpy>
 800de7e:	7a3b      	ldrb	r3, [r7, #8]
 800de80:	4630      	mov	r0, r6
 800de82:	4949      	ldr	r1, [pc, #292]	; (800dfa8 <rmw_create_publisher+0x1c4>)
 800de84:	2b02      	cmp	r3, #2
 800de86:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de8a:	bf0c      	ite	eq
 800de8c:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800de90:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800de94:	67a3      	str	r3, [r4, #120]	; 0x78
 800de96:	2300      	movs	r3, #0
 800de98:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800de9c:	f000 fcf2 	bl	800e884 <get_message_typesupport_handle>
 800dea0:	2800      	cmp	r0, #0
 800dea2:	d06a      	beq.n	800df7a <rmw_create_publisher+0x196>
 800dea4:	6842      	ldr	r2, [r0, #4]
 800dea6:	61a2      	str	r2, [r4, #24]
 800dea8:	2a00      	cmp	r2, #0
 800deaa:	d066      	beq.n	800df7a <rmw_create_publisher+0x196>
 800deac:	4629      	mov	r1, r5
 800deae:	463b      	mov	r3, r7
 800deb0:	4648      	mov	r0, r9
 800deb2:	f00a fcab 	bl	801880c <create_topic>
 800deb6:	6260      	str	r0, [r4, #36]	; 0x24
 800deb8:	2800      	cmp	r0, #0
 800deba:	d062      	beq.n	800df82 <rmw_create_publisher+0x19e>
 800debc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dec0:	2103      	movs	r1, #3
 800dec2:	2506      	movs	r5, #6
 800dec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dec8:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 800decc:	1c42      	adds	r2, r0, #1
 800dece:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 800ded2:	f002 fecb 	bl	8010c6c <uxr_object_id>
 800ded6:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800deda:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dede:	6120      	str	r0, [r4, #16]
 800dee0:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800dee4:	6910      	ldr	r0, [r2, #16]
 800dee6:	9500      	str	r5, [sp, #0]
 800dee8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800deec:	6819      	ldr	r1, [r3, #0]
 800deee:	6922      	ldr	r2, [r4, #16]
 800def0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800def4:	f002 fd32 	bl	801095c <uxr_buffer_create_publisher_bin>
 800def8:	4602      	mov	r2, r0
 800defa:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800defe:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800df02:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800df06:	f000 fb9d 	bl	800e644 <run_xrce_session>
 800df0a:	b3b0      	cbz	r0, 800df7a <rmw_create_publisher+0x196>
 800df0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df10:	2105      	movs	r1, #5
 800df12:	f10d 0a10 	add.w	sl, sp, #16
 800df16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df1a:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 800df1e:	1c42      	adds	r2, r0, #1
 800df20:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 800df24:	f002 fea2 	bl	8010c6c <uxr_object_id>
 800df28:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800df2c:	4639      	mov	r1, r7
 800df2e:	6160      	str	r0, [r4, #20]
 800df30:	691e      	ldr	r6, [r3, #16]
 800df32:	4650      	mov	r0, sl
 800df34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df38:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800df3c:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 800df40:	f8d3 7384 	ldr.w	r7, [r3, #900]	; 0x384
 800df44:	f000 fb9a 	bl	800e67c <convert_qos_profile>
 800df48:	9503      	str	r5, [sp, #12]
 800df4a:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800df4e:	9001      	str	r0, [sp, #4]
 800df50:	4630      	mov	r0, r6
 800df52:	f8ad 1008 	strh.w	r1, [sp, #8]
 800df56:	f8db 3010 	ldr.w	r3, [fp, #16]
 800df5a:	9300      	str	r3, [sp, #0]
 800df5c:	6839      	ldr	r1, [r7, #0]
 800df5e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800df62:	f002 fd5b 	bl	8010a1c <uxr_buffer_create_datawriter_bin>
 800df66:	4602      	mov	r2, r0
 800df68:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800df6c:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800df70:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800df74:	f000 fb66 	bl	800e644 <run_xrce_session>
 800df78:	b970      	cbnz	r0, 800df98 <rmw_create_publisher+0x1b4>
 800df7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800df7c:	b108      	cbz	r0, 800df82 <rmw_create_publisher+0x19e>
 800df7e:	f000 fa53 	bl	800e428 <rmw_uxrce_fini_topic_memory>
 800df82:	4640      	mov	r0, r8
 800df84:	f04f 0800 	mov.w	r8, #0
 800df88:	f000 f9f6 	bl	800e378 <rmw_uxrce_fini_publisher_memory>
 800df8c:	4640      	mov	r0, r8
 800df8e:	b007      	add	sp, #28
 800df90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df94:	f04f 0800 	mov.w	r8, #0
 800df98:	4640      	mov	r0, r8
 800df9a:	b007      	add	sp, #28
 800df9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfa0:	2001034c 	.word	0x2001034c
 800dfa4:	0801e52c 	.word	0x0801e52c
 800dfa8:	0801d8d0 	.word	0x0801d8d0

0800dfac <rmw_publisher_get_actual_qos>:
 800dfac:	b178      	cbz	r0, 800dfce <rmw_publisher_get_actual_qos+0x22>
 800dfae:	b510      	push	{r4, lr}
 800dfb0:	fab1 f481 	clz	r4, r1
 800dfb4:	0964      	lsrs	r4, r4, #5
 800dfb6:	b141      	cbz	r1, 800dfca <rmw_publisher_get_actual_qos+0x1e>
 800dfb8:	6843      	ldr	r3, [r0, #4]
 800dfba:	2250      	movs	r2, #80	; 0x50
 800dfbc:	4608      	mov	r0, r1
 800dfbe:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800dfc2:	f00e fca8 	bl	801c916 <memcpy>
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	bd10      	pop	{r4, pc}
 800dfca:	200b      	movs	r0, #11
 800dfcc:	bd10      	pop	{r4, pc}
 800dfce:	200b      	movs	r0, #11
 800dfd0:	4770      	bx	lr
 800dfd2:	bf00      	nop

0800dfd4 <rmw_destroy_publisher>:
 800dfd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfd8:	b128      	cbz	r0, 800dfe6 <rmw_destroy_publisher+0x12>
 800dfda:	4604      	mov	r4, r0
 800dfdc:	6800      	ldr	r0, [r0, #0]
 800dfde:	460d      	mov	r5, r1
 800dfe0:	f000 fc42 	bl	800e868 <is_uxrce_rmw_identifier_valid>
 800dfe4:	b918      	cbnz	r0, 800dfee <rmw_destroy_publisher+0x1a>
 800dfe6:	2401      	movs	r4, #1
 800dfe8:	4620      	mov	r0, r4
 800dfea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfee:	6863      	ldr	r3, [r4, #4]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d0f8      	beq.n	800dfe6 <rmw_destroy_publisher+0x12>
 800dff4:	fab5 f485 	clz	r4, r5
 800dff8:	0964      	lsrs	r4, r4, #5
 800dffa:	2d00      	cmp	r5, #0
 800dffc:	d0f3      	beq.n	800dfe6 <rmw_destroy_publisher+0x12>
 800dffe:	6828      	ldr	r0, [r5, #0]
 800e000:	f000 fc32 	bl	800e868 <is_uxrce_rmw_identifier_valid>
 800e004:	2800      	cmp	r0, #0
 800e006:	d0ee      	beq.n	800dfe6 <rmw_destroy_publisher+0x12>
 800e008:	686e      	ldr	r6, [r5, #4]
 800e00a:	2e00      	cmp	r6, #0
 800e00c:	d0eb      	beq.n	800dfe6 <rmw_destroy_publisher+0x12>
 800e00e:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800e010:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 800e014:	f00a fc4a 	bl	80188ac <destroy_topic>
 800e018:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800e01c:	6972      	ldr	r2, [r6, #20]
 800e01e:	6918      	ldr	r0, [r3, #16]
 800e020:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e024:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e028:	6819      	ldr	r1, [r3, #0]
 800e02a:	f002 fbe3 	bl	80107f4 <uxr_buffer_delete_entity>
 800e02e:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800e032:	4680      	mov	r8, r0
 800e034:	6932      	ldr	r2, [r6, #16]
 800e036:	6918      	ldr	r0, [r3, #16]
 800e038:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e03c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e040:	6819      	ldr	r1, [r3, #0]
 800e042:	f002 fbd7 	bl	80107f4 <uxr_buffer_delete_entity>
 800e046:	4606      	mov	r6, r0
 800e048:	6938      	ldr	r0, [r7, #16]
 800e04a:	4642      	mov	r2, r8
 800e04c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e050:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e054:	f000 faf6 	bl	800e644 <run_xrce_session>
 800e058:	693f      	ldr	r7, [r7, #16]
 800e05a:	4632      	mov	r2, r6
 800e05c:	4606      	mov	r6, r0
 800e05e:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800e062:	4638      	mov	r0, r7
 800e064:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800e068:	f000 faec 	bl	800e644 <run_xrce_session>
 800e06c:	b126      	cbz	r6, 800e078 <rmw_destroy_publisher+0xa4>
 800e06e:	b118      	cbz	r0, 800e078 <rmw_destroy_publisher+0xa4>
 800e070:	4628      	mov	r0, r5
 800e072:	f000 f981 	bl	800e378 <rmw_uxrce_fini_publisher_memory>
 800e076:	e7b7      	b.n	800dfe8 <rmw_destroy_publisher+0x14>
 800e078:	2402      	movs	r4, #2
 800e07a:	e7f9      	b.n	800e070 <rmw_destroy_publisher+0x9c>

0800e07c <rmw_uxrce_init_service_memory>:
 800e07c:	b1e2      	cbz	r2, 800e0b8 <rmw_uxrce_init_service_memory+0x3c>
 800e07e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e082:	7b05      	ldrb	r5, [r0, #12]
 800e084:	4606      	mov	r6, r0
 800e086:	b9ad      	cbnz	r5, 800e0b4 <rmw_uxrce_init_service_memory+0x38>
 800e088:	23c8      	movs	r3, #200	; 0xc8
 800e08a:	4617      	mov	r7, r2
 800e08c:	460c      	mov	r4, r1
 800e08e:	46a8      	mov	r8, r5
 800e090:	6083      	str	r3, [r0, #8]
 800e092:	f240 1301 	movw	r3, #257	; 0x101
 800e096:	e9c0 5500 	strd	r5, r5, [r0]
 800e09a:	8183      	strh	r3, [r0, #12]
 800e09c:	3501      	adds	r5, #1
 800e09e:	4621      	mov	r1, r4
 800e0a0:	4630      	mov	r0, r6
 800e0a2:	f00a f8ff 	bl	80182a4 <put_memory>
 800e0a6:	42af      	cmp	r7, r5
 800e0a8:	60a4      	str	r4, [r4, #8]
 800e0aa:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800e0ae:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800e0b2:	d1f3      	bne.n	800e09c <rmw_uxrce_init_service_memory+0x20>
 800e0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0b8:	4770      	bx	lr
 800e0ba:	bf00      	nop

0800e0bc <rmw_uxrce_init_client_memory>:
 800e0bc:	b1e2      	cbz	r2, 800e0f8 <rmw_uxrce_init_client_memory+0x3c>
 800e0be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0c2:	7b05      	ldrb	r5, [r0, #12]
 800e0c4:	4606      	mov	r6, r0
 800e0c6:	b9ad      	cbnz	r5, 800e0f4 <rmw_uxrce_init_client_memory+0x38>
 800e0c8:	23c8      	movs	r3, #200	; 0xc8
 800e0ca:	4617      	mov	r7, r2
 800e0cc:	460c      	mov	r4, r1
 800e0ce:	46a8      	mov	r8, r5
 800e0d0:	6083      	str	r3, [r0, #8]
 800e0d2:	f240 1301 	movw	r3, #257	; 0x101
 800e0d6:	e9c0 5500 	strd	r5, r5, [r0]
 800e0da:	8183      	strh	r3, [r0, #12]
 800e0dc:	3501      	adds	r5, #1
 800e0de:	4621      	mov	r1, r4
 800e0e0:	4630      	mov	r0, r6
 800e0e2:	f00a f8df 	bl	80182a4 <put_memory>
 800e0e6:	42af      	cmp	r7, r5
 800e0e8:	60a4      	str	r4, [r4, #8]
 800e0ea:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800e0ee:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800e0f2:	d1f3      	bne.n	800e0dc <rmw_uxrce_init_client_memory+0x20>
 800e0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0f8:	4770      	bx	lr
 800e0fa:	bf00      	nop

0800e0fc <rmw_uxrce_init_publisher_memory>:
 800e0fc:	b1e2      	cbz	r2, 800e138 <rmw_uxrce_init_publisher_memory+0x3c>
 800e0fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e102:	7b05      	ldrb	r5, [r0, #12]
 800e104:	4606      	mov	r6, r0
 800e106:	b9ad      	cbnz	r5, 800e134 <rmw_uxrce_init_publisher_memory+0x38>
 800e108:	23d8      	movs	r3, #216	; 0xd8
 800e10a:	4617      	mov	r7, r2
 800e10c:	460c      	mov	r4, r1
 800e10e:	46a8      	mov	r8, r5
 800e110:	6083      	str	r3, [r0, #8]
 800e112:	f240 1301 	movw	r3, #257	; 0x101
 800e116:	e9c0 5500 	strd	r5, r5, [r0]
 800e11a:	8183      	strh	r3, [r0, #12]
 800e11c:	3501      	adds	r5, #1
 800e11e:	4621      	mov	r1, r4
 800e120:	4630      	mov	r0, r6
 800e122:	f00a f8bf 	bl	80182a4 <put_memory>
 800e126:	42af      	cmp	r7, r5
 800e128:	60a4      	str	r4, [r4, #8]
 800e12a:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800e12e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800e132:	d1f3      	bne.n	800e11c <rmw_uxrce_init_publisher_memory+0x20>
 800e134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e138:	4770      	bx	lr
 800e13a:	bf00      	nop

0800e13c <rmw_uxrce_init_subscription_memory>:
 800e13c:	b1e2      	cbz	r2, 800e178 <rmw_uxrce_init_subscription_memory+0x3c>
 800e13e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e142:	7b05      	ldrb	r5, [r0, #12]
 800e144:	4606      	mov	r6, r0
 800e146:	b9ad      	cbnz	r5, 800e174 <rmw_uxrce_init_subscription_memory+0x38>
 800e148:	23d8      	movs	r3, #216	; 0xd8
 800e14a:	4617      	mov	r7, r2
 800e14c:	460c      	mov	r4, r1
 800e14e:	46a8      	mov	r8, r5
 800e150:	6083      	str	r3, [r0, #8]
 800e152:	f240 1301 	movw	r3, #257	; 0x101
 800e156:	e9c0 5500 	strd	r5, r5, [r0]
 800e15a:	8183      	strh	r3, [r0, #12]
 800e15c:	3501      	adds	r5, #1
 800e15e:	4621      	mov	r1, r4
 800e160:	4630      	mov	r0, r6
 800e162:	f00a f89f 	bl	80182a4 <put_memory>
 800e166:	42af      	cmp	r7, r5
 800e168:	60a4      	str	r4, [r4, #8]
 800e16a:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800e16e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800e172:	d1f3      	bne.n	800e15c <rmw_uxrce_init_subscription_memory+0x20>
 800e174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e178:	4770      	bx	lr
 800e17a:	bf00      	nop

0800e17c <rmw_uxrce_init_node_memory>:
 800e17c:	b1e2      	cbz	r2, 800e1b8 <rmw_uxrce_init_node_memory+0x3c>
 800e17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e182:	7b05      	ldrb	r5, [r0, #12]
 800e184:	4606      	mov	r6, r0
 800e186:	b9ad      	cbnz	r5, 800e1b4 <rmw_uxrce_init_node_memory+0x38>
 800e188:	23a4      	movs	r3, #164	; 0xa4
 800e18a:	4617      	mov	r7, r2
 800e18c:	460c      	mov	r4, r1
 800e18e:	46a8      	mov	r8, r5
 800e190:	6083      	str	r3, [r0, #8]
 800e192:	f240 1301 	movw	r3, #257	; 0x101
 800e196:	e9c0 5500 	strd	r5, r5, [r0]
 800e19a:	8183      	strh	r3, [r0, #12]
 800e19c:	3501      	adds	r5, #1
 800e19e:	4621      	mov	r1, r4
 800e1a0:	4630      	mov	r0, r6
 800e1a2:	f00a f87f 	bl	80182a4 <put_memory>
 800e1a6:	42af      	cmp	r7, r5
 800e1a8:	60a4      	str	r4, [r4, #8]
 800e1aa:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800e1ae:	f804 8c98 	strb.w	r8, [r4, #-152]
 800e1b2:	d1f3      	bne.n	800e19c <rmw_uxrce_init_node_memory+0x20>
 800e1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1b8:	4770      	bx	lr
 800e1ba:	bf00      	nop

0800e1bc <rmw_uxrce_init_session_memory>:
 800e1bc:	b1ea      	cbz	r2, 800e1fa <rmw_uxrce_init_session_memory+0x3e>
 800e1be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1c2:	7b05      	ldrb	r5, [r0, #12]
 800e1c4:	4606      	mov	r6, r0
 800e1c6:	b9b5      	cbnz	r5, 800e1f6 <rmw_uxrce_init_session_memory+0x3a>
 800e1c8:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800e1cc:	f240 1301 	movw	r3, #257	; 0x101
 800e1d0:	4617      	mov	r7, r2
 800e1d2:	460c      	mov	r4, r1
 800e1d4:	46a9      	mov	r9, r5
 800e1d6:	f8c0 8008 	str.w	r8, [r0, #8]
 800e1da:	8183      	strh	r3, [r0, #12]
 800e1dc:	e9c0 5500 	strd	r5, r5, [r0]
 800e1e0:	3501      	adds	r5, #1
 800e1e2:	4621      	mov	r1, r4
 800e1e4:	4630      	mov	r0, r6
 800e1e6:	f00a f85d 	bl	80182a4 <put_memory>
 800e1ea:	42af      	cmp	r7, r5
 800e1ec:	60a4      	str	r4, [r4, #8]
 800e1ee:	f884 900c 	strb.w	r9, [r4, #12]
 800e1f2:	4444      	add	r4, r8
 800e1f4:	d1f4      	bne.n	800e1e0 <rmw_uxrce_init_session_memory+0x24>
 800e1f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1fa:	4770      	bx	lr

0800e1fc <rmw_uxrce_init_topic_memory>:
 800e1fc:	b1e2      	cbz	r2, 800e238 <rmw_uxrce_init_topic_memory+0x3c>
 800e1fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e202:	7b05      	ldrb	r5, [r0, #12]
 800e204:	4606      	mov	r6, r0
 800e206:	b9ad      	cbnz	r5, 800e234 <rmw_uxrce_init_topic_memory+0x38>
 800e208:	231c      	movs	r3, #28
 800e20a:	4617      	mov	r7, r2
 800e20c:	460c      	mov	r4, r1
 800e20e:	46a8      	mov	r8, r5
 800e210:	6083      	str	r3, [r0, #8]
 800e212:	f240 1301 	movw	r3, #257	; 0x101
 800e216:	e9c0 5500 	strd	r5, r5, [r0]
 800e21a:	8183      	strh	r3, [r0, #12]
 800e21c:	3501      	adds	r5, #1
 800e21e:	4621      	mov	r1, r4
 800e220:	4630      	mov	r0, r6
 800e222:	f00a f83f 	bl	80182a4 <put_memory>
 800e226:	42af      	cmp	r7, r5
 800e228:	60a4      	str	r4, [r4, #8]
 800e22a:	f104 041c 	add.w	r4, r4, #28
 800e22e:	f804 8c10 	strb.w	r8, [r4, #-16]
 800e232:	d1f3      	bne.n	800e21c <rmw_uxrce_init_topic_memory+0x20>
 800e234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e238:	4770      	bx	lr
 800e23a:	bf00      	nop

0800e23c <rmw_uxrce_init_static_input_buffer_memory>:
 800e23c:	b1ea      	cbz	r2, 800e27a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800e23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e242:	7b05      	ldrb	r5, [r0, #12]
 800e244:	4606      	mov	r6, r0
 800e246:	b9b5      	cbnz	r5, 800e276 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800e248:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800e24c:	4617      	mov	r7, r2
 800e24e:	460c      	mov	r4, r1
 800e250:	46a8      	mov	r8, r5
 800e252:	6083      	str	r3, [r0, #8]
 800e254:	f240 1301 	movw	r3, #257	; 0x101
 800e258:	e9c0 5500 	strd	r5, r5, [r0]
 800e25c:	8183      	strh	r3, [r0, #12]
 800e25e:	3501      	adds	r5, #1
 800e260:	4621      	mov	r1, r4
 800e262:	4630      	mov	r0, r6
 800e264:	f00a f81e 	bl	80182a4 <put_memory>
 800e268:	42af      	cmp	r7, r5
 800e26a:	60a4      	str	r4, [r4, #8]
 800e26c:	f884 800c 	strb.w	r8, [r4, #12]
 800e270:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800e274:	d1f3      	bne.n	800e25e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800e276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e27a:	4770      	bx	lr

0800e27c <rmw_uxrce_init_init_options_impl_memory>:
 800e27c:	b1e2      	cbz	r2, 800e2b8 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800e27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e282:	7b05      	ldrb	r5, [r0, #12]
 800e284:	4606      	mov	r6, r0
 800e286:	b9ad      	cbnz	r5, 800e2b4 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800e288:	232c      	movs	r3, #44	; 0x2c
 800e28a:	4617      	mov	r7, r2
 800e28c:	460c      	mov	r4, r1
 800e28e:	46a8      	mov	r8, r5
 800e290:	6083      	str	r3, [r0, #8]
 800e292:	f240 1301 	movw	r3, #257	; 0x101
 800e296:	e9c0 5500 	strd	r5, r5, [r0]
 800e29a:	8183      	strh	r3, [r0, #12]
 800e29c:	3501      	adds	r5, #1
 800e29e:	4621      	mov	r1, r4
 800e2a0:	4630      	mov	r0, r6
 800e2a2:	f009 ffff 	bl	80182a4 <put_memory>
 800e2a6:	42af      	cmp	r7, r5
 800e2a8:	60a4      	str	r4, [r4, #8]
 800e2aa:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800e2ae:	f804 8c20 	strb.w	r8, [r4, #-32]
 800e2b2:	d1f3      	bne.n	800e29c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800e2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2b8:	4770      	bx	lr
 800e2ba:	bf00      	nop

0800e2bc <rmw_uxrce_init_wait_set_memory>:
 800e2bc:	b1e2      	cbz	r2, 800e2f8 <rmw_uxrce_init_wait_set_memory+0x3c>
 800e2be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2c2:	7b05      	ldrb	r5, [r0, #12]
 800e2c4:	4606      	mov	r6, r0
 800e2c6:	b9ad      	cbnz	r5, 800e2f4 <rmw_uxrce_init_wait_set_memory+0x38>
 800e2c8:	231c      	movs	r3, #28
 800e2ca:	4617      	mov	r7, r2
 800e2cc:	460c      	mov	r4, r1
 800e2ce:	46a8      	mov	r8, r5
 800e2d0:	6083      	str	r3, [r0, #8]
 800e2d2:	f240 1301 	movw	r3, #257	; 0x101
 800e2d6:	e9c0 5500 	strd	r5, r5, [r0]
 800e2da:	8183      	strh	r3, [r0, #12]
 800e2dc:	3501      	adds	r5, #1
 800e2de:	4621      	mov	r1, r4
 800e2e0:	4630      	mov	r0, r6
 800e2e2:	f009 ffdf 	bl	80182a4 <put_memory>
 800e2e6:	42af      	cmp	r7, r5
 800e2e8:	60a4      	str	r4, [r4, #8]
 800e2ea:	f104 041c 	add.w	r4, r4, #28
 800e2ee:	f804 8c10 	strb.w	r8, [r4, #-16]
 800e2f2:	d1f3      	bne.n	800e2dc <rmw_uxrce_init_wait_set_memory+0x20>
 800e2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2f8:	4770      	bx	lr
 800e2fa:	bf00      	nop

0800e2fc <rmw_uxrce_init_guard_condition_memory>:
 800e2fc:	b1e2      	cbz	r2, 800e338 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800e2fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e302:	7b05      	ldrb	r5, [r0, #12]
 800e304:	4606      	mov	r6, r0
 800e306:	b9ad      	cbnz	r5, 800e334 <rmw_uxrce_init_guard_condition_memory+0x38>
 800e308:	2320      	movs	r3, #32
 800e30a:	4617      	mov	r7, r2
 800e30c:	460c      	mov	r4, r1
 800e30e:	46a8      	mov	r8, r5
 800e310:	6083      	str	r3, [r0, #8]
 800e312:	f240 1301 	movw	r3, #257	; 0x101
 800e316:	e9c0 5500 	strd	r5, r5, [r0]
 800e31a:	8183      	strh	r3, [r0, #12]
 800e31c:	3501      	adds	r5, #1
 800e31e:	4621      	mov	r1, r4
 800e320:	4630      	mov	r0, r6
 800e322:	f009 ffbf 	bl	80182a4 <put_memory>
 800e326:	42af      	cmp	r7, r5
 800e328:	60a4      	str	r4, [r4, #8]
 800e32a:	f104 0420 	add.w	r4, r4, #32
 800e32e:	f804 8c14 	strb.w	r8, [r4, #-20]
 800e332:	d1f3      	bne.n	800e31c <rmw_uxrce_init_guard_condition_memory+0x20>
 800e334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e338:	4770      	bx	lr
 800e33a:	bf00      	nop

0800e33c <rmw_uxrce_fini_session_memory>:
 800e33c:	4601      	mov	r1, r0
 800e33e:	4801      	ldr	r0, [pc, #4]	; (800e344 <rmw_uxrce_fini_session_memory+0x8>)
 800e340:	f009 bfb0 	b.w	80182a4 <put_memory>
 800e344:	2001036c 	.word	0x2001036c

0800e348 <rmw_uxrce_fini_node_memory>:
 800e348:	b538      	push	{r3, r4, r5, lr}
 800e34a:	4604      	mov	r4, r0
 800e34c:	6800      	ldr	r0, [r0, #0]
 800e34e:	b128      	cbz	r0, 800e35c <rmw_uxrce_fini_node_memory+0x14>
 800e350:	4b07      	ldr	r3, [pc, #28]	; (800e370 <rmw_uxrce_fini_node_memory+0x28>)
 800e352:	6819      	ldr	r1, [r3, #0]
 800e354:	f7f1 ff74 	bl	8000240 <strcmp>
 800e358:	b940      	cbnz	r0, 800e36c <rmw_uxrce_fini_node_memory+0x24>
 800e35a:	6020      	str	r0, [r4, #0]
 800e35c:	6861      	ldr	r1, [r4, #4]
 800e35e:	b129      	cbz	r1, 800e36c <rmw_uxrce_fini_node_memory+0x24>
 800e360:	2500      	movs	r5, #0
 800e362:	4804      	ldr	r0, [pc, #16]	; (800e374 <rmw_uxrce_fini_node_memory+0x2c>)
 800e364:	610d      	str	r5, [r1, #16]
 800e366:	f009 ff9d 	bl	80182a4 <put_memory>
 800e36a:	6065      	str	r5, [r4, #4]
 800e36c:	bd38      	pop	{r3, r4, r5, pc}
 800e36e:	bf00      	nop
 800e370:	0801efd0 	.word	0x0801efd0
 800e374:	2001033c 	.word	0x2001033c

0800e378 <rmw_uxrce_fini_publisher_memory>:
 800e378:	b510      	push	{r4, lr}
 800e37a:	4604      	mov	r4, r0
 800e37c:	6800      	ldr	r0, [r0, #0]
 800e37e:	b128      	cbz	r0, 800e38c <rmw_uxrce_fini_publisher_memory+0x14>
 800e380:	4b06      	ldr	r3, [pc, #24]	; (800e39c <rmw_uxrce_fini_publisher_memory+0x24>)
 800e382:	6819      	ldr	r1, [r3, #0]
 800e384:	f7f1 ff5c 	bl	8000240 <strcmp>
 800e388:	b938      	cbnz	r0, 800e39a <rmw_uxrce_fini_publisher_memory+0x22>
 800e38a:	6020      	str	r0, [r4, #0]
 800e38c:	6861      	ldr	r1, [r4, #4]
 800e38e:	b121      	cbz	r1, 800e39a <rmw_uxrce_fini_publisher_memory+0x22>
 800e390:	4803      	ldr	r0, [pc, #12]	; (800e3a0 <rmw_uxrce_fini_publisher_memory+0x28>)
 800e392:	f009 ff87 	bl	80182a4 <put_memory>
 800e396:	2300      	movs	r3, #0
 800e398:	6063      	str	r3, [r4, #4]
 800e39a:	bd10      	pop	{r4, pc}
 800e39c:	0801efd0 	.word	0x0801efd0
 800e3a0:	2001034c 	.word	0x2001034c

0800e3a4 <rmw_uxrce_fini_subscription_memory>:
 800e3a4:	b510      	push	{r4, lr}
 800e3a6:	4604      	mov	r4, r0
 800e3a8:	6800      	ldr	r0, [r0, #0]
 800e3aa:	b128      	cbz	r0, 800e3b8 <rmw_uxrce_fini_subscription_memory+0x14>
 800e3ac:	4b06      	ldr	r3, [pc, #24]	; (800e3c8 <rmw_uxrce_fini_subscription_memory+0x24>)
 800e3ae:	6819      	ldr	r1, [r3, #0]
 800e3b0:	f7f1 ff46 	bl	8000240 <strcmp>
 800e3b4:	b938      	cbnz	r0, 800e3c6 <rmw_uxrce_fini_subscription_memory+0x22>
 800e3b6:	6020      	str	r0, [r4, #0]
 800e3b8:	6861      	ldr	r1, [r4, #4]
 800e3ba:	b121      	cbz	r1, 800e3c6 <rmw_uxrce_fini_subscription_memory+0x22>
 800e3bc:	4803      	ldr	r0, [pc, #12]	; (800e3cc <rmw_uxrce_fini_subscription_memory+0x28>)
 800e3be:	f009 ff71 	bl	80182a4 <put_memory>
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	6063      	str	r3, [r4, #4]
 800e3c6:	bd10      	pop	{r4, pc}
 800e3c8:	0801efd0 	.word	0x0801efd0
 800e3cc:	2001038c 	.word	0x2001038c

0800e3d0 <rmw_uxrce_fini_service_memory>:
 800e3d0:	b510      	push	{r4, lr}
 800e3d2:	4604      	mov	r4, r0
 800e3d4:	6800      	ldr	r0, [r0, #0]
 800e3d6:	b128      	cbz	r0, 800e3e4 <rmw_uxrce_fini_service_memory+0x14>
 800e3d8:	4b06      	ldr	r3, [pc, #24]	; (800e3f4 <rmw_uxrce_fini_service_memory+0x24>)
 800e3da:	6819      	ldr	r1, [r3, #0]
 800e3dc:	f7f1 ff30 	bl	8000240 <strcmp>
 800e3e0:	b938      	cbnz	r0, 800e3f2 <rmw_uxrce_fini_service_memory+0x22>
 800e3e2:	6020      	str	r0, [r4, #0]
 800e3e4:	6861      	ldr	r1, [r4, #4]
 800e3e6:	b121      	cbz	r1, 800e3f2 <rmw_uxrce_fini_service_memory+0x22>
 800e3e8:	4803      	ldr	r0, [pc, #12]	; (800e3f8 <rmw_uxrce_fini_service_memory+0x28>)
 800e3ea:	f009 ff5b 	bl	80182a4 <put_memory>
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	6063      	str	r3, [r4, #4]
 800e3f2:	bd10      	pop	{r4, pc}
 800e3f4:	0801efd0 	.word	0x0801efd0
 800e3f8:	2001035c 	.word	0x2001035c

0800e3fc <rmw_uxrce_fini_client_memory>:
 800e3fc:	b510      	push	{r4, lr}
 800e3fe:	4604      	mov	r4, r0
 800e400:	6800      	ldr	r0, [r0, #0]
 800e402:	b128      	cbz	r0, 800e410 <rmw_uxrce_fini_client_memory+0x14>
 800e404:	4b06      	ldr	r3, [pc, #24]	; (800e420 <rmw_uxrce_fini_client_memory+0x24>)
 800e406:	6819      	ldr	r1, [r3, #0]
 800e408:	f7f1 ff1a 	bl	8000240 <strcmp>
 800e40c:	b938      	cbnz	r0, 800e41e <rmw_uxrce_fini_client_memory+0x22>
 800e40e:	6020      	str	r0, [r4, #0]
 800e410:	6861      	ldr	r1, [r4, #4]
 800e412:	b121      	cbz	r1, 800e41e <rmw_uxrce_fini_client_memory+0x22>
 800e414:	4803      	ldr	r0, [pc, #12]	; (800e424 <rmw_uxrce_fini_client_memory+0x28>)
 800e416:	f009 ff45 	bl	80182a4 <put_memory>
 800e41a:	2300      	movs	r3, #0
 800e41c:	6063      	str	r3, [r4, #4]
 800e41e:	bd10      	pop	{r4, pc}
 800e420:	0801efd0 	.word	0x0801efd0
 800e424:	2000b9a8 	.word	0x2000b9a8

0800e428 <rmw_uxrce_fini_topic_memory>:
 800e428:	b510      	push	{r4, lr}
 800e42a:	4604      	mov	r4, r0
 800e42c:	4803      	ldr	r0, [pc, #12]	; (800e43c <rmw_uxrce_fini_topic_memory+0x14>)
 800e42e:	4621      	mov	r1, r4
 800e430:	f009 ff38 	bl	80182a4 <put_memory>
 800e434:	2300      	movs	r3, #0
 800e436:	61a3      	str	r3, [r4, #24]
 800e438:	bd10      	pop	{r4, pc}
 800e43a:	bf00      	nop
 800e43c:	2001039c 	.word	0x2001039c

0800e440 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800e440:	b082      	sub	sp, #8
 800e442:	492b      	ldr	r1, [pc, #172]	; (800e4f0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800e444:	b530      	push	{r4, r5, lr}
 800e446:	680d      	ldr	r5, [r1, #0]
 800e448:	ac03      	add	r4, sp, #12
 800e44a:	e884 000c 	stmia.w	r4, {r2, r3}
 800e44e:	461c      	mov	r4, r3
 800e450:	2d00      	cmp	r5, #0
 800e452:	d04b      	beq.n	800e4ec <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 800e454:	462b      	mov	r3, r5
 800e456:	2100      	movs	r1, #0
 800e458:	689a      	ldr	r2, [r3, #8]
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800e460:	4290      	cmp	r0, r2
 800e462:	bf08      	it	eq
 800e464:	3101      	addeq	r1, #1
 800e466:	2b00      	cmp	r3, #0
 800e468:	d1f6      	bne.n	800e458 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800e46a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e46e:	2b02      	cmp	r3, #2
 800e470:	d029      	beq.n	800e4c6 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e472:	d820      	bhi.n	800e4b6 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 800e474:	428c      	cmp	r4, r1
 800e476:	d828      	bhi.n	800e4ca <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800e478:	fab4 f284 	clz	r2, r4
 800e47c:	0952      	lsrs	r2, r2, #5
 800e47e:	b324      	cbz	r4, 800e4ca <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800e480:	b1dd      	cbz	r5, 800e4ba <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 800e482:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800e486:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800e48a:	e001      	b.n	800e490 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 800e48c:	686d      	ldr	r5, [r5, #4]
 800e48e:	b1ad      	cbz	r5, 800e4bc <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800e490:	68ab      	ldr	r3, [r5, #8]
 800e492:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 800e496:	4288      	cmp	r0, r1
 800e498:	d1f8      	bne.n	800e48c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800e49a:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 800e49e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800e4a2:	4561      	cmp	r1, ip
 800e4a4:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800e4a8:	eb73 0e04 	sbcs.w	lr, r3, r4
 800e4ac:	daee      	bge.n	800e48c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800e4ae:	468c      	mov	ip, r1
 800e4b0:	461c      	mov	r4, r3
 800e4b2:	462a      	mov	r2, r5
 800e4b4:	e7ea      	b.n	800e48c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800e4b6:	2b03      	cmp	r3, #3
 800e4b8:	d0dc      	beq.n	800e474 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	4610      	mov	r0, r2
 800e4be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4c2:	b002      	add	sp, #8
 800e4c4:	4770      	bx	lr
 800e4c6:	428c      	cmp	r4, r1
 800e4c8:	d905      	bls.n	800e4d6 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800e4ca:	4809      	ldr	r0, [pc, #36]	; (800e4f0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800e4cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4d0:	b002      	add	sp, #8
 800e4d2:	f009 bed7 	b.w	8018284 <get_memory>
 800e4d6:	fab4 f284 	clz	r2, r4
 800e4da:	0952      	lsrs	r2, r2, #5
 800e4dc:	2c00      	cmp	r4, #0
 800e4de:	d1ed      	bne.n	800e4bc <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800e4e0:	4803      	ldr	r0, [pc, #12]	; (800e4f0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800e4e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4e6:	b002      	add	sp, #8
 800e4e8:	f009 becc 	b.w	8018284 <get_memory>
 800e4ec:	4629      	mov	r1, r5
 800e4ee:	e7bc      	b.n	800e46a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800e4f0:	2001037c 	.word	0x2001037c

0800e4f4 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800e4f4:	4b12      	ldr	r3, [pc, #72]	; (800e540 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	b530      	push	{r4, r5, lr}
 800e4fa:	b1f3      	cbz	r3, 800e53a <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800e4fc:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800e500:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 800e504:	2400      	movs	r4, #0
 800e506:	e001      	b.n	800e50c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e508:	685b      	ldr	r3, [r3, #4]
 800e50a:	b1a3      	cbz	r3, 800e536 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800e50c:	689a      	ldr	r2, [r3, #8]
 800e50e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800e512:	4288      	cmp	r0, r1
 800e514:	d1f8      	bne.n	800e508 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e516:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 800e51a:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 800e51e:	4571      	cmp	r1, lr
 800e520:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800e524:	eb72 050c 	sbcs.w	r5, r2, ip
 800e528:	daee      	bge.n	800e508 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e52a:	461c      	mov	r4, r3
 800e52c:	685b      	ldr	r3, [r3, #4]
 800e52e:	468e      	mov	lr, r1
 800e530:	4694      	mov	ip, r2
 800e532:	2b00      	cmp	r3, #0
 800e534:	d1ea      	bne.n	800e50c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e536:	4620      	mov	r0, r4
 800e538:	bd30      	pop	{r4, r5, pc}
 800e53a:	461c      	mov	r4, r3
 800e53c:	4620      	mov	r0, r4
 800e53e:	bd30      	pop	{r4, r5, pc}
 800e540:	2001037c 	.word	0x2001037c
 800e544:	00000000 	.word	0x00000000

0800e548 <rmw_uxrce_clean_expired_static_input_buffer>:
 800e548:	4b3d      	ldr	r3, [pc, #244]	; (800e640 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e54a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e54e:	681f      	ldr	r7, [r3, #0]
 800e550:	ed2d 8b06 	vpush	{d8-d10}
 800e554:	b08d      	sub	sp, #52	; 0x34
 800e556:	f00b f8d1 	bl	80196fc <rmw_uros_epoch_nanos>
 800e55a:	2f00      	cmp	r7, #0
 800e55c:	d05d      	beq.n	800e61a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e55e:	46b8      	mov	r8, r7
 800e560:	4681      	mov	r9, r0
 800e562:	468a      	mov	sl, r1
 800e564:	ac04      	add	r4, sp, #16
 800e566:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e56a:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800e56e:	2b04      	cmp	r3, #4
 800e570:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 800e628 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800e574:	ed9f ab2e 	vldr	d10, [pc, #184]	; 800e630 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800e578:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 800e638 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800e57c:	d03f      	beq.n	800e5fe <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e57e:	2b05      	cmp	r3, #5
 800e580:	d044      	beq.n	800e60c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800e582:	2b03      	cmp	r3, #3
 800e584:	d03b      	beq.n	800e5fe <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e586:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e58a:	ed8d ab06 	vstr	d10, [sp, #24]
 800e58e:	ab08      	add	r3, sp, #32
 800e590:	ed8d 8b08 	vstr	d8, [sp, #32]
 800e594:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 800e598:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e59a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e59e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e5a2:	f009 fc91 	bl	8017ec8 <rmw_time_equal>
 800e5a6:	b118      	cbz	r0, 800e5b0 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800e5a8:	ed8d 9b04 	vstr	d9, [sp, #16]
 800e5ac:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e5b0:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 800e5b4:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 800e5b8:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800e5bc:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800e5c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e5c4:	f009 fcd6 	bl	8017f74 <rmw_time_total_nsec>
 800e5c8:	1830      	adds	r0, r6, r0
 800e5ca:	eb47 0101 	adc.w	r1, r7, r1
 800e5ce:	4548      	cmp	r0, r9
 800e5d0:	eb71 030a 	sbcs.w	r3, r1, sl
 800e5d4:	db05      	blt.n	800e5e2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800e5d6:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800e5da:	4591      	cmp	r9, r2
 800e5dc:	eb7a 0303 	sbcs.w	r3, sl, r3
 800e5e0:	da03      	bge.n	800e5ea <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800e5e2:	4641      	mov	r1, r8
 800e5e4:	4816      	ldr	r0, [pc, #88]	; (800e640 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e5e6:	f009 fe5d 	bl	80182a4 <put_memory>
 800e5ea:	f1bb 0f00 	cmp.w	fp, #0
 800e5ee:	d014      	beq.n	800e61a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e5f0:	46d8      	mov	r8, fp
 800e5f2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e5f6:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800e5fa:	2b04      	cmp	r3, #4
 800e5fc:	d1bf      	bne.n	800e57e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800e5fe:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800e602:	3340      	adds	r3, #64	; 0x40
 800e604:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e606:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e60a:	e7c0      	b.n	800e58e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e60c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800e610:	3348      	adds	r3, #72	; 0x48
 800e612:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e614:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e618:	e7b9      	b.n	800e58e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e61a:	b00d      	add	sp, #52	; 0x34
 800e61c:	ecbd 8b06 	vpop	{d8-d10}
 800e620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e624:	f3af 8000 	nop.w
	...
 800e630:	00000001 	.word	0x00000001
 800e634:	00000000 	.word	0x00000000
 800e638:	0000001e 	.word	0x0000001e
 800e63c:	00000000 	.word	0x00000000
 800e640:	2001037c 	.word	0x2001037c

0800e644 <run_xrce_session>:
 800e644:	b510      	push	{r4, lr}
 800e646:	788c      	ldrb	r4, [r1, #2]
 800e648:	b086      	sub	sp, #24
 800e64a:	2c01      	cmp	r4, #1
 800e64c:	f8ad 200e 	strh.w	r2, [sp, #14]
 800e650:	d00c      	beq.n	800e66c <run_xrce_session+0x28>
 800e652:	2401      	movs	r4, #1
 800e654:	4619      	mov	r1, r3
 800e656:	f10d 020e 	add.w	r2, sp, #14
 800e65a:	f10d 0317 	add.w	r3, sp, #23
 800e65e:	9400      	str	r4, [sp, #0]
 800e660:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e664:	f003 f830 	bl	80116c8 <uxr_run_session_until_all_status>
 800e668:	b006      	add	sp, #24
 800e66a:	bd10      	pop	{r4, pc}
 800e66c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e670:	f002 fc4c 	bl	8010f0c <uxr_flash_output_streams>
 800e674:	4620      	mov	r0, r4
 800e676:	b006      	add	sp, #24
 800e678:	bd10      	pop	{r4, pc}
 800e67a:	bf00      	nop

0800e67c <convert_qos_profile>:
 800e67c:	7a4a      	ldrb	r2, [r1, #9]
 800e67e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800e682:	2a02      	cmp	r2, #2
 800e684:	bf18      	it	ne
 800e686:	2200      	movne	r2, #0
 800e688:	7002      	strb	r2, [r0, #0]
 800e68a:	f1ac 0202 	sub.w	r2, ip, #2
 800e68e:	fab2 f282 	clz	r2, r2
 800e692:	0952      	lsrs	r2, r2, #5
 800e694:	7042      	strb	r2, [r0, #1]
 800e696:	780a      	ldrb	r2, [r1, #0]
 800e698:	8889      	ldrh	r1, [r1, #4]
 800e69a:	f1a2 0202 	sub.w	r2, r2, #2
 800e69e:	8081      	strh	r1, [r0, #4]
 800e6a0:	fab2 f282 	clz	r2, r2
 800e6a4:	0952      	lsrs	r2, r2, #5
 800e6a6:	7082      	strb	r2, [r0, #2]
 800e6a8:	4770      	bx	lr
 800e6aa:	bf00      	nop

0800e6ac <generate_service_topics>:
 800e6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6ae:	461d      	mov	r5, r3
 800e6b0:	b083      	sub	sp, #12
 800e6b2:	4606      	mov	r6, r0
 800e6b4:	4c11      	ldr	r4, [pc, #68]	; (800e6fc <generate_service_topics+0x50>)
 800e6b6:	4608      	mov	r0, r1
 800e6b8:	4b11      	ldr	r3, [pc, #68]	; (800e700 <generate_service_topics+0x54>)
 800e6ba:	4617      	mov	r7, r2
 800e6bc:	4629      	mov	r1, r5
 800e6be:	4a11      	ldr	r2, [pc, #68]	; (800e704 <generate_service_topics+0x58>)
 800e6c0:	9401      	str	r4, [sp, #4]
 800e6c2:	9600      	str	r6, [sp, #0]
 800e6c4:	f00d ff1c 	bl	801c500 <sniprintf>
 800e6c8:	4a0f      	ldr	r2, [pc, #60]	; (800e708 <generate_service_topics+0x5c>)
 800e6ca:	4604      	mov	r4, r0
 800e6cc:	4b0f      	ldr	r3, [pc, #60]	; (800e70c <generate_service_topics+0x60>)
 800e6ce:	9201      	str	r2, [sp, #4]
 800e6d0:	4638      	mov	r0, r7
 800e6d2:	4a0c      	ldr	r2, [pc, #48]	; (800e704 <generate_service_topics+0x58>)
 800e6d4:	4629      	mov	r1, r5
 800e6d6:	9600      	str	r6, [sp, #0]
 800e6d8:	f00d ff12 	bl	801c500 <sniprintf>
 800e6dc:	2c00      	cmp	r4, #0
 800e6de:	bfa8      	it	ge
 800e6e0:	42a5      	cmpge	r5, r4
 800e6e2:	bfcc      	ite	gt
 800e6e4:	2401      	movgt	r4, #1
 800e6e6:	2400      	movle	r4, #0
 800e6e8:	dd05      	ble.n	800e6f6 <generate_service_topics+0x4a>
 800e6ea:	2800      	cmp	r0, #0
 800e6ec:	bfa8      	it	ge
 800e6ee:	4285      	cmpge	r5, r0
 800e6f0:	bfcc      	ite	gt
 800e6f2:	2401      	movgt	r4, #1
 800e6f4:	2400      	movle	r4, #0
 800e6f6:	4620      	mov	r0, r4
 800e6f8:	b003      	add	sp, #12
 800e6fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6fc:	0801e550 	.word	0x0801e550
 800e700:	0801e54c 	.word	0x0801e54c
 800e704:	0801e528 	.word	0x0801e528
 800e708:	0801e544 	.word	0x0801e544
 800e70c:	0801e540 	.word	0x0801e540

0800e710 <generate_service_types>:
 800e710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e714:	4606      	mov	r6, r0
 800e716:	b087      	sub	sp, #28
 800e718:	461c      	mov	r4, r3
 800e71a:	6883      	ldr	r3, [r0, #8]
 800e71c:	460d      	mov	r5, r1
 800e71e:	4617      	mov	r7, r2
 800e720:	4798      	blx	r3
 800e722:	68f3      	ldr	r3, [r6, #12]
 800e724:	4606      	mov	r6, r0
 800e726:	4798      	blx	r3
 800e728:	2300      	movs	r3, #0
 800e72a:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800e72e:	6872      	ldr	r2, [r6, #4]
 800e730:	702b      	strb	r3, [r5, #0]
 800e732:	6813      	ldr	r3, [r2, #0]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d03f      	beq.n	800e7b8 <generate_service_types+0xa8>
 800e738:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800e7cc <generate_service_types+0xbc>
 800e73c:	4649      	mov	r1, r9
 800e73e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800e7d4 <generate_service_types+0xc4>
 800e742:	4628      	mov	r0, r5
 800e744:	f8df a090 	ldr.w	sl, [pc, #144]	; 800e7d8 <generate_service_types+0xc8>
 800e748:	f8cd 8014 	str.w	r8, [sp, #20]
 800e74c:	6852      	ldr	r2, [r2, #4]
 800e74e:	9100      	str	r1, [sp, #0]
 800e750:	4621      	mov	r1, r4
 800e752:	f8cd 8008 	str.w	r8, [sp, #8]
 800e756:	f8cd a004 	str.w	sl, [sp, #4]
 800e75a:	e9cd 9203 	strd	r9, r2, [sp, #12]
 800e75e:	4a1a      	ldr	r2, [pc, #104]	; (800e7c8 <generate_service_types+0xb8>)
 800e760:	f00d fece 	bl	801c500 <sniprintf>
 800e764:	2300      	movs	r3, #0
 800e766:	42a0      	cmp	r0, r4
 800e768:	ea6f 0600 	mvn.w	r6, r0
 800e76c:	703b      	strb	r3, [r7, #0]
 800e76e:	f8db 3000 	ldr.w	r3, [fp]
 800e772:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 800e776:	bfac      	ite	ge
 800e778:	2500      	movge	r5, #0
 800e77a:	2501      	movlt	r5, #1
 800e77c:	b30b      	cbz	r3, 800e7c2 <generate_service_types+0xb2>
 800e77e:	4a13      	ldr	r2, [pc, #76]	; (800e7cc <generate_service_types+0xbc>)
 800e780:	f8cd 8014 	str.w	r8, [sp, #20]
 800e784:	402e      	ands	r6, r5
 800e786:	f8db 1004 	ldr.w	r1, [fp, #4]
 800e78a:	4638      	mov	r0, r7
 800e78c:	9104      	str	r1, [sp, #16]
 800e78e:	4621      	mov	r1, r4
 800e790:	e9cd 2a00 	strd	r2, sl, [sp]
 800e794:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e798:	4a0b      	ldr	r2, [pc, #44]	; (800e7c8 <generate_service_types+0xb8>)
 800e79a:	f00d feb1 	bl	801c500 <sniprintf>
 800e79e:	2800      	cmp	r0, #0
 800e7a0:	bfb4      	ite	lt
 800e7a2:	2600      	movlt	r6, #0
 800e7a4:	f006 0601 	andge.w	r6, r6, #1
 800e7a8:	42a0      	cmp	r0, r4
 800e7aa:	bfac      	ite	ge
 800e7ac:	2000      	movge	r0, #0
 800e7ae:	f006 0001 	andlt.w	r0, r6, #1
 800e7b2:	b007      	add	sp, #28
 800e7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7b8:	4b05      	ldr	r3, [pc, #20]	; (800e7d0 <generate_service_types+0xc0>)
 800e7ba:	f8df 9010 	ldr.w	r9, [pc, #16]	; 800e7cc <generate_service_types+0xbc>
 800e7be:	4619      	mov	r1, r3
 800e7c0:	e7bd      	b.n	800e73e <generate_service_types+0x2e>
 800e7c2:	4b03      	ldr	r3, [pc, #12]	; (800e7d0 <generate_service_types+0xc0>)
 800e7c4:	461a      	mov	r2, r3
 800e7c6:	e7db      	b.n	800e780 <generate_service_types+0x70>
 800e7c8:	0801e520 	.word	0x0801e520
 800e7cc:	0801e51c 	.word	0x0801e51c
 800e7d0:	0801eda8 	.word	0x0801eda8
 800e7d4:	0801e530 	.word	0x0801e530
 800e7d8:	0801e534 	.word	0x0801e534

0800e7dc <generate_type_name>:
 800e7dc:	2300      	movs	r3, #0
 800e7de:	b530      	push	{r4, r5, lr}
 800e7e0:	700b      	strb	r3, [r1, #0]
 800e7e2:	b087      	sub	sp, #28
 800e7e4:	6803      	ldr	r3, [r0, #0]
 800e7e6:	4614      	mov	r4, r2
 800e7e8:	b1bb      	cbz	r3, 800e81a <generate_type_name+0x3e>
 800e7ea:	4a0e      	ldr	r2, [pc, #56]	; (800e824 <generate_type_name+0x48>)
 800e7ec:	4615      	mov	r5, r2
 800e7ee:	9500      	str	r5, [sp, #0]
 800e7f0:	9203      	str	r2, [sp, #12]
 800e7f2:	4d0d      	ldr	r5, [pc, #52]	; (800e828 <generate_type_name+0x4c>)
 800e7f4:	6842      	ldr	r2, [r0, #4]
 800e7f6:	4608      	mov	r0, r1
 800e7f8:	490c      	ldr	r1, [pc, #48]	; (800e82c <generate_type_name+0x50>)
 800e7fa:	9204      	str	r2, [sp, #16]
 800e7fc:	9105      	str	r1, [sp, #20]
 800e7fe:	9102      	str	r1, [sp, #8]
 800e800:	4621      	mov	r1, r4
 800e802:	4a0b      	ldr	r2, [pc, #44]	; (800e830 <generate_type_name+0x54>)
 800e804:	9501      	str	r5, [sp, #4]
 800e806:	f00d fe7b 	bl	801c500 <sniprintf>
 800e80a:	2800      	cmp	r0, #0
 800e80c:	bfa8      	it	ge
 800e80e:	4284      	cmpge	r4, r0
 800e810:	bfcc      	ite	gt
 800e812:	2001      	movgt	r0, #1
 800e814:	2000      	movle	r0, #0
 800e816:	b007      	add	sp, #28
 800e818:	bd30      	pop	{r4, r5, pc}
 800e81a:	4b06      	ldr	r3, [pc, #24]	; (800e834 <generate_type_name+0x58>)
 800e81c:	4a01      	ldr	r2, [pc, #4]	; (800e824 <generate_type_name+0x48>)
 800e81e:	461d      	mov	r5, r3
 800e820:	e7e5      	b.n	800e7ee <generate_type_name+0x12>
 800e822:	bf00      	nop
 800e824:	0801e51c 	.word	0x0801e51c
 800e828:	0801e534 	.word	0x0801e534
 800e82c:	0801e530 	.word	0x0801e530
 800e830:	0801e520 	.word	0x0801e520
 800e834:	0801eda8 	.word	0x0801eda8

0800e838 <generate_topic_name>:
 800e838:	b530      	push	{r4, r5, lr}
 800e83a:	4614      	mov	r4, r2
 800e83c:	b083      	sub	sp, #12
 800e83e:	4605      	mov	r5, r0
 800e840:	4b07      	ldr	r3, [pc, #28]	; (800e860 <generate_topic_name+0x28>)
 800e842:	4a08      	ldr	r2, [pc, #32]	; (800e864 <generate_topic_name+0x2c>)
 800e844:	4608      	mov	r0, r1
 800e846:	9500      	str	r5, [sp, #0]
 800e848:	4621      	mov	r1, r4
 800e84a:	f00d fe59 	bl	801c500 <sniprintf>
 800e84e:	2800      	cmp	r0, #0
 800e850:	bfa8      	it	ge
 800e852:	4284      	cmpge	r4, r0
 800e854:	bfcc      	ite	gt
 800e856:	2001      	movgt	r0, #1
 800e858:	2000      	movle	r0, #0
 800e85a:	b003      	add	sp, #12
 800e85c:	bd30      	pop	{r4, r5, pc}
 800e85e:	bf00      	nop
 800e860:	0801e558 	.word	0x0801e558
 800e864:	0801e538 	.word	0x0801e538

0800e868 <is_uxrce_rmw_identifier_valid>:
 800e868:	b510      	push	{r4, lr}
 800e86a:	4604      	mov	r4, r0
 800e86c:	b140      	cbz	r0, 800e880 <is_uxrce_rmw_identifier_valid+0x18>
 800e86e:	f009 fd8f 	bl	8018390 <rmw_get_implementation_identifier>
 800e872:	4601      	mov	r1, r0
 800e874:	4620      	mov	r0, r4
 800e876:	f7f1 fce3 	bl	8000240 <strcmp>
 800e87a:	fab0 f080 	clz	r0, r0
 800e87e:	0940      	lsrs	r0, r0, #5
 800e880:	bd10      	pop	{r4, pc}
 800e882:	bf00      	nop

0800e884 <get_message_typesupport_handle>:
 800e884:	6883      	ldr	r3, [r0, #8]
 800e886:	4718      	bx	r3

0800e888 <get_message_typesupport_handle_function>:
 800e888:	b510      	push	{r4, lr}
 800e88a:	4604      	mov	r4, r0
 800e88c:	6800      	ldr	r0, [r0, #0]
 800e88e:	f7f1 fcd7 	bl	8000240 <strcmp>
 800e892:	2800      	cmp	r0, #0
 800e894:	bf0c      	ite	eq
 800e896:	4620      	moveq	r0, r4
 800e898:	2000      	movne	r0, #0
 800e89a:	bd10      	pop	{r4, pc}

0800e89c <get_service_typesupport_handle>:
 800e89c:	6883      	ldr	r3, [r0, #8]
 800e89e:	4718      	bx	r3

0800e8a0 <get_service_typesupport_handle_function>:
 800e8a0:	b510      	push	{r4, lr}
 800e8a2:	4604      	mov	r4, r0
 800e8a4:	6800      	ldr	r0, [r0, #0]
 800e8a6:	f7f1 fccb 	bl	8000240 <strcmp>
 800e8aa:	2800      	cmp	r0, #0
 800e8ac:	bf0c      	ite	eq
 800e8ae:	4620      	moveq	r0, r4
 800e8b0:	2000      	movne	r0, #0
 800e8b2:	bd10      	pop	{r4, pc}

0800e8b4 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800e8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8b8:	6805      	ldr	r5, [r0, #0]
 800e8ba:	4604      	mov	r4, r0
 800e8bc:	460e      	mov	r6, r1
 800e8be:	4628      	mov	r0, r5
 800e8c0:	f7f1 fcbe 	bl	8000240 <strcmp>
 800e8c4:	b1c8      	cbz	r0, 800e8fa <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800e8c6:	4b11      	ldr	r3, [pc, #68]	; (800e90c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	429d      	cmp	r5, r3
 800e8cc:	d112      	bne.n	800e8f4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e8ce:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e8d2:	f8d8 4000 	ldr.w	r4, [r8]
 800e8d6:	b16c      	cbz	r4, 800e8f4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e8d8:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e8dc:	2700      	movs	r7, #0
 800e8de:	3d04      	subs	r5, #4
 800e8e0:	4631      	mov	r1, r6
 800e8e2:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800e8e6:	f7f1 fcab 	bl	8000240 <strcmp>
 800e8ea:	00bb      	lsls	r3, r7, #2
 800e8ec:	b140      	cbz	r0, 800e900 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800e8ee:	3701      	adds	r7, #1
 800e8f0:	42bc      	cmp	r4, r7
 800e8f2:	d1f5      	bne.n	800e8e0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800e8f4:	2000      	movs	r0, #0
 800e8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8fa:	4620      	mov	r0, r4
 800e8fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e900:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e908:	58d3      	ldr	r3, [r2, r3]
 800e90a:	4718      	bx	r3
 800e90c:	20000a10 	.word	0x20000a10

0800e910 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800e910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e914:	6805      	ldr	r5, [r0, #0]
 800e916:	4604      	mov	r4, r0
 800e918:	460e      	mov	r6, r1
 800e91a:	4628      	mov	r0, r5
 800e91c:	f7f1 fc90 	bl	8000240 <strcmp>
 800e920:	b1c8      	cbz	r0, 800e956 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800e922:	4b11      	ldr	r3, [pc, #68]	; (800e968 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	429d      	cmp	r5, r3
 800e928:	d112      	bne.n	800e950 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800e92a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e92e:	f8d8 4000 	ldr.w	r4, [r8]
 800e932:	b16c      	cbz	r4, 800e950 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800e934:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e938:	2700      	movs	r7, #0
 800e93a:	3d04      	subs	r5, #4
 800e93c:	4631      	mov	r1, r6
 800e93e:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800e942:	f7f1 fc7d 	bl	8000240 <strcmp>
 800e946:	00bb      	lsls	r3, r7, #2
 800e948:	b140      	cbz	r0, 800e95c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800e94a:	3701      	adds	r7, #1
 800e94c:	42bc      	cmp	r4, r7
 800e94e:	d1f5      	bne.n	800e93c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800e950:	2000      	movs	r0, #0
 800e952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e956:	4620      	mov	r0, r4
 800e958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e95c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e960:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e964:	58d3      	ldr	r3, [r2, r3]
 800e966:	4718      	bx	r3
 800e968:	20000a10 	.word	0x20000a10

0800e96c <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__size_function__ServiceEventInfo__client_gid>:
 800e96c:	2010      	movs	r0, #16
 800e96e:	4770      	bx	lr

0800e970 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_const_function__ServiceEventInfo__client_gid>:
 800e970:	4408      	add	r0, r1
 800e972:	4770      	bx	lr

0800e974 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__fetch_function__ServiceEventInfo__client_gid>:
 800e974:	5c43      	ldrb	r3, [r0, r1]
 800e976:	7013      	strb	r3, [r2, #0]
 800e978:	4770      	bx	lr
 800e97a:	bf00      	nop

0800e97c <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__assign_function__ServiceEventInfo__client_gid>:
 800e97c:	7813      	ldrb	r3, [r2, #0]
 800e97e:	5443      	strb	r3, [r0, r1]
 800e980:	4770      	bx	lr
 800e982:	bf00      	nop

0800e984 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_init_function>:
 800e984:	f00a bf10 	b.w	80197a8 <service_msgs__msg__ServiceEventInfo__init>

0800e988 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_fini_function>:
 800e988:	f00a bf20 	b.w	80197cc <service_msgs__msg__ServiceEventInfo__fini>

0800e98c <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_function__ServiceEventInfo__client_gid>:
 800e98c:	4408      	add	r0, r1
 800e98e:	4770      	bx	lr

0800e990 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800e990:	b508      	push	{r3, lr}
 800e992:	f000 f8db 	bl	800eb4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800e996:	4b06      	ldr	r3, [pc, #24]	; (800e9b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800e998:	4906      	ldr	r1, [pc, #24]	; (800e9b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x24>)
 800e99a:	681a      	ldr	r2, [r3, #0]
 800e99c:	6488      	str	r0, [r1, #72]	; 0x48
 800e99e:	b10a      	cbz	r2, 800e9a4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x14>
 800e9a0:	4803      	ldr	r0, [pc, #12]	; (800e9b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800e9a2:	bd08      	pop	{r3, pc}
 800e9a4:	4a04      	ldr	r2, [pc, #16]	; (800e9b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x28>)
 800e9a6:	4802      	ldr	r0, [pc, #8]	; (800e9b0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800e9a8:	6812      	ldr	r2, [r2, #0]
 800e9aa:	601a      	str	r2, [r3, #0]
 800e9ac:	bd08      	pop	{r3, pc}
 800e9ae:	bf00      	nop
 800e9b0:	20000b08 	.word	0x20000b08
 800e9b4:	20000a18 	.word	0x20000a18
 800e9b8:	20000a14 	.word	0x20000a14

0800e9bc <get_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800e9bc:	b5b0      	push	{r4, r5, r7, lr}
 800e9be:	4604      	mov	r4, r0
 800e9c0:	b1d8      	cbz	r0, 800e9fa <get_serialized_size_service_msgs__msg__ServiceEventInfo+0x3e>
 800e9c2:	460d      	mov	r5, r1
 800e9c4:	2101      	movs	r1, #1
 800e9c6:	4628      	mov	r0, r5
 800e9c8:	f001 fea4 	bl	8010714 <ucdr_alignment>
 800e9cc:	1c6b      	adds	r3, r5, #1
 800e9ce:	4607      	mov	r7, r0
 800e9d0:	1d20      	adds	r0, r4, #4
 800e9d2:	f1c5 0508 	rsb	r5, r5, #8
 800e9d6:	441f      	add	r7, r3
 800e9d8:	4639      	mov	r1, r7
 800e9da:	f000 f8c5 	bl	800eb68 <get_serialized_size_builtin_interfaces__msg__Time>
 800e9de:	4407      	add	r7, r0
 800e9e0:	2101      	movs	r1, #1
 800e9e2:	4638      	mov	r0, r7
 800e9e4:	f001 fe96 	bl	8010714 <ucdr_alignment>
 800e9e8:	f100 0410 	add.w	r4, r0, #16
 800e9ec:	2108      	movs	r1, #8
 800e9ee:	443c      	add	r4, r7
 800e9f0:	4620      	mov	r0, r4
 800e9f2:	f001 fe8f 	bl	8010714 <ucdr_alignment>
 800e9f6:	4428      	add	r0, r5
 800e9f8:	4420      	add	r0, r4
 800e9fa:	bdb0      	pop	{r4, r5, r7, pc}

0800e9fc <_ServiceEventInfo__cdr_deserialize>:
 800e9fc:	b538      	push	{r3, r4, r5, lr}
 800e9fe:	460c      	mov	r4, r1
 800ea00:	b1b9      	cbz	r1, 800ea32 <_ServiceEventInfo__cdr_deserialize+0x36>
 800ea02:	4605      	mov	r5, r0
 800ea04:	f000 fb38 	bl	800f078 <ucdr_deserialize_uint8_t>
 800ea08:	f000 f912 	bl	800ec30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	1d21      	adds	r1, r4, #4
 800ea10:	4628      	mov	r0, r5
 800ea12:	685b      	ldr	r3, [r3, #4]
 800ea14:	68db      	ldr	r3, [r3, #12]
 800ea16:	4798      	blx	r3
 800ea18:	f104 010c 	add.w	r1, r4, #12
 800ea1c:	4628      	mov	r0, r5
 800ea1e:	2210      	movs	r2, #16
 800ea20:	f000 f9d4 	bl	800edcc <ucdr_deserialize_array_uint8_t>
 800ea24:	f104 0120 	add.w	r1, r4, #32
 800ea28:	4628      	mov	r0, r5
 800ea2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea2e:	f001 bc2b 	b.w	8010288 <ucdr_deserialize_int64_t>
 800ea32:	4608      	mov	r0, r1
 800ea34:	bd38      	pop	{r3, r4, r5, pc}
 800ea36:	bf00      	nop

0800ea38 <_ServiceEventInfo__cdr_serialize>:
 800ea38:	b1e8      	cbz	r0, 800ea76 <_ServiceEventInfo__cdr_serialize+0x3e>
 800ea3a:	b570      	push	{r4, r5, r6, lr}
 800ea3c:	4606      	mov	r6, r0
 800ea3e:	460d      	mov	r5, r1
 800ea40:	4604      	mov	r4, r0
 800ea42:	4608      	mov	r0, r1
 800ea44:	f816 1b04 	ldrb.w	r1, [r6], #4
 800ea48:	f000 fb00 	bl	800f04c <ucdr_serialize_uint8_t>
 800ea4c:	f000 f8f0 	bl	800ec30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ea50:	4603      	mov	r3, r0
 800ea52:	4629      	mov	r1, r5
 800ea54:	4630      	mov	r0, r6
 800ea56:	685b      	ldr	r3, [r3, #4]
 800ea58:	689b      	ldr	r3, [r3, #8]
 800ea5a:	4798      	blx	r3
 800ea5c:	2210      	movs	r2, #16
 800ea5e:	f104 010c 	add.w	r1, r4, #12
 800ea62:	4628      	mov	r0, r5
 800ea64:	f000 f94e 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 800ea68:	4628      	mov	r0, r5
 800ea6a:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800ea6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ea72:	f001 bb39 	b.w	80100e8 <ucdr_serialize_int64_t>
 800ea76:	4770      	bx	lr

0800ea78 <_ServiceEventInfo__get_serialized_size>:
 800ea78:	b538      	push	{r3, r4, r5, lr}
 800ea7a:	4604      	mov	r4, r0
 800ea7c:	b1b0      	cbz	r0, 800eaac <_ServiceEventInfo__get_serialized_size+0x34>
 800ea7e:	2101      	movs	r1, #1
 800ea80:	2000      	movs	r0, #0
 800ea82:	f001 fe47 	bl	8010714 <ucdr_alignment>
 800ea86:	4605      	mov	r5, r0
 800ea88:	1d20      	adds	r0, r4, #4
 800ea8a:	3501      	adds	r5, #1
 800ea8c:	4629      	mov	r1, r5
 800ea8e:	f000 f86b 	bl	800eb68 <get_serialized_size_builtin_interfaces__msg__Time>
 800ea92:	4405      	add	r5, r0
 800ea94:	2101      	movs	r1, #1
 800ea96:	4628      	mov	r0, r5
 800ea98:	f001 fe3c 	bl	8010714 <ucdr_alignment>
 800ea9c:	3010      	adds	r0, #16
 800ea9e:	2108      	movs	r1, #8
 800eaa0:	4405      	add	r5, r0
 800eaa2:	4628      	mov	r0, r5
 800eaa4:	f001 fe36 	bl	8010714 <ucdr_alignment>
 800eaa8:	3008      	adds	r0, #8
 800eaaa:	4428      	add	r0, r5
 800eaac:	bd38      	pop	{r3, r4, r5, pc}
 800eaae:	bf00      	nop

0800eab0 <_ServiceEventInfo__max_serialized_size>:
 800eab0:	b550      	push	{r4, r6, lr}
 800eab2:	2601      	movs	r6, #1
 800eab4:	b083      	sub	sp, #12
 800eab6:	2000      	movs	r0, #0
 800eab8:	4631      	mov	r1, r6
 800eaba:	f88d 6007 	strb.w	r6, [sp, #7]
 800eabe:	f001 fe29 	bl	8010714 <ucdr_alignment>
 800eac2:	4604      	mov	r4, r0
 800eac4:	f10d 0007 	add.w	r0, sp, #7
 800eac8:	4434      	add	r4, r6
 800eaca:	4621      	mov	r1, r4
 800eacc:	f000 f89c 	bl	800ec08 <max_serialized_size_builtin_interfaces__msg__Time>
 800ead0:	4404      	add	r4, r0
 800ead2:	4631      	mov	r1, r6
 800ead4:	4620      	mov	r0, r4
 800ead6:	f001 fe1d 	bl	8010714 <ucdr_alignment>
 800eada:	3010      	adds	r0, #16
 800eadc:	2108      	movs	r1, #8
 800eade:	4404      	add	r4, r0
 800eae0:	4620      	mov	r0, r4
 800eae2:	f001 fe17 	bl	8010714 <ucdr_alignment>
 800eae6:	3008      	adds	r0, #8
 800eae8:	4420      	add	r0, r4
 800eaea:	b003      	add	sp, #12
 800eaec:	bd50      	pop	{r4, r6, pc}
 800eaee:	bf00      	nop

0800eaf0 <max_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800eaf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaf4:	f04f 0801 	mov.w	r8, #1
 800eaf8:	460c      	mov	r4, r1
 800eafa:	4607      	mov	r7, r0
 800eafc:	4641      	mov	r1, r8
 800eafe:	4620      	mov	r0, r4
 800eb00:	f887 8000 	strb.w	r8, [r7]
 800eb04:	eb04 0608 	add.w	r6, r4, r8
 800eb08:	f001 fe04 	bl	8010714 <ucdr_alignment>
 800eb0c:	4605      	mov	r5, r0
 800eb0e:	4638      	mov	r0, r7
 800eb10:	f1c4 0408 	rsb	r4, r4, #8
 800eb14:	4435      	add	r5, r6
 800eb16:	4629      	mov	r1, r5
 800eb18:	f000 f876 	bl	800ec08 <max_serialized_size_builtin_interfaces__msg__Time>
 800eb1c:	4405      	add	r5, r0
 800eb1e:	4641      	mov	r1, r8
 800eb20:	4628      	mov	r0, r5
 800eb22:	f001 fdf7 	bl	8010714 <ucdr_alignment>
 800eb26:	3010      	adds	r0, #16
 800eb28:	2108      	movs	r1, #8
 800eb2a:	4405      	add	r5, r0
 800eb2c:	4628      	mov	r0, r5
 800eb2e:	f001 fdf1 	bl	8010714 <ucdr_alignment>
 800eb32:	4420      	add	r0, r4
 800eb34:	4428      	add	r0, r5
 800eb36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb3a:	bf00      	nop

0800eb3c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800eb3c:	4800      	ldr	r0, [pc, #0]	; (800eb40 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x4>)
 800eb3e:	4770      	bx	lr
 800eb40:	20000b20 	.word	0x20000b20

0800eb44 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800eb44:	f00a be78 	b.w	8019838 <builtin_interfaces__msg__Time__init>

0800eb48 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800eb48:	f00a be7a 	b.w	8019840 <builtin_interfaces__msg__Time__fini>

0800eb4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800eb4c:	4b04      	ldr	r3, [pc, #16]	; (800eb60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800eb4e:	681a      	ldr	r2, [r3, #0]
 800eb50:	b10a      	cbz	r2, 800eb56 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800eb52:	4803      	ldr	r0, [pc, #12]	; (800eb60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800eb54:	4770      	bx	lr
 800eb56:	4a03      	ldr	r2, [pc, #12]	; (800eb64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800eb58:	4801      	ldr	r0, [pc, #4]	; (800eb60 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800eb5a:	6812      	ldr	r2, [r2, #0]
 800eb5c:	601a      	str	r2, [r3, #0]
 800eb5e:	4770      	bx	lr
 800eb60:	20000bcc 	.word	0x20000bcc
 800eb64:	20000a14 	.word	0x20000a14

0800eb68 <get_serialized_size_builtin_interfaces__msg__Time>:
 800eb68:	b180      	cbz	r0, 800eb8c <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800eb6a:	b538      	push	{r3, r4, r5, lr}
 800eb6c:	460d      	mov	r5, r1
 800eb6e:	2104      	movs	r1, #4
 800eb70:	4628      	mov	r0, r5
 800eb72:	f001 fdcf 	bl	8010714 <ucdr_alignment>
 800eb76:	1d2b      	adds	r3, r5, #4
 800eb78:	f1c5 0504 	rsb	r5, r5, #4
 800eb7c:	2104      	movs	r1, #4
 800eb7e:	181c      	adds	r4, r3, r0
 800eb80:	4620      	mov	r0, r4
 800eb82:	f001 fdc7 	bl	8010714 <ucdr_alignment>
 800eb86:	4428      	add	r0, r5
 800eb88:	4420      	add	r0, r4
 800eb8a:	bd38      	pop	{r3, r4, r5, pc}
 800eb8c:	4770      	bx	lr
 800eb8e:	bf00      	nop

0800eb90 <_Time__cdr_deserialize>:
 800eb90:	b538      	push	{r3, r4, r5, lr}
 800eb92:	460c      	mov	r4, r1
 800eb94:	b141      	cbz	r1, 800eba8 <_Time__cdr_deserialize+0x18>
 800eb96:	4605      	mov	r5, r0
 800eb98:	f001 fa16 	bl	800ffc8 <ucdr_deserialize_int32_t>
 800eb9c:	1d21      	adds	r1, r4, #4
 800eb9e:	4628      	mov	r0, r5
 800eba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eba4:	f000 bd98 	b.w	800f6d8 <ucdr_deserialize_uint32_t>
 800eba8:	4608      	mov	r0, r1
 800ebaa:	bd38      	pop	{r3, r4, r5, pc}

0800ebac <_Time__cdr_serialize>:
 800ebac:	b160      	cbz	r0, 800ebc8 <_Time__cdr_serialize+0x1c>
 800ebae:	b538      	push	{r3, r4, r5, lr}
 800ebb0:	460d      	mov	r5, r1
 800ebb2:	4604      	mov	r4, r0
 800ebb4:	6801      	ldr	r1, [r0, #0]
 800ebb6:	4628      	mov	r0, r5
 800ebb8:	f001 f96e 	bl	800fe98 <ucdr_serialize_int32_t>
 800ebbc:	6861      	ldr	r1, [r4, #4]
 800ebbe:	4628      	mov	r0, r5
 800ebc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ebc4:	f000 bc58 	b.w	800f478 <ucdr_serialize_uint32_t>
 800ebc8:	4770      	bx	lr
 800ebca:	bf00      	nop

0800ebcc <_Time__get_serialized_size>:
 800ebcc:	b160      	cbz	r0, 800ebe8 <_Time__get_serialized_size+0x1c>
 800ebce:	2104      	movs	r1, #4
 800ebd0:	2000      	movs	r0, #0
 800ebd2:	b510      	push	{r4, lr}
 800ebd4:	f001 fd9e 	bl	8010714 <ucdr_alignment>
 800ebd8:	2104      	movs	r1, #4
 800ebda:	1844      	adds	r4, r0, r1
 800ebdc:	4620      	mov	r0, r4
 800ebde:	f001 fd99 	bl	8010714 <ucdr_alignment>
 800ebe2:	3004      	adds	r0, #4
 800ebe4:	4420      	add	r0, r4
 800ebe6:	bd10      	pop	{r4, pc}
 800ebe8:	4770      	bx	lr
 800ebea:	bf00      	nop

0800ebec <_Time__max_serialized_size>:
 800ebec:	b510      	push	{r4, lr}
 800ebee:	2104      	movs	r1, #4
 800ebf0:	2000      	movs	r0, #0
 800ebf2:	f001 fd8f 	bl	8010714 <ucdr_alignment>
 800ebf6:	2104      	movs	r1, #4
 800ebf8:	1844      	adds	r4, r0, r1
 800ebfa:	4620      	mov	r0, r4
 800ebfc:	f001 fd8a 	bl	8010714 <ucdr_alignment>
 800ec00:	3004      	adds	r0, #4
 800ec02:	4420      	add	r0, r4
 800ec04:	bd10      	pop	{r4, pc}
 800ec06:	bf00      	nop

0800ec08 <max_serialized_size_builtin_interfaces__msg__Time>:
 800ec08:	b538      	push	{r3, r4, r5, lr}
 800ec0a:	460c      	mov	r4, r1
 800ec0c:	2301      	movs	r3, #1
 800ec0e:	2104      	movs	r1, #4
 800ec10:	1d25      	adds	r5, r4, #4
 800ec12:	7003      	strb	r3, [r0, #0]
 800ec14:	4620      	mov	r0, r4
 800ec16:	f1c4 0404 	rsb	r4, r4, #4
 800ec1a:	f001 fd7b 	bl	8010714 <ucdr_alignment>
 800ec1e:	4405      	add	r5, r0
 800ec20:	2104      	movs	r1, #4
 800ec22:	4628      	mov	r0, r5
 800ec24:	f001 fd76 	bl	8010714 <ucdr_alignment>
 800ec28:	4420      	add	r0, r4
 800ec2a:	4428      	add	r0, r5
 800ec2c:	bd38      	pop	{r3, r4, r5, pc}
 800ec2e:	bf00      	nop

0800ec30 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800ec30:	4800      	ldr	r0, [pc, #0]	; (800ec34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800ec32:	4770      	bx	lr
 800ec34:	20000be4 	.word	0x20000be4

0800ec38 <ucdr_serialize_endian_array_char>:
 800ec38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec3c:	4619      	mov	r1, r3
 800ec3e:	461f      	mov	r7, r3
 800ec40:	4605      	mov	r5, r0
 800ec42:	4690      	mov	r8, r2
 800ec44:	f001 fd0e 	bl	8010664 <ucdr_check_buffer_available_for>
 800ec48:	b9e0      	cbnz	r0, 800ec84 <ucdr_serialize_endian_array_char+0x4c>
 800ec4a:	463e      	mov	r6, r7
 800ec4c:	e00b      	b.n	800ec66 <ucdr_serialize_endian_array_char+0x2e>
 800ec4e:	4441      	add	r1, r8
 800ec50:	68a8      	ldr	r0, [r5, #8]
 800ec52:	4622      	mov	r2, r4
 800ec54:	1b36      	subs	r6, r6, r4
 800ec56:	f00d fe5e 	bl	801c916 <memcpy>
 800ec5a:	68ab      	ldr	r3, [r5, #8]
 800ec5c:	6928      	ldr	r0, [r5, #16]
 800ec5e:	4423      	add	r3, r4
 800ec60:	4420      	add	r0, r4
 800ec62:	60ab      	str	r3, [r5, #8]
 800ec64:	6128      	str	r0, [r5, #16]
 800ec66:	4631      	mov	r1, r6
 800ec68:	2201      	movs	r2, #1
 800ec6a:	4628      	mov	r0, r5
 800ec6c:	f001 fd84 	bl	8010778 <ucdr_check_final_buffer_behavior_array>
 800ec70:	1bb9      	subs	r1, r7, r6
 800ec72:	4604      	mov	r4, r0
 800ec74:	2800      	cmp	r0, #0
 800ec76:	d1ea      	bne.n	800ec4e <ucdr_serialize_endian_array_char+0x16>
 800ec78:	2301      	movs	r3, #1
 800ec7a:	7da8      	ldrb	r0, [r5, #22]
 800ec7c:	756b      	strb	r3, [r5, #21]
 800ec7e:	4058      	eors	r0, r3
 800ec80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec84:	463a      	mov	r2, r7
 800ec86:	4641      	mov	r1, r8
 800ec88:	68a8      	ldr	r0, [r5, #8]
 800ec8a:	f00d fe44 	bl	801c916 <memcpy>
 800ec8e:	68aa      	ldr	r2, [r5, #8]
 800ec90:	692b      	ldr	r3, [r5, #16]
 800ec92:	443a      	add	r2, r7
 800ec94:	443b      	add	r3, r7
 800ec96:	60aa      	str	r2, [r5, #8]
 800ec98:	612b      	str	r3, [r5, #16]
 800ec9a:	e7ed      	b.n	800ec78 <ucdr_serialize_endian_array_char+0x40>

0800ec9c <ucdr_deserialize_endian_array_char>:
 800ec9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eca0:	4619      	mov	r1, r3
 800eca2:	461f      	mov	r7, r3
 800eca4:	4605      	mov	r5, r0
 800eca6:	4690      	mov	r8, r2
 800eca8:	f001 fcdc 	bl	8010664 <ucdr_check_buffer_available_for>
 800ecac:	b9e8      	cbnz	r0, 800ecea <ucdr_deserialize_endian_array_char+0x4e>
 800ecae:	463e      	mov	r6, r7
 800ecb0:	e00c      	b.n	800eccc <ucdr_deserialize_endian_array_char+0x30>
 800ecb2:	eb08 0003 	add.w	r0, r8, r3
 800ecb6:	68a9      	ldr	r1, [r5, #8]
 800ecb8:	4622      	mov	r2, r4
 800ecba:	1b36      	subs	r6, r6, r4
 800ecbc:	f00d fe2b 	bl	801c916 <memcpy>
 800ecc0:	68ab      	ldr	r3, [r5, #8]
 800ecc2:	6928      	ldr	r0, [r5, #16]
 800ecc4:	4423      	add	r3, r4
 800ecc6:	4420      	add	r0, r4
 800ecc8:	60ab      	str	r3, [r5, #8]
 800ecca:	6128      	str	r0, [r5, #16]
 800eccc:	4631      	mov	r1, r6
 800ecce:	2201      	movs	r2, #1
 800ecd0:	4628      	mov	r0, r5
 800ecd2:	f001 fd51 	bl	8010778 <ucdr_check_final_buffer_behavior_array>
 800ecd6:	1bbb      	subs	r3, r7, r6
 800ecd8:	4604      	mov	r4, r0
 800ecda:	2800      	cmp	r0, #0
 800ecdc:	d1e9      	bne.n	800ecb2 <ucdr_deserialize_endian_array_char+0x16>
 800ecde:	2301      	movs	r3, #1
 800ece0:	7da8      	ldrb	r0, [r5, #22]
 800ece2:	756b      	strb	r3, [r5, #21]
 800ece4:	4058      	eors	r0, r3
 800ece6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecea:	463a      	mov	r2, r7
 800ecec:	68a9      	ldr	r1, [r5, #8]
 800ecee:	4640      	mov	r0, r8
 800ecf0:	f00d fe11 	bl	801c916 <memcpy>
 800ecf4:	68aa      	ldr	r2, [r5, #8]
 800ecf6:	692b      	ldr	r3, [r5, #16]
 800ecf8:	443a      	add	r2, r7
 800ecfa:	443b      	add	r3, r7
 800ecfc:	60aa      	str	r2, [r5, #8]
 800ecfe:	612b      	str	r3, [r5, #16]
 800ed00:	e7ed      	b.n	800ecde <ucdr_deserialize_endian_array_char+0x42>
 800ed02:	bf00      	nop

0800ed04 <ucdr_serialize_array_uint8_t>:
 800ed04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed08:	4688      	mov	r8, r1
 800ed0a:	4611      	mov	r1, r2
 800ed0c:	4617      	mov	r7, r2
 800ed0e:	4605      	mov	r5, r0
 800ed10:	f001 fca8 	bl	8010664 <ucdr_check_buffer_available_for>
 800ed14:	b9e0      	cbnz	r0, 800ed50 <ucdr_serialize_array_uint8_t+0x4c>
 800ed16:	463e      	mov	r6, r7
 800ed18:	e00b      	b.n	800ed32 <ucdr_serialize_array_uint8_t+0x2e>
 800ed1a:	4441      	add	r1, r8
 800ed1c:	68a8      	ldr	r0, [r5, #8]
 800ed1e:	4622      	mov	r2, r4
 800ed20:	1b36      	subs	r6, r6, r4
 800ed22:	f00d fdf8 	bl	801c916 <memcpy>
 800ed26:	68ab      	ldr	r3, [r5, #8]
 800ed28:	6928      	ldr	r0, [r5, #16]
 800ed2a:	4423      	add	r3, r4
 800ed2c:	4420      	add	r0, r4
 800ed2e:	60ab      	str	r3, [r5, #8]
 800ed30:	6128      	str	r0, [r5, #16]
 800ed32:	4631      	mov	r1, r6
 800ed34:	2201      	movs	r2, #1
 800ed36:	4628      	mov	r0, r5
 800ed38:	f001 fd1e 	bl	8010778 <ucdr_check_final_buffer_behavior_array>
 800ed3c:	1bb9      	subs	r1, r7, r6
 800ed3e:	4604      	mov	r4, r0
 800ed40:	2800      	cmp	r0, #0
 800ed42:	d1ea      	bne.n	800ed1a <ucdr_serialize_array_uint8_t+0x16>
 800ed44:	2301      	movs	r3, #1
 800ed46:	7da8      	ldrb	r0, [r5, #22]
 800ed48:	756b      	strb	r3, [r5, #21]
 800ed4a:	4058      	eors	r0, r3
 800ed4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed50:	463a      	mov	r2, r7
 800ed52:	4641      	mov	r1, r8
 800ed54:	68a8      	ldr	r0, [r5, #8]
 800ed56:	f00d fdde 	bl	801c916 <memcpy>
 800ed5a:	68aa      	ldr	r2, [r5, #8]
 800ed5c:	692b      	ldr	r3, [r5, #16]
 800ed5e:	443a      	add	r2, r7
 800ed60:	443b      	add	r3, r7
 800ed62:	60aa      	str	r2, [r5, #8]
 800ed64:	612b      	str	r3, [r5, #16]
 800ed66:	e7ed      	b.n	800ed44 <ucdr_serialize_array_uint8_t+0x40>

0800ed68 <ucdr_serialize_endian_array_uint8_t>:
 800ed68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed6c:	4619      	mov	r1, r3
 800ed6e:	461f      	mov	r7, r3
 800ed70:	4605      	mov	r5, r0
 800ed72:	4690      	mov	r8, r2
 800ed74:	f001 fc76 	bl	8010664 <ucdr_check_buffer_available_for>
 800ed78:	b9e0      	cbnz	r0, 800edb4 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800ed7a:	463e      	mov	r6, r7
 800ed7c:	e00b      	b.n	800ed96 <ucdr_serialize_endian_array_uint8_t+0x2e>
 800ed7e:	4441      	add	r1, r8
 800ed80:	68a8      	ldr	r0, [r5, #8]
 800ed82:	4622      	mov	r2, r4
 800ed84:	1b36      	subs	r6, r6, r4
 800ed86:	f00d fdc6 	bl	801c916 <memcpy>
 800ed8a:	68ab      	ldr	r3, [r5, #8]
 800ed8c:	6928      	ldr	r0, [r5, #16]
 800ed8e:	4423      	add	r3, r4
 800ed90:	4420      	add	r0, r4
 800ed92:	60ab      	str	r3, [r5, #8]
 800ed94:	6128      	str	r0, [r5, #16]
 800ed96:	4631      	mov	r1, r6
 800ed98:	2201      	movs	r2, #1
 800ed9a:	4628      	mov	r0, r5
 800ed9c:	f001 fcec 	bl	8010778 <ucdr_check_final_buffer_behavior_array>
 800eda0:	1bb9      	subs	r1, r7, r6
 800eda2:	4604      	mov	r4, r0
 800eda4:	2800      	cmp	r0, #0
 800eda6:	d1ea      	bne.n	800ed7e <ucdr_serialize_endian_array_uint8_t+0x16>
 800eda8:	2301      	movs	r3, #1
 800edaa:	7da8      	ldrb	r0, [r5, #22]
 800edac:	756b      	strb	r3, [r5, #21]
 800edae:	4058      	eors	r0, r3
 800edb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edb4:	463a      	mov	r2, r7
 800edb6:	4641      	mov	r1, r8
 800edb8:	68a8      	ldr	r0, [r5, #8]
 800edba:	f00d fdac 	bl	801c916 <memcpy>
 800edbe:	68aa      	ldr	r2, [r5, #8]
 800edc0:	692b      	ldr	r3, [r5, #16]
 800edc2:	443a      	add	r2, r7
 800edc4:	443b      	add	r3, r7
 800edc6:	60aa      	str	r2, [r5, #8]
 800edc8:	612b      	str	r3, [r5, #16]
 800edca:	e7ed      	b.n	800eda8 <ucdr_serialize_endian_array_uint8_t+0x40>

0800edcc <ucdr_deserialize_array_uint8_t>:
 800edcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edd0:	4688      	mov	r8, r1
 800edd2:	4611      	mov	r1, r2
 800edd4:	4617      	mov	r7, r2
 800edd6:	4605      	mov	r5, r0
 800edd8:	f001 fc44 	bl	8010664 <ucdr_check_buffer_available_for>
 800eddc:	b9e8      	cbnz	r0, 800ee1a <ucdr_deserialize_array_uint8_t+0x4e>
 800edde:	463e      	mov	r6, r7
 800ede0:	e00c      	b.n	800edfc <ucdr_deserialize_array_uint8_t+0x30>
 800ede2:	eb08 0003 	add.w	r0, r8, r3
 800ede6:	68a9      	ldr	r1, [r5, #8]
 800ede8:	4622      	mov	r2, r4
 800edea:	1b36      	subs	r6, r6, r4
 800edec:	f00d fd93 	bl	801c916 <memcpy>
 800edf0:	68ab      	ldr	r3, [r5, #8]
 800edf2:	6928      	ldr	r0, [r5, #16]
 800edf4:	4423      	add	r3, r4
 800edf6:	4420      	add	r0, r4
 800edf8:	60ab      	str	r3, [r5, #8]
 800edfa:	6128      	str	r0, [r5, #16]
 800edfc:	4631      	mov	r1, r6
 800edfe:	2201      	movs	r2, #1
 800ee00:	4628      	mov	r0, r5
 800ee02:	f001 fcb9 	bl	8010778 <ucdr_check_final_buffer_behavior_array>
 800ee06:	1bbb      	subs	r3, r7, r6
 800ee08:	4604      	mov	r4, r0
 800ee0a:	2800      	cmp	r0, #0
 800ee0c:	d1e9      	bne.n	800ede2 <ucdr_deserialize_array_uint8_t+0x16>
 800ee0e:	2301      	movs	r3, #1
 800ee10:	7da8      	ldrb	r0, [r5, #22]
 800ee12:	756b      	strb	r3, [r5, #21]
 800ee14:	4058      	eors	r0, r3
 800ee16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee1a:	463a      	mov	r2, r7
 800ee1c:	68a9      	ldr	r1, [r5, #8]
 800ee1e:	4640      	mov	r0, r8
 800ee20:	f00d fd79 	bl	801c916 <memcpy>
 800ee24:	68aa      	ldr	r2, [r5, #8]
 800ee26:	692b      	ldr	r3, [r5, #16]
 800ee28:	443a      	add	r2, r7
 800ee2a:	443b      	add	r3, r7
 800ee2c:	60aa      	str	r2, [r5, #8]
 800ee2e:	612b      	str	r3, [r5, #16]
 800ee30:	e7ed      	b.n	800ee0e <ucdr_deserialize_array_uint8_t+0x42>
 800ee32:	bf00      	nop

0800ee34 <ucdr_deserialize_endian_array_uint8_t>:
 800ee34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee38:	4619      	mov	r1, r3
 800ee3a:	461f      	mov	r7, r3
 800ee3c:	4605      	mov	r5, r0
 800ee3e:	4690      	mov	r8, r2
 800ee40:	f001 fc10 	bl	8010664 <ucdr_check_buffer_available_for>
 800ee44:	b9e8      	cbnz	r0, 800ee82 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 800ee46:	463e      	mov	r6, r7
 800ee48:	e00c      	b.n	800ee64 <ucdr_deserialize_endian_array_uint8_t+0x30>
 800ee4a:	eb08 0003 	add.w	r0, r8, r3
 800ee4e:	68a9      	ldr	r1, [r5, #8]
 800ee50:	4622      	mov	r2, r4
 800ee52:	1b36      	subs	r6, r6, r4
 800ee54:	f00d fd5f 	bl	801c916 <memcpy>
 800ee58:	68ab      	ldr	r3, [r5, #8]
 800ee5a:	6928      	ldr	r0, [r5, #16]
 800ee5c:	4423      	add	r3, r4
 800ee5e:	4420      	add	r0, r4
 800ee60:	60ab      	str	r3, [r5, #8]
 800ee62:	6128      	str	r0, [r5, #16]
 800ee64:	4631      	mov	r1, r6
 800ee66:	2201      	movs	r2, #1
 800ee68:	4628      	mov	r0, r5
 800ee6a:	f001 fc85 	bl	8010778 <ucdr_check_final_buffer_behavior_array>
 800ee6e:	1bbb      	subs	r3, r7, r6
 800ee70:	4604      	mov	r4, r0
 800ee72:	2800      	cmp	r0, #0
 800ee74:	d1e9      	bne.n	800ee4a <ucdr_deserialize_endian_array_uint8_t+0x16>
 800ee76:	2301      	movs	r3, #1
 800ee78:	7da8      	ldrb	r0, [r5, #22]
 800ee7a:	756b      	strb	r3, [r5, #21]
 800ee7c:	4058      	eors	r0, r3
 800ee7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee82:	463a      	mov	r2, r7
 800ee84:	68a9      	ldr	r1, [r5, #8]
 800ee86:	4640      	mov	r0, r8
 800ee88:	f00d fd45 	bl	801c916 <memcpy>
 800ee8c:	68aa      	ldr	r2, [r5, #8]
 800ee8e:	692b      	ldr	r3, [r5, #16]
 800ee90:	443a      	add	r2, r7
 800ee92:	443b      	add	r3, r7
 800ee94:	60aa      	str	r2, [r5, #8]
 800ee96:	612b      	str	r3, [r5, #16]
 800ee98:	e7ed      	b.n	800ee76 <ucdr_deserialize_endian_array_uint8_t+0x42>
 800ee9a:	bf00      	nop

0800ee9c <ucdr_serialize_array_int16_t>:
 800ee9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eea0:	4604      	mov	r4, r0
 800eea2:	460e      	mov	r6, r1
 800eea4:	2102      	movs	r1, #2
 800eea6:	4617      	mov	r7, r2
 800eea8:	f001 fc3c 	bl	8010724 <ucdr_buffer_alignment>
 800eeac:	4601      	mov	r1, r0
 800eeae:	4620      	mov	r0, r4
 800eeb0:	7d65      	ldrb	r5, [r4, #21]
 800eeb2:	f001 fc7f 	bl	80107b4 <ucdr_advance_buffer>
 800eeb6:	7d21      	ldrb	r1, [r4, #20]
 800eeb8:	7565      	strb	r5, [r4, #21]
 800eeba:	2901      	cmp	r1, #1
 800eebc:	d011      	beq.n	800eee2 <ucdr_serialize_array_int16_t+0x46>
 800eebe:	b15f      	cbz	r7, 800eed8 <ucdr_serialize_array_int16_t+0x3c>
 800eec0:	3e02      	subs	r6, #2
 800eec2:	2500      	movs	r5, #0
 800eec4:	e000      	b.n	800eec8 <ucdr_serialize_array_int16_t+0x2c>
 800eec6:	7d21      	ldrb	r1, [r4, #20]
 800eec8:	3501      	adds	r5, #1
 800eeca:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
 800eece:	4620      	mov	r0, r4
 800eed0:	f000 fe78 	bl	800fbc4 <ucdr_serialize_endian_int16_t>
 800eed4:	42af      	cmp	r7, r5
 800eed6:	d1f6      	bne.n	800eec6 <ucdr_serialize_array_int16_t+0x2a>
 800eed8:	7da0      	ldrb	r0, [r4, #22]
 800eeda:	f080 0001 	eor.w	r0, r0, #1
 800eede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eee2:	007f      	lsls	r7, r7, #1
 800eee4:	4620      	mov	r0, r4
 800eee6:	4639      	mov	r1, r7
 800eee8:	f001 fbbc 	bl	8010664 <ucdr_check_buffer_available_for>
 800eeec:	b9f8      	cbnz	r0, 800ef2e <ucdr_serialize_array_int16_t+0x92>
 800eeee:	46b8      	mov	r8, r7
 800eef0:	e00c      	b.n	800ef0c <ucdr_serialize_array_int16_t+0x70>
 800eef2:	462a      	mov	r2, r5
 800eef4:	4431      	add	r1, r6
 800eef6:	68a0      	ldr	r0, [r4, #8]
 800eef8:	eba8 0805 	sub.w	r8, r8, r5
 800eefc:	f00d fd0b 	bl	801c916 <memcpy>
 800ef00:	68a2      	ldr	r2, [r4, #8]
 800ef02:	6923      	ldr	r3, [r4, #16]
 800ef04:	442a      	add	r2, r5
 800ef06:	442b      	add	r3, r5
 800ef08:	60a2      	str	r2, [r4, #8]
 800ef0a:	6123      	str	r3, [r4, #16]
 800ef0c:	4641      	mov	r1, r8
 800ef0e:	2202      	movs	r2, #2
 800ef10:	4620      	mov	r0, r4
 800ef12:	f001 fc31 	bl	8010778 <ucdr_check_final_buffer_behavior_array>
 800ef16:	eba7 0108 	sub.w	r1, r7, r8
 800ef1a:	4605      	mov	r5, r0
 800ef1c:	2800      	cmp	r0, #0
 800ef1e:	d1e8      	bne.n	800eef2 <ucdr_serialize_array_int16_t+0x56>
 800ef20:	2302      	movs	r3, #2
 800ef22:	7da0      	ldrb	r0, [r4, #22]
 800ef24:	7563      	strb	r3, [r4, #21]
 800ef26:	f080 0001 	eor.w	r0, r0, #1
 800ef2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef2e:	463a      	mov	r2, r7
 800ef30:	4631      	mov	r1, r6
 800ef32:	68a0      	ldr	r0, [r4, #8]
 800ef34:	f00d fcef 	bl	801c916 <memcpy>
 800ef38:	68a2      	ldr	r2, [r4, #8]
 800ef3a:	6923      	ldr	r3, [r4, #16]
 800ef3c:	443a      	add	r2, r7
 800ef3e:	441f      	add	r7, r3
 800ef40:	60a2      	str	r2, [r4, #8]
 800ef42:	6127      	str	r7, [r4, #16]
 800ef44:	e7ec      	b.n	800ef20 <ucdr_serialize_array_int16_t+0x84>
 800ef46:	bf00      	nop

0800ef48 <ucdr_deserialize_array_int16_t>:
 800ef48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef4c:	4604      	mov	r4, r0
 800ef4e:	460e      	mov	r6, r1
 800ef50:	2102      	movs	r1, #2
 800ef52:	4617      	mov	r7, r2
 800ef54:	f001 fbe6 	bl	8010724 <ucdr_buffer_alignment>
 800ef58:	4601      	mov	r1, r0
 800ef5a:	4620      	mov	r0, r4
 800ef5c:	7d65      	ldrb	r5, [r4, #21]
 800ef5e:	f001 fc29 	bl	80107b4 <ucdr_advance_buffer>
 800ef62:	7d21      	ldrb	r1, [r4, #20]
 800ef64:	7565      	strb	r5, [r4, #21]
 800ef66:	2901      	cmp	r1, #1
 800ef68:	d010      	beq.n	800ef8c <ucdr_deserialize_array_int16_t+0x44>
 800ef6a:	b157      	cbz	r7, 800ef82 <ucdr_deserialize_array_int16_t+0x3a>
 800ef6c:	2500      	movs	r5, #0
 800ef6e:	e000      	b.n	800ef72 <ucdr_deserialize_array_int16_t+0x2a>
 800ef70:	7d21      	ldrb	r1, [r4, #20]
 800ef72:	3501      	adds	r5, #1
 800ef74:	4632      	mov	r2, r6
 800ef76:	4620      	mov	r0, r4
 800ef78:	3602      	adds	r6, #2
 800ef7a:	f000 ff17 	bl	800fdac <ucdr_deserialize_endian_int16_t>
 800ef7e:	42af      	cmp	r7, r5
 800ef80:	d1f6      	bne.n	800ef70 <ucdr_deserialize_array_int16_t+0x28>
 800ef82:	7da0      	ldrb	r0, [r4, #22]
 800ef84:	f080 0001 	eor.w	r0, r0, #1
 800ef88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef8c:	007f      	lsls	r7, r7, #1
 800ef8e:	4620      	mov	r0, r4
 800ef90:	4639      	mov	r1, r7
 800ef92:	f001 fb67 	bl	8010664 <ucdr_check_buffer_available_for>
 800ef96:	b9f8      	cbnz	r0, 800efd8 <ucdr_deserialize_array_int16_t+0x90>
 800ef98:	46b8      	mov	r8, r7
 800ef9a:	e00c      	b.n	800efb6 <ucdr_deserialize_array_int16_t+0x6e>
 800ef9c:	18f0      	adds	r0, r6, r3
 800ef9e:	462a      	mov	r2, r5
 800efa0:	68a1      	ldr	r1, [r4, #8]
 800efa2:	eba8 0805 	sub.w	r8, r8, r5
 800efa6:	f00d fcb6 	bl	801c916 <memcpy>
 800efaa:	68a2      	ldr	r2, [r4, #8]
 800efac:	6923      	ldr	r3, [r4, #16]
 800efae:	442a      	add	r2, r5
 800efb0:	442b      	add	r3, r5
 800efb2:	60a2      	str	r2, [r4, #8]
 800efb4:	6123      	str	r3, [r4, #16]
 800efb6:	4641      	mov	r1, r8
 800efb8:	2202      	movs	r2, #2
 800efba:	4620      	mov	r0, r4
 800efbc:	f001 fbdc 	bl	8010778 <ucdr_check_final_buffer_behavior_array>
 800efc0:	eba7 0308 	sub.w	r3, r7, r8
 800efc4:	4605      	mov	r5, r0
 800efc6:	2800      	cmp	r0, #0
 800efc8:	d1e8      	bne.n	800ef9c <ucdr_deserialize_array_int16_t+0x54>
 800efca:	2302      	movs	r3, #2
 800efcc:	7da0      	ldrb	r0, [r4, #22]
 800efce:	7563      	strb	r3, [r4, #21]
 800efd0:	f080 0001 	eor.w	r0, r0, #1
 800efd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efd8:	463a      	mov	r2, r7
 800efda:	68a1      	ldr	r1, [r4, #8]
 800efdc:	4630      	mov	r0, r6
 800efde:	f00d fc9a 	bl	801c916 <memcpy>
 800efe2:	68a2      	ldr	r2, [r4, #8]
 800efe4:	6923      	ldr	r3, [r4, #16]
 800efe6:	443a      	add	r2, r7
 800efe8:	441f      	add	r7, r3
 800efea:	60a2      	str	r2, [r4, #8]
 800efec:	6127      	str	r7, [r4, #16]
 800efee:	e7ec      	b.n	800efca <ucdr_deserialize_array_int16_t+0x82>

0800eff0 <ucdr_serialize_bool>:
 800eff0:	b538      	push	{r3, r4, r5, lr}
 800eff2:	460d      	mov	r5, r1
 800eff4:	2101      	movs	r1, #1
 800eff6:	4604      	mov	r4, r0
 800eff8:	f001 fb40 	bl	801067c <ucdr_check_final_buffer_behavior>
 800effc:	b148      	cbz	r0, 800f012 <ucdr_serialize_bool+0x22>
 800effe:	68a3      	ldr	r3, [r4, #8]
 800f000:	2101      	movs	r1, #1
 800f002:	701d      	strb	r5, [r3, #0]
 800f004:	68a2      	ldr	r2, [r4, #8]
 800f006:	6923      	ldr	r3, [r4, #16]
 800f008:	440a      	add	r2, r1
 800f00a:	7561      	strb	r1, [r4, #21]
 800f00c:	440b      	add	r3, r1
 800f00e:	60a2      	str	r2, [r4, #8]
 800f010:	6123      	str	r3, [r4, #16]
 800f012:	7da0      	ldrb	r0, [r4, #22]
 800f014:	f080 0001 	eor.w	r0, r0, #1
 800f018:	bd38      	pop	{r3, r4, r5, pc}
 800f01a:	bf00      	nop

0800f01c <ucdr_deserialize_bool>:
 800f01c:	b538      	push	{r3, r4, r5, lr}
 800f01e:	460d      	mov	r5, r1
 800f020:	2101      	movs	r1, #1
 800f022:	4604      	mov	r4, r0
 800f024:	f001 fb2a 	bl	801067c <ucdr_check_final_buffer_behavior>
 800f028:	b160      	cbz	r0, 800f044 <ucdr_deserialize_bool+0x28>
 800f02a:	68a2      	ldr	r2, [r4, #8]
 800f02c:	2101      	movs	r1, #1
 800f02e:	6923      	ldr	r3, [r4, #16]
 800f030:	f812 0b01 	ldrb.w	r0, [r2], #1
 800f034:	440b      	add	r3, r1
 800f036:	3800      	subs	r0, #0
 800f038:	bf18      	it	ne
 800f03a:	2001      	movne	r0, #1
 800f03c:	7028      	strb	r0, [r5, #0]
 800f03e:	60a2      	str	r2, [r4, #8]
 800f040:	6123      	str	r3, [r4, #16]
 800f042:	7561      	strb	r1, [r4, #21]
 800f044:	7da0      	ldrb	r0, [r4, #22]
 800f046:	f080 0001 	eor.w	r0, r0, #1
 800f04a:	bd38      	pop	{r3, r4, r5, pc}

0800f04c <ucdr_serialize_uint8_t>:
 800f04c:	b538      	push	{r3, r4, r5, lr}
 800f04e:	460d      	mov	r5, r1
 800f050:	2101      	movs	r1, #1
 800f052:	4604      	mov	r4, r0
 800f054:	f001 fb12 	bl	801067c <ucdr_check_final_buffer_behavior>
 800f058:	b148      	cbz	r0, 800f06e <ucdr_serialize_uint8_t+0x22>
 800f05a:	68a3      	ldr	r3, [r4, #8]
 800f05c:	2101      	movs	r1, #1
 800f05e:	701d      	strb	r5, [r3, #0]
 800f060:	68a2      	ldr	r2, [r4, #8]
 800f062:	6923      	ldr	r3, [r4, #16]
 800f064:	440a      	add	r2, r1
 800f066:	7561      	strb	r1, [r4, #21]
 800f068:	440b      	add	r3, r1
 800f06a:	60a2      	str	r2, [r4, #8]
 800f06c:	6123      	str	r3, [r4, #16]
 800f06e:	7da0      	ldrb	r0, [r4, #22]
 800f070:	f080 0001 	eor.w	r0, r0, #1
 800f074:	bd38      	pop	{r3, r4, r5, pc}
 800f076:	bf00      	nop

0800f078 <ucdr_deserialize_uint8_t>:
 800f078:	b538      	push	{r3, r4, r5, lr}
 800f07a:	460d      	mov	r5, r1
 800f07c:	2101      	movs	r1, #1
 800f07e:	4604      	mov	r4, r0
 800f080:	f001 fafc 	bl	801067c <ucdr_check_final_buffer_behavior>
 800f084:	b150      	cbz	r0, 800f09c <ucdr_deserialize_uint8_t+0x24>
 800f086:	68a3      	ldr	r3, [r4, #8]
 800f088:	2101      	movs	r1, #1
 800f08a:	781b      	ldrb	r3, [r3, #0]
 800f08c:	702b      	strb	r3, [r5, #0]
 800f08e:	68a2      	ldr	r2, [r4, #8]
 800f090:	6923      	ldr	r3, [r4, #16]
 800f092:	440a      	add	r2, r1
 800f094:	7561      	strb	r1, [r4, #21]
 800f096:	440b      	add	r3, r1
 800f098:	60a2      	str	r2, [r4, #8]
 800f09a:	6123      	str	r3, [r4, #16]
 800f09c:	7da0      	ldrb	r0, [r4, #22]
 800f09e:	f080 0001 	eor.w	r0, r0, #1
 800f0a2:	bd38      	pop	{r3, r4, r5, pc}

0800f0a4 <ucdr_serialize_uint16_t>:
 800f0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0a8:	460b      	mov	r3, r1
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	4604      	mov	r4, r0
 800f0ae:	2102      	movs	r1, #2
 800f0b0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f0b4:	f001 fb36 	bl	8010724 <ucdr_buffer_alignment>
 800f0b8:	4601      	mov	r1, r0
 800f0ba:	4620      	mov	r0, r4
 800f0bc:	7d67      	ldrb	r7, [r4, #21]
 800f0be:	f001 fb79 	bl	80107b4 <ucdr_advance_buffer>
 800f0c2:	2102      	movs	r1, #2
 800f0c4:	4620      	mov	r0, r4
 800f0c6:	f001 facd 	bl	8010664 <ucdr_check_buffer_available_for>
 800f0ca:	bb78      	cbnz	r0, 800f12c <ucdr_serialize_uint16_t+0x88>
 800f0cc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f0d0:	42ab      	cmp	r3, r5
 800f0d2:	d926      	bls.n	800f122 <ucdr_serialize_uint16_t+0x7e>
 800f0d4:	1b5e      	subs	r6, r3, r5
 800f0d6:	60a3      	str	r3, [r4, #8]
 800f0d8:	6923      	ldr	r3, [r4, #16]
 800f0da:	4620      	mov	r0, r4
 800f0dc:	f1c6 0802 	rsb	r8, r6, #2
 800f0e0:	4433      	add	r3, r6
 800f0e2:	4641      	mov	r1, r8
 800f0e4:	6123      	str	r3, [r4, #16]
 800f0e6:	f001 fac9 	bl	801067c <ucdr_check_final_buffer_behavior>
 800f0ea:	2800      	cmp	r0, #0
 800f0ec:	d03b      	beq.n	800f166 <ucdr_serialize_uint16_t+0xc2>
 800f0ee:	7d23      	ldrb	r3, [r4, #20]
 800f0f0:	2b01      	cmp	r3, #1
 800f0f2:	d04a      	beq.n	800f18a <ucdr_serialize_uint16_t+0xe6>
 800f0f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f0f8:	702b      	strb	r3, [r5, #0]
 800f0fa:	2e00      	cmp	r6, #0
 800f0fc:	d040      	beq.n	800f180 <ucdr_serialize_uint16_t+0xdc>
 800f0fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f102:	706b      	strb	r3, [r5, #1]
 800f104:	6923      	ldr	r3, [r4, #16]
 800f106:	2102      	movs	r1, #2
 800f108:	68a2      	ldr	r2, [r4, #8]
 800f10a:	3302      	adds	r3, #2
 800f10c:	7da0      	ldrb	r0, [r4, #22]
 800f10e:	4442      	add	r2, r8
 800f110:	7561      	strb	r1, [r4, #21]
 800f112:	1b9e      	subs	r6, r3, r6
 800f114:	f080 0001 	eor.w	r0, r0, #1
 800f118:	60a2      	str	r2, [r4, #8]
 800f11a:	6126      	str	r6, [r4, #16]
 800f11c:	b002      	add	sp, #8
 800f11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f122:	2102      	movs	r1, #2
 800f124:	4620      	mov	r0, r4
 800f126:	f001 faa9 	bl	801067c <ucdr_check_final_buffer_behavior>
 800f12a:	b190      	cbz	r0, 800f152 <ucdr_serialize_uint16_t+0xae>
 800f12c:	7d23      	ldrb	r3, [r4, #20]
 800f12e:	2b01      	cmp	r3, #1
 800f130:	68a3      	ldr	r3, [r4, #8]
 800f132:	d014      	beq.n	800f15e <ucdr_serialize_uint16_t+0xba>
 800f134:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f138:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f13c:	7019      	strb	r1, [r3, #0]
 800f13e:	68a3      	ldr	r3, [r4, #8]
 800f140:	705a      	strb	r2, [r3, #1]
 800f142:	2102      	movs	r1, #2
 800f144:	68a2      	ldr	r2, [r4, #8]
 800f146:	6923      	ldr	r3, [r4, #16]
 800f148:	440a      	add	r2, r1
 800f14a:	7561      	strb	r1, [r4, #21]
 800f14c:	440b      	add	r3, r1
 800f14e:	60a2      	str	r2, [r4, #8]
 800f150:	6123      	str	r3, [r4, #16]
 800f152:	7da0      	ldrb	r0, [r4, #22]
 800f154:	f080 0001 	eor.w	r0, r0, #1
 800f158:	b002      	add	sp, #8
 800f15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f15e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f162:	801a      	strh	r2, [r3, #0]
 800f164:	e7ed      	b.n	800f142 <ucdr_serialize_uint16_t+0x9e>
 800f166:	68a2      	ldr	r2, [r4, #8]
 800f168:	6923      	ldr	r3, [r4, #16]
 800f16a:	7da0      	ldrb	r0, [r4, #22]
 800f16c:	1b92      	subs	r2, r2, r6
 800f16e:	1b9b      	subs	r3, r3, r6
 800f170:	7567      	strb	r7, [r4, #21]
 800f172:	f080 0001 	eor.w	r0, r0, #1
 800f176:	60a2      	str	r2, [r4, #8]
 800f178:	6123      	str	r3, [r4, #16]
 800f17a:	b002      	add	sp, #8
 800f17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f180:	68a3      	ldr	r3, [r4, #8]
 800f182:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f186:	701a      	strb	r2, [r3, #0]
 800f188:	e7bc      	b.n	800f104 <ucdr_serialize_uint16_t+0x60>
 800f18a:	4628      	mov	r0, r5
 800f18c:	f10d 0506 	add.w	r5, sp, #6
 800f190:	4632      	mov	r2, r6
 800f192:	4629      	mov	r1, r5
 800f194:	f00d fbbf 	bl	801c916 <memcpy>
 800f198:	4642      	mov	r2, r8
 800f19a:	19a9      	adds	r1, r5, r6
 800f19c:	68a0      	ldr	r0, [r4, #8]
 800f19e:	f00d fbba 	bl	801c916 <memcpy>
 800f1a2:	e7af      	b.n	800f104 <ucdr_serialize_uint16_t+0x60>

0800f1a4 <ucdr_serialize_endian_uint16_t>:
 800f1a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f1a8:	4604      	mov	r4, r0
 800f1aa:	b083      	sub	sp, #12
 800f1ac:	460d      	mov	r5, r1
 800f1ae:	2102      	movs	r1, #2
 800f1b0:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f1b4:	f001 fab6 	bl	8010724 <ucdr_buffer_alignment>
 800f1b8:	4601      	mov	r1, r0
 800f1ba:	4620      	mov	r0, r4
 800f1bc:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f1c0:	f001 faf8 	bl	80107b4 <ucdr_advance_buffer>
 800f1c4:	2102      	movs	r1, #2
 800f1c6:	4620      	mov	r0, r4
 800f1c8:	f001 fa4c 	bl	8010664 <ucdr_check_buffer_available_for>
 800f1cc:	bb70      	cbnz	r0, 800f22c <ucdr_serialize_endian_uint16_t+0x88>
 800f1ce:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f1d2:	42be      	cmp	r6, r7
 800f1d4:	d925      	bls.n	800f222 <ucdr_serialize_endian_uint16_t+0x7e>
 800f1d6:	6923      	ldr	r3, [r4, #16]
 800f1d8:	4620      	mov	r0, r4
 800f1da:	60a6      	str	r6, [r4, #8]
 800f1dc:	1bf6      	subs	r6, r6, r7
 800f1de:	4433      	add	r3, r6
 800f1e0:	f1c6 0902 	rsb	r9, r6, #2
 800f1e4:	6123      	str	r3, [r4, #16]
 800f1e6:	4649      	mov	r1, r9
 800f1e8:	f001 fa48 	bl	801067c <ucdr_check_final_buffer_behavior>
 800f1ec:	2800      	cmp	r0, #0
 800f1ee:	d039      	beq.n	800f264 <ucdr_serialize_endian_uint16_t+0xc0>
 800f1f0:	2d01      	cmp	r5, #1
 800f1f2:	d04a      	beq.n	800f28a <ucdr_serialize_endian_uint16_t+0xe6>
 800f1f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f1f8:	703b      	strb	r3, [r7, #0]
 800f1fa:	2e00      	cmp	r6, #0
 800f1fc:	d040      	beq.n	800f280 <ucdr_serialize_endian_uint16_t+0xdc>
 800f1fe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f202:	707b      	strb	r3, [r7, #1]
 800f204:	6923      	ldr	r3, [r4, #16]
 800f206:	2102      	movs	r1, #2
 800f208:	68a2      	ldr	r2, [r4, #8]
 800f20a:	7da0      	ldrb	r0, [r4, #22]
 800f20c:	3302      	adds	r3, #2
 800f20e:	444a      	add	r2, r9
 800f210:	7561      	strb	r1, [r4, #21]
 800f212:	1b9b      	subs	r3, r3, r6
 800f214:	f080 0001 	eor.w	r0, r0, #1
 800f218:	60a2      	str	r2, [r4, #8]
 800f21a:	6123      	str	r3, [r4, #16]
 800f21c:	b003      	add	sp, #12
 800f21e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f222:	2102      	movs	r1, #2
 800f224:	4620      	mov	r0, r4
 800f226:	f001 fa29 	bl	801067c <ucdr_check_final_buffer_behavior>
 800f22a:	b188      	cbz	r0, 800f250 <ucdr_serialize_endian_uint16_t+0xac>
 800f22c:	2d01      	cmp	r5, #1
 800f22e:	68a3      	ldr	r3, [r4, #8]
 800f230:	d014      	beq.n	800f25c <ucdr_serialize_endian_uint16_t+0xb8>
 800f232:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f236:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f23a:	7019      	strb	r1, [r3, #0]
 800f23c:	68a3      	ldr	r3, [r4, #8]
 800f23e:	705a      	strb	r2, [r3, #1]
 800f240:	2102      	movs	r1, #2
 800f242:	68a2      	ldr	r2, [r4, #8]
 800f244:	6923      	ldr	r3, [r4, #16]
 800f246:	440a      	add	r2, r1
 800f248:	7561      	strb	r1, [r4, #21]
 800f24a:	440b      	add	r3, r1
 800f24c:	60a2      	str	r2, [r4, #8]
 800f24e:	6123      	str	r3, [r4, #16]
 800f250:	7da0      	ldrb	r0, [r4, #22]
 800f252:	f080 0001 	eor.w	r0, r0, #1
 800f256:	b003      	add	sp, #12
 800f258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f25c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f260:	801a      	strh	r2, [r3, #0]
 800f262:	e7ed      	b.n	800f240 <ucdr_serialize_endian_uint16_t+0x9c>
 800f264:	68a2      	ldr	r2, [r4, #8]
 800f266:	6923      	ldr	r3, [r4, #16]
 800f268:	7da0      	ldrb	r0, [r4, #22]
 800f26a:	1b92      	subs	r2, r2, r6
 800f26c:	1b9b      	subs	r3, r3, r6
 800f26e:	f884 8015 	strb.w	r8, [r4, #21]
 800f272:	f080 0001 	eor.w	r0, r0, #1
 800f276:	60a2      	str	r2, [r4, #8]
 800f278:	6123      	str	r3, [r4, #16]
 800f27a:	b003      	add	sp, #12
 800f27c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f280:	68a3      	ldr	r3, [r4, #8]
 800f282:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f286:	701a      	strb	r2, [r3, #0]
 800f288:	e7bc      	b.n	800f204 <ucdr_serialize_endian_uint16_t+0x60>
 800f28a:	f10d 0506 	add.w	r5, sp, #6
 800f28e:	4632      	mov	r2, r6
 800f290:	4638      	mov	r0, r7
 800f292:	4629      	mov	r1, r5
 800f294:	f00d fb3f 	bl	801c916 <memcpy>
 800f298:	464a      	mov	r2, r9
 800f29a:	19a9      	adds	r1, r5, r6
 800f29c:	68a0      	ldr	r0, [r4, #8]
 800f29e:	f00d fb3a 	bl	801c916 <memcpy>
 800f2a2:	e7af      	b.n	800f204 <ucdr_serialize_endian_uint16_t+0x60>

0800f2a4 <ucdr_deserialize_uint16_t>:
 800f2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2a8:	4604      	mov	r4, r0
 800f2aa:	460d      	mov	r5, r1
 800f2ac:	2102      	movs	r1, #2
 800f2ae:	f001 fa39 	bl	8010724 <ucdr_buffer_alignment>
 800f2b2:	4601      	mov	r1, r0
 800f2b4:	4620      	mov	r0, r4
 800f2b6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f2ba:	f001 fa7b 	bl	80107b4 <ucdr_advance_buffer>
 800f2be:	2102      	movs	r1, #2
 800f2c0:	4620      	mov	r0, r4
 800f2c2:	f001 f9cf 	bl	8010664 <ucdr_check_buffer_available_for>
 800f2c6:	bb60      	cbnz	r0, 800f322 <ucdr_deserialize_uint16_t+0x7e>
 800f2c8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f2cc:	42be      	cmp	r6, r7
 800f2ce:	d923      	bls.n	800f318 <ucdr_deserialize_uint16_t+0x74>
 800f2d0:	6923      	ldr	r3, [r4, #16]
 800f2d2:	4620      	mov	r0, r4
 800f2d4:	60a6      	str	r6, [r4, #8]
 800f2d6:	1bf6      	subs	r6, r6, r7
 800f2d8:	4433      	add	r3, r6
 800f2da:	f1c6 0902 	rsb	r9, r6, #2
 800f2de:	6123      	str	r3, [r4, #16]
 800f2e0:	4649      	mov	r1, r9
 800f2e2:	f001 f9cb 	bl	801067c <ucdr_check_final_buffer_behavior>
 800f2e6:	2800      	cmp	r0, #0
 800f2e8:	d034      	beq.n	800f354 <ucdr_deserialize_uint16_t+0xb0>
 800f2ea:	7d23      	ldrb	r3, [r4, #20]
 800f2ec:	2b01      	cmp	r3, #1
 800f2ee:	d042      	beq.n	800f376 <ucdr_deserialize_uint16_t+0xd2>
 800f2f0:	787b      	ldrb	r3, [r7, #1]
 800f2f2:	702b      	strb	r3, [r5, #0]
 800f2f4:	2e00      	cmp	r6, #0
 800f2f6:	d03a      	beq.n	800f36e <ucdr_deserialize_uint16_t+0xca>
 800f2f8:	783b      	ldrb	r3, [r7, #0]
 800f2fa:	706b      	strb	r3, [r5, #1]
 800f2fc:	6923      	ldr	r3, [r4, #16]
 800f2fe:	2102      	movs	r1, #2
 800f300:	68a2      	ldr	r2, [r4, #8]
 800f302:	3302      	adds	r3, #2
 800f304:	7da0      	ldrb	r0, [r4, #22]
 800f306:	444a      	add	r2, r9
 800f308:	7561      	strb	r1, [r4, #21]
 800f30a:	1b9b      	subs	r3, r3, r6
 800f30c:	f080 0001 	eor.w	r0, r0, #1
 800f310:	60a2      	str	r2, [r4, #8]
 800f312:	6123      	str	r3, [r4, #16]
 800f314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f318:	2102      	movs	r1, #2
 800f31a:	4620      	mov	r0, r4
 800f31c:	f001 f9ae 	bl	801067c <ucdr_check_final_buffer_behavior>
 800f320:	b180      	cbz	r0, 800f344 <ucdr_deserialize_uint16_t+0xa0>
 800f322:	7d23      	ldrb	r3, [r4, #20]
 800f324:	2b01      	cmp	r3, #1
 800f326:	68a3      	ldr	r3, [r4, #8]
 800f328:	d011      	beq.n	800f34e <ucdr_deserialize_uint16_t+0xaa>
 800f32a:	785b      	ldrb	r3, [r3, #1]
 800f32c:	702b      	strb	r3, [r5, #0]
 800f32e:	68a3      	ldr	r3, [r4, #8]
 800f330:	781b      	ldrb	r3, [r3, #0]
 800f332:	706b      	strb	r3, [r5, #1]
 800f334:	2102      	movs	r1, #2
 800f336:	68a2      	ldr	r2, [r4, #8]
 800f338:	6923      	ldr	r3, [r4, #16]
 800f33a:	440a      	add	r2, r1
 800f33c:	7561      	strb	r1, [r4, #21]
 800f33e:	440b      	add	r3, r1
 800f340:	60a2      	str	r2, [r4, #8]
 800f342:	6123      	str	r3, [r4, #16]
 800f344:	7da0      	ldrb	r0, [r4, #22]
 800f346:	f080 0001 	eor.w	r0, r0, #1
 800f34a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f34e:	881b      	ldrh	r3, [r3, #0]
 800f350:	802b      	strh	r3, [r5, #0]
 800f352:	e7ef      	b.n	800f334 <ucdr_deserialize_uint16_t+0x90>
 800f354:	68a2      	ldr	r2, [r4, #8]
 800f356:	6923      	ldr	r3, [r4, #16]
 800f358:	1b92      	subs	r2, r2, r6
 800f35a:	7da0      	ldrb	r0, [r4, #22]
 800f35c:	1b9b      	subs	r3, r3, r6
 800f35e:	f884 8015 	strb.w	r8, [r4, #21]
 800f362:	f080 0001 	eor.w	r0, r0, #1
 800f366:	60a2      	str	r2, [r4, #8]
 800f368:	6123      	str	r3, [r4, #16]
 800f36a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f36e:	68a3      	ldr	r3, [r4, #8]
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	706b      	strb	r3, [r5, #1]
 800f374:	e7c2      	b.n	800f2fc <ucdr_deserialize_uint16_t+0x58>
 800f376:	4639      	mov	r1, r7
 800f378:	4632      	mov	r2, r6
 800f37a:	4628      	mov	r0, r5
 800f37c:	f00d facb 	bl	801c916 <memcpy>
 800f380:	464a      	mov	r2, r9
 800f382:	19a8      	adds	r0, r5, r6
 800f384:	68a1      	ldr	r1, [r4, #8]
 800f386:	f00d fac6 	bl	801c916 <memcpy>
 800f38a:	e7b7      	b.n	800f2fc <ucdr_deserialize_uint16_t+0x58>

0800f38c <ucdr_deserialize_endian_uint16_t>:
 800f38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f390:	4604      	mov	r4, r0
 800f392:	460e      	mov	r6, r1
 800f394:	2102      	movs	r1, #2
 800f396:	4615      	mov	r5, r2
 800f398:	f001 f9c4 	bl	8010724 <ucdr_buffer_alignment>
 800f39c:	4601      	mov	r1, r0
 800f39e:	4620      	mov	r0, r4
 800f3a0:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f3a4:	f001 fa06 	bl	80107b4 <ucdr_advance_buffer>
 800f3a8:	2102      	movs	r1, #2
 800f3aa:	4620      	mov	r0, r4
 800f3ac:	f001 f95a 	bl	8010664 <ucdr_check_buffer_available_for>
 800f3b0:	bb70      	cbnz	r0, 800f410 <ucdr_deserialize_endian_uint16_t+0x84>
 800f3b2:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800f3b6:	454f      	cmp	r7, r9
 800f3b8:	d925      	bls.n	800f406 <ucdr_deserialize_endian_uint16_t+0x7a>
 800f3ba:	6923      	ldr	r3, [r4, #16]
 800f3bc:	4620      	mov	r0, r4
 800f3be:	60a7      	str	r7, [r4, #8]
 800f3c0:	eba7 0709 	sub.w	r7, r7, r9
 800f3c4:	443b      	add	r3, r7
 800f3c6:	f1c7 0a02 	rsb	sl, r7, #2
 800f3ca:	6123      	str	r3, [r4, #16]
 800f3cc:	4651      	mov	r1, sl
 800f3ce:	f001 f955 	bl	801067c <ucdr_check_final_buffer_behavior>
 800f3d2:	2800      	cmp	r0, #0
 800f3d4:	d034      	beq.n	800f440 <ucdr_deserialize_endian_uint16_t+0xb4>
 800f3d6:	2e01      	cmp	r6, #1
 800f3d8:	d043      	beq.n	800f462 <ucdr_deserialize_endian_uint16_t+0xd6>
 800f3da:	f899 3001 	ldrb.w	r3, [r9, #1]
 800f3de:	702b      	strb	r3, [r5, #0]
 800f3e0:	2f00      	cmp	r7, #0
 800f3e2:	d03a      	beq.n	800f45a <ucdr_deserialize_endian_uint16_t+0xce>
 800f3e4:	f899 3000 	ldrb.w	r3, [r9]
 800f3e8:	706b      	strb	r3, [r5, #1]
 800f3ea:	6923      	ldr	r3, [r4, #16]
 800f3ec:	2102      	movs	r1, #2
 800f3ee:	68a2      	ldr	r2, [r4, #8]
 800f3f0:	3302      	adds	r3, #2
 800f3f2:	7da0      	ldrb	r0, [r4, #22]
 800f3f4:	4452      	add	r2, sl
 800f3f6:	7561      	strb	r1, [r4, #21]
 800f3f8:	1bdb      	subs	r3, r3, r7
 800f3fa:	f080 0001 	eor.w	r0, r0, #1
 800f3fe:	60a2      	str	r2, [r4, #8]
 800f400:	6123      	str	r3, [r4, #16]
 800f402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f406:	2102      	movs	r1, #2
 800f408:	4620      	mov	r0, r4
 800f40a:	f001 f937 	bl	801067c <ucdr_check_final_buffer_behavior>
 800f40e:	b178      	cbz	r0, 800f430 <ucdr_deserialize_endian_uint16_t+0xa4>
 800f410:	2e01      	cmp	r6, #1
 800f412:	68a3      	ldr	r3, [r4, #8]
 800f414:	d011      	beq.n	800f43a <ucdr_deserialize_endian_uint16_t+0xae>
 800f416:	785b      	ldrb	r3, [r3, #1]
 800f418:	702b      	strb	r3, [r5, #0]
 800f41a:	68a3      	ldr	r3, [r4, #8]
 800f41c:	781b      	ldrb	r3, [r3, #0]
 800f41e:	706b      	strb	r3, [r5, #1]
 800f420:	2102      	movs	r1, #2
 800f422:	68a2      	ldr	r2, [r4, #8]
 800f424:	6923      	ldr	r3, [r4, #16]
 800f426:	440a      	add	r2, r1
 800f428:	7561      	strb	r1, [r4, #21]
 800f42a:	440b      	add	r3, r1
 800f42c:	60a2      	str	r2, [r4, #8]
 800f42e:	6123      	str	r3, [r4, #16]
 800f430:	7da0      	ldrb	r0, [r4, #22]
 800f432:	f080 0001 	eor.w	r0, r0, #1
 800f436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f43a:	881b      	ldrh	r3, [r3, #0]
 800f43c:	802b      	strh	r3, [r5, #0]
 800f43e:	e7ef      	b.n	800f420 <ucdr_deserialize_endian_uint16_t+0x94>
 800f440:	68a2      	ldr	r2, [r4, #8]
 800f442:	6923      	ldr	r3, [r4, #16]
 800f444:	1bd2      	subs	r2, r2, r7
 800f446:	7da0      	ldrb	r0, [r4, #22]
 800f448:	1bdb      	subs	r3, r3, r7
 800f44a:	f884 8015 	strb.w	r8, [r4, #21]
 800f44e:	f080 0001 	eor.w	r0, r0, #1
 800f452:	60a2      	str	r2, [r4, #8]
 800f454:	6123      	str	r3, [r4, #16]
 800f456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f45a:	68a3      	ldr	r3, [r4, #8]
 800f45c:	781b      	ldrb	r3, [r3, #0]
 800f45e:	706b      	strb	r3, [r5, #1]
 800f460:	e7c3      	b.n	800f3ea <ucdr_deserialize_endian_uint16_t+0x5e>
 800f462:	4649      	mov	r1, r9
 800f464:	463a      	mov	r2, r7
 800f466:	4628      	mov	r0, r5
 800f468:	f00d fa55 	bl	801c916 <memcpy>
 800f46c:	4652      	mov	r2, sl
 800f46e:	19e8      	adds	r0, r5, r7
 800f470:	68a1      	ldr	r1, [r4, #8]
 800f472:	f00d fa50 	bl	801c916 <memcpy>
 800f476:	e7b8      	b.n	800f3ea <ucdr_deserialize_endian_uint16_t+0x5e>

0800f478 <ucdr_serialize_uint32_t>:
 800f478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f47c:	b082      	sub	sp, #8
 800f47e:	4604      	mov	r4, r0
 800f480:	9101      	str	r1, [sp, #4]
 800f482:	2104      	movs	r1, #4
 800f484:	f001 f94e 	bl	8010724 <ucdr_buffer_alignment>
 800f488:	4601      	mov	r1, r0
 800f48a:	4620      	mov	r0, r4
 800f48c:	7d67      	ldrb	r7, [r4, #21]
 800f48e:	f001 f991 	bl	80107b4 <ucdr_advance_buffer>
 800f492:	2104      	movs	r1, #4
 800f494:	4620      	mov	r0, r4
 800f496:	f001 f8e5 	bl	8010664 <ucdr_check_buffer_available_for>
 800f49a:	2800      	cmp	r0, #0
 800f49c:	d139      	bne.n	800f512 <ucdr_serialize_uint32_t+0x9a>
 800f49e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f4a2:	42ab      	cmp	r3, r5
 800f4a4:	d930      	bls.n	800f508 <ucdr_serialize_uint32_t+0x90>
 800f4a6:	1b5e      	subs	r6, r3, r5
 800f4a8:	60a3      	str	r3, [r4, #8]
 800f4aa:	6923      	ldr	r3, [r4, #16]
 800f4ac:	4620      	mov	r0, r4
 800f4ae:	f1c6 0804 	rsb	r8, r6, #4
 800f4b2:	4433      	add	r3, r6
 800f4b4:	4641      	mov	r1, r8
 800f4b6:	6123      	str	r3, [r4, #16]
 800f4b8:	f001 f8e0 	bl	801067c <ucdr_check_final_buffer_behavior>
 800f4bc:	2800      	cmp	r0, #0
 800f4be:	d04c      	beq.n	800f55a <ucdr_serialize_uint32_t+0xe2>
 800f4c0:	7d23      	ldrb	r3, [r4, #20]
 800f4c2:	2b01      	cmp	r3, #1
 800f4c4:	d063      	beq.n	800f58e <ucdr_serialize_uint32_t+0x116>
 800f4c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f4ca:	702b      	strb	r3, [r5, #0]
 800f4cc:	2e00      	cmp	r6, #0
 800f4ce:	d051      	beq.n	800f574 <ucdr_serialize_uint32_t+0xfc>
 800f4d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f4d4:	2e01      	cmp	r6, #1
 800f4d6:	706b      	strb	r3, [r5, #1]
 800f4d8:	d050      	beq.n	800f57c <ucdr_serialize_uint32_t+0x104>
 800f4da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f4de:	2e02      	cmp	r6, #2
 800f4e0:	70ab      	strb	r3, [r5, #2]
 800f4e2:	d04f      	beq.n	800f584 <ucdr_serialize_uint32_t+0x10c>
 800f4e4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f4e8:	70eb      	strb	r3, [r5, #3]
 800f4ea:	6923      	ldr	r3, [r4, #16]
 800f4ec:	2104      	movs	r1, #4
 800f4ee:	68a2      	ldr	r2, [r4, #8]
 800f4f0:	3304      	adds	r3, #4
 800f4f2:	7da0      	ldrb	r0, [r4, #22]
 800f4f4:	4442      	add	r2, r8
 800f4f6:	7561      	strb	r1, [r4, #21]
 800f4f8:	1b9e      	subs	r6, r3, r6
 800f4fa:	f080 0001 	eor.w	r0, r0, #1
 800f4fe:	60a2      	str	r2, [r4, #8]
 800f500:	6126      	str	r6, [r4, #16]
 800f502:	b002      	add	sp, #8
 800f504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f508:	2104      	movs	r1, #4
 800f50a:	4620      	mov	r0, r4
 800f50c:	f001 f8b6 	bl	801067c <ucdr_check_final_buffer_behavior>
 800f510:	b1d0      	cbz	r0, 800f548 <ucdr_serialize_uint32_t+0xd0>
 800f512:	7d23      	ldrb	r3, [r4, #20]
 800f514:	2b01      	cmp	r3, #1
 800f516:	68a3      	ldr	r3, [r4, #8]
 800f518:	d01c      	beq.n	800f554 <ucdr_serialize_uint32_t+0xdc>
 800f51a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f51e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f522:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f526:	7018      	strb	r0, [r3, #0]
 800f528:	68a3      	ldr	r3, [r4, #8]
 800f52a:	705a      	strb	r2, [r3, #1]
 800f52c:	68a3      	ldr	r3, [r4, #8]
 800f52e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f532:	7099      	strb	r1, [r3, #2]
 800f534:	68a3      	ldr	r3, [r4, #8]
 800f536:	70da      	strb	r2, [r3, #3]
 800f538:	2104      	movs	r1, #4
 800f53a:	68a2      	ldr	r2, [r4, #8]
 800f53c:	6923      	ldr	r3, [r4, #16]
 800f53e:	440a      	add	r2, r1
 800f540:	7561      	strb	r1, [r4, #21]
 800f542:	440b      	add	r3, r1
 800f544:	60a2      	str	r2, [r4, #8]
 800f546:	6123      	str	r3, [r4, #16]
 800f548:	7da0      	ldrb	r0, [r4, #22]
 800f54a:	f080 0001 	eor.w	r0, r0, #1
 800f54e:	b002      	add	sp, #8
 800f550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f554:	9a01      	ldr	r2, [sp, #4]
 800f556:	601a      	str	r2, [r3, #0]
 800f558:	e7ee      	b.n	800f538 <ucdr_serialize_uint32_t+0xc0>
 800f55a:	68a2      	ldr	r2, [r4, #8]
 800f55c:	6923      	ldr	r3, [r4, #16]
 800f55e:	7da0      	ldrb	r0, [r4, #22]
 800f560:	1b92      	subs	r2, r2, r6
 800f562:	1b9b      	subs	r3, r3, r6
 800f564:	7567      	strb	r7, [r4, #21]
 800f566:	f080 0001 	eor.w	r0, r0, #1
 800f56a:	60a2      	str	r2, [r4, #8]
 800f56c:	6123      	str	r3, [r4, #16]
 800f56e:	b002      	add	sp, #8
 800f570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f574:	68a3      	ldr	r3, [r4, #8]
 800f576:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f57a:	701a      	strb	r2, [r3, #0]
 800f57c:	68a3      	ldr	r3, [r4, #8]
 800f57e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f582:	701a      	strb	r2, [r3, #0]
 800f584:	68a3      	ldr	r3, [r4, #8]
 800f586:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f58a:	701a      	strb	r2, [r3, #0]
 800f58c:	e7ad      	b.n	800f4ea <ucdr_serialize_uint32_t+0x72>
 800f58e:	4628      	mov	r0, r5
 800f590:	ad01      	add	r5, sp, #4
 800f592:	4632      	mov	r2, r6
 800f594:	4629      	mov	r1, r5
 800f596:	f00d f9be 	bl	801c916 <memcpy>
 800f59a:	4642      	mov	r2, r8
 800f59c:	19a9      	adds	r1, r5, r6
 800f59e:	68a0      	ldr	r0, [r4, #8]
 800f5a0:	f00d f9b9 	bl	801c916 <memcpy>
 800f5a4:	e7a1      	b.n	800f4ea <ucdr_serialize_uint32_t+0x72>
 800f5a6:	bf00      	nop

0800f5a8 <ucdr_serialize_endian_uint32_t>:
 800f5a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f5ac:	4604      	mov	r4, r0
 800f5ae:	b083      	sub	sp, #12
 800f5b0:	460d      	mov	r5, r1
 800f5b2:	2104      	movs	r1, #4
 800f5b4:	9201      	str	r2, [sp, #4]
 800f5b6:	f001 f8b5 	bl	8010724 <ucdr_buffer_alignment>
 800f5ba:	4601      	mov	r1, r0
 800f5bc:	4620      	mov	r0, r4
 800f5be:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f5c2:	f001 f8f7 	bl	80107b4 <ucdr_advance_buffer>
 800f5c6:	2104      	movs	r1, #4
 800f5c8:	4620      	mov	r0, r4
 800f5ca:	f001 f84b 	bl	8010664 <ucdr_check_buffer_available_for>
 800f5ce:	2800      	cmp	r0, #0
 800f5d0:	d138      	bne.n	800f644 <ucdr_serialize_endian_uint32_t+0x9c>
 800f5d2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f5d6:	42b7      	cmp	r7, r6
 800f5d8:	d92f      	bls.n	800f63a <ucdr_serialize_endian_uint32_t+0x92>
 800f5da:	6923      	ldr	r3, [r4, #16]
 800f5dc:	4620      	mov	r0, r4
 800f5de:	60a7      	str	r7, [r4, #8]
 800f5e0:	1bbf      	subs	r7, r7, r6
 800f5e2:	443b      	add	r3, r7
 800f5e4:	f1c7 0904 	rsb	r9, r7, #4
 800f5e8:	6123      	str	r3, [r4, #16]
 800f5ea:	4649      	mov	r1, r9
 800f5ec:	f001 f846 	bl	801067c <ucdr_check_final_buffer_behavior>
 800f5f0:	2800      	cmp	r0, #0
 800f5f2:	d04a      	beq.n	800f68a <ucdr_serialize_endian_uint32_t+0xe2>
 800f5f4:	2d01      	cmp	r5, #1
 800f5f6:	d063      	beq.n	800f6c0 <ucdr_serialize_endian_uint32_t+0x118>
 800f5f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f5fc:	7033      	strb	r3, [r6, #0]
 800f5fe:	2f00      	cmp	r7, #0
 800f600:	d051      	beq.n	800f6a6 <ucdr_serialize_endian_uint32_t+0xfe>
 800f602:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f606:	2f01      	cmp	r7, #1
 800f608:	7073      	strb	r3, [r6, #1]
 800f60a:	d050      	beq.n	800f6ae <ucdr_serialize_endian_uint32_t+0x106>
 800f60c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f610:	2f02      	cmp	r7, #2
 800f612:	70b3      	strb	r3, [r6, #2]
 800f614:	d04f      	beq.n	800f6b6 <ucdr_serialize_endian_uint32_t+0x10e>
 800f616:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f61a:	70f3      	strb	r3, [r6, #3]
 800f61c:	6923      	ldr	r3, [r4, #16]
 800f61e:	2104      	movs	r1, #4
 800f620:	68a2      	ldr	r2, [r4, #8]
 800f622:	7da0      	ldrb	r0, [r4, #22]
 800f624:	3304      	adds	r3, #4
 800f626:	444a      	add	r2, r9
 800f628:	7561      	strb	r1, [r4, #21]
 800f62a:	1bdb      	subs	r3, r3, r7
 800f62c:	f080 0001 	eor.w	r0, r0, #1
 800f630:	60a2      	str	r2, [r4, #8]
 800f632:	6123      	str	r3, [r4, #16]
 800f634:	b003      	add	sp, #12
 800f636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f63a:	2104      	movs	r1, #4
 800f63c:	4620      	mov	r0, r4
 800f63e:	f001 f81d 	bl	801067c <ucdr_check_final_buffer_behavior>
 800f642:	b1c8      	cbz	r0, 800f678 <ucdr_serialize_endian_uint32_t+0xd0>
 800f644:	2d01      	cmp	r5, #1
 800f646:	68a3      	ldr	r3, [r4, #8]
 800f648:	d01c      	beq.n	800f684 <ucdr_serialize_endian_uint32_t+0xdc>
 800f64a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f64e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f652:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f656:	7018      	strb	r0, [r3, #0]
 800f658:	68a3      	ldr	r3, [r4, #8]
 800f65a:	705a      	strb	r2, [r3, #1]
 800f65c:	68a3      	ldr	r3, [r4, #8]
 800f65e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f662:	7099      	strb	r1, [r3, #2]
 800f664:	68a3      	ldr	r3, [r4, #8]
 800f666:	70da      	strb	r2, [r3, #3]
 800f668:	2104      	movs	r1, #4
 800f66a:	68a2      	ldr	r2, [r4, #8]
 800f66c:	6923      	ldr	r3, [r4, #16]
 800f66e:	440a      	add	r2, r1
 800f670:	7561      	strb	r1, [r4, #21]
 800f672:	440b      	add	r3, r1
 800f674:	60a2      	str	r2, [r4, #8]
 800f676:	6123      	str	r3, [r4, #16]
 800f678:	7da0      	ldrb	r0, [r4, #22]
 800f67a:	f080 0001 	eor.w	r0, r0, #1
 800f67e:	b003      	add	sp, #12
 800f680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f684:	9a01      	ldr	r2, [sp, #4]
 800f686:	601a      	str	r2, [r3, #0]
 800f688:	e7ee      	b.n	800f668 <ucdr_serialize_endian_uint32_t+0xc0>
 800f68a:	68a2      	ldr	r2, [r4, #8]
 800f68c:	6923      	ldr	r3, [r4, #16]
 800f68e:	7da0      	ldrb	r0, [r4, #22]
 800f690:	1bd2      	subs	r2, r2, r7
 800f692:	1bdb      	subs	r3, r3, r7
 800f694:	f884 8015 	strb.w	r8, [r4, #21]
 800f698:	f080 0001 	eor.w	r0, r0, #1
 800f69c:	60a2      	str	r2, [r4, #8]
 800f69e:	6123      	str	r3, [r4, #16]
 800f6a0:	b003      	add	sp, #12
 800f6a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6a6:	68a3      	ldr	r3, [r4, #8]
 800f6a8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f6ac:	701a      	strb	r2, [r3, #0]
 800f6ae:	68a3      	ldr	r3, [r4, #8]
 800f6b0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f6b4:	701a      	strb	r2, [r3, #0]
 800f6b6:	68a3      	ldr	r3, [r4, #8]
 800f6b8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f6bc:	701a      	strb	r2, [r3, #0]
 800f6be:	e7ad      	b.n	800f61c <ucdr_serialize_endian_uint32_t+0x74>
 800f6c0:	ad01      	add	r5, sp, #4
 800f6c2:	463a      	mov	r2, r7
 800f6c4:	4630      	mov	r0, r6
 800f6c6:	4629      	mov	r1, r5
 800f6c8:	f00d f925 	bl	801c916 <memcpy>
 800f6cc:	464a      	mov	r2, r9
 800f6ce:	19e9      	adds	r1, r5, r7
 800f6d0:	68a0      	ldr	r0, [r4, #8]
 800f6d2:	f00d f920 	bl	801c916 <memcpy>
 800f6d6:	e7a1      	b.n	800f61c <ucdr_serialize_endian_uint32_t+0x74>

0800f6d8 <ucdr_deserialize_uint32_t>:
 800f6d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6dc:	4604      	mov	r4, r0
 800f6de:	460d      	mov	r5, r1
 800f6e0:	2104      	movs	r1, #4
 800f6e2:	f001 f81f 	bl	8010724 <ucdr_buffer_alignment>
 800f6e6:	4601      	mov	r1, r0
 800f6e8:	4620      	mov	r0, r4
 800f6ea:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f6ee:	f001 f861 	bl	80107b4 <ucdr_advance_buffer>
 800f6f2:	2104      	movs	r1, #4
 800f6f4:	4620      	mov	r0, r4
 800f6f6:	f000 ffb5 	bl	8010664 <ucdr_check_buffer_available_for>
 800f6fa:	2800      	cmp	r0, #0
 800f6fc:	d138      	bne.n	800f770 <ucdr_deserialize_uint32_t+0x98>
 800f6fe:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f702:	42b7      	cmp	r7, r6
 800f704:	d92f      	bls.n	800f766 <ucdr_deserialize_uint32_t+0x8e>
 800f706:	6923      	ldr	r3, [r4, #16]
 800f708:	4620      	mov	r0, r4
 800f70a:	60a7      	str	r7, [r4, #8]
 800f70c:	1bbf      	subs	r7, r7, r6
 800f70e:	443b      	add	r3, r7
 800f710:	f1c7 0904 	rsb	r9, r7, #4
 800f714:	6123      	str	r3, [r4, #16]
 800f716:	4649      	mov	r1, r9
 800f718:	f000 ffb0 	bl	801067c <ucdr_check_final_buffer_behavior>
 800f71c:	2800      	cmp	r0, #0
 800f71e:	d046      	beq.n	800f7ae <ucdr_deserialize_uint32_t+0xd6>
 800f720:	7d23      	ldrb	r3, [r4, #20]
 800f722:	2b01      	cmp	r3, #1
 800f724:	d05c      	beq.n	800f7e0 <ucdr_deserialize_uint32_t+0x108>
 800f726:	78f3      	ldrb	r3, [r6, #3]
 800f728:	702b      	strb	r3, [r5, #0]
 800f72a:	2f00      	cmp	r7, #0
 800f72c:	d04c      	beq.n	800f7c8 <ucdr_deserialize_uint32_t+0xf0>
 800f72e:	78b3      	ldrb	r3, [r6, #2]
 800f730:	2f01      	cmp	r7, #1
 800f732:	706b      	strb	r3, [r5, #1]
 800f734:	f105 0302 	add.w	r3, r5, #2
 800f738:	d04a      	beq.n	800f7d0 <ucdr_deserialize_uint32_t+0xf8>
 800f73a:	7873      	ldrb	r3, [r6, #1]
 800f73c:	2f02      	cmp	r7, #2
 800f73e:	70ab      	strb	r3, [r5, #2]
 800f740:	f105 0303 	add.w	r3, r5, #3
 800f744:	d048      	beq.n	800f7d8 <ucdr_deserialize_uint32_t+0x100>
 800f746:	7833      	ldrb	r3, [r6, #0]
 800f748:	70eb      	strb	r3, [r5, #3]
 800f74a:	6923      	ldr	r3, [r4, #16]
 800f74c:	2104      	movs	r1, #4
 800f74e:	68a2      	ldr	r2, [r4, #8]
 800f750:	3304      	adds	r3, #4
 800f752:	7da0      	ldrb	r0, [r4, #22]
 800f754:	444a      	add	r2, r9
 800f756:	7561      	strb	r1, [r4, #21]
 800f758:	1bdb      	subs	r3, r3, r7
 800f75a:	f080 0001 	eor.w	r0, r0, #1
 800f75e:	60a2      	str	r2, [r4, #8]
 800f760:	6123      	str	r3, [r4, #16]
 800f762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f766:	2104      	movs	r1, #4
 800f768:	4620      	mov	r0, r4
 800f76a:	f000 ff87 	bl	801067c <ucdr_check_final_buffer_behavior>
 800f76e:	b1b0      	cbz	r0, 800f79e <ucdr_deserialize_uint32_t+0xc6>
 800f770:	7d23      	ldrb	r3, [r4, #20]
 800f772:	2b01      	cmp	r3, #1
 800f774:	68a3      	ldr	r3, [r4, #8]
 800f776:	d017      	beq.n	800f7a8 <ucdr_deserialize_uint32_t+0xd0>
 800f778:	78db      	ldrb	r3, [r3, #3]
 800f77a:	702b      	strb	r3, [r5, #0]
 800f77c:	68a3      	ldr	r3, [r4, #8]
 800f77e:	789b      	ldrb	r3, [r3, #2]
 800f780:	706b      	strb	r3, [r5, #1]
 800f782:	68a3      	ldr	r3, [r4, #8]
 800f784:	785b      	ldrb	r3, [r3, #1]
 800f786:	70ab      	strb	r3, [r5, #2]
 800f788:	68a3      	ldr	r3, [r4, #8]
 800f78a:	781b      	ldrb	r3, [r3, #0]
 800f78c:	70eb      	strb	r3, [r5, #3]
 800f78e:	2104      	movs	r1, #4
 800f790:	68a2      	ldr	r2, [r4, #8]
 800f792:	6923      	ldr	r3, [r4, #16]
 800f794:	440a      	add	r2, r1
 800f796:	7561      	strb	r1, [r4, #21]
 800f798:	440b      	add	r3, r1
 800f79a:	60a2      	str	r2, [r4, #8]
 800f79c:	6123      	str	r3, [r4, #16]
 800f79e:	7da0      	ldrb	r0, [r4, #22]
 800f7a0:	f080 0001 	eor.w	r0, r0, #1
 800f7a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	602b      	str	r3, [r5, #0]
 800f7ac:	e7ef      	b.n	800f78e <ucdr_deserialize_uint32_t+0xb6>
 800f7ae:	68a2      	ldr	r2, [r4, #8]
 800f7b0:	6923      	ldr	r3, [r4, #16]
 800f7b2:	1bd2      	subs	r2, r2, r7
 800f7b4:	7da0      	ldrb	r0, [r4, #22]
 800f7b6:	1bdb      	subs	r3, r3, r7
 800f7b8:	f884 8015 	strb.w	r8, [r4, #21]
 800f7bc:	f080 0001 	eor.w	r0, r0, #1
 800f7c0:	60a2      	str	r2, [r4, #8]
 800f7c2:	6123      	str	r3, [r4, #16]
 800f7c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7c8:	68a3      	ldr	r3, [r4, #8]
 800f7ca:	789b      	ldrb	r3, [r3, #2]
 800f7cc:	706b      	strb	r3, [r5, #1]
 800f7ce:	1cab      	adds	r3, r5, #2
 800f7d0:	68a2      	ldr	r2, [r4, #8]
 800f7d2:	7852      	ldrb	r2, [r2, #1]
 800f7d4:	f803 2b01 	strb.w	r2, [r3], #1
 800f7d8:	68a2      	ldr	r2, [r4, #8]
 800f7da:	7812      	ldrb	r2, [r2, #0]
 800f7dc:	701a      	strb	r2, [r3, #0]
 800f7de:	e7b4      	b.n	800f74a <ucdr_deserialize_uint32_t+0x72>
 800f7e0:	4631      	mov	r1, r6
 800f7e2:	463a      	mov	r2, r7
 800f7e4:	4628      	mov	r0, r5
 800f7e6:	f00d f896 	bl	801c916 <memcpy>
 800f7ea:	464a      	mov	r2, r9
 800f7ec:	19e8      	adds	r0, r5, r7
 800f7ee:	68a1      	ldr	r1, [r4, #8]
 800f7f0:	f00d f891 	bl	801c916 <memcpy>
 800f7f4:	e7a9      	b.n	800f74a <ucdr_deserialize_uint32_t+0x72>
 800f7f6:	bf00      	nop

0800f7f8 <ucdr_deserialize_endian_uint32_t>:
 800f7f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7fc:	4604      	mov	r4, r0
 800f7fe:	460e      	mov	r6, r1
 800f800:	2104      	movs	r1, #4
 800f802:	4615      	mov	r5, r2
 800f804:	f000 ff8e 	bl	8010724 <ucdr_buffer_alignment>
 800f808:	4601      	mov	r1, r0
 800f80a:	4620      	mov	r0, r4
 800f80c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f810:	f000 ffd0 	bl	80107b4 <ucdr_advance_buffer>
 800f814:	2104      	movs	r1, #4
 800f816:	4620      	mov	r0, r4
 800f818:	f000 ff24 	bl	8010664 <ucdr_check_buffer_available_for>
 800f81c:	2800      	cmp	r0, #0
 800f81e:	d13c      	bne.n	800f89a <ucdr_deserialize_endian_uint32_t+0xa2>
 800f820:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f824:	42bb      	cmp	r3, r7
 800f826:	d933      	bls.n	800f890 <ucdr_deserialize_endian_uint32_t+0x98>
 800f828:	eba3 0907 	sub.w	r9, r3, r7
 800f82c:	60a3      	str	r3, [r4, #8]
 800f82e:	6923      	ldr	r3, [r4, #16]
 800f830:	4620      	mov	r0, r4
 800f832:	f1c9 0a04 	rsb	sl, r9, #4
 800f836:	444b      	add	r3, r9
 800f838:	4651      	mov	r1, sl
 800f83a:	6123      	str	r3, [r4, #16]
 800f83c:	f000 ff1e 	bl	801067c <ucdr_check_final_buffer_behavior>
 800f840:	2800      	cmp	r0, #0
 800f842:	d048      	beq.n	800f8d6 <ucdr_deserialize_endian_uint32_t+0xde>
 800f844:	2e01      	cmp	r6, #1
 800f846:	d061      	beq.n	800f90c <ucdr_deserialize_endian_uint32_t+0x114>
 800f848:	78fb      	ldrb	r3, [r7, #3]
 800f84a:	702b      	strb	r3, [r5, #0]
 800f84c:	f1b9 0f00 	cmp.w	r9, #0
 800f850:	d050      	beq.n	800f8f4 <ucdr_deserialize_endian_uint32_t+0xfc>
 800f852:	78bb      	ldrb	r3, [r7, #2]
 800f854:	f1b9 0f01 	cmp.w	r9, #1
 800f858:	706b      	strb	r3, [r5, #1]
 800f85a:	f105 0302 	add.w	r3, r5, #2
 800f85e:	d04d      	beq.n	800f8fc <ucdr_deserialize_endian_uint32_t+0x104>
 800f860:	787b      	ldrb	r3, [r7, #1]
 800f862:	f1b9 0f02 	cmp.w	r9, #2
 800f866:	70ab      	strb	r3, [r5, #2]
 800f868:	f105 0303 	add.w	r3, r5, #3
 800f86c:	d04a      	beq.n	800f904 <ucdr_deserialize_endian_uint32_t+0x10c>
 800f86e:	783b      	ldrb	r3, [r7, #0]
 800f870:	70eb      	strb	r3, [r5, #3]
 800f872:	6923      	ldr	r3, [r4, #16]
 800f874:	2104      	movs	r1, #4
 800f876:	68a2      	ldr	r2, [r4, #8]
 800f878:	3304      	adds	r3, #4
 800f87a:	7da0      	ldrb	r0, [r4, #22]
 800f87c:	4452      	add	r2, sl
 800f87e:	7561      	strb	r1, [r4, #21]
 800f880:	eba3 0309 	sub.w	r3, r3, r9
 800f884:	f080 0001 	eor.w	r0, r0, #1
 800f888:	60a2      	str	r2, [r4, #8]
 800f88a:	6123      	str	r3, [r4, #16]
 800f88c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f890:	2104      	movs	r1, #4
 800f892:	4620      	mov	r0, r4
 800f894:	f000 fef2 	bl	801067c <ucdr_check_final_buffer_behavior>
 800f898:	b1a8      	cbz	r0, 800f8c6 <ucdr_deserialize_endian_uint32_t+0xce>
 800f89a:	2e01      	cmp	r6, #1
 800f89c:	68a3      	ldr	r3, [r4, #8]
 800f89e:	d017      	beq.n	800f8d0 <ucdr_deserialize_endian_uint32_t+0xd8>
 800f8a0:	78db      	ldrb	r3, [r3, #3]
 800f8a2:	702b      	strb	r3, [r5, #0]
 800f8a4:	68a3      	ldr	r3, [r4, #8]
 800f8a6:	789b      	ldrb	r3, [r3, #2]
 800f8a8:	706b      	strb	r3, [r5, #1]
 800f8aa:	68a3      	ldr	r3, [r4, #8]
 800f8ac:	785b      	ldrb	r3, [r3, #1]
 800f8ae:	70ab      	strb	r3, [r5, #2]
 800f8b0:	68a3      	ldr	r3, [r4, #8]
 800f8b2:	781b      	ldrb	r3, [r3, #0]
 800f8b4:	70eb      	strb	r3, [r5, #3]
 800f8b6:	2104      	movs	r1, #4
 800f8b8:	68a2      	ldr	r2, [r4, #8]
 800f8ba:	6923      	ldr	r3, [r4, #16]
 800f8bc:	440a      	add	r2, r1
 800f8be:	7561      	strb	r1, [r4, #21]
 800f8c0:	440b      	add	r3, r1
 800f8c2:	60a2      	str	r2, [r4, #8]
 800f8c4:	6123      	str	r3, [r4, #16]
 800f8c6:	7da0      	ldrb	r0, [r4, #22]
 800f8c8:	f080 0001 	eor.w	r0, r0, #1
 800f8cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	602b      	str	r3, [r5, #0]
 800f8d4:	e7ef      	b.n	800f8b6 <ucdr_deserialize_endian_uint32_t+0xbe>
 800f8d6:	68a2      	ldr	r2, [r4, #8]
 800f8d8:	6923      	ldr	r3, [r4, #16]
 800f8da:	eba2 0209 	sub.w	r2, r2, r9
 800f8de:	7da0      	ldrb	r0, [r4, #22]
 800f8e0:	eba3 0309 	sub.w	r3, r3, r9
 800f8e4:	f884 8015 	strb.w	r8, [r4, #21]
 800f8e8:	f080 0001 	eor.w	r0, r0, #1
 800f8ec:	60a2      	str	r2, [r4, #8]
 800f8ee:	6123      	str	r3, [r4, #16]
 800f8f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8f4:	68a3      	ldr	r3, [r4, #8]
 800f8f6:	789b      	ldrb	r3, [r3, #2]
 800f8f8:	706b      	strb	r3, [r5, #1]
 800f8fa:	1cab      	adds	r3, r5, #2
 800f8fc:	68a2      	ldr	r2, [r4, #8]
 800f8fe:	7852      	ldrb	r2, [r2, #1]
 800f900:	f803 2b01 	strb.w	r2, [r3], #1
 800f904:	68a2      	ldr	r2, [r4, #8]
 800f906:	7812      	ldrb	r2, [r2, #0]
 800f908:	701a      	strb	r2, [r3, #0]
 800f90a:	e7b2      	b.n	800f872 <ucdr_deserialize_endian_uint32_t+0x7a>
 800f90c:	4639      	mov	r1, r7
 800f90e:	464a      	mov	r2, r9
 800f910:	4628      	mov	r0, r5
 800f912:	f00d f800 	bl	801c916 <memcpy>
 800f916:	4652      	mov	r2, sl
 800f918:	eb05 0009 	add.w	r0, r5, r9
 800f91c:	68a1      	ldr	r1, [r4, #8]
 800f91e:	f00c fffa 	bl	801c916 <memcpy>
 800f922:	e7a6      	b.n	800f872 <ucdr_deserialize_endian_uint32_t+0x7a>

0800f924 <ucdr_serialize_uint64_t>:
 800f924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f928:	4604      	mov	r4, r0
 800f92a:	b082      	sub	sp, #8
 800f92c:	2108      	movs	r1, #8
 800f92e:	e9cd 2300 	strd	r2, r3, [sp]
 800f932:	f000 fef7 	bl	8010724 <ucdr_buffer_alignment>
 800f936:	4601      	mov	r1, r0
 800f938:	4620      	mov	r0, r4
 800f93a:	7d67      	ldrb	r7, [r4, #21]
 800f93c:	f000 ff3a 	bl	80107b4 <ucdr_advance_buffer>
 800f940:	2108      	movs	r1, #8
 800f942:	4620      	mov	r0, r4
 800f944:	f000 fe8e 	bl	8010664 <ucdr_check_buffer_available_for>
 800f948:	2800      	cmp	r0, #0
 800f94a:	d14e      	bne.n	800f9ea <ucdr_serialize_uint64_t+0xc6>
 800f94c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f950:	42ab      	cmp	r3, r5
 800f952:	d945      	bls.n	800f9e0 <ucdr_serialize_uint64_t+0xbc>
 800f954:	1b5e      	subs	r6, r3, r5
 800f956:	60a3      	str	r3, [r4, #8]
 800f958:	6923      	ldr	r3, [r4, #16]
 800f95a:	4620      	mov	r0, r4
 800f95c:	f1c6 0808 	rsb	r8, r6, #8
 800f960:	4433      	add	r3, r6
 800f962:	4641      	mov	r1, r8
 800f964:	6123      	str	r3, [r4, #16]
 800f966:	f000 fe89 	bl	801067c <ucdr_check_final_buffer_behavior>
 800f96a:	2800      	cmp	r0, #0
 800f96c:	d074      	beq.n	800fa58 <ucdr_serialize_uint64_t+0x134>
 800f96e:	7d23      	ldrb	r3, [r4, #20]
 800f970:	2b01      	cmp	r3, #1
 800f972:	f000 809b 	beq.w	800faac <ucdr_serialize_uint64_t+0x188>
 800f976:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f97a:	702b      	strb	r3, [r5, #0]
 800f97c:	2e00      	cmp	r6, #0
 800f97e:	d078      	beq.n	800fa72 <ucdr_serialize_uint64_t+0x14e>
 800f980:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f984:	2e01      	cmp	r6, #1
 800f986:	706b      	strb	r3, [r5, #1]
 800f988:	d077      	beq.n	800fa7a <ucdr_serialize_uint64_t+0x156>
 800f98a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f98e:	2e02      	cmp	r6, #2
 800f990:	70ab      	strb	r3, [r5, #2]
 800f992:	d076      	beq.n	800fa82 <ucdr_serialize_uint64_t+0x15e>
 800f994:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f998:	2e03      	cmp	r6, #3
 800f99a:	70eb      	strb	r3, [r5, #3]
 800f99c:	d075      	beq.n	800fa8a <ucdr_serialize_uint64_t+0x166>
 800f99e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f9a2:	2e04      	cmp	r6, #4
 800f9a4:	712b      	strb	r3, [r5, #4]
 800f9a6:	d074      	beq.n	800fa92 <ucdr_serialize_uint64_t+0x16e>
 800f9a8:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f9ac:	2e05      	cmp	r6, #5
 800f9ae:	716b      	strb	r3, [r5, #5]
 800f9b0:	d073      	beq.n	800fa9a <ucdr_serialize_uint64_t+0x176>
 800f9b2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f9b6:	2e06      	cmp	r6, #6
 800f9b8:	71ab      	strb	r3, [r5, #6]
 800f9ba:	d072      	beq.n	800faa2 <ucdr_serialize_uint64_t+0x17e>
 800f9bc:	f89d 3000 	ldrb.w	r3, [sp]
 800f9c0:	71eb      	strb	r3, [r5, #7]
 800f9c2:	6923      	ldr	r3, [r4, #16]
 800f9c4:	2108      	movs	r1, #8
 800f9c6:	68a2      	ldr	r2, [r4, #8]
 800f9c8:	3308      	adds	r3, #8
 800f9ca:	7da0      	ldrb	r0, [r4, #22]
 800f9cc:	4442      	add	r2, r8
 800f9ce:	7561      	strb	r1, [r4, #21]
 800f9d0:	1b9e      	subs	r6, r3, r6
 800f9d2:	f080 0001 	eor.w	r0, r0, #1
 800f9d6:	60a2      	str	r2, [r4, #8]
 800f9d8:	6126      	str	r6, [r4, #16]
 800f9da:	b002      	add	sp, #8
 800f9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9e0:	2108      	movs	r1, #8
 800f9e2:	4620      	mov	r0, r4
 800f9e4:	f000 fe4a 	bl	801067c <ucdr_check_final_buffer_behavior>
 800f9e8:	b350      	cbz	r0, 800fa40 <ucdr_serialize_uint64_t+0x11c>
 800f9ea:	7d23      	ldrb	r3, [r4, #20]
 800f9ec:	2b01      	cmp	r3, #1
 800f9ee:	d02d      	beq.n	800fa4c <ucdr_serialize_uint64_t+0x128>
 800f9f0:	68a3      	ldr	r3, [r4, #8]
 800f9f2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f9f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f9fa:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f9fe:	7018      	strb	r0, [r3, #0]
 800fa00:	68a3      	ldr	r3, [r4, #8]
 800fa02:	705a      	strb	r2, [r3, #1]
 800fa04:	68a3      	ldr	r3, [r4, #8]
 800fa06:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fa0a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800fa0e:	7099      	strb	r1, [r3, #2]
 800fa10:	68a3      	ldr	r3, [r4, #8]
 800fa12:	70da      	strb	r2, [r3, #3]
 800fa14:	68a3      	ldr	r3, [r4, #8]
 800fa16:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fa1a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800fa1e:	7118      	strb	r0, [r3, #4]
 800fa20:	68a3      	ldr	r3, [r4, #8]
 800fa22:	715a      	strb	r2, [r3, #5]
 800fa24:	68a3      	ldr	r3, [r4, #8]
 800fa26:	f89d 2000 	ldrb.w	r2, [sp]
 800fa2a:	7199      	strb	r1, [r3, #6]
 800fa2c:	68a3      	ldr	r3, [r4, #8]
 800fa2e:	71da      	strb	r2, [r3, #7]
 800fa30:	2108      	movs	r1, #8
 800fa32:	68a2      	ldr	r2, [r4, #8]
 800fa34:	6923      	ldr	r3, [r4, #16]
 800fa36:	440a      	add	r2, r1
 800fa38:	7561      	strb	r1, [r4, #21]
 800fa3a:	440b      	add	r3, r1
 800fa3c:	60a2      	str	r2, [r4, #8]
 800fa3e:	6123      	str	r3, [r4, #16]
 800fa40:	7da0      	ldrb	r0, [r4, #22]
 800fa42:	f080 0001 	eor.w	r0, r0, #1
 800fa46:	b002      	add	sp, #8
 800fa48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa4c:	466b      	mov	r3, sp
 800fa4e:	68a2      	ldr	r2, [r4, #8]
 800fa50:	cb03      	ldmia	r3!, {r0, r1}
 800fa52:	6010      	str	r0, [r2, #0]
 800fa54:	6051      	str	r1, [r2, #4]
 800fa56:	e7eb      	b.n	800fa30 <ucdr_serialize_uint64_t+0x10c>
 800fa58:	68a2      	ldr	r2, [r4, #8]
 800fa5a:	6923      	ldr	r3, [r4, #16]
 800fa5c:	7da0      	ldrb	r0, [r4, #22]
 800fa5e:	1b92      	subs	r2, r2, r6
 800fa60:	1b9b      	subs	r3, r3, r6
 800fa62:	7567      	strb	r7, [r4, #21]
 800fa64:	f080 0001 	eor.w	r0, r0, #1
 800fa68:	60a2      	str	r2, [r4, #8]
 800fa6a:	6123      	str	r3, [r4, #16]
 800fa6c:	b002      	add	sp, #8
 800fa6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa72:	68a3      	ldr	r3, [r4, #8]
 800fa74:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fa78:	701a      	strb	r2, [r3, #0]
 800fa7a:	68a3      	ldr	r3, [r4, #8]
 800fa7c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fa80:	701a      	strb	r2, [r3, #0]
 800fa82:	68a3      	ldr	r3, [r4, #8]
 800fa84:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fa88:	701a      	strb	r2, [r3, #0]
 800fa8a:	68a3      	ldr	r3, [r4, #8]
 800fa8c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fa90:	701a      	strb	r2, [r3, #0]
 800fa92:	68a3      	ldr	r3, [r4, #8]
 800fa94:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fa98:	701a      	strb	r2, [r3, #0]
 800fa9a:	68a3      	ldr	r3, [r4, #8]
 800fa9c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800faa0:	701a      	strb	r2, [r3, #0]
 800faa2:	68a3      	ldr	r3, [r4, #8]
 800faa4:	f89d 2000 	ldrb.w	r2, [sp]
 800faa8:	701a      	strb	r2, [r3, #0]
 800faaa:	e78a      	b.n	800f9c2 <ucdr_serialize_uint64_t+0x9e>
 800faac:	4628      	mov	r0, r5
 800faae:	466d      	mov	r5, sp
 800fab0:	4632      	mov	r2, r6
 800fab2:	4629      	mov	r1, r5
 800fab4:	f00c ff2f 	bl	801c916 <memcpy>
 800fab8:	4642      	mov	r2, r8
 800faba:	19a9      	adds	r1, r5, r6
 800fabc:	68a0      	ldr	r0, [r4, #8]
 800fabe:	f00c ff2a 	bl	801c916 <memcpy>
 800fac2:	e77e      	b.n	800f9c2 <ucdr_serialize_uint64_t+0x9e>

0800fac4 <ucdr_serialize_int16_t>:
 800fac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fac8:	460b      	mov	r3, r1
 800faca:	b082      	sub	sp, #8
 800facc:	4604      	mov	r4, r0
 800face:	2102      	movs	r1, #2
 800fad0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fad4:	f000 fe26 	bl	8010724 <ucdr_buffer_alignment>
 800fad8:	4601      	mov	r1, r0
 800fada:	4620      	mov	r0, r4
 800fadc:	7d67      	ldrb	r7, [r4, #21]
 800fade:	f000 fe69 	bl	80107b4 <ucdr_advance_buffer>
 800fae2:	2102      	movs	r1, #2
 800fae4:	4620      	mov	r0, r4
 800fae6:	f000 fdbd 	bl	8010664 <ucdr_check_buffer_available_for>
 800faea:	bb78      	cbnz	r0, 800fb4c <ucdr_serialize_int16_t+0x88>
 800faec:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800faf0:	42ab      	cmp	r3, r5
 800faf2:	d926      	bls.n	800fb42 <ucdr_serialize_int16_t+0x7e>
 800faf4:	1b5e      	subs	r6, r3, r5
 800faf6:	60a3      	str	r3, [r4, #8]
 800faf8:	6923      	ldr	r3, [r4, #16]
 800fafa:	4620      	mov	r0, r4
 800fafc:	f1c6 0802 	rsb	r8, r6, #2
 800fb00:	4433      	add	r3, r6
 800fb02:	4641      	mov	r1, r8
 800fb04:	6123      	str	r3, [r4, #16]
 800fb06:	f000 fdb9 	bl	801067c <ucdr_check_final_buffer_behavior>
 800fb0a:	2800      	cmp	r0, #0
 800fb0c:	d03b      	beq.n	800fb86 <ucdr_serialize_int16_t+0xc2>
 800fb0e:	7d23      	ldrb	r3, [r4, #20]
 800fb10:	2b01      	cmp	r3, #1
 800fb12:	d04a      	beq.n	800fbaa <ucdr_serialize_int16_t+0xe6>
 800fb14:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fb18:	702b      	strb	r3, [r5, #0]
 800fb1a:	2e00      	cmp	r6, #0
 800fb1c:	d040      	beq.n	800fba0 <ucdr_serialize_int16_t+0xdc>
 800fb1e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fb22:	706b      	strb	r3, [r5, #1]
 800fb24:	6923      	ldr	r3, [r4, #16]
 800fb26:	2102      	movs	r1, #2
 800fb28:	68a2      	ldr	r2, [r4, #8]
 800fb2a:	3302      	adds	r3, #2
 800fb2c:	7da0      	ldrb	r0, [r4, #22]
 800fb2e:	4442      	add	r2, r8
 800fb30:	7561      	strb	r1, [r4, #21]
 800fb32:	1b9e      	subs	r6, r3, r6
 800fb34:	f080 0001 	eor.w	r0, r0, #1
 800fb38:	60a2      	str	r2, [r4, #8]
 800fb3a:	6126      	str	r6, [r4, #16]
 800fb3c:	b002      	add	sp, #8
 800fb3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb42:	2102      	movs	r1, #2
 800fb44:	4620      	mov	r0, r4
 800fb46:	f000 fd99 	bl	801067c <ucdr_check_final_buffer_behavior>
 800fb4a:	b190      	cbz	r0, 800fb72 <ucdr_serialize_int16_t+0xae>
 800fb4c:	7d23      	ldrb	r3, [r4, #20]
 800fb4e:	2b01      	cmp	r3, #1
 800fb50:	68a3      	ldr	r3, [r4, #8]
 800fb52:	d014      	beq.n	800fb7e <ucdr_serialize_int16_t+0xba>
 800fb54:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fb58:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fb5c:	7019      	strb	r1, [r3, #0]
 800fb5e:	68a3      	ldr	r3, [r4, #8]
 800fb60:	705a      	strb	r2, [r3, #1]
 800fb62:	2102      	movs	r1, #2
 800fb64:	68a2      	ldr	r2, [r4, #8]
 800fb66:	6923      	ldr	r3, [r4, #16]
 800fb68:	440a      	add	r2, r1
 800fb6a:	7561      	strb	r1, [r4, #21]
 800fb6c:	440b      	add	r3, r1
 800fb6e:	60a2      	str	r2, [r4, #8]
 800fb70:	6123      	str	r3, [r4, #16]
 800fb72:	7da0      	ldrb	r0, [r4, #22]
 800fb74:	f080 0001 	eor.w	r0, r0, #1
 800fb78:	b002      	add	sp, #8
 800fb7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb7e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fb82:	801a      	strh	r2, [r3, #0]
 800fb84:	e7ed      	b.n	800fb62 <ucdr_serialize_int16_t+0x9e>
 800fb86:	68a2      	ldr	r2, [r4, #8]
 800fb88:	6923      	ldr	r3, [r4, #16]
 800fb8a:	7da0      	ldrb	r0, [r4, #22]
 800fb8c:	1b92      	subs	r2, r2, r6
 800fb8e:	1b9b      	subs	r3, r3, r6
 800fb90:	7567      	strb	r7, [r4, #21]
 800fb92:	f080 0001 	eor.w	r0, r0, #1
 800fb96:	60a2      	str	r2, [r4, #8]
 800fb98:	6123      	str	r3, [r4, #16]
 800fb9a:	b002      	add	sp, #8
 800fb9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fba0:	68a3      	ldr	r3, [r4, #8]
 800fba2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fba6:	701a      	strb	r2, [r3, #0]
 800fba8:	e7bc      	b.n	800fb24 <ucdr_serialize_int16_t+0x60>
 800fbaa:	4628      	mov	r0, r5
 800fbac:	f10d 0506 	add.w	r5, sp, #6
 800fbb0:	4632      	mov	r2, r6
 800fbb2:	4629      	mov	r1, r5
 800fbb4:	f00c feaf 	bl	801c916 <memcpy>
 800fbb8:	4642      	mov	r2, r8
 800fbba:	19a9      	adds	r1, r5, r6
 800fbbc:	68a0      	ldr	r0, [r4, #8]
 800fbbe:	f00c feaa 	bl	801c916 <memcpy>
 800fbc2:	e7af      	b.n	800fb24 <ucdr_serialize_int16_t+0x60>

0800fbc4 <ucdr_serialize_endian_int16_t>:
 800fbc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fbc8:	4604      	mov	r4, r0
 800fbca:	b083      	sub	sp, #12
 800fbcc:	460d      	mov	r5, r1
 800fbce:	2102      	movs	r1, #2
 800fbd0:	f8ad 2006 	strh.w	r2, [sp, #6]
 800fbd4:	f000 fda6 	bl	8010724 <ucdr_buffer_alignment>
 800fbd8:	4601      	mov	r1, r0
 800fbda:	4620      	mov	r0, r4
 800fbdc:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fbe0:	f000 fde8 	bl	80107b4 <ucdr_advance_buffer>
 800fbe4:	2102      	movs	r1, #2
 800fbe6:	4620      	mov	r0, r4
 800fbe8:	f000 fd3c 	bl	8010664 <ucdr_check_buffer_available_for>
 800fbec:	bb70      	cbnz	r0, 800fc4c <ucdr_serialize_endian_int16_t+0x88>
 800fbee:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800fbf2:	42be      	cmp	r6, r7
 800fbf4:	d925      	bls.n	800fc42 <ucdr_serialize_endian_int16_t+0x7e>
 800fbf6:	6923      	ldr	r3, [r4, #16]
 800fbf8:	4620      	mov	r0, r4
 800fbfa:	60a6      	str	r6, [r4, #8]
 800fbfc:	1bf6      	subs	r6, r6, r7
 800fbfe:	4433      	add	r3, r6
 800fc00:	f1c6 0902 	rsb	r9, r6, #2
 800fc04:	6123      	str	r3, [r4, #16]
 800fc06:	4649      	mov	r1, r9
 800fc08:	f000 fd38 	bl	801067c <ucdr_check_final_buffer_behavior>
 800fc0c:	2800      	cmp	r0, #0
 800fc0e:	d039      	beq.n	800fc84 <ucdr_serialize_endian_int16_t+0xc0>
 800fc10:	2d01      	cmp	r5, #1
 800fc12:	d04a      	beq.n	800fcaa <ucdr_serialize_endian_int16_t+0xe6>
 800fc14:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fc18:	703b      	strb	r3, [r7, #0]
 800fc1a:	2e00      	cmp	r6, #0
 800fc1c:	d040      	beq.n	800fca0 <ucdr_serialize_endian_int16_t+0xdc>
 800fc1e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fc22:	707b      	strb	r3, [r7, #1]
 800fc24:	6923      	ldr	r3, [r4, #16]
 800fc26:	2102      	movs	r1, #2
 800fc28:	68a2      	ldr	r2, [r4, #8]
 800fc2a:	7da0      	ldrb	r0, [r4, #22]
 800fc2c:	3302      	adds	r3, #2
 800fc2e:	444a      	add	r2, r9
 800fc30:	7561      	strb	r1, [r4, #21]
 800fc32:	1b9b      	subs	r3, r3, r6
 800fc34:	f080 0001 	eor.w	r0, r0, #1
 800fc38:	60a2      	str	r2, [r4, #8]
 800fc3a:	6123      	str	r3, [r4, #16]
 800fc3c:	b003      	add	sp, #12
 800fc3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc42:	2102      	movs	r1, #2
 800fc44:	4620      	mov	r0, r4
 800fc46:	f000 fd19 	bl	801067c <ucdr_check_final_buffer_behavior>
 800fc4a:	b188      	cbz	r0, 800fc70 <ucdr_serialize_endian_int16_t+0xac>
 800fc4c:	2d01      	cmp	r5, #1
 800fc4e:	68a3      	ldr	r3, [r4, #8]
 800fc50:	d014      	beq.n	800fc7c <ucdr_serialize_endian_int16_t+0xb8>
 800fc52:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fc56:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fc5a:	7019      	strb	r1, [r3, #0]
 800fc5c:	68a3      	ldr	r3, [r4, #8]
 800fc5e:	705a      	strb	r2, [r3, #1]
 800fc60:	2102      	movs	r1, #2
 800fc62:	68a2      	ldr	r2, [r4, #8]
 800fc64:	6923      	ldr	r3, [r4, #16]
 800fc66:	440a      	add	r2, r1
 800fc68:	7561      	strb	r1, [r4, #21]
 800fc6a:	440b      	add	r3, r1
 800fc6c:	60a2      	str	r2, [r4, #8]
 800fc6e:	6123      	str	r3, [r4, #16]
 800fc70:	7da0      	ldrb	r0, [r4, #22]
 800fc72:	f080 0001 	eor.w	r0, r0, #1
 800fc76:	b003      	add	sp, #12
 800fc78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc7c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fc80:	801a      	strh	r2, [r3, #0]
 800fc82:	e7ed      	b.n	800fc60 <ucdr_serialize_endian_int16_t+0x9c>
 800fc84:	68a2      	ldr	r2, [r4, #8]
 800fc86:	6923      	ldr	r3, [r4, #16]
 800fc88:	7da0      	ldrb	r0, [r4, #22]
 800fc8a:	1b92      	subs	r2, r2, r6
 800fc8c:	1b9b      	subs	r3, r3, r6
 800fc8e:	f884 8015 	strb.w	r8, [r4, #21]
 800fc92:	f080 0001 	eor.w	r0, r0, #1
 800fc96:	60a2      	str	r2, [r4, #8]
 800fc98:	6123      	str	r3, [r4, #16]
 800fc9a:	b003      	add	sp, #12
 800fc9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fca0:	68a3      	ldr	r3, [r4, #8]
 800fca2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fca6:	701a      	strb	r2, [r3, #0]
 800fca8:	e7bc      	b.n	800fc24 <ucdr_serialize_endian_int16_t+0x60>
 800fcaa:	f10d 0506 	add.w	r5, sp, #6
 800fcae:	4632      	mov	r2, r6
 800fcb0:	4638      	mov	r0, r7
 800fcb2:	4629      	mov	r1, r5
 800fcb4:	f00c fe2f 	bl	801c916 <memcpy>
 800fcb8:	464a      	mov	r2, r9
 800fcba:	19a9      	adds	r1, r5, r6
 800fcbc:	68a0      	ldr	r0, [r4, #8]
 800fcbe:	f00c fe2a 	bl	801c916 <memcpy>
 800fcc2:	e7af      	b.n	800fc24 <ucdr_serialize_endian_int16_t+0x60>

0800fcc4 <ucdr_deserialize_int16_t>:
 800fcc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcc8:	4604      	mov	r4, r0
 800fcca:	460d      	mov	r5, r1
 800fccc:	2102      	movs	r1, #2
 800fcce:	f000 fd29 	bl	8010724 <ucdr_buffer_alignment>
 800fcd2:	4601      	mov	r1, r0
 800fcd4:	4620      	mov	r0, r4
 800fcd6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fcda:	f000 fd6b 	bl	80107b4 <ucdr_advance_buffer>
 800fcde:	2102      	movs	r1, #2
 800fce0:	4620      	mov	r0, r4
 800fce2:	f000 fcbf 	bl	8010664 <ucdr_check_buffer_available_for>
 800fce6:	bb60      	cbnz	r0, 800fd42 <ucdr_deserialize_int16_t+0x7e>
 800fce8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800fcec:	42be      	cmp	r6, r7
 800fcee:	d923      	bls.n	800fd38 <ucdr_deserialize_int16_t+0x74>
 800fcf0:	6923      	ldr	r3, [r4, #16]
 800fcf2:	4620      	mov	r0, r4
 800fcf4:	60a6      	str	r6, [r4, #8]
 800fcf6:	1bf6      	subs	r6, r6, r7
 800fcf8:	4433      	add	r3, r6
 800fcfa:	f1c6 0902 	rsb	r9, r6, #2
 800fcfe:	6123      	str	r3, [r4, #16]
 800fd00:	4649      	mov	r1, r9
 800fd02:	f000 fcbb 	bl	801067c <ucdr_check_final_buffer_behavior>
 800fd06:	2800      	cmp	r0, #0
 800fd08:	d034      	beq.n	800fd74 <ucdr_deserialize_int16_t+0xb0>
 800fd0a:	7d23      	ldrb	r3, [r4, #20]
 800fd0c:	2b01      	cmp	r3, #1
 800fd0e:	d042      	beq.n	800fd96 <ucdr_deserialize_int16_t+0xd2>
 800fd10:	787b      	ldrb	r3, [r7, #1]
 800fd12:	702b      	strb	r3, [r5, #0]
 800fd14:	2e00      	cmp	r6, #0
 800fd16:	d03a      	beq.n	800fd8e <ucdr_deserialize_int16_t+0xca>
 800fd18:	783b      	ldrb	r3, [r7, #0]
 800fd1a:	706b      	strb	r3, [r5, #1]
 800fd1c:	6923      	ldr	r3, [r4, #16]
 800fd1e:	2102      	movs	r1, #2
 800fd20:	68a2      	ldr	r2, [r4, #8]
 800fd22:	3302      	adds	r3, #2
 800fd24:	7da0      	ldrb	r0, [r4, #22]
 800fd26:	444a      	add	r2, r9
 800fd28:	7561      	strb	r1, [r4, #21]
 800fd2a:	1b9b      	subs	r3, r3, r6
 800fd2c:	f080 0001 	eor.w	r0, r0, #1
 800fd30:	60a2      	str	r2, [r4, #8]
 800fd32:	6123      	str	r3, [r4, #16]
 800fd34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd38:	2102      	movs	r1, #2
 800fd3a:	4620      	mov	r0, r4
 800fd3c:	f000 fc9e 	bl	801067c <ucdr_check_final_buffer_behavior>
 800fd40:	b180      	cbz	r0, 800fd64 <ucdr_deserialize_int16_t+0xa0>
 800fd42:	7d23      	ldrb	r3, [r4, #20]
 800fd44:	2b01      	cmp	r3, #1
 800fd46:	68a3      	ldr	r3, [r4, #8]
 800fd48:	d011      	beq.n	800fd6e <ucdr_deserialize_int16_t+0xaa>
 800fd4a:	785b      	ldrb	r3, [r3, #1]
 800fd4c:	702b      	strb	r3, [r5, #0]
 800fd4e:	68a3      	ldr	r3, [r4, #8]
 800fd50:	781b      	ldrb	r3, [r3, #0]
 800fd52:	706b      	strb	r3, [r5, #1]
 800fd54:	2102      	movs	r1, #2
 800fd56:	68a2      	ldr	r2, [r4, #8]
 800fd58:	6923      	ldr	r3, [r4, #16]
 800fd5a:	440a      	add	r2, r1
 800fd5c:	7561      	strb	r1, [r4, #21]
 800fd5e:	440b      	add	r3, r1
 800fd60:	60a2      	str	r2, [r4, #8]
 800fd62:	6123      	str	r3, [r4, #16]
 800fd64:	7da0      	ldrb	r0, [r4, #22]
 800fd66:	f080 0001 	eor.w	r0, r0, #1
 800fd6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd6e:	881b      	ldrh	r3, [r3, #0]
 800fd70:	802b      	strh	r3, [r5, #0]
 800fd72:	e7ef      	b.n	800fd54 <ucdr_deserialize_int16_t+0x90>
 800fd74:	68a2      	ldr	r2, [r4, #8]
 800fd76:	6923      	ldr	r3, [r4, #16]
 800fd78:	1b92      	subs	r2, r2, r6
 800fd7a:	7da0      	ldrb	r0, [r4, #22]
 800fd7c:	1b9b      	subs	r3, r3, r6
 800fd7e:	f884 8015 	strb.w	r8, [r4, #21]
 800fd82:	f080 0001 	eor.w	r0, r0, #1
 800fd86:	60a2      	str	r2, [r4, #8]
 800fd88:	6123      	str	r3, [r4, #16]
 800fd8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd8e:	68a3      	ldr	r3, [r4, #8]
 800fd90:	781b      	ldrb	r3, [r3, #0]
 800fd92:	706b      	strb	r3, [r5, #1]
 800fd94:	e7c2      	b.n	800fd1c <ucdr_deserialize_int16_t+0x58>
 800fd96:	4639      	mov	r1, r7
 800fd98:	4632      	mov	r2, r6
 800fd9a:	4628      	mov	r0, r5
 800fd9c:	f00c fdbb 	bl	801c916 <memcpy>
 800fda0:	464a      	mov	r2, r9
 800fda2:	19a8      	adds	r0, r5, r6
 800fda4:	68a1      	ldr	r1, [r4, #8]
 800fda6:	f00c fdb6 	bl	801c916 <memcpy>
 800fdaa:	e7b7      	b.n	800fd1c <ucdr_deserialize_int16_t+0x58>

0800fdac <ucdr_deserialize_endian_int16_t>:
 800fdac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdb0:	4604      	mov	r4, r0
 800fdb2:	460e      	mov	r6, r1
 800fdb4:	2102      	movs	r1, #2
 800fdb6:	4615      	mov	r5, r2
 800fdb8:	f000 fcb4 	bl	8010724 <ucdr_buffer_alignment>
 800fdbc:	4601      	mov	r1, r0
 800fdbe:	4620      	mov	r0, r4
 800fdc0:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fdc4:	f000 fcf6 	bl	80107b4 <ucdr_advance_buffer>
 800fdc8:	2102      	movs	r1, #2
 800fdca:	4620      	mov	r0, r4
 800fdcc:	f000 fc4a 	bl	8010664 <ucdr_check_buffer_available_for>
 800fdd0:	bb70      	cbnz	r0, 800fe30 <ucdr_deserialize_endian_int16_t+0x84>
 800fdd2:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800fdd6:	454f      	cmp	r7, r9
 800fdd8:	d925      	bls.n	800fe26 <ucdr_deserialize_endian_int16_t+0x7a>
 800fdda:	6923      	ldr	r3, [r4, #16]
 800fddc:	4620      	mov	r0, r4
 800fdde:	60a7      	str	r7, [r4, #8]
 800fde0:	eba7 0709 	sub.w	r7, r7, r9
 800fde4:	443b      	add	r3, r7
 800fde6:	f1c7 0a02 	rsb	sl, r7, #2
 800fdea:	6123      	str	r3, [r4, #16]
 800fdec:	4651      	mov	r1, sl
 800fdee:	f000 fc45 	bl	801067c <ucdr_check_final_buffer_behavior>
 800fdf2:	2800      	cmp	r0, #0
 800fdf4:	d034      	beq.n	800fe60 <ucdr_deserialize_endian_int16_t+0xb4>
 800fdf6:	2e01      	cmp	r6, #1
 800fdf8:	d043      	beq.n	800fe82 <ucdr_deserialize_endian_int16_t+0xd6>
 800fdfa:	f899 3001 	ldrb.w	r3, [r9, #1]
 800fdfe:	702b      	strb	r3, [r5, #0]
 800fe00:	2f00      	cmp	r7, #0
 800fe02:	d03a      	beq.n	800fe7a <ucdr_deserialize_endian_int16_t+0xce>
 800fe04:	f899 3000 	ldrb.w	r3, [r9]
 800fe08:	706b      	strb	r3, [r5, #1]
 800fe0a:	6923      	ldr	r3, [r4, #16]
 800fe0c:	2102      	movs	r1, #2
 800fe0e:	68a2      	ldr	r2, [r4, #8]
 800fe10:	3302      	adds	r3, #2
 800fe12:	7da0      	ldrb	r0, [r4, #22]
 800fe14:	4452      	add	r2, sl
 800fe16:	7561      	strb	r1, [r4, #21]
 800fe18:	1bdb      	subs	r3, r3, r7
 800fe1a:	f080 0001 	eor.w	r0, r0, #1
 800fe1e:	60a2      	str	r2, [r4, #8]
 800fe20:	6123      	str	r3, [r4, #16]
 800fe22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe26:	2102      	movs	r1, #2
 800fe28:	4620      	mov	r0, r4
 800fe2a:	f000 fc27 	bl	801067c <ucdr_check_final_buffer_behavior>
 800fe2e:	b178      	cbz	r0, 800fe50 <ucdr_deserialize_endian_int16_t+0xa4>
 800fe30:	2e01      	cmp	r6, #1
 800fe32:	68a3      	ldr	r3, [r4, #8]
 800fe34:	d011      	beq.n	800fe5a <ucdr_deserialize_endian_int16_t+0xae>
 800fe36:	785b      	ldrb	r3, [r3, #1]
 800fe38:	702b      	strb	r3, [r5, #0]
 800fe3a:	68a3      	ldr	r3, [r4, #8]
 800fe3c:	781b      	ldrb	r3, [r3, #0]
 800fe3e:	706b      	strb	r3, [r5, #1]
 800fe40:	2102      	movs	r1, #2
 800fe42:	68a2      	ldr	r2, [r4, #8]
 800fe44:	6923      	ldr	r3, [r4, #16]
 800fe46:	440a      	add	r2, r1
 800fe48:	7561      	strb	r1, [r4, #21]
 800fe4a:	440b      	add	r3, r1
 800fe4c:	60a2      	str	r2, [r4, #8]
 800fe4e:	6123      	str	r3, [r4, #16]
 800fe50:	7da0      	ldrb	r0, [r4, #22]
 800fe52:	f080 0001 	eor.w	r0, r0, #1
 800fe56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe5a:	881b      	ldrh	r3, [r3, #0]
 800fe5c:	802b      	strh	r3, [r5, #0]
 800fe5e:	e7ef      	b.n	800fe40 <ucdr_deserialize_endian_int16_t+0x94>
 800fe60:	68a2      	ldr	r2, [r4, #8]
 800fe62:	6923      	ldr	r3, [r4, #16]
 800fe64:	1bd2      	subs	r2, r2, r7
 800fe66:	7da0      	ldrb	r0, [r4, #22]
 800fe68:	1bdb      	subs	r3, r3, r7
 800fe6a:	f884 8015 	strb.w	r8, [r4, #21]
 800fe6e:	f080 0001 	eor.w	r0, r0, #1
 800fe72:	60a2      	str	r2, [r4, #8]
 800fe74:	6123      	str	r3, [r4, #16]
 800fe76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe7a:	68a3      	ldr	r3, [r4, #8]
 800fe7c:	781b      	ldrb	r3, [r3, #0]
 800fe7e:	706b      	strb	r3, [r5, #1]
 800fe80:	e7c3      	b.n	800fe0a <ucdr_deserialize_endian_int16_t+0x5e>
 800fe82:	4649      	mov	r1, r9
 800fe84:	463a      	mov	r2, r7
 800fe86:	4628      	mov	r0, r5
 800fe88:	f00c fd45 	bl	801c916 <memcpy>
 800fe8c:	4652      	mov	r2, sl
 800fe8e:	19e8      	adds	r0, r5, r7
 800fe90:	68a1      	ldr	r1, [r4, #8]
 800fe92:	f00c fd40 	bl	801c916 <memcpy>
 800fe96:	e7b8      	b.n	800fe0a <ucdr_deserialize_endian_int16_t+0x5e>

0800fe98 <ucdr_serialize_int32_t>:
 800fe98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe9c:	b082      	sub	sp, #8
 800fe9e:	4604      	mov	r4, r0
 800fea0:	9101      	str	r1, [sp, #4]
 800fea2:	2104      	movs	r1, #4
 800fea4:	f000 fc3e 	bl	8010724 <ucdr_buffer_alignment>
 800fea8:	4601      	mov	r1, r0
 800feaa:	4620      	mov	r0, r4
 800feac:	7d67      	ldrb	r7, [r4, #21]
 800feae:	f000 fc81 	bl	80107b4 <ucdr_advance_buffer>
 800feb2:	2104      	movs	r1, #4
 800feb4:	4620      	mov	r0, r4
 800feb6:	f000 fbd5 	bl	8010664 <ucdr_check_buffer_available_for>
 800feba:	2800      	cmp	r0, #0
 800febc:	d139      	bne.n	800ff32 <ucdr_serialize_int32_t+0x9a>
 800febe:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fec2:	42ab      	cmp	r3, r5
 800fec4:	d930      	bls.n	800ff28 <ucdr_serialize_int32_t+0x90>
 800fec6:	1b5e      	subs	r6, r3, r5
 800fec8:	60a3      	str	r3, [r4, #8]
 800feca:	6923      	ldr	r3, [r4, #16]
 800fecc:	4620      	mov	r0, r4
 800fece:	f1c6 0804 	rsb	r8, r6, #4
 800fed2:	4433      	add	r3, r6
 800fed4:	4641      	mov	r1, r8
 800fed6:	6123      	str	r3, [r4, #16]
 800fed8:	f000 fbd0 	bl	801067c <ucdr_check_final_buffer_behavior>
 800fedc:	2800      	cmp	r0, #0
 800fede:	d04c      	beq.n	800ff7a <ucdr_serialize_int32_t+0xe2>
 800fee0:	7d23      	ldrb	r3, [r4, #20]
 800fee2:	2b01      	cmp	r3, #1
 800fee4:	d063      	beq.n	800ffae <ucdr_serialize_int32_t+0x116>
 800fee6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800feea:	702b      	strb	r3, [r5, #0]
 800feec:	2e00      	cmp	r6, #0
 800feee:	d051      	beq.n	800ff94 <ucdr_serialize_int32_t+0xfc>
 800fef0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fef4:	2e01      	cmp	r6, #1
 800fef6:	706b      	strb	r3, [r5, #1]
 800fef8:	d050      	beq.n	800ff9c <ucdr_serialize_int32_t+0x104>
 800fefa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fefe:	2e02      	cmp	r6, #2
 800ff00:	70ab      	strb	r3, [r5, #2]
 800ff02:	d04f      	beq.n	800ffa4 <ucdr_serialize_int32_t+0x10c>
 800ff04:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ff08:	70eb      	strb	r3, [r5, #3]
 800ff0a:	6923      	ldr	r3, [r4, #16]
 800ff0c:	2104      	movs	r1, #4
 800ff0e:	68a2      	ldr	r2, [r4, #8]
 800ff10:	3304      	adds	r3, #4
 800ff12:	7da0      	ldrb	r0, [r4, #22]
 800ff14:	4442      	add	r2, r8
 800ff16:	7561      	strb	r1, [r4, #21]
 800ff18:	1b9e      	subs	r6, r3, r6
 800ff1a:	f080 0001 	eor.w	r0, r0, #1
 800ff1e:	60a2      	str	r2, [r4, #8]
 800ff20:	6126      	str	r6, [r4, #16]
 800ff22:	b002      	add	sp, #8
 800ff24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff28:	2104      	movs	r1, #4
 800ff2a:	4620      	mov	r0, r4
 800ff2c:	f000 fba6 	bl	801067c <ucdr_check_final_buffer_behavior>
 800ff30:	b1d0      	cbz	r0, 800ff68 <ucdr_serialize_int32_t+0xd0>
 800ff32:	7d23      	ldrb	r3, [r4, #20]
 800ff34:	2b01      	cmp	r3, #1
 800ff36:	68a3      	ldr	r3, [r4, #8]
 800ff38:	d01c      	beq.n	800ff74 <ucdr_serialize_int32_t+0xdc>
 800ff3a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ff3e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ff42:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800ff46:	7018      	strb	r0, [r3, #0]
 800ff48:	68a3      	ldr	r3, [r4, #8]
 800ff4a:	705a      	strb	r2, [r3, #1]
 800ff4c:	68a3      	ldr	r3, [r4, #8]
 800ff4e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ff52:	7099      	strb	r1, [r3, #2]
 800ff54:	68a3      	ldr	r3, [r4, #8]
 800ff56:	70da      	strb	r2, [r3, #3]
 800ff58:	2104      	movs	r1, #4
 800ff5a:	68a2      	ldr	r2, [r4, #8]
 800ff5c:	6923      	ldr	r3, [r4, #16]
 800ff5e:	440a      	add	r2, r1
 800ff60:	7561      	strb	r1, [r4, #21]
 800ff62:	440b      	add	r3, r1
 800ff64:	60a2      	str	r2, [r4, #8]
 800ff66:	6123      	str	r3, [r4, #16]
 800ff68:	7da0      	ldrb	r0, [r4, #22]
 800ff6a:	f080 0001 	eor.w	r0, r0, #1
 800ff6e:	b002      	add	sp, #8
 800ff70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff74:	9a01      	ldr	r2, [sp, #4]
 800ff76:	601a      	str	r2, [r3, #0]
 800ff78:	e7ee      	b.n	800ff58 <ucdr_serialize_int32_t+0xc0>
 800ff7a:	68a2      	ldr	r2, [r4, #8]
 800ff7c:	6923      	ldr	r3, [r4, #16]
 800ff7e:	7da0      	ldrb	r0, [r4, #22]
 800ff80:	1b92      	subs	r2, r2, r6
 800ff82:	1b9b      	subs	r3, r3, r6
 800ff84:	7567      	strb	r7, [r4, #21]
 800ff86:	f080 0001 	eor.w	r0, r0, #1
 800ff8a:	60a2      	str	r2, [r4, #8]
 800ff8c:	6123      	str	r3, [r4, #16]
 800ff8e:	b002      	add	sp, #8
 800ff90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff94:	68a3      	ldr	r3, [r4, #8]
 800ff96:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ff9a:	701a      	strb	r2, [r3, #0]
 800ff9c:	68a3      	ldr	r3, [r4, #8]
 800ff9e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ffa2:	701a      	strb	r2, [r3, #0]
 800ffa4:	68a3      	ldr	r3, [r4, #8]
 800ffa6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ffaa:	701a      	strb	r2, [r3, #0]
 800ffac:	e7ad      	b.n	800ff0a <ucdr_serialize_int32_t+0x72>
 800ffae:	4628      	mov	r0, r5
 800ffb0:	ad01      	add	r5, sp, #4
 800ffb2:	4632      	mov	r2, r6
 800ffb4:	4629      	mov	r1, r5
 800ffb6:	f00c fcae 	bl	801c916 <memcpy>
 800ffba:	4642      	mov	r2, r8
 800ffbc:	19a9      	adds	r1, r5, r6
 800ffbe:	68a0      	ldr	r0, [r4, #8]
 800ffc0:	f00c fca9 	bl	801c916 <memcpy>
 800ffc4:	e7a1      	b.n	800ff0a <ucdr_serialize_int32_t+0x72>
 800ffc6:	bf00      	nop

0800ffc8 <ucdr_deserialize_int32_t>:
 800ffc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffcc:	4604      	mov	r4, r0
 800ffce:	460d      	mov	r5, r1
 800ffd0:	2104      	movs	r1, #4
 800ffd2:	f000 fba7 	bl	8010724 <ucdr_buffer_alignment>
 800ffd6:	4601      	mov	r1, r0
 800ffd8:	4620      	mov	r0, r4
 800ffda:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ffde:	f000 fbe9 	bl	80107b4 <ucdr_advance_buffer>
 800ffe2:	2104      	movs	r1, #4
 800ffe4:	4620      	mov	r0, r4
 800ffe6:	f000 fb3d 	bl	8010664 <ucdr_check_buffer_available_for>
 800ffea:	2800      	cmp	r0, #0
 800ffec:	d138      	bne.n	8010060 <ucdr_deserialize_int32_t+0x98>
 800ffee:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800fff2:	42b7      	cmp	r7, r6
 800fff4:	d92f      	bls.n	8010056 <ucdr_deserialize_int32_t+0x8e>
 800fff6:	6923      	ldr	r3, [r4, #16]
 800fff8:	4620      	mov	r0, r4
 800fffa:	60a7      	str	r7, [r4, #8]
 800fffc:	1bbf      	subs	r7, r7, r6
 800fffe:	443b      	add	r3, r7
 8010000:	f1c7 0904 	rsb	r9, r7, #4
 8010004:	6123      	str	r3, [r4, #16]
 8010006:	4649      	mov	r1, r9
 8010008:	f000 fb38 	bl	801067c <ucdr_check_final_buffer_behavior>
 801000c:	2800      	cmp	r0, #0
 801000e:	d046      	beq.n	801009e <ucdr_deserialize_int32_t+0xd6>
 8010010:	7d23      	ldrb	r3, [r4, #20]
 8010012:	2b01      	cmp	r3, #1
 8010014:	d05c      	beq.n	80100d0 <ucdr_deserialize_int32_t+0x108>
 8010016:	78f3      	ldrb	r3, [r6, #3]
 8010018:	702b      	strb	r3, [r5, #0]
 801001a:	2f00      	cmp	r7, #0
 801001c:	d04c      	beq.n	80100b8 <ucdr_deserialize_int32_t+0xf0>
 801001e:	78b3      	ldrb	r3, [r6, #2]
 8010020:	2f01      	cmp	r7, #1
 8010022:	706b      	strb	r3, [r5, #1]
 8010024:	f105 0302 	add.w	r3, r5, #2
 8010028:	d04a      	beq.n	80100c0 <ucdr_deserialize_int32_t+0xf8>
 801002a:	7873      	ldrb	r3, [r6, #1]
 801002c:	2f02      	cmp	r7, #2
 801002e:	70ab      	strb	r3, [r5, #2]
 8010030:	f105 0303 	add.w	r3, r5, #3
 8010034:	d048      	beq.n	80100c8 <ucdr_deserialize_int32_t+0x100>
 8010036:	7833      	ldrb	r3, [r6, #0]
 8010038:	70eb      	strb	r3, [r5, #3]
 801003a:	6923      	ldr	r3, [r4, #16]
 801003c:	2104      	movs	r1, #4
 801003e:	68a2      	ldr	r2, [r4, #8]
 8010040:	3304      	adds	r3, #4
 8010042:	7da0      	ldrb	r0, [r4, #22]
 8010044:	444a      	add	r2, r9
 8010046:	7561      	strb	r1, [r4, #21]
 8010048:	1bdb      	subs	r3, r3, r7
 801004a:	f080 0001 	eor.w	r0, r0, #1
 801004e:	60a2      	str	r2, [r4, #8]
 8010050:	6123      	str	r3, [r4, #16]
 8010052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010056:	2104      	movs	r1, #4
 8010058:	4620      	mov	r0, r4
 801005a:	f000 fb0f 	bl	801067c <ucdr_check_final_buffer_behavior>
 801005e:	b1b0      	cbz	r0, 801008e <ucdr_deserialize_int32_t+0xc6>
 8010060:	7d23      	ldrb	r3, [r4, #20]
 8010062:	2b01      	cmp	r3, #1
 8010064:	68a3      	ldr	r3, [r4, #8]
 8010066:	d017      	beq.n	8010098 <ucdr_deserialize_int32_t+0xd0>
 8010068:	78db      	ldrb	r3, [r3, #3]
 801006a:	702b      	strb	r3, [r5, #0]
 801006c:	68a3      	ldr	r3, [r4, #8]
 801006e:	789b      	ldrb	r3, [r3, #2]
 8010070:	706b      	strb	r3, [r5, #1]
 8010072:	68a3      	ldr	r3, [r4, #8]
 8010074:	785b      	ldrb	r3, [r3, #1]
 8010076:	70ab      	strb	r3, [r5, #2]
 8010078:	68a3      	ldr	r3, [r4, #8]
 801007a:	781b      	ldrb	r3, [r3, #0]
 801007c:	70eb      	strb	r3, [r5, #3]
 801007e:	2104      	movs	r1, #4
 8010080:	68a2      	ldr	r2, [r4, #8]
 8010082:	6923      	ldr	r3, [r4, #16]
 8010084:	440a      	add	r2, r1
 8010086:	7561      	strb	r1, [r4, #21]
 8010088:	440b      	add	r3, r1
 801008a:	60a2      	str	r2, [r4, #8]
 801008c:	6123      	str	r3, [r4, #16]
 801008e:	7da0      	ldrb	r0, [r4, #22]
 8010090:	f080 0001 	eor.w	r0, r0, #1
 8010094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	602b      	str	r3, [r5, #0]
 801009c:	e7ef      	b.n	801007e <ucdr_deserialize_int32_t+0xb6>
 801009e:	68a2      	ldr	r2, [r4, #8]
 80100a0:	6923      	ldr	r3, [r4, #16]
 80100a2:	1bd2      	subs	r2, r2, r7
 80100a4:	7da0      	ldrb	r0, [r4, #22]
 80100a6:	1bdb      	subs	r3, r3, r7
 80100a8:	f884 8015 	strb.w	r8, [r4, #21]
 80100ac:	f080 0001 	eor.w	r0, r0, #1
 80100b0:	60a2      	str	r2, [r4, #8]
 80100b2:	6123      	str	r3, [r4, #16]
 80100b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100b8:	68a3      	ldr	r3, [r4, #8]
 80100ba:	789b      	ldrb	r3, [r3, #2]
 80100bc:	706b      	strb	r3, [r5, #1]
 80100be:	1cab      	adds	r3, r5, #2
 80100c0:	68a2      	ldr	r2, [r4, #8]
 80100c2:	7852      	ldrb	r2, [r2, #1]
 80100c4:	f803 2b01 	strb.w	r2, [r3], #1
 80100c8:	68a2      	ldr	r2, [r4, #8]
 80100ca:	7812      	ldrb	r2, [r2, #0]
 80100cc:	701a      	strb	r2, [r3, #0]
 80100ce:	e7b4      	b.n	801003a <ucdr_deserialize_int32_t+0x72>
 80100d0:	4631      	mov	r1, r6
 80100d2:	463a      	mov	r2, r7
 80100d4:	4628      	mov	r0, r5
 80100d6:	f00c fc1e 	bl	801c916 <memcpy>
 80100da:	464a      	mov	r2, r9
 80100dc:	19e8      	adds	r0, r5, r7
 80100de:	68a1      	ldr	r1, [r4, #8]
 80100e0:	f00c fc19 	bl	801c916 <memcpy>
 80100e4:	e7a9      	b.n	801003a <ucdr_deserialize_int32_t+0x72>
 80100e6:	bf00      	nop

080100e8 <ucdr_serialize_int64_t>:
 80100e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100ec:	4604      	mov	r4, r0
 80100ee:	b082      	sub	sp, #8
 80100f0:	2108      	movs	r1, #8
 80100f2:	e9cd 2300 	strd	r2, r3, [sp]
 80100f6:	f000 fb15 	bl	8010724 <ucdr_buffer_alignment>
 80100fa:	4601      	mov	r1, r0
 80100fc:	4620      	mov	r0, r4
 80100fe:	7d67      	ldrb	r7, [r4, #21]
 8010100:	f000 fb58 	bl	80107b4 <ucdr_advance_buffer>
 8010104:	2108      	movs	r1, #8
 8010106:	4620      	mov	r0, r4
 8010108:	f000 faac 	bl	8010664 <ucdr_check_buffer_available_for>
 801010c:	2800      	cmp	r0, #0
 801010e:	d14e      	bne.n	80101ae <ucdr_serialize_int64_t+0xc6>
 8010110:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010114:	42ab      	cmp	r3, r5
 8010116:	d945      	bls.n	80101a4 <ucdr_serialize_int64_t+0xbc>
 8010118:	1b5e      	subs	r6, r3, r5
 801011a:	60a3      	str	r3, [r4, #8]
 801011c:	6923      	ldr	r3, [r4, #16]
 801011e:	4620      	mov	r0, r4
 8010120:	f1c6 0808 	rsb	r8, r6, #8
 8010124:	4433      	add	r3, r6
 8010126:	4641      	mov	r1, r8
 8010128:	6123      	str	r3, [r4, #16]
 801012a:	f000 faa7 	bl	801067c <ucdr_check_final_buffer_behavior>
 801012e:	2800      	cmp	r0, #0
 8010130:	d074      	beq.n	801021c <ucdr_serialize_int64_t+0x134>
 8010132:	7d23      	ldrb	r3, [r4, #20]
 8010134:	2b01      	cmp	r3, #1
 8010136:	f000 809b 	beq.w	8010270 <ucdr_serialize_int64_t+0x188>
 801013a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801013e:	702b      	strb	r3, [r5, #0]
 8010140:	2e00      	cmp	r6, #0
 8010142:	d078      	beq.n	8010236 <ucdr_serialize_int64_t+0x14e>
 8010144:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010148:	2e01      	cmp	r6, #1
 801014a:	706b      	strb	r3, [r5, #1]
 801014c:	d077      	beq.n	801023e <ucdr_serialize_int64_t+0x156>
 801014e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010152:	2e02      	cmp	r6, #2
 8010154:	70ab      	strb	r3, [r5, #2]
 8010156:	d076      	beq.n	8010246 <ucdr_serialize_int64_t+0x15e>
 8010158:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801015c:	2e03      	cmp	r6, #3
 801015e:	70eb      	strb	r3, [r5, #3]
 8010160:	d075      	beq.n	801024e <ucdr_serialize_int64_t+0x166>
 8010162:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8010166:	2e04      	cmp	r6, #4
 8010168:	712b      	strb	r3, [r5, #4]
 801016a:	d074      	beq.n	8010256 <ucdr_serialize_int64_t+0x16e>
 801016c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8010170:	2e05      	cmp	r6, #5
 8010172:	716b      	strb	r3, [r5, #5]
 8010174:	d073      	beq.n	801025e <ucdr_serialize_int64_t+0x176>
 8010176:	f89d 3001 	ldrb.w	r3, [sp, #1]
 801017a:	2e06      	cmp	r6, #6
 801017c:	71ab      	strb	r3, [r5, #6]
 801017e:	d072      	beq.n	8010266 <ucdr_serialize_int64_t+0x17e>
 8010180:	f89d 3000 	ldrb.w	r3, [sp]
 8010184:	71eb      	strb	r3, [r5, #7]
 8010186:	6923      	ldr	r3, [r4, #16]
 8010188:	2108      	movs	r1, #8
 801018a:	68a2      	ldr	r2, [r4, #8]
 801018c:	3308      	adds	r3, #8
 801018e:	7da0      	ldrb	r0, [r4, #22]
 8010190:	4442      	add	r2, r8
 8010192:	7561      	strb	r1, [r4, #21]
 8010194:	1b9e      	subs	r6, r3, r6
 8010196:	f080 0001 	eor.w	r0, r0, #1
 801019a:	60a2      	str	r2, [r4, #8]
 801019c:	6126      	str	r6, [r4, #16]
 801019e:	b002      	add	sp, #8
 80101a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101a4:	2108      	movs	r1, #8
 80101a6:	4620      	mov	r0, r4
 80101a8:	f000 fa68 	bl	801067c <ucdr_check_final_buffer_behavior>
 80101ac:	b350      	cbz	r0, 8010204 <ucdr_serialize_int64_t+0x11c>
 80101ae:	7d23      	ldrb	r3, [r4, #20]
 80101b0:	2b01      	cmp	r3, #1
 80101b2:	d02d      	beq.n	8010210 <ucdr_serialize_int64_t+0x128>
 80101b4:	68a3      	ldr	r3, [r4, #8]
 80101b6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80101ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80101be:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80101c2:	7018      	strb	r0, [r3, #0]
 80101c4:	68a3      	ldr	r3, [r4, #8]
 80101c6:	705a      	strb	r2, [r3, #1]
 80101c8:	68a3      	ldr	r3, [r4, #8]
 80101ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80101ce:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80101d2:	7099      	strb	r1, [r3, #2]
 80101d4:	68a3      	ldr	r3, [r4, #8]
 80101d6:	70da      	strb	r2, [r3, #3]
 80101d8:	68a3      	ldr	r3, [r4, #8]
 80101da:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80101de:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80101e2:	7118      	strb	r0, [r3, #4]
 80101e4:	68a3      	ldr	r3, [r4, #8]
 80101e6:	715a      	strb	r2, [r3, #5]
 80101e8:	68a3      	ldr	r3, [r4, #8]
 80101ea:	f89d 2000 	ldrb.w	r2, [sp]
 80101ee:	7199      	strb	r1, [r3, #6]
 80101f0:	68a3      	ldr	r3, [r4, #8]
 80101f2:	71da      	strb	r2, [r3, #7]
 80101f4:	2108      	movs	r1, #8
 80101f6:	68a2      	ldr	r2, [r4, #8]
 80101f8:	6923      	ldr	r3, [r4, #16]
 80101fa:	440a      	add	r2, r1
 80101fc:	7561      	strb	r1, [r4, #21]
 80101fe:	440b      	add	r3, r1
 8010200:	60a2      	str	r2, [r4, #8]
 8010202:	6123      	str	r3, [r4, #16]
 8010204:	7da0      	ldrb	r0, [r4, #22]
 8010206:	f080 0001 	eor.w	r0, r0, #1
 801020a:	b002      	add	sp, #8
 801020c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010210:	466b      	mov	r3, sp
 8010212:	68a2      	ldr	r2, [r4, #8]
 8010214:	cb03      	ldmia	r3!, {r0, r1}
 8010216:	6010      	str	r0, [r2, #0]
 8010218:	6051      	str	r1, [r2, #4]
 801021a:	e7eb      	b.n	80101f4 <ucdr_serialize_int64_t+0x10c>
 801021c:	68a2      	ldr	r2, [r4, #8]
 801021e:	6923      	ldr	r3, [r4, #16]
 8010220:	7da0      	ldrb	r0, [r4, #22]
 8010222:	1b92      	subs	r2, r2, r6
 8010224:	1b9b      	subs	r3, r3, r6
 8010226:	7567      	strb	r7, [r4, #21]
 8010228:	f080 0001 	eor.w	r0, r0, #1
 801022c:	60a2      	str	r2, [r4, #8]
 801022e:	6123      	str	r3, [r4, #16]
 8010230:	b002      	add	sp, #8
 8010232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010236:	68a3      	ldr	r3, [r4, #8]
 8010238:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801023c:	701a      	strb	r2, [r3, #0]
 801023e:	68a3      	ldr	r3, [r4, #8]
 8010240:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010244:	701a      	strb	r2, [r3, #0]
 8010246:	68a3      	ldr	r3, [r4, #8]
 8010248:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801024c:	701a      	strb	r2, [r3, #0]
 801024e:	68a3      	ldr	r3, [r4, #8]
 8010250:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010254:	701a      	strb	r2, [r3, #0]
 8010256:	68a3      	ldr	r3, [r4, #8]
 8010258:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801025c:	701a      	strb	r2, [r3, #0]
 801025e:	68a3      	ldr	r3, [r4, #8]
 8010260:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010264:	701a      	strb	r2, [r3, #0]
 8010266:	68a3      	ldr	r3, [r4, #8]
 8010268:	f89d 2000 	ldrb.w	r2, [sp]
 801026c:	701a      	strb	r2, [r3, #0]
 801026e:	e78a      	b.n	8010186 <ucdr_serialize_int64_t+0x9e>
 8010270:	4628      	mov	r0, r5
 8010272:	466d      	mov	r5, sp
 8010274:	4632      	mov	r2, r6
 8010276:	4629      	mov	r1, r5
 8010278:	f00c fb4d 	bl	801c916 <memcpy>
 801027c:	4642      	mov	r2, r8
 801027e:	19a9      	adds	r1, r5, r6
 8010280:	68a0      	ldr	r0, [r4, #8]
 8010282:	f00c fb48 	bl	801c916 <memcpy>
 8010286:	e77e      	b.n	8010186 <ucdr_serialize_int64_t+0x9e>

08010288 <ucdr_deserialize_int64_t>:
 8010288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801028c:	4604      	mov	r4, r0
 801028e:	460d      	mov	r5, r1
 8010290:	2108      	movs	r1, #8
 8010292:	f000 fa47 	bl	8010724 <ucdr_buffer_alignment>
 8010296:	4601      	mov	r1, r0
 8010298:	4620      	mov	r0, r4
 801029a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801029e:	f000 fa89 	bl	80107b4 <ucdr_advance_buffer>
 80102a2:	2108      	movs	r1, #8
 80102a4:	4620      	mov	r0, r4
 80102a6:	f000 f9dd 	bl	8010664 <ucdr_check_buffer_available_for>
 80102aa:	2800      	cmp	r0, #0
 80102ac:	d151      	bne.n	8010352 <ucdr_deserialize_int64_t+0xca>
 80102ae:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80102b2:	42be      	cmp	r6, r7
 80102b4:	d948      	bls.n	8010348 <ucdr_deserialize_int64_t+0xc0>
 80102b6:	6923      	ldr	r3, [r4, #16]
 80102b8:	4620      	mov	r0, r4
 80102ba:	60a6      	str	r6, [r4, #8]
 80102bc:	1bf6      	subs	r6, r6, r7
 80102be:	4433      	add	r3, r6
 80102c0:	f1c6 0908 	rsb	r9, r6, #8
 80102c4:	6123      	str	r3, [r4, #16]
 80102c6:	4649      	mov	r1, r9
 80102c8:	f000 f9d8 	bl	801067c <ucdr_check_final_buffer_behavior>
 80102cc:	2800      	cmp	r0, #0
 80102ce:	d06d      	beq.n	80103ac <ucdr_deserialize_int64_t+0x124>
 80102d0:	7d23      	ldrb	r3, [r4, #20]
 80102d2:	2b01      	cmp	r3, #1
 80102d4:	f000 8093 	beq.w	80103fe <ucdr_deserialize_int64_t+0x176>
 80102d8:	79fb      	ldrb	r3, [r7, #7]
 80102da:	702b      	strb	r3, [r5, #0]
 80102dc:	2e00      	cmp	r6, #0
 80102de:	d072      	beq.n	80103c6 <ucdr_deserialize_int64_t+0x13e>
 80102e0:	79bb      	ldrb	r3, [r7, #6]
 80102e2:	2e01      	cmp	r6, #1
 80102e4:	706b      	strb	r3, [r5, #1]
 80102e6:	f105 0302 	add.w	r3, r5, #2
 80102ea:	d070      	beq.n	80103ce <ucdr_deserialize_int64_t+0x146>
 80102ec:	797b      	ldrb	r3, [r7, #5]
 80102ee:	2e02      	cmp	r6, #2
 80102f0:	70ab      	strb	r3, [r5, #2]
 80102f2:	f105 0303 	add.w	r3, r5, #3
 80102f6:	d06e      	beq.n	80103d6 <ucdr_deserialize_int64_t+0x14e>
 80102f8:	793b      	ldrb	r3, [r7, #4]
 80102fa:	2e03      	cmp	r6, #3
 80102fc:	70eb      	strb	r3, [r5, #3]
 80102fe:	f105 0304 	add.w	r3, r5, #4
 8010302:	d06c      	beq.n	80103de <ucdr_deserialize_int64_t+0x156>
 8010304:	78fb      	ldrb	r3, [r7, #3]
 8010306:	2e04      	cmp	r6, #4
 8010308:	712b      	strb	r3, [r5, #4]
 801030a:	f105 0305 	add.w	r3, r5, #5
 801030e:	d06a      	beq.n	80103e6 <ucdr_deserialize_int64_t+0x15e>
 8010310:	78bb      	ldrb	r3, [r7, #2]
 8010312:	2e05      	cmp	r6, #5
 8010314:	716b      	strb	r3, [r5, #5]
 8010316:	f105 0306 	add.w	r3, r5, #6
 801031a:	d068      	beq.n	80103ee <ucdr_deserialize_int64_t+0x166>
 801031c:	787b      	ldrb	r3, [r7, #1]
 801031e:	2e06      	cmp	r6, #6
 8010320:	71ab      	strb	r3, [r5, #6]
 8010322:	f105 0307 	add.w	r3, r5, #7
 8010326:	d066      	beq.n	80103f6 <ucdr_deserialize_int64_t+0x16e>
 8010328:	783b      	ldrb	r3, [r7, #0]
 801032a:	71eb      	strb	r3, [r5, #7]
 801032c:	6923      	ldr	r3, [r4, #16]
 801032e:	2108      	movs	r1, #8
 8010330:	68a2      	ldr	r2, [r4, #8]
 8010332:	3308      	adds	r3, #8
 8010334:	7da0      	ldrb	r0, [r4, #22]
 8010336:	444a      	add	r2, r9
 8010338:	7561      	strb	r1, [r4, #21]
 801033a:	1b9e      	subs	r6, r3, r6
 801033c:	f080 0001 	eor.w	r0, r0, #1
 8010340:	60a2      	str	r2, [r4, #8]
 8010342:	6126      	str	r6, [r4, #16]
 8010344:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010348:	2108      	movs	r1, #8
 801034a:	4620      	mov	r0, r4
 801034c:	f000 f996 	bl	801067c <ucdr_check_final_buffer_behavior>
 8010350:	b310      	cbz	r0, 8010398 <ucdr_deserialize_int64_t+0x110>
 8010352:	7d23      	ldrb	r3, [r4, #20]
 8010354:	2b01      	cmp	r3, #1
 8010356:	68a3      	ldr	r3, [r4, #8]
 8010358:	d023      	beq.n	80103a2 <ucdr_deserialize_int64_t+0x11a>
 801035a:	79db      	ldrb	r3, [r3, #7]
 801035c:	702b      	strb	r3, [r5, #0]
 801035e:	68a3      	ldr	r3, [r4, #8]
 8010360:	799b      	ldrb	r3, [r3, #6]
 8010362:	706b      	strb	r3, [r5, #1]
 8010364:	68a3      	ldr	r3, [r4, #8]
 8010366:	795b      	ldrb	r3, [r3, #5]
 8010368:	70ab      	strb	r3, [r5, #2]
 801036a:	68a3      	ldr	r3, [r4, #8]
 801036c:	791b      	ldrb	r3, [r3, #4]
 801036e:	70eb      	strb	r3, [r5, #3]
 8010370:	68a3      	ldr	r3, [r4, #8]
 8010372:	78db      	ldrb	r3, [r3, #3]
 8010374:	712b      	strb	r3, [r5, #4]
 8010376:	68a3      	ldr	r3, [r4, #8]
 8010378:	789b      	ldrb	r3, [r3, #2]
 801037a:	716b      	strb	r3, [r5, #5]
 801037c:	68a3      	ldr	r3, [r4, #8]
 801037e:	785b      	ldrb	r3, [r3, #1]
 8010380:	71ab      	strb	r3, [r5, #6]
 8010382:	68a3      	ldr	r3, [r4, #8]
 8010384:	781b      	ldrb	r3, [r3, #0]
 8010386:	71eb      	strb	r3, [r5, #7]
 8010388:	2108      	movs	r1, #8
 801038a:	68a2      	ldr	r2, [r4, #8]
 801038c:	6923      	ldr	r3, [r4, #16]
 801038e:	440a      	add	r2, r1
 8010390:	7561      	strb	r1, [r4, #21]
 8010392:	440b      	add	r3, r1
 8010394:	60a2      	str	r2, [r4, #8]
 8010396:	6123      	str	r3, [r4, #16]
 8010398:	7da0      	ldrb	r0, [r4, #22]
 801039a:	f080 0001 	eor.w	r0, r0, #1
 801039e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103a2:	681a      	ldr	r2, [r3, #0]
 80103a4:	685b      	ldr	r3, [r3, #4]
 80103a6:	602a      	str	r2, [r5, #0]
 80103a8:	606b      	str	r3, [r5, #4]
 80103aa:	e7ed      	b.n	8010388 <ucdr_deserialize_int64_t+0x100>
 80103ac:	68a2      	ldr	r2, [r4, #8]
 80103ae:	6923      	ldr	r3, [r4, #16]
 80103b0:	1b92      	subs	r2, r2, r6
 80103b2:	7da0      	ldrb	r0, [r4, #22]
 80103b4:	1b9b      	subs	r3, r3, r6
 80103b6:	f884 8015 	strb.w	r8, [r4, #21]
 80103ba:	f080 0001 	eor.w	r0, r0, #1
 80103be:	60a2      	str	r2, [r4, #8]
 80103c0:	6123      	str	r3, [r4, #16]
 80103c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103c6:	68a3      	ldr	r3, [r4, #8]
 80103c8:	799b      	ldrb	r3, [r3, #6]
 80103ca:	706b      	strb	r3, [r5, #1]
 80103cc:	1cab      	adds	r3, r5, #2
 80103ce:	68a2      	ldr	r2, [r4, #8]
 80103d0:	7952      	ldrb	r2, [r2, #5]
 80103d2:	f803 2b01 	strb.w	r2, [r3], #1
 80103d6:	68a2      	ldr	r2, [r4, #8]
 80103d8:	7912      	ldrb	r2, [r2, #4]
 80103da:	f803 2b01 	strb.w	r2, [r3], #1
 80103de:	68a2      	ldr	r2, [r4, #8]
 80103e0:	78d2      	ldrb	r2, [r2, #3]
 80103e2:	f803 2b01 	strb.w	r2, [r3], #1
 80103e6:	68a2      	ldr	r2, [r4, #8]
 80103e8:	7892      	ldrb	r2, [r2, #2]
 80103ea:	f803 2b01 	strb.w	r2, [r3], #1
 80103ee:	68a2      	ldr	r2, [r4, #8]
 80103f0:	7852      	ldrb	r2, [r2, #1]
 80103f2:	f803 2b01 	strb.w	r2, [r3], #1
 80103f6:	68a2      	ldr	r2, [r4, #8]
 80103f8:	7812      	ldrb	r2, [r2, #0]
 80103fa:	701a      	strb	r2, [r3, #0]
 80103fc:	e796      	b.n	801032c <ucdr_deserialize_int64_t+0xa4>
 80103fe:	4639      	mov	r1, r7
 8010400:	4632      	mov	r2, r6
 8010402:	4628      	mov	r0, r5
 8010404:	f00c fa87 	bl	801c916 <memcpy>
 8010408:	464a      	mov	r2, r9
 801040a:	19a8      	adds	r0, r5, r6
 801040c:	68a1      	ldr	r1, [r4, #8]
 801040e:	f00c fa82 	bl	801c916 <memcpy>
 8010412:	e78b      	b.n	801032c <ucdr_deserialize_int64_t+0xa4>

08010414 <ucdr_serialize_float>:
 8010414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010418:	4604      	mov	r4, r0
 801041a:	b082      	sub	sp, #8
 801041c:	2104      	movs	r1, #4
 801041e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8010422:	f000 f97f 	bl	8010724 <ucdr_buffer_alignment>
 8010426:	4601      	mov	r1, r0
 8010428:	4620      	mov	r0, r4
 801042a:	7d67      	ldrb	r7, [r4, #21]
 801042c:	f000 f9c2 	bl	80107b4 <ucdr_advance_buffer>
 8010430:	2104      	movs	r1, #4
 8010432:	4620      	mov	r0, r4
 8010434:	f000 f916 	bl	8010664 <ucdr_check_buffer_available_for>
 8010438:	2800      	cmp	r0, #0
 801043a:	d139      	bne.n	80104b0 <ucdr_serialize_float+0x9c>
 801043c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010440:	42ab      	cmp	r3, r5
 8010442:	d930      	bls.n	80104a6 <ucdr_serialize_float+0x92>
 8010444:	1b5e      	subs	r6, r3, r5
 8010446:	60a3      	str	r3, [r4, #8]
 8010448:	6923      	ldr	r3, [r4, #16]
 801044a:	4620      	mov	r0, r4
 801044c:	f1c6 0804 	rsb	r8, r6, #4
 8010450:	4433      	add	r3, r6
 8010452:	4641      	mov	r1, r8
 8010454:	6123      	str	r3, [r4, #16]
 8010456:	f000 f911 	bl	801067c <ucdr_check_final_buffer_behavior>
 801045a:	2800      	cmp	r0, #0
 801045c:	d04c      	beq.n	80104f8 <ucdr_serialize_float+0xe4>
 801045e:	7d23      	ldrb	r3, [r4, #20]
 8010460:	2b01      	cmp	r3, #1
 8010462:	d063      	beq.n	801052c <ucdr_serialize_float+0x118>
 8010464:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010468:	702b      	strb	r3, [r5, #0]
 801046a:	2e00      	cmp	r6, #0
 801046c:	d051      	beq.n	8010512 <ucdr_serialize_float+0xfe>
 801046e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010472:	2e01      	cmp	r6, #1
 8010474:	706b      	strb	r3, [r5, #1]
 8010476:	d050      	beq.n	801051a <ucdr_serialize_float+0x106>
 8010478:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801047c:	2e02      	cmp	r6, #2
 801047e:	70ab      	strb	r3, [r5, #2]
 8010480:	d04f      	beq.n	8010522 <ucdr_serialize_float+0x10e>
 8010482:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010486:	70eb      	strb	r3, [r5, #3]
 8010488:	6923      	ldr	r3, [r4, #16]
 801048a:	2104      	movs	r1, #4
 801048c:	68a2      	ldr	r2, [r4, #8]
 801048e:	3304      	adds	r3, #4
 8010490:	7da0      	ldrb	r0, [r4, #22]
 8010492:	4442      	add	r2, r8
 8010494:	7561      	strb	r1, [r4, #21]
 8010496:	1b9e      	subs	r6, r3, r6
 8010498:	f080 0001 	eor.w	r0, r0, #1
 801049c:	60a2      	str	r2, [r4, #8]
 801049e:	6126      	str	r6, [r4, #16]
 80104a0:	b002      	add	sp, #8
 80104a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104a6:	2104      	movs	r1, #4
 80104a8:	4620      	mov	r0, r4
 80104aa:	f000 f8e7 	bl	801067c <ucdr_check_final_buffer_behavior>
 80104ae:	b1d0      	cbz	r0, 80104e6 <ucdr_serialize_float+0xd2>
 80104b0:	7d23      	ldrb	r3, [r4, #20]
 80104b2:	2b01      	cmp	r3, #1
 80104b4:	68a3      	ldr	r3, [r4, #8]
 80104b6:	d01c      	beq.n	80104f2 <ucdr_serialize_float+0xde>
 80104b8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80104bc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80104c0:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80104c4:	7018      	strb	r0, [r3, #0]
 80104c6:	68a3      	ldr	r3, [r4, #8]
 80104c8:	705a      	strb	r2, [r3, #1]
 80104ca:	68a3      	ldr	r3, [r4, #8]
 80104cc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80104d0:	7099      	strb	r1, [r3, #2]
 80104d2:	68a3      	ldr	r3, [r4, #8]
 80104d4:	70da      	strb	r2, [r3, #3]
 80104d6:	2104      	movs	r1, #4
 80104d8:	68a2      	ldr	r2, [r4, #8]
 80104da:	6923      	ldr	r3, [r4, #16]
 80104dc:	440a      	add	r2, r1
 80104de:	7561      	strb	r1, [r4, #21]
 80104e0:	440b      	add	r3, r1
 80104e2:	60a2      	str	r2, [r4, #8]
 80104e4:	6123      	str	r3, [r4, #16]
 80104e6:	7da0      	ldrb	r0, [r4, #22]
 80104e8:	f080 0001 	eor.w	r0, r0, #1
 80104ec:	b002      	add	sp, #8
 80104ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104f2:	9a01      	ldr	r2, [sp, #4]
 80104f4:	601a      	str	r2, [r3, #0]
 80104f6:	e7ee      	b.n	80104d6 <ucdr_serialize_float+0xc2>
 80104f8:	68a2      	ldr	r2, [r4, #8]
 80104fa:	6923      	ldr	r3, [r4, #16]
 80104fc:	7da0      	ldrb	r0, [r4, #22]
 80104fe:	1b92      	subs	r2, r2, r6
 8010500:	1b9b      	subs	r3, r3, r6
 8010502:	7567      	strb	r7, [r4, #21]
 8010504:	f080 0001 	eor.w	r0, r0, #1
 8010508:	60a2      	str	r2, [r4, #8]
 801050a:	6123      	str	r3, [r4, #16]
 801050c:	b002      	add	sp, #8
 801050e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010512:	68a3      	ldr	r3, [r4, #8]
 8010514:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010518:	701a      	strb	r2, [r3, #0]
 801051a:	68a3      	ldr	r3, [r4, #8]
 801051c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010520:	701a      	strb	r2, [r3, #0]
 8010522:	68a3      	ldr	r3, [r4, #8]
 8010524:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010528:	701a      	strb	r2, [r3, #0]
 801052a:	e7ad      	b.n	8010488 <ucdr_serialize_float+0x74>
 801052c:	4628      	mov	r0, r5
 801052e:	ad01      	add	r5, sp, #4
 8010530:	4632      	mov	r2, r6
 8010532:	4629      	mov	r1, r5
 8010534:	f00c f9ef 	bl	801c916 <memcpy>
 8010538:	4642      	mov	r2, r8
 801053a:	19a9      	adds	r1, r5, r6
 801053c:	68a0      	ldr	r0, [r4, #8]
 801053e:	f00c f9ea 	bl	801c916 <memcpy>
 8010542:	e7a1      	b.n	8010488 <ucdr_serialize_float+0x74>

08010544 <ucdr_deserialize_float>:
 8010544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010548:	4604      	mov	r4, r0
 801054a:	460d      	mov	r5, r1
 801054c:	2104      	movs	r1, #4
 801054e:	f000 f8e9 	bl	8010724 <ucdr_buffer_alignment>
 8010552:	4601      	mov	r1, r0
 8010554:	4620      	mov	r0, r4
 8010556:	f894 8015 	ldrb.w	r8, [r4, #21]
 801055a:	f000 f92b 	bl	80107b4 <ucdr_advance_buffer>
 801055e:	2104      	movs	r1, #4
 8010560:	4620      	mov	r0, r4
 8010562:	f000 f87f 	bl	8010664 <ucdr_check_buffer_available_for>
 8010566:	2800      	cmp	r0, #0
 8010568:	d138      	bne.n	80105dc <ucdr_deserialize_float+0x98>
 801056a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801056e:	42b7      	cmp	r7, r6
 8010570:	d92f      	bls.n	80105d2 <ucdr_deserialize_float+0x8e>
 8010572:	6923      	ldr	r3, [r4, #16]
 8010574:	4620      	mov	r0, r4
 8010576:	60a7      	str	r7, [r4, #8]
 8010578:	1bbf      	subs	r7, r7, r6
 801057a:	443b      	add	r3, r7
 801057c:	f1c7 0904 	rsb	r9, r7, #4
 8010580:	6123      	str	r3, [r4, #16]
 8010582:	4649      	mov	r1, r9
 8010584:	f000 f87a 	bl	801067c <ucdr_check_final_buffer_behavior>
 8010588:	2800      	cmp	r0, #0
 801058a:	d046      	beq.n	801061a <ucdr_deserialize_float+0xd6>
 801058c:	7d23      	ldrb	r3, [r4, #20]
 801058e:	2b01      	cmp	r3, #1
 8010590:	d05c      	beq.n	801064c <ucdr_deserialize_float+0x108>
 8010592:	78f3      	ldrb	r3, [r6, #3]
 8010594:	702b      	strb	r3, [r5, #0]
 8010596:	2f00      	cmp	r7, #0
 8010598:	d04c      	beq.n	8010634 <ucdr_deserialize_float+0xf0>
 801059a:	78b3      	ldrb	r3, [r6, #2]
 801059c:	2f01      	cmp	r7, #1
 801059e:	706b      	strb	r3, [r5, #1]
 80105a0:	f105 0302 	add.w	r3, r5, #2
 80105a4:	d04a      	beq.n	801063c <ucdr_deserialize_float+0xf8>
 80105a6:	7873      	ldrb	r3, [r6, #1]
 80105a8:	2f02      	cmp	r7, #2
 80105aa:	70ab      	strb	r3, [r5, #2]
 80105ac:	f105 0303 	add.w	r3, r5, #3
 80105b0:	d048      	beq.n	8010644 <ucdr_deserialize_float+0x100>
 80105b2:	7833      	ldrb	r3, [r6, #0]
 80105b4:	70eb      	strb	r3, [r5, #3]
 80105b6:	6923      	ldr	r3, [r4, #16]
 80105b8:	2104      	movs	r1, #4
 80105ba:	68a2      	ldr	r2, [r4, #8]
 80105bc:	3304      	adds	r3, #4
 80105be:	7da0      	ldrb	r0, [r4, #22]
 80105c0:	444a      	add	r2, r9
 80105c2:	7561      	strb	r1, [r4, #21]
 80105c4:	1bdb      	subs	r3, r3, r7
 80105c6:	f080 0001 	eor.w	r0, r0, #1
 80105ca:	60a2      	str	r2, [r4, #8]
 80105cc:	6123      	str	r3, [r4, #16]
 80105ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105d2:	2104      	movs	r1, #4
 80105d4:	4620      	mov	r0, r4
 80105d6:	f000 f851 	bl	801067c <ucdr_check_final_buffer_behavior>
 80105da:	b1b0      	cbz	r0, 801060a <ucdr_deserialize_float+0xc6>
 80105dc:	7d23      	ldrb	r3, [r4, #20]
 80105de:	2b01      	cmp	r3, #1
 80105e0:	68a3      	ldr	r3, [r4, #8]
 80105e2:	d017      	beq.n	8010614 <ucdr_deserialize_float+0xd0>
 80105e4:	78db      	ldrb	r3, [r3, #3]
 80105e6:	702b      	strb	r3, [r5, #0]
 80105e8:	68a3      	ldr	r3, [r4, #8]
 80105ea:	789b      	ldrb	r3, [r3, #2]
 80105ec:	706b      	strb	r3, [r5, #1]
 80105ee:	68a3      	ldr	r3, [r4, #8]
 80105f0:	785b      	ldrb	r3, [r3, #1]
 80105f2:	70ab      	strb	r3, [r5, #2]
 80105f4:	68a3      	ldr	r3, [r4, #8]
 80105f6:	781b      	ldrb	r3, [r3, #0]
 80105f8:	70eb      	strb	r3, [r5, #3]
 80105fa:	2104      	movs	r1, #4
 80105fc:	68a2      	ldr	r2, [r4, #8]
 80105fe:	6923      	ldr	r3, [r4, #16]
 8010600:	440a      	add	r2, r1
 8010602:	7561      	strb	r1, [r4, #21]
 8010604:	440b      	add	r3, r1
 8010606:	60a2      	str	r2, [r4, #8]
 8010608:	6123      	str	r3, [r4, #16]
 801060a:	7da0      	ldrb	r0, [r4, #22]
 801060c:	f080 0001 	eor.w	r0, r0, #1
 8010610:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	602b      	str	r3, [r5, #0]
 8010618:	e7ef      	b.n	80105fa <ucdr_deserialize_float+0xb6>
 801061a:	68a2      	ldr	r2, [r4, #8]
 801061c:	6923      	ldr	r3, [r4, #16]
 801061e:	1bd2      	subs	r2, r2, r7
 8010620:	7da0      	ldrb	r0, [r4, #22]
 8010622:	1bdb      	subs	r3, r3, r7
 8010624:	f884 8015 	strb.w	r8, [r4, #21]
 8010628:	f080 0001 	eor.w	r0, r0, #1
 801062c:	60a2      	str	r2, [r4, #8]
 801062e:	6123      	str	r3, [r4, #16]
 8010630:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010634:	68a3      	ldr	r3, [r4, #8]
 8010636:	789b      	ldrb	r3, [r3, #2]
 8010638:	706b      	strb	r3, [r5, #1]
 801063a:	1cab      	adds	r3, r5, #2
 801063c:	68a2      	ldr	r2, [r4, #8]
 801063e:	7852      	ldrb	r2, [r2, #1]
 8010640:	f803 2b01 	strb.w	r2, [r3], #1
 8010644:	68a2      	ldr	r2, [r4, #8]
 8010646:	7812      	ldrb	r2, [r2, #0]
 8010648:	701a      	strb	r2, [r3, #0]
 801064a:	e7b4      	b.n	80105b6 <ucdr_deserialize_float+0x72>
 801064c:	4631      	mov	r1, r6
 801064e:	463a      	mov	r2, r7
 8010650:	4628      	mov	r0, r5
 8010652:	f00c f960 	bl	801c916 <memcpy>
 8010656:	464a      	mov	r2, r9
 8010658:	19e8      	adds	r0, r5, r7
 801065a:	68a1      	ldr	r1, [r4, #8]
 801065c:	f00c f95b 	bl	801c916 <memcpy>
 8010660:	e7a9      	b.n	80105b6 <ucdr_deserialize_float+0x72>
 8010662:	bf00      	nop

08010664 <ucdr_check_buffer_available_for>:
 8010664:	7d83      	ldrb	r3, [r0, #22]
 8010666:	b93b      	cbnz	r3, 8010678 <ucdr_check_buffer_available_for+0x14>
 8010668:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 801066c:	4419      	add	r1, r3
 801066e:	4288      	cmp	r0, r1
 8010670:	bf34      	ite	cc
 8010672:	2000      	movcc	r0, #0
 8010674:	2001      	movcs	r0, #1
 8010676:	4770      	bx	lr
 8010678:	2000      	movs	r0, #0
 801067a:	4770      	bx	lr

0801067c <ucdr_check_final_buffer_behavior>:
 801067c:	7d83      	ldrb	r3, [r0, #22]
 801067e:	b943      	cbnz	r3, 8010692 <ucdr_check_final_buffer_behavior+0x16>
 8010680:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8010684:	b510      	push	{r4, lr}
 8010686:	4291      	cmp	r1, r2
 8010688:	4604      	mov	r4, r0
 801068a:	d205      	bcs.n	8010698 <ucdr_check_final_buffer_behavior+0x1c>
 801068c:	2301      	movs	r3, #1
 801068e:	4618      	mov	r0, r3
 8010690:	bd10      	pop	{r4, pc}
 8010692:	2300      	movs	r3, #0
 8010694:	4618      	mov	r0, r3
 8010696:	4770      	bx	lr
 8010698:	6982      	ldr	r2, [r0, #24]
 801069a:	b13a      	cbz	r2, 80106ac <ucdr_check_final_buffer_behavior+0x30>
 801069c:	69c1      	ldr	r1, [r0, #28]
 801069e:	4790      	blx	r2
 80106a0:	f080 0301 	eor.w	r3, r0, #1
 80106a4:	75a0      	strb	r0, [r4, #22]
 80106a6:	b2db      	uxtb	r3, r3
 80106a8:	4618      	mov	r0, r3
 80106aa:	bd10      	pop	{r4, pc}
 80106ac:	2001      	movs	r0, #1
 80106ae:	75a0      	strb	r0, [r4, #22]
 80106b0:	e7fa      	b.n	80106a8 <ucdr_check_final_buffer_behavior+0x2c>
 80106b2:	bf00      	nop

080106b4 <ucdr_set_on_full_buffer_callback>:
 80106b4:	e9c0 1206 	strd	r1, r2, [r0, #24]
 80106b8:	4770      	bx	lr
 80106ba:	bf00      	nop

080106bc <ucdr_init_buffer_origin_offset_endian>:
 80106bc:	b410      	push	{r4}
 80106be:	9c01      	ldr	r4, [sp, #4]
 80106c0:	440a      	add	r2, r1
 80106c2:	6001      	str	r1, [r0, #0]
 80106c4:	6042      	str	r2, [r0, #4]
 80106c6:	190a      	adds	r2, r1, r4
 80106c8:	441c      	add	r4, r3
 80106ca:	6082      	str	r2, [r0, #8]
 80106cc:	2200      	movs	r2, #0
 80106ce:	e9c0 3403 	strd	r3, r4, [r0, #12]
 80106d2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80106d6:	7542      	strb	r2, [r0, #21]
 80106d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80106dc:	7582      	strb	r2, [r0, #22]
 80106de:	7503      	strb	r3, [r0, #20]
 80106e0:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80106e4:	4770      	bx	lr
 80106e6:	bf00      	nop

080106e8 <ucdr_init_buffer_origin_offset>:
 80106e8:	b510      	push	{r4, lr}
 80106ea:	b082      	sub	sp, #8
 80106ec:	9c04      	ldr	r4, [sp, #16]
 80106ee:	9400      	str	r4, [sp, #0]
 80106f0:	2401      	movs	r4, #1
 80106f2:	9401      	str	r4, [sp, #4]
 80106f4:	f7ff ffe2 	bl	80106bc <ucdr_init_buffer_origin_offset_endian>
 80106f8:	b002      	add	sp, #8
 80106fa:	bd10      	pop	{r4, pc}

080106fc <ucdr_init_buffer_origin>:
 80106fc:	b510      	push	{r4, lr}
 80106fe:	2400      	movs	r4, #0
 8010700:	b082      	sub	sp, #8
 8010702:	9400      	str	r4, [sp, #0]
 8010704:	f7ff fff0 	bl	80106e8 <ucdr_init_buffer_origin_offset>
 8010708:	b002      	add	sp, #8
 801070a:	bd10      	pop	{r4, pc}

0801070c <ucdr_init_buffer>:
 801070c:	2300      	movs	r3, #0
 801070e:	f7ff bff5 	b.w	80106fc <ucdr_init_buffer_origin>
 8010712:	bf00      	nop

08010714 <ucdr_alignment>:
 8010714:	fbb0 f2f1 	udiv	r2, r0, r1
 8010718:	fb02 0011 	mls	r0, r2, r1, r0
 801071c:	1e4b      	subs	r3, r1, #1
 801071e:	1a08      	subs	r0, r1, r0
 8010720:	4018      	ands	r0, r3
 8010722:	4770      	bx	lr

08010724 <ucdr_buffer_alignment>:
 8010724:	7d43      	ldrb	r3, [r0, #21]
 8010726:	428b      	cmp	r3, r1
 8010728:	d209      	bcs.n	801073e <ucdr_buffer_alignment+0x1a>
 801072a:	6903      	ldr	r3, [r0, #16]
 801072c:	1e4a      	subs	r2, r1, #1
 801072e:	fbb3 f0f1 	udiv	r0, r3, r1
 8010732:	fb01 3010 	mls	r0, r1, r0, r3
 8010736:	1a09      	subs	r1, r1, r0
 8010738:	ea01 0002 	and.w	r0, r1, r2
 801073c:	4770      	bx	lr
 801073e:	2000      	movs	r0, #0
 8010740:	4770      	bx	lr
 8010742:	bf00      	nop

08010744 <ucdr_align_to>:
 8010744:	b538      	push	{r3, r4, r5, lr}
 8010746:	4604      	mov	r4, r0
 8010748:	460d      	mov	r5, r1
 801074a:	f7ff ffeb 	bl	8010724 <ucdr_buffer_alignment>
 801074e:	68a3      	ldr	r3, [r4, #8]
 8010750:	7565      	strb	r5, [r4, #21]
 8010752:	181a      	adds	r2, r3, r0
 8010754:	6923      	ldr	r3, [r4, #16]
 8010756:	4418      	add	r0, r3
 8010758:	6863      	ldr	r3, [r4, #4]
 801075a:	4293      	cmp	r3, r2
 801075c:	6120      	str	r0, [r4, #16]
 801075e:	bf28      	it	cs
 8010760:	4613      	movcs	r3, r2
 8010762:	60a3      	str	r3, [r4, #8]
 8010764:	bd38      	pop	{r3, r4, r5, pc}
 8010766:	bf00      	nop

08010768 <ucdr_buffer_length>:
 8010768:	6882      	ldr	r2, [r0, #8]
 801076a:	6800      	ldr	r0, [r0, #0]
 801076c:	1a10      	subs	r0, r2, r0
 801076e:	4770      	bx	lr

08010770 <ucdr_buffer_remaining>:
 8010770:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8010774:	1a10      	subs	r0, r2, r0
 8010776:	4770      	bx	lr

08010778 <ucdr_check_final_buffer_behavior_array>:
 8010778:	b538      	push	{r3, r4, r5, lr}
 801077a:	7d83      	ldrb	r3, [r0, #22]
 801077c:	b9a3      	cbnz	r3, 80107a8 <ucdr_check_final_buffer_behavior_array+0x30>
 801077e:	4604      	mov	r4, r0
 8010780:	460d      	mov	r5, r1
 8010782:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8010786:	429a      	cmp	r2, r3
 8010788:	d300      	bcc.n	801078c <ucdr_check_final_buffer_behavior_array+0x14>
 801078a:	b931      	cbnz	r1, 801079a <ucdr_check_final_buffer_behavior_array+0x22>
 801078c:	4620      	mov	r0, r4
 801078e:	f7ff ffef 	bl	8010770 <ucdr_buffer_remaining>
 8010792:	42a8      	cmp	r0, r5
 8010794:	bf28      	it	cs
 8010796:	4628      	movcs	r0, r5
 8010798:	bd38      	pop	{r3, r4, r5, pc}
 801079a:	6983      	ldr	r3, [r0, #24]
 801079c:	b133      	cbz	r3, 80107ac <ucdr_check_final_buffer_behavior_array+0x34>
 801079e:	69c1      	ldr	r1, [r0, #28]
 80107a0:	4798      	blx	r3
 80107a2:	75a0      	strb	r0, [r4, #22]
 80107a4:	2800      	cmp	r0, #0
 80107a6:	d0f1      	beq.n	801078c <ucdr_check_final_buffer_behavior_array+0x14>
 80107a8:	2000      	movs	r0, #0
 80107aa:	bd38      	pop	{r3, r4, r5, pc}
 80107ac:	2301      	movs	r3, #1
 80107ae:	7583      	strb	r3, [r0, #22]
 80107b0:	e7fa      	b.n	80107a8 <ucdr_check_final_buffer_behavior_array+0x30>
 80107b2:	bf00      	nop

080107b4 <ucdr_advance_buffer>:
 80107b4:	b538      	push	{r3, r4, r5, lr}
 80107b6:	4604      	mov	r4, r0
 80107b8:	460d      	mov	r5, r1
 80107ba:	f7ff ff53 	bl	8010664 <ucdr_check_buffer_available_for>
 80107be:	b178      	cbz	r0, 80107e0 <ucdr_advance_buffer+0x2c>
 80107c0:	6923      	ldr	r3, [r4, #16]
 80107c2:	68a2      	ldr	r2, [r4, #8]
 80107c4:	442b      	add	r3, r5
 80107c6:	442a      	add	r2, r5
 80107c8:	6123      	str	r3, [r4, #16]
 80107ca:	2301      	movs	r3, #1
 80107cc:	60a2      	str	r2, [r4, #8]
 80107ce:	7563      	strb	r3, [r4, #21]
 80107d0:	bd38      	pop	{r3, r4, r5, pc}
 80107d2:	68a2      	ldr	r2, [r4, #8]
 80107d4:	1a2d      	subs	r5, r5, r0
 80107d6:	6923      	ldr	r3, [r4, #16]
 80107d8:	4402      	add	r2, r0
 80107da:	4418      	add	r0, r3
 80107dc:	60a2      	str	r2, [r4, #8]
 80107de:	6120      	str	r0, [r4, #16]
 80107e0:	4629      	mov	r1, r5
 80107e2:	2201      	movs	r2, #1
 80107e4:	4620      	mov	r0, r4
 80107e6:	f7ff ffc7 	bl	8010778 <ucdr_check_final_buffer_behavior_array>
 80107ea:	2800      	cmp	r0, #0
 80107ec:	d1f1      	bne.n	80107d2 <ucdr_advance_buffer+0x1e>
 80107ee:	2301      	movs	r3, #1
 80107f0:	7563      	strb	r3, [r4, #21]
 80107f2:	bd38      	pop	{r3, r4, r5, pc}

080107f4 <uxr_buffer_delete_entity>:
 80107f4:	b510      	push	{r4, lr}
 80107f6:	2300      	movs	r3, #0
 80107f8:	b08e      	sub	sp, #56	; 0x38
 80107fa:	4604      	mov	r4, r0
 80107fc:	9103      	str	r1, [sp, #12]
 80107fe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010802:	2303      	movs	r3, #3
 8010804:	2204      	movs	r2, #4
 8010806:	9300      	str	r3, [sp, #0]
 8010808:	ab06      	add	r3, sp, #24
 801080a:	f001 f989 	bl	8011b20 <uxr_prepare_stream_to_write_submessage>
 801080e:	b918      	cbnz	r0, 8010818 <uxr_buffer_delete_entity+0x24>
 8010810:	4604      	mov	r4, r0
 8010812:	4620      	mov	r0, r4
 8010814:	b00e      	add	sp, #56	; 0x38
 8010816:	bd10      	pop	{r4, pc}
 8010818:	9902      	ldr	r1, [sp, #8]
 801081a:	aa05      	add	r2, sp, #20
 801081c:	4620      	mov	r0, r4
 801081e:	f001 fabb 	bl	8011d98 <uxr_init_base_object_request>
 8010822:	4604      	mov	r4, r0
 8010824:	a905      	add	r1, sp, #20
 8010826:	a806      	add	r0, sp, #24
 8010828:	f002 fd44 	bl	80132b4 <uxr_serialize_DELETE_Payload>
 801082c:	4620      	mov	r0, r4
 801082e:	b00e      	add	sp, #56	; 0x38
 8010830:	bd10      	pop	{r4, pc}
 8010832:	bf00      	nop

08010834 <uxr_common_create_entity>:
 8010834:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010838:	b510      	push	{r4, lr}
 801083a:	f1bc 0f01 	cmp.w	ip, #1
 801083e:	b08c      	sub	sp, #48	; 0x30
 8010840:	4604      	mov	r4, r0
 8010842:	9202      	str	r2, [sp, #8]
 8010844:	bf0c      	ite	eq
 8010846:	f003 0201 	andeq.w	r2, r3, #1
 801084a:	2200      	movne	r2, #0
 801084c:	330e      	adds	r3, #14
 801084e:	9103      	str	r1, [sp, #12]
 8010850:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8010854:	441a      	add	r2, r3
 8010856:	ab04      	add	r3, sp, #16
 8010858:	9101      	str	r1, [sp, #4]
 801085a:	2101      	movs	r1, #1
 801085c:	b292      	uxth	r2, r2
 801085e:	9100      	str	r1, [sp, #0]
 8010860:	9903      	ldr	r1, [sp, #12]
 8010862:	f001 f95d 	bl	8011b20 <uxr_prepare_stream_to_write_submessage>
 8010866:	b918      	cbnz	r0, 8010870 <uxr_common_create_entity+0x3c>
 8010868:	4604      	mov	r4, r0
 801086a:	4620      	mov	r0, r4
 801086c:	b00c      	add	sp, #48	; 0x30
 801086e:	bd10      	pop	{r4, pc}
 8010870:	9902      	ldr	r1, [sp, #8]
 8010872:	4620      	mov	r0, r4
 8010874:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010876:	f001 fa8f 	bl	8011d98 <uxr_init_base_object_request>
 801087a:	4604      	mov	r4, r0
 801087c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801087e:	a804      	add	r0, sp, #16
 8010880:	f002 fc72 	bl	8013168 <uxr_serialize_CREATE_Payload>
 8010884:	4620      	mov	r0, r4
 8010886:	b00c      	add	sp, #48	; 0x30
 8010888:	bd10      	pop	{r4, pc}
 801088a:	bf00      	nop

0801088c <uxr_buffer_create_participant_bin>:
 801088c:	b570      	push	{r4, r5, r6, lr}
 801088e:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8010892:	4605      	mov	r5, r0
 8010894:	ac11      	add	r4, sp, #68	; 0x44
 8010896:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 801089a:	2303      	movs	r3, #3
 801089c:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 80108a0:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80108a4:	7223      	strb	r3, [r4, #8]
 80108a6:	2300      	movs	r3, #0
 80108a8:	2201      	movs	r2, #1
 80108aa:	f88d 3014 	strb.w	r3, [sp, #20]
 80108ae:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 80108b0:	7122      	strb	r2, [r4, #4]
 80108b2:	b1cb      	cbz	r3, 80108e8 <uxr_buffer_create_participant_bin+0x5c>
 80108b4:	f88d 201c 	strb.w	r2, [sp, #28]
 80108b8:	9308      	str	r3, [sp, #32]
 80108ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80108be:	a915      	add	r1, sp, #84	; 0x54
 80108c0:	a809      	add	r0, sp, #36	; 0x24
 80108c2:	f7ff ff23 	bl	801070c <ucdr_init_buffer>
 80108c6:	a905      	add	r1, sp, #20
 80108c8:	a809      	add	r0, sp, #36	; 0x24
 80108ca:	f002 f803 	bl	80128d4 <uxr_serialize_OBJK_DomainParticipant_Binary>
 80108ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80108d0:	9600      	str	r6, [sp, #0]
 80108d2:	4628      	mov	r0, r5
 80108d4:	9401      	str	r4, [sp, #4]
 80108d6:	60e3      	str	r3, [r4, #12]
 80108d8:	b29b      	uxth	r3, r3
 80108da:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80108de:	f7ff ffa9 	bl	8010834 <uxr_common_create_entity>
 80108e2:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 80108e6:	bd70      	pop	{r4, r5, r6, pc}
 80108e8:	f88d 301c 	strb.w	r3, [sp, #28]
 80108ec:	e7e5      	b.n	80108ba <uxr_buffer_create_participant_bin+0x2e>
 80108ee:	bf00      	nop

080108f0 <uxr_buffer_create_topic_bin>:
 80108f0:	b570      	push	{r4, r5, r6, lr}
 80108f2:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 80108f6:	4605      	mov	r5, r0
 80108f8:	4618      	mov	r0, r3
 80108fa:	9105      	str	r1, [sp, #20]
 80108fc:	a997      	add	r1, sp, #604	; 0x25c
 80108fe:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 8010902:	ac13      	add	r4, sp, #76	; 0x4c
 8010904:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010908:	2302      	movs	r3, #2
 801090a:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 801090e:	f000 f9cf 	bl	8010cb0 <uxr_object_id_to_raw>
 8010912:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 8010914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010918:	a917      	add	r1, sp, #92	; 0x5c
 801091a:	a80b      	add	r0, sp, #44	; 0x2c
 801091c:	9306      	str	r3, [sp, #24]
 801091e:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 8010920:	930a      	str	r3, [sp, #40]	; 0x28
 8010922:	2303      	movs	r3, #3
 8010924:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8010928:	2301      	movs	r3, #1
 801092a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801092e:	2300      	movs	r3, #0
 8010930:	f88d 301c 	strb.w	r3, [sp, #28]
 8010934:	f7ff feea 	bl	801070c <ucdr_init_buffer>
 8010938:	a906      	add	r1, sp, #24
 801093a:	a80b      	add	r0, sp, #44	; 0x2c
 801093c:	f001 ffec 	bl	8012918 <uxr_serialize_OBJK_Topic_Binary>
 8010940:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010942:	4628      	mov	r0, r5
 8010944:	9600      	str	r6, [sp, #0]
 8010946:	9316      	str	r3, [sp, #88]	; 0x58
 8010948:	b29b      	uxth	r3, r3
 801094a:	9401      	str	r4, [sp, #4]
 801094c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010950:	f7ff ff70 	bl	8010834 <uxr_common_create_entity>
 8010954:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 8010958:	bd70      	pop	{r4, r5, r6, pc}
 801095a:	bf00      	nop

0801095c <uxr_buffer_create_publisher_bin>:
 801095c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801095e:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8010962:	2603      	movs	r6, #3
 8010964:	4605      	mov	r5, r0
 8010966:	4618      	mov	r0, r3
 8010968:	9105      	str	r1, [sp, #20]
 801096a:	a992      	add	r1, sp, #584	; 0x248
 801096c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8010970:	ac0e      	add	r4, sp, #56	; 0x38
 8010972:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8010976:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801097a:	f000 f999 	bl	8010cb0 <uxr_object_id_to_raw>
 801097e:	2300      	movs	r3, #0
 8010980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010984:	a912      	add	r1, sp, #72	; 0x48
 8010986:	a806      	add	r0, sp, #24
 8010988:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 801098c:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8010990:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8010994:	f7ff feba 	bl	801070c <ucdr_init_buffer>
 8010998:	a993      	add	r1, sp, #588	; 0x24c
 801099a:	a806      	add	r0, sp, #24
 801099c:	f002 f870 	bl	8012a80 <uxr_serialize_OBJK_Publisher_Binary>
 80109a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109a2:	4628      	mov	r0, r5
 80109a4:	9700      	str	r7, [sp, #0]
 80109a6:	9311      	str	r3, [sp, #68]	; 0x44
 80109a8:	b29b      	uxth	r3, r3
 80109aa:	9401      	str	r4, [sp, #4]
 80109ac:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80109b0:	f7ff ff40 	bl	8010834 <uxr_common_create_entity>
 80109b4:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 80109b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109ba:	bf00      	nop

080109bc <uxr_buffer_create_subscriber_bin>:
 80109bc:	b570      	push	{r4, r5, r6, lr}
 80109be:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 80109c2:	4605      	mov	r5, r0
 80109c4:	4618      	mov	r0, r3
 80109c6:	9105      	str	r1, [sp, #20]
 80109c8:	a992      	add	r1, sp, #584	; 0x248
 80109ca:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 80109ce:	ac0e      	add	r4, sp, #56	; 0x38
 80109d0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80109d4:	2304      	movs	r3, #4
 80109d6:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 80109da:	f000 f969 	bl	8010cb0 <uxr_object_id_to_raw>
 80109de:	2300      	movs	r3, #0
 80109e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80109e4:	a912      	add	r1, sp, #72	; 0x48
 80109e6:	a806      	add	r0, sp, #24
 80109e8:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 80109ec:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 80109f0:	2303      	movs	r3, #3
 80109f2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80109f6:	f7ff fe89 	bl	801070c <ucdr_init_buffer>
 80109fa:	a993      	add	r1, sp, #588	; 0x24c
 80109fc:	a806      	add	r0, sp, #24
 80109fe:	f002 f8ef 	bl	8012be0 <uxr_serialize_OBJK_Subscriber_Binary>
 8010a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a04:	4628      	mov	r0, r5
 8010a06:	9600      	str	r6, [sp, #0]
 8010a08:	9311      	str	r3, [sp, #68]	; 0x44
 8010a0a:	b29b      	uxth	r3, r3
 8010a0c:	9401      	str	r4, [sp, #4]
 8010a0e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010a12:	f7ff ff0f 	bl	8010834 <uxr_common_create_entity>
 8010a16:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 8010a1a:	bd70      	pop	{r4, r5, r6, pc}

08010a1c <uxr_buffer_create_datawriter_bin>:
 8010a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a20:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8010a24:	4606      	mov	r6, r0
 8010a26:	4618      	mov	r0, r3
 8010a28:	2703      	movs	r7, #3
 8010a2a:	ac1d      	add	r4, sp, #116	; 0x74
 8010a2c:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8010a30:	9105      	str	r1, [sp, #20]
 8010a32:	a9a1      	add	r1, sp, #644	; 0x284
 8010a34:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8010a38:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010a3c:	2305      	movs	r3, #5
 8010a3e:	7123      	strb	r3, [r4, #4]
 8010a40:	f000 f936 	bl	8010cb0 <uxr_object_id_to_raw>
 8010a44:	a90e      	add	r1, sp, #56	; 0x38
 8010a46:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8010a48:	7227      	strb	r7, [r4, #8]
 8010a4a:	f000 f931 	bl	8010cb0 <uxr_object_id_to_raw>
 8010a4e:	2300      	movs	r3, #0
 8010a50:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8010a54:	3d00      	subs	r5, #0
 8010a56:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 8010a5a:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8010a5e:	bf18      	it	ne
 8010a60:	2501      	movne	r5, #1
 8010a62:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8010a66:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8010a6a:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8010a6e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010a72:	2301      	movs	r3, #1
 8010a74:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8010a78:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8010a7c:	bb8a      	cbnz	r2, 8010ae2 <uxr_buffer_create_datawriter_bin+0xc6>
 8010a7e:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8010a82:	f04f 0c13 	mov.w	ip, #19
 8010a86:	250b      	movs	r5, #11
 8010a88:	2221      	movs	r2, #33	; 0x21
 8010a8a:	2111      	movs	r1, #17
 8010a8c:	2009      	movs	r0, #9
 8010a8e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010a92:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8010a96:	b923      	cbnz	r3, 8010aa2 <uxr_buffer_create_datawriter_bin+0x86>
 8010a98:	4672      	mov	r2, lr
 8010a9a:	4661      	mov	r1, ip
 8010a9c:	4628      	mov	r0, r5
 8010a9e:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8010aa2:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8010aa6:	2b01      	cmp	r3, #1
 8010aa8:	d025      	beq.n	8010af6 <uxr_buffer_create_datawriter_bin+0xda>
 8010aaa:	2b03      	cmp	r3, #3
 8010aac:	d029      	beq.n	8010b02 <uxr_buffer_create_datawriter_bin+0xe6>
 8010aae:	b32b      	cbz	r3, 8010afc <uxr_buffer_create_datawriter_bin+0xe0>
 8010ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010ab4:	a921      	add	r1, sp, #132	; 0x84
 8010ab6:	a806      	add	r0, sp, #24
 8010ab8:	f7ff fe28 	bl	801070c <ucdr_init_buffer>
 8010abc:	a90e      	add	r1, sp, #56	; 0x38
 8010abe:	a806      	add	r0, sp, #24
 8010ac0:	f002 f940 	bl	8012d44 <uxr_serialize_OBJK_DataWriter_Binary>
 8010ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ac6:	f8cd 8000 	str.w	r8, [sp]
 8010aca:	4630      	mov	r0, r6
 8010acc:	9401      	str	r4, [sp, #4]
 8010ace:	60e3      	str	r3, [r4, #12]
 8010ad0:	b29b      	uxth	r3, r3
 8010ad2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010ad6:	f7ff fead 	bl	8010834 <uxr_common_create_entity>
 8010ada:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8010ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ae2:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8010ae6:	f04f 0c12 	mov.w	ip, #18
 8010aea:	250a      	movs	r5, #10
 8010aec:	2220      	movs	r2, #32
 8010aee:	2110      	movs	r1, #16
 8010af0:	2008      	movs	r0, #8
 8010af2:	2702      	movs	r7, #2
 8010af4:	e7cd      	b.n	8010a92 <uxr_buffer_create_datawriter_bin+0x76>
 8010af6:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8010afa:	e7d9      	b.n	8010ab0 <uxr_buffer_create_datawriter_bin+0x94>
 8010afc:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8010b00:	e7d6      	b.n	8010ab0 <uxr_buffer_create_datawriter_bin+0x94>
 8010b02:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8010b06:	e7d3      	b.n	8010ab0 <uxr_buffer_create_datawriter_bin+0x94>

08010b08 <uxr_buffer_create_datareader_bin>:
 8010b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b0c:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8010b10:	4606      	mov	r6, r0
 8010b12:	4618      	mov	r0, r3
 8010b14:	2703      	movs	r7, #3
 8010b16:	ac1f      	add	r4, sp, #124	; 0x7c
 8010b18:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 8010b1c:	9105      	str	r1, [sp, #20]
 8010b1e:	a9a3      	add	r1, sp, #652	; 0x28c
 8010b20:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 8010b24:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010b28:	2306      	movs	r3, #6
 8010b2a:	7123      	strb	r3, [r4, #4]
 8010b2c:	f000 f8c0 	bl	8010cb0 <uxr_object_id_to_raw>
 8010b30:	a90e      	add	r1, sp, #56	; 0x38
 8010b32:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 8010b34:	7227      	strb	r7, [r4, #8]
 8010b36:	f000 f8bb 	bl	8010cb0 <uxr_object_id_to_raw>
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8010b40:	3d00      	subs	r5, #0
 8010b42:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 8010b46:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8010b4a:	bf18      	it	ne
 8010b4c:	2501      	movne	r5, #1
 8010b4e:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8010b52:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8010b56:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8010b5a:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8010b5e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010b62:	2301      	movs	r3, #1
 8010b64:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8010b68:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8010b6c:	bb8a      	cbnz	r2, 8010bd2 <uxr_buffer_create_datareader_bin+0xca>
 8010b6e:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8010b72:	f04f 0c13 	mov.w	ip, #19
 8010b76:	250b      	movs	r5, #11
 8010b78:	2221      	movs	r2, #33	; 0x21
 8010b7a:	2111      	movs	r1, #17
 8010b7c:	2009      	movs	r0, #9
 8010b7e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010b82:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 8010b86:	b923      	cbnz	r3, 8010b92 <uxr_buffer_create_datareader_bin+0x8a>
 8010b88:	4672      	mov	r2, lr
 8010b8a:	4661      	mov	r1, ip
 8010b8c:	4628      	mov	r0, r5
 8010b8e:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8010b92:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 8010b96:	2b01      	cmp	r3, #1
 8010b98:	d025      	beq.n	8010be6 <uxr_buffer_create_datareader_bin+0xde>
 8010b9a:	2b03      	cmp	r3, #3
 8010b9c:	d029      	beq.n	8010bf2 <uxr_buffer_create_datareader_bin+0xea>
 8010b9e:	b32b      	cbz	r3, 8010bec <uxr_buffer_create_datareader_bin+0xe4>
 8010ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010ba4:	a923      	add	r1, sp, #140	; 0x8c
 8010ba6:	a806      	add	r0, sp, #24
 8010ba8:	f7ff fdb0 	bl	801070c <ucdr_init_buffer>
 8010bac:	a90e      	add	r1, sp, #56	; 0x38
 8010bae:	a806      	add	r0, sp, #24
 8010bb0:	f002 f88c 	bl	8012ccc <uxr_serialize_OBJK_DataReader_Binary>
 8010bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bb6:	f8cd 8000 	str.w	r8, [sp]
 8010bba:	4630      	mov	r0, r6
 8010bbc:	9401      	str	r4, [sp, #4]
 8010bbe:	60e3      	str	r3, [r4, #12]
 8010bc0:	b29b      	uxth	r3, r3
 8010bc2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010bc6:	f7ff fe35 	bl	8010834 <uxr_common_create_entity>
 8010bca:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8010bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010bd2:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8010bd6:	f04f 0c12 	mov.w	ip, #18
 8010bda:	250a      	movs	r5, #10
 8010bdc:	2220      	movs	r2, #32
 8010bde:	2110      	movs	r1, #16
 8010be0:	2008      	movs	r0, #8
 8010be2:	2702      	movs	r7, #2
 8010be4:	e7cd      	b.n	8010b82 <uxr_buffer_create_datareader_bin+0x7a>
 8010be6:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8010bea:	e7d9      	b.n	8010ba0 <uxr_buffer_create_datareader_bin+0x98>
 8010bec:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8010bf0:	e7d6      	b.n	8010ba0 <uxr_buffer_create_datareader_bin+0x98>
 8010bf2:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8010bf6:	e7d3      	b.n	8010ba0 <uxr_buffer_create_datareader_bin+0x98>

08010bf8 <uxr_buffer_create_replier_bin>:
 8010bf8:	b570      	push	{r4, r5, r6, lr}
 8010bfa:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8010bfe:	4605      	mov	r5, r0
 8010c00:	4618      	mov	r0, r3
 8010c02:	9105      	str	r1, [sp, #20]
 8010c04:	a999      	add	r1, sp, #612	; 0x264
 8010c06:	f89d 6294 	ldrb.w	r6, [sp, #660]	; 0x294
 8010c0a:	ac15      	add	r4, sp, #84	; 0x54
 8010c0c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010c10:	2308      	movs	r3, #8
 8010c12:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8010c16:	f000 f84b 	bl	8010cb0 <uxr_object_id_to_raw>
 8010c1a:	9b9e      	ldr	r3, [sp, #632]	; 0x278
 8010c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010c20:	a919      	add	r1, sp, #100	; 0x64
 8010c22:	a80d      	add	r0, sp, #52	; 0x34
 8010c24:	9306      	str	r3, [sp, #24]
 8010c26:	9b9f      	ldr	r3, [sp, #636]	; 0x27c
 8010c28:	9307      	str	r3, [sp, #28]
 8010c2a:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 8010c2c:	9308      	str	r3, [sp, #32]
 8010c2e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8010c30:	930c      	str	r3, [sp, #48]	; 0x30
 8010c32:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010c34:	930a      	str	r3, [sp, #40]	; 0x28
 8010c36:	2301      	movs	r3, #1
 8010c38:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8010c3c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8010c40:	2303      	movs	r3, #3
 8010c42:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8010c46:	f7ff fd61 	bl	801070c <ucdr_init_buffer>
 8010c4a:	a906      	add	r1, sp, #24
 8010c4c:	a80d      	add	r0, sp, #52	; 0x34
 8010c4e:	f002 f8a5 	bl	8012d9c <uxr_serialize_OBJK_Replier_Binary>
 8010c52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010c54:	4628      	mov	r0, r5
 8010c56:	9600      	str	r6, [sp, #0]
 8010c58:	9318      	str	r3, [sp, #96]	; 0x60
 8010c5a:	b29b      	uxth	r3, r3
 8010c5c:	9401      	str	r4, [sp, #4]
 8010c5e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010c62:	f7ff fde7 	bl	8010834 <uxr_common_create_entity>
 8010c66:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
 8010c6a:	bd70      	pop	{r4, r5, r6, pc}

08010c6c <uxr_object_id>:
 8010c6c:	b082      	sub	sp, #8
 8010c6e:	2300      	movs	r3, #0
 8010c70:	f88d 1006 	strb.w	r1, [sp, #6]
 8010c74:	f360 030f 	bfi	r3, r0, #0, #16
 8010c78:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010c7c:	f362 431f 	bfi	r3, r2, #16, #16
 8010c80:	4618      	mov	r0, r3
 8010c82:	b002      	add	sp, #8
 8010c84:	4770      	bx	lr
 8010c86:	bf00      	nop

08010c88 <uxr_object_id_from_raw>:
 8010c88:	7843      	ldrb	r3, [r0, #1]
 8010c8a:	b082      	sub	sp, #8
 8010c8c:	7801      	ldrb	r1, [r0, #0]
 8010c8e:	2000      	movs	r0, #0
 8010c90:	091a      	lsrs	r2, r3, #4
 8010c92:	f003 030f 	and.w	r3, r3, #15
 8010c96:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8010c9a:	f88d 3006 	strb.w	r3, [sp, #6]
 8010c9e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010ca2:	f362 000f 	bfi	r0, r2, #0, #16
 8010ca6:	f363 401f 	bfi	r0, r3, #16, #16
 8010caa:	b002      	add	sp, #8
 8010cac:	4770      	bx	lr
 8010cae:	bf00      	nop

08010cb0 <uxr_object_id_to_raw>:
 8010cb0:	4602      	mov	r2, r0
 8010cb2:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8010cb6:	b082      	sub	sp, #8
 8010cb8:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8010cbc:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8010cc0:	f881 c000 	strb.w	ip, [r1]
 8010cc4:	7048      	strb	r0, [r1, #1]
 8010cc6:	b002      	add	sp, #8
 8010cc8:	4770      	bx	lr
 8010cca:	bf00      	nop

08010ccc <on_get_fragmentation_info>:
 8010ccc:	b500      	push	{lr}
 8010cce:	b08b      	sub	sp, #44	; 0x2c
 8010cd0:	4601      	mov	r1, r0
 8010cd2:	2204      	movs	r2, #4
 8010cd4:	a802      	add	r0, sp, #8
 8010cd6:	f7ff fd19 	bl	801070c <ucdr_init_buffer>
 8010cda:	f10d 0305 	add.w	r3, sp, #5
 8010cde:	f10d 0206 	add.w	r2, sp, #6
 8010ce2:	a901      	add	r1, sp, #4
 8010ce4:	a802      	add	r0, sp, #8
 8010ce6:	f001 f9e1 	bl	80120ac <uxr_read_submessage_header>
 8010cea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010cee:	2b0d      	cmp	r3, #13
 8010cf0:	d003      	beq.n	8010cfa <on_get_fragmentation_info+0x2e>
 8010cf2:	2000      	movs	r0, #0
 8010cf4:	b00b      	add	sp, #44	; 0x2c
 8010cf6:	f85d fb04 	ldr.w	pc, [sp], #4
 8010cfa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010cfe:	f013 0f02 	tst.w	r3, #2
 8010d02:	bf14      	ite	ne
 8010d04:	2002      	movne	r0, #2
 8010d06:	2001      	moveq	r0, #1
 8010d08:	b00b      	add	sp, #44	; 0x2c
 8010d0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010d0e:	bf00      	nop

08010d10 <read_submessage_get_info>:
 8010d10:	b570      	push	{r4, r5, r6, lr}
 8010d12:	2500      	movs	r5, #0
 8010d14:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8010d18:	460e      	mov	r6, r1
 8010d1a:	4604      	mov	r4, r0
 8010d1c:	f44f 7224 	mov.w	r2, #656	; 0x290
 8010d20:	4629      	mov	r1, r5
 8010d22:	a810      	add	r0, sp, #64	; 0x40
 8010d24:	9503      	str	r5, [sp, #12]
 8010d26:	9504      	str	r5, [sp, #16]
 8010d28:	f00b fcc4 	bl	801c6b4 <memset>
 8010d2c:	a903      	add	r1, sp, #12
 8010d2e:	4630      	mov	r0, r6
 8010d30:	f002 faaa 	bl	8013288 <uxr_deserialize_GET_INFO_Payload>
 8010d34:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010d38:	4620      	mov	r0, r4
 8010d3a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010d3e:	f001 f823 	bl	8011d88 <uxr_session_header_offset>
 8010d42:	462b      	mov	r3, r5
 8010d44:	220c      	movs	r2, #12
 8010d46:	a905      	add	r1, sp, #20
 8010d48:	9000      	str	r0, [sp, #0]
 8010d4a:	a808      	add	r0, sp, #32
 8010d4c:	f7ff fccc 	bl	80106e8 <ucdr_init_buffer_origin_offset>
 8010d50:	a910      	add	r1, sp, #64	; 0x40
 8010d52:	a808      	add	r0, sp, #32
 8010d54:	f002 fb0c 	bl	8013370 <uxr_serialize_INFO_Payload>
 8010d58:	9b08      	ldr	r3, [sp, #32]
 8010d5a:	462a      	mov	r2, r5
 8010d5c:	4629      	mov	r1, r5
 8010d5e:	4620      	mov	r0, r4
 8010d60:	f000 ffbe 	bl	8011ce0 <uxr_stamp_session_header>
 8010d64:	a808      	add	r0, sp, #32
 8010d66:	f7ff fcff 	bl	8010768 <ucdr_buffer_length>
 8010d6a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010d6c:	4602      	mov	r2, r0
 8010d6e:	a905      	add	r1, sp, #20
 8010d70:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010d74:	47a0      	blx	r4
 8010d76:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 8010d7a:	bd70      	pop	{r4, r5, r6, pc}

08010d7c <write_submessage_acknack.isra.0>:
 8010d7c:	b570      	push	{r4, r5, r6, lr}
 8010d7e:	b092      	sub	sp, #72	; 0x48
 8010d80:	4605      	mov	r5, r0
 8010d82:	460e      	mov	r6, r1
 8010d84:	4614      	mov	r4, r2
 8010d86:	f000 ffff 	bl	8011d88 <uxr_session_header_offset>
 8010d8a:	a905      	add	r1, sp, #20
 8010d8c:	9000      	str	r0, [sp, #0]
 8010d8e:	2300      	movs	r3, #0
 8010d90:	a80a      	add	r0, sp, #40	; 0x28
 8010d92:	2211      	movs	r2, #17
 8010d94:	f7ff fca8 	bl	80106e8 <ucdr_init_buffer_origin_offset>
 8010d98:	2218      	movs	r2, #24
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	210a      	movs	r1, #10
 8010d9e:	fb02 5404 	mla	r4, r2, r4, r5
 8010da2:	a80a      	add	r0, sp, #40	; 0x28
 8010da4:	2205      	movs	r2, #5
 8010da6:	3450      	adds	r4, #80	; 0x50
 8010da8:	f001 f966 	bl	8012078 <uxr_buffer_submessage_header>
 8010dac:	a903      	add	r1, sp, #12
 8010dae:	4620      	mov	r0, r4
 8010db0:	f009 f810 	bl	8019dd4 <uxr_compute_acknack>
 8010db4:	ba40      	rev16	r0, r0
 8010db6:	a903      	add	r1, sp, #12
 8010db8:	f88d 6010 	strb.w	r6, [sp, #16]
 8010dbc:	f8ad 000e 	strh.w	r0, [sp, #14]
 8010dc0:	a80a      	add	r0, sp, #40	; 0x28
 8010dc2:	f002 fb47 	bl	8013454 <uxr_serialize_ACKNACK_Payload>
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010dca:	4628      	mov	r0, r5
 8010dcc:	4611      	mov	r1, r2
 8010dce:	f000 ff87 	bl	8011ce0 <uxr_stamp_session_header>
 8010dd2:	a80a      	add	r0, sp, #40	; 0x28
 8010dd4:	f7ff fcc8 	bl	8010768 <ucdr_buffer_length>
 8010dd8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8010dda:	4602      	mov	r2, r0
 8010ddc:	a905      	add	r1, sp, #20
 8010dde:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010de2:	47a0      	blx	r4
 8010de4:	b012      	add	sp, #72	; 0x48
 8010de6:	bd70      	pop	{r4, r5, r6, pc}

08010de8 <uxr_init_session>:
 8010de8:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8010e20 <uxr_init_session+0x38>
 8010dec:	2300      	movs	r3, #0
 8010dee:	b510      	push	{r4, lr}
 8010df0:	4604      	mov	r4, r0
 8010df2:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8010df6:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 8010dfa:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 8010dfe:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 8010e02:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 8010e06:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 8010e0a:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 8010e0e:	2181      	movs	r1, #129	; 0x81
 8010e10:	f000 feca 	bl	8011ba8 <uxr_init_session_info>
 8010e14:	f104 0008 	add.w	r0, r4, #8
 8010e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e1c:	f001 b848 	b.w	8011eb0 <uxr_init_stream_storage>
	...

08010e28 <uxr_set_status_callback>:
 8010e28:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8010e2c:	4770      	bx	lr
 8010e2e:	bf00      	nop

08010e30 <uxr_set_topic_callback>:
 8010e30:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8010e34:	4770      	bx	lr
 8010e36:	bf00      	nop

08010e38 <uxr_set_request_callback>:
 8010e38:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8010e3c:	4770      	bx	lr
 8010e3e:	bf00      	nop

08010e40 <uxr_set_reply_callback>:
 8010e40:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8010e44:	4770      	bx	lr
 8010e46:	bf00      	nop

08010e48 <uxr_create_output_best_effort_stream>:
 8010e48:	b510      	push	{r4, lr}
 8010e4a:	4604      	mov	r4, r0
 8010e4c:	b084      	sub	sp, #16
 8010e4e:	e9cd 2100 	strd	r2, r1, [sp]
 8010e52:	f000 ff99 	bl	8011d88 <uxr_session_header_offset>
 8010e56:	4603      	mov	r3, r0
 8010e58:	f104 0008 	add.w	r0, r4, #8
 8010e5c:	e9dd 2100 	ldrd	r2, r1, [sp]
 8010e60:	b004      	add	sp, #16
 8010e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e66:	f001 b869 	b.w	8011f3c <uxr_add_output_best_effort_buffer>
 8010e6a:	bf00      	nop

08010e6c <uxr_create_output_reliable_stream>:
 8010e6c:	b530      	push	{r4, r5, lr}
 8010e6e:	b089      	sub	sp, #36	; 0x24
 8010e70:	4604      	mov	r4, r0
 8010e72:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010e76:	9303      	str	r3, [sp, #12]
 8010e78:	f000 ff86 	bl	8011d88 <uxr_session_header_offset>
 8010e7c:	4605      	mov	r5, r0
 8010e7e:	9905      	ldr	r1, [sp, #20]
 8010e80:	f104 0008 	add.w	r0, r4, #8
 8010e84:	9500      	str	r5, [sp, #0]
 8010e86:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010e8a:	f001 f86b 	bl	8011f64 <uxr_add_output_reliable_buffer>
 8010e8e:	2200      	movs	r2, #0
 8010e90:	fa5f fc80 	uxtb.w	ip, r0
 8010e94:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8010e98:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8010e9c:	0e03      	lsrs	r3, r0, #24
 8010e9e:	f36c 0207 	bfi	r2, ip, #0, #8
 8010ea2:	f364 220f 	bfi	r2, r4, #8, #8
 8010ea6:	f361 4217 	bfi	r2, r1, #16, #8
 8010eaa:	f363 621f 	bfi	r2, r3, #24, #8
 8010eae:	4610      	mov	r0, r2
 8010eb0:	b009      	add	sp, #36	; 0x24
 8010eb2:	bd30      	pop	{r4, r5, pc}

08010eb4 <uxr_create_input_best_effort_stream>:
 8010eb4:	b082      	sub	sp, #8
 8010eb6:	3008      	adds	r0, #8
 8010eb8:	b002      	add	sp, #8
 8010eba:	f001 b86d 	b.w	8011f98 <uxr_add_input_best_effort_buffer>
 8010ebe:	bf00      	nop

08010ec0 <uxr_create_input_reliable_stream>:
 8010ec0:	b510      	push	{r4, lr}
 8010ec2:	4c0c      	ldr	r4, [pc, #48]	; (8010ef4 <uxr_create_input_reliable_stream+0x34>)
 8010ec4:	b084      	sub	sp, #16
 8010ec6:	3008      	adds	r0, #8
 8010ec8:	9400      	str	r4, [sp, #0]
 8010eca:	f001 f87b 	bl	8011fc4 <uxr_add_input_reliable_buffer>
 8010ece:	2200      	movs	r2, #0
 8010ed0:	fa5f fe80 	uxtb.w	lr, r0
 8010ed4:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8010ed8:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8010edc:	0e03      	lsrs	r3, r0, #24
 8010ede:	f36e 0207 	bfi	r2, lr, #0, #8
 8010ee2:	f36c 220f 	bfi	r2, ip, #8, #8
 8010ee6:	f361 4217 	bfi	r2, r1, #16, #8
 8010eea:	f363 621f 	bfi	r2, r3, #24, #8
 8010eee:	4610      	mov	r0, r2
 8010ef0:	b004      	add	sp, #16
 8010ef2:	bd10      	pop	{r4, pc}
 8010ef4:	08010ccd 	.word	0x08010ccd

08010ef8 <uxr_epoch_nanos>:
 8010ef8:	b510      	push	{r4, lr}
 8010efa:	4604      	mov	r4, r0
 8010efc:	f001 f91e 	bl	801213c <uxr_nanos>
 8010f00:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8010f04:	1ac0      	subs	r0, r0, r3
 8010f06:	eb61 0102 	sbc.w	r1, r1, r2
 8010f0a:	bd10      	pop	{r4, pc}

08010f0c <uxr_flash_output_streams>:
 8010f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f10:	7e03      	ldrb	r3, [r0, #24]
 8010f12:	b084      	sub	sp, #16
 8010f14:	4604      	mov	r4, r0
 8010f16:	b1fb      	cbz	r3, 8010f58 <uxr_flash_output_streams+0x4c>
 8010f18:	f04f 0900 	mov.w	r9, #0
 8010f1c:	f10d 0802 	add.w	r8, sp, #2
 8010f20:	af03      	add	r7, sp, #12
 8010f22:	ae02      	add	r6, sp, #8
 8010f24:	4648      	mov	r0, r9
 8010f26:	2201      	movs	r2, #1
 8010f28:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010f2c:	4611      	mov	r1, r2
 8010f2e:	3508      	adds	r5, #8
 8010f30:	f000 ff64 	bl	8011dfc <uxr_stream_id>
 8010f34:	4684      	mov	ip, r0
 8010f36:	4643      	mov	r3, r8
 8010f38:	463a      	mov	r2, r7
 8010f3a:	4631      	mov	r1, r6
 8010f3c:	4628      	mov	r0, r5
 8010f3e:	f8cd c004 	str.w	ip, [sp, #4]
 8010f42:	f008 ffd1 	bl	8019ee8 <uxr_prepare_best_effort_buffer_to_send>
 8010f46:	2800      	cmp	r0, #0
 8010f48:	d13d      	bne.n	8010fc6 <uxr_flash_output_streams+0xba>
 8010f4a:	f109 0901 	add.w	r9, r9, #1
 8010f4e:	7e23      	ldrb	r3, [r4, #24]
 8010f50:	fa5f f089 	uxtb.w	r0, r9
 8010f54:	4283      	cmp	r3, r0
 8010f56:	d8e6      	bhi.n	8010f26 <uxr_flash_output_streams+0x1a>
 8010f58:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8010f5c:	b383      	cbz	r3, 8010fc0 <uxr_flash_output_streams+0xb4>
 8010f5e:	f04f 0900 	mov.w	r9, #0
 8010f62:	f10d 0802 	add.w	r8, sp, #2
 8010f66:	af03      	add	r7, sp, #12
 8010f68:	ae02      	add	r6, sp, #8
 8010f6a:	4648      	mov	r0, r9
 8010f6c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8010f70:	2201      	movs	r2, #1
 8010f72:	2102      	movs	r1, #2
 8010f74:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010f78:	f000 ff40 	bl	8011dfc <uxr_stream_id>
 8010f7c:	9001      	str	r0, [sp, #4]
 8010f7e:	3520      	adds	r5, #32
 8010f80:	e00c      	b.n	8010f9c <uxr_flash_output_streams+0x90>
 8010f82:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010f86:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010f8a:	9b02      	ldr	r3, [sp, #8]
 8010f8c:	f000 fea8 	bl	8011ce0 <uxr_stamp_session_header>
 8010f90:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010f92:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010f96:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8010f9a:	47d0      	blx	sl
 8010f9c:	4643      	mov	r3, r8
 8010f9e:	463a      	mov	r2, r7
 8010fa0:	4631      	mov	r1, r6
 8010fa2:	4628      	mov	r0, r5
 8010fa4:	f009 f9c4 	bl	801a330 <uxr_prepare_next_reliable_buffer_to_send>
 8010fa8:	4603      	mov	r3, r0
 8010faa:	4620      	mov	r0, r4
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d1e8      	bne.n	8010f82 <uxr_flash_output_streams+0x76>
 8010fb0:	f109 0901 	add.w	r9, r9, #1
 8010fb4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8010fb8:	fa5f f089 	uxtb.w	r0, r9
 8010fbc:	4283      	cmp	r3, r0
 8010fbe:	d8d5      	bhi.n	8010f6c <uxr_flash_output_streams+0x60>
 8010fc0:	b004      	add	sp, #16
 8010fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fc6:	9b02      	ldr	r3, [sp, #8]
 8010fc8:	4620      	mov	r0, r4
 8010fca:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010fce:	f109 0901 	add.w	r9, r9, #1
 8010fd2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8010fd6:	f000 fe83 	bl	8011ce0 <uxr_stamp_session_header>
 8010fda:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010fdc:	9a03      	ldr	r2, [sp, #12]
 8010fde:	685d      	ldr	r5, [r3, #4]
 8010fe0:	6818      	ldr	r0, [r3, #0]
 8010fe2:	9902      	ldr	r1, [sp, #8]
 8010fe4:	47a8      	blx	r5
 8010fe6:	7e23      	ldrb	r3, [r4, #24]
 8010fe8:	fa5f f089 	uxtb.w	r0, r9
 8010fec:	4283      	cmp	r3, r0
 8010fee:	d89a      	bhi.n	8010f26 <uxr_flash_output_streams+0x1a>
 8010ff0:	e7b2      	b.n	8010f58 <uxr_flash_output_streams+0x4c>
 8010ff2:	bf00      	nop

08010ff4 <read_submessage_info>:
 8010ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ff8:	460d      	mov	r5, r1
 8010ffa:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8010ffe:	4606      	mov	r6, r0
 8011000:	4669      	mov	r1, sp
 8011002:	4628      	mov	r0, r5
 8011004:	f002 f852 	bl	80130ac <uxr_deserialize_BaseObjectReply>
 8011008:	4604      	mov	r4, r0
 801100a:	a902      	add	r1, sp, #8
 801100c:	4628      	mov	r0, r5
 801100e:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8011012:	f7fe f803 	bl	800f01c <ucdr_deserialize_bool>
 8011016:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801101a:	4004      	ands	r4, r0
 801101c:	b2e4      	uxtb	r4, r4
 801101e:	b95b      	cbnz	r3, 8011038 <read_submessage_info+0x44>
 8011020:	a987      	add	r1, sp, #540	; 0x21c
 8011022:	4628      	mov	r0, r5
 8011024:	f7fd fffa 	bl	800f01c <ucdr_deserialize_bool>
 8011028:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 801102c:	4680      	mov	r8, r0
 801102e:	b94b      	cbnz	r3, 8011044 <read_submessage_info+0x50>
 8011030:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8011034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011038:	a903      	add	r1, sp, #12
 801103a:	4628      	mov	r0, r5
 801103c:	f001 fee2 	bl	8012e04 <uxr_deserialize_ObjectVariant>
 8011040:	4004      	ands	r4, r0
 8011042:	e7ed      	b.n	8011020 <read_submessage_info+0x2c>
 8011044:	a988      	add	r1, sp, #544	; 0x220
 8011046:	4628      	mov	r0, r5
 8011048:	f7fe f816 	bl	800f078 <ucdr_deserialize_uint8_t>
 801104c:	ea14 0f08 	tst.w	r4, r8
 8011050:	d0ee      	beq.n	8011030 <read_submessage_info+0x3c>
 8011052:	2800      	cmp	r0, #0
 8011054:	d0ec      	beq.n	8011030 <read_submessage_info+0x3c>
 8011056:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 801105a:	2b0d      	cmp	r3, #13
 801105c:	d1e8      	bne.n	8011030 <read_submessage_info+0x3c>
 801105e:	a98a      	add	r1, sp, #552	; 0x228
 8011060:	4628      	mov	r0, r5
 8011062:	f7fe fe2f 	bl	800fcc4 <ucdr_deserialize_int16_t>
 8011066:	b138      	cbz	r0, 8011078 <read_submessage_info+0x84>
 8011068:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 801106c:	2b00      	cmp	r3, #0
 801106e:	dd06      	ble.n	801107e <read_submessage_info+0x8a>
 8011070:	2f00      	cmp	r7, #0
 8011072:	bf14      	ite	ne
 8011074:	2001      	movne	r0, #1
 8011076:	2002      	moveq	r0, #2
 8011078:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 801107c:	e7d8      	b.n	8011030 <read_submessage_info+0x3c>
 801107e:	2000      	movs	r0, #0
 8011080:	e7fa      	b.n	8011078 <read_submessage_info+0x84>
 8011082:	bf00      	nop

08011084 <read_submessage_list>:
 8011084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011088:	4604      	mov	r4, r0
 801108a:	b097      	sub	sp, #92	; 0x5c
 801108c:	460d      	mov	r5, r1
 801108e:	4ec1      	ldr	r6, [pc, #772]	; (8011394 <read_submessage_list+0x310>)
 8011090:	9209      	str	r2, [sp, #36]	; 0x24
 8011092:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8011096:	aa0c      	add	r2, sp, #48	; 0x30
 8011098:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 801109c:	4628      	mov	r0, r5
 801109e:	f001 f805 	bl	80120ac <uxr_read_submessage_header>
 80110a2:	2800      	cmp	r0, #0
 80110a4:	f000 8142 	beq.w	801132c <read_submessage_list+0x2a8>
 80110a8:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 80110ac:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 80110b0:	3b02      	subs	r3, #2
 80110b2:	2b0d      	cmp	r3, #13
 80110b4:	d8ed      	bhi.n	8011092 <read_submessage_list+0xe>
 80110b6:	a101      	add	r1, pc, #4	; (adr r1, 80110bc <read_submessage_list+0x38>)
 80110b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80110bc:	08011323 	.word	0x08011323
 80110c0:	08011093 	.word	0x08011093
 80110c4:	08011313 	.word	0x08011313
 80110c8:	080112b1 	.word	0x080112b1
 80110cc:	080112a7 	.word	0x080112a7
 80110d0:	08011093 	.word	0x08011093
 80110d4:	08011093 	.word	0x08011093
 80110d8:	080111fd 	.word	0x080111fd
 80110dc:	0801118f 	.word	0x0801118f
 80110e0:	0801114f 	.word	0x0801114f
 80110e4:	08011093 	.word	0x08011093
 80110e8:	08011093 	.word	0x08011093
 80110ec:	08011093 	.word	0x08011093
 80110f0:	080110f5 	.word	0x080110f5
 80110f4:	a910      	add	r1, sp, #64	; 0x40
 80110f6:	4628      	mov	r0, r5
 80110f8:	f002 fa00 	bl	80134fc <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80110fc:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 8011100:	f1b8 0f00 	cmp.w	r8, #0
 8011104:	f000 811a 	beq.w	801133c <read_submessage_list+0x2b8>
 8011108:	f001 f818 	bl	801213c <uxr_nanos>
 801110c:	4602      	mov	r2, r0
 801110e:	460b      	mov	r3, r1
 8011110:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8011114:	2100      	movs	r1, #0
 8011116:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8011118:	9006      	str	r0, [sp, #24]
 801111a:	468c      	mov	ip, r1
 801111c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801111e:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8011122:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8011124:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8011128:	468c      	mov	ip, r1
 801112a:	9811      	ldr	r0, [sp, #68]	; 0x44
 801112c:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8011130:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8011134:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 8011138:	fbc7 0106 	smlal	r0, r1, r7, r6
 801113c:	e9cd 0100 	strd	r0, r1, [sp]
 8011140:	4620      	mov	r0, r4
 8011142:	47c0      	blx	r8
 8011144:	f04f 0301 	mov.w	r3, #1
 8011148:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 801114c:	e7a1      	b.n	8011092 <read_submessage_list+0xe>
 801114e:	a910      	add	r1, sp, #64	; 0x40
 8011150:	4628      	mov	r0, r5
 8011152:	f002 f9bf 	bl	80134d4 <uxr_deserialize_HEARTBEAT_Payload>
 8011156:	2100      	movs	r1, #0
 8011158:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801115c:	f000 fe7c 	bl	8011e58 <uxr_stream_id_from_raw>
 8011160:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8011164:	900f      	str	r0, [sp, #60]	; 0x3c
 8011166:	f104 0008 	add.w	r0, r4, #8
 801116a:	4641      	mov	r1, r8
 801116c:	f000 ff62 	bl	8012034 <uxr_get_input_reliable_stream>
 8011170:	2800      	cmp	r0, #0
 8011172:	d08e      	beq.n	8011092 <read_submessage_list+0xe>
 8011174:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8011178:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801117c:	f008 fe1e 	bl	8019dbc <uxr_process_heartbeat>
 8011180:	4642      	mov	r2, r8
 8011182:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8011186:	4620      	mov	r0, r4
 8011188:	f7ff fdf8 	bl	8010d7c <write_submessage_acknack.isra.0>
 801118c:	e781      	b.n	8011092 <read_submessage_list+0xe>
 801118e:	a910      	add	r1, sp, #64	; 0x40
 8011190:	4628      	mov	r0, r5
 8011192:	f002 f977 	bl	8013484 <uxr_deserialize_ACKNACK_Payload>
 8011196:	2100      	movs	r1, #0
 8011198:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801119c:	f000 fe5c 	bl	8011e58 <uxr_stream_id_from_raw>
 80111a0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80111a4:	900d      	str	r0, [sp, #52]	; 0x34
 80111a6:	f104 0008 	add.w	r0, r4, #8
 80111aa:	f000 ff2d 	bl	8012008 <uxr_get_output_reliable_stream>
 80111ae:	4680      	mov	r8, r0
 80111b0:	2800      	cmp	r0, #0
 80111b2:	f43f af6e 	beq.w	8011092 <read_submessage_list+0xe>
 80111b6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80111ba:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 80111be:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 80111c2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80111c6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80111ca:	b289      	uxth	r1, r1
 80111cc:	f009 f958 	bl	801a480 <uxr_process_acknack>
 80111d0:	4640      	mov	r0, r8
 80111d2:	f009 f919 	bl	801a408 <uxr_begin_output_nack_buffer_it>
 80111d6:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 80111da:	e005      	b.n	80111e8 <read_submessage_list+0x164>
 80111dc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80111de:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 80111e2:	e9d3 0900 	ldrd	r0, r9, [r3]
 80111e6:	47c8      	blx	r9
 80111e8:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 80111ec:	aa0f      	add	r2, sp, #60	; 0x3c
 80111ee:	4651      	mov	r1, sl
 80111f0:	4640      	mov	r0, r8
 80111f2:	f009 f90b 	bl	801a40c <uxr_next_reliable_nack_buffer_to_send>
 80111f6:	2800      	cmp	r0, #0
 80111f8:	d1f0      	bne.n	80111dc <read_submessage_list+0x158>
 80111fa:	e74a      	b.n	8011092 <read_submessage_list+0xe>
 80111fc:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8011200:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8011204:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8011208:	4628      	mov	r0, r5
 801120a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 801120e:	4651      	mov	r1, sl
 8011210:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8011214:	f1a8 0804 	sub.w	r8, r8, #4
 8011218:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 801121c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8011220:	fa1f f888 	uxth.w	r8, r8
 8011224:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8011228:	f009 090e 	and.w	r9, r9, #14
 801122c:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8011230:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8011234:	f001 fe88 	bl	8012f48 <uxr_deserialize_BaseObjectRequest>
 8011238:	4650      	mov	r0, sl
 801123a:	a90f      	add	r1, sp, #60	; 0x3c
 801123c:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8011240:	f000 fdca 	bl	8011dd8 <uxr_parse_base_object_request>
 8011244:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011246:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 801124a:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 801124e:	9110      	str	r1, [sp, #64]	; 0x40
 8011250:	f1bb 0f00 	cmp.w	fp, #0
 8011254:	d006      	beq.n	8011264 <read_submessage_list+0x1e0>
 8011256:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 801125a:	4652      	mov	r2, sl
 801125c:	4620      	mov	r0, r4
 801125e:	9300      	str	r3, [sp, #0]
 8011260:	2300      	movs	r3, #0
 8011262:	47d8      	blx	fp
 8011264:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8011266:	b182      	cbz	r2, 801128a <read_submessage_list+0x206>
 8011268:	6f61      	ldr	r1, [r4, #116]	; 0x74
 801126a:	f04f 0c00 	mov.w	ip, #0
 801126e:	3902      	subs	r1, #2
 8011270:	e003      	b.n	801127a <read_submessage_list+0x1f6>
 8011272:	f10c 0c01 	add.w	ip, ip, #1
 8011276:	4594      	cmp	ip, r2
 8011278:	d007      	beq.n	801128a <read_submessage_list+0x206>
 801127a:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 801127e:	4553      	cmp	r3, sl
 8011280:	d1f7      	bne.n	8011272 <read_submessage_list+0x1ee>
 8011282:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8011284:	2200      	movs	r2, #0
 8011286:	f803 200c 	strb.w	r2, [r3, ip]
 801128a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801128e:	464b      	mov	r3, r9
 8011290:	4642      	mov	r2, r8
 8011292:	4620      	mov	r0, r4
 8011294:	9102      	str	r1, [sp, #8]
 8011296:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011298:	9101      	str	r1, [sp, #4]
 801129a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801129c:	9100      	str	r1, [sp, #0]
 801129e:	4629      	mov	r1, r5
 80112a0:	f009 f9b0 	bl	801a604 <read_submessage_format>
 80112a4:	e6f5      	b.n	8011092 <read_submessage_list+0xe>
 80112a6:	4629      	mov	r1, r5
 80112a8:	4620      	mov	r0, r4
 80112aa:	f7ff fea3 	bl	8010ff4 <read_submessage_info>
 80112ae:	e6f0      	b.n	8011092 <read_submessage_list+0xe>
 80112b0:	2a00      	cmp	r2, #0
 80112b2:	d03e      	beq.n	8011332 <read_submessage_list+0x2ae>
 80112b4:	a910      	add	r1, sp, #64	; 0x40
 80112b6:	4628      	mov	r0, r5
 80112b8:	f002 f83c 	bl	8013334 <uxr_deserialize_STATUS_Payload>
 80112bc:	a90e      	add	r1, sp, #56	; 0x38
 80112be:	aa0d      	add	r2, sp, #52	; 0x34
 80112c0:	a810      	add	r0, sp, #64	; 0x40
 80112c2:	f000 fd89 	bl	8011dd8 <uxr_parse_base_object_request>
 80112c6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80112c8:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 80112cc:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 80112d0:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 80112d4:	910f      	str	r1, [sp, #60]	; 0x3c
 80112d6:	f1ba 0f00 	cmp.w	sl, #0
 80112da:	d006      	beq.n	80112ea <read_submessage_list+0x266>
 80112dc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80112e0:	4642      	mov	r2, r8
 80112e2:	4620      	mov	r0, r4
 80112e4:	9300      	str	r3, [sp, #0]
 80112e6:	464b      	mov	r3, r9
 80112e8:	47d0      	blx	sl
 80112ea:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80112ec:	2a00      	cmp	r2, #0
 80112ee:	f43f aed0 	beq.w	8011092 <read_submessage_list+0xe>
 80112f2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80112f4:	2100      	movs	r1, #0
 80112f6:	3802      	subs	r0, #2
 80112f8:	e003      	b.n	8011302 <read_submessage_list+0x27e>
 80112fa:	3101      	adds	r1, #1
 80112fc:	4291      	cmp	r1, r2
 80112fe:	f43f aec8 	beq.w	8011092 <read_submessage_list+0xe>
 8011302:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8011306:	4543      	cmp	r3, r8
 8011308:	d1f7      	bne.n	80112fa <read_submessage_list+0x276>
 801130a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801130c:	f803 9001 	strb.w	r9, [r3, r1]
 8011310:	e6bf      	b.n	8011092 <read_submessage_list+0xe>
 8011312:	2a00      	cmp	r2, #0
 8011314:	f47f aebd 	bne.w	8011092 <read_submessage_list+0xe>
 8011318:	4629      	mov	r1, r5
 801131a:	4620      	mov	r0, r4
 801131c:	f000 fca0 	bl	8011c60 <uxr_read_create_session_status>
 8011320:	e6b7      	b.n	8011092 <read_submessage_list+0xe>
 8011322:	4629      	mov	r1, r5
 8011324:	4620      	mov	r0, r4
 8011326:	f7ff fcf3 	bl	8010d10 <read_submessage_get_info>
 801132a:	e6b2      	b.n	8011092 <read_submessage_list+0xe>
 801132c:	b017      	add	sp, #92	; 0x5c
 801132e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011332:	4629      	mov	r1, r5
 8011334:	4620      	mov	r0, r4
 8011336:	f000 fca1 	bl	8011c7c <uxr_read_delete_session_status>
 801133a:	e6aa      	b.n	8011092 <read_submessage_list+0xe>
 801133c:	f000 fefe 	bl	801213c <uxr_nanos>
 8011340:	4642      	mov	r2, r8
 8011342:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8011344:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011346:	fbc7 3206 	smlal	r3, r2, r7, r6
 801134a:	1818      	adds	r0, r3, r0
 801134c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 801134e:	eb42 0101 	adc.w	r1, r2, r1
 8011352:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011354:	4642      	mov	r2, r8
 8011356:	fbc7 3206 	smlal	r3, r2, r7, r6
 801135a:	469c      	mov	ip, r3
 801135c:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 8011360:	fbc3 7806 	smlal	r7, r8, r3, r6
 8011364:	4643      	mov	r3, r8
 8011366:	eb1c 0c07 	adds.w	ip, ip, r7
 801136a:	eb42 0203 	adc.w	r2, r2, r3
 801136e:	ebb0 030c 	subs.w	r3, r0, ip
 8011372:	eb61 0202 	sbc.w	r2, r1, r2
 8011376:	2a00      	cmp	r2, #0
 8011378:	db08      	blt.n	801138c <read_submessage_list+0x308>
 801137a:	085b      	lsrs	r3, r3, #1
 801137c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8011380:	1052      	asrs	r2, r2, #1
 8011382:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8011386:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 801138a:	e6db      	b.n	8011144 <read_submessage_list+0xc0>
 801138c:	3301      	adds	r3, #1
 801138e:	f142 0200 	adc.w	r2, r2, #0
 8011392:	e7f2      	b.n	801137a <read_submessage_list+0x2f6>
 8011394:	3b9aca00 	.word	0x3b9aca00

08011398 <listen_message_reliably>:
 8011398:	1e0b      	subs	r3, r1, #0
 801139a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801139e:	bfb8      	it	lt
 80113a0:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 80113a4:	b09d      	sub	sp, #116	; 0x74
 80113a6:	4680      	mov	r8, r0
 80113a8:	9305      	str	r3, [sp, #20]
 80113aa:	f000 feab 	bl	8012104 <uxr_millis>
 80113ae:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 80113b2:	4681      	mov	r9, r0
 80113b4:	2a00      	cmp	r2, #0
 80113b6:	f000 809a 	beq.w	80114ee <listen_message_reliably+0x156>
 80113ba:	2600      	movs	r6, #0
 80113bc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80113c0:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80113c4:	460f      	mov	r7, r1
 80113c6:	4630      	mov	r0, r6
 80113c8:	9303      	str	r3, [sp, #12]
 80113ca:	e00e      	b.n	80113ea <listen_message_reliably+0x52>
 80113cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80113ce:	3601      	adds	r6, #1
 80113d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80113d2:	455a      	cmp	r2, fp
 80113d4:	9903      	ldr	r1, [sp, #12]
 80113d6:	b2f0      	uxtb	r0, r6
 80113d8:	eb73 0101 	sbcs.w	r1, r3, r1
 80113dc:	da01      	bge.n	80113e2 <listen_message_reliably+0x4a>
 80113de:	4693      	mov	fp, r2
 80113e0:	9303      	str	r3, [sp, #12]
 80113e2:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 80113e6:	4283      	cmp	r3, r0
 80113e8:	d95f      	bls.n	80114aa <listen_message_reliably+0x112>
 80113ea:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 80113ee:	2102      	movs	r1, #2
 80113f0:	2201      	movs	r2, #1
 80113f2:	00e4      	lsls	r4, r4, #3
 80113f4:	f000 fd02 	bl	8011dfc <uxr_stream_id>
 80113f8:	4601      	mov	r1, r0
 80113fa:	f104 0520 	add.w	r5, r4, #32
 80113fe:	463b      	mov	r3, r7
 8011400:	464a      	mov	r2, r9
 8011402:	9109      	str	r1, [sp, #36]	; 0x24
 8011404:	4445      	add	r5, r8
 8011406:	4628      	mov	r0, r5
 8011408:	f008 ffd2 	bl	801a3b0 <uxr_update_output_stream_heartbeat_timestamp>
 801140c:	eb08 0304 	add.w	r3, r8, r4
 8011410:	2800      	cmp	r0, #0
 8011412:	d0db      	beq.n	80113cc <listen_message_reliably+0x34>
 8011414:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 8011418:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 801141c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8011420:	4640      	mov	r0, r8
 8011422:	3501      	adds	r5, #1
 8011424:	4444      	add	r4, r8
 8011426:	9304      	str	r3, [sp, #16]
 8011428:	f000 fcae 	bl	8011d88 <uxr_session_header_offset>
 801142c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8011430:	2300      	movs	r3, #0
 8011432:	2211      	movs	r2, #17
 8011434:	a90c      	add	r1, sp, #48	; 0x30
 8011436:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 801143a:	9000      	str	r0, [sp, #0]
 801143c:	4650      	mov	r0, sl
 801143e:	3601      	adds	r6, #1
 8011440:	f7ff f952 	bl	80106e8 <ucdr_init_buffer_origin_offset>
 8011444:	2300      	movs	r3, #0
 8011446:	2205      	movs	r2, #5
 8011448:	210b      	movs	r1, #11
 801144a:	4650      	mov	r0, sl
 801144c:	f000 fe14 	bl	8012078 <uxr_buffer_submessage_header>
 8011450:	2101      	movs	r1, #1
 8011452:	8968      	ldrh	r0, [r5, #10]
 8011454:	f009 f9a0 	bl	801a798 <uxr_seq_num_add>
 8011458:	892b      	ldrh	r3, [r5, #8]
 801145a:	4602      	mov	r2, r0
 801145c:	a90a      	add	r1, sp, #40	; 0x28
 801145e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8011462:	4650      	mov	r0, sl
 8011464:	9b04      	ldr	r3, [sp, #16]
 8011466:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801146a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801146e:	f002 f81d 	bl	80134ac <uxr_serialize_HEARTBEAT_Payload>
 8011472:	2200      	movs	r2, #0
 8011474:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011476:	4640      	mov	r0, r8
 8011478:	4611      	mov	r1, r2
 801147a:	f000 fc31 	bl	8011ce0 <uxr_stamp_session_header>
 801147e:	4650      	mov	r0, sl
 8011480:	f7ff f972 	bl	8010768 <ucdr_buffer_length>
 8011484:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8011488:	4602      	mov	r2, r0
 801148a:	a90c      	add	r1, sp, #48	; 0x30
 801148c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011490:	47a8      	blx	r5
 8011492:	9903      	ldr	r1, [sp, #12]
 8011494:	b2f0      	uxtb	r0, r6
 8011496:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 801149a:	455a      	cmp	r2, fp
 801149c:	eb73 0101 	sbcs.w	r1, r3, r1
 80114a0:	db9d      	blt.n	80113de <listen_message_reliably+0x46>
 80114a2:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 80114a6:	4283      	cmp	r3, r0
 80114a8:	d89f      	bhi.n	80113ea <listen_message_reliably+0x52>
 80114aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80114ae:	9a03      	ldr	r2, [sp, #12]
 80114b0:	429a      	cmp	r2, r3
 80114b2:	bf08      	it	eq
 80114b4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 80114b8:	d019      	beq.n	80114ee <listen_message_reliably+0x156>
 80114ba:	ebab 0309 	sub.w	r3, fp, r9
 80114be:	2b00      	cmp	r3, #0
 80114c0:	9d05      	ldr	r5, [sp, #20]
 80114c2:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 80114c6:	aa08      	add	r2, sp, #32
 80114c8:	bf08      	it	eq
 80114ca:	2301      	moveq	r3, #1
 80114cc:	a907      	add	r1, sp, #28
 80114ce:	6884      	ldr	r4, [r0, #8]
 80114d0:	429d      	cmp	r5, r3
 80114d2:	6800      	ldr	r0, [r0, #0]
 80114d4:	bfa8      	it	ge
 80114d6:	461d      	movge	r5, r3
 80114d8:	462b      	mov	r3, r5
 80114da:	47a0      	blx	r4
 80114dc:	b948      	cbnz	r0, 80114f2 <listen_message_reliably+0x15a>
 80114de:	9b05      	ldr	r3, [sp, #20]
 80114e0:	1b5b      	subs	r3, r3, r5
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	9305      	str	r3, [sp, #20]
 80114e6:	f73f af60 	bgt.w	80113aa <listen_message_reliably+0x12>
 80114ea:	4604      	mov	r4, r0
 80114ec:	e012      	b.n	8011514 <listen_message_reliably+0x17c>
 80114ee:	9b05      	ldr	r3, [sp, #20]
 80114f0:	e7e5      	b.n	80114be <listen_message_reliably+0x126>
 80114f2:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80114f6:	4604      	mov	r4, r0
 80114f8:	2500      	movs	r5, #0
 80114fa:	a80c      	add	r0, sp, #48	; 0x30
 80114fc:	f7ff f906 	bl	801070c <ucdr_init_buffer>
 8011500:	f10d 031a 	add.w	r3, sp, #26
 8011504:	aa06      	add	r2, sp, #24
 8011506:	a90c      	add	r1, sp, #48	; 0x30
 8011508:	4640      	mov	r0, r8
 801150a:	f88d 5018 	strb.w	r5, [sp, #24]
 801150e:	f000 fbfb 	bl	8011d08 <uxr_read_session_header>
 8011512:	b918      	cbnz	r0, 801151c <listen_message_reliably+0x184>
 8011514:	4620      	mov	r0, r4
 8011516:	b01d      	add	sp, #116	; 0x74
 8011518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801151c:	4629      	mov	r1, r5
 801151e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011522:	f000 fc99 	bl	8011e58 <uxr_stream_id_from_raw>
 8011526:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801152a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801152e:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8011532:	2e01      	cmp	r6, #1
 8011534:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8011538:	d04b      	beq.n	80115d2 <listen_message_reliably+0x23a>
 801153a:	2e02      	cmp	r6, #2
 801153c:	d00f      	beq.n	801155e <listen_message_reliably+0x1c6>
 801153e:	2e00      	cmp	r6, #0
 8011540:	d1e8      	bne.n	8011514 <listen_message_reliably+0x17c>
 8011542:	4631      	mov	r1, r6
 8011544:	4630      	mov	r0, r6
 8011546:	f000 fc87 	bl	8011e58 <uxr_stream_id_from_raw>
 801154a:	4602      	mov	r2, r0
 801154c:	a90c      	add	r1, sp, #48	; 0x30
 801154e:	4640      	mov	r0, r8
 8011550:	920a      	str	r2, [sp, #40]	; 0x28
 8011552:	f7ff fd97 	bl	8011084 <read_submessage_list>
 8011556:	4620      	mov	r0, r4
 8011558:	b01d      	add	sp, #116	; 0x74
 801155a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801155e:	4629      	mov	r1, r5
 8011560:	f108 0008 	add.w	r0, r8, #8
 8011564:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8011568:	f000 fd64 	bl	8012034 <uxr_get_input_reliable_stream>
 801156c:	4607      	mov	r7, r0
 801156e:	b338      	cbz	r0, 80115c0 <listen_message_reliably+0x228>
 8011570:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011572:	a80c      	add	r0, sp, #48	; 0x30
 8011574:	9203      	str	r2, [sp, #12]
 8011576:	f7ff f8fb 	bl	8010770 <ucdr_buffer_remaining>
 801157a:	4603      	mov	r3, r0
 801157c:	f10d 0019 	add.w	r0, sp, #25
 8011580:	9a03      	ldr	r2, [sp, #12]
 8011582:	4651      	mov	r1, sl
 8011584:	9000      	str	r0, [sp, #0]
 8011586:	4638      	mov	r0, r7
 8011588:	f008 fb1c 	bl	8019bc4 <uxr_receive_reliable_message>
 801158c:	b1c0      	cbz	r0, 80115c0 <listen_message_reliably+0x228>
 801158e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011592:	b393      	cbz	r3, 80115fa <listen_message_reliably+0x262>
 8011594:	ae14      	add	r6, sp, #80	; 0x50
 8011596:	f04f 0a02 	mov.w	sl, #2
 801159a:	e00a      	b.n	80115b2 <listen_message_reliably+0x21a>
 801159c:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 80115a0:	4631      	mov	r1, r6
 80115a2:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 80115a6:	4640      	mov	r0, r8
 80115a8:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 80115ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80115ae:	f7ff fd69 	bl	8011084 <read_submessage_list>
 80115b2:	2204      	movs	r2, #4
 80115b4:	4631      	mov	r1, r6
 80115b6:	4638      	mov	r0, r7
 80115b8:	f008 fb86 	bl	8019cc8 <uxr_next_input_reliable_buffer_available>
 80115bc:	2800      	cmp	r0, #0
 80115be:	d1ed      	bne.n	801159c <listen_message_reliably+0x204>
 80115c0:	4640      	mov	r0, r8
 80115c2:	462a      	mov	r2, r5
 80115c4:	4649      	mov	r1, r9
 80115c6:	f7ff fbd9 	bl	8010d7c <write_submessage_acknack.isra.0>
 80115ca:	4620      	mov	r0, r4
 80115cc:	b01d      	add	sp, #116	; 0x74
 80115ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115d2:	4629      	mov	r1, r5
 80115d4:	f108 0008 	add.w	r0, r8, #8
 80115d8:	f000 fd22 	bl	8012020 <uxr_get_input_best_effort_stream>
 80115dc:	2800      	cmp	r0, #0
 80115de:	d099      	beq.n	8011514 <listen_message_reliably+0x17c>
 80115e0:	4651      	mov	r1, sl
 80115e2:	f008 fa65 	bl	8019ab0 <uxr_receive_best_effort_message>
 80115e6:	2800      	cmp	r0, #0
 80115e8:	d094      	beq.n	8011514 <listen_message_reliably+0x17c>
 80115ea:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 80115ee:	a90c      	add	r1, sp, #48	; 0x30
 80115f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80115f2:	4640      	mov	r0, r8
 80115f4:	f7ff fd46 	bl	8011084 <read_submessage_list>
 80115f8:	e78c      	b.n	8011514 <listen_message_reliably+0x17c>
 80115fa:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 80115fe:	a90c      	add	r1, sp, #48	; 0x30
 8011600:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011602:	4640      	mov	r0, r8
 8011604:	f7ff fd3e 	bl	8011084 <read_submessage_list>
 8011608:	e7c4      	b.n	8011594 <listen_message_reliably+0x1fc>
 801160a:	bf00      	nop

0801160c <uxr_run_session_timeout>:
 801160c:	b570      	push	{r4, r5, r6, lr}
 801160e:	4604      	mov	r4, r0
 8011610:	460d      	mov	r5, r1
 8011612:	f000 fd77 	bl	8012104 <uxr_millis>
 8011616:	4606      	mov	r6, r0
 8011618:	4620      	mov	r0, r4
 801161a:	f7ff fc77 	bl	8010f0c <uxr_flash_output_streams>
 801161e:	4629      	mov	r1, r5
 8011620:	4620      	mov	r0, r4
 8011622:	f7ff feb9 	bl	8011398 <listen_message_reliably>
 8011626:	f000 fd6d 	bl	8012104 <uxr_millis>
 801162a:	1b83      	subs	r3, r0, r6
 801162c:	1ae9      	subs	r1, r5, r3
 801162e:	2900      	cmp	r1, #0
 8011630:	dcf6      	bgt.n	8011620 <uxr_run_session_timeout+0x14>
 8011632:	f104 0008 	add.w	r0, r4, #8
 8011636:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801163a:	f000 bd07 	b.w	801204c <uxr_output_streams_confirmed>
 801163e:	bf00      	nop

08011640 <uxr_run_session_until_data>:
 8011640:	b570      	push	{r4, r5, r6, lr}
 8011642:	4604      	mov	r4, r0
 8011644:	460d      	mov	r5, r1
 8011646:	f000 fd5d 	bl	8012104 <uxr_millis>
 801164a:	4606      	mov	r6, r0
 801164c:	4620      	mov	r0, r4
 801164e:	f7ff fc5d 	bl	8010f0c <uxr_flash_output_streams>
 8011652:	2300      	movs	r3, #0
 8011654:	4629      	mov	r1, r5
 8011656:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 801165a:	e005      	b.n	8011668 <uxr_run_session_until_data+0x28>
 801165c:	f000 fd52 	bl	8012104 <uxr_millis>
 8011660:	1b83      	subs	r3, r0, r6
 8011662:	1ae9      	subs	r1, r5, r3
 8011664:	2900      	cmp	r1, #0
 8011666:	dd07      	ble.n	8011678 <uxr_run_session_until_data+0x38>
 8011668:	4620      	mov	r0, r4
 801166a:	f7ff fe95 	bl	8011398 <listen_message_reliably>
 801166e:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8011672:	2800      	cmp	r0, #0
 8011674:	d0f2      	beq.n	801165c <uxr_run_session_until_data+0x1c>
 8011676:	bd70      	pop	{r4, r5, r6, pc}
 8011678:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 801167c:	bd70      	pop	{r4, r5, r6, pc}
 801167e:	bf00      	nop

08011680 <uxr_run_session_until_confirm_delivery>:
 8011680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011684:	4606      	mov	r6, r0
 8011686:	460d      	mov	r5, r1
 8011688:	f000 fd3c 	bl	8012104 <uxr_millis>
 801168c:	4607      	mov	r7, r0
 801168e:	4630      	mov	r0, r6
 8011690:	f106 0808 	add.w	r8, r6, #8
 8011694:	f7ff fc3a 	bl	8010f0c <uxr_flash_output_streams>
 8011698:	2d00      	cmp	r5, #0
 801169a:	db10      	blt.n	80116be <uxr_run_session_until_confirm_delivery+0x3e>
 801169c:	462c      	mov	r4, r5
 801169e:	e006      	b.n	80116ae <uxr_run_session_until_confirm_delivery+0x2e>
 80116a0:	f7ff fe7a 	bl	8011398 <listen_message_reliably>
 80116a4:	f000 fd2e 	bl	8012104 <uxr_millis>
 80116a8:	1bc3      	subs	r3, r0, r7
 80116aa:	1aec      	subs	r4, r5, r3
 80116ac:	d407      	bmi.n	80116be <uxr_run_session_until_confirm_delivery+0x3e>
 80116ae:	4640      	mov	r0, r8
 80116b0:	f000 fccc 	bl	801204c <uxr_output_streams_confirmed>
 80116b4:	4603      	mov	r3, r0
 80116b6:	4621      	mov	r1, r4
 80116b8:	4630      	mov	r0, r6
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d0f0      	beq.n	80116a0 <uxr_run_session_until_confirm_delivery+0x20>
 80116be:	4640      	mov	r0, r8
 80116c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80116c4:	f000 bcc2 	b.w	801204c <uxr_output_streams_confirmed>

080116c8 <uxr_run_session_until_all_status>:
 80116c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116cc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80116d0:	4606      	mov	r6, r0
 80116d2:	4688      	mov	r8, r1
 80116d4:	4692      	mov	sl, r2
 80116d6:	461f      	mov	r7, r3
 80116d8:	f7ff fc18 	bl	8010f0c <uxr_flash_output_streams>
 80116dc:	f1bb 0f00 	cmp.w	fp, #0
 80116e0:	d004      	beq.n	80116ec <uxr_run_session_until_all_status+0x24>
 80116e2:	465a      	mov	r2, fp
 80116e4:	21ff      	movs	r1, #255	; 0xff
 80116e6:	4638      	mov	r0, r7
 80116e8:	f00a ffe4 	bl	801c6b4 <memset>
 80116ec:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 80116f0:	1e7d      	subs	r5, r7, #1
 80116f2:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 80116f6:	f000 fd05 	bl	8012104 <uxr_millis>
 80116fa:	4641      	mov	r1, r8
 80116fc:	4681      	mov	r9, r0
 80116fe:	4630      	mov	r0, r6
 8011700:	f7ff fe4a 	bl	8011398 <listen_message_reliably>
 8011704:	f000 fcfe 	bl	8012104 <uxr_millis>
 8011708:	eba0 0009 	sub.w	r0, r0, r9
 801170c:	eba8 0100 	sub.w	r1, r8, r0
 8011710:	f1bb 0f00 	cmp.w	fp, #0
 8011714:	d029      	beq.n	801176a <uxr_run_session_until_all_status+0xa2>
 8011716:	46ae      	mov	lr, r5
 8011718:	f04f 0c00 	mov.w	ip, #0
 801171c:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8011720:	2cff      	cmp	r4, #255	; 0xff
 8011722:	d015      	beq.n	8011750 <uxr_run_session_until_all_status+0x88>
 8011724:	f10c 0c01 	add.w	ip, ip, #1
 8011728:	45e3      	cmp	fp, ip
 801172a:	d8f7      	bhi.n	801171c <uxr_run_session_until_all_status+0x54>
 801172c:	2300      	movs	r3, #0
 801172e:	67f3      	str	r3, [r6, #124]	; 0x7c
 8011730:	e000      	b.n	8011734 <uxr_run_session_until_all_status+0x6c>
 8011732:	b158      	cbz	r0, 801174c <uxr_run_session_until_all_status+0x84>
 8011734:	462b      	mov	r3, r5
 8011736:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 801173a:	3302      	adds	r3, #2
 801173c:	2801      	cmp	r0, #1
 801173e:	eba3 0307 	sub.w	r3, r3, r7
 8011742:	bf8c      	ite	hi
 8011744:	2000      	movhi	r0, #0
 8011746:	2001      	movls	r0, #1
 8011748:	459b      	cmp	fp, r3
 801174a:	d8f2      	bhi.n	8011732 <uxr_run_session_until_all_status+0x6a>
 801174c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011750:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8011754:	f10c 0c01 	add.w	ip, ip, #1
 8011758:	45dc      	cmp	ip, fp
 801175a:	d201      	bcs.n	8011760 <uxr_run_session_until_all_status+0x98>
 801175c:	2b00      	cmp	r3, #0
 801175e:	d0dd      	beq.n	801171c <uxr_run_session_until_all_status+0x54>
 8011760:	2900      	cmp	r1, #0
 8011762:	dde3      	ble.n	801172c <uxr_run_session_until_all_status+0x64>
 8011764:	2b00      	cmp	r3, #0
 8011766:	d1ca      	bne.n	80116fe <uxr_run_session_until_all_status+0x36>
 8011768:	e7e0      	b.n	801172c <uxr_run_session_until_all_status+0x64>
 801176a:	2001      	movs	r0, #1
 801176c:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8011770:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011774 <wait_session_status>:
 8011774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011778:	4604      	mov	r4, r0
 801177a:	b09d      	sub	sp, #116	; 0x74
 801177c:	20ff      	movs	r0, #255	; 0xff
 801177e:	9303      	str	r3, [sp, #12]
 8011780:	7160      	strb	r0, [r4, #5]
 8011782:	2b00      	cmp	r3, #0
 8011784:	f000 80b6 	beq.w	80118f4 <wait_session_status+0x180>
 8011788:	4689      	mov	r9, r1
 801178a:	4692      	mov	sl, r2
 801178c:	f04f 0b00 	mov.w	fp, #0
 8011790:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011792:	4652      	mov	r2, sl
 8011794:	4649      	mov	r1, r9
 8011796:	e9d3 0500 	ldrd	r0, r5, [r3]
 801179a:	47a8      	blx	r5
 801179c:	f000 fcb2 	bl	8012104 <uxr_millis>
 80117a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80117a4:	4605      	mov	r5, r0
 80117a6:	e009      	b.n	80117bc <wait_session_status+0x48>
 80117a8:	f000 fcac 	bl	8012104 <uxr_millis>
 80117ac:	1b40      	subs	r0, r0, r5
 80117ae:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	dd40      	ble.n	8011838 <wait_session_status+0xc4>
 80117b6:	7960      	ldrb	r0, [r4, #5]
 80117b8:	28ff      	cmp	r0, #255	; 0xff
 80117ba:	d145      	bne.n	8011848 <wait_session_status+0xd4>
 80117bc:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80117be:	a908      	add	r1, sp, #32
 80117c0:	6896      	ldr	r6, [r2, #8]
 80117c2:	6810      	ldr	r0, [r2, #0]
 80117c4:	aa09      	add	r2, sp, #36	; 0x24
 80117c6:	47b0      	blx	r6
 80117c8:	2800      	cmp	r0, #0
 80117ca:	d0ed      	beq.n	80117a8 <wait_session_status+0x34>
 80117cc:	a80c      	add	r0, sp, #48	; 0x30
 80117ce:	2600      	movs	r6, #0
 80117d0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80117d4:	f7fe ff9a 	bl	801070c <ucdr_init_buffer>
 80117d8:	f10d 031e 	add.w	r3, sp, #30
 80117dc:	aa07      	add	r2, sp, #28
 80117de:	a90c      	add	r1, sp, #48	; 0x30
 80117e0:	4620      	mov	r0, r4
 80117e2:	f88d 601c 	strb.w	r6, [sp, #28]
 80117e6:	f000 fa8f 	bl	8011d08 <uxr_read_session_header>
 80117ea:	2800      	cmp	r0, #0
 80117ec:	d0dc      	beq.n	80117a8 <wait_session_status+0x34>
 80117ee:	4631      	mov	r1, r6
 80117f0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80117f4:	f000 fb30 	bl	8011e58 <uxr_stream_id_from_raw>
 80117f8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80117fc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8011800:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011804:	2f01      	cmp	r7, #1
 8011806:	9302      	str	r3, [sp, #8]
 8011808:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 801180c:	d05c      	beq.n	80118c8 <wait_session_status+0x154>
 801180e:	2f02      	cmp	r7, #2
 8011810:	d020      	beq.n	8011854 <wait_session_status+0xe0>
 8011812:	2f00      	cmp	r7, #0
 8011814:	d1c8      	bne.n	80117a8 <wait_session_status+0x34>
 8011816:	4639      	mov	r1, r7
 8011818:	4638      	mov	r0, r7
 801181a:	f000 fb1d 	bl	8011e58 <uxr_stream_id_from_raw>
 801181e:	a90c      	add	r1, sp, #48	; 0x30
 8011820:	4602      	mov	r2, r0
 8011822:	900b      	str	r0, [sp, #44]	; 0x2c
 8011824:	4620      	mov	r0, r4
 8011826:	f7ff fc2d 	bl	8011084 <read_submessage_list>
 801182a:	f000 fc6b 	bl	8012104 <uxr_millis>
 801182e:	1b40      	subs	r0, r0, r5
 8011830:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8011834:	2b00      	cmp	r3, #0
 8011836:	dcbe      	bgt.n	80117b6 <wait_session_status+0x42>
 8011838:	f10b 0b01 	add.w	fp, fp, #1
 801183c:	9b03      	ldr	r3, [sp, #12]
 801183e:	7960      	ldrb	r0, [r4, #5]
 8011840:	455b      	cmp	r3, fp
 8011842:	d001      	beq.n	8011848 <wait_session_status+0xd4>
 8011844:	28ff      	cmp	r0, #255	; 0xff
 8011846:	d0a3      	beq.n	8011790 <wait_session_status+0x1c>
 8011848:	38ff      	subs	r0, #255	; 0xff
 801184a:	bf18      	it	ne
 801184c:	2001      	movne	r0, #1
 801184e:	b01d      	add	sp, #116	; 0x74
 8011850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011854:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8011858:	4631      	mov	r1, r6
 801185a:	f104 0008 	add.w	r0, r4, #8
 801185e:	9304      	str	r3, [sp, #16]
 8011860:	f000 fbe8 	bl	8012034 <uxr_get_input_reliable_stream>
 8011864:	4680      	mov	r8, r0
 8011866:	b348      	cbz	r0, 80118bc <wait_session_status+0x148>
 8011868:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801186a:	a80c      	add	r0, sp, #48	; 0x30
 801186c:	9205      	str	r2, [sp, #20]
 801186e:	f7fe ff7f 	bl	8010770 <ucdr_buffer_remaining>
 8011872:	4603      	mov	r3, r0
 8011874:	f10d 001d 	add.w	r0, sp, #29
 8011878:	9a05      	ldr	r2, [sp, #20]
 801187a:	9000      	str	r0, [sp, #0]
 801187c:	4640      	mov	r0, r8
 801187e:	9902      	ldr	r1, [sp, #8]
 8011880:	f008 f9a0 	bl	8019bc4 <uxr_receive_reliable_message>
 8011884:	b1d0      	cbz	r0, 80118bc <wait_session_status+0x148>
 8011886:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d03a      	beq.n	8011904 <wait_session_status+0x190>
 801188e:	9f04      	ldr	r7, [sp, #16]
 8011890:	e00a      	b.n	80118a8 <wait_session_status+0x134>
 8011892:	f04f 0302 	mov.w	r3, #2
 8011896:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 801189a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801189e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 80118a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80118a4:	f7ff fbee 	bl	8011084 <read_submessage_list>
 80118a8:	a914      	add	r1, sp, #80	; 0x50
 80118aa:	2204      	movs	r2, #4
 80118ac:	4640      	mov	r0, r8
 80118ae:	f008 fa0b 	bl	8019cc8 <uxr_next_input_reliable_buffer_available>
 80118b2:	4603      	mov	r3, r0
 80118b4:	a914      	add	r1, sp, #80	; 0x50
 80118b6:	4620      	mov	r0, r4
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d1ea      	bne.n	8011892 <wait_session_status+0x11e>
 80118bc:	4632      	mov	r2, r6
 80118be:	9904      	ldr	r1, [sp, #16]
 80118c0:	4620      	mov	r0, r4
 80118c2:	f7ff fa5b 	bl	8010d7c <write_submessage_acknack.isra.0>
 80118c6:	e76f      	b.n	80117a8 <wait_session_status+0x34>
 80118c8:	4631      	mov	r1, r6
 80118ca:	f104 0008 	add.w	r0, r4, #8
 80118ce:	f000 fba7 	bl	8012020 <uxr_get_input_best_effort_stream>
 80118d2:	2800      	cmp	r0, #0
 80118d4:	f43f af68 	beq.w	80117a8 <wait_session_status+0x34>
 80118d8:	9902      	ldr	r1, [sp, #8]
 80118da:	f008 f8e9 	bl	8019ab0 <uxr_receive_best_effort_message>
 80118de:	2800      	cmp	r0, #0
 80118e0:	f43f af62 	beq.w	80117a8 <wait_session_status+0x34>
 80118e4:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 80118e8:	a90c      	add	r1, sp, #48	; 0x30
 80118ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80118ec:	4620      	mov	r0, r4
 80118ee:	f7ff fbc9 	bl	8011084 <read_submessage_list>
 80118f2:	e759      	b.n	80117a8 <wait_session_status+0x34>
 80118f4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80118f6:	e9d3 0400 	ldrd	r0, r4, [r3]
 80118fa:	47a0      	blx	r4
 80118fc:	2001      	movs	r0, #1
 80118fe:	b01d      	add	sp, #116	; 0x74
 8011900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011904:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8011908:	a90c      	add	r1, sp, #48	; 0x30
 801190a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801190c:	4620      	mov	r0, r4
 801190e:	f7ff fbb9 	bl	8011084 <read_submessage_list>
 8011912:	e7bc      	b.n	801188e <wait_session_status+0x11a>

08011914 <uxr_delete_session_retries>:
 8011914:	b530      	push	{r4, r5, lr}
 8011916:	b08f      	sub	sp, #60	; 0x3c
 8011918:	4604      	mov	r4, r0
 801191a:	460d      	mov	r5, r1
 801191c:	f000 fa34 	bl	8011d88 <uxr_session_header_offset>
 8011920:	2300      	movs	r3, #0
 8011922:	2210      	movs	r2, #16
 8011924:	a902      	add	r1, sp, #8
 8011926:	9000      	str	r0, [sp, #0]
 8011928:	a806      	add	r0, sp, #24
 801192a:	f7fe fedd 	bl	80106e8 <ucdr_init_buffer_origin_offset>
 801192e:	a906      	add	r1, sp, #24
 8011930:	4620      	mov	r0, r4
 8011932:	f000 f979 	bl	8011c28 <uxr_buffer_delete_session>
 8011936:	2200      	movs	r2, #0
 8011938:	9b06      	ldr	r3, [sp, #24]
 801193a:	4620      	mov	r0, r4
 801193c:	4611      	mov	r1, r2
 801193e:	f000 f9cf 	bl	8011ce0 <uxr_stamp_session_header>
 8011942:	a806      	add	r0, sp, #24
 8011944:	f7fe ff10 	bl	8010768 <ucdr_buffer_length>
 8011948:	462b      	mov	r3, r5
 801194a:	4602      	mov	r2, r0
 801194c:	a902      	add	r1, sp, #8
 801194e:	4620      	mov	r0, r4
 8011950:	f7ff ff10 	bl	8011774 <wait_session_status>
 8011954:	b118      	cbz	r0, 801195e <uxr_delete_session_retries+0x4a>
 8011956:	7960      	ldrb	r0, [r4, #5]
 8011958:	fab0 f080 	clz	r0, r0
 801195c:	0940      	lsrs	r0, r0, #5
 801195e:	b00f      	add	sp, #60	; 0x3c
 8011960:	bd30      	pop	{r4, r5, pc}
 8011962:	bf00      	nop

08011964 <uxr_create_session>:
 8011964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011968:	f100 0b08 	add.w	fp, r0, #8
 801196c:	4604      	mov	r4, r0
 801196e:	b0ab      	sub	sp, #172	; 0xac
 8011970:	4658      	mov	r0, fp
 8011972:	465e      	mov	r6, fp
 8011974:	f000 faa6 	bl	8011ec4 <uxr_reset_stream_storage>
 8011978:	4620      	mov	r0, r4
 801197a:	f000 fa05 	bl	8011d88 <uxr_session_header_offset>
 801197e:	2300      	movs	r3, #0
 8011980:	221c      	movs	r2, #28
 8011982:	a90b      	add	r1, sp, #44	; 0x2c
 8011984:	9000      	str	r0, [sp, #0]
 8011986:	a812      	add	r0, sp, #72	; 0x48
 8011988:	f7fe feae 	bl	80106e8 <ucdr_init_buffer_origin_offset>
 801198c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801198e:	a912      	add	r1, sp, #72	; 0x48
 8011990:	4620      	mov	r0, r4
 8011992:	8a1a      	ldrh	r2, [r3, #16]
 8011994:	3a04      	subs	r2, #4
 8011996:	b292      	uxth	r2, r2
 8011998:	f000 f91c 	bl	8011bd4 <uxr_buffer_create_session>
 801199c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801199e:	4620      	mov	r0, r4
 80119a0:	f000 f98a 	bl	8011cb8 <uxr_stamp_create_session_header>
 80119a4:	a812      	add	r0, sp, #72	; 0x48
 80119a6:	f7fe fedf 	bl	8010768 <ucdr_buffer_length>
 80119aa:	23ff      	movs	r3, #255	; 0xff
 80119ac:	4681      	mov	r9, r0
 80119ae:	7163      	strb	r3, [r4, #5]
 80119b0:	230a      	movs	r3, #10
 80119b2:	9303      	str	r3, [sp, #12]
 80119b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80119b6:	464a      	mov	r2, r9
 80119b8:	a90b      	add	r1, sp, #44	; 0x2c
 80119ba:	e9d3 0500 	ldrd	r0, r5, [r3]
 80119be:	47a8      	blx	r5
 80119c0:	f000 fba0 	bl	8012104 <uxr_millis>
 80119c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80119c8:	4605      	mov	r5, r0
 80119ca:	e009      	b.n	80119e0 <uxr_create_session+0x7c>
 80119cc:	f000 fb9a 	bl	8012104 <uxr_millis>
 80119d0:	1b40      	subs	r0, r0, r5
 80119d2:	7962      	ldrb	r2, [r4, #5]
 80119d4:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 80119d8:	2b00      	cmp	r3, #0
 80119da:	dd38      	ble.n	8011a4e <uxr_create_session+0xea>
 80119dc:	2aff      	cmp	r2, #255	; 0xff
 80119de:	d13c      	bne.n	8011a5a <uxr_create_session+0xf6>
 80119e0:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80119e2:	a907      	add	r1, sp, #28
 80119e4:	6897      	ldr	r7, [r2, #8]
 80119e6:	6810      	ldr	r0, [r2, #0]
 80119e8:	aa08      	add	r2, sp, #32
 80119ea:	47b8      	blx	r7
 80119ec:	2800      	cmp	r0, #0
 80119ee:	d0ed      	beq.n	80119cc <uxr_create_session+0x68>
 80119f0:	a81a      	add	r0, sp, #104	; 0x68
 80119f2:	2700      	movs	r7, #0
 80119f4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80119f8:	f7fe fe88 	bl	801070c <ucdr_init_buffer>
 80119fc:	f10d 031a 	add.w	r3, sp, #26
 8011a00:	aa06      	add	r2, sp, #24
 8011a02:	a91a      	add	r1, sp, #104	; 0x68
 8011a04:	4620      	mov	r0, r4
 8011a06:	f88d 7018 	strb.w	r7, [sp, #24]
 8011a0a:	f000 f97d 	bl	8011d08 <uxr_read_session_header>
 8011a0e:	2800      	cmp	r0, #0
 8011a10:	d0dc      	beq.n	80119cc <uxr_create_session+0x68>
 8011a12:	4639      	mov	r1, r7
 8011a14:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011a18:	f000 fa1e 	bl	8011e58 <uxr_stream_id_from_raw>
 8011a1c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011a20:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8011a24:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8011a28:	2f01      	cmp	r7, #1
 8011a2a:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8011a2e:	d053      	beq.n	8011ad8 <uxr_create_session+0x174>
 8011a30:	2f02      	cmp	r7, #2
 8011a32:	d018      	beq.n	8011a66 <uxr_create_session+0x102>
 8011a34:	2f00      	cmp	r7, #0
 8011a36:	d1c9      	bne.n	80119cc <uxr_create_session+0x68>
 8011a38:	4639      	mov	r1, r7
 8011a3a:	4638      	mov	r0, r7
 8011a3c:	f000 fa0c 	bl	8011e58 <uxr_stream_id_from_raw>
 8011a40:	a91a      	add	r1, sp, #104	; 0x68
 8011a42:	4602      	mov	r2, r0
 8011a44:	900a      	str	r0, [sp, #40]	; 0x28
 8011a46:	4620      	mov	r0, r4
 8011a48:	f7ff fb1c 	bl	8011084 <read_submessage_list>
 8011a4c:	e7be      	b.n	80119cc <uxr_create_session+0x68>
 8011a4e:	9b03      	ldr	r3, [sp, #12]
 8011a50:	3b01      	subs	r3, #1
 8011a52:	9303      	str	r3, [sp, #12]
 8011a54:	d001      	beq.n	8011a5a <uxr_create_session+0xf6>
 8011a56:	2aff      	cmp	r2, #255	; 0xff
 8011a58:	d0ac      	beq.n	80119b4 <uxr_create_session+0x50>
 8011a5a:	2a00      	cmp	r2, #0
 8011a5c:	d051      	beq.n	8011b02 <uxr_create_session+0x19e>
 8011a5e:	2000      	movs	r0, #0
 8011a60:	b02b      	add	sp, #172	; 0xac
 8011a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a66:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8011a6a:	4641      	mov	r1, r8
 8011a6c:	4630      	mov	r0, r6
 8011a6e:	9304      	str	r3, [sp, #16]
 8011a70:	f000 fae0 	bl	8012034 <uxr_get_input_reliable_stream>
 8011a74:	4682      	mov	sl, r0
 8011a76:	b348      	cbz	r0, 8011acc <uxr_create_session+0x168>
 8011a78:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011a7a:	a81a      	add	r0, sp, #104	; 0x68
 8011a7c:	9205      	str	r2, [sp, #20]
 8011a7e:	f7fe fe77 	bl	8010770 <ucdr_buffer_remaining>
 8011a82:	4603      	mov	r3, r0
 8011a84:	f10d 0019 	add.w	r0, sp, #25
 8011a88:	9a05      	ldr	r2, [sp, #20]
 8011a8a:	4659      	mov	r1, fp
 8011a8c:	9000      	str	r0, [sp, #0]
 8011a8e:	4650      	mov	r0, sl
 8011a90:	f008 f898 	bl	8019bc4 <uxr_receive_reliable_message>
 8011a94:	b1d0      	cbz	r0, 8011acc <uxr_create_session+0x168>
 8011a96:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d038      	beq.n	8011b10 <uxr_create_session+0x1ac>
 8011a9e:	9f04      	ldr	r7, [sp, #16]
 8011aa0:	e00a      	b.n	8011ab8 <uxr_create_session+0x154>
 8011aa2:	f04f 0302 	mov.w	r3, #2
 8011aa6:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 8011aaa:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 8011aae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ab2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ab4:	f7ff fae6 	bl	8011084 <read_submessage_list>
 8011ab8:	a922      	add	r1, sp, #136	; 0x88
 8011aba:	2204      	movs	r2, #4
 8011abc:	4650      	mov	r0, sl
 8011abe:	f008 f903 	bl	8019cc8 <uxr_next_input_reliable_buffer_available>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	a922      	add	r1, sp, #136	; 0x88
 8011ac6:	4620      	mov	r0, r4
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d1ea      	bne.n	8011aa2 <uxr_create_session+0x13e>
 8011acc:	4642      	mov	r2, r8
 8011ace:	9904      	ldr	r1, [sp, #16]
 8011ad0:	4620      	mov	r0, r4
 8011ad2:	f7ff f953 	bl	8010d7c <write_submessage_acknack.isra.0>
 8011ad6:	e779      	b.n	80119cc <uxr_create_session+0x68>
 8011ad8:	4641      	mov	r1, r8
 8011ada:	4630      	mov	r0, r6
 8011adc:	f000 faa0 	bl	8012020 <uxr_get_input_best_effort_stream>
 8011ae0:	2800      	cmp	r0, #0
 8011ae2:	f43f af73 	beq.w	80119cc <uxr_create_session+0x68>
 8011ae6:	4659      	mov	r1, fp
 8011ae8:	f007 ffe2 	bl	8019ab0 <uxr_receive_best_effort_message>
 8011aec:	2800      	cmp	r0, #0
 8011aee:	f43f af6d 	beq.w	80119cc <uxr_create_session+0x68>
 8011af2:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8011af6:	a91a      	add	r1, sp, #104	; 0x68
 8011af8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011afa:	4620      	mov	r0, r4
 8011afc:	f7ff fac2 	bl	8011084 <read_submessage_list>
 8011b00:	e764      	b.n	80119cc <uxr_create_session+0x68>
 8011b02:	4630      	mov	r0, r6
 8011b04:	f000 f9de 	bl	8011ec4 <uxr_reset_stream_storage>
 8011b08:	2001      	movs	r0, #1
 8011b0a:	b02b      	add	sp, #172	; 0xac
 8011b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b10:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8011b14:	a91a      	add	r1, sp, #104	; 0x68
 8011b16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b18:	4620      	mov	r0, r4
 8011b1a:	f7ff fab3 	bl	8011084 <read_submessage_list>
 8011b1e:	e7be      	b.n	8011a9e <uxr_create_session+0x13a>

08011b20 <uxr_prepare_stream_to_write_submessage>:
 8011b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b24:	b082      	sub	sp, #8
 8011b26:	4604      	mov	r4, r0
 8011b28:	4610      	mov	r0, r2
 8011b2a:	4615      	mov	r5, r2
 8011b2c:	461e      	mov	r6, r3
 8011b2e:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8011b32:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8011b36:	f105 0904 	add.w	r9, r5, #4
 8011b3a:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8011b3e:	9101      	str	r1, [sp, #4]
 8011b40:	f000 fada 	bl	80120f8 <uxr_submessage_padding>
 8011b44:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011b48:	4481      	add	r9, r0
 8011b4a:	2b01      	cmp	r3, #1
 8011b4c:	d01d      	beq.n	8011b8a <uxr_prepare_stream_to_write_submessage+0x6a>
 8011b4e:	2b02      	cmp	r3, #2
 8011b50:	d116      	bne.n	8011b80 <uxr_prepare_stream_to_write_submessage+0x60>
 8011b52:	f104 0008 	add.w	r0, r4, #8
 8011b56:	4651      	mov	r1, sl
 8011b58:	f000 fa56 	bl	8012008 <uxr_get_output_reliable_stream>
 8011b5c:	4604      	mov	r4, r0
 8011b5e:	b158      	cbz	r0, 8011b78 <uxr_prepare_stream_to_write_submessage+0x58>
 8011b60:	4649      	mov	r1, r9
 8011b62:	4632      	mov	r2, r6
 8011b64:	f008 fa76 	bl	801a054 <uxr_prepare_reliable_buffer_to_write>
 8011b68:	4604      	mov	r4, r0
 8011b6a:	b12c      	cbz	r4, 8011b78 <uxr_prepare_stream_to_write_submessage+0x58>
 8011b6c:	4643      	mov	r3, r8
 8011b6e:	b2aa      	uxth	r2, r5
 8011b70:	4639      	mov	r1, r7
 8011b72:	4630      	mov	r0, r6
 8011b74:	f000 fa80 	bl	8012078 <uxr_buffer_submessage_header>
 8011b78:	4620      	mov	r0, r4
 8011b7a:	b002      	add	sp, #8
 8011b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b80:	2400      	movs	r4, #0
 8011b82:	4620      	mov	r0, r4
 8011b84:	b002      	add	sp, #8
 8011b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b8a:	f104 0008 	add.w	r0, r4, #8
 8011b8e:	4651      	mov	r1, sl
 8011b90:	f000 fa32 	bl	8011ff8 <uxr_get_output_best_effort_stream>
 8011b94:	4604      	mov	r4, r0
 8011b96:	2800      	cmp	r0, #0
 8011b98:	d0ee      	beq.n	8011b78 <uxr_prepare_stream_to_write_submessage+0x58>
 8011b9a:	4649      	mov	r1, r9
 8011b9c:	4632      	mov	r2, r6
 8011b9e:	f008 f983 	bl	8019ea8 <uxr_prepare_best_effort_buffer_to_write>
 8011ba2:	4604      	mov	r4, r0
 8011ba4:	e7e1      	b.n	8011b6a <uxr_prepare_stream_to_write_submessage+0x4a>
 8011ba6:	bf00      	nop

08011ba8 <uxr_init_session_info>:
 8011ba8:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8011bac:	23ff      	movs	r3, #255	; 0xff
 8011bae:	7102      	strb	r2, [r0, #4]
 8011bb0:	f880 c001 	strb.w	ip, [r0, #1]
 8011bb4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011bb8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8011bbc:	7001      	strb	r1, [r0, #0]
 8011bbe:	f880 c002 	strb.w	ip, [r0, #2]
 8011bc2:	7143      	strb	r3, [r0, #5]
 8011bc4:	70c2      	strb	r2, [r0, #3]
 8011bc6:	b500      	push	{lr}
 8011bc8:	f04f 0e09 	mov.w	lr, #9
 8011bcc:	f8a0 e006 	strh.w	lr, [r0, #6]
 8011bd0:	f85d fb04 	ldr.w	pc, [sp], #4

08011bd4 <uxr_buffer_create_session>:
 8011bd4:	b530      	push	{r4, r5, lr}
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	b089      	sub	sp, #36	; 0x24
 8011bda:	4d12      	ldr	r5, [pc, #72]	; (8011c24 <uxr_buffer_create_session+0x50>)
 8011bdc:	460c      	mov	r4, r1
 8011bde:	9307      	str	r3, [sp, #28]
 8011be0:	4619      	mov	r1, r3
 8011be2:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011be6:	2201      	movs	r2, #1
 8011be8:	9301      	str	r3, [sp, #4]
 8011bea:	80c2      	strh	r2, [r0, #6]
 8011bec:	f88d 2004 	strb.w	r2, [sp, #4]
 8011bf0:	682a      	ldr	r2, [r5, #0]
 8011bf2:	9303      	str	r3, [sp, #12]
 8011bf4:	9200      	str	r2, [sp, #0]
 8011bf6:	88aa      	ldrh	r2, [r5, #4]
 8011bf8:	9306      	str	r3, [sp, #24]
 8011bfa:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011bfe:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8011c02:	9202      	str	r2, [sp, #8]
 8011c04:	7802      	ldrb	r2, [r0, #0]
 8011c06:	4620      	mov	r0, r4
 8011c08:	f88d 200c 	strb.w	r2, [sp, #12]
 8011c0c:	2210      	movs	r2, #16
 8011c0e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8011c12:	f000 fa31 	bl	8012078 <uxr_buffer_submessage_header>
 8011c16:	4669      	mov	r1, sp
 8011c18:	4620      	mov	r0, r4
 8011c1a:	f001 faa3 	bl	8013164 <uxr_serialize_CREATE_CLIENT_Payload>
 8011c1e:	b009      	add	sp, #36	; 0x24
 8011c20:	bd30      	pop	{r4, r5, pc}
 8011c22:	bf00      	nop
 8011c24:	0801d750 	.word	0x0801d750

08011c28 <uxr_buffer_delete_session>:
 8011c28:	4a0c      	ldr	r2, [pc, #48]	; (8011c5c <uxr_buffer_delete_session+0x34>)
 8011c2a:	2302      	movs	r3, #2
 8011c2c:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8011c30:	b510      	push	{r4, lr}
 8011c32:	460c      	mov	r4, r1
 8011c34:	b082      	sub	sp, #8
 8011c36:	8911      	ldrh	r1, [r2, #8]
 8011c38:	2204      	movs	r2, #4
 8011c3a:	80c3      	strh	r3, [r0, #6]
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	f8ad 1006 	strh.w	r1, [sp, #6]
 8011c42:	4620      	mov	r0, r4
 8011c44:	2103      	movs	r1, #3
 8011c46:	f8ad c004 	strh.w	ip, [sp, #4]
 8011c4a:	f000 fa15 	bl	8012078 <uxr_buffer_submessage_header>
 8011c4e:	a901      	add	r1, sp, #4
 8011c50:	4620      	mov	r0, r4
 8011c52:	f001 fb2f 	bl	80132b4 <uxr_serialize_DELETE_Payload>
 8011c56:	b002      	add	sp, #8
 8011c58:	bd10      	pop	{r4, pc}
 8011c5a:	bf00      	nop
 8011c5c:	0801d750 	.word	0x0801d750

08011c60 <uxr_read_create_session_status>:
 8011c60:	b510      	push	{r4, lr}
 8011c62:	460b      	mov	r3, r1
 8011c64:	b088      	sub	sp, #32
 8011c66:	4604      	mov	r4, r0
 8011c68:	a901      	add	r1, sp, #4
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f001 fb32 	bl	80132d4 <uxr_deserialize_STATUS_AGENT_Payload>
 8011c70:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011c74:	7163      	strb	r3, [r4, #5]
 8011c76:	b008      	add	sp, #32
 8011c78:	bd10      	pop	{r4, pc}
 8011c7a:	bf00      	nop

08011c7c <uxr_read_delete_session_status>:
 8011c7c:	b510      	push	{r4, lr}
 8011c7e:	b084      	sub	sp, #16
 8011c80:	4604      	mov	r4, r0
 8011c82:	4608      	mov	r0, r1
 8011c84:	a902      	add	r1, sp, #8
 8011c86:	f001 fb55 	bl	8013334 <uxr_deserialize_STATUS_Payload>
 8011c8a:	88e3      	ldrh	r3, [r4, #6]
 8011c8c:	2b02      	cmp	r3, #2
 8011c8e:	d001      	beq.n	8011c94 <uxr_read_delete_session_status+0x18>
 8011c90:	b004      	add	sp, #16
 8011c92:	bd10      	pop	{r4, pc}
 8011c94:	f10d 000a 	add.w	r0, sp, #10
 8011c98:	f7fe fff6 	bl	8010c88 <uxr_object_id_from_raw>
 8011c9c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011ca0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011ca4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011ca8:	b29b      	uxth	r3, r3
 8011caa:	2b02      	cmp	r3, #2
 8011cac:	d1f0      	bne.n	8011c90 <uxr_read_delete_session_status+0x14>
 8011cae:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011cb2:	7163      	strb	r3, [r4, #5]
 8011cb4:	e7ec      	b.n	8011c90 <uxr_read_delete_session_status+0x14>
 8011cb6:	bf00      	nop

08011cb8 <uxr_stamp_create_session_header>:
 8011cb8:	b510      	push	{r4, lr}
 8011cba:	2208      	movs	r2, #8
 8011cbc:	b08a      	sub	sp, #40	; 0x28
 8011cbe:	4604      	mov	r4, r0
 8011cc0:	eb0d 0002 	add.w	r0, sp, r2
 8011cc4:	f7fe fd22 	bl	801070c <ucdr_init_buffer>
 8011cc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ccc:	2300      	movs	r3, #0
 8011cce:	a802      	add	r0, sp, #8
 8011cd0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8011cd4:	9400      	str	r4, [sp, #0]
 8011cd6:	461a      	mov	r2, r3
 8011cd8:	f000 fbca 	bl	8012470 <uxr_serialize_message_header>
 8011cdc:	b00a      	add	sp, #40	; 0x28
 8011cde:	bd10      	pop	{r4, pc}

08011ce0 <uxr_stamp_session_header>:
 8011ce0:	b530      	push	{r4, r5, lr}
 8011ce2:	b08d      	sub	sp, #52	; 0x34
 8011ce4:	4604      	mov	r4, r0
 8011ce6:	460d      	mov	r5, r1
 8011ce8:	4619      	mov	r1, r3
 8011cea:	a804      	add	r0, sp, #16
 8011cec:	9203      	str	r2, [sp, #12]
 8011cee:	2208      	movs	r2, #8
 8011cf0:	f7fe fd0c 	bl	801070c <ucdr_init_buffer>
 8011cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cf8:	9b03      	ldr	r3, [sp, #12]
 8011cfa:	462a      	mov	r2, r5
 8011cfc:	a804      	add	r0, sp, #16
 8011cfe:	9400      	str	r4, [sp, #0]
 8011d00:	f000 fbb6 	bl	8012470 <uxr_serialize_message_header>
 8011d04:	b00d      	add	sp, #52	; 0x34
 8011d06:	bd30      	pop	{r4, r5, pc}

08011d08 <uxr_read_session_header>:
 8011d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d0c:	4607      	mov	r7, r0
 8011d0e:	b084      	sub	sp, #16
 8011d10:	4608      	mov	r0, r1
 8011d12:	460c      	mov	r4, r1
 8011d14:	4615      	mov	r5, r2
 8011d16:	461e      	mov	r6, r3
 8011d18:	f7fe fd2a 	bl	8010770 <ucdr_buffer_remaining>
 8011d1c:	2808      	cmp	r0, #8
 8011d1e:	d803      	bhi.n	8011d28 <uxr_read_session_header+0x20>
 8011d20:	2000      	movs	r0, #0
 8011d22:	b004      	add	sp, #16
 8011d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d28:	f10d 080c 	add.w	r8, sp, #12
 8011d2c:	4633      	mov	r3, r6
 8011d2e:	462a      	mov	r2, r5
 8011d30:	4620      	mov	r0, r4
 8011d32:	f10d 010b 	add.w	r1, sp, #11
 8011d36:	f8cd 8000 	str.w	r8, [sp]
 8011d3a:	f000 fbb7 	bl	80124ac <uxr_deserialize_message_header>
 8011d3e:	783a      	ldrb	r2, [r7, #0]
 8011d40:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011d44:	4293      	cmp	r3, r2
 8011d46:	d1eb      	bne.n	8011d20 <uxr_read_session_header+0x18>
 8011d48:	061b      	lsls	r3, r3, #24
 8011d4a:	d41b      	bmi.n	8011d84 <uxr_read_session_header+0x7c>
 8011d4c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8011d50:	787b      	ldrb	r3, [r7, #1]
 8011d52:	429a      	cmp	r2, r3
 8011d54:	d003      	beq.n	8011d5e <uxr_read_session_header+0x56>
 8011d56:	2001      	movs	r0, #1
 8011d58:	f080 0001 	eor.w	r0, r0, #1
 8011d5c:	e7e1      	b.n	8011d22 <uxr_read_session_header+0x1a>
 8011d5e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011d62:	1cb8      	adds	r0, r7, #2
 8011d64:	78bb      	ldrb	r3, [r7, #2]
 8011d66:	429a      	cmp	r2, r3
 8011d68:	d1f5      	bne.n	8011d56 <uxr_read_session_header+0x4e>
 8011d6a:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011d6e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8011d72:	429a      	cmp	r2, r3
 8011d74:	d1ef      	bne.n	8011d56 <uxr_read_session_header+0x4e>
 8011d76:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011d7a:	7843      	ldrb	r3, [r0, #1]
 8011d7c:	429a      	cmp	r2, r3
 8011d7e:	d1ea      	bne.n	8011d56 <uxr_read_session_header+0x4e>
 8011d80:	2000      	movs	r0, #0
 8011d82:	e7e9      	b.n	8011d58 <uxr_read_session_header+0x50>
 8011d84:	2001      	movs	r0, #1
 8011d86:	e7cc      	b.n	8011d22 <uxr_read_session_header+0x1a>

08011d88 <uxr_session_header_offset>:
 8011d88:	f990 3000 	ldrsb.w	r3, [r0]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	bfac      	ite	ge
 8011d90:	2008      	movge	r0, #8
 8011d92:	2004      	movlt	r0, #4
 8011d94:	4770      	bx	lr
 8011d96:	bf00      	nop

08011d98 <uxr_init_base_object_request>:
 8011d98:	b510      	push	{r4, lr}
 8011d9a:	b082      	sub	sp, #8
 8011d9c:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8011da0:	9101      	str	r1, [sp, #4]
 8011da2:	88c3      	ldrh	r3, [r0, #6]
 8011da4:	f1a3 010a 	sub.w	r1, r3, #10
 8011da8:	b289      	uxth	r1, r1
 8011daa:	42a1      	cmp	r1, r4
 8011dac:	d80f      	bhi.n	8011dce <uxr_init_base_object_request+0x36>
 8011dae:	3301      	adds	r3, #1
 8011db0:	b29c      	uxth	r4, r3
 8011db2:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8011db6:	b2db      	uxtb	r3, r3
 8011db8:	80c4      	strh	r4, [r0, #6]
 8011dba:	1c91      	adds	r1, r2, #2
 8011dbc:	9801      	ldr	r0, [sp, #4]
 8011dbe:	f882 c000 	strb.w	ip, [r2]
 8011dc2:	7053      	strb	r3, [r2, #1]
 8011dc4:	f7fe ff74 	bl	8010cb0 <uxr_object_id_to_raw>
 8011dc8:	4620      	mov	r0, r4
 8011dca:	b002      	add	sp, #8
 8011dcc:	bd10      	pop	{r4, pc}
 8011dce:	230a      	movs	r3, #10
 8011dd0:	f04f 0c00 	mov.w	ip, #0
 8011dd4:	461c      	mov	r4, r3
 8011dd6:	e7ef      	b.n	8011db8 <uxr_init_base_object_request+0x20>

08011dd8 <uxr_parse_base_object_request>:
 8011dd8:	b570      	push	{r4, r5, r6, lr}
 8011dda:	4604      	mov	r4, r0
 8011ddc:	3002      	adds	r0, #2
 8011dde:	460d      	mov	r5, r1
 8011de0:	4616      	mov	r6, r2
 8011de2:	f7fe ff51 	bl	8010c88 <uxr_object_id_from_raw>
 8011de6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8011dea:	8028      	strh	r0, [r5, #0]
 8011dec:	806b      	strh	r3, [r5, #2]
 8011dee:	7822      	ldrb	r2, [r4, #0]
 8011df0:	7863      	ldrb	r3, [r4, #1]
 8011df2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011df6:	8033      	strh	r3, [r6, #0]
 8011df8:	bd70      	pop	{r4, r5, r6, pc}
 8011dfa:	bf00      	nop

08011dfc <uxr_stream_id>:
 8011dfc:	2901      	cmp	r1, #1
 8011dfe:	4684      	mov	ip, r0
 8011e00:	b500      	push	{lr}
 8011e02:	b083      	sub	sp, #12
 8011e04:	d01f      	beq.n	8011e46 <uxr_stream_id+0x4a>
 8011e06:	2902      	cmp	r1, #2
 8011e08:	f04f 0e00 	mov.w	lr, #0
 8011e0c:	d020      	beq.n	8011e50 <uxr_stream_id+0x54>
 8011e0e:	2300      	movs	r3, #0
 8011e10:	2000      	movs	r0, #0
 8011e12:	f36e 0307 	bfi	r3, lr, #0, #8
 8011e16:	f36c 230f 	bfi	r3, ip, #8, #8
 8011e1a:	f361 4317 	bfi	r3, r1, #16, #8
 8011e1e:	f362 631f 	bfi	r3, r2, #24, #8
 8011e22:	fa5f fc83 	uxtb.w	ip, r3
 8011e26:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011e2a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011e2e:	0e1b      	lsrs	r3, r3, #24
 8011e30:	f36c 0007 	bfi	r0, ip, #0, #8
 8011e34:	f361 200f 	bfi	r0, r1, #8, #8
 8011e38:	f362 4017 	bfi	r0, r2, #16, #8
 8011e3c:	f363 601f 	bfi	r0, r3, #24, #8
 8011e40:	b003      	add	sp, #12
 8011e42:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e46:	f100 0e01 	add.w	lr, r0, #1
 8011e4a:	fa5f fe8e 	uxtb.w	lr, lr
 8011e4e:	e7de      	b.n	8011e0e <uxr_stream_id+0x12>
 8011e50:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 8011e54:	e7db      	b.n	8011e0e <uxr_stream_id+0x12>
 8011e56:	bf00      	nop

08011e58 <uxr_stream_id_from_raw>:
 8011e58:	b082      	sub	sp, #8
 8011e5a:	b130      	cbz	r0, 8011e6a <uxr_stream_id_from_raw+0x12>
 8011e5c:	0603      	lsls	r3, r0, #24
 8011e5e:	d421      	bmi.n	8011ea4 <uxr_stream_id_from_raw+0x4c>
 8011e60:	1e42      	subs	r2, r0, #1
 8011e62:	f04f 0c01 	mov.w	ip, #1
 8011e66:	b2d2      	uxtb	r2, r2
 8011e68:	e001      	b.n	8011e6e <uxr_stream_id_from_raw+0x16>
 8011e6a:	4684      	mov	ip, r0
 8011e6c:	4602      	mov	r2, r0
 8011e6e:	2300      	movs	r3, #0
 8011e70:	f360 0307 	bfi	r3, r0, #0, #8
 8011e74:	2000      	movs	r0, #0
 8011e76:	f362 230f 	bfi	r3, r2, #8, #8
 8011e7a:	f36c 4317 	bfi	r3, ip, #16, #8
 8011e7e:	f361 631f 	bfi	r3, r1, #24, #8
 8011e82:	fa5f fc83 	uxtb.w	ip, r3
 8011e86:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011e8a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011e8e:	0e1b      	lsrs	r3, r3, #24
 8011e90:	f36c 0007 	bfi	r0, ip, #0, #8
 8011e94:	f361 200f 	bfi	r0, r1, #8, #8
 8011e98:	f362 4017 	bfi	r0, r2, #16, #8
 8011e9c:	f363 601f 	bfi	r0, r3, #24, #8
 8011ea0:	b002      	add	sp, #8
 8011ea2:	4770      	bx	lr
 8011ea4:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 8011ea8:	f04f 0c02 	mov.w	ip, #2
 8011eac:	e7df      	b.n	8011e6e <uxr_stream_id_from_raw+0x16>
 8011eae:	bf00      	nop

08011eb0 <uxr_init_stream_storage>:
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	7403      	strb	r3, [r0, #16]
 8011eb4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8011eb8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8011ebc:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8011ec0:	4770      	bx	lr
 8011ec2:	bf00      	nop

08011ec4 <uxr_reset_stream_storage>:
 8011ec4:	b570      	push	{r4, r5, r6, lr}
 8011ec6:	7c03      	ldrb	r3, [r0, #16]
 8011ec8:	4604      	mov	r4, r0
 8011eca:	b14b      	cbz	r3, 8011ee0 <uxr_reset_stream_storage+0x1c>
 8011ecc:	4606      	mov	r6, r0
 8011ece:	2500      	movs	r5, #0
 8011ed0:	4630      	mov	r0, r6
 8011ed2:	3501      	adds	r5, #1
 8011ed4:	f007 ffe2 	bl	8019e9c <uxr_reset_output_best_effort_stream>
 8011ed8:	7c23      	ldrb	r3, [r4, #16]
 8011eda:	3610      	adds	r6, #16
 8011edc:	42ab      	cmp	r3, r5
 8011ede:	d8f7      	bhi.n	8011ed0 <uxr_reset_stream_storage+0xc>
 8011ee0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011ee4:	b15b      	cbz	r3, 8011efe <uxr_reset_stream_storage+0x3a>
 8011ee6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011eea:	2500      	movs	r5, #0
 8011eec:	4630      	mov	r0, r6
 8011eee:	3501      	adds	r5, #1
 8011ef0:	f007 fdda 	bl	8019aa8 <uxr_reset_input_best_effort_stream>
 8011ef4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011ef8:	3602      	adds	r6, #2
 8011efa:	42ab      	cmp	r3, r5
 8011efc:	d8f6      	bhi.n	8011eec <uxr_reset_stream_storage+0x28>
 8011efe:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011f02:	b15b      	cbz	r3, 8011f1c <uxr_reset_stream_storage+0x58>
 8011f04:	f104 0618 	add.w	r6, r4, #24
 8011f08:	2500      	movs	r5, #0
 8011f0a:	4630      	mov	r0, r6
 8011f0c:	3501      	adds	r5, #1
 8011f0e:	f008 f873 	bl	8019ff8 <uxr_reset_output_reliable_stream>
 8011f12:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011f16:	3628      	adds	r6, #40	; 0x28
 8011f18:	42ab      	cmp	r3, r5
 8011f1a:	d8f6      	bhi.n	8011f0a <uxr_reset_stream_storage+0x46>
 8011f1c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8011f20:	b15b      	cbz	r3, 8011f3a <uxr_reset_stream_storage+0x76>
 8011f22:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8011f26:	2500      	movs	r5, #0
 8011f28:	4630      	mov	r0, r6
 8011f2a:	3501      	adds	r5, #1
 8011f2c:	f007 fe28 	bl	8019b80 <uxr_reset_input_reliable_stream>
 8011f30:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8011f34:	3618      	adds	r6, #24
 8011f36:	42ab      	cmp	r3, r5
 8011f38:	d8f6      	bhi.n	8011f28 <uxr_reset_stream_storage+0x64>
 8011f3a:	bd70      	pop	{r4, r5, r6, pc}

08011f3c <uxr_add_output_best_effort_buffer>:
 8011f3c:	b510      	push	{r4, lr}
 8011f3e:	7c04      	ldrb	r4, [r0, #16]
 8011f40:	b082      	sub	sp, #8
 8011f42:	f104 0c01 	add.w	ip, r4, #1
 8011f46:	f880 c010 	strb.w	ip, [r0, #16]
 8011f4a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011f4e:	f007 ff9b 	bl	8019e88 <uxr_init_output_best_effort_stream>
 8011f52:	2201      	movs	r2, #1
 8011f54:	4620      	mov	r0, r4
 8011f56:	4611      	mov	r1, r2
 8011f58:	b002      	add	sp, #8
 8011f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f5e:	f7ff bf4d 	b.w	8011dfc <uxr_stream_id>
 8011f62:	bf00      	nop

08011f64 <uxr_add_output_reliable_buffer>:
 8011f64:	b510      	push	{r4, lr}
 8011f66:	b084      	sub	sp, #16
 8011f68:	4684      	mov	ip, r0
 8011f6a:	2028      	movs	r0, #40	; 0x28
 8011f6c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8011f70:	9400      	str	r4, [sp, #0]
 8011f72:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 8011f76:	fb00 c004 	mla	r0, r0, r4, ip
 8011f7a:	f104 0e01 	add.w	lr, r4, #1
 8011f7e:	3018      	adds	r0, #24
 8011f80:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 8011f84:	f008 f800 	bl	8019f88 <uxr_init_output_reliable_stream>
 8011f88:	2201      	movs	r2, #1
 8011f8a:	2102      	movs	r1, #2
 8011f8c:	4620      	mov	r0, r4
 8011f8e:	b004      	add	sp, #16
 8011f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f94:	f7ff bf32 	b.w	8011dfc <uxr_stream_id>

08011f98 <uxr_add_input_best_effort_buffer>:
 8011f98:	b510      	push	{r4, lr}
 8011f9a:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8011f9e:	b082      	sub	sp, #8
 8011fa0:	1c62      	adds	r2, r4, #1
 8011fa2:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8011fa6:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8011faa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8011fae:	f007 fd77 	bl	8019aa0 <uxr_init_input_best_effort_stream>
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	2101      	movs	r1, #1
 8011fb6:	4620      	mov	r0, r4
 8011fb8:	b002      	add	sp, #8
 8011fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fbe:	f7ff bf1d 	b.w	8011dfc <uxr_stream_id>
 8011fc2:	bf00      	nop

08011fc4 <uxr_add_input_reliable_buffer>:
 8011fc4:	b510      	push	{r4, lr}
 8011fc6:	b084      	sub	sp, #16
 8011fc8:	4684      	mov	ip, r0
 8011fca:	2018      	movs	r0, #24
 8011fcc:	9c06      	ldr	r4, [sp, #24]
 8011fce:	9400      	str	r4, [sp, #0]
 8011fd0:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 8011fd4:	fb00 c004 	mla	r0, r0, r4, ip
 8011fd8:	f104 0e01 	add.w	lr, r4, #1
 8011fdc:	3048      	adds	r0, #72	; 0x48
 8011fde:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 8011fe2:	f007 fda7 	bl	8019b34 <uxr_init_input_reliable_stream>
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	2102      	movs	r1, #2
 8011fea:	4620      	mov	r0, r4
 8011fec:	b004      	add	sp, #16
 8011fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ff2:	f7ff bf03 	b.w	8011dfc <uxr_stream_id>
 8011ff6:	bf00      	nop

08011ff8 <uxr_get_output_best_effort_stream>:
 8011ff8:	7c03      	ldrb	r3, [r0, #16]
 8011ffa:	428b      	cmp	r3, r1
 8011ffc:	bf8c      	ite	hi
 8011ffe:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8012002:	2000      	movls	r0, #0
 8012004:	4770      	bx	lr
 8012006:	bf00      	nop

08012008 <uxr_get_output_reliable_stream>:
 8012008:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801200c:	428b      	cmp	r3, r1
 801200e:	d904      	bls.n	801201a <uxr_get_output_reliable_stream+0x12>
 8012010:	2328      	movs	r3, #40	; 0x28
 8012012:	fb03 0001 	mla	r0, r3, r1, r0
 8012016:	3018      	adds	r0, #24
 8012018:	4770      	bx	lr
 801201a:	2000      	movs	r0, #0
 801201c:	4770      	bx	lr
 801201e:	bf00      	nop

08012020 <uxr_get_input_best_effort_stream>:
 8012020:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8012024:	428b      	cmp	r3, r1
 8012026:	d903      	bls.n	8012030 <uxr_get_input_best_effort_stream+0x10>
 8012028:	3121      	adds	r1, #33	; 0x21
 801202a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801202e:	4770      	bx	lr
 8012030:	2000      	movs	r0, #0
 8012032:	4770      	bx	lr

08012034 <uxr_get_input_reliable_stream>:
 8012034:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8012038:	428b      	cmp	r3, r1
 801203a:	d904      	bls.n	8012046 <uxr_get_input_reliable_stream+0x12>
 801203c:	2318      	movs	r3, #24
 801203e:	fb03 0001 	mla	r0, r3, r1, r0
 8012042:	3048      	adds	r0, #72	; 0x48
 8012044:	4770      	bx	lr
 8012046:	2000      	movs	r0, #0
 8012048:	4770      	bx	lr
 801204a:	bf00      	nop

0801204c <uxr_output_streams_confirmed>:
 801204c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8012050:	b183      	cbz	r3, 8012074 <uxr_output_streams_confirmed+0x28>
 8012052:	b570      	push	{r4, r5, r6, lr}
 8012054:	4606      	mov	r6, r0
 8012056:	f100 0518 	add.w	r5, r0, #24
 801205a:	2400      	movs	r4, #0
 801205c:	e000      	b.n	8012060 <uxr_output_streams_confirmed+0x14>
 801205e:	b140      	cbz	r0, 8012072 <uxr_output_streams_confirmed+0x26>
 8012060:	4628      	mov	r0, r5
 8012062:	3401      	adds	r4, #1
 8012064:	f008 fa3c 	bl	801a4e0 <uxr_is_output_up_to_date>
 8012068:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 801206c:	3528      	adds	r5, #40	; 0x28
 801206e:	42a3      	cmp	r3, r4
 8012070:	d8f5      	bhi.n	801205e <uxr_output_streams_confirmed+0x12>
 8012072:	bd70      	pop	{r4, r5, r6, pc}
 8012074:	2001      	movs	r0, #1
 8012076:	4770      	bx	lr

08012078 <uxr_buffer_submessage_header>:
 8012078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801207a:	460e      	mov	r6, r1
 801207c:	2104      	movs	r1, #4
 801207e:	4604      	mov	r4, r0
 8012080:	4615      	mov	r5, r2
 8012082:	461f      	mov	r7, r3
 8012084:	f7fe fb5e 	bl	8010744 <ucdr_align_to>
 8012088:	2301      	movs	r3, #1
 801208a:	4631      	mov	r1, r6
 801208c:	4620      	mov	r0, r4
 801208e:	ea47 0203 	orr.w	r2, r7, r3
 8012092:	7523      	strb	r3, [r4, #20]
 8012094:	462b      	mov	r3, r5
 8012096:	f000 fa29 	bl	80124ec <uxr_serialize_submessage_header>
 801209a:	4620      	mov	r0, r4
 801209c:	f7fe fb68 	bl	8010770 <ucdr_buffer_remaining>
 80120a0:	42a8      	cmp	r0, r5
 80120a2:	bf34      	ite	cc
 80120a4:	2000      	movcc	r0, #0
 80120a6:	2001      	movcs	r0, #1
 80120a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120aa:	bf00      	nop

080120ac <uxr_read_submessage_header>:
 80120ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120b0:	4604      	mov	r4, r0
 80120b2:	460d      	mov	r5, r1
 80120b4:	2104      	movs	r1, #4
 80120b6:	4616      	mov	r6, r2
 80120b8:	4698      	mov	r8, r3
 80120ba:	f7fe fb43 	bl	8010744 <ucdr_align_to>
 80120be:	4620      	mov	r0, r4
 80120c0:	f7fe fb56 	bl	8010770 <ucdr_buffer_remaining>
 80120c4:	2803      	cmp	r0, #3
 80120c6:	bf8c      	ite	hi
 80120c8:	2701      	movhi	r7, #1
 80120ca:	2700      	movls	r7, #0
 80120cc:	d802      	bhi.n	80120d4 <uxr_read_submessage_header+0x28>
 80120ce:	4638      	mov	r0, r7
 80120d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120d4:	4633      	mov	r3, r6
 80120d6:	4642      	mov	r2, r8
 80120d8:	4620      	mov	r0, r4
 80120da:	4629      	mov	r1, r5
 80120dc:	f000 fa1a 	bl	8012514 <uxr_deserialize_submessage_header>
 80120e0:	f898 3000 	ldrb.w	r3, [r8]
 80120e4:	4638      	mov	r0, r7
 80120e6:	f003 0201 	and.w	r2, r3, #1
 80120ea:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80120ee:	f888 3000 	strb.w	r3, [r8]
 80120f2:	7522      	strb	r2, [r4, #20]
 80120f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080120f8 <uxr_submessage_padding>:
 80120f8:	f010 0003 	ands.w	r0, r0, #3
 80120fc:	bf18      	it	ne
 80120fe:	f1c0 0004 	rsbne	r0, r0, #4
 8012102:	4770      	bx	lr

08012104 <uxr_millis>:
 8012104:	b510      	push	{r4, lr}
 8012106:	b084      	sub	sp, #16
 8012108:	2001      	movs	r0, #1
 801210a:	4669      	mov	r1, sp
 801210c:	f7f0 fcc4 	bl	8002a98 <clock_gettime>
 8012110:	4908      	ldr	r1, [pc, #32]	; (8012134 <uxr_millis+0x30>)
 8012112:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8012116:	fba0 0301 	umull	r0, r3, r0, r1
 801211a:	1900      	adds	r0, r0, r4
 801211c:	fb01 3102 	mla	r1, r1, r2, r3
 8012120:	4a05      	ldr	r2, [pc, #20]	; (8012138 <uxr_millis+0x34>)
 8012122:	f04f 0300 	mov.w	r3, #0
 8012126:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801212a:	f7ee f8f1 	bl	8000310 <__aeabi_ldivmod>
 801212e:	b004      	add	sp, #16
 8012130:	bd10      	pop	{r4, pc}
 8012132:	bf00      	nop
 8012134:	3b9aca00 	.word	0x3b9aca00
 8012138:	000f4240 	.word	0x000f4240

0801213c <uxr_nanos>:
 801213c:	b510      	push	{r4, lr}
 801213e:	b084      	sub	sp, #16
 8012140:	2001      	movs	r0, #1
 8012142:	4669      	mov	r1, sp
 8012144:	f7f0 fca8 	bl	8002a98 <clock_gettime>
 8012148:	4a06      	ldr	r2, [pc, #24]	; (8012164 <uxr_nanos+0x28>)
 801214a:	9800      	ldr	r0, [sp, #0]
 801214c:	9902      	ldr	r1, [sp, #8]
 801214e:	fba0 0302 	umull	r0, r3, r0, r2
 8012152:	9c01      	ldr	r4, [sp, #4]
 8012154:	1840      	adds	r0, r0, r1
 8012156:	fb02 3304 	mla	r3, r2, r4, r3
 801215a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801215e:	b004      	add	sp, #16
 8012160:	bd10      	pop	{r4, pc}
 8012162:	bf00      	nop
 8012164:	3b9aca00 	.word	0x3b9aca00

08012168 <on_full_output_buffer_fragmented>:
 8012168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801216c:	460c      	mov	r4, r1
 801216e:	b08a      	sub	sp, #40	; 0x28
 8012170:	4606      	mov	r6, r0
 8012172:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8012176:	f104 0008 	add.w	r0, r4, #8
 801217a:	f7ff ff45 	bl	8012008 <uxr_get_output_reliable_stream>
 801217e:	4605      	mov	r5, r0
 8012180:	f008 f9b8 	bl	801a4f4 <get_available_free_slots>
 8012184:	b968      	cbnz	r0, 80121a2 <on_full_output_buffer_fragmented+0x3a>
 8012186:	4620      	mov	r0, r4
 8012188:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 801218c:	4798      	blx	r3
 801218e:	b918      	cbnz	r0, 8012198 <on_full_output_buffer_fragmented+0x30>
 8012190:	2001      	movs	r0, #1
 8012192:	b00a      	add	sp, #40	; 0x28
 8012194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012198:	4628      	mov	r0, r5
 801219a:	f008 f9ab 	bl	801a4f4 <get_available_free_slots>
 801219e:	2800      	cmp	r0, #0
 80121a0:	d0f6      	beq.n	8012190 <on_full_output_buffer_fragmented+0x28>
 80121a2:	8929      	ldrh	r1, [r5, #8]
 80121a4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80121a8:	89eb      	ldrh	r3, [r5, #14]
 80121aa:	7b28      	ldrb	r0, [r5, #12]
 80121ac:	686f      	ldr	r7, [r5, #4]
 80121ae:	1a12      	subs	r2, r2, r0
 80121b0:	fbb3 f0f1 	udiv	r0, r3, r1
 80121b4:	fbb7 f7f1 	udiv	r7, r7, r1
 80121b8:	fb01 3110 	mls	r1, r1, r0, r3
 80121bc:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 80121c0:	b289      	uxth	r1, r1
 80121c2:	fb07 f101 	mul.w	r1, r7, r1
 80121c6:	3f04      	subs	r7, #4
 80121c8:	443a      	add	r2, r7
 80121ca:	3104      	adds	r1, #4
 80121cc:	fa1f f882 	uxth.w	r8, r2
 80121d0:	463a      	mov	r2, r7
 80121d2:	eba3 0308 	sub.w	r3, r3, r8
 80121d6:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 80121da:	682b      	ldr	r3, [r5, #0]
 80121dc:	4419      	add	r1, r3
 80121de:	2300      	movs	r3, #0
 80121e0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80121e4:	9000      	str	r0, [sp, #0]
 80121e6:	a802      	add	r0, sp, #8
 80121e8:	f7fe fa7e 	bl	80106e8 <ucdr_init_buffer_origin_offset>
 80121ec:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80121f0:	f102 0308 	add.w	r3, r2, #8
 80121f4:	42bb      	cmp	r3, r7
 80121f6:	d927      	bls.n	8012248 <on_full_output_buffer_fragmented+0xe0>
 80121f8:	4642      	mov	r2, r8
 80121fa:	2300      	movs	r3, #0
 80121fc:	210d      	movs	r1, #13
 80121fe:	a802      	add	r0, sp, #8
 8012200:	f7ff ff3a 	bl	8012078 <uxr_buffer_submessage_header>
 8012204:	8929      	ldrh	r1, [r5, #8]
 8012206:	89eb      	ldrh	r3, [r5, #14]
 8012208:	686a      	ldr	r2, [r5, #4]
 801220a:	fbb3 f0f1 	udiv	r0, r3, r1
 801220e:	fbb2 f2f1 	udiv	r2, r2, r1
 8012212:	fb01 3310 	mls	r3, r1, r0, r3
 8012216:	b29b      	uxth	r3, r3
 8012218:	fb02 f303 	mul.w	r3, r2, r3
 801221c:	682a      	ldr	r2, [r5, #0]
 801221e:	50d7      	str	r7, [r2, r3]
 8012220:	2101      	movs	r1, #1
 8012222:	89e8      	ldrh	r0, [r5, #14]
 8012224:	f008 fab8 	bl	801a798 <uxr_seq_num_add>
 8012228:	9904      	ldr	r1, [sp, #16]
 801222a:	9a03      	ldr	r2, [sp, #12]
 801222c:	81e8      	strh	r0, [r5, #14]
 801222e:	4630      	mov	r0, r6
 8012230:	1a52      	subs	r2, r2, r1
 8012232:	f7fe fa6b 	bl	801070c <ucdr_init_buffer>
 8012236:	4630      	mov	r0, r6
 8012238:	4622      	mov	r2, r4
 801223a:	490f      	ldr	r1, [pc, #60]	; (8012278 <on_full_output_buffer_fragmented+0x110>)
 801223c:	f7fe fa3a 	bl	80106b4 <ucdr_set_on_full_buffer_callback>
 8012240:	2000      	movs	r0, #0
 8012242:	b00a      	add	sp, #40	; 0x28
 8012244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012248:	b292      	uxth	r2, r2
 801224a:	2302      	movs	r3, #2
 801224c:	210d      	movs	r1, #13
 801224e:	a802      	add	r0, sp, #8
 8012250:	f7ff ff12 	bl	8012078 <uxr_buffer_submessage_header>
 8012254:	8928      	ldrh	r0, [r5, #8]
 8012256:	89eb      	ldrh	r3, [r5, #14]
 8012258:	6869      	ldr	r1, [r5, #4]
 801225a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 801225e:	fbb3 f7f0 	udiv	r7, r3, r0
 8012262:	fbb1 f1f0 	udiv	r1, r1, r0
 8012266:	fb00 3317 	mls	r3, r0, r7, r3
 801226a:	3208      	adds	r2, #8
 801226c:	b29b      	uxth	r3, r3
 801226e:	fb01 f303 	mul.w	r3, r1, r3
 8012272:	6829      	ldr	r1, [r5, #0]
 8012274:	50ca      	str	r2, [r1, r3]
 8012276:	e7d3      	b.n	8012220 <on_full_output_buffer_fragmented+0xb8>
 8012278:	08012169 	.word	0x08012169

0801227c <uxr_prepare_output_stream>:
 801227c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801227e:	b087      	sub	sp, #28
 8012280:	2707      	movs	r7, #7
 8012282:	2500      	movs	r5, #0
 8012284:	461c      	mov	r4, r3
 8012286:	4606      	mov	r6, r0
 8012288:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801228c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801228e:	e9cd 7500 	strd	r7, r5, [sp]
 8012292:	3204      	adds	r2, #4
 8012294:	f7ff fc44 	bl	8011b20 <uxr_prepare_stream_to_write_submessage>
 8012298:	f080 0201 	eor.w	r2, r0, #1
 801229c:	b2d2      	uxtb	r2, r2
 801229e:	75a2      	strb	r2, [r4, #22]
 80122a0:	b112      	cbz	r2, 80122a8 <uxr_prepare_output_stream+0x2c>
 80122a2:	4628      	mov	r0, r5
 80122a4:	b007      	add	sp, #28
 80122a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122a8:	aa05      	add	r2, sp, #20
 80122aa:	9902      	ldr	r1, [sp, #8]
 80122ac:	4630      	mov	r0, r6
 80122ae:	f7ff fd73 	bl	8011d98 <uxr_init_base_object_request>
 80122b2:	a905      	add	r1, sp, #20
 80122b4:	4605      	mov	r5, r0
 80122b6:	4620      	mov	r0, r4
 80122b8:	f001 f8bc 	bl	8013434 <uxr_serialize_WRITE_DATA_Payload_Data>
 80122bc:	69a6      	ldr	r6, [r4, #24]
 80122be:	69e7      	ldr	r7, [r4, #28]
 80122c0:	4620      	mov	r0, r4
 80122c2:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80122c6:	1a52      	subs	r2, r2, r1
 80122c8:	f7fe fa20 	bl	801070c <ucdr_init_buffer>
 80122cc:	4620      	mov	r0, r4
 80122ce:	463a      	mov	r2, r7
 80122d0:	4631      	mov	r1, r6
 80122d2:	f7fe f9ef 	bl	80106b4 <ucdr_set_on_full_buffer_callback>
 80122d6:	4628      	mov	r0, r5
 80122d8:	b007      	add	sp, #28
 80122da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080122dc <uxr_prepare_output_stream_fragmented>:
 80122dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122e0:	b091      	sub	sp, #68	; 0x44
 80122e2:	4605      	mov	r5, r0
 80122e4:	3008      	adds	r0, #8
 80122e6:	461e      	mov	r6, r3
 80122e8:	9105      	str	r1, [sp, #20]
 80122ea:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80122ee:	9204      	str	r2, [sp, #16]
 80122f0:	f7ff fe8a 	bl	8012008 <uxr_get_output_reliable_stream>
 80122f4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80122f8:	2b01      	cmp	r3, #1
 80122fa:	f000 8093 	beq.w	8012424 <uxr_prepare_output_stream_fragmented+0x148>
 80122fe:	4604      	mov	r4, r0
 8012300:	2800      	cmp	r0, #0
 8012302:	f000 808f 	beq.w	8012424 <uxr_prepare_output_stream_fragmented+0x148>
 8012306:	f008 f8f5 	bl	801a4f4 <get_available_free_slots>
 801230a:	2800      	cmp	r0, #0
 801230c:	f000 8085 	beq.w	801241a <uxr_prepare_output_stream_fragmented+0x13e>
 8012310:	8923      	ldrh	r3, [r4, #8]
 8012312:	89e7      	ldrh	r7, [r4, #14]
 8012314:	6862      	ldr	r2, [r4, #4]
 8012316:	fbb7 f9f3 	udiv	r9, r7, r3
 801231a:	fbb2 f2f3 	udiv	r2, r2, r3
 801231e:	fb03 7919 	mls	r9, r3, r9, r7
 8012322:	6823      	ldr	r3, [r4, #0]
 8012324:	f1a2 0b04 	sub.w	fp, r2, #4
 8012328:	9203      	str	r2, [sp, #12]
 801232a:	fa1f f989 	uxth.w	r9, r9
 801232e:	fb02 f909 	mul.w	r9, r2, r9
 8012332:	f109 0904 	add.w	r9, r9, #4
 8012336:	4499      	add	r9, r3
 8012338:	7b23      	ldrb	r3, [r4, #12]
 801233a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801233e:	4543      	cmp	r3, r8
 8012340:	d37c      	bcc.n	801243c <uxr_prepare_output_stream_fragmented+0x160>
 8012342:	f1ab 0a04 	sub.w	sl, fp, #4
 8012346:	465a      	mov	r2, fp
 8012348:	4649      	mov	r1, r9
 801234a:	a808      	add	r0, sp, #32
 801234c:	ebaa 0a03 	sub.w	sl, sl, r3
 8012350:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012352:	f8cd 8000 	str.w	r8, [sp]
 8012356:	3308      	adds	r3, #8
 8012358:	fa1f fa8a 	uxth.w	sl, sl
 801235c:	9302      	str	r3, [sp, #8]
 801235e:	2300      	movs	r3, #0
 8012360:	f7fe f9c2 	bl	80106e8 <ucdr_init_buffer_origin_offset>
 8012364:	9b02      	ldr	r3, [sp, #8]
 8012366:	4652      	mov	r2, sl
 8012368:	210d      	movs	r1, #13
 801236a:	455b      	cmp	r3, fp
 801236c:	bf34      	ite	cc
 801236e:	2302      	movcc	r3, #2
 8012370:	2300      	movcs	r3, #0
 8012372:	a808      	add	r0, sp, #32
 8012374:	f7ff fe80 	bl	8012078 <uxr_buffer_submessage_header>
 8012378:	8921      	ldrh	r1, [r4, #8]
 801237a:	6863      	ldr	r3, [r4, #4]
 801237c:	4638      	mov	r0, r7
 801237e:	fbb7 f2f1 	udiv	r2, r7, r1
 8012382:	fbb3 f3f1 	udiv	r3, r3, r1
 8012386:	fb01 7212 	mls	r2, r1, r2, r7
 801238a:	2101      	movs	r1, #1
 801238c:	b292      	uxth	r2, r2
 801238e:	fb02 f303 	mul.w	r3, r2, r3
 8012392:	6822      	ldr	r2, [r4, #0]
 8012394:	f842 b003 	str.w	fp, [r2, r3]
 8012398:	f008 f9fe 	bl	801a798 <uxr_seq_num_add>
 801239c:	9b03      	ldr	r3, [sp, #12]
 801239e:	f108 0104 	add.w	r1, r8, #4
 80123a2:	4607      	mov	r7, r0
 80123a4:	f1a3 0208 	sub.w	r2, r3, #8
 80123a8:	4630      	mov	r0, r6
 80123aa:	4449      	add	r1, r9
 80123ac:	eba2 0208 	sub.w	r2, r2, r8
 80123b0:	f7fe f9ac 	bl	801070c <ucdr_init_buffer>
 80123b4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80123b6:	2107      	movs	r1, #7
 80123b8:	81e7      	strh	r7, [r4, #14]
 80123ba:	1d1a      	adds	r2, r3, #4
 80123bc:	2300      	movs	r3, #0
 80123be:	4630      	mov	r0, r6
 80123c0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80123c4:	bf28      	it	cs
 80123c6:	461a      	movcs	r2, r3
 80123c8:	b292      	uxth	r2, r2
 80123ca:	f7ff fe55 	bl	8012078 <uxr_buffer_submessage_header>
 80123ce:	aa07      	add	r2, sp, #28
 80123d0:	9904      	ldr	r1, [sp, #16]
 80123d2:	4628      	mov	r0, r5
 80123d4:	f7ff fce0 	bl	8011d98 <uxr_init_base_object_request>
 80123d8:	4604      	mov	r4, r0
 80123da:	b320      	cbz	r0, 8012426 <uxr_prepare_output_stream_fragmented+0x14a>
 80123dc:	a907      	add	r1, sp, #28
 80123de:	4630      	mov	r0, r6
 80123e0:	f001 f828 	bl	8013434 <uxr_serialize_WRITE_DATA_Payload_Data>
 80123e4:	4630      	mov	r0, r6
 80123e6:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80123ea:	1a52      	subs	r2, r2, r1
 80123ec:	f7fe f98e 	bl	801070c <ucdr_init_buffer>
 80123f0:	9b05      	ldr	r3, [sp, #20]
 80123f2:	9a02      	ldr	r2, [sp, #8]
 80123f4:	4630      	mov	r0, r6
 80123f6:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 80123fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80123fc:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 8012400:	462a      	mov	r2, r5
 8012402:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 8012406:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8012408:	4918      	ldr	r1, [pc, #96]	; (801246c <uxr_prepare_output_stream_fragmented+0x190>)
 801240a:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 801240e:	f7fe f951 	bl	80106b4 <ucdr_set_on_full_buffer_callback>
 8012412:	4620      	mov	r0, r4
 8012414:	b011      	add	sp, #68	; 0x44
 8012416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801241a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801241c:	4628      	mov	r0, r5
 801241e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012420:	4798      	blx	r3
 8012422:	b920      	cbnz	r0, 801242e <uxr_prepare_output_stream_fragmented+0x152>
 8012424:	2400      	movs	r4, #0
 8012426:	4620      	mov	r0, r4
 8012428:	b011      	add	sp, #68	; 0x44
 801242a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801242e:	4620      	mov	r0, r4
 8012430:	f008 f860 	bl	801a4f4 <get_available_free_slots>
 8012434:	2800      	cmp	r0, #0
 8012436:	f47f af6b 	bne.w	8012310 <uxr_prepare_output_stream_fragmented+0x34>
 801243a:	e7f3      	b.n	8012424 <uxr_prepare_output_stream_fragmented+0x148>
 801243c:	4638      	mov	r0, r7
 801243e:	2101      	movs	r1, #1
 8012440:	f008 f9aa 	bl	801a798 <uxr_seq_num_add>
 8012444:	8922      	ldrh	r2, [r4, #8]
 8012446:	6863      	ldr	r3, [r4, #4]
 8012448:	4607      	mov	r7, r0
 801244a:	fbb3 f9f2 	udiv	r9, r3, r2
 801244e:	fbb0 f3f2 	udiv	r3, r0, r2
 8012452:	fb02 0313 	mls	r3, r2, r3, r0
 8012456:	b29b      	uxth	r3, r3
 8012458:	fb03 f909 	mul.w	r9, r3, r9
 801245c:	6823      	ldr	r3, [r4, #0]
 801245e:	f109 0904 	add.w	r9, r9, #4
 8012462:	4499      	add	r9, r3
 8012464:	7b23      	ldrb	r3, [r4, #12]
 8012466:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801246a:	e76a      	b.n	8012342 <uxr_prepare_output_stream_fragmented+0x66>
 801246c:	08012169 	.word	0x08012169

08012470 <uxr_serialize_message_header>:
 8012470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012472:	4616      	mov	r6, r2
 8012474:	b083      	sub	sp, #12
 8012476:	4604      	mov	r4, r0
 8012478:	460d      	mov	r5, r1
 801247a:	9301      	str	r3, [sp, #4]
 801247c:	9f08      	ldr	r7, [sp, #32]
 801247e:	f7fc fde5 	bl	800f04c <ucdr_serialize_uint8_t>
 8012482:	4631      	mov	r1, r6
 8012484:	4620      	mov	r0, r4
 8012486:	f7fc fde1 	bl	800f04c <ucdr_serialize_uint8_t>
 801248a:	9a01      	ldr	r2, [sp, #4]
 801248c:	2101      	movs	r1, #1
 801248e:	4620      	mov	r0, r4
 8012490:	f7fc fe88 	bl	800f1a4 <ucdr_serialize_endian_uint16_t>
 8012494:	062b      	lsls	r3, r5, #24
 8012496:	d501      	bpl.n	801249c <uxr_serialize_message_header+0x2c>
 8012498:	b003      	add	sp, #12
 801249a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801249c:	2204      	movs	r2, #4
 801249e:	4639      	mov	r1, r7
 80124a0:	4620      	mov	r0, r4
 80124a2:	b003      	add	sp, #12
 80124a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80124a8:	f7fc bc2c 	b.w	800ed04 <ucdr_serialize_array_uint8_t>

080124ac <uxr_deserialize_message_header>:
 80124ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124ae:	4616      	mov	r6, r2
 80124b0:	b083      	sub	sp, #12
 80124b2:	4604      	mov	r4, r0
 80124b4:	460d      	mov	r5, r1
 80124b6:	9301      	str	r3, [sp, #4]
 80124b8:	9f08      	ldr	r7, [sp, #32]
 80124ba:	f7fc fddd 	bl	800f078 <ucdr_deserialize_uint8_t>
 80124be:	4631      	mov	r1, r6
 80124c0:	4620      	mov	r0, r4
 80124c2:	f7fc fdd9 	bl	800f078 <ucdr_deserialize_uint8_t>
 80124c6:	9a01      	ldr	r2, [sp, #4]
 80124c8:	2101      	movs	r1, #1
 80124ca:	4620      	mov	r0, r4
 80124cc:	f7fc ff5e 	bl	800f38c <ucdr_deserialize_endian_uint16_t>
 80124d0:	f995 3000 	ldrsb.w	r3, [r5]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	da01      	bge.n	80124dc <uxr_deserialize_message_header+0x30>
 80124d8:	b003      	add	sp, #12
 80124da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80124dc:	2204      	movs	r2, #4
 80124de:	4639      	mov	r1, r7
 80124e0:	4620      	mov	r0, r4
 80124e2:	b003      	add	sp, #12
 80124e4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80124e8:	f7fc bc70 	b.w	800edcc <ucdr_deserialize_array_uint8_t>

080124ec <uxr_serialize_submessage_header>:
 80124ec:	b530      	push	{r4, r5, lr}
 80124ee:	4615      	mov	r5, r2
 80124f0:	b083      	sub	sp, #12
 80124f2:	4604      	mov	r4, r0
 80124f4:	9301      	str	r3, [sp, #4]
 80124f6:	f7fc fda9 	bl	800f04c <ucdr_serialize_uint8_t>
 80124fa:	4629      	mov	r1, r5
 80124fc:	4620      	mov	r0, r4
 80124fe:	f7fc fda5 	bl	800f04c <ucdr_serialize_uint8_t>
 8012502:	9a01      	ldr	r2, [sp, #4]
 8012504:	2101      	movs	r1, #1
 8012506:	4620      	mov	r0, r4
 8012508:	b003      	add	sp, #12
 801250a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801250e:	f7fc be49 	b.w	800f1a4 <ucdr_serialize_endian_uint16_t>
 8012512:	bf00      	nop

08012514 <uxr_deserialize_submessage_header>:
 8012514:	b530      	push	{r4, r5, lr}
 8012516:	4615      	mov	r5, r2
 8012518:	b083      	sub	sp, #12
 801251a:	4604      	mov	r4, r0
 801251c:	9301      	str	r3, [sp, #4]
 801251e:	f7fc fdab 	bl	800f078 <ucdr_deserialize_uint8_t>
 8012522:	4629      	mov	r1, r5
 8012524:	4620      	mov	r0, r4
 8012526:	f7fc fda7 	bl	800f078 <ucdr_deserialize_uint8_t>
 801252a:	9a01      	ldr	r2, [sp, #4]
 801252c:	2101      	movs	r1, #1
 801252e:	4620      	mov	r0, r4
 8012530:	b003      	add	sp, #12
 8012532:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012536:	f7fc bf29 	b.w	800f38c <ucdr_deserialize_endian_uint16_t>
 801253a:	bf00      	nop

0801253c <uxr_serialize_CLIENT_Representation>:
 801253c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012540:	2204      	movs	r2, #4
 8012542:	460e      	mov	r6, r1
 8012544:	4605      	mov	r5, r0
 8012546:	f7fc fbdd 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 801254a:	4607      	mov	r7, r0
 801254c:	2202      	movs	r2, #2
 801254e:	1d31      	adds	r1, r6, #4
 8012550:	4628      	mov	r0, r5
 8012552:	f7fc fbd7 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 8012556:	4038      	ands	r0, r7
 8012558:	2202      	movs	r2, #2
 801255a:	1db1      	adds	r1, r6, #6
 801255c:	b2c7      	uxtb	r7, r0
 801255e:	4628      	mov	r0, r5
 8012560:	f7fc fbd0 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 8012564:	2204      	movs	r2, #4
 8012566:	4007      	ands	r7, r0
 8012568:	f106 0108 	add.w	r1, r6, #8
 801256c:	4628      	mov	r0, r5
 801256e:	f7fc fbc9 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 8012572:	4007      	ands	r7, r0
 8012574:	7b31      	ldrb	r1, [r6, #12]
 8012576:	4628      	mov	r0, r5
 8012578:	f7fc fd68 	bl	800f04c <ucdr_serialize_uint8_t>
 801257c:	7b71      	ldrb	r1, [r6, #13]
 801257e:	4007      	ands	r7, r0
 8012580:	4628      	mov	r0, r5
 8012582:	f7fc fd35 	bl	800eff0 <ucdr_serialize_bool>
 8012586:	7b73      	ldrb	r3, [r6, #13]
 8012588:	ea07 0800 	and.w	r8, r7, r0
 801258c:	b93b      	cbnz	r3, 801259e <uxr_serialize_CLIENT_Representation+0x62>
 801258e:	8bb1      	ldrh	r1, [r6, #28]
 8012590:	4628      	mov	r0, r5
 8012592:	f7fc fd87 	bl	800f0a4 <ucdr_serialize_uint16_t>
 8012596:	ea08 0000 	and.w	r0, r8, r0
 801259a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801259e:	6931      	ldr	r1, [r6, #16]
 80125a0:	4628      	mov	r0, r5
 80125a2:	f7fc ff69 	bl	800f478 <ucdr_serialize_uint32_t>
 80125a6:	6933      	ldr	r3, [r6, #16]
 80125a8:	b1e3      	cbz	r3, 80125e4 <uxr_serialize_CLIENT_Representation+0xa8>
 80125aa:	b1c0      	cbz	r0, 80125de <uxr_serialize_CLIENT_Representation+0xa2>
 80125ac:	4637      	mov	r7, r6
 80125ae:	f04f 0900 	mov.w	r9, #0
 80125b2:	e000      	b.n	80125b6 <uxr_serialize_CLIENT_Representation+0x7a>
 80125b4:	b19c      	cbz	r4, 80125de <uxr_serialize_CLIENT_Representation+0xa2>
 80125b6:	6979      	ldr	r1, [r7, #20]
 80125b8:	4628      	mov	r0, r5
 80125ba:	f007 f99b 	bl	80198f4 <ucdr_serialize_string>
 80125be:	69b9      	ldr	r1, [r7, #24]
 80125c0:	4604      	mov	r4, r0
 80125c2:	4628      	mov	r0, r5
 80125c4:	f007 f996 	bl	80198f4 <ucdr_serialize_string>
 80125c8:	f109 0901 	add.w	r9, r9, #1
 80125cc:	6933      	ldr	r3, [r6, #16]
 80125ce:	4004      	ands	r4, r0
 80125d0:	3708      	adds	r7, #8
 80125d2:	4599      	cmp	r9, r3
 80125d4:	b2e4      	uxtb	r4, r4
 80125d6:	d3ed      	bcc.n	80125b4 <uxr_serialize_CLIENT_Representation+0x78>
 80125d8:	ea08 0804 	and.w	r8, r8, r4
 80125dc:	e7d7      	b.n	801258e <uxr_serialize_CLIENT_Representation+0x52>
 80125de:	f04f 0800 	mov.w	r8, #0
 80125e2:	e7d4      	b.n	801258e <uxr_serialize_CLIENT_Representation+0x52>
 80125e4:	ea08 0800 	and.w	r8, r8, r0
 80125e8:	e7d1      	b.n	801258e <uxr_serialize_CLIENT_Representation+0x52>
 80125ea:	bf00      	nop

080125ec <uxr_deserialize_CLIENT_Representation>:
 80125ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125f0:	2204      	movs	r2, #4
 80125f2:	460c      	mov	r4, r1
 80125f4:	4605      	mov	r5, r0
 80125f6:	f7fc fbe9 	bl	800edcc <ucdr_deserialize_array_uint8_t>
 80125fa:	4607      	mov	r7, r0
 80125fc:	2202      	movs	r2, #2
 80125fe:	1d21      	adds	r1, r4, #4
 8012600:	4628      	mov	r0, r5
 8012602:	f7fc fbe3 	bl	800edcc <ucdr_deserialize_array_uint8_t>
 8012606:	4038      	ands	r0, r7
 8012608:	2202      	movs	r2, #2
 801260a:	1da1      	adds	r1, r4, #6
 801260c:	b2c6      	uxtb	r6, r0
 801260e:	4628      	mov	r0, r5
 8012610:	f7fc fbdc 	bl	800edcc <ucdr_deserialize_array_uint8_t>
 8012614:	2204      	movs	r2, #4
 8012616:	4006      	ands	r6, r0
 8012618:	f104 0108 	add.w	r1, r4, #8
 801261c:	4628      	mov	r0, r5
 801261e:	f7fc fbd5 	bl	800edcc <ucdr_deserialize_array_uint8_t>
 8012622:	4006      	ands	r6, r0
 8012624:	f104 010c 	add.w	r1, r4, #12
 8012628:	4628      	mov	r0, r5
 801262a:	f7fc fd25 	bl	800f078 <ucdr_deserialize_uint8_t>
 801262e:	f104 010d 	add.w	r1, r4, #13
 8012632:	ea06 0700 	and.w	r7, r6, r0
 8012636:	4628      	mov	r0, r5
 8012638:	f7fc fcf0 	bl	800f01c <ucdr_deserialize_bool>
 801263c:	7b63      	ldrb	r3, [r4, #13]
 801263e:	4007      	ands	r7, r0
 8012640:	b93b      	cbnz	r3, 8012652 <uxr_deserialize_CLIENT_Representation+0x66>
 8012642:	f104 011c 	add.w	r1, r4, #28
 8012646:	4628      	mov	r0, r5
 8012648:	f7fc fe2c 	bl	800f2a4 <ucdr_deserialize_uint16_t>
 801264c:	4038      	ands	r0, r7
 801264e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012652:	f104 0110 	add.w	r1, r4, #16
 8012656:	4628      	mov	r0, r5
 8012658:	f7fd f83e 	bl	800f6d8 <ucdr_deserialize_uint32_t>
 801265c:	6923      	ldr	r3, [r4, #16]
 801265e:	2b01      	cmp	r3, #1
 8012660:	d903      	bls.n	801266a <uxr_deserialize_CLIENT_Representation+0x7e>
 8012662:	2301      	movs	r3, #1
 8012664:	2700      	movs	r7, #0
 8012666:	75ab      	strb	r3, [r5, #22]
 8012668:	e7eb      	b.n	8012642 <uxr_deserialize_CLIENT_Representation+0x56>
 801266a:	b30b      	cbz	r3, 80126b0 <uxr_deserialize_CLIENT_Representation+0xc4>
 801266c:	b1f0      	cbz	r0, 80126ac <uxr_deserialize_CLIENT_Representation+0xc0>
 801266e:	46a0      	mov	r8, r4
 8012670:	f04f 0900 	mov.w	r9, #0
 8012674:	e000      	b.n	8012678 <uxr_deserialize_CLIENT_Representation+0x8c>
 8012676:	b1ce      	cbz	r6, 80126ac <uxr_deserialize_CLIENT_Representation+0xc0>
 8012678:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801267c:	f108 0808 	add.w	r8, r8, #8
 8012680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012684:	4628      	mov	r0, r5
 8012686:	f007 f945 	bl	8019914 <ucdr_deserialize_string>
 801268a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801268e:	4606      	mov	r6, r0
 8012690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012694:	4628      	mov	r0, r5
 8012696:	f109 0901 	add.w	r9, r9, #1
 801269a:	f007 f93b 	bl	8019914 <ucdr_deserialize_string>
 801269e:	6923      	ldr	r3, [r4, #16]
 80126a0:	4006      	ands	r6, r0
 80126a2:	4599      	cmp	r9, r3
 80126a4:	b2f6      	uxtb	r6, r6
 80126a6:	d3e6      	bcc.n	8012676 <uxr_deserialize_CLIENT_Representation+0x8a>
 80126a8:	4037      	ands	r7, r6
 80126aa:	e7ca      	b.n	8012642 <uxr_deserialize_CLIENT_Representation+0x56>
 80126ac:	2700      	movs	r7, #0
 80126ae:	e7c8      	b.n	8012642 <uxr_deserialize_CLIENT_Representation+0x56>
 80126b0:	4007      	ands	r7, r0
 80126b2:	e7c6      	b.n	8012642 <uxr_deserialize_CLIENT_Representation+0x56>

080126b4 <uxr_serialize_AGENT_Representation>:
 80126b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126b8:	2204      	movs	r2, #4
 80126ba:	460f      	mov	r7, r1
 80126bc:	4605      	mov	r5, r0
 80126be:	f7fc fb21 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 80126c2:	4604      	mov	r4, r0
 80126c4:	2202      	movs	r2, #2
 80126c6:	1d39      	adds	r1, r7, #4
 80126c8:	4628      	mov	r0, r5
 80126ca:	f7fc fb1b 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 80126ce:	4020      	ands	r0, r4
 80126d0:	2202      	movs	r2, #2
 80126d2:	1db9      	adds	r1, r7, #6
 80126d4:	b2c4      	uxtb	r4, r0
 80126d6:	4628      	mov	r0, r5
 80126d8:	f7fc fb14 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 80126dc:	7a39      	ldrb	r1, [r7, #8]
 80126de:	4004      	ands	r4, r0
 80126e0:	4628      	mov	r0, r5
 80126e2:	f7fc fc85 	bl	800eff0 <ucdr_serialize_bool>
 80126e6:	7a3b      	ldrb	r3, [r7, #8]
 80126e8:	ea00 0804 	and.w	r8, r0, r4
 80126ec:	b913      	cbnz	r3, 80126f4 <uxr_serialize_AGENT_Representation+0x40>
 80126ee:	4640      	mov	r0, r8
 80126f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126f4:	68f9      	ldr	r1, [r7, #12]
 80126f6:	4628      	mov	r0, r5
 80126f8:	f7fc febe 	bl	800f478 <ucdr_serialize_uint32_t>
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	b303      	cbz	r3, 8012742 <uxr_serialize_AGENT_Representation+0x8e>
 8012700:	b1d0      	cbz	r0, 8012738 <uxr_serialize_AGENT_Representation+0x84>
 8012702:	463e      	mov	r6, r7
 8012704:	f04f 0900 	mov.w	r9, #0
 8012708:	e000      	b.n	801270c <uxr_serialize_AGENT_Representation+0x58>
 801270a:	b1ac      	cbz	r4, 8012738 <uxr_serialize_AGENT_Representation+0x84>
 801270c:	6931      	ldr	r1, [r6, #16]
 801270e:	4628      	mov	r0, r5
 8012710:	f007 f8f0 	bl	80198f4 <ucdr_serialize_string>
 8012714:	6971      	ldr	r1, [r6, #20]
 8012716:	4604      	mov	r4, r0
 8012718:	4628      	mov	r0, r5
 801271a:	f007 f8eb 	bl	80198f4 <ucdr_serialize_string>
 801271e:	f109 0901 	add.w	r9, r9, #1
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	4004      	ands	r4, r0
 8012726:	3608      	adds	r6, #8
 8012728:	4599      	cmp	r9, r3
 801272a:	b2e4      	uxtb	r4, r4
 801272c:	d3ed      	bcc.n	801270a <uxr_serialize_AGENT_Representation+0x56>
 801272e:	ea08 0804 	and.w	r8, r8, r4
 8012732:	4640      	mov	r0, r8
 8012734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012738:	f04f 0800 	mov.w	r8, #0
 801273c:	4640      	mov	r0, r8
 801273e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012742:	ea08 0800 	and.w	r8, r8, r0
 8012746:	e7d2      	b.n	80126ee <uxr_serialize_AGENT_Representation+0x3a>

08012748 <uxr_serialize_DATAWRITER_Representation>:
 8012748:	b570      	push	{r4, r5, r6, lr}
 801274a:	460d      	mov	r5, r1
 801274c:	7809      	ldrb	r1, [r1, #0]
 801274e:	4606      	mov	r6, r0
 8012750:	f7fc fc7c 	bl	800f04c <ucdr_serialize_uint8_t>
 8012754:	4604      	mov	r4, r0
 8012756:	b130      	cbz	r0, 8012766 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012758:	782b      	ldrb	r3, [r5, #0]
 801275a:	2b02      	cmp	r3, #2
 801275c:	d00c      	beq.n	8012778 <uxr_serialize_DATAWRITER_Representation+0x30>
 801275e:	2b03      	cmp	r3, #3
 8012760:	d010      	beq.n	8012784 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8012762:	2b01      	cmp	r3, #1
 8012764:	d008      	beq.n	8012778 <uxr_serialize_DATAWRITER_Representation+0x30>
 8012766:	2202      	movs	r2, #2
 8012768:	f505 7102 	add.w	r1, r5, #520	; 0x208
 801276c:	4630      	mov	r0, r6
 801276e:	f7fc fac9 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 8012772:	4020      	ands	r0, r4
 8012774:	b2c0      	uxtb	r0, r0
 8012776:	bd70      	pop	{r4, r5, r6, pc}
 8012778:	6869      	ldr	r1, [r5, #4]
 801277a:	4630      	mov	r0, r6
 801277c:	f007 f8ba 	bl	80198f4 <ucdr_serialize_string>
 8012780:	4604      	mov	r4, r0
 8012782:	e7f0      	b.n	8012766 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012784:	4629      	mov	r1, r5
 8012786:	4630      	mov	r0, r6
 8012788:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801278c:	3104      	adds	r1, #4
 801278e:	f007 f885 	bl	801989c <ucdr_serialize_sequence_uint8_t>
 8012792:	4604      	mov	r4, r0
 8012794:	e7e7      	b.n	8012766 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012796:	bf00      	nop

08012798 <uxr_serialize_ObjectVariant.part.0>:
 8012798:	b570      	push	{r4, r5, r6, lr}
 801279a:	780b      	ldrb	r3, [r1, #0]
 801279c:	460c      	mov	r4, r1
 801279e:	4605      	mov	r5, r0
 80127a0:	3b01      	subs	r3, #1
 80127a2:	2b0d      	cmp	r3, #13
 80127a4:	d854      	bhi.n	8012850 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80127a6:	e8df f003 	tbb	[pc, r3]
 80127aa:	0730      	.short	0x0730
 80127ac:	07071b1b 	.word	0x07071b1b
 80127b0:	0c530707 	.word	0x0c530707
 80127b4:	494e0c0c 	.word	0x494e0c0c
 80127b8:	3104      	adds	r1, #4
 80127ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80127be:	f7ff bfc3 	b.w	8012748 <uxr_serialize_DATAWRITER_Representation>
 80127c2:	7909      	ldrb	r1, [r1, #4]
 80127c4:	f7fc fc42 	bl	800f04c <ucdr_serialize_uint8_t>
 80127c8:	b1e8      	cbz	r0, 8012806 <uxr_serialize_ObjectVariant.part.0+0x6e>
 80127ca:	7923      	ldrb	r3, [r4, #4]
 80127cc:	2b01      	cmp	r3, #1
 80127ce:	d001      	beq.n	80127d4 <uxr_serialize_ObjectVariant.part.0+0x3c>
 80127d0:	2b02      	cmp	r3, #2
 80127d2:	d13d      	bne.n	8012850 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80127d4:	68a1      	ldr	r1, [r4, #8]
 80127d6:	4628      	mov	r0, r5
 80127d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80127dc:	f007 b88a 	b.w	80198f4 <ucdr_serialize_string>
 80127e0:	7909      	ldrb	r1, [r1, #4]
 80127e2:	f7fc fc33 	bl	800f04c <ucdr_serialize_uint8_t>
 80127e6:	4606      	mov	r6, r0
 80127e8:	b120      	cbz	r0, 80127f4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80127ea:	7923      	ldrb	r3, [r4, #4]
 80127ec:	2b02      	cmp	r3, #2
 80127ee:	d039      	beq.n	8012864 <uxr_serialize_ObjectVariant.part.0+0xcc>
 80127f0:	2b03      	cmp	r3, #3
 80127f2:	d02f      	beq.n	8012854 <uxr_serialize_ObjectVariant.part.0+0xbc>
 80127f4:	2202      	movs	r2, #2
 80127f6:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80127fa:	4628      	mov	r0, r5
 80127fc:	f7fc fa82 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 8012800:	4030      	ands	r0, r6
 8012802:	b2c0      	uxtb	r0, r0
 8012804:	bd70      	pop	{r4, r5, r6, pc}
 8012806:	2000      	movs	r0, #0
 8012808:	bd70      	pop	{r4, r5, r6, pc}
 801280a:	7909      	ldrb	r1, [r1, #4]
 801280c:	f7fc fc1e 	bl	800f04c <ucdr_serialize_uint8_t>
 8012810:	4606      	mov	r6, r0
 8012812:	b158      	cbz	r0, 801282c <uxr_serialize_ObjectVariant.part.0+0x94>
 8012814:	7923      	ldrb	r3, [r4, #4]
 8012816:	2b02      	cmp	r3, #2
 8012818:	d003      	beq.n	8012822 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801281a:	2b03      	cmp	r3, #3
 801281c:	d028      	beq.n	8012870 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801281e:	2b01      	cmp	r3, #1
 8012820:	d104      	bne.n	801282c <uxr_serialize_ObjectVariant.part.0+0x94>
 8012822:	68a1      	ldr	r1, [r4, #8]
 8012824:	4628      	mov	r0, r5
 8012826:	f007 f865 	bl	80198f4 <ucdr_serialize_string>
 801282a:	4606      	mov	r6, r0
 801282c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8012830:	4628      	mov	r0, r5
 8012832:	f7fd f947 	bl	800fac4 <ucdr_serialize_int16_t>
 8012836:	4030      	ands	r0, r6
 8012838:	b2c0      	uxtb	r0, r0
 801283a:	bd70      	pop	{r4, r5, r6, pc}
 801283c:	3104      	adds	r1, #4
 801283e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012842:	f7ff be7b 	b.w	801253c <uxr_serialize_CLIENT_Representation>
 8012846:	3104      	adds	r1, #4
 8012848:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801284c:	f7ff bf32 	b.w	80126b4 <uxr_serialize_AGENT_Representation>
 8012850:	2001      	movs	r0, #1
 8012852:	bd70      	pop	{r4, r5, r6, pc}
 8012854:	68a2      	ldr	r2, [r4, #8]
 8012856:	f104 010c 	add.w	r1, r4, #12
 801285a:	4628      	mov	r0, r5
 801285c:	f007 f81e 	bl	801989c <ucdr_serialize_sequence_uint8_t>
 8012860:	4606      	mov	r6, r0
 8012862:	e7c7      	b.n	80127f4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012864:	68a1      	ldr	r1, [r4, #8]
 8012866:	4628      	mov	r0, r5
 8012868:	f007 f844 	bl	80198f4 <ucdr_serialize_string>
 801286c:	4606      	mov	r6, r0
 801286e:	e7c1      	b.n	80127f4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8012870:	68a2      	ldr	r2, [r4, #8]
 8012872:	f104 010c 	add.w	r1, r4, #12
 8012876:	4628      	mov	r0, r5
 8012878:	f007 f810 	bl	801989c <ucdr_serialize_sequence_uint8_t>
 801287c:	4606      	mov	r6, r0
 801287e:	e7d5      	b.n	801282c <uxr_serialize_ObjectVariant.part.0+0x94>

08012880 <uxr_deserialize_DATAWRITER_Representation>:
 8012880:	b570      	push	{r4, r5, r6, lr}
 8012882:	4606      	mov	r6, r0
 8012884:	460d      	mov	r5, r1
 8012886:	f7fc fbf7 	bl	800f078 <ucdr_deserialize_uint8_t>
 801288a:	4604      	mov	r4, r0
 801288c:	b130      	cbz	r0, 801289c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801288e:	782b      	ldrb	r3, [r5, #0]
 8012890:	2b02      	cmp	r3, #2
 8012892:	d00c      	beq.n	80128ae <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012894:	2b03      	cmp	r3, #3
 8012896:	d012      	beq.n	80128be <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8012898:	2b01      	cmp	r3, #1
 801289a:	d008      	beq.n	80128ae <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801289c:	2202      	movs	r2, #2
 801289e:	f505 7102 	add.w	r1, r5, #520	; 0x208
 80128a2:	4630      	mov	r0, r6
 80128a4:	f7fc fa92 	bl	800edcc <ucdr_deserialize_array_uint8_t>
 80128a8:	4020      	ands	r0, r4
 80128aa:	b2c0      	uxtb	r0, r0
 80128ac:	bd70      	pop	{r4, r5, r6, pc}
 80128ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80128b2:	6869      	ldr	r1, [r5, #4]
 80128b4:	4630      	mov	r0, r6
 80128b6:	f007 f82d 	bl	8019914 <ucdr_deserialize_string>
 80128ba:	4604      	mov	r4, r0
 80128bc:	e7ee      	b.n	801289c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80128be:	1d2b      	adds	r3, r5, #4
 80128c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80128c4:	f105 0108 	add.w	r1, r5, #8
 80128c8:	4630      	mov	r0, r6
 80128ca:	f006 fff9 	bl	80198c0 <ucdr_deserialize_sequence_uint8_t>
 80128ce:	4604      	mov	r4, r0
 80128d0:	e7e4      	b.n	801289c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80128d2:	bf00      	nop

080128d4 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 80128d4:	b570      	push	{r4, r5, r6, lr}
 80128d6:	460d      	mov	r5, r1
 80128d8:	7809      	ldrb	r1, [r1, #0]
 80128da:	4606      	mov	r6, r0
 80128dc:	f7fc fb88 	bl	800eff0 <ucdr_serialize_bool>
 80128e0:	782b      	ldrb	r3, [r5, #0]
 80128e2:	4604      	mov	r4, r0
 80128e4:	b94b      	cbnz	r3, 80128fa <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80128e6:	7a29      	ldrb	r1, [r5, #8]
 80128e8:	4630      	mov	r0, r6
 80128ea:	f7fc fb81 	bl	800eff0 <ucdr_serialize_bool>
 80128ee:	7a2b      	ldrb	r3, [r5, #8]
 80128f0:	4004      	ands	r4, r0
 80128f2:	b2e4      	uxtb	r4, r4
 80128f4:	b943      	cbnz	r3, 8012908 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 80128f6:	4620      	mov	r0, r4
 80128f8:	bd70      	pop	{r4, r5, r6, pc}
 80128fa:	6869      	ldr	r1, [r5, #4]
 80128fc:	4630      	mov	r0, r6
 80128fe:	f006 fff9 	bl	80198f4 <ucdr_serialize_string>
 8012902:	4004      	ands	r4, r0
 8012904:	b2e4      	uxtb	r4, r4
 8012906:	e7ee      	b.n	80128e6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8012908:	68e9      	ldr	r1, [r5, #12]
 801290a:	4630      	mov	r0, r6
 801290c:	f006 fff2 	bl	80198f4 <ucdr_serialize_string>
 8012910:	4004      	ands	r4, r0
 8012912:	4620      	mov	r0, r4
 8012914:	bd70      	pop	{r4, r5, r6, pc}
 8012916:	bf00      	nop

08012918 <uxr_serialize_OBJK_Topic_Binary>:
 8012918:	b570      	push	{r4, r5, r6, lr}
 801291a:	460d      	mov	r5, r1
 801291c:	4606      	mov	r6, r0
 801291e:	6809      	ldr	r1, [r1, #0]
 8012920:	f006 ffe8 	bl	80198f4 <ucdr_serialize_string>
 8012924:	4604      	mov	r4, r0
 8012926:	7929      	ldrb	r1, [r5, #4]
 8012928:	4630      	mov	r0, r6
 801292a:	f7fc fb61 	bl	800eff0 <ucdr_serialize_bool>
 801292e:	792b      	ldrb	r3, [r5, #4]
 8012930:	4004      	ands	r4, r0
 8012932:	b2e4      	uxtb	r4, r4
 8012934:	b943      	cbnz	r3, 8012948 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8012936:	7b29      	ldrb	r1, [r5, #12]
 8012938:	4630      	mov	r0, r6
 801293a:	f7fc fb59 	bl	800eff0 <ucdr_serialize_bool>
 801293e:	7b2b      	ldrb	r3, [r5, #12]
 8012940:	4004      	ands	r4, r0
 8012942:	b93b      	cbnz	r3, 8012954 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8012944:	4620      	mov	r0, r4
 8012946:	bd70      	pop	{r4, r5, r6, pc}
 8012948:	68a9      	ldr	r1, [r5, #8]
 801294a:	4630      	mov	r0, r6
 801294c:	f006 ffd2 	bl	80198f4 <ucdr_serialize_string>
 8012950:	4004      	ands	r4, r0
 8012952:	e7f0      	b.n	8012936 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8012954:	6929      	ldr	r1, [r5, #16]
 8012956:	4630      	mov	r0, r6
 8012958:	f006 ffcc 	bl	80198f4 <ucdr_serialize_string>
 801295c:	4004      	ands	r4, r0
 801295e:	b2e4      	uxtb	r4, r4
 8012960:	4620      	mov	r0, r4
 8012962:	bd70      	pop	{r4, r5, r6, pc}

08012964 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8012964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012968:	460c      	mov	r4, r1
 801296a:	7809      	ldrb	r1, [r1, #0]
 801296c:	4606      	mov	r6, r0
 801296e:	f7fc fb3f 	bl	800eff0 <ucdr_serialize_bool>
 8012972:	7823      	ldrb	r3, [r4, #0]
 8012974:	4605      	mov	r5, r0
 8012976:	b96b      	cbnz	r3, 8012994 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8012978:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 801297c:	4630      	mov	r0, r6
 801297e:	f7fc fb37 	bl	800eff0 <ucdr_serialize_bool>
 8012982:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012986:	4005      	ands	r5, r0
 8012988:	b2ed      	uxtb	r5, r5
 801298a:	2b00      	cmp	r3, #0
 801298c:	d169      	bne.n	8012a62 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801298e:	4628      	mov	r0, r5
 8012990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012994:	6861      	ldr	r1, [r4, #4]
 8012996:	4630      	mov	r0, r6
 8012998:	f7fc fd6e 	bl	800f478 <ucdr_serialize_uint32_t>
 801299c:	6863      	ldr	r3, [r4, #4]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d06b      	beq.n	8012a7a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 80129a2:	2800      	cmp	r0, #0
 80129a4:	d067      	beq.n	8012a76 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80129a6:	68a1      	ldr	r1, [r4, #8]
 80129a8:	4630      	mov	r0, r6
 80129aa:	f006 ffa3 	bl	80198f4 <ucdr_serialize_string>
 80129ae:	6863      	ldr	r3, [r4, #4]
 80129b0:	2b01      	cmp	r3, #1
 80129b2:	d953      	bls.n	8012a5c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80129b4:	2800      	cmp	r0, #0
 80129b6:	d05e      	beq.n	8012a76 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80129b8:	68e1      	ldr	r1, [r4, #12]
 80129ba:	4630      	mov	r0, r6
 80129bc:	f006 ff9a 	bl	80198f4 <ucdr_serialize_string>
 80129c0:	6863      	ldr	r3, [r4, #4]
 80129c2:	2b02      	cmp	r3, #2
 80129c4:	d94a      	bls.n	8012a5c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80129c6:	2800      	cmp	r0, #0
 80129c8:	d055      	beq.n	8012a76 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80129ca:	6921      	ldr	r1, [r4, #16]
 80129cc:	4630      	mov	r0, r6
 80129ce:	f006 ff91 	bl	80198f4 <ucdr_serialize_string>
 80129d2:	6863      	ldr	r3, [r4, #4]
 80129d4:	2b03      	cmp	r3, #3
 80129d6:	d941      	bls.n	8012a5c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80129d8:	2800      	cmp	r0, #0
 80129da:	d04c      	beq.n	8012a76 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80129dc:	6961      	ldr	r1, [r4, #20]
 80129de:	4630      	mov	r0, r6
 80129e0:	f006 ff88 	bl	80198f4 <ucdr_serialize_string>
 80129e4:	6863      	ldr	r3, [r4, #4]
 80129e6:	2b04      	cmp	r3, #4
 80129e8:	d938      	bls.n	8012a5c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80129ea:	2800      	cmp	r0, #0
 80129ec:	d043      	beq.n	8012a76 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80129ee:	69a1      	ldr	r1, [r4, #24]
 80129f0:	4630      	mov	r0, r6
 80129f2:	f006 ff7f 	bl	80198f4 <ucdr_serialize_string>
 80129f6:	6863      	ldr	r3, [r4, #4]
 80129f8:	2b05      	cmp	r3, #5
 80129fa:	d92f      	bls.n	8012a5c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80129fc:	2800      	cmp	r0, #0
 80129fe:	d03a      	beq.n	8012a76 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012a00:	69e1      	ldr	r1, [r4, #28]
 8012a02:	4630      	mov	r0, r6
 8012a04:	f006 ff76 	bl	80198f4 <ucdr_serialize_string>
 8012a08:	6863      	ldr	r3, [r4, #4]
 8012a0a:	2b06      	cmp	r3, #6
 8012a0c:	d926      	bls.n	8012a5c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a0e:	b390      	cbz	r0, 8012a76 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012a10:	6a21      	ldr	r1, [r4, #32]
 8012a12:	4630      	mov	r0, r6
 8012a14:	f006 ff6e 	bl	80198f4 <ucdr_serialize_string>
 8012a18:	6863      	ldr	r3, [r4, #4]
 8012a1a:	2b07      	cmp	r3, #7
 8012a1c:	d91e      	bls.n	8012a5c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a1e:	b350      	cbz	r0, 8012a76 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012a20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012a22:	4630      	mov	r0, r6
 8012a24:	f006 ff66 	bl	80198f4 <ucdr_serialize_string>
 8012a28:	6863      	ldr	r3, [r4, #4]
 8012a2a:	2b08      	cmp	r3, #8
 8012a2c:	d916      	bls.n	8012a5c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a2e:	b310      	cbz	r0, 8012a76 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012a30:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012a32:	4630      	mov	r0, r6
 8012a34:	f006 ff5e 	bl	80198f4 <ucdr_serialize_string>
 8012a38:	6863      	ldr	r3, [r4, #4]
 8012a3a:	2b09      	cmp	r3, #9
 8012a3c:	d90e      	bls.n	8012a5c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a3e:	b1d0      	cbz	r0, 8012a76 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012a40:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8012a44:	2709      	movs	r7, #9
 8012a46:	e000      	b.n	8012a4a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8012a48:	b1a8      	cbz	r0, 8012a76 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012a4a:	f858 1b04 	ldr.w	r1, [r8], #4
 8012a4e:	4630      	mov	r0, r6
 8012a50:	f006 ff50 	bl	80198f4 <ucdr_serialize_string>
 8012a54:	3701      	adds	r7, #1
 8012a56:	6862      	ldr	r2, [r4, #4]
 8012a58:	4297      	cmp	r7, r2
 8012a5a:	d3f5      	bcc.n	8012a48 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8012a5c:	4005      	ands	r5, r0
 8012a5e:	b2ed      	uxtb	r5, r5
 8012a60:	e78a      	b.n	8012978 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012a62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012a64:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8012a68:	4630      	mov	r0, r6
 8012a6a:	f006 ff17 	bl	801989c <ucdr_serialize_sequence_uint8_t>
 8012a6e:	4005      	ands	r5, r0
 8012a70:	4628      	mov	r0, r5
 8012a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a76:	2500      	movs	r5, #0
 8012a78:	e77e      	b.n	8012978 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012a7a:	4028      	ands	r0, r5
 8012a7c:	b2c5      	uxtb	r5, r0
 8012a7e:	e77b      	b.n	8012978 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08012a80 <uxr_serialize_OBJK_Publisher_Binary>:
 8012a80:	b570      	push	{r4, r5, r6, lr}
 8012a82:	460d      	mov	r5, r1
 8012a84:	7809      	ldrb	r1, [r1, #0]
 8012a86:	4606      	mov	r6, r0
 8012a88:	f7fc fab2 	bl	800eff0 <ucdr_serialize_bool>
 8012a8c:	782b      	ldrb	r3, [r5, #0]
 8012a8e:	4604      	mov	r4, r0
 8012a90:	b94b      	cbnz	r3, 8012aa6 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8012a92:	7a29      	ldrb	r1, [r5, #8]
 8012a94:	4630      	mov	r0, r6
 8012a96:	f7fc faab 	bl	800eff0 <ucdr_serialize_bool>
 8012a9a:	7a2b      	ldrb	r3, [r5, #8]
 8012a9c:	4004      	ands	r4, r0
 8012a9e:	b2e4      	uxtb	r4, r4
 8012aa0:	b943      	cbnz	r3, 8012ab4 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8012aa2:	4620      	mov	r0, r4
 8012aa4:	bd70      	pop	{r4, r5, r6, pc}
 8012aa6:	6869      	ldr	r1, [r5, #4]
 8012aa8:	4630      	mov	r0, r6
 8012aaa:	f006 ff23 	bl	80198f4 <ucdr_serialize_string>
 8012aae:	4004      	ands	r4, r0
 8012ab0:	b2e4      	uxtb	r4, r4
 8012ab2:	e7ee      	b.n	8012a92 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8012ab4:	f105 010c 	add.w	r1, r5, #12
 8012ab8:	4630      	mov	r0, r6
 8012aba:	f7ff ff53 	bl	8012964 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8012abe:	4004      	ands	r4, r0
 8012ac0:	4620      	mov	r0, r4
 8012ac2:	bd70      	pop	{r4, r5, r6, pc}

08012ac4 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8012ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ac8:	460c      	mov	r4, r1
 8012aca:	7809      	ldrb	r1, [r1, #0]
 8012acc:	4606      	mov	r6, r0
 8012ace:	f7fc fa8f 	bl	800eff0 <ucdr_serialize_bool>
 8012ad2:	7823      	ldrb	r3, [r4, #0]
 8012ad4:	4605      	mov	r5, r0
 8012ad6:	b96b      	cbnz	r3, 8012af4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8012ad8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8012adc:	4630      	mov	r0, r6
 8012ade:	f7fc fa87 	bl	800eff0 <ucdr_serialize_bool>
 8012ae2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012ae6:	4005      	ands	r5, r0
 8012ae8:	b2ed      	uxtb	r5, r5
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d169      	bne.n	8012bc2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8012aee:	4628      	mov	r0, r5
 8012af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012af4:	6861      	ldr	r1, [r4, #4]
 8012af6:	4630      	mov	r0, r6
 8012af8:	f7fc fcbe 	bl	800f478 <ucdr_serialize_uint32_t>
 8012afc:	6863      	ldr	r3, [r4, #4]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d06b      	beq.n	8012bda <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8012b02:	2800      	cmp	r0, #0
 8012b04:	d067      	beq.n	8012bd6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b06:	68a1      	ldr	r1, [r4, #8]
 8012b08:	4630      	mov	r0, r6
 8012b0a:	f006 fef3 	bl	80198f4 <ucdr_serialize_string>
 8012b0e:	6863      	ldr	r3, [r4, #4]
 8012b10:	2b01      	cmp	r3, #1
 8012b12:	d953      	bls.n	8012bbc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b14:	2800      	cmp	r0, #0
 8012b16:	d05e      	beq.n	8012bd6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b18:	68e1      	ldr	r1, [r4, #12]
 8012b1a:	4630      	mov	r0, r6
 8012b1c:	f006 feea 	bl	80198f4 <ucdr_serialize_string>
 8012b20:	6863      	ldr	r3, [r4, #4]
 8012b22:	2b02      	cmp	r3, #2
 8012b24:	d94a      	bls.n	8012bbc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b26:	2800      	cmp	r0, #0
 8012b28:	d055      	beq.n	8012bd6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b2a:	6921      	ldr	r1, [r4, #16]
 8012b2c:	4630      	mov	r0, r6
 8012b2e:	f006 fee1 	bl	80198f4 <ucdr_serialize_string>
 8012b32:	6863      	ldr	r3, [r4, #4]
 8012b34:	2b03      	cmp	r3, #3
 8012b36:	d941      	bls.n	8012bbc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b38:	2800      	cmp	r0, #0
 8012b3a:	d04c      	beq.n	8012bd6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b3c:	6961      	ldr	r1, [r4, #20]
 8012b3e:	4630      	mov	r0, r6
 8012b40:	f006 fed8 	bl	80198f4 <ucdr_serialize_string>
 8012b44:	6863      	ldr	r3, [r4, #4]
 8012b46:	2b04      	cmp	r3, #4
 8012b48:	d938      	bls.n	8012bbc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b4a:	2800      	cmp	r0, #0
 8012b4c:	d043      	beq.n	8012bd6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b4e:	69a1      	ldr	r1, [r4, #24]
 8012b50:	4630      	mov	r0, r6
 8012b52:	f006 fecf 	bl	80198f4 <ucdr_serialize_string>
 8012b56:	6863      	ldr	r3, [r4, #4]
 8012b58:	2b05      	cmp	r3, #5
 8012b5a:	d92f      	bls.n	8012bbc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b5c:	2800      	cmp	r0, #0
 8012b5e:	d03a      	beq.n	8012bd6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b60:	69e1      	ldr	r1, [r4, #28]
 8012b62:	4630      	mov	r0, r6
 8012b64:	f006 fec6 	bl	80198f4 <ucdr_serialize_string>
 8012b68:	6863      	ldr	r3, [r4, #4]
 8012b6a:	2b06      	cmp	r3, #6
 8012b6c:	d926      	bls.n	8012bbc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b6e:	b390      	cbz	r0, 8012bd6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b70:	6a21      	ldr	r1, [r4, #32]
 8012b72:	4630      	mov	r0, r6
 8012b74:	f006 febe 	bl	80198f4 <ucdr_serialize_string>
 8012b78:	6863      	ldr	r3, [r4, #4]
 8012b7a:	2b07      	cmp	r3, #7
 8012b7c:	d91e      	bls.n	8012bbc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b7e:	b350      	cbz	r0, 8012bd6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b80:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012b82:	4630      	mov	r0, r6
 8012b84:	f006 feb6 	bl	80198f4 <ucdr_serialize_string>
 8012b88:	6863      	ldr	r3, [r4, #4]
 8012b8a:	2b08      	cmp	r3, #8
 8012b8c:	d916      	bls.n	8012bbc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b8e:	b310      	cbz	r0, 8012bd6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b90:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012b92:	4630      	mov	r0, r6
 8012b94:	f006 feae 	bl	80198f4 <ucdr_serialize_string>
 8012b98:	6863      	ldr	r3, [r4, #4]
 8012b9a:	2b09      	cmp	r3, #9
 8012b9c:	d90e      	bls.n	8012bbc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b9e:	b1d0      	cbz	r0, 8012bd6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012ba0:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8012ba4:	2709      	movs	r7, #9
 8012ba6:	e000      	b.n	8012baa <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8012ba8:	b1a8      	cbz	r0, 8012bd6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012baa:	f858 1b04 	ldr.w	r1, [r8], #4
 8012bae:	4630      	mov	r0, r6
 8012bb0:	f006 fea0 	bl	80198f4 <ucdr_serialize_string>
 8012bb4:	3701      	adds	r7, #1
 8012bb6:	6862      	ldr	r2, [r4, #4]
 8012bb8:	4297      	cmp	r7, r2
 8012bba:	d3f5      	bcc.n	8012ba8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8012bbc:	4005      	ands	r5, r0
 8012bbe:	b2ed      	uxtb	r5, r5
 8012bc0:	e78a      	b.n	8012ad8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012bc2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012bc4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8012bc8:	4630      	mov	r0, r6
 8012bca:	f006 fe67 	bl	801989c <ucdr_serialize_sequence_uint8_t>
 8012bce:	4005      	ands	r5, r0
 8012bd0:	4628      	mov	r0, r5
 8012bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bd6:	2500      	movs	r5, #0
 8012bd8:	e77e      	b.n	8012ad8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012bda:	4028      	ands	r0, r5
 8012bdc:	b2c5      	uxtb	r5, r0
 8012bde:	e77b      	b.n	8012ad8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08012be0 <uxr_serialize_OBJK_Subscriber_Binary>:
 8012be0:	b570      	push	{r4, r5, r6, lr}
 8012be2:	460d      	mov	r5, r1
 8012be4:	7809      	ldrb	r1, [r1, #0]
 8012be6:	4606      	mov	r6, r0
 8012be8:	f7fc fa02 	bl	800eff0 <ucdr_serialize_bool>
 8012bec:	782b      	ldrb	r3, [r5, #0]
 8012bee:	4604      	mov	r4, r0
 8012bf0:	b94b      	cbnz	r3, 8012c06 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8012bf2:	7a29      	ldrb	r1, [r5, #8]
 8012bf4:	4630      	mov	r0, r6
 8012bf6:	f7fc f9fb 	bl	800eff0 <ucdr_serialize_bool>
 8012bfa:	7a2b      	ldrb	r3, [r5, #8]
 8012bfc:	4004      	ands	r4, r0
 8012bfe:	b2e4      	uxtb	r4, r4
 8012c00:	b943      	cbnz	r3, 8012c14 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8012c02:	4620      	mov	r0, r4
 8012c04:	bd70      	pop	{r4, r5, r6, pc}
 8012c06:	6869      	ldr	r1, [r5, #4]
 8012c08:	4630      	mov	r0, r6
 8012c0a:	f006 fe73 	bl	80198f4 <ucdr_serialize_string>
 8012c0e:	4004      	ands	r4, r0
 8012c10:	b2e4      	uxtb	r4, r4
 8012c12:	e7ee      	b.n	8012bf2 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8012c14:	f105 010c 	add.w	r1, r5, #12
 8012c18:	4630      	mov	r0, r6
 8012c1a:	f7ff ff53 	bl	8012ac4 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8012c1e:	4004      	ands	r4, r0
 8012c20:	4620      	mov	r0, r4
 8012c22:	bd70      	pop	{r4, r5, r6, pc}

08012c24 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8012c24:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8012c28:	4688      	mov	r8, r1
 8012c2a:	4681      	mov	r9, r0
 8012c2c:	8809      	ldrh	r1, [r1, #0]
 8012c2e:	f7fc fa39 	bl	800f0a4 <ucdr_serialize_uint16_t>
 8012c32:	4606      	mov	r6, r0
 8012c34:	f898 1002 	ldrb.w	r1, [r8, #2]
 8012c38:	4648      	mov	r0, r9
 8012c3a:	f7fc f9d9 	bl	800eff0 <ucdr_serialize_bool>
 8012c3e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012c42:	4006      	ands	r6, r0
 8012c44:	b2f5      	uxtb	r5, r6
 8012c46:	b9eb      	cbnz	r3, 8012c84 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8012c48:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012c4c:	4648      	mov	r0, r9
 8012c4e:	f7fc f9cf 	bl	800eff0 <ucdr_serialize_bool>
 8012c52:	f898 3006 	ldrb.w	r3, [r8, #6]
 8012c56:	4005      	ands	r5, r0
 8012c58:	bb7b      	cbnz	r3, 8012cba <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8012c5a:	f898 100c 	ldrb.w	r1, [r8, #12]
 8012c5e:	4648      	mov	r0, r9
 8012c60:	f7fc f9c6 	bl	800eff0 <ucdr_serialize_bool>
 8012c64:	f898 300c 	ldrb.w	r3, [r8, #12]
 8012c68:	4005      	ands	r5, r0
 8012c6a:	b9f3      	cbnz	r3, 8012caa <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8012c6c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8012c70:	4648      	mov	r0, r9
 8012c72:	f7fc f9bd 	bl	800eff0 <ucdr_serialize_bool>
 8012c76:	f898 3014 	ldrb.w	r3, [r8, #20]
 8012c7a:	4005      	ands	r5, r0
 8012c7c:	b94b      	cbnz	r3, 8012c92 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8012c7e:	4628      	mov	r0, r5
 8012c80:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012c84:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8012c88:	4648      	mov	r0, r9
 8012c8a:	f7fc fa0b 	bl	800f0a4 <ucdr_serialize_uint16_t>
 8012c8e:	4005      	ands	r5, r0
 8012c90:	e7da      	b.n	8012c48 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8012c92:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8012c96:	f108 011c 	add.w	r1, r8, #28
 8012c9a:	4648      	mov	r0, r9
 8012c9c:	f006 fdfe 	bl	801989c <ucdr_serialize_sequence_uint8_t>
 8012ca0:	4028      	ands	r0, r5
 8012ca2:	b2c5      	uxtb	r5, r0
 8012ca4:	4628      	mov	r0, r5
 8012ca6:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012caa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012cae:	4648      	mov	r0, r9
 8012cb0:	f7fc fbe2 	bl	800f478 <ucdr_serialize_uint32_t>
 8012cb4:	4028      	ands	r0, r5
 8012cb6:	b2c5      	uxtb	r5, r0
 8012cb8:	e7d8      	b.n	8012c6c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8012cba:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012cbe:	4648      	mov	r0, r9
 8012cc0:	f7fc fbda 	bl	800f478 <ucdr_serialize_uint32_t>
 8012cc4:	4028      	ands	r0, r5
 8012cc6:	b2c5      	uxtb	r5, r0
 8012cc8:	e7c7      	b.n	8012c5a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8012cca:	bf00      	nop

08012ccc <uxr_serialize_OBJK_DataReader_Binary>:
 8012ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cce:	2202      	movs	r2, #2
 8012cd0:	460c      	mov	r4, r1
 8012cd2:	4606      	mov	r6, r0
 8012cd4:	f7fc f816 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 8012cd8:	4605      	mov	r5, r0
 8012cda:	78a1      	ldrb	r1, [r4, #2]
 8012cdc:	4630      	mov	r0, r6
 8012cde:	f7fc f987 	bl	800eff0 <ucdr_serialize_bool>
 8012ce2:	78a3      	ldrb	r3, [r4, #2]
 8012ce4:	4005      	ands	r5, r0
 8012ce6:	b2ed      	uxtb	r5, r5
 8012ce8:	b90b      	cbnz	r3, 8012cee <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8012cea:	4628      	mov	r0, r5
 8012cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cee:	f104 0108 	add.w	r1, r4, #8
 8012cf2:	4630      	mov	r0, r6
 8012cf4:	f7ff ff96 	bl	8012c24 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012cf8:	4607      	mov	r7, r0
 8012cfa:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8012cfe:	4630      	mov	r0, r6
 8012d00:	f7fc f976 	bl	800eff0 <ucdr_serialize_bool>
 8012d04:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8012d08:	4038      	ands	r0, r7
 8012d0a:	b2c7      	uxtb	r7, r0
 8012d0c:	b95b      	cbnz	r3, 8012d26 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8012d0e:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8012d12:	4630      	mov	r0, r6
 8012d14:	f7fc f96c 	bl	800eff0 <ucdr_serialize_bool>
 8012d18:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012d1c:	4007      	ands	r7, r0
 8012d1e:	b94b      	cbnz	r3, 8012d34 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8012d20:	403d      	ands	r5, r7
 8012d22:	4628      	mov	r0, r5
 8012d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d26:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8012d2a:	4630      	mov	r0, r6
 8012d2c:	f7fc fdfa 	bl	800f924 <ucdr_serialize_uint64_t>
 8012d30:	4007      	ands	r7, r0
 8012d32:	e7ec      	b.n	8012d0e <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8012d34:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012d36:	4630      	mov	r0, r6
 8012d38:	f006 fddc 	bl	80198f4 <ucdr_serialize_string>
 8012d3c:	4007      	ands	r7, r0
 8012d3e:	b2ff      	uxtb	r7, r7
 8012d40:	e7ee      	b.n	8012d20 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8012d42:	bf00      	nop

08012d44 <uxr_serialize_OBJK_DataWriter_Binary>:
 8012d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d46:	2202      	movs	r2, #2
 8012d48:	460d      	mov	r5, r1
 8012d4a:	4606      	mov	r6, r0
 8012d4c:	f7fb ffda 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 8012d50:	4604      	mov	r4, r0
 8012d52:	78a9      	ldrb	r1, [r5, #2]
 8012d54:	4630      	mov	r0, r6
 8012d56:	f7fc f94b 	bl	800eff0 <ucdr_serialize_bool>
 8012d5a:	78ab      	ldrb	r3, [r5, #2]
 8012d5c:	4004      	ands	r4, r0
 8012d5e:	b2e4      	uxtb	r4, r4
 8012d60:	b90b      	cbnz	r3, 8012d66 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8012d62:	4620      	mov	r0, r4
 8012d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d66:	f105 0108 	add.w	r1, r5, #8
 8012d6a:	4630      	mov	r0, r6
 8012d6c:	f7ff ff5a 	bl	8012c24 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012d70:	4607      	mov	r7, r0
 8012d72:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8012d76:	4630      	mov	r0, r6
 8012d78:	f7fc f93a 	bl	800eff0 <ucdr_serialize_bool>
 8012d7c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8012d80:	4038      	ands	r0, r7
 8012d82:	b2c7      	uxtb	r7, r0
 8012d84:	b913      	cbnz	r3, 8012d8c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8012d86:	403c      	ands	r4, r7
 8012d88:	4620      	mov	r0, r4
 8012d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d8c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8012d90:	4630      	mov	r0, r6
 8012d92:	f7fc fdc7 	bl	800f924 <ucdr_serialize_uint64_t>
 8012d96:	4007      	ands	r7, r0
 8012d98:	e7f5      	b.n	8012d86 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8012d9a:	bf00      	nop

08012d9c <uxr_serialize_OBJK_Replier_Binary>:
 8012d9c:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8012da0:	460f      	mov	r7, r1
 8012da2:	4680      	mov	r8, r0
 8012da4:	6809      	ldr	r1, [r1, #0]
 8012da6:	f006 fda5 	bl	80198f4 <ucdr_serialize_string>
 8012daa:	4605      	mov	r5, r0
 8012dac:	6879      	ldr	r1, [r7, #4]
 8012dae:	4640      	mov	r0, r8
 8012db0:	f006 fda0 	bl	80198f4 <ucdr_serialize_string>
 8012db4:	4005      	ands	r5, r0
 8012db6:	68b9      	ldr	r1, [r7, #8]
 8012db8:	4640      	mov	r0, r8
 8012dba:	b2ec      	uxtb	r4, r5
 8012dbc:	f006 fd9a 	bl	80198f4 <ucdr_serialize_string>
 8012dc0:	7b39      	ldrb	r1, [r7, #12]
 8012dc2:	4004      	ands	r4, r0
 8012dc4:	4640      	mov	r0, r8
 8012dc6:	f7fc f913 	bl	800eff0 <ucdr_serialize_bool>
 8012dca:	7b3b      	ldrb	r3, [r7, #12]
 8012dcc:	4004      	ands	r4, r0
 8012dce:	b94b      	cbnz	r3, 8012de4 <uxr_serialize_OBJK_Replier_Binary+0x48>
 8012dd0:	7d39      	ldrb	r1, [r7, #20]
 8012dd2:	4640      	mov	r0, r8
 8012dd4:	f7fc f90c 	bl	800eff0 <ucdr_serialize_bool>
 8012dd8:	7d3b      	ldrb	r3, [r7, #20]
 8012dda:	4004      	ands	r4, r0
 8012ddc:	b943      	cbnz	r3, 8012df0 <uxr_serialize_OBJK_Replier_Binary+0x54>
 8012dde:	4620      	mov	r0, r4
 8012de0:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8012de4:	6939      	ldr	r1, [r7, #16]
 8012de6:	4640      	mov	r0, r8
 8012de8:	f006 fd84 	bl	80198f4 <ucdr_serialize_string>
 8012dec:	4004      	ands	r4, r0
 8012dee:	e7ef      	b.n	8012dd0 <uxr_serialize_OBJK_Replier_Binary+0x34>
 8012df0:	69b9      	ldr	r1, [r7, #24]
 8012df2:	4640      	mov	r0, r8
 8012df4:	f006 fd7e 	bl	80198f4 <ucdr_serialize_string>
 8012df8:	4004      	ands	r4, r0
 8012dfa:	b2e4      	uxtb	r4, r4
 8012dfc:	4620      	mov	r0, r4
 8012dfe:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8012e02:	bf00      	nop

08012e04 <uxr_deserialize_ObjectVariant>:
 8012e04:	b570      	push	{r4, r5, r6, lr}
 8012e06:	4605      	mov	r5, r0
 8012e08:	460e      	mov	r6, r1
 8012e0a:	f7fc f935 	bl	800f078 <ucdr_deserialize_uint8_t>
 8012e0e:	b168      	cbz	r0, 8012e2c <uxr_deserialize_ObjectVariant+0x28>
 8012e10:	7833      	ldrb	r3, [r6, #0]
 8012e12:	4604      	mov	r4, r0
 8012e14:	3b01      	subs	r3, #1
 8012e16:	2b0d      	cmp	r3, #13
 8012e18:	d809      	bhi.n	8012e2e <uxr_deserialize_ObjectVariant+0x2a>
 8012e1a:	e8df f003 	tbb	[pc, r3]
 8012e1e:	0a41      	.short	0x0a41
 8012e20:	0a0a2323 	.word	0x0a0a2323
 8012e24:	10080a0a 	.word	0x10080a0a
 8012e28:	565c1010 	.word	0x565c1010
 8012e2c:	2400      	movs	r4, #0
 8012e2e:	4620      	mov	r0, r4
 8012e30:	bd70      	pop	{r4, r5, r6, pc}
 8012e32:	1d31      	adds	r1, r6, #4
 8012e34:	4628      	mov	r0, r5
 8012e36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e3a:	f7ff bd21 	b.w	8012880 <uxr_deserialize_DATAWRITER_Representation>
 8012e3e:	1d31      	adds	r1, r6, #4
 8012e40:	4628      	mov	r0, r5
 8012e42:	f7fc f919 	bl	800f078 <ucdr_deserialize_uint8_t>
 8012e46:	2800      	cmp	r0, #0
 8012e48:	d0f0      	beq.n	8012e2c <uxr_deserialize_ObjectVariant+0x28>
 8012e4a:	7933      	ldrb	r3, [r6, #4]
 8012e4c:	2b01      	cmp	r3, #1
 8012e4e:	d001      	beq.n	8012e54 <uxr_deserialize_ObjectVariant+0x50>
 8012e50:	2b02      	cmp	r3, #2
 8012e52:	d1ec      	bne.n	8012e2e <uxr_deserialize_ObjectVariant+0x2a>
 8012e54:	68b1      	ldr	r1, [r6, #8]
 8012e56:	4628      	mov	r0, r5
 8012e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012e5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012e60:	f006 bd58 	b.w	8019914 <ucdr_deserialize_string>
 8012e64:	1d31      	adds	r1, r6, #4
 8012e66:	4628      	mov	r0, r5
 8012e68:	f7fc f906 	bl	800f078 <ucdr_deserialize_uint8_t>
 8012e6c:	4604      	mov	r4, r0
 8012e6e:	b170      	cbz	r0, 8012e8e <uxr_deserialize_ObjectVariant+0x8a>
 8012e70:	7933      	ldrb	r3, [r6, #4]
 8012e72:	2b02      	cmp	r3, #2
 8012e74:	d04c      	beq.n	8012f10 <uxr_deserialize_ObjectVariant+0x10c>
 8012e76:	2b03      	cmp	r3, #3
 8012e78:	d109      	bne.n	8012e8e <uxr_deserialize_ObjectVariant+0x8a>
 8012e7a:	f106 0308 	add.w	r3, r6, #8
 8012e7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012e82:	f106 010c 	add.w	r1, r6, #12
 8012e86:	4628      	mov	r0, r5
 8012e88:	f006 fd1a 	bl	80198c0 <ucdr_deserialize_sequence_uint8_t>
 8012e8c:	4604      	mov	r4, r0
 8012e8e:	2202      	movs	r2, #2
 8012e90:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8012e94:	4628      	mov	r0, r5
 8012e96:	f7fb ff99 	bl	800edcc <ucdr_deserialize_array_uint8_t>
 8012e9a:	4020      	ands	r0, r4
 8012e9c:	b2c4      	uxtb	r4, r0
 8012e9e:	e7c6      	b.n	8012e2e <uxr_deserialize_ObjectVariant+0x2a>
 8012ea0:	1d31      	adds	r1, r6, #4
 8012ea2:	4628      	mov	r0, r5
 8012ea4:	f7fc f8e8 	bl	800f078 <ucdr_deserialize_uint8_t>
 8012ea8:	4604      	mov	r4, r0
 8012eaa:	b130      	cbz	r0, 8012eba <uxr_deserialize_ObjectVariant+0xb6>
 8012eac:	7933      	ldrb	r3, [r6, #4]
 8012eae:	2b02      	cmp	r3, #2
 8012eb0:	d036      	beq.n	8012f20 <uxr_deserialize_ObjectVariant+0x11c>
 8012eb2:	2b03      	cmp	r3, #3
 8012eb4:	d03c      	beq.n	8012f30 <uxr_deserialize_ObjectVariant+0x12c>
 8012eb6:	2b01      	cmp	r3, #1
 8012eb8:	d032      	beq.n	8012f20 <uxr_deserialize_ObjectVariant+0x11c>
 8012eba:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8012ebe:	4628      	mov	r0, r5
 8012ec0:	f7fc ff00 	bl	800fcc4 <ucdr_deserialize_int16_t>
 8012ec4:	4020      	ands	r0, r4
 8012ec6:	b2c4      	uxtb	r4, r0
 8012ec8:	e7b1      	b.n	8012e2e <uxr_deserialize_ObjectVariant+0x2a>
 8012eca:	1d31      	adds	r1, r6, #4
 8012ecc:	4628      	mov	r0, r5
 8012ece:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ed2:	f7ff bb8b 	b.w	80125ec <uxr_deserialize_CLIENT_Representation>
 8012ed6:	2204      	movs	r2, #4
 8012ed8:	4628      	mov	r0, r5
 8012eda:	18b1      	adds	r1, r6, r2
 8012edc:	f7fb ff76 	bl	800edcc <ucdr_deserialize_array_uint8_t>
 8012ee0:	4604      	mov	r4, r0
 8012ee2:	2202      	movs	r2, #2
 8012ee4:	f106 0108 	add.w	r1, r6, #8
 8012ee8:	4628      	mov	r0, r5
 8012eea:	f7fb ff6f 	bl	800edcc <ucdr_deserialize_array_uint8_t>
 8012eee:	4004      	ands	r4, r0
 8012ef0:	2202      	movs	r2, #2
 8012ef2:	f106 010a 	add.w	r1, r6, #10
 8012ef6:	4628      	mov	r0, r5
 8012ef8:	b2e4      	uxtb	r4, r4
 8012efa:	f7fb ff67 	bl	800edcc <ucdr_deserialize_array_uint8_t>
 8012efe:	4603      	mov	r3, r0
 8012f00:	f106 010c 	add.w	r1, r6, #12
 8012f04:	4628      	mov	r0, r5
 8012f06:	401c      	ands	r4, r3
 8012f08:	f7fc f888 	bl	800f01c <ucdr_deserialize_bool>
 8012f0c:	4004      	ands	r4, r0
 8012f0e:	e78e      	b.n	8012e2e <uxr_deserialize_ObjectVariant+0x2a>
 8012f10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012f14:	68b1      	ldr	r1, [r6, #8]
 8012f16:	4628      	mov	r0, r5
 8012f18:	f006 fcfc 	bl	8019914 <ucdr_deserialize_string>
 8012f1c:	4604      	mov	r4, r0
 8012f1e:	e7b6      	b.n	8012e8e <uxr_deserialize_ObjectVariant+0x8a>
 8012f20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012f24:	68b1      	ldr	r1, [r6, #8]
 8012f26:	4628      	mov	r0, r5
 8012f28:	f006 fcf4 	bl	8019914 <ucdr_deserialize_string>
 8012f2c:	4604      	mov	r4, r0
 8012f2e:	e7c4      	b.n	8012eba <uxr_deserialize_ObjectVariant+0xb6>
 8012f30:	f106 0308 	add.w	r3, r6, #8
 8012f34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012f38:	f106 010c 	add.w	r1, r6, #12
 8012f3c:	4628      	mov	r0, r5
 8012f3e:	f006 fcbf 	bl	80198c0 <ucdr_deserialize_sequence_uint8_t>
 8012f42:	4604      	mov	r4, r0
 8012f44:	e7b9      	b.n	8012eba <uxr_deserialize_ObjectVariant+0xb6>
 8012f46:	bf00      	nop

08012f48 <uxr_deserialize_BaseObjectRequest>:
 8012f48:	b570      	push	{r4, r5, r6, lr}
 8012f4a:	2202      	movs	r2, #2
 8012f4c:	4605      	mov	r5, r0
 8012f4e:	460e      	mov	r6, r1
 8012f50:	f7fb ff3c 	bl	800edcc <ucdr_deserialize_array_uint8_t>
 8012f54:	2202      	movs	r2, #2
 8012f56:	4604      	mov	r4, r0
 8012f58:	4628      	mov	r0, r5
 8012f5a:	18b1      	adds	r1, r6, r2
 8012f5c:	f7fb ff36 	bl	800edcc <ucdr_deserialize_array_uint8_t>
 8012f60:	4020      	ands	r0, r4
 8012f62:	b2c0      	uxtb	r0, r0
 8012f64:	bd70      	pop	{r4, r5, r6, pc}
 8012f66:	bf00      	nop

08012f68 <uxr_serialize_ActivityInfoVariant>:
 8012f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f6c:	460e      	mov	r6, r1
 8012f6e:	7809      	ldrb	r1, [r1, #0]
 8012f70:	4680      	mov	r8, r0
 8012f72:	f7fc f86b 	bl	800f04c <ucdr_serialize_uint8_t>
 8012f76:	4607      	mov	r7, r0
 8012f78:	b138      	cbz	r0, 8012f8a <uxr_serialize_ActivityInfoVariant+0x22>
 8012f7a:	7833      	ldrb	r3, [r6, #0]
 8012f7c:	2b06      	cmp	r3, #6
 8012f7e:	f000 8081 	beq.w	8013084 <uxr_serialize_ActivityInfoVariant+0x11c>
 8012f82:	2b0d      	cmp	r3, #13
 8012f84:	d014      	beq.n	8012fb0 <uxr_serialize_ActivityInfoVariant+0x48>
 8012f86:	2b05      	cmp	r3, #5
 8012f88:	d002      	beq.n	8012f90 <uxr_serialize_ActivityInfoVariant+0x28>
 8012f8a:	4638      	mov	r0, r7
 8012f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f90:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8012f94:	4640      	mov	r0, r8
 8012f96:	f7fc fd95 	bl	800fac4 <ucdr_serialize_int16_t>
 8012f9a:	4607      	mov	r7, r0
 8012f9c:	4640      	mov	r0, r8
 8012f9e:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8012fa2:	f7fc fcbf 	bl	800f924 <ucdr_serialize_uint64_t>
 8012fa6:	4038      	ands	r0, r7
 8012fa8:	b2c7      	uxtb	r7, r0
 8012faa:	4638      	mov	r0, r7
 8012fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fb0:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8012fb4:	4640      	mov	r0, r8
 8012fb6:	f7fc fd85 	bl	800fac4 <ucdr_serialize_int16_t>
 8012fba:	68f1      	ldr	r1, [r6, #12]
 8012fbc:	4607      	mov	r7, r0
 8012fbe:	4640      	mov	r0, r8
 8012fc0:	f7fc fa5a 	bl	800f478 <ucdr_serialize_uint32_t>
 8012fc4:	68f3      	ldr	r3, [r6, #12]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d0ed      	beq.n	8012fa6 <uxr_serialize_ActivityInfoVariant+0x3e>
 8012fca:	b318      	cbz	r0, 8013014 <uxr_serialize_ActivityInfoVariant+0xac>
 8012fcc:	f106 090c 	add.w	r9, r6, #12
 8012fd0:	2400      	movs	r4, #0
 8012fd2:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8012fd6:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8012fda:	7c29      	ldrb	r1, [r5, #16]
 8012fdc:	4640      	mov	r0, r8
 8012fde:	f7fc f835 	bl	800f04c <ucdr_serialize_uint8_t>
 8012fe2:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8012fe6:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8012fea:	2800      	cmp	r0, #0
 8012fec:	d051      	beq.n	8013092 <uxr_serialize_ActivityInfoVariant+0x12a>
 8012fee:	7c2b      	ldrb	r3, [r5, #16]
 8012ff0:	00c9      	lsls	r1, r1, #3
 8012ff2:	2b03      	cmp	r3, #3
 8012ff4:	d854      	bhi.n	80130a0 <uxr_serialize_ActivityInfoVariant+0x138>
 8012ff6:	e8df f003 	tbb	[pc, r3]
 8012ffa:	2133      	.short	0x2133
 8012ffc:	020f      	.short	0x020f
 8012ffe:	4449      	add	r1, r9
 8013000:	4640      	mov	r0, r8
 8013002:	6889      	ldr	r1, [r1, #8]
 8013004:	f006 fc76 	bl	80198f4 <ucdr_serialize_string>
 8013008:	3401      	adds	r4, #1
 801300a:	68f2      	ldr	r2, [r6, #12]
 801300c:	4294      	cmp	r4, r2
 801300e:	d244      	bcs.n	801309a <uxr_serialize_ActivityInfoVariant+0x132>
 8013010:	2800      	cmp	r0, #0
 8013012:	d1de      	bne.n	8012fd2 <uxr_serialize_ActivityInfoVariant+0x6a>
 8013014:	2700      	movs	r7, #0
 8013016:	e7b8      	b.n	8012f8a <uxr_serialize_ActivityInfoVariant+0x22>
 8013018:	3108      	adds	r1, #8
 801301a:	44a2      	add	sl, r4
 801301c:	2210      	movs	r2, #16
 801301e:	4640      	mov	r0, r8
 8013020:	4449      	add	r1, r9
 8013022:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8013026:	f7fb fe6d 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 801302a:	4605      	mov	r5, r0
 801302c:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 8013030:	4640      	mov	r0, r8
 8013032:	f7fc fa21 	bl	800f478 <ucdr_serialize_uint32_t>
 8013036:	4028      	ands	r0, r5
 8013038:	b2c0      	uxtb	r0, r0
 801303a:	e7e5      	b.n	8013008 <uxr_serialize_ActivityInfoVariant+0xa0>
 801303c:	3108      	adds	r1, #8
 801303e:	44a2      	add	sl, r4
 8013040:	2204      	movs	r2, #4
 8013042:	4640      	mov	r0, r8
 8013044:	4449      	add	r1, r9
 8013046:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801304a:	f7fb fe5b 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 801304e:	4605      	mov	r5, r0
 8013050:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 8013054:	4640      	mov	r0, r8
 8013056:	f7fc f825 	bl	800f0a4 <ucdr_serialize_uint16_t>
 801305a:	4028      	ands	r0, r5
 801305c:	b2c0      	uxtb	r0, r0
 801305e:	e7d3      	b.n	8013008 <uxr_serialize_ActivityInfoVariant+0xa0>
 8013060:	3108      	adds	r1, #8
 8013062:	44a2      	add	sl, r4
 8013064:	2202      	movs	r2, #2
 8013066:	4640      	mov	r0, r8
 8013068:	4449      	add	r1, r9
 801306a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801306e:	f7fb fe49 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 8013072:	4605      	mov	r5, r0
 8013074:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8013078:	4640      	mov	r0, r8
 801307a:	f7fb ffe7 	bl	800f04c <ucdr_serialize_uint8_t>
 801307e:	4028      	ands	r0, r5
 8013080:	b2c0      	uxtb	r0, r0
 8013082:	e7c1      	b.n	8013008 <uxr_serialize_ActivityInfoVariant+0xa0>
 8013084:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8013088:	4640      	mov	r0, r8
 801308a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801308e:	f7fc bd19 	b.w	800fac4 <ucdr_serialize_int16_t>
 8013092:	3401      	adds	r4, #1
 8013094:	68f2      	ldr	r2, [r6, #12]
 8013096:	42a2      	cmp	r2, r4
 8013098:	d8bc      	bhi.n	8013014 <uxr_serialize_ActivityInfoVariant+0xac>
 801309a:	4007      	ands	r7, r0
 801309c:	b2ff      	uxtb	r7, r7
 801309e:	e774      	b.n	8012f8a <uxr_serialize_ActivityInfoVariant+0x22>
 80130a0:	3401      	adds	r4, #1
 80130a2:	68f3      	ldr	r3, [r6, #12]
 80130a4:	3518      	adds	r5, #24
 80130a6:	429c      	cmp	r4, r3
 80130a8:	d397      	bcc.n	8012fda <uxr_serialize_ActivityInfoVariant+0x72>
 80130aa:	e76e      	b.n	8012f8a <uxr_serialize_ActivityInfoVariant+0x22>

080130ac <uxr_deserialize_BaseObjectReply>:
 80130ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130b0:	2202      	movs	r2, #2
 80130b2:	4606      	mov	r6, r0
 80130b4:	460f      	mov	r7, r1
 80130b6:	f7fb fe89 	bl	800edcc <ucdr_deserialize_array_uint8_t>
 80130ba:	2202      	movs	r2, #2
 80130bc:	4605      	mov	r5, r0
 80130be:	4630      	mov	r0, r6
 80130c0:	18b9      	adds	r1, r7, r2
 80130c2:	f7fb fe83 	bl	800edcc <ucdr_deserialize_array_uint8_t>
 80130c6:	4680      	mov	r8, r0
 80130c8:	1d39      	adds	r1, r7, #4
 80130ca:	4630      	mov	r0, r6
 80130cc:	f7fb ffd4 	bl	800f078 <ucdr_deserialize_uint8_t>
 80130d0:	ea05 0508 	and.w	r5, r5, r8
 80130d4:	4604      	mov	r4, r0
 80130d6:	1d79      	adds	r1, r7, #5
 80130d8:	4630      	mov	r0, r6
 80130da:	402c      	ands	r4, r5
 80130dc:	f7fb ffcc 	bl	800f078 <ucdr_deserialize_uint8_t>
 80130e0:	4020      	ands	r0, r4
 80130e2:	b2c0      	uxtb	r0, r0
 80130e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080130e8 <uxr_serialize_ReadSpecification>:
 80130e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130ea:	460e      	mov	r6, r1
 80130ec:	4607      	mov	r7, r0
 80130ee:	7809      	ldrb	r1, [r1, #0]
 80130f0:	f7fb ffac 	bl	800f04c <ucdr_serialize_uint8_t>
 80130f4:	4604      	mov	r4, r0
 80130f6:	7871      	ldrb	r1, [r6, #1]
 80130f8:	4638      	mov	r0, r7
 80130fa:	f7fb ffa7 	bl	800f04c <ucdr_serialize_uint8_t>
 80130fe:	4004      	ands	r4, r0
 8013100:	78b1      	ldrb	r1, [r6, #2]
 8013102:	4638      	mov	r0, r7
 8013104:	f7fb ff74 	bl	800eff0 <ucdr_serialize_bool>
 8013108:	78b3      	ldrb	r3, [r6, #2]
 801310a:	b2e4      	uxtb	r4, r4
 801310c:	4004      	ands	r4, r0
 801310e:	b943      	cbnz	r3, 8013122 <uxr_serialize_ReadSpecification+0x3a>
 8013110:	7a31      	ldrb	r1, [r6, #8]
 8013112:	4638      	mov	r0, r7
 8013114:	f7fb ff6c 	bl	800eff0 <ucdr_serialize_bool>
 8013118:	7a33      	ldrb	r3, [r6, #8]
 801311a:	4004      	ands	r4, r0
 801311c:	b93b      	cbnz	r3, 801312e <uxr_serialize_ReadSpecification+0x46>
 801311e:	4620      	mov	r0, r4
 8013120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013122:	6871      	ldr	r1, [r6, #4]
 8013124:	4638      	mov	r0, r7
 8013126:	f006 fbe5 	bl	80198f4 <ucdr_serialize_string>
 801312a:	4004      	ands	r4, r0
 801312c:	e7f0      	b.n	8013110 <uxr_serialize_ReadSpecification+0x28>
 801312e:	8971      	ldrh	r1, [r6, #10]
 8013130:	4638      	mov	r0, r7
 8013132:	f7fb ffb7 	bl	800f0a4 <ucdr_serialize_uint16_t>
 8013136:	4605      	mov	r5, r0
 8013138:	89b1      	ldrh	r1, [r6, #12]
 801313a:	4638      	mov	r0, r7
 801313c:	f7fb ffb2 	bl	800f0a4 <ucdr_serialize_uint16_t>
 8013140:	4005      	ands	r5, r0
 8013142:	89f1      	ldrh	r1, [r6, #14]
 8013144:	4638      	mov	r0, r7
 8013146:	b2ed      	uxtb	r5, r5
 8013148:	f7fb ffac 	bl	800f0a4 <ucdr_serialize_uint16_t>
 801314c:	8a31      	ldrh	r1, [r6, #16]
 801314e:	4025      	ands	r5, r4
 8013150:	4604      	mov	r4, r0
 8013152:	4638      	mov	r0, r7
 8013154:	4025      	ands	r5, r4
 8013156:	f7fb ffa5 	bl	800f0a4 <ucdr_serialize_uint16_t>
 801315a:	ea00 0405 	and.w	r4, r0, r5
 801315e:	4620      	mov	r0, r4
 8013160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013162:	bf00      	nop

08013164 <uxr_serialize_CREATE_CLIENT_Payload>:
 8013164:	f7ff b9ea 	b.w	801253c <uxr_serialize_CLIENT_Representation>

08013168 <uxr_serialize_CREATE_Payload>:
 8013168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801316a:	2202      	movs	r2, #2
 801316c:	4607      	mov	r7, r0
 801316e:	460e      	mov	r6, r1
 8013170:	f7fb fdc8 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 8013174:	2202      	movs	r2, #2
 8013176:	4605      	mov	r5, r0
 8013178:	4638      	mov	r0, r7
 801317a:	18b1      	adds	r1, r6, r2
 801317c:	f7fb fdc2 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 8013180:	7931      	ldrb	r1, [r6, #4]
 8013182:	4604      	mov	r4, r0
 8013184:	4638      	mov	r0, r7
 8013186:	f7fb ff61 	bl	800f04c <ucdr_serialize_uint8_t>
 801318a:	b170      	cbz	r0, 80131aa <uxr_serialize_CREATE_Payload+0x42>
 801318c:	7933      	ldrb	r3, [r6, #4]
 801318e:	402c      	ands	r4, r5
 8013190:	3b01      	subs	r3, #1
 8013192:	b2e4      	uxtb	r4, r4
 8013194:	2b0d      	cmp	r3, #13
 8013196:	d809      	bhi.n	80131ac <uxr_serialize_CREATE_Payload+0x44>
 8013198:	e8df f003 	tbb	[pc, r3]
 801319c:	23230a4c 	.word	0x23230a4c
 80131a0:	0a0a0a0a 	.word	0x0a0a0a0a
 80131a4:	12121208 	.word	0x12121208
 80131a8:	3e45      	.short	0x3e45
 80131aa:	2400      	movs	r4, #0
 80131ac:	4620      	mov	r0, r4
 80131ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131b0:	f106 0108 	add.w	r1, r6, #8
 80131b4:	4638      	mov	r0, r7
 80131b6:	f7ff fac7 	bl	8012748 <uxr_serialize_DATAWRITER_Representation>
 80131ba:	4004      	ands	r4, r0
 80131bc:	4620      	mov	r0, r4
 80131be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131c0:	7a31      	ldrb	r1, [r6, #8]
 80131c2:	4638      	mov	r0, r7
 80131c4:	f7fb ff42 	bl	800f04c <ucdr_serialize_uint8_t>
 80131c8:	2800      	cmp	r0, #0
 80131ca:	d0ee      	beq.n	80131aa <uxr_serialize_CREATE_Payload+0x42>
 80131cc:	7a33      	ldrb	r3, [r6, #8]
 80131ce:	2b01      	cmp	r3, #1
 80131d0:	d001      	beq.n	80131d6 <uxr_serialize_CREATE_Payload+0x6e>
 80131d2:	2b02      	cmp	r3, #2
 80131d4:	d1ea      	bne.n	80131ac <uxr_serialize_CREATE_Payload+0x44>
 80131d6:	68f1      	ldr	r1, [r6, #12]
 80131d8:	4638      	mov	r0, r7
 80131da:	f006 fb8b 	bl	80198f4 <ucdr_serialize_string>
 80131de:	4004      	ands	r4, r0
 80131e0:	e7e4      	b.n	80131ac <uxr_serialize_CREATE_Payload+0x44>
 80131e2:	7a31      	ldrb	r1, [r6, #8]
 80131e4:	4638      	mov	r0, r7
 80131e6:	f7fb ff31 	bl	800f04c <ucdr_serialize_uint8_t>
 80131ea:	4605      	mov	r5, r0
 80131ec:	b158      	cbz	r0, 8013206 <uxr_serialize_CREATE_Payload+0x9e>
 80131ee:	7a33      	ldrb	r3, [r6, #8]
 80131f0:	2b02      	cmp	r3, #2
 80131f2:	d034      	beq.n	801325e <uxr_serialize_CREATE_Payload+0xf6>
 80131f4:	2b03      	cmp	r3, #3
 80131f6:	d106      	bne.n	8013206 <uxr_serialize_CREATE_Payload+0x9e>
 80131f8:	68f2      	ldr	r2, [r6, #12]
 80131fa:	f106 0110 	add.w	r1, r6, #16
 80131fe:	4638      	mov	r0, r7
 8013200:	f006 fb4c 	bl	801989c <ucdr_serialize_sequence_uint8_t>
 8013204:	4605      	mov	r5, r0
 8013206:	2202      	movs	r2, #2
 8013208:	f506 7104 	add.w	r1, r6, #528	; 0x210
 801320c:	4638      	mov	r0, r7
 801320e:	f7fb fd79 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 8013212:	4028      	ands	r0, r5
 8013214:	4004      	ands	r4, r0
 8013216:	e7c9      	b.n	80131ac <uxr_serialize_CREATE_Payload+0x44>
 8013218:	f106 0108 	add.w	r1, r6, #8
 801321c:	4638      	mov	r0, r7
 801321e:	f7ff f98d 	bl	801253c <uxr_serialize_CLIENT_Representation>
 8013222:	4004      	ands	r4, r0
 8013224:	e7c2      	b.n	80131ac <uxr_serialize_CREATE_Payload+0x44>
 8013226:	f106 0108 	add.w	r1, r6, #8
 801322a:	4638      	mov	r0, r7
 801322c:	f7ff fa42 	bl	80126b4 <uxr_serialize_AGENT_Representation>
 8013230:	4004      	ands	r4, r0
 8013232:	e7bb      	b.n	80131ac <uxr_serialize_CREATE_Payload+0x44>
 8013234:	7a31      	ldrb	r1, [r6, #8]
 8013236:	4638      	mov	r0, r7
 8013238:	f7fb ff08 	bl	800f04c <ucdr_serialize_uint8_t>
 801323c:	4605      	mov	r5, r0
 801323e:	b130      	cbz	r0, 801324e <uxr_serialize_CREATE_Payload+0xe6>
 8013240:	7a33      	ldrb	r3, [r6, #8]
 8013242:	2b02      	cmp	r3, #2
 8013244:	d011      	beq.n	801326a <uxr_serialize_CREATE_Payload+0x102>
 8013246:	2b03      	cmp	r3, #3
 8013248:	d015      	beq.n	8013276 <uxr_serialize_CREATE_Payload+0x10e>
 801324a:	2b01      	cmp	r3, #1
 801324c:	d00d      	beq.n	801326a <uxr_serialize_CREATE_Payload+0x102>
 801324e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 8013252:	4638      	mov	r0, r7
 8013254:	f7fc fc36 	bl	800fac4 <ucdr_serialize_int16_t>
 8013258:	4028      	ands	r0, r5
 801325a:	4004      	ands	r4, r0
 801325c:	e7a6      	b.n	80131ac <uxr_serialize_CREATE_Payload+0x44>
 801325e:	68f1      	ldr	r1, [r6, #12]
 8013260:	4638      	mov	r0, r7
 8013262:	f006 fb47 	bl	80198f4 <ucdr_serialize_string>
 8013266:	4605      	mov	r5, r0
 8013268:	e7cd      	b.n	8013206 <uxr_serialize_CREATE_Payload+0x9e>
 801326a:	68f1      	ldr	r1, [r6, #12]
 801326c:	4638      	mov	r0, r7
 801326e:	f006 fb41 	bl	80198f4 <ucdr_serialize_string>
 8013272:	4605      	mov	r5, r0
 8013274:	e7eb      	b.n	801324e <uxr_serialize_CREATE_Payload+0xe6>
 8013276:	68f2      	ldr	r2, [r6, #12]
 8013278:	f106 0110 	add.w	r1, r6, #16
 801327c:	4638      	mov	r0, r7
 801327e:	f006 fb0d 	bl	801989c <ucdr_serialize_sequence_uint8_t>
 8013282:	4605      	mov	r5, r0
 8013284:	e7e3      	b.n	801324e <uxr_serialize_CREATE_Payload+0xe6>
 8013286:	bf00      	nop

08013288 <uxr_deserialize_GET_INFO_Payload>:
 8013288:	b570      	push	{r4, r5, r6, lr}
 801328a:	2202      	movs	r2, #2
 801328c:	4605      	mov	r5, r0
 801328e:	460e      	mov	r6, r1
 8013290:	f7fb fd9c 	bl	800edcc <ucdr_deserialize_array_uint8_t>
 8013294:	2202      	movs	r2, #2
 8013296:	4604      	mov	r4, r0
 8013298:	4628      	mov	r0, r5
 801329a:	18b1      	adds	r1, r6, r2
 801329c:	f7fb fd96 	bl	800edcc <ucdr_deserialize_array_uint8_t>
 80132a0:	4603      	mov	r3, r0
 80132a2:	1d31      	adds	r1, r6, #4
 80132a4:	4628      	mov	r0, r5
 80132a6:	401c      	ands	r4, r3
 80132a8:	f7fc fa16 	bl	800f6d8 <ucdr_deserialize_uint32_t>
 80132ac:	b2e4      	uxtb	r4, r4
 80132ae:	4020      	ands	r0, r4
 80132b0:	bd70      	pop	{r4, r5, r6, pc}
 80132b2:	bf00      	nop

080132b4 <uxr_serialize_DELETE_Payload>:
 80132b4:	b570      	push	{r4, r5, r6, lr}
 80132b6:	2202      	movs	r2, #2
 80132b8:	4605      	mov	r5, r0
 80132ba:	460e      	mov	r6, r1
 80132bc:	f7fb fd22 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 80132c0:	2202      	movs	r2, #2
 80132c2:	4604      	mov	r4, r0
 80132c4:	4628      	mov	r0, r5
 80132c6:	18b1      	adds	r1, r6, r2
 80132c8:	f7fb fd1c 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 80132cc:	4020      	ands	r0, r4
 80132ce:	b2c0      	uxtb	r0, r0
 80132d0:	bd70      	pop	{r4, r5, r6, pc}
 80132d2:	bf00      	nop

080132d4 <uxr_deserialize_STATUS_AGENT_Payload>:
 80132d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132d8:	460e      	mov	r6, r1
 80132da:	4605      	mov	r5, r0
 80132dc:	f7fb fecc 	bl	800f078 <ucdr_deserialize_uint8_t>
 80132e0:	4604      	mov	r4, r0
 80132e2:	1c71      	adds	r1, r6, #1
 80132e4:	4628      	mov	r0, r5
 80132e6:	f7fb fec7 	bl	800f078 <ucdr_deserialize_uint8_t>
 80132ea:	2204      	movs	r2, #4
 80132ec:	4681      	mov	r9, r0
 80132ee:	4628      	mov	r0, r5
 80132f0:	18b1      	adds	r1, r6, r2
 80132f2:	f7fb fd6b 	bl	800edcc <ucdr_deserialize_array_uint8_t>
 80132f6:	f106 0108 	add.w	r1, r6, #8
 80132fa:	4680      	mov	r8, r0
 80132fc:	2202      	movs	r2, #2
 80132fe:	4628      	mov	r0, r5
 8013300:	f7fb fd64 	bl	800edcc <ucdr_deserialize_array_uint8_t>
 8013304:	ea04 0309 	and.w	r3, r4, r9
 8013308:	4607      	mov	r7, r0
 801330a:	2202      	movs	r2, #2
 801330c:	b2db      	uxtb	r3, r3
 801330e:	f106 010a 	add.w	r1, r6, #10
 8013312:	4628      	mov	r0, r5
 8013314:	ea03 0408 	and.w	r4, r3, r8
 8013318:	f7fb fd58 	bl	800edcc <ucdr_deserialize_array_uint8_t>
 801331c:	4603      	mov	r3, r0
 801331e:	4628      	mov	r0, r5
 8013320:	403c      	ands	r4, r7
 8013322:	f106 010c 	add.w	r1, r6, #12
 8013326:	461d      	mov	r5, r3
 8013328:	f7fb fe78 	bl	800f01c <ucdr_deserialize_bool>
 801332c:	4025      	ands	r5, r4
 801332e:	4028      	ands	r0, r5
 8013330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013334 <uxr_deserialize_STATUS_Payload>:
 8013334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013338:	2202      	movs	r2, #2
 801333a:	4606      	mov	r6, r0
 801333c:	460f      	mov	r7, r1
 801333e:	f7fb fd45 	bl	800edcc <ucdr_deserialize_array_uint8_t>
 8013342:	2202      	movs	r2, #2
 8013344:	4605      	mov	r5, r0
 8013346:	4630      	mov	r0, r6
 8013348:	18b9      	adds	r1, r7, r2
 801334a:	f7fb fd3f 	bl	800edcc <ucdr_deserialize_array_uint8_t>
 801334e:	4680      	mov	r8, r0
 8013350:	1d39      	adds	r1, r7, #4
 8013352:	4630      	mov	r0, r6
 8013354:	f7fb fe90 	bl	800f078 <ucdr_deserialize_uint8_t>
 8013358:	ea05 0508 	and.w	r5, r5, r8
 801335c:	4604      	mov	r4, r0
 801335e:	1d79      	adds	r1, r7, #5
 8013360:	4630      	mov	r0, r6
 8013362:	402c      	ands	r4, r5
 8013364:	f7fb fe88 	bl	800f078 <ucdr_deserialize_uint8_t>
 8013368:	4020      	ands	r0, r4
 801336a:	b2c0      	uxtb	r0, r0
 801336c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013370 <uxr_serialize_INFO_Payload>:
 8013370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013374:	2202      	movs	r2, #2
 8013376:	460c      	mov	r4, r1
 8013378:	4605      	mov	r5, r0
 801337a:	f7fb fcc3 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 801337e:	2202      	movs	r2, #2
 8013380:	4680      	mov	r8, r0
 8013382:	4628      	mov	r0, r5
 8013384:	18a1      	adds	r1, r4, r2
 8013386:	f7fb fcbd 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 801338a:	4607      	mov	r7, r0
 801338c:	7921      	ldrb	r1, [r4, #4]
 801338e:	4628      	mov	r0, r5
 8013390:	f7fb fe5c 	bl	800f04c <ucdr_serialize_uint8_t>
 8013394:	ea08 0807 	and.w	r8, r8, r7
 8013398:	4606      	mov	r6, r0
 801339a:	7961      	ldrb	r1, [r4, #5]
 801339c:	4628      	mov	r0, r5
 801339e:	ea06 0608 	and.w	r6, r6, r8
 80133a2:	f7fb fe53 	bl	800f04c <ucdr_serialize_uint8_t>
 80133a6:	7a21      	ldrb	r1, [r4, #8]
 80133a8:	4030      	ands	r0, r6
 80133aa:	b2c7      	uxtb	r7, r0
 80133ac:	4628      	mov	r0, r5
 80133ae:	f7fb fe1f 	bl	800eff0 <ucdr_serialize_bool>
 80133b2:	7a23      	ldrb	r3, [r4, #8]
 80133b4:	4606      	mov	r6, r0
 80133b6:	b96b      	cbnz	r3, 80133d4 <uxr_serialize_INFO_Payload+0x64>
 80133b8:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 80133bc:	4628      	mov	r0, r5
 80133be:	f7fb fe17 	bl	800eff0 <ucdr_serialize_bool>
 80133c2:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 80133c6:	4030      	ands	r0, r6
 80133c8:	b2c6      	uxtb	r6, r0
 80133ca:	b983      	cbnz	r3, 80133ee <uxr_serialize_INFO_Payload+0x7e>
 80133cc:	ea06 0007 	and.w	r0, r6, r7
 80133d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133d4:	7b21      	ldrb	r1, [r4, #12]
 80133d6:	4628      	mov	r0, r5
 80133d8:	f7fb fe38 	bl	800f04c <ucdr_serialize_uint8_t>
 80133dc:	b188      	cbz	r0, 8013402 <uxr_serialize_INFO_Payload+0x92>
 80133de:	f104 010c 	add.w	r1, r4, #12
 80133e2:	4628      	mov	r0, r5
 80133e4:	f7ff f9d8 	bl	8012798 <uxr_serialize_ObjectVariant.part.0>
 80133e8:	4030      	ands	r0, r6
 80133ea:	b2c6      	uxtb	r6, r0
 80133ec:	e7e4      	b.n	80133b8 <uxr_serialize_INFO_Payload+0x48>
 80133ee:	f504 7108 	add.w	r1, r4, #544	; 0x220
 80133f2:	4628      	mov	r0, r5
 80133f4:	f7ff fdb8 	bl	8012f68 <uxr_serialize_ActivityInfoVariant>
 80133f8:	4006      	ands	r6, r0
 80133fa:	ea06 0007 	and.w	r0, r6, r7
 80133fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013402:	4606      	mov	r6, r0
 8013404:	e7d8      	b.n	80133b8 <uxr_serialize_INFO_Payload+0x48>
 8013406:	bf00      	nop

08013408 <uxr_serialize_READ_DATA_Payload>:
 8013408:	b570      	push	{r4, r5, r6, lr}
 801340a:	2202      	movs	r2, #2
 801340c:	4605      	mov	r5, r0
 801340e:	460e      	mov	r6, r1
 8013410:	f7fb fc78 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 8013414:	2202      	movs	r2, #2
 8013416:	4604      	mov	r4, r0
 8013418:	4628      	mov	r0, r5
 801341a:	18b1      	adds	r1, r6, r2
 801341c:	f7fb fc72 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 8013420:	4603      	mov	r3, r0
 8013422:	1d31      	adds	r1, r6, #4
 8013424:	4628      	mov	r0, r5
 8013426:	401c      	ands	r4, r3
 8013428:	f7ff fe5e 	bl	80130e8 <uxr_serialize_ReadSpecification>
 801342c:	b2e4      	uxtb	r4, r4
 801342e:	4020      	ands	r0, r4
 8013430:	bd70      	pop	{r4, r5, r6, pc}
 8013432:	bf00      	nop

08013434 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8013434:	b570      	push	{r4, r5, r6, lr}
 8013436:	2202      	movs	r2, #2
 8013438:	4605      	mov	r5, r0
 801343a:	460e      	mov	r6, r1
 801343c:	f7fb fc62 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 8013440:	2202      	movs	r2, #2
 8013442:	4604      	mov	r4, r0
 8013444:	4628      	mov	r0, r5
 8013446:	18b1      	adds	r1, r6, r2
 8013448:	f7fb fc5c 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 801344c:	4020      	ands	r0, r4
 801344e:	b2c0      	uxtb	r0, r0
 8013450:	bd70      	pop	{r4, r5, r6, pc}
 8013452:	bf00      	nop

08013454 <uxr_serialize_ACKNACK_Payload>:
 8013454:	b570      	push	{r4, r5, r6, lr}
 8013456:	460c      	mov	r4, r1
 8013458:	4605      	mov	r5, r0
 801345a:	460e      	mov	r6, r1
 801345c:	f834 1b02 	ldrh.w	r1, [r4], #2
 8013460:	f7fb fe20 	bl	800f0a4 <ucdr_serialize_uint16_t>
 8013464:	2202      	movs	r2, #2
 8013466:	4621      	mov	r1, r4
 8013468:	4604      	mov	r4, r0
 801346a:	4628      	mov	r0, r5
 801346c:	f7fb fc4a 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 8013470:	4603      	mov	r3, r0
 8013472:	7931      	ldrb	r1, [r6, #4]
 8013474:	4628      	mov	r0, r5
 8013476:	401c      	ands	r4, r3
 8013478:	f7fb fde8 	bl	800f04c <ucdr_serialize_uint8_t>
 801347c:	b2e4      	uxtb	r4, r4
 801347e:	4020      	ands	r0, r4
 8013480:	bd70      	pop	{r4, r5, r6, pc}
 8013482:	bf00      	nop

08013484 <uxr_deserialize_ACKNACK_Payload>:
 8013484:	b570      	push	{r4, r5, r6, lr}
 8013486:	460e      	mov	r6, r1
 8013488:	4605      	mov	r5, r0
 801348a:	f7fb ff0b 	bl	800f2a4 <ucdr_deserialize_uint16_t>
 801348e:	2202      	movs	r2, #2
 8013490:	4604      	mov	r4, r0
 8013492:	4628      	mov	r0, r5
 8013494:	18b1      	adds	r1, r6, r2
 8013496:	f7fb fc99 	bl	800edcc <ucdr_deserialize_array_uint8_t>
 801349a:	4603      	mov	r3, r0
 801349c:	1d31      	adds	r1, r6, #4
 801349e:	4628      	mov	r0, r5
 80134a0:	401c      	ands	r4, r3
 80134a2:	f7fb fde9 	bl	800f078 <ucdr_deserialize_uint8_t>
 80134a6:	b2e4      	uxtb	r4, r4
 80134a8:	4020      	ands	r0, r4
 80134aa:	bd70      	pop	{r4, r5, r6, pc}

080134ac <uxr_serialize_HEARTBEAT_Payload>:
 80134ac:	b570      	push	{r4, r5, r6, lr}
 80134ae:	460d      	mov	r5, r1
 80134b0:	4606      	mov	r6, r0
 80134b2:	8809      	ldrh	r1, [r1, #0]
 80134b4:	f7fb fdf6 	bl	800f0a4 <ucdr_serialize_uint16_t>
 80134b8:	8869      	ldrh	r1, [r5, #2]
 80134ba:	4604      	mov	r4, r0
 80134bc:	4630      	mov	r0, r6
 80134be:	f7fb fdf1 	bl	800f0a4 <ucdr_serialize_uint16_t>
 80134c2:	4603      	mov	r3, r0
 80134c4:	7929      	ldrb	r1, [r5, #4]
 80134c6:	4630      	mov	r0, r6
 80134c8:	401c      	ands	r4, r3
 80134ca:	f7fb fdbf 	bl	800f04c <ucdr_serialize_uint8_t>
 80134ce:	b2e4      	uxtb	r4, r4
 80134d0:	4020      	ands	r0, r4
 80134d2:	bd70      	pop	{r4, r5, r6, pc}

080134d4 <uxr_deserialize_HEARTBEAT_Payload>:
 80134d4:	b570      	push	{r4, r5, r6, lr}
 80134d6:	460e      	mov	r6, r1
 80134d8:	4605      	mov	r5, r0
 80134da:	f7fb fee3 	bl	800f2a4 <ucdr_deserialize_uint16_t>
 80134de:	4604      	mov	r4, r0
 80134e0:	1cb1      	adds	r1, r6, #2
 80134e2:	4628      	mov	r0, r5
 80134e4:	f7fb fede 	bl	800f2a4 <ucdr_deserialize_uint16_t>
 80134e8:	4603      	mov	r3, r0
 80134ea:	1d31      	adds	r1, r6, #4
 80134ec:	4628      	mov	r0, r5
 80134ee:	401c      	ands	r4, r3
 80134f0:	f7fb fdc2 	bl	800f078 <ucdr_deserialize_uint8_t>
 80134f4:	b2e4      	uxtb	r4, r4
 80134f6:	4020      	ands	r0, r4
 80134f8:	bd70      	pop	{r4, r5, r6, pc}
 80134fa:	bf00      	nop

080134fc <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80134fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013500:	460e      	mov	r6, r1
 8013502:	4605      	mov	r5, r0
 8013504:	f7fc fd60 	bl	800ffc8 <ucdr_deserialize_int32_t>
 8013508:	4607      	mov	r7, r0
 801350a:	1d31      	adds	r1, r6, #4
 801350c:	4628      	mov	r0, r5
 801350e:	f7fc f8e3 	bl	800f6d8 <ucdr_deserialize_uint32_t>
 8013512:	4680      	mov	r8, r0
 8013514:	f106 0108 	add.w	r1, r6, #8
 8013518:	4628      	mov	r0, r5
 801351a:	f7fc fd55 	bl	800ffc8 <ucdr_deserialize_int32_t>
 801351e:	ea07 0708 	and.w	r7, r7, r8
 8013522:	4604      	mov	r4, r0
 8013524:	f106 010c 	add.w	r1, r6, #12
 8013528:	4628      	mov	r0, r5
 801352a:	403c      	ands	r4, r7
 801352c:	f7fc f8d4 	bl	800f6d8 <ucdr_deserialize_uint32_t>
 8013530:	f106 0110 	add.w	r1, r6, #16
 8013534:	4004      	ands	r4, r0
 8013536:	4628      	mov	r0, r5
 8013538:	f7fc fd46 	bl	800ffc8 <ucdr_deserialize_int32_t>
 801353c:	4603      	mov	r3, r0
 801353e:	b2e4      	uxtb	r4, r4
 8013540:	4628      	mov	r0, r5
 8013542:	461d      	mov	r5, r3
 8013544:	f106 0114 	add.w	r1, r6, #20
 8013548:	f7fc f8c6 	bl	800f6d8 <ucdr_deserialize_uint32_t>
 801354c:	402c      	ands	r4, r5
 801354e:	4020      	ands	r0, r4
 8013550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013554 <uxr_serialize_SampleIdentity>:
 8013554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013558:	4604      	mov	r4, r0
 801355a:	460d      	mov	r5, r1
 801355c:	220c      	movs	r2, #12
 801355e:	f7fb fbd1 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 8013562:	2203      	movs	r2, #3
 8013564:	f105 010c 	add.w	r1, r5, #12
 8013568:	4607      	mov	r7, r0
 801356a:	4620      	mov	r0, r4
 801356c:	f7fb fbca 	bl	800ed04 <ucdr_serialize_array_uint8_t>
 8013570:	7be9      	ldrb	r1, [r5, #15]
 8013572:	4680      	mov	r8, r0
 8013574:	4620      	mov	r0, r4
 8013576:	f7fb fd69 	bl	800f04c <ucdr_serialize_uint8_t>
 801357a:	6929      	ldr	r1, [r5, #16]
 801357c:	4606      	mov	r6, r0
 801357e:	4620      	mov	r0, r4
 8013580:	f7fc fc8a 	bl	800fe98 <ucdr_serialize_int32_t>
 8013584:	ea07 0708 	and.w	r7, r7, r8
 8013588:	4603      	mov	r3, r0
 801358a:	4620      	mov	r0, r4
 801358c:	403e      	ands	r6, r7
 801358e:	6969      	ldr	r1, [r5, #20]
 8013590:	461c      	mov	r4, r3
 8013592:	f7fb ff71 	bl	800f478 <ucdr_serialize_uint32_t>
 8013596:	4034      	ands	r4, r6
 8013598:	4020      	ands	r0, r4
 801359a:	b2c0      	uxtb	r0, r0
 801359c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080135a0 <uxr_deserialize_SampleIdentity>:
 80135a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135a4:	4604      	mov	r4, r0
 80135a6:	460d      	mov	r5, r1
 80135a8:	220c      	movs	r2, #12
 80135aa:	f7fb fc0f 	bl	800edcc <ucdr_deserialize_array_uint8_t>
 80135ae:	2203      	movs	r2, #3
 80135b0:	f105 010c 	add.w	r1, r5, #12
 80135b4:	4607      	mov	r7, r0
 80135b6:	4620      	mov	r0, r4
 80135b8:	f7fb fc08 	bl	800edcc <ucdr_deserialize_array_uint8_t>
 80135bc:	f105 010f 	add.w	r1, r5, #15
 80135c0:	4680      	mov	r8, r0
 80135c2:	4620      	mov	r0, r4
 80135c4:	f7fb fd58 	bl	800f078 <ucdr_deserialize_uint8_t>
 80135c8:	f105 0110 	add.w	r1, r5, #16
 80135cc:	4606      	mov	r6, r0
 80135ce:	4620      	mov	r0, r4
 80135d0:	f7fc fcfa 	bl	800ffc8 <ucdr_deserialize_int32_t>
 80135d4:	ea07 0708 	and.w	r7, r7, r8
 80135d8:	4603      	mov	r3, r0
 80135da:	4620      	mov	r0, r4
 80135dc:	403e      	ands	r6, r7
 80135de:	f105 0114 	add.w	r1, r5, #20
 80135e2:	461c      	mov	r4, r3
 80135e4:	f7fc f878 	bl	800f6d8 <ucdr_deserialize_uint32_t>
 80135e8:	4034      	ands	r4, r6
 80135ea:	4020      	ands	r0, r4
 80135ec:	b2c0      	uxtb	r0, r0
 80135ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135f2:	bf00      	nop

080135f4 <racs_services__srv__Control_Event__get_type_description.part.0>:
 80135f4:	b510      	push	{r4, lr}
 80135f6:	2000      	movs	r0, #0
 80135f8:	4c13      	ldr	r4, [pc, #76]	; (8013648 <racs_services__srv__Control_Event__get_type_description.part.0+0x54>)
 80135fa:	f006 f8f1 	bl	80197e0 <builtin_interfaces__msg__Time__get_type_description>
 80135fe:	300c      	adds	r0, #12
 8013600:	4b12      	ldr	r3, [pc, #72]	; (801364c <racs_services__srv__Control_Event__get_type_description.part.0+0x58>)
 8013602:	c807      	ldmia	r0, {r0, r1, r2}
 8013604:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013608:	7823      	ldrb	r3, [r4, #0]
 801360a:	b90b      	cbnz	r3, 8013610 <racs_services__srv__Control_Event__get_type_description.part.0+0x1c>
 801360c:	2301      	movs	r3, #1
 801360e:	7023      	strb	r3, [r4, #0]
 8013610:	4a0f      	ldr	r2, [pc, #60]	; (8013650 <racs_services__srv__Control_Event__get_type_description.part.0+0x5c>)
 8013612:	4b10      	ldr	r3, [pc, #64]	; (8013654 <racs_services__srv__Control_Event__get_type_description.part.0+0x60>)
 8013614:	4c10      	ldr	r4, [pc, #64]	; (8013658 <racs_services__srv__Control_Event__get_type_description.part.0+0x64>)
 8013616:	ca07      	ldmia	r2, {r0, r1, r2}
 8013618:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801361c:	7823      	ldrb	r3, [r4, #0]
 801361e:	b90b      	cbnz	r3, 8013624 <racs_services__srv__Control_Event__get_type_description.part.0+0x30>
 8013620:	2301      	movs	r3, #1
 8013622:	7023      	strb	r3, [r4, #0]
 8013624:	4b0d      	ldr	r3, [pc, #52]	; (801365c <racs_services__srv__Control_Event__get_type_description.part.0+0x68>)
 8013626:	4c0e      	ldr	r4, [pc, #56]	; (8013660 <racs_services__srv__Control_Event__get_type_description.part.0+0x6c>)
 8013628:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801362c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013630:	2000      	movs	r0, #0
 8013632:	3418      	adds	r4, #24
 8013634:	f006 f874 	bl	8019720 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8013638:	300c      	adds	r0, #12
 801363a:	4b0a      	ldr	r3, [pc, #40]	; (8013664 <racs_services__srv__Control_Event__get_type_description.part.0+0x70>)
 801363c:	c807      	ldmia	r0, {r0, r1, r2}
 801363e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013642:	2201      	movs	r2, #1
 8013644:	701a      	strb	r2, [r3, #0]
 8013646:	bd10      	pop	{r4, pc}
 8013648:	200103c0 	.word	0x200103c0
 801364c:	20000dd0 	.word	0x20000dd0
 8013650:	0801e6ac 	.word	0x0801e6ac
 8013654:	20000de8 	.word	0x20000de8
 8013658:	200103be 	.word	0x200103be
 801365c:	0801e688 	.word	0x0801e688
 8013660:	20000e00 	.word	0x20000e00
 8013664:	200103bd 	.word	0x200103bd

08013668 <racs_services__srv__Control__get_type_hash>:
 8013668:	4800      	ldr	r0, [pc, #0]	; (801366c <racs_services__srv__Control__get_type_hash+0x4>)
 801366a:	4770      	bx	lr
 801366c:	20000ca0 	.word	0x20000ca0

08013670 <racs_services__srv__Control_Request__get_type_hash>:
 8013670:	4800      	ldr	r0, [pc, #0]	; (8013674 <racs_services__srv__Control_Request__get_type_hash+0x4>)
 8013672:	4770      	bx	lr
 8013674:	20000c7c 	.word	0x20000c7c

08013678 <racs_services__srv__Control_Response__get_type_hash>:
 8013678:	4800      	ldr	r0, [pc, #0]	; (801367c <racs_services__srv__Control_Response__get_type_hash+0x4>)
 801367a:	4770      	bx	lr
 801367c:	20000c58 	.word	0x20000c58

08013680 <racs_services__srv__Control_Event__get_type_hash>:
 8013680:	4800      	ldr	r0, [pc, #0]	; (8013684 <racs_services__srv__Control_Event__get_type_hash+0x4>)
 8013682:	4770      	bx	lr
 8013684:	20000c34 	.word	0x20000c34

08013688 <racs_services__srv__Control__get_type_description>:
 8013688:	b538      	push	{r3, r4, r5, lr}
 801368a:	4d1c      	ldr	r5, [pc, #112]	; (80136fc <racs_services__srv__Control__get_type_description+0x74>)
 801368c:	7828      	ldrb	r0, [r5, #0]
 801368e:	b108      	cbz	r0, 8013694 <racs_services__srv__Control__get_type_description+0xc>
 8013690:	481b      	ldr	r0, [pc, #108]	; (8013700 <racs_services__srv__Control__get_type_description+0x78>)
 8013692:	bd38      	pop	{r3, r4, r5, pc}
 8013694:	f006 f8a4 	bl	80197e0 <builtin_interfaces__msg__Time__get_type_description>
 8013698:	300c      	adds	r0, #12
 801369a:	4b1a      	ldr	r3, [pc, #104]	; (8013704 <racs_services__srv__Control__get_type_description+0x7c>)
 801369c:	c807      	ldmia	r0, {r0, r1, r2}
 801369e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80136a2:	4b19      	ldr	r3, [pc, #100]	; (8013708 <racs_services__srv__Control__get_type_description+0x80>)
 80136a4:	781b      	ldrb	r3, [r3, #0]
 80136a6:	b32b      	cbz	r3, 80136f4 <racs_services__srv__Control__get_type_description+0x6c>
 80136a8:	4a18      	ldr	r2, [pc, #96]	; (801370c <racs_services__srv__Control__get_type_description+0x84>)
 80136aa:	4b19      	ldr	r3, [pc, #100]	; (8013710 <racs_services__srv__Control__get_type_description+0x88>)
 80136ac:	4c19      	ldr	r4, [pc, #100]	; (8013714 <racs_services__srv__Control__get_type_description+0x8c>)
 80136ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80136b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80136b4:	7823      	ldrb	r3, [r4, #0]
 80136b6:	b90b      	cbnz	r3, 80136bc <racs_services__srv__Control__get_type_description+0x34>
 80136b8:	2301      	movs	r3, #1
 80136ba:	7023      	strb	r3, [r4, #0]
 80136bc:	4a16      	ldr	r2, [pc, #88]	; (8013718 <racs_services__srv__Control__get_type_description+0x90>)
 80136be:	4b17      	ldr	r3, [pc, #92]	; (801371c <racs_services__srv__Control__get_type_description+0x94>)
 80136c0:	4c17      	ldr	r4, [pc, #92]	; (8013720 <racs_services__srv__Control__get_type_description+0x98>)
 80136c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80136c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80136c8:	7823      	ldrb	r3, [r4, #0]
 80136ca:	b90b      	cbnz	r3, 80136d0 <racs_services__srv__Control__get_type_description+0x48>
 80136cc:	2301      	movs	r3, #1
 80136ce:	7023      	strb	r3, [r4, #0]
 80136d0:	4b14      	ldr	r3, [pc, #80]	; (8013724 <racs_services__srv__Control__get_type_description+0x9c>)
 80136d2:	4c15      	ldr	r4, [pc, #84]	; (8013728 <racs_services__srv__Control__get_type_description+0xa0>)
 80136d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80136d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80136dc:	2000      	movs	r0, #0
 80136de:	3418      	adds	r4, #24
 80136e0:	f006 f81e 	bl	8019720 <service_msgs__msg__ServiceEventInfo__get_type_description>
 80136e4:	300c      	adds	r0, #12
 80136e6:	2301      	movs	r3, #1
 80136e8:	c807      	ldmia	r0, {r0, r1, r2}
 80136ea:	702b      	strb	r3, [r5, #0]
 80136ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80136f0:	4803      	ldr	r0, [pc, #12]	; (8013700 <racs_services__srv__Control__get_type_description+0x78>)
 80136f2:	bd38      	pop	{r3, r4, r5, pc}
 80136f4:	f7ff ff7e 	bl	80135f4 <racs_services__srv__Control_Event__get_type_description.part.0>
 80136f8:	e7d6      	b.n	80136a8 <racs_services__srv__Control__get_type_description+0x20>
 80136fa:	bf00      	nop
 80136fc:	200103c1 	.word	0x200103c1
 8013700:	0801e6c4 	.word	0x0801e6c4
 8013704:	200010f8 	.word	0x200010f8
 8013708:	200103bd 	.word	0x200103bd
 801370c:	0801e664 	.word	0x0801e664
 8013710:	20001110 	.word	0x20001110
 8013714:	200103c0 	.word	0x200103c0
 8013718:	0801e6ac 	.word	0x0801e6ac
 801371c:	20001128 	.word	0x20001128
 8013720:	200103be 	.word	0x200103be
 8013724:	0801e688 	.word	0x0801e688
 8013728:	20001140 	.word	0x20001140

0801372c <racs_services__srv__Control_Request__get_type_description>:
 801372c:	4b03      	ldr	r3, [pc, #12]	; (801373c <racs_services__srv__Control_Request__get_type_description+0x10>)
 801372e:	781a      	ldrb	r2, [r3, #0]
 8013730:	b90a      	cbnz	r2, 8013736 <racs_services__srv__Control_Request__get_type_description+0xa>
 8013732:	2201      	movs	r2, #1
 8013734:	701a      	strb	r2, [r3, #0]
 8013736:	4802      	ldr	r0, [pc, #8]	; (8013740 <racs_services__srv__Control_Request__get_type_description+0x14>)
 8013738:	4770      	bx	lr
 801373a:	bf00      	nop
 801373c:	200103c0 	.word	0x200103c0
 8013740:	0801e6a0 	.word	0x0801e6a0

08013744 <racs_services__srv__Control_Response__get_type_description>:
 8013744:	4b03      	ldr	r3, [pc, #12]	; (8013754 <racs_services__srv__Control_Response__get_type_description+0x10>)
 8013746:	781a      	ldrb	r2, [r3, #0]
 8013748:	b90a      	cbnz	r2, 801374e <racs_services__srv__Control_Response__get_type_description+0xa>
 801374a:	2201      	movs	r2, #1
 801374c:	701a      	strb	r2, [r3, #0]
 801374e:	4802      	ldr	r0, [pc, #8]	; (8013758 <racs_services__srv__Control_Response__get_type_description+0x14>)
 8013750:	4770      	bx	lr
 8013752:	bf00      	nop
 8013754:	200103be 	.word	0x200103be
 8013758:	0801e67c 	.word	0x0801e67c

0801375c <racs_services__srv__Control_Event__get_type_description>:
 801375c:	b508      	push	{r3, lr}
 801375e:	4b04      	ldr	r3, [pc, #16]	; (8013770 <racs_services__srv__Control_Event__get_type_description+0x14>)
 8013760:	781b      	ldrb	r3, [r3, #0]
 8013762:	b10b      	cbz	r3, 8013768 <racs_services__srv__Control_Event__get_type_description+0xc>
 8013764:	4803      	ldr	r0, [pc, #12]	; (8013774 <racs_services__srv__Control_Event__get_type_description+0x18>)
 8013766:	bd08      	pop	{r3, pc}
 8013768:	f7ff ff44 	bl	80135f4 <racs_services__srv__Control_Event__get_type_description.part.0>
 801376c:	4801      	ldr	r0, [pc, #4]	; (8013774 <racs_services__srv__Control_Event__get_type_description+0x18>)
 801376e:	bd08      	pop	{r3, pc}
 8013770:	200103bd 	.word	0x200103bd
 8013774:	0801e658 	.word	0x0801e658

08013778 <racs_services__srv__Control__get_type_description_sources>:
 8013778:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801377c:	4b2c      	ldr	r3, [pc, #176]	; (8013830 <racs_services__srv__Control__get_type_description_sources+0xb8>)
 801377e:	f893 9000 	ldrb.w	r9, [r3]
 8013782:	f1b9 0f00 	cmp.w	r9, #0
 8013786:	d002      	beq.n	801378e <racs_services__srv__Control__get_type_description_sources+0x16>
 8013788:	482a      	ldr	r0, [pc, #168]	; (8013834 <racs_services__srv__Control__get_type_description_sources+0xbc>)
 801378a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801378e:	4d2a      	ldr	r5, [pc, #168]	; (8013838 <racs_services__srv__Control__get_type_description_sources+0xc0>)
 8013790:	4c2a      	ldr	r4, [pc, #168]	; (801383c <racs_services__srv__Control__get_type_description_sources+0xc4>)
 8013792:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8013844 <racs_services__srv__Control__get_type_description_sources+0xcc>
 8013796:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8013848 <racs_services__srv__Control__get_type_description_sources+0xd0>
 801379a:	4e29      	ldr	r6, [pc, #164]	; (8013840 <racs_services__srv__Control__get_type_description_sources+0xc8>)
 801379c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801379e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80137a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80137a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80137a4:	682b      	ldr	r3, [r5, #0]
 80137a6:	4625      	mov	r5, r4
 80137a8:	4648      	mov	r0, r9
 80137aa:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 80137ae:	f845 3b04 	str.w	r3, [r5], #4
 80137b2:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 80137b6:	f006 f81f 	bl	80197f8 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 80137ba:	4684      	mov	ip, r0
 80137bc:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 80137c0:	3494      	adds	r4, #148	; 0x94
 80137c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80137c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80137c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80137cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80137ce:	f8dc 3000 	ldr.w	r3, [ip]
 80137d2:	602b      	str	r3, [r5, #0]
 80137d4:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80137d8:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 80137dc:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 80137e0:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 80137e4:	f8db 3000 	ldr.w	r3, [fp]
 80137e8:	f8ca 3000 	str.w	r3, [sl]
 80137ec:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80137f0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80137f2:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80137f6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80137f8:	f8d8 3000 	ldr.w	r3, [r8]
 80137fc:	603b      	str	r3, [r7, #0]
 80137fe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013800:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013804:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013806:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801380a:	6833      	ldr	r3, [r6, #0]
 801380c:	4648      	mov	r0, r9
 801380e:	f8ce 3000 	str.w	r3, [lr]
 8013812:	f005 ff9d 	bl	8019750 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 8013816:	2301      	movs	r3, #1
 8013818:	4a05      	ldr	r2, [pc, #20]	; (8013830 <racs_services__srv__Control__get_type_description_sources+0xb8>)
 801381a:	4605      	mov	r5, r0
 801381c:	7013      	strb	r3, [r2, #0]
 801381e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013820:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013826:	682b      	ldr	r3, [r5, #0]
 8013828:	4802      	ldr	r0, [pc, #8]	; (8013834 <racs_services__srv__Control__get_type_description_sources+0xbc>)
 801382a:	6023      	str	r3, [r4, #0]
 801382c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013830:	200103bc 	.word	0x200103bc
 8013834:	0801e79c 	.word	0x0801e79c
 8013838:	0801e754 	.word	0x0801e754
 801383c:	20010478 	.word	0x20010478
 8013840:	0801e70c 	.word	0x0801e70c
 8013844:	0801e6e8 	.word	0x0801e6e8
 8013848:	0801e730 	.word	0x0801e730

0801384c <racs_services__srv__Control_Request__get_type_description_sources>:
 801384c:	4b09      	ldr	r3, [pc, #36]	; (8013874 <racs_services__srv__Control_Request__get_type_description_sources+0x28>)
 801384e:	781a      	ldrb	r2, [r3, #0]
 8013850:	b96a      	cbnz	r2, 801386e <racs_services__srv__Control_Request__get_type_description_sources+0x22>
 8013852:	2201      	movs	r2, #1
 8013854:	b430      	push	{r4, r5}
 8013856:	4d08      	ldr	r5, [pc, #32]	; (8013878 <racs_services__srv__Control_Request__get_type_description_sources+0x2c>)
 8013858:	4c08      	ldr	r4, [pc, #32]	; (801387c <racs_services__srv__Control_Request__get_type_description_sources+0x30>)
 801385a:	701a      	strb	r2, [r3, #0]
 801385c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801385e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013864:	682b      	ldr	r3, [r5, #0]
 8013866:	4806      	ldr	r0, [pc, #24]	; (8013880 <racs_services__srv__Control_Request__get_type_description_sources+0x34>)
 8013868:	6023      	str	r3, [r4, #0]
 801386a:	bc30      	pop	{r4, r5}
 801386c:	4770      	bx	lr
 801386e:	4804      	ldr	r0, [pc, #16]	; (8013880 <racs_services__srv__Control_Request__get_type_description_sources+0x34>)
 8013870:	4770      	bx	lr
 8013872:	bf00      	nop
 8013874:	200103c3 	.word	0x200103c3
 8013878:	0801e730 	.word	0x0801e730
 801387c:	20010574 	.word	0x20010574
 8013880:	0801e790 	.word	0x0801e790

08013884 <racs_services__srv__Control_Response__get_type_description_sources>:
 8013884:	4b09      	ldr	r3, [pc, #36]	; (80138ac <racs_services__srv__Control_Response__get_type_description_sources+0x28>)
 8013886:	781a      	ldrb	r2, [r3, #0]
 8013888:	b96a      	cbnz	r2, 80138a6 <racs_services__srv__Control_Response__get_type_description_sources+0x22>
 801388a:	2201      	movs	r2, #1
 801388c:	b430      	push	{r4, r5}
 801388e:	4d08      	ldr	r5, [pc, #32]	; (80138b0 <racs_services__srv__Control_Response__get_type_description_sources+0x2c>)
 8013890:	4c08      	ldr	r4, [pc, #32]	; (80138b4 <racs_services__srv__Control_Response__get_type_description_sources+0x30>)
 8013892:	701a      	strb	r2, [r3, #0]
 8013894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801389a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801389c:	682b      	ldr	r3, [r5, #0]
 801389e:	4806      	ldr	r0, [pc, #24]	; (80138b8 <racs_services__srv__Control_Response__get_type_description_sources+0x34>)
 80138a0:	6023      	str	r3, [r4, #0]
 80138a2:	bc30      	pop	{r4, r5}
 80138a4:	4770      	bx	lr
 80138a6:	4804      	ldr	r0, [pc, #16]	; (80138b8 <racs_services__srv__Control_Response__get_type_description_sources+0x34>)
 80138a8:	4770      	bx	lr
 80138aa:	bf00      	nop
 80138ac:	200103c2 	.word	0x200103c2
 80138b0:	0801e70c 	.word	0x0801e70c
 80138b4:	20010550 	.word	0x20010550
 80138b8:	0801e784 	.word	0x0801e784

080138bc <racs_services__srv__Control_Event__get_type_description_sources>:
 80138bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138c0:	4e27      	ldr	r6, [pc, #156]	; (8013960 <racs_services__srv__Control_Event__get_type_description_sources+0xa4>)
 80138c2:	f896 8000 	ldrb.w	r8, [r6]
 80138c6:	f1b8 0f00 	cmp.w	r8, #0
 80138ca:	d002      	beq.n	80138d2 <racs_services__srv__Control_Event__get_type_description_sources+0x16>
 80138cc:	4825      	ldr	r0, [pc, #148]	; (8013964 <racs_services__srv__Control_Event__get_type_description_sources+0xa8>)
 80138ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138d2:	4d25      	ldr	r5, [pc, #148]	; (8013968 <racs_services__srv__Control_Event__get_type_description_sources+0xac>)
 80138d4:	4c25      	ldr	r4, [pc, #148]	; (801396c <racs_services__srv__Control_Event__get_type_description_sources+0xb0>)
 80138d6:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8013974 <racs_services__srv__Control_Event__get_type_description_sources+0xb8>
 80138da:	4f25      	ldr	r7, [pc, #148]	; (8013970 <racs_services__srv__Control_Event__get_type_description_sources+0xb4>)
 80138dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80138de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80138e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80138e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80138e4:	682b      	ldr	r3, [r5, #0]
 80138e6:	4625      	mov	r5, r4
 80138e8:	4640      	mov	r0, r8
 80138ea:	f104 0928 	add.w	r9, r4, #40	; 0x28
 80138ee:	f845 3b04 	str.w	r3, [r5], #4
 80138f2:	f005 ff81 	bl	80197f8 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 80138f6:	4684      	mov	ip, r0
 80138f8:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 80138fc:	3470      	adds	r4, #112	; 0x70
 80138fe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013902:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013904:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801390a:	f8dc 3000 	ldr.w	r3, [ip]
 801390e:	602b      	str	r3, [r5, #0]
 8013910:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8013914:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8013918:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 801391c:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8013920:	f8da 3000 	ldr.w	r3, [sl]
 8013924:	f8c9 3000 	str.w	r3, [r9]
 8013928:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801392a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801392e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8013930:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013934:	683b      	ldr	r3, [r7, #0]
 8013936:	4640      	mov	r0, r8
 8013938:	f8ce 3000 	str.w	r3, [lr]
 801393c:	f005 ff08 	bl	8019750 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 8013940:	2301      	movs	r3, #1
 8013942:	4684      	mov	ip, r0
 8013944:	7033      	strb	r3, [r6, #0]
 8013946:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801394a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801394c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013950:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013952:	f8dc 3000 	ldr.w	r3, [ip]
 8013956:	4803      	ldr	r0, [pc, #12]	; (8013964 <racs_services__srv__Control_Event__get_type_description_sources+0xa8>)
 8013958:	6023      	str	r3, [r4, #0]
 801395a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801395e:	bf00      	nop
 8013960:	200103bf 	.word	0x200103bf
 8013964:	0801e778 	.word	0x0801e778
 8013968:	0801e6e8 	.word	0x0801e6e8
 801396c:	200103c4 	.word	0x200103c4
 8013970:	0801e70c 	.word	0x0801e70c
 8013974:	0801e730 	.word	0x0801e730

08013978 <racs_services__srv__Control_Event__fini.part.0>:
 8013978:	b510      	push	{r4, lr}
 801397a:	b086      	sub	sp, #24
 801397c:	4604      	mov	r4, r0
 801397e:	f005 ff25 	bl	80197cc <service_msgs__msg__ServiceEventInfo__fini>
 8013982:	a801      	add	r0, sp, #4
 8013984:	f7fa f912 	bl	800dbac <rcutils_get_default_allocator>
 8013988:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801398a:	b130      	cbz	r0, 801399a <racs_services__srv__Control_Event__fini.part.0+0x22>
 801398c:	9b02      	ldr	r3, [sp, #8]
 801398e:	9905      	ldr	r1, [sp, #20]
 8013990:	4798      	blx	r3
 8013992:	2300      	movs	r3, #0
 8013994:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8013998:	6323      	str	r3, [r4, #48]	; 0x30
 801399a:	a801      	add	r0, sp, #4
 801399c:	f7fa f906 	bl	800dbac <rcutils_get_default_allocator>
 80139a0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80139a2:	b130      	cbz	r0, 80139b2 <racs_services__srv__Control_Event__fini.part.0+0x3a>
 80139a4:	9b02      	ldr	r3, [sp, #8]
 80139a6:	9905      	ldr	r1, [sp, #20]
 80139a8:	4798      	blx	r3
 80139aa:	2300      	movs	r3, #0
 80139ac:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80139b0:	63e3      	str	r3, [r4, #60]	; 0x3c
 80139b2:	b006      	add	sp, #24
 80139b4:	bd10      	pop	{r4, pc}
 80139b6:	bf00      	nop

080139b8 <racs_services__srv__Control_Request__init>:
 80139b8:	3800      	subs	r0, #0
 80139ba:	bf18      	it	ne
 80139bc:	2001      	movne	r0, #1
 80139be:	4770      	bx	lr

080139c0 <racs_services__srv__Control_Request__fini>:
 80139c0:	4770      	bx	lr
 80139c2:	bf00      	nop

080139c4 <racs_services__srv__Control_Request__copy>:
 80139c4:	b168      	cbz	r0, 80139e2 <racs_services__srv__Control_Request__copy+0x1e>
 80139c6:	b161      	cbz	r1, 80139e2 <racs_services__srv__Control_Request__copy+0x1e>
 80139c8:	220c      	movs	r2, #12
 80139ca:	b508      	push	{r3, lr}
 80139cc:	4603      	mov	r3, r0
 80139ce:	4608      	mov	r0, r1
 80139d0:	f833 1b02 	ldrh.w	r1, [r3], #2
 80139d4:	f820 1b02 	strh.w	r1, [r0], #2
 80139d8:	4619      	mov	r1, r3
 80139da:	f008 fe51 	bl	801c680 <memmove>
 80139de:	2001      	movs	r0, #1
 80139e0:	bd08      	pop	{r3, pc}
 80139e2:	2000      	movs	r0, #0
 80139e4:	4770      	bx	lr
 80139e6:	bf00      	nop

080139e8 <racs_services__srv__Control_Request__Sequence__init>:
 80139e8:	b530      	push	{r4, r5, lr}
 80139ea:	4604      	mov	r4, r0
 80139ec:	b087      	sub	sp, #28
 80139ee:	b148      	cbz	r0, 8013a04 <racs_services__srv__Control_Request__Sequence__init+0x1c>
 80139f0:	460d      	mov	r5, r1
 80139f2:	a801      	add	r0, sp, #4
 80139f4:	f7fa f8da 	bl	800dbac <rcutils_get_default_allocator>
 80139f8:	b935      	cbnz	r5, 8013a08 <racs_services__srv__Control_Request__Sequence__init+0x20>
 80139fa:	462b      	mov	r3, r5
 80139fc:	2001      	movs	r0, #1
 80139fe:	60a5      	str	r5, [r4, #8]
 8013a00:	e9c4 3500 	strd	r3, r5, [r4]
 8013a04:	b007      	add	sp, #28
 8013a06:	bd30      	pop	{r4, r5, pc}
 8013a08:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013a0c:	210e      	movs	r1, #14
 8013a0e:	4628      	mov	r0, r5
 8013a10:	4798      	blx	r3
 8013a12:	4603      	mov	r3, r0
 8013a14:	2800      	cmp	r0, #0
 8013a16:	d1f1      	bne.n	80139fc <racs_services__srv__Control_Request__Sequence__init+0x14>
 8013a18:	e7f4      	b.n	8013a04 <racs_services__srv__Control_Request__Sequence__init+0x1c>
 8013a1a:	bf00      	nop

08013a1c <racs_services__srv__Control_Request__Sequence__fini>:
 8013a1c:	b180      	cbz	r0, 8013a40 <racs_services__srv__Control_Request__Sequence__fini+0x24>
 8013a1e:	b510      	push	{r4, lr}
 8013a20:	b086      	sub	sp, #24
 8013a22:	4604      	mov	r4, r0
 8013a24:	a801      	add	r0, sp, #4
 8013a26:	f7fa f8c1 	bl	800dbac <rcutils_get_default_allocator>
 8013a2a:	6820      	ldr	r0, [r4, #0]
 8013a2c:	b130      	cbz	r0, 8013a3c <racs_services__srv__Control_Request__Sequence__fini+0x20>
 8013a2e:	9b02      	ldr	r3, [sp, #8]
 8013a30:	9905      	ldr	r1, [sp, #20]
 8013a32:	4798      	blx	r3
 8013a34:	2300      	movs	r3, #0
 8013a36:	e9c4 3300 	strd	r3, r3, [r4]
 8013a3a:	60a3      	str	r3, [r4, #8]
 8013a3c:	b006      	add	sp, #24
 8013a3e:	bd10      	pop	{r4, pc}
 8013a40:	4770      	bx	lr
 8013a42:	bf00      	nop

08013a44 <racs_services__srv__Control_Response__init>:
 8013a44:	3800      	subs	r0, #0
 8013a46:	bf18      	it	ne
 8013a48:	2001      	movne	r0, #1
 8013a4a:	4770      	bx	lr

08013a4c <racs_services__srv__Control_Response__fini>:
 8013a4c:	4770      	bx	lr
 8013a4e:	bf00      	nop

08013a50 <racs_services__srv__Control_Response__copy>:
 8013a50:	b120      	cbz	r0, 8013a5c <racs_services__srv__Control_Response__copy+0xc>
 8013a52:	b119      	cbz	r1, 8013a5c <racs_services__srv__Control_Response__copy+0xc>
 8013a54:	7803      	ldrb	r3, [r0, #0]
 8013a56:	2001      	movs	r0, #1
 8013a58:	700b      	strb	r3, [r1, #0]
 8013a5a:	4770      	bx	lr
 8013a5c:	2000      	movs	r0, #0
 8013a5e:	4770      	bx	lr

08013a60 <racs_services__srv__Control_Response__Sequence__init>:
 8013a60:	b530      	push	{r4, r5, lr}
 8013a62:	4604      	mov	r4, r0
 8013a64:	b087      	sub	sp, #28
 8013a66:	b148      	cbz	r0, 8013a7c <racs_services__srv__Control_Response__Sequence__init+0x1c>
 8013a68:	460d      	mov	r5, r1
 8013a6a:	a801      	add	r0, sp, #4
 8013a6c:	f7fa f89e 	bl	800dbac <rcutils_get_default_allocator>
 8013a70:	b935      	cbnz	r5, 8013a80 <racs_services__srv__Control_Response__Sequence__init+0x20>
 8013a72:	462b      	mov	r3, r5
 8013a74:	2001      	movs	r0, #1
 8013a76:	60a5      	str	r5, [r4, #8]
 8013a78:	e9c4 3500 	strd	r3, r5, [r4]
 8013a7c:	b007      	add	sp, #28
 8013a7e:	bd30      	pop	{r4, r5, pc}
 8013a80:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013a84:	2101      	movs	r1, #1
 8013a86:	4628      	mov	r0, r5
 8013a88:	4798      	blx	r3
 8013a8a:	4603      	mov	r3, r0
 8013a8c:	2800      	cmp	r0, #0
 8013a8e:	d1f1      	bne.n	8013a74 <racs_services__srv__Control_Response__Sequence__init+0x14>
 8013a90:	e7f4      	b.n	8013a7c <racs_services__srv__Control_Response__Sequence__init+0x1c>
 8013a92:	bf00      	nop

08013a94 <racs_services__srv__Control_Response__Sequence__fini>:
 8013a94:	b180      	cbz	r0, 8013ab8 <racs_services__srv__Control_Response__Sequence__fini+0x24>
 8013a96:	b510      	push	{r4, lr}
 8013a98:	b086      	sub	sp, #24
 8013a9a:	4604      	mov	r4, r0
 8013a9c:	a801      	add	r0, sp, #4
 8013a9e:	f7fa f885 	bl	800dbac <rcutils_get_default_allocator>
 8013aa2:	6820      	ldr	r0, [r4, #0]
 8013aa4:	b130      	cbz	r0, 8013ab4 <racs_services__srv__Control_Response__Sequence__fini+0x20>
 8013aa6:	9b02      	ldr	r3, [sp, #8]
 8013aa8:	9905      	ldr	r1, [sp, #20]
 8013aaa:	4798      	blx	r3
 8013aac:	2300      	movs	r3, #0
 8013aae:	e9c4 3300 	strd	r3, r3, [r4]
 8013ab2:	60a3      	str	r3, [r4, #8]
 8013ab4:	b006      	add	sp, #24
 8013ab6:	bd10      	pop	{r4, pc}
 8013ab8:	4770      	bx	lr
 8013aba:	bf00      	nop

08013abc <racs_services__srv__Control_Event__init>:
 8013abc:	b570      	push	{r4, r5, r6, lr}
 8013abe:	4604      	mov	r4, r0
 8013ac0:	b086      	sub	sp, #24
 8013ac2:	b1c8      	cbz	r0, 8013af8 <racs_services__srv__Control_Event__init+0x3c>
 8013ac4:	f005 fe70 	bl	80197a8 <service_msgs__msg__ServiceEventInfo__init>
 8013ac8:	4605      	mov	r5, r0
 8013aca:	b178      	cbz	r0, 8013aec <racs_services__srv__Control_Event__init+0x30>
 8013acc:	2600      	movs	r6, #0
 8013ace:	a801      	add	r0, sp, #4
 8013ad0:	f7fa f86c 	bl	800dbac <rcutils_get_default_allocator>
 8013ad4:	a801      	add	r0, sp, #4
 8013ad6:	6326      	str	r6, [r4, #48]	; 0x30
 8013ad8:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
 8013adc:	f7fa f866 	bl	800dbac <rcutils_get_default_allocator>
 8013ae0:	4628      	mov	r0, r5
 8013ae2:	63e6      	str	r6, [r4, #60]	; 0x3c
 8013ae4:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
 8013ae8:	b006      	add	sp, #24
 8013aea:	bd70      	pop	{r4, r5, r6, pc}
 8013aec:	4620      	mov	r0, r4
 8013aee:	f7ff ff43 	bl	8013978 <racs_services__srv__Control_Event__fini.part.0>
 8013af2:	4628      	mov	r0, r5
 8013af4:	b006      	add	sp, #24
 8013af6:	bd70      	pop	{r4, r5, r6, pc}
 8013af8:	4605      	mov	r5, r0
 8013afa:	4628      	mov	r0, r5
 8013afc:	b006      	add	sp, #24
 8013afe:	bd70      	pop	{r4, r5, r6, pc}

08013b00 <racs_services__srv__Control_Event__fini>:
 8013b00:	b1f0      	cbz	r0, 8013b40 <racs_services__srv__Control_Event__fini+0x40>
 8013b02:	b510      	push	{r4, lr}
 8013b04:	b086      	sub	sp, #24
 8013b06:	4604      	mov	r4, r0
 8013b08:	f005 fe60 	bl	80197cc <service_msgs__msg__ServiceEventInfo__fini>
 8013b0c:	a801      	add	r0, sp, #4
 8013b0e:	f7fa f84d 	bl	800dbac <rcutils_get_default_allocator>
 8013b12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8013b14:	b130      	cbz	r0, 8013b24 <racs_services__srv__Control_Event__fini+0x24>
 8013b16:	9b02      	ldr	r3, [sp, #8]
 8013b18:	9905      	ldr	r1, [sp, #20]
 8013b1a:	4798      	blx	r3
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8013b22:	6323      	str	r3, [r4, #48]	; 0x30
 8013b24:	a801      	add	r0, sp, #4
 8013b26:	f7fa f841 	bl	800dbac <rcutils_get_default_allocator>
 8013b2a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8013b2c:	b130      	cbz	r0, 8013b3c <racs_services__srv__Control_Event__fini+0x3c>
 8013b2e:	9b02      	ldr	r3, [sp, #8]
 8013b30:	9905      	ldr	r1, [sp, #20]
 8013b32:	4798      	blx	r3
 8013b34:	2300      	movs	r3, #0
 8013b36:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8013b3a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8013b3c:	b006      	add	sp, #24
 8013b3e:	bd10      	pop	{r4, pc}
 8013b40:	4770      	bx	lr
 8013b42:	bf00      	nop

08013b44 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control>:
 8013b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b48:	2900      	cmp	r1, #0
 8013b4a:	d04d      	beq.n	8013be8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0xa4>
 8013b4c:	4605      	mov	r5, r0
 8013b4e:	2800      	cmp	r0, #0
 8013b50:	d04a      	beq.n	8013be8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0xa4>
 8013b52:	460e      	mov	r6, r1
 8013b54:	4698      	mov	r8, r3
 8013b56:	2040      	movs	r0, #64	; 0x40
 8013b58:	680b      	ldr	r3, [r1, #0]
 8013b5a:	6909      	ldr	r1, [r1, #16]
 8013b5c:	4617      	mov	r7, r2
 8013b5e:	4798      	blx	r3
 8013b60:	4604      	mov	r4, r0
 8013b62:	f7ff ffab 	bl	8013abc <racs_services__srv__Control_Event__init>
 8013b66:	4684      	mov	ip, r0
 8013b68:	b370      	cbz	r0, 8013bc8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x84>
 8013b6a:	782b      	ldrb	r3, [r5, #0]
 8013b6c:	7023      	strb	r3, [r4, #0]
 8013b6e:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8013b72:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8013b76:	e9c4 2301 	strd	r2, r3, [r4, #4]
 8013b7a:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8013b7e:	68e8      	ldr	r0, [r5, #12]
 8013b80:	6929      	ldr	r1, [r5, #16]
 8013b82:	696a      	ldr	r2, [r5, #20]
 8013b84:	69ab      	ldr	r3, [r5, #24]
 8013b86:	60e0      	str	r0, [r4, #12]
 8013b88:	6121      	str	r1, [r4, #16]
 8013b8a:	6162      	str	r2, [r4, #20]
 8013b8c:	61a3      	str	r3, [r4, #24]
 8013b8e:	b157      	cbz	r7, 8013ba6 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x62>
 8013b90:	2101      	movs	r1, #1
 8013b92:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8013b96:	f7ff ff27 	bl	80139e8 <racs_services__srv__Control_Request__Sequence__init>
 8013b9a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013b9c:	4638      	mov	r0, r7
 8013b9e:	f7ff ff11 	bl	80139c4 <racs_services__srv__Control_Request__copy>
 8013ba2:	4603      	mov	r3, r0
 8013ba4:	b1c0      	cbz	r0, 8013bd8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x94>
 8013ba6:	f1b8 0f00 	cmp.w	r8, #0
 8013baa:	d00a      	beq.n	8013bc2 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x7e>
 8013bac:	2101      	movs	r1, #1
 8013bae:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8013bb2:	f7ff ff55 	bl	8013a60 <racs_services__srv__Control_Response__Sequence__init>
 8013bb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013bb8:	4640      	mov	r0, r8
 8013bba:	f7ff ff49 	bl	8013a50 <racs_services__srv__Control_Response__copy>
 8013bbe:	4603      	mov	r3, r0
 8013bc0:	b150      	cbz	r0, 8013bd8 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x94>
 8013bc2:	4620      	mov	r0, r4
 8013bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bc8:	4620      	mov	r0, r4
 8013bca:	4664      	mov	r4, ip
 8013bcc:	6873      	ldr	r3, [r6, #4]
 8013bce:	6931      	ldr	r1, [r6, #16]
 8013bd0:	4798      	blx	r3
 8013bd2:	4620      	mov	r0, r4
 8013bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bd8:	4620      	mov	r0, r4
 8013bda:	461c      	mov	r4, r3
 8013bdc:	6872      	ldr	r2, [r6, #4]
 8013bde:	6931      	ldr	r1, [r6, #16]
 8013be0:	4790      	blx	r2
 8013be2:	4620      	mov	r0, r4
 8013be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013be8:	2400      	movs	r4, #0
 8013bea:	4620      	mov	r0, r4
 8013bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013bf0 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control>:
 8013bf0:	b1b9      	cbz	r1, 8013c22 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x32>
 8013bf2:	b538      	push	{r3, r4, r5, lr}
 8013bf4:	4605      	mov	r5, r0
 8013bf6:	b190      	cbz	r0, 8013c1e <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x2e>
 8013bf8:	460c      	mov	r4, r1
 8013bfa:	f7ff ff81 	bl	8013b00 <racs_services__srv__Control_Event__fini>
 8013bfe:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8013c00:	b110      	cbz	r0, 8013c08 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x18>
 8013c02:	6863      	ldr	r3, [r4, #4]
 8013c04:	6921      	ldr	r1, [r4, #16]
 8013c06:	4798      	blx	r3
 8013c08:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8013c0a:	b110      	cbz	r0, 8013c12 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x22>
 8013c0c:	6863      	ldr	r3, [r4, #4]
 8013c0e:	6921      	ldr	r1, [r4, #16]
 8013c10:	4798      	blx	r3
 8013c12:	4628      	mov	r0, r5
 8013c14:	6863      	ldr	r3, [r4, #4]
 8013c16:	6921      	ldr	r1, [r4, #16]
 8013c18:	4798      	blx	r3
 8013c1a:	2001      	movs	r0, #1
 8013c1c:	bd38      	pop	{r3, r4, r5, pc}
 8013c1e:	2000      	movs	r0, #0
 8013c20:	bd38      	pop	{r3, r4, r5, pc}
 8013c22:	2000      	movs	r0, #0
 8013c24:	4770      	bx	lr
 8013c26:	bf00      	nop

08013c28 <racs_services__msg__DirectAccess__get_type_hash>:
 8013c28:	4800      	ldr	r0, [pc, #0]	; (8013c2c <racs_services__msg__DirectAccess__get_type_hash+0x4>)
 8013c2a:	4770      	bx	lr
 8013c2c:	200011ec 	.word	0x200011ec

08013c30 <racs_services__msg__DirectAccess__get_type_description>:
 8013c30:	4b03      	ldr	r3, [pc, #12]	; (8013c40 <racs_services__msg__DirectAccess__get_type_description+0x10>)
 8013c32:	781a      	ldrb	r2, [r3, #0]
 8013c34:	b90a      	cbnz	r2, 8013c3a <racs_services__msg__DirectAccess__get_type_description+0xa>
 8013c36:	2201      	movs	r2, #1
 8013c38:	701a      	strb	r2, [r3, #0]
 8013c3a:	4802      	ldr	r0, [pc, #8]	; (8013c44 <racs_services__msg__DirectAccess__get_type_description+0x14>)
 8013c3c:	4770      	bx	lr
 8013c3e:	bf00      	nop
 8013c40:	20010599 	.word	0x20010599
 8013c44:	0801e7a8 	.word	0x0801e7a8

08013c48 <racs_services__msg__DirectAccess__get_type_description_sources>:
 8013c48:	4b09      	ldr	r3, [pc, #36]	; (8013c70 <racs_services__msg__DirectAccess__get_type_description_sources+0x28>)
 8013c4a:	781a      	ldrb	r2, [r3, #0]
 8013c4c:	b96a      	cbnz	r2, 8013c6a <racs_services__msg__DirectAccess__get_type_description_sources+0x22>
 8013c4e:	2201      	movs	r2, #1
 8013c50:	b430      	push	{r4, r5}
 8013c52:	4d08      	ldr	r5, [pc, #32]	; (8013c74 <racs_services__msg__DirectAccess__get_type_description_sources+0x2c>)
 8013c54:	4c08      	ldr	r4, [pc, #32]	; (8013c78 <racs_services__msg__DirectAccess__get_type_description_sources+0x30>)
 8013c56:	701a      	strb	r2, [r3, #0]
 8013c58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013c5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013c5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013c5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013c60:	682b      	ldr	r3, [r5, #0]
 8013c62:	4806      	ldr	r0, [pc, #24]	; (8013c7c <racs_services__msg__DirectAccess__get_type_description_sources+0x34>)
 8013c64:	6023      	str	r3, [r4, #0]
 8013c66:	bc30      	pop	{r4, r5}
 8013c68:	4770      	bx	lr
 8013c6a:	4804      	ldr	r0, [pc, #16]	; (8013c7c <racs_services__msg__DirectAccess__get_type_description_sources+0x34>)
 8013c6c:	4770      	bx	lr
 8013c6e:	bf00      	nop
 8013c70:	20010598 	.word	0x20010598
 8013c74:	0801e7cc 	.word	0x0801e7cc
 8013c78:	2001059c 	.word	0x2001059c
 8013c7c:	0801e7f0 	.word	0x0801e7f0

08013c80 <racs_services__msg__DirectAccess__init>:
 8013c80:	3800      	subs	r0, #0
 8013c82:	bf18      	it	ne
 8013c84:	2001      	movne	r0, #1
 8013c86:	4770      	bx	lr

08013c88 <racs_services__msg__DirectAccess__fini>:
 8013c88:	4770      	bx	lr
 8013c8a:	bf00      	nop

08013c8c <racs_services__msg__Feedback__get_type_hash>:
 8013c8c:	4800      	ldr	r0, [pc, #0]	; (8013c90 <racs_services__msg__Feedback__get_type_hash+0x4>)
 8013c8e:	4770      	bx	lr
 8013c90:	200012fc 	.word	0x200012fc

08013c94 <racs_services__msg__Feedback__get_type_description>:
 8013c94:	4b03      	ldr	r3, [pc, #12]	; (8013ca4 <racs_services__msg__Feedback__get_type_description+0x10>)
 8013c96:	781a      	ldrb	r2, [r3, #0]
 8013c98:	b90a      	cbnz	r2, 8013c9e <racs_services__msg__Feedback__get_type_description+0xa>
 8013c9a:	2201      	movs	r2, #1
 8013c9c:	701a      	strb	r2, [r3, #0]
 8013c9e:	4802      	ldr	r0, [pc, #8]	; (8013ca8 <racs_services__msg__Feedback__get_type_description+0x14>)
 8013ca0:	4770      	bx	lr
 8013ca2:	bf00      	nop
 8013ca4:	200105c1 	.word	0x200105c1
 8013ca8:	0801e7fc 	.word	0x0801e7fc

08013cac <racs_services__msg__Feedback__get_type_description_sources>:
 8013cac:	4b09      	ldr	r3, [pc, #36]	; (8013cd4 <racs_services__msg__Feedback__get_type_description_sources+0x28>)
 8013cae:	781a      	ldrb	r2, [r3, #0]
 8013cb0:	b96a      	cbnz	r2, 8013cce <racs_services__msg__Feedback__get_type_description_sources+0x22>
 8013cb2:	2201      	movs	r2, #1
 8013cb4:	b430      	push	{r4, r5}
 8013cb6:	4d08      	ldr	r5, [pc, #32]	; (8013cd8 <racs_services__msg__Feedback__get_type_description_sources+0x2c>)
 8013cb8:	4c08      	ldr	r4, [pc, #32]	; (8013cdc <racs_services__msg__Feedback__get_type_description_sources+0x30>)
 8013cba:	701a      	strb	r2, [r3, #0]
 8013cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013cc4:	682b      	ldr	r3, [r5, #0]
 8013cc6:	4806      	ldr	r0, [pc, #24]	; (8013ce0 <racs_services__msg__Feedback__get_type_description_sources+0x34>)
 8013cc8:	6023      	str	r3, [r4, #0]
 8013cca:	bc30      	pop	{r4, r5}
 8013ccc:	4770      	bx	lr
 8013cce:	4804      	ldr	r0, [pc, #16]	; (8013ce0 <racs_services__msg__Feedback__get_type_description_sources+0x34>)
 8013cd0:	4770      	bx	lr
 8013cd2:	bf00      	nop
 8013cd4:	200105c0 	.word	0x200105c0
 8013cd8:	0801e820 	.word	0x0801e820
 8013cdc:	200105c4 	.word	0x200105c4
 8013ce0:	0801e844 	.word	0x0801e844

08013ce4 <racs_services__msg__Feedback__init>:
 8013ce4:	3800      	subs	r0, #0
 8013ce6:	bf18      	it	ne
 8013ce8:	2001      	movne	r0, #1
 8013cea:	4770      	bx	lr

08013cec <racs_services__msg__Feedback__fini>:
 8013cec:	4770      	bx	lr
 8013cee:	bf00      	nop

08013cf0 <racs_services__srv__Setup_Event__get_type_description.part.0>:
 8013cf0:	b510      	push	{r4, lr}
 8013cf2:	2000      	movs	r0, #0
 8013cf4:	4c13      	ldr	r4, [pc, #76]	; (8013d44 <racs_services__srv__Setup_Event__get_type_description.part.0+0x54>)
 8013cf6:	f005 fd73 	bl	80197e0 <builtin_interfaces__msg__Time__get_type_description>
 8013cfa:	300c      	adds	r0, #12
 8013cfc:	4b12      	ldr	r3, [pc, #72]	; (8013d48 <racs_services__srv__Setup_Event__get_type_description.part.0+0x58>)
 8013cfe:	c807      	ldmia	r0, {r0, r1, r2}
 8013d00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013d04:	7823      	ldrb	r3, [r4, #0]
 8013d06:	b90b      	cbnz	r3, 8013d0c <racs_services__srv__Setup_Event__get_type_description.part.0+0x1c>
 8013d08:	2301      	movs	r3, #1
 8013d0a:	7023      	strb	r3, [r4, #0]
 8013d0c:	4a0f      	ldr	r2, [pc, #60]	; (8013d4c <racs_services__srv__Setup_Event__get_type_description.part.0+0x5c>)
 8013d0e:	4b10      	ldr	r3, [pc, #64]	; (8013d50 <racs_services__srv__Setup_Event__get_type_description.part.0+0x60>)
 8013d10:	4c10      	ldr	r4, [pc, #64]	; (8013d54 <racs_services__srv__Setup_Event__get_type_description.part.0+0x64>)
 8013d12:	ca07      	ldmia	r2, {r0, r1, r2}
 8013d14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013d18:	7823      	ldrb	r3, [r4, #0]
 8013d1a:	b90b      	cbnz	r3, 8013d20 <racs_services__srv__Setup_Event__get_type_description.part.0+0x30>
 8013d1c:	2301      	movs	r3, #1
 8013d1e:	7023      	strb	r3, [r4, #0]
 8013d20:	4b0d      	ldr	r3, [pc, #52]	; (8013d58 <racs_services__srv__Setup_Event__get_type_description.part.0+0x68>)
 8013d22:	4c0e      	ldr	r4, [pc, #56]	; (8013d5c <racs_services__srv__Setup_Event__get_type_description.part.0+0x6c>)
 8013d24:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013d28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013d2c:	2000      	movs	r0, #0
 8013d2e:	3418      	adds	r4, #24
 8013d30:	f005 fcf6 	bl	8019720 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8013d34:	300c      	adds	r0, #12
 8013d36:	4b0a      	ldr	r3, [pc, #40]	; (8013d60 <racs_services__srv__Setup_Event__get_type_description.part.0+0x70>)
 8013d38:	c807      	ldmia	r0, {r0, r1, r2}
 8013d3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013d3e:	2201      	movs	r2, #1
 8013d40:	701a      	strb	r2, [r3, #0]
 8013d42:	bd10      	pop	{r4, pc}
 8013d44:	200105ec 	.word	0x200105ec
 8013d48:	200015c8 	.word	0x200015c8
 8013d4c:	0801e8a4 	.word	0x0801e8a4
 8013d50:	200015e0 	.word	0x200015e0
 8013d54:	200105ea 	.word	0x200105ea
 8013d58:	0801e880 	.word	0x0801e880
 8013d5c:	200015f8 	.word	0x200015f8
 8013d60:	200105e9 	.word	0x200105e9

08013d64 <racs_services__srv__Setup__get_type_hash>:
 8013d64:	4800      	ldr	r0, [pc, #0]	; (8013d68 <racs_services__srv__Setup__get_type_hash+0x4>)
 8013d66:	4770      	bx	lr
 8013d68:	20001498 	.word	0x20001498

08013d6c <racs_services__srv__Setup_Request__get_type_hash>:
 8013d6c:	4800      	ldr	r0, [pc, #0]	; (8013d70 <racs_services__srv__Setup_Request__get_type_hash+0x4>)
 8013d6e:	4770      	bx	lr
 8013d70:	20001474 	.word	0x20001474

08013d74 <racs_services__srv__Setup_Response__get_type_hash>:
 8013d74:	4800      	ldr	r0, [pc, #0]	; (8013d78 <racs_services__srv__Setup_Response__get_type_hash+0x4>)
 8013d76:	4770      	bx	lr
 8013d78:	20001450 	.word	0x20001450

08013d7c <racs_services__srv__Setup_Event__get_type_hash>:
 8013d7c:	4800      	ldr	r0, [pc, #0]	; (8013d80 <racs_services__srv__Setup_Event__get_type_hash+0x4>)
 8013d7e:	4770      	bx	lr
 8013d80:	2000142c 	.word	0x2000142c

08013d84 <racs_services__srv__Setup__get_type_description>:
 8013d84:	b538      	push	{r3, r4, r5, lr}
 8013d86:	4d1c      	ldr	r5, [pc, #112]	; (8013df8 <racs_services__srv__Setup__get_type_description+0x74>)
 8013d88:	7828      	ldrb	r0, [r5, #0]
 8013d8a:	b108      	cbz	r0, 8013d90 <racs_services__srv__Setup__get_type_description+0xc>
 8013d8c:	481b      	ldr	r0, [pc, #108]	; (8013dfc <racs_services__srv__Setup__get_type_description+0x78>)
 8013d8e:	bd38      	pop	{r3, r4, r5, pc}
 8013d90:	f005 fd26 	bl	80197e0 <builtin_interfaces__msg__Time__get_type_description>
 8013d94:	300c      	adds	r0, #12
 8013d96:	4b1a      	ldr	r3, [pc, #104]	; (8013e00 <racs_services__srv__Setup__get_type_description+0x7c>)
 8013d98:	c807      	ldmia	r0, {r0, r1, r2}
 8013d9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013d9e:	4b19      	ldr	r3, [pc, #100]	; (8013e04 <racs_services__srv__Setup__get_type_description+0x80>)
 8013da0:	781b      	ldrb	r3, [r3, #0]
 8013da2:	b32b      	cbz	r3, 8013df0 <racs_services__srv__Setup__get_type_description+0x6c>
 8013da4:	4a18      	ldr	r2, [pc, #96]	; (8013e08 <racs_services__srv__Setup__get_type_description+0x84>)
 8013da6:	4b19      	ldr	r3, [pc, #100]	; (8013e0c <racs_services__srv__Setup__get_type_description+0x88>)
 8013da8:	4c19      	ldr	r4, [pc, #100]	; (8013e10 <racs_services__srv__Setup__get_type_description+0x8c>)
 8013daa:	ca07      	ldmia	r2, {r0, r1, r2}
 8013dac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013db0:	7823      	ldrb	r3, [r4, #0]
 8013db2:	b90b      	cbnz	r3, 8013db8 <racs_services__srv__Setup__get_type_description+0x34>
 8013db4:	2301      	movs	r3, #1
 8013db6:	7023      	strb	r3, [r4, #0]
 8013db8:	4a16      	ldr	r2, [pc, #88]	; (8013e14 <racs_services__srv__Setup__get_type_description+0x90>)
 8013dba:	4b17      	ldr	r3, [pc, #92]	; (8013e18 <racs_services__srv__Setup__get_type_description+0x94>)
 8013dbc:	4c17      	ldr	r4, [pc, #92]	; (8013e1c <racs_services__srv__Setup__get_type_description+0x98>)
 8013dbe:	ca07      	ldmia	r2, {r0, r1, r2}
 8013dc0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013dc4:	7823      	ldrb	r3, [r4, #0]
 8013dc6:	b90b      	cbnz	r3, 8013dcc <racs_services__srv__Setup__get_type_description+0x48>
 8013dc8:	2301      	movs	r3, #1
 8013dca:	7023      	strb	r3, [r4, #0]
 8013dcc:	4b14      	ldr	r3, [pc, #80]	; (8013e20 <racs_services__srv__Setup__get_type_description+0x9c>)
 8013dce:	4c15      	ldr	r4, [pc, #84]	; (8013e24 <racs_services__srv__Setup__get_type_description+0xa0>)
 8013dd0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013dd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013dd8:	2000      	movs	r0, #0
 8013dda:	3418      	adds	r4, #24
 8013ddc:	f005 fca0 	bl	8019720 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8013de0:	300c      	adds	r0, #12
 8013de2:	2301      	movs	r3, #1
 8013de4:	c807      	ldmia	r0, {r0, r1, r2}
 8013de6:	702b      	strb	r3, [r5, #0]
 8013de8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013dec:	4803      	ldr	r0, [pc, #12]	; (8013dfc <racs_services__srv__Setup__get_type_description+0x78>)
 8013dee:	bd38      	pop	{r3, r4, r5, pc}
 8013df0:	f7ff ff7e 	bl	8013cf0 <racs_services__srv__Setup_Event__get_type_description.part.0>
 8013df4:	e7d6      	b.n	8013da4 <racs_services__srv__Setup__get_type_description+0x20>
 8013df6:	bf00      	nop
 8013df8:	200105ed 	.word	0x200105ed
 8013dfc:	0801e8bc 	.word	0x0801e8bc
 8013e00:	20001a10 	.word	0x20001a10
 8013e04:	200105e9 	.word	0x200105e9
 8013e08:	0801e85c 	.word	0x0801e85c
 8013e0c:	20001a28 	.word	0x20001a28
 8013e10:	200105ec 	.word	0x200105ec
 8013e14:	0801e8a4 	.word	0x0801e8a4
 8013e18:	20001a40 	.word	0x20001a40
 8013e1c:	200105ea 	.word	0x200105ea
 8013e20:	0801e880 	.word	0x0801e880
 8013e24:	20001a58 	.word	0x20001a58

08013e28 <racs_services__srv__Setup_Request__get_type_description>:
 8013e28:	4b03      	ldr	r3, [pc, #12]	; (8013e38 <racs_services__srv__Setup_Request__get_type_description+0x10>)
 8013e2a:	781a      	ldrb	r2, [r3, #0]
 8013e2c:	b90a      	cbnz	r2, 8013e32 <racs_services__srv__Setup_Request__get_type_description+0xa>
 8013e2e:	2201      	movs	r2, #1
 8013e30:	701a      	strb	r2, [r3, #0]
 8013e32:	4802      	ldr	r0, [pc, #8]	; (8013e3c <racs_services__srv__Setup_Request__get_type_description+0x14>)
 8013e34:	4770      	bx	lr
 8013e36:	bf00      	nop
 8013e38:	200105ec 	.word	0x200105ec
 8013e3c:	0801e898 	.word	0x0801e898

08013e40 <racs_services__srv__Setup_Response__get_type_description>:
 8013e40:	4b03      	ldr	r3, [pc, #12]	; (8013e50 <racs_services__srv__Setup_Response__get_type_description+0x10>)
 8013e42:	781a      	ldrb	r2, [r3, #0]
 8013e44:	b90a      	cbnz	r2, 8013e4a <racs_services__srv__Setup_Response__get_type_description+0xa>
 8013e46:	2201      	movs	r2, #1
 8013e48:	701a      	strb	r2, [r3, #0]
 8013e4a:	4802      	ldr	r0, [pc, #8]	; (8013e54 <racs_services__srv__Setup_Response__get_type_description+0x14>)
 8013e4c:	4770      	bx	lr
 8013e4e:	bf00      	nop
 8013e50:	200105ea 	.word	0x200105ea
 8013e54:	0801e874 	.word	0x0801e874

08013e58 <racs_services__srv__Setup_Event__get_type_description>:
 8013e58:	b508      	push	{r3, lr}
 8013e5a:	4b04      	ldr	r3, [pc, #16]	; (8013e6c <racs_services__srv__Setup_Event__get_type_description+0x14>)
 8013e5c:	781b      	ldrb	r3, [r3, #0]
 8013e5e:	b10b      	cbz	r3, 8013e64 <racs_services__srv__Setup_Event__get_type_description+0xc>
 8013e60:	4803      	ldr	r0, [pc, #12]	; (8013e70 <racs_services__srv__Setup_Event__get_type_description+0x18>)
 8013e62:	bd08      	pop	{r3, pc}
 8013e64:	f7ff ff44 	bl	8013cf0 <racs_services__srv__Setup_Event__get_type_description.part.0>
 8013e68:	4801      	ldr	r0, [pc, #4]	; (8013e70 <racs_services__srv__Setup_Event__get_type_description+0x18>)
 8013e6a:	bd08      	pop	{r3, pc}
 8013e6c:	200105e9 	.word	0x200105e9
 8013e70:	0801e850 	.word	0x0801e850

08013e74 <racs_services__srv__Setup__get_type_description_sources>:
 8013e74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e78:	4b2c      	ldr	r3, [pc, #176]	; (8013f2c <racs_services__srv__Setup__get_type_description_sources+0xb8>)
 8013e7a:	f893 9000 	ldrb.w	r9, [r3]
 8013e7e:	f1b9 0f00 	cmp.w	r9, #0
 8013e82:	d002      	beq.n	8013e8a <racs_services__srv__Setup__get_type_description_sources+0x16>
 8013e84:	482a      	ldr	r0, [pc, #168]	; (8013f30 <racs_services__srv__Setup__get_type_description_sources+0xbc>)
 8013e86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e8a:	4d2a      	ldr	r5, [pc, #168]	; (8013f34 <racs_services__srv__Setup__get_type_description_sources+0xc0>)
 8013e8c:	4c2a      	ldr	r4, [pc, #168]	; (8013f38 <racs_services__srv__Setup__get_type_description_sources+0xc4>)
 8013e8e:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8013f40 <racs_services__srv__Setup__get_type_description_sources+0xcc>
 8013e92:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8013f44 <racs_services__srv__Setup__get_type_description_sources+0xd0>
 8013e96:	4e29      	ldr	r6, [pc, #164]	; (8013f3c <racs_services__srv__Setup__get_type_description_sources+0xc8>)
 8013e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013e9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013e9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013ea0:	682b      	ldr	r3, [r5, #0]
 8013ea2:	4625      	mov	r5, r4
 8013ea4:	4648      	mov	r0, r9
 8013ea6:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 8013eaa:	f845 3b04 	str.w	r3, [r5], #4
 8013eae:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 8013eb2:	f005 fca1 	bl	80197f8 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8013eb6:	4684      	mov	ip, r0
 8013eb8:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 8013ebc:	3494      	adds	r4, #148	; 0x94
 8013ebe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013ec2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013ec4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013ec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013eca:	f8dc 3000 	ldr.w	r3, [ip]
 8013ece:	602b      	str	r3, [r5, #0]
 8013ed0:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8013ed4:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8013ed8:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8013edc:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8013ee0:	f8db 3000 	ldr.w	r3, [fp]
 8013ee4:	f8ca 3000 	str.w	r3, [sl]
 8013ee8:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8013eec:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013eee:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8013ef2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013ef4:	f8d8 3000 	ldr.w	r3, [r8]
 8013ef8:	603b      	str	r3, [r7, #0]
 8013efa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013efc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013f00:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013f02:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013f06:	6833      	ldr	r3, [r6, #0]
 8013f08:	4648      	mov	r0, r9
 8013f0a:	f8ce 3000 	str.w	r3, [lr]
 8013f0e:	f005 fc1f 	bl	8019750 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 8013f12:	2301      	movs	r3, #1
 8013f14:	4a05      	ldr	r2, [pc, #20]	; (8013f2c <racs_services__srv__Setup__get_type_description_sources+0xb8>)
 8013f16:	4605      	mov	r5, r0
 8013f18:	7013      	strb	r3, [r2, #0]
 8013f1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f22:	682b      	ldr	r3, [r5, #0]
 8013f24:	4802      	ldr	r0, [pc, #8]	; (8013f30 <racs_services__srv__Setup__get_type_description_sources+0xbc>)
 8013f26:	6023      	str	r3, [r4, #0]
 8013f28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f2c:	200105e8 	.word	0x200105e8
 8013f30:	0801e994 	.word	0x0801e994
 8013f34:	0801e94c 	.word	0x0801e94c
 8013f38:	200106a4 	.word	0x200106a4
 8013f3c:	0801e904 	.word	0x0801e904
 8013f40:	0801e8e0 	.word	0x0801e8e0
 8013f44:	0801e928 	.word	0x0801e928

08013f48 <racs_services__srv__Setup_Request__get_type_description_sources>:
 8013f48:	4b09      	ldr	r3, [pc, #36]	; (8013f70 <racs_services__srv__Setup_Request__get_type_description_sources+0x28>)
 8013f4a:	781a      	ldrb	r2, [r3, #0]
 8013f4c:	b96a      	cbnz	r2, 8013f6a <racs_services__srv__Setup_Request__get_type_description_sources+0x22>
 8013f4e:	2201      	movs	r2, #1
 8013f50:	b430      	push	{r4, r5}
 8013f52:	4d08      	ldr	r5, [pc, #32]	; (8013f74 <racs_services__srv__Setup_Request__get_type_description_sources+0x2c>)
 8013f54:	4c08      	ldr	r4, [pc, #32]	; (8013f78 <racs_services__srv__Setup_Request__get_type_description_sources+0x30>)
 8013f56:	701a      	strb	r2, [r3, #0]
 8013f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f60:	682b      	ldr	r3, [r5, #0]
 8013f62:	4806      	ldr	r0, [pc, #24]	; (8013f7c <racs_services__srv__Setup_Request__get_type_description_sources+0x34>)
 8013f64:	6023      	str	r3, [r4, #0]
 8013f66:	bc30      	pop	{r4, r5}
 8013f68:	4770      	bx	lr
 8013f6a:	4804      	ldr	r0, [pc, #16]	; (8013f7c <racs_services__srv__Setup_Request__get_type_description_sources+0x34>)
 8013f6c:	4770      	bx	lr
 8013f6e:	bf00      	nop
 8013f70:	200105ef 	.word	0x200105ef
 8013f74:	0801e928 	.word	0x0801e928
 8013f78:	200107a0 	.word	0x200107a0
 8013f7c:	0801e988 	.word	0x0801e988

08013f80 <racs_services__srv__Setup_Response__get_type_description_sources>:
 8013f80:	4b09      	ldr	r3, [pc, #36]	; (8013fa8 <racs_services__srv__Setup_Response__get_type_description_sources+0x28>)
 8013f82:	781a      	ldrb	r2, [r3, #0]
 8013f84:	b96a      	cbnz	r2, 8013fa2 <racs_services__srv__Setup_Response__get_type_description_sources+0x22>
 8013f86:	2201      	movs	r2, #1
 8013f88:	b430      	push	{r4, r5}
 8013f8a:	4d08      	ldr	r5, [pc, #32]	; (8013fac <racs_services__srv__Setup_Response__get_type_description_sources+0x2c>)
 8013f8c:	4c08      	ldr	r4, [pc, #32]	; (8013fb0 <racs_services__srv__Setup_Response__get_type_description_sources+0x30>)
 8013f8e:	701a      	strb	r2, [r3, #0]
 8013f90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f98:	682b      	ldr	r3, [r5, #0]
 8013f9a:	4806      	ldr	r0, [pc, #24]	; (8013fb4 <racs_services__srv__Setup_Response__get_type_description_sources+0x34>)
 8013f9c:	6023      	str	r3, [r4, #0]
 8013f9e:	bc30      	pop	{r4, r5}
 8013fa0:	4770      	bx	lr
 8013fa2:	4804      	ldr	r0, [pc, #16]	; (8013fb4 <racs_services__srv__Setup_Response__get_type_description_sources+0x34>)
 8013fa4:	4770      	bx	lr
 8013fa6:	bf00      	nop
 8013fa8:	200105ee 	.word	0x200105ee
 8013fac:	0801e904 	.word	0x0801e904
 8013fb0:	2001077c 	.word	0x2001077c
 8013fb4:	0801e97c 	.word	0x0801e97c

08013fb8 <racs_services__srv__Setup_Event__get_type_description_sources>:
 8013fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013fbc:	4e27      	ldr	r6, [pc, #156]	; (801405c <racs_services__srv__Setup_Event__get_type_description_sources+0xa4>)
 8013fbe:	f896 8000 	ldrb.w	r8, [r6]
 8013fc2:	f1b8 0f00 	cmp.w	r8, #0
 8013fc6:	d002      	beq.n	8013fce <racs_services__srv__Setup_Event__get_type_description_sources+0x16>
 8013fc8:	4825      	ldr	r0, [pc, #148]	; (8014060 <racs_services__srv__Setup_Event__get_type_description_sources+0xa8>)
 8013fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fce:	4d25      	ldr	r5, [pc, #148]	; (8014064 <racs_services__srv__Setup_Event__get_type_description_sources+0xac>)
 8013fd0:	4c25      	ldr	r4, [pc, #148]	; (8014068 <racs_services__srv__Setup_Event__get_type_description_sources+0xb0>)
 8013fd2:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8014070 <racs_services__srv__Setup_Event__get_type_description_sources+0xb8>
 8013fd6:	4f25      	ldr	r7, [pc, #148]	; (801406c <racs_services__srv__Setup_Event__get_type_description_sources+0xb4>)
 8013fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fe0:	682b      	ldr	r3, [r5, #0]
 8013fe2:	4625      	mov	r5, r4
 8013fe4:	4640      	mov	r0, r8
 8013fe6:	f104 0928 	add.w	r9, r4, #40	; 0x28
 8013fea:	f845 3b04 	str.w	r3, [r5], #4
 8013fee:	f005 fc03 	bl	80197f8 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8013ff2:	4684      	mov	ip, r0
 8013ff4:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 8013ff8:	3470      	adds	r4, #112	; 0x70
 8013ffa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013ffe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014000:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014006:	f8dc 3000 	ldr.w	r3, [ip]
 801400a:	602b      	str	r3, [r5, #0]
 801400c:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8014010:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8014014:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8014018:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 801401c:	f8da 3000 	ldr.w	r3, [sl]
 8014020:	f8c9 3000 	str.w	r3, [r9]
 8014024:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014026:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801402a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801402c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014030:	683b      	ldr	r3, [r7, #0]
 8014032:	4640      	mov	r0, r8
 8014034:	f8ce 3000 	str.w	r3, [lr]
 8014038:	f005 fb8a 	bl	8019750 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 801403c:	2301      	movs	r3, #1
 801403e:	4684      	mov	ip, r0
 8014040:	7033      	strb	r3, [r6, #0]
 8014042:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014048:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801404c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801404e:	f8dc 3000 	ldr.w	r3, [ip]
 8014052:	4803      	ldr	r0, [pc, #12]	; (8014060 <racs_services__srv__Setup_Event__get_type_description_sources+0xa8>)
 8014054:	6023      	str	r3, [r4, #0]
 8014056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801405a:	bf00      	nop
 801405c:	200105eb 	.word	0x200105eb
 8014060:	0801e970 	.word	0x0801e970
 8014064:	0801e8e0 	.word	0x0801e8e0
 8014068:	200105f0 	.word	0x200105f0
 801406c:	0801e904 	.word	0x0801e904
 8014070:	0801e928 	.word	0x0801e928

08014074 <racs_services__srv__Setup_Event__fini.part.0>:
 8014074:	b510      	push	{r4, lr}
 8014076:	b086      	sub	sp, #24
 8014078:	4604      	mov	r4, r0
 801407a:	f005 fba7 	bl	80197cc <service_msgs__msg__ServiceEventInfo__fini>
 801407e:	a801      	add	r0, sp, #4
 8014080:	f7f9 fd94 	bl	800dbac <rcutils_get_default_allocator>
 8014084:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014086:	b130      	cbz	r0, 8014096 <racs_services__srv__Setup_Event__fini.part.0+0x22>
 8014088:	9b02      	ldr	r3, [sp, #8]
 801408a:	9905      	ldr	r1, [sp, #20]
 801408c:	4798      	blx	r3
 801408e:	2300      	movs	r3, #0
 8014090:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8014094:	6323      	str	r3, [r4, #48]	; 0x30
 8014096:	a801      	add	r0, sp, #4
 8014098:	f7f9 fd88 	bl	800dbac <rcutils_get_default_allocator>
 801409c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801409e:	b130      	cbz	r0, 80140ae <racs_services__srv__Setup_Event__fini.part.0+0x3a>
 80140a0:	9b02      	ldr	r3, [sp, #8]
 80140a2:	9905      	ldr	r1, [sp, #20]
 80140a4:	4798      	blx	r3
 80140a6:	2300      	movs	r3, #0
 80140a8:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80140ac:	63e3      	str	r3, [r4, #60]	; 0x3c
 80140ae:	b006      	add	sp, #24
 80140b0:	bd10      	pop	{r4, pc}
 80140b2:	bf00      	nop

080140b4 <racs_services__srv__Setup_Request__init>:
 80140b4:	3800      	subs	r0, #0
 80140b6:	bf18      	it	ne
 80140b8:	2001      	movne	r0, #1
 80140ba:	4770      	bx	lr

080140bc <racs_services__srv__Setup_Request__fini>:
 80140bc:	4770      	bx	lr
 80140be:	bf00      	nop

080140c0 <racs_services__srv__Setup_Request__copy>:
 80140c0:	4603      	mov	r3, r0
 80140c2:	b1a0      	cbz	r0, 80140ee <racs_services__srv__Setup_Request__copy+0x2e>
 80140c4:	b199      	cbz	r1, 80140ee <racs_services__srv__Setup_Request__copy+0x2e>
 80140c6:	7802      	ldrb	r2, [r0, #0]
 80140c8:	2001      	movs	r0, #1
 80140ca:	700a      	strb	r2, [r1, #0]
 80140cc:	689a      	ldr	r2, [r3, #8]
 80140ce:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80140d2:	608a      	str	r2, [r1, #8]
 80140d4:	691a      	ldr	r2, [r3, #16]
 80140d6:	f8c1 c004 	str.w	ip, [r1, #4]
 80140da:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80140de:	610a      	str	r2, [r1, #16]
 80140e0:	695a      	ldr	r2, [r3, #20]
 80140e2:	699b      	ldr	r3, [r3, #24]
 80140e4:	f8c1 c00c 	str.w	ip, [r1, #12]
 80140e8:	614a      	str	r2, [r1, #20]
 80140ea:	618b      	str	r3, [r1, #24]
 80140ec:	4770      	bx	lr
 80140ee:	2000      	movs	r0, #0
 80140f0:	4770      	bx	lr
 80140f2:	bf00      	nop

080140f4 <racs_services__srv__Setup_Request__Sequence__init>:
 80140f4:	b530      	push	{r4, r5, lr}
 80140f6:	4604      	mov	r4, r0
 80140f8:	b087      	sub	sp, #28
 80140fa:	b148      	cbz	r0, 8014110 <racs_services__srv__Setup_Request__Sequence__init+0x1c>
 80140fc:	460d      	mov	r5, r1
 80140fe:	a801      	add	r0, sp, #4
 8014100:	f7f9 fd54 	bl	800dbac <rcutils_get_default_allocator>
 8014104:	b935      	cbnz	r5, 8014114 <racs_services__srv__Setup_Request__Sequence__init+0x20>
 8014106:	462b      	mov	r3, r5
 8014108:	2001      	movs	r0, #1
 801410a:	60a5      	str	r5, [r4, #8]
 801410c:	e9c4 3500 	strd	r3, r5, [r4]
 8014110:	b007      	add	sp, #28
 8014112:	bd30      	pop	{r4, r5, pc}
 8014114:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8014118:	211c      	movs	r1, #28
 801411a:	4628      	mov	r0, r5
 801411c:	4798      	blx	r3
 801411e:	4603      	mov	r3, r0
 8014120:	2800      	cmp	r0, #0
 8014122:	d1f1      	bne.n	8014108 <racs_services__srv__Setup_Request__Sequence__init+0x14>
 8014124:	e7f4      	b.n	8014110 <racs_services__srv__Setup_Request__Sequence__init+0x1c>
 8014126:	bf00      	nop

08014128 <racs_services__srv__Setup_Request__Sequence__fini>:
 8014128:	b180      	cbz	r0, 801414c <racs_services__srv__Setup_Request__Sequence__fini+0x24>
 801412a:	b510      	push	{r4, lr}
 801412c:	b086      	sub	sp, #24
 801412e:	4604      	mov	r4, r0
 8014130:	a801      	add	r0, sp, #4
 8014132:	f7f9 fd3b 	bl	800dbac <rcutils_get_default_allocator>
 8014136:	6820      	ldr	r0, [r4, #0]
 8014138:	b130      	cbz	r0, 8014148 <racs_services__srv__Setup_Request__Sequence__fini+0x20>
 801413a:	9b02      	ldr	r3, [sp, #8]
 801413c:	9905      	ldr	r1, [sp, #20]
 801413e:	4798      	blx	r3
 8014140:	2300      	movs	r3, #0
 8014142:	e9c4 3300 	strd	r3, r3, [r4]
 8014146:	60a3      	str	r3, [r4, #8]
 8014148:	b006      	add	sp, #24
 801414a:	bd10      	pop	{r4, pc}
 801414c:	4770      	bx	lr
 801414e:	bf00      	nop

08014150 <racs_services__srv__Setup_Response__init>:
 8014150:	3800      	subs	r0, #0
 8014152:	bf18      	it	ne
 8014154:	2001      	movne	r0, #1
 8014156:	4770      	bx	lr

08014158 <racs_services__srv__Setup_Response__fini>:
 8014158:	4770      	bx	lr
 801415a:	bf00      	nop

0801415c <racs_services__srv__Setup_Response__copy>:
 801415c:	b120      	cbz	r0, 8014168 <racs_services__srv__Setup_Response__copy+0xc>
 801415e:	b119      	cbz	r1, 8014168 <racs_services__srv__Setup_Response__copy+0xc>
 8014160:	7803      	ldrb	r3, [r0, #0]
 8014162:	2001      	movs	r0, #1
 8014164:	700b      	strb	r3, [r1, #0]
 8014166:	4770      	bx	lr
 8014168:	2000      	movs	r0, #0
 801416a:	4770      	bx	lr

0801416c <racs_services__srv__Setup_Response__Sequence__init>:
 801416c:	b530      	push	{r4, r5, lr}
 801416e:	4604      	mov	r4, r0
 8014170:	b087      	sub	sp, #28
 8014172:	b148      	cbz	r0, 8014188 <racs_services__srv__Setup_Response__Sequence__init+0x1c>
 8014174:	460d      	mov	r5, r1
 8014176:	a801      	add	r0, sp, #4
 8014178:	f7f9 fd18 	bl	800dbac <rcutils_get_default_allocator>
 801417c:	b935      	cbnz	r5, 801418c <racs_services__srv__Setup_Response__Sequence__init+0x20>
 801417e:	462b      	mov	r3, r5
 8014180:	2001      	movs	r0, #1
 8014182:	60a5      	str	r5, [r4, #8]
 8014184:	e9c4 3500 	strd	r3, r5, [r4]
 8014188:	b007      	add	sp, #28
 801418a:	bd30      	pop	{r4, r5, pc}
 801418c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8014190:	2101      	movs	r1, #1
 8014192:	4628      	mov	r0, r5
 8014194:	4798      	blx	r3
 8014196:	4603      	mov	r3, r0
 8014198:	2800      	cmp	r0, #0
 801419a:	d1f1      	bne.n	8014180 <racs_services__srv__Setup_Response__Sequence__init+0x14>
 801419c:	e7f4      	b.n	8014188 <racs_services__srv__Setup_Response__Sequence__init+0x1c>
 801419e:	bf00      	nop

080141a0 <racs_services__srv__Setup_Response__Sequence__fini>:
 80141a0:	b180      	cbz	r0, 80141c4 <racs_services__srv__Setup_Response__Sequence__fini+0x24>
 80141a2:	b510      	push	{r4, lr}
 80141a4:	b086      	sub	sp, #24
 80141a6:	4604      	mov	r4, r0
 80141a8:	a801      	add	r0, sp, #4
 80141aa:	f7f9 fcff 	bl	800dbac <rcutils_get_default_allocator>
 80141ae:	6820      	ldr	r0, [r4, #0]
 80141b0:	b130      	cbz	r0, 80141c0 <racs_services__srv__Setup_Response__Sequence__fini+0x20>
 80141b2:	9b02      	ldr	r3, [sp, #8]
 80141b4:	9905      	ldr	r1, [sp, #20]
 80141b6:	4798      	blx	r3
 80141b8:	2300      	movs	r3, #0
 80141ba:	e9c4 3300 	strd	r3, r3, [r4]
 80141be:	60a3      	str	r3, [r4, #8]
 80141c0:	b006      	add	sp, #24
 80141c2:	bd10      	pop	{r4, pc}
 80141c4:	4770      	bx	lr
 80141c6:	bf00      	nop

080141c8 <racs_services__srv__Setup_Event__init>:
 80141c8:	b570      	push	{r4, r5, r6, lr}
 80141ca:	4604      	mov	r4, r0
 80141cc:	b086      	sub	sp, #24
 80141ce:	b1c8      	cbz	r0, 8014204 <racs_services__srv__Setup_Event__init+0x3c>
 80141d0:	f005 faea 	bl	80197a8 <service_msgs__msg__ServiceEventInfo__init>
 80141d4:	4605      	mov	r5, r0
 80141d6:	b178      	cbz	r0, 80141f8 <racs_services__srv__Setup_Event__init+0x30>
 80141d8:	2600      	movs	r6, #0
 80141da:	a801      	add	r0, sp, #4
 80141dc:	f7f9 fce6 	bl	800dbac <rcutils_get_default_allocator>
 80141e0:	a801      	add	r0, sp, #4
 80141e2:	6326      	str	r6, [r4, #48]	; 0x30
 80141e4:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
 80141e8:	f7f9 fce0 	bl	800dbac <rcutils_get_default_allocator>
 80141ec:	4628      	mov	r0, r5
 80141ee:	63e6      	str	r6, [r4, #60]	; 0x3c
 80141f0:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
 80141f4:	b006      	add	sp, #24
 80141f6:	bd70      	pop	{r4, r5, r6, pc}
 80141f8:	4620      	mov	r0, r4
 80141fa:	f7ff ff3b 	bl	8014074 <racs_services__srv__Setup_Event__fini.part.0>
 80141fe:	4628      	mov	r0, r5
 8014200:	b006      	add	sp, #24
 8014202:	bd70      	pop	{r4, r5, r6, pc}
 8014204:	4605      	mov	r5, r0
 8014206:	4628      	mov	r0, r5
 8014208:	b006      	add	sp, #24
 801420a:	bd70      	pop	{r4, r5, r6, pc}

0801420c <racs_services__srv__Setup_Event__fini>:
 801420c:	b1f0      	cbz	r0, 801424c <racs_services__srv__Setup_Event__fini+0x40>
 801420e:	b510      	push	{r4, lr}
 8014210:	b086      	sub	sp, #24
 8014212:	4604      	mov	r4, r0
 8014214:	f005 fada 	bl	80197cc <service_msgs__msg__ServiceEventInfo__fini>
 8014218:	a801      	add	r0, sp, #4
 801421a:	f7f9 fcc7 	bl	800dbac <rcutils_get_default_allocator>
 801421e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014220:	b130      	cbz	r0, 8014230 <racs_services__srv__Setup_Event__fini+0x24>
 8014222:	9b02      	ldr	r3, [sp, #8]
 8014224:	9905      	ldr	r1, [sp, #20]
 8014226:	4798      	blx	r3
 8014228:	2300      	movs	r3, #0
 801422a:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 801422e:	6323      	str	r3, [r4, #48]	; 0x30
 8014230:	a801      	add	r0, sp, #4
 8014232:	f7f9 fcbb 	bl	800dbac <rcutils_get_default_allocator>
 8014236:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014238:	b130      	cbz	r0, 8014248 <racs_services__srv__Setup_Event__fini+0x3c>
 801423a:	9b02      	ldr	r3, [sp, #8]
 801423c:	9905      	ldr	r1, [sp, #20]
 801423e:	4798      	blx	r3
 8014240:	2300      	movs	r3, #0
 8014242:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8014246:	63e3      	str	r3, [r4, #60]	; 0x3c
 8014248:	b006      	add	sp, #24
 801424a:	bd10      	pop	{r4, pc}
 801424c:	4770      	bx	lr
 801424e:	bf00      	nop

08014250 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup>:
 8014250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014254:	2900      	cmp	r1, #0
 8014256:	d04d      	beq.n	80142f4 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0xa4>
 8014258:	4605      	mov	r5, r0
 801425a:	2800      	cmp	r0, #0
 801425c:	d04a      	beq.n	80142f4 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0xa4>
 801425e:	460e      	mov	r6, r1
 8014260:	4698      	mov	r8, r3
 8014262:	2040      	movs	r0, #64	; 0x40
 8014264:	680b      	ldr	r3, [r1, #0]
 8014266:	6909      	ldr	r1, [r1, #16]
 8014268:	4617      	mov	r7, r2
 801426a:	4798      	blx	r3
 801426c:	4604      	mov	r4, r0
 801426e:	f7ff ffab 	bl	80141c8 <racs_services__srv__Setup_Event__init>
 8014272:	4684      	mov	ip, r0
 8014274:	b370      	cbz	r0, 80142d4 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x84>
 8014276:	782b      	ldrb	r3, [r5, #0]
 8014278:	7023      	strb	r3, [r4, #0]
 801427a:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 801427e:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8014282:	e9c4 2301 	strd	r2, r3, [r4, #4]
 8014286:	e9c4 0108 	strd	r0, r1, [r4, #32]
 801428a:	68e8      	ldr	r0, [r5, #12]
 801428c:	6929      	ldr	r1, [r5, #16]
 801428e:	696a      	ldr	r2, [r5, #20]
 8014290:	69ab      	ldr	r3, [r5, #24]
 8014292:	60e0      	str	r0, [r4, #12]
 8014294:	6121      	str	r1, [r4, #16]
 8014296:	6162      	str	r2, [r4, #20]
 8014298:	61a3      	str	r3, [r4, #24]
 801429a:	b157      	cbz	r7, 80142b2 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x62>
 801429c:	2101      	movs	r1, #1
 801429e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80142a2:	f7ff ff27 	bl	80140f4 <racs_services__srv__Setup_Request__Sequence__init>
 80142a6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80142a8:	4638      	mov	r0, r7
 80142aa:	f7ff ff09 	bl	80140c0 <racs_services__srv__Setup_Request__copy>
 80142ae:	4603      	mov	r3, r0
 80142b0:	b1c0      	cbz	r0, 80142e4 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x94>
 80142b2:	f1b8 0f00 	cmp.w	r8, #0
 80142b6:	d00a      	beq.n	80142ce <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x7e>
 80142b8:	2101      	movs	r1, #1
 80142ba:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80142be:	f7ff ff55 	bl	801416c <racs_services__srv__Setup_Response__Sequence__init>
 80142c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80142c4:	4640      	mov	r0, r8
 80142c6:	f7ff ff49 	bl	801415c <racs_services__srv__Setup_Response__copy>
 80142ca:	4603      	mov	r3, r0
 80142cc:	b150      	cbz	r0, 80142e4 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x94>
 80142ce:	4620      	mov	r0, r4
 80142d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142d4:	4620      	mov	r0, r4
 80142d6:	4664      	mov	r4, ip
 80142d8:	6873      	ldr	r3, [r6, #4]
 80142da:	6931      	ldr	r1, [r6, #16]
 80142dc:	4798      	blx	r3
 80142de:	4620      	mov	r0, r4
 80142e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142e4:	4620      	mov	r0, r4
 80142e6:	461c      	mov	r4, r3
 80142e8:	6872      	ldr	r2, [r6, #4]
 80142ea:	6931      	ldr	r1, [r6, #16]
 80142ec:	4790      	blx	r2
 80142ee:	4620      	mov	r0, r4
 80142f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142f4:	2400      	movs	r4, #0
 80142f6:	4620      	mov	r0, r4
 80142f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080142fc <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup>:
 80142fc:	b1b9      	cbz	r1, 801432e <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x32>
 80142fe:	b538      	push	{r3, r4, r5, lr}
 8014300:	4605      	mov	r5, r0
 8014302:	b190      	cbz	r0, 801432a <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x2e>
 8014304:	460c      	mov	r4, r1
 8014306:	f7ff ff81 	bl	801420c <racs_services__srv__Setup_Event__fini>
 801430a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801430c:	b110      	cbz	r0, 8014314 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x18>
 801430e:	6863      	ldr	r3, [r4, #4]
 8014310:	6921      	ldr	r1, [r4, #16]
 8014312:	4798      	blx	r3
 8014314:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8014316:	b110      	cbz	r0, 801431e <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x22>
 8014318:	6863      	ldr	r3, [r4, #4]
 801431a:	6921      	ldr	r1, [r4, #16]
 801431c:	4798      	blx	r3
 801431e:	4628      	mov	r0, r5
 8014320:	6863      	ldr	r3, [r4, #4]
 8014322:	6921      	ldr	r1, [r4, #16]
 8014324:	4798      	blx	r3
 8014326:	2001      	movs	r0, #1
 8014328:	bd38      	pop	{r3, r4, r5, pc}
 801432a:	2000      	movs	r0, #0
 801432c:	bd38      	pop	{r3, r4, r5, pc}
 801432e:	2000      	movs	r0, #0
 8014330:	4770      	bx	lr
 8014332:	bf00      	nop

08014334 <rcl_client_get_rmw_handle>:
 8014334:	b118      	cbz	r0, 801433e <rcl_client_get_rmw_handle+0xa>
 8014336:	6800      	ldr	r0, [r0, #0]
 8014338:	b108      	cbz	r0, 801433e <rcl_client_get_rmw_handle+0xa>
 801433a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801433e:	4770      	bx	lr

08014340 <rcl_send_request>:
 8014340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014342:	b08b      	sub	sp, #44	; 0x2c
 8014344:	b1e8      	cbz	r0, 8014382 <rcl_send_request+0x42>
 8014346:	4604      	mov	r4, r0
 8014348:	6800      	ldr	r0, [r0, #0]
 801434a:	b1d0      	cbz	r0, 8014382 <rcl_send_request+0x42>
 801434c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8014350:	b1bb      	cbz	r3, 8014382 <rcl_send_request+0x42>
 8014352:	460f      	mov	r7, r1
 8014354:	b1d1      	cbz	r1, 801438c <rcl_send_request+0x4c>
 8014356:	4615      	mov	r5, r2
 8014358:	b1c2      	cbz	r2, 801438c <rcl_send_request+0x4c>
 801435a:	2105      	movs	r1, #5
 801435c:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8014360:	f003 fa12 	bl	8017788 <__atomic_load_8>
 8014364:	6823      	ldr	r3, [r4, #0]
 8014366:	462a      	mov	r2, r5
 8014368:	e9c5 0100 	strd	r0, r1, [r5]
 801436c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8014370:	4639      	mov	r1, r7
 8014372:	f004 fbd3 	bl	8018b1c <rmw_send_request>
 8014376:	4606      	mov	r6, r0
 8014378:	b160      	cbz	r0, 8014394 <rcl_send_request+0x54>
 801437a:	2601      	movs	r6, #1
 801437c:	4630      	mov	r0, r6
 801437e:	b00b      	add	sp, #44	; 0x2c
 8014380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014382:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 8014386:	4630      	mov	r0, r6
 8014388:	b00b      	add	sp, #44	; 0x2c
 801438a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801438c:	260b      	movs	r6, #11
 801438e:	4630      	mov	r0, r6
 8014390:	b00b      	add	sp, #44	; 0x2c
 8014392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014394:	6820      	ldr	r0, [r4, #0]
 8014396:	2305      	movs	r3, #5
 8014398:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801439c:	9300      	str	r3, [sp, #0]
 801439e:	e9d5 2300 	ldrd	r2, r3, [r5]
 80143a2:	f003 fa5d 	bl	8017860 <__atomic_exchange_8>
 80143a6:	6823      	ldr	r3, [r4, #0]
 80143a8:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 80143ac:	2a00      	cmp	r2, #0
 80143ae:	d0e5      	beq.n	801437c <rcl_send_request+0x3c>
 80143b0:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80143b4:	a905      	add	r1, sp, #20
 80143b6:	f003 ffcd 	bl	8018354 <rmw_get_gid_for_client>
 80143ba:	b970      	cbnz	r0, 80143da <rcl_send_request+0x9a>
 80143bc:	6820      	ldr	r0, [r4, #0]
 80143be:	ab06      	add	r3, sp, #24
 80143c0:	4631      	mov	r1, r6
 80143c2:	463a      	mov	r2, r7
 80143c4:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
 80143c8:	9302      	str	r3, [sp, #8]
 80143ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 80143ce:	e9cd 4500 	strd	r4, r5, [sp]
 80143d2:	f001 f845 	bl	8015460 <rcl_send_service_event_message>
 80143d6:	4606      	mov	r6, r0
 80143d8:	e7d0      	b.n	801437c <rcl_send_request+0x3c>
 80143da:	f000 f877 	bl	80144cc <rcl_convert_rmw_ret_to_rcl_ret>
 80143de:	4606      	mov	r6, r0
 80143e0:	e7cc      	b.n	801437c <rcl_send_request+0x3c>
 80143e2:	bf00      	nop
 80143e4:	0000      	movs	r0, r0
	...

080143e8 <rcl_take_response>:
 80143e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143ea:	468e      	mov	lr, r1
 80143ec:	b095      	sub	sp, #84	; 0x54
 80143ee:	460c      	mov	r4, r1
 80143f0:	4616      	mov	r6, r2
 80143f2:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 80143f6:	4605      	mov	r5, r0
 80143f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80143fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014400:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014404:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014408:	2d00      	cmp	r5, #0
 801440a:	d042      	beq.n	8014492 <rcl_take_response+0xaa>
 801440c:	682b      	ldr	r3, [r5, #0]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d03f      	beq.n	8014492 <rcl_take_response+0xaa>
 8014412:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8014416:	2800      	cmp	r0, #0
 8014418:	d03b      	beq.n	8014492 <rcl_take_response+0xaa>
 801441a:	2e00      	cmp	r6, #0
 801441c:	d03c      	beq.n	8014498 <rcl_take_response+0xb0>
 801441e:	2300      	movs	r3, #0
 8014420:	4632      	mov	r2, r6
 8014422:	a90a      	add	r1, sp, #40	; 0x28
 8014424:	f88d 3013 	strb.w	r3, [sp, #19]
 8014428:	f10d 0313 	add.w	r3, sp, #19
 801442c:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80144b0 <rcl_take_response+0xc8>
 8014430:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8014434:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8014438:	f004 fc78 	bl	8018d2c <rmw_take_response>
 801443c:	4607      	mov	r7, r0
 801443e:	bb68      	cbnz	r0, 801449c <rcl_take_response+0xb4>
 8014440:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8014444:	b363      	cbz	r3, 80144a0 <rcl_take_response+0xb8>
 8014446:	682b      	ldr	r3, [r5, #0]
 8014448:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 801444c:	b19a      	cbz	r2, 8014476 <rcl_take_response+0x8e>
 801444e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8014452:	a905      	add	r1, sp, #20
 8014454:	f003 ff7e 	bl	8018354 <rmw_get_gid_for_client>
 8014458:	bb28      	cbnz	r0, 80144a6 <rcl_take_response+0xbe>
 801445a:	6829      	ldr	r1, [r5, #0]
 801445c:	ab06      	add	r3, sp, #24
 801445e:	4632      	mov	r2, r6
 8014460:	f8d1 0118 	ldr.w	r0, [r1, #280]	; 0x118
 8014464:	2103      	movs	r1, #3
 8014466:	9302      	str	r3, [sp, #8]
 8014468:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 801446c:	e9cd 6700 	strd	r6, r7, [sp]
 8014470:	f000 fff6 	bl	8015460 <rcl_send_service_event_message>
 8014474:	4607      	mov	r7, r0
 8014476:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 801447a:	46a4      	mov	ip, r4
 801447c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014480:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014484:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014488:	e88c 0003 	stmia.w	ip, {r0, r1}
 801448c:	4638      	mov	r0, r7
 801448e:	b015      	add	sp, #84	; 0x54
 8014490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014492:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 8014496:	e7ee      	b.n	8014476 <rcl_take_response+0x8e>
 8014498:	270b      	movs	r7, #11
 801449a:	e7ec      	b.n	8014476 <rcl_take_response+0x8e>
 801449c:	2701      	movs	r7, #1
 801449e:	e7ea      	b.n	8014476 <rcl_take_response+0x8e>
 80144a0:	f240 17f5 	movw	r7, #501	; 0x1f5
 80144a4:	e7e7      	b.n	8014476 <rcl_take_response+0x8e>
 80144a6:	f000 f811 	bl	80144cc <rcl_convert_rmw_ret_to_rcl_ret>
 80144aa:	4607      	mov	r7, r0
 80144ac:	e7e3      	b.n	8014476 <rcl_take_response+0x8e>
 80144ae:	bf00      	nop
	...

080144b8 <rcl_client_is_valid>:
 80144b8:	b130      	cbz	r0, 80144c8 <rcl_client_is_valid+0x10>
 80144ba:	6800      	ldr	r0, [r0, #0]
 80144bc:	b120      	cbz	r0, 80144c8 <rcl_client_is_valid+0x10>
 80144be:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 80144c2:	3800      	subs	r0, #0
 80144c4:	bf18      	it	ne
 80144c6:	2001      	movne	r0, #1
 80144c8:	4770      	bx	lr
 80144ca:	bf00      	nop

080144cc <rcl_convert_rmw_ret_to_rcl_ret>:
 80144cc:	280b      	cmp	r0, #11
 80144ce:	dc0d      	bgt.n	80144ec <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 80144d0:	2800      	cmp	r0, #0
 80144d2:	db09      	blt.n	80144e8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80144d4:	280b      	cmp	r0, #11
 80144d6:	d807      	bhi.n	80144e8 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80144d8:	e8df f000 	tbb	[pc, r0]
 80144dc:	07060607 	.word	0x07060607
 80144e0:	06060606 	.word	0x06060606
 80144e4:	07070606 	.word	0x07070606
 80144e8:	2001      	movs	r0, #1
 80144ea:	4770      	bx	lr
 80144ec:	28cb      	cmp	r0, #203	; 0xcb
 80144ee:	bf18      	it	ne
 80144f0:	2001      	movne	r0, #1
 80144f2:	4770      	bx	lr

080144f4 <rcl_get_zero_initialized_context>:
 80144f4:	4a03      	ldr	r2, [pc, #12]	; (8014504 <rcl_get_zero_initialized_context+0x10>)
 80144f6:	4603      	mov	r3, r0
 80144f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80144fc:	e883 0003 	stmia.w	r3, {r0, r1}
 8014500:	4618      	mov	r0, r3
 8014502:	4770      	bx	lr
 8014504:	0801e9a0 	.word	0x0801e9a0

08014508 <rcl_context_is_valid>:
 8014508:	b118      	cbz	r0, 8014512 <rcl_context_is_valid+0xa>
 801450a:	6840      	ldr	r0, [r0, #4]
 801450c:	3800      	subs	r0, #0
 801450e:	bf18      	it	ne
 8014510:	2001      	movne	r0, #1
 8014512:	4770      	bx	lr

08014514 <__cleanup_context>:
 8014514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014518:	4606      	mov	r6, r0
 801451a:	2300      	movs	r3, #0
 801451c:	6800      	ldr	r0, [r0, #0]
 801451e:	6073      	str	r3, [r6, #4]
 8014520:	2800      	cmp	r0, #0
 8014522:	d049      	beq.n	80145b8 <__cleanup_context+0xa4>
 8014524:	6947      	ldr	r7, [r0, #20]
 8014526:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801452a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801452e:	b137      	cbz	r7, 801453e <__cleanup_context+0x2a>
 8014530:	3014      	adds	r0, #20
 8014532:	f000 f9e7 	bl	8014904 <rcl_init_options_fini>
 8014536:	4607      	mov	r7, r0
 8014538:	2800      	cmp	r0, #0
 801453a:	d144      	bne.n	80145c6 <__cleanup_context+0xb2>
 801453c:	6830      	ldr	r0, [r6, #0]
 801453e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014540:	b143      	cbz	r3, 8014554 <__cleanup_context+0x40>
 8014542:	3028      	adds	r0, #40	; 0x28
 8014544:	f004 f930 	bl	80187a8 <rmw_context_fini>
 8014548:	b118      	cbz	r0, 8014552 <__cleanup_context+0x3e>
 801454a:	2f00      	cmp	r7, #0
 801454c:	d03e      	beq.n	80145cc <__cleanup_context+0xb8>
 801454e:	f7f9 fb5f 	bl	800dc10 <rcutils_reset_error>
 8014552:	6830      	ldr	r0, [r6, #0]
 8014554:	6a03      	ldr	r3, [r0, #32]
 8014556:	b1db      	cbz	r3, 8014590 <__cleanup_context+0x7c>
 8014558:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 801455c:	2a01      	cmp	r2, #1
 801455e:	f17c 0100 	sbcs.w	r1, ip, #0
 8014562:	db11      	blt.n	8014588 <__cleanup_context+0x74>
 8014564:	2400      	movs	r4, #0
 8014566:	4625      	mov	r5, r4
 8014568:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801456c:	4649      	mov	r1, r9
 801456e:	b1b8      	cbz	r0, 80145a0 <__cleanup_context+0x8c>
 8014570:	47c0      	blx	r8
 8014572:	6833      	ldr	r3, [r6, #0]
 8014574:	3401      	adds	r4, #1
 8014576:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 801457a:	f145 0500 	adc.w	r5, r5, #0
 801457e:	6a1b      	ldr	r3, [r3, #32]
 8014580:	4294      	cmp	r4, r2
 8014582:	eb75 010c 	sbcs.w	r1, r5, ip
 8014586:	dbef      	blt.n	8014568 <__cleanup_context+0x54>
 8014588:	4618      	mov	r0, r3
 801458a:	4649      	mov	r1, r9
 801458c:	47c0      	blx	r8
 801458e:	6830      	ldr	r0, [r6, #0]
 8014590:	4649      	mov	r1, r9
 8014592:	47c0      	blx	r8
 8014594:	2300      	movs	r3, #0
 8014596:	4638      	mov	r0, r7
 8014598:	e9c6 3300 	strd	r3, r3, [r6]
 801459c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145a0:	3401      	adds	r4, #1
 80145a2:	f145 0500 	adc.w	r5, r5, #0
 80145a6:	4294      	cmp	r4, r2
 80145a8:	eb75 010c 	sbcs.w	r1, r5, ip
 80145ac:	dbdc      	blt.n	8014568 <__cleanup_context+0x54>
 80145ae:	4618      	mov	r0, r3
 80145b0:	4649      	mov	r1, r9
 80145b2:	47c0      	blx	r8
 80145b4:	6830      	ldr	r0, [r6, #0]
 80145b6:	e7eb      	b.n	8014590 <__cleanup_context+0x7c>
 80145b8:	4607      	mov	r7, r0
 80145ba:	2300      	movs	r3, #0
 80145bc:	4638      	mov	r0, r7
 80145be:	e9c6 3300 	strd	r3, r3, [r6]
 80145c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80145c6:	f7f9 fb23 	bl	800dc10 <rcutils_reset_error>
 80145ca:	e7b7      	b.n	801453c <__cleanup_context+0x28>
 80145cc:	f7ff ff7e 	bl	80144cc <rcl_convert_rmw_ret_to_rcl_ret>
 80145d0:	4607      	mov	r7, r0
 80145d2:	e7bc      	b.n	801454e <__cleanup_context+0x3a>

080145d4 <rcl_init>:
 80145d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145d8:	1e05      	subs	r5, r0, #0
 80145da:	b0a7      	sub	sp, #156	; 0x9c
 80145dc:	460e      	mov	r6, r1
 80145de:	4690      	mov	r8, r2
 80145e0:	461f      	mov	r7, r3
 80145e2:	f340 80a0 	ble.w	8014726 <rcl_init+0x152>
 80145e6:	2900      	cmp	r1, #0
 80145e8:	f000 80a0 	beq.w	801472c <rcl_init+0x158>
 80145ec:	f1a1 0e04 	sub.w	lr, r1, #4
 80145f0:	f04f 0c00 	mov.w	ip, #0
 80145f4:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80145f8:	f10c 0c01 	add.w	ip, ip, #1
 80145fc:	2c00      	cmp	r4, #0
 80145fe:	f000 8095 	beq.w	801472c <rcl_init+0x158>
 8014602:	4565      	cmp	r5, ip
 8014604:	d1f6      	bne.n	80145f4 <rcl_init+0x20>
 8014606:	f1b8 0f00 	cmp.w	r8, #0
 801460a:	f000 808f 	beq.w	801472c <rcl_init+0x158>
 801460e:	f8d8 4000 	ldr.w	r4, [r8]
 8014612:	2c00      	cmp	r4, #0
 8014614:	f000 808a 	beq.w	801472c <rcl_init+0x158>
 8014618:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 801461c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801461e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014622:	6823      	ldr	r3, [r4, #0]
 8014624:	a821      	add	r0, sp, #132	; 0x84
 8014626:	f8cc 3000 	str.w	r3, [ip]
 801462a:	f7f9 facd 	bl	800dbc8 <rcutils_allocator_is_valid>
 801462e:	f080 0001 	eor.w	r0, r0, #1
 8014632:	b2c0      	uxtb	r0, r0
 8014634:	2800      	cmp	r0, #0
 8014636:	d179      	bne.n	801472c <rcl_init+0x158>
 8014638:	2f00      	cmp	r7, #0
 801463a:	d077      	beq.n	801472c <rcl_init+0x158>
 801463c:	683b      	ldr	r3, [r7, #0]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d179      	bne.n	8014736 <rcl_init+0x162>
 8014642:	2198      	movs	r1, #152	; 0x98
 8014644:	2001      	movs	r0, #1
 8014646:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 801464a:	4798      	blx	r3
 801464c:	4604      	mov	r4, r0
 801464e:	6038      	str	r0, [r7, #0]
 8014650:	2800      	cmp	r0, #0
 8014652:	f000 80cd 	beq.w	80147f0 <rcl_init+0x21c>
 8014656:	a802      	add	r0, sp, #8
 8014658:	f003 fbea 	bl	8017e30 <rmw_get_zero_initialized_context>
 801465c:	a902      	add	r1, sp, #8
 801465e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014662:	2270      	movs	r2, #112	; 0x70
 8014664:	f008 f957 	bl	801c916 <memcpy>
 8014668:	f8d7 e000 	ldr.w	lr, [r7]
 801466c:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 8014670:	4674      	mov	r4, lr
 8014672:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014678:	f8dc 3000 	ldr.w	r3, [ip]
 801467c:	f10e 0114 	add.w	r1, lr, #20
 8014680:	4640      	mov	r0, r8
 8014682:	6023      	str	r3, [r4, #0]
 8014684:	f000 f968 	bl	8014958 <rcl_init_options_copy>
 8014688:	4604      	mov	r4, r0
 801468a:	2800      	cmp	r0, #0
 801468c:	d144      	bne.n	8014718 <rcl_init+0x144>
 801468e:	f8d7 9000 	ldr.w	r9, [r7]
 8014692:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 8014696:	f8c9 0020 	str.w	r0, [r9, #32]
 801469a:	f8c9 5018 	str.w	r5, [r9, #24]
 801469e:	f8c9 a01c 	str.w	sl, [r9, #28]
 80146a2:	2d00      	cmp	r5, #0
 80146a4:	d04e      	beq.n	8014744 <rcl_init+0x170>
 80146a6:	2e00      	cmp	r6, #0
 80146a8:	d04c      	beq.n	8014744 <rcl_init+0x170>
 80146aa:	2104      	movs	r1, #4
 80146ac:	4628      	mov	r0, r5
 80146ae:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 80146b2:	4798      	blx	r3
 80146b4:	f8c9 0020 	str.w	r0, [r9, #32]
 80146b8:	f8d7 9000 	ldr.w	r9, [r7]
 80146bc:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80146c0:	46cb      	mov	fp, r9
 80146c2:	b343      	cbz	r3, 8014716 <rcl_init+0x142>
 80146c4:	2d01      	cmp	r5, #1
 80146c6:	f17a 0300 	sbcs.w	r3, sl, #0
 80146ca:	db3b      	blt.n	8014744 <rcl_init+0x170>
 80146cc:	2400      	movs	r4, #0
 80146ce:	3e04      	subs	r6, #4
 80146d0:	46a1      	mov	r9, r4
 80146d2:	e00b      	b.n	80146ec <rcl_init+0x118>
 80146d4:	6831      	ldr	r1, [r6, #0]
 80146d6:	f008 f91e 	bl	801c916 <memcpy>
 80146da:	3401      	adds	r4, #1
 80146dc:	f149 0900 	adc.w	r9, r9, #0
 80146e0:	45ca      	cmp	sl, r9
 80146e2:	bf08      	it	eq
 80146e4:	42a5      	cmpeq	r5, r4
 80146e6:	d02b      	beq.n	8014740 <rcl_init+0x16c>
 80146e8:	f8d7 b000 	ldr.w	fp, [r7]
 80146ec:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80146f0:	f7eb fe06 	bl	8000300 <strlen>
 80146f4:	1c42      	adds	r2, r0, #1
 80146f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80146f8:	4610      	mov	r0, r2
 80146fa:	9925      	ldr	r1, [sp, #148]	; 0x94
 80146fc:	f8db b020 	ldr.w	fp, [fp, #32]
 8014700:	9201      	str	r2, [sp, #4]
 8014702:	4798      	blx	r3
 8014704:	683b      	ldr	r3, [r7, #0]
 8014706:	f84b 0024 	str.w	r0, [fp, r4, lsl #2]
 801470a:	6a1b      	ldr	r3, [r3, #32]
 801470c:	9a01      	ldr	r2, [sp, #4]
 801470e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014712:	2800      	cmp	r0, #0
 8014714:	d1de      	bne.n	80146d4 <rcl_init+0x100>
 8014716:	240a      	movs	r4, #10
 8014718:	4638      	mov	r0, r7
 801471a:	f7ff fefb 	bl	8014514 <__cleanup_context>
 801471e:	4620      	mov	r0, r4
 8014720:	b027      	add	sp, #156	; 0x9c
 8014722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014726:	2900      	cmp	r1, #0
 8014728:	f43f af6d 	beq.w	8014606 <rcl_init+0x32>
 801472c:	240b      	movs	r4, #11
 801472e:	4620      	mov	r0, r4
 8014730:	b027      	add	sp, #156	; 0x9c
 8014732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014736:	2464      	movs	r4, #100	; 0x64
 8014738:	4620      	mov	r0, r4
 801473a:	b027      	add	sp, #156	; 0x9c
 801473c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014740:	f8d7 9000 	ldr.w	r9, [r7]
 8014744:	493f      	ldr	r1, [pc, #252]	; (8014844 <rcl_init+0x270>)
 8014746:	680b      	ldr	r3, [r1, #0]
 8014748:	3301      	adds	r3, #1
 801474a:	d04c      	beq.n	80147e6 <rcl_init+0x212>
 801474c:	461a      	mov	r2, r3
 801474e:	2000      	movs	r0, #0
 8014750:	600b      	str	r3, [r1, #0]
 8014752:	f8d9 5014 	ldr.w	r5, [r9, #20]
 8014756:	607b      	str	r3, [r7, #4]
 8014758:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801475a:	3301      	adds	r3, #1
 801475c:	e9c5 2006 	strd	r2, r0, [r5, #24]
 8014760:	d05d      	beq.n	801481e <rcl_init+0x24a>
 8014762:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8014766:	2b00      	cmp	r3, #0
 8014768:	d044      	beq.n	80147f4 <rcl_init+0x220>
 801476a:	2b01      	cmp	r3, #1
 801476c:	d04e      	beq.n	801480c <rcl_init+0x238>
 801476e:	f8d8 3000 	ldr.w	r3, [r8]
 8014772:	f105 0634 	add.w	r6, r5, #52	; 0x34
 8014776:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801477a:	2b00      	cmp	r3, #0
 801477c:	d05a      	beq.n	8014834 <rcl_init+0x260>
 801477e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8014780:	b953      	cbnz	r3, 8014798 <rcl_init+0x1c4>
 8014782:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8014786:	2801      	cmp	r0, #1
 8014788:	d008      	beq.n	801479c <rcl_init+0x1c8>
 801478a:	a921      	add	r1, sp, #132	; 0x84
 801478c:	4630      	mov	r0, r6
 801478e:	f006 fceb 	bl	801b168 <rcl_get_discovery_static_peers>
 8014792:	4604      	mov	r4, r0
 8014794:	2800      	cmp	r0, #0
 8014796:	d1bf      	bne.n	8014718 <rcl_init+0x144>
 8014798:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 801479c:	f006 fcda 	bl	801b154 <rcl_automatic_discovery_range_to_string>
 80147a0:	683b      	ldr	r3, [r7, #0]
 80147a2:	aa20      	add	r2, sp, #128	; 0x80
 80147a4:	a91f      	add	r1, sp, #124	; 0x7c
 80147a6:	695b      	ldr	r3, [r3, #20]
 80147a8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80147aa:	f001 fc79 	bl	80160a0 <rcl_validate_enclave_name>
 80147ae:	4604      	mov	r4, r0
 80147b0:	2800      	cmp	r0, #0
 80147b2:	d1b1      	bne.n	8014718 <rcl_init+0x144>
 80147b4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80147b6:	bb83      	cbnz	r3, 801481a <rcl_init+0x246>
 80147b8:	6839      	ldr	r1, [r7, #0]
 80147ba:	694b      	ldr	r3, [r1, #20]
 80147bc:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80147c0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80147c2:	f000 fc97 	bl	80150f4 <rcl_get_security_options_from_environment>
 80147c6:	4604      	mov	r4, r0
 80147c8:	2800      	cmp	r0, #0
 80147ca:	d1a5      	bne.n	8014718 <rcl_init+0x144>
 80147cc:	6839      	ldr	r1, [r7, #0]
 80147ce:	6948      	ldr	r0, [r1, #20]
 80147d0:	3128      	adds	r1, #40	; 0x28
 80147d2:	3018      	adds	r0, #24
 80147d4:	f003 feb2 	bl	801853c <rmw_init>
 80147d8:	4604      	mov	r4, r0
 80147da:	2800      	cmp	r0, #0
 80147dc:	d0a7      	beq.n	801472e <rcl_init+0x15a>
 80147de:	f7ff fe75 	bl	80144cc <rcl_convert_rmw_ret_to_rcl_ret>
 80147e2:	4604      	mov	r4, r0
 80147e4:	e798      	b.n	8014718 <rcl_init+0x144>
 80147e6:	2201      	movs	r2, #1
 80147e8:	4618      	mov	r0, r3
 80147ea:	600a      	str	r2, [r1, #0]
 80147ec:	4613      	mov	r3, r2
 80147ee:	e7b0      	b.n	8014752 <rcl_init+0x17e>
 80147f0:	240a      	movs	r4, #10
 80147f2:	e79c      	b.n	801472e <rcl_init+0x15a>
 80147f4:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80147f8:	f000 f90c 	bl	8014a14 <rcl_get_localhost_only>
 80147fc:	4604      	mov	r4, r0
 80147fe:	2800      	cmp	r0, #0
 8014800:	d18a      	bne.n	8014718 <rcl_init+0x144>
 8014802:	683a      	ldr	r2, [r7, #0]
 8014804:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8014808:	6955      	ldr	r5, [r2, #20]
 801480a:	e7ae      	b.n	801476a <rcl_init+0x196>
 801480c:	2302      	movs	r3, #2
 801480e:	2200      	movs	r2, #0
 8014810:	4618      	mov	r0, r3
 8014812:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 8014816:	63ea      	str	r2, [r5, #60]	; 0x3c
 8014818:	e7c0      	b.n	801479c <rcl_init+0x1c8>
 801481a:	2401      	movs	r4, #1
 801481c:	e77c      	b.n	8014718 <rcl_init+0x144>
 801481e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8014822:	f006 fd07 	bl	801b234 <rcl_get_default_domain_id>
 8014826:	4604      	mov	r4, r0
 8014828:	2800      	cmp	r0, #0
 801482a:	f47f af75 	bne.w	8014718 <rcl_init+0x144>
 801482e:	683b      	ldr	r3, [r7, #0]
 8014830:	695d      	ldr	r5, [r3, #20]
 8014832:	e796      	b.n	8014762 <rcl_init+0x18e>
 8014834:	4630      	mov	r0, r6
 8014836:	f006 fc4b 	bl	801b0d0 <rcl_get_automatic_discovery_range>
 801483a:	4604      	mov	r4, r0
 801483c:	2800      	cmp	r0, #0
 801483e:	d09e      	beq.n	801477e <rcl_init+0x1aa>
 8014840:	e76a      	b.n	8014718 <rcl_init+0x144>
 8014842:	bf00      	nop
 8014844:	200107c4 	.word	0x200107c4

08014848 <rcl_get_zero_initialized_init_options>:
 8014848:	2000      	movs	r0, #0
 801484a:	4770      	bx	lr

0801484c <rcl_init_options_init>:
 801484c:	b084      	sub	sp, #16
 801484e:	b570      	push	{r4, r5, r6, lr}
 8014850:	b09e      	sub	sp, #120	; 0x78
 8014852:	ad23      	add	r5, sp, #140	; 0x8c
 8014854:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8014858:	2800      	cmp	r0, #0
 801485a:	d046      	beq.n	80148ea <rcl_init_options_init+0x9e>
 801485c:	6803      	ldr	r3, [r0, #0]
 801485e:	4604      	mov	r4, r0
 8014860:	b133      	cbz	r3, 8014870 <rcl_init_options_init+0x24>
 8014862:	2564      	movs	r5, #100	; 0x64
 8014864:	4628      	mov	r0, r5
 8014866:	b01e      	add	sp, #120	; 0x78
 8014868:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801486c:	b004      	add	sp, #16
 801486e:	4770      	bx	lr
 8014870:	4628      	mov	r0, r5
 8014872:	f7f9 f9a9 	bl	800dbc8 <rcutils_allocator_is_valid>
 8014876:	2800      	cmp	r0, #0
 8014878:	d037      	beq.n	80148ea <rcl_init_options_init+0x9e>
 801487a:	46ae      	mov	lr, r5
 801487c:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8014880:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014884:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014888:	f8de 3000 	ldr.w	r3, [lr]
 801488c:	2070      	movs	r0, #112	; 0x70
 801488e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8014890:	f8cc 3000 	str.w	r3, [ip]
 8014894:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014896:	4798      	blx	r3
 8014898:	4606      	mov	r6, r0
 801489a:	6020      	str	r0, [r4, #0]
 801489c:	b338      	cbz	r0, 80148ee <rcl_init_options_init+0xa2>
 801489e:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 80148a2:	4686      	mov	lr, r0
 80148a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80148a8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80148ac:	f8dc 3000 	ldr.w	r3, [ip]
 80148b0:	a802      	add	r0, sp, #8
 80148b2:	f8ce 3000 	str.w	r3, [lr]
 80148b6:	f003 facf 	bl	8017e58 <rmw_get_zero_initialized_init_options>
 80148ba:	2258      	movs	r2, #88	; 0x58
 80148bc:	a902      	add	r1, sp, #8
 80148be:	f106 0018 	add.w	r0, r6, #24
 80148c2:	f008 f828 	bl	801c916 <memcpy>
 80148c6:	ab26      	add	r3, sp, #152	; 0x98
 80148c8:	6826      	ldr	r6, [r4, #0]
 80148ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80148ce:	e88d 0003 	stmia.w	sp, {r0, r1}
 80148d2:	f106 0018 	add.w	r0, r6, #24
 80148d6:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80148da:	f003 fd5f 	bl	801839c <rmw_init_options_init>
 80148de:	4605      	mov	r5, r0
 80148e0:	b938      	cbnz	r0, 80148f2 <rcl_init_options_init+0xa6>
 80148e2:	6823      	ldr	r3, [r4, #0]
 80148e4:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
 80148e8:	e7bc      	b.n	8014864 <rcl_init_options_init+0x18>
 80148ea:	250b      	movs	r5, #11
 80148ec:	e7ba      	b.n	8014864 <rcl_init_options_init+0x18>
 80148ee:	250a      	movs	r5, #10
 80148f0:	e7b8      	b.n	8014864 <rcl_init_options_init+0x18>
 80148f2:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80148f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80148f6:	6820      	ldr	r0, [r4, #0]
 80148f8:	4798      	blx	r3
 80148fa:	4628      	mov	r0, r5
 80148fc:	f7ff fde6 	bl	80144cc <rcl_convert_rmw_ret_to_rcl_ret>
 8014900:	4605      	mov	r5, r0
 8014902:	e7af      	b.n	8014864 <rcl_init_options_init+0x18>

08014904 <rcl_init_options_fini>:
 8014904:	b530      	push	{r4, r5, lr}
 8014906:	b087      	sub	sp, #28
 8014908:	b1f0      	cbz	r0, 8014948 <rcl_init_options_fini+0x44>
 801490a:	6803      	ldr	r3, [r0, #0]
 801490c:	4604      	mov	r4, r0
 801490e:	b1db      	cbz	r3, 8014948 <rcl_init_options_fini+0x44>
 8014910:	469c      	mov	ip, r3
 8014912:	f10d 0e04 	add.w	lr, sp, #4
 8014916:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801491a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801491e:	f8dc 3000 	ldr.w	r3, [ip]
 8014922:	a801      	add	r0, sp, #4
 8014924:	f8ce 3000 	str.w	r3, [lr]
 8014928:	f7f9 f94e 	bl	800dbc8 <rcutils_allocator_is_valid>
 801492c:	b160      	cbz	r0, 8014948 <rcl_init_options_fini+0x44>
 801492e:	6820      	ldr	r0, [r4, #0]
 8014930:	3018      	adds	r0, #24
 8014932:	f003 fdcd 	bl	80184d0 <rmw_init_options_fini>
 8014936:	4605      	mov	r5, r0
 8014938:	b950      	cbnz	r0, 8014950 <rcl_init_options_fini+0x4c>
 801493a:	6820      	ldr	r0, [r4, #0]
 801493c:	9b02      	ldr	r3, [sp, #8]
 801493e:	9905      	ldr	r1, [sp, #20]
 8014940:	4798      	blx	r3
 8014942:	4628      	mov	r0, r5
 8014944:	b007      	add	sp, #28
 8014946:	bd30      	pop	{r4, r5, pc}
 8014948:	250b      	movs	r5, #11
 801494a:	4628      	mov	r0, r5
 801494c:	b007      	add	sp, #28
 801494e:	bd30      	pop	{r4, r5, pc}
 8014950:	f7ff fdbc 	bl	80144cc <rcl_convert_rmw_ret_to_rcl_ret>
 8014954:	4605      	mov	r5, r0
 8014956:	e7f8      	b.n	801494a <rcl_init_options_fini+0x46>

08014958 <rcl_init_options_copy>:
 8014958:	b5f0      	push	{r4, r5, r6, r7, lr}
 801495a:	b09d      	sub	sp, #116	; 0x74
 801495c:	2800      	cmp	r0, #0
 801495e:	d04d      	beq.n	80149fc <rcl_init_options_copy+0xa4>
 8014960:	4604      	mov	r4, r0
 8014962:	6800      	ldr	r0, [r0, #0]
 8014964:	2800      	cmp	r0, #0
 8014966:	d049      	beq.n	80149fc <rcl_init_options_copy+0xa4>
 8014968:	460d      	mov	r5, r1
 801496a:	f7f9 f92d 	bl	800dbc8 <rcutils_allocator_is_valid>
 801496e:	2d00      	cmp	r5, #0
 8014970:	d044      	beq.n	80149fc <rcl_init_options_copy+0xa4>
 8014972:	f080 0001 	eor.w	r0, r0, #1
 8014976:	b2c0      	uxtb	r0, r0
 8014978:	2800      	cmp	r0, #0
 801497a:	d13f      	bne.n	80149fc <rcl_init_options_copy+0xa4>
 801497c:	682b      	ldr	r3, [r5, #0]
 801497e:	b11b      	cbz	r3, 8014988 <rcl_init_options_copy+0x30>
 8014980:	2464      	movs	r4, #100	; 0x64
 8014982:	4620      	mov	r0, r4
 8014984:	b01d      	add	sp, #116	; 0x74
 8014986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014988:	6826      	ldr	r6, [r4, #0]
 801498a:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 801498e:	46b6      	mov	lr, r6
 8014990:	6837      	ldr	r7, [r6, #0]
 8014992:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014996:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801499a:	f8de 3000 	ldr.w	r3, [lr]
 801499e:	2070      	movs	r0, #112	; 0x70
 80149a0:	4619      	mov	r1, r3
 80149a2:	f8cc 3000 	str.w	r3, [ip]
 80149a6:	47b8      	blx	r7
 80149a8:	4606      	mov	r6, r0
 80149aa:	6028      	str	r0, [r5, #0]
 80149ac:	b350      	cbz	r0, 8014a04 <rcl_init_options_copy+0xac>
 80149ae:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 80149b2:	4686      	mov	lr, r0
 80149b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80149b8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80149bc:	f8dc 3000 	ldr.w	r3, [ip]
 80149c0:	4668      	mov	r0, sp
 80149c2:	f8ce 3000 	str.w	r3, [lr]
 80149c6:	f003 fa47 	bl	8017e58 <rmw_get_zero_initialized_init_options>
 80149ca:	2258      	movs	r2, #88	; 0x58
 80149cc:	4669      	mov	r1, sp
 80149ce:	f106 0018 	add.w	r0, r6, #24
 80149d2:	f007 ffa0 	bl	801c916 <memcpy>
 80149d6:	6820      	ldr	r0, [r4, #0]
 80149d8:	6829      	ldr	r1, [r5, #0]
 80149da:	3018      	adds	r0, #24
 80149dc:	3118      	adds	r1, #24
 80149de:	f003 fd45 	bl	801846c <rmw_init_options_copy>
 80149e2:	4604      	mov	r4, r0
 80149e4:	2800      	cmp	r0, #0
 80149e6:	d0cc      	beq.n	8014982 <rcl_init_options_copy+0x2a>
 80149e8:	f7f9 f8fc 	bl	800dbe4 <rcutils_get_error_string>
 80149ec:	f7f9 f910 	bl	800dc10 <rcutils_reset_error>
 80149f0:	4628      	mov	r0, r5
 80149f2:	f7ff ff87 	bl	8014904 <rcl_init_options_fini>
 80149f6:	b138      	cbz	r0, 8014a08 <rcl_init_options_copy+0xb0>
 80149f8:	4604      	mov	r4, r0
 80149fa:	e7c2      	b.n	8014982 <rcl_init_options_copy+0x2a>
 80149fc:	240b      	movs	r4, #11
 80149fe:	4620      	mov	r0, r4
 8014a00:	b01d      	add	sp, #116	; 0x74
 8014a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a04:	240a      	movs	r4, #10
 8014a06:	e7bc      	b.n	8014982 <rcl_init_options_copy+0x2a>
 8014a08:	4620      	mov	r0, r4
 8014a0a:	b01d      	add	sp, #116	; 0x74
 8014a0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014a10:	f7ff bd5c 	b.w	80144cc <rcl_convert_rmw_ret_to_rcl_ret>

08014a14 <rcl_get_localhost_only>:
 8014a14:	b510      	push	{r4, lr}
 8014a16:	2300      	movs	r3, #0
 8014a18:	b082      	sub	sp, #8
 8014a1a:	9301      	str	r3, [sp, #4]
 8014a1c:	b1c0      	cbz	r0, 8014a50 <rcl_get_localhost_only+0x3c>
 8014a1e:	4604      	mov	r4, r0
 8014a20:	a901      	add	r1, sp, #4
 8014a22:	480d      	ldr	r0, [pc, #52]	; (8014a58 <rcl_get_localhost_only+0x44>)
 8014a24:	f002 ff54 	bl	80178d0 <rcutils_get_env>
 8014a28:	b110      	cbz	r0, 8014a30 <rcl_get_localhost_only+0x1c>
 8014a2a:	2001      	movs	r0, #1
 8014a2c:	b002      	add	sp, #8
 8014a2e:	bd10      	pop	{r4, pc}
 8014a30:	9b01      	ldr	r3, [sp, #4]
 8014a32:	b10b      	cbz	r3, 8014a38 <rcl_get_localhost_only+0x24>
 8014a34:	781b      	ldrb	r3, [r3, #0]
 8014a36:	b923      	cbnz	r3, 8014a42 <rcl_get_localhost_only+0x2e>
 8014a38:	2300      	movs	r3, #0
 8014a3a:	4618      	mov	r0, r3
 8014a3c:	7023      	strb	r3, [r4, #0]
 8014a3e:	b002      	add	sp, #8
 8014a40:	bd10      	pop	{r4, pc}
 8014a42:	2b31      	cmp	r3, #49	; 0x31
 8014a44:	bf0c      	ite	eq
 8014a46:	2301      	moveq	r3, #1
 8014a48:	2302      	movne	r3, #2
 8014a4a:	7023      	strb	r3, [r4, #0]
 8014a4c:	b002      	add	sp, #8
 8014a4e:	bd10      	pop	{r4, pc}
 8014a50:	200b      	movs	r0, #11
 8014a52:	b002      	add	sp, #8
 8014a54:	bd10      	pop	{r4, pc}
 8014a56:	bf00      	nop
 8014a58:	0801e9a8 	.word	0x0801e9a8

08014a5c <rcl_get_zero_initialized_node>:
 8014a5c:	4a03      	ldr	r2, [pc, #12]	; (8014a6c <rcl_get_zero_initialized_node+0x10>)
 8014a5e:	4603      	mov	r3, r0
 8014a60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014a64:	e883 0003 	stmia.w	r3, {r0, r1}
 8014a68:	4618      	mov	r0, r3
 8014a6a:	4770      	bx	lr
 8014a6c:	0801e9ec 	.word	0x0801e9ec

08014a70 <rcl_node_init>:
 8014a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a74:	b0ab      	sub	sp, #172	; 0xac
 8014a76:	4604      	mov	r4, r0
 8014a78:	460e      	mov	r6, r1
 8014a7a:	4615      	mov	r5, r2
 8014a7c:	f8dd 80d0 	ldr.w	r8, [sp, #208]	; 0xd0
 8014a80:	a825      	add	r0, sp, #148	; 0x94
 8014a82:	461f      	mov	r7, r3
 8014a84:	f006 fe4a 	bl	801b71c <rcl_guard_condition_get_default_options>
 8014a88:	f1b8 0f00 	cmp.w	r8, #0
 8014a8c:	f000 80f3 	beq.w	8014c76 <rcl_node_init+0x206>
 8014a90:	4640      	mov	r0, r8
 8014a92:	f7f9 f899 	bl	800dbc8 <rcutils_allocator_is_valid>
 8014a96:	2d00      	cmp	r5, #0
 8014a98:	bf18      	it	ne
 8014a9a:	2c00      	cmpne	r4, #0
 8014a9c:	f080 0001 	eor.w	r0, r0, #1
 8014aa0:	bf0c      	ite	eq
 8014aa2:	f04f 0c01 	moveq.w	ip, #1
 8014aa6:	f04f 0c00 	movne.w	ip, #0
 8014aaa:	2e00      	cmp	r6, #0
 8014aac:	bf08      	it	eq
 8014aae:	f04c 0c01 	orreq.w	ip, ip, #1
 8014ab2:	ea4c 0c00 	orr.w	ip, ip, r0
 8014ab6:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 8014aba:	f040 80dc 	bne.w	8014c76 <rcl_node_init+0x206>
 8014abe:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8014ac2:	f1ba 0f00 	cmp.w	sl, #0
 8014ac6:	f040 80fc 	bne.w	8014cc2 <rcl_node_init+0x252>
 8014aca:	2f00      	cmp	r7, #0
 8014acc:	f000 80d3 	beq.w	8014c76 <rcl_node_init+0x206>
 8014ad0:	4638      	mov	r0, r7
 8014ad2:	f7ff fd19 	bl	8014508 <rcl_context_is_valid>
 8014ad6:	4683      	mov	fp, r0
 8014ad8:	2800      	cmp	r0, #0
 8014ada:	f000 80d2 	beq.w	8014c82 <rcl_node_init+0x212>
 8014ade:	4652      	mov	r2, sl
 8014ae0:	4630      	mov	r0, r6
 8014ae2:	a924      	add	r1, sp, #144	; 0x90
 8014ae4:	f8cd a090 	str.w	sl, [sp, #144]	; 0x90
 8014ae8:	f003 fb6c 	bl	80181c4 <rmw_validate_node_name>
 8014aec:	4682      	mov	sl, r0
 8014aee:	2800      	cmp	r0, #0
 8014af0:	f040 80c3 	bne.w	8014c7a <rcl_node_init+0x20a>
 8014af4:	9824      	ldr	r0, [sp, #144]	; 0x90
 8014af6:	2800      	cmp	r0, #0
 8014af8:	f040 80f1 	bne.w	8014cde <rcl_node_init+0x26e>
 8014afc:	4628      	mov	r0, r5
 8014afe:	f7eb fbff 	bl	8000300 <strlen>
 8014b02:	2800      	cmp	r0, #0
 8014b04:	f040 80c0 	bne.w	8014c88 <rcl_node_init+0x218>
 8014b08:	4d79      	ldr	r5, [pc, #484]	; (8014cf0 <rcl_node_init+0x280>)
 8014b0a:	a924      	add	r1, sp, #144	; 0x90
 8014b0c:	2200      	movs	r2, #0
 8014b0e:	4628      	mov	r0, r5
 8014b10:	f003 fb3a 	bl	8018188 <rmw_validate_namespace>
 8014b14:	4682      	mov	sl, r0
 8014b16:	2800      	cmp	r0, #0
 8014b18:	f040 80af 	bne.w	8014c7a <rcl_node_init+0x20a>
 8014b1c:	9824      	ldr	r0, [sp, #144]	; 0x90
 8014b1e:	2800      	cmp	r0, #0
 8014b20:	f040 80d5 	bne.w	8014cce <rcl_node_init+0x25e>
 8014b24:	f8d8 3000 	ldr.w	r3, [r8]
 8014b28:	2080      	movs	r0, #128	; 0x80
 8014b2a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014b2e:	4798      	blx	r3
 8014b30:	4682      	mov	sl, r0
 8014b32:	6060      	str	r0, [r4, #4]
 8014b34:	2800      	cmp	r0, #0
 8014b36:	f000 80cf 	beq.w	8014cd8 <rcl_node_init+0x268>
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	2300      	movs	r3, #0
 8014b3e:	a808      	add	r0, sp, #32
 8014b40:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 8014b44:	e9ca 231e 	strd	r2, r3, [sl, #120]	; 0x78
 8014b48:	f000 f922 	bl	8014d90 <rcl_node_get_default_options>
 8014b4c:	a908      	add	r1, sp, #32
 8014b4e:	4650      	mov	r0, sl
 8014b50:	2270      	movs	r2, #112	; 0x70
 8014b52:	f007 fee0 	bl	801c916 <memcpy>
 8014b56:	6861      	ldr	r1, [r4, #4]
 8014b58:	4640      	mov	r0, r8
 8014b5a:	6027      	str	r7, [r4, #0]
 8014b5c:	f000 f926 	bl	8014dac <rcl_node_options_copy>
 8014b60:	2800      	cmp	r0, #0
 8014b62:	d158      	bne.n	8014c16 <rcl_node_init+0x1a6>
 8014b64:	4628      	mov	r0, r5
 8014b66:	f7eb fbcb 	bl	8000300 <strlen>
 8014b6a:	4428      	add	r0, r5
 8014b6c:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8014b70:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8014b74:	2b2f      	cmp	r3, #47	; 0x2f
 8014b76:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014b7a:	9300      	str	r3, [sp, #0]
 8014b7c:	bf0c      	ite	eq
 8014b7e:	4b5d      	ldreq	r3, [pc, #372]	; (8014cf4 <rcl_node_init+0x284>)
 8014b80:	4b5d      	ldrne	r3, [pc, #372]	; (8014cf8 <rcl_node_init+0x288>)
 8014b82:	9302      	str	r3, [sp, #8]
 8014b84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014b88:	9301      	str	r3, [sp, #4]
 8014b8a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8014b8e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014b92:	f002 fec5 	bl	8017920 <rcutils_format_string_limit>
 8014b96:	6823      	ldr	r3, [r4, #0]
 8014b98:	f8ca 007c 	str.w	r0, [sl, #124]	; 0x7c
 8014b9c:	4631      	mov	r1, r6
 8014b9e:	6818      	ldr	r0, [r3, #0]
 8014ba0:	462a      	mov	r2, r5
 8014ba2:	6866      	ldr	r6, [r4, #4]
 8014ba4:	3028      	adds	r0, #40	; 0x28
 8014ba6:	f003 ff23 	bl	80189f0 <rmw_create_node>
 8014baa:	6863      	ldr	r3, [r4, #4]
 8014bac:	6730      	str	r0, [r6, #112]	; 0x70
 8014bae:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8014bb0:	2800      	cmp	r0, #0
 8014bb2:	d032      	beq.n	8014c1a <rcl_node_init+0x1aa>
 8014bb4:	f003 ffac 	bl	8018b10 <rmw_node_get_graph_guard_condition>
 8014bb8:	4682      	mov	sl, r0
 8014bba:	b360      	cbz	r0, 8014c16 <rcl_node_init+0x1a6>
 8014bbc:	f8d8 3000 	ldr.w	r3, [r8]
 8014bc0:	2008      	movs	r0, #8
 8014bc2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014bc6:	6866      	ldr	r6, [r4, #4]
 8014bc8:	4798      	blx	r3
 8014bca:	6863      	ldr	r3, [r4, #4]
 8014bcc:	6770      	str	r0, [r6, #116]	; 0x74
 8014bce:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
 8014bd2:	f1bb 0f00 	cmp.w	fp, #0
 8014bd6:	d020      	beq.n	8014c1a <rcl_node_init+0x1aa>
 8014bd8:	a806      	add	r0, sp, #24
 8014bda:	ae25      	add	r6, sp, #148	; 0x94
 8014bdc:	f006 fcc4 	bl	801b568 <rcl_get_zero_initialized_guard_condition>
 8014be0:	a806      	add	r0, sp, #24
 8014be2:	6863      	ldr	r3, [r4, #4]
 8014be4:	46c4      	mov	ip, r8
 8014be6:	c803      	ldmia	r0, {r0, r1}
 8014be8:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
 8014bec:	e88b 0003 	stmia.w	fp, {r0, r1}
 8014bf0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014bf4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014bf6:	f8dc 3000 	ldr.w	r3, [ip]
 8014bfa:	6033      	str	r3, [r6, #0]
 8014bfc:	ab2a      	add	r3, sp, #168	; 0xa8
 8014bfe:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8014c02:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014c06:	4651      	mov	r1, sl
 8014c08:	463a      	mov	r2, r7
 8014c0a:	4670      	mov	r0, lr
 8014c0c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014c0e:	f006 fd03 	bl	801b618 <rcl_guard_condition_init_from_rmw>
 8014c12:	4682      	mov	sl, r0
 8014c14:	b328      	cbz	r0, 8014c62 <rcl_node_init+0x1f2>
 8014c16:	6863      	ldr	r3, [r4, #4]
 8014c18:	b1f3      	cbz	r3, 8014c58 <rcl_node_init+0x1e8>
 8014c1a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8014c1c:	b128      	cbz	r0, 8014c2a <rcl_node_init+0x1ba>
 8014c1e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014c22:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014c26:	4798      	blx	r3
 8014c28:	6863      	ldr	r3, [r4, #4]
 8014c2a:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8014c2c:	b110      	cbz	r0, 8014c34 <rcl_node_init+0x1c4>
 8014c2e:	f003 fef1 	bl	8018a14 <rmw_destroy_node>
 8014c32:	6863      	ldr	r3, [r4, #4]
 8014c34:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8014c36:	b148      	cbz	r0, 8014c4c <rcl_node_init+0x1dc>
 8014c38:	f006 fd4a 	bl	801b6d0 <rcl_guard_condition_fini>
 8014c3c:	6863      	ldr	r3, [r4, #4]
 8014c3e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014c42:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8014c44:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014c48:	4798      	blx	r3
 8014c4a:	6863      	ldr	r3, [r4, #4]
 8014c4c:	4618      	mov	r0, r3
 8014c4e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014c52:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014c56:	4798      	blx	r3
 8014c58:	2300      	movs	r3, #0
 8014c5a:	f04f 0a01 	mov.w	sl, #1
 8014c5e:	e9c4 3300 	strd	r3, r3, [r4]
 8014c62:	f1b9 0f00 	cmp.w	r9, #0
 8014c66:	d008      	beq.n	8014c7a <rcl_node_init+0x20a>
 8014c68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014c6c:	4628      	mov	r0, r5
 8014c6e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014c72:	4798      	blx	r3
 8014c74:	e001      	b.n	8014c7a <rcl_node_init+0x20a>
 8014c76:	f04f 0a0b 	mov.w	sl, #11
 8014c7a:	4650      	mov	r0, sl
 8014c7c:	b02b      	add	sp, #172	; 0xac
 8014c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c82:	f04f 0a65 	mov.w	sl, #101	; 0x65
 8014c86:	e7f8      	b.n	8014c7a <rcl_node_init+0x20a>
 8014c88:	782b      	ldrb	r3, [r5, #0]
 8014c8a:	2b2f      	cmp	r3, #47	; 0x2f
 8014c8c:	f43f af3d 	beq.w	8014b0a <rcl_node_init+0x9a>
 8014c90:	9503      	str	r5, [sp, #12]
 8014c92:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014c96:	9300      	str	r3, [sp, #0]
 8014c98:	4b18      	ldr	r3, [pc, #96]	; (8014cfc <rcl_node_init+0x28c>)
 8014c9a:	9302      	str	r3, [sp, #8]
 8014c9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014ca0:	9301      	str	r3, [sp, #4]
 8014ca2:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014ca6:	f002 fe3b 	bl	8017920 <rcutils_format_string_limit>
 8014caa:	4605      	mov	r5, r0
 8014cac:	b1e0      	cbz	r0, 8014ce8 <rcl_node_init+0x278>
 8014cae:	2200      	movs	r2, #0
 8014cb0:	a924      	add	r1, sp, #144	; 0x90
 8014cb2:	9224      	str	r2, [sp, #144]	; 0x90
 8014cb4:	f003 fa68 	bl	8018188 <rmw_validate_namespace>
 8014cb8:	4682      	mov	sl, r0
 8014cba:	2800      	cmp	r0, #0
 8014cbc:	d1d4      	bne.n	8014c68 <rcl_node_init+0x1f8>
 8014cbe:	46d9      	mov	r9, fp
 8014cc0:	e72c      	b.n	8014b1c <rcl_node_init+0xac>
 8014cc2:	f04f 0a64 	mov.w	sl, #100	; 0x64
 8014cc6:	4650      	mov	r0, sl
 8014cc8:	b02b      	add	sp, #172	; 0xac
 8014cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cce:	f04f 0aca 	mov.w	sl, #202	; 0xca
 8014cd2:	f003 fa6b 	bl	80181ac <rmw_namespace_validation_result_string>
 8014cd6:	e7c4      	b.n	8014c62 <rcl_node_init+0x1f2>
 8014cd8:	f04f 0a0a 	mov.w	sl, #10
 8014cdc:	e7c1      	b.n	8014c62 <rcl_node_init+0x1f2>
 8014cde:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 8014ce2:	f003 fac3 	bl	801826c <rmw_node_name_validation_result_string>
 8014ce6:	e7c8      	b.n	8014c7a <rcl_node_init+0x20a>
 8014ce8:	f04f 0a0a 	mov.w	sl, #10
 8014cec:	e7c5      	b.n	8014c7a <rcl_node_init+0x20a>
 8014cee:	bf00      	nop
 8014cf0:	0801e9c0 	.word	0x0801e9c0
 8014cf4:	0801e538 	.word	0x0801e538
 8014cf8:	0801e9c8 	.word	0x0801e9c8
 8014cfc:	0801e9c4 	.word	0x0801e9c4

08014d00 <rcl_node_is_valid>:
 8014d00:	b130      	cbz	r0, 8014d10 <rcl_node_is_valid+0x10>
 8014d02:	6843      	ldr	r3, [r0, #4]
 8014d04:	b123      	cbz	r3, 8014d10 <rcl_node_is_valid+0x10>
 8014d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d08:	b113      	cbz	r3, 8014d10 <rcl_node_is_valid+0x10>
 8014d0a:	6800      	ldr	r0, [r0, #0]
 8014d0c:	f7ff bbfc 	b.w	8014508 <rcl_context_is_valid>
 8014d10:	2000      	movs	r0, #0
 8014d12:	4770      	bx	lr

08014d14 <rcl_node_get_name>:
 8014d14:	b120      	cbz	r0, 8014d20 <rcl_node_get_name+0xc>
 8014d16:	6840      	ldr	r0, [r0, #4]
 8014d18:	b110      	cbz	r0, 8014d20 <rcl_node_get_name+0xc>
 8014d1a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8014d1c:	b100      	cbz	r0, 8014d20 <rcl_node_get_name+0xc>
 8014d1e:	6880      	ldr	r0, [r0, #8]
 8014d20:	4770      	bx	lr
 8014d22:	bf00      	nop

08014d24 <rcl_node_get_namespace>:
 8014d24:	b120      	cbz	r0, 8014d30 <rcl_node_get_namespace+0xc>
 8014d26:	6840      	ldr	r0, [r0, #4]
 8014d28:	b110      	cbz	r0, 8014d30 <rcl_node_get_namespace+0xc>
 8014d2a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8014d2c:	b100      	cbz	r0, 8014d30 <rcl_node_get_namespace+0xc>
 8014d2e:	68c0      	ldr	r0, [r0, #12]
 8014d30:	4770      	bx	lr
 8014d32:	bf00      	nop

08014d34 <rcl_node_get_options>:
 8014d34:	b128      	cbz	r0, 8014d42 <rcl_node_get_options+0xe>
 8014d36:	6840      	ldr	r0, [r0, #4]
 8014d38:	b118      	cbz	r0, 8014d42 <rcl_node_get_options+0xe>
 8014d3a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	bf08      	it	eq
 8014d40:	2000      	moveq	r0, #0
 8014d42:	4770      	bx	lr

08014d44 <rcl_node_get_rmw_handle>:
 8014d44:	b110      	cbz	r0, 8014d4c <rcl_node_get_rmw_handle+0x8>
 8014d46:	6840      	ldr	r0, [r0, #4]
 8014d48:	b100      	cbz	r0, 8014d4c <rcl_node_get_rmw_handle+0x8>
 8014d4a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8014d4c:	4770      	bx	lr
 8014d4e:	bf00      	nop

08014d50 <rcl_get_disable_loaned_message>:
 8014d50:	b510      	push	{r4, lr}
 8014d52:	2300      	movs	r3, #0
 8014d54:	b082      	sub	sp, #8
 8014d56:	9301      	str	r3, [sp, #4]
 8014d58:	b1a0      	cbz	r0, 8014d84 <rcl_get_disable_loaned_message+0x34>
 8014d5a:	4604      	mov	r4, r0
 8014d5c:	a901      	add	r1, sp, #4
 8014d5e:	480b      	ldr	r0, [pc, #44]	; (8014d8c <rcl_get_disable_loaned_message+0x3c>)
 8014d60:	f002 fdb6 	bl	80178d0 <rcutils_get_env>
 8014d64:	b110      	cbz	r0, 8014d6c <rcl_get_disable_loaned_message+0x1c>
 8014d66:	2001      	movs	r0, #1
 8014d68:	b002      	add	sp, #8
 8014d6a:	bd10      	pop	{r4, pc}
 8014d6c:	9a01      	ldr	r2, [sp, #4]
 8014d6e:	2000      	movs	r0, #0
 8014d70:	7813      	ldrb	r3, [r2, #0]
 8014d72:	3b31      	subs	r3, #49	; 0x31
 8014d74:	bf08      	it	eq
 8014d76:	7853      	ldrbeq	r3, [r2, #1]
 8014d78:	fab3 f383 	clz	r3, r3
 8014d7c:	095b      	lsrs	r3, r3, #5
 8014d7e:	7023      	strb	r3, [r4, #0]
 8014d80:	b002      	add	sp, #8
 8014d82:	bd10      	pop	{r4, pc}
 8014d84:	200b      	movs	r0, #11
 8014d86:	b002      	add	sp, #8
 8014d88:	bd10      	pop	{r4, pc}
 8014d8a:	bf00      	nop
 8014d8c:	0801e9d0 	.word	0x0801e9d0

08014d90 <rcl_node_get_default_options>:
 8014d90:	b510      	push	{r4, lr}
 8014d92:	4604      	mov	r4, r0
 8014d94:	2270      	movs	r2, #112	; 0x70
 8014d96:	2100      	movs	r1, #0
 8014d98:	f007 fc8c 	bl	801c6b4 <memset>
 8014d9c:	4620      	mov	r0, r4
 8014d9e:	f7f8 ff05 	bl	800dbac <rcutils_get_default_allocator>
 8014da2:	2301      	movs	r3, #1
 8014da4:	4620      	mov	r0, r4
 8014da6:	7523      	strb	r3, [r4, #20]
 8014da8:	bd10      	pop	{r4, pc}
 8014daa:	bf00      	nop

08014dac <rcl_node_options_copy>:
 8014dac:	2800      	cmp	r0, #0
 8014dae:	bf18      	it	ne
 8014db0:	4288      	cmpne	r0, r1
 8014db2:	d01b      	beq.n	8014dec <rcl_node_options_copy+0x40>
 8014db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014db6:	fab1 f681 	clz	r6, r1
 8014dba:	460c      	mov	r4, r1
 8014dbc:	0976      	lsrs	r6, r6, #5
 8014dbe:	b199      	cbz	r1, 8014de8 <rcl_node_options_copy+0x3c>
 8014dc0:	4605      	mov	r5, r0
 8014dc2:	8a87      	ldrh	r7, [r0, #20]
 8014dc4:	4684      	mov	ip, r0
 8014dc6:	468e      	mov	lr, r1
 8014dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014dca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014dce:	682b      	ldr	r3, [r5, #0]
 8014dd0:	2250      	movs	r2, #80	; 0x50
 8014dd2:	f10c 0118 	add.w	r1, ip, #24
 8014dd6:	f104 0018 	add.w	r0, r4, #24
 8014dda:	f8ce 3000 	str.w	r3, [lr]
 8014dde:	82a7      	strh	r7, [r4, #20]
 8014de0:	f007 fd99 	bl	801c916 <memcpy>
 8014de4:	4630      	mov	r0, r6
 8014de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014de8:	200b      	movs	r0, #11
 8014dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014dec:	200b      	movs	r0, #11
 8014dee:	4770      	bx	lr

08014df0 <rcl_node_resolve_name>:
 8014df0:	b082      	sub	sp, #8
 8014df2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014df6:	b091      	sub	sp, #68	; 0x44
 8014df8:	ac1a      	add	r4, sp, #104	; 0x68
 8014dfa:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 8014dfe:	e884 000c 	stmia.w	r4, {r2, r3}
 8014e02:	2800      	cmp	r0, #0
 8014e04:	d03d      	beq.n	8014e82 <rcl_node_resolve_name+0x92>
 8014e06:	460c      	mov	r4, r1
 8014e08:	4605      	mov	r5, r0
 8014e0a:	f7ff ff93 	bl	8014d34 <rcl_node_get_options>
 8014e0e:	2800      	cmp	r0, #0
 8014e10:	d03a      	beq.n	8014e88 <rcl_node_resolve_name+0x98>
 8014e12:	4628      	mov	r0, r5
 8014e14:	f7ff ff7e 	bl	8014d14 <rcl_node_get_name>
 8014e18:	4606      	mov	r6, r0
 8014e1a:	4628      	mov	r0, r5
 8014e1c:	ad0b      	add	r5, sp, #44	; 0x2c
 8014e1e:	f7ff ff81 	bl	8014d24 <rcl_node_get_namespace>
 8014e22:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8014e26:	4607      	mov	r7, r0
 8014e28:	46ac      	mov	ip, r5
 8014e2a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014e2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014e32:	f8de 3000 	ldr.w	r3, [lr]
 8014e36:	f8cc 3000 	str.w	r3, [ip]
 8014e3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e3c:	b30b      	cbz	r3, 8014e82 <rcl_node_resolve_name+0x92>
 8014e3e:	4689      	mov	r9, r1
 8014e40:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8014e44:	f002 feee 	bl	8017c24 <rcutils_get_zero_initialized_string_map>
 8014e48:	ab10      	add	r3, sp, #64	; 0x40
 8014e4a:	9008      	str	r0, [sp, #32]
 8014e4c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8014e50:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014e54:	2100      	movs	r1, #0
 8014e56:	a808      	add	r0, sp, #32
 8014e58:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014e5c:	f002 ff34 	bl	8017cc8 <rcutils_string_map_init>
 8014e60:	4683      	mov	fp, r0
 8014e62:	b1a0      	cbz	r0, 8014e8e <rcl_node_resolve_name+0x9e>
 8014e64:	f7f8 febe 	bl	800dbe4 <rcutils_get_error_string>
 8014e68:	f7f8 fed2 	bl	800dc10 <rcutils_reset_error>
 8014e6c:	f1bb 0f0a 	cmp.w	fp, #10
 8014e70:	bf18      	it	ne
 8014e72:	f04f 0b01 	movne.w	fp, #1
 8014e76:	4658      	mov	r0, fp
 8014e78:	b011      	add	sp, #68	; 0x44
 8014e7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e7e:	b002      	add	sp, #8
 8014e80:	4770      	bx	lr
 8014e82:	f04f 0b0b 	mov.w	fp, #11
 8014e86:	e7f6      	b.n	8014e76 <rcl_node_resolve_name+0x86>
 8014e88:	f04f 0b01 	mov.w	fp, #1
 8014e8c:	e7f3      	b.n	8014e76 <rcl_node_resolve_name+0x86>
 8014e8e:	9009      	str	r0, [sp, #36]	; 0x24
 8014e90:	9007      	str	r0, [sp, #28]
 8014e92:	a808      	add	r0, sp, #32
 8014e94:	f006 fb62 	bl	801b55c <rcl_get_default_topic_name_substitutions>
 8014e98:	4683      	mov	fp, r0
 8014e9a:	b180      	cbz	r0, 8014ebe <rcl_node_resolve_name+0xce>
 8014e9c:	280a      	cmp	r0, #10
 8014e9e:	a808      	add	r0, sp, #32
 8014ea0:	bf18      	it	ne
 8014ea2:	f04f 0b01 	movne.w	fp, #1
 8014ea6:	f002 ff4d 	bl	8017d44 <rcutils_string_map_fini>
 8014eaa:	4604      	mov	r4, r0
 8014eac:	2800      	cmp	r0, #0
 8014eae:	d15b      	bne.n	8014f68 <rcl_node_resolve_name+0x178>
 8014eb0:	4651      	mov	r1, sl
 8014eb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014eb4:	47c8      	blx	r9
 8014eb6:	4651      	mov	r1, sl
 8014eb8:	4620      	mov	r0, r4
 8014eba:	47c8      	blx	r9
 8014ebc:	e7db      	b.n	8014e76 <rcl_node_resolve_name+0x86>
 8014ebe:	ab09      	add	r3, sp, #36	; 0x24
 8014ec0:	46ec      	mov	ip, sp
 8014ec2:	9305      	str	r3, [sp, #20]
 8014ec4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ec6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014eca:	682b      	ldr	r3, [r5, #0]
 8014ecc:	463a      	mov	r2, r7
 8014ece:	4631      	mov	r1, r6
 8014ed0:	4620      	mov	r0, r4
 8014ed2:	f8cc 3000 	str.w	r3, [ip]
 8014ed6:	ab08      	add	r3, sp, #32
 8014ed8:	f006 f9e0 	bl	801b29c <rcl_expand_topic_name>
 8014edc:	4683      	mov	fp, r0
 8014ede:	b9d8      	cbnz	r0, 8014f18 <rcl_node_resolve_name+0x128>
 8014ee0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014ee2:	4602      	mov	r2, r0
 8014ee4:	9009      	str	r0, [sp, #36]	; 0x24
 8014ee6:	a90a      	add	r1, sp, #40	; 0x28
 8014ee8:	4620      	mov	r0, r4
 8014eea:	f003 f87d 	bl	8017fe8 <rmw_validate_full_topic_name>
 8014eee:	bb50      	cbnz	r0, 8014f46 <rcl_node_resolve_name+0x156>
 8014ef0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8014ef2:	2d00      	cmp	r5, #0
 8014ef4:	d140      	bne.n	8014f78 <rcl_node_resolve_name+0x188>
 8014ef6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014ef8:	a808      	add	r0, sp, #32
 8014efa:	601c      	str	r4, [r3, #0]
 8014efc:	f002 ff22 	bl	8017d44 <rcutils_string_map_fini>
 8014f00:	4683      	mov	fp, r0
 8014f02:	2800      	cmp	r0, #0
 8014f04:	d043      	beq.n	8014f8e <rcl_node_resolve_name+0x19e>
 8014f06:	f7f8 fe6d 	bl	800dbe4 <rcutils_get_error_string>
 8014f0a:	46a8      	mov	r8, r5
 8014f0c:	f04f 0b01 	mov.w	fp, #1
 8014f10:	462c      	mov	r4, r5
 8014f12:	f7f8 fe7d 	bl	800dc10 <rcutils_reset_error>
 8014f16:	e00a      	b.n	8014f2e <rcl_node_resolve_name+0x13e>
 8014f18:	2867      	cmp	r0, #103	; 0x67
 8014f1a:	bf14      	ite	ne
 8014f1c:	f04f 0800 	movne.w	r8, #0
 8014f20:	f008 0801 	andeq.w	r8, r8, #1
 8014f24:	9c07      	ldr	r4, [sp, #28]
 8014f26:	a808      	add	r0, sp, #32
 8014f28:	f002 ff0c 	bl	8017d44 <rcutils_string_map_fini>
 8014f2c:	bb50      	cbnz	r0, 8014f84 <rcl_node_resolve_name+0x194>
 8014f2e:	4651      	mov	r1, sl
 8014f30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014f32:	47c8      	blx	r9
 8014f34:	4651      	mov	r1, sl
 8014f36:	4620      	mov	r0, r4
 8014f38:	47c8      	blx	r9
 8014f3a:	f1b8 0f00 	cmp.w	r8, #0
 8014f3e:	bf18      	it	ne
 8014f40:	f04f 0b68 	movne.w	fp, #104	; 0x68
 8014f44:	e797      	b.n	8014e76 <rcl_node_resolve_name+0x86>
 8014f46:	f7f8 fe4d 	bl	800dbe4 <rcutils_get_error_string>
 8014f4a:	f7f8 fe61 	bl	800dc10 <rcutils_reset_error>
 8014f4e:	a808      	add	r0, sp, #32
 8014f50:	f002 fef8 	bl	8017d44 <rcutils_string_map_fini>
 8014f54:	b998      	cbnz	r0, 8014f7e <rcl_node_resolve_name+0x18e>
 8014f56:	4651      	mov	r1, sl
 8014f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014f5a:	47c8      	blx	r9
 8014f5c:	4651      	mov	r1, sl
 8014f5e:	4620      	mov	r0, r4
 8014f60:	f04f 0b01 	mov.w	fp, #1
 8014f64:	47c8      	blx	r9
 8014f66:	e786      	b.n	8014e76 <rcl_node_resolve_name+0x86>
 8014f68:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8014f6c:	f7f8 fe3a 	bl	800dbe4 <rcutils_get_error_string>
 8014f70:	f7f8 fe4e 	bl	800dc10 <rcutils_reset_error>
 8014f74:	4644      	mov	r4, r8
 8014f76:	e7da      	b.n	8014f2e <rcl_node_resolve_name+0x13e>
 8014f78:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8014f7c:	e7d3      	b.n	8014f26 <rcl_node_resolve_name+0x136>
 8014f7e:	46d8      	mov	r8, fp
 8014f80:	f04f 0b01 	mov.w	fp, #1
 8014f84:	f7f8 fe2e 	bl	800dbe4 <rcutils_get_error_string>
 8014f88:	f7f8 fe42 	bl	800dc10 <rcutils_reset_error>
 8014f8c:	e7cf      	b.n	8014f2e <rcl_node_resolve_name+0x13e>
 8014f8e:	4651      	mov	r1, sl
 8014f90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014f92:	47c8      	blx	r9
 8014f94:	4651      	mov	r1, sl
 8014f96:	4658      	mov	r0, fp
 8014f98:	47c8      	blx	r9
 8014f9a:	e76c      	b.n	8014e76 <rcl_node_resolve_name+0x86>

08014f9c <exact_match_lookup>:
 8014f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f9e:	f102 0708 	add.w	r7, r2, #8
 8014fa2:	460b      	mov	r3, r1
 8014fa4:	b085      	sub	sp, #20
 8014fa6:	4614      	mov	r4, r2
 8014fa8:	4606      	mov	r6, r0
 8014faa:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8014fae:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	4919      	ldr	r1, [pc, #100]	; (801501c <exact_match_lookup+0x80>)
 8014fb6:	e894 000c 	ldmia.w	r4, {r2, r3}
 8014fba:	f002 fca3 	bl	8017904 <rcutils_join_path>
 8014fbe:	7833      	ldrb	r3, [r6, #0]
 8014fc0:	4605      	mov	r5, r0
 8014fc2:	2b2f      	cmp	r3, #47	; 0x2f
 8014fc4:	d023      	beq.n	801500e <exact_match_lookup+0x72>
 8014fc6:	f104 030c 	add.w	r3, r4, #12
 8014fca:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014fce:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014fd2:	1c70      	adds	r0, r6, #1
 8014fd4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8014fd8:	f002 fc9a 	bl	8017910 <rcutils_to_native_path>
 8014fdc:	4606      	mov	r6, r0
 8014fde:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8014fe2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014fe6:	4631      	mov	r1, r6
 8014fe8:	4628      	mov	r0, r5
 8014fea:	e894 000c 	ldmia.w	r4, {r2, r3}
 8014fee:	f002 fc89 	bl	8017904 <rcutils_join_path>
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	4630      	mov	r0, r6
 8014ff6:	6862      	ldr	r2, [r4, #4]
 8014ff8:	461e      	mov	r6, r3
 8014ffa:	6921      	ldr	r1, [r4, #16]
 8014ffc:	4790      	blx	r2
 8014ffe:	4628      	mov	r0, r5
 8015000:	4635      	mov	r5, r6
 8015002:	6863      	ldr	r3, [r4, #4]
 8015004:	6921      	ldr	r1, [r4, #16]
 8015006:	4798      	blx	r3
 8015008:	4628      	mov	r0, r5
 801500a:	b005      	add	sp, #20
 801500c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801500e:	7873      	ldrb	r3, [r6, #1]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d1d8      	bne.n	8014fc6 <exact_match_lookup+0x2a>
 8015014:	4628      	mov	r0, r5
 8015016:	b005      	add	sp, #20
 8015018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801501a:	bf00      	nop
 801501c:	0801ea30 	.word	0x0801ea30

08015020 <rcl_get_secure_root>:
 8015020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015024:	b085      	sub	sp, #20
 8015026:	b168      	cbz	r0, 8015044 <rcl_get_secure_root+0x24>
 8015028:	4607      	mov	r7, r0
 801502a:	4608      	mov	r0, r1
 801502c:	460c      	mov	r4, r1
 801502e:	f7f8 fdcb 	bl	800dbc8 <rcutils_allocator_is_valid>
 8015032:	b138      	cbz	r0, 8015044 <rcl_get_secure_root+0x24>
 8015034:	2300      	movs	r3, #0
 8015036:	482d      	ldr	r0, [pc, #180]	; (80150ec <rcl_get_secure_root+0xcc>)
 8015038:	a903      	add	r1, sp, #12
 801503a:	9303      	str	r3, [sp, #12]
 801503c:	f002 fc48 	bl	80178d0 <rcutils_get_env>
 8015040:	4605      	mov	r5, r0
 8015042:	b120      	cbz	r0, 801504e <rcl_get_secure_root+0x2e>
 8015044:	2500      	movs	r5, #0
 8015046:	4628      	mov	r0, r5
 8015048:	b005      	add	sp, #20
 801504a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801504e:	9b03      	ldr	r3, [sp, #12]
 8015050:	781a      	ldrb	r2, [r3, #0]
 8015052:	2a00      	cmp	r2, #0
 8015054:	d0f6      	beq.n	8015044 <rcl_get_secure_root+0x24>
 8015056:	f104 090c 	add.w	r9, r4, #12
 801505a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801505e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015062:	4618      	mov	r0, r3
 8015064:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015068:	f002 fd94 	bl	8017b94 <rcutils_strdup>
 801506c:	4680      	mov	r8, r0
 801506e:	2800      	cmp	r0, #0
 8015070:	d0e8      	beq.n	8015044 <rcl_get_secure_root+0x24>
 8015072:	a903      	add	r1, sp, #12
 8015074:	481e      	ldr	r0, [pc, #120]	; (80150f0 <rcl_get_secure_root+0xd0>)
 8015076:	9503      	str	r5, [sp, #12]
 8015078:	f002 fc2a 	bl	80178d0 <rcutils_get_env>
 801507c:	b160      	cbz	r0, 8015098 <rcl_get_secure_root+0x78>
 801507e:	2600      	movs	r6, #0
 8015080:	4630      	mov	r0, r6
 8015082:	6863      	ldr	r3, [r4, #4]
 8015084:	6921      	ldr	r1, [r4, #16]
 8015086:	4798      	blx	r3
 8015088:	4640      	mov	r0, r8
 801508a:	6863      	ldr	r3, [r4, #4]
 801508c:	6921      	ldr	r1, [r4, #16]
 801508e:	4798      	blx	r3
 8015090:	4628      	mov	r0, r5
 8015092:	b005      	add	sp, #20
 8015094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015098:	9b03      	ldr	r3, [sp, #12]
 801509a:	781e      	ldrb	r6, [r3, #0]
 801509c:	b1f6      	cbz	r6, 80150dc <rcl_get_secure_root+0xbc>
 801509e:	e899 0003 	ldmia.w	r9, {r0, r1}
 80150a2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80150a6:	4618      	mov	r0, r3
 80150a8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80150ac:	f002 fd72 	bl	8017b94 <rcutils_strdup>
 80150b0:	4606      	mov	r6, r0
 80150b2:	2800      	cmp	r0, #0
 80150b4:	d0e3      	beq.n	801507e <rcl_get_secure_root+0x5e>
 80150b6:	4622      	mov	r2, r4
 80150b8:	4641      	mov	r1, r8
 80150ba:	f7ff ff6f 	bl	8014f9c <exact_match_lookup>
 80150be:	4605      	mov	r5, r0
 80150c0:	2d00      	cmp	r5, #0
 80150c2:	d0dd      	beq.n	8015080 <rcl_get_secure_root+0x60>
 80150c4:	4628      	mov	r0, r5
 80150c6:	f002 fc1b 	bl	8017900 <rcutils_is_directory>
 80150ca:	4603      	mov	r3, r0
 80150cc:	2800      	cmp	r0, #0
 80150ce:	d1d7      	bne.n	8015080 <rcl_get_secure_root+0x60>
 80150d0:	4628      	mov	r0, r5
 80150d2:	6921      	ldr	r1, [r4, #16]
 80150d4:	461d      	mov	r5, r3
 80150d6:	6863      	ldr	r3, [r4, #4]
 80150d8:	4798      	blx	r3
 80150da:	e7d1      	b.n	8015080 <rcl_get_secure_root+0x60>
 80150dc:	4622      	mov	r2, r4
 80150de:	4638      	mov	r0, r7
 80150e0:	4641      	mov	r1, r8
 80150e2:	f7ff ff5b 	bl	8014f9c <exact_match_lookup>
 80150e6:	4605      	mov	r5, r0
 80150e8:	e7ea      	b.n	80150c0 <rcl_get_secure_root+0xa0>
 80150ea:	bf00      	nop
 80150ec:	0801ea3c 	.word	0x0801ea3c
 80150f0:	0801ea54 	.word	0x0801ea54

080150f4 <rcl_get_security_options_from_environment>:
 80150f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150f8:	b082      	sub	sp, #8
 80150fa:	2300      	movs	r3, #0
 80150fc:	4606      	mov	r6, r0
 80150fe:	460f      	mov	r7, r1
 8015100:	4821      	ldr	r0, [pc, #132]	; (8015188 <rcl_get_security_options_from_environment+0x94>)
 8015102:	a901      	add	r1, sp, #4
 8015104:	4690      	mov	r8, r2
 8015106:	9301      	str	r3, [sp, #4]
 8015108:	f002 fbe2 	bl	80178d0 <rcutils_get_env>
 801510c:	b120      	cbz	r0, 8015118 <rcl_get_security_options_from_environment+0x24>
 801510e:	2501      	movs	r5, #1
 8015110:	4628      	mov	r0, r5
 8015112:	b002      	add	sp, #8
 8015114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015118:	4604      	mov	r4, r0
 801511a:	491c      	ldr	r1, [pc, #112]	; (801518c <rcl_get_security_options_from_environment+0x98>)
 801511c:	9801      	ldr	r0, [sp, #4]
 801511e:	f7eb f88f 	bl	8000240 <strcmp>
 8015122:	4605      	mov	r5, r0
 8015124:	b9f0      	cbnz	r0, 8015164 <rcl_get_security_options_from_environment+0x70>
 8015126:	9001      	str	r0, [sp, #4]
 8015128:	f1b8 0f00 	cmp.w	r8, #0
 801512c:	d021      	beq.n	8015172 <rcl_get_security_options_from_environment+0x7e>
 801512e:	a901      	add	r1, sp, #4
 8015130:	4817      	ldr	r0, [pc, #92]	; (8015190 <rcl_get_security_options_from_environment+0x9c>)
 8015132:	f002 fbcd 	bl	80178d0 <rcutils_get_env>
 8015136:	2800      	cmp	r0, #0
 8015138:	d1e9      	bne.n	801510e <rcl_get_security_options_from_environment+0x1a>
 801513a:	4916      	ldr	r1, [pc, #88]	; (8015194 <rcl_get_security_options_from_environment+0xa0>)
 801513c:	9801      	ldr	r0, [sp, #4]
 801513e:	f7eb f87f 	bl	8000240 <strcmp>
 8015142:	4603      	mov	r3, r0
 8015144:	4639      	mov	r1, r7
 8015146:	4630      	mov	r0, r6
 8015148:	fab3 f383 	clz	r3, r3
 801514c:	095b      	lsrs	r3, r3, #5
 801514e:	f888 3000 	strb.w	r3, [r8]
 8015152:	f7ff ff65 	bl	8015020 <rcl_get_secure_root>
 8015156:	b170      	cbz	r0, 8015176 <rcl_get_security_options_from_environment+0x82>
 8015158:	f8c8 0004 	str.w	r0, [r8, #4]
 801515c:	4628      	mov	r0, r5
 801515e:	b002      	add	sp, #8
 8015160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015164:	4625      	mov	r5, r4
 8015166:	f888 4000 	strb.w	r4, [r8]
 801516a:	4628      	mov	r0, r5
 801516c:	b002      	add	sp, #8
 801516e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015172:	250b      	movs	r5, #11
 8015174:	e7cc      	b.n	8015110 <rcl_get_security_options_from_environment+0x1c>
 8015176:	f898 5000 	ldrb.w	r5, [r8]
 801517a:	f1a5 0501 	sub.w	r5, r5, #1
 801517e:	fab5 f585 	clz	r5, r5
 8015182:	096d      	lsrs	r5, r5, #5
 8015184:	e7c4      	b.n	8015110 <rcl_get_security_options_from_environment+0x1c>
 8015186:	bf00      	nop
 8015188:	0801e9f4 	.word	0x0801e9f4
 801518c:	0801ea08 	.word	0x0801ea08
 8015190:	0801ea10 	.word	0x0801ea10
 8015194:	0801ea28 	.word	0x0801ea28

08015198 <rcl_get_zero_initialized_service>:
 8015198:	4b01      	ldr	r3, [pc, #4]	; (80151a0 <rcl_get_zero_initialized_service+0x8>)
 801519a:	6818      	ldr	r0, [r3, #0]
 801519c:	4770      	bx	lr
 801519e:	bf00      	nop
 80151a0:	0801ea74 	.word	0x0801ea74

080151a4 <rcl_service_init>:
 80151a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151a8:	b086      	sub	sp, #24
 80151aa:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80151ac:	2d00      	cmp	r5, #0
 80151ae:	d04d      	beq.n	801524c <rcl_service_init+0xa8>
 80151b0:	f105 0950 	add.w	r9, r5, #80	; 0x50
 80151b4:	4604      	mov	r4, r0
 80151b6:	460e      	mov	r6, r1
 80151b8:	4690      	mov	r8, r2
 80151ba:	4648      	mov	r0, r9
 80151bc:	461f      	mov	r7, r3
 80151be:	f7f8 fd03 	bl	800dbc8 <rcutils_allocator_is_valid>
 80151c2:	2c00      	cmp	r4, #0
 80151c4:	d042      	beq.n	801524c <rcl_service_init+0xa8>
 80151c6:	f080 0001 	eor.w	r0, r0, #1
 80151ca:	b2c0      	uxtb	r0, r0
 80151cc:	2800      	cmp	r0, #0
 80151ce:	d13d      	bne.n	801524c <rcl_service_init+0xa8>
 80151d0:	4630      	mov	r0, r6
 80151d2:	f7ff fd95 	bl	8014d00 <rcl_node_is_valid>
 80151d6:	2800      	cmp	r0, #0
 80151d8:	d042      	beq.n	8015260 <rcl_service_init+0xbc>
 80151da:	2f00      	cmp	r7, #0
 80151dc:	d036      	beq.n	801524c <rcl_service_init+0xa8>
 80151de:	f1b8 0f00 	cmp.w	r8, #0
 80151e2:	d033      	beq.n	801524c <rcl_service_init+0xa8>
 80151e4:	f8d4 a000 	ldr.w	sl, [r4]
 80151e8:	f1ba 0f00 	cmp.w	sl, #0
 80151ec:	d133      	bne.n	8015256 <rcl_service_init+0xb2>
 80151ee:	f44f 718c 	mov.w	r1, #280	; 0x118
 80151f2:	2001      	movs	r0, #1
 80151f4:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	; 0x5c
 80151f8:	4798      	blx	r3
 80151fa:	6020      	str	r0, [r4, #0]
 80151fc:	2800      	cmp	r0, #0
 80151fe:	d075      	beq.n	80152ec <rcl_service_init+0x148>
 8015200:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8015204:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8015208:	2201      	movs	r2, #1
 801520a:	f8cd a010 	str.w	sl, [sp, #16]
 801520e:	9005      	str	r0, [sp, #20]
 8015210:	9203      	str	r2, [sp, #12]
 8015212:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015216:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801521a:	4639      	mov	r1, r7
 801521c:	4630      	mov	r0, r6
 801521e:	e899 000c 	ldmia.w	r9, {r2, r3}
 8015222:	f7ff fde5 	bl	8014df0 <rcl_node_resolve_name>
 8015226:	4607      	mov	r7, r0
 8015228:	b1f8      	cbz	r0, 801526a <rcl_service_init+0xc6>
 801522a:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 801522e:	6820      	ldr	r0, [r4, #0]
 8015230:	2b01      	cmp	r3, #1
 8015232:	d943      	bls.n	80152bc <rcl_service_init+0x118>
 8015234:	2f0a      	cmp	r7, #10
 8015236:	d000      	beq.n	801523a <rcl_service_init+0x96>
 8015238:	2701      	movs	r7, #1
 801523a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 801523c:	6e29      	ldr	r1, [r5, #96]	; 0x60
 801523e:	4798      	blx	r3
 8015240:	2300      	movs	r3, #0
 8015242:	4638      	mov	r0, r7
 8015244:	6023      	str	r3, [r4, #0]
 8015246:	b006      	add	sp, #24
 8015248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801524c:	270b      	movs	r7, #11
 801524e:	4638      	mov	r0, r7
 8015250:	b006      	add	sp, #24
 8015252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015256:	2764      	movs	r7, #100	; 0x64
 8015258:	4638      	mov	r0, r7
 801525a:	b006      	add	sp, #24
 801525c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015260:	27c8      	movs	r7, #200	; 0xc8
 8015262:	4638      	mov	r0, r7
 8015264:	b006      	add	sp, #24
 8015266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801526a:	4630      	mov	r0, r6
 801526c:	f7ff fd6a 	bl	8014d44 <rcl_node_get_rmw_handle>
 8015270:	6827      	ldr	r7, [r4, #0]
 8015272:	4641      	mov	r1, r8
 8015274:	462b      	mov	r3, r5
 8015276:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801527a:	f003 fd9f 	bl	8018dbc <rmw_create_service>
 801527e:	6821      	ldr	r1, [r4, #0]
 8015280:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8015284:	f8d1 0108 	ldr.w	r0, [r1, #264]	; 0x108
 8015288:	b390      	cbz	r0, 80152f0 <rcl_service_init+0x14c>
 801528a:	3168      	adds	r1, #104	; 0x68
 801528c:	f003 fec8 	bl	8019020 <rmw_service_request_subscription_get_actual_qos>
 8015290:	b9b0      	cbnz	r0, 80152c0 <rcl_service_init+0x11c>
 8015292:	6823      	ldr	r3, [r4, #0]
 8015294:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8015298:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801529c:	f003 feac 	bl	8018ff8 <rmw_service_response_publisher_get_actual_qos>
 80152a0:	4607      	mov	r7, r0
 80152a2:	b968      	cbnz	r0, 80152c0 <rcl_service_init+0x11c>
 80152a4:	6820      	ldr	r0, [r4, #0]
 80152a6:	2268      	movs	r2, #104	; 0x68
 80152a8:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 80152ac:	4629      	mov	r1, r5
 80152ae:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 80152b2:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
 80152b6:	f007 fb2e 	bl	801c916 <memcpy>
 80152ba:	e7c8      	b.n	801524e <rcl_service_init+0xaa>
 80152bc:	2768      	movs	r7, #104	; 0x68
 80152be:	e7bc      	b.n	801523a <rcl_service_init+0x96>
 80152c0:	f7ff f904 	bl	80144cc <rcl_convert_rmw_ret_to_rcl_ret>
 80152c4:	4607      	mov	r7, r0
 80152c6:	4630      	mov	r0, r6
 80152c8:	f7ff fd3c 	bl	8014d44 <rcl_node_get_rmw_handle>
 80152cc:	6823      	ldr	r3, [r4, #0]
 80152ce:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 80152d2:	f003 fe4d 	bl	8018f70 <rmw_destroy_service>
 80152d6:	6821      	ldr	r1, [r4, #0]
 80152d8:	f8d1 0110 	ldr.w	r0, [r1, #272]	; 0x110
 80152dc:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80152de:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80152e0:	4798      	blx	r3
 80152e2:	6820      	ldr	r0, [r4, #0]
 80152e4:	2300      	movs	r3, #0
 80152e6:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 80152ea:	e7a6      	b.n	801523a <rcl_service_init+0x96>
 80152ec:	270a      	movs	r7, #10
 80152ee:	e7ae      	b.n	801524e <rcl_service_init+0xaa>
 80152f0:	2701      	movs	r7, #1
 80152f2:	e7f1      	b.n	80152d8 <rcl_service_init+0x134>

080152f4 <rcl_service_get_default_options>:
 80152f4:	b530      	push	{r4, r5, lr}
 80152f6:	4d0f      	ldr	r5, [pc, #60]	; (8015334 <rcl_service_get_default_options+0x40>)
 80152f8:	b087      	sub	sp, #28
 80152fa:	4604      	mov	r4, r0
 80152fc:	2250      	movs	r2, #80	; 0x50
 80152fe:	490e      	ldr	r1, [pc, #56]	; (8015338 <rcl_service_get_default_options+0x44>)
 8015300:	4628      	mov	r0, r5
 8015302:	f007 fb08 	bl	801c916 <memcpy>
 8015306:	4668      	mov	r0, sp
 8015308:	f7f8 fc50 	bl	800dbac <rcutils_get_default_allocator>
 801530c:	46ec      	mov	ip, sp
 801530e:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8015312:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015316:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801531a:	f8dc 3000 	ldr.w	r3, [ip]
 801531e:	2268      	movs	r2, #104	; 0x68
 8015320:	4629      	mov	r1, r5
 8015322:	4620      	mov	r0, r4
 8015324:	f8ce 3000 	str.w	r3, [lr]
 8015328:	f007 faf5 	bl	801c916 <memcpy>
 801532c:	4620      	mov	r0, r4
 801532e:	b007      	add	sp, #28
 8015330:	bd30      	pop	{r4, r5, pc}
 8015332:	bf00      	nop
 8015334:	200107c8 	.word	0x200107c8
 8015338:	0801ea78 	.word	0x0801ea78

0801533c <rcl_service_get_rmw_handle>:
 801533c:	b118      	cbz	r0, 8015346 <rcl_service_get_rmw_handle+0xa>
 801533e:	6800      	ldr	r0, [r0, #0]
 8015340:	b108      	cbz	r0, 8015346 <rcl_service_get_rmw_handle+0xa>
 8015342:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8015346:	4770      	bx	lr

08015348 <rcl_take_request>:
 8015348:	b5f0      	push	{r4, r5, r6, r7, lr}
 801534a:	468e      	mov	lr, r1
 801534c:	b091      	sub	sp, #68	; 0x44
 801534e:	460c      	mov	r4, r1
 8015350:	4617      	mov	r7, r2
 8015352:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8015356:	4605      	mov	r5, r0
 8015358:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801535c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015360:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015364:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015368:	b30d      	cbz	r5, 80153ae <rcl_take_request+0x66>
 801536a:	682b      	ldr	r3, [r5, #0]
 801536c:	b1fb      	cbz	r3, 80153ae <rcl_take_request+0x66>
 801536e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8015372:	b1e0      	cbz	r0, 80153ae <rcl_take_request+0x66>
 8015374:	b397      	cbz	r7, 80153dc <rcl_take_request+0x94>
 8015376:	2300      	movs	r3, #0
 8015378:	463a      	mov	r2, r7
 801537a:	a906      	add	r1, sp, #24
 801537c:	f88d 3017 	strb.w	r3, [sp, #23]
 8015380:	f10d 0317 	add.w	r3, sp, #23
 8015384:	f003 fc18 	bl	8018bb8 <rmw_take_request>
 8015388:	4606      	mov	r6, r0
 801538a:	b198      	cbz	r0, 80153b4 <rcl_take_request+0x6c>
 801538c:	280a      	cmp	r0, #10
 801538e:	bf18      	it	ne
 8015390:	2601      	movne	r6, #1
 8015392:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8015396:	46a6      	mov	lr, r4
 8015398:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801539c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80153a0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80153a4:	e88e 0003 	stmia.w	lr, {r0, r1}
 80153a8:	4630      	mov	r0, r6
 80153aa:	b011      	add	sp, #68	; 0x44
 80153ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80153ae:	f44f 7616 	mov.w	r6, #600	; 0x258
 80153b2:	e7ee      	b.n	8015392 <rcl_take_request+0x4a>
 80153b4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80153b8:	b193      	cbz	r3, 80153e0 <rcl_take_request+0x98>
 80153ba:	682b      	ldr	r3, [r5, #0]
 80153bc:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 80153c0:	2800      	cmp	r0, #0
 80153c2:	d0e6      	beq.n	8015392 <rcl_take_request+0x4a>
 80153c4:	463a      	mov	r2, r7
 80153c6:	ab0a      	add	r3, sp, #40	; 0x28
 80153c8:	2101      	movs	r1, #1
 80153ca:	9302      	str	r3, [sp, #8]
 80153cc:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 80153d0:	e9cd 6700 	strd	r6, r7, [sp]
 80153d4:	f000 f844 	bl	8015460 <rcl_send_service_event_message>
 80153d8:	4606      	mov	r6, r0
 80153da:	e7da      	b.n	8015392 <rcl_take_request+0x4a>
 80153dc:	260b      	movs	r6, #11
 80153de:	e7d8      	b.n	8015392 <rcl_take_request+0x4a>
 80153e0:	f240 2659 	movw	r6, #601	; 0x259
 80153e4:	e7d5      	b.n	8015392 <rcl_take_request+0x4a>
 80153e6:	bf00      	nop

080153e8 <rcl_send_response>:
 80153e8:	b350      	cbz	r0, 8015440 <rcl_send_response+0x58>
 80153ea:	6803      	ldr	r3, [r0, #0]
 80153ec:	b570      	push	{r4, r5, r6, lr}
 80153ee:	4604      	mov	r4, r0
 80153f0:	b084      	sub	sp, #16
 80153f2:	b1cb      	cbz	r3, 8015428 <rcl_send_response+0x40>
 80153f4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80153f8:	b1b0      	cbz	r0, 8015428 <rcl_send_response+0x40>
 80153fa:	4615      	mov	r5, r2
 80153fc:	b1ea      	cbz	r2, 801543a <rcl_send_response+0x52>
 80153fe:	460e      	mov	r6, r1
 8015400:	b1d9      	cbz	r1, 801543a <rcl_send_response+0x52>
 8015402:	f003 fc37 	bl	8018c74 <rmw_send_response>
 8015406:	b998      	cbnz	r0, 8015430 <rcl_send_response+0x48>
 8015408:	6823      	ldr	r3, [r4, #0]
 801540a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 801540e:	b16b      	cbz	r3, 801542c <rcl_send_response+0x44>
 8015410:	462a      	mov	r2, r5
 8015412:	2102      	movs	r1, #2
 8015414:	4618      	mov	r0, r3
 8015416:	ed96 7b04 	vldr	d7, [r6, #16]
 801541a:	9602      	str	r6, [sp, #8]
 801541c:	ed8d 7b00 	vstr	d7, [sp]
 8015420:	f000 f81e 	bl	8015460 <rcl_send_service_event_message>
 8015424:	b004      	add	sp, #16
 8015426:	bd70      	pop	{r4, r5, r6, pc}
 8015428:	f44f 7016 	mov.w	r0, #600	; 0x258
 801542c:	b004      	add	sp, #16
 801542e:	bd70      	pop	{r4, r5, r6, pc}
 8015430:	2802      	cmp	r0, #2
 8015432:	bf18      	it	ne
 8015434:	2001      	movne	r0, #1
 8015436:	b004      	add	sp, #16
 8015438:	bd70      	pop	{r4, r5, r6, pc}
 801543a:	200b      	movs	r0, #11
 801543c:	b004      	add	sp, #16
 801543e:	bd70      	pop	{r4, r5, r6, pc}
 8015440:	f44f 7016 	mov.w	r0, #600	; 0x258
 8015444:	4770      	bx	lr
 8015446:	bf00      	nop

08015448 <rcl_service_is_valid>:
 8015448:	b130      	cbz	r0, 8015458 <rcl_service_is_valid+0x10>
 801544a:	6800      	ldr	r0, [r0, #0]
 801544c:	b120      	cbz	r0, 8015458 <rcl_service_is_valid+0x10>
 801544e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8015452:	3800      	subs	r0, #0
 8015454:	bf18      	it	ne
 8015456:	2001      	movne	r0, #1
 8015458:	4770      	bx	lr
 801545a:	bf00      	nop
 801545c:	0000      	movs	r0, r0
	...

08015460 <rcl_send_service_event_message>:
 8015460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015464:	b093      	sub	sp, #76	; 0x4c
 8015466:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8015468:	b196      	cbz	r6, 8015490 <rcl_send_service_event_message+0x30>
 801546a:	4615      	mov	r5, r2
 801546c:	b182      	cbz	r2, 8015490 <rcl_send_service_event_message+0x30>
 801546e:	4604      	mov	r4, r0
 8015470:	b148      	cbz	r0, 8015486 <rcl_send_service_event_message+0x26>
 8015472:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8015476:	b133      	cbz	r3, 8015486 <rcl_send_service_event_message+0x26>
 8015478:	68c0      	ldr	r0, [r0, #12]
 801547a:	460f      	mov	r7, r1
 801547c:	f000 f9f2 	bl	8015864 <rcl_clock_valid>
 8015480:	b108      	cbz	r0, 8015486 <rcl_send_service_event_message+0x26>
 8015482:	7a23      	ldrb	r3, [r4, #8]
 8015484:	b94b      	cbnz	r3, 801549a <rcl_send_service_event_message+0x3a>
 8015486:	2401      	movs	r4, #1
 8015488:	4620      	mov	r0, r4
 801548a:	b013      	add	sp, #76	; 0x4c
 801548c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015490:	240b      	movs	r4, #11
 8015492:	4620      	mov	r0, r4
 8015494:	b013      	add	sp, #76	; 0x4c
 8015496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801549a:	f104 0e60 	add.w	lr, r4, #96	; 0x60
 801549e:	f10d 0c0c 	add.w	ip, sp, #12
 80154a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80154a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80154aa:	f8de 3000 	ldr.w	r3, [lr]
 80154ae:	a803      	add	r0, sp, #12
 80154b0:	f8cc 3000 	str.w	r3, [ip]
 80154b4:	f7f8 fb88 	bl	800dbc8 <rcutils_allocator_is_valid>
 80154b8:	2800      	cmp	r0, #0
 80154ba:	d0e9      	beq.n	8015490 <rcl_send_service_event_message+0x30>
 80154bc:	6820      	ldr	r0, [r4, #0]
 80154be:	f7f7 fb0b 	bl	800cad8 <rcl_publisher_is_valid>
 80154c2:	2800      	cmp	r0, #0
 80154c4:	d05e      	beq.n	8015584 <rcl_send_service_event_message+0x124>
 80154c6:	4669      	mov	r1, sp
 80154c8:	68e0      	ldr	r0, [r4, #12]
 80154ca:	f000 fa5d 	bl	8015988 <rcl_clock_get_now>
 80154ce:	4601      	mov	r1, r0
 80154d0:	2800      	cmp	r0, #0
 80154d2:	d146      	bne.n	8015562 <rcl_send_service_event_message+0x102>
 80154d4:	2220      	movs	r2, #32
 80154d6:	eb0d 0002 	add.w	r0, sp, r2
 80154da:	f007 f8eb 	bl	801c6b4 <memset>
 80154de:	f88d 7020 	strb.w	r7, [sp, #32]
 80154e2:	e9dd 8900 	ldrd	r8, r9, [sp]
 80154e6:	a32a      	add	r3, pc, #168	; (adr r3, 8015590 <rcl_send_service_event_message+0x130>)
 80154e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154ec:	4640      	mov	r0, r8
 80154ee:	4649      	mov	r1, r9
 80154f0:	f7ea ff0e 	bl	8000310 <__aeabi_ldivmod>
 80154f4:	4649      	mov	r1, r9
 80154f6:	9009      	str	r0, [sp, #36]	; 0x24
 80154f8:	4640      	mov	r0, r8
 80154fa:	a325      	add	r3, pc, #148	; (adr r3, 8015590 <rcl_send_service_event_message+0x130>)
 80154fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015500:	f7ea ff06 	bl	8000310 <__aeabi_ldivmod>
 8015504:	920a      	str	r2, [sp, #40]	; 0x28
 8015506:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 801550a:	6830      	ldr	r0, [r6, #0]
 801550c:	6871      	ldr	r1, [r6, #4]
 801550e:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8015512:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8015516:	7a23      	ldrb	r3, [r4, #8]
 8015518:	68b2      	ldr	r2, [r6, #8]
 801551a:	2b01      	cmp	r3, #1
 801551c:	68f3      	ldr	r3, [r6, #12]
 801551e:	bf08      	it	eq
 8015520:	2500      	moveq	r5, #0
 8015522:	2f01      	cmp	r7, #1
 8015524:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015528:	d81f      	bhi.n	801556a <rcl_send_service_event_message+0x10a>
 801552a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801552e:	462a      	mov	r2, r5
 8015530:	a808      	add	r0, sp, #32
 8015532:	a903      	add	r1, sp, #12
 8015534:	699d      	ldr	r5, [r3, #24]
 8015536:	2300      	movs	r3, #0
 8015538:	47a8      	blx	r5
 801553a:	4605      	mov	r5, r0
 801553c:	2d00      	cmp	r5, #0
 801553e:	d0a2      	beq.n	8015486 <rcl_send_service_event_message+0x26>
 8015540:	4629      	mov	r1, r5
 8015542:	6820      	ldr	r0, [r4, #0]
 8015544:	2200      	movs	r2, #0
 8015546:	f7f7 faa3 	bl	800ca90 <rcl_publish>
 801554a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801554e:	4604      	mov	r4, r0
 8015550:	a903      	add	r1, sp, #12
 8015552:	4628      	mov	r0, r5
 8015554:	69db      	ldr	r3, [r3, #28]
 8015556:	4798      	blx	r3
 8015558:	2c00      	cmp	r4, #0
 801555a:	d095      	beq.n	8015488 <rcl_send_service_event_message+0x28>
 801555c:	f7f8 fb58 	bl	800dc10 <rcutils_reset_error>
 8015560:	e792      	b.n	8015488 <rcl_send_service_event_message+0x28>
 8015562:	2401      	movs	r4, #1
 8015564:	f7f8 fb54 	bl	800dc10 <rcutils_reset_error>
 8015568:	e78e      	b.n	8015488 <rcl_send_service_event_message+0x28>
 801556a:	1eb9      	subs	r1, r7, #2
 801556c:	2901      	cmp	r1, #1
 801556e:	d8f8      	bhi.n	8015562 <rcl_send_service_event_message+0x102>
 8015570:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8015574:	462b      	mov	r3, r5
 8015576:	a808      	add	r0, sp, #32
 8015578:	a903      	add	r1, sp, #12
 801557a:	6995      	ldr	r5, [r2, #24]
 801557c:	2200      	movs	r2, #0
 801557e:	47a8      	blx	r5
 8015580:	4605      	mov	r5, r0
 8015582:	e7db      	b.n	801553c <rcl_send_service_event_message+0xdc>
 8015584:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8015588:	e77e      	b.n	8015488 <rcl_send_service_event_message+0x28>
 801558a:	bf00      	nop
 801558c:	f3af 8000 	nop.w
 8015590:	3b9aca00 	.word	0x3b9aca00
 8015594:	00000000 	.word	0x00000000

08015598 <rcl_get_zero_initialized_subscription>:
 8015598:	4b01      	ldr	r3, [pc, #4]	; (80155a0 <rcl_get_zero_initialized_subscription+0x8>)
 801559a:	6818      	ldr	r0, [r3, #0]
 801559c:	4770      	bx	lr
 801559e:	bf00      	nop
 80155a0:	0801eac8 	.word	0x0801eac8

080155a4 <rcl_subscription_init>:
 80155a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80155a8:	b088      	sub	sp, #32
 80155aa:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80155ac:	b1ff      	cbz	r7, 80155ee <rcl_subscription_init+0x4a>
 80155ae:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 80155b2:	4605      	mov	r5, r0
 80155b4:	460e      	mov	r6, r1
 80155b6:	4691      	mov	r9, r2
 80155b8:	4650      	mov	r0, sl
 80155ba:	4698      	mov	r8, r3
 80155bc:	f7f8 fb04 	bl	800dbc8 <rcutils_allocator_is_valid>
 80155c0:	f080 0401 	eor.w	r4, r0, #1
 80155c4:	b2e4      	uxtb	r4, r4
 80155c6:	b994      	cbnz	r4, 80155ee <rcl_subscription_init+0x4a>
 80155c8:	b18d      	cbz	r5, 80155ee <rcl_subscription_init+0x4a>
 80155ca:	4630      	mov	r0, r6
 80155cc:	f7ff fb98 	bl	8014d00 <rcl_node_is_valid>
 80155d0:	2800      	cmp	r0, #0
 80155d2:	d055      	beq.n	8015680 <rcl_subscription_init+0xdc>
 80155d4:	f1b9 0f00 	cmp.w	r9, #0
 80155d8:	d009      	beq.n	80155ee <rcl_subscription_init+0x4a>
 80155da:	f1b8 0f00 	cmp.w	r8, #0
 80155de:	d006      	beq.n	80155ee <rcl_subscription_init+0x4a>
 80155e0:	682b      	ldr	r3, [r5, #0]
 80155e2:	b14b      	cbz	r3, 80155f8 <rcl_subscription_init+0x54>
 80155e4:	2464      	movs	r4, #100	; 0x64
 80155e6:	4620      	mov	r0, r4
 80155e8:	b008      	add	sp, #32
 80155ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155ee:	240b      	movs	r4, #11
 80155f0:	4620      	mov	r0, r4
 80155f2:	b008      	add	sp, #32
 80155f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80155f8:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80155fc:	aa07      	add	r2, sp, #28
 80155fe:	9307      	str	r3, [sp, #28]
 8015600:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015604:	9205      	str	r2, [sp, #20]
 8015606:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801560a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801560e:	4641      	mov	r1, r8
 8015610:	4630      	mov	r0, r6
 8015612:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8015616:	f7ff fbeb 	bl	8014df0 <rcl_node_resolve_name>
 801561a:	2800      	cmp	r0, #0
 801561c:	d15f      	bne.n	80156de <rcl_subscription_init+0x13a>
 801561e:	21d0      	movs	r1, #208	; 0xd0
 8015620:	2001      	movs	r0, #1
 8015622:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	; 0x5c
 8015626:	4798      	blx	r3
 8015628:	6028      	str	r0, [r5, #0]
 801562a:	2800      	cmp	r0, #0
 801562c:	d05f      	beq.n	80156ee <rcl_subscription_init+0x14a>
 801562e:	4630      	mov	r0, r6
 8015630:	f7ff fb88 	bl	8014d44 <rcl_node_get_rmw_handle>
 8015634:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8015638:	4649      	mov	r1, r9
 801563a:	9a07      	ldr	r2, [sp, #28]
 801563c:	9300      	str	r3, [sp, #0]
 801563e:	463b      	mov	r3, r7
 8015640:	682c      	ldr	r4, [r5, #0]
 8015642:	f003 fd01 	bl	8019048 <rmw_create_subscription>
 8015646:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
 801564a:	682c      	ldr	r4, [r5, #0]
 801564c:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
 8015650:	b348      	cbz	r0, 80156a6 <rcl_subscription_init+0x102>
 8015652:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8015656:	f003 fded 	bl	8019234 <rmw_subscription_get_actual_qos>
 801565a:	4604      	mov	r4, r0
 801565c:	b9a8      	cbnz	r0, 801568a <rcl_subscription_init+0xe6>
 801565e:	6828      	ldr	r0, [r5, #0]
 8015660:	2278      	movs	r2, #120	; 0x78
 8015662:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8015666:	4639      	mov	r1, r7
 8015668:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
 801566c:	f007 f953 	bl	801c916 <memcpy>
 8015670:	9807      	ldr	r0, [sp, #28]
 8015672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015674:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8015676:	4798      	blx	r3
 8015678:	4620      	mov	r0, r4
 801567a:	b008      	add	sp, #32
 801567c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015680:	24c8      	movs	r4, #200	; 0xc8
 8015682:	4620      	mov	r0, r4
 8015684:	b008      	add	sp, #32
 8015686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801568a:	682c      	ldr	r4, [r5, #0]
 801568c:	b36c      	cbz	r4, 80156ea <rcl_subscription_init+0x146>
 801568e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8015692:	b14b      	cbz	r3, 80156a8 <rcl_subscription_init+0x104>
 8015694:	4630      	mov	r0, r6
 8015696:	f7ff fb55 	bl	8014d44 <rcl_node_get_rmw_handle>
 801569a:	682b      	ldr	r3, [r5, #0]
 801569c:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
 80156a0:	f003 fddc 	bl	801925c <rmw_destroy_subscription>
 80156a4:	682c      	ldr	r4, [r5, #0]
 80156a6:	b194      	cbz	r4, 80156ce <rcl_subscription_init+0x12a>
 80156a8:	f104 0650 	add.w	r6, r4, #80	; 0x50
 80156ac:	4630      	mov	r0, r6
 80156ae:	f7f8 fa8b 	bl	800dbc8 <rcutils_allocator_is_valid>
 80156b2:	b158      	cbz	r0, 80156cc <rcl_subscription_init+0x128>
 80156b4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80156b6:	b148      	cbz	r0, 80156cc <rcl_subscription_init+0x128>
 80156b8:	4631      	mov	r1, r6
 80156ba:	f002 fbe5 	bl	8017e88 <rmw_subscription_content_filter_options_fini>
 80156be:	4606      	mov	r6, r0
 80156c0:	b9c8      	cbnz	r0, 80156f6 <rcl_subscription_init+0x152>
 80156c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80156c4:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80156c6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80156c8:	4798      	blx	r3
 80156ca:	66e6      	str	r6, [r4, #108]	; 0x6c
 80156cc:	682c      	ldr	r4, [r5, #0]
 80156ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80156d0:	4620      	mov	r0, r4
 80156d2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80156d4:	2401      	movs	r4, #1
 80156d6:	4798      	blx	r3
 80156d8:	2300      	movs	r3, #0
 80156da:	602b      	str	r3, [r5, #0]
 80156dc:	e7c8      	b.n	8015670 <rcl_subscription_init+0xcc>
 80156de:	2867      	cmp	r0, #103	; 0x67
 80156e0:	d007      	beq.n	80156f2 <rcl_subscription_init+0x14e>
 80156e2:	2869      	cmp	r0, #105	; 0x69
 80156e4:	d005      	beq.n	80156f2 <rcl_subscription_init+0x14e>
 80156e6:	280a      	cmp	r0, #10
 80156e8:	d001      	beq.n	80156ee <rcl_subscription_init+0x14a>
 80156ea:	2401      	movs	r4, #1
 80156ec:	e7c0      	b.n	8015670 <rcl_subscription_init+0xcc>
 80156ee:	240a      	movs	r4, #10
 80156f0:	e7be      	b.n	8015670 <rcl_subscription_init+0xcc>
 80156f2:	2467      	movs	r4, #103	; 0x67
 80156f4:	e7bc      	b.n	8015670 <rcl_subscription_init+0xcc>
 80156f6:	f7fe fee9 	bl	80144cc <rcl_convert_rmw_ret_to_rcl_ret>
 80156fa:	682c      	ldr	r4, [r5, #0]
 80156fc:	e7e7      	b.n	80156ce <rcl_subscription_init+0x12a>
 80156fe:	bf00      	nop

08015700 <rcl_subscription_get_default_options>:
 8015700:	b570      	push	{r4, r5, r6, lr}
 8015702:	4c16      	ldr	r4, [pc, #88]	; (801575c <rcl_subscription_get_default_options+0x5c>)
 8015704:	b08a      	sub	sp, #40	; 0x28
 8015706:	4605      	mov	r5, r0
 8015708:	2250      	movs	r2, #80	; 0x50
 801570a:	4915      	ldr	r1, [pc, #84]	; (8015760 <rcl_subscription_get_default_options+0x60>)
 801570c:	4620      	mov	r0, r4
 801570e:	f007 f902 	bl	801c916 <memcpy>
 8015712:	a804      	add	r0, sp, #16
 8015714:	f7f8 fa4a 	bl	800dbac <rcutils_get_default_allocator>
 8015718:	f10d 0c10 	add.w	ip, sp, #16
 801571c:	f104 0e50 	add.w	lr, r4, #80	; 0x50
 8015720:	466e      	mov	r6, sp
 8015722:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015726:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801572a:	f8dc 3000 	ldr.w	r3, [ip]
 801572e:	4630      	mov	r0, r6
 8015730:	f8ce 3000 	str.w	r3, [lr]
 8015734:	f002 fbc2 	bl	8017ebc <rmw_get_default_subscription_options>
 8015738:	f104 0364 	add.w	r3, r4, #100	; 0x64
 801573c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8015740:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015744:	2301      	movs	r3, #1
 8015746:	2278      	movs	r2, #120	; 0x78
 8015748:	4621      	mov	r1, r4
 801574a:	4628      	mov	r0, r5
 801574c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8015750:	f007 f8e1 	bl	801c916 <memcpy>
 8015754:	4628      	mov	r0, r5
 8015756:	b00a      	add	sp, #40	; 0x28
 8015758:	bd70      	pop	{r4, r5, r6, pc}
 801575a:	bf00      	nop
 801575c:	20010830 	.word	0x20010830
 8015760:	0801ead0 	.word	0x0801ead0

08015764 <rcl_take>:
 8015764:	2800      	cmp	r0, #0
 8015766:	d049      	beq.n	80157fc <rcl_take+0x98>
 8015768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801576c:	4615      	mov	r5, r2
 801576e:	6802      	ldr	r2, [r0, #0]
 8015770:	b0a0      	sub	sp, #128	; 0x80
 8015772:	4604      	mov	r4, r0
 8015774:	2a00      	cmp	r2, #0
 8015776:	d039      	beq.n	80157ec <rcl_take+0x88>
 8015778:	461f      	mov	r7, r3
 801577a:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 801577e:	b3ab      	cbz	r3, 80157ec <rcl_take+0x88>
 8015780:	460e      	mov	r6, r1
 8015782:	2900      	cmp	r1, #0
 8015784:	d038      	beq.n	80157f8 <rcl_take+0x94>
 8015786:	2d00      	cmp	r5, #0
 8015788:	d03c      	beq.n	8015804 <rcl_take+0xa0>
 801578a:	a802      	add	r0, sp, #8
 801578c:	f002 fc24 	bl	8017fd8 <rmw_get_zero_initialized_message_info>
 8015790:	6823      	ldr	r3, [r4, #0]
 8015792:	f10d 0c08 	add.w	ip, sp, #8
 8015796:	46ae      	mov	lr, r5
 8015798:	f8d3 80c8 	ldr.w	r8, [r3, #200]	; 0xc8
 801579c:	2400      	movs	r4, #0
 801579e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80157a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80157a6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80157aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80157ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80157b2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80157b6:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80157ba:	462b      	mov	r3, r5
 80157bc:	f10d 0247 	add.w	r2, sp, #71	; 0x47
 80157c0:	f88d 4047 	strb.w	r4, [sp, #71]	; 0x47
 80157c4:	e88e 0003 	stmia.w	lr, {r0, r1}
 80157c8:	4631      	mov	r1, r6
 80157ca:	4640      	mov	r0, r8
 80157cc:	9700      	str	r7, [sp, #0]
 80157ce:	f003 fda7 	bl	8019320 <rmw_take_with_info>
 80157d2:	4603      	mov	r3, r0
 80157d4:	b9c0      	cbnz	r0, 8015808 <rcl_take+0xa4>
 80157d6:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
 80157da:	f240 1291 	movw	r2, #401	; 0x191
 80157de:	2900      	cmp	r1, #0
 80157e0:	bf08      	it	eq
 80157e2:	4613      	moveq	r3, r2
 80157e4:	4618      	mov	r0, r3
 80157e6:	b020      	add	sp, #128	; 0x80
 80157e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157ec:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80157f0:	4618      	mov	r0, r3
 80157f2:	b020      	add	sp, #128	; 0x80
 80157f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157f8:	230b      	movs	r3, #11
 80157fa:	e7f3      	b.n	80157e4 <rcl_take+0x80>
 80157fc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8015800:	4618      	mov	r0, r3
 8015802:	4770      	bx	lr
 8015804:	ad12      	add	r5, sp, #72	; 0x48
 8015806:	e7c0      	b.n	801578a <rcl_take+0x26>
 8015808:	f7fe fe60 	bl	80144cc <rcl_convert_rmw_ret_to_rcl_ret>
 801580c:	4603      	mov	r3, r0
 801580e:	e7e9      	b.n	80157e4 <rcl_take+0x80>

08015810 <rcl_subscription_get_rmw_handle>:
 8015810:	b118      	cbz	r0, 801581a <rcl_subscription_get_rmw_handle+0xa>
 8015812:	6800      	ldr	r0, [r0, #0]
 8015814:	b108      	cbz	r0, 801581a <rcl_subscription_get_rmw_handle+0xa>
 8015816:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 801581a:	4770      	bx	lr

0801581c <rcl_subscription_is_valid>:
 801581c:	b130      	cbz	r0, 801582c <rcl_subscription_is_valid+0x10>
 801581e:	6800      	ldr	r0, [r0, #0]
 8015820:	b120      	cbz	r0, 801582c <rcl_subscription_is_valid+0x10>
 8015822:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 8015826:	3800      	subs	r0, #0
 8015828:	bf18      	it	ne
 801582a:	2001      	movne	r0, #1
 801582c:	4770      	bx	lr
 801582e:	bf00      	nop

08015830 <rcl_get_system_time>:
 8015830:	4608      	mov	r0, r1
 8015832:	f7f8 ba09 	b.w	800dc48 <rcutils_system_time_now>
 8015836:	bf00      	nop

08015838 <rcl_get_steady_time>:
 8015838:	4608      	mov	r0, r1
 801583a:	f7f8 ba2d 	b.w	800dc98 <rcutils_steady_time_now>
 801583e:	bf00      	nop

08015840 <rcl_get_ros_time>:
 8015840:	7a03      	ldrb	r3, [r0, #8]
 8015842:	b510      	push	{r4, lr}
 8015844:	460c      	mov	r4, r1
 8015846:	b143      	cbz	r3, 801585a <rcl_get_ros_time+0x1a>
 8015848:	2105      	movs	r1, #5
 801584a:	f001 ff9d 	bl	8017788 <__atomic_load_8>
 801584e:	4602      	mov	r2, r0
 8015850:	460b      	mov	r3, r1
 8015852:	2000      	movs	r0, #0
 8015854:	e9c4 2300 	strd	r2, r3, [r4]
 8015858:	bd10      	pop	{r4, pc}
 801585a:	4608      	mov	r0, r1
 801585c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015860:	f7f8 b9f2 	b.w	800dc48 <rcutils_system_time_now>

08015864 <rcl_clock_valid>:
 8015864:	b138      	cbz	r0, 8015876 <rcl_clock_valid+0x12>
 8015866:	7803      	ldrb	r3, [r0, #0]
 8015868:	b123      	cbz	r3, 8015874 <rcl_clock_valid+0x10>
 801586a:	68c0      	ldr	r0, [r0, #12]
 801586c:	3800      	subs	r0, #0
 801586e:	bf18      	it	ne
 8015870:	2001      	movne	r0, #1
 8015872:	4770      	bx	lr
 8015874:	4618      	mov	r0, r3
 8015876:	4770      	bx	lr

08015878 <rcl_clock_init>:
 8015878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801587a:	4605      	mov	r5, r0
 801587c:	4610      	mov	r0, r2
 801587e:	4614      	mov	r4, r2
 8015880:	460e      	mov	r6, r1
 8015882:	f7f8 f9a1 	bl	800dbc8 <rcutils_allocator_is_valid>
 8015886:	b128      	cbz	r0, 8015894 <rcl_clock_init+0x1c>
 8015888:	2d03      	cmp	r5, #3
 801588a:	d803      	bhi.n	8015894 <rcl_clock_init+0x1c>
 801588c:	e8df f005 	tbb	[pc, r5]
 8015890:	0659301f 	.word	0x0659301f
 8015894:	f04f 0c0b 	mov.w	ip, #11
 8015898:	4660      	mov	r0, ip
 801589a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801589c:	2c00      	cmp	r4, #0
 801589e:	d0f9      	beq.n	8015894 <rcl_clock_init+0x1c>
 80158a0:	fab6 f386 	clz	r3, r6
 80158a4:	095b      	lsrs	r3, r3, #5
 80158a6:	2e00      	cmp	r6, #0
 80158a8:	d0f4      	beq.n	8015894 <rcl_clock_init+0x1c>
 80158aa:	6133      	str	r3, [r6, #16]
 80158ac:	469c      	mov	ip, r3
 80158ae:	f106 0514 	add.w	r5, r6, #20
 80158b2:	4f32      	ldr	r7, [pc, #200]	; (801597c <rcl_clock_init+0x104>)
 80158b4:	f04f 0e03 	mov.w	lr, #3
 80158b8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80158bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80158be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80158c0:	6823      	ldr	r3, [r4, #0]
 80158c2:	4660      	mov	r0, ip
 80158c4:	602b      	str	r3, [r5, #0]
 80158c6:	60f7      	str	r7, [r6, #12]
 80158c8:	f886 e000 	strb.w	lr, [r6]
 80158cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158ce:	2e00      	cmp	r6, #0
 80158d0:	d0e0      	beq.n	8015894 <rcl_clock_init+0x1c>
 80158d2:	2300      	movs	r3, #0
 80158d4:	f106 0514 	add.w	r5, r6, #20
 80158d8:	7033      	strb	r3, [r6, #0]
 80158da:	469c      	mov	ip, r3
 80158dc:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80158e0:	e9c6 3303 	strd	r3, r3, [r6, #12]
 80158e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80158e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80158e8:	6823      	ldr	r3, [r4, #0]
 80158ea:	4660      	mov	r0, ip
 80158ec:	602b      	str	r3, [r5, #0]
 80158ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158f0:	2c00      	cmp	r4, #0
 80158f2:	d0cf      	beq.n	8015894 <rcl_clock_init+0x1c>
 80158f4:	fab6 f586 	clz	r5, r6
 80158f8:	096d      	lsrs	r5, r5, #5
 80158fa:	2e00      	cmp	r6, #0
 80158fc:	d0ca      	beq.n	8015894 <rcl_clock_init+0x1c>
 80158fe:	46a6      	mov	lr, r4
 8015900:	7035      	strb	r5, [r6, #0]
 8015902:	f106 0c14 	add.w	ip, r6, #20
 8015906:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801590a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801590e:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8015912:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015916:	f8de 3000 	ldr.w	r3, [lr]
 801591a:	2010      	movs	r0, #16
 801591c:	f8cc 3000 	str.w	r3, [ip]
 8015920:	6823      	ldr	r3, [r4, #0]
 8015922:	6921      	ldr	r1, [r4, #16]
 8015924:	4798      	blx	r3
 8015926:	6130      	str	r0, [r6, #16]
 8015928:	b320      	cbz	r0, 8015974 <rcl_clock_init+0xfc>
 801592a:	2200      	movs	r2, #0
 801592c:	2300      	movs	r3, #0
 801592e:	46ac      	mov	ip, r5
 8015930:	7205      	strb	r5, [r0, #8]
 8015932:	e9c0 2300 	strd	r2, r3, [r0]
 8015936:	4a12      	ldr	r2, [pc, #72]	; (8015980 <rcl_clock_init+0x108>)
 8015938:	2301      	movs	r3, #1
 801593a:	4660      	mov	r0, ip
 801593c:	60f2      	str	r2, [r6, #12]
 801593e:	7033      	strb	r3, [r6, #0]
 8015940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015942:	2c00      	cmp	r4, #0
 8015944:	d0a6      	beq.n	8015894 <rcl_clock_init+0x1c>
 8015946:	fab6 f386 	clz	r3, r6
 801594a:	095b      	lsrs	r3, r3, #5
 801594c:	2e00      	cmp	r6, #0
 801594e:	d0a1      	beq.n	8015894 <rcl_clock_init+0x1c>
 8015950:	6133      	str	r3, [r6, #16]
 8015952:	469c      	mov	ip, r3
 8015954:	f106 0514 	add.w	r5, r6, #20
 8015958:	f8df e028 	ldr.w	lr, [pc, #40]	; 8015984 <rcl_clock_init+0x10c>
 801595c:	2702      	movs	r7, #2
 801595e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015966:	6823      	ldr	r3, [r4, #0]
 8015968:	4660      	mov	r0, ip
 801596a:	602b      	str	r3, [r5, #0]
 801596c:	f8c6 e00c 	str.w	lr, [r6, #12]
 8015970:	7037      	strb	r7, [r6, #0]
 8015972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015974:	f04f 0c0a 	mov.w	ip, #10
 8015978:	e78e      	b.n	8015898 <rcl_clock_init+0x20>
 801597a:	bf00      	nop
 801597c:	08015839 	.word	0x08015839
 8015980:	08015841 	.word	0x08015841
 8015984:	08015831 	.word	0x08015831

08015988 <rcl_clock_get_now>:
 8015988:	b140      	cbz	r0, 801599c <rcl_clock_get_now+0x14>
 801598a:	b139      	cbz	r1, 801599c <rcl_clock_get_now+0x14>
 801598c:	7803      	ldrb	r3, [r0, #0]
 801598e:	b11b      	cbz	r3, 8015998 <rcl_clock_get_now+0x10>
 8015990:	68c3      	ldr	r3, [r0, #12]
 8015992:	b10b      	cbz	r3, 8015998 <rcl_clock_get_now+0x10>
 8015994:	6900      	ldr	r0, [r0, #16]
 8015996:	4718      	bx	r3
 8015998:	2001      	movs	r0, #1
 801599a:	4770      	bx	lr
 801599c:	200b      	movs	r0, #11
 801599e:	4770      	bx	lr

080159a0 <rcl_clock_add_jump_callback>:
 80159a0:	b082      	sub	sp, #8
 80159a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159a6:	a906      	add	r1, sp, #24
 80159a8:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 80159ac:	e881 000c 	stmia.w	r1, {r2, r3}
 80159b0:	b330      	cbz	r0, 8015a00 <rcl_clock_add_jump_callback+0x60>
 80159b2:	4604      	mov	r4, r0
 80159b4:	3014      	adds	r0, #20
 80159b6:	f7f8 f907 	bl	800dbc8 <rcutils_allocator_is_valid>
 80159ba:	b30d      	cbz	r5, 8015a00 <rcl_clock_add_jump_callback+0x60>
 80159bc:	f080 0301 	eor.w	r3, r0, #1
 80159c0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80159c4:	d11c      	bne.n	8015a00 <rcl_clock_add_jump_callback+0x60>
 80159c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80159c8:	2a00      	cmp	r2, #0
 80159ca:	db19      	blt.n	8015a00 <rcl_clock_add_jump_callback+0x60>
 80159cc:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80159d0:	2901      	cmp	r1, #1
 80159d2:	f172 0200 	sbcs.w	r2, r2, #0
 80159d6:	da13      	bge.n	8015a00 <rcl_clock_add_jump_callback+0x60>
 80159d8:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 80159dc:	2f00      	cmp	r7, #0
 80159de:	d040      	beq.n	8015a62 <rcl_clock_add_jump_callback+0xc2>
 80159e0:	4602      	mov	r2, r0
 80159e2:	e003      	b.n	80159ec <rcl_clock_add_jump_callback+0x4c>
 80159e4:	42bb      	cmp	r3, r7
 80159e6:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80159ea:	d010      	beq.n	8015a0e <rcl_clock_add_jump_callback+0x6e>
 80159ec:	6811      	ldr	r1, [r2, #0]
 80159ee:	3301      	adds	r3, #1
 80159f0:	42a9      	cmp	r1, r5
 80159f2:	d1f7      	bne.n	80159e4 <rcl_clock_add_jump_callback+0x44>
 80159f4:	6a11      	ldr	r1, [r2, #32]
 80159f6:	42b1      	cmp	r1, r6
 80159f8:	d1f4      	bne.n	80159e4 <rcl_clock_add_jump_callback+0x44>
 80159fa:	f04f 0e01 	mov.w	lr, #1
 80159fe:	e001      	b.n	8015a04 <rcl_clock_add_jump_callback+0x64>
 8015a00:	f04f 0e0b 	mov.w	lr, #11
 8015a04:	4670      	mov	r0, lr
 8015a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015a0a:	b002      	add	sp, #8
 8015a0c:	4770      	bx	lr
 8015a0e:	3301      	adds	r3, #1
 8015a10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015a14:	00d9      	lsls	r1, r3, #3
 8015a16:	69e3      	ldr	r3, [r4, #28]
 8015a18:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8015a1a:	4798      	blx	r3
 8015a1c:	b1f0      	cbz	r0, 8015a5c <rcl_clock_add_jump_callback+0xbc>
 8015a1e:	68a3      	ldr	r3, [r4, #8]
 8015a20:	f10d 0c18 	add.w	ip, sp, #24
 8015a24:	6060      	str	r0, [r4, #4]
 8015a26:	f04f 0e00 	mov.w	lr, #0
 8015a2a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8015a2e:	f103 0801 	add.w	r8, r3, #1
 8015a32:	f840 5032 	str.w	r5, [r0, r2, lsl #3]
 8015a36:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8015a3a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015a3e:	f105 0708 	add.w	r7, r5, #8
 8015a42:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015a44:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8015a48:	e887 0003 	stmia.w	r7, {r0, r1}
 8015a4c:	4670      	mov	r0, lr
 8015a4e:	622e      	str	r6, [r5, #32]
 8015a50:	f8c4 8008 	str.w	r8, [r4, #8]
 8015a54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015a58:	b002      	add	sp, #8
 8015a5a:	4770      	bx	lr
 8015a5c:	f04f 0e0a 	mov.w	lr, #10
 8015a60:	e7d0      	b.n	8015a04 <rcl_clock_add_jump_callback+0x64>
 8015a62:	2128      	movs	r1, #40	; 0x28
 8015a64:	e7d7      	b.n	8015a16 <rcl_clock_add_jump_callback+0x76>
 8015a66:	bf00      	nop

08015a68 <rcl_clock_remove_jump_callback>:
 8015a68:	2800      	cmp	r0, #0
 8015a6a:	d05f      	beq.n	8015b2c <rcl_clock_remove_jump_callback+0xc4>
 8015a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a70:	4605      	mov	r5, r0
 8015a72:	3014      	adds	r0, #20
 8015a74:	460f      	mov	r7, r1
 8015a76:	4692      	mov	sl, r2
 8015a78:	f7f8 f8a6 	bl	800dbc8 <rcutils_allocator_is_valid>
 8015a7c:	f080 0001 	eor.w	r0, r0, #1
 8015a80:	b2c0      	uxtb	r0, r0
 8015a82:	2800      	cmp	r0, #0
 8015a84:	d13f      	bne.n	8015b06 <rcl_clock_remove_jump_callback+0x9e>
 8015a86:	2f00      	cmp	r7, #0
 8015a88:	d03d      	beq.n	8015b06 <rcl_clock_remove_jump_callback+0x9e>
 8015a8a:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8015a8e:	f1b8 0f00 	cmp.w	r8, #0
 8015a92:	d00c      	beq.n	8015aae <rcl_clock_remove_jump_callback+0x46>
 8015a94:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8015a98:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 8015a9c:	464c      	mov	r4, r9
 8015a9e:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 8015aa2:	6823      	ldr	r3, [r4, #0]
 8015aa4:	42bb      	cmp	r3, r7
 8015aa6:	d005      	beq.n	8015ab4 <rcl_clock_remove_jump_callback+0x4c>
 8015aa8:	3428      	adds	r4, #40	; 0x28
 8015aaa:	42a6      	cmp	r6, r4
 8015aac:	d1f9      	bne.n	8015aa2 <rcl_clock_remove_jump_callback+0x3a>
 8015aae:	2001      	movs	r0, #1
 8015ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ab4:	6a23      	ldr	r3, [r4, #32]
 8015ab6:	3428      	adds	r4, #40	; 0x28
 8015ab8:	42a6      	cmp	r6, r4
 8015aba:	d02f      	beq.n	8015b1c <rcl_clock_remove_jump_callback+0xb4>
 8015abc:	4553      	cmp	r3, sl
 8015abe:	d1f0      	bne.n	8015aa2 <rcl_clock_remove_jump_callback+0x3a>
 8015ac0:	46a6      	mov	lr, r4
 8015ac2:	f1a4 0c28 	sub.w	ip, r4, #40	; 0x28
 8015ac6:	3428      	adds	r4, #40	; 0x28
 8015ac8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015acc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015ad0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015ad4:	42a6      	cmp	r6, r4
 8015ad6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015ada:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015ade:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015ae2:	d1ed      	bne.n	8015ac0 <rcl_clock_remove_jump_callback+0x58>
 8015ae4:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8015ae8:	60ac      	str	r4, [r5, #8]
 8015aea:	b17c      	cbz	r4, 8015b0c <rcl_clock_remove_jump_callback+0xa4>
 8015aec:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8015af0:	69eb      	ldr	r3, [r5, #28]
 8015af2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8015af4:	4648      	mov	r0, r9
 8015af6:	00e1      	lsls	r1, r4, #3
 8015af8:	4798      	blx	r3
 8015afa:	4603      	mov	r3, r0
 8015afc:	b1c0      	cbz	r0, 8015b30 <rcl_clock_remove_jump_callback+0xc8>
 8015afe:	2000      	movs	r0, #0
 8015b00:	606b      	str	r3, [r5, #4]
 8015b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b06:	200b      	movs	r0, #11
 8015b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b0c:	4648      	mov	r0, r9
 8015b0e:	69ab      	ldr	r3, [r5, #24]
 8015b10:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8015b12:	4798      	blx	r3
 8015b14:	4620      	mov	r0, r4
 8015b16:	606c      	str	r4, [r5, #4]
 8015b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b1c:	4553      	cmp	r3, sl
 8015b1e:	d1c6      	bne.n	8015aae <rcl_clock_remove_jump_callback+0x46>
 8015b20:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8015b24:	60ac      	str	r4, [r5, #8]
 8015b26:	2c00      	cmp	r4, #0
 8015b28:	d1e0      	bne.n	8015aec <rcl_clock_remove_jump_callback+0x84>
 8015b2a:	e7ef      	b.n	8015b0c <rcl_clock_remove_jump_callback+0xa4>
 8015b2c:	200b      	movs	r0, #11
 8015b2e:	4770      	bx	lr
 8015b30:	200a      	movs	r0, #10
 8015b32:	e7e9      	b.n	8015b08 <rcl_clock_remove_jump_callback+0xa0>

08015b34 <_rcl_timer_time_jump>:
 8015b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b38:	4605      	mov	r5, r0
 8015b3a:	b084      	sub	sp, #16
 8015b3c:	4614      	mov	r4, r2
 8015b3e:	b131      	cbz	r1, 8015b4e <_rcl_timer_time_jump+0x1a>
 8015b40:	7803      	ldrb	r3, [r0, #0]
 8015b42:	3b02      	subs	r3, #2
 8015b44:	2b01      	cmp	r3, #1
 8015b46:	d93f      	bls.n	8015bc8 <_rcl_timer_time_jump+0x94>
 8015b48:	b004      	add	sp, #16
 8015b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b4e:	6813      	ldr	r3, [r2, #0]
 8015b50:	a902      	add	r1, sp, #8
 8015b52:	6818      	ldr	r0, [r3, #0]
 8015b54:	f7ff ff18 	bl	8015988 <rcl_clock_get_now>
 8015b58:	2800      	cmp	r0, #0
 8015b5a:	d1f5      	bne.n	8015b48 <_rcl_timer_time_jump+0x14>
 8015b5c:	6820      	ldr	r0, [r4, #0]
 8015b5e:	2105      	movs	r1, #5
 8015b60:	3020      	adds	r0, #32
 8015b62:	f001 fe11 	bl	8017788 <__atomic_load_8>
 8015b66:	6823      	ldr	r3, [r4, #0]
 8015b68:	4681      	mov	r9, r0
 8015b6a:	4688      	mov	r8, r1
 8015b6c:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8015b70:	2105      	movs	r1, #5
 8015b72:	f001 fe09 	bl	8017788 <__atomic_load_8>
 8015b76:	4607      	mov	r7, r0
 8015b78:	6820      	ldr	r0, [r4, #0]
 8015b7a:	460e      	mov	r6, r1
 8015b7c:	2105      	movs	r1, #5
 8015b7e:	3018      	adds	r0, #24
 8015b80:	f001 fe02 	bl	8017788 <__atomic_load_8>
 8015b84:	782b      	ldrb	r3, [r5, #0]
 8015b86:	4682      	mov	sl, r0
 8015b88:	460d      	mov	r5, r1
 8015b8a:	3b02      	subs	r3, #2
 8015b8c:	9a02      	ldr	r2, [sp, #8]
 8015b8e:	2b01      	cmp	r3, #1
 8015b90:	9b03      	ldr	r3, [sp, #12]
 8015b92:	d937      	bls.n	8015c04 <_rcl_timer_time_jump+0xd0>
 8015b94:	42ba      	cmp	r2, r7
 8015b96:	eb73 0106 	sbcs.w	r1, r3, r6
 8015b9a:	da60      	bge.n	8015c5e <_rcl_timer_time_jump+0x12a>
 8015b9c:	454a      	cmp	r2, r9
 8015b9e:	eb73 0108 	sbcs.w	r1, r3, r8
 8015ba2:	dad1      	bge.n	8015b48 <_rcl_timer_time_jump+0x14>
 8015ba4:	eb1a 0202 	adds.w	r2, sl, r2
 8015ba8:	6820      	ldr	r0, [r4, #0]
 8015baa:	eb43 0305 	adc.w	r3, r3, r5
 8015bae:	2505      	movs	r5, #5
 8015bb0:	3028      	adds	r0, #40	; 0x28
 8015bb2:	9500      	str	r5, [sp, #0]
 8015bb4:	f001 fe1e 	bl	80177f4 <__atomic_store_8>
 8015bb8:	6820      	ldr	r0, [r4, #0]
 8015bba:	9500      	str	r5, [sp, #0]
 8015bbc:	3020      	adds	r0, #32
 8015bbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015bc2:	f001 fe17 	bl	80177f4 <__atomic_store_8>
 8015bc6:	e7bf      	b.n	8015b48 <_rcl_timer_time_jump+0x14>
 8015bc8:	6813      	ldr	r3, [r2, #0]
 8015bca:	a902      	add	r1, sp, #8
 8015bcc:	6818      	ldr	r0, [r3, #0]
 8015bce:	f7ff fedb 	bl	8015988 <rcl_clock_get_now>
 8015bd2:	2800      	cmp	r0, #0
 8015bd4:	d1b8      	bne.n	8015b48 <_rcl_timer_time_jump+0x14>
 8015bd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015bda:	4313      	orrs	r3, r2
 8015bdc:	d0b4      	beq.n	8015b48 <_rcl_timer_time_jump+0x14>
 8015bde:	6820      	ldr	r0, [r4, #0]
 8015be0:	2105      	movs	r1, #5
 8015be2:	3028      	adds	r0, #40	; 0x28
 8015be4:	f001 fdd0 	bl	8017788 <__atomic_load_8>
 8015be8:	9d02      	ldr	r5, [sp, #8]
 8015bea:	4602      	mov	r2, r0
 8015bec:	9b03      	ldr	r3, [sp, #12]
 8015bee:	6820      	ldr	r0, [r4, #0]
 8015bf0:	1b52      	subs	r2, r2, r5
 8015bf2:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8015bf6:	eb61 0303 	sbc.w	r3, r1, r3
 8015bfa:	2105      	movs	r1, #5
 8015bfc:	9100      	str	r1, [sp, #0]
 8015bfe:	f001 fdf9 	bl	80177f4 <__atomic_store_8>
 8015c02:	e7a1      	b.n	8015b48 <_rcl_timer_time_jump+0x14>
 8015c04:	4313      	orrs	r3, r2
 8015c06:	d09f      	beq.n	8015b48 <_rcl_timer_time_jump+0x14>
 8015c08:	6820      	ldr	r0, [r4, #0]
 8015c0a:	f04f 0805 	mov.w	r8, #5
 8015c0e:	2300      	movs	r3, #0
 8015c10:	2200      	movs	r2, #0
 8015c12:	3030      	adds	r0, #48	; 0x30
 8015c14:	f8cd 8000 	str.w	r8, [sp]
 8015c18:	f001 fe22 	bl	8017860 <__atomic_exchange_8>
 8015c1c:	ea51 0300 	orrs.w	r3, r1, r0
 8015c20:	4606      	mov	r6, r0
 8015c22:	460f      	mov	r7, r1
 8015c24:	d090      	beq.n	8015b48 <_rcl_timer_time_jump+0x14>
 8015c26:	9a02      	ldr	r2, [sp, #8]
 8015c28:	9b03      	ldr	r3, [sp, #12]
 8015c2a:	1a12      	subs	r2, r2, r0
 8015c2c:	f8cd 8000 	str.w	r8, [sp]
 8015c30:	6820      	ldr	r0, [r4, #0]
 8015c32:	eb63 0301 	sbc.w	r3, r3, r1
 8015c36:	eb12 020a 	adds.w	r2, r2, sl
 8015c3a:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8015c3e:	eb43 0305 	adc.w	r3, r3, r5
 8015c42:	f001 fdd7 	bl	80177f4 <__atomic_store_8>
 8015c46:	f8cd 8000 	str.w	r8, [sp]
 8015c4a:	6820      	ldr	r0, [r4, #0]
 8015c4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015c50:	3020      	adds	r0, #32
 8015c52:	1b92      	subs	r2, r2, r6
 8015c54:	eb63 0307 	sbc.w	r3, r3, r7
 8015c58:	f001 fdcc 	bl	80177f4 <__atomic_store_8>
 8015c5c:	e774      	b.n	8015b48 <_rcl_timer_time_jump+0x14>
 8015c5e:	6820      	ldr	r0, [r4, #0]
 8015c60:	3008      	adds	r0, #8
 8015c62:	f005 fd77 	bl	801b754 <rcl_trigger_guard_condition>
 8015c66:	e76f      	b.n	8015b48 <_rcl_timer_time_jump+0x14>

08015c68 <rcl_get_zero_initialized_timer>:
 8015c68:	4b01      	ldr	r3, [pc, #4]	; (8015c70 <rcl_get_zero_initialized_timer+0x8>)
 8015c6a:	6818      	ldr	r0, [r3, #0]
 8015c6c:	4770      	bx	lr
 8015c6e:	bf00      	nop
 8015c70:	0801eb20 	.word	0x0801eb20

08015c74 <rcl_timer_init>:
 8015c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c78:	b0af      	sub	sp, #188	; 0xbc
 8015c7a:	460d      	mov	r5, r1
 8015c7c:	4604      	mov	r4, r0
 8015c7e:	4692      	mov	sl, r2
 8015c80:	a83b      	add	r0, sp, #236	; 0xec
 8015c82:	e9dd 8938 	ldrd	r8, r9, [sp, #224]	; 0xe0
 8015c86:	f7f7 ff9f 	bl	800dbc8 <rcutils_allocator_is_valid>
 8015c8a:	fab5 f385 	clz	r3, r5
 8015c8e:	095b      	lsrs	r3, r3, #5
 8015c90:	ea43 73d9 	orr.w	r3, r3, r9, lsr #31
 8015c94:	2c00      	cmp	r4, #0
 8015c96:	bf08      	it	eq
 8015c98:	f043 0301 	orreq.w	r3, r3, #1
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d167      	bne.n	8015d70 <rcl_timer_init+0xfc>
 8015ca0:	f080 0001 	eor.w	r0, r0, #1
 8015ca4:	b2c0      	uxtb	r0, r0
 8015ca6:	2800      	cmp	r0, #0
 8015ca8:	d162      	bne.n	8015d70 <rcl_timer_init+0xfc>
 8015caa:	6823      	ldr	r3, [r4, #0]
 8015cac:	b123      	cbz	r3, 8015cb8 <rcl_timer_init+0x44>
 8015cae:	2664      	movs	r6, #100	; 0x64
 8015cb0:	4630      	mov	r0, r6
 8015cb2:	b02f      	add	sp, #188	; 0xbc
 8015cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cb8:	a908      	add	r1, sp, #32
 8015cba:	4628      	mov	r0, r5
 8015cbc:	f7ff fe64 	bl	8015988 <rcl_clock_get_now>
 8015cc0:	4606      	mov	r6, r0
 8015cc2:	2800      	cmp	r0, #0
 8015cc4:	d1f4      	bne.n	8015cb0 <rcl_timer_init+0x3c>
 8015cc6:	f10d 0b18 	add.w	fp, sp, #24
 8015cca:	ae0b      	add	r6, sp, #44	; 0x2c
 8015ccc:	af18      	add	r7, sp, #96	; 0x60
 8015cce:	4658      	mov	r0, fp
 8015cd0:	e9cd 5a16 	strd	r5, sl, [sp, #88]	; 0x58
 8015cd4:	f005 fc48 	bl	801b568 <rcl_get_zero_initialized_guard_condition>
 8015cd8:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8015cdc:	e887 0003 	stmia.w	r7, {r0, r1}
 8015ce0:	4630      	mov	r0, r6
 8015ce2:	f005 fd1b 	bl	801b71c <rcl_guard_condition_get_default_options>
 8015ce6:	ab0d      	add	r3, sp, #52	; 0x34
 8015ce8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015cec:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015cf0:	4651      	mov	r1, sl
 8015cf2:	4638      	mov	r0, r7
 8015cf4:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015cf8:	f005 fc40 	bl	801b57c <rcl_guard_condition_init>
 8015cfc:	4606      	mov	r6, r0
 8015cfe:	2800      	cmp	r0, #0
 8015d00:	d1d6      	bne.n	8015cb0 <rcl_timer_init+0x3c>
 8015d02:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015d04:	781b      	ldrb	r3, [r3, #0]
 8015d06:	2b01      	cmp	r3, #1
 8015d08:	d037      	beq.n	8015d7a <rcl_timer_init+0x106>
 8015d0a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8015d0c:	f10d 0cec 	add.w	ip, sp, #236	; 0xec
 8015d10:	f10d 0e94 	add.w	lr, sp, #148	; 0x94
 8015d14:	f04f 0a00 	mov.w	sl, #0
 8015d18:	931a      	str	r3, [sp, #104]	; 0x68
 8015d1a:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 8015d1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015d22:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 8015d26:	eb12 0008 	adds.w	r0, r2, r8
 8015d2a:	f04f 0800 	mov.w	r8, #0
 8015d2e:	eb43 0109 	adc.w	r1, r3, r9
 8015d32:	f04f 0900 	mov.w	r9, #0
 8015d36:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88
 8015d3a:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8015d3e:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
 8015d42:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015d46:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015d4a:	f8dc 3000 	ldr.w	r3, [ip]
 8015d4e:	2060      	movs	r0, #96	; 0x60
 8015d50:	f88d a090 	strb.w	sl, [sp, #144]	; 0x90
 8015d54:	4619      	mov	r1, r3
 8015d56:	f8ce 3000 	str.w	r3, [lr]
 8015d5a:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8015d5c:	e9cd aa2a 	strd	sl, sl, [sp, #168]	; 0xa8
 8015d60:	4798      	blx	r3
 8015d62:	6020      	str	r0, [r4, #0]
 8015d64:	b358      	cbz	r0, 8015dbe <rcl_timer_init+0x14a>
 8015d66:	2260      	movs	r2, #96	; 0x60
 8015d68:	a916      	add	r1, sp, #88	; 0x58
 8015d6a:	f006 fdd4 	bl	801c916 <memcpy>
 8015d6e:	e79f      	b.n	8015cb0 <rcl_timer_init+0x3c>
 8015d70:	260b      	movs	r6, #11
 8015d72:	4630      	mov	r0, r6
 8015d74:	b02f      	add	sp, #188	; 0xbc
 8015d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d7a:	2001      	movs	r0, #1
 8015d7c:	2100      	movs	r1, #0
 8015d7e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8015d82:	ab12      	add	r3, sp, #72	; 0x48
 8015d84:	4a13      	ldr	r2, [pc, #76]	; (8015dd4 <rcl_timer_init+0x160>)
 8015d86:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8015d8a:	9405      	str	r4, [sp, #20]
 8015d8c:	9204      	str	r2, [sp, #16]
 8015d8e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8015d92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015d96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015d9a:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8015d9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015da0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015da4:	4628      	mov	r0, r5
 8015da6:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8015daa:	f7ff fdf9 	bl	80159a0 <rcl_clock_add_jump_callback>
 8015dae:	4603      	mov	r3, r0
 8015db0:	2800      	cmp	r0, #0
 8015db2:	d0aa      	beq.n	8015d0a <rcl_timer_init+0x96>
 8015db4:	4638      	mov	r0, r7
 8015db6:	461e      	mov	r6, r3
 8015db8:	f005 fc8a 	bl	801b6d0 <rcl_guard_condition_fini>
 8015dbc:	e778      	b.n	8015cb0 <rcl_timer_init+0x3c>
 8015dbe:	4638      	mov	r0, r7
 8015dc0:	260a      	movs	r6, #10
 8015dc2:	f005 fc85 	bl	801b6d0 <rcl_guard_condition_fini>
 8015dc6:	4622      	mov	r2, r4
 8015dc8:	4902      	ldr	r1, [pc, #8]	; (8015dd4 <rcl_timer_init+0x160>)
 8015dca:	4628      	mov	r0, r5
 8015dcc:	f7ff fe4c 	bl	8015a68 <rcl_clock_remove_jump_callback>
 8015dd0:	e76e      	b.n	8015cb0 <rcl_timer_init+0x3c>
 8015dd2:	bf00      	nop
 8015dd4:	08015b35 	.word	0x08015b35

08015dd8 <rcl_timer_call>:
 8015dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ddc:	b087      	sub	sp, #28
 8015dde:	2800      	cmp	r0, #0
 8015de0:	d06c      	beq.n	8015ebc <rcl_timer_call+0xe4>
 8015de2:	6803      	ldr	r3, [r0, #0]
 8015de4:	4604      	mov	r4, r0
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d062      	beq.n	8015eb0 <rcl_timer_call+0xd8>
 8015dea:	f3bf 8f5b 	dmb	ish
 8015dee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015df2:	f3bf 8f5b 	dmb	ish
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d14f      	bne.n	8015e9a <rcl_timer_call+0xc2>
 8015dfa:	6803      	ldr	r3, [r0, #0]
 8015dfc:	a904      	add	r1, sp, #16
 8015dfe:	6818      	ldr	r0, [r3, #0]
 8015e00:	f7ff fdc2 	bl	8015988 <rcl_clock_get_now>
 8015e04:	4605      	mov	r5, r0
 8015e06:	2800      	cmp	r0, #0
 8015e08:	d149      	bne.n	8015e9e <rcl_timer_call+0xc6>
 8015e0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	db49      	blt.n	8015ea6 <rcl_timer_call+0xce>
 8015e12:	2605      	movs	r6, #5
 8015e14:	6820      	ldr	r0, [r4, #0]
 8015e16:	9600      	str	r6, [sp, #0]
 8015e18:	3020      	adds	r0, #32
 8015e1a:	f001 fd21 	bl	8017860 <__atomic_exchange_8>
 8015e1e:	6823      	ldr	r3, [r4, #0]
 8015e20:	4680      	mov	r8, r0
 8015e22:	f3bf 8f5b 	dmb	ish
 8015e26:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8015e2a:	f3bf 8f5b 	dmb	ish
 8015e2e:	6820      	ldr	r0, [r4, #0]
 8015e30:	4689      	mov	r9, r1
 8015e32:	4631      	mov	r1, r6
 8015e34:	3028      	adds	r0, #40	; 0x28
 8015e36:	f001 fca7 	bl	8017788 <__atomic_load_8>
 8015e3a:	460f      	mov	r7, r1
 8015e3c:	4631      	mov	r1, r6
 8015e3e:	4606      	mov	r6, r0
 8015e40:	6820      	ldr	r0, [r4, #0]
 8015e42:	3018      	adds	r0, #24
 8015e44:	f001 fca0 	bl	8017788 <__atomic_load_8>
 8015e48:	4602      	mov	r2, r0
 8015e4a:	9804      	ldr	r0, [sp, #16]
 8015e4c:	460b      	mov	r3, r1
 8015e4e:	18b6      	adds	r6, r6, r2
 8015e50:	f8dd c014 	ldr.w	ip, [sp, #20]
 8015e54:	4692      	mov	sl, r2
 8015e56:	eb47 0701 	adc.w	r7, r7, r1
 8015e5a:	4286      	cmp	r6, r0
 8015e5c:	eb77 010c 	sbcs.w	r1, r7, ip
 8015e60:	da04      	bge.n	8015e6c <rcl_timer_call+0x94>
 8015e62:	ea53 0102 	orrs.w	r1, r3, r2
 8015e66:	d12e      	bne.n	8015ec6 <rcl_timer_call+0xee>
 8015e68:	4606      	mov	r6, r0
 8015e6a:	4667      	mov	r7, ip
 8015e6c:	6820      	ldr	r0, [r4, #0]
 8015e6e:	2105      	movs	r1, #5
 8015e70:	4632      	mov	r2, r6
 8015e72:	463b      	mov	r3, r7
 8015e74:	3028      	adds	r0, #40	; 0x28
 8015e76:	9100      	str	r1, [sp, #0]
 8015e78:	f001 fcbc 	bl	80177f4 <__atomic_store_8>
 8015e7c:	f1bb 0f00 	cmp.w	fp, #0
 8015e80:	d00d      	beq.n	8015e9e <rcl_timer_call+0xc6>
 8015e82:	9a04      	ldr	r2, [sp, #16]
 8015e84:	4620      	mov	r0, r4
 8015e86:	9b05      	ldr	r3, [sp, #20]
 8015e88:	ebb2 0208 	subs.w	r2, r2, r8
 8015e8c:	eb63 0309 	sbc.w	r3, r3, r9
 8015e90:	47d8      	blx	fp
 8015e92:	4628      	mov	r0, r5
 8015e94:	b007      	add	sp, #28
 8015e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e9a:	f240 3521 	movw	r5, #801	; 0x321
 8015e9e:	4628      	mov	r0, r5
 8015ea0:	b007      	add	sp, #28
 8015ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ea6:	2501      	movs	r5, #1
 8015ea8:	4628      	mov	r0, r5
 8015eaa:	b007      	add	sp, #28
 8015eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015eb0:	f44f 7548 	mov.w	r5, #800	; 0x320
 8015eb4:	4628      	mov	r0, r5
 8015eb6:	b007      	add	sp, #28
 8015eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ebc:	250b      	movs	r5, #11
 8015ebe:	4628      	mov	r0, r5
 8015ec0:	b007      	add	sp, #28
 8015ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ec6:	1b80      	subs	r0, r0, r6
 8015ec8:	eb6c 0107 	sbc.w	r1, ip, r7
 8015ecc:	3801      	subs	r0, #1
 8015ece:	f161 0100 	sbc.w	r1, r1, #0
 8015ed2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8015ed6:	f7ea fa1b 	bl	8000310 <__aeabi_ldivmod>
 8015eda:	9b02      	ldr	r3, [sp, #8]
 8015edc:	3001      	adds	r0, #1
 8015ede:	f141 0100 	adc.w	r1, r1, #0
 8015ee2:	fb00 f303 	mul.w	r3, r0, r3
 8015ee6:	fb01 330a 	mla	r3, r1, sl, r3
 8015eea:	fba0 0a0a 	umull	r0, sl, r0, sl
 8015eee:	1986      	adds	r6, r0, r6
 8015ef0:	4453      	add	r3, sl
 8015ef2:	eb43 0707 	adc.w	r7, r3, r7
 8015ef6:	e7b9      	b.n	8015e6c <rcl_timer_call+0x94>

08015ef8 <rcl_timer_is_ready>:
 8015ef8:	b570      	push	{r4, r5, r6, lr}
 8015efa:	b082      	sub	sp, #8
 8015efc:	b380      	cbz	r0, 8015f60 <rcl_timer_is_ready+0x68>
 8015efe:	6803      	ldr	r3, [r0, #0]
 8015f00:	4604      	mov	r4, r0
 8015f02:	b38b      	cbz	r3, 8015f68 <rcl_timer_is_ready+0x70>
 8015f04:	460d      	mov	r5, r1
 8015f06:	b359      	cbz	r1, 8015f60 <rcl_timer_is_ready+0x68>
 8015f08:	f3bf 8f5b 	dmb	ish
 8015f0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015f10:	f3bf 8f5b 	dmb	ish
 8015f14:	b953      	cbnz	r3, 8015f2c <rcl_timer_is_ready+0x34>
 8015f16:	6803      	ldr	r3, [r0, #0]
 8015f18:	4669      	mov	r1, sp
 8015f1a:	6818      	ldr	r0, [r3, #0]
 8015f1c:	f7ff fd34 	bl	8015988 <rcl_clock_get_now>
 8015f20:	4606      	mov	r6, r0
 8015f22:	b148      	cbz	r0, 8015f38 <rcl_timer_is_ready+0x40>
 8015f24:	f240 3321 	movw	r3, #801	; 0x321
 8015f28:	4298      	cmp	r0, r3
 8015f2a:	d102      	bne.n	8015f32 <rcl_timer_is_ready+0x3a>
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	461e      	mov	r6, r3
 8015f30:	702b      	strb	r3, [r5, #0]
 8015f32:	4630      	mov	r0, r6
 8015f34:	b002      	add	sp, #8
 8015f36:	bd70      	pop	{r4, r5, r6, pc}
 8015f38:	6820      	ldr	r0, [r4, #0]
 8015f3a:	2105      	movs	r1, #5
 8015f3c:	3028      	adds	r0, #40	; 0x28
 8015f3e:	f001 fc23 	bl	8017788 <__atomic_load_8>
 8015f42:	9b00      	ldr	r3, [sp, #0]
 8015f44:	1ac0      	subs	r0, r0, r3
 8015f46:	9b01      	ldr	r3, [sp, #4]
 8015f48:	eb61 0103 	sbc.w	r1, r1, r3
 8015f4c:	2801      	cmp	r0, #1
 8015f4e:	4630      	mov	r0, r6
 8015f50:	f171 0300 	sbcs.w	r3, r1, #0
 8015f54:	bfb4      	ite	lt
 8015f56:	2301      	movlt	r3, #1
 8015f58:	2300      	movge	r3, #0
 8015f5a:	702b      	strb	r3, [r5, #0]
 8015f5c:	b002      	add	sp, #8
 8015f5e:	bd70      	pop	{r4, r5, r6, pc}
 8015f60:	260b      	movs	r6, #11
 8015f62:	4630      	mov	r0, r6
 8015f64:	b002      	add	sp, #8
 8015f66:	bd70      	pop	{r4, r5, r6, pc}
 8015f68:	f44f 7648 	mov.w	r6, #800	; 0x320
 8015f6c:	e7e1      	b.n	8015f32 <rcl_timer_is_ready+0x3a>
 8015f6e:	bf00      	nop

08015f70 <rcl_timer_get_time_until_next_call>:
 8015f70:	b570      	push	{r4, r5, r6, lr}
 8015f72:	b082      	sub	sp, #8
 8015f74:	b330      	cbz	r0, 8015fc4 <rcl_timer_get_time_until_next_call+0x54>
 8015f76:	6803      	ldr	r3, [r0, #0]
 8015f78:	4604      	mov	r4, r0
 8015f7a:	b33b      	cbz	r3, 8015fcc <rcl_timer_get_time_until_next_call+0x5c>
 8015f7c:	460d      	mov	r5, r1
 8015f7e:	b309      	cbz	r1, 8015fc4 <rcl_timer_get_time_until_next_call+0x54>
 8015f80:	f3bf 8f5b 	dmb	ish
 8015f84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015f88:	f3bf 8f5b 	dmb	ish
 8015f8c:	b9ab      	cbnz	r3, 8015fba <rcl_timer_get_time_until_next_call+0x4a>
 8015f8e:	6803      	ldr	r3, [r0, #0]
 8015f90:	4669      	mov	r1, sp
 8015f92:	6818      	ldr	r0, [r3, #0]
 8015f94:	f7ff fcf8 	bl	8015988 <rcl_clock_get_now>
 8015f98:	4606      	mov	r6, r0
 8015f9a:	b958      	cbnz	r0, 8015fb4 <rcl_timer_get_time_until_next_call+0x44>
 8015f9c:	6820      	ldr	r0, [r4, #0]
 8015f9e:	2105      	movs	r1, #5
 8015fa0:	3028      	adds	r0, #40	; 0x28
 8015fa2:	f001 fbf1 	bl	8017788 <__atomic_load_8>
 8015fa6:	9b00      	ldr	r3, [sp, #0]
 8015fa8:	1ac0      	subs	r0, r0, r3
 8015faa:	9b01      	ldr	r3, [sp, #4]
 8015fac:	eb61 0103 	sbc.w	r1, r1, r3
 8015fb0:	6028      	str	r0, [r5, #0]
 8015fb2:	6069      	str	r1, [r5, #4]
 8015fb4:	4630      	mov	r0, r6
 8015fb6:	b002      	add	sp, #8
 8015fb8:	bd70      	pop	{r4, r5, r6, pc}
 8015fba:	f240 3621 	movw	r6, #801	; 0x321
 8015fbe:	4630      	mov	r0, r6
 8015fc0:	b002      	add	sp, #8
 8015fc2:	bd70      	pop	{r4, r5, r6, pc}
 8015fc4:	260b      	movs	r6, #11
 8015fc6:	4630      	mov	r0, r6
 8015fc8:	b002      	add	sp, #8
 8015fca:	bd70      	pop	{r4, r5, r6, pc}
 8015fcc:	f44f 7648 	mov.w	r6, #800	; 0x320
 8015fd0:	e7f0      	b.n	8015fb4 <rcl_timer_get_time_until_next_call+0x44>
 8015fd2:	bf00      	nop

08015fd4 <rcl_timer_get_guard_condition>:
 8015fd4:	b130      	cbz	r0, 8015fe4 <rcl_timer_get_guard_condition+0x10>
 8015fd6:	6800      	ldr	r0, [r0, #0]
 8015fd8:	b120      	cbz	r0, 8015fe4 <rcl_timer_get_guard_condition+0x10>
 8015fda:	68c3      	ldr	r3, [r0, #12]
 8015fdc:	b10b      	cbz	r3, 8015fe2 <rcl_timer_get_guard_condition+0xe>
 8015fde:	3008      	adds	r0, #8
 8015fe0:	4770      	bx	lr
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	4770      	bx	lr
 8015fe6:	bf00      	nop

08015fe8 <rcl_validate_enclave_name_with_size>:
 8015fe8:	2800      	cmp	r0, #0
 8015fea:	d049      	beq.n	8016080 <rcl_validate_enclave_name_with_size+0x98>
 8015fec:	b570      	push	{r4, r5, r6, lr}
 8015fee:	4615      	mov	r5, r2
 8015ff0:	b0c2      	sub	sp, #264	; 0x108
 8015ff2:	b19a      	cbz	r2, 801601c <rcl_validate_enclave_name_with_size+0x34>
 8015ff4:	461e      	mov	r6, r3
 8015ff6:	466a      	mov	r2, sp
 8015ff8:	ab01      	add	r3, sp, #4
 8015ffa:	460c      	mov	r4, r1
 8015ffc:	f002 f870 	bl	80180e0 <rmw_validate_namespace_with_size>
 8016000:	4684      	mov	ip, r0
 8016002:	b9b8      	cbnz	r0, 8016034 <rcl_validate_enclave_name_with_size+0x4c>
 8016004:	9900      	ldr	r1, [sp, #0]
 8016006:	b171      	cbz	r1, 8016026 <rcl_validate_enclave_name_with_size+0x3e>
 8016008:	2907      	cmp	r1, #7
 801600a:	d019      	beq.n	8016040 <rcl_validate_enclave_name_with_size+0x58>
 801600c:	1e4b      	subs	r3, r1, #1
 801600e:	2b05      	cmp	r3, #5
 8016010:	d83a      	bhi.n	8016088 <rcl_validate_enclave_name_with_size+0xa0>
 8016012:	e8df f003 	tbb	[pc, r3]
 8016016:	2926      	.short	0x2926
 8016018:	1d322f2c 	.word	0x1d322f2c
 801601c:	f04f 0c0b 	mov.w	ip, #11
 8016020:	4660      	mov	r0, ip
 8016022:	b042      	add	sp, #264	; 0x108
 8016024:	bd70      	pop	{r4, r5, r6, pc}
 8016026:	2907      	cmp	r1, #7
 8016028:	d00a      	beq.n	8016040 <rcl_validate_enclave_name_with_size+0x58>
 801602a:	2300      	movs	r3, #0
 801602c:	4660      	mov	r0, ip
 801602e:	602b      	str	r3, [r5, #0]
 8016030:	b042      	add	sp, #264	; 0x108
 8016032:	bd70      	pop	{r4, r5, r6, pc}
 8016034:	f7fe fa4a 	bl	80144cc <rcl_convert_rmw_ret_to_rcl_ret>
 8016038:	4684      	mov	ip, r0
 801603a:	4660      	mov	r0, ip
 801603c:	b042      	add	sp, #264	; 0x108
 801603e:	bd70      	pop	{r4, r5, r6, pc}
 8016040:	2cff      	cmp	r4, #255	; 0xff
 8016042:	d9f2      	bls.n	801602a <rcl_validate_enclave_name_with_size+0x42>
 8016044:	6029      	str	r1, [r5, #0]
 8016046:	2e00      	cmp	r6, #0
 8016048:	d0ea      	beq.n	8016020 <rcl_validate_enclave_name_with_size+0x38>
 801604a:	23fe      	movs	r3, #254	; 0xfe
 801604c:	6033      	str	r3, [r6, #0]
 801604e:	e7e7      	b.n	8016020 <rcl_validate_enclave_name_with_size+0x38>
 8016050:	2306      	movs	r3, #6
 8016052:	602b      	str	r3, [r5, #0]
 8016054:	2e00      	cmp	r6, #0
 8016056:	d0e3      	beq.n	8016020 <rcl_validate_enclave_name_with_size+0x38>
 8016058:	9b01      	ldr	r3, [sp, #4]
 801605a:	4660      	mov	r0, ip
 801605c:	6033      	str	r3, [r6, #0]
 801605e:	b042      	add	sp, #264	; 0x108
 8016060:	bd70      	pop	{r4, r5, r6, pc}
 8016062:	2301      	movs	r3, #1
 8016064:	602b      	str	r3, [r5, #0]
 8016066:	e7f5      	b.n	8016054 <rcl_validate_enclave_name_with_size+0x6c>
 8016068:	2302      	movs	r3, #2
 801606a:	602b      	str	r3, [r5, #0]
 801606c:	e7f2      	b.n	8016054 <rcl_validate_enclave_name_with_size+0x6c>
 801606e:	2303      	movs	r3, #3
 8016070:	602b      	str	r3, [r5, #0]
 8016072:	e7ef      	b.n	8016054 <rcl_validate_enclave_name_with_size+0x6c>
 8016074:	2304      	movs	r3, #4
 8016076:	602b      	str	r3, [r5, #0]
 8016078:	e7ec      	b.n	8016054 <rcl_validate_enclave_name_with_size+0x6c>
 801607a:	2305      	movs	r3, #5
 801607c:	602b      	str	r3, [r5, #0]
 801607e:	e7e9      	b.n	8016054 <rcl_validate_enclave_name_with_size+0x6c>
 8016080:	f04f 0c0b 	mov.w	ip, #11
 8016084:	4660      	mov	r0, ip
 8016086:	4770      	bx	lr
 8016088:	460b      	mov	r3, r1
 801608a:	4a04      	ldr	r2, [pc, #16]	; (801609c <rcl_validate_enclave_name_with_size+0xb4>)
 801608c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016090:	a802      	add	r0, sp, #8
 8016092:	f001 fd31 	bl	8017af8 <rcutils_snprintf>
 8016096:	f04f 0c01 	mov.w	ip, #1
 801609a:	e7c1      	b.n	8016020 <rcl_validate_enclave_name_with_size+0x38>
 801609c:	0801eb24 	.word	0x0801eb24

080160a0 <rcl_validate_enclave_name>:
 80160a0:	b168      	cbz	r0, 80160be <rcl_validate_enclave_name+0x1e>
 80160a2:	b570      	push	{r4, r5, r6, lr}
 80160a4:	460d      	mov	r5, r1
 80160a6:	4616      	mov	r6, r2
 80160a8:	4604      	mov	r4, r0
 80160aa:	f7ea f929 	bl	8000300 <strlen>
 80160ae:	4633      	mov	r3, r6
 80160b0:	4601      	mov	r1, r0
 80160b2:	462a      	mov	r2, r5
 80160b4:	4620      	mov	r0, r4
 80160b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80160ba:	f7ff bf95 	b.w	8015fe8 <rcl_validate_enclave_name_with_size>
 80160be:	200b      	movs	r0, #11
 80160c0:	4770      	bx	lr
 80160c2:	bf00      	nop

080160c4 <rcl_get_zero_initialized_wait_set>:
 80160c4:	b510      	push	{r4, lr}
 80160c6:	4c08      	ldr	r4, [pc, #32]	; (80160e8 <rcl_get_zero_initialized_wait_set+0x24>)
 80160c8:	4686      	mov	lr, r0
 80160ca:	4684      	mov	ip, r0
 80160cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80160ce:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80160d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80160d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80160d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80160da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80160de:	6823      	ldr	r3, [r4, #0]
 80160e0:	4670      	mov	r0, lr
 80160e2:	f8cc 3000 	str.w	r3, [ip]
 80160e6:	bd10      	pop	{r4, pc}
 80160e8:	0801eb84 	.word	0x0801eb84

080160ec <rcl_wait_set_is_valid>:
 80160ec:	b118      	cbz	r0, 80160f6 <rcl_wait_set_is_valid+0xa>
 80160ee:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80160f0:	3800      	subs	r0, #0
 80160f2:	bf18      	it	ne
 80160f4:	2001      	movne	r0, #1
 80160f6:	4770      	bx	lr

080160f8 <rcl_wait_set_fini>:
 80160f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160fc:	b082      	sub	sp, #8
 80160fe:	2800      	cmp	r0, #0
 8016100:	f000 8095 	beq.w	801622e <rcl_wait_set_fini+0x136>
 8016104:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8016106:	4604      	mov	r4, r0
 8016108:	2e00      	cmp	r6, #0
 801610a:	f000 808c 	beq.w	8016226 <rcl_wait_set_fini+0x12e>
 801610e:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8016110:	f003 fae0 	bl	80196d4 <rmw_destroy_wait_set>
 8016114:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016116:	1e06      	subs	r6, r0, #0
 8016118:	bf18      	it	ne
 801611a:	f44f 7661 	movne.w	r6, #900	; 0x384
 801611e:	2d00      	cmp	r5, #0
 8016120:	f000 8081 	beq.w	8016226 <rcl_wait_set_fini+0x12e>
 8016124:	2700      	movs	r7, #0
 8016126:	6820      	ldr	r0, [r4, #0]
 8016128:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801612c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801612e:	6067      	str	r7, [r4, #4]
 8016130:	602f      	str	r7, [r5, #0]
 8016132:	b120      	cbz	r0, 801613e <rcl_wait_set_fini+0x46>
 8016134:	9101      	str	r1, [sp, #4]
 8016136:	47c0      	blx	r8
 8016138:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801613a:	9901      	ldr	r1, [sp, #4]
 801613c:	6027      	str	r7, [r4, #0]
 801613e:	68a8      	ldr	r0, [r5, #8]
 8016140:	b120      	cbz	r0, 801614c <rcl_wait_set_fini+0x54>
 8016142:	47c0      	blx	r8
 8016144:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016146:	2300      	movs	r3, #0
 8016148:	e9c5 3301 	strd	r3, r3, [r5, #4]
 801614c:	f04f 0800 	mov.w	r8, #0
 8016150:	68a0      	ldr	r0, [r4, #8]
 8016152:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8016154:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016156:	f8c4 800c 	str.w	r8, [r4, #12]
 801615a:	f8c5 800c 	str.w	r8, [r5, #12]
 801615e:	b128      	cbz	r0, 801616c <rcl_wait_set_fini+0x74>
 8016160:	47b8      	blx	r7
 8016162:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016164:	f8c4 8008 	str.w	r8, [r4, #8]
 8016168:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801616a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801616c:	f04f 0800 	mov.w	r8, #0
 8016170:	6968      	ldr	r0, [r5, #20]
 8016172:	f8c5 8010 	str.w	r8, [r5, #16]
 8016176:	b128      	cbz	r0, 8016184 <rcl_wait_set_fini+0x8c>
 8016178:	47b8      	blx	r7
 801617a:	f8c5 8014 	str.w	r8, [r5, #20]
 801617e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016180:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8016182:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016184:	f04f 0800 	mov.w	r8, #0
 8016188:	6920      	ldr	r0, [r4, #16]
 801618a:	f8c4 8014 	str.w	r8, [r4, #20]
 801618e:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8016192:	b128      	cbz	r0, 80161a0 <rcl_wait_set_fini+0xa8>
 8016194:	47b8      	blx	r7
 8016196:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016198:	f8c4 8010 	str.w	r8, [r4, #16]
 801619c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801619e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80161a0:	f04f 0800 	mov.w	r8, #0
 80161a4:	69a0      	ldr	r0, [r4, #24]
 80161a6:	f8c4 801c 	str.w	r8, [r4, #28]
 80161aa:	f8c5 8018 	str.w	r8, [r5, #24]
 80161ae:	b128      	cbz	r0, 80161bc <rcl_wait_set_fini+0xc4>
 80161b0:	9101      	str	r1, [sp, #4]
 80161b2:	47b8      	blx	r7
 80161b4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80161b6:	9901      	ldr	r1, [sp, #4]
 80161b8:	f8c4 8018 	str.w	r8, [r4, #24]
 80161bc:	6a28      	ldr	r0, [r5, #32]
 80161be:	b120      	cbz	r0, 80161ca <rcl_wait_set_fini+0xd2>
 80161c0:	47b8      	blx	r7
 80161c2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80161c4:	2300      	movs	r3, #0
 80161c6:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80161ca:	2700      	movs	r7, #0
 80161cc:	6a20      	ldr	r0, [r4, #32]
 80161ce:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80161d2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80161d4:	6267      	str	r7, [r4, #36]	; 0x24
 80161d6:	626f      	str	r7, [r5, #36]	; 0x24
 80161d8:	b120      	cbz	r0, 80161e4 <rcl_wait_set_fini+0xec>
 80161da:	9101      	str	r1, [sp, #4]
 80161dc:	47c0      	blx	r8
 80161de:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80161e0:	9901      	ldr	r1, [sp, #4]
 80161e2:	6227      	str	r7, [r4, #32]
 80161e4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80161e6:	b120      	cbz	r0, 80161f2 <rcl_wait_set_fini+0xfa>
 80161e8:	47c0      	blx	r8
 80161ea:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80161ec:	2300      	movs	r3, #0
 80161ee:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 80161f2:	2700      	movs	r7, #0
 80161f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80161f6:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80161fa:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80161fc:	62e7      	str	r7, [r4, #44]	; 0x2c
 80161fe:	632f      	str	r7, [r5, #48]	; 0x30
 8016200:	b120      	cbz	r0, 801620c <rcl_wait_set_fini+0x114>
 8016202:	9101      	str	r1, [sp, #4]
 8016204:	47c0      	blx	r8
 8016206:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016208:	9901      	ldr	r1, [sp, #4]
 801620a:	62a7      	str	r7, [r4, #40]	; 0x28
 801620c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801620e:	b120      	cbz	r0, 801621a <rcl_wait_set_fini+0x122>
 8016210:	47c0      	blx	r8
 8016212:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016214:	2300      	movs	r3, #0
 8016216:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 801621a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801621c:	4628      	mov	r0, r5
 801621e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016220:	4798      	blx	r3
 8016222:	2300      	movs	r3, #0
 8016224:	6323      	str	r3, [r4, #48]	; 0x30
 8016226:	4630      	mov	r0, r6
 8016228:	b002      	add	sp, #8
 801622a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801622e:	260b      	movs	r6, #11
 8016230:	4630      	mov	r0, r6
 8016232:	b002      	add	sp, #8
 8016234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016238 <rcl_wait_set_add_subscription>:
 8016238:	b318      	cbz	r0, 8016282 <rcl_wait_set_add_subscription+0x4a>
 801623a:	b538      	push	{r3, r4, r5, lr}
 801623c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801623e:	4604      	mov	r4, r0
 8016240:	b30b      	cbz	r3, 8016286 <rcl_wait_set_add_subscription+0x4e>
 8016242:	b319      	cbz	r1, 801628c <rcl_wait_set_add_subscription+0x54>
 8016244:	681d      	ldr	r5, [r3, #0]
 8016246:	6840      	ldr	r0, [r0, #4]
 8016248:	4285      	cmp	r5, r0
 801624a:	d217      	bcs.n	801627c <rcl_wait_set_add_subscription+0x44>
 801624c:	1c68      	adds	r0, r5, #1
 801624e:	6018      	str	r0, [r3, #0]
 8016250:	6823      	ldr	r3, [r4, #0]
 8016252:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8016256:	b102      	cbz	r2, 801625a <rcl_wait_set_add_subscription+0x22>
 8016258:	6015      	str	r5, [r2, #0]
 801625a:	4608      	mov	r0, r1
 801625c:	f7ff fad8 	bl	8015810 <rcl_subscription_get_rmw_handle>
 8016260:	b150      	cbz	r0, 8016278 <rcl_wait_set_add_subscription+0x40>
 8016262:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016264:	6842      	ldr	r2, [r0, #4]
 8016266:	2000      	movs	r0, #0
 8016268:	689b      	ldr	r3, [r3, #8]
 801626a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801626e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016270:	6853      	ldr	r3, [r2, #4]
 8016272:	3301      	adds	r3, #1
 8016274:	6053      	str	r3, [r2, #4]
 8016276:	bd38      	pop	{r3, r4, r5, pc}
 8016278:	2001      	movs	r0, #1
 801627a:	bd38      	pop	{r3, r4, r5, pc}
 801627c:	f240 3086 	movw	r0, #902	; 0x386
 8016280:	bd38      	pop	{r3, r4, r5, pc}
 8016282:	200b      	movs	r0, #11
 8016284:	4770      	bx	lr
 8016286:	f44f 7061 	mov.w	r0, #900	; 0x384
 801628a:	bd38      	pop	{r3, r4, r5, pc}
 801628c:	200b      	movs	r0, #11
 801628e:	bd38      	pop	{r3, r4, r5, pc}

08016290 <rcl_wait_set_clear>:
 8016290:	2800      	cmp	r0, #0
 8016292:	d074      	beq.n	801637e <rcl_wait_set_clear+0xee>
 8016294:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016296:	b510      	push	{r4, lr}
 8016298:	4604      	mov	r4, r0
 801629a:	2b00      	cmp	r3, #0
 801629c:	d071      	beq.n	8016382 <rcl_wait_set_clear+0xf2>
 801629e:	6800      	ldr	r0, [r0, #0]
 80162a0:	b138      	cbz	r0, 80162b2 <rcl_wait_set_clear+0x22>
 80162a2:	6862      	ldr	r2, [r4, #4]
 80162a4:	2100      	movs	r1, #0
 80162a6:	0092      	lsls	r2, r2, #2
 80162a8:	f006 fa04 	bl	801c6b4 <memset>
 80162ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80162ae:	2200      	movs	r2, #0
 80162b0:	601a      	str	r2, [r3, #0]
 80162b2:	68a0      	ldr	r0, [r4, #8]
 80162b4:	b138      	cbz	r0, 80162c6 <rcl_wait_set_clear+0x36>
 80162b6:	68e2      	ldr	r2, [r4, #12]
 80162b8:	2100      	movs	r1, #0
 80162ba:	0092      	lsls	r2, r2, #2
 80162bc:	f006 f9fa 	bl	801c6b4 <memset>
 80162c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80162c2:	2200      	movs	r2, #0
 80162c4:	60da      	str	r2, [r3, #12]
 80162c6:	69a0      	ldr	r0, [r4, #24]
 80162c8:	b138      	cbz	r0, 80162da <rcl_wait_set_clear+0x4a>
 80162ca:	69e2      	ldr	r2, [r4, #28]
 80162cc:	2100      	movs	r1, #0
 80162ce:	0092      	lsls	r2, r2, #2
 80162d0:	f006 f9f0 	bl	801c6b4 <memset>
 80162d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80162d6:	2200      	movs	r2, #0
 80162d8:	619a      	str	r2, [r3, #24]
 80162da:	6a20      	ldr	r0, [r4, #32]
 80162dc:	b138      	cbz	r0, 80162ee <rcl_wait_set_clear+0x5e>
 80162de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80162e0:	2100      	movs	r1, #0
 80162e2:	0092      	lsls	r2, r2, #2
 80162e4:	f006 f9e6 	bl	801c6b4 <memset>
 80162e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80162ea:	2200      	movs	r2, #0
 80162ec:	625a      	str	r2, [r3, #36]	; 0x24
 80162ee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80162f0:	b138      	cbz	r0, 8016302 <rcl_wait_set_clear+0x72>
 80162f2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80162f4:	2100      	movs	r1, #0
 80162f6:	0092      	lsls	r2, r2, #2
 80162f8:	f006 f9dc 	bl	801c6b4 <memset>
 80162fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80162fe:	2200      	movs	r2, #0
 8016300:	631a      	str	r2, [r3, #48]	; 0x30
 8016302:	6920      	ldr	r0, [r4, #16]
 8016304:	b138      	cbz	r0, 8016316 <rcl_wait_set_clear+0x86>
 8016306:	6962      	ldr	r2, [r4, #20]
 8016308:	2100      	movs	r1, #0
 801630a:	0092      	lsls	r2, r2, #2
 801630c:	f006 f9d2 	bl	801c6b4 <memset>
 8016310:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016312:	2200      	movs	r2, #0
 8016314:	641a      	str	r2, [r3, #64]	; 0x40
 8016316:	6898      	ldr	r0, [r3, #8]
 8016318:	b138      	cbz	r0, 801632a <rcl_wait_set_clear+0x9a>
 801631a:	685a      	ldr	r2, [r3, #4]
 801631c:	2100      	movs	r1, #0
 801631e:	0092      	lsls	r2, r2, #2
 8016320:	f006 f9c8 	bl	801c6b4 <memset>
 8016324:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016326:	2200      	movs	r2, #0
 8016328:	605a      	str	r2, [r3, #4]
 801632a:	6958      	ldr	r0, [r3, #20]
 801632c:	b138      	cbz	r0, 801633e <rcl_wait_set_clear+0xae>
 801632e:	691a      	ldr	r2, [r3, #16]
 8016330:	2100      	movs	r1, #0
 8016332:	0092      	lsls	r2, r2, #2
 8016334:	f006 f9be 	bl	801c6b4 <memset>
 8016338:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801633a:	2200      	movs	r2, #0
 801633c:	611a      	str	r2, [r3, #16]
 801633e:	6a18      	ldr	r0, [r3, #32]
 8016340:	b138      	cbz	r0, 8016352 <rcl_wait_set_clear+0xc2>
 8016342:	69da      	ldr	r2, [r3, #28]
 8016344:	2100      	movs	r1, #0
 8016346:	0092      	lsls	r2, r2, #2
 8016348:	f006 f9b4 	bl	801c6b4 <memset>
 801634c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801634e:	2200      	movs	r2, #0
 8016350:	61da      	str	r2, [r3, #28]
 8016352:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8016354:	b138      	cbz	r0, 8016366 <rcl_wait_set_clear+0xd6>
 8016356:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016358:	2100      	movs	r1, #0
 801635a:	0092      	lsls	r2, r2, #2
 801635c:	f006 f9aa 	bl	801c6b4 <memset>
 8016360:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016362:	2200      	movs	r2, #0
 8016364:	629a      	str	r2, [r3, #40]	; 0x28
 8016366:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8016368:	b140      	cbz	r0, 801637c <rcl_wait_set_clear+0xec>
 801636a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801636c:	2100      	movs	r1, #0
 801636e:	0092      	lsls	r2, r2, #2
 8016370:	f006 f9a0 	bl	801c6b4 <memset>
 8016374:	2300      	movs	r3, #0
 8016376:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016378:	4618      	mov	r0, r3
 801637a:	6353      	str	r3, [r2, #52]	; 0x34
 801637c:	bd10      	pop	{r4, pc}
 801637e:	200b      	movs	r0, #11
 8016380:	4770      	bx	lr
 8016382:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016386:	bd10      	pop	{r4, pc}

08016388 <rcl_wait_set_resize>:
 8016388:	2800      	cmp	r0, #0
 801638a:	f000 8180 	beq.w	801668e <rcl_wait_set_resize+0x306>
 801638e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016392:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8016394:	b083      	sub	sp, #12
 8016396:	4605      	mov	r5, r0
 8016398:	2c00      	cmp	r4, #0
 801639a:	f000 817a 	beq.w	8016692 <rcl_wait_set_resize+0x30a>
 801639e:	f04f 0900 	mov.w	r9, #0
 80163a2:	461f      	mov	r7, r3
 80163a4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80163a8:	4688      	mov	r8, r1
 80163aa:	4616      	mov	r6, r2
 80163ac:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 80163b0:	f8c0 9004 	str.w	r9, [r0, #4]
 80163b4:	f8c4 9000 	str.w	r9, [r4]
 80163b8:	2900      	cmp	r1, #0
 80163ba:	f000 80bf 	beq.w	801653c <rcl_wait_set_resize+0x1b4>
 80163be:	008c      	lsls	r4, r1, #2
 80163c0:	4652      	mov	r2, sl
 80163c2:	6800      	ldr	r0, [r0, #0]
 80163c4:	4621      	mov	r1, r4
 80163c6:	9301      	str	r3, [sp, #4]
 80163c8:	4798      	blx	r3
 80163ca:	9b01      	ldr	r3, [sp, #4]
 80163cc:	6028      	str	r0, [r5, #0]
 80163ce:	2800      	cmp	r0, #0
 80163d0:	f000 80f6 	beq.w	80165c0 <rcl_wait_set_resize+0x238>
 80163d4:	4622      	mov	r2, r4
 80163d6:	4649      	mov	r1, r9
 80163d8:	9301      	str	r3, [sp, #4]
 80163da:	f006 f96b 	bl	801c6b4 <memset>
 80163de:	f8c5 8004 	str.w	r8, [r5, #4]
 80163e2:	4652      	mov	r2, sl
 80163e4:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 80163e8:	4621      	mov	r1, r4
 80163ea:	9b01      	ldr	r3, [sp, #4]
 80163ec:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80163f0:	f8c8 9004 	str.w	r9, [r8, #4]
 80163f4:	4798      	blx	r3
 80163f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80163f8:	f8c8 0008 	str.w	r0, [r8, #8]
 80163fc:	689b      	ldr	r3, [r3, #8]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	f000 814a 	beq.w	8016698 <rcl_wait_set_resize+0x310>
 8016404:	4622      	mov	r2, r4
 8016406:	4649      	mov	r1, r9
 8016408:	4618      	mov	r0, r3
 801640a:	f006 f953 	bl	801c6b4 <memset>
 801640e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8016410:	f04f 0800 	mov.w	r8, #0
 8016414:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8016418:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 801641c:	f8c5 800c 	str.w	r8, [r5, #12]
 8016420:	f8c4 800c 	str.w	r8, [r4, #12]
 8016424:	2e00      	cmp	r6, #0
 8016426:	f040 809b 	bne.w	8016560 <rcl_wait_set_resize+0x1d8>
 801642a:	68a8      	ldr	r0, [r5, #8]
 801642c:	b128      	cbz	r0, 801643a <rcl_wait_set_resize+0xb2>
 801642e:	4649      	mov	r1, r9
 8016430:	4790      	blx	r2
 8016432:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8016434:	60ae      	str	r6, [r5, #8]
 8016436:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801643a:	f04f 0800 	mov.w	r8, #0
 801643e:	19f6      	adds	r6, r6, r7
 8016440:	f8c4 8010 	str.w	r8, [r4, #16]
 8016444:	f040 80a2 	bne.w	801658c <rcl_wait_set_resize+0x204>
 8016448:	6960      	ldr	r0, [r4, #20]
 801644a:	b130      	cbz	r0, 801645a <rcl_wait_set_resize+0xd2>
 801644c:	4649      	mov	r1, r9
 801644e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8016450:	4798      	blx	r3
 8016452:	6166      	str	r6, [r4, #20]
 8016454:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8016456:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801645a:	2600      	movs	r6, #0
 801645c:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8016460:	616e      	str	r6, [r5, #20]
 8016462:	6426      	str	r6, [r4, #64]	; 0x40
 8016464:	2f00      	cmp	r7, #0
 8016466:	f040 80af 	bne.w	80165c8 <rcl_wait_set_resize+0x240>
 801646a:	6928      	ldr	r0, [r5, #16]
 801646c:	b138      	cbz	r0, 801647e <rcl_wait_set_resize+0xf6>
 801646e:	4649      	mov	r1, r9
 8016470:	47d0      	blx	sl
 8016472:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8016474:	612f      	str	r7, [r5, #16]
 8016476:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801647a:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801647e:	2600      	movs	r6, #0
 8016480:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016482:	61ee      	str	r6, [r5, #28]
 8016484:	61a6      	str	r6, [r4, #24]
 8016486:	2b00      	cmp	r3, #0
 8016488:	f040 8093 	bne.w	80165b2 <rcl_wait_set_resize+0x22a>
 801648c:	69a8      	ldr	r0, [r5, #24]
 801648e:	b120      	cbz	r0, 801649a <rcl_wait_set_resize+0x112>
 8016490:	4649      	mov	r1, r9
 8016492:	47d0      	blx	sl
 8016494:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016496:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8016498:	61ab      	str	r3, [r5, #24]
 801649a:	6a20      	ldr	r0, [r4, #32]
 801649c:	b128      	cbz	r0, 80164aa <rcl_wait_set_resize+0x122>
 801649e:	4649      	mov	r1, r9
 80164a0:	47d0      	blx	sl
 80164a2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80164a4:	2300      	movs	r3, #0
 80164a6:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80164aa:	2600      	movs	r6, #0
 80164ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80164ae:	6da7      	ldr	r7, [r4, #88]	; 0x58
 80164b0:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 80164b4:	626e      	str	r6, [r5, #36]	; 0x24
 80164b6:	6266      	str	r6, [r4, #36]	; 0x24
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	f000 8098 	beq.w	80165ee <rcl_wait_set_resize+0x266>
 80164be:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80164c2:	463a      	mov	r2, r7
 80164c4:	6a28      	ldr	r0, [r5, #32]
 80164c6:	4651      	mov	r1, sl
 80164c8:	47c8      	blx	r9
 80164ca:	6228      	str	r0, [r5, #32]
 80164cc:	2800      	cmp	r0, #0
 80164ce:	d077      	beq.n	80165c0 <rcl_wait_set_resize+0x238>
 80164d0:	4652      	mov	r2, sl
 80164d2:	4631      	mov	r1, r6
 80164d4:	f006 f8ee 	bl	801c6b4 <memset>
 80164d8:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80164da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80164dc:	463a      	mov	r2, r7
 80164de:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80164e0:	4651      	mov	r1, sl
 80164e2:	626b      	str	r3, [r5, #36]	; 0x24
 80164e4:	62a6      	str	r6, [r4, #40]	; 0x28
 80164e6:	47c8      	blx	r9
 80164e8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80164ea:	62e0      	str	r0, [r4, #44]	; 0x2c
 80164ec:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80164ee:	2c00      	cmp	r4, #0
 80164f0:	f000 80f2 	beq.w	80166d8 <rcl_wait_set_resize+0x350>
 80164f4:	4620      	mov	r0, r4
 80164f6:	4652      	mov	r2, sl
 80164f8:	4631      	mov	r1, r6
 80164fa:	f006 f8db 	bl	801c6b4 <memset>
 80164fe:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8016500:	2600      	movs	r6, #0
 8016502:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016504:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8016506:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801650a:	62ee      	str	r6, [r5, #44]	; 0x2c
 801650c:	6326      	str	r6, [r4, #48]	; 0x30
 801650e:	2b00      	cmp	r3, #0
 8016510:	f040 8097 	bne.w	8016642 <rcl_wait_set_resize+0x2ba>
 8016514:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8016516:	b120      	cbz	r0, 8016522 <rcl_wait_set_resize+0x19a>
 8016518:	4639      	mov	r1, r7
 801651a:	47c0      	blx	r8
 801651c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801651e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8016520:	62ab      	str	r3, [r5, #40]	; 0x28
 8016522:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8016524:	2800      	cmp	r0, #0
 8016526:	d04c      	beq.n	80165c2 <rcl_wait_set_resize+0x23a>
 8016528:	4639      	mov	r1, r7
 801652a:	47c0      	blx	r8
 801652c:	2300      	movs	r3, #0
 801652e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8016530:	4618      	mov	r0, r3
 8016532:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 8016536:	b003      	add	sp, #12
 8016538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801653c:	6800      	ldr	r0, [r0, #0]
 801653e:	b120      	cbz	r0, 801654a <rcl_wait_set_resize+0x1c2>
 8016540:	4651      	mov	r1, sl
 8016542:	47d8      	blx	fp
 8016544:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8016546:	f8c5 8000 	str.w	r8, [r5]
 801654a:	68a0      	ldr	r0, [r4, #8]
 801654c:	2800      	cmp	r0, #0
 801654e:	f43f af5f 	beq.w	8016410 <rcl_wait_set_resize+0x88>
 8016552:	4651      	mov	r1, sl
 8016554:	47d8      	blx	fp
 8016556:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8016558:	2300      	movs	r3, #0
 801655a:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801655e:	e757      	b.n	8016410 <rcl_wait_set_resize+0x88>
 8016560:	00b4      	lsls	r4, r6, #2
 8016562:	464a      	mov	r2, r9
 8016564:	68a8      	ldr	r0, [r5, #8]
 8016566:	4621      	mov	r1, r4
 8016568:	4798      	blx	r3
 801656a:	60a8      	str	r0, [r5, #8]
 801656c:	b340      	cbz	r0, 80165c0 <rcl_wait_set_resize+0x238>
 801656e:	4622      	mov	r2, r4
 8016570:	4641      	mov	r1, r8
 8016572:	f006 f89f 	bl	801c6b4 <memset>
 8016576:	f04f 0800 	mov.w	r8, #0
 801657a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801657c:	60ee      	str	r6, [r5, #12]
 801657e:	19f6      	adds	r6, r6, r7
 8016580:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8016584:	f8c4 8010 	str.w	r8, [r4, #16]
 8016588:	f43f af5e 	beq.w	8016448 <rcl_wait_set_resize+0xc0>
 801658c:	00b6      	lsls	r6, r6, #2
 801658e:	464a      	mov	r2, r9
 8016590:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8016592:	6960      	ldr	r0, [r4, #20]
 8016594:	4631      	mov	r1, r6
 8016596:	4798      	blx	r3
 8016598:	4681      	mov	r9, r0
 801659a:	6160      	str	r0, [r4, #20]
 801659c:	2800      	cmp	r0, #0
 801659e:	f000 8084 	beq.w	80166aa <rcl_wait_set_resize+0x322>
 80165a2:	4632      	mov	r2, r6
 80165a4:	4641      	mov	r1, r8
 80165a6:	f006 f885 	bl	801c6b4 <memset>
 80165aa:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80165ac:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80165b0:	e753      	b.n	801645a <rcl_wait_set_resize+0xd2>
 80165b2:	009c      	lsls	r4, r3, #2
 80165b4:	464a      	mov	r2, r9
 80165b6:	69a8      	ldr	r0, [r5, #24]
 80165b8:	4621      	mov	r1, r4
 80165ba:	47c0      	blx	r8
 80165bc:	61a8      	str	r0, [r5, #24]
 80165be:	bb40      	cbnz	r0, 8016612 <rcl_wait_set_resize+0x28a>
 80165c0:	200a      	movs	r0, #10
 80165c2:	b003      	add	sp, #12
 80165c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165c8:	00bc      	lsls	r4, r7, #2
 80165ca:	464a      	mov	r2, r9
 80165cc:	6928      	ldr	r0, [r5, #16]
 80165ce:	4621      	mov	r1, r4
 80165d0:	47c0      	blx	r8
 80165d2:	6128      	str	r0, [r5, #16]
 80165d4:	2800      	cmp	r0, #0
 80165d6:	d0f3      	beq.n	80165c0 <rcl_wait_set_resize+0x238>
 80165d8:	4622      	mov	r2, r4
 80165da:	4631      	mov	r1, r6
 80165dc:	f006 f86a 	bl	801c6b4 <memset>
 80165e0:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80165e2:	616f      	str	r7, [r5, #20]
 80165e4:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80165e8:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 80165ec:	e747      	b.n	801647e <rcl_wait_set_resize+0xf6>
 80165ee:	6a28      	ldr	r0, [r5, #32]
 80165f0:	b120      	cbz	r0, 80165fc <rcl_wait_set_resize+0x274>
 80165f2:	4639      	mov	r1, r7
 80165f4:	47c0      	blx	r8
 80165f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80165f8:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80165fa:	622b      	str	r3, [r5, #32]
 80165fc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80165fe:	2800      	cmp	r0, #0
 8016600:	f43f af7e 	beq.w	8016500 <rcl_wait_set_resize+0x178>
 8016604:	4639      	mov	r1, r7
 8016606:	47c0      	blx	r8
 8016608:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801660a:	2300      	movs	r3, #0
 801660c:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8016610:	e776      	b.n	8016500 <rcl_wait_set_resize+0x178>
 8016612:	4622      	mov	r2, r4
 8016614:	4631      	mov	r1, r6
 8016616:	f006 f84d 	bl	801c6b4 <memset>
 801661a:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 801661c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801661e:	464a      	mov	r2, r9
 8016620:	6a38      	ldr	r0, [r7, #32]
 8016622:	4621      	mov	r1, r4
 8016624:	61eb      	str	r3, [r5, #28]
 8016626:	61fe      	str	r6, [r7, #28]
 8016628:	47c0      	blx	r8
 801662a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801662c:	6238      	str	r0, [r7, #32]
 801662e:	6a1f      	ldr	r7, [r3, #32]
 8016630:	2f00      	cmp	r7, #0
 8016632:	d04a      	beq.n	80166ca <rcl_wait_set_resize+0x342>
 8016634:	4622      	mov	r2, r4
 8016636:	4631      	mov	r1, r6
 8016638:	4638      	mov	r0, r7
 801663a:	f006 f83b 	bl	801c6b4 <memset>
 801663e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8016640:	e733      	b.n	80164aa <rcl_wait_set_resize+0x122>
 8016642:	009c      	lsls	r4, r3, #2
 8016644:	463a      	mov	r2, r7
 8016646:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8016648:	4621      	mov	r1, r4
 801664a:	47c8      	blx	r9
 801664c:	62a8      	str	r0, [r5, #40]	; 0x28
 801664e:	2800      	cmp	r0, #0
 8016650:	d0b6      	beq.n	80165c0 <rcl_wait_set_resize+0x238>
 8016652:	4622      	mov	r2, r4
 8016654:	4631      	mov	r1, r6
 8016656:	f006 f82d 	bl	801c6b4 <memset>
 801665a:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 801665e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016660:	463a      	mov	r2, r7
 8016662:	4621      	mov	r1, r4
 8016664:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8016668:	62eb      	str	r3, [r5, #44]	; 0x2c
 801666a:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 801666e:	47c8      	blx	r9
 8016670:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016672:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8016676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016678:	2b00      	cmp	r3, #0
 801667a:	d034      	beq.n	80166e6 <rcl_wait_set_resize+0x35e>
 801667c:	4622      	mov	r2, r4
 801667e:	4631      	mov	r1, r6
 8016680:	4618      	mov	r0, r3
 8016682:	f006 f817 	bl	801c6b4 <memset>
 8016686:	4630      	mov	r0, r6
 8016688:	b003      	add	sp, #12
 801668a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801668e:	200b      	movs	r0, #11
 8016690:	4770      	bx	lr
 8016692:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016696:	e794      	b.n	80165c2 <rcl_wait_set_resize+0x23a>
 8016698:	6828      	ldr	r0, [r5, #0]
 801669a:	4651      	mov	r1, sl
 801669c:	9301      	str	r3, [sp, #4]
 801669e:	47d8      	blx	fp
 80166a0:	9b01      	ldr	r3, [sp, #4]
 80166a2:	200a      	movs	r0, #10
 80166a4:	e9c5 3300 	strd	r3, r3, [r5]
 80166a8:	e78b      	b.n	80165c2 <rcl_wait_set_resize+0x23a>
 80166aa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80166ac:	68a8      	ldr	r0, [r5, #8]
 80166ae:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80166b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80166b2:	4798      	blx	r3
 80166b4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80166b6:	6928      	ldr	r0, [r5, #16]
 80166b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80166ba:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80166bc:	e9c5 9902 	strd	r9, r9, [r5, #8]
 80166c0:	4790      	blx	r2
 80166c2:	200a      	movs	r0, #10
 80166c4:	e9c5 9904 	strd	r9, r9, [r5, #16]
 80166c8:	e77b      	b.n	80165c2 <rcl_wait_set_resize+0x23a>
 80166ca:	69a8      	ldr	r0, [r5, #24]
 80166cc:	4649      	mov	r1, r9
 80166ce:	47d0      	blx	sl
 80166d0:	200a      	movs	r0, #10
 80166d2:	e9c5 7706 	strd	r7, r7, [r5, #24]
 80166d6:	e774      	b.n	80165c2 <rcl_wait_set_resize+0x23a>
 80166d8:	6a28      	ldr	r0, [r5, #32]
 80166da:	4639      	mov	r1, r7
 80166dc:	47c0      	blx	r8
 80166de:	200a      	movs	r0, #10
 80166e0:	e9c5 4408 	strd	r4, r4, [r5, #32]
 80166e4:	e76d      	b.n	80165c2 <rcl_wait_set_resize+0x23a>
 80166e6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80166e8:	4639      	mov	r1, r7
 80166ea:	9301      	str	r3, [sp, #4]
 80166ec:	47c0      	blx	r8
 80166ee:	9b01      	ldr	r3, [sp, #4]
 80166f0:	200a      	movs	r0, #10
 80166f2:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 80166f6:	e764      	b.n	80165c2 <rcl_wait_set_resize+0x23a>

080166f8 <rcl_wait_set_init>:
 80166f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166fc:	b085      	sub	sp, #20
 80166fe:	4605      	mov	r5, r0
 8016700:	460e      	mov	r6, r1
 8016702:	4617      	mov	r7, r2
 8016704:	a812      	add	r0, sp, #72	; 0x48
 8016706:	4698      	mov	r8, r3
 8016708:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 801670c:	f7f7 fa5c 	bl	800dbc8 <rcutils_allocator_is_valid>
 8016710:	2d00      	cmp	r5, #0
 8016712:	d072      	beq.n	80167fa <rcl_wait_set_init+0x102>
 8016714:	f080 0001 	eor.w	r0, r0, #1
 8016718:	b2c0      	uxtb	r0, r0
 801671a:	2800      	cmp	r0, #0
 801671c:	d16d      	bne.n	80167fa <rcl_wait_set_init+0x102>
 801671e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8016722:	f1ba 0f00 	cmp.w	sl, #0
 8016726:	d004      	beq.n	8016732 <rcl_wait_set_init+0x3a>
 8016728:	2464      	movs	r4, #100	; 0x64
 801672a:	4620      	mov	r0, r4
 801672c:	b005      	add	sp, #20
 801672e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016732:	f1b9 0f00 	cmp.w	r9, #0
 8016736:	d060      	beq.n	80167fa <rcl_wait_set_init+0x102>
 8016738:	4648      	mov	r0, r9
 801673a:	f7fd fee5 	bl	8014508 <rcl_context_is_valid>
 801673e:	2800      	cmp	r0, #0
 8016740:	d068      	beq.n	8016814 <rcl_wait_set_init+0x11c>
 8016742:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016744:	205c      	movs	r0, #92	; 0x5c
 8016746:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016748:	4798      	blx	r3
 801674a:	6328      	str	r0, [r5, #48]	; 0x30
 801674c:	2800      	cmp	r0, #0
 801674e:	d063      	beq.n	8016818 <rcl_wait_set_init+0x120>
 8016750:	225c      	movs	r2, #92	; 0x5c
 8016752:	4651      	mov	r1, sl
 8016754:	f005 ffae 	bl	801c6b4 <memset>
 8016758:	ac12      	add	r4, sp, #72	; 0x48
 801675a:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 801675e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8016762:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 8016766:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 801676a:	eb03 0e02 	add.w	lr, r3, r2
 801676e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016770:	f8d9 9000 	ldr.w	r9, [r9]
 8016774:	449e      	add	lr, r3
 8016776:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016778:	e9cb aa01 	strd	sl, sl, [fp, #4]
 801677c:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8016780:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8016784:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 8016788:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 801678c:	44be      	add	lr, r7
 801678e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016792:	6823      	ldr	r3, [r4, #0]
 8016794:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 8016798:	f109 0028 	add.w	r0, r9, #40	; 0x28
 801679c:	f8cc 3000 	str.w	r3, [ip]
 80167a0:	f002 ff8e 	bl	80196c0 <rmw_create_wait_set>
 80167a4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80167a6:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 80167aa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80167ac:	b350      	cbz	r0, 8016804 <rcl_wait_set_init+0x10c>
 80167ae:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80167b0:	4643      	mov	r3, r8
 80167b2:	463a      	mov	r2, r7
 80167b4:	4631      	mov	r1, r6
 80167b6:	9402      	str	r4, [sp, #8]
 80167b8:	4628      	mov	r0, r5
 80167ba:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80167bc:	9401      	str	r4, [sp, #4]
 80167be:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80167c0:	9400      	str	r4, [sp, #0]
 80167c2:	f7ff fde1 	bl	8016388 <rcl_wait_set_resize>
 80167c6:	4604      	mov	r4, r0
 80167c8:	2800      	cmp	r0, #0
 80167ca:	d0ae      	beq.n	801672a <rcl_wait_set_init+0x32>
 80167cc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80167ce:	bb2b      	cbnz	r3, 801681c <rcl_wait_set_init+0x124>
 80167d0:	2600      	movs	r6, #0
 80167d2:	4628      	mov	r0, r5
 80167d4:	4633      	mov	r3, r6
 80167d6:	4632      	mov	r2, r6
 80167d8:	4631      	mov	r1, r6
 80167da:	9600      	str	r6, [sp, #0]
 80167dc:	e9cd 6601 	strd	r6, r6, [sp, #4]
 80167e0:	f7ff fdd2 	bl	8016388 <rcl_wait_set_resize>
 80167e4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80167e6:	2800      	cmp	r0, #0
 80167e8:	d09f      	beq.n	801672a <rcl_wait_set_init+0x32>
 80167ea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80167ec:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80167ee:	4798      	blx	r3
 80167f0:	4620      	mov	r0, r4
 80167f2:	632e      	str	r6, [r5, #48]	; 0x30
 80167f4:	b005      	add	sp, #20
 80167f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167fa:	240b      	movs	r4, #11
 80167fc:	4620      	mov	r0, r4
 80167fe:	b005      	add	sp, #20
 8016800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016804:	2401      	movs	r4, #1
 8016806:	f002 ff65 	bl	80196d4 <rmw_destroy_wait_set>
 801680a:	2800      	cmp	r0, #0
 801680c:	bf18      	it	ne
 801680e:	f44f 7461 	movne.w	r4, #900	; 0x384
 8016812:	e7dd      	b.n	80167d0 <rcl_wait_set_init+0xd8>
 8016814:	2465      	movs	r4, #101	; 0x65
 8016816:	e788      	b.n	801672a <rcl_wait_set_init+0x32>
 8016818:	240a      	movs	r4, #10
 801681a:	e786      	b.n	801672a <rcl_wait_set_init+0x32>
 801681c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801681e:	e7f2      	b.n	8016806 <rcl_wait_set_init+0x10e>

08016820 <rcl_wait_set_add_guard_condition>:
 8016820:	b318      	cbz	r0, 801686a <rcl_wait_set_add_guard_condition+0x4a>
 8016822:	b538      	push	{r3, r4, r5, lr}
 8016824:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016826:	4604      	mov	r4, r0
 8016828:	b30b      	cbz	r3, 801686e <rcl_wait_set_add_guard_condition+0x4e>
 801682a:	b319      	cbz	r1, 8016874 <rcl_wait_set_add_guard_condition+0x54>
 801682c:	68dd      	ldr	r5, [r3, #12]
 801682e:	68c0      	ldr	r0, [r0, #12]
 8016830:	4285      	cmp	r5, r0
 8016832:	d217      	bcs.n	8016864 <rcl_wait_set_add_guard_condition+0x44>
 8016834:	1c68      	adds	r0, r5, #1
 8016836:	60d8      	str	r0, [r3, #12]
 8016838:	68a3      	ldr	r3, [r4, #8]
 801683a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801683e:	b102      	cbz	r2, 8016842 <rcl_wait_set_add_guard_condition+0x22>
 8016840:	6015      	str	r5, [r2, #0]
 8016842:	4608      	mov	r0, r1
 8016844:	f004 ff96 	bl	801b774 <rcl_guard_condition_get_rmw_handle>
 8016848:	b150      	cbz	r0, 8016860 <rcl_wait_set_add_guard_condition+0x40>
 801684a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801684c:	6842      	ldr	r2, [r0, #4]
 801684e:	2000      	movs	r0, #0
 8016850:	695b      	ldr	r3, [r3, #20]
 8016852:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016856:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016858:	6913      	ldr	r3, [r2, #16]
 801685a:	3301      	adds	r3, #1
 801685c:	6113      	str	r3, [r2, #16]
 801685e:	bd38      	pop	{r3, r4, r5, pc}
 8016860:	2001      	movs	r0, #1
 8016862:	bd38      	pop	{r3, r4, r5, pc}
 8016864:	f240 3086 	movw	r0, #902	; 0x386
 8016868:	bd38      	pop	{r3, r4, r5, pc}
 801686a:	200b      	movs	r0, #11
 801686c:	4770      	bx	lr
 801686e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016872:	bd38      	pop	{r3, r4, r5, pc}
 8016874:	200b      	movs	r0, #11
 8016876:	bd38      	pop	{r3, r4, r5, pc}

08016878 <rcl_wait_set_add_timer>:
 8016878:	b328      	cbz	r0, 80168c6 <rcl_wait_set_add_timer+0x4e>
 801687a:	b538      	push	{r3, r4, r5, lr}
 801687c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801687e:	4604      	mov	r4, r0
 8016880:	b31b      	cbz	r3, 80168ca <rcl_wait_set_add_timer+0x52>
 8016882:	b329      	cbz	r1, 80168d0 <rcl_wait_set_add_timer+0x58>
 8016884:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8016886:	6965      	ldr	r5, [r4, #20]
 8016888:	42a8      	cmp	r0, r5
 801688a:	d219      	bcs.n	80168c0 <rcl_wait_set_add_timer+0x48>
 801688c:	1c45      	adds	r5, r0, #1
 801688e:	641d      	str	r5, [r3, #64]	; 0x40
 8016890:	6923      	ldr	r3, [r4, #16]
 8016892:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8016896:	b102      	cbz	r2, 801689a <rcl_wait_set_add_timer+0x22>
 8016898:	6010      	str	r0, [r2, #0]
 801689a:	4608      	mov	r0, r1
 801689c:	f7ff fb9a 	bl	8015fd4 <rcl_timer_get_guard_condition>
 80168a0:	b168      	cbz	r0, 80168be <rcl_wait_set_add_timer+0x46>
 80168a2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80168a4:	68e3      	ldr	r3, [r4, #12]
 80168a6:	6c15      	ldr	r5, [r2, #64]	; 0x40
 80168a8:	3b01      	subs	r3, #1
 80168aa:	441d      	add	r5, r3
 80168ac:	f004 ff62 	bl	801b774 <rcl_guard_condition_get_rmw_handle>
 80168b0:	b180      	cbz	r0, 80168d4 <rcl_wait_set_add_timer+0x5c>
 80168b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80168b4:	6842      	ldr	r2, [r0, #4]
 80168b6:	2000      	movs	r0, #0
 80168b8:	695b      	ldr	r3, [r3, #20]
 80168ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80168be:	bd38      	pop	{r3, r4, r5, pc}
 80168c0:	f240 3086 	movw	r0, #902	; 0x386
 80168c4:	bd38      	pop	{r3, r4, r5, pc}
 80168c6:	200b      	movs	r0, #11
 80168c8:	4770      	bx	lr
 80168ca:	f44f 7061 	mov.w	r0, #900	; 0x384
 80168ce:	bd38      	pop	{r3, r4, r5, pc}
 80168d0:	200b      	movs	r0, #11
 80168d2:	bd38      	pop	{r3, r4, r5, pc}
 80168d4:	2001      	movs	r0, #1
 80168d6:	bd38      	pop	{r3, r4, r5, pc}

080168d8 <rcl_wait_set_add_client>:
 80168d8:	b318      	cbz	r0, 8016922 <rcl_wait_set_add_client+0x4a>
 80168da:	b538      	push	{r3, r4, r5, lr}
 80168dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80168de:	4604      	mov	r4, r0
 80168e0:	b30b      	cbz	r3, 8016926 <rcl_wait_set_add_client+0x4e>
 80168e2:	b319      	cbz	r1, 801692c <rcl_wait_set_add_client+0x54>
 80168e4:	699d      	ldr	r5, [r3, #24]
 80168e6:	69c0      	ldr	r0, [r0, #28]
 80168e8:	4285      	cmp	r5, r0
 80168ea:	d217      	bcs.n	801691c <rcl_wait_set_add_client+0x44>
 80168ec:	1c68      	adds	r0, r5, #1
 80168ee:	6198      	str	r0, [r3, #24]
 80168f0:	69a3      	ldr	r3, [r4, #24]
 80168f2:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80168f6:	b102      	cbz	r2, 80168fa <rcl_wait_set_add_client+0x22>
 80168f8:	6015      	str	r5, [r2, #0]
 80168fa:	4608      	mov	r0, r1
 80168fc:	f7fd fd1a 	bl	8014334 <rcl_client_get_rmw_handle>
 8016900:	b150      	cbz	r0, 8016918 <rcl_wait_set_add_client+0x40>
 8016902:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016904:	6842      	ldr	r2, [r0, #4]
 8016906:	2000      	movs	r0, #0
 8016908:	6a1b      	ldr	r3, [r3, #32]
 801690a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801690e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016910:	69d3      	ldr	r3, [r2, #28]
 8016912:	3301      	adds	r3, #1
 8016914:	61d3      	str	r3, [r2, #28]
 8016916:	bd38      	pop	{r3, r4, r5, pc}
 8016918:	2001      	movs	r0, #1
 801691a:	bd38      	pop	{r3, r4, r5, pc}
 801691c:	f240 3086 	movw	r0, #902	; 0x386
 8016920:	bd38      	pop	{r3, r4, r5, pc}
 8016922:	200b      	movs	r0, #11
 8016924:	4770      	bx	lr
 8016926:	f44f 7061 	mov.w	r0, #900	; 0x384
 801692a:	bd38      	pop	{r3, r4, r5, pc}
 801692c:	200b      	movs	r0, #11
 801692e:	bd38      	pop	{r3, r4, r5, pc}

08016930 <rcl_wait_set_add_service>:
 8016930:	b318      	cbz	r0, 801697a <rcl_wait_set_add_service+0x4a>
 8016932:	b538      	push	{r3, r4, r5, lr}
 8016934:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016936:	4604      	mov	r4, r0
 8016938:	b30b      	cbz	r3, 801697e <rcl_wait_set_add_service+0x4e>
 801693a:	b319      	cbz	r1, 8016984 <rcl_wait_set_add_service+0x54>
 801693c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801693e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8016940:	4285      	cmp	r5, r0
 8016942:	d217      	bcs.n	8016974 <rcl_wait_set_add_service+0x44>
 8016944:	1c68      	adds	r0, r5, #1
 8016946:	6258      	str	r0, [r3, #36]	; 0x24
 8016948:	6a23      	ldr	r3, [r4, #32]
 801694a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801694e:	b102      	cbz	r2, 8016952 <rcl_wait_set_add_service+0x22>
 8016950:	6015      	str	r5, [r2, #0]
 8016952:	4608      	mov	r0, r1
 8016954:	f7fe fcf2 	bl	801533c <rcl_service_get_rmw_handle>
 8016958:	b150      	cbz	r0, 8016970 <rcl_wait_set_add_service+0x40>
 801695a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801695c:	6842      	ldr	r2, [r0, #4]
 801695e:	2000      	movs	r0, #0
 8016960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016962:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016966:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016968:	6a93      	ldr	r3, [r2, #40]	; 0x28
 801696a:	3301      	adds	r3, #1
 801696c:	6293      	str	r3, [r2, #40]	; 0x28
 801696e:	bd38      	pop	{r3, r4, r5, pc}
 8016970:	2001      	movs	r0, #1
 8016972:	bd38      	pop	{r3, r4, r5, pc}
 8016974:	f240 3086 	movw	r0, #902	; 0x386
 8016978:	bd38      	pop	{r3, r4, r5, pc}
 801697a:	200b      	movs	r0, #11
 801697c:	4770      	bx	lr
 801697e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016982:	bd38      	pop	{r3, r4, r5, pc}
 8016984:	200b      	movs	r0, #11
 8016986:	bd38      	pop	{r3, r4, r5, pc}

08016988 <rcl_wait>:
 8016988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801698c:	ed2d 8b02 	vpush	{d8}
 8016990:	b08d      	sub	sp, #52	; 0x34
 8016992:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016996:	2800      	cmp	r0, #0
 8016998:	f000 814f 	beq.w	8016c3a <rcl_wait+0x2b2>
 801699c:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801699e:	4605      	mov	r5, r0
 80169a0:	2e00      	cmp	r6, #0
 80169a2:	f000 811a 	beq.w	8016bda <rcl_wait+0x252>
 80169a6:	6843      	ldr	r3, [r0, #4]
 80169a8:	b983      	cbnz	r3, 80169cc <rcl_wait+0x44>
 80169aa:	68eb      	ldr	r3, [r5, #12]
 80169ac:	b973      	cbnz	r3, 80169cc <rcl_wait+0x44>
 80169ae:	696b      	ldr	r3, [r5, #20]
 80169b0:	b963      	cbnz	r3, 80169cc <rcl_wait+0x44>
 80169b2:	69eb      	ldr	r3, [r5, #28]
 80169b4:	b953      	cbnz	r3, 80169cc <rcl_wait+0x44>
 80169b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80169b8:	b943      	cbnz	r3, 80169cc <rcl_wait+0x44>
 80169ba:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80169bc:	b933      	cbnz	r3, 80169cc <rcl_wait+0x44>
 80169be:	f240 3085 	movw	r0, #901	; 0x385
 80169c2:	b00d      	add	sp, #52	; 0x34
 80169c4:	ecbd 8b02 	vpop	{d8}
 80169c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169cc:	9b04      	ldr	r3, [sp, #16]
 80169ce:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80169d0:	2b01      	cmp	r3, #1
 80169d2:	9b05      	ldr	r3, [sp, #20]
 80169d4:	f173 0300 	sbcs.w	r3, r3, #0
 80169d8:	f2c0 80f8 	blt.w	8016bcc <rcl_wait+0x244>
 80169dc:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 80169e0:	2a00      	cmp	r2, #0
 80169e2:	f000 810f 	beq.w	8016c04 <rcl_wait+0x27c>
 80169e6:	2400      	movs	r4, #0
 80169e8:	4613      	mov	r3, r2
 80169ea:	f240 3921 	movw	r9, #801	; 0x321
 80169ee:	4632      	mov	r2, r6
 80169f0:	46a2      	mov	sl, r4
 80169f2:	46a3      	mov	fp, r4
 80169f4:	ed9f 8b98 	vldr	d8, [pc, #608]	; 8016c58 <rcl_wait+0x2d0>
 80169f8:	e014      	b.n	8016a24 <rcl_wait+0x9c>
 80169fa:	2800      	cmp	r0, #0
 80169fc:	d1e1      	bne.n	80169c2 <rcl_wait+0x3a>
 80169fe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016a02:	4542      	cmp	r2, r8
 8016a04:	eb73 0107 	sbcs.w	r1, r3, r7
 8016a08:	da03      	bge.n	8016a12 <rcl_wait+0x8a>
 8016a0a:	4690      	mov	r8, r2
 8016a0c:	461f      	mov	r7, r3
 8016a0e:	f04f 0b01 	mov.w	fp, #1
 8016a12:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8016a14:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8016a16:	3401      	adds	r4, #1
 8016a18:	f14a 0a00 	adc.w	sl, sl, #0
 8016a1c:	429c      	cmp	r4, r3
 8016a1e:	f17a 0100 	sbcs.w	r1, sl, #0
 8016a22:	d228      	bcs.n	8016a76 <rcl_wait+0xee>
 8016a24:	6928      	ldr	r0, [r5, #16]
 8016a26:	a908      	add	r1, sp, #32
 8016a28:	00a6      	lsls	r6, r4, #2
 8016a2a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8016a2e:	2800      	cmp	r0, #0
 8016a30:	d0f1      	beq.n	8016a16 <rcl_wait+0x8e>
 8016a32:	68eb      	ldr	r3, [r5, #12]
 8016a34:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8016a38:	4423      	add	r3, r4
 8016a3a:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8016a3e:	f1be 0f00 	cmp.w	lr, #0
 8016a42:	d006      	beq.n	8016a52 <rcl_wait+0xca>
 8016a44:	6913      	ldr	r3, [r2, #16]
 8016a46:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8016a4a:	3301      	adds	r3, #1
 8016a4c:	6113      	str	r3, [r2, #16]
 8016a4e:	692b      	ldr	r3, [r5, #16]
 8016a50:	5998      	ldr	r0, [r3, r6]
 8016a52:	ed8d 8b08 	vstr	d8, [sp, #32]
 8016a56:	f7ff fa8b 	bl	8015f70 <rcl_timer_get_time_until_next_call>
 8016a5a:	4548      	cmp	r0, r9
 8016a5c:	d1cd      	bne.n	80169fa <rcl_wait+0x72>
 8016a5e:	692b      	ldr	r3, [r5, #16]
 8016a60:	2200      	movs	r2, #0
 8016a62:	3401      	adds	r4, #1
 8016a64:	519a      	str	r2, [r3, r6]
 8016a66:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8016a68:	f14a 0a00 	adc.w	sl, sl, #0
 8016a6c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8016a6e:	429c      	cmp	r4, r3
 8016a70:	f17a 0100 	sbcs.w	r1, sl, #0
 8016a74:	d3d6      	bcc.n	8016a24 <rcl_wait+0x9c>
 8016a76:	4659      	mov	r1, fp
 8016a78:	4616      	mov	r6, r2
 8016a7a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8016a7e:	4313      	orrs	r3, r2
 8016a80:	f040 80b4 	bne.w	8016bec <rcl_wait+0x264>
 8016a84:	2300      	movs	r3, #0
 8016a86:	2200      	movs	r2, #0
 8016a88:	460c      	mov	r4, r1
 8016a8a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016a8e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016a92:	ab08      	add	r3, sp, #32
 8016a94:	9302      	str	r3, [sp, #8]
 8016a96:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8016a9a:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8016a9c:	f106 0110 	add.w	r1, r6, #16
 8016aa0:	9300      	str	r3, [sp, #0]
 8016aa2:	1d30      	adds	r0, r6, #4
 8016aa4:	f106 031c 	add.w	r3, r6, #28
 8016aa8:	9201      	str	r2, [sp, #4]
 8016aaa:	f106 0228 	add.w	r2, r6, #40	; 0x28
 8016aae:	f002 fca3 	bl	80193f8 <rmw_wait>
 8016ab2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016ab4:	4680      	mov	r8, r0
 8016ab6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016ab8:	b1e2      	cbz	r2, 8016af4 <rcl_wait+0x16c>
 8016aba:	f04f 0900 	mov.w	r9, #0
 8016abe:	464f      	mov	r7, r9
 8016ac0:	692a      	ldr	r2, [r5, #16]
 8016ac2:	f10d 011f 	add.w	r1, sp, #31
 8016ac6:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8016aca:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8016ace:	b160      	cbz	r0, 8016aea <rcl_wait+0x162>
 8016ad0:	f88d 701f 	strb.w	r7, [sp, #31]
 8016ad4:	f7ff fa10 	bl	8015ef8 <rcl_timer_is_ready>
 8016ad8:	2800      	cmp	r0, #0
 8016ada:	f47f af72 	bne.w	80169c2 <rcl_wait+0x3a>
 8016ade:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8016ae2:	b90b      	cbnz	r3, 8016ae8 <rcl_wait+0x160>
 8016ae4:	692a      	ldr	r2, [r5, #16]
 8016ae6:	5193      	str	r3, [r2, r6]
 8016ae8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016aea:	f109 0901 	add.w	r9, r9, #1
 8016aee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016af0:	454a      	cmp	r2, r9
 8016af2:	d8e5      	bhi.n	8016ac0 <rcl_wait+0x138>
 8016af4:	f038 0002 	bics.w	r0, r8, #2
 8016af8:	d176      	bne.n	8016be8 <rcl_wait+0x260>
 8016afa:	686f      	ldr	r7, [r5, #4]
 8016afc:	b17f      	cbz	r7, 8016b1e <rcl_wait+0x196>
 8016afe:	4602      	mov	r2, r0
 8016b00:	e002      	b.n	8016b08 <rcl_wait+0x180>
 8016b02:	3201      	adds	r2, #1
 8016b04:	42ba      	cmp	r2, r7
 8016b06:	d00a      	beq.n	8016b1e <rcl_wait+0x196>
 8016b08:	6899      	ldr	r1, [r3, #8]
 8016b0a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016b0e:	2900      	cmp	r1, #0
 8016b10:	d1f7      	bne.n	8016b02 <rcl_wait+0x17a>
 8016b12:	682e      	ldr	r6, [r5, #0]
 8016b14:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8016b18:	3201      	adds	r2, #1
 8016b1a:	42ba      	cmp	r2, r7
 8016b1c:	d1f4      	bne.n	8016b08 <rcl_wait+0x180>
 8016b1e:	68ef      	ldr	r7, [r5, #12]
 8016b20:	b17f      	cbz	r7, 8016b42 <rcl_wait+0x1ba>
 8016b22:	2200      	movs	r2, #0
 8016b24:	e002      	b.n	8016b2c <rcl_wait+0x1a4>
 8016b26:	3201      	adds	r2, #1
 8016b28:	42ba      	cmp	r2, r7
 8016b2a:	d00a      	beq.n	8016b42 <rcl_wait+0x1ba>
 8016b2c:	6959      	ldr	r1, [r3, #20]
 8016b2e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016b32:	2900      	cmp	r1, #0
 8016b34:	d1f7      	bne.n	8016b26 <rcl_wait+0x19e>
 8016b36:	68ae      	ldr	r6, [r5, #8]
 8016b38:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8016b3c:	3201      	adds	r2, #1
 8016b3e:	42ba      	cmp	r2, r7
 8016b40:	d1f4      	bne.n	8016b2c <rcl_wait+0x1a4>
 8016b42:	69ef      	ldr	r7, [r5, #28]
 8016b44:	b17f      	cbz	r7, 8016b66 <rcl_wait+0x1de>
 8016b46:	2200      	movs	r2, #0
 8016b48:	e002      	b.n	8016b50 <rcl_wait+0x1c8>
 8016b4a:	3201      	adds	r2, #1
 8016b4c:	42ba      	cmp	r2, r7
 8016b4e:	d00a      	beq.n	8016b66 <rcl_wait+0x1de>
 8016b50:	6a19      	ldr	r1, [r3, #32]
 8016b52:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016b56:	2900      	cmp	r1, #0
 8016b58:	d1f7      	bne.n	8016b4a <rcl_wait+0x1c2>
 8016b5a:	69ae      	ldr	r6, [r5, #24]
 8016b5c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8016b60:	3201      	adds	r2, #1
 8016b62:	42ba      	cmp	r2, r7
 8016b64:	d1f4      	bne.n	8016b50 <rcl_wait+0x1c8>
 8016b66:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8016b68:	b17f      	cbz	r7, 8016b8a <rcl_wait+0x202>
 8016b6a:	2200      	movs	r2, #0
 8016b6c:	e002      	b.n	8016b74 <rcl_wait+0x1ec>
 8016b6e:	3201      	adds	r2, #1
 8016b70:	42ba      	cmp	r2, r7
 8016b72:	d00a      	beq.n	8016b8a <rcl_wait+0x202>
 8016b74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8016b76:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016b7a:	2900      	cmp	r1, #0
 8016b7c:	d1f7      	bne.n	8016b6e <rcl_wait+0x1e6>
 8016b7e:	6a2e      	ldr	r6, [r5, #32]
 8016b80:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8016b84:	3201      	adds	r2, #1
 8016b86:	42ba      	cmp	r2, r7
 8016b88:	d1f4      	bne.n	8016b74 <rcl_wait+0x1ec>
 8016b8a:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 8016b8c:	b17f      	cbz	r7, 8016bae <rcl_wait+0x226>
 8016b8e:	2200      	movs	r2, #0
 8016b90:	e002      	b.n	8016b98 <rcl_wait+0x210>
 8016b92:	3201      	adds	r2, #1
 8016b94:	42ba      	cmp	r2, r7
 8016b96:	d00a      	beq.n	8016bae <rcl_wait+0x226>
 8016b98:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8016b9a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016b9e:	2900      	cmp	r1, #0
 8016ba0:	d1f7      	bne.n	8016b92 <rcl_wait+0x20a>
 8016ba2:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8016ba4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8016ba8:	3201      	adds	r2, #1
 8016baa:	42ba      	cmp	r2, r7
 8016bac:	d1f4      	bne.n	8016b98 <rcl_wait+0x210>
 8016bae:	f1b8 0f02 	cmp.w	r8, #2
 8016bb2:	f47f af06 	bne.w	80169c2 <rcl_wait+0x3a>
 8016bb6:	f084 0301 	eor.w	r3, r4, #1
 8016bba:	b2db      	uxtb	r3, r3
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	bf18      	it	ne
 8016bc0:	2002      	movne	r0, #2
 8016bc2:	b00d      	add	sp, #52	; 0x34
 8016bc4:	ecbd 8b02 	vpop	{d8}
 8016bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bcc:	2a00      	cmp	r2, #0
 8016bce:	d03a      	beq.n	8016c46 <rcl_wait+0x2be>
 8016bd0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8016bd4:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8016bd8:	e705      	b.n	80169e6 <rcl_wait+0x5e>
 8016bda:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016bde:	b00d      	add	sp, #52	; 0x34
 8016be0:	ecbd 8b02 	vpop	{d8}
 8016be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016be8:	2001      	movs	r0, #1
 8016bea:	e6ea      	b.n	80169c2 <rcl_wait+0x3a>
 8016bec:	9b04      	ldr	r3, [sp, #16]
 8016bee:	460c      	mov	r4, r1
 8016bf0:	2b01      	cmp	r3, #1
 8016bf2:	9b05      	ldr	r3, [sp, #20]
 8016bf4:	f173 0300 	sbcs.w	r3, r3, #0
 8016bf8:	bfa8      	it	ge
 8016bfa:	f044 0401 	orrge.w	r4, r4, #1
 8016bfe:	b914      	cbnz	r4, 8016c06 <rcl_wait+0x27e>
 8016c00:	4623      	mov	r3, r4
 8016c02:	e747      	b.n	8016a94 <rcl_wait+0x10c>
 8016c04:	4611      	mov	r1, r2
 8016c06:	2f00      	cmp	r7, #0
 8016c08:	da02      	bge.n	8016c10 <rcl_wait+0x288>
 8016c0a:	f04f 0800 	mov.w	r8, #0
 8016c0e:	4647      	mov	r7, r8
 8016c10:	460c      	mov	r4, r1
 8016c12:	4640      	mov	r0, r8
 8016c14:	4639      	mov	r1, r7
 8016c16:	a312      	add	r3, pc, #72	; (adr r3, 8016c60 <rcl_wait+0x2d8>)
 8016c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c1c:	f7e9 fb78 	bl	8000310 <__aeabi_ldivmod>
 8016c20:	a30f      	add	r3, pc, #60	; (adr r3, 8016c60 <rcl_wait+0x2d8>)
 8016c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016c2a:	4640      	mov	r0, r8
 8016c2c:	4639      	mov	r1, r7
 8016c2e:	f7e9 fb6f 	bl	8000310 <__aeabi_ldivmod>
 8016c32:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016c36:	ab08      	add	r3, sp, #32
 8016c38:	e72c      	b.n	8016a94 <rcl_wait+0x10c>
 8016c3a:	200b      	movs	r0, #11
 8016c3c:	b00d      	add	sp, #52	; 0x34
 8016c3e:	ecbd 8b02 	vpop	{d8}
 8016c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c46:	4611      	mov	r1, r2
 8016c48:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8016c4c:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8016c50:	e713      	b.n	8016a7a <rcl_wait+0xf2>
 8016c52:	bf00      	nop
 8016c54:	f3af 8000 	nop.w
 8016c58:	ffffffff 	.word	0xffffffff
 8016c5c:	7fffffff 	.word	0x7fffffff
 8016c60:	3b9aca00 	.word	0x3b9aca00
 8016c64:	00000000 	.word	0x00000000

08016c68 <rcl_action_take_goal_response>:
 8016c68:	2800      	cmp	r0, #0
 8016c6a:	d039      	beq.n	8016ce0 <rcl_action_take_goal_response+0x78>
 8016c6c:	b570      	push	{r4, r5, r6, lr}
 8016c6e:	4604      	mov	r4, r0
 8016c70:	6800      	ldr	r0, [r0, #0]
 8016c72:	b380      	cbz	r0, 8016cd6 <rcl_action_take_goal_response+0x6e>
 8016c74:	460e      	mov	r6, r1
 8016c76:	4615      	mov	r5, r2
 8016c78:	f7fd fc1e 	bl	80144b8 <rcl_client_is_valid>
 8016c7c:	b330      	cbz	r0, 8016ccc <rcl_action_take_goal_response+0x64>
 8016c7e:	6820      	ldr	r0, [r4, #0]
 8016c80:	3004      	adds	r0, #4
 8016c82:	f7fd fc19 	bl	80144b8 <rcl_client_is_valid>
 8016c86:	b308      	cbz	r0, 8016ccc <rcl_action_take_goal_response+0x64>
 8016c88:	6820      	ldr	r0, [r4, #0]
 8016c8a:	3008      	adds	r0, #8
 8016c8c:	f7fd fc14 	bl	80144b8 <rcl_client_is_valid>
 8016c90:	b1e0      	cbz	r0, 8016ccc <rcl_action_take_goal_response+0x64>
 8016c92:	6820      	ldr	r0, [r4, #0]
 8016c94:	300c      	adds	r0, #12
 8016c96:	f7fe fdc1 	bl	801581c <rcl_subscription_is_valid>
 8016c9a:	b1b8      	cbz	r0, 8016ccc <rcl_action_take_goal_response+0x64>
 8016c9c:	6820      	ldr	r0, [r4, #0]
 8016c9e:	3010      	adds	r0, #16
 8016ca0:	f7fe fdbc 	bl	801581c <rcl_subscription_is_valid>
 8016ca4:	b190      	cbz	r0, 8016ccc <rcl_action_take_goal_response+0x64>
 8016ca6:	b1cd      	cbz	r5, 8016cdc <rcl_action_take_goal_response+0x74>
 8016ca8:	b1c6      	cbz	r6, 8016cdc <rcl_action_take_goal_response+0x74>
 8016caa:	462a      	mov	r2, r5
 8016cac:	4631      	mov	r1, r6
 8016cae:	6820      	ldr	r0, [r4, #0]
 8016cb0:	f7fd fb9a 	bl	80143e8 <rcl_take_response>
 8016cb4:	b148      	cbz	r0, 8016cca <rcl_action_take_goal_response+0x62>
 8016cb6:	280a      	cmp	r0, #10
 8016cb8:	d007      	beq.n	8016cca <rcl_action_take_goal_response+0x62>
 8016cba:	f240 12f5 	movw	r2, #501	; 0x1f5
 8016cbe:	f640 0337 	movw	r3, #2103	; 0x837
 8016cc2:	4290      	cmp	r0, r2
 8016cc4:	bf0c      	ite	eq
 8016cc6:	4618      	moveq	r0, r3
 8016cc8:	2001      	movne	r0, #1
 8016cca:	bd70      	pop	{r4, r5, r6, pc}
 8016ccc:	f7f6 ffa0 	bl	800dc10 <rcutils_reset_error>
 8016cd0:	f640 0036 	movw	r0, #2102	; 0x836
 8016cd4:	bd70      	pop	{r4, r5, r6, pc}
 8016cd6:	f640 0036 	movw	r0, #2102	; 0x836
 8016cda:	bd70      	pop	{r4, r5, r6, pc}
 8016cdc:	200b      	movs	r0, #11
 8016cde:	bd70      	pop	{r4, r5, r6, pc}
 8016ce0:	f640 0036 	movw	r0, #2102	; 0x836
 8016ce4:	4770      	bx	lr
 8016ce6:	bf00      	nop

08016ce8 <rcl_action_send_result_request>:
 8016ce8:	b390      	cbz	r0, 8016d50 <rcl_action_send_result_request+0x68>
 8016cea:	b570      	push	{r4, r5, r6, lr}
 8016cec:	4604      	mov	r4, r0
 8016cee:	6800      	ldr	r0, [r0, #0]
 8016cf0:	b348      	cbz	r0, 8016d46 <rcl_action_send_result_request+0x5e>
 8016cf2:	460e      	mov	r6, r1
 8016cf4:	4615      	mov	r5, r2
 8016cf6:	f7fd fbdf 	bl	80144b8 <rcl_client_is_valid>
 8016cfa:	b1f8      	cbz	r0, 8016d3c <rcl_action_send_result_request+0x54>
 8016cfc:	6820      	ldr	r0, [r4, #0]
 8016cfe:	3004      	adds	r0, #4
 8016d00:	f7fd fbda 	bl	80144b8 <rcl_client_is_valid>
 8016d04:	b1d0      	cbz	r0, 8016d3c <rcl_action_send_result_request+0x54>
 8016d06:	6820      	ldr	r0, [r4, #0]
 8016d08:	3008      	adds	r0, #8
 8016d0a:	f7fd fbd5 	bl	80144b8 <rcl_client_is_valid>
 8016d0e:	b1a8      	cbz	r0, 8016d3c <rcl_action_send_result_request+0x54>
 8016d10:	6820      	ldr	r0, [r4, #0]
 8016d12:	300c      	adds	r0, #12
 8016d14:	f7fe fd82 	bl	801581c <rcl_subscription_is_valid>
 8016d18:	b180      	cbz	r0, 8016d3c <rcl_action_send_result_request+0x54>
 8016d1a:	6820      	ldr	r0, [r4, #0]
 8016d1c:	3010      	adds	r0, #16
 8016d1e:	f7fe fd7d 	bl	801581c <rcl_subscription_is_valid>
 8016d22:	b158      	cbz	r0, 8016d3c <rcl_action_send_result_request+0x54>
 8016d24:	b195      	cbz	r5, 8016d4c <rcl_action_send_result_request+0x64>
 8016d26:	b18e      	cbz	r6, 8016d4c <rcl_action_send_result_request+0x64>
 8016d28:	6820      	ldr	r0, [r4, #0]
 8016d2a:	462a      	mov	r2, r5
 8016d2c:	4631      	mov	r1, r6
 8016d2e:	3008      	adds	r0, #8
 8016d30:	f7fd fb06 	bl	8014340 <rcl_send_request>
 8016d34:	3800      	subs	r0, #0
 8016d36:	bf18      	it	ne
 8016d38:	2001      	movne	r0, #1
 8016d3a:	bd70      	pop	{r4, r5, r6, pc}
 8016d3c:	f7f6 ff68 	bl	800dc10 <rcutils_reset_error>
 8016d40:	f640 0036 	movw	r0, #2102	; 0x836
 8016d44:	bd70      	pop	{r4, r5, r6, pc}
 8016d46:	f640 0036 	movw	r0, #2102	; 0x836
 8016d4a:	bd70      	pop	{r4, r5, r6, pc}
 8016d4c:	200b      	movs	r0, #11
 8016d4e:	bd70      	pop	{r4, r5, r6, pc}
 8016d50:	f640 0036 	movw	r0, #2102	; 0x836
 8016d54:	4770      	bx	lr
 8016d56:	bf00      	nop

08016d58 <rcl_action_take_result_response>:
 8016d58:	2800      	cmp	r0, #0
 8016d5a:	d03a      	beq.n	8016dd2 <rcl_action_take_result_response+0x7a>
 8016d5c:	b570      	push	{r4, r5, r6, lr}
 8016d5e:	4604      	mov	r4, r0
 8016d60:	6800      	ldr	r0, [r0, #0]
 8016d62:	b388      	cbz	r0, 8016dc8 <rcl_action_take_result_response+0x70>
 8016d64:	460e      	mov	r6, r1
 8016d66:	4615      	mov	r5, r2
 8016d68:	f7fd fba6 	bl	80144b8 <rcl_client_is_valid>
 8016d6c:	b338      	cbz	r0, 8016dbe <rcl_action_take_result_response+0x66>
 8016d6e:	6820      	ldr	r0, [r4, #0]
 8016d70:	3004      	adds	r0, #4
 8016d72:	f7fd fba1 	bl	80144b8 <rcl_client_is_valid>
 8016d76:	b310      	cbz	r0, 8016dbe <rcl_action_take_result_response+0x66>
 8016d78:	6820      	ldr	r0, [r4, #0]
 8016d7a:	3008      	adds	r0, #8
 8016d7c:	f7fd fb9c 	bl	80144b8 <rcl_client_is_valid>
 8016d80:	b1e8      	cbz	r0, 8016dbe <rcl_action_take_result_response+0x66>
 8016d82:	6820      	ldr	r0, [r4, #0]
 8016d84:	300c      	adds	r0, #12
 8016d86:	f7fe fd49 	bl	801581c <rcl_subscription_is_valid>
 8016d8a:	b1c0      	cbz	r0, 8016dbe <rcl_action_take_result_response+0x66>
 8016d8c:	6820      	ldr	r0, [r4, #0]
 8016d8e:	3010      	adds	r0, #16
 8016d90:	f7fe fd44 	bl	801581c <rcl_subscription_is_valid>
 8016d94:	b198      	cbz	r0, 8016dbe <rcl_action_take_result_response+0x66>
 8016d96:	b1d5      	cbz	r5, 8016dce <rcl_action_take_result_response+0x76>
 8016d98:	b1ce      	cbz	r6, 8016dce <rcl_action_take_result_response+0x76>
 8016d9a:	6820      	ldr	r0, [r4, #0]
 8016d9c:	462a      	mov	r2, r5
 8016d9e:	4631      	mov	r1, r6
 8016da0:	3008      	adds	r0, #8
 8016da2:	f7fd fb21 	bl	80143e8 <rcl_take_response>
 8016da6:	b148      	cbz	r0, 8016dbc <rcl_action_take_result_response+0x64>
 8016da8:	280a      	cmp	r0, #10
 8016daa:	d007      	beq.n	8016dbc <rcl_action_take_result_response+0x64>
 8016dac:	f240 12f5 	movw	r2, #501	; 0x1f5
 8016db0:	f640 0337 	movw	r3, #2103	; 0x837
 8016db4:	4290      	cmp	r0, r2
 8016db6:	bf0c      	ite	eq
 8016db8:	4618      	moveq	r0, r3
 8016dba:	2001      	movne	r0, #1
 8016dbc:	bd70      	pop	{r4, r5, r6, pc}
 8016dbe:	f7f6 ff27 	bl	800dc10 <rcutils_reset_error>
 8016dc2:	f640 0036 	movw	r0, #2102	; 0x836
 8016dc6:	bd70      	pop	{r4, r5, r6, pc}
 8016dc8:	f640 0036 	movw	r0, #2102	; 0x836
 8016dcc:	bd70      	pop	{r4, r5, r6, pc}
 8016dce:	200b      	movs	r0, #11
 8016dd0:	bd70      	pop	{r4, r5, r6, pc}
 8016dd2:	f640 0036 	movw	r0, #2102	; 0x836
 8016dd6:	4770      	bx	lr

08016dd8 <rcl_action_take_cancel_response>:
 8016dd8:	2800      	cmp	r0, #0
 8016dda:	d03a      	beq.n	8016e52 <rcl_action_take_cancel_response+0x7a>
 8016ddc:	b570      	push	{r4, r5, r6, lr}
 8016dde:	4604      	mov	r4, r0
 8016de0:	6800      	ldr	r0, [r0, #0]
 8016de2:	b388      	cbz	r0, 8016e48 <rcl_action_take_cancel_response+0x70>
 8016de4:	460e      	mov	r6, r1
 8016de6:	4615      	mov	r5, r2
 8016de8:	f7fd fb66 	bl	80144b8 <rcl_client_is_valid>
 8016dec:	b338      	cbz	r0, 8016e3e <rcl_action_take_cancel_response+0x66>
 8016dee:	6820      	ldr	r0, [r4, #0]
 8016df0:	3004      	adds	r0, #4
 8016df2:	f7fd fb61 	bl	80144b8 <rcl_client_is_valid>
 8016df6:	b310      	cbz	r0, 8016e3e <rcl_action_take_cancel_response+0x66>
 8016df8:	6820      	ldr	r0, [r4, #0]
 8016dfa:	3008      	adds	r0, #8
 8016dfc:	f7fd fb5c 	bl	80144b8 <rcl_client_is_valid>
 8016e00:	b1e8      	cbz	r0, 8016e3e <rcl_action_take_cancel_response+0x66>
 8016e02:	6820      	ldr	r0, [r4, #0]
 8016e04:	300c      	adds	r0, #12
 8016e06:	f7fe fd09 	bl	801581c <rcl_subscription_is_valid>
 8016e0a:	b1c0      	cbz	r0, 8016e3e <rcl_action_take_cancel_response+0x66>
 8016e0c:	6820      	ldr	r0, [r4, #0]
 8016e0e:	3010      	adds	r0, #16
 8016e10:	f7fe fd04 	bl	801581c <rcl_subscription_is_valid>
 8016e14:	b198      	cbz	r0, 8016e3e <rcl_action_take_cancel_response+0x66>
 8016e16:	b1d5      	cbz	r5, 8016e4e <rcl_action_take_cancel_response+0x76>
 8016e18:	b1ce      	cbz	r6, 8016e4e <rcl_action_take_cancel_response+0x76>
 8016e1a:	6820      	ldr	r0, [r4, #0]
 8016e1c:	462a      	mov	r2, r5
 8016e1e:	4631      	mov	r1, r6
 8016e20:	3004      	adds	r0, #4
 8016e22:	f7fd fae1 	bl	80143e8 <rcl_take_response>
 8016e26:	b148      	cbz	r0, 8016e3c <rcl_action_take_cancel_response+0x64>
 8016e28:	280a      	cmp	r0, #10
 8016e2a:	d007      	beq.n	8016e3c <rcl_action_take_cancel_response+0x64>
 8016e2c:	f240 12f5 	movw	r2, #501	; 0x1f5
 8016e30:	f640 0337 	movw	r3, #2103	; 0x837
 8016e34:	4290      	cmp	r0, r2
 8016e36:	bf0c      	ite	eq
 8016e38:	4618      	moveq	r0, r3
 8016e3a:	2001      	movne	r0, #1
 8016e3c:	bd70      	pop	{r4, r5, r6, pc}
 8016e3e:	f7f6 fee7 	bl	800dc10 <rcutils_reset_error>
 8016e42:	f640 0036 	movw	r0, #2102	; 0x836
 8016e46:	bd70      	pop	{r4, r5, r6, pc}
 8016e48:	f640 0036 	movw	r0, #2102	; 0x836
 8016e4c:	bd70      	pop	{r4, r5, r6, pc}
 8016e4e:	200b      	movs	r0, #11
 8016e50:	bd70      	pop	{r4, r5, r6, pc}
 8016e52:	f640 0036 	movw	r0, #2102	; 0x836
 8016e56:	4770      	bx	lr

08016e58 <rcl_action_take_feedback>:
 8016e58:	2800      	cmp	r0, #0
 8016e5a:	d038      	beq.n	8016ece <rcl_action_take_feedback+0x76>
 8016e5c:	b530      	push	{r4, r5, lr}
 8016e5e:	4604      	mov	r4, r0
 8016e60:	6800      	ldr	r0, [r0, #0]
 8016e62:	b08f      	sub	sp, #60	; 0x3c
 8016e64:	b378      	cbz	r0, 8016ec6 <rcl_action_take_feedback+0x6e>
 8016e66:	460d      	mov	r5, r1
 8016e68:	f7fd fb26 	bl	80144b8 <rcl_client_is_valid>
 8016e6c:	b328      	cbz	r0, 8016eba <rcl_action_take_feedback+0x62>
 8016e6e:	6820      	ldr	r0, [r4, #0]
 8016e70:	3004      	adds	r0, #4
 8016e72:	f7fd fb21 	bl	80144b8 <rcl_client_is_valid>
 8016e76:	b300      	cbz	r0, 8016eba <rcl_action_take_feedback+0x62>
 8016e78:	6820      	ldr	r0, [r4, #0]
 8016e7a:	3008      	adds	r0, #8
 8016e7c:	f7fd fb1c 	bl	80144b8 <rcl_client_is_valid>
 8016e80:	b1d8      	cbz	r0, 8016eba <rcl_action_take_feedback+0x62>
 8016e82:	6820      	ldr	r0, [r4, #0]
 8016e84:	300c      	adds	r0, #12
 8016e86:	f7fe fcc9 	bl	801581c <rcl_subscription_is_valid>
 8016e8a:	b1b0      	cbz	r0, 8016eba <rcl_action_take_feedback+0x62>
 8016e8c:	6820      	ldr	r0, [r4, #0]
 8016e8e:	3010      	adds	r0, #16
 8016e90:	f7fe fcc4 	bl	801581c <rcl_subscription_is_valid>
 8016e94:	b188      	cbz	r0, 8016eba <rcl_action_take_feedback+0x62>
 8016e96:	b1ed      	cbz	r5, 8016ed4 <rcl_action_take_feedback+0x7c>
 8016e98:	6820      	ldr	r0, [r4, #0]
 8016e9a:	2300      	movs	r3, #0
 8016e9c:	466a      	mov	r2, sp
 8016e9e:	4629      	mov	r1, r5
 8016ea0:	300c      	adds	r0, #12
 8016ea2:	f7fe fc5f 	bl	8015764 <rcl_take>
 8016ea6:	b160      	cbz	r0, 8016ec2 <rcl_action_take_feedback+0x6a>
 8016ea8:	f240 1391 	movw	r3, #401	; 0x191
 8016eac:	4298      	cmp	r0, r3
 8016eae:	d014      	beq.n	8016eda <rcl_action_take_feedback+0x82>
 8016eb0:	280a      	cmp	r0, #10
 8016eb2:	bf18      	it	ne
 8016eb4:	2001      	movne	r0, #1
 8016eb6:	b00f      	add	sp, #60	; 0x3c
 8016eb8:	bd30      	pop	{r4, r5, pc}
 8016eba:	f7f6 fea9 	bl	800dc10 <rcutils_reset_error>
 8016ebe:	f640 0036 	movw	r0, #2102	; 0x836
 8016ec2:	b00f      	add	sp, #60	; 0x3c
 8016ec4:	bd30      	pop	{r4, r5, pc}
 8016ec6:	f640 0036 	movw	r0, #2102	; 0x836
 8016eca:	b00f      	add	sp, #60	; 0x3c
 8016ecc:	bd30      	pop	{r4, r5, pc}
 8016ece:	f640 0036 	movw	r0, #2102	; 0x836
 8016ed2:	4770      	bx	lr
 8016ed4:	200b      	movs	r0, #11
 8016ed6:	b00f      	add	sp, #60	; 0x3c
 8016ed8:	bd30      	pop	{r4, r5, pc}
 8016eda:	f640 0037 	movw	r0, #2103	; 0x837
 8016ede:	e7f0      	b.n	8016ec2 <rcl_action_take_feedback+0x6a>

08016ee0 <rcl_action_wait_set_add_action_client>:
 8016ee0:	2800      	cmp	r0, #0
 8016ee2:	d048      	beq.n	8016f76 <rcl_action_wait_set_add_action_client+0x96>
 8016ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ee6:	460c      	mov	r4, r1
 8016ee8:	2900      	cmp	r1, #0
 8016eea:	d03c      	beq.n	8016f66 <rcl_action_wait_set_add_action_client+0x86>
 8016eec:	4605      	mov	r5, r0
 8016eee:	6808      	ldr	r0, [r1, #0]
 8016ef0:	2800      	cmp	r0, #0
 8016ef2:	d038      	beq.n	8016f66 <rcl_action_wait_set_add_action_client+0x86>
 8016ef4:	4617      	mov	r7, r2
 8016ef6:	461e      	mov	r6, r3
 8016ef8:	f7fd fade 	bl	80144b8 <rcl_client_is_valid>
 8016efc:	b3b0      	cbz	r0, 8016f6c <rcl_action_wait_set_add_action_client+0x8c>
 8016efe:	6820      	ldr	r0, [r4, #0]
 8016f00:	3004      	adds	r0, #4
 8016f02:	f7fd fad9 	bl	80144b8 <rcl_client_is_valid>
 8016f06:	b388      	cbz	r0, 8016f6c <rcl_action_wait_set_add_action_client+0x8c>
 8016f08:	6820      	ldr	r0, [r4, #0]
 8016f0a:	3008      	adds	r0, #8
 8016f0c:	f7fd fad4 	bl	80144b8 <rcl_client_is_valid>
 8016f10:	b360      	cbz	r0, 8016f6c <rcl_action_wait_set_add_action_client+0x8c>
 8016f12:	6820      	ldr	r0, [r4, #0]
 8016f14:	300c      	adds	r0, #12
 8016f16:	f7fe fc81 	bl	801581c <rcl_subscription_is_valid>
 8016f1a:	b338      	cbz	r0, 8016f6c <rcl_action_wait_set_add_action_client+0x8c>
 8016f1c:	6820      	ldr	r0, [r4, #0]
 8016f1e:	3010      	adds	r0, #16
 8016f20:	f7fe fc7c 	bl	801581c <rcl_subscription_is_valid>
 8016f24:	b310      	cbz	r0, 8016f6c <rcl_action_wait_set_add_action_client+0x8c>
 8016f26:	6821      	ldr	r1, [r4, #0]
 8016f28:	4628      	mov	r0, r5
 8016f2a:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 8016f2e:	f7ff fcd3 	bl	80168d8 <rcl_wait_set_add_client>
 8016f32:	b9b8      	cbnz	r0, 8016f64 <rcl_action_wait_set_add_action_client+0x84>
 8016f34:	6821      	ldr	r1, [r4, #0]
 8016f36:	4628      	mov	r0, r5
 8016f38:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 8016f3c:	3104      	adds	r1, #4
 8016f3e:	f7ff fccb 	bl	80168d8 <rcl_wait_set_add_client>
 8016f42:	b978      	cbnz	r0, 8016f64 <rcl_action_wait_set_add_action_client+0x84>
 8016f44:	6821      	ldr	r1, [r4, #0]
 8016f46:	4628      	mov	r0, r5
 8016f48:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 8016f4c:	3108      	adds	r1, #8
 8016f4e:	f7ff fcc3 	bl	80168d8 <rcl_wait_set_add_client>
 8016f52:	b938      	cbnz	r0, 8016f64 <rcl_action_wait_set_add_action_client+0x84>
 8016f54:	6821      	ldr	r1, [r4, #0]
 8016f56:	4628      	mov	r0, r5
 8016f58:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 8016f5c:	310c      	adds	r1, #12
 8016f5e:	f7ff f96b 	bl	8016238 <rcl_wait_set_add_subscription>
 8016f62:	b158      	cbz	r0, 8016f7c <rcl_action_wait_set_add_action_client+0x9c>
 8016f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f66:	f640 0036 	movw	r0, #2102	; 0x836
 8016f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f6c:	f7f6 fe50 	bl	800dc10 <rcutils_reset_error>
 8016f70:	f640 0036 	movw	r0, #2102	; 0x836
 8016f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f76:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016f7a:	4770      	bx	lr
 8016f7c:	6821      	ldr	r1, [r4, #0]
 8016f7e:	4628      	mov	r0, r5
 8016f80:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 8016f84:	3110      	adds	r1, #16
 8016f86:	f7ff f957 	bl	8016238 <rcl_wait_set_add_subscription>
 8016f8a:	2800      	cmp	r0, #0
 8016f8c:	d1ea      	bne.n	8016f64 <rcl_action_wait_set_add_action_client+0x84>
 8016f8e:	b11f      	cbz	r7, 8016f98 <rcl_action_wait_set_add_action_client+0xb8>
 8016f90:	6823      	ldr	r3, [r4, #0]
 8016f92:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8016f96:	603b      	str	r3, [r7, #0]
 8016f98:	2e00      	cmp	r6, #0
 8016f9a:	d0e3      	beq.n	8016f64 <rcl_action_wait_set_add_action_client+0x84>
 8016f9c:	6823      	ldr	r3, [r4, #0]
 8016f9e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8016fa2:	6033      	str	r3, [r6, #0]
 8016fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fa6:	bf00      	nop

08016fa8 <rcl_action_client_wait_set_get_entities_ready>:
 8016fa8:	2800      	cmp	r0, #0
 8016faa:	d050      	beq.n	801704e <rcl_action_client_wait_set_get_entities_ready+0xa6>
 8016fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016fb0:	460c      	mov	r4, r1
 8016fb2:	2900      	cmp	r1, #0
 8016fb4:	d03e      	beq.n	8017034 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8016fb6:	4605      	mov	r5, r0
 8016fb8:	6808      	ldr	r0, [r1, #0]
 8016fba:	2800      	cmp	r0, #0
 8016fbc:	d03a      	beq.n	8017034 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8016fbe:	4616      	mov	r6, r2
 8016fc0:	461f      	mov	r7, r3
 8016fc2:	f7fd fa79 	bl	80144b8 <rcl_client_is_valid>
 8016fc6:	2800      	cmp	r0, #0
 8016fc8:	d038      	beq.n	801703c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8016fca:	6820      	ldr	r0, [r4, #0]
 8016fcc:	3004      	adds	r0, #4
 8016fce:	f7fd fa73 	bl	80144b8 <rcl_client_is_valid>
 8016fd2:	2800      	cmp	r0, #0
 8016fd4:	d032      	beq.n	801703c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8016fd6:	6820      	ldr	r0, [r4, #0]
 8016fd8:	3008      	adds	r0, #8
 8016fda:	f7fd fa6d 	bl	80144b8 <rcl_client_is_valid>
 8016fde:	b368      	cbz	r0, 801703c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8016fe0:	6820      	ldr	r0, [r4, #0]
 8016fe2:	300c      	adds	r0, #12
 8016fe4:	f7fe fc1a 	bl	801581c <rcl_subscription_is_valid>
 8016fe8:	b340      	cbz	r0, 801703c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8016fea:	6820      	ldr	r0, [r4, #0]
 8016fec:	3010      	adds	r0, #16
 8016fee:	f7fe fc15 	bl	801581c <rcl_subscription_is_valid>
 8016ff2:	b318      	cbz	r0, 801703c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8016ff4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016ff8:	2a00      	cmp	r2, #0
 8016ffa:	bf18      	it	ne
 8016ffc:	2b00      	cmpne	r3, #0
 8016ffe:	9b08      	ldr	r3, [sp, #32]
 8017000:	bf0c      	ite	eq
 8017002:	2101      	moveq	r1, #1
 8017004:	2100      	movne	r1, #0
 8017006:	2b00      	cmp	r3, #0
 8017008:	bf08      	it	eq
 801700a:	f041 0101 	orreq.w	r1, r1, #1
 801700e:	2f00      	cmp	r7, #0
 8017010:	bf08      	it	eq
 8017012:	f041 0101 	orreq.w	r1, r1, #1
 8017016:	b9b9      	cbnz	r1, 8017048 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8017018:	b1b6      	cbz	r6, 8017048 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801701a:	6823      	ldr	r3, [r4, #0]
 801701c:	686c      	ldr	r4, [r5, #4]
 801701e:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 8017022:	428a      	cmp	r2, r1
 8017024:	4610      	mov	r0, r2
 8017026:	bf38      	it	cc
 8017028:	4608      	movcc	r0, r1
 801702a:	4284      	cmp	r4, r0
 801702c:	d812      	bhi.n	8017054 <rcl_action_client_wait_set_get_entities_ready+0xac>
 801702e:	2001      	movs	r0, #1
 8017030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017034:	f640 0036 	movw	r0, #2102	; 0x836
 8017038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801703c:	f7f6 fde8 	bl	800dc10 <rcutils_reset_error>
 8017040:	f640 0036 	movw	r0, #2102	; 0x836
 8017044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017048:	200b      	movs	r0, #11
 801704a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801704e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017052:	4770      	bx	lr
 8017054:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 8017058:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 801705c:	45f0      	cmp	r8, lr
 801705e:	4640      	mov	r0, r8
 8017060:	69ec      	ldr	r4, [r5, #28]
 8017062:	bf38      	it	cc
 8017064:	4670      	movcc	r0, lr
 8017066:	4560      	cmp	r0, ip
 8017068:	bf38      	it	cc
 801706a:	4660      	movcc	r0, ip
 801706c:	4284      	cmp	r4, r0
 801706e:	d9de      	bls.n	801702e <rcl_action_client_wait_set_get_entities_ready+0x86>
 8017070:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8017074:	682d      	ldr	r5, [r5, #0]
 8017076:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801707a:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801707e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8017082:	1a18      	subs	r0, r3, r0
 8017084:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8017088:	f103 0c0c 	add.w	ip, r3, #12
 801708c:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 8017090:	fab0 f080 	clz	r0, r0
 8017094:	eba5 050c 	sub.w	r5, r5, ip
 8017098:	0940      	lsrs	r0, r0, #5
 801709a:	fab5 f585 	clz	r5, r5
 801709e:	096d      	lsrs	r5, r5, #5
 80170a0:	7035      	strb	r5, [r6, #0]
 80170a2:	f103 0510 	add.w	r5, r3, #16
 80170a6:	1b64      	subs	r4, r4, r5
 80170a8:	9d08      	ldr	r5, [sp, #32]
 80170aa:	fab4 f484 	clz	r4, r4
 80170ae:	0964      	lsrs	r4, r4, #5
 80170b0:	703c      	strb	r4, [r7, #0]
 80170b2:	1d1c      	adds	r4, r3, #4
 80170b4:	3308      	adds	r3, #8
 80170b6:	7028      	strb	r0, [r5, #0]
 80170b8:	1b09      	subs	r1, r1, r4
 80170ba:	2000      	movs	r0, #0
 80170bc:	1ad3      	subs	r3, r2, r3
 80170be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80170c0:	fab1 f181 	clz	r1, r1
 80170c4:	fab3 f383 	clz	r3, r3
 80170c8:	0949      	lsrs	r1, r1, #5
 80170ca:	095b      	lsrs	r3, r3, #5
 80170cc:	7011      	strb	r1, [r2, #0]
 80170ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80170d0:	7013      	strb	r3, [r2, #0]
 80170d2:	e7b1      	b.n	8017038 <rcl_action_client_wait_set_get_entities_ready+0x90>

080170d4 <rcl_action_take_goal_request>:
 80170d4:	2800      	cmp	r0, #0
 80170d6:	d039      	beq.n	801714c <rcl_action_take_goal_request+0x78>
 80170d8:	b570      	push	{r4, r5, r6, lr}
 80170da:	4604      	mov	r4, r0
 80170dc:	6800      	ldr	r0, [r0, #0]
 80170de:	b380      	cbz	r0, 8017142 <rcl_action_take_goal_request+0x6e>
 80170e0:	460e      	mov	r6, r1
 80170e2:	4615      	mov	r5, r2
 80170e4:	f7fe f9b0 	bl	8015448 <rcl_service_is_valid>
 80170e8:	b330      	cbz	r0, 8017138 <rcl_action_take_goal_request+0x64>
 80170ea:	6820      	ldr	r0, [r4, #0]
 80170ec:	3004      	adds	r0, #4
 80170ee:	f7fe f9ab 	bl	8015448 <rcl_service_is_valid>
 80170f2:	b308      	cbz	r0, 8017138 <rcl_action_take_goal_request+0x64>
 80170f4:	6820      	ldr	r0, [r4, #0]
 80170f6:	3008      	adds	r0, #8
 80170f8:	f7fe f9a6 	bl	8015448 <rcl_service_is_valid>
 80170fc:	b1e0      	cbz	r0, 8017138 <rcl_action_take_goal_request+0x64>
 80170fe:	6820      	ldr	r0, [r4, #0]
 8017100:	300c      	adds	r0, #12
 8017102:	f7f5 fce9 	bl	800cad8 <rcl_publisher_is_valid>
 8017106:	b1b8      	cbz	r0, 8017138 <rcl_action_take_goal_request+0x64>
 8017108:	6820      	ldr	r0, [r4, #0]
 801710a:	3010      	adds	r0, #16
 801710c:	f7f5 fce4 	bl	800cad8 <rcl_publisher_is_valid>
 8017110:	b190      	cbz	r0, 8017138 <rcl_action_take_goal_request+0x64>
 8017112:	b1cd      	cbz	r5, 8017148 <rcl_action_take_goal_request+0x74>
 8017114:	b1c6      	cbz	r6, 8017148 <rcl_action_take_goal_request+0x74>
 8017116:	462a      	mov	r2, r5
 8017118:	4631      	mov	r1, r6
 801711a:	6820      	ldr	r0, [r4, #0]
 801711c:	f7fe f914 	bl	8015348 <rcl_take_request>
 8017120:	b148      	cbz	r0, 8017136 <rcl_action_take_goal_request+0x62>
 8017122:	280a      	cmp	r0, #10
 8017124:	d007      	beq.n	8017136 <rcl_action_take_goal_request+0x62>
 8017126:	f240 2259 	movw	r2, #601	; 0x259
 801712a:	f640 0399 	movw	r3, #2201	; 0x899
 801712e:	4290      	cmp	r0, r2
 8017130:	bf0c      	ite	eq
 8017132:	4618      	moveq	r0, r3
 8017134:	2001      	movne	r0, #1
 8017136:	bd70      	pop	{r4, r5, r6, pc}
 8017138:	f7f6 fd6a 	bl	800dc10 <rcutils_reset_error>
 801713c:	f640 0098 	movw	r0, #2200	; 0x898
 8017140:	bd70      	pop	{r4, r5, r6, pc}
 8017142:	f640 0098 	movw	r0, #2200	; 0x898
 8017146:	bd70      	pop	{r4, r5, r6, pc}
 8017148:	200b      	movs	r0, #11
 801714a:	bd70      	pop	{r4, r5, r6, pc}
 801714c:	f640 0098 	movw	r0, #2200	; 0x898
 8017150:	4770      	bx	lr
 8017152:	bf00      	nop

08017154 <rcl_action_send_goal_response>:
 8017154:	b388      	cbz	r0, 80171ba <rcl_action_send_goal_response+0x66>
 8017156:	b570      	push	{r4, r5, r6, lr}
 8017158:	4604      	mov	r4, r0
 801715a:	6800      	ldr	r0, [r0, #0]
 801715c:	b340      	cbz	r0, 80171b0 <rcl_action_send_goal_response+0x5c>
 801715e:	460e      	mov	r6, r1
 8017160:	4615      	mov	r5, r2
 8017162:	f7fe f971 	bl	8015448 <rcl_service_is_valid>
 8017166:	b1f0      	cbz	r0, 80171a6 <rcl_action_send_goal_response+0x52>
 8017168:	6820      	ldr	r0, [r4, #0]
 801716a:	3004      	adds	r0, #4
 801716c:	f7fe f96c 	bl	8015448 <rcl_service_is_valid>
 8017170:	b1c8      	cbz	r0, 80171a6 <rcl_action_send_goal_response+0x52>
 8017172:	6820      	ldr	r0, [r4, #0]
 8017174:	3008      	adds	r0, #8
 8017176:	f7fe f967 	bl	8015448 <rcl_service_is_valid>
 801717a:	b1a0      	cbz	r0, 80171a6 <rcl_action_send_goal_response+0x52>
 801717c:	6820      	ldr	r0, [r4, #0]
 801717e:	300c      	adds	r0, #12
 8017180:	f7f5 fcaa 	bl	800cad8 <rcl_publisher_is_valid>
 8017184:	b178      	cbz	r0, 80171a6 <rcl_action_send_goal_response+0x52>
 8017186:	6820      	ldr	r0, [r4, #0]
 8017188:	3010      	adds	r0, #16
 801718a:	f7f5 fca5 	bl	800cad8 <rcl_publisher_is_valid>
 801718e:	b150      	cbz	r0, 80171a6 <rcl_action_send_goal_response+0x52>
 8017190:	b18d      	cbz	r5, 80171b6 <rcl_action_send_goal_response+0x62>
 8017192:	b186      	cbz	r6, 80171b6 <rcl_action_send_goal_response+0x62>
 8017194:	462a      	mov	r2, r5
 8017196:	4631      	mov	r1, r6
 8017198:	6820      	ldr	r0, [r4, #0]
 801719a:	f7fe f925 	bl	80153e8 <rcl_send_response>
 801719e:	3800      	subs	r0, #0
 80171a0:	bf18      	it	ne
 80171a2:	2001      	movne	r0, #1
 80171a4:	bd70      	pop	{r4, r5, r6, pc}
 80171a6:	f7f6 fd33 	bl	800dc10 <rcutils_reset_error>
 80171aa:	f640 0098 	movw	r0, #2200	; 0x898
 80171ae:	bd70      	pop	{r4, r5, r6, pc}
 80171b0:	f640 0098 	movw	r0, #2200	; 0x898
 80171b4:	bd70      	pop	{r4, r5, r6, pc}
 80171b6:	200b      	movs	r0, #11
 80171b8:	bd70      	pop	{r4, r5, r6, pc}
 80171ba:	f640 0098 	movw	r0, #2200	; 0x898
 80171be:	4770      	bx	lr

080171c0 <rcl_action_take_result_request>:
 80171c0:	2800      	cmp	r0, #0
 80171c2:	d03a      	beq.n	801723a <rcl_action_take_result_request+0x7a>
 80171c4:	b570      	push	{r4, r5, r6, lr}
 80171c6:	4604      	mov	r4, r0
 80171c8:	6800      	ldr	r0, [r0, #0]
 80171ca:	b388      	cbz	r0, 8017230 <rcl_action_take_result_request+0x70>
 80171cc:	460e      	mov	r6, r1
 80171ce:	4615      	mov	r5, r2
 80171d0:	f7fe f93a 	bl	8015448 <rcl_service_is_valid>
 80171d4:	b338      	cbz	r0, 8017226 <rcl_action_take_result_request+0x66>
 80171d6:	6820      	ldr	r0, [r4, #0]
 80171d8:	3004      	adds	r0, #4
 80171da:	f7fe f935 	bl	8015448 <rcl_service_is_valid>
 80171de:	b310      	cbz	r0, 8017226 <rcl_action_take_result_request+0x66>
 80171e0:	6820      	ldr	r0, [r4, #0]
 80171e2:	3008      	adds	r0, #8
 80171e4:	f7fe f930 	bl	8015448 <rcl_service_is_valid>
 80171e8:	b1e8      	cbz	r0, 8017226 <rcl_action_take_result_request+0x66>
 80171ea:	6820      	ldr	r0, [r4, #0]
 80171ec:	300c      	adds	r0, #12
 80171ee:	f7f5 fc73 	bl	800cad8 <rcl_publisher_is_valid>
 80171f2:	b1c0      	cbz	r0, 8017226 <rcl_action_take_result_request+0x66>
 80171f4:	6820      	ldr	r0, [r4, #0]
 80171f6:	3010      	adds	r0, #16
 80171f8:	f7f5 fc6e 	bl	800cad8 <rcl_publisher_is_valid>
 80171fc:	b198      	cbz	r0, 8017226 <rcl_action_take_result_request+0x66>
 80171fe:	b1d5      	cbz	r5, 8017236 <rcl_action_take_result_request+0x76>
 8017200:	b1ce      	cbz	r6, 8017236 <rcl_action_take_result_request+0x76>
 8017202:	6820      	ldr	r0, [r4, #0]
 8017204:	462a      	mov	r2, r5
 8017206:	4631      	mov	r1, r6
 8017208:	3008      	adds	r0, #8
 801720a:	f7fe f89d 	bl	8015348 <rcl_take_request>
 801720e:	b148      	cbz	r0, 8017224 <rcl_action_take_result_request+0x64>
 8017210:	280a      	cmp	r0, #10
 8017212:	d007      	beq.n	8017224 <rcl_action_take_result_request+0x64>
 8017214:	f240 2259 	movw	r2, #601	; 0x259
 8017218:	f640 0399 	movw	r3, #2201	; 0x899
 801721c:	4290      	cmp	r0, r2
 801721e:	bf0c      	ite	eq
 8017220:	4618      	moveq	r0, r3
 8017222:	2001      	movne	r0, #1
 8017224:	bd70      	pop	{r4, r5, r6, pc}
 8017226:	f7f6 fcf3 	bl	800dc10 <rcutils_reset_error>
 801722a:	f640 0098 	movw	r0, #2200	; 0x898
 801722e:	bd70      	pop	{r4, r5, r6, pc}
 8017230:	f640 0098 	movw	r0, #2200	; 0x898
 8017234:	bd70      	pop	{r4, r5, r6, pc}
 8017236:	200b      	movs	r0, #11
 8017238:	bd70      	pop	{r4, r5, r6, pc}
 801723a:	f640 0098 	movw	r0, #2200	; 0x898
 801723e:	4770      	bx	lr

08017240 <rcl_action_take_cancel_request>:
 8017240:	2800      	cmp	r0, #0
 8017242:	d03a      	beq.n	80172ba <rcl_action_take_cancel_request+0x7a>
 8017244:	b570      	push	{r4, r5, r6, lr}
 8017246:	4604      	mov	r4, r0
 8017248:	6800      	ldr	r0, [r0, #0]
 801724a:	b388      	cbz	r0, 80172b0 <rcl_action_take_cancel_request+0x70>
 801724c:	460e      	mov	r6, r1
 801724e:	4615      	mov	r5, r2
 8017250:	f7fe f8fa 	bl	8015448 <rcl_service_is_valid>
 8017254:	b338      	cbz	r0, 80172a6 <rcl_action_take_cancel_request+0x66>
 8017256:	6820      	ldr	r0, [r4, #0]
 8017258:	3004      	adds	r0, #4
 801725a:	f7fe f8f5 	bl	8015448 <rcl_service_is_valid>
 801725e:	b310      	cbz	r0, 80172a6 <rcl_action_take_cancel_request+0x66>
 8017260:	6820      	ldr	r0, [r4, #0]
 8017262:	3008      	adds	r0, #8
 8017264:	f7fe f8f0 	bl	8015448 <rcl_service_is_valid>
 8017268:	b1e8      	cbz	r0, 80172a6 <rcl_action_take_cancel_request+0x66>
 801726a:	6820      	ldr	r0, [r4, #0]
 801726c:	300c      	adds	r0, #12
 801726e:	f7f5 fc33 	bl	800cad8 <rcl_publisher_is_valid>
 8017272:	b1c0      	cbz	r0, 80172a6 <rcl_action_take_cancel_request+0x66>
 8017274:	6820      	ldr	r0, [r4, #0]
 8017276:	3010      	adds	r0, #16
 8017278:	f7f5 fc2e 	bl	800cad8 <rcl_publisher_is_valid>
 801727c:	b198      	cbz	r0, 80172a6 <rcl_action_take_cancel_request+0x66>
 801727e:	b1d5      	cbz	r5, 80172b6 <rcl_action_take_cancel_request+0x76>
 8017280:	b1ce      	cbz	r6, 80172b6 <rcl_action_take_cancel_request+0x76>
 8017282:	6820      	ldr	r0, [r4, #0]
 8017284:	462a      	mov	r2, r5
 8017286:	4631      	mov	r1, r6
 8017288:	3004      	adds	r0, #4
 801728a:	f7fe f85d 	bl	8015348 <rcl_take_request>
 801728e:	b148      	cbz	r0, 80172a4 <rcl_action_take_cancel_request+0x64>
 8017290:	280a      	cmp	r0, #10
 8017292:	d007      	beq.n	80172a4 <rcl_action_take_cancel_request+0x64>
 8017294:	f240 2259 	movw	r2, #601	; 0x259
 8017298:	f640 0399 	movw	r3, #2201	; 0x899
 801729c:	4290      	cmp	r0, r2
 801729e:	bf0c      	ite	eq
 80172a0:	4618      	moveq	r0, r3
 80172a2:	2001      	movne	r0, #1
 80172a4:	bd70      	pop	{r4, r5, r6, pc}
 80172a6:	f7f6 fcb3 	bl	800dc10 <rcutils_reset_error>
 80172aa:	f640 0098 	movw	r0, #2200	; 0x898
 80172ae:	bd70      	pop	{r4, r5, r6, pc}
 80172b0:	f640 0098 	movw	r0, #2200	; 0x898
 80172b4:	bd70      	pop	{r4, r5, r6, pc}
 80172b6:	200b      	movs	r0, #11
 80172b8:	bd70      	pop	{r4, r5, r6, pc}
 80172ba:	f640 0098 	movw	r0, #2200	; 0x898
 80172be:	4770      	bx	lr

080172c0 <rcl_action_send_cancel_response>:
 80172c0:	b390      	cbz	r0, 8017328 <rcl_action_send_cancel_response+0x68>
 80172c2:	b570      	push	{r4, r5, r6, lr}
 80172c4:	4604      	mov	r4, r0
 80172c6:	6800      	ldr	r0, [r0, #0]
 80172c8:	b348      	cbz	r0, 801731e <rcl_action_send_cancel_response+0x5e>
 80172ca:	460e      	mov	r6, r1
 80172cc:	4615      	mov	r5, r2
 80172ce:	f7fe f8bb 	bl	8015448 <rcl_service_is_valid>
 80172d2:	b1f8      	cbz	r0, 8017314 <rcl_action_send_cancel_response+0x54>
 80172d4:	6820      	ldr	r0, [r4, #0]
 80172d6:	3004      	adds	r0, #4
 80172d8:	f7fe f8b6 	bl	8015448 <rcl_service_is_valid>
 80172dc:	b1d0      	cbz	r0, 8017314 <rcl_action_send_cancel_response+0x54>
 80172de:	6820      	ldr	r0, [r4, #0]
 80172e0:	3008      	adds	r0, #8
 80172e2:	f7fe f8b1 	bl	8015448 <rcl_service_is_valid>
 80172e6:	b1a8      	cbz	r0, 8017314 <rcl_action_send_cancel_response+0x54>
 80172e8:	6820      	ldr	r0, [r4, #0]
 80172ea:	300c      	adds	r0, #12
 80172ec:	f7f5 fbf4 	bl	800cad8 <rcl_publisher_is_valid>
 80172f0:	b180      	cbz	r0, 8017314 <rcl_action_send_cancel_response+0x54>
 80172f2:	6820      	ldr	r0, [r4, #0]
 80172f4:	3010      	adds	r0, #16
 80172f6:	f7f5 fbef 	bl	800cad8 <rcl_publisher_is_valid>
 80172fa:	b158      	cbz	r0, 8017314 <rcl_action_send_cancel_response+0x54>
 80172fc:	b195      	cbz	r5, 8017324 <rcl_action_send_cancel_response+0x64>
 80172fe:	b18e      	cbz	r6, 8017324 <rcl_action_send_cancel_response+0x64>
 8017300:	6820      	ldr	r0, [r4, #0]
 8017302:	462a      	mov	r2, r5
 8017304:	4631      	mov	r1, r6
 8017306:	3004      	adds	r0, #4
 8017308:	f7fe f86e 	bl	80153e8 <rcl_send_response>
 801730c:	3800      	subs	r0, #0
 801730e:	bf18      	it	ne
 8017310:	2001      	movne	r0, #1
 8017312:	bd70      	pop	{r4, r5, r6, pc}
 8017314:	f7f6 fc7c 	bl	800dc10 <rcutils_reset_error>
 8017318:	f640 0098 	movw	r0, #2200	; 0x898
 801731c:	bd70      	pop	{r4, r5, r6, pc}
 801731e:	f640 0098 	movw	r0, #2200	; 0x898
 8017322:	bd70      	pop	{r4, r5, r6, pc}
 8017324:	200b      	movs	r0, #11
 8017326:	bd70      	pop	{r4, r5, r6, pc}
 8017328:	f640 0098 	movw	r0, #2200	; 0x898
 801732c:	4770      	bx	lr
 801732e:	bf00      	nop

08017330 <rcl_action_wait_set_add_action_server>:
 8017330:	2800      	cmp	r0, #0
 8017332:	d04d      	beq.n	80173d0 <rcl_action_wait_set_add_action_server+0xa0>
 8017334:	b570      	push	{r4, r5, r6, lr}
 8017336:	460c      	mov	r4, r1
 8017338:	b159      	cbz	r1, 8017352 <rcl_action_wait_set_add_action_server+0x22>
 801733a:	4605      	mov	r5, r0
 801733c:	6808      	ldr	r0, [r1, #0]
 801733e:	b140      	cbz	r0, 8017352 <rcl_action_wait_set_add_action_server+0x22>
 8017340:	4616      	mov	r6, r2
 8017342:	f7fe f881 	bl	8015448 <rcl_service_is_valid>
 8017346:	b120      	cbz	r0, 8017352 <rcl_action_wait_set_add_action_server+0x22>
 8017348:	6820      	ldr	r0, [r4, #0]
 801734a:	3004      	adds	r0, #4
 801734c:	f7fe f87c 	bl	8015448 <rcl_service_is_valid>
 8017350:	b910      	cbnz	r0, 8017358 <rcl_action_wait_set_add_action_server+0x28>
 8017352:	f640 0098 	movw	r0, #2200	; 0x898
 8017356:	bd70      	pop	{r4, r5, r6, pc}
 8017358:	6820      	ldr	r0, [r4, #0]
 801735a:	3008      	adds	r0, #8
 801735c:	f7fe f874 	bl	8015448 <rcl_service_is_valid>
 8017360:	2800      	cmp	r0, #0
 8017362:	d0f6      	beq.n	8017352 <rcl_action_wait_set_add_action_server+0x22>
 8017364:	6820      	ldr	r0, [r4, #0]
 8017366:	300c      	adds	r0, #12
 8017368:	f7f5 fbce 	bl	800cb08 <rcl_publisher_is_valid_except_context>
 801736c:	2800      	cmp	r0, #0
 801736e:	d0f0      	beq.n	8017352 <rcl_action_wait_set_add_action_server+0x22>
 8017370:	6820      	ldr	r0, [r4, #0]
 8017372:	3010      	adds	r0, #16
 8017374:	f7f5 fbc8 	bl	800cb08 <rcl_publisher_is_valid_except_context>
 8017378:	2800      	cmp	r0, #0
 801737a:	d0ea      	beq.n	8017352 <rcl_action_wait_set_add_action_server+0x22>
 801737c:	6821      	ldr	r1, [r4, #0]
 801737e:	4628      	mov	r0, r5
 8017380:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 8017384:	f7ff fad4 	bl	8016930 <rcl_wait_set_add_service>
 8017388:	2800      	cmp	r0, #0
 801738a:	d1e4      	bne.n	8017356 <rcl_action_wait_set_add_action_server+0x26>
 801738c:	6821      	ldr	r1, [r4, #0]
 801738e:	4628      	mov	r0, r5
 8017390:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 8017394:	3104      	adds	r1, #4
 8017396:	f7ff facb 	bl	8016930 <rcl_wait_set_add_service>
 801739a:	2800      	cmp	r0, #0
 801739c:	d1db      	bne.n	8017356 <rcl_action_wait_set_add_action_server+0x26>
 801739e:	6821      	ldr	r1, [r4, #0]
 80173a0:	4628      	mov	r0, r5
 80173a2:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 80173a6:	3108      	adds	r1, #8
 80173a8:	f7ff fac2 	bl	8016930 <rcl_wait_set_add_service>
 80173ac:	2800      	cmp	r0, #0
 80173ae:	d1d2      	bne.n	8017356 <rcl_action_wait_set_add_action_server+0x26>
 80173b0:	6821      	ldr	r1, [r4, #0]
 80173b2:	4628      	mov	r0, r5
 80173b4:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 80173b8:	3114      	adds	r1, #20
 80173ba:	f7ff fa5d 	bl	8016878 <rcl_wait_set_add_timer>
 80173be:	2800      	cmp	r0, #0
 80173c0:	d1c9      	bne.n	8017356 <rcl_action_wait_set_add_action_server+0x26>
 80173c2:	2e00      	cmp	r6, #0
 80173c4:	d0c7      	beq.n	8017356 <rcl_action_wait_set_add_action_server+0x26>
 80173c6:	6823      	ldr	r3, [r4, #0]
 80173c8:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80173cc:	6033      	str	r3, [r6, #0]
 80173ce:	bd70      	pop	{r4, r5, r6, pc}
 80173d0:	f44f 7061 	mov.w	r0, #900	; 0x384
 80173d4:	4770      	bx	lr
 80173d6:	bf00      	nop

080173d8 <rcl_action_server_wait_set_get_entities_ready>:
 80173d8:	2800      	cmp	r0, #0
 80173da:	d067      	beq.n	80174ac <rcl_action_server_wait_set_get_entities_ready+0xd4>
 80173dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173e0:	460c      	mov	r4, r1
 80173e2:	b161      	cbz	r1, 80173fe <rcl_action_server_wait_set_get_entities_ready+0x26>
 80173e4:	4605      	mov	r5, r0
 80173e6:	6808      	ldr	r0, [r1, #0]
 80173e8:	b148      	cbz	r0, 80173fe <rcl_action_server_wait_set_get_entities_ready+0x26>
 80173ea:	4616      	mov	r6, r2
 80173ec:	4698      	mov	r8, r3
 80173ee:	f7fe f82b 	bl	8015448 <rcl_service_is_valid>
 80173f2:	b120      	cbz	r0, 80173fe <rcl_action_server_wait_set_get_entities_ready+0x26>
 80173f4:	6820      	ldr	r0, [r4, #0]
 80173f6:	3004      	adds	r0, #4
 80173f8:	f7fe f826 	bl	8015448 <rcl_service_is_valid>
 80173fc:	b918      	cbnz	r0, 8017406 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 80173fe:	f640 0098 	movw	r0, #2200	; 0x898
 8017402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017406:	6820      	ldr	r0, [r4, #0]
 8017408:	3008      	adds	r0, #8
 801740a:	f7fe f81d 	bl	8015448 <rcl_service_is_valid>
 801740e:	2800      	cmp	r0, #0
 8017410:	d0f5      	beq.n	80173fe <rcl_action_server_wait_set_get_entities_ready+0x26>
 8017412:	6820      	ldr	r0, [r4, #0]
 8017414:	300c      	adds	r0, #12
 8017416:	f7f5 fb77 	bl	800cb08 <rcl_publisher_is_valid_except_context>
 801741a:	2800      	cmp	r0, #0
 801741c:	d0ef      	beq.n	80173fe <rcl_action_server_wait_set_get_entities_ready+0x26>
 801741e:	6820      	ldr	r0, [r4, #0]
 8017420:	3010      	adds	r0, #16
 8017422:	f7f5 fb71 	bl	800cb08 <rcl_publisher_is_valid_except_context>
 8017426:	2800      	cmp	r0, #0
 8017428:	d0e9      	beq.n	80173fe <rcl_action_server_wait_set_get_entities_ready+0x26>
 801742a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801742e:	2a00      	cmp	r2, #0
 8017430:	bf18      	it	ne
 8017432:	2b00      	cmpne	r3, #0
 8017434:	bf0c      	ite	eq
 8017436:	2101      	moveq	r1, #1
 8017438:	2100      	movne	r1, #0
 801743a:	f1b8 0f00 	cmp.w	r8, #0
 801743e:	bf08      	it	eq
 8017440:	f041 0101 	orreq.w	r1, r1, #1
 8017444:	bba9      	cbnz	r1, 80174b2 <rcl_action_server_wait_set_get_entities_ready+0xda>
 8017446:	b3a6      	cbz	r6, 80174b2 <rcl_action_server_wait_set_get_entities_ready+0xda>
 8017448:	6821      	ldr	r1, [r4, #0]
 801744a:	2000      	movs	r0, #0
 801744c:	692c      	ldr	r4, [r5, #16]
 801744e:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 8017452:	6a2f      	ldr	r7, [r5, #32]
 8017454:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017458:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 801745c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 8017460:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 8017464:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 8017468:	1a64      	subs	r4, r4, r1
 801746a:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 801746e:	fab4 f484 	clz	r4, r4
 8017472:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8017476:	0964      	lsrs	r4, r4, #5
 8017478:	7034      	strb	r4, [r6, #0]
 801747a:	1d0c      	adds	r4, r1, #4
 801747c:	1b2c      	subs	r4, r5, r4
 801747e:	fab4 f484 	clz	r4, r4
 8017482:	0964      	lsrs	r4, r4, #5
 8017484:	f888 4000 	strb.w	r4, [r8]
 8017488:	f101 0408 	add.w	r4, r1, #8
 801748c:	1b1b      	subs	r3, r3, r4
 801748e:	9c06      	ldr	r4, [sp, #24]
 8017490:	fab3 f383 	clz	r3, r3
 8017494:	095b      	lsrs	r3, r3, #5
 8017496:	7023      	strb	r3, [r4, #0]
 8017498:	f101 0314 	add.w	r3, r1, #20
 801749c:	1ad3      	subs	r3, r2, r3
 801749e:	9a07      	ldr	r2, [sp, #28]
 80174a0:	fab3 f383 	clz	r3, r3
 80174a4:	095b      	lsrs	r3, r3, #5
 80174a6:	7013      	strb	r3, [r2, #0]
 80174a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174ac:	f44f 7061 	mov.w	r0, #900	; 0x384
 80174b0:	4770      	bx	lr
 80174b2:	200b      	movs	r0, #11
 80174b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080174b8 <_execute_event_handler>:
 80174b8:	2002      	movs	r0, #2
 80174ba:	4770      	bx	lr

080174bc <_cancel_goal_event_handler>:
 80174bc:	2003      	movs	r0, #3
 80174be:	4770      	bx	lr

080174c0 <_succeed_event_handler>:
 80174c0:	2004      	movs	r0, #4
 80174c2:	4770      	bx	lr

080174c4 <_abort_event_handler>:
 80174c4:	2006      	movs	r0, #6
 80174c6:	4770      	bx	lr

080174c8 <_canceled_event_handler>:
 80174c8:	2005      	movs	r0, #5
 80174ca:	4770      	bx	lr

080174cc <rcl_action_transition_goal_state>:
 80174cc:	b2c2      	uxtb	r2, r0
 80174ce:	2a06      	cmp	r2, #6
 80174d0:	d810      	bhi.n	80174f4 <rcl_action_transition_goal_state+0x28>
 80174d2:	2904      	cmp	r1, #4
 80174d4:	d80e      	bhi.n	80174f4 <rcl_action_transition_goal_state+0x28>
 80174d6:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80174da:	b410      	push	{r4}
 80174dc:	1853      	adds	r3, r2, r1
 80174de:	4c06      	ldr	r4, [pc, #24]	; (80174f8 <rcl_action_transition_goal_state+0x2c>)
 80174e0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80174e4:	b113      	cbz	r3, 80174ec <rcl_action_transition_goal_state+0x20>
 80174e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80174ea:	4718      	bx	r3
 80174ec:	2000      	movs	r0, #0
 80174ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80174f2:	4770      	bx	lr
 80174f4:	2000      	movs	r0, #0
 80174f6:	4770      	bx	lr
 80174f8:	0801ebb8 	.word	0x0801ebb8

080174fc <rcl_action_get_zero_initialized_cancel_response>:
 80174fc:	b510      	push	{r4, lr}
 80174fe:	4c07      	ldr	r4, [pc, #28]	; (801751c <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8017500:	4686      	mov	lr, r0
 8017502:	4684      	mov	ip, r0
 8017504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017506:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801750a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801750c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017510:	6823      	ldr	r3, [r4, #0]
 8017512:	4670      	mov	r0, lr
 8017514:	f8cc 3000 	str.w	r3, [ip]
 8017518:	bd10      	pop	{r4, pc}
 801751a:	bf00      	nop
 801751c:	0801ec44 	.word	0x0801ec44

08017520 <rclc_action_send_result_request>:
 8017520:	b1d0      	cbz	r0, 8017558 <rclc_action_send_result_request+0x38>
 8017522:	4684      	mov	ip, r0
 8017524:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8017528:	b500      	push	{lr}
 801752a:	b087      	sub	sp, #28
 801752c:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8017530:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8017534:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8017538:	f10d 0e08 	add.w	lr, sp, #8
 801753c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017540:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8017544:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 8017548:	a902      	add	r1, sp, #8
 801754a:	3010      	adds	r0, #16
 801754c:	f7ff fbcc 	bl	8016ce8 <rcl_action_send_result_request>
 8017550:	b920      	cbnz	r0, 801755c <rclc_action_send_result_request+0x3c>
 8017552:	b007      	add	sp, #28
 8017554:	f85d fb04 	ldr.w	pc, [sp], #4
 8017558:	200b      	movs	r0, #11
 801755a:	4770      	bx	lr
 801755c:	9001      	str	r0, [sp, #4]
 801755e:	f7f6 fb57 	bl	800dc10 <rcutils_reset_error>
 8017562:	9801      	ldr	r0, [sp, #4]
 8017564:	b007      	add	sp, #28
 8017566:	f85d fb04 	ldr.w	pc, [sp], #4
 801756a:	bf00      	nop

0801756c <rclc_action_take_goal_handle>:
 801756c:	b160      	cbz	r0, 8017588 <rclc_action_take_goal_handle+0x1c>
 801756e:	6883      	ldr	r3, [r0, #8]
 8017570:	b143      	cbz	r3, 8017584 <rclc_action_take_goal_handle+0x18>
 8017572:	6819      	ldr	r1, [r3, #0]
 8017574:	2200      	movs	r2, #0
 8017576:	6081      	str	r1, [r0, #8]
 8017578:	721a      	strb	r2, [r3, #8]
 801757a:	68c1      	ldr	r1, [r0, #12]
 801757c:	621a      	str	r2, [r3, #32]
 801757e:	849a      	strh	r2, [r3, #36]	; 0x24
 8017580:	6019      	str	r1, [r3, #0]
 8017582:	60c3      	str	r3, [r0, #12]
 8017584:	4618      	mov	r0, r3
 8017586:	4770      	bx	lr
 8017588:	4603      	mov	r3, r0
 801758a:	e7fb      	b.n	8017584 <rclc_action_take_goal_handle+0x18>

0801758c <rclc_action_remove_used_goal_handle>:
 801758c:	b180      	cbz	r0, 80175b0 <rclc_action_remove_used_goal_handle+0x24>
 801758e:	b179      	cbz	r1, 80175b0 <rclc_action_remove_used_goal_handle+0x24>
 8017590:	68c3      	ldr	r3, [r0, #12]
 8017592:	4299      	cmp	r1, r3
 8017594:	d00d      	beq.n	80175b2 <rclc_action_remove_used_goal_handle+0x26>
 8017596:	b12b      	cbz	r3, 80175a4 <rclc_action_remove_used_goal_handle+0x18>
 8017598:	681a      	ldr	r2, [r3, #0]
 801759a:	4291      	cmp	r1, r2
 801759c:	d003      	beq.n	80175a6 <rclc_action_remove_used_goal_handle+0x1a>
 801759e:	4613      	mov	r3, r2
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d1f9      	bne.n	8017598 <rclc_action_remove_used_goal_handle+0xc>
 80175a4:	4770      	bx	lr
 80175a6:	680a      	ldr	r2, [r1, #0]
 80175a8:	601a      	str	r2, [r3, #0]
 80175aa:	6883      	ldr	r3, [r0, #8]
 80175ac:	600b      	str	r3, [r1, #0]
 80175ae:	6081      	str	r1, [r0, #8]
 80175b0:	4770      	bx	lr
 80175b2:	680b      	ldr	r3, [r1, #0]
 80175b4:	60c3      	str	r3, [r0, #12]
 80175b6:	e7f8      	b.n	80175aa <rclc_action_remove_used_goal_handle+0x1e>

080175b8 <rclc_action_find_goal_handle_by_uuid>:
 80175b8:	b538      	push	{r3, r4, r5, lr}
 80175ba:	b181      	cbz	r1, 80175de <rclc_action_find_goal_handle_by_uuid+0x26>
 80175bc:	b178      	cbz	r0, 80175de <rclc_action_find_goal_handle_by_uuid+0x26>
 80175be:	68c4      	ldr	r4, [r0, #12]
 80175c0:	460d      	mov	r5, r1
 80175c2:	b914      	cbnz	r4, 80175ca <rclc_action_find_goal_handle_by_uuid+0x12>
 80175c4:	e009      	b.n	80175da <rclc_action_find_goal_handle_by_uuid+0x22>
 80175c6:	6824      	ldr	r4, [r4, #0]
 80175c8:	b13c      	cbz	r4, 80175da <rclc_action_find_goal_handle_by_uuid+0x22>
 80175ca:	f104 0009 	add.w	r0, r4, #9
 80175ce:	2210      	movs	r2, #16
 80175d0:	4629      	mov	r1, r5
 80175d2:	f005 f845 	bl	801c660 <memcmp>
 80175d6:	2800      	cmp	r0, #0
 80175d8:	d1f5      	bne.n	80175c6 <rclc_action_find_goal_handle_by_uuid+0xe>
 80175da:	4620      	mov	r0, r4
 80175dc:	bd38      	pop	{r3, r4, r5, pc}
 80175de:	2400      	movs	r4, #0
 80175e0:	4620      	mov	r0, r4
 80175e2:	bd38      	pop	{r3, r4, r5, pc}

080175e4 <rclc_action_find_first_handle_by_status>:
 80175e4:	b140      	cbz	r0, 80175f8 <rclc_action_find_first_handle_by_status+0x14>
 80175e6:	68c0      	ldr	r0, [r0, #12]
 80175e8:	b910      	cbnz	r0, 80175f0 <rclc_action_find_first_handle_by_status+0xc>
 80175ea:	e005      	b.n	80175f8 <rclc_action_find_first_handle_by_status+0x14>
 80175ec:	6800      	ldr	r0, [r0, #0]
 80175ee:	b118      	cbz	r0, 80175f8 <rclc_action_find_first_handle_by_status+0x14>
 80175f0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80175f4:	428b      	cmp	r3, r1
 80175f6:	d1f9      	bne.n	80175ec <rclc_action_find_first_handle_by_status+0x8>
 80175f8:	4770      	bx	lr
 80175fa:	bf00      	nop

080175fc <rclc_action_find_first_terminated_handle>:
 80175fc:	b140      	cbz	r0, 8017610 <rclc_action_find_first_terminated_handle+0x14>
 80175fe:	68c0      	ldr	r0, [r0, #12]
 8017600:	b910      	cbnz	r0, 8017608 <rclc_action_find_first_terminated_handle+0xc>
 8017602:	e005      	b.n	8017610 <rclc_action_find_first_terminated_handle+0x14>
 8017604:	6800      	ldr	r0, [r0, #0]
 8017606:	b118      	cbz	r0, 8017610 <rclc_action_find_first_terminated_handle+0x14>
 8017608:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801760c:	2b03      	cmp	r3, #3
 801760e:	ddf9      	ble.n	8017604 <rclc_action_find_first_terminated_handle+0x8>
 8017610:	4770      	bx	lr
 8017612:	bf00      	nop

08017614 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8017614:	b170      	cbz	r0, 8017634 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8017616:	68c0      	ldr	r0, [r0, #12]
 8017618:	b160      	cbz	r0, 8017634 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801761a:	b410      	push	{r4}
 801761c:	e001      	b.n	8017622 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801761e:	6800      	ldr	r0, [r0, #0]
 8017620:	b128      	cbz	r0, 801762e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8017622:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 8017626:	4299      	cmp	r1, r3
 8017628:	bf08      	it	eq
 801762a:	4294      	cmpeq	r4, r2
 801762c:	d1f7      	bne.n	801761e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 801762e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017632:	4770      	bx	lr
 8017634:	4770      	bx	lr
 8017636:	bf00      	nop

08017638 <rclc_action_find_handle_by_result_request_sequence_number>:
 8017638:	b170      	cbz	r0, 8017658 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801763a:	68c0      	ldr	r0, [r0, #12]
 801763c:	b160      	cbz	r0, 8017658 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801763e:	b410      	push	{r4}
 8017640:	e001      	b.n	8017646 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8017642:	6800      	ldr	r0, [r0, #0]
 8017644:	b128      	cbz	r0, 8017652 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8017646:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 801764a:	4299      	cmp	r1, r3
 801764c:	bf08      	it	eq
 801764e:	4294      	cmpeq	r4, r2
 8017650:	d1f7      	bne.n	8017642 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8017652:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017656:	4770      	bx	lr
 8017658:	4770      	bx	lr
 801765a:	bf00      	nop

0801765c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 801765c:	b170      	cbz	r0, 801767c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801765e:	68c0      	ldr	r0, [r0, #12]
 8017660:	b160      	cbz	r0, 801767c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8017662:	b410      	push	{r4}
 8017664:	e001      	b.n	801766a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8017666:	6800      	ldr	r0, [r0, #0]
 8017668:	b128      	cbz	r0, 8017676 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 801766a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 801766e:	4299      	cmp	r1, r3
 8017670:	bf08      	it	eq
 8017672:	4294      	cmpeq	r4, r2
 8017674:	d1f7      	bne.n	8017666 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8017676:	f85d 4b04 	ldr.w	r4, [sp], #4
 801767a:	4770      	bx	lr
 801767c:	4770      	bx	lr
 801767e:	bf00      	nop

08017680 <rclc_action_find_first_handle_with_goal_response>:
 8017680:	b140      	cbz	r0, 8017694 <rclc_action_find_first_handle_with_goal_response+0x14>
 8017682:	68c0      	ldr	r0, [r0, #12]
 8017684:	b910      	cbnz	r0, 801768c <rclc_action_find_first_handle_with_goal_response+0xc>
 8017686:	e005      	b.n	8017694 <rclc_action_find_first_handle_with_goal_response+0x14>
 8017688:	6800      	ldr	r0, [r0, #0]
 801768a:	b118      	cbz	r0, 8017694 <rclc_action_find_first_handle_with_goal_response+0x14>
 801768c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8017690:	2b00      	cmp	r3, #0
 8017692:	d0f9      	beq.n	8017688 <rclc_action_find_first_handle_with_goal_response+0x8>
 8017694:	4770      	bx	lr
 8017696:	bf00      	nop

08017698 <rclc_action_find_first_handle_with_result_response>:
 8017698:	b140      	cbz	r0, 80176ac <rclc_action_find_first_handle_with_result_response+0x14>
 801769a:	68c0      	ldr	r0, [r0, #12]
 801769c:	b910      	cbnz	r0, 80176a4 <rclc_action_find_first_handle_with_result_response+0xc>
 801769e:	e005      	b.n	80176ac <rclc_action_find_first_handle_with_result_response+0x14>
 80176a0:	6800      	ldr	r0, [r0, #0]
 80176a2:	b118      	cbz	r0, 80176ac <rclc_action_find_first_handle_with_result_response+0x14>
 80176a4:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d0f9      	beq.n	80176a0 <rclc_action_find_first_handle_with_result_response+0x8>
 80176ac:	4770      	bx	lr
 80176ae:	bf00      	nop

080176b0 <rclc_action_server_response_goal_request>:
 80176b0:	b198      	cbz	r0, 80176da <rclc_action_server_response_goal_request+0x2a>
 80176b2:	2200      	movs	r2, #0
 80176b4:	460b      	mov	r3, r1
 80176b6:	f100 0128 	add.w	r1, r0, #40	; 0x28
 80176ba:	b510      	push	{r4, lr}
 80176bc:	6844      	ldr	r4, [r0, #4]
 80176be:	b086      	sub	sp, #24
 80176c0:	f104 0010 	add.w	r0, r4, #16
 80176c4:	9205      	str	r2, [sp, #20]
 80176c6:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80176ca:	aa03      	add	r2, sp, #12
 80176cc:	f88d 300c 	strb.w	r3, [sp, #12]
 80176d0:	f7ff fd40 	bl	8017154 <rcl_action_send_goal_response>
 80176d4:	b918      	cbnz	r0, 80176de <rclc_action_server_response_goal_request+0x2e>
 80176d6:	b006      	add	sp, #24
 80176d8:	bd10      	pop	{r4, pc}
 80176da:	200b      	movs	r0, #11
 80176dc:	4770      	bx	lr
 80176de:	9001      	str	r0, [sp, #4]
 80176e0:	f7f6 fa96 	bl	800dc10 <rcutils_reset_error>
 80176e4:	9801      	ldr	r0, [sp, #4]
 80176e6:	b006      	add	sp, #24
 80176e8:	bd10      	pop	{r4, pc}
 80176ea:	bf00      	nop
 80176ec:	0000      	movs	r0, r0
	...

080176f0 <rclc_action_server_goal_cancel_accept>:
 80176f0:	b310      	cbz	r0, 8017738 <rclc_action_server_goal_cancel_accept+0x48>
 80176f2:	b510      	push	{r4, lr}
 80176f4:	b090      	sub	sp, #64	; 0x40
 80176f6:	4604      	mov	r4, r0
 80176f8:	a806      	add	r0, sp, #24
 80176fa:	f7ff feff 	bl	80174fc <rcl_action_get_zero_initialized_cancel_response>
 80176fe:	2300      	movs	r3, #0
 8017700:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8017704:	46ec      	mov	ip, sp
 8017706:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801770a:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801770e:	f88d 3018 	strb.w	r3, [sp, #24]
 8017712:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8017716:	f8cd d01c 	str.w	sp, [sp, #28]
 801771a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801771e:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8017740 <rclc_action_server_goal_cancel_accept+0x50>
 8017722:	6860      	ldr	r0, [r4, #4]
 8017724:	aa06      	add	r2, sp, #24
 8017726:	f104 0158 	add.w	r1, r4, #88	; 0x58
 801772a:	3010      	adds	r0, #16
 801772c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017730:	f7ff fdc6 	bl	80172c0 <rcl_action_send_cancel_response>
 8017734:	b010      	add	sp, #64	; 0x40
 8017736:	bd10      	pop	{r4, pc}
 8017738:	200b      	movs	r0, #11
 801773a:	4770      	bx	lr
 801773c:	f3af 8000 	nop.w
 8017740:	00000001 	.word	0x00000001
 8017744:	00000001 	.word	0x00000001

08017748 <rclc_action_server_goal_cancel_reject>:
 8017748:	b082      	sub	sp, #8
 801774a:	b530      	push	{r4, r5, lr}
 801774c:	b08b      	sub	sp, #44	; 0x2c
 801774e:	ac0e      	add	r4, sp, #56	; 0x38
 8017750:	e884 000c 	stmia.w	r4, {r2, r3}
 8017754:	b188      	cbz	r0, 801777a <rclc_action_server_goal_cancel_reject+0x32>
 8017756:	4604      	mov	r4, r0
 8017758:	a801      	add	r0, sp, #4
 801775a:	460d      	mov	r5, r1
 801775c:	f7ff fece 	bl	80174fc <rcl_action_get_zero_initialized_cancel_response>
 8017760:	aa01      	add	r2, sp, #4
 8017762:	a90e      	add	r1, sp, #56	; 0x38
 8017764:	f104 0010 	add.w	r0, r4, #16
 8017768:	f88d 5004 	strb.w	r5, [sp, #4]
 801776c:	f7ff fda8 	bl	80172c0 <rcl_action_send_cancel_response>
 8017770:	b00b      	add	sp, #44	; 0x2c
 8017772:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017776:	b002      	add	sp, #8
 8017778:	4770      	bx	lr
 801777a:	200b      	movs	r0, #11
 801777c:	b00b      	add	sp, #44	; 0x2c
 801777e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017782:	b002      	add	sp, #8
 8017784:	4770      	bx	lr
 8017786:	bf00      	nop

08017788 <__atomic_load_8>:
 8017788:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801778c:	4a16      	ldr	r2, [pc, #88]	; (80177e8 <__atomic_load_8+0x60>)
 801778e:	4b17      	ldr	r3, [pc, #92]	; (80177ec <__atomic_load_8+0x64>)
 8017790:	f04f 0c01 	mov.w	ip, #1
 8017794:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8017798:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801779c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80177a0:	fb02 f101 	mul.w	r1, r2, r1
 80177a4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80177a8:	fba3 2301 	umull	r2, r3, r3, r1
 80177ac:	091b      	lsrs	r3, r3, #4
 80177ae:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80177b2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80177b6:	b4d0      	push	{r4, r6, r7}
 80177b8:	1ac9      	subs	r1, r1, r3
 80177ba:	4c0d      	ldr	r4, [pc, #52]	; (80177f0 <__atomic_load_8+0x68>)
 80177bc:	1862      	adds	r2, r4, r1
 80177be:	e8d2 3f4f 	ldrexb	r3, [r2]
 80177c2:	e8c2 cf46 	strexb	r6, ip, [r2]
 80177c6:	2e00      	cmp	r6, #0
 80177c8:	d1f9      	bne.n	80177be <__atomic_load_8+0x36>
 80177ca:	b2db      	uxtb	r3, r3
 80177cc:	f3bf 8f5b 	dmb	ish
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d1f4      	bne.n	80177be <__atomic_load_8+0x36>
 80177d4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80177d8:	f3bf 8f5b 	dmb	ish
 80177dc:	5463      	strb	r3, [r4, r1]
 80177de:	4630      	mov	r0, r6
 80177e0:	4639      	mov	r1, r7
 80177e2:	bcd0      	pop	{r4, r6, r7}
 80177e4:	4770      	bx	lr
 80177e6:	bf00      	nop
 80177e8:	27d4eb2d 	.word	0x27d4eb2d
 80177ec:	b21642c9 	.word	0xb21642c9
 80177f0:	200108a8 	.word	0x200108a8

080177f4 <__atomic_store_8>:
 80177f4:	b570      	push	{r4, r5, r6, lr}
 80177f6:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 80177fa:	4916      	ldr	r1, [pc, #88]	; (8017854 <__atomic_store_8+0x60>)
 80177fc:	4c16      	ldr	r4, [pc, #88]	; (8017858 <__atomic_store_8+0x64>)
 80177fe:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 8017802:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8017806:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801780a:	fb01 fe0e 	mul.w	lr, r1, lr
 801780e:	4913      	ldr	r1, [pc, #76]	; (801785c <__atomic_store_8+0x68>)
 8017810:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8017814:	fba1 510e 	umull	r5, r1, r1, lr
 8017818:	f04f 0501 	mov.w	r5, #1
 801781c:	0909      	lsrs	r1, r1, #4
 801781e:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8017822:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 8017826:	ebae 0e01 	sub.w	lr, lr, r1
 801782a:	eb04 0c0e 	add.w	ip, r4, lr
 801782e:	e8dc 1f4f 	ldrexb	r1, [ip]
 8017832:	e8cc 5f46 	strexb	r6, r5, [ip]
 8017836:	2e00      	cmp	r6, #0
 8017838:	d1f9      	bne.n	801782e <__atomic_store_8+0x3a>
 801783a:	b2c9      	uxtb	r1, r1
 801783c:	f3bf 8f5b 	dmb	ish
 8017840:	2900      	cmp	r1, #0
 8017842:	d1f4      	bne.n	801782e <__atomic_store_8+0x3a>
 8017844:	e9c0 2300 	strd	r2, r3, [r0]
 8017848:	f3bf 8f5b 	dmb	ish
 801784c:	f804 100e 	strb.w	r1, [r4, lr]
 8017850:	bd70      	pop	{r4, r5, r6, pc}
 8017852:	bf00      	nop
 8017854:	27d4eb2d 	.word	0x27d4eb2d
 8017858:	200108a8 	.word	0x200108a8
 801785c:	b21642c9 	.word	0xb21642c9

08017860 <__atomic_exchange_8>:
 8017860:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8017864:	4917      	ldr	r1, [pc, #92]	; (80178c4 <__atomic_exchange_8+0x64>)
 8017866:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 801786a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801786e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8017872:	fb01 fc0c 	mul.w	ip, r1, ip
 8017876:	4914      	ldr	r1, [pc, #80]	; (80178c8 <__atomic_exchange_8+0x68>)
 8017878:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801787c:	b570      	push	{r4, r5, r6, lr}
 801787e:	4686      	mov	lr, r0
 8017880:	fba1 010c 	umull	r0, r1, r1, ip
 8017884:	4d11      	ldr	r5, [pc, #68]	; (80178cc <__atomic_exchange_8+0x6c>)
 8017886:	f04f 0001 	mov.w	r0, #1
 801788a:	0909      	lsrs	r1, r1, #4
 801788c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8017890:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8017894:	ebac 0c01 	sub.w	ip, ip, r1
 8017898:	eb05 010c 	add.w	r1, r5, ip
 801789c:	e8d1 4f4f 	ldrexb	r4, [r1]
 80178a0:	e8c1 0f46 	strexb	r6, r0, [r1]
 80178a4:	2e00      	cmp	r6, #0
 80178a6:	d1f9      	bne.n	801789c <__atomic_exchange_8+0x3c>
 80178a8:	b2e4      	uxtb	r4, r4
 80178aa:	f3bf 8f5b 	dmb	ish
 80178ae:	2c00      	cmp	r4, #0
 80178b0:	d1f4      	bne.n	801789c <__atomic_exchange_8+0x3c>
 80178b2:	e9de 0100 	ldrd	r0, r1, [lr]
 80178b6:	e9ce 2300 	strd	r2, r3, [lr]
 80178ba:	f3bf 8f5b 	dmb	ish
 80178be:	f805 400c 	strb.w	r4, [r5, ip]
 80178c2:	bd70      	pop	{r4, r5, r6, pc}
 80178c4:	27d4eb2d 	.word	0x27d4eb2d
 80178c8:	b21642c9 	.word	0xb21642c9
 80178cc:	200108a8 	.word	0x200108a8

080178d0 <rcutils_get_env>:
 80178d0:	b168      	cbz	r0, 80178ee <rcutils_get_env+0x1e>
 80178d2:	b510      	push	{r4, lr}
 80178d4:	460c      	mov	r4, r1
 80178d6:	b129      	cbz	r1, 80178e4 <rcutils_get_env+0x14>
 80178d8:	f004 fb2c 	bl	801bf34 <getenv>
 80178dc:	b120      	cbz	r0, 80178e8 <rcutils_get_env+0x18>
 80178de:	6020      	str	r0, [r4, #0]
 80178e0:	2000      	movs	r0, #0
 80178e2:	bd10      	pop	{r4, pc}
 80178e4:	4803      	ldr	r0, [pc, #12]	; (80178f4 <rcutils_get_env+0x24>)
 80178e6:	bd10      	pop	{r4, pc}
 80178e8:	4b03      	ldr	r3, [pc, #12]	; (80178f8 <rcutils_get_env+0x28>)
 80178ea:	6023      	str	r3, [r4, #0]
 80178ec:	bd10      	pop	{r4, pc}
 80178ee:	4803      	ldr	r0, [pc, #12]	; (80178fc <rcutils_get_env+0x2c>)
 80178f0:	4770      	bx	lr
 80178f2:	bf00      	nop
 80178f4:	0801ec84 	.word	0x0801ec84
 80178f8:	0801eda8 	.word	0x0801eda8
 80178fc:	0801ec68 	.word	0x0801ec68

08017900 <rcutils_is_directory>:
 8017900:	2000      	movs	r0, #0
 8017902:	4770      	bx	lr

08017904 <rcutils_join_path>:
 8017904:	b082      	sub	sp, #8
 8017906:	2000      	movs	r0, #0
 8017908:	e88d 000c 	stmia.w	sp, {r2, r3}
 801790c:	b002      	add	sp, #8
 801790e:	4770      	bx	lr

08017910 <rcutils_to_native_path>:
 8017910:	b084      	sub	sp, #16
 8017912:	2000      	movs	r0, #0
 8017914:	f10d 0c04 	add.w	ip, sp, #4
 8017918:	b004      	add	sp, #16
 801791a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801791e:	4770      	bx	lr

08017920 <rcutils_format_string_limit>:
 8017920:	b40f      	push	{r0, r1, r2, r3}
 8017922:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017924:	b083      	sub	sp, #12
 8017926:	ac08      	add	r4, sp, #32
 8017928:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801792a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801792e:	b326      	cbz	r6, 801797a <rcutils_format_string_limit+0x5a>
 8017930:	a808      	add	r0, sp, #32
 8017932:	f7f6 f949 	bl	800dbc8 <rcutils_allocator_is_valid>
 8017936:	b300      	cbz	r0, 801797a <rcutils_format_string_limit+0x5a>
 8017938:	2100      	movs	r1, #0
 801793a:	ab0f      	add	r3, sp, #60	; 0x3c
 801793c:	4632      	mov	r2, r6
 801793e:	4608      	mov	r0, r1
 8017940:	e9cd 3300 	strd	r3, r3, [sp]
 8017944:	f000 f906 	bl	8017b54 <rcutils_vsnprintf>
 8017948:	1c43      	adds	r3, r0, #1
 801794a:	4605      	mov	r5, r0
 801794c:	d015      	beq.n	801797a <rcutils_format_string_limit+0x5a>
 801794e:	1c47      	adds	r7, r0, #1
 8017950:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017952:	429f      	cmp	r7, r3
 8017954:	d901      	bls.n	801795a <rcutils_format_string_limit+0x3a>
 8017956:	1e5d      	subs	r5, r3, #1
 8017958:	461f      	mov	r7, r3
 801795a:	9b08      	ldr	r3, [sp, #32]
 801795c:	4638      	mov	r0, r7
 801795e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017960:	4798      	blx	r3
 8017962:	4604      	mov	r4, r0
 8017964:	b148      	cbz	r0, 801797a <rcutils_format_string_limit+0x5a>
 8017966:	4632      	mov	r2, r6
 8017968:	4639      	mov	r1, r7
 801796a:	9b01      	ldr	r3, [sp, #4]
 801796c:	f000 f8f2 	bl	8017b54 <rcutils_vsnprintf>
 8017970:	2800      	cmp	r0, #0
 8017972:	db09      	blt.n	8017988 <rcutils_format_string_limit+0x68>
 8017974:	2300      	movs	r3, #0
 8017976:	5563      	strb	r3, [r4, r5]
 8017978:	e000      	b.n	801797c <rcutils_format_string_limit+0x5c>
 801797a:	2400      	movs	r4, #0
 801797c:	4620      	mov	r0, r4
 801797e:	b003      	add	sp, #12
 8017980:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017984:	b004      	add	sp, #16
 8017986:	4770      	bx	lr
 8017988:	4620      	mov	r0, r4
 801798a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801798c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801798e:	2400      	movs	r4, #0
 8017990:	4798      	blx	r3
 8017992:	e7f3      	b.n	801797c <rcutils_format_string_limit+0x5c>

08017994 <rcutils_repl_str>:
 8017994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017998:	ed2d 8b02 	vpush	{d8}
 801799c:	b087      	sub	sp, #28
 801799e:	2600      	movs	r6, #0
 80179a0:	4680      	mov	r8, r0
 80179a2:	468a      	mov	sl, r1
 80179a4:	9000      	str	r0, [sp, #0]
 80179a6:	4608      	mov	r0, r1
 80179a8:	ee08 2a10 	vmov	s16, r2
 80179ac:	4699      	mov	r9, r3
 80179ae:	2510      	movs	r5, #16
 80179b0:	f7e8 fca6 	bl	8000300 <strlen>
 80179b4:	4637      	mov	r7, r6
 80179b6:	46b3      	mov	fp, r6
 80179b8:	9001      	str	r0, [sp, #4]
 80179ba:	e01e      	b.n	80179fa <rcutils_repl_str+0x66>
 80179bc:	f10b 0b01 	add.w	fp, fp, #1
 80179c0:	9b01      	ldr	r3, [sp, #4]
 80179c2:	455e      	cmp	r6, fp
 80179c4:	eb04 0803 	add.w	r8, r4, r3
 80179c8:	d211      	bcs.n	80179ee <rcutils_repl_str+0x5a>
 80179ca:	442e      	add	r6, r5
 80179cc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80179d0:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80179d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80179d8:	00b1      	lsls	r1, r6, #2
 80179da:	4798      	blx	r3
 80179dc:	2800      	cmp	r0, #0
 80179de:	f000 8088 	beq.w	8017af2 <rcutils_repl_str+0x15e>
 80179e2:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80179e6:	4607      	mov	r7, r0
 80179e8:	bf28      	it	cs
 80179ea:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 80179ee:	9a00      	ldr	r2, [sp, #0]
 80179f0:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 80179f4:	1aa4      	subs	r4, r4, r2
 80179f6:	f843 4c04 	str.w	r4, [r3, #-4]
 80179fa:	4651      	mov	r1, sl
 80179fc:	4640      	mov	r0, r8
 80179fe:	f004 fe93 	bl	801c728 <strstr>
 8017a02:	4604      	mov	r4, r0
 8017a04:	4638      	mov	r0, r7
 8017a06:	2c00      	cmp	r4, #0
 8017a08:	d1d8      	bne.n	80179bc <rcutils_repl_str+0x28>
 8017a0a:	4640      	mov	r0, r8
 8017a0c:	f7e8 fc78 	bl	8000300 <strlen>
 8017a10:	9b00      	ldr	r3, [sp, #0]
 8017a12:	eba8 0803 	sub.w	r8, r8, r3
 8017a16:	eb08 0400 	add.w	r4, r8, r0
 8017a1a:	9402      	str	r4, [sp, #8]
 8017a1c:	f1bb 0f00 	cmp.w	fp, #0
 8017a20:	d045      	beq.n	8017aae <rcutils_repl_str+0x11a>
 8017a22:	ee18 0a10 	vmov	r0, s16
 8017a26:	f7e8 fc6b 	bl	8000300 <strlen>
 8017a2a:	9a01      	ldr	r2, [sp, #4]
 8017a2c:	4606      	mov	r6, r0
 8017a2e:	f8d9 3000 	ldr.w	r3, [r9]
 8017a32:	1a82      	subs	r2, r0, r2
 8017a34:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017a38:	fb0b 4202 	mla	r2, fp, r2, r4
 8017a3c:	1c50      	adds	r0, r2, #1
 8017a3e:	9205      	str	r2, [sp, #20]
 8017a40:	4798      	blx	r3
 8017a42:	4682      	mov	sl, r0
 8017a44:	2800      	cmp	r0, #0
 8017a46:	d054      	beq.n	8017af2 <rcutils_repl_str+0x15e>
 8017a48:	683a      	ldr	r2, [r7, #0]
 8017a4a:	463d      	mov	r5, r7
 8017a4c:	9900      	ldr	r1, [sp, #0]
 8017a4e:	2401      	movs	r4, #1
 8017a50:	f004 ff61 	bl	801c916 <memcpy>
 8017a54:	683b      	ldr	r3, [r7, #0]
 8017a56:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8017a5a:	eb0a 0803 	add.w	r8, sl, r3
 8017a5e:	ee18 7a10 	vmov	r7, s16
 8017a62:	f8dd a000 	ldr.w	sl, [sp]
 8017a66:	f8cd 9000 	str.w	r9, [sp]
 8017a6a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017a6e:	4632      	mov	r2, r6
 8017a70:	4639      	mov	r1, r7
 8017a72:	4640      	mov	r0, r8
 8017a74:	44b0      	add	r8, r6
 8017a76:	f004 ff4e 	bl	801c916 <memcpy>
 8017a7a:	f855 2b04 	ldr.w	r2, [r5], #4
 8017a7e:	45a3      	cmp	fp, r4
 8017a80:	444a      	add	r2, r9
 8017a82:	eb0a 0102 	add.w	r1, sl, r2
 8017a86:	d02a      	beq.n	8017ade <rcutils_repl_str+0x14a>
 8017a88:	6828      	ldr	r0, [r5, #0]
 8017a8a:	1a82      	subs	r2, r0, r2
 8017a8c:	4640      	mov	r0, r8
 8017a8e:	4490      	add	r8, r2
 8017a90:	f004 ff41 	bl	801c916 <memcpy>
 8017a94:	1c62      	adds	r2, r4, #1
 8017a96:	45a3      	cmp	fp, r4
 8017a98:	4614      	mov	r4, r2
 8017a9a:	d8e8      	bhi.n	8017a6e <rcutils_repl_str+0xda>
 8017a9c:	f8dd 9000 	ldr.w	r9, [sp]
 8017aa0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8017aa4:	2300      	movs	r3, #0
 8017aa6:	9a05      	ldr	r2, [sp, #20]
 8017aa8:	f80a 3002 	strb.w	r3, [sl, r2]
 8017aac:	e00b      	b.n	8017ac6 <rcutils_repl_str+0x132>
 8017aae:	4620      	mov	r0, r4
 8017ab0:	f8d9 3000 	ldr.w	r3, [r9]
 8017ab4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017ab8:	3001      	adds	r0, #1
 8017aba:	4798      	blx	r3
 8017abc:	4682      	mov	sl, r0
 8017abe:	b110      	cbz	r0, 8017ac6 <rcutils_repl_str+0x132>
 8017ac0:	9900      	ldr	r1, [sp, #0]
 8017ac2:	f004 ff20 	bl	801c906 <strcpy>
 8017ac6:	4638      	mov	r0, r7
 8017ac8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017acc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017ad0:	4798      	blx	r3
 8017ad2:	4650      	mov	r0, sl
 8017ad4:	b007      	add	sp, #28
 8017ad6:	ecbd 8b02 	vpop	{d8}
 8017ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ade:	9b02      	ldr	r3, [sp, #8]
 8017ae0:	4640      	mov	r0, r8
 8017ae2:	f8dd 9000 	ldr.w	r9, [sp]
 8017ae6:	1a9a      	subs	r2, r3, r2
 8017ae8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8017aec:	f004 ff13 	bl	801c916 <memcpy>
 8017af0:	e7d8      	b.n	8017aa4 <rcutils_repl_str+0x110>
 8017af2:	f04f 0a00 	mov.w	sl, #0
 8017af6:	e7e6      	b.n	8017ac6 <rcutils_repl_str+0x132>

08017af8 <rcutils_snprintf>:
 8017af8:	b40c      	push	{r2, r3}
 8017afa:	b530      	push	{r4, r5, lr}
 8017afc:	b083      	sub	sp, #12
 8017afe:	ab06      	add	r3, sp, #24
 8017b00:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b04:	9301      	str	r3, [sp, #4]
 8017b06:	b1e2      	cbz	r2, 8017b42 <rcutils_snprintf+0x4a>
 8017b08:	fab0 f480 	clz	r4, r0
 8017b0c:	fab1 f581 	clz	r5, r1
 8017b10:	ea50 0c01 	orrs.w	ip, r0, r1
 8017b14:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8017b18:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8017b1c:	d008      	beq.n	8017b30 <rcutils_snprintf+0x38>
 8017b1e:	b984      	cbnz	r4, 8017b42 <rcutils_snprintf+0x4a>
 8017b20:	b97d      	cbnz	r5, 8017b42 <rcutils_snprintf+0x4a>
 8017b22:	f004 fd8f 	bl	801c644 <vsniprintf>
 8017b26:	b003      	add	sp, #12
 8017b28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017b2c:	b002      	add	sp, #8
 8017b2e:	4770      	bx	lr
 8017b30:	4661      	mov	r1, ip
 8017b32:	4660      	mov	r0, ip
 8017b34:	f004 fd86 	bl	801c644 <vsniprintf>
 8017b38:	b003      	add	sp, #12
 8017b3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017b3e:	b002      	add	sp, #8
 8017b40:	4770      	bx	lr
 8017b42:	f004 feb3 	bl	801c8ac <__errno>
 8017b46:	2216      	movs	r2, #22
 8017b48:	4603      	mov	r3, r0
 8017b4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017b4e:	601a      	str	r2, [r3, #0]
 8017b50:	e7e9      	b.n	8017b26 <rcutils_snprintf+0x2e>
 8017b52:	bf00      	nop

08017b54 <rcutils_vsnprintf>:
 8017b54:	b570      	push	{r4, r5, r6, lr}
 8017b56:	b1b2      	cbz	r2, 8017b86 <rcutils_vsnprintf+0x32>
 8017b58:	fab0 f480 	clz	r4, r0
 8017b5c:	fab1 f581 	clz	r5, r1
 8017b60:	ea50 0c01 	orrs.w	ip, r0, r1
 8017b64:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8017b68:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8017b6c:	d005      	beq.n	8017b7a <rcutils_vsnprintf+0x26>
 8017b6e:	b954      	cbnz	r4, 8017b86 <rcutils_vsnprintf+0x32>
 8017b70:	b94d      	cbnz	r5, 8017b86 <rcutils_vsnprintf+0x32>
 8017b72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b76:	f004 bd65 	b.w	801c644 <vsniprintf>
 8017b7a:	4661      	mov	r1, ip
 8017b7c:	4660      	mov	r0, ip
 8017b7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b82:	f004 bd5f 	b.w	801c644 <vsniprintf>
 8017b86:	f004 fe91 	bl	801c8ac <__errno>
 8017b8a:	2316      	movs	r3, #22
 8017b8c:	6003      	str	r3, [r0, #0]
 8017b8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017b92:	bd70      	pop	{r4, r5, r6, pc}

08017b94 <rcutils_strdup>:
 8017b94:	b084      	sub	sp, #16
 8017b96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b98:	ac07      	add	r4, sp, #28
 8017b9a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8017b9c:	4605      	mov	r5, r0
 8017b9e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8017ba2:	b1d0      	cbz	r0, 8017bda <rcutils_strdup+0x46>
 8017ba4:	460c      	mov	r4, r1
 8017ba6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017baa:	2100      	movs	r1, #0
 8017bac:	f7e8 fb58 	bl	8000260 <memchr>
 8017bb0:	b180      	cbz	r0, 8017bd4 <rcutils_strdup+0x40>
 8017bb2:	1b46      	subs	r6, r0, r5
 8017bb4:	1c70      	adds	r0, r6, #1
 8017bb6:	4639      	mov	r1, r7
 8017bb8:	47a0      	blx	r4
 8017bba:	4604      	mov	r4, r0
 8017bbc:	b128      	cbz	r0, 8017bca <rcutils_strdup+0x36>
 8017bbe:	4632      	mov	r2, r6
 8017bc0:	4629      	mov	r1, r5
 8017bc2:	f004 fea8 	bl	801c916 <memcpy>
 8017bc6:	2300      	movs	r3, #0
 8017bc8:	55a3      	strb	r3, [r4, r6]
 8017bca:	4620      	mov	r0, r4
 8017bcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017bd0:	b004      	add	sp, #16
 8017bd2:	4770      	bx	lr
 8017bd4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8017bd8:	e7ed      	b.n	8017bb6 <rcutils_strdup+0x22>
 8017bda:	4604      	mov	r4, r0
 8017bdc:	e7f5      	b.n	8017bca <rcutils_strdup+0x36>
 8017bde:	bf00      	nop

08017be0 <rcutils_strndup>:
 8017be0:	b082      	sub	sp, #8
 8017be2:	b570      	push	{r4, r5, r6, lr}
 8017be4:	ac04      	add	r4, sp, #16
 8017be6:	4606      	mov	r6, r0
 8017be8:	e884 000c 	stmia.w	r4, {r2, r3}
 8017bec:	b1b8      	cbz	r0, 8017c1e <rcutils_strndup+0x3e>
 8017bee:	460c      	mov	r4, r1
 8017bf0:	460a      	mov	r2, r1
 8017bf2:	2100      	movs	r1, #0
 8017bf4:	f7e8 fb34 	bl	8000260 <memchr>
 8017bf8:	b100      	cbz	r0, 8017bfc <rcutils_strndup+0x1c>
 8017bfa:	1b84      	subs	r4, r0, r6
 8017bfc:	9b04      	ldr	r3, [sp, #16]
 8017bfe:	1c60      	adds	r0, r4, #1
 8017c00:	9908      	ldr	r1, [sp, #32]
 8017c02:	4798      	blx	r3
 8017c04:	4605      	mov	r5, r0
 8017c06:	b128      	cbz	r0, 8017c14 <rcutils_strndup+0x34>
 8017c08:	4622      	mov	r2, r4
 8017c0a:	4631      	mov	r1, r6
 8017c0c:	f004 fe83 	bl	801c916 <memcpy>
 8017c10:	2300      	movs	r3, #0
 8017c12:	552b      	strb	r3, [r5, r4]
 8017c14:	4628      	mov	r0, r5
 8017c16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c1a:	b002      	add	sp, #8
 8017c1c:	4770      	bx	lr
 8017c1e:	4605      	mov	r5, r0
 8017c20:	e7f8      	b.n	8017c14 <rcutils_strndup+0x34>
 8017c22:	bf00      	nop

08017c24 <rcutils_get_zero_initialized_string_map>:
 8017c24:	2000      	movs	r0, #0
 8017c26:	4b01      	ldr	r3, [pc, #4]	; (8017c2c <rcutils_get_zero_initialized_string_map+0x8>)
 8017c28:	6018      	str	r0, [r3, #0]
 8017c2a:	4770      	bx	lr
 8017c2c:	200108c0 	.word	0x200108c0

08017c30 <rcutils_string_map_reserve>:
 8017c30:	2800      	cmp	r0, #0
 8017c32:	d03e      	beq.n	8017cb2 <rcutils_string_map_reserve+0x82>
 8017c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c36:	6805      	ldr	r5, [r0, #0]
 8017c38:	4606      	mov	r6, r0
 8017c3a:	460c      	mov	r4, r1
 8017c3c:	b12d      	cbz	r5, 8017c4a <rcutils_string_map_reserve+0x1a>
 8017c3e:	68ab      	ldr	r3, [r5, #8]
 8017c40:	42a3      	cmp	r3, r4
 8017c42:	d904      	bls.n	8017c4e <rcutils_string_map_reserve+0x1e>
 8017c44:	461c      	mov	r4, r3
 8017c46:	2d00      	cmp	r5, #0
 8017c48:	d1f9      	bne.n	8017c3e <rcutils_string_map_reserve+0xe>
 8017c4a:	201f      	movs	r0, #31
 8017c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c4e:	686b      	ldr	r3, [r5, #4]
 8017c50:	42a3      	cmp	r3, r4
 8017c52:	d02a      	beq.n	8017caa <rcutils_string_map_reserve+0x7a>
 8017c54:	69e9      	ldr	r1, [r5, #28]
 8017c56:	b304      	cbz	r4, 8017c9a <rcutils_string_map_reserve+0x6a>
 8017c58:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 8017c5c:	d227      	bcs.n	8017cae <rcutils_string_map_reserve+0x7e>
 8017c5e:	00e7      	lsls	r7, r4, #3
 8017c60:	460a      	mov	r2, r1
 8017c62:	696b      	ldr	r3, [r5, #20]
 8017c64:	6828      	ldr	r0, [r5, #0]
 8017c66:	4639      	mov	r1, r7
 8017c68:	4798      	blx	r3
 8017c6a:	b300      	cbz	r0, 8017cae <rcutils_string_map_reserve+0x7e>
 8017c6c:	6835      	ldr	r5, [r6, #0]
 8017c6e:	686a      	ldr	r2, [r5, #4]
 8017c70:	6028      	str	r0, [r5, #0]
 8017c72:	42a2      	cmp	r2, r4
 8017c74:	d216      	bcs.n	8017ca4 <rcutils_string_map_reserve+0x74>
 8017c76:	43d1      	mvns	r1, r2
 8017c78:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 8017c7c:	4421      	add	r1, r4
 8017c7e:	2909      	cmp	r1, #9
 8017c80:	d919      	bls.n	8017cb6 <rcutils_string_map_reserve+0x86>
 8017c82:	0759      	lsls	r1, r3, #29
 8017c84:	d117      	bne.n	8017cb6 <rcutils_string_map_reserve+0x86>
 8017c86:	1aa1      	subs	r1, r4, r2
 8017c88:	2600      	movs	r6, #0
 8017c8a:	2200      	movs	r2, #0
 8017c8c:	2700      	movs	r7, #0
 8017c8e:	3201      	adds	r2, #1
 8017c90:	4291      	cmp	r1, r2
 8017c92:	e8e3 6702 	strd	r6, r7, [r3], #8
 8017c96:	d8fa      	bhi.n	8017c8e <rcutils_string_map_reserve+0x5e>
 8017c98:	e004      	b.n	8017ca4 <rcutils_string_map_reserve+0x74>
 8017c9a:	692b      	ldr	r3, [r5, #16]
 8017c9c:	6828      	ldr	r0, [r5, #0]
 8017c9e:	4798      	blx	r3
 8017ca0:	6835      	ldr	r5, [r6, #0]
 8017ca2:	602c      	str	r4, [r5, #0]
 8017ca4:	2000      	movs	r0, #0
 8017ca6:	606c      	str	r4, [r5, #4]
 8017ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017caa:	2000      	movs	r0, #0
 8017cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017cae:	200a      	movs	r0, #10
 8017cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017cb2:	200b      	movs	r0, #11
 8017cb4:	4770      	bx	lr
 8017cb6:	4438      	add	r0, r7
 8017cb8:	2200      	movs	r2, #0
 8017cba:	e9c3 2200 	strd	r2, r2, [r3]
 8017cbe:	3308      	adds	r3, #8
 8017cc0:	4283      	cmp	r3, r0
 8017cc2:	d1fa      	bne.n	8017cba <rcutils_string_map_reserve+0x8a>
 8017cc4:	e7ee      	b.n	8017ca4 <rcutils_string_map_reserve+0x74>
 8017cc6:	bf00      	nop

08017cc8 <rcutils_string_map_init>:
 8017cc8:	b082      	sub	sp, #8
 8017cca:	b570      	push	{r4, r5, r6, lr}
 8017ccc:	ac04      	add	r4, sp, #16
 8017cce:	e884 000c 	stmia.w	r4, {r2, r3}
 8017cd2:	b378      	cbz	r0, 8017d34 <rcutils_string_map_init+0x6c>
 8017cd4:	6806      	ldr	r6, [r0, #0]
 8017cd6:	4604      	mov	r4, r0
 8017cd8:	b12e      	cbz	r6, 8017ce6 <rcutils_string_map_init+0x1e>
 8017cda:	251e      	movs	r5, #30
 8017cdc:	4628      	mov	r0, r5
 8017cde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017ce2:	b002      	add	sp, #8
 8017ce4:	4770      	bx	lr
 8017ce6:	a804      	add	r0, sp, #16
 8017ce8:	460d      	mov	r5, r1
 8017cea:	f7f5 ff6d 	bl	800dbc8 <rcutils_allocator_is_valid>
 8017cee:	b308      	cbz	r0, 8017d34 <rcutils_string_map_init+0x6c>
 8017cf0:	9b04      	ldr	r3, [sp, #16]
 8017cf2:	2020      	movs	r0, #32
 8017cf4:	9908      	ldr	r1, [sp, #32]
 8017cf6:	4798      	blx	r3
 8017cf8:	6020      	str	r0, [r4, #0]
 8017cfa:	b308      	cbz	r0, 8017d40 <rcutils_string_map_init+0x78>
 8017cfc:	f10d 0e10 	add.w	lr, sp, #16
 8017d00:	6086      	str	r6, [r0, #8]
 8017d02:	f100 0c0c 	add.w	ip, r0, #12
 8017d06:	e9c0 6600 	strd	r6, r6, [r0]
 8017d0a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017d0e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017d12:	f8de 3000 	ldr.w	r3, [lr]
 8017d16:	4629      	mov	r1, r5
 8017d18:	4620      	mov	r0, r4
 8017d1a:	f8cc 3000 	str.w	r3, [ip]
 8017d1e:	f7ff ff87 	bl	8017c30 <rcutils_string_map_reserve>
 8017d22:	4605      	mov	r5, r0
 8017d24:	2800      	cmp	r0, #0
 8017d26:	d0d9      	beq.n	8017cdc <rcutils_string_map_init+0x14>
 8017d28:	9b05      	ldr	r3, [sp, #20]
 8017d2a:	9908      	ldr	r1, [sp, #32]
 8017d2c:	6820      	ldr	r0, [r4, #0]
 8017d2e:	4798      	blx	r3
 8017d30:	6026      	str	r6, [r4, #0]
 8017d32:	e7d3      	b.n	8017cdc <rcutils_string_map_init+0x14>
 8017d34:	250b      	movs	r5, #11
 8017d36:	4628      	mov	r0, r5
 8017d38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017d3c:	b002      	add	sp, #8
 8017d3e:	4770      	bx	lr
 8017d40:	250a      	movs	r5, #10
 8017d42:	e7cb      	b.n	8017cdc <rcutils_string_map_init+0x14>

08017d44 <rcutils_string_map_fini>:
 8017d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017d48:	b083      	sub	sp, #12
 8017d4a:	2800      	cmp	r0, #0
 8017d4c:	d03e      	beq.n	8017dcc <rcutils_string_map_fini+0x88>
 8017d4e:	6804      	ldr	r4, [r0, #0]
 8017d50:	4606      	mov	r6, r0
 8017d52:	2c00      	cmp	r4, #0
 8017d54:	d036      	beq.n	8017dc4 <rcutils_string_map_fini+0x80>
 8017d56:	6863      	ldr	r3, [r4, #4]
 8017d58:	b34b      	cbz	r3, 8017dae <rcutils_string_map_fini+0x6a>
 8017d5a:	2500      	movs	r5, #0
 8017d5c:	6822      	ldr	r2, [r4, #0]
 8017d5e:	462f      	mov	r7, r5
 8017d60:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 8017d64:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8017d68:	b1f0      	cbz	r0, 8017da8 <rcutils_string_map_fini+0x64>
 8017d6a:	69e1      	ldr	r1, [r4, #28]
 8017d6c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017d70:	9101      	str	r1, [sp, #4]
 8017d72:	47c8      	blx	r9
 8017d74:	6823      	ldr	r3, [r4, #0]
 8017d76:	9901      	ldr	r1, [sp, #4]
 8017d78:	eb03 0208 	add.w	r2, r3, r8
 8017d7c:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
 8017d80:	3501      	adds	r5, #1
 8017d82:	6850      	ldr	r0, [r2, #4]
 8017d84:	47c8      	blx	r9
 8017d86:	68a3      	ldr	r3, [r4, #8]
 8017d88:	6822      	ldr	r2, [r4, #0]
 8017d8a:	3b01      	subs	r3, #1
 8017d8c:	4442      	add	r2, r8
 8017d8e:	6057      	str	r7, [r2, #4]
 8017d90:	60a3      	str	r3, [r4, #8]
 8017d92:	6834      	ldr	r4, [r6, #0]
 8017d94:	6863      	ldr	r3, [r4, #4]
 8017d96:	429d      	cmp	r5, r3
 8017d98:	d209      	bcs.n	8017dae <rcutils_string_map_fini+0x6a>
 8017d9a:	6822      	ldr	r2, [r4, #0]
 8017d9c:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8017da0:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 8017da4:	2800      	cmp	r0, #0
 8017da6:	d1e0      	bne.n	8017d6a <rcutils_string_map_fini+0x26>
 8017da8:	3501      	adds	r5, #1
 8017daa:	429d      	cmp	r5, r3
 8017dac:	d3d8      	bcc.n	8017d60 <rcutils_string_map_fini+0x1c>
 8017dae:	2100      	movs	r1, #0
 8017db0:	4630      	mov	r0, r6
 8017db2:	f7ff ff3d 	bl	8017c30 <rcutils_string_map_reserve>
 8017db6:	4604      	mov	r4, r0
 8017db8:	b920      	cbnz	r0, 8017dc4 <rcutils_string_map_fini+0x80>
 8017dba:	6830      	ldr	r0, [r6, #0]
 8017dbc:	6903      	ldr	r3, [r0, #16]
 8017dbe:	69c1      	ldr	r1, [r0, #28]
 8017dc0:	4798      	blx	r3
 8017dc2:	6034      	str	r4, [r6, #0]
 8017dc4:	4620      	mov	r0, r4
 8017dc6:	b003      	add	sp, #12
 8017dc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017dcc:	240b      	movs	r4, #11
 8017dce:	4620      	mov	r0, r4
 8017dd0:	b003      	add	sp, #12
 8017dd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017dd6:	bf00      	nop

08017dd8 <rcutils_string_map_getn>:
 8017dd8:	b338      	cbz	r0, 8017e2a <rcutils_string_map_getn+0x52>
 8017dda:	6803      	ldr	r3, [r0, #0]
 8017ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017de0:	4688      	mov	r8, r1
 8017de2:	b1d9      	cbz	r1, 8017e1c <rcutils_string_map_getn+0x44>
 8017de4:	fab3 f483 	clz	r4, r3
 8017de8:	0964      	lsrs	r4, r4, #5
 8017dea:	b1bb      	cbz	r3, 8017e1c <rcutils_string_map_getn+0x44>
 8017dec:	4691      	mov	r9, r2
 8017dee:	e9d3 7600 	ldrd	r7, r6, [r3]
 8017df2:	b19e      	cbz	r6, 8017e1c <rcutils_string_map_getn+0x44>
 8017df4:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
 8017df8:	eb07 0ac4 	add.w	sl, r7, r4, lsl #3
 8017dfc:	3401      	adds	r4, #1
 8017dfe:	4628      	mov	r0, r5
 8017e00:	b155      	cbz	r5, 8017e18 <rcutils_string_map_getn+0x40>
 8017e02:	f7e8 fa7d 	bl	8000300 <strlen>
 8017e06:	4602      	mov	r2, r0
 8017e08:	4629      	mov	r1, r5
 8017e0a:	4640      	mov	r0, r8
 8017e0c:	454a      	cmp	r2, r9
 8017e0e:	bf38      	it	cc
 8017e10:	464a      	movcc	r2, r9
 8017e12:	f004 fc64 	bl	801c6de <strncmp>
 8017e16:	b120      	cbz	r0, 8017e22 <rcutils_string_map_getn+0x4a>
 8017e18:	42a6      	cmp	r6, r4
 8017e1a:	d1eb      	bne.n	8017df4 <rcutils_string_map_getn+0x1c>
 8017e1c:	2000      	movs	r0, #0
 8017e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e22:	f8da 0004 	ldr.w	r0, [sl, #4]
 8017e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e2a:	4770      	bx	lr
 8017e2c:	0000      	movs	r0, r0
	...

08017e30 <rmw_get_zero_initialized_context>:
 8017e30:	b510      	push	{r4, lr}
 8017e32:	4604      	mov	r4, r0
 8017e34:	3010      	adds	r0, #16
 8017e36:	f000 f80f 	bl	8017e58 <rmw_get_zero_initialized_init_options>
 8017e3a:	2300      	movs	r3, #0
 8017e3c:	4620      	mov	r0, r4
 8017e3e:	60a3      	str	r3, [r4, #8]
 8017e40:	66a3      	str	r3, [r4, #104]	; 0x68
 8017e42:	66e3      	str	r3, [r4, #108]	; 0x6c
 8017e44:	ed9f 7b02 	vldr	d7, [pc, #8]	; 8017e50 <rmw_get_zero_initialized_context+0x20>
 8017e48:	ed84 7b00 	vstr	d7, [r4]
 8017e4c:	bd10      	pop	{r4, pc}
 8017e4e:	bf00      	nop
	...

08017e58 <rmw_get_zero_initialized_init_options>:
 8017e58:	b510      	push	{r4, lr}
 8017e5a:	4604      	mov	r4, r0
 8017e5c:	2258      	movs	r2, #88	; 0x58
 8017e5e:	2100      	movs	r1, #0
 8017e60:	f004 fc28 	bl	801c6b4 <memset>
 8017e64:	f104 0010 	add.w	r0, r4, #16
 8017e68:	f000 f80a 	bl	8017e80 <rmw_get_default_security_options>
 8017e6c:	f104 001c 	add.w	r0, r4, #28
 8017e70:	f003 fe50 	bl	801bb14 <rmw_get_zero_initialized_discovery_options>
 8017e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017e78:	4620      	mov	r0, r4
 8017e7a:	60e3      	str	r3, [r4, #12]
 8017e7c:	bd10      	pop	{r4, pc}
 8017e7e:	bf00      	nop

08017e80 <rmw_get_default_security_options>:
 8017e80:	2200      	movs	r2, #0
 8017e82:	7002      	strb	r2, [r0, #0]
 8017e84:	6042      	str	r2, [r0, #4]
 8017e86:	4770      	bx	lr

08017e88 <rmw_subscription_content_filter_options_fini>:
 8017e88:	b1b0      	cbz	r0, 8017eb8 <rmw_subscription_content_filter_options_fini+0x30>
 8017e8a:	b538      	push	{r3, r4, r5, lr}
 8017e8c:	4604      	mov	r4, r0
 8017e8e:	4608      	mov	r0, r1
 8017e90:	460d      	mov	r5, r1
 8017e92:	f7f5 fe99 	bl	800dbc8 <rcutils_allocator_is_valid>
 8017e96:	b168      	cbz	r0, 8017eb4 <rmw_subscription_content_filter_options_fini+0x2c>
 8017e98:	6820      	ldr	r0, [r4, #0]
 8017e9a:	b120      	cbz	r0, 8017ea6 <rmw_subscription_content_filter_options_fini+0x1e>
 8017e9c:	686b      	ldr	r3, [r5, #4]
 8017e9e:	6929      	ldr	r1, [r5, #16]
 8017ea0:	4798      	blx	r3
 8017ea2:	2300      	movs	r3, #0
 8017ea4:	6023      	str	r3, [r4, #0]
 8017ea6:	1d20      	adds	r0, r4, #4
 8017ea8:	f003 fe0a 	bl	801bac0 <rcutils_string_array_fini>
 8017eac:	3800      	subs	r0, #0
 8017eae:	bf18      	it	ne
 8017eb0:	2001      	movne	r0, #1
 8017eb2:	bd38      	pop	{r3, r4, r5, pc}
 8017eb4:	200b      	movs	r0, #11
 8017eb6:	bd38      	pop	{r3, r4, r5, pc}
 8017eb8:	200b      	movs	r0, #11
 8017eba:	4770      	bx	lr

08017ebc <rmw_get_default_subscription_options>:
 8017ebc:	2200      	movs	r2, #0
 8017ebe:	e9c0 2200 	strd	r2, r2, [r0]
 8017ec2:	6082      	str	r2, [r0, #8]
 8017ec4:	4770      	bx	lr
 8017ec6:	bf00      	nop

08017ec8 <rmw_time_equal>:
 8017ec8:	b4f0      	push	{r4, r5, r6, r7}
 8017eca:	b084      	sub	sp, #16
 8017ecc:	ac04      	add	r4, sp, #16
 8017ece:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8017ed2:	4603      	mov	r3, r0
 8017ed4:	4925      	ldr	r1, [pc, #148]	; (8017f6c <rmw_time_equal+0xa4>)
 8017ed6:	9d01      	ldr	r5, [sp, #4]
 8017ed8:	4610      	mov	r0, r2
 8017eda:	4299      	cmp	r1, r3
 8017edc:	f04f 0202 	mov.w	r2, #2
 8017ee0:	9e03      	ldr	r6, [sp, #12]
 8017ee2:	41aa      	sbcs	r2, r5
 8017ee4:	d330      	bcc.n	8017f48 <rmw_time_equal+0x80>
 8017ee6:	4c22      	ldr	r4, [pc, #136]	; (8017f70 <rmw_time_equal+0xa8>)
 8017ee8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017eec:	fba3 3204 	umull	r3, r2, r3, r4
 8017ef0:	fb04 2205 	mla	r2, r4, r5, r2
 8017ef4:	43dd      	mvns	r5, r3
 8017ef6:	1a8c      	subs	r4, r1, r2
 8017ef8:	4285      	cmp	r5, r0
 8017efa:	41b4      	sbcs	r4, r6
 8017efc:	d332      	bcc.n	8017f64 <rmw_time_equal+0x9c>
 8017efe:	eb10 0c03 	adds.w	ip, r0, r3
 8017f02:	eb42 0106 	adc.w	r1, r2, r6
 8017f06:	4819      	ldr	r0, [pc, #100]	; (8017f6c <rmw_time_equal+0xa4>)
 8017f08:	2202      	movs	r2, #2
 8017f0a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8017f0c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8017f0e:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8017f12:	4298      	cmp	r0, r3
 8017f14:	41b2      	sbcs	r2, r6
 8017f16:	d31c      	bcc.n	8017f52 <rmw_time_equal+0x8a>
 8017f18:	4c15      	ldr	r4, [pc, #84]	; (8017f70 <rmw_time_equal+0xa8>)
 8017f1a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017f1e:	fba3 3204 	umull	r3, r2, r3, r4
 8017f22:	fb04 2206 	mla	r2, r4, r6, r2
 8017f26:	43de      	mvns	r6, r3
 8017f28:	1a84      	subs	r4, r0, r2
 8017f2a:	42ae      	cmp	r6, r5
 8017f2c:	41bc      	sbcs	r4, r7
 8017f2e:	d315      	bcc.n	8017f5c <rmw_time_equal+0x94>
 8017f30:	195b      	adds	r3, r3, r5
 8017f32:	eb42 0207 	adc.w	r2, r2, r7
 8017f36:	428a      	cmp	r2, r1
 8017f38:	bf08      	it	eq
 8017f3a:	4563      	cmpeq	r3, ip
 8017f3c:	bf0c      	ite	eq
 8017f3e:	2001      	moveq	r0, #1
 8017f40:	2000      	movne	r0, #0
 8017f42:	b004      	add	sp, #16
 8017f44:	bcf0      	pop	{r4, r5, r6, r7}
 8017f46:	4770      	bx	lr
 8017f48:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8017f4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017f50:	e7d9      	b.n	8017f06 <rmw_time_equal+0x3e>
 8017f52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017f56:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8017f5a:	e7ec      	b.n	8017f36 <rmw_time_equal+0x6e>
 8017f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017f60:	4602      	mov	r2, r0
 8017f62:	e7e8      	b.n	8017f36 <rmw_time_equal+0x6e>
 8017f64:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8017f68:	e7cd      	b.n	8017f06 <rmw_time_equal+0x3e>
 8017f6a:	bf00      	nop
 8017f6c:	25c17d04 	.word	0x25c17d04
 8017f70:	3b9aca00 	.word	0x3b9aca00

08017f74 <rmw_time_total_nsec>:
 8017f74:	b470      	push	{r4, r5, r6}
 8017f76:	b085      	sub	sp, #20
 8017f78:	ac04      	add	r4, sp, #16
 8017f7a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8017f7e:	4603      	mov	r3, r0
 8017f80:	4913      	ldr	r1, [pc, #76]	; (8017fd0 <rmw_time_total_nsec+0x5c>)
 8017f82:	9d01      	ldr	r5, [sp, #4]
 8017f84:	4610      	mov	r0, r2
 8017f86:	4299      	cmp	r1, r3
 8017f88:	f04f 0202 	mov.w	r2, #2
 8017f8c:	9e03      	ldr	r6, [sp, #12]
 8017f8e:	41aa      	sbcs	r2, r5
 8017f90:	d311      	bcc.n	8017fb6 <rmw_time_total_nsec+0x42>
 8017f92:	4c10      	ldr	r4, [pc, #64]	; (8017fd4 <rmw_time_total_nsec+0x60>)
 8017f94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017f98:	fba3 3204 	umull	r3, r2, r3, r4
 8017f9c:	fb04 2205 	mla	r2, r4, r5, r2
 8017fa0:	43dd      	mvns	r5, r3
 8017fa2:	1a8c      	subs	r4, r1, r2
 8017fa4:	4285      	cmp	r5, r0
 8017fa6:	41b4      	sbcs	r4, r6
 8017fa8:	d30c      	bcc.n	8017fc4 <rmw_time_total_nsec+0x50>
 8017faa:	1818      	adds	r0, r3, r0
 8017fac:	eb42 0106 	adc.w	r1, r2, r6
 8017fb0:	b005      	add	sp, #20
 8017fb2:	bc70      	pop	{r4, r5, r6}
 8017fb4:	4770      	bx	lr
 8017fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017fba:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017fbe:	b005      	add	sp, #20
 8017fc0:	bc70      	pop	{r4, r5, r6}
 8017fc2:	4770      	bx	lr
 8017fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017fc8:	b005      	add	sp, #20
 8017fca:	bc70      	pop	{r4, r5, r6}
 8017fcc:	4770      	bx	lr
 8017fce:	bf00      	nop
 8017fd0:	25c17d04 	.word	0x25c17d04
 8017fd4:	3b9aca00 	.word	0x3b9aca00

08017fd8 <rmw_get_zero_initialized_message_info>:
 8017fd8:	b510      	push	{r4, lr}
 8017fda:	4604      	mov	r4, r0
 8017fdc:	2238      	movs	r2, #56	; 0x38
 8017fde:	2100      	movs	r1, #0
 8017fe0:	f004 fb68 	bl	801c6b4 <memset>
 8017fe4:	4620      	mov	r0, r4
 8017fe6:	bd10      	pop	{r4, pc}

08017fe8 <rmw_validate_full_topic_name>:
 8017fe8:	2800      	cmp	r0, #0
 8017fea:	d05d      	beq.n	80180a8 <rmw_validate_full_topic_name+0xc0>
 8017fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ff0:	460d      	mov	r5, r1
 8017ff2:	2900      	cmp	r1, #0
 8017ff4:	d05a      	beq.n	80180ac <rmw_validate_full_topic_name+0xc4>
 8017ff6:	4604      	mov	r4, r0
 8017ff8:	4616      	mov	r6, r2
 8017ffa:	f7e8 f981 	bl	8000300 <strlen>
 8017ffe:	b150      	cbz	r0, 8018016 <rmw_validate_full_topic_name+0x2e>
 8018000:	7823      	ldrb	r3, [r4, #0]
 8018002:	2b2f      	cmp	r3, #47	; 0x2f
 8018004:	d00e      	beq.n	8018024 <rmw_validate_full_topic_name+0x3c>
 8018006:	2302      	movs	r3, #2
 8018008:	602b      	str	r3, [r5, #0]
 801800a:	b146      	cbz	r6, 801801e <rmw_validate_full_topic_name+0x36>
 801800c:	2300      	movs	r3, #0
 801800e:	4618      	mov	r0, r3
 8018010:	6033      	str	r3, [r6, #0]
 8018012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018016:	2301      	movs	r3, #1
 8018018:	602b      	str	r3, [r5, #0]
 801801a:	2e00      	cmp	r6, #0
 801801c:	d1f6      	bne.n	801800c <rmw_validate_full_topic_name+0x24>
 801801e:	2000      	movs	r0, #0
 8018020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018024:	1e43      	subs	r3, r0, #1
 8018026:	5ce2      	ldrb	r2, [r4, r3]
 8018028:	2a2f      	cmp	r2, #47	; 0x2f
 801802a:	d041      	beq.n	80180b0 <rmw_validate_full_topic_name+0xc8>
 801802c:	1e62      	subs	r2, r4, #1
 801802e:	f1c4 0e01 	rsb	lr, r4, #1
 8018032:	eb02 0800 	add.w	r8, r2, r0
 8018036:	eb0e 0702 	add.w	r7, lr, r2
 801803a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801803e:	f023 0120 	bic.w	r1, r3, #32
 8018042:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 8018046:	3941      	subs	r1, #65	; 0x41
 8018048:	2919      	cmp	r1, #25
 801804a:	d90f      	bls.n	801806c <rmw_validate_full_topic_name+0x84>
 801804c:	f1bc 0f0a 	cmp.w	ip, #10
 8018050:	d90c      	bls.n	801806c <rmw_validate_full_topic_name+0x84>
 8018052:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 8018056:	fab3 f383 	clz	r3, r3
 801805a:	095b      	lsrs	r3, r3, #5
 801805c:	b933      	cbnz	r3, 801806c <rmw_validate_full_topic_name+0x84>
 801805e:	2204      	movs	r2, #4
 8018060:	602a      	str	r2, [r5, #0]
 8018062:	2e00      	cmp	r6, #0
 8018064:	d0db      	beq.n	801801e <rmw_validate_full_topic_name+0x36>
 8018066:	4618      	mov	r0, r3
 8018068:	6037      	str	r7, [r6, #0]
 801806a:	e7d2      	b.n	8018012 <rmw_validate_full_topic_name+0x2a>
 801806c:	4542      	cmp	r2, r8
 801806e:	d1e2      	bne.n	8018036 <rmw_validate_full_topic_name+0x4e>
 8018070:	2301      	movs	r3, #1
 8018072:	4f1a      	ldr	r7, [pc, #104]	; (80180dc <rmw_validate_full_topic_name+0xf4>)
 8018074:	e004      	b.n	8018080 <rmw_validate_full_topic_name+0x98>
 8018076:	4298      	cmp	r0, r3
 8018078:	f104 0401 	add.w	r4, r4, #1
 801807c:	4613      	mov	r3, r2
 801807e:	d91c      	bls.n	80180ba <rmw_validate_full_topic_name+0xd2>
 8018080:	4298      	cmp	r0, r3
 8018082:	f103 0201 	add.w	r2, r3, #1
 8018086:	d0f6      	beq.n	8018076 <rmw_validate_full_topic_name+0x8e>
 8018088:	7821      	ldrb	r1, [r4, #0]
 801808a:	292f      	cmp	r1, #47	; 0x2f
 801808c:	d1f3      	bne.n	8018076 <rmw_validate_full_topic_name+0x8e>
 801808e:	7861      	ldrb	r1, [r4, #1]
 8018090:	292f      	cmp	r1, #47	; 0x2f
 8018092:	d01e      	beq.n	80180d2 <rmw_validate_full_topic_name+0xea>
 8018094:	5dc9      	ldrb	r1, [r1, r7]
 8018096:	0749      	lsls	r1, r1, #29
 8018098:	d5ed      	bpl.n	8018076 <rmw_validate_full_topic_name+0x8e>
 801809a:	2206      	movs	r2, #6
 801809c:	602a      	str	r2, [r5, #0]
 801809e:	2e00      	cmp	r6, #0
 80180a0:	d0bd      	beq.n	801801e <rmw_validate_full_topic_name+0x36>
 80180a2:	2000      	movs	r0, #0
 80180a4:	6033      	str	r3, [r6, #0]
 80180a6:	e7b4      	b.n	8018012 <rmw_validate_full_topic_name+0x2a>
 80180a8:	200b      	movs	r0, #11
 80180aa:	4770      	bx	lr
 80180ac:	200b      	movs	r0, #11
 80180ae:	e7b0      	b.n	8018012 <rmw_validate_full_topic_name+0x2a>
 80180b0:	2203      	movs	r2, #3
 80180b2:	602a      	str	r2, [r5, #0]
 80180b4:	2e00      	cmp	r6, #0
 80180b6:	d1f4      	bne.n	80180a2 <rmw_validate_full_topic_name+0xba>
 80180b8:	e7b1      	b.n	801801e <rmw_validate_full_topic_name+0x36>
 80180ba:	28f7      	cmp	r0, #247	; 0xf7
 80180bc:	d803      	bhi.n	80180c6 <rmw_validate_full_topic_name+0xde>
 80180be:	2300      	movs	r3, #0
 80180c0:	4618      	mov	r0, r3
 80180c2:	602b      	str	r3, [r5, #0]
 80180c4:	e7a5      	b.n	8018012 <rmw_validate_full_topic_name+0x2a>
 80180c6:	2307      	movs	r3, #7
 80180c8:	602b      	str	r3, [r5, #0]
 80180ca:	2e00      	cmp	r6, #0
 80180cc:	d0a7      	beq.n	801801e <rmw_validate_full_topic_name+0x36>
 80180ce:	23f6      	movs	r3, #246	; 0xf6
 80180d0:	e7e7      	b.n	80180a2 <rmw_validate_full_topic_name+0xba>
 80180d2:	2205      	movs	r2, #5
 80180d4:	602a      	str	r2, [r5, #0]
 80180d6:	2e00      	cmp	r6, #0
 80180d8:	d1e3      	bne.n	80180a2 <rmw_validate_full_topic_name+0xba>
 80180da:	e7a0      	b.n	801801e <rmw_validate_full_topic_name+0x36>
 80180dc:	0801f5b0 	.word	0x0801f5b0

080180e0 <rmw_validate_namespace_with_size>:
 80180e0:	2800      	cmp	r0, #0
 80180e2:	d043      	beq.n	801816c <rmw_validate_namespace_with_size+0x8c>
 80180e4:	b570      	push	{r4, r5, r6, lr}
 80180e6:	4614      	mov	r4, r2
 80180e8:	b0c2      	sub	sp, #264	; 0x108
 80180ea:	b32a      	cbz	r2, 8018138 <rmw_validate_namespace_with_size+0x58>
 80180ec:	2901      	cmp	r1, #1
 80180ee:	460d      	mov	r5, r1
 80180f0:	461e      	mov	r6, r3
 80180f2:	d102      	bne.n	80180fa <rmw_validate_namespace_with_size+0x1a>
 80180f4:	7803      	ldrb	r3, [r0, #0]
 80180f6:	2b2f      	cmp	r3, #47	; 0x2f
 80180f8:	d012      	beq.n	8018120 <rmw_validate_namespace_with_size+0x40>
 80180fa:	aa01      	add	r2, sp, #4
 80180fc:	4669      	mov	r1, sp
 80180fe:	f7ff ff73 	bl	8017fe8 <rmw_validate_full_topic_name>
 8018102:	b980      	cbnz	r0, 8018126 <rmw_validate_namespace_with_size+0x46>
 8018104:	9a00      	ldr	r2, [sp, #0]
 8018106:	b14a      	cbz	r2, 801811c <rmw_validate_namespace_with_size+0x3c>
 8018108:	2a07      	cmp	r2, #7
 801810a:	d007      	beq.n	801811c <rmw_validate_namespace_with_size+0x3c>
 801810c:	1e53      	subs	r3, r2, #1
 801810e:	2b05      	cmp	r3, #5
 8018110:	d82e      	bhi.n	8018170 <rmw_validate_namespace_with_size+0x90>
 8018112:	e8df f003 	tbb	[pc, r3]
 8018116:	1f1c      	.short	0x1f1c
 8018118:	14282522 	.word	0x14282522
 801811c:	2df5      	cmp	r5, #245	; 0xf5
 801811e:	d804      	bhi.n	801812a <rmw_validate_namespace_with_size+0x4a>
 8018120:	2300      	movs	r3, #0
 8018122:	4618      	mov	r0, r3
 8018124:	6023      	str	r3, [r4, #0]
 8018126:	b042      	add	sp, #264	; 0x108
 8018128:	bd70      	pop	{r4, r5, r6, pc}
 801812a:	2307      	movs	r3, #7
 801812c:	6023      	str	r3, [r4, #0]
 801812e:	2e00      	cmp	r6, #0
 8018130:	d0f9      	beq.n	8018126 <rmw_validate_namespace_with_size+0x46>
 8018132:	23f4      	movs	r3, #244	; 0xf4
 8018134:	6033      	str	r3, [r6, #0]
 8018136:	e7f6      	b.n	8018126 <rmw_validate_namespace_with_size+0x46>
 8018138:	200b      	movs	r0, #11
 801813a:	b042      	add	sp, #264	; 0x108
 801813c:	bd70      	pop	{r4, r5, r6, pc}
 801813e:	2306      	movs	r3, #6
 8018140:	6023      	str	r3, [r4, #0]
 8018142:	2e00      	cmp	r6, #0
 8018144:	d0ef      	beq.n	8018126 <rmw_validate_namespace_with_size+0x46>
 8018146:	9b01      	ldr	r3, [sp, #4]
 8018148:	6033      	str	r3, [r6, #0]
 801814a:	b042      	add	sp, #264	; 0x108
 801814c:	bd70      	pop	{r4, r5, r6, pc}
 801814e:	2301      	movs	r3, #1
 8018150:	6023      	str	r3, [r4, #0]
 8018152:	e7f6      	b.n	8018142 <rmw_validate_namespace_with_size+0x62>
 8018154:	2302      	movs	r3, #2
 8018156:	6023      	str	r3, [r4, #0]
 8018158:	e7f3      	b.n	8018142 <rmw_validate_namespace_with_size+0x62>
 801815a:	2303      	movs	r3, #3
 801815c:	6023      	str	r3, [r4, #0]
 801815e:	e7f0      	b.n	8018142 <rmw_validate_namespace_with_size+0x62>
 8018160:	2304      	movs	r3, #4
 8018162:	6023      	str	r3, [r4, #0]
 8018164:	e7ed      	b.n	8018142 <rmw_validate_namespace_with_size+0x62>
 8018166:	2305      	movs	r3, #5
 8018168:	6023      	str	r3, [r4, #0]
 801816a:	e7ea      	b.n	8018142 <rmw_validate_namespace_with_size+0x62>
 801816c:	200b      	movs	r0, #11
 801816e:	4770      	bx	lr
 8018170:	4613      	mov	r3, r2
 8018172:	f44f 7180 	mov.w	r1, #256	; 0x100
 8018176:	4a03      	ldr	r2, [pc, #12]	; (8018184 <rmw_validate_namespace_with_size+0xa4>)
 8018178:	a802      	add	r0, sp, #8
 801817a:	f7ff fcbd 	bl	8017af8 <rcutils_snprintf>
 801817e:	2001      	movs	r0, #1
 8018180:	e7d1      	b.n	8018126 <rmw_validate_namespace_with_size+0x46>
 8018182:	bf00      	nop
 8018184:	0801eca0 	.word	0x0801eca0

08018188 <rmw_validate_namespace>:
 8018188:	b168      	cbz	r0, 80181a6 <rmw_validate_namespace+0x1e>
 801818a:	b570      	push	{r4, r5, r6, lr}
 801818c:	460d      	mov	r5, r1
 801818e:	4616      	mov	r6, r2
 8018190:	4604      	mov	r4, r0
 8018192:	f7e8 f8b5 	bl	8000300 <strlen>
 8018196:	4633      	mov	r3, r6
 8018198:	4601      	mov	r1, r0
 801819a:	462a      	mov	r2, r5
 801819c:	4620      	mov	r0, r4
 801819e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80181a2:	f7ff bf9d 	b.w	80180e0 <rmw_validate_namespace_with_size>
 80181a6:	200b      	movs	r0, #11
 80181a8:	4770      	bx	lr
 80181aa:	bf00      	nop

080181ac <rmw_namespace_validation_result_string>:
 80181ac:	2807      	cmp	r0, #7
 80181ae:	d803      	bhi.n	80181b8 <rmw_namespace_validation_result_string+0xc>
 80181b0:	4b02      	ldr	r3, [pc, #8]	; (80181bc <rmw_namespace_validation_result_string+0x10>)
 80181b2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80181b6:	4770      	bx	lr
 80181b8:	4801      	ldr	r0, [pc, #4]	; (80181c0 <rmw_namespace_validation_result_string+0x14>)
 80181ba:	4770      	bx	lr
 80181bc:	0801ee98 	.word	0x0801ee98
 80181c0:	0801ecf0 	.word	0x0801ecf0

080181c4 <rmw_validate_node_name>:
 80181c4:	2800      	cmp	r0, #0
 80181c6:	d042      	beq.n	801824e <rmw_validate_node_name+0x8a>
 80181c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181cc:	460d      	mov	r5, r1
 80181ce:	2900      	cmp	r1, #0
 80181d0:	d03f      	beq.n	8018252 <rmw_validate_node_name+0x8e>
 80181d2:	4604      	mov	r4, r0
 80181d4:	4616      	mov	r6, r2
 80181d6:	f7e8 f893 	bl	8000300 <strlen>
 80181da:	b310      	cbz	r0, 8018222 <rmw_validate_node_name+0x5e>
 80181dc:	1e63      	subs	r3, r4, #1
 80181de:	f1c4 0101 	rsb	r1, r4, #1
 80181e2:	eb03 0800 	add.w	r8, r3, r0
 80181e6:	18cf      	adds	r7, r1, r3
 80181e8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 80181ec:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 80181f0:	f02e 0c20 	bic.w	ip, lr, #32
 80181f4:	2a09      	cmp	r2, #9
 80181f6:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 80181fa:	d905      	bls.n	8018208 <rmw_validate_node_name+0x44>
 80181fc:	f1bc 0f19 	cmp.w	ip, #25
 8018200:	d902      	bls.n	8018208 <rmw_validate_node_name+0x44>
 8018202:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8018206:	d114      	bne.n	8018232 <rmw_validate_node_name+0x6e>
 8018208:	4598      	cmp	r8, r3
 801820a:	d1ec      	bne.n	80181e6 <rmw_validate_node_name+0x22>
 801820c:	7822      	ldrb	r2, [r4, #0]
 801820e:	4b16      	ldr	r3, [pc, #88]	; (8018268 <rmw_validate_node_name+0xa4>)
 8018210:	5cd3      	ldrb	r3, [r2, r3]
 8018212:	f013 0304 	ands.w	r3, r3, #4
 8018216:	d113      	bne.n	8018240 <rmw_validate_node_name+0x7c>
 8018218:	28ff      	cmp	r0, #255	; 0xff
 801821a:	d81c      	bhi.n	8018256 <rmw_validate_node_name+0x92>
 801821c:	4618      	mov	r0, r3
 801821e:	602b      	str	r3, [r5, #0]
 8018220:	e00c      	b.n	801823c <rmw_validate_node_name+0x78>
 8018222:	2301      	movs	r3, #1
 8018224:	602b      	str	r3, [r5, #0]
 8018226:	b17e      	cbz	r6, 8018248 <rmw_validate_node_name+0x84>
 8018228:	2300      	movs	r3, #0
 801822a:	4618      	mov	r0, r3
 801822c:	6033      	str	r3, [r6, #0]
 801822e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018232:	2302      	movs	r3, #2
 8018234:	602b      	str	r3, [r5, #0]
 8018236:	b13e      	cbz	r6, 8018248 <rmw_validate_node_name+0x84>
 8018238:	2000      	movs	r0, #0
 801823a:	6037      	str	r7, [r6, #0]
 801823c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018240:	2303      	movs	r3, #3
 8018242:	602b      	str	r3, [r5, #0]
 8018244:	2e00      	cmp	r6, #0
 8018246:	d1ef      	bne.n	8018228 <rmw_validate_node_name+0x64>
 8018248:	2000      	movs	r0, #0
 801824a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801824e:	200b      	movs	r0, #11
 8018250:	4770      	bx	lr
 8018252:	200b      	movs	r0, #11
 8018254:	e7f2      	b.n	801823c <rmw_validate_node_name+0x78>
 8018256:	2204      	movs	r2, #4
 8018258:	602a      	str	r2, [r5, #0]
 801825a:	2e00      	cmp	r6, #0
 801825c:	d0f4      	beq.n	8018248 <rmw_validate_node_name+0x84>
 801825e:	22fe      	movs	r2, #254	; 0xfe
 8018260:	4618      	mov	r0, r3
 8018262:	6032      	str	r2, [r6, #0]
 8018264:	e7ea      	b.n	801823c <rmw_validate_node_name+0x78>
 8018266:	bf00      	nop
 8018268:	0801f5b0 	.word	0x0801f5b0

0801826c <rmw_node_name_validation_result_string>:
 801826c:	2804      	cmp	r0, #4
 801826e:	d803      	bhi.n	8018278 <rmw_node_name_validation_result_string+0xc>
 8018270:	4b02      	ldr	r3, [pc, #8]	; (801827c <rmw_node_name_validation_result_string+0x10>)
 8018272:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8018276:	4770      	bx	lr
 8018278:	4801      	ldr	r0, [pc, #4]	; (8018280 <rmw_node_name_validation_result_string+0x14>)
 801827a:	4770      	bx	lr
 801827c:	0801efa4 	.word	0x0801efa4
 8018280:	0801eeb8 	.word	0x0801eeb8

08018284 <get_memory>:
 8018284:	4603      	mov	r3, r0
 8018286:	6840      	ldr	r0, [r0, #4]
 8018288:	b158      	cbz	r0, 80182a2 <get_memory+0x1e>
 801828a:	6842      	ldr	r2, [r0, #4]
 801828c:	605a      	str	r2, [r3, #4]
 801828e:	b10a      	cbz	r2, 8018294 <get_memory+0x10>
 8018290:	2100      	movs	r1, #0
 8018292:	6011      	str	r1, [r2, #0]
 8018294:	681a      	ldr	r2, [r3, #0]
 8018296:	6042      	str	r2, [r0, #4]
 8018298:	b102      	cbz	r2, 801829c <get_memory+0x18>
 801829a:	6010      	str	r0, [r2, #0]
 801829c:	2200      	movs	r2, #0
 801829e:	6002      	str	r2, [r0, #0]
 80182a0:	6018      	str	r0, [r3, #0]
 80182a2:	4770      	bx	lr

080182a4 <put_memory>:
 80182a4:	680b      	ldr	r3, [r1, #0]
 80182a6:	b10b      	cbz	r3, 80182ac <put_memory+0x8>
 80182a8:	684a      	ldr	r2, [r1, #4]
 80182aa:	605a      	str	r2, [r3, #4]
 80182ac:	684a      	ldr	r2, [r1, #4]
 80182ae:	b102      	cbz	r2, 80182b2 <put_memory+0xe>
 80182b0:	6013      	str	r3, [r2, #0]
 80182b2:	6803      	ldr	r3, [r0, #0]
 80182b4:	428b      	cmp	r3, r1
 80182b6:	6843      	ldr	r3, [r0, #4]
 80182b8:	bf08      	it	eq
 80182ba:	6002      	streq	r2, [r0, #0]
 80182bc:	604b      	str	r3, [r1, #4]
 80182be:	b103      	cbz	r3, 80182c2 <put_memory+0x1e>
 80182c0:	6019      	str	r1, [r3, #0]
 80182c2:	2300      	movs	r3, #0
 80182c4:	600b      	str	r3, [r1, #0]
 80182c6:	6041      	str	r1, [r0, #4]
 80182c8:	4770      	bx	lr
 80182ca:	bf00      	nop

080182cc <rmw_destroy_client>:
 80182cc:	b570      	push	{r4, r5, r6, lr}
 80182ce:	b128      	cbz	r0, 80182dc <rmw_destroy_client+0x10>
 80182d0:	4604      	mov	r4, r0
 80182d2:	6800      	ldr	r0, [r0, #0]
 80182d4:	460d      	mov	r5, r1
 80182d6:	f7f6 fac7 	bl	800e868 <is_uxrce_rmw_identifier_valid>
 80182da:	b910      	cbnz	r0, 80182e2 <rmw_destroy_client+0x16>
 80182dc:	2401      	movs	r4, #1
 80182de:	4620      	mov	r0, r4
 80182e0:	bd70      	pop	{r4, r5, r6, pc}
 80182e2:	6863      	ldr	r3, [r4, #4]
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	d0f9      	beq.n	80182dc <rmw_destroy_client+0x10>
 80182e8:	2d00      	cmp	r5, #0
 80182ea:	d0f7      	beq.n	80182dc <rmw_destroy_client+0x10>
 80182ec:	6828      	ldr	r0, [r5, #0]
 80182ee:	f7f6 fabb 	bl	800e868 <is_uxrce_rmw_identifier_valid>
 80182f2:	2800      	cmp	r0, #0
 80182f4:	d0f2      	beq.n	80182dc <rmw_destroy_client+0x10>
 80182f6:	686e      	ldr	r6, [r5, #4]
 80182f8:	2e00      	cmp	r6, #0
 80182fa:	d0ef      	beq.n	80182dc <rmw_destroy_client+0x10>
 80182fc:	6864      	ldr	r4, [r4, #4]
 80182fe:	6932      	ldr	r2, [r6, #16]
 8018300:	6920      	ldr	r0, [r4, #16]
 8018302:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8018306:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801830a:	6819      	ldr	r1, [r3, #0]
 801830c:	f002 f94e 	bl	801a5ac <uxr_buffer_cancel_data>
 8018310:	4602      	mov	r2, r0
 8018312:	6920      	ldr	r0, [r4, #16]
 8018314:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8018318:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801831c:	f7f6 f992 	bl	800e644 <run_xrce_session>
 8018320:	6920      	ldr	r0, [r4, #16]
 8018322:	6932      	ldr	r2, [r6, #16]
 8018324:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8018328:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801832c:	6819      	ldr	r1, [r3, #0]
 801832e:	f7f8 fa61 	bl	80107f4 <uxr_buffer_delete_entity>
 8018332:	4602      	mov	r2, r0
 8018334:	6920      	ldr	r0, [r4, #16]
 8018336:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801833a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801833e:	f7f6 f981 	bl	800e644 <run_xrce_session>
 8018342:	4603      	mov	r3, r0
 8018344:	4628      	mov	r0, r5
 8018346:	2b00      	cmp	r3, #0
 8018348:	bf14      	ite	ne
 801834a:	2400      	movne	r4, #0
 801834c:	2402      	moveq	r4, #2
 801834e:	f7f6 f855 	bl	800e3fc <rmw_uxrce_fini_client_memory>
 8018352:	e7c4      	b.n	80182de <rmw_destroy_client+0x12>

08018354 <rmw_get_gid_for_client>:
 8018354:	b1b9      	cbz	r1, 8018386 <rmw_get_gid_for_client+0x32>
 8018356:	b538      	push	{r3, r4, r5, lr}
 8018358:	4605      	mov	r5, r0
 801835a:	b180      	cbz	r0, 801837e <rmw_get_gid_for_client+0x2a>
 801835c:	6800      	ldr	r0, [r0, #0]
 801835e:	460c      	mov	r4, r1
 8018360:	b120      	cbz	r0, 801836c <rmw_get_gid_for_client+0x18>
 8018362:	4b0a      	ldr	r3, [pc, #40]	; (801838c <rmw_get_gid_for_client+0x38>)
 8018364:	6819      	ldr	r1, [r3, #0]
 8018366:	f7e7 ff6b 	bl	8000240 <strcmp>
 801836a:	b950      	cbnz	r0, 8018382 <rmw_get_gid_for_client+0x2e>
 801836c:	686b      	ldr	r3, [r5, #4]
 801836e:	2000      	movs	r0, #0
 8018370:	6060      	str	r0, [r4, #4]
 8018372:	60a0      	str	r0, [r4, #8]
 8018374:	60e0      	str	r0, [r4, #12]
 8018376:	6120      	str	r0, [r4, #16]
 8018378:	691b      	ldr	r3, [r3, #16]
 801837a:	6063      	str	r3, [r4, #4]
 801837c:	bd38      	pop	{r3, r4, r5, pc}
 801837e:	200b      	movs	r0, #11
 8018380:	bd38      	pop	{r3, r4, r5, pc}
 8018382:	200c      	movs	r0, #12
 8018384:	bd38      	pop	{r3, r4, r5, pc}
 8018386:	200b      	movs	r0, #11
 8018388:	4770      	bx	lr
 801838a:	bf00      	nop
 801838c:	0801efd0 	.word	0x0801efd0

08018390 <rmw_get_implementation_identifier>:
 8018390:	4b01      	ldr	r3, [pc, #4]	; (8018398 <rmw_get_implementation_identifier+0x8>)
 8018392:	6818      	ldr	r0, [r3, #0]
 8018394:	4770      	bx	lr
 8018396:	bf00      	nop
 8018398:	0801efd0 	.word	0x0801efd0

0801839c <rmw_init_options_init>:
 801839c:	b084      	sub	sp, #16
 801839e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183a0:	b083      	sub	sp, #12
 80183a2:	ad09      	add	r5, sp, #36	; 0x24
 80183a4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80183a8:	b130      	cbz	r0, 80183b8 <rmw_init_options_init+0x1c>
 80183aa:	4604      	mov	r4, r0
 80183ac:	4628      	mov	r0, r5
 80183ae:	f7f5 fc0b 	bl	800dbc8 <rcutils_allocator_is_valid>
 80183b2:	b108      	cbz	r0, 80183b8 <rmw_init_options_init+0x1c>
 80183b4:	68a6      	ldr	r6, [r4, #8]
 80183b6:	b12e      	cbz	r6, 80183c4 <rmw_init_options_init+0x28>
 80183b8:	200b      	movs	r0, #11
 80183ba:	b003      	add	sp, #12
 80183bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80183c0:	b004      	add	sp, #16
 80183c2:	4770      	bx	lr
 80183c4:	2200      	movs	r2, #0
 80183c6:	2300      	movs	r3, #0
 80183c8:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 80183cc:	f8df e098 	ldr.w	lr, [pc, #152]	; 8018468 <rmw_init_options_init+0xcc>
 80183d0:	466f      	mov	r7, sp
 80183d2:	e9c4 2300 	strd	r2, r3, [r4]
 80183d6:	4b20      	ldr	r3, [pc, #128]	; (8018458 <rmw_init_options_init+0xbc>)
 80183d8:	681b      	ldr	r3, [r3, #0]
 80183da:	60a3      	str	r3, [r4, #8]
 80183dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80183de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80183e2:	682b      	ldr	r3, [r5, #0]
 80183e4:	4638      	mov	r0, r7
 80183e6:	f8cc 3000 	str.w	r3, [ip]
 80183ea:	f8c4 e03c 	str.w	lr, [r4, #60]	; 0x3c
 80183ee:	60e6      	str	r6, [r4, #12]
 80183f0:	f7ff fd46 	bl	8017e80 <rmw_get_default_security_options>
 80183f4:	f104 0310 	add.w	r3, r4, #16
 80183f8:	2203      	movs	r2, #3
 80183fa:	e897 0003 	ldmia.w	r7, {r0, r1}
 80183fe:	e883 0003 	stmia.w	r3, {r0, r1}
 8018402:	4816      	ldr	r0, [pc, #88]	; (801845c <rmw_init_options_init+0xc0>)
 8018404:	4916      	ldr	r1, [pc, #88]	; (8018460 <rmw_init_options_init+0xc4>)
 8018406:	7626      	strb	r6, [r4, #24]
 8018408:	f7f5 ff38 	bl	800e27c <rmw_uxrce_init_init_options_impl_memory>
 801840c:	4813      	ldr	r0, [pc, #76]	; (801845c <rmw_init_options_init+0xc0>)
 801840e:	f7ff ff39 	bl	8018284 <get_memory>
 8018412:	b1f0      	cbz	r0, 8018452 <rmw_init_options_init+0xb6>
 8018414:	4a13      	ldr	r2, [pc, #76]	; (8018464 <rmw_init_options_init+0xc8>)
 8018416:	6883      	ldr	r3, [r0, #8]
 8018418:	6851      	ldr	r1, [r2, #4]
 801841a:	6563      	str	r3, [r4, #84]	; 0x54
 801841c:	7810      	ldrb	r0, [r2, #0]
 801841e:	6159      	str	r1, [r3, #20]
 8018420:	68d1      	ldr	r1, [r2, #12]
 8018422:	7418      	strb	r0, [r3, #16]
 8018424:	61d9      	str	r1, [r3, #28]
 8018426:	6911      	ldr	r1, [r2, #16]
 8018428:	6219      	str	r1, [r3, #32]
 801842a:	6951      	ldr	r1, [r2, #20]
 801842c:	6892      	ldr	r2, [r2, #8]
 801842e:	6259      	str	r1, [r3, #36]	; 0x24
 8018430:	619a      	str	r2, [r3, #24]
 8018432:	f7f9 fe83 	bl	801213c <uxr_nanos>
 8018436:	f003 fe81 	bl	801c13c <srand>
 801843a:	f003 fead 	bl	801c198 <rand>
 801843e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8018440:	6298      	str	r0, [r3, #40]	; 0x28
 8018442:	2800      	cmp	r0, #0
 8018444:	d0f9      	beq.n	801843a <rmw_init_options_init+0x9e>
 8018446:	2000      	movs	r0, #0
 8018448:	b003      	add	sp, #12
 801844a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801844e:	b004      	add	sp, #16
 8018450:	4770      	bx	lr
 8018452:	2001      	movs	r0, #1
 8018454:	e7b1      	b.n	80183ba <rmw_init_options_init+0x1e>
 8018456:	bf00      	nop
 8018458:	0801efd0 	.word	0x0801efd0
 801845c:	2001032c 	.word	0x2001032c
 8018460:	2000bb00 	.word	0x2000bb00
 8018464:	2000b98c 	.word	0x2000b98c
 8018468:	0801e9c0 	.word	0x0801e9c0

0801846c <rmw_init_options_copy>:
 801846c:	b570      	push	{r4, r5, r6, lr}
 801846e:	b158      	cbz	r0, 8018488 <rmw_init_options_copy+0x1c>
 8018470:	460d      	mov	r5, r1
 8018472:	b149      	cbz	r1, 8018488 <rmw_init_options_copy+0x1c>
 8018474:	4604      	mov	r4, r0
 8018476:	6880      	ldr	r0, [r0, #8]
 8018478:	b120      	cbz	r0, 8018484 <rmw_init_options_copy+0x18>
 801847a:	4b13      	ldr	r3, [pc, #76]	; (80184c8 <rmw_init_options_copy+0x5c>)
 801847c:	6819      	ldr	r1, [r3, #0]
 801847e:	f7e7 fedf 	bl	8000240 <strcmp>
 8018482:	b9d8      	cbnz	r0, 80184bc <rmw_init_options_copy+0x50>
 8018484:	68ae      	ldr	r6, [r5, #8]
 8018486:	b116      	cbz	r6, 801848e <rmw_init_options_copy+0x22>
 8018488:	260b      	movs	r6, #11
 801848a:	4630      	mov	r0, r6
 801848c:	bd70      	pop	{r4, r5, r6, pc}
 801848e:	2258      	movs	r2, #88	; 0x58
 8018490:	4621      	mov	r1, r4
 8018492:	4628      	mov	r0, r5
 8018494:	f004 fa3f 	bl	801c916 <memcpy>
 8018498:	480c      	ldr	r0, [pc, #48]	; (80184cc <rmw_init_options_copy+0x60>)
 801849a:	f7ff fef3 	bl	8018284 <get_memory>
 801849e:	b180      	cbz	r0, 80184c2 <rmw_init_options_copy+0x56>
 80184a0:	6883      	ldr	r3, [r0, #8]
 80184a2:	656b      	str	r3, [r5, #84]	; 0x54
 80184a4:	6d65      	ldr	r5, [r4, #84]	; 0x54
 80184a6:	f103 0410 	add.w	r4, r3, #16
 80184aa:	3510      	adds	r5, #16
 80184ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80184ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80184b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80184b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80184b8:	4630      	mov	r0, r6
 80184ba:	bd70      	pop	{r4, r5, r6, pc}
 80184bc:	260c      	movs	r6, #12
 80184be:	4630      	mov	r0, r6
 80184c0:	bd70      	pop	{r4, r5, r6, pc}
 80184c2:	2601      	movs	r6, #1
 80184c4:	e7e1      	b.n	801848a <rmw_init_options_copy+0x1e>
 80184c6:	bf00      	nop
 80184c8:	0801efd0 	.word	0x0801efd0
 80184cc:	2001032c 	.word	0x2001032c

080184d0 <rmw_init_options_fini>:
 80184d0:	b368      	cbz	r0, 801852e <rmw_init_options_fini+0x5e>
 80184d2:	b510      	push	{r4, lr}
 80184d4:	4604      	mov	r4, r0
 80184d6:	b096      	sub	sp, #88	; 0x58
 80184d8:	3040      	adds	r0, #64	; 0x40
 80184da:	f7f5 fb75 	bl	800dbc8 <rcutils_allocator_is_valid>
 80184de:	b1f0      	cbz	r0, 801851e <rmw_init_options_fini+0x4e>
 80184e0:	68a0      	ldr	r0, [r4, #8]
 80184e2:	b120      	cbz	r0, 80184ee <rmw_init_options_fini+0x1e>
 80184e4:	4b13      	ldr	r3, [pc, #76]	; (8018534 <rmw_init_options_fini+0x64>)
 80184e6:	6819      	ldr	r1, [r3, #0]
 80184e8:	f7e7 feaa 	bl	8000240 <strcmp>
 80184ec:	b9e8      	cbnz	r0, 801852a <rmw_init_options_fini+0x5a>
 80184ee:	4b12      	ldr	r3, [pc, #72]	; (8018538 <rmw_init_options_fini+0x68>)
 80184f0:	6819      	ldr	r1, [r3, #0]
 80184f2:	b1b9      	cbz	r1, 8018524 <rmw_init_options_fini+0x54>
 80184f4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80184f6:	e001      	b.n	80184fc <rmw_init_options_fini+0x2c>
 80184f8:	6849      	ldr	r1, [r1, #4]
 80184fa:	b199      	cbz	r1, 8018524 <rmw_init_options_fini+0x54>
 80184fc:	688b      	ldr	r3, [r1, #8]
 80184fe:	429a      	cmp	r2, r3
 8018500:	d1fa      	bne.n	80184f8 <rmw_init_options_fini+0x28>
 8018502:	480d      	ldr	r0, [pc, #52]	; (8018538 <rmw_init_options_fini+0x68>)
 8018504:	f7ff fece 	bl	80182a4 <put_memory>
 8018508:	4668      	mov	r0, sp
 801850a:	f7ff fca5 	bl	8017e58 <rmw_get_zero_initialized_init_options>
 801850e:	2258      	movs	r2, #88	; 0x58
 8018510:	4669      	mov	r1, sp
 8018512:	4620      	mov	r0, r4
 8018514:	f004 f9ff 	bl	801c916 <memcpy>
 8018518:	2000      	movs	r0, #0
 801851a:	b016      	add	sp, #88	; 0x58
 801851c:	bd10      	pop	{r4, pc}
 801851e:	200b      	movs	r0, #11
 8018520:	b016      	add	sp, #88	; 0x58
 8018522:	bd10      	pop	{r4, pc}
 8018524:	2001      	movs	r0, #1
 8018526:	b016      	add	sp, #88	; 0x58
 8018528:	bd10      	pop	{r4, pc}
 801852a:	200c      	movs	r0, #12
 801852c:	e7f5      	b.n	801851a <rmw_init_options_fini+0x4a>
 801852e:	200b      	movs	r0, #11
 8018530:	4770      	bx	lr
 8018532:	bf00      	nop
 8018534:	0801efd0 	.word	0x0801efd0
 8018538:	2001032c 	.word	0x2001032c

0801853c <rmw_init>:
 801853c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018540:	b083      	sub	sp, #12
 8018542:	2800      	cmp	r0, #0
 8018544:	f000 80d3 	beq.w	80186ee <rmw_init+0x1b2>
 8018548:	460e      	mov	r6, r1
 801854a:	2900      	cmp	r1, #0
 801854c:	f000 80cf 	beq.w	80186ee <rmw_init+0x1b2>
 8018550:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8018552:	4605      	mov	r5, r0
 8018554:	2b00      	cmp	r3, #0
 8018556:	f000 80ca 	beq.w	80186ee <rmw_init+0x1b2>
 801855a:	4b78      	ldr	r3, [pc, #480]	; (801873c <rmw_init+0x200>)
 801855c:	6880      	ldr	r0, [r0, #8]
 801855e:	681f      	ldr	r7, [r3, #0]
 8018560:	b128      	cbz	r0, 801856e <rmw_init+0x32>
 8018562:	4639      	mov	r1, r7
 8018564:	f7e7 fe6c 	bl	8000240 <strcmp>
 8018568:	2800      	cmp	r0, #0
 801856a:	f040 80ca 	bne.w	8018702 <rmw_init+0x1c6>
 801856e:	4c74      	ldr	r4, [pc, #464]	; (8018740 <rmw_init+0x204>)
 8018570:	f04f 0800 	mov.w	r8, #0
 8018574:	4973      	ldr	r1, [pc, #460]	; (8018744 <rmw_init+0x208>)
 8018576:	4874      	ldr	r0, [pc, #464]	; (8018748 <rmw_init+0x20c>)
 8018578:	e9d5 2300 	ldrd	r2, r3, [r5]
 801857c:	60b7      	str	r7, [r6, #8]
 801857e:	e9c6 2300 	strd	r2, r3, [r6]
 8018582:	68eb      	ldr	r3, [r5, #12]
 8018584:	2201      	movs	r2, #1
 8018586:	66b3      	str	r3, [r6, #104]	; 0x68
 8018588:	f7f5 fe18 	bl	800e1bc <rmw_uxrce_init_session_memory>
 801858c:	4620      	mov	r0, r4
 801858e:	2204      	movs	r2, #4
 8018590:	496e      	ldr	r1, [pc, #440]	; (801874c <rmw_init+0x210>)
 8018592:	f7f5 fe53 	bl	800e23c <rmw_uxrce_init_static_input_buffer_memory>
 8018596:	486c      	ldr	r0, [pc, #432]	; (8018748 <rmw_init+0x20c>)
 8018598:	f884 800d 	strb.w	r8, [r4, #13]
 801859c:	f7ff fe72 	bl	8018284 <get_memory>
 80185a0:	2800      	cmp	r0, #0
 80185a2:	f000 80a9 	beq.w	80186f8 <rmw_init+0x1bc>
 80185a6:	6884      	ldr	r4, [r0, #8]
 80185a8:	6d68      	ldr	r0, [r5, #84]	; 0x54
 80185aa:	f104 0910 	add.w	r9, r4, #16
 80185ae:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80185b0:	f890 c010 	ldrb.w	ip, [r0, #16]
 80185b4:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80185b8:	9101      	str	r1, [sp, #4]
 80185ba:	4661      	mov	r1, ip
 80185bc:	6a00      	ldr	r0, [r0, #32]
 80185be:	9000      	str	r0, [sp, #0]
 80185c0:	4648      	mov	r0, r9
 80185c2:	f001 fa2b 	bl	8019a1c <uxr_set_custom_transport_callbacks>
 80185c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80185ca:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80185ce:	4960      	ldr	r1, [pc, #384]	; (8018750 <rmw_init+0x214>)
 80185d0:	4860      	ldr	r0, [pc, #384]	; (8018754 <rmw_init+0x218>)
 80185d2:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 80185d6:	f504 725e 	add.w	r2, r4, #888	; 0x378
 80185da:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 80185de:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 80185e2:	2201      	movs	r2, #1
 80185e4:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 80185e8:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 80185ec:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 80185f0:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 80185f4:	66f4      	str	r4, [r6, #108]	; 0x6c
 80185f6:	f7f5 fdc1 	bl	800e17c <rmw_uxrce_init_node_memory>
 80185fa:	2205      	movs	r2, #5
 80185fc:	4956      	ldr	r1, [pc, #344]	; (8018758 <rmw_init+0x21c>)
 80185fe:	4857      	ldr	r0, [pc, #348]	; (801875c <rmw_init+0x220>)
 8018600:	f7f5 fd9c 	bl	800e13c <rmw_uxrce_init_subscription_memory>
 8018604:	220a      	movs	r2, #10
 8018606:	4956      	ldr	r1, [pc, #344]	; (8018760 <rmw_init+0x224>)
 8018608:	4856      	ldr	r0, [pc, #344]	; (8018764 <rmw_init+0x228>)
 801860a:	f7f5 fd77 	bl	800e0fc <rmw_uxrce_init_publisher_memory>
 801860e:	2202      	movs	r2, #2
 8018610:	4955      	ldr	r1, [pc, #340]	; (8018768 <rmw_init+0x22c>)
 8018612:	4856      	ldr	r0, [pc, #344]	; (801876c <rmw_init+0x230>)
 8018614:	f7f5 fd32 	bl	800e07c <rmw_uxrce_init_service_memory>
 8018618:	2201      	movs	r2, #1
 801861a:	4955      	ldr	r1, [pc, #340]	; (8018770 <rmw_init+0x234>)
 801861c:	4855      	ldr	r0, [pc, #340]	; (8018774 <rmw_init+0x238>)
 801861e:	f7f5 fd4d 	bl	800e0bc <rmw_uxrce_init_client_memory>
 8018622:	220f      	movs	r2, #15
 8018624:	4954      	ldr	r1, [pc, #336]	; (8018778 <rmw_init+0x23c>)
 8018626:	4855      	ldr	r0, [pc, #340]	; (801877c <rmw_init+0x240>)
 8018628:	f7f5 fde8 	bl	800e1fc <rmw_uxrce_init_topic_memory>
 801862c:	2203      	movs	r2, #3
 801862e:	4954      	ldr	r1, [pc, #336]	; (8018780 <rmw_init+0x244>)
 8018630:	4854      	ldr	r0, [pc, #336]	; (8018784 <rmw_init+0x248>)
 8018632:	f7f5 fe23 	bl	800e27c <rmw_uxrce_init_init_options_impl_memory>
 8018636:	2204      	movs	r2, #4
 8018638:	4953      	ldr	r1, [pc, #332]	; (8018788 <rmw_init+0x24c>)
 801863a:	4854      	ldr	r0, [pc, #336]	; (801878c <rmw_init+0x250>)
 801863c:	f7f5 fe3e 	bl	800e2bc <rmw_uxrce_init_wait_set_memory>
 8018640:	4953      	ldr	r1, [pc, #332]	; (8018790 <rmw_init+0x254>)
 8018642:	4854      	ldr	r0, [pc, #336]	; (8018794 <rmw_init+0x258>)
 8018644:	2204      	movs	r2, #4
 8018646:	f7f5 fe59 	bl	800e2fc <rmw_uxrce_init_guard_condition_memory>
 801864a:	4642      	mov	r2, r8
 801864c:	6d69      	ldr	r1, [r5, #84]	; 0x54
 801864e:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 8018650:	f000 feba 	bl	80193c8 <rmw_uxrce_transport_init>
 8018654:	4607      	mov	r7, r0
 8018656:	2800      	cmp	r0, #0
 8018658:	d158      	bne.n	801870c <rmw_init+0x1d0>
 801865a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 801865c:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8018660:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8018664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018666:	4628      	mov	r0, r5
 8018668:	f7f8 fbbe 	bl	8010de8 <uxr_init_session>
 801866c:	4622      	mov	r2, r4
 801866e:	494a      	ldr	r1, [pc, #296]	; (8018798 <rmw_init+0x25c>)
 8018670:	4628      	mov	r0, r5
 8018672:	f7f8 fbdd 	bl	8010e30 <uxr_set_topic_callback>
 8018676:	463a      	mov	r2, r7
 8018678:	4948      	ldr	r1, [pc, #288]	; (801879c <rmw_init+0x260>)
 801867a:	4628      	mov	r0, r5
 801867c:	f7f8 fbd4 	bl	8010e28 <uxr_set_status_callback>
 8018680:	463a      	mov	r2, r7
 8018682:	4947      	ldr	r1, [pc, #284]	; (80187a0 <rmw_init+0x264>)
 8018684:	4628      	mov	r0, r5
 8018686:	f7f8 fbd7 	bl	8010e38 <uxr_set_request_callback>
 801868a:	463a      	mov	r2, r7
 801868c:	4945      	ldr	r1, [pc, #276]	; (80187a4 <rmw_init+0x268>)
 801868e:	4628      	mov	r0, r5
 8018690:	f7f8 fbd6 	bl	8010e40 <uxr_set_reply_callback>
 8018694:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8018698:	2304      	movs	r3, #4
 801869a:	f504 7165 	add.w	r1, r4, #916	; 0x394
 801869e:	0092      	lsls	r2, r2, #2
 80186a0:	4628      	mov	r0, r5
 80186a2:	f7f8 fc0d 	bl	8010ec0 <uxr_create_input_reliable_stream>
 80186a6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80186aa:	2304      	movs	r3, #4
 80186ac:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 80186b0:	0092      	lsls	r2, r2, #2
 80186b2:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 80186b6:	4628      	mov	r0, r5
 80186b8:	f7f8 fbd8 	bl	8010e6c <uxr_create_output_reliable_stream>
 80186bc:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 80186c0:	4628      	mov	r0, r5
 80186c2:	f7f8 fbf7 	bl	8010eb4 <uxr_create_input_best_effort_stream>
 80186c6:	f241 3194 	movw	r1, #5012	; 0x1394
 80186ca:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 80186ce:	4628      	mov	r0, r5
 80186d0:	4421      	add	r1, r4
 80186d2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80186d6:	f7f8 fbb7 	bl	8010e48 <uxr_create_output_best_effort_stream>
 80186da:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 80186de:	4628      	mov	r0, r5
 80186e0:	f7f9 f940 	bl	8011964 <uxr_create_session>
 80186e4:	b1f8      	cbz	r0, 8018726 <rmw_init+0x1ea>
 80186e6:	4638      	mov	r0, r7
 80186e8:	b003      	add	sp, #12
 80186ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80186ee:	270b      	movs	r7, #11
 80186f0:	4638      	mov	r0, r7
 80186f2:	b003      	add	sp, #12
 80186f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80186f8:	2701      	movs	r7, #1
 80186fa:	4638      	mov	r0, r7
 80186fc:	b003      	add	sp, #12
 80186fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018702:	270c      	movs	r7, #12
 8018704:	4638      	mov	r0, r7
 8018706:	b003      	add	sp, #12
 8018708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801870c:	4648      	mov	r0, r9
 801870e:	f001 f9c3 	bl	8019a98 <uxr_close_custom_transport>
 8018712:	4621      	mov	r1, r4
 8018714:	480c      	ldr	r0, [pc, #48]	; (8018748 <rmw_init+0x20c>)
 8018716:	f7ff fdc5 	bl	80182a4 <put_memory>
 801871a:	4638      	mov	r0, r7
 801871c:	f8c6 806c 	str.w	r8, [r6, #108]	; 0x6c
 8018720:	b003      	add	sp, #12
 8018722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018726:	4648      	mov	r0, r9
 8018728:	f001 f9b6 	bl	8019a98 <uxr_close_custom_transport>
 801872c:	4621      	mov	r1, r4
 801872e:	4806      	ldr	r0, [pc, #24]	; (8018748 <rmw_init+0x20c>)
 8018730:	f7ff fdb8 	bl	80182a4 <put_memory>
 8018734:	66f7      	str	r7, [r6, #108]	; 0x6c
 8018736:	2701      	movs	r7, #1
 8018738:	e7d5      	b.n	80186e6 <rmw_init+0x1aa>
 801873a:	bf00      	nop
 801873c:	0801efd0 	.word	0x0801efd0
 8018740:	2001037c 	.word	0x2001037c
 8018744:	2000c628 	.word	0x2000c628
 8018748:	2001036c 	.word	0x2001036c
 801874c:	2000dbd0 	.word	0x2000dbd0
 8018750:	2000bb84 	.word	0x2000bb84
 8018754:	2001033c 	.word	0x2001033c
 8018758:	2000fcd0 	.word	0x2000fcd0
 801875c:	2001038c 	.word	0x2001038c
 8018760:	2000bc28 	.word	0x2000bc28
 8018764:	2001034c 	.word	0x2001034c
 8018768:	2000c498 	.word	0x2000c498
 801876c:	2001035c 	.word	0x2001035c
 8018770:	2000b9b8 	.word	0x2000b9b8
 8018774:	2000b9a8 	.word	0x2000b9a8
 8018778:	20010108 	.word	0x20010108
 801877c:	2001039c 	.word	0x2001039c
 8018780:	2000bb00 	.word	0x2000bb00
 8018784:	2001032c 	.word	0x2001032c
 8018788:	200102ac 	.word	0x200102ac
 801878c:	200103ac 	.word	0x200103ac
 8018790:	2000ba80 	.word	0x2000ba80
 8018794:	2001031c 	.word	0x2001031c
 8018798:	0801bb85 	.word	0x0801bb85
 801879c:	0801bb7d 	.word	0x0801bb7d
 80187a0:	0801bc1d 	.word	0x0801bc1d
 80187a4:	0801bcb9 	.word	0x0801bcb9

080187a8 <rmw_context_fini>:
 80187a8:	4b17      	ldr	r3, [pc, #92]	; (8018808 <rmw_context_fini+0x60>)
 80187aa:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 80187ac:	b570      	push	{r4, r5, r6, lr}
 80187ae:	681c      	ldr	r4, [r3, #0]
 80187b0:	4605      	mov	r5, r0
 80187b2:	b334      	cbz	r4, 8018802 <rmw_context_fini+0x5a>
 80187b4:	2600      	movs	r6, #0
 80187b6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 80187ba:	6902      	ldr	r2, [r0, #16]
 80187bc:	428a      	cmp	r2, r1
 80187be:	d018      	beq.n	80187f2 <rmw_context_fini+0x4a>
 80187c0:	2c00      	cmp	r4, #0
 80187c2:	d1f8      	bne.n	80187b6 <rmw_context_fini+0xe>
 80187c4:	b189      	cbz	r1, 80187ea <rmw_context_fini+0x42>
 80187c6:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 80187ca:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 80187ce:	789b      	ldrb	r3, [r3, #2]
 80187d0:	2b01      	cmp	r3, #1
 80187d2:	bf14      	ite	ne
 80187d4:	210a      	movne	r1, #10
 80187d6:	2100      	moveq	r1, #0
 80187d8:	f7f9 f89c 	bl	8011914 <uxr_delete_session_retries>
 80187dc:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 80187de:	f7f5 fdad 	bl	800e33c <rmw_uxrce_fini_session_memory>
 80187e2:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 80187e4:	3010      	adds	r0, #16
 80187e6:	f001 f957 	bl	8019a98 <uxr_close_custom_transport>
 80187ea:	2300      	movs	r3, #0
 80187ec:	4630      	mov	r0, r6
 80187ee:	66eb      	str	r3, [r5, #108]	; 0x6c
 80187f0:	bd70      	pop	{r4, r5, r6, pc}
 80187f2:	3018      	adds	r0, #24
 80187f4:	f000 f90e 	bl	8018a14 <rmw_destroy_node>
 80187f8:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 80187fa:	4606      	mov	r6, r0
 80187fc:	2c00      	cmp	r4, #0
 80187fe:	d1da      	bne.n	80187b6 <rmw_context_fini+0xe>
 8018800:	e7e0      	b.n	80187c4 <rmw_context_fini+0x1c>
 8018802:	4626      	mov	r6, r4
 8018804:	e7de      	b.n	80187c4 <rmw_context_fini+0x1c>
 8018806:	bf00      	nop
 8018808:	2001033c 	.word	0x2001033c

0801880c <create_topic>:
 801880c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018810:	4605      	mov	r5, r0
 8018812:	b084      	sub	sp, #16
 8018814:	4822      	ldr	r0, [pc, #136]	; (80188a0 <create_topic+0x94>)
 8018816:	460f      	mov	r7, r1
 8018818:	4616      	mov	r6, r2
 801881a:	f7ff fd33 	bl	8018284 <get_memory>
 801881e:	4604      	mov	r4, r0
 8018820:	2800      	cmp	r0, #0
 8018822:	d039      	beq.n	8018898 <create_topic+0x8c>
 8018824:	692b      	ldr	r3, [r5, #16]
 8018826:	2102      	movs	r1, #2
 8018828:	6884      	ldr	r4, [r0, #8]
 801882a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801882e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 80188a8 <create_topic+0x9c>
 8018832:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 8018836:	1c42      	adds	r2, r0, #1
 8018838:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801883c:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 8018840:	f7f8 fa14 	bl	8010c6c <uxr_object_id>
 8018844:	223c      	movs	r2, #60	; 0x3c
 8018846:	6120      	str	r0, [r4, #16]
 8018848:	4641      	mov	r1, r8
 801884a:	4638      	mov	r0, r7
 801884c:	f7f5 fff4 	bl	800e838 <generate_topic_name>
 8018850:	b1f0      	cbz	r0, 8018890 <create_topic+0x84>
 8018852:	4f14      	ldr	r7, [pc, #80]	; (80188a4 <create_topic+0x98>)
 8018854:	4630      	mov	r0, r6
 8018856:	2264      	movs	r2, #100	; 0x64
 8018858:	4639      	mov	r1, r7
 801885a:	f7f5 ffbf 	bl	800e7dc <generate_type_name>
 801885e:	b1b8      	cbz	r0, 8018890 <create_topic+0x84>
 8018860:	6928      	ldr	r0, [r5, #16]
 8018862:	2106      	movs	r1, #6
 8018864:	696b      	ldr	r3, [r5, #20]
 8018866:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 801886a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801886e:	f8cd 8000 	str.w	r8, [sp]
 8018872:	e9cd 7101 	strd	r7, r1, [sp, #4]
 8018876:	6811      	ldr	r1, [r2, #0]
 8018878:	6922      	ldr	r2, [r4, #16]
 801887a:	f7f8 f839 	bl	80108f0 <uxr_buffer_create_topic_bin>
 801887e:	4602      	mov	r2, r0
 8018880:	6928      	ldr	r0, [r5, #16]
 8018882:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8018886:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801888a:	f7f5 fedb 	bl	800e644 <run_xrce_session>
 801888e:	b918      	cbnz	r0, 8018898 <create_topic+0x8c>
 8018890:	4620      	mov	r0, r4
 8018892:	2400      	movs	r4, #0
 8018894:	f7f5 fdc8 	bl	800e428 <rmw_uxrce_fini_topic_memory>
 8018898:	4620      	mov	r0, r4
 801889a:	b004      	add	sp, #16
 801889c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188a0:	2001039c 	.word	0x2001039c
 80188a4:	20010900 	.word	0x20010900
 80188a8:	200108c4 	.word	0x200108c4

080188ac <destroy_topic>:
 80188ac:	b538      	push	{r3, r4, r5, lr}
 80188ae:	6985      	ldr	r5, [r0, #24]
 80188b0:	b1dd      	cbz	r5, 80188ea <destroy_topic+0x3e>
 80188b2:	4604      	mov	r4, r0
 80188b4:	6928      	ldr	r0, [r5, #16]
 80188b6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80188ba:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80188be:	6922      	ldr	r2, [r4, #16]
 80188c0:	6819      	ldr	r1, [r3, #0]
 80188c2:	f7f7 ff97 	bl	80107f4 <uxr_buffer_delete_entity>
 80188c6:	4602      	mov	r2, r0
 80188c8:	6928      	ldr	r0, [r5, #16]
 80188ca:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80188ce:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80188d2:	f7f5 feb7 	bl	800e644 <run_xrce_session>
 80188d6:	4603      	mov	r3, r0
 80188d8:	4620      	mov	r0, r4
 80188da:	2b00      	cmp	r3, #0
 80188dc:	bf14      	ite	ne
 80188de:	2400      	movne	r4, #0
 80188e0:	2402      	moveq	r4, #2
 80188e2:	f7f5 fda1 	bl	800e428 <rmw_uxrce_fini_topic_memory>
 80188e6:	4620      	mov	r0, r4
 80188e8:	bd38      	pop	{r3, r4, r5, pc}
 80188ea:	2401      	movs	r4, #1
 80188ec:	4620      	mov	r0, r4
 80188ee:	bd38      	pop	{r3, r4, r5, pc}

080188f0 <create_node>:
 80188f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80188f4:	b083      	sub	sp, #12
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	d064      	beq.n	80189c4 <create_node+0xd4>
 80188fa:	4606      	mov	r6, r0
 80188fc:	4838      	ldr	r0, [pc, #224]	; (80189e0 <create_node+0xf0>)
 80188fe:	460f      	mov	r7, r1
 8018900:	4690      	mov	r8, r2
 8018902:	461d      	mov	r5, r3
 8018904:	f7ff fcbe 	bl	8018284 <get_memory>
 8018908:	2800      	cmp	r0, #0
 801890a:	d05b      	beq.n	80189c4 <create_node+0xd4>
 801890c:	6884      	ldr	r4, [r0, #8]
 801890e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8018910:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8018914:	f104 0518 	add.w	r5, r4, #24
 8018918:	6123      	str	r3, [r4, #16]
 801891a:	f7ff fd39 	bl	8018390 <rmw_get_implementation_identifier>
 801891e:	f8c4 9020 	str.w	r9, [r4, #32]
 8018922:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8018926:	4630      	mov	r0, r6
 8018928:	f7e7 fcea 	bl	8000300 <strlen>
 801892c:	1c42      	adds	r2, r0, #1
 801892e:	2a3c      	cmp	r2, #60	; 0x3c
 8018930:	d840      	bhi.n	80189b4 <create_node+0xc4>
 8018932:	4648      	mov	r0, r9
 8018934:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8018938:	4631      	mov	r1, r6
 801893a:	f003 ffec 	bl	801c916 <memcpy>
 801893e:	4638      	mov	r0, r7
 8018940:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8018944:	f7e7 fcdc 	bl	8000300 <strlen>
 8018948:	1c42      	adds	r2, r0, #1
 801894a:	2a3c      	cmp	r2, #60	; 0x3c
 801894c:	d832      	bhi.n	80189b4 <create_node+0xc4>
 801894e:	4639      	mov	r1, r7
 8018950:	4648      	mov	r0, r9
 8018952:	f003 ffe0 	bl	801c916 <memcpy>
 8018956:	6923      	ldr	r3, [r4, #16]
 8018958:	2101      	movs	r1, #1
 801895a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801895e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8018962:	1842      	adds	r2, r0, r1
 8018964:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8018968:	f7f8 f980 	bl	8010c6c <uxr_object_id>
 801896c:	6160      	str	r0, [r4, #20]
 801896e:	783b      	ldrb	r3, [r7, #0]
 8018970:	2b2f      	cmp	r3, #47	; 0x2f
 8018972:	d12c      	bne.n	80189ce <create_node+0xde>
 8018974:	787b      	ldrb	r3, [r7, #1]
 8018976:	bb53      	cbnz	r3, 80189ce <create_node+0xde>
 8018978:	4633      	mov	r3, r6
 801897a:	4a1a      	ldr	r2, [pc, #104]	; (80189e4 <create_node+0xf4>)
 801897c:	213c      	movs	r1, #60	; 0x3c
 801897e:	481a      	ldr	r0, [pc, #104]	; (80189e8 <create_node+0xf8>)
 8018980:	f003 fdbe 	bl	801c500 <sniprintf>
 8018984:	6920      	ldr	r0, [r4, #16]
 8018986:	2106      	movs	r1, #6
 8018988:	fa1f f388 	uxth.w	r3, r8
 801898c:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8018990:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018994:	9101      	str	r1, [sp, #4]
 8018996:	4914      	ldr	r1, [pc, #80]	; (80189e8 <create_node+0xf8>)
 8018998:	9100      	str	r1, [sp, #0]
 801899a:	6811      	ldr	r1, [r2, #0]
 801899c:	6962      	ldr	r2, [r4, #20]
 801899e:	f7f7 ff75 	bl	801088c <uxr_buffer_create_participant_bin>
 80189a2:	4602      	mov	r2, r0
 80189a4:	6920      	ldr	r0, [r4, #16]
 80189a6:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80189aa:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80189ae:	f7f5 fe49 	bl	800e644 <run_xrce_session>
 80189b2:	b918      	cbnz	r0, 80189bc <create_node+0xcc>
 80189b4:	4628      	mov	r0, r5
 80189b6:	2500      	movs	r5, #0
 80189b8:	f7f5 fcc6 	bl	800e348 <rmw_uxrce_fini_node_memory>
 80189bc:	4628      	mov	r0, r5
 80189be:	b003      	add	sp, #12
 80189c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189c4:	2500      	movs	r5, #0
 80189c6:	4628      	mov	r0, r5
 80189c8:	b003      	add	sp, #12
 80189ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189ce:	463b      	mov	r3, r7
 80189d0:	4a06      	ldr	r2, [pc, #24]	; (80189ec <create_node+0xfc>)
 80189d2:	213c      	movs	r1, #60	; 0x3c
 80189d4:	9600      	str	r6, [sp, #0]
 80189d6:	4804      	ldr	r0, [pc, #16]	; (80189e8 <create_node+0xf8>)
 80189d8:	f003 fd92 	bl	801c500 <sniprintf>
 80189dc:	e7d2      	b.n	8018984 <create_node+0x94>
 80189de:	bf00      	nop
 80189e0:	2001033c 	.word	0x2001033c
 80189e4:	0801e52c 	.word	0x0801e52c
 80189e8:	20010964 	.word	0x20010964
 80189ec:	0801e9c8 	.word	0x0801e9c8

080189f0 <rmw_create_node>:
 80189f0:	468c      	mov	ip, r1
 80189f2:	4611      	mov	r1, r2
 80189f4:	f1bc 0f00 	cmp.w	ip, #0
 80189f8:	d00a      	beq.n	8018a10 <rmw_create_node+0x20>
 80189fa:	f89c 3000 	ldrb.w	r3, [ip]
 80189fe:	b13b      	cbz	r3, 8018a10 <rmw_create_node+0x20>
 8018a00:	b132      	cbz	r2, 8018a10 <rmw_create_node+0x20>
 8018a02:	7813      	ldrb	r3, [r2, #0]
 8018a04:	b123      	cbz	r3, 8018a10 <rmw_create_node+0x20>
 8018a06:	4603      	mov	r3, r0
 8018a08:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8018a0a:	4660      	mov	r0, ip
 8018a0c:	f7ff bf70 	b.w	80188f0 <create_node>
 8018a10:	2000      	movs	r0, #0
 8018a12:	4770      	bx	lr

08018a14 <rmw_destroy_node>:
 8018a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a16:	b328      	cbz	r0, 8018a64 <rmw_destroy_node+0x50>
 8018a18:	4607      	mov	r7, r0
 8018a1a:	6800      	ldr	r0, [r0, #0]
 8018a1c:	b120      	cbz	r0, 8018a28 <rmw_destroy_node+0x14>
 8018a1e:	4b37      	ldr	r3, [pc, #220]	; (8018afc <rmw_destroy_node+0xe8>)
 8018a20:	6819      	ldr	r1, [r3, #0]
 8018a22:	f7e7 fc0d 	bl	8000240 <strcmp>
 8018a26:	b9e8      	cbnz	r0, 8018a64 <rmw_destroy_node+0x50>
 8018a28:	687d      	ldr	r5, [r7, #4]
 8018a2a:	b1dd      	cbz	r5, 8018a64 <rmw_destroy_node+0x50>
 8018a2c:	4b34      	ldr	r3, [pc, #208]	; (8018b00 <rmw_destroy_node+0xec>)
 8018a2e:	681c      	ldr	r4, [r3, #0]
 8018a30:	2c00      	cmp	r4, #0
 8018a32:	d060      	beq.n	8018af6 <rmw_destroy_node+0xe2>
 8018a34:	2600      	movs	r6, #0
 8018a36:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018a3a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8018a3e:	429d      	cmp	r5, r3
 8018a40:	d013      	beq.n	8018a6a <rmw_destroy_node+0x56>
 8018a42:	2c00      	cmp	r4, #0
 8018a44:	d1f7      	bne.n	8018a36 <rmw_destroy_node+0x22>
 8018a46:	4b2f      	ldr	r3, [pc, #188]	; (8018b04 <rmw_destroy_node+0xf0>)
 8018a48:	681c      	ldr	r4, [r3, #0]
 8018a4a:	b1c4      	cbz	r4, 8018a7e <rmw_destroy_node+0x6a>
 8018a4c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018a50:	6a0b      	ldr	r3, [r1, #32]
 8018a52:	429d      	cmp	r5, r3
 8018a54:	d1f9      	bne.n	8018a4a <rmw_destroy_node+0x36>
 8018a56:	317c      	adds	r1, #124	; 0x7c
 8018a58:	4638      	mov	r0, r7
 8018a5a:	f000 fbff 	bl	801925c <rmw_destroy_subscription>
 8018a5e:	2801      	cmp	r0, #1
 8018a60:	4606      	mov	r6, r0
 8018a62:	d1f2      	bne.n	8018a4a <rmw_destroy_node+0x36>
 8018a64:	2601      	movs	r6, #1
 8018a66:	4630      	mov	r0, r6
 8018a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018a6a:	3184      	adds	r1, #132	; 0x84
 8018a6c:	4638      	mov	r0, r7
 8018a6e:	f7f5 fab1 	bl	800dfd4 <rmw_destroy_publisher>
 8018a72:	2801      	cmp	r0, #1
 8018a74:	4606      	mov	r6, r0
 8018a76:	d0f5      	beq.n	8018a64 <rmw_destroy_node+0x50>
 8018a78:	2c00      	cmp	r4, #0
 8018a7a:	d1dc      	bne.n	8018a36 <rmw_destroy_node+0x22>
 8018a7c:	e7e3      	b.n	8018a46 <rmw_destroy_node+0x32>
 8018a7e:	4b22      	ldr	r3, [pc, #136]	; (8018b08 <rmw_destroy_node+0xf4>)
 8018a80:	681c      	ldr	r4, [r3, #0]
 8018a82:	b16c      	cbz	r4, 8018aa0 <rmw_destroy_node+0x8c>
 8018a84:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018a88:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8018a8a:	429d      	cmp	r5, r3
 8018a8c:	d1f9      	bne.n	8018a82 <rmw_destroy_node+0x6e>
 8018a8e:	317c      	adds	r1, #124	; 0x7c
 8018a90:	4638      	mov	r0, r7
 8018a92:	f000 fa6d 	bl	8018f70 <rmw_destroy_service>
 8018a96:	2801      	cmp	r0, #1
 8018a98:	4606      	mov	r6, r0
 8018a9a:	d0e3      	beq.n	8018a64 <rmw_destroy_node+0x50>
 8018a9c:	2c00      	cmp	r4, #0
 8018a9e:	d1f1      	bne.n	8018a84 <rmw_destroy_node+0x70>
 8018aa0:	4b1a      	ldr	r3, [pc, #104]	; (8018b0c <rmw_destroy_node+0xf8>)
 8018aa2:	681c      	ldr	r4, [r3, #0]
 8018aa4:	b16c      	cbz	r4, 8018ac2 <rmw_destroy_node+0xae>
 8018aa6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018aaa:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8018aac:	429d      	cmp	r5, r3
 8018aae:	d1f9      	bne.n	8018aa4 <rmw_destroy_node+0x90>
 8018ab0:	317c      	adds	r1, #124	; 0x7c
 8018ab2:	4638      	mov	r0, r7
 8018ab4:	f7ff fc0a 	bl	80182cc <rmw_destroy_client>
 8018ab8:	2801      	cmp	r0, #1
 8018aba:	4606      	mov	r6, r0
 8018abc:	d0d2      	beq.n	8018a64 <rmw_destroy_node+0x50>
 8018abe:	2c00      	cmp	r4, #0
 8018ac0:	d1f1      	bne.n	8018aa6 <rmw_destroy_node+0x92>
 8018ac2:	6928      	ldr	r0, [r5, #16]
 8018ac4:	696a      	ldr	r2, [r5, #20]
 8018ac6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8018aca:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018ace:	6819      	ldr	r1, [r3, #0]
 8018ad0:	f7f7 fe90 	bl	80107f4 <uxr_buffer_delete_entity>
 8018ad4:	4602      	mov	r2, r0
 8018ad6:	6928      	ldr	r0, [r5, #16]
 8018ad8:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8018adc:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8018ae0:	f7f5 fdb0 	bl	800e644 <run_xrce_session>
 8018ae4:	4603      	mov	r3, r0
 8018ae6:	4638      	mov	r0, r7
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	bf08      	it	eq
 8018aec:	2602      	moveq	r6, #2
 8018aee:	f7f5 fc2b 	bl	800e348 <rmw_uxrce_fini_node_memory>
 8018af2:	4630      	mov	r0, r6
 8018af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018af6:	4626      	mov	r6, r4
 8018af8:	e7a5      	b.n	8018a46 <rmw_destroy_node+0x32>
 8018afa:	bf00      	nop
 8018afc:	0801efd0 	.word	0x0801efd0
 8018b00:	2001034c 	.word	0x2001034c
 8018b04:	2001038c 	.word	0x2001038c
 8018b08:	2001035c 	.word	0x2001035c
 8018b0c:	2000b9a8 	.word	0x2000b9a8

08018b10 <rmw_node_get_graph_guard_condition>:
 8018b10:	6843      	ldr	r3, [r0, #4]
 8018b12:	6918      	ldr	r0, [r3, #16]
 8018b14:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8018b18:	4770      	bx	lr
 8018b1a:	bf00      	nop

08018b1c <rmw_send_request>:
 8018b1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018b20:	4604      	mov	r4, r0
 8018b22:	6800      	ldr	r0, [r0, #0]
 8018b24:	b08b      	sub	sp, #44	; 0x2c
 8018b26:	460e      	mov	r6, r1
 8018b28:	4615      	mov	r5, r2
 8018b2a:	b128      	cbz	r0, 8018b38 <rmw_send_request+0x1c>
 8018b2c:	4b21      	ldr	r3, [pc, #132]	; (8018bb4 <rmw_send_request+0x98>)
 8018b2e:	6819      	ldr	r1, [r3, #0]
 8018b30:	f7e7 fb86 	bl	8000240 <strcmp>
 8018b34:	2800      	cmp	r0, #0
 8018b36:	d139      	bne.n	8018bac <rmw_send_request+0x90>
 8018b38:	6864      	ldr	r4, [r4, #4]
 8018b3a:	2700      	movs	r7, #0
 8018b3c:	6963      	ldr	r3, [r4, #20]
 8018b3e:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 8018b42:	689b      	ldr	r3, [r3, #8]
 8018b44:	4798      	blx	r3
 8018b46:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8018b4a:	4630      	mov	r0, r6
 8018b4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018b50:	4798      	blx	r3
 8018b52:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018b56:	9000      	str	r0, [sp, #0]
 8018b58:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8018b5c:	6922      	ldr	r2, [r4, #16]
 8018b5e:	ab02      	add	r3, sp, #8
 8018b60:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8018b62:	f7f9 fb8b 	bl	801227c <uxr_prepare_output_stream>
 8018b66:	e9c5 0700 	strd	r0, r7, [r5]
 8018b6a:	b198      	cbz	r0, 8018b94 <rmw_send_request+0x78>
 8018b6c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8018b70:	a902      	add	r1, sp, #8
 8018b72:	4630      	mov	r0, r6
 8018b74:	4798      	blx	r3
 8018b76:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8018b7a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8018b7e:	2b01      	cmp	r3, #1
 8018b80:	d00c      	beq.n	8018b9c <rmw_send_request+0x80>
 8018b82:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8018b84:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018b88:	f7f8 fd7a 	bl	8011680 <uxr_run_session_until_confirm_delivery>
 8018b8c:	4638      	mov	r0, r7
 8018b8e:	b00b      	add	sp, #44	; 0x2c
 8018b90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b94:	2001      	movs	r0, #1
 8018b96:	b00b      	add	sp, #44	; 0x2c
 8018b98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018b9c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018ba0:	f7f8 f9b4 	bl	8010f0c <uxr_flash_output_streams>
 8018ba4:	4638      	mov	r0, r7
 8018ba6:	b00b      	add	sp, #44	; 0x2c
 8018ba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018bac:	200c      	movs	r0, #12
 8018bae:	b00b      	add	sp, #44	; 0x2c
 8018bb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018bb4:	0801efd0 	.word	0x0801efd0

08018bb8 <rmw_take_request>:
 8018bb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018bbc:	4605      	mov	r5, r0
 8018bbe:	6800      	ldr	r0, [r0, #0]
 8018bc0:	b089      	sub	sp, #36	; 0x24
 8018bc2:	460c      	mov	r4, r1
 8018bc4:	4690      	mov	r8, r2
 8018bc6:	461e      	mov	r6, r3
 8018bc8:	b128      	cbz	r0, 8018bd6 <rmw_take_request+0x1e>
 8018bca:	4b28      	ldr	r3, [pc, #160]	; (8018c6c <rmw_take_request+0xb4>)
 8018bcc:	6819      	ldr	r1, [r3, #0]
 8018bce:	f7e7 fb37 	bl	8000240 <strcmp>
 8018bd2:	2800      	cmp	r0, #0
 8018bd4:	d146      	bne.n	8018c64 <rmw_take_request+0xac>
 8018bd6:	b10e      	cbz	r6, 8018bdc <rmw_take_request+0x24>
 8018bd8:	2300      	movs	r3, #0
 8018bda:	7033      	strb	r3, [r6, #0]
 8018bdc:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8018be0:	f7f5 fcb2 	bl	800e548 <rmw_uxrce_clean_expired_static_input_buffer>
 8018be4:	4648      	mov	r0, r9
 8018be6:	f7f5 fc85 	bl	800e4f4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018bea:	4607      	mov	r7, r0
 8018bec:	b3b0      	cbz	r0, 8018c5c <rmw_take_request+0xa4>
 8018bee:	6885      	ldr	r5, [r0, #8]
 8018bf0:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8018bf4:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 8018bf8:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8018bfc:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8018c00:	7423      	strb	r3, [r4, #16]
 8018c02:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 8018c06:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 8018c0a:	f8a4 2011 	strh.w	r2, [r4, #17]
 8018c0e:	74e3      	strb	r3, [r4, #19]
 8018c10:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 8018c14:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 8018c18:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 8018c1c:	6161      	str	r1, [r4, #20]
 8018c1e:	61a2      	str	r2, [r4, #24]
 8018c20:	61e3      	str	r3, [r4, #28]
 8018c22:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8018c26:	689b      	ldr	r3, [r3, #8]
 8018c28:	4798      	blx	r3
 8018c2a:	6844      	ldr	r4, [r0, #4]
 8018c2c:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8018c30:	f105 0110 	add.w	r1, r5, #16
 8018c34:	4668      	mov	r0, sp
 8018c36:	f7f7 fd69 	bl	801070c <ucdr_init_buffer>
 8018c3a:	4641      	mov	r1, r8
 8018c3c:	68e3      	ldr	r3, [r4, #12]
 8018c3e:	4668      	mov	r0, sp
 8018c40:	4798      	blx	r3
 8018c42:	4639      	mov	r1, r7
 8018c44:	4604      	mov	r4, r0
 8018c46:	480a      	ldr	r0, [pc, #40]	; (8018c70 <rmw_take_request+0xb8>)
 8018c48:	f7ff fb2c 	bl	80182a4 <put_memory>
 8018c4c:	b106      	cbz	r6, 8018c50 <rmw_take_request+0x98>
 8018c4e:	7034      	strb	r4, [r6, #0]
 8018c50:	f084 0001 	eor.w	r0, r4, #1
 8018c54:	b2c0      	uxtb	r0, r0
 8018c56:	b009      	add	sp, #36	; 0x24
 8018c58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018c5c:	2001      	movs	r0, #1
 8018c5e:	b009      	add	sp, #36	; 0x24
 8018c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018c64:	200c      	movs	r0, #12
 8018c66:	b009      	add	sp, #36	; 0x24
 8018c68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018c6c:	0801efd0 	.word	0x0801efd0
 8018c70:	2001037c 	.word	0x2001037c

08018c74 <rmw_send_response>:
 8018c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018c76:	4605      	mov	r5, r0
 8018c78:	6800      	ldr	r0, [r0, #0]
 8018c7a:	b091      	sub	sp, #68	; 0x44
 8018c7c:	460c      	mov	r4, r1
 8018c7e:	4616      	mov	r6, r2
 8018c80:	b128      	cbz	r0, 8018c8e <rmw_send_response+0x1a>
 8018c82:	4b29      	ldr	r3, [pc, #164]	; (8018d28 <rmw_send_response+0xb4>)
 8018c84:	6819      	ldr	r1, [r3, #0]
 8018c86:	f7e7 fadb 	bl	8000240 <strcmp>
 8018c8a:	2800      	cmp	r0, #0
 8018c8c:	d141      	bne.n	8018d12 <rmw_send_response+0x9e>
 8018c8e:	686d      	ldr	r5, [r5, #4]
 8018c90:	68a1      	ldr	r1, [r4, #8]
 8018c92:	6860      	ldr	r0, [r4, #4]
 8018c94:	6faf      	ldr	r7, [r5, #120]	; 0x78
 8018c96:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8018c9a:	9307      	str	r3, [sp, #28]
 8018c9c:	4623      	mov	r3, r4
 8018c9e:	9206      	str	r2, [sp, #24]
 8018ca0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018ca4:	789b      	ldrb	r3, [r3, #2]
 8018ca6:	f88d 2017 	strb.w	r2, [sp, #23]
 8018caa:	f88d 3016 	strb.w	r3, [sp, #22]
 8018cae:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8018cb2:	68e2      	ldr	r2, [r4, #12]
 8018cb4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018cb8:	ab02      	add	r3, sp, #8
 8018cba:	696c      	ldr	r4, [r5, #20]
 8018cbc:	c307      	stmia	r3!, {r0, r1, r2}
 8018cbe:	68e3      	ldr	r3, [r4, #12]
 8018cc0:	4798      	blx	r3
 8018cc2:	6844      	ldr	r4, [r0, #4]
 8018cc4:	4630      	mov	r0, r6
 8018cc6:	6923      	ldr	r3, [r4, #16]
 8018cc8:	4798      	blx	r3
 8018cca:	f100 0318 	add.w	r3, r0, #24
 8018cce:	6938      	ldr	r0, [r7, #16]
 8018cd0:	9300      	str	r3, [sp, #0]
 8018cd2:	ab08      	add	r3, sp, #32
 8018cd4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018cd8:	692a      	ldr	r2, [r5, #16]
 8018cda:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8018cdc:	f7f9 face 	bl	801227c <uxr_prepare_output_stream>
 8018ce0:	b910      	cbnz	r0, 8018ce8 <rmw_send_response+0x74>
 8018ce2:	2001      	movs	r0, #1
 8018ce4:	b011      	add	sp, #68	; 0x44
 8018ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ce8:	a902      	add	r1, sp, #8
 8018cea:	a808      	add	r0, sp, #32
 8018cec:	f7fa fc32 	bl	8013554 <uxr_serialize_SampleIdentity>
 8018cf0:	68a3      	ldr	r3, [r4, #8]
 8018cf2:	a908      	add	r1, sp, #32
 8018cf4:	4630      	mov	r0, r6
 8018cf6:	4798      	blx	r3
 8018cf8:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8018cfc:	6938      	ldr	r0, [r7, #16]
 8018cfe:	2b01      	cmp	r3, #1
 8018d00:	d00a      	beq.n	8018d18 <rmw_send_response+0xa4>
 8018d02:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8018d04:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018d08:	f7f8 fcba 	bl	8011680 <uxr_run_session_until_confirm_delivery>
 8018d0c:	2000      	movs	r0, #0
 8018d0e:	b011      	add	sp, #68	; 0x44
 8018d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d12:	200c      	movs	r0, #12
 8018d14:	b011      	add	sp, #68	; 0x44
 8018d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d18:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018d1c:	f7f8 f8f6 	bl	8010f0c <uxr_flash_output_streams>
 8018d20:	2000      	movs	r0, #0
 8018d22:	b011      	add	sp, #68	; 0x44
 8018d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d26:	bf00      	nop
 8018d28:	0801efd0 	.word	0x0801efd0

08018d2c <rmw_take_response>:
 8018d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d30:	4604      	mov	r4, r0
 8018d32:	6800      	ldr	r0, [r0, #0]
 8018d34:	b088      	sub	sp, #32
 8018d36:	460f      	mov	r7, r1
 8018d38:	4690      	mov	r8, r2
 8018d3a:	461d      	mov	r5, r3
 8018d3c:	b120      	cbz	r0, 8018d48 <rmw_take_response+0x1c>
 8018d3e:	4b1d      	ldr	r3, [pc, #116]	; (8018db4 <rmw_take_response+0x88>)
 8018d40:	6819      	ldr	r1, [r3, #0]
 8018d42:	f7e7 fa7d 	bl	8000240 <strcmp>
 8018d46:	bb68      	cbnz	r0, 8018da4 <rmw_take_response+0x78>
 8018d48:	b10d      	cbz	r5, 8018d4e <rmw_take_response+0x22>
 8018d4a:	2300      	movs	r3, #0
 8018d4c:	702b      	strb	r3, [r5, #0]
 8018d4e:	6864      	ldr	r4, [r4, #4]
 8018d50:	f7f5 fbfa 	bl	800e548 <rmw_uxrce_clean_expired_static_input_buffer>
 8018d54:	4620      	mov	r0, r4
 8018d56:	f7f5 fbcd 	bl	800e4f4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018d5a:	4606      	mov	r6, r0
 8018d5c:	b330      	cbz	r0, 8018dac <rmw_take_response+0x80>
 8018d5e:	6963      	ldr	r3, [r4, #20]
 8018d60:	6884      	ldr	r4, [r0, #8]
 8018d62:	68db      	ldr	r3, [r3, #12]
 8018d64:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 8018d68:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8018d6c:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8018d70:	4798      	blx	r3
 8018d72:	6847      	ldr	r7, [r0, #4]
 8018d74:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 8018d78:	f104 0110 	add.w	r1, r4, #16
 8018d7c:	4668      	mov	r0, sp
 8018d7e:	f7f7 fcc5 	bl	801070c <ucdr_init_buffer>
 8018d82:	4641      	mov	r1, r8
 8018d84:	68fb      	ldr	r3, [r7, #12]
 8018d86:	4668      	mov	r0, sp
 8018d88:	4798      	blx	r3
 8018d8a:	4631      	mov	r1, r6
 8018d8c:	4604      	mov	r4, r0
 8018d8e:	480a      	ldr	r0, [pc, #40]	; (8018db8 <rmw_take_response+0x8c>)
 8018d90:	f7ff fa88 	bl	80182a4 <put_memory>
 8018d94:	b105      	cbz	r5, 8018d98 <rmw_take_response+0x6c>
 8018d96:	702c      	strb	r4, [r5, #0]
 8018d98:	f084 0001 	eor.w	r0, r4, #1
 8018d9c:	b2c0      	uxtb	r0, r0
 8018d9e:	b008      	add	sp, #32
 8018da0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018da4:	200c      	movs	r0, #12
 8018da6:	b008      	add	sp, #32
 8018da8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018dac:	2001      	movs	r0, #1
 8018dae:	b008      	add	sp, #32
 8018db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018db4:	0801efd0 	.word	0x0801efd0
 8018db8:	2001037c 	.word	0x2001037c

08018dbc <rmw_create_service>:
 8018dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dc0:	b091      	sub	sp, #68	; 0x44
 8018dc2:	2900      	cmp	r1, #0
 8018dc4:	f000 80bb 	beq.w	8018f3e <rmw_create_service+0x182>
 8018dc8:	4606      	mov	r6, r0
 8018dca:	2800      	cmp	r0, #0
 8018dcc:	f000 80b7 	beq.w	8018f3e <rmw_create_service+0x182>
 8018dd0:	4614      	mov	r4, r2
 8018dd2:	6800      	ldr	r0, [r0, #0]
 8018dd4:	4689      	mov	r9, r1
 8018dd6:	461d      	mov	r5, r3
 8018dd8:	f7f5 fd46 	bl	800e868 <is_uxrce_rmw_identifier_valid>
 8018ddc:	2c00      	cmp	r4, #0
 8018dde:	f000 80ae 	beq.w	8018f3e <rmw_create_service+0x182>
 8018de2:	f080 0001 	eor.w	r0, r0, #1
 8018de6:	b2c0      	uxtb	r0, r0
 8018de8:	2800      	cmp	r0, #0
 8018dea:	f040 80a8 	bne.w	8018f3e <rmw_create_service+0x182>
 8018dee:	7823      	ldrb	r3, [r4, #0]
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	f000 80a4 	beq.w	8018f3e <rmw_create_service+0x182>
 8018df6:	2d00      	cmp	r5, #0
 8018df8:	f000 80a1 	beq.w	8018f3e <rmw_create_service+0x182>
 8018dfc:	4856      	ldr	r0, [pc, #344]	; (8018f58 <rmw_create_service+0x19c>)
 8018dfe:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8018e02:	f7ff fa3f 	bl	8018284 <get_memory>
 8018e06:	4606      	mov	r6, r0
 8018e08:	2800      	cmp	r0, #0
 8018e0a:	f000 8099 	beq.w	8018f40 <rmw_create_service+0x184>
 8018e0e:	6887      	ldr	r7, [r0, #8]
 8018e10:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 8018e14:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 8018e18:	f7ff faba 	bl	8018390 <rmw_get_implementation_identifier>
 8018e1c:	67f8      	str	r0, [r7, #124]	; 0x7c
 8018e1e:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 8018e22:	4620      	mov	r0, r4
 8018e24:	f7e7 fa6c 	bl	8000300 <strlen>
 8018e28:	1c42      	adds	r2, r0, #1
 8018e2a:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 8018e2e:	2a3c      	cmp	r2, #60	; 0x3c
 8018e30:	f200 808a 	bhi.w	8018f48 <rmw_create_service+0x18c>
 8018e34:	4621      	mov	r1, r4
 8018e36:	4650      	mov	r0, sl
 8018e38:	f003 fd6d 	bl	801c916 <memcpy>
 8018e3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018e40:	4629      	mov	r1, r5
 8018e42:	2250      	movs	r2, #80	; 0x50
 8018e44:	f107 0020 	add.w	r0, r7, #32
 8018e48:	f8c7 8078 	str.w	r8, [r7, #120]	; 0x78
 8018e4c:	677b      	str	r3, [r7, #116]	; 0x74
 8018e4e:	f003 fd62 	bl	801c916 <memcpy>
 8018e52:	4648      	mov	r0, r9
 8018e54:	4941      	ldr	r1, [pc, #260]	; (8018f5c <rmw_create_service+0x1a0>)
 8018e56:	f7f5 fd21 	bl	800e89c <get_service_typesupport_handle>
 8018e5a:	2800      	cmp	r0, #0
 8018e5c:	d074      	beq.n	8018f48 <rmw_create_service+0x18c>
 8018e5e:	6843      	ldr	r3, [r0, #4]
 8018e60:	617b      	str	r3, [r7, #20]
 8018e62:	2b00      	cmp	r3, #0
 8018e64:	d070      	beq.n	8018f48 <rmw_create_service+0x18c>
 8018e66:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018e6a:	2108      	movs	r1, #8
 8018e6c:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8018f64 <rmw_create_service+0x1a8>
 8018e70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018e74:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8018f68 <rmw_create_service+0x1ac>
 8018e78:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	; 0x5a2
 8018e7c:	1c42      	adds	r2, r0, #1
 8018e7e:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
 8018e82:	f7f7 fef3 	bl	8010c6c <uxr_object_id>
 8018e86:	2364      	movs	r3, #100	; 0x64
 8018e88:	6138      	str	r0, [r7, #16]
 8018e8a:	4652      	mov	r2, sl
 8018e8c:	4649      	mov	r1, r9
 8018e8e:	6978      	ldr	r0, [r7, #20]
 8018e90:	f7f5 fc3e 	bl	800e710 <generate_service_types>
 8018e94:	2800      	cmp	r0, #0
 8018e96:	d057      	beq.n	8018f48 <rmw_create_service+0x18c>
 8018e98:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8018f6c <rmw_create_service+0x1b0>
 8018e9c:	233c      	movs	r3, #60	; 0x3c
 8018e9e:	4a30      	ldr	r2, [pc, #192]	; (8018f60 <rmw_create_service+0x1a4>)
 8018ea0:	4620      	mov	r0, r4
 8018ea2:	4659      	mov	r1, fp
 8018ea4:	f7f5 fc02 	bl	800e6ac <generate_service_topics>
 8018ea8:	2800      	cmp	r0, #0
 8018eaa:	d04d      	beq.n	8018f48 <rmw_create_service+0x18c>
 8018eac:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018eb0:	a80c      	add	r0, sp, #48	; 0x30
 8018eb2:	4629      	mov	r1, r5
 8018eb4:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8018eb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018ebc:	f7f5 fbde 	bl	800e67c <convert_qos_profile>
 8018ec0:	4a27      	ldr	r2, [pc, #156]	; (8018f60 <rmw_create_service+0x1a4>)
 8018ec2:	a80c      	add	r0, sp, #48	; 0x30
 8018ec4:	9400      	str	r4, [sp, #0]
 8018ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ec8:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018ecc:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8018ed0:	c803      	ldmia	r0, {r0, r1}
 8018ed2:	9a08      	ldr	r2, [sp, #32]
 8018ed4:	9005      	str	r0, [sp, #20]
 8018ed6:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8018eda:	2306      	movs	r3, #6
 8018edc:	f8ad 1018 	strh.w	r1, [sp, #24]
 8018ee0:	9307      	str	r3, [sp, #28]
 8018ee2:	6811      	ldr	r1, [r2, #0]
 8018ee4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8018ee8:	693a      	ldr	r2, [r7, #16]
 8018eea:	f7f7 fe85 	bl	8010bf8 <uxr_buffer_create_replier_bin>
 8018eee:	4602      	mov	r2, r0
 8018ef0:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8018ef4:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8018ef8:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8018efc:	f7f5 fba2 	bl	800e644 <run_xrce_session>
 8018f00:	b310      	cbz	r0, 8018f48 <rmw_create_service+0x18c>
 8018f02:	7a2b      	ldrb	r3, [r5, #8]
 8018f04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018f08:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8018f0c:	2b02      	cmp	r3, #2
 8018f0e:	920e      	str	r2, [sp, #56]	; 0x38
 8018f10:	f04f 0200 	mov.w	r2, #0
 8018f14:	920f      	str	r2, [sp, #60]	; 0x3c
 8018f16:	bf0c      	ite	eq
 8018f18:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	; 0x37c
 8018f1c:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	; 0x374
 8018f20:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018f24:	930b      	str	r3, [sp, #44]	; 0x2c
 8018f26:	ab0e      	add	r3, sp, #56	; 0x38
 8018f28:	673a      	str	r2, [r7, #112]	; 0x70
 8018f2a:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 8018f2e:	9300      	str	r3, [sp, #0]
 8018f30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018f32:	6811      	ldr	r1, [r2, #0]
 8018f34:	693a      	ldr	r2, [r7, #16]
 8018f36:	f001 faff 	bl	801a538 <uxr_buffer_request_data>
 8018f3a:	8338      	strh	r0, [r7, #24]
 8018f3c:	e000      	b.n	8018f40 <rmw_create_service+0x184>
 8018f3e:	2600      	movs	r6, #0
 8018f40:	4630      	mov	r0, r6
 8018f42:	b011      	add	sp, #68	; 0x44
 8018f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f48:	4630      	mov	r0, r6
 8018f4a:	2600      	movs	r6, #0
 8018f4c:	f7f5 fa40 	bl	800e3d0 <rmw_uxrce_fini_service_memory>
 8018f50:	4630      	mov	r0, r6
 8018f52:	b011      	add	sp, #68	; 0x44
 8018f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f58:	2001035c 	.word	0x2001035c
 8018f5c:	0801d8d0 	.word	0x0801d8d0
 8018f60:	20010a40 	.word	0x20010a40
 8018f64:	20010a7c 	.word	0x20010a7c
 8018f68:	200109dc 	.word	0x200109dc
 8018f6c:	200109a0 	.word	0x200109a0

08018f70 <rmw_destroy_service>:
 8018f70:	b570      	push	{r4, r5, r6, lr}
 8018f72:	b128      	cbz	r0, 8018f80 <rmw_destroy_service+0x10>
 8018f74:	4604      	mov	r4, r0
 8018f76:	6800      	ldr	r0, [r0, #0]
 8018f78:	460d      	mov	r5, r1
 8018f7a:	f7f5 fc75 	bl	800e868 <is_uxrce_rmw_identifier_valid>
 8018f7e:	b910      	cbnz	r0, 8018f86 <rmw_destroy_service+0x16>
 8018f80:	2401      	movs	r4, #1
 8018f82:	4620      	mov	r0, r4
 8018f84:	bd70      	pop	{r4, r5, r6, pc}
 8018f86:	6863      	ldr	r3, [r4, #4]
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	d0f9      	beq.n	8018f80 <rmw_destroy_service+0x10>
 8018f8c:	2d00      	cmp	r5, #0
 8018f8e:	d0f7      	beq.n	8018f80 <rmw_destroy_service+0x10>
 8018f90:	6828      	ldr	r0, [r5, #0]
 8018f92:	f7f5 fc69 	bl	800e868 <is_uxrce_rmw_identifier_valid>
 8018f96:	2800      	cmp	r0, #0
 8018f98:	d0f2      	beq.n	8018f80 <rmw_destroy_service+0x10>
 8018f9a:	686e      	ldr	r6, [r5, #4]
 8018f9c:	2e00      	cmp	r6, #0
 8018f9e:	d0ef      	beq.n	8018f80 <rmw_destroy_service+0x10>
 8018fa0:	6864      	ldr	r4, [r4, #4]
 8018fa2:	6932      	ldr	r2, [r6, #16]
 8018fa4:	6920      	ldr	r0, [r4, #16]
 8018fa6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8018faa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018fae:	6819      	ldr	r1, [r3, #0]
 8018fb0:	f001 fafc 	bl	801a5ac <uxr_buffer_cancel_data>
 8018fb4:	4602      	mov	r2, r0
 8018fb6:	6920      	ldr	r0, [r4, #16]
 8018fb8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8018fbc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8018fc0:	f7f5 fb40 	bl	800e644 <run_xrce_session>
 8018fc4:	6920      	ldr	r0, [r4, #16]
 8018fc6:	6932      	ldr	r2, [r6, #16]
 8018fc8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8018fcc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018fd0:	6819      	ldr	r1, [r3, #0]
 8018fd2:	f7f7 fc0f 	bl	80107f4 <uxr_buffer_delete_entity>
 8018fd6:	4602      	mov	r2, r0
 8018fd8:	6920      	ldr	r0, [r4, #16]
 8018fda:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8018fde:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8018fe2:	f7f5 fb2f 	bl	800e644 <run_xrce_session>
 8018fe6:	4603      	mov	r3, r0
 8018fe8:	4628      	mov	r0, r5
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	bf14      	ite	ne
 8018fee:	2400      	movne	r4, #0
 8018ff0:	2402      	moveq	r4, #2
 8018ff2:	f7f5 f9ed 	bl	800e3d0 <rmw_uxrce_fini_service_memory>
 8018ff6:	e7c4      	b.n	8018f82 <rmw_destroy_service+0x12>

08018ff8 <rmw_service_response_publisher_get_actual_qos>:
 8018ff8:	b181      	cbz	r1, 801901c <rmw_service_response_publisher_get_actual_qos+0x24>
 8018ffa:	4603      	mov	r3, r0
 8018ffc:	b510      	push	{r4, lr}
 8018ffe:	fab0 f480 	clz	r4, r0
 8019002:	0964      	lsrs	r4, r4, #5
 8019004:	b140      	cbz	r0, 8019018 <rmw_service_response_publisher_get_actual_qos+0x20>
 8019006:	685b      	ldr	r3, [r3, #4]
 8019008:	4608      	mov	r0, r1
 801900a:	2250      	movs	r2, #80	; 0x50
 801900c:	f103 0120 	add.w	r1, r3, #32
 8019010:	f003 fc81 	bl	801c916 <memcpy>
 8019014:	4620      	mov	r0, r4
 8019016:	bd10      	pop	{r4, pc}
 8019018:	200b      	movs	r0, #11
 801901a:	bd10      	pop	{r4, pc}
 801901c:	200b      	movs	r0, #11
 801901e:	4770      	bx	lr

08019020 <rmw_service_request_subscription_get_actual_qos>:
 8019020:	b178      	cbz	r0, 8019042 <rmw_service_request_subscription_get_actual_qos+0x22>
 8019022:	b510      	push	{r4, lr}
 8019024:	fab1 f481 	clz	r4, r1
 8019028:	0964      	lsrs	r4, r4, #5
 801902a:	b141      	cbz	r1, 801903e <rmw_service_request_subscription_get_actual_qos+0x1e>
 801902c:	6843      	ldr	r3, [r0, #4]
 801902e:	2250      	movs	r2, #80	; 0x50
 8019030:	4608      	mov	r0, r1
 8019032:	f103 0120 	add.w	r1, r3, #32
 8019036:	f003 fc6e 	bl	801c916 <memcpy>
 801903a:	4620      	mov	r0, r4
 801903c:	bd10      	pop	{r4, pc}
 801903e:	200b      	movs	r0, #11
 8019040:	bd10      	pop	{r4, pc}
 8019042:	200b      	movs	r0, #11
 8019044:	4770      	bx	lr
 8019046:	bf00      	nop

08019048 <rmw_create_subscription>:
 8019048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801904c:	b08d      	sub	sp, #52	; 0x34
 801904e:	2900      	cmp	r1, #0
 8019050:	f000 80d8 	beq.w	8019204 <rmw_create_subscription+0x1bc>
 8019054:	4604      	mov	r4, r0
 8019056:	2800      	cmp	r0, #0
 8019058:	f000 80d4 	beq.w	8019204 <rmw_create_subscription+0x1bc>
 801905c:	6800      	ldr	r0, [r0, #0]
 801905e:	460e      	mov	r6, r1
 8019060:	4615      	mov	r5, r2
 8019062:	461f      	mov	r7, r3
 8019064:	f7f5 fc00 	bl	800e868 <is_uxrce_rmw_identifier_valid>
 8019068:	f080 0001 	eor.w	r0, r0, #1
 801906c:	b2c0      	uxtb	r0, r0
 801906e:	2800      	cmp	r0, #0
 8019070:	f040 80c8 	bne.w	8019204 <rmw_create_subscription+0x1bc>
 8019074:	2d00      	cmp	r5, #0
 8019076:	f000 80c5 	beq.w	8019204 <rmw_create_subscription+0x1bc>
 801907a:	782b      	ldrb	r3, [r5, #0]
 801907c:	2b00      	cmp	r3, #0
 801907e:	f000 80c1 	beq.w	8019204 <rmw_create_subscription+0x1bc>
 8019082:	2f00      	cmp	r7, #0
 8019084:	f000 80be 	beq.w	8019204 <rmw_create_subscription+0x1bc>
 8019088:	4867      	ldr	r0, [pc, #412]	; (8019228 <rmw_create_subscription+0x1e0>)
 801908a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801908e:	f7ff f8f9 	bl	8018284 <get_memory>
 8019092:	4604      	mov	r4, r0
 8019094:	2800      	cmp	r0, #0
 8019096:	f000 80b6 	beq.w	8019206 <rmw_create_subscription+0x1be>
 801909a:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801909e:	f108 0a98 	add.w	sl, r8, #152	; 0x98
 80190a2:	f8c8 8080 	str.w	r8, [r8, #128]	; 0x80
 80190a6:	f7ff f973 	bl	8018390 <rmw_get_implementation_identifier>
 80190aa:	f8c8 007c 	str.w	r0, [r8, #124]	; 0x7c
 80190ae:	f8c8 a084 	str.w	sl, [r8, #132]	; 0x84
 80190b2:	4628      	mov	r0, r5
 80190b4:	f7e7 f924 	bl	8000300 <strlen>
 80190b8:	3001      	adds	r0, #1
 80190ba:	f108 047c 	add.w	r4, r8, #124	; 0x7c
 80190be:	283c      	cmp	r0, #60	; 0x3c
 80190c0:	f200 80a5 	bhi.w	801920e <rmw_create_subscription+0x1c6>
 80190c4:	462b      	mov	r3, r5
 80190c6:	4a59      	ldr	r2, [pc, #356]	; (801922c <rmw_create_subscription+0x1e4>)
 80190c8:	213c      	movs	r1, #60	; 0x3c
 80190ca:	4650      	mov	r0, sl
 80190cc:	f003 fa18 	bl	801c500 <sniprintf>
 80190d0:	4639      	mov	r1, r7
 80190d2:	2250      	movs	r2, #80	; 0x50
 80190d4:	f108 0028 	add.w	r0, r8, #40	; 0x28
 80190d8:	f8c8 9020 	str.w	r9, [r8, #32]
 80190dc:	f003 fc1b 	bl	801c916 <memcpy>
 80190e0:	4630      	mov	r0, r6
 80190e2:	4953      	ldr	r1, [pc, #332]	; (8019230 <rmw_create_subscription+0x1e8>)
 80190e4:	f7f5 fbce 	bl	800e884 <get_message_typesupport_handle>
 80190e8:	2800      	cmp	r0, #0
 80190ea:	f000 8090 	beq.w	801920e <rmw_create_subscription+0x1c6>
 80190ee:	6842      	ldr	r2, [r0, #4]
 80190f0:	f8c8 2018 	str.w	r2, [r8, #24]
 80190f4:	2a00      	cmp	r2, #0
 80190f6:	f000 808a 	beq.w	801920e <rmw_create_subscription+0x1c6>
 80190fa:	4629      	mov	r1, r5
 80190fc:	463b      	mov	r3, r7
 80190fe:	4648      	mov	r0, r9
 8019100:	f7ff fb84 	bl	801880c <create_topic>
 8019104:	f8c8 001c 	str.w	r0, [r8, #28]
 8019108:	2800      	cmp	r0, #0
 801910a:	f000 8085 	beq.w	8019218 <rmw_create_subscription+0x1d0>
 801910e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019112:	2104      	movs	r1, #4
 8019114:	2506      	movs	r5, #6
 8019116:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801911a:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 801911e:	1c42      	adds	r2, r0, #1
 8019120:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 8019124:	f7f7 fda2 	bl	8010c6c <uxr_object_id>
 8019128:	f8c8 0010 	str.w	r0, [r8, #16]
 801912c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8019130:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 8019134:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019138:	9500      	str	r5, [sp, #0]
 801913a:	6819      	ldr	r1, [r3, #0]
 801913c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019140:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8019144:	f7f7 fc3a 	bl	80109bc <uxr_buffer_create_subscriber_bin>
 8019148:	4602      	mov	r2, r0
 801914a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801914e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8019152:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8019156:	f7f5 fa75 	bl	800e644 <run_xrce_session>
 801915a:	2800      	cmp	r0, #0
 801915c:	d057      	beq.n	801920e <rmw_create_subscription+0x1c6>
 801915e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019162:	4629      	mov	r1, r5
 8019164:	ae08      	add	r6, sp, #32
 8019166:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801916a:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 801916e:	1c42      	adds	r2, r0, #1
 8019170:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 8019174:	f7f7 fd7a 	bl	8010c6c <uxr_object_id>
 8019178:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801917c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8019180:	4639      	mov	r1, r7
 8019182:	f8c8 0014 	str.w	r0, [r8, #20]
 8019186:	4630      	mov	r0, r6
 8019188:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 801918c:	9305      	str	r3, [sp, #20]
 801918e:	f7f5 fa75 	bl	800e67c <convert_qos_profile>
 8019192:	9503      	str	r5, [sp, #12]
 8019194:	9b05      	ldr	r3, [sp, #20]
 8019196:	e896 0003 	ldmia.w	r6, {r0, r1}
 801919a:	9001      	str	r0, [sp, #4]
 801919c:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 80191a0:	f8ad 1008 	strh.w	r1, [sp, #8]
 80191a4:	691b      	ldr	r3, [r3, #16]
 80191a6:	9300      	str	r3, [sp, #0]
 80191a8:	f8db 1000 	ldr.w	r1, [fp]
 80191ac:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 80191b0:	f7f7 fcaa 	bl	8010b08 <uxr_buffer_create_datareader_bin>
 80191b4:	4602      	mov	r2, r0
 80191b6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80191ba:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80191be:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80191c2:	f7f5 fa3f 	bl	800e644 <run_xrce_session>
 80191c6:	b310      	cbz	r0, 801920e <rmw_create_subscription+0x1c6>
 80191c8:	7a3b      	ldrb	r3, [r7, #8]
 80191ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80191ce:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80191d2:	2b02      	cmp	r3, #2
 80191d4:	920a      	str	r2, [sp, #40]	; 0x28
 80191d6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80191da:	f04f 0200 	mov.w	r2, #0
 80191de:	bf08      	it	eq
 80191e0:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 80191e4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80191e8:	bf18      	it	ne
 80191ea:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	; 0xd4
 80191ee:	920b      	str	r2, [sp, #44]	; 0x2c
 80191f0:	9307      	str	r3, [sp, #28]
 80191f2:	ab0a      	add	r3, sp, #40	; 0x28
 80191f4:	9300      	str	r3, [sp, #0]
 80191f6:	9b07      	ldr	r3, [sp, #28]
 80191f8:	f8d8 2014 	ldr.w	r2, [r8, #20]
 80191fc:	6809      	ldr	r1, [r1, #0]
 80191fe:	f001 f99b 	bl	801a538 <uxr_buffer_request_data>
 8019202:	e000      	b.n	8019206 <rmw_create_subscription+0x1be>
 8019204:	2400      	movs	r4, #0
 8019206:	4620      	mov	r0, r4
 8019208:	b00d      	add	sp, #52	; 0x34
 801920a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801920e:	f8d8 001c 	ldr.w	r0, [r8, #28]
 8019212:	b108      	cbz	r0, 8019218 <rmw_create_subscription+0x1d0>
 8019214:	f7f5 f908 	bl	800e428 <rmw_uxrce_fini_topic_memory>
 8019218:	4620      	mov	r0, r4
 801921a:	2400      	movs	r4, #0
 801921c:	f7f5 f8c2 	bl	800e3a4 <rmw_uxrce_fini_subscription_memory>
 8019220:	4620      	mov	r0, r4
 8019222:	b00d      	add	sp, #52	; 0x34
 8019224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019228:	2001038c 	.word	0x2001038c
 801922c:	0801e52c 	.word	0x0801e52c
 8019230:	0801d8d0 	.word	0x0801d8d0

08019234 <rmw_subscription_get_actual_qos>:
 8019234:	b178      	cbz	r0, 8019256 <rmw_subscription_get_actual_qos+0x22>
 8019236:	b510      	push	{r4, lr}
 8019238:	fab1 f481 	clz	r4, r1
 801923c:	0964      	lsrs	r4, r4, #5
 801923e:	b141      	cbz	r1, 8019252 <rmw_subscription_get_actual_qos+0x1e>
 8019240:	6843      	ldr	r3, [r0, #4]
 8019242:	2250      	movs	r2, #80	; 0x50
 8019244:	4608      	mov	r0, r1
 8019246:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801924a:	f003 fb64 	bl	801c916 <memcpy>
 801924e:	4620      	mov	r0, r4
 8019250:	bd10      	pop	{r4, pc}
 8019252:	200b      	movs	r0, #11
 8019254:	bd10      	pop	{r4, pc}
 8019256:	200b      	movs	r0, #11
 8019258:	4770      	bx	lr
 801925a:	bf00      	nop

0801925c <rmw_destroy_subscription>:
 801925c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019260:	b128      	cbz	r0, 801926e <rmw_destroy_subscription+0x12>
 8019262:	4604      	mov	r4, r0
 8019264:	6800      	ldr	r0, [r0, #0]
 8019266:	460d      	mov	r5, r1
 8019268:	f7f5 fafe 	bl	800e868 <is_uxrce_rmw_identifier_valid>
 801926c:	b918      	cbnz	r0, 8019276 <rmw_destroy_subscription+0x1a>
 801926e:	2401      	movs	r4, #1
 8019270:	4620      	mov	r0, r4
 8019272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019276:	6863      	ldr	r3, [r4, #4]
 8019278:	2b00      	cmp	r3, #0
 801927a:	d0f8      	beq.n	801926e <rmw_destroy_subscription+0x12>
 801927c:	fab5 f485 	clz	r4, r5
 8019280:	0964      	lsrs	r4, r4, #5
 8019282:	2d00      	cmp	r5, #0
 8019284:	d0f3      	beq.n	801926e <rmw_destroy_subscription+0x12>
 8019286:	6828      	ldr	r0, [r5, #0]
 8019288:	f7f5 faee 	bl	800e868 <is_uxrce_rmw_identifier_valid>
 801928c:	2800      	cmp	r0, #0
 801928e:	d0ee      	beq.n	801926e <rmw_destroy_subscription+0x12>
 8019290:	686e      	ldr	r6, [r5, #4]
 8019292:	2e00      	cmp	r6, #0
 8019294:	d0eb      	beq.n	801926e <rmw_destroy_subscription+0x12>
 8019296:	6a37      	ldr	r7, [r6, #32]
 8019298:	6972      	ldr	r2, [r6, #20]
 801929a:	6938      	ldr	r0, [r7, #16]
 801929c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80192a0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80192a4:	6819      	ldr	r1, [r3, #0]
 80192a6:	f001 f981 	bl	801a5ac <uxr_buffer_cancel_data>
 80192aa:	4602      	mov	r2, r0
 80192ac:	6938      	ldr	r0, [r7, #16]
 80192ae:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80192b2:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80192b6:	f7f5 f9c5 	bl	800e644 <run_xrce_session>
 80192ba:	69f0      	ldr	r0, [r6, #28]
 80192bc:	f7ff faf6 	bl	80188ac <destroy_topic>
 80192c0:	6a33      	ldr	r3, [r6, #32]
 80192c2:	6972      	ldr	r2, [r6, #20]
 80192c4:	6918      	ldr	r0, [r3, #16]
 80192c6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80192ca:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80192ce:	6819      	ldr	r1, [r3, #0]
 80192d0:	f7f7 fa90 	bl	80107f4 <uxr_buffer_delete_entity>
 80192d4:	6a33      	ldr	r3, [r6, #32]
 80192d6:	4680      	mov	r8, r0
 80192d8:	6932      	ldr	r2, [r6, #16]
 80192da:	6918      	ldr	r0, [r3, #16]
 80192dc:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80192e0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80192e4:	6819      	ldr	r1, [r3, #0]
 80192e6:	f7f7 fa85 	bl	80107f4 <uxr_buffer_delete_entity>
 80192ea:	4606      	mov	r6, r0
 80192ec:	6938      	ldr	r0, [r7, #16]
 80192ee:	4642      	mov	r2, r8
 80192f0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80192f4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80192f8:	f7f5 f9a4 	bl	800e644 <run_xrce_session>
 80192fc:	693f      	ldr	r7, [r7, #16]
 80192fe:	4632      	mov	r2, r6
 8019300:	4606      	mov	r6, r0
 8019302:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8019306:	4638      	mov	r0, r7
 8019308:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 801930c:	f7f5 f99a 	bl	800e644 <run_xrce_session>
 8019310:	b126      	cbz	r6, 801931c <rmw_destroy_subscription+0xc0>
 8019312:	b118      	cbz	r0, 801931c <rmw_destroy_subscription+0xc0>
 8019314:	4628      	mov	r0, r5
 8019316:	f7f5 f845 	bl	800e3a4 <rmw_uxrce_fini_subscription_memory>
 801931a:	e7a9      	b.n	8019270 <rmw_destroy_subscription+0x14>
 801931c:	2402      	movs	r4, #2
 801931e:	e7f9      	b.n	8019314 <rmw_destroy_subscription+0xb8>

08019320 <rmw_take_with_info>:
 8019320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019322:	4604      	mov	r4, r0
 8019324:	6800      	ldr	r0, [r0, #0]
 8019326:	b089      	sub	sp, #36	; 0x24
 8019328:	460f      	mov	r7, r1
 801932a:	4615      	mov	r5, r2
 801932c:	b128      	cbz	r0, 801933a <rmw_take_with_info+0x1a>
 801932e:	4b24      	ldr	r3, [pc, #144]	; (80193c0 <rmw_take_with_info+0xa0>)
 8019330:	6819      	ldr	r1, [r3, #0]
 8019332:	f7e6 ff85 	bl	8000240 <strcmp>
 8019336:	2800      	cmp	r0, #0
 8019338:	d13e      	bne.n	80193b8 <rmw_take_with_info+0x98>
 801933a:	b305      	cbz	r5, 801937e <rmw_take_with_info+0x5e>
 801933c:	2300      	movs	r3, #0
 801933e:	6864      	ldr	r4, [r4, #4]
 8019340:	702b      	strb	r3, [r5, #0]
 8019342:	f7f5 f901 	bl	800e548 <rmw_uxrce_clean_expired_static_input_buffer>
 8019346:	4620      	mov	r0, r4
 8019348:	f7f5 f8d4 	bl	800e4f4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801934c:	4606      	mov	r6, r0
 801934e:	b1f0      	cbz	r0, 801938e <rmw_take_with_info+0x6e>
 8019350:	6881      	ldr	r1, [r0, #8]
 8019352:	4668      	mov	r0, sp
 8019354:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8019358:	3110      	adds	r1, #16
 801935a:	f7f7 f9d7 	bl	801070c <ucdr_init_buffer>
 801935e:	69a3      	ldr	r3, [r4, #24]
 8019360:	4639      	mov	r1, r7
 8019362:	4668      	mov	r0, sp
 8019364:	68db      	ldr	r3, [r3, #12]
 8019366:	4798      	blx	r3
 8019368:	4604      	mov	r4, r0
 801936a:	4631      	mov	r1, r6
 801936c:	4815      	ldr	r0, [pc, #84]	; (80193c4 <rmw_take_with_info+0xa4>)
 801936e:	f7fe ff99 	bl	80182a4 <put_memory>
 8019372:	702c      	strb	r4, [r5, #0]
 8019374:	f084 0001 	eor.w	r0, r4, #1
 8019378:	b2c0      	uxtb	r0, r0
 801937a:	b009      	add	sp, #36	; 0x24
 801937c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801937e:	6864      	ldr	r4, [r4, #4]
 8019380:	f7f5 f8e2 	bl	800e548 <rmw_uxrce_clean_expired_static_input_buffer>
 8019384:	4620      	mov	r0, r4
 8019386:	f7f5 f8b5 	bl	800e4f4 <rmw_uxrce_find_static_input_buffer_by_owner>
 801938a:	4605      	mov	r5, r0
 801938c:	b910      	cbnz	r0, 8019394 <rmw_take_with_info+0x74>
 801938e:	2001      	movs	r0, #1
 8019390:	b009      	add	sp, #36	; 0x24
 8019392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019394:	68a9      	ldr	r1, [r5, #8]
 8019396:	4668      	mov	r0, sp
 8019398:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 801939c:	3110      	adds	r1, #16
 801939e:	f7f7 f9b5 	bl	801070c <ucdr_init_buffer>
 80193a2:	69a3      	ldr	r3, [r4, #24]
 80193a4:	4639      	mov	r1, r7
 80193a6:	4668      	mov	r0, sp
 80193a8:	68db      	ldr	r3, [r3, #12]
 80193aa:	4798      	blx	r3
 80193ac:	4629      	mov	r1, r5
 80193ae:	4604      	mov	r4, r0
 80193b0:	4804      	ldr	r0, [pc, #16]	; (80193c4 <rmw_take_with_info+0xa4>)
 80193b2:	f7fe ff77 	bl	80182a4 <put_memory>
 80193b6:	e7dd      	b.n	8019374 <rmw_take_with_info+0x54>
 80193b8:	200c      	movs	r0, #12
 80193ba:	b009      	add	sp, #36	; 0x24
 80193bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80193be:	bf00      	nop
 80193c0:	0801efd0 	.word	0x0801efd0
 80193c4:	2001037c 	.word	0x2001037c

080193c8 <rmw_uxrce_transport_init>:
 80193c8:	b508      	push	{r3, lr}
 80193ca:	b108      	cbz	r0, 80193d0 <rmw_uxrce_transport_init+0x8>
 80193cc:	f100 0210 	add.w	r2, r0, #16
 80193d0:	b139      	cbz	r1, 80193e2 <rmw_uxrce_transport_init+0x1a>
 80193d2:	6949      	ldr	r1, [r1, #20]
 80193d4:	4610      	mov	r0, r2
 80193d6:	f000 fb2b 	bl	8019a30 <uxr_init_custom_transport>
 80193da:	f080 0001 	eor.w	r0, r0, #1
 80193de:	b2c0      	uxtb	r0, r0
 80193e0:	bd08      	pop	{r3, pc}
 80193e2:	4b04      	ldr	r3, [pc, #16]	; (80193f4 <rmw_uxrce_transport_init+0x2c>)
 80193e4:	4610      	mov	r0, r2
 80193e6:	6859      	ldr	r1, [r3, #4]
 80193e8:	f000 fb22 	bl	8019a30 <uxr_init_custom_transport>
 80193ec:	f080 0001 	eor.w	r0, r0, #1
 80193f0:	b2c0      	uxtb	r0, r0
 80193f2:	bd08      	pop	{r3, pc}
 80193f4:	2000b98c 	.word	0x2000b98c

080193f8 <rmw_wait>:
 80193f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80193fc:	4698      	mov	r8, r3
 80193fe:	ea40 0301 	orr.w	r3, r0, r1
 8019402:	b089      	sub	sp, #36	; 0x24
 8019404:	ea48 0303 	orr.w	r3, r8, r3
 8019408:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801940a:	4313      	orrs	r3, r2
 801940c:	f000 8106 	beq.w	801961c <rmw_wait+0x224>
 8019410:	4605      	mov	r5, r0
 8019412:	460e      	mov	r6, r1
 8019414:	4691      	mov	r9, r2
 8019416:	b16c      	cbz	r4, 8019434 <rmw_wait+0x3c>
 8019418:	4ba6      	ldr	r3, [pc, #664]	; (80196b4 <rmw_wait+0x2bc>)
 801941a:	af04      	add	r7, sp, #16
 801941c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801941e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8019422:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8019426:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801942a:	f7fe fd4d 	bl	8017ec8 <rmw_time_equal>
 801942e:	2800      	cmp	r0, #0
 8019430:	f000 810b 	beq.w	801964a <rmw_wait+0x252>
 8019434:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8019438:	f7f5 f886 	bl	800e548 <rmw_uxrce_clean_expired_static_input_buffer>
 801943c:	4b9e      	ldr	r3, [pc, #632]	; (80196b8 <rmw_wait+0x2c0>)
 801943e:	681c      	ldr	r4, [r3, #0]
 8019440:	b14c      	cbz	r4, 8019456 <rmw_wait+0x5e>
 8019442:	4623      	mov	r3, r4
 8019444:	2100      	movs	r1, #0
 8019446:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801944a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801944e:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 8019452:	2b00      	cmp	r3, #0
 8019454:	d1f7      	bne.n	8019446 <rmw_wait+0x4e>
 8019456:	f1b9 0f00 	cmp.w	r9, #0
 801945a:	d011      	beq.n	8019480 <rmw_wait+0x88>
 801945c:	f8d9 1000 	ldr.w	r1, [r9]
 8019460:	b171      	cbz	r1, 8019480 <rmw_wait+0x88>
 8019462:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8019466:	2300      	movs	r3, #0
 8019468:	2001      	movs	r0, #1
 801946a:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801946e:	3301      	adds	r3, #1
 8019470:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8019472:	4299      	cmp	r1, r3
 8019474:	6912      	ldr	r2, [r2, #16]
 8019476:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801947a:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801947e:	d1f4      	bne.n	801946a <rmw_wait+0x72>
 8019480:	f1b8 0f00 	cmp.w	r8, #0
 8019484:	d011      	beq.n	80194aa <rmw_wait+0xb2>
 8019486:	f8d8 1000 	ldr.w	r1, [r8]
 801948a:	b171      	cbz	r1, 80194aa <rmw_wait+0xb2>
 801948c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8019490:	2300      	movs	r3, #0
 8019492:	2001      	movs	r0, #1
 8019494:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019498:	3301      	adds	r3, #1
 801949a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801949c:	4299      	cmp	r1, r3
 801949e:	6912      	ldr	r2, [r2, #16]
 80194a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80194a4:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 80194a8:	d1f4      	bne.n	8019494 <rmw_wait+0x9c>
 80194aa:	b185      	cbz	r5, 80194ce <rmw_wait+0xd6>
 80194ac:	6829      	ldr	r1, [r5, #0]
 80194ae:	b171      	cbz	r1, 80194ce <rmw_wait+0xd6>
 80194b0:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80194b4:	2300      	movs	r3, #0
 80194b6:	2001      	movs	r0, #1
 80194b8:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80194bc:	3301      	adds	r3, #1
 80194be:	6a12      	ldr	r2, [r2, #32]
 80194c0:	4299      	cmp	r1, r3
 80194c2:	6912      	ldr	r2, [r2, #16]
 80194c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80194c8:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 80194cc:	d1f4      	bne.n	80194b8 <rmw_wait+0xc0>
 80194ce:	b344      	cbz	r4, 8019522 <rmw_wait+0x12a>
 80194d0:	4622      	mov	r2, r4
 80194d2:	2300      	movs	r3, #0
 80194d4:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 80194d8:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80194dc:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 80194e0:	440b      	add	r3, r1
 80194e2:	b2db      	uxtb	r3, r3
 80194e4:	2a00      	cmp	r2, #0
 80194e6:	d1f5      	bne.n	80194d4 <rmw_wait+0xdc>
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d05f      	beq.n	80195ac <rmw_wait+0x1b4>
 80194ec:	1c7a      	adds	r2, r7, #1
 80194ee:	d00d      	beq.n	801950c <rmw_wait+0x114>
 80194f0:	ee07 7a90 	vmov	s15, r7
 80194f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80194f8:	ee07 3a90 	vmov	s15, r3
 80194fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019500:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8019504:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8019508:	ee17 7a90 	vmov	r7, s15
 801950c:	68a0      	ldr	r0, [r4, #8]
 801950e:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8019512:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 8019516:	2b00      	cmp	r3, #0
 8019518:	f040 808d 	bne.w	8019636 <rmw_wait+0x23e>
 801951c:	6864      	ldr	r4, [r4, #4]
 801951e:	2c00      	cmp	r4, #0
 8019520:	d1f4      	bne.n	801950c <rmw_wait+0x114>
 8019522:	f1b9 0f00 	cmp.w	r9, #0
 8019526:	f000 80a1 	beq.w	801966c <rmw_wait+0x274>
 801952a:	f8d9 7000 	ldr.w	r7, [r9]
 801952e:	2f00      	cmp	r7, #0
 8019530:	f000 80a4 	beq.w	801967c <rmw_wait+0x284>
 8019534:	2400      	movs	r4, #0
 8019536:	4627      	mov	r7, r4
 8019538:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801953c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019540:	f7f4 ffd8 	bl	800e4f4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019544:	2800      	cmp	r0, #0
 8019546:	d03b      	beq.n	80195c0 <rmw_wait+0x1c8>
 8019548:	3401      	adds	r4, #1
 801954a:	f8d9 3000 	ldr.w	r3, [r9]
 801954e:	2701      	movs	r7, #1
 8019550:	42a3      	cmp	r3, r4
 8019552:	d8f1      	bhi.n	8019538 <rmw_wait+0x140>
 8019554:	2701      	movs	r7, #1
 8019556:	f1b8 0f00 	cmp.w	r8, #0
 801955a:	d010      	beq.n	801957e <rmw_wait+0x186>
 801955c:	f8d8 3000 	ldr.w	r3, [r8]
 8019560:	b16b      	cbz	r3, 801957e <rmw_wait+0x186>
 8019562:	2400      	movs	r4, #0
 8019564:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019568:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801956c:	f7f4 ffc2 	bl	800e4f4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019570:	b370      	cbz	r0, 80195d0 <rmw_wait+0x1d8>
 8019572:	3401      	adds	r4, #1
 8019574:	f8d8 3000 	ldr.w	r3, [r8]
 8019578:	2701      	movs	r7, #1
 801957a:	42a3      	cmp	r3, r4
 801957c:	d8f2      	bhi.n	8019564 <rmw_wait+0x16c>
 801957e:	2d00      	cmp	r5, #0
 8019580:	d035      	beq.n	80195ee <rmw_wait+0x1f6>
 8019582:	682b      	ldr	r3, [r5, #0]
 8019584:	b39b      	cbz	r3, 80195ee <rmw_wait+0x1f6>
 8019586:	2400      	movs	r4, #0
 8019588:	686b      	ldr	r3, [r5, #4]
 801958a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801958e:	f7f4 ffb1 	bl	800e4f4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019592:	b328      	cbz	r0, 80195e0 <rmw_wait+0x1e8>
 8019594:	3401      	adds	r4, #1
 8019596:	682b      	ldr	r3, [r5, #0]
 8019598:	2701      	movs	r7, #1
 801959a:	42a3      	cmp	r3, r4
 801959c:	d8f4      	bhi.n	8019588 <rmw_wait+0x190>
 801959e:	2e00      	cmp	r6, #0
 80195a0:	d03c      	beq.n	801961c <rmw_wait+0x224>
 80195a2:	6834      	ldr	r4, [r6, #0]
 80195a4:	2c00      	cmp	r4, #0
 80195a6:	d039      	beq.n	801961c <rmw_wait+0x224>
 80195a8:	2701      	movs	r7, #1
 80195aa:	e023      	b.n	80195f4 <rmw_wait+0x1fc>
 80195ac:	68a0      	ldr	r0, [r4, #8]
 80195ae:	2100      	movs	r1, #0
 80195b0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80195b4:	f7f8 f82a 	bl	801160c <uxr_run_session_timeout>
 80195b8:	6864      	ldr	r4, [r4, #4]
 80195ba:	2c00      	cmp	r4, #0
 80195bc:	d1f6      	bne.n	80195ac <rmw_wait+0x1b4>
 80195be:	e7b0      	b.n	8019522 <rmw_wait+0x12a>
 80195c0:	e9d9 3200 	ldrd	r3, r2, [r9]
 80195c4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80195c8:	3401      	adds	r4, #1
 80195ca:	42a3      	cmp	r3, r4
 80195cc:	d8b4      	bhi.n	8019538 <rmw_wait+0x140>
 80195ce:	e7c2      	b.n	8019556 <rmw_wait+0x15e>
 80195d0:	e9d8 3200 	ldrd	r3, r2, [r8]
 80195d4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80195d8:	3401      	adds	r4, #1
 80195da:	429c      	cmp	r4, r3
 80195dc:	d3c2      	bcc.n	8019564 <rmw_wait+0x16c>
 80195de:	e7ce      	b.n	801957e <rmw_wait+0x186>
 80195e0:	e9d5 3200 	ldrd	r3, r2, [r5]
 80195e4:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 80195e8:	3401      	adds	r4, #1
 80195ea:	42a3      	cmp	r3, r4
 80195ec:	d8cc      	bhi.n	8019588 <rmw_wait+0x190>
 80195ee:	b1a6      	cbz	r6, 801961a <rmw_wait+0x222>
 80195f0:	6834      	ldr	r4, [r6, #0]
 80195f2:	b194      	cbz	r4, 801961a <rmw_wait+0x222>
 80195f4:	2300      	movs	r3, #0
 80195f6:	461d      	mov	r5, r3
 80195f8:	e004      	b.n	8019604 <rmw_wait+0x20c>
 80195fa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80195fe:	3301      	adds	r3, #1
 8019600:	42a3      	cmp	r3, r4
 8019602:	d00a      	beq.n	801961a <rmw_wait+0x222>
 8019604:	6870      	ldr	r0, [r6, #4]
 8019606:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801960a:	7c0a      	ldrb	r2, [r1, #16]
 801960c:	2a00      	cmp	r2, #0
 801960e:	d0f4      	beq.n	80195fa <rmw_wait+0x202>
 8019610:	3301      	adds	r3, #1
 8019612:	4617      	mov	r7, r2
 8019614:	740d      	strb	r5, [r1, #16]
 8019616:	42a3      	cmp	r3, r4
 8019618:	d1f4      	bne.n	8019604 <rmw_wait+0x20c>
 801961a:	b147      	cbz	r7, 801962e <rmw_wait+0x236>
 801961c:	2000      	movs	r0, #0
 801961e:	b009      	add	sp, #36	; 0x24
 8019620:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019624:	b11e      	cbz	r6, 801962e <rmw_wait+0x236>
 8019626:	6834      	ldr	r4, [r6, #0]
 8019628:	462f      	mov	r7, r5
 801962a:	2c00      	cmp	r4, #0
 801962c:	d1e2      	bne.n	80195f4 <rmw_wait+0x1fc>
 801962e:	2002      	movs	r0, #2
 8019630:	b009      	add	sp, #36	; 0x24
 8019632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019636:	4639      	mov	r1, r7
 8019638:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801963c:	f7f8 f800 	bl	8011640 <uxr_run_session_until_data>
 8019640:	6864      	ldr	r4, [r4, #4]
 8019642:	2c00      	cmp	r4, #0
 8019644:	f47f af62 	bne.w	801950c <rmw_wait+0x114>
 8019648:	e76b      	b.n	8019522 <rmw_wait+0x12a>
 801964a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801964e:	f7fe fc91 	bl	8017f74 <rmw_time_total_nsec>
 8019652:	2300      	movs	r3, #0
 8019654:	4a19      	ldr	r2, [pc, #100]	; (80196bc <rmw_wait+0x2c4>)
 8019656:	f7e6 feab 	bl	80003b0 <__aeabi_uldivmod>
 801965a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 801965e:	4607      	mov	r7, r0
 8019660:	f171 0300 	sbcs.w	r3, r1, #0
 8019664:	bfa8      	it	ge
 8019666:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 801966a:	e6e5      	b.n	8019438 <rmw_wait+0x40>
 801966c:	f1b8 0f00 	cmp.w	r8, #0
 8019670:	d00f      	beq.n	8019692 <rmw_wait+0x29a>
 8019672:	f8d8 3000 	ldr.w	r3, [r8]
 8019676:	b193      	cbz	r3, 801969e <rmw_wait+0x2a6>
 8019678:	464f      	mov	r7, r9
 801967a:	e772      	b.n	8019562 <rmw_wait+0x16a>
 801967c:	f1b8 0f00 	cmp.w	r8, #0
 8019680:	d007      	beq.n	8019692 <rmw_wait+0x29a>
 8019682:	f8d8 3000 	ldr.w	r3, [r8]
 8019686:	2b00      	cmp	r3, #0
 8019688:	f47f af6b 	bne.w	8019562 <rmw_wait+0x16a>
 801968c:	b155      	cbz	r5, 80196a4 <rmw_wait+0x2ac>
 801968e:	461f      	mov	r7, r3
 8019690:	e777      	b.n	8019582 <rmw_wait+0x18a>
 8019692:	2d00      	cmp	r5, #0
 8019694:	d0c6      	beq.n	8019624 <rmw_wait+0x22c>
 8019696:	682b      	ldr	r3, [r5, #0]
 8019698:	b143      	cbz	r3, 80196ac <rmw_wait+0x2b4>
 801969a:	4647      	mov	r7, r8
 801969c:	e773      	b.n	8019586 <rmw_wait+0x18e>
 801969e:	b10d      	cbz	r5, 80196a4 <rmw_wait+0x2ac>
 80196a0:	464f      	mov	r7, r9
 80196a2:	e76e      	b.n	8019582 <rmw_wait+0x18a>
 80196a4:	462f      	mov	r7, r5
 80196a6:	2e00      	cmp	r6, #0
 80196a8:	d1a2      	bne.n	80195f0 <rmw_wait+0x1f8>
 80196aa:	e7c0      	b.n	801962e <rmw_wait+0x236>
 80196ac:	4647      	mov	r7, r8
 80196ae:	2e00      	cmp	r6, #0
 80196b0:	d19e      	bne.n	80195f0 <rmw_wait+0x1f8>
 80196b2:	e7bc      	b.n	801962e <rmw_wait+0x236>
 80196b4:	0801d760 	.word	0x0801d760
 80196b8:	2001036c 	.word	0x2001036c
 80196bc:	000f4240 	.word	0x000f4240

080196c0 <rmw_create_wait_set>:
 80196c0:	b508      	push	{r3, lr}
 80196c2:	4803      	ldr	r0, [pc, #12]	; (80196d0 <rmw_create_wait_set+0x10>)
 80196c4:	f7fe fdde 	bl	8018284 <get_memory>
 80196c8:	b108      	cbz	r0, 80196ce <rmw_create_wait_set+0xe>
 80196ca:	6880      	ldr	r0, [r0, #8]
 80196cc:	3010      	adds	r0, #16
 80196ce:	bd08      	pop	{r3, pc}
 80196d0:	200103ac 	.word	0x200103ac

080196d4 <rmw_destroy_wait_set>:
 80196d4:	b508      	push	{r3, lr}
 80196d6:	4b08      	ldr	r3, [pc, #32]	; (80196f8 <rmw_destroy_wait_set+0x24>)
 80196d8:	6819      	ldr	r1, [r3, #0]
 80196da:	b911      	cbnz	r1, 80196e2 <rmw_destroy_wait_set+0xe>
 80196dc:	e00a      	b.n	80196f4 <rmw_destroy_wait_set+0x20>
 80196de:	6849      	ldr	r1, [r1, #4]
 80196e0:	b141      	cbz	r1, 80196f4 <rmw_destroy_wait_set+0x20>
 80196e2:	688b      	ldr	r3, [r1, #8]
 80196e4:	3310      	adds	r3, #16
 80196e6:	4298      	cmp	r0, r3
 80196e8:	d1f9      	bne.n	80196de <rmw_destroy_wait_set+0xa>
 80196ea:	4803      	ldr	r0, [pc, #12]	; (80196f8 <rmw_destroy_wait_set+0x24>)
 80196ec:	f7fe fdda 	bl	80182a4 <put_memory>
 80196f0:	2000      	movs	r0, #0
 80196f2:	bd08      	pop	{r3, pc}
 80196f4:	2001      	movs	r0, #1
 80196f6:	bd08      	pop	{r3, pc}
 80196f8:	200103ac 	.word	0x200103ac

080196fc <rmw_uros_epoch_nanos>:
 80196fc:	4b05      	ldr	r3, [pc, #20]	; (8019714 <rmw_uros_epoch_nanos+0x18>)
 80196fe:	681b      	ldr	r3, [r3, #0]
 8019700:	b123      	cbz	r3, 801970c <rmw_uros_epoch_nanos+0x10>
 8019702:	6898      	ldr	r0, [r3, #8]
 8019704:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019708:	f7f7 bbf6 	b.w	8010ef8 <uxr_epoch_nanos>
 801970c:	2000      	movs	r0, #0
 801970e:	2100      	movs	r1, #0
 8019710:	4770      	bx	lr
 8019712:	bf00      	nop
 8019714:	2001036c 	.word	0x2001036c

08019718 <service_msgs__msg__ServiceEventInfo__get_type_hash>:
 8019718:	4800      	ldr	r0, [pc, #0]	; (801971c <service_msgs__msg__ServiceEventInfo__get_type_hash+0x4>)
 801971a:	4770      	bx	lr
 801971c:	20001b40 	.word	0x20001b40

08019720 <service_msgs__msg__ServiceEventInfo__get_type_description>:
 8019720:	b510      	push	{r4, lr}
 8019722:	4c08      	ldr	r4, [pc, #32]	; (8019744 <service_msgs__msg__ServiceEventInfo__get_type_description+0x24>)
 8019724:	7820      	ldrb	r0, [r4, #0]
 8019726:	b108      	cbz	r0, 801972c <service_msgs__msg__ServiceEventInfo__get_type_description+0xc>
 8019728:	4807      	ldr	r0, [pc, #28]	; (8019748 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 801972a:	bd10      	pop	{r4, pc}
 801972c:	f000 f858 	bl	80197e0 <builtin_interfaces__msg__Time__get_type_description>
 8019730:	300c      	adds	r0, #12
 8019732:	4b06      	ldr	r3, [pc, #24]	; (801974c <service_msgs__msg__ServiceEventInfo__get_type_description+0x2c>)
 8019734:	c807      	ldmia	r0, {r0, r1, r2}
 8019736:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801973a:	2301      	movs	r3, #1
 801973c:	4802      	ldr	r0, [pc, #8]	; (8019748 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 801973e:	7023      	strb	r3, [r4, #0]
 8019740:	bd10      	pop	{r4, pc}
 8019742:	bf00      	nop
 8019744:	20010ae1 	.word	0x20010ae1
 8019748:	0801efd4 	.word	0x0801efd4
 801974c:	20001cc4 	.word	0x20001cc4

08019750 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>:
 8019750:	4800      	ldr	r0, [pc, #0]	; (8019754 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source+0x4>)
 8019752:	4770      	bx	lr
 8019754:	0801eff8 	.word	0x0801eff8

08019758 <service_msgs__msg__ServiceEventInfo__get_type_description_sources>:
 8019758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801975a:	4e0f      	ldr	r6, [pc, #60]	; (8019798 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x40>)
 801975c:	7837      	ldrb	r7, [r6, #0]
 801975e:	b10f      	cbz	r7, 8019764 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0xc>
 8019760:	480e      	ldr	r0, [pc, #56]	; (801979c <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 8019762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019764:	4d0e      	ldr	r5, [pc, #56]	; (80197a0 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x48>)
 8019766:	4c0f      	ldr	r4, [pc, #60]	; (80197a4 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x4c>)
 8019768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801976a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801976c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801976e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019770:	682b      	ldr	r3, [r5, #0]
 8019772:	4638      	mov	r0, r7
 8019774:	f844 3b04 	str.w	r3, [r4], #4
 8019778:	f000 f83e 	bl	80197f8 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801977c:	2301      	movs	r3, #1
 801977e:	4684      	mov	ip, r0
 8019780:	7033      	strb	r3, [r6, #0]
 8019782:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019786:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019788:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801978c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801978e:	f8dc 3000 	ldr.w	r3, [ip]
 8019792:	4802      	ldr	r0, [pc, #8]	; (801979c <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 8019794:	6023      	str	r3, [r4, #0]
 8019796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019798:	20010ae0 	.word	0x20010ae0
 801979c:	0801f01c 	.word	0x0801f01c
 80197a0:	0801eff8 	.word	0x0801eff8
 80197a4:	20010ae4 	.word	0x20010ae4

080197a8 <service_msgs__msg__ServiceEventInfo__init>:
 80197a8:	b538      	push	{r3, r4, r5, lr}
 80197aa:	b138      	cbz	r0, 80197bc <service_msgs__msg__ServiceEventInfo__init+0x14>
 80197ac:	1d05      	adds	r5, r0, #4
 80197ae:	4628      	mov	r0, r5
 80197b0:	f000 f842 	bl	8019838 <builtin_interfaces__msg__Time__init>
 80197b4:	4604      	mov	r4, r0
 80197b6:	b120      	cbz	r0, 80197c2 <service_msgs__msg__ServiceEventInfo__init+0x1a>
 80197b8:	4620      	mov	r0, r4
 80197ba:	bd38      	pop	{r3, r4, r5, pc}
 80197bc:	4604      	mov	r4, r0
 80197be:	4620      	mov	r0, r4
 80197c0:	bd38      	pop	{r3, r4, r5, pc}
 80197c2:	4628      	mov	r0, r5
 80197c4:	f000 f83c 	bl	8019840 <builtin_interfaces__msg__Time__fini>
 80197c8:	4620      	mov	r0, r4
 80197ca:	bd38      	pop	{r3, r4, r5, pc}

080197cc <service_msgs__msg__ServiceEventInfo__fini>:
 80197cc:	b110      	cbz	r0, 80197d4 <service_msgs__msg__ServiceEventInfo__fini+0x8>
 80197ce:	3004      	adds	r0, #4
 80197d0:	f000 b836 	b.w	8019840 <builtin_interfaces__msg__Time__fini>
 80197d4:	4770      	bx	lr
 80197d6:	bf00      	nop

080197d8 <builtin_interfaces__msg__Time__get_type_hash>:
 80197d8:	4800      	ldr	r0, [pc, #0]	; (80197dc <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 80197da:	4770      	bx	lr
 80197dc:	20002060 	.word	0x20002060

080197e0 <builtin_interfaces__msg__Time__get_type_description>:
 80197e0:	4b03      	ldr	r3, [pc, #12]	; (80197f0 <builtin_interfaces__msg__Time__get_type_description+0x10>)
 80197e2:	781a      	ldrb	r2, [r3, #0]
 80197e4:	b90a      	cbnz	r2, 80197ea <builtin_interfaces__msg__Time__get_type_description+0xa>
 80197e6:	2201      	movs	r2, #1
 80197e8:	701a      	strb	r2, [r3, #0]
 80197ea:	4802      	ldr	r0, [pc, #8]	; (80197f4 <builtin_interfaces__msg__Time__get_type_description+0x14>)
 80197ec:	4770      	bx	lr
 80197ee:	bf00      	nop
 80197f0:	20010b2d 	.word	0x20010b2d
 80197f4:	0801f028 	.word	0x0801f028

080197f8 <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 80197f8:	4800      	ldr	r0, [pc, #0]	; (80197fc <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 80197fa:	4770      	bx	lr
 80197fc:	0801f04c 	.word	0x0801f04c

08019800 <builtin_interfaces__msg__Time__get_type_description_sources>:
 8019800:	4b09      	ldr	r3, [pc, #36]	; (8019828 <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 8019802:	781a      	ldrb	r2, [r3, #0]
 8019804:	b96a      	cbnz	r2, 8019822 <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 8019806:	2201      	movs	r2, #1
 8019808:	b430      	push	{r4, r5}
 801980a:	4d08      	ldr	r5, [pc, #32]	; (801982c <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 801980c:	4c08      	ldr	r4, [pc, #32]	; (8019830 <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 801980e:	701a      	strb	r2, [r3, #0]
 8019810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019814:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019818:	682b      	ldr	r3, [r5, #0]
 801981a:	4806      	ldr	r0, [pc, #24]	; (8019834 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 801981c:	6023      	str	r3, [r4, #0]
 801981e:	bc30      	pop	{r4, r5}
 8019820:	4770      	bx	lr
 8019822:	4804      	ldr	r0, [pc, #16]	; (8019834 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 8019824:	4770      	bx	lr
 8019826:	bf00      	nop
 8019828:	20010b2c 	.word	0x20010b2c
 801982c:	0801f04c 	.word	0x0801f04c
 8019830:	20010b30 	.word	0x20010b30
 8019834:	0801f070 	.word	0x0801f070

08019838 <builtin_interfaces__msg__Time__init>:
 8019838:	3800      	subs	r0, #0
 801983a:	bf18      	it	ne
 801983c:	2001      	movne	r0, #1
 801983e:	4770      	bx	lr

08019840 <builtin_interfaces__msg__Time__fini>:
 8019840:	4770      	bx	lr
 8019842:	bf00      	nop

08019844 <ucdr_serialize_sequence_char>:
 8019844:	b570      	push	{r4, r5, r6, lr}
 8019846:	4615      	mov	r5, r2
 8019848:	460e      	mov	r6, r1
 801984a:	7d01      	ldrb	r1, [r0, #20]
 801984c:	4604      	mov	r4, r0
 801984e:	f7f5 feab 	bl	800f5a8 <ucdr_serialize_endian_uint32_t>
 8019852:	b90d      	cbnz	r5, 8019858 <ucdr_serialize_sequence_char+0x14>
 8019854:	2001      	movs	r0, #1
 8019856:	bd70      	pop	{r4, r5, r6, pc}
 8019858:	462b      	mov	r3, r5
 801985a:	4632      	mov	r2, r6
 801985c:	7d21      	ldrb	r1, [r4, #20]
 801985e:	4620      	mov	r0, r4
 8019860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019864:	f7f5 b9e8 	b.w	800ec38 <ucdr_serialize_endian_array_char>

08019868 <ucdr_deserialize_sequence_char>:
 8019868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801986c:	461d      	mov	r5, r3
 801986e:	4616      	mov	r6, r2
 8019870:	460f      	mov	r7, r1
 8019872:	461a      	mov	r2, r3
 8019874:	7d01      	ldrb	r1, [r0, #20]
 8019876:	4604      	mov	r4, r0
 8019878:	f7f5 ffbe 	bl	800f7f8 <ucdr_deserialize_endian_uint32_t>
 801987c:	682b      	ldr	r3, [r5, #0]
 801987e:	429e      	cmp	r6, r3
 8019880:	d201      	bcs.n	8019886 <ucdr_deserialize_sequence_char+0x1e>
 8019882:	2201      	movs	r2, #1
 8019884:	75a2      	strb	r2, [r4, #22]
 8019886:	b913      	cbnz	r3, 801988e <ucdr_deserialize_sequence_char+0x26>
 8019888:	2001      	movs	r0, #1
 801988a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801988e:	463a      	mov	r2, r7
 8019890:	7d21      	ldrb	r1, [r4, #20]
 8019892:	4620      	mov	r0, r4
 8019894:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019898:	f7f5 ba00 	b.w	800ec9c <ucdr_deserialize_endian_array_char>

0801989c <ucdr_serialize_sequence_uint8_t>:
 801989c:	b570      	push	{r4, r5, r6, lr}
 801989e:	4615      	mov	r5, r2
 80198a0:	460e      	mov	r6, r1
 80198a2:	7d01      	ldrb	r1, [r0, #20]
 80198a4:	4604      	mov	r4, r0
 80198a6:	f7f5 fe7f 	bl	800f5a8 <ucdr_serialize_endian_uint32_t>
 80198aa:	b90d      	cbnz	r5, 80198b0 <ucdr_serialize_sequence_uint8_t+0x14>
 80198ac:	2001      	movs	r0, #1
 80198ae:	bd70      	pop	{r4, r5, r6, pc}
 80198b0:	462b      	mov	r3, r5
 80198b2:	4632      	mov	r2, r6
 80198b4:	7d21      	ldrb	r1, [r4, #20]
 80198b6:	4620      	mov	r0, r4
 80198b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80198bc:	f7f5 ba54 	b.w	800ed68 <ucdr_serialize_endian_array_uint8_t>

080198c0 <ucdr_deserialize_sequence_uint8_t>:
 80198c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198c4:	461d      	mov	r5, r3
 80198c6:	4616      	mov	r6, r2
 80198c8:	460f      	mov	r7, r1
 80198ca:	461a      	mov	r2, r3
 80198cc:	7d01      	ldrb	r1, [r0, #20]
 80198ce:	4604      	mov	r4, r0
 80198d0:	f7f5 ff92 	bl	800f7f8 <ucdr_deserialize_endian_uint32_t>
 80198d4:	682b      	ldr	r3, [r5, #0]
 80198d6:	429e      	cmp	r6, r3
 80198d8:	d201      	bcs.n	80198de <ucdr_deserialize_sequence_uint8_t+0x1e>
 80198da:	2201      	movs	r2, #1
 80198dc:	75a2      	strb	r2, [r4, #22]
 80198de:	b913      	cbnz	r3, 80198e6 <ucdr_deserialize_sequence_uint8_t+0x26>
 80198e0:	2001      	movs	r0, #1
 80198e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198e6:	463a      	mov	r2, r7
 80198e8:	7d21      	ldrb	r1, [r4, #20]
 80198ea:	4620      	mov	r0, r4
 80198ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80198f0:	f7f5 baa0 	b.w	800ee34 <ucdr_deserialize_endian_array_uint8_t>

080198f4 <ucdr_serialize_string>:
 80198f4:	b510      	push	{r4, lr}
 80198f6:	b082      	sub	sp, #8
 80198f8:	4604      	mov	r4, r0
 80198fa:	4608      	mov	r0, r1
 80198fc:	9101      	str	r1, [sp, #4]
 80198fe:	f7e6 fcff 	bl	8000300 <strlen>
 8019902:	4602      	mov	r2, r0
 8019904:	9901      	ldr	r1, [sp, #4]
 8019906:	4620      	mov	r0, r4
 8019908:	3201      	adds	r2, #1
 801990a:	b002      	add	sp, #8
 801990c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019910:	f7ff bf98 	b.w	8019844 <ucdr_serialize_sequence_char>

08019914 <ucdr_deserialize_string>:
 8019914:	b500      	push	{lr}
 8019916:	b083      	sub	sp, #12
 8019918:	ab01      	add	r3, sp, #4
 801991a:	f7ff ffa5 	bl	8019868 <ucdr_deserialize_sequence_char>
 801991e:	b003      	add	sp, #12
 8019920:	f85d fb04 	ldr.w	pc, [sp], #4

08019924 <get_custom_error>:
 8019924:	4b01      	ldr	r3, [pc, #4]	; (801992c <get_custom_error+0x8>)
 8019926:	7818      	ldrb	r0, [r3, #0]
 8019928:	4770      	bx	lr
 801992a:	bf00      	nop
 801992c:	20010b54 	.word	0x20010b54

08019930 <recv_custom_msg>:
 8019930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019934:	4693      	mov	fp, r2
 8019936:	b089      	sub	sp, #36	; 0x24
 8019938:	2200      	movs	r2, #0
 801993a:	4604      	mov	r4, r0
 801993c:	468a      	mov	sl, r1
 801993e:	9305      	str	r3, [sp, #20]
 8019940:	f88d 201e 	strb.w	r2, [sp, #30]
 8019944:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8019948:	b322      	cbz	r2, 8019994 <recv_custom_msg+0x64>
 801994a:	f200 2902 	addw	r9, r0, #514	; 0x202
 801994e:	f10d 081f 	add.w	r8, sp, #31
 8019952:	af05      	add	r7, sp, #20
 8019954:	f10d 061e 	add.w	r6, sp, #30
 8019958:	f44f 7500 	mov.w	r5, #512	; 0x200
 801995c:	e002      	b.n	8019964 <recv_custom_msg+0x34>
 801995e:	9b05      	ldr	r3, [sp, #20]
 8019960:	2b00      	cmp	r3, #0
 8019962:	dd0f      	ble.n	8019984 <recv_custom_msg+0x54>
 8019964:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8019968:	4623      	mov	r3, r4
 801996a:	4622      	mov	r2, r4
 801996c:	4648      	mov	r0, r9
 801996e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8019972:	e9cd 5600 	strd	r5, r6, [sp]
 8019976:	f001 f913 	bl	801aba0 <uxr_read_framed_msg>
 801997a:	2800      	cmp	r0, #0
 801997c:	d0ef      	beq.n	801995e <recv_custom_msg+0x2e>
 801997e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8019982:	b1b3      	cbz	r3, 80199b2 <recv_custom_msg+0x82>
 8019984:	4b0f      	ldr	r3, [pc, #60]	; (80199c4 <recv_custom_msg+0x94>)
 8019986:	2000      	movs	r0, #0
 8019988:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801998c:	701a      	strb	r2, [r3, #0]
 801998e:	b009      	add	sp, #36	; 0x24
 8019990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019994:	f10d 021f 	add.w	r2, sp, #31
 8019998:	4601      	mov	r1, r0
 801999a:	9200      	str	r2, [sp, #0]
 801999c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80199a0:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 80199a4:	47a8      	blx	r5
 80199a6:	2800      	cmp	r0, #0
 80199a8:	d0ec      	beq.n	8019984 <recv_custom_msg+0x54>
 80199aa:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d1e8      	bne.n	8019984 <recv_custom_msg+0x54>
 80199b2:	f8cb 0000 	str.w	r0, [fp]
 80199b6:	2001      	movs	r0, #1
 80199b8:	f8ca 4000 	str.w	r4, [sl]
 80199bc:	b009      	add	sp, #36	; 0x24
 80199be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199c2:	bf00      	nop
 80199c4:	20010b54 	.word	0x20010b54

080199c8 <send_custom_msg>:
 80199c8:	b530      	push	{r4, r5, lr}
 80199ca:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 80199ce:	b087      	sub	sp, #28
 80199d0:	4614      	mov	r4, r2
 80199d2:	b995      	cbnz	r5, 80199fa <send_custom_msg+0x32>
 80199d4:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 80199d8:	f10d 0317 	add.w	r3, sp, #23
 80199dc:	47a8      	blx	r5
 80199de:	1e03      	subs	r3, r0, #0
 80199e0:	bf18      	it	ne
 80199e2:	2301      	movne	r3, #1
 80199e4:	42a0      	cmp	r0, r4
 80199e6:	bf18      	it	ne
 80199e8:	2300      	movne	r3, #0
 80199ea:	b91b      	cbnz	r3, 80199f4 <send_custom_msg+0x2c>
 80199ec:	4a0a      	ldr	r2, [pc, #40]	; (8019a18 <send_custom_msg+0x50>)
 80199ee:	f89d 1017 	ldrb.w	r1, [sp, #23]
 80199f2:	7011      	strb	r1, [r2, #0]
 80199f4:	4618      	mov	r0, r3
 80199f6:	b007      	add	sp, #28
 80199f8:	bd30      	pop	{r4, r5, pc}
 80199fa:	460b      	mov	r3, r1
 80199fc:	2200      	movs	r2, #0
 80199fe:	f10d 0117 	add.w	r1, sp, #23
 8019a02:	9400      	str	r4, [sp, #0]
 8019a04:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8019a08:	4602      	mov	r2, r0
 8019a0a:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8019a0e:	f200 2002 	addw	r0, r0, #514	; 0x202
 8019a12:	f000 fee7 	bl	801a7e4 <uxr_write_framed_msg>
 8019a16:	e7e2      	b.n	80199de <send_custom_msg+0x16>
 8019a18:	20010b54 	.word	0x20010b54

08019a1c <uxr_set_custom_transport_callbacks>:
 8019a1c:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8019a20:	9901      	ldr	r1, [sp, #4]
 8019a22:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8019a26:	9b00      	ldr	r3, [sp, #0]
 8019a28:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 8019a2c:	4770      	bx	lr
 8019a2e:	bf00      	nop

08019a30 <uxr_init_custom_transport>:
 8019a30:	b538      	push	{r3, r4, r5, lr}
 8019a32:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8019a36:	b303      	cbz	r3, 8019a7a <uxr_init_custom_transport+0x4a>
 8019a38:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8019a3c:	4604      	mov	r4, r0
 8019a3e:	b1e2      	cbz	r2, 8019a7a <uxr_init_custom_transport+0x4a>
 8019a40:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8019a44:	b1ca      	cbz	r2, 8019a7a <uxr_init_custom_transport+0x4a>
 8019a46:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8019a4a:	b1b2      	cbz	r2, 8019a7a <uxr_init_custom_transport+0x4a>
 8019a4c:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8019a50:	4798      	blx	r3
 8019a52:	4605      	mov	r5, r0
 8019a54:	b188      	cbz	r0, 8019a7a <uxr_init_custom_transport+0x4a>
 8019a56:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8019a5a:	b98b      	cbnz	r3, 8019a80 <uxr_init_custom_transport+0x50>
 8019a5c:	4b0b      	ldr	r3, [pc, #44]	; (8019a8c <uxr_init_custom_transport+0x5c>)
 8019a5e:	4628      	mov	r0, r5
 8019a60:	490b      	ldr	r1, [pc, #44]	; (8019a90 <uxr_init_custom_transport+0x60>)
 8019a62:	4a0c      	ldr	r2, [pc, #48]	; (8019a94 <uxr_init_custom_transport+0x64>)
 8019a64:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8019a68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019a6c:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8019a70:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8019a74:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8019a78:	bd38      	pop	{r3, r4, r5, pc}
 8019a7a:	2500      	movs	r5, #0
 8019a7c:	4628      	mov	r0, r5
 8019a7e:	bd38      	pop	{r3, r4, r5, pc}
 8019a80:	2100      	movs	r1, #0
 8019a82:	f204 2002 	addw	r0, r4, #514	; 0x202
 8019a86:	f000 fea7 	bl	801a7d8 <uxr_init_framing_io>
 8019a8a:	e7e7      	b.n	8019a5c <uxr_init_custom_transport+0x2c>
 8019a8c:	08019931 	.word	0x08019931
 8019a90:	080199c9 	.word	0x080199c9
 8019a94:	08019925 	.word	0x08019925

08019a98 <uxr_close_custom_transport>:
 8019a98:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8019a9c:	4718      	bx	r3
 8019a9e:	bf00      	nop

08019aa0 <uxr_init_input_best_effort_stream>:
 8019aa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019aa4:	8003      	strh	r3, [r0, #0]
 8019aa6:	4770      	bx	lr

08019aa8 <uxr_reset_input_best_effort_stream>:
 8019aa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019aac:	8003      	strh	r3, [r0, #0]
 8019aae:	4770      	bx	lr

08019ab0 <uxr_receive_best_effort_message>:
 8019ab0:	b538      	push	{r3, r4, r5, lr}
 8019ab2:	4604      	mov	r4, r0
 8019ab4:	8800      	ldrh	r0, [r0, #0]
 8019ab6:	460d      	mov	r5, r1
 8019ab8:	f000 fe76 	bl	801a7a8 <uxr_seq_num_cmp>
 8019abc:	4603      	mov	r3, r0
 8019abe:	0fc0      	lsrs	r0, r0, #31
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	bfb8      	it	lt
 8019ac4:	8025      	strhlt	r5, [r4, #0]
 8019ac6:	bd38      	pop	{r3, r4, r5, pc}

08019ac8 <on_full_input_buffer>:
 8019ac8:	b570      	push	{r4, r5, r6, lr}
 8019aca:	460c      	mov	r4, r1
 8019acc:	4605      	mov	r5, r0
 8019ace:	8908      	ldrh	r0, [r1, #8]
 8019ad0:	682b      	ldr	r3, [r5, #0]
 8019ad2:	7d26      	ldrb	r6, [r4, #20]
 8019ad4:	e9d1 1200 	ldrd	r1, r2, [r1]
 8019ad8:	fbb2 f2f0 	udiv	r2, r2, r0
 8019adc:	eba3 0c01 	sub.w	ip, r3, r1
 8019ae0:	fbbc fcf2 	udiv	ip, ip, r2
 8019ae4:	f10c 0c01 	add.w	ip, ip, #1
 8019ae8:	fa1f f38c 	uxth.w	r3, ip
 8019aec:	fbb3 fcf0 	udiv	ip, r3, r0
 8019af0:	fb00 331c 	mls	r3, r0, ip, r3
 8019af4:	b29b      	uxth	r3, r3
 8019af6:	fb02 f303 	mul.w	r3, r2, r3
 8019afa:	1d18      	adds	r0, r3, #4
 8019afc:	4408      	add	r0, r1
 8019afe:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8019b02:	b116      	cbz	r6, 8019b0a <on_full_input_buffer+0x42>
 8019b04:	2600      	movs	r6, #0
 8019b06:	f840 6c04 	str.w	r6, [r0, #-4]
 8019b0a:	2a03      	cmp	r2, #3
 8019b0c:	d801      	bhi.n	8019b12 <on_full_input_buffer+0x4a>
 8019b0e:	2001      	movs	r0, #1
 8019b10:	bd70      	pop	{r4, r5, r6, pc}
 8019b12:	3308      	adds	r3, #8
 8019b14:	4628      	mov	r0, r5
 8019b16:	3a04      	subs	r2, #4
 8019b18:	4419      	add	r1, r3
 8019b1a:	692b      	ldr	r3, [r5, #16]
 8019b1c:	f7f6 fdee 	bl	80106fc <ucdr_init_buffer_origin>
 8019b20:	4628      	mov	r0, r5
 8019b22:	4622      	mov	r2, r4
 8019b24:	4902      	ldr	r1, [pc, #8]	; (8019b30 <on_full_input_buffer+0x68>)
 8019b26:	f7f6 fdc5 	bl	80106b4 <ucdr_set_on_full_buffer_callback>
 8019b2a:	2000      	movs	r0, #0
 8019b2c:	bd70      	pop	{r4, r5, r6, pc}
 8019b2e:	bf00      	nop
 8019b30:	08019ac9 	.word	0x08019ac9

08019b34 <uxr_init_input_reliable_stream>:
 8019b34:	b510      	push	{r4, lr}
 8019b36:	e9c0 1200 	strd	r1, r2, [r0]
 8019b3a:	2400      	movs	r4, #0
 8019b3c:	9a02      	ldr	r2, [sp, #8]
 8019b3e:	8103      	strh	r3, [r0, #8]
 8019b40:	6102      	str	r2, [r0, #16]
 8019b42:	7504      	strb	r4, [r0, #20]
 8019b44:	b1c3      	cbz	r3, 8019b78 <uxr_init_input_reliable_stream+0x44>
 8019b46:	600c      	str	r4, [r1, #0]
 8019b48:	8901      	ldrh	r1, [r0, #8]
 8019b4a:	2901      	cmp	r1, #1
 8019b4c:	d914      	bls.n	8019b78 <uxr_init_input_reliable_stream+0x44>
 8019b4e:	f04f 0c01 	mov.w	ip, #1
 8019b52:	6843      	ldr	r3, [r0, #4]
 8019b54:	f10c 0e01 	add.w	lr, ip, #1
 8019b58:	fbbc f2f1 	udiv	r2, ip, r1
 8019b5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8019b60:	fb01 c212 	mls	r2, r1, r2, ip
 8019b64:	fa1f fc8e 	uxth.w	ip, lr
 8019b68:	b292      	uxth	r2, r2
 8019b6a:	fb02 f303 	mul.w	r3, r2, r3
 8019b6e:	6802      	ldr	r2, [r0, #0]
 8019b70:	50d4      	str	r4, [r2, r3]
 8019b72:	8901      	ldrh	r1, [r0, #8]
 8019b74:	4561      	cmp	r1, ip
 8019b76:	d8ec      	bhi.n	8019b52 <uxr_init_input_reliable_stream+0x1e>
 8019b78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019b7c:	60c3      	str	r3, [r0, #12]
 8019b7e:	bd10      	pop	{r4, pc}

08019b80 <uxr_reset_input_reliable_stream>:
 8019b80:	8901      	ldrh	r1, [r0, #8]
 8019b82:	b1d9      	cbz	r1, 8019bbc <uxr_reset_input_reliable_stream+0x3c>
 8019b84:	b510      	push	{r4, lr}
 8019b86:	f04f 0e00 	mov.w	lr, #0
 8019b8a:	46f4      	mov	ip, lr
 8019b8c:	4674      	mov	r4, lr
 8019b8e:	6843      	ldr	r3, [r0, #4]
 8019b90:	f10e 0e01 	add.w	lr, lr, #1
 8019b94:	fbbc f2f1 	udiv	r2, ip, r1
 8019b98:	fbb3 f3f1 	udiv	r3, r3, r1
 8019b9c:	fb01 c212 	mls	r2, r1, r2, ip
 8019ba0:	fa1f fc8e 	uxth.w	ip, lr
 8019ba4:	b292      	uxth	r2, r2
 8019ba6:	fb02 f303 	mul.w	r3, r2, r3
 8019baa:	6802      	ldr	r2, [r0, #0]
 8019bac:	50d4      	str	r4, [r2, r3]
 8019bae:	8901      	ldrh	r1, [r0, #8]
 8019bb0:	4561      	cmp	r1, ip
 8019bb2:	d8ec      	bhi.n	8019b8e <uxr_reset_input_reliable_stream+0xe>
 8019bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019bb8:	60c3      	str	r3, [r0, #12]
 8019bba:	bd10      	pop	{r4, pc}
 8019bbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019bc0:	60c3      	str	r3, [r0, #12]
 8019bc2:	4770      	bx	lr

08019bc4 <uxr_receive_reliable_message>:
 8019bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019bc8:	4604      	mov	r4, r0
 8019bca:	460d      	mov	r5, r1
 8019bcc:	8901      	ldrh	r1, [r0, #8]
 8019bce:	4617      	mov	r7, r2
 8019bd0:	8980      	ldrh	r0, [r0, #12]
 8019bd2:	4698      	mov	r8, r3
 8019bd4:	f000 fde0 	bl	801a798 <uxr_seq_num_add>
 8019bd8:	4629      	mov	r1, r5
 8019bda:	4606      	mov	r6, r0
 8019bdc:	89a0      	ldrh	r0, [r4, #12]
 8019bde:	f000 fde3 	bl	801a7a8 <uxr_seq_num_cmp>
 8019be2:	2800      	cmp	r0, #0
 8019be4:	db0a      	blt.n	8019bfc <uxr_receive_reliable_message+0x38>
 8019be6:	2600      	movs	r6, #0
 8019be8:	4629      	mov	r1, r5
 8019bea:	89e0      	ldrh	r0, [r4, #14]
 8019bec:	f000 fddc 	bl	801a7a8 <uxr_seq_num_cmp>
 8019bf0:	2800      	cmp	r0, #0
 8019bf2:	da00      	bge.n	8019bf6 <uxr_receive_reliable_message+0x32>
 8019bf4:	81e5      	strh	r5, [r4, #14]
 8019bf6:	4630      	mov	r0, r6
 8019bf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019bfc:	4630      	mov	r0, r6
 8019bfe:	4629      	mov	r1, r5
 8019c00:	f000 fdd2 	bl	801a7a8 <uxr_seq_num_cmp>
 8019c04:	2800      	cmp	r0, #0
 8019c06:	dbee      	blt.n	8019be6 <uxr_receive_reliable_message+0x22>
 8019c08:	6923      	ldr	r3, [r4, #16]
 8019c0a:	4638      	mov	r0, r7
 8019c0c:	4798      	blx	r3
 8019c0e:	4681      	mov	r9, r0
 8019c10:	2101      	movs	r1, #1
 8019c12:	89a0      	ldrh	r0, [r4, #12]
 8019c14:	f000 fdc0 	bl	801a798 <uxr_seq_num_add>
 8019c18:	f1b9 0f00 	cmp.w	r9, #0
 8019c1c:	bf08      	it	eq
 8019c1e:	4285      	cmpeq	r5, r0
 8019c20:	bf0c      	ite	eq
 8019c22:	2601      	moveq	r6, #1
 8019c24:	2600      	movne	r6, #0
 8019c26:	d104      	bne.n	8019c32 <uxr_receive_reliable_message+0x6e>
 8019c28:	2300      	movs	r3, #0
 8019c2a:	9a08      	ldr	r2, [sp, #32]
 8019c2c:	81a0      	strh	r0, [r4, #12]
 8019c2e:	7013      	strb	r3, [r2, #0]
 8019c30:	e7da      	b.n	8019be8 <uxr_receive_reliable_message+0x24>
 8019c32:	8922      	ldrh	r2, [r4, #8]
 8019c34:	6863      	ldr	r3, [r4, #4]
 8019c36:	fbb5 f0f2 	udiv	r0, r5, r2
 8019c3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8019c3e:	fb02 5010 	mls	r0, r2, r0, r5
 8019c42:	b280      	uxth	r0, r0
 8019c44:	fb03 f000 	mul.w	r0, r3, r0
 8019c48:	6823      	ldr	r3, [r4, #0]
 8019c4a:	3004      	adds	r0, #4
 8019c4c:	4418      	add	r0, r3
 8019c4e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d1c7      	bne.n	8019be6 <uxr_receive_reliable_message+0x22>
 8019c56:	4639      	mov	r1, r7
 8019c58:	4642      	mov	r2, r8
 8019c5a:	f002 fe5c 	bl	801c916 <memcpy>
 8019c5e:	8921      	ldrh	r1, [r4, #8]
 8019c60:	6863      	ldr	r3, [r4, #4]
 8019c62:	fbb5 f2f1 	udiv	r2, r5, r1
 8019c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8019c6a:	fb01 5212 	mls	r2, r1, r2, r5
 8019c6e:	b292      	uxth	r2, r2
 8019c70:	fb02 f303 	mul.w	r3, r2, r3
 8019c74:	6822      	ldr	r2, [r4, #0]
 8019c76:	f842 8003 	str.w	r8, [r2, r3]
 8019c7a:	2301      	movs	r3, #1
 8019c7c:	9a08      	ldr	r2, [sp, #32]
 8019c7e:	7013      	strb	r3, [r2, #0]
 8019c80:	f1b9 0f00 	cmp.w	r9, #0
 8019c84:	d0af      	beq.n	8019be6 <uxr_receive_reliable_message+0x22>
 8019c86:	89a6      	ldrh	r6, [r4, #12]
 8019c88:	2101      	movs	r1, #1
 8019c8a:	4630      	mov	r0, r6
 8019c8c:	f000 fd84 	bl	801a798 <uxr_seq_num_add>
 8019c90:	8921      	ldrh	r1, [r4, #8]
 8019c92:	6863      	ldr	r3, [r4, #4]
 8019c94:	4606      	mov	r6, r0
 8019c96:	fbb0 f2f1 	udiv	r2, r0, r1
 8019c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8019c9e:	fb01 0212 	mls	r2, r1, r2, r0
 8019ca2:	6820      	ldr	r0, [r4, #0]
 8019ca4:	b292      	uxth	r2, r2
 8019ca6:	fb02 f303 	mul.w	r3, r2, r3
 8019caa:	3304      	adds	r3, #4
 8019cac:	4418      	add	r0, r3
 8019cae:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	d097      	beq.n	8019be6 <uxr_receive_reliable_message+0x22>
 8019cb6:	6923      	ldr	r3, [r4, #16]
 8019cb8:	4798      	blx	r3
 8019cba:	2802      	cmp	r0, #2
 8019cbc:	d002      	beq.n	8019cc4 <uxr_receive_reliable_message+0x100>
 8019cbe:	2801      	cmp	r0, #1
 8019cc0:	d0e2      	beq.n	8019c88 <uxr_receive_reliable_message+0xc4>
 8019cc2:	e790      	b.n	8019be6 <uxr_receive_reliable_message+0x22>
 8019cc4:	2601      	movs	r6, #1
 8019cc6:	e78f      	b.n	8019be8 <uxr_receive_reliable_message+0x24>

08019cc8 <uxr_next_input_reliable_buffer_available>:
 8019cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ccc:	4604      	mov	r4, r0
 8019cce:	460f      	mov	r7, r1
 8019cd0:	8980      	ldrh	r0, [r0, #12]
 8019cd2:	2101      	movs	r1, #1
 8019cd4:	4690      	mov	r8, r2
 8019cd6:	f000 fd5f 	bl	801a798 <uxr_seq_num_add>
 8019cda:	8922      	ldrh	r2, [r4, #8]
 8019cdc:	6866      	ldr	r6, [r4, #4]
 8019cde:	fbb0 f3f2 	udiv	r3, r0, r2
 8019ce2:	fbb6 f6f2 	udiv	r6, r6, r2
 8019ce6:	fb02 0313 	mls	r3, r2, r3, r0
 8019cea:	b29b      	uxth	r3, r3
 8019cec:	fb03 f606 	mul.w	r6, r3, r6
 8019cf0:	6823      	ldr	r3, [r4, #0]
 8019cf2:	3604      	adds	r6, #4
 8019cf4:	441e      	add	r6, r3
 8019cf6:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8019cfa:	f1b9 0f00 	cmp.w	r9, #0
 8019cfe:	d023      	beq.n	8019d48 <uxr_next_input_reliable_buffer_available+0x80>
 8019d00:	4605      	mov	r5, r0
 8019d02:	6923      	ldr	r3, [r4, #16]
 8019d04:	4630      	mov	r0, r6
 8019d06:	4798      	blx	r3
 8019d08:	4682      	mov	sl, r0
 8019d0a:	b300      	cbz	r0, 8019d4e <uxr_next_input_reliable_buffer_available+0x86>
 8019d0c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8019d10:	2101      	movs	r1, #1
 8019d12:	4650      	mov	r0, sl
 8019d14:	f000 fd40 	bl	801a798 <uxr_seq_num_add>
 8019d18:	8921      	ldrh	r1, [r4, #8]
 8019d1a:	4682      	mov	sl, r0
 8019d1c:	6863      	ldr	r3, [r4, #4]
 8019d1e:	6820      	ldr	r0, [r4, #0]
 8019d20:	fbba f2f1 	udiv	r2, sl, r1
 8019d24:	fbb3 f3f1 	udiv	r3, r3, r1
 8019d28:	fb01 a212 	mls	r2, r1, r2, sl
 8019d2c:	b292      	uxth	r2, r2
 8019d2e:	fb02 f303 	mul.w	r3, r2, r3
 8019d32:	3304      	adds	r3, #4
 8019d34:	4418      	add	r0, r3
 8019d36:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019d3a:	b12b      	cbz	r3, 8019d48 <uxr_next_input_reliable_buffer_available+0x80>
 8019d3c:	6923      	ldr	r3, [r4, #16]
 8019d3e:	4798      	blx	r3
 8019d40:	2802      	cmp	r0, #2
 8019d42:	d01b      	beq.n	8019d7c <uxr_next_input_reliable_buffer_available+0xb4>
 8019d44:	2801      	cmp	r0, #1
 8019d46:	d0e3      	beq.n	8019d10 <uxr_next_input_reliable_buffer_available+0x48>
 8019d48:	2000      	movs	r0, #0
 8019d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d4e:	464a      	mov	r2, r9
 8019d50:	4631      	mov	r1, r6
 8019d52:	4638      	mov	r0, r7
 8019d54:	f7f6 fcda 	bl	801070c <ucdr_init_buffer>
 8019d58:	8921      	ldrh	r1, [r4, #8]
 8019d5a:	6863      	ldr	r3, [r4, #4]
 8019d5c:	2001      	movs	r0, #1
 8019d5e:	fbb5 f2f1 	udiv	r2, r5, r1
 8019d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8019d66:	fb01 5212 	mls	r2, r1, r2, r5
 8019d6a:	b292      	uxth	r2, r2
 8019d6c:	fb02 f303 	mul.w	r3, r2, r3
 8019d70:	6822      	ldr	r2, [r4, #0]
 8019d72:	f842 a003 	str.w	sl, [r2, r3]
 8019d76:	81a5      	strh	r5, [r4, #12]
 8019d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d7c:	8920      	ldrh	r0, [r4, #8]
 8019d7e:	eb06 0108 	add.w	r1, r6, r8
 8019d82:	6863      	ldr	r3, [r4, #4]
 8019d84:	eba9 0208 	sub.w	r2, r9, r8
 8019d88:	fbb5 f6f0 	udiv	r6, r5, r0
 8019d8c:	fbb3 f3f0 	udiv	r3, r3, r0
 8019d90:	fb00 5516 	mls	r5, r0, r6, r5
 8019d94:	2000      	movs	r0, #0
 8019d96:	b2ad      	uxth	r5, r5
 8019d98:	fb03 f505 	mul.w	r5, r3, r5
 8019d9c:	6823      	ldr	r3, [r4, #0]
 8019d9e:	5158      	str	r0, [r3, r5]
 8019da0:	4638      	mov	r0, r7
 8019da2:	f7f6 fcb3 	bl	801070c <ucdr_init_buffer>
 8019da6:	4638      	mov	r0, r7
 8019da8:	4622      	mov	r2, r4
 8019daa:	4903      	ldr	r1, [pc, #12]	; (8019db8 <uxr_next_input_reliable_buffer_available+0xf0>)
 8019dac:	f7f6 fc82 	bl	80106b4 <ucdr_set_on_full_buffer_callback>
 8019db0:	2001      	movs	r0, #1
 8019db2:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8019db6:	e7c8      	b.n	8019d4a <uxr_next_input_reliable_buffer_available+0x82>
 8019db8:	08019ac9 	.word	0x08019ac9

08019dbc <uxr_process_heartbeat>:
 8019dbc:	b538      	push	{r3, r4, r5, lr}
 8019dbe:	4611      	mov	r1, r2
 8019dc0:	4604      	mov	r4, r0
 8019dc2:	89c0      	ldrh	r0, [r0, #14]
 8019dc4:	4615      	mov	r5, r2
 8019dc6:	f000 fcef 	bl	801a7a8 <uxr_seq_num_cmp>
 8019dca:	2800      	cmp	r0, #0
 8019dcc:	bfb8      	it	lt
 8019dce:	81e5      	strhlt	r5, [r4, #14]
 8019dd0:	bd38      	pop	{r3, r4, r5, pc}
 8019dd2:	bf00      	nop

08019dd4 <uxr_compute_acknack>:
 8019dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019dd8:	8903      	ldrh	r3, [r0, #8]
 8019dda:	4604      	mov	r4, r0
 8019ddc:	460f      	mov	r7, r1
 8019dde:	8985      	ldrh	r5, [r0, #12]
 8019de0:	b1db      	cbz	r3, 8019e1a <uxr_compute_acknack+0x46>
 8019de2:	4628      	mov	r0, r5
 8019de4:	2601      	movs	r6, #1
 8019de6:	e004      	b.n	8019df2 <uxr_compute_acknack+0x1e>
 8019de8:	4566      	cmp	r6, ip
 8019dea:	f106 0601 	add.w	r6, r6, #1
 8019dee:	d214      	bcs.n	8019e1a <uxr_compute_acknack+0x46>
 8019df0:	89a0      	ldrh	r0, [r4, #12]
 8019df2:	b2b1      	uxth	r1, r6
 8019df4:	f000 fcd0 	bl	801a798 <uxr_seq_num_add>
 8019df8:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019dfc:	fbb0 f2fc 	udiv	r2, r0, ip
 8019e00:	e9d4 1300 	ldrd	r1, r3, [r4]
 8019e04:	fb0c 0212 	mls	r2, ip, r2, r0
 8019e08:	fbb3 f3fc 	udiv	r3, r3, ip
 8019e0c:	b292      	uxth	r2, r2
 8019e0e:	fb02 f303 	mul.w	r3, r2, r3
 8019e12:	58cb      	ldr	r3, [r1, r3]
 8019e14:	2b00      	cmp	r3, #0
 8019e16:	d1e7      	bne.n	8019de8 <uxr_compute_acknack+0x14>
 8019e18:	4605      	mov	r5, r0
 8019e1a:	803d      	strh	r5, [r7, #0]
 8019e1c:	2101      	movs	r1, #1
 8019e1e:	89e6      	ldrh	r6, [r4, #14]
 8019e20:	4628      	mov	r0, r5
 8019e22:	f000 fcbd 	bl	801a7a0 <uxr_seq_num_sub>
 8019e26:	4601      	mov	r1, r0
 8019e28:	4630      	mov	r0, r6
 8019e2a:	f000 fcb9 	bl	801a7a0 <uxr_seq_num_sub>
 8019e2e:	4606      	mov	r6, r0
 8019e30:	b328      	cbz	r0, 8019e7e <uxr_compute_acknack+0xaa>
 8019e32:	f04f 0900 	mov.w	r9, #0
 8019e36:	f04f 0801 	mov.w	r8, #1
 8019e3a:	464d      	mov	r5, r9
 8019e3c:	fa1f f189 	uxth.w	r1, r9
 8019e40:	8838      	ldrh	r0, [r7, #0]
 8019e42:	f000 fca9 	bl	801a798 <uxr_seq_num_add>
 8019e46:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019e4a:	6861      	ldr	r1, [r4, #4]
 8019e4c:	fa08 fe09 	lsl.w	lr, r8, r9
 8019e50:	6822      	ldr	r2, [r4, #0]
 8019e52:	f109 0901 	add.w	r9, r9, #1
 8019e56:	ea4e 0e05 	orr.w	lr, lr, r5
 8019e5a:	fbb0 f3fc 	udiv	r3, r0, ip
 8019e5e:	fbb1 f1fc 	udiv	r1, r1, ip
 8019e62:	fb03 001c 	mls	r0, r3, ip, r0
 8019e66:	b283      	uxth	r3, r0
 8019e68:	fb01 f303 	mul.w	r3, r1, r3
 8019e6c:	58d3      	ldr	r3, [r2, r3]
 8019e6e:	b90b      	cbnz	r3, 8019e74 <uxr_compute_acknack+0xa0>
 8019e70:	fa1f f58e 	uxth.w	r5, lr
 8019e74:	454e      	cmp	r6, r9
 8019e76:	d1e1      	bne.n	8019e3c <uxr_compute_acknack+0x68>
 8019e78:	4628      	mov	r0, r5
 8019e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e7e:	4605      	mov	r5, r0
 8019e80:	4628      	mov	r0, r5
 8019e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e86:	bf00      	nop

08019e88 <uxr_init_output_best_effort_stream>:
 8019e88:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8019e8c:	6001      	str	r1, [r0, #0]
 8019e8e:	7303      	strb	r3, [r0, #12]
 8019e90:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8019e94:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8019e98:	4770      	bx	lr
 8019e9a:	bf00      	nop

08019e9c <uxr_reset_output_best_effort_stream>:
 8019e9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019ea0:	7b03      	ldrb	r3, [r0, #12]
 8019ea2:	81c2      	strh	r2, [r0, #14]
 8019ea4:	6043      	str	r3, [r0, #4]
 8019ea6:	4770      	bx	lr

08019ea8 <uxr_prepare_best_effort_buffer_to_write>:
 8019ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019eaa:	4604      	mov	r4, r0
 8019eac:	b083      	sub	sp, #12
 8019eae:	6840      	ldr	r0, [r0, #4]
 8019eb0:	460d      	mov	r5, r1
 8019eb2:	4616      	mov	r6, r2
 8019eb4:	f7f8 f920 	bl	80120f8 <uxr_submessage_padding>
 8019eb8:	6863      	ldr	r3, [r4, #4]
 8019eba:	4418      	add	r0, r3
 8019ebc:	68a3      	ldr	r3, [r4, #8]
 8019ebe:	1942      	adds	r2, r0, r5
 8019ec0:	4293      	cmp	r3, r2
 8019ec2:	bf2c      	ite	cs
 8019ec4:	2701      	movcs	r7, #1
 8019ec6:	2700      	movcc	r7, #0
 8019ec8:	d202      	bcs.n	8019ed0 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8019eca:	4638      	mov	r0, r7
 8019ecc:	b003      	add	sp, #12
 8019ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019ed0:	9000      	str	r0, [sp, #0]
 8019ed2:	2300      	movs	r3, #0
 8019ed4:	4630      	mov	r0, r6
 8019ed6:	6821      	ldr	r1, [r4, #0]
 8019ed8:	f7f6 fc06 	bl	80106e8 <ucdr_init_buffer_origin_offset>
 8019edc:	6861      	ldr	r1, [r4, #4]
 8019ede:	4638      	mov	r0, r7
 8019ee0:	4429      	add	r1, r5
 8019ee2:	6061      	str	r1, [r4, #4]
 8019ee4:	b003      	add	sp, #12
 8019ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019ee8 <uxr_prepare_best_effort_buffer_to_send>:
 8019ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019eec:	4604      	mov	r4, r0
 8019eee:	461d      	mov	r5, r3
 8019ef0:	6840      	ldr	r0, [r0, #4]
 8019ef2:	7b23      	ldrb	r3, [r4, #12]
 8019ef4:	4298      	cmp	r0, r3
 8019ef6:	bf8c      	ite	hi
 8019ef8:	2601      	movhi	r6, #1
 8019efa:	2600      	movls	r6, #0
 8019efc:	d802      	bhi.n	8019f04 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8019efe:	4630      	mov	r0, r6
 8019f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f04:	4688      	mov	r8, r1
 8019f06:	89e0      	ldrh	r0, [r4, #14]
 8019f08:	2101      	movs	r1, #1
 8019f0a:	4617      	mov	r7, r2
 8019f0c:	f000 fc44 	bl	801a798 <uxr_seq_num_add>
 8019f10:	6823      	ldr	r3, [r4, #0]
 8019f12:	81e0      	strh	r0, [r4, #14]
 8019f14:	8028      	strh	r0, [r5, #0]
 8019f16:	4630      	mov	r0, r6
 8019f18:	f8c8 3000 	str.w	r3, [r8]
 8019f1c:	6863      	ldr	r3, [r4, #4]
 8019f1e:	603b      	str	r3, [r7, #0]
 8019f20:	7b23      	ldrb	r3, [r4, #12]
 8019f22:	6063      	str	r3, [r4, #4]
 8019f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019f28 <on_full_output_buffer>:
 8019f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f2a:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8019f2e:	460c      	mov	r4, r1
 8019f30:	6803      	ldr	r3, [r0, #0]
 8019f32:	4605      	mov	r5, r0
 8019f34:	7b26      	ldrb	r6, [r4, #12]
 8019f36:	e9d1 1200 	ldrd	r1, r2, [r1]
 8019f3a:	fbb2 f2fc 	udiv	r2, r2, ip
 8019f3e:	eba3 0e01 	sub.w	lr, r3, r1
 8019f42:	6903      	ldr	r3, [r0, #16]
 8019f44:	fbbe fef2 	udiv	lr, lr, r2
 8019f48:	f10e 0e01 	add.w	lr, lr, #1
 8019f4c:	fa1f fe8e 	uxth.w	lr, lr
 8019f50:	fbbe f7fc 	udiv	r7, lr, ip
 8019f54:	fb0c ec17 	mls	ip, ip, r7, lr
 8019f58:	fa1f fc8c 	uxth.w	ip, ip
 8019f5c:	fb02 fc0c 	mul.w	ip, r2, ip
 8019f60:	f851 200c 	ldr.w	r2, [r1, ip]
 8019f64:	44b4      	add	ip, r6
 8019f66:	1b92      	subs	r2, r2, r6
 8019f68:	f10c 0c08 	add.w	ip, ip, #8
 8019f6c:	3a04      	subs	r2, #4
 8019f6e:	4461      	add	r1, ip
 8019f70:	f7f6 fbc4 	bl	80106fc <ucdr_init_buffer_origin>
 8019f74:	4628      	mov	r0, r5
 8019f76:	4622      	mov	r2, r4
 8019f78:	4902      	ldr	r1, [pc, #8]	; (8019f84 <on_full_output_buffer+0x5c>)
 8019f7a:	f7f6 fb9b 	bl	80106b4 <ucdr_set_on_full_buffer_callback>
 8019f7e:	2000      	movs	r0, #0
 8019f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f82:	bf00      	nop
 8019f84:	08019f29 	.word	0x08019f29

08019f88 <uxr_init_output_reliable_stream>:
 8019f88:	b530      	push	{r4, r5, lr}
 8019f8a:	f89d 400c 	ldrb.w	r4, [sp, #12]
 8019f8e:	8103      	strh	r3, [r0, #8]
 8019f90:	7304      	strb	r4, [r0, #12]
 8019f92:	e9c0 1200 	strd	r1, r2, [r0]
 8019f96:	b1e3      	cbz	r3, 8019fd2 <uxr_init_output_reliable_stream+0x4a>
 8019f98:	600c      	str	r4, [r1, #0]
 8019f9a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8019f9e:	f1bc 0f01 	cmp.w	ip, #1
 8019fa2:	d916      	bls.n	8019fd2 <uxr_init_output_reliable_stream+0x4a>
 8019fa4:	f04f 0e01 	mov.w	lr, #1
 8019fa8:	6843      	ldr	r3, [r0, #4]
 8019faa:	f10e 0501 	add.w	r5, lr, #1
 8019fae:	7b04      	ldrb	r4, [r0, #12]
 8019fb0:	6801      	ldr	r1, [r0, #0]
 8019fb2:	fbbe f2fc 	udiv	r2, lr, ip
 8019fb6:	fbb3 f3fc 	udiv	r3, r3, ip
 8019fba:	fb0c e212 	mls	r2, ip, r2, lr
 8019fbe:	fa1f fe85 	uxth.w	lr, r5
 8019fc2:	b292      	uxth	r2, r2
 8019fc4:	fb02 f303 	mul.w	r3, r2, r3
 8019fc8:	50cc      	str	r4, [r1, r3]
 8019fca:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8019fce:	45f4      	cmp	ip, lr
 8019fd0:	d8ea      	bhi.n	8019fa8 <uxr_init_output_reliable_stream+0x20>
 8019fd2:	4b07      	ldr	r3, [pc, #28]	; (8019ff0 <uxr_init_output_reliable_stream+0x68>)
 8019fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019fd8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8019fdc:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8019fe0:	f8c0 300e 	str.w	r3, [r0, #14]
 8019fe4:	2300      	movs	r3, #0
 8019fe6:	8242      	strh	r2, [r0, #18]
 8019fe8:	8403      	strh	r3, [r0, #32]
 8019fea:	e9c0 4506 	strd	r4, r5, [r0, #24]
 8019fee:	bd30      	pop	{r4, r5, pc}
 8019ff0:	ffff0000 	.word	0xffff0000
 8019ff4:	00000000 	.word	0x00000000

08019ff8 <uxr_reset_output_reliable_stream>:
 8019ff8:	8901      	ldrh	r1, [r0, #8]
 8019ffa:	b510      	push	{r4, lr}
 8019ffc:	b1b1      	cbz	r1, 801a02c <uxr_reset_output_reliable_stream+0x34>
 8019ffe:	f04f 0e00 	mov.w	lr, #0
 801a002:	46f4      	mov	ip, lr
 801a004:	6843      	ldr	r3, [r0, #4]
 801a006:	f10e 0e01 	add.w	lr, lr, #1
 801a00a:	7b04      	ldrb	r4, [r0, #12]
 801a00c:	fbbc f2f1 	udiv	r2, ip, r1
 801a010:	fbb3 f3f1 	udiv	r3, r3, r1
 801a014:	fb01 c212 	mls	r2, r1, r2, ip
 801a018:	fa1f fc8e 	uxth.w	ip, lr
 801a01c:	b292      	uxth	r2, r2
 801a01e:	fb02 f303 	mul.w	r3, r2, r3
 801a022:	6802      	ldr	r2, [r0, #0]
 801a024:	50d4      	str	r4, [r2, r3]
 801a026:	8901      	ldrh	r1, [r0, #8]
 801a028:	4561      	cmp	r1, ip
 801a02a:	d8eb      	bhi.n	801a004 <uxr_reset_output_reliable_stream+0xc>
 801a02c:	4b08      	ldr	r3, [pc, #32]	; (801a050 <uxr_reset_output_reliable_stream+0x58>)
 801a02e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a032:	ed9f 7b05 	vldr	d7, [pc, #20]	; 801a048 <uxr_reset_output_reliable_stream+0x50>
 801a036:	f8c0 300e 	str.w	r3, [r0, #14]
 801a03a:	2300      	movs	r3, #0
 801a03c:	8242      	strh	r2, [r0, #18]
 801a03e:	8403      	strh	r3, [r0, #32]
 801a040:	ed80 7b06 	vstr	d7, [r0, #24]
 801a044:	bd10      	pop	{r4, pc}
 801a046:	bf00      	nop
 801a048:	ffffffff 	.word	0xffffffff
 801a04c:	7fffffff 	.word	0x7fffffff
 801a050:	ffff0000 	.word	0xffff0000

0801a054 <uxr_prepare_reliable_buffer_to_write>:
 801a054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a058:	4604      	mov	r4, r0
 801a05a:	b091      	sub	sp, #68	; 0x44
 801a05c:	8900      	ldrh	r0, [r0, #8]
 801a05e:	468b      	mov	fp, r1
 801a060:	89e6      	ldrh	r6, [r4, #14]
 801a062:	9204      	str	r2, [sp, #16]
 801a064:	6865      	ldr	r5, [r4, #4]
 801a066:	6823      	ldr	r3, [r4, #0]
 801a068:	f894 900c 	ldrb.w	r9, [r4, #12]
 801a06c:	fbb6 f2f0 	udiv	r2, r6, r0
 801a070:	fbb5 f5f0 	udiv	r5, r5, r0
 801a074:	fb00 6212 	mls	r2, r0, r2, r6
 801a078:	1f2f      	subs	r7, r5, #4
 801a07a:	b292      	uxth	r2, r2
 801a07c:	fb05 3202 	mla	r2, r5, r2, r3
 801a080:	1d11      	adds	r1, r2, #4
 801a082:	f8d2 8000 	ldr.w	r8, [r2]
 801a086:	9103      	str	r1, [sp, #12]
 801a088:	2800      	cmp	r0, #0
 801a08a:	f000 814a 	beq.w	801a322 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801a08e:	f04f 0c00 	mov.w	ip, #0
 801a092:	46e2      	mov	sl, ip
 801a094:	4661      	mov	r1, ip
 801a096:	f10c 0c01 	add.w	ip, ip, #1
 801a09a:	fbb1 f2f0 	udiv	r2, r1, r0
 801a09e:	fb00 1212 	mls	r2, r0, r2, r1
 801a0a2:	fa1f f18c 	uxth.w	r1, ip
 801a0a6:	b292      	uxth	r2, r2
 801a0a8:	fb05 f202 	mul.w	r2, r5, r2
 801a0ac:	589a      	ldr	r2, [r3, r2]
 801a0ae:	454a      	cmp	r2, r9
 801a0b0:	d103      	bne.n	801a0ba <uxr_prepare_reliable_buffer_to_write+0x66>
 801a0b2:	f10a 0a01 	add.w	sl, sl, #1
 801a0b6:	fa1f fa8a 	uxth.w	sl, sl
 801a0ba:	4281      	cmp	r1, r0
 801a0bc:	d3eb      	bcc.n	801a096 <uxr_prepare_reliable_buffer_to_write+0x42>
 801a0be:	4640      	mov	r0, r8
 801a0c0:	2104      	movs	r1, #4
 801a0c2:	f8cd a014 	str.w	sl, [sp, #20]
 801a0c6:	f7f6 fb25 	bl	8010714 <ucdr_alignment>
 801a0ca:	4480      	add	r8, r0
 801a0cc:	eb08 020b 	add.w	r2, r8, fp
 801a0d0:	42ba      	cmp	r2, r7
 801a0d2:	f240 80ca 	bls.w	801a26a <uxr_prepare_reliable_buffer_to_write+0x216>
 801a0d6:	7b22      	ldrb	r2, [r4, #12]
 801a0d8:	445a      	add	r2, fp
 801a0da:	42ba      	cmp	r2, r7
 801a0dc:	f240 80b2 	bls.w	801a244 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801a0e0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801a0e4:	b2bb      	uxth	r3, r7
 801a0e6:	eba2 0209 	sub.w	r2, r2, r9
 801a0ea:	441a      	add	r2, r3
 801a0ec:	b292      	uxth	r2, r2
 801a0ee:	fb0a f902 	mul.w	r9, sl, r2
 801a0f2:	9205      	str	r2, [sp, #20]
 801a0f4:	45d9      	cmp	r9, fp
 801a0f6:	9206      	str	r2, [sp, #24]
 801a0f8:	f0c0 80b3 	bcc.w	801a262 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a0fc:	f108 0204 	add.w	r2, r8, #4
 801a100:	42ba      	cmp	r2, r7
 801a102:	f080 80da 	bcs.w	801a2ba <uxr_prepare_reliable_buffer_to_write+0x266>
 801a106:	f1a3 0904 	sub.w	r9, r3, #4
 801a10a:	9b05      	ldr	r3, [sp, #20]
 801a10c:	eba9 0908 	sub.w	r9, r9, r8
 801a110:	fa1f f989 	uxth.w	r9, r9
 801a114:	ebab 0b09 	sub.w	fp, fp, r9
 801a118:	fbbb f2f3 	udiv	r2, fp, r3
 801a11c:	fb03 b312 	mls	r3, r3, r2, fp
 801a120:	2b00      	cmp	r3, #0
 801a122:	f040 80c4 	bne.w	801a2ae <uxr_prepare_reliable_buffer_to_write+0x25a>
 801a126:	b293      	uxth	r3, r2
 801a128:	4553      	cmp	r3, sl
 801a12a:	f200 809a 	bhi.w	801a262 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a12e:	2b00      	cmp	r3, #0
 801a130:	f000 80f9 	beq.w	801a326 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801a134:	f8cd 801c 	str.w	r8, [sp, #28]
 801a138:	f04f 0a00 	mov.w	sl, #0
 801a13c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801a140:	f10d 0b20 	add.w	fp, sp, #32
 801a144:	9505      	str	r5, [sp, #20]
 801a146:	461d      	mov	r5, r3
 801a148:	e000      	b.n	801a14c <uxr_prepare_reliable_buffer_to_write+0xf8>
 801a14a:	46c1      	mov	r9, r8
 801a14c:	8922      	ldrh	r2, [r4, #8]
 801a14e:	4658      	mov	r0, fp
 801a150:	6863      	ldr	r3, [r4, #4]
 801a152:	f10a 0a01 	add.w	sl, sl, #1
 801a156:	fbb6 f1f2 	udiv	r1, r6, r2
 801a15a:	fbb3 f3f2 	udiv	r3, r3, r2
 801a15e:	fb02 6111 	mls	r1, r2, r1, r6
 801a162:	463a      	mov	r2, r7
 801a164:	b289      	uxth	r1, r1
 801a166:	fb03 f101 	mul.w	r1, r3, r1
 801a16a:	6823      	ldr	r3, [r4, #0]
 801a16c:	3104      	adds	r1, #4
 801a16e:	4419      	add	r1, r3
 801a170:	2300      	movs	r3, #0
 801a172:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801a176:	f8cd c000 	str.w	ip, [sp]
 801a17a:	f7f6 fab5 	bl	80106e8 <ucdr_init_buffer_origin_offset>
 801a17e:	464a      	mov	r2, r9
 801a180:	2300      	movs	r3, #0
 801a182:	210d      	movs	r1, #13
 801a184:	4658      	mov	r0, fp
 801a186:	f7f7 ff77 	bl	8012078 <uxr_buffer_submessage_header>
 801a18a:	8921      	ldrh	r1, [r4, #8]
 801a18c:	6863      	ldr	r3, [r4, #4]
 801a18e:	4630      	mov	r0, r6
 801a190:	fbb6 f2f1 	udiv	r2, r6, r1
 801a194:	fbb3 f3f1 	udiv	r3, r3, r1
 801a198:	fb01 6212 	mls	r2, r1, r2, r6
 801a19c:	2101      	movs	r1, #1
 801a19e:	b292      	uxth	r2, r2
 801a1a0:	fb02 f303 	mul.w	r3, r2, r3
 801a1a4:	6822      	ldr	r2, [r4, #0]
 801a1a6:	50d7      	str	r7, [r2, r3]
 801a1a8:	f000 faf6 	bl	801a798 <uxr_seq_num_add>
 801a1ac:	4606      	mov	r6, r0
 801a1ae:	fa1f f38a 	uxth.w	r3, sl
 801a1b2:	429d      	cmp	r5, r3
 801a1b4:	d8c9      	bhi.n	801a14a <uxr_prepare_reliable_buffer_to_write+0xf6>
 801a1b6:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801a1ba:	9d05      	ldr	r5, [sp, #20]
 801a1bc:	8920      	ldrh	r0, [r4, #8]
 801a1be:	463a      	mov	r2, r7
 801a1c0:	6863      	ldr	r3, [r4, #4]
 801a1c2:	fbb6 f1f0 	udiv	r1, r6, r0
 801a1c6:	fbb3 f3f0 	udiv	r3, r3, r0
 801a1ca:	fb00 6111 	mls	r1, r0, r1, r6
 801a1ce:	4658      	mov	r0, fp
 801a1d0:	b289      	uxth	r1, r1
 801a1d2:	fb01 f303 	mul.w	r3, r1, r3
 801a1d6:	6821      	ldr	r1, [r4, #0]
 801a1d8:	3304      	adds	r3, #4
 801a1da:	4419      	add	r1, r3
 801a1dc:	2300      	movs	r3, #0
 801a1de:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801a1e2:	9700      	str	r7, [sp, #0]
 801a1e4:	f7f6 fa80 	bl	80106e8 <ucdr_init_buffer_origin_offset>
 801a1e8:	9f06      	ldr	r7, [sp, #24]
 801a1ea:	4658      	mov	r0, fp
 801a1ec:	2302      	movs	r3, #2
 801a1ee:	b2ba      	uxth	r2, r7
 801a1f0:	210d      	movs	r1, #13
 801a1f2:	f7f7 ff41 	bl	8012078 <uxr_buffer_submessage_header>
 801a1f6:	f108 0104 	add.w	r1, r8, #4
 801a1fa:	9b03      	ldr	r3, [sp, #12]
 801a1fc:	f1a5 0208 	sub.w	r2, r5, #8
 801a200:	8925      	ldrh	r5, [r4, #8]
 801a202:	440b      	add	r3, r1
 801a204:	eba2 0208 	sub.w	r2, r2, r8
 801a208:	fbb6 f0f5 	udiv	r0, r6, r5
 801a20c:	4619      	mov	r1, r3
 801a20e:	6863      	ldr	r3, [r4, #4]
 801a210:	fb05 6010 	mls	r0, r5, r0, r6
 801a214:	fbb3 f3f5 	udiv	r3, r3, r5
 801a218:	b280      	uxth	r0, r0
 801a21a:	6825      	ldr	r5, [r4, #0]
 801a21c:	fb00 f303 	mul.w	r3, r0, r3
 801a220:	7b20      	ldrb	r0, [r4, #12]
 801a222:	3004      	adds	r0, #4
 801a224:	4438      	add	r0, r7
 801a226:	50e8      	str	r0, [r5, r3]
 801a228:	9d04      	ldr	r5, [sp, #16]
 801a22a:	4628      	mov	r0, r5
 801a22c:	f7f6 fa6e 	bl	801070c <ucdr_init_buffer>
 801a230:	4628      	mov	r0, r5
 801a232:	4622      	mov	r2, r4
 801a234:	493d      	ldr	r1, [pc, #244]	; (801a32c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801a236:	f7f6 fa3d 	bl	80106b4 <ucdr_set_on_full_buffer_callback>
 801a23a:	2001      	movs	r0, #1
 801a23c:	81e6      	strh	r6, [r4, #14]
 801a23e:	b011      	add	sp, #68	; 0x44
 801a240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a244:	2101      	movs	r1, #1
 801a246:	89e0      	ldrh	r0, [r4, #14]
 801a248:	f000 faa6 	bl	801a798 <uxr_seq_num_add>
 801a24c:	4605      	mov	r5, r0
 801a24e:	8921      	ldrh	r1, [r4, #8]
 801a250:	8a60      	ldrh	r0, [r4, #18]
 801a252:	f000 faa1 	bl	801a798 <uxr_seq_num_add>
 801a256:	4601      	mov	r1, r0
 801a258:	4628      	mov	r0, r5
 801a25a:	f000 faa5 	bl	801a7a8 <uxr_seq_num_cmp>
 801a25e:	2800      	cmp	r0, #0
 801a260:	dd44      	ble.n	801a2ec <uxr_prepare_reliable_buffer_to_write+0x298>
 801a262:	2000      	movs	r0, #0
 801a264:	b011      	add	sp, #68	; 0x44
 801a266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a26a:	8921      	ldrh	r1, [r4, #8]
 801a26c:	8a60      	ldrh	r0, [r4, #18]
 801a26e:	9205      	str	r2, [sp, #20]
 801a270:	f000 fa92 	bl	801a798 <uxr_seq_num_add>
 801a274:	4601      	mov	r1, r0
 801a276:	4630      	mov	r0, r6
 801a278:	f000 fa96 	bl	801a7a8 <uxr_seq_num_cmp>
 801a27c:	2800      	cmp	r0, #0
 801a27e:	9a05      	ldr	r2, [sp, #20]
 801a280:	dcef      	bgt.n	801a262 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a282:	8925      	ldrh	r5, [r4, #8]
 801a284:	e9d4 7300 	ldrd	r7, r3, [r4]
 801a288:	fbb6 f4f5 	udiv	r4, r6, r5
 801a28c:	fbb3 f3f5 	udiv	r3, r3, r5
 801a290:	fb05 6414 	mls	r4, r5, r4, r6
 801a294:	b2a4      	uxth	r4, r4
 801a296:	fb04 f303 	mul.w	r3, r4, r3
 801a29a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801a29e:	50fa      	str	r2, [r7, r3]
 801a2a0:	2300      	movs	r3, #0
 801a2a2:	f8cd 8000 	str.w	r8, [sp]
 801a2a6:	f7f6 fa1f 	bl	80106e8 <ucdr_init_buffer_origin_offset>
 801a2aa:	2001      	movs	r0, #1
 801a2ac:	e7da      	b.n	801a264 <uxr_prepare_reliable_buffer_to_write+0x210>
 801a2ae:	3201      	adds	r2, #1
 801a2b0:	9306      	str	r3, [sp, #24]
 801a2b2:	b293      	uxth	r3, r2
 801a2b4:	4553      	cmp	r3, sl
 801a2b6:	d8d4      	bhi.n	801a262 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a2b8:	e739      	b.n	801a12e <uxr_prepare_reliable_buffer_to_write+0xda>
 801a2ba:	4630      	mov	r0, r6
 801a2bc:	2101      	movs	r1, #1
 801a2be:	9307      	str	r3, [sp, #28]
 801a2c0:	f000 fa6a 	bl	801a798 <uxr_seq_num_add>
 801a2c4:	4606      	mov	r6, r0
 801a2c6:	8920      	ldrh	r0, [r4, #8]
 801a2c8:	6862      	ldr	r2, [r4, #4]
 801a2ca:	fbb6 f1f0 	udiv	r1, r6, r0
 801a2ce:	fbb2 f2f0 	udiv	r2, r2, r0
 801a2d2:	fb00 6111 	mls	r1, r0, r1, r6
 801a2d6:	b289      	uxth	r1, r1
 801a2d8:	fb01 f202 	mul.w	r2, r1, r2
 801a2dc:	6821      	ldr	r1, [r4, #0]
 801a2de:	3204      	adds	r2, #4
 801a2e0:	188b      	adds	r3, r1, r2
 801a2e2:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801a2e6:	9303      	str	r3, [sp, #12]
 801a2e8:	9b07      	ldr	r3, [sp, #28]
 801a2ea:	e70c      	b.n	801a106 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801a2ec:	8921      	ldrh	r1, [r4, #8]
 801a2ee:	6863      	ldr	r3, [r4, #4]
 801a2f0:	9804      	ldr	r0, [sp, #16]
 801a2f2:	fbb5 f2f1 	udiv	r2, r5, r1
 801a2f6:	fbb3 f3f1 	udiv	r3, r3, r1
 801a2fa:	fb01 5212 	mls	r2, r1, r2, r5
 801a2fe:	6821      	ldr	r1, [r4, #0]
 801a300:	b292      	uxth	r2, r2
 801a302:	fb02 f303 	mul.w	r3, r2, r3
 801a306:	7b22      	ldrb	r2, [r4, #12]
 801a308:	3304      	adds	r3, #4
 801a30a:	445a      	add	r2, fp
 801a30c:	4419      	add	r1, r3
 801a30e:	f841 2c04 	str.w	r2, [r1, #-4]
 801a312:	7b23      	ldrb	r3, [r4, #12]
 801a314:	9300      	str	r3, [sp, #0]
 801a316:	2300      	movs	r3, #0
 801a318:	f7f6 f9e6 	bl	80106e8 <ucdr_init_buffer_origin_offset>
 801a31c:	2001      	movs	r0, #1
 801a31e:	81e5      	strh	r5, [r4, #14]
 801a320:	e7a0      	b.n	801a264 <uxr_prepare_reliable_buffer_to_write+0x210>
 801a322:	4682      	mov	sl, r0
 801a324:	e6cb      	b.n	801a0be <uxr_prepare_reliable_buffer_to_write+0x6a>
 801a326:	f10d 0b20 	add.w	fp, sp, #32
 801a32a:	e747      	b.n	801a1bc <uxr_prepare_reliable_buffer_to_write+0x168>
 801a32c:	08019f29 	.word	0x08019f29

0801a330 <uxr_prepare_next_reliable_buffer_to_send>:
 801a330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a332:	4604      	mov	r4, r0
 801a334:	461d      	mov	r5, r3
 801a336:	460f      	mov	r7, r1
 801a338:	8a00      	ldrh	r0, [r0, #16]
 801a33a:	2101      	movs	r1, #1
 801a33c:	4616      	mov	r6, r2
 801a33e:	f000 fa2b 	bl	801a798 <uxr_seq_num_add>
 801a342:	8028      	strh	r0, [r5, #0]
 801a344:	8922      	ldrh	r2, [r4, #8]
 801a346:	6863      	ldr	r3, [r4, #4]
 801a348:	fbb0 f1f2 	udiv	r1, r0, r2
 801a34c:	fbb3 f3f2 	udiv	r3, r3, r2
 801a350:	fb02 0c11 	mls	ip, r2, r1, r0
 801a354:	89e1      	ldrh	r1, [r4, #14]
 801a356:	fa1f fc8c 	uxth.w	ip, ip
 801a35a:	fb0c fc03 	mul.w	ip, ip, r3
 801a35e:	6823      	ldr	r3, [r4, #0]
 801a360:	f10c 0c04 	add.w	ip, ip, #4
 801a364:	4463      	add	r3, ip
 801a366:	603b      	str	r3, [r7, #0]
 801a368:	6823      	ldr	r3, [r4, #0]
 801a36a:	449c      	add	ip, r3
 801a36c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801a370:	6033      	str	r3, [r6, #0]
 801a372:	f000 fa19 	bl	801a7a8 <uxr_seq_num_cmp>
 801a376:	2800      	cmp	r0, #0
 801a378:	dd01      	ble.n	801a37e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801a37a:	2000      	movs	r0, #0
 801a37c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a37e:	7b23      	ldrb	r3, [r4, #12]
 801a380:	6832      	ldr	r2, [r6, #0]
 801a382:	429a      	cmp	r2, r3
 801a384:	d9f9      	bls.n	801a37a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a386:	8a61      	ldrh	r1, [r4, #18]
 801a388:	8a20      	ldrh	r0, [r4, #16]
 801a38a:	f000 fa09 	bl	801a7a0 <uxr_seq_num_sub>
 801a38e:	8923      	ldrh	r3, [r4, #8]
 801a390:	4283      	cmp	r3, r0
 801a392:	d0f2      	beq.n	801a37a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a394:	8828      	ldrh	r0, [r5, #0]
 801a396:	89e3      	ldrh	r3, [r4, #14]
 801a398:	8220      	strh	r0, [r4, #16]
 801a39a:	4298      	cmp	r0, r3
 801a39c:	d001      	beq.n	801a3a2 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801a39e:	2001      	movs	r0, #1
 801a3a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3a2:	2101      	movs	r1, #1
 801a3a4:	f000 f9f8 	bl	801a798 <uxr_seq_num_add>
 801a3a8:	4603      	mov	r3, r0
 801a3aa:	2001      	movs	r0, #1
 801a3ac:	81e3      	strh	r3, [r4, #14]
 801a3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a3b0 <uxr_update_output_stream_heartbeat_timestamp>:
 801a3b0:	b570      	push	{r4, r5, r6, lr}
 801a3b2:	8a01      	ldrh	r1, [r0, #16]
 801a3b4:	4604      	mov	r4, r0
 801a3b6:	8a40      	ldrh	r0, [r0, #18]
 801a3b8:	4615      	mov	r5, r2
 801a3ba:	461e      	mov	r6, r3
 801a3bc:	f000 f9f4 	bl	801a7a8 <uxr_seq_num_cmp>
 801a3c0:	2800      	cmp	r0, #0
 801a3c2:	db07      	blt.n	801a3d4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801a3c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a3c8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801a3cc:	2000      	movs	r0, #0
 801a3ce:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801a3d2:	bd70      	pop	{r4, r5, r6, pc}
 801a3d4:	f894 0020 	ldrb.w	r0, [r4, #32]
 801a3d8:	b940      	cbnz	r0, 801a3ec <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801a3da:	2301      	movs	r3, #1
 801a3dc:	f884 3020 	strb.w	r3, [r4, #32]
 801a3e0:	3564      	adds	r5, #100	; 0x64
 801a3e2:	f146 0600 	adc.w	r6, r6, #0
 801a3e6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801a3ea:	bd70      	pop	{r4, r5, r6, pc}
 801a3ec:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801a3f0:	4295      	cmp	r5, r2
 801a3f2:	eb76 0303 	sbcs.w	r3, r6, r3
 801a3f6:	db04      	blt.n	801a402 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801a3f8:	1c43      	adds	r3, r0, #1
 801a3fa:	2001      	movs	r0, #1
 801a3fc:	f884 3020 	strb.w	r3, [r4, #32]
 801a400:	e7ee      	b.n	801a3e0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801a402:	2000      	movs	r0, #0
 801a404:	e7ec      	b.n	801a3e0 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801a406:	bf00      	nop

0801a408 <uxr_begin_output_nack_buffer_it>:
 801a408:	8a40      	ldrh	r0, [r0, #18]
 801a40a:	4770      	bx	lr

0801a40c <uxr_next_reliable_nack_buffer_to_send>:
 801a40c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a410:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 801a414:	b197      	cbz	r7, 801a43c <uxr_next_reliable_nack_buffer_to_send+0x30>
 801a416:	4680      	mov	r8, r0
 801a418:	460d      	mov	r5, r1
 801a41a:	4616      	mov	r6, r2
 801a41c:	461c      	mov	r4, r3
 801a41e:	8818      	ldrh	r0, [r3, #0]
 801a420:	2101      	movs	r1, #1
 801a422:	f000 f9b9 	bl	801a798 <uxr_seq_num_add>
 801a426:	8020      	strh	r0, [r4, #0]
 801a428:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801a42c:	f000 f9bc 	bl	801a7a8 <uxr_seq_num_cmp>
 801a430:	2800      	cmp	r0, #0
 801a432:	dd06      	ble.n	801a442 <uxr_next_reliable_nack_buffer_to_send+0x36>
 801a434:	2300      	movs	r3, #0
 801a436:	461f      	mov	r7, r3
 801a438:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 801a43c:	4638      	mov	r0, r7
 801a43e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a442:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801a446:	8820      	ldrh	r0, [r4, #0]
 801a448:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a44c:	fbb0 f3f2 	udiv	r3, r0, r2
 801a450:	fbb1 fcf2 	udiv	ip, r1, r2
 801a454:	fb02 0313 	mls	r3, r2, r3, r0
 801a458:	b29b      	uxth	r3, r3
 801a45a:	fb03 fc0c 	mul.w	ip, r3, ip
 801a45e:	f8d8 3000 	ldr.w	r3, [r8]
 801a462:	f10c 0c04 	add.w	ip, ip, #4
 801a466:	4463      	add	r3, ip
 801a468:	602b      	str	r3, [r5, #0]
 801a46a:	f8d8 3000 	ldr.w	r3, [r8]
 801a46e:	4463      	add	r3, ip
 801a470:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801a474:	6033      	str	r3, [r6, #0]
 801a476:	f898 200c 	ldrb.w	r2, [r8, #12]
 801a47a:	429a      	cmp	r2, r3
 801a47c:	d0d0      	beq.n	801a420 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801a47e:	e7dd      	b.n	801a43c <uxr_next_reliable_nack_buffer_to_send+0x30>

0801a480 <uxr_process_acknack>:
 801a480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a482:	4604      	mov	r4, r0
 801a484:	460e      	mov	r6, r1
 801a486:	4610      	mov	r0, r2
 801a488:	2101      	movs	r1, #1
 801a48a:	f000 f989 	bl	801a7a0 <uxr_seq_num_sub>
 801a48e:	8a61      	ldrh	r1, [r4, #18]
 801a490:	f000 f986 	bl	801a7a0 <uxr_seq_num_sub>
 801a494:	b1c8      	cbz	r0, 801a4ca <uxr_process_acknack+0x4a>
 801a496:	4605      	mov	r5, r0
 801a498:	2700      	movs	r7, #0
 801a49a:	2101      	movs	r1, #1
 801a49c:	8a60      	ldrh	r0, [r4, #18]
 801a49e:	f000 f97b 	bl	801a798 <uxr_seq_num_add>
 801a4a2:	8923      	ldrh	r3, [r4, #8]
 801a4a4:	6862      	ldr	r2, [r4, #4]
 801a4a6:	3701      	adds	r7, #1
 801a4a8:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801a4ac:	6821      	ldr	r1, [r4, #0]
 801a4ae:	42bd      	cmp	r5, r7
 801a4b0:	8260      	strh	r0, [r4, #18]
 801a4b2:	fbb0 fef3 	udiv	lr, r0, r3
 801a4b6:	fbb2 f2f3 	udiv	r2, r2, r3
 801a4ba:	fb03 031e 	mls	r3, r3, lr, r0
 801a4be:	b29b      	uxth	r3, r3
 801a4c0:	fb02 f303 	mul.w	r3, r2, r3
 801a4c4:	f841 c003 	str.w	ip, [r1, r3]
 801a4c8:	d1e7      	bne.n	801a49a <uxr_process_acknack+0x1a>
 801a4ca:	3e00      	subs	r6, #0
 801a4cc:	f04f 0300 	mov.w	r3, #0
 801a4d0:	bf18      	it	ne
 801a4d2:	2601      	movne	r6, #1
 801a4d4:	f884 3020 	strb.w	r3, [r4, #32]
 801a4d8:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801a4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a4de:	bf00      	nop

0801a4e0 <uxr_is_output_up_to_date>:
 801a4e0:	8a01      	ldrh	r1, [r0, #16]
 801a4e2:	8a40      	ldrh	r0, [r0, #18]
 801a4e4:	b508      	push	{r3, lr}
 801a4e6:	f000 f95f 	bl	801a7a8 <uxr_seq_num_cmp>
 801a4ea:	fab0 f080 	clz	r0, r0
 801a4ee:	0940      	lsrs	r0, r0, #5
 801a4f0:	bd08      	pop	{r3, pc}
 801a4f2:	bf00      	nop

0801a4f4 <get_available_free_slots>:
 801a4f4:	8901      	ldrh	r1, [r0, #8]
 801a4f6:	b1e1      	cbz	r1, 801a532 <get_available_free_slots+0x3e>
 801a4f8:	6843      	ldr	r3, [r0, #4]
 801a4fa:	f04f 0c00 	mov.w	ip, #0
 801a4fe:	b530      	push	{r4, r5, lr}
 801a500:	fbb3 fef1 	udiv	lr, r3, r1
 801a504:	6805      	ldr	r5, [r0, #0]
 801a506:	4662      	mov	r2, ip
 801a508:	7b04      	ldrb	r4, [r0, #12]
 801a50a:	4660      	mov	r0, ip
 801a50c:	f10c 0c01 	add.w	ip, ip, #1
 801a510:	fbb2 f3f1 	udiv	r3, r2, r1
 801a514:	fb01 2313 	mls	r3, r1, r3, r2
 801a518:	fa1f f28c 	uxth.w	r2, ip
 801a51c:	b29b      	uxth	r3, r3
 801a51e:	fb0e f303 	mul.w	r3, lr, r3
 801a522:	58eb      	ldr	r3, [r5, r3]
 801a524:	429c      	cmp	r4, r3
 801a526:	d101      	bne.n	801a52c <get_available_free_slots+0x38>
 801a528:	3001      	adds	r0, #1
 801a52a:	b280      	uxth	r0, r0
 801a52c:	428a      	cmp	r2, r1
 801a52e:	d3ed      	bcc.n	801a50c <get_available_free_slots+0x18>
 801a530:	bd30      	pop	{r4, r5, pc}
 801a532:	4608      	mov	r0, r1
 801a534:	4770      	bx	lr
 801a536:	bf00      	nop

0801a538 <uxr_buffer_request_data>:
 801a538:	b530      	push	{r4, r5, lr}
 801a53a:	b095      	sub	sp, #84	; 0x54
 801a53c:	4604      	mov	r4, r0
 801a53e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801a540:	9303      	str	r3, [sp, #12]
 801a542:	2d00      	cmp	r5, #0
 801a544:	f88d 301c 	strb.w	r3, [sp, #28]
 801a548:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801a54c:	f04f 0200 	mov.w	r2, #0
 801a550:	bf14      	ite	ne
 801a552:	2101      	movne	r1, #1
 801a554:	4611      	moveq	r1, r2
 801a556:	f88d 201d 	strb.w	r2, [sp, #29]
 801a55a:	f88d 201e 	strb.w	r2, [sp, #30]
 801a55e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801a562:	d021      	beq.n	801a5a8 <uxr_buffer_request_data+0x70>
 801a564:	686b      	ldr	r3, [r5, #4]
 801a566:	2210      	movs	r2, #16
 801a568:	6829      	ldr	r1, [r5, #0]
 801a56a:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 801a56e:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 801a572:	2308      	movs	r3, #8
 801a574:	2100      	movs	r1, #0
 801a576:	4620      	mov	r0, r4
 801a578:	e9cd 3100 	strd	r3, r1, [sp]
 801a57c:	ab0c      	add	r3, sp, #48	; 0x30
 801a57e:	9905      	ldr	r1, [sp, #20]
 801a580:	f7f7 face 	bl	8011b20 <uxr_prepare_stream_to_write_submessage>
 801a584:	b918      	cbnz	r0, 801a58e <uxr_buffer_request_data+0x56>
 801a586:	4604      	mov	r4, r0
 801a588:	4620      	mov	r0, r4
 801a58a:	b015      	add	sp, #84	; 0x54
 801a58c:	bd30      	pop	{r4, r5, pc}
 801a58e:	9904      	ldr	r1, [sp, #16]
 801a590:	aa06      	add	r2, sp, #24
 801a592:	4620      	mov	r0, r4
 801a594:	f7f7 fc00 	bl	8011d98 <uxr_init_base_object_request>
 801a598:	4604      	mov	r4, r0
 801a59a:	a906      	add	r1, sp, #24
 801a59c:	a80c      	add	r0, sp, #48	; 0x30
 801a59e:	f7f8 ff33 	bl	8013408 <uxr_serialize_READ_DATA_Payload>
 801a5a2:	4620      	mov	r0, r4
 801a5a4:	b015      	add	sp, #84	; 0x54
 801a5a6:	bd30      	pop	{r4, r5, pc}
 801a5a8:	2208      	movs	r2, #8
 801a5aa:	e7e2      	b.n	801a572 <uxr_buffer_request_data+0x3a>

0801a5ac <uxr_buffer_cancel_data>:
 801a5ac:	b510      	push	{r4, lr}
 801a5ae:	2300      	movs	r3, #0
 801a5b0:	b094      	sub	sp, #80	; 0x50
 801a5b2:	4604      	mov	r4, r0
 801a5b4:	9205      	str	r2, [sp, #20]
 801a5b6:	9301      	str	r3, [sp, #4]
 801a5b8:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a5bc:	f88d 301e 	strb.w	r3, [sp, #30]
 801a5c0:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 801a5c4:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 801a5c8:	2308      	movs	r3, #8
 801a5ca:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801a5ce:	2201      	movs	r2, #1
 801a5d0:	9300      	str	r3, [sp, #0]
 801a5d2:	ab0c      	add	r3, sp, #48	; 0x30
 801a5d4:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 801a5d8:	2210      	movs	r2, #16
 801a5da:	f7f7 faa1 	bl	8011b20 <uxr_prepare_stream_to_write_submessage>
 801a5de:	b918      	cbnz	r0, 801a5e8 <uxr_buffer_cancel_data+0x3c>
 801a5e0:	4604      	mov	r4, r0
 801a5e2:	4620      	mov	r0, r4
 801a5e4:	b014      	add	sp, #80	; 0x50
 801a5e6:	bd10      	pop	{r4, pc}
 801a5e8:	9905      	ldr	r1, [sp, #20]
 801a5ea:	aa06      	add	r2, sp, #24
 801a5ec:	4620      	mov	r0, r4
 801a5ee:	f7f7 fbd3 	bl	8011d98 <uxr_init_base_object_request>
 801a5f2:	4604      	mov	r4, r0
 801a5f4:	a906      	add	r1, sp, #24
 801a5f6:	a80c      	add	r0, sp, #48	; 0x30
 801a5f8:	f7f8 ff06 	bl	8013408 <uxr_serialize_READ_DATA_Payload>
 801a5fc:	4620      	mov	r0, r4
 801a5fe:	b014      	add	sp, #80	; 0x50
 801a600:	bd10      	pop	{r4, pc}
 801a602:	bf00      	nop

0801a604 <read_submessage_format>:
 801a604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a608:	b095      	sub	sp, #84	; 0x54
 801a60a:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 801a60e:	b113      	cbz	r3, 801a616 <read_submessage_format+0x12>
 801a610:	b015      	add	sp, #84	; 0x54
 801a612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a616:	4606      	mov	r6, r0
 801a618:	981c      	ldr	r0, [sp, #112]	; 0x70
 801a61a:	460c      	mov	r4, r1
 801a61c:	4615      	mov	r5, r2
 801a61e:	9004      	str	r0, [sp, #16]
 801a620:	4699      	mov	r9, r3
 801a622:	981d      	ldr	r0, [sp, #116]	; 0x74
 801a624:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 801a628:	9005      	str	r0, [sp, #20]
 801a62a:	a80c      	add	r0, sp, #48	; 0x30
 801a62c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801a630:	1a52      	subs	r2, r2, r1
 801a632:	f7f6 f86b 	bl	801070c <ucdr_init_buffer>
 801a636:	a80c      	add	r0, sp, #48	; 0x30
 801a638:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801a63c:	f7f6 f83a 	bl	80106b4 <ucdr_set_on_full_buffer_callback>
 801a640:	69e2      	ldr	r2, [r4, #28]
 801a642:	b19a      	cbz	r2, 801a66c <read_submessage_format+0x68>
 801a644:	f1b8 0f07 	cmp.w	r8, #7
 801a648:	f882 9014 	strb.w	r9, [r2, #20]
 801a64c:	d040      	beq.n	801a6d0 <read_submessage_format+0xcc>
 801a64e:	f1b8 0f08 	cmp.w	r8, #8
 801a652:	d02e      	beq.n	801a6b2 <read_submessage_format+0xae>
 801a654:	f1b8 0f06 	cmp.w	r8, #6
 801a658:	d011      	beq.n	801a67e <read_submessage_format+0x7a>
 801a65a:	2301      	movs	r3, #1
 801a65c:	7513      	strb	r3, [r2, #20]
 801a65e:	4629      	mov	r1, r5
 801a660:	4620      	mov	r0, r4
 801a662:	f7f6 f8a7 	bl	80107b4 <ucdr_advance_buffer>
 801a666:	b015      	add	sp, #84	; 0x54
 801a668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a66c:	f1b8 0f07 	cmp.w	r8, #7
 801a670:	d02e      	beq.n	801a6d0 <read_submessage_format+0xcc>
 801a672:	f1b8 0f08 	cmp.w	r8, #8
 801a676:	d01c      	beq.n	801a6b2 <read_submessage_format+0xae>
 801a678:	f1b8 0f06 	cmp.w	r8, #6
 801a67c:	d1ef      	bne.n	801a65e <read_submessage_format+0x5a>
 801a67e:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 801a682:	f1b8 0f00 	cmp.w	r8, #0
 801a686:	d011      	beq.n	801a6ac <read_submessage_format+0xa8>
 801a688:	ab0c      	add	r3, sp, #48	; 0x30
 801a68a:	9501      	str	r5, [sp, #4]
 801a68c:	463a      	mov	r2, r7
 801a68e:	4630      	mov	r0, r6
 801a690:	9300      	str	r3, [sp, #0]
 801a692:	2306      	movs	r3, #6
 801a694:	f88d 3016 	strb.w	r3, [sp, #22]
 801a698:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 801a69c:	9302      	str	r3, [sp, #8]
 801a69e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801a6a2:	47c0      	blx	r8
 801a6a4:	2301      	movs	r3, #1
 801a6a6:	69e2      	ldr	r2, [r4, #28]
 801a6a8:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801a6ac:	2a00      	cmp	r2, #0
 801a6ae:	d1d4      	bne.n	801a65a <read_submessage_format+0x56>
 801a6b0:	e7d5      	b.n	801a65e <read_submessage_format+0x5a>
 801a6b2:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d0f8      	beq.n	801a6ac <read_submessage_format+0xa8>
 801a6ba:	a80c      	add	r0, sp, #48	; 0x30
 801a6bc:	a906      	add	r1, sp, #24
 801a6be:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801a6c2:	f7f8 ff6d 	bl	80135a0 <uxr_deserialize_SampleIdentity>
 801a6c6:	b9a0      	cbnz	r0, 801a6f2 <read_submessage_format+0xee>
 801a6c8:	69e2      	ldr	r2, [r4, #28]
 801a6ca:	2a00      	cmp	r2, #0
 801a6cc:	d1c5      	bne.n	801a65a <read_submessage_format+0x56>
 801a6ce:	e7c6      	b.n	801a65e <read_submessage_format+0x5a>
 801a6d0:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 801a6d4:	b13b      	cbz	r3, 801a6e6 <read_submessage_format+0xe2>
 801a6d6:	a906      	add	r1, sp, #24
 801a6d8:	a80c      	add	r0, sp, #48	; 0x30
 801a6da:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801a6de:	f7f8 fc33 	bl	8012f48 <uxr_deserialize_BaseObjectRequest>
 801a6e2:	bb60      	cbnz	r0, 801a73e <read_submessage_format+0x13a>
 801a6e4:	69e2      	ldr	r2, [r4, #28]
 801a6e6:	68a3      	ldr	r3, [r4, #8]
 801a6e8:	442b      	add	r3, r5
 801a6ea:	60a3      	str	r3, [r4, #8]
 801a6ec:	2a00      	cmp	r2, #0
 801a6ee:	d1b4      	bne.n	801a65a <read_submessage_format+0x56>
 801a6f0:	e7b5      	b.n	801a65e <read_submessage_format+0x5a>
 801a6f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a6f4:	a80c      	add	r0, sp, #48	; 0x30
 801a6f6:	eba8 0803 	sub.w	r8, r8, r3
 801a6fa:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801a6fe:	44a8      	add	r8, r5
 801a700:	1a52      	subs	r2, r2, r1
 801a702:	f7f6 f803 	bl	801070c <ucdr_init_buffer>
 801a706:	a80c      	add	r0, sp, #48	; 0x30
 801a708:	fa1f f888 	uxth.w	r8, r8
 801a70c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801a710:	f7f5 ffd0 	bl	80106b4 <ucdr_set_on_full_buffer_callback>
 801a714:	ab0c      	add	r3, sp, #48	; 0x30
 801a716:	2108      	movs	r1, #8
 801a718:	f8cd 8004 	str.w	r8, [sp, #4]
 801a71c:	9300      	str	r3, [sp, #0]
 801a71e:	463a      	mov	r2, r7
 801a720:	f88d 1016 	strb.w	r1, [sp, #22]
 801a724:	ab06      	add	r3, sp, #24
 801a726:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 801a72a:	4630      	mov	r0, r6
 801a72c:	9102      	str	r1, [sp, #8]
 801a72e:	9905      	ldr	r1, [sp, #20]
 801a730:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 801a734:	47b8      	blx	r7
 801a736:	2301      	movs	r3, #1
 801a738:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801a73c:	e7c4      	b.n	801a6c8 <read_submessage_format+0xc4>
 801a73e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801a742:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a744:	a80c      	add	r0, sp, #48	; 0x30
 801a746:	1a52      	subs	r2, r2, r1
 801a748:	eba8 0803 	sub.w	r8, r8, r3
 801a74c:	f7f5 ffde 	bl	801070c <ucdr_init_buffer>
 801a750:	a80c      	add	r0, sp, #48	; 0x30
 801a752:	44a8      	add	r8, r5
 801a754:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801a758:	f7f5 ffac 	bl	80106b4 <ucdr_set_on_full_buffer_callback>
 801a75c:	ab0c      	add	r3, sp, #48	; 0x30
 801a75e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801a762:	fa1f f888 	uxth.w	r8, r8
 801a766:	9300      	str	r3, [sp, #0]
 801a768:	463a      	mov	r2, r7
 801a76a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801a76e:	4630      	mov	r0, r6
 801a770:	f8cd 8004 	str.w	r8, [sp, #4]
 801a774:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801a778:	2107      	movs	r1, #7
 801a77a:	f88d 1016 	strb.w	r1, [sp, #22]
 801a77e:	b29b      	uxth	r3, r3
 801a780:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 801a784:	9102      	str	r1, [sp, #8]
 801a786:	9905      	ldr	r1, [sp, #20]
 801a788:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 801a78c:	47b8      	blx	r7
 801a78e:	2301      	movs	r3, #1
 801a790:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801a794:	e7a6      	b.n	801a6e4 <read_submessage_format+0xe0>
 801a796:	bf00      	nop

0801a798 <uxr_seq_num_add>:
 801a798:	4408      	add	r0, r1
 801a79a:	b280      	uxth	r0, r0
 801a79c:	4770      	bx	lr
 801a79e:	bf00      	nop

0801a7a0 <uxr_seq_num_sub>:
 801a7a0:	1a40      	subs	r0, r0, r1
 801a7a2:	b280      	uxth	r0, r0
 801a7a4:	4770      	bx	lr
 801a7a6:	bf00      	nop

0801a7a8 <uxr_seq_num_cmp>:
 801a7a8:	4288      	cmp	r0, r1
 801a7aa:	d011      	beq.n	801a7d0 <uxr_seq_num_cmp+0x28>
 801a7ac:	d309      	bcc.n	801a7c2 <uxr_seq_num_cmp+0x1a>
 801a7ae:	4288      	cmp	r0, r1
 801a7b0:	d910      	bls.n	801a7d4 <uxr_seq_num_cmp+0x2c>
 801a7b2:	1a40      	subs	r0, r0, r1
 801a7b4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801a7b8:	bfd4      	ite	le
 801a7ba:	2001      	movle	r0, #1
 801a7bc:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 801a7c0:	4770      	bx	lr
 801a7c2:	1a0b      	subs	r3, r1, r0
 801a7c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a7c8:	daf1      	bge.n	801a7ae <uxr_seq_num_cmp+0x6>
 801a7ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a7ce:	4770      	bx	lr
 801a7d0:	2000      	movs	r0, #0
 801a7d2:	4770      	bx	lr
 801a7d4:	2001      	movs	r0, #1
 801a7d6:	4770      	bx	lr

0801a7d8 <uxr_init_framing_io>:
 801a7d8:	2300      	movs	r3, #0
 801a7da:	7041      	strb	r1, [r0, #1]
 801a7dc:	7003      	strb	r3, [r0, #0]
 801a7de:	8583      	strh	r3, [r0, #44]	; 0x2c
 801a7e0:	4770      	bx	lr
 801a7e2:	bf00      	nop

0801a7e4 <uxr_write_framed_msg>:
 801a7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7e8:	4617      	mov	r7, r2
 801a7ea:	7842      	ldrb	r2, [r0, #1]
 801a7ec:	460e      	mov	r6, r1
 801a7ee:	b083      	sub	sp, #12
 801a7f0:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 801a7f4:	469b      	mov	fp, r3
 801a7f6:	237e      	movs	r3, #126	; 0x7e
 801a7f8:	4604      	mov	r4, r0
 801a7fa:	2901      	cmp	r1, #1
 801a7fc:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 801a800:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801a804:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801a808:	f240 8115 	bls.w	801aa36 <uxr_write_framed_msg+0x252>
 801a80c:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801a810:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 801a814:	2202      	movs	r2, #2
 801a816:	2901      	cmp	r1, #1
 801a818:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801a81c:	d952      	bls.n	801a8c4 <uxr_write_framed_msg+0xe0>
 801a81e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a820:	2103      	movs	r1, #3
 801a822:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 801a826:	b2dd      	uxtb	r5, r3
 801a828:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801a82c:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801a830:	2a01      	cmp	r2, #1
 801a832:	d95c      	bls.n	801a8ee <uxr_write_framed_msg+0x10a>
 801a834:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a836:	1862      	adds	r2, r4, r1
 801a838:	3101      	adds	r1, #1
 801a83a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801a83e:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 801a842:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801a846:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801a84a:	2a01      	cmp	r2, #1
 801a84c:	d961      	bls.n	801a912 <uxr_write_framed_msg+0x12e>
 801a84e:	1c4a      	adds	r2, r1, #1
 801a850:	4421      	add	r1, r4
 801a852:	b2d2      	uxtb	r2, r2
 801a854:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 801a858:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	d06a      	beq.n	801a936 <uxr_write_framed_msg+0x152>
 801a860:	f04f 0800 	mov.w	r8, #0
 801a864:	46c1      	mov	r9, r8
 801a866:	e016      	b.n	801a896 <uxr_write_framed_msg+0xb2>
 801a868:	2a29      	cmp	r2, #41	; 0x29
 801a86a:	d868      	bhi.n	801a93e <uxr_write_framed_msg+0x15a>
 801a86c:	18a0      	adds	r0, r4, r2
 801a86e:	3201      	adds	r2, #1
 801a870:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801a874:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801a878:	ea88 0101 	eor.w	r1, r8, r1
 801a87c:	4b7d      	ldr	r3, [pc, #500]	; (801aa74 <uxr_write_framed_msg+0x290>)
 801a87e:	f109 0901 	add.w	r9, r9, #1
 801a882:	b2c9      	uxtb	r1, r1
 801a884:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 801a888:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 801a88c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a88e:	454b      	cmp	r3, r9
 801a890:	d969      	bls.n	801a966 <uxr_write_framed_msg+0x182>
 801a892:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801a896:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801a89a:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 801a89e:	2801      	cmp	r0, #1
 801a8a0:	d8e2      	bhi.n	801a868 <uxr_write_framed_msg+0x84>
 801a8a2:	1c50      	adds	r0, r2, #1
 801a8a4:	b2c0      	uxtb	r0, r0
 801a8a6:	2829      	cmp	r0, #41	; 0x29
 801a8a8:	d849      	bhi.n	801a93e <uxr_write_framed_msg+0x15a>
 801a8aa:	18a0      	adds	r0, r4, r2
 801a8ac:	f04f 037d 	mov.w	r3, #125	; 0x7d
 801a8b0:	3202      	adds	r2, #2
 801a8b2:	f081 0520 	eor.w	r5, r1, #32
 801a8b6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801a8ba:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 801a8be:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801a8c2:	e7d9      	b.n	801a878 <uxr_write_framed_msg+0x94>
 801a8c4:	2104      	movs	r1, #4
 801a8c6:	f04f 0c03 	mov.w	ip, #3
 801a8ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a8cc:	4422      	add	r2, r4
 801a8ce:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 801a8d2:	44a4      	add	ip, r4
 801a8d4:	b2dd      	uxtb	r5, r3
 801a8d6:	f080 0020 	eor.w	r0, r0, #32
 801a8da:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 801a8de:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801a8e2:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 801a8e6:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801a8ea:	2a01      	cmp	r2, #1
 801a8ec:	d8a2      	bhi.n	801a834 <uxr_write_framed_msg+0x50>
 801a8ee:	1862      	adds	r2, r4, r1
 801a8f0:	207d      	movs	r0, #125	; 0x7d
 801a8f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a8f4:	f085 0520 	eor.w	r5, r5, #32
 801a8f8:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 801a8fc:	3102      	adds	r1, #2
 801a8fe:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801a902:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 801a906:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801a90a:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801a90e:	2a01      	cmp	r2, #1
 801a910:	d89d      	bhi.n	801a84e <uxr_write_framed_msg+0x6a>
 801a912:	1c4d      	adds	r5, r1, #1
 801a914:	1c8a      	adds	r2, r1, #2
 801a916:	f080 0020 	eor.w	r0, r0, #32
 801a91a:	4421      	add	r1, r4
 801a91c:	fa54 f585 	uxtab	r5, r4, r5
 801a920:	b2d2      	uxtb	r2, r2
 801a922:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 801a926:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 801a92a:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 801a92e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801a932:	2b00      	cmp	r3, #0
 801a934:	d194      	bne.n	801a860 <uxr_write_framed_msg+0x7c>
 801a936:	4619      	mov	r1, r3
 801a938:	f8ad 3004 	strh.w	r3, [sp, #4]
 801a93c:	e019      	b.n	801a972 <uxr_write_framed_msg+0x18e>
 801a93e:	2500      	movs	r5, #0
 801a940:	e000      	b.n	801a944 <uxr_write_framed_msg+0x160>
 801a942:	b160      	cbz	r0, 801a95e <uxr_write_framed_msg+0x17a>
 801a944:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801a948:	1b52      	subs	r2, r2, r5
 801a94a:	4653      	mov	r3, sl
 801a94c:	4638      	mov	r0, r7
 801a94e:	4421      	add	r1, r4
 801a950:	47b0      	blx	r6
 801a952:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801a956:	4405      	add	r5, r0
 801a958:	4295      	cmp	r5, r2
 801a95a:	d3f2      	bcc.n	801a942 <uxr_write_framed_msg+0x15e>
 801a95c:	d066      	beq.n	801aa2c <uxr_write_framed_msg+0x248>
 801a95e:	2000      	movs	r0, #0
 801a960:	b003      	add	sp, #12
 801a962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a966:	fa5f f188 	uxtb.w	r1, r8
 801a96a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801a96e:	f8ad 8004 	strh.w	r8, [sp, #4]
 801a972:	f04f 0900 	mov.w	r9, #0
 801a976:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 801a97a:	46c8      	mov	r8, r9
 801a97c:	e013      	b.n	801a9a6 <uxr_write_framed_msg+0x1c2>
 801a97e:	2a29      	cmp	r2, #41	; 0x29
 801a980:	d824      	bhi.n	801a9cc <uxr_write_framed_msg+0x1e8>
 801a982:	18a3      	adds	r3, r4, r2
 801a984:	3201      	adds	r2, #1
 801a986:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 801a98a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801a98e:	f109 0901 	add.w	r9, r9, #1
 801a992:	f1b9 0f02 	cmp.w	r9, #2
 801a996:	d02d      	beq.n	801a9f4 <uxr_write_framed_msg+0x210>
 801a998:	f109 0308 	add.w	r3, r9, #8
 801a99c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801a9a0:	446b      	add	r3, sp
 801a9a2:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 801a9a6:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 801a9aa:	2b01      	cmp	r3, #1
 801a9ac:	d8e7      	bhi.n	801a97e <uxr_write_framed_msg+0x19a>
 801a9ae:	1c53      	adds	r3, r2, #1
 801a9b0:	b2db      	uxtb	r3, r3
 801a9b2:	2b29      	cmp	r3, #41	; 0x29
 801a9b4:	d80a      	bhi.n	801a9cc <uxr_write_framed_msg+0x1e8>
 801a9b6:	18a3      	adds	r3, r4, r2
 801a9b8:	f081 0120 	eor.w	r1, r1, #32
 801a9bc:	3202      	adds	r2, #2
 801a9be:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 801a9c2:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 801a9c6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801a9ca:	e7e0      	b.n	801a98e <uxr_write_framed_msg+0x1aa>
 801a9cc:	2500      	movs	r5, #0
 801a9ce:	e001      	b.n	801a9d4 <uxr_write_framed_msg+0x1f0>
 801a9d0:	2800      	cmp	r0, #0
 801a9d2:	d0c4      	beq.n	801a95e <uxr_write_framed_msg+0x17a>
 801a9d4:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801a9d8:	1b52      	subs	r2, r2, r5
 801a9da:	4653      	mov	r3, sl
 801a9dc:	4638      	mov	r0, r7
 801a9de:	4421      	add	r1, r4
 801a9e0:	47b0      	blx	r6
 801a9e2:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801a9e6:	4405      	add	r5, r0
 801a9e8:	4295      	cmp	r5, r2
 801a9ea:	d3f1      	bcc.n	801a9d0 <uxr_write_framed_msg+0x1ec>
 801a9ec:	d1b7      	bne.n	801a95e <uxr_write_framed_msg+0x17a>
 801a9ee:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 801a9f2:	e7d1      	b.n	801a998 <uxr_write_framed_msg+0x1b4>
 801a9f4:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801a9f8:	b19a      	cbz	r2, 801aa22 <uxr_write_framed_msg+0x23e>
 801a9fa:	2500      	movs	r5, #0
 801a9fc:	e001      	b.n	801aa02 <uxr_write_framed_msg+0x21e>
 801a9fe:	2800      	cmp	r0, #0
 801aa00:	d0ad      	beq.n	801a95e <uxr_write_framed_msg+0x17a>
 801aa02:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801aa06:	1b52      	subs	r2, r2, r5
 801aa08:	4653      	mov	r3, sl
 801aa0a:	4638      	mov	r0, r7
 801aa0c:	4421      	add	r1, r4
 801aa0e:	47b0      	blx	r6
 801aa10:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801aa14:	4405      	add	r5, r0
 801aa16:	4295      	cmp	r5, r2
 801aa18:	d3f1      	bcc.n	801a9fe <uxr_write_framed_msg+0x21a>
 801aa1a:	d1a0      	bne.n	801a95e <uxr_write_framed_msg+0x17a>
 801aa1c:	2300      	movs	r3, #0
 801aa1e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801aa22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aa24:	b298      	uxth	r0, r3
 801aa26:	b003      	add	sp, #12
 801aa28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa2c:	f04f 0300 	mov.w	r3, #0
 801aa30:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801aa34:	e72a      	b.n	801a88c <uxr_write_framed_msg+0xa8>
 801aa36:	217d      	movs	r1, #125	; 0x7d
 801aa38:	f082 0220 	eor.w	r2, r2, #32
 801aa3c:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 801aa40:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801aa44:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 801aa48:	2203      	movs	r2, #3
 801aa4a:	2901      	cmp	r1, #1
 801aa4c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801aa50:	d803      	bhi.n	801aa5a <uxr_write_framed_msg+0x276>
 801aa52:	2105      	movs	r1, #5
 801aa54:	f04f 0c04 	mov.w	ip, #4
 801aa58:	e737      	b.n	801a8ca <uxr_write_framed_msg+0xe6>
 801aa5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aa5c:	2104      	movs	r1, #4
 801aa5e:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 801aa62:	b2dd      	uxtb	r5, r3
 801aa64:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801aa68:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801aa6c:	2a01      	cmp	r2, #1
 801aa6e:	f63f aee1 	bhi.w	801a834 <uxr_write_framed_msg+0x50>
 801aa72:	e73c      	b.n	801a8ee <uxr_write_framed_msg+0x10a>
 801aa74:	0801f07c 	.word	0x0801f07c

0801aa78 <uxr_framing_read_transport>:
 801aa78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa7c:	4604      	mov	r4, r0
 801aa7e:	b085      	sub	sp, #20
 801aa80:	4692      	mov	sl, r2
 801aa82:	4689      	mov	r9, r1
 801aa84:	461d      	mov	r5, r3
 801aa86:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801aa88:	f7f7 fb3c 	bl	8012104 <uxr_millis>
 801aa8c:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801aa90:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 801aa94:	4680      	mov	r8, r0
 801aa96:	42ba      	cmp	r2, r7
 801aa98:	d05f      	beq.n	801ab5a <uxr_framing_read_transport+0xe2>
 801aa9a:	d817      	bhi.n	801aacc <uxr_framing_read_transport+0x54>
 801aa9c:	3f01      	subs	r7, #1
 801aa9e:	1aba      	subs	r2, r7, r2
 801aaa0:	2700      	movs	r7, #0
 801aaa2:	b2d2      	uxtb	r2, r2
 801aaa4:	42b2      	cmp	r2, r6
 801aaa6:	d81a      	bhi.n	801aade <uxr_framing_read_transport+0x66>
 801aaa8:	19d3      	adds	r3, r2, r7
 801aaaa:	42b3      	cmp	r3, r6
 801aaac:	d852      	bhi.n	801ab54 <uxr_framing_read_transport+0xdc>
 801aaae:	b9d2      	cbnz	r2, 801aae6 <uxr_framing_read_transport+0x6e>
 801aab0:	2600      	movs	r6, #0
 801aab2:	f7f7 fb27 	bl	8012104 <uxr_millis>
 801aab6:	682b      	ldr	r3, [r5, #0]
 801aab8:	eba0 0008 	sub.w	r0, r0, r8
 801aabc:	1a1b      	subs	r3, r3, r0
 801aabe:	4630      	mov	r0, r6
 801aac0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aac4:	602b      	str	r3, [r5, #0]
 801aac6:	b005      	add	sp, #20
 801aac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aacc:	2f00      	cmp	r7, #0
 801aace:	d060      	beq.n	801ab92 <uxr_framing_read_transport+0x11a>
 801aad0:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 801aad4:	3f01      	subs	r7, #1
 801aad6:	b2d2      	uxtb	r2, r2
 801aad8:	b2ff      	uxtb	r7, r7
 801aada:	42b2      	cmp	r2, r6
 801aadc:	d9e4      	bls.n	801aaa8 <uxr_framing_read_transport+0x30>
 801aade:	b2f2      	uxtb	r2, r6
 801aae0:	2700      	movs	r7, #0
 801aae2:	2a00      	cmp	r2, #0
 801aae4:	d0e4      	beq.n	801aab0 <uxr_framing_read_transport+0x38>
 801aae6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aae8:	4650      	mov	r0, sl
 801aaea:	9203      	str	r2, [sp, #12]
 801aaec:	9300      	str	r3, [sp, #0]
 801aaee:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801aaf2:	682b      	ldr	r3, [r5, #0]
 801aaf4:	3102      	adds	r1, #2
 801aaf6:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 801ab9c <uxr_framing_read_transport+0x124>
 801aafa:	4421      	add	r1, r4
 801aafc:	47c8      	blx	r9
 801aafe:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801ab02:	4606      	mov	r6, r0
 801ab04:	4403      	add	r3, r0
 801ab06:	0859      	lsrs	r1, r3, #1
 801ab08:	fbab 2101 	umull	r2, r1, fp, r1
 801ab0c:	222a      	movs	r2, #42	; 0x2a
 801ab0e:	0889      	lsrs	r1, r1, #2
 801ab10:	fb02 3111 	mls	r1, r2, r1, r3
 801ab14:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 801ab18:	2800      	cmp	r0, #0
 801ab1a:	d0c9      	beq.n	801aab0 <uxr_framing_read_transport+0x38>
 801ab1c:	9a03      	ldr	r2, [sp, #12]
 801ab1e:	4290      	cmp	r0, r2
 801ab20:	d1c7      	bne.n	801aab2 <uxr_framing_read_transport+0x3a>
 801ab22:	2f00      	cmp	r7, #0
 801ab24:	d0c5      	beq.n	801aab2 <uxr_framing_read_transport+0x3a>
 801ab26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ab28:	3102      	adds	r1, #2
 801ab2a:	463a      	mov	r2, r7
 801ab2c:	4650      	mov	r0, sl
 801ab2e:	4421      	add	r1, r4
 801ab30:	9300      	str	r3, [sp, #0]
 801ab32:	2300      	movs	r3, #0
 801ab34:	47c8      	blx	r9
 801ab36:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801ab3a:	4406      	add	r6, r0
 801ab3c:	1813      	adds	r3, r2, r0
 801ab3e:	085a      	lsrs	r2, r3, #1
 801ab40:	fbab 1b02 	umull	r1, fp, fp, r2
 801ab44:	222a      	movs	r2, #42	; 0x2a
 801ab46:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 801ab4a:	fb02 331b 	mls	r3, r2, fp, r3
 801ab4e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801ab52:	e7ae      	b.n	801aab2 <uxr_framing_read_transport+0x3a>
 801ab54:	1ab6      	subs	r6, r6, r2
 801ab56:	b2f7      	uxtb	r7, r6
 801ab58:	e7a9      	b.n	801aaae <uxr_framing_read_transport+0x36>
 801ab5a:	2300      	movs	r3, #0
 801ab5c:	2e28      	cmp	r6, #40	; 0x28
 801ab5e:	85a3      	strh	r3, [r4, #44]	; 0x2c
 801ab60:	d9bd      	bls.n	801aade <uxr_framing_read_transport+0x66>
 801ab62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ab64:	2229      	movs	r2, #41	; 0x29
 801ab66:	1ca1      	adds	r1, r4, #2
 801ab68:	4650      	mov	r0, sl
 801ab6a:	9300      	str	r3, [sp, #0]
 801ab6c:	682b      	ldr	r3, [r5, #0]
 801ab6e:	47c8      	blx	r9
 801ab70:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801ab74:	4606      	mov	r6, r0
 801ab76:	212a      	movs	r1, #42	; 0x2a
 801ab78:	4403      	add	r3, r0
 801ab7a:	4808      	ldr	r0, [pc, #32]	; (801ab9c <uxr_framing_read_transport+0x124>)
 801ab7c:	085a      	lsrs	r2, r3, #1
 801ab7e:	fba0 0202 	umull	r0, r2, r0, r2
 801ab82:	0892      	lsrs	r2, r2, #2
 801ab84:	fb01 3312 	mls	r3, r1, r2, r3
 801ab88:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801ab8c:	2e00      	cmp	r6, #0
 801ab8e:	d08f      	beq.n	801aab0 <uxr_framing_read_transport+0x38>
 801ab90:	e78f      	b.n	801aab2 <uxr_framing_read_transport+0x3a>
 801ab92:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 801ab96:	b2d2      	uxtb	r2, r2
 801ab98:	e784      	b.n	801aaa4 <uxr_framing_read_transport+0x2c>
 801ab9a:	bf00      	nop
 801ab9c:	30c30c31 	.word	0x30c30c31

0801aba0 <uxr_read_framed_msg>:
 801aba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aba4:	461e      	mov	r6, r3
 801aba6:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801abaa:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 801abae:	b083      	sub	sp, #12
 801abb0:	4604      	mov	r4, r0
 801abb2:	4688      	mov	r8, r1
 801abb4:	429d      	cmp	r5, r3
 801abb6:	4691      	mov	r9, r2
 801abb8:	f000 818c 	beq.w	801aed4 <uxr_read_framed_msg+0x334>
 801abbc:	7823      	ldrb	r3, [r4, #0]
 801abbe:	4dc3      	ldr	r5, [pc, #780]	; (801aecc <uxr_read_framed_msg+0x32c>)
 801abc0:	4fc3      	ldr	r7, [pc, #780]	; (801aed0 <uxr_read_framed_msg+0x330>)
 801abc2:	2b07      	cmp	r3, #7
 801abc4:	d8fd      	bhi.n	801abc2 <uxr_read_framed_msg+0x22>
 801abc6:	e8df f013 	tbh	[pc, r3, lsl #1]
 801abca:	011c      	.short	0x011c
 801abcc:	00d900fb 	.word	0x00d900fb
 801abd0:	008f00ba 	.word	0x008f00ba
 801abd4:	00320051 	.word	0x00320051
 801abd8:	0008      	.short	0x0008
 801abda:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801abde:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801abe2:	4299      	cmp	r1, r3
 801abe4:	f000 814d 	beq.w	801ae82 <uxr_read_framed_msg+0x2e2>
 801abe8:	18e2      	adds	r2, r4, r3
 801abea:	7892      	ldrb	r2, [r2, #2]
 801abec:	2a7d      	cmp	r2, #125	; 0x7d
 801abee:	f000 81b8 	beq.w	801af62 <uxr_read_framed_msg+0x3c2>
 801abf2:	3301      	adds	r3, #1
 801abf4:	212a      	movs	r1, #42	; 0x2a
 801abf6:	2a7e      	cmp	r2, #126	; 0x7e
 801abf8:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801abfc:	fba5 c000 	umull	ip, r0, r5, r0
 801ac00:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801ac04:	fb01 3310 	mls	r3, r1, r0, r3
 801ac08:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801ac0c:	f000 8257 	beq.w	801b0be <uxr_read_framed_msg+0x51e>
 801ac10:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801ac12:	2000      	movs	r0, #0
 801ac14:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 801ac16:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801ac1a:	7020      	strb	r0, [r4, #0]
 801ac1c:	b29b      	uxth	r3, r3
 801ac1e:	4299      	cmp	r1, r3
 801ac20:	86a3      	strh	r3, [r4, #52]	; 0x34
 801ac22:	f000 8178 	beq.w	801af16 <uxr_read_framed_msg+0x376>
 801ac26:	2000      	movs	r0, #0
 801ac28:	b003      	add	sp, #12
 801ac2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac2e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801ac32:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801ac36:	4298      	cmp	r0, r3
 801ac38:	f000 8132 	beq.w	801aea0 <uxr_read_framed_msg+0x300>
 801ac3c:	18e2      	adds	r2, r4, r3
 801ac3e:	7891      	ldrb	r1, [r2, #2]
 801ac40:	297d      	cmp	r1, #125	; 0x7d
 801ac42:	f000 8170 	beq.w	801af26 <uxr_read_framed_msg+0x386>
 801ac46:	3301      	adds	r3, #1
 801ac48:	202a      	movs	r0, #42	; 0x2a
 801ac4a:	297e      	cmp	r1, #126	; 0x7e
 801ac4c:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801ac50:	fba5 c202 	umull	ip, r2, r5, r2
 801ac54:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801ac58:	fb00 3312 	mls	r3, r0, r2, r3
 801ac5c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801ac60:	f000 821d 	beq.w	801b09e <uxr_read_framed_msg+0x4fe>
 801ac64:	2307      	movs	r3, #7
 801ac66:	86a1      	strh	r1, [r4, #52]	; 0x34
 801ac68:	7023      	strb	r3, [r4, #0]
 801ac6a:	e7aa      	b.n	801abc2 <uxr_read_framed_msg+0x22>
 801ac6c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801ac6e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 801ac72:	459e      	cmp	lr, r3
 801ac74:	d827      	bhi.n	801acc6 <uxr_read_framed_msg+0x126>
 801ac76:	e032      	b.n	801acde <uxr_read_framed_msg+0x13e>
 801ac78:	fba5 b101 	umull	fp, r1, r5, r1
 801ac7c:	f89c c002 	ldrb.w	ip, [ip, #2]
 801ac80:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 801ac84:	0889      	lsrs	r1, r1, #2
 801ac86:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 801ac8a:	fb0b 0111 	mls	r1, fp, r1, r0
 801ac8e:	f000 80d4 	beq.w	801ae3a <uxr_read_framed_msg+0x29a>
 801ac92:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801ac96:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 801ac9a:	f000 80cb 	beq.w	801ae34 <uxr_read_framed_msg+0x294>
 801ac9e:	f806 c003 	strb.w	ip, [r6, r3]
 801aca2:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801aca4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801aca6:	ea80 010c 	eor.w	r1, r0, ip
 801acaa:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 801acae:	3301      	adds	r3, #1
 801acb0:	b2c9      	uxtb	r1, r1
 801acb2:	b29b      	uxth	r3, r3
 801acb4:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 801acb8:	4573      	cmp	r3, lr
 801acba:	8663      	strh	r3, [r4, #50]	; 0x32
 801acbc:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 801acc0:	86e2      	strh	r2, [r4, #54]	; 0x36
 801acc2:	f080 811d 	bcs.w	801af00 <uxr_read_framed_msg+0x360>
 801acc6:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801acca:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 801acce:	1c50      	adds	r0, r2, #1
 801acd0:	eb04 0c02 	add.w	ip, r4, r2
 801acd4:	4592      	cmp	sl, r2
 801acd6:	ea4f 0150 	mov.w	r1, r0, lsr #1
 801acda:	d1cd      	bne.n	801ac78 <uxr_read_framed_msg+0xd8>
 801acdc:	459e      	cmp	lr, r3
 801acde:	f040 8114 	bne.w	801af0a <uxr_read_framed_msg+0x36a>
 801ace2:	2306      	movs	r3, #6
 801ace4:	7023      	strb	r3, [r4, #0]
 801ace6:	e76c      	b.n	801abc2 <uxr_read_framed_msg+0x22>
 801ace8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801acec:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801acf0:	4298      	cmp	r0, r3
 801acf2:	f000 80c6 	beq.w	801ae82 <uxr_read_framed_msg+0x2e2>
 801acf6:	18e2      	adds	r2, r4, r3
 801acf8:	7891      	ldrb	r1, [r2, #2]
 801acfa:	297d      	cmp	r1, #125	; 0x7d
 801acfc:	f000 8193 	beq.w	801b026 <uxr_read_framed_msg+0x486>
 801ad00:	3301      	adds	r3, #1
 801ad02:	202a      	movs	r0, #42	; 0x2a
 801ad04:	297e      	cmp	r1, #126	; 0x7e
 801ad06:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801ad0a:	fba5 c202 	umull	ip, r2, r5, r2
 801ad0e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801ad12:	fb00 3312 	mls	r3, r0, r2, r3
 801ad16:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801ad1a:	f000 81d0 	beq.w	801b0be <uxr_read_framed_msg+0x51e>
 801ad1e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801ad20:	2000      	movs	r0, #0
 801ad22:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801ad26:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ad28:	8660      	strh	r0, [r4, #50]	; 0x32
 801ad2a:	b29b      	uxth	r3, r3
 801ad2c:	86e0      	strh	r0, [r4, #54]	; 0x36
 801ad2e:	428b      	cmp	r3, r1
 801ad30:	8623      	strh	r3, [r4, #48]	; 0x30
 801ad32:	f240 80e2 	bls.w	801aefa <uxr_read_framed_msg+0x35a>
 801ad36:	7020      	strb	r0, [r4, #0]
 801ad38:	b003      	add	sp, #12
 801ad3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad3e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801ad42:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801ad46:	4298      	cmp	r0, r3
 801ad48:	f000 80aa 	beq.w	801aea0 <uxr_read_framed_msg+0x300>
 801ad4c:	18e2      	adds	r2, r4, r3
 801ad4e:	7891      	ldrb	r1, [r2, #2]
 801ad50:	297d      	cmp	r1, #125	; 0x7d
 801ad52:	f000 8186 	beq.w	801b062 <uxr_read_framed_msg+0x4c2>
 801ad56:	3301      	adds	r3, #1
 801ad58:	202a      	movs	r0, #42	; 0x2a
 801ad5a:	297e      	cmp	r1, #126	; 0x7e
 801ad5c:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801ad60:	fba5 c202 	umull	ip, r2, r5, r2
 801ad64:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801ad68:	fb00 3312 	mls	r3, r0, r2, r3
 801ad6c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801ad70:	f000 8195 	beq.w	801b09e <uxr_read_framed_msg+0x4fe>
 801ad74:	2304      	movs	r3, #4
 801ad76:	8621      	strh	r1, [r4, #48]	; 0x30
 801ad78:	7023      	strb	r3, [r4, #0]
 801ad7a:	e722      	b.n	801abc2 <uxr_read_framed_msg+0x22>
 801ad7c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801ad80:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801ad84:	4290      	cmp	r0, r2
 801ad86:	f000 80b4 	beq.w	801aef2 <uxr_read_framed_msg+0x352>
 801ad8a:	18a3      	adds	r3, r4, r2
 801ad8c:	7899      	ldrb	r1, [r3, #2]
 801ad8e:	297d      	cmp	r1, #125	; 0x7d
 801ad90:	f000 8107 	beq.w	801afa2 <uxr_read_framed_msg+0x402>
 801ad94:	3201      	adds	r2, #1
 801ad96:	232a      	movs	r3, #42	; 0x2a
 801ad98:	297e      	cmp	r1, #126	; 0x7e
 801ad9a:	ea4f 0052 	mov.w	r0, r2, lsr #1
 801ad9e:	fba5 c000 	umull	ip, r0, r5, r0
 801ada2:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801ada6:	fb03 2210 	mls	r2, r3, r0, r2
 801adaa:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801adae:	f000 818a 	beq.w	801b0c6 <uxr_read_framed_msg+0x526>
 801adb2:	7863      	ldrb	r3, [r4, #1]
 801adb4:	428b      	cmp	r3, r1
 801adb6:	bf0c      	ite	eq
 801adb8:	2303      	moveq	r3, #3
 801adba:	2300      	movne	r3, #0
 801adbc:	7023      	strb	r3, [r4, #0]
 801adbe:	e700      	b.n	801abc2 <uxr_read_framed_msg+0x22>
 801adc0:	2300      	movs	r3, #0
 801adc2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801adc6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 801adca:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801adce:	4299      	cmp	r1, r3
 801add0:	d06a      	beq.n	801aea8 <uxr_read_framed_msg+0x308>
 801add2:	18e2      	adds	r2, r4, r3
 801add4:	7890      	ldrb	r0, [r2, #2]
 801add6:	287d      	cmp	r0, #125	; 0x7d
 801add8:	f000 8100 	beq.w	801afdc <uxr_read_framed_msg+0x43c>
 801addc:	3301      	adds	r3, #1
 801adde:	212a      	movs	r1, #42	; 0x2a
 801ade0:	287e      	cmp	r0, #126	; 0x7e
 801ade2:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 801ade6:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801adea:	fba5 c202 	umull	ip, r2, r5, r2
 801adee:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801adf2:	fb01 3312 	mls	r3, r1, r2, r3
 801adf6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801adfa:	d055      	beq.n	801aea8 <uxr_read_framed_msg+0x308>
 801adfc:	2302      	movs	r3, #2
 801adfe:	7023      	strb	r3, [r4, #0]
 801ae00:	e6df      	b.n	801abc2 <uxr_read_framed_msg+0x22>
 801ae02:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 801ae06:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 801ae0a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801ae0e:	1c5a      	adds	r2, r3, #1
 801ae10:	459c      	cmp	ip, r3
 801ae12:	eb04 0103 	add.w	r1, r4, r3
 801ae16:	ea4f 0352 	mov.w	r3, r2, lsr #1
 801ae1a:	f43f af04 	beq.w	801ac26 <uxr_read_framed_msg+0x86>
 801ae1e:	fba5 0303 	umull	r0, r3, r5, r3
 801ae22:	7889      	ldrb	r1, [r1, #2]
 801ae24:	089b      	lsrs	r3, r3, #2
 801ae26:	297e      	cmp	r1, #126	; 0x7e
 801ae28:	fb0e 2313 	mls	r3, lr, r3, r2
 801ae2c:	b2db      	uxtb	r3, r3
 801ae2e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801ae32:	d1ec      	bne.n	801ae0e <uxr_read_framed_msg+0x26e>
 801ae34:	2301      	movs	r3, #1
 801ae36:	7023      	strb	r3, [r4, #0]
 801ae38:	e6c3      	b.n	801abc2 <uxr_read_framed_msg+0x22>
 801ae3a:	1c50      	adds	r0, r2, #1
 801ae3c:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 801ae40:	3202      	adds	r2, #2
 801ae42:	0841      	lsrs	r1, r0, #1
 801ae44:	fba5 c101 	umull	ip, r1, r5, r1
 801ae48:	0889      	lsrs	r1, r1, #2
 801ae4a:	fb0b 0111 	mls	r1, fp, r1, r0
 801ae4e:	1860      	adds	r0, r4, r1
 801ae50:	b2c9      	uxtb	r1, r1
 801ae52:	458a      	cmp	sl, r1
 801ae54:	f43f af42 	beq.w	801acdc <uxr_read_framed_msg+0x13c>
 801ae58:	0851      	lsrs	r1, r2, #1
 801ae5a:	7880      	ldrb	r0, [r0, #2]
 801ae5c:	fba5 a101 	umull	sl, r1, r5, r1
 801ae60:	287e      	cmp	r0, #126	; 0x7e
 801ae62:	f080 0c20 	eor.w	ip, r0, #32
 801ae66:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801ae6a:	fb0b 2211 	mls	r2, fp, r1, r2
 801ae6e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801ae72:	f47f af14 	bne.w	801ac9e <uxr_read_framed_msg+0xfe>
 801ae76:	459e      	cmp	lr, r3
 801ae78:	f43f af33 	beq.w	801ace2 <uxr_read_framed_msg+0x142>
 801ae7c:	2301      	movs	r3, #1
 801ae7e:	7023      	strb	r3, [r4, #0]
 801ae80:	e69f      	b.n	801abc2 <uxr_read_framed_msg+0x22>
 801ae82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ae84:	9300      	str	r3, [sp, #0]
 801ae86:	2301      	movs	r3, #1
 801ae88:	9301      	str	r3, [sp, #4]
 801ae8a:	464a      	mov	r2, r9
 801ae8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ae8e:	4641      	mov	r1, r8
 801ae90:	4620      	mov	r0, r4
 801ae92:	f7ff fdf1 	bl	801aa78 <uxr_framing_read_transport>
 801ae96:	2800      	cmp	r0, #0
 801ae98:	f43f aec5 	beq.w	801ac26 <uxr_read_framed_msg+0x86>
 801ae9c:	7823      	ldrb	r3, [r4, #0]
 801ae9e:	e690      	b.n	801abc2 <uxr_read_framed_msg+0x22>
 801aea0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aea2:	9300      	str	r3, [sp, #0]
 801aea4:	2302      	movs	r3, #2
 801aea6:	e7ef      	b.n	801ae88 <uxr_read_framed_msg+0x2e8>
 801aea8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aeaa:	464a      	mov	r2, r9
 801aeac:	4641      	mov	r1, r8
 801aeae:	4620      	mov	r0, r4
 801aeb0:	9300      	str	r3, [sp, #0]
 801aeb2:	2304      	movs	r3, #4
 801aeb4:	9301      	str	r3, [sp, #4]
 801aeb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aeb8:	f7ff fdde 	bl	801aa78 <uxr_framing_read_transport>
 801aebc:	2800      	cmp	r0, #0
 801aebe:	d1ed      	bne.n	801ae9c <uxr_read_framed_msg+0x2fc>
 801aec0:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801aec4:	2b7e      	cmp	r3, #126	; 0x7e
 801aec6:	d0e9      	beq.n	801ae9c <uxr_read_framed_msg+0x2fc>
 801aec8:	e6ad      	b.n	801ac26 <uxr_read_framed_msg+0x86>
 801aeca:	bf00      	nop
 801aecc:	30c30c31 	.word	0x30c30c31
 801aed0:	0801f07c 	.word	0x0801f07c
 801aed4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aed6:	9300      	str	r3, [sp, #0]
 801aed8:	2305      	movs	r3, #5
 801aeda:	9301      	str	r3, [sp, #4]
 801aedc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aede:	f7ff fdcb 	bl	801aa78 <uxr_framing_read_transport>
 801aee2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801aee6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801aeea:	429a      	cmp	r2, r3
 801aeec:	f43f ae9b 	beq.w	801ac26 <uxr_read_framed_msg+0x86>
 801aef0:	e664      	b.n	801abbc <uxr_read_framed_msg+0x1c>
 801aef2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801aef4:	9300      	str	r3, [sp, #0]
 801aef6:	2303      	movs	r3, #3
 801aef8:	e7c6      	b.n	801ae88 <uxr_read_framed_msg+0x2e8>
 801aefa:	2305      	movs	r3, #5
 801aefc:	7023      	strb	r3, [r4, #0]
 801aefe:	e660      	b.n	801abc2 <uxr_read_framed_msg+0x22>
 801af00:	f43f aeef 	beq.w	801ace2 <uxr_read_framed_msg+0x142>
 801af04:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801af08:	d094      	beq.n	801ae34 <uxr_read_framed_msg+0x294>
 801af0a:	ebae 0303 	sub.w	r3, lr, r3
 801af0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801af10:	3302      	adds	r3, #2
 801af12:	9200      	str	r2, [sp, #0]
 801af14:	e7b8      	b.n	801ae88 <uxr_read_framed_msg+0x2e8>
 801af16:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801af1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801af1c:	7013      	strb	r3, [r2, #0]
 801af1e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801af20:	b003      	add	sp, #12
 801af22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af26:	1c59      	adds	r1, r3, #1
 801af28:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801af2c:	084a      	lsrs	r2, r1, #1
 801af2e:	fba5 e202 	umull	lr, r2, r5, r2
 801af32:	0892      	lsrs	r2, r2, #2
 801af34:	fb0c 1212 	mls	r2, ip, r2, r1
 801af38:	b2d1      	uxtb	r1, r2
 801af3a:	4288      	cmp	r0, r1
 801af3c:	d0b0      	beq.n	801aea0 <uxr_read_framed_msg+0x300>
 801af3e:	3302      	adds	r3, #2
 801af40:	4422      	add	r2, r4
 801af42:	7891      	ldrb	r1, [r2, #2]
 801af44:	085a      	lsrs	r2, r3, #1
 801af46:	fba5 0202 	umull	r0, r2, r5, r2
 801af4a:	297e      	cmp	r1, #126	; 0x7e
 801af4c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801af50:	fb0c 3312 	mls	r3, ip, r2, r3
 801af54:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801af58:	f000 80a1 	beq.w	801b09e <uxr_read_framed_msg+0x4fe>
 801af5c:	f081 0120 	eor.w	r1, r1, #32
 801af60:	e680      	b.n	801ac64 <uxr_read_framed_msg+0xc4>
 801af62:	f103 0c01 	add.w	ip, r3, #1
 801af66:	202a      	movs	r0, #42	; 0x2a
 801af68:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801af6c:	fba5 e202 	umull	lr, r2, r5, r2
 801af70:	0892      	lsrs	r2, r2, #2
 801af72:	fb00 c212 	mls	r2, r0, r2, ip
 801af76:	fa5f fc82 	uxtb.w	ip, r2
 801af7a:	4561      	cmp	r1, ip
 801af7c:	d081      	beq.n	801ae82 <uxr_read_framed_msg+0x2e2>
 801af7e:	3302      	adds	r3, #2
 801af80:	4422      	add	r2, r4
 801af82:	0859      	lsrs	r1, r3, #1
 801af84:	7892      	ldrb	r2, [r2, #2]
 801af86:	fba5 c101 	umull	ip, r1, r5, r1
 801af8a:	2a7e      	cmp	r2, #126	; 0x7e
 801af8c:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801af90:	fb00 3311 	mls	r3, r0, r1, r3
 801af94:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801af98:	f000 8091 	beq.w	801b0be <uxr_read_framed_msg+0x51e>
 801af9c:	f082 0220 	eor.w	r2, r2, #32
 801afa0:	e636      	b.n	801ac10 <uxr_read_framed_msg+0x70>
 801afa2:	1c51      	adds	r1, r2, #1
 801afa4:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801afa8:	084b      	lsrs	r3, r1, #1
 801afaa:	fba5 e303 	umull	lr, r3, r5, r3
 801afae:	089b      	lsrs	r3, r3, #2
 801afb0:	fb0c 1313 	mls	r3, ip, r3, r1
 801afb4:	b2d9      	uxtb	r1, r3
 801afb6:	4288      	cmp	r0, r1
 801afb8:	d09b      	beq.n	801aef2 <uxr_read_framed_msg+0x352>
 801afba:	3202      	adds	r2, #2
 801afbc:	4423      	add	r3, r4
 801afbe:	0850      	lsrs	r0, r2, #1
 801afc0:	789b      	ldrb	r3, [r3, #2]
 801afc2:	fba5 1000 	umull	r1, r0, r5, r0
 801afc6:	2b7e      	cmp	r3, #126	; 0x7e
 801afc8:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801afcc:	fb0c 2210 	mls	r2, ip, r0, r2
 801afd0:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801afd4:	d077      	beq.n	801b0c6 <uxr_read_framed_msg+0x526>
 801afd6:	f083 0120 	eor.w	r1, r3, #32
 801afda:	e6ea      	b.n	801adb2 <uxr_read_framed_msg+0x212>
 801afdc:	f103 0c01 	add.w	ip, r3, #1
 801afe0:	202a      	movs	r0, #42	; 0x2a
 801afe2:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801afe6:	fba5 e202 	umull	lr, r2, r5, r2
 801afea:	0892      	lsrs	r2, r2, #2
 801afec:	fb00 c212 	mls	r2, r0, r2, ip
 801aff0:	fa5f fc82 	uxtb.w	ip, r2
 801aff4:	4561      	cmp	r1, ip
 801aff6:	f43f af57 	beq.w	801aea8 <uxr_read_framed_msg+0x308>
 801affa:	3302      	adds	r3, #2
 801affc:	4422      	add	r2, r4
 801affe:	7891      	ldrb	r1, [r2, #2]
 801b000:	085a      	lsrs	r2, r3, #1
 801b002:	fba5 c202 	umull	ip, r2, r5, r2
 801b006:	297e      	cmp	r1, #126	; 0x7e
 801b008:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801b00c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801b010:	fb00 3312 	mls	r3, r0, r2, r3
 801b014:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801b018:	f43f af46 	beq.w	801aea8 <uxr_read_framed_msg+0x308>
 801b01c:	f081 0120 	eor.w	r1, r1, #32
 801b020:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801b024:	e6ea      	b.n	801adfc <uxr_read_framed_msg+0x25c>
 801b026:	1c59      	adds	r1, r3, #1
 801b028:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801b02c:	084a      	lsrs	r2, r1, #1
 801b02e:	fba5 e202 	umull	lr, r2, r5, r2
 801b032:	0892      	lsrs	r2, r2, #2
 801b034:	fb0c 1212 	mls	r2, ip, r2, r1
 801b038:	b2d1      	uxtb	r1, r2
 801b03a:	4288      	cmp	r0, r1
 801b03c:	f43f af21 	beq.w	801ae82 <uxr_read_framed_msg+0x2e2>
 801b040:	3302      	adds	r3, #2
 801b042:	4422      	add	r2, r4
 801b044:	7891      	ldrb	r1, [r2, #2]
 801b046:	085a      	lsrs	r2, r3, #1
 801b048:	fba5 0202 	umull	r0, r2, r5, r2
 801b04c:	297e      	cmp	r1, #126	; 0x7e
 801b04e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801b052:	fb0c 3312 	mls	r3, ip, r2, r3
 801b056:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801b05a:	d030      	beq.n	801b0be <uxr_read_framed_msg+0x51e>
 801b05c:	f081 0120 	eor.w	r1, r1, #32
 801b060:	e65d      	b.n	801ad1e <uxr_read_framed_msg+0x17e>
 801b062:	1c59      	adds	r1, r3, #1
 801b064:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801b068:	084a      	lsrs	r2, r1, #1
 801b06a:	fba5 e202 	umull	lr, r2, r5, r2
 801b06e:	0892      	lsrs	r2, r2, #2
 801b070:	fb0c 1212 	mls	r2, ip, r2, r1
 801b074:	b2d1      	uxtb	r1, r2
 801b076:	4288      	cmp	r0, r1
 801b078:	f43f af12 	beq.w	801aea0 <uxr_read_framed_msg+0x300>
 801b07c:	3302      	adds	r3, #2
 801b07e:	4422      	add	r2, r4
 801b080:	7891      	ldrb	r1, [r2, #2]
 801b082:	085a      	lsrs	r2, r3, #1
 801b084:	fba5 0202 	umull	r0, r2, r5, r2
 801b088:	297e      	cmp	r1, #126	; 0x7e
 801b08a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801b08e:	fb0c 3312 	mls	r3, ip, r2, r3
 801b092:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801b096:	d002      	beq.n	801b09e <uxr_read_framed_msg+0x4fe>
 801b098:	f081 0120 	eor.w	r1, r1, #32
 801b09c:	e66a      	b.n	801ad74 <uxr_read_framed_msg+0x1d4>
 801b09e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b0a0:	9300      	str	r3, [sp, #0]
 801b0a2:	2302      	movs	r3, #2
 801b0a4:	9301      	str	r3, [sp, #4]
 801b0a6:	464a      	mov	r2, r9
 801b0a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b0aa:	4641      	mov	r1, r8
 801b0ac:	4620      	mov	r0, r4
 801b0ae:	f7ff fce3 	bl	801aa78 <uxr_framing_read_transport>
 801b0b2:	2800      	cmp	r0, #0
 801b0b4:	f47f aef2 	bne.w	801ae9c <uxr_read_framed_msg+0x2fc>
 801b0b8:	2301      	movs	r3, #1
 801b0ba:	7023      	strb	r3, [r4, #0]
 801b0bc:	e581      	b.n	801abc2 <uxr_read_framed_msg+0x22>
 801b0be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b0c0:	9300      	str	r3, [sp, #0]
 801b0c2:	2301      	movs	r3, #1
 801b0c4:	e7ee      	b.n	801b0a4 <uxr_read_framed_msg+0x504>
 801b0c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b0c8:	9300      	str	r3, [sp, #0]
 801b0ca:	2303      	movs	r3, #3
 801b0cc:	e7ea      	b.n	801b0a4 <uxr_read_framed_msg+0x504>
 801b0ce:	bf00      	nop

0801b0d0 <rcl_get_automatic_discovery_range>:
 801b0d0:	b530      	push	{r4, r5, lr}
 801b0d2:	2300      	movs	r3, #0
 801b0d4:	b083      	sub	sp, #12
 801b0d6:	9301      	str	r3, [sp, #4]
 801b0d8:	b1c0      	cbz	r0, 801b10c <rcl_get_automatic_discovery_range+0x3c>
 801b0da:	4604      	mov	r4, r0
 801b0dc:	a901      	add	r1, sp, #4
 801b0de:	4818      	ldr	r0, [pc, #96]	; (801b140 <rcl_get_automatic_discovery_range+0x70>)
 801b0e0:	f7fc fbf6 	bl	80178d0 <rcutils_get_env>
 801b0e4:	b110      	cbz	r0, 801b0ec <rcl_get_automatic_discovery_range+0x1c>
 801b0e6:	2001      	movs	r0, #1
 801b0e8:	b003      	add	sp, #12
 801b0ea:	bd30      	pop	{r4, r5, pc}
 801b0ec:	9d01      	ldr	r5, [sp, #4]
 801b0ee:	782b      	ldrb	r3, [r5, #0]
 801b0f0:	b13b      	cbz	r3, 801b102 <rcl_get_automatic_discovery_range+0x32>
 801b0f2:	4914      	ldr	r1, [pc, #80]	; (801b144 <rcl_get_automatic_discovery_range+0x74>)
 801b0f4:	4628      	mov	r0, r5
 801b0f6:	f7e5 f8a3 	bl	8000240 <strcmp>
 801b0fa:	b950      	cbnz	r0, 801b112 <rcl_get_automatic_discovery_range+0x42>
 801b0fc:	2301      	movs	r3, #1
 801b0fe:	7023      	strb	r3, [r4, #0]
 801b100:	e7f2      	b.n	801b0e8 <rcl_get_automatic_discovery_range+0x18>
 801b102:	2303      	movs	r3, #3
 801b104:	2000      	movs	r0, #0
 801b106:	7023      	strb	r3, [r4, #0]
 801b108:	b003      	add	sp, #12
 801b10a:	bd30      	pop	{r4, r5, pc}
 801b10c:	200b      	movs	r0, #11
 801b10e:	b003      	add	sp, #12
 801b110:	bd30      	pop	{r4, r5, pc}
 801b112:	490d      	ldr	r1, [pc, #52]	; (801b148 <rcl_get_automatic_discovery_range+0x78>)
 801b114:	4628      	mov	r0, r5
 801b116:	f7e5 f893 	bl	8000240 <strcmp>
 801b11a:	b168      	cbz	r0, 801b138 <rcl_get_automatic_discovery_range+0x68>
 801b11c:	490b      	ldr	r1, [pc, #44]	; (801b14c <rcl_get_automatic_discovery_range+0x7c>)
 801b11e:	4628      	mov	r0, r5
 801b120:	f7e5 f88e 	bl	8000240 <strcmp>
 801b124:	2800      	cmp	r0, #0
 801b126:	d0ec      	beq.n	801b102 <rcl_get_automatic_discovery_range+0x32>
 801b128:	4909      	ldr	r1, [pc, #36]	; (801b150 <rcl_get_automatic_discovery_range+0x80>)
 801b12a:	4628      	mov	r0, r5
 801b12c:	f7e5 f888 	bl	8000240 <strcmp>
 801b130:	b910      	cbnz	r0, 801b138 <rcl_get_automatic_discovery_range+0x68>
 801b132:	2304      	movs	r3, #4
 801b134:	7023      	strb	r3, [r4, #0]
 801b136:	e7d7      	b.n	801b0e8 <rcl_get_automatic_discovery_range+0x18>
 801b138:	2302      	movs	r3, #2
 801b13a:	2000      	movs	r0, #0
 801b13c:	7023      	strb	r3, [r4, #0]
 801b13e:	e7d3      	b.n	801b0e8 <rcl_get_automatic_discovery_range+0x18>
 801b140:	0801f27c 	.word	0x0801f27c
 801b144:	0801f29c 	.word	0x0801f29c
 801b148:	0801f2a0 	.word	0x0801f2a0
 801b14c:	0801f2ac 	.word	0x0801f2ac
 801b150:	0801f2b4 	.word	0x0801f2b4

0801b154 <rcl_automatic_discovery_range_to_string>:
 801b154:	2804      	cmp	r0, #4
 801b156:	d803      	bhi.n	801b160 <rcl_automatic_discovery_range_to_string+0xc>
 801b158:	4b02      	ldr	r3, [pc, #8]	; (801b164 <rcl_automatic_discovery_range_to_string+0x10>)
 801b15a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801b15e:	4770      	bx	lr
 801b160:	2000      	movs	r0, #0
 801b162:	4770      	bx	lr
 801b164:	0801f3a4 	.word	0x0801f3a4

0801b168 <rcl_get_discovery_static_peers>:
 801b168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b16c:	2300      	movs	r3, #0
 801b16e:	b08e      	sub	sp, #56	; 0x38
 801b170:	9306      	str	r3, [sp, #24]
 801b172:	2900      	cmp	r1, #0
 801b174:	d04b      	beq.n	801b20e <rcl_get_discovery_static_peers+0xa6>
 801b176:	4605      	mov	r5, r0
 801b178:	2800      	cmp	r0, #0
 801b17a:	d048      	beq.n	801b20e <rcl_get_discovery_static_peers+0xa6>
 801b17c:	460c      	mov	r4, r1
 801b17e:	482c      	ldr	r0, [pc, #176]	; (801b230 <rcl_get_discovery_static_peers+0xc8>)
 801b180:	a906      	add	r1, sp, #24
 801b182:	f7fc fba5 	bl	80178d0 <rcutils_get_env>
 801b186:	b118      	cbz	r0, 801b190 <rcl_get_discovery_static_peers+0x28>
 801b188:	2001      	movs	r0, #1
 801b18a:	b00e      	add	sp, #56	; 0x38
 801b18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b190:	9b06      	ldr	r3, [sp, #24]
 801b192:	2b00      	cmp	r3, #0
 801b194:	d0f8      	beq.n	801b188 <rcl_get_discovery_static_peers+0x20>
 801b196:	af07      	add	r7, sp, #28
 801b198:	4638      	mov	r0, r7
 801b19a:	f000 fc73 	bl	801ba84 <rcutils_get_zero_initialized_string_array>
 801b19e:	f104 0308 	add.w	r3, r4, #8
 801b1a2:	9703      	str	r7, [sp, #12]
 801b1a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b1a8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b1ac:	213b      	movs	r1, #59	; 0x3b
 801b1ae:	9806      	ldr	r0, [sp, #24]
 801b1b0:	e894 000c 	ldmia.w	r4, {r2, r3}
 801b1b4:	f000 fba8 	bl	801b908 <rcutils_split>
 801b1b8:	2800      	cmp	r0, #0
 801b1ba:	d1e5      	bne.n	801b188 <rcl_get_discovery_static_peers+0x20>
 801b1bc:	4622      	mov	r2, r4
 801b1be:	9907      	ldr	r1, [sp, #28]
 801b1c0:	4628      	mov	r0, r5
 801b1c2:	f000 fcaf 	bl	801bb24 <rmw_discovery_options_init>
 801b1c6:	4604      	mov	r4, r0
 801b1c8:	bb78      	cbnz	r0, 801b22a <rcl_get_discovery_static_peers+0xc2>
 801b1ca:	9e07      	ldr	r6, [sp, #28]
 801b1cc:	b336      	cbz	r6, 801b21c <rcl_get_discovery_static_peers+0xb4>
 801b1ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 801b1d2:	4680      	mov	r8, r0
 801b1d4:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 801b1d8:	ea4f 2904 	mov.w	r9, r4, lsl #8
 801b1dc:	4608      	mov	r0, r1
 801b1de:	9105      	str	r1, [sp, #20]
 801b1e0:	f7e5 f88e 	bl	8000300 <strlen>
 801b1e4:	28ff      	cmp	r0, #255	; 0xff
 801b1e6:	9905      	ldr	r1, [sp, #20]
 801b1e8:	d815      	bhi.n	801b216 <rcl_get_discovery_static_peers+0xae>
 801b1ea:	6868      	ldr	r0, [r5, #4]
 801b1ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 801b1f0:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 801b1f4:	3401      	adds	r4, #1
 801b1f6:	f001 fa84 	bl	801c702 <strncpy>
 801b1fa:	686b      	ldr	r3, [r5, #4]
 801b1fc:	9e07      	ldr	r6, [sp, #28]
 801b1fe:	444b      	add	r3, r9
 801b200:	42b4      	cmp	r4, r6
 801b202:	f883 80ff 	strb.w	r8, [r3, #255]	; 0xff
 801b206:	d209      	bcs.n	801b21c <rcl_get_discovery_static_peers+0xb4>
 801b208:	f8dd a020 	ldr.w	sl, [sp, #32]
 801b20c:	e7e2      	b.n	801b1d4 <rcl_get_discovery_static_peers+0x6c>
 801b20e:	200b      	movs	r0, #11
 801b210:	b00e      	add	sp, #56	; 0x38
 801b212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b216:	3401      	adds	r4, #1
 801b218:	42b4      	cmp	r4, r6
 801b21a:	d3db      	bcc.n	801b1d4 <rcl_get_discovery_static_peers+0x6c>
 801b21c:	4638      	mov	r0, r7
 801b21e:	f000 fc4f 	bl	801bac0 <rcutils_string_array_fini>
 801b222:	3800      	subs	r0, #0
 801b224:	bf18      	it	ne
 801b226:	2001      	movne	r0, #1
 801b228:	e7af      	b.n	801b18a <rcl_get_discovery_static_peers+0x22>
 801b22a:	f7f9 f94f 	bl	80144cc <rcl_convert_rmw_ret_to_rcl_ret>
 801b22e:	e7ac      	b.n	801b18a <rcl_get_discovery_static_peers+0x22>
 801b230:	0801f2c4 	.word	0x0801f2c4

0801b234 <rcl_get_default_domain_id>:
 801b234:	b530      	push	{r4, r5, lr}
 801b236:	2300      	movs	r3, #0
 801b238:	b083      	sub	sp, #12
 801b23a:	9300      	str	r3, [sp, #0]
 801b23c:	b1d0      	cbz	r0, 801b274 <rcl_get_default_domain_id+0x40>
 801b23e:	4604      	mov	r4, r0
 801b240:	4669      	mov	r1, sp
 801b242:	4815      	ldr	r0, [pc, #84]	; (801b298 <rcl_get_default_domain_id+0x64>)
 801b244:	f7fc fb44 	bl	80178d0 <rcutils_get_env>
 801b248:	4602      	mov	r2, r0
 801b24a:	b110      	cbz	r0, 801b252 <rcl_get_default_domain_id+0x1e>
 801b24c:	2001      	movs	r0, #1
 801b24e:	b003      	add	sp, #12
 801b250:	bd30      	pop	{r4, r5, pc}
 801b252:	9b00      	ldr	r3, [sp, #0]
 801b254:	b18b      	cbz	r3, 801b27a <rcl_get_default_domain_id+0x46>
 801b256:	7818      	ldrb	r0, [r3, #0]
 801b258:	2800      	cmp	r0, #0
 801b25a:	d0f8      	beq.n	801b24e <rcl_get_default_domain_id+0x1a>
 801b25c:	a901      	add	r1, sp, #4
 801b25e:	4618      	mov	r0, r3
 801b260:	9201      	str	r2, [sp, #4]
 801b262:	f001 f881 	bl	801c368 <strtoul>
 801b266:	4605      	mov	r5, r0
 801b268:	b150      	cbz	r0, 801b280 <rcl_get_default_domain_id+0x4c>
 801b26a:	1c43      	adds	r3, r0, #1
 801b26c:	d00d      	beq.n	801b28a <rcl_get_default_domain_id+0x56>
 801b26e:	2000      	movs	r0, #0
 801b270:	6025      	str	r5, [r4, #0]
 801b272:	e7ec      	b.n	801b24e <rcl_get_default_domain_id+0x1a>
 801b274:	200b      	movs	r0, #11
 801b276:	b003      	add	sp, #12
 801b278:	bd30      	pop	{r4, r5, pc}
 801b27a:	4618      	mov	r0, r3
 801b27c:	b003      	add	sp, #12
 801b27e:	bd30      	pop	{r4, r5, pc}
 801b280:	9b01      	ldr	r3, [sp, #4]
 801b282:	781b      	ldrb	r3, [r3, #0]
 801b284:	2b00      	cmp	r3, #0
 801b286:	d0f2      	beq.n	801b26e <rcl_get_default_domain_id+0x3a>
 801b288:	e7e0      	b.n	801b24c <rcl_get_default_domain_id+0x18>
 801b28a:	f001 fb0f 	bl	801c8ac <__errno>
 801b28e:	6803      	ldr	r3, [r0, #0]
 801b290:	2b22      	cmp	r3, #34	; 0x22
 801b292:	d1ec      	bne.n	801b26e <rcl_get_default_domain_id+0x3a>
 801b294:	e7da      	b.n	801b24c <rcl_get_default_domain_id+0x18>
 801b296:	bf00      	nop
 801b298:	0801f3b8 	.word	0x0801f3b8

0801b29c <rcl_expand_topic_name>:
 801b29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2a0:	b08d      	sub	sp, #52	; 0x34
 801b2a2:	4698      	mov	r8, r3
 801b2a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b2a6:	9207      	str	r2, [sp, #28]
 801b2a8:	2b00      	cmp	r3, #0
 801b2aa:	bf18      	it	ne
 801b2ac:	f1b8 0f00 	cmpne.w	r8, #0
 801b2b0:	bf0c      	ite	eq
 801b2b2:	2301      	moveq	r3, #1
 801b2b4:	2300      	movne	r3, #0
 801b2b6:	2a00      	cmp	r2, #0
 801b2b8:	bf08      	it	eq
 801b2ba:	f043 0301 	orreq.w	r3, r3, #1
 801b2be:	2900      	cmp	r1, #0
 801b2c0:	bf08      	it	eq
 801b2c2:	f043 0301 	orreq.w	r3, r3, #1
 801b2c6:	2b00      	cmp	r3, #0
 801b2c8:	d13d      	bne.n	801b346 <rcl_expand_topic_name+0xaa>
 801b2ca:	fab0 f280 	clz	r2, r0
 801b2ce:	4604      	mov	r4, r0
 801b2d0:	0952      	lsrs	r2, r2, #5
 801b2d2:	2800      	cmp	r0, #0
 801b2d4:	d037      	beq.n	801b346 <rcl_expand_topic_name+0xaa>
 801b2d6:	460f      	mov	r7, r1
 801b2d8:	a90b      	add	r1, sp, #44	; 0x2c
 801b2da:	f000 fa51 	bl	801b780 <rcl_validate_topic_name>
 801b2de:	4605      	mov	r5, r0
 801b2e0:	bb68      	cbnz	r0, 801b33e <rcl_expand_topic_name+0xa2>
 801b2e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b2e4:	2b00      	cmp	r3, #0
 801b2e6:	d137      	bne.n	801b358 <rcl_expand_topic_name+0xbc>
 801b2e8:	4602      	mov	r2, r0
 801b2ea:	a90b      	add	r1, sp, #44	; 0x2c
 801b2ec:	4638      	mov	r0, r7
 801b2ee:	f7fc ff69 	bl	80181c4 <rmw_validate_node_name>
 801b2f2:	bb68      	cbnz	r0, 801b350 <rcl_expand_topic_name+0xb4>
 801b2f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b2f6:	2b00      	cmp	r3, #0
 801b2f8:	d133      	bne.n	801b362 <rcl_expand_topic_name+0xc6>
 801b2fa:	462a      	mov	r2, r5
 801b2fc:	a90b      	add	r1, sp, #44	; 0x2c
 801b2fe:	9807      	ldr	r0, [sp, #28]
 801b300:	f7fc ff42 	bl	8018188 <rmw_validate_namespace>
 801b304:	bb20      	cbnz	r0, 801b350 <rcl_expand_topic_name+0xb4>
 801b306:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801b308:	2d00      	cmp	r5, #0
 801b30a:	f040 80a2 	bne.w	801b452 <rcl_expand_topic_name+0x1b6>
 801b30e:	217b      	movs	r1, #123	; 0x7b
 801b310:	4620      	mov	r0, r4
 801b312:	f001 f9d7 	bl	801c6c4 <strchr>
 801b316:	7823      	ldrb	r3, [r4, #0]
 801b318:	4681      	mov	r9, r0
 801b31a:	bb20      	cbnz	r0, 801b366 <rcl_expand_topic_name+0xca>
 801b31c:	2b2f      	cmp	r3, #47	; 0x2f
 801b31e:	d122      	bne.n	801b366 <rcl_expand_topic_name+0xca>
 801b320:	ab19      	add	r3, sp, #100	; 0x64
 801b322:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b326:	ab16      	add	r3, sp, #88	; 0x58
 801b328:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b32c:	4620      	mov	r0, r4
 801b32e:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b330:	f7fc fc30 	bl	8017b94 <rcutils_strdup>
 801b334:	2800      	cmp	r0, #0
 801b336:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b338:	bf08      	it	eq
 801b33a:	250a      	moveq	r5, #10
 801b33c:	6018      	str	r0, [r3, #0]
 801b33e:	4628      	mov	r0, r5
 801b340:	b00d      	add	sp, #52	; 0x34
 801b342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b346:	250b      	movs	r5, #11
 801b348:	4628      	mov	r0, r5
 801b34a:	b00d      	add	sp, #52	; 0x34
 801b34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b350:	f7f9 f8bc 	bl	80144cc <rcl_convert_rmw_ret_to_rcl_ret>
 801b354:	4605      	mov	r5, r0
 801b356:	e7f2      	b.n	801b33e <rcl_expand_topic_name+0xa2>
 801b358:	2567      	movs	r5, #103	; 0x67
 801b35a:	4628      	mov	r0, r5
 801b35c:	b00d      	add	sp, #52	; 0x34
 801b35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b362:	25c9      	movs	r5, #201	; 0xc9
 801b364:	e7eb      	b.n	801b33e <rcl_expand_topic_name+0xa2>
 801b366:	2b7e      	cmp	r3, #126	; 0x7e
 801b368:	d075      	beq.n	801b456 <rcl_expand_topic_name+0x1ba>
 801b36a:	f1b9 0f00 	cmp.w	r9, #0
 801b36e:	f000 80c2 	beq.w	801b4f6 <rcl_expand_topic_name+0x25a>
 801b372:	2300      	movs	r3, #0
 801b374:	46a2      	mov	sl, r4
 801b376:	461e      	mov	r6, r3
 801b378:	9508      	str	r5, [sp, #32]
 801b37a:	4655      	mov	r5, sl
 801b37c:	9409      	str	r4, [sp, #36]	; 0x24
 801b37e:	46b2      	mov	sl, r6
 801b380:	464c      	mov	r4, r9
 801b382:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801b386:	2c00      	cmp	r4, #0
 801b388:	f000 80ae 	beq.w	801b4e8 <rcl_expand_topic_name+0x24c>
 801b38c:	217d      	movs	r1, #125	; 0x7d
 801b38e:	4628      	mov	r0, r5
 801b390:	f001 f998 	bl	801c6c4 <strchr>
 801b394:	eba0 0904 	sub.w	r9, r0, r4
 801b398:	4621      	mov	r1, r4
 801b39a:	4869      	ldr	r0, [pc, #420]	; (801b540 <rcl_expand_topic_name+0x2a4>)
 801b39c:	f109 0601 	add.w	r6, r9, #1
 801b3a0:	4632      	mov	r2, r6
 801b3a2:	f001 f99c 	bl	801c6de <strncmp>
 801b3a6:	2800      	cmp	r0, #0
 801b3a8:	d051      	beq.n	801b44e <rcl_expand_topic_name+0x1b2>
 801b3aa:	4632      	mov	r2, r6
 801b3ac:	4621      	mov	r1, r4
 801b3ae:	4865      	ldr	r0, [pc, #404]	; (801b544 <rcl_expand_topic_name+0x2a8>)
 801b3b0:	f001 f995 	bl	801c6de <strncmp>
 801b3b4:	b128      	cbz	r0, 801b3c2 <rcl_expand_topic_name+0x126>
 801b3b6:	4632      	mov	r2, r6
 801b3b8:	4621      	mov	r1, r4
 801b3ba:	4863      	ldr	r0, [pc, #396]	; (801b548 <rcl_expand_topic_name+0x2ac>)
 801b3bc:	f001 f98f 	bl	801c6de <strncmp>
 801b3c0:	bb38      	cbnz	r0, 801b412 <rcl_expand_topic_name+0x176>
 801b3c2:	46d9      	mov	r9, fp
 801b3c4:	ab18      	add	r3, sp, #96	; 0x60
 801b3c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b3ca:	ab16      	add	r3, sp, #88	; 0x58
 801b3cc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b3d0:	4620      	mov	r0, r4
 801b3d2:	4631      	mov	r1, r6
 801b3d4:	cb0c      	ldmia	r3, {r2, r3}
 801b3d6:	f7fc fc03 	bl	8017be0 <rcutils_strndup>
 801b3da:	4604      	mov	r4, r0
 801b3dc:	2800      	cmp	r0, #0
 801b3de:	f000 80a3 	beq.w	801b528 <rcl_expand_topic_name+0x28c>
 801b3e2:	464a      	mov	r2, r9
 801b3e4:	4628      	mov	r0, r5
 801b3e6:	ab16      	add	r3, sp, #88	; 0x58
 801b3e8:	4621      	mov	r1, r4
 801b3ea:	f7fc fad3 	bl	8017994 <rcutils_repl_str>
 801b3ee:	991a      	ldr	r1, [sp, #104]	; 0x68
 801b3f0:	4605      	mov	r5, r0
 801b3f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b3f4:	4620      	mov	r0, r4
 801b3f6:	4798      	blx	r3
 801b3f8:	4650      	mov	r0, sl
 801b3fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b3fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 801b3fe:	4798      	blx	r3
 801b400:	2d00      	cmp	r5, #0
 801b402:	d06c      	beq.n	801b4de <rcl_expand_topic_name+0x242>
 801b404:	217b      	movs	r1, #123	; 0x7b
 801b406:	4628      	mov	r0, r5
 801b408:	f001 f95c 	bl	801c6c4 <strchr>
 801b40c:	46aa      	mov	sl, r5
 801b40e:	4604      	mov	r4, r0
 801b410:	e7b9      	b.n	801b386 <rcl_expand_topic_name+0xea>
 801b412:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801b416:	1c61      	adds	r1, r4, #1
 801b418:	4640      	mov	r0, r8
 801b41a:	f7fc fcdd 	bl	8017dd8 <rcutils_string_map_getn>
 801b41e:	4681      	mov	r9, r0
 801b420:	2800      	cmp	r0, #0
 801b422:	d1cf      	bne.n	801b3c4 <rcl_expand_topic_name+0x128>
 801b424:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b426:	aa18      	add	r2, sp, #96	; 0x60
 801b428:	2569      	movs	r5, #105	; 0x69
 801b42a:	6018      	str	r0, [r3, #0]
 801b42c:	ab16      	add	r3, sp, #88	; 0x58
 801b42e:	ca07      	ldmia	r2, {r0, r1, r2}
 801b430:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b434:	4631      	mov	r1, r6
 801b436:	4620      	mov	r0, r4
 801b438:	cb0c      	ldmia	r3, {r2, r3}
 801b43a:	f7fc fbd1 	bl	8017be0 <rcutils_strndup>
 801b43e:	991a      	ldr	r1, [sp, #104]	; 0x68
 801b440:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b442:	4798      	blx	r3
 801b444:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b446:	991a      	ldr	r1, [sp, #104]	; 0x68
 801b448:	4650      	mov	r0, sl
 801b44a:	4798      	blx	r3
 801b44c:	e777      	b.n	801b33e <rcl_expand_topic_name+0xa2>
 801b44e:	46b9      	mov	r9, r7
 801b450:	e7b8      	b.n	801b3c4 <rcl_expand_topic_name+0x128>
 801b452:	25ca      	movs	r5, #202	; 0xca
 801b454:	e773      	b.n	801b33e <rcl_expand_topic_name+0xa2>
 801b456:	9e07      	ldr	r6, [sp, #28]
 801b458:	4630      	mov	r0, r6
 801b45a:	f7e4 ff51 	bl	8000300 <strlen>
 801b45e:	4a3b      	ldr	r2, [pc, #236]	; (801b54c <rcl_expand_topic_name+0x2b0>)
 801b460:	4b3b      	ldr	r3, [pc, #236]	; (801b550 <rcl_expand_topic_name+0x2b4>)
 801b462:	9603      	str	r6, [sp, #12]
 801b464:	2801      	cmp	r0, #1
 801b466:	bf18      	it	ne
 801b468:	4613      	movne	r3, r2
 801b46a:	9704      	str	r7, [sp, #16]
 801b46c:	9302      	str	r3, [sp, #8]
 801b46e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801b470:	9300      	str	r3, [sp, #0]
 801b472:	1c63      	adds	r3, r4, #1
 801b474:	9305      	str	r3, [sp, #20]
 801b476:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801b47a:	9301      	str	r3, [sp, #4]
 801b47c:	ab16      	add	r3, sp, #88	; 0x58
 801b47e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b480:	f7fc fa4e 	bl	8017920 <rcutils_format_string_limit>
 801b484:	4606      	mov	r6, r0
 801b486:	b350      	cbz	r0, 801b4de <rcl_expand_topic_name+0x242>
 801b488:	f1b9 0f00 	cmp.w	r9, #0
 801b48c:	d005      	beq.n	801b49a <rcl_expand_topic_name+0x1fe>
 801b48e:	217b      	movs	r1, #123	; 0x7b
 801b490:	46b2      	mov	sl, r6
 801b492:	f001 f917 	bl	801c6c4 <strchr>
 801b496:	4681      	mov	r9, r0
 801b498:	e76e      	b.n	801b378 <rcl_expand_topic_name+0xdc>
 801b49a:	7833      	ldrb	r3, [r6, #0]
 801b49c:	2b2f      	cmp	r3, #47	; 0x2f
 801b49e:	d01b      	beq.n	801b4d8 <rcl_expand_topic_name+0x23c>
 801b4a0:	9c07      	ldr	r4, [sp, #28]
 801b4a2:	4620      	mov	r0, r4
 801b4a4:	f7e4 ff2c 	bl	8000300 <strlen>
 801b4a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801b4ac:	4a29      	ldr	r2, [pc, #164]	; (801b554 <rcl_expand_topic_name+0x2b8>)
 801b4ae:	9301      	str	r3, [sp, #4]
 801b4b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801b4b2:	9604      	str	r6, [sp, #16]
 801b4b4:	9300      	str	r3, [sp, #0]
 801b4b6:	4b28      	ldr	r3, [pc, #160]	; (801b558 <rcl_expand_topic_name+0x2bc>)
 801b4b8:	9403      	str	r4, [sp, #12]
 801b4ba:	2801      	cmp	r0, #1
 801b4bc:	bf18      	it	ne
 801b4be:	4613      	movne	r3, r2
 801b4c0:	9302      	str	r3, [sp, #8]
 801b4c2:	ab16      	add	r3, sp, #88	; 0x58
 801b4c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b4c6:	f7fc fa2b 	bl	8017920 <rcutils_format_string_limit>
 801b4ca:	4603      	mov	r3, r0
 801b4cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b4ce:	4630      	mov	r0, r6
 801b4d0:	991a      	ldr	r1, [sp, #104]	; 0x68
 801b4d2:	461e      	mov	r6, r3
 801b4d4:	4790      	blx	r2
 801b4d6:	b116      	cbz	r6, 801b4de <rcl_expand_topic_name+0x242>
 801b4d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b4da:	601e      	str	r6, [r3, #0]
 801b4dc:	e72f      	b.n	801b33e <rcl_expand_topic_name+0xa2>
 801b4de:	2300      	movs	r3, #0
 801b4e0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801b4e2:	250a      	movs	r5, #10
 801b4e4:	6013      	str	r3, [r2, #0]
 801b4e6:	e72a      	b.n	801b33e <rcl_expand_topic_name+0xa2>
 801b4e8:	4653      	mov	r3, sl
 801b4ea:	4656      	mov	r6, sl
 801b4ec:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	d1d2      	bne.n	801b49a <rcl_expand_topic_name+0x1fe>
 801b4f4:	7823      	ldrb	r3, [r4, #0]
 801b4f6:	2b2f      	cmp	r3, #47	; 0x2f
 801b4f8:	d01e      	beq.n	801b538 <rcl_expand_topic_name+0x29c>
 801b4fa:	9e07      	ldr	r6, [sp, #28]
 801b4fc:	4630      	mov	r0, r6
 801b4fe:	f7e4 feff 	bl	8000300 <strlen>
 801b502:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b504:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801b508:	9603      	str	r6, [sp, #12]
 801b50a:	9404      	str	r4, [sp, #16]
 801b50c:	e9cd 2300 	strd	r2, r3, [sp]
 801b510:	4a10      	ldr	r2, [pc, #64]	; (801b554 <rcl_expand_topic_name+0x2b8>)
 801b512:	4b11      	ldr	r3, [pc, #68]	; (801b558 <rcl_expand_topic_name+0x2bc>)
 801b514:	2801      	cmp	r0, #1
 801b516:	bf18      	it	ne
 801b518:	4613      	movne	r3, r2
 801b51a:	9302      	str	r3, [sp, #8]
 801b51c:	ab16      	add	r3, sp, #88	; 0x58
 801b51e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b520:	f7fc f9fe 	bl	8017920 <rcutils_format_string_limit>
 801b524:	4606      	mov	r6, r0
 801b526:	e7d6      	b.n	801b4d6 <rcl_expand_topic_name+0x23a>
 801b528:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 801b52c:	4650      	mov	r0, sl
 801b52e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b530:	6014      	str	r4, [r2, #0]
 801b532:	250a      	movs	r5, #10
 801b534:	4798      	blx	r3
 801b536:	e702      	b.n	801b33e <rcl_expand_topic_name+0xa2>
 801b538:	2300      	movs	r3, #0
 801b53a:	461e      	mov	r6, r3
 801b53c:	e7cc      	b.n	801b4d8 <rcl_expand_topic_name+0x23c>
 801b53e:	bf00      	nop
 801b540:	0801f3d0 	.word	0x0801f3d0
 801b544:	0801f3d8 	.word	0x0801f3d8
 801b548:	0801f3e0 	.word	0x0801f3e0
 801b54c:	0801f3c8 	.word	0x0801f3c8
 801b550:	0801e528 	.word	0x0801e528
 801b554:	0801e9c8 	.word	0x0801e9c8
 801b558:	0801e538 	.word	0x0801e538

0801b55c <rcl_get_default_topic_name_substitutions>:
 801b55c:	2800      	cmp	r0, #0
 801b55e:	bf0c      	ite	eq
 801b560:	200b      	moveq	r0, #11
 801b562:	2000      	movne	r0, #0
 801b564:	4770      	bx	lr
 801b566:	bf00      	nop

0801b568 <rcl_get_zero_initialized_guard_condition>:
 801b568:	4a03      	ldr	r2, [pc, #12]	; (801b578 <rcl_get_zero_initialized_guard_condition+0x10>)
 801b56a:	4603      	mov	r3, r0
 801b56c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b570:	e883 0003 	stmia.w	r3, {r0, r1}
 801b574:	4618      	mov	r0, r3
 801b576:	4770      	bx	lr
 801b578:	0801f3ec 	.word	0x0801f3ec

0801b57c <rcl_guard_condition_init>:
 801b57c:	b082      	sub	sp, #8
 801b57e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b580:	b087      	sub	sp, #28
 801b582:	4604      	mov	r4, r0
 801b584:	460d      	mov	r5, r1
 801b586:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 801b58a:	f10d 0c04 	add.w	ip, sp, #4
 801b58e:	e9ce 2300 	strd	r2, r3, [lr]
 801b592:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b596:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b59a:	f8de 3000 	ldr.w	r3, [lr]
 801b59e:	a801      	add	r0, sp, #4
 801b5a0:	f8cc 3000 	str.w	r3, [ip]
 801b5a4:	f7f2 fb10 	bl	800dbc8 <rcutils_allocator_is_valid>
 801b5a8:	b354      	cbz	r4, 801b600 <rcl_guard_condition_init+0x84>
 801b5aa:	f080 0301 	eor.w	r3, r0, #1
 801b5ae:	b2db      	uxtb	r3, r3
 801b5b0:	bb33      	cbnz	r3, 801b600 <rcl_guard_condition_init+0x84>
 801b5b2:	6866      	ldr	r6, [r4, #4]
 801b5b4:	b9ee      	cbnz	r6, 801b5f2 <rcl_guard_condition_init+0x76>
 801b5b6:	b31d      	cbz	r5, 801b600 <rcl_guard_condition_init+0x84>
 801b5b8:	4628      	mov	r0, r5
 801b5ba:	f7f8 ffa5 	bl	8014508 <rcl_context_is_valid>
 801b5be:	b308      	cbz	r0, 801b604 <rcl_guard_condition_init+0x88>
 801b5c0:	9b01      	ldr	r3, [sp, #4]
 801b5c2:	201c      	movs	r0, #28
 801b5c4:	9905      	ldr	r1, [sp, #20]
 801b5c6:	4798      	blx	r3
 801b5c8:	4607      	mov	r7, r0
 801b5ca:	6060      	str	r0, [r4, #4]
 801b5cc:	b310      	cbz	r0, 801b614 <rcl_guard_condition_init+0x98>
 801b5ce:	6828      	ldr	r0, [r5, #0]
 801b5d0:	3028      	adds	r0, #40	; 0x28
 801b5d2:	f000 fbbb 	bl	801bd4c <rmw_create_guard_condition>
 801b5d6:	6038      	str	r0, [r7, #0]
 801b5d8:	6860      	ldr	r0, [r4, #4]
 801b5da:	6807      	ldr	r7, [r0, #0]
 801b5dc:	b1a7      	cbz	r7, 801b608 <rcl_guard_condition_init+0x8c>
 801b5de:	2301      	movs	r3, #1
 801b5e0:	ac01      	add	r4, sp, #4
 801b5e2:	f100 0708 	add.w	r7, r0, #8
 801b5e6:	7103      	strb	r3, [r0, #4]
 801b5e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b5ea:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801b5ec:	6823      	ldr	r3, [r4, #0]
 801b5ee:	603b      	str	r3, [r7, #0]
 801b5f0:	e000      	b.n	801b5f4 <rcl_guard_condition_init+0x78>
 801b5f2:	2664      	movs	r6, #100	; 0x64
 801b5f4:	4630      	mov	r0, r6
 801b5f6:	b007      	add	sp, #28
 801b5f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b5fc:	b002      	add	sp, #8
 801b5fe:	4770      	bx	lr
 801b600:	260b      	movs	r6, #11
 801b602:	e7f7      	b.n	801b5f4 <rcl_guard_condition_init+0x78>
 801b604:	2665      	movs	r6, #101	; 0x65
 801b606:	e7f5      	b.n	801b5f4 <rcl_guard_condition_init+0x78>
 801b608:	9b02      	ldr	r3, [sp, #8]
 801b60a:	2601      	movs	r6, #1
 801b60c:	9905      	ldr	r1, [sp, #20]
 801b60e:	4798      	blx	r3
 801b610:	6067      	str	r7, [r4, #4]
 801b612:	e7ef      	b.n	801b5f4 <rcl_guard_condition_init+0x78>
 801b614:	260a      	movs	r6, #10
 801b616:	e7ed      	b.n	801b5f4 <rcl_guard_condition_init+0x78>

0801b618 <rcl_guard_condition_init_from_rmw>:
 801b618:	b082      	sub	sp, #8
 801b61a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b61e:	b086      	sub	sp, #24
 801b620:	4604      	mov	r4, r0
 801b622:	460e      	mov	r6, r1
 801b624:	4615      	mov	r5, r2
 801b626:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801b62a:	f10d 0e04 	add.w	lr, sp, #4
 801b62e:	f84c 3f04 	str.w	r3, [ip, #4]!
 801b632:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b636:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b63a:	f8dc 3000 	ldr.w	r3, [ip]
 801b63e:	a801      	add	r0, sp, #4
 801b640:	f8ce 3000 	str.w	r3, [lr]
 801b644:	f7f2 fac0 	bl	800dbc8 <rcutils_allocator_is_valid>
 801b648:	f080 0301 	eor.w	r3, r0, #1
 801b64c:	b2db      	uxtb	r3, r3
 801b64e:	bb3b      	cbnz	r3, 801b6a0 <rcl_guard_condition_init_from_rmw+0x88>
 801b650:	b334      	cbz	r4, 801b6a0 <rcl_guard_condition_init_from_rmw+0x88>
 801b652:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801b656:	f1b8 0f00 	cmp.w	r8, #0
 801b65a:	d11a      	bne.n	801b692 <rcl_guard_condition_init_from_rmw+0x7a>
 801b65c:	b305      	cbz	r5, 801b6a0 <rcl_guard_condition_init_from_rmw+0x88>
 801b65e:	4628      	mov	r0, r5
 801b660:	f7f8 ff52 	bl	8014508 <rcl_context_is_valid>
 801b664:	b1f0      	cbz	r0, 801b6a4 <rcl_guard_condition_init_from_rmw+0x8c>
 801b666:	9b01      	ldr	r3, [sp, #4]
 801b668:	201c      	movs	r0, #28
 801b66a:	9905      	ldr	r1, [sp, #20]
 801b66c:	4798      	blx	r3
 801b66e:	4607      	mov	r7, r0
 801b670:	6060      	str	r0, [r4, #4]
 801b672:	b320      	cbz	r0, 801b6be <rcl_guard_condition_init_from_rmw+0xa6>
 801b674:	b1c6      	cbz	r6, 801b6a8 <rcl_guard_condition_init_from_rmw+0x90>
 801b676:	6006      	str	r6, [r0, #0]
 801b678:	f880 8004 	strb.w	r8, [r0, #4]
 801b67c:	ac01      	add	r4, sp, #4
 801b67e:	f107 0c08 	add.w	ip, r7, #8
 801b682:	2500      	movs	r5, #0
 801b684:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b686:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b68a:	6823      	ldr	r3, [r4, #0]
 801b68c:	f8cc 3000 	str.w	r3, [ip]
 801b690:	e000      	b.n	801b694 <rcl_guard_condition_init_from_rmw+0x7c>
 801b692:	2564      	movs	r5, #100	; 0x64
 801b694:	4628      	mov	r0, r5
 801b696:	b006      	add	sp, #24
 801b698:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b69c:	b002      	add	sp, #8
 801b69e:	4770      	bx	lr
 801b6a0:	250b      	movs	r5, #11
 801b6a2:	e7f7      	b.n	801b694 <rcl_guard_condition_init_from_rmw+0x7c>
 801b6a4:	2565      	movs	r5, #101	; 0x65
 801b6a6:	e7f5      	b.n	801b694 <rcl_guard_condition_init_from_rmw+0x7c>
 801b6a8:	6828      	ldr	r0, [r5, #0]
 801b6aa:	3028      	adds	r0, #40	; 0x28
 801b6ac:	f000 fb4e 	bl	801bd4c <rmw_create_guard_condition>
 801b6b0:	6038      	str	r0, [r7, #0]
 801b6b2:	6867      	ldr	r7, [r4, #4]
 801b6b4:	683e      	ldr	r6, [r7, #0]
 801b6b6:	b126      	cbz	r6, 801b6c2 <rcl_guard_condition_init_from_rmw+0xaa>
 801b6b8:	2301      	movs	r3, #1
 801b6ba:	713b      	strb	r3, [r7, #4]
 801b6bc:	e7de      	b.n	801b67c <rcl_guard_condition_init_from_rmw+0x64>
 801b6be:	250a      	movs	r5, #10
 801b6c0:	e7e8      	b.n	801b694 <rcl_guard_condition_init_from_rmw+0x7c>
 801b6c2:	9b02      	ldr	r3, [sp, #8]
 801b6c4:	4638      	mov	r0, r7
 801b6c6:	9905      	ldr	r1, [sp, #20]
 801b6c8:	2501      	movs	r5, #1
 801b6ca:	4798      	blx	r3
 801b6cc:	6066      	str	r6, [r4, #4]
 801b6ce:	e7e1      	b.n	801b694 <rcl_guard_condition_init_from_rmw+0x7c>

0801b6d0 <rcl_guard_condition_fini>:
 801b6d0:	b570      	push	{r4, r5, r6, lr}
 801b6d2:	b082      	sub	sp, #8
 801b6d4:	b1f0      	cbz	r0, 801b714 <rcl_guard_condition_fini+0x44>
 801b6d6:	6843      	ldr	r3, [r0, #4]
 801b6d8:	4604      	mov	r4, r0
 801b6da:	b163      	cbz	r3, 801b6f6 <rcl_guard_condition_fini+0x26>
 801b6dc:	6818      	ldr	r0, [r3, #0]
 801b6de:	68de      	ldr	r6, [r3, #12]
 801b6e0:	6999      	ldr	r1, [r3, #24]
 801b6e2:	b160      	cbz	r0, 801b6fe <rcl_guard_condition_fini+0x2e>
 801b6e4:	791d      	ldrb	r5, [r3, #4]
 801b6e6:	b965      	cbnz	r5, 801b702 <rcl_guard_condition_fini+0x32>
 801b6e8:	4618      	mov	r0, r3
 801b6ea:	47b0      	blx	r6
 801b6ec:	2300      	movs	r3, #0
 801b6ee:	4628      	mov	r0, r5
 801b6f0:	6063      	str	r3, [r4, #4]
 801b6f2:	b002      	add	sp, #8
 801b6f4:	bd70      	pop	{r4, r5, r6, pc}
 801b6f6:	461d      	mov	r5, r3
 801b6f8:	4628      	mov	r0, r5
 801b6fa:	b002      	add	sp, #8
 801b6fc:	bd70      	pop	{r4, r5, r6, pc}
 801b6fe:	4605      	mov	r5, r0
 801b700:	e7f2      	b.n	801b6e8 <rcl_guard_condition_fini+0x18>
 801b702:	9101      	str	r1, [sp, #4]
 801b704:	f000 fb38 	bl	801bd78 <rmw_destroy_guard_condition>
 801b708:	1e05      	subs	r5, r0, #0
 801b70a:	6863      	ldr	r3, [r4, #4]
 801b70c:	9901      	ldr	r1, [sp, #4]
 801b70e:	bf18      	it	ne
 801b710:	2501      	movne	r5, #1
 801b712:	e7e9      	b.n	801b6e8 <rcl_guard_condition_fini+0x18>
 801b714:	250b      	movs	r5, #11
 801b716:	4628      	mov	r0, r5
 801b718:	b002      	add	sp, #8
 801b71a:	bd70      	pop	{r4, r5, r6, pc}

0801b71c <rcl_guard_condition_get_default_options>:
 801b71c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b71e:	b087      	sub	sp, #28
 801b720:	4606      	mov	r6, r0
 801b722:	4c0b      	ldr	r4, [pc, #44]	; (801b750 <rcl_guard_condition_get_default_options+0x34>)
 801b724:	4668      	mov	r0, sp
 801b726:	f7f2 fa41 	bl	800dbac <rcutils_get_default_allocator>
 801b72a:	46ee      	mov	lr, sp
 801b72c:	46a4      	mov	ip, r4
 801b72e:	4625      	mov	r5, r4
 801b730:	4634      	mov	r4, r6
 801b732:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b736:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b73a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b73c:	f8de 7000 	ldr.w	r7, [lr]
 801b740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b742:	4630      	mov	r0, r6
 801b744:	f8cc 7000 	str.w	r7, [ip]
 801b748:	6027      	str	r7, [r4, #0]
 801b74a:	b007      	add	sp, #28
 801b74c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b74e:	bf00      	nop
 801b750:	20010b58 	.word	0x20010b58

0801b754 <rcl_trigger_guard_condition>:
 801b754:	b148      	cbz	r0, 801b76a <rcl_trigger_guard_condition+0x16>
 801b756:	b508      	push	{r3, lr}
 801b758:	6843      	ldr	r3, [r0, #4]
 801b75a:	b143      	cbz	r3, 801b76e <rcl_trigger_guard_condition+0x1a>
 801b75c:	6818      	ldr	r0, [r3, #0]
 801b75e:	f000 fb1f 	bl	801bda0 <rmw_trigger_guard_condition>
 801b762:	3800      	subs	r0, #0
 801b764:	bf18      	it	ne
 801b766:	2001      	movne	r0, #1
 801b768:	bd08      	pop	{r3, pc}
 801b76a:	200b      	movs	r0, #11
 801b76c:	4770      	bx	lr
 801b76e:	200b      	movs	r0, #11
 801b770:	bd08      	pop	{r3, pc}
 801b772:	bf00      	nop

0801b774 <rcl_guard_condition_get_rmw_handle>:
 801b774:	b110      	cbz	r0, 801b77c <rcl_guard_condition_get_rmw_handle+0x8>
 801b776:	6840      	ldr	r0, [r0, #4]
 801b778:	b100      	cbz	r0, 801b77c <rcl_guard_condition_get_rmw_handle+0x8>
 801b77a:	6800      	ldr	r0, [r0, #0]
 801b77c:	4770      	bx	lr
 801b77e:	bf00      	nop

0801b780 <rcl_validate_topic_name>:
 801b780:	2800      	cmp	r0, #0
 801b782:	f000 8089 	beq.w	801b898 <rcl_validate_topic_name+0x118>
 801b786:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b78a:	460e      	mov	r6, r1
 801b78c:	2900      	cmp	r1, #0
 801b78e:	f000 8085 	beq.w	801b89c <rcl_validate_topic_name+0x11c>
 801b792:	4604      	mov	r4, r0
 801b794:	4617      	mov	r7, r2
 801b796:	f7e4 fdb3 	bl	8000300 <strlen>
 801b79a:	b1b0      	cbz	r0, 801b7ca <rcl_validate_topic_name+0x4a>
 801b79c:	f894 e000 	ldrb.w	lr, [r4]
 801b7a0:	f8df c160 	ldr.w	ip, [pc, #352]	; 801b904 <rcl_validate_topic_name+0x184>
 801b7a4:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801b7a8:	f013 0304 	ands.w	r3, r3, #4
 801b7ac:	d139      	bne.n	801b822 <rcl_validate_topic_name+0xa2>
 801b7ae:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801b7b2:	f814 2008 	ldrb.w	r2, [r4, r8]
 801b7b6:	2a2f      	cmp	r2, #47	; 0x2f
 801b7b8:	d10f      	bne.n	801b7da <rcl_validate_topic_name+0x5a>
 801b7ba:	2202      	movs	r2, #2
 801b7bc:	6032      	str	r2, [r6, #0]
 801b7be:	b3a7      	cbz	r7, 801b82a <rcl_validate_topic_name+0xaa>
 801b7c0:	4618      	mov	r0, r3
 801b7c2:	f8c7 8000 	str.w	r8, [r7]
 801b7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7ca:	2301      	movs	r3, #1
 801b7cc:	6033      	str	r3, [r6, #0]
 801b7ce:	b367      	cbz	r7, 801b82a <rcl_validate_topic_name+0xaa>
 801b7d0:	2300      	movs	r3, #0
 801b7d2:	4618      	mov	r0, r3
 801b7d4:	603b      	str	r3, [r7, #0]
 801b7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7da:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 801b7de:	461d      	mov	r5, r3
 801b7e0:	4619      	mov	r1, r3
 801b7e2:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801b7e6:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 801b7ea:	f1b9 0f09 	cmp.w	r9, #9
 801b7ee:	d91f      	bls.n	801b830 <rcl_validate_topic_name+0xb0>
 801b7f0:	f022 0920 	bic.w	r9, r2, #32
 801b7f4:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 801b7f8:	f1b9 0f19 	cmp.w	r9, #25
 801b7fc:	d918      	bls.n	801b830 <rcl_validate_topic_name+0xb0>
 801b7fe:	2a5f      	cmp	r2, #95	; 0x5f
 801b800:	d024      	beq.n	801b84c <rcl_validate_topic_name+0xcc>
 801b802:	2a2f      	cmp	r2, #47	; 0x2f
 801b804:	d058      	beq.n	801b8b8 <rcl_validate_topic_name+0x138>
 801b806:	2a7e      	cmp	r2, #126	; 0x7e
 801b808:	d04a      	beq.n	801b8a0 <rcl_validate_topic_name+0x120>
 801b80a:	2a7b      	cmp	r2, #123	; 0x7b
 801b80c:	d05b      	beq.n	801b8c6 <rcl_validate_topic_name+0x146>
 801b80e:	2a7d      	cmp	r2, #125	; 0x7d
 801b810:	d169      	bne.n	801b8e6 <rcl_validate_topic_name+0x166>
 801b812:	2d00      	cmp	r5, #0
 801b814:	d15c      	bne.n	801b8d0 <rcl_validate_topic_name+0x150>
 801b816:	2305      	movs	r3, #5
 801b818:	6033      	str	r3, [r6, #0]
 801b81a:	b137      	cbz	r7, 801b82a <rcl_validate_topic_name+0xaa>
 801b81c:	2000      	movs	r0, #0
 801b81e:	6039      	str	r1, [r7, #0]
 801b820:	e7d9      	b.n	801b7d6 <rcl_validate_topic_name+0x56>
 801b822:	2304      	movs	r3, #4
 801b824:	6033      	str	r3, [r6, #0]
 801b826:	2f00      	cmp	r7, #0
 801b828:	d1d2      	bne.n	801b7d0 <rcl_validate_topic_name+0x50>
 801b82a:	2000      	movs	r0, #0
 801b82c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b830:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b834:	0752      	lsls	r2, r2, #29
 801b836:	d509      	bpl.n	801b84c <rcl_validate_topic_name+0xcc>
 801b838:	2900      	cmp	r1, #0
 801b83a:	bf0c      	ite	eq
 801b83c:	2200      	moveq	r2, #0
 801b83e:	f005 0201 	andne.w	r2, r5, #1
 801b842:	b11a      	cbz	r2, 801b84c <rcl_validate_topic_name+0xcc>
 801b844:	1e4d      	subs	r5, r1, #1
 801b846:	429d      	cmp	r5, r3
 801b848:	d031      	beq.n	801b8ae <rcl_validate_topic_name+0x12e>
 801b84a:	4615      	mov	r5, r2
 801b84c:	3101      	adds	r1, #1
 801b84e:	4288      	cmp	r0, r1
 801b850:	d1c7      	bne.n	801b7e2 <rcl_validate_topic_name+0x62>
 801b852:	2d00      	cmp	r5, #0
 801b854:	d142      	bne.n	801b8dc <rcl_validate_topic_name+0x15c>
 801b856:	4628      	mov	r0, r5
 801b858:	2301      	movs	r3, #1
 801b85a:	e00c      	b.n	801b876 <rcl_validate_topic_name+0xf6>
 801b85c:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 801b860:	d101      	bne.n	801b866 <rcl_validate_topic_name+0xe6>
 801b862:	2801      	cmp	r0, #1
 801b864:	d047      	beq.n	801b8f6 <rcl_validate_topic_name+0x176>
 801b866:	1c5a      	adds	r2, r3, #1
 801b868:	428b      	cmp	r3, r1
 801b86a:	f100 0001 	add.w	r0, r0, #1
 801b86e:	f104 0401 	add.w	r4, r4, #1
 801b872:	4613      	mov	r3, r2
 801b874:	d22e      	bcs.n	801b8d4 <rcl_validate_topic_name+0x154>
 801b876:	4580      	cmp	r8, r0
 801b878:	d0f5      	beq.n	801b866 <rcl_validate_topic_name+0xe6>
 801b87a:	7822      	ldrb	r2, [r4, #0]
 801b87c:	2a2f      	cmp	r2, #47	; 0x2f
 801b87e:	d1ed      	bne.n	801b85c <rcl_validate_topic_name+0xdc>
 801b880:	7862      	ldrb	r2, [r4, #1]
 801b882:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b886:	0752      	lsls	r2, r2, #29
 801b888:	d5ed      	bpl.n	801b866 <rcl_validate_topic_name+0xe6>
 801b88a:	2204      	movs	r2, #4
 801b88c:	6032      	str	r2, [r6, #0]
 801b88e:	2f00      	cmp	r7, #0
 801b890:	d0cb      	beq.n	801b82a <rcl_validate_topic_name+0xaa>
 801b892:	2000      	movs	r0, #0
 801b894:	603b      	str	r3, [r7, #0]
 801b896:	e79e      	b.n	801b7d6 <rcl_validate_topic_name+0x56>
 801b898:	200b      	movs	r0, #11
 801b89a:	4770      	bx	lr
 801b89c:	200b      	movs	r0, #11
 801b89e:	e79a      	b.n	801b7d6 <rcl_validate_topic_name+0x56>
 801b8a0:	2900      	cmp	r1, #0
 801b8a2:	d0d3      	beq.n	801b84c <rcl_validate_topic_name+0xcc>
 801b8a4:	2306      	movs	r3, #6
 801b8a6:	6033      	str	r3, [r6, #0]
 801b8a8:	2f00      	cmp	r7, #0
 801b8aa:	d1b7      	bne.n	801b81c <rcl_validate_topic_name+0x9c>
 801b8ac:	e7bd      	b.n	801b82a <rcl_validate_topic_name+0xaa>
 801b8ae:	2309      	movs	r3, #9
 801b8b0:	6033      	str	r3, [r6, #0]
 801b8b2:	2f00      	cmp	r7, #0
 801b8b4:	d1b2      	bne.n	801b81c <rcl_validate_topic_name+0x9c>
 801b8b6:	e7b8      	b.n	801b82a <rcl_validate_topic_name+0xaa>
 801b8b8:	2d00      	cmp	r5, #0
 801b8ba:	d0c7      	beq.n	801b84c <rcl_validate_topic_name+0xcc>
 801b8bc:	2308      	movs	r3, #8
 801b8be:	6033      	str	r3, [r6, #0]
 801b8c0:	2f00      	cmp	r7, #0
 801b8c2:	d1ab      	bne.n	801b81c <rcl_validate_topic_name+0x9c>
 801b8c4:	e7b1      	b.n	801b82a <rcl_validate_topic_name+0xaa>
 801b8c6:	2d00      	cmp	r5, #0
 801b8c8:	d1f8      	bne.n	801b8bc <rcl_validate_topic_name+0x13c>
 801b8ca:	460b      	mov	r3, r1
 801b8cc:	2501      	movs	r5, #1
 801b8ce:	e7bd      	b.n	801b84c <rcl_validate_topic_name+0xcc>
 801b8d0:	2500      	movs	r5, #0
 801b8d2:	e7bb      	b.n	801b84c <rcl_validate_topic_name+0xcc>
 801b8d4:	2300      	movs	r3, #0
 801b8d6:	4618      	mov	r0, r3
 801b8d8:	6033      	str	r3, [r6, #0]
 801b8da:	e77c      	b.n	801b7d6 <rcl_validate_topic_name+0x56>
 801b8dc:	2205      	movs	r2, #5
 801b8de:	6032      	str	r2, [r6, #0]
 801b8e0:	2f00      	cmp	r7, #0
 801b8e2:	d1d6      	bne.n	801b892 <rcl_validate_topic_name+0x112>
 801b8e4:	e7a1      	b.n	801b82a <rcl_validate_topic_name+0xaa>
 801b8e6:	2d00      	cmp	r5, #0
 801b8e8:	bf14      	ite	ne
 801b8ea:	2308      	movne	r3, #8
 801b8ec:	2303      	moveq	r3, #3
 801b8ee:	6033      	str	r3, [r6, #0]
 801b8f0:	2f00      	cmp	r7, #0
 801b8f2:	d193      	bne.n	801b81c <rcl_validate_topic_name+0x9c>
 801b8f4:	e799      	b.n	801b82a <rcl_validate_topic_name+0xaa>
 801b8f6:	2307      	movs	r3, #7
 801b8f8:	6033      	str	r3, [r6, #0]
 801b8fa:	2f00      	cmp	r7, #0
 801b8fc:	d095      	beq.n	801b82a <rcl_validate_topic_name+0xaa>
 801b8fe:	2301      	movs	r3, #1
 801b900:	e7c7      	b.n	801b892 <rcl_validate_topic_name+0x112>
 801b902:	bf00      	nop
 801b904:	0801f5b0 	.word	0x0801f5b0

0801b908 <rcutils_split>:
 801b908:	b082      	sub	sp, #8
 801b90a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b90e:	b08d      	sub	sp, #52	; 0x34
 801b910:	ac16      	add	r4, sp, #88	; 0x58
 801b912:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801b914:	e884 000c 	stmia.w	r4, {r2, r3}
 801b918:	2f00      	cmp	r7, #0
 801b91a:	f000 80a8 	beq.w	801ba6e <rcutils_split+0x166>
 801b91e:	4605      	mov	r5, r0
 801b920:	2800      	cmp	r0, #0
 801b922:	d07e      	beq.n	801ba22 <rcutils_split+0x11a>
 801b924:	7803      	ldrb	r3, [r0, #0]
 801b926:	2b00      	cmp	r3, #0
 801b928:	d07b      	beq.n	801ba22 <rcutils_split+0x11a>
 801b92a:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 801b92e:	460e      	mov	r6, r1
 801b930:	9203      	str	r2, [sp, #12]
 801b932:	f107 0408 	add.w	r4, r7, #8
 801b936:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 801b93a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b93e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b940:	4628      	mov	r0, r5
 801b942:	f8c4 b000 	str.w	fp, [r4]
 801b946:	f7e4 fcdb 	bl	8000300 <strlen>
 801b94a:	782c      	ldrb	r4, [r5, #0]
 801b94c:	182b      	adds	r3, r5, r0
 801b94e:	1ba4      	subs	r4, r4, r6
 801b950:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801b954:	fab4 f484 	clz	r4, r4
 801b958:	42b3      	cmp	r3, r6
 801b95a:	bf14      	ite	ne
 801b95c:	4680      	movne	r8, r0
 801b95e:	f1a0 0801 	subeq.w	r8, r0, #1
 801b962:	2001      	movs	r0, #1
 801b964:	0964      	lsrs	r4, r4, #5
 801b966:	6038      	str	r0, [r7, #0]
 801b968:	4544      	cmp	r4, r8
 801b96a:	d26b      	bcs.n	801ba44 <rcutils_split+0x13c>
 801b96c:	192b      	adds	r3, r5, r4
 801b96e:	eb05 0108 	add.w	r1, r5, r8
 801b972:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b976:	42b2      	cmp	r2, r6
 801b978:	d101      	bne.n	801b97e <rcutils_split+0x76>
 801b97a:	3001      	adds	r0, #1
 801b97c:	6038      	str	r0, [r7, #0]
 801b97e:	4299      	cmp	r1, r3
 801b980:	d1f7      	bne.n	801b972 <rcutils_split+0x6a>
 801b982:	9b03      	ldr	r3, [sp, #12]
 801b984:	0080      	lsls	r0, r0, #2
 801b986:	4659      	mov	r1, fp
 801b988:	4798      	blx	r3
 801b98a:	4603      	mov	r3, r0
 801b98c:	6078      	str	r0, [r7, #4]
 801b98e:	2800      	cmp	r0, #0
 801b990:	d05f      	beq.n	801ba52 <rcutils_split+0x14a>
 801b992:	f04f 0a00 	mov.w	sl, #0
 801b996:	46a1      	mov	r9, r4
 801b998:	e002      	b.n	801b9a0 <rcutils_split+0x98>
 801b99a:	3401      	adds	r4, #1
 801b99c:	45a0      	cmp	r8, r4
 801b99e:	d922      	bls.n	801b9e6 <rcutils_split+0xde>
 801b9a0:	5d2a      	ldrb	r2, [r5, r4]
 801b9a2:	42b2      	cmp	r2, r6
 801b9a4:	d1f9      	bne.n	801b99a <rcutils_split+0x92>
 801b9a6:	45a1      	cmp	r9, r4
 801b9a8:	eba4 0209 	sub.w	r2, r4, r9
 801b9ac:	d032      	beq.n	801ba14 <rcutils_split+0x10c>
 801b9ae:	4659      	mov	r1, fp
 801b9b0:	1c90      	adds	r0, r2, #2
 801b9b2:	9302      	str	r3, [sp, #8]
 801b9b4:	9b03      	ldr	r3, [sp, #12]
 801b9b6:	9201      	str	r2, [sp, #4]
 801b9b8:	4798      	blx	r3
 801b9ba:	9a01      	ldr	r2, [sp, #4]
 801b9bc:	9b02      	ldr	r3, [sp, #8]
 801b9be:	1c51      	adds	r1, r2, #1
 801b9c0:	687a      	ldr	r2, [r7, #4]
 801b9c2:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 801b9c6:	eb05 0309 	add.w	r3, r5, r9
 801b9ca:	f852 002a 	ldr.w	r0, [r2, sl, lsl #2]
 801b9ce:	2800      	cmp	r0, #0
 801b9d0:	d04f      	beq.n	801ba72 <rcutils_split+0x16a>
 801b9d2:	4a2b      	ldr	r2, [pc, #172]	; (801ba80 <rcutils_split+0x178>)
 801b9d4:	f10a 0a01 	add.w	sl, sl, #1
 801b9d8:	f000 fd92 	bl	801c500 <sniprintf>
 801b9dc:	687b      	ldr	r3, [r7, #4]
 801b9de:	3401      	adds	r4, #1
 801b9e0:	45a0      	cmp	r8, r4
 801b9e2:	46a1      	mov	r9, r4
 801b9e4:	d8dc      	bhi.n	801b9a0 <rcutils_split+0x98>
 801b9e6:	45a1      	cmp	r9, r4
 801b9e8:	d039      	beq.n	801ba5e <rcutils_split+0x156>
 801b9ea:	eba4 0409 	sub.w	r4, r4, r9
 801b9ee:	4659      	mov	r1, fp
 801b9f0:	9301      	str	r3, [sp, #4]
 801b9f2:	1ca0      	adds	r0, r4, #2
 801b9f4:	9b03      	ldr	r3, [sp, #12]
 801b9f6:	4798      	blx	r3
 801b9f8:	9b01      	ldr	r3, [sp, #4]
 801b9fa:	4a21      	ldr	r2, [pc, #132]	; (801ba80 <rcutils_split+0x178>)
 801b9fc:	1c61      	adds	r1, r4, #1
 801b9fe:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 801ba02:	eb05 0309 	add.w	r3, r5, r9
 801ba06:	6878      	ldr	r0, [r7, #4]
 801ba08:	2500      	movs	r5, #0
 801ba0a:	f850 002a 	ldr.w	r0, [r0, sl, lsl #2]
 801ba0e:	f000 fd77 	bl	801c500 <sniprintf>
 801ba12:	e011      	b.n	801ba38 <rcutils_split+0x130>
 801ba14:	683a      	ldr	r2, [r7, #0]
 801ba16:	2100      	movs	r1, #0
 801ba18:	3a01      	subs	r2, #1
 801ba1a:	603a      	str	r2, [r7, #0]
 801ba1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801ba20:	e7dd      	b.n	801b9de <rcutils_split+0xd6>
 801ba22:	ac04      	add	r4, sp, #16
 801ba24:	a804      	add	r0, sp, #16
 801ba26:	f000 f82d 	bl	801ba84 <rcutils_get_zero_initialized_string_array>
 801ba2a:	2500      	movs	r5, #0
 801ba2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ba2e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801ba30:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801ba34:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801ba38:	4628      	mov	r0, r5
 801ba3a:	b00d      	add	sp, #52	; 0x34
 801ba3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba40:	b002      	add	sp, #8
 801ba42:	4770      	bx	lr
 801ba44:	9b03      	ldr	r3, [sp, #12]
 801ba46:	4659      	mov	r1, fp
 801ba48:	2004      	movs	r0, #4
 801ba4a:	4798      	blx	r3
 801ba4c:	4603      	mov	r3, r0
 801ba4e:	6078      	str	r0, [r7, #4]
 801ba50:	b928      	cbnz	r0, 801ba5e <rcutils_split+0x156>
 801ba52:	4638      	mov	r0, r7
 801ba54:	f000 f834 	bl	801bac0 <rcutils_string_array_fini>
 801ba58:	b970      	cbnz	r0, 801ba78 <rcutils_split+0x170>
 801ba5a:	2502      	movs	r5, #2
 801ba5c:	e7ec      	b.n	801ba38 <rcutils_split+0x130>
 801ba5e:	683a      	ldr	r2, [r7, #0]
 801ba60:	2100      	movs	r1, #0
 801ba62:	3a01      	subs	r2, #1
 801ba64:	460d      	mov	r5, r1
 801ba66:	603a      	str	r2, [r7, #0]
 801ba68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801ba6c:	e7e4      	b.n	801ba38 <rcutils_split+0x130>
 801ba6e:	250b      	movs	r5, #11
 801ba70:	e7e2      	b.n	801ba38 <rcutils_split+0x130>
 801ba72:	f8c7 a000 	str.w	sl, [r7]
 801ba76:	e7ec      	b.n	801ba52 <rcutils_split+0x14a>
 801ba78:	2502      	movs	r5, #2
 801ba7a:	f7f2 f8c9 	bl	800dc10 <rcutils_reset_error>
 801ba7e:	e7db      	b.n	801ba38 <rcutils_split+0x130>
 801ba80:	0801e52c 	.word	0x0801e52c

0801ba84 <rcutils_get_zero_initialized_string_array>:
 801ba84:	b570      	push	{r4, r5, r6, lr}
 801ba86:	b086      	sub	sp, #24
 801ba88:	4606      	mov	r6, r0
 801ba8a:	4c0c      	ldr	r4, [pc, #48]	; (801babc <rcutils_get_zero_initialized_string_array+0x38>)
 801ba8c:	4668      	mov	r0, sp
 801ba8e:	f7f2 f861 	bl	800db54 <rcutils_get_zero_initialized_allocator>
 801ba92:	46ee      	mov	lr, sp
 801ba94:	f104 0508 	add.w	r5, r4, #8
 801ba98:	46a4      	mov	ip, r4
 801ba9a:	4634      	mov	r4, r6
 801ba9c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801baa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801baa2:	f8de 3000 	ldr.w	r3, [lr]
 801baa6:	602b      	str	r3, [r5, #0]
 801baa8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801baac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801baae:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801bab2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801bab6:	4630      	mov	r0, r6
 801bab8:	b006      	add	sp, #24
 801baba:	bd70      	pop	{r4, r5, r6, pc}
 801babc:	20010b6c 	.word	0x20010b6c

0801bac0 <rcutils_string_array_fini>:
 801bac0:	b328      	cbz	r0, 801bb0e <rcutils_string_array_fini+0x4e>
 801bac2:	b570      	push	{r4, r5, r6, lr}
 801bac4:	4604      	mov	r4, r0
 801bac6:	6840      	ldr	r0, [r0, #4]
 801bac8:	b1e0      	cbz	r0, 801bb04 <rcutils_string_array_fini+0x44>
 801baca:	f104 0008 	add.w	r0, r4, #8
 801bace:	f7f2 f87b 	bl	800dbc8 <rcutils_allocator_is_valid>
 801bad2:	b1c0      	cbz	r0, 801bb06 <rcutils_string_array_fini+0x46>
 801bad4:	6823      	ldr	r3, [r4, #0]
 801bad6:	b1c3      	cbz	r3, 801bb0a <rcutils_string_array_fini+0x4a>
 801bad8:	2500      	movs	r5, #0
 801bada:	6860      	ldr	r0, [r4, #4]
 801badc:	462e      	mov	r6, r5
 801bade:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801bae2:	68e3      	ldr	r3, [r4, #12]
 801bae4:	69a1      	ldr	r1, [r4, #24]
 801bae6:	4798      	blx	r3
 801bae8:	e9d4 3000 	ldrd	r3, r0, [r4]
 801baec:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801baf0:	3501      	adds	r5, #1
 801baf2:	429d      	cmp	r5, r3
 801baf4:	d3f3      	bcc.n	801bade <rcutils_string_array_fini+0x1e>
 801baf6:	68e3      	ldr	r3, [r4, #12]
 801baf8:	69a1      	ldr	r1, [r4, #24]
 801bafa:	4798      	blx	r3
 801bafc:	2300      	movs	r3, #0
 801bafe:	4618      	mov	r0, r3
 801bb00:	e9c4 3300 	strd	r3, r3, [r4]
 801bb04:	bd70      	pop	{r4, r5, r6, pc}
 801bb06:	200b      	movs	r0, #11
 801bb08:	bd70      	pop	{r4, r5, r6, pc}
 801bb0a:	6860      	ldr	r0, [r4, #4]
 801bb0c:	e7f3      	b.n	801baf6 <rcutils_string_array_fini+0x36>
 801bb0e:	200b      	movs	r0, #11
 801bb10:	4770      	bx	lr
 801bb12:	bf00      	nop

0801bb14 <rmw_get_zero_initialized_discovery_options>:
 801bb14:	b510      	push	{r4, lr}
 801bb16:	4604      	mov	r4, r0
 801bb18:	2220      	movs	r2, #32
 801bb1a:	2100      	movs	r1, #0
 801bb1c:	f000 fdca 	bl	801c6b4 <memset>
 801bb20:	4620      	mov	r0, r4
 801bb22:	bd10      	pop	{r4, pc}

0801bb24 <rmw_discovery_options_init>:
 801bb24:	b570      	push	{r4, r5, r6, lr}
 801bb26:	b318      	cbz	r0, 801bb70 <rmw_discovery_options_init+0x4c>
 801bb28:	4604      	mov	r4, r0
 801bb2a:	4610      	mov	r0, r2
 801bb2c:	460e      	mov	r6, r1
 801bb2e:	4615      	mov	r5, r2
 801bb30:	f7f2 f84a 	bl	800dbc8 <rcutils_allocator_is_valid>
 801bb34:	b1e0      	cbz	r0, 801bb70 <rmw_discovery_options_init+0x4c>
 801bb36:	68a3      	ldr	r3, [r4, #8]
 801bb38:	b9d3      	cbnz	r3, 801bb70 <rmw_discovery_options_init+0x4c>
 801bb3a:	6863      	ldr	r3, [r4, #4]
 801bb3c:	b9c3      	cbnz	r3, 801bb70 <rmw_discovery_options_init+0x4c>
 801bb3e:	7823      	ldrb	r3, [r4, #0]
 801bb40:	b90b      	cbnz	r3, 801bb46 <rmw_discovery_options_init+0x22>
 801bb42:	2302      	movs	r3, #2
 801bb44:	7023      	strb	r3, [r4, #0]
 801bb46:	b1a6      	cbz	r6, 801bb72 <rmw_discovery_options_init+0x4e>
 801bb48:	f44f 7180 	mov.w	r1, #256	; 0x100
 801bb4c:	4630      	mov	r0, r6
 801bb4e:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 801bb52:	4798      	blx	r3
 801bb54:	6060      	str	r0, [r4, #4]
 801bb56:	b170      	cbz	r0, 801bb76 <rmw_discovery_options_init+0x52>
 801bb58:	f104 0c0c 	add.w	ip, r4, #12
 801bb5c:	60a6      	str	r6, [r4, #8]
 801bb5e:	2600      	movs	r6, #0
 801bb60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bb62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bb66:	682b      	ldr	r3, [r5, #0]
 801bb68:	4630      	mov	r0, r6
 801bb6a:	f8cc 3000 	str.w	r3, [ip]
 801bb6e:	bd70      	pop	{r4, r5, r6, pc}
 801bb70:	260b      	movs	r6, #11
 801bb72:	4630      	mov	r0, r6
 801bb74:	bd70      	pop	{r4, r5, r6, pc}
 801bb76:	260a      	movs	r6, #10
 801bb78:	e7fb      	b.n	801bb72 <rmw_discovery_options_init+0x4e>
 801bb7a:	bf00      	nop

0801bb7c <on_status>:
 801bb7c:	b082      	sub	sp, #8
 801bb7e:	b002      	add	sp, #8
 801bb80:	4770      	bx	lr
 801bb82:	bf00      	nop

0801bb84 <on_topic>:
 801bb84:	4a23      	ldr	r2, [pc, #140]	; (801bc14 <on_topic+0x90>)
 801bb86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb8a:	6812      	ldr	r2, [r2, #0]
 801bb8c:	b094      	sub	sp, #80	; 0x50
 801bb8e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801bb90:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801bb94:	9113      	str	r1, [sp, #76]	; 0x4c
 801bb96:	9312      	str	r3, [sp, #72]	; 0x48
 801bb98:	b3c2      	cbz	r2, 801bc0c <on_topic+0x88>
 801bb9a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801bb9e:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801bba2:	e001      	b.n	801bba8 <on_topic+0x24>
 801bba4:	6852      	ldr	r2, [r2, #4]
 801bba6:	b38a      	cbz	r2, 801bc0c <on_topic+0x88>
 801bba8:	6894      	ldr	r4, [r2, #8]
 801bbaa:	8aa3      	ldrh	r3, [r4, #20]
 801bbac:	428b      	cmp	r3, r1
 801bbae:	d1f9      	bne.n	801bba4 <on_topic+0x20>
 801bbb0:	7da3      	ldrb	r3, [r4, #22]
 801bbb2:	4283      	cmp	r3, r0
 801bbb4:	d1f6      	bne.n	801bba4 <on_topic+0x20>
 801bbb6:	2248      	movs	r2, #72	; 0x48
 801bbb8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801bbbc:	4668      	mov	r0, sp
 801bbbe:	f000 feaa 	bl	801c916 <memcpy>
 801bbc2:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801bbc6:	4620      	mov	r0, r4
 801bbc8:	cb0c      	ldmia	r3, {r2, r3}
 801bbca:	f7f2 fc39 	bl	800e440 <rmw_uxrce_get_static_input_buffer_for_entity>
 801bbce:	4607      	mov	r7, r0
 801bbd0:	b1e0      	cbz	r0, 801bc0c <on_topic+0x88>
 801bbd2:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801bbd6:	462a      	mov	r2, r5
 801bbd8:	4630      	mov	r0, r6
 801bbda:	f108 0110 	add.w	r1, r8, #16
 801bbde:	f7f3 f8f5 	bl	800edcc <ucdr_deserialize_array_uint8_t>
 801bbe2:	b930      	cbnz	r0, 801bbf2 <on_topic+0x6e>
 801bbe4:	4639      	mov	r1, r7
 801bbe6:	480c      	ldr	r0, [pc, #48]	; (801bc18 <on_topic+0x94>)
 801bbe8:	b014      	add	sp, #80	; 0x50
 801bbea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bbee:	f7fc bb59 	b.w	80182a4 <put_memory>
 801bbf2:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801bbf6:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801bbfa:	f7fd fd7f 	bl	80196fc <rmw_uros_epoch_nanos>
 801bbfe:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 801bc02:	2305      	movs	r3, #5
 801bc04:	e942 0102 	strd	r0, r1, [r2, #-8]
 801bc08:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801bc0c:	b014      	add	sp, #80	; 0x50
 801bc0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc12:	bf00      	nop
 801bc14:	2001038c 	.word	0x2001038c
 801bc18:	2001037c 	.word	0x2001037c

0801bc1c <on_request>:
 801bc1c:	4824      	ldr	r0, [pc, #144]	; (801bcb0 <on_request+0x94>)
 801bc1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc22:	6800      	ldr	r0, [r0, #0]
 801bc24:	b094      	sub	sp, #80	; 0x50
 801bc26:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801bc28:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801bc2c:	9113      	str	r1, [sp, #76]	; 0x4c
 801bc2e:	2800      	cmp	r0, #0
 801bc30:	d03b      	beq.n	801bcaa <on_request+0x8e>
 801bc32:	461d      	mov	r5, r3
 801bc34:	e001      	b.n	801bc3a <on_request+0x1e>
 801bc36:	6840      	ldr	r0, [r0, #4]
 801bc38:	b3b8      	cbz	r0, 801bcaa <on_request+0x8e>
 801bc3a:	6884      	ldr	r4, [r0, #8]
 801bc3c:	8b21      	ldrh	r1, [r4, #24]
 801bc3e:	4291      	cmp	r1, r2
 801bc40:	d1f9      	bne.n	801bc36 <on_request+0x1a>
 801bc42:	2248      	movs	r2, #72	; 0x48
 801bc44:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801bc48:	4668      	mov	r0, sp
 801bc4a:	f000 fe64 	bl	801c916 <memcpy>
 801bc4e:	f104 0320 	add.w	r3, r4, #32
 801bc52:	4620      	mov	r0, r4
 801bc54:	cb0c      	ldmia	r3, {r2, r3}
 801bc56:	f7f2 fbf3 	bl	800e440 <rmw_uxrce_get_static_input_buffer_for_entity>
 801bc5a:	4680      	mov	r8, r0
 801bc5c:	b328      	cbz	r0, 801bcaa <on_request+0x8e>
 801bc5e:	4630      	mov	r0, r6
 801bc60:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801bc64:	463a      	mov	r2, r7
 801bc66:	f106 0110 	add.w	r1, r6, #16
 801bc6a:	f7f3 f8af 	bl	800edcc <ucdr_deserialize_array_uint8_t>
 801bc6e:	b930      	cbnz	r0, 801bc7e <on_request+0x62>
 801bc70:	4641      	mov	r1, r8
 801bc72:	4810      	ldr	r0, [pc, #64]	; (801bcb4 <on_request+0x98>)
 801bc74:	b014      	add	sp, #80	; 0x50
 801bc76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bc7a:	f7fc bb13 	b.w	80182a4 <put_memory>
 801bc7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bc80:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 801bc84:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801bc88:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801bc8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bc90:	e895 0003 	ldmia.w	r5, {r0, r1}
 801bc94:	e88c 0003 	stmia.w	ip, {r0, r1}
 801bc98:	f7fd fd30 	bl	80196fc <rmw_uros_epoch_nanos>
 801bc9c:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801bca0:	2303      	movs	r3, #3
 801bca2:	e942 0102 	strd	r0, r1, [r2, #-8]
 801bca6:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801bcaa:	b014      	add	sp, #80	; 0x50
 801bcac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bcb0:	2001035c 	.word	0x2001035c
 801bcb4:	2001037c 	.word	0x2001037c

0801bcb8 <on_reply>:
 801bcb8:	4822      	ldr	r0, [pc, #136]	; (801bd44 <on_reply+0x8c>)
 801bcba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bcbe:	6800      	ldr	r0, [r0, #0]
 801bcc0:	b094      	sub	sp, #80	; 0x50
 801bcc2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801bcc4:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801bcc8:	9113      	str	r1, [sp, #76]	; 0x4c
 801bcca:	b3b8      	cbz	r0, 801bd3c <on_reply+0x84>
 801bccc:	461d      	mov	r5, r3
 801bcce:	e001      	b.n	801bcd4 <on_reply+0x1c>
 801bcd0:	6840      	ldr	r0, [r0, #4]
 801bcd2:	b398      	cbz	r0, 801bd3c <on_reply+0x84>
 801bcd4:	6884      	ldr	r4, [r0, #8]
 801bcd6:	8b21      	ldrh	r1, [r4, #24]
 801bcd8:	4291      	cmp	r1, r2
 801bcda:	d1f9      	bne.n	801bcd0 <on_reply+0x18>
 801bcdc:	2248      	movs	r2, #72	; 0x48
 801bcde:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801bce2:	4668      	mov	r0, sp
 801bce4:	f000 fe17 	bl	801c916 <memcpy>
 801bce8:	f104 0320 	add.w	r3, r4, #32
 801bcec:	4620      	mov	r0, r4
 801bcee:	cb0c      	ldmia	r3, {r2, r3}
 801bcf0:	f7f2 fba6 	bl	800e440 <rmw_uxrce_get_static_input_buffer_for_entity>
 801bcf4:	4680      	mov	r8, r0
 801bcf6:	b308      	cbz	r0, 801bd3c <on_reply+0x84>
 801bcf8:	4630      	mov	r0, r6
 801bcfa:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801bcfe:	463a      	mov	r2, r7
 801bd00:	f106 0110 	add.w	r1, r6, #16
 801bd04:	f7f3 f862 	bl	800edcc <ucdr_deserialize_array_uint8_t>
 801bd08:	b930      	cbnz	r0, 801bd18 <on_reply+0x60>
 801bd0a:	4641      	mov	r1, r8
 801bd0c:	480e      	ldr	r0, [pc, #56]	; (801bd48 <on_reply+0x90>)
 801bd0e:	b014      	add	sp, #80	; 0x50
 801bd10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bd14:	f7fc bac6 	b.w	80182a4 <put_memory>
 801bd18:	2200      	movs	r2, #0
 801bd1a:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801bd1e:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801bd22:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 801bd26:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 801bd2a:	f7fd fce7 	bl	80196fc <rmw_uros_epoch_nanos>
 801bd2e:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801bd32:	2304      	movs	r3, #4
 801bd34:	e942 0102 	strd	r0, r1, [r2, #-8]
 801bd38:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801bd3c:	b014      	add	sp, #80	; 0x50
 801bd3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd42:	bf00      	nop
 801bd44:	2000b9a8 	.word	0x2000b9a8
 801bd48:	2001037c 	.word	0x2001037c

0801bd4c <rmw_create_guard_condition>:
 801bd4c:	b538      	push	{r3, r4, r5, lr}
 801bd4e:	4605      	mov	r5, r0
 801bd50:	4808      	ldr	r0, [pc, #32]	; (801bd74 <rmw_create_guard_condition+0x28>)
 801bd52:	f7fc fa97 	bl	8018284 <get_memory>
 801bd56:	4603      	mov	r3, r0
 801bd58:	b148      	cbz	r0, 801bd6e <rmw_create_guard_condition+0x22>
 801bd5a:	6884      	ldr	r4, [r0, #8]
 801bd5c:	2300      	movs	r3, #0
 801bd5e:	61e5      	str	r5, [r4, #28]
 801bd60:	7423      	strb	r3, [r4, #16]
 801bd62:	f7fc fb15 	bl	8018390 <rmw_get_implementation_identifier>
 801bd66:	f104 0314 	add.w	r3, r4, #20
 801bd6a:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801bd6e:	4618      	mov	r0, r3
 801bd70:	bd38      	pop	{r3, r4, r5, pc}
 801bd72:	bf00      	nop
 801bd74:	2001031c 	.word	0x2001031c

0801bd78 <rmw_destroy_guard_condition>:
 801bd78:	b508      	push	{r3, lr}
 801bd7a:	4b08      	ldr	r3, [pc, #32]	; (801bd9c <rmw_destroy_guard_condition+0x24>)
 801bd7c:	6819      	ldr	r1, [r3, #0]
 801bd7e:	b911      	cbnz	r1, 801bd86 <rmw_destroy_guard_condition+0xe>
 801bd80:	e00a      	b.n	801bd98 <rmw_destroy_guard_condition+0x20>
 801bd82:	6849      	ldr	r1, [r1, #4]
 801bd84:	b141      	cbz	r1, 801bd98 <rmw_destroy_guard_condition+0x20>
 801bd86:	688b      	ldr	r3, [r1, #8]
 801bd88:	3314      	adds	r3, #20
 801bd8a:	4298      	cmp	r0, r3
 801bd8c:	d1f9      	bne.n	801bd82 <rmw_destroy_guard_condition+0xa>
 801bd8e:	4803      	ldr	r0, [pc, #12]	; (801bd9c <rmw_destroy_guard_condition+0x24>)
 801bd90:	f7fc fa88 	bl	80182a4 <put_memory>
 801bd94:	2000      	movs	r0, #0
 801bd96:	bd08      	pop	{r3, pc}
 801bd98:	2001      	movs	r0, #1
 801bd9a:	bd08      	pop	{r3, pc}
 801bd9c:	2001031c 	.word	0x2001031c

0801bda0 <rmw_trigger_guard_condition>:
 801bda0:	b160      	cbz	r0, 801bdbc <rmw_trigger_guard_condition+0x1c>
 801bda2:	b510      	push	{r4, lr}
 801bda4:	4604      	mov	r4, r0
 801bda6:	6800      	ldr	r0, [r0, #0]
 801bda8:	f7f2 fd5e 	bl	800e868 <is_uxrce_rmw_identifier_valid>
 801bdac:	b908      	cbnz	r0, 801bdb2 <rmw_trigger_guard_condition+0x12>
 801bdae:	2001      	movs	r0, #1
 801bdb0:	bd10      	pop	{r4, pc}
 801bdb2:	6863      	ldr	r3, [r4, #4]
 801bdb4:	2201      	movs	r2, #1
 801bdb6:	2000      	movs	r0, #0
 801bdb8:	741a      	strb	r2, [r3, #16]
 801bdba:	bd10      	pop	{r4, pc}
 801bdbc:	2001      	movs	r0, #1
 801bdbe:	4770      	bx	lr

0801bdc0 <expf>:
 801bdc0:	ee10 2a10 	vmov	r2, s0
 801bdc4:	f240 412a 	movw	r1, #1066	; 0x42a
 801bdc8:	f3c2 530a 	ubfx	r3, r2, #20, #11
 801bdcc:	428b      	cmp	r3, r1
 801bdce:	b430      	push	{r4, r5}
 801bdd0:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801bdd4:	d92a      	bls.n	801be2c <expf+0x6c>
 801bdd6:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 801bdda:	d058      	beq.n	801be8e <expf+0xce>
 801bddc:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801bde0:	d303      	bcc.n	801bdea <expf+0x2a>
 801bde2:	ee30 0a00 	vadd.f32	s0, s0, s0
 801bde6:	bc30      	pop	{r4, r5}
 801bde8:	4770      	bx	lr
 801bdea:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801be94 <expf+0xd4>
 801bdee:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801bdf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdf6:	dd03      	ble.n	801be00 <expf+0x40>
 801bdf8:	bc30      	pop	{r4, r5}
 801bdfa:	2000      	movs	r0, #0
 801bdfc:	f000 b876 	b.w	801beec <__math_oflowf>
 801be00:	eddf 7a25 	vldr	s15, [pc, #148]	; 801be98 <expf+0xd8>
 801be04:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801be08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be0c:	d503      	bpl.n	801be16 <expf+0x56>
 801be0e:	bc30      	pop	{r4, r5}
 801be10:	2000      	movs	r0, #0
 801be12:	f000 b85f 	b.w	801bed4 <__math_uflowf>
 801be16:	eddf 7a21 	vldr	s15, [pc, #132]	; 801be9c <expf+0xdc>
 801be1a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801be1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be22:	d503      	bpl.n	801be2c <expf+0x6c>
 801be24:	bc30      	pop	{r4, r5}
 801be26:	2000      	movs	r0, #0
 801be28:	f000 b85a 	b.w	801bee0 <__math_may_uflowf>
 801be2c:	4b1c      	ldr	r3, [pc, #112]	; (801bea0 <expf+0xe0>)
 801be2e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801be32:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 801be36:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 801be3a:	eeb0 7b44 	vmov.f64	d7, d4
 801be3e:	eea5 7b06 	vfma.f64	d7, d5, d6
 801be42:	ee17 0a10 	vmov	r0, s14
 801be46:	ee37 7b44 	vsub.f64	d7, d7, d4
 801be4a:	f000 021f 	and.w	r2, r0, #31
 801be4e:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801be52:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 801be56:	ee27 4b07 	vmul.f64	d4, d7, d7
 801be5a:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 801be5e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 801be62:	eea5 6b07 	vfma.f64	d6, d5, d7
 801be66:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 801be6a:	684d      	ldr	r5, [r1, #4]
 801be6c:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 801be70:	2100      	movs	r1, #0
 801be72:	190a      	adds	r2, r1, r4
 801be74:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 801be78:	eea5 0b07 	vfma.f64	d0, d5, d7
 801be7c:	ec43 2b17 	vmov	d7, r2, r3
 801be80:	eea6 0b04 	vfma.f64	d0, d6, d4
 801be84:	ee20 0b07 	vmul.f64	d0, d0, d7
 801be88:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801be8c:	e7ab      	b.n	801bde6 <expf+0x26>
 801be8e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 801bea4 <expf+0xe4>
 801be92:	e7a8      	b.n	801bde6 <expf+0x26>
 801be94:	42b17217 	.word	0x42b17217
 801be98:	c2cff1b4 	.word	0xc2cff1b4
 801be9c:	c2ce8ecf 	.word	0xc2ce8ecf
 801bea0:	0801f3f8 	.word	0x0801f3f8
 801bea4:	00000000 	.word	0x00000000

0801bea8 <with_errnof>:
 801bea8:	b513      	push	{r0, r1, r4, lr}
 801beaa:	4604      	mov	r4, r0
 801beac:	ed8d 0a01 	vstr	s0, [sp, #4]
 801beb0:	f000 fcfc 	bl	801c8ac <__errno>
 801beb4:	ed9d 0a01 	vldr	s0, [sp, #4]
 801beb8:	6004      	str	r4, [r0, #0]
 801beba:	b002      	add	sp, #8
 801bebc:	bd10      	pop	{r4, pc}

0801bebe <xflowf>:
 801bebe:	b130      	cbz	r0, 801bece <xflowf+0x10>
 801bec0:	eef1 7a40 	vneg.f32	s15, s0
 801bec4:	ee27 0a80 	vmul.f32	s0, s15, s0
 801bec8:	2022      	movs	r0, #34	; 0x22
 801beca:	f7ff bfed 	b.w	801bea8 <with_errnof>
 801bece:	eef0 7a40 	vmov.f32	s15, s0
 801bed2:	e7f7      	b.n	801bec4 <xflowf+0x6>

0801bed4 <__math_uflowf>:
 801bed4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801bedc <__math_uflowf+0x8>
 801bed8:	f7ff bff1 	b.w	801bebe <xflowf>
 801bedc:	10000000 	.word	0x10000000

0801bee0 <__math_may_uflowf>:
 801bee0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801bee8 <__math_may_uflowf+0x8>
 801bee4:	f7ff bfeb 	b.w	801bebe <xflowf>
 801bee8:	1a200000 	.word	0x1a200000

0801beec <__math_oflowf>:
 801beec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801bef4 <__math_oflowf+0x8>
 801bef0:	f7ff bfe5 	b.w	801bebe <xflowf>
 801bef4:	70000000 	.word	0x70000000

0801bef8 <calloc>:
 801bef8:	4b02      	ldr	r3, [pc, #8]	; (801bf04 <calloc+0xc>)
 801befa:	460a      	mov	r2, r1
 801befc:	4601      	mov	r1, r0
 801befe:	6818      	ldr	r0, [r3, #0]
 801bf00:	f000 b802 	b.w	801bf08 <_calloc_r>
 801bf04:	200021d8 	.word	0x200021d8

0801bf08 <_calloc_r>:
 801bf08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bf0a:	fba1 2402 	umull	r2, r4, r1, r2
 801bf0e:	b94c      	cbnz	r4, 801bf24 <_calloc_r+0x1c>
 801bf10:	4611      	mov	r1, r2
 801bf12:	9201      	str	r2, [sp, #4]
 801bf14:	f000 f886 	bl	801c024 <_malloc_r>
 801bf18:	9a01      	ldr	r2, [sp, #4]
 801bf1a:	4605      	mov	r5, r0
 801bf1c:	b930      	cbnz	r0, 801bf2c <_calloc_r+0x24>
 801bf1e:	4628      	mov	r0, r5
 801bf20:	b003      	add	sp, #12
 801bf22:	bd30      	pop	{r4, r5, pc}
 801bf24:	220c      	movs	r2, #12
 801bf26:	6002      	str	r2, [r0, #0]
 801bf28:	2500      	movs	r5, #0
 801bf2a:	e7f8      	b.n	801bf1e <_calloc_r+0x16>
 801bf2c:	4621      	mov	r1, r4
 801bf2e:	f000 fbc1 	bl	801c6b4 <memset>
 801bf32:	e7f4      	b.n	801bf1e <_calloc_r+0x16>

0801bf34 <getenv>:
 801bf34:	b507      	push	{r0, r1, r2, lr}
 801bf36:	4b04      	ldr	r3, [pc, #16]	; (801bf48 <getenv+0x14>)
 801bf38:	4601      	mov	r1, r0
 801bf3a:	aa01      	add	r2, sp, #4
 801bf3c:	6818      	ldr	r0, [r3, #0]
 801bf3e:	f000 f805 	bl	801bf4c <_findenv_r>
 801bf42:	b003      	add	sp, #12
 801bf44:	f85d fb04 	ldr.w	pc, [sp], #4
 801bf48:	200021d8 	.word	0x200021d8

0801bf4c <_findenv_r>:
 801bf4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf50:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801bfc0 <_findenv_r+0x74>
 801bf54:	4607      	mov	r7, r0
 801bf56:	4689      	mov	r9, r1
 801bf58:	4616      	mov	r6, r2
 801bf5a:	f000 fd09 	bl	801c970 <__env_lock>
 801bf5e:	f8da 4000 	ldr.w	r4, [sl]
 801bf62:	b134      	cbz	r4, 801bf72 <_findenv_r+0x26>
 801bf64:	464b      	mov	r3, r9
 801bf66:	4698      	mov	r8, r3
 801bf68:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bf6c:	b13a      	cbz	r2, 801bf7e <_findenv_r+0x32>
 801bf6e:	2a3d      	cmp	r2, #61	; 0x3d
 801bf70:	d1f9      	bne.n	801bf66 <_findenv_r+0x1a>
 801bf72:	4638      	mov	r0, r7
 801bf74:	f000 fd02 	bl	801c97c <__env_unlock>
 801bf78:	2000      	movs	r0, #0
 801bf7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf7e:	eba8 0809 	sub.w	r8, r8, r9
 801bf82:	46a3      	mov	fp, r4
 801bf84:	f854 0b04 	ldr.w	r0, [r4], #4
 801bf88:	2800      	cmp	r0, #0
 801bf8a:	d0f2      	beq.n	801bf72 <_findenv_r+0x26>
 801bf8c:	4642      	mov	r2, r8
 801bf8e:	4649      	mov	r1, r9
 801bf90:	f000 fba5 	bl	801c6de <strncmp>
 801bf94:	2800      	cmp	r0, #0
 801bf96:	d1f4      	bne.n	801bf82 <_findenv_r+0x36>
 801bf98:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801bf9c:	eb03 0508 	add.w	r5, r3, r8
 801bfa0:	f813 3008 	ldrb.w	r3, [r3, r8]
 801bfa4:	2b3d      	cmp	r3, #61	; 0x3d
 801bfa6:	d1ec      	bne.n	801bf82 <_findenv_r+0x36>
 801bfa8:	f8da 3000 	ldr.w	r3, [sl]
 801bfac:	ebab 0303 	sub.w	r3, fp, r3
 801bfb0:	109b      	asrs	r3, r3, #2
 801bfb2:	4638      	mov	r0, r7
 801bfb4:	6033      	str	r3, [r6, #0]
 801bfb6:	f000 fce1 	bl	801c97c <__env_unlock>
 801bfba:	1c68      	adds	r0, r5, #1
 801bfbc:	e7dd      	b.n	801bf7a <_findenv_r+0x2e>
 801bfbe:	bf00      	nop
 801bfc0:	20000000 	.word	0x20000000

0801bfc4 <malloc>:
 801bfc4:	4b02      	ldr	r3, [pc, #8]	; (801bfd0 <malloc+0xc>)
 801bfc6:	4601      	mov	r1, r0
 801bfc8:	6818      	ldr	r0, [r3, #0]
 801bfca:	f000 b82b 	b.w	801c024 <_malloc_r>
 801bfce:	bf00      	nop
 801bfd0:	200021d8 	.word	0x200021d8

0801bfd4 <free>:
 801bfd4:	4b02      	ldr	r3, [pc, #8]	; (801bfe0 <free+0xc>)
 801bfd6:	4601      	mov	r1, r0
 801bfd8:	6818      	ldr	r0, [r3, #0]
 801bfda:	f000 bcd5 	b.w	801c988 <_free_r>
 801bfde:	bf00      	nop
 801bfe0:	200021d8 	.word	0x200021d8

0801bfe4 <sbrk_aligned>:
 801bfe4:	b570      	push	{r4, r5, r6, lr}
 801bfe6:	4e0e      	ldr	r6, [pc, #56]	; (801c020 <sbrk_aligned+0x3c>)
 801bfe8:	460c      	mov	r4, r1
 801bfea:	6831      	ldr	r1, [r6, #0]
 801bfec:	4605      	mov	r5, r0
 801bfee:	b911      	cbnz	r1, 801bff6 <sbrk_aligned+0x12>
 801bff0:	f000 fc3a 	bl	801c868 <_sbrk_r>
 801bff4:	6030      	str	r0, [r6, #0]
 801bff6:	4621      	mov	r1, r4
 801bff8:	4628      	mov	r0, r5
 801bffa:	f000 fc35 	bl	801c868 <_sbrk_r>
 801bffe:	1c43      	adds	r3, r0, #1
 801c000:	d00a      	beq.n	801c018 <sbrk_aligned+0x34>
 801c002:	1cc4      	adds	r4, r0, #3
 801c004:	f024 0403 	bic.w	r4, r4, #3
 801c008:	42a0      	cmp	r0, r4
 801c00a:	d007      	beq.n	801c01c <sbrk_aligned+0x38>
 801c00c:	1a21      	subs	r1, r4, r0
 801c00e:	4628      	mov	r0, r5
 801c010:	f000 fc2a 	bl	801c868 <_sbrk_r>
 801c014:	3001      	adds	r0, #1
 801c016:	d101      	bne.n	801c01c <sbrk_aligned+0x38>
 801c018:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801c01c:	4620      	mov	r0, r4
 801c01e:	bd70      	pop	{r4, r5, r6, pc}
 801c020:	20010b8c 	.word	0x20010b8c

0801c024 <_malloc_r>:
 801c024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c028:	1ccd      	adds	r5, r1, #3
 801c02a:	f025 0503 	bic.w	r5, r5, #3
 801c02e:	3508      	adds	r5, #8
 801c030:	2d0c      	cmp	r5, #12
 801c032:	bf38      	it	cc
 801c034:	250c      	movcc	r5, #12
 801c036:	2d00      	cmp	r5, #0
 801c038:	4607      	mov	r7, r0
 801c03a:	db01      	blt.n	801c040 <_malloc_r+0x1c>
 801c03c:	42a9      	cmp	r1, r5
 801c03e:	d905      	bls.n	801c04c <_malloc_r+0x28>
 801c040:	230c      	movs	r3, #12
 801c042:	603b      	str	r3, [r7, #0]
 801c044:	2600      	movs	r6, #0
 801c046:	4630      	mov	r0, r6
 801c048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c04c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801c120 <_malloc_r+0xfc>
 801c050:	f000 f868 	bl	801c124 <__malloc_lock>
 801c054:	f8d8 3000 	ldr.w	r3, [r8]
 801c058:	461c      	mov	r4, r3
 801c05a:	bb5c      	cbnz	r4, 801c0b4 <_malloc_r+0x90>
 801c05c:	4629      	mov	r1, r5
 801c05e:	4638      	mov	r0, r7
 801c060:	f7ff ffc0 	bl	801bfe4 <sbrk_aligned>
 801c064:	1c43      	adds	r3, r0, #1
 801c066:	4604      	mov	r4, r0
 801c068:	d155      	bne.n	801c116 <_malloc_r+0xf2>
 801c06a:	f8d8 4000 	ldr.w	r4, [r8]
 801c06e:	4626      	mov	r6, r4
 801c070:	2e00      	cmp	r6, #0
 801c072:	d145      	bne.n	801c100 <_malloc_r+0xdc>
 801c074:	2c00      	cmp	r4, #0
 801c076:	d048      	beq.n	801c10a <_malloc_r+0xe6>
 801c078:	6823      	ldr	r3, [r4, #0]
 801c07a:	4631      	mov	r1, r6
 801c07c:	4638      	mov	r0, r7
 801c07e:	eb04 0903 	add.w	r9, r4, r3
 801c082:	f000 fbf1 	bl	801c868 <_sbrk_r>
 801c086:	4581      	cmp	r9, r0
 801c088:	d13f      	bne.n	801c10a <_malloc_r+0xe6>
 801c08a:	6821      	ldr	r1, [r4, #0]
 801c08c:	1a6d      	subs	r5, r5, r1
 801c08e:	4629      	mov	r1, r5
 801c090:	4638      	mov	r0, r7
 801c092:	f7ff ffa7 	bl	801bfe4 <sbrk_aligned>
 801c096:	3001      	adds	r0, #1
 801c098:	d037      	beq.n	801c10a <_malloc_r+0xe6>
 801c09a:	6823      	ldr	r3, [r4, #0]
 801c09c:	442b      	add	r3, r5
 801c09e:	6023      	str	r3, [r4, #0]
 801c0a0:	f8d8 3000 	ldr.w	r3, [r8]
 801c0a4:	2b00      	cmp	r3, #0
 801c0a6:	d038      	beq.n	801c11a <_malloc_r+0xf6>
 801c0a8:	685a      	ldr	r2, [r3, #4]
 801c0aa:	42a2      	cmp	r2, r4
 801c0ac:	d12b      	bne.n	801c106 <_malloc_r+0xe2>
 801c0ae:	2200      	movs	r2, #0
 801c0b0:	605a      	str	r2, [r3, #4]
 801c0b2:	e00f      	b.n	801c0d4 <_malloc_r+0xb0>
 801c0b4:	6822      	ldr	r2, [r4, #0]
 801c0b6:	1b52      	subs	r2, r2, r5
 801c0b8:	d41f      	bmi.n	801c0fa <_malloc_r+0xd6>
 801c0ba:	2a0b      	cmp	r2, #11
 801c0bc:	d917      	bls.n	801c0ee <_malloc_r+0xca>
 801c0be:	1961      	adds	r1, r4, r5
 801c0c0:	42a3      	cmp	r3, r4
 801c0c2:	6025      	str	r5, [r4, #0]
 801c0c4:	bf18      	it	ne
 801c0c6:	6059      	strne	r1, [r3, #4]
 801c0c8:	6863      	ldr	r3, [r4, #4]
 801c0ca:	bf08      	it	eq
 801c0cc:	f8c8 1000 	streq.w	r1, [r8]
 801c0d0:	5162      	str	r2, [r4, r5]
 801c0d2:	604b      	str	r3, [r1, #4]
 801c0d4:	4638      	mov	r0, r7
 801c0d6:	f104 060b 	add.w	r6, r4, #11
 801c0da:	f000 f829 	bl	801c130 <__malloc_unlock>
 801c0de:	f026 0607 	bic.w	r6, r6, #7
 801c0e2:	1d23      	adds	r3, r4, #4
 801c0e4:	1af2      	subs	r2, r6, r3
 801c0e6:	d0ae      	beq.n	801c046 <_malloc_r+0x22>
 801c0e8:	1b9b      	subs	r3, r3, r6
 801c0ea:	50a3      	str	r3, [r4, r2]
 801c0ec:	e7ab      	b.n	801c046 <_malloc_r+0x22>
 801c0ee:	42a3      	cmp	r3, r4
 801c0f0:	6862      	ldr	r2, [r4, #4]
 801c0f2:	d1dd      	bne.n	801c0b0 <_malloc_r+0x8c>
 801c0f4:	f8c8 2000 	str.w	r2, [r8]
 801c0f8:	e7ec      	b.n	801c0d4 <_malloc_r+0xb0>
 801c0fa:	4623      	mov	r3, r4
 801c0fc:	6864      	ldr	r4, [r4, #4]
 801c0fe:	e7ac      	b.n	801c05a <_malloc_r+0x36>
 801c100:	4634      	mov	r4, r6
 801c102:	6876      	ldr	r6, [r6, #4]
 801c104:	e7b4      	b.n	801c070 <_malloc_r+0x4c>
 801c106:	4613      	mov	r3, r2
 801c108:	e7cc      	b.n	801c0a4 <_malloc_r+0x80>
 801c10a:	230c      	movs	r3, #12
 801c10c:	603b      	str	r3, [r7, #0]
 801c10e:	4638      	mov	r0, r7
 801c110:	f000 f80e 	bl	801c130 <__malloc_unlock>
 801c114:	e797      	b.n	801c046 <_malloc_r+0x22>
 801c116:	6025      	str	r5, [r4, #0]
 801c118:	e7dc      	b.n	801c0d4 <_malloc_r+0xb0>
 801c11a:	605b      	str	r3, [r3, #4]
 801c11c:	deff      	udf	#255	; 0xff
 801c11e:	bf00      	nop
 801c120:	20010b88 	.word	0x20010b88

0801c124 <__malloc_lock>:
 801c124:	4801      	ldr	r0, [pc, #4]	; (801c12c <__malloc_lock+0x8>)
 801c126:	f000 bbec 	b.w	801c902 <__retarget_lock_acquire_recursive>
 801c12a:	bf00      	nop
 801c12c:	20010cd1 	.word	0x20010cd1

0801c130 <__malloc_unlock>:
 801c130:	4801      	ldr	r0, [pc, #4]	; (801c138 <__malloc_unlock+0x8>)
 801c132:	f000 bbe7 	b.w	801c904 <__retarget_lock_release_recursive>
 801c136:	bf00      	nop
 801c138:	20010cd1 	.word	0x20010cd1

0801c13c <srand>:
 801c13c:	b538      	push	{r3, r4, r5, lr}
 801c13e:	4b10      	ldr	r3, [pc, #64]	; (801c180 <srand+0x44>)
 801c140:	681d      	ldr	r5, [r3, #0]
 801c142:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c144:	4604      	mov	r4, r0
 801c146:	b9b3      	cbnz	r3, 801c176 <srand+0x3a>
 801c148:	2018      	movs	r0, #24
 801c14a:	f7ff ff3b 	bl	801bfc4 <malloc>
 801c14e:	4602      	mov	r2, r0
 801c150:	6328      	str	r0, [r5, #48]	; 0x30
 801c152:	b920      	cbnz	r0, 801c15e <srand+0x22>
 801c154:	4b0b      	ldr	r3, [pc, #44]	; (801c184 <srand+0x48>)
 801c156:	480c      	ldr	r0, [pc, #48]	; (801c188 <srand+0x4c>)
 801c158:	2146      	movs	r1, #70	; 0x46
 801c15a:	f000 fbeb 	bl	801c934 <__assert_func>
 801c15e:	490b      	ldr	r1, [pc, #44]	; (801c18c <srand+0x50>)
 801c160:	4b0b      	ldr	r3, [pc, #44]	; (801c190 <srand+0x54>)
 801c162:	e9c0 1300 	strd	r1, r3, [r0]
 801c166:	4b0b      	ldr	r3, [pc, #44]	; (801c194 <srand+0x58>)
 801c168:	6083      	str	r3, [r0, #8]
 801c16a:	230b      	movs	r3, #11
 801c16c:	8183      	strh	r3, [r0, #12]
 801c16e:	2100      	movs	r1, #0
 801c170:	2001      	movs	r0, #1
 801c172:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801c176:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c178:	2200      	movs	r2, #0
 801c17a:	611c      	str	r4, [r3, #16]
 801c17c:	615a      	str	r2, [r3, #20]
 801c17e:	bd38      	pop	{r3, r4, r5, pc}
 801c180:	200021d8 	.word	0x200021d8
 801c184:	0801f540 	.word	0x0801f540
 801c188:	0801f557 	.word	0x0801f557
 801c18c:	abcd330e 	.word	0xabcd330e
 801c190:	e66d1234 	.word	0xe66d1234
 801c194:	0005deec 	.word	0x0005deec

0801c198 <rand>:
 801c198:	4b16      	ldr	r3, [pc, #88]	; (801c1f4 <rand+0x5c>)
 801c19a:	b510      	push	{r4, lr}
 801c19c:	681c      	ldr	r4, [r3, #0]
 801c19e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c1a0:	b9b3      	cbnz	r3, 801c1d0 <rand+0x38>
 801c1a2:	2018      	movs	r0, #24
 801c1a4:	f7ff ff0e 	bl	801bfc4 <malloc>
 801c1a8:	4602      	mov	r2, r0
 801c1aa:	6320      	str	r0, [r4, #48]	; 0x30
 801c1ac:	b920      	cbnz	r0, 801c1b8 <rand+0x20>
 801c1ae:	4b12      	ldr	r3, [pc, #72]	; (801c1f8 <rand+0x60>)
 801c1b0:	4812      	ldr	r0, [pc, #72]	; (801c1fc <rand+0x64>)
 801c1b2:	2152      	movs	r1, #82	; 0x52
 801c1b4:	f000 fbbe 	bl	801c934 <__assert_func>
 801c1b8:	4911      	ldr	r1, [pc, #68]	; (801c200 <rand+0x68>)
 801c1ba:	4b12      	ldr	r3, [pc, #72]	; (801c204 <rand+0x6c>)
 801c1bc:	e9c0 1300 	strd	r1, r3, [r0]
 801c1c0:	4b11      	ldr	r3, [pc, #68]	; (801c208 <rand+0x70>)
 801c1c2:	6083      	str	r3, [r0, #8]
 801c1c4:	230b      	movs	r3, #11
 801c1c6:	8183      	strh	r3, [r0, #12]
 801c1c8:	2100      	movs	r1, #0
 801c1ca:	2001      	movs	r0, #1
 801c1cc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801c1d0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c1d2:	480e      	ldr	r0, [pc, #56]	; (801c20c <rand+0x74>)
 801c1d4:	690b      	ldr	r3, [r1, #16]
 801c1d6:	694c      	ldr	r4, [r1, #20]
 801c1d8:	4a0d      	ldr	r2, [pc, #52]	; (801c210 <rand+0x78>)
 801c1da:	4358      	muls	r0, r3
 801c1dc:	fb02 0004 	mla	r0, r2, r4, r0
 801c1e0:	fba3 3202 	umull	r3, r2, r3, r2
 801c1e4:	3301      	adds	r3, #1
 801c1e6:	eb40 0002 	adc.w	r0, r0, r2
 801c1ea:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801c1ee:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801c1f2:	bd10      	pop	{r4, pc}
 801c1f4:	200021d8 	.word	0x200021d8
 801c1f8:	0801f540 	.word	0x0801f540
 801c1fc:	0801f557 	.word	0x0801f557
 801c200:	abcd330e 	.word	0xabcd330e
 801c204:	e66d1234 	.word	0xe66d1234
 801c208:	0005deec 	.word	0x0005deec
 801c20c:	5851f42d 	.word	0x5851f42d
 801c210:	4c957f2d 	.word	0x4c957f2d

0801c214 <realloc>:
 801c214:	4b02      	ldr	r3, [pc, #8]	; (801c220 <realloc+0xc>)
 801c216:	460a      	mov	r2, r1
 801c218:	4601      	mov	r1, r0
 801c21a:	6818      	ldr	r0, [r3, #0]
 801c21c:	f000 b802 	b.w	801c224 <_realloc_r>
 801c220:	200021d8 	.word	0x200021d8

0801c224 <_realloc_r>:
 801c224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c228:	4680      	mov	r8, r0
 801c22a:	4614      	mov	r4, r2
 801c22c:	460e      	mov	r6, r1
 801c22e:	b921      	cbnz	r1, 801c23a <_realloc_r+0x16>
 801c230:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c234:	4611      	mov	r1, r2
 801c236:	f7ff bef5 	b.w	801c024 <_malloc_r>
 801c23a:	b92a      	cbnz	r2, 801c248 <_realloc_r+0x24>
 801c23c:	f000 fba4 	bl	801c988 <_free_r>
 801c240:	4625      	mov	r5, r4
 801c242:	4628      	mov	r0, r5
 801c244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c248:	f000 fbea 	bl	801ca20 <_malloc_usable_size_r>
 801c24c:	4284      	cmp	r4, r0
 801c24e:	4607      	mov	r7, r0
 801c250:	d802      	bhi.n	801c258 <_realloc_r+0x34>
 801c252:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c256:	d812      	bhi.n	801c27e <_realloc_r+0x5a>
 801c258:	4621      	mov	r1, r4
 801c25a:	4640      	mov	r0, r8
 801c25c:	f7ff fee2 	bl	801c024 <_malloc_r>
 801c260:	4605      	mov	r5, r0
 801c262:	2800      	cmp	r0, #0
 801c264:	d0ed      	beq.n	801c242 <_realloc_r+0x1e>
 801c266:	42bc      	cmp	r4, r7
 801c268:	4622      	mov	r2, r4
 801c26a:	4631      	mov	r1, r6
 801c26c:	bf28      	it	cs
 801c26e:	463a      	movcs	r2, r7
 801c270:	f000 fb51 	bl	801c916 <memcpy>
 801c274:	4631      	mov	r1, r6
 801c276:	4640      	mov	r0, r8
 801c278:	f000 fb86 	bl	801c988 <_free_r>
 801c27c:	e7e1      	b.n	801c242 <_realloc_r+0x1e>
 801c27e:	4635      	mov	r5, r6
 801c280:	e7df      	b.n	801c242 <_realloc_r+0x1e>
	...

0801c284 <_strtoul_l.constprop.0>:
 801c284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c288:	4f36      	ldr	r7, [pc, #216]	; (801c364 <_strtoul_l.constprop.0+0xe0>)
 801c28a:	4686      	mov	lr, r0
 801c28c:	460d      	mov	r5, r1
 801c28e:	4628      	mov	r0, r5
 801c290:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c294:	5d3e      	ldrb	r6, [r7, r4]
 801c296:	f016 0608 	ands.w	r6, r6, #8
 801c29a:	d1f8      	bne.n	801c28e <_strtoul_l.constprop.0+0xa>
 801c29c:	2c2d      	cmp	r4, #45	; 0x2d
 801c29e:	d130      	bne.n	801c302 <_strtoul_l.constprop.0+0x7e>
 801c2a0:	782c      	ldrb	r4, [r5, #0]
 801c2a2:	2601      	movs	r6, #1
 801c2a4:	1c85      	adds	r5, r0, #2
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	d057      	beq.n	801c35a <_strtoul_l.constprop.0+0xd6>
 801c2aa:	2b10      	cmp	r3, #16
 801c2ac:	d109      	bne.n	801c2c2 <_strtoul_l.constprop.0+0x3e>
 801c2ae:	2c30      	cmp	r4, #48	; 0x30
 801c2b0:	d107      	bne.n	801c2c2 <_strtoul_l.constprop.0+0x3e>
 801c2b2:	7828      	ldrb	r0, [r5, #0]
 801c2b4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801c2b8:	2858      	cmp	r0, #88	; 0x58
 801c2ba:	d149      	bne.n	801c350 <_strtoul_l.constprop.0+0xcc>
 801c2bc:	786c      	ldrb	r4, [r5, #1]
 801c2be:	2310      	movs	r3, #16
 801c2c0:	3502      	adds	r5, #2
 801c2c2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801c2c6:	2700      	movs	r7, #0
 801c2c8:	fbb8 f8f3 	udiv	r8, r8, r3
 801c2cc:	fb03 f908 	mul.w	r9, r3, r8
 801c2d0:	ea6f 0909 	mvn.w	r9, r9
 801c2d4:	4638      	mov	r0, r7
 801c2d6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801c2da:	f1bc 0f09 	cmp.w	ip, #9
 801c2de:	d815      	bhi.n	801c30c <_strtoul_l.constprop.0+0x88>
 801c2e0:	4664      	mov	r4, ip
 801c2e2:	42a3      	cmp	r3, r4
 801c2e4:	dd23      	ble.n	801c32e <_strtoul_l.constprop.0+0xaa>
 801c2e6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801c2ea:	d007      	beq.n	801c2fc <_strtoul_l.constprop.0+0x78>
 801c2ec:	4580      	cmp	r8, r0
 801c2ee:	d31b      	bcc.n	801c328 <_strtoul_l.constprop.0+0xa4>
 801c2f0:	d101      	bne.n	801c2f6 <_strtoul_l.constprop.0+0x72>
 801c2f2:	45a1      	cmp	r9, r4
 801c2f4:	db18      	blt.n	801c328 <_strtoul_l.constprop.0+0xa4>
 801c2f6:	fb00 4003 	mla	r0, r0, r3, r4
 801c2fa:	2701      	movs	r7, #1
 801c2fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c300:	e7e9      	b.n	801c2d6 <_strtoul_l.constprop.0+0x52>
 801c302:	2c2b      	cmp	r4, #43	; 0x2b
 801c304:	bf04      	itt	eq
 801c306:	782c      	ldrbeq	r4, [r5, #0]
 801c308:	1c85      	addeq	r5, r0, #2
 801c30a:	e7cc      	b.n	801c2a6 <_strtoul_l.constprop.0+0x22>
 801c30c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801c310:	f1bc 0f19 	cmp.w	ip, #25
 801c314:	d801      	bhi.n	801c31a <_strtoul_l.constprop.0+0x96>
 801c316:	3c37      	subs	r4, #55	; 0x37
 801c318:	e7e3      	b.n	801c2e2 <_strtoul_l.constprop.0+0x5e>
 801c31a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801c31e:	f1bc 0f19 	cmp.w	ip, #25
 801c322:	d804      	bhi.n	801c32e <_strtoul_l.constprop.0+0xaa>
 801c324:	3c57      	subs	r4, #87	; 0x57
 801c326:	e7dc      	b.n	801c2e2 <_strtoul_l.constprop.0+0x5e>
 801c328:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801c32c:	e7e6      	b.n	801c2fc <_strtoul_l.constprop.0+0x78>
 801c32e:	1c7b      	adds	r3, r7, #1
 801c330:	d106      	bne.n	801c340 <_strtoul_l.constprop.0+0xbc>
 801c332:	2322      	movs	r3, #34	; 0x22
 801c334:	f8ce 3000 	str.w	r3, [lr]
 801c338:	4638      	mov	r0, r7
 801c33a:	b932      	cbnz	r2, 801c34a <_strtoul_l.constprop.0+0xc6>
 801c33c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c340:	b106      	cbz	r6, 801c344 <_strtoul_l.constprop.0+0xc0>
 801c342:	4240      	negs	r0, r0
 801c344:	2a00      	cmp	r2, #0
 801c346:	d0f9      	beq.n	801c33c <_strtoul_l.constprop.0+0xb8>
 801c348:	b107      	cbz	r7, 801c34c <_strtoul_l.constprop.0+0xc8>
 801c34a:	1e69      	subs	r1, r5, #1
 801c34c:	6011      	str	r1, [r2, #0]
 801c34e:	e7f5      	b.n	801c33c <_strtoul_l.constprop.0+0xb8>
 801c350:	2430      	movs	r4, #48	; 0x30
 801c352:	2b00      	cmp	r3, #0
 801c354:	d1b5      	bne.n	801c2c2 <_strtoul_l.constprop.0+0x3e>
 801c356:	2308      	movs	r3, #8
 801c358:	e7b3      	b.n	801c2c2 <_strtoul_l.constprop.0+0x3e>
 801c35a:	2c30      	cmp	r4, #48	; 0x30
 801c35c:	d0a9      	beq.n	801c2b2 <_strtoul_l.constprop.0+0x2e>
 801c35e:	230a      	movs	r3, #10
 801c360:	e7af      	b.n	801c2c2 <_strtoul_l.constprop.0+0x3e>
 801c362:	bf00      	nop
 801c364:	0801f5b0 	.word	0x0801f5b0

0801c368 <strtoul>:
 801c368:	4613      	mov	r3, r2
 801c36a:	460a      	mov	r2, r1
 801c36c:	4601      	mov	r1, r0
 801c36e:	4802      	ldr	r0, [pc, #8]	; (801c378 <strtoul+0x10>)
 801c370:	6800      	ldr	r0, [r0, #0]
 801c372:	f7ff bf87 	b.w	801c284 <_strtoul_l.constprop.0>
 801c376:	bf00      	nop
 801c378:	200021d8 	.word	0x200021d8

0801c37c <std>:
 801c37c:	2300      	movs	r3, #0
 801c37e:	b510      	push	{r4, lr}
 801c380:	4604      	mov	r4, r0
 801c382:	e9c0 3300 	strd	r3, r3, [r0]
 801c386:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c38a:	6083      	str	r3, [r0, #8]
 801c38c:	8181      	strh	r1, [r0, #12]
 801c38e:	6643      	str	r3, [r0, #100]	; 0x64
 801c390:	81c2      	strh	r2, [r0, #14]
 801c392:	6183      	str	r3, [r0, #24]
 801c394:	4619      	mov	r1, r3
 801c396:	2208      	movs	r2, #8
 801c398:	305c      	adds	r0, #92	; 0x5c
 801c39a:	f000 f98b 	bl	801c6b4 <memset>
 801c39e:	4b0d      	ldr	r3, [pc, #52]	; (801c3d4 <std+0x58>)
 801c3a0:	6263      	str	r3, [r4, #36]	; 0x24
 801c3a2:	4b0d      	ldr	r3, [pc, #52]	; (801c3d8 <std+0x5c>)
 801c3a4:	62a3      	str	r3, [r4, #40]	; 0x28
 801c3a6:	4b0d      	ldr	r3, [pc, #52]	; (801c3dc <std+0x60>)
 801c3a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c3aa:	4b0d      	ldr	r3, [pc, #52]	; (801c3e0 <std+0x64>)
 801c3ac:	6323      	str	r3, [r4, #48]	; 0x30
 801c3ae:	4b0d      	ldr	r3, [pc, #52]	; (801c3e4 <std+0x68>)
 801c3b0:	6224      	str	r4, [r4, #32]
 801c3b2:	429c      	cmp	r4, r3
 801c3b4:	d006      	beq.n	801c3c4 <std+0x48>
 801c3b6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801c3ba:	4294      	cmp	r4, r2
 801c3bc:	d002      	beq.n	801c3c4 <std+0x48>
 801c3be:	33d0      	adds	r3, #208	; 0xd0
 801c3c0:	429c      	cmp	r4, r3
 801c3c2:	d105      	bne.n	801c3d0 <std+0x54>
 801c3c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c3c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c3cc:	f000 ba98 	b.w	801c900 <__retarget_lock_init_recursive>
 801c3d0:	bd10      	pop	{r4, pc}
 801c3d2:	bf00      	nop
 801c3d4:	0801c569 	.word	0x0801c569
 801c3d8:	0801c58b 	.word	0x0801c58b
 801c3dc:	0801c5c3 	.word	0x0801c5c3
 801c3e0:	0801c5e7 	.word	0x0801c5e7
 801c3e4:	20010b90 	.word	0x20010b90

0801c3e8 <stdio_exit_handler>:
 801c3e8:	4a02      	ldr	r2, [pc, #8]	; (801c3f4 <stdio_exit_handler+0xc>)
 801c3ea:	4903      	ldr	r1, [pc, #12]	; (801c3f8 <stdio_exit_handler+0x10>)
 801c3ec:	4803      	ldr	r0, [pc, #12]	; (801c3fc <stdio_exit_handler+0x14>)
 801c3ee:	f000 b869 	b.w	801c4c4 <_fwalk_sglue>
 801c3f2:	bf00      	nop
 801c3f4:	20002180 	.word	0x20002180
 801c3f8:	0801d10d 	.word	0x0801d10d
 801c3fc:	2000218c 	.word	0x2000218c

0801c400 <cleanup_stdio>:
 801c400:	6841      	ldr	r1, [r0, #4]
 801c402:	4b0c      	ldr	r3, [pc, #48]	; (801c434 <cleanup_stdio+0x34>)
 801c404:	4299      	cmp	r1, r3
 801c406:	b510      	push	{r4, lr}
 801c408:	4604      	mov	r4, r0
 801c40a:	d001      	beq.n	801c410 <cleanup_stdio+0x10>
 801c40c:	f000 fe7e 	bl	801d10c <_fflush_r>
 801c410:	68a1      	ldr	r1, [r4, #8]
 801c412:	4b09      	ldr	r3, [pc, #36]	; (801c438 <cleanup_stdio+0x38>)
 801c414:	4299      	cmp	r1, r3
 801c416:	d002      	beq.n	801c41e <cleanup_stdio+0x1e>
 801c418:	4620      	mov	r0, r4
 801c41a:	f000 fe77 	bl	801d10c <_fflush_r>
 801c41e:	68e1      	ldr	r1, [r4, #12]
 801c420:	4b06      	ldr	r3, [pc, #24]	; (801c43c <cleanup_stdio+0x3c>)
 801c422:	4299      	cmp	r1, r3
 801c424:	d004      	beq.n	801c430 <cleanup_stdio+0x30>
 801c426:	4620      	mov	r0, r4
 801c428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c42c:	f000 be6e 	b.w	801d10c <_fflush_r>
 801c430:	bd10      	pop	{r4, pc}
 801c432:	bf00      	nop
 801c434:	20010b90 	.word	0x20010b90
 801c438:	20010bf8 	.word	0x20010bf8
 801c43c:	20010c60 	.word	0x20010c60

0801c440 <global_stdio_init.part.0>:
 801c440:	b510      	push	{r4, lr}
 801c442:	4b0b      	ldr	r3, [pc, #44]	; (801c470 <global_stdio_init.part.0+0x30>)
 801c444:	4c0b      	ldr	r4, [pc, #44]	; (801c474 <global_stdio_init.part.0+0x34>)
 801c446:	4a0c      	ldr	r2, [pc, #48]	; (801c478 <global_stdio_init.part.0+0x38>)
 801c448:	601a      	str	r2, [r3, #0]
 801c44a:	4620      	mov	r0, r4
 801c44c:	2200      	movs	r2, #0
 801c44e:	2104      	movs	r1, #4
 801c450:	f7ff ff94 	bl	801c37c <std>
 801c454:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801c458:	2201      	movs	r2, #1
 801c45a:	2109      	movs	r1, #9
 801c45c:	f7ff ff8e 	bl	801c37c <std>
 801c460:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801c464:	2202      	movs	r2, #2
 801c466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c46a:	2112      	movs	r1, #18
 801c46c:	f7ff bf86 	b.w	801c37c <std>
 801c470:	20010cc8 	.word	0x20010cc8
 801c474:	20010b90 	.word	0x20010b90
 801c478:	0801c3e9 	.word	0x0801c3e9

0801c47c <__sfp_lock_acquire>:
 801c47c:	4801      	ldr	r0, [pc, #4]	; (801c484 <__sfp_lock_acquire+0x8>)
 801c47e:	f000 ba40 	b.w	801c902 <__retarget_lock_acquire_recursive>
 801c482:	bf00      	nop
 801c484:	20010cd2 	.word	0x20010cd2

0801c488 <__sfp_lock_release>:
 801c488:	4801      	ldr	r0, [pc, #4]	; (801c490 <__sfp_lock_release+0x8>)
 801c48a:	f000 ba3b 	b.w	801c904 <__retarget_lock_release_recursive>
 801c48e:	bf00      	nop
 801c490:	20010cd2 	.word	0x20010cd2

0801c494 <__sinit>:
 801c494:	b510      	push	{r4, lr}
 801c496:	4604      	mov	r4, r0
 801c498:	f7ff fff0 	bl	801c47c <__sfp_lock_acquire>
 801c49c:	6a23      	ldr	r3, [r4, #32]
 801c49e:	b11b      	cbz	r3, 801c4a8 <__sinit+0x14>
 801c4a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c4a4:	f7ff bff0 	b.w	801c488 <__sfp_lock_release>
 801c4a8:	4b04      	ldr	r3, [pc, #16]	; (801c4bc <__sinit+0x28>)
 801c4aa:	6223      	str	r3, [r4, #32]
 801c4ac:	4b04      	ldr	r3, [pc, #16]	; (801c4c0 <__sinit+0x2c>)
 801c4ae:	681b      	ldr	r3, [r3, #0]
 801c4b0:	2b00      	cmp	r3, #0
 801c4b2:	d1f5      	bne.n	801c4a0 <__sinit+0xc>
 801c4b4:	f7ff ffc4 	bl	801c440 <global_stdio_init.part.0>
 801c4b8:	e7f2      	b.n	801c4a0 <__sinit+0xc>
 801c4ba:	bf00      	nop
 801c4bc:	0801c401 	.word	0x0801c401
 801c4c0:	20010cc8 	.word	0x20010cc8

0801c4c4 <_fwalk_sglue>:
 801c4c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c4c8:	4607      	mov	r7, r0
 801c4ca:	4688      	mov	r8, r1
 801c4cc:	4614      	mov	r4, r2
 801c4ce:	2600      	movs	r6, #0
 801c4d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c4d4:	f1b9 0901 	subs.w	r9, r9, #1
 801c4d8:	d505      	bpl.n	801c4e6 <_fwalk_sglue+0x22>
 801c4da:	6824      	ldr	r4, [r4, #0]
 801c4dc:	2c00      	cmp	r4, #0
 801c4de:	d1f7      	bne.n	801c4d0 <_fwalk_sglue+0xc>
 801c4e0:	4630      	mov	r0, r6
 801c4e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c4e6:	89ab      	ldrh	r3, [r5, #12]
 801c4e8:	2b01      	cmp	r3, #1
 801c4ea:	d907      	bls.n	801c4fc <_fwalk_sglue+0x38>
 801c4ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c4f0:	3301      	adds	r3, #1
 801c4f2:	d003      	beq.n	801c4fc <_fwalk_sglue+0x38>
 801c4f4:	4629      	mov	r1, r5
 801c4f6:	4638      	mov	r0, r7
 801c4f8:	47c0      	blx	r8
 801c4fa:	4306      	orrs	r6, r0
 801c4fc:	3568      	adds	r5, #104	; 0x68
 801c4fe:	e7e9      	b.n	801c4d4 <_fwalk_sglue+0x10>

0801c500 <sniprintf>:
 801c500:	b40c      	push	{r2, r3}
 801c502:	b530      	push	{r4, r5, lr}
 801c504:	4b17      	ldr	r3, [pc, #92]	; (801c564 <sniprintf+0x64>)
 801c506:	1e0c      	subs	r4, r1, #0
 801c508:	681d      	ldr	r5, [r3, #0]
 801c50a:	b09d      	sub	sp, #116	; 0x74
 801c50c:	da08      	bge.n	801c520 <sniprintf+0x20>
 801c50e:	238b      	movs	r3, #139	; 0x8b
 801c510:	602b      	str	r3, [r5, #0]
 801c512:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c516:	b01d      	add	sp, #116	; 0x74
 801c518:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c51c:	b002      	add	sp, #8
 801c51e:	4770      	bx	lr
 801c520:	f44f 7302 	mov.w	r3, #520	; 0x208
 801c524:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c528:	bf14      	ite	ne
 801c52a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801c52e:	4623      	moveq	r3, r4
 801c530:	9304      	str	r3, [sp, #16]
 801c532:	9307      	str	r3, [sp, #28]
 801c534:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c538:	9002      	str	r0, [sp, #8]
 801c53a:	9006      	str	r0, [sp, #24]
 801c53c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c540:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c542:	ab21      	add	r3, sp, #132	; 0x84
 801c544:	a902      	add	r1, sp, #8
 801c546:	4628      	mov	r0, r5
 801c548:	9301      	str	r3, [sp, #4]
 801c54a:	f000 facb 	bl	801cae4 <_svfiprintf_r>
 801c54e:	1c43      	adds	r3, r0, #1
 801c550:	bfbc      	itt	lt
 801c552:	238b      	movlt	r3, #139	; 0x8b
 801c554:	602b      	strlt	r3, [r5, #0]
 801c556:	2c00      	cmp	r4, #0
 801c558:	d0dd      	beq.n	801c516 <sniprintf+0x16>
 801c55a:	9b02      	ldr	r3, [sp, #8]
 801c55c:	2200      	movs	r2, #0
 801c55e:	701a      	strb	r2, [r3, #0]
 801c560:	e7d9      	b.n	801c516 <sniprintf+0x16>
 801c562:	bf00      	nop
 801c564:	200021d8 	.word	0x200021d8

0801c568 <__sread>:
 801c568:	b510      	push	{r4, lr}
 801c56a:	460c      	mov	r4, r1
 801c56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c570:	f000 f968 	bl	801c844 <_read_r>
 801c574:	2800      	cmp	r0, #0
 801c576:	bfab      	itete	ge
 801c578:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c57a:	89a3      	ldrhlt	r3, [r4, #12]
 801c57c:	181b      	addge	r3, r3, r0
 801c57e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c582:	bfac      	ite	ge
 801c584:	6563      	strge	r3, [r4, #84]	; 0x54
 801c586:	81a3      	strhlt	r3, [r4, #12]
 801c588:	bd10      	pop	{r4, pc}

0801c58a <__swrite>:
 801c58a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c58e:	461f      	mov	r7, r3
 801c590:	898b      	ldrh	r3, [r1, #12]
 801c592:	05db      	lsls	r3, r3, #23
 801c594:	4605      	mov	r5, r0
 801c596:	460c      	mov	r4, r1
 801c598:	4616      	mov	r6, r2
 801c59a:	d505      	bpl.n	801c5a8 <__swrite+0x1e>
 801c59c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c5a0:	2302      	movs	r3, #2
 801c5a2:	2200      	movs	r2, #0
 801c5a4:	f000 f93c 	bl	801c820 <_lseek_r>
 801c5a8:	89a3      	ldrh	r3, [r4, #12]
 801c5aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c5ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c5b2:	81a3      	strh	r3, [r4, #12]
 801c5b4:	4632      	mov	r2, r6
 801c5b6:	463b      	mov	r3, r7
 801c5b8:	4628      	mov	r0, r5
 801c5ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c5be:	f000 b963 	b.w	801c888 <_write_r>

0801c5c2 <__sseek>:
 801c5c2:	b510      	push	{r4, lr}
 801c5c4:	460c      	mov	r4, r1
 801c5c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c5ca:	f000 f929 	bl	801c820 <_lseek_r>
 801c5ce:	1c43      	adds	r3, r0, #1
 801c5d0:	89a3      	ldrh	r3, [r4, #12]
 801c5d2:	bf15      	itete	ne
 801c5d4:	6560      	strne	r0, [r4, #84]	; 0x54
 801c5d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c5da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c5de:	81a3      	strheq	r3, [r4, #12]
 801c5e0:	bf18      	it	ne
 801c5e2:	81a3      	strhne	r3, [r4, #12]
 801c5e4:	bd10      	pop	{r4, pc}

0801c5e6 <__sclose>:
 801c5e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c5ea:	f000 b8b3 	b.w	801c754 <_close_r>

0801c5ee <_vsniprintf_r>:
 801c5ee:	b530      	push	{r4, r5, lr}
 801c5f0:	4614      	mov	r4, r2
 801c5f2:	2c00      	cmp	r4, #0
 801c5f4:	b09b      	sub	sp, #108	; 0x6c
 801c5f6:	4605      	mov	r5, r0
 801c5f8:	461a      	mov	r2, r3
 801c5fa:	da05      	bge.n	801c608 <_vsniprintf_r+0x1a>
 801c5fc:	238b      	movs	r3, #139	; 0x8b
 801c5fe:	6003      	str	r3, [r0, #0]
 801c600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c604:	b01b      	add	sp, #108	; 0x6c
 801c606:	bd30      	pop	{r4, r5, pc}
 801c608:	f44f 7302 	mov.w	r3, #520	; 0x208
 801c60c:	f8ad 300c 	strh.w	r3, [sp, #12]
 801c610:	bf14      	ite	ne
 801c612:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801c616:	4623      	moveq	r3, r4
 801c618:	9302      	str	r3, [sp, #8]
 801c61a:	9305      	str	r3, [sp, #20]
 801c61c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c620:	9100      	str	r1, [sp, #0]
 801c622:	9104      	str	r1, [sp, #16]
 801c624:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c628:	4669      	mov	r1, sp
 801c62a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c62c:	f000 fa5a 	bl	801cae4 <_svfiprintf_r>
 801c630:	1c43      	adds	r3, r0, #1
 801c632:	bfbc      	itt	lt
 801c634:	238b      	movlt	r3, #139	; 0x8b
 801c636:	602b      	strlt	r3, [r5, #0]
 801c638:	2c00      	cmp	r4, #0
 801c63a:	d0e3      	beq.n	801c604 <_vsniprintf_r+0x16>
 801c63c:	9b00      	ldr	r3, [sp, #0]
 801c63e:	2200      	movs	r2, #0
 801c640:	701a      	strb	r2, [r3, #0]
 801c642:	e7df      	b.n	801c604 <_vsniprintf_r+0x16>

0801c644 <vsniprintf>:
 801c644:	b507      	push	{r0, r1, r2, lr}
 801c646:	9300      	str	r3, [sp, #0]
 801c648:	4613      	mov	r3, r2
 801c64a:	460a      	mov	r2, r1
 801c64c:	4601      	mov	r1, r0
 801c64e:	4803      	ldr	r0, [pc, #12]	; (801c65c <vsniprintf+0x18>)
 801c650:	6800      	ldr	r0, [r0, #0]
 801c652:	f7ff ffcc 	bl	801c5ee <_vsniprintf_r>
 801c656:	b003      	add	sp, #12
 801c658:	f85d fb04 	ldr.w	pc, [sp], #4
 801c65c:	200021d8 	.word	0x200021d8

0801c660 <memcmp>:
 801c660:	b510      	push	{r4, lr}
 801c662:	3901      	subs	r1, #1
 801c664:	4402      	add	r2, r0
 801c666:	4290      	cmp	r0, r2
 801c668:	d101      	bne.n	801c66e <memcmp+0xe>
 801c66a:	2000      	movs	r0, #0
 801c66c:	e005      	b.n	801c67a <memcmp+0x1a>
 801c66e:	7803      	ldrb	r3, [r0, #0]
 801c670:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c674:	42a3      	cmp	r3, r4
 801c676:	d001      	beq.n	801c67c <memcmp+0x1c>
 801c678:	1b18      	subs	r0, r3, r4
 801c67a:	bd10      	pop	{r4, pc}
 801c67c:	3001      	adds	r0, #1
 801c67e:	e7f2      	b.n	801c666 <memcmp+0x6>

0801c680 <memmove>:
 801c680:	4288      	cmp	r0, r1
 801c682:	b510      	push	{r4, lr}
 801c684:	eb01 0402 	add.w	r4, r1, r2
 801c688:	d902      	bls.n	801c690 <memmove+0x10>
 801c68a:	4284      	cmp	r4, r0
 801c68c:	4623      	mov	r3, r4
 801c68e:	d807      	bhi.n	801c6a0 <memmove+0x20>
 801c690:	1e43      	subs	r3, r0, #1
 801c692:	42a1      	cmp	r1, r4
 801c694:	d008      	beq.n	801c6a8 <memmove+0x28>
 801c696:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c69a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c69e:	e7f8      	b.n	801c692 <memmove+0x12>
 801c6a0:	4402      	add	r2, r0
 801c6a2:	4601      	mov	r1, r0
 801c6a4:	428a      	cmp	r2, r1
 801c6a6:	d100      	bne.n	801c6aa <memmove+0x2a>
 801c6a8:	bd10      	pop	{r4, pc}
 801c6aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c6ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c6b2:	e7f7      	b.n	801c6a4 <memmove+0x24>

0801c6b4 <memset>:
 801c6b4:	4402      	add	r2, r0
 801c6b6:	4603      	mov	r3, r0
 801c6b8:	4293      	cmp	r3, r2
 801c6ba:	d100      	bne.n	801c6be <memset+0xa>
 801c6bc:	4770      	bx	lr
 801c6be:	f803 1b01 	strb.w	r1, [r3], #1
 801c6c2:	e7f9      	b.n	801c6b8 <memset+0x4>

0801c6c4 <strchr>:
 801c6c4:	b2c9      	uxtb	r1, r1
 801c6c6:	4603      	mov	r3, r0
 801c6c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c6cc:	b11a      	cbz	r2, 801c6d6 <strchr+0x12>
 801c6ce:	428a      	cmp	r2, r1
 801c6d0:	d1f9      	bne.n	801c6c6 <strchr+0x2>
 801c6d2:	4618      	mov	r0, r3
 801c6d4:	4770      	bx	lr
 801c6d6:	2900      	cmp	r1, #0
 801c6d8:	bf18      	it	ne
 801c6da:	2300      	movne	r3, #0
 801c6dc:	e7f9      	b.n	801c6d2 <strchr+0xe>

0801c6de <strncmp>:
 801c6de:	b510      	push	{r4, lr}
 801c6e0:	b16a      	cbz	r2, 801c6fe <strncmp+0x20>
 801c6e2:	3901      	subs	r1, #1
 801c6e4:	1884      	adds	r4, r0, r2
 801c6e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c6ea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801c6ee:	429a      	cmp	r2, r3
 801c6f0:	d103      	bne.n	801c6fa <strncmp+0x1c>
 801c6f2:	42a0      	cmp	r0, r4
 801c6f4:	d001      	beq.n	801c6fa <strncmp+0x1c>
 801c6f6:	2a00      	cmp	r2, #0
 801c6f8:	d1f5      	bne.n	801c6e6 <strncmp+0x8>
 801c6fa:	1ad0      	subs	r0, r2, r3
 801c6fc:	bd10      	pop	{r4, pc}
 801c6fe:	4610      	mov	r0, r2
 801c700:	e7fc      	b.n	801c6fc <strncmp+0x1e>

0801c702 <strncpy>:
 801c702:	b510      	push	{r4, lr}
 801c704:	3901      	subs	r1, #1
 801c706:	4603      	mov	r3, r0
 801c708:	b132      	cbz	r2, 801c718 <strncpy+0x16>
 801c70a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c70e:	f803 4b01 	strb.w	r4, [r3], #1
 801c712:	3a01      	subs	r2, #1
 801c714:	2c00      	cmp	r4, #0
 801c716:	d1f7      	bne.n	801c708 <strncpy+0x6>
 801c718:	441a      	add	r2, r3
 801c71a:	2100      	movs	r1, #0
 801c71c:	4293      	cmp	r3, r2
 801c71e:	d100      	bne.n	801c722 <strncpy+0x20>
 801c720:	bd10      	pop	{r4, pc}
 801c722:	f803 1b01 	strb.w	r1, [r3], #1
 801c726:	e7f9      	b.n	801c71c <strncpy+0x1a>

0801c728 <strstr>:
 801c728:	780a      	ldrb	r2, [r1, #0]
 801c72a:	b570      	push	{r4, r5, r6, lr}
 801c72c:	b96a      	cbnz	r2, 801c74a <strstr+0x22>
 801c72e:	bd70      	pop	{r4, r5, r6, pc}
 801c730:	429a      	cmp	r2, r3
 801c732:	d109      	bne.n	801c748 <strstr+0x20>
 801c734:	460c      	mov	r4, r1
 801c736:	4605      	mov	r5, r0
 801c738:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801c73c:	2b00      	cmp	r3, #0
 801c73e:	d0f6      	beq.n	801c72e <strstr+0x6>
 801c740:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801c744:	429e      	cmp	r6, r3
 801c746:	d0f7      	beq.n	801c738 <strstr+0x10>
 801c748:	3001      	adds	r0, #1
 801c74a:	7803      	ldrb	r3, [r0, #0]
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	d1ef      	bne.n	801c730 <strstr+0x8>
 801c750:	4618      	mov	r0, r3
 801c752:	e7ec      	b.n	801c72e <strstr+0x6>

0801c754 <_close_r>:
 801c754:	b538      	push	{r3, r4, r5, lr}
 801c756:	4d06      	ldr	r5, [pc, #24]	; (801c770 <_close_r+0x1c>)
 801c758:	2300      	movs	r3, #0
 801c75a:	4604      	mov	r4, r0
 801c75c:	4608      	mov	r0, r1
 801c75e:	602b      	str	r3, [r5, #0]
 801c760:	f7e6 fb4d 	bl	8002dfe <_close>
 801c764:	1c43      	adds	r3, r0, #1
 801c766:	d102      	bne.n	801c76e <_close_r+0x1a>
 801c768:	682b      	ldr	r3, [r5, #0]
 801c76a:	b103      	cbz	r3, 801c76e <_close_r+0x1a>
 801c76c:	6023      	str	r3, [r4, #0]
 801c76e:	bd38      	pop	{r3, r4, r5, pc}
 801c770:	20010ccc 	.word	0x20010ccc

0801c774 <_reclaim_reent>:
 801c774:	4b29      	ldr	r3, [pc, #164]	; (801c81c <_reclaim_reent+0xa8>)
 801c776:	681b      	ldr	r3, [r3, #0]
 801c778:	4283      	cmp	r3, r0
 801c77a:	b570      	push	{r4, r5, r6, lr}
 801c77c:	4604      	mov	r4, r0
 801c77e:	d04b      	beq.n	801c818 <_reclaim_reent+0xa4>
 801c780:	69c3      	ldr	r3, [r0, #28]
 801c782:	b143      	cbz	r3, 801c796 <_reclaim_reent+0x22>
 801c784:	68db      	ldr	r3, [r3, #12]
 801c786:	2b00      	cmp	r3, #0
 801c788:	d144      	bne.n	801c814 <_reclaim_reent+0xa0>
 801c78a:	69e3      	ldr	r3, [r4, #28]
 801c78c:	6819      	ldr	r1, [r3, #0]
 801c78e:	b111      	cbz	r1, 801c796 <_reclaim_reent+0x22>
 801c790:	4620      	mov	r0, r4
 801c792:	f000 f8f9 	bl	801c988 <_free_r>
 801c796:	6961      	ldr	r1, [r4, #20]
 801c798:	b111      	cbz	r1, 801c7a0 <_reclaim_reent+0x2c>
 801c79a:	4620      	mov	r0, r4
 801c79c:	f000 f8f4 	bl	801c988 <_free_r>
 801c7a0:	69e1      	ldr	r1, [r4, #28]
 801c7a2:	b111      	cbz	r1, 801c7aa <_reclaim_reent+0x36>
 801c7a4:	4620      	mov	r0, r4
 801c7a6:	f000 f8ef 	bl	801c988 <_free_r>
 801c7aa:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c7ac:	b111      	cbz	r1, 801c7b4 <_reclaim_reent+0x40>
 801c7ae:	4620      	mov	r0, r4
 801c7b0:	f000 f8ea 	bl	801c988 <_free_r>
 801c7b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c7b6:	b111      	cbz	r1, 801c7be <_reclaim_reent+0x4a>
 801c7b8:	4620      	mov	r0, r4
 801c7ba:	f000 f8e5 	bl	801c988 <_free_r>
 801c7be:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c7c0:	b111      	cbz	r1, 801c7c8 <_reclaim_reent+0x54>
 801c7c2:	4620      	mov	r0, r4
 801c7c4:	f000 f8e0 	bl	801c988 <_free_r>
 801c7c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801c7ca:	b111      	cbz	r1, 801c7d2 <_reclaim_reent+0x5e>
 801c7cc:	4620      	mov	r0, r4
 801c7ce:	f000 f8db 	bl	801c988 <_free_r>
 801c7d2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801c7d4:	b111      	cbz	r1, 801c7dc <_reclaim_reent+0x68>
 801c7d6:	4620      	mov	r0, r4
 801c7d8:	f000 f8d6 	bl	801c988 <_free_r>
 801c7dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801c7de:	b111      	cbz	r1, 801c7e6 <_reclaim_reent+0x72>
 801c7e0:	4620      	mov	r0, r4
 801c7e2:	f000 f8d1 	bl	801c988 <_free_r>
 801c7e6:	6a23      	ldr	r3, [r4, #32]
 801c7e8:	b1b3      	cbz	r3, 801c818 <_reclaim_reent+0xa4>
 801c7ea:	4620      	mov	r0, r4
 801c7ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c7f0:	4718      	bx	r3
 801c7f2:	5949      	ldr	r1, [r1, r5]
 801c7f4:	b941      	cbnz	r1, 801c808 <_reclaim_reent+0x94>
 801c7f6:	3504      	adds	r5, #4
 801c7f8:	69e3      	ldr	r3, [r4, #28]
 801c7fa:	2d80      	cmp	r5, #128	; 0x80
 801c7fc:	68d9      	ldr	r1, [r3, #12]
 801c7fe:	d1f8      	bne.n	801c7f2 <_reclaim_reent+0x7e>
 801c800:	4620      	mov	r0, r4
 801c802:	f000 f8c1 	bl	801c988 <_free_r>
 801c806:	e7c0      	b.n	801c78a <_reclaim_reent+0x16>
 801c808:	680e      	ldr	r6, [r1, #0]
 801c80a:	4620      	mov	r0, r4
 801c80c:	f000 f8bc 	bl	801c988 <_free_r>
 801c810:	4631      	mov	r1, r6
 801c812:	e7ef      	b.n	801c7f4 <_reclaim_reent+0x80>
 801c814:	2500      	movs	r5, #0
 801c816:	e7ef      	b.n	801c7f8 <_reclaim_reent+0x84>
 801c818:	bd70      	pop	{r4, r5, r6, pc}
 801c81a:	bf00      	nop
 801c81c:	200021d8 	.word	0x200021d8

0801c820 <_lseek_r>:
 801c820:	b538      	push	{r3, r4, r5, lr}
 801c822:	4d07      	ldr	r5, [pc, #28]	; (801c840 <_lseek_r+0x20>)
 801c824:	4604      	mov	r4, r0
 801c826:	4608      	mov	r0, r1
 801c828:	4611      	mov	r1, r2
 801c82a:	2200      	movs	r2, #0
 801c82c:	602a      	str	r2, [r5, #0]
 801c82e:	461a      	mov	r2, r3
 801c830:	f7e6 fb0c 	bl	8002e4c <_lseek>
 801c834:	1c43      	adds	r3, r0, #1
 801c836:	d102      	bne.n	801c83e <_lseek_r+0x1e>
 801c838:	682b      	ldr	r3, [r5, #0]
 801c83a:	b103      	cbz	r3, 801c83e <_lseek_r+0x1e>
 801c83c:	6023      	str	r3, [r4, #0]
 801c83e:	bd38      	pop	{r3, r4, r5, pc}
 801c840:	20010ccc 	.word	0x20010ccc

0801c844 <_read_r>:
 801c844:	b538      	push	{r3, r4, r5, lr}
 801c846:	4d07      	ldr	r5, [pc, #28]	; (801c864 <_read_r+0x20>)
 801c848:	4604      	mov	r4, r0
 801c84a:	4608      	mov	r0, r1
 801c84c:	4611      	mov	r1, r2
 801c84e:	2200      	movs	r2, #0
 801c850:	602a      	str	r2, [r5, #0]
 801c852:	461a      	mov	r2, r3
 801c854:	f7e6 fa9a 	bl	8002d8c <_read>
 801c858:	1c43      	adds	r3, r0, #1
 801c85a:	d102      	bne.n	801c862 <_read_r+0x1e>
 801c85c:	682b      	ldr	r3, [r5, #0]
 801c85e:	b103      	cbz	r3, 801c862 <_read_r+0x1e>
 801c860:	6023      	str	r3, [r4, #0]
 801c862:	bd38      	pop	{r3, r4, r5, pc}
 801c864:	20010ccc 	.word	0x20010ccc

0801c868 <_sbrk_r>:
 801c868:	b538      	push	{r3, r4, r5, lr}
 801c86a:	4d06      	ldr	r5, [pc, #24]	; (801c884 <_sbrk_r+0x1c>)
 801c86c:	2300      	movs	r3, #0
 801c86e:	4604      	mov	r4, r0
 801c870:	4608      	mov	r0, r1
 801c872:	602b      	str	r3, [r5, #0]
 801c874:	f7e6 faf8 	bl	8002e68 <_sbrk>
 801c878:	1c43      	adds	r3, r0, #1
 801c87a:	d102      	bne.n	801c882 <_sbrk_r+0x1a>
 801c87c:	682b      	ldr	r3, [r5, #0]
 801c87e:	b103      	cbz	r3, 801c882 <_sbrk_r+0x1a>
 801c880:	6023      	str	r3, [r4, #0]
 801c882:	bd38      	pop	{r3, r4, r5, pc}
 801c884:	20010ccc 	.word	0x20010ccc

0801c888 <_write_r>:
 801c888:	b538      	push	{r3, r4, r5, lr}
 801c88a:	4d07      	ldr	r5, [pc, #28]	; (801c8a8 <_write_r+0x20>)
 801c88c:	4604      	mov	r4, r0
 801c88e:	4608      	mov	r0, r1
 801c890:	4611      	mov	r1, r2
 801c892:	2200      	movs	r2, #0
 801c894:	602a      	str	r2, [r5, #0]
 801c896:	461a      	mov	r2, r3
 801c898:	f7e6 fa95 	bl	8002dc6 <_write>
 801c89c:	1c43      	adds	r3, r0, #1
 801c89e:	d102      	bne.n	801c8a6 <_write_r+0x1e>
 801c8a0:	682b      	ldr	r3, [r5, #0]
 801c8a2:	b103      	cbz	r3, 801c8a6 <_write_r+0x1e>
 801c8a4:	6023      	str	r3, [r4, #0]
 801c8a6:	bd38      	pop	{r3, r4, r5, pc}
 801c8a8:	20010ccc 	.word	0x20010ccc

0801c8ac <__errno>:
 801c8ac:	4b01      	ldr	r3, [pc, #4]	; (801c8b4 <__errno+0x8>)
 801c8ae:	6818      	ldr	r0, [r3, #0]
 801c8b0:	4770      	bx	lr
 801c8b2:	bf00      	nop
 801c8b4:	200021d8 	.word	0x200021d8

0801c8b8 <__libc_init_array>:
 801c8b8:	b570      	push	{r4, r5, r6, lr}
 801c8ba:	4d0d      	ldr	r5, [pc, #52]	; (801c8f0 <__libc_init_array+0x38>)
 801c8bc:	4c0d      	ldr	r4, [pc, #52]	; (801c8f4 <__libc_init_array+0x3c>)
 801c8be:	1b64      	subs	r4, r4, r5
 801c8c0:	10a4      	asrs	r4, r4, #2
 801c8c2:	2600      	movs	r6, #0
 801c8c4:	42a6      	cmp	r6, r4
 801c8c6:	d109      	bne.n	801c8dc <__libc_init_array+0x24>
 801c8c8:	4d0b      	ldr	r5, [pc, #44]	; (801c8f8 <__libc_init_array+0x40>)
 801c8ca:	4c0c      	ldr	r4, [pc, #48]	; (801c8fc <__libc_init_array+0x44>)
 801c8cc:	f000 ff00 	bl	801d6d0 <_init>
 801c8d0:	1b64      	subs	r4, r4, r5
 801c8d2:	10a4      	asrs	r4, r4, #2
 801c8d4:	2600      	movs	r6, #0
 801c8d6:	42a6      	cmp	r6, r4
 801c8d8:	d105      	bne.n	801c8e6 <__libc_init_array+0x2e>
 801c8da:	bd70      	pop	{r4, r5, r6, pc}
 801c8dc:	f855 3b04 	ldr.w	r3, [r5], #4
 801c8e0:	4798      	blx	r3
 801c8e2:	3601      	adds	r6, #1
 801c8e4:	e7ee      	b.n	801c8c4 <__libc_init_array+0xc>
 801c8e6:	f855 3b04 	ldr.w	r3, [r5], #4
 801c8ea:	4798      	blx	r3
 801c8ec:	3601      	adds	r6, #1
 801c8ee:	e7f2      	b.n	801c8d6 <__libc_init_array+0x1e>
 801c8f0:	0801f728 	.word	0x0801f728
 801c8f4:	0801f728 	.word	0x0801f728
 801c8f8:	0801f728 	.word	0x0801f728
 801c8fc:	0801f740 	.word	0x0801f740

0801c900 <__retarget_lock_init_recursive>:
 801c900:	4770      	bx	lr

0801c902 <__retarget_lock_acquire_recursive>:
 801c902:	4770      	bx	lr

0801c904 <__retarget_lock_release_recursive>:
 801c904:	4770      	bx	lr

0801c906 <strcpy>:
 801c906:	4603      	mov	r3, r0
 801c908:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c90c:	f803 2b01 	strb.w	r2, [r3], #1
 801c910:	2a00      	cmp	r2, #0
 801c912:	d1f9      	bne.n	801c908 <strcpy+0x2>
 801c914:	4770      	bx	lr

0801c916 <memcpy>:
 801c916:	440a      	add	r2, r1
 801c918:	4291      	cmp	r1, r2
 801c91a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801c91e:	d100      	bne.n	801c922 <memcpy+0xc>
 801c920:	4770      	bx	lr
 801c922:	b510      	push	{r4, lr}
 801c924:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c928:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c92c:	4291      	cmp	r1, r2
 801c92e:	d1f9      	bne.n	801c924 <memcpy+0xe>
 801c930:	bd10      	pop	{r4, pc}
	...

0801c934 <__assert_func>:
 801c934:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c936:	4614      	mov	r4, r2
 801c938:	461a      	mov	r2, r3
 801c93a:	4b09      	ldr	r3, [pc, #36]	; (801c960 <__assert_func+0x2c>)
 801c93c:	681b      	ldr	r3, [r3, #0]
 801c93e:	4605      	mov	r5, r0
 801c940:	68d8      	ldr	r0, [r3, #12]
 801c942:	b14c      	cbz	r4, 801c958 <__assert_func+0x24>
 801c944:	4b07      	ldr	r3, [pc, #28]	; (801c964 <__assert_func+0x30>)
 801c946:	9100      	str	r1, [sp, #0]
 801c948:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c94c:	4906      	ldr	r1, [pc, #24]	; (801c968 <__assert_func+0x34>)
 801c94e:	462b      	mov	r3, r5
 801c950:	f000 fc04 	bl	801d15c <fiprintf>
 801c954:	f000 fc14 	bl	801d180 <abort>
 801c958:	4b04      	ldr	r3, [pc, #16]	; (801c96c <__assert_func+0x38>)
 801c95a:	461c      	mov	r4, r3
 801c95c:	e7f3      	b.n	801c946 <__assert_func+0x12>
 801c95e:	bf00      	nop
 801c960:	200021d8 	.word	0x200021d8
 801c964:	0801f6b0 	.word	0x0801f6b0
 801c968:	0801f6bd 	.word	0x0801f6bd
 801c96c:	0801f6eb 	.word	0x0801f6eb

0801c970 <__env_lock>:
 801c970:	4801      	ldr	r0, [pc, #4]	; (801c978 <__env_lock+0x8>)
 801c972:	f7ff bfc6 	b.w	801c902 <__retarget_lock_acquire_recursive>
 801c976:	bf00      	nop
 801c978:	20010cd0 	.word	0x20010cd0

0801c97c <__env_unlock>:
 801c97c:	4801      	ldr	r0, [pc, #4]	; (801c984 <__env_unlock+0x8>)
 801c97e:	f7ff bfc1 	b.w	801c904 <__retarget_lock_release_recursive>
 801c982:	bf00      	nop
 801c984:	20010cd0 	.word	0x20010cd0

0801c988 <_free_r>:
 801c988:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c98a:	2900      	cmp	r1, #0
 801c98c:	d044      	beq.n	801ca18 <_free_r+0x90>
 801c98e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c992:	9001      	str	r0, [sp, #4]
 801c994:	2b00      	cmp	r3, #0
 801c996:	f1a1 0404 	sub.w	r4, r1, #4
 801c99a:	bfb8      	it	lt
 801c99c:	18e4      	addlt	r4, r4, r3
 801c99e:	f7ff fbc1 	bl	801c124 <__malloc_lock>
 801c9a2:	4a1e      	ldr	r2, [pc, #120]	; (801ca1c <_free_r+0x94>)
 801c9a4:	9801      	ldr	r0, [sp, #4]
 801c9a6:	6813      	ldr	r3, [r2, #0]
 801c9a8:	b933      	cbnz	r3, 801c9b8 <_free_r+0x30>
 801c9aa:	6063      	str	r3, [r4, #4]
 801c9ac:	6014      	str	r4, [r2, #0]
 801c9ae:	b003      	add	sp, #12
 801c9b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c9b4:	f7ff bbbc 	b.w	801c130 <__malloc_unlock>
 801c9b8:	42a3      	cmp	r3, r4
 801c9ba:	d908      	bls.n	801c9ce <_free_r+0x46>
 801c9bc:	6825      	ldr	r5, [r4, #0]
 801c9be:	1961      	adds	r1, r4, r5
 801c9c0:	428b      	cmp	r3, r1
 801c9c2:	bf01      	itttt	eq
 801c9c4:	6819      	ldreq	r1, [r3, #0]
 801c9c6:	685b      	ldreq	r3, [r3, #4]
 801c9c8:	1949      	addeq	r1, r1, r5
 801c9ca:	6021      	streq	r1, [r4, #0]
 801c9cc:	e7ed      	b.n	801c9aa <_free_r+0x22>
 801c9ce:	461a      	mov	r2, r3
 801c9d0:	685b      	ldr	r3, [r3, #4]
 801c9d2:	b10b      	cbz	r3, 801c9d8 <_free_r+0x50>
 801c9d4:	42a3      	cmp	r3, r4
 801c9d6:	d9fa      	bls.n	801c9ce <_free_r+0x46>
 801c9d8:	6811      	ldr	r1, [r2, #0]
 801c9da:	1855      	adds	r5, r2, r1
 801c9dc:	42a5      	cmp	r5, r4
 801c9de:	d10b      	bne.n	801c9f8 <_free_r+0x70>
 801c9e0:	6824      	ldr	r4, [r4, #0]
 801c9e2:	4421      	add	r1, r4
 801c9e4:	1854      	adds	r4, r2, r1
 801c9e6:	42a3      	cmp	r3, r4
 801c9e8:	6011      	str	r1, [r2, #0]
 801c9ea:	d1e0      	bne.n	801c9ae <_free_r+0x26>
 801c9ec:	681c      	ldr	r4, [r3, #0]
 801c9ee:	685b      	ldr	r3, [r3, #4]
 801c9f0:	6053      	str	r3, [r2, #4]
 801c9f2:	440c      	add	r4, r1
 801c9f4:	6014      	str	r4, [r2, #0]
 801c9f6:	e7da      	b.n	801c9ae <_free_r+0x26>
 801c9f8:	d902      	bls.n	801ca00 <_free_r+0x78>
 801c9fa:	230c      	movs	r3, #12
 801c9fc:	6003      	str	r3, [r0, #0]
 801c9fe:	e7d6      	b.n	801c9ae <_free_r+0x26>
 801ca00:	6825      	ldr	r5, [r4, #0]
 801ca02:	1961      	adds	r1, r4, r5
 801ca04:	428b      	cmp	r3, r1
 801ca06:	bf04      	itt	eq
 801ca08:	6819      	ldreq	r1, [r3, #0]
 801ca0a:	685b      	ldreq	r3, [r3, #4]
 801ca0c:	6063      	str	r3, [r4, #4]
 801ca0e:	bf04      	itt	eq
 801ca10:	1949      	addeq	r1, r1, r5
 801ca12:	6021      	streq	r1, [r4, #0]
 801ca14:	6054      	str	r4, [r2, #4]
 801ca16:	e7ca      	b.n	801c9ae <_free_r+0x26>
 801ca18:	b003      	add	sp, #12
 801ca1a:	bd30      	pop	{r4, r5, pc}
 801ca1c:	20010b88 	.word	0x20010b88

0801ca20 <_malloc_usable_size_r>:
 801ca20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ca24:	1f18      	subs	r0, r3, #4
 801ca26:	2b00      	cmp	r3, #0
 801ca28:	bfbc      	itt	lt
 801ca2a:	580b      	ldrlt	r3, [r1, r0]
 801ca2c:	18c0      	addlt	r0, r0, r3
 801ca2e:	4770      	bx	lr

0801ca30 <__ssputs_r>:
 801ca30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ca34:	688e      	ldr	r6, [r1, #8]
 801ca36:	461f      	mov	r7, r3
 801ca38:	42be      	cmp	r6, r7
 801ca3a:	680b      	ldr	r3, [r1, #0]
 801ca3c:	4682      	mov	sl, r0
 801ca3e:	460c      	mov	r4, r1
 801ca40:	4690      	mov	r8, r2
 801ca42:	d82c      	bhi.n	801ca9e <__ssputs_r+0x6e>
 801ca44:	898a      	ldrh	r2, [r1, #12]
 801ca46:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ca4a:	d026      	beq.n	801ca9a <__ssputs_r+0x6a>
 801ca4c:	6965      	ldr	r5, [r4, #20]
 801ca4e:	6909      	ldr	r1, [r1, #16]
 801ca50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ca54:	eba3 0901 	sub.w	r9, r3, r1
 801ca58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ca5c:	1c7b      	adds	r3, r7, #1
 801ca5e:	444b      	add	r3, r9
 801ca60:	106d      	asrs	r5, r5, #1
 801ca62:	429d      	cmp	r5, r3
 801ca64:	bf38      	it	cc
 801ca66:	461d      	movcc	r5, r3
 801ca68:	0553      	lsls	r3, r2, #21
 801ca6a:	d527      	bpl.n	801cabc <__ssputs_r+0x8c>
 801ca6c:	4629      	mov	r1, r5
 801ca6e:	f7ff fad9 	bl	801c024 <_malloc_r>
 801ca72:	4606      	mov	r6, r0
 801ca74:	b360      	cbz	r0, 801cad0 <__ssputs_r+0xa0>
 801ca76:	6921      	ldr	r1, [r4, #16]
 801ca78:	464a      	mov	r2, r9
 801ca7a:	f7ff ff4c 	bl	801c916 <memcpy>
 801ca7e:	89a3      	ldrh	r3, [r4, #12]
 801ca80:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ca84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ca88:	81a3      	strh	r3, [r4, #12]
 801ca8a:	6126      	str	r6, [r4, #16]
 801ca8c:	6165      	str	r5, [r4, #20]
 801ca8e:	444e      	add	r6, r9
 801ca90:	eba5 0509 	sub.w	r5, r5, r9
 801ca94:	6026      	str	r6, [r4, #0]
 801ca96:	60a5      	str	r5, [r4, #8]
 801ca98:	463e      	mov	r6, r7
 801ca9a:	42be      	cmp	r6, r7
 801ca9c:	d900      	bls.n	801caa0 <__ssputs_r+0x70>
 801ca9e:	463e      	mov	r6, r7
 801caa0:	6820      	ldr	r0, [r4, #0]
 801caa2:	4632      	mov	r2, r6
 801caa4:	4641      	mov	r1, r8
 801caa6:	f7ff fdeb 	bl	801c680 <memmove>
 801caaa:	68a3      	ldr	r3, [r4, #8]
 801caac:	1b9b      	subs	r3, r3, r6
 801caae:	60a3      	str	r3, [r4, #8]
 801cab0:	6823      	ldr	r3, [r4, #0]
 801cab2:	4433      	add	r3, r6
 801cab4:	6023      	str	r3, [r4, #0]
 801cab6:	2000      	movs	r0, #0
 801cab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cabc:	462a      	mov	r2, r5
 801cabe:	f7ff fbb1 	bl	801c224 <_realloc_r>
 801cac2:	4606      	mov	r6, r0
 801cac4:	2800      	cmp	r0, #0
 801cac6:	d1e0      	bne.n	801ca8a <__ssputs_r+0x5a>
 801cac8:	6921      	ldr	r1, [r4, #16]
 801caca:	4650      	mov	r0, sl
 801cacc:	f7ff ff5c 	bl	801c988 <_free_r>
 801cad0:	230c      	movs	r3, #12
 801cad2:	f8ca 3000 	str.w	r3, [sl]
 801cad6:	89a3      	ldrh	r3, [r4, #12]
 801cad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cadc:	81a3      	strh	r3, [r4, #12]
 801cade:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cae2:	e7e9      	b.n	801cab8 <__ssputs_r+0x88>

0801cae4 <_svfiprintf_r>:
 801cae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cae8:	4698      	mov	r8, r3
 801caea:	898b      	ldrh	r3, [r1, #12]
 801caec:	061b      	lsls	r3, r3, #24
 801caee:	b09d      	sub	sp, #116	; 0x74
 801caf0:	4607      	mov	r7, r0
 801caf2:	460d      	mov	r5, r1
 801caf4:	4614      	mov	r4, r2
 801caf6:	d50e      	bpl.n	801cb16 <_svfiprintf_r+0x32>
 801caf8:	690b      	ldr	r3, [r1, #16]
 801cafa:	b963      	cbnz	r3, 801cb16 <_svfiprintf_r+0x32>
 801cafc:	2140      	movs	r1, #64	; 0x40
 801cafe:	f7ff fa91 	bl	801c024 <_malloc_r>
 801cb02:	6028      	str	r0, [r5, #0]
 801cb04:	6128      	str	r0, [r5, #16]
 801cb06:	b920      	cbnz	r0, 801cb12 <_svfiprintf_r+0x2e>
 801cb08:	230c      	movs	r3, #12
 801cb0a:	603b      	str	r3, [r7, #0]
 801cb0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cb10:	e0d0      	b.n	801ccb4 <_svfiprintf_r+0x1d0>
 801cb12:	2340      	movs	r3, #64	; 0x40
 801cb14:	616b      	str	r3, [r5, #20]
 801cb16:	2300      	movs	r3, #0
 801cb18:	9309      	str	r3, [sp, #36]	; 0x24
 801cb1a:	2320      	movs	r3, #32
 801cb1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cb20:	f8cd 800c 	str.w	r8, [sp, #12]
 801cb24:	2330      	movs	r3, #48	; 0x30
 801cb26:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801cccc <_svfiprintf_r+0x1e8>
 801cb2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cb2e:	f04f 0901 	mov.w	r9, #1
 801cb32:	4623      	mov	r3, r4
 801cb34:	469a      	mov	sl, r3
 801cb36:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cb3a:	b10a      	cbz	r2, 801cb40 <_svfiprintf_r+0x5c>
 801cb3c:	2a25      	cmp	r2, #37	; 0x25
 801cb3e:	d1f9      	bne.n	801cb34 <_svfiprintf_r+0x50>
 801cb40:	ebba 0b04 	subs.w	fp, sl, r4
 801cb44:	d00b      	beq.n	801cb5e <_svfiprintf_r+0x7a>
 801cb46:	465b      	mov	r3, fp
 801cb48:	4622      	mov	r2, r4
 801cb4a:	4629      	mov	r1, r5
 801cb4c:	4638      	mov	r0, r7
 801cb4e:	f7ff ff6f 	bl	801ca30 <__ssputs_r>
 801cb52:	3001      	adds	r0, #1
 801cb54:	f000 80a9 	beq.w	801ccaa <_svfiprintf_r+0x1c6>
 801cb58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cb5a:	445a      	add	r2, fp
 801cb5c:	9209      	str	r2, [sp, #36]	; 0x24
 801cb5e:	f89a 3000 	ldrb.w	r3, [sl]
 801cb62:	2b00      	cmp	r3, #0
 801cb64:	f000 80a1 	beq.w	801ccaa <_svfiprintf_r+0x1c6>
 801cb68:	2300      	movs	r3, #0
 801cb6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cb6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cb72:	f10a 0a01 	add.w	sl, sl, #1
 801cb76:	9304      	str	r3, [sp, #16]
 801cb78:	9307      	str	r3, [sp, #28]
 801cb7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cb7e:	931a      	str	r3, [sp, #104]	; 0x68
 801cb80:	4654      	mov	r4, sl
 801cb82:	2205      	movs	r2, #5
 801cb84:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cb88:	4850      	ldr	r0, [pc, #320]	; (801cccc <_svfiprintf_r+0x1e8>)
 801cb8a:	f7e3 fb69 	bl	8000260 <memchr>
 801cb8e:	9a04      	ldr	r2, [sp, #16]
 801cb90:	b9d8      	cbnz	r0, 801cbca <_svfiprintf_r+0xe6>
 801cb92:	06d0      	lsls	r0, r2, #27
 801cb94:	bf44      	itt	mi
 801cb96:	2320      	movmi	r3, #32
 801cb98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cb9c:	0711      	lsls	r1, r2, #28
 801cb9e:	bf44      	itt	mi
 801cba0:	232b      	movmi	r3, #43	; 0x2b
 801cba2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cba6:	f89a 3000 	ldrb.w	r3, [sl]
 801cbaa:	2b2a      	cmp	r3, #42	; 0x2a
 801cbac:	d015      	beq.n	801cbda <_svfiprintf_r+0xf6>
 801cbae:	9a07      	ldr	r2, [sp, #28]
 801cbb0:	4654      	mov	r4, sl
 801cbb2:	2000      	movs	r0, #0
 801cbb4:	f04f 0c0a 	mov.w	ip, #10
 801cbb8:	4621      	mov	r1, r4
 801cbba:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cbbe:	3b30      	subs	r3, #48	; 0x30
 801cbc0:	2b09      	cmp	r3, #9
 801cbc2:	d94d      	bls.n	801cc60 <_svfiprintf_r+0x17c>
 801cbc4:	b1b0      	cbz	r0, 801cbf4 <_svfiprintf_r+0x110>
 801cbc6:	9207      	str	r2, [sp, #28]
 801cbc8:	e014      	b.n	801cbf4 <_svfiprintf_r+0x110>
 801cbca:	eba0 0308 	sub.w	r3, r0, r8
 801cbce:	fa09 f303 	lsl.w	r3, r9, r3
 801cbd2:	4313      	orrs	r3, r2
 801cbd4:	9304      	str	r3, [sp, #16]
 801cbd6:	46a2      	mov	sl, r4
 801cbd8:	e7d2      	b.n	801cb80 <_svfiprintf_r+0x9c>
 801cbda:	9b03      	ldr	r3, [sp, #12]
 801cbdc:	1d19      	adds	r1, r3, #4
 801cbde:	681b      	ldr	r3, [r3, #0]
 801cbe0:	9103      	str	r1, [sp, #12]
 801cbe2:	2b00      	cmp	r3, #0
 801cbe4:	bfbb      	ittet	lt
 801cbe6:	425b      	neglt	r3, r3
 801cbe8:	f042 0202 	orrlt.w	r2, r2, #2
 801cbec:	9307      	strge	r3, [sp, #28]
 801cbee:	9307      	strlt	r3, [sp, #28]
 801cbf0:	bfb8      	it	lt
 801cbf2:	9204      	strlt	r2, [sp, #16]
 801cbf4:	7823      	ldrb	r3, [r4, #0]
 801cbf6:	2b2e      	cmp	r3, #46	; 0x2e
 801cbf8:	d10c      	bne.n	801cc14 <_svfiprintf_r+0x130>
 801cbfa:	7863      	ldrb	r3, [r4, #1]
 801cbfc:	2b2a      	cmp	r3, #42	; 0x2a
 801cbfe:	d134      	bne.n	801cc6a <_svfiprintf_r+0x186>
 801cc00:	9b03      	ldr	r3, [sp, #12]
 801cc02:	1d1a      	adds	r2, r3, #4
 801cc04:	681b      	ldr	r3, [r3, #0]
 801cc06:	9203      	str	r2, [sp, #12]
 801cc08:	2b00      	cmp	r3, #0
 801cc0a:	bfb8      	it	lt
 801cc0c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801cc10:	3402      	adds	r4, #2
 801cc12:	9305      	str	r3, [sp, #20]
 801cc14:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801ccdc <_svfiprintf_r+0x1f8>
 801cc18:	7821      	ldrb	r1, [r4, #0]
 801cc1a:	2203      	movs	r2, #3
 801cc1c:	4650      	mov	r0, sl
 801cc1e:	f7e3 fb1f 	bl	8000260 <memchr>
 801cc22:	b138      	cbz	r0, 801cc34 <_svfiprintf_r+0x150>
 801cc24:	9b04      	ldr	r3, [sp, #16]
 801cc26:	eba0 000a 	sub.w	r0, r0, sl
 801cc2a:	2240      	movs	r2, #64	; 0x40
 801cc2c:	4082      	lsls	r2, r0
 801cc2e:	4313      	orrs	r3, r2
 801cc30:	3401      	adds	r4, #1
 801cc32:	9304      	str	r3, [sp, #16]
 801cc34:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cc38:	4825      	ldr	r0, [pc, #148]	; (801ccd0 <_svfiprintf_r+0x1ec>)
 801cc3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cc3e:	2206      	movs	r2, #6
 801cc40:	f7e3 fb0e 	bl	8000260 <memchr>
 801cc44:	2800      	cmp	r0, #0
 801cc46:	d038      	beq.n	801ccba <_svfiprintf_r+0x1d6>
 801cc48:	4b22      	ldr	r3, [pc, #136]	; (801ccd4 <_svfiprintf_r+0x1f0>)
 801cc4a:	bb1b      	cbnz	r3, 801cc94 <_svfiprintf_r+0x1b0>
 801cc4c:	9b03      	ldr	r3, [sp, #12]
 801cc4e:	3307      	adds	r3, #7
 801cc50:	f023 0307 	bic.w	r3, r3, #7
 801cc54:	3308      	adds	r3, #8
 801cc56:	9303      	str	r3, [sp, #12]
 801cc58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cc5a:	4433      	add	r3, r6
 801cc5c:	9309      	str	r3, [sp, #36]	; 0x24
 801cc5e:	e768      	b.n	801cb32 <_svfiprintf_r+0x4e>
 801cc60:	fb0c 3202 	mla	r2, ip, r2, r3
 801cc64:	460c      	mov	r4, r1
 801cc66:	2001      	movs	r0, #1
 801cc68:	e7a6      	b.n	801cbb8 <_svfiprintf_r+0xd4>
 801cc6a:	2300      	movs	r3, #0
 801cc6c:	3401      	adds	r4, #1
 801cc6e:	9305      	str	r3, [sp, #20]
 801cc70:	4619      	mov	r1, r3
 801cc72:	f04f 0c0a 	mov.w	ip, #10
 801cc76:	4620      	mov	r0, r4
 801cc78:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cc7c:	3a30      	subs	r2, #48	; 0x30
 801cc7e:	2a09      	cmp	r2, #9
 801cc80:	d903      	bls.n	801cc8a <_svfiprintf_r+0x1a6>
 801cc82:	2b00      	cmp	r3, #0
 801cc84:	d0c6      	beq.n	801cc14 <_svfiprintf_r+0x130>
 801cc86:	9105      	str	r1, [sp, #20]
 801cc88:	e7c4      	b.n	801cc14 <_svfiprintf_r+0x130>
 801cc8a:	fb0c 2101 	mla	r1, ip, r1, r2
 801cc8e:	4604      	mov	r4, r0
 801cc90:	2301      	movs	r3, #1
 801cc92:	e7f0      	b.n	801cc76 <_svfiprintf_r+0x192>
 801cc94:	ab03      	add	r3, sp, #12
 801cc96:	9300      	str	r3, [sp, #0]
 801cc98:	462a      	mov	r2, r5
 801cc9a:	4b0f      	ldr	r3, [pc, #60]	; (801ccd8 <_svfiprintf_r+0x1f4>)
 801cc9c:	a904      	add	r1, sp, #16
 801cc9e:	4638      	mov	r0, r7
 801cca0:	f3af 8000 	nop.w
 801cca4:	1c42      	adds	r2, r0, #1
 801cca6:	4606      	mov	r6, r0
 801cca8:	d1d6      	bne.n	801cc58 <_svfiprintf_r+0x174>
 801ccaa:	89ab      	ldrh	r3, [r5, #12]
 801ccac:	065b      	lsls	r3, r3, #25
 801ccae:	f53f af2d 	bmi.w	801cb0c <_svfiprintf_r+0x28>
 801ccb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ccb4:	b01d      	add	sp, #116	; 0x74
 801ccb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ccba:	ab03      	add	r3, sp, #12
 801ccbc:	9300      	str	r3, [sp, #0]
 801ccbe:	462a      	mov	r2, r5
 801ccc0:	4b05      	ldr	r3, [pc, #20]	; (801ccd8 <_svfiprintf_r+0x1f4>)
 801ccc2:	a904      	add	r1, sp, #16
 801ccc4:	4638      	mov	r0, r7
 801ccc6:	f000 f879 	bl	801cdbc <_printf_i>
 801ccca:	e7eb      	b.n	801cca4 <_svfiprintf_r+0x1c0>
 801cccc:	0801f6ec 	.word	0x0801f6ec
 801ccd0:	0801f6f6 	.word	0x0801f6f6
 801ccd4:	00000000 	.word	0x00000000
 801ccd8:	0801ca31 	.word	0x0801ca31
 801ccdc:	0801f6f2 	.word	0x0801f6f2

0801cce0 <_printf_common>:
 801cce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cce4:	4616      	mov	r6, r2
 801cce6:	4699      	mov	r9, r3
 801cce8:	688a      	ldr	r2, [r1, #8]
 801ccea:	690b      	ldr	r3, [r1, #16]
 801ccec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ccf0:	4293      	cmp	r3, r2
 801ccf2:	bfb8      	it	lt
 801ccf4:	4613      	movlt	r3, r2
 801ccf6:	6033      	str	r3, [r6, #0]
 801ccf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ccfc:	4607      	mov	r7, r0
 801ccfe:	460c      	mov	r4, r1
 801cd00:	b10a      	cbz	r2, 801cd06 <_printf_common+0x26>
 801cd02:	3301      	adds	r3, #1
 801cd04:	6033      	str	r3, [r6, #0]
 801cd06:	6823      	ldr	r3, [r4, #0]
 801cd08:	0699      	lsls	r1, r3, #26
 801cd0a:	bf42      	ittt	mi
 801cd0c:	6833      	ldrmi	r3, [r6, #0]
 801cd0e:	3302      	addmi	r3, #2
 801cd10:	6033      	strmi	r3, [r6, #0]
 801cd12:	6825      	ldr	r5, [r4, #0]
 801cd14:	f015 0506 	ands.w	r5, r5, #6
 801cd18:	d106      	bne.n	801cd28 <_printf_common+0x48>
 801cd1a:	f104 0a19 	add.w	sl, r4, #25
 801cd1e:	68e3      	ldr	r3, [r4, #12]
 801cd20:	6832      	ldr	r2, [r6, #0]
 801cd22:	1a9b      	subs	r3, r3, r2
 801cd24:	42ab      	cmp	r3, r5
 801cd26:	dc26      	bgt.n	801cd76 <_printf_common+0x96>
 801cd28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801cd2c:	1e13      	subs	r3, r2, #0
 801cd2e:	6822      	ldr	r2, [r4, #0]
 801cd30:	bf18      	it	ne
 801cd32:	2301      	movne	r3, #1
 801cd34:	0692      	lsls	r2, r2, #26
 801cd36:	d42b      	bmi.n	801cd90 <_printf_common+0xb0>
 801cd38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801cd3c:	4649      	mov	r1, r9
 801cd3e:	4638      	mov	r0, r7
 801cd40:	47c0      	blx	r8
 801cd42:	3001      	adds	r0, #1
 801cd44:	d01e      	beq.n	801cd84 <_printf_common+0xa4>
 801cd46:	6823      	ldr	r3, [r4, #0]
 801cd48:	6922      	ldr	r2, [r4, #16]
 801cd4a:	f003 0306 	and.w	r3, r3, #6
 801cd4e:	2b04      	cmp	r3, #4
 801cd50:	bf02      	ittt	eq
 801cd52:	68e5      	ldreq	r5, [r4, #12]
 801cd54:	6833      	ldreq	r3, [r6, #0]
 801cd56:	1aed      	subeq	r5, r5, r3
 801cd58:	68a3      	ldr	r3, [r4, #8]
 801cd5a:	bf0c      	ite	eq
 801cd5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cd60:	2500      	movne	r5, #0
 801cd62:	4293      	cmp	r3, r2
 801cd64:	bfc4      	itt	gt
 801cd66:	1a9b      	subgt	r3, r3, r2
 801cd68:	18ed      	addgt	r5, r5, r3
 801cd6a:	2600      	movs	r6, #0
 801cd6c:	341a      	adds	r4, #26
 801cd6e:	42b5      	cmp	r5, r6
 801cd70:	d11a      	bne.n	801cda8 <_printf_common+0xc8>
 801cd72:	2000      	movs	r0, #0
 801cd74:	e008      	b.n	801cd88 <_printf_common+0xa8>
 801cd76:	2301      	movs	r3, #1
 801cd78:	4652      	mov	r2, sl
 801cd7a:	4649      	mov	r1, r9
 801cd7c:	4638      	mov	r0, r7
 801cd7e:	47c0      	blx	r8
 801cd80:	3001      	adds	r0, #1
 801cd82:	d103      	bne.n	801cd8c <_printf_common+0xac>
 801cd84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cd88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cd8c:	3501      	adds	r5, #1
 801cd8e:	e7c6      	b.n	801cd1e <_printf_common+0x3e>
 801cd90:	18e1      	adds	r1, r4, r3
 801cd92:	1c5a      	adds	r2, r3, #1
 801cd94:	2030      	movs	r0, #48	; 0x30
 801cd96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801cd9a:	4422      	add	r2, r4
 801cd9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801cda0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801cda4:	3302      	adds	r3, #2
 801cda6:	e7c7      	b.n	801cd38 <_printf_common+0x58>
 801cda8:	2301      	movs	r3, #1
 801cdaa:	4622      	mov	r2, r4
 801cdac:	4649      	mov	r1, r9
 801cdae:	4638      	mov	r0, r7
 801cdb0:	47c0      	blx	r8
 801cdb2:	3001      	adds	r0, #1
 801cdb4:	d0e6      	beq.n	801cd84 <_printf_common+0xa4>
 801cdb6:	3601      	adds	r6, #1
 801cdb8:	e7d9      	b.n	801cd6e <_printf_common+0x8e>
	...

0801cdbc <_printf_i>:
 801cdbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cdc0:	7e0f      	ldrb	r7, [r1, #24]
 801cdc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801cdc4:	2f78      	cmp	r7, #120	; 0x78
 801cdc6:	4691      	mov	r9, r2
 801cdc8:	4680      	mov	r8, r0
 801cdca:	460c      	mov	r4, r1
 801cdcc:	469a      	mov	sl, r3
 801cdce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801cdd2:	d807      	bhi.n	801cde4 <_printf_i+0x28>
 801cdd4:	2f62      	cmp	r7, #98	; 0x62
 801cdd6:	d80a      	bhi.n	801cdee <_printf_i+0x32>
 801cdd8:	2f00      	cmp	r7, #0
 801cdda:	f000 80d4 	beq.w	801cf86 <_printf_i+0x1ca>
 801cdde:	2f58      	cmp	r7, #88	; 0x58
 801cde0:	f000 80c0 	beq.w	801cf64 <_printf_i+0x1a8>
 801cde4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801cde8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801cdec:	e03a      	b.n	801ce64 <_printf_i+0xa8>
 801cdee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801cdf2:	2b15      	cmp	r3, #21
 801cdf4:	d8f6      	bhi.n	801cde4 <_printf_i+0x28>
 801cdf6:	a101      	add	r1, pc, #4	; (adr r1, 801cdfc <_printf_i+0x40>)
 801cdf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801cdfc:	0801ce55 	.word	0x0801ce55
 801ce00:	0801ce69 	.word	0x0801ce69
 801ce04:	0801cde5 	.word	0x0801cde5
 801ce08:	0801cde5 	.word	0x0801cde5
 801ce0c:	0801cde5 	.word	0x0801cde5
 801ce10:	0801cde5 	.word	0x0801cde5
 801ce14:	0801ce69 	.word	0x0801ce69
 801ce18:	0801cde5 	.word	0x0801cde5
 801ce1c:	0801cde5 	.word	0x0801cde5
 801ce20:	0801cde5 	.word	0x0801cde5
 801ce24:	0801cde5 	.word	0x0801cde5
 801ce28:	0801cf6d 	.word	0x0801cf6d
 801ce2c:	0801ce95 	.word	0x0801ce95
 801ce30:	0801cf27 	.word	0x0801cf27
 801ce34:	0801cde5 	.word	0x0801cde5
 801ce38:	0801cde5 	.word	0x0801cde5
 801ce3c:	0801cf8f 	.word	0x0801cf8f
 801ce40:	0801cde5 	.word	0x0801cde5
 801ce44:	0801ce95 	.word	0x0801ce95
 801ce48:	0801cde5 	.word	0x0801cde5
 801ce4c:	0801cde5 	.word	0x0801cde5
 801ce50:	0801cf2f 	.word	0x0801cf2f
 801ce54:	682b      	ldr	r3, [r5, #0]
 801ce56:	1d1a      	adds	r2, r3, #4
 801ce58:	681b      	ldr	r3, [r3, #0]
 801ce5a:	602a      	str	r2, [r5, #0]
 801ce5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ce60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ce64:	2301      	movs	r3, #1
 801ce66:	e09f      	b.n	801cfa8 <_printf_i+0x1ec>
 801ce68:	6820      	ldr	r0, [r4, #0]
 801ce6a:	682b      	ldr	r3, [r5, #0]
 801ce6c:	0607      	lsls	r7, r0, #24
 801ce6e:	f103 0104 	add.w	r1, r3, #4
 801ce72:	6029      	str	r1, [r5, #0]
 801ce74:	d501      	bpl.n	801ce7a <_printf_i+0xbe>
 801ce76:	681e      	ldr	r6, [r3, #0]
 801ce78:	e003      	b.n	801ce82 <_printf_i+0xc6>
 801ce7a:	0646      	lsls	r6, r0, #25
 801ce7c:	d5fb      	bpl.n	801ce76 <_printf_i+0xba>
 801ce7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 801ce82:	2e00      	cmp	r6, #0
 801ce84:	da03      	bge.n	801ce8e <_printf_i+0xd2>
 801ce86:	232d      	movs	r3, #45	; 0x2d
 801ce88:	4276      	negs	r6, r6
 801ce8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ce8e:	485a      	ldr	r0, [pc, #360]	; (801cff8 <_printf_i+0x23c>)
 801ce90:	230a      	movs	r3, #10
 801ce92:	e012      	b.n	801ceba <_printf_i+0xfe>
 801ce94:	682b      	ldr	r3, [r5, #0]
 801ce96:	6820      	ldr	r0, [r4, #0]
 801ce98:	1d19      	adds	r1, r3, #4
 801ce9a:	6029      	str	r1, [r5, #0]
 801ce9c:	0605      	lsls	r5, r0, #24
 801ce9e:	d501      	bpl.n	801cea4 <_printf_i+0xe8>
 801cea0:	681e      	ldr	r6, [r3, #0]
 801cea2:	e002      	b.n	801ceaa <_printf_i+0xee>
 801cea4:	0641      	lsls	r1, r0, #25
 801cea6:	d5fb      	bpl.n	801cea0 <_printf_i+0xe4>
 801cea8:	881e      	ldrh	r6, [r3, #0]
 801ceaa:	4853      	ldr	r0, [pc, #332]	; (801cff8 <_printf_i+0x23c>)
 801ceac:	2f6f      	cmp	r7, #111	; 0x6f
 801ceae:	bf0c      	ite	eq
 801ceb0:	2308      	moveq	r3, #8
 801ceb2:	230a      	movne	r3, #10
 801ceb4:	2100      	movs	r1, #0
 801ceb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ceba:	6865      	ldr	r5, [r4, #4]
 801cebc:	60a5      	str	r5, [r4, #8]
 801cebe:	2d00      	cmp	r5, #0
 801cec0:	bfa2      	ittt	ge
 801cec2:	6821      	ldrge	r1, [r4, #0]
 801cec4:	f021 0104 	bicge.w	r1, r1, #4
 801cec8:	6021      	strge	r1, [r4, #0]
 801ceca:	b90e      	cbnz	r6, 801ced0 <_printf_i+0x114>
 801cecc:	2d00      	cmp	r5, #0
 801cece:	d04b      	beq.n	801cf68 <_printf_i+0x1ac>
 801ced0:	4615      	mov	r5, r2
 801ced2:	fbb6 f1f3 	udiv	r1, r6, r3
 801ced6:	fb03 6711 	mls	r7, r3, r1, r6
 801ceda:	5dc7      	ldrb	r7, [r0, r7]
 801cedc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801cee0:	4637      	mov	r7, r6
 801cee2:	42bb      	cmp	r3, r7
 801cee4:	460e      	mov	r6, r1
 801cee6:	d9f4      	bls.n	801ced2 <_printf_i+0x116>
 801cee8:	2b08      	cmp	r3, #8
 801ceea:	d10b      	bne.n	801cf04 <_printf_i+0x148>
 801ceec:	6823      	ldr	r3, [r4, #0]
 801ceee:	07de      	lsls	r6, r3, #31
 801cef0:	d508      	bpl.n	801cf04 <_printf_i+0x148>
 801cef2:	6923      	ldr	r3, [r4, #16]
 801cef4:	6861      	ldr	r1, [r4, #4]
 801cef6:	4299      	cmp	r1, r3
 801cef8:	bfde      	ittt	le
 801cefa:	2330      	movle	r3, #48	; 0x30
 801cefc:	f805 3c01 	strble.w	r3, [r5, #-1]
 801cf00:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801cf04:	1b52      	subs	r2, r2, r5
 801cf06:	6122      	str	r2, [r4, #16]
 801cf08:	f8cd a000 	str.w	sl, [sp]
 801cf0c:	464b      	mov	r3, r9
 801cf0e:	aa03      	add	r2, sp, #12
 801cf10:	4621      	mov	r1, r4
 801cf12:	4640      	mov	r0, r8
 801cf14:	f7ff fee4 	bl	801cce0 <_printf_common>
 801cf18:	3001      	adds	r0, #1
 801cf1a:	d14a      	bne.n	801cfb2 <_printf_i+0x1f6>
 801cf1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cf20:	b004      	add	sp, #16
 801cf22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cf26:	6823      	ldr	r3, [r4, #0]
 801cf28:	f043 0320 	orr.w	r3, r3, #32
 801cf2c:	6023      	str	r3, [r4, #0]
 801cf2e:	4833      	ldr	r0, [pc, #204]	; (801cffc <_printf_i+0x240>)
 801cf30:	2778      	movs	r7, #120	; 0x78
 801cf32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801cf36:	6823      	ldr	r3, [r4, #0]
 801cf38:	6829      	ldr	r1, [r5, #0]
 801cf3a:	061f      	lsls	r7, r3, #24
 801cf3c:	f851 6b04 	ldr.w	r6, [r1], #4
 801cf40:	d402      	bmi.n	801cf48 <_printf_i+0x18c>
 801cf42:	065f      	lsls	r7, r3, #25
 801cf44:	bf48      	it	mi
 801cf46:	b2b6      	uxthmi	r6, r6
 801cf48:	07df      	lsls	r7, r3, #31
 801cf4a:	bf48      	it	mi
 801cf4c:	f043 0320 	orrmi.w	r3, r3, #32
 801cf50:	6029      	str	r1, [r5, #0]
 801cf52:	bf48      	it	mi
 801cf54:	6023      	strmi	r3, [r4, #0]
 801cf56:	b91e      	cbnz	r6, 801cf60 <_printf_i+0x1a4>
 801cf58:	6823      	ldr	r3, [r4, #0]
 801cf5a:	f023 0320 	bic.w	r3, r3, #32
 801cf5e:	6023      	str	r3, [r4, #0]
 801cf60:	2310      	movs	r3, #16
 801cf62:	e7a7      	b.n	801ceb4 <_printf_i+0xf8>
 801cf64:	4824      	ldr	r0, [pc, #144]	; (801cff8 <_printf_i+0x23c>)
 801cf66:	e7e4      	b.n	801cf32 <_printf_i+0x176>
 801cf68:	4615      	mov	r5, r2
 801cf6a:	e7bd      	b.n	801cee8 <_printf_i+0x12c>
 801cf6c:	682b      	ldr	r3, [r5, #0]
 801cf6e:	6826      	ldr	r6, [r4, #0]
 801cf70:	6961      	ldr	r1, [r4, #20]
 801cf72:	1d18      	adds	r0, r3, #4
 801cf74:	6028      	str	r0, [r5, #0]
 801cf76:	0635      	lsls	r5, r6, #24
 801cf78:	681b      	ldr	r3, [r3, #0]
 801cf7a:	d501      	bpl.n	801cf80 <_printf_i+0x1c4>
 801cf7c:	6019      	str	r1, [r3, #0]
 801cf7e:	e002      	b.n	801cf86 <_printf_i+0x1ca>
 801cf80:	0670      	lsls	r0, r6, #25
 801cf82:	d5fb      	bpl.n	801cf7c <_printf_i+0x1c0>
 801cf84:	8019      	strh	r1, [r3, #0]
 801cf86:	2300      	movs	r3, #0
 801cf88:	6123      	str	r3, [r4, #16]
 801cf8a:	4615      	mov	r5, r2
 801cf8c:	e7bc      	b.n	801cf08 <_printf_i+0x14c>
 801cf8e:	682b      	ldr	r3, [r5, #0]
 801cf90:	1d1a      	adds	r2, r3, #4
 801cf92:	602a      	str	r2, [r5, #0]
 801cf94:	681d      	ldr	r5, [r3, #0]
 801cf96:	6862      	ldr	r2, [r4, #4]
 801cf98:	2100      	movs	r1, #0
 801cf9a:	4628      	mov	r0, r5
 801cf9c:	f7e3 f960 	bl	8000260 <memchr>
 801cfa0:	b108      	cbz	r0, 801cfa6 <_printf_i+0x1ea>
 801cfa2:	1b40      	subs	r0, r0, r5
 801cfa4:	6060      	str	r0, [r4, #4]
 801cfa6:	6863      	ldr	r3, [r4, #4]
 801cfa8:	6123      	str	r3, [r4, #16]
 801cfaa:	2300      	movs	r3, #0
 801cfac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cfb0:	e7aa      	b.n	801cf08 <_printf_i+0x14c>
 801cfb2:	6923      	ldr	r3, [r4, #16]
 801cfb4:	462a      	mov	r2, r5
 801cfb6:	4649      	mov	r1, r9
 801cfb8:	4640      	mov	r0, r8
 801cfba:	47d0      	blx	sl
 801cfbc:	3001      	adds	r0, #1
 801cfbe:	d0ad      	beq.n	801cf1c <_printf_i+0x160>
 801cfc0:	6823      	ldr	r3, [r4, #0]
 801cfc2:	079b      	lsls	r3, r3, #30
 801cfc4:	d413      	bmi.n	801cfee <_printf_i+0x232>
 801cfc6:	68e0      	ldr	r0, [r4, #12]
 801cfc8:	9b03      	ldr	r3, [sp, #12]
 801cfca:	4298      	cmp	r0, r3
 801cfcc:	bfb8      	it	lt
 801cfce:	4618      	movlt	r0, r3
 801cfd0:	e7a6      	b.n	801cf20 <_printf_i+0x164>
 801cfd2:	2301      	movs	r3, #1
 801cfd4:	4632      	mov	r2, r6
 801cfd6:	4649      	mov	r1, r9
 801cfd8:	4640      	mov	r0, r8
 801cfda:	47d0      	blx	sl
 801cfdc:	3001      	adds	r0, #1
 801cfde:	d09d      	beq.n	801cf1c <_printf_i+0x160>
 801cfe0:	3501      	adds	r5, #1
 801cfe2:	68e3      	ldr	r3, [r4, #12]
 801cfe4:	9903      	ldr	r1, [sp, #12]
 801cfe6:	1a5b      	subs	r3, r3, r1
 801cfe8:	42ab      	cmp	r3, r5
 801cfea:	dcf2      	bgt.n	801cfd2 <_printf_i+0x216>
 801cfec:	e7eb      	b.n	801cfc6 <_printf_i+0x20a>
 801cfee:	2500      	movs	r5, #0
 801cff0:	f104 0619 	add.w	r6, r4, #25
 801cff4:	e7f5      	b.n	801cfe2 <_printf_i+0x226>
 801cff6:	bf00      	nop
 801cff8:	0801f6fd 	.word	0x0801f6fd
 801cffc:	0801f70e 	.word	0x0801f70e

0801d000 <__sflush_r>:
 801d000:	898a      	ldrh	r2, [r1, #12]
 801d002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d006:	4605      	mov	r5, r0
 801d008:	0710      	lsls	r0, r2, #28
 801d00a:	460c      	mov	r4, r1
 801d00c:	d458      	bmi.n	801d0c0 <__sflush_r+0xc0>
 801d00e:	684b      	ldr	r3, [r1, #4]
 801d010:	2b00      	cmp	r3, #0
 801d012:	dc05      	bgt.n	801d020 <__sflush_r+0x20>
 801d014:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d016:	2b00      	cmp	r3, #0
 801d018:	dc02      	bgt.n	801d020 <__sflush_r+0x20>
 801d01a:	2000      	movs	r0, #0
 801d01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d020:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d022:	2e00      	cmp	r6, #0
 801d024:	d0f9      	beq.n	801d01a <__sflush_r+0x1a>
 801d026:	2300      	movs	r3, #0
 801d028:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d02c:	682f      	ldr	r7, [r5, #0]
 801d02e:	6a21      	ldr	r1, [r4, #32]
 801d030:	602b      	str	r3, [r5, #0]
 801d032:	d032      	beq.n	801d09a <__sflush_r+0x9a>
 801d034:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d036:	89a3      	ldrh	r3, [r4, #12]
 801d038:	075a      	lsls	r2, r3, #29
 801d03a:	d505      	bpl.n	801d048 <__sflush_r+0x48>
 801d03c:	6863      	ldr	r3, [r4, #4]
 801d03e:	1ac0      	subs	r0, r0, r3
 801d040:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d042:	b10b      	cbz	r3, 801d048 <__sflush_r+0x48>
 801d044:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d046:	1ac0      	subs	r0, r0, r3
 801d048:	2300      	movs	r3, #0
 801d04a:	4602      	mov	r2, r0
 801d04c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d04e:	6a21      	ldr	r1, [r4, #32]
 801d050:	4628      	mov	r0, r5
 801d052:	47b0      	blx	r6
 801d054:	1c43      	adds	r3, r0, #1
 801d056:	89a3      	ldrh	r3, [r4, #12]
 801d058:	d106      	bne.n	801d068 <__sflush_r+0x68>
 801d05a:	6829      	ldr	r1, [r5, #0]
 801d05c:	291d      	cmp	r1, #29
 801d05e:	d82b      	bhi.n	801d0b8 <__sflush_r+0xb8>
 801d060:	4a29      	ldr	r2, [pc, #164]	; (801d108 <__sflush_r+0x108>)
 801d062:	410a      	asrs	r2, r1
 801d064:	07d6      	lsls	r6, r2, #31
 801d066:	d427      	bmi.n	801d0b8 <__sflush_r+0xb8>
 801d068:	2200      	movs	r2, #0
 801d06a:	6062      	str	r2, [r4, #4]
 801d06c:	04d9      	lsls	r1, r3, #19
 801d06e:	6922      	ldr	r2, [r4, #16]
 801d070:	6022      	str	r2, [r4, #0]
 801d072:	d504      	bpl.n	801d07e <__sflush_r+0x7e>
 801d074:	1c42      	adds	r2, r0, #1
 801d076:	d101      	bne.n	801d07c <__sflush_r+0x7c>
 801d078:	682b      	ldr	r3, [r5, #0]
 801d07a:	b903      	cbnz	r3, 801d07e <__sflush_r+0x7e>
 801d07c:	6560      	str	r0, [r4, #84]	; 0x54
 801d07e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d080:	602f      	str	r7, [r5, #0]
 801d082:	2900      	cmp	r1, #0
 801d084:	d0c9      	beq.n	801d01a <__sflush_r+0x1a>
 801d086:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d08a:	4299      	cmp	r1, r3
 801d08c:	d002      	beq.n	801d094 <__sflush_r+0x94>
 801d08e:	4628      	mov	r0, r5
 801d090:	f7ff fc7a 	bl	801c988 <_free_r>
 801d094:	2000      	movs	r0, #0
 801d096:	6360      	str	r0, [r4, #52]	; 0x34
 801d098:	e7c0      	b.n	801d01c <__sflush_r+0x1c>
 801d09a:	2301      	movs	r3, #1
 801d09c:	4628      	mov	r0, r5
 801d09e:	47b0      	blx	r6
 801d0a0:	1c41      	adds	r1, r0, #1
 801d0a2:	d1c8      	bne.n	801d036 <__sflush_r+0x36>
 801d0a4:	682b      	ldr	r3, [r5, #0]
 801d0a6:	2b00      	cmp	r3, #0
 801d0a8:	d0c5      	beq.n	801d036 <__sflush_r+0x36>
 801d0aa:	2b1d      	cmp	r3, #29
 801d0ac:	d001      	beq.n	801d0b2 <__sflush_r+0xb2>
 801d0ae:	2b16      	cmp	r3, #22
 801d0b0:	d101      	bne.n	801d0b6 <__sflush_r+0xb6>
 801d0b2:	602f      	str	r7, [r5, #0]
 801d0b4:	e7b1      	b.n	801d01a <__sflush_r+0x1a>
 801d0b6:	89a3      	ldrh	r3, [r4, #12]
 801d0b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d0bc:	81a3      	strh	r3, [r4, #12]
 801d0be:	e7ad      	b.n	801d01c <__sflush_r+0x1c>
 801d0c0:	690f      	ldr	r7, [r1, #16]
 801d0c2:	2f00      	cmp	r7, #0
 801d0c4:	d0a9      	beq.n	801d01a <__sflush_r+0x1a>
 801d0c6:	0793      	lsls	r3, r2, #30
 801d0c8:	680e      	ldr	r6, [r1, #0]
 801d0ca:	bf08      	it	eq
 801d0cc:	694b      	ldreq	r3, [r1, #20]
 801d0ce:	600f      	str	r7, [r1, #0]
 801d0d0:	bf18      	it	ne
 801d0d2:	2300      	movne	r3, #0
 801d0d4:	eba6 0807 	sub.w	r8, r6, r7
 801d0d8:	608b      	str	r3, [r1, #8]
 801d0da:	f1b8 0f00 	cmp.w	r8, #0
 801d0de:	dd9c      	ble.n	801d01a <__sflush_r+0x1a>
 801d0e0:	6a21      	ldr	r1, [r4, #32]
 801d0e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d0e4:	4643      	mov	r3, r8
 801d0e6:	463a      	mov	r2, r7
 801d0e8:	4628      	mov	r0, r5
 801d0ea:	47b0      	blx	r6
 801d0ec:	2800      	cmp	r0, #0
 801d0ee:	dc06      	bgt.n	801d0fe <__sflush_r+0xfe>
 801d0f0:	89a3      	ldrh	r3, [r4, #12]
 801d0f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d0f6:	81a3      	strh	r3, [r4, #12]
 801d0f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d0fc:	e78e      	b.n	801d01c <__sflush_r+0x1c>
 801d0fe:	4407      	add	r7, r0
 801d100:	eba8 0800 	sub.w	r8, r8, r0
 801d104:	e7e9      	b.n	801d0da <__sflush_r+0xda>
 801d106:	bf00      	nop
 801d108:	dfbffffe 	.word	0xdfbffffe

0801d10c <_fflush_r>:
 801d10c:	b538      	push	{r3, r4, r5, lr}
 801d10e:	690b      	ldr	r3, [r1, #16]
 801d110:	4605      	mov	r5, r0
 801d112:	460c      	mov	r4, r1
 801d114:	b913      	cbnz	r3, 801d11c <_fflush_r+0x10>
 801d116:	2500      	movs	r5, #0
 801d118:	4628      	mov	r0, r5
 801d11a:	bd38      	pop	{r3, r4, r5, pc}
 801d11c:	b118      	cbz	r0, 801d126 <_fflush_r+0x1a>
 801d11e:	6a03      	ldr	r3, [r0, #32]
 801d120:	b90b      	cbnz	r3, 801d126 <_fflush_r+0x1a>
 801d122:	f7ff f9b7 	bl	801c494 <__sinit>
 801d126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d12a:	2b00      	cmp	r3, #0
 801d12c:	d0f3      	beq.n	801d116 <_fflush_r+0xa>
 801d12e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d130:	07d0      	lsls	r0, r2, #31
 801d132:	d404      	bmi.n	801d13e <_fflush_r+0x32>
 801d134:	0599      	lsls	r1, r3, #22
 801d136:	d402      	bmi.n	801d13e <_fflush_r+0x32>
 801d138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d13a:	f7ff fbe2 	bl	801c902 <__retarget_lock_acquire_recursive>
 801d13e:	4628      	mov	r0, r5
 801d140:	4621      	mov	r1, r4
 801d142:	f7ff ff5d 	bl	801d000 <__sflush_r>
 801d146:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d148:	07da      	lsls	r2, r3, #31
 801d14a:	4605      	mov	r5, r0
 801d14c:	d4e4      	bmi.n	801d118 <_fflush_r+0xc>
 801d14e:	89a3      	ldrh	r3, [r4, #12]
 801d150:	059b      	lsls	r3, r3, #22
 801d152:	d4e1      	bmi.n	801d118 <_fflush_r+0xc>
 801d154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d156:	f7ff fbd5 	bl	801c904 <__retarget_lock_release_recursive>
 801d15a:	e7dd      	b.n	801d118 <_fflush_r+0xc>

0801d15c <fiprintf>:
 801d15c:	b40e      	push	{r1, r2, r3}
 801d15e:	b503      	push	{r0, r1, lr}
 801d160:	4601      	mov	r1, r0
 801d162:	ab03      	add	r3, sp, #12
 801d164:	4805      	ldr	r0, [pc, #20]	; (801d17c <fiprintf+0x20>)
 801d166:	f853 2b04 	ldr.w	r2, [r3], #4
 801d16a:	6800      	ldr	r0, [r0, #0]
 801d16c:	9301      	str	r3, [sp, #4]
 801d16e:	f000 f837 	bl	801d1e0 <_vfiprintf_r>
 801d172:	b002      	add	sp, #8
 801d174:	f85d eb04 	ldr.w	lr, [sp], #4
 801d178:	b003      	add	sp, #12
 801d17a:	4770      	bx	lr
 801d17c:	200021d8 	.word	0x200021d8

0801d180 <abort>:
 801d180:	b508      	push	{r3, lr}
 801d182:	2006      	movs	r0, #6
 801d184:	f000 fa04 	bl	801d590 <raise>
 801d188:	2001      	movs	r0, #1
 801d18a:	f7e5 fdf5 	bl	8002d78 <_exit>

0801d18e <__sfputc_r>:
 801d18e:	6893      	ldr	r3, [r2, #8]
 801d190:	3b01      	subs	r3, #1
 801d192:	2b00      	cmp	r3, #0
 801d194:	b410      	push	{r4}
 801d196:	6093      	str	r3, [r2, #8]
 801d198:	da08      	bge.n	801d1ac <__sfputc_r+0x1e>
 801d19a:	6994      	ldr	r4, [r2, #24]
 801d19c:	42a3      	cmp	r3, r4
 801d19e:	db01      	blt.n	801d1a4 <__sfputc_r+0x16>
 801d1a0:	290a      	cmp	r1, #10
 801d1a2:	d103      	bne.n	801d1ac <__sfputc_r+0x1e>
 801d1a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d1a8:	f000 b934 	b.w	801d414 <__swbuf_r>
 801d1ac:	6813      	ldr	r3, [r2, #0]
 801d1ae:	1c58      	adds	r0, r3, #1
 801d1b0:	6010      	str	r0, [r2, #0]
 801d1b2:	7019      	strb	r1, [r3, #0]
 801d1b4:	4608      	mov	r0, r1
 801d1b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d1ba:	4770      	bx	lr

0801d1bc <__sfputs_r>:
 801d1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d1be:	4606      	mov	r6, r0
 801d1c0:	460f      	mov	r7, r1
 801d1c2:	4614      	mov	r4, r2
 801d1c4:	18d5      	adds	r5, r2, r3
 801d1c6:	42ac      	cmp	r4, r5
 801d1c8:	d101      	bne.n	801d1ce <__sfputs_r+0x12>
 801d1ca:	2000      	movs	r0, #0
 801d1cc:	e007      	b.n	801d1de <__sfputs_r+0x22>
 801d1ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d1d2:	463a      	mov	r2, r7
 801d1d4:	4630      	mov	r0, r6
 801d1d6:	f7ff ffda 	bl	801d18e <__sfputc_r>
 801d1da:	1c43      	adds	r3, r0, #1
 801d1dc:	d1f3      	bne.n	801d1c6 <__sfputs_r+0xa>
 801d1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d1e0 <_vfiprintf_r>:
 801d1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d1e4:	460d      	mov	r5, r1
 801d1e6:	b09d      	sub	sp, #116	; 0x74
 801d1e8:	4614      	mov	r4, r2
 801d1ea:	4698      	mov	r8, r3
 801d1ec:	4606      	mov	r6, r0
 801d1ee:	b118      	cbz	r0, 801d1f8 <_vfiprintf_r+0x18>
 801d1f0:	6a03      	ldr	r3, [r0, #32]
 801d1f2:	b90b      	cbnz	r3, 801d1f8 <_vfiprintf_r+0x18>
 801d1f4:	f7ff f94e 	bl	801c494 <__sinit>
 801d1f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d1fa:	07d9      	lsls	r1, r3, #31
 801d1fc:	d405      	bmi.n	801d20a <_vfiprintf_r+0x2a>
 801d1fe:	89ab      	ldrh	r3, [r5, #12]
 801d200:	059a      	lsls	r2, r3, #22
 801d202:	d402      	bmi.n	801d20a <_vfiprintf_r+0x2a>
 801d204:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d206:	f7ff fb7c 	bl	801c902 <__retarget_lock_acquire_recursive>
 801d20a:	89ab      	ldrh	r3, [r5, #12]
 801d20c:	071b      	lsls	r3, r3, #28
 801d20e:	d501      	bpl.n	801d214 <_vfiprintf_r+0x34>
 801d210:	692b      	ldr	r3, [r5, #16]
 801d212:	b99b      	cbnz	r3, 801d23c <_vfiprintf_r+0x5c>
 801d214:	4629      	mov	r1, r5
 801d216:	4630      	mov	r0, r6
 801d218:	f000 f93a 	bl	801d490 <__swsetup_r>
 801d21c:	b170      	cbz	r0, 801d23c <_vfiprintf_r+0x5c>
 801d21e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d220:	07dc      	lsls	r4, r3, #31
 801d222:	d504      	bpl.n	801d22e <_vfiprintf_r+0x4e>
 801d224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d228:	b01d      	add	sp, #116	; 0x74
 801d22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d22e:	89ab      	ldrh	r3, [r5, #12]
 801d230:	0598      	lsls	r0, r3, #22
 801d232:	d4f7      	bmi.n	801d224 <_vfiprintf_r+0x44>
 801d234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d236:	f7ff fb65 	bl	801c904 <__retarget_lock_release_recursive>
 801d23a:	e7f3      	b.n	801d224 <_vfiprintf_r+0x44>
 801d23c:	2300      	movs	r3, #0
 801d23e:	9309      	str	r3, [sp, #36]	; 0x24
 801d240:	2320      	movs	r3, #32
 801d242:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d246:	f8cd 800c 	str.w	r8, [sp, #12]
 801d24a:	2330      	movs	r3, #48	; 0x30
 801d24c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801d400 <_vfiprintf_r+0x220>
 801d250:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d254:	f04f 0901 	mov.w	r9, #1
 801d258:	4623      	mov	r3, r4
 801d25a:	469a      	mov	sl, r3
 801d25c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d260:	b10a      	cbz	r2, 801d266 <_vfiprintf_r+0x86>
 801d262:	2a25      	cmp	r2, #37	; 0x25
 801d264:	d1f9      	bne.n	801d25a <_vfiprintf_r+0x7a>
 801d266:	ebba 0b04 	subs.w	fp, sl, r4
 801d26a:	d00b      	beq.n	801d284 <_vfiprintf_r+0xa4>
 801d26c:	465b      	mov	r3, fp
 801d26e:	4622      	mov	r2, r4
 801d270:	4629      	mov	r1, r5
 801d272:	4630      	mov	r0, r6
 801d274:	f7ff ffa2 	bl	801d1bc <__sfputs_r>
 801d278:	3001      	adds	r0, #1
 801d27a:	f000 80a9 	beq.w	801d3d0 <_vfiprintf_r+0x1f0>
 801d27e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d280:	445a      	add	r2, fp
 801d282:	9209      	str	r2, [sp, #36]	; 0x24
 801d284:	f89a 3000 	ldrb.w	r3, [sl]
 801d288:	2b00      	cmp	r3, #0
 801d28a:	f000 80a1 	beq.w	801d3d0 <_vfiprintf_r+0x1f0>
 801d28e:	2300      	movs	r3, #0
 801d290:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d298:	f10a 0a01 	add.w	sl, sl, #1
 801d29c:	9304      	str	r3, [sp, #16]
 801d29e:	9307      	str	r3, [sp, #28]
 801d2a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d2a4:	931a      	str	r3, [sp, #104]	; 0x68
 801d2a6:	4654      	mov	r4, sl
 801d2a8:	2205      	movs	r2, #5
 801d2aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d2ae:	4854      	ldr	r0, [pc, #336]	; (801d400 <_vfiprintf_r+0x220>)
 801d2b0:	f7e2 ffd6 	bl	8000260 <memchr>
 801d2b4:	9a04      	ldr	r2, [sp, #16]
 801d2b6:	b9d8      	cbnz	r0, 801d2f0 <_vfiprintf_r+0x110>
 801d2b8:	06d1      	lsls	r1, r2, #27
 801d2ba:	bf44      	itt	mi
 801d2bc:	2320      	movmi	r3, #32
 801d2be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d2c2:	0713      	lsls	r3, r2, #28
 801d2c4:	bf44      	itt	mi
 801d2c6:	232b      	movmi	r3, #43	; 0x2b
 801d2c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d2cc:	f89a 3000 	ldrb.w	r3, [sl]
 801d2d0:	2b2a      	cmp	r3, #42	; 0x2a
 801d2d2:	d015      	beq.n	801d300 <_vfiprintf_r+0x120>
 801d2d4:	9a07      	ldr	r2, [sp, #28]
 801d2d6:	4654      	mov	r4, sl
 801d2d8:	2000      	movs	r0, #0
 801d2da:	f04f 0c0a 	mov.w	ip, #10
 801d2de:	4621      	mov	r1, r4
 801d2e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d2e4:	3b30      	subs	r3, #48	; 0x30
 801d2e6:	2b09      	cmp	r3, #9
 801d2e8:	d94d      	bls.n	801d386 <_vfiprintf_r+0x1a6>
 801d2ea:	b1b0      	cbz	r0, 801d31a <_vfiprintf_r+0x13a>
 801d2ec:	9207      	str	r2, [sp, #28]
 801d2ee:	e014      	b.n	801d31a <_vfiprintf_r+0x13a>
 801d2f0:	eba0 0308 	sub.w	r3, r0, r8
 801d2f4:	fa09 f303 	lsl.w	r3, r9, r3
 801d2f8:	4313      	orrs	r3, r2
 801d2fa:	9304      	str	r3, [sp, #16]
 801d2fc:	46a2      	mov	sl, r4
 801d2fe:	e7d2      	b.n	801d2a6 <_vfiprintf_r+0xc6>
 801d300:	9b03      	ldr	r3, [sp, #12]
 801d302:	1d19      	adds	r1, r3, #4
 801d304:	681b      	ldr	r3, [r3, #0]
 801d306:	9103      	str	r1, [sp, #12]
 801d308:	2b00      	cmp	r3, #0
 801d30a:	bfbb      	ittet	lt
 801d30c:	425b      	neglt	r3, r3
 801d30e:	f042 0202 	orrlt.w	r2, r2, #2
 801d312:	9307      	strge	r3, [sp, #28]
 801d314:	9307      	strlt	r3, [sp, #28]
 801d316:	bfb8      	it	lt
 801d318:	9204      	strlt	r2, [sp, #16]
 801d31a:	7823      	ldrb	r3, [r4, #0]
 801d31c:	2b2e      	cmp	r3, #46	; 0x2e
 801d31e:	d10c      	bne.n	801d33a <_vfiprintf_r+0x15a>
 801d320:	7863      	ldrb	r3, [r4, #1]
 801d322:	2b2a      	cmp	r3, #42	; 0x2a
 801d324:	d134      	bne.n	801d390 <_vfiprintf_r+0x1b0>
 801d326:	9b03      	ldr	r3, [sp, #12]
 801d328:	1d1a      	adds	r2, r3, #4
 801d32a:	681b      	ldr	r3, [r3, #0]
 801d32c:	9203      	str	r2, [sp, #12]
 801d32e:	2b00      	cmp	r3, #0
 801d330:	bfb8      	it	lt
 801d332:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801d336:	3402      	adds	r4, #2
 801d338:	9305      	str	r3, [sp, #20]
 801d33a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801d410 <_vfiprintf_r+0x230>
 801d33e:	7821      	ldrb	r1, [r4, #0]
 801d340:	2203      	movs	r2, #3
 801d342:	4650      	mov	r0, sl
 801d344:	f7e2 ff8c 	bl	8000260 <memchr>
 801d348:	b138      	cbz	r0, 801d35a <_vfiprintf_r+0x17a>
 801d34a:	9b04      	ldr	r3, [sp, #16]
 801d34c:	eba0 000a 	sub.w	r0, r0, sl
 801d350:	2240      	movs	r2, #64	; 0x40
 801d352:	4082      	lsls	r2, r0
 801d354:	4313      	orrs	r3, r2
 801d356:	3401      	adds	r4, #1
 801d358:	9304      	str	r3, [sp, #16]
 801d35a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d35e:	4829      	ldr	r0, [pc, #164]	; (801d404 <_vfiprintf_r+0x224>)
 801d360:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d364:	2206      	movs	r2, #6
 801d366:	f7e2 ff7b 	bl	8000260 <memchr>
 801d36a:	2800      	cmp	r0, #0
 801d36c:	d03f      	beq.n	801d3ee <_vfiprintf_r+0x20e>
 801d36e:	4b26      	ldr	r3, [pc, #152]	; (801d408 <_vfiprintf_r+0x228>)
 801d370:	bb1b      	cbnz	r3, 801d3ba <_vfiprintf_r+0x1da>
 801d372:	9b03      	ldr	r3, [sp, #12]
 801d374:	3307      	adds	r3, #7
 801d376:	f023 0307 	bic.w	r3, r3, #7
 801d37a:	3308      	adds	r3, #8
 801d37c:	9303      	str	r3, [sp, #12]
 801d37e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d380:	443b      	add	r3, r7
 801d382:	9309      	str	r3, [sp, #36]	; 0x24
 801d384:	e768      	b.n	801d258 <_vfiprintf_r+0x78>
 801d386:	fb0c 3202 	mla	r2, ip, r2, r3
 801d38a:	460c      	mov	r4, r1
 801d38c:	2001      	movs	r0, #1
 801d38e:	e7a6      	b.n	801d2de <_vfiprintf_r+0xfe>
 801d390:	2300      	movs	r3, #0
 801d392:	3401      	adds	r4, #1
 801d394:	9305      	str	r3, [sp, #20]
 801d396:	4619      	mov	r1, r3
 801d398:	f04f 0c0a 	mov.w	ip, #10
 801d39c:	4620      	mov	r0, r4
 801d39e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d3a2:	3a30      	subs	r2, #48	; 0x30
 801d3a4:	2a09      	cmp	r2, #9
 801d3a6:	d903      	bls.n	801d3b0 <_vfiprintf_r+0x1d0>
 801d3a8:	2b00      	cmp	r3, #0
 801d3aa:	d0c6      	beq.n	801d33a <_vfiprintf_r+0x15a>
 801d3ac:	9105      	str	r1, [sp, #20]
 801d3ae:	e7c4      	b.n	801d33a <_vfiprintf_r+0x15a>
 801d3b0:	fb0c 2101 	mla	r1, ip, r1, r2
 801d3b4:	4604      	mov	r4, r0
 801d3b6:	2301      	movs	r3, #1
 801d3b8:	e7f0      	b.n	801d39c <_vfiprintf_r+0x1bc>
 801d3ba:	ab03      	add	r3, sp, #12
 801d3bc:	9300      	str	r3, [sp, #0]
 801d3be:	462a      	mov	r2, r5
 801d3c0:	4b12      	ldr	r3, [pc, #72]	; (801d40c <_vfiprintf_r+0x22c>)
 801d3c2:	a904      	add	r1, sp, #16
 801d3c4:	4630      	mov	r0, r6
 801d3c6:	f3af 8000 	nop.w
 801d3ca:	4607      	mov	r7, r0
 801d3cc:	1c78      	adds	r0, r7, #1
 801d3ce:	d1d6      	bne.n	801d37e <_vfiprintf_r+0x19e>
 801d3d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d3d2:	07d9      	lsls	r1, r3, #31
 801d3d4:	d405      	bmi.n	801d3e2 <_vfiprintf_r+0x202>
 801d3d6:	89ab      	ldrh	r3, [r5, #12]
 801d3d8:	059a      	lsls	r2, r3, #22
 801d3da:	d402      	bmi.n	801d3e2 <_vfiprintf_r+0x202>
 801d3dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d3de:	f7ff fa91 	bl	801c904 <__retarget_lock_release_recursive>
 801d3e2:	89ab      	ldrh	r3, [r5, #12]
 801d3e4:	065b      	lsls	r3, r3, #25
 801d3e6:	f53f af1d 	bmi.w	801d224 <_vfiprintf_r+0x44>
 801d3ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d3ec:	e71c      	b.n	801d228 <_vfiprintf_r+0x48>
 801d3ee:	ab03      	add	r3, sp, #12
 801d3f0:	9300      	str	r3, [sp, #0]
 801d3f2:	462a      	mov	r2, r5
 801d3f4:	4b05      	ldr	r3, [pc, #20]	; (801d40c <_vfiprintf_r+0x22c>)
 801d3f6:	a904      	add	r1, sp, #16
 801d3f8:	4630      	mov	r0, r6
 801d3fa:	f7ff fcdf 	bl	801cdbc <_printf_i>
 801d3fe:	e7e4      	b.n	801d3ca <_vfiprintf_r+0x1ea>
 801d400:	0801f6ec 	.word	0x0801f6ec
 801d404:	0801f6f6 	.word	0x0801f6f6
 801d408:	00000000 	.word	0x00000000
 801d40c:	0801d1bd 	.word	0x0801d1bd
 801d410:	0801f6f2 	.word	0x0801f6f2

0801d414 <__swbuf_r>:
 801d414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d416:	460e      	mov	r6, r1
 801d418:	4614      	mov	r4, r2
 801d41a:	4605      	mov	r5, r0
 801d41c:	b118      	cbz	r0, 801d426 <__swbuf_r+0x12>
 801d41e:	6a03      	ldr	r3, [r0, #32]
 801d420:	b90b      	cbnz	r3, 801d426 <__swbuf_r+0x12>
 801d422:	f7ff f837 	bl	801c494 <__sinit>
 801d426:	69a3      	ldr	r3, [r4, #24]
 801d428:	60a3      	str	r3, [r4, #8]
 801d42a:	89a3      	ldrh	r3, [r4, #12]
 801d42c:	071a      	lsls	r2, r3, #28
 801d42e:	d525      	bpl.n	801d47c <__swbuf_r+0x68>
 801d430:	6923      	ldr	r3, [r4, #16]
 801d432:	b31b      	cbz	r3, 801d47c <__swbuf_r+0x68>
 801d434:	6823      	ldr	r3, [r4, #0]
 801d436:	6922      	ldr	r2, [r4, #16]
 801d438:	1a98      	subs	r0, r3, r2
 801d43a:	6963      	ldr	r3, [r4, #20]
 801d43c:	b2f6      	uxtb	r6, r6
 801d43e:	4283      	cmp	r3, r0
 801d440:	4637      	mov	r7, r6
 801d442:	dc04      	bgt.n	801d44e <__swbuf_r+0x3a>
 801d444:	4621      	mov	r1, r4
 801d446:	4628      	mov	r0, r5
 801d448:	f7ff fe60 	bl	801d10c <_fflush_r>
 801d44c:	b9e0      	cbnz	r0, 801d488 <__swbuf_r+0x74>
 801d44e:	68a3      	ldr	r3, [r4, #8]
 801d450:	3b01      	subs	r3, #1
 801d452:	60a3      	str	r3, [r4, #8]
 801d454:	6823      	ldr	r3, [r4, #0]
 801d456:	1c5a      	adds	r2, r3, #1
 801d458:	6022      	str	r2, [r4, #0]
 801d45a:	701e      	strb	r6, [r3, #0]
 801d45c:	6962      	ldr	r2, [r4, #20]
 801d45e:	1c43      	adds	r3, r0, #1
 801d460:	429a      	cmp	r2, r3
 801d462:	d004      	beq.n	801d46e <__swbuf_r+0x5a>
 801d464:	89a3      	ldrh	r3, [r4, #12]
 801d466:	07db      	lsls	r3, r3, #31
 801d468:	d506      	bpl.n	801d478 <__swbuf_r+0x64>
 801d46a:	2e0a      	cmp	r6, #10
 801d46c:	d104      	bne.n	801d478 <__swbuf_r+0x64>
 801d46e:	4621      	mov	r1, r4
 801d470:	4628      	mov	r0, r5
 801d472:	f7ff fe4b 	bl	801d10c <_fflush_r>
 801d476:	b938      	cbnz	r0, 801d488 <__swbuf_r+0x74>
 801d478:	4638      	mov	r0, r7
 801d47a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d47c:	4621      	mov	r1, r4
 801d47e:	4628      	mov	r0, r5
 801d480:	f000 f806 	bl	801d490 <__swsetup_r>
 801d484:	2800      	cmp	r0, #0
 801d486:	d0d5      	beq.n	801d434 <__swbuf_r+0x20>
 801d488:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801d48c:	e7f4      	b.n	801d478 <__swbuf_r+0x64>
	...

0801d490 <__swsetup_r>:
 801d490:	b538      	push	{r3, r4, r5, lr}
 801d492:	4b2a      	ldr	r3, [pc, #168]	; (801d53c <__swsetup_r+0xac>)
 801d494:	4605      	mov	r5, r0
 801d496:	6818      	ldr	r0, [r3, #0]
 801d498:	460c      	mov	r4, r1
 801d49a:	b118      	cbz	r0, 801d4a4 <__swsetup_r+0x14>
 801d49c:	6a03      	ldr	r3, [r0, #32]
 801d49e:	b90b      	cbnz	r3, 801d4a4 <__swsetup_r+0x14>
 801d4a0:	f7fe fff8 	bl	801c494 <__sinit>
 801d4a4:	89a3      	ldrh	r3, [r4, #12]
 801d4a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d4aa:	0718      	lsls	r0, r3, #28
 801d4ac:	d422      	bmi.n	801d4f4 <__swsetup_r+0x64>
 801d4ae:	06d9      	lsls	r1, r3, #27
 801d4b0:	d407      	bmi.n	801d4c2 <__swsetup_r+0x32>
 801d4b2:	2309      	movs	r3, #9
 801d4b4:	602b      	str	r3, [r5, #0]
 801d4b6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d4ba:	81a3      	strh	r3, [r4, #12]
 801d4bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d4c0:	e034      	b.n	801d52c <__swsetup_r+0x9c>
 801d4c2:	0758      	lsls	r0, r3, #29
 801d4c4:	d512      	bpl.n	801d4ec <__swsetup_r+0x5c>
 801d4c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d4c8:	b141      	cbz	r1, 801d4dc <__swsetup_r+0x4c>
 801d4ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d4ce:	4299      	cmp	r1, r3
 801d4d0:	d002      	beq.n	801d4d8 <__swsetup_r+0x48>
 801d4d2:	4628      	mov	r0, r5
 801d4d4:	f7ff fa58 	bl	801c988 <_free_r>
 801d4d8:	2300      	movs	r3, #0
 801d4da:	6363      	str	r3, [r4, #52]	; 0x34
 801d4dc:	89a3      	ldrh	r3, [r4, #12]
 801d4de:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d4e2:	81a3      	strh	r3, [r4, #12]
 801d4e4:	2300      	movs	r3, #0
 801d4e6:	6063      	str	r3, [r4, #4]
 801d4e8:	6923      	ldr	r3, [r4, #16]
 801d4ea:	6023      	str	r3, [r4, #0]
 801d4ec:	89a3      	ldrh	r3, [r4, #12]
 801d4ee:	f043 0308 	orr.w	r3, r3, #8
 801d4f2:	81a3      	strh	r3, [r4, #12]
 801d4f4:	6923      	ldr	r3, [r4, #16]
 801d4f6:	b94b      	cbnz	r3, 801d50c <__swsetup_r+0x7c>
 801d4f8:	89a3      	ldrh	r3, [r4, #12]
 801d4fa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d4fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d502:	d003      	beq.n	801d50c <__swsetup_r+0x7c>
 801d504:	4621      	mov	r1, r4
 801d506:	4628      	mov	r0, r5
 801d508:	f000 f884 	bl	801d614 <__smakebuf_r>
 801d50c:	89a0      	ldrh	r0, [r4, #12]
 801d50e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d512:	f010 0301 	ands.w	r3, r0, #1
 801d516:	d00a      	beq.n	801d52e <__swsetup_r+0x9e>
 801d518:	2300      	movs	r3, #0
 801d51a:	60a3      	str	r3, [r4, #8]
 801d51c:	6963      	ldr	r3, [r4, #20]
 801d51e:	425b      	negs	r3, r3
 801d520:	61a3      	str	r3, [r4, #24]
 801d522:	6923      	ldr	r3, [r4, #16]
 801d524:	b943      	cbnz	r3, 801d538 <__swsetup_r+0xa8>
 801d526:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d52a:	d1c4      	bne.n	801d4b6 <__swsetup_r+0x26>
 801d52c:	bd38      	pop	{r3, r4, r5, pc}
 801d52e:	0781      	lsls	r1, r0, #30
 801d530:	bf58      	it	pl
 801d532:	6963      	ldrpl	r3, [r4, #20]
 801d534:	60a3      	str	r3, [r4, #8]
 801d536:	e7f4      	b.n	801d522 <__swsetup_r+0x92>
 801d538:	2000      	movs	r0, #0
 801d53a:	e7f7      	b.n	801d52c <__swsetup_r+0x9c>
 801d53c:	200021d8 	.word	0x200021d8

0801d540 <_raise_r>:
 801d540:	291f      	cmp	r1, #31
 801d542:	b538      	push	{r3, r4, r5, lr}
 801d544:	4604      	mov	r4, r0
 801d546:	460d      	mov	r5, r1
 801d548:	d904      	bls.n	801d554 <_raise_r+0x14>
 801d54a:	2316      	movs	r3, #22
 801d54c:	6003      	str	r3, [r0, #0]
 801d54e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d552:	bd38      	pop	{r3, r4, r5, pc}
 801d554:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801d556:	b112      	cbz	r2, 801d55e <_raise_r+0x1e>
 801d558:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d55c:	b94b      	cbnz	r3, 801d572 <_raise_r+0x32>
 801d55e:	4620      	mov	r0, r4
 801d560:	f000 f830 	bl	801d5c4 <_getpid_r>
 801d564:	462a      	mov	r2, r5
 801d566:	4601      	mov	r1, r0
 801d568:	4620      	mov	r0, r4
 801d56a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d56e:	f000 b817 	b.w	801d5a0 <_kill_r>
 801d572:	2b01      	cmp	r3, #1
 801d574:	d00a      	beq.n	801d58c <_raise_r+0x4c>
 801d576:	1c59      	adds	r1, r3, #1
 801d578:	d103      	bne.n	801d582 <_raise_r+0x42>
 801d57a:	2316      	movs	r3, #22
 801d57c:	6003      	str	r3, [r0, #0]
 801d57e:	2001      	movs	r0, #1
 801d580:	e7e7      	b.n	801d552 <_raise_r+0x12>
 801d582:	2400      	movs	r4, #0
 801d584:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d588:	4628      	mov	r0, r5
 801d58a:	4798      	blx	r3
 801d58c:	2000      	movs	r0, #0
 801d58e:	e7e0      	b.n	801d552 <_raise_r+0x12>

0801d590 <raise>:
 801d590:	4b02      	ldr	r3, [pc, #8]	; (801d59c <raise+0xc>)
 801d592:	4601      	mov	r1, r0
 801d594:	6818      	ldr	r0, [r3, #0]
 801d596:	f7ff bfd3 	b.w	801d540 <_raise_r>
 801d59a:	bf00      	nop
 801d59c:	200021d8 	.word	0x200021d8

0801d5a0 <_kill_r>:
 801d5a0:	b538      	push	{r3, r4, r5, lr}
 801d5a2:	4d07      	ldr	r5, [pc, #28]	; (801d5c0 <_kill_r+0x20>)
 801d5a4:	2300      	movs	r3, #0
 801d5a6:	4604      	mov	r4, r0
 801d5a8:	4608      	mov	r0, r1
 801d5aa:	4611      	mov	r1, r2
 801d5ac:	602b      	str	r3, [r5, #0]
 801d5ae:	f7e5 fbd3 	bl	8002d58 <_kill>
 801d5b2:	1c43      	adds	r3, r0, #1
 801d5b4:	d102      	bne.n	801d5bc <_kill_r+0x1c>
 801d5b6:	682b      	ldr	r3, [r5, #0]
 801d5b8:	b103      	cbz	r3, 801d5bc <_kill_r+0x1c>
 801d5ba:	6023      	str	r3, [r4, #0]
 801d5bc:	bd38      	pop	{r3, r4, r5, pc}
 801d5be:	bf00      	nop
 801d5c0:	20010ccc 	.word	0x20010ccc

0801d5c4 <_getpid_r>:
 801d5c4:	f7e5 bbc0 	b.w	8002d48 <_getpid>

0801d5c8 <__swhatbuf_r>:
 801d5c8:	b570      	push	{r4, r5, r6, lr}
 801d5ca:	460c      	mov	r4, r1
 801d5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d5d0:	2900      	cmp	r1, #0
 801d5d2:	b096      	sub	sp, #88	; 0x58
 801d5d4:	4615      	mov	r5, r2
 801d5d6:	461e      	mov	r6, r3
 801d5d8:	da0d      	bge.n	801d5f6 <__swhatbuf_r+0x2e>
 801d5da:	89a3      	ldrh	r3, [r4, #12]
 801d5dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 801d5e0:	f04f 0100 	mov.w	r1, #0
 801d5e4:	bf0c      	ite	eq
 801d5e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801d5ea:	2340      	movne	r3, #64	; 0x40
 801d5ec:	2000      	movs	r0, #0
 801d5ee:	6031      	str	r1, [r6, #0]
 801d5f0:	602b      	str	r3, [r5, #0]
 801d5f2:	b016      	add	sp, #88	; 0x58
 801d5f4:	bd70      	pop	{r4, r5, r6, pc}
 801d5f6:	466a      	mov	r2, sp
 801d5f8:	f000 f848 	bl	801d68c <_fstat_r>
 801d5fc:	2800      	cmp	r0, #0
 801d5fe:	dbec      	blt.n	801d5da <__swhatbuf_r+0x12>
 801d600:	9901      	ldr	r1, [sp, #4]
 801d602:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801d606:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801d60a:	4259      	negs	r1, r3
 801d60c:	4159      	adcs	r1, r3
 801d60e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d612:	e7eb      	b.n	801d5ec <__swhatbuf_r+0x24>

0801d614 <__smakebuf_r>:
 801d614:	898b      	ldrh	r3, [r1, #12]
 801d616:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d618:	079d      	lsls	r5, r3, #30
 801d61a:	4606      	mov	r6, r0
 801d61c:	460c      	mov	r4, r1
 801d61e:	d507      	bpl.n	801d630 <__smakebuf_r+0x1c>
 801d620:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d624:	6023      	str	r3, [r4, #0]
 801d626:	6123      	str	r3, [r4, #16]
 801d628:	2301      	movs	r3, #1
 801d62a:	6163      	str	r3, [r4, #20]
 801d62c:	b002      	add	sp, #8
 801d62e:	bd70      	pop	{r4, r5, r6, pc}
 801d630:	ab01      	add	r3, sp, #4
 801d632:	466a      	mov	r2, sp
 801d634:	f7ff ffc8 	bl	801d5c8 <__swhatbuf_r>
 801d638:	9900      	ldr	r1, [sp, #0]
 801d63a:	4605      	mov	r5, r0
 801d63c:	4630      	mov	r0, r6
 801d63e:	f7fe fcf1 	bl	801c024 <_malloc_r>
 801d642:	b948      	cbnz	r0, 801d658 <__smakebuf_r+0x44>
 801d644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d648:	059a      	lsls	r2, r3, #22
 801d64a:	d4ef      	bmi.n	801d62c <__smakebuf_r+0x18>
 801d64c:	f023 0303 	bic.w	r3, r3, #3
 801d650:	f043 0302 	orr.w	r3, r3, #2
 801d654:	81a3      	strh	r3, [r4, #12]
 801d656:	e7e3      	b.n	801d620 <__smakebuf_r+0xc>
 801d658:	89a3      	ldrh	r3, [r4, #12]
 801d65a:	6020      	str	r0, [r4, #0]
 801d65c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d660:	81a3      	strh	r3, [r4, #12]
 801d662:	9b00      	ldr	r3, [sp, #0]
 801d664:	6163      	str	r3, [r4, #20]
 801d666:	9b01      	ldr	r3, [sp, #4]
 801d668:	6120      	str	r0, [r4, #16]
 801d66a:	b15b      	cbz	r3, 801d684 <__smakebuf_r+0x70>
 801d66c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d670:	4630      	mov	r0, r6
 801d672:	f000 f81d 	bl	801d6b0 <_isatty_r>
 801d676:	b128      	cbz	r0, 801d684 <__smakebuf_r+0x70>
 801d678:	89a3      	ldrh	r3, [r4, #12]
 801d67a:	f023 0303 	bic.w	r3, r3, #3
 801d67e:	f043 0301 	orr.w	r3, r3, #1
 801d682:	81a3      	strh	r3, [r4, #12]
 801d684:	89a3      	ldrh	r3, [r4, #12]
 801d686:	431d      	orrs	r5, r3
 801d688:	81a5      	strh	r5, [r4, #12]
 801d68a:	e7cf      	b.n	801d62c <__smakebuf_r+0x18>

0801d68c <_fstat_r>:
 801d68c:	b538      	push	{r3, r4, r5, lr}
 801d68e:	4d07      	ldr	r5, [pc, #28]	; (801d6ac <_fstat_r+0x20>)
 801d690:	2300      	movs	r3, #0
 801d692:	4604      	mov	r4, r0
 801d694:	4608      	mov	r0, r1
 801d696:	4611      	mov	r1, r2
 801d698:	602b      	str	r3, [r5, #0]
 801d69a:	f7e5 fbbc 	bl	8002e16 <_fstat>
 801d69e:	1c43      	adds	r3, r0, #1
 801d6a0:	d102      	bne.n	801d6a8 <_fstat_r+0x1c>
 801d6a2:	682b      	ldr	r3, [r5, #0]
 801d6a4:	b103      	cbz	r3, 801d6a8 <_fstat_r+0x1c>
 801d6a6:	6023      	str	r3, [r4, #0]
 801d6a8:	bd38      	pop	{r3, r4, r5, pc}
 801d6aa:	bf00      	nop
 801d6ac:	20010ccc 	.word	0x20010ccc

0801d6b0 <_isatty_r>:
 801d6b0:	b538      	push	{r3, r4, r5, lr}
 801d6b2:	4d06      	ldr	r5, [pc, #24]	; (801d6cc <_isatty_r+0x1c>)
 801d6b4:	2300      	movs	r3, #0
 801d6b6:	4604      	mov	r4, r0
 801d6b8:	4608      	mov	r0, r1
 801d6ba:	602b      	str	r3, [r5, #0]
 801d6bc:	f7e5 fbbb 	bl	8002e36 <_isatty>
 801d6c0:	1c43      	adds	r3, r0, #1
 801d6c2:	d102      	bne.n	801d6ca <_isatty_r+0x1a>
 801d6c4:	682b      	ldr	r3, [r5, #0]
 801d6c6:	b103      	cbz	r3, 801d6ca <_isatty_r+0x1a>
 801d6c8:	6023      	str	r3, [r4, #0]
 801d6ca:	bd38      	pop	{r3, r4, r5, pc}
 801d6cc:	20010ccc 	.word	0x20010ccc

0801d6d0 <_init>:
 801d6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d6d2:	bf00      	nop
 801d6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d6d6:	bc08      	pop	{r3}
 801d6d8:	469e      	mov	lr, r3
 801d6da:	4770      	bx	lr

0801d6dc <_fini>:
 801d6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d6de:	bf00      	nop
 801d6e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d6e2:	bc08      	pop	{r3}
 801d6e4:	469e      	mov	lr, r3
 801d6e6:	4770      	bx	lr
