
scorbot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e948  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022d0  0801eb48  0801eb48  0002eb48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020e18  08020e18  0004233c  2**0
                  CONTENTS
  4 .ARM          00000008  08020e18  08020e18  00030e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020e20  08020e20  0004233c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  08020e20  08020e20  00030e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08020e40  08020e40  00030e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000233c  20000000  08020e48  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000eb54  20002340  08023184  00042340  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20010e94  08023184  00050e94  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0004233c  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  0004236a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003555b  00000000  00000000  000423e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000643e  00000000  00000000  0007793b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e38  00000000  00000000  0007dd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001738  00000000  00000000  0007fbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000357fb  00000000  00000000  000812f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ce99  00000000  00000000  000b6aeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011f22b  00000000  00000000  000e3984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008cd4  00000000  00000000  00202bb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0020b884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20002340 	.word	0x20002340
 800021c:	00000000 	.word	0x00000000
 8000220:	0801eb30 	.word	0x0801eb30

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20002344 	.word	0x20002344
 800023c:	0801eb30 	.word	0x0801eb30

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800032e:	f000 b9bb 	b.w	80006a8 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <encoder_callback>:
#include <callbacks.hpp>

void encoder_callback(const void* msgin) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	const racs_services__msg__Encoder* enc_msg =
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	60fb      	str	r3, [r7, #12]
			(const racs_services__msg__Encoder*) msgin;

	ScorBot.toggle(true);
 80006b8:	2101      	movs	r1, #1
 80006ba:	480a      	ldr	r0, [pc, #40]	; (80006e4 <encoder_callback+0x38>)
 80006bc:	f000 fd22 	bl	8001104 <_ZN5Robot6toggleEb>
	ScorBot.setEncoders(enc_msg->encoders);
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	4619      	mov	r1, r3
 80006c4:	4807      	ldr	r0, [pc, #28]	; (80006e4 <encoder_callback+0x38>)
 80006c6:	f000 fca7 	bl	8001018 <_ZN5Robot11setEncodersEPKs>
	ScorBot.setStatus(Robot::Status::PID, false);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2102      	movs	r1, #2
 80006ce:	4805      	ldr	r0, [pc, #20]	; (80006e4 <encoder_callback+0x38>)
 80006d0:	f000 fc03 	bl	8000eda <_ZN5Robot9setStatusENS_6StatusEb>
	ScorBot.toggle(false);
 80006d4:	2100      	movs	r1, #0
 80006d6:	4803      	ldr	r0, [pc, #12]	; (80006e4 <encoder_callback+0x38>)
 80006d8:	f000 fd14 	bl	8001104 <_ZN5Robot6toggleEb>
}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	2000235c 	.word	0x2000235c

080006e8 <pwm_callback>:

void pwm_callback(const void* msgin) {
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	const racs_services__msg__DirectAccess* pwm_msg =
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	60fb      	str	r3, [r7, #12]
		(const racs_services__msg__DirectAccess*) msgin;

	ScorBot.setPWMs(pwm_msg->pwms);
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	4619      	mov	r1, r3
 80006f8:	4805      	ldr	r0, [pc, #20]	; (8000710 <pwm_callback+0x28>)
 80006fa:	f000 fcac 	bl	8001056 <_ZN5Robot7setPWMsEPKs>
	ScorBot.setStatus(Robot::Status::DAQ, false);
 80006fe:	2200      	movs	r2, #0
 8000700:	2101      	movs	r1, #1
 8000702:	4803      	ldr	r0, [pc, #12]	; (8000710 <pwm_callback+0x28>)
 8000704:	f000 fbe9 	bl	8000eda <_ZN5Robot9setStatusENS_6StatusEb>
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	2000235c 	.word	0x2000235c

08000714 <control_callback>:

void control_callback(const void* request_msg, void* response_msg){
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
		racs_services__srv__Control_Request* req_in =
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	60fb      	str	r3, [r7, #12]
				(racs_services__srv__Control_Request*) request_msg;
		racs_services__srv__Control_Response* res_in =
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	60bb      	str	r3, [r7, #8]
				(racs_services__srv__Control_Response*) response_msg;
		ScorBot.rcvCtrl(req_in);
 8000726:	68f9      	ldr	r1, [r7, #12]
 8000728:	4805      	ldr	r0, [pc, #20]	; (8000740 <control_callback+0x2c>)
 800072a:	f000 fcfc 	bl	8001126 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request>
		ScorBot.sndCtrl(res_in);
 800072e:	68b9      	ldr	r1, [r7, #8]
 8000730:	4803      	ldr	r0, [pc, #12]	; (8000740 <control_callback+0x2c>)
 8000732:	f000 fd55 	bl	80011e0 <_ZN5Robot7sndCtrlEP36racs_services__srv__Control_Response>
	}
 8000736:	bf00      	nop
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	2000235c 	.word	0x2000235c

08000744 <setup_callback>:

void setup_callback(const void* request_msg, void* response_msg){
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
		racs_services__srv__Setup_Request* req_in =
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	60fb      	str	r3, [r7, #12]
				(racs_services__srv__Setup_Request*) request_msg;
		racs_services__srv__Setup_Response* res_in =
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	60bb      	str	r3, [r7, #8]
				(racs_services__srv__Setup_Response*) response_msg;
		ScorBot.rcvSetup(req_in);
 8000756:	68f9      	ldr	r1, [r7, #12]
 8000758:	4805      	ldr	r0, [pc, #20]	; (8000770 <setup_callback+0x2c>)
 800075a:	f000 fd51 	bl	8001200 <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request>
		ScorBot.sndSetup(res_in);
 800075e:	68b9      	ldr	r1, [r7, #8]
 8000760:	4803      	ldr	r0, [pc, #12]	; (8000770 <setup_callback+0x2c>)
 8000762:	f000 fdad 	bl	80012c0 <_ZN5Robot8sndSetupEP34racs_services__srv__Setup_Response>
	}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2000235c 	.word	0x2000235c

08000774 <feedback_timer_callback>:

void feedback_timer_callback(rcl_timer_t* timer, int64_t last_call_time)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b091      	sub	sp, #68	; 0x44
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	e9c7 2300 	strd	r2, r3, [r7]
	//UNUSED(timer);
	UNUSED(last_call_time);

	if (timer != NULL) {
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d04a      	beq.n	800081c <feedback_timer_callback+0xa8>
		racs_services__msg__Feedback feedback;
		racs_services__msg__Debug debug;
		rcl_ret_t rc;

		for(uint8_t i = 0; i < 5; i++) {
 8000786:	2300      	movs	r3, #0
 8000788:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800078c:	e013      	b.n	80007b6 <feedback_timer_callback+0x42>
			feedback.encoders[i] = ScorBot.getEncoder(i);
 800078e:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 8000792:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000796:	4619      	mov	r1, r3
 8000798:	4822      	ldr	r0, [pc, #136]	; (8000824 <feedback_timer_callback+0xb0>)
 800079a:	f000 fc14 	bl	8000fc6 <_ZN5Robot10getEncoderEh>
 800079e:	4603      	mov	r3, r0
 80007a0:	461a      	mov	r2, r3
 80007a2:	0063      	lsls	r3, r4, #1
 80007a4:	3340      	adds	r3, #64	; 0x40
 80007a6:	443b      	add	r3, r7
 80007a8:	f823 2c14 	strh.w	r2, [r3, #-20]
		for(uint8_t i = 0; i < 5; i++) {
 80007ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80007b0:	3301      	adds	r3, #1
 80007b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80007b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	d9e7      	bls.n	800078e <feedback_timer_callback+0x1a>
		}

		rc = rcl_publish(&feedback_publisher, &feedback, NULL);
 80007be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007c2:	2200      	movs	r2, #0
 80007c4:	4619      	mov	r1, r3
 80007c6:	4818      	ldr	r0, [pc, #96]	; (8000828 <feedback_timer_callback+0xb4>)
 80007c8:	f00d f954 	bl	800da74 <rcl_publish>
 80007cc:	63b8      	str	r0, [r7, #56]	; 0x38
		if (rc != RCL_RET_OK) return;
 80007ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d122      	bne.n	800081a <feedback_timer_callback+0xa6>

		for(uint8_t i = 0; i < 1; i++) {
 80007d4:	2300      	movs	r3, #0
 80007d6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80007da:	e00f      	b.n	80007fc <feedback_timer_callback+0x88>
			ScorBot.getPID(0)->show(i, debug);
 80007dc:	2100      	movs	r1, #0
 80007de:	4811      	ldr	r0, [pc, #68]	; (8000824 <feedback_timer_callback+0xb0>)
 80007e0:	f000 fbbe 	bl	8000f60 <_ZN5Robot6getPIDEh>
 80007e4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80007e8:	f107 0214 	add.w	r2, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	f001 fc57 	bl	80020a0 <_ZN3PID4showEiR25racs_services__msg__Debug>
		for(uint8_t i = 0; i < 1; i++) {
 80007f2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80007f6:	3301      	adds	r3, #1
 80007f8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80007fc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8000800:	2b00      	cmp	r3, #0
 8000802:	d0eb      	beq.n	80007dc <feedback_timer_callback+0x68>
		}
		rc = rcl_publish(&debug_publisher, &debug, NULL);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	2200      	movs	r2, #0
 800080a:	4619      	mov	r1, r3
 800080c:	4807      	ldr	r0, [pc, #28]	; (800082c <feedback_timer_callback+0xb8>)
 800080e:	f00d f931 	bl	800da74 <rcl_publish>
 8000812:	63b8      	str	r0, [r7, #56]	; 0x38
		if (rc != RCL_RET_OK) return;
 8000814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000816:	2b00      	cmp	r3, #0
 8000818:	e000      	b.n	800081c <feedback_timer_callback+0xa8>
		if (rc != RCL_RET_OK) return;
 800081a:	bf00      	nop
	}
}
 800081c:	3744      	adds	r7, #68	; 0x44
 800081e:	46bd      	mov	sp, r7
 8000820:	bd90      	pop	{r4, r7, pc}
 8000822:	bf00      	nop
 8000824:	2000235c 	.word	0x2000235c
 8000828:	200067c0 	.word	0x200067c0
 800082c:	200067c4 	.word	0x200067c4

08000830 <robot_timer_callback>:

void robot_timer_callback(rcl_timer_t* timer, int64_t last_call_time)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	e9c7 2300 	strd	r2, r3, [r7]
	UNUSED(last_call_time);
	if (timer != NULL) {
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d002      	beq.n	8000848 <robot_timer_callback+0x18>
		ScorBot.cycle();
 8000842:	4803      	ldr	r0, [pc, #12]	; (8000850 <robot_timer_callback+0x20>)
 8000844:	f000 fe4c 	bl	80014e0 <_ZN5Robot5cycleEv>
	}
}
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	2000235c 	.word	0x2000235c

08000854 <_ZN10IntegratorC1Ev>:


class Integrator //final
{
public:
  Integrator() {}
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4618      	mov	r0, r3
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <_ZN10IntegratorD1Ev>:
  ~Integrator() {}
 800086a:	b480      	push	{r7}
 800086c:	b083      	sub	sp, #12
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <_ZN6FilterC1Ev>:


class Filter //final
{
public:
  Filter(){}
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f04f 0200 	mov.w	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f04f 0200 	mov.w	r2, #0
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f04f 0200 	mov.w	r2, #0
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f04f 0200 	mov.w	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f04f 0200 	mov.w	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f04f 0200 	mov.w	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f04f 0200 	mov.w	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f04f 0200 	mov.w	r2, #0
 80008c6:	61da      	str	r2, [r3, #28]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f04f 0200 	mov.w	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f04f 0200 	mov.w	r2, #0
 80008d6:	625a      	str	r2, [r3, #36]	; 0x24
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4618      	mov	r0, r3
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <_ZN3PIDC1Ev>:


class PID final
{
public:
  PID(){}
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f04f 0200 	mov.w	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f04f 0200 	mov.w	r2, #0
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f04f 0200 	mov.w	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	2200      	movs	r2, #0
 800090a:	731a      	strb	r2, [r3, #12]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f04f 0200 	mov.w	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f04f 0200 	mov.w	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f04f 0200 	mov.w	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f04f 0200 	mov.w	r2, #0
 800092a:	61da      	str	r2, [r3, #28]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f04f 0200 	mov.w	r2, #0
 8000932:	621a      	str	r2, [r3, #32]
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f04f 0200 	mov.w	r2, #0
 800093a:	625a      	str	r2, [r3, #36]	; 0x24
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	f04f 0200 	mov.w	r2, #0
 8000942:	629a      	str	r2, [r3, #40]	; 0x28
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f04f 0200 	mov.w	r2, #0
 800094a:	62da      	str	r2, [r3, #44]	; 0x2c
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f04f 0200 	mov.w	r2, #0
 8000952:	631a      	str	r2, [r3, #48]	; 0x30
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f04f 0200 	mov.w	r2, #0
 800095a:	635a      	str	r2, [r3, #52]	; 0x34
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3338      	adds	r3, #56	; 0x38
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ff77 	bl	8000854 <_ZN10IntegratorC1Ev>
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	3348      	adds	r3, #72	; 0x48
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff ff88 	bl	8000880 <_ZN6FilterC1Ev>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3370      	adds	r3, #112	; 0x70
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff83 	bl	8000880 <_ZN6FilterC1Ev>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4618      	mov	r0, r3
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <_ZN10PinControlC1EP12GPIO_TypeDeft>:

PinControl::PinControl() {

}

PinControl::PinControl(GPIO_TypeDef* port, uint16_t pin){
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	4613      	mov	r3, r2
 8000990:	80fb      	strh	r3, [r7, #6]
  this->port = port;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	68ba      	ldr	r2, [r7, #8]
 8000996:	601a      	str	r2, [r3, #0]
  this->pin = pin;
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	88fa      	ldrh	r2, [r7, #6]
 800099c:	809a      	strh	r2, [r3, #4]
  setLimits(0.0, 0.0);
 800099e:	eddf 0a06 	vldr	s1, [pc, #24]	; 80009b8 <_ZN10PinControlC1EP12GPIO_TypeDeft+0x34>
 80009a2:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80009b8 <_ZN10PinControlC1EP12GPIO_TypeDeft+0x34>
 80009a6:	68f8      	ldr	r0, [r7, #12]
 80009a8:	f000 f808 	bl	80009bc <_ZN10PinControl9setLimitsEff>
}
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4618      	mov	r0, r3
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	00000000 	.word	0x00000000

080009bc <_ZN10PinControl9setLimitsEff>:
  this->port = port;
  this->pin = pin;
  setLimits(v1, v2);
}

void PinControl::setLimits(float v1, float v2){
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80009c8:	edc7 0a01 	vstr	s1, [r7, #4]
  this->v1 = v1;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	609a      	str	r2, [r3, #8]
  this->v2 = v2;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	60da      	str	r2, [r3, #12]
}
 80009d8:	bf00      	nop
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <_ZN10PinControl3setEb>:

void PinControl::set(bool state){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(port, pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6818      	ldr	r0, [r3, #0]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	8899      	ldrh	r1, [r3, #4]
 80009f8:	78fb      	ldrb	r3, [r7, #3]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <_ZN10PinControl3setEb+0x1e>
 80009fe:	2301      	movs	r3, #1
 8000a00:	e000      	b.n	8000a04 <_ZN10PinControl3setEb+0x20>
 8000a02:	2300      	movs	r3, #0
 8000a04:	461a      	mov	r2, r3
 8000a06:	f004 fc59 	bl	80052bc <HAL_GPIO_WritePin>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>:

PinMeasure::PinMeasure() {

}

PinMeasure::PinMeasure(GPIO_TypeDef* port, uint16_t pin){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	80fb      	strh	r3, [r7, #6]
  this->port = port;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	68ba      	ldr	r2, [r7, #8]
 8000a26:	601a      	str	r2, [r3, #0]
  this->pin = pin;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	88fa      	ldrh	r2, [r7, #6]
 8000a2c:	809a      	strh	r2, [r3, #4]
  setLimits(0.0, 0.0);
 8000a2e:	eddf 0a06 	vldr	s1, [pc, #24]	; 8000a48 <_ZN10PinMeasureC1EP12GPIO_TypeDeft+0x34>
 8000a32:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000a48 <_ZN10PinMeasureC1EP12GPIO_TypeDeft+0x34>
 8000a36:	68f8      	ldr	r0, [r7, #12]
 8000a38:	f000 f808 	bl	8000a4c <_ZN10PinMeasure9setLimitsEff>
}
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	00000000 	.word	0x00000000

08000a4c <_ZN10PinMeasure9setLimitsEff>:
  this->port = port;
  this->pin = pin;
  setLimits(v1, v2);
}

void PinMeasure::setLimits(float v1, float v2){
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	ed87 0a02 	vstr	s0, [r7, #8]
 8000a58:	edc7 0a01 	vstr	s1, [r7, #4]
  this->v1 = v1;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	609a      	str	r2, [r3, #8]
  this->v2 = v2;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	60da      	str	r2, [r3, #12]
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <_ZN10PinMeasure5stateEv>:

bool PinMeasure::state(){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin(port, pin);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	889b      	ldrh	r3, [r3, #4]
 8000a84:	4619      	mov	r1, r3
 8000a86:	4610      	mov	r0, r2
 8000a88:	f004 fc00 	bl	800528c <HAL_GPIO_ReadPin>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	bf14      	ite	ne
 8000a92:	2301      	movne	r3, #1
 8000a94:	2300      	moveq	r3, #0
 8000a96:	b2db      	uxtb	r3, r3
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefh10PinMeasure>:
Motor::Motor(PinControl &INA, PinControl &INB,
			 TIM_HandleTypeDef* htimPWM, uint8_t CCRx,
			 TIM_HandleTypeDef* htimENC, PinMeasure &END)
  : pin_INA(INA), pin_INB(INB), htimPWM(htimPWM), CCRx(CCRx), htimENC(htimENC), pin_END(END) {}
*/
Motor::Motor(PinControl INA, PinControl INB,
 8000aa0:	b084      	sub	sp, #16
 8000aa2:	b490      	push	{r4, r7}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
 8000aaa:	f107 0014 	add.w	r0, r7, #20
 8000aae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			 TIM_HandleTypeDef* htimPWM, uint8_t CCRx,
			 PinMeasure END)
  : pin_INA(INA), pin_INB(INB), htimPWM(htimPWM), CCRx(CCRx), htimENC(NULL), pin_END(END){}
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	461c      	mov	r4, r3
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000abc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f103 0410 	add.w	r4, r3, #16
 8000ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000acc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ad4:	621a      	str	r2, [r3, #32]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	629a      	str	r2, [r3, #40]	; 0x28
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8000aec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000af0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000af2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4618      	mov	r0, r3
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc90      	pop	{r4, r7}
 8000b00:	b004      	add	sp, #16
 8000b02:	4770      	bx	lr

08000b04 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>:

Motor::Motor(PinControl INA, PinControl INB,
 8000b04:	b084      	sub	sp, #16
 8000b06:	b490      	push	{r4, r7}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
 8000b0e:	f107 0014 	add.w	r0, r7, #20
 8000b12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			 TIM_HandleTypeDef* htimPWM, uint8_t CCRx,
			 TIM_HandleTypeDef* htimENC, PinMeasure END)
  : pin_INA(INA), pin_INB(INB), htimPWM(htimPWM), CCRx(CCRx), htimENC(htimENC), pin_END(END){}
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	461c      	mov	r4, r3
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f103 0410 	add.w	r4, r3, #16
 8000b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b38:	621a      	str	r2, [r3, #32]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000b40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b48:	629a      	str	r2, [r3, #40]	; 0x28
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8000b50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc90      	pop	{r4, r7}
 8000b64:	b004      	add	sp, #16
 8000b66:	4770      	bx	lr

08000b68 <_ZN5MotorD1Ev>:


Motor::~Motor() {}
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4618      	mov	r0, r3
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <_ZN5Motor10getEncoderEv>:

/*void Motor::invertEncoder(bool invert){
  this->encoder_invert = invert;
}*/

int16_t Motor::getEncoder(){
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
  if (htimENC != NULL) {
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d009      	beq.n	8000ba2 <_ZN5Motor10getEncoderEv+0x24>
	  return htimENC->Instance->CNT - (HALF_ENC+1);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	b21b      	sxth	r3, r3
 8000ba0:	e000      	b.n	8000ba4 <_ZN5Motor10getEncoderEv+0x26>
  } else {
	  return 0;
 8000ba2:	2300      	movs	r3, #0
  }
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <_ZN5Motor10driveMotorEs>:

void Motor::driveMotor(int16_t spwm){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	460b      	mov	r3, r1
 8000bba:	807b      	strh	r3, [r7, #2]
  OperatingMode mode = OperatingMode::BRAKE_GND;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
  spwm = spwm > -(HALF_PWM+1) ? spwm : -(HALF_PWM+1);
  spwm = spwm < HALF_PWM ? spwm : HALF_PWM;
  //spwm = (int16_t) std::min(std::max(spwm, (int16_t) -(HALF_PWM+1)), (int16_t) HALF_PWM);

  if(spwm > 0) {
 8000bc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	dd02      	ble.n	8000bce <_ZN5Motor10driveMotorEs+0x1e>
    mode = OperatingMode::SPIN_CW;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	e008      	b.n	8000be0 <_ZN5Motor10driveMotorEs+0x30>
  } else if (spwm < 0) {
 8000bce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	da02      	bge.n	8000bdc <_ZN5Motor10driveMotorEs+0x2c>
    mode = OperatingMode::SPIN_CCW;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	e001      	b.n	8000be0 <_ZN5Motor10driveMotorEs+0x30>
  } else {
    mode = OperatingMode::BRAKE_GND;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60fb      	str	r3, [r7, #12]
  }

  switch(mode){
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	2b03      	cmp	r3, #3
 8000be4:	d83a      	bhi.n	8000c5c <_ZN5Motor10driveMotorEs+0xac>
 8000be6:	a201      	add	r2, pc, #4	; (adr r2, 8000bec <_ZN5Motor10driveMotorEs+0x3c>)
 8000be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bec:	08000bfd 	.word	0x08000bfd
 8000bf0:	08000c15 	.word	0x08000c15
 8000bf4:	08000c2d 	.word	0x08000c2d
 8000bf8:	08000c45 	.word	0x08000c45
    case OperatingMode::BRAKE_GND:
      pin_INA.set(false);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff feef 	bl	80009e4 <_ZN10PinControl3setEb>
      pin_INB.set(false);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3310      	adds	r3, #16
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fee9 	bl	80009e4 <_ZN10PinControl3setEb>
      break;
 8000c12:	e023      	b.n	8000c5c <_ZN5Motor10driveMotorEs+0xac>
    case OperatingMode::SPIN_CCW:
      pin_INA.set(false);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2100      	movs	r1, #0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fee3 	bl	80009e4 <_ZN10PinControl3setEb>
      pin_INB.set(true);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3310      	adds	r3, #16
 8000c22:	2101      	movs	r1, #1
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fedd 	bl	80009e4 <_ZN10PinControl3setEb>
      break;
 8000c2a:	e017      	b.n	8000c5c <_ZN5Motor10driveMotorEs+0xac>
    case OperatingMode::SPIN_CW:
      pin_INA.set(true);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2101      	movs	r1, #1
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fed7 	bl	80009e4 <_ZN10PinControl3setEb>
      pin_INB.set(false);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	3310      	adds	r3, #16
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fed1 	bl	80009e4 <_ZN10PinControl3setEb>
      break;
 8000c42:	e00b      	b.n	8000c5c <_ZN5Motor10driveMotorEs+0xac>
    case OperatingMode::BRAKE_VCC:
      pin_INA.set(true);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2101      	movs	r1, #1
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fecb 	bl	80009e4 <_ZN10PinControl3setEb>
      pin_INB.set(true);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	3310      	adds	r3, #16
 8000c52:	2101      	movs	r1, #1
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fec5 	bl	80009e4 <_ZN10PinControl3setEb>
      break;
 8000c5a:	bf00      	nop
  }
  switch(CCRx) {
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c62:	3b01      	subs	r3, #1
 8000c64:	2b05      	cmp	r3, #5
 8000c66:	d851      	bhi.n	8000d0c <_ZN5Motor10driveMotorEs+0x15c>
 8000c68:	a201      	add	r2, pc, #4	; (adr r2, 8000c70 <_ZN5Motor10driveMotorEs+0xc0>)
 8000c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c6e:	bf00      	nop
 8000c70:	08000c89 	.word	0x08000c89
 8000c74:	08000c9f 	.word	0x08000c9f
 8000c78:	08000cb5 	.word	0x08000cb5
 8000c7c:	08000ccb 	.word	0x08000ccb
 8000c80:	08000ce1 	.word	0x08000ce1
 8000c84:	08000cf7 	.word	0x08000cf7
    case 1:
      htimPWM->Instance->CCR1 = (uint16_t) abs(spwm);
 8000c88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	bfb8      	it	lt
 8000c90:	425b      	neglt	r3, r3
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6a1b      	ldr	r3, [r3, #32]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	635a      	str	r2, [r3, #52]	; 0x34
      break;
 8000c9c:	e036      	b.n	8000d0c <_ZN5Motor10driveMotorEs+0x15c>
    case 2:
      htimPWM->Instance->CCR2 = (uint16_t) abs(spwm);
 8000c9e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	bfb8      	it	lt
 8000ca6:	425b      	neglt	r3, r3
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6a1b      	ldr	r3, [r3, #32]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	639a      	str	r2, [r3, #56]	; 0x38
      break;
 8000cb2:	e02b      	b.n	8000d0c <_ZN5Motor10driveMotorEs+0x15c>
    case 3:
      htimPWM->Instance->CCR3 = (uint16_t) abs(spwm);
 8000cb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	bfb8      	it	lt
 8000cbc:	425b      	neglt	r3, r3
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6a1b      	ldr	r3, [r3, #32]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8000cc8:	e020      	b.n	8000d0c <_ZN5Motor10driveMotorEs+0x15c>
    case 4:
      htimPWM->Instance->CCR4 = (uint16_t) abs(spwm);
 8000cca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	bfb8      	it	lt
 8000cd2:	425b      	neglt	r3, r3
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6a1b      	ldr	r3, [r3, #32]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8000cde:	e015      	b.n	8000d0c <_ZN5Motor10driveMotorEs+0x15c>
    case 5:
      htimPWM->Instance->CCR5 = (uint16_t) abs(spwm);
 8000ce0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	bfb8      	it	lt
 8000ce8:	425b      	neglt	r3, r3
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6a1b      	ldr	r3, [r3, #32]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8000cf4:	e00a      	b.n	8000d0c <_ZN5Motor10driveMotorEs+0x15c>
    case 6:
      htimPWM->Instance->CCR6 = (uint16_t) abs(spwm);
 8000cf6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a1b      	ldr	r3, [r3, #32]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8000d0a:	bf00      	nop

  }
}
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <_ZN5Motor11isInEndStopEv>:

bool Motor::isInEndStop(){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  return pin_END.state();
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	332c      	adds	r3, #44	; 0x2c
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fea7 	bl	8000a74 <_ZN10PinMeasure5stateEv>
 8000d26:	4603      	mov	r3, r0
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <_ZN3PIDD1Ev>:
class PID final
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3338      	adds	r3, #56	; 0x38
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fd94 	bl	800086a <_ZN10IntegratorD1Ev>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <_ZN5RobotC1E10PinControlS0_mhPP5MotorPf>:

Robot::Robot() {}

/*Robot::Robot(PinControl &enable, PinControl &toggle, unsigned long ts_ms, uint8_t size, Motor **motors, float *encs_div)
  : motors(motors), error_div(encs_div), pin_enable(enable), pin_toggle(toggle) {*/
Robot::Robot(PinControl enable, PinControl toggle, unsigned long ts_ms, uint8_t size, Motor **motors, float *encs_div)
 8000d4c:	b084      	sub	sp, #16
 8000d4e:	b590      	push	{r4, r7, lr}
 8000d50:	b0ab      	sub	sp, #172	; 0xac
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 8000d5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  : pin_enable(enable), pin_toggle(toggle), motors(motors), error_div(encs_div) {
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	461c      	mov	r4, r3
 8000d62:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000d66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f103 0410 	add.w	r4, r3, #16
 8000d72:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8000d82:	629a      	str	r2, [r3, #40]	; 0x28
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8000d8a:	641a      	str	r2, [r3, #64]	; 0x40

  this->ts = ts_ms;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8000d92:	621a      	str	r2, [r3, #32]
  //this->motors = 		(Motor**)	malloc(size * sizeof(Motor*));
  this->pids = 			(PID*)		malloc(size * sizeof(PID));
 8000d94:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8000d98:	2298      	movs	r2, #152	; 0x98
 8000d9a:	fb02 f303 	mul.w	r3, r2, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f01c fb40 	bl	801d424 <malloc>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	62da      	str	r2, [r3, #44]	; 0x2c
  this->switches = 		(bool*) 	malloc(size * sizeof(bool));
 8000dac:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f01c fb37 	bl	801d424 <malloc>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	635a      	str	r2, [r3, #52]	; 0x34
  this->motors_pwm = 	(int16_t*) 	malloc(size * sizeof(int16_t));
 8000dbe:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f01c fb2d 	bl	801d424 <malloc>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	461a      	mov	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	639a      	str	r2, [r3, #56]	; 0x38
  this->encoders =		(int16_t*)	malloc(size * sizeof(int16_t));
 8000dd2:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f01c fb23 	bl	801d424 <malloc>
 8000dde:	4603      	mov	r3, r0
 8000de0:	461a      	mov	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	63da      	str	r2, [r3, #60]	; 0x3c
  //this->error_div = 	(float*) 	malloc(size * sizeof(float));

  this->size = size;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f897 20e0 	ldrb.w	r2, [r7, #224]	; 0xe0
 8000dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  this->status = Status::Idle;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  for(int i = 0; i < size; i++){
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000dfe:	e034      	b.n	8000e6a <_ZN5RobotC1E10PinControlS0_mhPP5MotorPf+0x11e>
    this->switches[i] = false;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000e08:	4413      	add	r3, r2
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
    this->motors_pwm[i] = 0;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4413      	add	r3, r2
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	801a      	strh	r2, [r3, #0]
    this->encoders[i] = 0;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	801a      	strh	r2, [r3, #0]
    this->pids[i] = PID();
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fd57 	bl	80008e6 <_ZN3PIDC1Ev>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000e40:	2198      	movs	r1, #152	; 0x98
 8000e42:	fb01 f303 	mul.w	r3, r1, r3
 8000e46:	4413      	add	r3, r2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	2298      	movs	r2, #152	; 0x98
 8000e50:	4619      	mov	r1, r3
 8000e52:	f01c ff90 	bl	801dd76 <memcpy>
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff ff68 	bl	8000d30 <_ZN3PIDD1Ev>
  for(int i = 0; i < size; i++){
 8000e60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000e64:	3301      	adds	r3, #1
 8000e66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000e6a:	f897 30e0 	ldrb.w	r3, [r7, #224]	; 0xe0
 8000e6e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8000e72:	429a      	cmp	r2, r3
 8000e74:	dbc4      	blt.n	8000e00 <_ZN5RobotC1E10PinControlS0_mhPP5MotorPf+0xb4>
  }

  update();
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 fa30 	bl	80012dc <_ZN5Robot6updateEv>
}
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	37ac      	adds	r7, #172	; 0xac
 8000e82:	46bd      	mov	sp, r7
 8000e84:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000e88:	b004      	add	sp, #16
 8000e8a:	4770      	bx	lr

08000e8c <_ZN5RobotD1Ev>:
  : Robot(enable, toggle,ts_ms, size, motors, NULL) {}

Robot::Robot(PinControl enable, PinControl toggle, unsigned long ts_ms, uint8_t size)
  : Robot(enable, toggle,ts_ms, size, NULL, NULL) {}

Robot::~Robot() {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  free(this->motors);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f01c facb 	bl	801d434 <free>
  free(this->pids);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f01c fac6 	bl	801d434 <free>
  free(this->switches);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eac:	4618      	mov	r0, r3
 8000eae:	f01c fac1 	bl	801d434 <free>
  free(this->motors_pwm);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f01c fabc 	bl	801d434 <free>
  free(this->encoders);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f01c fab7 	bl	801d434 <free>
  free(this->error_div);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f01c fab2 	bl	801d434 <free>
}
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <_ZN5Robot9setStatusENS_6StatusEb>:

Robot::Status Robot::getStatus(){
  return this->status;
}

void Robot::setStatus(Status status, bool reset = false){
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	70fb      	strb	r3, [r7, #3]
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	70bb      	strb	r3, [r7, #2]
  if(this->status != status || reset){
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000ef0:	78fa      	ldrb	r2, [r7, #3]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d102      	bne.n	8000efc <_ZN5Robot9setStatusENS_6StatusEb+0x22>
 8000ef6:	78bb      	ldrb	r3, [r7, #2]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d006      	beq.n	8000f0a <_ZN5Robot9setStatusENS_6StatusEb+0x30>
    resetPIDs();
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f000 f842 	bl	8000f86 <_ZN5Robot9resetPIDsEv>
    this->status = status;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	78fa      	ldrb	r2, [r7, #3]
 8000f06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <_ZN5Robot8getMotorEh>:

Motor * Robot::getMotor(uint8_t index){
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	70fb      	strb	r3, [r7, #3]
  return this->motors[index];
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f22:	78fb      	ldrb	r3, [r7, #3]
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	4413      	add	r3, r2
 8000f28:	681b      	ldr	r3, [r3, #0]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <_ZN5Robot17setEncoderDividerEhf>:
void Robot::setMotor(uint8_t index, Motor * motor, float enc_div){
  this->motors[index] = motor;
  this->error_div[index] = enc_div;
}

void Robot::setEncoderDivider(uint8_t index, float enc_div){
 8000f36:	b480      	push	{r7}
 8000f38:	b085      	sub	sp, #20
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f44:	72fb      	strb	r3, [r7, #11]
  this->error_div[index] = enc_div;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f4a:	7afb      	ldrb	r3, [r7, #11]
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	601a      	str	r2, [r3, #0]
}
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <_ZN5Robot6getPIDEh>:

PID * Robot::getPID(uint8_t index){
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	70fb      	strb	r3, [r7, #3]
  return &(this->pids[index]);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f70:	78fb      	ldrb	r3, [r7, #3]
 8000f72:	2198      	movs	r1, #152	; 0x98
 8000f74:	fb01 f303 	mul.w	r3, r1, r3
 8000f78:	4413      	add	r3, r2
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <_ZN5Robot9resetPIDsEv>:
  for(int i = 0; i < size; i++){
    getPID(i)->setup(kp, ki, kd);
  }
}

void Robot::resetPIDs(){
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b084      	sub	sp, #16
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < size; i++){
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	e00c      	b.n	8000fae <_ZN5Robot9resetPIDsEv+0x28>
    getPID(i)->reset();
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	4619      	mov	r1, r3
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ffe0 	bl	8000f60 <_ZN5Robot6getPIDEh>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 ff84 	bl	8001eb0 <_ZN3PID5resetEv>
  for(int i = 0; i < size; i++){
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	3301      	adds	r3, #1
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	dbeb      	blt.n	8000f94 <_ZN5Robot9resetPIDsEv+0xe>
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <_ZN5Robot10getEncoderEh>:

int16_t Robot::getEncoder(uint8_t index) {
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	460b      	mov	r3, r1
 8000fd0:	70fb      	strb	r3, [r7, #3]
	return getMotor(index)->getEncoder();
 8000fd2:	78fb      	ldrb	r3, [r7, #3]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff ff9b 	bl	8000f12 <_ZN5Robot8getMotorEh>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fdcd 	bl	8000b7e <_ZN5Motor10getEncoderEv>
 8000fe4:	4603      	mov	r3, r0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <_ZN5Robot10setEncoderEhs>:

void Robot::setEncoder(uint8_t i, const int16_t enc) {
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	70fb      	strb	r3, [r7, #3]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	803b      	strh	r3, [r7, #0]
	encoders[i] = enc;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001002:	78fb      	ldrb	r3, [r7, #3]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	4413      	add	r3, r2
 8001008:	883a      	ldrh	r2, [r7, #0]
 800100a:	801a      	strh	r2, [r3, #0]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <_ZN5Robot11setEncodersEPKs>:

void Robot::setEncoders(const int16_t *encs) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  for(int i = 0; i < 5; i++) {
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	e00e      	b.n	8001046 <_ZN5Robot11setEncodersEPKs+0x2e>
    setEncoder(i, encs[i]);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	b2d9      	uxtb	r1, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	4413      	add	r3, r2
 8001034:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001038:	461a      	mov	r2, r3
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ffd7 	bl	8000fee <_ZN5Robot10setEncoderEhs>
  for(int i = 0; i < 5; i++) {
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3301      	adds	r3, #1
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2b04      	cmp	r3, #4
 800104a:	dded      	ble.n	8001028 <_ZN5Robot11setEncodersEPKs+0x10>
  }
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <_ZN5Robot7setPWMsEPKs>:

void Robot::setPWMs(const int16_t *pwms){
 8001056:	b580      	push	{r7, lr}
 8001058:	b084      	sub	sp, #16
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
 800105e:	6039      	str	r1, [r7, #0]
  for(int i = 0; i < size; i++){
 8001060:	2300      	movs	r3, #0
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	e00e      	b.n	8001084 <_ZN5Robot7setPWMsEPKs+0x2e>
    setPWM(i, pwms[i]);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	b2d9      	uxtb	r1, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	4413      	add	r3, r2
 8001072:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001076:	461a      	mov	r2, r3
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 f80f 	bl	800109c <_ZN5Robot6setPWMEhs>
  for(int i = 0; i < size; i++){
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	3301      	adds	r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4293      	cmp	r3, r2
 8001090:	dbe9      	blt.n	8001066 <_ZN5Robot7setPWMsEPKs+0x10>
  }
}
 8001092:	bf00      	nop
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <_ZN5Robot6setPWMEhs>:

void Robot::setPWM(uint8_t index, const int16_t pwm){
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
 80010a8:	4613      	mov	r3, r2
 80010aa:	803b      	strh	r3, [r7, #0]
  motors_pwm[index] = pwm;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010b0:	78fb      	ldrb	r3, [r7, #3]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	883a      	ldrh	r2, [r7, #0]
 80010b8:	801a      	strh	r2, [r3, #0]

}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <_ZN5Robot9resetPWMsEv>:

void Robot::resetPWMs(){
 80010c6:	b480      	push	{r7}
 80010c8:	b085      	sub	sp, #20
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < size; i++){
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	e009      	b.n	80010e8 <_ZN5Robot9resetPWMsEv+0x22>
    motors_pwm[i] = 0;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	4413      	add	r3, r2
 80010de:	2200      	movs	r2, #0
 80010e0:	801a      	strh	r2, [r3, #0]
  for(int i = 0; i < size; i++){
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	3301      	adds	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010ee:	461a      	mov	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4293      	cmp	r3, r2
 80010f4:	dbee      	blt.n	80010d4 <_ZN5Robot9resetPWMsEv+0xe>
  }
}
 80010f6:	bf00      	nop
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <_ZN5Robot6toggleEb>:
void Robot::disableMotors(){
  setStatus(Status::Idle, true);
  pin_enable.set(false);
}

void Robot::toggle(bool in) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	70fb      	strb	r3, [r7, #3]
	pin_toggle.set(in);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3310      	adds	r3, #16
 8001114:	78fa      	ldrb	r2, [r7, #3]
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fc63 	bl	80009e4 <_ZN10PinControl3setEb>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request>:

void Robot::rcvCtrl(racs_services__srv__Control_Request* request){
 8001126:	b580      	push	{r7, lr}
 8001128:	b084      	sub	sp, #16
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	6039      	str	r1, [r7, #0]

  if(request->command > 2) {
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	785b      	ldrb	r3, [r3, #1]
 8001134:	2b02      	cmp	r3, #2
 8001136:	d905      	bls.n	8001144 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x1e>
    setStatus(Status::Idle, true);
 8001138:	2201      	movs	r2, #1
 800113a:	2100      	movs	r1, #0
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff fecc 	bl	8000eda <_ZN5Robot9setStatusENS_6StatusEb>
    return;
 8001142:	e04a      	b.n	80011da <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xb4>
  }

  switch(request->command){
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	785b      	ldrb	r3, [r3, #1]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d002      	beq.n	8001152 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x2c>
 800114c:	2b02      	cmp	r3, #2
 800114e:	d01c      	beq.n	800118a <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x64>
 8001150:	e03c      	b.n	80011cc <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xa6>
    case (unsigned char) Command::Idle:
      for(int i = 0; i < size; i++) {
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	e010      	b.n	800117a <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x54>
        motors_pwm[i] = 0;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	4413      	add	r3, r2
 8001162:	2200      	movs	r2, #0
 8001164:	801a      	strh	r2, [r3, #0]
        encoders[i] = 0;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4413      	add	r3, r2
 8001170:	2200      	movs	r2, #0
 8001172:	801a      	strh	r2, [r3, #0]
      for(int i = 0; i < size; i++) {
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	3301      	adds	r3, #1
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001180:	461a      	mov	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	4293      	cmp	r3, r2
 8001186:	dbe7      	blt.n	8001158 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x32>
      }
      break;
 8001188:	e020      	b.n	80011cc <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xa6>

    case (unsigned char) Command::PID:
      for(int i = 0; i < size; i++) {
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	e015      	b.n	80011bc <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x96>
        motors_pwm[i] = 0;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	4413      	add	r3, r2
 800119a:	2200      	movs	r2, #0
 800119c:	801a      	strh	r2, [r3, #0]
        encoders[i] = request->encoders[i];
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	441a      	add	r2, r3
 80011a8:	6839      	ldr	r1, [r7, #0]
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	440b      	add	r3, r1
 80011b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011b4:	8013      	strh	r3, [r2, #0]
      for(int i = 0; i < size; i++) {
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	3301      	adds	r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011c2:	461a      	mov	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	4293      	cmp	r3, r2
 80011c8:	dbe2      	blt.n	8001190 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x6a>
      }
      break;
 80011ca:	bf00      	nop
  }

  setStatus((Status) request->command);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	785b      	ldrb	r3, [r3, #1]
 80011d0:	2200      	movs	r2, #0
 80011d2:	4619      	mov	r1, r3
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff fe80 	bl	8000eda <_ZN5Robot9setStatusENS_6StatusEb>
}
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <_ZN5Robot7sndCtrlEP36racs_services__srv__Control_Response>:

void Robot::sndCtrl(racs_services__srv__Control_Response* response){
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
	response->response = (uint8_t) status;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	701a      	strb	r2, [r3, #0]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request>:

void Robot::rcvSetup(racs_services__srv__Setup_Request* request){
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]

  setEncoderDivider(request->motor_index, request->eed);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	781a      	ldrb	r2, [r3, #0]
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	edd3 7a01 	vldr	s15, [r3, #4]
 8001214:	eeb0 0a67 	vmov.f32	s0, s15
 8001218:	4611      	mov	r1, r2
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff fe8b 	bl	8000f36 <_ZN5Robot17setEncoderDividerEhf>
  getPID(request->motor_index)->reset();
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4619      	mov	r1, r3
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff fe9a 	bl	8000f60 <_ZN5Robot6getPIDEh>
 800122c:	4603      	mov	r3, r0
 800122e:	4618      	mov	r0, r3
 8001230:	f000 fe3e 	bl	8001eb0 <_ZN3PID5resetEv>
  getPID(request->motor_index)->init((float) ts/1000.0, request->tau, request->sat, true);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff fe90 	bl	8000f60 <_ZN5Robot6getPIDEh>
 8001240:	4602      	mov	r2, r0
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	ee07 3a90 	vmov	s15, r3
 800124a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800124e:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80012bc <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request+0xbc>
 8001252:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	edd3 7a05 	vldr	s15, [r3, #20]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	edd3 6a06 	vldr	s13, [r3, #24]
 8001262:	2101      	movs	r1, #1
 8001264:	eeb0 1a66 	vmov.f32	s2, s13
 8001268:	eef0 0a67 	vmov.f32	s1, s15
 800126c:	eeb0 0a47 	vmov.f32	s0, s14
 8001270:	4610      	mov	r0, r2
 8001272:	f000 fd83 	bl	8001d7c <_ZN3PID4initEfffb>
  getPID(request->motor_index)->setup(request->p, request->i, request->d);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	4619      	mov	r1, r3
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff fe6f 	bl	8000f60 <_ZN5Robot6getPIDEh>
 8001282:	4602      	mov	r2, r0
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	edd3 7a02 	vldr	s15, [r3, #8]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	edd3 6a04 	vldr	s13, [r3, #16]
 8001296:	eeb0 1a66 	vmov.f32	s2, s13
 800129a:	eef0 0a47 	vmov.f32	s1, s14
 800129e:	eeb0 0a67 	vmov.f32	s0, s15
 80012a2:	4610      	mov	r0, r2
 80012a4:	f000 fdea 	bl	8001e7c <_ZN3PID5setupEfff>

  setStatus(Status::Idle, true);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2100      	movs	r1, #0
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff fe14 	bl	8000eda <_ZN5Robot9setStatusENS_6StatusEb>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	447a0000 	.word	0x447a0000

080012c0 <_ZN5Robot8sndSetupEP34racs_services__srv__Setup_Response>:

void Robot::sndSetup(racs_services__srv__Setup_Response* response){
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  response->response = (uint8_t) Status::Setup;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	2203      	movs	r2, #3
 80012ce:	701a      	strb	r2, [r3, #0]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <_ZN5Robot6updateEv>:

void Robot::update(){
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	ed2d 8b02 	vpush	{d8}
 80012e2:	b089      	sub	sp, #36	; 0x24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  switch(status){
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d00c      	beq.n	800130c <_ZN5Robot6updateEv+0x30>
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	f200 809b 	bhi.w	800142e <_ZN5Robot6updateEv+0x152>
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d003      	beq.n	8001304 <_ZN5Robot6updateEv+0x28>
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	f000 80a1 	beq.w	8001444 <_ZN5Robot6updateEv+0x168>
 8001302:	e094      	b.n	800142e <_ZN5Robot6updateEv+0x152>
    case Status::Idle:
      resetPWMs();
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff fede 	bl	80010c6 <_ZN5Robot9resetPWMsEv>
      break;
 800130a:	e09c      	b.n	8001446 <_ZN5Robot6updateEv+0x16a>

    case Status::DAQ:
      break;

    case Status::PID:
      for(int i = 0; i < 1; i++){
 800130c:	2300      	movs	r3, #0
 800130e:	61fb      	str	r3, [r7, #28]
 8001310:	e088      	b.n	8001424 <_ZN5Robot6updateEv+0x148>
        float getpid = getPID(i)->evolve(
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	4619      	mov	r1, r3
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff fe21 	bl	8000f60 <_ZN5Robot6getPIDEh>
 800131e:	4604      	mov	r4, r0
        		encoders[i] / 				((error_div[i] == 0) ? 1.0 : error_div[i]),
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4413      	add	r3, r2
 800132a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	edd3 7a00 	vldr	s15, [r3]
 8001344:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134c:	d009      	beq.n	8001362 <_ZN5Robot6updateEv+0x86>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	edd3 7a00 	vldr	s15, [r3]
 800135c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001360:	e001      	b.n	8001366 <_ZN5Robot6updateEv+0x8a>
 8001362:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8001366:	ee85 6b07 	vdiv.f64	d6, d5, d7
        float getpid = getPID(i)->evolve(
 800136a:	eeb7 8bc6 	vcvt.f32.f64	s16, d6
				getMotor(i)->getEncoder() / ((error_div[i] == 0) ? 1.0 : error_div[i])
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	4619      	mov	r1, r3
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff fdcc 	bl	8000f12 <_ZN5Robot8getMotorEh>
 800137a:	4603      	mov	r3, r0
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fbfe 	bl	8000b7e <_ZN5Motor10getEncoderEv>
 8001382:	4603      	mov	r3, r0
 8001384:	ee07 3a90 	vmov	s15, r3
 8001388:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	edd3 7a00 	vldr	s15, [r3]
 800139a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800139e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a2:	d009      	beq.n	80013b8 <_ZN5Robot6updateEv+0xdc>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	edd3 7a00 	vldr	s15, [r3]
 80013b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013b6:	e001      	b.n	80013bc <_ZN5Robot6updateEv+0xe0>
 80013b8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80013bc:	ee85 6b07 	vdiv.f64	d6, d5, d7
        float getpid = getPID(i)->evolve(
 80013c0:	eef7 7bc6 	vcvt.f32.f64	s15, d6
 80013c4:	eef0 0a67 	vmov.f32	s1, s15
 80013c8:	eeb0 0a48 	vmov.f32	s0, s16
 80013cc:	4620      	mov	r0, r4
 80013ce:	f000 fe49 	bl	8002064 <_ZN3PID6evolveEff>
 80013d2:	eef0 7a40 	vmov.f32	s15, s0
				);
 80013d6:	edc7 7a03 	vstr	s15, [r7, #12]
    	motors_pwm[i] = (int16_t) std::min(std::max((float) -(HALF_PWM+1), getpid), (float) HALF_PWM);
 80013da:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	f107 020c 	add.w	r2, r7, #12
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	4611      	mov	r1, r2
 80013ea:	4618      	mov	r0, r3
 80013ec:	f000 fbd0 	bl	8001b90 <_ZSt3maxIfERKT_S2_S2_>
 80013f0:	4602      	mov	r2, r0
 80013f2:	4b27      	ldr	r3, [pc, #156]	; (8001490 <_ZN5Robot6updateEv+0x1b4>)
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	4619      	mov	r1, r3
 80013fc:	4610      	mov	r0, r2
 80013fe:	f000 fbe0 	bl	8001bc2 <_ZSt3minIfERKT_S2_S2_>
 8001402:	4603      	mov	r3, r0
 8001404:	edd3 7a00 	vldr	s15, [r3]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001416:	ee17 2a90 	vmov	r2, s15
 800141a:	b212      	sxth	r2, r2
 800141c:	801a      	strh	r2, [r3, #0]
      for(int i = 0; i < 1; i++){
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3301      	adds	r3, #1
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	2b00      	cmp	r3, #0
 8001428:	f77f af73 	ble.w	8001312 <_ZN5Robot6updateEv+0x36>
      }
      break;
 800142c:	e00b      	b.n	8001446 <_ZN5Robot6updateEv+0x16a>

    default:
      resetPWMs();
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff fe49 	bl	80010c6 <_ZN5Robot9resetPWMsEv>
      resetPIDs();
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff fda6 	bl	8000f86 <_ZN5Robot9resetPIDsEv>
      status = Status::Idle;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2200      	movs	r2, #0
 800143e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      break;
 8001442:	e000      	b.n	8001446 <_ZN5Robot6updateEv+0x16a>
      break;
 8001444:	bf00      	nop
  }

  for(int i = 0; i < size; i++){
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	e012      	b.n	8001472 <_ZN5Robot6updateEv+0x196>
    switches[i] = getMotor(i)->isInEndStop();
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	b2db      	uxtb	r3, r3
 8001450:	4619      	mov	r1, r3
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff fd5d 	bl	8000f12 <_ZN5Robot8getMotorEh>
 8001458:	4601      	mov	r1, r0
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	18d4      	adds	r4, r2, r3
 8001462:	4608      	mov	r0, r1
 8001464:	f7ff fc56 	bl	8000d14 <_ZN5Motor11isInEndStopEv>
 8001468:	4603      	mov	r3, r0
 800146a:	7023      	strb	r3, [r4, #0]
  for(int i = 0; i < size; i++){
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	3301      	adds	r3, #1
 8001470:	61bb      	str	r3, [r7, #24]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001478:	461a      	mov	r2, r3
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4293      	cmp	r3, r2
 800147e:	dbe5      	blt.n	800144c <_ZN5Robot6updateEv+0x170>
  }
}
 8001480:	bf00      	nop
 8001482:	bf00      	nop
 8001484:	3724      	adds	r7, #36	; 0x24
 8001486:	46bd      	mov	sp, r7
 8001488:	ecbd 8b02 	vpop	{d8}
 800148c:	bd90      	pop	{r4, r7, pc}
 800148e:	bf00      	nop
 8001490:	46ffff00 	.word	0x46ffff00

08001494 <_ZN5Robot7actuateEv>:

void Robot::actuate(){
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < size; i++){
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	e012      	b.n	80014c8 <_ZN5Robot7actuateEv+0x34>
    getMotor(i)->driveMotor(motors_pwm[i]);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	4619      	mov	r1, r3
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff fd32 	bl	8000f12 <_ZN5Robot8getMotorEh>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014bc:	4619      	mov	r1, r3
 80014be:	f7ff fb77 	bl	8000bb0 <_ZN5Motor10driveMotorEs>
  for(int i = 0; i < size; i++){
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3301      	adds	r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014ce:	461a      	mov	r2, r3
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4293      	cmp	r3, r2
 80014d4:	dbe5      	blt.n	80014a2 <_ZN5Robot7actuateEv+0xe>
  }
}
 80014d6:	bf00      	nop
 80014d8:	bf00      	nop
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_ZN5Robot5cycleEv>:

void Robot::cycle(){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
        update();
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f7ff fef7 	bl	80012dc <_ZN5Robot6updateEv>
        actuate();
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ffd0 	bl	8001494 <_ZN5Robot7actuateEv>
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <_Z12create_robotv>:

Robot create_robot() {
 80014fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fe:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
 8001502:	af0c      	add	r7, sp, #48	; 0x30
 8001504:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001508:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800150c:	6018      	str	r0, [r3, #0]

	PinControl mot1_ina = PinControl(MOTOR1_INA_GPIO_Port, MOTOR1_INA_Pin);
 800150e:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001512:	2201      	movs	r2, #1
 8001514:	49cd      	ldr	r1, [pc, #820]	; (800184c <_Z12create_robotv+0x350>)
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fa34 	bl	8000984 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot1_inb = PinControl(MOTOR1_INB_GPIO_Port, MOTOR1_INB_Pin);
 800151c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8001520:	2202      	movs	r2, #2
 8001522:	49ca      	ldr	r1, [pc, #808]	; (800184c <_Z12create_robotv+0x350>)
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fa2d 	bl	8000984 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot1_end = PinMeasure(MOTOR1_END_GPIO_Port, MOTOR1_END_Pin);
 800152a:	f507 7320 	add.w	r3, r7, #640	; 0x280
 800152e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001532:	49c7      	ldr	r1, [pc, #796]	; (8001850 <_Z12create_robotv+0x354>)
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fa6d 	bl	8000a14 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot2_ina = PinControl(MOTOR2_INA_GPIO_Port, MOTOR2_INA_Pin);
 800153a:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800153e:	2204      	movs	r2, #4
 8001540:	49c2      	ldr	r1, [pc, #776]	; (800184c <_Z12create_robotv+0x350>)
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fa1e 	bl	8000984 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot2_inb = PinControl(MOTOR2_INB_GPIO_Port, MOTOR2_INB_Pin);
 8001548:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800154c:	2208      	movs	r2, #8
 800154e:	49bf      	ldr	r1, [pc, #764]	; (800184c <_Z12create_robotv+0x350>)
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fa17 	bl	8000984 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot2_end = PinMeasure(MOTOR2_END_GPIO_Port, MOTOR2_END_Pin);
 8001556:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800155a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800155e:	49bc      	ldr	r1, [pc, #752]	; (8001850 <_Z12create_robotv+0x354>)
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fa57 	bl	8000a14 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot3_ina = PinControl(MOTOR3_INA_GPIO_Port, MOTOR3_INA_Pin);
 8001566:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800156a:	2210      	movs	r2, #16
 800156c:	49b7      	ldr	r1, [pc, #732]	; (800184c <_Z12create_robotv+0x350>)
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fa08 	bl	8000984 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot3_inb = PinControl(MOTOR3_INB_GPIO_Port, MOTOR3_INB_Pin);
 8001574:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001578:	2220      	movs	r2, #32
 800157a:	49b4      	ldr	r1, [pc, #720]	; (800184c <_Z12create_robotv+0x350>)
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fa01 	bl	8000984 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot3_end = PinMeasure(MOTOR3_END_GPIO_Port, MOTOR3_END_Pin);
 8001582:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001586:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800158a:	49b1      	ldr	r1, [pc, #708]	; (8001850 <_Z12create_robotv+0x354>)
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fa41 	bl	8000a14 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot4_ina = PinControl(MOTOR4_INA_GPIO_Port, MOTOR4_INA_Pin);
 8001592:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001596:	2240      	movs	r2, #64	; 0x40
 8001598:	49ac      	ldr	r1, [pc, #688]	; (800184c <_Z12create_robotv+0x350>)
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff f9f2 	bl	8000984 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot4_inb = PinControl(MOTOR4_INB_GPIO_Port, MOTOR4_INB_Pin);
 80015a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a4:	2280      	movs	r2, #128	; 0x80
 80015a6:	49a9      	ldr	r1, [pc, #676]	; (800184c <_Z12create_robotv+0x350>)
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff f9eb 	bl	8000984 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot4_end = PinMeasure(MOTOR4_END_GPIO_Port, MOTOR4_END_Pin);
 80015ae:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80015b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015b6:	49a6      	ldr	r1, [pc, #664]	; (8001850 <_Z12create_robotv+0x354>)
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fa2b 	bl	8000a14 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot5_ina = PinControl(MOTOR5_INA_GPIO_Port, MOTOR5_INA_Pin);
 80015be:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 80015c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015c6:	49a1      	ldr	r1, [pc, #644]	; (800184c <_Z12create_robotv+0x350>)
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff f9db 	bl	8000984 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot5_inb = PinControl(MOTOR5_INB_GPIO_Port, MOTOR5_INB_Pin);
 80015ce:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80015d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015d6:	499d      	ldr	r1, [pc, #628]	; (800184c <_Z12create_robotv+0x350>)
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff f9d3 	bl	8000984 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot5_end = PinMeasure(MOTOR5_END_GPIO_Port, MOTOR5_END_Pin);
 80015de:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 80015e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015e6:	499a      	ldr	r1, [pc, #616]	; (8001850 <_Z12create_robotv+0x354>)
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fa13 	bl	8000a14 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot6_ina = PinControl(MOTOR6_INA_GPIO_Port, MOTOR6_INA_Pin);
 80015ee:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80015f2:	2204      	movs	r2, #4
 80015f4:	4996      	ldr	r1, [pc, #600]	; (8001850 <_Z12create_robotv+0x354>)
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff f9c4 	bl	8000984 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot6_inb = PinControl(MOTOR6_INB_GPIO_Port, MOTOR6_INB_Pin);
 80015fc:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001600:	2208      	movs	r2, #8
 8001602:	4993      	ldr	r1, [pc, #588]	; (8001850 <_Z12create_robotv+0x354>)
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff f9bd 	bl	8000984 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot6_end = PinMeasure(MOTOR6_END_GPIO_Port, MOTOR6_END_Pin);
 800160a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800160e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001612:	498f      	ldr	r1, [pc, #572]	; (8001850 <_Z12create_robotv+0x354>)
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff f9fd 	bl	8000a14 <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl enable = PinControl(MOTORS_EN_GPIO_Port, MOTORS_EN_Pin);
 800161a:	f507 73c0 	add.w	r3, r7, #384	; 0x180
 800161e:	2240      	movs	r2, #64	; 0x40
 8001620:	498b      	ldr	r1, [pc, #556]	; (8001850 <_Z12create_robotv+0x354>)
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff f9ae 	bl	8000984 <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl toggle = PinControl(PIN_TOGGLE_GPIO_Port, PIN_TOGGLE_Pin);
 8001628:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800162c:	2220      	movs	r2, #32
 800162e:	4988      	ldr	r1, [pc, #544]	; (8001850 <_Z12create_robotv+0x354>)
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff f9a7 	bl	8000984 <_ZN10PinControlC1EP12GPIO_TypeDeft>

	Motor motor1 = Motor(mot1_ina, mot1_inb, &htim1, 1, &htim2, mot1_end);
 8001636:	f507 759a 	add.w	r5, r7, #308	; 0x134
 800163a:	ac08      	add	r4, sp, #32
 800163c:	f507 7320 	add.w	r3, r7, #640	; 0x280
 8001640:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001642:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001646:	4b83      	ldr	r3, [pc, #524]	; (8001854 <_Z12create_robotv+0x358>)
 8001648:	9307      	str	r3, [sp, #28]
 800164a:	2301      	movs	r3, #1
 800164c:	9306      	str	r3, [sp, #24]
 800164e:	4b82      	ldr	r3, [pc, #520]	; (8001858 <_Z12create_robotv+0x35c>)
 8001650:	9305      	str	r3, [sp, #20]
 8001652:	ac01      	add	r4, sp, #4
 8001654:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8001658:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800165a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800165e:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001668:	cb0e      	ldmia	r3, {r1, r2, r3}
 800166a:	4628      	mov	r0, r5
 800166c:	f7ff fa4a 	bl	8000b04 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor2 = Motor(mot2_ina, mot2_inb, &htim1, 2, &htim3, mot2_end);
 8001670:	f107 05f8 	add.w	r5, r7, #248	; 0xf8
 8001674:	ac08      	add	r4, sp, #32
 8001676:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800167a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800167c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001680:	4b76      	ldr	r3, [pc, #472]	; (800185c <_Z12create_robotv+0x360>)
 8001682:	9307      	str	r3, [sp, #28]
 8001684:	2302      	movs	r3, #2
 8001686:	9306      	str	r3, [sp, #24]
 8001688:	4b73      	ldr	r3, [pc, #460]	; (8001858 <_Z12create_robotv+0x35c>)
 800168a:	9305      	str	r3, [sp, #20]
 800168c:	ac01      	add	r4, sp, #4
 800168e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001692:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001694:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001698:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80016a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016a4:	4628      	mov	r0, r5
 80016a6:	f7ff fa2d 	bl	8000b04 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor3 = Motor(mot3_ina, mot3_inb, &htim1, 3, &htim4, mot3_end);
 80016aa:	f107 05bc 	add.w	r5, r7, #188	; 0xbc
 80016ae:	ac08      	add	r4, sp, #32
 80016b0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80016b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016ba:	4b69      	ldr	r3, [pc, #420]	; (8001860 <_Z12create_robotv+0x364>)
 80016bc:	9307      	str	r3, [sp, #28]
 80016be:	2303      	movs	r3, #3
 80016c0:	9306      	str	r3, [sp, #24]
 80016c2:	4b65      	ldr	r3, [pc, #404]	; (8001858 <_Z12create_robotv+0x35c>)
 80016c4:	9305      	str	r3, [sp, #20]
 80016c6:	ac01      	add	r4, sp, #4
 80016c8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80016cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016d2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80016dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016de:	4628      	mov	r0, r5
 80016e0:	f7ff fa10 	bl	8000b04 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor4 = Motor(mot4_ina, mot4_inb, &htim1, 4, &htim5, mot4_end);
 80016e4:	f107 0580 	add.w	r5, r7, #128	; 0x80
 80016e8:	ac08      	add	r4, sp, #32
 80016ea:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80016ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016f4:	4b5b      	ldr	r3, [pc, #364]	; (8001864 <_Z12create_robotv+0x368>)
 80016f6:	9307      	str	r3, [sp, #28]
 80016f8:	2304      	movs	r3, #4
 80016fa:	9306      	str	r3, [sp, #24]
 80016fc:	4b56      	ldr	r3, [pc, #344]	; (8001858 <_Z12create_robotv+0x35c>)
 80016fe:	9305      	str	r3, [sp, #20]
 8001700:	ac01      	add	r4, sp, #4
 8001702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001706:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001708:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800170c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001716:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001718:	4628      	mov	r0, r5
 800171a:	f7ff f9f3 	bl	8000b04 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor5 = Motor(mot5_ina, mot5_inb, &htim9, 1, &htim8, mot5_end);
 800171e:	f107 0544 	add.w	r5, r7, #68	; 0x44
 8001722:	ac08      	add	r4, sp, #32
 8001724:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001728:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800172a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800172e:	4b4e      	ldr	r3, [pc, #312]	; (8001868 <_Z12create_robotv+0x36c>)
 8001730:	9307      	str	r3, [sp, #28]
 8001732:	2301      	movs	r3, #1
 8001734:	9306      	str	r3, [sp, #24]
 8001736:	4b4d      	ldr	r3, [pc, #308]	; (800186c <_Z12create_robotv+0x370>)
 8001738:	9305      	str	r3, [sp, #20]
 800173a:	ac01      	add	r4, sp, #4
 800173c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001740:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001742:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001746:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 8001750:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001752:	4628      	mov	r0, r5
 8001754:	f7ff f9d6 	bl	8000b04 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor6 = Motor(mot6_ina, mot6_inb, &htim9, 2, 		mot6_end);
 8001758:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800175c:	f5a3 7484 	sub.w	r4, r3, #264	; 0x108
 8001760:	f107 0608 	add.w	r6, r7, #8
 8001764:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001768:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800176c:	ad07      	add	r5, sp, #28
 800176e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001770:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001774:	2302      	movs	r3, #2
 8001776:	9306      	str	r3, [sp, #24]
 8001778:	4b3c      	ldr	r3, [pc, #240]	; (800186c <_Z12create_robotv+0x370>)
 800177a:	9305      	str	r3, [sp, #20]
 800177c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001780:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001784:	ad01      	add	r5, sp, #4
 8001786:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001788:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800178c:	68e3      	ldr	r3, [r4, #12]
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001794:	4630      	mov	r0, r6
 8001796:	f7ff f983 	bl	8000aa0 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefh10PinMeasure>

	Motor** motors = (Motor**) malloc(sizeof(Motor*)*6);
 800179a:	2018      	movs	r0, #24
 800179c:	f01b fe42 	bl	801d424 <malloc>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
	float* encs_div = (float*) malloc(sizeof(float)*6);
 80017a6:	2018      	movs	r0, #24
 80017a8:	f01b fe3c 	bl	801d424 <malloc>
 80017ac:	4603      	mov	r3, r0
 80017ae:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0

	motors[0] = &motor1; motors[1] = &motor2; motors[2] = &motor3; motors[3] = &motor4; motors[4] = &motor5; motors[5] = &motor6;
 80017b2:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80017b6:	f507 729a 	add.w	r2, r7, #308	; 0x134
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80017c0:	3304      	adds	r3, #4
 80017c2:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80017cc:	3308      	adds	r3, #8
 80017ce:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80017d8:	330c      	adds	r3, #12
 80017da:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80017e4:	3310      	adds	r3, #16
 80017e6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80017f0:	3314      	adds	r3, #20
 80017f2:	f107 0208 	add.w	r2, r7, #8
 80017f6:	601a      	str	r2, [r3, #0]
	encs_div[0] = 1; encs_div[1] = 1; encs_div[2] = 1; encs_div[3] = 1; encs_div[4] = 1; encs_div[5] = 1;
 80017f8:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 80017fc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8001806:	3304      	adds	r3, #4
 8001808:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8001812:	3308      	adds	r3, #8
 8001814:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800181e:	330c      	adds	r3, #12
 8001820:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800182a:	3310      	adds	r3, #16
 800182c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001830:	601a      	str	r2, [r3, #0]
 8001832:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8001836:	3314      	adds	r3, #20
 8001838:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800183c:	601a      	str	r2, [r3, #0]
	Robot myRobot = Robot(enable, toggle, TS, 6, motors, encs_div);
 800183e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001842:	f5a3 749c 	sub.w	r4, r3, #312	; 0x138
 8001846:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800184a:	e023      	b.n	8001894 <_Z12create_robotv+0x398>
 800184c:	40020c00 	.word	0x40020c00
 8001850:	40021800 	.word	0x40021800
 8001854:	20006874 	.word	0x20006874
 8001858:	20006828 	.word	0x20006828
 800185c:	200068c0 	.word	0x200068c0
 8001860:	2000690c 	.word	0x2000690c
 8001864:	20006958 	.word	0x20006958
 8001868:	200069a4 	.word	0x200069a4
 800186c:	200069f0 	.word	0x200069f0
 8001870:	00000000 	.word	0x00000000
 8001874:	437a0000 	.word	0x437a0000
 8001878:	469c4000 	.word	0x469c4000
 800187c:	43480000 	.word	0x43480000
 8001880:	42c80000 	.word	0x42c80000
 8001884:	43960000 	.word	0x43960000
 8001888:	461c4000 	.word	0x461c4000
 800188c:	3dcccccd 	.word	0x3dcccccd
 8001890:	3c23d70a 	.word	0x3c23d70a
 8001894:	f5a3 762d 	sub.w	r6, r3, #692	; 0x2b4
 8001898:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 800189c:	9308      	str	r3, [sp, #32]
 800189e:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 80018a2:	9307      	str	r3, [sp, #28]
 80018a4:	2306      	movs	r3, #6
 80018a6:	9306      	str	r3, [sp, #24]
 80018a8:	230a      	movs	r3, #10
 80018aa:	9305      	str	r3, [sp, #20]
 80018ac:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80018b0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018b4:	ad01      	add	r5, sp, #4
 80018b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018b8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80018bc:	68e3      	ldr	r3, [r4, #12]
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80018c4:	6830      	ldr	r0, [r6, #0]
 80018c6:	f7ff fa41 	bl	8000d4c <_ZN5RobotC1E10PinControlS0_mhPP5MotorPf>

	myRobot.setStatus(Robot::Status::Idle, true);
 80018ca:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80018ce:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80018d2:	2201      	movs	r2, #1
 80018d4:	2100      	movs	r1, #0
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	f7ff faff 	bl	8000eda <_ZN5Robot9setStatusENS_6StatusEb>

	myRobot.setEncoderDivider(0, ENC_1_DIV);
 80018dc:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80018e0:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80018e4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80018e8:	2100      	movs	r1, #0
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	f7ff fb23 	bl	8000f36 <_ZN5Robot17setEncoderDividerEhf>
	myRobot.getPID(0)->reset();
 80018f0:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80018f4:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80018f8:	2100      	movs	r1, #0
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	f7ff fb30 	bl	8000f60 <_ZN5Robot6getPIDEh>
 8001900:	4603      	mov	r3, r0
 8001902:	4618      	mov	r0, r3
 8001904:	f000 fad4 	bl	8001eb0 <_ZN3PID5resetEv>
	myRobot.getPID(0)->setup(PID_1_KP, PID_1_KI, PID_1_KD);
 8001908:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800190c:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001910:	2100      	movs	r1, #0
 8001912:	6818      	ldr	r0, [r3, #0]
 8001914:	f7ff fb24 	bl	8000f60 <_ZN5Robot6getPIDEh>
 8001918:	4603      	mov	r3, r0
 800191a:	eeb2 1a0e 	vmov.f32	s2, #46	; 0x41700000  15.0
 800191e:	ed5f 0a2c 	vldr	s1, [pc, #-176]	; 8001870 <_Z12create_robotv+0x374>
 8001922:	ed1f 0a2c 	vldr	s0, [pc, #-176]	; 8001874 <_Z12create_robotv+0x378>
 8001926:	4618      	mov	r0, r3
 8001928:	f000 faa8 	bl	8001e7c <_ZN3PID5setupEfff>
	myRobot.getPID(0)->init((float) TS/1000.0, PID_1_POLE, PID_1_SAT, true);
 800192c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001930:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001934:	2100      	movs	r1, #0
 8001936:	6818      	ldr	r0, [r3, #0]
 8001938:	f7ff fb12 	bl	8000f60 <_ZN5Robot6getPIDEh>
 800193c:	4603      	mov	r3, r0
 800193e:	2101      	movs	r1, #1
 8001940:	ed1f 1a33 	vldr	s2, [pc, #-204]	; 8001878 <_Z12create_robotv+0x37c>
 8001944:	eef5 0a00 	vmov.f32	s1, #80	; 0x3e800000  0.250
 8001948:	ed1f 0a2f 	vldr	s0, [pc, #-188]	; 8001890 <_Z12create_robotv+0x394>
 800194c:	4618      	mov	r0, r3
 800194e:	f000 fa15 	bl	8001d7c <_ZN3PID4initEfffb>

	myRobot.setEncoderDivider(1, ENC_2_DIV);
 8001952:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001956:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800195a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800195e:	2101      	movs	r1, #1
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	f7ff fae8 	bl	8000f36 <_ZN5Robot17setEncoderDividerEhf>
	myRobot.getPID(1)->reset();
 8001966:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800196a:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 800196e:	2101      	movs	r1, #1
 8001970:	6818      	ldr	r0, [r3, #0]
 8001972:	f7ff faf5 	bl	8000f60 <_ZN5Robot6getPIDEh>
 8001976:	4603      	mov	r3, r0
 8001978:	4618      	mov	r0, r3
 800197a:	f000 fa99 	bl	8001eb0 <_ZN3PID5resetEv>
	myRobot.getPID(1)->setup(PID_2_KP, PID_2_KI, PID_2_KD);
 800197e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001982:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001986:	2101      	movs	r1, #1
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	f7ff fae9 	bl	8000f60 <_ZN5Robot6getPIDEh>
 800198e:	4603      	mov	r3, r0
 8001990:	ed1f 1a46 	vldr	s2, [pc, #-280]	; 800187c <_Z12create_robotv+0x380>
 8001994:	ed5f 0a46 	vldr	s1, [pc, #-280]	; 8001880 <_Z12create_robotv+0x384>
 8001998:	ed1f 0a46 	vldr	s0, [pc, #-280]	; 8001884 <_Z12create_robotv+0x388>
 800199c:	4618      	mov	r0, r3
 800199e:	f000 fa6d 	bl	8001e7c <_ZN3PID5setupEfff>
	myRobot.getPID(1)->init((float) TS/1000.0, PID_2_POLE, PID_2_SAT, true);
 80019a2:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80019a6:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80019aa:	2101      	movs	r1, #1
 80019ac:	6818      	ldr	r0, [r3, #0]
 80019ae:	f7ff fad7 	bl	8000f60 <_ZN5Robot6getPIDEh>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2101      	movs	r1, #1
 80019b6:	ed1f 1a4c 	vldr	s2, [pc, #-304]	; 8001888 <_Z12create_robotv+0x38c>
 80019ba:	ed5f 0a4c 	vldr	s1, [pc, #-304]	; 800188c <_Z12create_robotv+0x390>
 80019be:	ed1f 0a4c 	vldr	s0, [pc, #-304]	; 8001890 <_Z12create_robotv+0x394>
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 f9da 	bl	8001d7c <_ZN3PID4initEfffb>

	myRobot.setEncoderDivider(2, ENC_3_DIV);
 80019c8:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80019cc:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80019d0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80019d4:	2102      	movs	r1, #2
 80019d6:	6818      	ldr	r0, [r3, #0]
 80019d8:	f7ff faad 	bl	8000f36 <_ZN5Robot17setEncoderDividerEhf>
	myRobot.getPID(2)->reset();
 80019dc:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80019e0:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80019e4:	2102      	movs	r1, #2
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	f7ff faba 	bl	8000f60 <_ZN5Robot6getPIDEh>
 80019ec:	4603      	mov	r3, r0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 fa5e 	bl	8001eb0 <_ZN3PID5resetEv>
	myRobot.getPID(2)->setup(PID_3_KP, PID_3_KI, PID_3_KD);
 80019f4:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80019f8:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 80019fc:	2102      	movs	r1, #2
 80019fe:	6818      	ldr	r0, [r3, #0]
 8001a00:	f7ff faae 	bl	8000f60 <_ZN5Robot6getPIDEh>
 8001a04:	4603      	mov	r3, r0
 8001a06:	ed1f 1a63 	vldr	s2, [pc, #-396]	; 800187c <_Z12create_robotv+0x380>
 8001a0a:	ed5f 0a63 	vldr	s1, [pc, #-396]	; 8001880 <_Z12create_robotv+0x384>
 8001a0e:	ed1f 0a63 	vldr	s0, [pc, #-396]	; 8001884 <_Z12create_robotv+0x388>
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 fa32 	bl	8001e7c <_ZN3PID5setupEfff>
	myRobot.getPID(2)->init((float) TS/1000.0, PID_3_POLE, PID_3_SAT, true);
 8001a18:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001a1c:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001a20:	2102      	movs	r1, #2
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	f7ff fa9c 	bl	8000f60 <_ZN5Robot6getPIDEh>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	ed1f 1a6a 	vldr	s2, [pc, #-424]	; 8001888 <_Z12create_robotv+0x38c>
 8001a30:	ed5f 0a6a 	vldr	s1, [pc, #-424]	; 800188c <_Z12create_robotv+0x390>
 8001a34:	ed1f 0a6a 	vldr	s0, [pc, #-424]	; 8001890 <_Z12create_robotv+0x394>
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f000 f99f 	bl	8001d7c <_ZN3PID4initEfffb>

	myRobot.setEncoderDivider(3, ENC_4_DIV);
 8001a3e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001a42:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001a46:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001a4a:	2103      	movs	r1, #3
 8001a4c:	6818      	ldr	r0, [r3, #0]
 8001a4e:	f7ff fa72 	bl	8000f36 <_ZN5Robot17setEncoderDividerEhf>
	myRobot.getPID(3)->reset();
 8001a52:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001a56:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001a5a:	2103      	movs	r1, #3
 8001a5c:	6818      	ldr	r0, [r3, #0]
 8001a5e:	f7ff fa7f 	bl	8000f60 <_ZN5Robot6getPIDEh>
 8001a62:	4603      	mov	r3, r0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f000 fa23 	bl	8001eb0 <_ZN3PID5resetEv>
	myRobot.getPID(3)->setup(PID_4_KP, PID_4_KI, PID_4_KD);
 8001a6a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001a6e:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001a72:	2103      	movs	r1, #3
 8001a74:	6818      	ldr	r0, [r3, #0]
 8001a76:	f7ff fa73 	bl	8000f60 <_ZN5Robot6getPIDEh>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	ed1f 1a81 	vldr	s2, [pc, #-516]	; 800187c <_Z12create_robotv+0x380>
 8001a80:	ed5f 0a81 	vldr	s1, [pc, #-516]	; 8001880 <_Z12create_robotv+0x384>
 8001a84:	ed1f 0a81 	vldr	s0, [pc, #-516]	; 8001884 <_Z12create_robotv+0x388>
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f000 f9f7 	bl	8001e7c <_ZN3PID5setupEfff>
	myRobot.getPID(3)->init((float) TS/1000.0, PID_4_POLE, PID_4_SAT, true);
 8001a8e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001a92:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001a96:	2103      	movs	r1, #3
 8001a98:	6818      	ldr	r0, [r3, #0]
 8001a9a:	f7ff fa61 	bl	8000f60 <_ZN5Robot6getPIDEh>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	ed1f 1a87 	vldr	s2, [pc, #-540]	; 8001888 <_Z12create_robotv+0x38c>
 8001aa6:	ed5f 0a87 	vldr	s1, [pc, #-540]	; 800188c <_Z12create_robotv+0x390>
 8001aaa:	ed1f 0a87 	vldr	s0, [pc, #-540]	; 8001890 <_Z12create_robotv+0x394>
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 f964 	bl	8001d7c <_ZN3PID4initEfffb>

	myRobot.setEncoderDivider(4, ENC_5_DIV);
 8001ab4:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001ab8:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001abc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001ac0:	2104      	movs	r1, #4
 8001ac2:	6818      	ldr	r0, [r3, #0]
 8001ac4:	f7ff fa37 	bl	8000f36 <_ZN5Robot17setEncoderDividerEhf>
	myRobot.getPID(4)->reset();
 8001ac8:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001acc:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001ad0:	2104      	movs	r1, #4
 8001ad2:	6818      	ldr	r0, [r3, #0]
 8001ad4:	f7ff fa44 	bl	8000f60 <_ZN5Robot6getPIDEh>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f9e8 	bl	8001eb0 <_ZN3PID5resetEv>
	myRobot.getPID(4)->setup(PID_5_KP, PID_5_KI, PID_5_KD);
 8001ae0:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001ae4:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001ae8:	2104      	movs	r1, #4
 8001aea:	6818      	ldr	r0, [r3, #0]
 8001aec:	f7ff fa38 	bl	8000f60 <_ZN5Robot6getPIDEh>
 8001af0:	4603      	mov	r3, r0
 8001af2:	ed1f 1a9e 	vldr	s2, [pc, #-632]	; 800187c <_Z12create_robotv+0x380>
 8001af6:	ed5f 0a9e 	vldr	s1, [pc, #-632]	; 8001880 <_Z12create_robotv+0x384>
 8001afa:	ed1f 0a9e 	vldr	s0, [pc, #-632]	; 8001884 <_Z12create_robotv+0x388>
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 f9bc 	bl	8001e7c <_ZN3PID5setupEfff>
	myRobot.getPID(4)->init((float) TS/1000.0, PID_5_POLE, PID_5_SAT, true);
 8001b04:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001b08:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001b0c:	2104      	movs	r1, #4
 8001b0e:	6818      	ldr	r0, [r3, #0]
 8001b10:	f7ff fa26 	bl	8000f60 <_ZN5Robot6getPIDEh>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2101      	movs	r1, #1
 8001b18:	ed1f 1aa5 	vldr	s2, [pc, #-660]	; 8001888 <_Z12create_robotv+0x38c>
 8001b1c:	ed5f 0aa5 	vldr	s1, [pc, #-660]	; 800188c <_Z12create_robotv+0x390>
 8001b20:	ed1f 0aa5 	vldr	s0, [pc, #-660]	; 8001890 <_Z12create_robotv+0x394>
 8001b24:	4618      	mov	r0, r3
 8001b26:	f000 f929 	bl	8001d7c <_ZN3PID4initEfffb>

	return myRobot;
 8001b2a:	bf00      	nop
}
 8001b2c:	f107 0308 	add.w	r3, r7, #8
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff f819 	bl	8000b68 <_ZN5MotorD1Ev>
 8001b36:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff f814 	bl	8000b68 <_ZN5MotorD1Ev>
 8001b40:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff f80f 	bl	8000b68 <_ZN5MotorD1Ev>
 8001b4a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff f80a 	bl	8000b68 <_ZN5MotorD1Ev>
 8001b54:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff f805 	bl	8000b68 <_ZN5MotorD1Ev>
 8001b5e:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff f800 	bl	8000b68 <_ZN5MotorD1Ev>
	return myRobot;
 8001b68:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001b6c:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001b70:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8001b74:	f5a2 722d 	sub.w	r2, r2, #692	; 0x2b4
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	601a      	str	r2, [r3, #0]
}
 8001b7c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8001b80:	f5a3 732d 	sub.w	r3, r3, #692	; 0x2b4
 8001b84:	6818      	ldr	r0, [r3, #0]
 8001b86:	f507 772f 	add.w	r7, r7, #700	; 0x2bc
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b8e:	bf00      	nop

08001b90 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	ed93 7a00 	vldr	s14, [r3]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	edd3 7a00 	vldr	s15, [r3]
 8001ba6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bae:	d501      	bpl.n	8001bb4 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	e000      	b.n	8001bb6 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8001bb4:	687b      	ldr	r3, [r7, #4]
    }
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8001bc2:	b480      	push	{r7}
 8001bc4:	b083      	sub	sp, #12
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	ed93 7a00 	vldr	s14, [r3]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	edd3 7a00 	vldr	s15, [r3]
 8001bd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be0:	d501      	bpl.n	8001be6 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	e000      	b.n	8001be8 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8001be6:	687b      	ldr	r3, [r7, #4]
    }
 8001be8:	4618      	mov	r0, r3
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <_Z41__static_initialization_and_destruction_0ii>:

Robot ScorBot = create_robot();
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d108      	bne.n	8001c16 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d103      	bne.n	8001c16 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fc73 	bl	80014fc <_Z12create_robotv>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d107      	bne.n	8001c2c <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d102      	bne.n	8001c2c <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001c26:	4803      	ldr	r0, [pc, #12]	; (8001c34 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001c28:	f7ff f930 	bl	8000e8c <_ZN5RobotD1Ev>
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	2000235c 	.word	0x2000235c

08001c38 <_GLOBAL__sub_I__ZN10PinControlC2Ev>:
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c40:	2001      	movs	r0, #1
 8001c42:	f7ff ffd7 	bl	8001bf4 <_Z41__static_initialization_and_destruction_0ii>
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <_GLOBAL__sub_D__ZN10PinControlC2Ev>:
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001c50:	2000      	movs	r0, #0
 8001c52:	f7ff ffcf 	bl	8001bf4 <_Z41__static_initialization_and_destruction_0ii>
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c62:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c66:	eef0 7ae7 	vabs.f32	s15, s15
 8001c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c82:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c86:	f01b facb 	bl	801d220 <expf>
 8001c8a:	eef0 7a40 	vmov.f32	s15, s0
 8001c8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <_ZN10Integrator4initEff>:
#include <cmath>

// Integrator

void Integrator::init(float ts, float sat)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ca4:	edc7 0a01 	vstr	s1, [r7, #4]
  this->ts = ts;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	601a      	str	r2, [r3, #0]
  this->sat = sat;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	605a      	str	r2, [r3, #4]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <_ZN10Integrator5inputEf>:
{
  this->x = x;
}

void Integrator::input(float u)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	ed87 0a00 	vstr	s0, [r7]
  this->u = u;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	60da      	str	r2, [r3, #12]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <_ZN10Integrator4stepEv>:

void Integrator::step()
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  x = x + ts*u;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	ed93 7a02 	vldr	s14, [r3, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	edd3 6a00 	vldr	s13, [r3]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	edd3 7a03 	vldr	s15, [r3, #12]
 8001cf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	edc3 7a02 	vstr	s15, [r3, #8]
  apply_saturation();
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f82e 	bl	8001d68 <_ZN10Integrator16apply_saturationEv>
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <_ZN10Integrator6outputEv>:

float Integrator::output()
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  return x;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	ee07 3a90 	vmov	s15, r3
}
 8001d24:	eeb0 0a67 	vmov.f32	s0, s15
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <_ZN10Integrator6evolveEf>:

float Integrator::evolve(float u)
{ 
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b084      	sub	sp, #16
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	ed87 0a00 	vstr	s0, [r7]
  float y;

  input(u);
 8001d3e:	ed97 0a00 	vldr	s0, [r7]
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff ffbc 	bl	8001cc0 <_ZN10Integrator5inputEf>
  y = output();
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7ff ffe3 	bl	8001d14 <_ZN10Integrator6outputEv>
 8001d4e:	ed87 0a03 	vstr	s0, [r7, #12]
  step();
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7ff ffc3 	bl	8001cde <_ZN10Integrator4stepEv>

  return y;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	ee07 3a90 	vmov	s15, r3
}
 8001d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <_ZN10Integrator16apply_saturationEv>:

void Integrator::apply_saturation()
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
	//x = x > +sat ? +sat : x;
	//x = x < -sat ? -sat : x;
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <_ZN3PID4initEfffb>:


// PID

void PID::init(float ts, float tau, float sat, bool bumpless)
{
 8001d7c:	b5b0      	push	{r4, r5, r7, lr}
 8001d7e:	b09e      	sub	sp, #120	; 0x78
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6178      	str	r0, [r7, #20]
 8001d84:	ed87 0a04 	vstr	s0, [r7, #16]
 8001d88:	edc7 0a03 	vstr	s1, [r7, #12]
 8001d8c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001d90:	460b      	mov	r3, r1
 8001d92:	71fb      	strb	r3, [r7, #7]
  this->ts = ts;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	601a      	str	r2, [r3, #0]
  this->N = N;
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	605a      	str	r2, [r3, #4]
  this->sat = sat;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	609a      	str	r2, [r3, #8]
  this->bumpless = bumpless;
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	79fa      	ldrb	r2, [r7, #7]
 8001dac:	731a      	strb	r2, [r3, #12]
  this->integrator = Integrator();
 8001dae:	f107 0318 	add.w	r3, r7, #24
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7fe fd4e 	bl	8000854 <_ZN10IntegratorC1Ev>
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8001dbe:	f107 0318 	add.w	r3, r7, #24
 8001dc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001dc8:	f107 0318 	add.w	r3, r7, #24
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fd4c 	bl	800086a <_ZN10IntegratorD1Ev>
  this->derivator = Filter();
 8001dd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fd52 	bl	8000880 <_ZN6FilterC1Ev>
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8001de2:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8001de6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dee:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001df2:	e884 0003 	stmia.w	r4, {r0, r1}
  this->lowPassFilter = Filter();
 8001df6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fd40 	bl	8000880 <_ZN6FilterC1Ev>
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001e06:	f107 0550 	add.w	r5, r7, #80	; 0x50
 8001e0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e12:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e16:	e884 0003 	stmia.w	r4, {r0, r1}

  integrator.init(ts, 20000.0);
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	3338      	adds	r3, #56	; 0x38
 8001e1e:	eddf 0a14 	vldr	s1, [pc, #80]	; 8001e70 <_ZN3PID4initEfffb+0xf4>
 8001e22:	ed97 0a04 	vldr	s0, [r7, #16]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff ff36 	bl	8001c98 <_ZN10Integrator4initEff>
  derivator.init(tau, 1, 1, 0, ts);			// Td*s/(1+s*Td/N)
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	3348      	adds	r3, #72	; 0x48
 8001e30:	ed97 2a04 	vldr	s4, [r7, #16]
 8001e34:	eddf 1a0f 	vldr	s3, [pc, #60]	; 8001e74 <_ZN3PID4initEfffb+0xf8>
 8001e38:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001e3c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001e40:	ed97 0a03 	vldr	s0, [r7, #12]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f000 f9d0 	bl	80021ea <_ZN6Filter4initEfffff>
  lowPassFilter.init(0.1, 1, 0, 1, ts);
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	3370      	adds	r3, #112	; 0x70
 8001e4e:	ed97 2a04 	vldr	s4, [r7, #16]
 8001e52:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001e56:	ed9f 1a07 	vldr	s2, [pc, #28]	; 8001e74 <_ZN3PID4initEfffb+0xf8>
 8001e5a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001e5e:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001e78 <_ZN3PID4initEfffb+0xfc>
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f9c1 	bl	80021ea <_ZN6Filter4initEfffff>
}
 8001e68:	bf00      	nop
 8001e6a:	3778      	adds	r7, #120	; 0x78
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e70:	469c4000 	.word	0x469c4000
 8001e74:	00000000 	.word	0x00000000
 8001e78:	3dcccccd 	.word	0x3dcccccd

08001e7c <_ZN3PID5setupEfff>:

void PID::setup(float kp, float ki, float kd)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e88:	edc7 0a01 	vstr	s1, [r7, #4]
 8001e8c:	ed87 1a00 	vstr	s2, [r7]
  this->kp = kp;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	611a      	str	r2, [r3, #16]
  this->ki = ki;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	615a      	str	r2, [r3, #20]
  this->kd = kd;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	619a      	str	r2, [r3, #24]
}
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
	...

08001eb0 <_ZN3PID5resetEv>:

void PID::reset()
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  reset(0.0, 0.0);
 8001eb8:	eddf 0a05 	vldr	s1, [pc, #20]	; 8001ed0 <_ZN3PID5resetEv+0x20>
 8001ebc:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001ed0 <_ZN3PID5resetEv+0x20>
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f807 	bl	8001ed4 <_ZN3PID5resetEff>
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	00000000 	.word	0x00000000

08001ed4 <_ZN3PID5resetEff>:

void PID::reset(float u2, float u3)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ee0:	edc7 0a01 	vstr	s1, [r7, #4]
  this-> u2 = u2; //xi
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	62da      	str	r2, [r3, #44]	; 0x2c
  this-> u3 = u3; //xd
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001ef0:	bf00      	nop
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <_ZN3PID5inputEff>:

void PID::input(float r, float y)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f08:	edc7 0a01 	vstr	s1, [r7, #4]
  this->r = r;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	625a      	str	r2, [r3, #36]	; 0x24
  this->y = y;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	621a      	str	r2, [r3, #32]
  this->e = r-y;
 8001f18:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001f2a:	bf00      	nop
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <_ZN3PID4stepEv>:

void PID::step()
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	ed2d 8b02 	vpush	{d8}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  bool sgn;

  if (abs(r-y) >= 0) {
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	edd3 7a08 	vldr	s15, [r3, #32]
 8001f4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f52:	eeb0 0a67 	vmov.f32	s0, s15
 8001f56:	f7ff fe7f 	bl	8001c58 <_ZSt3absf>
 8001f5a:	eef0 7a40 	vmov.f32	s15, s0
 8001f5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f66:	bfac      	ite	ge
 8001f68:	2301      	movge	r3, #1
 8001f6a:	2300      	movlt	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d06e      	beq.n	8002050 <_ZN3PID4stepEv+0x11a>
	  u1 = kp*e;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	ed93 7a04 	vldr	s14, [r3, #16]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	edd3 7a07 	vldr	s15, [r3, #28]
 8001f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  	  u2 = ki*integrator.evolve(e);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	ed93 8a05 	vldr	s16, [r3, #20]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	edd3 7a07 	vldr	s15, [r3, #28]
 8001f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	f7ff fec7 	bl	8001d32 <_ZN10Integrator6evolveEf>
 8001fa4:	eef0 7a40 	vmov.f32	s15, s0
 8001fa8:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  	  u3 = kd*derivator.evolve(e);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	ed93 8a06 	vldr	s16, [r3, #24]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	edd3 7a07 	vldr	s15, [r3, #28]
 8001fc4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fc8:	4610      	mov	r0, r2
 8001fca:	f000 f9ea 	bl	80023a2 <_ZN6Filter6evolveEf>
 8001fce:	eef0 7a40 	vmov.f32	s15, s0
 8001fd2:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
  	  sgn = (u1+u2+u3) >= 0;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001fe8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffe:	bfac      	ite	ge
 8002000:	2301      	movge	r3, #1
 8002002:	2300      	movlt	r3, #0
 8002004:	73fb      	strb	r3, [r7, #15]
  	  u = apply_saturation(u1 + u2 + u3 + (2*sgn-1)*10000);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002012:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800201c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	3b01      	subs	r3, #1
 8002026:	f242 7210 	movw	r2, #10000	; 0x2710
 800202a:	fb02 f303 	mul.w	r3, r2, r3
 800202e:	ee07 3a90 	vmov	s15, r3
 8002032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800203a:	eeb0 0a67 	vmov.f32	s0, s15
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f896 	bl	8002170 <_ZN3PID16apply_saturationEf>
 8002044:	eef0 7a40 	vmov.f32	s15, s0
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  } else
	  u = 0;
}
 800204e:	e003      	b.n	8002058 <_ZN3PID4stepEv+0x122>
	  u = 0;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002058:	bf00      	nop
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	ecbd 8b02 	vpop	{d8}
 8002062:	bd80      	pop	{r7, pc}

08002064 <_ZN3PID6evolveEff>:
{
  return u;
}

float PID::evolve(float r, float y)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002070:	edc7 0a01 	vstr	s1, [r7, #4]
  input(r,y);
 8002074:	edd7 0a01 	vldr	s1, [r7, #4]
 8002078:	ed97 0a02 	vldr	s0, [r7, #8]
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f7ff ff3d 	bl	8001efc <_ZN3PID5inputEff>
  step();
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f7ff ff57 	bl	8001f36 <_ZN3PID4stepEv>
  //u = output();

  return u;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800208c:	ee07 3a90 	vmov	s15, r3
}
 8002090:	eeb0 0a67 	vmov.f32	s0, s15
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	0000      	movs	r0, r0
 800209c:	0000      	movs	r0, r0
	...

080020a0 <_ZN3PID4showEiR25racs_services__msg__Debug>:

void PID::show(int i, racs_services__msg__Debug &debug_msg)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
	debug_msg.data[0] = integrator.output();
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	3338      	adds	r3, #56	; 0x38
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff fe2f 	bl	8001d14 <_ZN10Integrator6outputEv>
 80020b6:	eef0 7a40 	vmov.f32	s15, s0
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	edc3 7a00 	vstr	s15, [r3]
	debug_msg.data[1] = u1  *100.0/32767.0;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80020c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020ca:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8002160 <_ZN3PID4showEiR25racs_services__msg__Debug+0xc0>
 80020ce:	ee27 6b06 	vmul.f64	d6, d7, d6
 80020d2:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8002168 <_ZN3PID4showEiR25racs_services__msg__Debug+0xc8>
 80020d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80020da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	edc3 7a01 	vstr	s15, [r3, #4]
	debug_msg.data[2] = u2  *100.0/32767.0;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80020ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80020ee:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8002160 <_ZN3PID4showEiR25racs_services__msg__Debug+0xc0>
 80020f2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80020f6:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 8002168 <_ZN3PID4showEiR25racs_services__msg__Debug+0xc8>
 80020fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80020fe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	edc3 7a02 	vstr	s15, [r3, #8]
	debug_msg.data[3] = u3  *100.0/32767.0;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800210e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002112:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8002160 <_ZN3PID4showEiR25racs_services__msg__Debug+0xc0>
 8002116:	ee27 6b06 	vmul.f64	d6, d7, d6
 800211a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8002168 <_ZN3PID4showEiR25racs_services__msg__Debug+0xc8>
 800211e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002122:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	edc3 7a03 	vstr	s15, [r3, #12]
	debug_msg.data[4] = u   *100.0/32767.0;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002132:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002136:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8002160 <_ZN3PID4showEiR25racs_services__msg__Debug+0xc0>
 800213a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800213e:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8002168 <_ZN3PID4showEiR25racs_services__msg__Debug+0xc8>
 8002142:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002146:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	edc3 7a04 	vstr	s15, [r3, #16]
	debug_msg.data[5] = e;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	69da      	ldr	r2, [r3, #28]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	615a      	str	r2, [r3, #20]
}
 8002158:	bf00      	nop
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	00000000 	.word	0x00000000
 8002164:	40590000 	.word	0x40590000
 8002168:	00000000 	.word	0x00000000
 800216c:	40dfffc0 	.word	0x40dfffc0

08002170 <_ZN3PID16apply_saturationEf>:

float PID::apply_saturation(float x)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	ed87 0a00 	vstr	s0, [r7]
  if(sat > 0)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002182:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800218a:	dd24      	ble.n	80021d6 <_ZN3PID16apply_saturationEf+0x66>
  {
    x = x > +sat ? +sat : x;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002192:	ed97 7a00 	vldr	s14, [r7]
 8002196:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800219a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219e:	dd02      	ble.n	80021a6 <_ZN3PID16apply_saturationEf+0x36>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	e000      	b.n	80021a8 <_ZN3PID16apply_saturationEf+0x38>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	603b      	str	r3, [r7, #0]
    x = x < -sat ? -sat : x;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80021b0:	eef1 7a67 	vneg.f32	s15, s15
 80021b4:	ed97 7a00 	vldr	s14, [r7]
 80021b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c0:	d505      	bpl.n	80021ce <_ZN3PID16apply_saturationEf+0x5e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	edd3 7a02 	vldr	s15, [r3, #8]
 80021c8:	eef1 7a67 	vneg.f32	s15, s15
 80021cc:	e001      	b.n	80021d2 <_ZN3PID16apply_saturationEf+0x62>
 80021ce:	edd7 7a00 	vldr	s15, [r7]
 80021d2:	edc7 7a00 	vstr	s15, [r7]
  }
  return x;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	ee07 3a90 	vmov	s15, r3
}
 80021dc:	eeb0 0a67 	vmov.f32	s0, s15
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <_ZN6Filter4initEfffff>:


// Filter

void Filter::init(float a1, float a0, float b1, float b0, float ts)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	ed2d 8b02 	vpush	{d8}
 80021f0:	b086      	sub	sp, #24
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6178      	str	r0, [r7, #20]
 80021f6:	ed87 0a04 	vstr	s0, [r7, #16]
 80021fa:	edc7 0a03 	vstr	s1, [r7, #12]
 80021fe:	ed87 1a02 	vstr	s2, [r7, #8]
 8002202:	edc7 1a01 	vstr	s3, [r7, #4]
 8002206:	ed87 2a00 	vstr	s4, [r7]
  this->a1 = a1;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	601a      	str	r2, [r3, #0]
  this->a0 = a0;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	605a      	str	r2, [r3, #4]
  this->b1 = b1;
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	609a      	str	r2, [r3, #8]
  this->b0 = b0;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	60da      	str	r2, [r3, #12]

  A = exp(-(a0/a1)*ts);
 8002222:	edd7 6a03 	vldr	s13, [r7, #12]
 8002226:	ed97 7a04 	vldr	s14, [r7, #16]
 800222a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800222e:	eeb1 7a67 	vneg.f32	s14, s15
 8002232:	edd7 7a00 	vldr	s15, [r7]
 8002236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800223a:	eeb0 0a67 	vmov.f32	s0, s15
 800223e:	f7ff fd1b 	bl	8001c78 <_ZSt3expf>
 8002242:	eef0 7a40 	vmov.f32	s15, s0
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	edc3 7a04 	vstr	s15, [r3, #16]
  B = 1;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002252:	615a      	str	r2, [r3, #20]
  if (a0*a1 != 0) {
 8002254:	ed97 7a03 	vldr	s14, [r7, #12]
 8002258:	edd7 7a04 	vldr	s15, [r7, #16]
 800225c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002260:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002268:	d031      	beq.n	80022ce <_ZN6Filter4initEfffff+0xe4>
	  C = ((a0*b1-a1*b0)/(a0*a1))*(exp((-a0/a1)*ts)-1);
 800226a:	ed97 7a03 	vldr	s14, [r7, #12]
 800226e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002272:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002276:	edd7 6a04 	vldr	s13, [r7, #16]
 800227a:	edd7 7a01 	vldr	s15, [r7, #4]
 800227e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002282:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002286:	edd7 6a03 	vldr	s13, [r7, #12]
 800228a:	edd7 7a04 	vldr	s15, [r7, #16]
 800228e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002292:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8002296:	edd7 7a03 	vldr	s15, [r7, #12]
 800229a:	eef1 6a67 	vneg.f32	s13, s15
 800229e:	edd7 7a04 	vldr	s15, [r7, #16]
 80022a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022a6:	edd7 7a00 	vldr	s15, [r7]
 80022aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ae:	eeb0 0a67 	vmov.f32	s0, s15
 80022b2:	f7ff fce1 	bl	8001c78 <_ZSt3expf>
 80022b6:	eef0 7a40 	vmov.f32	s15, s0
 80022ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80022be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022c2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	edc3 7a06 	vstr	s15, [r3, #24]
 80022cc:	e003      	b.n	80022d6 <_ZN6Filter4initEfffff+0xec>
  }
  else
  {
	  C = 0;
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	619a      	str	r2, [r3, #24]
  }

  if (a1 != 0) {
 80022d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80022da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80022de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e2:	d009      	beq.n	80022f8 <_ZN6Filter4initEfffff+0x10e>
	  D = b1/a1;
 80022e4:	edd7 6a02 	vldr	s13, [r7, #8]
 80022e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80022ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	edc3 7a07 	vstr	s15, [r3, #28]

  /*A = -(-2*a1+a0*ts)/(2*a1+a0*ts);
  B = 1;
  C = ((2*b1+b0*ts)/(2*a1+a0*ts)) * ((-2*a1+a0*ts)/(2*a1+a0*ts) + (-2*b1+b0*ts)/(2*b1+b0*ts));
  D = ((2*b1+b0*ts)/(2*a1+a0*ts));*/
}
 80022f6:	e003      	b.n	8002300 <_ZN6Filter4initEfffff+0x116>
	  D = 0;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	61da      	str	r2, [r3, #28]
}
 8002300:	bf00      	nop
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	ecbd 8b02 	vpop	{d8}
 800230a:	bd80      	pop	{r7, pc}

0800230c <_ZN6Filter5inputEf>:
{
  this->x = x;
}

void Filter::input(float u)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	ed87 0a00 	vstr	s0, [r7]
  this->u = u;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	621a      	str	r2, [r3, #32]
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <_ZN6Filter4stepEv>:

void Filter::step()
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  x = A*x + B*u;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	ed93 7a04 	vldr	s14, [r3, #16]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800233e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	edd3 6a05 	vldr	s13, [r3, #20]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	edd3 7a08 	vldr	s15, [r3, #32]
 800234e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002352:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <_ZN6Filter6outputEv>:

float Filter::output()
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  return C*x + D*u;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	ed93 7a06 	vldr	s14, [r3, #24]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800237c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	edd3 6a07 	vldr	s13, [r3, #28]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	edd3 7a08 	vldr	s15, [r3, #32]
 800238c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002390:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002394:	eeb0 0a67 	vmov.f32	s0, s15
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <_ZN6Filter6evolveEf>:

float Filter::evolve(float u)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b084      	sub	sp, #16
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	ed87 0a00 	vstr	s0, [r7]
  float y;
  
  input(u);
 80023ae:	ed97 0a00 	vldr	s0, [r7]
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff ffaa 	bl	800230c <_ZN6Filter5inputEf>
  y = output();
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff ffd5 	bl	8002368 <_ZN6Filter6outputEv>
 80023be:	ed87 0a03 	vstr	s0, [r7, #12]
  step();
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff ffb1 	bl	800232a <_ZN6Filter4stepEv>

  return y;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	ee07 3a90 	vmov	s15, r3
}
 80023ce:	eeb0 0a67 	vmov.f32	s0, s15
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08a      	sub	sp, #40	; 0x28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80023e4:	f008 fde4 	bl	800afb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80023e8:	4b5b      	ldr	r3, [pc, #364]	; (8002558 <pvPortMallocMicroROS+0x180>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80023f0:	f000 f98a 	bl	8002708 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80023f4:	4b59      	ldr	r3, [pc, #356]	; (800255c <pvPortMallocMicroROS+0x184>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f040 8092 	bne.w	8002526 <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d01f      	beq.n	8002448 <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 8002408:	2208      	movs	r2, #8
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	2b00      	cmp	r3, #0
 8002418:	d016      	beq.n	8002448 <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f023 0307 	bic.w	r3, r3, #7
 8002420:	3308      	adds	r3, #8
 8002422:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00c      	beq.n	8002448 <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800242e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002432:	b672      	cpsid	i
 8002434:	f383 8811 	msr	BASEPRI, r3
 8002438:	f3bf 8f6f 	isb	sy
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	b662      	cpsie	i
 8002442:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002444:	bf00      	nop
 8002446:	e7fe      	b.n	8002446 <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d06b      	beq.n	8002526 <pvPortMallocMicroROS+0x14e>
 800244e:	4b44      	ldr	r3, [pc, #272]	; (8002560 <pvPortMallocMicroROS+0x188>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	429a      	cmp	r2, r3
 8002456:	d866      	bhi.n	8002526 <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002458:	4b42      	ldr	r3, [pc, #264]	; (8002564 <pvPortMallocMicroROS+0x18c>)
 800245a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800245c:	4b41      	ldr	r3, [pc, #260]	; (8002564 <pvPortMallocMicroROS+0x18c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002462:	e004      	b.n	800246e <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	429a      	cmp	r2, r3
 8002476:	d903      	bls.n	8002480 <pvPortMallocMicroROS+0xa8>
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1f1      	bne.n	8002464 <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002480:	4b35      	ldr	r3, [pc, #212]	; (8002558 <pvPortMallocMicroROS+0x180>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002486:	429a      	cmp	r2, r3
 8002488:	d04d      	beq.n	8002526 <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2208      	movs	r2, #8
 8002490:	4413      	add	r3, r2
 8002492:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	685a      	ldr	r2, [r3, #4]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	1ad2      	subs	r2, r2, r3
 80024a4:	2308      	movs	r3, #8
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d921      	bls.n	80024f0 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80024ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4413      	add	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00c      	beq.n	80024d8 <pvPortMallocMicroROS+0x100>
	__asm volatile
 80024be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c2:	b672      	cpsid	i
 80024c4:	f383 8811 	msr	BASEPRI, r3
 80024c8:	f3bf 8f6f 	isb	sy
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	b662      	cpsie	i
 80024d2:	613b      	str	r3, [r7, #16]
}
 80024d4:	bf00      	nop
 80024d6:	e7fe      	b.n	80024d6 <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	1ad2      	subs	r2, r2, r3
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80024ea:	69b8      	ldr	r0, [r7, #24]
 80024ec:	f000 f96e 	bl	80027cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80024f0:	4b1b      	ldr	r3, [pc, #108]	; (8002560 <pvPortMallocMicroROS+0x188>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	4a19      	ldr	r2, [pc, #100]	; (8002560 <pvPortMallocMicroROS+0x188>)
 80024fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80024fe:	4b18      	ldr	r3, [pc, #96]	; (8002560 <pvPortMallocMicroROS+0x188>)
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	4b19      	ldr	r3, [pc, #100]	; (8002568 <pvPortMallocMicroROS+0x190>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d203      	bcs.n	8002512 <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <pvPortMallocMicroROS+0x188>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a16      	ldr	r2, [pc, #88]	; (8002568 <pvPortMallocMicroROS+0x190>)
 8002510:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	4b11      	ldr	r3, [pc, #68]	; (800255c <pvPortMallocMicroROS+0x184>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	431a      	orrs	r2, r3
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002526:	f008 fd51 	bl	800afcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	f003 0307 	and.w	r3, r3, #7
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00c      	beq.n	800254e <pvPortMallocMicroROS+0x176>
	__asm volatile
 8002534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002538:	b672      	cpsid	i
 800253a:	f383 8811 	msr	BASEPRI, r3
 800253e:	f3bf 8f6f 	isb	sy
 8002542:	f3bf 8f4f 	dsb	sy
 8002546:	b662      	cpsie	i
 8002548:	60fb      	str	r3, [r7, #12]
}
 800254a:	bf00      	nop
 800254c:	e7fe      	b.n	800254c <pvPortMallocMicroROS+0x174>
	return pvReturn;
 800254e:	69fb      	ldr	r3, [r7, #28]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3728      	adds	r7, #40	; 0x28
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20005fa8 	.word	0x20005fa8
 800255c:	20005fb4 	.word	0x20005fb4
 8002560:	20005fac 	.word	0x20005fac
 8002564:	20005fa0 	.word	0x20005fa0
 8002568:	20005fb0 	.word	0x20005fb0

0800256c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d04c      	beq.n	8002618 <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800257e:	2308      	movs	r3, #8
 8002580:	425b      	negs	r3, r3
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	4413      	add	r3, r2
 8002586:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	4b23      	ldr	r3, [pc, #140]	; (8002620 <vPortFreeMicroROS+0xb4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4013      	ands	r3, r2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10c      	bne.n	80025b4 <vPortFreeMicroROS+0x48>
	__asm volatile
 800259a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800259e:	b672      	cpsid	i
 80025a0:	f383 8811 	msr	BASEPRI, r3
 80025a4:	f3bf 8f6f 	isb	sy
 80025a8:	f3bf 8f4f 	dsb	sy
 80025ac:	b662      	cpsie	i
 80025ae:	60fb      	str	r3, [r7, #12]
}
 80025b0:	bf00      	nop
 80025b2:	e7fe      	b.n	80025b2 <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00c      	beq.n	80025d6 <vPortFreeMicroROS+0x6a>
	__asm volatile
 80025bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c0:	b672      	cpsid	i
 80025c2:	f383 8811 	msr	BASEPRI, r3
 80025c6:	f3bf 8f6f 	isb	sy
 80025ca:	f3bf 8f4f 	dsb	sy
 80025ce:	b662      	cpsie	i
 80025d0:	60bb      	str	r3, [r7, #8]
}
 80025d2:	bf00      	nop
 80025d4:	e7fe      	b.n	80025d4 <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	685a      	ldr	r2, [r3, #4]
 80025da:	4b11      	ldr	r3, [pc, #68]	; (8002620 <vPortFreeMicroROS+0xb4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4013      	ands	r3, r2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d019      	beq.n	8002618 <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d115      	bne.n	8002618 <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <vPortFreeMicroROS+0xb4>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	43db      	mvns	r3, r3
 80025f6:	401a      	ands	r2, r3
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80025fc:	f008 fcd8 	bl	800afb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	4b07      	ldr	r3, [pc, #28]	; (8002624 <vPortFreeMicroROS+0xb8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4413      	add	r3, r2
 800260a:	4a06      	ldr	r2, [pc, #24]	; (8002624 <vPortFreeMicroROS+0xb8>)
 800260c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800260e:	6938      	ldr	r0, [r7, #16]
 8002610:	f000 f8dc 	bl	80027cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002614:	f008 fcda 	bl	800afcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002618:	bf00      	nop
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20005fb4 	.word	0x20005fb4
 8002624:	20005fac 	.word	0x20005fac

08002628 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8002634:	2308      	movs	r3, #8
 8002636:	425b      	negs	r3, r3
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	4413      	add	r3, r2
 800263c:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <getBlockSize+0x38>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	43db      	mvns	r3, r3
 800264c:	4013      	ands	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]

	return count;
 8002650:	68fb      	ldr	r3, [r7, #12]
}
 8002652:	4618      	mov	r0, r3
 8002654:	371c      	adds	r7, #28
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	20005fb4 	.word	0x20005fb4

08002664 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800266e:	f008 fc9f 	bl	800afb0 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8002672:	6838      	ldr	r0, [r7, #0]
 8002674:	f7ff feb0 	bl	80023d8 <pvPortMallocMicroROS>
 8002678:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d017      	beq.n	80026b0 <pvPortReallocMicroROS+0x4c>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d014      	beq.n	80026b0 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff ffce 	bl	8002628 <getBlockSize>
 800268c:	4603      	mov	r3, r0
 800268e:	2208      	movs	r2, #8
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	429a      	cmp	r2, r3
 800269a:	d201      	bcs.n	80026a0 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	68b8      	ldr	r0, [r7, #8]
 80026a6:	f01b fb66 	bl	801dd76 <memcpy>

		vPortFreeMicroROS(pv);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff ff5e 	bl	800256c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80026b0:	f008 fc8c 	bl	800afcc <xTaskResumeAll>

	return newmem;
 80026b4:	68bb      	ldr	r3, [r7, #8]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80026c8:	f008 fc72 	bl	800afb0 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	fb02 f303 	mul.w	r3, r2, r3
 80026d4:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80026d6:	6978      	ldr	r0, [r7, #20]
 80026d8:	f7ff fe7e 	bl	80023d8 <pvPortMallocMicroROS>
 80026dc:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	613b      	str	r3, [r7, #16]

  	while(count--)
 80026e2:	e004      	b.n	80026ee <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	613a      	str	r2, [r7, #16]
 80026ea:	2200      	movs	r2, #0
 80026ec:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	1e5a      	subs	r2, r3, #1
 80026f2:	617a      	str	r2, [r7, #20]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f5      	bne.n	80026e4 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80026f8:	f008 fc68 	bl	800afcc <xTaskResumeAll>
  	return mem;
 80026fc:	68fb      	ldr	r3, [r7, #12]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800270e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002712:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <prvHeapInit+0xac>)
 8002716:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00c      	beq.n	800273c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	3307      	adds	r3, #7
 8002726:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f023 0307 	bic.w	r3, r3, #7
 800272e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	4a1f      	ldr	r2, [pc, #124]	; (80027b4 <prvHeapInit+0xac>)
 8002738:	4413      	add	r3, r2
 800273a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002740:	4a1d      	ldr	r2, [pc, #116]	; (80027b8 <prvHeapInit+0xb0>)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002746:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <prvHeapInit+0xb0>)
 8002748:	2200      	movs	r2, #0
 800274a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68ba      	ldr	r2, [r7, #8]
 8002750:	4413      	add	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002754:	2208      	movs	r2, #8
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	1a9b      	subs	r3, r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f023 0307 	bic.w	r3, r3, #7
 8002762:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4a15      	ldr	r2, [pc, #84]	; (80027bc <prvHeapInit+0xb4>)
 8002768:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800276a:	4b14      	ldr	r3, [pc, #80]	; (80027bc <prvHeapInit+0xb4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2200      	movs	r2, #0
 8002770:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002772:	4b12      	ldr	r3, [pc, #72]	; (80027bc <prvHeapInit+0xb4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	1ad2      	subs	r2, r2, r3
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <prvHeapInit+0xb4>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	4a0a      	ldr	r2, [pc, #40]	; (80027c0 <prvHeapInit+0xb8>)
 8002796:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	4a09      	ldr	r2, [pc, #36]	; (80027c4 <prvHeapInit+0xbc>)
 800279e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80027a0:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <prvHeapInit+0xc0>)
 80027a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80027a6:	601a      	str	r2, [r3, #0]
}
 80027a8:	bf00      	nop
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	200023a0 	.word	0x200023a0
 80027b8:	20005fa0 	.word	0x20005fa0
 80027bc:	20005fa8 	.word	0x20005fa8
 80027c0:	20005fb0 	.word	0x20005fb0
 80027c4:	20005fac 	.word	0x20005fac
 80027c8:	20005fb4 	.word	0x20005fb4

080027cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80027d4:	4b28      	ldr	r3, [pc, #160]	; (8002878 <prvInsertBlockIntoFreeList+0xac>)
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	e002      	b.n	80027e0 <prvInsertBlockIntoFreeList+0x14>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d8f7      	bhi.n	80027da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	4413      	add	r3, r2
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d108      	bne.n	800280e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	441a      	add	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	68ba      	ldr	r2, [r7, #8]
 8002818:	441a      	add	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	d118      	bne.n	8002854 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	4b15      	ldr	r3, [pc, #84]	; (800287c <prvInsertBlockIntoFreeList+0xb0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d00d      	beq.n	800284a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	441a      	add	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	e008      	b.n	800285c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800284a:	4b0c      	ldr	r3, [pc, #48]	; (800287c <prvInsertBlockIntoFreeList+0xb0>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	e003      	b.n	800285c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	429a      	cmp	r2, r3
 8002862:	d002      	beq.n	800286a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800286a:	bf00      	nop
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	20005fa0 	.word	0x20005fa0
 800287c:	20005fa8 	.word	0x20005fa8

08002880 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002886:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <MX_DMA_Init+0x48>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	4a0f      	ldr	r2, [pc, #60]	; (80028c8 <MX_DMA_Init+0x48>)
 800288c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002890:	6313      	str	r3, [r2, #48]	; 0x30
 8002892:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <MX_DMA_Init+0x48>)
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800289a:	607b      	str	r3, [r7, #4]
 800289c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800289e:	2200      	movs	r2, #0
 80028a0:	2105      	movs	r1, #5
 80028a2:	200c      	movs	r0, #12
 80028a4:	f001 ff06 	bl	80046b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80028a8:	200c      	movs	r0, #12
 80028aa:	f001 ff1f 	bl	80046ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80028ae:	2200      	movs	r2, #0
 80028b0:	2105      	movs	r1, #5
 80028b2:	200e      	movs	r0, #14
 80028b4:	f001 fefe 	bl	80046b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80028b8:	200e      	movs	r0, #14
 80028ba:	f001 ff17 	bl	80046ec <HAL_NVIC_EnableIRQ>

}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40023800 	.word	0x40023800

080028cc <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80028da:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 80028dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028e0:	4904      	ldr	r1, [pc, #16]	; (80028f4 <cubemx_transport_open+0x28>)
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f005 fbf8 	bl	80080d8 <HAL_UART_Receive_DMA>
    return true;
 80028e8:	2301      	movs	r3, #1
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20005fb8 	.word	0x20005fb8

080028f8 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002906:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f005 fc29 	bl	8008160 <HAL_UART_DMAStop>
    return true;
 800290e:	2301      	movs	r3, #1
}
 8002910:	4618      	mov	r0, r3
 8002912:	3710      	adds	r7, #16
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, const uint8_t * buf, size_t len, uint8_t * err){
 8002918:	b580      	push	{r7, lr}
 800291a:	b086      	sub	sp, #24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800292c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002932:	2b20      	cmp	r3, #32
 8002934:	d11a      	bne.n	800296c <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	b29b      	uxth	r3, r3
 800293a:	461a      	mov	r2, r3
 800293c:	68b9      	ldr	r1, [r7, #8]
 800293e:	6978      	ldr	r0, [r7, #20]
 8002940:	f005 fb4e 	bl	8007fe0 <HAL_UART_Transmit_DMA>
 8002944:	4603      	mov	r3, r0
 8002946:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002948:	e002      	b.n	8002950 <cubemx_transport_write+0x38>
            osDelay(1);
 800294a:	2001      	movs	r0, #1
 800294c:	f007 faa6 	bl	8009e9c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8002950:	7cfb      	ldrb	r3, [r7, #19]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d103      	bne.n	800295e <cubemx_transport_write+0x46>
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800295a:	2b20      	cmp	r3, #32
 800295c:	d1f5      	bne.n	800294a <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 800295e:	7cfb      	ldrb	r3, [r7, #19]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <cubemx_transport_write+0x50>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	e002      	b.n	800296e <cubemx_transport_write+0x56>
 8002968:	2300      	movs	r3, #0
 800296a:	e000      	b.n	800296e <cubemx_transport_write+0x56>
    }else{
        return 0;
 800296c:	2300      	movs	r3, #0
    }
}
 800296e:	4618      	mov	r0, r3
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8002978:	b580      	push	{r7, lr}
 800297a:	b088      	sub	sp, #32
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800298c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800298e:	2300      	movs	r3, #0
 8002990:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002992:	b672      	cpsid	i
}
 8002994:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80029a2:	4a1c      	ldr	r2, [pc, #112]	; (8002a14 <cubemx_transport_read+0x9c>)
 80029a4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80029a6:	b662      	cpsie	i
}
 80029a8:	bf00      	nop
        __enable_irq();
        ms_used++;
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3301      	adds	r3, #1
 80029ae:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80029b0:	2001      	movs	r0, #1
 80029b2:	f007 fa73 	bl	8009e9c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80029b6:	4b18      	ldr	r3, [pc, #96]	; (8002a18 <cubemx_transport_read+0xa0>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <cubemx_transport_read+0x9c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d103      	bne.n	80029ca <cubemx_transport_read+0x52>
 80029c2:	69fa      	ldr	r2, [r7, #28]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	dbe3      	blt.n	8002992 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80029ce:	e011      	b.n	80029f4 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 80029d0:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <cubemx_transport_read+0xa0>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68b9      	ldr	r1, [r7, #8]
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	440b      	add	r3, r1
 80029da:	4910      	ldr	r1, [pc, #64]	; (8002a1c <cubemx_transport_read+0xa4>)
 80029dc:	5c8a      	ldrb	r2, [r1, r2]
 80029de:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80029e0:	4b0d      	ldr	r3, [pc, #52]	; (8002a18 <cubemx_transport_read+0xa0>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3301      	adds	r3, #1
 80029e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029ea:	4a0b      	ldr	r2, [pc, #44]	; (8002a18 <cubemx_transport_read+0xa0>)
 80029ec:	6013      	str	r3, [r2, #0]
        wrote++;
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	3301      	adds	r3, #1
 80029f2:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80029f4:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <cubemx_transport_read+0xa0>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <cubemx_transport_read+0x9c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d003      	beq.n	8002a08 <cubemx_transport_read+0x90>
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d3e3      	bcc.n	80029d0 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002a08:	69bb      	ldr	r3, [r7, #24]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3720      	adds	r7, #32
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	200067bc 	.word	0x200067bc
 8002a18:	200067b8 	.word	0x200067b8
 8002a1c:	20005fb8 	.word	0x20005fb8

08002a20 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002a24:	4a04      	ldr	r2, [pc, #16]	; (8002a38 <_Z16MX_FREERTOS_Initv+0x18>)
 8002a26:	2100      	movs	r1, #0
 8002a28:	4804      	ldr	r0, [pc, #16]	; (8002a3c <_Z16MX_FREERTOS_Initv+0x1c>)
 8002a2a:	f007 f991 	bl	8009d50 <osThreadNew>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	4a03      	ldr	r2, [pc, #12]	; (8002a40 <_Z16MX_FREERTOS_Initv+0x20>)
 8002a32:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002a34:	bf00      	nop
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	0801ebd8 	.word	0x0801ebd8
 8002a3c:	08002a45 	.word	0x08002a45
 8002a40:	200067c8 	.word	0x200067c8

08002a44 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002a44:	b5b0      	push	{r4, r5, r7, lr}
 8002a46:	f5ad 7d26 	sub.w	sp, sp, #664	; 0x298
 8002a4a:	af02      	add	r7, sp, #8
 8002a4c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002a50:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002a54:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
	rmw_uros_set_custom_transport(
 8002a56:	4bda      	ldr	r3, [pc, #872]	; (8002dc0 <_Z16StartDefaultTaskPv+0x37c>)
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	4bda      	ldr	r3, [pc, #872]	; (8002dc4 <_Z16StartDefaultTaskPv+0x380>)
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	4bda      	ldr	r3, [pc, #872]	; (8002dc8 <_Z16StartDefaultTaskPv+0x384>)
 8002a60:	4ada      	ldr	r2, [pc, #872]	; (8002dcc <_Z16StartDefaultTaskPv+0x388>)
 8002a62:	49db      	ldr	r1, [pc, #876]	; (8002dd0 <_Z16StartDefaultTaskPv+0x38c>)
 8002a64:	2001      	movs	r0, #1
 8002a66:	f00c f937 	bl	800ecd8 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8002a6a:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f00c f864 	bl	800eb3c <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8002a74:	4bd7      	ldr	r3, [pc, #860]	; (8002dd4 <_Z16StartDefaultTaskPv+0x390>)
 8002a76:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	freeRTOS_allocator.deallocate = microros_deallocate;
 8002a7a:	4bd7      	ldr	r3, [pc, #860]	; (8002dd8 <_Z16StartDefaultTaskPv+0x394>)
 8002a7c:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
	freeRTOS_allocator.reallocate = microros_reallocate;
 8002a80:	4bd6      	ldr	r3, [pc, #856]	; (8002ddc <_Z16StartDefaultTaskPv+0x398>)
 8002a82:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8002a86:	4bd6      	ldr	r3, [pc, #856]	; (8002de0 <_Z16StartDefaultTaskPv+0x39c>)
 8002a88:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) return;
 8002a8c:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8002a90:	4618      	mov	r0, r3
 8002a92:	f00c f861 	bl	800eb58 <rcutils_set_default_allocator>
 8002a96:	4603      	mov	r3, r0
 8002a98:	f083 0301 	eor.w	r3, r3, #1
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f040 817b 	bne.w	8002d9a <_Z16StartDefaultTaskPv+0x356>

	rcl_ret_t rc;
	rcl_node_t node; // nodo;
	rcl_timer_t feedback_timer, robot_timer;
	const unsigned int feedback_timer_period = RCL_MS_TO_NS(10);
 8002aa4:	4bcf      	ldr	r3, [pc, #828]	; (8002de4 <_Z16StartDefaultTaskPv+0x3a0>)
 8002aa6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
	const unsigned int robot_timer_period = RCL_MS_TO_NS(10);
 8002aaa:	4bce      	ldr	r3, [pc, #824]	; (8002de4 <_Z16StartDefaultTaskPv+0x3a0>)
 8002aac:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
	//rcl_publisher_t feedback_publisher; // publisher
	rcl_subscription_t pwm_subscriber, encoder_subscriber;
	rcl_service_t setup_service, control_service; //servizi

	const char* feedback_publisher_name = "/feedback";	//publishers
 8002ab0:	4bcd      	ldr	r3, [pc, #820]	; (8002de8 <_Z16StartDefaultTaskPv+0x3a4>)
 8002ab2:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
	const char* debug_publisher_name = "/debug";
 8002ab6:	4bcd      	ldr	r3, [pc, #820]	; (8002dec <_Z16StartDefaultTaskPv+0x3a8>)
 8002ab8:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
	const char* pwm_subscriber_name = "/pwm";			//subscribers
 8002abc:	4bcc      	ldr	r3, [pc, #816]	; (8002df0 <_Z16StartDefaultTaskPv+0x3ac>)
 8002abe:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
	const char* encoder_subscriber_name = "/encoder";
 8002ac2:	4bcc      	ldr	r3, [pc, #816]	; (8002df4 <_Z16StartDefaultTaskPv+0x3b0>)
 8002ac4:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
	const char* setup_service_name = "/setup";			//servizi
 8002ac8:	4bcb      	ldr	r3, [pc, #812]	; (8002df8 <_Z16StartDefaultTaskPv+0x3b4>)
 8002aca:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
	const char* control_service_name = "/control";
 8002ace:	4bcb      	ldr	r3, [pc, #812]	; (8002dfc <_Z16StartDefaultTaskPv+0x3b8>)
 8002ad0:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270

	const rosidl_message_type_support_t* feedback_type_support =
		ROSIDL_GET_MSG_TYPE_SUPPORT(racs_services, msg, Feedback);
 8002ad4:	f009 ff60 	bl	800c998 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback>
 8002ad8:	f8c7 026c 	str.w	r0, [r7, #620]	; 0x26c
	const rosidl_message_type_support_t * pwm_type_support =
		ROSIDL_GET_MSG_TYPE_SUPPORT(racs_services, msg, DirectAccess);
 8002adc:	f009 ff2c 	bl	800c938 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess>
 8002ae0:	f8c7 0268 	str.w	r0, [r7, #616]	; 0x268
	const rosidl_message_type_support_t * encoder_type_support =
		ROSIDL_GET_MSG_TYPE_SUPPORT(racs_services, msg, Encoder);
 8002ae4:	f009 ff40 	bl	800c968 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder>
 8002ae8:	f8c7 0264 	str.w	r0, [r7, #612]	; 0x264
	const rosidl_message_type_support_t * debug_type_support =
		ROSIDL_GET_MSG_TYPE_SUPPORT(racs_services, msg, Debug);
 8002aec:	f009 ff0c 	bl	800c908 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug>
 8002af0:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
	const rosidl_service_type_support_t* setup_type_support =
		ROSIDL_GET_SRV_TYPE_SUPPORT(racs_services, srv, Setup);
 8002af4:	f009 ff68 	bl	800c9c8 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup>
 8002af8:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	const rosidl_service_type_support_t* control_type_support =
		ROSIDL_GET_SRV_TYPE_SUPPORT(racs_services, srv, Control);
 8002afc:	f009 fede 	bl	800c8bc <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control>
 8002b00:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
	racs_services__srv__Setup_Request req_setup;
	racs_services__srv__Setup_Response res_setup;
	racs_services__srv__Control_Request req_control;
	racs_services__srv__Control_Response res_control;

	allocator = rcl_get_default_allocator();
 8002b04:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f00c f843 	bl	800eb94 <rcutils_get_default_allocator>
 8002b0e:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002b12:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8002b16:	f507 74ea 	add.w	r4, r7, #468	; 0x1d4
 8002b1a:	461d      	mov	r5, r3
 8002b1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b20:	682b      	ldr	r3, [r5, #0]
 8002b22:	6023      	str	r3, [r4, #0]

	rc = rclc_support_init(&support, 0, NULL, &allocator);
 8002b24:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8002b28:	f507 70f4 	add.w	r0, r7, #488	; 0x1e8
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2100      	movs	r1, #0
 8002b30:	f00b fe92 	bl	800e858 <rclc_support_init>
 8002b34:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
	if (rc != RCL_RET_OK) return;
 8002b38:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f040 812e 	bne.w	8002d9e <_Z16StartDefaultTaskPv+0x35a>

	rc = rclc_timer_init_default(&feedback_timer, &support, feedback_timer_period, feedback_timer_callback);
 8002b42:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8002b46:	f507 700c 	add.w	r0, r7, #560	; 0x230
 8002b4a:	4bad      	ldr	r3, [pc, #692]	; (8002e00 <_Z16StartDefaultTaskPv+0x3bc>)
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	4aa5      	ldr	r2, [pc, #660]	; (8002de4 <_Z16StartDefaultTaskPv+0x3a0>)
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	f00b ffba 	bl	800eacc <rclc_timer_init_default>
 8002b58:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
	if (rc != RCL_RET_OK) return;
 8002b5c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f040 811e 	bne.w	8002da2 <_Z16StartDefaultTaskPv+0x35e>

	rc = rclc_timer_init_default(&robot_timer, &support, robot_timer_period, robot_timer_callback);
 8002b66:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8002b6a:	f507 700b 	add.w	r0, r7, #556	; 0x22c
 8002b6e:	4ba5      	ldr	r3, [pc, #660]	; (8002e04 <_Z16StartDefaultTaskPv+0x3c0>)
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	4a9c      	ldr	r2, [pc, #624]	; (8002de4 <_Z16StartDefaultTaskPv+0x3a0>)
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	f00b ffa8 	bl	800eacc <rclc_timer_init_default>
 8002b7c:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
	if (rc != RCL_RET_OK) return;
 8002b80:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f040 810e 	bne.w	8002da6 <_Z16StartDefaultTaskPv+0x362>

	rc = rclc_node_init_default(&node, "STM32_node", "", &support);
 8002b8a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8002b8e:	f507 700d 	add.w	r0, r7, #564	; 0x234
 8002b92:	4a9d      	ldr	r2, [pc, #628]	; (8002e08 <_Z16StartDefaultTaskPv+0x3c4>)
 8002b94:	499d      	ldr	r1, [pc, #628]	; (8002e0c <_Z16StartDefaultTaskPv+0x3c8>)
 8002b96:	f00b fea9 	bl	800e8ec <rclc_node_init_default>
 8002b9a:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
	if (rc != RCL_RET_OK) return;
 8002b9e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f040 8101 	bne.w	8002daa <_Z16StartDefaultTaskPv+0x366>

	rc = rclc_publisher_init_best_effort(
 8002ba8:	f507 710d 	add.w	r1, r7, #564	; 0x234
 8002bac:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8002bb0:	f8d7 226c 	ldr.w	r2, [r7, #620]	; 0x26c
 8002bb4:	4896      	ldr	r0, [pc, #600]	; (8002e10 <_Z16StartDefaultTaskPv+0x3cc>)
 8002bb6:	f00b fedb 	bl	800e970 <rclc_publisher_init_best_effort>
 8002bba:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
	  &feedback_publisher, &node, feedback_type_support, feedback_publisher_name);
	if (rc != RCL_RET_OK) return;
 8002bbe:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f040 80f3 	bne.w	8002dae <_Z16StartDefaultTaskPv+0x36a>

	rc = rclc_publisher_init_best_effort(
 8002bc8:	f507 710d 	add.w	r1, r7, #564	; 0x234
 8002bcc:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8002bd0:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8002bd4:	488f      	ldr	r0, [pc, #572]	; (8002e14 <_Z16StartDefaultTaskPv+0x3d0>)
 8002bd6:	f00b fecb 	bl	800e970 <rclc_publisher_init_best_effort>
 8002bda:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
	  &debug_publisher, &node, debug_type_support, debug_publisher_name);
	if (rc != RCL_RET_OK) return;
 8002bde:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f040 80e5 	bne.w	8002db2 <_Z16StartDefaultTaskPv+0x36e>

	rc = rclc_subscription_init_best_effort(
 8002be8:	f507 710d 	add.w	r1, r7, #564	; 0x234
 8002bec:	f507 700a 	add.w	r0, r7, #552	; 0x228
 8002bf0:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8002bf4:	f8d7 2268 	ldr.w	r2, [r7, #616]	; 0x268
 8002bf8:	f00b ff2e 	bl	800ea58 <rclc_subscription_init_best_effort>
 8002bfc:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
	  &pwm_subscriber, &node, pwm_type_support, pwm_subscriber_name);
	if (rc != RCL_RET_OK) return;
 8002c00:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f040 80d6 	bne.w	8002db6 <_Z16StartDefaultTaskPv+0x372>

	rc = rclc_subscription_init_best_effort(
 8002c0a:	f507 710d 	add.w	r1, r7, #564	; 0x234
 8002c0e:	f507 7009 	add.w	r0, r7, #548	; 0x224
 8002c12:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8002c16:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8002c1a:	f00b ff1d 	bl	800ea58 <rclc_subscription_init_best_effort>
 8002c1e:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
	  &encoder_subscriber, &node, encoder_type_support, encoder_subscriber_name);
	if (rc != RCL_RET_OK) return;
 8002c22:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f040 80c7 	bne.w	8002dba <_Z16StartDefaultTaskPv+0x376>

	rc = rclc_service_init_default(
 8002c2c:	f507 710d 	add.w	r1, r7, #564	; 0x234
 8002c30:	f507 7008 	add.w	r0, r7, #544	; 0x220
 8002c34:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8002c38:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8002c3c:	f00b fed2 	bl	800e9e4 <rclc_service_init_default>
 8002c40:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
		&setup_service, &node, setup_type_support, setup_service_name);
	if (rc != RCL_RET_OK) return;
 8002c44:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f040 80ed 	bne.w	8002e28 <_Z16StartDefaultTaskPv+0x3e4>

	rc = rclc_service_init_default(
 8002c4e:	f507 710d 	add.w	r1, r7, #564	; 0x234
 8002c52:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 8002c56:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8002c5a:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8002c5e:	f00b fec1 	bl	800e9e4 <rclc_service_init_default>
 8002c62:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
		&control_service, &node, control_type_support, control_service_name);
	if (rc != RCL_RET_OK) return;
 8002c66:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f040 80de 	bne.w	8002e2c <_Z16StartDefaultTaskPv+0x3e8>

	rclc_executor_t executor;
	executor = rclc_executor_get_zero_initialized_executor();
 8002c70:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002c74:	f5a3 74cc 	sub.w	r4, r3, #408	; 0x198
 8002c78:	463b      	mov	r3, r7
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f00b fa88 	bl	800e190 <rclc_executor_get_zero_initialized_executor>
 8002c80:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002c84:	f5a3 7324 	sub.w	r3, r3, #656	; 0x290
 8002c88:	4620      	mov	r0, r4
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	2390      	movs	r3, #144	; 0x90
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f01b f871 	bl	801dd76 <memcpy>
	unsigned int num_handles = 6; //2 servizi, 2 timer e 2 subs
 8002c94:	2306      	movs	r3, #6
 8002c96:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
	rclc_executor_init(&executor, &support.context, num_handles, &allocator);
 8002c9a:	f507 73ea 	add.w	r3, r7, #468	; 0x1d4
 8002c9e:	f507 71f4 	add.w	r1, r7, #488	; 0x1e8
 8002ca2:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8002ca6:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8002caa:	f00b fa7d 	bl	800e1a8 <rclc_executor_init>

	rc = rclc_executor_add_timer(&executor, &feedback_timer);
 8002cae:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8002cb2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f00b fb2f 	bl	800e31c <rclc_executor_add_timer>
 8002cbe:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
	if (rc != RCL_RET_OK) return;
 8002cc2:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f040 80b2 	bne.w	8002e30 <_Z16StartDefaultTaskPv+0x3ec>

	rc = rclc_executor_add_timer(&executor, &robot_timer);
 8002ccc:	f507 720b 	add.w	r2, r7, #556	; 0x22c
 8002cd0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f00b fb20 	bl	800e31c <rclc_executor_add_timer>
 8002cdc:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
	if (rc != RCL_RET_OK) return;
 8002ce0:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f040 80a5 	bne.w	8002e34 <_Z16StartDefaultTaskPv+0x3f0>

	rc = rclc_executor_add_subscription(
 8002cea:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8002cee:	f507 710a 	add.w	r1, r7, #552	; 0x228
 8002cf2:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	4b47      	ldr	r3, [pc, #284]	; (8002e18 <_Z16StartDefaultTaskPv+0x3d4>)
 8002cfc:	f00b fad0 	bl	800e2a0 <rclc_executor_add_subscription>
 8002d00:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
	  &executor, &pwm_subscriber, &pwm_msg,
	  &pwm_callback, ON_NEW_DATA);
	if (rc != RCL_RET_OK) return;
 8002d04:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	f040 8095 	bne.w	8002e38 <_Z16StartDefaultTaskPv+0x3f4>

	rc = rclc_executor_add_subscription(
 8002d0e:	f507 72de 	add.w	r2, r7, #444	; 0x1bc
 8002d12:	f507 7109 	add.w	r1, r7, #548	; 0x224
 8002d16:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	4b3f      	ldr	r3, [pc, #252]	; (8002e1c <_Z16StartDefaultTaskPv+0x3d8>)
 8002d20:	f00b fabe 	bl	800e2a0 <rclc_executor_add_subscription>
 8002d24:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
	  &executor, &encoder_subscriber, &encoder_msg,
	  &encoder_callback, ON_NEW_DATA);
	if (rc != RCL_RET_OK) return;
 8002d28:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f040 8085 	bne.w	8002e3c <_Z16StartDefaultTaskPv+0x3f8>

	rc = rclc_executor_add_service(
 8002d32:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8002d36:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8002d3a:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8002d3e:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8002d42:	4c37      	ldr	r4, [pc, #220]	; (8002e20 <_Z16StartDefaultTaskPv+0x3dc>)
 8002d44:	9400      	str	r4, [sp, #0]
 8002d46:	f00b fb17 	bl	800e378 <rclc_executor_add_service>
 8002d4a:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
		&executor, &setup_service, &req_setup,
		&res_setup, setup_callback);
	if (rc != RCL_RET_OK) return;
 8002d4e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d174      	bne.n	8002e40 <_Z16StartDefaultTaskPv+0x3fc>

	rc = rclc_executor_add_service(
 8002d56:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8002d5a:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8002d5e:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 8002d62:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8002d66:	4c2f      	ldr	r4, [pc, #188]	; (8002e24 <_Z16StartDefaultTaskPv+0x3e0>)
 8002d68:	9400      	str	r4, [sp, #0]
 8002d6a:	f00b fb05 	bl	800e378 <rclc_executor_add_service>
 8002d6e:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
		&executor, &control_service, &req_control,
		&res_control, control_callback);
	if (rc != RCL_RET_OK) return;
 8002d72:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d164      	bne.n	8002e44 <_Z16StartDefaultTaskPv+0x400>

	Robot ScorBot = create_robot();
 8002d7a:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8002d7e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fe fbba 	bl	80014fc <_Z12create_robotv>

	rclc_executor_spin(&executor);
 8002d88:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f00b fd23 	bl	800e7d8 <rclc_executor_spin>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002d92:	2001      	movs	r0, #1
 8002d94:	f007 f882 	bl	8009e9c <osDelay>
 8002d98:	e7fb      	b.n	8002d92 <_Z16StartDefaultTaskPv+0x34e>
	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) return;
 8002d9a:	bf00      	nop
 8002d9c:	e053      	b.n	8002e46 <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002d9e:	bf00      	nop
 8002da0:	e051      	b.n	8002e46 <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002da2:	bf00      	nop
 8002da4:	e04f      	b.n	8002e46 <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002da6:	bf00      	nop
 8002da8:	e04d      	b.n	8002e46 <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002daa:	bf00      	nop
 8002dac:	e04b      	b.n	8002e46 <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002dae:	bf00      	nop
 8002db0:	e049      	b.n	8002e46 <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002db2:	bf00      	nop
 8002db4:	e047      	b.n	8002e46 <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002db6:	bf00      	nop
 8002db8:	e045      	b.n	8002e46 <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002dba:	bf00      	nop
 8002dbc:	e043      	b.n	8002e46 <_Z16StartDefaultTaskPv+0x402>
 8002dbe:	bf00      	nop
 8002dc0:	08002979 	.word	0x08002979
 8002dc4:	08002919 	.word	0x08002919
 8002dc8:	080028f9 	.word	0x080028f9
 8002dcc:	080028cd 	.word	0x080028cd
 8002dd0:	20006a3c 	.word	0x20006a3c
 8002dd4:	08003171 	.word	0x08003171
 8002dd8:	080031b5 	.word	0x080031b5
 8002ddc:	080031ed 	.word	0x080031ed
 8002de0:	08003259 	.word	0x08003259
 8002de4:	00989680 	.word	0x00989680
 8002de8:	0801eb54 	.word	0x0801eb54
 8002dec:	0801eb60 	.word	0x0801eb60
 8002df0:	0801eb68 	.word	0x0801eb68
 8002df4:	0801eb70 	.word	0x0801eb70
 8002df8:	0801eb7c 	.word	0x0801eb7c
 8002dfc:	0801eb84 	.word	0x0801eb84
 8002e00:	08000775 	.word	0x08000775
 8002e04:	08000831 	.word	0x08000831
 8002e08:	0801eb90 	.word	0x0801eb90
 8002e0c:	0801eb94 	.word	0x0801eb94
 8002e10:	200067c0 	.word	0x200067c0
 8002e14:	200067c4 	.word	0x200067c4
 8002e18:	080006e9 	.word	0x080006e9
 8002e1c:	080006ad 	.word	0x080006ad
 8002e20:	08000745 	.word	0x08000745
 8002e24:	08000715 	.word	0x08000715
	if (rc != RCL_RET_OK) return;
 8002e28:	bf00      	nop
 8002e2a:	e00c      	b.n	8002e46 <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002e2c:	bf00      	nop
 8002e2e:	e00a      	b.n	8002e46 <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002e30:	bf00      	nop
 8002e32:	e008      	b.n	8002e46 <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002e34:	bf00      	nop
 8002e36:	e006      	b.n	8002e46 <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002e38:	bf00      	nop
 8002e3a:	e004      	b.n	8002e46 <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002e3c:	bf00      	nop
 8002e3e:	e002      	b.n	8002e46 <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002e40:	bf00      	nop
 8002e42:	e000      	b.n	8002e46 <_Z16StartDefaultTaskPv+0x402>
	if (rc != RCL_RET_OK) return;
 8002e44:	bf00      	nop
  }
  /* USER CODE END StartDefaultTask */
}
 8002e46:	f507 7724 	add.w	r7, r7, #656	; 0x290
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e4e:	bf00      	nop

08002e50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08c      	sub	sp, #48	; 0x30
 8002e54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e56:	f107 031c 	add.w	r3, r7, #28
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	605a      	str	r2, [r3, #4]
 8002e60:	609a      	str	r2, [r3, #8]
 8002e62:	60da      	str	r2, [r3, #12]
 8002e64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e66:	4b58      	ldr	r3, [pc, #352]	; (8002fc8 <MX_GPIO_Init+0x178>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6a:	4a57      	ldr	r2, [pc, #348]	; (8002fc8 <MX_GPIO_Init+0x178>)
 8002e6c:	f043 0310 	orr.w	r3, r3, #16
 8002e70:	6313      	str	r3, [r2, #48]	; 0x30
 8002e72:	4b55      	ldr	r3, [pc, #340]	; (8002fc8 <MX_GPIO_Init+0x178>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	f003 0310 	and.w	r3, r3, #16
 8002e7a:	61bb      	str	r3, [r7, #24]
 8002e7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e7e:	4b52      	ldr	r3, [pc, #328]	; (8002fc8 <MX_GPIO_Init+0x178>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	4a51      	ldr	r2, [pc, #324]	; (8002fc8 <MX_GPIO_Init+0x178>)
 8002e84:	f043 0304 	orr.w	r3, r3, #4
 8002e88:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8a:	4b4f      	ldr	r3, [pc, #316]	; (8002fc8 <MX_GPIO_Init+0x178>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e96:	4b4c      	ldr	r3, [pc, #304]	; (8002fc8 <MX_GPIO_Init+0x178>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	4a4b      	ldr	r2, [pc, #300]	; (8002fc8 <MX_GPIO_Init+0x178>)
 8002e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea2:	4b49      	ldr	r3, [pc, #292]	; (8002fc8 <MX_GPIO_Init+0x178>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eaa:	613b      	str	r3, [r7, #16]
 8002eac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eae:	4b46      	ldr	r3, [pc, #280]	; (8002fc8 <MX_GPIO_Init+0x178>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb2:	4a45      	ldr	r2, [pc, #276]	; (8002fc8 <MX_GPIO_Init+0x178>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eba:	4b43      	ldr	r3, [pc, #268]	; (8002fc8 <MX_GPIO_Init+0x178>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec6:	4b40      	ldr	r3, [pc, #256]	; (8002fc8 <MX_GPIO_Init+0x178>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	4a3f      	ldr	r2, [pc, #252]	; (8002fc8 <MX_GPIO_Init+0x178>)
 8002ecc:	f043 0302 	orr.w	r3, r3, #2
 8002ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed2:	4b3d      	ldr	r3, [pc, #244]	; (8002fc8 <MX_GPIO_Init+0x178>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	60bb      	str	r3, [r7, #8]
 8002edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ede:	4b3a      	ldr	r3, [pc, #232]	; (8002fc8 <MX_GPIO_Init+0x178>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee2:	4a39      	ldr	r2, [pc, #228]	; (8002fc8 <MX_GPIO_Init+0x178>)
 8002ee4:	f043 0308 	orr.w	r3, r3, #8
 8002ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eea:	4b37      	ldr	r3, [pc, #220]	; (8002fc8 <MX_GPIO_Init+0x178>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	607b      	str	r3, [r7, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ef6:	4b34      	ldr	r3, [pc, #208]	; (8002fc8 <MX_GPIO_Init+0x178>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	4a33      	ldr	r2, [pc, #204]	; (8002fc8 <MX_GPIO_Init+0x178>)
 8002efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f00:	6313      	str	r3, [r2, #48]	; 0x30
 8002f02:	4b31      	ldr	r3, [pc, #196]	; (8002fc8 <MX_GPIO_Init+0x178>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f244 0181 	movw	r1, #16513	; 0x4081
 8002f14:	482d      	ldr	r0, [pc, #180]	; (8002fcc <MX_GPIO_Init+0x17c>)
 8002f16:	f002 f9d1 	bl	80052bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR5_INA_Pin|MOTOR5_INB_Pin|MOTOR1_INA_Pin|MOTOR1_INB_Pin
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 8002f20:	482b      	ldr	r0, [pc, #172]	; (8002fd0 <MX_GPIO_Init+0x180>)
 8002f22:	f002 f9cb 	bl	80052bc <HAL_GPIO_WritePin>
                          |MOTOR2_INA_Pin|MOTOR2_INB_Pin|MOTOR3_INA_Pin|MOTOR3_INB_Pin
                          |MOTOR4_INA_Pin|MOTOR4_INB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MOTOR6_INA_Pin|MOTOR6_INB_Pin|PIN_TOGGLE_Pin|MOTORS_EN_Pin
 8002f26:	2200      	movs	r2, #0
 8002f28:	f647 616c 	movw	r1, #32364	; 0x7e6c
 8002f2c:	4829      	ldr	r0, [pc, #164]	; (8002fd4 <MX_GPIO_Init+0x184>)
 8002f2e:	f002 f9c5 	bl	80052bc <HAL_GPIO_WritePin>
                          |MOTOR1_END_Pin|MOTOR2_END_Pin|MOTOR3_END_Pin|MOTOR4_END_Pin
                          |MOTOR5_END_Pin|MOTOR6_END_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002f32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f38:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002f3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002f42:	f107 031c 	add.w	r3, r7, #28
 8002f46:	4619      	mov	r1, r3
 8002f48:	4823      	ldr	r0, [pc, #140]	; (8002fd8 <MX_GPIO_Init+0x188>)
 8002f4a:	f001 fff3 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002f4e:	f244 0381 	movw	r3, #16513	; 0x4081
 8002f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f54:	2301      	movs	r3, #1
 8002f56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f60:	f107 031c 	add.w	r3, r7, #28
 8002f64:	4619      	mov	r1, r3
 8002f66:	4819      	ldr	r0, [pc, #100]	; (8002fcc <MX_GPIO_Init+0x17c>)
 8002f68:	f001 ffe4 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = MOTOR5_INA_Pin|MOTOR5_INB_Pin|MOTOR1_INA_Pin|MOTOR1_INB_Pin
 8002f6c:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 8002f70:	61fb      	str	r3, [r7, #28]
                          |MOTOR2_INA_Pin|MOTOR2_INB_Pin|MOTOR3_INA_Pin|MOTOR3_INB_Pin
                          |MOTOR4_INA_Pin|MOTOR4_INB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f72:	2301      	movs	r3, #1
 8002f74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f7e:	f107 031c 	add.w	r3, r7, #28
 8002f82:	4619      	mov	r1, r3
 8002f84:	4812      	ldr	r0, [pc, #72]	; (8002fd0 <MX_GPIO_Init+0x180>)
 8002f86:	f001 ffd5 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = MOTOR6_INA_Pin|MOTOR6_INB_Pin|PIN_TOGGLE_Pin|MOTORS_EN_Pin
 8002f8a:	f647 636c 	movw	r3, #32364	; 0x7e6c
 8002f8e:	61fb      	str	r3, [r7, #28]
                          |MOTOR1_END_Pin|MOTOR2_END_Pin|MOTOR3_END_Pin|MOTOR4_END_Pin
                          |MOTOR5_END_Pin|MOTOR6_END_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f90:	2301      	movs	r3, #1
 8002f92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f9c:	f107 031c 	add.w	r3, r7, #28
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	480c      	ldr	r0, [pc, #48]	; (8002fd4 <MX_GPIO_Init+0x184>)
 8002fa4:	f001 ffc6 	bl	8004f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002fa8:	2380      	movs	r3, #128	; 0x80
 8002faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fac:	2300      	movs	r3, #0
 8002fae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002fb4:	f107 031c 	add.w	r3, r7, #28
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4806      	ldr	r0, [pc, #24]	; (8002fd4 <MX_GPIO_Init+0x184>)
 8002fbc:	f001 ffba 	bl	8004f34 <HAL_GPIO_Init>

}
 8002fc0:	bf00      	nop
 8002fc2:	3730      	adds	r7, #48	; 0x30
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40023800 	.word	0x40023800
 8002fcc:	40020400 	.word	0x40020400
 8002fd0:	40020c00 	.word	0x40020c00
 8002fd4:	40021800 	.word	0x40021800
 8002fd8:	40020800 	.word	0x40020800

08002fdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fe0:	f001 fa5f 	bl	80044a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fe4:	f000 f82e 	bl	8003044 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fe8:	f7ff ff32 	bl	8002e50 <MX_GPIO_Init>
  MX_DMA_Init();
 8002fec:	f7ff fc48 	bl	8002880 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8002ff0:	f001 f886 	bl	8004100 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002ff4:	f001 f984 	bl	8004300 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 8002ff8:	f000 fbd6 	bl	80037a8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002ffc:	f000 fca4 	bl	8003948 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003000:	f000 fcf6 	bl	80039f0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003004:	f000 fd4a 	bl	8003a9c <MX_TIM4_Init>
  MX_TIM5_Init();
 8003008:	f000 fd9e 	bl	8003b48 <MX_TIM5_Init>
  MX_TIM8_Init();
 800300c:	f000 fdf2 	bl	8003bf4 <MX_TIM8_Init>
  MX_TIM9_Init();
 8003010:	f000 fe4a 	bl	8003ca8 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003014:	2100      	movs	r1, #0
 8003016:	4809      	ldr	r0, [pc, #36]	; (800303c <main+0x60>)
 8003018:	f003 fd58 	bl	8006acc <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800301c:	213c      	movs	r1, #60	; 0x3c
 800301e:	4808      	ldr	r0, [pc, #32]	; (8003040 <main+0x64>)
 8003020:	f003 fef4 	bl	8006e0c <HAL_TIM_Encoder_Start>
  TIM2->CNT = HALF_ENC+1;
 8003024:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003028:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800302c:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800302e:	f006 fe25 	bl	8009c7c <osKernelInitialize>
  MX_FREERTOS_Init();
 8003032:	f7ff fcf5 	bl	8002a20 <_Z16MX_FREERTOS_Initv>

  /* Start scheduler */
  osKernelStart();
 8003036:	f006 fe55 	bl	8009ce4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800303a:	e7fe      	b.n	800303a <main+0x5e>
 800303c:	20006828 	.word	0x20006828
 8003040:	20006874 	.word	0x20006874

08003044 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b094      	sub	sp, #80	; 0x50
 8003048:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800304a:	f107 031c 	add.w	r3, r7, #28
 800304e:	2234      	movs	r2, #52	; 0x34
 8003050:	2100      	movs	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f01a fd5e 	bl	801db14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003058:	f107 0308 	add.w	r3, r7, #8
 800305c:	2200      	movs	r2, #0
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	605a      	str	r2, [r3, #4]
 8003062:	609a      	str	r2, [r3, #8]
 8003064:	60da      	str	r2, [r3, #12]
 8003066:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003068:	4b33      	ldr	r3, [pc, #204]	; (8003138 <_Z18SystemClock_Configv+0xf4>)
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	4a32      	ldr	r2, [pc, #200]	; (8003138 <_Z18SystemClock_Configv+0xf4>)
 800306e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003072:	6413      	str	r3, [r2, #64]	; 0x40
 8003074:	4b30      	ldr	r3, [pc, #192]	; (8003138 <_Z18SystemClock_Configv+0xf4>)
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307c:	607b      	str	r3, [r7, #4]
 800307e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003080:	4b2e      	ldr	r3, [pc, #184]	; (800313c <_Z18SystemClock_Configv+0xf8>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003088:	4a2c      	ldr	r2, [pc, #176]	; (800313c <_Z18SystemClock_Configv+0xf8>)
 800308a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	4b2a      	ldr	r3, [pc, #168]	; (800313c <_Z18SystemClock_Configv+0xf8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003098:	603b      	str	r3, [r7, #0]
 800309a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800309c:	2301      	movs	r3, #1
 800309e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030a6:	2302      	movs	r3, #2
 80030a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80030b0:	2304      	movs	r3, #4
 80030b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80030b4:	2360      	movs	r3, #96	; 0x60
 80030b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030b8:	2302      	movs	r3, #2
 80030ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80030bc:	2304      	movs	r3, #4
 80030be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80030c0:	2302      	movs	r3, #2
 80030c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030c4:	f107 031c 	add.w	r3, r7, #28
 80030c8:	4618      	mov	r0, r3
 80030ca:	f002 faa9 	bl	8005620 <HAL_RCC_OscConfig>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	bf14      	ite	ne
 80030d4:	2301      	movne	r3, #1
 80030d6:	2300      	moveq	r3, #0
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80030de:	f000 f841 	bl	8003164 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80030e2:	f002 fa4d 	bl	8005580 <HAL_PWREx_EnableOverDrive>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	bf14      	ite	ne
 80030ec:	2301      	movne	r3, #1
 80030ee:	2300      	moveq	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <_Z18SystemClock_Configv+0xb6>
  {
    Error_Handler();
 80030f6:	f000 f835 	bl	8003164 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030fa:	230f      	movs	r3, #15
 80030fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030fe:	2302      	movs	r3, #2
 8003100:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003102:	2300      	movs	r3, #0
 8003104:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800310a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800310c:	2300      	movs	r3, #0
 800310e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003110:	f107 0308 	add.w	r3, r7, #8
 8003114:	2103      	movs	r1, #3
 8003116:	4618      	mov	r0, r3
 8003118:	f002 fd30 	bl	8005b7c <HAL_RCC_ClockConfig>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	bf14      	ite	ne
 8003122:	2301      	movne	r3, #1
 8003124:	2300      	moveq	r3, #0
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <_Z18SystemClock_Configv+0xec>
  {
    Error_Handler();
 800312c:	f000 f81a 	bl	8003164 <Error_Handler>
  }
}
 8003130:	bf00      	nop
 8003132:	3750      	adds	r7, #80	; 0x50
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40023800 	.word	0x40023800
 800313c:	40007000 	.word	0x40007000

08003140 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a04      	ldr	r2, [pc, #16]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d101      	bne.n	8003156 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003152:	f001 f9b3 	bl	80044bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40001000 	.word	0x40001000

08003164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003168:	b672      	cpsid	i
}
 800316a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800316c:	e7fe      	b.n	800316c <Error_Handler+0x8>
	...

08003170 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800317a:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <microros_allocate+0x3c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4413      	add	r3, r2
 8003184:	461a      	mov	r2, r3
 8003186:	4b09      	ldr	r3, [pc, #36]	; (80031ac <microros_allocate+0x3c>)
 8003188:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800318a:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <microros_allocate+0x40>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4413      	add	r3, r2
 8003194:	461a      	mov	r2, r3
 8003196:	4b06      	ldr	r3, [pc, #24]	; (80031b0 <microros_allocate+0x40>)
 8003198:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff f91c 	bl	80023d8 <pvPortMallocMicroROS>
 80031a0:	4603      	mov	r3, r0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	200067cc 	.word	0x200067cc
 80031b0:	200067d0 	.word	0x200067d0

080031b4 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00c      	beq.n	80031de <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff fa2f 	bl	8002628 <getBlockSize>
 80031ca:	4603      	mov	r3, r0
 80031cc:	4a06      	ldr	r2, [pc, #24]	; (80031e8 <microros_deallocate+0x34>)
 80031ce:	6812      	ldr	r2, [r2, #0]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <microros_deallocate+0x34>)
 80031d6:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7ff f9c7 	bl	800256c <vPortFreeMicroROS>
  }
}
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	200067d0 	.word	0x200067d0

080031ec <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80031f8:	4b15      	ldr	r3, [pc, #84]	; (8003250 <microros_reallocate+0x64>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	461a      	mov	r2, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	4413      	add	r3, r2
 8003202:	461a      	mov	r2, r3
 8003204:	4b12      	ldr	r3, [pc, #72]	; (8003250 <microros_reallocate+0x64>)
 8003206:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8003208:	4b12      	ldr	r3, [pc, #72]	; (8003254 <microros_reallocate+0x68>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	461a      	mov	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	4413      	add	r3, r2
 8003212:	461a      	mov	r2, r3
 8003214:	4b0f      	ldr	r3, [pc, #60]	; (8003254 <microros_reallocate+0x68>)
 8003216:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d104      	bne.n	8003228 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800321e:	68b8      	ldr	r0, [r7, #8]
 8003220:	f7ff f8da 	bl	80023d8 <pvPortMallocMicroROS>
 8003224:	4603      	mov	r3, r0
 8003226:	e00e      	b.n	8003246 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f7ff f9fd 	bl	8002628 <getBlockSize>
 800322e:	4603      	mov	r3, r0
 8003230:	4a08      	ldr	r2, [pc, #32]	; (8003254 <microros_reallocate+0x68>)
 8003232:	6812      	ldr	r2, [r2, #0]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	461a      	mov	r2, r3
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <microros_reallocate+0x68>)
 800323a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 800323c:	68b9      	ldr	r1, [r7, #8]
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f7ff fa10 	bl	8002664 <pvPortReallocMicroROS>
 8003244:	4603      	mov	r3, r0
  }
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	200067cc 	.word	0x200067cc
 8003254:	200067d0 	.word	0x200067d0

08003258 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	fb02 f303 	mul.w	r3, r2, r3
 800326c:	4a0c      	ldr	r2, [pc, #48]	; (80032a0 <microros_zero_allocate+0x48>)
 800326e:	6812      	ldr	r2, [r2, #0]
 8003270:	4413      	add	r3, r2
 8003272:	461a      	mov	r2, r3
 8003274:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <microros_zero_allocate+0x48>)
 8003276:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	fb02 f303 	mul.w	r3, r2, r3
 8003280:	4a08      	ldr	r2, [pc, #32]	; (80032a4 <microros_zero_allocate+0x4c>)
 8003282:	6812      	ldr	r2, [r2, #0]
 8003284:	4413      	add	r3, r2
 8003286:	461a      	mov	r2, r3
 8003288:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <microros_zero_allocate+0x4c>)
 800328a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 800328c:	68b9      	ldr	r1, [r7, #8]
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f7ff fa15 	bl	80026be <pvPortCallocMicroROS>
 8003294:	4603      	mov	r3, r0
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	200067cc 	.word	0x200067cc
 80032a4:	200067d0 	.word	0x200067d0

080032a8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80032a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032ac:	b086      	sub	sp, #24
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80032b4:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 80032ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032be:	a320      	add	r3, pc, #128	; (adr r3, 8003340 <UTILS_NanosecondsToTimespec+0x98>)
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	f7fd f824 	bl	8000310 <__aeabi_ldivmod>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 80032d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032d6:	a31a      	add	r3, pc, #104	; (adr r3, 8003340 <UTILS_NanosecondsToTimespec+0x98>)
 80032d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032dc:	f7fd f818 	bl	8000310 <__aeabi_ldivmod>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	da20      	bge.n	800332e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	4a11      	ldr	r2, [pc, #68]	; (8003338 <UTILS_NanosecondsToTimespec+0x90>)
 80032f2:	fb82 1203 	smull	r1, r2, r2, r3
 80032f6:	1712      	asrs	r2, r2, #28
 80032f8:	17db      	asrs	r3, r3, #31
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	3301      	adds	r3, #1
 80032fe:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003306:	6979      	ldr	r1, [r7, #20]
 8003308:	17c8      	asrs	r0, r1, #31
 800330a:	460c      	mov	r4, r1
 800330c:	4605      	mov	r5, r0
 800330e:	ebb2 0804 	subs.w	r8, r2, r4
 8003312:	eb63 0905 	sbc.w	r9, r3, r5
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	4906      	ldr	r1, [pc, #24]	; (800333c <UTILS_NanosecondsToTimespec+0x94>)
 8003324:	fb01 f303 	mul.w	r3, r1, r3
 8003328:	441a      	add	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	609a      	str	r2, [r3, #8]
    }
}
 800332e:	bf00      	nop
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003338:	44b82fa1 	.word	0x44b82fa1
 800333c:	3b9aca00 	.word	0x3b9aca00
 8003340:	3b9aca00 	.word	0x3b9aca00
 8003344:	00000000 	.word	0x00000000

08003348 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8003348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800334c:	b08e      	sub	sp, #56	; 0x38
 800334e:	af00      	add	r7, sp, #0
 8003350:	6278      	str	r0, [r7, #36]	; 0x24
 8003352:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8003354:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003358:	2300      	movs	r3, #0
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	f04f 0300 	mov.w	r3, #0
 8003366:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800336a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800336e:	4618      	mov	r0, r3
 8003370:	f008 f8b8 	bl	800b4e4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8003374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003376:	17da      	asrs	r2, r3, #31
 8003378:	61bb      	str	r3, [r7, #24]
 800337a:	61fa      	str	r2, [r7, #28]
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	69b9      	ldr	r1, [r7, #24]
 8003386:	000b      	movs	r3, r1
 8003388:	2200      	movs	r2, #0
 800338a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800338e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003390:	2200      	movs	r2, #0
 8003392:	461c      	mov	r4, r3
 8003394:	4615      	mov	r5, r2
 8003396:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800339a:	1911      	adds	r1, r2, r4
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	416b      	adcs	r3, r5
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80033a6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80033aa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	f04f 0400 	mov.w	r4, #0
 80033b6:	f04f 0500 	mov.w	r5, #0
 80033ba:	015d      	lsls	r5, r3, #5
 80033bc:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 80033c0:	0154      	lsls	r4, r2, #5
 80033c2:	4622      	mov	r2, r4
 80033c4:	462b      	mov	r3, r5
 80033c6:	ebb2 0800 	subs.w	r8, r2, r0
 80033ca:	eb63 0901 	sbc.w	r9, r3, r1
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80033da:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80033de:	ea4f 2248 	mov.w	r2, r8, lsl #9
 80033e2:	4690      	mov	r8, r2
 80033e4:	4699      	mov	r9, r3
 80033e6:	eb18 0a00 	adds.w	sl, r8, r0
 80033ea:	eb49 0b01 	adc.w	fp, r9, r1
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033fa:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033fe:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003402:	ebb2 040a 	subs.w	r4, r2, sl
 8003406:	603c      	str	r4, [r7, #0]
 8003408:	eb63 030b 	sbc.w	r3, r3, fp
 800340c:	607b      	str	r3, [r7, #4]
 800340e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003412:	4623      	mov	r3, r4
 8003414:	181b      	adds	r3, r3, r0
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	462b      	mov	r3, r5
 800341a:	eb41 0303 	adc.w	r3, r1, r3
 800341e:	617b      	str	r3, [r7, #20]
 8003420:	6a3a      	ldr	r2, [r7, #32]
 8003422:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003426:	f7ff ff3f 	bl	80032a8 <UTILS_NanosecondsToTimespec>

    return 0;
 800342a:	2300      	movs	r3, #0
 800342c:	4618      	mov	r0, r3
 800342e:	3738      	adds	r7, #56	; 0x38
 8003430:	46bd      	mov	sp, r7
 8003432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800343e:	4b11      	ldr	r3, [pc, #68]	; (8003484 <HAL_MspInit+0x4c>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	4a10      	ldr	r2, [pc, #64]	; (8003484 <HAL_MspInit+0x4c>)
 8003444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003448:	6413      	str	r3, [r2, #64]	; 0x40
 800344a:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <HAL_MspInit+0x4c>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003452:	607b      	str	r3, [r7, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003456:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <HAL_MspInit+0x4c>)
 8003458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345a:	4a0a      	ldr	r2, [pc, #40]	; (8003484 <HAL_MspInit+0x4c>)
 800345c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003460:	6453      	str	r3, [r2, #68]	; 0x44
 8003462:	4b08      	ldr	r3, [pc, #32]	; (8003484 <HAL_MspInit+0x4c>)
 8003464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800346a:	603b      	str	r3, [r7, #0]
 800346c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800346e:	2200      	movs	r2, #0
 8003470:	210f      	movs	r1, #15
 8003472:	f06f 0001 	mvn.w	r0, #1
 8003476:	f001 f91d 	bl	80046b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40023800 	.word	0x40023800

08003488 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08e      	sub	sp, #56	; 0x38
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003498:	4b33      	ldr	r3, [pc, #204]	; (8003568 <HAL_InitTick+0xe0>)
 800349a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349c:	4a32      	ldr	r2, [pc, #200]	; (8003568 <HAL_InitTick+0xe0>)
 800349e:	f043 0310 	orr.w	r3, r3, #16
 80034a2:	6413      	str	r3, [r2, #64]	; 0x40
 80034a4:	4b30      	ldr	r3, [pc, #192]	; (8003568 <HAL_InitTick+0xe0>)
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80034b0:	f107 0210 	add.w	r2, r7, #16
 80034b4:	f107 0314 	add.w	r3, r7, #20
 80034b8:	4611      	mov	r1, r2
 80034ba:	4618      	mov	r0, r3
 80034bc:	f002 fd84 	bl	8005fc8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80034c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d103      	bne.n	80034d2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80034ca:	f002 fd55 	bl	8005f78 <HAL_RCC_GetPCLK1Freq>
 80034ce:	6378      	str	r0, [r7, #52]	; 0x34
 80034d0:	e004      	b.n	80034dc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80034d2:	f002 fd51 	bl	8005f78 <HAL_RCC_GetPCLK1Freq>
 80034d6:	4603      	mov	r3, r0
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80034dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034de:	4a23      	ldr	r2, [pc, #140]	; (800356c <HAL_InitTick+0xe4>)
 80034e0:	fba2 2303 	umull	r2, r3, r2, r3
 80034e4:	0c9b      	lsrs	r3, r3, #18
 80034e6:	3b01      	subs	r3, #1
 80034e8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80034ea:	4b21      	ldr	r3, [pc, #132]	; (8003570 <HAL_InitTick+0xe8>)
 80034ec:	4a21      	ldr	r2, [pc, #132]	; (8003574 <HAL_InitTick+0xec>)
 80034ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80034f0:	4b1f      	ldr	r3, [pc, #124]	; (8003570 <HAL_InitTick+0xe8>)
 80034f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034f6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80034f8:	4a1d      	ldr	r2, [pc, #116]	; (8003570 <HAL_InitTick+0xe8>)
 80034fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80034fe:	4b1c      	ldr	r3, [pc, #112]	; (8003570 <HAL_InitTick+0xe8>)
 8003500:	2200      	movs	r2, #0
 8003502:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003504:	4b1a      	ldr	r3, [pc, #104]	; (8003570 <HAL_InitTick+0xe8>)
 8003506:	2200      	movs	r2, #0
 8003508:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800350a:	4b19      	ldr	r3, [pc, #100]	; (8003570 <HAL_InitTick+0xe8>)
 800350c:	2200      	movs	r2, #0
 800350e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003510:	4817      	ldr	r0, [pc, #92]	; (8003570 <HAL_InitTick+0xe8>)
 8003512:	f003 f9b3 	bl	800687c <HAL_TIM_Base_Init>
 8003516:	4603      	mov	r3, r0
 8003518:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800351c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003520:	2b00      	cmp	r3, #0
 8003522:	d11b      	bne.n	800355c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003524:	4812      	ldr	r0, [pc, #72]	; (8003570 <HAL_InitTick+0xe8>)
 8003526:	f003 fa01 	bl	800692c <HAL_TIM_Base_Start_IT>
 800352a:	4603      	mov	r3, r0
 800352c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003530:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003534:	2b00      	cmp	r3, #0
 8003536:	d111      	bne.n	800355c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003538:	2036      	movs	r0, #54	; 0x36
 800353a:	f001 f8d7 	bl	80046ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2b0f      	cmp	r3, #15
 8003542:	d808      	bhi.n	8003556 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003544:	2200      	movs	r2, #0
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	2036      	movs	r0, #54	; 0x36
 800354a:	f001 f8b3 	bl	80046b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800354e:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <HAL_InitTick+0xf0>)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	e002      	b.n	800355c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800355c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003560:	4618      	mov	r0, r3
 8003562:	3738      	adds	r7, #56	; 0x38
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40023800 	.word	0x40023800
 800356c:	431bde83 	.word	0x431bde83
 8003570:	200067d4 	.word	0x200067d4
 8003574:	40001000 	.word	0x40001000
 8003578:	20000008 	.word	0x20000008

0800357c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003580:	e7fe      	b.n	8003580 <NMI_Handler+0x4>

08003582 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003582:	b480      	push	{r7}
 8003584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003586:	e7fe      	b.n	8003586 <HardFault_Handler+0x4>

08003588 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800358c:	e7fe      	b.n	800358c <MemManage_Handler+0x4>

0800358e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800358e:	b480      	push	{r7}
 8003590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003592:	e7fe      	b.n	8003592 <BusFault_Handler+0x4>

08003594 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003598:	e7fe      	b.n	8003598 <UsageFault_Handler+0x4>

0800359a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800359a:	b480      	push	{r7}
 800359c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800359e:	bf00      	nop
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80035ac:	4802      	ldr	r0, [pc, #8]	; (80035b8 <DMA1_Stream1_IRQHandler+0x10>)
 80035ae:	f001 fa4b 	bl	8004a48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20006b24 	.word	0x20006b24

080035bc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80035c0:	4802      	ldr	r0, [pc, #8]	; (80035cc <DMA1_Stream3_IRQHandler+0x10>)
 80035c2:	f001 fa41 	bl	8004a48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20006ac4 	.word	0x20006ac4

080035d0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80035d4:	4802      	ldr	r0, [pc, #8]	; (80035e0 <USART3_IRQHandler+0x10>)
 80035d6:	f004 fe55 	bl	8008284 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80035da:	bf00      	nop
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20006a3c 	.word	0x20006a3c

080035e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80035e8:	4802      	ldr	r0, [pc, #8]	; (80035f4 <TIM6_DAC_IRQHandler+0x10>)
 80035ea:	f003 fc9d 	bl	8006f28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80035ee:	bf00      	nop
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	200067d4 	.word	0x200067d4

080035f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  return 1;
 80035fc:	2301      	movs	r3, #1
}
 80035fe:	4618      	mov	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <_kill>:

int _kill(int pid, int sig)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003612:	f01a fb7b 	bl	801dd0c <__errno>
 8003616:	4603      	mov	r3, r0
 8003618:	2216      	movs	r2, #22
 800361a:	601a      	str	r2, [r3, #0]
  return -1;
 800361c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <_exit>:

void _exit (int status)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003630:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7ff ffe7 	bl	8003608 <_kill>
  while (1) {}    /* Make sure we hang here */
 800363a:	e7fe      	b.n	800363a <_exit+0x12>

0800363c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	e00a      	b.n	8003664 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800364e:	f3af 8000 	nop.w
 8003652:	4601      	mov	r1, r0
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	60ba      	str	r2, [r7, #8]
 800365a:	b2ca      	uxtb	r2, r1
 800365c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	3301      	adds	r3, #1
 8003662:	617b      	str	r3, [r7, #20]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	429a      	cmp	r2, r3
 800366a:	dbf0      	blt.n	800364e <_read+0x12>
  }

  return len;
 800366c:	687b      	ldr	r3, [r7, #4]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b086      	sub	sp, #24
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003682:	2300      	movs	r3, #0
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	e009      	b.n	800369c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	60ba      	str	r2, [r7, #8]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	3301      	adds	r3, #1
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	dbf1      	blt.n	8003688 <_write+0x12>
  }
  return len;
 80036a4:	687b      	ldr	r3, [r7, #4]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <_close>:

int _close(int file)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80036b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036d6:	605a      	str	r2, [r3, #4]
  return 0;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <_isatty>:

int _isatty(int file)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036ee:	2301      	movs	r3, #1
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
	...

08003718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003720:	4a14      	ldr	r2, [pc, #80]	; (8003774 <_sbrk+0x5c>)
 8003722:	4b15      	ldr	r3, [pc, #84]	; (8003778 <_sbrk+0x60>)
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800372c:	4b13      	ldr	r3, [pc, #76]	; (800377c <_sbrk+0x64>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d102      	bne.n	800373a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003734:	4b11      	ldr	r3, [pc, #68]	; (800377c <_sbrk+0x64>)
 8003736:	4a12      	ldr	r2, [pc, #72]	; (8003780 <_sbrk+0x68>)
 8003738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800373a:	4b10      	ldr	r3, [pc, #64]	; (800377c <_sbrk+0x64>)
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4413      	add	r3, r2
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	429a      	cmp	r2, r3
 8003746:	d207      	bcs.n	8003758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003748:	f01a fae0 	bl	801dd0c <__errno>
 800374c:	4603      	mov	r3, r0
 800374e:	220c      	movs	r2, #12
 8003750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003756:	e009      	b.n	800376c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003758:	4b08      	ldr	r3, [pc, #32]	; (800377c <_sbrk+0x64>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800375e:	4b07      	ldr	r3, [pc, #28]	; (800377c <_sbrk+0x64>)
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4413      	add	r3, r2
 8003766:	4a05      	ldr	r2, [pc, #20]	; (800377c <_sbrk+0x64>)
 8003768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800376a:	68fb      	ldr	r3, [r7, #12]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	20080000 	.word	0x20080000
 8003778:	00000400 	.word	0x00000400
 800377c:	20006824 	.word	0x20006824
 8003780:	20010e98 	.word	0x20010e98

08003784 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003788:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <SystemInit+0x20>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378e:	4a05      	ldr	r2, [pc, #20]	; (80037a4 <SystemInit+0x20>)
 8003790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003798:	bf00      	nop
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	e000ed00 	.word	0xe000ed00

080037a8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b09a      	sub	sp, #104	; 0x68
 80037ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	605a      	str	r2, [r3, #4]
 80037b8:	609a      	str	r2, [r3, #8]
 80037ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	605a      	str	r2, [r3, #4]
 80037d2:	609a      	str	r2, [r3, #8]
 80037d4:	60da      	str	r2, [r3, #12]
 80037d6:	611a      	str	r2, [r3, #16]
 80037d8:	615a      	str	r2, [r3, #20]
 80037da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80037dc:	1d3b      	adds	r3, r7, #4
 80037de:	222c      	movs	r2, #44	; 0x2c
 80037e0:	2100      	movs	r1, #0
 80037e2:	4618      	mov	r0, r3
 80037e4:	f01a f996 	bl	801db14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80037e8:	4b55      	ldr	r3, [pc, #340]	; (8003940 <MX_TIM1_Init+0x198>)
 80037ea:	4a56      	ldr	r2, [pc, #344]	; (8003944 <MX_TIM1_Init+0x19c>)
 80037ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80037ee:	4b54      	ldr	r3, [pc, #336]	; (8003940 <MX_TIM1_Init+0x198>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037f4:	4b52      	ldr	r3, [pc, #328]	; (8003940 <MX_TIM1_Init+0x198>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 32767;
 80037fa:	4b51      	ldr	r3, [pc, #324]	; (8003940 <MX_TIM1_Init+0x198>)
 80037fc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003800:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003802:	4b4f      	ldr	r3, [pc, #316]	; (8003940 <MX_TIM1_Init+0x198>)
 8003804:	2200      	movs	r2, #0
 8003806:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003808:	4b4d      	ldr	r3, [pc, #308]	; (8003940 <MX_TIM1_Init+0x198>)
 800380a:	2200      	movs	r2, #0
 800380c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800380e:	4b4c      	ldr	r3, [pc, #304]	; (8003940 <MX_TIM1_Init+0x198>)
 8003810:	2200      	movs	r2, #0
 8003812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003814:	484a      	ldr	r0, [pc, #296]	; (8003940 <MX_TIM1_Init+0x198>)
 8003816:	f003 f831 	bl	800687c <HAL_TIM_Base_Init>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003820:	f7ff fca0 	bl	8003164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003828:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800382a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800382e:	4619      	mov	r1, r3
 8003830:	4843      	ldr	r0, [pc, #268]	; (8003940 <MX_TIM1_Init+0x198>)
 8003832:	f003 fdad 	bl	8007390 <HAL_TIM_ConfigClockSource>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800383c:	f7ff fc92 	bl	8003164 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003840:	483f      	ldr	r0, [pc, #252]	; (8003940 <MX_TIM1_Init+0x198>)
 8003842:	f003 f8eb 	bl	8006a1c <HAL_TIM_PWM_Init>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800384c:	f7ff fc8a 	bl	8003164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003850:	2300      	movs	r3, #0
 8003852:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003854:	2300      	movs	r3, #0
 8003856:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003858:	2300      	movs	r3, #0
 800385a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800385c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003860:	4619      	mov	r1, r3
 8003862:	4837      	ldr	r0, [pc, #220]	; (8003940 <MX_TIM1_Init+0x198>)
 8003864:	f004 fa44 	bl	8007cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800386e:	f7ff fc79 	bl	8003164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003872:	2360      	movs	r3, #96	; 0x60
 8003874:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8003876:	2300      	movs	r3, #0
 8003878:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800387a:	2300      	movs	r3, #0
 800387c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800387e:	2300      	movs	r3, #0
 8003880:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003882:	2300      	movs	r3, #0
 8003884:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003886:	2300      	movs	r3, #0
 8003888:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800388a:	2300      	movs	r3, #0
 800388c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800388e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003892:	2200      	movs	r2, #0
 8003894:	4619      	mov	r1, r3
 8003896:	482a      	ldr	r0, [pc, #168]	; (8003940 <MX_TIM1_Init+0x198>)
 8003898:	f003 fc66 	bl	8007168 <HAL_TIM_PWM_ConfigChannel>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80038a2:	f7ff fc5f 	bl	8003164 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038aa:	2204      	movs	r2, #4
 80038ac:	4619      	mov	r1, r3
 80038ae:	4824      	ldr	r0, [pc, #144]	; (8003940 <MX_TIM1_Init+0x198>)
 80038b0:	f003 fc5a 	bl	8007168 <HAL_TIM_PWM_ConfigChannel>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80038ba:	f7ff fc53 	bl	8003164 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80038be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038c2:	2208      	movs	r2, #8
 80038c4:	4619      	mov	r1, r3
 80038c6:	481e      	ldr	r0, [pc, #120]	; (8003940 <MX_TIM1_Init+0x198>)
 80038c8:	f003 fc4e 	bl	8007168 <HAL_TIM_PWM_ConfigChannel>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80038d2:	f7ff fc47 	bl	8003164 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80038d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80038da:	220c      	movs	r2, #12
 80038dc:	4619      	mov	r1, r3
 80038de:	4818      	ldr	r0, [pc, #96]	; (8003940 <MX_TIM1_Init+0x198>)
 80038e0:	f003 fc42 	bl	8007168 <HAL_TIM_PWM_ConfigChannel>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80038ea:	f7ff fc3b 	bl	8003164 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80038ee:	2300      	movs	r3, #0
 80038f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80038f2:	2300      	movs	r3, #0
 80038f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80038fa:	2300      	movs	r3, #0
 80038fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80038fe:	2300      	movs	r3, #0
 8003900:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003902:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003906:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003908:	2300      	movs	r3, #0
 800390a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800390c:	2300      	movs	r3, #0
 800390e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003910:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003916:	2300      	movs	r3, #0
 8003918:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800391a:	2300      	movs	r3, #0
 800391c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800391e:	1d3b      	adds	r3, r7, #4
 8003920:	4619      	mov	r1, r3
 8003922:	4807      	ldr	r0, [pc, #28]	; (8003940 <MX_TIM1_Init+0x198>)
 8003924:	f004 fa72 	bl	8007e0c <HAL_TIMEx_ConfigBreakDeadTime>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 800392e:	f7ff fc19 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003932:	4803      	ldr	r0, [pc, #12]	; (8003940 <MX_TIM1_Init+0x198>)
 8003934:	f000 fb88 	bl	8004048 <HAL_TIM_MspPostInit>

}
 8003938:	bf00      	nop
 800393a:	3768      	adds	r7, #104	; 0x68
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	20006828 	.word	0x20006828
 8003944:	40010000 	.word	0x40010000

08003948 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08c      	sub	sp, #48	; 0x30
 800394c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800394e:	f107 030c 	add.w	r3, r7, #12
 8003952:	2224      	movs	r2, #36	; 0x24
 8003954:	2100      	movs	r1, #0
 8003956:	4618      	mov	r0, r3
 8003958:	f01a f8dc 	bl	801db14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800395c:	463b      	mov	r3, r7
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	605a      	str	r2, [r3, #4]
 8003964:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003966:	4b21      	ldr	r3, [pc, #132]	; (80039ec <MX_TIM2_Init+0xa4>)
 8003968:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800396c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800396e:	4b1f      	ldr	r3, [pc, #124]	; (80039ec <MX_TIM2_Init+0xa4>)
 8003970:	2200      	movs	r2, #0
 8003972:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003974:	4b1d      	ldr	r3, [pc, #116]	; (80039ec <MX_TIM2_Init+0xa4>)
 8003976:	2200      	movs	r2, #0
 8003978:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800397a:	4b1c      	ldr	r3, [pc, #112]	; (80039ec <MX_TIM2_Init+0xa4>)
 800397c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003980:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003982:	4b1a      	ldr	r3, [pc, #104]	; (80039ec <MX_TIM2_Init+0xa4>)
 8003984:	2200      	movs	r2, #0
 8003986:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003988:	4b18      	ldr	r3, [pc, #96]	; (80039ec <MX_TIM2_Init+0xa4>)
 800398a:	2200      	movs	r2, #0
 800398c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800398e:	2301      	movs	r3, #1
 8003990:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003992:	2300      	movs	r3, #0
 8003994:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003996:	2301      	movs	r3, #1
 8003998:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800399a:	2300      	movs	r3, #0
 800399c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80039a2:	2300      	movs	r3, #0
 80039a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80039a6:	2301      	movs	r3, #1
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80039aa:	2300      	movs	r3, #0
 80039ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80039ae:	2300      	movs	r3, #0
 80039b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80039b2:	f107 030c 	add.w	r3, r7, #12
 80039b6:	4619      	mov	r1, r3
 80039b8:	480c      	ldr	r0, [pc, #48]	; (80039ec <MX_TIM2_Init+0xa4>)
 80039ba:	f003 f981 	bl	8006cc0 <HAL_TIM_Encoder_Init>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80039c4:	f7ff fbce 	bl	8003164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039c8:	2300      	movs	r3, #0
 80039ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039cc:	2300      	movs	r3, #0
 80039ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80039d0:	463b      	mov	r3, r7
 80039d2:	4619      	mov	r1, r3
 80039d4:	4805      	ldr	r0, [pc, #20]	; (80039ec <MX_TIM2_Init+0xa4>)
 80039d6:	f004 f98b 	bl	8007cf0 <HAL_TIMEx_MasterConfigSynchronization>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80039e0:	f7ff fbc0 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80039e4:	bf00      	nop
 80039e6:	3730      	adds	r7, #48	; 0x30
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20006874 	.word	0x20006874

080039f0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08c      	sub	sp, #48	; 0x30
 80039f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80039f6:	f107 030c 	add.w	r3, r7, #12
 80039fa:	2224      	movs	r2, #36	; 0x24
 80039fc:	2100      	movs	r1, #0
 80039fe:	4618      	mov	r0, r3
 8003a00:	f01a f888 	bl	801db14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a04:	463b      	mov	r3, r7
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	605a      	str	r2, [r3, #4]
 8003a0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a0e:	4b21      	ldr	r3, [pc, #132]	; (8003a94 <MX_TIM3_Init+0xa4>)
 8003a10:	4a21      	ldr	r2, [pc, #132]	; (8003a98 <MX_TIM3_Init+0xa8>)
 8003a12:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003a14:	4b1f      	ldr	r3, [pc, #124]	; (8003a94 <MX_TIM3_Init+0xa4>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a1a:	4b1e      	ldr	r3, [pc, #120]	; (8003a94 <MX_TIM3_Init+0xa4>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003a20:	4b1c      	ldr	r3, [pc, #112]	; (8003a94 <MX_TIM3_Init+0xa4>)
 8003a22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a28:	4b1a      	ldr	r3, [pc, #104]	; (8003a94 <MX_TIM3_Init+0xa4>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a2e:	4b19      	ldr	r3, [pc, #100]	; (8003a94 <MX_TIM3_Init+0xa4>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003a34:	2301      	movs	r3, #1
 8003a36:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003a40:	2300      	movs	r3, #0
 8003a42:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003a44:	2300      	movs	r3, #0
 8003a46:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003a50:	2300      	movs	r3, #0
 8003a52:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003a54:	2300      	movs	r3, #0
 8003a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003a58:	f107 030c 	add.w	r3, r7, #12
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	480d      	ldr	r0, [pc, #52]	; (8003a94 <MX_TIM3_Init+0xa4>)
 8003a60:	f003 f92e 	bl	8006cc0 <HAL_TIM_Encoder_Init>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003a6a:	f7ff fb7b 	bl	8003164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a72:	2300      	movs	r3, #0
 8003a74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a76:	463b      	mov	r3, r7
 8003a78:	4619      	mov	r1, r3
 8003a7a:	4806      	ldr	r0, [pc, #24]	; (8003a94 <MX_TIM3_Init+0xa4>)
 8003a7c:	f004 f938 	bl	8007cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8003a86:	f7ff fb6d 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003a8a:	bf00      	nop
 8003a8c:	3730      	adds	r7, #48	; 0x30
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	200068c0 	.word	0x200068c0
 8003a98:	40000400 	.word	0x40000400

08003a9c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08c      	sub	sp, #48	; 0x30
 8003aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003aa2:	f107 030c 	add.w	r3, r7, #12
 8003aa6:	2224      	movs	r2, #36	; 0x24
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f01a f832 	bl	801db14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ab0:	463b      	mov	r3, r7
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	605a      	str	r2, [r3, #4]
 8003ab8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003aba:	4b21      	ldr	r3, [pc, #132]	; (8003b40 <MX_TIM4_Init+0xa4>)
 8003abc:	4a21      	ldr	r2, [pc, #132]	; (8003b44 <MX_TIM4_Init+0xa8>)
 8003abe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003ac0:	4b1f      	ldr	r3, [pc, #124]	; (8003b40 <MX_TIM4_Init+0xa4>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ac6:	4b1e      	ldr	r3, [pc, #120]	; (8003b40 <MX_TIM4_Init+0xa4>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003acc:	4b1c      	ldr	r3, [pc, #112]	; (8003b40 <MX_TIM4_Init+0xa4>)
 8003ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ad2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ad4:	4b1a      	ldr	r3, [pc, #104]	; (8003b40 <MX_TIM4_Init+0xa4>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ada:	4b19      	ldr	r3, [pc, #100]	; (8003b40 <MX_TIM4_Init+0xa4>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003aec:	2300      	movs	r3, #0
 8003aee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003af4:	2300      	movs	r3, #0
 8003af6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003af8:	2301      	movs	r3, #1
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003afc:	2300      	movs	r3, #0
 8003afe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003b04:	f107 030c 	add.w	r3, r7, #12
 8003b08:	4619      	mov	r1, r3
 8003b0a:	480d      	ldr	r0, [pc, #52]	; (8003b40 <MX_TIM4_Init+0xa4>)
 8003b0c:	f003 f8d8 	bl	8006cc0 <HAL_TIM_Encoder_Init>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d001      	beq.n	8003b1a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003b16:	f7ff fb25 	bl	8003164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003b22:	463b      	mov	r3, r7
 8003b24:	4619      	mov	r1, r3
 8003b26:	4806      	ldr	r0, [pc, #24]	; (8003b40 <MX_TIM4_Init+0xa4>)
 8003b28:	f004 f8e2 	bl	8007cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003b32:	f7ff fb17 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003b36:	bf00      	nop
 8003b38:	3730      	adds	r7, #48	; 0x30
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	2000690c 	.word	0x2000690c
 8003b44:	40000800 	.word	0x40000800

08003b48 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08c      	sub	sp, #48	; 0x30
 8003b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003b4e:	f107 030c 	add.w	r3, r7, #12
 8003b52:	2224      	movs	r2, #36	; 0x24
 8003b54:	2100      	movs	r1, #0
 8003b56:	4618      	mov	r0, r3
 8003b58:	f019 ffdc 	bl	801db14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b5c:	463b      	mov	r3, r7
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	605a      	str	r2, [r3, #4]
 8003b64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003b66:	4b21      	ldr	r3, [pc, #132]	; (8003bec <MX_TIM5_Init+0xa4>)
 8003b68:	4a21      	ldr	r2, [pc, #132]	; (8003bf0 <MX_TIM5_Init+0xa8>)
 8003b6a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003b6c:	4b1f      	ldr	r3, [pc, #124]	; (8003bec <MX_TIM5_Init+0xa4>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b72:	4b1e      	ldr	r3, [pc, #120]	; (8003bec <MX_TIM5_Init+0xa4>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003b78:	4b1c      	ldr	r3, [pc, #112]	; (8003bec <MX_TIM5_Init+0xa4>)
 8003b7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b7e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b80:	4b1a      	ldr	r3, [pc, #104]	; (8003bec <MX_TIM5_Init+0xa4>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b86:	4b19      	ldr	r3, [pc, #100]	; (8003bec <MX_TIM5_Init+0xa4>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b90:	2300      	movs	r3, #0
 8003b92:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b94:	2301      	movs	r3, #1
 8003b96:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003bac:	2300      	movs	r3, #0
 8003bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003bb0:	f107 030c 	add.w	r3, r7, #12
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	480d      	ldr	r0, [pc, #52]	; (8003bec <MX_TIM5_Init+0xa4>)
 8003bb8:	f003 f882 	bl	8006cc0 <HAL_TIM_Encoder_Init>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8003bc2:	f7ff facf 	bl	8003164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003bce:	463b      	mov	r3, r7
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4806      	ldr	r0, [pc, #24]	; (8003bec <MX_TIM5_Init+0xa4>)
 8003bd4:	f004 f88c 	bl	8007cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8003bde:	f7ff fac1 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003be2:	bf00      	nop
 8003be4:	3730      	adds	r7, #48	; 0x30
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20006958 	.word	0x20006958
 8003bf0:	40000c00 	.word	0x40000c00

08003bf4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08c      	sub	sp, #48	; 0x30
 8003bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003bfa:	f107 030c 	add.w	r3, r7, #12
 8003bfe:	2224      	movs	r2, #36	; 0x24
 8003c00:	2100      	movs	r1, #0
 8003c02:	4618      	mov	r0, r3
 8003c04:	f019 ff86 	bl	801db14 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c08:	463b      	mov	r3, r7
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	605a      	str	r2, [r3, #4]
 8003c10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003c12:	4b23      	ldr	r3, [pc, #140]	; (8003ca0 <MX_TIM8_Init+0xac>)
 8003c14:	4a23      	ldr	r2, [pc, #140]	; (8003ca4 <MX_TIM8_Init+0xb0>)
 8003c16:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003c18:	4b21      	ldr	r3, [pc, #132]	; (8003ca0 <MX_TIM8_Init+0xac>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c1e:	4b20      	ldr	r3, [pc, #128]	; (8003ca0 <MX_TIM8_Init+0xac>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003c24:	4b1e      	ldr	r3, [pc, #120]	; (8003ca0 <MX_TIM8_Init+0xac>)
 8003c26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c2a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c2c:	4b1c      	ldr	r3, [pc, #112]	; (8003ca0 <MX_TIM8_Init+0xac>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003c32:	4b1b      	ldr	r3, [pc, #108]	; (8003ca0 <MX_TIM8_Init+0xac>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c38:	4b19      	ldr	r3, [pc, #100]	; (8003ca0 <MX_TIM8_Init+0xac>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003c42:	2300      	movs	r3, #0
 8003c44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003c46:	2301      	movs	r3, #1
 8003c48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003c52:	2300      	movs	r3, #0
 8003c54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c56:	2301      	movs	r3, #1
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8003c62:	f107 030c 	add.w	r3, r7, #12
 8003c66:	4619      	mov	r1, r3
 8003c68:	480d      	ldr	r0, [pc, #52]	; (8003ca0 <MX_TIM8_Init+0xac>)
 8003c6a:	f003 f829 	bl	8006cc0 <HAL_TIM_Encoder_Init>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8003c74:	f7ff fa76 	bl	8003164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c80:	2300      	movs	r3, #0
 8003c82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003c84:	463b      	mov	r3, r7
 8003c86:	4619      	mov	r1, r3
 8003c88:	4805      	ldr	r0, [pc, #20]	; (8003ca0 <MX_TIM8_Init+0xac>)
 8003c8a:	f004 f831 	bl	8007cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8003c94:	f7ff fa66 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003c98:	bf00      	nop
 8003c9a:	3730      	adds	r7, #48	; 0x30
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	200069a4 	.word	0x200069a4
 8003ca4:	40010400 	.word	0x40010400

08003ca8 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b088      	sub	sp, #32
 8003cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cae:	1d3b      	adds	r3, r7, #4
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	605a      	str	r2, [r3, #4]
 8003cb6:	609a      	str	r2, [r3, #8]
 8003cb8:	60da      	str	r2, [r3, #12]
 8003cba:	611a      	str	r2, [r3, #16]
 8003cbc:	615a      	str	r2, [r3, #20]
 8003cbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003cc0:	4b1f      	ldr	r3, [pc, #124]	; (8003d40 <MX_TIM9_Init+0x98>)
 8003cc2:	4a20      	ldr	r2, [pc, #128]	; (8003d44 <MX_TIM9_Init+0x9c>)
 8003cc4:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8003cc6:	4b1e      	ldr	r3, [pc, #120]	; (8003d40 <MX_TIM9_Init+0x98>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ccc:	4b1c      	ldr	r3, [pc, #112]	; (8003d40 <MX_TIM9_Init+0x98>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8003cd2:	4b1b      	ldr	r3, [pc, #108]	; (8003d40 <MX_TIM9_Init+0x98>)
 8003cd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cd8:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cda:	4b19      	ldr	r3, [pc, #100]	; (8003d40 <MX_TIM9_Init+0x98>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ce0:	4b17      	ldr	r3, [pc, #92]	; (8003d40 <MX_TIM9_Init+0x98>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8003ce6:	4816      	ldr	r0, [pc, #88]	; (8003d40 <MX_TIM9_Init+0x98>)
 8003ce8:	f002 fe98 	bl	8006a1c <HAL_TIM_PWM_Init>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8003cf2:	f7ff fa37 	bl	8003164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cf6:	2360      	movs	r3, #96	; 0x60
 8003cf8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d02:	2300      	movs	r3, #0
 8003d04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003d06:	1d3b      	adds	r3, r7, #4
 8003d08:	2200      	movs	r2, #0
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	480c      	ldr	r0, [pc, #48]	; (8003d40 <MX_TIM9_Init+0x98>)
 8003d0e:	f003 fa2b 	bl	8007168 <HAL_TIM_PWM_ConfigChannel>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8003d18:	f7ff fa24 	bl	8003164 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d1c:	1d3b      	adds	r3, r7, #4
 8003d1e:	2204      	movs	r2, #4
 8003d20:	4619      	mov	r1, r3
 8003d22:	4807      	ldr	r0, [pc, #28]	; (8003d40 <MX_TIM9_Init+0x98>)
 8003d24:	f003 fa20 	bl	8007168 <HAL_TIM_PWM_ConfigChannel>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8003d2e:	f7ff fa19 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8003d32:	4803      	ldr	r0, [pc, #12]	; (8003d40 <MX_TIM9_Init+0x98>)
 8003d34:	f000 f988 	bl	8004048 <HAL_TIM_MspPostInit>

}
 8003d38:	bf00      	nop
 8003d3a:	3720      	adds	r7, #32
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	200069f0 	.word	0x200069f0
 8003d44:	40014000 	.word	0x40014000

08003d48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a0a      	ldr	r2, [pc, #40]	; (8003d80 <HAL_TIM_Base_MspInit+0x38>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d10b      	bne.n	8003d72 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d5a:	4b0a      	ldr	r3, [pc, #40]	; (8003d84 <HAL_TIM_Base_MspInit+0x3c>)
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5e:	4a09      	ldr	r2, [pc, #36]	; (8003d84 <HAL_TIM_Base_MspInit+0x3c>)
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	6453      	str	r3, [r2, #68]	; 0x44
 8003d66:	4b07      	ldr	r3, [pc, #28]	; (8003d84 <HAL_TIM_Base_MspInit+0x3c>)
 8003d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40010000 	.word	0x40010000
 8003d84:	40023800 	.word	0x40023800

08003d88 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b094      	sub	sp, #80	; 0x50
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d90:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	605a      	str	r2, [r3, #4]
 8003d9a:	609a      	str	r2, [r3, #8]
 8003d9c:	60da      	str	r2, [r3, #12]
 8003d9e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da8:	d144      	bne.n	8003e34 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003daa:	4b8e      	ldr	r3, [pc, #568]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	4a8d      	ldr	r2, [pc, #564]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003db0:	f043 0301 	orr.w	r3, r3, #1
 8003db4:	6413      	str	r3, [r2, #64]	; 0x40
 8003db6:	4b8b      	ldr	r3, [pc, #556]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dc2:	4b88      	ldr	r3, [pc, #544]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc6:	4a87      	ldr	r2, [pc, #540]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8003dce:	4b85      	ldr	r3, [pc, #532]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8003dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dda:	4b82      	ldr	r3, [pc, #520]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	4a81      	ldr	r2, [pc, #516]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003de0:	f043 0302 	orr.w	r3, r3, #2
 8003de4:	6313      	str	r3, [r2, #48]	; 0x30
 8003de6:	4b7f      	ldr	r3, [pc, #508]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	633b      	str	r3, [r7, #48]	; 0x30
 8003df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR1_CHA_Pin;
 8003df2:	2320      	movs	r3, #32
 8003df4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df6:	2302      	movs	r3, #2
 8003df8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e02:	2301      	movs	r3, #1
 8003e04:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR1_CHA_GPIO_Port, &GPIO_InitStruct);
 8003e06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	4876      	ldr	r0, [pc, #472]	; (8003fe8 <HAL_TIM_Encoder_MspInit+0x260>)
 8003e0e:	f001 f891 	bl	8004f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR1_CHB_Pin;
 8003e12:	2308      	movs	r3, #8
 8003e14:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e16:	2302      	movs	r3, #2
 8003e18:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e22:	2301      	movs	r3, #1
 8003e24:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR1_CHB_GPIO_Port, &GPIO_InitStruct);
 8003e26:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	486f      	ldr	r0, [pc, #444]	; (8003fec <HAL_TIM_Encoder_MspInit+0x264>)
 8003e2e:	f001 f881 	bl	8004f34 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8003e32:	e0d3      	b.n	8003fdc <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM3)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a6d      	ldr	r2, [pc, #436]	; (8003ff0 <HAL_TIM_Encoder_MspInit+0x268>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d144      	bne.n	8003ec8 <HAL_TIM_Encoder_MspInit+0x140>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e3e:	4b69      	ldr	r3, [pc, #420]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	4a68      	ldr	r2, [pc, #416]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003e44:	f043 0302 	orr.w	r3, r3, #2
 8003e48:	6413      	str	r3, [r2, #64]	; 0x40
 8003e4a:	4b66      	ldr	r3, [pc, #408]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e56:	4b63      	ldr	r3, [pc, #396]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5a:	4a62      	ldr	r2, [pc, #392]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003e5c:	f043 0301 	orr.w	r3, r3, #1
 8003e60:	6313      	str	r3, [r2, #48]	; 0x30
 8003e62:	4b60      	ldr	r3, [pc, #384]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e6e:	4b5d      	ldr	r3, [pc, #372]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	4a5c      	ldr	r2, [pc, #368]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003e74:	f043 0302 	orr.w	r3, r3, #2
 8003e78:	6313      	str	r3, [r2, #48]	; 0x30
 8003e7a:	4b5a      	ldr	r3, [pc, #360]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24
 8003e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = MOTOR2_CHA_Pin;
 8003e86:	2340      	movs	r3, #64	; 0x40
 8003e88:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e92:	2300      	movs	r3, #0
 8003e94:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e96:	2302      	movs	r3, #2
 8003e98:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR2_CHA_GPIO_Port, &GPIO_InitStruct);
 8003e9a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4851      	ldr	r0, [pc, #324]	; (8003fe8 <HAL_TIM_Encoder_MspInit+0x260>)
 8003ea2:	f001 f847 	bl	8004f34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR2_CHB_Pin;
 8003ea6:	2320      	movs	r3, #32
 8003ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eaa:	2302      	movs	r3, #2
 8003eac:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR2_CHB_GPIO_Port, &GPIO_InitStruct);
 8003eba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	484a      	ldr	r0, [pc, #296]	; (8003fec <HAL_TIM_Encoder_MspInit+0x264>)
 8003ec2:	f001 f837 	bl	8004f34 <HAL_GPIO_Init>
}
 8003ec6:	e089      	b.n	8003fdc <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM4)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a49      	ldr	r2, [pc, #292]	; (8003ff4 <HAL_TIM_Encoder_MspInit+0x26c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d129      	bne.n	8003f26 <HAL_TIM_Encoder_MspInit+0x19e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ed2:	4b44      	ldr	r3, [pc, #272]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	4a43      	ldr	r2, [pc, #268]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003ed8:	f043 0304 	orr.w	r3, r3, #4
 8003edc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ede:	4b41      	ldr	r3, [pc, #260]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	623b      	str	r3, [r7, #32]
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003eea:	4b3e      	ldr	r3, [pc, #248]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	4a3d      	ldr	r2, [pc, #244]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003ef0:	f043 0308 	orr.w	r3, r3, #8
 8003ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ef6:	4b3b      	ldr	r3, [pc, #236]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	61fb      	str	r3, [r7, #28]
 8003f00:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = MOTOR3_CHA_Pin|MOTOR3_CHB_Pin;
 8003f02:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003f06:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f08:	2302      	movs	r3, #2
 8003f0a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f10:	2300      	movs	r3, #0
 8003f12:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003f14:	2302      	movs	r3, #2
 8003f16:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f18:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4836      	ldr	r0, [pc, #216]	; (8003ff8 <HAL_TIM_Encoder_MspInit+0x270>)
 8003f20:	f001 f808 	bl	8004f34 <HAL_GPIO_Init>
}
 8003f24:	e05a      	b.n	8003fdc <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM5)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a34      	ldr	r2, [pc, #208]	; (8003ffc <HAL_TIM_Encoder_MspInit+0x274>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d128      	bne.n	8003f82 <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003f30:	4b2c      	ldr	r3, [pc, #176]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	4a2b      	ldr	r2, [pc, #172]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f36:	f043 0308 	orr.w	r3, r3, #8
 8003f3a:	6413      	str	r3, [r2, #64]	; 0x40
 8003f3c:	4b29      	ldr	r3, [pc, #164]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	61bb      	str	r3, [r7, #24]
 8003f46:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f48:	4b26      	ldr	r3, [pc, #152]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4c:	4a25      	ldr	r2, [pc, #148]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f4e:	f043 0301 	orr.w	r3, r3, #1
 8003f52:	6313      	str	r3, [r2, #48]	; 0x30
 8003f54:	4b23      	ldr	r3, [pc, #140]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	617b      	str	r3, [r7, #20]
 8003f5e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOTOR4_CHA_Pin|MOTOR4_CHB_Pin;
 8003f60:	2303      	movs	r3, #3
 8003f62:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f64:	2302      	movs	r3, #2
 8003f66:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003f70:	2302      	movs	r3, #2
 8003f72:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f74:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003f78:	4619      	mov	r1, r3
 8003f7a:	481b      	ldr	r0, [pc, #108]	; (8003fe8 <HAL_TIM_Encoder_MspInit+0x260>)
 8003f7c:	f000 ffda 	bl	8004f34 <HAL_GPIO_Init>
}
 8003f80:	e02c      	b.n	8003fdc <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM8)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a1e      	ldr	r2, [pc, #120]	; (8004000 <HAL_TIM_Encoder_MspInit+0x278>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d127      	bne.n	8003fdc <HAL_TIM_Encoder_MspInit+0x254>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003f8c:	4b15      	ldr	r3, [pc, #84]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f90:	4a14      	ldr	r2, [pc, #80]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f92:	f043 0302 	orr.w	r3, r3, #2
 8003f96:	6453      	str	r3, [r2, #68]	; 0x44
 8003f98:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fa4:	4b0f      	ldr	r3, [pc, #60]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa8:	4a0e      	ldr	r2, [pc, #56]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003faa:	f043 0304 	orr.w	r3, r3, #4
 8003fae:	6313      	str	r3, [r2, #48]	; 0x30
 8003fb0:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR5_CHA_Pin|MOTOR5_CHB_Pin;
 8003fbc:	23c0      	movs	r3, #192	; 0xc0
 8003fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	480b      	ldr	r0, [pc, #44]	; (8004004 <HAL_TIM_Encoder_MspInit+0x27c>)
 8003fd8:	f000 ffac 	bl	8004f34 <HAL_GPIO_Init>
}
 8003fdc:	bf00      	nop
 8003fde:	3750      	adds	r7, #80	; 0x50
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	40020000 	.word	0x40020000
 8003fec:	40020400 	.word	0x40020400
 8003ff0:	40000400 	.word	0x40000400
 8003ff4:	40000800 	.word	0x40000800
 8003ff8:	40020c00 	.word	0x40020c00
 8003ffc:	40000c00 	.word	0x40000c00
 8004000:	40010400 	.word	0x40010400
 8004004:	40020800 	.word	0x40020800

08004008 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM9)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a0a      	ldr	r2, [pc, #40]	; (8004040 <HAL_TIM_PWM_MspInit+0x38>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d10b      	bne.n	8004032 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800401a:	4b0a      	ldr	r3, [pc, #40]	; (8004044 <HAL_TIM_PWM_MspInit+0x3c>)
 800401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401e:	4a09      	ldr	r2, [pc, #36]	; (8004044 <HAL_TIM_PWM_MspInit+0x3c>)
 8004020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004024:	6453      	str	r3, [r2, #68]	; 0x44
 8004026:	4b07      	ldr	r3, [pc, #28]	; (8004044 <HAL_TIM_PWM_MspInit+0x3c>)
 8004028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8004032:	bf00      	nop
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40014000 	.word	0x40014000
 8004044:	40023800 	.word	0x40023800

08004048 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08a      	sub	sp, #40	; 0x28
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004050:	f107 0314 	add.w	r3, r7, #20
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	605a      	str	r2, [r3, #4]
 800405a:	609a      	str	r2, [r3, #8]
 800405c:	60da      	str	r2, [r3, #12]
 800405e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a22      	ldr	r2, [pc, #136]	; (80040f0 <HAL_TIM_MspPostInit+0xa8>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d11d      	bne.n	80040a6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800406a:	4b22      	ldr	r3, [pc, #136]	; (80040f4 <HAL_TIM_MspPostInit+0xac>)
 800406c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406e:	4a21      	ldr	r2, [pc, #132]	; (80040f4 <HAL_TIM_MspPostInit+0xac>)
 8004070:	f043 0310 	orr.w	r3, r3, #16
 8004074:	6313      	str	r3, [r2, #48]	; 0x30
 8004076:	4b1f      	ldr	r3, [pc, #124]	; (80040f4 <HAL_TIM_MspPostInit+0xac>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	f003 0310 	and.w	r3, r3, #16
 800407e:	613b      	str	r3, [r7, #16]
 8004080:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR1_PWM_Pin|MOTOR2_PWM_Pin|MOTOR3_PWM_Pin|MOTOR4_PWM_Pin;
 8004082:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8004086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004088:	2302      	movs	r3, #2
 800408a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800408c:	2300      	movs	r3, #0
 800408e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004090:	2300      	movs	r3, #0
 8004092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004094:	2301      	movs	r3, #1
 8004096:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004098:	f107 0314 	add.w	r3, r7, #20
 800409c:	4619      	mov	r1, r3
 800409e:	4816      	ldr	r0, [pc, #88]	; (80040f8 <HAL_TIM_MspPostInit+0xb0>)
 80040a0:	f000 ff48 	bl	8004f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80040a4:	e020      	b.n	80040e8 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM9)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a14      	ldr	r2, [pc, #80]	; (80040fc <HAL_TIM_MspPostInit+0xb4>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d11b      	bne.n	80040e8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80040b0:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <HAL_TIM_MspPostInit+0xac>)
 80040b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b4:	4a0f      	ldr	r2, [pc, #60]	; (80040f4 <HAL_TIM_MspPostInit+0xac>)
 80040b6:	f043 0310 	orr.w	r3, r3, #16
 80040ba:	6313      	str	r3, [r2, #48]	; 0x30
 80040bc:	4b0d      	ldr	r3, [pc, #52]	; (80040f4 <HAL_TIM_MspPostInit+0xac>)
 80040be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c0:	f003 0310 	and.w	r3, r3, #16
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR5_PWM_Pin|MOTOR6_PWM_Pin;
 80040c8:	2360      	movs	r3, #96	; 0x60
 80040ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040cc:	2302      	movs	r3, #2
 80040ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d0:	2300      	movs	r3, #0
 80040d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040d4:	2300      	movs	r3, #0
 80040d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80040d8:	2303      	movs	r3, #3
 80040da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80040dc:	f107 0314 	add.w	r3, r7, #20
 80040e0:	4619      	mov	r1, r3
 80040e2:	4805      	ldr	r0, [pc, #20]	; (80040f8 <HAL_TIM_MspPostInit+0xb0>)
 80040e4:	f000 ff26 	bl	8004f34 <HAL_GPIO_Init>
}
 80040e8:	bf00      	nop
 80040ea:	3728      	adds	r7, #40	; 0x28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40010000 	.word	0x40010000
 80040f4:	40023800 	.word	0x40023800
 80040f8:	40021000 	.word	0x40021000
 80040fc:	40014000 	.word	0x40014000

08004100 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004104:	4b14      	ldr	r3, [pc, #80]	; (8004158 <MX_USART3_UART_Init+0x58>)
 8004106:	4a15      	ldr	r2, [pc, #84]	; (800415c <MX_USART3_UART_Init+0x5c>)
 8004108:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800410a:	4b13      	ldr	r3, [pc, #76]	; (8004158 <MX_USART3_UART_Init+0x58>)
 800410c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004110:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004112:	4b11      	ldr	r3, [pc, #68]	; (8004158 <MX_USART3_UART_Init+0x58>)
 8004114:	2200      	movs	r2, #0
 8004116:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004118:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <MX_USART3_UART_Init+0x58>)
 800411a:	2200      	movs	r2, #0
 800411c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800411e:	4b0e      	ldr	r3, [pc, #56]	; (8004158 <MX_USART3_UART_Init+0x58>)
 8004120:	2200      	movs	r2, #0
 8004122:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004124:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <MX_USART3_UART_Init+0x58>)
 8004126:	220c      	movs	r2, #12
 8004128:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800412a:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <MX_USART3_UART_Init+0x58>)
 800412c:	2200      	movs	r2, #0
 800412e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004130:	4b09      	ldr	r3, [pc, #36]	; (8004158 <MX_USART3_UART_Init+0x58>)
 8004132:	2200      	movs	r2, #0
 8004134:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004136:	4b08      	ldr	r3, [pc, #32]	; (8004158 <MX_USART3_UART_Init+0x58>)
 8004138:	2200      	movs	r2, #0
 800413a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800413c:	4b06      	ldr	r3, [pc, #24]	; (8004158 <MX_USART3_UART_Init+0x58>)
 800413e:	2200      	movs	r2, #0
 8004140:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004142:	4805      	ldr	r0, [pc, #20]	; (8004158 <MX_USART3_UART_Init+0x58>)
 8004144:	f003 fefe 	bl	8007f44 <HAL_UART_Init>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800414e:	f7ff f809 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004152:	bf00      	nop
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20006a3c 	.word	0x20006a3c
 800415c:	40004800 	.word	0x40004800

08004160 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b0ae      	sub	sp, #184	; 0xb8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004168:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]
 8004170:	605a      	str	r2, [r3, #4]
 8004172:	609a      	str	r2, [r3, #8]
 8004174:	60da      	str	r2, [r3, #12]
 8004176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004178:	f107 0314 	add.w	r3, r7, #20
 800417c:	2290      	movs	r2, #144	; 0x90
 800417e:	2100      	movs	r1, #0
 8004180:	4618      	mov	r0, r3
 8004182:	f019 fcc7 	bl	801db14 <memset>
  if(uartHandle->Instance==USART3)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a56      	ldr	r2, [pc, #344]	; (80042e4 <HAL_UART_MspInit+0x184>)
 800418c:	4293      	cmp	r3, r2
 800418e:	f040 80a4 	bne.w	80042da <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004192:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004196:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004198:	2300      	movs	r3, #0
 800419a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800419c:	f107 0314 	add.w	r3, r7, #20
 80041a0:	4618      	mov	r0, r3
 80041a2:	f001 ff43 	bl	800602c <HAL_RCCEx_PeriphCLKConfig>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80041ac:	f7fe ffda 	bl	8003164 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80041b0:	4b4d      	ldr	r3, [pc, #308]	; (80042e8 <HAL_UART_MspInit+0x188>)
 80041b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b4:	4a4c      	ldr	r2, [pc, #304]	; (80042e8 <HAL_UART_MspInit+0x188>)
 80041b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041ba:	6413      	str	r3, [r2, #64]	; 0x40
 80041bc:	4b4a      	ldr	r3, [pc, #296]	; (80042e8 <HAL_UART_MspInit+0x188>)
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041c4:	613b      	str	r3, [r7, #16]
 80041c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80041c8:	4b47      	ldr	r3, [pc, #284]	; (80042e8 <HAL_UART_MspInit+0x188>)
 80041ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041cc:	4a46      	ldr	r2, [pc, #280]	; (80042e8 <HAL_UART_MspInit+0x188>)
 80041ce:	f043 0308 	orr.w	r3, r3, #8
 80041d2:	6313      	str	r3, [r2, #48]	; 0x30
 80041d4:	4b44      	ldr	r3, [pc, #272]	; (80042e8 <HAL_UART_MspInit+0x188>)
 80041d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d8:	f003 0308 	and.w	r3, r3, #8
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80041e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80041e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e8:	2302      	movs	r3, #2
 80041ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041f4:	2303      	movs	r3, #3
 80041f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80041fa:	2307      	movs	r3, #7
 80041fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004200:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004204:	4619      	mov	r1, r3
 8004206:	4839      	ldr	r0, [pc, #228]	; (80042ec <HAL_UART_MspInit+0x18c>)
 8004208:	f000 fe94 	bl	8004f34 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800420c:	4b38      	ldr	r3, [pc, #224]	; (80042f0 <HAL_UART_MspInit+0x190>)
 800420e:	4a39      	ldr	r2, [pc, #228]	; (80042f4 <HAL_UART_MspInit+0x194>)
 8004210:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004212:	4b37      	ldr	r3, [pc, #220]	; (80042f0 <HAL_UART_MspInit+0x190>)
 8004214:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004218:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800421a:	4b35      	ldr	r3, [pc, #212]	; (80042f0 <HAL_UART_MspInit+0x190>)
 800421c:	2240      	movs	r2, #64	; 0x40
 800421e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004220:	4b33      	ldr	r3, [pc, #204]	; (80042f0 <HAL_UART_MspInit+0x190>)
 8004222:	2200      	movs	r2, #0
 8004224:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004226:	4b32      	ldr	r3, [pc, #200]	; (80042f0 <HAL_UART_MspInit+0x190>)
 8004228:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800422c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800422e:	4b30      	ldr	r3, [pc, #192]	; (80042f0 <HAL_UART_MspInit+0x190>)
 8004230:	2200      	movs	r2, #0
 8004232:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004234:	4b2e      	ldr	r3, [pc, #184]	; (80042f0 <HAL_UART_MspInit+0x190>)
 8004236:	2200      	movs	r2, #0
 8004238:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800423a:	4b2d      	ldr	r3, [pc, #180]	; (80042f0 <HAL_UART_MspInit+0x190>)
 800423c:	2200      	movs	r2, #0
 800423e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004240:	4b2b      	ldr	r3, [pc, #172]	; (80042f0 <HAL_UART_MspInit+0x190>)
 8004242:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004246:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004248:	4b29      	ldr	r3, [pc, #164]	; (80042f0 <HAL_UART_MspInit+0x190>)
 800424a:	2200      	movs	r2, #0
 800424c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800424e:	4828      	ldr	r0, [pc, #160]	; (80042f0 <HAL_UART_MspInit+0x190>)
 8004250:	f000 fa5a 	bl	8004708 <HAL_DMA_Init>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 800425a:	f7fe ff83 	bl	8003164 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a23      	ldr	r2, [pc, #140]	; (80042f0 <HAL_UART_MspInit+0x190>)
 8004262:	671a      	str	r2, [r3, #112]	; 0x70
 8004264:	4a22      	ldr	r2, [pc, #136]	; (80042f0 <HAL_UART_MspInit+0x190>)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800426a:	4b23      	ldr	r3, [pc, #140]	; (80042f8 <HAL_UART_MspInit+0x198>)
 800426c:	4a23      	ldr	r2, [pc, #140]	; (80042fc <HAL_UART_MspInit+0x19c>)
 800426e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004270:	4b21      	ldr	r3, [pc, #132]	; (80042f8 <HAL_UART_MspInit+0x198>)
 8004272:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004276:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004278:	4b1f      	ldr	r3, [pc, #124]	; (80042f8 <HAL_UART_MspInit+0x198>)
 800427a:	2200      	movs	r2, #0
 800427c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800427e:	4b1e      	ldr	r3, [pc, #120]	; (80042f8 <HAL_UART_MspInit+0x198>)
 8004280:	2200      	movs	r2, #0
 8004282:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004284:	4b1c      	ldr	r3, [pc, #112]	; (80042f8 <HAL_UART_MspInit+0x198>)
 8004286:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800428a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800428c:	4b1a      	ldr	r3, [pc, #104]	; (80042f8 <HAL_UART_MspInit+0x198>)
 800428e:	2200      	movs	r2, #0
 8004290:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004292:	4b19      	ldr	r3, [pc, #100]	; (80042f8 <HAL_UART_MspInit+0x198>)
 8004294:	2200      	movs	r2, #0
 8004296:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004298:	4b17      	ldr	r3, [pc, #92]	; (80042f8 <HAL_UART_MspInit+0x198>)
 800429a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800429e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80042a0:	4b15      	ldr	r3, [pc, #84]	; (80042f8 <HAL_UART_MspInit+0x198>)
 80042a2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80042a6:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80042a8:	4b13      	ldr	r3, [pc, #76]	; (80042f8 <HAL_UART_MspInit+0x198>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80042ae:	4812      	ldr	r0, [pc, #72]	; (80042f8 <HAL_UART_MspInit+0x198>)
 80042b0:	f000 fa2a 	bl	8004708 <HAL_DMA_Init>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 80042ba:	f7fe ff53 	bl	8003164 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a0d      	ldr	r2, [pc, #52]	; (80042f8 <HAL_UART_MspInit+0x198>)
 80042c2:	675a      	str	r2, [r3, #116]	; 0x74
 80042c4:	4a0c      	ldr	r2, [pc, #48]	; (80042f8 <HAL_UART_MspInit+0x198>)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80042ca:	2200      	movs	r2, #0
 80042cc:	2105      	movs	r1, #5
 80042ce:	2027      	movs	r0, #39	; 0x27
 80042d0:	f000 f9f0 	bl	80046b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80042d4:	2027      	movs	r0, #39	; 0x27
 80042d6:	f000 fa09 	bl	80046ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80042da:	bf00      	nop
 80042dc:	37b8      	adds	r7, #184	; 0xb8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40004800 	.word	0x40004800
 80042e8:	40023800 	.word	0x40023800
 80042ec:	40020c00 	.word	0x40020c00
 80042f0:	20006ac4 	.word	0x20006ac4
 80042f4:	40026058 	.word	0x40026058
 80042f8:	20006b24 	.word	0x20006b24
 80042fc:	40026028 	.word	0x40026028

08004300 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004304:	4b14      	ldr	r3, [pc, #80]	; (8004358 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004306:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800430a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800430c:	4b12      	ldr	r3, [pc, #72]	; (8004358 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800430e:	2206      	movs	r2, #6
 8004310:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004312:	4b11      	ldr	r3, [pc, #68]	; (8004358 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004314:	2202      	movs	r2, #2
 8004316:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004318:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800431a:	2200      	movs	r2, #0
 800431c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800431e:	4b0e      	ldr	r3, [pc, #56]	; (8004358 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004320:	2202      	movs	r2, #2
 8004322:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8004324:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004326:	2201      	movs	r2, #1
 8004328:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800432a:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800432c:	2200      	movs	r2, #0
 800432e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004330:	4b09      	ldr	r3, [pc, #36]	; (8004358 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004332:	2200      	movs	r2, #0
 8004334:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8004336:	4b08      	ldr	r3, [pc, #32]	; (8004358 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004338:	2201      	movs	r2, #1
 800433a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800433c:	4b06      	ldr	r3, [pc, #24]	; (8004358 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800433e:	2200      	movs	r2, #0
 8004340:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004342:	4805      	ldr	r0, [pc, #20]	; (8004358 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8004344:	f000 ffd3 	bl	80052ee <HAL_PCD_Init>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800434e:	f7fe ff09 	bl	8003164 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8004352:	bf00      	nop
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	20006b84 	.word	0x20006b84

0800435c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b0ae      	sub	sp, #184	; 0xb8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004364:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	605a      	str	r2, [r3, #4]
 800436e:	609a      	str	r2, [r3, #8]
 8004370:	60da      	str	r2, [r3, #12]
 8004372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004374:	f107 0314 	add.w	r3, r7, #20
 8004378:	2290      	movs	r2, #144	; 0x90
 800437a:	2100      	movs	r1, #0
 800437c:	4618      	mov	r0, r3
 800437e:	f019 fbc9 	bl	801db14 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800438a:	d159      	bne.n	8004440 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800438c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004390:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8004392:	2300      	movs	r3, #0
 8004394:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004398:	f107 0314 	add.w	r3, r7, #20
 800439c:	4618      	mov	r0, r3
 800439e:	f001 fe45 	bl	800602c <HAL_RCCEx_PeriphCLKConfig>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80043a8:	f7fe fedc 	bl	8003164 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ac:	4b26      	ldr	r3, [pc, #152]	; (8004448 <HAL_PCD_MspInit+0xec>)
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	4a25      	ldr	r2, [pc, #148]	; (8004448 <HAL_PCD_MspInit+0xec>)
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	6313      	str	r3, [r2, #48]	; 0x30
 80043b8:	4b23      	ldr	r3, [pc, #140]	; (8004448 <HAL_PCD_MspInit+0xec>)
 80043ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	613b      	str	r3, [r7, #16]
 80043c2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80043c4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80043c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043cc:	2302      	movs	r3, #2
 80043ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043d2:	2300      	movs	r3, #0
 80043d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043d8:	2303      	movs	r3, #3
 80043da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80043de:	230a      	movs	r3, #10
 80043e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80043e8:	4619      	mov	r1, r3
 80043ea:	4818      	ldr	r0, [pc, #96]	; (800444c <HAL_PCD_MspInit+0xf0>)
 80043ec:	f000 fda2 	bl	8004f34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80043f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043f8:	2300      	movs	r3, #0
 80043fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043fe:	2300      	movs	r3, #0
 8004400:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8004404:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004408:	4619      	mov	r1, r3
 800440a:	4810      	ldr	r0, [pc, #64]	; (800444c <HAL_PCD_MspInit+0xf0>)
 800440c:	f000 fd92 	bl	8004f34 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004410:	4b0d      	ldr	r3, [pc, #52]	; (8004448 <HAL_PCD_MspInit+0xec>)
 8004412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004414:	4a0c      	ldr	r2, [pc, #48]	; (8004448 <HAL_PCD_MspInit+0xec>)
 8004416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800441a:	6353      	str	r3, [r2, #52]	; 0x34
 800441c:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <HAL_PCD_MspInit+0xec>)
 800441e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4b07      	ldr	r3, [pc, #28]	; (8004448 <HAL_PCD_MspInit+0xec>)
 800442a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800442c:	4a06      	ldr	r2, [pc, #24]	; (8004448 <HAL_PCD_MspInit+0xec>)
 800442e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004432:	6453      	str	r3, [r2, #68]	; 0x44
 8004434:	4b04      	ldr	r3, [pc, #16]	; (8004448 <HAL_PCD_MspInit+0xec>)
 8004436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004440:	bf00      	nop
 8004442:	37b8      	adds	r7, #184	; 0xb8
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40023800 	.word	0x40023800
 800444c:	40020000 	.word	0x40020000

08004450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004450:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004488 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004454:	480d      	ldr	r0, [pc, #52]	; (800448c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004456:	490e      	ldr	r1, [pc, #56]	; (8004490 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004458:	4a0e      	ldr	r2, [pc, #56]	; (8004494 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800445a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800445c:	e002      	b.n	8004464 <LoopCopyDataInit>

0800445e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800445e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004462:	3304      	adds	r3, #4

08004464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004468:	d3f9      	bcc.n	800445e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800446a:	4a0b      	ldr	r2, [pc, #44]	; (8004498 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800446c:	4c0b      	ldr	r4, [pc, #44]	; (800449c <LoopFillZerobss+0x26>)
  movs r3, #0
 800446e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004470:	e001      	b.n	8004476 <LoopFillZerobss>

08004472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004474:	3204      	adds	r2, #4

08004476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004478:	d3fb      	bcc.n	8004472 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800447a:	f7ff f983 	bl	8003784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800447e:	f019 fc4b 	bl	801dd18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004482:	f7fe fdab 	bl	8002fdc <main>
  bx  lr    
 8004486:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004488:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800448c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004490:	2000233c 	.word	0x2000233c
  ldr r2, =_sidata
 8004494:	08020e48 	.word	0x08020e48
  ldr r2, =_sbss
 8004498:	20002340 	.word	0x20002340
  ldr r4, =_ebss
 800449c:	20010e94 	.word	0x20010e94

080044a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044a0:	e7fe      	b.n	80044a0 <ADC_IRQHandler>

080044a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044a6:	2003      	movs	r0, #3
 80044a8:	f000 f8f9 	bl	800469e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044ac:	200f      	movs	r0, #15
 80044ae:	f7fe ffeb 	bl	8003488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044b2:	f7fe ffc1 	bl	8003438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	bd80      	pop	{r7, pc}

080044bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044c0:	4b06      	ldr	r3, [pc, #24]	; (80044dc <HAL_IncTick+0x20>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <HAL_IncTick+0x24>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4413      	add	r3, r2
 80044cc:	4a04      	ldr	r2, [pc, #16]	; (80044e0 <HAL_IncTick+0x24>)
 80044ce:	6013      	str	r3, [r2, #0]
}
 80044d0:	bf00      	nop
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	2000000c 	.word	0x2000000c
 80044e0:	2000708c 	.word	0x2000708c

080044e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  return uwTick;
 80044e8:	4b03      	ldr	r3, [pc, #12]	; (80044f8 <HAL_GetTick+0x14>)
 80044ea:	681b      	ldr	r3, [r3, #0]
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	2000708c 	.word	0x2000708c

080044fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004504:	f7ff ffee 	bl	80044e4 <HAL_GetTick>
 8004508:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004514:	d005      	beq.n	8004522 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004516:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <HAL_Delay+0x44>)
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	461a      	mov	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4413      	add	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004522:	bf00      	nop
 8004524:	f7ff ffde 	bl	80044e4 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	429a      	cmp	r2, r3
 8004532:	d8f7      	bhi.n	8004524 <HAL_Delay+0x28>
  {
  }
}
 8004534:	bf00      	nop
 8004536:	bf00      	nop
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	2000000c 	.word	0x2000000c

08004544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004554:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <__NVIC_SetPriorityGrouping+0x40>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004560:	4013      	ands	r3, r2
 8004562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800456c:	4b06      	ldr	r3, [pc, #24]	; (8004588 <__NVIC_SetPriorityGrouping+0x44>)
 800456e:	4313      	orrs	r3, r2
 8004570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004572:	4a04      	ldr	r2, [pc, #16]	; (8004584 <__NVIC_SetPriorityGrouping+0x40>)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	60d3      	str	r3, [r2, #12]
}
 8004578:	bf00      	nop
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	e000ed00 	.word	0xe000ed00
 8004588:	05fa0000 	.word	0x05fa0000

0800458c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800458c:	b480      	push	{r7}
 800458e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004590:	4b04      	ldr	r3, [pc, #16]	; (80045a4 <__NVIC_GetPriorityGrouping+0x18>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	0a1b      	lsrs	r3, r3, #8
 8004596:	f003 0307 	and.w	r3, r3, #7
}
 800459a:	4618      	mov	r0, r3
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	e000ed00 	.word	0xe000ed00

080045a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	4603      	mov	r3, r0
 80045b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	db0b      	blt.n	80045d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045ba:	79fb      	ldrb	r3, [r7, #7]
 80045bc:	f003 021f 	and.w	r2, r3, #31
 80045c0:	4907      	ldr	r1, [pc, #28]	; (80045e0 <__NVIC_EnableIRQ+0x38>)
 80045c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	2001      	movs	r0, #1
 80045ca:	fa00 f202 	lsl.w	r2, r0, r2
 80045ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	e000e100 	.word	0xe000e100

080045e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	4603      	mov	r3, r0
 80045ec:	6039      	str	r1, [r7, #0]
 80045ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	db0a      	blt.n	800460e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	490c      	ldr	r1, [pc, #48]	; (8004630 <__NVIC_SetPriority+0x4c>)
 80045fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004602:	0112      	lsls	r2, r2, #4
 8004604:	b2d2      	uxtb	r2, r2
 8004606:	440b      	add	r3, r1
 8004608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800460c:	e00a      	b.n	8004624 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	b2da      	uxtb	r2, r3
 8004612:	4908      	ldr	r1, [pc, #32]	; (8004634 <__NVIC_SetPriority+0x50>)
 8004614:	79fb      	ldrb	r3, [r7, #7]
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	3b04      	subs	r3, #4
 800461c:	0112      	lsls	r2, r2, #4
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	440b      	add	r3, r1
 8004622:	761a      	strb	r2, [r3, #24]
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	e000e100 	.word	0xe000e100
 8004634:	e000ed00 	.word	0xe000ed00

08004638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004638:	b480      	push	{r7}
 800463a:	b089      	sub	sp, #36	; 0x24
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	f1c3 0307 	rsb	r3, r3, #7
 8004652:	2b04      	cmp	r3, #4
 8004654:	bf28      	it	cs
 8004656:	2304      	movcs	r3, #4
 8004658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	3304      	adds	r3, #4
 800465e:	2b06      	cmp	r3, #6
 8004660:	d902      	bls.n	8004668 <NVIC_EncodePriority+0x30>
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	3b03      	subs	r3, #3
 8004666:	e000      	b.n	800466a <NVIC_EncodePriority+0x32>
 8004668:	2300      	movs	r3, #0
 800466a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800466c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	43da      	mvns	r2, r3
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	401a      	ands	r2, r3
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004680:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	fa01 f303 	lsl.w	r3, r1, r3
 800468a:	43d9      	mvns	r1, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004690:	4313      	orrs	r3, r2
         );
}
 8004692:	4618      	mov	r0, r3
 8004694:	3724      	adds	r7, #36	; 0x24
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b082      	sub	sp, #8
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7ff ff4c 	bl	8004544 <__NVIC_SetPriorityGrouping>
}
 80046ac:	bf00      	nop
 80046ae:	3708      	adds	r7, #8
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}

080046b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
 80046c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80046c2:	2300      	movs	r3, #0
 80046c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046c6:	f7ff ff61 	bl	800458c <__NVIC_GetPriorityGrouping>
 80046ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	68b9      	ldr	r1, [r7, #8]
 80046d0:	6978      	ldr	r0, [r7, #20]
 80046d2:	f7ff ffb1 	bl	8004638 <NVIC_EncodePriority>
 80046d6:	4602      	mov	r2, r0
 80046d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046dc:	4611      	mov	r1, r2
 80046de:	4618      	mov	r0, r3
 80046e0:	f7ff ff80 	bl	80045e4 <__NVIC_SetPriority>
}
 80046e4:	bf00      	nop
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	4603      	mov	r3, r0
 80046f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7ff ff54 	bl	80045a8 <__NVIC_EnableIRQ>
}
 8004700:	bf00      	nop
 8004702:	3708      	adds	r7, #8
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004714:	f7ff fee6 	bl	80044e4 <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e099      	b.n	8004858 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2202      	movs	r2, #2
 8004728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0201 	bic.w	r2, r2, #1
 8004742:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004744:	e00f      	b.n	8004766 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004746:	f7ff fecd 	bl	80044e4 <HAL_GetTick>
 800474a:	4602      	mov	r2, r0
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	1ad3      	subs	r3, r2, r3
 8004750:	2b05      	cmp	r3, #5
 8004752:	d908      	bls.n	8004766 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2220      	movs	r2, #32
 8004758:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2203      	movs	r2, #3
 800475e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e078      	b.n	8004858 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1e8      	bne.n	8004746 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	4b38      	ldr	r3, [pc, #224]	; (8004860 <HAL_DMA_Init+0x158>)
 8004780:	4013      	ands	r3, r2
 8004782:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004792:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800479e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d107      	bne.n	80047d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c8:	4313      	orrs	r3, r2
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	f023 0307 	bic.w	r3, r3, #7
 80047e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d117      	bne.n	800482a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	4313      	orrs	r3, r2
 8004802:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00e      	beq.n	800482a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 fb15 	bl	8004e3c <DMA_CheckFifoParam>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d008      	beq.n	800482a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2240      	movs	r2, #64	; 0x40
 800481c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004826:	2301      	movs	r3, #1
 8004828:	e016      	b.n	8004858 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 facc 	bl	8004dd0 <DMA_CalcBaseAndBitshift>
 8004838:	4603      	mov	r3, r0
 800483a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004840:	223f      	movs	r2, #63	; 0x3f
 8004842:	409a      	lsls	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	e010803f 	.word	0xe010803f

08004864 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004882:	2b01      	cmp	r3, #1
 8004884:	d101      	bne.n	800488a <HAL_DMA_Start_IT+0x26>
 8004886:	2302      	movs	r3, #2
 8004888:	e048      	b.n	800491c <HAL_DMA_Start_IT+0xb8>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b01      	cmp	r3, #1
 800489c:	d137      	bne.n	800490e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2202      	movs	r2, #2
 80048a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	68b9      	ldr	r1, [r7, #8]
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 fa5e 	bl	8004d74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048bc:	223f      	movs	r2, #63	; 0x3f
 80048be:	409a      	lsls	r2, r3
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0216 	orr.w	r2, r2, #22
 80048d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	695a      	ldr	r2, [r3, #20]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048e2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d007      	beq.n	80048fc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0208 	orr.w	r2, r2, #8
 80048fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0201 	orr.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	e005      	b.n	800491a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004916:	2302      	movs	r3, #2
 8004918:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800491a:	7dfb      	ldrb	r3, [r7, #23]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3718      	adds	r7, #24
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004930:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004932:	f7ff fdd7 	bl	80044e4 <HAL_GetTick>
 8004936:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d008      	beq.n	8004956 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2280      	movs	r2, #128	; 0x80
 8004948:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e052      	b.n	80049fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0216 	bic.w	r2, r2, #22
 8004964:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	695a      	ldr	r2, [r3, #20]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004974:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497a:	2b00      	cmp	r3, #0
 800497c:	d103      	bne.n	8004986 <HAL_DMA_Abort+0x62>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004982:	2b00      	cmp	r3, #0
 8004984:	d007      	beq.n	8004996 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0208 	bic.w	r2, r2, #8
 8004994:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 0201 	bic.w	r2, r2, #1
 80049a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049a6:	e013      	b.n	80049d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80049a8:	f7ff fd9c 	bl	80044e4 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b05      	cmp	r3, #5
 80049b4:	d90c      	bls.n	80049d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2220      	movs	r2, #32
 80049ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2203      	movs	r2, #3
 80049c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e015      	b.n	80049fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1e4      	bne.n	80049a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e2:	223f      	movs	r2, #63	; 0x3f
 80049e4:	409a      	lsls	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d004      	beq.n	8004a22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2280      	movs	r2, #128	; 0x80
 8004a1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e00c      	b.n	8004a3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2205      	movs	r2, #5
 8004a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 0201 	bic.w	r2, r2, #1
 8004a38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004a54:	4b8e      	ldr	r3, [pc, #568]	; (8004c90 <HAL_DMA_IRQHandler+0x248>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a8e      	ldr	r2, [pc, #568]	; (8004c94 <HAL_DMA_IRQHandler+0x24c>)
 8004a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5e:	0a9b      	lsrs	r3, r3, #10
 8004a60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a72:	2208      	movs	r2, #8
 8004a74:	409a      	lsls	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	4013      	ands	r3, r2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d01a      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d013      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0204 	bic.w	r2, r2, #4
 8004a9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aa0:	2208      	movs	r2, #8
 8004aa2:	409a      	lsls	r2, r3
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aac:	f043 0201 	orr.w	r2, r3, #1
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab8:	2201      	movs	r2, #1
 8004aba:	409a      	lsls	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d012      	beq.n	8004aea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00b      	beq.n	8004aea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	409a      	lsls	r2, r3
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae2:	f043 0202 	orr.w	r2, r3, #2
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004aee:	2204      	movs	r2, #4
 8004af0:	409a      	lsls	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4013      	ands	r3, r2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d012      	beq.n	8004b20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00b      	beq.n	8004b20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b0c:	2204      	movs	r2, #4
 8004b0e:	409a      	lsls	r2, r3
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b18:	f043 0204 	orr.w	r2, r3, #4
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b24:	2210      	movs	r2, #16
 8004b26:	409a      	lsls	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d043      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0308 	and.w	r3, r3, #8
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d03c      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b42:	2210      	movs	r2, #16
 8004b44:	409a      	lsls	r2, r3
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d018      	beq.n	8004b8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d108      	bne.n	8004b78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d024      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	4798      	blx	r3
 8004b76:	e01f      	b.n	8004bb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d01b      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	4798      	blx	r3
 8004b88:	e016      	b.n	8004bb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d107      	bne.n	8004ba8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f022 0208 	bic.w	r2, r2, #8
 8004ba6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d003      	beq.n	8004bb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	409a      	lsls	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 808f 	beq.w	8004ce8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0310 	and.w	r3, r3, #16
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 8087 	beq.w	8004ce8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bde:	2220      	movs	r2, #32
 8004be0:	409a      	lsls	r2, r3
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b05      	cmp	r3, #5
 8004bf0:	d136      	bne.n	8004c60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0216 	bic.w	r2, r2, #22
 8004c00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695a      	ldr	r2, [r3, #20]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d103      	bne.n	8004c22 <HAL_DMA_IRQHandler+0x1da>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d007      	beq.n	8004c32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0208 	bic.w	r2, r2, #8
 8004c30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c36:	223f      	movs	r2, #63	; 0x3f
 8004c38:	409a      	lsls	r2, r3
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d07e      	beq.n	8004d54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	4798      	blx	r3
        }
        return;
 8004c5e:	e079      	b.n	8004d54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d01d      	beq.n	8004caa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10d      	bne.n	8004c98 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d031      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	4798      	blx	r3
 8004c8c:	e02c      	b.n	8004ce8 <HAL_DMA_IRQHandler+0x2a0>
 8004c8e:	bf00      	nop
 8004c90:	20000004 	.word	0x20000004
 8004c94:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d023      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	4798      	blx	r3
 8004ca8:	e01e      	b.n	8004ce8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10f      	bne.n	8004cd8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0210 	bic.w	r2, r2, #16
 8004cc6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d032      	beq.n	8004d56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d022      	beq.n	8004d42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2205      	movs	r2, #5
 8004d00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0201 	bic.w	r2, r2, #1
 8004d12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	3301      	adds	r3, #1
 8004d18:	60bb      	str	r3, [r7, #8]
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d307      	bcc.n	8004d30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1f2      	bne.n	8004d14 <HAL_DMA_IRQHandler+0x2cc>
 8004d2e:	e000      	b.n	8004d32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004d30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	4798      	blx	r3
 8004d52:	e000      	b.n	8004d56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004d54:	bf00      	nop
    }
  }
}
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
 8004d80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	2b40      	cmp	r3, #64	; 0x40
 8004da0:	d108      	bne.n	8004db4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004db2:	e007      	b.n	8004dc4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	60da      	str	r2, [r3, #12]
}
 8004dc4:	bf00      	nop
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	3b10      	subs	r3, #16
 8004de0:	4a13      	ldr	r2, [pc, #76]	; (8004e30 <DMA_CalcBaseAndBitshift+0x60>)
 8004de2:	fba2 2303 	umull	r2, r3, r2, r3
 8004de6:	091b      	lsrs	r3, r3, #4
 8004de8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004dea:	4a12      	ldr	r2, [pc, #72]	; (8004e34 <DMA_CalcBaseAndBitshift+0x64>)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4413      	add	r3, r2
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	461a      	mov	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d908      	bls.n	8004e10 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	461a      	mov	r2, r3
 8004e04:	4b0c      	ldr	r3, [pc, #48]	; (8004e38 <DMA_CalcBaseAndBitshift+0x68>)
 8004e06:	4013      	ands	r3, r2
 8004e08:	1d1a      	adds	r2, r3, #4
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	659a      	str	r2, [r3, #88]	; 0x58
 8004e0e:	e006      	b.n	8004e1e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	461a      	mov	r2, r3
 8004e16:	4b08      	ldr	r3, [pc, #32]	; (8004e38 <DMA_CalcBaseAndBitshift+0x68>)
 8004e18:	4013      	ands	r3, r2
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	aaaaaaab 	.word	0xaaaaaaab
 8004e34:	0801ec14 	.word	0x0801ec14
 8004e38:	fffffc00 	.word	0xfffffc00

08004e3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e44:	2300      	movs	r3, #0
 8004e46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d11f      	bne.n	8004e96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2b03      	cmp	r3, #3
 8004e5a:	d856      	bhi.n	8004f0a <DMA_CheckFifoParam+0xce>
 8004e5c:	a201      	add	r2, pc, #4	; (adr r2, 8004e64 <DMA_CheckFifoParam+0x28>)
 8004e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e62:	bf00      	nop
 8004e64:	08004e75 	.word	0x08004e75
 8004e68:	08004e87 	.word	0x08004e87
 8004e6c:	08004e75 	.word	0x08004e75
 8004e70:	08004f0b 	.word	0x08004f0b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d046      	beq.n	8004f0e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e84:	e043      	b.n	8004f0e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004e8e:	d140      	bne.n	8004f12 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e94:	e03d      	b.n	8004f12 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e9e:	d121      	bne.n	8004ee4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2b03      	cmp	r3, #3
 8004ea4:	d837      	bhi.n	8004f16 <DMA_CheckFifoParam+0xda>
 8004ea6:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <DMA_CheckFifoParam+0x70>)
 8004ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eac:	08004ebd 	.word	0x08004ebd
 8004eb0:	08004ec3 	.word	0x08004ec3
 8004eb4:	08004ebd 	.word	0x08004ebd
 8004eb8:	08004ed5 	.word	0x08004ed5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8004ec0:	e030      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d025      	beq.n	8004f1a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ed2:	e022      	b.n	8004f1a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004edc:	d11f      	bne.n	8004f1e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ee2:	e01c      	b.n	8004f1e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d903      	bls.n	8004ef2 <DMA_CheckFifoParam+0xb6>
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d003      	beq.n	8004ef8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ef0:	e018      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	73fb      	strb	r3, [r7, #15]
      break;
 8004ef6:	e015      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00e      	beq.n	8004f22 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
      break;
 8004f08:	e00b      	b.n	8004f22 <DMA_CheckFifoParam+0xe6>
      break;
 8004f0a:	bf00      	nop
 8004f0c:	e00a      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      break;
 8004f0e:	bf00      	nop
 8004f10:	e008      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      break;
 8004f12:	bf00      	nop
 8004f14:	e006      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      break;
 8004f16:	bf00      	nop
 8004f18:	e004      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      break;
 8004f1a:	bf00      	nop
 8004f1c:	e002      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      break;   
 8004f1e:	bf00      	nop
 8004f20:	e000      	b.n	8004f24 <DMA_CheckFifoParam+0xe8>
      break;
 8004f22:	bf00      	nop
    }
  } 
  
  return status; 
 8004f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3714      	adds	r7, #20
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f30:	4770      	bx	lr
 8004f32:	bf00      	nop

08004f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b089      	sub	sp, #36	; 0x24
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004f42:	2300      	movs	r3, #0
 8004f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004f46:	2300      	movs	r3, #0
 8004f48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61fb      	str	r3, [r7, #28]
 8004f52:	e175      	b.n	8005240 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004f54:	2201      	movs	r2, #1
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	4013      	ands	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	f040 8164 	bne.w	800523a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d005      	beq.n	8004f8a <HAL_GPIO_Init+0x56>
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d130      	bne.n	8004fec <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	2203      	movs	r2, #3
 8004f96:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9a:	43db      	mvns	r3, r3
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	fa02 f303 	lsl.w	r3, r2, r3
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	091b      	lsrs	r3, r3, #4
 8004fd6:	f003 0201 	and.w	r2, r3, #1
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f003 0303 	and.w	r3, r3, #3
 8004ff4:	2b03      	cmp	r3, #3
 8004ff6:	d017      	beq.n	8005028 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	2203      	movs	r2, #3
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	43db      	mvns	r3, r3
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	4013      	ands	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	4313      	orrs	r3, r2
 8005020:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f003 0303 	and.w	r3, r3, #3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d123      	bne.n	800507c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	08da      	lsrs	r2, r3, #3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	3208      	adds	r2, #8
 800503c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	220f      	movs	r2, #15
 800504c:	fa02 f303 	lsl.w	r3, r2, r3
 8005050:	43db      	mvns	r3, r3
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	4013      	ands	r3, r2
 8005056:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	691a      	ldr	r2, [r3, #16]
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	fa02 f303 	lsl.w	r3, r2, r3
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	4313      	orrs	r3, r2
 800506c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	08da      	lsrs	r2, r3, #3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3208      	adds	r2, #8
 8005076:	69b9      	ldr	r1, [r7, #24]
 8005078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	2203      	movs	r2, #3
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	43db      	mvns	r3, r3
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	4013      	ands	r3, r2
 8005092:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f003 0203 	and.w	r2, r3, #3
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 80be 	beq.w	800523a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050be:	4b66      	ldr	r3, [pc, #408]	; (8005258 <HAL_GPIO_Init+0x324>)
 80050c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c2:	4a65      	ldr	r2, [pc, #404]	; (8005258 <HAL_GPIO_Init+0x324>)
 80050c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050c8:	6453      	str	r3, [r2, #68]	; 0x44
 80050ca:	4b63      	ldr	r3, [pc, #396]	; (8005258 <HAL_GPIO_Init+0x324>)
 80050cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050d2:	60fb      	str	r3, [r7, #12]
 80050d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80050d6:	4a61      	ldr	r2, [pc, #388]	; (800525c <HAL_GPIO_Init+0x328>)
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	089b      	lsrs	r3, r3, #2
 80050dc:	3302      	adds	r3, #2
 80050de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	220f      	movs	r2, #15
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	43db      	mvns	r3, r3
 80050f4:	69ba      	ldr	r2, [r7, #24]
 80050f6:	4013      	ands	r3, r2
 80050f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a58      	ldr	r2, [pc, #352]	; (8005260 <HAL_GPIO_Init+0x32c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d037      	beq.n	8005172 <HAL_GPIO_Init+0x23e>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a57      	ldr	r2, [pc, #348]	; (8005264 <HAL_GPIO_Init+0x330>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d031      	beq.n	800516e <HAL_GPIO_Init+0x23a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a56      	ldr	r2, [pc, #344]	; (8005268 <HAL_GPIO_Init+0x334>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d02b      	beq.n	800516a <HAL_GPIO_Init+0x236>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a55      	ldr	r2, [pc, #340]	; (800526c <HAL_GPIO_Init+0x338>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d025      	beq.n	8005166 <HAL_GPIO_Init+0x232>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a54      	ldr	r2, [pc, #336]	; (8005270 <HAL_GPIO_Init+0x33c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d01f      	beq.n	8005162 <HAL_GPIO_Init+0x22e>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a53      	ldr	r2, [pc, #332]	; (8005274 <HAL_GPIO_Init+0x340>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d019      	beq.n	800515e <HAL_GPIO_Init+0x22a>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a52      	ldr	r2, [pc, #328]	; (8005278 <HAL_GPIO_Init+0x344>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d013      	beq.n	800515a <HAL_GPIO_Init+0x226>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a51      	ldr	r2, [pc, #324]	; (800527c <HAL_GPIO_Init+0x348>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d00d      	beq.n	8005156 <HAL_GPIO_Init+0x222>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a50      	ldr	r2, [pc, #320]	; (8005280 <HAL_GPIO_Init+0x34c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d007      	beq.n	8005152 <HAL_GPIO_Init+0x21e>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a4f      	ldr	r2, [pc, #316]	; (8005284 <HAL_GPIO_Init+0x350>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d101      	bne.n	800514e <HAL_GPIO_Init+0x21a>
 800514a:	2309      	movs	r3, #9
 800514c:	e012      	b.n	8005174 <HAL_GPIO_Init+0x240>
 800514e:	230a      	movs	r3, #10
 8005150:	e010      	b.n	8005174 <HAL_GPIO_Init+0x240>
 8005152:	2308      	movs	r3, #8
 8005154:	e00e      	b.n	8005174 <HAL_GPIO_Init+0x240>
 8005156:	2307      	movs	r3, #7
 8005158:	e00c      	b.n	8005174 <HAL_GPIO_Init+0x240>
 800515a:	2306      	movs	r3, #6
 800515c:	e00a      	b.n	8005174 <HAL_GPIO_Init+0x240>
 800515e:	2305      	movs	r3, #5
 8005160:	e008      	b.n	8005174 <HAL_GPIO_Init+0x240>
 8005162:	2304      	movs	r3, #4
 8005164:	e006      	b.n	8005174 <HAL_GPIO_Init+0x240>
 8005166:	2303      	movs	r3, #3
 8005168:	e004      	b.n	8005174 <HAL_GPIO_Init+0x240>
 800516a:	2302      	movs	r3, #2
 800516c:	e002      	b.n	8005174 <HAL_GPIO_Init+0x240>
 800516e:	2301      	movs	r3, #1
 8005170:	e000      	b.n	8005174 <HAL_GPIO_Init+0x240>
 8005172:	2300      	movs	r3, #0
 8005174:	69fa      	ldr	r2, [r7, #28]
 8005176:	f002 0203 	and.w	r2, r2, #3
 800517a:	0092      	lsls	r2, r2, #2
 800517c:	4093      	lsls	r3, r2
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	4313      	orrs	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005184:	4935      	ldr	r1, [pc, #212]	; (800525c <HAL_GPIO_Init+0x328>)
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	089b      	lsrs	r3, r3, #2
 800518a:	3302      	adds	r3, #2
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005192:	4b3d      	ldr	r3, [pc, #244]	; (8005288 <HAL_GPIO_Init+0x354>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	43db      	mvns	r3, r3
 800519c:	69ba      	ldr	r2, [r7, #24]
 800519e:	4013      	ands	r3, r2
 80051a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80051b6:	4a34      	ldr	r2, [pc, #208]	; (8005288 <HAL_GPIO_Init+0x354>)
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80051bc:	4b32      	ldr	r3, [pc, #200]	; (8005288 <HAL_GPIO_Init+0x354>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	43db      	mvns	r3, r3
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	4013      	ands	r3, r2
 80051ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	4313      	orrs	r3, r2
 80051de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80051e0:	4a29      	ldr	r2, [pc, #164]	; (8005288 <HAL_GPIO_Init+0x354>)
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80051e6:	4b28      	ldr	r3, [pc, #160]	; (8005288 <HAL_GPIO_Init+0x354>)
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	43db      	mvns	r3, r3
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	4013      	ands	r3, r2
 80051f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	4313      	orrs	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800520a:	4a1f      	ldr	r2, [pc, #124]	; (8005288 <HAL_GPIO_Init+0x354>)
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005210:	4b1d      	ldr	r3, [pc, #116]	; (8005288 <HAL_GPIO_Init+0x354>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	43db      	mvns	r3, r3
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	4013      	ands	r3, r2
 800521e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d003      	beq.n	8005234 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005234:	4a14      	ldr	r2, [pc, #80]	; (8005288 <HAL_GPIO_Init+0x354>)
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	3301      	adds	r3, #1
 800523e:	61fb      	str	r3, [r7, #28]
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	2b0f      	cmp	r3, #15
 8005244:	f67f ae86 	bls.w	8004f54 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005248:	bf00      	nop
 800524a:	bf00      	nop
 800524c:	3724      	adds	r7, #36	; 0x24
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40023800 	.word	0x40023800
 800525c:	40013800 	.word	0x40013800
 8005260:	40020000 	.word	0x40020000
 8005264:	40020400 	.word	0x40020400
 8005268:	40020800 	.word	0x40020800
 800526c:	40020c00 	.word	0x40020c00
 8005270:	40021000 	.word	0x40021000
 8005274:	40021400 	.word	0x40021400
 8005278:	40021800 	.word	0x40021800
 800527c:	40021c00 	.word	0x40021c00
 8005280:	40022000 	.word	0x40022000
 8005284:	40022400 	.word	0x40022400
 8005288:	40013c00 	.word	0x40013c00

0800528c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800528c:	b480      	push	{r7}
 800528e:	b085      	sub	sp, #20
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	460b      	mov	r3, r1
 8005296:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	691a      	ldr	r2, [r3, #16]
 800529c:	887b      	ldrh	r3, [r7, #2]
 800529e:	4013      	ands	r3, r2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d002      	beq.n	80052aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052a4:	2301      	movs	r3, #1
 80052a6:	73fb      	strb	r3, [r7, #15]
 80052a8:	e001      	b.n	80052ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052aa:	2300      	movs	r3, #0
 80052ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	807b      	strh	r3, [r7, #2]
 80052c8:	4613      	mov	r3, r2
 80052ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052cc:	787b      	ldrb	r3, [r7, #1]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052d2:	887a      	ldrh	r2, [r7, #2]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80052d8:	e003      	b.n	80052e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80052da:	887b      	ldrh	r3, [r7, #2]
 80052dc:	041a      	lsls	r2, r3, #16
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	619a      	str	r2, [r3, #24]
}
 80052e2:	bf00      	nop
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80052ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052f0:	b08f      	sub	sp, #60	; 0x3c
 80052f2:	af0a      	add	r7, sp, #40	; 0x28
 80052f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e116      	b.n	800552e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d106      	bne.n	8005320 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7ff f81e 	bl	800435c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2203      	movs	r2, #3
 8005324:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005330:	2b00      	cmp	r3, #0
 8005332:	d102      	bne.n	800533a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f004 f9f8 	bl	8009734 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	603b      	str	r3, [r7, #0]
 800534a:	687e      	ldr	r6, [r7, #4]
 800534c:	466d      	mov	r5, sp
 800534e:	f106 0410 	add.w	r4, r6, #16
 8005352:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005354:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005356:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005358:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800535a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800535e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005362:	1d33      	adds	r3, r6, #4
 8005364:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005366:	6838      	ldr	r0, [r7, #0]
 8005368:	f004 f98c 	bl	8009684 <USB_CoreInit>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d005      	beq.n	800537e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2202      	movs	r2, #2
 8005376:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e0d7      	b.n	800552e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2100      	movs	r1, #0
 8005384:	4618      	mov	r0, r3
 8005386:	f004 f9e6 	bl	8009756 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800538a:	2300      	movs	r3, #0
 800538c:	73fb      	strb	r3, [r7, #15]
 800538e:	e04a      	b.n	8005426 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005390:	7bfa      	ldrb	r2, [r7, #15]
 8005392:	6879      	ldr	r1, [r7, #4]
 8005394:	4613      	mov	r3, r2
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	440b      	add	r3, r1
 800539e:	333d      	adds	r3, #61	; 0x3d
 80053a0:	2201      	movs	r2, #1
 80053a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80053a4:	7bfa      	ldrb	r2, [r7, #15]
 80053a6:	6879      	ldr	r1, [r7, #4]
 80053a8:	4613      	mov	r3, r2
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	4413      	add	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	440b      	add	r3, r1
 80053b2:	333c      	adds	r3, #60	; 0x3c
 80053b4:	7bfa      	ldrb	r2, [r7, #15]
 80053b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80053b8:	7bfa      	ldrb	r2, [r7, #15]
 80053ba:	7bfb      	ldrb	r3, [r7, #15]
 80053bc:	b298      	uxth	r0, r3
 80053be:	6879      	ldr	r1, [r7, #4]
 80053c0:	4613      	mov	r3, r2
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	440b      	add	r3, r1
 80053ca:	3344      	adds	r3, #68	; 0x44
 80053cc:	4602      	mov	r2, r0
 80053ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80053d0:	7bfa      	ldrb	r2, [r7, #15]
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	4613      	mov	r3, r2
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	4413      	add	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	440b      	add	r3, r1
 80053de:	3340      	adds	r3, #64	; 0x40
 80053e0:	2200      	movs	r2, #0
 80053e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80053e4:	7bfa      	ldrb	r2, [r7, #15]
 80053e6:	6879      	ldr	r1, [r7, #4]
 80053e8:	4613      	mov	r3, r2
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	4413      	add	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	440b      	add	r3, r1
 80053f2:	3348      	adds	r3, #72	; 0x48
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80053f8:	7bfa      	ldrb	r2, [r7, #15]
 80053fa:	6879      	ldr	r1, [r7, #4]
 80053fc:	4613      	mov	r3, r2
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	4413      	add	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	440b      	add	r3, r1
 8005406:	334c      	adds	r3, #76	; 0x4c
 8005408:	2200      	movs	r2, #0
 800540a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800540c:	7bfa      	ldrb	r2, [r7, #15]
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	4613      	mov	r3, r2
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	4413      	add	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	440b      	add	r3, r1
 800541a:	3354      	adds	r3, #84	; 0x54
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005420:	7bfb      	ldrb	r3, [r7, #15]
 8005422:	3301      	adds	r3, #1
 8005424:	73fb      	strb	r3, [r7, #15]
 8005426:	7bfa      	ldrb	r2, [r7, #15]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	429a      	cmp	r2, r3
 800542e:	d3af      	bcc.n	8005390 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005430:	2300      	movs	r3, #0
 8005432:	73fb      	strb	r3, [r7, #15]
 8005434:	e044      	b.n	80054c0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005436:	7bfa      	ldrb	r2, [r7, #15]
 8005438:	6879      	ldr	r1, [r7, #4]
 800543a:	4613      	mov	r3, r2
 800543c:	00db      	lsls	r3, r3, #3
 800543e:	4413      	add	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	440b      	add	r3, r1
 8005444:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005448:	2200      	movs	r2, #0
 800544a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800544c:	7bfa      	ldrb	r2, [r7, #15]
 800544e:	6879      	ldr	r1, [r7, #4]
 8005450:	4613      	mov	r3, r2
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	4413      	add	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	440b      	add	r3, r1
 800545a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800545e:	7bfa      	ldrb	r2, [r7, #15]
 8005460:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005462:	7bfa      	ldrb	r2, [r7, #15]
 8005464:	6879      	ldr	r1, [r7, #4]
 8005466:	4613      	mov	r3, r2
 8005468:	00db      	lsls	r3, r3, #3
 800546a:	4413      	add	r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	440b      	add	r3, r1
 8005470:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005474:	2200      	movs	r2, #0
 8005476:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005478:	7bfa      	ldrb	r2, [r7, #15]
 800547a:	6879      	ldr	r1, [r7, #4]
 800547c:	4613      	mov	r3, r2
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	4413      	add	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800548a:	2200      	movs	r2, #0
 800548c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800548e:	7bfa      	ldrb	r2, [r7, #15]
 8005490:	6879      	ldr	r1, [r7, #4]
 8005492:	4613      	mov	r3, r2
 8005494:	00db      	lsls	r3, r3, #3
 8005496:	4413      	add	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	440b      	add	r3, r1
 800549c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80054a0:	2200      	movs	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80054a4:	7bfa      	ldrb	r2, [r7, #15]
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	4613      	mov	r3, r2
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	4413      	add	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	440b      	add	r3, r1
 80054b2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80054b6:	2200      	movs	r2, #0
 80054b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054ba:	7bfb      	ldrb	r3, [r7, #15]
 80054bc:	3301      	adds	r3, #1
 80054be:	73fb      	strb	r3, [r7, #15]
 80054c0:	7bfa      	ldrb	r2, [r7, #15]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d3b5      	bcc.n	8005436 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	603b      	str	r3, [r7, #0]
 80054d0:	687e      	ldr	r6, [r7, #4]
 80054d2:	466d      	mov	r5, sp
 80054d4:	f106 0410 	add.w	r4, r6, #16
 80054d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80054e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80054e8:	1d33      	adds	r3, r6, #4
 80054ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054ec:	6838      	ldr	r0, [r7, #0]
 80054ee:	f004 f97f 	bl	80097f0 <USB_DevInit>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d005      	beq.n	8005504 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e014      	b.n	800552e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005518:	2b01      	cmp	r3, #1
 800551a:	d102      	bne.n	8005522 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 f80b 	bl	8005538 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4618      	mov	r0, r3
 8005528:	f004 fb3d 	bl	8009ba6 <USB_DevDisconnect>

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08005538 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005566:	4b05      	ldr	r3, [pc, #20]	; (800557c <HAL_PCDEx_ActivateLPM+0x44>)
 8005568:	4313      	orrs	r3, r2
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	10000003 	.word	0x10000003

08005580 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005586:	2300      	movs	r3, #0
 8005588:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800558a:	4b23      	ldr	r3, [pc, #140]	; (8005618 <HAL_PWREx_EnableOverDrive+0x98>)
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	4a22      	ldr	r2, [pc, #136]	; (8005618 <HAL_PWREx_EnableOverDrive+0x98>)
 8005590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005594:	6413      	str	r3, [r2, #64]	; 0x40
 8005596:	4b20      	ldr	r3, [pc, #128]	; (8005618 <HAL_PWREx_EnableOverDrive+0x98>)
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800559e:	603b      	str	r3, [r7, #0]
 80055a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80055a2:	4b1e      	ldr	r3, [pc, #120]	; (800561c <HAL_PWREx_EnableOverDrive+0x9c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a1d      	ldr	r2, [pc, #116]	; (800561c <HAL_PWREx_EnableOverDrive+0x9c>)
 80055a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055ae:	f7fe ff99 	bl	80044e4 <HAL_GetTick>
 80055b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80055b4:	e009      	b.n	80055ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80055b6:	f7fe ff95 	bl	80044e4 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055c4:	d901      	bls.n	80055ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e022      	b.n	8005610 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80055ca:	4b14      	ldr	r3, [pc, #80]	; (800561c <HAL_PWREx_EnableOverDrive+0x9c>)
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d6:	d1ee      	bne.n	80055b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80055d8:	4b10      	ldr	r3, [pc, #64]	; (800561c <HAL_PWREx_EnableOverDrive+0x9c>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a0f      	ldr	r2, [pc, #60]	; (800561c <HAL_PWREx_EnableOverDrive+0x9c>)
 80055de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80055e4:	f7fe ff7e 	bl	80044e4 <HAL_GetTick>
 80055e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80055ea:	e009      	b.n	8005600 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80055ec:	f7fe ff7a 	bl	80044e4 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055fa:	d901      	bls.n	8005600 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e007      	b.n	8005610 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005600:	4b06      	ldr	r3, [pc, #24]	; (800561c <HAL_PWREx_EnableOverDrive+0x9c>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005608:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800560c:	d1ee      	bne.n	80055ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	40023800 	.word	0x40023800
 800561c:	40007000 	.word	0x40007000

08005620 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005628:	2300      	movs	r3, #0
 800562a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e29b      	b.n	8005b6e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	f000 8087 	beq.w	8005752 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005644:	4b96      	ldr	r3, [pc, #600]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f003 030c 	and.w	r3, r3, #12
 800564c:	2b04      	cmp	r3, #4
 800564e:	d00c      	beq.n	800566a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005650:	4b93      	ldr	r3, [pc, #588]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f003 030c 	and.w	r3, r3, #12
 8005658:	2b08      	cmp	r3, #8
 800565a:	d112      	bne.n	8005682 <HAL_RCC_OscConfig+0x62>
 800565c:	4b90      	ldr	r3, [pc, #576]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005664:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005668:	d10b      	bne.n	8005682 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800566a:	4b8d      	ldr	r3, [pc, #564]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d06c      	beq.n	8005750 <HAL_RCC_OscConfig+0x130>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d168      	bne.n	8005750 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e275      	b.n	8005b6e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800568a:	d106      	bne.n	800569a <HAL_RCC_OscConfig+0x7a>
 800568c:	4b84      	ldr	r3, [pc, #528]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a83      	ldr	r2, [pc, #524]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 8005692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	e02e      	b.n	80056f8 <HAL_RCC_OscConfig+0xd8>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10c      	bne.n	80056bc <HAL_RCC_OscConfig+0x9c>
 80056a2:	4b7f      	ldr	r3, [pc, #508]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a7e      	ldr	r2, [pc, #504]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80056a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	4b7c      	ldr	r3, [pc, #496]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a7b      	ldr	r2, [pc, #492]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80056b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056b8:	6013      	str	r3, [r2, #0]
 80056ba:	e01d      	b.n	80056f8 <HAL_RCC_OscConfig+0xd8>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056c4:	d10c      	bne.n	80056e0 <HAL_RCC_OscConfig+0xc0>
 80056c6:	4b76      	ldr	r3, [pc, #472]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a75      	ldr	r2, [pc, #468]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80056cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	4b73      	ldr	r3, [pc, #460]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a72      	ldr	r2, [pc, #456]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80056d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056dc:	6013      	str	r3, [r2, #0]
 80056de:	e00b      	b.n	80056f8 <HAL_RCC_OscConfig+0xd8>
 80056e0:	4b6f      	ldr	r3, [pc, #444]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a6e      	ldr	r2, [pc, #440]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80056e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056ea:	6013      	str	r3, [r2, #0]
 80056ec:	4b6c      	ldr	r3, [pc, #432]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a6b      	ldr	r2, [pc, #428]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80056f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d013      	beq.n	8005728 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005700:	f7fe fef0 	bl	80044e4 <HAL_GetTick>
 8005704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005706:	e008      	b.n	800571a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005708:	f7fe feec 	bl	80044e4 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b64      	cmp	r3, #100	; 0x64
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e229      	b.n	8005b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800571a:	4b61      	ldr	r3, [pc, #388]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d0f0      	beq.n	8005708 <HAL_RCC_OscConfig+0xe8>
 8005726:	e014      	b.n	8005752 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005728:	f7fe fedc 	bl	80044e4 <HAL_GetTick>
 800572c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800572e:	e008      	b.n	8005742 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005730:	f7fe fed8 	bl	80044e4 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b64      	cmp	r3, #100	; 0x64
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e215      	b.n	8005b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005742:	4b57      	ldr	r3, [pc, #348]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1f0      	bne.n	8005730 <HAL_RCC_OscConfig+0x110>
 800574e:	e000      	b.n	8005752 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	2b00      	cmp	r3, #0
 800575c:	d069      	beq.n	8005832 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800575e:	4b50      	ldr	r3, [pc, #320]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 030c 	and.w	r3, r3, #12
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00b      	beq.n	8005782 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800576a:	4b4d      	ldr	r3, [pc, #308]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f003 030c 	and.w	r3, r3, #12
 8005772:	2b08      	cmp	r3, #8
 8005774:	d11c      	bne.n	80057b0 <HAL_RCC_OscConfig+0x190>
 8005776:	4b4a      	ldr	r3, [pc, #296]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d116      	bne.n	80057b0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005782:	4b47      	ldr	r3, [pc, #284]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d005      	beq.n	800579a <HAL_RCC_OscConfig+0x17a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d001      	beq.n	800579a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e1e9      	b.n	8005b6e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800579a:	4b41      	ldr	r3, [pc, #260]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	00db      	lsls	r3, r3, #3
 80057a8:	493d      	ldr	r1, [pc, #244]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057ae:	e040      	b.n	8005832 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d023      	beq.n	8005800 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057b8:	4b39      	ldr	r3, [pc, #228]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a38      	ldr	r2, [pc, #224]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80057be:	f043 0301 	orr.w	r3, r3, #1
 80057c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c4:	f7fe fe8e 	bl	80044e4 <HAL_GetTick>
 80057c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057cc:	f7fe fe8a 	bl	80044e4 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e1c7      	b.n	8005b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057de:	4b30      	ldr	r3, [pc, #192]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0f0      	beq.n	80057cc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ea:	4b2d      	ldr	r3, [pc, #180]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	00db      	lsls	r3, r3, #3
 80057f8:	4929      	ldr	r1, [pc, #164]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 80057fa:	4313      	orrs	r3, r2
 80057fc:	600b      	str	r3, [r1, #0]
 80057fe:	e018      	b.n	8005832 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005800:	4b27      	ldr	r3, [pc, #156]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a26      	ldr	r2, [pc, #152]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 8005806:	f023 0301 	bic.w	r3, r3, #1
 800580a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800580c:	f7fe fe6a 	bl	80044e4 <HAL_GetTick>
 8005810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005812:	e008      	b.n	8005826 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005814:	f7fe fe66 	bl	80044e4 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e1a3      	b.n	8005b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005826:	4b1e      	ldr	r3, [pc, #120]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1f0      	bne.n	8005814 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0308 	and.w	r3, r3, #8
 800583a:	2b00      	cmp	r3, #0
 800583c:	d038      	beq.n	80058b0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d019      	beq.n	800587a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005846:	4b16      	ldr	r3, [pc, #88]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 8005848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800584a:	4a15      	ldr	r2, [pc, #84]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 800584c:	f043 0301 	orr.w	r3, r3, #1
 8005850:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005852:	f7fe fe47 	bl	80044e4 <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005858:	e008      	b.n	800586c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800585a:	f7fe fe43 	bl	80044e4 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d901      	bls.n	800586c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e180      	b.n	8005b6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800586c:	4b0c      	ldr	r3, [pc, #48]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 800586e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d0f0      	beq.n	800585a <HAL_RCC_OscConfig+0x23a>
 8005878:	e01a      	b.n	80058b0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800587a:	4b09      	ldr	r3, [pc, #36]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 800587c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800587e:	4a08      	ldr	r2, [pc, #32]	; (80058a0 <HAL_RCC_OscConfig+0x280>)
 8005880:	f023 0301 	bic.w	r3, r3, #1
 8005884:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005886:	f7fe fe2d 	bl	80044e4 <HAL_GetTick>
 800588a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800588c:	e00a      	b.n	80058a4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800588e:	f7fe fe29 	bl	80044e4 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d903      	bls.n	80058a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e166      	b.n	8005b6e <HAL_RCC_OscConfig+0x54e>
 80058a0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058a4:	4b92      	ldr	r3, [pc, #584]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 80058a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1ee      	bne.n	800588e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 80a4 	beq.w	8005a06 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058be:	4b8c      	ldr	r3, [pc, #560]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d10d      	bne.n	80058e6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80058ca:	4b89      	ldr	r3, [pc, #548]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	4a88      	ldr	r2, [pc, #544]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 80058d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058d4:	6413      	str	r3, [r2, #64]	; 0x40
 80058d6:	4b86      	ldr	r3, [pc, #536]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058de:	60bb      	str	r3, [r7, #8]
 80058e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058e2:	2301      	movs	r3, #1
 80058e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058e6:	4b83      	ldr	r3, [pc, #524]	; (8005af4 <HAL_RCC_OscConfig+0x4d4>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d118      	bne.n	8005924 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80058f2:	4b80      	ldr	r3, [pc, #512]	; (8005af4 <HAL_RCC_OscConfig+0x4d4>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a7f      	ldr	r2, [pc, #508]	; (8005af4 <HAL_RCC_OscConfig+0x4d4>)
 80058f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058fe:	f7fe fdf1 	bl	80044e4 <HAL_GetTick>
 8005902:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005904:	e008      	b.n	8005918 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005906:	f7fe fded 	bl	80044e4 <HAL_GetTick>
 800590a:	4602      	mov	r2, r0
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	1ad3      	subs	r3, r2, r3
 8005910:	2b64      	cmp	r3, #100	; 0x64
 8005912:	d901      	bls.n	8005918 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e12a      	b.n	8005b6e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005918:	4b76      	ldr	r3, [pc, #472]	; (8005af4 <HAL_RCC_OscConfig+0x4d4>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005920:	2b00      	cmp	r3, #0
 8005922:	d0f0      	beq.n	8005906 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d106      	bne.n	800593a <HAL_RCC_OscConfig+0x31a>
 800592c:	4b70      	ldr	r3, [pc, #448]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 800592e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005930:	4a6f      	ldr	r2, [pc, #444]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 8005932:	f043 0301 	orr.w	r3, r3, #1
 8005936:	6713      	str	r3, [r2, #112]	; 0x70
 8005938:	e02d      	b.n	8005996 <HAL_RCC_OscConfig+0x376>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10c      	bne.n	800595c <HAL_RCC_OscConfig+0x33c>
 8005942:	4b6b      	ldr	r3, [pc, #428]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 8005944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005946:	4a6a      	ldr	r2, [pc, #424]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 8005948:	f023 0301 	bic.w	r3, r3, #1
 800594c:	6713      	str	r3, [r2, #112]	; 0x70
 800594e:	4b68      	ldr	r3, [pc, #416]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 8005950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005952:	4a67      	ldr	r2, [pc, #412]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 8005954:	f023 0304 	bic.w	r3, r3, #4
 8005958:	6713      	str	r3, [r2, #112]	; 0x70
 800595a:	e01c      	b.n	8005996 <HAL_RCC_OscConfig+0x376>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	2b05      	cmp	r3, #5
 8005962:	d10c      	bne.n	800597e <HAL_RCC_OscConfig+0x35e>
 8005964:	4b62      	ldr	r3, [pc, #392]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 8005966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005968:	4a61      	ldr	r2, [pc, #388]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 800596a:	f043 0304 	orr.w	r3, r3, #4
 800596e:	6713      	str	r3, [r2, #112]	; 0x70
 8005970:	4b5f      	ldr	r3, [pc, #380]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 8005972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005974:	4a5e      	ldr	r2, [pc, #376]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 8005976:	f043 0301 	orr.w	r3, r3, #1
 800597a:	6713      	str	r3, [r2, #112]	; 0x70
 800597c:	e00b      	b.n	8005996 <HAL_RCC_OscConfig+0x376>
 800597e:	4b5c      	ldr	r3, [pc, #368]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 8005980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005982:	4a5b      	ldr	r2, [pc, #364]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 8005984:	f023 0301 	bic.w	r3, r3, #1
 8005988:	6713      	str	r3, [r2, #112]	; 0x70
 800598a:	4b59      	ldr	r3, [pc, #356]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 800598c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598e:	4a58      	ldr	r2, [pc, #352]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 8005990:	f023 0304 	bic.w	r3, r3, #4
 8005994:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d015      	beq.n	80059ca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800599e:	f7fe fda1 	bl	80044e4 <HAL_GetTick>
 80059a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059a4:	e00a      	b.n	80059bc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059a6:	f7fe fd9d 	bl	80044e4 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d901      	bls.n	80059bc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e0d8      	b.n	8005b6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059bc:	4b4c      	ldr	r3, [pc, #304]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 80059be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0ee      	beq.n	80059a6 <HAL_RCC_OscConfig+0x386>
 80059c8:	e014      	b.n	80059f4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ca:	f7fe fd8b 	bl	80044e4 <HAL_GetTick>
 80059ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059d0:	e00a      	b.n	80059e8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059d2:	f7fe fd87 	bl	80044e4 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d901      	bls.n	80059e8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e0c2      	b.n	8005b6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80059e8:	4b41      	ldr	r3, [pc, #260]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 80059ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1ee      	bne.n	80059d2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80059f4:	7dfb      	ldrb	r3, [r7, #23]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d105      	bne.n	8005a06 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059fa:	4b3d      	ldr	r3, [pc, #244]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 80059fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fe:	4a3c      	ldr	r2, [pc, #240]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 8005a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 80ae 	beq.w	8005b6c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a10:	4b37      	ldr	r3, [pc, #220]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f003 030c 	and.w	r3, r3, #12
 8005a18:	2b08      	cmp	r3, #8
 8005a1a:	d06d      	beq.n	8005af8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d14b      	bne.n	8005abc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a24:	4b32      	ldr	r3, [pc, #200]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a31      	ldr	r2, [pc, #196]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 8005a2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a30:	f7fe fd58 	bl	80044e4 <HAL_GetTick>
 8005a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a36:	e008      	b.n	8005a4a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a38:	f7fe fd54 	bl	80044e4 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e091      	b.n	8005b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a4a:	4b29      	ldr	r3, [pc, #164]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1f0      	bne.n	8005a38 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	69da      	ldr	r2, [r3, #28]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	019b      	lsls	r3, r3, #6
 8005a66:	431a      	orrs	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6c:	085b      	lsrs	r3, r3, #1
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	041b      	lsls	r3, r3, #16
 8005a72:	431a      	orrs	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	061b      	lsls	r3, r3, #24
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a80:	071b      	lsls	r3, r3, #28
 8005a82:	491b      	ldr	r1, [pc, #108]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a88:	4b19      	ldr	r3, [pc, #100]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a18      	ldr	r2, [pc, #96]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 8005a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a94:	f7fe fd26 	bl	80044e4 <HAL_GetTick>
 8005a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a9a:	e008      	b.n	8005aae <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a9c:	f7fe fd22 	bl	80044e4 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e05f      	b.n	8005b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005aae:	4b10      	ldr	r3, [pc, #64]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d0f0      	beq.n	8005a9c <HAL_RCC_OscConfig+0x47c>
 8005aba:	e057      	b.n	8005b6c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005abc:	4b0c      	ldr	r3, [pc, #48]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a0b      	ldr	r2, [pc, #44]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 8005ac2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac8:	f7fe fd0c 	bl	80044e4 <HAL_GetTick>
 8005acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ad0:	f7fe fd08 	bl	80044e4 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e045      	b.n	8005b6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ae2:	4b03      	ldr	r3, [pc, #12]	; (8005af0 <HAL_RCC_OscConfig+0x4d0>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1f0      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x4b0>
 8005aee:	e03d      	b.n	8005b6c <HAL_RCC_OscConfig+0x54c>
 8005af0:	40023800 	.word	0x40023800
 8005af4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005af8:	4b1f      	ldr	r3, [pc, #124]	; (8005b78 <HAL_RCC_OscConfig+0x558>)
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d030      	beq.n	8005b68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d129      	bne.n	8005b68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d122      	bne.n	8005b68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b28:	4013      	ands	r3, r2
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d119      	bne.n	8005b68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3e:	085b      	lsrs	r3, r3, #1
 8005b40:	3b01      	subs	r3, #1
 8005b42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d10f      	bne.n	8005b68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d107      	bne.n	8005b68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b62:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d001      	beq.n	8005b6c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e000      	b.n	8005b6e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3718      	adds	r7, #24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	40023800 	.word	0x40023800

08005b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005b86:	2300      	movs	r3, #0
 8005b88:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e0d0      	b.n	8005d36 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b94:	4b6a      	ldr	r3, [pc, #424]	; (8005d40 <HAL_RCC_ClockConfig+0x1c4>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 030f 	and.w	r3, r3, #15
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d910      	bls.n	8005bc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ba2:	4b67      	ldr	r3, [pc, #412]	; (8005d40 <HAL_RCC_ClockConfig+0x1c4>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f023 020f 	bic.w	r2, r3, #15
 8005baa:	4965      	ldr	r1, [pc, #404]	; (8005d40 <HAL_RCC_ClockConfig+0x1c4>)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb2:	4b63      	ldr	r3, [pc, #396]	; (8005d40 <HAL_RCC_ClockConfig+0x1c4>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d001      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e0b8      	b.n	8005d36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0302 	and.w	r3, r3, #2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d020      	beq.n	8005c12 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0304 	and.w	r3, r3, #4
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d005      	beq.n	8005be8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bdc:	4b59      	ldr	r3, [pc, #356]	; (8005d44 <HAL_RCC_ClockConfig+0x1c8>)
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	4a58      	ldr	r2, [pc, #352]	; (8005d44 <HAL_RCC_ClockConfig+0x1c8>)
 8005be2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005be6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0308 	and.w	r3, r3, #8
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d005      	beq.n	8005c00 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005bf4:	4b53      	ldr	r3, [pc, #332]	; (8005d44 <HAL_RCC_ClockConfig+0x1c8>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	4a52      	ldr	r2, [pc, #328]	; (8005d44 <HAL_RCC_ClockConfig+0x1c8>)
 8005bfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005bfe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c00:	4b50      	ldr	r3, [pc, #320]	; (8005d44 <HAL_RCC_ClockConfig+0x1c8>)
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	494d      	ldr	r1, [pc, #308]	; (8005d44 <HAL_RCC_ClockConfig+0x1c8>)
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d040      	beq.n	8005ca0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d107      	bne.n	8005c36 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c26:	4b47      	ldr	r3, [pc, #284]	; (8005d44 <HAL_RCC_ClockConfig+0x1c8>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d115      	bne.n	8005c5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e07f      	b.n	8005d36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	2b02      	cmp	r3, #2
 8005c3c:	d107      	bne.n	8005c4e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c3e:	4b41      	ldr	r3, [pc, #260]	; (8005d44 <HAL_RCC_ClockConfig+0x1c8>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d109      	bne.n	8005c5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e073      	b.n	8005d36 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c4e:	4b3d      	ldr	r3, [pc, #244]	; (8005d44 <HAL_RCC_ClockConfig+0x1c8>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e06b      	b.n	8005d36 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c5e:	4b39      	ldr	r3, [pc, #228]	; (8005d44 <HAL_RCC_ClockConfig+0x1c8>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f023 0203 	bic.w	r2, r3, #3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	4936      	ldr	r1, [pc, #216]	; (8005d44 <HAL_RCC_ClockConfig+0x1c8>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c70:	f7fe fc38 	bl	80044e4 <HAL_GetTick>
 8005c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c76:	e00a      	b.n	8005c8e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c78:	f7fe fc34 	bl	80044e4 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e053      	b.n	8005d36 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c8e:	4b2d      	ldr	r3, [pc, #180]	; (8005d44 <HAL_RCC_ClockConfig+0x1c8>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f003 020c 	and.w	r2, r3, #12
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d1eb      	bne.n	8005c78 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ca0:	4b27      	ldr	r3, [pc, #156]	; (8005d40 <HAL_RCC_ClockConfig+0x1c4>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 030f 	and.w	r3, r3, #15
 8005ca8:	683a      	ldr	r2, [r7, #0]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d210      	bcs.n	8005cd0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cae:	4b24      	ldr	r3, [pc, #144]	; (8005d40 <HAL_RCC_ClockConfig+0x1c4>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f023 020f 	bic.w	r2, r3, #15
 8005cb6:	4922      	ldr	r1, [pc, #136]	; (8005d40 <HAL_RCC_ClockConfig+0x1c4>)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cbe:	4b20      	ldr	r3, [pc, #128]	; (8005d40 <HAL_RCC_ClockConfig+0x1c4>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 030f 	and.w	r3, r3, #15
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d001      	beq.n	8005cd0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e032      	b.n	8005d36 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d008      	beq.n	8005cee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cdc:	4b19      	ldr	r3, [pc, #100]	; (8005d44 <HAL_RCC_ClockConfig+0x1c8>)
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	4916      	ldr	r1, [pc, #88]	; (8005d44 <HAL_RCC_ClockConfig+0x1c8>)
 8005cea:	4313      	orrs	r3, r2
 8005cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0308 	and.w	r3, r3, #8
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d009      	beq.n	8005d0e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005cfa:	4b12      	ldr	r3, [pc, #72]	; (8005d44 <HAL_RCC_ClockConfig+0x1c8>)
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	00db      	lsls	r3, r3, #3
 8005d08:	490e      	ldr	r1, [pc, #56]	; (8005d44 <HAL_RCC_ClockConfig+0x1c8>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d0e:	f000 f821 	bl	8005d54 <HAL_RCC_GetSysClockFreq>
 8005d12:	4602      	mov	r2, r0
 8005d14:	4b0b      	ldr	r3, [pc, #44]	; (8005d44 <HAL_RCC_ClockConfig+0x1c8>)
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	091b      	lsrs	r3, r3, #4
 8005d1a:	f003 030f 	and.w	r3, r3, #15
 8005d1e:	490a      	ldr	r1, [pc, #40]	; (8005d48 <HAL_RCC_ClockConfig+0x1cc>)
 8005d20:	5ccb      	ldrb	r3, [r1, r3]
 8005d22:	fa22 f303 	lsr.w	r3, r2, r3
 8005d26:	4a09      	ldr	r2, [pc, #36]	; (8005d4c <HAL_RCC_ClockConfig+0x1d0>)
 8005d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d2a:	4b09      	ldr	r3, [pc, #36]	; (8005d50 <HAL_RCC_ClockConfig+0x1d4>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fd fbaa 	bl	8003488 <HAL_InitTick>

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	40023c00 	.word	0x40023c00
 8005d44:	40023800 	.word	0x40023800
 8005d48:	0801ebfc 	.word	0x0801ebfc
 8005d4c:	20000004 	.word	0x20000004
 8005d50:	20000008 	.word	0x20000008

08005d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d58:	b094      	sub	sp, #80	; 0x50
 8005d5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8005d60:	2300      	movs	r3, #0
 8005d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d64:	2300      	movs	r3, #0
 8005d66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005d6c:	4b79      	ldr	r3, [pc, #484]	; (8005f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f003 030c 	and.w	r3, r3, #12
 8005d74:	2b08      	cmp	r3, #8
 8005d76:	d00d      	beq.n	8005d94 <HAL_RCC_GetSysClockFreq+0x40>
 8005d78:	2b08      	cmp	r3, #8
 8005d7a:	f200 80e1 	bhi.w	8005f40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d002      	beq.n	8005d88 <HAL_RCC_GetSysClockFreq+0x34>
 8005d82:	2b04      	cmp	r3, #4
 8005d84:	d003      	beq.n	8005d8e <HAL_RCC_GetSysClockFreq+0x3a>
 8005d86:	e0db      	b.n	8005f40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d88:	4b73      	ldr	r3, [pc, #460]	; (8005f58 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d8c:	e0db      	b.n	8005f46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d8e:	4b73      	ldr	r3, [pc, #460]	; (8005f5c <HAL_RCC_GetSysClockFreq+0x208>)
 8005d90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d92:	e0d8      	b.n	8005f46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d94:	4b6f      	ldr	r3, [pc, #444]	; (8005f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d9c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005d9e:	4b6d      	ldr	r3, [pc, #436]	; (8005f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d063      	beq.n	8005e72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005daa:	4b6a      	ldr	r3, [pc, #424]	; (8005f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	099b      	lsrs	r3, r3, #6
 8005db0:	2200      	movs	r2, #0
 8005db2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005db4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dbc:	633b      	str	r3, [r7, #48]	; 0x30
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8005dc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005dc6:	4622      	mov	r2, r4
 8005dc8:	462b      	mov	r3, r5
 8005dca:	f04f 0000 	mov.w	r0, #0
 8005dce:	f04f 0100 	mov.w	r1, #0
 8005dd2:	0159      	lsls	r1, r3, #5
 8005dd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005dd8:	0150      	lsls	r0, r2, #5
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4621      	mov	r1, r4
 8005de0:	1a51      	subs	r1, r2, r1
 8005de2:	6139      	str	r1, [r7, #16]
 8005de4:	4629      	mov	r1, r5
 8005de6:	eb63 0301 	sbc.w	r3, r3, r1
 8005dea:	617b      	str	r3, [r7, #20]
 8005dec:	f04f 0200 	mov.w	r2, #0
 8005df0:	f04f 0300 	mov.w	r3, #0
 8005df4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005df8:	4659      	mov	r1, fp
 8005dfa:	018b      	lsls	r3, r1, #6
 8005dfc:	4651      	mov	r1, sl
 8005dfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e02:	4651      	mov	r1, sl
 8005e04:	018a      	lsls	r2, r1, #6
 8005e06:	4651      	mov	r1, sl
 8005e08:	ebb2 0801 	subs.w	r8, r2, r1
 8005e0c:	4659      	mov	r1, fp
 8005e0e:	eb63 0901 	sbc.w	r9, r3, r1
 8005e12:	f04f 0200 	mov.w	r2, #0
 8005e16:	f04f 0300 	mov.w	r3, #0
 8005e1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e26:	4690      	mov	r8, r2
 8005e28:	4699      	mov	r9, r3
 8005e2a:	4623      	mov	r3, r4
 8005e2c:	eb18 0303 	adds.w	r3, r8, r3
 8005e30:	60bb      	str	r3, [r7, #8]
 8005e32:	462b      	mov	r3, r5
 8005e34:	eb49 0303 	adc.w	r3, r9, r3
 8005e38:	60fb      	str	r3, [r7, #12]
 8005e3a:	f04f 0200 	mov.w	r2, #0
 8005e3e:	f04f 0300 	mov.w	r3, #0
 8005e42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e46:	4629      	mov	r1, r5
 8005e48:	024b      	lsls	r3, r1, #9
 8005e4a:	4621      	mov	r1, r4
 8005e4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005e50:	4621      	mov	r1, r4
 8005e52:	024a      	lsls	r2, r1, #9
 8005e54:	4610      	mov	r0, r2
 8005e56:	4619      	mov	r1, r3
 8005e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e64:	f7fa faa4 	bl	80003b0 <__aeabi_uldivmod>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e70:	e058      	b.n	8005f24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e72:	4b38      	ldr	r3, [pc, #224]	; (8005f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	099b      	lsrs	r3, r3, #6
 8005e78:	2200      	movs	r2, #0
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	4611      	mov	r1, r2
 8005e7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005e82:	623b      	str	r3, [r7, #32]
 8005e84:	2300      	movs	r3, #0
 8005e86:	627b      	str	r3, [r7, #36]	; 0x24
 8005e88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005e8c:	4642      	mov	r2, r8
 8005e8e:	464b      	mov	r3, r9
 8005e90:	f04f 0000 	mov.w	r0, #0
 8005e94:	f04f 0100 	mov.w	r1, #0
 8005e98:	0159      	lsls	r1, r3, #5
 8005e9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e9e:	0150      	lsls	r0, r2, #5
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	4641      	mov	r1, r8
 8005ea6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005eaa:	4649      	mov	r1, r9
 8005eac:	eb63 0b01 	sbc.w	fp, r3, r1
 8005eb0:	f04f 0200 	mov.w	r2, #0
 8005eb4:	f04f 0300 	mov.w	r3, #0
 8005eb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ebc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ec0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ec4:	ebb2 040a 	subs.w	r4, r2, sl
 8005ec8:	eb63 050b 	sbc.w	r5, r3, fp
 8005ecc:	f04f 0200 	mov.w	r2, #0
 8005ed0:	f04f 0300 	mov.w	r3, #0
 8005ed4:	00eb      	lsls	r3, r5, #3
 8005ed6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005eda:	00e2      	lsls	r2, r4, #3
 8005edc:	4614      	mov	r4, r2
 8005ede:	461d      	mov	r5, r3
 8005ee0:	4643      	mov	r3, r8
 8005ee2:	18e3      	adds	r3, r4, r3
 8005ee4:	603b      	str	r3, [r7, #0]
 8005ee6:	464b      	mov	r3, r9
 8005ee8:	eb45 0303 	adc.w	r3, r5, r3
 8005eec:	607b      	str	r3, [r7, #4]
 8005eee:	f04f 0200 	mov.w	r2, #0
 8005ef2:	f04f 0300 	mov.w	r3, #0
 8005ef6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005efa:	4629      	mov	r1, r5
 8005efc:	028b      	lsls	r3, r1, #10
 8005efe:	4621      	mov	r1, r4
 8005f00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005f04:	4621      	mov	r1, r4
 8005f06:	028a      	lsls	r2, r1, #10
 8005f08:	4610      	mov	r0, r2
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f0e:	2200      	movs	r2, #0
 8005f10:	61bb      	str	r3, [r7, #24]
 8005f12:	61fa      	str	r2, [r7, #28]
 8005f14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f18:	f7fa fa4a 	bl	80003b0 <__aeabi_uldivmod>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4613      	mov	r3, r2
 8005f22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005f24:	4b0b      	ldr	r3, [pc, #44]	; (8005f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	0c1b      	lsrs	r3, r3, #16
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	3301      	adds	r3, #1
 8005f30:	005b      	lsls	r3, r3, #1
 8005f32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005f34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f3e:	e002      	b.n	8005f46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f40:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3750      	adds	r7, #80	; 0x50
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f52:	bf00      	nop
 8005f54:	40023800 	.word	0x40023800
 8005f58:	00f42400 	.word	0x00f42400
 8005f5c:	007a1200 	.word	0x007a1200

08005f60 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f64:	4b03      	ldr	r3, [pc, #12]	; (8005f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f66:	681b      	ldr	r3, [r3, #0]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	20000004 	.word	0x20000004

08005f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f7c:	f7ff fff0 	bl	8005f60 <HAL_RCC_GetHCLKFreq>
 8005f80:	4602      	mov	r2, r0
 8005f82:	4b05      	ldr	r3, [pc, #20]	; (8005f98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	0a9b      	lsrs	r3, r3, #10
 8005f88:	f003 0307 	and.w	r3, r3, #7
 8005f8c:	4903      	ldr	r1, [pc, #12]	; (8005f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f8e:	5ccb      	ldrb	r3, [r1, r3]
 8005f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	40023800 	.word	0x40023800
 8005f9c:	0801ec0c 	.word	0x0801ec0c

08005fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005fa4:	f7ff ffdc 	bl	8005f60 <HAL_RCC_GetHCLKFreq>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	4b05      	ldr	r3, [pc, #20]	; (8005fc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	0b5b      	lsrs	r3, r3, #13
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	4903      	ldr	r1, [pc, #12]	; (8005fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fb6:	5ccb      	ldrb	r3, [r1, r3]
 8005fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	bd80      	pop	{r7, pc}
 8005fc0:	40023800 	.word	0x40023800
 8005fc4:	0801ec0c 	.word	0x0801ec0c

08005fc8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	220f      	movs	r2, #15
 8005fd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005fd8:	4b12      	ldr	r3, [pc, #72]	; (8006024 <HAL_RCC_GetClockConfig+0x5c>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f003 0203 	and.w	r2, r3, #3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005fe4:	4b0f      	ldr	r3, [pc, #60]	; (8006024 <HAL_RCC_GetClockConfig+0x5c>)
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005ff0:	4b0c      	ldr	r3, [pc, #48]	; (8006024 <HAL_RCC_GetClockConfig+0x5c>)
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005ffc:	4b09      	ldr	r3, [pc, #36]	; (8006024 <HAL_RCC_GetClockConfig+0x5c>)
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	08db      	lsrs	r3, r3, #3
 8006002:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800600a:	4b07      	ldr	r3, [pc, #28]	; (8006028 <HAL_RCC_GetClockConfig+0x60>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 020f 	and.w	r2, r3, #15
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	601a      	str	r2, [r3, #0]
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	40023800 	.word	0x40023800
 8006028:	40023c00 	.word	0x40023c00

0800602c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b088      	sub	sp, #32
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006034:	2300      	movs	r3, #0
 8006036:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006038:	2300      	movs	r3, #0
 800603a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800603c:	2300      	movs	r3, #0
 800603e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006040:	2300      	movs	r3, #0
 8006042:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006044:	2300      	movs	r3, #0
 8006046:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	2b00      	cmp	r3, #0
 8006052:	d012      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006054:	4b69      	ldr	r3, [pc, #420]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	4a68      	ldr	r2, [pc, #416]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800605a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800605e:	6093      	str	r3, [r2, #8]
 8006060:	4b66      	ldr	r3, [pc, #408]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006068:	4964      	ldr	r1, [pc, #400]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800606a:	4313      	orrs	r3, r2
 800606c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006076:	2301      	movs	r3, #1
 8006078:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d017      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006086:	4b5d      	ldr	r3, [pc, #372]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800608c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006094:	4959      	ldr	r1, [pc, #356]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006096:	4313      	orrs	r3, r2
 8006098:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060a4:	d101      	bne.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80060a6:	2301      	movs	r3, #1
 80060a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80060b2:	2301      	movs	r3, #1
 80060b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d017      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80060c2:	4b4e      	ldr	r3, [pc, #312]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060c8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d0:	494a      	ldr	r1, [pc, #296]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060d2:	4313      	orrs	r3, r2
 80060d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060e0:	d101      	bne.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80060e2:	2301      	movs	r3, #1
 80060e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80060ee:	2301      	movs	r3, #1
 80060f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80060fe:	2301      	movs	r3, #1
 8006100:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0320 	and.w	r3, r3, #32
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 808b 	beq.w	8006226 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006110:	4b3a      	ldr	r3, [pc, #232]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006114:	4a39      	ldr	r2, [pc, #228]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800611a:	6413      	str	r3, [r2, #64]	; 0x40
 800611c:	4b37      	ldr	r3, [pc, #220]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800611e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006124:	60bb      	str	r3, [r7, #8]
 8006126:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006128:	4b35      	ldr	r3, [pc, #212]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a34      	ldr	r2, [pc, #208]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800612e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006132:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006134:	f7fe f9d6 	bl	80044e4 <HAL_GetTick>
 8006138:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800613a:	e008      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800613c:	f7fe f9d2 	bl	80044e4 <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	2b64      	cmp	r3, #100	; 0x64
 8006148:	d901      	bls.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e38f      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800614e:	4b2c      	ldr	r3, [pc, #176]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006156:	2b00      	cmp	r3, #0
 8006158:	d0f0      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800615a:	4b28      	ldr	r3, [pc, #160]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800615c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006162:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d035      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	429a      	cmp	r2, r3
 8006176:	d02e      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006178:	4b20      	ldr	r3, [pc, #128]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800617a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006180:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006182:	4b1e      	ldr	r3, [pc, #120]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006186:	4a1d      	ldr	r2, [pc, #116]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800618c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800618e:	4b1b      	ldr	r3, [pc, #108]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006192:	4a1a      	ldr	r2, [pc, #104]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006198:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800619a:	4a18      	ldr	r2, [pc, #96]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80061a0:	4b16      	ldr	r3, [pc, #88]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a4:	f003 0301 	and.w	r3, r3, #1
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d114      	bne.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ac:	f7fe f99a 	bl	80044e4 <HAL_GetTick>
 80061b0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061b2:	e00a      	b.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061b4:	f7fe f996 	bl	80044e4 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	f241 3288 	movw	r2, #5000	; 0x1388
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d901      	bls.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e351      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061ca:	4b0c      	ldr	r3, [pc, #48]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d0ee      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061e2:	d111      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80061e4:	4b05      	ldr	r3, [pc, #20]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80061f0:	4b04      	ldr	r3, [pc, #16]	; (8006204 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80061f2:	400b      	ands	r3, r1
 80061f4:	4901      	ldr	r1, [pc, #4]	; (80061fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	608b      	str	r3, [r1, #8]
 80061fa:	e00b      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80061fc:	40023800 	.word	0x40023800
 8006200:	40007000 	.word	0x40007000
 8006204:	0ffffcff 	.word	0x0ffffcff
 8006208:	4bac      	ldr	r3, [pc, #688]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	4aab      	ldr	r2, [pc, #684]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800620e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006212:	6093      	str	r3, [r2, #8]
 8006214:	4ba9      	ldr	r3, [pc, #676]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006216:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006220:	49a6      	ldr	r1, [pc, #664]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006222:	4313      	orrs	r3, r2
 8006224:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0310 	and.w	r3, r3, #16
 800622e:	2b00      	cmp	r3, #0
 8006230:	d010      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006232:	4ba2      	ldr	r3, [pc, #648]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006238:	4aa0      	ldr	r2, [pc, #640]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800623a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800623e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006242:	4b9e      	ldr	r3, [pc, #632]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006244:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624c:	499b      	ldr	r1, [pc, #620]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800624e:	4313      	orrs	r3, r2
 8006250:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006260:	4b96      	ldr	r3, [pc, #600]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006266:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800626e:	4993      	ldr	r1, [pc, #588]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006270:	4313      	orrs	r3, r2
 8006272:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006282:	4b8e      	ldr	r3, [pc, #568]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006288:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006290:	498a      	ldr	r1, [pc, #552]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006292:	4313      	orrs	r3, r2
 8006294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d00a      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062a4:	4b85      	ldr	r3, [pc, #532]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062b2:	4982      	ldr	r1, [pc, #520]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062b4:	4313      	orrs	r3, r2
 80062b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80062c6:	4b7d      	ldr	r3, [pc, #500]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d4:	4979      	ldr	r1, [pc, #484]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00a      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062e8:	4b74      	ldr	r3, [pc, #464]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ee:	f023 0203 	bic.w	r2, r3, #3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f6:	4971      	ldr	r1, [pc, #452]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00a      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800630a:	4b6c      	ldr	r3, [pc, #432]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800630c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006310:	f023 020c 	bic.w	r2, r3, #12
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006318:	4968      	ldr	r1, [pc, #416]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800631a:	4313      	orrs	r3, r2
 800631c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00a      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800632c:	4b63      	ldr	r3, [pc, #396]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800632e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006332:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800633a:	4960      	ldr	r1, [pc, #384]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800633c:	4313      	orrs	r3, r2
 800633e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00a      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800634e:	4b5b      	ldr	r3, [pc, #364]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006354:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800635c:	4957      	ldr	r1, [pc, #348]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800635e:	4313      	orrs	r3, r2
 8006360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00a      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006370:	4b52      	ldr	r3, [pc, #328]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006376:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800637e:	494f      	ldr	r1, [pc, #316]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006380:	4313      	orrs	r3, r2
 8006382:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800638e:	2b00      	cmp	r3, #0
 8006390:	d00a      	beq.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006392:	4b4a      	ldr	r3, [pc, #296]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006398:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063a0:	4946      	ldr	r1, [pc, #280]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063a2:	4313      	orrs	r3, r2
 80063a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00a      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80063b4:	4b41      	ldr	r3, [pc, #260]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c2:	493e      	ldr	r1, [pc, #248]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00a      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80063d6:	4b39      	ldr	r3, [pc, #228]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063e4:	4935      	ldr	r1, [pc, #212]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00a      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80063f8:	4b30      	ldr	r3, [pc, #192]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80063fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006406:	492d      	ldr	r1, [pc, #180]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006408:	4313      	orrs	r3, r2
 800640a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d011      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800641a:	4b28      	ldr	r3, [pc, #160]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800641c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006420:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006428:	4924      	ldr	r1, [pc, #144]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800642a:	4313      	orrs	r3, r2
 800642c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006434:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006438:	d101      	bne.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800643a:	2301      	movs	r3, #1
 800643c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0308 	and.w	r3, r3, #8
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800644a:	2301      	movs	r3, #1
 800644c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d00a      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800645a:	4b18      	ldr	r3, [pc, #96]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800645c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006460:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006468:	4914      	ldr	r1, [pc, #80]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800646a:	4313      	orrs	r3, r2
 800646c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006478:	2b00      	cmp	r3, #0
 800647a:	d00b      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800647c:	4b0f      	ldr	r3, [pc, #60]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800647e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006482:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800648c:	490b      	ldr	r1, [pc, #44]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800648e:	4313      	orrs	r3, r2
 8006490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00f      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80064a0:	4b06      	ldr	r3, [pc, #24]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064b0:	4902      	ldr	r1, [pc, #8]	; (80064bc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80064b2:	4313      	orrs	r3, r2
 80064b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80064b8:	e002      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80064ba:	bf00      	nop
 80064bc:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00b      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064cc:	4b8a      	ldr	r3, [pc, #552]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064dc:	4986      	ldr	r1, [pc, #536]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00b      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80064f0:	4b81      	ldr	r3, [pc, #516]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006500:	497d      	ldr	r1, [pc, #500]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006502:	4313      	orrs	r3, r2
 8006504:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d006      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006516:	2b00      	cmp	r3, #0
 8006518:	f000 80d6 	beq.w	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800651c:	4b76      	ldr	r3, [pc, #472]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a75      	ldr	r2, [pc, #468]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006522:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006526:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006528:	f7fd ffdc 	bl	80044e4 <HAL_GetTick>
 800652c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800652e:	e008      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006530:	f7fd ffd8 	bl	80044e4 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b64      	cmp	r3, #100	; 0x64
 800653c:	d901      	bls.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e195      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006542:	4b6d      	ldr	r3, [pc, #436]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1f0      	bne.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	d021      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x572>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800655e:	2b00      	cmp	r3, #0
 8006560:	d11d      	bne.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006562:	4b65      	ldr	r3, [pc, #404]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006568:	0c1b      	lsrs	r3, r3, #16
 800656a:	f003 0303 	and.w	r3, r3, #3
 800656e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006570:	4b61      	ldr	r3, [pc, #388]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006576:	0e1b      	lsrs	r3, r3, #24
 8006578:	f003 030f 	and.w	r3, r3, #15
 800657c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	019a      	lsls	r2, r3, #6
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	041b      	lsls	r3, r3, #16
 8006588:	431a      	orrs	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	061b      	lsls	r3, r3, #24
 800658e:	431a      	orrs	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	071b      	lsls	r3, r3, #28
 8006596:	4958      	ldr	r1, [pc, #352]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006598:	4313      	orrs	r3, r2
 800659a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d004      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065b2:	d00a      	beq.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d02e      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065c8:	d129      	bne.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80065ca:	4b4b      	ldr	r3, [pc, #300]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065d0:	0c1b      	lsrs	r3, r3, #16
 80065d2:	f003 0303 	and.w	r3, r3, #3
 80065d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80065d8:	4b47      	ldr	r3, [pc, #284]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065de:	0f1b      	lsrs	r3, r3, #28
 80065e0:	f003 0307 	and.w	r3, r3, #7
 80065e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	019a      	lsls	r2, r3, #6
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	041b      	lsls	r3, r3, #16
 80065f0:	431a      	orrs	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	68db      	ldr	r3, [r3, #12]
 80065f6:	061b      	lsls	r3, r3, #24
 80065f8:	431a      	orrs	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	071b      	lsls	r3, r3, #28
 80065fe:	493e      	ldr	r1, [pc, #248]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006600:	4313      	orrs	r3, r2
 8006602:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006606:	4b3c      	ldr	r3, [pc, #240]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800660c:	f023 021f 	bic.w	r2, r3, #31
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006614:	3b01      	subs	r3, #1
 8006616:	4938      	ldr	r1, [pc, #224]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006618:	4313      	orrs	r3, r2
 800661a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d01d      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800662a:	4b33      	ldr	r3, [pc, #204]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800662c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006630:	0e1b      	lsrs	r3, r3, #24
 8006632:	f003 030f 	and.w	r3, r3, #15
 8006636:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006638:	4b2f      	ldr	r3, [pc, #188]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800663a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800663e:	0f1b      	lsrs	r3, r3, #28
 8006640:	f003 0307 	and.w	r3, r3, #7
 8006644:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	019a      	lsls	r2, r3, #6
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	041b      	lsls	r3, r3, #16
 8006652:	431a      	orrs	r2, r3
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	061b      	lsls	r3, r3, #24
 8006658:	431a      	orrs	r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	071b      	lsls	r3, r3, #28
 800665e:	4926      	ldr	r1, [pc, #152]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006660:	4313      	orrs	r3, r2
 8006662:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d011      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	019a      	lsls	r2, r3, #6
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	041b      	lsls	r3, r3, #16
 800667e:	431a      	orrs	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	061b      	lsls	r3, r3, #24
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	071b      	lsls	r3, r3, #28
 800668e:	491a      	ldr	r1, [pc, #104]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006690:	4313      	orrs	r3, r2
 8006692:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006696:	4b18      	ldr	r3, [pc, #96]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a17      	ldr	r2, [pc, #92]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800669c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066a2:	f7fd ff1f 	bl	80044e4 <HAL_GetTick>
 80066a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066a8:	e008      	b.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80066aa:	f7fd ff1b 	bl	80044e4 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	2b64      	cmp	r3, #100	; 0x64
 80066b6:	d901      	bls.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e0d8      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80066bc:	4b0e      	ldr	r3, [pc, #56]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d0f0      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	f040 80ce 	bne.w	800686c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80066d0:	4b09      	ldr	r3, [pc, #36]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a08      	ldr	r2, [pc, #32]	; (80066f8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80066d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066dc:	f7fd ff02 	bl	80044e4 <HAL_GetTick>
 80066e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066e2:	e00b      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80066e4:	f7fd fefe 	bl	80044e4 <HAL_GetTick>
 80066e8:	4602      	mov	r2, r0
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	2b64      	cmp	r3, #100	; 0x64
 80066f0:	d904      	bls.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	e0bb      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x842>
 80066f6:	bf00      	nop
 80066f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066fc:	4b5e      	ldr	r3, [pc, #376]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006708:	d0ec      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d003      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800671a:	2b00      	cmp	r3, #0
 800671c:	d009      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006726:	2b00      	cmp	r3, #0
 8006728:	d02e      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	2b00      	cmp	r3, #0
 8006730:	d12a      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006732:	4b51      	ldr	r3, [pc, #324]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006738:	0c1b      	lsrs	r3, r3, #16
 800673a:	f003 0303 	and.w	r3, r3, #3
 800673e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006740:	4b4d      	ldr	r3, [pc, #308]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006746:	0f1b      	lsrs	r3, r3, #28
 8006748:	f003 0307 	and.w	r3, r3, #7
 800674c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	019a      	lsls	r2, r3, #6
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	041b      	lsls	r3, r3, #16
 8006758:	431a      	orrs	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	061b      	lsls	r3, r3, #24
 8006760:	431a      	orrs	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	071b      	lsls	r3, r3, #28
 8006766:	4944      	ldr	r1, [pc, #272]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006768:	4313      	orrs	r3, r2
 800676a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800676e:	4b42      	ldr	r3, [pc, #264]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006774:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677c:	3b01      	subs	r3, #1
 800677e:	021b      	lsls	r3, r3, #8
 8006780:	493d      	ldr	r1, [pc, #244]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006782:	4313      	orrs	r3, r2
 8006784:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d022      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006798:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800679c:	d11d      	bne.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800679e:	4b36      	ldr	r3, [pc, #216]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a4:	0e1b      	lsrs	r3, r3, #24
 80067a6:	f003 030f 	and.w	r3, r3, #15
 80067aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067ac:	4b32      	ldr	r3, [pc, #200]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b2:	0f1b      	lsrs	r3, r3, #28
 80067b4:	f003 0307 	and.w	r3, r3, #7
 80067b8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	019a      	lsls	r2, r3, #6
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	041b      	lsls	r3, r3, #16
 80067c6:	431a      	orrs	r2, r3
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	061b      	lsls	r3, r3, #24
 80067cc:	431a      	orrs	r2, r3
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	071b      	lsls	r3, r3, #28
 80067d2:	4929      	ldr	r1, [pc, #164]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067d4:	4313      	orrs	r3, r2
 80067d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0308 	and.w	r3, r3, #8
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d028      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067e6:	4b24      	ldr	r3, [pc, #144]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ec:	0e1b      	lsrs	r3, r3, #24
 80067ee:	f003 030f 	and.w	r3, r3, #15
 80067f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80067f4:	4b20      	ldr	r3, [pc, #128]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067fa:	0c1b      	lsrs	r3, r3, #16
 80067fc:	f003 0303 	and.w	r3, r3, #3
 8006800:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	019a      	lsls	r2, r3, #6
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	041b      	lsls	r3, r3, #16
 800680c:	431a      	orrs	r2, r3
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	061b      	lsls	r3, r3, #24
 8006812:	431a      	orrs	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	071b      	lsls	r3, r3, #28
 800681a:	4917      	ldr	r1, [pc, #92]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800681c:	4313      	orrs	r3, r2
 800681e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006822:	4b15      	ldr	r3, [pc, #84]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006828:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006830:	4911      	ldr	r1, [pc, #68]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006832:	4313      	orrs	r3, r2
 8006834:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006838:	4b0f      	ldr	r3, [pc, #60]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a0e      	ldr	r2, [pc, #56]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800683e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006844:	f7fd fe4e 	bl	80044e4 <HAL_GetTick>
 8006848:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800684a:	e008      	b.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800684c:	f7fd fe4a 	bl	80044e4 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b64      	cmp	r3, #100	; 0x64
 8006858:	d901      	bls.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e007      	b.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800685e:	4b06      	ldr	r3, [pc, #24]	; (8006878 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006866:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800686a:	d1ef      	bne.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3720      	adds	r7, #32
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	40023800 	.word	0x40023800

0800687c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e049      	b.n	8006922 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b00      	cmp	r3, #0
 8006898:	d106      	bne.n	80068a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7fd fa50 	bl	8003d48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	3304      	adds	r3, #4
 80068b8:	4619      	mov	r1, r3
 80068ba:	4610      	mov	r0, r2
 80068bc:	f000 fe5a 	bl	8007574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
	...

0800692c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800693a:	b2db      	uxtb	r3, r3
 800693c:	2b01      	cmp	r3, #1
 800693e:	d001      	beq.n	8006944 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e054      	b.n	80069ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2202      	movs	r2, #2
 8006948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68da      	ldr	r2, [r3, #12]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f042 0201 	orr.w	r2, r2, #1
 800695a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a26      	ldr	r2, [pc, #152]	; (80069fc <HAL_TIM_Base_Start_IT+0xd0>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d022      	beq.n	80069ac <HAL_TIM_Base_Start_IT+0x80>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800696e:	d01d      	beq.n	80069ac <HAL_TIM_Base_Start_IT+0x80>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a22      	ldr	r2, [pc, #136]	; (8006a00 <HAL_TIM_Base_Start_IT+0xd4>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d018      	beq.n	80069ac <HAL_TIM_Base_Start_IT+0x80>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a21      	ldr	r2, [pc, #132]	; (8006a04 <HAL_TIM_Base_Start_IT+0xd8>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d013      	beq.n	80069ac <HAL_TIM_Base_Start_IT+0x80>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a1f      	ldr	r2, [pc, #124]	; (8006a08 <HAL_TIM_Base_Start_IT+0xdc>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d00e      	beq.n	80069ac <HAL_TIM_Base_Start_IT+0x80>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a1e      	ldr	r2, [pc, #120]	; (8006a0c <HAL_TIM_Base_Start_IT+0xe0>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d009      	beq.n	80069ac <HAL_TIM_Base_Start_IT+0x80>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a1c      	ldr	r2, [pc, #112]	; (8006a10 <HAL_TIM_Base_Start_IT+0xe4>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d004      	beq.n	80069ac <HAL_TIM_Base_Start_IT+0x80>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a1b      	ldr	r2, [pc, #108]	; (8006a14 <HAL_TIM_Base_Start_IT+0xe8>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d115      	bne.n	80069d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689a      	ldr	r2, [r3, #8]
 80069b2:	4b19      	ldr	r3, [pc, #100]	; (8006a18 <HAL_TIM_Base_Start_IT+0xec>)
 80069b4:	4013      	ands	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2b06      	cmp	r3, #6
 80069bc:	d015      	beq.n	80069ea <HAL_TIM_Base_Start_IT+0xbe>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069c4:	d011      	beq.n	80069ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f042 0201 	orr.w	r2, r2, #1
 80069d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069d6:	e008      	b.n	80069ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f042 0201 	orr.w	r2, r2, #1
 80069e6:	601a      	str	r2, [r3, #0]
 80069e8:	e000      	b.n	80069ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	40010000 	.word	0x40010000
 8006a00:	40000400 	.word	0x40000400
 8006a04:	40000800 	.word	0x40000800
 8006a08:	40000c00 	.word	0x40000c00
 8006a0c:	40010400 	.word	0x40010400
 8006a10:	40014000 	.word	0x40014000
 8006a14:	40001800 	.word	0x40001800
 8006a18:	00010007 	.word	0x00010007

08006a1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e049      	b.n	8006ac2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d106      	bne.n	8006a48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7fd fae0 	bl	8004008 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2202      	movs	r2, #2
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3304      	adds	r3, #4
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4610      	mov	r0, r2
 8006a5c:	f000 fd8a 	bl	8007574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
	...

08006acc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d109      	bne.n	8006af0 <HAL_TIM_PWM_Start+0x24>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	bf14      	ite	ne
 8006ae8:	2301      	movne	r3, #1
 8006aea:	2300      	moveq	r3, #0
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	e03c      	b.n	8006b6a <HAL_TIM_PWM_Start+0x9e>
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d109      	bne.n	8006b0a <HAL_TIM_PWM_Start+0x3e>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	bf14      	ite	ne
 8006b02:	2301      	movne	r3, #1
 8006b04:	2300      	moveq	r3, #0
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	e02f      	b.n	8006b6a <HAL_TIM_PWM_Start+0x9e>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	d109      	bne.n	8006b24 <HAL_TIM_PWM_Start+0x58>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	bf14      	ite	ne
 8006b1c:	2301      	movne	r3, #1
 8006b1e:	2300      	moveq	r3, #0
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	e022      	b.n	8006b6a <HAL_TIM_PWM_Start+0x9e>
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2b0c      	cmp	r3, #12
 8006b28:	d109      	bne.n	8006b3e <HAL_TIM_PWM_Start+0x72>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	bf14      	ite	ne
 8006b36:	2301      	movne	r3, #1
 8006b38:	2300      	moveq	r3, #0
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	e015      	b.n	8006b6a <HAL_TIM_PWM_Start+0x9e>
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b10      	cmp	r3, #16
 8006b42:	d109      	bne.n	8006b58 <HAL_TIM_PWM_Start+0x8c>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	bf14      	ite	ne
 8006b50:	2301      	movne	r3, #1
 8006b52:	2300      	moveq	r3, #0
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	e008      	b.n	8006b6a <HAL_TIM_PWM_Start+0x9e>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	bf14      	ite	ne
 8006b64:	2301      	movne	r3, #1
 8006b66:	2300      	moveq	r3, #0
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e092      	b.n	8006c98 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d104      	bne.n	8006b82 <HAL_TIM_PWM_Start+0xb6>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b80:	e023      	b.n	8006bca <HAL_TIM_PWM_Start+0xfe>
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	2b04      	cmp	r3, #4
 8006b86:	d104      	bne.n	8006b92 <HAL_TIM_PWM_Start+0xc6>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b90:	e01b      	b.n	8006bca <HAL_TIM_PWM_Start+0xfe>
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b08      	cmp	r3, #8
 8006b96:	d104      	bne.n	8006ba2 <HAL_TIM_PWM_Start+0xd6>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2202      	movs	r2, #2
 8006b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ba0:	e013      	b.n	8006bca <HAL_TIM_PWM_Start+0xfe>
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b0c      	cmp	r3, #12
 8006ba6:	d104      	bne.n	8006bb2 <HAL_TIM_PWM_Start+0xe6>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2202      	movs	r2, #2
 8006bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bb0:	e00b      	b.n	8006bca <HAL_TIM_PWM_Start+0xfe>
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b10      	cmp	r3, #16
 8006bb6:	d104      	bne.n	8006bc2 <HAL_TIM_PWM_Start+0xf6>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006bc0:	e003      	b.n	8006bca <HAL_TIM_PWM_Start+0xfe>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2202      	movs	r2, #2
 8006bc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f001 f866 	bl	8007ca4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a30      	ldr	r2, [pc, #192]	; (8006ca0 <HAL_TIM_PWM_Start+0x1d4>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d004      	beq.n	8006bec <HAL_TIM_PWM_Start+0x120>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a2f      	ldr	r2, [pc, #188]	; (8006ca4 <HAL_TIM_PWM_Start+0x1d8>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d101      	bne.n	8006bf0 <HAL_TIM_PWM_Start+0x124>
 8006bec:	2301      	movs	r3, #1
 8006bee:	e000      	b.n	8006bf2 <HAL_TIM_PWM_Start+0x126>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d007      	beq.n	8006c06 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a25      	ldr	r2, [pc, #148]	; (8006ca0 <HAL_TIM_PWM_Start+0x1d4>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d022      	beq.n	8006c56 <HAL_TIM_PWM_Start+0x18a>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c18:	d01d      	beq.n	8006c56 <HAL_TIM_PWM_Start+0x18a>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a22      	ldr	r2, [pc, #136]	; (8006ca8 <HAL_TIM_PWM_Start+0x1dc>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d018      	beq.n	8006c56 <HAL_TIM_PWM_Start+0x18a>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a20      	ldr	r2, [pc, #128]	; (8006cac <HAL_TIM_PWM_Start+0x1e0>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d013      	beq.n	8006c56 <HAL_TIM_PWM_Start+0x18a>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a1f      	ldr	r2, [pc, #124]	; (8006cb0 <HAL_TIM_PWM_Start+0x1e4>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d00e      	beq.n	8006c56 <HAL_TIM_PWM_Start+0x18a>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a19      	ldr	r2, [pc, #100]	; (8006ca4 <HAL_TIM_PWM_Start+0x1d8>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d009      	beq.n	8006c56 <HAL_TIM_PWM_Start+0x18a>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a1b      	ldr	r2, [pc, #108]	; (8006cb4 <HAL_TIM_PWM_Start+0x1e8>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d004      	beq.n	8006c56 <HAL_TIM_PWM_Start+0x18a>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a19      	ldr	r2, [pc, #100]	; (8006cb8 <HAL_TIM_PWM_Start+0x1ec>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d115      	bne.n	8006c82 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	4b17      	ldr	r3, [pc, #92]	; (8006cbc <HAL_TIM_PWM_Start+0x1f0>)
 8006c5e:	4013      	ands	r3, r2
 8006c60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2b06      	cmp	r3, #6
 8006c66:	d015      	beq.n	8006c94 <HAL_TIM_PWM_Start+0x1c8>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c6e:	d011      	beq.n	8006c94 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f042 0201 	orr.w	r2, r2, #1
 8006c7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c80:	e008      	b.n	8006c94 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f042 0201 	orr.w	r2, r2, #1
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	e000      	b.n	8006c96 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	40010000 	.word	0x40010000
 8006ca4:	40010400 	.word	0x40010400
 8006ca8:	40000400 	.word	0x40000400
 8006cac:	40000800 	.word	0x40000800
 8006cb0:	40000c00 	.word	0x40000c00
 8006cb4:	40014000 	.word	0x40014000
 8006cb8:	40001800 	.word	0x40001800
 8006cbc:	00010007 	.word	0x00010007

08006cc0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e08f      	b.n	8006df4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d106      	bne.n	8006cee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f7fd f84d 	bl	8003d88 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6899      	ldr	r1, [r3, #8]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	4b3e      	ldr	r3, [pc, #248]	; (8006dfc <HAL_TIM_Encoder_Init+0x13c>)
 8006d02:	400b      	ands	r3, r1
 8006d04:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	3304      	adds	r3, #4
 8006d0e:	4619      	mov	r1, r3
 8006d10:	4610      	mov	r0, r2
 8006d12:	f000 fc2f 	bl	8007574 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
 8006d2c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	4b31      	ldr	r3, [pc, #196]	; (8006e00 <HAL_TIM_Encoder_Init+0x140>)
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	699b      	ldr	r3, [r3, #24]
 8006d48:	021b      	lsls	r3, r3, #8
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	4b2b      	ldr	r3, [pc, #172]	; (8006e04 <HAL_TIM_Encoder_Init+0x144>)
 8006d56:	4013      	ands	r3, r2
 8006d58:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	4b2a      	ldr	r3, [pc, #168]	; (8006e08 <HAL_TIM_Encoder_Init+0x148>)
 8006d5e:	4013      	ands	r3, r2
 8006d60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	68da      	ldr	r2, [r3, #12]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	69db      	ldr	r3, [r3, #28]
 8006d6a:	021b      	lsls	r3, r3, #8
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	011a      	lsls	r2, r3, #4
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	031b      	lsls	r3, r3, #12
 8006d80:	4313      	orrs	r3, r2
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006d8e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006d96:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	011b      	lsls	r3, r3, #4
 8006da2:	4313      	orrs	r3, r2
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3718      	adds	r7, #24
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	fffebff8 	.word	0xfffebff8
 8006e00:	fffffcfc 	.word	0xfffffcfc
 8006e04:	fffff3f3 	.word	0xfffff3f3
 8006e08:	ffff0f0f 	.word	0xffff0f0f

08006e0c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e1c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e24:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e2c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e34:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d110      	bne.n	8006e5e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d102      	bne.n	8006e48 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e42:	7b7b      	ldrb	r3, [r7, #13]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d001      	beq.n	8006e4c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e069      	b.n	8006f20 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2202      	movs	r2, #2
 8006e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e5c:	e031      	b.n	8006ec2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b04      	cmp	r3, #4
 8006e62:	d110      	bne.n	8006e86 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e64:	7bbb      	ldrb	r3, [r7, #14]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d102      	bne.n	8006e70 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e6a:	7b3b      	ldrb	r3, [r7, #12]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d001      	beq.n	8006e74 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e055      	b.n	8006f20 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2202      	movs	r2, #2
 8006e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2202      	movs	r2, #2
 8006e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e84:	e01d      	b.n	8006ec2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d108      	bne.n	8006e9e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e8c:	7bbb      	ldrb	r3, [r7, #14]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d105      	bne.n	8006e9e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e92:	7b7b      	ldrb	r3, [r7, #13]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d102      	bne.n	8006e9e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e98:	7b3b      	ldrb	r3, [r7, #12]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d001      	beq.n	8006ea2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e03e      	b.n	8006f20 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2202      	movs	r2, #2
 8006eae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2202      	movs	r2, #2
 8006eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d003      	beq.n	8006ed0 <HAL_TIM_Encoder_Start+0xc4>
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d008      	beq.n	8006ee0 <HAL_TIM_Encoder_Start+0xd4>
 8006ece:	e00f      	b.n	8006ef0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f000 fee3 	bl	8007ca4 <TIM_CCxChannelCmd>
      break;
 8006ede:	e016      	b.n	8006f0e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	2104      	movs	r1, #4
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 fedb 	bl	8007ca4 <TIM_CCxChannelCmd>
      break;
 8006eee:	e00e      	b.n	8006f0e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 fed3 	bl	8007ca4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2201      	movs	r2, #1
 8006f04:	2104      	movs	r1, #4
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 fecc 	bl	8007ca4 <TIM_CCxChannelCmd>
      break;
 8006f0c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f042 0201 	orr.w	r2, r2, #1
 8006f1c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	691b      	ldr	r3, [r3, #16]
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d122      	bne.n	8006f84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f003 0302 	and.w	r3, r3, #2
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d11b      	bne.n	8006f84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f06f 0202 	mvn.w	r2, #2
 8006f54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	f003 0303 	and.w	r3, r3, #3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d003      	beq.n	8006f72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 fae4 	bl	8007538 <HAL_TIM_IC_CaptureCallback>
 8006f70:	e005      	b.n	8006f7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 fad6 	bl	8007524 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 fae7 	bl	800754c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	f003 0304 	and.w	r3, r3, #4
 8006f8e:	2b04      	cmp	r3, #4
 8006f90:	d122      	bne.n	8006fd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	f003 0304 	and.w	r3, r3, #4
 8006f9c:	2b04      	cmp	r3, #4
 8006f9e:	d11b      	bne.n	8006fd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f06f 0204 	mvn.w	r2, #4
 8006fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2202      	movs	r2, #2
 8006fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d003      	beq.n	8006fc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 faba 	bl	8007538 <HAL_TIM_IC_CaptureCallback>
 8006fc4:	e005      	b.n	8006fd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 faac 	bl	8007524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fabd 	bl	800754c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	f003 0308 	and.w	r3, r3, #8
 8006fe2:	2b08      	cmp	r3, #8
 8006fe4:	d122      	bne.n	800702c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	f003 0308 	and.w	r3, r3, #8
 8006ff0:	2b08      	cmp	r3, #8
 8006ff2:	d11b      	bne.n	800702c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f06f 0208 	mvn.w	r2, #8
 8006ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2204      	movs	r2, #4
 8007002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	f003 0303 	and.w	r3, r3, #3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d003      	beq.n	800701a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fa90 	bl	8007538 <HAL_TIM_IC_CaptureCallback>
 8007018:	e005      	b.n	8007026 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fa82 	bl	8007524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fa93 	bl	800754c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	f003 0310 	and.w	r3, r3, #16
 8007036:	2b10      	cmp	r3, #16
 8007038:	d122      	bne.n	8007080 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	f003 0310 	and.w	r3, r3, #16
 8007044:	2b10      	cmp	r3, #16
 8007046:	d11b      	bne.n	8007080 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f06f 0210 	mvn.w	r2, #16
 8007050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2208      	movs	r2, #8
 8007056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	69db      	ldr	r3, [r3, #28]
 800705e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fa66 	bl	8007538 <HAL_TIM_IC_CaptureCallback>
 800706c:	e005      	b.n	800707a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fa58 	bl	8007524 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fa69 	bl	800754c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	2b01      	cmp	r3, #1
 800708c:	d10e      	bne.n	80070ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	f003 0301 	and.w	r3, r3, #1
 8007098:	2b01      	cmp	r3, #1
 800709a:	d107      	bne.n	80070ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f06f 0201 	mvn.w	r2, #1
 80070a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f7fc f84a 	bl	8003140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b6:	2b80      	cmp	r3, #128	; 0x80
 80070b8:	d10e      	bne.n	80070d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070c4:	2b80      	cmp	r3, #128	; 0x80
 80070c6:	d107      	bne.n	80070d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80070d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 ff22 	bl	8007f1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070e6:	d10e      	bne.n	8007106 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f2:	2b80      	cmp	r3, #128	; 0x80
 80070f4:	d107      	bne.n	8007106 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80070fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 ff15 	bl	8007f30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007110:	2b40      	cmp	r3, #64	; 0x40
 8007112:	d10e      	bne.n	8007132 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711e:	2b40      	cmp	r3, #64	; 0x40
 8007120:	d107      	bne.n	8007132 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800712a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fa17 	bl	8007560 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	f003 0320 	and.w	r3, r3, #32
 800713c:	2b20      	cmp	r3, #32
 800713e:	d10e      	bne.n	800715e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	f003 0320 	and.w	r3, r3, #32
 800714a:	2b20      	cmp	r3, #32
 800714c:	d107      	bne.n	800715e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f06f 0220 	mvn.w	r2, #32
 8007156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 fed5 	bl	8007f08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800715e:	bf00      	nop
 8007160:	3708      	adds	r7, #8
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
	...

08007168 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007174:	2300      	movs	r3, #0
 8007176:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800717e:	2b01      	cmp	r3, #1
 8007180:	d101      	bne.n	8007186 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007182:	2302      	movs	r3, #2
 8007184:	e0ff      	b.n	8007386 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b14      	cmp	r3, #20
 8007192:	f200 80f0 	bhi.w	8007376 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007196:	a201      	add	r2, pc, #4	; (adr r2, 800719c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719c:	080071f1 	.word	0x080071f1
 80071a0:	08007377 	.word	0x08007377
 80071a4:	08007377 	.word	0x08007377
 80071a8:	08007377 	.word	0x08007377
 80071ac:	08007231 	.word	0x08007231
 80071b0:	08007377 	.word	0x08007377
 80071b4:	08007377 	.word	0x08007377
 80071b8:	08007377 	.word	0x08007377
 80071bc:	08007273 	.word	0x08007273
 80071c0:	08007377 	.word	0x08007377
 80071c4:	08007377 	.word	0x08007377
 80071c8:	08007377 	.word	0x08007377
 80071cc:	080072b3 	.word	0x080072b3
 80071d0:	08007377 	.word	0x08007377
 80071d4:	08007377 	.word	0x08007377
 80071d8:	08007377 	.word	0x08007377
 80071dc:	080072f5 	.word	0x080072f5
 80071e0:	08007377 	.word	0x08007377
 80071e4:	08007377 	.word	0x08007377
 80071e8:	08007377 	.word	0x08007377
 80071ec:	08007335 	.word	0x08007335
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68b9      	ldr	r1, [r7, #8]
 80071f6:	4618      	mov	r0, r3
 80071f8:	f000 fa5c 	bl	80076b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	699a      	ldr	r2, [r3, #24]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f042 0208 	orr.w	r2, r2, #8
 800720a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	699a      	ldr	r2, [r3, #24]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f022 0204 	bic.w	r2, r2, #4
 800721a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	6999      	ldr	r1, [r3, #24]
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	691a      	ldr	r2, [r3, #16]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	430a      	orrs	r2, r1
 800722c:	619a      	str	r2, [r3, #24]
      break;
 800722e:	e0a5      	b.n	800737c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68b9      	ldr	r1, [r7, #8]
 8007236:	4618      	mov	r0, r3
 8007238:	f000 faae 	bl	8007798 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	699a      	ldr	r2, [r3, #24]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800724a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	699a      	ldr	r2, [r3, #24]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800725a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6999      	ldr	r1, [r3, #24]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	021a      	lsls	r2, r3, #8
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	430a      	orrs	r2, r1
 800726e:	619a      	str	r2, [r3, #24]
      break;
 8007270:	e084      	b.n	800737c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68b9      	ldr	r1, [r7, #8]
 8007278:	4618      	mov	r0, r3
 800727a:	f000 fb05 	bl	8007888 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	69da      	ldr	r2, [r3, #28]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f042 0208 	orr.w	r2, r2, #8
 800728c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	69da      	ldr	r2, [r3, #28]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f022 0204 	bic.w	r2, r2, #4
 800729c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	69d9      	ldr	r1, [r3, #28]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	691a      	ldr	r2, [r3, #16]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	430a      	orrs	r2, r1
 80072ae:	61da      	str	r2, [r3, #28]
      break;
 80072b0:	e064      	b.n	800737c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68b9      	ldr	r1, [r7, #8]
 80072b8:	4618      	mov	r0, r3
 80072ba:	f000 fb5b 	bl	8007974 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	69da      	ldr	r2, [r3, #28]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	69da      	ldr	r2, [r3, #28]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	69d9      	ldr	r1, [r3, #28]
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	021a      	lsls	r2, r3, #8
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	430a      	orrs	r2, r1
 80072f0:	61da      	str	r2, [r3, #28]
      break;
 80072f2:	e043      	b.n	800737c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68b9      	ldr	r1, [r7, #8]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f000 fb92 	bl	8007a24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f042 0208 	orr.w	r2, r2, #8
 800730e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 0204 	bic.w	r2, r2, #4
 800731e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	691a      	ldr	r2, [r3, #16]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	430a      	orrs	r2, r1
 8007330:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007332:	e023      	b.n	800737c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68b9      	ldr	r1, [r7, #8]
 800733a:	4618      	mov	r0, r3
 800733c:	f000 fbc4 	bl	8007ac8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800734e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800735e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	021a      	lsls	r2, r3, #8
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007374:	e002      	b.n	800737c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	75fb      	strb	r3, [r7, #23]
      break;
 800737a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007384:	7dfb      	ldrb	r3, [r7, #23]
}
 8007386:	4618      	mov	r0, r3
 8007388:	3718      	adds	r7, #24
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop

08007390 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d101      	bne.n	80073ac <HAL_TIM_ConfigClockSource+0x1c>
 80073a8:	2302      	movs	r3, #2
 80073aa:	e0b4      	b.n	8007516 <HAL_TIM_ConfigClockSource+0x186>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2202      	movs	r2, #2
 80073b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	4b56      	ldr	r3, [pc, #344]	; (8007520 <HAL_TIM_ConfigClockSource+0x190>)
 80073c8:	4013      	ands	r3, r2
 80073ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073e4:	d03e      	beq.n	8007464 <HAL_TIM_ConfigClockSource+0xd4>
 80073e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073ea:	f200 8087 	bhi.w	80074fc <HAL_TIM_ConfigClockSource+0x16c>
 80073ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073f2:	f000 8086 	beq.w	8007502 <HAL_TIM_ConfigClockSource+0x172>
 80073f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073fa:	d87f      	bhi.n	80074fc <HAL_TIM_ConfigClockSource+0x16c>
 80073fc:	2b70      	cmp	r3, #112	; 0x70
 80073fe:	d01a      	beq.n	8007436 <HAL_TIM_ConfigClockSource+0xa6>
 8007400:	2b70      	cmp	r3, #112	; 0x70
 8007402:	d87b      	bhi.n	80074fc <HAL_TIM_ConfigClockSource+0x16c>
 8007404:	2b60      	cmp	r3, #96	; 0x60
 8007406:	d050      	beq.n	80074aa <HAL_TIM_ConfigClockSource+0x11a>
 8007408:	2b60      	cmp	r3, #96	; 0x60
 800740a:	d877      	bhi.n	80074fc <HAL_TIM_ConfigClockSource+0x16c>
 800740c:	2b50      	cmp	r3, #80	; 0x50
 800740e:	d03c      	beq.n	800748a <HAL_TIM_ConfigClockSource+0xfa>
 8007410:	2b50      	cmp	r3, #80	; 0x50
 8007412:	d873      	bhi.n	80074fc <HAL_TIM_ConfigClockSource+0x16c>
 8007414:	2b40      	cmp	r3, #64	; 0x40
 8007416:	d058      	beq.n	80074ca <HAL_TIM_ConfigClockSource+0x13a>
 8007418:	2b40      	cmp	r3, #64	; 0x40
 800741a:	d86f      	bhi.n	80074fc <HAL_TIM_ConfigClockSource+0x16c>
 800741c:	2b30      	cmp	r3, #48	; 0x30
 800741e:	d064      	beq.n	80074ea <HAL_TIM_ConfigClockSource+0x15a>
 8007420:	2b30      	cmp	r3, #48	; 0x30
 8007422:	d86b      	bhi.n	80074fc <HAL_TIM_ConfigClockSource+0x16c>
 8007424:	2b20      	cmp	r3, #32
 8007426:	d060      	beq.n	80074ea <HAL_TIM_ConfigClockSource+0x15a>
 8007428:	2b20      	cmp	r3, #32
 800742a:	d867      	bhi.n	80074fc <HAL_TIM_ConfigClockSource+0x16c>
 800742c:	2b00      	cmp	r3, #0
 800742e:	d05c      	beq.n	80074ea <HAL_TIM_ConfigClockSource+0x15a>
 8007430:	2b10      	cmp	r3, #16
 8007432:	d05a      	beq.n	80074ea <HAL_TIM_ConfigClockSource+0x15a>
 8007434:	e062      	b.n	80074fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007446:	f000 fc0d 	bl	8007c64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007458:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	609a      	str	r2, [r3, #8]
      break;
 8007462:	e04f      	b.n	8007504 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007474:	f000 fbf6 	bl	8007c64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689a      	ldr	r2, [r3, #8]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007486:	609a      	str	r2, [r3, #8]
      break;
 8007488:	e03c      	b.n	8007504 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007496:	461a      	mov	r2, r3
 8007498:	f000 fb6a 	bl	8007b70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2150      	movs	r1, #80	; 0x50
 80074a2:	4618      	mov	r0, r3
 80074a4:	f000 fbc3 	bl	8007c2e <TIM_ITRx_SetConfig>
      break;
 80074a8:	e02c      	b.n	8007504 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074b6:	461a      	mov	r2, r3
 80074b8:	f000 fb89 	bl	8007bce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2160      	movs	r1, #96	; 0x60
 80074c2:	4618      	mov	r0, r3
 80074c4:	f000 fbb3 	bl	8007c2e <TIM_ITRx_SetConfig>
      break;
 80074c8:	e01c      	b.n	8007504 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074d6:	461a      	mov	r2, r3
 80074d8:	f000 fb4a 	bl	8007b70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2140      	movs	r1, #64	; 0x40
 80074e2:	4618      	mov	r0, r3
 80074e4:	f000 fba3 	bl	8007c2e <TIM_ITRx_SetConfig>
      break;
 80074e8:	e00c      	b.n	8007504 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4619      	mov	r1, r3
 80074f4:	4610      	mov	r0, r2
 80074f6:	f000 fb9a 	bl	8007c2e <TIM_ITRx_SetConfig>
      break;
 80074fa:	e003      	b.n	8007504 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007500:	e000      	b.n	8007504 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007502:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007514:	7bfb      	ldrb	r3, [r7, #15]
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	fffeff88 	.word	0xfffeff88

08007524 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007554:	bf00      	nop
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007568:	bf00      	nop
 800756a:	370c      	adds	r7, #12
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a40      	ldr	r2, [pc, #256]	; (8007688 <TIM_Base_SetConfig+0x114>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d013      	beq.n	80075b4 <TIM_Base_SetConfig+0x40>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007592:	d00f      	beq.n	80075b4 <TIM_Base_SetConfig+0x40>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a3d      	ldr	r2, [pc, #244]	; (800768c <TIM_Base_SetConfig+0x118>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d00b      	beq.n	80075b4 <TIM_Base_SetConfig+0x40>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a3c      	ldr	r2, [pc, #240]	; (8007690 <TIM_Base_SetConfig+0x11c>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d007      	beq.n	80075b4 <TIM_Base_SetConfig+0x40>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a3b      	ldr	r2, [pc, #236]	; (8007694 <TIM_Base_SetConfig+0x120>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d003      	beq.n	80075b4 <TIM_Base_SetConfig+0x40>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	4a3a      	ldr	r2, [pc, #232]	; (8007698 <TIM_Base_SetConfig+0x124>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d108      	bne.n	80075c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a2f      	ldr	r2, [pc, #188]	; (8007688 <TIM_Base_SetConfig+0x114>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d02b      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075d4:	d027      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a2c      	ldr	r2, [pc, #176]	; (800768c <TIM_Base_SetConfig+0x118>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d023      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a2b      	ldr	r2, [pc, #172]	; (8007690 <TIM_Base_SetConfig+0x11c>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d01f      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a2a      	ldr	r2, [pc, #168]	; (8007694 <TIM_Base_SetConfig+0x120>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d01b      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a29      	ldr	r2, [pc, #164]	; (8007698 <TIM_Base_SetConfig+0x124>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d017      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a28      	ldr	r2, [pc, #160]	; (800769c <TIM_Base_SetConfig+0x128>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d013      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a27      	ldr	r2, [pc, #156]	; (80076a0 <TIM_Base_SetConfig+0x12c>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d00f      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4a26      	ldr	r2, [pc, #152]	; (80076a4 <TIM_Base_SetConfig+0x130>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d00b      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a25      	ldr	r2, [pc, #148]	; (80076a8 <TIM_Base_SetConfig+0x134>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d007      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a24      	ldr	r2, [pc, #144]	; (80076ac <TIM_Base_SetConfig+0x138>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d003      	beq.n	8007626 <TIM_Base_SetConfig+0xb2>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	4a23      	ldr	r2, [pc, #140]	; (80076b0 <TIM_Base_SetConfig+0x13c>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d108      	bne.n	8007638 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800762c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	4313      	orrs	r3, r2
 8007636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	4313      	orrs	r3, r2
 8007644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	689a      	ldr	r2, [r3, #8]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4a0a      	ldr	r2, [pc, #40]	; (8007688 <TIM_Base_SetConfig+0x114>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d003      	beq.n	800766c <TIM_Base_SetConfig+0xf8>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4a0c      	ldr	r2, [pc, #48]	; (8007698 <TIM_Base_SetConfig+0x124>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d103      	bne.n	8007674 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	691a      	ldr	r2, [r3, #16]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2201      	movs	r2, #1
 8007678:	615a      	str	r2, [r3, #20]
}
 800767a:	bf00      	nop
 800767c:	3714      	adds	r7, #20
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	40010000 	.word	0x40010000
 800768c:	40000400 	.word	0x40000400
 8007690:	40000800 	.word	0x40000800
 8007694:	40000c00 	.word	0x40000c00
 8007698:	40010400 	.word	0x40010400
 800769c:	40014000 	.word	0x40014000
 80076a0:	40014400 	.word	0x40014400
 80076a4:	40014800 	.word	0x40014800
 80076a8:	40001800 	.word	0x40001800
 80076ac:	40001c00 	.word	0x40001c00
 80076b0:	40002000 	.word	0x40002000

080076b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a1b      	ldr	r3, [r3, #32]
 80076c2:	f023 0201 	bic.w	r2, r3, #1
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a1b      	ldr	r3, [r3, #32]
 80076ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	4b2b      	ldr	r3, [pc, #172]	; (800778c <TIM_OC1_SetConfig+0xd8>)
 80076e0:	4013      	ands	r3, r2
 80076e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f023 0303 	bic.w	r3, r3, #3
 80076ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	f023 0302 	bic.w	r3, r3, #2
 80076fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	4313      	orrs	r3, r2
 8007706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a21      	ldr	r2, [pc, #132]	; (8007790 <TIM_OC1_SetConfig+0xdc>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d003      	beq.n	8007718 <TIM_OC1_SetConfig+0x64>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a20      	ldr	r2, [pc, #128]	; (8007794 <TIM_OC1_SetConfig+0xe0>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d10c      	bne.n	8007732 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	f023 0308 	bic.w	r3, r3, #8
 800771e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	697a      	ldr	r2, [r7, #20]
 8007726:	4313      	orrs	r3, r2
 8007728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	f023 0304 	bic.w	r3, r3, #4
 8007730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a16      	ldr	r2, [pc, #88]	; (8007790 <TIM_OC1_SetConfig+0xdc>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d003      	beq.n	8007742 <TIM_OC1_SetConfig+0x8e>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a15      	ldr	r2, [pc, #84]	; (8007794 <TIM_OC1_SetConfig+0xe0>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d111      	bne.n	8007766 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	4313      	orrs	r3, r2
 800775a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	699b      	ldr	r3, [r3, #24]
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	4313      	orrs	r3, r2
 8007764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	685a      	ldr	r2, [r3, #4]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	697a      	ldr	r2, [r7, #20]
 800777e:	621a      	str	r2, [r3, #32]
}
 8007780:	bf00      	nop
 8007782:	371c      	adds	r7, #28
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr
 800778c:	fffeff8f 	.word	0xfffeff8f
 8007790:	40010000 	.word	0x40010000
 8007794:	40010400 	.word	0x40010400

08007798 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007798:	b480      	push	{r7}
 800779a:	b087      	sub	sp, #28
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	f023 0210 	bic.w	r2, r3, #16
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	4b2e      	ldr	r3, [pc, #184]	; (800787c <TIM_OC2_SetConfig+0xe4>)
 80077c4:	4013      	ands	r3, r2
 80077c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	021b      	lsls	r3, r3, #8
 80077d6:	68fa      	ldr	r2, [r7, #12]
 80077d8:	4313      	orrs	r3, r2
 80077da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	f023 0320 	bic.w	r3, r3, #32
 80077e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	011b      	lsls	r3, r3, #4
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a23      	ldr	r2, [pc, #140]	; (8007880 <TIM_OC2_SetConfig+0xe8>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d003      	beq.n	8007800 <TIM_OC2_SetConfig+0x68>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a22      	ldr	r2, [pc, #136]	; (8007884 <TIM_OC2_SetConfig+0xec>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d10d      	bne.n	800781c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007806:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	011b      	lsls	r3, r3, #4
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	4313      	orrs	r3, r2
 8007812:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800781a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a18      	ldr	r2, [pc, #96]	; (8007880 <TIM_OC2_SetConfig+0xe8>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d003      	beq.n	800782c <TIM_OC2_SetConfig+0x94>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a17      	ldr	r2, [pc, #92]	; (8007884 <TIM_OC2_SetConfig+0xec>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d113      	bne.n	8007854 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007832:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800783a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	695b      	ldr	r3, [r3, #20]
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	693a      	ldr	r2, [r7, #16]
 8007844:	4313      	orrs	r3, r2
 8007846:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	4313      	orrs	r3, r2
 8007852:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	685a      	ldr	r2, [r3, #4]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	621a      	str	r2, [r3, #32]
}
 800786e:	bf00      	nop
 8007870:	371c      	adds	r7, #28
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	feff8fff 	.word	0xfeff8fff
 8007880:	40010000 	.word	0x40010000
 8007884:	40010400 	.word	0x40010400

08007888 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007888:	b480      	push	{r7}
 800788a:	b087      	sub	sp, #28
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a1b      	ldr	r3, [r3, #32]
 8007896:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	4b2d      	ldr	r3, [pc, #180]	; (8007968 <TIM_OC3_SetConfig+0xe0>)
 80078b4:	4013      	ands	r3, r2
 80078b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f023 0303 	bic.w	r3, r3, #3
 80078be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	021b      	lsls	r3, r3, #8
 80078d8:	697a      	ldr	r2, [r7, #20]
 80078da:	4313      	orrs	r3, r2
 80078dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a22      	ldr	r2, [pc, #136]	; (800796c <TIM_OC3_SetConfig+0xe4>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d003      	beq.n	80078ee <TIM_OC3_SetConfig+0x66>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a21      	ldr	r2, [pc, #132]	; (8007970 <TIM_OC3_SetConfig+0xe8>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d10d      	bne.n	800790a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	021b      	lsls	r3, r3, #8
 80078fc:	697a      	ldr	r2, [r7, #20]
 80078fe:	4313      	orrs	r3, r2
 8007900:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007908:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a17      	ldr	r2, [pc, #92]	; (800796c <TIM_OC3_SetConfig+0xe4>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d003      	beq.n	800791a <TIM_OC3_SetConfig+0x92>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a16      	ldr	r2, [pc, #88]	; (8007970 <TIM_OC3_SetConfig+0xe8>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d113      	bne.n	8007942 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	695b      	ldr	r3, [r3, #20]
 800792e:	011b      	lsls	r3, r3, #4
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	4313      	orrs	r3, r2
 8007934:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	011b      	lsls	r3, r3, #4
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	4313      	orrs	r3, r2
 8007940:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	685a      	ldr	r2, [r3, #4]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	697a      	ldr	r2, [r7, #20]
 800795a:	621a      	str	r2, [r3, #32]
}
 800795c:	bf00      	nop
 800795e:	371c      	adds	r7, #28
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr
 8007968:	fffeff8f 	.word	0xfffeff8f
 800796c:	40010000 	.word	0x40010000
 8007970:	40010400 	.word	0x40010400

08007974 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007974:	b480      	push	{r7}
 8007976:	b087      	sub	sp, #28
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	69db      	ldr	r3, [r3, #28]
 800799a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	4b1e      	ldr	r3, [pc, #120]	; (8007a18 <TIM_OC4_SetConfig+0xa4>)
 80079a0:	4013      	ands	r3, r2
 80079a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	021b      	lsls	r3, r3, #8
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	031b      	lsls	r3, r3, #12
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a13      	ldr	r2, [pc, #76]	; (8007a1c <TIM_OC4_SetConfig+0xa8>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d003      	beq.n	80079dc <TIM_OC4_SetConfig+0x68>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4a12      	ldr	r2, [pc, #72]	; (8007a20 <TIM_OC4_SetConfig+0xac>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d109      	bne.n	80079f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	695b      	ldr	r3, [r3, #20]
 80079e8:	019b      	lsls	r3, r3, #6
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	697a      	ldr	r2, [r7, #20]
 80079f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	621a      	str	r2, [r3, #32]
}
 8007a0a:	bf00      	nop
 8007a0c:	371c      	adds	r7, #28
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr
 8007a16:	bf00      	nop
 8007a18:	feff8fff 	.word	0xfeff8fff
 8007a1c:	40010000 	.word	0x40010000
 8007a20:	40010400 	.word	0x40010400

08007a24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b087      	sub	sp, #28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	4b1b      	ldr	r3, [pc, #108]	; (8007abc <TIM_OC5_SetConfig+0x98>)
 8007a50:	4013      	ands	r3, r2
 8007a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007a64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	041b      	lsls	r3, r3, #16
 8007a6c:	693a      	ldr	r2, [r7, #16]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a12      	ldr	r2, [pc, #72]	; (8007ac0 <TIM_OC5_SetConfig+0x9c>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d003      	beq.n	8007a82 <TIM_OC5_SetConfig+0x5e>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a11      	ldr	r2, [pc, #68]	; (8007ac4 <TIM_OC5_SetConfig+0xa0>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d109      	bne.n	8007a96 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	021b      	lsls	r3, r3, #8
 8007a90:	697a      	ldr	r2, [r7, #20]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	697a      	ldr	r2, [r7, #20]
 8007a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	685a      	ldr	r2, [r3, #4]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	693a      	ldr	r2, [r7, #16]
 8007aae:	621a      	str	r2, [r3, #32]
}
 8007ab0:	bf00      	nop
 8007ab2:	371c      	adds	r7, #28
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	fffeff8f 	.word	0xfffeff8f
 8007ac0:	40010000 	.word	0x40010000
 8007ac4:	40010400 	.word	0x40010400

08007ac8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b087      	sub	sp, #28
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	4b1c      	ldr	r3, [pc, #112]	; (8007b64 <TIM_OC6_SetConfig+0x9c>)
 8007af4:	4013      	ands	r3, r2
 8007af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	021b      	lsls	r3, r3, #8
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	051b      	lsls	r3, r3, #20
 8007b12:	693a      	ldr	r2, [r7, #16]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a13      	ldr	r2, [pc, #76]	; (8007b68 <TIM_OC6_SetConfig+0xa0>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d003      	beq.n	8007b28 <TIM_OC6_SetConfig+0x60>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a12      	ldr	r2, [pc, #72]	; (8007b6c <TIM_OC6_SetConfig+0xa4>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d109      	bne.n	8007b3c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	029b      	lsls	r3, r3, #10
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	621a      	str	r2, [r3, #32]
}
 8007b56:	bf00      	nop
 8007b58:	371c      	adds	r7, #28
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	feff8fff 	.word	0xfeff8fff
 8007b68:	40010000 	.word	0x40010000
 8007b6c:	40010400 	.word	0x40010400

08007b70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b087      	sub	sp, #28
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6a1b      	ldr	r3, [r3, #32]
 8007b80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	f023 0201 	bic.w	r2, r3, #1
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	699b      	ldr	r3, [r3, #24]
 8007b92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	011b      	lsls	r3, r3, #4
 8007ba0:	693a      	ldr	r2, [r7, #16]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	f023 030a 	bic.w	r3, r3, #10
 8007bac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	621a      	str	r2, [r3, #32]
}
 8007bc2:	bf00      	nop
 8007bc4:	371c      	adds	r7, #28
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b087      	sub	sp, #28
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	60f8      	str	r0, [r7, #12]
 8007bd6:	60b9      	str	r1, [r7, #8]
 8007bd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	f023 0210 	bic.w	r2, r3, #16
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6a1b      	ldr	r3, [r3, #32]
 8007bf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007bf8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	031b      	lsls	r3, r3, #12
 8007bfe:	697a      	ldr	r2, [r7, #20]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	011b      	lsls	r3, r3, #4
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	621a      	str	r2, [r3, #32]
}
 8007c22:	bf00      	nop
 8007c24:	371c      	adds	r7, #28
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b085      	sub	sp, #20
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c46:	683a      	ldr	r2, [r7, #0]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	f043 0307 	orr.w	r3, r3, #7
 8007c50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	609a      	str	r2, [r3, #8]
}
 8007c58:	bf00      	nop
 8007c5a:	3714      	adds	r7, #20
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
 8007c70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	021a      	lsls	r2, r3, #8
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	431a      	orrs	r2, r3
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	697a      	ldr	r2, [r7, #20]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	609a      	str	r2, [r3, #8]
}
 8007c98:	bf00      	nop
 8007c9a:	371c      	adds	r7, #28
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b087      	sub	sp, #28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	f003 031f 	and.w	r3, r3, #31
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	6a1a      	ldr	r2, [r3, #32]
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	43db      	mvns	r3, r3
 8007cc6:	401a      	ands	r2, r3
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6a1a      	ldr	r2, [r3, #32]
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	f003 031f 	and.w	r3, r3, #31
 8007cd6:	6879      	ldr	r1, [r7, #4]
 8007cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8007cdc:	431a      	orrs	r2, r3
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	621a      	str	r2, [r3, #32]
}
 8007ce2:	bf00      	nop
 8007ce4:	371c      	adds	r7, #28
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
	...

08007cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d101      	bne.n	8007d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d04:	2302      	movs	r3, #2
 8007d06:	e06d      	b.n	8007de4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2202      	movs	r2, #2
 8007d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a30      	ldr	r2, [pc, #192]	; (8007df0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d004      	beq.n	8007d3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a2f      	ldr	r2, [pc, #188]	; (8007df4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d108      	bne.n	8007d4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007d42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a20      	ldr	r2, [pc, #128]	; (8007df0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d022      	beq.n	8007db8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d7a:	d01d      	beq.n	8007db8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a1d      	ldr	r2, [pc, #116]	; (8007df8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d018      	beq.n	8007db8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a1c      	ldr	r2, [pc, #112]	; (8007dfc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d013      	beq.n	8007db8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a1a      	ldr	r2, [pc, #104]	; (8007e00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d00e      	beq.n	8007db8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a15      	ldr	r2, [pc, #84]	; (8007df4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d009      	beq.n	8007db8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a16      	ldr	r2, [pc, #88]	; (8007e04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d004      	beq.n	8007db8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a15      	ldr	r2, [pc, #84]	; (8007e08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d10c      	bne.n	8007dd2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68ba      	ldr	r2, [r7, #8]
 8007dd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007de2:	2300      	movs	r3, #0
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3714      	adds	r7, #20
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr
 8007df0:	40010000 	.word	0x40010000
 8007df4:	40010400 	.word	0x40010400
 8007df8:	40000400 	.word	0x40000400
 8007dfc:	40000800 	.word	0x40000800
 8007e00:	40000c00 	.word	0x40000c00
 8007e04:	40014000 	.word	0x40014000
 8007e08:	40001800 	.word	0x40001800

08007e0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e16:	2300      	movs	r3, #0
 8007e18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d101      	bne.n	8007e28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e24:	2302      	movs	r3, #2
 8007e26:	e065      	b.n	8007ef4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2201      	movs	r2, #1
 8007e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	695b      	ldr	r3, [r3, #20]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e8e:	4313      	orrs	r3, r2
 8007e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	699b      	ldr	r3, [r3, #24]
 8007e9c:	041b      	lsls	r3, r3, #16
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a16      	ldr	r2, [pc, #88]	; (8007f00 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d004      	beq.n	8007eb6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a14      	ldr	r2, [pc, #80]	; (8007f04 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d115      	bne.n	8007ee2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec0:	051b      	lsls	r3, r3, #20
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	69db      	ldr	r3, [r3, #28]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	40010000 	.word	0x40010000
 8007f04:	40010400 	.word	0x40010400

08007f08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e040      	b.n	8007fd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d106      	bne.n	8007f6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7fc f8fa 	bl	8004160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2224      	movs	r2, #36	; 0x24
 8007f70:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f022 0201 	bic.w	r2, r2, #1
 8007f80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 fcae 	bl	80088e4 <UART_SetConfig>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d101      	bne.n	8007f92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e022      	b.n	8007fd8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d002      	beq.n	8007fa0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 ff06 	bl	8008dac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	685a      	ldr	r2, [r3, #4]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	689a      	ldr	r2, [r3, #8]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f042 0201 	orr.w	r2, r2, #1
 8007fce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 ff8d 	bl	8008ef0 <UART_CheckIdleState>
 8007fd6:	4603      	mov	r3, r0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b08a      	sub	sp, #40	; 0x28
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	4613      	mov	r3, r2
 8007fec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ff2:	2b20      	cmp	r3, #32
 8007ff4:	d165      	bne.n	80080c2 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d002      	beq.n	8008002 <HAL_UART_Transmit_DMA+0x22>
 8007ffc:	88fb      	ldrh	r3, [r7, #6]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d101      	bne.n	8008006 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	e05e      	b.n	80080c4 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	88fa      	ldrh	r2, [r7, #6]
 8008010:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	88fa      	ldrh	r2, [r7, #6]
 8008018:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2221      	movs	r2, #33	; 0x21
 8008028:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800802e:	2b00      	cmp	r3, #0
 8008030:	d027      	beq.n	8008082 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008036:	4a25      	ldr	r2, [pc, #148]	; (80080cc <HAL_UART_Transmit_DMA+0xec>)
 8008038:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803e:	4a24      	ldr	r2, [pc, #144]	; (80080d0 <HAL_UART_Transmit_DMA+0xf0>)
 8008040:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008046:	4a23      	ldr	r2, [pc, #140]	; (80080d4 <HAL_UART_Transmit_DMA+0xf4>)
 8008048:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800804e:	2200      	movs	r2, #0
 8008050:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800805a:	4619      	mov	r1, r3
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	3328      	adds	r3, #40	; 0x28
 8008062:	461a      	mov	r2, r3
 8008064:	88fb      	ldrh	r3, [r7, #6]
 8008066:	f7fc fbfd 	bl	8004864 <HAL_DMA_Start_IT>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d008      	beq.n	8008082 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2210      	movs	r2, #16
 8008074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2220      	movs	r2, #32
 800807c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800807e:	2301      	movs	r3, #1
 8008080:	e020      	b.n	80080c4 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2240      	movs	r2, #64	; 0x40
 8008088:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3308      	adds	r3, #8
 8008090:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	e853 3f00 	ldrex	r3, [r3]
 8008098:	613b      	str	r3, [r7, #16]
   return(result);
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a0:	627b      	str	r3, [r7, #36]	; 0x24
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3308      	adds	r3, #8
 80080a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080aa:	623a      	str	r2, [r7, #32]
 80080ac:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ae:	69f9      	ldr	r1, [r7, #28]
 80080b0:	6a3a      	ldr	r2, [r7, #32]
 80080b2:	e841 2300 	strex	r3, r2, [r1]
 80080b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1e5      	bne.n	800808a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80080be:	2300      	movs	r3, #0
 80080c0:	e000      	b.n	80080c4 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80080c2:	2302      	movs	r3, #2
  }
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3728      	adds	r7, #40	; 0x28
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	0800936d 	.word	0x0800936d
 80080d0:	08009403 	.word	0x08009403
 80080d4:	08009585 	.word	0x08009585

080080d8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b08a      	sub	sp, #40	; 0x28
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	4613      	mov	r3, r2
 80080e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080ec:	2b20      	cmp	r3, #32
 80080ee:	d132      	bne.n	8008156 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d002      	beq.n	80080fc <HAL_UART_Receive_DMA+0x24>
 80080f6:	88fb      	ldrh	r3, [r7, #6]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d101      	bne.n	8008100 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e02b      	b.n	8008158 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008110:	2b00      	cmp	r3, #0
 8008112:	d018      	beq.n	8008146 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	e853 3f00 	ldrex	r3, [r3]
 8008120:	613b      	str	r3, [r7, #16]
   return(result);
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008128:	627b      	str	r3, [r7, #36]	; 0x24
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008132:	623b      	str	r3, [r7, #32]
 8008134:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008136:	69f9      	ldr	r1, [r7, #28]
 8008138:	6a3a      	ldr	r2, [r7, #32]
 800813a:	e841 2300 	strex	r3, r2, [r1]
 800813e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1e6      	bne.n	8008114 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008146:	88fb      	ldrh	r3, [r7, #6]
 8008148:	461a      	mov	r2, r3
 800814a:	68b9      	ldr	r1, [r7, #8]
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f000 ffe3 	bl	8009118 <UART_Start_Receive_DMA>
 8008152:	4603      	mov	r3, r0
 8008154:	e000      	b.n	8008158 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8008156:	2302      	movs	r3, #2
  }
}
 8008158:	4618      	mov	r0, r3
 800815a:	3728      	adds	r7, #40	; 0x28
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b090      	sub	sp, #64	; 0x40
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800816c:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008174:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008180:	2b80      	cmp	r3, #128	; 0x80
 8008182:	d139      	bne.n	80081f8 <HAL_UART_DMAStop+0x98>
 8008184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008186:	2b21      	cmp	r3, #33	; 0x21
 8008188:	d136      	bne.n	80081f8 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	3308      	adds	r3, #8
 8008190:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008192:	6a3b      	ldr	r3, [r7, #32]
 8008194:	e853 3f00 	ldrex	r3, [r3]
 8008198:	61fb      	str	r3, [r7, #28]
   return(result);
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081a0:	637b      	str	r3, [r7, #52]	; 0x34
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	3308      	adds	r3, #8
 80081a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081aa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081b2:	e841 2300 	strex	r3, r2, [r1]
 80081b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1e5      	bne.n	800818a <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d015      	beq.n	80081f2 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7fc fbaa 	bl	8004924 <HAL_DMA_Abort>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00d      	beq.n	80081f2 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081da:	4618      	mov	r0, r3
 80081dc:	f7fc fdbe 	bl	8004d5c <HAL_DMA_GetError>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b20      	cmp	r3, #32
 80081e4:	d105      	bne.n	80081f2 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2210      	movs	r2, #16
 80081ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80081ee:	2303      	movs	r3, #3
 80081f0:	e044      	b.n	800827c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f001 f830 	bl	8009258 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008202:	2b40      	cmp	r3, #64	; 0x40
 8008204:	d139      	bne.n	800827a <HAL_UART_DMAStop+0x11a>
 8008206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008208:	2b22      	cmp	r3, #34	; 0x22
 800820a:	d136      	bne.n	800827a <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	3308      	adds	r3, #8
 8008212:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	e853 3f00 	ldrex	r3, [r3]
 800821a:	60bb      	str	r3, [r7, #8]
   return(result);
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008222:	633b      	str	r3, [r7, #48]	; 0x30
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	3308      	adds	r3, #8
 800822a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800822c:	61ba      	str	r2, [r7, #24]
 800822e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008230:	6979      	ldr	r1, [r7, #20]
 8008232:	69ba      	ldr	r2, [r7, #24]
 8008234:	e841 2300 	strex	r3, r2, [r1]
 8008238:	613b      	str	r3, [r7, #16]
   return(result);
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d1e5      	bne.n	800820c <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008244:	2b00      	cmp	r3, #0
 8008246:	d015      	beq.n	8008274 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800824c:	4618      	mov	r0, r3
 800824e:	f7fc fb69 	bl	8004924 <HAL_DMA_Abort>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00d      	beq.n	8008274 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800825c:	4618      	mov	r0, r3
 800825e:	f7fc fd7d 	bl	8004d5c <HAL_DMA_GetError>
 8008262:	4603      	mov	r3, r0
 8008264:	2b20      	cmp	r3, #32
 8008266:	d105      	bne.n	8008274 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2210      	movs	r2, #16
 800826c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008270:	2303      	movs	r3, #3
 8008272:	e003      	b.n	800827c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f001 f815 	bl	80092a4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800827a:	2300      	movs	r3, #0
}
 800827c:	4618      	mov	r0, r3
 800827e:	3740      	adds	r7, #64	; 0x40
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b0ba      	sub	sp, #232	; 0xe8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	69db      	ldr	r3, [r3, #28]
 8008292:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80082aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80082ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80082b2:	4013      	ands	r3, r2
 80082b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80082b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d115      	bne.n	80082ec <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80082c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082c4:	f003 0320 	and.w	r3, r3, #32
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00f      	beq.n	80082ec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80082cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082d0:	f003 0320 	and.w	r3, r3, #32
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d009      	beq.n	80082ec <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 82ac 	beq.w	800883a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	4798      	blx	r3
      }
      return;
 80082ea:	e2a6      	b.n	800883a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80082ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f000 8117 	beq.w	8008524 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80082f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082fa:	f003 0301 	and.w	r3, r3, #1
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d106      	bne.n	8008310 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008302:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008306:	4b85      	ldr	r3, [pc, #532]	; (800851c <HAL_UART_IRQHandler+0x298>)
 8008308:	4013      	ands	r3, r2
 800830a:	2b00      	cmp	r3, #0
 800830c:	f000 810a 	beq.w	8008524 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008314:	f003 0301 	and.w	r3, r3, #1
 8008318:	2b00      	cmp	r3, #0
 800831a:	d011      	beq.n	8008340 <HAL_UART_IRQHandler+0xbc>
 800831c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00b      	beq.n	8008340 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2201      	movs	r2, #1
 800832e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008336:	f043 0201 	orr.w	r2, r3, #1
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008344:	f003 0302 	and.w	r3, r3, #2
 8008348:	2b00      	cmp	r3, #0
 800834a:	d011      	beq.n	8008370 <HAL_UART_IRQHandler+0xec>
 800834c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008350:	f003 0301 	and.w	r3, r3, #1
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00b      	beq.n	8008370 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2202      	movs	r2, #2
 800835e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008366:	f043 0204 	orr.w	r2, r3, #4
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008374:	f003 0304 	and.w	r3, r3, #4
 8008378:	2b00      	cmp	r3, #0
 800837a:	d011      	beq.n	80083a0 <HAL_UART_IRQHandler+0x11c>
 800837c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008380:	f003 0301 	and.w	r3, r3, #1
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00b      	beq.n	80083a0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2204      	movs	r2, #4
 800838e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008396:	f043 0202 	orr.w	r2, r3, #2
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80083a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083a4:	f003 0308 	and.w	r3, r3, #8
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d017      	beq.n	80083dc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80083ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083b0:	f003 0320 	and.w	r3, r3, #32
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d105      	bne.n	80083c4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80083b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00b      	beq.n	80083dc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2208      	movs	r2, #8
 80083ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083d2:	f043 0208 	orr.w	r2, r3, #8
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80083dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d012      	beq.n	800840e <HAL_UART_IRQHandler+0x18a>
 80083e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d00c      	beq.n	800840e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008404:	f043 0220 	orr.w	r2, r3, #32
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008414:	2b00      	cmp	r3, #0
 8008416:	f000 8212 	beq.w	800883e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800841a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800841e:	f003 0320 	and.w	r3, r3, #32
 8008422:	2b00      	cmp	r3, #0
 8008424:	d00d      	beq.n	8008442 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800842a:	f003 0320 	and.w	r3, r3, #32
 800842e:	2b00      	cmp	r3, #0
 8008430:	d007      	beq.n	8008442 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008436:	2b00      	cmp	r3, #0
 8008438:	d003      	beq.n	8008442 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008448:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008456:	2b40      	cmp	r3, #64	; 0x40
 8008458:	d005      	beq.n	8008466 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800845a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800845e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008462:	2b00      	cmp	r3, #0
 8008464:	d04f      	beq.n	8008506 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 ff1c 	bl	80092a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	689b      	ldr	r3, [r3, #8]
 8008472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008476:	2b40      	cmp	r3, #64	; 0x40
 8008478:	d141      	bne.n	80084fe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	3308      	adds	r3, #8
 8008480:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008484:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008488:	e853 3f00 	ldrex	r3, [r3]
 800848c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008490:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008494:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008498:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	3308      	adds	r3, #8
 80084a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80084a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80084aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80084b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80084b6:	e841 2300 	strex	r3, r2, [r1]
 80084ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80084be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1d9      	bne.n	800847a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d013      	beq.n	80084f6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084d2:	4a13      	ldr	r2, [pc, #76]	; (8008520 <HAL_UART_IRQHandler+0x29c>)
 80084d4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084da:	4618      	mov	r0, r3
 80084dc:	f7fc fa92 	bl	8004a04 <HAL_DMA_Abort_IT>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d017      	beq.n	8008516 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80084f0:	4610      	mov	r0, r2
 80084f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084f4:	e00f      	b.n	8008516 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 f9d4 	bl	80088a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084fc:	e00b      	b.n	8008516 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f000 f9d0 	bl	80088a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008504:	e007      	b.n	8008516 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f9cc 	bl	80088a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008514:	e193      	b.n	800883e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008516:	bf00      	nop
    return;
 8008518:	e191      	b.n	800883e <HAL_UART_IRQHandler+0x5ba>
 800851a:	bf00      	nop
 800851c:	04000120 	.word	0x04000120
 8008520:	08009603 	.word	0x08009603

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008528:	2b01      	cmp	r3, #1
 800852a:	f040 814c 	bne.w	80087c6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800852e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008532:	f003 0310 	and.w	r3, r3, #16
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 8145 	beq.w	80087c6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800853c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008540:	f003 0310 	and.w	r3, r3, #16
 8008544:	2b00      	cmp	r3, #0
 8008546:	f000 813e 	beq.w	80087c6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2210      	movs	r2, #16
 8008550:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800855c:	2b40      	cmp	r3, #64	; 0x40
 800855e:	f040 80b6 	bne.w	80086ce <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800856e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008572:	2b00      	cmp	r3, #0
 8008574:	f000 8165 	beq.w	8008842 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800857e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008582:	429a      	cmp	r2, r3
 8008584:	f080 815d 	bcs.w	8008842 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800858e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008596:	69db      	ldr	r3, [r3, #28]
 8008598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800859c:	f000 8086 	beq.w	80086ac <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80085ac:	e853 3f00 	ldrex	r3, [r3]
 80085b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80085b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80085b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	461a      	mov	r2, r3
 80085c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80085ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80085d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80085da:	e841 2300 	strex	r3, r2, [r1]
 80085de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80085e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1da      	bne.n	80085a0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	3308      	adds	r3, #8
 80085f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085f4:	e853 3f00 	ldrex	r3, [r3]
 80085f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80085fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085fc:	f023 0301 	bic.w	r3, r3, #1
 8008600:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	3308      	adds	r3, #8
 800860a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800860e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008612:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008614:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008616:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800861a:	e841 2300 	strex	r3, r2, [r1]
 800861e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1e1      	bne.n	80085ea <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	3308      	adds	r3, #8
 800862c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008630:	e853 3f00 	ldrex	r3, [r3]
 8008634:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800863c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	3308      	adds	r3, #8
 8008646:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800864a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800864c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008650:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008652:	e841 2300 	strex	r3, r2, [r1]
 8008656:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1e3      	bne.n	8008626 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2220      	movs	r2, #32
 8008662:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008674:	e853 3f00 	ldrex	r3, [r3]
 8008678:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800867a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800867c:	f023 0310 	bic.w	r3, r3, #16
 8008680:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	461a      	mov	r2, r3
 800868a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800868e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008690:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008692:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008694:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008696:	e841 2300 	strex	r3, r2, [r1]
 800869a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800869c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d1e4      	bne.n	800866c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086a6:	4618      	mov	r0, r3
 80086a8:	f7fc f93c 	bl	8004924 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2202      	movs	r2, #2
 80086b0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086be:	b29b      	uxth	r3, r3
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	4619      	mov	r1, r3
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 f8f6 	bl	80088b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80086cc:	e0b9      	b.n	8008842 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086da:	b29b      	uxth	r3, r3
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 80ab 	beq.w	8008846 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80086f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f000 80a6 	beq.w	8008846 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008702:	e853 3f00 	ldrex	r3, [r3]
 8008706:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800870e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	461a      	mov	r2, r3
 8008718:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800871c:	647b      	str	r3, [r7, #68]	; 0x44
 800871e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008720:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008722:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008724:	e841 2300 	strex	r3, r2, [r1]
 8008728:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800872a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1e4      	bne.n	80086fa <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3308      	adds	r3, #8
 8008736:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	e853 3f00 	ldrex	r3, [r3]
 800873e:	623b      	str	r3, [r7, #32]
   return(result);
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	f023 0301 	bic.w	r3, r3, #1
 8008746:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	3308      	adds	r3, #8
 8008750:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008754:	633a      	str	r2, [r7, #48]	; 0x30
 8008756:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008758:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800875a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800875c:	e841 2300 	strex	r3, r2, [r1]
 8008760:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1e3      	bne.n	8008730 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2220      	movs	r2, #32
 800876c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	e853 3f00 	ldrex	r3, [r3]
 8008788:	60fb      	str	r3, [r7, #12]
   return(result);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f023 0310 	bic.w	r3, r3, #16
 8008790:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	461a      	mov	r2, r3
 800879a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800879e:	61fb      	str	r3, [r7, #28]
 80087a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087a2:	69b9      	ldr	r1, [r7, #24]
 80087a4:	69fa      	ldr	r2, [r7, #28]
 80087a6:	e841 2300 	strex	r3, r2, [r1]
 80087aa:	617b      	str	r3, [r7, #20]
   return(result);
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1e4      	bne.n	800877c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2202      	movs	r2, #2
 80087b6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80087b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80087bc:	4619      	mov	r1, r3
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 f87a 	bl	80088b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80087c4:	e03f      	b.n	8008846 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80087c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00e      	beq.n	80087f0 <HAL_UART_IRQHandler+0x56c>
 80087d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d008      	beq.n	80087f0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80087e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 f871 	bl	80088d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087ee:	e02d      	b.n	800884c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80087f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00e      	beq.n	800881a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80087fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008804:	2b00      	cmp	r3, #0
 8008806:	d008      	beq.n	800881a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800880c:	2b00      	cmp	r3, #0
 800880e:	d01c      	beq.n	800884a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	4798      	blx	r3
    }
    return;
 8008818:	e017      	b.n	800884a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800881a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800881e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008822:	2b00      	cmp	r3, #0
 8008824:	d012      	beq.n	800884c <HAL_UART_IRQHandler+0x5c8>
 8008826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800882a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00c      	beq.n	800884c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fefb 	bl	800962e <UART_EndTransmit_IT>
    return;
 8008838:	e008      	b.n	800884c <HAL_UART_IRQHandler+0x5c8>
      return;
 800883a:	bf00      	nop
 800883c:	e006      	b.n	800884c <HAL_UART_IRQHandler+0x5c8>
    return;
 800883e:	bf00      	nop
 8008840:	e004      	b.n	800884c <HAL_UART_IRQHandler+0x5c8>
      return;
 8008842:	bf00      	nop
 8008844:	e002      	b.n	800884c <HAL_UART_IRQHandler+0x5c8>
      return;
 8008846:	bf00      	nop
 8008848:	e000      	b.n	800884c <HAL_UART_IRQHandler+0x5c8>
    return;
 800884a:	bf00      	nop
  }

}
 800884c:	37e8      	adds	r7, #232	; 0xe8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop

08008854 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	460b      	mov	r3, r1
 80088c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80088c4:	bf00      	nop
 80088c6:	370c      	adds	r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr

080088d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80088d8:	bf00      	nop
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b088      	sub	sp, #32
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80088ec:	2300      	movs	r3, #0
 80088ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	689a      	ldr	r2, [r3, #8]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	431a      	orrs	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	431a      	orrs	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	69db      	ldr	r3, [r3, #28]
 8008904:	4313      	orrs	r3, r2
 8008906:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	4ba6      	ldr	r3, [pc, #664]	; (8008ba8 <UART_SetConfig+0x2c4>)
 8008910:	4013      	ands	r3, r2
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	6812      	ldr	r2, [r2, #0]
 8008916:	6979      	ldr	r1, [r7, #20]
 8008918:	430b      	orrs	r3, r1
 800891a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	68da      	ldr	r2, [r3, #12]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	430a      	orrs	r2, r1
 8008930:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	699b      	ldr	r3, [r3, #24]
 8008936:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a1b      	ldr	r3, [r3, #32]
 800893c:	697a      	ldr	r2, [r7, #20]
 800893e:	4313      	orrs	r3, r2
 8008940:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	697a      	ldr	r2, [r7, #20]
 8008952:	430a      	orrs	r2, r1
 8008954:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a94      	ldr	r2, [pc, #592]	; (8008bac <UART_SetConfig+0x2c8>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d120      	bne.n	80089a2 <UART_SetConfig+0xbe>
 8008960:	4b93      	ldr	r3, [pc, #588]	; (8008bb0 <UART_SetConfig+0x2cc>)
 8008962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008966:	f003 0303 	and.w	r3, r3, #3
 800896a:	2b03      	cmp	r3, #3
 800896c:	d816      	bhi.n	800899c <UART_SetConfig+0xb8>
 800896e:	a201      	add	r2, pc, #4	; (adr r2, 8008974 <UART_SetConfig+0x90>)
 8008970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008974:	08008985 	.word	0x08008985
 8008978:	08008991 	.word	0x08008991
 800897c:	0800898b 	.word	0x0800898b
 8008980:	08008997 	.word	0x08008997
 8008984:	2301      	movs	r3, #1
 8008986:	77fb      	strb	r3, [r7, #31]
 8008988:	e150      	b.n	8008c2c <UART_SetConfig+0x348>
 800898a:	2302      	movs	r3, #2
 800898c:	77fb      	strb	r3, [r7, #31]
 800898e:	e14d      	b.n	8008c2c <UART_SetConfig+0x348>
 8008990:	2304      	movs	r3, #4
 8008992:	77fb      	strb	r3, [r7, #31]
 8008994:	e14a      	b.n	8008c2c <UART_SetConfig+0x348>
 8008996:	2308      	movs	r3, #8
 8008998:	77fb      	strb	r3, [r7, #31]
 800899a:	e147      	b.n	8008c2c <UART_SetConfig+0x348>
 800899c:	2310      	movs	r3, #16
 800899e:	77fb      	strb	r3, [r7, #31]
 80089a0:	e144      	b.n	8008c2c <UART_SetConfig+0x348>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a83      	ldr	r2, [pc, #524]	; (8008bb4 <UART_SetConfig+0x2d0>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d132      	bne.n	8008a12 <UART_SetConfig+0x12e>
 80089ac:	4b80      	ldr	r3, [pc, #512]	; (8008bb0 <UART_SetConfig+0x2cc>)
 80089ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089b2:	f003 030c 	and.w	r3, r3, #12
 80089b6:	2b0c      	cmp	r3, #12
 80089b8:	d828      	bhi.n	8008a0c <UART_SetConfig+0x128>
 80089ba:	a201      	add	r2, pc, #4	; (adr r2, 80089c0 <UART_SetConfig+0xdc>)
 80089bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c0:	080089f5 	.word	0x080089f5
 80089c4:	08008a0d 	.word	0x08008a0d
 80089c8:	08008a0d 	.word	0x08008a0d
 80089cc:	08008a0d 	.word	0x08008a0d
 80089d0:	08008a01 	.word	0x08008a01
 80089d4:	08008a0d 	.word	0x08008a0d
 80089d8:	08008a0d 	.word	0x08008a0d
 80089dc:	08008a0d 	.word	0x08008a0d
 80089e0:	080089fb 	.word	0x080089fb
 80089e4:	08008a0d 	.word	0x08008a0d
 80089e8:	08008a0d 	.word	0x08008a0d
 80089ec:	08008a0d 	.word	0x08008a0d
 80089f0:	08008a07 	.word	0x08008a07
 80089f4:	2300      	movs	r3, #0
 80089f6:	77fb      	strb	r3, [r7, #31]
 80089f8:	e118      	b.n	8008c2c <UART_SetConfig+0x348>
 80089fa:	2302      	movs	r3, #2
 80089fc:	77fb      	strb	r3, [r7, #31]
 80089fe:	e115      	b.n	8008c2c <UART_SetConfig+0x348>
 8008a00:	2304      	movs	r3, #4
 8008a02:	77fb      	strb	r3, [r7, #31]
 8008a04:	e112      	b.n	8008c2c <UART_SetConfig+0x348>
 8008a06:	2308      	movs	r3, #8
 8008a08:	77fb      	strb	r3, [r7, #31]
 8008a0a:	e10f      	b.n	8008c2c <UART_SetConfig+0x348>
 8008a0c:	2310      	movs	r3, #16
 8008a0e:	77fb      	strb	r3, [r7, #31]
 8008a10:	e10c      	b.n	8008c2c <UART_SetConfig+0x348>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a68      	ldr	r2, [pc, #416]	; (8008bb8 <UART_SetConfig+0x2d4>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d120      	bne.n	8008a5e <UART_SetConfig+0x17a>
 8008a1c:	4b64      	ldr	r3, [pc, #400]	; (8008bb0 <UART_SetConfig+0x2cc>)
 8008a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a22:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008a26:	2b30      	cmp	r3, #48	; 0x30
 8008a28:	d013      	beq.n	8008a52 <UART_SetConfig+0x16e>
 8008a2a:	2b30      	cmp	r3, #48	; 0x30
 8008a2c:	d814      	bhi.n	8008a58 <UART_SetConfig+0x174>
 8008a2e:	2b20      	cmp	r3, #32
 8008a30:	d009      	beq.n	8008a46 <UART_SetConfig+0x162>
 8008a32:	2b20      	cmp	r3, #32
 8008a34:	d810      	bhi.n	8008a58 <UART_SetConfig+0x174>
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d002      	beq.n	8008a40 <UART_SetConfig+0x15c>
 8008a3a:	2b10      	cmp	r3, #16
 8008a3c:	d006      	beq.n	8008a4c <UART_SetConfig+0x168>
 8008a3e:	e00b      	b.n	8008a58 <UART_SetConfig+0x174>
 8008a40:	2300      	movs	r3, #0
 8008a42:	77fb      	strb	r3, [r7, #31]
 8008a44:	e0f2      	b.n	8008c2c <UART_SetConfig+0x348>
 8008a46:	2302      	movs	r3, #2
 8008a48:	77fb      	strb	r3, [r7, #31]
 8008a4a:	e0ef      	b.n	8008c2c <UART_SetConfig+0x348>
 8008a4c:	2304      	movs	r3, #4
 8008a4e:	77fb      	strb	r3, [r7, #31]
 8008a50:	e0ec      	b.n	8008c2c <UART_SetConfig+0x348>
 8008a52:	2308      	movs	r3, #8
 8008a54:	77fb      	strb	r3, [r7, #31]
 8008a56:	e0e9      	b.n	8008c2c <UART_SetConfig+0x348>
 8008a58:	2310      	movs	r3, #16
 8008a5a:	77fb      	strb	r3, [r7, #31]
 8008a5c:	e0e6      	b.n	8008c2c <UART_SetConfig+0x348>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a56      	ldr	r2, [pc, #344]	; (8008bbc <UART_SetConfig+0x2d8>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d120      	bne.n	8008aaa <UART_SetConfig+0x1c6>
 8008a68:	4b51      	ldr	r3, [pc, #324]	; (8008bb0 <UART_SetConfig+0x2cc>)
 8008a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008a72:	2bc0      	cmp	r3, #192	; 0xc0
 8008a74:	d013      	beq.n	8008a9e <UART_SetConfig+0x1ba>
 8008a76:	2bc0      	cmp	r3, #192	; 0xc0
 8008a78:	d814      	bhi.n	8008aa4 <UART_SetConfig+0x1c0>
 8008a7a:	2b80      	cmp	r3, #128	; 0x80
 8008a7c:	d009      	beq.n	8008a92 <UART_SetConfig+0x1ae>
 8008a7e:	2b80      	cmp	r3, #128	; 0x80
 8008a80:	d810      	bhi.n	8008aa4 <UART_SetConfig+0x1c0>
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d002      	beq.n	8008a8c <UART_SetConfig+0x1a8>
 8008a86:	2b40      	cmp	r3, #64	; 0x40
 8008a88:	d006      	beq.n	8008a98 <UART_SetConfig+0x1b4>
 8008a8a:	e00b      	b.n	8008aa4 <UART_SetConfig+0x1c0>
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	77fb      	strb	r3, [r7, #31]
 8008a90:	e0cc      	b.n	8008c2c <UART_SetConfig+0x348>
 8008a92:	2302      	movs	r3, #2
 8008a94:	77fb      	strb	r3, [r7, #31]
 8008a96:	e0c9      	b.n	8008c2c <UART_SetConfig+0x348>
 8008a98:	2304      	movs	r3, #4
 8008a9a:	77fb      	strb	r3, [r7, #31]
 8008a9c:	e0c6      	b.n	8008c2c <UART_SetConfig+0x348>
 8008a9e:	2308      	movs	r3, #8
 8008aa0:	77fb      	strb	r3, [r7, #31]
 8008aa2:	e0c3      	b.n	8008c2c <UART_SetConfig+0x348>
 8008aa4:	2310      	movs	r3, #16
 8008aa6:	77fb      	strb	r3, [r7, #31]
 8008aa8:	e0c0      	b.n	8008c2c <UART_SetConfig+0x348>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	4a44      	ldr	r2, [pc, #272]	; (8008bc0 <UART_SetConfig+0x2dc>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d125      	bne.n	8008b00 <UART_SetConfig+0x21c>
 8008ab4:	4b3e      	ldr	r3, [pc, #248]	; (8008bb0 <UART_SetConfig+0x2cc>)
 8008ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008abe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ac2:	d017      	beq.n	8008af4 <UART_SetConfig+0x210>
 8008ac4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ac8:	d817      	bhi.n	8008afa <UART_SetConfig+0x216>
 8008aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ace:	d00b      	beq.n	8008ae8 <UART_SetConfig+0x204>
 8008ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ad4:	d811      	bhi.n	8008afa <UART_SetConfig+0x216>
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d003      	beq.n	8008ae2 <UART_SetConfig+0x1fe>
 8008ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ade:	d006      	beq.n	8008aee <UART_SetConfig+0x20a>
 8008ae0:	e00b      	b.n	8008afa <UART_SetConfig+0x216>
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	77fb      	strb	r3, [r7, #31]
 8008ae6:	e0a1      	b.n	8008c2c <UART_SetConfig+0x348>
 8008ae8:	2302      	movs	r3, #2
 8008aea:	77fb      	strb	r3, [r7, #31]
 8008aec:	e09e      	b.n	8008c2c <UART_SetConfig+0x348>
 8008aee:	2304      	movs	r3, #4
 8008af0:	77fb      	strb	r3, [r7, #31]
 8008af2:	e09b      	b.n	8008c2c <UART_SetConfig+0x348>
 8008af4:	2308      	movs	r3, #8
 8008af6:	77fb      	strb	r3, [r7, #31]
 8008af8:	e098      	b.n	8008c2c <UART_SetConfig+0x348>
 8008afa:	2310      	movs	r3, #16
 8008afc:	77fb      	strb	r3, [r7, #31]
 8008afe:	e095      	b.n	8008c2c <UART_SetConfig+0x348>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a2f      	ldr	r2, [pc, #188]	; (8008bc4 <UART_SetConfig+0x2e0>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d125      	bne.n	8008b56 <UART_SetConfig+0x272>
 8008b0a:	4b29      	ldr	r3, [pc, #164]	; (8008bb0 <UART_SetConfig+0x2cc>)
 8008b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008b14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b18:	d017      	beq.n	8008b4a <UART_SetConfig+0x266>
 8008b1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008b1e:	d817      	bhi.n	8008b50 <UART_SetConfig+0x26c>
 8008b20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b24:	d00b      	beq.n	8008b3e <UART_SetConfig+0x25a>
 8008b26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b2a:	d811      	bhi.n	8008b50 <UART_SetConfig+0x26c>
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d003      	beq.n	8008b38 <UART_SetConfig+0x254>
 8008b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b34:	d006      	beq.n	8008b44 <UART_SetConfig+0x260>
 8008b36:	e00b      	b.n	8008b50 <UART_SetConfig+0x26c>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	77fb      	strb	r3, [r7, #31]
 8008b3c:	e076      	b.n	8008c2c <UART_SetConfig+0x348>
 8008b3e:	2302      	movs	r3, #2
 8008b40:	77fb      	strb	r3, [r7, #31]
 8008b42:	e073      	b.n	8008c2c <UART_SetConfig+0x348>
 8008b44:	2304      	movs	r3, #4
 8008b46:	77fb      	strb	r3, [r7, #31]
 8008b48:	e070      	b.n	8008c2c <UART_SetConfig+0x348>
 8008b4a:	2308      	movs	r3, #8
 8008b4c:	77fb      	strb	r3, [r7, #31]
 8008b4e:	e06d      	b.n	8008c2c <UART_SetConfig+0x348>
 8008b50:	2310      	movs	r3, #16
 8008b52:	77fb      	strb	r3, [r7, #31]
 8008b54:	e06a      	b.n	8008c2c <UART_SetConfig+0x348>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a1b      	ldr	r2, [pc, #108]	; (8008bc8 <UART_SetConfig+0x2e4>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d138      	bne.n	8008bd2 <UART_SetConfig+0x2ee>
 8008b60:	4b13      	ldr	r3, [pc, #76]	; (8008bb0 <UART_SetConfig+0x2cc>)
 8008b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b66:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008b6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008b6e:	d017      	beq.n	8008ba0 <UART_SetConfig+0x2bc>
 8008b70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008b74:	d82a      	bhi.n	8008bcc <UART_SetConfig+0x2e8>
 8008b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b7a:	d00b      	beq.n	8008b94 <UART_SetConfig+0x2b0>
 8008b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b80:	d824      	bhi.n	8008bcc <UART_SetConfig+0x2e8>
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d003      	beq.n	8008b8e <UART_SetConfig+0x2aa>
 8008b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b8a:	d006      	beq.n	8008b9a <UART_SetConfig+0x2b6>
 8008b8c:	e01e      	b.n	8008bcc <UART_SetConfig+0x2e8>
 8008b8e:	2300      	movs	r3, #0
 8008b90:	77fb      	strb	r3, [r7, #31]
 8008b92:	e04b      	b.n	8008c2c <UART_SetConfig+0x348>
 8008b94:	2302      	movs	r3, #2
 8008b96:	77fb      	strb	r3, [r7, #31]
 8008b98:	e048      	b.n	8008c2c <UART_SetConfig+0x348>
 8008b9a:	2304      	movs	r3, #4
 8008b9c:	77fb      	strb	r3, [r7, #31]
 8008b9e:	e045      	b.n	8008c2c <UART_SetConfig+0x348>
 8008ba0:	2308      	movs	r3, #8
 8008ba2:	77fb      	strb	r3, [r7, #31]
 8008ba4:	e042      	b.n	8008c2c <UART_SetConfig+0x348>
 8008ba6:	bf00      	nop
 8008ba8:	efff69f3 	.word	0xefff69f3
 8008bac:	40011000 	.word	0x40011000
 8008bb0:	40023800 	.word	0x40023800
 8008bb4:	40004400 	.word	0x40004400
 8008bb8:	40004800 	.word	0x40004800
 8008bbc:	40004c00 	.word	0x40004c00
 8008bc0:	40005000 	.word	0x40005000
 8008bc4:	40011400 	.word	0x40011400
 8008bc8:	40007800 	.word	0x40007800
 8008bcc:	2310      	movs	r3, #16
 8008bce:	77fb      	strb	r3, [r7, #31]
 8008bd0:	e02c      	b.n	8008c2c <UART_SetConfig+0x348>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a72      	ldr	r2, [pc, #456]	; (8008da0 <UART_SetConfig+0x4bc>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d125      	bne.n	8008c28 <UART_SetConfig+0x344>
 8008bdc:	4b71      	ldr	r3, [pc, #452]	; (8008da4 <UART_SetConfig+0x4c0>)
 8008bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008be2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008be6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008bea:	d017      	beq.n	8008c1c <UART_SetConfig+0x338>
 8008bec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008bf0:	d817      	bhi.n	8008c22 <UART_SetConfig+0x33e>
 8008bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bf6:	d00b      	beq.n	8008c10 <UART_SetConfig+0x32c>
 8008bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bfc:	d811      	bhi.n	8008c22 <UART_SetConfig+0x33e>
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <UART_SetConfig+0x326>
 8008c02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c06:	d006      	beq.n	8008c16 <UART_SetConfig+0x332>
 8008c08:	e00b      	b.n	8008c22 <UART_SetConfig+0x33e>
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	77fb      	strb	r3, [r7, #31]
 8008c0e:	e00d      	b.n	8008c2c <UART_SetConfig+0x348>
 8008c10:	2302      	movs	r3, #2
 8008c12:	77fb      	strb	r3, [r7, #31]
 8008c14:	e00a      	b.n	8008c2c <UART_SetConfig+0x348>
 8008c16:	2304      	movs	r3, #4
 8008c18:	77fb      	strb	r3, [r7, #31]
 8008c1a:	e007      	b.n	8008c2c <UART_SetConfig+0x348>
 8008c1c:	2308      	movs	r3, #8
 8008c1e:	77fb      	strb	r3, [r7, #31]
 8008c20:	e004      	b.n	8008c2c <UART_SetConfig+0x348>
 8008c22:	2310      	movs	r3, #16
 8008c24:	77fb      	strb	r3, [r7, #31]
 8008c26:	e001      	b.n	8008c2c <UART_SetConfig+0x348>
 8008c28:	2310      	movs	r3, #16
 8008c2a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	69db      	ldr	r3, [r3, #28]
 8008c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c34:	d15b      	bne.n	8008cee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008c36:	7ffb      	ldrb	r3, [r7, #31]
 8008c38:	2b08      	cmp	r3, #8
 8008c3a:	d828      	bhi.n	8008c8e <UART_SetConfig+0x3aa>
 8008c3c:	a201      	add	r2, pc, #4	; (adr r2, 8008c44 <UART_SetConfig+0x360>)
 8008c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c42:	bf00      	nop
 8008c44:	08008c69 	.word	0x08008c69
 8008c48:	08008c71 	.word	0x08008c71
 8008c4c:	08008c79 	.word	0x08008c79
 8008c50:	08008c8f 	.word	0x08008c8f
 8008c54:	08008c7f 	.word	0x08008c7f
 8008c58:	08008c8f 	.word	0x08008c8f
 8008c5c:	08008c8f 	.word	0x08008c8f
 8008c60:	08008c8f 	.word	0x08008c8f
 8008c64:	08008c87 	.word	0x08008c87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c68:	f7fd f986 	bl	8005f78 <HAL_RCC_GetPCLK1Freq>
 8008c6c:	61b8      	str	r0, [r7, #24]
        break;
 8008c6e:	e013      	b.n	8008c98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c70:	f7fd f996 	bl	8005fa0 <HAL_RCC_GetPCLK2Freq>
 8008c74:	61b8      	str	r0, [r7, #24]
        break;
 8008c76:	e00f      	b.n	8008c98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c78:	4b4b      	ldr	r3, [pc, #300]	; (8008da8 <UART_SetConfig+0x4c4>)
 8008c7a:	61bb      	str	r3, [r7, #24]
        break;
 8008c7c:	e00c      	b.n	8008c98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c7e:	f7fd f869 	bl	8005d54 <HAL_RCC_GetSysClockFreq>
 8008c82:	61b8      	str	r0, [r7, #24]
        break;
 8008c84:	e008      	b.n	8008c98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c8a:	61bb      	str	r3, [r7, #24]
        break;
 8008c8c:	e004      	b.n	8008c98 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	77bb      	strb	r3, [r7, #30]
        break;
 8008c96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d074      	beq.n	8008d88 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	005a      	lsls	r2, r3, #1
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	085b      	lsrs	r3, r3, #1
 8008ca8:	441a      	add	r2, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	2b0f      	cmp	r3, #15
 8008cb8:	d916      	bls.n	8008ce8 <UART_SetConfig+0x404>
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cc0:	d212      	bcs.n	8008ce8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	f023 030f 	bic.w	r3, r3, #15
 8008cca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	085b      	lsrs	r3, r3, #1
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	f003 0307 	and.w	r3, r3, #7
 8008cd6:	b29a      	uxth	r2, r3
 8008cd8:	89fb      	ldrh	r3, [r7, #14]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	89fa      	ldrh	r2, [r7, #14]
 8008ce4:	60da      	str	r2, [r3, #12]
 8008ce6:	e04f      	b.n	8008d88 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	77bb      	strb	r3, [r7, #30]
 8008cec:	e04c      	b.n	8008d88 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008cee:	7ffb      	ldrb	r3, [r7, #31]
 8008cf0:	2b08      	cmp	r3, #8
 8008cf2:	d828      	bhi.n	8008d46 <UART_SetConfig+0x462>
 8008cf4:	a201      	add	r2, pc, #4	; (adr r2, 8008cfc <UART_SetConfig+0x418>)
 8008cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfa:	bf00      	nop
 8008cfc:	08008d21 	.word	0x08008d21
 8008d00:	08008d29 	.word	0x08008d29
 8008d04:	08008d31 	.word	0x08008d31
 8008d08:	08008d47 	.word	0x08008d47
 8008d0c:	08008d37 	.word	0x08008d37
 8008d10:	08008d47 	.word	0x08008d47
 8008d14:	08008d47 	.word	0x08008d47
 8008d18:	08008d47 	.word	0x08008d47
 8008d1c:	08008d3f 	.word	0x08008d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d20:	f7fd f92a 	bl	8005f78 <HAL_RCC_GetPCLK1Freq>
 8008d24:	61b8      	str	r0, [r7, #24]
        break;
 8008d26:	e013      	b.n	8008d50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d28:	f7fd f93a 	bl	8005fa0 <HAL_RCC_GetPCLK2Freq>
 8008d2c:	61b8      	str	r0, [r7, #24]
        break;
 8008d2e:	e00f      	b.n	8008d50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d30:	4b1d      	ldr	r3, [pc, #116]	; (8008da8 <UART_SetConfig+0x4c4>)
 8008d32:	61bb      	str	r3, [r7, #24]
        break;
 8008d34:	e00c      	b.n	8008d50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d36:	f7fd f80d 	bl	8005d54 <HAL_RCC_GetSysClockFreq>
 8008d3a:	61b8      	str	r0, [r7, #24]
        break;
 8008d3c:	e008      	b.n	8008d50 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d42:	61bb      	str	r3, [r7, #24]
        break;
 8008d44:	e004      	b.n	8008d50 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008d46:	2300      	movs	r3, #0
 8008d48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	77bb      	strb	r3, [r7, #30]
        break;
 8008d4e:	bf00      	nop
    }

    if (pclk != 0U)
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d018      	beq.n	8008d88 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	085a      	lsrs	r2, r3, #1
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	441a      	add	r2, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	2b0f      	cmp	r3, #15
 8008d6e:	d909      	bls.n	8008d84 <UART_SetConfig+0x4a0>
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d76:	d205      	bcs.n	8008d84 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	60da      	str	r2, [r3, #12]
 8008d82:	e001      	b.n	8008d88 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2200      	movs	r2, #0
 8008d92:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008d94:	7fbb      	ldrb	r3, [r7, #30]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3720      	adds	r7, #32
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	40007c00 	.word	0x40007c00
 8008da4:	40023800 	.word	0x40023800
 8008da8:	00f42400 	.word	0x00f42400

08008dac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db8:	f003 0301 	and.w	r3, r3, #1
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00a      	beq.n	8008dd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	430a      	orrs	r2, r1
 8008dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dda:	f003 0302 	and.w	r3, r3, #2
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00a      	beq.n	8008df8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	685b      	ldr	r3, [r3, #4]
 8008de8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	430a      	orrs	r2, r1
 8008df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfc:	f003 0304 	and.w	r3, r3, #4
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00a      	beq.n	8008e1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	430a      	orrs	r2, r1
 8008e18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1e:	f003 0308 	and.w	r3, r3, #8
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00a      	beq.n	8008e3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	430a      	orrs	r2, r1
 8008e3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e40:	f003 0310 	and.w	r3, r3, #16
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00a      	beq.n	8008e5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	689b      	ldr	r3, [r3, #8]
 8008e4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	430a      	orrs	r2, r1
 8008e5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e62:	f003 0320 	and.w	r3, r3, #32
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00a      	beq.n	8008e80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	430a      	orrs	r2, r1
 8008e7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d01a      	beq.n	8008ec2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	430a      	orrs	r2, r1
 8008ea0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008eaa:	d10a      	bne.n	8008ec2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	430a      	orrs	r2, r1
 8008ec0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00a      	beq.n	8008ee4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	430a      	orrs	r2, r1
 8008ee2:	605a      	str	r2, [r3, #4]
  }
}
 8008ee4:	bf00      	nop
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b086      	sub	sp, #24
 8008ef4:	af02      	add	r7, sp, #8
 8008ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f00:	f7fb faf0 	bl	80044e4 <HAL_GetTick>
 8008f04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 0308 	and.w	r3, r3, #8
 8008f10:	2b08      	cmp	r3, #8
 8008f12:	d10e      	bne.n	8008f32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f18:	9300      	str	r3, [sp, #0]
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f831 	bl	8008f8a <UART_WaitOnFlagUntilTimeout>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d001      	beq.n	8008f32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e027      	b.n	8008f82 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 0304 	and.w	r3, r3, #4
 8008f3c:	2b04      	cmp	r3, #4
 8008f3e:	d10e      	bne.n	8008f5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f44:	9300      	str	r3, [sp, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f81b 	bl	8008f8a <UART_WaitOnFlagUntilTimeout>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d001      	beq.n	8008f5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	e011      	b.n	8008f82 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2220      	movs	r2, #32
 8008f62:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2220      	movs	r2, #32
 8008f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b09c      	sub	sp, #112	; 0x70
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	60f8      	str	r0, [r7, #12]
 8008f92:	60b9      	str	r1, [r7, #8]
 8008f94:	603b      	str	r3, [r7, #0]
 8008f96:	4613      	mov	r3, r2
 8008f98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f9a:	e0a7      	b.n	80090ec <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fa2:	f000 80a3 	beq.w	80090ec <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fa6:	f7fb fa9d 	bl	80044e4 <HAL_GetTick>
 8008faa:	4602      	mov	r2, r0
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	1ad3      	subs	r3, r2, r3
 8008fb0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d302      	bcc.n	8008fbc <UART_WaitOnFlagUntilTimeout+0x32>
 8008fb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d13f      	bne.n	800903c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fc4:	e853 3f00 	ldrex	r3, [r3]
 8008fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008fd0:	667b      	str	r3, [r7, #100]	; 0x64
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008fdc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fde:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008fe0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008fe2:	e841 2300 	strex	r3, r2, [r1]
 8008fe6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1e6      	bne.n	8008fbc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	3308      	adds	r3, #8
 8008ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ff8:	e853 3f00 	ldrex	r3, [r3]
 8008ffc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009000:	f023 0301 	bic.w	r3, r3, #1
 8009004:	663b      	str	r3, [r7, #96]	; 0x60
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	3308      	adds	r3, #8
 800900c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800900e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009010:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009012:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009014:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009016:	e841 2300 	strex	r3, r2, [r1]
 800901a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800901c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1e5      	bne.n	8008fee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2220      	movs	r2, #32
 8009026:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2220      	movs	r2, #32
 800902c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2200      	movs	r2, #0
 8009034:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8009038:	2303      	movs	r3, #3
 800903a:	e068      	b.n	800910e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 0304 	and.w	r3, r3, #4
 8009046:	2b00      	cmp	r3, #0
 8009048:	d050      	beq.n	80090ec <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	69db      	ldr	r3, [r3, #28]
 8009050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009058:	d148      	bne.n	80090ec <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009062:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800906a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906c:	e853 3f00 	ldrex	r3, [r3]
 8009070:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009074:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009078:	66fb      	str	r3, [r7, #108]	; 0x6c
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	461a      	mov	r2, r3
 8009080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009082:	637b      	str	r3, [r7, #52]	; 0x34
 8009084:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009086:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009088:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800908a:	e841 2300 	strex	r3, r2, [r1]
 800908e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1e6      	bne.n	8009064 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	3308      	adds	r3, #8
 800909c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	e853 3f00 	ldrex	r3, [r3]
 80090a4:	613b      	str	r3, [r7, #16]
   return(result);
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	f023 0301 	bic.w	r3, r3, #1
 80090ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	3308      	adds	r3, #8
 80090b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80090b6:	623a      	str	r2, [r7, #32]
 80090b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ba:	69f9      	ldr	r1, [r7, #28]
 80090bc:	6a3a      	ldr	r2, [r7, #32]
 80090be:	e841 2300 	strex	r3, r2, [r1]
 80090c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1e5      	bne.n	8009096 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2220      	movs	r2, #32
 80090ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2220      	movs	r2, #32
 80090d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2220      	movs	r2, #32
 80090dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80090e8:	2303      	movs	r3, #3
 80090ea:	e010      	b.n	800910e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	69da      	ldr	r2, [r3, #28]
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	4013      	ands	r3, r2
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	bf0c      	ite	eq
 80090fc:	2301      	moveq	r3, #1
 80090fe:	2300      	movne	r3, #0
 8009100:	b2db      	uxtb	r3, r3
 8009102:	461a      	mov	r2, r3
 8009104:	79fb      	ldrb	r3, [r7, #7]
 8009106:	429a      	cmp	r2, r3
 8009108:	f43f af48 	beq.w	8008f9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	3770      	adds	r7, #112	; 0x70
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
	...

08009118 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b096      	sub	sp, #88	; 0x58
 800911c:	af00      	add	r7, sp, #0
 800911e:	60f8      	str	r0, [r7, #12]
 8009120:	60b9      	str	r1, [r7, #8]
 8009122:	4613      	mov	r3, r2
 8009124:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	68ba      	ldr	r2, [r7, #8]
 800912a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	88fa      	ldrh	r2, [r7, #6]
 8009130:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2200      	movs	r2, #0
 8009138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2222      	movs	r2, #34	; 0x22
 8009140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009148:	2b00      	cmp	r3, #0
 800914a:	d028      	beq.n	800919e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009150:	4a3e      	ldr	r2, [pc, #248]	; (800924c <UART_Start_Receive_DMA+0x134>)
 8009152:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009158:	4a3d      	ldr	r2, [pc, #244]	; (8009250 <UART_Start_Receive_DMA+0x138>)
 800915a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009160:	4a3c      	ldr	r2, [pc, #240]	; (8009254 <UART_Start_Receive_DMA+0x13c>)
 8009162:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009168:	2200      	movs	r2, #0
 800916a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	3324      	adds	r3, #36	; 0x24
 8009176:	4619      	mov	r1, r3
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800917c:	461a      	mov	r2, r3
 800917e:	88fb      	ldrh	r3, [r7, #6]
 8009180:	f7fb fb70 	bl	8004864 <HAL_DMA_Start_IT>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d009      	beq.n	800919e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2210      	movs	r2, #16
 800918e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2220      	movs	r2, #32
 8009196:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	e051      	b.n	8009242 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d018      	beq.n	80091d8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091ae:	e853 3f00 	ldrex	r3, [r3]
 80091b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091ba:	657b      	str	r3, [r7, #84]	; 0x54
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	461a      	mov	r2, r3
 80091c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80091c6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80091ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091cc:	e841 2300 	strex	r3, r2, [r1]
 80091d0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80091d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d1e6      	bne.n	80091a6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	3308      	adds	r3, #8
 80091de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e2:	e853 3f00 	ldrex	r3, [r3]
 80091e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ea:	f043 0301 	orr.w	r3, r3, #1
 80091ee:	653b      	str	r3, [r7, #80]	; 0x50
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	3308      	adds	r3, #8
 80091f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80091f8:	637a      	str	r2, [r7, #52]	; 0x34
 80091fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009200:	e841 2300 	strex	r3, r2, [r1]
 8009204:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1e5      	bne.n	80091d8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	3308      	adds	r3, #8
 8009212:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	e853 3f00 	ldrex	r3, [r3]
 800921a:	613b      	str	r3, [r7, #16]
   return(result);
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009222:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	3308      	adds	r3, #8
 800922a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800922c:	623a      	str	r2, [r7, #32]
 800922e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009230:	69f9      	ldr	r1, [r7, #28]
 8009232:	6a3a      	ldr	r2, [r7, #32]
 8009234:	e841 2300 	strex	r3, r2, [r1]
 8009238:	61bb      	str	r3, [r7, #24]
   return(result);
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1e5      	bne.n	800920c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8009240:	2300      	movs	r3, #0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3758      	adds	r7, #88	; 0x58
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
 800924a:	bf00      	nop
 800924c:	0800941f 	.word	0x0800941f
 8009250:	08009547 	.word	0x08009547
 8009254:	08009585 	.word	0x08009585

08009258 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009258:	b480      	push	{r7}
 800925a:	b089      	sub	sp, #36	; 0x24
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	e853 3f00 	ldrex	r3, [r3]
 800926c:	60bb      	str	r3, [r7, #8]
   return(result);
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009274:	61fb      	str	r3, [r7, #28]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	461a      	mov	r2, r3
 800927c:	69fb      	ldr	r3, [r7, #28]
 800927e:	61bb      	str	r3, [r7, #24]
 8009280:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009282:	6979      	ldr	r1, [r7, #20]
 8009284:	69ba      	ldr	r2, [r7, #24]
 8009286:	e841 2300 	strex	r3, r2, [r1]
 800928a:	613b      	str	r3, [r7, #16]
   return(result);
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d1e6      	bne.n	8009260 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2220      	movs	r2, #32
 8009296:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8009298:	bf00      	nop
 800929a:	3724      	adds	r7, #36	; 0x24
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr

080092a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b095      	sub	sp, #84	; 0x54
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092b4:	e853 3f00 	ldrex	r3, [r3]
 80092b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	461a      	mov	r2, r3
 80092c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092ca:	643b      	str	r3, [r7, #64]	; 0x40
 80092cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092d2:	e841 2300 	strex	r3, r2, [r1]
 80092d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d1e6      	bne.n	80092ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	3308      	adds	r3, #8
 80092e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e6:	6a3b      	ldr	r3, [r7, #32]
 80092e8:	e853 3f00 	ldrex	r3, [r3]
 80092ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	f023 0301 	bic.w	r3, r3, #1
 80092f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	3308      	adds	r3, #8
 80092fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009300:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009302:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009306:	e841 2300 	strex	r3, r2, [r1]
 800930a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800930c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930e:	2b00      	cmp	r3, #0
 8009310:	d1e5      	bne.n	80092de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009316:	2b01      	cmp	r3, #1
 8009318:	d118      	bne.n	800934c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	e853 3f00 	ldrex	r3, [r3]
 8009326:	60bb      	str	r3, [r7, #8]
   return(result);
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	f023 0310 	bic.w	r3, r3, #16
 800932e:	647b      	str	r3, [r7, #68]	; 0x44
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	461a      	mov	r2, r3
 8009336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009338:	61bb      	str	r3, [r7, #24]
 800933a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933c:	6979      	ldr	r1, [r7, #20]
 800933e:	69ba      	ldr	r2, [r7, #24]
 8009340:	e841 2300 	strex	r3, r2, [r1]
 8009344:	613b      	str	r3, [r7, #16]
   return(result);
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1e6      	bne.n	800931a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2220      	movs	r2, #32
 8009350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009360:	bf00      	nop
 8009362:	3754      	adds	r7, #84	; 0x54
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b090      	sub	sp, #64	; 0x40
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009378:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	69db      	ldr	r3, [r3, #28]
 800937e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009382:	d037      	beq.n	80093f4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8009384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009386:	2200      	movs	r2, #0
 8009388:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800938c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	3308      	adds	r3, #8
 8009392:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009396:	e853 3f00 	ldrex	r3, [r3]
 800939a:	623b      	str	r3, [r7, #32]
   return(result);
 800939c:	6a3b      	ldr	r3, [r7, #32]
 800939e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80093a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	3308      	adds	r3, #8
 80093aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093ac:	633a      	str	r2, [r7, #48]	; 0x30
 80093ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093b4:	e841 2300 	strex	r3, r2, [r1]
 80093b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d1e5      	bne.n	800938c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	e853 3f00 	ldrex	r3, [r3]
 80093cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093d4:	637b      	str	r3, [r7, #52]	; 0x34
 80093d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	461a      	mov	r2, r3
 80093dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093de:	61fb      	str	r3, [r7, #28]
 80093e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e2:	69b9      	ldr	r1, [r7, #24]
 80093e4:	69fa      	ldr	r2, [r7, #28]
 80093e6:	e841 2300 	strex	r3, r2, [r1]
 80093ea:	617b      	str	r3, [r7, #20]
   return(result);
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1e6      	bne.n	80093c0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80093f2:	e002      	b.n	80093fa <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80093f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80093f6:	f7ff fa2d 	bl	8008854 <HAL_UART_TxCpltCallback>
}
 80093fa:	bf00      	nop
 80093fc:	3740      	adds	r7, #64	; 0x40
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b084      	sub	sp, #16
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800940e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f7ff fa29 	bl	8008868 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009416:	bf00      	nop
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b09c      	sub	sp, #112	; 0x70
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	69db      	ldr	r3, [r3, #28]
 8009430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009434:	d071      	beq.n	800951a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009438:	2200      	movs	r2, #0
 800943a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800943e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009446:	e853 3f00 	ldrex	r3, [r3]
 800944a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800944c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800944e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009452:	66bb      	str	r3, [r7, #104]	; 0x68
 8009454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	461a      	mov	r2, r3
 800945a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800945c:	65bb      	str	r3, [r7, #88]	; 0x58
 800945e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009460:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009462:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009464:	e841 2300 	strex	r3, r2, [r1]
 8009468:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800946a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800946c:	2b00      	cmp	r3, #0
 800946e:	d1e6      	bne.n	800943e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	3308      	adds	r3, #8
 8009476:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947a:	e853 3f00 	ldrex	r3, [r3]
 800947e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009482:	f023 0301 	bic.w	r3, r3, #1
 8009486:	667b      	str	r3, [r7, #100]	; 0x64
 8009488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	3308      	adds	r3, #8
 800948e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009490:	647a      	str	r2, [r7, #68]	; 0x44
 8009492:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009494:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009496:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009498:	e841 2300 	strex	r3, r2, [r1]
 800949c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800949e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d1e5      	bne.n	8009470 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	3308      	adds	r3, #8
 80094aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ae:	e853 3f00 	ldrex	r3, [r3]
 80094b2:	623b      	str	r3, [r7, #32]
   return(result);
 80094b4:	6a3b      	ldr	r3, [r7, #32]
 80094b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094ba:	663b      	str	r3, [r7, #96]	; 0x60
 80094bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	3308      	adds	r3, #8
 80094c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80094c4:	633a      	str	r2, [r7, #48]	; 0x30
 80094c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094cc:	e841 2300 	strex	r3, r2, [r1]
 80094d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d1e5      	bne.n	80094a4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80094d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094da:	2220      	movs	r2, #32
 80094dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094e4:	2b01      	cmp	r3, #1
 80094e6:	d118      	bne.n	800951a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	e853 3f00 	ldrex	r3, [r3]
 80094f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f023 0310 	bic.w	r3, r3, #16
 80094fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	461a      	mov	r2, r3
 8009504:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009506:	61fb      	str	r3, [r7, #28]
 8009508:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950a:	69b9      	ldr	r1, [r7, #24]
 800950c:	69fa      	ldr	r2, [r7, #28]
 800950e:	e841 2300 	strex	r3, r2, [r1]
 8009512:	617b      	str	r3, [r7, #20]
   return(result);
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1e6      	bne.n	80094e8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800951a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800951c:	2200      	movs	r2, #0
 800951e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009524:	2b01      	cmp	r3, #1
 8009526:	d107      	bne.n	8009538 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800952a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800952e:	4619      	mov	r1, r3
 8009530:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009532:	f7ff f9c1 	bl	80088b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009536:	e002      	b.n	800953e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009538:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800953a:	f7ff f99f 	bl	800887c <HAL_UART_RxCpltCallback>
}
 800953e:	bf00      	nop
 8009540:	3770      	adds	r7, #112	; 0x70
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009546:	b580      	push	{r7, lr}
 8009548:	b084      	sub	sp, #16
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009552:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2201      	movs	r2, #1
 8009558:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800955e:	2b01      	cmp	r3, #1
 8009560:	d109      	bne.n	8009576 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009568:	085b      	lsrs	r3, r3, #1
 800956a:	b29b      	uxth	r3, r3
 800956c:	4619      	mov	r1, r3
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f7ff f9a2 	bl	80088b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009574:	e002      	b.n	800957c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f7ff f98a 	bl	8008890 <HAL_UART_RxHalfCpltCallback>
}
 800957c:	bf00      	nop
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b086      	sub	sp, #24
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009590:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009596:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800959e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095aa:	2b80      	cmp	r3, #128	; 0x80
 80095ac:	d109      	bne.n	80095c2 <UART_DMAError+0x3e>
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	2b21      	cmp	r3, #33	; 0x21
 80095b2:	d106      	bne.n	80095c2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80095bc:	6978      	ldr	r0, [r7, #20]
 80095be:	f7ff fe4b 	bl	8009258 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095cc:	2b40      	cmp	r3, #64	; 0x40
 80095ce:	d109      	bne.n	80095e4 <UART_DMAError+0x60>
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2b22      	cmp	r3, #34	; 0x22
 80095d4:	d106      	bne.n	80095e4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	2200      	movs	r2, #0
 80095da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80095de:	6978      	ldr	r0, [r7, #20]
 80095e0:	f7ff fe60 	bl	80092a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095ea:	f043 0210 	orr.w	r2, r3, #16
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095f4:	6978      	ldr	r0, [r7, #20]
 80095f6:	f7ff f955 	bl	80088a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095fa:	bf00      	nop
 80095fc:	3718      	adds	r7, #24
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b084      	sub	sp, #16
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800960e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2200      	movs	r2, #0
 8009614:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2200      	movs	r2, #0
 800961c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f7ff f93f 	bl	80088a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009626:	bf00      	nop
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b088      	sub	sp, #32
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	e853 3f00 	ldrex	r3, [r3]
 8009642:	60bb      	str	r3, [r7, #8]
   return(result);
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800964a:	61fb      	str	r3, [r7, #28]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	461a      	mov	r2, r3
 8009652:	69fb      	ldr	r3, [r7, #28]
 8009654:	61bb      	str	r3, [r7, #24]
 8009656:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009658:	6979      	ldr	r1, [r7, #20]
 800965a:	69ba      	ldr	r2, [r7, #24]
 800965c:	e841 2300 	strex	r3, r2, [r1]
 8009660:	613b      	str	r3, [r7, #16]
   return(result);
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1e6      	bne.n	8009636 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2220      	movs	r2, #32
 800966c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f7ff f8ed 	bl	8008854 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800967a:	bf00      	nop
 800967c:	3720      	adds	r7, #32
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
	...

08009684 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009684:	b084      	sub	sp, #16
 8009686:	b580      	push	{r7, lr}
 8009688:	b084      	sub	sp, #16
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	f107 001c 	add.w	r0, r7, #28
 8009692:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009698:	2b01      	cmp	r3, #1
 800969a:	d120      	bne.n	80096de <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	68da      	ldr	r2, [r3, #12]
 80096ac:	4b20      	ldr	r3, [pc, #128]	; (8009730 <USB_CoreInit+0xac>)
 80096ae:	4013      	ands	r3, r2
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80096c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d105      	bne.n	80096d2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 fa96 	bl	8009c04 <USB_CoreReset>
 80096d8:	4603      	mov	r3, r0
 80096da:	73fb      	strb	r3, [r7, #15]
 80096dc:	e010      	b.n	8009700 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 fa8a 	bl	8009c04 <USB_CoreReset>
 80096f0:	4603      	mov	r3, r0
 80096f2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8009700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009702:	2b01      	cmp	r3, #1
 8009704:	d10b      	bne.n	800971e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	f043 0206 	orr.w	r2, r3, #6
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	f043 0220 	orr.w	r2, r3, #32
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800971e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009720:	4618      	mov	r0, r3
 8009722:	3710      	adds	r7, #16
 8009724:	46bd      	mov	sp, r7
 8009726:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800972a:	b004      	add	sp, #16
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop
 8009730:	ffbdffbf 	.word	0xffbdffbf

08009734 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009734:	b480      	push	{r7}
 8009736:	b083      	sub	sp, #12
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	f023 0201 	bic.w	r2, r3, #1
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009748:	2300      	movs	r3, #0
}
 800974a:	4618      	mov	r0, r3
 800974c:	370c      	adds	r7, #12
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr

08009756 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009756:	b580      	push	{r7, lr}
 8009758:	b084      	sub	sp, #16
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
 800975e:	460b      	mov	r3, r1
 8009760:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009762:	2300      	movs	r3, #0
 8009764:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009772:	78fb      	ldrb	r3, [r7, #3]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d115      	bne.n	80097a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009784:	2001      	movs	r0, #1
 8009786:	f7fa feb9 	bl	80044fc <HAL_Delay>
      ms++;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	3301      	adds	r3, #1
 800978e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 fa29 	bl	8009be8 <USB_GetMode>
 8009796:	4603      	mov	r3, r0
 8009798:	2b01      	cmp	r3, #1
 800979a:	d01e      	beq.n	80097da <USB_SetCurrentMode+0x84>
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2b31      	cmp	r3, #49	; 0x31
 80097a0:	d9f0      	bls.n	8009784 <USB_SetCurrentMode+0x2e>
 80097a2:	e01a      	b.n	80097da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80097a4:	78fb      	ldrb	r3, [r7, #3]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d115      	bne.n	80097d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80097b6:	2001      	movs	r0, #1
 80097b8:	f7fa fea0 	bl	80044fc <HAL_Delay>
      ms++;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	3301      	adds	r3, #1
 80097c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 fa10 	bl	8009be8 <USB_GetMode>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d005      	beq.n	80097da <USB_SetCurrentMode+0x84>
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2b31      	cmp	r3, #49	; 0x31
 80097d2:	d9f0      	bls.n	80097b6 <USB_SetCurrentMode+0x60>
 80097d4:	e001      	b.n	80097da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80097d6:	2301      	movs	r3, #1
 80097d8:	e005      	b.n	80097e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2b32      	cmp	r3, #50	; 0x32
 80097de:	d101      	bne.n	80097e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	e000      	b.n	80097e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80097e4:	2300      	movs	r3, #0
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
	...

080097f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80097f0:	b084      	sub	sp, #16
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b086      	sub	sp, #24
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
 80097fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80097fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009802:	2300      	movs	r3, #0
 8009804:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800980a:	2300      	movs	r3, #0
 800980c:	613b      	str	r3, [r7, #16]
 800980e:	e009      	b.n	8009824 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	3340      	adds	r3, #64	; 0x40
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	4413      	add	r3, r2
 800981a:	2200      	movs	r2, #0
 800981c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	3301      	adds	r3, #1
 8009822:	613b      	str	r3, [r7, #16]
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	2b0e      	cmp	r3, #14
 8009828:	d9f2      	bls.n	8009810 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800982a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800982c:	2b00      	cmp	r3, #0
 800982e:	d11c      	bne.n	800986a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800983e:	f043 0302 	orr.w	r3, r3, #2
 8009842:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009848:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	601a      	str	r2, [r3, #0]
 8009868:	e005      	b.n	8009876 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800986e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800987c:	461a      	mov	r2, r3
 800987e:	2300      	movs	r3, #0
 8009880:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009888:	4619      	mov	r1, r3
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009890:	461a      	mov	r2, r3
 8009892:	680b      	ldr	r3, [r1, #0]
 8009894:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009898:	2b01      	cmp	r3, #1
 800989a:	d10c      	bne.n	80098b6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800989c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d104      	bne.n	80098ac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80098a2:	2100      	movs	r1, #0
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 f965 	bl	8009b74 <USB_SetDevSpeed>
 80098aa:	e008      	b.n	80098be <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80098ac:	2101      	movs	r1, #1
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 f960 	bl	8009b74 <USB_SetDevSpeed>
 80098b4:	e003      	b.n	80098be <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80098b6:	2103      	movs	r1, #3
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f000 f95b 	bl	8009b74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80098be:	2110      	movs	r1, #16
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f000 f8f3 	bl	8009aac <USB_FlushTxFifo>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d001      	beq.n	80098d0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 f91f 	bl	8009b14 <USB_FlushRxFifo>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d001      	beq.n	80098e0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098e6:	461a      	mov	r2, r3
 80098e8:	2300      	movs	r3, #0
 80098ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098f2:	461a      	mov	r2, r3
 80098f4:	2300      	movs	r3, #0
 80098f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098fe:	461a      	mov	r2, r3
 8009900:	2300      	movs	r3, #0
 8009902:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009904:	2300      	movs	r3, #0
 8009906:	613b      	str	r3, [r7, #16]
 8009908:	e043      	b.n	8009992 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	015a      	lsls	r2, r3, #5
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	4413      	add	r3, r2
 8009912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800991c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009920:	d118      	bne.n	8009954 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10a      	bne.n	800993e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	015a      	lsls	r2, r3, #5
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	4413      	add	r3, r2
 8009930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009934:	461a      	mov	r2, r3
 8009936:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800993a:	6013      	str	r3, [r2, #0]
 800993c:	e013      	b.n	8009966 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	015a      	lsls	r2, r3, #5
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	4413      	add	r3, r2
 8009946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800994a:	461a      	mov	r2, r3
 800994c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009950:	6013      	str	r3, [r2, #0]
 8009952:	e008      	b.n	8009966 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	015a      	lsls	r2, r3, #5
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	4413      	add	r3, r2
 800995c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009960:	461a      	mov	r2, r3
 8009962:	2300      	movs	r3, #0
 8009964:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	015a      	lsls	r2, r3, #5
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	4413      	add	r3, r2
 800996e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009972:	461a      	mov	r2, r3
 8009974:	2300      	movs	r3, #0
 8009976:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	015a      	lsls	r2, r3, #5
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	4413      	add	r3, r2
 8009980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009984:	461a      	mov	r2, r3
 8009986:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800998a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800998c:	693b      	ldr	r3, [r7, #16]
 800998e:	3301      	adds	r3, #1
 8009990:	613b      	str	r3, [r7, #16]
 8009992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009994:	693a      	ldr	r2, [r7, #16]
 8009996:	429a      	cmp	r2, r3
 8009998:	d3b7      	bcc.n	800990a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800999a:	2300      	movs	r3, #0
 800999c:	613b      	str	r3, [r7, #16]
 800999e:	e043      	b.n	8009a28 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	015a      	lsls	r2, r3, #5
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	4413      	add	r3, r2
 80099a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099b6:	d118      	bne.n	80099ea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d10a      	bne.n	80099d4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	015a      	lsls	r2, r3, #5
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	4413      	add	r3, r2
 80099c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ca:	461a      	mov	r2, r3
 80099cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80099d0:	6013      	str	r3, [r2, #0]
 80099d2:	e013      	b.n	80099fc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	015a      	lsls	r2, r3, #5
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	4413      	add	r3, r2
 80099dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099e0:	461a      	mov	r2, r3
 80099e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80099e6:	6013      	str	r3, [r2, #0]
 80099e8:	e008      	b.n	80099fc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	015a      	lsls	r2, r3, #5
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	4413      	add	r3, r2
 80099f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099f6:	461a      	mov	r2, r3
 80099f8:	2300      	movs	r3, #0
 80099fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	015a      	lsls	r2, r3, #5
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	4413      	add	r3, r2
 8009a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a08:	461a      	mov	r2, r3
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	015a      	lsls	r2, r3, #5
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	4413      	add	r3, r2
 8009a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009a20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	3301      	adds	r3, #1
 8009a26:	613b      	str	r3, [r7, #16]
 8009a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2a:	693a      	ldr	r2, [r7, #16]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d3b7      	bcc.n	80099a0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a36:	691b      	ldr	r3, [r3, #16]
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a42:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009a50:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d105      	bne.n	8009a64 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	f043 0210 	orr.w	r2, r3, #16
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	699a      	ldr	r2, [r3, #24]
 8009a68:	4b0e      	ldr	r3, [pc, #56]	; (8009aa4 <USB_DevInit+0x2b4>)
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009a70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d005      	beq.n	8009a82 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	699b      	ldr	r3, [r3, #24]
 8009a7a:	f043 0208 	orr.w	r2, r3, #8
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d105      	bne.n	8009a94 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	699a      	ldr	r2, [r3, #24]
 8009a8c:	4b06      	ldr	r3, [pc, #24]	; (8009aa8 <USB_DevInit+0x2b8>)
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3718      	adds	r7, #24
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009aa0:	b004      	add	sp, #16
 8009aa2:	4770      	bx	lr
 8009aa4:	803c3800 	.word	0x803c3800
 8009aa8:	40000004 	.word	0x40000004

08009aac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b085      	sub	sp, #20
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	3301      	adds	r3, #1
 8009abe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	4a13      	ldr	r2, [pc, #76]	; (8009b10 <USB_FlushTxFifo+0x64>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d901      	bls.n	8009acc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009ac8:	2303      	movs	r3, #3
 8009aca:	e01b      	b.n	8009b04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	daf2      	bge.n	8009aba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	019b      	lsls	r3, r3, #6
 8009adc:	f043 0220 	orr.w	r2, r3, #32
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	4a08      	ldr	r2, [pc, #32]	; (8009b10 <USB_FlushTxFifo+0x64>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d901      	bls.n	8009af6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009af2:	2303      	movs	r3, #3
 8009af4:	e006      	b.n	8009b04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	f003 0320 	and.w	r3, r3, #32
 8009afe:	2b20      	cmp	r3, #32
 8009b00:	d0f0      	beq.n	8009ae4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3714      	adds	r7, #20
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr
 8009b10:	00030d40 	.word	0x00030d40

08009b14 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b085      	sub	sp, #20
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	3301      	adds	r3, #1
 8009b24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	4a11      	ldr	r2, [pc, #68]	; (8009b70 <USB_FlushRxFifo+0x5c>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d901      	bls.n	8009b32 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009b2e:	2303      	movs	r3, #3
 8009b30:	e018      	b.n	8009b64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	691b      	ldr	r3, [r3, #16]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	daf2      	bge.n	8009b20 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2210      	movs	r2, #16
 8009b42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	3301      	adds	r3, #1
 8009b48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	4a08      	ldr	r2, [pc, #32]	; (8009b70 <USB_FlushRxFifo+0x5c>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d901      	bls.n	8009b56 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009b52:	2303      	movs	r3, #3
 8009b54:	e006      	b.n	8009b64 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	691b      	ldr	r3, [r3, #16]
 8009b5a:	f003 0310 	and.w	r3, r3, #16
 8009b5e:	2b10      	cmp	r3, #16
 8009b60:	d0f0      	beq.n	8009b44 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3714      	adds	r7, #20
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr
 8009b70:	00030d40 	.word	0x00030d40

08009b74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	78fb      	ldrb	r3, [r7, #3]
 8009b8e:	68f9      	ldr	r1, [r7, #12]
 8009b90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b94:	4313      	orrs	r3, r2
 8009b96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3714      	adds	r7, #20
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009ba6:	b480      	push	{r7}
 8009ba8:	b085      	sub	sp, #20
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009bc0:	f023 0303 	bic.w	r3, r3, #3
 8009bc4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	68fa      	ldr	r2, [r7, #12]
 8009bd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bd4:	f043 0302 	orr.w	r3, r3, #2
 8009bd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009bda:	2300      	movs	r3, #0
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3714      	adds	r7, #20
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr

08009be8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	695b      	ldr	r3, [r3, #20]
 8009bf4:	f003 0301 	and.w	r3, r3, #1
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	370c      	adds	r7, #12
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b085      	sub	sp, #20
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	3301      	adds	r3, #1
 8009c14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	4a13      	ldr	r2, [pc, #76]	; (8009c68 <USB_CoreReset+0x64>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d901      	bls.n	8009c22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009c1e:	2303      	movs	r3, #3
 8009c20:	e01b      	b.n	8009c5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	daf2      	bge.n	8009c10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	f043 0201 	orr.w	r2, r3, #1
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	4a09      	ldr	r2, [pc, #36]	; (8009c68 <USB_CoreReset+0x64>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d901      	bls.n	8009c4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009c48:	2303      	movs	r3, #3
 8009c4a:	e006      	b.n	8009c5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	691b      	ldr	r3, [r3, #16]
 8009c50:	f003 0301 	and.w	r3, r3, #1
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d0f0      	beq.n	8009c3a <USB_CoreReset+0x36>

  return HAL_OK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3714      	adds	r7, #20
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop
 8009c68:	00030d40 	.word	0x00030d40

08009c6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009c6c:	b480      	push	{r7}
 8009c6e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009c70:	bf00      	nop
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr
	...

08009c7c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c82:	f3ef 8305 	mrs	r3, IPSR
 8009c86:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c88:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d10f      	bne.n	8009cae <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8009c92:	607b      	str	r3, [r7, #4]
  return(result);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d105      	bne.n	8009ca6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009c9a:	f3ef 8311 	mrs	r3, BASEPRI
 8009c9e:	603b      	str	r3, [r7, #0]
  return(result);
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d007      	beq.n	8009cb6 <osKernelInitialize+0x3a>
 8009ca6:	4b0e      	ldr	r3, [pc, #56]	; (8009ce0 <osKernelInitialize+0x64>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d103      	bne.n	8009cb6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009cae:	f06f 0305 	mvn.w	r3, #5
 8009cb2:	60fb      	str	r3, [r7, #12]
 8009cb4:	e00c      	b.n	8009cd0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009cb6:	4b0a      	ldr	r3, [pc, #40]	; (8009ce0 <osKernelInitialize+0x64>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d105      	bne.n	8009cca <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009cbe:	4b08      	ldr	r3, [pc, #32]	; (8009ce0 <osKernelInitialize+0x64>)
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	60fb      	str	r3, [r7, #12]
 8009cc8:	e002      	b.n	8009cd0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8009cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3714      	adds	r7, #20
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop
 8009ce0:	20007090 	.word	0x20007090

08009ce4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cea:	f3ef 8305 	mrs	r3, IPSR
 8009cee:	60bb      	str	r3, [r7, #8]
  return(result);
 8009cf0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d10f      	bne.n	8009d16 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8009cfa:	607b      	str	r3, [r7, #4]
  return(result);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d105      	bne.n	8009d0e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d02:	f3ef 8311 	mrs	r3, BASEPRI
 8009d06:	603b      	str	r3, [r7, #0]
  return(result);
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d007      	beq.n	8009d1e <osKernelStart+0x3a>
 8009d0e:	4b0f      	ldr	r3, [pc, #60]	; (8009d4c <osKernelStart+0x68>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2b02      	cmp	r3, #2
 8009d14:	d103      	bne.n	8009d1e <osKernelStart+0x3a>
    stat = osErrorISR;
 8009d16:	f06f 0305 	mvn.w	r3, #5
 8009d1a:	60fb      	str	r3, [r7, #12]
 8009d1c:	e010      	b.n	8009d40 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009d1e:	4b0b      	ldr	r3, [pc, #44]	; (8009d4c <osKernelStart+0x68>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	2b01      	cmp	r3, #1
 8009d24:	d109      	bne.n	8009d3a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009d26:	f7ff ffa1 	bl	8009c6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009d2a:	4b08      	ldr	r3, [pc, #32]	; (8009d4c <osKernelStart+0x68>)
 8009d2c:	2202      	movs	r2, #2
 8009d2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009d30:	f001 f8ca 	bl	800aec8 <vTaskStartScheduler>
      stat = osOK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	60fb      	str	r3, [r7, #12]
 8009d38:	e002      	b.n	8009d40 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8009d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d3e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009d40:	68fb      	ldr	r3, [r7, #12]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	20007090 	.word	0x20007090

08009d50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b090      	sub	sp, #64	; 0x40
 8009d54:	af04      	add	r7, sp, #16
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d60:	f3ef 8305 	mrs	r3, IPSR
 8009d64:	61fb      	str	r3, [r7, #28]
  return(result);
 8009d66:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f040 808f 	bne.w	8009e8c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8009d72:	61bb      	str	r3, [r7, #24]
  return(result);
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d105      	bne.n	8009d86 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009d7a:	f3ef 8311 	mrs	r3, BASEPRI
 8009d7e:	617b      	str	r3, [r7, #20]
  return(result);
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d003      	beq.n	8009d8e <osThreadNew+0x3e>
 8009d86:	4b44      	ldr	r3, [pc, #272]	; (8009e98 <osThreadNew+0x148>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	d07e      	beq.n	8009e8c <osThreadNew+0x13c>
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d07b      	beq.n	8009e8c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009d94:	2380      	movs	r3, #128	; 0x80
 8009d96:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8009d98:	2318      	movs	r3, #24
 8009d9a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009da0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009da4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d045      	beq.n	8009e38 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d002      	beq.n	8009dba <osThreadNew+0x6a>
        name = attr->name;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	699b      	ldr	r3, [r3, #24]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d002      	beq.n	8009dc8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	699b      	ldr	r3, [r3, #24]
 8009dc6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d008      	beq.n	8009de0 <osThreadNew+0x90>
 8009dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd0:	2b38      	cmp	r3, #56	; 0x38
 8009dd2:	d805      	bhi.n	8009de0 <osThreadNew+0x90>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	f003 0301 	and.w	r3, r3, #1
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d001      	beq.n	8009de4 <osThreadNew+0x94>
        return (NULL);
 8009de0:	2300      	movs	r3, #0
 8009de2:	e054      	b.n	8009e8e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	695b      	ldr	r3, [r3, #20]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d003      	beq.n	8009df4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	695b      	ldr	r3, [r3, #20]
 8009df0:	089b      	lsrs	r3, r3, #2
 8009df2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00e      	beq.n	8009e1a <osThreadNew+0xca>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	2ba7      	cmp	r3, #167	; 0xa7
 8009e02:	d90a      	bls.n	8009e1a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d006      	beq.n	8009e1a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	695b      	ldr	r3, [r3, #20]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d002      	beq.n	8009e1a <osThreadNew+0xca>
        mem = 1;
 8009e14:	2301      	movs	r3, #1
 8009e16:	623b      	str	r3, [r7, #32]
 8009e18:	e010      	b.n	8009e3c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	689b      	ldr	r3, [r3, #8]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d10c      	bne.n	8009e3c <osThreadNew+0xec>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d108      	bne.n	8009e3c <osThreadNew+0xec>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d104      	bne.n	8009e3c <osThreadNew+0xec>
          mem = 0;
 8009e32:	2300      	movs	r3, #0
 8009e34:	623b      	str	r3, [r7, #32]
 8009e36:	e001      	b.n	8009e3c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009e3c:	6a3b      	ldr	r3, [r7, #32]
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d110      	bne.n	8009e64 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009e4a:	9202      	str	r2, [sp, #8]
 8009e4c:	9301      	str	r3, [sp, #4]
 8009e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e50:	9300      	str	r3, [sp, #0]
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f000 fe3f 	bl	800aadc <xTaskCreateStatic>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	613b      	str	r3, [r7, #16]
 8009e62:	e013      	b.n	8009e8c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8009e64:	6a3b      	ldr	r3, [r7, #32]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d110      	bne.n	8009e8c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e6c:	b29a      	uxth	r2, r3
 8009e6e:	f107 0310 	add.w	r3, r7, #16
 8009e72:	9301      	str	r3, [sp, #4]
 8009e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f000 fe90 	bl	800aba2 <xTaskCreate>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d001      	beq.n	8009e8c <osThreadNew+0x13c>
          hTask = NULL;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009e8c:	693b      	ldr	r3, [r7, #16]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3730      	adds	r7, #48	; 0x30
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	20007090 	.word	0x20007090

08009e9c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b086      	sub	sp, #24
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ea4:	f3ef 8305 	mrs	r3, IPSR
 8009ea8:	613b      	str	r3, [r7, #16]
  return(result);
 8009eaa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d10f      	bne.n	8009ed0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8009eb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d105      	bne.n	8009ec8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009ebc:	f3ef 8311 	mrs	r3, BASEPRI
 8009ec0:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d007      	beq.n	8009ed8 <osDelay+0x3c>
 8009ec8:	4b0a      	ldr	r3, [pc, #40]	; (8009ef4 <osDelay+0x58>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	d103      	bne.n	8009ed8 <osDelay+0x3c>
    stat = osErrorISR;
 8009ed0:	f06f 0305 	mvn.w	r3, #5
 8009ed4:	617b      	str	r3, [r7, #20]
 8009ed6:	e007      	b.n	8009ee8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d002      	beq.n	8009ee8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 ffba 	bl	800ae5c <vTaskDelay>
    }
  }

  return (stat);
 8009ee8:	697b      	ldr	r3, [r7, #20]
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3718      	adds	r7, #24
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	20007090 	.word	0x20007090

08009ef8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009ef8:	b480      	push	{r7}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	4a07      	ldr	r2, [pc, #28]	; (8009f24 <vApplicationGetIdleTaskMemory+0x2c>)
 8009f08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	4a06      	ldr	r2, [pc, #24]	; (8009f28 <vApplicationGetIdleTaskMemory+0x30>)
 8009f0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2280      	movs	r2, #128	; 0x80
 8009f14:	601a      	str	r2, [r3, #0]
}
 8009f16:	bf00      	nop
 8009f18:	3714      	adds	r7, #20
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr
 8009f22:	bf00      	nop
 8009f24:	20007094 	.word	0x20007094
 8009f28:	2000713c 	.word	0x2000713c

08009f2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009f2c:	b480      	push	{r7}
 8009f2e:	b085      	sub	sp, #20
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	60f8      	str	r0, [r7, #12]
 8009f34:	60b9      	str	r1, [r7, #8]
 8009f36:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	4a07      	ldr	r2, [pc, #28]	; (8009f58 <vApplicationGetTimerTaskMemory+0x2c>)
 8009f3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	4a06      	ldr	r2, [pc, #24]	; (8009f5c <vApplicationGetTimerTaskMemory+0x30>)
 8009f42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f4a:	601a      	str	r2, [r3, #0]
}
 8009f4c:	bf00      	nop
 8009f4e:	3714      	adds	r7, #20
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr
 8009f58:	2000733c 	.word	0x2000733c
 8009f5c:	200073e4 	.word	0x200073e4

08009f60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f103 0208 	add.w	r2, r3, #8
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f103 0208 	add.w	r2, r3, #8
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f103 0208 	add.w	r2, r3, #8
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009f94:	bf00      	nop
 8009f96:	370c      	adds	r7, #12
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009fae:	bf00      	nop
 8009fb0:	370c      	adds	r7, #12
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb8:	4770      	bx	lr

08009fba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009fba:	b480      	push	{r7}
 8009fbc:	b085      	sub	sp, #20
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
 8009fc2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	689a      	ldr	r2, [r3, #8]
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	683a      	ldr	r2, [r7, #0]
 8009fde:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	683a      	ldr	r2, [r7, #0]
 8009fe4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	1c5a      	adds	r2, r3, #1
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	601a      	str	r2, [r3, #0]
}
 8009ff6:	bf00      	nop
 8009ff8:	3714      	adds	r7, #20
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr

0800a002 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a002:	b480      	push	{r7}
 800a004:	b085      	sub	sp, #20
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
 800a00a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a018:	d103      	bne.n	800a022 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	60fb      	str	r3, [r7, #12]
 800a020:	e00c      	b.n	800a03c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	3308      	adds	r3, #8
 800a026:	60fb      	str	r3, [r7, #12]
 800a028:	e002      	b.n	800a030 <vListInsert+0x2e>
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	60fb      	str	r3, [r7, #12]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	68ba      	ldr	r2, [r7, #8]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d2f6      	bcs.n	800a02a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	685a      	ldr	r2, [r3, #4]
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	683a      	ldr	r2, [r7, #0]
 800a04a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	683a      	ldr	r2, [r7, #0]
 800a056:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	1c5a      	adds	r2, r3, #1
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	601a      	str	r2, [r3, #0]
}
 800a068:	bf00      	nop
 800a06a:	3714      	adds	r7, #20
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a074:	b480      	push	{r7}
 800a076:	b085      	sub	sp, #20
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	691b      	ldr	r3, [r3, #16]
 800a080:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	6892      	ldr	r2, [r2, #8]
 800a08a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	689b      	ldr	r3, [r3, #8]
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	6852      	ldr	r2, [r2, #4]
 800a094:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	429a      	cmp	r2, r3
 800a09e:	d103      	bne.n	800a0a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	689a      	ldr	r2, [r3, #8]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	1e5a      	subs	r2, r3, #1
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3714      	adds	r7, #20
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10c      	bne.n	800a0f6 <xQueueGenericReset+0x2e>
	__asm volatile
 800a0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e0:	b672      	cpsid	i
 800a0e2:	f383 8811 	msr	BASEPRI, r3
 800a0e6:	f3bf 8f6f 	isb	sy
 800a0ea:	f3bf 8f4f 	dsb	sy
 800a0ee:	b662      	cpsie	i
 800a0f0:	60bb      	str	r3, [r7, #8]
}
 800a0f2:	bf00      	nop
 800a0f4:	e7fe      	b.n	800a0f4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a0f6:	f002 f8d1 	bl	800c29c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a102:	68f9      	ldr	r1, [r7, #12]
 800a104:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a106:	fb01 f303 	mul.w	r3, r1, r3
 800a10a:	441a      	add	r2, r3
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2200      	movs	r2, #0
 800a114:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a126:	3b01      	subs	r3, #1
 800a128:	68f9      	ldr	r1, [r7, #12]
 800a12a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a12c:	fb01 f303 	mul.w	r3, r1, r3
 800a130:	441a      	add	r2, r3
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	22ff      	movs	r2, #255	; 0xff
 800a13a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	22ff      	movs	r2, #255	; 0xff
 800a142:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d114      	bne.n	800a176 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	691b      	ldr	r3, [r3, #16]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d01a      	beq.n	800a18a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	3310      	adds	r3, #16
 800a158:	4618      	mov	r0, r3
 800a15a:	f001 f95d 	bl	800b418 <xTaskRemoveFromEventList>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d012      	beq.n	800a18a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a164:	4b0c      	ldr	r3, [pc, #48]	; (800a198 <xQueueGenericReset+0xd0>)
 800a166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a16a:	601a      	str	r2, [r3, #0]
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	f3bf 8f6f 	isb	sy
 800a174:	e009      	b.n	800a18a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	3310      	adds	r3, #16
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7ff fef0 	bl	8009f60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	3324      	adds	r3, #36	; 0x24
 800a184:	4618      	mov	r0, r3
 800a186:	f7ff feeb 	bl	8009f60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a18a:	f002 f8bb 	bl	800c304 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a18e:	2301      	movs	r3, #1
}
 800a190:	4618      	mov	r0, r3
 800a192:	3710      	adds	r7, #16
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}
 800a198:	e000ed04 	.word	0xe000ed04

0800a19c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b08e      	sub	sp, #56	; 0x38
 800a1a0:	af02      	add	r7, sp, #8
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]
 800a1a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d10c      	bne.n	800a1ca <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800a1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b4:	b672      	cpsid	i
 800a1b6:	f383 8811 	msr	BASEPRI, r3
 800a1ba:	f3bf 8f6f 	isb	sy
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	b662      	cpsie	i
 800a1c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a1c6:	bf00      	nop
 800a1c8:	e7fe      	b.n	800a1c8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d10c      	bne.n	800a1ea <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800a1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d4:	b672      	cpsid	i
 800a1d6:	f383 8811 	msr	BASEPRI, r3
 800a1da:	f3bf 8f6f 	isb	sy
 800a1de:	f3bf 8f4f 	dsb	sy
 800a1e2:	b662      	cpsie	i
 800a1e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a1e6:	bf00      	nop
 800a1e8:	e7fe      	b.n	800a1e8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d002      	beq.n	800a1f6 <xQueueGenericCreateStatic+0x5a>
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d001      	beq.n	800a1fa <xQueueGenericCreateStatic+0x5e>
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e000      	b.n	800a1fc <xQueueGenericCreateStatic+0x60>
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10c      	bne.n	800a21a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800a200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a204:	b672      	cpsid	i
 800a206:	f383 8811 	msr	BASEPRI, r3
 800a20a:	f3bf 8f6f 	isb	sy
 800a20e:	f3bf 8f4f 	dsb	sy
 800a212:	b662      	cpsie	i
 800a214:	623b      	str	r3, [r7, #32]
}
 800a216:	bf00      	nop
 800a218:	e7fe      	b.n	800a218 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d102      	bne.n	800a226 <xQueueGenericCreateStatic+0x8a>
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d101      	bne.n	800a22a <xQueueGenericCreateStatic+0x8e>
 800a226:	2301      	movs	r3, #1
 800a228:	e000      	b.n	800a22c <xQueueGenericCreateStatic+0x90>
 800a22a:	2300      	movs	r3, #0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d10c      	bne.n	800a24a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800a230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a234:	b672      	cpsid	i
 800a236:	f383 8811 	msr	BASEPRI, r3
 800a23a:	f3bf 8f6f 	isb	sy
 800a23e:	f3bf 8f4f 	dsb	sy
 800a242:	b662      	cpsie	i
 800a244:	61fb      	str	r3, [r7, #28]
}
 800a246:	bf00      	nop
 800a248:	e7fe      	b.n	800a248 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a24a:	2350      	movs	r3, #80	; 0x50
 800a24c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	2b50      	cmp	r3, #80	; 0x50
 800a252:	d00c      	beq.n	800a26e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800a254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a258:	b672      	cpsid	i
 800a25a:	f383 8811 	msr	BASEPRI, r3
 800a25e:	f3bf 8f6f 	isb	sy
 800a262:	f3bf 8f4f 	dsb	sy
 800a266:	b662      	cpsie	i
 800a268:	61bb      	str	r3, [r7, #24]
}
 800a26a:	bf00      	nop
 800a26c:	e7fe      	b.n	800a26c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a26e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a276:	2b00      	cmp	r3, #0
 800a278:	d00d      	beq.n	800a296 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a27c:	2201      	movs	r2, #1
 800a27e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a282:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a288:	9300      	str	r3, [sp, #0]
 800a28a:	4613      	mov	r3, r2
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	68b9      	ldr	r1, [r7, #8]
 800a290:	68f8      	ldr	r0, [r7, #12]
 800a292:	f000 f805 	bl	800a2a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a298:	4618      	mov	r0, r3
 800a29a:	3730      	adds	r7, #48	; 0x30
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	607a      	str	r2, [r7, #4]
 800a2ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d103      	bne.n	800a2bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a2b4:	69bb      	ldr	r3, [r7, #24]
 800a2b6:	69ba      	ldr	r2, [r7, #24]
 800a2b8:	601a      	str	r2, [r3, #0]
 800a2ba:	e002      	b.n	800a2c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a2c2:	69bb      	ldr	r3, [r7, #24]
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a2c8:	69bb      	ldr	r3, [r7, #24]
 800a2ca:	68ba      	ldr	r2, [r7, #8]
 800a2cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a2ce:	2101      	movs	r1, #1
 800a2d0:	69b8      	ldr	r0, [r7, #24]
 800a2d2:	f7ff fef9 	bl	800a0c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	78fa      	ldrb	r2, [r7, #3]
 800a2da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a2de:	bf00      	nop
 800a2e0:	3710      	adds	r7, #16
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
	...

0800a2e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b08e      	sub	sp, #56	; 0x38
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	60b9      	str	r1, [r7, #8]
 800a2f2:	607a      	str	r2, [r7, #4]
 800a2f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a300:	2b00      	cmp	r3, #0
 800a302:	d10c      	bne.n	800a31e <xQueueGenericSend+0x36>
	__asm volatile
 800a304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a308:	b672      	cpsid	i
 800a30a:	f383 8811 	msr	BASEPRI, r3
 800a30e:	f3bf 8f6f 	isb	sy
 800a312:	f3bf 8f4f 	dsb	sy
 800a316:	b662      	cpsie	i
 800a318:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a31a:	bf00      	nop
 800a31c:	e7fe      	b.n	800a31c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d103      	bne.n	800a32c <xQueueGenericSend+0x44>
 800a324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d101      	bne.n	800a330 <xQueueGenericSend+0x48>
 800a32c:	2301      	movs	r3, #1
 800a32e:	e000      	b.n	800a332 <xQueueGenericSend+0x4a>
 800a330:	2300      	movs	r3, #0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d10c      	bne.n	800a350 <xQueueGenericSend+0x68>
	__asm volatile
 800a336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33a:	b672      	cpsid	i
 800a33c:	f383 8811 	msr	BASEPRI, r3
 800a340:	f3bf 8f6f 	isb	sy
 800a344:	f3bf 8f4f 	dsb	sy
 800a348:	b662      	cpsie	i
 800a34a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a34c:	bf00      	nop
 800a34e:	e7fe      	b.n	800a34e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	2b02      	cmp	r3, #2
 800a354:	d103      	bne.n	800a35e <xQueueGenericSend+0x76>
 800a356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d101      	bne.n	800a362 <xQueueGenericSend+0x7a>
 800a35e:	2301      	movs	r3, #1
 800a360:	e000      	b.n	800a364 <xQueueGenericSend+0x7c>
 800a362:	2300      	movs	r3, #0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d10c      	bne.n	800a382 <xQueueGenericSend+0x9a>
	__asm volatile
 800a368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36c:	b672      	cpsid	i
 800a36e:	f383 8811 	msr	BASEPRI, r3
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	f3bf 8f4f 	dsb	sy
 800a37a:	b662      	cpsie	i
 800a37c:	623b      	str	r3, [r7, #32]
}
 800a37e:	bf00      	nop
 800a380:	e7fe      	b.n	800a380 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a382:	f001 fa3b 	bl	800b7fc <xTaskGetSchedulerState>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d102      	bne.n	800a392 <xQueueGenericSend+0xaa>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d101      	bne.n	800a396 <xQueueGenericSend+0xae>
 800a392:	2301      	movs	r3, #1
 800a394:	e000      	b.n	800a398 <xQueueGenericSend+0xb0>
 800a396:	2300      	movs	r3, #0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d10c      	bne.n	800a3b6 <xQueueGenericSend+0xce>
	__asm volatile
 800a39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a0:	b672      	cpsid	i
 800a3a2:	f383 8811 	msr	BASEPRI, r3
 800a3a6:	f3bf 8f6f 	isb	sy
 800a3aa:	f3bf 8f4f 	dsb	sy
 800a3ae:	b662      	cpsie	i
 800a3b0:	61fb      	str	r3, [r7, #28]
}
 800a3b2:	bf00      	nop
 800a3b4:	e7fe      	b.n	800a3b4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3b6:	f001 ff71 	bl	800c29c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d302      	bcc.n	800a3cc <xQueueGenericSend+0xe4>
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	d129      	bne.n	800a420 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3cc:	683a      	ldr	r2, [r7, #0]
 800a3ce:	68b9      	ldr	r1, [r7, #8]
 800a3d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a3d2:	f000 fa15 	bl	800a800 <prvCopyDataToQueue>
 800a3d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d010      	beq.n	800a402 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3e2:	3324      	adds	r3, #36	; 0x24
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f001 f817 	bl	800b418 <xTaskRemoveFromEventList>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d013      	beq.n	800a418 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a3f0:	4b3f      	ldr	r3, [pc, #252]	; (800a4f0 <xQueueGenericSend+0x208>)
 800a3f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3f6:	601a      	str	r2, [r3, #0]
 800a3f8:	f3bf 8f4f 	dsb	sy
 800a3fc:	f3bf 8f6f 	isb	sy
 800a400:	e00a      	b.n	800a418 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a404:	2b00      	cmp	r3, #0
 800a406:	d007      	beq.n	800a418 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a408:	4b39      	ldr	r3, [pc, #228]	; (800a4f0 <xQueueGenericSend+0x208>)
 800a40a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a40e:	601a      	str	r2, [r3, #0]
 800a410:	f3bf 8f4f 	dsb	sy
 800a414:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a418:	f001 ff74 	bl	800c304 <vPortExitCritical>
				return pdPASS;
 800a41c:	2301      	movs	r3, #1
 800a41e:	e063      	b.n	800a4e8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d103      	bne.n	800a42e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a426:	f001 ff6d 	bl	800c304 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a42a:	2300      	movs	r3, #0
 800a42c:	e05c      	b.n	800a4e8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a430:	2b00      	cmp	r3, #0
 800a432:	d106      	bne.n	800a442 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a434:	f107 0314 	add.w	r3, r7, #20
 800a438:	4618      	mov	r0, r3
 800a43a:	f001 f87b 	bl	800b534 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a43e:	2301      	movs	r3, #1
 800a440:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a442:	f001 ff5f 	bl	800c304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a446:	f000 fdb3 	bl	800afb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a44a:	f001 ff27 	bl	800c29c <vPortEnterCritical>
 800a44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a450:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a454:	b25b      	sxtb	r3, r3
 800a456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a45a:	d103      	bne.n	800a464 <xQueueGenericSend+0x17c>
 800a45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45e:	2200      	movs	r2, #0
 800a460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a466:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a46a:	b25b      	sxtb	r3, r3
 800a46c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a470:	d103      	bne.n	800a47a <xQueueGenericSend+0x192>
 800a472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a474:	2200      	movs	r2, #0
 800a476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a47a:	f001 ff43 	bl	800c304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a47e:	1d3a      	adds	r2, r7, #4
 800a480:	f107 0314 	add.w	r3, r7, #20
 800a484:	4611      	mov	r1, r2
 800a486:	4618      	mov	r0, r3
 800a488:	f001 f86a 	bl	800b560 <xTaskCheckForTimeOut>
 800a48c:	4603      	mov	r3, r0
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d124      	bne.n	800a4dc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a492:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a494:	f000 faac 	bl	800a9f0 <prvIsQueueFull>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d018      	beq.n	800a4d0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a0:	3310      	adds	r3, #16
 800a4a2:	687a      	ldr	r2, [r7, #4]
 800a4a4:	4611      	mov	r1, r2
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f000 ff62 	bl	800b370 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a4ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4ae:	f000 fa37 	bl	800a920 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a4b2:	f000 fd8b 	bl	800afcc <xTaskResumeAll>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	f47f af7c 	bne.w	800a3b6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800a4be:	4b0c      	ldr	r3, [pc, #48]	; (800a4f0 <xQueueGenericSend+0x208>)
 800a4c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4c4:	601a      	str	r2, [r3, #0]
 800a4c6:	f3bf 8f4f 	dsb	sy
 800a4ca:	f3bf 8f6f 	isb	sy
 800a4ce:	e772      	b.n	800a3b6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a4d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4d2:	f000 fa25 	bl	800a920 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4d6:	f000 fd79 	bl	800afcc <xTaskResumeAll>
 800a4da:	e76c      	b.n	800a3b6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a4dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4de:	f000 fa1f 	bl	800a920 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4e2:	f000 fd73 	bl	800afcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a4e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3738      	adds	r7, #56	; 0x38
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	e000ed04 	.word	0xe000ed04

0800a4f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b08e      	sub	sp, #56	; 0x38
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	607a      	str	r2, [r7, #4]
 800a500:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d10c      	bne.n	800a526 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800a50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a510:	b672      	cpsid	i
 800a512:	f383 8811 	msr	BASEPRI, r3
 800a516:	f3bf 8f6f 	isb	sy
 800a51a:	f3bf 8f4f 	dsb	sy
 800a51e:	b662      	cpsie	i
 800a520:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a522:	bf00      	nop
 800a524:	e7fe      	b.n	800a524 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d103      	bne.n	800a534 <xQueueGenericSendFromISR+0x40>
 800a52c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a530:	2b00      	cmp	r3, #0
 800a532:	d101      	bne.n	800a538 <xQueueGenericSendFromISR+0x44>
 800a534:	2301      	movs	r3, #1
 800a536:	e000      	b.n	800a53a <xQueueGenericSendFromISR+0x46>
 800a538:	2300      	movs	r3, #0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d10c      	bne.n	800a558 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800a53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a542:	b672      	cpsid	i
 800a544:	f383 8811 	msr	BASEPRI, r3
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	f3bf 8f4f 	dsb	sy
 800a550:	b662      	cpsie	i
 800a552:	623b      	str	r3, [r7, #32]
}
 800a554:	bf00      	nop
 800a556:	e7fe      	b.n	800a556 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	2b02      	cmp	r3, #2
 800a55c:	d103      	bne.n	800a566 <xQueueGenericSendFromISR+0x72>
 800a55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a562:	2b01      	cmp	r3, #1
 800a564:	d101      	bne.n	800a56a <xQueueGenericSendFromISR+0x76>
 800a566:	2301      	movs	r3, #1
 800a568:	e000      	b.n	800a56c <xQueueGenericSendFromISR+0x78>
 800a56a:	2300      	movs	r3, #0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d10c      	bne.n	800a58a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800a570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a574:	b672      	cpsid	i
 800a576:	f383 8811 	msr	BASEPRI, r3
 800a57a:	f3bf 8f6f 	isb	sy
 800a57e:	f3bf 8f4f 	dsb	sy
 800a582:	b662      	cpsie	i
 800a584:	61fb      	str	r3, [r7, #28]
}
 800a586:	bf00      	nop
 800a588:	e7fe      	b.n	800a588 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a58a:	f001 ff6f 	bl	800c46c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a58e:	f3ef 8211 	mrs	r2, BASEPRI
 800a592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a596:	b672      	cpsid	i
 800a598:	f383 8811 	msr	BASEPRI, r3
 800a59c:	f3bf 8f6f 	isb	sy
 800a5a0:	f3bf 8f4f 	dsb	sy
 800a5a4:	b662      	cpsie	i
 800a5a6:	61ba      	str	r2, [r7, #24]
 800a5a8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a5aa:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a5ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d302      	bcc.n	800a5c0 <xQueueGenericSendFromISR+0xcc>
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	2b02      	cmp	r3, #2
 800a5be:	d12c      	bne.n	800a61a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a5ca:	683a      	ldr	r2, [r7, #0]
 800a5cc:	68b9      	ldr	r1, [r7, #8]
 800a5ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5d0:	f000 f916 	bl	800a800 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a5d4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a5d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5dc:	d112      	bne.n	800a604 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d016      	beq.n	800a614 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e8:	3324      	adds	r3, #36	; 0x24
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f000 ff14 	bl	800b418 <xTaskRemoveFromEventList>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d00e      	beq.n	800a614 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00b      	beq.n	800a614 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2201      	movs	r2, #1
 800a600:	601a      	str	r2, [r3, #0]
 800a602:	e007      	b.n	800a614 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a604:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a608:	3301      	adds	r3, #1
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	b25a      	sxtb	r2, r3
 800a60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a614:	2301      	movs	r3, #1
 800a616:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a618:	e001      	b.n	800a61e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a61a:	2300      	movs	r3, #0
 800a61c:	637b      	str	r3, [r7, #52]	; 0x34
 800a61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a620:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a628:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a62a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3738      	adds	r7, #56	; 0x38
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b08c      	sub	sp, #48	; 0x30
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a640:	2300      	movs	r3, #0
 800a642:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d10c      	bne.n	800a668 <xQueueReceive+0x34>
	__asm volatile
 800a64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a652:	b672      	cpsid	i
 800a654:	f383 8811 	msr	BASEPRI, r3
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	b662      	cpsie	i
 800a662:	623b      	str	r3, [r7, #32]
}
 800a664:	bf00      	nop
 800a666:	e7fe      	b.n	800a666 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d103      	bne.n	800a676 <xQueueReceive+0x42>
 800a66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a672:	2b00      	cmp	r3, #0
 800a674:	d101      	bne.n	800a67a <xQueueReceive+0x46>
 800a676:	2301      	movs	r3, #1
 800a678:	e000      	b.n	800a67c <xQueueReceive+0x48>
 800a67a:	2300      	movs	r3, #0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d10c      	bne.n	800a69a <xQueueReceive+0x66>
	__asm volatile
 800a680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a684:	b672      	cpsid	i
 800a686:	f383 8811 	msr	BASEPRI, r3
 800a68a:	f3bf 8f6f 	isb	sy
 800a68e:	f3bf 8f4f 	dsb	sy
 800a692:	b662      	cpsie	i
 800a694:	61fb      	str	r3, [r7, #28]
}
 800a696:	bf00      	nop
 800a698:	e7fe      	b.n	800a698 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a69a:	f001 f8af 	bl	800b7fc <xTaskGetSchedulerState>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d102      	bne.n	800a6aa <xQueueReceive+0x76>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d101      	bne.n	800a6ae <xQueueReceive+0x7a>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e000      	b.n	800a6b0 <xQueueReceive+0x7c>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d10c      	bne.n	800a6ce <xQueueReceive+0x9a>
	__asm volatile
 800a6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6b8:	b672      	cpsid	i
 800a6ba:	f383 8811 	msr	BASEPRI, r3
 800a6be:	f3bf 8f6f 	isb	sy
 800a6c2:	f3bf 8f4f 	dsb	sy
 800a6c6:	b662      	cpsie	i
 800a6c8:	61bb      	str	r3, [r7, #24]
}
 800a6ca:	bf00      	nop
 800a6cc:	e7fe      	b.n	800a6cc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a6ce:	f001 fde5 	bl	800c29c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6d6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d01f      	beq.n	800a71e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a6de:	68b9      	ldr	r1, [r7, #8]
 800a6e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6e2:	f000 f8f7 	bl	800a8d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e8:	1e5a      	subs	r2, r3, #1
 800a6ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ec:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f0:	691b      	ldr	r3, [r3, #16]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00f      	beq.n	800a716 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f8:	3310      	adds	r3, #16
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f000 fe8c 	bl	800b418 <xTaskRemoveFromEventList>
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d007      	beq.n	800a716 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a706:	4b3d      	ldr	r3, [pc, #244]	; (800a7fc <xQueueReceive+0x1c8>)
 800a708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a70c:	601a      	str	r2, [r3, #0]
 800a70e:	f3bf 8f4f 	dsb	sy
 800a712:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a716:	f001 fdf5 	bl	800c304 <vPortExitCritical>
				return pdPASS;
 800a71a:	2301      	movs	r3, #1
 800a71c:	e069      	b.n	800a7f2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d103      	bne.n	800a72c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a724:	f001 fdee 	bl	800c304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a728:	2300      	movs	r3, #0
 800a72a:	e062      	b.n	800a7f2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d106      	bne.n	800a740 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a732:	f107 0310 	add.w	r3, r7, #16
 800a736:	4618      	mov	r0, r3
 800a738:	f000 fefc 	bl	800b534 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a73c:	2301      	movs	r3, #1
 800a73e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a740:	f001 fde0 	bl	800c304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a744:	f000 fc34 	bl	800afb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a748:	f001 fda8 	bl	800c29c <vPortEnterCritical>
 800a74c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a752:	b25b      	sxtb	r3, r3
 800a754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a758:	d103      	bne.n	800a762 <xQueueReceive+0x12e>
 800a75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75c:	2200      	movs	r2, #0
 800a75e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a764:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a768:	b25b      	sxtb	r3, r3
 800a76a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a76e:	d103      	bne.n	800a778 <xQueueReceive+0x144>
 800a770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a772:	2200      	movs	r2, #0
 800a774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a778:	f001 fdc4 	bl	800c304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a77c:	1d3a      	adds	r2, r7, #4
 800a77e:	f107 0310 	add.w	r3, r7, #16
 800a782:	4611      	mov	r1, r2
 800a784:	4618      	mov	r0, r3
 800a786:	f000 feeb 	bl	800b560 <xTaskCheckForTimeOut>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d123      	bne.n	800a7d8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a792:	f000 f917 	bl	800a9c4 <prvIsQueueEmpty>
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d017      	beq.n	800a7cc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79e:	3324      	adds	r3, #36	; 0x24
 800a7a0:	687a      	ldr	r2, [r7, #4]
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f000 fde3 	bl	800b370 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a7aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7ac:	f000 f8b8 	bl	800a920 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a7b0:	f000 fc0c 	bl	800afcc <xTaskResumeAll>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d189      	bne.n	800a6ce <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800a7ba:	4b10      	ldr	r3, [pc, #64]	; (800a7fc <xQueueReceive+0x1c8>)
 800a7bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7c0:	601a      	str	r2, [r3, #0]
 800a7c2:	f3bf 8f4f 	dsb	sy
 800a7c6:	f3bf 8f6f 	isb	sy
 800a7ca:	e780      	b.n	800a6ce <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a7cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7ce:	f000 f8a7 	bl	800a920 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a7d2:	f000 fbfb 	bl	800afcc <xTaskResumeAll>
 800a7d6:	e77a      	b.n	800a6ce <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a7d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7da:	f000 f8a1 	bl	800a920 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a7de:	f000 fbf5 	bl	800afcc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a7e4:	f000 f8ee 	bl	800a9c4 <prvIsQueueEmpty>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	f43f af6f 	beq.w	800a6ce <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a7f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3730      	adds	r7, #48	; 0x30
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	e000ed04 	.word	0xe000ed04

0800a800 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b086      	sub	sp, #24
 800a804:	af00      	add	r7, sp, #0
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a80c:	2300      	movs	r3, #0
 800a80e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a814:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d10d      	bne.n	800a83a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d14d      	bne.n	800a8c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	4618      	mov	r0, r3
 800a82c:	f001 f804 	bl	800b838 <xTaskPriorityDisinherit>
 800a830:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2200      	movs	r2, #0
 800a836:	609a      	str	r2, [r3, #8]
 800a838:	e043      	b.n	800a8c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d119      	bne.n	800a874 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	6858      	ldr	r0, [r3, #4]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a848:	461a      	mov	r2, r3
 800a84a:	68b9      	ldr	r1, [r7, #8]
 800a84c:	f013 fa93 	bl	801dd76 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	685a      	ldr	r2, [r3, #4]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a858:	441a      	add	r2, r3
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	685a      	ldr	r2, [r3, #4]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	429a      	cmp	r2, r3
 800a868:	d32b      	bcc.n	800a8c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	605a      	str	r2, [r3, #4]
 800a872:	e026      	b.n	800a8c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	68d8      	ldr	r0, [r3, #12]
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a87c:	461a      	mov	r2, r3
 800a87e:	68b9      	ldr	r1, [r7, #8]
 800a880:	f013 fa79 	bl	801dd76 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	68da      	ldr	r2, [r3, #12]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a88c:	425b      	negs	r3, r3
 800a88e:	441a      	add	r2, r3
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	68da      	ldr	r2, [r3, #12]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d207      	bcs.n	800a8b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	689a      	ldr	r2, [r3, #8]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8a8:	425b      	negs	r3, r3
 800a8aa:	441a      	add	r2, r3
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	d105      	bne.n	800a8c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d002      	beq.n	800a8c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	1c5a      	adds	r2, r3, #1
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a8ca:	697b      	ldr	r3, [r7, #20]
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3718      	adds	r7, #24
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d018      	beq.n	800a918 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	68da      	ldr	r2, [r3, #12]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ee:	441a      	add	r2, r3
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	68da      	ldr	r2, [r3, #12]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d303      	bcc.n	800a908 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	68d9      	ldr	r1, [r3, #12]
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a910:	461a      	mov	r2, r3
 800a912:	6838      	ldr	r0, [r7, #0]
 800a914:	f013 fa2f 	bl	801dd76 <memcpy>
	}
}
 800a918:	bf00      	nop
 800a91a:	3708      	adds	r7, #8
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a928:	f001 fcb8 	bl	800c29c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a932:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a934:	e011      	b.n	800a95a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d012      	beq.n	800a964 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	3324      	adds	r3, #36	; 0x24
 800a942:	4618      	mov	r0, r3
 800a944:	f000 fd68 	bl	800b418 <xTaskRemoveFromEventList>
 800a948:	4603      	mov	r3, r0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d001      	beq.n	800a952 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a94e:	f000 fe6d 	bl	800b62c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a952:	7bfb      	ldrb	r3, [r7, #15]
 800a954:	3b01      	subs	r3, #1
 800a956:	b2db      	uxtb	r3, r3
 800a958:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a95a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	dce9      	bgt.n	800a936 <prvUnlockQueue+0x16>
 800a962:	e000      	b.n	800a966 <prvUnlockQueue+0x46>
					break;
 800a964:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	22ff      	movs	r2, #255	; 0xff
 800a96a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a96e:	f001 fcc9 	bl	800c304 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a972:	f001 fc93 	bl	800c29c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a97c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a97e:	e011      	b.n	800a9a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	691b      	ldr	r3, [r3, #16]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d012      	beq.n	800a9ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	3310      	adds	r3, #16
 800a98c:	4618      	mov	r0, r3
 800a98e:	f000 fd43 	bl	800b418 <xTaskRemoveFromEventList>
 800a992:	4603      	mov	r3, r0
 800a994:	2b00      	cmp	r3, #0
 800a996:	d001      	beq.n	800a99c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a998:	f000 fe48 	bl	800b62c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a99c:	7bbb      	ldrb	r3, [r7, #14]
 800a99e:	3b01      	subs	r3, #1
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	dce9      	bgt.n	800a980 <prvUnlockQueue+0x60>
 800a9ac:	e000      	b.n	800a9b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a9ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	22ff      	movs	r2, #255	; 0xff
 800a9b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a9b8:	f001 fca4 	bl	800c304 <vPortExitCritical>
}
 800a9bc:	bf00      	nop
 800a9be:	3710      	adds	r7, #16
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a9cc:	f001 fc66 	bl	800c29c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d102      	bne.n	800a9de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	60fb      	str	r3, [r7, #12]
 800a9dc:	e001      	b.n	800a9e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a9e2:	f001 fc8f 	bl	800c304 <vPortExitCritical>

	return xReturn;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a9f8:	f001 fc50 	bl	800c29c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d102      	bne.n	800aa0e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	60fb      	str	r3, [r7, #12]
 800aa0c:	e001      	b.n	800aa12 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa12:	f001 fc77 	bl	800c304 <vPortExitCritical>

	return xReturn;
 800aa16:	68fb      	ldr	r3, [r7, #12]
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3710      	adds	r7, #16
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aa20:	b480      	push	{r7}
 800aa22:	b085      	sub	sp, #20
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	60fb      	str	r3, [r7, #12]
 800aa2e:	e014      	b.n	800aa5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aa30:	4a0f      	ldr	r2, [pc, #60]	; (800aa70 <vQueueAddToRegistry+0x50>)
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d10b      	bne.n	800aa54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aa3c:	490c      	ldr	r1, [pc, #48]	; (800aa70 <vQueueAddToRegistry+0x50>)
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	683a      	ldr	r2, [r7, #0]
 800aa42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aa46:	4a0a      	ldr	r2, [pc, #40]	; (800aa70 <vQueueAddToRegistry+0x50>)
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	00db      	lsls	r3, r3, #3
 800aa4c:	4413      	add	r3, r2
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aa52:	e006      	b.n	800aa62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	3301      	adds	r3, #1
 800aa58:	60fb      	str	r3, [r7, #12]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2b07      	cmp	r3, #7
 800aa5e:	d9e7      	bls.n	800aa30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aa60:	bf00      	nop
 800aa62:	bf00      	nop
 800aa64:	3714      	adds	r7, #20
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop
 800aa70:	200077e4 	.word	0x200077e4

0800aa74 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b086      	sub	sp, #24
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	60b9      	str	r1, [r7, #8]
 800aa7e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aa84:	f001 fc0a 	bl	800c29c <vPortEnterCritical>
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa8e:	b25b      	sxtb	r3, r3
 800aa90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa94:	d103      	bne.n	800aa9e <vQueueWaitForMessageRestricted+0x2a>
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	2200      	movs	r2, #0
 800aa9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aaa4:	b25b      	sxtb	r3, r3
 800aaa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aaaa:	d103      	bne.n	800aab4 <vQueueWaitForMessageRestricted+0x40>
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	2200      	movs	r2, #0
 800aab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aab4:	f001 fc26 	bl	800c304 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d106      	bne.n	800aace <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	3324      	adds	r3, #36	; 0x24
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	68b9      	ldr	r1, [r7, #8]
 800aac8:	4618      	mov	r0, r3
 800aaca:	f000 fc77 	bl	800b3bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aace:	6978      	ldr	r0, [r7, #20]
 800aad0:	f7ff ff26 	bl	800a920 <prvUnlockQueue>
	}
 800aad4:	bf00      	nop
 800aad6:	3718      	adds	r7, #24
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b08e      	sub	sp, #56	; 0x38
 800aae0:	af04      	add	r7, sp, #16
 800aae2:	60f8      	str	r0, [r7, #12]
 800aae4:	60b9      	str	r1, [r7, #8]
 800aae6:	607a      	str	r2, [r7, #4]
 800aae8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aaea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d10c      	bne.n	800ab0a <xTaskCreateStatic+0x2e>
	__asm volatile
 800aaf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf4:	b672      	cpsid	i
 800aaf6:	f383 8811 	msr	BASEPRI, r3
 800aafa:	f3bf 8f6f 	isb	sy
 800aafe:	f3bf 8f4f 	dsb	sy
 800ab02:	b662      	cpsie	i
 800ab04:	623b      	str	r3, [r7, #32]
}
 800ab06:	bf00      	nop
 800ab08:	e7fe      	b.n	800ab08 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ab0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d10c      	bne.n	800ab2a <xTaskCreateStatic+0x4e>
	__asm volatile
 800ab10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab14:	b672      	cpsid	i
 800ab16:	f383 8811 	msr	BASEPRI, r3
 800ab1a:	f3bf 8f6f 	isb	sy
 800ab1e:	f3bf 8f4f 	dsb	sy
 800ab22:	b662      	cpsie	i
 800ab24:	61fb      	str	r3, [r7, #28]
}
 800ab26:	bf00      	nop
 800ab28:	e7fe      	b.n	800ab28 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab2a:	23a8      	movs	r3, #168	; 0xa8
 800ab2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	2ba8      	cmp	r3, #168	; 0xa8
 800ab32:	d00c      	beq.n	800ab4e <xTaskCreateStatic+0x72>
	__asm volatile
 800ab34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab38:	b672      	cpsid	i
 800ab3a:	f383 8811 	msr	BASEPRI, r3
 800ab3e:	f3bf 8f6f 	isb	sy
 800ab42:	f3bf 8f4f 	dsb	sy
 800ab46:	b662      	cpsie	i
 800ab48:	61bb      	str	r3, [r7, #24]
}
 800ab4a:	bf00      	nop
 800ab4c:	e7fe      	b.n	800ab4c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ab4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ab50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d01e      	beq.n	800ab94 <xTaskCreateStatic+0xb8>
 800ab56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d01b      	beq.n	800ab94 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ab5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab5e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ab60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab64:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ab66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab68:	2202      	movs	r2, #2
 800ab6a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ab6e:	2300      	movs	r3, #0
 800ab70:	9303      	str	r3, [sp, #12]
 800ab72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab74:	9302      	str	r3, [sp, #8]
 800ab76:	f107 0314 	add.w	r3, r7, #20
 800ab7a:	9301      	str	r3, [sp, #4]
 800ab7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab7e:	9300      	str	r3, [sp, #0]
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	68b9      	ldr	r1, [r7, #8]
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	f000 f850 	bl	800ac2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab8e:	f000 f8f5 	bl	800ad7c <prvAddNewTaskToReadyList>
 800ab92:	e001      	b.n	800ab98 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800ab94:	2300      	movs	r3, #0
 800ab96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ab98:	697b      	ldr	r3, [r7, #20]
	}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3728      	adds	r7, #40	; 0x28
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}

0800aba2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b08c      	sub	sp, #48	; 0x30
 800aba6:	af04      	add	r7, sp, #16
 800aba8:	60f8      	str	r0, [r7, #12]
 800abaa:	60b9      	str	r1, [r7, #8]
 800abac:	603b      	str	r3, [r7, #0]
 800abae:	4613      	mov	r3, r2
 800abb0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800abb2:	88fb      	ldrh	r3, [r7, #6]
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	4618      	mov	r0, r3
 800abb8:	f001 fc9c 	bl	800c4f4 <pvPortMalloc>
 800abbc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d00e      	beq.n	800abe2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800abc4:	20a8      	movs	r0, #168	; 0xa8
 800abc6:	f001 fc95 	bl	800c4f4 <pvPortMalloc>
 800abca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800abcc:	69fb      	ldr	r3, [r7, #28]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d003      	beq.n	800abda <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800abd2:	69fb      	ldr	r3, [r7, #28]
 800abd4:	697a      	ldr	r2, [r7, #20]
 800abd6:	631a      	str	r2, [r3, #48]	; 0x30
 800abd8:	e005      	b.n	800abe6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800abda:	6978      	ldr	r0, [r7, #20]
 800abdc:	f001 fd54 	bl	800c688 <vPortFree>
 800abe0:	e001      	b.n	800abe6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800abe2:	2300      	movs	r3, #0
 800abe4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800abe6:	69fb      	ldr	r3, [r7, #28]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d017      	beq.n	800ac1c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	2200      	movs	r2, #0
 800abf0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800abf4:	88fa      	ldrh	r2, [r7, #6]
 800abf6:	2300      	movs	r3, #0
 800abf8:	9303      	str	r3, [sp, #12]
 800abfa:	69fb      	ldr	r3, [r7, #28]
 800abfc:	9302      	str	r3, [sp, #8]
 800abfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac00:	9301      	str	r3, [sp, #4]
 800ac02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac04:	9300      	str	r3, [sp, #0]
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	68b9      	ldr	r1, [r7, #8]
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	f000 f80e 	bl	800ac2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac10:	69f8      	ldr	r0, [r7, #28]
 800ac12:	f000 f8b3 	bl	800ad7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ac16:	2301      	movs	r3, #1
 800ac18:	61bb      	str	r3, [r7, #24]
 800ac1a:	e002      	b.n	800ac22 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac20:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ac22:	69bb      	ldr	r3, [r7, #24]
	}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3720      	adds	r7, #32
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}

0800ac2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b088      	sub	sp, #32
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	60f8      	str	r0, [r7, #12]
 800ac34:	60b9      	str	r1, [r7, #8]
 800ac36:	607a      	str	r2, [r7, #4]
 800ac38:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ac3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	461a      	mov	r2, r3
 800ac44:	21a5      	movs	r1, #165	; 0xa5
 800ac46:	f012 ff65 	bl	801db14 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ac4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac4e:	6879      	ldr	r1, [r7, #4]
 800ac50:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ac54:	440b      	add	r3, r1
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	4413      	add	r3, r2
 800ac5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ac5c:	69bb      	ldr	r3, [r7, #24]
 800ac5e:	f023 0307 	bic.w	r3, r3, #7
 800ac62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ac64:	69bb      	ldr	r3, [r7, #24]
 800ac66:	f003 0307 	and.w	r3, r3, #7
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d00c      	beq.n	800ac88 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800ac6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac72:	b672      	cpsid	i
 800ac74:	f383 8811 	msr	BASEPRI, r3
 800ac78:	f3bf 8f6f 	isb	sy
 800ac7c:	f3bf 8f4f 	dsb	sy
 800ac80:	b662      	cpsie	i
 800ac82:	617b      	str	r3, [r7, #20]
}
 800ac84:	bf00      	nop
 800ac86:	e7fe      	b.n	800ac86 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d01f      	beq.n	800acce <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ac8e:	2300      	movs	r3, #0
 800ac90:	61fb      	str	r3, [r7, #28]
 800ac92:	e012      	b.n	800acba <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ac94:	68ba      	ldr	r2, [r7, #8]
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	4413      	add	r3, r2
 800ac9a:	7819      	ldrb	r1, [r3, #0]
 800ac9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac9e:	69fb      	ldr	r3, [r7, #28]
 800aca0:	4413      	add	r3, r2
 800aca2:	3334      	adds	r3, #52	; 0x34
 800aca4:	460a      	mov	r2, r1
 800aca6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aca8:	68ba      	ldr	r2, [r7, #8]
 800acaa:	69fb      	ldr	r3, [r7, #28]
 800acac:	4413      	add	r3, r2
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d006      	beq.n	800acc2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	3301      	adds	r3, #1
 800acb8:	61fb      	str	r3, [r7, #28]
 800acba:	69fb      	ldr	r3, [r7, #28]
 800acbc:	2b0f      	cmp	r3, #15
 800acbe:	d9e9      	bls.n	800ac94 <prvInitialiseNewTask+0x68>
 800acc0:	e000      	b.n	800acc4 <prvInitialiseNewTask+0x98>
			{
				break;
 800acc2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800acc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc6:	2200      	movs	r2, #0
 800acc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800accc:	e003      	b.n	800acd6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800acce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd0:	2200      	movs	r2, #0
 800acd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800acd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd8:	2b37      	cmp	r3, #55	; 0x37
 800acda:	d901      	bls.n	800ace0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800acdc:	2337      	movs	r3, #55	; 0x37
 800acde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ace0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ace4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ace6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ace8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800acec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acee:	2200      	movs	r2, #0
 800acf0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800acf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf4:	3304      	adds	r3, #4
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7ff f952 	bl	8009fa0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800acfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfe:	3318      	adds	r3, #24
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7ff f94d 	bl	8009fa0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ad06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ad12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ad16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ad1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ad24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad26:	2200      	movs	r2, #0
 800ad28:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ad2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad2e:	3354      	adds	r3, #84	; 0x54
 800ad30:	224c      	movs	r2, #76	; 0x4c
 800ad32:	2100      	movs	r1, #0
 800ad34:	4618      	mov	r0, r3
 800ad36:	f012 feed 	bl	801db14 <memset>
 800ad3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3c:	4a0c      	ldr	r2, [pc, #48]	; (800ad70 <prvInitialiseNewTask+0x144>)
 800ad3e:	659a      	str	r2, [r3, #88]	; 0x58
 800ad40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad42:	4a0c      	ldr	r2, [pc, #48]	; (800ad74 <prvInitialiseNewTask+0x148>)
 800ad44:	65da      	str	r2, [r3, #92]	; 0x5c
 800ad46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad48:	4a0b      	ldr	r2, [pc, #44]	; (800ad78 <prvInitialiseNewTask+0x14c>)
 800ad4a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ad4c:	683a      	ldr	r2, [r7, #0]
 800ad4e:	68f9      	ldr	r1, [r7, #12]
 800ad50:	69b8      	ldr	r0, [r7, #24]
 800ad52:	f001 f993 	bl	800c07c <pxPortInitialiseStack>
 800ad56:	4602      	mov	r2, r0
 800ad58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad5a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ad5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d002      	beq.n	800ad68 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ad62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad68:	bf00      	nop
 800ad6a:	3720      	adds	r7, #32
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	20010d50 	.word	0x20010d50
 800ad74:	20010db8 	.word	0x20010db8
 800ad78:	20010e20 	.word	0x20010e20

0800ad7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b082      	sub	sp, #8
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ad84:	f001 fa8a 	bl	800c29c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ad88:	4b2d      	ldr	r3, [pc, #180]	; (800ae40 <prvAddNewTaskToReadyList+0xc4>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	4a2c      	ldr	r2, [pc, #176]	; (800ae40 <prvAddNewTaskToReadyList+0xc4>)
 800ad90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ad92:	4b2c      	ldr	r3, [pc, #176]	; (800ae44 <prvAddNewTaskToReadyList+0xc8>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d109      	bne.n	800adae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ad9a:	4a2a      	ldr	r2, [pc, #168]	; (800ae44 <prvAddNewTaskToReadyList+0xc8>)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ada0:	4b27      	ldr	r3, [pc, #156]	; (800ae40 <prvAddNewTaskToReadyList+0xc4>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d110      	bne.n	800adca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ada8:	f000 fc64 	bl	800b674 <prvInitialiseTaskLists>
 800adac:	e00d      	b.n	800adca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800adae:	4b26      	ldr	r3, [pc, #152]	; (800ae48 <prvAddNewTaskToReadyList+0xcc>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d109      	bne.n	800adca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800adb6:	4b23      	ldr	r3, [pc, #140]	; (800ae44 <prvAddNewTaskToReadyList+0xc8>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d802      	bhi.n	800adca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800adc4:	4a1f      	ldr	r2, [pc, #124]	; (800ae44 <prvAddNewTaskToReadyList+0xc8>)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800adca:	4b20      	ldr	r3, [pc, #128]	; (800ae4c <prvAddNewTaskToReadyList+0xd0>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	3301      	adds	r3, #1
 800add0:	4a1e      	ldr	r2, [pc, #120]	; (800ae4c <prvAddNewTaskToReadyList+0xd0>)
 800add2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800add4:	4b1d      	ldr	r3, [pc, #116]	; (800ae4c <prvAddNewTaskToReadyList+0xd0>)
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade0:	4b1b      	ldr	r3, [pc, #108]	; (800ae50 <prvAddNewTaskToReadyList+0xd4>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d903      	bls.n	800adf0 <prvAddNewTaskToReadyList+0x74>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adec:	4a18      	ldr	r2, [pc, #96]	; (800ae50 <prvAddNewTaskToReadyList+0xd4>)
 800adee:	6013      	str	r3, [r2, #0]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adf4:	4613      	mov	r3, r2
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	4413      	add	r3, r2
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	4a15      	ldr	r2, [pc, #84]	; (800ae54 <prvAddNewTaskToReadyList+0xd8>)
 800adfe:	441a      	add	r2, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	3304      	adds	r3, #4
 800ae04:	4619      	mov	r1, r3
 800ae06:	4610      	mov	r0, r2
 800ae08:	f7ff f8d7 	bl	8009fba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ae0c:	f001 fa7a 	bl	800c304 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ae10:	4b0d      	ldr	r3, [pc, #52]	; (800ae48 <prvAddNewTaskToReadyList+0xcc>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d00e      	beq.n	800ae36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ae18:	4b0a      	ldr	r3, [pc, #40]	; (800ae44 <prvAddNewTaskToReadyList+0xc8>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d207      	bcs.n	800ae36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ae26:	4b0c      	ldr	r3, [pc, #48]	; (800ae58 <prvAddNewTaskToReadyList+0xdc>)
 800ae28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae2c:	601a      	str	r2, [r3, #0]
 800ae2e:	f3bf 8f4f 	dsb	sy
 800ae32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae36:	bf00      	nop
 800ae38:	3708      	adds	r7, #8
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	bf00      	nop
 800ae40:	20007cf8 	.word	0x20007cf8
 800ae44:	20007824 	.word	0x20007824
 800ae48:	20007d04 	.word	0x20007d04
 800ae4c:	20007d14 	.word	0x20007d14
 800ae50:	20007d00 	.word	0x20007d00
 800ae54:	20007828 	.word	0x20007828
 800ae58:	e000ed04 	.word	0xe000ed04

0800ae5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ae64:	2300      	movs	r3, #0
 800ae66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d019      	beq.n	800aea2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ae6e:	4b14      	ldr	r3, [pc, #80]	; (800aec0 <vTaskDelay+0x64>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d00c      	beq.n	800ae90 <vTaskDelay+0x34>
	__asm volatile
 800ae76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae7a:	b672      	cpsid	i
 800ae7c:	f383 8811 	msr	BASEPRI, r3
 800ae80:	f3bf 8f6f 	isb	sy
 800ae84:	f3bf 8f4f 	dsb	sy
 800ae88:	b662      	cpsie	i
 800ae8a:	60bb      	str	r3, [r7, #8]
}
 800ae8c:	bf00      	nop
 800ae8e:	e7fe      	b.n	800ae8e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800ae90:	f000 f88e 	bl	800afb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ae94:	2100      	movs	r1, #0
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 fd40 	bl	800b91c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ae9c:	f000 f896 	bl	800afcc <xTaskResumeAll>
 800aea0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d107      	bne.n	800aeb8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800aea8:	4b06      	ldr	r3, [pc, #24]	; (800aec4 <vTaskDelay+0x68>)
 800aeaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeae:	601a      	str	r2, [r3, #0]
 800aeb0:	f3bf 8f4f 	dsb	sy
 800aeb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aeb8:	bf00      	nop
 800aeba:	3710      	adds	r7, #16
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	20007d20 	.word	0x20007d20
 800aec4:	e000ed04 	.word	0xe000ed04

0800aec8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b08a      	sub	sp, #40	; 0x28
 800aecc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800aece:	2300      	movs	r3, #0
 800aed0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800aed2:	2300      	movs	r3, #0
 800aed4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800aed6:	463a      	mov	r2, r7
 800aed8:	1d39      	adds	r1, r7, #4
 800aeda:	f107 0308 	add.w	r3, r7, #8
 800aede:	4618      	mov	r0, r3
 800aee0:	f7ff f80a 	bl	8009ef8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800aee4:	6839      	ldr	r1, [r7, #0]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	68ba      	ldr	r2, [r7, #8]
 800aeea:	9202      	str	r2, [sp, #8]
 800aeec:	9301      	str	r3, [sp, #4]
 800aeee:	2300      	movs	r3, #0
 800aef0:	9300      	str	r3, [sp, #0]
 800aef2:	2300      	movs	r3, #0
 800aef4:	460a      	mov	r2, r1
 800aef6:	4926      	ldr	r1, [pc, #152]	; (800af90 <vTaskStartScheduler+0xc8>)
 800aef8:	4826      	ldr	r0, [pc, #152]	; (800af94 <vTaskStartScheduler+0xcc>)
 800aefa:	f7ff fdef 	bl	800aadc <xTaskCreateStatic>
 800aefe:	4603      	mov	r3, r0
 800af00:	4a25      	ldr	r2, [pc, #148]	; (800af98 <vTaskStartScheduler+0xd0>)
 800af02:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800af04:	4b24      	ldr	r3, [pc, #144]	; (800af98 <vTaskStartScheduler+0xd0>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d002      	beq.n	800af12 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800af0c:	2301      	movs	r3, #1
 800af0e:	617b      	str	r3, [r7, #20]
 800af10:	e001      	b.n	800af16 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800af12:	2300      	movs	r3, #0
 800af14:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d102      	bne.n	800af22 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800af1c:	f000 fd52 	bl	800b9c4 <xTimerCreateTimerTask>
 800af20:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	2b01      	cmp	r3, #1
 800af26:	d11d      	bne.n	800af64 <vTaskStartScheduler+0x9c>
	__asm volatile
 800af28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af2c:	b672      	cpsid	i
 800af2e:	f383 8811 	msr	BASEPRI, r3
 800af32:	f3bf 8f6f 	isb	sy
 800af36:	f3bf 8f4f 	dsb	sy
 800af3a:	b662      	cpsie	i
 800af3c:	613b      	str	r3, [r7, #16]
}
 800af3e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800af40:	4b16      	ldr	r3, [pc, #88]	; (800af9c <vTaskStartScheduler+0xd4>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	3354      	adds	r3, #84	; 0x54
 800af46:	4a16      	ldr	r2, [pc, #88]	; (800afa0 <vTaskStartScheduler+0xd8>)
 800af48:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800af4a:	4b16      	ldr	r3, [pc, #88]	; (800afa4 <vTaskStartScheduler+0xdc>)
 800af4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af50:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800af52:	4b15      	ldr	r3, [pc, #84]	; (800afa8 <vTaskStartScheduler+0xe0>)
 800af54:	2201      	movs	r2, #1
 800af56:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800af58:	4b14      	ldr	r3, [pc, #80]	; (800afac <vTaskStartScheduler+0xe4>)
 800af5a:	2200      	movs	r2, #0
 800af5c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800af5e:	f001 f91f 	bl	800c1a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800af62:	e010      	b.n	800af86 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af6a:	d10c      	bne.n	800af86 <vTaskStartScheduler+0xbe>
	__asm volatile
 800af6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af70:	b672      	cpsid	i
 800af72:	f383 8811 	msr	BASEPRI, r3
 800af76:	f3bf 8f6f 	isb	sy
 800af7a:	f3bf 8f4f 	dsb	sy
 800af7e:	b662      	cpsie	i
 800af80:	60fb      	str	r3, [r7, #12]
}
 800af82:	bf00      	nop
 800af84:	e7fe      	b.n	800af84 <vTaskStartScheduler+0xbc>
}
 800af86:	bf00      	nop
 800af88:	3718      	adds	r7, #24
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	0801eba0 	.word	0x0801eba0
 800af94:	0800b645 	.word	0x0800b645
 800af98:	20007d1c 	.word	0x20007d1c
 800af9c:	20007824 	.word	0x20007824
 800afa0:	20002338 	.word	0x20002338
 800afa4:	20007d18 	.word	0x20007d18
 800afa8:	20007d04 	.word	0x20007d04
 800afac:	20007cfc 	.word	0x20007cfc

0800afb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800afb0:	b480      	push	{r7}
 800afb2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800afb4:	4b04      	ldr	r3, [pc, #16]	; (800afc8 <vTaskSuspendAll+0x18>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	3301      	adds	r3, #1
 800afba:	4a03      	ldr	r2, [pc, #12]	; (800afc8 <vTaskSuspendAll+0x18>)
 800afbc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800afbe:	bf00      	nop
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr
 800afc8:	20007d20 	.word	0x20007d20

0800afcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800afd2:	2300      	movs	r3, #0
 800afd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800afd6:	2300      	movs	r3, #0
 800afd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800afda:	4b43      	ldr	r3, [pc, #268]	; (800b0e8 <xTaskResumeAll+0x11c>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d10c      	bne.n	800affc <xTaskResumeAll+0x30>
	__asm volatile
 800afe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe6:	b672      	cpsid	i
 800afe8:	f383 8811 	msr	BASEPRI, r3
 800afec:	f3bf 8f6f 	isb	sy
 800aff0:	f3bf 8f4f 	dsb	sy
 800aff4:	b662      	cpsie	i
 800aff6:	603b      	str	r3, [r7, #0]
}
 800aff8:	bf00      	nop
 800affa:	e7fe      	b.n	800affa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800affc:	f001 f94e 	bl	800c29c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b000:	4b39      	ldr	r3, [pc, #228]	; (800b0e8 <xTaskResumeAll+0x11c>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	3b01      	subs	r3, #1
 800b006:	4a38      	ldr	r2, [pc, #224]	; (800b0e8 <xTaskResumeAll+0x11c>)
 800b008:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b00a:	4b37      	ldr	r3, [pc, #220]	; (800b0e8 <xTaskResumeAll+0x11c>)
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d162      	bne.n	800b0d8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b012:	4b36      	ldr	r3, [pc, #216]	; (800b0ec <xTaskResumeAll+0x120>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d05e      	beq.n	800b0d8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b01a:	e02f      	b.n	800b07c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b01c:	4b34      	ldr	r3, [pc, #208]	; (800b0f0 <xTaskResumeAll+0x124>)
 800b01e:	68db      	ldr	r3, [r3, #12]
 800b020:	68db      	ldr	r3, [r3, #12]
 800b022:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	3318      	adds	r3, #24
 800b028:	4618      	mov	r0, r3
 800b02a:	f7ff f823 	bl	800a074 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	3304      	adds	r3, #4
 800b032:	4618      	mov	r0, r3
 800b034:	f7ff f81e 	bl	800a074 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b03c:	4b2d      	ldr	r3, [pc, #180]	; (800b0f4 <xTaskResumeAll+0x128>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	429a      	cmp	r2, r3
 800b042:	d903      	bls.n	800b04c <xTaskResumeAll+0x80>
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b048:	4a2a      	ldr	r2, [pc, #168]	; (800b0f4 <xTaskResumeAll+0x128>)
 800b04a:	6013      	str	r3, [r2, #0]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b050:	4613      	mov	r3, r2
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	4413      	add	r3, r2
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	4a27      	ldr	r2, [pc, #156]	; (800b0f8 <xTaskResumeAll+0x12c>)
 800b05a:	441a      	add	r2, r3
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	3304      	adds	r3, #4
 800b060:	4619      	mov	r1, r3
 800b062:	4610      	mov	r0, r2
 800b064:	f7fe ffa9 	bl	8009fba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b06c:	4b23      	ldr	r3, [pc, #140]	; (800b0fc <xTaskResumeAll+0x130>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b072:	429a      	cmp	r2, r3
 800b074:	d302      	bcc.n	800b07c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800b076:	4b22      	ldr	r3, [pc, #136]	; (800b100 <xTaskResumeAll+0x134>)
 800b078:	2201      	movs	r2, #1
 800b07a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b07c:	4b1c      	ldr	r3, [pc, #112]	; (800b0f0 <xTaskResumeAll+0x124>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d1cb      	bne.n	800b01c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d001      	beq.n	800b08e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b08a:	f000 fb97 	bl	800b7bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b08e:	4b1d      	ldr	r3, [pc, #116]	; (800b104 <xTaskResumeAll+0x138>)
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d010      	beq.n	800b0bc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b09a:	f000 f847 	bl	800b12c <xTaskIncrementTick>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d002      	beq.n	800b0aa <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800b0a4:	4b16      	ldr	r3, [pc, #88]	; (800b100 <xTaskResumeAll+0x134>)
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	3b01      	subs	r3, #1
 800b0ae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d1f1      	bne.n	800b09a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800b0b6:	4b13      	ldr	r3, [pc, #76]	; (800b104 <xTaskResumeAll+0x138>)
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b0bc:	4b10      	ldr	r3, [pc, #64]	; (800b100 <xTaskResumeAll+0x134>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d009      	beq.n	800b0d8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b0c8:	4b0f      	ldr	r3, [pc, #60]	; (800b108 <xTaskResumeAll+0x13c>)
 800b0ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0ce:	601a      	str	r2, [r3, #0]
 800b0d0:	f3bf 8f4f 	dsb	sy
 800b0d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b0d8:	f001 f914 	bl	800c304 <vPortExitCritical>

	return xAlreadyYielded;
 800b0dc:	68bb      	ldr	r3, [r7, #8]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	20007d20 	.word	0x20007d20
 800b0ec:	20007cf8 	.word	0x20007cf8
 800b0f0:	20007cb8 	.word	0x20007cb8
 800b0f4:	20007d00 	.word	0x20007d00
 800b0f8:	20007828 	.word	0x20007828
 800b0fc:	20007824 	.word	0x20007824
 800b100:	20007d0c 	.word	0x20007d0c
 800b104:	20007d08 	.word	0x20007d08
 800b108:	e000ed04 	.word	0xe000ed04

0800b10c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b112:	4b05      	ldr	r3, [pc, #20]	; (800b128 <xTaskGetTickCount+0x1c>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b118:	687b      	ldr	r3, [r7, #4]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	370c      	adds	r7, #12
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop
 800b128:	20007cfc 	.word	0x20007cfc

0800b12c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b086      	sub	sp, #24
 800b130:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b132:	2300      	movs	r3, #0
 800b134:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b136:	4b50      	ldr	r3, [pc, #320]	; (800b278 <xTaskIncrementTick+0x14c>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	f040 808b 	bne.w	800b256 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b140:	4b4e      	ldr	r3, [pc, #312]	; (800b27c <xTaskIncrementTick+0x150>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	3301      	adds	r3, #1
 800b146:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b148:	4a4c      	ldr	r2, [pc, #304]	; (800b27c <xTaskIncrementTick+0x150>)
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d122      	bne.n	800b19a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b154:	4b4a      	ldr	r3, [pc, #296]	; (800b280 <xTaskIncrementTick+0x154>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d00c      	beq.n	800b178 <xTaskIncrementTick+0x4c>
	__asm volatile
 800b15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b162:	b672      	cpsid	i
 800b164:	f383 8811 	msr	BASEPRI, r3
 800b168:	f3bf 8f6f 	isb	sy
 800b16c:	f3bf 8f4f 	dsb	sy
 800b170:	b662      	cpsie	i
 800b172:	603b      	str	r3, [r7, #0]
}
 800b174:	bf00      	nop
 800b176:	e7fe      	b.n	800b176 <xTaskIncrementTick+0x4a>
 800b178:	4b41      	ldr	r3, [pc, #260]	; (800b280 <xTaskIncrementTick+0x154>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	60fb      	str	r3, [r7, #12]
 800b17e:	4b41      	ldr	r3, [pc, #260]	; (800b284 <xTaskIncrementTick+0x158>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4a3f      	ldr	r2, [pc, #252]	; (800b280 <xTaskIncrementTick+0x154>)
 800b184:	6013      	str	r3, [r2, #0]
 800b186:	4a3f      	ldr	r2, [pc, #252]	; (800b284 <xTaskIncrementTick+0x158>)
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	6013      	str	r3, [r2, #0]
 800b18c:	4b3e      	ldr	r3, [pc, #248]	; (800b288 <xTaskIncrementTick+0x15c>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	3301      	adds	r3, #1
 800b192:	4a3d      	ldr	r2, [pc, #244]	; (800b288 <xTaskIncrementTick+0x15c>)
 800b194:	6013      	str	r3, [r2, #0]
 800b196:	f000 fb11 	bl	800b7bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b19a:	4b3c      	ldr	r3, [pc, #240]	; (800b28c <xTaskIncrementTick+0x160>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	693a      	ldr	r2, [r7, #16]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d349      	bcc.n	800b238 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b1a4:	4b36      	ldr	r3, [pc, #216]	; (800b280 <xTaskIncrementTick+0x154>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d104      	bne.n	800b1b8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1ae:	4b37      	ldr	r3, [pc, #220]	; (800b28c <xTaskIncrementTick+0x160>)
 800b1b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b1b4:	601a      	str	r2, [r3, #0]
					break;
 800b1b6:	e03f      	b.n	800b238 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1b8:	4b31      	ldr	r3, [pc, #196]	; (800b280 <xTaskIncrementTick+0x154>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b1c8:	693a      	ldr	r2, [r7, #16]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	429a      	cmp	r2, r3
 800b1ce:	d203      	bcs.n	800b1d8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b1d0:	4a2e      	ldr	r2, [pc, #184]	; (800b28c <xTaskIncrementTick+0x160>)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b1d6:	e02f      	b.n	800b238 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	3304      	adds	r3, #4
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f7fe ff49 	bl	800a074 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d004      	beq.n	800b1f4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	3318      	adds	r3, #24
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f7fe ff40 	bl	800a074 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1f8:	4b25      	ldr	r3, [pc, #148]	; (800b290 <xTaskIncrementTick+0x164>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d903      	bls.n	800b208 <xTaskIncrementTick+0xdc>
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b204:	4a22      	ldr	r2, [pc, #136]	; (800b290 <xTaskIncrementTick+0x164>)
 800b206:	6013      	str	r3, [r2, #0]
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b20c:	4613      	mov	r3, r2
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	4413      	add	r3, r2
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	4a1f      	ldr	r2, [pc, #124]	; (800b294 <xTaskIncrementTick+0x168>)
 800b216:	441a      	add	r2, r3
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	3304      	adds	r3, #4
 800b21c:	4619      	mov	r1, r3
 800b21e:	4610      	mov	r0, r2
 800b220:	f7fe fecb 	bl	8009fba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b228:	4b1b      	ldr	r3, [pc, #108]	; (800b298 <xTaskIncrementTick+0x16c>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22e:	429a      	cmp	r2, r3
 800b230:	d3b8      	bcc.n	800b1a4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800b232:	2301      	movs	r3, #1
 800b234:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b236:	e7b5      	b.n	800b1a4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b238:	4b17      	ldr	r3, [pc, #92]	; (800b298 <xTaskIncrementTick+0x16c>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b23e:	4915      	ldr	r1, [pc, #84]	; (800b294 <xTaskIncrementTick+0x168>)
 800b240:	4613      	mov	r3, r2
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	4413      	add	r3, r2
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	440b      	add	r3, r1
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d907      	bls.n	800b260 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800b250:	2301      	movs	r3, #1
 800b252:	617b      	str	r3, [r7, #20]
 800b254:	e004      	b.n	800b260 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b256:	4b11      	ldr	r3, [pc, #68]	; (800b29c <xTaskIncrementTick+0x170>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	3301      	adds	r3, #1
 800b25c:	4a0f      	ldr	r2, [pc, #60]	; (800b29c <xTaskIncrementTick+0x170>)
 800b25e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b260:	4b0f      	ldr	r3, [pc, #60]	; (800b2a0 <xTaskIncrementTick+0x174>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d001      	beq.n	800b26c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800b268:	2301      	movs	r3, #1
 800b26a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b26c:	697b      	ldr	r3, [r7, #20]
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3718      	adds	r7, #24
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	20007d20 	.word	0x20007d20
 800b27c:	20007cfc 	.word	0x20007cfc
 800b280:	20007cb0 	.word	0x20007cb0
 800b284:	20007cb4 	.word	0x20007cb4
 800b288:	20007d10 	.word	0x20007d10
 800b28c:	20007d18 	.word	0x20007d18
 800b290:	20007d00 	.word	0x20007d00
 800b294:	20007828 	.word	0x20007828
 800b298:	20007824 	.word	0x20007824
 800b29c:	20007d08 	.word	0x20007d08
 800b2a0:	20007d0c 	.word	0x20007d0c

0800b2a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b085      	sub	sp, #20
 800b2a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b2aa:	4b2b      	ldr	r3, [pc, #172]	; (800b358 <vTaskSwitchContext+0xb4>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d003      	beq.n	800b2ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b2b2:	4b2a      	ldr	r3, [pc, #168]	; (800b35c <vTaskSwitchContext+0xb8>)
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b2b8:	e048      	b.n	800b34c <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800b2ba:	4b28      	ldr	r3, [pc, #160]	; (800b35c <vTaskSwitchContext+0xb8>)
 800b2bc:	2200      	movs	r2, #0
 800b2be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2c0:	4b27      	ldr	r3, [pc, #156]	; (800b360 <vTaskSwitchContext+0xbc>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	60fb      	str	r3, [r7, #12]
 800b2c6:	e012      	b.n	800b2ee <vTaskSwitchContext+0x4a>
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d10c      	bne.n	800b2e8 <vTaskSwitchContext+0x44>
	__asm volatile
 800b2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2d2:	b672      	cpsid	i
 800b2d4:	f383 8811 	msr	BASEPRI, r3
 800b2d8:	f3bf 8f6f 	isb	sy
 800b2dc:	f3bf 8f4f 	dsb	sy
 800b2e0:	b662      	cpsie	i
 800b2e2:	607b      	str	r3, [r7, #4]
}
 800b2e4:	bf00      	nop
 800b2e6:	e7fe      	b.n	800b2e6 <vTaskSwitchContext+0x42>
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	60fb      	str	r3, [r7, #12]
 800b2ee:	491d      	ldr	r1, [pc, #116]	; (800b364 <vTaskSwitchContext+0xc0>)
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	009b      	lsls	r3, r3, #2
 800b2f6:	4413      	add	r3, r2
 800b2f8:	009b      	lsls	r3, r3, #2
 800b2fa:	440b      	add	r3, r1
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d0e2      	beq.n	800b2c8 <vTaskSwitchContext+0x24>
 800b302:	68fa      	ldr	r2, [r7, #12]
 800b304:	4613      	mov	r3, r2
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	4413      	add	r3, r2
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	4a15      	ldr	r2, [pc, #84]	; (800b364 <vTaskSwitchContext+0xc0>)
 800b30e:	4413      	add	r3, r2
 800b310:	60bb      	str	r3, [r7, #8]
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	685a      	ldr	r2, [r3, #4]
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	605a      	str	r2, [r3, #4]
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	685a      	ldr	r2, [r3, #4]
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	3308      	adds	r3, #8
 800b324:	429a      	cmp	r2, r3
 800b326:	d104      	bne.n	800b332 <vTaskSwitchContext+0x8e>
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	685a      	ldr	r2, [r3, #4]
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	605a      	str	r2, [r3, #4]
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	4a0b      	ldr	r2, [pc, #44]	; (800b368 <vTaskSwitchContext+0xc4>)
 800b33a:	6013      	str	r3, [r2, #0]
 800b33c:	4a08      	ldr	r2, [pc, #32]	; (800b360 <vTaskSwitchContext+0xbc>)
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b342:	4b09      	ldr	r3, [pc, #36]	; (800b368 <vTaskSwitchContext+0xc4>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	3354      	adds	r3, #84	; 0x54
 800b348:	4a08      	ldr	r2, [pc, #32]	; (800b36c <vTaskSwitchContext+0xc8>)
 800b34a:	6013      	str	r3, [r2, #0]
}
 800b34c:	bf00      	nop
 800b34e:	3714      	adds	r7, #20
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr
 800b358:	20007d20 	.word	0x20007d20
 800b35c:	20007d0c 	.word	0x20007d0c
 800b360:	20007d00 	.word	0x20007d00
 800b364:	20007828 	.word	0x20007828
 800b368:	20007824 	.word	0x20007824
 800b36c:	20002338 	.word	0x20002338

0800b370 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d10c      	bne.n	800b39a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800b380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b384:	b672      	cpsid	i
 800b386:	f383 8811 	msr	BASEPRI, r3
 800b38a:	f3bf 8f6f 	isb	sy
 800b38e:	f3bf 8f4f 	dsb	sy
 800b392:	b662      	cpsie	i
 800b394:	60fb      	str	r3, [r7, #12]
}
 800b396:	bf00      	nop
 800b398:	e7fe      	b.n	800b398 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b39a:	4b07      	ldr	r3, [pc, #28]	; (800b3b8 <vTaskPlaceOnEventList+0x48>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	3318      	adds	r3, #24
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f7fe fe2d 	bl	800a002 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b3a8:	2101      	movs	r1, #1
 800b3aa:	6838      	ldr	r0, [r7, #0]
 800b3ac:	f000 fab6 	bl	800b91c <prvAddCurrentTaskToDelayedList>
}
 800b3b0:	bf00      	nop
 800b3b2:	3710      	adds	r7, #16
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	20007824 	.word	0x20007824

0800b3bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b086      	sub	sp, #24
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	60f8      	str	r0, [r7, #12]
 800b3c4:	60b9      	str	r1, [r7, #8]
 800b3c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d10c      	bne.n	800b3e8 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800b3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d2:	b672      	cpsid	i
 800b3d4:	f383 8811 	msr	BASEPRI, r3
 800b3d8:	f3bf 8f6f 	isb	sy
 800b3dc:	f3bf 8f4f 	dsb	sy
 800b3e0:	b662      	cpsie	i
 800b3e2:	617b      	str	r3, [r7, #20]
}
 800b3e4:	bf00      	nop
 800b3e6:	e7fe      	b.n	800b3e6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b3e8:	4b0a      	ldr	r3, [pc, #40]	; (800b414 <vTaskPlaceOnEventListRestricted+0x58>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	3318      	adds	r3, #24
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	68f8      	ldr	r0, [r7, #12]
 800b3f2:	f7fe fde2 	bl	8009fba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d002      	beq.n	800b402 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800b3fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b400:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b402:	6879      	ldr	r1, [r7, #4]
 800b404:	68b8      	ldr	r0, [r7, #8]
 800b406:	f000 fa89 	bl	800b91c <prvAddCurrentTaskToDelayedList>
	}
 800b40a:	bf00      	nop
 800b40c:	3718      	adds	r7, #24
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}
 800b412:	bf00      	nop
 800b414:	20007824 	.word	0x20007824

0800b418 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b086      	sub	sp, #24
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	68db      	ldr	r3, [r3, #12]
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d10c      	bne.n	800b448 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800b42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b432:	b672      	cpsid	i
 800b434:	f383 8811 	msr	BASEPRI, r3
 800b438:	f3bf 8f6f 	isb	sy
 800b43c:	f3bf 8f4f 	dsb	sy
 800b440:	b662      	cpsie	i
 800b442:	60fb      	str	r3, [r7, #12]
}
 800b444:	bf00      	nop
 800b446:	e7fe      	b.n	800b446 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	3318      	adds	r3, #24
 800b44c:	4618      	mov	r0, r3
 800b44e:	f7fe fe11 	bl	800a074 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b452:	4b1e      	ldr	r3, [pc, #120]	; (800b4cc <xTaskRemoveFromEventList+0xb4>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d11d      	bne.n	800b496 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b45a:	693b      	ldr	r3, [r7, #16]
 800b45c:	3304      	adds	r3, #4
 800b45e:	4618      	mov	r0, r3
 800b460:	f7fe fe08 	bl	800a074 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b468:	4b19      	ldr	r3, [pc, #100]	; (800b4d0 <xTaskRemoveFromEventList+0xb8>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d903      	bls.n	800b478 <xTaskRemoveFromEventList+0x60>
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b474:	4a16      	ldr	r2, [pc, #88]	; (800b4d0 <xTaskRemoveFromEventList+0xb8>)
 800b476:	6013      	str	r3, [r2, #0]
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b47c:	4613      	mov	r3, r2
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	4413      	add	r3, r2
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	4a13      	ldr	r2, [pc, #76]	; (800b4d4 <xTaskRemoveFromEventList+0xbc>)
 800b486:	441a      	add	r2, r3
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	3304      	adds	r3, #4
 800b48c:	4619      	mov	r1, r3
 800b48e:	4610      	mov	r0, r2
 800b490:	f7fe fd93 	bl	8009fba <vListInsertEnd>
 800b494:	e005      	b.n	800b4a2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	3318      	adds	r3, #24
 800b49a:	4619      	mov	r1, r3
 800b49c:	480e      	ldr	r0, [pc, #56]	; (800b4d8 <xTaskRemoveFromEventList+0xc0>)
 800b49e:	f7fe fd8c 	bl	8009fba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b4a2:	693b      	ldr	r3, [r7, #16]
 800b4a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4a6:	4b0d      	ldr	r3, [pc, #52]	; (800b4dc <xTaskRemoveFromEventList+0xc4>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d905      	bls.n	800b4bc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b4b4:	4b0a      	ldr	r3, [pc, #40]	; (800b4e0 <xTaskRemoveFromEventList+0xc8>)
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	601a      	str	r2, [r3, #0]
 800b4ba:	e001      	b.n	800b4c0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b4c0:	697b      	ldr	r3, [r7, #20]
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3718      	adds	r7, #24
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}
 800b4ca:	bf00      	nop
 800b4cc:	20007d20 	.word	0x20007d20
 800b4d0:	20007d00 	.word	0x20007d00
 800b4d4:	20007828 	.word	0x20007828
 800b4d8:	20007cb8 	.word	0x20007cb8
 800b4dc:	20007824 	.word	0x20007824
 800b4e0:	20007d0c 	.word	0x20007d0c

0800b4e4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d10c      	bne.n	800b50c <vTaskSetTimeOutState+0x28>
	__asm volatile
 800b4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f6:	b672      	cpsid	i
 800b4f8:	f383 8811 	msr	BASEPRI, r3
 800b4fc:	f3bf 8f6f 	isb	sy
 800b500:	f3bf 8f4f 	dsb	sy
 800b504:	b662      	cpsie	i
 800b506:	60fb      	str	r3, [r7, #12]
}
 800b508:	bf00      	nop
 800b50a:	e7fe      	b.n	800b50a <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 800b50c:	f000 fec6 	bl	800c29c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b510:	4b06      	ldr	r3, [pc, #24]	; (800b52c <vTaskSetTimeOutState+0x48>)
 800b512:	681a      	ldr	r2, [r3, #0]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800b518:	4b05      	ldr	r3, [pc, #20]	; (800b530 <vTaskSetTimeOutState+0x4c>)
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800b520:	f000 fef0 	bl	800c304 <vPortExitCritical>
}
 800b524:	bf00      	nop
 800b526:	3710      	adds	r7, #16
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	20007d10 	.word	0x20007d10
 800b530:	20007cfc 	.word	0x20007cfc

0800b534 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b53c:	4b06      	ldr	r3, [pc, #24]	; (800b558 <vTaskInternalSetTimeOutState+0x24>)
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b544:	4b05      	ldr	r3, [pc, #20]	; (800b55c <vTaskInternalSetTimeOutState+0x28>)
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	605a      	str	r2, [r3, #4]
}
 800b54c:	bf00      	nop
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr
 800b558:	20007d10 	.word	0x20007d10
 800b55c:	20007cfc 	.word	0x20007cfc

0800b560 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b088      	sub	sp, #32
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d10c      	bne.n	800b58a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800b570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b574:	b672      	cpsid	i
 800b576:	f383 8811 	msr	BASEPRI, r3
 800b57a:	f3bf 8f6f 	isb	sy
 800b57e:	f3bf 8f4f 	dsb	sy
 800b582:	b662      	cpsie	i
 800b584:	613b      	str	r3, [r7, #16]
}
 800b586:	bf00      	nop
 800b588:	e7fe      	b.n	800b588 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d10c      	bne.n	800b5aa <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800b590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b594:	b672      	cpsid	i
 800b596:	f383 8811 	msr	BASEPRI, r3
 800b59a:	f3bf 8f6f 	isb	sy
 800b59e:	f3bf 8f4f 	dsb	sy
 800b5a2:	b662      	cpsie	i
 800b5a4:	60fb      	str	r3, [r7, #12]
}
 800b5a6:	bf00      	nop
 800b5a8:	e7fe      	b.n	800b5a8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800b5aa:	f000 fe77 	bl	800c29c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b5ae:	4b1d      	ldr	r3, [pc, #116]	; (800b624 <xTaskCheckForTimeOut+0xc4>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	69ba      	ldr	r2, [r7, #24]
 800b5ba:	1ad3      	subs	r3, r2, r3
 800b5bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5c6:	d102      	bne.n	800b5ce <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	61fb      	str	r3, [r7, #28]
 800b5cc:	e023      	b.n	800b616 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681a      	ldr	r2, [r3, #0]
 800b5d2:	4b15      	ldr	r3, [pc, #84]	; (800b628 <xTaskCheckForTimeOut+0xc8>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d007      	beq.n	800b5ea <xTaskCheckForTimeOut+0x8a>
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	69ba      	ldr	r2, [r7, #24]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d302      	bcc.n	800b5ea <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	61fb      	str	r3, [r7, #28]
 800b5e8:	e015      	b.n	800b616 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	697a      	ldr	r2, [r7, #20]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d20b      	bcs.n	800b60c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	681a      	ldr	r2, [r3, #0]
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	1ad2      	subs	r2, r2, r3
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7ff ff97 	bl	800b534 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b606:	2300      	movs	r3, #0
 800b608:	61fb      	str	r3, [r7, #28]
 800b60a:	e004      	b.n	800b616 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	2200      	movs	r2, #0
 800b610:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b612:	2301      	movs	r3, #1
 800b614:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b616:	f000 fe75 	bl	800c304 <vPortExitCritical>

	return xReturn;
 800b61a:	69fb      	ldr	r3, [r7, #28]
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3720      	adds	r7, #32
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	20007cfc 	.word	0x20007cfc
 800b628:	20007d10 	.word	0x20007d10

0800b62c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b62c:	b480      	push	{r7}
 800b62e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b630:	4b03      	ldr	r3, [pc, #12]	; (800b640 <vTaskMissedYield+0x14>)
 800b632:	2201      	movs	r2, #1
 800b634:	601a      	str	r2, [r3, #0]
}
 800b636:	bf00      	nop
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr
 800b640:	20007d0c 	.word	0x20007d0c

0800b644 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b64c:	f000 f852 	bl	800b6f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b650:	4b06      	ldr	r3, [pc, #24]	; (800b66c <prvIdleTask+0x28>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	2b01      	cmp	r3, #1
 800b656:	d9f9      	bls.n	800b64c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b658:	4b05      	ldr	r3, [pc, #20]	; (800b670 <prvIdleTask+0x2c>)
 800b65a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b65e:	601a      	str	r2, [r3, #0]
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b668:	e7f0      	b.n	800b64c <prvIdleTask+0x8>
 800b66a:	bf00      	nop
 800b66c:	20007828 	.word	0x20007828
 800b670:	e000ed04 	.word	0xe000ed04

0800b674 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b082      	sub	sp, #8
 800b678:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b67a:	2300      	movs	r3, #0
 800b67c:	607b      	str	r3, [r7, #4]
 800b67e:	e00c      	b.n	800b69a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	4613      	mov	r3, r2
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	4413      	add	r3, r2
 800b688:	009b      	lsls	r3, r3, #2
 800b68a:	4a12      	ldr	r2, [pc, #72]	; (800b6d4 <prvInitialiseTaskLists+0x60>)
 800b68c:	4413      	add	r3, r2
 800b68e:	4618      	mov	r0, r3
 800b690:	f7fe fc66 	bl	8009f60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	3301      	adds	r3, #1
 800b698:	607b      	str	r3, [r7, #4]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2b37      	cmp	r3, #55	; 0x37
 800b69e:	d9ef      	bls.n	800b680 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b6a0:	480d      	ldr	r0, [pc, #52]	; (800b6d8 <prvInitialiseTaskLists+0x64>)
 800b6a2:	f7fe fc5d 	bl	8009f60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b6a6:	480d      	ldr	r0, [pc, #52]	; (800b6dc <prvInitialiseTaskLists+0x68>)
 800b6a8:	f7fe fc5a 	bl	8009f60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b6ac:	480c      	ldr	r0, [pc, #48]	; (800b6e0 <prvInitialiseTaskLists+0x6c>)
 800b6ae:	f7fe fc57 	bl	8009f60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b6b2:	480c      	ldr	r0, [pc, #48]	; (800b6e4 <prvInitialiseTaskLists+0x70>)
 800b6b4:	f7fe fc54 	bl	8009f60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b6b8:	480b      	ldr	r0, [pc, #44]	; (800b6e8 <prvInitialiseTaskLists+0x74>)
 800b6ba:	f7fe fc51 	bl	8009f60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b6be:	4b0b      	ldr	r3, [pc, #44]	; (800b6ec <prvInitialiseTaskLists+0x78>)
 800b6c0:	4a05      	ldr	r2, [pc, #20]	; (800b6d8 <prvInitialiseTaskLists+0x64>)
 800b6c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b6c4:	4b0a      	ldr	r3, [pc, #40]	; (800b6f0 <prvInitialiseTaskLists+0x7c>)
 800b6c6:	4a05      	ldr	r2, [pc, #20]	; (800b6dc <prvInitialiseTaskLists+0x68>)
 800b6c8:	601a      	str	r2, [r3, #0]
}
 800b6ca:	bf00      	nop
 800b6cc:	3708      	adds	r7, #8
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
 800b6d2:	bf00      	nop
 800b6d4:	20007828 	.word	0x20007828
 800b6d8:	20007c88 	.word	0x20007c88
 800b6dc:	20007c9c 	.word	0x20007c9c
 800b6e0:	20007cb8 	.word	0x20007cb8
 800b6e4:	20007ccc 	.word	0x20007ccc
 800b6e8:	20007ce4 	.word	0x20007ce4
 800b6ec:	20007cb0 	.word	0x20007cb0
 800b6f0:	20007cb4 	.word	0x20007cb4

0800b6f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b6fa:	e019      	b.n	800b730 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b6fc:	f000 fdce 	bl	800c29c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b700:	4b10      	ldr	r3, [pc, #64]	; (800b744 <prvCheckTasksWaitingTermination+0x50>)
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	68db      	ldr	r3, [r3, #12]
 800b706:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	3304      	adds	r3, #4
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7fe fcb1 	bl	800a074 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b712:	4b0d      	ldr	r3, [pc, #52]	; (800b748 <prvCheckTasksWaitingTermination+0x54>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	3b01      	subs	r3, #1
 800b718:	4a0b      	ldr	r2, [pc, #44]	; (800b748 <prvCheckTasksWaitingTermination+0x54>)
 800b71a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b71c:	4b0b      	ldr	r3, [pc, #44]	; (800b74c <prvCheckTasksWaitingTermination+0x58>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	3b01      	subs	r3, #1
 800b722:	4a0a      	ldr	r2, [pc, #40]	; (800b74c <prvCheckTasksWaitingTermination+0x58>)
 800b724:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b726:	f000 fded 	bl	800c304 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 f810 	bl	800b750 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b730:	4b06      	ldr	r3, [pc, #24]	; (800b74c <prvCheckTasksWaitingTermination+0x58>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d1e1      	bne.n	800b6fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b738:	bf00      	nop
 800b73a:	bf00      	nop
 800b73c:	3708      	adds	r7, #8
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	20007ccc 	.word	0x20007ccc
 800b748:	20007cf8 	.word	0x20007cf8
 800b74c:	20007ce0 	.word	0x20007ce0

0800b750 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	3354      	adds	r3, #84	; 0x54
 800b75c:	4618      	mov	r0, r3
 800b75e:	f012 fa39 	bl	801dbd4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d108      	bne.n	800b77e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b770:	4618      	mov	r0, r3
 800b772:	f000 ff89 	bl	800c688 <vPortFree>
				vPortFree( pxTCB );
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f000 ff86 	bl	800c688 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b77c:	e01a      	b.n	800b7b4 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b784:	2b01      	cmp	r3, #1
 800b786:	d103      	bne.n	800b790 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f000 ff7d 	bl	800c688 <vPortFree>
	}
 800b78e:	e011      	b.n	800b7b4 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800b796:	2b02      	cmp	r3, #2
 800b798:	d00c      	beq.n	800b7b4 <prvDeleteTCB+0x64>
	__asm volatile
 800b79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79e:	b672      	cpsid	i
 800b7a0:	f383 8811 	msr	BASEPRI, r3
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	b662      	cpsie	i
 800b7ae:	60fb      	str	r3, [r7, #12]
}
 800b7b0:	bf00      	nop
 800b7b2:	e7fe      	b.n	800b7b2 <prvDeleteTCB+0x62>
	}
 800b7b4:	bf00      	nop
 800b7b6:	3710      	adds	r7, #16
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7c2:	4b0c      	ldr	r3, [pc, #48]	; (800b7f4 <prvResetNextTaskUnblockTime+0x38>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d104      	bne.n	800b7d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b7cc:	4b0a      	ldr	r3, [pc, #40]	; (800b7f8 <prvResetNextTaskUnblockTime+0x3c>)
 800b7ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b7d4:	e008      	b.n	800b7e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7d6:	4b07      	ldr	r3, [pc, #28]	; (800b7f4 <prvResetNextTaskUnblockTime+0x38>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	68db      	ldr	r3, [r3, #12]
 800b7dc:	68db      	ldr	r3, [r3, #12]
 800b7de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	4a04      	ldr	r2, [pc, #16]	; (800b7f8 <prvResetNextTaskUnblockTime+0x3c>)
 800b7e6:	6013      	str	r3, [r2, #0]
}
 800b7e8:	bf00      	nop
 800b7ea:	370c      	adds	r7, #12
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr
 800b7f4:	20007cb0 	.word	0x20007cb0
 800b7f8:	20007d18 	.word	0x20007d18

0800b7fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b802:	4b0b      	ldr	r3, [pc, #44]	; (800b830 <xTaskGetSchedulerState+0x34>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d102      	bne.n	800b810 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b80a:	2301      	movs	r3, #1
 800b80c:	607b      	str	r3, [r7, #4]
 800b80e:	e008      	b.n	800b822 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b810:	4b08      	ldr	r3, [pc, #32]	; (800b834 <xTaskGetSchedulerState+0x38>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d102      	bne.n	800b81e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b818:	2302      	movs	r3, #2
 800b81a:	607b      	str	r3, [r7, #4]
 800b81c:	e001      	b.n	800b822 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b81e:	2300      	movs	r3, #0
 800b820:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b822:	687b      	ldr	r3, [r7, #4]
	}
 800b824:	4618      	mov	r0, r3
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr
 800b830:	20007d04 	.word	0x20007d04
 800b834:	20007d20 	.word	0x20007d20

0800b838 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b086      	sub	sp, #24
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b844:	2300      	movs	r3, #0
 800b846:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d05a      	beq.n	800b904 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b84e:	4b30      	ldr	r3, [pc, #192]	; (800b910 <xTaskPriorityDisinherit+0xd8>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	693a      	ldr	r2, [r7, #16]
 800b854:	429a      	cmp	r2, r3
 800b856:	d00c      	beq.n	800b872 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800b858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85c:	b672      	cpsid	i
 800b85e:	f383 8811 	msr	BASEPRI, r3
 800b862:	f3bf 8f6f 	isb	sy
 800b866:	f3bf 8f4f 	dsb	sy
 800b86a:	b662      	cpsie	i
 800b86c:	60fb      	str	r3, [r7, #12]
}
 800b86e:	bf00      	nop
 800b870:	e7fe      	b.n	800b870 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b876:	2b00      	cmp	r3, #0
 800b878:	d10c      	bne.n	800b894 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800b87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87e:	b672      	cpsid	i
 800b880:	f383 8811 	msr	BASEPRI, r3
 800b884:	f3bf 8f6f 	isb	sy
 800b888:	f3bf 8f4f 	dsb	sy
 800b88c:	b662      	cpsie	i
 800b88e:	60bb      	str	r3, [r7, #8]
}
 800b890:	bf00      	nop
 800b892:	e7fe      	b.n	800b892 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b898:	1e5a      	subs	r2, r3, #1
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8a2:	693b      	ldr	r3, [r7, #16]
 800b8a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d02c      	beq.n	800b904 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d128      	bne.n	800b904 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	3304      	adds	r3, #4
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7fe fbdc 	bl	800a074 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8d4:	4b0f      	ldr	r3, [pc, #60]	; (800b914 <xTaskPriorityDisinherit+0xdc>)
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d903      	bls.n	800b8e4 <xTaskPriorityDisinherit+0xac>
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e0:	4a0c      	ldr	r2, [pc, #48]	; (800b914 <xTaskPriorityDisinherit+0xdc>)
 800b8e2:	6013      	str	r3, [r2, #0]
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	4413      	add	r3, r2
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	4a09      	ldr	r2, [pc, #36]	; (800b918 <xTaskPriorityDisinherit+0xe0>)
 800b8f2:	441a      	add	r2, r3
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	3304      	adds	r3, #4
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	4610      	mov	r0, r2
 800b8fc:	f7fe fb5d 	bl	8009fba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b900:	2301      	movs	r3, #1
 800b902:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b904:	697b      	ldr	r3, [r7, #20]
	}
 800b906:	4618      	mov	r0, r3
 800b908:	3718      	adds	r7, #24
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
 800b90e:	bf00      	nop
 800b910:	20007824 	.word	0x20007824
 800b914:	20007d00 	.word	0x20007d00
 800b918:	20007828 	.word	0x20007828

0800b91c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b084      	sub	sp, #16
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b926:	4b21      	ldr	r3, [pc, #132]	; (800b9ac <prvAddCurrentTaskToDelayedList+0x90>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b92c:	4b20      	ldr	r3, [pc, #128]	; (800b9b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	3304      	adds	r3, #4
 800b932:	4618      	mov	r0, r3
 800b934:	f7fe fb9e 	bl	800a074 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b93e:	d10a      	bne.n	800b956 <prvAddCurrentTaskToDelayedList+0x3a>
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d007      	beq.n	800b956 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b946:	4b1a      	ldr	r3, [pc, #104]	; (800b9b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	3304      	adds	r3, #4
 800b94c:	4619      	mov	r1, r3
 800b94e:	4819      	ldr	r0, [pc, #100]	; (800b9b4 <prvAddCurrentTaskToDelayedList+0x98>)
 800b950:	f7fe fb33 	bl	8009fba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b954:	e026      	b.n	800b9a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b956:	68fa      	ldr	r2, [r7, #12]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	4413      	add	r3, r2
 800b95c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b95e:	4b14      	ldr	r3, [pc, #80]	; (800b9b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	68ba      	ldr	r2, [r7, #8]
 800b964:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b966:	68ba      	ldr	r2, [r7, #8]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d209      	bcs.n	800b982 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b96e:	4b12      	ldr	r3, [pc, #72]	; (800b9b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	4b0f      	ldr	r3, [pc, #60]	; (800b9b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	3304      	adds	r3, #4
 800b978:	4619      	mov	r1, r3
 800b97a:	4610      	mov	r0, r2
 800b97c:	f7fe fb41 	bl	800a002 <vListInsert>
}
 800b980:	e010      	b.n	800b9a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b982:	4b0e      	ldr	r3, [pc, #56]	; (800b9bc <prvAddCurrentTaskToDelayedList+0xa0>)
 800b984:	681a      	ldr	r2, [r3, #0]
 800b986:	4b0a      	ldr	r3, [pc, #40]	; (800b9b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	3304      	adds	r3, #4
 800b98c:	4619      	mov	r1, r3
 800b98e:	4610      	mov	r0, r2
 800b990:	f7fe fb37 	bl	800a002 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b994:	4b0a      	ldr	r3, [pc, #40]	; (800b9c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	68ba      	ldr	r2, [r7, #8]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d202      	bcs.n	800b9a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b99e:	4a08      	ldr	r2, [pc, #32]	; (800b9c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	6013      	str	r3, [r2, #0]
}
 800b9a4:	bf00      	nop
 800b9a6:	3710      	adds	r7, #16
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}
 800b9ac:	20007cfc 	.word	0x20007cfc
 800b9b0:	20007824 	.word	0x20007824
 800b9b4:	20007ce4 	.word	0x20007ce4
 800b9b8:	20007cb4 	.word	0x20007cb4
 800b9bc:	20007cb0 	.word	0x20007cb0
 800b9c0:	20007d18 	.word	0x20007d18

0800b9c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b08a      	sub	sp, #40	; 0x28
 800b9c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b9ce:	f000 fb15 	bl	800bffc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b9d2:	4b1d      	ldr	r3, [pc, #116]	; (800ba48 <xTimerCreateTimerTask+0x84>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d021      	beq.n	800ba1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b9e2:	1d3a      	adds	r2, r7, #4
 800b9e4:	f107 0108 	add.w	r1, r7, #8
 800b9e8:	f107 030c 	add.w	r3, r7, #12
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7fe fa9d 	bl	8009f2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b9f2:	6879      	ldr	r1, [r7, #4]
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	68fa      	ldr	r2, [r7, #12]
 800b9f8:	9202      	str	r2, [sp, #8]
 800b9fa:	9301      	str	r3, [sp, #4]
 800b9fc:	2302      	movs	r3, #2
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	2300      	movs	r3, #0
 800ba02:	460a      	mov	r2, r1
 800ba04:	4911      	ldr	r1, [pc, #68]	; (800ba4c <xTimerCreateTimerTask+0x88>)
 800ba06:	4812      	ldr	r0, [pc, #72]	; (800ba50 <xTimerCreateTimerTask+0x8c>)
 800ba08:	f7ff f868 	bl	800aadc <xTaskCreateStatic>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	4a11      	ldr	r2, [pc, #68]	; (800ba54 <xTimerCreateTimerTask+0x90>)
 800ba10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ba12:	4b10      	ldr	r3, [pc, #64]	; (800ba54 <xTimerCreateTimerTask+0x90>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d001      	beq.n	800ba1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d10c      	bne.n	800ba3e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800ba24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba28:	b672      	cpsid	i
 800ba2a:	f383 8811 	msr	BASEPRI, r3
 800ba2e:	f3bf 8f6f 	isb	sy
 800ba32:	f3bf 8f4f 	dsb	sy
 800ba36:	b662      	cpsie	i
 800ba38:	613b      	str	r3, [r7, #16]
}
 800ba3a:	bf00      	nop
 800ba3c:	e7fe      	b.n	800ba3c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800ba3e:	697b      	ldr	r3, [r7, #20]
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3718      	adds	r7, #24
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}
 800ba48:	20007d54 	.word	0x20007d54
 800ba4c:	0801eba8 	.word	0x0801eba8
 800ba50:	0800bb95 	.word	0x0800bb95
 800ba54:	20007d58 	.word	0x20007d58

0800ba58 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b08a      	sub	sp, #40	; 0x28
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	60f8      	str	r0, [r7, #12]
 800ba60:	60b9      	str	r1, [r7, #8]
 800ba62:	607a      	str	r2, [r7, #4]
 800ba64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ba66:	2300      	movs	r3, #0
 800ba68:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d10c      	bne.n	800ba8a <xTimerGenericCommand+0x32>
	__asm volatile
 800ba70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba74:	b672      	cpsid	i
 800ba76:	f383 8811 	msr	BASEPRI, r3
 800ba7a:	f3bf 8f6f 	isb	sy
 800ba7e:	f3bf 8f4f 	dsb	sy
 800ba82:	b662      	cpsie	i
 800ba84:	623b      	str	r3, [r7, #32]
}
 800ba86:	bf00      	nop
 800ba88:	e7fe      	b.n	800ba88 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ba8a:	4b1a      	ldr	r3, [pc, #104]	; (800baf4 <xTimerGenericCommand+0x9c>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d02a      	beq.n	800bae8 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	2b05      	cmp	r3, #5
 800baa2:	dc18      	bgt.n	800bad6 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800baa4:	f7ff feaa 	bl	800b7fc <xTaskGetSchedulerState>
 800baa8:	4603      	mov	r3, r0
 800baaa:	2b02      	cmp	r3, #2
 800baac:	d109      	bne.n	800bac2 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800baae:	4b11      	ldr	r3, [pc, #68]	; (800baf4 <xTimerGenericCommand+0x9c>)
 800bab0:	6818      	ldr	r0, [r3, #0]
 800bab2:	f107 0110 	add.w	r1, r7, #16
 800bab6:	2300      	movs	r3, #0
 800bab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baba:	f7fe fc15 	bl	800a2e8 <xQueueGenericSend>
 800babe:	6278      	str	r0, [r7, #36]	; 0x24
 800bac0:	e012      	b.n	800bae8 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bac2:	4b0c      	ldr	r3, [pc, #48]	; (800baf4 <xTimerGenericCommand+0x9c>)
 800bac4:	6818      	ldr	r0, [r3, #0]
 800bac6:	f107 0110 	add.w	r1, r7, #16
 800baca:	2300      	movs	r3, #0
 800bacc:	2200      	movs	r2, #0
 800bace:	f7fe fc0b 	bl	800a2e8 <xQueueGenericSend>
 800bad2:	6278      	str	r0, [r7, #36]	; 0x24
 800bad4:	e008      	b.n	800bae8 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bad6:	4b07      	ldr	r3, [pc, #28]	; (800baf4 <xTimerGenericCommand+0x9c>)
 800bad8:	6818      	ldr	r0, [r3, #0]
 800bada:	f107 0110 	add.w	r1, r7, #16
 800bade:	2300      	movs	r3, #0
 800bae0:	683a      	ldr	r2, [r7, #0]
 800bae2:	f7fe fd07 	bl	800a4f4 <xQueueGenericSendFromISR>
 800bae6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800baea:	4618      	mov	r0, r3
 800baec:	3728      	adds	r7, #40	; 0x28
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop
 800baf4:	20007d54 	.word	0x20007d54

0800baf8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b088      	sub	sp, #32
 800bafc:	af02      	add	r7, sp, #8
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb02:	4b23      	ldr	r3, [pc, #140]	; (800bb90 <prvProcessExpiredTimer+0x98>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	68db      	ldr	r3, [r3, #12]
 800bb0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	3304      	adds	r3, #4
 800bb10:	4618      	mov	r0, r3
 800bb12:	f7fe faaf 	bl	800a074 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb1c:	f003 0304 	and.w	r3, r3, #4
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d024      	beq.n	800bb6e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	699a      	ldr	r2, [r3, #24]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	18d1      	adds	r1, r2, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	683a      	ldr	r2, [r7, #0]
 800bb30:	6978      	ldr	r0, [r7, #20]
 800bb32:	f000 f8d3 	bl	800bcdc <prvInsertTimerInActiveList>
 800bb36:	4603      	mov	r3, r0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d021      	beq.n	800bb80 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	9300      	str	r3, [sp, #0]
 800bb40:	2300      	movs	r3, #0
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	2100      	movs	r1, #0
 800bb46:	6978      	ldr	r0, [r7, #20]
 800bb48:	f7ff ff86 	bl	800ba58 <xTimerGenericCommand>
 800bb4c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d115      	bne.n	800bb80 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800bb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb58:	b672      	cpsid	i
 800bb5a:	f383 8811 	msr	BASEPRI, r3
 800bb5e:	f3bf 8f6f 	isb	sy
 800bb62:	f3bf 8f4f 	dsb	sy
 800bb66:	b662      	cpsie	i
 800bb68:	60fb      	str	r3, [r7, #12]
}
 800bb6a:	bf00      	nop
 800bb6c:	e7fe      	b.n	800bb6c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb6e:	697b      	ldr	r3, [r7, #20]
 800bb70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb74:	f023 0301 	bic.w	r3, r3, #1
 800bb78:	b2da      	uxtb	r2, r3
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	6a1b      	ldr	r3, [r3, #32]
 800bb84:	6978      	ldr	r0, [r7, #20]
 800bb86:	4798      	blx	r3
}
 800bb88:	bf00      	nop
 800bb8a:	3718      	adds	r7, #24
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}
 800bb90:	20007d4c 	.word	0x20007d4c

0800bb94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b084      	sub	sp, #16
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb9c:	f107 0308 	add.w	r3, r7, #8
 800bba0:	4618      	mov	r0, r3
 800bba2:	f000 f857 	bl	800bc54 <prvGetNextExpireTime>
 800bba6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	4619      	mov	r1, r3
 800bbac:	68f8      	ldr	r0, [r7, #12]
 800bbae:	f000 f803 	bl	800bbb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bbb2:	f000 f8d5 	bl	800bd60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbb6:	e7f1      	b.n	800bb9c <prvTimerTask+0x8>

0800bbb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b084      	sub	sp, #16
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bbc2:	f7ff f9f5 	bl	800afb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bbc6:	f107 0308 	add.w	r3, r7, #8
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f000 f866 	bl	800bc9c <prvSampleTimeNow>
 800bbd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d130      	bne.n	800bc3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d10a      	bne.n	800bbf4 <prvProcessTimerOrBlockTask+0x3c>
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d806      	bhi.n	800bbf4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bbe6:	f7ff f9f1 	bl	800afcc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bbea:	68f9      	ldr	r1, [r7, #12]
 800bbec:	6878      	ldr	r0, [r7, #4]
 800bbee:	f7ff ff83 	bl	800baf8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bbf2:	e024      	b.n	800bc3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d008      	beq.n	800bc0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bbfa:	4b13      	ldr	r3, [pc, #76]	; (800bc48 <prvProcessTimerOrBlockTask+0x90>)
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d101      	bne.n	800bc08 <prvProcessTimerOrBlockTask+0x50>
 800bc04:	2301      	movs	r3, #1
 800bc06:	e000      	b.n	800bc0a <prvProcessTimerOrBlockTask+0x52>
 800bc08:	2300      	movs	r3, #0
 800bc0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bc0c:	4b0f      	ldr	r3, [pc, #60]	; (800bc4c <prvProcessTimerOrBlockTask+0x94>)
 800bc0e:	6818      	ldr	r0, [r3, #0]
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	1ad3      	subs	r3, r2, r3
 800bc16:	683a      	ldr	r2, [r7, #0]
 800bc18:	4619      	mov	r1, r3
 800bc1a:	f7fe ff2b 	bl	800aa74 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bc1e:	f7ff f9d5 	bl	800afcc <xTaskResumeAll>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d10a      	bne.n	800bc3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bc28:	4b09      	ldr	r3, [pc, #36]	; (800bc50 <prvProcessTimerOrBlockTask+0x98>)
 800bc2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc2e:	601a      	str	r2, [r3, #0]
 800bc30:	f3bf 8f4f 	dsb	sy
 800bc34:	f3bf 8f6f 	isb	sy
}
 800bc38:	e001      	b.n	800bc3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bc3a:	f7ff f9c7 	bl	800afcc <xTaskResumeAll>
}
 800bc3e:	bf00      	nop
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	20007d50 	.word	0x20007d50
 800bc4c:	20007d54 	.word	0x20007d54
 800bc50:	e000ed04 	.word	0xe000ed04

0800bc54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bc54:	b480      	push	{r7}
 800bc56:	b085      	sub	sp, #20
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bc5c:	4b0e      	ldr	r3, [pc, #56]	; (800bc98 <prvGetNextExpireTime+0x44>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d101      	bne.n	800bc6a <prvGetNextExpireTime+0x16>
 800bc66:	2201      	movs	r2, #1
 800bc68:	e000      	b.n	800bc6c <prvGetNextExpireTime+0x18>
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d105      	bne.n	800bc84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc78:	4b07      	ldr	r3, [pc, #28]	; (800bc98 <prvGetNextExpireTime+0x44>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	60fb      	str	r3, [r7, #12]
 800bc82:	e001      	b.n	800bc88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bc84:	2300      	movs	r3, #0
 800bc86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bc88:	68fb      	ldr	r3, [r7, #12]
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3714      	adds	r7, #20
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr
 800bc96:	bf00      	nop
 800bc98:	20007d4c 	.word	0x20007d4c

0800bc9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b084      	sub	sp, #16
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bca4:	f7ff fa32 	bl	800b10c <xTaskGetTickCount>
 800bca8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bcaa:	4b0b      	ldr	r3, [pc, #44]	; (800bcd8 <prvSampleTimeNow+0x3c>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d205      	bcs.n	800bcc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bcb4:	f000 f93c 	bl	800bf30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	601a      	str	r2, [r3, #0]
 800bcbe:	e002      	b.n	800bcc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bcc6:	4a04      	ldr	r2, [pc, #16]	; (800bcd8 <prvSampleTimeNow+0x3c>)
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bccc:	68fb      	ldr	r3, [r7, #12]
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	20007d5c 	.word	0x20007d5c

0800bcdc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b086      	sub	sp, #24
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
 800bce8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bcea:	2300      	movs	r3, #0
 800bcec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	68ba      	ldr	r2, [r7, #8]
 800bcf2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	68fa      	ldr	r2, [r7, #12]
 800bcf8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bcfa:	68ba      	ldr	r2, [r7, #8]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d812      	bhi.n	800bd28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd02:	687a      	ldr	r2, [r7, #4]
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	1ad2      	subs	r2, r2, r3
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	699b      	ldr	r3, [r3, #24]
 800bd0c:	429a      	cmp	r2, r3
 800bd0e:	d302      	bcc.n	800bd16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bd10:	2301      	movs	r3, #1
 800bd12:	617b      	str	r3, [r7, #20]
 800bd14:	e01b      	b.n	800bd4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bd16:	4b10      	ldr	r3, [pc, #64]	; (800bd58 <prvInsertTimerInActiveList+0x7c>)
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	3304      	adds	r3, #4
 800bd1e:	4619      	mov	r1, r3
 800bd20:	4610      	mov	r0, r2
 800bd22:	f7fe f96e 	bl	800a002 <vListInsert>
 800bd26:	e012      	b.n	800bd4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d206      	bcs.n	800bd3e <prvInsertTimerInActiveList+0x62>
 800bd30:	68ba      	ldr	r2, [r7, #8]
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d302      	bcc.n	800bd3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bd38:	2301      	movs	r3, #1
 800bd3a:	617b      	str	r3, [r7, #20]
 800bd3c:	e007      	b.n	800bd4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd3e:	4b07      	ldr	r3, [pc, #28]	; (800bd5c <prvInsertTimerInActiveList+0x80>)
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	3304      	adds	r3, #4
 800bd46:	4619      	mov	r1, r3
 800bd48:	4610      	mov	r0, r2
 800bd4a:	f7fe f95a 	bl	800a002 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bd4e:	697b      	ldr	r3, [r7, #20]
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3718      	adds	r7, #24
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	20007d50 	.word	0x20007d50
 800bd5c:	20007d4c 	.word	0x20007d4c

0800bd60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b08e      	sub	sp, #56	; 0x38
 800bd64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd66:	e0d0      	b.n	800bf0a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	da1a      	bge.n	800bda4 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bd6e:	1d3b      	adds	r3, r7, #4
 800bd70:	3304      	adds	r3, #4
 800bd72:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d10c      	bne.n	800bd94 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800bd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7e:	b672      	cpsid	i
 800bd80:	f383 8811 	msr	BASEPRI, r3
 800bd84:	f3bf 8f6f 	isb	sy
 800bd88:	f3bf 8f4f 	dsb	sy
 800bd8c:	b662      	cpsie	i
 800bd8e:	61fb      	str	r3, [r7, #28]
}
 800bd90:	bf00      	nop
 800bd92:	e7fe      	b.n	800bd92 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd9a:	6850      	ldr	r0, [r2, #4]
 800bd9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd9e:	6892      	ldr	r2, [r2, #8]
 800bda0:	4611      	mov	r1, r2
 800bda2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	f2c0 80af 	blt.w	800bf0a <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bdb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb2:	695b      	ldr	r3, [r3, #20]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d004      	beq.n	800bdc2 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdba:	3304      	adds	r3, #4
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f7fe f959 	bl	800a074 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bdc2:	463b      	mov	r3, r7
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f7ff ff69 	bl	800bc9c <prvSampleTimeNow>
 800bdca:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2b09      	cmp	r3, #9
 800bdd0:	f200 809a 	bhi.w	800bf08 <prvProcessReceivedCommands+0x1a8>
 800bdd4:	a201      	add	r2, pc, #4	; (adr r2, 800bddc <prvProcessReceivedCommands+0x7c>)
 800bdd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdda:	bf00      	nop
 800bddc:	0800be05 	.word	0x0800be05
 800bde0:	0800be05 	.word	0x0800be05
 800bde4:	0800be05 	.word	0x0800be05
 800bde8:	0800be7d 	.word	0x0800be7d
 800bdec:	0800be91 	.word	0x0800be91
 800bdf0:	0800bedf 	.word	0x0800bedf
 800bdf4:	0800be05 	.word	0x0800be05
 800bdf8:	0800be05 	.word	0x0800be05
 800bdfc:	0800be7d 	.word	0x0800be7d
 800be00:	0800be91 	.word	0x0800be91
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be0a:	f043 0301 	orr.w	r3, r3, #1
 800be0e:	b2da      	uxtb	r2, r3
 800be10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800be16:	68ba      	ldr	r2, [r7, #8]
 800be18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1a:	699b      	ldr	r3, [r3, #24]
 800be1c:	18d1      	adds	r1, r2, r3
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be24:	f7ff ff5a 	bl	800bcdc <prvInsertTimerInActiveList>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d06d      	beq.n	800bf0a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be30:	6a1b      	ldr	r3, [r3, #32]
 800be32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be3c:	f003 0304 	and.w	r3, r3, #4
 800be40:	2b00      	cmp	r3, #0
 800be42:	d062      	beq.n	800bf0a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800be44:	68ba      	ldr	r2, [r7, #8]
 800be46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be48:	699b      	ldr	r3, [r3, #24]
 800be4a:	441a      	add	r2, r3
 800be4c:	2300      	movs	r3, #0
 800be4e:	9300      	str	r3, [sp, #0]
 800be50:	2300      	movs	r3, #0
 800be52:	2100      	movs	r1, #0
 800be54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be56:	f7ff fdff 	bl	800ba58 <xTimerGenericCommand>
 800be5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800be5c:	6a3b      	ldr	r3, [r7, #32]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d153      	bne.n	800bf0a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800be62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be66:	b672      	cpsid	i
 800be68:	f383 8811 	msr	BASEPRI, r3
 800be6c:	f3bf 8f6f 	isb	sy
 800be70:	f3bf 8f4f 	dsb	sy
 800be74:	b662      	cpsie	i
 800be76:	61bb      	str	r3, [r7, #24]
}
 800be78:	bf00      	nop
 800be7a:	e7fe      	b.n	800be7a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be82:	f023 0301 	bic.w	r3, r3, #1
 800be86:	b2da      	uxtb	r2, r3
 800be88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800be8e:	e03c      	b.n	800bf0a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be96:	f043 0301 	orr.w	r3, r3, #1
 800be9a:	b2da      	uxtb	r2, r3
 800be9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bea2:	68ba      	ldr	r2, [r7, #8]
 800bea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beaa:	699b      	ldr	r3, [r3, #24]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d10c      	bne.n	800beca <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800beb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb4:	b672      	cpsid	i
 800beb6:	f383 8811 	msr	BASEPRI, r3
 800beba:	f3bf 8f6f 	isb	sy
 800bebe:	f3bf 8f4f 	dsb	sy
 800bec2:	b662      	cpsie	i
 800bec4:	617b      	str	r3, [r7, #20]
}
 800bec6:	bf00      	nop
 800bec8:	e7fe      	b.n	800bec8 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800beca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800becc:	699a      	ldr	r2, [r3, #24]
 800bece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed0:	18d1      	adds	r1, r2, r3
 800bed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bed6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bed8:	f7ff ff00 	bl	800bcdc <prvInsertTimerInActiveList>
					break;
 800bedc:	e015      	b.n	800bf0a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bee4:	f003 0302 	and.w	r3, r3, #2
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d103      	bne.n	800bef4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800beec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beee:	f000 fbcb 	bl	800c688 <vPortFree>
 800bef2:	e00a      	b.n	800bf0a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800befa:	f023 0301 	bic.w	r3, r3, #1
 800befe:	b2da      	uxtb	r2, r3
 800bf00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bf06:	e000      	b.n	800bf0a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800bf08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf0a:	4b08      	ldr	r3, [pc, #32]	; (800bf2c <prvProcessReceivedCommands+0x1cc>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	1d39      	adds	r1, r7, #4
 800bf10:	2200      	movs	r2, #0
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7fe fb8e 	bl	800a634 <xQueueReceive>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	f47f af24 	bne.w	800bd68 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bf20:	bf00      	nop
 800bf22:	bf00      	nop
 800bf24:	3730      	adds	r7, #48	; 0x30
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	20007d54 	.word	0x20007d54

0800bf30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b088      	sub	sp, #32
 800bf34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf36:	e04a      	b.n	800bfce <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf38:	4b2e      	ldr	r3, [pc, #184]	; (800bff4 <prvSwitchTimerLists+0xc4>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	68db      	ldr	r3, [r3, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf42:	4b2c      	ldr	r3, [pc, #176]	; (800bff4 <prvSwitchTimerLists+0xc4>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	68db      	ldr	r3, [r3, #12]
 800bf48:	68db      	ldr	r3, [r3, #12]
 800bf4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	3304      	adds	r3, #4
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7fe f88f 	bl	800a074 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	6a1b      	ldr	r3, [r3, #32]
 800bf5a:	68f8      	ldr	r0, [r7, #12]
 800bf5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf64:	f003 0304 	and.w	r3, r3, #4
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d030      	beq.n	800bfce <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	699b      	ldr	r3, [r3, #24]
 800bf70:	693a      	ldr	r2, [r7, #16]
 800bf72:	4413      	add	r3, r2
 800bf74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bf76:	68ba      	ldr	r2, [r7, #8]
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d90e      	bls.n	800bf9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	68ba      	ldr	r2, [r7, #8]
 800bf82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	68fa      	ldr	r2, [r7, #12]
 800bf88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf8a:	4b1a      	ldr	r3, [pc, #104]	; (800bff4 <prvSwitchTimerLists+0xc4>)
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	3304      	adds	r3, #4
 800bf92:	4619      	mov	r1, r3
 800bf94:	4610      	mov	r0, r2
 800bf96:	f7fe f834 	bl	800a002 <vListInsert>
 800bf9a:	e018      	b.n	800bfce <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	9300      	str	r3, [sp, #0]
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	693a      	ldr	r2, [r7, #16]
 800bfa4:	2100      	movs	r1, #0
 800bfa6:	68f8      	ldr	r0, [r7, #12]
 800bfa8:	f7ff fd56 	bl	800ba58 <xTimerGenericCommand>
 800bfac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d10c      	bne.n	800bfce <prvSwitchTimerLists+0x9e>
	__asm volatile
 800bfb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb8:	b672      	cpsid	i
 800bfba:	f383 8811 	msr	BASEPRI, r3
 800bfbe:	f3bf 8f6f 	isb	sy
 800bfc2:	f3bf 8f4f 	dsb	sy
 800bfc6:	b662      	cpsie	i
 800bfc8:	603b      	str	r3, [r7, #0]
}
 800bfca:	bf00      	nop
 800bfcc:	e7fe      	b.n	800bfcc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bfce:	4b09      	ldr	r3, [pc, #36]	; (800bff4 <prvSwitchTimerLists+0xc4>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1af      	bne.n	800bf38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bfd8:	4b06      	ldr	r3, [pc, #24]	; (800bff4 <prvSwitchTimerLists+0xc4>)
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bfde:	4b06      	ldr	r3, [pc, #24]	; (800bff8 <prvSwitchTimerLists+0xc8>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	4a04      	ldr	r2, [pc, #16]	; (800bff4 <prvSwitchTimerLists+0xc4>)
 800bfe4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bfe6:	4a04      	ldr	r2, [pc, #16]	; (800bff8 <prvSwitchTimerLists+0xc8>)
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	6013      	str	r3, [r2, #0]
}
 800bfec:	bf00      	nop
 800bfee:	3718      	adds	r7, #24
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}
 800bff4:	20007d4c 	.word	0x20007d4c
 800bff8:	20007d50 	.word	0x20007d50

0800bffc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b082      	sub	sp, #8
 800c000:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c002:	f000 f94b 	bl	800c29c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c006:	4b15      	ldr	r3, [pc, #84]	; (800c05c <prvCheckForValidListAndQueue+0x60>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d120      	bne.n	800c050 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c00e:	4814      	ldr	r0, [pc, #80]	; (800c060 <prvCheckForValidListAndQueue+0x64>)
 800c010:	f7fd ffa6 	bl	8009f60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c014:	4813      	ldr	r0, [pc, #76]	; (800c064 <prvCheckForValidListAndQueue+0x68>)
 800c016:	f7fd ffa3 	bl	8009f60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c01a:	4b13      	ldr	r3, [pc, #76]	; (800c068 <prvCheckForValidListAndQueue+0x6c>)
 800c01c:	4a10      	ldr	r2, [pc, #64]	; (800c060 <prvCheckForValidListAndQueue+0x64>)
 800c01e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c020:	4b12      	ldr	r3, [pc, #72]	; (800c06c <prvCheckForValidListAndQueue+0x70>)
 800c022:	4a10      	ldr	r2, [pc, #64]	; (800c064 <prvCheckForValidListAndQueue+0x68>)
 800c024:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c026:	2300      	movs	r3, #0
 800c028:	9300      	str	r3, [sp, #0]
 800c02a:	4b11      	ldr	r3, [pc, #68]	; (800c070 <prvCheckForValidListAndQueue+0x74>)
 800c02c:	4a11      	ldr	r2, [pc, #68]	; (800c074 <prvCheckForValidListAndQueue+0x78>)
 800c02e:	2110      	movs	r1, #16
 800c030:	200a      	movs	r0, #10
 800c032:	f7fe f8b3 	bl	800a19c <xQueueGenericCreateStatic>
 800c036:	4603      	mov	r3, r0
 800c038:	4a08      	ldr	r2, [pc, #32]	; (800c05c <prvCheckForValidListAndQueue+0x60>)
 800c03a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c03c:	4b07      	ldr	r3, [pc, #28]	; (800c05c <prvCheckForValidListAndQueue+0x60>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d005      	beq.n	800c050 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c044:	4b05      	ldr	r3, [pc, #20]	; (800c05c <prvCheckForValidListAndQueue+0x60>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	490b      	ldr	r1, [pc, #44]	; (800c078 <prvCheckForValidListAndQueue+0x7c>)
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7fe fce8 	bl	800aa20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c050:	f000 f958 	bl	800c304 <vPortExitCritical>
}
 800c054:	bf00      	nop
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
 800c05a:	bf00      	nop
 800c05c:	20007d54 	.word	0x20007d54
 800c060:	20007d24 	.word	0x20007d24
 800c064:	20007d38 	.word	0x20007d38
 800c068:	20007d4c 	.word	0x20007d4c
 800c06c:	20007d50 	.word	0x20007d50
 800c070:	20007e00 	.word	0x20007e00
 800c074:	20007d60 	.word	0x20007d60
 800c078:	0801ebb0 	.word	0x0801ebb0

0800c07c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c07c:	b480      	push	{r7}
 800c07e:	b085      	sub	sp, #20
 800c080:	af00      	add	r7, sp, #0
 800c082:	60f8      	str	r0, [r7, #12]
 800c084:	60b9      	str	r1, [r7, #8]
 800c086:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	3b04      	subs	r3, #4
 800c08c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c094:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	3b04      	subs	r3, #4
 800c09a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	f023 0201 	bic.w	r2, r3, #1
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	3b04      	subs	r3, #4
 800c0aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c0ac:	4a0c      	ldr	r2, [pc, #48]	; (800c0e0 <pxPortInitialiseStack+0x64>)
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	3b14      	subs	r3, #20
 800c0b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c0b8:	687a      	ldr	r2, [r7, #4]
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	3b04      	subs	r3, #4
 800c0c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f06f 0202 	mvn.w	r2, #2
 800c0ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	3b20      	subs	r3, #32
 800c0d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3714      	adds	r7, #20
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr
 800c0e0:	0800c0e5 	.word	0x0800c0e5

0800c0e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b085      	sub	sp, #20
 800c0e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c0ee:	4b14      	ldr	r3, [pc, #80]	; (800c140 <prvTaskExitError+0x5c>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0f6:	d00c      	beq.n	800c112 <prvTaskExitError+0x2e>
	__asm volatile
 800c0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fc:	b672      	cpsid	i
 800c0fe:	f383 8811 	msr	BASEPRI, r3
 800c102:	f3bf 8f6f 	isb	sy
 800c106:	f3bf 8f4f 	dsb	sy
 800c10a:	b662      	cpsie	i
 800c10c:	60fb      	str	r3, [r7, #12]
}
 800c10e:	bf00      	nop
 800c110:	e7fe      	b.n	800c110 <prvTaskExitError+0x2c>
	__asm volatile
 800c112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c116:	b672      	cpsid	i
 800c118:	f383 8811 	msr	BASEPRI, r3
 800c11c:	f3bf 8f6f 	isb	sy
 800c120:	f3bf 8f4f 	dsb	sy
 800c124:	b662      	cpsie	i
 800c126:	60bb      	str	r3, [r7, #8]
}
 800c128:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c12a:	bf00      	nop
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d0fc      	beq.n	800c12c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c132:	bf00      	nop
 800c134:	bf00      	nop
 800c136:	3714      	adds	r7, #20
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr
 800c140:	20000010 	.word	0x20000010
	...

0800c150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c150:	4b07      	ldr	r3, [pc, #28]	; (800c170 <pxCurrentTCBConst2>)
 800c152:	6819      	ldr	r1, [r3, #0]
 800c154:	6808      	ldr	r0, [r1, #0]
 800c156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c15a:	f380 8809 	msr	PSP, r0
 800c15e:	f3bf 8f6f 	isb	sy
 800c162:	f04f 0000 	mov.w	r0, #0
 800c166:	f380 8811 	msr	BASEPRI, r0
 800c16a:	4770      	bx	lr
 800c16c:	f3af 8000 	nop.w

0800c170 <pxCurrentTCBConst2>:
 800c170:	20007824 	.word	0x20007824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c174:	bf00      	nop
 800c176:	bf00      	nop

0800c178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c178:	4808      	ldr	r0, [pc, #32]	; (800c19c <prvPortStartFirstTask+0x24>)
 800c17a:	6800      	ldr	r0, [r0, #0]
 800c17c:	6800      	ldr	r0, [r0, #0]
 800c17e:	f380 8808 	msr	MSP, r0
 800c182:	f04f 0000 	mov.w	r0, #0
 800c186:	f380 8814 	msr	CONTROL, r0
 800c18a:	b662      	cpsie	i
 800c18c:	b661      	cpsie	f
 800c18e:	f3bf 8f4f 	dsb	sy
 800c192:	f3bf 8f6f 	isb	sy
 800c196:	df00      	svc	0
 800c198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c19a:	bf00      	nop
 800c19c:	e000ed08 	.word	0xe000ed08

0800c1a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b084      	sub	sp, #16
 800c1a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c1a6:	4b37      	ldr	r3, [pc, #220]	; (800c284 <xPortStartScheduler+0xe4>)
 800c1a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	b2db      	uxtb	r3, r3
 800c1b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	22ff      	movs	r2, #255	; 0xff
 800c1b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	b2db      	uxtb	r3, r3
 800c1be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c1c0:	78fb      	ldrb	r3, [r7, #3]
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c1c8:	b2da      	uxtb	r2, r3
 800c1ca:	4b2f      	ldr	r3, [pc, #188]	; (800c288 <xPortStartScheduler+0xe8>)
 800c1cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c1ce:	4b2f      	ldr	r3, [pc, #188]	; (800c28c <xPortStartScheduler+0xec>)
 800c1d0:	2207      	movs	r2, #7
 800c1d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1d4:	e009      	b.n	800c1ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c1d6:	4b2d      	ldr	r3, [pc, #180]	; (800c28c <xPortStartScheduler+0xec>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	3b01      	subs	r3, #1
 800c1dc:	4a2b      	ldr	r2, [pc, #172]	; (800c28c <xPortStartScheduler+0xec>)
 800c1de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c1e0:	78fb      	ldrb	r3, [r7, #3]
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	005b      	lsls	r3, r3, #1
 800c1e6:	b2db      	uxtb	r3, r3
 800c1e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c1ea:	78fb      	ldrb	r3, [r7, #3]
 800c1ec:	b2db      	uxtb	r3, r3
 800c1ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1f2:	2b80      	cmp	r3, #128	; 0x80
 800c1f4:	d0ef      	beq.n	800c1d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c1f6:	4b25      	ldr	r3, [pc, #148]	; (800c28c <xPortStartScheduler+0xec>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f1c3 0307 	rsb	r3, r3, #7
 800c1fe:	2b04      	cmp	r3, #4
 800c200:	d00c      	beq.n	800c21c <xPortStartScheduler+0x7c>
	__asm volatile
 800c202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c206:	b672      	cpsid	i
 800c208:	f383 8811 	msr	BASEPRI, r3
 800c20c:	f3bf 8f6f 	isb	sy
 800c210:	f3bf 8f4f 	dsb	sy
 800c214:	b662      	cpsie	i
 800c216:	60bb      	str	r3, [r7, #8]
}
 800c218:	bf00      	nop
 800c21a:	e7fe      	b.n	800c21a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c21c:	4b1b      	ldr	r3, [pc, #108]	; (800c28c <xPortStartScheduler+0xec>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	021b      	lsls	r3, r3, #8
 800c222:	4a1a      	ldr	r2, [pc, #104]	; (800c28c <xPortStartScheduler+0xec>)
 800c224:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c226:	4b19      	ldr	r3, [pc, #100]	; (800c28c <xPortStartScheduler+0xec>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c22e:	4a17      	ldr	r2, [pc, #92]	; (800c28c <xPortStartScheduler+0xec>)
 800c230:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	b2da      	uxtb	r2, r3
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c23a:	4b15      	ldr	r3, [pc, #84]	; (800c290 <xPortStartScheduler+0xf0>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	4a14      	ldr	r2, [pc, #80]	; (800c290 <xPortStartScheduler+0xf0>)
 800c240:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c244:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c246:	4b12      	ldr	r3, [pc, #72]	; (800c290 <xPortStartScheduler+0xf0>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4a11      	ldr	r2, [pc, #68]	; (800c290 <xPortStartScheduler+0xf0>)
 800c24c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c250:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c252:	f000 f8dd 	bl	800c410 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c256:	4b0f      	ldr	r3, [pc, #60]	; (800c294 <xPortStartScheduler+0xf4>)
 800c258:	2200      	movs	r2, #0
 800c25a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c25c:	f000 f8fc 	bl	800c458 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c260:	4b0d      	ldr	r3, [pc, #52]	; (800c298 <xPortStartScheduler+0xf8>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a0c      	ldr	r2, [pc, #48]	; (800c298 <xPortStartScheduler+0xf8>)
 800c266:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c26a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c26c:	f7ff ff84 	bl	800c178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c270:	f7ff f818 	bl	800b2a4 <vTaskSwitchContext>
	prvTaskExitError();
 800c274:	f7ff ff36 	bl	800c0e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c278:	2300      	movs	r3, #0
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3710      	adds	r7, #16
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
 800c282:	bf00      	nop
 800c284:	e000e400 	.word	0xe000e400
 800c288:	20007e50 	.word	0x20007e50
 800c28c:	20007e54 	.word	0x20007e54
 800c290:	e000ed20 	.word	0xe000ed20
 800c294:	20000010 	.word	0x20000010
 800c298:	e000ef34 	.word	0xe000ef34

0800c29c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c29c:	b480      	push	{r7}
 800c29e:	b083      	sub	sp, #12
 800c2a0:	af00      	add	r7, sp, #0
	__asm volatile
 800c2a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a6:	b672      	cpsid	i
 800c2a8:	f383 8811 	msr	BASEPRI, r3
 800c2ac:	f3bf 8f6f 	isb	sy
 800c2b0:	f3bf 8f4f 	dsb	sy
 800c2b4:	b662      	cpsie	i
 800c2b6:	607b      	str	r3, [r7, #4]
}
 800c2b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c2ba:	4b10      	ldr	r3, [pc, #64]	; (800c2fc <vPortEnterCritical+0x60>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	3301      	adds	r3, #1
 800c2c0:	4a0e      	ldr	r2, [pc, #56]	; (800c2fc <vPortEnterCritical+0x60>)
 800c2c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c2c4:	4b0d      	ldr	r3, [pc, #52]	; (800c2fc <vPortEnterCritical+0x60>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d111      	bne.n	800c2f0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c2cc:	4b0c      	ldr	r3, [pc, #48]	; (800c300 <vPortEnterCritical+0x64>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d00c      	beq.n	800c2f0 <vPortEnterCritical+0x54>
	__asm volatile
 800c2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2da:	b672      	cpsid	i
 800c2dc:	f383 8811 	msr	BASEPRI, r3
 800c2e0:	f3bf 8f6f 	isb	sy
 800c2e4:	f3bf 8f4f 	dsb	sy
 800c2e8:	b662      	cpsie	i
 800c2ea:	603b      	str	r3, [r7, #0]
}
 800c2ec:	bf00      	nop
 800c2ee:	e7fe      	b.n	800c2ee <vPortEnterCritical+0x52>
	}
}
 800c2f0:	bf00      	nop
 800c2f2:	370c      	adds	r7, #12
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr
 800c2fc:	20000010 	.word	0x20000010
 800c300:	e000ed04 	.word	0xe000ed04

0800c304 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c304:	b480      	push	{r7}
 800c306:	b083      	sub	sp, #12
 800c308:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c30a:	4b13      	ldr	r3, [pc, #76]	; (800c358 <vPortExitCritical+0x54>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d10c      	bne.n	800c32c <vPortExitCritical+0x28>
	__asm volatile
 800c312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c316:	b672      	cpsid	i
 800c318:	f383 8811 	msr	BASEPRI, r3
 800c31c:	f3bf 8f6f 	isb	sy
 800c320:	f3bf 8f4f 	dsb	sy
 800c324:	b662      	cpsie	i
 800c326:	607b      	str	r3, [r7, #4]
}
 800c328:	bf00      	nop
 800c32a:	e7fe      	b.n	800c32a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c32c:	4b0a      	ldr	r3, [pc, #40]	; (800c358 <vPortExitCritical+0x54>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	3b01      	subs	r3, #1
 800c332:	4a09      	ldr	r2, [pc, #36]	; (800c358 <vPortExitCritical+0x54>)
 800c334:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c336:	4b08      	ldr	r3, [pc, #32]	; (800c358 <vPortExitCritical+0x54>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d105      	bne.n	800c34a <vPortExitCritical+0x46>
 800c33e:	2300      	movs	r3, #0
 800c340:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	f383 8811 	msr	BASEPRI, r3
}
 800c348:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c34a:	bf00      	nop
 800c34c:	370c      	adds	r7, #12
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr
 800c356:	bf00      	nop
 800c358:	20000010 	.word	0x20000010
 800c35c:	00000000 	.word	0x00000000

0800c360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c360:	f3ef 8009 	mrs	r0, PSP
 800c364:	f3bf 8f6f 	isb	sy
 800c368:	4b15      	ldr	r3, [pc, #84]	; (800c3c0 <pxCurrentTCBConst>)
 800c36a:	681a      	ldr	r2, [r3, #0]
 800c36c:	f01e 0f10 	tst.w	lr, #16
 800c370:	bf08      	it	eq
 800c372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c37a:	6010      	str	r0, [r2, #0]
 800c37c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c380:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c384:	b672      	cpsid	i
 800c386:	f380 8811 	msr	BASEPRI, r0
 800c38a:	f3bf 8f4f 	dsb	sy
 800c38e:	f3bf 8f6f 	isb	sy
 800c392:	b662      	cpsie	i
 800c394:	f7fe ff86 	bl	800b2a4 <vTaskSwitchContext>
 800c398:	f04f 0000 	mov.w	r0, #0
 800c39c:	f380 8811 	msr	BASEPRI, r0
 800c3a0:	bc09      	pop	{r0, r3}
 800c3a2:	6819      	ldr	r1, [r3, #0]
 800c3a4:	6808      	ldr	r0, [r1, #0]
 800c3a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3aa:	f01e 0f10 	tst.w	lr, #16
 800c3ae:	bf08      	it	eq
 800c3b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c3b4:	f380 8809 	msr	PSP, r0
 800c3b8:	f3bf 8f6f 	isb	sy
 800c3bc:	4770      	bx	lr
 800c3be:	bf00      	nop

0800c3c0 <pxCurrentTCBConst>:
 800c3c0:	20007824 	.word	0x20007824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c3c4:	bf00      	nop
 800c3c6:	bf00      	nop

0800c3c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
	__asm volatile
 800c3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d2:	b672      	cpsid	i
 800c3d4:	f383 8811 	msr	BASEPRI, r3
 800c3d8:	f3bf 8f6f 	isb	sy
 800c3dc:	f3bf 8f4f 	dsb	sy
 800c3e0:	b662      	cpsie	i
 800c3e2:	607b      	str	r3, [r7, #4]
}
 800c3e4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c3e6:	f7fe fea1 	bl	800b12c <xTaskIncrementTick>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d003      	beq.n	800c3f8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c3f0:	4b06      	ldr	r3, [pc, #24]	; (800c40c <SysTick_Handler+0x44>)
 800c3f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3f6:	601a      	str	r2, [r3, #0]
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	f383 8811 	msr	BASEPRI, r3
}
 800c402:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c404:	bf00      	nop
 800c406:	3708      	adds	r7, #8
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}
 800c40c:	e000ed04 	.word	0xe000ed04

0800c410 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c410:	b480      	push	{r7}
 800c412:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c414:	4b0b      	ldr	r3, [pc, #44]	; (800c444 <vPortSetupTimerInterrupt+0x34>)
 800c416:	2200      	movs	r2, #0
 800c418:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c41a:	4b0b      	ldr	r3, [pc, #44]	; (800c448 <vPortSetupTimerInterrupt+0x38>)
 800c41c:	2200      	movs	r2, #0
 800c41e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c420:	4b0a      	ldr	r3, [pc, #40]	; (800c44c <vPortSetupTimerInterrupt+0x3c>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	4a0a      	ldr	r2, [pc, #40]	; (800c450 <vPortSetupTimerInterrupt+0x40>)
 800c426:	fba2 2303 	umull	r2, r3, r2, r3
 800c42a:	099b      	lsrs	r3, r3, #6
 800c42c:	4a09      	ldr	r2, [pc, #36]	; (800c454 <vPortSetupTimerInterrupt+0x44>)
 800c42e:	3b01      	subs	r3, #1
 800c430:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c432:	4b04      	ldr	r3, [pc, #16]	; (800c444 <vPortSetupTimerInterrupt+0x34>)
 800c434:	2207      	movs	r2, #7
 800c436:	601a      	str	r2, [r3, #0]
}
 800c438:	bf00      	nop
 800c43a:	46bd      	mov	sp, r7
 800c43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c440:	4770      	bx	lr
 800c442:	bf00      	nop
 800c444:	e000e010 	.word	0xe000e010
 800c448:	e000e018 	.word	0xe000e018
 800c44c:	20000004 	.word	0x20000004
 800c450:	10624dd3 	.word	0x10624dd3
 800c454:	e000e014 	.word	0xe000e014

0800c458 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c458:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c468 <vPortEnableVFP+0x10>
 800c45c:	6801      	ldr	r1, [r0, #0]
 800c45e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c462:	6001      	str	r1, [r0, #0]
 800c464:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c466:	bf00      	nop
 800c468:	e000ed88 	.word	0xe000ed88

0800c46c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c46c:	b480      	push	{r7}
 800c46e:	b085      	sub	sp, #20
 800c470:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c472:	f3ef 8305 	mrs	r3, IPSR
 800c476:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	2b0f      	cmp	r3, #15
 800c47c:	d916      	bls.n	800c4ac <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c47e:	4a19      	ldr	r2, [pc, #100]	; (800c4e4 <vPortValidateInterruptPriority+0x78>)
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	4413      	add	r3, r2
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c488:	4b17      	ldr	r3, [pc, #92]	; (800c4e8 <vPortValidateInterruptPriority+0x7c>)
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	7afa      	ldrb	r2, [r7, #11]
 800c48e:	429a      	cmp	r2, r3
 800c490:	d20c      	bcs.n	800c4ac <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800c492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c496:	b672      	cpsid	i
 800c498:	f383 8811 	msr	BASEPRI, r3
 800c49c:	f3bf 8f6f 	isb	sy
 800c4a0:	f3bf 8f4f 	dsb	sy
 800c4a4:	b662      	cpsie	i
 800c4a6:	607b      	str	r3, [r7, #4]
}
 800c4a8:	bf00      	nop
 800c4aa:	e7fe      	b.n	800c4aa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c4ac:	4b0f      	ldr	r3, [pc, #60]	; (800c4ec <vPortValidateInterruptPriority+0x80>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c4b4:	4b0e      	ldr	r3, [pc, #56]	; (800c4f0 <vPortValidateInterruptPriority+0x84>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d90c      	bls.n	800c4d6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800c4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c0:	b672      	cpsid	i
 800c4c2:	f383 8811 	msr	BASEPRI, r3
 800c4c6:	f3bf 8f6f 	isb	sy
 800c4ca:	f3bf 8f4f 	dsb	sy
 800c4ce:	b662      	cpsie	i
 800c4d0:	603b      	str	r3, [r7, #0]
}
 800c4d2:	bf00      	nop
 800c4d4:	e7fe      	b.n	800c4d4 <vPortValidateInterruptPriority+0x68>
	}
 800c4d6:	bf00      	nop
 800c4d8:	3714      	adds	r7, #20
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr
 800c4e2:	bf00      	nop
 800c4e4:	e000e3f0 	.word	0xe000e3f0
 800c4e8:	20007e50 	.word	0x20007e50
 800c4ec:	e000ed0c 	.word	0xe000ed0c
 800c4f0:	20007e54 	.word	0x20007e54

0800c4f4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b08a      	sub	sp, #40	; 0x28
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c500:	f7fe fd56 	bl	800afb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c504:	4b5b      	ldr	r3, [pc, #364]	; (800c674 <pvPortMalloc+0x180>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d101      	bne.n	800c510 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c50c:	f000 f91a 	bl	800c744 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c510:	4b59      	ldr	r3, [pc, #356]	; (800c678 <pvPortMalloc+0x184>)
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	4013      	ands	r3, r2
 800c518:	2b00      	cmp	r3, #0
 800c51a:	f040 8092 	bne.w	800c642 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d01f      	beq.n	800c564 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800c524:	2208      	movs	r2, #8
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	4413      	add	r3, r2
 800c52a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f003 0307 	and.w	r3, r3, #7
 800c532:	2b00      	cmp	r3, #0
 800c534:	d016      	beq.n	800c564 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f023 0307 	bic.w	r3, r3, #7
 800c53c:	3308      	adds	r3, #8
 800c53e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f003 0307 	and.w	r3, r3, #7
 800c546:	2b00      	cmp	r3, #0
 800c548:	d00c      	beq.n	800c564 <pvPortMalloc+0x70>
	__asm volatile
 800c54a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c54e:	b672      	cpsid	i
 800c550:	f383 8811 	msr	BASEPRI, r3
 800c554:	f3bf 8f6f 	isb	sy
 800c558:	f3bf 8f4f 	dsb	sy
 800c55c:	b662      	cpsie	i
 800c55e:	617b      	str	r3, [r7, #20]
}
 800c560:	bf00      	nop
 800c562:	e7fe      	b.n	800c562 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d06b      	beq.n	800c642 <pvPortMalloc+0x14e>
 800c56a:	4b44      	ldr	r3, [pc, #272]	; (800c67c <pvPortMalloc+0x188>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	429a      	cmp	r2, r3
 800c572:	d866      	bhi.n	800c642 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c574:	4b42      	ldr	r3, [pc, #264]	; (800c680 <pvPortMalloc+0x18c>)
 800c576:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c578:	4b41      	ldr	r3, [pc, #260]	; (800c680 <pvPortMalloc+0x18c>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c57e:	e004      	b.n	800c58a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800c580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c582:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	687a      	ldr	r2, [r7, #4]
 800c590:	429a      	cmp	r2, r3
 800c592:	d903      	bls.n	800c59c <pvPortMalloc+0xa8>
 800c594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d1f1      	bne.n	800c580 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c59c:	4b35      	ldr	r3, [pc, #212]	; (800c674 <pvPortMalloc+0x180>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d04d      	beq.n	800c642 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c5a6:	6a3b      	ldr	r3, [r7, #32]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	2208      	movs	r2, #8
 800c5ac:	4413      	add	r3, r2
 800c5ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b2:	681a      	ldr	r2, [r3, #0]
 800c5b4:	6a3b      	ldr	r3, [r7, #32]
 800c5b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ba:	685a      	ldr	r2, [r3, #4]
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	1ad2      	subs	r2, r2, r3
 800c5c0:	2308      	movs	r3, #8
 800c5c2:	005b      	lsls	r3, r3, #1
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d921      	bls.n	800c60c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c5c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	4413      	add	r3, r2
 800c5ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5d0:	69bb      	ldr	r3, [r7, #24]
 800c5d2:	f003 0307 	and.w	r3, r3, #7
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d00c      	beq.n	800c5f4 <pvPortMalloc+0x100>
	__asm volatile
 800c5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5de:	b672      	cpsid	i
 800c5e0:	f383 8811 	msr	BASEPRI, r3
 800c5e4:	f3bf 8f6f 	isb	sy
 800c5e8:	f3bf 8f4f 	dsb	sy
 800c5ec:	b662      	cpsie	i
 800c5ee:	613b      	str	r3, [r7, #16]
}
 800c5f0:	bf00      	nop
 800c5f2:	e7fe      	b.n	800c5f2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f6:	685a      	ldr	r2, [r3, #4]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	1ad2      	subs	r2, r2, r3
 800c5fc:	69bb      	ldr	r3, [r7, #24]
 800c5fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c606:	69b8      	ldr	r0, [r7, #24]
 800c608:	f000 f8fe 	bl	800c808 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c60c:	4b1b      	ldr	r3, [pc, #108]	; (800c67c <pvPortMalloc+0x188>)
 800c60e:	681a      	ldr	r2, [r3, #0]
 800c610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	1ad3      	subs	r3, r2, r3
 800c616:	4a19      	ldr	r2, [pc, #100]	; (800c67c <pvPortMalloc+0x188>)
 800c618:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c61a:	4b18      	ldr	r3, [pc, #96]	; (800c67c <pvPortMalloc+0x188>)
 800c61c:	681a      	ldr	r2, [r3, #0]
 800c61e:	4b19      	ldr	r3, [pc, #100]	; (800c684 <pvPortMalloc+0x190>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	429a      	cmp	r2, r3
 800c624:	d203      	bcs.n	800c62e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c626:	4b15      	ldr	r3, [pc, #84]	; (800c67c <pvPortMalloc+0x188>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	4a16      	ldr	r2, [pc, #88]	; (800c684 <pvPortMalloc+0x190>)
 800c62c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c630:	685a      	ldr	r2, [r3, #4]
 800c632:	4b11      	ldr	r3, [pc, #68]	; (800c678 <pvPortMalloc+0x184>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	431a      	orrs	r2, r3
 800c638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63e:	2200      	movs	r2, #0
 800c640:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c642:	f7fe fcc3 	bl	800afcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c646:	69fb      	ldr	r3, [r7, #28]
 800c648:	f003 0307 	and.w	r3, r3, #7
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d00c      	beq.n	800c66a <pvPortMalloc+0x176>
	__asm volatile
 800c650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c654:	b672      	cpsid	i
 800c656:	f383 8811 	msr	BASEPRI, r3
 800c65a:	f3bf 8f6f 	isb	sy
 800c65e:	f3bf 8f4f 	dsb	sy
 800c662:	b662      	cpsie	i
 800c664:	60fb      	str	r3, [r7, #12]
}
 800c666:	bf00      	nop
 800c668:	e7fe      	b.n	800c668 <pvPortMalloc+0x174>
	return pvReturn;
 800c66a:	69fb      	ldr	r3, [r7, #28]
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3728      	adds	r7, #40	; 0x28
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}
 800c674:	2000ba60 	.word	0x2000ba60
 800c678:	2000ba6c 	.word	0x2000ba6c
 800c67c:	2000ba64 	.word	0x2000ba64
 800c680:	2000ba58 	.word	0x2000ba58
 800c684:	2000ba68 	.word	0x2000ba68

0800c688 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b086      	sub	sp, #24
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d04c      	beq.n	800c734 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c69a:	2308      	movs	r3, #8
 800c69c:	425b      	negs	r3, r3
 800c69e:	697a      	ldr	r2, [r7, #20]
 800c6a0:	4413      	add	r3, r2
 800c6a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	685a      	ldr	r2, [r3, #4]
 800c6ac:	4b23      	ldr	r3, [pc, #140]	; (800c73c <vPortFree+0xb4>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4013      	ands	r3, r2
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d10c      	bne.n	800c6d0 <vPortFree+0x48>
	__asm volatile
 800c6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ba:	b672      	cpsid	i
 800c6bc:	f383 8811 	msr	BASEPRI, r3
 800c6c0:	f3bf 8f6f 	isb	sy
 800c6c4:	f3bf 8f4f 	dsb	sy
 800c6c8:	b662      	cpsie	i
 800c6ca:	60fb      	str	r3, [r7, #12]
}
 800c6cc:	bf00      	nop
 800c6ce:	e7fe      	b.n	800c6ce <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d00c      	beq.n	800c6f2 <vPortFree+0x6a>
	__asm volatile
 800c6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6dc:	b672      	cpsid	i
 800c6de:	f383 8811 	msr	BASEPRI, r3
 800c6e2:	f3bf 8f6f 	isb	sy
 800c6e6:	f3bf 8f4f 	dsb	sy
 800c6ea:	b662      	cpsie	i
 800c6ec:	60bb      	str	r3, [r7, #8]
}
 800c6ee:	bf00      	nop
 800c6f0:	e7fe      	b.n	800c6f0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	685a      	ldr	r2, [r3, #4]
 800c6f6:	4b11      	ldr	r3, [pc, #68]	; (800c73c <vPortFree+0xb4>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	4013      	ands	r3, r2
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d019      	beq.n	800c734 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d115      	bne.n	800c734 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	685a      	ldr	r2, [r3, #4]
 800c70c:	4b0b      	ldr	r3, [pc, #44]	; (800c73c <vPortFree+0xb4>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	43db      	mvns	r3, r3
 800c712:	401a      	ands	r2, r3
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c718:	f7fe fc4a 	bl	800afb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	685a      	ldr	r2, [r3, #4]
 800c720:	4b07      	ldr	r3, [pc, #28]	; (800c740 <vPortFree+0xb8>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	4413      	add	r3, r2
 800c726:	4a06      	ldr	r2, [pc, #24]	; (800c740 <vPortFree+0xb8>)
 800c728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c72a:	6938      	ldr	r0, [r7, #16]
 800c72c:	f000 f86c 	bl	800c808 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c730:	f7fe fc4c 	bl	800afcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c734:	bf00      	nop
 800c736:	3718      	adds	r7, #24
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	2000ba6c 	.word	0x2000ba6c
 800c740:	2000ba64 	.word	0x2000ba64

0800c744 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c744:	b480      	push	{r7}
 800c746:	b085      	sub	sp, #20
 800c748:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c74a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c74e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c750:	4b27      	ldr	r3, [pc, #156]	; (800c7f0 <prvHeapInit+0xac>)
 800c752:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	f003 0307 	and.w	r3, r3, #7
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d00c      	beq.n	800c778 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	3307      	adds	r3, #7
 800c762:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f023 0307 	bic.w	r3, r3, #7
 800c76a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c76c:	68ba      	ldr	r2, [r7, #8]
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	1ad3      	subs	r3, r2, r3
 800c772:	4a1f      	ldr	r2, [pc, #124]	; (800c7f0 <prvHeapInit+0xac>)
 800c774:	4413      	add	r3, r2
 800c776:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c77c:	4a1d      	ldr	r2, [pc, #116]	; (800c7f4 <prvHeapInit+0xb0>)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c782:	4b1c      	ldr	r3, [pc, #112]	; (800c7f4 <prvHeapInit+0xb0>)
 800c784:	2200      	movs	r2, #0
 800c786:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	68ba      	ldr	r2, [r7, #8]
 800c78c:	4413      	add	r3, r2
 800c78e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c790:	2208      	movs	r2, #8
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	1a9b      	subs	r3, r3, r2
 800c796:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f023 0307 	bic.w	r3, r3, #7
 800c79e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	4a15      	ldr	r2, [pc, #84]	; (800c7f8 <prvHeapInit+0xb4>)
 800c7a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c7a6:	4b14      	ldr	r3, [pc, #80]	; (800c7f8 <prvHeapInit+0xb4>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c7ae:	4b12      	ldr	r3, [pc, #72]	; (800c7f8 <prvHeapInit+0xb4>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	68fa      	ldr	r2, [r7, #12]
 800c7be:	1ad2      	subs	r2, r2, r3
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c7c4:	4b0c      	ldr	r3, [pc, #48]	; (800c7f8 <prvHeapInit+0xb4>)
 800c7c6:	681a      	ldr	r2, [r3, #0]
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	4a0a      	ldr	r2, [pc, #40]	; (800c7fc <prvHeapInit+0xb8>)
 800c7d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	4a09      	ldr	r2, [pc, #36]	; (800c800 <prvHeapInit+0xbc>)
 800c7da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c7dc:	4b09      	ldr	r3, [pc, #36]	; (800c804 <prvHeapInit+0xc0>)
 800c7de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c7e2:	601a      	str	r2, [r3, #0]
}
 800c7e4:	bf00      	nop
 800c7e6:	3714      	adds	r7, #20
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr
 800c7f0:	20007e58 	.word	0x20007e58
 800c7f4:	2000ba58 	.word	0x2000ba58
 800c7f8:	2000ba60 	.word	0x2000ba60
 800c7fc:	2000ba68 	.word	0x2000ba68
 800c800:	2000ba64 	.word	0x2000ba64
 800c804:	2000ba6c 	.word	0x2000ba6c

0800c808 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c808:	b480      	push	{r7}
 800c80a:	b085      	sub	sp, #20
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c810:	4b28      	ldr	r3, [pc, #160]	; (800c8b4 <prvInsertBlockIntoFreeList+0xac>)
 800c812:	60fb      	str	r3, [r7, #12]
 800c814:	e002      	b.n	800c81c <prvInsertBlockIntoFreeList+0x14>
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	60fb      	str	r3, [r7, #12]
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	429a      	cmp	r2, r3
 800c824:	d8f7      	bhi.n	800c816 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	685b      	ldr	r3, [r3, #4]
 800c82e:	68ba      	ldr	r2, [r7, #8]
 800c830:	4413      	add	r3, r2
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	429a      	cmp	r2, r3
 800c836:	d108      	bne.n	800c84a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	685a      	ldr	r2, [r3, #4]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	441a      	add	r2, r3
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	685b      	ldr	r3, [r3, #4]
 800c852:	68ba      	ldr	r2, [r7, #8]
 800c854:	441a      	add	r2, r3
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d118      	bne.n	800c890 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681a      	ldr	r2, [r3, #0]
 800c862:	4b15      	ldr	r3, [pc, #84]	; (800c8b8 <prvInsertBlockIntoFreeList+0xb0>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	429a      	cmp	r2, r3
 800c868:	d00d      	beq.n	800c886 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	685a      	ldr	r2, [r3, #4]
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	441a      	add	r2, r3
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	601a      	str	r2, [r3, #0]
 800c884:	e008      	b.n	800c898 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c886:	4b0c      	ldr	r3, [pc, #48]	; (800c8b8 <prvInsertBlockIntoFreeList+0xb0>)
 800c888:	681a      	ldr	r2, [r3, #0]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	601a      	str	r2, [r3, #0]
 800c88e:	e003      	b.n	800c898 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681a      	ldr	r2, [r3, #0]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c898:	68fa      	ldr	r2, [r7, #12]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d002      	beq.n	800c8a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8a6:	bf00      	nop
 800c8a8:	3714      	adds	r7, #20
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr
 800c8b2:	bf00      	nop
 800c8b4:	2000ba58 	.word	0x2000ba58
 800c8b8:	2000ba60 	.word	0x2000ba60

0800c8bc <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control>:
 800c8bc:	4b04      	ldr	r3, [pc, #16]	; (800c8d0 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800c8be:	681a      	ldr	r2, [r3, #0]
 800c8c0:	b10a      	cbz	r2, 800c8c6 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0xa>
 800c8c2:	4803      	ldr	r0, [pc, #12]	; (800c8d0 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800c8c4:	4770      	bx	lr
 800c8c6:	4a03      	ldr	r2, [pc, #12]	; (800c8d4 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x18>)
 800c8c8:	4801      	ldr	r0, [pc, #4]	; (800c8d0 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800c8ca:	6812      	ldr	r2, [r2, #0]
 800c8cc:	601a      	str	r2, [r3, #0]
 800c8ce:	4770      	bx	lr
 800c8d0:	2000001c 	.word	0x2000001c
 800c8d4:	20000ae8 	.word	0x20000ae8

0800c8d8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800c8d8:	4b06      	ldr	r3, [pc, #24]	; (800c8f4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x1c>)
 800c8da:	4807      	ldr	r0, [pc, #28]	; (800c8f8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x20>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4907      	ldr	r1, [pc, #28]	; (800c8fc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x24>)
 800c8e0:	4a07      	ldr	r2, [pc, #28]	; (800c900 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x28>)
 800c8e2:	b410      	push	{r4}
 800c8e4:	4c07      	ldr	r4, [pc, #28]	; (800c904 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x2c>)
 800c8e6:	6003      	str	r3, [r0, #0]
 800c8e8:	6023      	str	r3, [r4, #0]
 800c8ea:	600b      	str	r3, [r1, #0]
 800c8ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8f0:	6013      	str	r3, [r2, #0]
 800c8f2:	4770      	bx	lr
 800c8f4:	20000ae8 	.word	0x20000ae8
 800c8f8:	20000090 	.word	0x20000090
 800c8fc:	20000050 	.word	0x20000050
 800c900:	2000001c 	.word	0x2000001c
 800c904:	20000078 	.word	0x20000078

0800c908 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug>:
 800c908:	4b04      	ldr	r3, [pc, #16]	; (800c91c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0x14>)
 800c90a:	681a      	ldr	r2, [r3, #0]
 800c90c:	b10a      	cbz	r2, 800c912 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0xa>
 800c90e:	4803      	ldr	r0, [pc, #12]	; (800c91c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0x14>)
 800c910:	4770      	bx	lr
 800c912:	4a03      	ldr	r2, [pc, #12]	; (800c920 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0x18>)
 800c914:	4801      	ldr	r0, [pc, #4]	; (800c91c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0x14>)
 800c916:	6812      	ldr	r2, [r2, #0]
 800c918:	601a      	str	r2, [r3, #0]
 800c91a:	4770      	bx	lr
 800c91c:	200000b0 	.word	0x200000b0
 800c920:	20000ae8 	.word	0x20000ae8

0800c924 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug>:
 800c924:	4a02      	ldr	r2, [pc, #8]	; (800c930 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0xc>)
 800c926:	4b03      	ldr	r3, [pc, #12]	; (800c934 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Debug+0x10>)
 800c928:	6812      	ldr	r2, [r2, #0]
 800c92a:	601a      	str	r2, [r3, #0]
 800c92c:	4770      	bx	lr
 800c92e:	bf00      	nop
 800c930:	20000ae8 	.word	0x20000ae8
 800c934:	200000b0 	.word	0x200000b0

0800c938 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800c938:	4b04      	ldr	r3, [pc, #16]	; (800c94c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800c93a:	681a      	ldr	r2, [r3, #0]
 800c93c:	b10a      	cbz	r2, 800c942 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0xa>
 800c93e:	4803      	ldr	r0, [pc, #12]	; (800c94c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800c940:	4770      	bx	lr
 800c942:	4a03      	ldr	r2, [pc, #12]	; (800c950 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x18>)
 800c944:	4801      	ldr	r0, [pc, #4]	; (800c94c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800c946:	6812      	ldr	r2, [r2, #0]
 800c948:	601a      	str	r2, [r3, #0]
 800c94a:	4770      	bx	lr
 800c94c:	200000d0 	.word	0x200000d0
 800c950:	20000ae8 	.word	0x20000ae8

0800c954 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800c954:	4a02      	ldr	r2, [pc, #8]	; (800c960 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0xc>)
 800c956:	4b03      	ldr	r3, [pc, #12]	; (800c964 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x10>)
 800c958:	6812      	ldr	r2, [r2, #0]
 800c95a:	601a      	str	r2, [r3, #0]
 800c95c:	4770      	bx	lr
 800c95e:	bf00      	nop
 800c960:	20000ae8 	.word	0x20000ae8
 800c964:	200000d0 	.word	0x200000d0

0800c968 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder>:
 800c968:	4b04      	ldr	r3, [pc, #16]	; (800c97c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0x14>)
 800c96a:	681a      	ldr	r2, [r3, #0]
 800c96c:	b10a      	cbz	r2, 800c972 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0xa>
 800c96e:	4803      	ldr	r0, [pc, #12]	; (800c97c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0x14>)
 800c970:	4770      	bx	lr
 800c972:	4a03      	ldr	r2, [pc, #12]	; (800c980 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0x18>)
 800c974:	4801      	ldr	r0, [pc, #4]	; (800c97c <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0x14>)
 800c976:	6812      	ldr	r2, [r2, #0]
 800c978:	601a      	str	r2, [r3, #0]
 800c97a:	4770      	bx	lr
 800c97c:	200000f0 	.word	0x200000f0
 800c980:	20000ae8 	.word	0x20000ae8

0800c984 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder>:
 800c984:	4a02      	ldr	r2, [pc, #8]	; (800c990 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0xc>)
 800c986:	4b03      	ldr	r3, [pc, #12]	; (800c994 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Encoder+0x10>)
 800c988:	6812      	ldr	r2, [r2, #0]
 800c98a:	601a      	str	r2, [r3, #0]
 800c98c:	4770      	bx	lr
 800c98e:	bf00      	nop
 800c990:	20000ae8 	.word	0x20000ae8
 800c994:	200000f0 	.word	0x200000f0

0800c998 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800c998:	4b04      	ldr	r3, [pc, #16]	; (800c9ac <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800c99a:	681a      	ldr	r2, [r3, #0]
 800c99c:	b10a      	cbz	r2, 800c9a2 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0xa>
 800c99e:	4803      	ldr	r0, [pc, #12]	; (800c9ac <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800c9a0:	4770      	bx	lr
 800c9a2:	4a03      	ldr	r2, [pc, #12]	; (800c9b0 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x18>)
 800c9a4:	4801      	ldr	r0, [pc, #4]	; (800c9ac <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800c9a6:	6812      	ldr	r2, [r2, #0]
 800c9a8:	601a      	str	r2, [r3, #0]
 800c9aa:	4770      	bx	lr
 800c9ac:	20000110 	.word	0x20000110
 800c9b0:	20000ae8 	.word	0x20000ae8

0800c9b4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800c9b4:	4a02      	ldr	r2, [pc, #8]	; (800c9c0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0xc>)
 800c9b6:	4b03      	ldr	r3, [pc, #12]	; (800c9c4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x10>)
 800c9b8:	6812      	ldr	r2, [r2, #0]
 800c9ba:	601a      	str	r2, [r3, #0]
 800c9bc:	4770      	bx	lr
 800c9be:	bf00      	nop
 800c9c0:	20000ae8 	.word	0x20000ae8
 800c9c4:	20000110 	.word	0x20000110

0800c9c8 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800c9c8:	4b04      	ldr	r3, [pc, #16]	; (800c9dc <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800c9ca:	681a      	ldr	r2, [r3, #0]
 800c9cc:	b10a      	cbz	r2, 800c9d2 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0xa>
 800c9ce:	4803      	ldr	r0, [pc, #12]	; (800c9dc <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800c9d0:	4770      	bx	lr
 800c9d2:	4a03      	ldr	r2, [pc, #12]	; (800c9e0 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x18>)
 800c9d4:	4801      	ldr	r0, [pc, #4]	; (800c9dc <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800c9d6:	6812      	ldr	r2, [r2, #0]
 800c9d8:	601a      	str	r2, [r3, #0]
 800c9da:	4770      	bx	lr
 800c9dc:	20000130 	.word	0x20000130
 800c9e0:	20000ae8 	.word	0x20000ae8

0800c9e4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800c9e4:	4b06      	ldr	r3, [pc, #24]	; (800ca00 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x1c>)
 800c9e6:	4807      	ldr	r0, [pc, #28]	; (800ca04 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x20>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4907      	ldr	r1, [pc, #28]	; (800ca08 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x24>)
 800c9ec:	4a07      	ldr	r2, [pc, #28]	; (800ca0c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x28>)
 800c9ee:	b410      	push	{r4}
 800c9f0:	4c07      	ldr	r4, [pc, #28]	; (800ca10 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x2c>)
 800c9f2:	6003      	str	r3, [r0, #0]
 800c9f4:	6023      	str	r3, [r4, #0]
 800c9f6:	600b      	str	r3, [r1, #0]
 800c9f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9fc:	6013      	str	r3, [r2, #0]
 800c9fe:	4770      	bx	lr
 800ca00:	20000ae8 	.word	0x20000ae8
 800ca04:	200001a4 	.word	0x200001a4
 800ca08:	20000164 	.word	0x20000164
 800ca0c:	20000130 	.word	0x20000130
 800ca10:	2000018c 	.word	0x2000018c

0800ca14 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__size_function__Control_Request__encoders>:
 800ca14:	2005      	movs	r0, #5
 800ca16:	4770      	bx	lr

0800ca18 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__get_const_function__Control_Request__encoders>:
 800ca18:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800ca1c:	4770      	bx	lr
 800ca1e:	bf00      	nop

0800ca20 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__fetch_function__Control_Request__encoders>:
 800ca20:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 800ca24:	8013      	strh	r3, [r2, #0]
 800ca26:	4770      	bx	lr

0800ca28 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__assign_function__Control_Request__encoders>:
 800ca28:	f9b2 3000 	ldrsh.w	r3, [r2]
 800ca2c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800ca30:	4770      	bx	lr
 800ca32:	bf00      	nop

0800ca34 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__size_function__Control_Event__request>:
 800ca34:	6840      	ldr	r0, [r0, #4]
 800ca36:	4770      	bx	lr

0800ca38 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_const_function__Control_Event__request>:
 800ca38:	6800      	ldr	r0, [r0, #0]
 800ca3a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ca3e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800ca42:	4770      	bx	lr

0800ca44 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__fetch_function__Control_Event__request>:
 800ca44:	6800      	ldr	r0, [r0, #0]
 800ca46:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ca4a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800ca4e:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800ca52:	6859      	ldr	r1, [r3, #4]
 800ca54:	689b      	ldr	r3, [r3, #8]
 800ca56:	6010      	str	r0, [r2, #0]
 800ca58:	6051      	str	r1, [r2, #4]
 800ca5a:	6093      	str	r3, [r2, #8]
 800ca5c:	4770      	bx	lr
 800ca5e:	bf00      	nop

0800ca60 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__assign_function__Control_Event__request>:
 800ca60:	6800      	ldr	r0, [r0, #0]
 800ca62:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800ca66:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800ca6a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800ca6e:	b500      	push	{lr}
 800ca70:	f8d2 e000 	ldr.w	lr, [r2]
 800ca74:	6892      	ldr	r2, [r2, #8]
 800ca76:	f840 e021 	str.w	lr, [r0, r1, lsl #2]
 800ca7a:	f8c3 c004 	str.w	ip, [r3, #4]
 800ca7e:	609a      	str	r2, [r3, #8]
 800ca80:	f85d fb04 	ldr.w	pc, [sp], #4

0800ca84 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__size_function__Control_Event__response>:
 800ca84:	6840      	ldr	r0, [r0, #4]
 800ca86:	4770      	bx	lr

0800ca88 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_const_function__Control_Event__response>:
 800ca88:	6800      	ldr	r0, [r0, #0]
 800ca8a:	4408      	add	r0, r1
 800ca8c:	4770      	bx	lr
 800ca8e:	bf00      	nop

0800ca90 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__fetch_function__Control_Event__response>:
 800ca90:	6803      	ldr	r3, [r0, #0]
 800ca92:	5c5b      	ldrb	r3, [r3, r1]
 800ca94:	7013      	strb	r3, [r2, #0]
 800ca96:	4770      	bx	lr

0800ca98 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__assign_function__Control_Event__response>:
 800ca98:	6803      	ldr	r3, [r0, #0]
 800ca9a:	7812      	ldrb	r2, [r2, #0]
 800ca9c:	545a      	strb	r2, [r3, r1]
 800ca9e:	4770      	bx	lr

0800caa0 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__Control_Request_init_function>:
 800caa0:	f008 b956 	b.w	8014d50 <racs_services__srv__Control_Request__init>

0800caa4 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__Control_Request_fini_function>:
 800caa4:	f008 b958 	b.w	8014d58 <racs_services__srv__Control_Request__fini>

0800caa8 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__Control_Response_init_function>:
 800caa8:	f008 b998 	b.w	8014ddc <racs_services__srv__Control_Response__init>

0800caac <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__Control_Response_fini_function>:
 800caac:	f008 b99a 	b.w	8014de4 <racs_services__srv__Control_Response__fini>

0800cab0 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__Control_Event_init_function>:
 800cab0:	f008 b9d0 	b.w	8014e54 <racs_services__srv__Control_Event__init>

0800cab4 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__Control_Event_fini_function>:
 800cab4:	f008 b9f0 	b.w	8014e98 <racs_services__srv__Control_Event__fini>

0800cab8 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__resize_function__Control_Event__request>:
 800cab8:	b510      	push	{r4, lr}
 800caba:	4604      	mov	r4, r0
 800cabc:	b082      	sub	sp, #8
 800cabe:	9101      	str	r1, [sp, #4]
 800cac0:	f008 f978 	bl	8014db4 <racs_services__srv__Control_Request__Sequence__fini>
 800cac4:	9901      	ldr	r1, [sp, #4]
 800cac6:	4620      	mov	r0, r4
 800cac8:	b002      	add	sp, #8
 800caca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cace:	f008 b957 	b.w	8014d80 <racs_services__srv__Control_Request__Sequence__init>
 800cad2:	bf00      	nop

0800cad4 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__resize_function__Control_Event__response>:
 800cad4:	b510      	push	{r4, lr}
 800cad6:	4604      	mov	r4, r0
 800cad8:	b082      	sub	sp, #8
 800cada:	9101      	str	r1, [sp, #4]
 800cadc:	f008 f9a6 	bl	8014e2c <racs_services__srv__Control_Response__Sequence__fini>
 800cae0:	9901      	ldr	r1, [sp, #4]
 800cae2:	4620      	mov	r0, r4
 800cae4:	b002      	add	sp, #8
 800cae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800caea:	f008 b985 	b.w	8014df8 <racs_services__srv__Control_Response__Sequence__init>
 800caee:	bf00      	nop

0800caf0 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_function__Control_Event__response>:
 800caf0:	6800      	ldr	r0, [r0, #0]
 800caf2:	4408      	add	r0, r1
 800caf4:	4770      	bx	lr
 800caf6:	bf00      	nop

0800caf8 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__get_function__Control_Request__encoders>:
 800caf8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800cafc:	4770      	bx	lr
 800cafe:	bf00      	nop

0800cb00 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_function__Control_Event__request>:
 800cb00:	6800      	ldr	r0, [r0, #0]
 800cb02:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800cb06:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800cb0a:	4770      	bx	lr

0800cb0c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800cb0c:	4b04      	ldr	r3, [pc, #16]	; (800cb20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800cb0e:	681a      	ldr	r2, [r3, #0]
 800cb10:	b10a      	cbz	r2, 800cb16 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0xa>
 800cb12:	4803      	ldr	r0, [pc, #12]	; (800cb20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800cb14:	4770      	bx	lr
 800cb16:	4a03      	ldr	r2, [pc, #12]	; (800cb24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x18>)
 800cb18:	4801      	ldr	r0, [pc, #4]	; (800cb20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800cb1a:	6812      	ldr	r2, [r2, #0]
 800cb1c:	601a      	str	r2, [r3, #0]
 800cb1e:	4770      	bx	lr
 800cb20:	2000033c 	.word	0x2000033c
 800cb24:	20000aec 	.word	0x20000aec

0800cb28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response>:
 800cb28:	4b04      	ldr	r3, [pc, #16]	; (800cb3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800cb2a:	681a      	ldr	r2, [r3, #0]
 800cb2c:	b10a      	cbz	r2, 800cb32 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0xa>
 800cb2e:	4803      	ldr	r0, [pc, #12]	; (800cb3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800cb30:	4770      	bx	lr
 800cb32:	4a03      	ldr	r2, [pc, #12]	; (800cb40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x18>)
 800cb34:	4801      	ldr	r0, [pc, #4]	; (800cb3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800cb36:	6812      	ldr	r2, [r2, #0]
 800cb38:	601a      	str	r2, [r3, #0]
 800cb3a:	4770      	bx	lr
 800cb3c:	20000390 	.word	0x20000390
 800cb40:	20000aec 	.word	0x20000aec

0800cb44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event>:
 800cb44:	b508      	push	{r3, lr}
 800cb46:	f002 ff17 	bl	800f978 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800cb4a:	4913      	ldr	r1, [pc, #76]	; (800cb98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x54>)
 800cb4c:	4b13      	ldr	r3, [pc, #76]	; (800cb9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x58>)
 800cb4e:	680a      	ldr	r2, [r1, #0]
 800cb50:	60d8      	str	r0, [r3, #12]
 800cb52:	b152      	cbz	r2, 800cb6a <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x26>
 800cb54:	4a12      	ldr	r2, [pc, #72]	; (800cba0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x5c>)
 800cb56:	6499      	str	r1, [r3, #72]	; 0x48
 800cb58:	6811      	ldr	r1, [r2, #0]
 800cb5a:	b171      	cbz	r1, 800cb7a <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x36>
 800cb5c:	4911      	ldr	r1, [pc, #68]	; (800cba4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800cb5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800cb62:	680b      	ldr	r3, [r1, #0]
 800cb64:	b193      	cbz	r3, 800cb8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x48>
 800cb66:	480f      	ldr	r0, [pc, #60]	; (800cba4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800cb68:	bd08      	pop	{r3, pc}
 800cb6a:	4a0f      	ldr	r2, [pc, #60]	; (800cba8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800cb6c:	6499      	str	r1, [r3, #72]	; 0x48
 800cb6e:	6812      	ldr	r2, [r2, #0]
 800cb70:	600a      	str	r2, [r1, #0]
 800cb72:	4a0b      	ldr	r2, [pc, #44]	; (800cba0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x5c>)
 800cb74:	6811      	ldr	r1, [r2, #0]
 800cb76:	2900      	cmp	r1, #0
 800cb78:	d1f0      	bne.n	800cb5c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x18>
 800cb7a:	490b      	ldr	r1, [pc, #44]	; (800cba8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800cb7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800cb80:	6809      	ldr	r1, [r1, #0]
 800cb82:	6011      	str	r1, [r2, #0]
 800cb84:	4907      	ldr	r1, [pc, #28]	; (800cba4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800cb86:	680b      	ldr	r3, [r1, #0]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d1ec      	bne.n	800cb66 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x22>
 800cb8c:	4b06      	ldr	r3, [pc, #24]	; (800cba8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800cb8e:	4805      	ldr	r0, [pc, #20]	; (800cba4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	600b      	str	r3, [r1, #0]
 800cb94:	bd08      	pop	{r3, pc}
 800cb96:	bf00      	nop
 800cb98:	2000033c 	.word	0x2000033c
 800cb9c:	200001bc 	.word	0x200001bc
 800cba0:	20000390 	.word	0x20000390
 800cba4:	20000270 	.word	0x20000270
 800cba8:	20000aec 	.word	0x20000aec

0800cbac <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control>:
 800cbac:	4b25      	ldr	r3, [pc, #148]	; (800cc44 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	b510      	push	{r4, lr}
 800cbb2:	b142      	cbz	r2, 800cbc6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x1a>
 800cbb4:	685c      	ldr	r4, [r3, #4]
 800cbb6:	68a3      	ldr	r3, [r4, #8]
 800cbb8:	b163      	cbz	r3, 800cbd4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x28>
 800cbba:	68e3      	ldr	r3, [r4, #12]
 800cbbc:	b193      	cbz	r3, 800cbe4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x38>
 800cbbe:	6923      	ldr	r3, [r4, #16]
 800cbc0:	b1c3      	cbz	r3, 800cbf4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x48>
 800cbc2:	4820      	ldr	r0, [pc, #128]	; (800cc44 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800cbc4:	bd10      	pop	{r4, pc}
 800cbc6:	4a20      	ldr	r2, [pc, #128]	; (800cc48 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800cbc8:	685c      	ldr	r4, [r3, #4]
 800cbca:	6812      	ldr	r2, [r2, #0]
 800cbcc:	601a      	str	r2, [r3, #0]
 800cbce:	68a3      	ldr	r3, [r4, #8]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d1f2      	bne.n	800cbba <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xe>
 800cbd4:	4a1d      	ldr	r2, [pc, #116]	; (800cc4c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa0>)
 800cbd6:	6813      	ldr	r3, [r2, #0]
 800cbd8:	b303      	cbz	r3, 800cc1c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x70>
 800cbda:	6853      	ldr	r3, [r2, #4]
 800cbdc:	60a3      	str	r3, [r4, #8]
 800cbde:	68e3      	ldr	r3, [r4, #12]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d1ec      	bne.n	800cbbe <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x12>
 800cbe4:	4b1a      	ldr	r3, [pc, #104]	; (800cc50 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa4>)
 800cbe6:	681a      	ldr	r2, [r3, #0]
 800cbe8:	b1e2      	cbz	r2, 800cc24 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x78>
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	60e3      	str	r3, [r4, #12]
 800cbee:	6923      	ldr	r3, [r4, #16]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d1e6      	bne.n	800cbc2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x16>
 800cbf4:	f002 fec0 	bl	800f978 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800cbf8:	4a14      	ldr	r2, [pc, #80]	; (800cc4c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa0>)
 800cbfa:	4916      	ldr	r1, [pc, #88]	; (800cc54 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa8>)
 800cbfc:	6813      	ldr	r3, [r2, #0]
 800cbfe:	60c8      	str	r0, [r1, #12]
 800cc00:	b1e3      	cbz	r3, 800cc3c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x90>
 800cc02:	4b13      	ldr	r3, [pc, #76]	; (800cc50 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa4>)
 800cc04:	648a      	str	r2, [r1, #72]	; 0x48
 800cc06:	681a      	ldr	r2, [r3, #0]
 800cc08:	b1a2      	cbz	r2, 800cc34 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x88>
 800cc0a:	4a13      	ldr	r2, [pc, #76]	; (800cc58 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xac>)
 800cc0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800cc10:	6813      	ldr	r3, [r2, #0]
 800cc12:	b15b      	cbz	r3, 800cc2c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x80>
 800cc14:	6853      	ldr	r3, [r2, #4]
 800cc16:	480b      	ldr	r0, [pc, #44]	; (800cc44 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800cc18:	6123      	str	r3, [r4, #16]
 800cc1a:	bd10      	pop	{r4, pc}
 800cc1c:	4b0a      	ldr	r3, [pc, #40]	; (800cc48 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	6013      	str	r3, [r2, #0]
 800cc22:	e7da      	b.n	800cbda <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x2e>
 800cc24:	4a08      	ldr	r2, [pc, #32]	; (800cc48 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800cc26:	6812      	ldr	r2, [r2, #0]
 800cc28:	601a      	str	r2, [r3, #0]
 800cc2a:	e7de      	b.n	800cbea <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x3e>
 800cc2c:	4b06      	ldr	r3, [pc, #24]	; (800cc48 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	6013      	str	r3, [r2, #0]
 800cc32:	e7ef      	b.n	800cc14 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x68>
 800cc34:	4a04      	ldr	r2, [pc, #16]	; (800cc48 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800cc36:	6812      	ldr	r2, [r2, #0]
 800cc38:	601a      	str	r2, [r3, #0]
 800cc3a:	e7e6      	b.n	800cc0a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x5e>
 800cc3c:	4b02      	ldr	r3, [pc, #8]	; (800cc48 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	6013      	str	r3, [r2, #0]
 800cc42:	e7de      	b.n	800cc02 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x56>
 800cc44:	200003bc 	.word	0x200003bc
 800cc48:	20000aec 	.word	0x20000aec
 800cc4c:	2000033c 	.word	0x2000033c
 800cc50:	20000390 	.word	0x20000390
 800cc54:	200001bc 	.word	0x200001bc
 800cc58:	20000270 	.word	0x20000270

0800cc5c <racs_services__msg__Debug__rosidl_typesupport_introspection_c__size_function__Debug__data>:
 800cc5c:	2006      	movs	r0, #6
 800cc5e:	4770      	bx	lr

0800cc60 <racs_services__msg__Debug__rosidl_typesupport_introspection_c__get_const_function__Debug__data>:
 800cc60:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800cc64:	4770      	bx	lr
 800cc66:	bf00      	nop

0800cc68 <racs_services__msg__Debug__rosidl_typesupport_introspection_c__fetch_function__Debug__data>:
 800cc68:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cc6c:	680b      	ldr	r3, [r1, #0]
 800cc6e:	6013      	str	r3, [r2, #0]
 800cc70:	4770      	bx	lr
 800cc72:	bf00      	nop

0800cc74 <racs_services__msg__Debug__rosidl_typesupport_introspection_c__assign_function__Debug__data>:
 800cc74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cc78:	6813      	ldr	r3, [r2, #0]
 800cc7a:	600b      	str	r3, [r1, #0]
 800cc7c:	4770      	bx	lr
 800cc7e:	bf00      	nop

0800cc80 <racs_services__msg__Debug__rosidl_typesupport_introspection_c__Debug_init_function>:
 800cc80:	f008 b9ca 	b.w	8015018 <racs_services__msg__Debug__init>

0800cc84 <racs_services__msg__Debug__rosidl_typesupport_introspection_c__Debug_fini_function>:
 800cc84:	f008 b9cc 	b.w	8015020 <racs_services__msg__Debug__fini>

0800cc88 <racs_services__msg__Debug__rosidl_typesupport_introspection_c__get_function__Debug__data>:
 800cc88:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop

0800cc90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Debug>:
 800cc90:	4b04      	ldr	r3, [pc, #16]	; (800cca4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Debug+0x14>)
 800cc92:	681a      	ldr	r2, [r3, #0]
 800cc94:	b10a      	cbz	r2, 800cc9a <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Debug+0xa>
 800cc96:	4803      	ldr	r0, [pc, #12]	; (800cca4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Debug+0x14>)
 800cc98:	4770      	bx	lr
 800cc9a:	4a03      	ldr	r2, [pc, #12]	; (800cca8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Debug+0x18>)
 800cc9c:	4801      	ldr	r0, [pc, #4]	; (800cca4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Debug+0x14>)
 800cc9e:	6812      	ldr	r2, [r2, #0]
 800cca0:	601a      	str	r2, [r3, #0]
 800cca2:	4770      	bx	lr
 800cca4:	20000424 	.word	0x20000424
 800cca8:	20000aec 	.word	0x20000aec

0800ccac <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__size_function__DirectAccess__pwms>:
 800ccac:	2006      	movs	r0, #6
 800ccae:	4770      	bx	lr

0800ccb0 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__get_const_function__DirectAccess__pwms>:
 800ccb0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800ccb4:	4770      	bx	lr
 800ccb6:	bf00      	nop

0800ccb8 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__fetch_function__DirectAccess__pwms>:
 800ccb8:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 800ccbc:	8013      	strh	r3, [r2, #0]
 800ccbe:	4770      	bx	lr

0800ccc0 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__assign_function__DirectAccess__pwms>:
 800ccc0:	f9b2 3000 	ldrsh.w	r3, [r2]
 800ccc4:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800ccc8:	4770      	bx	lr
 800ccca:	bf00      	nop

0800cccc <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__DirectAccess_init_function>:
 800cccc:	f008 b9d6 	b.w	801507c <racs_services__msg__DirectAccess__init>

0800ccd0 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__DirectAccess_fini_function>:
 800ccd0:	f008 b9d8 	b.w	8015084 <racs_services__msg__DirectAccess__fini>

0800ccd4 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__get_function__DirectAccess__pwms>:
 800ccd4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800ccd8:	4770      	bx	lr
 800ccda:	bf00      	nop

0800ccdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800ccdc:	4b04      	ldr	r3, [pc, #16]	; (800ccf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800ccde:	681a      	ldr	r2, [r3, #0]
 800cce0:	b10a      	cbz	r2, 800cce6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0xa>
 800cce2:	4803      	ldr	r0, [pc, #12]	; (800ccf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800cce4:	4770      	bx	lr
 800cce6:	4a03      	ldr	r2, [pc, #12]	; (800ccf4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x18>)
 800cce8:	4801      	ldr	r0, [pc, #4]	; (800ccf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800ccea:	6812      	ldr	r2, [r2, #0]
 800ccec:	601a      	str	r2, [r3, #0]
 800ccee:	4770      	bx	lr
 800ccf0:	20000478 	.word	0x20000478
 800ccf4:	20000aec 	.word	0x20000aec

0800ccf8 <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__size_function__Encoder__encoders>:
 800ccf8:	2005      	movs	r0, #5
 800ccfa:	4770      	bx	lr

0800ccfc <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__get_const_function__Encoder__encoders>:
 800ccfc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800cd00:	4770      	bx	lr
 800cd02:	bf00      	nop

0800cd04 <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__fetch_function__Encoder__encoders>:
 800cd04:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 800cd08:	8013      	strh	r3, [r2, #0]
 800cd0a:	4770      	bx	lr

0800cd0c <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__assign_function__Encoder__encoders>:
 800cd0c:	f9b2 3000 	ldrsh.w	r3, [r2]
 800cd10:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800cd14:	4770      	bx	lr
 800cd16:	bf00      	nop

0800cd18 <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__Encoder_init_function>:
 800cd18:	f008 b9e2 	b.w	80150e0 <racs_services__msg__Encoder__init>

0800cd1c <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__Encoder_fini_function>:
 800cd1c:	f008 b9e4 	b.w	80150e8 <racs_services__msg__Encoder__fini>

0800cd20 <racs_services__msg__Encoder__rosidl_typesupport_introspection_c__get_function__Encoder__encoders>:
 800cd20:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800cd24:	4770      	bx	lr
 800cd26:	bf00      	nop

0800cd28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Encoder>:
 800cd28:	4b04      	ldr	r3, [pc, #16]	; (800cd3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Encoder+0x14>)
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	b10a      	cbz	r2, 800cd32 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Encoder+0xa>
 800cd2e:	4803      	ldr	r0, [pc, #12]	; (800cd3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Encoder+0x14>)
 800cd30:	4770      	bx	lr
 800cd32:	4a03      	ldr	r2, [pc, #12]	; (800cd40 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Encoder+0x18>)
 800cd34:	4801      	ldr	r0, [pc, #4]	; (800cd3c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Encoder+0x14>)
 800cd36:	6812      	ldr	r2, [r2, #0]
 800cd38:	601a      	str	r2, [r3, #0]
 800cd3a:	4770      	bx	lr
 800cd3c:	200004cc 	.word	0x200004cc
 800cd40:	20000aec 	.word	0x20000aec

0800cd44 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__size_function__Feedback__encoders>:
 800cd44:	2005      	movs	r0, #5
 800cd46:	4770      	bx	lr

0800cd48 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__get_const_function__Feedback__encoders>:
 800cd48:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800cd4c:	4770      	bx	lr
 800cd4e:	bf00      	nop

0800cd50 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__fetch_function__Feedback__encoders>:
 800cd50:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 800cd54:	8013      	strh	r3, [r2, #0]
 800cd56:	4770      	bx	lr

0800cd58 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__assign_function__Feedback__encoders>:
 800cd58:	f9b2 3000 	ldrsh.w	r3, [r2]
 800cd5c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800cd60:	4770      	bx	lr
 800cd62:	bf00      	nop

0800cd64 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__Feedback_init_function>:
 800cd64:	f008 b9ee 	b.w	8015144 <racs_services__msg__Feedback__init>

0800cd68 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__Feedback_fini_function>:
 800cd68:	f008 b9f0 	b.w	801514c <racs_services__msg__Feedback__fini>

0800cd6c <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__get_function__Feedback__encoders>:
 800cd6c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800cd70:	4770      	bx	lr
 800cd72:	bf00      	nop

0800cd74 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800cd74:	4b04      	ldr	r3, [pc, #16]	; (800cd88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800cd76:	681a      	ldr	r2, [r3, #0]
 800cd78:	b10a      	cbz	r2, 800cd7e <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0xa>
 800cd7a:	4803      	ldr	r0, [pc, #12]	; (800cd88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800cd7c:	4770      	bx	lr
 800cd7e:	4a03      	ldr	r2, [pc, #12]	; (800cd8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x18>)
 800cd80:	4801      	ldr	r0, [pc, #4]	; (800cd88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800cd82:	6812      	ldr	r2, [r2, #0]
 800cd84:	601a      	str	r2, [r3, #0]
 800cd86:	4770      	bx	lr
 800cd88:	20000520 	.word	0x20000520
 800cd8c:	20000aec 	.word	0x20000aec

0800cd90 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__size_function__Setup_Event__request>:
 800cd90:	6840      	ldr	r0, [r0, #4]
 800cd92:	4770      	bx	lr

0800cd94 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_const_function__Setup_Event__request>:
 800cd94:	6800      	ldr	r0, [r0, #0]
 800cd96:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800cd9a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800cd9e:	4770      	bx	lr

0800cda0 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__fetch_function__Setup_Event__request>:
 800cda0:	6803      	ldr	r3, [r0, #0]
 800cda2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800cda6:	4694      	mov	ip, r2
 800cda8:	b500      	push	{lr}
 800cdaa:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800cdae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cdb2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cdb6:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800cdba:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800cdbe:	f85d fb04 	ldr.w	pc, [sp], #4
 800cdc2:	bf00      	nop

0800cdc4 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__assign_function__Setup_Event__request>:
 800cdc4:	6803      	ldr	r3, [r0, #0]
 800cdc6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800cdca:	b500      	push	{lr}
 800cdcc:	4696      	mov	lr, r2
 800cdce:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800cdd2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cdd6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cdda:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800cdde:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800cde2:	f85d fb04 	ldr.w	pc, [sp], #4
 800cde6:	bf00      	nop

0800cde8 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__size_function__Setup_Event__response>:
 800cde8:	6840      	ldr	r0, [r0, #4]
 800cdea:	4770      	bx	lr

0800cdec <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_const_function__Setup_Event__response>:
 800cdec:	6800      	ldr	r0, [r0, #0]
 800cdee:	4408      	add	r0, r1
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop

0800cdf4 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__fetch_function__Setup_Event__response>:
 800cdf4:	6803      	ldr	r3, [r0, #0]
 800cdf6:	5c5b      	ldrb	r3, [r3, r1]
 800cdf8:	7013      	strb	r3, [r2, #0]
 800cdfa:	4770      	bx	lr

0800cdfc <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__assign_function__Setup_Event__response>:
 800cdfc:	6803      	ldr	r3, [r0, #0]
 800cdfe:	7812      	ldrb	r2, [r2, #0]
 800ce00:	545a      	strb	r2, [r3, r1]
 800ce02:	4770      	bx	lr

0800ce04 <racs_services__srv__Setup_Request__rosidl_typesupport_introspection_c__Setup_Request_init_function>:
 800ce04:	f008 bb86 	b.w	8015514 <racs_services__srv__Setup_Request__init>

0800ce08 <racs_services__srv__Setup_Request__rosidl_typesupport_introspection_c__Setup_Request_fini_function>:
 800ce08:	f008 bb88 	b.w	801551c <racs_services__srv__Setup_Request__fini>

0800ce0c <racs_services__srv__Setup_Response__rosidl_typesupport_introspection_c__Setup_Response_init_function>:
 800ce0c:	f008 bbd0 	b.w	80155b0 <racs_services__srv__Setup_Response__init>

0800ce10 <racs_services__srv__Setup_Response__rosidl_typesupport_introspection_c__Setup_Response_fini_function>:
 800ce10:	f008 bbd2 	b.w	80155b8 <racs_services__srv__Setup_Response__fini>

0800ce14 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__Setup_Event_init_function>:
 800ce14:	f008 bc08 	b.w	8015628 <racs_services__srv__Setup_Event__init>

0800ce18 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__Setup_Event_fini_function>:
 800ce18:	f008 bc28 	b.w	801566c <racs_services__srv__Setup_Event__fini>

0800ce1c <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__resize_function__Setup_Event__request>:
 800ce1c:	b510      	push	{r4, lr}
 800ce1e:	4604      	mov	r4, r0
 800ce20:	b082      	sub	sp, #8
 800ce22:	9101      	str	r1, [sp, #4]
 800ce24:	f008 fbb0 	bl	8015588 <racs_services__srv__Setup_Request__Sequence__fini>
 800ce28:	9901      	ldr	r1, [sp, #4]
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	b002      	add	sp, #8
 800ce2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce32:	f008 bb8f 	b.w	8015554 <racs_services__srv__Setup_Request__Sequence__init>
 800ce36:	bf00      	nop

0800ce38 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__resize_function__Setup_Event__response>:
 800ce38:	b510      	push	{r4, lr}
 800ce3a:	4604      	mov	r4, r0
 800ce3c:	b082      	sub	sp, #8
 800ce3e:	9101      	str	r1, [sp, #4]
 800ce40:	f008 fbde 	bl	8015600 <racs_services__srv__Setup_Response__Sequence__fini>
 800ce44:	9901      	ldr	r1, [sp, #4]
 800ce46:	4620      	mov	r0, r4
 800ce48:	b002      	add	sp, #8
 800ce4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce4e:	f008 bbbd 	b.w	80155cc <racs_services__srv__Setup_Response__Sequence__init>
 800ce52:	bf00      	nop

0800ce54 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_function__Setup_Event__response>:
 800ce54:	6800      	ldr	r0, [r0, #0]
 800ce56:	4408      	add	r0, r1
 800ce58:	4770      	bx	lr
 800ce5a:	bf00      	nop

0800ce5c <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_function__Setup_Event__request>:
 800ce5c:	6800      	ldr	r0, [r0, #0]
 800ce5e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800ce62:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800ce66:	4770      	bx	lr

0800ce68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800ce68:	4b04      	ldr	r3, [pc, #16]	; (800ce7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800ce6a:	681a      	ldr	r2, [r3, #0]
 800ce6c:	b10a      	cbz	r2, 800ce72 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0xa>
 800ce6e:	4803      	ldr	r0, [pc, #12]	; (800ce7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800ce70:	4770      	bx	lr
 800ce72:	4a03      	ldr	r2, [pc, #12]	; (800ce80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x18>)
 800ce74:	4801      	ldr	r0, [pc, #4]	; (800ce7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800ce76:	6812      	ldr	r2, [r2, #0]
 800ce78:	601a      	str	r2, [r3, #0]
 800ce7a:	4770      	bx	lr
 800ce7c:	200007a8 	.word	0x200007a8
 800ce80:	20000aec 	.word	0x20000aec

0800ce84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response>:
 800ce84:	4b04      	ldr	r3, [pc, #16]	; (800ce98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800ce86:	681a      	ldr	r2, [r3, #0]
 800ce88:	b10a      	cbz	r2, 800ce8e <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0xa>
 800ce8a:	4803      	ldr	r0, [pc, #12]	; (800ce98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800ce8c:	4770      	bx	lr
 800ce8e:	4a03      	ldr	r2, [pc, #12]	; (800ce9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x18>)
 800ce90:	4801      	ldr	r0, [pc, #4]	; (800ce98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800ce92:	6812      	ldr	r2, [r2, #0]
 800ce94:	601a      	str	r2, [r3, #0]
 800ce96:	4770      	bx	lr
 800ce98:	200007fc 	.word	0x200007fc
 800ce9c:	20000aec 	.word	0x20000aec

0800cea0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event>:
 800cea0:	b508      	push	{r3, lr}
 800cea2:	f002 fd69 	bl	800f978 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800cea6:	4913      	ldr	r1, [pc, #76]	; (800cef4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x54>)
 800cea8:	4b13      	ldr	r3, [pc, #76]	; (800cef8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x58>)
 800ceaa:	680a      	ldr	r2, [r1, #0]
 800ceac:	60d8      	str	r0, [r3, #12]
 800ceae:	b152      	cbz	r2, 800cec6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x26>
 800ceb0:	4a12      	ldr	r2, [pc, #72]	; (800cefc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x5c>)
 800ceb2:	6499      	str	r1, [r3, #72]	; 0x48
 800ceb4:	6811      	ldr	r1, [r2, #0]
 800ceb6:	b171      	cbz	r1, 800ced6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x36>
 800ceb8:	4911      	ldr	r1, [pc, #68]	; (800cf00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800ceba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800cebe:	680b      	ldr	r3, [r1, #0]
 800cec0:	b193      	cbz	r3, 800cee8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x48>
 800cec2:	480f      	ldr	r0, [pc, #60]	; (800cf00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800cec4:	bd08      	pop	{r3, pc}
 800cec6:	4a0f      	ldr	r2, [pc, #60]	; (800cf04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800cec8:	6499      	str	r1, [r3, #72]	; 0x48
 800ceca:	6812      	ldr	r2, [r2, #0]
 800cecc:	600a      	str	r2, [r1, #0]
 800cece:	4a0b      	ldr	r2, [pc, #44]	; (800cefc <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x5c>)
 800ced0:	6811      	ldr	r1, [r2, #0]
 800ced2:	2900      	cmp	r1, #0
 800ced4:	d1f0      	bne.n	800ceb8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x18>
 800ced6:	490b      	ldr	r1, [pc, #44]	; (800cf04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800ced8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800cedc:	6809      	ldr	r1, [r1, #0]
 800cede:	6011      	str	r1, [r2, #0]
 800cee0:	4907      	ldr	r1, [pc, #28]	; (800cf00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800cee2:	680b      	ldr	r3, [r1, #0]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d1ec      	bne.n	800cec2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x22>
 800cee8:	4b06      	ldr	r3, [pc, #24]	; (800cf04 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800ceea:	4805      	ldr	r0, [pc, #20]	; (800cf00 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	600b      	str	r3, [r1, #0]
 800cef0:	bd08      	pop	{r3, pc}
 800cef2:	bf00      	nop
 800cef4:	200007a8 	.word	0x200007a8
 800cef8:	20000538 	.word	0x20000538
 800cefc:	200007fc 	.word	0x200007fc
 800cf00:	200005ec 	.word	0x200005ec
 800cf04:	20000aec 	.word	0x20000aec

0800cf08 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800cf08:	4b25      	ldr	r3, [pc, #148]	; (800cfa0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	b510      	push	{r4, lr}
 800cf0e:	b142      	cbz	r2, 800cf22 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x1a>
 800cf10:	685c      	ldr	r4, [r3, #4]
 800cf12:	68a3      	ldr	r3, [r4, #8]
 800cf14:	b163      	cbz	r3, 800cf30 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x28>
 800cf16:	68e3      	ldr	r3, [r4, #12]
 800cf18:	b193      	cbz	r3, 800cf40 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x38>
 800cf1a:	6923      	ldr	r3, [r4, #16]
 800cf1c:	b1c3      	cbz	r3, 800cf50 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x48>
 800cf1e:	4820      	ldr	r0, [pc, #128]	; (800cfa0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800cf20:	bd10      	pop	{r4, pc}
 800cf22:	4a20      	ldr	r2, [pc, #128]	; (800cfa4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800cf24:	685c      	ldr	r4, [r3, #4]
 800cf26:	6812      	ldr	r2, [r2, #0]
 800cf28:	601a      	str	r2, [r3, #0]
 800cf2a:	68a3      	ldr	r3, [r4, #8]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d1f2      	bne.n	800cf16 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xe>
 800cf30:	4a1d      	ldr	r2, [pc, #116]	; (800cfa8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa0>)
 800cf32:	6813      	ldr	r3, [r2, #0]
 800cf34:	b303      	cbz	r3, 800cf78 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x70>
 800cf36:	6853      	ldr	r3, [r2, #4]
 800cf38:	60a3      	str	r3, [r4, #8]
 800cf3a:	68e3      	ldr	r3, [r4, #12]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d1ec      	bne.n	800cf1a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x12>
 800cf40:	4b1a      	ldr	r3, [pc, #104]	; (800cfac <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa4>)
 800cf42:	681a      	ldr	r2, [r3, #0]
 800cf44:	b1e2      	cbz	r2, 800cf80 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x78>
 800cf46:	685b      	ldr	r3, [r3, #4]
 800cf48:	60e3      	str	r3, [r4, #12]
 800cf4a:	6923      	ldr	r3, [r4, #16]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d1e6      	bne.n	800cf1e <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x16>
 800cf50:	f002 fd12 	bl	800f978 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800cf54:	4a14      	ldr	r2, [pc, #80]	; (800cfa8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa0>)
 800cf56:	4916      	ldr	r1, [pc, #88]	; (800cfb0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa8>)
 800cf58:	6813      	ldr	r3, [r2, #0]
 800cf5a:	60c8      	str	r0, [r1, #12]
 800cf5c:	b1e3      	cbz	r3, 800cf98 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x90>
 800cf5e:	4b13      	ldr	r3, [pc, #76]	; (800cfac <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa4>)
 800cf60:	648a      	str	r2, [r1, #72]	; 0x48
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	b1a2      	cbz	r2, 800cf90 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x88>
 800cf66:	4a13      	ldr	r2, [pc, #76]	; (800cfb4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xac>)
 800cf68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800cf6c:	6813      	ldr	r3, [r2, #0]
 800cf6e:	b15b      	cbz	r3, 800cf88 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x80>
 800cf70:	6853      	ldr	r3, [r2, #4]
 800cf72:	480b      	ldr	r0, [pc, #44]	; (800cfa0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800cf74:	6123      	str	r3, [r4, #16]
 800cf76:	bd10      	pop	{r4, pc}
 800cf78:	4b0a      	ldr	r3, [pc, #40]	; (800cfa4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	6013      	str	r3, [r2, #0]
 800cf7e:	e7da      	b.n	800cf36 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x2e>
 800cf80:	4a08      	ldr	r2, [pc, #32]	; (800cfa4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800cf82:	6812      	ldr	r2, [r2, #0]
 800cf84:	601a      	str	r2, [r3, #0]
 800cf86:	e7de      	b.n	800cf46 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x3e>
 800cf88:	4b06      	ldr	r3, [pc, #24]	; (800cfa4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	6013      	str	r3, [r2, #0]
 800cf8e:	e7ef      	b.n	800cf70 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x68>
 800cf90:	4a04      	ldr	r2, [pc, #16]	; (800cfa4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800cf92:	6812      	ldr	r2, [r2, #0]
 800cf94:	601a      	str	r2, [r3, #0]
 800cf96:	e7e6      	b.n	800cf66 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x5e>
 800cf98:	4b02      	ldr	r3, [pc, #8]	; (800cfa4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	6013      	str	r3, [r2, #0]
 800cf9e:	e7de      	b.n	800cf5e <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x56>
 800cfa0:	20000828 	.word	0x20000828
 800cfa4:	20000aec 	.word	0x20000aec
 800cfa8:	200007a8 	.word	0x200007a8
 800cfac:	200007fc 	.word	0x200007fc
 800cfb0:	20000538 	.word	0x20000538
 800cfb4:	200005ec 	.word	0x200005ec

0800cfb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800cfb8:	4800      	ldr	r0, [pc, #0]	; (800cfbc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x4>)
 800cfba:	4770      	bx	lr
 800cfbc:	200008a8 	.word	0x200008a8

0800cfc0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Response>:
 800cfc0:	4800      	ldr	r0, [pc, #0]	; (800cfc4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x4>)
 800cfc2:	4770      	bx	lr
 800cfc4:	200008c0 	.word	0x200008c0

0800cfc8 <_Control_Response__max_serialized_size>:
 800cfc8:	2101      	movs	r1, #1
 800cfca:	2000      	movs	r0, #0
 800cfcc:	b508      	push	{r3, lr}
 800cfce:	f004 fd6d 	bl	8011aac <ucdr_alignment>
 800cfd2:	3001      	adds	r0, #1
 800cfd4:	bd08      	pop	{r3, pc}
 800cfd6:	bf00      	nop

0800cfd8 <_Control_Response__cdr_deserialize>:
 800cfd8:	b109      	cbz	r1, 800cfde <_Control_Response__cdr_deserialize+0x6>
 800cfda:	f003 b8e9 	b.w	80101b0 <ucdr_deserialize_uint8_t>
 800cfde:	4608      	mov	r0, r1
 800cfe0:	4770      	bx	lr
 800cfe2:	bf00      	nop

0800cfe4 <_Control_Event__max_serialized_size>:
 800cfe4:	b500      	push	{lr}
 800cfe6:	b083      	sub	sp, #12
 800cfe8:	2301      	movs	r3, #1
 800cfea:	2100      	movs	r1, #0
 800cfec:	f10d 0007 	add.w	r0, sp, #7
 800cff0:	f88d 3007 	strb.w	r3, [sp, #7]
 800cff4:	f002 fd70 	bl	800fad8 <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800cff8:	b003      	add	sp, #12
 800cffa:	f85d fb04 	ldr.w	pc, [sp], #4
 800cffe:	bf00      	nop

0800d000 <get_serialized_size_racs_services__srv__Control_Request>:
 800d000:	b1b0      	cbz	r0, 800d030 <get_serialized_size_racs_services__srv__Control_Request+0x30>
 800d002:	b538      	push	{r3, r4, r5, lr}
 800d004:	460d      	mov	r5, r1
 800d006:	2101      	movs	r1, #1
 800d008:	4628      	mov	r0, r5
 800d00a:	f004 fd4f 	bl	8011aac <ucdr_alignment>
 800d00e:	1c6b      	adds	r3, r5, #1
 800d010:	2101      	movs	r1, #1
 800d012:	f1c5 050a 	rsb	r5, r5, #10
 800d016:	181c      	adds	r4, r3, r0
 800d018:	4620      	mov	r0, r4
 800d01a:	f004 fd47 	bl	8011aac <ucdr_alignment>
 800d01e:	3001      	adds	r0, #1
 800d020:	2102      	movs	r1, #2
 800d022:	4404      	add	r4, r0
 800d024:	4620      	mov	r0, r4
 800d026:	f004 fd41 	bl	8011aac <ucdr_alignment>
 800d02a:	4428      	add	r0, r5
 800d02c:	4420      	add	r0, r4
 800d02e:	bd38      	pop	{r3, r4, r5, pc}
 800d030:	4770      	bx	lr
 800d032:	bf00      	nop

0800d034 <get_serialized_size_racs_services__srv__Control_Response>:
 800d034:	b138      	cbz	r0, 800d046 <get_serialized_size_racs_services__srv__Control_Response+0x12>
 800d036:	b508      	push	{r3, lr}
 800d038:	460b      	mov	r3, r1
 800d03a:	2101      	movs	r1, #1
 800d03c:	4618      	mov	r0, r3
 800d03e:	f004 fd35 	bl	8011aac <ucdr_alignment>
 800d042:	3001      	adds	r0, #1
 800d044:	bd08      	pop	{r3, pc}
 800d046:	4770      	bx	lr

0800d048 <_Control_Request__cdr_deserialize>:
 800d048:	b538      	push	{r3, r4, r5, lr}
 800d04a:	460c      	mov	r4, r1
 800d04c:	b169      	cbz	r1, 800d06a <_Control_Request__cdr_deserialize+0x22>
 800d04e:	4605      	mov	r5, r0
 800d050:	f003 f8ae 	bl	80101b0 <ucdr_deserialize_uint8_t>
 800d054:	1c61      	adds	r1, r4, #1
 800d056:	4628      	mov	r0, r5
 800d058:	f003 f8aa 	bl	80101b0 <ucdr_deserialize_uint8_t>
 800d05c:	1ca1      	adds	r1, r4, #2
 800d05e:	4628      	mov	r0, r5
 800d060:	2205      	movs	r2, #5
 800d062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d066:	f002 bf63 	b.w	800ff30 <ucdr_deserialize_array_int16_t>
 800d06a:	4608      	mov	r0, r1
 800d06c:	bd38      	pop	{r3, r4, r5, pc}
 800d06e:	bf00      	nop

0800d070 <_Control_Response__cdr_serialize>:
 800d070:	460a      	mov	r2, r1
 800d072:	b118      	cbz	r0, 800d07c <_Control_Response__cdr_serialize+0xc>
 800d074:	7801      	ldrb	r1, [r0, #0]
 800d076:	4610      	mov	r0, r2
 800d078:	f003 b884 	b.w	8010184 <ucdr_serialize_uint8_t>
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop

0800d080 <_Control_Request__cdr_serialize>:
 800d080:	b188      	cbz	r0, 800d0a6 <_Control_Request__cdr_serialize+0x26>
 800d082:	b538      	push	{r3, r4, r5, lr}
 800d084:	460d      	mov	r5, r1
 800d086:	4604      	mov	r4, r0
 800d088:	7801      	ldrb	r1, [r0, #0]
 800d08a:	4628      	mov	r0, r5
 800d08c:	f003 f87a 	bl	8010184 <ucdr_serialize_uint8_t>
 800d090:	7861      	ldrb	r1, [r4, #1]
 800d092:	4628      	mov	r0, r5
 800d094:	f003 f876 	bl	8010184 <ucdr_serialize_uint8_t>
 800d098:	1ca1      	adds	r1, r4, #2
 800d09a:	4628      	mov	r0, r5
 800d09c:	2205      	movs	r2, #5
 800d09e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0a2:	f002 beef 	b.w	800fe84 <ucdr_serialize_array_int16_t>
 800d0a6:	4770      	bx	lr

0800d0a8 <get_serialized_size_racs_services__srv__Control_Event.part.0>:
 800d0a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0ac:	460e      	mov	r6, r1
 800d0ae:	4605      	mov	r5, r0
 800d0b0:	f002 fc78 	bl	800f9a4 <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800d0b4:	2104      	movs	r1, #4
 800d0b6:	eb06 0800 	add.w	r8, r6, r0
 800d0ba:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
 800d0be:	4640      	mov	r0, r8
 800d0c0:	f004 fcf4 	bl	8011aac <ucdr_alignment>
 800d0c4:	3004      	adds	r0, #4
 800d0c6:	4480      	add	r8, r0
 800d0c8:	f1b9 0f00 	cmp.w	r9, #0
 800d0cc:	d019      	beq.n	800d102 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x5a>
 800d0ce:	2700      	movs	r7, #0
 800d0d0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800d150 <get_serialized_size_racs_services__srv__Control_Event.part.0+0xa8>
 800d0d4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d0d6:	eb07 0047 	add.w	r0, r7, r7, lsl #1
 800d0da:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d0de:	4641      	mov	r1, r8
 800d0e0:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800d0e4:	3701      	adds	r7, #1
 800d0e6:	695b      	ldr	r3, [r3, #20]
 800d0e8:	4798      	blx	r3
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	4640      	mov	r0, r8
 800d0ee:	2c04      	cmp	r4, #4
 800d0f0:	4621      	mov	r1, r4
 800d0f2:	bf28      	it	cs
 800d0f4:	2104      	movcs	r1, #4
 800d0f6:	f004 fcd9 	bl	8011aac <ucdr_alignment>
 800d0fa:	45b9      	cmp	r9, r7
 800d0fc:	4420      	add	r0, r4
 800d0fe:	4480      	add	r8, r0
 800d100:	d1e8      	bne.n	800d0d4 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x2c>
 800d102:	4640      	mov	r0, r8
 800d104:	2104      	movs	r1, #4
 800d106:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800d108:	f004 fcd0 	bl	8011aac <ucdr_alignment>
 800d10c:	4480      	add	r8, r0
 800d10e:	f108 0804 	add.w	r8, r8, #4
 800d112:	b1c7      	cbz	r7, 800d146 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x9e>
 800d114:	f04f 0900 	mov.w	r9, #0
 800d118:	f8df a038 	ldr.w	sl, [pc, #56]	; 800d154 <get_serialized_size_racs_services__srv__Control_Event.part.0+0xac>
 800d11c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800d11e:	4641      	mov	r1, r8
 800d120:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d124:	4448      	add	r0, r9
 800d126:	f109 0901 	add.w	r9, r9, #1
 800d12a:	695b      	ldr	r3, [r3, #20]
 800d12c:	4798      	blx	r3
 800d12e:	4604      	mov	r4, r0
 800d130:	4640      	mov	r0, r8
 800d132:	2c04      	cmp	r4, #4
 800d134:	4621      	mov	r1, r4
 800d136:	bf28      	it	cs
 800d138:	2104      	movcs	r1, #4
 800d13a:	f004 fcb7 	bl	8011aac <ucdr_alignment>
 800d13e:	454f      	cmp	r7, r9
 800d140:	4420      	add	r0, r4
 800d142:	4480      	add	r8, r0
 800d144:	d1ea      	bne.n	800d11c <get_serialized_size_racs_services__srv__Control_Event.part.0+0x74>
 800d146:	eba8 0006 	sub.w	r0, r8, r6
 800d14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d14e:	bf00      	nop
 800d150:	200008a8 	.word	0x200008a8
 800d154:	200008c0 	.word	0x200008c0

0800d158 <get_serialized_size_racs_services__srv__Control_Event>:
 800d158:	b108      	cbz	r0, 800d15e <get_serialized_size_racs_services__srv__Control_Event+0x6>
 800d15a:	f7ff bfa5 	b.w	800d0a8 <get_serialized_size_racs_services__srv__Control_Event.part.0>
 800d15e:	4770      	bx	lr

0800d160 <_Control_Event__get_serialized_size>:
 800d160:	b110      	cbz	r0, 800d168 <_Control_Event__get_serialized_size+0x8>
 800d162:	2100      	movs	r1, #0
 800d164:	f7ff bfa0 	b.w	800d0a8 <get_serialized_size_racs_services__srv__Control_Event.part.0>
 800d168:	4770      	bx	lr
 800d16a:	bf00      	nop

0800d16c <_Control_Event__cdr_deserialize>:
 800d16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d170:	460c      	mov	r4, r1
 800d172:	b082      	sub	sp, #8
 800d174:	2900      	cmp	r1, #0
 800d176:	d045      	beq.n	800d204 <_Control_Event__cdr_deserialize+0x98>
 800d178:	4607      	mov	r7, r0
 800d17a:	f002 fcd3 	bl	800fb24 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800d17e:	4603      	mov	r3, r0
 800d180:	4621      	mov	r1, r4
 800d182:	4638      	mov	r0, r7
 800d184:	685b      	ldr	r3, [r3, #4]
 800d186:	68db      	ldr	r3, [r3, #12]
 800d188:	4798      	blx	r3
 800d18a:	4638      	mov	r0, r7
 800d18c:	a901      	add	r1, sp, #4
 800d18e:	f003 fb3f 	bl	8010810 <ucdr_deserialize_uint32_t>
 800d192:	9b01      	ldr	r3, [sp, #4]
 800d194:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d196:	429a      	cmp	r2, r3
 800d198:	d330      	bcc.n	800d1fc <_Control_Event__cdr_deserialize+0x90>
 800d19a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d19c:	b193      	cbz	r3, 800d1c4 <_Control_Event__cdr_deserialize+0x58>
 800d19e:	2500      	movs	r5, #0
 800d1a0:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800d210 <_Control_Event__cdr_deserialize+0xa4>
 800d1a4:	462e      	mov	r6, r5
 800d1a6:	e002      	b.n	800d1ae <_Control_Event__cdr_deserialize+0x42>
 800d1a8:	9b01      	ldr	r3, [sp, #4]
 800d1aa:	429e      	cmp	r6, r3
 800d1ac:	d20a      	bcs.n	800d1c4 <_Control_Event__cdr_deserialize+0x58>
 800d1ae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d1b0:	4638      	mov	r0, r7
 800d1b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d1b6:	3601      	adds	r6, #1
 800d1b8:	4429      	add	r1, r5
 800d1ba:	350c      	adds	r5, #12
 800d1bc:	68db      	ldr	r3, [r3, #12]
 800d1be:	4798      	blx	r3
 800d1c0:	2800      	cmp	r0, #0
 800d1c2:	d1f1      	bne.n	800d1a8 <_Control_Event__cdr_deserialize+0x3c>
 800d1c4:	a901      	add	r1, sp, #4
 800d1c6:	4638      	mov	r0, r7
 800d1c8:	f003 fb22 	bl	8010810 <ucdr_deserialize_uint32_t>
 800d1cc:	9b01      	ldr	r3, [sp, #4]
 800d1ce:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d313      	bcc.n	800d1fc <_Control_Event__cdr_deserialize+0x90>
 800d1d4:	63a3      	str	r3, [r4, #56]	; 0x38
 800d1d6:	b193      	cbz	r3, 800d1fe <_Control_Event__cdr_deserialize+0x92>
 800d1d8:	2500      	movs	r5, #0
 800d1da:	4e0c      	ldr	r6, [pc, #48]	; (800d20c <_Control_Event__cdr_deserialize+0xa0>)
 800d1dc:	e002      	b.n	800d1e4 <_Control_Event__cdr_deserialize+0x78>
 800d1de:	9b01      	ldr	r3, [sp, #4]
 800d1e0:	429d      	cmp	r5, r3
 800d1e2:	d20c      	bcs.n	800d1fe <_Control_Event__cdr_deserialize+0x92>
 800d1e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d1e6:	4638      	mov	r0, r7
 800d1e8:	6873      	ldr	r3, [r6, #4]
 800d1ea:	4429      	add	r1, r5
 800d1ec:	3501      	adds	r5, #1
 800d1ee:	68db      	ldr	r3, [r3, #12]
 800d1f0:	4798      	blx	r3
 800d1f2:	2800      	cmp	r0, #0
 800d1f4:	d1f3      	bne.n	800d1de <_Control_Event__cdr_deserialize+0x72>
 800d1f6:	b002      	add	sp, #8
 800d1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1fc:	2000      	movs	r0, #0
 800d1fe:	b002      	add	sp, #8
 800d200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d204:	4608      	mov	r0, r1
 800d206:	b002      	add	sp, #8
 800d208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d20c:	200008c0 	.word	0x200008c0
 800d210:	200008a8 	.word	0x200008a8

0800d214 <_Control_Event__cdr_serialize>:
 800d214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d218:	2800      	cmp	r0, #0
 800d21a:	d03b      	beq.n	800d294 <_Control_Event__cdr_serialize+0x80>
 800d21c:	4605      	mov	r5, r0
 800d21e:	460e      	mov	r6, r1
 800d220:	f002 fc80 	bl	800fb24 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800d224:	4603      	mov	r3, r0
 800d226:	4631      	mov	r1, r6
 800d228:	4628      	mov	r0, r5
 800d22a:	685b      	ldr	r3, [r3, #4]
 800d22c:	689b      	ldr	r3, [r3, #8]
 800d22e:	4798      	blx	r3
 800d230:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800d232:	4630      	mov	r0, r6
 800d234:	4639      	mov	r1, r7
 800d236:	f003 f9bb 	bl	80105b0 <ucdr_serialize_uint32_t>
 800d23a:	b198      	cbz	r0, 800d264 <_Control_Event__cdr_serialize+0x50>
 800d23c:	b197      	cbz	r7, 800d264 <_Control_Event__cdr_serialize+0x50>
 800d23e:	2400      	movs	r4, #0
 800d240:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800d2a0 <_Control_Event__cdr_serialize+0x8c>
 800d244:	e001      	b.n	800d24a <_Control_Event__cdr_serialize+0x36>
 800d246:	42a7      	cmp	r7, r4
 800d248:	d00c      	beq.n	800d264 <_Control_Event__cdr_serialize+0x50>
 800d24a:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800d24e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d250:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d254:	4631      	mov	r1, r6
 800d256:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800d25a:	3401      	adds	r4, #1
 800d25c:	689b      	ldr	r3, [r3, #8]
 800d25e:	4798      	blx	r3
 800d260:	2800      	cmp	r0, #0
 800d262:	d1f0      	bne.n	800d246 <_Control_Event__cdr_serialize+0x32>
 800d264:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800d266:	4630      	mov	r0, r6
 800d268:	4639      	mov	r1, r7
 800d26a:	f003 f9a1 	bl	80105b0 <ucdr_serialize_uint32_t>
 800d26e:	4680      	mov	r8, r0
 800d270:	b180      	cbz	r0, 800d294 <_Control_Event__cdr_serialize+0x80>
 800d272:	b18f      	cbz	r7, 800d298 <_Control_Event__cdr_serialize+0x84>
 800d274:	2400      	movs	r4, #0
 800d276:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800d2a4 <_Control_Event__cdr_serialize+0x90>
 800d27a:	e001      	b.n	800d280 <_Control_Event__cdr_serialize+0x6c>
 800d27c:	42a7      	cmp	r7, r4
 800d27e:	d00b      	beq.n	800d298 <_Control_Event__cdr_serialize+0x84>
 800d280:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800d282:	4631      	mov	r1, r6
 800d284:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d288:	4420      	add	r0, r4
 800d28a:	3401      	adds	r4, #1
 800d28c:	689b      	ldr	r3, [r3, #8]
 800d28e:	4798      	blx	r3
 800d290:	2800      	cmp	r0, #0
 800d292:	d1f3      	bne.n	800d27c <_Control_Event__cdr_serialize+0x68>
 800d294:	f04f 0800 	mov.w	r8, #0
 800d298:	4640      	mov	r0, r8
 800d29a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d29e:	bf00      	nop
 800d2a0:	200008a8 	.word	0x200008a8
 800d2a4:	200008c0 	.word	0x200008c0

0800d2a8 <_Control_Response__get_serialized_size>:
 800d2a8:	b130      	cbz	r0, 800d2b8 <_Control_Response__get_serialized_size+0x10>
 800d2aa:	2101      	movs	r1, #1
 800d2ac:	2000      	movs	r0, #0
 800d2ae:	b508      	push	{r3, lr}
 800d2b0:	f004 fbfc 	bl	8011aac <ucdr_alignment>
 800d2b4:	3001      	adds	r0, #1
 800d2b6:	bd08      	pop	{r3, pc}
 800d2b8:	4770      	bx	lr
 800d2ba:	bf00      	nop

0800d2bc <_Control_Request__get_serialized_size>:
 800d2bc:	b190      	cbz	r0, 800d2e4 <_Control_Request__get_serialized_size+0x28>
 800d2be:	2101      	movs	r1, #1
 800d2c0:	2000      	movs	r0, #0
 800d2c2:	b510      	push	{r4, lr}
 800d2c4:	f004 fbf2 	bl	8011aac <ucdr_alignment>
 800d2c8:	2101      	movs	r1, #1
 800d2ca:	1844      	adds	r4, r0, r1
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	f004 fbed 	bl	8011aac <ucdr_alignment>
 800d2d2:	3001      	adds	r0, #1
 800d2d4:	2102      	movs	r1, #2
 800d2d6:	4404      	add	r4, r0
 800d2d8:	4620      	mov	r0, r4
 800d2da:	f004 fbe7 	bl	8011aac <ucdr_alignment>
 800d2de:	300a      	adds	r0, #10
 800d2e0:	4420      	add	r0, r4
 800d2e2:	bd10      	pop	{r4, pc}
 800d2e4:	4770      	bx	lr
 800d2e6:	bf00      	nop

0800d2e8 <_Control_Request__max_serialized_size>:
 800d2e8:	b538      	push	{r3, r4, r5, lr}
 800d2ea:	2101      	movs	r1, #1
 800d2ec:	2000      	movs	r0, #0
 800d2ee:	f004 fbdd 	bl	8011aac <ucdr_alignment>
 800d2f2:	2101      	movs	r1, #1
 800d2f4:	1845      	adds	r5, r0, r1
 800d2f6:	4628      	mov	r0, r5
 800d2f8:	f004 fbd8 	bl	8011aac <ucdr_alignment>
 800d2fc:	1c44      	adds	r4, r0, #1
 800d2fe:	2102      	movs	r1, #2
 800d300:	442c      	add	r4, r5
 800d302:	4620      	mov	r0, r4
 800d304:	f004 fbd2 	bl	8011aac <ucdr_alignment>
 800d308:	300a      	adds	r0, #10
 800d30a:	4420      	add	r0, r4
 800d30c:	bd38      	pop	{r3, r4, r5, pc}
 800d30e:	bf00      	nop

0800d310 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Event>:
 800d310:	4800      	ldr	r0, [pc, #0]	; (800d314 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x4>)
 800d312:	4770      	bx	lr
 800d314:	20000890 	.word	0x20000890

0800d318 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Control>:
 800d318:	4800      	ldr	r0, [pc, #0]	; (800d31c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Control+0x4>)
 800d31a:	4770      	bx	lr
 800d31c:	20000864 	.word	0x20000864

0800d320 <_Debug__max_serialized_size>:
 800d320:	2104      	movs	r1, #4
 800d322:	2000      	movs	r0, #0
 800d324:	b508      	push	{r3, lr}
 800d326:	f004 fbc1 	bl	8011aac <ucdr_alignment>
 800d32a:	3018      	adds	r0, #24
 800d32c:	bd08      	pop	{r3, pc}
 800d32e:	bf00      	nop

0800d330 <get_serialized_size_racs_services__msg__Debug>:
 800d330:	b138      	cbz	r0, 800d342 <get_serialized_size_racs_services__msg__Debug+0x12>
 800d332:	b508      	push	{r3, lr}
 800d334:	460b      	mov	r3, r1
 800d336:	2104      	movs	r1, #4
 800d338:	4618      	mov	r0, r3
 800d33a:	f004 fbb7 	bl	8011aac <ucdr_alignment>
 800d33e:	3018      	adds	r0, #24
 800d340:	bd08      	pop	{r3, pc}
 800d342:	4770      	bx	lr

0800d344 <_Debug__cdr_deserialize>:
 800d344:	b111      	cbz	r1, 800d34c <_Debug__cdr_deserialize+0x8>
 800d346:	2206      	movs	r2, #6
 800d348:	f002 be9a 	b.w	8010080 <ucdr_deserialize_array_float>
 800d34c:	4608      	mov	r0, r1
 800d34e:	4770      	bx	lr

0800d350 <_Debug__cdr_serialize>:
 800d350:	468c      	mov	ip, r1
 800d352:	b120      	cbz	r0, 800d35e <_Debug__cdr_serialize+0xe>
 800d354:	4601      	mov	r1, r0
 800d356:	2206      	movs	r2, #6
 800d358:	4660      	mov	r0, ip
 800d35a:	f002 be3d 	b.w	800ffd8 <ucdr_serialize_array_float>
 800d35e:	4770      	bx	lr

0800d360 <_Debug__get_serialized_size>:
 800d360:	b130      	cbz	r0, 800d370 <_Debug__get_serialized_size+0x10>
 800d362:	2104      	movs	r1, #4
 800d364:	2000      	movs	r0, #0
 800d366:	b508      	push	{r3, lr}
 800d368:	f004 fba0 	bl	8011aac <ucdr_alignment>
 800d36c:	3018      	adds	r0, #24
 800d36e:	bd08      	pop	{r3, pc}
 800d370:	4770      	bx	lr
 800d372:	bf00      	nop

0800d374 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Debug>:
 800d374:	4800      	ldr	r0, [pc, #0]	; (800d378 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Debug+0x4>)
 800d376:	4770      	bx	lr
 800d378:	2000092c 	.word	0x2000092c

0800d37c <_DirectAccess__max_serialized_size>:
 800d37c:	2102      	movs	r1, #2
 800d37e:	2000      	movs	r0, #0
 800d380:	b508      	push	{r3, lr}
 800d382:	f004 fb93 	bl	8011aac <ucdr_alignment>
 800d386:	300c      	adds	r0, #12
 800d388:	bd08      	pop	{r3, pc}
 800d38a:	bf00      	nop

0800d38c <get_serialized_size_racs_services__msg__DirectAccess>:
 800d38c:	b138      	cbz	r0, 800d39e <get_serialized_size_racs_services__msg__DirectAccess+0x12>
 800d38e:	b508      	push	{r3, lr}
 800d390:	460b      	mov	r3, r1
 800d392:	2102      	movs	r1, #2
 800d394:	4618      	mov	r0, r3
 800d396:	f004 fb89 	bl	8011aac <ucdr_alignment>
 800d39a:	300c      	adds	r0, #12
 800d39c:	bd08      	pop	{r3, pc}
 800d39e:	4770      	bx	lr

0800d3a0 <_DirectAccess__cdr_deserialize>:
 800d3a0:	b111      	cbz	r1, 800d3a8 <_DirectAccess__cdr_deserialize+0x8>
 800d3a2:	2206      	movs	r2, #6
 800d3a4:	f002 bdc4 	b.w	800ff30 <ucdr_deserialize_array_int16_t>
 800d3a8:	4608      	mov	r0, r1
 800d3aa:	4770      	bx	lr

0800d3ac <_DirectAccess__cdr_serialize>:
 800d3ac:	468c      	mov	ip, r1
 800d3ae:	b120      	cbz	r0, 800d3ba <_DirectAccess__cdr_serialize+0xe>
 800d3b0:	4601      	mov	r1, r0
 800d3b2:	2206      	movs	r2, #6
 800d3b4:	4660      	mov	r0, ip
 800d3b6:	f002 bd65 	b.w	800fe84 <ucdr_serialize_array_int16_t>
 800d3ba:	4770      	bx	lr

0800d3bc <_DirectAccess__get_serialized_size>:
 800d3bc:	b130      	cbz	r0, 800d3cc <_DirectAccess__get_serialized_size+0x10>
 800d3be:	2102      	movs	r1, #2
 800d3c0:	2000      	movs	r0, #0
 800d3c2:	b508      	push	{r3, lr}
 800d3c4:	f004 fb72 	bl	8011aac <ucdr_alignment>
 800d3c8:	300c      	adds	r0, #12
 800d3ca:	bd08      	pop	{r3, pc}
 800d3cc:	4770      	bx	lr
 800d3ce:	bf00      	nop

0800d3d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800d3d0:	4800      	ldr	r0, [pc, #0]	; (800d3d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x4>)
 800d3d2:	4770      	bx	lr
 800d3d4:	20000960 	.word	0x20000960

0800d3d8 <_Encoder__max_serialized_size>:
 800d3d8:	2102      	movs	r1, #2
 800d3da:	2000      	movs	r0, #0
 800d3dc:	b508      	push	{r3, lr}
 800d3de:	f004 fb65 	bl	8011aac <ucdr_alignment>
 800d3e2:	300a      	adds	r0, #10
 800d3e4:	bd08      	pop	{r3, pc}
 800d3e6:	bf00      	nop

0800d3e8 <get_serialized_size_racs_services__msg__Encoder>:
 800d3e8:	b138      	cbz	r0, 800d3fa <get_serialized_size_racs_services__msg__Encoder+0x12>
 800d3ea:	b508      	push	{r3, lr}
 800d3ec:	460b      	mov	r3, r1
 800d3ee:	2102      	movs	r1, #2
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f004 fb5b 	bl	8011aac <ucdr_alignment>
 800d3f6:	300a      	adds	r0, #10
 800d3f8:	bd08      	pop	{r3, pc}
 800d3fa:	4770      	bx	lr

0800d3fc <_Encoder__cdr_deserialize>:
 800d3fc:	b111      	cbz	r1, 800d404 <_Encoder__cdr_deserialize+0x8>
 800d3fe:	2205      	movs	r2, #5
 800d400:	f002 bd96 	b.w	800ff30 <ucdr_deserialize_array_int16_t>
 800d404:	4608      	mov	r0, r1
 800d406:	4770      	bx	lr

0800d408 <_Encoder__cdr_serialize>:
 800d408:	468c      	mov	ip, r1
 800d40a:	b120      	cbz	r0, 800d416 <_Encoder__cdr_serialize+0xe>
 800d40c:	4601      	mov	r1, r0
 800d40e:	2205      	movs	r2, #5
 800d410:	4660      	mov	r0, ip
 800d412:	f002 bd37 	b.w	800fe84 <ucdr_serialize_array_int16_t>
 800d416:	4770      	bx	lr

0800d418 <_Encoder__get_serialized_size>:
 800d418:	b130      	cbz	r0, 800d428 <_Encoder__get_serialized_size+0x10>
 800d41a:	2102      	movs	r1, #2
 800d41c:	2000      	movs	r0, #0
 800d41e:	b508      	push	{r3, lr}
 800d420:	f004 fb44 	bl	8011aac <ucdr_alignment>
 800d424:	300a      	adds	r0, #10
 800d426:	bd08      	pop	{r3, pc}
 800d428:	4770      	bx	lr
 800d42a:	bf00      	nop

0800d42c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Encoder>:
 800d42c:	4800      	ldr	r0, [pc, #0]	; (800d430 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Encoder+0x4>)
 800d42e:	4770      	bx	lr
 800d430:	20000994 	.word	0x20000994

0800d434 <_Feedback__max_serialized_size>:
 800d434:	2102      	movs	r1, #2
 800d436:	2000      	movs	r0, #0
 800d438:	b508      	push	{r3, lr}
 800d43a:	f004 fb37 	bl	8011aac <ucdr_alignment>
 800d43e:	300a      	adds	r0, #10
 800d440:	bd08      	pop	{r3, pc}
 800d442:	bf00      	nop

0800d444 <get_serialized_size_racs_services__msg__Feedback>:
 800d444:	b138      	cbz	r0, 800d456 <get_serialized_size_racs_services__msg__Feedback+0x12>
 800d446:	b508      	push	{r3, lr}
 800d448:	460b      	mov	r3, r1
 800d44a:	2102      	movs	r1, #2
 800d44c:	4618      	mov	r0, r3
 800d44e:	f004 fb2d 	bl	8011aac <ucdr_alignment>
 800d452:	300a      	adds	r0, #10
 800d454:	bd08      	pop	{r3, pc}
 800d456:	4770      	bx	lr

0800d458 <_Feedback__cdr_deserialize>:
 800d458:	b111      	cbz	r1, 800d460 <_Feedback__cdr_deserialize+0x8>
 800d45a:	2205      	movs	r2, #5
 800d45c:	f002 bd68 	b.w	800ff30 <ucdr_deserialize_array_int16_t>
 800d460:	4608      	mov	r0, r1
 800d462:	4770      	bx	lr

0800d464 <_Feedback__cdr_serialize>:
 800d464:	468c      	mov	ip, r1
 800d466:	b120      	cbz	r0, 800d472 <_Feedback__cdr_serialize+0xe>
 800d468:	4601      	mov	r1, r0
 800d46a:	2205      	movs	r2, #5
 800d46c:	4660      	mov	r0, ip
 800d46e:	f002 bd09 	b.w	800fe84 <ucdr_serialize_array_int16_t>
 800d472:	4770      	bx	lr

0800d474 <_Feedback__get_serialized_size>:
 800d474:	b130      	cbz	r0, 800d484 <_Feedback__get_serialized_size+0x10>
 800d476:	2102      	movs	r1, #2
 800d478:	2000      	movs	r0, #0
 800d47a:	b508      	push	{r3, lr}
 800d47c:	f004 fb16 	bl	8011aac <ucdr_alignment>
 800d480:	300a      	adds	r0, #10
 800d482:	bd08      	pop	{r3, pc}
 800d484:	4770      	bx	lr
 800d486:	bf00      	nop

0800d488 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800d488:	4800      	ldr	r0, [pc, #0]	; (800d48c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Feedback+0x4>)
 800d48a:	4770      	bx	lr
 800d48c:	200009c8 	.word	0x200009c8

0800d490 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800d490:	4800      	ldr	r0, [pc, #0]	; (800d494 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x4>)
 800d492:	4770      	bx	lr
 800d494:	20000a50 	.word	0x20000a50

0800d498 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Response>:
 800d498:	4800      	ldr	r0, [pc, #0]	; (800d49c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x4>)
 800d49a:	4770      	bx	lr
 800d49c:	20000a68 	.word	0x20000a68

0800d4a0 <_Setup_Response__max_serialized_size>:
 800d4a0:	2101      	movs	r1, #1
 800d4a2:	2000      	movs	r0, #0
 800d4a4:	b508      	push	{r3, lr}
 800d4a6:	f004 fb01 	bl	8011aac <ucdr_alignment>
 800d4aa:	3001      	adds	r0, #1
 800d4ac:	bd08      	pop	{r3, pc}
 800d4ae:	bf00      	nop

0800d4b0 <_Setup_Response__cdr_deserialize>:
 800d4b0:	b109      	cbz	r1, 800d4b6 <_Setup_Response__cdr_deserialize+0x6>
 800d4b2:	f002 be7d 	b.w	80101b0 <ucdr_deserialize_uint8_t>
 800d4b6:	4608      	mov	r0, r1
 800d4b8:	4770      	bx	lr
 800d4ba:	bf00      	nop

0800d4bc <_Setup_Event__max_serialized_size>:
 800d4bc:	b500      	push	{lr}
 800d4be:	b083      	sub	sp, #12
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	2100      	movs	r1, #0
 800d4c4:	f10d 0007 	add.w	r0, sp, #7
 800d4c8:	f88d 3007 	strb.w	r3, [sp, #7]
 800d4cc:	f002 fb04 	bl	800fad8 <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800d4d0:	b003      	add	sp, #12
 800d4d2:	f85d fb04 	ldr.w	pc, [sp], #4
 800d4d6:	bf00      	nop

0800d4d8 <get_serialized_size_racs_services__srv__Setup_Request.part.0>:
 800d4d8:	b570      	push	{r4, r5, r6, lr}
 800d4da:	4604      	mov	r4, r0
 800d4dc:	2101      	movs	r1, #1
 800d4de:	f004 fae5 	bl	8011aac <ucdr_alignment>
 800d4e2:	2104      	movs	r1, #4
 800d4e4:	1c65      	adds	r5, r4, #1
 800d4e6:	f1c4 0404 	rsb	r4, r4, #4
 800d4ea:	4405      	add	r5, r0
 800d4ec:	4628      	mov	r0, r5
 800d4ee:	f004 fadd 	bl	8011aac <ucdr_alignment>
 800d4f2:	2104      	movs	r1, #4
 800d4f4:	1846      	adds	r6, r0, r1
 800d4f6:	442e      	add	r6, r5
 800d4f8:	4630      	mov	r0, r6
 800d4fa:	f004 fad7 	bl	8011aac <ucdr_alignment>
 800d4fe:	2104      	movs	r1, #4
 800d500:	1845      	adds	r5, r0, r1
 800d502:	442e      	add	r6, r5
 800d504:	4630      	mov	r0, r6
 800d506:	f004 fad1 	bl	8011aac <ucdr_alignment>
 800d50a:	2104      	movs	r1, #4
 800d50c:	4408      	add	r0, r1
 800d50e:	4406      	add	r6, r0
 800d510:	4630      	mov	r0, r6
 800d512:	f004 facb 	bl	8011aac <ucdr_alignment>
 800d516:	2104      	movs	r1, #4
 800d518:	1845      	adds	r5, r0, r1
 800d51a:	4435      	add	r5, r6
 800d51c:	4628      	mov	r0, r5
 800d51e:	f004 fac5 	bl	8011aac <ucdr_alignment>
 800d522:	2104      	movs	r1, #4
 800d524:	4408      	add	r0, r1
 800d526:	4405      	add	r5, r0
 800d528:	4628      	mov	r0, r5
 800d52a:	f004 fabf 	bl	8011aac <ucdr_alignment>
 800d52e:	4420      	add	r0, r4
 800d530:	4428      	add	r0, r5
 800d532:	bd70      	pop	{r4, r5, r6, pc}

0800d534 <get_serialized_size_racs_services__srv__Setup_Request>:
 800d534:	b110      	cbz	r0, 800d53c <get_serialized_size_racs_services__srv__Setup_Request+0x8>
 800d536:	4608      	mov	r0, r1
 800d538:	f7ff bfce 	b.w	800d4d8 <get_serialized_size_racs_services__srv__Setup_Request.part.0>
 800d53c:	4770      	bx	lr
 800d53e:	bf00      	nop

0800d540 <_Setup_Request__get_serialized_size>:
 800d540:	b110      	cbz	r0, 800d548 <_Setup_Request__get_serialized_size+0x8>
 800d542:	2000      	movs	r0, #0
 800d544:	f7ff bfc8 	b.w	800d4d8 <get_serialized_size_racs_services__srv__Setup_Request.part.0>
 800d548:	4770      	bx	lr
 800d54a:	bf00      	nop

0800d54c <get_serialized_size_racs_services__srv__Setup_Response>:
 800d54c:	b138      	cbz	r0, 800d55e <get_serialized_size_racs_services__srv__Setup_Response+0x12>
 800d54e:	b508      	push	{r3, lr}
 800d550:	460b      	mov	r3, r1
 800d552:	2101      	movs	r1, #1
 800d554:	4618      	mov	r0, r3
 800d556:	f004 faa9 	bl	8011aac <ucdr_alignment>
 800d55a:	3001      	adds	r0, #1
 800d55c:	bd08      	pop	{r3, pc}
 800d55e:	4770      	bx	lr

0800d560 <_Setup_Request__cdr_deserialize>:
 800d560:	b538      	push	{r3, r4, r5, lr}
 800d562:	460c      	mov	r4, r1
 800d564:	b309      	cbz	r1, 800d5aa <_Setup_Request__cdr_deserialize+0x4a>
 800d566:	4605      	mov	r5, r0
 800d568:	f002 fe22 	bl	80101b0 <ucdr_deserialize_uint8_t>
 800d56c:	1d21      	adds	r1, r4, #4
 800d56e:	4628      	mov	r0, r5
 800d570:	f004 f91e 	bl	80117b0 <ucdr_deserialize_float>
 800d574:	f104 0108 	add.w	r1, r4, #8
 800d578:	4628      	mov	r0, r5
 800d57a:	f004 f919 	bl	80117b0 <ucdr_deserialize_float>
 800d57e:	f104 010c 	add.w	r1, r4, #12
 800d582:	4628      	mov	r0, r5
 800d584:	f004 f914 	bl	80117b0 <ucdr_deserialize_float>
 800d588:	f104 0110 	add.w	r1, r4, #16
 800d58c:	4628      	mov	r0, r5
 800d58e:	f004 f90f 	bl	80117b0 <ucdr_deserialize_float>
 800d592:	f104 0114 	add.w	r1, r4, #20
 800d596:	4628      	mov	r0, r5
 800d598:	f004 f90a 	bl	80117b0 <ucdr_deserialize_float>
 800d59c:	f104 0118 	add.w	r1, r4, #24
 800d5a0:	4628      	mov	r0, r5
 800d5a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5a6:	f004 b903 	b.w	80117b0 <ucdr_deserialize_float>
 800d5aa:	4608      	mov	r0, r1
 800d5ac:	bd38      	pop	{r3, r4, r5, pc}
 800d5ae:	bf00      	nop

0800d5b0 <_Setup_Response__cdr_serialize>:
 800d5b0:	460a      	mov	r2, r1
 800d5b2:	b118      	cbz	r0, 800d5bc <_Setup_Response__cdr_serialize+0xc>
 800d5b4:	7801      	ldrb	r1, [r0, #0]
 800d5b6:	4610      	mov	r0, r2
 800d5b8:	f002 bde4 	b.w	8010184 <ucdr_serialize_uint8_t>
 800d5bc:	4770      	bx	lr
 800d5be:	bf00      	nop

0800d5c0 <_Setup_Request__cdr_serialize>:
 800d5c0:	b330      	cbz	r0, 800d610 <_Setup_Request__cdr_serialize+0x50>
 800d5c2:	b538      	push	{r3, r4, r5, lr}
 800d5c4:	460d      	mov	r5, r1
 800d5c6:	4604      	mov	r4, r0
 800d5c8:	7801      	ldrb	r1, [r0, #0]
 800d5ca:	4628      	mov	r0, r5
 800d5cc:	f002 fdda 	bl	8010184 <ucdr_serialize_uint8_t>
 800d5d0:	ed94 0a01 	vldr	s0, [r4, #4]
 800d5d4:	4628      	mov	r0, r5
 800d5d6:	f003 ffb9 	bl	801154c <ucdr_serialize_float>
 800d5da:	ed94 0a02 	vldr	s0, [r4, #8]
 800d5de:	4628      	mov	r0, r5
 800d5e0:	f003 ffb4 	bl	801154c <ucdr_serialize_float>
 800d5e4:	ed94 0a03 	vldr	s0, [r4, #12]
 800d5e8:	4628      	mov	r0, r5
 800d5ea:	f003 ffaf 	bl	801154c <ucdr_serialize_float>
 800d5ee:	ed94 0a04 	vldr	s0, [r4, #16]
 800d5f2:	4628      	mov	r0, r5
 800d5f4:	f003 ffaa 	bl	801154c <ucdr_serialize_float>
 800d5f8:	ed94 0a05 	vldr	s0, [r4, #20]
 800d5fc:	4628      	mov	r0, r5
 800d5fe:	f003 ffa5 	bl	801154c <ucdr_serialize_float>
 800d602:	ed94 0a06 	vldr	s0, [r4, #24]
 800d606:	4628      	mov	r0, r5
 800d608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d60c:	f003 bf9e 	b.w	801154c <ucdr_serialize_float>
 800d610:	4770      	bx	lr
 800d612:	bf00      	nop

0800d614 <get_serialized_size_racs_services__srv__Setup_Event.part.0>:
 800d614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d618:	460e      	mov	r6, r1
 800d61a:	4605      	mov	r5, r0
 800d61c:	f002 f9c2 	bl	800f9a4 <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800d620:	2104      	movs	r1, #4
 800d622:	eb06 0800 	add.w	r8, r6, r0
 800d626:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
 800d62a:	4640      	mov	r0, r8
 800d62c:	f004 fa3e 	bl	8011aac <ucdr_alignment>
 800d630:	3004      	adds	r0, #4
 800d632:	4480      	add	r8, r0
 800d634:	f1b9 0f00 	cmp.w	r9, #0
 800d638:	d019      	beq.n	800d66e <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x5a>
 800d63a:	2700      	movs	r7, #0
 800d63c:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800d6bc <get_serialized_size_racs_services__srv__Setup_Event.part.0+0xa8>
 800d640:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d642:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
 800d646:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d64a:	4641      	mov	r1, r8
 800d64c:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800d650:	3701      	adds	r7, #1
 800d652:	695b      	ldr	r3, [r3, #20]
 800d654:	4798      	blx	r3
 800d656:	4604      	mov	r4, r0
 800d658:	4640      	mov	r0, r8
 800d65a:	2c04      	cmp	r4, #4
 800d65c:	4621      	mov	r1, r4
 800d65e:	bf28      	it	cs
 800d660:	2104      	movcs	r1, #4
 800d662:	f004 fa23 	bl	8011aac <ucdr_alignment>
 800d666:	45b9      	cmp	r9, r7
 800d668:	4420      	add	r0, r4
 800d66a:	4480      	add	r8, r0
 800d66c:	d1e8      	bne.n	800d640 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x2c>
 800d66e:	4640      	mov	r0, r8
 800d670:	2104      	movs	r1, #4
 800d672:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800d674:	f004 fa1a 	bl	8011aac <ucdr_alignment>
 800d678:	4480      	add	r8, r0
 800d67a:	f108 0804 	add.w	r8, r8, #4
 800d67e:	b1c7      	cbz	r7, 800d6b2 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x9e>
 800d680:	f04f 0900 	mov.w	r9, #0
 800d684:	f8df a038 	ldr.w	sl, [pc, #56]	; 800d6c0 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0xac>
 800d688:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800d68a:	4641      	mov	r1, r8
 800d68c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800d690:	4448      	add	r0, r9
 800d692:	f109 0901 	add.w	r9, r9, #1
 800d696:	695b      	ldr	r3, [r3, #20]
 800d698:	4798      	blx	r3
 800d69a:	4604      	mov	r4, r0
 800d69c:	4640      	mov	r0, r8
 800d69e:	2c04      	cmp	r4, #4
 800d6a0:	4621      	mov	r1, r4
 800d6a2:	bf28      	it	cs
 800d6a4:	2104      	movcs	r1, #4
 800d6a6:	f004 fa01 	bl	8011aac <ucdr_alignment>
 800d6aa:	454f      	cmp	r7, r9
 800d6ac:	4420      	add	r0, r4
 800d6ae:	4480      	add	r8, r0
 800d6b0:	d1ea      	bne.n	800d688 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x74>
 800d6b2:	eba8 0006 	sub.w	r0, r8, r6
 800d6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6ba:	bf00      	nop
 800d6bc:	20000a50 	.word	0x20000a50
 800d6c0:	20000a68 	.word	0x20000a68

0800d6c4 <get_serialized_size_racs_services__srv__Setup_Event>:
 800d6c4:	b108      	cbz	r0, 800d6ca <get_serialized_size_racs_services__srv__Setup_Event+0x6>
 800d6c6:	f7ff bfa5 	b.w	800d614 <get_serialized_size_racs_services__srv__Setup_Event.part.0>
 800d6ca:	4770      	bx	lr

0800d6cc <_Setup_Event__get_serialized_size>:
 800d6cc:	b110      	cbz	r0, 800d6d4 <_Setup_Event__get_serialized_size+0x8>
 800d6ce:	2100      	movs	r1, #0
 800d6d0:	f7ff bfa0 	b.w	800d614 <get_serialized_size_racs_services__srv__Setup_Event.part.0>
 800d6d4:	4770      	bx	lr
 800d6d6:	bf00      	nop

0800d6d8 <_Setup_Event__cdr_deserialize>:
 800d6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6dc:	460c      	mov	r4, r1
 800d6de:	b082      	sub	sp, #8
 800d6e0:	2900      	cmp	r1, #0
 800d6e2:	d045      	beq.n	800d770 <_Setup_Event__cdr_deserialize+0x98>
 800d6e4:	4607      	mov	r7, r0
 800d6e6:	f002 fa1d 	bl	800fb24 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	4621      	mov	r1, r4
 800d6ee:	4638      	mov	r0, r7
 800d6f0:	685b      	ldr	r3, [r3, #4]
 800d6f2:	68db      	ldr	r3, [r3, #12]
 800d6f4:	4798      	blx	r3
 800d6f6:	4638      	mov	r0, r7
 800d6f8:	a901      	add	r1, sp, #4
 800d6fa:	f003 f889 	bl	8010810 <ucdr_deserialize_uint32_t>
 800d6fe:	9b01      	ldr	r3, [sp, #4]
 800d700:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d702:	429a      	cmp	r2, r3
 800d704:	d330      	bcc.n	800d768 <_Setup_Event__cdr_deserialize+0x90>
 800d706:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d708:	b193      	cbz	r3, 800d730 <_Setup_Event__cdr_deserialize+0x58>
 800d70a:	2500      	movs	r5, #0
 800d70c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800d77c <_Setup_Event__cdr_deserialize+0xa4>
 800d710:	462e      	mov	r6, r5
 800d712:	e002      	b.n	800d71a <_Setup_Event__cdr_deserialize+0x42>
 800d714:	9b01      	ldr	r3, [sp, #4]
 800d716:	429e      	cmp	r6, r3
 800d718:	d20a      	bcs.n	800d730 <_Setup_Event__cdr_deserialize+0x58>
 800d71a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800d71c:	4638      	mov	r0, r7
 800d71e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d722:	3601      	adds	r6, #1
 800d724:	4429      	add	r1, r5
 800d726:	351c      	adds	r5, #28
 800d728:	68db      	ldr	r3, [r3, #12]
 800d72a:	4798      	blx	r3
 800d72c:	2800      	cmp	r0, #0
 800d72e:	d1f1      	bne.n	800d714 <_Setup_Event__cdr_deserialize+0x3c>
 800d730:	a901      	add	r1, sp, #4
 800d732:	4638      	mov	r0, r7
 800d734:	f003 f86c 	bl	8010810 <ucdr_deserialize_uint32_t>
 800d738:	9b01      	ldr	r3, [sp, #4]
 800d73a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800d73c:	429a      	cmp	r2, r3
 800d73e:	d313      	bcc.n	800d768 <_Setup_Event__cdr_deserialize+0x90>
 800d740:	63a3      	str	r3, [r4, #56]	; 0x38
 800d742:	b193      	cbz	r3, 800d76a <_Setup_Event__cdr_deserialize+0x92>
 800d744:	2500      	movs	r5, #0
 800d746:	4e0c      	ldr	r6, [pc, #48]	; (800d778 <_Setup_Event__cdr_deserialize+0xa0>)
 800d748:	e002      	b.n	800d750 <_Setup_Event__cdr_deserialize+0x78>
 800d74a:	9b01      	ldr	r3, [sp, #4]
 800d74c:	429d      	cmp	r5, r3
 800d74e:	d20c      	bcs.n	800d76a <_Setup_Event__cdr_deserialize+0x92>
 800d750:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d752:	4638      	mov	r0, r7
 800d754:	6873      	ldr	r3, [r6, #4]
 800d756:	4429      	add	r1, r5
 800d758:	3501      	adds	r5, #1
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	4798      	blx	r3
 800d75e:	2800      	cmp	r0, #0
 800d760:	d1f3      	bne.n	800d74a <_Setup_Event__cdr_deserialize+0x72>
 800d762:	b002      	add	sp, #8
 800d764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d768:	2000      	movs	r0, #0
 800d76a:	b002      	add	sp, #8
 800d76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d770:	4608      	mov	r0, r1
 800d772:	b002      	add	sp, #8
 800d774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d778:	20000a68 	.word	0x20000a68
 800d77c:	20000a50 	.word	0x20000a50

0800d780 <_Setup_Event__cdr_serialize>:
 800d780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d784:	2800      	cmp	r0, #0
 800d786:	d03b      	beq.n	800d800 <_Setup_Event__cdr_serialize+0x80>
 800d788:	4605      	mov	r5, r0
 800d78a:	460e      	mov	r6, r1
 800d78c:	f002 f9ca 	bl	800fb24 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800d790:	4603      	mov	r3, r0
 800d792:	4631      	mov	r1, r6
 800d794:	4628      	mov	r0, r5
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	689b      	ldr	r3, [r3, #8]
 800d79a:	4798      	blx	r3
 800d79c:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800d79e:	4630      	mov	r0, r6
 800d7a0:	4639      	mov	r1, r7
 800d7a2:	f002 ff05 	bl	80105b0 <ucdr_serialize_uint32_t>
 800d7a6:	b198      	cbz	r0, 800d7d0 <_Setup_Event__cdr_serialize+0x50>
 800d7a8:	b197      	cbz	r7, 800d7d0 <_Setup_Event__cdr_serialize+0x50>
 800d7aa:	2400      	movs	r4, #0
 800d7ac:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800d80c <_Setup_Event__cdr_serialize+0x8c>
 800d7b0:	e001      	b.n	800d7b6 <_Setup_Event__cdr_serialize+0x36>
 800d7b2:	42a7      	cmp	r7, r4
 800d7b4:	d00c      	beq.n	800d7d0 <_Setup_Event__cdr_serialize+0x50>
 800d7b6:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800d7ba:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800d7bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d7c0:	4631      	mov	r1, r6
 800d7c2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800d7c6:	3401      	adds	r4, #1
 800d7c8:	689b      	ldr	r3, [r3, #8]
 800d7ca:	4798      	blx	r3
 800d7cc:	2800      	cmp	r0, #0
 800d7ce:	d1f0      	bne.n	800d7b2 <_Setup_Event__cdr_serialize+0x32>
 800d7d0:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800d7d2:	4630      	mov	r0, r6
 800d7d4:	4639      	mov	r1, r7
 800d7d6:	f002 feeb 	bl	80105b0 <ucdr_serialize_uint32_t>
 800d7da:	4680      	mov	r8, r0
 800d7dc:	b180      	cbz	r0, 800d800 <_Setup_Event__cdr_serialize+0x80>
 800d7de:	b18f      	cbz	r7, 800d804 <_Setup_Event__cdr_serialize+0x84>
 800d7e0:	2400      	movs	r4, #0
 800d7e2:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800d810 <_Setup_Event__cdr_serialize+0x90>
 800d7e6:	e001      	b.n	800d7ec <_Setup_Event__cdr_serialize+0x6c>
 800d7e8:	42a7      	cmp	r7, r4
 800d7ea:	d00b      	beq.n	800d804 <_Setup_Event__cdr_serialize+0x84>
 800d7ec:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800d7ee:	4631      	mov	r1, r6
 800d7f0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800d7f4:	4420      	add	r0, r4
 800d7f6:	3401      	adds	r4, #1
 800d7f8:	689b      	ldr	r3, [r3, #8]
 800d7fa:	4798      	blx	r3
 800d7fc:	2800      	cmp	r0, #0
 800d7fe:	d1f3      	bne.n	800d7e8 <_Setup_Event__cdr_serialize+0x68>
 800d800:	f04f 0800 	mov.w	r8, #0
 800d804:	4640      	mov	r0, r8
 800d806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d80a:	bf00      	nop
 800d80c:	20000a50 	.word	0x20000a50
 800d810:	20000a68 	.word	0x20000a68

0800d814 <_Setup_Response__get_serialized_size>:
 800d814:	b130      	cbz	r0, 800d824 <_Setup_Response__get_serialized_size+0x10>
 800d816:	2101      	movs	r1, #1
 800d818:	2000      	movs	r0, #0
 800d81a:	b508      	push	{r3, lr}
 800d81c:	f004 f946 	bl	8011aac <ucdr_alignment>
 800d820:	3001      	adds	r0, #1
 800d822:	bd08      	pop	{r3, pc}
 800d824:	4770      	bx	lr
 800d826:	bf00      	nop

0800d828 <max_serialized_size_racs_services__srv__Setup_Request>:
 800d828:	b570      	push	{r4, r5, r6, lr}
 800d82a:	460c      	mov	r4, r1
 800d82c:	2301      	movs	r3, #1
 800d82e:	1c65      	adds	r5, r4, #1
 800d830:	4619      	mov	r1, r3
 800d832:	7003      	strb	r3, [r0, #0]
 800d834:	4620      	mov	r0, r4
 800d836:	f004 f939 	bl	8011aac <ucdr_alignment>
 800d83a:	4405      	add	r5, r0
 800d83c:	2104      	movs	r1, #4
 800d83e:	f1c4 0404 	rsb	r4, r4, #4
 800d842:	4628      	mov	r0, r5
 800d844:	f004 f932 	bl	8011aac <ucdr_alignment>
 800d848:	2104      	movs	r1, #4
 800d84a:	1846      	adds	r6, r0, r1
 800d84c:	442e      	add	r6, r5
 800d84e:	4630      	mov	r0, r6
 800d850:	f004 f92c 	bl	8011aac <ucdr_alignment>
 800d854:	2104      	movs	r1, #4
 800d856:	1845      	adds	r5, r0, r1
 800d858:	442e      	add	r6, r5
 800d85a:	4630      	mov	r0, r6
 800d85c:	f004 f926 	bl	8011aac <ucdr_alignment>
 800d860:	2104      	movs	r1, #4
 800d862:	4408      	add	r0, r1
 800d864:	4406      	add	r6, r0
 800d866:	4630      	mov	r0, r6
 800d868:	f004 f920 	bl	8011aac <ucdr_alignment>
 800d86c:	2104      	movs	r1, #4
 800d86e:	1845      	adds	r5, r0, r1
 800d870:	4435      	add	r5, r6
 800d872:	4628      	mov	r0, r5
 800d874:	f004 f91a 	bl	8011aac <ucdr_alignment>
 800d878:	2104      	movs	r1, #4
 800d87a:	4408      	add	r0, r1
 800d87c:	4405      	add	r5, r0
 800d87e:	4628      	mov	r0, r5
 800d880:	f004 f914 	bl	8011aac <ucdr_alignment>
 800d884:	4420      	add	r0, r4
 800d886:	4428      	add	r0, r5
 800d888:	bd70      	pop	{r4, r5, r6, pc}
 800d88a:	bf00      	nop

0800d88c <_Setup_Request__max_serialized_size>:
 800d88c:	b500      	push	{lr}
 800d88e:	b083      	sub	sp, #12
 800d890:	2100      	movs	r1, #0
 800d892:	f10d 0007 	add.w	r0, sp, #7
 800d896:	f7ff ffc7 	bl	800d828 <max_serialized_size_racs_services__srv__Setup_Request>
 800d89a:	b003      	add	sp, #12
 800d89c:	f85d fb04 	ldr.w	pc, [sp], #4

0800d8a0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Event>:
 800d8a0:	4800      	ldr	r0, [pc, #0]	; (800d8a4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x4>)
 800d8a2:	4770      	bx	lr
 800d8a4:	20000a38 	.word	0x20000a38

0800d8a8 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800d8a8:	4800      	ldr	r0, [pc, #0]	; (800d8ac <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Setup+0x4>)
 800d8aa:	4770      	bx	lr
 800d8ac:	20000a0c 	.word	0x20000a0c

0800d8b0 <rcl_get_zero_initialized_publisher>:
 800d8b0:	4b01      	ldr	r3, [pc, #4]	; (800d8b8 <rcl_get_zero_initialized_publisher+0x8>)
 800d8b2:	6818      	ldr	r0, [r3, #0]
 800d8b4:	4770      	bx	lr
 800d8b6:	bf00      	nop
 800d8b8:	0801f980 	.word	0x0801f980

0800d8bc <rcl_publisher_init>:
 800d8bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8c0:	b088      	sub	sp, #32
 800d8c2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800d8c4:	2e00      	cmp	r6, #0
 800d8c6:	d06c      	beq.n	800d9a2 <rcl_publisher_init+0xe6>
 800d8c8:	f106 0a50 	add.w	sl, r6, #80	; 0x50
 800d8cc:	4605      	mov	r5, r0
 800d8ce:	460f      	mov	r7, r1
 800d8d0:	4690      	mov	r8, r2
 800d8d2:	4650      	mov	r0, sl
 800d8d4:	4699      	mov	r9, r3
 800d8d6:	f001 f96b 	bl	800ebb0 <rcutils_allocator_is_valid>
 800d8da:	f080 0401 	eor.w	r4, r0, #1
 800d8de:	b2e4      	uxtb	r4, r4
 800d8e0:	2c00      	cmp	r4, #0
 800d8e2:	d15e      	bne.n	800d9a2 <rcl_publisher_init+0xe6>
 800d8e4:	2d00      	cmp	r5, #0
 800d8e6:	d05c      	beq.n	800d9a2 <rcl_publisher_init+0xe6>
 800d8e8:	682b      	ldr	r3, [r5, #0]
 800d8ea:	b123      	cbz	r3, 800d8f6 <rcl_publisher_init+0x3a>
 800d8ec:	2464      	movs	r4, #100	; 0x64
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	b008      	add	sp, #32
 800d8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8f6:	4638      	mov	r0, r7
 800d8f8:	f008 fc32 	bl	8016160 <rcl_node_is_valid>
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	d055      	beq.n	800d9ac <rcl_publisher_init+0xf0>
 800d900:	f1b8 0f00 	cmp.w	r8, #0
 800d904:	d04d      	beq.n	800d9a2 <rcl_publisher_init+0xe6>
 800d906:	fab9 f389 	clz	r3, r9
 800d90a:	095b      	lsrs	r3, r3, #5
 800d90c:	f1b9 0f00 	cmp.w	r9, #0
 800d910:	d047      	beq.n	800d9a2 <rcl_publisher_init+0xe6>
 800d912:	aa07      	add	r2, sp, #28
 800d914:	9307      	str	r3, [sp, #28]
 800d916:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800d91a:	f106 0358 	add.w	r3, r6, #88	; 0x58
 800d91e:	9205      	str	r2, [sp, #20]
 800d920:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d924:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800d928:	4649      	mov	r1, r9
 800d92a:	4638      	mov	r0, r7
 800d92c:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800d930:	f008 fc8e 	bl	8016250 <rcl_node_resolve_name>
 800d934:	2800      	cmp	r0, #0
 800d936:	d150      	bne.n	800d9da <rcl_publisher_init+0x11e>
 800d938:	21c8      	movs	r1, #200	; 0xc8
 800d93a:	2001      	movs	r0, #1
 800d93c:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	; 0x5c
 800d940:	4798      	blx	r3
 800d942:	6028      	str	r0, [r5, #0]
 800d944:	2800      	cmp	r0, #0
 800d946:	d050      	beq.n	800d9ea <rcl_publisher_init+0x12e>
 800d948:	4638      	mov	r0, r7
 800d94a:	f008 fc2b 	bl	80161a4 <rcl_node_get_rmw_handle>
 800d94e:	f106 0364 	add.w	r3, r6, #100	; 0x64
 800d952:	4641      	mov	r1, r8
 800d954:	9a07      	ldr	r2, [sp, #28]
 800d956:	9300      	str	r3, [sp, #0]
 800d958:	4633      	mov	r3, r6
 800d95a:	682c      	ldr	r4, [r5, #0]
 800d95c:	f001 fa36 	bl	800edcc <rmw_create_publisher>
 800d960:	682b      	ldr	r3, [r5, #0]
 800d962:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 800d966:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800d96a:	b370      	cbz	r0, 800d9ca <rcl_publisher_init+0x10e>
 800d96c:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800d970:	f001 fb10 	bl	800ef94 <rmw_publisher_get_actual_qos>
 800d974:	682b      	ldr	r3, [r5, #0]
 800d976:	4604      	mov	r4, r0
 800d978:	b9d0      	cbnz	r0, 800d9b0 <rcl_publisher_init+0xf4>
 800d97a:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
 800d97e:	4631      	mov	r1, r6
 800d980:	4618      	mov	r0, r3
 800d982:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800d986:	2270      	movs	r2, #112	; 0x70
 800d988:	f010 f9f5 	bl	801dd76 <memcpy>
 800d98c:	683a      	ldr	r2, [r7, #0]
 800d98e:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800d992:	9807      	ldr	r0, [sp, #28]
 800d994:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800d996:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800d998:	4798      	blx	r3
 800d99a:	4620      	mov	r0, r4
 800d99c:	b008      	add	sp, #32
 800d99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9a2:	240b      	movs	r4, #11
 800d9a4:	4620      	mov	r0, r4
 800d9a6:	b008      	add	sp, #32
 800d9a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9ac:	24c8      	movs	r4, #200	; 0xc8
 800d9ae:	e79e      	b.n	800d8ee <rcl_publisher_init+0x32>
 800d9b0:	b1cb      	cbz	r3, 800d9e6 <rcl_publisher_init+0x12a>
 800d9b2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800d9b6:	b142      	cbz	r2, 800d9ca <rcl_publisher_init+0x10e>
 800d9b8:	4638      	mov	r0, r7
 800d9ba:	f008 fbf3 	bl	80161a4 <rcl_node_get_rmw_handle>
 800d9be:	682b      	ldr	r3, [r5, #0]
 800d9c0:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800d9c4:	f001 fafa 	bl	800efbc <rmw_destroy_publisher>
 800d9c8:	682b      	ldr	r3, [r5, #0]
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800d9ce:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800d9d0:	2401      	movs	r4, #1
 800d9d2:	4790      	blx	r2
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	602b      	str	r3, [r5, #0]
 800d9d8:	e7db      	b.n	800d992 <rcl_publisher_init+0xd6>
 800d9da:	2867      	cmp	r0, #103	; 0x67
 800d9dc:	d007      	beq.n	800d9ee <rcl_publisher_init+0x132>
 800d9de:	2869      	cmp	r0, #105	; 0x69
 800d9e0:	d005      	beq.n	800d9ee <rcl_publisher_init+0x132>
 800d9e2:	280a      	cmp	r0, #10
 800d9e4:	d001      	beq.n	800d9ea <rcl_publisher_init+0x12e>
 800d9e6:	2401      	movs	r4, #1
 800d9e8:	e7d3      	b.n	800d992 <rcl_publisher_init+0xd6>
 800d9ea:	240a      	movs	r4, #10
 800d9ec:	e7d1      	b.n	800d992 <rcl_publisher_init+0xd6>
 800d9ee:	2467      	movs	r4, #103	; 0x67
 800d9f0:	e7cf      	b.n	800d992 <rcl_publisher_init+0xd6>
 800d9f2:	bf00      	nop

0800d9f4 <rcl_publisher_get_default_options>:
 800d9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9f6:	4d1d      	ldr	r5, [pc, #116]	; (800da6c <rcl_publisher_get_default_options+0x78>)
 800d9f8:	b08b      	sub	sp, #44	; 0x2c
 800d9fa:	2250      	movs	r2, #80	; 0x50
 800d9fc:	491c      	ldr	r1, [pc, #112]	; (800da70 <rcl_publisher_get_default_options+0x7c>)
 800d9fe:	4604      	mov	r4, r0
 800da00:	4628      	mov	r0, r5
 800da02:	f010 f9b8 	bl	801dd76 <memcpy>
 800da06:	a802      	add	r0, sp, #8
 800da08:	f001 f8c4 	bl	800eb94 <rcutils_get_default_allocator>
 800da0c:	f10d 0c08 	add.w	ip, sp, #8
 800da10:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800da14:	466e      	mov	r6, sp
 800da16:	2700      	movs	r7, #0
 800da18:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800da1c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800da20:	f8dc 3000 	ldr.w	r3, [ip]
 800da24:	4630      	mov	r0, r6
 800da26:	f8ce 3000 	str.w	r3, [lr]
 800da2a:	f001 f951 	bl	800ecd0 <rmw_get_default_publisher_options>
 800da2e:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800da32:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 800da36:	e896 0003 	ldmia.w	r6, {r0, r1}
 800da3a:	e883 0003 	stmia.w	r3, {r0, r1}
 800da3e:	f10d 0027 	add.w	r0, sp, #39	; 0x27
 800da42:	f008 fbb5 	bl	80161b0 <rcl_get_disable_loaned_message>
 800da46:	b958      	cbnz	r0, 800da60 <rcl_publisher_get_default_options+0x6c>
 800da48:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800da4c:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
 800da50:	2270      	movs	r2, #112	; 0x70
 800da52:	4906      	ldr	r1, [pc, #24]	; (800da6c <rcl_publisher_get_default_options+0x78>)
 800da54:	4620      	mov	r0, r4
 800da56:	f010 f98e 	bl	801dd76 <memcpy>
 800da5a:	4620      	mov	r0, r4
 800da5c:	b00b      	add	sp, #44	; 0x2c
 800da5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da60:	f001 f8ca 	bl	800ebf8 <rcutils_reset_error>
 800da64:	f885 706c 	strb.w	r7, [r5, #108]	; 0x6c
 800da68:	e7f2      	b.n	800da50 <rcl_publisher_get_default_options+0x5c>
 800da6a:	bf00      	nop
 800da6c:	2000ba70 	.word	0x2000ba70
 800da70:	0801f988 	.word	0x0801f988

0800da74 <rcl_publish>:
 800da74:	b1f8      	cbz	r0, 800dab6 <rcl_publish+0x42>
 800da76:	6803      	ldr	r3, [r0, #0]
 800da78:	b570      	push	{r4, r5, r6, lr}
 800da7a:	4604      	mov	r4, r0
 800da7c:	b1b3      	cbz	r3, 800daac <rcl_publish+0x38>
 800da7e:	4616      	mov	r6, r2
 800da80:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800da84:	b192      	cbz	r2, 800daac <rcl_publish+0x38>
 800da86:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800da8a:	460d      	mov	r5, r1
 800da8c:	f007 ff6c 	bl	8015968 <rcl_context_is_valid>
 800da90:	b160      	cbz	r0, 800daac <rcl_publish+0x38>
 800da92:	6823      	ldr	r3, [r4, #0]
 800da94:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800da98:	b140      	cbz	r0, 800daac <rcl_publish+0x38>
 800da9a:	b155      	cbz	r5, 800dab2 <rcl_publish+0x3e>
 800da9c:	4632      	mov	r2, r6
 800da9e:	4629      	mov	r1, r5
 800daa0:	f001 f934 	bl	800ed0c <rmw_publish>
 800daa4:	3800      	subs	r0, #0
 800daa6:	bf18      	it	ne
 800daa8:	2001      	movne	r0, #1
 800daaa:	bd70      	pop	{r4, r5, r6, pc}
 800daac:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800dab0:	bd70      	pop	{r4, r5, r6, pc}
 800dab2:	200b      	movs	r0, #11
 800dab4:	bd70      	pop	{r4, r5, r6, pc}
 800dab6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800daba:	4770      	bx	lr

0800dabc <rcl_publisher_is_valid>:
 800dabc:	b1a0      	cbz	r0, 800dae8 <rcl_publisher_is_valid+0x2c>
 800dabe:	6803      	ldr	r3, [r0, #0]
 800dac0:	b510      	push	{r4, lr}
 800dac2:	4604      	mov	r4, r0
 800dac4:	b173      	cbz	r3, 800dae4 <rcl_publisher_is_valid+0x28>
 800dac6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800daca:	b15a      	cbz	r2, 800dae4 <rcl_publisher_is_valid+0x28>
 800dacc:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800dad0:	f007 ff4a 	bl	8015968 <rcl_context_is_valid>
 800dad4:	b130      	cbz	r0, 800dae4 <rcl_publisher_is_valid+0x28>
 800dad6:	6823      	ldr	r3, [r4, #0]
 800dad8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800dadc:	3800      	subs	r0, #0
 800dade:	bf18      	it	ne
 800dae0:	2001      	movne	r0, #1
 800dae2:	bd10      	pop	{r4, pc}
 800dae4:	2000      	movs	r0, #0
 800dae6:	bd10      	pop	{r4, pc}
 800dae8:	2000      	movs	r0, #0
 800daea:	4770      	bx	lr

0800daec <rcl_publisher_is_valid_except_context>:
 800daec:	b130      	cbz	r0, 800dafc <rcl_publisher_is_valid_except_context+0x10>
 800daee:	6800      	ldr	r0, [r0, #0]
 800daf0:	b120      	cbz	r0, 800dafc <rcl_publisher_is_valid_except_context+0x10>
 800daf2:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 800daf6:	3800      	subs	r0, #0
 800daf8:	bf18      	it	ne
 800dafa:	2001      	movne	r0, #1
 800dafc:	4770      	bx	lr
 800dafe:	bf00      	nop

0800db00 <_rclc_check_for_new_data>:
 800db00:	2800      	cmp	r0, #0
 800db02:	d046      	beq.n	800db92 <_rclc_check_for_new_data+0x92>
 800db04:	4603      	mov	r3, r0
 800db06:	b530      	push	{r4, r5, lr}
 800db08:	7802      	ldrb	r2, [r0, #0]
 800db0a:	b085      	sub	sp, #20
 800db0c:	2a0a      	cmp	r2, #10
 800db0e:	d842      	bhi.n	800db96 <_rclc_check_for_new_data+0x96>
 800db10:	e8df f002 	tbb	[pc, r2]
 800db14:	14181212 	.word	0x14181212
 800db18:	06060614 	.word	0x06060614
 800db1c:	2e1a      	.short	0x2e1a
 800db1e:	16          	.byte	0x16
 800db1f:	00          	.byte	0x00
 800db20:	6a0a      	ldr	r2, [r1, #32]
 800db22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800db24:	2000      	movs	r0, #0
 800db26:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800db2a:	1a12      	subs	r2, r2, r0
 800db2c:	bf18      	it	ne
 800db2e:	2201      	movne	r2, #1
 800db30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800db34:	b005      	add	sp, #20
 800db36:	bd30      	pop	{r4, r5, pc}
 800db38:	680a      	ldr	r2, [r1, #0]
 800db3a:	e7f2      	b.n	800db22 <_rclc_check_for_new_data+0x22>
 800db3c:	698a      	ldr	r2, [r1, #24]
 800db3e:	e7f0      	b.n	800db22 <_rclc_check_for_new_data+0x22>
 800db40:	688a      	ldr	r2, [r1, #8]
 800db42:	e7ee      	b.n	800db22 <_rclc_check_for_new_data+0x22>
 800db44:	690a      	ldr	r2, [r1, #16]
 800db46:	e7ec      	b.n	800db22 <_rclc_check_for_new_data+0x22>
 800db48:	685c      	ldr	r4, [r3, #4]
 800db4a:	4608      	mov	r0, r1
 800db4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800db50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db58:	f104 0110 	add.w	r1, r4, #16
 800db5c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800db60:	9500      	str	r5, [sp, #0]
 800db62:	f104 0341 	add.w	r3, r4, #65	; 0x41
 800db66:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800db6a:	f00a fc4d 	bl	8018408 <rcl_action_client_wait_set_get_entities_ready>
 800db6e:	e7e1      	b.n	800db34 <_rclc_check_for_new_data+0x34>
 800db70:	685c      	ldr	r4, [r3, #4]
 800db72:	4608      	mov	r0, r1
 800db74:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800db78:	f104 0123 	add.w	r1, r4, #35	; 0x23
 800db7c:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800db80:	e9cd 2100 	strd	r2, r1, [sp]
 800db84:	f104 0220 	add.w	r2, r4, #32
 800db88:	f104 0110 	add.w	r1, r4, #16
 800db8c:	f00a fe54 	bl	8018838 <rcl_action_server_wait_set_get_entities_ready>
 800db90:	e7d0      	b.n	800db34 <_rclc_check_for_new_data+0x34>
 800db92:	200b      	movs	r0, #11
 800db94:	4770      	bx	lr
 800db96:	2001      	movs	r0, #1
 800db98:	e7cc      	b.n	800db34 <_rclc_check_for_new_data+0x34>
 800db9a:	bf00      	nop

0800db9c <_rclc_take_new_data>:
 800db9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db9e:	b099      	sub	sp, #100	; 0x64
 800dba0:	2800      	cmp	r0, #0
 800dba2:	f000 8088 	beq.w	800dcb6 <_rclc_take_new_data+0x11a>
 800dba6:	7803      	ldrb	r3, [r0, #0]
 800dba8:	4604      	mov	r4, r0
 800dbaa:	2b0a      	cmp	r3, #10
 800dbac:	f200 8167 	bhi.w	800de7e <_rclc_take_new_data+0x2e2>
 800dbb0:	e8df f003 	tbb	[pc, r3]
 800dbb4:	44152d2d 	.word	0x44152d2d
 800dbb8:	19191944 	.word	0x19191944
 800dbbc:	065a      	.short	0x065a
 800dbbe:	15          	.byte	0x15
 800dbbf:	00          	.byte	0x00
 800dbc0:	6840      	ldr	r0, [r0, #4]
 800dbc2:	f890 3020 	ldrb.w	r3, [r0, #32]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	f040 80b2 	bne.w	800dd30 <_rclc_take_new_data+0x194>
 800dbcc:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	f040 80e4 	bne.w	800dd9e <_rclc_take_new_data+0x202>
 800dbd6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d16f      	bne.n	800dcbe <_rclc_take_new_data+0x122>
 800dbde:	2500      	movs	r5, #0
 800dbe0:	4628      	mov	r0, r5
 800dbe2:	b019      	add	sp, #100	; 0x64
 800dbe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbe6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800dbe8:	6a0b      	ldr	r3, [r1, #32]
 800dbea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d0f5      	beq.n	800dbde <_rclc_take_new_data+0x42>
 800dbf2:	6882      	ldr	r2, [r0, #8]
 800dbf4:	f100 0110 	add.w	r1, r0, #16
 800dbf8:	6840      	ldr	r0, [r0, #4]
 800dbfa:	f008 fdd5 	bl	80167a8 <rcl_take_request>
 800dbfe:	4605      	mov	r5, r0
 800dc00:	2800      	cmp	r0, #0
 800dc02:	d0ec      	beq.n	800dbde <_rclc_take_new_data+0x42>
 800dc04:	f240 2359 	movw	r3, #601	; 0x259
 800dc08:	4298      	cmp	r0, r3
 800dc0a:	d013      	beq.n	800dc34 <_rclc_take_new_data+0x98>
 800dc0c:	e029      	b.n	800dc62 <_rclc_take_new_data+0xc6>
 800dc0e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800dc10:	680b      	ldr	r3, [r1, #0]
 800dc12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d0e1      	beq.n	800dbde <_rclc_take_new_data+0x42>
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	aa0a      	add	r2, sp, #40	; 0x28
 800dc1e:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800dc22:	f008 ffcf 	bl	8016bc4 <rcl_take>
 800dc26:	4605      	mov	r5, r0
 800dc28:	2800      	cmp	r0, #0
 800dc2a:	d0d9      	beq.n	800dbe0 <_rclc_take_new_data+0x44>
 800dc2c:	f240 1391 	movw	r3, #401	; 0x191
 800dc30:	4298      	cmp	r0, r3
 800dc32:	d116      	bne.n	800dc62 <_rclc_take_new_data+0xc6>
 800dc34:	2300      	movs	r3, #0
 800dc36:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800dc3a:	e7d1      	b.n	800dbe0 <_rclc_take_new_data+0x44>
 800dc3c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800dc3e:	698b      	ldr	r3, [r1, #24]
 800dc40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d0ca      	beq.n	800dbde <_rclc_take_new_data+0x42>
 800dc48:	6882      	ldr	r2, [r0, #8]
 800dc4a:	f100 0110 	add.w	r1, r0, #16
 800dc4e:	6840      	ldr	r0, [r0, #4]
 800dc50:	f007 fdfa 	bl	8015848 <rcl_take_response>
 800dc54:	4605      	mov	r5, r0
 800dc56:	2800      	cmp	r0, #0
 800dc58:	d0c1      	beq.n	800dbde <_rclc_take_new_data+0x42>
 800dc5a:	f240 13f5 	movw	r3, #501	; 0x1f5
 800dc5e:	4298      	cmp	r0, r3
 800dc60:	d0be      	beq.n	800dbe0 <_rclc_take_new_data+0x44>
 800dc62:	f000 ffc9 	bl	800ebf8 <rcutils_reset_error>
 800dc66:	e7bb      	b.n	800dbe0 <_rclc_take_new_data+0x44>
 800dc68:	6840      	ldr	r0, [r0, #4]
 800dc6a:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d17d      	bne.n	800dd6e <_rclc_take_new_data+0x1d2>
 800dc72:	69c3      	ldr	r3, [r0, #28]
 800dc74:	b11b      	cbz	r3, 800dc7e <_rclc_take_new_data+0xe2>
 800dc76:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d144      	bne.n	800dd08 <_rclc_take_new_data+0x16c>
 800dc7e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	f040 80ac 	bne.w	800dde0 <_rclc_take_new_data+0x244>
 800dc88:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d0a6      	beq.n	800dbde <_rclc_take_new_data+0x42>
 800dc90:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800dc92:	a90a      	add	r1, sp, #40	; 0x28
 800dc94:	3010      	adds	r0, #16
 800dc96:	f00a fa8f 	bl	80181b8 <rcl_action_take_result_response>
 800dc9a:	4605      	mov	r5, r0
 800dc9c:	2800      	cmp	r0, #0
 800dc9e:	d1e0      	bne.n	800dc62 <_rclc_take_new_data+0xc6>
 800dca0:	6860      	ldr	r0, [r4, #4]
 800dca2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800dca6:	f00a fef7 	bl	8018a98 <rclc_action_find_handle_by_result_request_sequence_number>
 800dcaa:	2800      	cmp	r0, #0
 800dcac:	d098      	beq.n	800dbe0 <_rclc_take_new_data+0x44>
 800dcae:	2301      	movs	r3, #1
 800dcb0:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 800dcb4:	e794      	b.n	800dbe0 <_rclc_take_new_data+0x44>
 800dcb6:	250b      	movs	r5, #11
 800dcb8:	4628      	mov	r0, r5
 800dcba:	b019      	add	sp, #100	; 0x64
 800dcbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcbe:	ae04      	add	r6, sp, #16
 800dcc0:	3010      	adds	r0, #16
 800dcc2:	aa0a      	add	r2, sp, #40	; 0x28
 800dcc4:	4631      	mov	r1, r6
 800dcc6:	f00a fceb 	bl	80186a0 <rcl_action_take_cancel_request>
 800dcca:	4605      	mov	r5, r0
 800dccc:	2800      	cmp	r0, #0
 800dcce:	d1c8      	bne.n	800dc62 <_rclc_take_new_data+0xc6>
 800dcd0:	a90a      	add	r1, sp, #40	; 0x28
 800dcd2:	6860      	ldr	r0, [r4, #4]
 800dcd4:	f00a fea0 	bl	8018a18 <rclc_action_find_goal_handle_by_uuid>
 800dcd8:	4607      	mov	r7, r0
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	f000 80bb 	beq.w	800de56 <_rclc_take_new_data+0x2ba>
 800dce0:	2101      	movs	r1, #1
 800dce2:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800dce6:	f00a fe21 	bl	801892c <rcl_action_transition_goal_state>
 800dcea:	2803      	cmp	r0, #3
 800dcec:	4684      	mov	ip, r0
 800dcee:	f040 80a7 	bne.w	800de40 <_rclc_take_new_data+0x2a4>
 800dcf2:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800dcf6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800dcf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dcfa:	e896 0003 	ldmia.w	r6, {r0, r1}
 800dcfe:	e884 0003 	stmia.w	r4, {r0, r1}
 800dd02:	f887 c008 	strb.w	ip, [r7, #8]
 800dd06:	e76b      	b.n	800dbe0 <_rclc_take_new_data+0x44>
 800dd08:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800dd0a:	3010      	adds	r0, #16
 800dd0c:	f00a fad4 	bl	80182b8 <rcl_action_take_feedback>
 800dd10:	4605      	mov	r5, r0
 800dd12:	2800      	cmp	r0, #0
 800dd14:	d1a5      	bne.n	800dc62 <_rclc_take_new_data+0xc6>
 800dd16:	6860      	ldr	r0, [r4, #4]
 800dd18:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800dd1a:	f00a fe7d 	bl	8018a18 <rclc_action_find_goal_handle_by_uuid>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	2800      	cmp	r0, #0
 800dd22:	f000 80a3 	beq.w	800de6c <_rclc_take_new_data+0x2d0>
 800dd26:	2201      	movs	r2, #1
 800dd28:	6860      	ldr	r0, [r4, #4]
 800dd2a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800dd2e:	e7a6      	b.n	800dc7e <_rclc_take_new_data+0xe2>
 800dd30:	f00a fe4c 	bl	80189cc <rclc_action_take_goal_handle>
 800dd34:	4606      	mov	r6, r0
 800dd36:	6860      	ldr	r0, [r4, #4]
 800dd38:	2e00      	cmp	r6, #0
 800dd3a:	f43f af47 	beq.w	800dbcc <_rclc_take_new_data+0x30>
 800dd3e:	6070      	str	r0, [r6, #4]
 800dd40:	f106 0128 	add.w	r1, r6, #40	; 0x28
 800dd44:	69f2      	ldr	r2, [r6, #28]
 800dd46:	3010      	adds	r0, #16
 800dd48:	f00a fbf4 	bl	8018534 <rcl_action_take_goal_request>
 800dd4c:	4605      	mov	r5, r0
 800dd4e:	2800      	cmp	r0, #0
 800dd50:	f040 808e 	bne.w	800de70 <_rclc_take_new_data+0x2d4>
 800dd54:	69f7      	ldr	r7, [r6, #28]
 800dd56:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800dd58:	7235      	strb	r5, [r6, #8]
 800dd5a:	f8c6 0009 	str.w	r0, [r6, #9]
 800dd5e:	f8c6 100d 	str.w	r1, [r6, #13]
 800dd62:	6860      	ldr	r0, [r4, #4]
 800dd64:	f8c6 2011 	str.w	r2, [r6, #17]
 800dd68:	f8c6 3015 	str.w	r3, [r6, #21]
 800dd6c:	e72e      	b.n	800dbcc <_rclc_take_new_data+0x30>
 800dd6e:	aa04      	add	r2, sp, #16
 800dd70:	a90a      	add	r1, sp, #40	; 0x28
 800dd72:	3010      	adds	r0, #16
 800dd74:	f00a f9a8 	bl	80180c8 <rcl_action_take_goal_response>
 800dd78:	4605      	mov	r5, r0
 800dd7a:	2800      	cmp	r0, #0
 800dd7c:	f47f af71 	bne.w	800dc62 <_rclc_take_new_data+0xc6>
 800dd80:	6860      	ldr	r0, [r4, #4]
 800dd82:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800dd86:	f00a fe75 	bl	8018a74 <rclc_action_find_handle_by_goal_request_sequence_number>
 800dd8a:	b130      	cbz	r0, 800dd9a <_rclc_take_new_data+0x1fe>
 800dd8c:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800dd90:	2201      	movs	r2, #1
 800dd92:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800dd96:	f880 2020 	strb.w	r2, [r0, #32]
 800dd9a:	6860      	ldr	r0, [r4, #4]
 800dd9c:	e769      	b.n	800dc72 <_rclc_take_new_data+0xd6>
 800dd9e:	3010      	adds	r0, #16
 800dda0:	aa04      	add	r2, sp, #16
 800dda2:	a90a      	add	r1, sp, #40	; 0x28
 800dda4:	f00a fc3c 	bl	8018620 <rcl_action_take_result_request>
 800dda8:	4605      	mov	r5, r0
 800ddaa:	2800      	cmp	r0, #0
 800ddac:	f47f af59 	bne.w	800dc62 <_rclc_take_new_data+0xc6>
 800ddb0:	a904      	add	r1, sp, #16
 800ddb2:	6860      	ldr	r0, [r4, #4]
 800ddb4:	f00a fe30 	bl	8018a18 <rclc_action_find_goal_handle_by_uuid>
 800ddb8:	4607      	mov	r7, r0
 800ddba:	b160      	cbz	r0, 800ddd6 <_rclc_take_new_data+0x23a>
 800ddbc:	ad0a      	add	r5, sp, #40	; 0x28
 800ddbe:	f100 0640 	add.w	r6, r0, #64	; 0x40
 800ddc2:	f04f 0c02 	mov.w	ip, #2
 800ddc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ddc8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ddca:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ddce:	e886 0003 	stmia.w	r6, {r0, r1}
 800ddd2:	f887 c008 	strb.w	ip, [r7, #8]
 800ddd6:	6860      	ldr	r0, [r4, #4]
 800ddd8:	2300      	movs	r3, #0
 800ddda:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 800ddde:	e6fa      	b.n	800dbd6 <_rclc_take_new_data+0x3a>
 800dde0:	f100 0230 	add.w	r2, r0, #48	; 0x30
 800dde4:	a90a      	add	r1, sp, #40	; 0x28
 800dde6:	3010      	adds	r0, #16
 800dde8:	f00a fa26 	bl	8018238 <rcl_action_take_cancel_response>
 800ddec:	4605      	mov	r5, r0
 800ddee:	2800      	cmp	r0, #0
 800ddf0:	f47f af37 	bne.w	800dc62 <_rclc_take_new_data+0xc6>
 800ddf4:	6860      	ldr	r0, [r4, #4]
 800ddf6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ddfa:	f00a fe5f 	bl	8018abc <rclc_action_find_handle_by_cancel_request_sequence_number>
 800ddfe:	4606      	mov	r6, r0
 800de00:	6860      	ldr	r0, [r4, #4]
 800de02:	2e00      	cmp	r6, #0
 800de04:	f43f af40 	beq.w	800dc88 <_rclc_take_new_data+0xec>
 800de08:	2701      	movs	r7, #1
 800de0a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800de0c:	84b7      	strh	r7, [r6, #36]	; 0x24
 800de0e:	2b00      	cmp	r3, #0
 800de10:	f43f af3a 	beq.w	800dc88 <_rclc_take_new_data+0xec>
 800de14:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800de16:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800de1a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800de1e:	f00a fdfb 	bl	8018a18 <rclc_action_find_goal_handle_by_uuid>
 800de22:	b138      	cbz	r0, 800de34 <_rclc_take_new_data+0x298>
 800de24:	6860      	ldr	r0, [r4, #4]
 800de26:	3501      	adds	r5, #1
 800de28:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 800de2c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800de2e:	42ab      	cmp	r3, r5
 800de30:	d8f0      	bhi.n	800de14 <_rclc_take_new_data+0x278>
 800de32:	e729      	b.n	800dc88 <_rclc_take_new_data+0xec>
 800de34:	6860      	ldr	r0, [r4, #4]
 800de36:	3501      	adds	r5, #1
 800de38:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800de3a:	42ab      	cmp	r3, r5
 800de3c:	d8ea      	bhi.n	800de14 <_rclc_take_new_data+0x278>
 800de3e:	e723      	b.n	800dc88 <_rclc_take_new_data+0xec>
 800de40:	ab06      	add	r3, sp, #24
 800de42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de44:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800de48:	2103      	movs	r1, #3
 800de4a:	6860      	ldr	r0, [r4, #4]
 800de4c:	e896 000c 	ldmia.w	r6, {r2, r3}
 800de50:	f00a feaa 	bl	8018ba8 <rclc_action_server_goal_cancel_reject>
 800de54:	e6c4      	b.n	800dbe0 <_rclc_take_new_data+0x44>
 800de56:	ab06      	add	r3, sp, #24
 800de58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de5a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800de5e:	2102      	movs	r1, #2
 800de60:	6860      	ldr	r0, [r4, #4]
 800de62:	e896 000c 	ldmia.w	r6, {r2, r3}
 800de66:	f00a fe9f 	bl	8018ba8 <rclc_action_server_goal_cancel_reject>
 800de6a:	e6b9      	b.n	800dbe0 <_rclc_take_new_data+0x44>
 800de6c:	6860      	ldr	r0, [r4, #4]
 800de6e:	e706      	b.n	800dc7e <_rclc_take_new_data+0xe2>
 800de70:	4631      	mov	r1, r6
 800de72:	6860      	ldr	r0, [r4, #4]
 800de74:	f00a fdba 	bl	80189ec <rclc_action_remove_used_goal_handle>
 800de78:	f000 febe 	bl	800ebf8 <rcutils_reset_error>
 800de7c:	e6b0      	b.n	800dbe0 <_rclc_take_new_data+0x44>
 800de7e:	2501      	movs	r5, #1
 800de80:	e6ae      	b.n	800dbe0 <_rclc_take_new_data+0x44>
 800de82:	bf00      	nop

0800de84 <_rclc_execute.part.0>:
 800de84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de86:	7803      	ldrb	r3, [r0, #0]
 800de88:	b085      	sub	sp, #20
 800de8a:	4604      	mov	r4, r0
 800de8c:	2b0a      	cmp	r3, #10
 800de8e:	f200 8139 	bhi.w	800e104 <_rclc_execute.part.0+0x280>
 800de92:	e8df f003 	tbb	[pc, r3]
 800de96:	4268      	.short	0x4268
 800de98:	06a75b4d 	.word	0x06a75b4d
 800de9c:	721d0606 	.word	0x721d0606
 800dea0:	62          	.byte	0x62
 800dea1:	00          	.byte	0x00
 800dea2:	2b06      	cmp	r3, #6
 800dea4:	f000 8126 	beq.w	800e0f4 <_rclc_execute.part.0+0x270>
 800dea8:	2b07      	cmp	r3, #7
 800deaa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800deac:	f040 811c 	bne.w	800e0e8 <_rclc_execute.part.0+0x264>
 800deb0:	f104 0510 	add.w	r5, r4, #16
 800deb4:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800deb8:	6880      	ldr	r0, [r0, #8]
 800deba:	4798      	blx	r3
 800debc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800debe:	4629      	mov	r1, r5
 800dec0:	6860      	ldr	r0, [r4, #4]
 800dec2:	f008 fcc1 	bl	8016848 <rcl_send_response>
 800dec6:	4604      	mov	r4, r0
 800dec8:	b378      	cbz	r0, 800df2a <_rclc_execute.part.0+0xa6>
 800deca:	f000 fe95 	bl	800ebf8 <rcutils_reset_error>
 800dece:	e02c      	b.n	800df2a <_rclc_execute.part.0+0xa6>
 800ded0:	6840      	ldr	r0, [r0, #4]
 800ded2:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	f000 808e 	beq.w	800dff8 <_rclc_execute.part.0+0x174>
 800dedc:	2600      	movs	r6, #0
 800dede:	2701      	movs	r7, #1
 800dee0:	e004      	b.n	800deec <_rclc_execute.part.0+0x68>
 800dee2:	f00a fd4d 	bl	8018980 <rclc_action_send_result_request>
 800dee6:	b998      	cbnz	r0, 800df10 <_rclc_execute.part.0+0x8c>
 800dee8:	722f      	strb	r7, [r5, #8]
 800deea:	6860      	ldr	r0, [r4, #4]
 800deec:	f00a fdf8 	bl	8018ae0 <rclc_action_find_first_handle_with_goal_response>
 800def0:	4605      	mov	r5, r0
 800def2:	2800      	cmp	r0, #0
 800def4:	d07f      	beq.n	800dff6 <_rclc_execute.part.0+0x172>
 800def6:	6863      	ldr	r3, [r4, #4]
 800def8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800defa:	699b      	ldr	r3, [r3, #24]
 800defc:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 800df00:	f885 6020 	strb.w	r6, [r5, #32]
 800df04:	4798      	blx	r3
 800df06:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800df0a:	4628      	mov	r0, r5
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d1e8      	bne.n	800dee2 <_rclc_execute.part.0+0x5e>
 800df10:	6860      	ldr	r0, [r4, #4]
 800df12:	4629      	mov	r1, r5
 800df14:	f00a fd6a 	bl	80189ec <rclc_action_remove_used_goal_handle>
 800df18:	e7e7      	b.n	800deea <_rclc_execute.part.0+0x66>
 800df1a:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800df1e:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 800df22:	b100      	cbz	r0, 800df26 <_rclc_execute.part.0+0xa2>
 800df24:	68a0      	ldr	r0, [r4, #8]
 800df26:	2400      	movs	r4, #0
 800df28:	4798      	blx	r3
 800df2a:	4620      	mov	r0, r4
 800df2c:	b005      	add	sp, #20
 800df2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df30:	6840      	ldr	r0, [r0, #4]
 800df32:	f009 f981 	bl	8017238 <rcl_timer_call>
 800df36:	f240 3321 	movw	r3, #801	; 0x321
 800df3a:	4604      	mov	r4, r0
 800df3c:	4298      	cmp	r0, r3
 800df3e:	d001      	beq.n	800df44 <_rclc_execute.part.0+0xc0>
 800df40:	2800      	cmp	r0, #0
 800df42:	d1c2      	bne.n	800deca <_rclc_execute.part.0+0x46>
 800df44:	2400      	movs	r4, #0
 800df46:	4620      	mov	r0, r4
 800df48:	b005      	add	sp, #20
 800df4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df4c:	2400      	movs	r4, #0
 800df4e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800df50:	6880      	ldr	r0, [r0, #8]
 800df52:	4798      	blx	r3
 800df54:	4620      	mov	r0, r4
 800df56:	b005      	add	sp, #20
 800df58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df5a:	2400      	movs	r4, #0
 800df5c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800df5e:	4798      	blx	r3
 800df60:	4620      	mov	r0, r4
 800df62:	b005      	add	sp, #20
 800df64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df66:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800df6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800df6c:	b100      	cbz	r0, 800df70 <_rclc_execute.part.0+0xec>
 800df6e:	68a0      	ldr	r0, [r4, #8]
 800df70:	2400      	movs	r4, #0
 800df72:	4798      	blx	r3
 800df74:	4620      	mov	r0, r4
 800df76:	b005      	add	sp, #20
 800df78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df7a:	6840      	ldr	r0, [r0, #4]
 800df7c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800df80:	bb3b      	cbnz	r3, 800dfd2 <_rclc_execute.part.0+0x14e>
 800df82:	f890 3020 	ldrb.w	r3, [r0, #32]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d07d      	beq.n	800e086 <_rclc_execute.part.0+0x202>
 800df8a:	f640 0634 	movw	r6, #2100	; 0x834
 800df8e:	2701      	movs	r7, #1
 800df90:	e007      	b.n	800dfa2 <_rclc_execute.part.0+0x11e>
 800df92:	4628      	mov	r0, r5
 800df94:	f00a fdbc 	bl	8018b10 <rclc_action_server_response_goal_request>
 800df98:	4629      	mov	r1, r5
 800df9a:	6860      	ldr	r0, [r4, #4]
 800df9c:	f00a fd26 	bl	80189ec <rclc_action_remove_used_goal_handle>
 800dfa0:	6860      	ldr	r0, [r4, #4]
 800dfa2:	2100      	movs	r1, #0
 800dfa4:	f00a fd4e 	bl	8018a44 <rclc_action_find_first_handle_by_status>
 800dfa8:	4605      	mov	r5, r0
 800dfaa:	2800      	cmp	r0, #0
 800dfac:	d068      	beq.n	800e080 <_rclc_execute.part.0+0x1fc>
 800dfae:	6863      	ldr	r3, [r4, #4]
 800dfb0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800dfb2:	699b      	ldr	r3, [r3, #24]
 800dfb4:	4798      	blx	r3
 800dfb6:	42b0      	cmp	r0, r6
 800dfb8:	f04f 0100 	mov.w	r1, #0
 800dfbc:	d1e9      	bne.n	800df92 <_rclc_execute.part.0+0x10e>
 800dfbe:	2101      	movs	r1, #1
 800dfc0:	4628      	mov	r0, r5
 800dfc2:	f00a fda5 	bl	8018b10 <rclc_action_server_response_goal_request>
 800dfc6:	722f      	strb	r7, [r5, #8]
 800dfc8:	e7ea      	b.n	800dfa0 <_rclc_execute.part.0+0x11c>
 800dfca:	6848      	ldr	r0, [r1, #4]
 800dfcc:	f00a fd0e 	bl	80189ec <rclc_action_remove_used_goal_handle>
 800dfd0:	6860      	ldr	r0, [r4, #4]
 800dfd2:	f00a fd43 	bl	8018a5c <rclc_action_find_first_terminated_handle>
 800dfd6:	4601      	mov	r1, r0
 800dfd8:	2800      	cmp	r0, #0
 800dfda:	d1f6      	bne.n	800dfca <_rclc_execute.part.0+0x146>
 800dfdc:	6860      	ldr	r0, [r4, #4]
 800dfde:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800dfe2:	e7ce      	b.n	800df82 <_rclc_execute.part.0+0xfe>
 800dfe4:	2400      	movs	r4, #0
 800dfe6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800dfe8:	f100 0110 	add.w	r1, r0, #16
 800dfec:	6880      	ldr	r0, [r0, #8]
 800dfee:	4798      	blx	r3
 800dff0:	4620      	mov	r0, r4
 800dff2:	b005      	add	sp, #20
 800dff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dff6:	6860      	ldr	r0, [r4, #4]
 800dff8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800dffc:	b18b      	cbz	r3, 800e022 <_rclc_execute.part.0+0x19e>
 800dffe:	68c5      	ldr	r5, [r0, #12]
 800e000:	b32d      	cbz	r5, 800e04e <_rclc_execute.part.0+0x1ca>
 800e002:	2600      	movs	r6, #0
 800e004:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800e008:	b143      	cbz	r3, 800e01c <_rclc_execute.part.0+0x198>
 800e00a:	69c3      	ldr	r3, [r0, #28]
 800e00c:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 800e010:	b123      	cbz	r3, 800e01c <_rclc_execute.part.0+0x198>
 800e012:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800e014:	4628      	mov	r0, r5
 800e016:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e018:	4798      	blx	r3
 800e01a:	6860      	ldr	r0, [r4, #4]
 800e01c:	682d      	ldr	r5, [r5, #0]
 800e01e:	2d00      	cmp	r5, #0
 800e020:	d1f0      	bne.n	800e004 <_rclc_execute.part.0+0x180>
 800e022:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800e026:	b193      	cbz	r3, 800e04e <_rclc_execute.part.0+0x1ca>
 800e028:	68c5      	ldr	r5, [r0, #12]
 800e02a:	b185      	cbz	r5, 800e04e <_rclc_execute.part.0+0x1ca>
 800e02c:	2600      	movs	r6, #0
 800e02e:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800e032:	b14b      	cbz	r3, 800e048 <_rclc_execute.part.0+0x1c4>
 800e034:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e036:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 800e03a:	b12b      	cbz	r3, 800e048 <_rclc_execute.part.0+0x1c4>
 800e03c:	4628      	mov	r0, r5
 800e03e:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 800e042:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e044:	4798      	blx	r3
 800e046:	6860      	ldr	r0, [r4, #4]
 800e048:	682d      	ldr	r5, [r5, #0]
 800e04a:	2d00      	cmp	r5, #0
 800e04c:	d1ef      	bne.n	800e02e <_rclc_execute.part.0+0x1aa>
 800e04e:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800e052:	2b00      	cmp	r3, #0
 800e054:	f43f af76 	beq.w	800df44 <_rclc_execute.part.0+0xc0>
 800e058:	2700      	movs	r7, #0
 800e05a:	e00b      	b.n	800e074 <_rclc_execute.part.0+0x1f0>
 800e05c:	6863      	ldr	r3, [r4, #4]
 800e05e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e060:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e062:	6a1e      	ldr	r6, [r3, #32]
 800e064:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 800e068:	47b0      	blx	r6
 800e06a:	6860      	ldr	r0, [r4, #4]
 800e06c:	4629      	mov	r1, r5
 800e06e:	f00a fcbd 	bl	80189ec <rclc_action_remove_used_goal_handle>
 800e072:	6860      	ldr	r0, [r4, #4]
 800e074:	f00a fd40 	bl	8018af8 <rclc_action_find_first_handle_with_result_response>
 800e078:	4605      	mov	r5, r0
 800e07a:	2800      	cmp	r0, #0
 800e07c:	d1ee      	bne.n	800e05c <_rclc_execute.part.0+0x1d8>
 800e07e:	e761      	b.n	800df44 <_rclc_execute.part.0+0xc0>
 800e080:	6860      	ldr	r0, [r4, #4]
 800e082:	f880 5020 	strb.w	r5, [r0, #32]
 800e086:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	f43f af5a 	beq.w	800df44 <_rclc_execute.part.0+0xc0>
 800e090:	68c5      	ldr	r5, [r0, #12]
 800e092:	b1b5      	cbz	r5, 800e0c2 <_rclc_execute.part.0+0x23e>
 800e094:	2602      	movs	r6, #2
 800e096:	e001      	b.n	800e09c <_rclc_execute.part.0+0x218>
 800e098:	682d      	ldr	r5, [r5, #0]
 800e09a:	b195      	cbz	r5, 800e0c2 <_rclc_execute.part.0+0x23e>
 800e09c:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800e0a0:	2b03      	cmp	r3, #3
 800e0a2:	d1f9      	bne.n	800e098 <_rclc_execute.part.0+0x214>
 800e0a4:	69c3      	ldr	r3, [r0, #28]
 800e0a6:	4628      	mov	r0, r5
 800e0a8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800e0aa:	4798      	blx	r3
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800e0b2:	4628      	mov	r0, r5
 800e0b4:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800e0b8:	b143      	cbz	r3, 800e0cc <_rclc_execute.part.0+0x248>
 800e0ba:	f00a fd49 	bl	8018b50 <rclc_action_server_goal_cancel_accept>
 800e0be:	6860      	ldr	r0, [r4, #4]
 800e0c0:	e7ea      	b.n	800e098 <_rclc_execute.part.0+0x214>
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	461c      	mov	r4, r3
 800e0c6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800e0ca:	e72e      	b.n	800df2a <_rclc_execute.part.0+0xa6>
 800e0cc:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800e0ce:	f105 0758 	add.w	r7, r5, #88	; 0x58
 800e0d2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e0d6:	2101      	movs	r1, #1
 800e0d8:	6860      	ldr	r0, [r4, #4]
 800e0da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e0de:	f00a fd63 	bl	8018ba8 <rclc_action_server_goal_cancel_reject>
 800e0e2:	722e      	strb	r6, [r5, #8]
 800e0e4:	6860      	ldr	r0, [r4, #4]
 800e0e6:	e7d7      	b.n	800e098 <_rclc_execute.part.0+0x214>
 800e0e8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800e0ea:	f104 0510 	add.w	r5, r4, #16
 800e0ee:	6880      	ldr	r0, [r0, #8]
 800e0f0:	4798      	blx	r3
 800e0f2:	e6e3      	b.n	800debc <_rclc_execute.part.0+0x38>
 800e0f4:	f100 0510 	add.w	r5, r0, #16
 800e0f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e0fa:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800e0fc:	4629      	mov	r1, r5
 800e0fe:	6880      	ldr	r0, [r0, #8]
 800e100:	4798      	blx	r3
 800e102:	e6db      	b.n	800debc <_rclc_execute.part.0+0x38>
 800e104:	2401      	movs	r4, #1
 800e106:	e710      	b.n	800df2a <_rclc_execute.part.0+0xa6>

0800e108 <rclc_executor_trigger_any>:
 800e108:	2800      	cmp	r0, #0
 800e10a:	d03d      	beq.n	800e188 <rclc_executor_trigger_any+0x80>
 800e10c:	2900      	cmp	r1, #0
 800e10e:	d03c      	beq.n	800e18a <rclc_executor_trigger_any+0x82>
 800e110:	4603      	mov	r3, r0
 800e112:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800e116:	2200      	movs	r2, #0
 800e118:	2800      	cmp	r0, #0
 800e11a:	d035      	beq.n	800e188 <rclc_executor_trigger_any+0x80>
 800e11c:	b430      	push	{r4, r5}
 800e11e:	f893 c000 	ldrb.w	ip, [r3]
 800e122:	f1bc 0f08 	cmp.w	ip, #8
 800e126:	d11d      	bne.n	800e164 <rclc_executor_trigger_any+0x5c>
 800e128:	685c      	ldr	r4, [r3, #4]
 800e12a:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800e12c:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800e130:	d105      	bne.n	800e13e <rclc_executor_trigger_any+0x36>
 800e132:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800e136:	b910      	cbnz	r0, 800e13e <rclc_executor_trigger_any+0x36>
 800e138:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 800e13c:	b128      	cbz	r0, 800e14a <rclc_executor_trigger_any+0x42>
 800e13e:	bc30      	pop	{r4, r5}
 800e140:	4770      	bx	lr
 800e142:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800e146:	2800      	cmp	r0, #0
 800e148:	d1f9      	bne.n	800e13e <rclc_executor_trigger_any+0x36>
 800e14a:	3201      	adds	r2, #1
 800e14c:	3340      	adds	r3, #64	; 0x40
 800e14e:	4291      	cmp	r1, r2
 800e150:	d017      	beq.n	800e182 <rclc_executor_trigger_any+0x7a>
 800e152:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800e156:	2800      	cmp	r0, #0
 800e158:	d0f1      	beq.n	800e13e <rclc_executor_trigger_any+0x36>
 800e15a:	f893 c000 	ldrb.w	ip, [r3]
 800e15e:	f1bc 0f08 	cmp.w	ip, #8
 800e162:	d0e1      	beq.n	800e128 <rclc_executor_trigger_any+0x20>
 800e164:	f1bc 0f09 	cmp.w	ip, #9
 800e168:	d1eb      	bne.n	800e142 <rclc_executor_trigger_any+0x3a>
 800e16a:	685c      	ldr	r4, [r3, #4]
 800e16c:	6a25      	ldr	r5, [r4, #32]
 800e16e:	2d00      	cmp	r5, #0
 800e170:	d1e5      	bne.n	800e13e <rclc_executor_trigger_any+0x36>
 800e172:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800e176:	2800      	cmp	r0, #0
 800e178:	d1e1      	bne.n	800e13e <rclc_executor_trigger_any+0x36>
 800e17a:	3201      	adds	r2, #1
 800e17c:	3340      	adds	r3, #64	; 0x40
 800e17e:	4291      	cmp	r1, r2
 800e180:	d1e7      	bne.n	800e152 <rclc_executor_trigger_any+0x4a>
 800e182:	2000      	movs	r0, #0
 800e184:	bc30      	pop	{r4, r5}
 800e186:	4770      	bx	lr
 800e188:	4770      	bx	lr
 800e18a:	4608      	mov	r0, r1
 800e18c:	4770      	bx	lr
 800e18e:	bf00      	nop

0800e190 <rclc_executor_get_zero_initialized_executor>:
 800e190:	b510      	push	{r4, lr}
 800e192:	4604      	mov	r4, r0
 800e194:	2290      	movs	r2, #144	; 0x90
 800e196:	4902      	ldr	r1, [pc, #8]	; (800e1a0 <rclc_executor_get_zero_initialized_executor+0x10>)
 800e198:	f00f fded 	bl	801dd76 <memcpy>
 800e19c:	4620      	mov	r0, r4
 800e19e:	bd10      	pop	{r4, pc}
 800e1a0:	0801f9d8 	.word	0x0801f9d8
 800e1a4:	00000000 	.word	0x00000000

0800e1a8 <rclc_executor_init>:
 800e1a8:	2900      	cmp	r1, #0
 800e1aa:	d06a      	beq.n	800e282 <rclc_executor_init+0xda>
 800e1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1b0:	4605      	mov	r5, r0
 800e1b2:	b0b2      	sub	sp, #200	; 0xc8
 800e1b4:	2800      	cmp	r0, #0
 800e1b6:	d05c      	beq.n	800e272 <rclc_executor_init+0xca>
 800e1b8:	4616      	mov	r6, r2
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	4688      	mov	r8, r1
 800e1be:	461f      	mov	r7, r3
 800e1c0:	f000 fcf6 	bl	800ebb0 <rcutils_allocator_is_valid>
 800e1c4:	2e00      	cmp	r6, #0
 800e1c6:	d054      	beq.n	800e272 <rclc_executor_init+0xca>
 800e1c8:	f080 0401 	eor.w	r4, r0, #1
 800e1cc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800e1d0:	d14f      	bne.n	800e272 <rclc_executor_init+0xca>
 800e1d2:	2290      	movs	r2, #144	; 0x90
 800e1d4:	4930      	ldr	r1, [pc, #192]	; (800e298 <rclc_executor_init+0xf0>)
 800e1d6:	a80e      	add	r0, sp, #56	; 0x38
 800e1d8:	f00f fdcd 	bl	801dd76 <memcpy>
 800e1dc:	a90e      	add	r1, sp, #56	; 0x38
 800e1de:	2290      	movs	r2, #144	; 0x90
 800e1e0:	4628      	mov	r0, r5
 800e1e2:	f00f fdc8 	bl	801dd76 <memcpy>
 800e1e6:	4668      	mov	r0, sp
 800e1e8:	f8c5 8004 	str.w	r8, [r5, #4]
 800e1ec:	60ee      	str	r6, [r5, #12]
 800e1ee:	f009 f999 	bl	8017524 <rcl_get_zero_initialized_wait_set>
 800e1f2:	46ec      	mov	ip, sp
 800e1f4:	f105 0e18 	add.w	lr, r5, #24
 800e1f8:	f8d7 8000 	ldr.w	r8, [r7]
 800e1fc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e200:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e204:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e208:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e20c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e210:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800e290 <rclc_executor_init+0xe8>
 800e214:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e218:	f8dc 3000 	ldr.w	r3, [ip]
 800e21c:	01b0      	lsls	r0, r6, #6
 800e21e:	6939      	ldr	r1, [r7, #16]
 800e220:	f8ce 3000 	str.w	r3, [lr]
 800e224:	616f      	str	r7, [r5, #20]
 800e226:	ed85 7b1c 	vstr	d7, [r5, #112]	; 0x70
 800e22a:	47c0      	blx	r8
 800e22c:	60a8      	str	r0, [r5, #8]
 800e22e:	b908      	cbnz	r0, 800e234 <rclc_executor_init+0x8c>
 800e230:	e029      	b.n	800e286 <rclc_executor_init+0xde>
 800e232:	68a8      	ldr	r0, [r5, #8]
 800e234:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800e238:	3401      	adds	r4, #1
 800e23a:	4631      	mov	r1, r6
 800e23c:	f000 faf4 	bl	800e828 <rclc_executor_handle_init>
 800e240:	42a6      	cmp	r6, r4
 800e242:	d8f6      	bhi.n	800e232 <rclc_executor_init+0x8a>
 800e244:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 800e248:	f000 fae4 	bl	800e814 <rclc_executor_handle_counters_zero_init>
 800e24c:	4a13      	ldr	r2, [pc, #76]	; (800e29c <rclc_executor_init+0xf4>)
 800e24e:	2300      	movs	r3, #0
 800e250:	68a8      	ldr	r0, [r5, #8]
 800e252:	e9c5 2320 	strd	r2, r3, [r5, #128]	; 0x80
 800e256:	b168      	cbz	r0, 800e274 <rclc_executor_init+0xcc>
 800e258:	68eb      	ldr	r3, [r5, #12]
 800e25a:	b173      	cbz	r3, 800e27a <rclc_executor_init+0xd2>
 800e25c:	696a      	ldr	r2, [r5, #20]
 800e25e:	fab2 f382 	clz	r3, r2
 800e262:	095b      	lsrs	r3, r3, #5
 800e264:	b14a      	cbz	r2, 800e27a <rclc_executor_init+0xd2>
 800e266:	4618      	mov	r0, r3
 800e268:	f885 3088 	strb.w	r3, [r5, #136]	; 0x88
 800e26c:	b032      	add	sp, #200	; 0xc8
 800e26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e272:	200b      	movs	r0, #11
 800e274:	b032      	add	sp, #200	; 0xc8
 800e276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e27a:	2000      	movs	r0, #0
 800e27c:	b032      	add	sp, #200	; 0xc8
 800e27e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e282:	200b      	movs	r0, #11
 800e284:	4770      	bx	lr
 800e286:	200a      	movs	r0, #10
 800e288:	e7f4      	b.n	800e274 <rclc_executor_init+0xcc>
 800e28a:	bf00      	nop
 800e28c:	f3af 8000 	nop.w
 800e290:	3b9aca00 	.word	0x3b9aca00
 800e294:	00000000 	.word	0x00000000
 800e298:	0801f9d8 	.word	0x0801f9d8
 800e29c:	0800e109 	.word	0x0800e109

0800e2a0 <rclc_executor_add_subscription>:
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	bf18      	it	ne
 800e2a4:	2a00      	cmpne	r2, #0
 800e2a6:	b570      	push	{r4, r5, r6, lr}
 800e2a8:	4604      	mov	r4, r0
 800e2aa:	bf0c      	ite	eq
 800e2ac:	2001      	moveq	r0, #1
 800e2ae:	2000      	movne	r0, #0
 800e2b0:	f89d c010 	ldrb.w	ip, [sp, #16]
 800e2b4:	2900      	cmp	r1, #0
 800e2b6:	bf08      	it	eq
 800e2b8:	f040 0001 	orreq.w	r0, r0, #1
 800e2bc:	bb28      	cbnz	r0, 800e30a <rclc_executor_add_subscription+0x6a>
 800e2be:	fab4 f584 	clz	r5, r4
 800e2c2:	096d      	lsrs	r5, r5, #5
 800e2c4:	b30c      	cbz	r4, 800e30a <rclc_executor_add_subscription+0x6a>
 800e2c6:	e9d4 0603 	ldrd	r0, r6, [r4, #12]
 800e2ca:	4286      	cmp	r6, r0
 800e2cc:	d301      	bcc.n	800e2d2 <rclc_executor_add_subscription+0x32>
 800e2ce:	2001      	movs	r0, #1
 800e2d0:	bd70      	pop	{r4, r5, r6, pc}
 800e2d2:	68a0      	ldr	r0, [r4, #8]
 800e2d4:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 800e2d8:	f800 500e 	strb.w	r5, [r0, lr]
 800e2dc:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800e2e0:	3601      	adds	r6, #1
 800e2e2:	6303      	str	r3, [r0, #48]	; 0x30
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	62c5      	str	r5, [r0, #44]	; 0x2c
 800e2e8:	f104 0518 	add.w	r5, r4, #24
 800e2ec:	f880 c001 	strb.w	ip, [r0, #1]
 800e2f0:	8703      	strh	r3, [r0, #56]	; 0x38
 800e2f2:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800e2f6:	4628      	mov	r0, r5
 800e2f8:	6126      	str	r6, [r4, #16]
 800e2fa:	f009 f927 	bl	801754c <rcl_wait_set_is_valid>
 800e2fe:	b930      	cbnz	r0, 800e30e <rclc_executor_add_subscription+0x6e>
 800e300:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800e302:	2000      	movs	r0, #0
 800e304:	3301      	adds	r3, #1
 800e306:	64e3      	str	r3, [r4, #76]	; 0x4c
 800e308:	bd70      	pop	{r4, r5, r6, pc}
 800e30a:	200b      	movs	r0, #11
 800e30c:	bd70      	pop	{r4, r5, r6, pc}
 800e30e:	4628      	mov	r0, r5
 800e310:	f009 f922 	bl	8017558 <rcl_wait_set_fini>
 800e314:	2800      	cmp	r0, #0
 800e316:	d0f3      	beq.n	800e300 <rclc_executor_add_subscription+0x60>
 800e318:	bd70      	pop	{r4, r5, r6, pc}
 800e31a:	bf00      	nop

0800e31c <rclc_executor_add_timer>:
 800e31c:	b351      	cbz	r1, 800e374 <rclc_executor_add_timer+0x58>
 800e31e:	fab0 f280 	clz	r2, r0
 800e322:	b570      	push	{r4, r5, r6, lr}
 800e324:	0952      	lsrs	r2, r2, #5
 800e326:	4604      	mov	r4, r0
 800e328:	b1e0      	cbz	r0, 800e364 <rclc_executor_add_timer+0x48>
 800e32a:	e9d0 0303 	ldrd	r0, r3, [r0, #12]
 800e32e:	4283      	cmp	r3, r0
 800e330:	d301      	bcc.n	800e336 <rclc_executor_add_timer+0x1a>
 800e332:	2001      	movs	r0, #1
 800e334:	bd70      	pop	{r4, r5, r6, pc}
 800e336:	68a0      	ldr	r0, [r4, #8]
 800e338:	019d      	lsls	r5, r3, #6
 800e33a:	1c5e      	adds	r6, r3, #1
 800e33c:	eb00 1383 	add.w	r3, r0, r3, lsl #6
 800e340:	6059      	str	r1, [r3, #4]
 800e342:	2102      	movs	r1, #2
 800e344:	5341      	strh	r1, [r0, r5]
 800e346:	2101      	movs	r1, #1
 800e348:	f104 0518 	add.w	r5, r4, #24
 800e34c:	62da      	str	r2, [r3, #44]	; 0x2c
 800e34e:	8719      	strh	r1, [r3, #56]	; 0x38
 800e350:	4628      	mov	r0, r5
 800e352:	6126      	str	r6, [r4, #16]
 800e354:	f009 f8fa 	bl	801754c <rcl_wait_set_is_valid>
 800e358:	b930      	cbnz	r0, 800e368 <rclc_executor_add_timer+0x4c>
 800e35a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800e35c:	2000      	movs	r0, #0
 800e35e:	3301      	adds	r3, #1
 800e360:	6523      	str	r3, [r4, #80]	; 0x50
 800e362:	bd70      	pop	{r4, r5, r6, pc}
 800e364:	200b      	movs	r0, #11
 800e366:	bd70      	pop	{r4, r5, r6, pc}
 800e368:	4628      	mov	r0, r5
 800e36a:	f009 f8f5 	bl	8017558 <rcl_wait_set_fini>
 800e36e:	2800      	cmp	r0, #0
 800e370:	d0f3      	beq.n	800e35a <rclc_executor_add_timer+0x3e>
 800e372:	bd70      	pop	{r4, r5, r6, pc}
 800e374:	200b      	movs	r0, #11
 800e376:	4770      	bx	lr

0800e378 <rclc_executor_add_service>:
 800e378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e37a:	9d06      	ldr	r5, [sp, #24]
 800e37c:	4604      	mov	r4, r0
 800e37e:	2b00      	cmp	r3, #0
 800e380:	bf18      	it	ne
 800e382:	2d00      	cmpne	r5, #0
 800e384:	bf0c      	ite	eq
 800e386:	2001      	moveq	r0, #1
 800e388:	2000      	movne	r0, #0
 800e38a:	2a00      	cmp	r2, #0
 800e38c:	bf08      	it	eq
 800e38e:	f040 0001 	orreq.w	r0, r0, #1
 800e392:	2900      	cmp	r1, #0
 800e394:	bf08      	it	eq
 800e396:	f040 0001 	orreq.w	r0, r0, #1
 800e39a:	bb40      	cbnz	r0, 800e3ee <rclc_executor_add_service+0x76>
 800e39c:	fab4 f684 	clz	r6, r4
 800e3a0:	0976      	lsrs	r6, r6, #5
 800e3a2:	b324      	cbz	r4, 800e3ee <rclc_executor_add_service+0x76>
 800e3a4:	e9d4 7003 	ldrd	r7, r0, [r4, #12]
 800e3a8:	42b8      	cmp	r0, r7
 800e3aa:	d301      	bcc.n	800e3b0 <rclc_executor_add_service+0x38>
 800e3ac:	2001      	movs	r0, #1
 800e3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3b0:	68a7      	ldr	r7, [r4, #8]
 800e3b2:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800e3b6:	f100 0c01 	add.w	ip, r0, #1
 800e3ba:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 800e3be:	6283      	str	r3, [r0, #40]	; 0x28
 800e3c0:	2305      	movs	r3, #5
 800e3c2:	6305      	str	r5, [r0, #48]	; 0x30
 800e3c4:	f104 0518 	add.w	r5, r4, #24
 800e3c8:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800e3cc:	f827 300e 	strh.w	r3, [r7, lr]
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	62c6      	str	r6, [r0, #44]	; 0x2c
 800e3d4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800e3d8:	4628      	mov	r0, r5
 800e3da:	f8c4 c010 	str.w	ip, [r4, #16]
 800e3de:	f009 f8b5 	bl	801754c <rcl_wait_set_is_valid>
 800e3e2:	b930      	cbnz	r0, 800e3f2 <rclc_executor_add_service+0x7a>
 800e3e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e3e6:	2000      	movs	r0, #0
 800e3e8:	3301      	adds	r3, #1
 800e3ea:	65a3      	str	r3, [r4, #88]	; 0x58
 800e3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3ee:	200b      	movs	r0, #11
 800e3f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3f2:	4628      	mov	r0, r5
 800e3f4:	f009 f8b0 	bl	8017558 <rcl_wait_set_fini>
 800e3f8:	2800      	cmp	r0, #0
 800e3fa:	d0f3      	beq.n	800e3e4 <rclc_executor_add_service+0x6c>
 800e3fc:	e7d7      	b.n	800e3ae <rclc_executor_add_service+0x36>
 800e3fe:	bf00      	nop

0800e400 <rclc_executor_prepare>:
 800e400:	2800      	cmp	r0, #0
 800e402:	d044      	beq.n	800e48e <rclc_executor_prepare+0x8e>
 800e404:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e406:	f100 0518 	add.w	r5, r0, #24
 800e40a:	b09b      	sub	sp, #108	; 0x6c
 800e40c:	4604      	mov	r4, r0
 800e40e:	4628      	mov	r0, r5
 800e410:	f009 f89c 	bl	801754c <rcl_wait_set_is_valid>
 800e414:	b110      	cbz	r0, 800e41c <rclc_executor_prepare+0x1c>
 800e416:	2000      	movs	r0, #0
 800e418:	b01b      	add	sp, #108	; 0x6c
 800e41a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e41c:	4628      	mov	r0, r5
 800e41e:	f009 f89b 	bl	8017558 <rcl_wait_set_fini>
 800e422:	2800      	cmp	r0, #0
 800e424:	d130      	bne.n	800e488 <rclc_executor_prepare+0x88>
 800e426:	a80c      	add	r0, sp, #48	; 0x30
 800e428:	ae04      	add	r6, sp, #16
 800e42a:	f009 f87b 	bl	8017524 <rcl_get_zero_initialized_wait_set>
 800e42e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800e432:	46ae      	mov	lr, r5
 800e434:	6967      	ldr	r7, [r4, #20]
 800e436:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e43a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e43e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e442:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e446:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e44a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e44e:	f8dc 3000 	ldr.w	r3, [ip]
 800e452:	f8ce 3000 	str.w	r3, [lr]
 800e456:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e458:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	4628      	mov	r0, r5
 800e45e:	6862      	ldr	r2, [r4, #4]
 800e460:	6033      	str	r3, [r6, #0]
 800e462:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800e464:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e466:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800e46a:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800e46e:	e9cd 2100 	strd	r2, r1, [sp]
 800e472:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e474:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800e476:	f009 fb6f 	bl	8017b58 <rcl_wait_set_init>
 800e47a:	2800      	cmp	r0, #0
 800e47c:	d0cc      	beq.n	800e418 <rclc_executor_prepare+0x18>
 800e47e:	900b      	str	r0, [sp, #44]	; 0x2c
 800e480:	f000 fbba 	bl	800ebf8 <rcutils_reset_error>
 800e484:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e486:	e7c7      	b.n	800e418 <rclc_executor_prepare+0x18>
 800e488:	f000 fbb6 	bl	800ebf8 <rcutils_reset_error>
 800e48c:	e7cb      	b.n	800e426 <rclc_executor_prepare+0x26>
 800e48e:	200b      	movs	r0, #11
 800e490:	4770      	bx	lr
 800e492:	bf00      	nop

0800e494 <rclc_executor_spin_some.part.0>:
 800e494:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e498:	4605      	mov	r5, r0
 800e49a:	4691      	mov	r9, r2
 800e49c:	4698      	mov	r8, r3
 800e49e:	f7ff ffaf 	bl	800e400 <rclc_executor_prepare>
 800e4a2:	f105 0618 	add.w	r6, r5, #24
 800e4a6:	4630      	mov	r0, r6
 800e4a8:	f009 f922 	bl	80176f0 <rcl_wait_set_clear>
 800e4ac:	4607      	mov	r7, r0
 800e4ae:	2800      	cmp	r0, #0
 800e4b0:	f040 80a8 	bne.w	800e604 <rclc_executor_spin_some.part.0+0x170>
 800e4b4:	68eb      	ldr	r3, [r5, #12]
 800e4b6:	b30b      	cbz	r3, 800e4fc <rclc_executor_spin_some.part.0+0x68>
 800e4b8:	4604      	mov	r4, r0
 800e4ba:	68a9      	ldr	r1, [r5, #8]
 800e4bc:	01a2      	lsls	r2, r4, #6
 800e4be:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800e4c2:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 800e4c6:	b1cb      	cbz	r3, 800e4fc <rclc_executor_spin_some.part.0+0x68>
 800e4c8:	5c8b      	ldrb	r3, [r1, r2]
 800e4ca:	2b0a      	cmp	r3, #10
 800e4cc:	f200 80de 	bhi.w	800e68c <rclc_executor_spin_some.part.0+0x1f8>
 800e4d0:	e8df f003 	tbb	[pc, r3]
 800e4d4:	8da99d9d 	.word	0x8da99d9d
 800e4d8:	0606068d 	.word	0x0606068d
 800e4dc:	c1ce      	.short	0xc1ce
 800e4de:	b5          	.byte	0xb5
 800e4df:	00          	.byte	0x00
 800e4e0:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e4e4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e4e8:	4630      	mov	r0, r6
 800e4ea:	f009 fc51 	bl	8017d90 <rcl_wait_set_add_service>
 800e4ee:	2800      	cmp	r0, #0
 800e4f0:	f040 8087 	bne.w	800e602 <rclc_executor_spin_some.part.0+0x16e>
 800e4f4:	3401      	adds	r4, #1
 800e4f6:	68eb      	ldr	r3, [r5, #12]
 800e4f8:	429c      	cmp	r4, r3
 800e4fa:	d3de      	bcc.n	800e4ba <rclc_executor_spin_some.part.0+0x26>
 800e4fc:	4643      	mov	r3, r8
 800e4fe:	464a      	mov	r2, r9
 800e500:	4630      	mov	r0, r6
 800e502:	f009 fc71 	bl	8017de8 <rcl_wait>
 800e506:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	f000 80c6 	beq.w	800e69c <rclc_executor_spin_some.part.0+0x208>
 800e510:	2b01      	cmp	r3, #1
 800e512:	f040 80bb 	bne.w	800e68c <rclc_executor_spin_some.part.0+0x1f8>
 800e516:	68eb      	ldr	r3, [r5, #12]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	f000 8159 	beq.w	800e7d0 <rclc_executor_spin_some.part.0+0x33c>
 800e51e:	2400      	movs	r4, #0
 800e520:	f240 1991 	movw	r9, #401	; 0x191
 800e524:	46a0      	mov	r8, r4
 800e526:	e00a      	b.n	800e53e <rclc_executor_spin_some.part.0+0xaa>
 800e528:	f7ff faea 	bl	800db00 <_rclc_check_for_new_data>
 800e52c:	4604      	mov	r4, r0
 800e52e:	b110      	cbz	r0, 800e536 <rclc_executor_spin_some.part.0+0xa2>
 800e530:	4548      	cmp	r0, r9
 800e532:	f040 80b1 	bne.w	800e698 <rclc_executor_spin_some.part.0+0x204>
 800e536:	68eb      	ldr	r3, [r5, #12]
 800e538:	4598      	cmp	r8, r3
 800e53a:	f080 8126 	bcs.w	800e78a <rclc_executor_spin_some.part.0+0x2f6>
 800e53e:	68aa      	ldr	r2, [r5, #8]
 800e540:	4631      	mov	r1, r6
 800e542:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800e546:	f108 0801 	add.w	r8, r8, #1
 800e54a:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800e54e:	f1bc 0f00 	cmp.w	ip, #0
 800e552:	d1e9      	bne.n	800e528 <rclc_executor_spin_some.part.0+0x94>
 800e554:	4619      	mov	r1, r3
 800e556:	4610      	mov	r0, r2
 800e558:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 800e55c:	4798      	blx	r3
 800e55e:	2800      	cmp	r0, #0
 800e560:	f000 809a 	beq.w	800e698 <rclc_executor_spin_some.part.0+0x204>
 800e564:	68eb      	ldr	r3, [r5, #12]
 800e566:	2b00      	cmp	r3, #0
 800e568:	f000 8096 	beq.w	800e698 <rclc_executor_spin_some.part.0+0x204>
 800e56c:	f04f 0800 	mov.w	r8, #0
 800e570:	f240 1991 	movw	r9, #401	; 0x191
 800e574:	e009      	b.n	800e58a <rclc_executor_spin_some.part.0+0xf6>
 800e576:	f7ff fb11 	bl	800db9c <_rclc_take_new_data>
 800e57a:	4604      	mov	r4, r0
 800e57c:	b110      	cbz	r0, 800e584 <rclc_executor_spin_some.part.0+0xf0>
 800e57e:	4548      	cmp	r0, r9
 800e580:	f040 808a 	bne.w	800e698 <rclc_executor_spin_some.part.0+0x204>
 800e584:	68eb      	ldr	r3, [r5, #12]
 800e586:	4598      	cmp	r8, r3
 800e588:	d209      	bcs.n	800e59e <rclc_executor_spin_some.part.0+0x10a>
 800e58a:	68a8      	ldr	r0, [r5, #8]
 800e58c:	4631      	mov	r1, r6
 800e58e:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800e592:	f108 0801 	add.w	r8, r8, #1
 800e596:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800e59a:	2a00      	cmp	r2, #0
 800e59c:	d1eb      	bne.n	800e576 <rclc_executor_spin_some.part.0+0xe2>
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d07a      	beq.n	800e698 <rclc_executor_spin_some.part.0+0x204>
 800e5a2:	2600      	movs	r6, #0
 800e5a4:	e00e      	b.n	800e5c4 <rclc_executor_spin_some.part.0+0x130>
 800e5a6:	f812 200c 	ldrb.w	r2, [r2, ip]
 800e5aa:	2a08      	cmp	r2, #8
 800e5ac:	f000 80fc 	beq.w	800e7a8 <rclc_executor_spin_some.part.0+0x314>
 800e5b0:	2a09      	cmp	r2, #9
 800e5b2:	f000 80ee 	beq.w	800e792 <rclc_executor_spin_some.part.0+0x2fe>
 800e5b6:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800e5ba:	b98a      	cbnz	r2, 800e5e0 <rclc_executor_spin_some.part.0+0x14c>
 800e5bc:	3601      	adds	r6, #1
 800e5be:	429e      	cmp	r6, r3
 800e5c0:	d267      	bcs.n	800e692 <rclc_executor_spin_some.part.0+0x1fe>
 800e5c2:	2400      	movs	r4, #0
 800e5c4:	68aa      	ldr	r2, [r5, #8]
 800e5c6:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800e5ca:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800e5ce:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 800e5d2:	2900      	cmp	r1, #0
 800e5d4:	d060      	beq.n	800e698 <rclc_executor_spin_some.part.0+0x204>
 800e5d6:	7841      	ldrb	r1, [r0, #1]
 800e5d8:	2900      	cmp	r1, #0
 800e5da:	d0e4      	beq.n	800e5a6 <rclc_executor_spin_some.part.0+0x112>
 800e5dc:	2901      	cmp	r1, #1
 800e5de:	d1ed      	bne.n	800e5bc <rclc_executor_spin_some.part.0+0x128>
 800e5e0:	f7ff fc50 	bl	800de84 <_rclc_execute.part.0>
 800e5e4:	2800      	cmp	r0, #0
 800e5e6:	f040 80b5 	bne.w	800e754 <rclc_executor_spin_some.part.0+0x2c0>
 800e5ea:	68eb      	ldr	r3, [r5, #12]
 800e5ec:	e7e6      	b.n	800e5bc <rclc_executor_spin_some.part.0+0x128>
 800e5ee:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e5f2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e5f6:	4630      	mov	r0, r6
 800e5f8:	f009 fb9e 	bl	8017d38 <rcl_wait_set_add_client>
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	f43f af79 	beq.w	800e4f4 <rclc_executor_spin_some.part.0+0x60>
 800e602:	4607      	mov	r7, r0
 800e604:	f000 faf8 	bl	800ebf8 <rcutils_reset_error>
 800e608:	4638      	mov	r0, r7
 800e60a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e60e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e612:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e616:	4630      	mov	r0, r6
 800e618:	f009 f83e 	bl	8017698 <rcl_wait_set_add_subscription>
 800e61c:	2800      	cmp	r0, #0
 800e61e:	f43f af69 	beq.w	800e4f4 <rclc_executor_spin_some.part.0+0x60>
 800e622:	4607      	mov	r7, r0
 800e624:	e7ee      	b.n	800e604 <rclc_executor_spin_some.part.0+0x170>
 800e626:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e62a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e62e:	4630      	mov	r0, r6
 800e630:	f009 fb52 	bl	8017cd8 <rcl_wait_set_add_timer>
 800e634:	2800      	cmp	r0, #0
 800e636:	f43f af5d 	beq.w	800e4f4 <rclc_executor_spin_some.part.0+0x60>
 800e63a:	4607      	mov	r7, r0
 800e63c:	e7e2      	b.n	800e604 <rclc_executor_spin_some.part.0+0x170>
 800e63e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e642:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e646:	4630      	mov	r0, r6
 800e648:	f009 fb1a 	bl	8017c80 <rcl_wait_set_add_guard_condition>
 800e64c:	2800      	cmp	r0, #0
 800e64e:	f43f af51 	beq.w	800e4f4 <rclc_executor_spin_some.part.0+0x60>
 800e652:	4607      	mov	r7, r0
 800e654:	e7d6      	b.n	800e604 <rclc_executor_spin_some.part.0+0x170>
 800e656:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e65a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e65e:	4630      	mov	r0, r6
 800e660:	3110      	adds	r1, #16
 800e662:	f00a f895 	bl	8018790 <rcl_action_wait_set_add_action_server>
 800e666:	2800      	cmp	r0, #0
 800e668:	f43f af44 	beq.w	800e4f4 <rclc_executor_spin_some.part.0+0x60>
 800e66c:	4607      	mov	r7, r0
 800e66e:	e7c9      	b.n	800e604 <rclc_executor_spin_some.part.0+0x170>
 800e670:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800e674:	2300      	movs	r3, #0
 800e676:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800e67a:	4630      	mov	r0, r6
 800e67c:	3110      	adds	r1, #16
 800e67e:	f009 fe5f 	bl	8018340 <rcl_action_wait_set_add_action_client>
 800e682:	2800      	cmp	r0, #0
 800e684:	f43f af36 	beq.w	800e4f4 <rclc_executor_spin_some.part.0+0x60>
 800e688:	4607      	mov	r7, r0
 800e68a:	e7bb      	b.n	800e604 <rclc_executor_spin_some.part.0+0x170>
 800e68c:	2701      	movs	r7, #1
 800e68e:	f000 fab3 	bl	800ebf8 <rcutils_reset_error>
 800e692:	4638      	mov	r0, r7
 800e694:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e698:	4627      	mov	r7, r4
 800e69a:	e7fa      	b.n	800e692 <rclc_executor_spin_some.part.0+0x1fe>
 800e69c:	68eb      	ldr	r3, [r5, #12]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	f000 8093 	beq.w	800e7ca <rclc_executor_spin_some.part.0+0x336>
 800e6a4:	2400      	movs	r4, #0
 800e6a6:	f240 1991 	movw	r9, #401	; 0x191
 800e6aa:	46a0      	mov	r8, r4
 800e6ac:	e008      	b.n	800e6c0 <rclc_executor_spin_some.part.0+0x22c>
 800e6ae:	f7ff fa27 	bl	800db00 <_rclc_check_for_new_data>
 800e6b2:	4604      	mov	r4, r0
 800e6b4:	b108      	cbz	r0, 800e6ba <rclc_executor_spin_some.part.0+0x226>
 800e6b6:	4548      	cmp	r0, r9
 800e6b8:	d1ee      	bne.n	800e698 <rclc_executor_spin_some.part.0+0x204>
 800e6ba:	68eb      	ldr	r3, [r5, #12]
 800e6bc:	4598      	cmp	r8, r3
 800e6be:	d266      	bcs.n	800e78e <rclc_executor_spin_some.part.0+0x2fa>
 800e6c0:	68aa      	ldr	r2, [r5, #8]
 800e6c2:	4631      	mov	r1, r6
 800e6c4:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800e6c8:	f108 0801 	add.w	r8, r8, #1
 800e6cc:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800e6d0:	f1bc 0f00 	cmp.w	ip, #0
 800e6d4:	d1eb      	bne.n	800e6ae <rclc_executor_spin_some.part.0+0x21a>
 800e6d6:	4619      	mov	r1, r3
 800e6d8:	4610      	mov	r0, r2
 800e6da:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 800e6de:	4798      	blx	r3
 800e6e0:	2800      	cmp	r0, #0
 800e6e2:	d0d9      	beq.n	800e698 <rclc_executor_spin_some.part.0+0x204>
 800e6e4:	68eb      	ldr	r3, [r5, #12]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d0d6      	beq.n	800e698 <rclc_executor_spin_some.part.0+0x204>
 800e6ea:	f04f 0a00 	mov.w	sl, #0
 800e6ee:	f240 1891 	movw	r8, #401	; 0x191
 800e6f2:	f240 2959 	movw	r9, #601	; 0x259
 800e6f6:	e00e      	b.n	800e716 <rclc_executor_spin_some.part.0+0x282>
 800e6f8:	f813 300b 	ldrb.w	r3, [r3, fp]
 800e6fc:	2b08      	cmp	r3, #8
 800e6fe:	d034      	beq.n	800e76a <rclc_executor_spin_some.part.0+0x2d6>
 800e700:	2b09      	cmp	r3, #9
 800e702:	d029      	beq.n	800e758 <rclc_executor_spin_some.part.0+0x2c4>
 800e704:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800e708:	bb03      	cbnz	r3, 800e74c <rclc_executor_spin_some.part.0+0x2b8>
 800e70a:	f10a 0a01 	add.w	sl, sl, #1
 800e70e:	68eb      	ldr	r3, [r5, #12]
 800e710:	459a      	cmp	sl, r3
 800e712:	d2be      	bcs.n	800e692 <rclc_executor_spin_some.part.0+0x1fe>
 800e714:	2400      	movs	r4, #0
 800e716:	68a8      	ldr	r0, [r5, #8]
 800e718:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800e71c:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800e720:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800e724:	2b00      	cmp	r3, #0
 800e726:	d0b7      	beq.n	800e698 <rclc_executor_spin_some.part.0+0x204>
 800e728:	4631      	mov	r1, r6
 800e72a:	f7ff fa37 	bl	800db9c <_rclc_take_new_data>
 800e72e:	2800      	cmp	r0, #0
 800e730:	bf18      	it	ne
 800e732:	4540      	cmpne	r0, r8
 800e734:	d001      	beq.n	800e73a <rclc_executor_spin_some.part.0+0x2a6>
 800e736:	4548      	cmp	r0, r9
 800e738:	d10c      	bne.n	800e754 <rclc_executor_spin_some.part.0+0x2c0>
 800e73a:	68ab      	ldr	r3, [r5, #8]
 800e73c:	eb13 000b 	adds.w	r0, r3, fp
 800e740:	d021      	beq.n	800e786 <rclc_executor_spin_some.part.0+0x2f2>
 800e742:	7842      	ldrb	r2, [r0, #1]
 800e744:	2a00      	cmp	r2, #0
 800e746:	d0d7      	beq.n	800e6f8 <rclc_executor_spin_some.part.0+0x264>
 800e748:	2a01      	cmp	r2, #1
 800e74a:	d1de      	bne.n	800e70a <rclc_executor_spin_some.part.0+0x276>
 800e74c:	f7ff fb9a 	bl	800de84 <_rclc_execute.part.0>
 800e750:	2800      	cmp	r0, #0
 800e752:	d0da      	beq.n	800e70a <rclc_executor_spin_some.part.0+0x276>
 800e754:	4607      	mov	r7, r0
 800e756:	e79c      	b.n	800e692 <rclc_executor_spin_some.part.0+0x1fe>
 800e758:	6843      	ldr	r3, [r0, #4]
 800e75a:	6a1a      	ldr	r2, [r3, #32]
 800e75c:	2a00      	cmp	r2, #0
 800e75e:	d1f5      	bne.n	800e74c <rclc_executor_spin_some.part.0+0x2b8>
 800e760:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e764:	2b00      	cmp	r3, #0
 800e766:	d0d0      	beq.n	800e70a <rclc_executor_spin_some.part.0+0x276>
 800e768:	e7f0      	b.n	800e74c <rclc_executor_spin_some.part.0+0x2b8>
 800e76a:	6843      	ldr	r3, [r0, #4]
 800e76c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e76e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800e772:	d1eb      	bne.n	800e74c <rclc_executor_spin_some.part.0+0x2b8>
 800e774:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800e778:	2a00      	cmp	r2, #0
 800e77a:	d1e7      	bne.n	800e74c <rclc_executor_spin_some.part.0+0x2b8>
 800e77c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e780:	2b00      	cmp	r3, #0
 800e782:	d0c2      	beq.n	800e70a <rclc_executor_spin_some.part.0+0x276>
 800e784:	e7e2      	b.n	800e74c <rclc_executor_spin_some.part.0+0x2b8>
 800e786:	270b      	movs	r7, #11
 800e788:	e783      	b.n	800e692 <rclc_executor_spin_some.part.0+0x1fe>
 800e78a:	68aa      	ldr	r2, [r5, #8]
 800e78c:	e6e2      	b.n	800e554 <rclc_executor_spin_some.part.0+0xc0>
 800e78e:	68aa      	ldr	r2, [r5, #8]
 800e790:	e7a1      	b.n	800e6d6 <rclc_executor_spin_some.part.0+0x242>
 800e792:	6842      	ldr	r2, [r0, #4]
 800e794:	6a11      	ldr	r1, [r2, #32]
 800e796:	2900      	cmp	r1, #0
 800e798:	f47f af22 	bne.w	800e5e0 <rclc_executor_spin_some.part.0+0x14c>
 800e79c:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800e7a0:	2a00      	cmp	r2, #0
 800e7a2:	f43f af0b 	beq.w	800e5bc <rclc_executor_spin_some.part.0+0x128>
 800e7a6:	e71b      	b.n	800e5e0 <rclc_executor_spin_some.part.0+0x14c>
 800e7a8:	6842      	ldr	r2, [r0, #4]
 800e7aa:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800e7ac:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 800e7b0:	f47f af16 	bne.w	800e5e0 <rclc_executor_spin_some.part.0+0x14c>
 800e7b4:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 800e7b8:	2900      	cmp	r1, #0
 800e7ba:	f47f af11 	bne.w	800e5e0 <rclc_executor_spin_some.part.0+0x14c>
 800e7be:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800e7c2:	2a00      	cmp	r2, #0
 800e7c4:	f43f aefa 	beq.w	800e5bc <rclc_executor_spin_some.part.0+0x128>
 800e7c8:	e70a      	b.n	800e5e0 <rclc_executor_spin_some.part.0+0x14c>
 800e7ca:	68aa      	ldr	r2, [r5, #8]
 800e7cc:	461c      	mov	r4, r3
 800e7ce:	e782      	b.n	800e6d6 <rclc_executor_spin_some.part.0+0x242>
 800e7d0:	68aa      	ldr	r2, [r5, #8]
 800e7d2:	461c      	mov	r4, r3
 800e7d4:	e6be      	b.n	800e554 <rclc_executor_spin_some.part.0+0xc0>
 800e7d6:	bf00      	nop

0800e7d8 <rclc_executor_spin>:
 800e7d8:	b1d0      	cbz	r0, 800e810 <rclc_executor_spin+0x38>
 800e7da:	b510      	push	{r4, lr}
 800e7dc:	4604      	mov	r4, r0
 800e7de:	b082      	sub	sp, #8
 800e7e0:	e004      	b.n	800e7ec <rclc_executor_spin+0x14>
 800e7e2:	f7ff fe57 	bl	800e494 <rclc_executor_spin_some.part.0>
 800e7e6:	f030 0302 	bics.w	r3, r0, #2
 800e7ea:	d10f      	bne.n	800e80c <rclc_executor_spin+0x34>
 800e7ec:	6860      	ldr	r0, [r4, #4]
 800e7ee:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
 800e7f2:	e9cd 2300 	strd	r2, r3, [sp]
 800e7f6:	f007 f8b7 	bl	8015968 <rcl_context_is_valid>
 800e7fa:	4601      	mov	r1, r0
 800e7fc:	4620      	mov	r0, r4
 800e7fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e802:	2900      	cmp	r1, #0
 800e804:	d1ed      	bne.n	800e7e2 <rclc_executor_spin+0xa>
 800e806:	f000 f9f7 	bl	800ebf8 <rcutils_reset_error>
 800e80a:	2001      	movs	r0, #1
 800e80c:	b002      	add	sp, #8
 800e80e:	bd10      	pop	{r4, pc}
 800e810:	200b      	movs	r0, #11
 800e812:	4770      	bx	lr

0800e814 <rclc_executor_handle_counters_zero_init>:
 800e814:	b130      	cbz	r0, 800e824 <rclc_executor_handle_counters_zero_init+0x10>
 800e816:	2220      	movs	r2, #32
 800e818:	2100      	movs	r1, #0
 800e81a:	b508      	push	{r3, lr}
 800e81c:	f00f f97a 	bl	801db14 <memset>
 800e820:	2000      	movs	r0, #0
 800e822:	bd08      	pop	{r3, pc}
 800e824:	200b      	movs	r0, #11
 800e826:	4770      	bx	lr

0800e828 <rclc_executor_handle_init>:
 800e828:	4603      	mov	r3, r0
 800e82a:	b178      	cbz	r0, 800e84c <rclc_executor_handle_init+0x24>
 800e82c:	2200      	movs	r2, #0
 800e82e:	f04f 0c0b 	mov.w	ip, #11
 800e832:	6341      	str	r1, [r0, #52]	; 0x34
 800e834:	4610      	mov	r0, r2
 800e836:	f8a3 c000 	strh.w	ip, [r3]
 800e83a:	631a      	str	r2, [r3, #48]	; 0x30
 800e83c:	871a      	strh	r2, [r3, #56]	; 0x38
 800e83e:	ed9f 7b04 	vldr	d7, [pc, #16]	; 800e850 <rclc_executor_handle_init+0x28>
 800e842:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800e846:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 800e84a:	4770      	bx	lr
 800e84c:	200b      	movs	r0, #11
 800e84e:	4770      	bx	lr
	...

0800e858 <rclc_support_init>:
 800e858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e85c:	b086      	sub	sp, #24
 800e85e:	b3bb      	cbz	r3, 800e8d0 <rclc_support_init+0x78>
 800e860:	4606      	mov	r6, r0
 800e862:	b3a8      	cbz	r0, 800e8d0 <rclc_support_init+0x78>
 800e864:	461c      	mov	r4, r3
 800e866:	460f      	mov	r7, r1
 800e868:	4690      	mov	r8, r2
 800e86a:	f007 fa1d 	bl	8015ca8 <rcl_get_zero_initialized_init_options>
 800e86e:	f104 050c 	add.w	r5, r4, #12
 800e872:	9005      	str	r0, [sp, #20]
 800e874:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e878:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e87c:	a805      	add	r0, sp, #20
 800e87e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800e882:	f007 fa13 	bl	8015cac <rcl_init_options_init>
 800e886:	4605      	mov	r5, r0
 800e888:	b9e0      	cbnz	r0, 800e8c4 <rclc_support_init+0x6c>
 800e88a:	ad02      	add	r5, sp, #8
 800e88c:	4628      	mov	r0, r5
 800e88e:	f007 f861 	bl	8015954 <rcl_get_zero_initialized_context>
 800e892:	4633      	mov	r3, r6
 800e894:	aa05      	add	r2, sp, #20
 800e896:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e89a:	e886 0003 	stmia.w	r6, {r0, r1}
 800e89e:	4641      	mov	r1, r8
 800e8a0:	4638      	mov	r0, r7
 800e8a2:	f007 f8c7 	bl	8015a34 <rcl_init>
 800e8a6:	4605      	mov	r5, r0
 800e8a8:	b9b8      	cbnz	r0, 800e8da <rclc_support_init+0x82>
 800e8aa:	4622      	mov	r2, r4
 800e8ac:	f106 010c 	add.w	r1, r6, #12
 800e8b0:	2003      	movs	r0, #3
 800e8b2:	60b4      	str	r4, [r6, #8]
 800e8b4:	f008 fa10 	bl	8016cd8 <rcl_clock_init>
 800e8b8:	4605      	mov	r5, r0
 800e8ba:	b970      	cbnz	r0, 800e8da <rclc_support_init+0x82>
 800e8bc:	a805      	add	r0, sp, #20
 800e8be:	f007 fa51 	bl	8015d64 <rcl_init_options_fini>
 800e8c2:	b108      	cbz	r0, 800e8c8 <rclc_support_init+0x70>
 800e8c4:	f000 f998 	bl	800ebf8 <rcutils_reset_error>
 800e8c8:	4628      	mov	r0, r5
 800e8ca:	b006      	add	sp, #24
 800e8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8d0:	250b      	movs	r5, #11
 800e8d2:	4628      	mov	r0, r5
 800e8d4:	b006      	add	sp, #24
 800e8d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8da:	f000 f98d 	bl	800ebf8 <rcutils_reset_error>
 800e8de:	a805      	add	r0, sp, #20
 800e8e0:	f007 fa40 	bl	8015d64 <rcl_init_options_fini>
 800e8e4:	2800      	cmp	r0, #0
 800e8e6:	d0ef      	beq.n	800e8c8 <rclc_support_init+0x70>
 800e8e8:	e7ec      	b.n	800e8c4 <rclc_support_init+0x6c>
 800e8ea:	bf00      	nop

0800e8ec <rclc_node_init_default>:
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	bf18      	it	ne
 800e8f0:	2a00      	cmpne	r2, #0
 800e8f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e8f6:	4616      	mov	r6, r2
 800e8f8:	bf0c      	ite	eq
 800e8fa:	2201      	moveq	r2, #1
 800e8fc:	2200      	movne	r2, #0
 800e8fe:	b0a3      	sub	sp, #140	; 0x8c
 800e900:	2900      	cmp	r1, #0
 800e902:	bf08      	it	eq
 800e904:	f042 0201 	orreq.w	r2, r2, #1
 800e908:	bb22      	cbnz	r2, 800e954 <rclc_node_init_default+0x68>
 800e90a:	4604      	mov	r4, r0
 800e90c:	b310      	cbz	r0, 800e954 <rclc_node_init_default+0x68>
 800e90e:	f10d 0810 	add.w	r8, sp, #16
 800e912:	461f      	mov	r7, r3
 800e914:	460d      	mov	r5, r1
 800e916:	f10d 0918 	add.w	r9, sp, #24
 800e91a:	4640      	mov	r0, r8
 800e91c:	f007 face 	bl	8015ebc <rcl_get_zero_initialized_node>
 800e920:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e924:	e884 0003 	stmia.w	r4, {r0, r1}
 800e928:	4648      	mov	r0, r9
 800e92a:	f007 fc61 	bl	80161f0 <rcl_node_get_default_options>
 800e92e:	4640      	mov	r0, r8
 800e930:	f007 fac4 	bl	8015ebc <rcl_get_zero_initialized_node>
 800e934:	f8cd 9000 	str.w	r9, [sp]
 800e938:	463b      	mov	r3, r7
 800e93a:	4632      	mov	r2, r6
 800e93c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800e940:	e884 0003 	stmia.w	r4, {r0, r1}
 800e944:	4629      	mov	r1, r5
 800e946:	4620      	mov	r0, r4
 800e948:	f007 fac2 	bl	8015ed0 <rcl_node_init>
 800e94c:	b930      	cbnz	r0, 800e95c <rclc_node_init_default+0x70>
 800e94e:	b023      	add	sp, #140	; 0x8c
 800e950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e954:	200b      	movs	r0, #11
 800e956:	b023      	add	sp, #140	; 0x8c
 800e958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e95c:	9003      	str	r0, [sp, #12]
 800e95e:	f000 f94b 	bl	800ebf8 <rcutils_reset_error>
 800e962:	f000 f949 	bl	800ebf8 <rcutils_reset_error>
 800e966:	9803      	ldr	r0, [sp, #12]
 800e968:	b023      	add	sp, #140	; 0x8c
 800e96a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e96e:	bf00      	nop

0800e970 <rclc_publisher_init_best_effort>:
 800e970:	2b00      	cmp	r3, #0
 800e972:	bf18      	it	ne
 800e974:	2a00      	cmpne	r2, #0
 800e976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e97a:	4616      	mov	r6, r2
 800e97c:	bf0c      	ite	eq
 800e97e:	2201      	moveq	r2, #1
 800e980:	2200      	movne	r2, #0
 800e982:	b0a0      	sub	sp, #128	; 0x80
 800e984:	2900      	cmp	r1, #0
 800e986:	bf08      	it	eq
 800e988:	f042 0201 	orreq.w	r2, r2, #1
 800e98c:	bb1a      	cbnz	r2, 800e9d6 <rclc_publisher_init_best_effort+0x66>
 800e98e:	4604      	mov	r4, r0
 800e990:	b308      	cbz	r0, 800e9d6 <rclc_publisher_init_best_effort+0x66>
 800e992:	f10d 0810 	add.w	r8, sp, #16
 800e996:	461f      	mov	r7, r3
 800e998:	460d      	mov	r5, r1
 800e99a:	f7fe ff89 	bl	800d8b0 <rcl_get_zero_initialized_publisher>
 800e99e:	6020      	str	r0, [r4, #0]
 800e9a0:	4640      	mov	r0, r8
 800e9a2:	f7ff f827 	bl	800d9f4 <rcl_publisher_get_default_options>
 800e9a6:	2250      	movs	r2, #80	; 0x50
 800e9a8:	490d      	ldr	r1, [pc, #52]	; (800e9e0 <rclc_publisher_init_best_effort+0x70>)
 800e9aa:	4640      	mov	r0, r8
 800e9ac:	f00f f9e3 	bl	801dd76 <memcpy>
 800e9b0:	463b      	mov	r3, r7
 800e9b2:	4632      	mov	r2, r6
 800e9b4:	4629      	mov	r1, r5
 800e9b6:	4620      	mov	r0, r4
 800e9b8:	f8cd 8000 	str.w	r8, [sp]
 800e9bc:	f7fe ff7e 	bl	800d8bc <rcl_publisher_init>
 800e9c0:	b910      	cbnz	r0, 800e9c8 <rclc_publisher_init_best_effort+0x58>
 800e9c2:	b020      	add	sp, #128	; 0x80
 800e9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9c8:	9003      	str	r0, [sp, #12]
 800e9ca:	f000 f915 	bl	800ebf8 <rcutils_reset_error>
 800e9ce:	9803      	ldr	r0, [sp, #12]
 800e9d0:	b020      	add	sp, #128	; 0x80
 800e9d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9d6:	200b      	movs	r0, #11
 800e9d8:	b020      	add	sp, #128	; 0x80
 800e9da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9de:	bf00      	nop
 800e9e0:	0801fa68 	.word	0x0801fa68

0800e9e4 <rclc_service_init_default>:
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	bf18      	it	ne
 800e9e8:	2a00      	cmpne	r2, #0
 800e9ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9ee:	4616      	mov	r6, r2
 800e9f0:	bf0c      	ite	eq
 800e9f2:	2201      	moveq	r2, #1
 800e9f4:	2200      	movne	r2, #0
 800e9f6:	b09e      	sub	sp, #120	; 0x78
 800e9f8:	2900      	cmp	r1, #0
 800e9fa:	bf08      	it	eq
 800e9fc:	f042 0201 	orreq.w	r2, r2, #1
 800ea00:	bb1a      	cbnz	r2, 800ea4a <rclc_service_init_default+0x66>
 800ea02:	4604      	mov	r4, r0
 800ea04:	b308      	cbz	r0, 800ea4a <rclc_service_init_default+0x66>
 800ea06:	f10d 0810 	add.w	r8, sp, #16
 800ea0a:	461f      	mov	r7, r3
 800ea0c:	460d      	mov	r5, r1
 800ea0e:	f007 fdf3 	bl	80165f8 <rcl_get_zero_initialized_service>
 800ea12:	6020      	str	r0, [r4, #0]
 800ea14:	4640      	mov	r0, r8
 800ea16:	f007 fe9d 	bl	8016754 <rcl_service_get_default_options>
 800ea1a:	2250      	movs	r2, #80	; 0x50
 800ea1c:	490d      	ldr	r1, [pc, #52]	; (800ea54 <rclc_service_init_default+0x70>)
 800ea1e:	4640      	mov	r0, r8
 800ea20:	f00f f9a9 	bl	801dd76 <memcpy>
 800ea24:	463b      	mov	r3, r7
 800ea26:	4632      	mov	r2, r6
 800ea28:	4629      	mov	r1, r5
 800ea2a:	4620      	mov	r0, r4
 800ea2c:	f8cd 8000 	str.w	r8, [sp]
 800ea30:	f007 fde8 	bl	8016604 <rcl_service_init>
 800ea34:	b910      	cbnz	r0, 800ea3c <rclc_service_init_default+0x58>
 800ea36:	b01e      	add	sp, #120	; 0x78
 800ea38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea3c:	9003      	str	r0, [sp, #12]
 800ea3e:	f000 f8db 	bl	800ebf8 <rcutils_reset_error>
 800ea42:	9803      	ldr	r0, [sp, #12]
 800ea44:	b01e      	add	sp, #120	; 0x78
 800ea46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea4a:	200b      	movs	r0, #11
 800ea4c:	b01e      	add	sp, #120	; 0x78
 800ea4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea52:	bf00      	nop
 800ea54:	0801fab8 	.word	0x0801fab8

0800ea58 <rclc_subscription_init_best_effort>:
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	bf18      	it	ne
 800ea5c:	2a00      	cmpne	r2, #0
 800ea5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea62:	4616      	mov	r6, r2
 800ea64:	bf0c      	ite	eq
 800ea66:	2201      	moveq	r2, #1
 800ea68:	2200      	movne	r2, #0
 800ea6a:	b0a2      	sub	sp, #136	; 0x88
 800ea6c:	2900      	cmp	r1, #0
 800ea6e:	bf08      	it	eq
 800ea70:	f042 0201 	orreq.w	r2, r2, #1
 800ea74:	bb1a      	cbnz	r2, 800eabe <rclc_subscription_init_best_effort+0x66>
 800ea76:	4604      	mov	r4, r0
 800ea78:	b308      	cbz	r0, 800eabe <rclc_subscription_init_best_effort+0x66>
 800ea7a:	f10d 0810 	add.w	r8, sp, #16
 800ea7e:	461f      	mov	r7, r3
 800ea80:	460d      	mov	r5, r1
 800ea82:	f007 ffb9 	bl	80169f8 <rcl_get_zero_initialized_subscription>
 800ea86:	6020      	str	r0, [r4, #0]
 800ea88:	4640      	mov	r0, r8
 800ea8a:	f008 f869 	bl	8016b60 <rcl_subscription_get_default_options>
 800ea8e:	2250      	movs	r2, #80	; 0x50
 800ea90:	490d      	ldr	r1, [pc, #52]	; (800eac8 <rclc_subscription_init_best_effort+0x70>)
 800ea92:	4640      	mov	r0, r8
 800ea94:	f00f f96f 	bl	801dd76 <memcpy>
 800ea98:	463b      	mov	r3, r7
 800ea9a:	4632      	mov	r2, r6
 800ea9c:	4629      	mov	r1, r5
 800ea9e:	4620      	mov	r0, r4
 800eaa0:	f8cd 8000 	str.w	r8, [sp]
 800eaa4:	f007 ffae 	bl	8016a04 <rcl_subscription_init>
 800eaa8:	b910      	cbnz	r0, 800eab0 <rclc_subscription_init_best_effort+0x58>
 800eaaa:	b022      	add	sp, #136	; 0x88
 800eaac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eab0:	9003      	str	r0, [sp, #12]
 800eab2:	f000 f8a1 	bl	800ebf8 <rcutils_reset_error>
 800eab6:	9803      	ldr	r0, [sp, #12]
 800eab8:	b022      	add	sp, #136	; 0x88
 800eaba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eabe:	200b      	movs	r0, #11
 800eac0:	b022      	add	sp, #136	; 0x88
 800eac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eac6:	bf00      	nop
 800eac8:	0801fb08 	.word	0x0801fb08

0800eacc <rclc_timer_init_default>:
 800eacc:	b361      	cbz	r1, 800eb28 <rclc_timer_init_default+0x5c>
 800eace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ead2:	4606      	mov	r6, r0
 800ead4:	b08a      	sub	sp, #40	; 0x28
 800ead6:	b318      	cbz	r0, 800eb20 <rclc_timer_init_default+0x54>
 800ead8:	460d      	mov	r5, r1
 800eada:	4690      	mov	r8, r2
 800eadc:	461f      	mov	r7, r3
 800eade:	f008 faf3 	bl	80170c8 <rcl_get_zero_initialized_timer>
 800eae2:	68ac      	ldr	r4, [r5, #8]
 800eae4:	f10d 0c0c 	add.w	ip, sp, #12
 800eae8:	6030      	str	r0, [r6, #0]
 800eaea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eaec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eaf0:	6823      	ldr	r3, [r4, #0]
 800eaf2:	462a      	mov	r2, r5
 800eaf4:	f105 010c 	add.w	r1, r5, #12
 800eaf8:	4630      	mov	r0, r6
 800eafa:	f8cc 3000 	str.w	r3, [ip]
 800eafe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb00:	e9cd 8700 	strd	r8, r7, [sp]
 800eb04:	9302      	str	r3, [sp, #8]
 800eb06:	f008 fae5 	bl	80170d4 <rcl_timer_init>
 800eb0a:	b910      	cbnz	r0, 800eb12 <rclc_timer_init_default+0x46>
 800eb0c:	b00a      	add	sp, #40	; 0x28
 800eb0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb12:	9009      	str	r0, [sp, #36]	; 0x24
 800eb14:	f000 f870 	bl	800ebf8 <rcutils_reset_error>
 800eb18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb1a:	b00a      	add	sp, #40	; 0x28
 800eb1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb20:	200b      	movs	r0, #11
 800eb22:	b00a      	add	sp, #40	; 0x28
 800eb24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb28:	200b      	movs	r0, #11
 800eb2a:	4770      	bx	lr

0800eb2c <__default_zero_allocate>:
 800eb2c:	f00e bc14 	b.w	801d358 <calloc>

0800eb30 <__default_reallocate>:
 800eb30:	f00e bda0 	b.w	801d674 <realloc>

0800eb34 <__default_deallocate>:
 800eb34:	f00e bc7e 	b.w	801d434 <free>

0800eb38 <__default_allocate>:
 800eb38:	f00e bc74 	b.w	801d424 <malloc>

0800eb3c <rcutils_get_zero_initialized_allocator>:
 800eb3c:	b510      	push	{r4, lr}
 800eb3e:	4c05      	ldr	r4, [pc, #20]	; (800eb54 <rcutils_get_zero_initialized_allocator+0x18>)
 800eb40:	4686      	mov	lr, r0
 800eb42:	4684      	mov	ip, r0
 800eb44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb4a:	6823      	ldr	r3, [r4, #0]
 800eb4c:	4670      	mov	r0, lr
 800eb4e:	f8cc 3000 	str.w	r3, [ip]
 800eb52:	bd10      	pop	{r4, pc}
 800eb54:	0801fb58 	.word	0x0801fb58

0800eb58 <rcutils_set_default_allocator>:
 800eb58:	b1a8      	cbz	r0, 800eb86 <rcutils_set_default_allocator+0x2e>
 800eb5a:	6802      	ldr	r2, [r0, #0]
 800eb5c:	b1a2      	cbz	r2, 800eb88 <rcutils_set_default_allocator+0x30>
 800eb5e:	6841      	ldr	r1, [r0, #4]
 800eb60:	b1a1      	cbz	r1, 800eb8c <rcutils_set_default_allocator+0x34>
 800eb62:	b410      	push	{r4}
 800eb64:	68c4      	ldr	r4, [r0, #12]
 800eb66:	b164      	cbz	r4, 800eb82 <rcutils_set_default_allocator+0x2a>
 800eb68:	6880      	ldr	r0, [r0, #8]
 800eb6a:	b138      	cbz	r0, 800eb7c <rcutils_set_default_allocator+0x24>
 800eb6c:	4b08      	ldr	r3, [pc, #32]	; (800eb90 <rcutils_set_default_allocator+0x38>)
 800eb6e:	601a      	str	r2, [r3, #0]
 800eb70:	2200      	movs	r2, #0
 800eb72:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800eb76:	2001      	movs	r0, #1
 800eb78:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800eb7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb80:	4770      	bx	lr
 800eb82:	4620      	mov	r0, r4
 800eb84:	e7fa      	b.n	800eb7c <rcutils_set_default_allocator+0x24>
 800eb86:	4770      	bx	lr
 800eb88:	4610      	mov	r0, r2
 800eb8a:	4770      	bx	lr
 800eb8c:	4608      	mov	r0, r1
 800eb8e:	4770      	bx	lr
 800eb90:	20000ad4 	.word	0x20000ad4

0800eb94 <rcutils_get_default_allocator>:
 800eb94:	b510      	push	{r4, lr}
 800eb96:	4c05      	ldr	r4, [pc, #20]	; (800ebac <rcutils_get_default_allocator+0x18>)
 800eb98:	4686      	mov	lr, r0
 800eb9a:	4684      	mov	ip, r0
 800eb9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eb9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eba2:	6823      	ldr	r3, [r4, #0]
 800eba4:	4670      	mov	r0, lr
 800eba6:	f8cc 3000 	str.w	r3, [ip]
 800ebaa:	bd10      	pop	{r4, pc}
 800ebac:	20000ad4 	.word	0x20000ad4

0800ebb0 <rcutils_allocator_is_valid>:
 800ebb0:	b158      	cbz	r0, 800ebca <rcutils_allocator_is_valid+0x1a>
 800ebb2:	6803      	ldr	r3, [r0, #0]
 800ebb4:	b143      	cbz	r3, 800ebc8 <rcutils_allocator_is_valid+0x18>
 800ebb6:	6843      	ldr	r3, [r0, #4]
 800ebb8:	b133      	cbz	r3, 800ebc8 <rcutils_allocator_is_valid+0x18>
 800ebba:	68c3      	ldr	r3, [r0, #12]
 800ebbc:	b123      	cbz	r3, 800ebc8 <rcutils_allocator_is_valid+0x18>
 800ebbe:	6880      	ldr	r0, [r0, #8]
 800ebc0:	3800      	subs	r0, #0
 800ebc2:	bf18      	it	ne
 800ebc4:	2001      	movne	r0, #1
 800ebc6:	4770      	bx	lr
 800ebc8:	4618      	mov	r0, r3
 800ebca:	4770      	bx	lr

0800ebcc <rcutils_get_error_string>:
 800ebcc:	4b06      	ldr	r3, [pc, #24]	; (800ebe8 <rcutils_get_error_string+0x1c>)
 800ebce:	781b      	ldrb	r3, [r3, #0]
 800ebd0:	b13b      	cbz	r3, 800ebe2 <rcutils_get_error_string+0x16>
 800ebd2:	4b06      	ldr	r3, [pc, #24]	; (800ebec <rcutils_get_error_string+0x20>)
 800ebd4:	781a      	ldrb	r2, [r3, #0]
 800ebd6:	b90a      	cbnz	r2, 800ebdc <rcutils_get_error_string+0x10>
 800ebd8:	2201      	movs	r2, #1
 800ebda:	701a      	strb	r2, [r3, #0]
 800ebdc:	4b04      	ldr	r3, [pc, #16]	; (800ebf0 <rcutils_get_error_string+0x24>)
 800ebde:	7818      	ldrb	r0, [r3, #0]
 800ebe0:	4770      	bx	lr
 800ebe2:	4b04      	ldr	r3, [pc, #16]	; (800ebf4 <rcutils_get_error_string+0x28>)
 800ebe4:	7818      	ldrb	r0, [r3, #0]
 800ebe6:	4770      	bx	lr
 800ebe8:	2000bae0 	.word	0x2000bae0
 800ebec:	2000baf9 	.word	0x2000baf9
 800ebf0:	2000baf8 	.word	0x2000baf8
 800ebf4:	0801ee70 	.word	0x0801ee70

0800ebf8 <rcutils_reset_error>:
 800ebf8:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800ec18 <rcutils_reset_error+0x20>
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	4a08      	ldr	r2, [pc, #32]	; (800ec20 <rcutils_reset_error+0x28>)
 800ec00:	4808      	ldr	r0, [pc, #32]	; (800ec24 <rcutils_reset_error+0x2c>)
 800ec02:	8013      	strh	r3, [r2, #0]
 800ec04:	4908      	ldr	r1, [pc, #32]	; (800ec28 <rcutils_reset_error+0x30>)
 800ec06:	7003      	strb	r3, [r0, #0]
 800ec08:	700b      	strb	r3, [r1, #0]
 800ec0a:	ed82 7b02 	vstr	d7, [r2, #8]
 800ec0e:	4a07      	ldr	r2, [pc, #28]	; (800ec2c <rcutils_reset_error+0x34>)
 800ec10:	7013      	strb	r3, [r2, #0]
 800ec12:	4770      	bx	lr
 800ec14:	f3af 8000 	nop.w
	...
 800ec20:	2000bae8 	.word	0x2000bae8
 800ec24:	2000baf9 	.word	0x2000baf9
 800ec28:	2000baf8 	.word	0x2000baf8
 800ec2c:	2000bae0 	.word	0x2000bae0

0800ec30 <rcutils_system_time_now>:
 800ec30:	b310      	cbz	r0, 800ec78 <rcutils_system_time_now+0x48>
 800ec32:	b570      	push	{r4, r5, r6, lr}
 800ec34:	b084      	sub	sp, #16
 800ec36:	4604      	mov	r4, r0
 800ec38:	2001      	movs	r0, #1
 800ec3a:	4669      	mov	r1, sp
 800ec3c:	f7f4 fb84 	bl	8003348 <clock_gettime>
 800ec40:	2800      	cmp	r0, #0
 800ec42:	db16      	blt.n	800ec72 <rcutils_system_time_now+0x42>
 800ec44:	e9dd 3100 	ldrd	r3, r1, [sp]
 800ec48:	2900      	cmp	r1, #0
 800ec4a:	db12      	blt.n	800ec72 <rcutils_system_time_now+0x42>
 800ec4c:	ea53 0201 	orrs.w	r2, r3, r1
 800ec50:	9d02      	ldr	r5, [sp, #8]
 800ec52:	d101      	bne.n	800ec58 <rcutils_system_time_now+0x28>
 800ec54:	2d00      	cmp	r5, #0
 800ec56:	db0c      	blt.n	800ec72 <rcutils_system_time_now+0x42>
 800ec58:	4e08      	ldr	r6, [pc, #32]	; (800ec7c <rcutils_system_time_now+0x4c>)
 800ec5a:	2000      	movs	r0, #0
 800ec5c:	fba3 3206 	umull	r3, r2, r3, r6
 800ec60:	195b      	adds	r3, r3, r5
 800ec62:	fb06 2201 	mla	r2, r6, r1, r2
 800ec66:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800ec6a:	e9c4 3200 	strd	r3, r2, [r4]
 800ec6e:	b004      	add	sp, #16
 800ec70:	bd70      	pop	{r4, r5, r6, pc}
 800ec72:	2002      	movs	r0, #2
 800ec74:	b004      	add	sp, #16
 800ec76:	bd70      	pop	{r4, r5, r6, pc}
 800ec78:	200b      	movs	r0, #11
 800ec7a:	4770      	bx	lr
 800ec7c:	3b9aca00 	.word	0x3b9aca00

0800ec80 <rcutils_steady_time_now>:
 800ec80:	b310      	cbz	r0, 800ecc8 <rcutils_steady_time_now+0x48>
 800ec82:	b570      	push	{r4, r5, r6, lr}
 800ec84:	b084      	sub	sp, #16
 800ec86:	4604      	mov	r4, r0
 800ec88:	2000      	movs	r0, #0
 800ec8a:	4669      	mov	r1, sp
 800ec8c:	f7f4 fb5c 	bl	8003348 <clock_gettime>
 800ec90:	2800      	cmp	r0, #0
 800ec92:	db16      	blt.n	800ecc2 <rcutils_steady_time_now+0x42>
 800ec94:	e9dd 3100 	ldrd	r3, r1, [sp]
 800ec98:	2900      	cmp	r1, #0
 800ec9a:	db12      	blt.n	800ecc2 <rcutils_steady_time_now+0x42>
 800ec9c:	ea53 0201 	orrs.w	r2, r3, r1
 800eca0:	9d02      	ldr	r5, [sp, #8]
 800eca2:	d101      	bne.n	800eca8 <rcutils_steady_time_now+0x28>
 800eca4:	2d00      	cmp	r5, #0
 800eca6:	db0c      	blt.n	800ecc2 <rcutils_steady_time_now+0x42>
 800eca8:	4e08      	ldr	r6, [pc, #32]	; (800eccc <rcutils_steady_time_now+0x4c>)
 800ecaa:	2000      	movs	r0, #0
 800ecac:	fba3 3206 	umull	r3, r2, r3, r6
 800ecb0:	195b      	adds	r3, r3, r5
 800ecb2:	fb06 2201 	mla	r2, r6, r1, r2
 800ecb6:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800ecba:	e9c4 3200 	strd	r3, r2, [r4]
 800ecbe:	b004      	add	sp, #16
 800ecc0:	bd70      	pop	{r4, r5, r6, pc}
 800ecc2:	2002      	movs	r0, #2
 800ecc4:	b004      	add	sp, #16
 800ecc6:	bd70      	pop	{r4, r5, r6, pc}
 800ecc8:	200b      	movs	r0, #11
 800ecca:	4770      	bx	lr
 800eccc:	3b9aca00 	.word	0x3b9aca00

0800ecd0 <rmw_get_default_publisher_options>:
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	6002      	str	r2, [r0, #0]
 800ecd4:	7102      	strb	r2, [r0, #4]
 800ecd6:	4770      	bx	lr

0800ecd8 <rmw_uros_set_custom_transport>:
 800ecd8:	b470      	push	{r4, r5, r6}
 800ecda:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800ecde:	b162      	cbz	r2, 800ecfa <rmw_uros_set_custom_transport+0x22>
 800ece0:	b15b      	cbz	r3, 800ecfa <rmw_uros_set_custom_transport+0x22>
 800ece2:	b155      	cbz	r5, 800ecfa <rmw_uros_set_custom_transport+0x22>
 800ece4:	b14e      	cbz	r6, 800ecfa <rmw_uros_set_custom_transport+0x22>
 800ece6:	4c06      	ldr	r4, [pc, #24]	; (800ed00 <rmw_uros_set_custom_transport+0x28>)
 800ece8:	7020      	strb	r0, [r4, #0]
 800ecea:	2000      	movs	r0, #0
 800ecec:	6166      	str	r6, [r4, #20]
 800ecee:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800ecf2:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ecf6:	bc70      	pop	{r4, r5, r6}
 800ecf8:	4770      	bx	lr
 800ecfa:	200b      	movs	r0, #11
 800ecfc:	bc70      	pop	{r4, r5, r6}
 800ecfe:	4770      	bx	lr
 800ed00:	2000bafc 	.word	0x2000bafc

0800ed04 <flush_session>:
 800ed04:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800ed06:	f003 be87 	b.w	8012a18 <uxr_run_session_until_confirm_delivery>
 800ed0a:	bf00      	nop

0800ed0c <rmw_publish>:
 800ed0c:	2800      	cmp	r0, #0
 800ed0e:	d053      	beq.n	800edb8 <rmw_publish+0xac>
 800ed10:	b570      	push	{r4, r5, r6, lr}
 800ed12:	460d      	mov	r5, r1
 800ed14:	b08e      	sub	sp, #56	; 0x38
 800ed16:	2900      	cmp	r1, #0
 800ed18:	d04b      	beq.n	800edb2 <rmw_publish+0xa6>
 800ed1a:	4604      	mov	r4, r0
 800ed1c:	6800      	ldr	r0, [r0, #0]
 800ed1e:	f000 fd97 	bl	800f850 <is_uxrce_rmw_identifier_valid>
 800ed22:	2800      	cmp	r0, #0
 800ed24:	d045      	beq.n	800edb2 <rmw_publish+0xa6>
 800ed26:	6866      	ldr	r6, [r4, #4]
 800ed28:	2e00      	cmp	r6, #0
 800ed2a:	d042      	beq.n	800edb2 <rmw_publish+0xa6>
 800ed2c:	69b4      	ldr	r4, [r6, #24]
 800ed2e:	4628      	mov	r0, r5
 800ed30:	6923      	ldr	r3, [r4, #16]
 800ed32:	4798      	blx	r3
 800ed34:	69f3      	ldr	r3, [r6, #28]
 800ed36:	9005      	str	r0, [sp, #20]
 800ed38:	b113      	cbz	r3, 800ed40 <rmw_publish+0x34>
 800ed3a:	a805      	add	r0, sp, #20
 800ed3c:	4798      	blx	r3
 800ed3e:	9805      	ldr	r0, [sp, #20]
 800ed40:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ed44:	691b      	ldr	r3, [r3, #16]
 800ed46:	9000      	str	r0, [sp, #0]
 800ed48:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800ed4c:	6972      	ldr	r2, [r6, #20]
 800ed4e:	ab06      	add	r3, sp, #24
 800ed50:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800ed52:	f004 fc5f 	bl	8013614 <uxr_prepare_output_stream>
 800ed56:	b1d8      	cbz	r0, 800ed90 <rmw_publish+0x84>
 800ed58:	68a3      	ldr	r3, [r4, #8]
 800ed5a:	a906      	add	r1, sp, #24
 800ed5c:	4628      	mov	r0, r5
 800ed5e:	4798      	blx	r3
 800ed60:	6a33      	ldr	r3, [r6, #32]
 800ed62:	4604      	mov	r4, r0
 800ed64:	b10b      	cbz	r3, 800ed6a <rmw_publish+0x5e>
 800ed66:	a806      	add	r0, sp, #24
 800ed68:	4798      	blx	r3
 800ed6a:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800ed6e:	2b01      	cmp	r3, #1
 800ed70:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ed74:	d022      	beq.n	800edbc <rmw_publish+0xb0>
 800ed76:	6918      	ldr	r0, [r3, #16]
 800ed78:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800ed7a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ed7e:	f003 fe4b 	bl	8012a18 <uxr_run_session_until_confirm_delivery>
 800ed82:	4020      	ands	r0, r4
 800ed84:	b2c4      	uxtb	r4, r0
 800ed86:	f084 0001 	eor.w	r0, r4, #1
 800ed8a:	b2c0      	uxtb	r0, r0
 800ed8c:	b00e      	add	sp, #56	; 0x38
 800ed8e:	bd70      	pop	{r4, r5, r6, pc}
 800ed90:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800ed94:	6918      	ldr	r0, [r3, #16]
 800ed96:	9b05      	ldr	r3, [sp, #20]
 800ed98:	9602      	str	r6, [sp, #8]
 800ed9a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800ed9e:	9300      	str	r3, [sp, #0]
 800eda0:	4b09      	ldr	r3, [pc, #36]	; (800edc8 <rmw_publish+0xbc>)
 800eda2:	9301      	str	r3, [sp, #4]
 800eda4:	ab06      	add	r3, sp, #24
 800eda6:	6972      	ldr	r2, [r6, #20]
 800eda8:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800edaa:	f004 fc63 	bl	8013674 <uxr_prepare_output_stream_fragmented>
 800edae:	2800      	cmp	r0, #0
 800edb0:	d1d2      	bne.n	800ed58 <rmw_publish+0x4c>
 800edb2:	2001      	movs	r0, #1
 800edb4:	b00e      	add	sp, #56	; 0x38
 800edb6:	bd70      	pop	{r4, r5, r6, pc}
 800edb8:	2001      	movs	r0, #1
 800edba:	4770      	bx	lr
 800edbc:	6918      	ldr	r0, [r3, #16]
 800edbe:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800edc2:	f003 fa6f 	bl	80122a4 <uxr_flash_output_streams>
 800edc6:	e7de      	b.n	800ed86 <rmw_publish+0x7a>
 800edc8:	0800ed05 	.word	0x0800ed05

0800edcc <rmw_create_publisher>:
 800edcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edd0:	b087      	sub	sp, #28
 800edd2:	2800      	cmp	r0, #0
 800edd4:	f000 80d2 	beq.w	800ef7c <rmw_create_publisher+0x1b0>
 800edd8:	460e      	mov	r6, r1
 800edda:	2900      	cmp	r1, #0
 800eddc:	f000 80ce 	beq.w	800ef7c <rmw_create_publisher+0x1b0>
 800ede0:	4604      	mov	r4, r0
 800ede2:	6800      	ldr	r0, [r0, #0]
 800ede4:	4615      	mov	r5, r2
 800ede6:	461f      	mov	r7, r3
 800ede8:	f000 fd32 	bl	800f850 <is_uxrce_rmw_identifier_valid>
 800edec:	f080 0001 	eor.w	r0, r0, #1
 800edf0:	b2c0      	uxtb	r0, r0
 800edf2:	2800      	cmp	r0, #0
 800edf4:	f040 80c2 	bne.w	800ef7c <rmw_create_publisher+0x1b0>
 800edf8:	2d00      	cmp	r5, #0
 800edfa:	f000 80bf 	beq.w	800ef7c <rmw_create_publisher+0x1b0>
 800edfe:	782b      	ldrb	r3, [r5, #0]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	f000 80bb 	beq.w	800ef7c <rmw_create_publisher+0x1b0>
 800ee06:	2f00      	cmp	r7, #0
 800ee08:	f000 80b8 	beq.w	800ef7c <rmw_create_publisher+0x1b0>
 800ee0c:	485e      	ldr	r0, [pc, #376]	; (800ef88 <rmw_create_publisher+0x1bc>)
 800ee0e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800ee12:	f00a fc67 	bl	80196e4 <get_memory>
 800ee16:	2800      	cmp	r0, #0
 800ee18:	f000 80b0 	beq.w	800ef7c <rmw_create_publisher+0x1b0>
 800ee1c:	6884      	ldr	r4, [r0, #8]
 800ee1e:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 800ee22:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800ee26:	f00a fce3 	bl	80197f0 <rmw_get_implementation_identifier>
 800ee2a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800ee2e:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800ee32:	4628      	mov	r0, r5
 800ee34:	f7f1 fa64 	bl	8000300 <strlen>
 800ee38:	3001      	adds	r0, #1
 800ee3a:	f104 0884 	add.w	r8, r4, #132	; 0x84
 800ee3e:	283c      	cmp	r0, #60	; 0x3c
 800ee40:	f200 808f 	bhi.w	800ef62 <rmw_create_publisher+0x196>
 800ee44:	462b      	mov	r3, r5
 800ee46:	4a51      	ldr	r2, [pc, #324]	; (800ef8c <rmw_create_publisher+0x1c0>)
 800ee48:	213c      	movs	r1, #60	; 0x3c
 800ee4a:	4650      	mov	r0, sl
 800ee4c:	f00e fd88 	bl	801d960 <sniprintf>
 800ee50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ee54:	4639      	mov	r1, r7
 800ee56:	2250      	movs	r2, #80	; 0x50
 800ee58:	67e3      	str	r3, [r4, #124]	; 0x7c
 800ee5a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ee5e:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 800ee62:	f00e ff88 	bl	801dd76 <memcpy>
 800ee66:	7a3b      	ldrb	r3, [r7, #8]
 800ee68:	4630      	mov	r0, r6
 800ee6a:	4949      	ldr	r1, [pc, #292]	; (800ef90 <rmw_create_publisher+0x1c4>)
 800ee6c:	2b02      	cmp	r3, #2
 800ee6e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ee72:	bf0c      	ite	eq
 800ee74:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800ee78:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800ee7c:	67a3      	str	r3, [r4, #120]	; 0x78
 800ee7e:	2300      	movs	r3, #0
 800ee80:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800ee84:	f000 fcf2 	bl	800f86c <get_message_typesupport_handle>
 800ee88:	2800      	cmp	r0, #0
 800ee8a:	d06a      	beq.n	800ef62 <rmw_create_publisher+0x196>
 800ee8c:	6842      	ldr	r2, [r0, #4]
 800ee8e:	61a2      	str	r2, [r4, #24]
 800ee90:	2a00      	cmp	r2, #0
 800ee92:	d066      	beq.n	800ef62 <rmw_create_publisher+0x196>
 800ee94:	4629      	mov	r1, r5
 800ee96:	463b      	mov	r3, r7
 800ee98:	4648      	mov	r0, r9
 800ee9a:	f00a fee7 	bl	8019c6c <create_topic>
 800ee9e:	6260      	str	r0, [r4, #36]	; 0x24
 800eea0:	2800      	cmp	r0, #0
 800eea2:	d062      	beq.n	800ef6a <rmw_create_publisher+0x19e>
 800eea4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eea8:	2103      	movs	r1, #3
 800eeaa:	2506      	movs	r5, #6
 800eeac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800eeb0:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 800eeb4:	1c42      	adds	r2, r0, #1
 800eeb6:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 800eeba:	f003 f8a3 	bl	8012004 <uxr_object_id>
 800eebe:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800eec2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eec6:	6120      	str	r0, [r4, #16]
 800eec8:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800eecc:	6910      	ldr	r0, [r2, #16]
 800eece:	9500      	str	r5, [sp, #0]
 800eed0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800eed4:	6819      	ldr	r1, [r3, #0]
 800eed6:	6922      	ldr	r2, [r4, #16]
 800eed8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800eedc:	f002 ff0a 	bl	8011cf4 <uxr_buffer_create_publisher_bin>
 800eee0:	4602      	mov	r2, r0
 800eee2:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800eee6:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800eeea:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800eeee:	f000 fb9d 	bl	800f62c <run_xrce_session>
 800eef2:	b3b0      	cbz	r0, 800ef62 <rmw_create_publisher+0x196>
 800eef4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eef8:	2105      	movs	r1, #5
 800eefa:	f10d 0a10 	add.w	sl, sp, #16
 800eefe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ef02:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 800ef06:	1c42      	adds	r2, r0, #1
 800ef08:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 800ef0c:	f003 f87a 	bl	8012004 <uxr_object_id>
 800ef10:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800ef14:	4639      	mov	r1, r7
 800ef16:	6160      	str	r0, [r4, #20]
 800ef18:	691e      	ldr	r6, [r3, #16]
 800ef1a:	4650      	mov	r0, sl
 800ef1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ef20:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800ef24:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 800ef28:	f8d3 7384 	ldr.w	r7, [r3, #900]	; 0x384
 800ef2c:	f000 fb9a 	bl	800f664 <convert_qos_profile>
 800ef30:	9503      	str	r5, [sp, #12]
 800ef32:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800ef36:	9001      	str	r0, [sp, #4]
 800ef38:	4630      	mov	r0, r6
 800ef3a:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ef3e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ef42:	9300      	str	r3, [sp, #0]
 800ef44:	6839      	ldr	r1, [r7, #0]
 800ef46:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800ef4a:	f002 ff33 	bl	8011db4 <uxr_buffer_create_datawriter_bin>
 800ef4e:	4602      	mov	r2, r0
 800ef50:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ef54:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800ef58:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800ef5c:	f000 fb66 	bl	800f62c <run_xrce_session>
 800ef60:	b970      	cbnz	r0, 800ef80 <rmw_create_publisher+0x1b4>
 800ef62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ef64:	b108      	cbz	r0, 800ef6a <rmw_create_publisher+0x19e>
 800ef66:	f000 fa53 	bl	800f410 <rmw_uxrce_fini_topic_memory>
 800ef6a:	4640      	mov	r0, r8
 800ef6c:	f04f 0800 	mov.w	r8, #0
 800ef70:	f000 f9f6 	bl	800f360 <rmw_uxrce_fini_publisher_memory>
 800ef74:	4640      	mov	r0, r8
 800ef76:	b007      	add	sp, #28
 800ef78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef7c:	f04f 0800 	mov.w	r8, #0
 800ef80:	4640      	mov	r0, r8
 800ef82:	b007      	add	sp, #28
 800ef84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef88:	200104bc 	.word	0x200104bc
 800ef8c:	0801fb7c 	.word	0x0801fb7c
 800ef90:	0801ed14 	.word	0x0801ed14

0800ef94 <rmw_publisher_get_actual_qos>:
 800ef94:	b178      	cbz	r0, 800efb6 <rmw_publisher_get_actual_qos+0x22>
 800ef96:	b510      	push	{r4, lr}
 800ef98:	fab1 f481 	clz	r4, r1
 800ef9c:	0964      	lsrs	r4, r4, #5
 800ef9e:	b141      	cbz	r1, 800efb2 <rmw_publisher_get_actual_qos+0x1e>
 800efa0:	6843      	ldr	r3, [r0, #4]
 800efa2:	2250      	movs	r2, #80	; 0x50
 800efa4:	4608      	mov	r0, r1
 800efa6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800efaa:	f00e fee4 	bl	801dd76 <memcpy>
 800efae:	4620      	mov	r0, r4
 800efb0:	bd10      	pop	{r4, pc}
 800efb2:	200b      	movs	r0, #11
 800efb4:	bd10      	pop	{r4, pc}
 800efb6:	200b      	movs	r0, #11
 800efb8:	4770      	bx	lr
 800efba:	bf00      	nop

0800efbc <rmw_destroy_publisher>:
 800efbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efc0:	b128      	cbz	r0, 800efce <rmw_destroy_publisher+0x12>
 800efc2:	4604      	mov	r4, r0
 800efc4:	6800      	ldr	r0, [r0, #0]
 800efc6:	460d      	mov	r5, r1
 800efc8:	f000 fc42 	bl	800f850 <is_uxrce_rmw_identifier_valid>
 800efcc:	b918      	cbnz	r0, 800efd6 <rmw_destroy_publisher+0x1a>
 800efce:	2401      	movs	r4, #1
 800efd0:	4620      	mov	r0, r4
 800efd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efd6:	6863      	ldr	r3, [r4, #4]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d0f8      	beq.n	800efce <rmw_destroy_publisher+0x12>
 800efdc:	fab5 f485 	clz	r4, r5
 800efe0:	0964      	lsrs	r4, r4, #5
 800efe2:	2d00      	cmp	r5, #0
 800efe4:	d0f3      	beq.n	800efce <rmw_destroy_publisher+0x12>
 800efe6:	6828      	ldr	r0, [r5, #0]
 800efe8:	f000 fc32 	bl	800f850 <is_uxrce_rmw_identifier_valid>
 800efec:	2800      	cmp	r0, #0
 800efee:	d0ee      	beq.n	800efce <rmw_destroy_publisher+0x12>
 800eff0:	686e      	ldr	r6, [r5, #4]
 800eff2:	2e00      	cmp	r6, #0
 800eff4:	d0eb      	beq.n	800efce <rmw_destroy_publisher+0x12>
 800eff6:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800eff8:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 800effc:	f00a fe86 	bl	8019d0c <destroy_topic>
 800f000:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800f004:	6972      	ldr	r2, [r6, #20]
 800f006:	6918      	ldr	r0, [r3, #16]
 800f008:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f00c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f010:	6819      	ldr	r1, [r3, #0]
 800f012:	f002 fdbb 	bl	8011b8c <uxr_buffer_delete_entity>
 800f016:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800f01a:	4680      	mov	r8, r0
 800f01c:	6932      	ldr	r2, [r6, #16]
 800f01e:	6918      	ldr	r0, [r3, #16]
 800f020:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800f024:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f028:	6819      	ldr	r1, [r3, #0]
 800f02a:	f002 fdaf 	bl	8011b8c <uxr_buffer_delete_entity>
 800f02e:	4606      	mov	r6, r0
 800f030:	6938      	ldr	r0, [r7, #16]
 800f032:	4642      	mov	r2, r8
 800f034:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800f038:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800f03c:	f000 faf6 	bl	800f62c <run_xrce_session>
 800f040:	693f      	ldr	r7, [r7, #16]
 800f042:	4632      	mov	r2, r6
 800f044:	4606      	mov	r6, r0
 800f046:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800f04a:	4638      	mov	r0, r7
 800f04c:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800f050:	f000 faec 	bl	800f62c <run_xrce_session>
 800f054:	b126      	cbz	r6, 800f060 <rmw_destroy_publisher+0xa4>
 800f056:	b118      	cbz	r0, 800f060 <rmw_destroy_publisher+0xa4>
 800f058:	4628      	mov	r0, r5
 800f05a:	f000 f981 	bl	800f360 <rmw_uxrce_fini_publisher_memory>
 800f05e:	e7b7      	b.n	800efd0 <rmw_destroy_publisher+0x14>
 800f060:	2402      	movs	r4, #2
 800f062:	e7f9      	b.n	800f058 <rmw_destroy_publisher+0x9c>

0800f064 <rmw_uxrce_init_service_memory>:
 800f064:	b1e2      	cbz	r2, 800f0a0 <rmw_uxrce_init_service_memory+0x3c>
 800f066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f06a:	7b05      	ldrb	r5, [r0, #12]
 800f06c:	4606      	mov	r6, r0
 800f06e:	b9ad      	cbnz	r5, 800f09c <rmw_uxrce_init_service_memory+0x38>
 800f070:	23c8      	movs	r3, #200	; 0xc8
 800f072:	4617      	mov	r7, r2
 800f074:	460c      	mov	r4, r1
 800f076:	46a8      	mov	r8, r5
 800f078:	6083      	str	r3, [r0, #8]
 800f07a:	f240 1301 	movw	r3, #257	; 0x101
 800f07e:	e9c0 5500 	strd	r5, r5, [r0]
 800f082:	8183      	strh	r3, [r0, #12]
 800f084:	3501      	adds	r5, #1
 800f086:	4621      	mov	r1, r4
 800f088:	4630      	mov	r0, r6
 800f08a:	f00a fb3b 	bl	8019704 <put_memory>
 800f08e:	42af      	cmp	r7, r5
 800f090:	60a4      	str	r4, [r4, #8]
 800f092:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800f096:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800f09a:	d1f3      	bne.n	800f084 <rmw_uxrce_init_service_memory+0x20>
 800f09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0a0:	4770      	bx	lr
 800f0a2:	bf00      	nop

0800f0a4 <rmw_uxrce_init_client_memory>:
 800f0a4:	b1e2      	cbz	r2, 800f0e0 <rmw_uxrce_init_client_memory+0x3c>
 800f0a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0aa:	7b05      	ldrb	r5, [r0, #12]
 800f0ac:	4606      	mov	r6, r0
 800f0ae:	b9ad      	cbnz	r5, 800f0dc <rmw_uxrce_init_client_memory+0x38>
 800f0b0:	23c8      	movs	r3, #200	; 0xc8
 800f0b2:	4617      	mov	r7, r2
 800f0b4:	460c      	mov	r4, r1
 800f0b6:	46a8      	mov	r8, r5
 800f0b8:	6083      	str	r3, [r0, #8]
 800f0ba:	f240 1301 	movw	r3, #257	; 0x101
 800f0be:	e9c0 5500 	strd	r5, r5, [r0]
 800f0c2:	8183      	strh	r3, [r0, #12]
 800f0c4:	3501      	adds	r5, #1
 800f0c6:	4621      	mov	r1, r4
 800f0c8:	4630      	mov	r0, r6
 800f0ca:	f00a fb1b 	bl	8019704 <put_memory>
 800f0ce:	42af      	cmp	r7, r5
 800f0d0:	60a4      	str	r4, [r4, #8]
 800f0d2:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800f0d6:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800f0da:	d1f3      	bne.n	800f0c4 <rmw_uxrce_init_client_memory+0x20>
 800f0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0e0:	4770      	bx	lr
 800f0e2:	bf00      	nop

0800f0e4 <rmw_uxrce_init_publisher_memory>:
 800f0e4:	b1e2      	cbz	r2, 800f120 <rmw_uxrce_init_publisher_memory+0x3c>
 800f0e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ea:	7b05      	ldrb	r5, [r0, #12]
 800f0ec:	4606      	mov	r6, r0
 800f0ee:	b9ad      	cbnz	r5, 800f11c <rmw_uxrce_init_publisher_memory+0x38>
 800f0f0:	23d8      	movs	r3, #216	; 0xd8
 800f0f2:	4617      	mov	r7, r2
 800f0f4:	460c      	mov	r4, r1
 800f0f6:	46a8      	mov	r8, r5
 800f0f8:	6083      	str	r3, [r0, #8]
 800f0fa:	f240 1301 	movw	r3, #257	; 0x101
 800f0fe:	e9c0 5500 	strd	r5, r5, [r0]
 800f102:	8183      	strh	r3, [r0, #12]
 800f104:	3501      	adds	r5, #1
 800f106:	4621      	mov	r1, r4
 800f108:	4630      	mov	r0, r6
 800f10a:	f00a fafb 	bl	8019704 <put_memory>
 800f10e:	42af      	cmp	r7, r5
 800f110:	60a4      	str	r4, [r4, #8]
 800f112:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800f116:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800f11a:	d1f3      	bne.n	800f104 <rmw_uxrce_init_publisher_memory+0x20>
 800f11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f120:	4770      	bx	lr
 800f122:	bf00      	nop

0800f124 <rmw_uxrce_init_subscription_memory>:
 800f124:	b1e2      	cbz	r2, 800f160 <rmw_uxrce_init_subscription_memory+0x3c>
 800f126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f12a:	7b05      	ldrb	r5, [r0, #12]
 800f12c:	4606      	mov	r6, r0
 800f12e:	b9ad      	cbnz	r5, 800f15c <rmw_uxrce_init_subscription_memory+0x38>
 800f130:	23d8      	movs	r3, #216	; 0xd8
 800f132:	4617      	mov	r7, r2
 800f134:	460c      	mov	r4, r1
 800f136:	46a8      	mov	r8, r5
 800f138:	6083      	str	r3, [r0, #8]
 800f13a:	f240 1301 	movw	r3, #257	; 0x101
 800f13e:	e9c0 5500 	strd	r5, r5, [r0]
 800f142:	8183      	strh	r3, [r0, #12]
 800f144:	3501      	adds	r5, #1
 800f146:	4621      	mov	r1, r4
 800f148:	4630      	mov	r0, r6
 800f14a:	f00a fadb 	bl	8019704 <put_memory>
 800f14e:	42af      	cmp	r7, r5
 800f150:	60a4      	str	r4, [r4, #8]
 800f152:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800f156:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800f15a:	d1f3      	bne.n	800f144 <rmw_uxrce_init_subscription_memory+0x20>
 800f15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f160:	4770      	bx	lr
 800f162:	bf00      	nop

0800f164 <rmw_uxrce_init_node_memory>:
 800f164:	b1e2      	cbz	r2, 800f1a0 <rmw_uxrce_init_node_memory+0x3c>
 800f166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f16a:	7b05      	ldrb	r5, [r0, #12]
 800f16c:	4606      	mov	r6, r0
 800f16e:	b9ad      	cbnz	r5, 800f19c <rmw_uxrce_init_node_memory+0x38>
 800f170:	23a4      	movs	r3, #164	; 0xa4
 800f172:	4617      	mov	r7, r2
 800f174:	460c      	mov	r4, r1
 800f176:	46a8      	mov	r8, r5
 800f178:	6083      	str	r3, [r0, #8]
 800f17a:	f240 1301 	movw	r3, #257	; 0x101
 800f17e:	e9c0 5500 	strd	r5, r5, [r0]
 800f182:	8183      	strh	r3, [r0, #12]
 800f184:	3501      	adds	r5, #1
 800f186:	4621      	mov	r1, r4
 800f188:	4630      	mov	r0, r6
 800f18a:	f00a fabb 	bl	8019704 <put_memory>
 800f18e:	42af      	cmp	r7, r5
 800f190:	60a4      	str	r4, [r4, #8]
 800f192:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800f196:	f804 8c98 	strb.w	r8, [r4, #-152]
 800f19a:	d1f3      	bne.n	800f184 <rmw_uxrce_init_node_memory+0x20>
 800f19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1a0:	4770      	bx	lr
 800f1a2:	bf00      	nop

0800f1a4 <rmw_uxrce_init_session_memory>:
 800f1a4:	b1ea      	cbz	r2, 800f1e2 <rmw_uxrce_init_session_memory+0x3e>
 800f1a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1aa:	7b05      	ldrb	r5, [r0, #12]
 800f1ac:	4606      	mov	r6, r0
 800f1ae:	b9b5      	cbnz	r5, 800f1de <rmw_uxrce_init_session_memory+0x3a>
 800f1b0:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800f1b4:	f240 1301 	movw	r3, #257	; 0x101
 800f1b8:	4617      	mov	r7, r2
 800f1ba:	460c      	mov	r4, r1
 800f1bc:	46a9      	mov	r9, r5
 800f1be:	f8c0 8008 	str.w	r8, [r0, #8]
 800f1c2:	8183      	strh	r3, [r0, #12]
 800f1c4:	e9c0 5500 	strd	r5, r5, [r0]
 800f1c8:	3501      	adds	r5, #1
 800f1ca:	4621      	mov	r1, r4
 800f1cc:	4630      	mov	r0, r6
 800f1ce:	f00a fa99 	bl	8019704 <put_memory>
 800f1d2:	42af      	cmp	r7, r5
 800f1d4:	60a4      	str	r4, [r4, #8]
 800f1d6:	f884 900c 	strb.w	r9, [r4, #12]
 800f1da:	4444      	add	r4, r8
 800f1dc:	d1f4      	bne.n	800f1c8 <rmw_uxrce_init_session_memory+0x24>
 800f1de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1e2:	4770      	bx	lr

0800f1e4 <rmw_uxrce_init_topic_memory>:
 800f1e4:	b1e2      	cbz	r2, 800f220 <rmw_uxrce_init_topic_memory+0x3c>
 800f1e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1ea:	7b05      	ldrb	r5, [r0, #12]
 800f1ec:	4606      	mov	r6, r0
 800f1ee:	b9ad      	cbnz	r5, 800f21c <rmw_uxrce_init_topic_memory+0x38>
 800f1f0:	231c      	movs	r3, #28
 800f1f2:	4617      	mov	r7, r2
 800f1f4:	460c      	mov	r4, r1
 800f1f6:	46a8      	mov	r8, r5
 800f1f8:	6083      	str	r3, [r0, #8]
 800f1fa:	f240 1301 	movw	r3, #257	; 0x101
 800f1fe:	e9c0 5500 	strd	r5, r5, [r0]
 800f202:	8183      	strh	r3, [r0, #12]
 800f204:	3501      	adds	r5, #1
 800f206:	4621      	mov	r1, r4
 800f208:	4630      	mov	r0, r6
 800f20a:	f00a fa7b 	bl	8019704 <put_memory>
 800f20e:	42af      	cmp	r7, r5
 800f210:	60a4      	str	r4, [r4, #8]
 800f212:	f104 041c 	add.w	r4, r4, #28
 800f216:	f804 8c10 	strb.w	r8, [r4, #-16]
 800f21a:	d1f3      	bne.n	800f204 <rmw_uxrce_init_topic_memory+0x20>
 800f21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f220:	4770      	bx	lr
 800f222:	bf00      	nop

0800f224 <rmw_uxrce_init_static_input_buffer_memory>:
 800f224:	b1ea      	cbz	r2, 800f262 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800f226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f22a:	7b05      	ldrb	r5, [r0, #12]
 800f22c:	4606      	mov	r6, r0
 800f22e:	b9b5      	cbnz	r5, 800f25e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800f230:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800f234:	4617      	mov	r7, r2
 800f236:	460c      	mov	r4, r1
 800f238:	46a8      	mov	r8, r5
 800f23a:	6083      	str	r3, [r0, #8]
 800f23c:	f240 1301 	movw	r3, #257	; 0x101
 800f240:	e9c0 5500 	strd	r5, r5, [r0]
 800f244:	8183      	strh	r3, [r0, #12]
 800f246:	3501      	adds	r5, #1
 800f248:	4621      	mov	r1, r4
 800f24a:	4630      	mov	r0, r6
 800f24c:	f00a fa5a 	bl	8019704 <put_memory>
 800f250:	42af      	cmp	r7, r5
 800f252:	60a4      	str	r4, [r4, #8]
 800f254:	f884 800c 	strb.w	r8, [r4, #12]
 800f258:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800f25c:	d1f3      	bne.n	800f246 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800f25e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f262:	4770      	bx	lr

0800f264 <rmw_uxrce_init_init_options_impl_memory>:
 800f264:	b1e2      	cbz	r2, 800f2a0 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800f266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f26a:	7b05      	ldrb	r5, [r0, #12]
 800f26c:	4606      	mov	r6, r0
 800f26e:	b9ad      	cbnz	r5, 800f29c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800f270:	232c      	movs	r3, #44	; 0x2c
 800f272:	4617      	mov	r7, r2
 800f274:	460c      	mov	r4, r1
 800f276:	46a8      	mov	r8, r5
 800f278:	6083      	str	r3, [r0, #8]
 800f27a:	f240 1301 	movw	r3, #257	; 0x101
 800f27e:	e9c0 5500 	strd	r5, r5, [r0]
 800f282:	8183      	strh	r3, [r0, #12]
 800f284:	3501      	adds	r5, #1
 800f286:	4621      	mov	r1, r4
 800f288:	4630      	mov	r0, r6
 800f28a:	f00a fa3b 	bl	8019704 <put_memory>
 800f28e:	42af      	cmp	r7, r5
 800f290:	60a4      	str	r4, [r4, #8]
 800f292:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800f296:	f804 8c20 	strb.w	r8, [r4, #-32]
 800f29a:	d1f3      	bne.n	800f284 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800f29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2a0:	4770      	bx	lr
 800f2a2:	bf00      	nop

0800f2a4 <rmw_uxrce_init_wait_set_memory>:
 800f2a4:	b1e2      	cbz	r2, 800f2e0 <rmw_uxrce_init_wait_set_memory+0x3c>
 800f2a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2aa:	7b05      	ldrb	r5, [r0, #12]
 800f2ac:	4606      	mov	r6, r0
 800f2ae:	b9ad      	cbnz	r5, 800f2dc <rmw_uxrce_init_wait_set_memory+0x38>
 800f2b0:	231c      	movs	r3, #28
 800f2b2:	4617      	mov	r7, r2
 800f2b4:	460c      	mov	r4, r1
 800f2b6:	46a8      	mov	r8, r5
 800f2b8:	6083      	str	r3, [r0, #8]
 800f2ba:	f240 1301 	movw	r3, #257	; 0x101
 800f2be:	e9c0 5500 	strd	r5, r5, [r0]
 800f2c2:	8183      	strh	r3, [r0, #12]
 800f2c4:	3501      	adds	r5, #1
 800f2c6:	4621      	mov	r1, r4
 800f2c8:	4630      	mov	r0, r6
 800f2ca:	f00a fa1b 	bl	8019704 <put_memory>
 800f2ce:	42af      	cmp	r7, r5
 800f2d0:	60a4      	str	r4, [r4, #8]
 800f2d2:	f104 041c 	add.w	r4, r4, #28
 800f2d6:	f804 8c10 	strb.w	r8, [r4, #-16]
 800f2da:	d1f3      	bne.n	800f2c4 <rmw_uxrce_init_wait_set_memory+0x20>
 800f2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2e0:	4770      	bx	lr
 800f2e2:	bf00      	nop

0800f2e4 <rmw_uxrce_init_guard_condition_memory>:
 800f2e4:	b1e2      	cbz	r2, 800f320 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800f2e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2ea:	7b05      	ldrb	r5, [r0, #12]
 800f2ec:	4606      	mov	r6, r0
 800f2ee:	b9ad      	cbnz	r5, 800f31c <rmw_uxrce_init_guard_condition_memory+0x38>
 800f2f0:	2320      	movs	r3, #32
 800f2f2:	4617      	mov	r7, r2
 800f2f4:	460c      	mov	r4, r1
 800f2f6:	46a8      	mov	r8, r5
 800f2f8:	6083      	str	r3, [r0, #8]
 800f2fa:	f240 1301 	movw	r3, #257	; 0x101
 800f2fe:	e9c0 5500 	strd	r5, r5, [r0]
 800f302:	8183      	strh	r3, [r0, #12]
 800f304:	3501      	adds	r5, #1
 800f306:	4621      	mov	r1, r4
 800f308:	4630      	mov	r0, r6
 800f30a:	f00a f9fb 	bl	8019704 <put_memory>
 800f30e:	42af      	cmp	r7, r5
 800f310:	60a4      	str	r4, [r4, #8]
 800f312:	f104 0420 	add.w	r4, r4, #32
 800f316:	f804 8c14 	strb.w	r8, [r4, #-20]
 800f31a:	d1f3      	bne.n	800f304 <rmw_uxrce_init_guard_condition_memory+0x20>
 800f31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f320:	4770      	bx	lr
 800f322:	bf00      	nop

0800f324 <rmw_uxrce_fini_session_memory>:
 800f324:	4601      	mov	r1, r0
 800f326:	4801      	ldr	r0, [pc, #4]	; (800f32c <rmw_uxrce_fini_session_memory+0x8>)
 800f328:	f00a b9ec 	b.w	8019704 <put_memory>
 800f32c:	200104dc 	.word	0x200104dc

0800f330 <rmw_uxrce_fini_node_memory>:
 800f330:	b538      	push	{r3, r4, r5, lr}
 800f332:	4604      	mov	r4, r0
 800f334:	6800      	ldr	r0, [r0, #0]
 800f336:	b128      	cbz	r0, 800f344 <rmw_uxrce_fini_node_memory+0x14>
 800f338:	4b07      	ldr	r3, [pc, #28]	; (800f358 <rmw_uxrce_fini_node_memory+0x28>)
 800f33a:	6819      	ldr	r1, [r3, #0]
 800f33c:	f7f0 ff80 	bl	8000240 <strcmp>
 800f340:	b940      	cbnz	r0, 800f354 <rmw_uxrce_fini_node_memory+0x24>
 800f342:	6020      	str	r0, [r4, #0]
 800f344:	6861      	ldr	r1, [r4, #4]
 800f346:	b129      	cbz	r1, 800f354 <rmw_uxrce_fini_node_memory+0x24>
 800f348:	2500      	movs	r5, #0
 800f34a:	4804      	ldr	r0, [pc, #16]	; (800f35c <rmw_uxrce_fini_node_memory+0x2c>)
 800f34c:	610d      	str	r5, [r1, #16]
 800f34e:	f00a f9d9 	bl	8019704 <put_memory>
 800f352:	6065      	str	r5, [r4, #4]
 800f354:	bd38      	pop	{r3, r4, r5, pc}
 800f356:	bf00      	nop
 800f358:	080206c8 	.word	0x080206c8
 800f35c:	200104ac 	.word	0x200104ac

0800f360 <rmw_uxrce_fini_publisher_memory>:
 800f360:	b510      	push	{r4, lr}
 800f362:	4604      	mov	r4, r0
 800f364:	6800      	ldr	r0, [r0, #0]
 800f366:	b128      	cbz	r0, 800f374 <rmw_uxrce_fini_publisher_memory+0x14>
 800f368:	4b06      	ldr	r3, [pc, #24]	; (800f384 <rmw_uxrce_fini_publisher_memory+0x24>)
 800f36a:	6819      	ldr	r1, [r3, #0]
 800f36c:	f7f0 ff68 	bl	8000240 <strcmp>
 800f370:	b938      	cbnz	r0, 800f382 <rmw_uxrce_fini_publisher_memory+0x22>
 800f372:	6020      	str	r0, [r4, #0]
 800f374:	6861      	ldr	r1, [r4, #4]
 800f376:	b121      	cbz	r1, 800f382 <rmw_uxrce_fini_publisher_memory+0x22>
 800f378:	4803      	ldr	r0, [pc, #12]	; (800f388 <rmw_uxrce_fini_publisher_memory+0x28>)
 800f37a:	f00a f9c3 	bl	8019704 <put_memory>
 800f37e:	2300      	movs	r3, #0
 800f380:	6063      	str	r3, [r4, #4]
 800f382:	bd10      	pop	{r4, pc}
 800f384:	080206c8 	.word	0x080206c8
 800f388:	200104bc 	.word	0x200104bc

0800f38c <rmw_uxrce_fini_subscription_memory>:
 800f38c:	b510      	push	{r4, lr}
 800f38e:	4604      	mov	r4, r0
 800f390:	6800      	ldr	r0, [r0, #0]
 800f392:	b128      	cbz	r0, 800f3a0 <rmw_uxrce_fini_subscription_memory+0x14>
 800f394:	4b06      	ldr	r3, [pc, #24]	; (800f3b0 <rmw_uxrce_fini_subscription_memory+0x24>)
 800f396:	6819      	ldr	r1, [r3, #0]
 800f398:	f7f0 ff52 	bl	8000240 <strcmp>
 800f39c:	b938      	cbnz	r0, 800f3ae <rmw_uxrce_fini_subscription_memory+0x22>
 800f39e:	6020      	str	r0, [r4, #0]
 800f3a0:	6861      	ldr	r1, [r4, #4]
 800f3a2:	b121      	cbz	r1, 800f3ae <rmw_uxrce_fini_subscription_memory+0x22>
 800f3a4:	4803      	ldr	r0, [pc, #12]	; (800f3b4 <rmw_uxrce_fini_subscription_memory+0x28>)
 800f3a6:	f00a f9ad 	bl	8019704 <put_memory>
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	6063      	str	r3, [r4, #4]
 800f3ae:	bd10      	pop	{r4, pc}
 800f3b0:	080206c8 	.word	0x080206c8
 800f3b4:	200104fc 	.word	0x200104fc

0800f3b8 <rmw_uxrce_fini_service_memory>:
 800f3b8:	b510      	push	{r4, lr}
 800f3ba:	4604      	mov	r4, r0
 800f3bc:	6800      	ldr	r0, [r0, #0]
 800f3be:	b128      	cbz	r0, 800f3cc <rmw_uxrce_fini_service_memory+0x14>
 800f3c0:	4b06      	ldr	r3, [pc, #24]	; (800f3dc <rmw_uxrce_fini_service_memory+0x24>)
 800f3c2:	6819      	ldr	r1, [r3, #0]
 800f3c4:	f7f0 ff3c 	bl	8000240 <strcmp>
 800f3c8:	b938      	cbnz	r0, 800f3da <rmw_uxrce_fini_service_memory+0x22>
 800f3ca:	6020      	str	r0, [r4, #0]
 800f3cc:	6861      	ldr	r1, [r4, #4]
 800f3ce:	b121      	cbz	r1, 800f3da <rmw_uxrce_fini_service_memory+0x22>
 800f3d0:	4803      	ldr	r0, [pc, #12]	; (800f3e0 <rmw_uxrce_fini_service_memory+0x28>)
 800f3d2:	f00a f997 	bl	8019704 <put_memory>
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	6063      	str	r3, [r4, #4]
 800f3da:	bd10      	pop	{r4, pc}
 800f3dc:	080206c8 	.word	0x080206c8
 800f3e0:	200104cc 	.word	0x200104cc

0800f3e4 <rmw_uxrce_fini_client_memory>:
 800f3e4:	b510      	push	{r4, lr}
 800f3e6:	4604      	mov	r4, r0
 800f3e8:	6800      	ldr	r0, [r0, #0]
 800f3ea:	b128      	cbz	r0, 800f3f8 <rmw_uxrce_fini_client_memory+0x14>
 800f3ec:	4b06      	ldr	r3, [pc, #24]	; (800f408 <rmw_uxrce_fini_client_memory+0x24>)
 800f3ee:	6819      	ldr	r1, [r3, #0]
 800f3f0:	f7f0 ff26 	bl	8000240 <strcmp>
 800f3f4:	b938      	cbnz	r0, 800f406 <rmw_uxrce_fini_client_memory+0x22>
 800f3f6:	6020      	str	r0, [r4, #0]
 800f3f8:	6861      	ldr	r1, [r4, #4]
 800f3fa:	b121      	cbz	r1, 800f406 <rmw_uxrce_fini_client_memory+0x22>
 800f3fc:	4803      	ldr	r0, [pc, #12]	; (800f40c <rmw_uxrce_fini_client_memory+0x28>)
 800f3fe:	f00a f981 	bl	8019704 <put_memory>
 800f402:	2300      	movs	r3, #0
 800f404:	6063      	str	r3, [r4, #4]
 800f406:	bd10      	pop	{r4, pc}
 800f408:	080206c8 	.word	0x080206c8
 800f40c:	2000bb18 	.word	0x2000bb18

0800f410 <rmw_uxrce_fini_topic_memory>:
 800f410:	b510      	push	{r4, lr}
 800f412:	4604      	mov	r4, r0
 800f414:	4803      	ldr	r0, [pc, #12]	; (800f424 <rmw_uxrce_fini_topic_memory+0x14>)
 800f416:	4621      	mov	r1, r4
 800f418:	f00a f974 	bl	8019704 <put_memory>
 800f41c:	2300      	movs	r3, #0
 800f41e:	61a3      	str	r3, [r4, #24]
 800f420:	bd10      	pop	{r4, pc}
 800f422:	bf00      	nop
 800f424:	2001050c 	.word	0x2001050c

0800f428 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800f428:	b082      	sub	sp, #8
 800f42a:	492b      	ldr	r1, [pc, #172]	; (800f4d8 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800f42c:	b530      	push	{r4, r5, lr}
 800f42e:	680d      	ldr	r5, [r1, #0]
 800f430:	ac03      	add	r4, sp, #12
 800f432:	e884 000c 	stmia.w	r4, {r2, r3}
 800f436:	461c      	mov	r4, r3
 800f438:	2d00      	cmp	r5, #0
 800f43a:	d04b      	beq.n	800f4d4 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 800f43c:	462b      	mov	r3, r5
 800f43e:	2100      	movs	r1, #0
 800f440:	689a      	ldr	r2, [r3, #8]
 800f442:	685b      	ldr	r3, [r3, #4]
 800f444:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800f448:	4290      	cmp	r0, r2
 800f44a:	bf08      	it	eq
 800f44c:	3101      	addeq	r1, #1
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d1f6      	bne.n	800f440 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800f452:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f456:	2b02      	cmp	r3, #2
 800f458:	d029      	beq.n	800f4ae <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800f45a:	d820      	bhi.n	800f49e <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 800f45c:	428c      	cmp	r4, r1
 800f45e:	d828      	bhi.n	800f4b2 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800f460:	fab4 f284 	clz	r2, r4
 800f464:	0952      	lsrs	r2, r2, #5
 800f466:	b324      	cbz	r4, 800f4b2 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800f468:	b1dd      	cbz	r5, 800f4a2 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 800f46a:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800f46e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800f472:	e001      	b.n	800f478 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 800f474:	686d      	ldr	r5, [r5, #4]
 800f476:	b1ad      	cbz	r5, 800f4a4 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800f478:	68ab      	ldr	r3, [r5, #8]
 800f47a:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 800f47e:	4288      	cmp	r0, r1
 800f480:	d1f8      	bne.n	800f474 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800f482:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 800f486:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800f48a:	4561      	cmp	r1, ip
 800f48c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f490:	eb73 0e04 	sbcs.w	lr, r3, r4
 800f494:	daee      	bge.n	800f474 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800f496:	468c      	mov	ip, r1
 800f498:	461c      	mov	r4, r3
 800f49a:	462a      	mov	r2, r5
 800f49c:	e7ea      	b.n	800f474 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800f49e:	2b03      	cmp	r3, #3
 800f4a0:	d0dc      	beq.n	800f45c <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	4610      	mov	r0, r2
 800f4a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4aa:	b002      	add	sp, #8
 800f4ac:	4770      	bx	lr
 800f4ae:	428c      	cmp	r4, r1
 800f4b0:	d905      	bls.n	800f4be <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800f4b2:	4809      	ldr	r0, [pc, #36]	; (800f4d8 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800f4b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4b8:	b002      	add	sp, #8
 800f4ba:	f00a b913 	b.w	80196e4 <get_memory>
 800f4be:	fab4 f284 	clz	r2, r4
 800f4c2:	0952      	lsrs	r2, r2, #5
 800f4c4:	2c00      	cmp	r4, #0
 800f4c6:	d1ed      	bne.n	800f4a4 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800f4c8:	4803      	ldr	r0, [pc, #12]	; (800f4d8 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800f4ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4ce:	b002      	add	sp, #8
 800f4d0:	f00a b908 	b.w	80196e4 <get_memory>
 800f4d4:	4629      	mov	r1, r5
 800f4d6:	e7bc      	b.n	800f452 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800f4d8:	200104ec 	.word	0x200104ec

0800f4dc <rmw_uxrce_find_static_input_buffer_by_owner>:
 800f4dc:	4b12      	ldr	r3, [pc, #72]	; (800f528 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	b530      	push	{r4, r5, lr}
 800f4e2:	b1f3      	cbz	r3, 800f522 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800f4e4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800f4e8:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 800f4ec:	2400      	movs	r4, #0
 800f4ee:	e001      	b.n	800f4f4 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800f4f0:	685b      	ldr	r3, [r3, #4]
 800f4f2:	b1a3      	cbz	r3, 800f51e <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800f4f4:	689a      	ldr	r2, [r3, #8]
 800f4f6:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800f4fa:	4288      	cmp	r0, r1
 800f4fc:	d1f8      	bne.n	800f4f0 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800f4fe:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 800f502:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 800f506:	4571      	cmp	r1, lr
 800f508:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800f50c:	eb72 050c 	sbcs.w	r5, r2, ip
 800f510:	daee      	bge.n	800f4f0 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800f512:	461c      	mov	r4, r3
 800f514:	685b      	ldr	r3, [r3, #4]
 800f516:	468e      	mov	lr, r1
 800f518:	4694      	mov	ip, r2
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d1ea      	bne.n	800f4f4 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800f51e:	4620      	mov	r0, r4
 800f520:	bd30      	pop	{r4, r5, pc}
 800f522:	461c      	mov	r4, r3
 800f524:	4620      	mov	r0, r4
 800f526:	bd30      	pop	{r4, r5, pc}
 800f528:	200104ec 	.word	0x200104ec
 800f52c:	00000000 	.word	0x00000000

0800f530 <rmw_uxrce_clean_expired_static_input_buffer>:
 800f530:	4b3d      	ldr	r3, [pc, #244]	; (800f628 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800f532:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f536:	681f      	ldr	r7, [r3, #0]
 800f538:	ed2d 8b06 	vpush	{d8-d10}
 800f53c:	b08d      	sub	sp, #52	; 0x34
 800f53e:	f00b fb0d 	bl	801ab5c <rmw_uros_epoch_nanos>
 800f542:	2f00      	cmp	r7, #0
 800f544:	d05d      	beq.n	800f602 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800f546:	46b8      	mov	r8, r7
 800f548:	4681      	mov	r9, r0
 800f54a:	468a      	mov	sl, r1
 800f54c:	ac04      	add	r4, sp, #16
 800f54e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f552:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800f556:	2b04      	cmp	r3, #4
 800f558:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 800f610 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800f55c:	ed9f ab2e 	vldr	d10, [pc, #184]	; 800f618 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800f560:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 800f620 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800f564:	d03f      	beq.n	800f5e6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800f566:	2b05      	cmp	r3, #5
 800f568:	d044      	beq.n	800f5f4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800f56a:	2b03      	cmp	r3, #3
 800f56c:	d03b      	beq.n	800f5e6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800f56e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f572:	ed8d ab06 	vstr	d10, [sp, #24]
 800f576:	ab08      	add	r3, sp, #32
 800f578:	ed8d 8b08 	vstr	d8, [sp, #32]
 800f57c:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 800f580:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f582:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f586:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f58a:	f009 fecd 	bl	8019328 <rmw_time_equal>
 800f58e:	b118      	cbz	r0, 800f598 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800f590:	ed8d 9b04 	vstr	d9, [sp, #16]
 800f594:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f598:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 800f59c:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 800f5a0:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800f5a4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800f5a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f5ac:	f009 ff12 	bl	80193d4 <rmw_time_total_nsec>
 800f5b0:	1830      	adds	r0, r6, r0
 800f5b2:	eb47 0101 	adc.w	r1, r7, r1
 800f5b6:	4548      	cmp	r0, r9
 800f5b8:	eb71 030a 	sbcs.w	r3, r1, sl
 800f5bc:	db05      	blt.n	800f5ca <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800f5be:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800f5c2:	4591      	cmp	r9, r2
 800f5c4:	eb7a 0303 	sbcs.w	r3, sl, r3
 800f5c8:	da03      	bge.n	800f5d2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800f5ca:	4641      	mov	r1, r8
 800f5cc:	4816      	ldr	r0, [pc, #88]	; (800f628 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800f5ce:	f00a f899 	bl	8019704 <put_memory>
 800f5d2:	f1bb 0f00 	cmp.w	fp, #0
 800f5d6:	d014      	beq.n	800f602 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800f5d8:	46d8      	mov	r8, fp
 800f5da:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f5de:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800f5e2:	2b04      	cmp	r3, #4
 800f5e4:	d1bf      	bne.n	800f566 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800f5e6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800f5ea:	3340      	adds	r3, #64	; 0x40
 800f5ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f5ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f5f2:	e7c0      	b.n	800f576 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800f5f4:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800f5f8:	3348      	adds	r3, #72	; 0x48
 800f5fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f5fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f600:	e7b9      	b.n	800f576 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800f602:	b00d      	add	sp, #52	; 0x34
 800f604:	ecbd 8b06 	vpop	{d8-d10}
 800f608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f60c:	f3af 8000 	nop.w
	...
 800f618:	00000001 	.word	0x00000001
 800f61c:	00000000 	.word	0x00000000
 800f620:	0000001e 	.word	0x0000001e
 800f624:	00000000 	.word	0x00000000
 800f628:	200104ec 	.word	0x200104ec

0800f62c <run_xrce_session>:
 800f62c:	b510      	push	{r4, lr}
 800f62e:	788c      	ldrb	r4, [r1, #2]
 800f630:	b086      	sub	sp, #24
 800f632:	2c01      	cmp	r4, #1
 800f634:	f8ad 200e 	strh.w	r2, [sp, #14]
 800f638:	d00c      	beq.n	800f654 <run_xrce_session+0x28>
 800f63a:	2401      	movs	r4, #1
 800f63c:	4619      	mov	r1, r3
 800f63e:	f10d 020e 	add.w	r2, sp, #14
 800f642:	f10d 0317 	add.w	r3, sp, #23
 800f646:	9400      	str	r4, [sp, #0]
 800f648:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f64c:	f003 fa08 	bl	8012a60 <uxr_run_session_until_all_status>
 800f650:	b006      	add	sp, #24
 800f652:	bd10      	pop	{r4, pc}
 800f654:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800f658:	f002 fe24 	bl	80122a4 <uxr_flash_output_streams>
 800f65c:	4620      	mov	r0, r4
 800f65e:	b006      	add	sp, #24
 800f660:	bd10      	pop	{r4, pc}
 800f662:	bf00      	nop

0800f664 <convert_qos_profile>:
 800f664:	7a4a      	ldrb	r2, [r1, #9]
 800f666:	f891 c008 	ldrb.w	ip, [r1, #8]
 800f66a:	2a02      	cmp	r2, #2
 800f66c:	bf18      	it	ne
 800f66e:	2200      	movne	r2, #0
 800f670:	7002      	strb	r2, [r0, #0]
 800f672:	f1ac 0202 	sub.w	r2, ip, #2
 800f676:	fab2 f282 	clz	r2, r2
 800f67a:	0952      	lsrs	r2, r2, #5
 800f67c:	7042      	strb	r2, [r0, #1]
 800f67e:	780a      	ldrb	r2, [r1, #0]
 800f680:	8889      	ldrh	r1, [r1, #4]
 800f682:	f1a2 0202 	sub.w	r2, r2, #2
 800f686:	8081      	strh	r1, [r0, #4]
 800f688:	fab2 f282 	clz	r2, r2
 800f68c:	0952      	lsrs	r2, r2, #5
 800f68e:	7082      	strb	r2, [r0, #2]
 800f690:	4770      	bx	lr
 800f692:	bf00      	nop

0800f694 <generate_service_topics>:
 800f694:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f696:	461d      	mov	r5, r3
 800f698:	b083      	sub	sp, #12
 800f69a:	4606      	mov	r6, r0
 800f69c:	4c11      	ldr	r4, [pc, #68]	; (800f6e4 <generate_service_topics+0x50>)
 800f69e:	4608      	mov	r0, r1
 800f6a0:	4b11      	ldr	r3, [pc, #68]	; (800f6e8 <generate_service_topics+0x54>)
 800f6a2:	4617      	mov	r7, r2
 800f6a4:	4629      	mov	r1, r5
 800f6a6:	4a11      	ldr	r2, [pc, #68]	; (800f6ec <generate_service_topics+0x58>)
 800f6a8:	9401      	str	r4, [sp, #4]
 800f6aa:	9600      	str	r6, [sp, #0]
 800f6ac:	f00e f958 	bl	801d960 <sniprintf>
 800f6b0:	4a0f      	ldr	r2, [pc, #60]	; (800f6f0 <generate_service_topics+0x5c>)
 800f6b2:	4604      	mov	r4, r0
 800f6b4:	4b0f      	ldr	r3, [pc, #60]	; (800f6f4 <generate_service_topics+0x60>)
 800f6b6:	9201      	str	r2, [sp, #4]
 800f6b8:	4638      	mov	r0, r7
 800f6ba:	4a0c      	ldr	r2, [pc, #48]	; (800f6ec <generate_service_topics+0x58>)
 800f6bc:	4629      	mov	r1, r5
 800f6be:	9600      	str	r6, [sp, #0]
 800f6c0:	f00e f94e 	bl	801d960 <sniprintf>
 800f6c4:	2c00      	cmp	r4, #0
 800f6c6:	bfa8      	it	ge
 800f6c8:	42a5      	cmpge	r5, r4
 800f6ca:	bfcc      	ite	gt
 800f6cc:	2401      	movgt	r4, #1
 800f6ce:	2400      	movle	r4, #0
 800f6d0:	dd05      	ble.n	800f6de <generate_service_topics+0x4a>
 800f6d2:	2800      	cmp	r0, #0
 800f6d4:	bfa8      	it	ge
 800f6d6:	4285      	cmpge	r5, r0
 800f6d8:	bfcc      	ite	gt
 800f6da:	2401      	movgt	r4, #1
 800f6dc:	2400      	movle	r4, #0
 800f6de:	4620      	mov	r0, r4
 800f6e0:	b003      	add	sp, #12
 800f6e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6e4:	0801fba0 	.word	0x0801fba0
 800f6e8:	0801fb9c 	.word	0x0801fb9c
 800f6ec:	0801fb78 	.word	0x0801fb78
 800f6f0:	0801fb94 	.word	0x0801fb94
 800f6f4:	0801fb90 	.word	0x0801fb90

0800f6f8 <generate_service_types>:
 800f6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6fc:	4606      	mov	r6, r0
 800f6fe:	b087      	sub	sp, #28
 800f700:	461c      	mov	r4, r3
 800f702:	6883      	ldr	r3, [r0, #8]
 800f704:	460d      	mov	r5, r1
 800f706:	4617      	mov	r7, r2
 800f708:	4798      	blx	r3
 800f70a:	68f3      	ldr	r3, [r6, #12]
 800f70c:	4606      	mov	r6, r0
 800f70e:	4798      	blx	r3
 800f710:	2300      	movs	r3, #0
 800f712:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800f716:	6872      	ldr	r2, [r6, #4]
 800f718:	702b      	strb	r3, [r5, #0]
 800f71a:	6813      	ldr	r3, [r2, #0]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d03f      	beq.n	800f7a0 <generate_service_types+0xa8>
 800f720:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800f7b4 <generate_service_types+0xbc>
 800f724:	4649      	mov	r1, r9
 800f726:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800f7bc <generate_service_types+0xc4>
 800f72a:	4628      	mov	r0, r5
 800f72c:	f8df a090 	ldr.w	sl, [pc, #144]	; 800f7c0 <generate_service_types+0xc8>
 800f730:	f8cd 8014 	str.w	r8, [sp, #20]
 800f734:	6852      	ldr	r2, [r2, #4]
 800f736:	9100      	str	r1, [sp, #0]
 800f738:	4621      	mov	r1, r4
 800f73a:	f8cd 8008 	str.w	r8, [sp, #8]
 800f73e:	f8cd a004 	str.w	sl, [sp, #4]
 800f742:	e9cd 9203 	strd	r9, r2, [sp, #12]
 800f746:	4a1a      	ldr	r2, [pc, #104]	; (800f7b0 <generate_service_types+0xb8>)
 800f748:	f00e f90a 	bl	801d960 <sniprintf>
 800f74c:	2300      	movs	r3, #0
 800f74e:	42a0      	cmp	r0, r4
 800f750:	ea6f 0600 	mvn.w	r6, r0
 800f754:	703b      	strb	r3, [r7, #0]
 800f756:	f8db 3000 	ldr.w	r3, [fp]
 800f75a:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 800f75e:	bfac      	ite	ge
 800f760:	2500      	movge	r5, #0
 800f762:	2501      	movlt	r5, #1
 800f764:	b30b      	cbz	r3, 800f7aa <generate_service_types+0xb2>
 800f766:	4a13      	ldr	r2, [pc, #76]	; (800f7b4 <generate_service_types+0xbc>)
 800f768:	f8cd 8014 	str.w	r8, [sp, #20]
 800f76c:	402e      	ands	r6, r5
 800f76e:	f8db 1004 	ldr.w	r1, [fp, #4]
 800f772:	4638      	mov	r0, r7
 800f774:	9104      	str	r1, [sp, #16]
 800f776:	4621      	mov	r1, r4
 800f778:	e9cd 2a00 	strd	r2, sl, [sp]
 800f77c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800f780:	4a0b      	ldr	r2, [pc, #44]	; (800f7b0 <generate_service_types+0xb8>)
 800f782:	f00e f8ed 	bl	801d960 <sniprintf>
 800f786:	2800      	cmp	r0, #0
 800f788:	bfb4      	ite	lt
 800f78a:	2600      	movlt	r6, #0
 800f78c:	f006 0601 	andge.w	r6, r6, #1
 800f790:	42a0      	cmp	r0, r4
 800f792:	bfac      	ite	ge
 800f794:	2000      	movge	r0, #0
 800f796:	f006 0001 	andlt.w	r0, r6, #1
 800f79a:	b007      	add	sp, #28
 800f79c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7a0:	4b05      	ldr	r3, [pc, #20]	; (800f7b8 <generate_service_types+0xc0>)
 800f7a2:	f8df 9010 	ldr.w	r9, [pc, #16]	; 800f7b4 <generate_service_types+0xbc>
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	e7bd      	b.n	800f726 <generate_service_types+0x2e>
 800f7aa:	4b03      	ldr	r3, [pc, #12]	; (800f7b8 <generate_service_types+0xc0>)
 800f7ac:	461a      	mov	r2, r3
 800f7ae:	e7db      	b.n	800f768 <generate_service_types+0x70>
 800f7b0:	0801fb70 	.word	0x0801fb70
 800f7b4:	0801fb6c 	.word	0x0801fb6c
 800f7b8:	080204a0 	.word	0x080204a0
 800f7bc:	0801fb80 	.word	0x0801fb80
 800f7c0:	0801fb84 	.word	0x0801fb84

0800f7c4 <generate_type_name>:
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	b530      	push	{r4, r5, lr}
 800f7c8:	700b      	strb	r3, [r1, #0]
 800f7ca:	b087      	sub	sp, #28
 800f7cc:	6803      	ldr	r3, [r0, #0]
 800f7ce:	4614      	mov	r4, r2
 800f7d0:	b1bb      	cbz	r3, 800f802 <generate_type_name+0x3e>
 800f7d2:	4a0e      	ldr	r2, [pc, #56]	; (800f80c <generate_type_name+0x48>)
 800f7d4:	4615      	mov	r5, r2
 800f7d6:	9500      	str	r5, [sp, #0]
 800f7d8:	9203      	str	r2, [sp, #12]
 800f7da:	4d0d      	ldr	r5, [pc, #52]	; (800f810 <generate_type_name+0x4c>)
 800f7dc:	6842      	ldr	r2, [r0, #4]
 800f7de:	4608      	mov	r0, r1
 800f7e0:	490c      	ldr	r1, [pc, #48]	; (800f814 <generate_type_name+0x50>)
 800f7e2:	9204      	str	r2, [sp, #16]
 800f7e4:	9105      	str	r1, [sp, #20]
 800f7e6:	9102      	str	r1, [sp, #8]
 800f7e8:	4621      	mov	r1, r4
 800f7ea:	4a0b      	ldr	r2, [pc, #44]	; (800f818 <generate_type_name+0x54>)
 800f7ec:	9501      	str	r5, [sp, #4]
 800f7ee:	f00e f8b7 	bl	801d960 <sniprintf>
 800f7f2:	2800      	cmp	r0, #0
 800f7f4:	bfa8      	it	ge
 800f7f6:	4284      	cmpge	r4, r0
 800f7f8:	bfcc      	ite	gt
 800f7fa:	2001      	movgt	r0, #1
 800f7fc:	2000      	movle	r0, #0
 800f7fe:	b007      	add	sp, #28
 800f800:	bd30      	pop	{r4, r5, pc}
 800f802:	4b06      	ldr	r3, [pc, #24]	; (800f81c <generate_type_name+0x58>)
 800f804:	4a01      	ldr	r2, [pc, #4]	; (800f80c <generate_type_name+0x48>)
 800f806:	461d      	mov	r5, r3
 800f808:	e7e5      	b.n	800f7d6 <generate_type_name+0x12>
 800f80a:	bf00      	nop
 800f80c:	0801fb6c 	.word	0x0801fb6c
 800f810:	0801fb84 	.word	0x0801fb84
 800f814:	0801fb80 	.word	0x0801fb80
 800f818:	0801fb70 	.word	0x0801fb70
 800f81c:	080204a0 	.word	0x080204a0

0800f820 <generate_topic_name>:
 800f820:	b530      	push	{r4, r5, lr}
 800f822:	4614      	mov	r4, r2
 800f824:	b083      	sub	sp, #12
 800f826:	4605      	mov	r5, r0
 800f828:	4b07      	ldr	r3, [pc, #28]	; (800f848 <generate_topic_name+0x28>)
 800f82a:	4a08      	ldr	r2, [pc, #32]	; (800f84c <generate_topic_name+0x2c>)
 800f82c:	4608      	mov	r0, r1
 800f82e:	9500      	str	r5, [sp, #0]
 800f830:	4621      	mov	r1, r4
 800f832:	f00e f895 	bl	801d960 <sniprintf>
 800f836:	2800      	cmp	r0, #0
 800f838:	bfa8      	it	ge
 800f83a:	4284      	cmpge	r4, r0
 800f83c:	bfcc      	ite	gt
 800f83e:	2001      	movgt	r0, #1
 800f840:	2000      	movle	r0, #0
 800f842:	b003      	add	sp, #12
 800f844:	bd30      	pop	{r4, r5, pc}
 800f846:	bf00      	nop
 800f848:	0801fba8 	.word	0x0801fba8
 800f84c:	0801fb88 	.word	0x0801fb88

0800f850 <is_uxrce_rmw_identifier_valid>:
 800f850:	b510      	push	{r4, lr}
 800f852:	4604      	mov	r4, r0
 800f854:	b140      	cbz	r0, 800f868 <is_uxrce_rmw_identifier_valid+0x18>
 800f856:	f009 ffcb 	bl	80197f0 <rmw_get_implementation_identifier>
 800f85a:	4601      	mov	r1, r0
 800f85c:	4620      	mov	r0, r4
 800f85e:	f7f0 fcef 	bl	8000240 <strcmp>
 800f862:	fab0 f080 	clz	r0, r0
 800f866:	0940      	lsrs	r0, r0, #5
 800f868:	bd10      	pop	{r4, pc}
 800f86a:	bf00      	nop

0800f86c <get_message_typesupport_handle>:
 800f86c:	6883      	ldr	r3, [r0, #8]
 800f86e:	4718      	bx	r3

0800f870 <get_message_typesupport_handle_function>:
 800f870:	b510      	push	{r4, lr}
 800f872:	4604      	mov	r4, r0
 800f874:	6800      	ldr	r0, [r0, #0]
 800f876:	f7f0 fce3 	bl	8000240 <strcmp>
 800f87a:	2800      	cmp	r0, #0
 800f87c:	bf0c      	ite	eq
 800f87e:	4620      	moveq	r0, r4
 800f880:	2000      	movne	r0, #0
 800f882:	bd10      	pop	{r4, pc}

0800f884 <get_service_typesupport_handle>:
 800f884:	6883      	ldr	r3, [r0, #8]
 800f886:	4718      	bx	r3

0800f888 <get_service_typesupport_handle_function>:
 800f888:	b510      	push	{r4, lr}
 800f88a:	4604      	mov	r4, r0
 800f88c:	6800      	ldr	r0, [r0, #0]
 800f88e:	f7f0 fcd7 	bl	8000240 <strcmp>
 800f892:	2800      	cmp	r0, #0
 800f894:	bf0c      	ite	eq
 800f896:	4620      	moveq	r0, r4
 800f898:	2000      	movne	r0, #0
 800f89a:	bd10      	pop	{r4, pc}

0800f89c <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800f89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8a0:	6805      	ldr	r5, [r0, #0]
 800f8a2:	4604      	mov	r4, r0
 800f8a4:	460e      	mov	r6, r1
 800f8a6:	4628      	mov	r0, r5
 800f8a8:	f7f0 fcca 	bl	8000240 <strcmp>
 800f8ac:	b1c8      	cbz	r0, 800f8e2 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800f8ae:	4b11      	ldr	r3, [pc, #68]	; (800f8f4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	429d      	cmp	r5, r3
 800f8b4:	d112      	bne.n	800f8dc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800f8b6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f8ba:	f8d8 4000 	ldr.w	r4, [r8]
 800f8be:	b16c      	cbz	r4, 800f8dc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800f8c0:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f8c4:	2700      	movs	r7, #0
 800f8c6:	3d04      	subs	r5, #4
 800f8c8:	4631      	mov	r1, r6
 800f8ca:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f8ce:	f7f0 fcb7 	bl	8000240 <strcmp>
 800f8d2:	00bb      	lsls	r3, r7, #2
 800f8d4:	b140      	cbz	r0, 800f8e8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800f8d6:	3701      	adds	r7, #1
 800f8d8:	42bc      	cmp	r4, r7
 800f8da:	d1f5      	bne.n	800f8c8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800f8dc:	2000      	movs	r0, #0
 800f8de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8e8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f8ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8f0:	58d3      	ldr	r3, [r2, r3]
 800f8f2:	4718      	bx	r3
 800f8f4:	20000ae8 	.word	0x20000ae8

0800f8f8 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800f8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8fc:	6805      	ldr	r5, [r0, #0]
 800f8fe:	4604      	mov	r4, r0
 800f900:	460e      	mov	r6, r1
 800f902:	4628      	mov	r0, r5
 800f904:	f7f0 fc9c 	bl	8000240 <strcmp>
 800f908:	b1c8      	cbz	r0, 800f93e <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800f90a:	4b11      	ldr	r3, [pc, #68]	; (800f950 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	429d      	cmp	r5, r3
 800f910:	d112      	bne.n	800f938 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800f912:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f916:	f8d8 4000 	ldr.w	r4, [r8]
 800f91a:	b16c      	cbz	r4, 800f938 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800f91c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f920:	2700      	movs	r7, #0
 800f922:	3d04      	subs	r5, #4
 800f924:	4631      	mov	r1, r6
 800f926:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800f92a:	f7f0 fc89 	bl	8000240 <strcmp>
 800f92e:	00bb      	lsls	r3, r7, #2
 800f930:	b140      	cbz	r0, 800f944 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800f932:	3701      	adds	r7, #1
 800f934:	42bc      	cmp	r4, r7
 800f936:	d1f5      	bne.n	800f924 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800f938:	2000      	movs	r0, #0
 800f93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f93e:	4620      	mov	r0, r4
 800f940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f944:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f948:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f94c:	58d3      	ldr	r3, [r2, r3]
 800f94e:	4718      	bx	r3
 800f950:	20000ae8 	.word	0x20000ae8

0800f954 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__size_function__ServiceEventInfo__client_gid>:
 800f954:	2010      	movs	r0, #16
 800f956:	4770      	bx	lr

0800f958 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_const_function__ServiceEventInfo__client_gid>:
 800f958:	4408      	add	r0, r1
 800f95a:	4770      	bx	lr

0800f95c <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__fetch_function__ServiceEventInfo__client_gid>:
 800f95c:	5c43      	ldrb	r3, [r0, r1]
 800f95e:	7013      	strb	r3, [r2, #0]
 800f960:	4770      	bx	lr
 800f962:	bf00      	nop

0800f964 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__assign_function__ServiceEventInfo__client_gid>:
 800f964:	7813      	ldrb	r3, [r2, #0]
 800f966:	5443      	strb	r3, [r0, r1]
 800f968:	4770      	bx	lr
 800f96a:	bf00      	nop

0800f96c <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_init_function>:
 800f96c:	f00b b94c 	b.w	801ac08 <service_msgs__msg__ServiceEventInfo__init>

0800f970 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_fini_function>:
 800f970:	f00b b95c 	b.w	801ac2c <service_msgs__msg__ServiceEventInfo__fini>

0800f974 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_function__ServiceEventInfo__client_gid>:
 800f974:	4408      	add	r0, r1
 800f976:	4770      	bx	lr

0800f978 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800f978:	b508      	push	{r3, lr}
 800f97a:	f000 f8db 	bl	800fb34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f97e:	4b06      	ldr	r3, [pc, #24]	; (800f998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800f980:	4906      	ldr	r1, [pc, #24]	; (800f99c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x24>)
 800f982:	681a      	ldr	r2, [r3, #0]
 800f984:	6488      	str	r0, [r1, #72]	; 0x48
 800f986:	b10a      	cbz	r2, 800f98c <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x14>
 800f988:	4803      	ldr	r0, [pc, #12]	; (800f998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800f98a:	bd08      	pop	{r3, pc}
 800f98c:	4a04      	ldr	r2, [pc, #16]	; (800f9a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x28>)
 800f98e:	4802      	ldr	r0, [pc, #8]	; (800f998 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800f990:	6812      	ldr	r2, [r2, #0]
 800f992:	601a      	str	r2, [r3, #0]
 800f994:	bd08      	pop	{r3, pc}
 800f996:	bf00      	nop
 800f998:	20000be0 	.word	0x20000be0
 800f99c:	20000af0 	.word	0x20000af0
 800f9a0:	20000aec 	.word	0x20000aec

0800f9a4 <get_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800f9a4:	b5b0      	push	{r4, r5, r7, lr}
 800f9a6:	4604      	mov	r4, r0
 800f9a8:	b1d8      	cbz	r0, 800f9e2 <get_serialized_size_service_msgs__msg__ServiceEventInfo+0x3e>
 800f9aa:	460d      	mov	r5, r1
 800f9ac:	2101      	movs	r1, #1
 800f9ae:	4628      	mov	r0, r5
 800f9b0:	f002 f87c 	bl	8011aac <ucdr_alignment>
 800f9b4:	1c6b      	adds	r3, r5, #1
 800f9b6:	4607      	mov	r7, r0
 800f9b8:	1d20      	adds	r0, r4, #4
 800f9ba:	f1c5 0508 	rsb	r5, r5, #8
 800f9be:	441f      	add	r7, r3
 800f9c0:	4639      	mov	r1, r7
 800f9c2:	f000 f8c5 	bl	800fb50 <get_serialized_size_builtin_interfaces__msg__Time>
 800f9c6:	4407      	add	r7, r0
 800f9c8:	2101      	movs	r1, #1
 800f9ca:	4638      	mov	r0, r7
 800f9cc:	f002 f86e 	bl	8011aac <ucdr_alignment>
 800f9d0:	f100 0410 	add.w	r4, r0, #16
 800f9d4:	2108      	movs	r1, #8
 800f9d6:	443c      	add	r4, r7
 800f9d8:	4620      	mov	r0, r4
 800f9da:	f002 f867 	bl	8011aac <ucdr_alignment>
 800f9de:	4428      	add	r0, r5
 800f9e0:	4420      	add	r0, r4
 800f9e2:	bdb0      	pop	{r4, r5, r7, pc}

0800f9e4 <_ServiceEventInfo__cdr_deserialize>:
 800f9e4:	b538      	push	{r3, r4, r5, lr}
 800f9e6:	460c      	mov	r4, r1
 800f9e8:	b1b9      	cbz	r1, 800fa1a <_ServiceEventInfo__cdr_deserialize+0x36>
 800f9ea:	4605      	mov	r5, r0
 800f9ec:	f000 fbe0 	bl	80101b0 <ucdr_deserialize_uint8_t>
 800f9f0:	f000 f912 	bl	800fc18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	1d21      	adds	r1, r4, #4
 800f9f8:	4628      	mov	r0, r5
 800f9fa:	685b      	ldr	r3, [r3, #4]
 800f9fc:	68db      	ldr	r3, [r3, #12]
 800f9fe:	4798      	blx	r3
 800fa00:	f104 010c 	add.w	r1, r4, #12
 800fa04:	4628      	mov	r0, r5
 800fa06:	2210      	movs	r2, #16
 800fa08:	f000 f9d4 	bl	800fdb4 <ucdr_deserialize_array_uint8_t>
 800fa0c:	f104 0120 	add.w	r1, r4, #32
 800fa10:	4628      	mov	r0, r5
 800fa12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa16:	f001 bcd3 	b.w	80113c0 <ucdr_deserialize_int64_t>
 800fa1a:	4608      	mov	r0, r1
 800fa1c:	bd38      	pop	{r3, r4, r5, pc}
 800fa1e:	bf00      	nop

0800fa20 <_ServiceEventInfo__cdr_serialize>:
 800fa20:	b1e8      	cbz	r0, 800fa5e <_ServiceEventInfo__cdr_serialize+0x3e>
 800fa22:	b570      	push	{r4, r5, r6, lr}
 800fa24:	4606      	mov	r6, r0
 800fa26:	460d      	mov	r5, r1
 800fa28:	4604      	mov	r4, r0
 800fa2a:	4608      	mov	r0, r1
 800fa2c:	f816 1b04 	ldrb.w	r1, [r6], #4
 800fa30:	f000 fba8 	bl	8010184 <ucdr_serialize_uint8_t>
 800fa34:	f000 f8f0 	bl	800fc18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	4629      	mov	r1, r5
 800fa3c:	4630      	mov	r0, r6
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	689b      	ldr	r3, [r3, #8]
 800fa42:	4798      	blx	r3
 800fa44:	2210      	movs	r2, #16
 800fa46:	f104 010c 	add.w	r1, r4, #12
 800fa4a:	4628      	mov	r0, r5
 800fa4c:	f000 f94e 	bl	800fcec <ucdr_serialize_array_uint8_t>
 800fa50:	4628      	mov	r0, r5
 800fa52:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800fa56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa5a:	f001 bbe1 	b.w	8011220 <ucdr_serialize_int64_t>
 800fa5e:	4770      	bx	lr

0800fa60 <_ServiceEventInfo__get_serialized_size>:
 800fa60:	b538      	push	{r3, r4, r5, lr}
 800fa62:	4604      	mov	r4, r0
 800fa64:	b1b0      	cbz	r0, 800fa94 <_ServiceEventInfo__get_serialized_size+0x34>
 800fa66:	2101      	movs	r1, #1
 800fa68:	2000      	movs	r0, #0
 800fa6a:	f002 f81f 	bl	8011aac <ucdr_alignment>
 800fa6e:	4605      	mov	r5, r0
 800fa70:	1d20      	adds	r0, r4, #4
 800fa72:	3501      	adds	r5, #1
 800fa74:	4629      	mov	r1, r5
 800fa76:	f000 f86b 	bl	800fb50 <get_serialized_size_builtin_interfaces__msg__Time>
 800fa7a:	4405      	add	r5, r0
 800fa7c:	2101      	movs	r1, #1
 800fa7e:	4628      	mov	r0, r5
 800fa80:	f002 f814 	bl	8011aac <ucdr_alignment>
 800fa84:	3010      	adds	r0, #16
 800fa86:	2108      	movs	r1, #8
 800fa88:	4405      	add	r5, r0
 800fa8a:	4628      	mov	r0, r5
 800fa8c:	f002 f80e 	bl	8011aac <ucdr_alignment>
 800fa90:	3008      	adds	r0, #8
 800fa92:	4428      	add	r0, r5
 800fa94:	bd38      	pop	{r3, r4, r5, pc}
 800fa96:	bf00      	nop

0800fa98 <_ServiceEventInfo__max_serialized_size>:
 800fa98:	b550      	push	{r4, r6, lr}
 800fa9a:	2601      	movs	r6, #1
 800fa9c:	b083      	sub	sp, #12
 800fa9e:	2000      	movs	r0, #0
 800faa0:	4631      	mov	r1, r6
 800faa2:	f88d 6007 	strb.w	r6, [sp, #7]
 800faa6:	f002 f801 	bl	8011aac <ucdr_alignment>
 800faaa:	4604      	mov	r4, r0
 800faac:	f10d 0007 	add.w	r0, sp, #7
 800fab0:	4434      	add	r4, r6
 800fab2:	4621      	mov	r1, r4
 800fab4:	f000 f89c 	bl	800fbf0 <max_serialized_size_builtin_interfaces__msg__Time>
 800fab8:	4404      	add	r4, r0
 800faba:	4631      	mov	r1, r6
 800fabc:	4620      	mov	r0, r4
 800fabe:	f001 fff5 	bl	8011aac <ucdr_alignment>
 800fac2:	3010      	adds	r0, #16
 800fac4:	2108      	movs	r1, #8
 800fac6:	4404      	add	r4, r0
 800fac8:	4620      	mov	r0, r4
 800faca:	f001 ffef 	bl	8011aac <ucdr_alignment>
 800face:	3008      	adds	r0, #8
 800fad0:	4420      	add	r0, r4
 800fad2:	b003      	add	sp, #12
 800fad4:	bd50      	pop	{r4, r6, pc}
 800fad6:	bf00      	nop

0800fad8 <max_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800fad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fadc:	f04f 0801 	mov.w	r8, #1
 800fae0:	460c      	mov	r4, r1
 800fae2:	4607      	mov	r7, r0
 800fae4:	4641      	mov	r1, r8
 800fae6:	4620      	mov	r0, r4
 800fae8:	f887 8000 	strb.w	r8, [r7]
 800faec:	eb04 0608 	add.w	r6, r4, r8
 800faf0:	f001 ffdc 	bl	8011aac <ucdr_alignment>
 800faf4:	4605      	mov	r5, r0
 800faf6:	4638      	mov	r0, r7
 800faf8:	f1c4 0408 	rsb	r4, r4, #8
 800fafc:	4435      	add	r5, r6
 800fafe:	4629      	mov	r1, r5
 800fb00:	f000 f876 	bl	800fbf0 <max_serialized_size_builtin_interfaces__msg__Time>
 800fb04:	4405      	add	r5, r0
 800fb06:	4641      	mov	r1, r8
 800fb08:	4628      	mov	r0, r5
 800fb0a:	f001 ffcf 	bl	8011aac <ucdr_alignment>
 800fb0e:	3010      	adds	r0, #16
 800fb10:	2108      	movs	r1, #8
 800fb12:	4405      	add	r5, r0
 800fb14:	4628      	mov	r0, r5
 800fb16:	f001 ffc9 	bl	8011aac <ucdr_alignment>
 800fb1a:	4420      	add	r0, r4
 800fb1c:	4428      	add	r0, r5
 800fb1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb22:	bf00      	nop

0800fb24 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800fb24:	4800      	ldr	r0, [pc, #0]	; (800fb28 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x4>)
 800fb26:	4770      	bx	lr
 800fb28:	20000bf8 	.word	0x20000bf8

0800fb2c <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800fb2c:	f00b b8b4 	b.w	801ac98 <builtin_interfaces__msg__Time__init>

0800fb30 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800fb30:	f00b b8b6 	b.w	801aca0 <builtin_interfaces__msg__Time__fini>

0800fb34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800fb34:	4b04      	ldr	r3, [pc, #16]	; (800fb48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800fb36:	681a      	ldr	r2, [r3, #0]
 800fb38:	b10a      	cbz	r2, 800fb3e <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800fb3a:	4803      	ldr	r0, [pc, #12]	; (800fb48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800fb3c:	4770      	bx	lr
 800fb3e:	4a03      	ldr	r2, [pc, #12]	; (800fb4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800fb40:	4801      	ldr	r0, [pc, #4]	; (800fb48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800fb42:	6812      	ldr	r2, [r2, #0]
 800fb44:	601a      	str	r2, [r3, #0]
 800fb46:	4770      	bx	lr
 800fb48:	20000ca4 	.word	0x20000ca4
 800fb4c:	20000aec 	.word	0x20000aec

0800fb50 <get_serialized_size_builtin_interfaces__msg__Time>:
 800fb50:	b180      	cbz	r0, 800fb74 <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800fb52:	b538      	push	{r3, r4, r5, lr}
 800fb54:	460d      	mov	r5, r1
 800fb56:	2104      	movs	r1, #4
 800fb58:	4628      	mov	r0, r5
 800fb5a:	f001 ffa7 	bl	8011aac <ucdr_alignment>
 800fb5e:	1d2b      	adds	r3, r5, #4
 800fb60:	f1c5 0504 	rsb	r5, r5, #4
 800fb64:	2104      	movs	r1, #4
 800fb66:	181c      	adds	r4, r3, r0
 800fb68:	4620      	mov	r0, r4
 800fb6a:	f001 ff9f 	bl	8011aac <ucdr_alignment>
 800fb6e:	4428      	add	r0, r5
 800fb70:	4420      	add	r0, r4
 800fb72:	bd38      	pop	{r3, r4, r5, pc}
 800fb74:	4770      	bx	lr
 800fb76:	bf00      	nop

0800fb78 <_Time__cdr_deserialize>:
 800fb78:	b538      	push	{r3, r4, r5, lr}
 800fb7a:	460c      	mov	r4, r1
 800fb7c:	b141      	cbz	r1, 800fb90 <_Time__cdr_deserialize+0x18>
 800fb7e:	4605      	mov	r5, r0
 800fb80:	f001 fabe 	bl	8011100 <ucdr_deserialize_int32_t>
 800fb84:	1d21      	adds	r1, r4, #4
 800fb86:	4628      	mov	r0, r5
 800fb88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb8c:	f000 be40 	b.w	8010810 <ucdr_deserialize_uint32_t>
 800fb90:	4608      	mov	r0, r1
 800fb92:	bd38      	pop	{r3, r4, r5, pc}

0800fb94 <_Time__cdr_serialize>:
 800fb94:	b160      	cbz	r0, 800fbb0 <_Time__cdr_serialize+0x1c>
 800fb96:	b538      	push	{r3, r4, r5, lr}
 800fb98:	460d      	mov	r5, r1
 800fb9a:	4604      	mov	r4, r0
 800fb9c:	6801      	ldr	r1, [r0, #0]
 800fb9e:	4628      	mov	r0, r5
 800fba0:	f001 fa16 	bl	8010fd0 <ucdr_serialize_int32_t>
 800fba4:	6861      	ldr	r1, [r4, #4]
 800fba6:	4628      	mov	r0, r5
 800fba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbac:	f000 bd00 	b.w	80105b0 <ucdr_serialize_uint32_t>
 800fbb0:	4770      	bx	lr
 800fbb2:	bf00      	nop

0800fbb4 <_Time__get_serialized_size>:
 800fbb4:	b160      	cbz	r0, 800fbd0 <_Time__get_serialized_size+0x1c>
 800fbb6:	2104      	movs	r1, #4
 800fbb8:	2000      	movs	r0, #0
 800fbba:	b510      	push	{r4, lr}
 800fbbc:	f001 ff76 	bl	8011aac <ucdr_alignment>
 800fbc0:	2104      	movs	r1, #4
 800fbc2:	1844      	adds	r4, r0, r1
 800fbc4:	4620      	mov	r0, r4
 800fbc6:	f001 ff71 	bl	8011aac <ucdr_alignment>
 800fbca:	3004      	adds	r0, #4
 800fbcc:	4420      	add	r0, r4
 800fbce:	bd10      	pop	{r4, pc}
 800fbd0:	4770      	bx	lr
 800fbd2:	bf00      	nop

0800fbd4 <_Time__max_serialized_size>:
 800fbd4:	b510      	push	{r4, lr}
 800fbd6:	2104      	movs	r1, #4
 800fbd8:	2000      	movs	r0, #0
 800fbda:	f001 ff67 	bl	8011aac <ucdr_alignment>
 800fbde:	2104      	movs	r1, #4
 800fbe0:	1844      	adds	r4, r0, r1
 800fbe2:	4620      	mov	r0, r4
 800fbe4:	f001 ff62 	bl	8011aac <ucdr_alignment>
 800fbe8:	3004      	adds	r0, #4
 800fbea:	4420      	add	r0, r4
 800fbec:	bd10      	pop	{r4, pc}
 800fbee:	bf00      	nop

0800fbf0 <max_serialized_size_builtin_interfaces__msg__Time>:
 800fbf0:	b538      	push	{r3, r4, r5, lr}
 800fbf2:	460c      	mov	r4, r1
 800fbf4:	2301      	movs	r3, #1
 800fbf6:	2104      	movs	r1, #4
 800fbf8:	1d25      	adds	r5, r4, #4
 800fbfa:	7003      	strb	r3, [r0, #0]
 800fbfc:	4620      	mov	r0, r4
 800fbfe:	f1c4 0404 	rsb	r4, r4, #4
 800fc02:	f001 ff53 	bl	8011aac <ucdr_alignment>
 800fc06:	4405      	add	r5, r0
 800fc08:	2104      	movs	r1, #4
 800fc0a:	4628      	mov	r0, r5
 800fc0c:	f001 ff4e 	bl	8011aac <ucdr_alignment>
 800fc10:	4420      	add	r0, r4
 800fc12:	4428      	add	r0, r5
 800fc14:	bd38      	pop	{r3, r4, r5, pc}
 800fc16:	bf00      	nop

0800fc18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800fc18:	4800      	ldr	r0, [pc, #0]	; (800fc1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800fc1a:	4770      	bx	lr
 800fc1c:	20000cbc 	.word	0x20000cbc

0800fc20 <ucdr_serialize_endian_array_char>:
 800fc20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc24:	4619      	mov	r1, r3
 800fc26:	461f      	mov	r7, r3
 800fc28:	4605      	mov	r5, r0
 800fc2a:	4690      	mov	r8, r2
 800fc2c:	f001 fee6 	bl	80119fc <ucdr_check_buffer_available_for>
 800fc30:	b9e0      	cbnz	r0, 800fc6c <ucdr_serialize_endian_array_char+0x4c>
 800fc32:	463e      	mov	r6, r7
 800fc34:	e00b      	b.n	800fc4e <ucdr_serialize_endian_array_char+0x2e>
 800fc36:	4441      	add	r1, r8
 800fc38:	68a8      	ldr	r0, [r5, #8]
 800fc3a:	4622      	mov	r2, r4
 800fc3c:	1b36      	subs	r6, r6, r4
 800fc3e:	f00e f89a 	bl	801dd76 <memcpy>
 800fc42:	68ab      	ldr	r3, [r5, #8]
 800fc44:	6928      	ldr	r0, [r5, #16]
 800fc46:	4423      	add	r3, r4
 800fc48:	4420      	add	r0, r4
 800fc4a:	60ab      	str	r3, [r5, #8]
 800fc4c:	6128      	str	r0, [r5, #16]
 800fc4e:	4631      	mov	r1, r6
 800fc50:	2201      	movs	r2, #1
 800fc52:	4628      	mov	r0, r5
 800fc54:	f001 ff5c 	bl	8011b10 <ucdr_check_final_buffer_behavior_array>
 800fc58:	1bb9      	subs	r1, r7, r6
 800fc5a:	4604      	mov	r4, r0
 800fc5c:	2800      	cmp	r0, #0
 800fc5e:	d1ea      	bne.n	800fc36 <ucdr_serialize_endian_array_char+0x16>
 800fc60:	2301      	movs	r3, #1
 800fc62:	7da8      	ldrb	r0, [r5, #22]
 800fc64:	756b      	strb	r3, [r5, #21]
 800fc66:	4058      	eors	r0, r3
 800fc68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc6c:	463a      	mov	r2, r7
 800fc6e:	4641      	mov	r1, r8
 800fc70:	68a8      	ldr	r0, [r5, #8]
 800fc72:	f00e f880 	bl	801dd76 <memcpy>
 800fc76:	68aa      	ldr	r2, [r5, #8]
 800fc78:	692b      	ldr	r3, [r5, #16]
 800fc7a:	443a      	add	r2, r7
 800fc7c:	443b      	add	r3, r7
 800fc7e:	60aa      	str	r2, [r5, #8]
 800fc80:	612b      	str	r3, [r5, #16]
 800fc82:	e7ed      	b.n	800fc60 <ucdr_serialize_endian_array_char+0x40>

0800fc84 <ucdr_deserialize_endian_array_char>:
 800fc84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc88:	4619      	mov	r1, r3
 800fc8a:	461f      	mov	r7, r3
 800fc8c:	4605      	mov	r5, r0
 800fc8e:	4690      	mov	r8, r2
 800fc90:	f001 feb4 	bl	80119fc <ucdr_check_buffer_available_for>
 800fc94:	b9e8      	cbnz	r0, 800fcd2 <ucdr_deserialize_endian_array_char+0x4e>
 800fc96:	463e      	mov	r6, r7
 800fc98:	e00c      	b.n	800fcb4 <ucdr_deserialize_endian_array_char+0x30>
 800fc9a:	eb08 0003 	add.w	r0, r8, r3
 800fc9e:	68a9      	ldr	r1, [r5, #8]
 800fca0:	4622      	mov	r2, r4
 800fca2:	1b36      	subs	r6, r6, r4
 800fca4:	f00e f867 	bl	801dd76 <memcpy>
 800fca8:	68ab      	ldr	r3, [r5, #8]
 800fcaa:	6928      	ldr	r0, [r5, #16]
 800fcac:	4423      	add	r3, r4
 800fcae:	4420      	add	r0, r4
 800fcb0:	60ab      	str	r3, [r5, #8]
 800fcb2:	6128      	str	r0, [r5, #16]
 800fcb4:	4631      	mov	r1, r6
 800fcb6:	2201      	movs	r2, #1
 800fcb8:	4628      	mov	r0, r5
 800fcba:	f001 ff29 	bl	8011b10 <ucdr_check_final_buffer_behavior_array>
 800fcbe:	1bbb      	subs	r3, r7, r6
 800fcc0:	4604      	mov	r4, r0
 800fcc2:	2800      	cmp	r0, #0
 800fcc4:	d1e9      	bne.n	800fc9a <ucdr_deserialize_endian_array_char+0x16>
 800fcc6:	2301      	movs	r3, #1
 800fcc8:	7da8      	ldrb	r0, [r5, #22]
 800fcca:	756b      	strb	r3, [r5, #21]
 800fccc:	4058      	eors	r0, r3
 800fcce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcd2:	463a      	mov	r2, r7
 800fcd4:	68a9      	ldr	r1, [r5, #8]
 800fcd6:	4640      	mov	r0, r8
 800fcd8:	f00e f84d 	bl	801dd76 <memcpy>
 800fcdc:	68aa      	ldr	r2, [r5, #8]
 800fcde:	692b      	ldr	r3, [r5, #16]
 800fce0:	443a      	add	r2, r7
 800fce2:	443b      	add	r3, r7
 800fce4:	60aa      	str	r2, [r5, #8]
 800fce6:	612b      	str	r3, [r5, #16]
 800fce8:	e7ed      	b.n	800fcc6 <ucdr_deserialize_endian_array_char+0x42>
 800fcea:	bf00      	nop

0800fcec <ucdr_serialize_array_uint8_t>:
 800fcec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcf0:	4688      	mov	r8, r1
 800fcf2:	4611      	mov	r1, r2
 800fcf4:	4617      	mov	r7, r2
 800fcf6:	4605      	mov	r5, r0
 800fcf8:	f001 fe80 	bl	80119fc <ucdr_check_buffer_available_for>
 800fcfc:	b9e0      	cbnz	r0, 800fd38 <ucdr_serialize_array_uint8_t+0x4c>
 800fcfe:	463e      	mov	r6, r7
 800fd00:	e00b      	b.n	800fd1a <ucdr_serialize_array_uint8_t+0x2e>
 800fd02:	4441      	add	r1, r8
 800fd04:	68a8      	ldr	r0, [r5, #8]
 800fd06:	4622      	mov	r2, r4
 800fd08:	1b36      	subs	r6, r6, r4
 800fd0a:	f00e f834 	bl	801dd76 <memcpy>
 800fd0e:	68ab      	ldr	r3, [r5, #8]
 800fd10:	6928      	ldr	r0, [r5, #16]
 800fd12:	4423      	add	r3, r4
 800fd14:	4420      	add	r0, r4
 800fd16:	60ab      	str	r3, [r5, #8]
 800fd18:	6128      	str	r0, [r5, #16]
 800fd1a:	4631      	mov	r1, r6
 800fd1c:	2201      	movs	r2, #1
 800fd1e:	4628      	mov	r0, r5
 800fd20:	f001 fef6 	bl	8011b10 <ucdr_check_final_buffer_behavior_array>
 800fd24:	1bb9      	subs	r1, r7, r6
 800fd26:	4604      	mov	r4, r0
 800fd28:	2800      	cmp	r0, #0
 800fd2a:	d1ea      	bne.n	800fd02 <ucdr_serialize_array_uint8_t+0x16>
 800fd2c:	2301      	movs	r3, #1
 800fd2e:	7da8      	ldrb	r0, [r5, #22]
 800fd30:	756b      	strb	r3, [r5, #21]
 800fd32:	4058      	eors	r0, r3
 800fd34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd38:	463a      	mov	r2, r7
 800fd3a:	4641      	mov	r1, r8
 800fd3c:	68a8      	ldr	r0, [r5, #8]
 800fd3e:	f00e f81a 	bl	801dd76 <memcpy>
 800fd42:	68aa      	ldr	r2, [r5, #8]
 800fd44:	692b      	ldr	r3, [r5, #16]
 800fd46:	443a      	add	r2, r7
 800fd48:	443b      	add	r3, r7
 800fd4a:	60aa      	str	r2, [r5, #8]
 800fd4c:	612b      	str	r3, [r5, #16]
 800fd4e:	e7ed      	b.n	800fd2c <ucdr_serialize_array_uint8_t+0x40>

0800fd50 <ucdr_serialize_endian_array_uint8_t>:
 800fd50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd54:	4619      	mov	r1, r3
 800fd56:	461f      	mov	r7, r3
 800fd58:	4605      	mov	r5, r0
 800fd5a:	4690      	mov	r8, r2
 800fd5c:	f001 fe4e 	bl	80119fc <ucdr_check_buffer_available_for>
 800fd60:	b9e0      	cbnz	r0, 800fd9c <ucdr_serialize_endian_array_uint8_t+0x4c>
 800fd62:	463e      	mov	r6, r7
 800fd64:	e00b      	b.n	800fd7e <ucdr_serialize_endian_array_uint8_t+0x2e>
 800fd66:	4441      	add	r1, r8
 800fd68:	68a8      	ldr	r0, [r5, #8]
 800fd6a:	4622      	mov	r2, r4
 800fd6c:	1b36      	subs	r6, r6, r4
 800fd6e:	f00e f802 	bl	801dd76 <memcpy>
 800fd72:	68ab      	ldr	r3, [r5, #8]
 800fd74:	6928      	ldr	r0, [r5, #16]
 800fd76:	4423      	add	r3, r4
 800fd78:	4420      	add	r0, r4
 800fd7a:	60ab      	str	r3, [r5, #8]
 800fd7c:	6128      	str	r0, [r5, #16]
 800fd7e:	4631      	mov	r1, r6
 800fd80:	2201      	movs	r2, #1
 800fd82:	4628      	mov	r0, r5
 800fd84:	f001 fec4 	bl	8011b10 <ucdr_check_final_buffer_behavior_array>
 800fd88:	1bb9      	subs	r1, r7, r6
 800fd8a:	4604      	mov	r4, r0
 800fd8c:	2800      	cmp	r0, #0
 800fd8e:	d1ea      	bne.n	800fd66 <ucdr_serialize_endian_array_uint8_t+0x16>
 800fd90:	2301      	movs	r3, #1
 800fd92:	7da8      	ldrb	r0, [r5, #22]
 800fd94:	756b      	strb	r3, [r5, #21]
 800fd96:	4058      	eors	r0, r3
 800fd98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd9c:	463a      	mov	r2, r7
 800fd9e:	4641      	mov	r1, r8
 800fda0:	68a8      	ldr	r0, [r5, #8]
 800fda2:	f00d ffe8 	bl	801dd76 <memcpy>
 800fda6:	68aa      	ldr	r2, [r5, #8]
 800fda8:	692b      	ldr	r3, [r5, #16]
 800fdaa:	443a      	add	r2, r7
 800fdac:	443b      	add	r3, r7
 800fdae:	60aa      	str	r2, [r5, #8]
 800fdb0:	612b      	str	r3, [r5, #16]
 800fdb2:	e7ed      	b.n	800fd90 <ucdr_serialize_endian_array_uint8_t+0x40>

0800fdb4 <ucdr_deserialize_array_uint8_t>:
 800fdb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdb8:	4688      	mov	r8, r1
 800fdba:	4611      	mov	r1, r2
 800fdbc:	4617      	mov	r7, r2
 800fdbe:	4605      	mov	r5, r0
 800fdc0:	f001 fe1c 	bl	80119fc <ucdr_check_buffer_available_for>
 800fdc4:	b9e8      	cbnz	r0, 800fe02 <ucdr_deserialize_array_uint8_t+0x4e>
 800fdc6:	463e      	mov	r6, r7
 800fdc8:	e00c      	b.n	800fde4 <ucdr_deserialize_array_uint8_t+0x30>
 800fdca:	eb08 0003 	add.w	r0, r8, r3
 800fdce:	68a9      	ldr	r1, [r5, #8]
 800fdd0:	4622      	mov	r2, r4
 800fdd2:	1b36      	subs	r6, r6, r4
 800fdd4:	f00d ffcf 	bl	801dd76 <memcpy>
 800fdd8:	68ab      	ldr	r3, [r5, #8]
 800fdda:	6928      	ldr	r0, [r5, #16]
 800fddc:	4423      	add	r3, r4
 800fdde:	4420      	add	r0, r4
 800fde0:	60ab      	str	r3, [r5, #8]
 800fde2:	6128      	str	r0, [r5, #16]
 800fde4:	4631      	mov	r1, r6
 800fde6:	2201      	movs	r2, #1
 800fde8:	4628      	mov	r0, r5
 800fdea:	f001 fe91 	bl	8011b10 <ucdr_check_final_buffer_behavior_array>
 800fdee:	1bbb      	subs	r3, r7, r6
 800fdf0:	4604      	mov	r4, r0
 800fdf2:	2800      	cmp	r0, #0
 800fdf4:	d1e9      	bne.n	800fdca <ucdr_deserialize_array_uint8_t+0x16>
 800fdf6:	2301      	movs	r3, #1
 800fdf8:	7da8      	ldrb	r0, [r5, #22]
 800fdfa:	756b      	strb	r3, [r5, #21]
 800fdfc:	4058      	eors	r0, r3
 800fdfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe02:	463a      	mov	r2, r7
 800fe04:	68a9      	ldr	r1, [r5, #8]
 800fe06:	4640      	mov	r0, r8
 800fe08:	f00d ffb5 	bl	801dd76 <memcpy>
 800fe0c:	68aa      	ldr	r2, [r5, #8]
 800fe0e:	692b      	ldr	r3, [r5, #16]
 800fe10:	443a      	add	r2, r7
 800fe12:	443b      	add	r3, r7
 800fe14:	60aa      	str	r2, [r5, #8]
 800fe16:	612b      	str	r3, [r5, #16]
 800fe18:	e7ed      	b.n	800fdf6 <ucdr_deserialize_array_uint8_t+0x42>
 800fe1a:	bf00      	nop

0800fe1c <ucdr_deserialize_endian_array_uint8_t>:
 800fe1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe20:	4619      	mov	r1, r3
 800fe22:	461f      	mov	r7, r3
 800fe24:	4605      	mov	r5, r0
 800fe26:	4690      	mov	r8, r2
 800fe28:	f001 fde8 	bl	80119fc <ucdr_check_buffer_available_for>
 800fe2c:	b9e8      	cbnz	r0, 800fe6a <ucdr_deserialize_endian_array_uint8_t+0x4e>
 800fe2e:	463e      	mov	r6, r7
 800fe30:	e00c      	b.n	800fe4c <ucdr_deserialize_endian_array_uint8_t+0x30>
 800fe32:	eb08 0003 	add.w	r0, r8, r3
 800fe36:	68a9      	ldr	r1, [r5, #8]
 800fe38:	4622      	mov	r2, r4
 800fe3a:	1b36      	subs	r6, r6, r4
 800fe3c:	f00d ff9b 	bl	801dd76 <memcpy>
 800fe40:	68ab      	ldr	r3, [r5, #8]
 800fe42:	6928      	ldr	r0, [r5, #16]
 800fe44:	4423      	add	r3, r4
 800fe46:	4420      	add	r0, r4
 800fe48:	60ab      	str	r3, [r5, #8]
 800fe4a:	6128      	str	r0, [r5, #16]
 800fe4c:	4631      	mov	r1, r6
 800fe4e:	2201      	movs	r2, #1
 800fe50:	4628      	mov	r0, r5
 800fe52:	f001 fe5d 	bl	8011b10 <ucdr_check_final_buffer_behavior_array>
 800fe56:	1bbb      	subs	r3, r7, r6
 800fe58:	4604      	mov	r4, r0
 800fe5a:	2800      	cmp	r0, #0
 800fe5c:	d1e9      	bne.n	800fe32 <ucdr_deserialize_endian_array_uint8_t+0x16>
 800fe5e:	2301      	movs	r3, #1
 800fe60:	7da8      	ldrb	r0, [r5, #22]
 800fe62:	756b      	strb	r3, [r5, #21]
 800fe64:	4058      	eors	r0, r3
 800fe66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe6a:	463a      	mov	r2, r7
 800fe6c:	68a9      	ldr	r1, [r5, #8]
 800fe6e:	4640      	mov	r0, r8
 800fe70:	f00d ff81 	bl	801dd76 <memcpy>
 800fe74:	68aa      	ldr	r2, [r5, #8]
 800fe76:	692b      	ldr	r3, [r5, #16]
 800fe78:	443a      	add	r2, r7
 800fe7a:	443b      	add	r3, r7
 800fe7c:	60aa      	str	r2, [r5, #8]
 800fe7e:	612b      	str	r3, [r5, #16]
 800fe80:	e7ed      	b.n	800fe5e <ucdr_deserialize_endian_array_uint8_t+0x42>
 800fe82:	bf00      	nop

0800fe84 <ucdr_serialize_array_int16_t>:
 800fe84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe88:	4604      	mov	r4, r0
 800fe8a:	460e      	mov	r6, r1
 800fe8c:	2102      	movs	r1, #2
 800fe8e:	4617      	mov	r7, r2
 800fe90:	f001 fe14 	bl	8011abc <ucdr_buffer_alignment>
 800fe94:	4601      	mov	r1, r0
 800fe96:	4620      	mov	r0, r4
 800fe98:	7d65      	ldrb	r5, [r4, #21]
 800fe9a:	f001 fe57 	bl	8011b4c <ucdr_advance_buffer>
 800fe9e:	7d21      	ldrb	r1, [r4, #20]
 800fea0:	7565      	strb	r5, [r4, #21]
 800fea2:	2901      	cmp	r1, #1
 800fea4:	d011      	beq.n	800feca <ucdr_serialize_array_int16_t+0x46>
 800fea6:	b15f      	cbz	r7, 800fec0 <ucdr_serialize_array_int16_t+0x3c>
 800fea8:	3e02      	subs	r6, #2
 800feaa:	2500      	movs	r5, #0
 800feac:	e000      	b.n	800feb0 <ucdr_serialize_array_int16_t+0x2c>
 800feae:	7d21      	ldrb	r1, [r4, #20]
 800feb0:	3501      	adds	r5, #1
 800feb2:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
 800feb6:	4620      	mov	r0, r4
 800feb8:	f000 ff20 	bl	8010cfc <ucdr_serialize_endian_int16_t>
 800febc:	42af      	cmp	r7, r5
 800febe:	d1f6      	bne.n	800feae <ucdr_serialize_array_int16_t+0x2a>
 800fec0:	7da0      	ldrb	r0, [r4, #22]
 800fec2:	f080 0001 	eor.w	r0, r0, #1
 800fec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800feca:	007f      	lsls	r7, r7, #1
 800fecc:	4620      	mov	r0, r4
 800fece:	4639      	mov	r1, r7
 800fed0:	f001 fd94 	bl	80119fc <ucdr_check_buffer_available_for>
 800fed4:	b9f8      	cbnz	r0, 800ff16 <ucdr_serialize_array_int16_t+0x92>
 800fed6:	46b8      	mov	r8, r7
 800fed8:	e00c      	b.n	800fef4 <ucdr_serialize_array_int16_t+0x70>
 800feda:	462a      	mov	r2, r5
 800fedc:	4431      	add	r1, r6
 800fede:	68a0      	ldr	r0, [r4, #8]
 800fee0:	eba8 0805 	sub.w	r8, r8, r5
 800fee4:	f00d ff47 	bl	801dd76 <memcpy>
 800fee8:	68a2      	ldr	r2, [r4, #8]
 800feea:	6923      	ldr	r3, [r4, #16]
 800feec:	442a      	add	r2, r5
 800feee:	442b      	add	r3, r5
 800fef0:	60a2      	str	r2, [r4, #8]
 800fef2:	6123      	str	r3, [r4, #16]
 800fef4:	4641      	mov	r1, r8
 800fef6:	2202      	movs	r2, #2
 800fef8:	4620      	mov	r0, r4
 800fefa:	f001 fe09 	bl	8011b10 <ucdr_check_final_buffer_behavior_array>
 800fefe:	eba7 0108 	sub.w	r1, r7, r8
 800ff02:	4605      	mov	r5, r0
 800ff04:	2800      	cmp	r0, #0
 800ff06:	d1e8      	bne.n	800feda <ucdr_serialize_array_int16_t+0x56>
 800ff08:	2302      	movs	r3, #2
 800ff0a:	7da0      	ldrb	r0, [r4, #22]
 800ff0c:	7563      	strb	r3, [r4, #21]
 800ff0e:	f080 0001 	eor.w	r0, r0, #1
 800ff12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff16:	463a      	mov	r2, r7
 800ff18:	4631      	mov	r1, r6
 800ff1a:	68a0      	ldr	r0, [r4, #8]
 800ff1c:	f00d ff2b 	bl	801dd76 <memcpy>
 800ff20:	68a2      	ldr	r2, [r4, #8]
 800ff22:	6923      	ldr	r3, [r4, #16]
 800ff24:	443a      	add	r2, r7
 800ff26:	441f      	add	r7, r3
 800ff28:	60a2      	str	r2, [r4, #8]
 800ff2a:	6127      	str	r7, [r4, #16]
 800ff2c:	e7ec      	b.n	800ff08 <ucdr_serialize_array_int16_t+0x84>
 800ff2e:	bf00      	nop

0800ff30 <ucdr_deserialize_array_int16_t>:
 800ff30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff34:	4604      	mov	r4, r0
 800ff36:	460e      	mov	r6, r1
 800ff38:	2102      	movs	r1, #2
 800ff3a:	4617      	mov	r7, r2
 800ff3c:	f001 fdbe 	bl	8011abc <ucdr_buffer_alignment>
 800ff40:	4601      	mov	r1, r0
 800ff42:	4620      	mov	r0, r4
 800ff44:	7d65      	ldrb	r5, [r4, #21]
 800ff46:	f001 fe01 	bl	8011b4c <ucdr_advance_buffer>
 800ff4a:	7d21      	ldrb	r1, [r4, #20]
 800ff4c:	7565      	strb	r5, [r4, #21]
 800ff4e:	2901      	cmp	r1, #1
 800ff50:	d010      	beq.n	800ff74 <ucdr_deserialize_array_int16_t+0x44>
 800ff52:	b157      	cbz	r7, 800ff6a <ucdr_deserialize_array_int16_t+0x3a>
 800ff54:	2500      	movs	r5, #0
 800ff56:	e000      	b.n	800ff5a <ucdr_deserialize_array_int16_t+0x2a>
 800ff58:	7d21      	ldrb	r1, [r4, #20]
 800ff5a:	3501      	adds	r5, #1
 800ff5c:	4632      	mov	r2, r6
 800ff5e:	4620      	mov	r0, r4
 800ff60:	3602      	adds	r6, #2
 800ff62:	f000 ffbf 	bl	8010ee4 <ucdr_deserialize_endian_int16_t>
 800ff66:	42af      	cmp	r7, r5
 800ff68:	d1f6      	bne.n	800ff58 <ucdr_deserialize_array_int16_t+0x28>
 800ff6a:	7da0      	ldrb	r0, [r4, #22]
 800ff6c:	f080 0001 	eor.w	r0, r0, #1
 800ff70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff74:	007f      	lsls	r7, r7, #1
 800ff76:	4620      	mov	r0, r4
 800ff78:	4639      	mov	r1, r7
 800ff7a:	f001 fd3f 	bl	80119fc <ucdr_check_buffer_available_for>
 800ff7e:	b9f8      	cbnz	r0, 800ffc0 <ucdr_deserialize_array_int16_t+0x90>
 800ff80:	46b8      	mov	r8, r7
 800ff82:	e00c      	b.n	800ff9e <ucdr_deserialize_array_int16_t+0x6e>
 800ff84:	18f0      	adds	r0, r6, r3
 800ff86:	462a      	mov	r2, r5
 800ff88:	68a1      	ldr	r1, [r4, #8]
 800ff8a:	eba8 0805 	sub.w	r8, r8, r5
 800ff8e:	f00d fef2 	bl	801dd76 <memcpy>
 800ff92:	68a2      	ldr	r2, [r4, #8]
 800ff94:	6923      	ldr	r3, [r4, #16]
 800ff96:	442a      	add	r2, r5
 800ff98:	442b      	add	r3, r5
 800ff9a:	60a2      	str	r2, [r4, #8]
 800ff9c:	6123      	str	r3, [r4, #16]
 800ff9e:	4641      	mov	r1, r8
 800ffa0:	2202      	movs	r2, #2
 800ffa2:	4620      	mov	r0, r4
 800ffa4:	f001 fdb4 	bl	8011b10 <ucdr_check_final_buffer_behavior_array>
 800ffa8:	eba7 0308 	sub.w	r3, r7, r8
 800ffac:	4605      	mov	r5, r0
 800ffae:	2800      	cmp	r0, #0
 800ffb0:	d1e8      	bne.n	800ff84 <ucdr_deserialize_array_int16_t+0x54>
 800ffb2:	2302      	movs	r3, #2
 800ffb4:	7da0      	ldrb	r0, [r4, #22]
 800ffb6:	7563      	strb	r3, [r4, #21]
 800ffb8:	f080 0001 	eor.w	r0, r0, #1
 800ffbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffc0:	463a      	mov	r2, r7
 800ffc2:	68a1      	ldr	r1, [r4, #8]
 800ffc4:	4630      	mov	r0, r6
 800ffc6:	f00d fed6 	bl	801dd76 <memcpy>
 800ffca:	68a2      	ldr	r2, [r4, #8]
 800ffcc:	6923      	ldr	r3, [r4, #16]
 800ffce:	443a      	add	r2, r7
 800ffd0:	441f      	add	r7, r3
 800ffd2:	60a2      	str	r2, [r4, #8]
 800ffd4:	6127      	str	r7, [r4, #16]
 800ffd6:	e7ec      	b.n	800ffb2 <ucdr_deserialize_array_int16_t+0x82>

0800ffd8 <ucdr_serialize_array_float>:
 800ffd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffdc:	4604      	mov	r4, r0
 800ffde:	460e      	mov	r6, r1
 800ffe0:	2104      	movs	r1, #4
 800ffe2:	4617      	mov	r7, r2
 800ffe4:	f001 fd6a 	bl	8011abc <ucdr_buffer_alignment>
 800ffe8:	4601      	mov	r1, r0
 800ffea:	4620      	mov	r0, r4
 800ffec:	7d65      	ldrb	r5, [r4, #21]
 800ffee:	f001 fdad 	bl	8011b4c <ucdr_advance_buffer>
 800fff2:	7d21      	ldrb	r1, [r4, #20]
 800fff4:	7565      	strb	r5, [r4, #21]
 800fff6:	2901      	cmp	r1, #1
 800fff8:	d010      	beq.n	801001c <ucdr_serialize_array_float+0x44>
 800fffa:	b157      	cbz	r7, 8010012 <ucdr_serialize_array_float+0x3a>
 800fffc:	2500      	movs	r5, #0
 800fffe:	e000      	b.n	8010002 <ucdr_serialize_array_float+0x2a>
 8010000:	7d21      	ldrb	r1, [r4, #20]
 8010002:	3501      	adds	r5, #1
 8010004:	ecb6 0a01 	vldmia	r6!, {s0}
 8010008:	4620      	mov	r0, r4
 801000a:	f001 fb37 	bl	801167c <ucdr_serialize_endian_float>
 801000e:	42af      	cmp	r7, r5
 8010010:	d1f6      	bne.n	8010000 <ucdr_serialize_array_float+0x28>
 8010012:	7da0      	ldrb	r0, [r4, #22]
 8010014:	f080 0001 	eor.w	r0, r0, #1
 8010018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801001c:	00bf      	lsls	r7, r7, #2
 801001e:	4620      	mov	r0, r4
 8010020:	4639      	mov	r1, r7
 8010022:	f001 fceb 	bl	80119fc <ucdr_check_buffer_available_for>
 8010026:	b9f8      	cbnz	r0, 8010068 <ucdr_serialize_array_float+0x90>
 8010028:	46b8      	mov	r8, r7
 801002a:	e00c      	b.n	8010046 <ucdr_serialize_array_float+0x6e>
 801002c:	462a      	mov	r2, r5
 801002e:	4431      	add	r1, r6
 8010030:	68a0      	ldr	r0, [r4, #8]
 8010032:	eba8 0805 	sub.w	r8, r8, r5
 8010036:	f00d fe9e 	bl	801dd76 <memcpy>
 801003a:	68a2      	ldr	r2, [r4, #8]
 801003c:	6923      	ldr	r3, [r4, #16]
 801003e:	442a      	add	r2, r5
 8010040:	442b      	add	r3, r5
 8010042:	60a2      	str	r2, [r4, #8]
 8010044:	6123      	str	r3, [r4, #16]
 8010046:	4641      	mov	r1, r8
 8010048:	2204      	movs	r2, #4
 801004a:	4620      	mov	r0, r4
 801004c:	f001 fd60 	bl	8011b10 <ucdr_check_final_buffer_behavior_array>
 8010050:	eba7 0108 	sub.w	r1, r7, r8
 8010054:	4605      	mov	r5, r0
 8010056:	2800      	cmp	r0, #0
 8010058:	d1e8      	bne.n	801002c <ucdr_serialize_array_float+0x54>
 801005a:	2304      	movs	r3, #4
 801005c:	7da0      	ldrb	r0, [r4, #22]
 801005e:	7563      	strb	r3, [r4, #21]
 8010060:	f080 0001 	eor.w	r0, r0, #1
 8010064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010068:	463a      	mov	r2, r7
 801006a:	4631      	mov	r1, r6
 801006c:	68a0      	ldr	r0, [r4, #8]
 801006e:	f00d fe82 	bl	801dd76 <memcpy>
 8010072:	68a2      	ldr	r2, [r4, #8]
 8010074:	6923      	ldr	r3, [r4, #16]
 8010076:	443a      	add	r2, r7
 8010078:	441f      	add	r7, r3
 801007a:	60a2      	str	r2, [r4, #8]
 801007c:	6127      	str	r7, [r4, #16]
 801007e:	e7ec      	b.n	801005a <ucdr_serialize_array_float+0x82>

08010080 <ucdr_deserialize_array_float>:
 8010080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010084:	4604      	mov	r4, r0
 8010086:	460e      	mov	r6, r1
 8010088:	2104      	movs	r1, #4
 801008a:	4617      	mov	r7, r2
 801008c:	f001 fd16 	bl	8011abc <ucdr_buffer_alignment>
 8010090:	4601      	mov	r1, r0
 8010092:	4620      	mov	r0, r4
 8010094:	7d65      	ldrb	r5, [r4, #21]
 8010096:	f001 fd59 	bl	8011b4c <ucdr_advance_buffer>
 801009a:	7d21      	ldrb	r1, [r4, #20]
 801009c:	7565      	strb	r5, [r4, #21]
 801009e:	2901      	cmp	r1, #1
 80100a0:	d010      	beq.n	80100c4 <ucdr_deserialize_array_float+0x44>
 80100a2:	b157      	cbz	r7, 80100ba <ucdr_deserialize_array_float+0x3a>
 80100a4:	2500      	movs	r5, #0
 80100a6:	e000      	b.n	80100aa <ucdr_deserialize_array_float+0x2a>
 80100a8:	7d21      	ldrb	r1, [r4, #20]
 80100aa:	3501      	adds	r5, #1
 80100ac:	4632      	mov	r2, r6
 80100ae:	4620      	mov	r0, r4
 80100b0:	3604      	adds	r6, #4
 80100b2:	f001 fc0d 	bl	80118d0 <ucdr_deserialize_endian_float>
 80100b6:	42af      	cmp	r7, r5
 80100b8:	d1f6      	bne.n	80100a8 <ucdr_deserialize_array_float+0x28>
 80100ba:	7da0      	ldrb	r0, [r4, #22]
 80100bc:	f080 0001 	eor.w	r0, r0, #1
 80100c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100c4:	00bf      	lsls	r7, r7, #2
 80100c6:	4620      	mov	r0, r4
 80100c8:	4639      	mov	r1, r7
 80100ca:	f001 fc97 	bl	80119fc <ucdr_check_buffer_available_for>
 80100ce:	b9f8      	cbnz	r0, 8010110 <ucdr_deserialize_array_float+0x90>
 80100d0:	46b8      	mov	r8, r7
 80100d2:	e00c      	b.n	80100ee <ucdr_deserialize_array_float+0x6e>
 80100d4:	18f0      	adds	r0, r6, r3
 80100d6:	462a      	mov	r2, r5
 80100d8:	68a1      	ldr	r1, [r4, #8]
 80100da:	eba8 0805 	sub.w	r8, r8, r5
 80100de:	f00d fe4a 	bl	801dd76 <memcpy>
 80100e2:	68a2      	ldr	r2, [r4, #8]
 80100e4:	6923      	ldr	r3, [r4, #16]
 80100e6:	442a      	add	r2, r5
 80100e8:	442b      	add	r3, r5
 80100ea:	60a2      	str	r2, [r4, #8]
 80100ec:	6123      	str	r3, [r4, #16]
 80100ee:	4641      	mov	r1, r8
 80100f0:	2204      	movs	r2, #4
 80100f2:	4620      	mov	r0, r4
 80100f4:	f001 fd0c 	bl	8011b10 <ucdr_check_final_buffer_behavior_array>
 80100f8:	eba7 0308 	sub.w	r3, r7, r8
 80100fc:	4605      	mov	r5, r0
 80100fe:	2800      	cmp	r0, #0
 8010100:	d1e8      	bne.n	80100d4 <ucdr_deserialize_array_float+0x54>
 8010102:	2304      	movs	r3, #4
 8010104:	7da0      	ldrb	r0, [r4, #22]
 8010106:	7563      	strb	r3, [r4, #21]
 8010108:	f080 0001 	eor.w	r0, r0, #1
 801010c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010110:	463a      	mov	r2, r7
 8010112:	68a1      	ldr	r1, [r4, #8]
 8010114:	4630      	mov	r0, r6
 8010116:	f00d fe2e 	bl	801dd76 <memcpy>
 801011a:	68a2      	ldr	r2, [r4, #8]
 801011c:	6923      	ldr	r3, [r4, #16]
 801011e:	443a      	add	r2, r7
 8010120:	441f      	add	r7, r3
 8010122:	60a2      	str	r2, [r4, #8]
 8010124:	6127      	str	r7, [r4, #16]
 8010126:	e7ec      	b.n	8010102 <ucdr_deserialize_array_float+0x82>

08010128 <ucdr_serialize_bool>:
 8010128:	b538      	push	{r3, r4, r5, lr}
 801012a:	460d      	mov	r5, r1
 801012c:	2101      	movs	r1, #1
 801012e:	4604      	mov	r4, r0
 8010130:	f001 fc70 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8010134:	b148      	cbz	r0, 801014a <ucdr_serialize_bool+0x22>
 8010136:	68a3      	ldr	r3, [r4, #8]
 8010138:	2101      	movs	r1, #1
 801013a:	701d      	strb	r5, [r3, #0]
 801013c:	68a2      	ldr	r2, [r4, #8]
 801013e:	6923      	ldr	r3, [r4, #16]
 8010140:	440a      	add	r2, r1
 8010142:	7561      	strb	r1, [r4, #21]
 8010144:	440b      	add	r3, r1
 8010146:	60a2      	str	r2, [r4, #8]
 8010148:	6123      	str	r3, [r4, #16]
 801014a:	7da0      	ldrb	r0, [r4, #22]
 801014c:	f080 0001 	eor.w	r0, r0, #1
 8010150:	bd38      	pop	{r3, r4, r5, pc}
 8010152:	bf00      	nop

08010154 <ucdr_deserialize_bool>:
 8010154:	b538      	push	{r3, r4, r5, lr}
 8010156:	460d      	mov	r5, r1
 8010158:	2101      	movs	r1, #1
 801015a:	4604      	mov	r4, r0
 801015c:	f001 fc5a 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8010160:	b160      	cbz	r0, 801017c <ucdr_deserialize_bool+0x28>
 8010162:	68a2      	ldr	r2, [r4, #8]
 8010164:	2101      	movs	r1, #1
 8010166:	6923      	ldr	r3, [r4, #16]
 8010168:	f812 0b01 	ldrb.w	r0, [r2], #1
 801016c:	440b      	add	r3, r1
 801016e:	3800      	subs	r0, #0
 8010170:	bf18      	it	ne
 8010172:	2001      	movne	r0, #1
 8010174:	7028      	strb	r0, [r5, #0]
 8010176:	60a2      	str	r2, [r4, #8]
 8010178:	6123      	str	r3, [r4, #16]
 801017a:	7561      	strb	r1, [r4, #21]
 801017c:	7da0      	ldrb	r0, [r4, #22]
 801017e:	f080 0001 	eor.w	r0, r0, #1
 8010182:	bd38      	pop	{r3, r4, r5, pc}

08010184 <ucdr_serialize_uint8_t>:
 8010184:	b538      	push	{r3, r4, r5, lr}
 8010186:	460d      	mov	r5, r1
 8010188:	2101      	movs	r1, #1
 801018a:	4604      	mov	r4, r0
 801018c:	f001 fc42 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8010190:	b148      	cbz	r0, 80101a6 <ucdr_serialize_uint8_t+0x22>
 8010192:	68a3      	ldr	r3, [r4, #8]
 8010194:	2101      	movs	r1, #1
 8010196:	701d      	strb	r5, [r3, #0]
 8010198:	68a2      	ldr	r2, [r4, #8]
 801019a:	6923      	ldr	r3, [r4, #16]
 801019c:	440a      	add	r2, r1
 801019e:	7561      	strb	r1, [r4, #21]
 80101a0:	440b      	add	r3, r1
 80101a2:	60a2      	str	r2, [r4, #8]
 80101a4:	6123      	str	r3, [r4, #16]
 80101a6:	7da0      	ldrb	r0, [r4, #22]
 80101a8:	f080 0001 	eor.w	r0, r0, #1
 80101ac:	bd38      	pop	{r3, r4, r5, pc}
 80101ae:	bf00      	nop

080101b0 <ucdr_deserialize_uint8_t>:
 80101b0:	b538      	push	{r3, r4, r5, lr}
 80101b2:	460d      	mov	r5, r1
 80101b4:	2101      	movs	r1, #1
 80101b6:	4604      	mov	r4, r0
 80101b8:	f001 fc2c 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 80101bc:	b150      	cbz	r0, 80101d4 <ucdr_deserialize_uint8_t+0x24>
 80101be:	68a3      	ldr	r3, [r4, #8]
 80101c0:	2101      	movs	r1, #1
 80101c2:	781b      	ldrb	r3, [r3, #0]
 80101c4:	702b      	strb	r3, [r5, #0]
 80101c6:	68a2      	ldr	r2, [r4, #8]
 80101c8:	6923      	ldr	r3, [r4, #16]
 80101ca:	440a      	add	r2, r1
 80101cc:	7561      	strb	r1, [r4, #21]
 80101ce:	440b      	add	r3, r1
 80101d0:	60a2      	str	r2, [r4, #8]
 80101d2:	6123      	str	r3, [r4, #16]
 80101d4:	7da0      	ldrb	r0, [r4, #22]
 80101d6:	f080 0001 	eor.w	r0, r0, #1
 80101da:	bd38      	pop	{r3, r4, r5, pc}

080101dc <ucdr_serialize_uint16_t>:
 80101dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101e0:	460b      	mov	r3, r1
 80101e2:	b082      	sub	sp, #8
 80101e4:	4604      	mov	r4, r0
 80101e6:	2102      	movs	r1, #2
 80101e8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80101ec:	f001 fc66 	bl	8011abc <ucdr_buffer_alignment>
 80101f0:	4601      	mov	r1, r0
 80101f2:	4620      	mov	r0, r4
 80101f4:	7d67      	ldrb	r7, [r4, #21]
 80101f6:	f001 fca9 	bl	8011b4c <ucdr_advance_buffer>
 80101fa:	2102      	movs	r1, #2
 80101fc:	4620      	mov	r0, r4
 80101fe:	f001 fbfd 	bl	80119fc <ucdr_check_buffer_available_for>
 8010202:	bb78      	cbnz	r0, 8010264 <ucdr_serialize_uint16_t+0x88>
 8010204:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010208:	42ab      	cmp	r3, r5
 801020a:	d926      	bls.n	801025a <ucdr_serialize_uint16_t+0x7e>
 801020c:	1b5e      	subs	r6, r3, r5
 801020e:	60a3      	str	r3, [r4, #8]
 8010210:	6923      	ldr	r3, [r4, #16]
 8010212:	4620      	mov	r0, r4
 8010214:	f1c6 0802 	rsb	r8, r6, #2
 8010218:	4433      	add	r3, r6
 801021a:	4641      	mov	r1, r8
 801021c:	6123      	str	r3, [r4, #16]
 801021e:	f001 fbf9 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8010222:	2800      	cmp	r0, #0
 8010224:	d03b      	beq.n	801029e <ucdr_serialize_uint16_t+0xc2>
 8010226:	7d23      	ldrb	r3, [r4, #20]
 8010228:	2b01      	cmp	r3, #1
 801022a:	d04a      	beq.n	80102c2 <ucdr_serialize_uint16_t+0xe6>
 801022c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010230:	702b      	strb	r3, [r5, #0]
 8010232:	2e00      	cmp	r6, #0
 8010234:	d040      	beq.n	80102b8 <ucdr_serialize_uint16_t+0xdc>
 8010236:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801023a:	706b      	strb	r3, [r5, #1]
 801023c:	6923      	ldr	r3, [r4, #16]
 801023e:	2102      	movs	r1, #2
 8010240:	68a2      	ldr	r2, [r4, #8]
 8010242:	3302      	adds	r3, #2
 8010244:	7da0      	ldrb	r0, [r4, #22]
 8010246:	4442      	add	r2, r8
 8010248:	7561      	strb	r1, [r4, #21]
 801024a:	1b9e      	subs	r6, r3, r6
 801024c:	f080 0001 	eor.w	r0, r0, #1
 8010250:	60a2      	str	r2, [r4, #8]
 8010252:	6126      	str	r6, [r4, #16]
 8010254:	b002      	add	sp, #8
 8010256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801025a:	2102      	movs	r1, #2
 801025c:	4620      	mov	r0, r4
 801025e:	f001 fbd9 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8010262:	b190      	cbz	r0, 801028a <ucdr_serialize_uint16_t+0xae>
 8010264:	7d23      	ldrb	r3, [r4, #20]
 8010266:	2b01      	cmp	r3, #1
 8010268:	68a3      	ldr	r3, [r4, #8]
 801026a:	d014      	beq.n	8010296 <ucdr_serialize_uint16_t+0xba>
 801026c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010270:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010274:	7019      	strb	r1, [r3, #0]
 8010276:	68a3      	ldr	r3, [r4, #8]
 8010278:	705a      	strb	r2, [r3, #1]
 801027a:	2102      	movs	r1, #2
 801027c:	68a2      	ldr	r2, [r4, #8]
 801027e:	6923      	ldr	r3, [r4, #16]
 8010280:	440a      	add	r2, r1
 8010282:	7561      	strb	r1, [r4, #21]
 8010284:	440b      	add	r3, r1
 8010286:	60a2      	str	r2, [r4, #8]
 8010288:	6123      	str	r3, [r4, #16]
 801028a:	7da0      	ldrb	r0, [r4, #22]
 801028c:	f080 0001 	eor.w	r0, r0, #1
 8010290:	b002      	add	sp, #8
 8010292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010296:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801029a:	801a      	strh	r2, [r3, #0]
 801029c:	e7ed      	b.n	801027a <ucdr_serialize_uint16_t+0x9e>
 801029e:	68a2      	ldr	r2, [r4, #8]
 80102a0:	6923      	ldr	r3, [r4, #16]
 80102a2:	7da0      	ldrb	r0, [r4, #22]
 80102a4:	1b92      	subs	r2, r2, r6
 80102a6:	1b9b      	subs	r3, r3, r6
 80102a8:	7567      	strb	r7, [r4, #21]
 80102aa:	f080 0001 	eor.w	r0, r0, #1
 80102ae:	60a2      	str	r2, [r4, #8]
 80102b0:	6123      	str	r3, [r4, #16]
 80102b2:	b002      	add	sp, #8
 80102b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102b8:	68a3      	ldr	r3, [r4, #8]
 80102ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80102be:	701a      	strb	r2, [r3, #0]
 80102c0:	e7bc      	b.n	801023c <ucdr_serialize_uint16_t+0x60>
 80102c2:	4628      	mov	r0, r5
 80102c4:	f10d 0506 	add.w	r5, sp, #6
 80102c8:	4632      	mov	r2, r6
 80102ca:	4629      	mov	r1, r5
 80102cc:	f00d fd53 	bl	801dd76 <memcpy>
 80102d0:	4642      	mov	r2, r8
 80102d2:	19a9      	adds	r1, r5, r6
 80102d4:	68a0      	ldr	r0, [r4, #8]
 80102d6:	f00d fd4e 	bl	801dd76 <memcpy>
 80102da:	e7af      	b.n	801023c <ucdr_serialize_uint16_t+0x60>

080102dc <ucdr_serialize_endian_uint16_t>:
 80102dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80102e0:	4604      	mov	r4, r0
 80102e2:	b083      	sub	sp, #12
 80102e4:	460d      	mov	r5, r1
 80102e6:	2102      	movs	r1, #2
 80102e8:	f8ad 2006 	strh.w	r2, [sp, #6]
 80102ec:	f001 fbe6 	bl	8011abc <ucdr_buffer_alignment>
 80102f0:	4601      	mov	r1, r0
 80102f2:	4620      	mov	r0, r4
 80102f4:	f894 8015 	ldrb.w	r8, [r4, #21]
 80102f8:	f001 fc28 	bl	8011b4c <ucdr_advance_buffer>
 80102fc:	2102      	movs	r1, #2
 80102fe:	4620      	mov	r0, r4
 8010300:	f001 fb7c 	bl	80119fc <ucdr_check_buffer_available_for>
 8010304:	bb70      	cbnz	r0, 8010364 <ucdr_serialize_endian_uint16_t+0x88>
 8010306:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801030a:	42be      	cmp	r6, r7
 801030c:	d925      	bls.n	801035a <ucdr_serialize_endian_uint16_t+0x7e>
 801030e:	6923      	ldr	r3, [r4, #16]
 8010310:	4620      	mov	r0, r4
 8010312:	60a6      	str	r6, [r4, #8]
 8010314:	1bf6      	subs	r6, r6, r7
 8010316:	4433      	add	r3, r6
 8010318:	f1c6 0902 	rsb	r9, r6, #2
 801031c:	6123      	str	r3, [r4, #16]
 801031e:	4649      	mov	r1, r9
 8010320:	f001 fb78 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8010324:	2800      	cmp	r0, #0
 8010326:	d039      	beq.n	801039c <ucdr_serialize_endian_uint16_t+0xc0>
 8010328:	2d01      	cmp	r5, #1
 801032a:	d04a      	beq.n	80103c2 <ucdr_serialize_endian_uint16_t+0xe6>
 801032c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010330:	703b      	strb	r3, [r7, #0]
 8010332:	2e00      	cmp	r6, #0
 8010334:	d040      	beq.n	80103b8 <ucdr_serialize_endian_uint16_t+0xdc>
 8010336:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801033a:	707b      	strb	r3, [r7, #1]
 801033c:	6923      	ldr	r3, [r4, #16]
 801033e:	2102      	movs	r1, #2
 8010340:	68a2      	ldr	r2, [r4, #8]
 8010342:	7da0      	ldrb	r0, [r4, #22]
 8010344:	3302      	adds	r3, #2
 8010346:	444a      	add	r2, r9
 8010348:	7561      	strb	r1, [r4, #21]
 801034a:	1b9b      	subs	r3, r3, r6
 801034c:	f080 0001 	eor.w	r0, r0, #1
 8010350:	60a2      	str	r2, [r4, #8]
 8010352:	6123      	str	r3, [r4, #16]
 8010354:	b003      	add	sp, #12
 8010356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801035a:	2102      	movs	r1, #2
 801035c:	4620      	mov	r0, r4
 801035e:	f001 fb59 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8010362:	b188      	cbz	r0, 8010388 <ucdr_serialize_endian_uint16_t+0xac>
 8010364:	2d01      	cmp	r5, #1
 8010366:	68a3      	ldr	r3, [r4, #8]
 8010368:	d014      	beq.n	8010394 <ucdr_serialize_endian_uint16_t+0xb8>
 801036a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801036e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010372:	7019      	strb	r1, [r3, #0]
 8010374:	68a3      	ldr	r3, [r4, #8]
 8010376:	705a      	strb	r2, [r3, #1]
 8010378:	2102      	movs	r1, #2
 801037a:	68a2      	ldr	r2, [r4, #8]
 801037c:	6923      	ldr	r3, [r4, #16]
 801037e:	440a      	add	r2, r1
 8010380:	7561      	strb	r1, [r4, #21]
 8010382:	440b      	add	r3, r1
 8010384:	60a2      	str	r2, [r4, #8]
 8010386:	6123      	str	r3, [r4, #16]
 8010388:	7da0      	ldrb	r0, [r4, #22]
 801038a:	f080 0001 	eor.w	r0, r0, #1
 801038e:	b003      	add	sp, #12
 8010390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010394:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010398:	801a      	strh	r2, [r3, #0]
 801039a:	e7ed      	b.n	8010378 <ucdr_serialize_endian_uint16_t+0x9c>
 801039c:	68a2      	ldr	r2, [r4, #8]
 801039e:	6923      	ldr	r3, [r4, #16]
 80103a0:	7da0      	ldrb	r0, [r4, #22]
 80103a2:	1b92      	subs	r2, r2, r6
 80103a4:	1b9b      	subs	r3, r3, r6
 80103a6:	f884 8015 	strb.w	r8, [r4, #21]
 80103aa:	f080 0001 	eor.w	r0, r0, #1
 80103ae:	60a2      	str	r2, [r4, #8]
 80103b0:	6123      	str	r3, [r4, #16]
 80103b2:	b003      	add	sp, #12
 80103b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103b8:	68a3      	ldr	r3, [r4, #8]
 80103ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80103be:	701a      	strb	r2, [r3, #0]
 80103c0:	e7bc      	b.n	801033c <ucdr_serialize_endian_uint16_t+0x60>
 80103c2:	f10d 0506 	add.w	r5, sp, #6
 80103c6:	4632      	mov	r2, r6
 80103c8:	4638      	mov	r0, r7
 80103ca:	4629      	mov	r1, r5
 80103cc:	f00d fcd3 	bl	801dd76 <memcpy>
 80103d0:	464a      	mov	r2, r9
 80103d2:	19a9      	adds	r1, r5, r6
 80103d4:	68a0      	ldr	r0, [r4, #8]
 80103d6:	f00d fcce 	bl	801dd76 <memcpy>
 80103da:	e7af      	b.n	801033c <ucdr_serialize_endian_uint16_t+0x60>

080103dc <ucdr_deserialize_uint16_t>:
 80103dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103e0:	4604      	mov	r4, r0
 80103e2:	460d      	mov	r5, r1
 80103e4:	2102      	movs	r1, #2
 80103e6:	f001 fb69 	bl	8011abc <ucdr_buffer_alignment>
 80103ea:	4601      	mov	r1, r0
 80103ec:	4620      	mov	r0, r4
 80103ee:	f894 8015 	ldrb.w	r8, [r4, #21]
 80103f2:	f001 fbab 	bl	8011b4c <ucdr_advance_buffer>
 80103f6:	2102      	movs	r1, #2
 80103f8:	4620      	mov	r0, r4
 80103fa:	f001 faff 	bl	80119fc <ucdr_check_buffer_available_for>
 80103fe:	bb60      	cbnz	r0, 801045a <ucdr_deserialize_uint16_t+0x7e>
 8010400:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010404:	42be      	cmp	r6, r7
 8010406:	d923      	bls.n	8010450 <ucdr_deserialize_uint16_t+0x74>
 8010408:	6923      	ldr	r3, [r4, #16]
 801040a:	4620      	mov	r0, r4
 801040c:	60a6      	str	r6, [r4, #8]
 801040e:	1bf6      	subs	r6, r6, r7
 8010410:	4433      	add	r3, r6
 8010412:	f1c6 0902 	rsb	r9, r6, #2
 8010416:	6123      	str	r3, [r4, #16]
 8010418:	4649      	mov	r1, r9
 801041a:	f001 fafb 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 801041e:	2800      	cmp	r0, #0
 8010420:	d034      	beq.n	801048c <ucdr_deserialize_uint16_t+0xb0>
 8010422:	7d23      	ldrb	r3, [r4, #20]
 8010424:	2b01      	cmp	r3, #1
 8010426:	d042      	beq.n	80104ae <ucdr_deserialize_uint16_t+0xd2>
 8010428:	787b      	ldrb	r3, [r7, #1]
 801042a:	702b      	strb	r3, [r5, #0]
 801042c:	2e00      	cmp	r6, #0
 801042e:	d03a      	beq.n	80104a6 <ucdr_deserialize_uint16_t+0xca>
 8010430:	783b      	ldrb	r3, [r7, #0]
 8010432:	706b      	strb	r3, [r5, #1]
 8010434:	6923      	ldr	r3, [r4, #16]
 8010436:	2102      	movs	r1, #2
 8010438:	68a2      	ldr	r2, [r4, #8]
 801043a:	3302      	adds	r3, #2
 801043c:	7da0      	ldrb	r0, [r4, #22]
 801043e:	444a      	add	r2, r9
 8010440:	7561      	strb	r1, [r4, #21]
 8010442:	1b9b      	subs	r3, r3, r6
 8010444:	f080 0001 	eor.w	r0, r0, #1
 8010448:	60a2      	str	r2, [r4, #8]
 801044a:	6123      	str	r3, [r4, #16]
 801044c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010450:	2102      	movs	r1, #2
 8010452:	4620      	mov	r0, r4
 8010454:	f001 fade 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8010458:	b180      	cbz	r0, 801047c <ucdr_deserialize_uint16_t+0xa0>
 801045a:	7d23      	ldrb	r3, [r4, #20]
 801045c:	2b01      	cmp	r3, #1
 801045e:	68a3      	ldr	r3, [r4, #8]
 8010460:	d011      	beq.n	8010486 <ucdr_deserialize_uint16_t+0xaa>
 8010462:	785b      	ldrb	r3, [r3, #1]
 8010464:	702b      	strb	r3, [r5, #0]
 8010466:	68a3      	ldr	r3, [r4, #8]
 8010468:	781b      	ldrb	r3, [r3, #0]
 801046a:	706b      	strb	r3, [r5, #1]
 801046c:	2102      	movs	r1, #2
 801046e:	68a2      	ldr	r2, [r4, #8]
 8010470:	6923      	ldr	r3, [r4, #16]
 8010472:	440a      	add	r2, r1
 8010474:	7561      	strb	r1, [r4, #21]
 8010476:	440b      	add	r3, r1
 8010478:	60a2      	str	r2, [r4, #8]
 801047a:	6123      	str	r3, [r4, #16]
 801047c:	7da0      	ldrb	r0, [r4, #22]
 801047e:	f080 0001 	eor.w	r0, r0, #1
 8010482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010486:	881b      	ldrh	r3, [r3, #0]
 8010488:	802b      	strh	r3, [r5, #0]
 801048a:	e7ef      	b.n	801046c <ucdr_deserialize_uint16_t+0x90>
 801048c:	68a2      	ldr	r2, [r4, #8]
 801048e:	6923      	ldr	r3, [r4, #16]
 8010490:	1b92      	subs	r2, r2, r6
 8010492:	7da0      	ldrb	r0, [r4, #22]
 8010494:	1b9b      	subs	r3, r3, r6
 8010496:	f884 8015 	strb.w	r8, [r4, #21]
 801049a:	f080 0001 	eor.w	r0, r0, #1
 801049e:	60a2      	str	r2, [r4, #8]
 80104a0:	6123      	str	r3, [r4, #16]
 80104a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104a6:	68a3      	ldr	r3, [r4, #8]
 80104a8:	781b      	ldrb	r3, [r3, #0]
 80104aa:	706b      	strb	r3, [r5, #1]
 80104ac:	e7c2      	b.n	8010434 <ucdr_deserialize_uint16_t+0x58>
 80104ae:	4639      	mov	r1, r7
 80104b0:	4632      	mov	r2, r6
 80104b2:	4628      	mov	r0, r5
 80104b4:	f00d fc5f 	bl	801dd76 <memcpy>
 80104b8:	464a      	mov	r2, r9
 80104ba:	19a8      	adds	r0, r5, r6
 80104bc:	68a1      	ldr	r1, [r4, #8]
 80104be:	f00d fc5a 	bl	801dd76 <memcpy>
 80104c2:	e7b7      	b.n	8010434 <ucdr_deserialize_uint16_t+0x58>

080104c4 <ucdr_deserialize_endian_uint16_t>:
 80104c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80104c8:	4604      	mov	r4, r0
 80104ca:	460e      	mov	r6, r1
 80104cc:	2102      	movs	r1, #2
 80104ce:	4615      	mov	r5, r2
 80104d0:	f001 faf4 	bl	8011abc <ucdr_buffer_alignment>
 80104d4:	4601      	mov	r1, r0
 80104d6:	4620      	mov	r0, r4
 80104d8:	f894 8015 	ldrb.w	r8, [r4, #21]
 80104dc:	f001 fb36 	bl	8011b4c <ucdr_advance_buffer>
 80104e0:	2102      	movs	r1, #2
 80104e2:	4620      	mov	r0, r4
 80104e4:	f001 fa8a 	bl	80119fc <ucdr_check_buffer_available_for>
 80104e8:	bb70      	cbnz	r0, 8010548 <ucdr_deserialize_endian_uint16_t+0x84>
 80104ea:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 80104ee:	454f      	cmp	r7, r9
 80104f0:	d925      	bls.n	801053e <ucdr_deserialize_endian_uint16_t+0x7a>
 80104f2:	6923      	ldr	r3, [r4, #16]
 80104f4:	4620      	mov	r0, r4
 80104f6:	60a7      	str	r7, [r4, #8]
 80104f8:	eba7 0709 	sub.w	r7, r7, r9
 80104fc:	443b      	add	r3, r7
 80104fe:	f1c7 0a02 	rsb	sl, r7, #2
 8010502:	6123      	str	r3, [r4, #16]
 8010504:	4651      	mov	r1, sl
 8010506:	f001 fa85 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 801050a:	2800      	cmp	r0, #0
 801050c:	d034      	beq.n	8010578 <ucdr_deserialize_endian_uint16_t+0xb4>
 801050e:	2e01      	cmp	r6, #1
 8010510:	d043      	beq.n	801059a <ucdr_deserialize_endian_uint16_t+0xd6>
 8010512:	f899 3001 	ldrb.w	r3, [r9, #1]
 8010516:	702b      	strb	r3, [r5, #0]
 8010518:	2f00      	cmp	r7, #0
 801051a:	d03a      	beq.n	8010592 <ucdr_deserialize_endian_uint16_t+0xce>
 801051c:	f899 3000 	ldrb.w	r3, [r9]
 8010520:	706b      	strb	r3, [r5, #1]
 8010522:	6923      	ldr	r3, [r4, #16]
 8010524:	2102      	movs	r1, #2
 8010526:	68a2      	ldr	r2, [r4, #8]
 8010528:	3302      	adds	r3, #2
 801052a:	7da0      	ldrb	r0, [r4, #22]
 801052c:	4452      	add	r2, sl
 801052e:	7561      	strb	r1, [r4, #21]
 8010530:	1bdb      	subs	r3, r3, r7
 8010532:	f080 0001 	eor.w	r0, r0, #1
 8010536:	60a2      	str	r2, [r4, #8]
 8010538:	6123      	str	r3, [r4, #16]
 801053a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801053e:	2102      	movs	r1, #2
 8010540:	4620      	mov	r0, r4
 8010542:	f001 fa67 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8010546:	b178      	cbz	r0, 8010568 <ucdr_deserialize_endian_uint16_t+0xa4>
 8010548:	2e01      	cmp	r6, #1
 801054a:	68a3      	ldr	r3, [r4, #8]
 801054c:	d011      	beq.n	8010572 <ucdr_deserialize_endian_uint16_t+0xae>
 801054e:	785b      	ldrb	r3, [r3, #1]
 8010550:	702b      	strb	r3, [r5, #0]
 8010552:	68a3      	ldr	r3, [r4, #8]
 8010554:	781b      	ldrb	r3, [r3, #0]
 8010556:	706b      	strb	r3, [r5, #1]
 8010558:	2102      	movs	r1, #2
 801055a:	68a2      	ldr	r2, [r4, #8]
 801055c:	6923      	ldr	r3, [r4, #16]
 801055e:	440a      	add	r2, r1
 8010560:	7561      	strb	r1, [r4, #21]
 8010562:	440b      	add	r3, r1
 8010564:	60a2      	str	r2, [r4, #8]
 8010566:	6123      	str	r3, [r4, #16]
 8010568:	7da0      	ldrb	r0, [r4, #22]
 801056a:	f080 0001 	eor.w	r0, r0, #1
 801056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010572:	881b      	ldrh	r3, [r3, #0]
 8010574:	802b      	strh	r3, [r5, #0]
 8010576:	e7ef      	b.n	8010558 <ucdr_deserialize_endian_uint16_t+0x94>
 8010578:	68a2      	ldr	r2, [r4, #8]
 801057a:	6923      	ldr	r3, [r4, #16]
 801057c:	1bd2      	subs	r2, r2, r7
 801057e:	7da0      	ldrb	r0, [r4, #22]
 8010580:	1bdb      	subs	r3, r3, r7
 8010582:	f884 8015 	strb.w	r8, [r4, #21]
 8010586:	f080 0001 	eor.w	r0, r0, #1
 801058a:	60a2      	str	r2, [r4, #8]
 801058c:	6123      	str	r3, [r4, #16]
 801058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010592:	68a3      	ldr	r3, [r4, #8]
 8010594:	781b      	ldrb	r3, [r3, #0]
 8010596:	706b      	strb	r3, [r5, #1]
 8010598:	e7c3      	b.n	8010522 <ucdr_deserialize_endian_uint16_t+0x5e>
 801059a:	4649      	mov	r1, r9
 801059c:	463a      	mov	r2, r7
 801059e:	4628      	mov	r0, r5
 80105a0:	f00d fbe9 	bl	801dd76 <memcpy>
 80105a4:	4652      	mov	r2, sl
 80105a6:	19e8      	adds	r0, r5, r7
 80105a8:	68a1      	ldr	r1, [r4, #8]
 80105aa:	f00d fbe4 	bl	801dd76 <memcpy>
 80105ae:	e7b8      	b.n	8010522 <ucdr_deserialize_endian_uint16_t+0x5e>

080105b0 <ucdr_serialize_uint32_t>:
 80105b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105b4:	b082      	sub	sp, #8
 80105b6:	4604      	mov	r4, r0
 80105b8:	9101      	str	r1, [sp, #4]
 80105ba:	2104      	movs	r1, #4
 80105bc:	f001 fa7e 	bl	8011abc <ucdr_buffer_alignment>
 80105c0:	4601      	mov	r1, r0
 80105c2:	4620      	mov	r0, r4
 80105c4:	7d67      	ldrb	r7, [r4, #21]
 80105c6:	f001 fac1 	bl	8011b4c <ucdr_advance_buffer>
 80105ca:	2104      	movs	r1, #4
 80105cc:	4620      	mov	r0, r4
 80105ce:	f001 fa15 	bl	80119fc <ucdr_check_buffer_available_for>
 80105d2:	2800      	cmp	r0, #0
 80105d4:	d139      	bne.n	801064a <ucdr_serialize_uint32_t+0x9a>
 80105d6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80105da:	42ab      	cmp	r3, r5
 80105dc:	d930      	bls.n	8010640 <ucdr_serialize_uint32_t+0x90>
 80105de:	1b5e      	subs	r6, r3, r5
 80105e0:	60a3      	str	r3, [r4, #8]
 80105e2:	6923      	ldr	r3, [r4, #16]
 80105e4:	4620      	mov	r0, r4
 80105e6:	f1c6 0804 	rsb	r8, r6, #4
 80105ea:	4433      	add	r3, r6
 80105ec:	4641      	mov	r1, r8
 80105ee:	6123      	str	r3, [r4, #16]
 80105f0:	f001 fa10 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 80105f4:	2800      	cmp	r0, #0
 80105f6:	d04c      	beq.n	8010692 <ucdr_serialize_uint32_t+0xe2>
 80105f8:	7d23      	ldrb	r3, [r4, #20]
 80105fa:	2b01      	cmp	r3, #1
 80105fc:	d063      	beq.n	80106c6 <ucdr_serialize_uint32_t+0x116>
 80105fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010602:	702b      	strb	r3, [r5, #0]
 8010604:	2e00      	cmp	r6, #0
 8010606:	d051      	beq.n	80106ac <ucdr_serialize_uint32_t+0xfc>
 8010608:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801060c:	2e01      	cmp	r6, #1
 801060e:	706b      	strb	r3, [r5, #1]
 8010610:	d050      	beq.n	80106b4 <ucdr_serialize_uint32_t+0x104>
 8010612:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010616:	2e02      	cmp	r6, #2
 8010618:	70ab      	strb	r3, [r5, #2]
 801061a:	d04f      	beq.n	80106bc <ucdr_serialize_uint32_t+0x10c>
 801061c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010620:	70eb      	strb	r3, [r5, #3]
 8010622:	6923      	ldr	r3, [r4, #16]
 8010624:	2104      	movs	r1, #4
 8010626:	68a2      	ldr	r2, [r4, #8]
 8010628:	3304      	adds	r3, #4
 801062a:	7da0      	ldrb	r0, [r4, #22]
 801062c:	4442      	add	r2, r8
 801062e:	7561      	strb	r1, [r4, #21]
 8010630:	1b9e      	subs	r6, r3, r6
 8010632:	f080 0001 	eor.w	r0, r0, #1
 8010636:	60a2      	str	r2, [r4, #8]
 8010638:	6126      	str	r6, [r4, #16]
 801063a:	b002      	add	sp, #8
 801063c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010640:	2104      	movs	r1, #4
 8010642:	4620      	mov	r0, r4
 8010644:	f001 f9e6 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8010648:	b1d0      	cbz	r0, 8010680 <ucdr_serialize_uint32_t+0xd0>
 801064a:	7d23      	ldrb	r3, [r4, #20]
 801064c:	2b01      	cmp	r3, #1
 801064e:	68a3      	ldr	r3, [r4, #8]
 8010650:	d01c      	beq.n	801068c <ucdr_serialize_uint32_t+0xdc>
 8010652:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010656:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801065a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801065e:	7018      	strb	r0, [r3, #0]
 8010660:	68a3      	ldr	r3, [r4, #8]
 8010662:	705a      	strb	r2, [r3, #1]
 8010664:	68a3      	ldr	r3, [r4, #8]
 8010666:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801066a:	7099      	strb	r1, [r3, #2]
 801066c:	68a3      	ldr	r3, [r4, #8]
 801066e:	70da      	strb	r2, [r3, #3]
 8010670:	2104      	movs	r1, #4
 8010672:	68a2      	ldr	r2, [r4, #8]
 8010674:	6923      	ldr	r3, [r4, #16]
 8010676:	440a      	add	r2, r1
 8010678:	7561      	strb	r1, [r4, #21]
 801067a:	440b      	add	r3, r1
 801067c:	60a2      	str	r2, [r4, #8]
 801067e:	6123      	str	r3, [r4, #16]
 8010680:	7da0      	ldrb	r0, [r4, #22]
 8010682:	f080 0001 	eor.w	r0, r0, #1
 8010686:	b002      	add	sp, #8
 8010688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801068c:	9a01      	ldr	r2, [sp, #4]
 801068e:	601a      	str	r2, [r3, #0]
 8010690:	e7ee      	b.n	8010670 <ucdr_serialize_uint32_t+0xc0>
 8010692:	68a2      	ldr	r2, [r4, #8]
 8010694:	6923      	ldr	r3, [r4, #16]
 8010696:	7da0      	ldrb	r0, [r4, #22]
 8010698:	1b92      	subs	r2, r2, r6
 801069a:	1b9b      	subs	r3, r3, r6
 801069c:	7567      	strb	r7, [r4, #21]
 801069e:	f080 0001 	eor.w	r0, r0, #1
 80106a2:	60a2      	str	r2, [r4, #8]
 80106a4:	6123      	str	r3, [r4, #16]
 80106a6:	b002      	add	sp, #8
 80106a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106ac:	68a3      	ldr	r3, [r4, #8]
 80106ae:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80106b2:	701a      	strb	r2, [r3, #0]
 80106b4:	68a3      	ldr	r3, [r4, #8]
 80106b6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80106ba:	701a      	strb	r2, [r3, #0]
 80106bc:	68a3      	ldr	r3, [r4, #8]
 80106be:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80106c2:	701a      	strb	r2, [r3, #0]
 80106c4:	e7ad      	b.n	8010622 <ucdr_serialize_uint32_t+0x72>
 80106c6:	4628      	mov	r0, r5
 80106c8:	ad01      	add	r5, sp, #4
 80106ca:	4632      	mov	r2, r6
 80106cc:	4629      	mov	r1, r5
 80106ce:	f00d fb52 	bl	801dd76 <memcpy>
 80106d2:	4642      	mov	r2, r8
 80106d4:	19a9      	adds	r1, r5, r6
 80106d6:	68a0      	ldr	r0, [r4, #8]
 80106d8:	f00d fb4d 	bl	801dd76 <memcpy>
 80106dc:	e7a1      	b.n	8010622 <ucdr_serialize_uint32_t+0x72>
 80106de:	bf00      	nop

080106e0 <ucdr_serialize_endian_uint32_t>:
 80106e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80106e4:	4604      	mov	r4, r0
 80106e6:	b083      	sub	sp, #12
 80106e8:	460d      	mov	r5, r1
 80106ea:	2104      	movs	r1, #4
 80106ec:	9201      	str	r2, [sp, #4]
 80106ee:	f001 f9e5 	bl	8011abc <ucdr_buffer_alignment>
 80106f2:	4601      	mov	r1, r0
 80106f4:	4620      	mov	r0, r4
 80106f6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80106fa:	f001 fa27 	bl	8011b4c <ucdr_advance_buffer>
 80106fe:	2104      	movs	r1, #4
 8010700:	4620      	mov	r0, r4
 8010702:	f001 f97b 	bl	80119fc <ucdr_check_buffer_available_for>
 8010706:	2800      	cmp	r0, #0
 8010708:	d138      	bne.n	801077c <ucdr_serialize_endian_uint32_t+0x9c>
 801070a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801070e:	42b7      	cmp	r7, r6
 8010710:	d92f      	bls.n	8010772 <ucdr_serialize_endian_uint32_t+0x92>
 8010712:	6923      	ldr	r3, [r4, #16]
 8010714:	4620      	mov	r0, r4
 8010716:	60a7      	str	r7, [r4, #8]
 8010718:	1bbf      	subs	r7, r7, r6
 801071a:	443b      	add	r3, r7
 801071c:	f1c7 0904 	rsb	r9, r7, #4
 8010720:	6123      	str	r3, [r4, #16]
 8010722:	4649      	mov	r1, r9
 8010724:	f001 f976 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8010728:	2800      	cmp	r0, #0
 801072a:	d04a      	beq.n	80107c2 <ucdr_serialize_endian_uint32_t+0xe2>
 801072c:	2d01      	cmp	r5, #1
 801072e:	d063      	beq.n	80107f8 <ucdr_serialize_endian_uint32_t+0x118>
 8010730:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010734:	7033      	strb	r3, [r6, #0]
 8010736:	2f00      	cmp	r7, #0
 8010738:	d051      	beq.n	80107de <ucdr_serialize_endian_uint32_t+0xfe>
 801073a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801073e:	2f01      	cmp	r7, #1
 8010740:	7073      	strb	r3, [r6, #1]
 8010742:	d050      	beq.n	80107e6 <ucdr_serialize_endian_uint32_t+0x106>
 8010744:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010748:	2f02      	cmp	r7, #2
 801074a:	70b3      	strb	r3, [r6, #2]
 801074c:	d04f      	beq.n	80107ee <ucdr_serialize_endian_uint32_t+0x10e>
 801074e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010752:	70f3      	strb	r3, [r6, #3]
 8010754:	6923      	ldr	r3, [r4, #16]
 8010756:	2104      	movs	r1, #4
 8010758:	68a2      	ldr	r2, [r4, #8]
 801075a:	7da0      	ldrb	r0, [r4, #22]
 801075c:	3304      	adds	r3, #4
 801075e:	444a      	add	r2, r9
 8010760:	7561      	strb	r1, [r4, #21]
 8010762:	1bdb      	subs	r3, r3, r7
 8010764:	f080 0001 	eor.w	r0, r0, #1
 8010768:	60a2      	str	r2, [r4, #8]
 801076a:	6123      	str	r3, [r4, #16]
 801076c:	b003      	add	sp, #12
 801076e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010772:	2104      	movs	r1, #4
 8010774:	4620      	mov	r0, r4
 8010776:	f001 f94d 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 801077a:	b1c8      	cbz	r0, 80107b0 <ucdr_serialize_endian_uint32_t+0xd0>
 801077c:	2d01      	cmp	r5, #1
 801077e:	68a3      	ldr	r3, [r4, #8]
 8010780:	d01c      	beq.n	80107bc <ucdr_serialize_endian_uint32_t+0xdc>
 8010782:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010786:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801078a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801078e:	7018      	strb	r0, [r3, #0]
 8010790:	68a3      	ldr	r3, [r4, #8]
 8010792:	705a      	strb	r2, [r3, #1]
 8010794:	68a3      	ldr	r3, [r4, #8]
 8010796:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801079a:	7099      	strb	r1, [r3, #2]
 801079c:	68a3      	ldr	r3, [r4, #8]
 801079e:	70da      	strb	r2, [r3, #3]
 80107a0:	2104      	movs	r1, #4
 80107a2:	68a2      	ldr	r2, [r4, #8]
 80107a4:	6923      	ldr	r3, [r4, #16]
 80107a6:	440a      	add	r2, r1
 80107a8:	7561      	strb	r1, [r4, #21]
 80107aa:	440b      	add	r3, r1
 80107ac:	60a2      	str	r2, [r4, #8]
 80107ae:	6123      	str	r3, [r4, #16]
 80107b0:	7da0      	ldrb	r0, [r4, #22]
 80107b2:	f080 0001 	eor.w	r0, r0, #1
 80107b6:	b003      	add	sp, #12
 80107b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107bc:	9a01      	ldr	r2, [sp, #4]
 80107be:	601a      	str	r2, [r3, #0]
 80107c0:	e7ee      	b.n	80107a0 <ucdr_serialize_endian_uint32_t+0xc0>
 80107c2:	68a2      	ldr	r2, [r4, #8]
 80107c4:	6923      	ldr	r3, [r4, #16]
 80107c6:	7da0      	ldrb	r0, [r4, #22]
 80107c8:	1bd2      	subs	r2, r2, r7
 80107ca:	1bdb      	subs	r3, r3, r7
 80107cc:	f884 8015 	strb.w	r8, [r4, #21]
 80107d0:	f080 0001 	eor.w	r0, r0, #1
 80107d4:	60a2      	str	r2, [r4, #8]
 80107d6:	6123      	str	r3, [r4, #16]
 80107d8:	b003      	add	sp, #12
 80107da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107de:	68a3      	ldr	r3, [r4, #8]
 80107e0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80107e4:	701a      	strb	r2, [r3, #0]
 80107e6:	68a3      	ldr	r3, [r4, #8]
 80107e8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80107ec:	701a      	strb	r2, [r3, #0]
 80107ee:	68a3      	ldr	r3, [r4, #8]
 80107f0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80107f4:	701a      	strb	r2, [r3, #0]
 80107f6:	e7ad      	b.n	8010754 <ucdr_serialize_endian_uint32_t+0x74>
 80107f8:	ad01      	add	r5, sp, #4
 80107fa:	463a      	mov	r2, r7
 80107fc:	4630      	mov	r0, r6
 80107fe:	4629      	mov	r1, r5
 8010800:	f00d fab9 	bl	801dd76 <memcpy>
 8010804:	464a      	mov	r2, r9
 8010806:	19e9      	adds	r1, r5, r7
 8010808:	68a0      	ldr	r0, [r4, #8]
 801080a:	f00d fab4 	bl	801dd76 <memcpy>
 801080e:	e7a1      	b.n	8010754 <ucdr_serialize_endian_uint32_t+0x74>

08010810 <ucdr_deserialize_uint32_t>:
 8010810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010814:	4604      	mov	r4, r0
 8010816:	460d      	mov	r5, r1
 8010818:	2104      	movs	r1, #4
 801081a:	f001 f94f 	bl	8011abc <ucdr_buffer_alignment>
 801081e:	4601      	mov	r1, r0
 8010820:	4620      	mov	r0, r4
 8010822:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010826:	f001 f991 	bl	8011b4c <ucdr_advance_buffer>
 801082a:	2104      	movs	r1, #4
 801082c:	4620      	mov	r0, r4
 801082e:	f001 f8e5 	bl	80119fc <ucdr_check_buffer_available_for>
 8010832:	2800      	cmp	r0, #0
 8010834:	d138      	bne.n	80108a8 <ucdr_deserialize_uint32_t+0x98>
 8010836:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801083a:	42b7      	cmp	r7, r6
 801083c:	d92f      	bls.n	801089e <ucdr_deserialize_uint32_t+0x8e>
 801083e:	6923      	ldr	r3, [r4, #16]
 8010840:	4620      	mov	r0, r4
 8010842:	60a7      	str	r7, [r4, #8]
 8010844:	1bbf      	subs	r7, r7, r6
 8010846:	443b      	add	r3, r7
 8010848:	f1c7 0904 	rsb	r9, r7, #4
 801084c:	6123      	str	r3, [r4, #16]
 801084e:	4649      	mov	r1, r9
 8010850:	f001 f8e0 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8010854:	2800      	cmp	r0, #0
 8010856:	d046      	beq.n	80108e6 <ucdr_deserialize_uint32_t+0xd6>
 8010858:	7d23      	ldrb	r3, [r4, #20]
 801085a:	2b01      	cmp	r3, #1
 801085c:	d05c      	beq.n	8010918 <ucdr_deserialize_uint32_t+0x108>
 801085e:	78f3      	ldrb	r3, [r6, #3]
 8010860:	702b      	strb	r3, [r5, #0]
 8010862:	2f00      	cmp	r7, #0
 8010864:	d04c      	beq.n	8010900 <ucdr_deserialize_uint32_t+0xf0>
 8010866:	78b3      	ldrb	r3, [r6, #2]
 8010868:	2f01      	cmp	r7, #1
 801086a:	706b      	strb	r3, [r5, #1]
 801086c:	f105 0302 	add.w	r3, r5, #2
 8010870:	d04a      	beq.n	8010908 <ucdr_deserialize_uint32_t+0xf8>
 8010872:	7873      	ldrb	r3, [r6, #1]
 8010874:	2f02      	cmp	r7, #2
 8010876:	70ab      	strb	r3, [r5, #2]
 8010878:	f105 0303 	add.w	r3, r5, #3
 801087c:	d048      	beq.n	8010910 <ucdr_deserialize_uint32_t+0x100>
 801087e:	7833      	ldrb	r3, [r6, #0]
 8010880:	70eb      	strb	r3, [r5, #3]
 8010882:	6923      	ldr	r3, [r4, #16]
 8010884:	2104      	movs	r1, #4
 8010886:	68a2      	ldr	r2, [r4, #8]
 8010888:	3304      	adds	r3, #4
 801088a:	7da0      	ldrb	r0, [r4, #22]
 801088c:	444a      	add	r2, r9
 801088e:	7561      	strb	r1, [r4, #21]
 8010890:	1bdb      	subs	r3, r3, r7
 8010892:	f080 0001 	eor.w	r0, r0, #1
 8010896:	60a2      	str	r2, [r4, #8]
 8010898:	6123      	str	r3, [r4, #16]
 801089a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801089e:	2104      	movs	r1, #4
 80108a0:	4620      	mov	r0, r4
 80108a2:	f001 f8b7 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 80108a6:	b1b0      	cbz	r0, 80108d6 <ucdr_deserialize_uint32_t+0xc6>
 80108a8:	7d23      	ldrb	r3, [r4, #20]
 80108aa:	2b01      	cmp	r3, #1
 80108ac:	68a3      	ldr	r3, [r4, #8]
 80108ae:	d017      	beq.n	80108e0 <ucdr_deserialize_uint32_t+0xd0>
 80108b0:	78db      	ldrb	r3, [r3, #3]
 80108b2:	702b      	strb	r3, [r5, #0]
 80108b4:	68a3      	ldr	r3, [r4, #8]
 80108b6:	789b      	ldrb	r3, [r3, #2]
 80108b8:	706b      	strb	r3, [r5, #1]
 80108ba:	68a3      	ldr	r3, [r4, #8]
 80108bc:	785b      	ldrb	r3, [r3, #1]
 80108be:	70ab      	strb	r3, [r5, #2]
 80108c0:	68a3      	ldr	r3, [r4, #8]
 80108c2:	781b      	ldrb	r3, [r3, #0]
 80108c4:	70eb      	strb	r3, [r5, #3]
 80108c6:	2104      	movs	r1, #4
 80108c8:	68a2      	ldr	r2, [r4, #8]
 80108ca:	6923      	ldr	r3, [r4, #16]
 80108cc:	440a      	add	r2, r1
 80108ce:	7561      	strb	r1, [r4, #21]
 80108d0:	440b      	add	r3, r1
 80108d2:	60a2      	str	r2, [r4, #8]
 80108d4:	6123      	str	r3, [r4, #16]
 80108d6:	7da0      	ldrb	r0, [r4, #22]
 80108d8:	f080 0001 	eor.w	r0, r0, #1
 80108dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	602b      	str	r3, [r5, #0]
 80108e4:	e7ef      	b.n	80108c6 <ucdr_deserialize_uint32_t+0xb6>
 80108e6:	68a2      	ldr	r2, [r4, #8]
 80108e8:	6923      	ldr	r3, [r4, #16]
 80108ea:	1bd2      	subs	r2, r2, r7
 80108ec:	7da0      	ldrb	r0, [r4, #22]
 80108ee:	1bdb      	subs	r3, r3, r7
 80108f0:	f884 8015 	strb.w	r8, [r4, #21]
 80108f4:	f080 0001 	eor.w	r0, r0, #1
 80108f8:	60a2      	str	r2, [r4, #8]
 80108fa:	6123      	str	r3, [r4, #16]
 80108fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010900:	68a3      	ldr	r3, [r4, #8]
 8010902:	789b      	ldrb	r3, [r3, #2]
 8010904:	706b      	strb	r3, [r5, #1]
 8010906:	1cab      	adds	r3, r5, #2
 8010908:	68a2      	ldr	r2, [r4, #8]
 801090a:	7852      	ldrb	r2, [r2, #1]
 801090c:	f803 2b01 	strb.w	r2, [r3], #1
 8010910:	68a2      	ldr	r2, [r4, #8]
 8010912:	7812      	ldrb	r2, [r2, #0]
 8010914:	701a      	strb	r2, [r3, #0]
 8010916:	e7b4      	b.n	8010882 <ucdr_deserialize_uint32_t+0x72>
 8010918:	4631      	mov	r1, r6
 801091a:	463a      	mov	r2, r7
 801091c:	4628      	mov	r0, r5
 801091e:	f00d fa2a 	bl	801dd76 <memcpy>
 8010922:	464a      	mov	r2, r9
 8010924:	19e8      	adds	r0, r5, r7
 8010926:	68a1      	ldr	r1, [r4, #8]
 8010928:	f00d fa25 	bl	801dd76 <memcpy>
 801092c:	e7a9      	b.n	8010882 <ucdr_deserialize_uint32_t+0x72>
 801092e:	bf00      	nop

08010930 <ucdr_deserialize_endian_uint32_t>:
 8010930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010934:	4604      	mov	r4, r0
 8010936:	460e      	mov	r6, r1
 8010938:	2104      	movs	r1, #4
 801093a:	4615      	mov	r5, r2
 801093c:	f001 f8be 	bl	8011abc <ucdr_buffer_alignment>
 8010940:	4601      	mov	r1, r0
 8010942:	4620      	mov	r0, r4
 8010944:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010948:	f001 f900 	bl	8011b4c <ucdr_advance_buffer>
 801094c:	2104      	movs	r1, #4
 801094e:	4620      	mov	r0, r4
 8010950:	f001 f854 	bl	80119fc <ucdr_check_buffer_available_for>
 8010954:	2800      	cmp	r0, #0
 8010956:	d13c      	bne.n	80109d2 <ucdr_deserialize_endian_uint32_t+0xa2>
 8010958:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 801095c:	42bb      	cmp	r3, r7
 801095e:	d933      	bls.n	80109c8 <ucdr_deserialize_endian_uint32_t+0x98>
 8010960:	eba3 0907 	sub.w	r9, r3, r7
 8010964:	60a3      	str	r3, [r4, #8]
 8010966:	6923      	ldr	r3, [r4, #16]
 8010968:	4620      	mov	r0, r4
 801096a:	f1c9 0a04 	rsb	sl, r9, #4
 801096e:	444b      	add	r3, r9
 8010970:	4651      	mov	r1, sl
 8010972:	6123      	str	r3, [r4, #16]
 8010974:	f001 f84e 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8010978:	2800      	cmp	r0, #0
 801097a:	d048      	beq.n	8010a0e <ucdr_deserialize_endian_uint32_t+0xde>
 801097c:	2e01      	cmp	r6, #1
 801097e:	d061      	beq.n	8010a44 <ucdr_deserialize_endian_uint32_t+0x114>
 8010980:	78fb      	ldrb	r3, [r7, #3]
 8010982:	702b      	strb	r3, [r5, #0]
 8010984:	f1b9 0f00 	cmp.w	r9, #0
 8010988:	d050      	beq.n	8010a2c <ucdr_deserialize_endian_uint32_t+0xfc>
 801098a:	78bb      	ldrb	r3, [r7, #2]
 801098c:	f1b9 0f01 	cmp.w	r9, #1
 8010990:	706b      	strb	r3, [r5, #1]
 8010992:	f105 0302 	add.w	r3, r5, #2
 8010996:	d04d      	beq.n	8010a34 <ucdr_deserialize_endian_uint32_t+0x104>
 8010998:	787b      	ldrb	r3, [r7, #1]
 801099a:	f1b9 0f02 	cmp.w	r9, #2
 801099e:	70ab      	strb	r3, [r5, #2]
 80109a0:	f105 0303 	add.w	r3, r5, #3
 80109a4:	d04a      	beq.n	8010a3c <ucdr_deserialize_endian_uint32_t+0x10c>
 80109a6:	783b      	ldrb	r3, [r7, #0]
 80109a8:	70eb      	strb	r3, [r5, #3]
 80109aa:	6923      	ldr	r3, [r4, #16]
 80109ac:	2104      	movs	r1, #4
 80109ae:	68a2      	ldr	r2, [r4, #8]
 80109b0:	3304      	adds	r3, #4
 80109b2:	7da0      	ldrb	r0, [r4, #22]
 80109b4:	4452      	add	r2, sl
 80109b6:	7561      	strb	r1, [r4, #21]
 80109b8:	eba3 0309 	sub.w	r3, r3, r9
 80109bc:	f080 0001 	eor.w	r0, r0, #1
 80109c0:	60a2      	str	r2, [r4, #8]
 80109c2:	6123      	str	r3, [r4, #16]
 80109c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109c8:	2104      	movs	r1, #4
 80109ca:	4620      	mov	r0, r4
 80109cc:	f001 f822 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 80109d0:	b1a8      	cbz	r0, 80109fe <ucdr_deserialize_endian_uint32_t+0xce>
 80109d2:	2e01      	cmp	r6, #1
 80109d4:	68a3      	ldr	r3, [r4, #8]
 80109d6:	d017      	beq.n	8010a08 <ucdr_deserialize_endian_uint32_t+0xd8>
 80109d8:	78db      	ldrb	r3, [r3, #3]
 80109da:	702b      	strb	r3, [r5, #0]
 80109dc:	68a3      	ldr	r3, [r4, #8]
 80109de:	789b      	ldrb	r3, [r3, #2]
 80109e0:	706b      	strb	r3, [r5, #1]
 80109e2:	68a3      	ldr	r3, [r4, #8]
 80109e4:	785b      	ldrb	r3, [r3, #1]
 80109e6:	70ab      	strb	r3, [r5, #2]
 80109e8:	68a3      	ldr	r3, [r4, #8]
 80109ea:	781b      	ldrb	r3, [r3, #0]
 80109ec:	70eb      	strb	r3, [r5, #3]
 80109ee:	2104      	movs	r1, #4
 80109f0:	68a2      	ldr	r2, [r4, #8]
 80109f2:	6923      	ldr	r3, [r4, #16]
 80109f4:	440a      	add	r2, r1
 80109f6:	7561      	strb	r1, [r4, #21]
 80109f8:	440b      	add	r3, r1
 80109fa:	60a2      	str	r2, [r4, #8]
 80109fc:	6123      	str	r3, [r4, #16]
 80109fe:	7da0      	ldrb	r0, [r4, #22]
 8010a00:	f080 0001 	eor.w	r0, r0, #1
 8010a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	602b      	str	r3, [r5, #0]
 8010a0c:	e7ef      	b.n	80109ee <ucdr_deserialize_endian_uint32_t+0xbe>
 8010a0e:	68a2      	ldr	r2, [r4, #8]
 8010a10:	6923      	ldr	r3, [r4, #16]
 8010a12:	eba2 0209 	sub.w	r2, r2, r9
 8010a16:	7da0      	ldrb	r0, [r4, #22]
 8010a18:	eba3 0309 	sub.w	r3, r3, r9
 8010a1c:	f884 8015 	strb.w	r8, [r4, #21]
 8010a20:	f080 0001 	eor.w	r0, r0, #1
 8010a24:	60a2      	str	r2, [r4, #8]
 8010a26:	6123      	str	r3, [r4, #16]
 8010a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a2c:	68a3      	ldr	r3, [r4, #8]
 8010a2e:	789b      	ldrb	r3, [r3, #2]
 8010a30:	706b      	strb	r3, [r5, #1]
 8010a32:	1cab      	adds	r3, r5, #2
 8010a34:	68a2      	ldr	r2, [r4, #8]
 8010a36:	7852      	ldrb	r2, [r2, #1]
 8010a38:	f803 2b01 	strb.w	r2, [r3], #1
 8010a3c:	68a2      	ldr	r2, [r4, #8]
 8010a3e:	7812      	ldrb	r2, [r2, #0]
 8010a40:	701a      	strb	r2, [r3, #0]
 8010a42:	e7b2      	b.n	80109aa <ucdr_deserialize_endian_uint32_t+0x7a>
 8010a44:	4639      	mov	r1, r7
 8010a46:	464a      	mov	r2, r9
 8010a48:	4628      	mov	r0, r5
 8010a4a:	f00d f994 	bl	801dd76 <memcpy>
 8010a4e:	4652      	mov	r2, sl
 8010a50:	eb05 0009 	add.w	r0, r5, r9
 8010a54:	68a1      	ldr	r1, [r4, #8]
 8010a56:	f00d f98e 	bl	801dd76 <memcpy>
 8010a5a:	e7a6      	b.n	80109aa <ucdr_deserialize_endian_uint32_t+0x7a>

08010a5c <ucdr_serialize_uint64_t>:
 8010a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a60:	4604      	mov	r4, r0
 8010a62:	b082      	sub	sp, #8
 8010a64:	2108      	movs	r1, #8
 8010a66:	e9cd 2300 	strd	r2, r3, [sp]
 8010a6a:	f001 f827 	bl	8011abc <ucdr_buffer_alignment>
 8010a6e:	4601      	mov	r1, r0
 8010a70:	4620      	mov	r0, r4
 8010a72:	7d67      	ldrb	r7, [r4, #21]
 8010a74:	f001 f86a 	bl	8011b4c <ucdr_advance_buffer>
 8010a78:	2108      	movs	r1, #8
 8010a7a:	4620      	mov	r0, r4
 8010a7c:	f000 ffbe 	bl	80119fc <ucdr_check_buffer_available_for>
 8010a80:	2800      	cmp	r0, #0
 8010a82:	d14e      	bne.n	8010b22 <ucdr_serialize_uint64_t+0xc6>
 8010a84:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010a88:	42ab      	cmp	r3, r5
 8010a8a:	d945      	bls.n	8010b18 <ucdr_serialize_uint64_t+0xbc>
 8010a8c:	1b5e      	subs	r6, r3, r5
 8010a8e:	60a3      	str	r3, [r4, #8]
 8010a90:	6923      	ldr	r3, [r4, #16]
 8010a92:	4620      	mov	r0, r4
 8010a94:	f1c6 0808 	rsb	r8, r6, #8
 8010a98:	4433      	add	r3, r6
 8010a9a:	4641      	mov	r1, r8
 8010a9c:	6123      	str	r3, [r4, #16]
 8010a9e:	f000 ffb9 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8010aa2:	2800      	cmp	r0, #0
 8010aa4:	d074      	beq.n	8010b90 <ucdr_serialize_uint64_t+0x134>
 8010aa6:	7d23      	ldrb	r3, [r4, #20]
 8010aa8:	2b01      	cmp	r3, #1
 8010aaa:	f000 809b 	beq.w	8010be4 <ucdr_serialize_uint64_t+0x188>
 8010aae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010ab2:	702b      	strb	r3, [r5, #0]
 8010ab4:	2e00      	cmp	r6, #0
 8010ab6:	d078      	beq.n	8010baa <ucdr_serialize_uint64_t+0x14e>
 8010ab8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010abc:	2e01      	cmp	r6, #1
 8010abe:	706b      	strb	r3, [r5, #1]
 8010ac0:	d077      	beq.n	8010bb2 <ucdr_serialize_uint64_t+0x156>
 8010ac2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010ac6:	2e02      	cmp	r6, #2
 8010ac8:	70ab      	strb	r3, [r5, #2]
 8010aca:	d076      	beq.n	8010bba <ucdr_serialize_uint64_t+0x15e>
 8010acc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010ad0:	2e03      	cmp	r6, #3
 8010ad2:	70eb      	strb	r3, [r5, #3]
 8010ad4:	d075      	beq.n	8010bc2 <ucdr_serialize_uint64_t+0x166>
 8010ad6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8010ada:	2e04      	cmp	r6, #4
 8010adc:	712b      	strb	r3, [r5, #4]
 8010ade:	d074      	beq.n	8010bca <ucdr_serialize_uint64_t+0x16e>
 8010ae0:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8010ae4:	2e05      	cmp	r6, #5
 8010ae6:	716b      	strb	r3, [r5, #5]
 8010ae8:	d073      	beq.n	8010bd2 <ucdr_serialize_uint64_t+0x176>
 8010aea:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8010aee:	2e06      	cmp	r6, #6
 8010af0:	71ab      	strb	r3, [r5, #6]
 8010af2:	d072      	beq.n	8010bda <ucdr_serialize_uint64_t+0x17e>
 8010af4:	f89d 3000 	ldrb.w	r3, [sp]
 8010af8:	71eb      	strb	r3, [r5, #7]
 8010afa:	6923      	ldr	r3, [r4, #16]
 8010afc:	2108      	movs	r1, #8
 8010afe:	68a2      	ldr	r2, [r4, #8]
 8010b00:	3308      	adds	r3, #8
 8010b02:	7da0      	ldrb	r0, [r4, #22]
 8010b04:	4442      	add	r2, r8
 8010b06:	7561      	strb	r1, [r4, #21]
 8010b08:	1b9e      	subs	r6, r3, r6
 8010b0a:	f080 0001 	eor.w	r0, r0, #1
 8010b0e:	60a2      	str	r2, [r4, #8]
 8010b10:	6126      	str	r6, [r4, #16]
 8010b12:	b002      	add	sp, #8
 8010b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b18:	2108      	movs	r1, #8
 8010b1a:	4620      	mov	r0, r4
 8010b1c:	f000 ff7a 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8010b20:	b350      	cbz	r0, 8010b78 <ucdr_serialize_uint64_t+0x11c>
 8010b22:	7d23      	ldrb	r3, [r4, #20]
 8010b24:	2b01      	cmp	r3, #1
 8010b26:	d02d      	beq.n	8010b84 <ucdr_serialize_uint64_t+0x128>
 8010b28:	68a3      	ldr	r3, [r4, #8]
 8010b2a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8010b2e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010b32:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010b36:	7018      	strb	r0, [r3, #0]
 8010b38:	68a3      	ldr	r3, [r4, #8]
 8010b3a:	705a      	strb	r2, [r3, #1]
 8010b3c:	68a3      	ldr	r3, [r4, #8]
 8010b3e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010b42:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8010b46:	7099      	strb	r1, [r3, #2]
 8010b48:	68a3      	ldr	r3, [r4, #8]
 8010b4a:	70da      	strb	r2, [r3, #3]
 8010b4c:	68a3      	ldr	r3, [r4, #8]
 8010b4e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010b52:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8010b56:	7118      	strb	r0, [r3, #4]
 8010b58:	68a3      	ldr	r3, [r4, #8]
 8010b5a:	715a      	strb	r2, [r3, #5]
 8010b5c:	68a3      	ldr	r3, [r4, #8]
 8010b5e:	f89d 2000 	ldrb.w	r2, [sp]
 8010b62:	7199      	strb	r1, [r3, #6]
 8010b64:	68a3      	ldr	r3, [r4, #8]
 8010b66:	71da      	strb	r2, [r3, #7]
 8010b68:	2108      	movs	r1, #8
 8010b6a:	68a2      	ldr	r2, [r4, #8]
 8010b6c:	6923      	ldr	r3, [r4, #16]
 8010b6e:	440a      	add	r2, r1
 8010b70:	7561      	strb	r1, [r4, #21]
 8010b72:	440b      	add	r3, r1
 8010b74:	60a2      	str	r2, [r4, #8]
 8010b76:	6123      	str	r3, [r4, #16]
 8010b78:	7da0      	ldrb	r0, [r4, #22]
 8010b7a:	f080 0001 	eor.w	r0, r0, #1
 8010b7e:	b002      	add	sp, #8
 8010b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b84:	466b      	mov	r3, sp
 8010b86:	68a2      	ldr	r2, [r4, #8]
 8010b88:	cb03      	ldmia	r3!, {r0, r1}
 8010b8a:	6010      	str	r0, [r2, #0]
 8010b8c:	6051      	str	r1, [r2, #4]
 8010b8e:	e7eb      	b.n	8010b68 <ucdr_serialize_uint64_t+0x10c>
 8010b90:	68a2      	ldr	r2, [r4, #8]
 8010b92:	6923      	ldr	r3, [r4, #16]
 8010b94:	7da0      	ldrb	r0, [r4, #22]
 8010b96:	1b92      	subs	r2, r2, r6
 8010b98:	1b9b      	subs	r3, r3, r6
 8010b9a:	7567      	strb	r7, [r4, #21]
 8010b9c:	f080 0001 	eor.w	r0, r0, #1
 8010ba0:	60a2      	str	r2, [r4, #8]
 8010ba2:	6123      	str	r3, [r4, #16]
 8010ba4:	b002      	add	sp, #8
 8010ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010baa:	68a3      	ldr	r3, [r4, #8]
 8010bac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010bb0:	701a      	strb	r2, [r3, #0]
 8010bb2:	68a3      	ldr	r3, [r4, #8]
 8010bb4:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010bb8:	701a      	strb	r2, [r3, #0]
 8010bba:	68a3      	ldr	r3, [r4, #8]
 8010bbc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010bc0:	701a      	strb	r2, [r3, #0]
 8010bc2:	68a3      	ldr	r3, [r4, #8]
 8010bc4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010bc8:	701a      	strb	r2, [r3, #0]
 8010bca:	68a3      	ldr	r3, [r4, #8]
 8010bcc:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010bd0:	701a      	strb	r2, [r3, #0]
 8010bd2:	68a3      	ldr	r3, [r4, #8]
 8010bd4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010bd8:	701a      	strb	r2, [r3, #0]
 8010bda:	68a3      	ldr	r3, [r4, #8]
 8010bdc:	f89d 2000 	ldrb.w	r2, [sp]
 8010be0:	701a      	strb	r2, [r3, #0]
 8010be2:	e78a      	b.n	8010afa <ucdr_serialize_uint64_t+0x9e>
 8010be4:	4628      	mov	r0, r5
 8010be6:	466d      	mov	r5, sp
 8010be8:	4632      	mov	r2, r6
 8010bea:	4629      	mov	r1, r5
 8010bec:	f00d f8c3 	bl	801dd76 <memcpy>
 8010bf0:	4642      	mov	r2, r8
 8010bf2:	19a9      	adds	r1, r5, r6
 8010bf4:	68a0      	ldr	r0, [r4, #8]
 8010bf6:	f00d f8be 	bl	801dd76 <memcpy>
 8010bfa:	e77e      	b.n	8010afa <ucdr_serialize_uint64_t+0x9e>

08010bfc <ucdr_serialize_int16_t>:
 8010bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c00:	460b      	mov	r3, r1
 8010c02:	b082      	sub	sp, #8
 8010c04:	4604      	mov	r4, r0
 8010c06:	2102      	movs	r1, #2
 8010c08:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010c0c:	f000 ff56 	bl	8011abc <ucdr_buffer_alignment>
 8010c10:	4601      	mov	r1, r0
 8010c12:	4620      	mov	r0, r4
 8010c14:	7d67      	ldrb	r7, [r4, #21]
 8010c16:	f000 ff99 	bl	8011b4c <ucdr_advance_buffer>
 8010c1a:	2102      	movs	r1, #2
 8010c1c:	4620      	mov	r0, r4
 8010c1e:	f000 feed 	bl	80119fc <ucdr_check_buffer_available_for>
 8010c22:	bb78      	cbnz	r0, 8010c84 <ucdr_serialize_int16_t+0x88>
 8010c24:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010c28:	42ab      	cmp	r3, r5
 8010c2a:	d926      	bls.n	8010c7a <ucdr_serialize_int16_t+0x7e>
 8010c2c:	1b5e      	subs	r6, r3, r5
 8010c2e:	60a3      	str	r3, [r4, #8]
 8010c30:	6923      	ldr	r3, [r4, #16]
 8010c32:	4620      	mov	r0, r4
 8010c34:	f1c6 0802 	rsb	r8, r6, #2
 8010c38:	4433      	add	r3, r6
 8010c3a:	4641      	mov	r1, r8
 8010c3c:	6123      	str	r3, [r4, #16]
 8010c3e:	f000 fee9 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8010c42:	2800      	cmp	r0, #0
 8010c44:	d03b      	beq.n	8010cbe <ucdr_serialize_int16_t+0xc2>
 8010c46:	7d23      	ldrb	r3, [r4, #20]
 8010c48:	2b01      	cmp	r3, #1
 8010c4a:	d04a      	beq.n	8010ce2 <ucdr_serialize_int16_t+0xe6>
 8010c4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010c50:	702b      	strb	r3, [r5, #0]
 8010c52:	2e00      	cmp	r6, #0
 8010c54:	d040      	beq.n	8010cd8 <ucdr_serialize_int16_t+0xdc>
 8010c56:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010c5a:	706b      	strb	r3, [r5, #1]
 8010c5c:	6923      	ldr	r3, [r4, #16]
 8010c5e:	2102      	movs	r1, #2
 8010c60:	68a2      	ldr	r2, [r4, #8]
 8010c62:	3302      	adds	r3, #2
 8010c64:	7da0      	ldrb	r0, [r4, #22]
 8010c66:	4442      	add	r2, r8
 8010c68:	7561      	strb	r1, [r4, #21]
 8010c6a:	1b9e      	subs	r6, r3, r6
 8010c6c:	f080 0001 	eor.w	r0, r0, #1
 8010c70:	60a2      	str	r2, [r4, #8]
 8010c72:	6126      	str	r6, [r4, #16]
 8010c74:	b002      	add	sp, #8
 8010c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c7a:	2102      	movs	r1, #2
 8010c7c:	4620      	mov	r0, r4
 8010c7e:	f000 fec9 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8010c82:	b190      	cbz	r0, 8010caa <ucdr_serialize_int16_t+0xae>
 8010c84:	7d23      	ldrb	r3, [r4, #20]
 8010c86:	2b01      	cmp	r3, #1
 8010c88:	68a3      	ldr	r3, [r4, #8]
 8010c8a:	d014      	beq.n	8010cb6 <ucdr_serialize_int16_t+0xba>
 8010c8c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010c90:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010c94:	7019      	strb	r1, [r3, #0]
 8010c96:	68a3      	ldr	r3, [r4, #8]
 8010c98:	705a      	strb	r2, [r3, #1]
 8010c9a:	2102      	movs	r1, #2
 8010c9c:	68a2      	ldr	r2, [r4, #8]
 8010c9e:	6923      	ldr	r3, [r4, #16]
 8010ca0:	440a      	add	r2, r1
 8010ca2:	7561      	strb	r1, [r4, #21]
 8010ca4:	440b      	add	r3, r1
 8010ca6:	60a2      	str	r2, [r4, #8]
 8010ca8:	6123      	str	r3, [r4, #16]
 8010caa:	7da0      	ldrb	r0, [r4, #22]
 8010cac:	f080 0001 	eor.w	r0, r0, #1
 8010cb0:	b002      	add	sp, #8
 8010cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cb6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010cba:	801a      	strh	r2, [r3, #0]
 8010cbc:	e7ed      	b.n	8010c9a <ucdr_serialize_int16_t+0x9e>
 8010cbe:	68a2      	ldr	r2, [r4, #8]
 8010cc0:	6923      	ldr	r3, [r4, #16]
 8010cc2:	7da0      	ldrb	r0, [r4, #22]
 8010cc4:	1b92      	subs	r2, r2, r6
 8010cc6:	1b9b      	subs	r3, r3, r6
 8010cc8:	7567      	strb	r7, [r4, #21]
 8010cca:	f080 0001 	eor.w	r0, r0, #1
 8010cce:	60a2      	str	r2, [r4, #8]
 8010cd0:	6123      	str	r3, [r4, #16]
 8010cd2:	b002      	add	sp, #8
 8010cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cd8:	68a3      	ldr	r3, [r4, #8]
 8010cda:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010cde:	701a      	strb	r2, [r3, #0]
 8010ce0:	e7bc      	b.n	8010c5c <ucdr_serialize_int16_t+0x60>
 8010ce2:	4628      	mov	r0, r5
 8010ce4:	f10d 0506 	add.w	r5, sp, #6
 8010ce8:	4632      	mov	r2, r6
 8010cea:	4629      	mov	r1, r5
 8010cec:	f00d f843 	bl	801dd76 <memcpy>
 8010cf0:	4642      	mov	r2, r8
 8010cf2:	19a9      	adds	r1, r5, r6
 8010cf4:	68a0      	ldr	r0, [r4, #8]
 8010cf6:	f00d f83e 	bl	801dd76 <memcpy>
 8010cfa:	e7af      	b.n	8010c5c <ucdr_serialize_int16_t+0x60>

08010cfc <ucdr_serialize_endian_int16_t>:
 8010cfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d00:	4604      	mov	r4, r0
 8010d02:	b083      	sub	sp, #12
 8010d04:	460d      	mov	r5, r1
 8010d06:	2102      	movs	r1, #2
 8010d08:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010d0c:	f000 fed6 	bl	8011abc <ucdr_buffer_alignment>
 8010d10:	4601      	mov	r1, r0
 8010d12:	4620      	mov	r0, r4
 8010d14:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010d18:	f000 ff18 	bl	8011b4c <ucdr_advance_buffer>
 8010d1c:	2102      	movs	r1, #2
 8010d1e:	4620      	mov	r0, r4
 8010d20:	f000 fe6c 	bl	80119fc <ucdr_check_buffer_available_for>
 8010d24:	bb70      	cbnz	r0, 8010d84 <ucdr_serialize_endian_int16_t+0x88>
 8010d26:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010d2a:	42be      	cmp	r6, r7
 8010d2c:	d925      	bls.n	8010d7a <ucdr_serialize_endian_int16_t+0x7e>
 8010d2e:	6923      	ldr	r3, [r4, #16]
 8010d30:	4620      	mov	r0, r4
 8010d32:	60a6      	str	r6, [r4, #8]
 8010d34:	1bf6      	subs	r6, r6, r7
 8010d36:	4433      	add	r3, r6
 8010d38:	f1c6 0902 	rsb	r9, r6, #2
 8010d3c:	6123      	str	r3, [r4, #16]
 8010d3e:	4649      	mov	r1, r9
 8010d40:	f000 fe68 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8010d44:	2800      	cmp	r0, #0
 8010d46:	d039      	beq.n	8010dbc <ucdr_serialize_endian_int16_t+0xc0>
 8010d48:	2d01      	cmp	r5, #1
 8010d4a:	d04a      	beq.n	8010de2 <ucdr_serialize_endian_int16_t+0xe6>
 8010d4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010d50:	703b      	strb	r3, [r7, #0]
 8010d52:	2e00      	cmp	r6, #0
 8010d54:	d040      	beq.n	8010dd8 <ucdr_serialize_endian_int16_t+0xdc>
 8010d56:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010d5a:	707b      	strb	r3, [r7, #1]
 8010d5c:	6923      	ldr	r3, [r4, #16]
 8010d5e:	2102      	movs	r1, #2
 8010d60:	68a2      	ldr	r2, [r4, #8]
 8010d62:	7da0      	ldrb	r0, [r4, #22]
 8010d64:	3302      	adds	r3, #2
 8010d66:	444a      	add	r2, r9
 8010d68:	7561      	strb	r1, [r4, #21]
 8010d6a:	1b9b      	subs	r3, r3, r6
 8010d6c:	f080 0001 	eor.w	r0, r0, #1
 8010d70:	60a2      	str	r2, [r4, #8]
 8010d72:	6123      	str	r3, [r4, #16]
 8010d74:	b003      	add	sp, #12
 8010d76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d7a:	2102      	movs	r1, #2
 8010d7c:	4620      	mov	r0, r4
 8010d7e:	f000 fe49 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8010d82:	b188      	cbz	r0, 8010da8 <ucdr_serialize_endian_int16_t+0xac>
 8010d84:	2d01      	cmp	r5, #1
 8010d86:	68a3      	ldr	r3, [r4, #8]
 8010d88:	d014      	beq.n	8010db4 <ucdr_serialize_endian_int16_t+0xb8>
 8010d8a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010d8e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010d92:	7019      	strb	r1, [r3, #0]
 8010d94:	68a3      	ldr	r3, [r4, #8]
 8010d96:	705a      	strb	r2, [r3, #1]
 8010d98:	2102      	movs	r1, #2
 8010d9a:	68a2      	ldr	r2, [r4, #8]
 8010d9c:	6923      	ldr	r3, [r4, #16]
 8010d9e:	440a      	add	r2, r1
 8010da0:	7561      	strb	r1, [r4, #21]
 8010da2:	440b      	add	r3, r1
 8010da4:	60a2      	str	r2, [r4, #8]
 8010da6:	6123      	str	r3, [r4, #16]
 8010da8:	7da0      	ldrb	r0, [r4, #22]
 8010daa:	f080 0001 	eor.w	r0, r0, #1
 8010dae:	b003      	add	sp, #12
 8010db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010db4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010db8:	801a      	strh	r2, [r3, #0]
 8010dba:	e7ed      	b.n	8010d98 <ucdr_serialize_endian_int16_t+0x9c>
 8010dbc:	68a2      	ldr	r2, [r4, #8]
 8010dbe:	6923      	ldr	r3, [r4, #16]
 8010dc0:	7da0      	ldrb	r0, [r4, #22]
 8010dc2:	1b92      	subs	r2, r2, r6
 8010dc4:	1b9b      	subs	r3, r3, r6
 8010dc6:	f884 8015 	strb.w	r8, [r4, #21]
 8010dca:	f080 0001 	eor.w	r0, r0, #1
 8010dce:	60a2      	str	r2, [r4, #8]
 8010dd0:	6123      	str	r3, [r4, #16]
 8010dd2:	b003      	add	sp, #12
 8010dd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010dd8:	68a3      	ldr	r3, [r4, #8]
 8010dda:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010dde:	701a      	strb	r2, [r3, #0]
 8010de0:	e7bc      	b.n	8010d5c <ucdr_serialize_endian_int16_t+0x60>
 8010de2:	f10d 0506 	add.w	r5, sp, #6
 8010de6:	4632      	mov	r2, r6
 8010de8:	4638      	mov	r0, r7
 8010dea:	4629      	mov	r1, r5
 8010dec:	f00c ffc3 	bl	801dd76 <memcpy>
 8010df0:	464a      	mov	r2, r9
 8010df2:	19a9      	adds	r1, r5, r6
 8010df4:	68a0      	ldr	r0, [r4, #8]
 8010df6:	f00c ffbe 	bl	801dd76 <memcpy>
 8010dfa:	e7af      	b.n	8010d5c <ucdr_serialize_endian_int16_t+0x60>

08010dfc <ucdr_deserialize_int16_t>:
 8010dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e00:	4604      	mov	r4, r0
 8010e02:	460d      	mov	r5, r1
 8010e04:	2102      	movs	r1, #2
 8010e06:	f000 fe59 	bl	8011abc <ucdr_buffer_alignment>
 8010e0a:	4601      	mov	r1, r0
 8010e0c:	4620      	mov	r0, r4
 8010e0e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010e12:	f000 fe9b 	bl	8011b4c <ucdr_advance_buffer>
 8010e16:	2102      	movs	r1, #2
 8010e18:	4620      	mov	r0, r4
 8010e1a:	f000 fdef 	bl	80119fc <ucdr_check_buffer_available_for>
 8010e1e:	bb60      	cbnz	r0, 8010e7a <ucdr_deserialize_int16_t+0x7e>
 8010e20:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010e24:	42be      	cmp	r6, r7
 8010e26:	d923      	bls.n	8010e70 <ucdr_deserialize_int16_t+0x74>
 8010e28:	6923      	ldr	r3, [r4, #16]
 8010e2a:	4620      	mov	r0, r4
 8010e2c:	60a6      	str	r6, [r4, #8]
 8010e2e:	1bf6      	subs	r6, r6, r7
 8010e30:	4433      	add	r3, r6
 8010e32:	f1c6 0902 	rsb	r9, r6, #2
 8010e36:	6123      	str	r3, [r4, #16]
 8010e38:	4649      	mov	r1, r9
 8010e3a:	f000 fdeb 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8010e3e:	2800      	cmp	r0, #0
 8010e40:	d034      	beq.n	8010eac <ucdr_deserialize_int16_t+0xb0>
 8010e42:	7d23      	ldrb	r3, [r4, #20]
 8010e44:	2b01      	cmp	r3, #1
 8010e46:	d042      	beq.n	8010ece <ucdr_deserialize_int16_t+0xd2>
 8010e48:	787b      	ldrb	r3, [r7, #1]
 8010e4a:	702b      	strb	r3, [r5, #0]
 8010e4c:	2e00      	cmp	r6, #0
 8010e4e:	d03a      	beq.n	8010ec6 <ucdr_deserialize_int16_t+0xca>
 8010e50:	783b      	ldrb	r3, [r7, #0]
 8010e52:	706b      	strb	r3, [r5, #1]
 8010e54:	6923      	ldr	r3, [r4, #16]
 8010e56:	2102      	movs	r1, #2
 8010e58:	68a2      	ldr	r2, [r4, #8]
 8010e5a:	3302      	adds	r3, #2
 8010e5c:	7da0      	ldrb	r0, [r4, #22]
 8010e5e:	444a      	add	r2, r9
 8010e60:	7561      	strb	r1, [r4, #21]
 8010e62:	1b9b      	subs	r3, r3, r6
 8010e64:	f080 0001 	eor.w	r0, r0, #1
 8010e68:	60a2      	str	r2, [r4, #8]
 8010e6a:	6123      	str	r3, [r4, #16]
 8010e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e70:	2102      	movs	r1, #2
 8010e72:	4620      	mov	r0, r4
 8010e74:	f000 fdce 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8010e78:	b180      	cbz	r0, 8010e9c <ucdr_deserialize_int16_t+0xa0>
 8010e7a:	7d23      	ldrb	r3, [r4, #20]
 8010e7c:	2b01      	cmp	r3, #1
 8010e7e:	68a3      	ldr	r3, [r4, #8]
 8010e80:	d011      	beq.n	8010ea6 <ucdr_deserialize_int16_t+0xaa>
 8010e82:	785b      	ldrb	r3, [r3, #1]
 8010e84:	702b      	strb	r3, [r5, #0]
 8010e86:	68a3      	ldr	r3, [r4, #8]
 8010e88:	781b      	ldrb	r3, [r3, #0]
 8010e8a:	706b      	strb	r3, [r5, #1]
 8010e8c:	2102      	movs	r1, #2
 8010e8e:	68a2      	ldr	r2, [r4, #8]
 8010e90:	6923      	ldr	r3, [r4, #16]
 8010e92:	440a      	add	r2, r1
 8010e94:	7561      	strb	r1, [r4, #21]
 8010e96:	440b      	add	r3, r1
 8010e98:	60a2      	str	r2, [r4, #8]
 8010e9a:	6123      	str	r3, [r4, #16]
 8010e9c:	7da0      	ldrb	r0, [r4, #22]
 8010e9e:	f080 0001 	eor.w	r0, r0, #1
 8010ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ea6:	881b      	ldrh	r3, [r3, #0]
 8010ea8:	802b      	strh	r3, [r5, #0]
 8010eaa:	e7ef      	b.n	8010e8c <ucdr_deserialize_int16_t+0x90>
 8010eac:	68a2      	ldr	r2, [r4, #8]
 8010eae:	6923      	ldr	r3, [r4, #16]
 8010eb0:	1b92      	subs	r2, r2, r6
 8010eb2:	7da0      	ldrb	r0, [r4, #22]
 8010eb4:	1b9b      	subs	r3, r3, r6
 8010eb6:	f884 8015 	strb.w	r8, [r4, #21]
 8010eba:	f080 0001 	eor.w	r0, r0, #1
 8010ebe:	60a2      	str	r2, [r4, #8]
 8010ec0:	6123      	str	r3, [r4, #16]
 8010ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ec6:	68a3      	ldr	r3, [r4, #8]
 8010ec8:	781b      	ldrb	r3, [r3, #0]
 8010eca:	706b      	strb	r3, [r5, #1]
 8010ecc:	e7c2      	b.n	8010e54 <ucdr_deserialize_int16_t+0x58>
 8010ece:	4639      	mov	r1, r7
 8010ed0:	4632      	mov	r2, r6
 8010ed2:	4628      	mov	r0, r5
 8010ed4:	f00c ff4f 	bl	801dd76 <memcpy>
 8010ed8:	464a      	mov	r2, r9
 8010eda:	19a8      	adds	r0, r5, r6
 8010edc:	68a1      	ldr	r1, [r4, #8]
 8010ede:	f00c ff4a 	bl	801dd76 <memcpy>
 8010ee2:	e7b7      	b.n	8010e54 <ucdr_deserialize_int16_t+0x58>

08010ee4 <ucdr_deserialize_endian_int16_t>:
 8010ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ee8:	4604      	mov	r4, r0
 8010eea:	460e      	mov	r6, r1
 8010eec:	2102      	movs	r1, #2
 8010eee:	4615      	mov	r5, r2
 8010ef0:	f000 fde4 	bl	8011abc <ucdr_buffer_alignment>
 8010ef4:	4601      	mov	r1, r0
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010efc:	f000 fe26 	bl	8011b4c <ucdr_advance_buffer>
 8010f00:	2102      	movs	r1, #2
 8010f02:	4620      	mov	r0, r4
 8010f04:	f000 fd7a 	bl	80119fc <ucdr_check_buffer_available_for>
 8010f08:	bb70      	cbnz	r0, 8010f68 <ucdr_deserialize_endian_int16_t+0x84>
 8010f0a:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 8010f0e:	454f      	cmp	r7, r9
 8010f10:	d925      	bls.n	8010f5e <ucdr_deserialize_endian_int16_t+0x7a>
 8010f12:	6923      	ldr	r3, [r4, #16]
 8010f14:	4620      	mov	r0, r4
 8010f16:	60a7      	str	r7, [r4, #8]
 8010f18:	eba7 0709 	sub.w	r7, r7, r9
 8010f1c:	443b      	add	r3, r7
 8010f1e:	f1c7 0a02 	rsb	sl, r7, #2
 8010f22:	6123      	str	r3, [r4, #16]
 8010f24:	4651      	mov	r1, sl
 8010f26:	f000 fd75 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8010f2a:	2800      	cmp	r0, #0
 8010f2c:	d034      	beq.n	8010f98 <ucdr_deserialize_endian_int16_t+0xb4>
 8010f2e:	2e01      	cmp	r6, #1
 8010f30:	d043      	beq.n	8010fba <ucdr_deserialize_endian_int16_t+0xd6>
 8010f32:	f899 3001 	ldrb.w	r3, [r9, #1]
 8010f36:	702b      	strb	r3, [r5, #0]
 8010f38:	2f00      	cmp	r7, #0
 8010f3a:	d03a      	beq.n	8010fb2 <ucdr_deserialize_endian_int16_t+0xce>
 8010f3c:	f899 3000 	ldrb.w	r3, [r9]
 8010f40:	706b      	strb	r3, [r5, #1]
 8010f42:	6923      	ldr	r3, [r4, #16]
 8010f44:	2102      	movs	r1, #2
 8010f46:	68a2      	ldr	r2, [r4, #8]
 8010f48:	3302      	adds	r3, #2
 8010f4a:	7da0      	ldrb	r0, [r4, #22]
 8010f4c:	4452      	add	r2, sl
 8010f4e:	7561      	strb	r1, [r4, #21]
 8010f50:	1bdb      	subs	r3, r3, r7
 8010f52:	f080 0001 	eor.w	r0, r0, #1
 8010f56:	60a2      	str	r2, [r4, #8]
 8010f58:	6123      	str	r3, [r4, #16]
 8010f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f5e:	2102      	movs	r1, #2
 8010f60:	4620      	mov	r0, r4
 8010f62:	f000 fd57 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8010f66:	b178      	cbz	r0, 8010f88 <ucdr_deserialize_endian_int16_t+0xa4>
 8010f68:	2e01      	cmp	r6, #1
 8010f6a:	68a3      	ldr	r3, [r4, #8]
 8010f6c:	d011      	beq.n	8010f92 <ucdr_deserialize_endian_int16_t+0xae>
 8010f6e:	785b      	ldrb	r3, [r3, #1]
 8010f70:	702b      	strb	r3, [r5, #0]
 8010f72:	68a3      	ldr	r3, [r4, #8]
 8010f74:	781b      	ldrb	r3, [r3, #0]
 8010f76:	706b      	strb	r3, [r5, #1]
 8010f78:	2102      	movs	r1, #2
 8010f7a:	68a2      	ldr	r2, [r4, #8]
 8010f7c:	6923      	ldr	r3, [r4, #16]
 8010f7e:	440a      	add	r2, r1
 8010f80:	7561      	strb	r1, [r4, #21]
 8010f82:	440b      	add	r3, r1
 8010f84:	60a2      	str	r2, [r4, #8]
 8010f86:	6123      	str	r3, [r4, #16]
 8010f88:	7da0      	ldrb	r0, [r4, #22]
 8010f8a:	f080 0001 	eor.w	r0, r0, #1
 8010f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f92:	881b      	ldrh	r3, [r3, #0]
 8010f94:	802b      	strh	r3, [r5, #0]
 8010f96:	e7ef      	b.n	8010f78 <ucdr_deserialize_endian_int16_t+0x94>
 8010f98:	68a2      	ldr	r2, [r4, #8]
 8010f9a:	6923      	ldr	r3, [r4, #16]
 8010f9c:	1bd2      	subs	r2, r2, r7
 8010f9e:	7da0      	ldrb	r0, [r4, #22]
 8010fa0:	1bdb      	subs	r3, r3, r7
 8010fa2:	f884 8015 	strb.w	r8, [r4, #21]
 8010fa6:	f080 0001 	eor.w	r0, r0, #1
 8010faa:	60a2      	str	r2, [r4, #8]
 8010fac:	6123      	str	r3, [r4, #16]
 8010fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fb2:	68a3      	ldr	r3, [r4, #8]
 8010fb4:	781b      	ldrb	r3, [r3, #0]
 8010fb6:	706b      	strb	r3, [r5, #1]
 8010fb8:	e7c3      	b.n	8010f42 <ucdr_deserialize_endian_int16_t+0x5e>
 8010fba:	4649      	mov	r1, r9
 8010fbc:	463a      	mov	r2, r7
 8010fbe:	4628      	mov	r0, r5
 8010fc0:	f00c fed9 	bl	801dd76 <memcpy>
 8010fc4:	4652      	mov	r2, sl
 8010fc6:	19e8      	adds	r0, r5, r7
 8010fc8:	68a1      	ldr	r1, [r4, #8]
 8010fca:	f00c fed4 	bl	801dd76 <memcpy>
 8010fce:	e7b8      	b.n	8010f42 <ucdr_deserialize_endian_int16_t+0x5e>

08010fd0 <ucdr_serialize_int32_t>:
 8010fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fd4:	b082      	sub	sp, #8
 8010fd6:	4604      	mov	r4, r0
 8010fd8:	9101      	str	r1, [sp, #4]
 8010fda:	2104      	movs	r1, #4
 8010fdc:	f000 fd6e 	bl	8011abc <ucdr_buffer_alignment>
 8010fe0:	4601      	mov	r1, r0
 8010fe2:	4620      	mov	r0, r4
 8010fe4:	7d67      	ldrb	r7, [r4, #21]
 8010fe6:	f000 fdb1 	bl	8011b4c <ucdr_advance_buffer>
 8010fea:	2104      	movs	r1, #4
 8010fec:	4620      	mov	r0, r4
 8010fee:	f000 fd05 	bl	80119fc <ucdr_check_buffer_available_for>
 8010ff2:	2800      	cmp	r0, #0
 8010ff4:	d139      	bne.n	801106a <ucdr_serialize_int32_t+0x9a>
 8010ff6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010ffa:	42ab      	cmp	r3, r5
 8010ffc:	d930      	bls.n	8011060 <ucdr_serialize_int32_t+0x90>
 8010ffe:	1b5e      	subs	r6, r3, r5
 8011000:	60a3      	str	r3, [r4, #8]
 8011002:	6923      	ldr	r3, [r4, #16]
 8011004:	4620      	mov	r0, r4
 8011006:	f1c6 0804 	rsb	r8, r6, #4
 801100a:	4433      	add	r3, r6
 801100c:	4641      	mov	r1, r8
 801100e:	6123      	str	r3, [r4, #16]
 8011010:	f000 fd00 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8011014:	2800      	cmp	r0, #0
 8011016:	d04c      	beq.n	80110b2 <ucdr_serialize_int32_t+0xe2>
 8011018:	7d23      	ldrb	r3, [r4, #20]
 801101a:	2b01      	cmp	r3, #1
 801101c:	d063      	beq.n	80110e6 <ucdr_serialize_int32_t+0x116>
 801101e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011022:	702b      	strb	r3, [r5, #0]
 8011024:	2e00      	cmp	r6, #0
 8011026:	d051      	beq.n	80110cc <ucdr_serialize_int32_t+0xfc>
 8011028:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801102c:	2e01      	cmp	r6, #1
 801102e:	706b      	strb	r3, [r5, #1]
 8011030:	d050      	beq.n	80110d4 <ucdr_serialize_int32_t+0x104>
 8011032:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011036:	2e02      	cmp	r6, #2
 8011038:	70ab      	strb	r3, [r5, #2]
 801103a:	d04f      	beq.n	80110dc <ucdr_serialize_int32_t+0x10c>
 801103c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011040:	70eb      	strb	r3, [r5, #3]
 8011042:	6923      	ldr	r3, [r4, #16]
 8011044:	2104      	movs	r1, #4
 8011046:	68a2      	ldr	r2, [r4, #8]
 8011048:	3304      	adds	r3, #4
 801104a:	7da0      	ldrb	r0, [r4, #22]
 801104c:	4442      	add	r2, r8
 801104e:	7561      	strb	r1, [r4, #21]
 8011050:	1b9e      	subs	r6, r3, r6
 8011052:	f080 0001 	eor.w	r0, r0, #1
 8011056:	60a2      	str	r2, [r4, #8]
 8011058:	6126      	str	r6, [r4, #16]
 801105a:	b002      	add	sp, #8
 801105c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011060:	2104      	movs	r1, #4
 8011062:	4620      	mov	r0, r4
 8011064:	f000 fcd6 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8011068:	b1d0      	cbz	r0, 80110a0 <ucdr_serialize_int32_t+0xd0>
 801106a:	7d23      	ldrb	r3, [r4, #20]
 801106c:	2b01      	cmp	r3, #1
 801106e:	68a3      	ldr	r3, [r4, #8]
 8011070:	d01c      	beq.n	80110ac <ucdr_serialize_int32_t+0xdc>
 8011072:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011076:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801107a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801107e:	7018      	strb	r0, [r3, #0]
 8011080:	68a3      	ldr	r3, [r4, #8]
 8011082:	705a      	strb	r2, [r3, #1]
 8011084:	68a3      	ldr	r3, [r4, #8]
 8011086:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801108a:	7099      	strb	r1, [r3, #2]
 801108c:	68a3      	ldr	r3, [r4, #8]
 801108e:	70da      	strb	r2, [r3, #3]
 8011090:	2104      	movs	r1, #4
 8011092:	68a2      	ldr	r2, [r4, #8]
 8011094:	6923      	ldr	r3, [r4, #16]
 8011096:	440a      	add	r2, r1
 8011098:	7561      	strb	r1, [r4, #21]
 801109a:	440b      	add	r3, r1
 801109c:	60a2      	str	r2, [r4, #8]
 801109e:	6123      	str	r3, [r4, #16]
 80110a0:	7da0      	ldrb	r0, [r4, #22]
 80110a2:	f080 0001 	eor.w	r0, r0, #1
 80110a6:	b002      	add	sp, #8
 80110a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110ac:	9a01      	ldr	r2, [sp, #4]
 80110ae:	601a      	str	r2, [r3, #0]
 80110b0:	e7ee      	b.n	8011090 <ucdr_serialize_int32_t+0xc0>
 80110b2:	68a2      	ldr	r2, [r4, #8]
 80110b4:	6923      	ldr	r3, [r4, #16]
 80110b6:	7da0      	ldrb	r0, [r4, #22]
 80110b8:	1b92      	subs	r2, r2, r6
 80110ba:	1b9b      	subs	r3, r3, r6
 80110bc:	7567      	strb	r7, [r4, #21]
 80110be:	f080 0001 	eor.w	r0, r0, #1
 80110c2:	60a2      	str	r2, [r4, #8]
 80110c4:	6123      	str	r3, [r4, #16]
 80110c6:	b002      	add	sp, #8
 80110c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110cc:	68a3      	ldr	r3, [r4, #8]
 80110ce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80110d2:	701a      	strb	r2, [r3, #0]
 80110d4:	68a3      	ldr	r3, [r4, #8]
 80110d6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80110da:	701a      	strb	r2, [r3, #0]
 80110dc:	68a3      	ldr	r3, [r4, #8]
 80110de:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80110e2:	701a      	strb	r2, [r3, #0]
 80110e4:	e7ad      	b.n	8011042 <ucdr_serialize_int32_t+0x72>
 80110e6:	4628      	mov	r0, r5
 80110e8:	ad01      	add	r5, sp, #4
 80110ea:	4632      	mov	r2, r6
 80110ec:	4629      	mov	r1, r5
 80110ee:	f00c fe42 	bl	801dd76 <memcpy>
 80110f2:	4642      	mov	r2, r8
 80110f4:	19a9      	adds	r1, r5, r6
 80110f6:	68a0      	ldr	r0, [r4, #8]
 80110f8:	f00c fe3d 	bl	801dd76 <memcpy>
 80110fc:	e7a1      	b.n	8011042 <ucdr_serialize_int32_t+0x72>
 80110fe:	bf00      	nop

08011100 <ucdr_deserialize_int32_t>:
 8011100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011104:	4604      	mov	r4, r0
 8011106:	460d      	mov	r5, r1
 8011108:	2104      	movs	r1, #4
 801110a:	f000 fcd7 	bl	8011abc <ucdr_buffer_alignment>
 801110e:	4601      	mov	r1, r0
 8011110:	4620      	mov	r0, r4
 8011112:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011116:	f000 fd19 	bl	8011b4c <ucdr_advance_buffer>
 801111a:	2104      	movs	r1, #4
 801111c:	4620      	mov	r0, r4
 801111e:	f000 fc6d 	bl	80119fc <ucdr_check_buffer_available_for>
 8011122:	2800      	cmp	r0, #0
 8011124:	d138      	bne.n	8011198 <ucdr_deserialize_int32_t+0x98>
 8011126:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801112a:	42b7      	cmp	r7, r6
 801112c:	d92f      	bls.n	801118e <ucdr_deserialize_int32_t+0x8e>
 801112e:	6923      	ldr	r3, [r4, #16]
 8011130:	4620      	mov	r0, r4
 8011132:	60a7      	str	r7, [r4, #8]
 8011134:	1bbf      	subs	r7, r7, r6
 8011136:	443b      	add	r3, r7
 8011138:	f1c7 0904 	rsb	r9, r7, #4
 801113c:	6123      	str	r3, [r4, #16]
 801113e:	4649      	mov	r1, r9
 8011140:	f000 fc68 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8011144:	2800      	cmp	r0, #0
 8011146:	d046      	beq.n	80111d6 <ucdr_deserialize_int32_t+0xd6>
 8011148:	7d23      	ldrb	r3, [r4, #20]
 801114a:	2b01      	cmp	r3, #1
 801114c:	d05c      	beq.n	8011208 <ucdr_deserialize_int32_t+0x108>
 801114e:	78f3      	ldrb	r3, [r6, #3]
 8011150:	702b      	strb	r3, [r5, #0]
 8011152:	2f00      	cmp	r7, #0
 8011154:	d04c      	beq.n	80111f0 <ucdr_deserialize_int32_t+0xf0>
 8011156:	78b3      	ldrb	r3, [r6, #2]
 8011158:	2f01      	cmp	r7, #1
 801115a:	706b      	strb	r3, [r5, #1]
 801115c:	f105 0302 	add.w	r3, r5, #2
 8011160:	d04a      	beq.n	80111f8 <ucdr_deserialize_int32_t+0xf8>
 8011162:	7873      	ldrb	r3, [r6, #1]
 8011164:	2f02      	cmp	r7, #2
 8011166:	70ab      	strb	r3, [r5, #2]
 8011168:	f105 0303 	add.w	r3, r5, #3
 801116c:	d048      	beq.n	8011200 <ucdr_deserialize_int32_t+0x100>
 801116e:	7833      	ldrb	r3, [r6, #0]
 8011170:	70eb      	strb	r3, [r5, #3]
 8011172:	6923      	ldr	r3, [r4, #16]
 8011174:	2104      	movs	r1, #4
 8011176:	68a2      	ldr	r2, [r4, #8]
 8011178:	3304      	adds	r3, #4
 801117a:	7da0      	ldrb	r0, [r4, #22]
 801117c:	444a      	add	r2, r9
 801117e:	7561      	strb	r1, [r4, #21]
 8011180:	1bdb      	subs	r3, r3, r7
 8011182:	f080 0001 	eor.w	r0, r0, #1
 8011186:	60a2      	str	r2, [r4, #8]
 8011188:	6123      	str	r3, [r4, #16]
 801118a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801118e:	2104      	movs	r1, #4
 8011190:	4620      	mov	r0, r4
 8011192:	f000 fc3f 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8011196:	b1b0      	cbz	r0, 80111c6 <ucdr_deserialize_int32_t+0xc6>
 8011198:	7d23      	ldrb	r3, [r4, #20]
 801119a:	2b01      	cmp	r3, #1
 801119c:	68a3      	ldr	r3, [r4, #8]
 801119e:	d017      	beq.n	80111d0 <ucdr_deserialize_int32_t+0xd0>
 80111a0:	78db      	ldrb	r3, [r3, #3]
 80111a2:	702b      	strb	r3, [r5, #0]
 80111a4:	68a3      	ldr	r3, [r4, #8]
 80111a6:	789b      	ldrb	r3, [r3, #2]
 80111a8:	706b      	strb	r3, [r5, #1]
 80111aa:	68a3      	ldr	r3, [r4, #8]
 80111ac:	785b      	ldrb	r3, [r3, #1]
 80111ae:	70ab      	strb	r3, [r5, #2]
 80111b0:	68a3      	ldr	r3, [r4, #8]
 80111b2:	781b      	ldrb	r3, [r3, #0]
 80111b4:	70eb      	strb	r3, [r5, #3]
 80111b6:	2104      	movs	r1, #4
 80111b8:	68a2      	ldr	r2, [r4, #8]
 80111ba:	6923      	ldr	r3, [r4, #16]
 80111bc:	440a      	add	r2, r1
 80111be:	7561      	strb	r1, [r4, #21]
 80111c0:	440b      	add	r3, r1
 80111c2:	60a2      	str	r2, [r4, #8]
 80111c4:	6123      	str	r3, [r4, #16]
 80111c6:	7da0      	ldrb	r0, [r4, #22]
 80111c8:	f080 0001 	eor.w	r0, r0, #1
 80111cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	602b      	str	r3, [r5, #0]
 80111d4:	e7ef      	b.n	80111b6 <ucdr_deserialize_int32_t+0xb6>
 80111d6:	68a2      	ldr	r2, [r4, #8]
 80111d8:	6923      	ldr	r3, [r4, #16]
 80111da:	1bd2      	subs	r2, r2, r7
 80111dc:	7da0      	ldrb	r0, [r4, #22]
 80111de:	1bdb      	subs	r3, r3, r7
 80111e0:	f884 8015 	strb.w	r8, [r4, #21]
 80111e4:	f080 0001 	eor.w	r0, r0, #1
 80111e8:	60a2      	str	r2, [r4, #8]
 80111ea:	6123      	str	r3, [r4, #16]
 80111ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111f0:	68a3      	ldr	r3, [r4, #8]
 80111f2:	789b      	ldrb	r3, [r3, #2]
 80111f4:	706b      	strb	r3, [r5, #1]
 80111f6:	1cab      	adds	r3, r5, #2
 80111f8:	68a2      	ldr	r2, [r4, #8]
 80111fa:	7852      	ldrb	r2, [r2, #1]
 80111fc:	f803 2b01 	strb.w	r2, [r3], #1
 8011200:	68a2      	ldr	r2, [r4, #8]
 8011202:	7812      	ldrb	r2, [r2, #0]
 8011204:	701a      	strb	r2, [r3, #0]
 8011206:	e7b4      	b.n	8011172 <ucdr_deserialize_int32_t+0x72>
 8011208:	4631      	mov	r1, r6
 801120a:	463a      	mov	r2, r7
 801120c:	4628      	mov	r0, r5
 801120e:	f00c fdb2 	bl	801dd76 <memcpy>
 8011212:	464a      	mov	r2, r9
 8011214:	19e8      	adds	r0, r5, r7
 8011216:	68a1      	ldr	r1, [r4, #8]
 8011218:	f00c fdad 	bl	801dd76 <memcpy>
 801121c:	e7a9      	b.n	8011172 <ucdr_deserialize_int32_t+0x72>
 801121e:	bf00      	nop

08011220 <ucdr_serialize_int64_t>:
 8011220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011224:	4604      	mov	r4, r0
 8011226:	b082      	sub	sp, #8
 8011228:	2108      	movs	r1, #8
 801122a:	e9cd 2300 	strd	r2, r3, [sp]
 801122e:	f000 fc45 	bl	8011abc <ucdr_buffer_alignment>
 8011232:	4601      	mov	r1, r0
 8011234:	4620      	mov	r0, r4
 8011236:	7d67      	ldrb	r7, [r4, #21]
 8011238:	f000 fc88 	bl	8011b4c <ucdr_advance_buffer>
 801123c:	2108      	movs	r1, #8
 801123e:	4620      	mov	r0, r4
 8011240:	f000 fbdc 	bl	80119fc <ucdr_check_buffer_available_for>
 8011244:	2800      	cmp	r0, #0
 8011246:	d14e      	bne.n	80112e6 <ucdr_serialize_int64_t+0xc6>
 8011248:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801124c:	42ab      	cmp	r3, r5
 801124e:	d945      	bls.n	80112dc <ucdr_serialize_int64_t+0xbc>
 8011250:	1b5e      	subs	r6, r3, r5
 8011252:	60a3      	str	r3, [r4, #8]
 8011254:	6923      	ldr	r3, [r4, #16]
 8011256:	4620      	mov	r0, r4
 8011258:	f1c6 0808 	rsb	r8, r6, #8
 801125c:	4433      	add	r3, r6
 801125e:	4641      	mov	r1, r8
 8011260:	6123      	str	r3, [r4, #16]
 8011262:	f000 fbd7 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8011266:	2800      	cmp	r0, #0
 8011268:	d074      	beq.n	8011354 <ucdr_serialize_int64_t+0x134>
 801126a:	7d23      	ldrb	r3, [r4, #20]
 801126c:	2b01      	cmp	r3, #1
 801126e:	f000 809b 	beq.w	80113a8 <ucdr_serialize_int64_t+0x188>
 8011272:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011276:	702b      	strb	r3, [r5, #0]
 8011278:	2e00      	cmp	r6, #0
 801127a:	d078      	beq.n	801136e <ucdr_serialize_int64_t+0x14e>
 801127c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011280:	2e01      	cmp	r6, #1
 8011282:	706b      	strb	r3, [r5, #1]
 8011284:	d077      	beq.n	8011376 <ucdr_serialize_int64_t+0x156>
 8011286:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801128a:	2e02      	cmp	r6, #2
 801128c:	70ab      	strb	r3, [r5, #2]
 801128e:	d076      	beq.n	801137e <ucdr_serialize_int64_t+0x15e>
 8011290:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011294:	2e03      	cmp	r6, #3
 8011296:	70eb      	strb	r3, [r5, #3]
 8011298:	d075      	beq.n	8011386 <ucdr_serialize_int64_t+0x166>
 801129a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801129e:	2e04      	cmp	r6, #4
 80112a0:	712b      	strb	r3, [r5, #4]
 80112a2:	d074      	beq.n	801138e <ucdr_serialize_int64_t+0x16e>
 80112a4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80112a8:	2e05      	cmp	r6, #5
 80112aa:	716b      	strb	r3, [r5, #5]
 80112ac:	d073      	beq.n	8011396 <ucdr_serialize_int64_t+0x176>
 80112ae:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80112b2:	2e06      	cmp	r6, #6
 80112b4:	71ab      	strb	r3, [r5, #6]
 80112b6:	d072      	beq.n	801139e <ucdr_serialize_int64_t+0x17e>
 80112b8:	f89d 3000 	ldrb.w	r3, [sp]
 80112bc:	71eb      	strb	r3, [r5, #7]
 80112be:	6923      	ldr	r3, [r4, #16]
 80112c0:	2108      	movs	r1, #8
 80112c2:	68a2      	ldr	r2, [r4, #8]
 80112c4:	3308      	adds	r3, #8
 80112c6:	7da0      	ldrb	r0, [r4, #22]
 80112c8:	4442      	add	r2, r8
 80112ca:	7561      	strb	r1, [r4, #21]
 80112cc:	1b9e      	subs	r6, r3, r6
 80112ce:	f080 0001 	eor.w	r0, r0, #1
 80112d2:	60a2      	str	r2, [r4, #8]
 80112d4:	6126      	str	r6, [r4, #16]
 80112d6:	b002      	add	sp, #8
 80112d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112dc:	2108      	movs	r1, #8
 80112de:	4620      	mov	r0, r4
 80112e0:	f000 fb98 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 80112e4:	b350      	cbz	r0, 801133c <ucdr_serialize_int64_t+0x11c>
 80112e6:	7d23      	ldrb	r3, [r4, #20]
 80112e8:	2b01      	cmp	r3, #1
 80112ea:	d02d      	beq.n	8011348 <ucdr_serialize_int64_t+0x128>
 80112ec:	68a3      	ldr	r3, [r4, #8]
 80112ee:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80112f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80112f6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80112fa:	7018      	strb	r0, [r3, #0]
 80112fc:	68a3      	ldr	r3, [r4, #8]
 80112fe:	705a      	strb	r2, [r3, #1]
 8011300:	68a3      	ldr	r3, [r4, #8]
 8011302:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011306:	f89d 0003 	ldrb.w	r0, [sp, #3]
 801130a:	7099      	strb	r1, [r3, #2]
 801130c:	68a3      	ldr	r3, [r4, #8]
 801130e:	70da      	strb	r2, [r3, #3]
 8011310:	68a3      	ldr	r3, [r4, #8]
 8011312:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011316:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801131a:	7118      	strb	r0, [r3, #4]
 801131c:	68a3      	ldr	r3, [r4, #8]
 801131e:	715a      	strb	r2, [r3, #5]
 8011320:	68a3      	ldr	r3, [r4, #8]
 8011322:	f89d 2000 	ldrb.w	r2, [sp]
 8011326:	7199      	strb	r1, [r3, #6]
 8011328:	68a3      	ldr	r3, [r4, #8]
 801132a:	71da      	strb	r2, [r3, #7]
 801132c:	2108      	movs	r1, #8
 801132e:	68a2      	ldr	r2, [r4, #8]
 8011330:	6923      	ldr	r3, [r4, #16]
 8011332:	440a      	add	r2, r1
 8011334:	7561      	strb	r1, [r4, #21]
 8011336:	440b      	add	r3, r1
 8011338:	60a2      	str	r2, [r4, #8]
 801133a:	6123      	str	r3, [r4, #16]
 801133c:	7da0      	ldrb	r0, [r4, #22]
 801133e:	f080 0001 	eor.w	r0, r0, #1
 8011342:	b002      	add	sp, #8
 8011344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011348:	466b      	mov	r3, sp
 801134a:	68a2      	ldr	r2, [r4, #8]
 801134c:	cb03      	ldmia	r3!, {r0, r1}
 801134e:	6010      	str	r0, [r2, #0]
 8011350:	6051      	str	r1, [r2, #4]
 8011352:	e7eb      	b.n	801132c <ucdr_serialize_int64_t+0x10c>
 8011354:	68a2      	ldr	r2, [r4, #8]
 8011356:	6923      	ldr	r3, [r4, #16]
 8011358:	7da0      	ldrb	r0, [r4, #22]
 801135a:	1b92      	subs	r2, r2, r6
 801135c:	1b9b      	subs	r3, r3, r6
 801135e:	7567      	strb	r7, [r4, #21]
 8011360:	f080 0001 	eor.w	r0, r0, #1
 8011364:	60a2      	str	r2, [r4, #8]
 8011366:	6123      	str	r3, [r4, #16]
 8011368:	b002      	add	sp, #8
 801136a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801136e:	68a3      	ldr	r3, [r4, #8]
 8011370:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011374:	701a      	strb	r2, [r3, #0]
 8011376:	68a3      	ldr	r3, [r4, #8]
 8011378:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801137c:	701a      	strb	r2, [r3, #0]
 801137e:	68a3      	ldr	r3, [r4, #8]
 8011380:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011384:	701a      	strb	r2, [r3, #0]
 8011386:	68a3      	ldr	r3, [r4, #8]
 8011388:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801138c:	701a      	strb	r2, [r3, #0]
 801138e:	68a3      	ldr	r3, [r4, #8]
 8011390:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011394:	701a      	strb	r2, [r3, #0]
 8011396:	68a3      	ldr	r3, [r4, #8]
 8011398:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801139c:	701a      	strb	r2, [r3, #0]
 801139e:	68a3      	ldr	r3, [r4, #8]
 80113a0:	f89d 2000 	ldrb.w	r2, [sp]
 80113a4:	701a      	strb	r2, [r3, #0]
 80113a6:	e78a      	b.n	80112be <ucdr_serialize_int64_t+0x9e>
 80113a8:	4628      	mov	r0, r5
 80113aa:	466d      	mov	r5, sp
 80113ac:	4632      	mov	r2, r6
 80113ae:	4629      	mov	r1, r5
 80113b0:	f00c fce1 	bl	801dd76 <memcpy>
 80113b4:	4642      	mov	r2, r8
 80113b6:	19a9      	adds	r1, r5, r6
 80113b8:	68a0      	ldr	r0, [r4, #8]
 80113ba:	f00c fcdc 	bl	801dd76 <memcpy>
 80113be:	e77e      	b.n	80112be <ucdr_serialize_int64_t+0x9e>

080113c0 <ucdr_deserialize_int64_t>:
 80113c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80113c4:	4604      	mov	r4, r0
 80113c6:	460d      	mov	r5, r1
 80113c8:	2108      	movs	r1, #8
 80113ca:	f000 fb77 	bl	8011abc <ucdr_buffer_alignment>
 80113ce:	4601      	mov	r1, r0
 80113d0:	4620      	mov	r0, r4
 80113d2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80113d6:	f000 fbb9 	bl	8011b4c <ucdr_advance_buffer>
 80113da:	2108      	movs	r1, #8
 80113dc:	4620      	mov	r0, r4
 80113de:	f000 fb0d 	bl	80119fc <ucdr_check_buffer_available_for>
 80113e2:	2800      	cmp	r0, #0
 80113e4:	d151      	bne.n	801148a <ucdr_deserialize_int64_t+0xca>
 80113e6:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 80113ea:	42be      	cmp	r6, r7
 80113ec:	d948      	bls.n	8011480 <ucdr_deserialize_int64_t+0xc0>
 80113ee:	6923      	ldr	r3, [r4, #16]
 80113f0:	4620      	mov	r0, r4
 80113f2:	60a6      	str	r6, [r4, #8]
 80113f4:	1bf6      	subs	r6, r6, r7
 80113f6:	4433      	add	r3, r6
 80113f8:	f1c6 0908 	rsb	r9, r6, #8
 80113fc:	6123      	str	r3, [r4, #16]
 80113fe:	4649      	mov	r1, r9
 8011400:	f000 fb08 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8011404:	2800      	cmp	r0, #0
 8011406:	d06d      	beq.n	80114e4 <ucdr_deserialize_int64_t+0x124>
 8011408:	7d23      	ldrb	r3, [r4, #20]
 801140a:	2b01      	cmp	r3, #1
 801140c:	f000 8093 	beq.w	8011536 <ucdr_deserialize_int64_t+0x176>
 8011410:	79fb      	ldrb	r3, [r7, #7]
 8011412:	702b      	strb	r3, [r5, #0]
 8011414:	2e00      	cmp	r6, #0
 8011416:	d072      	beq.n	80114fe <ucdr_deserialize_int64_t+0x13e>
 8011418:	79bb      	ldrb	r3, [r7, #6]
 801141a:	2e01      	cmp	r6, #1
 801141c:	706b      	strb	r3, [r5, #1]
 801141e:	f105 0302 	add.w	r3, r5, #2
 8011422:	d070      	beq.n	8011506 <ucdr_deserialize_int64_t+0x146>
 8011424:	797b      	ldrb	r3, [r7, #5]
 8011426:	2e02      	cmp	r6, #2
 8011428:	70ab      	strb	r3, [r5, #2]
 801142a:	f105 0303 	add.w	r3, r5, #3
 801142e:	d06e      	beq.n	801150e <ucdr_deserialize_int64_t+0x14e>
 8011430:	793b      	ldrb	r3, [r7, #4]
 8011432:	2e03      	cmp	r6, #3
 8011434:	70eb      	strb	r3, [r5, #3]
 8011436:	f105 0304 	add.w	r3, r5, #4
 801143a:	d06c      	beq.n	8011516 <ucdr_deserialize_int64_t+0x156>
 801143c:	78fb      	ldrb	r3, [r7, #3]
 801143e:	2e04      	cmp	r6, #4
 8011440:	712b      	strb	r3, [r5, #4]
 8011442:	f105 0305 	add.w	r3, r5, #5
 8011446:	d06a      	beq.n	801151e <ucdr_deserialize_int64_t+0x15e>
 8011448:	78bb      	ldrb	r3, [r7, #2]
 801144a:	2e05      	cmp	r6, #5
 801144c:	716b      	strb	r3, [r5, #5]
 801144e:	f105 0306 	add.w	r3, r5, #6
 8011452:	d068      	beq.n	8011526 <ucdr_deserialize_int64_t+0x166>
 8011454:	787b      	ldrb	r3, [r7, #1]
 8011456:	2e06      	cmp	r6, #6
 8011458:	71ab      	strb	r3, [r5, #6]
 801145a:	f105 0307 	add.w	r3, r5, #7
 801145e:	d066      	beq.n	801152e <ucdr_deserialize_int64_t+0x16e>
 8011460:	783b      	ldrb	r3, [r7, #0]
 8011462:	71eb      	strb	r3, [r5, #7]
 8011464:	6923      	ldr	r3, [r4, #16]
 8011466:	2108      	movs	r1, #8
 8011468:	68a2      	ldr	r2, [r4, #8]
 801146a:	3308      	adds	r3, #8
 801146c:	7da0      	ldrb	r0, [r4, #22]
 801146e:	444a      	add	r2, r9
 8011470:	7561      	strb	r1, [r4, #21]
 8011472:	1b9e      	subs	r6, r3, r6
 8011474:	f080 0001 	eor.w	r0, r0, #1
 8011478:	60a2      	str	r2, [r4, #8]
 801147a:	6126      	str	r6, [r4, #16]
 801147c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011480:	2108      	movs	r1, #8
 8011482:	4620      	mov	r0, r4
 8011484:	f000 fac6 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8011488:	b310      	cbz	r0, 80114d0 <ucdr_deserialize_int64_t+0x110>
 801148a:	7d23      	ldrb	r3, [r4, #20]
 801148c:	2b01      	cmp	r3, #1
 801148e:	68a3      	ldr	r3, [r4, #8]
 8011490:	d023      	beq.n	80114da <ucdr_deserialize_int64_t+0x11a>
 8011492:	79db      	ldrb	r3, [r3, #7]
 8011494:	702b      	strb	r3, [r5, #0]
 8011496:	68a3      	ldr	r3, [r4, #8]
 8011498:	799b      	ldrb	r3, [r3, #6]
 801149a:	706b      	strb	r3, [r5, #1]
 801149c:	68a3      	ldr	r3, [r4, #8]
 801149e:	795b      	ldrb	r3, [r3, #5]
 80114a0:	70ab      	strb	r3, [r5, #2]
 80114a2:	68a3      	ldr	r3, [r4, #8]
 80114a4:	791b      	ldrb	r3, [r3, #4]
 80114a6:	70eb      	strb	r3, [r5, #3]
 80114a8:	68a3      	ldr	r3, [r4, #8]
 80114aa:	78db      	ldrb	r3, [r3, #3]
 80114ac:	712b      	strb	r3, [r5, #4]
 80114ae:	68a3      	ldr	r3, [r4, #8]
 80114b0:	789b      	ldrb	r3, [r3, #2]
 80114b2:	716b      	strb	r3, [r5, #5]
 80114b4:	68a3      	ldr	r3, [r4, #8]
 80114b6:	785b      	ldrb	r3, [r3, #1]
 80114b8:	71ab      	strb	r3, [r5, #6]
 80114ba:	68a3      	ldr	r3, [r4, #8]
 80114bc:	781b      	ldrb	r3, [r3, #0]
 80114be:	71eb      	strb	r3, [r5, #7]
 80114c0:	2108      	movs	r1, #8
 80114c2:	68a2      	ldr	r2, [r4, #8]
 80114c4:	6923      	ldr	r3, [r4, #16]
 80114c6:	440a      	add	r2, r1
 80114c8:	7561      	strb	r1, [r4, #21]
 80114ca:	440b      	add	r3, r1
 80114cc:	60a2      	str	r2, [r4, #8]
 80114ce:	6123      	str	r3, [r4, #16]
 80114d0:	7da0      	ldrb	r0, [r4, #22]
 80114d2:	f080 0001 	eor.w	r0, r0, #1
 80114d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114da:	681a      	ldr	r2, [r3, #0]
 80114dc:	685b      	ldr	r3, [r3, #4]
 80114de:	602a      	str	r2, [r5, #0]
 80114e0:	606b      	str	r3, [r5, #4]
 80114e2:	e7ed      	b.n	80114c0 <ucdr_deserialize_int64_t+0x100>
 80114e4:	68a2      	ldr	r2, [r4, #8]
 80114e6:	6923      	ldr	r3, [r4, #16]
 80114e8:	1b92      	subs	r2, r2, r6
 80114ea:	7da0      	ldrb	r0, [r4, #22]
 80114ec:	1b9b      	subs	r3, r3, r6
 80114ee:	f884 8015 	strb.w	r8, [r4, #21]
 80114f2:	f080 0001 	eor.w	r0, r0, #1
 80114f6:	60a2      	str	r2, [r4, #8]
 80114f8:	6123      	str	r3, [r4, #16]
 80114fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114fe:	68a3      	ldr	r3, [r4, #8]
 8011500:	799b      	ldrb	r3, [r3, #6]
 8011502:	706b      	strb	r3, [r5, #1]
 8011504:	1cab      	adds	r3, r5, #2
 8011506:	68a2      	ldr	r2, [r4, #8]
 8011508:	7952      	ldrb	r2, [r2, #5]
 801150a:	f803 2b01 	strb.w	r2, [r3], #1
 801150e:	68a2      	ldr	r2, [r4, #8]
 8011510:	7912      	ldrb	r2, [r2, #4]
 8011512:	f803 2b01 	strb.w	r2, [r3], #1
 8011516:	68a2      	ldr	r2, [r4, #8]
 8011518:	78d2      	ldrb	r2, [r2, #3]
 801151a:	f803 2b01 	strb.w	r2, [r3], #1
 801151e:	68a2      	ldr	r2, [r4, #8]
 8011520:	7892      	ldrb	r2, [r2, #2]
 8011522:	f803 2b01 	strb.w	r2, [r3], #1
 8011526:	68a2      	ldr	r2, [r4, #8]
 8011528:	7852      	ldrb	r2, [r2, #1]
 801152a:	f803 2b01 	strb.w	r2, [r3], #1
 801152e:	68a2      	ldr	r2, [r4, #8]
 8011530:	7812      	ldrb	r2, [r2, #0]
 8011532:	701a      	strb	r2, [r3, #0]
 8011534:	e796      	b.n	8011464 <ucdr_deserialize_int64_t+0xa4>
 8011536:	4639      	mov	r1, r7
 8011538:	4632      	mov	r2, r6
 801153a:	4628      	mov	r0, r5
 801153c:	f00c fc1b 	bl	801dd76 <memcpy>
 8011540:	464a      	mov	r2, r9
 8011542:	19a8      	adds	r0, r5, r6
 8011544:	68a1      	ldr	r1, [r4, #8]
 8011546:	f00c fc16 	bl	801dd76 <memcpy>
 801154a:	e78b      	b.n	8011464 <ucdr_deserialize_int64_t+0xa4>

0801154c <ucdr_serialize_float>:
 801154c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011550:	4604      	mov	r4, r0
 8011552:	b082      	sub	sp, #8
 8011554:	2104      	movs	r1, #4
 8011556:	ed8d 0a01 	vstr	s0, [sp, #4]
 801155a:	f000 faaf 	bl	8011abc <ucdr_buffer_alignment>
 801155e:	4601      	mov	r1, r0
 8011560:	4620      	mov	r0, r4
 8011562:	7d67      	ldrb	r7, [r4, #21]
 8011564:	f000 faf2 	bl	8011b4c <ucdr_advance_buffer>
 8011568:	2104      	movs	r1, #4
 801156a:	4620      	mov	r0, r4
 801156c:	f000 fa46 	bl	80119fc <ucdr_check_buffer_available_for>
 8011570:	2800      	cmp	r0, #0
 8011572:	d139      	bne.n	80115e8 <ucdr_serialize_float+0x9c>
 8011574:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011578:	42ab      	cmp	r3, r5
 801157a:	d930      	bls.n	80115de <ucdr_serialize_float+0x92>
 801157c:	1b5e      	subs	r6, r3, r5
 801157e:	60a3      	str	r3, [r4, #8]
 8011580:	6923      	ldr	r3, [r4, #16]
 8011582:	4620      	mov	r0, r4
 8011584:	f1c6 0804 	rsb	r8, r6, #4
 8011588:	4433      	add	r3, r6
 801158a:	4641      	mov	r1, r8
 801158c:	6123      	str	r3, [r4, #16]
 801158e:	f000 fa41 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8011592:	2800      	cmp	r0, #0
 8011594:	d04c      	beq.n	8011630 <ucdr_serialize_float+0xe4>
 8011596:	7d23      	ldrb	r3, [r4, #20]
 8011598:	2b01      	cmp	r3, #1
 801159a:	d063      	beq.n	8011664 <ucdr_serialize_float+0x118>
 801159c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80115a0:	702b      	strb	r3, [r5, #0]
 80115a2:	2e00      	cmp	r6, #0
 80115a4:	d051      	beq.n	801164a <ucdr_serialize_float+0xfe>
 80115a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80115aa:	2e01      	cmp	r6, #1
 80115ac:	706b      	strb	r3, [r5, #1]
 80115ae:	d050      	beq.n	8011652 <ucdr_serialize_float+0x106>
 80115b0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80115b4:	2e02      	cmp	r6, #2
 80115b6:	70ab      	strb	r3, [r5, #2]
 80115b8:	d04f      	beq.n	801165a <ucdr_serialize_float+0x10e>
 80115ba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80115be:	70eb      	strb	r3, [r5, #3]
 80115c0:	6923      	ldr	r3, [r4, #16]
 80115c2:	2104      	movs	r1, #4
 80115c4:	68a2      	ldr	r2, [r4, #8]
 80115c6:	3304      	adds	r3, #4
 80115c8:	7da0      	ldrb	r0, [r4, #22]
 80115ca:	4442      	add	r2, r8
 80115cc:	7561      	strb	r1, [r4, #21]
 80115ce:	1b9e      	subs	r6, r3, r6
 80115d0:	f080 0001 	eor.w	r0, r0, #1
 80115d4:	60a2      	str	r2, [r4, #8]
 80115d6:	6126      	str	r6, [r4, #16]
 80115d8:	b002      	add	sp, #8
 80115da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115de:	2104      	movs	r1, #4
 80115e0:	4620      	mov	r0, r4
 80115e2:	f000 fa17 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 80115e6:	b1d0      	cbz	r0, 801161e <ucdr_serialize_float+0xd2>
 80115e8:	7d23      	ldrb	r3, [r4, #20]
 80115ea:	2b01      	cmp	r3, #1
 80115ec:	68a3      	ldr	r3, [r4, #8]
 80115ee:	d01c      	beq.n	801162a <ucdr_serialize_float+0xde>
 80115f0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80115f4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80115f8:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80115fc:	7018      	strb	r0, [r3, #0]
 80115fe:	68a3      	ldr	r3, [r4, #8]
 8011600:	705a      	strb	r2, [r3, #1]
 8011602:	68a3      	ldr	r3, [r4, #8]
 8011604:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011608:	7099      	strb	r1, [r3, #2]
 801160a:	68a3      	ldr	r3, [r4, #8]
 801160c:	70da      	strb	r2, [r3, #3]
 801160e:	2104      	movs	r1, #4
 8011610:	68a2      	ldr	r2, [r4, #8]
 8011612:	6923      	ldr	r3, [r4, #16]
 8011614:	440a      	add	r2, r1
 8011616:	7561      	strb	r1, [r4, #21]
 8011618:	440b      	add	r3, r1
 801161a:	60a2      	str	r2, [r4, #8]
 801161c:	6123      	str	r3, [r4, #16]
 801161e:	7da0      	ldrb	r0, [r4, #22]
 8011620:	f080 0001 	eor.w	r0, r0, #1
 8011624:	b002      	add	sp, #8
 8011626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801162a:	9a01      	ldr	r2, [sp, #4]
 801162c:	601a      	str	r2, [r3, #0]
 801162e:	e7ee      	b.n	801160e <ucdr_serialize_float+0xc2>
 8011630:	68a2      	ldr	r2, [r4, #8]
 8011632:	6923      	ldr	r3, [r4, #16]
 8011634:	7da0      	ldrb	r0, [r4, #22]
 8011636:	1b92      	subs	r2, r2, r6
 8011638:	1b9b      	subs	r3, r3, r6
 801163a:	7567      	strb	r7, [r4, #21]
 801163c:	f080 0001 	eor.w	r0, r0, #1
 8011640:	60a2      	str	r2, [r4, #8]
 8011642:	6123      	str	r3, [r4, #16]
 8011644:	b002      	add	sp, #8
 8011646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801164a:	68a3      	ldr	r3, [r4, #8]
 801164c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011650:	701a      	strb	r2, [r3, #0]
 8011652:	68a3      	ldr	r3, [r4, #8]
 8011654:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011658:	701a      	strb	r2, [r3, #0]
 801165a:	68a3      	ldr	r3, [r4, #8]
 801165c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011660:	701a      	strb	r2, [r3, #0]
 8011662:	e7ad      	b.n	80115c0 <ucdr_serialize_float+0x74>
 8011664:	4628      	mov	r0, r5
 8011666:	ad01      	add	r5, sp, #4
 8011668:	4632      	mov	r2, r6
 801166a:	4629      	mov	r1, r5
 801166c:	f00c fb83 	bl	801dd76 <memcpy>
 8011670:	4642      	mov	r2, r8
 8011672:	19a9      	adds	r1, r5, r6
 8011674:	68a0      	ldr	r0, [r4, #8]
 8011676:	f00c fb7e 	bl	801dd76 <memcpy>
 801167a:	e7a1      	b.n	80115c0 <ucdr_serialize_float+0x74>

0801167c <ucdr_serialize_endian_float>:
 801167c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011680:	4604      	mov	r4, r0
 8011682:	b083      	sub	sp, #12
 8011684:	460d      	mov	r5, r1
 8011686:	2104      	movs	r1, #4
 8011688:	ed8d 0a01 	vstr	s0, [sp, #4]
 801168c:	f000 fa16 	bl	8011abc <ucdr_buffer_alignment>
 8011690:	4601      	mov	r1, r0
 8011692:	4620      	mov	r0, r4
 8011694:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011698:	f000 fa58 	bl	8011b4c <ucdr_advance_buffer>
 801169c:	2104      	movs	r1, #4
 801169e:	4620      	mov	r0, r4
 80116a0:	f000 f9ac 	bl	80119fc <ucdr_check_buffer_available_for>
 80116a4:	2800      	cmp	r0, #0
 80116a6:	d138      	bne.n	801171a <ucdr_serialize_endian_float+0x9e>
 80116a8:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80116ac:	42b7      	cmp	r7, r6
 80116ae:	d92f      	bls.n	8011710 <ucdr_serialize_endian_float+0x94>
 80116b0:	6923      	ldr	r3, [r4, #16]
 80116b2:	4620      	mov	r0, r4
 80116b4:	60a7      	str	r7, [r4, #8]
 80116b6:	1bbf      	subs	r7, r7, r6
 80116b8:	443b      	add	r3, r7
 80116ba:	f1c7 0904 	rsb	r9, r7, #4
 80116be:	6123      	str	r3, [r4, #16]
 80116c0:	4649      	mov	r1, r9
 80116c2:	f000 f9a7 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 80116c6:	2800      	cmp	r0, #0
 80116c8:	d04a      	beq.n	8011760 <ucdr_serialize_endian_float+0xe4>
 80116ca:	2d01      	cmp	r5, #1
 80116cc:	d063      	beq.n	8011796 <ucdr_serialize_endian_float+0x11a>
 80116ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80116d2:	7033      	strb	r3, [r6, #0]
 80116d4:	2f00      	cmp	r7, #0
 80116d6:	d051      	beq.n	801177c <ucdr_serialize_endian_float+0x100>
 80116d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80116dc:	2f01      	cmp	r7, #1
 80116de:	7073      	strb	r3, [r6, #1]
 80116e0:	d050      	beq.n	8011784 <ucdr_serialize_endian_float+0x108>
 80116e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80116e6:	2f02      	cmp	r7, #2
 80116e8:	70b3      	strb	r3, [r6, #2]
 80116ea:	d04f      	beq.n	801178c <ucdr_serialize_endian_float+0x110>
 80116ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80116f0:	70f3      	strb	r3, [r6, #3]
 80116f2:	6923      	ldr	r3, [r4, #16]
 80116f4:	2104      	movs	r1, #4
 80116f6:	68a2      	ldr	r2, [r4, #8]
 80116f8:	7da0      	ldrb	r0, [r4, #22]
 80116fa:	3304      	adds	r3, #4
 80116fc:	444a      	add	r2, r9
 80116fe:	7561      	strb	r1, [r4, #21]
 8011700:	1bdb      	subs	r3, r3, r7
 8011702:	f080 0001 	eor.w	r0, r0, #1
 8011706:	60a2      	str	r2, [r4, #8]
 8011708:	6123      	str	r3, [r4, #16]
 801170a:	b003      	add	sp, #12
 801170c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011710:	2104      	movs	r1, #4
 8011712:	4620      	mov	r0, r4
 8011714:	f000 f97e 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8011718:	b1c8      	cbz	r0, 801174e <ucdr_serialize_endian_float+0xd2>
 801171a:	2d01      	cmp	r5, #1
 801171c:	68a3      	ldr	r3, [r4, #8]
 801171e:	d01c      	beq.n	801175a <ucdr_serialize_endian_float+0xde>
 8011720:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011724:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011728:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801172c:	7018      	strb	r0, [r3, #0]
 801172e:	68a3      	ldr	r3, [r4, #8]
 8011730:	705a      	strb	r2, [r3, #1]
 8011732:	68a3      	ldr	r3, [r4, #8]
 8011734:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011738:	7099      	strb	r1, [r3, #2]
 801173a:	68a3      	ldr	r3, [r4, #8]
 801173c:	70da      	strb	r2, [r3, #3]
 801173e:	2104      	movs	r1, #4
 8011740:	68a2      	ldr	r2, [r4, #8]
 8011742:	6923      	ldr	r3, [r4, #16]
 8011744:	440a      	add	r2, r1
 8011746:	7561      	strb	r1, [r4, #21]
 8011748:	440b      	add	r3, r1
 801174a:	60a2      	str	r2, [r4, #8]
 801174c:	6123      	str	r3, [r4, #16]
 801174e:	7da0      	ldrb	r0, [r4, #22]
 8011750:	f080 0001 	eor.w	r0, r0, #1
 8011754:	b003      	add	sp, #12
 8011756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801175a:	9a01      	ldr	r2, [sp, #4]
 801175c:	601a      	str	r2, [r3, #0]
 801175e:	e7ee      	b.n	801173e <ucdr_serialize_endian_float+0xc2>
 8011760:	68a2      	ldr	r2, [r4, #8]
 8011762:	6923      	ldr	r3, [r4, #16]
 8011764:	7da0      	ldrb	r0, [r4, #22]
 8011766:	1bd2      	subs	r2, r2, r7
 8011768:	1bdb      	subs	r3, r3, r7
 801176a:	f884 8015 	strb.w	r8, [r4, #21]
 801176e:	f080 0001 	eor.w	r0, r0, #1
 8011772:	60a2      	str	r2, [r4, #8]
 8011774:	6123      	str	r3, [r4, #16]
 8011776:	b003      	add	sp, #12
 8011778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801177c:	68a3      	ldr	r3, [r4, #8]
 801177e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011782:	701a      	strb	r2, [r3, #0]
 8011784:	68a3      	ldr	r3, [r4, #8]
 8011786:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801178a:	701a      	strb	r2, [r3, #0]
 801178c:	68a3      	ldr	r3, [r4, #8]
 801178e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011792:	701a      	strb	r2, [r3, #0]
 8011794:	e7ad      	b.n	80116f2 <ucdr_serialize_endian_float+0x76>
 8011796:	ad01      	add	r5, sp, #4
 8011798:	463a      	mov	r2, r7
 801179a:	4630      	mov	r0, r6
 801179c:	4629      	mov	r1, r5
 801179e:	f00c faea 	bl	801dd76 <memcpy>
 80117a2:	464a      	mov	r2, r9
 80117a4:	19e9      	adds	r1, r5, r7
 80117a6:	68a0      	ldr	r0, [r4, #8]
 80117a8:	f00c fae5 	bl	801dd76 <memcpy>
 80117ac:	e7a1      	b.n	80116f2 <ucdr_serialize_endian_float+0x76>
 80117ae:	bf00      	nop

080117b0 <ucdr_deserialize_float>:
 80117b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117b4:	4604      	mov	r4, r0
 80117b6:	460d      	mov	r5, r1
 80117b8:	2104      	movs	r1, #4
 80117ba:	f000 f97f 	bl	8011abc <ucdr_buffer_alignment>
 80117be:	4601      	mov	r1, r0
 80117c0:	4620      	mov	r0, r4
 80117c2:	f894 8015 	ldrb.w	r8, [r4, #21]
 80117c6:	f000 f9c1 	bl	8011b4c <ucdr_advance_buffer>
 80117ca:	2104      	movs	r1, #4
 80117cc:	4620      	mov	r0, r4
 80117ce:	f000 f915 	bl	80119fc <ucdr_check_buffer_available_for>
 80117d2:	2800      	cmp	r0, #0
 80117d4:	d138      	bne.n	8011848 <ucdr_deserialize_float+0x98>
 80117d6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80117da:	42b7      	cmp	r7, r6
 80117dc:	d92f      	bls.n	801183e <ucdr_deserialize_float+0x8e>
 80117de:	6923      	ldr	r3, [r4, #16]
 80117e0:	4620      	mov	r0, r4
 80117e2:	60a7      	str	r7, [r4, #8]
 80117e4:	1bbf      	subs	r7, r7, r6
 80117e6:	443b      	add	r3, r7
 80117e8:	f1c7 0904 	rsb	r9, r7, #4
 80117ec:	6123      	str	r3, [r4, #16]
 80117ee:	4649      	mov	r1, r9
 80117f0:	f000 f910 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 80117f4:	2800      	cmp	r0, #0
 80117f6:	d046      	beq.n	8011886 <ucdr_deserialize_float+0xd6>
 80117f8:	7d23      	ldrb	r3, [r4, #20]
 80117fa:	2b01      	cmp	r3, #1
 80117fc:	d05c      	beq.n	80118b8 <ucdr_deserialize_float+0x108>
 80117fe:	78f3      	ldrb	r3, [r6, #3]
 8011800:	702b      	strb	r3, [r5, #0]
 8011802:	2f00      	cmp	r7, #0
 8011804:	d04c      	beq.n	80118a0 <ucdr_deserialize_float+0xf0>
 8011806:	78b3      	ldrb	r3, [r6, #2]
 8011808:	2f01      	cmp	r7, #1
 801180a:	706b      	strb	r3, [r5, #1]
 801180c:	f105 0302 	add.w	r3, r5, #2
 8011810:	d04a      	beq.n	80118a8 <ucdr_deserialize_float+0xf8>
 8011812:	7873      	ldrb	r3, [r6, #1]
 8011814:	2f02      	cmp	r7, #2
 8011816:	70ab      	strb	r3, [r5, #2]
 8011818:	f105 0303 	add.w	r3, r5, #3
 801181c:	d048      	beq.n	80118b0 <ucdr_deserialize_float+0x100>
 801181e:	7833      	ldrb	r3, [r6, #0]
 8011820:	70eb      	strb	r3, [r5, #3]
 8011822:	6923      	ldr	r3, [r4, #16]
 8011824:	2104      	movs	r1, #4
 8011826:	68a2      	ldr	r2, [r4, #8]
 8011828:	3304      	adds	r3, #4
 801182a:	7da0      	ldrb	r0, [r4, #22]
 801182c:	444a      	add	r2, r9
 801182e:	7561      	strb	r1, [r4, #21]
 8011830:	1bdb      	subs	r3, r3, r7
 8011832:	f080 0001 	eor.w	r0, r0, #1
 8011836:	60a2      	str	r2, [r4, #8]
 8011838:	6123      	str	r3, [r4, #16]
 801183a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801183e:	2104      	movs	r1, #4
 8011840:	4620      	mov	r0, r4
 8011842:	f000 f8e7 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8011846:	b1b0      	cbz	r0, 8011876 <ucdr_deserialize_float+0xc6>
 8011848:	7d23      	ldrb	r3, [r4, #20]
 801184a:	2b01      	cmp	r3, #1
 801184c:	68a3      	ldr	r3, [r4, #8]
 801184e:	d017      	beq.n	8011880 <ucdr_deserialize_float+0xd0>
 8011850:	78db      	ldrb	r3, [r3, #3]
 8011852:	702b      	strb	r3, [r5, #0]
 8011854:	68a3      	ldr	r3, [r4, #8]
 8011856:	789b      	ldrb	r3, [r3, #2]
 8011858:	706b      	strb	r3, [r5, #1]
 801185a:	68a3      	ldr	r3, [r4, #8]
 801185c:	785b      	ldrb	r3, [r3, #1]
 801185e:	70ab      	strb	r3, [r5, #2]
 8011860:	68a3      	ldr	r3, [r4, #8]
 8011862:	781b      	ldrb	r3, [r3, #0]
 8011864:	70eb      	strb	r3, [r5, #3]
 8011866:	2104      	movs	r1, #4
 8011868:	68a2      	ldr	r2, [r4, #8]
 801186a:	6923      	ldr	r3, [r4, #16]
 801186c:	440a      	add	r2, r1
 801186e:	7561      	strb	r1, [r4, #21]
 8011870:	440b      	add	r3, r1
 8011872:	60a2      	str	r2, [r4, #8]
 8011874:	6123      	str	r3, [r4, #16]
 8011876:	7da0      	ldrb	r0, [r4, #22]
 8011878:	f080 0001 	eor.w	r0, r0, #1
 801187c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	602b      	str	r3, [r5, #0]
 8011884:	e7ef      	b.n	8011866 <ucdr_deserialize_float+0xb6>
 8011886:	68a2      	ldr	r2, [r4, #8]
 8011888:	6923      	ldr	r3, [r4, #16]
 801188a:	1bd2      	subs	r2, r2, r7
 801188c:	7da0      	ldrb	r0, [r4, #22]
 801188e:	1bdb      	subs	r3, r3, r7
 8011890:	f884 8015 	strb.w	r8, [r4, #21]
 8011894:	f080 0001 	eor.w	r0, r0, #1
 8011898:	60a2      	str	r2, [r4, #8]
 801189a:	6123      	str	r3, [r4, #16]
 801189c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118a0:	68a3      	ldr	r3, [r4, #8]
 80118a2:	789b      	ldrb	r3, [r3, #2]
 80118a4:	706b      	strb	r3, [r5, #1]
 80118a6:	1cab      	adds	r3, r5, #2
 80118a8:	68a2      	ldr	r2, [r4, #8]
 80118aa:	7852      	ldrb	r2, [r2, #1]
 80118ac:	f803 2b01 	strb.w	r2, [r3], #1
 80118b0:	68a2      	ldr	r2, [r4, #8]
 80118b2:	7812      	ldrb	r2, [r2, #0]
 80118b4:	701a      	strb	r2, [r3, #0]
 80118b6:	e7b4      	b.n	8011822 <ucdr_deserialize_float+0x72>
 80118b8:	4631      	mov	r1, r6
 80118ba:	463a      	mov	r2, r7
 80118bc:	4628      	mov	r0, r5
 80118be:	f00c fa5a 	bl	801dd76 <memcpy>
 80118c2:	464a      	mov	r2, r9
 80118c4:	19e8      	adds	r0, r5, r7
 80118c6:	68a1      	ldr	r1, [r4, #8]
 80118c8:	f00c fa55 	bl	801dd76 <memcpy>
 80118cc:	e7a9      	b.n	8011822 <ucdr_deserialize_float+0x72>
 80118ce:	bf00      	nop

080118d0 <ucdr_deserialize_endian_float>:
 80118d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118d4:	4604      	mov	r4, r0
 80118d6:	460e      	mov	r6, r1
 80118d8:	2104      	movs	r1, #4
 80118da:	4615      	mov	r5, r2
 80118dc:	f000 f8ee 	bl	8011abc <ucdr_buffer_alignment>
 80118e0:	4601      	mov	r1, r0
 80118e2:	4620      	mov	r0, r4
 80118e4:	f894 8015 	ldrb.w	r8, [r4, #21]
 80118e8:	f000 f930 	bl	8011b4c <ucdr_advance_buffer>
 80118ec:	2104      	movs	r1, #4
 80118ee:	4620      	mov	r0, r4
 80118f0:	f000 f884 	bl	80119fc <ucdr_check_buffer_available_for>
 80118f4:	2800      	cmp	r0, #0
 80118f6:	d13c      	bne.n	8011972 <ucdr_deserialize_endian_float+0xa2>
 80118f8:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 80118fc:	42bb      	cmp	r3, r7
 80118fe:	d933      	bls.n	8011968 <ucdr_deserialize_endian_float+0x98>
 8011900:	eba3 0907 	sub.w	r9, r3, r7
 8011904:	60a3      	str	r3, [r4, #8]
 8011906:	6923      	ldr	r3, [r4, #16]
 8011908:	4620      	mov	r0, r4
 801190a:	f1c9 0a04 	rsb	sl, r9, #4
 801190e:	444b      	add	r3, r9
 8011910:	4651      	mov	r1, sl
 8011912:	6123      	str	r3, [r4, #16]
 8011914:	f000 f87e 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8011918:	2800      	cmp	r0, #0
 801191a:	d048      	beq.n	80119ae <ucdr_deserialize_endian_float+0xde>
 801191c:	2e01      	cmp	r6, #1
 801191e:	d061      	beq.n	80119e4 <ucdr_deserialize_endian_float+0x114>
 8011920:	78fb      	ldrb	r3, [r7, #3]
 8011922:	702b      	strb	r3, [r5, #0]
 8011924:	f1b9 0f00 	cmp.w	r9, #0
 8011928:	d050      	beq.n	80119cc <ucdr_deserialize_endian_float+0xfc>
 801192a:	78bb      	ldrb	r3, [r7, #2]
 801192c:	f1b9 0f01 	cmp.w	r9, #1
 8011930:	706b      	strb	r3, [r5, #1]
 8011932:	f105 0302 	add.w	r3, r5, #2
 8011936:	d04d      	beq.n	80119d4 <ucdr_deserialize_endian_float+0x104>
 8011938:	787b      	ldrb	r3, [r7, #1]
 801193a:	f1b9 0f02 	cmp.w	r9, #2
 801193e:	70ab      	strb	r3, [r5, #2]
 8011940:	f105 0303 	add.w	r3, r5, #3
 8011944:	d04a      	beq.n	80119dc <ucdr_deserialize_endian_float+0x10c>
 8011946:	783b      	ldrb	r3, [r7, #0]
 8011948:	70eb      	strb	r3, [r5, #3]
 801194a:	6923      	ldr	r3, [r4, #16]
 801194c:	2104      	movs	r1, #4
 801194e:	68a2      	ldr	r2, [r4, #8]
 8011950:	3304      	adds	r3, #4
 8011952:	7da0      	ldrb	r0, [r4, #22]
 8011954:	4452      	add	r2, sl
 8011956:	7561      	strb	r1, [r4, #21]
 8011958:	eba3 0309 	sub.w	r3, r3, r9
 801195c:	f080 0001 	eor.w	r0, r0, #1
 8011960:	60a2      	str	r2, [r4, #8]
 8011962:	6123      	str	r3, [r4, #16]
 8011964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011968:	2104      	movs	r1, #4
 801196a:	4620      	mov	r0, r4
 801196c:	f000 f852 	bl	8011a14 <ucdr_check_final_buffer_behavior>
 8011970:	b1a8      	cbz	r0, 801199e <ucdr_deserialize_endian_float+0xce>
 8011972:	2e01      	cmp	r6, #1
 8011974:	68a3      	ldr	r3, [r4, #8]
 8011976:	d017      	beq.n	80119a8 <ucdr_deserialize_endian_float+0xd8>
 8011978:	78db      	ldrb	r3, [r3, #3]
 801197a:	702b      	strb	r3, [r5, #0]
 801197c:	68a3      	ldr	r3, [r4, #8]
 801197e:	789b      	ldrb	r3, [r3, #2]
 8011980:	706b      	strb	r3, [r5, #1]
 8011982:	68a3      	ldr	r3, [r4, #8]
 8011984:	785b      	ldrb	r3, [r3, #1]
 8011986:	70ab      	strb	r3, [r5, #2]
 8011988:	68a3      	ldr	r3, [r4, #8]
 801198a:	781b      	ldrb	r3, [r3, #0]
 801198c:	70eb      	strb	r3, [r5, #3]
 801198e:	2104      	movs	r1, #4
 8011990:	68a2      	ldr	r2, [r4, #8]
 8011992:	6923      	ldr	r3, [r4, #16]
 8011994:	440a      	add	r2, r1
 8011996:	7561      	strb	r1, [r4, #21]
 8011998:	440b      	add	r3, r1
 801199a:	60a2      	str	r2, [r4, #8]
 801199c:	6123      	str	r3, [r4, #16]
 801199e:	7da0      	ldrb	r0, [r4, #22]
 80119a0:	f080 0001 	eor.w	r0, r0, #1
 80119a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	602b      	str	r3, [r5, #0]
 80119ac:	e7ef      	b.n	801198e <ucdr_deserialize_endian_float+0xbe>
 80119ae:	68a2      	ldr	r2, [r4, #8]
 80119b0:	6923      	ldr	r3, [r4, #16]
 80119b2:	eba2 0209 	sub.w	r2, r2, r9
 80119b6:	7da0      	ldrb	r0, [r4, #22]
 80119b8:	eba3 0309 	sub.w	r3, r3, r9
 80119bc:	f884 8015 	strb.w	r8, [r4, #21]
 80119c0:	f080 0001 	eor.w	r0, r0, #1
 80119c4:	60a2      	str	r2, [r4, #8]
 80119c6:	6123      	str	r3, [r4, #16]
 80119c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119cc:	68a3      	ldr	r3, [r4, #8]
 80119ce:	789b      	ldrb	r3, [r3, #2]
 80119d0:	706b      	strb	r3, [r5, #1]
 80119d2:	1cab      	adds	r3, r5, #2
 80119d4:	68a2      	ldr	r2, [r4, #8]
 80119d6:	7852      	ldrb	r2, [r2, #1]
 80119d8:	f803 2b01 	strb.w	r2, [r3], #1
 80119dc:	68a2      	ldr	r2, [r4, #8]
 80119de:	7812      	ldrb	r2, [r2, #0]
 80119e0:	701a      	strb	r2, [r3, #0]
 80119e2:	e7b2      	b.n	801194a <ucdr_deserialize_endian_float+0x7a>
 80119e4:	4639      	mov	r1, r7
 80119e6:	464a      	mov	r2, r9
 80119e8:	4628      	mov	r0, r5
 80119ea:	f00c f9c4 	bl	801dd76 <memcpy>
 80119ee:	4652      	mov	r2, sl
 80119f0:	eb05 0009 	add.w	r0, r5, r9
 80119f4:	68a1      	ldr	r1, [r4, #8]
 80119f6:	f00c f9be 	bl	801dd76 <memcpy>
 80119fa:	e7a6      	b.n	801194a <ucdr_deserialize_endian_float+0x7a>

080119fc <ucdr_check_buffer_available_for>:
 80119fc:	7d83      	ldrb	r3, [r0, #22]
 80119fe:	b93b      	cbnz	r3, 8011a10 <ucdr_check_buffer_available_for+0x14>
 8011a00:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8011a04:	4419      	add	r1, r3
 8011a06:	4288      	cmp	r0, r1
 8011a08:	bf34      	ite	cc
 8011a0a:	2000      	movcc	r0, #0
 8011a0c:	2001      	movcs	r0, #1
 8011a0e:	4770      	bx	lr
 8011a10:	2000      	movs	r0, #0
 8011a12:	4770      	bx	lr

08011a14 <ucdr_check_final_buffer_behavior>:
 8011a14:	7d83      	ldrb	r3, [r0, #22]
 8011a16:	b943      	cbnz	r3, 8011a2a <ucdr_check_final_buffer_behavior+0x16>
 8011a18:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8011a1c:	b510      	push	{r4, lr}
 8011a1e:	4291      	cmp	r1, r2
 8011a20:	4604      	mov	r4, r0
 8011a22:	d205      	bcs.n	8011a30 <ucdr_check_final_buffer_behavior+0x1c>
 8011a24:	2301      	movs	r3, #1
 8011a26:	4618      	mov	r0, r3
 8011a28:	bd10      	pop	{r4, pc}
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	4770      	bx	lr
 8011a30:	6982      	ldr	r2, [r0, #24]
 8011a32:	b13a      	cbz	r2, 8011a44 <ucdr_check_final_buffer_behavior+0x30>
 8011a34:	69c1      	ldr	r1, [r0, #28]
 8011a36:	4790      	blx	r2
 8011a38:	f080 0301 	eor.w	r3, r0, #1
 8011a3c:	75a0      	strb	r0, [r4, #22]
 8011a3e:	b2db      	uxtb	r3, r3
 8011a40:	4618      	mov	r0, r3
 8011a42:	bd10      	pop	{r4, pc}
 8011a44:	2001      	movs	r0, #1
 8011a46:	75a0      	strb	r0, [r4, #22]
 8011a48:	e7fa      	b.n	8011a40 <ucdr_check_final_buffer_behavior+0x2c>
 8011a4a:	bf00      	nop

08011a4c <ucdr_set_on_full_buffer_callback>:
 8011a4c:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8011a50:	4770      	bx	lr
 8011a52:	bf00      	nop

08011a54 <ucdr_init_buffer_origin_offset_endian>:
 8011a54:	b410      	push	{r4}
 8011a56:	9c01      	ldr	r4, [sp, #4]
 8011a58:	440a      	add	r2, r1
 8011a5a:	6001      	str	r1, [r0, #0]
 8011a5c:	6042      	str	r2, [r0, #4]
 8011a5e:	190a      	adds	r2, r1, r4
 8011a60:	441c      	add	r4, r3
 8011a62:	6082      	str	r2, [r0, #8]
 8011a64:	2200      	movs	r2, #0
 8011a66:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8011a6a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8011a6e:	7542      	strb	r2, [r0, #21]
 8011a70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a74:	7582      	strb	r2, [r0, #22]
 8011a76:	7503      	strb	r3, [r0, #20]
 8011a78:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8011a7c:	4770      	bx	lr
 8011a7e:	bf00      	nop

08011a80 <ucdr_init_buffer_origin_offset>:
 8011a80:	b510      	push	{r4, lr}
 8011a82:	b082      	sub	sp, #8
 8011a84:	9c04      	ldr	r4, [sp, #16]
 8011a86:	9400      	str	r4, [sp, #0]
 8011a88:	2401      	movs	r4, #1
 8011a8a:	9401      	str	r4, [sp, #4]
 8011a8c:	f7ff ffe2 	bl	8011a54 <ucdr_init_buffer_origin_offset_endian>
 8011a90:	b002      	add	sp, #8
 8011a92:	bd10      	pop	{r4, pc}

08011a94 <ucdr_init_buffer_origin>:
 8011a94:	b510      	push	{r4, lr}
 8011a96:	2400      	movs	r4, #0
 8011a98:	b082      	sub	sp, #8
 8011a9a:	9400      	str	r4, [sp, #0]
 8011a9c:	f7ff fff0 	bl	8011a80 <ucdr_init_buffer_origin_offset>
 8011aa0:	b002      	add	sp, #8
 8011aa2:	bd10      	pop	{r4, pc}

08011aa4 <ucdr_init_buffer>:
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	f7ff bff5 	b.w	8011a94 <ucdr_init_buffer_origin>
 8011aaa:	bf00      	nop

08011aac <ucdr_alignment>:
 8011aac:	fbb0 f2f1 	udiv	r2, r0, r1
 8011ab0:	fb02 0011 	mls	r0, r2, r1, r0
 8011ab4:	1e4b      	subs	r3, r1, #1
 8011ab6:	1a08      	subs	r0, r1, r0
 8011ab8:	4018      	ands	r0, r3
 8011aba:	4770      	bx	lr

08011abc <ucdr_buffer_alignment>:
 8011abc:	7d43      	ldrb	r3, [r0, #21]
 8011abe:	428b      	cmp	r3, r1
 8011ac0:	d209      	bcs.n	8011ad6 <ucdr_buffer_alignment+0x1a>
 8011ac2:	6903      	ldr	r3, [r0, #16]
 8011ac4:	1e4a      	subs	r2, r1, #1
 8011ac6:	fbb3 f0f1 	udiv	r0, r3, r1
 8011aca:	fb01 3010 	mls	r0, r1, r0, r3
 8011ace:	1a09      	subs	r1, r1, r0
 8011ad0:	ea01 0002 	and.w	r0, r1, r2
 8011ad4:	4770      	bx	lr
 8011ad6:	2000      	movs	r0, #0
 8011ad8:	4770      	bx	lr
 8011ada:	bf00      	nop

08011adc <ucdr_align_to>:
 8011adc:	b538      	push	{r3, r4, r5, lr}
 8011ade:	4604      	mov	r4, r0
 8011ae0:	460d      	mov	r5, r1
 8011ae2:	f7ff ffeb 	bl	8011abc <ucdr_buffer_alignment>
 8011ae6:	68a3      	ldr	r3, [r4, #8]
 8011ae8:	7565      	strb	r5, [r4, #21]
 8011aea:	181a      	adds	r2, r3, r0
 8011aec:	6923      	ldr	r3, [r4, #16]
 8011aee:	4418      	add	r0, r3
 8011af0:	6863      	ldr	r3, [r4, #4]
 8011af2:	4293      	cmp	r3, r2
 8011af4:	6120      	str	r0, [r4, #16]
 8011af6:	bf28      	it	cs
 8011af8:	4613      	movcs	r3, r2
 8011afa:	60a3      	str	r3, [r4, #8]
 8011afc:	bd38      	pop	{r3, r4, r5, pc}
 8011afe:	bf00      	nop

08011b00 <ucdr_buffer_length>:
 8011b00:	6882      	ldr	r2, [r0, #8]
 8011b02:	6800      	ldr	r0, [r0, #0]
 8011b04:	1a10      	subs	r0, r2, r0
 8011b06:	4770      	bx	lr

08011b08 <ucdr_buffer_remaining>:
 8011b08:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8011b0c:	1a10      	subs	r0, r2, r0
 8011b0e:	4770      	bx	lr

08011b10 <ucdr_check_final_buffer_behavior_array>:
 8011b10:	b538      	push	{r3, r4, r5, lr}
 8011b12:	7d83      	ldrb	r3, [r0, #22]
 8011b14:	b9a3      	cbnz	r3, 8011b40 <ucdr_check_final_buffer_behavior_array+0x30>
 8011b16:	4604      	mov	r4, r0
 8011b18:	460d      	mov	r5, r1
 8011b1a:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8011b1e:	429a      	cmp	r2, r3
 8011b20:	d300      	bcc.n	8011b24 <ucdr_check_final_buffer_behavior_array+0x14>
 8011b22:	b931      	cbnz	r1, 8011b32 <ucdr_check_final_buffer_behavior_array+0x22>
 8011b24:	4620      	mov	r0, r4
 8011b26:	f7ff ffef 	bl	8011b08 <ucdr_buffer_remaining>
 8011b2a:	42a8      	cmp	r0, r5
 8011b2c:	bf28      	it	cs
 8011b2e:	4628      	movcs	r0, r5
 8011b30:	bd38      	pop	{r3, r4, r5, pc}
 8011b32:	6983      	ldr	r3, [r0, #24]
 8011b34:	b133      	cbz	r3, 8011b44 <ucdr_check_final_buffer_behavior_array+0x34>
 8011b36:	69c1      	ldr	r1, [r0, #28]
 8011b38:	4798      	blx	r3
 8011b3a:	75a0      	strb	r0, [r4, #22]
 8011b3c:	2800      	cmp	r0, #0
 8011b3e:	d0f1      	beq.n	8011b24 <ucdr_check_final_buffer_behavior_array+0x14>
 8011b40:	2000      	movs	r0, #0
 8011b42:	bd38      	pop	{r3, r4, r5, pc}
 8011b44:	2301      	movs	r3, #1
 8011b46:	7583      	strb	r3, [r0, #22]
 8011b48:	e7fa      	b.n	8011b40 <ucdr_check_final_buffer_behavior_array+0x30>
 8011b4a:	bf00      	nop

08011b4c <ucdr_advance_buffer>:
 8011b4c:	b538      	push	{r3, r4, r5, lr}
 8011b4e:	4604      	mov	r4, r0
 8011b50:	460d      	mov	r5, r1
 8011b52:	f7ff ff53 	bl	80119fc <ucdr_check_buffer_available_for>
 8011b56:	b178      	cbz	r0, 8011b78 <ucdr_advance_buffer+0x2c>
 8011b58:	6923      	ldr	r3, [r4, #16]
 8011b5a:	68a2      	ldr	r2, [r4, #8]
 8011b5c:	442b      	add	r3, r5
 8011b5e:	442a      	add	r2, r5
 8011b60:	6123      	str	r3, [r4, #16]
 8011b62:	2301      	movs	r3, #1
 8011b64:	60a2      	str	r2, [r4, #8]
 8011b66:	7563      	strb	r3, [r4, #21]
 8011b68:	bd38      	pop	{r3, r4, r5, pc}
 8011b6a:	68a2      	ldr	r2, [r4, #8]
 8011b6c:	1a2d      	subs	r5, r5, r0
 8011b6e:	6923      	ldr	r3, [r4, #16]
 8011b70:	4402      	add	r2, r0
 8011b72:	4418      	add	r0, r3
 8011b74:	60a2      	str	r2, [r4, #8]
 8011b76:	6120      	str	r0, [r4, #16]
 8011b78:	4629      	mov	r1, r5
 8011b7a:	2201      	movs	r2, #1
 8011b7c:	4620      	mov	r0, r4
 8011b7e:	f7ff ffc7 	bl	8011b10 <ucdr_check_final_buffer_behavior_array>
 8011b82:	2800      	cmp	r0, #0
 8011b84:	d1f1      	bne.n	8011b6a <ucdr_advance_buffer+0x1e>
 8011b86:	2301      	movs	r3, #1
 8011b88:	7563      	strb	r3, [r4, #21]
 8011b8a:	bd38      	pop	{r3, r4, r5, pc}

08011b8c <uxr_buffer_delete_entity>:
 8011b8c:	b510      	push	{r4, lr}
 8011b8e:	2300      	movs	r3, #0
 8011b90:	b08e      	sub	sp, #56	; 0x38
 8011b92:	4604      	mov	r4, r0
 8011b94:	9103      	str	r1, [sp, #12]
 8011b96:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8011b9a:	2303      	movs	r3, #3
 8011b9c:	2204      	movs	r2, #4
 8011b9e:	9300      	str	r3, [sp, #0]
 8011ba0:	ab06      	add	r3, sp, #24
 8011ba2:	f001 f989 	bl	8012eb8 <uxr_prepare_stream_to_write_submessage>
 8011ba6:	b918      	cbnz	r0, 8011bb0 <uxr_buffer_delete_entity+0x24>
 8011ba8:	4604      	mov	r4, r0
 8011baa:	4620      	mov	r0, r4
 8011bac:	b00e      	add	sp, #56	; 0x38
 8011bae:	bd10      	pop	{r4, pc}
 8011bb0:	9902      	ldr	r1, [sp, #8]
 8011bb2:	aa05      	add	r2, sp, #20
 8011bb4:	4620      	mov	r0, r4
 8011bb6:	f001 fabb 	bl	8013130 <uxr_init_base_object_request>
 8011bba:	4604      	mov	r4, r0
 8011bbc:	a905      	add	r1, sp, #20
 8011bbe:	a806      	add	r0, sp, #24
 8011bc0:	f002 fd44 	bl	801464c <uxr_serialize_DELETE_Payload>
 8011bc4:	4620      	mov	r0, r4
 8011bc6:	b00e      	add	sp, #56	; 0x38
 8011bc8:	bd10      	pop	{r4, pc}
 8011bca:	bf00      	nop

08011bcc <uxr_common_create_entity>:
 8011bcc:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011bd0:	b510      	push	{r4, lr}
 8011bd2:	f1bc 0f01 	cmp.w	ip, #1
 8011bd6:	b08c      	sub	sp, #48	; 0x30
 8011bd8:	4604      	mov	r4, r0
 8011bda:	9202      	str	r2, [sp, #8]
 8011bdc:	bf0c      	ite	eq
 8011bde:	f003 0201 	andeq.w	r2, r3, #1
 8011be2:	2200      	movne	r2, #0
 8011be4:	330e      	adds	r3, #14
 8011be6:	9103      	str	r1, [sp, #12]
 8011be8:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8011bec:	441a      	add	r2, r3
 8011bee:	ab04      	add	r3, sp, #16
 8011bf0:	9101      	str	r1, [sp, #4]
 8011bf2:	2101      	movs	r1, #1
 8011bf4:	b292      	uxth	r2, r2
 8011bf6:	9100      	str	r1, [sp, #0]
 8011bf8:	9903      	ldr	r1, [sp, #12]
 8011bfa:	f001 f95d 	bl	8012eb8 <uxr_prepare_stream_to_write_submessage>
 8011bfe:	b918      	cbnz	r0, 8011c08 <uxr_common_create_entity+0x3c>
 8011c00:	4604      	mov	r4, r0
 8011c02:	4620      	mov	r0, r4
 8011c04:	b00c      	add	sp, #48	; 0x30
 8011c06:	bd10      	pop	{r4, pc}
 8011c08:	9902      	ldr	r1, [sp, #8]
 8011c0a:	4620      	mov	r0, r4
 8011c0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011c0e:	f001 fa8f 	bl	8013130 <uxr_init_base_object_request>
 8011c12:	4604      	mov	r4, r0
 8011c14:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011c16:	a804      	add	r0, sp, #16
 8011c18:	f002 fc72 	bl	8014500 <uxr_serialize_CREATE_Payload>
 8011c1c:	4620      	mov	r0, r4
 8011c1e:	b00c      	add	sp, #48	; 0x30
 8011c20:	bd10      	pop	{r4, pc}
 8011c22:	bf00      	nop

08011c24 <uxr_buffer_create_participant_bin>:
 8011c24:	b570      	push	{r4, r5, r6, lr}
 8011c26:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8011c2a:	4605      	mov	r5, r0
 8011c2c:	ac11      	add	r4, sp, #68	; 0x44
 8011c2e:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 8011c32:	2303      	movs	r3, #3
 8011c34:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 8011c38:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8011c3c:	7223      	strb	r3, [r4, #8]
 8011c3e:	2300      	movs	r3, #0
 8011c40:	2201      	movs	r2, #1
 8011c42:	f88d 3014 	strb.w	r3, [sp, #20]
 8011c46:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8011c48:	7122      	strb	r2, [r4, #4]
 8011c4a:	b1cb      	cbz	r3, 8011c80 <uxr_buffer_create_participant_bin+0x5c>
 8011c4c:	f88d 201c 	strb.w	r2, [sp, #28]
 8011c50:	9308      	str	r3, [sp, #32]
 8011c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011c56:	a915      	add	r1, sp, #84	; 0x54
 8011c58:	a809      	add	r0, sp, #36	; 0x24
 8011c5a:	f7ff ff23 	bl	8011aa4 <ucdr_init_buffer>
 8011c5e:	a905      	add	r1, sp, #20
 8011c60:	a809      	add	r0, sp, #36	; 0x24
 8011c62:	f002 f803 	bl	8013c6c <uxr_serialize_OBJK_DomainParticipant_Binary>
 8011c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c68:	9600      	str	r6, [sp, #0]
 8011c6a:	4628      	mov	r0, r5
 8011c6c:	9401      	str	r4, [sp, #4]
 8011c6e:	60e3      	str	r3, [r4, #12]
 8011c70:	b29b      	uxth	r3, r3
 8011c72:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011c76:	f7ff ffa9 	bl	8011bcc <uxr_common_create_entity>
 8011c7a:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 8011c7e:	bd70      	pop	{r4, r5, r6, pc}
 8011c80:	f88d 301c 	strb.w	r3, [sp, #28]
 8011c84:	e7e5      	b.n	8011c52 <uxr_buffer_create_participant_bin+0x2e>
 8011c86:	bf00      	nop

08011c88 <uxr_buffer_create_topic_bin>:
 8011c88:	b570      	push	{r4, r5, r6, lr}
 8011c8a:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8011c8e:	4605      	mov	r5, r0
 8011c90:	4618      	mov	r0, r3
 8011c92:	9105      	str	r1, [sp, #20]
 8011c94:	a997      	add	r1, sp, #604	; 0x25c
 8011c96:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 8011c9a:	ac13      	add	r4, sp, #76	; 0x4c
 8011c9c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011ca0:	2302      	movs	r3, #2
 8011ca2:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8011ca6:	f000 f9cf 	bl	8012048 <uxr_object_id_to_raw>
 8011caa:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 8011cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011cb0:	a917      	add	r1, sp, #92	; 0x5c
 8011cb2:	a80b      	add	r0, sp, #44	; 0x2c
 8011cb4:	9306      	str	r3, [sp, #24]
 8011cb6:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 8011cb8:	930a      	str	r3, [sp, #40]	; 0x28
 8011cba:	2303      	movs	r3, #3
 8011cbc:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8011cc0:	2301      	movs	r3, #1
 8011cc2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	f88d 301c 	strb.w	r3, [sp, #28]
 8011ccc:	f7ff feea 	bl	8011aa4 <ucdr_init_buffer>
 8011cd0:	a906      	add	r1, sp, #24
 8011cd2:	a80b      	add	r0, sp, #44	; 0x2c
 8011cd4:	f001 ffec 	bl	8013cb0 <uxr_serialize_OBJK_Topic_Binary>
 8011cd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011cda:	4628      	mov	r0, r5
 8011cdc:	9600      	str	r6, [sp, #0]
 8011cde:	9316      	str	r3, [sp, #88]	; 0x58
 8011ce0:	b29b      	uxth	r3, r3
 8011ce2:	9401      	str	r4, [sp, #4]
 8011ce4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011ce8:	f7ff ff70 	bl	8011bcc <uxr_common_create_entity>
 8011cec:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 8011cf0:	bd70      	pop	{r4, r5, r6, pc}
 8011cf2:	bf00      	nop

08011cf4 <uxr_buffer_create_publisher_bin>:
 8011cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011cf6:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8011cfa:	2603      	movs	r6, #3
 8011cfc:	4605      	mov	r5, r0
 8011cfe:	4618      	mov	r0, r3
 8011d00:	9105      	str	r1, [sp, #20]
 8011d02:	a992      	add	r1, sp, #584	; 0x248
 8011d04:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8011d08:	ac0e      	add	r4, sp, #56	; 0x38
 8011d0a:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8011d0e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011d12:	f000 f999 	bl	8012048 <uxr_object_id_to_raw>
 8011d16:	2300      	movs	r3, #0
 8011d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011d1c:	a912      	add	r1, sp, #72	; 0x48
 8011d1e:	a806      	add	r0, sp, #24
 8011d20:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8011d24:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8011d28:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8011d2c:	f7ff feba 	bl	8011aa4 <ucdr_init_buffer>
 8011d30:	a993      	add	r1, sp, #588	; 0x24c
 8011d32:	a806      	add	r0, sp, #24
 8011d34:	f002 f870 	bl	8013e18 <uxr_serialize_OBJK_Publisher_Binary>
 8011d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d3a:	4628      	mov	r0, r5
 8011d3c:	9700      	str	r7, [sp, #0]
 8011d3e:	9311      	str	r3, [sp, #68]	; 0x44
 8011d40:	b29b      	uxth	r3, r3
 8011d42:	9401      	str	r4, [sp, #4]
 8011d44:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011d48:	f7ff ff40 	bl	8011bcc <uxr_common_create_entity>
 8011d4c:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8011d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d52:	bf00      	nop

08011d54 <uxr_buffer_create_subscriber_bin>:
 8011d54:	b570      	push	{r4, r5, r6, lr}
 8011d56:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 8011d5a:	4605      	mov	r5, r0
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	9105      	str	r1, [sp, #20]
 8011d60:	a992      	add	r1, sp, #584	; 0x248
 8011d62:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 8011d66:	ac0e      	add	r4, sp, #56	; 0x38
 8011d68:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011d6c:	2304      	movs	r3, #4
 8011d6e:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8011d72:	f000 f969 	bl	8012048 <uxr_object_id_to_raw>
 8011d76:	2300      	movs	r3, #0
 8011d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011d7c:	a912      	add	r1, sp, #72	; 0x48
 8011d7e:	a806      	add	r0, sp, #24
 8011d80:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8011d84:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8011d88:	2303      	movs	r3, #3
 8011d8a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8011d8e:	f7ff fe89 	bl	8011aa4 <ucdr_init_buffer>
 8011d92:	a993      	add	r1, sp, #588	; 0x24c
 8011d94:	a806      	add	r0, sp, #24
 8011d96:	f002 f8ef 	bl	8013f78 <uxr_serialize_OBJK_Subscriber_Binary>
 8011d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d9c:	4628      	mov	r0, r5
 8011d9e:	9600      	str	r6, [sp, #0]
 8011da0:	9311      	str	r3, [sp, #68]	; 0x44
 8011da2:	b29b      	uxth	r3, r3
 8011da4:	9401      	str	r4, [sp, #4]
 8011da6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011daa:	f7ff ff0f 	bl	8011bcc <uxr_common_create_entity>
 8011dae:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 8011db2:	bd70      	pop	{r4, r5, r6, pc}

08011db4 <uxr_buffer_create_datawriter_bin>:
 8011db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011db8:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8011dbc:	4606      	mov	r6, r0
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	2703      	movs	r7, #3
 8011dc2:	ac1d      	add	r4, sp, #116	; 0x74
 8011dc4:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8011dc8:	9105      	str	r1, [sp, #20]
 8011dca:	a9a1      	add	r1, sp, #644	; 0x284
 8011dcc:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8011dd0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011dd4:	2305      	movs	r3, #5
 8011dd6:	7123      	strb	r3, [r4, #4]
 8011dd8:	f000 f936 	bl	8012048 <uxr_object_id_to_raw>
 8011ddc:	a90e      	add	r1, sp, #56	; 0x38
 8011dde:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8011de0:	7227      	strb	r7, [r4, #8]
 8011de2:	f000 f931 	bl	8012048 <uxr_object_id_to_raw>
 8011de6:	2300      	movs	r3, #0
 8011de8:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8011dec:	3d00      	subs	r5, #0
 8011dee:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 8011df2:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8011df6:	bf18      	it	ne
 8011df8:	2501      	movne	r5, #1
 8011dfa:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8011dfe:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8011e02:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8011e06:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011e0a:	2301      	movs	r3, #1
 8011e0c:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8011e10:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8011e14:	bb8a      	cbnz	r2, 8011e7a <uxr_buffer_create_datawriter_bin+0xc6>
 8011e16:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8011e1a:	f04f 0c13 	mov.w	ip, #19
 8011e1e:	250b      	movs	r5, #11
 8011e20:	2221      	movs	r2, #33	; 0x21
 8011e22:	2111      	movs	r1, #17
 8011e24:	2009      	movs	r0, #9
 8011e26:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011e2a:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8011e2e:	b923      	cbnz	r3, 8011e3a <uxr_buffer_create_datawriter_bin+0x86>
 8011e30:	4672      	mov	r2, lr
 8011e32:	4661      	mov	r1, ip
 8011e34:	4628      	mov	r0, r5
 8011e36:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8011e3a:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8011e3e:	2b01      	cmp	r3, #1
 8011e40:	d025      	beq.n	8011e8e <uxr_buffer_create_datawriter_bin+0xda>
 8011e42:	2b03      	cmp	r3, #3
 8011e44:	d029      	beq.n	8011e9a <uxr_buffer_create_datawriter_bin+0xe6>
 8011e46:	b32b      	cbz	r3, 8011e94 <uxr_buffer_create_datawriter_bin+0xe0>
 8011e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011e4c:	a921      	add	r1, sp, #132	; 0x84
 8011e4e:	a806      	add	r0, sp, #24
 8011e50:	f7ff fe28 	bl	8011aa4 <ucdr_init_buffer>
 8011e54:	a90e      	add	r1, sp, #56	; 0x38
 8011e56:	a806      	add	r0, sp, #24
 8011e58:	f002 f940 	bl	80140dc <uxr_serialize_OBJK_DataWriter_Binary>
 8011e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e5e:	f8cd 8000 	str.w	r8, [sp]
 8011e62:	4630      	mov	r0, r6
 8011e64:	9401      	str	r4, [sp, #4]
 8011e66:	60e3      	str	r3, [r4, #12]
 8011e68:	b29b      	uxth	r3, r3
 8011e6a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011e6e:	f7ff fead 	bl	8011bcc <uxr_common_create_entity>
 8011e72:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8011e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e7a:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8011e7e:	f04f 0c12 	mov.w	ip, #18
 8011e82:	250a      	movs	r5, #10
 8011e84:	2220      	movs	r2, #32
 8011e86:	2110      	movs	r1, #16
 8011e88:	2008      	movs	r0, #8
 8011e8a:	2702      	movs	r7, #2
 8011e8c:	e7cd      	b.n	8011e2a <uxr_buffer_create_datawriter_bin+0x76>
 8011e8e:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8011e92:	e7d9      	b.n	8011e48 <uxr_buffer_create_datawriter_bin+0x94>
 8011e94:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8011e98:	e7d6      	b.n	8011e48 <uxr_buffer_create_datawriter_bin+0x94>
 8011e9a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011e9e:	e7d3      	b.n	8011e48 <uxr_buffer_create_datawriter_bin+0x94>

08011ea0 <uxr_buffer_create_datareader_bin>:
 8011ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ea4:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8011ea8:	4606      	mov	r6, r0
 8011eaa:	4618      	mov	r0, r3
 8011eac:	2703      	movs	r7, #3
 8011eae:	ac1f      	add	r4, sp, #124	; 0x7c
 8011eb0:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 8011eb4:	9105      	str	r1, [sp, #20]
 8011eb6:	a9a3      	add	r1, sp, #652	; 0x28c
 8011eb8:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 8011ebc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011ec0:	2306      	movs	r3, #6
 8011ec2:	7123      	strb	r3, [r4, #4]
 8011ec4:	f000 f8c0 	bl	8012048 <uxr_object_id_to_raw>
 8011ec8:	a90e      	add	r1, sp, #56	; 0x38
 8011eca:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 8011ecc:	7227      	strb	r7, [r4, #8]
 8011ece:	f000 f8bb 	bl	8012048 <uxr_object_id_to_raw>
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8011ed8:	3d00      	subs	r5, #0
 8011eda:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 8011ede:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8011ee2:	bf18      	it	ne
 8011ee4:	2501      	movne	r5, #1
 8011ee6:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8011eea:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8011eee:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8011ef2:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8011ef6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011efa:	2301      	movs	r3, #1
 8011efc:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8011f00:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8011f04:	bb8a      	cbnz	r2, 8011f6a <uxr_buffer_create_datareader_bin+0xca>
 8011f06:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8011f0a:	f04f 0c13 	mov.w	ip, #19
 8011f0e:	250b      	movs	r5, #11
 8011f10:	2221      	movs	r2, #33	; 0x21
 8011f12:	2111      	movs	r1, #17
 8011f14:	2009      	movs	r0, #9
 8011f16:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8011f1a:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 8011f1e:	b923      	cbnz	r3, 8011f2a <uxr_buffer_create_datareader_bin+0x8a>
 8011f20:	4672      	mov	r2, lr
 8011f22:	4661      	mov	r1, ip
 8011f24:	4628      	mov	r0, r5
 8011f26:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8011f2a:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 8011f2e:	2b01      	cmp	r3, #1
 8011f30:	d025      	beq.n	8011f7e <uxr_buffer_create_datareader_bin+0xde>
 8011f32:	2b03      	cmp	r3, #3
 8011f34:	d029      	beq.n	8011f8a <uxr_buffer_create_datareader_bin+0xea>
 8011f36:	b32b      	cbz	r3, 8011f84 <uxr_buffer_create_datareader_bin+0xe4>
 8011f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011f3c:	a923      	add	r1, sp, #140	; 0x8c
 8011f3e:	a806      	add	r0, sp, #24
 8011f40:	f7ff fdb0 	bl	8011aa4 <ucdr_init_buffer>
 8011f44:	a90e      	add	r1, sp, #56	; 0x38
 8011f46:	a806      	add	r0, sp, #24
 8011f48:	f002 f88c 	bl	8014064 <uxr_serialize_OBJK_DataReader_Binary>
 8011f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011f4e:	f8cd 8000 	str.w	r8, [sp]
 8011f52:	4630      	mov	r0, r6
 8011f54:	9401      	str	r4, [sp, #4]
 8011f56:	60e3      	str	r3, [r4, #12]
 8011f58:	b29b      	uxth	r3, r3
 8011f5a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011f5e:	f7ff fe35 	bl	8011bcc <uxr_common_create_entity>
 8011f62:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8011f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f6a:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8011f6e:	f04f 0c12 	mov.w	ip, #18
 8011f72:	250a      	movs	r5, #10
 8011f74:	2220      	movs	r2, #32
 8011f76:	2110      	movs	r1, #16
 8011f78:	2008      	movs	r0, #8
 8011f7a:	2702      	movs	r7, #2
 8011f7c:	e7cd      	b.n	8011f1a <uxr_buffer_create_datareader_bin+0x7a>
 8011f7e:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8011f82:	e7d9      	b.n	8011f38 <uxr_buffer_create_datareader_bin+0x98>
 8011f84:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8011f88:	e7d6      	b.n	8011f38 <uxr_buffer_create_datareader_bin+0x98>
 8011f8a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8011f8e:	e7d3      	b.n	8011f38 <uxr_buffer_create_datareader_bin+0x98>

08011f90 <uxr_buffer_create_replier_bin>:
 8011f90:	b570      	push	{r4, r5, r6, lr}
 8011f92:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8011f96:	4605      	mov	r5, r0
 8011f98:	4618      	mov	r0, r3
 8011f9a:	9105      	str	r1, [sp, #20]
 8011f9c:	a999      	add	r1, sp, #612	; 0x264
 8011f9e:	f89d 6294 	ldrb.w	r6, [sp, #660]	; 0x294
 8011fa2:	ac15      	add	r4, sp, #84	; 0x54
 8011fa4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8011fa8:	2308      	movs	r3, #8
 8011faa:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8011fae:	f000 f84b 	bl	8012048 <uxr_object_id_to_raw>
 8011fb2:	9b9e      	ldr	r3, [sp, #632]	; 0x278
 8011fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011fb8:	a919      	add	r1, sp, #100	; 0x64
 8011fba:	a80d      	add	r0, sp, #52	; 0x34
 8011fbc:	9306      	str	r3, [sp, #24]
 8011fbe:	9b9f      	ldr	r3, [sp, #636]	; 0x27c
 8011fc0:	9307      	str	r3, [sp, #28]
 8011fc2:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 8011fc4:	9308      	str	r3, [sp, #32]
 8011fc6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8011fc8:	930c      	str	r3, [sp, #48]	; 0x30
 8011fca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8011fcc:	930a      	str	r3, [sp, #40]	; 0x28
 8011fce:	2301      	movs	r3, #1
 8011fd0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8011fd4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8011fd8:	2303      	movs	r3, #3
 8011fda:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8011fde:	f7ff fd61 	bl	8011aa4 <ucdr_init_buffer>
 8011fe2:	a906      	add	r1, sp, #24
 8011fe4:	a80d      	add	r0, sp, #52	; 0x34
 8011fe6:	f002 f8a5 	bl	8014134 <uxr_serialize_OBJK_Replier_Binary>
 8011fea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011fec:	4628      	mov	r0, r5
 8011fee:	9600      	str	r6, [sp, #0]
 8011ff0:	9318      	str	r3, [sp, #96]	; 0x60
 8011ff2:	b29b      	uxth	r3, r3
 8011ff4:	9401      	str	r4, [sp, #4]
 8011ff6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8011ffa:	f7ff fde7 	bl	8011bcc <uxr_common_create_entity>
 8011ffe:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
 8012002:	bd70      	pop	{r4, r5, r6, pc}

08012004 <uxr_object_id>:
 8012004:	b082      	sub	sp, #8
 8012006:	2300      	movs	r3, #0
 8012008:	f88d 1006 	strb.w	r1, [sp, #6]
 801200c:	f360 030f 	bfi	r3, r0, #0, #16
 8012010:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012014:	f362 431f 	bfi	r3, r2, #16, #16
 8012018:	4618      	mov	r0, r3
 801201a:	b002      	add	sp, #8
 801201c:	4770      	bx	lr
 801201e:	bf00      	nop

08012020 <uxr_object_id_from_raw>:
 8012020:	7843      	ldrb	r3, [r0, #1]
 8012022:	b082      	sub	sp, #8
 8012024:	7801      	ldrb	r1, [r0, #0]
 8012026:	2000      	movs	r0, #0
 8012028:	091a      	lsrs	r2, r3, #4
 801202a:	f003 030f 	and.w	r3, r3, #15
 801202e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8012032:	f88d 3006 	strb.w	r3, [sp, #6]
 8012036:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801203a:	f362 000f 	bfi	r0, r2, #0, #16
 801203e:	f363 401f 	bfi	r0, r3, #16, #16
 8012042:	b002      	add	sp, #8
 8012044:	4770      	bx	lr
 8012046:	bf00      	nop

08012048 <uxr_object_id_to_raw>:
 8012048:	4602      	mov	r2, r0
 801204a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801204e:	b082      	sub	sp, #8
 8012050:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8012054:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8012058:	f881 c000 	strb.w	ip, [r1]
 801205c:	7048      	strb	r0, [r1, #1]
 801205e:	b002      	add	sp, #8
 8012060:	4770      	bx	lr
 8012062:	bf00      	nop

08012064 <on_get_fragmentation_info>:
 8012064:	b500      	push	{lr}
 8012066:	b08b      	sub	sp, #44	; 0x2c
 8012068:	4601      	mov	r1, r0
 801206a:	2204      	movs	r2, #4
 801206c:	a802      	add	r0, sp, #8
 801206e:	f7ff fd19 	bl	8011aa4 <ucdr_init_buffer>
 8012072:	f10d 0305 	add.w	r3, sp, #5
 8012076:	f10d 0206 	add.w	r2, sp, #6
 801207a:	a901      	add	r1, sp, #4
 801207c:	a802      	add	r0, sp, #8
 801207e:	f001 f9e1 	bl	8013444 <uxr_read_submessage_header>
 8012082:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012086:	2b0d      	cmp	r3, #13
 8012088:	d003      	beq.n	8012092 <on_get_fragmentation_info+0x2e>
 801208a:	2000      	movs	r0, #0
 801208c:	b00b      	add	sp, #44	; 0x2c
 801208e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012092:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012096:	f013 0f02 	tst.w	r3, #2
 801209a:	bf14      	ite	ne
 801209c:	2002      	movne	r0, #2
 801209e:	2001      	moveq	r0, #1
 80120a0:	b00b      	add	sp, #44	; 0x2c
 80120a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80120a6:	bf00      	nop

080120a8 <read_submessage_get_info>:
 80120a8:	b570      	push	{r4, r5, r6, lr}
 80120aa:	2500      	movs	r5, #0
 80120ac:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 80120b0:	460e      	mov	r6, r1
 80120b2:	4604      	mov	r4, r0
 80120b4:	f44f 7224 	mov.w	r2, #656	; 0x290
 80120b8:	4629      	mov	r1, r5
 80120ba:	a810      	add	r0, sp, #64	; 0x40
 80120bc:	9503      	str	r5, [sp, #12]
 80120be:	9504      	str	r5, [sp, #16]
 80120c0:	f00b fd28 	bl	801db14 <memset>
 80120c4:	a903      	add	r1, sp, #12
 80120c6:	4630      	mov	r0, r6
 80120c8:	f002 faaa 	bl	8014620 <uxr_deserialize_GET_INFO_Payload>
 80120cc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80120d0:	4620      	mov	r0, r4
 80120d2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80120d6:	f001 f823 	bl	8013120 <uxr_session_header_offset>
 80120da:	462b      	mov	r3, r5
 80120dc:	220c      	movs	r2, #12
 80120de:	a905      	add	r1, sp, #20
 80120e0:	9000      	str	r0, [sp, #0]
 80120e2:	a808      	add	r0, sp, #32
 80120e4:	f7ff fccc 	bl	8011a80 <ucdr_init_buffer_origin_offset>
 80120e8:	a910      	add	r1, sp, #64	; 0x40
 80120ea:	a808      	add	r0, sp, #32
 80120ec:	f002 fb0c 	bl	8014708 <uxr_serialize_INFO_Payload>
 80120f0:	9b08      	ldr	r3, [sp, #32]
 80120f2:	462a      	mov	r2, r5
 80120f4:	4629      	mov	r1, r5
 80120f6:	4620      	mov	r0, r4
 80120f8:	f000 ffbe 	bl	8013078 <uxr_stamp_session_header>
 80120fc:	a808      	add	r0, sp, #32
 80120fe:	f7ff fcff 	bl	8011b00 <ucdr_buffer_length>
 8012102:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012104:	4602      	mov	r2, r0
 8012106:	a905      	add	r1, sp, #20
 8012108:	e9d3 0400 	ldrd	r0, r4, [r3]
 801210c:	47a0      	blx	r4
 801210e:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 8012112:	bd70      	pop	{r4, r5, r6, pc}

08012114 <write_submessage_acknack.isra.0>:
 8012114:	b570      	push	{r4, r5, r6, lr}
 8012116:	b092      	sub	sp, #72	; 0x48
 8012118:	4605      	mov	r5, r0
 801211a:	460e      	mov	r6, r1
 801211c:	4614      	mov	r4, r2
 801211e:	f000 ffff 	bl	8013120 <uxr_session_header_offset>
 8012122:	a905      	add	r1, sp, #20
 8012124:	9000      	str	r0, [sp, #0]
 8012126:	2300      	movs	r3, #0
 8012128:	a80a      	add	r0, sp, #40	; 0x28
 801212a:	2211      	movs	r2, #17
 801212c:	f7ff fca8 	bl	8011a80 <ucdr_init_buffer_origin_offset>
 8012130:	2218      	movs	r2, #24
 8012132:	2300      	movs	r3, #0
 8012134:	210a      	movs	r1, #10
 8012136:	fb02 5404 	mla	r4, r2, r4, r5
 801213a:	a80a      	add	r0, sp, #40	; 0x28
 801213c:	2205      	movs	r2, #5
 801213e:	3450      	adds	r4, #80	; 0x50
 8012140:	f001 f966 	bl	8013410 <uxr_buffer_submessage_header>
 8012144:	a903      	add	r1, sp, #12
 8012146:	4620      	mov	r0, r4
 8012148:	f009 f874 	bl	801b234 <uxr_compute_acknack>
 801214c:	ba40      	rev16	r0, r0
 801214e:	a903      	add	r1, sp, #12
 8012150:	f88d 6010 	strb.w	r6, [sp, #16]
 8012154:	f8ad 000e 	strh.w	r0, [sp, #14]
 8012158:	a80a      	add	r0, sp, #40	; 0x28
 801215a:	f002 fb47 	bl	80147ec <uxr_serialize_ACKNACK_Payload>
 801215e:	2200      	movs	r2, #0
 8012160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012162:	4628      	mov	r0, r5
 8012164:	4611      	mov	r1, r2
 8012166:	f000 ff87 	bl	8013078 <uxr_stamp_session_header>
 801216a:	a80a      	add	r0, sp, #40	; 0x28
 801216c:	f7ff fcc8 	bl	8011b00 <ucdr_buffer_length>
 8012170:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8012172:	4602      	mov	r2, r0
 8012174:	a905      	add	r1, sp, #20
 8012176:	e9d3 0400 	ldrd	r0, r4, [r3]
 801217a:	47a0      	blx	r4
 801217c:	b012      	add	sp, #72	; 0x48
 801217e:	bd70      	pop	{r4, r5, r6, pc}

08012180 <uxr_init_session>:
 8012180:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80121b8 <uxr_init_session+0x38>
 8012184:	2300      	movs	r3, #0
 8012186:	b510      	push	{r4, lr}
 8012188:	4604      	mov	r4, r0
 801218a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 801218e:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 8012192:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 8012196:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 801219a:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 801219e:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 80121a2:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 80121a6:	2181      	movs	r1, #129	; 0x81
 80121a8:	f000 feca 	bl	8012f40 <uxr_init_session_info>
 80121ac:	f104 0008 	add.w	r0, r4, #8
 80121b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121b4:	f001 b848 	b.w	8013248 <uxr_init_stream_storage>
	...

080121c0 <uxr_set_status_callback>:
 80121c0:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 80121c4:	4770      	bx	lr
 80121c6:	bf00      	nop

080121c8 <uxr_set_topic_callback>:
 80121c8:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 80121cc:	4770      	bx	lr
 80121ce:	bf00      	nop

080121d0 <uxr_set_request_callback>:
 80121d0:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 80121d4:	4770      	bx	lr
 80121d6:	bf00      	nop

080121d8 <uxr_set_reply_callback>:
 80121d8:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 80121dc:	4770      	bx	lr
 80121de:	bf00      	nop

080121e0 <uxr_create_output_best_effort_stream>:
 80121e0:	b510      	push	{r4, lr}
 80121e2:	4604      	mov	r4, r0
 80121e4:	b084      	sub	sp, #16
 80121e6:	e9cd 2100 	strd	r2, r1, [sp]
 80121ea:	f000 ff99 	bl	8013120 <uxr_session_header_offset>
 80121ee:	4603      	mov	r3, r0
 80121f0:	f104 0008 	add.w	r0, r4, #8
 80121f4:	e9dd 2100 	ldrd	r2, r1, [sp]
 80121f8:	b004      	add	sp, #16
 80121fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121fe:	f001 b869 	b.w	80132d4 <uxr_add_output_best_effort_buffer>
 8012202:	bf00      	nop

08012204 <uxr_create_output_reliable_stream>:
 8012204:	b530      	push	{r4, r5, lr}
 8012206:	b089      	sub	sp, #36	; 0x24
 8012208:	4604      	mov	r4, r0
 801220a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801220e:	9303      	str	r3, [sp, #12]
 8012210:	f000 ff86 	bl	8013120 <uxr_session_header_offset>
 8012214:	4605      	mov	r5, r0
 8012216:	9905      	ldr	r1, [sp, #20]
 8012218:	f104 0008 	add.w	r0, r4, #8
 801221c:	9500      	str	r5, [sp, #0]
 801221e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8012222:	f001 f86b 	bl	80132fc <uxr_add_output_reliable_buffer>
 8012226:	2200      	movs	r2, #0
 8012228:	fa5f fc80 	uxtb.w	ip, r0
 801222c:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8012230:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8012234:	0e03      	lsrs	r3, r0, #24
 8012236:	f36c 0207 	bfi	r2, ip, #0, #8
 801223a:	f364 220f 	bfi	r2, r4, #8, #8
 801223e:	f361 4217 	bfi	r2, r1, #16, #8
 8012242:	f363 621f 	bfi	r2, r3, #24, #8
 8012246:	4610      	mov	r0, r2
 8012248:	b009      	add	sp, #36	; 0x24
 801224a:	bd30      	pop	{r4, r5, pc}

0801224c <uxr_create_input_best_effort_stream>:
 801224c:	b082      	sub	sp, #8
 801224e:	3008      	adds	r0, #8
 8012250:	b002      	add	sp, #8
 8012252:	f001 b86d 	b.w	8013330 <uxr_add_input_best_effort_buffer>
 8012256:	bf00      	nop

08012258 <uxr_create_input_reliable_stream>:
 8012258:	b510      	push	{r4, lr}
 801225a:	4c0c      	ldr	r4, [pc, #48]	; (801228c <uxr_create_input_reliable_stream+0x34>)
 801225c:	b084      	sub	sp, #16
 801225e:	3008      	adds	r0, #8
 8012260:	9400      	str	r4, [sp, #0]
 8012262:	f001 f87b 	bl	801335c <uxr_add_input_reliable_buffer>
 8012266:	2200      	movs	r2, #0
 8012268:	fa5f fe80 	uxtb.w	lr, r0
 801226c:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8012270:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8012274:	0e03      	lsrs	r3, r0, #24
 8012276:	f36e 0207 	bfi	r2, lr, #0, #8
 801227a:	f36c 220f 	bfi	r2, ip, #8, #8
 801227e:	f361 4217 	bfi	r2, r1, #16, #8
 8012282:	f363 621f 	bfi	r2, r3, #24, #8
 8012286:	4610      	mov	r0, r2
 8012288:	b004      	add	sp, #16
 801228a:	bd10      	pop	{r4, pc}
 801228c:	08012065 	.word	0x08012065

08012290 <uxr_epoch_nanos>:
 8012290:	b510      	push	{r4, lr}
 8012292:	4604      	mov	r4, r0
 8012294:	f001 f91e 	bl	80134d4 <uxr_nanos>
 8012298:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 801229c:	1ac0      	subs	r0, r0, r3
 801229e:	eb61 0102 	sbc.w	r1, r1, r2
 80122a2:	bd10      	pop	{r4, pc}

080122a4 <uxr_flash_output_streams>:
 80122a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122a8:	7e03      	ldrb	r3, [r0, #24]
 80122aa:	b084      	sub	sp, #16
 80122ac:	4604      	mov	r4, r0
 80122ae:	b1fb      	cbz	r3, 80122f0 <uxr_flash_output_streams+0x4c>
 80122b0:	f04f 0900 	mov.w	r9, #0
 80122b4:	f10d 0802 	add.w	r8, sp, #2
 80122b8:	af03      	add	r7, sp, #12
 80122ba:	ae02      	add	r6, sp, #8
 80122bc:	4648      	mov	r0, r9
 80122be:	2201      	movs	r2, #1
 80122c0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 80122c4:	4611      	mov	r1, r2
 80122c6:	3508      	adds	r5, #8
 80122c8:	f000 ff64 	bl	8013194 <uxr_stream_id>
 80122cc:	4684      	mov	ip, r0
 80122ce:	4643      	mov	r3, r8
 80122d0:	463a      	mov	r2, r7
 80122d2:	4631      	mov	r1, r6
 80122d4:	4628      	mov	r0, r5
 80122d6:	f8cd c004 	str.w	ip, [sp, #4]
 80122da:	f009 f835 	bl	801b348 <uxr_prepare_best_effort_buffer_to_send>
 80122de:	2800      	cmp	r0, #0
 80122e0:	d13d      	bne.n	801235e <uxr_flash_output_streams+0xba>
 80122e2:	f109 0901 	add.w	r9, r9, #1
 80122e6:	7e23      	ldrb	r3, [r4, #24]
 80122e8:	fa5f f089 	uxtb.w	r0, r9
 80122ec:	4283      	cmp	r3, r0
 80122ee:	d8e6      	bhi.n	80122be <uxr_flash_output_streams+0x1a>
 80122f0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80122f4:	b383      	cbz	r3, 8012358 <uxr_flash_output_streams+0xb4>
 80122f6:	f04f 0900 	mov.w	r9, #0
 80122fa:	f10d 0802 	add.w	r8, sp, #2
 80122fe:	af03      	add	r7, sp, #12
 8012300:	ae02      	add	r6, sp, #8
 8012302:	4648      	mov	r0, r9
 8012304:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8012308:	2201      	movs	r2, #1
 801230a:	2102      	movs	r1, #2
 801230c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8012310:	f000 ff40 	bl	8013194 <uxr_stream_id>
 8012314:	9001      	str	r0, [sp, #4]
 8012316:	3520      	adds	r5, #32
 8012318:	e00c      	b.n	8012334 <uxr_flash_output_streams+0x90>
 801231a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801231e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012322:	9b02      	ldr	r3, [sp, #8]
 8012324:	f000 fea8 	bl	8013078 <uxr_stamp_session_header>
 8012328:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801232a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801232e:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8012332:	47d0      	blx	sl
 8012334:	4643      	mov	r3, r8
 8012336:	463a      	mov	r2, r7
 8012338:	4631      	mov	r1, r6
 801233a:	4628      	mov	r0, r5
 801233c:	f009 fa28 	bl	801b790 <uxr_prepare_next_reliable_buffer_to_send>
 8012340:	4603      	mov	r3, r0
 8012342:	4620      	mov	r0, r4
 8012344:	2b00      	cmp	r3, #0
 8012346:	d1e8      	bne.n	801231a <uxr_flash_output_streams+0x76>
 8012348:	f109 0901 	add.w	r9, r9, #1
 801234c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8012350:	fa5f f089 	uxtb.w	r0, r9
 8012354:	4283      	cmp	r3, r0
 8012356:	d8d5      	bhi.n	8012304 <uxr_flash_output_streams+0x60>
 8012358:	b004      	add	sp, #16
 801235a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801235e:	9b02      	ldr	r3, [sp, #8]
 8012360:	4620      	mov	r0, r4
 8012362:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012366:	f109 0901 	add.w	r9, r9, #1
 801236a:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801236e:	f000 fe83 	bl	8013078 <uxr_stamp_session_header>
 8012372:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012374:	9a03      	ldr	r2, [sp, #12]
 8012376:	685d      	ldr	r5, [r3, #4]
 8012378:	6818      	ldr	r0, [r3, #0]
 801237a:	9902      	ldr	r1, [sp, #8]
 801237c:	47a8      	blx	r5
 801237e:	7e23      	ldrb	r3, [r4, #24]
 8012380:	fa5f f089 	uxtb.w	r0, r9
 8012384:	4283      	cmp	r3, r0
 8012386:	d89a      	bhi.n	80122be <uxr_flash_output_streams+0x1a>
 8012388:	e7b2      	b.n	80122f0 <uxr_flash_output_streams+0x4c>
 801238a:	bf00      	nop

0801238c <read_submessage_info>:
 801238c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012390:	460d      	mov	r5, r1
 8012392:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8012396:	4606      	mov	r6, r0
 8012398:	4669      	mov	r1, sp
 801239a:	4628      	mov	r0, r5
 801239c:	f002 f852 	bl	8014444 <uxr_deserialize_BaseObjectReply>
 80123a0:	4604      	mov	r4, r0
 80123a2:	a902      	add	r1, sp, #8
 80123a4:	4628      	mov	r0, r5
 80123a6:	f89d 7005 	ldrb.w	r7, [sp, #5]
 80123aa:	f7fd fed3 	bl	8010154 <ucdr_deserialize_bool>
 80123ae:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80123b2:	4004      	ands	r4, r0
 80123b4:	b2e4      	uxtb	r4, r4
 80123b6:	b95b      	cbnz	r3, 80123d0 <read_submessage_info+0x44>
 80123b8:	a987      	add	r1, sp, #540	; 0x21c
 80123ba:	4628      	mov	r0, r5
 80123bc:	f7fd feca 	bl	8010154 <ucdr_deserialize_bool>
 80123c0:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 80123c4:	4680      	mov	r8, r0
 80123c6:	b94b      	cbnz	r3, 80123dc <read_submessage_info+0x50>
 80123c8:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 80123cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123d0:	a903      	add	r1, sp, #12
 80123d2:	4628      	mov	r0, r5
 80123d4:	f001 fee2 	bl	801419c <uxr_deserialize_ObjectVariant>
 80123d8:	4004      	ands	r4, r0
 80123da:	e7ed      	b.n	80123b8 <read_submessage_info+0x2c>
 80123dc:	a988      	add	r1, sp, #544	; 0x220
 80123de:	4628      	mov	r0, r5
 80123e0:	f7fd fee6 	bl	80101b0 <ucdr_deserialize_uint8_t>
 80123e4:	ea14 0f08 	tst.w	r4, r8
 80123e8:	d0ee      	beq.n	80123c8 <read_submessage_info+0x3c>
 80123ea:	2800      	cmp	r0, #0
 80123ec:	d0ec      	beq.n	80123c8 <read_submessage_info+0x3c>
 80123ee:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 80123f2:	2b0d      	cmp	r3, #13
 80123f4:	d1e8      	bne.n	80123c8 <read_submessage_info+0x3c>
 80123f6:	a98a      	add	r1, sp, #552	; 0x228
 80123f8:	4628      	mov	r0, r5
 80123fa:	f7fe fcff 	bl	8010dfc <ucdr_deserialize_int16_t>
 80123fe:	b138      	cbz	r0, 8012410 <read_submessage_info+0x84>
 8012400:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 8012404:	2b00      	cmp	r3, #0
 8012406:	dd06      	ble.n	8012416 <read_submessage_info+0x8a>
 8012408:	2f00      	cmp	r7, #0
 801240a:	bf14      	ite	ne
 801240c:	2001      	movne	r0, #1
 801240e:	2002      	moveq	r0, #2
 8012410:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 8012414:	e7d8      	b.n	80123c8 <read_submessage_info+0x3c>
 8012416:	2000      	movs	r0, #0
 8012418:	e7fa      	b.n	8012410 <read_submessage_info+0x84>
 801241a:	bf00      	nop

0801241c <read_submessage_list>:
 801241c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012420:	4604      	mov	r4, r0
 8012422:	b097      	sub	sp, #92	; 0x5c
 8012424:	460d      	mov	r5, r1
 8012426:	4ec1      	ldr	r6, [pc, #772]	; (801272c <read_submessage_list+0x310>)
 8012428:	9209      	str	r2, [sp, #36]	; 0x24
 801242a:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801242e:	aa0c      	add	r2, sp, #48	; 0x30
 8012430:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8012434:	4628      	mov	r0, r5
 8012436:	f001 f805 	bl	8013444 <uxr_read_submessage_header>
 801243a:	2800      	cmp	r0, #0
 801243c:	f000 8142 	beq.w	80126c4 <read_submessage_list+0x2a8>
 8012440:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8012444:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8012448:	3b02      	subs	r3, #2
 801244a:	2b0d      	cmp	r3, #13
 801244c:	d8ed      	bhi.n	801242a <read_submessage_list+0xe>
 801244e:	a101      	add	r1, pc, #4	; (adr r1, 8012454 <read_submessage_list+0x38>)
 8012450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012454:	080126bb 	.word	0x080126bb
 8012458:	0801242b 	.word	0x0801242b
 801245c:	080126ab 	.word	0x080126ab
 8012460:	08012649 	.word	0x08012649
 8012464:	0801263f 	.word	0x0801263f
 8012468:	0801242b 	.word	0x0801242b
 801246c:	0801242b 	.word	0x0801242b
 8012470:	08012595 	.word	0x08012595
 8012474:	08012527 	.word	0x08012527
 8012478:	080124e7 	.word	0x080124e7
 801247c:	0801242b 	.word	0x0801242b
 8012480:	0801242b 	.word	0x0801242b
 8012484:	0801242b 	.word	0x0801242b
 8012488:	0801248d 	.word	0x0801248d
 801248c:	a910      	add	r1, sp, #64	; 0x40
 801248e:	4628      	mov	r0, r5
 8012490:	f002 fa00 	bl	8014894 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8012494:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 8012498:	f1b8 0f00 	cmp.w	r8, #0
 801249c:	f000 811a 	beq.w	80126d4 <read_submessage_list+0x2b8>
 80124a0:	f001 f818 	bl	80134d4 <uxr_nanos>
 80124a4:	4602      	mov	r2, r0
 80124a6:	460b      	mov	r3, r1
 80124a8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 80124ac:	2100      	movs	r1, #0
 80124ae:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80124b0:	9006      	str	r0, [sp, #24]
 80124b2:	468c      	mov	ip, r1
 80124b4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80124b6:	fbc7 0c06 	smlal	r0, ip, r7, r6
 80124ba:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80124bc:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 80124c0:	468c      	mov	ip, r1
 80124c2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80124c4:	fbc7 0c06 	smlal	r0, ip, r7, r6
 80124c8:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 80124cc:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 80124d0:	fbc7 0106 	smlal	r0, r1, r7, r6
 80124d4:	e9cd 0100 	strd	r0, r1, [sp]
 80124d8:	4620      	mov	r0, r4
 80124da:	47c0      	blx	r8
 80124dc:	f04f 0301 	mov.w	r3, #1
 80124e0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 80124e4:	e7a1      	b.n	801242a <read_submessage_list+0xe>
 80124e6:	a910      	add	r1, sp, #64	; 0x40
 80124e8:	4628      	mov	r0, r5
 80124ea:	f002 f9bf 	bl	801486c <uxr_deserialize_HEARTBEAT_Payload>
 80124ee:	2100      	movs	r1, #0
 80124f0:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80124f4:	f000 fe7c 	bl	80131f0 <uxr_stream_id_from_raw>
 80124f8:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80124fc:	900f      	str	r0, [sp, #60]	; 0x3c
 80124fe:	f104 0008 	add.w	r0, r4, #8
 8012502:	4641      	mov	r1, r8
 8012504:	f000 ff62 	bl	80133cc <uxr_get_input_reliable_stream>
 8012508:	2800      	cmp	r0, #0
 801250a:	d08e      	beq.n	801242a <read_submessage_list+0xe>
 801250c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8012510:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8012514:	f008 fe82 	bl	801b21c <uxr_process_heartbeat>
 8012518:	4642      	mov	r2, r8
 801251a:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 801251e:	4620      	mov	r0, r4
 8012520:	f7ff fdf8 	bl	8012114 <write_submessage_acknack.isra.0>
 8012524:	e781      	b.n	801242a <read_submessage_list+0xe>
 8012526:	a910      	add	r1, sp, #64	; 0x40
 8012528:	4628      	mov	r0, r5
 801252a:	f002 f977 	bl	801481c <uxr_deserialize_ACKNACK_Payload>
 801252e:	2100      	movs	r1, #0
 8012530:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8012534:	f000 fe5c 	bl	80131f0 <uxr_stream_id_from_raw>
 8012538:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801253c:	900d      	str	r0, [sp, #52]	; 0x34
 801253e:	f104 0008 	add.w	r0, r4, #8
 8012542:	f000 ff2d 	bl	80133a0 <uxr_get_output_reliable_stream>
 8012546:	4680      	mov	r8, r0
 8012548:	2800      	cmp	r0, #0
 801254a:	f43f af6e 	beq.w	801242a <read_submessage_list+0xe>
 801254e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8012552:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8012556:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 801255a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801255e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8012562:	b289      	uxth	r1, r1
 8012564:	f009 f9bc 	bl	801b8e0 <uxr_process_acknack>
 8012568:	4640      	mov	r0, r8
 801256a:	f009 f97d 	bl	801b868 <uxr_begin_output_nack_buffer_it>
 801256e:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8012572:	e005      	b.n	8012580 <read_submessage_list+0x164>
 8012574:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012576:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 801257a:	e9d3 0900 	ldrd	r0, r9, [r3]
 801257e:	47c8      	blx	r9
 8012580:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8012584:	aa0f      	add	r2, sp, #60	; 0x3c
 8012586:	4651      	mov	r1, sl
 8012588:	4640      	mov	r0, r8
 801258a:	f009 f96f 	bl	801b86c <uxr_next_reliable_nack_buffer_to_send>
 801258e:	2800      	cmp	r0, #0
 8012590:	d1f0      	bne.n	8012574 <read_submessage_list+0x158>
 8012592:	e74a      	b.n	801242a <read_submessage_list+0xe>
 8012594:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8012598:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 801259c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 80125a0:	4628      	mov	r0, r5
 80125a2:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 80125a6:	4651      	mov	r1, sl
 80125a8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80125ac:	f1a8 0804 	sub.w	r8, r8, #4
 80125b0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 80125b4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 80125b8:	fa1f f888 	uxth.w	r8, r8
 80125bc:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80125c0:	f009 090e 	and.w	r9, r9, #14
 80125c4:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 80125c8:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 80125cc:	f001 fe88 	bl	80142e0 <uxr_deserialize_BaseObjectRequest>
 80125d0:	4650      	mov	r0, sl
 80125d2:	a90f      	add	r1, sp, #60	; 0x3c
 80125d4:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 80125d8:	f000 fdca 	bl	8013170 <uxr_parse_base_object_request>
 80125dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80125de:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 80125e2:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 80125e6:	9110      	str	r1, [sp, #64]	; 0x40
 80125e8:	f1bb 0f00 	cmp.w	fp, #0
 80125ec:	d006      	beq.n	80125fc <read_submessage_list+0x1e0>
 80125ee:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80125f2:	4652      	mov	r2, sl
 80125f4:	4620      	mov	r0, r4
 80125f6:	9300      	str	r3, [sp, #0]
 80125f8:	2300      	movs	r3, #0
 80125fa:	47d8      	blx	fp
 80125fc:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80125fe:	b182      	cbz	r2, 8012622 <read_submessage_list+0x206>
 8012600:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8012602:	f04f 0c00 	mov.w	ip, #0
 8012606:	3902      	subs	r1, #2
 8012608:	e003      	b.n	8012612 <read_submessage_list+0x1f6>
 801260a:	f10c 0c01 	add.w	ip, ip, #1
 801260e:	4594      	cmp	ip, r2
 8012610:	d007      	beq.n	8012622 <read_submessage_list+0x206>
 8012612:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8012616:	4553      	cmp	r3, sl
 8012618:	d1f7      	bne.n	801260a <read_submessage_list+0x1ee>
 801261a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801261c:	2200      	movs	r2, #0
 801261e:	f803 200c 	strb.w	r2, [r3, ip]
 8012622:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8012626:	464b      	mov	r3, r9
 8012628:	4642      	mov	r2, r8
 801262a:	4620      	mov	r0, r4
 801262c:	9102      	str	r1, [sp, #8]
 801262e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012630:	9101      	str	r1, [sp, #4]
 8012632:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012634:	9100      	str	r1, [sp, #0]
 8012636:	4629      	mov	r1, r5
 8012638:	f009 fa14 	bl	801ba64 <read_submessage_format>
 801263c:	e6f5      	b.n	801242a <read_submessage_list+0xe>
 801263e:	4629      	mov	r1, r5
 8012640:	4620      	mov	r0, r4
 8012642:	f7ff fea3 	bl	801238c <read_submessage_info>
 8012646:	e6f0      	b.n	801242a <read_submessage_list+0xe>
 8012648:	2a00      	cmp	r2, #0
 801264a:	d03e      	beq.n	80126ca <read_submessage_list+0x2ae>
 801264c:	a910      	add	r1, sp, #64	; 0x40
 801264e:	4628      	mov	r0, r5
 8012650:	f002 f83c 	bl	80146cc <uxr_deserialize_STATUS_Payload>
 8012654:	a90e      	add	r1, sp, #56	; 0x38
 8012656:	aa0d      	add	r2, sp, #52	; 0x34
 8012658:	a810      	add	r0, sp, #64	; 0x40
 801265a:	f000 fd89 	bl	8013170 <uxr_parse_base_object_request>
 801265e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012660:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8012664:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8012668:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 801266c:	910f      	str	r1, [sp, #60]	; 0x3c
 801266e:	f1ba 0f00 	cmp.w	sl, #0
 8012672:	d006      	beq.n	8012682 <read_submessage_list+0x266>
 8012674:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8012678:	4642      	mov	r2, r8
 801267a:	4620      	mov	r0, r4
 801267c:	9300      	str	r3, [sp, #0]
 801267e:	464b      	mov	r3, r9
 8012680:	47d0      	blx	sl
 8012682:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8012684:	2a00      	cmp	r2, #0
 8012686:	f43f aed0 	beq.w	801242a <read_submessage_list+0xe>
 801268a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801268c:	2100      	movs	r1, #0
 801268e:	3802      	subs	r0, #2
 8012690:	e003      	b.n	801269a <read_submessage_list+0x27e>
 8012692:	3101      	adds	r1, #1
 8012694:	4291      	cmp	r1, r2
 8012696:	f43f aec8 	beq.w	801242a <read_submessage_list+0xe>
 801269a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 801269e:	4543      	cmp	r3, r8
 80126a0:	d1f7      	bne.n	8012692 <read_submessage_list+0x276>
 80126a2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80126a4:	f803 9001 	strb.w	r9, [r3, r1]
 80126a8:	e6bf      	b.n	801242a <read_submessage_list+0xe>
 80126aa:	2a00      	cmp	r2, #0
 80126ac:	f47f aebd 	bne.w	801242a <read_submessage_list+0xe>
 80126b0:	4629      	mov	r1, r5
 80126b2:	4620      	mov	r0, r4
 80126b4:	f000 fca0 	bl	8012ff8 <uxr_read_create_session_status>
 80126b8:	e6b7      	b.n	801242a <read_submessage_list+0xe>
 80126ba:	4629      	mov	r1, r5
 80126bc:	4620      	mov	r0, r4
 80126be:	f7ff fcf3 	bl	80120a8 <read_submessage_get_info>
 80126c2:	e6b2      	b.n	801242a <read_submessage_list+0xe>
 80126c4:	b017      	add	sp, #92	; 0x5c
 80126c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126ca:	4629      	mov	r1, r5
 80126cc:	4620      	mov	r0, r4
 80126ce:	f000 fca1 	bl	8013014 <uxr_read_delete_session_status>
 80126d2:	e6aa      	b.n	801242a <read_submessage_list+0xe>
 80126d4:	f000 fefe 	bl	80134d4 <uxr_nanos>
 80126d8:	4642      	mov	r2, r8
 80126da:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80126dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80126de:	fbc7 3206 	smlal	r3, r2, r7, r6
 80126e2:	1818      	adds	r0, r3, r0
 80126e4:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80126e6:	eb42 0101 	adc.w	r1, r2, r1
 80126ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80126ec:	4642      	mov	r2, r8
 80126ee:	fbc7 3206 	smlal	r3, r2, r7, r6
 80126f2:	469c      	mov	ip, r3
 80126f4:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 80126f8:	fbc3 7806 	smlal	r7, r8, r3, r6
 80126fc:	4643      	mov	r3, r8
 80126fe:	eb1c 0c07 	adds.w	ip, ip, r7
 8012702:	eb42 0203 	adc.w	r2, r2, r3
 8012706:	ebb0 030c 	subs.w	r3, r0, ip
 801270a:	eb61 0202 	sbc.w	r2, r1, r2
 801270e:	2a00      	cmp	r2, #0
 8012710:	db08      	blt.n	8012724 <read_submessage_list+0x308>
 8012712:	085b      	lsrs	r3, r3, #1
 8012714:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8012718:	1052      	asrs	r2, r2, #1
 801271a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 801271e:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 8012722:	e6db      	b.n	80124dc <read_submessage_list+0xc0>
 8012724:	3301      	adds	r3, #1
 8012726:	f142 0200 	adc.w	r2, r2, #0
 801272a:	e7f2      	b.n	8012712 <read_submessage_list+0x2f6>
 801272c:	3b9aca00 	.word	0x3b9aca00

08012730 <listen_message_reliably>:
 8012730:	1e0b      	subs	r3, r1, #0
 8012732:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012736:	bfb8      	it	lt
 8012738:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 801273c:	b09d      	sub	sp, #116	; 0x74
 801273e:	4680      	mov	r8, r0
 8012740:	9305      	str	r3, [sp, #20]
 8012742:	f000 feab 	bl	801349c <uxr_millis>
 8012746:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 801274a:	4681      	mov	r9, r0
 801274c:	2a00      	cmp	r2, #0
 801274e:	f000 809a 	beq.w	8012886 <listen_message_reliably+0x156>
 8012752:	2600      	movs	r6, #0
 8012754:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012758:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 801275c:	460f      	mov	r7, r1
 801275e:	4630      	mov	r0, r6
 8012760:	9303      	str	r3, [sp, #12]
 8012762:	e00e      	b.n	8012782 <listen_message_reliably+0x52>
 8012764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012766:	3601      	adds	r6, #1
 8012768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801276a:	455a      	cmp	r2, fp
 801276c:	9903      	ldr	r1, [sp, #12]
 801276e:	b2f0      	uxtb	r0, r6
 8012770:	eb73 0101 	sbcs.w	r1, r3, r1
 8012774:	da01      	bge.n	801277a <listen_message_reliably+0x4a>
 8012776:	4693      	mov	fp, r2
 8012778:	9303      	str	r3, [sp, #12]
 801277a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 801277e:	4283      	cmp	r3, r0
 8012780:	d95f      	bls.n	8012842 <listen_message_reliably+0x112>
 8012782:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8012786:	2102      	movs	r1, #2
 8012788:	2201      	movs	r2, #1
 801278a:	00e4      	lsls	r4, r4, #3
 801278c:	f000 fd02 	bl	8013194 <uxr_stream_id>
 8012790:	4601      	mov	r1, r0
 8012792:	f104 0520 	add.w	r5, r4, #32
 8012796:	463b      	mov	r3, r7
 8012798:	464a      	mov	r2, r9
 801279a:	9109      	str	r1, [sp, #36]	; 0x24
 801279c:	4445      	add	r5, r8
 801279e:	4628      	mov	r0, r5
 80127a0:	f009 f836 	bl	801b810 <uxr_update_output_stream_heartbeat_timestamp>
 80127a4:	eb08 0304 	add.w	r3, r8, r4
 80127a8:	2800      	cmp	r0, #0
 80127aa:	d0db      	beq.n	8012764 <listen_message_reliably+0x34>
 80127ac:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 80127b0:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 80127b4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80127b8:	4640      	mov	r0, r8
 80127ba:	3501      	adds	r5, #1
 80127bc:	4444      	add	r4, r8
 80127be:	9304      	str	r3, [sp, #16]
 80127c0:	f000 fcae 	bl	8013120 <uxr_session_header_offset>
 80127c4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80127c8:	2300      	movs	r3, #0
 80127ca:	2211      	movs	r2, #17
 80127cc:	a90c      	add	r1, sp, #48	; 0x30
 80127ce:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80127d2:	9000      	str	r0, [sp, #0]
 80127d4:	4650      	mov	r0, sl
 80127d6:	3601      	adds	r6, #1
 80127d8:	f7ff f952 	bl	8011a80 <ucdr_init_buffer_origin_offset>
 80127dc:	2300      	movs	r3, #0
 80127de:	2205      	movs	r2, #5
 80127e0:	210b      	movs	r1, #11
 80127e2:	4650      	mov	r0, sl
 80127e4:	f000 fe14 	bl	8013410 <uxr_buffer_submessage_header>
 80127e8:	2101      	movs	r1, #1
 80127ea:	8968      	ldrh	r0, [r5, #10]
 80127ec:	f009 fa04 	bl	801bbf8 <uxr_seq_num_add>
 80127f0:	892b      	ldrh	r3, [r5, #8]
 80127f2:	4602      	mov	r2, r0
 80127f4:	a90a      	add	r1, sp, #40	; 0x28
 80127f6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80127fa:	4650      	mov	r0, sl
 80127fc:	9b04      	ldr	r3, [sp, #16]
 80127fe:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8012802:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8012806:	f002 f81d 	bl	8014844 <uxr_serialize_HEARTBEAT_Payload>
 801280a:	2200      	movs	r2, #0
 801280c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801280e:	4640      	mov	r0, r8
 8012810:	4611      	mov	r1, r2
 8012812:	f000 fc31 	bl	8013078 <uxr_stamp_session_header>
 8012816:	4650      	mov	r0, sl
 8012818:	f7ff f972 	bl	8011b00 <ucdr_buffer_length>
 801281c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8012820:	4602      	mov	r2, r0
 8012822:	a90c      	add	r1, sp, #48	; 0x30
 8012824:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012828:	47a8      	blx	r5
 801282a:	9903      	ldr	r1, [sp, #12]
 801282c:	b2f0      	uxtb	r0, r6
 801282e:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8012832:	455a      	cmp	r2, fp
 8012834:	eb73 0101 	sbcs.w	r1, r3, r1
 8012838:	db9d      	blt.n	8012776 <listen_message_reliably+0x46>
 801283a:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 801283e:	4283      	cmp	r3, r0
 8012840:	d89f      	bhi.n	8012782 <listen_message_reliably+0x52>
 8012842:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8012846:	9a03      	ldr	r2, [sp, #12]
 8012848:	429a      	cmp	r2, r3
 801284a:	bf08      	it	eq
 801284c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 8012850:	d019      	beq.n	8012886 <listen_message_reliably+0x156>
 8012852:	ebab 0309 	sub.w	r3, fp, r9
 8012856:	2b00      	cmp	r3, #0
 8012858:	9d05      	ldr	r5, [sp, #20]
 801285a:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 801285e:	aa08      	add	r2, sp, #32
 8012860:	bf08      	it	eq
 8012862:	2301      	moveq	r3, #1
 8012864:	a907      	add	r1, sp, #28
 8012866:	6884      	ldr	r4, [r0, #8]
 8012868:	429d      	cmp	r5, r3
 801286a:	6800      	ldr	r0, [r0, #0]
 801286c:	bfa8      	it	ge
 801286e:	461d      	movge	r5, r3
 8012870:	462b      	mov	r3, r5
 8012872:	47a0      	blx	r4
 8012874:	b948      	cbnz	r0, 801288a <listen_message_reliably+0x15a>
 8012876:	9b05      	ldr	r3, [sp, #20]
 8012878:	1b5b      	subs	r3, r3, r5
 801287a:	2b00      	cmp	r3, #0
 801287c:	9305      	str	r3, [sp, #20]
 801287e:	f73f af60 	bgt.w	8012742 <listen_message_reliably+0x12>
 8012882:	4604      	mov	r4, r0
 8012884:	e012      	b.n	80128ac <listen_message_reliably+0x17c>
 8012886:	9b05      	ldr	r3, [sp, #20]
 8012888:	e7e5      	b.n	8012856 <listen_message_reliably+0x126>
 801288a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 801288e:	4604      	mov	r4, r0
 8012890:	2500      	movs	r5, #0
 8012892:	a80c      	add	r0, sp, #48	; 0x30
 8012894:	f7ff f906 	bl	8011aa4 <ucdr_init_buffer>
 8012898:	f10d 031a 	add.w	r3, sp, #26
 801289c:	aa06      	add	r2, sp, #24
 801289e:	a90c      	add	r1, sp, #48	; 0x30
 80128a0:	4640      	mov	r0, r8
 80128a2:	f88d 5018 	strb.w	r5, [sp, #24]
 80128a6:	f000 fbfb 	bl	80130a0 <uxr_read_session_header>
 80128aa:	b918      	cbnz	r0, 80128b4 <listen_message_reliably+0x184>
 80128ac:	4620      	mov	r0, r4
 80128ae:	b01d      	add	sp, #116	; 0x74
 80128b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128b4:	4629      	mov	r1, r5
 80128b6:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80128ba:	f000 fc99 	bl	80131f0 <uxr_stream_id_from_raw>
 80128be:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80128c2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 80128c6:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80128ca:	2e01      	cmp	r6, #1
 80128cc:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 80128d0:	d04b      	beq.n	801296a <listen_message_reliably+0x23a>
 80128d2:	2e02      	cmp	r6, #2
 80128d4:	d00f      	beq.n	80128f6 <listen_message_reliably+0x1c6>
 80128d6:	2e00      	cmp	r6, #0
 80128d8:	d1e8      	bne.n	80128ac <listen_message_reliably+0x17c>
 80128da:	4631      	mov	r1, r6
 80128dc:	4630      	mov	r0, r6
 80128de:	f000 fc87 	bl	80131f0 <uxr_stream_id_from_raw>
 80128e2:	4602      	mov	r2, r0
 80128e4:	a90c      	add	r1, sp, #48	; 0x30
 80128e6:	4640      	mov	r0, r8
 80128e8:	920a      	str	r2, [sp, #40]	; 0x28
 80128ea:	f7ff fd97 	bl	801241c <read_submessage_list>
 80128ee:	4620      	mov	r0, r4
 80128f0:	b01d      	add	sp, #116	; 0x74
 80128f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128f6:	4629      	mov	r1, r5
 80128f8:	f108 0008 	add.w	r0, r8, #8
 80128fc:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8012900:	f000 fd64 	bl	80133cc <uxr_get_input_reliable_stream>
 8012904:	4607      	mov	r7, r0
 8012906:	b338      	cbz	r0, 8012958 <listen_message_reliably+0x228>
 8012908:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801290a:	a80c      	add	r0, sp, #48	; 0x30
 801290c:	9203      	str	r2, [sp, #12]
 801290e:	f7ff f8fb 	bl	8011b08 <ucdr_buffer_remaining>
 8012912:	4603      	mov	r3, r0
 8012914:	f10d 0019 	add.w	r0, sp, #25
 8012918:	9a03      	ldr	r2, [sp, #12]
 801291a:	4651      	mov	r1, sl
 801291c:	9000      	str	r0, [sp, #0]
 801291e:	4638      	mov	r0, r7
 8012920:	f008 fb80 	bl	801b024 <uxr_receive_reliable_message>
 8012924:	b1c0      	cbz	r0, 8012958 <listen_message_reliably+0x228>
 8012926:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801292a:	b393      	cbz	r3, 8012992 <listen_message_reliably+0x262>
 801292c:	ae14      	add	r6, sp, #80	; 0x50
 801292e:	f04f 0a02 	mov.w	sl, #2
 8012932:	e00a      	b.n	801294a <listen_message_reliably+0x21a>
 8012934:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 8012938:	4631      	mov	r1, r6
 801293a:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 801293e:	4640      	mov	r0, r8
 8012940:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8012944:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012946:	f7ff fd69 	bl	801241c <read_submessage_list>
 801294a:	2204      	movs	r2, #4
 801294c:	4631      	mov	r1, r6
 801294e:	4638      	mov	r0, r7
 8012950:	f008 fbea 	bl	801b128 <uxr_next_input_reliable_buffer_available>
 8012954:	2800      	cmp	r0, #0
 8012956:	d1ed      	bne.n	8012934 <listen_message_reliably+0x204>
 8012958:	4640      	mov	r0, r8
 801295a:	462a      	mov	r2, r5
 801295c:	4649      	mov	r1, r9
 801295e:	f7ff fbd9 	bl	8012114 <write_submessage_acknack.isra.0>
 8012962:	4620      	mov	r0, r4
 8012964:	b01d      	add	sp, #116	; 0x74
 8012966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801296a:	4629      	mov	r1, r5
 801296c:	f108 0008 	add.w	r0, r8, #8
 8012970:	f000 fd22 	bl	80133b8 <uxr_get_input_best_effort_stream>
 8012974:	2800      	cmp	r0, #0
 8012976:	d099      	beq.n	80128ac <listen_message_reliably+0x17c>
 8012978:	4651      	mov	r1, sl
 801297a:	f008 fac9 	bl	801af10 <uxr_receive_best_effort_message>
 801297e:	2800      	cmp	r0, #0
 8012980:	d094      	beq.n	80128ac <listen_message_reliably+0x17c>
 8012982:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8012986:	a90c      	add	r1, sp, #48	; 0x30
 8012988:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801298a:	4640      	mov	r0, r8
 801298c:	f7ff fd46 	bl	801241c <read_submessage_list>
 8012990:	e78c      	b.n	80128ac <listen_message_reliably+0x17c>
 8012992:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8012996:	a90c      	add	r1, sp, #48	; 0x30
 8012998:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801299a:	4640      	mov	r0, r8
 801299c:	f7ff fd3e 	bl	801241c <read_submessage_list>
 80129a0:	e7c4      	b.n	801292c <listen_message_reliably+0x1fc>
 80129a2:	bf00      	nop

080129a4 <uxr_run_session_timeout>:
 80129a4:	b570      	push	{r4, r5, r6, lr}
 80129a6:	4604      	mov	r4, r0
 80129a8:	460d      	mov	r5, r1
 80129aa:	f000 fd77 	bl	801349c <uxr_millis>
 80129ae:	4606      	mov	r6, r0
 80129b0:	4620      	mov	r0, r4
 80129b2:	f7ff fc77 	bl	80122a4 <uxr_flash_output_streams>
 80129b6:	4629      	mov	r1, r5
 80129b8:	4620      	mov	r0, r4
 80129ba:	f7ff feb9 	bl	8012730 <listen_message_reliably>
 80129be:	f000 fd6d 	bl	801349c <uxr_millis>
 80129c2:	1b83      	subs	r3, r0, r6
 80129c4:	1ae9      	subs	r1, r5, r3
 80129c6:	2900      	cmp	r1, #0
 80129c8:	dcf6      	bgt.n	80129b8 <uxr_run_session_timeout+0x14>
 80129ca:	f104 0008 	add.w	r0, r4, #8
 80129ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80129d2:	f000 bd07 	b.w	80133e4 <uxr_output_streams_confirmed>
 80129d6:	bf00      	nop

080129d8 <uxr_run_session_until_data>:
 80129d8:	b570      	push	{r4, r5, r6, lr}
 80129da:	4604      	mov	r4, r0
 80129dc:	460d      	mov	r5, r1
 80129de:	f000 fd5d 	bl	801349c <uxr_millis>
 80129e2:	4606      	mov	r6, r0
 80129e4:	4620      	mov	r0, r4
 80129e6:	f7ff fc5d 	bl	80122a4 <uxr_flash_output_streams>
 80129ea:	2300      	movs	r3, #0
 80129ec:	4629      	mov	r1, r5
 80129ee:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 80129f2:	e005      	b.n	8012a00 <uxr_run_session_until_data+0x28>
 80129f4:	f000 fd52 	bl	801349c <uxr_millis>
 80129f8:	1b83      	subs	r3, r0, r6
 80129fa:	1ae9      	subs	r1, r5, r3
 80129fc:	2900      	cmp	r1, #0
 80129fe:	dd07      	ble.n	8012a10 <uxr_run_session_until_data+0x38>
 8012a00:	4620      	mov	r0, r4
 8012a02:	f7ff fe95 	bl	8012730 <listen_message_reliably>
 8012a06:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8012a0a:	2800      	cmp	r0, #0
 8012a0c:	d0f2      	beq.n	80129f4 <uxr_run_session_until_data+0x1c>
 8012a0e:	bd70      	pop	{r4, r5, r6, pc}
 8012a10:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8012a14:	bd70      	pop	{r4, r5, r6, pc}
 8012a16:	bf00      	nop

08012a18 <uxr_run_session_until_confirm_delivery>:
 8012a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a1c:	4606      	mov	r6, r0
 8012a1e:	460d      	mov	r5, r1
 8012a20:	f000 fd3c 	bl	801349c <uxr_millis>
 8012a24:	4607      	mov	r7, r0
 8012a26:	4630      	mov	r0, r6
 8012a28:	f106 0808 	add.w	r8, r6, #8
 8012a2c:	f7ff fc3a 	bl	80122a4 <uxr_flash_output_streams>
 8012a30:	2d00      	cmp	r5, #0
 8012a32:	db10      	blt.n	8012a56 <uxr_run_session_until_confirm_delivery+0x3e>
 8012a34:	462c      	mov	r4, r5
 8012a36:	e006      	b.n	8012a46 <uxr_run_session_until_confirm_delivery+0x2e>
 8012a38:	f7ff fe7a 	bl	8012730 <listen_message_reliably>
 8012a3c:	f000 fd2e 	bl	801349c <uxr_millis>
 8012a40:	1bc3      	subs	r3, r0, r7
 8012a42:	1aec      	subs	r4, r5, r3
 8012a44:	d407      	bmi.n	8012a56 <uxr_run_session_until_confirm_delivery+0x3e>
 8012a46:	4640      	mov	r0, r8
 8012a48:	f000 fccc 	bl	80133e4 <uxr_output_streams_confirmed>
 8012a4c:	4603      	mov	r3, r0
 8012a4e:	4621      	mov	r1, r4
 8012a50:	4630      	mov	r0, r6
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d0f0      	beq.n	8012a38 <uxr_run_session_until_confirm_delivery+0x20>
 8012a56:	4640      	mov	r0, r8
 8012a58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a5c:	f000 bcc2 	b.w	80133e4 <uxr_output_streams_confirmed>

08012a60 <uxr_run_session_until_all_status>:
 8012a60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a64:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8012a68:	4606      	mov	r6, r0
 8012a6a:	4688      	mov	r8, r1
 8012a6c:	4692      	mov	sl, r2
 8012a6e:	461f      	mov	r7, r3
 8012a70:	f7ff fc18 	bl	80122a4 <uxr_flash_output_streams>
 8012a74:	f1bb 0f00 	cmp.w	fp, #0
 8012a78:	d004      	beq.n	8012a84 <uxr_run_session_until_all_status+0x24>
 8012a7a:	465a      	mov	r2, fp
 8012a7c:	21ff      	movs	r1, #255	; 0xff
 8012a7e:	4638      	mov	r0, r7
 8012a80:	f00b f848 	bl	801db14 <memset>
 8012a84:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8012a88:	1e7d      	subs	r5, r7, #1
 8012a8a:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 8012a8e:	f000 fd05 	bl	801349c <uxr_millis>
 8012a92:	4641      	mov	r1, r8
 8012a94:	4681      	mov	r9, r0
 8012a96:	4630      	mov	r0, r6
 8012a98:	f7ff fe4a 	bl	8012730 <listen_message_reliably>
 8012a9c:	f000 fcfe 	bl	801349c <uxr_millis>
 8012aa0:	eba0 0009 	sub.w	r0, r0, r9
 8012aa4:	eba8 0100 	sub.w	r1, r8, r0
 8012aa8:	f1bb 0f00 	cmp.w	fp, #0
 8012aac:	d029      	beq.n	8012b02 <uxr_run_session_until_all_status+0xa2>
 8012aae:	46ae      	mov	lr, r5
 8012ab0:	f04f 0c00 	mov.w	ip, #0
 8012ab4:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8012ab8:	2cff      	cmp	r4, #255	; 0xff
 8012aba:	d015      	beq.n	8012ae8 <uxr_run_session_until_all_status+0x88>
 8012abc:	f10c 0c01 	add.w	ip, ip, #1
 8012ac0:	45e3      	cmp	fp, ip
 8012ac2:	d8f7      	bhi.n	8012ab4 <uxr_run_session_until_all_status+0x54>
 8012ac4:	2300      	movs	r3, #0
 8012ac6:	67f3      	str	r3, [r6, #124]	; 0x7c
 8012ac8:	e000      	b.n	8012acc <uxr_run_session_until_all_status+0x6c>
 8012aca:	b158      	cbz	r0, 8012ae4 <uxr_run_session_until_all_status+0x84>
 8012acc:	462b      	mov	r3, r5
 8012ace:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8012ad2:	3302      	adds	r3, #2
 8012ad4:	2801      	cmp	r0, #1
 8012ad6:	eba3 0307 	sub.w	r3, r3, r7
 8012ada:	bf8c      	ite	hi
 8012adc:	2000      	movhi	r0, #0
 8012ade:	2001      	movls	r0, #1
 8012ae0:	459b      	cmp	fp, r3
 8012ae2:	d8f2      	bhi.n	8012aca <uxr_run_session_until_all_status+0x6a>
 8012ae4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ae8:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8012aec:	f10c 0c01 	add.w	ip, ip, #1
 8012af0:	45dc      	cmp	ip, fp
 8012af2:	d201      	bcs.n	8012af8 <uxr_run_session_until_all_status+0x98>
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d0dd      	beq.n	8012ab4 <uxr_run_session_until_all_status+0x54>
 8012af8:	2900      	cmp	r1, #0
 8012afa:	dde3      	ble.n	8012ac4 <uxr_run_session_until_all_status+0x64>
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d1ca      	bne.n	8012a96 <uxr_run_session_until_all_status+0x36>
 8012b00:	e7e0      	b.n	8012ac4 <uxr_run_session_until_all_status+0x64>
 8012b02:	2001      	movs	r0, #1
 8012b04:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8012b08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012b0c <wait_session_status>:
 8012b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b10:	4604      	mov	r4, r0
 8012b12:	b09d      	sub	sp, #116	; 0x74
 8012b14:	20ff      	movs	r0, #255	; 0xff
 8012b16:	9303      	str	r3, [sp, #12]
 8012b18:	7160      	strb	r0, [r4, #5]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	f000 80b6 	beq.w	8012c8c <wait_session_status+0x180>
 8012b20:	4689      	mov	r9, r1
 8012b22:	4692      	mov	sl, r2
 8012b24:	f04f 0b00 	mov.w	fp, #0
 8012b28:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012b2a:	4652      	mov	r2, sl
 8012b2c:	4649      	mov	r1, r9
 8012b2e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012b32:	47a8      	blx	r5
 8012b34:	f000 fcb2 	bl	801349c <uxr_millis>
 8012b38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012b3c:	4605      	mov	r5, r0
 8012b3e:	e009      	b.n	8012b54 <wait_session_status+0x48>
 8012b40:	f000 fcac 	bl	801349c <uxr_millis>
 8012b44:	1b40      	subs	r0, r0, r5
 8012b46:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	dd40      	ble.n	8012bd0 <wait_session_status+0xc4>
 8012b4e:	7960      	ldrb	r0, [r4, #5]
 8012b50:	28ff      	cmp	r0, #255	; 0xff
 8012b52:	d145      	bne.n	8012be0 <wait_session_status+0xd4>
 8012b54:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8012b56:	a908      	add	r1, sp, #32
 8012b58:	6896      	ldr	r6, [r2, #8]
 8012b5a:	6810      	ldr	r0, [r2, #0]
 8012b5c:	aa09      	add	r2, sp, #36	; 0x24
 8012b5e:	47b0      	blx	r6
 8012b60:	2800      	cmp	r0, #0
 8012b62:	d0ed      	beq.n	8012b40 <wait_session_status+0x34>
 8012b64:	a80c      	add	r0, sp, #48	; 0x30
 8012b66:	2600      	movs	r6, #0
 8012b68:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8012b6c:	f7fe ff9a 	bl	8011aa4 <ucdr_init_buffer>
 8012b70:	f10d 031e 	add.w	r3, sp, #30
 8012b74:	aa07      	add	r2, sp, #28
 8012b76:	a90c      	add	r1, sp, #48	; 0x30
 8012b78:	4620      	mov	r0, r4
 8012b7a:	f88d 601c 	strb.w	r6, [sp, #28]
 8012b7e:	f000 fa8f 	bl	80130a0 <uxr_read_session_header>
 8012b82:	2800      	cmp	r0, #0
 8012b84:	d0dc      	beq.n	8012b40 <wait_session_status+0x34>
 8012b86:	4631      	mov	r1, r6
 8012b88:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8012b8c:	f000 fb30 	bl	80131f0 <uxr_stream_id_from_raw>
 8012b90:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8012b94:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8012b98:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8012b9c:	2f01      	cmp	r7, #1
 8012b9e:	9302      	str	r3, [sp, #8]
 8012ba0:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8012ba4:	d05c      	beq.n	8012c60 <wait_session_status+0x154>
 8012ba6:	2f02      	cmp	r7, #2
 8012ba8:	d020      	beq.n	8012bec <wait_session_status+0xe0>
 8012baa:	2f00      	cmp	r7, #0
 8012bac:	d1c8      	bne.n	8012b40 <wait_session_status+0x34>
 8012bae:	4639      	mov	r1, r7
 8012bb0:	4638      	mov	r0, r7
 8012bb2:	f000 fb1d 	bl	80131f0 <uxr_stream_id_from_raw>
 8012bb6:	a90c      	add	r1, sp, #48	; 0x30
 8012bb8:	4602      	mov	r2, r0
 8012bba:	900b      	str	r0, [sp, #44]	; 0x2c
 8012bbc:	4620      	mov	r0, r4
 8012bbe:	f7ff fc2d 	bl	801241c <read_submessage_list>
 8012bc2:	f000 fc6b 	bl	801349c <uxr_millis>
 8012bc6:	1b40      	subs	r0, r0, r5
 8012bc8:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	dcbe      	bgt.n	8012b4e <wait_session_status+0x42>
 8012bd0:	f10b 0b01 	add.w	fp, fp, #1
 8012bd4:	9b03      	ldr	r3, [sp, #12]
 8012bd6:	7960      	ldrb	r0, [r4, #5]
 8012bd8:	455b      	cmp	r3, fp
 8012bda:	d001      	beq.n	8012be0 <wait_session_status+0xd4>
 8012bdc:	28ff      	cmp	r0, #255	; 0xff
 8012bde:	d0a3      	beq.n	8012b28 <wait_session_status+0x1c>
 8012be0:	38ff      	subs	r0, #255	; 0xff
 8012be2:	bf18      	it	ne
 8012be4:	2001      	movne	r0, #1
 8012be6:	b01d      	add	sp, #116	; 0x74
 8012be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012bec:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8012bf0:	4631      	mov	r1, r6
 8012bf2:	f104 0008 	add.w	r0, r4, #8
 8012bf6:	9304      	str	r3, [sp, #16]
 8012bf8:	f000 fbe8 	bl	80133cc <uxr_get_input_reliable_stream>
 8012bfc:	4680      	mov	r8, r0
 8012bfe:	b348      	cbz	r0, 8012c54 <wait_session_status+0x148>
 8012c00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012c02:	a80c      	add	r0, sp, #48	; 0x30
 8012c04:	9205      	str	r2, [sp, #20]
 8012c06:	f7fe ff7f 	bl	8011b08 <ucdr_buffer_remaining>
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	f10d 001d 	add.w	r0, sp, #29
 8012c10:	9a05      	ldr	r2, [sp, #20]
 8012c12:	9000      	str	r0, [sp, #0]
 8012c14:	4640      	mov	r0, r8
 8012c16:	9902      	ldr	r1, [sp, #8]
 8012c18:	f008 fa04 	bl	801b024 <uxr_receive_reliable_message>
 8012c1c:	b1d0      	cbz	r0, 8012c54 <wait_session_status+0x148>
 8012c1e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d03a      	beq.n	8012c9c <wait_session_status+0x190>
 8012c26:	9f04      	ldr	r7, [sp, #16]
 8012c28:	e00a      	b.n	8012c40 <wait_session_status+0x134>
 8012c2a:	f04f 0302 	mov.w	r3, #2
 8012c2e:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 8012c32:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 8012c36:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8012c3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012c3c:	f7ff fbee 	bl	801241c <read_submessage_list>
 8012c40:	a914      	add	r1, sp, #80	; 0x50
 8012c42:	2204      	movs	r2, #4
 8012c44:	4640      	mov	r0, r8
 8012c46:	f008 fa6f 	bl	801b128 <uxr_next_input_reliable_buffer_available>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	a914      	add	r1, sp, #80	; 0x50
 8012c4e:	4620      	mov	r0, r4
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d1ea      	bne.n	8012c2a <wait_session_status+0x11e>
 8012c54:	4632      	mov	r2, r6
 8012c56:	9904      	ldr	r1, [sp, #16]
 8012c58:	4620      	mov	r0, r4
 8012c5a:	f7ff fa5b 	bl	8012114 <write_submessage_acknack.isra.0>
 8012c5e:	e76f      	b.n	8012b40 <wait_session_status+0x34>
 8012c60:	4631      	mov	r1, r6
 8012c62:	f104 0008 	add.w	r0, r4, #8
 8012c66:	f000 fba7 	bl	80133b8 <uxr_get_input_best_effort_stream>
 8012c6a:	2800      	cmp	r0, #0
 8012c6c:	f43f af68 	beq.w	8012b40 <wait_session_status+0x34>
 8012c70:	9902      	ldr	r1, [sp, #8]
 8012c72:	f008 f94d 	bl	801af10 <uxr_receive_best_effort_message>
 8012c76:	2800      	cmp	r0, #0
 8012c78:	f43f af62 	beq.w	8012b40 <wait_session_status+0x34>
 8012c7c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8012c80:	a90c      	add	r1, sp, #48	; 0x30
 8012c82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012c84:	4620      	mov	r0, r4
 8012c86:	f7ff fbc9 	bl	801241c <read_submessage_list>
 8012c8a:	e759      	b.n	8012b40 <wait_session_status+0x34>
 8012c8c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012c8e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012c92:	47a0      	blx	r4
 8012c94:	2001      	movs	r0, #1
 8012c96:	b01d      	add	sp, #116	; 0x74
 8012c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c9c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8012ca0:	a90c      	add	r1, sp, #48	; 0x30
 8012ca2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012ca4:	4620      	mov	r0, r4
 8012ca6:	f7ff fbb9 	bl	801241c <read_submessage_list>
 8012caa:	e7bc      	b.n	8012c26 <wait_session_status+0x11a>

08012cac <uxr_delete_session_retries>:
 8012cac:	b530      	push	{r4, r5, lr}
 8012cae:	b08f      	sub	sp, #60	; 0x3c
 8012cb0:	4604      	mov	r4, r0
 8012cb2:	460d      	mov	r5, r1
 8012cb4:	f000 fa34 	bl	8013120 <uxr_session_header_offset>
 8012cb8:	2300      	movs	r3, #0
 8012cba:	2210      	movs	r2, #16
 8012cbc:	a902      	add	r1, sp, #8
 8012cbe:	9000      	str	r0, [sp, #0]
 8012cc0:	a806      	add	r0, sp, #24
 8012cc2:	f7fe fedd 	bl	8011a80 <ucdr_init_buffer_origin_offset>
 8012cc6:	a906      	add	r1, sp, #24
 8012cc8:	4620      	mov	r0, r4
 8012cca:	f000 f979 	bl	8012fc0 <uxr_buffer_delete_session>
 8012cce:	2200      	movs	r2, #0
 8012cd0:	9b06      	ldr	r3, [sp, #24]
 8012cd2:	4620      	mov	r0, r4
 8012cd4:	4611      	mov	r1, r2
 8012cd6:	f000 f9cf 	bl	8013078 <uxr_stamp_session_header>
 8012cda:	a806      	add	r0, sp, #24
 8012cdc:	f7fe ff10 	bl	8011b00 <ucdr_buffer_length>
 8012ce0:	462b      	mov	r3, r5
 8012ce2:	4602      	mov	r2, r0
 8012ce4:	a902      	add	r1, sp, #8
 8012ce6:	4620      	mov	r0, r4
 8012ce8:	f7ff ff10 	bl	8012b0c <wait_session_status>
 8012cec:	b118      	cbz	r0, 8012cf6 <uxr_delete_session_retries+0x4a>
 8012cee:	7960      	ldrb	r0, [r4, #5]
 8012cf0:	fab0 f080 	clz	r0, r0
 8012cf4:	0940      	lsrs	r0, r0, #5
 8012cf6:	b00f      	add	sp, #60	; 0x3c
 8012cf8:	bd30      	pop	{r4, r5, pc}
 8012cfa:	bf00      	nop

08012cfc <uxr_create_session>:
 8012cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d00:	f100 0b08 	add.w	fp, r0, #8
 8012d04:	4604      	mov	r4, r0
 8012d06:	b0ab      	sub	sp, #172	; 0xac
 8012d08:	4658      	mov	r0, fp
 8012d0a:	465e      	mov	r6, fp
 8012d0c:	f000 faa6 	bl	801325c <uxr_reset_stream_storage>
 8012d10:	4620      	mov	r0, r4
 8012d12:	f000 fa05 	bl	8013120 <uxr_session_header_offset>
 8012d16:	2300      	movs	r3, #0
 8012d18:	221c      	movs	r2, #28
 8012d1a:	a90b      	add	r1, sp, #44	; 0x2c
 8012d1c:	9000      	str	r0, [sp, #0]
 8012d1e:	a812      	add	r0, sp, #72	; 0x48
 8012d20:	f7fe feae 	bl	8011a80 <ucdr_init_buffer_origin_offset>
 8012d24:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012d26:	a912      	add	r1, sp, #72	; 0x48
 8012d28:	4620      	mov	r0, r4
 8012d2a:	8a1a      	ldrh	r2, [r3, #16]
 8012d2c:	3a04      	subs	r2, #4
 8012d2e:	b292      	uxth	r2, r2
 8012d30:	f000 f91c 	bl	8012f6c <uxr_buffer_create_session>
 8012d34:	9912      	ldr	r1, [sp, #72]	; 0x48
 8012d36:	4620      	mov	r0, r4
 8012d38:	f000 f98a 	bl	8013050 <uxr_stamp_create_session_header>
 8012d3c:	a812      	add	r0, sp, #72	; 0x48
 8012d3e:	f7fe fedf 	bl	8011b00 <ucdr_buffer_length>
 8012d42:	23ff      	movs	r3, #255	; 0xff
 8012d44:	4681      	mov	r9, r0
 8012d46:	7163      	strb	r3, [r4, #5]
 8012d48:	230a      	movs	r3, #10
 8012d4a:	9303      	str	r3, [sp, #12]
 8012d4c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8012d4e:	464a      	mov	r2, r9
 8012d50:	a90b      	add	r1, sp, #44	; 0x2c
 8012d52:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012d56:	47a8      	blx	r5
 8012d58:	f000 fba0 	bl	801349c <uxr_millis>
 8012d5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012d60:	4605      	mov	r5, r0
 8012d62:	e009      	b.n	8012d78 <uxr_create_session+0x7c>
 8012d64:	f000 fb9a 	bl	801349c <uxr_millis>
 8012d68:	1b40      	subs	r0, r0, r5
 8012d6a:	7962      	ldrb	r2, [r4, #5]
 8012d6c:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	dd38      	ble.n	8012de6 <uxr_create_session+0xea>
 8012d74:	2aff      	cmp	r2, #255	; 0xff
 8012d76:	d13c      	bne.n	8012df2 <uxr_create_session+0xf6>
 8012d78:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8012d7a:	a907      	add	r1, sp, #28
 8012d7c:	6897      	ldr	r7, [r2, #8]
 8012d7e:	6810      	ldr	r0, [r2, #0]
 8012d80:	aa08      	add	r2, sp, #32
 8012d82:	47b8      	blx	r7
 8012d84:	2800      	cmp	r0, #0
 8012d86:	d0ed      	beq.n	8012d64 <uxr_create_session+0x68>
 8012d88:	a81a      	add	r0, sp, #104	; 0x68
 8012d8a:	2700      	movs	r7, #0
 8012d8c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8012d90:	f7fe fe88 	bl	8011aa4 <ucdr_init_buffer>
 8012d94:	f10d 031a 	add.w	r3, sp, #26
 8012d98:	aa06      	add	r2, sp, #24
 8012d9a:	a91a      	add	r1, sp, #104	; 0x68
 8012d9c:	4620      	mov	r0, r4
 8012d9e:	f88d 7018 	strb.w	r7, [sp, #24]
 8012da2:	f000 f97d 	bl	80130a0 <uxr_read_session_header>
 8012da6:	2800      	cmp	r0, #0
 8012da8:	d0dc      	beq.n	8012d64 <uxr_create_session+0x68>
 8012daa:	4639      	mov	r1, r7
 8012dac:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8012db0:	f000 fa1e 	bl	80131f0 <uxr_stream_id_from_raw>
 8012db4:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8012db8:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8012dbc:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8012dc0:	2f01      	cmp	r7, #1
 8012dc2:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8012dc6:	d053      	beq.n	8012e70 <uxr_create_session+0x174>
 8012dc8:	2f02      	cmp	r7, #2
 8012dca:	d018      	beq.n	8012dfe <uxr_create_session+0x102>
 8012dcc:	2f00      	cmp	r7, #0
 8012dce:	d1c9      	bne.n	8012d64 <uxr_create_session+0x68>
 8012dd0:	4639      	mov	r1, r7
 8012dd2:	4638      	mov	r0, r7
 8012dd4:	f000 fa0c 	bl	80131f0 <uxr_stream_id_from_raw>
 8012dd8:	a91a      	add	r1, sp, #104	; 0x68
 8012dda:	4602      	mov	r2, r0
 8012ddc:	900a      	str	r0, [sp, #40]	; 0x28
 8012dde:	4620      	mov	r0, r4
 8012de0:	f7ff fb1c 	bl	801241c <read_submessage_list>
 8012de4:	e7be      	b.n	8012d64 <uxr_create_session+0x68>
 8012de6:	9b03      	ldr	r3, [sp, #12]
 8012de8:	3b01      	subs	r3, #1
 8012dea:	9303      	str	r3, [sp, #12]
 8012dec:	d001      	beq.n	8012df2 <uxr_create_session+0xf6>
 8012dee:	2aff      	cmp	r2, #255	; 0xff
 8012df0:	d0ac      	beq.n	8012d4c <uxr_create_session+0x50>
 8012df2:	2a00      	cmp	r2, #0
 8012df4:	d051      	beq.n	8012e9a <uxr_create_session+0x19e>
 8012df6:	2000      	movs	r0, #0
 8012df8:	b02b      	add	sp, #172	; 0xac
 8012dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dfe:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8012e02:	4641      	mov	r1, r8
 8012e04:	4630      	mov	r0, r6
 8012e06:	9304      	str	r3, [sp, #16]
 8012e08:	f000 fae0 	bl	80133cc <uxr_get_input_reliable_stream>
 8012e0c:	4682      	mov	sl, r0
 8012e0e:	b348      	cbz	r0, 8012e64 <uxr_create_session+0x168>
 8012e10:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012e12:	a81a      	add	r0, sp, #104	; 0x68
 8012e14:	9205      	str	r2, [sp, #20]
 8012e16:	f7fe fe77 	bl	8011b08 <ucdr_buffer_remaining>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	f10d 0019 	add.w	r0, sp, #25
 8012e20:	9a05      	ldr	r2, [sp, #20]
 8012e22:	4659      	mov	r1, fp
 8012e24:	9000      	str	r0, [sp, #0]
 8012e26:	4650      	mov	r0, sl
 8012e28:	f008 f8fc 	bl	801b024 <uxr_receive_reliable_message>
 8012e2c:	b1d0      	cbz	r0, 8012e64 <uxr_create_session+0x168>
 8012e2e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d038      	beq.n	8012ea8 <uxr_create_session+0x1ac>
 8012e36:	9f04      	ldr	r7, [sp, #16]
 8012e38:	e00a      	b.n	8012e50 <uxr_create_session+0x154>
 8012e3a:	f04f 0302 	mov.w	r3, #2
 8012e3e:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 8012e42:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 8012e46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012e4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012e4c:	f7ff fae6 	bl	801241c <read_submessage_list>
 8012e50:	a922      	add	r1, sp, #136	; 0x88
 8012e52:	2204      	movs	r2, #4
 8012e54:	4650      	mov	r0, sl
 8012e56:	f008 f967 	bl	801b128 <uxr_next_input_reliable_buffer_available>
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	a922      	add	r1, sp, #136	; 0x88
 8012e5e:	4620      	mov	r0, r4
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d1ea      	bne.n	8012e3a <uxr_create_session+0x13e>
 8012e64:	4642      	mov	r2, r8
 8012e66:	9904      	ldr	r1, [sp, #16]
 8012e68:	4620      	mov	r0, r4
 8012e6a:	f7ff f953 	bl	8012114 <write_submessage_acknack.isra.0>
 8012e6e:	e779      	b.n	8012d64 <uxr_create_session+0x68>
 8012e70:	4641      	mov	r1, r8
 8012e72:	4630      	mov	r0, r6
 8012e74:	f000 faa0 	bl	80133b8 <uxr_get_input_best_effort_stream>
 8012e78:	2800      	cmp	r0, #0
 8012e7a:	f43f af73 	beq.w	8012d64 <uxr_create_session+0x68>
 8012e7e:	4659      	mov	r1, fp
 8012e80:	f008 f846 	bl	801af10 <uxr_receive_best_effort_message>
 8012e84:	2800      	cmp	r0, #0
 8012e86:	f43f af6d 	beq.w	8012d64 <uxr_create_session+0x68>
 8012e8a:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8012e8e:	a91a      	add	r1, sp, #104	; 0x68
 8012e90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012e92:	4620      	mov	r0, r4
 8012e94:	f7ff fac2 	bl	801241c <read_submessage_list>
 8012e98:	e764      	b.n	8012d64 <uxr_create_session+0x68>
 8012e9a:	4630      	mov	r0, r6
 8012e9c:	f000 f9de 	bl	801325c <uxr_reset_stream_storage>
 8012ea0:	2001      	movs	r0, #1
 8012ea2:	b02b      	add	sp, #172	; 0xac
 8012ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ea8:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8012eac:	a91a      	add	r1, sp, #104	; 0x68
 8012eae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012eb0:	4620      	mov	r0, r4
 8012eb2:	f7ff fab3 	bl	801241c <read_submessage_list>
 8012eb6:	e7be      	b.n	8012e36 <uxr_create_session+0x13a>

08012eb8 <uxr_prepare_stream_to_write_submessage>:
 8012eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ebc:	b082      	sub	sp, #8
 8012ebe:	4604      	mov	r4, r0
 8012ec0:	4610      	mov	r0, r2
 8012ec2:	4615      	mov	r5, r2
 8012ec4:	461e      	mov	r6, r3
 8012ec6:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8012eca:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8012ece:	f105 0904 	add.w	r9, r5, #4
 8012ed2:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8012ed6:	9101      	str	r1, [sp, #4]
 8012ed8:	f000 fada 	bl	8013490 <uxr_submessage_padding>
 8012edc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012ee0:	4481      	add	r9, r0
 8012ee2:	2b01      	cmp	r3, #1
 8012ee4:	d01d      	beq.n	8012f22 <uxr_prepare_stream_to_write_submessage+0x6a>
 8012ee6:	2b02      	cmp	r3, #2
 8012ee8:	d116      	bne.n	8012f18 <uxr_prepare_stream_to_write_submessage+0x60>
 8012eea:	f104 0008 	add.w	r0, r4, #8
 8012eee:	4651      	mov	r1, sl
 8012ef0:	f000 fa56 	bl	80133a0 <uxr_get_output_reliable_stream>
 8012ef4:	4604      	mov	r4, r0
 8012ef6:	b158      	cbz	r0, 8012f10 <uxr_prepare_stream_to_write_submessage+0x58>
 8012ef8:	4649      	mov	r1, r9
 8012efa:	4632      	mov	r2, r6
 8012efc:	f008 fada 	bl	801b4b4 <uxr_prepare_reliable_buffer_to_write>
 8012f00:	4604      	mov	r4, r0
 8012f02:	b12c      	cbz	r4, 8012f10 <uxr_prepare_stream_to_write_submessage+0x58>
 8012f04:	4643      	mov	r3, r8
 8012f06:	b2aa      	uxth	r2, r5
 8012f08:	4639      	mov	r1, r7
 8012f0a:	4630      	mov	r0, r6
 8012f0c:	f000 fa80 	bl	8013410 <uxr_buffer_submessage_header>
 8012f10:	4620      	mov	r0, r4
 8012f12:	b002      	add	sp, #8
 8012f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f18:	2400      	movs	r4, #0
 8012f1a:	4620      	mov	r0, r4
 8012f1c:	b002      	add	sp, #8
 8012f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f22:	f104 0008 	add.w	r0, r4, #8
 8012f26:	4651      	mov	r1, sl
 8012f28:	f000 fa32 	bl	8013390 <uxr_get_output_best_effort_stream>
 8012f2c:	4604      	mov	r4, r0
 8012f2e:	2800      	cmp	r0, #0
 8012f30:	d0ee      	beq.n	8012f10 <uxr_prepare_stream_to_write_submessage+0x58>
 8012f32:	4649      	mov	r1, r9
 8012f34:	4632      	mov	r2, r6
 8012f36:	f008 f9e7 	bl	801b308 <uxr_prepare_best_effort_buffer_to_write>
 8012f3a:	4604      	mov	r4, r0
 8012f3c:	e7e1      	b.n	8012f02 <uxr_prepare_stream_to_write_submessage+0x4a>
 8012f3e:	bf00      	nop

08012f40 <uxr_init_session_info>:
 8012f40:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8012f44:	23ff      	movs	r3, #255	; 0xff
 8012f46:	7102      	strb	r2, [r0, #4]
 8012f48:	f880 c001 	strb.w	ip, [r0, #1]
 8012f4c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8012f50:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8012f54:	7001      	strb	r1, [r0, #0]
 8012f56:	f880 c002 	strb.w	ip, [r0, #2]
 8012f5a:	7143      	strb	r3, [r0, #5]
 8012f5c:	70c2      	strb	r2, [r0, #3]
 8012f5e:	b500      	push	{lr}
 8012f60:	f04f 0e09 	mov.w	lr, #9
 8012f64:	f8a0 e006 	strh.w	lr, [r0, #6]
 8012f68:	f85d fb04 	ldr.w	pc, [sp], #4

08012f6c <uxr_buffer_create_session>:
 8012f6c:	b530      	push	{r4, r5, lr}
 8012f6e:	2300      	movs	r3, #0
 8012f70:	b089      	sub	sp, #36	; 0x24
 8012f72:	4d12      	ldr	r5, [pc, #72]	; (8012fbc <uxr_buffer_create_session+0x50>)
 8012f74:	460c      	mov	r4, r1
 8012f76:	9307      	str	r3, [sp, #28]
 8012f78:	4619      	mov	r1, r3
 8012f7a:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012f7e:	2201      	movs	r2, #1
 8012f80:	9301      	str	r3, [sp, #4]
 8012f82:	80c2      	strh	r2, [r0, #6]
 8012f84:	f88d 2004 	strb.w	r2, [sp, #4]
 8012f88:	682a      	ldr	r2, [r5, #0]
 8012f8a:	9303      	str	r3, [sp, #12]
 8012f8c:	9200      	str	r2, [sp, #0]
 8012f8e:	88aa      	ldrh	r2, [r5, #4]
 8012f90:	9306      	str	r3, [sp, #24]
 8012f92:	f8ad 2006 	strh.w	r2, [sp, #6]
 8012f96:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8012f9a:	9202      	str	r2, [sp, #8]
 8012f9c:	7802      	ldrb	r2, [r0, #0]
 8012f9e:	4620      	mov	r0, r4
 8012fa0:	f88d 200c 	strb.w	r2, [sp, #12]
 8012fa4:	2210      	movs	r2, #16
 8012fa6:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8012faa:	f000 fa31 	bl	8013410 <uxr_buffer_submessage_header>
 8012fae:	4669      	mov	r1, sp
 8012fb0:	4620      	mov	r0, r4
 8012fb2:	f001 faa3 	bl	80144fc <uxr_serialize_CREATE_CLIENT_Payload>
 8012fb6:	b009      	add	sp, #36	; 0x24
 8012fb8:	bd30      	pop	{r4, r5, pc}
 8012fba:	bf00      	nop
 8012fbc:	0801ebb8 	.word	0x0801ebb8

08012fc0 <uxr_buffer_delete_session>:
 8012fc0:	4a0c      	ldr	r2, [pc, #48]	; (8012ff4 <uxr_buffer_delete_session+0x34>)
 8012fc2:	2302      	movs	r3, #2
 8012fc4:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8012fc8:	b510      	push	{r4, lr}
 8012fca:	460c      	mov	r4, r1
 8012fcc:	b082      	sub	sp, #8
 8012fce:	8911      	ldrh	r1, [r2, #8]
 8012fd0:	2204      	movs	r2, #4
 8012fd2:	80c3      	strh	r3, [r0, #6]
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	f8ad 1006 	strh.w	r1, [sp, #6]
 8012fda:	4620      	mov	r0, r4
 8012fdc:	2103      	movs	r1, #3
 8012fde:	f8ad c004 	strh.w	ip, [sp, #4]
 8012fe2:	f000 fa15 	bl	8013410 <uxr_buffer_submessage_header>
 8012fe6:	a901      	add	r1, sp, #4
 8012fe8:	4620      	mov	r0, r4
 8012fea:	f001 fb2f 	bl	801464c <uxr_serialize_DELETE_Payload>
 8012fee:	b002      	add	sp, #8
 8012ff0:	bd10      	pop	{r4, pc}
 8012ff2:	bf00      	nop
 8012ff4:	0801ebb8 	.word	0x0801ebb8

08012ff8 <uxr_read_create_session_status>:
 8012ff8:	b510      	push	{r4, lr}
 8012ffa:	460b      	mov	r3, r1
 8012ffc:	b088      	sub	sp, #32
 8012ffe:	4604      	mov	r4, r0
 8013000:	a901      	add	r1, sp, #4
 8013002:	4618      	mov	r0, r3
 8013004:	f001 fb32 	bl	801466c <uxr_deserialize_STATUS_AGENT_Payload>
 8013008:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801300c:	7163      	strb	r3, [r4, #5]
 801300e:	b008      	add	sp, #32
 8013010:	bd10      	pop	{r4, pc}
 8013012:	bf00      	nop

08013014 <uxr_read_delete_session_status>:
 8013014:	b510      	push	{r4, lr}
 8013016:	b084      	sub	sp, #16
 8013018:	4604      	mov	r4, r0
 801301a:	4608      	mov	r0, r1
 801301c:	a902      	add	r1, sp, #8
 801301e:	f001 fb55 	bl	80146cc <uxr_deserialize_STATUS_Payload>
 8013022:	88e3      	ldrh	r3, [r4, #6]
 8013024:	2b02      	cmp	r3, #2
 8013026:	d001      	beq.n	801302c <uxr_read_delete_session_status+0x18>
 8013028:	b004      	add	sp, #16
 801302a:	bd10      	pop	{r4, pc}
 801302c:	f10d 000a 	add.w	r0, sp, #10
 8013030:	f7fe fff6 	bl	8012020 <uxr_object_id_from_raw>
 8013034:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8013038:	f89d 3009 	ldrb.w	r3, [sp, #9]
 801303c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013040:	b29b      	uxth	r3, r3
 8013042:	2b02      	cmp	r3, #2
 8013044:	d1f0      	bne.n	8013028 <uxr_read_delete_session_status+0x14>
 8013046:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801304a:	7163      	strb	r3, [r4, #5]
 801304c:	e7ec      	b.n	8013028 <uxr_read_delete_session_status+0x14>
 801304e:	bf00      	nop

08013050 <uxr_stamp_create_session_header>:
 8013050:	b510      	push	{r4, lr}
 8013052:	2208      	movs	r2, #8
 8013054:	b08a      	sub	sp, #40	; 0x28
 8013056:	4604      	mov	r4, r0
 8013058:	eb0d 0002 	add.w	r0, sp, r2
 801305c:	f7fe fd22 	bl	8011aa4 <ucdr_init_buffer>
 8013060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013064:	2300      	movs	r3, #0
 8013066:	a802      	add	r0, sp, #8
 8013068:	f001 0180 	and.w	r1, r1, #128	; 0x80
 801306c:	9400      	str	r4, [sp, #0]
 801306e:	461a      	mov	r2, r3
 8013070:	f000 fbca 	bl	8013808 <uxr_serialize_message_header>
 8013074:	b00a      	add	sp, #40	; 0x28
 8013076:	bd10      	pop	{r4, pc}

08013078 <uxr_stamp_session_header>:
 8013078:	b530      	push	{r4, r5, lr}
 801307a:	b08d      	sub	sp, #52	; 0x34
 801307c:	4604      	mov	r4, r0
 801307e:	460d      	mov	r5, r1
 8013080:	4619      	mov	r1, r3
 8013082:	a804      	add	r0, sp, #16
 8013084:	9203      	str	r2, [sp, #12]
 8013086:	2208      	movs	r2, #8
 8013088:	f7fe fd0c 	bl	8011aa4 <ucdr_init_buffer>
 801308c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013090:	9b03      	ldr	r3, [sp, #12]
 8013092:	462a      	mov	r2, r5
 8013094:	a804      	add	r0, sp, #16
 8013096:	9400      	str	r4, [sp, #0]
 8013098:	f000 fbb6 	bl	8013808 <uxr_serialize_message_header>
 801309c:	b00d      	add	sp, #52	; 0x34
 801309e:	bd30      	pop	{r4, r5, pc}

080130a0 <uxr_read_session_header>:
 80130a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130a4:	4607      	mov	r7, r0
 80130a6:	b084      	sub	sp, #16
 80130a8:	4608      	mov	r0, r1
 80130aa:	460c      	mov	r4, r1
 80130ac:	4615      	mov	r5, r2
 80130ae:	461e      	mov	r6, r3
 80130b0:	f7fe fd2a 	bl	8011b08 <ucdr_buffer_remaining>
 80130b4:	2808      	cmp	r0, #8
 80130b6:	d803      	bhi.n	80130c0 <uxr_read_session_header+0x20>
 80130b8:	2000      	movs	r0, #0
 80130ba:	b004      	add	sp, #16
 80130bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130c0:	f10d 080c 	add.w	r8, sp, #12
 80130c4:	4633      	mov	r3, r6
 80130c6:	462a      	mov	r2, r5
 80130c8:	4620      	mov	r0, r4
 80130ca:	f10d 010b 	add.w	r1, sp, #11
 80130ce:	f8cd 8000 	str.w	r8, [sp]
 80130d2:	f000 fbb7 	bl	8013844 <uxr_deserialize_message_header>
 80130d6:	783a      	ldrb	r2, [r7, #0]
 80130d8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80130dc:	4293      	cmp	r3, r2
 80130de:	d1eb      	bne.n	80130b8 <uxr_read_session_header+0x18>
 80130e0:	061b      	lsls	r3, r3, #24
 80130e2:	d41b      	bmi.n	801311c <uxr_read_session_header+0x7c>
 80130e4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80130e8:	787b      	ldrb	r3, [r7, #1]
 80130ea:	429a      	cmp	r2, r3
 80130ec:	d003      	beq.n	80130f6 <uxr_read_session_header+0x56>
 80130ee:	2001      	movs	r0, #1
 80130f0:	f080 0001 	eor.w	r0, r0, #1
 80130f4:	e7e1      	b.n	80130ba <uxr_read_session_header+0x1a>
 80130f6:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80130fa:	1cb8      	adds	r0, r7, #2
 80130fc:	78bb      	ldrb	r3, [r7, #2]
 80130fe:	429a      	cmp	r2, r3
 8013100:	d1f5      	bne.n	80130ee <uxr_read_session_header+0x4e>
 8013102:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8013106:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801310a:	429a      	cmp	r2, r3
 801310c:	d1ef      	bne.n	80130ee <uxr_read_session_header+0x4e>
 801310e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8013112:	7843      	ldrb	r3, [r0, #1]
 8013114:	429a      	cmp	r2, r3
 8013116:	d1ea      	bne.n	80130ee <uxr_read_session_header+0x4e>
 8013118:	2000      	movs	r0, #0
 801311a:	e7e9      	b.n	80130f0 <uxr_read_session_header+0x50>
 801311c:	2001      	movs	r0, #1
 801311e:	e7cc      	b.n	80130ba <uxr_read_session_header+0x1a>

08013120 <uxr_session_header_offset>:
 8013120:	f990 3000 	ldrsb.w	r3, [r0]
 8013124:	2b00      	cmp	r3, #0
 8013126:	bfac      	ite	ge
 8013128:	2008      	movge	r0, #8
 801312a:	2004      	movlt	r0, #4
 801312c:	4770      	bx	lr
 801312e:	bf00      	nop

08013130 <uxr_init_base_object_request>:
 8013130:	b510      	push	{r4, lr}
 8013132:	b082      	sub	sp, #8
 8013134:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8013138:	9101      	str	r1, [sp, #4]
 801313a:	88c3      	ldrh	r3, [r0, #6]
 801313c:	f1a3 010a 	sub.w	r1, r3, #10
 8013140:	b289      	uxth	r1, r1
 8013142:	42a1      	cmp	r1, r4
 8013144:	d80f      	bhi.n	8013166 <uxr_init_base_object_request+0x36>
 8013146:	3301      	adds	r3, #1
 8013148:	b29c      	uxth	r4, r3
 801314a:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 801314e:	b2db      	uxtb	r3, r3
 8013150:	80c4      	strh	r4, [r0, #6]
 8013152:	1c91      	adds	r1, r2, #2
 8013154:	9801      	ldr	r0, [sp, #4]
 8013156:	f882 c000 	strb.w	ip, [r2]
 801315a:	7053      	strb	r3, [r2, #1]
 801315c:	f7fe ff74 	bl	8012048 <uxr_object_id_to_raw>
 8013160:	4620      	mov	r0, r4
 8013162:	b002      	add	sp, #8
 8013164:	bd10      	pop	{r4, pc}
 8013166:	230a      	movs	r3, #10
 8013168:	f04f 0c00 	mov.w	ip, #0
 801316c:	461c      	mov	r4, r3
 801316e:	e7ef      	b.n	8013150 <uxr_init_base_object_request+0x20>

08013170 <uxr_parse_base_object_request>:
 8013170:	b570      	push	{r4, r5, r6, lr}
 8013172:	4604      	mov	r4, r0
 8013174:	3002      	adds	r0, #2
 8013176:	460d      	mov	r5, r1
 8013178:	4616      	mov	r6, r2
 801317a:	f7fe ff51 	bl	8012020 <uxr_object_id_from_raw>
 801317e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8013182:	8028      	strh	r0, [r5, #0]
 8013184:	806b      	strh	r3, [r5, #2]
 8013186:	7822      	ldrb	r2, [r4, #0]
 8013188:	7863      	ldrb	r3, [r4, #1]
 801318a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801318e:	8033      	strh	r3, [r6, #0]
 8013190:	bd70      	pop	{r4, r5, r6, pc}
 8013192:	bf00      	nop

08013194 <uxr_stream_id>:
 8013194:	2901      	cmp	r1, #1
 8013196:	4684      	mov	ip, r0
 8013198:	b500      	push	{lr}
 801319a:	b083      	sub	sp, #12
 801319c:	d01f      	beq.n	80131de <uxr_stream_id+0x4a>
 801319e:	2902      	cmp	r1, #2
 80131a0:	f04f 0e00 	mov.w	lr, #0
 80131a4:	d020      	beq.n	80131e8 <uxr_stream_id+0x54>
 80131a6:	2300      	movs	r3, #0
 80131a8:	2000      	movs	r0, #0
 80131aa:	f36e 0307 	bfi	r3, lr, #0, #8
 80131ae:	f36c 230f 	bfi	r3, ip, #8, #8
 80131b2:	f361 4317 	bfi	r3, r1, #16, #8
 80131b6:	f362 631f 	bfi	r3, r2, #24, #8
 80131ba:	fa5f fc83 	uxtb.w	ip, r3
 80131be:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80131c2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80131c6:	0e1b      	lsrs	r3, r3, #24
 80131c8:	f36c 0007 	bfi	r0, ip, #0, #8
 80131cc:	f361 200f 	bfi	r0, r1, #8, #8
 80131d0:	f362 4017 	bfi	r0, r2, #16, #8
 80131d4:	f363 601f 	bfi	r0, r3, #24, #8
 80131d8:	b003      	add	sp, #12
 80131da:	f85d fb04 	ldr.w	pc, [sp], #4
 80131de:	f100 0e01 	add.w	lr, r0, #1
 80131e2:	fa5f fe8e 	uxtb.w	lr, lr
 80131e6:	e7de      	b.n	80131a6 <uxr_stream_id+0x12>
 80131e8:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 80131ec:	e7db      	b.n	80131a6 <uxr_stream_id+0x12>
 80131ee:	bf00      	nop

080131f0 <uxr_stream_id_from_raw>:
 80131f0:	b082      	sub	sp, #8
 80131f2:	b130      	cbz	r0, 8013202 <uxr_stream_id_from_raw+0x12>
 80131f4:	0603      	lsls	r3, r0, #24
 80131f6:	d421      	bmi.n	801323c <uxr_stream_id_from_raw+0x4c>
 80131f8:	1e42      	subs	r2, r0, #1
 80131fa:	f04f 0c01 	mov.w	ip, #1
 80131fe:	b2d2      	uxtb	r2, r2
 8013200:	e001      	b.n	8013206 <uxr_stream_id_from_raw+0x16>
 8013202:	4684      	mov	ip, r0
 8013204:	4602      	mov	r2, r0
 8013206:	2300      	movs	r3, #0
 8013208:	f360 0307 	bfi	r3, r0, #0, #8
 801320c:	2000      	movs	r0, #0
 801320e:	f362 230f 	bfi	r3, r2, #8, #8
 8013212:	f36c 4317 	bfi	r3, ip, #16, #8
 8013216:	f361 631f 	bfi	r3, r1, #24, #8
 801321a:	fa5f fc83 	uxtb.w	ip, r3
 801321e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8013222:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8013226:	0e1b      	lsrs	r3, r3, #24
 8013228:	f36c 0007 	bfi	r0, ip, #0, #8
 801322c:	f361 200f 	bfi	r0, r1, #8, #8
 8013230:	f362 4017 	bfi	r0, r2, #16, #8
 8013234:	f363 601f 	bfi	r0, r3, #24, #8
 8013238:	b002      	add	sp, #8
 801323a:	4770      	bx	lr
 801323c:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 8013240:	f04f 0c02 	mov.w	ip, #2
 8013244:	e7df      	b.n	8013206 <uxr_stream_id_from_raw+0x16>
 8013246:	bf00      	nop

08013248 <uxr_init_stream_storage>:
 8013248:	2300      	movs	r3, #0
 801324a:	7403      	strb	r3, [r0, #16]
 801324c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8013250:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8013254:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8013258:	4770      	bx	lr
 801325a:	bf00      	nop

0801325c <uxr_reset_stream_storage>:
 801325c:	b570      	push	{r4, r5, r6, lr}
 801325e:	7c03      	ldrb	r3, [r0, #16]
 8013260:	4604      	mov	r4, r0
 8013262:	b14b      	cbz	r3, 8013278 <uxr_reset_stream_storage+0x1c>
 8013264:	4606      	mov	r6, r0
 8013266:	2500      	movs	r5, #0
 8013268:	4630      	mov	r0, r6
 801326a:	3501      	adds	r5, #1
 801326c:	f008 f846 	bl	801b2fc <uxr_reset_output_best_effort_stream>
 8013270:	7c23      	ldrb	r3, [r4, #16]
 8013272:	3610      	adds	r6, #16
 8013274:	42ab      	cmp	r3, r5
 8013276:	d8f7      	bhi.n	8013268 <uxr_reset_stream_storage+0xc>
 8013278:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801327c:	b15b      	cbz	r3, 8013296 <uxr_reset_stream_storage+0x3a>
 801327e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013282:	2500      	movs	r5, #0
 8013284:	4630      	mov	r0, r6
 8013286:	3501      	adds	r5, #1
 8013288:	f007 fe3e 	bl	801af08 <uxr_reset_input_best_effort_stream>
 801328c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013290:	3602      	adds	r6, #2
 8013292:	42ab      	cmp	r3, r5
 8013294:	d8f6      	bhi.n	8013284 <uxr_reset_stream_storage+0x28>
 8013296:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801329a:	b15b      	cbz	r3, 80132b4 <uxr_reset_stream_storage+0x58>
 801329c:	f104 0618 	add.w	r6, r4, #24
 80132a0:	2500      	movs	r5, #0
 80132a2:	4630      	mov	r0, r6
 80132a4:	3501      	adds	r5, #1
 80132a6:	f008 f8d7 	bl	801b458 <uxr_reset_output_reliable_stream>
 80132aa:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80132ae:	3628      	adds	r6, #40	; 0x28
 80132b0:	42ab      	cmp	r3, r5
 80132b2:	d8f6      	bhi.n	80132a2 <uxr_reset_stream_storage+0x46>
 80132b4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80132b8:	b15b      	cbz	r3, 80132d2 <uxr_reset_stream_storage+0x76>
 80132ba:	f104 0648 	add.w	r6, r4, #72	; 0x48
 80132be:	2500      	movs	r5, #0
 80132c0:	4630      	mov	r0, r6
 80132c2:	3501      	adds	r5, #1
 80132c4:	f007 fe8c 	bl	801afe0 <uxr_reset_input_reliable_stream>
 80132c8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80132cc:	3618      	adds	r6, #24
 80132ce:	42ab      	cmp	r3, r5
 80132d0:	d8f6      	bhi.n	80132c0 <uxr_reset_stream_storage+0x64>
 80132d2:	bd70      	pop	{r4, r5, r6, pc}

080132d4 <uxr_add_output_best_effort_buffer>:
 80132d4:	b510      	push	{r4, lr}
 80132d6:	7c04      	ldrb	r4, [r0, #16]
 80132d8:	b082      	sub	sp, #8
 80132da:	f104 0c01 	add.w	ip, r4, #1
 80132de:	f880 c010 	strb.w	ip, [r0, #16]
 80132e2:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80132e6:	f007 ffff 	bl	801b2e8 <uxr_init_output_best_effort_stream>
 80132ea:	2201      	movs	r2, #1
 80132ec:	4620      	mov	r0, r4
 80132ee:	4611      	mov	r1, r2
 80132f0:	b002      	add	sp, #8
 80132f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80132f6:	f7ff bf4d 	b.w	8013194 <uxr_stream_id>
 80132fa:	bf00      	nop

080132fc <uxr_add_output_reliable_buffer>:
 80132fc:	b510      	push	{r4, lr}
 80132fe:	b084      	sub	sp, #16
 8013300:	4684      	mov	ip, r0
 8013302:	2028      	movs	r0, #40	; 0x28
 8013304:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8013308:	9400      	str	r4, [sp, #0]
 801330a:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 801330e:	fb00 c004 	mla	r0, r0, r4, ip
 8013312:	f104 0e01 	add.w	lr, r4, #1
 8013316:	3018      	adds	r0, #24
 8013318:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 801331c:	f008 f864 	bl	801b3e8 <uxr_init_output_reliable_stream>
 8013320:	2201      	movs	r2, #1
 8013322:	2102      	movs	r1, #2
 8013324:	4620      	mov	r0, r4
 8013326:	b004      	add	sp, #16
 8013328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801332c:	f7ff bf32 	b.w	8013194 <uxr_stream_id>

08013330 <uxr_add_input_best_effort_buffer>:
 8013330:	b510      	push	{r4, lr}
 8013332:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8013336:	b082      	sub	sp, #8
 8013338:	1c62      	adds	r2, r4, #1
 801333a:	f104 0321 	add.w	r3, r4, #33	; 0x21
 801333e:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8013342:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8013346:	f007 fddb 	bl	801af00 <uxr_init_input_best_effort_stream>
 801334a:	2200      	movs	r2, #0
 801334c:	2101      	movs	r1, #1
 801334e:	4620      	mov	r0, r4
 8013350:	b002      	add	sp, #8
 8013352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013356:	f7ff bf1d 	b.w	8013194 <uxr_stream_id>
 801335a:	bf00      	nop

0801335c <uxr_add_input_reliable_buffer>:
 801335c:	b510      	push	{r4, lr}
 801335e:	b084      	sub	sp, #16
 8013360:	4684      	mov	ip, r0
 8013362:	2018      	movs	r0, #24
 8013364:	9c06      	ldr	r4, [sp, #24]
 8013366:	9400      	str	r4, [sp, #0]
 8013368:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 801336c:	fb00 c004 	mla	r0, r0, r4, ip
 8013370:	f104 0e01 	add.w	lr, r4, #1
 8013374:	3048      	adds	r0, #72	; 0x48
 8013376:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 801337a:	f007 fe0b 	bl	801af94 <uxr_init_input_reliable_stream>
 801337e:	2200      	movs	r2, #0
 8013380:	2102      	movs	r1, #2
 8013382:	4620      	mov	r0, r4
 8013384:	b004      	add	sp, #16
 8013386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801338a:	f7ff bf03 	b.w	8013194 <uxr_stream_id>
 801338e:	bf00      	nop

08013390 <uxr_get_output_best_effort_stream>:
 8013390:	7c03      	ldrb	r3, [r0, #16]
 8013392:	428b      	cmp	r3, r1
 8013394:	bf8c      	ite	hi
 8013396:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 801339a:	2000      	movls	r0, #0
 801339c:	4770      	bx	lr
 801339e:	bf00      	nop

080133a0 <uxr_get_output_reliable_stream>:
 80133a0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80133a4:	428b      	cmp	r3, r1
 80133a6:	d904      	bls.n	80133b2 <uxr_get_output_reliable_stream+0x12>
 80133a8:	2328      	movs	r3, #40	; 0x28
 80133aa:	fb03 0001 	mla	r0, r3, r1, r0
 80133ae:	3018      	adds	r0, #24
 80133b0:	4770      	bx	lr
 80133b2:	2000      	movs	r0, #0
 80133b4:	4770      	bx	lr
 80133b6:	bf00      	nop

080133b8 <uxr_get_input_best_effort_stream>:
 80133b8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80133bc:	428b      	cmp	r3, r1
 80133be:	d903      	bls.n	80133c8 <uxr_get_input_best_effort_stream+0x10>
 80133c0:	3121      	adds	r1, #33	; 0x21
 80133c2:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80133c6:	4770      	bx	lr
 80133c8:	2000      	movs	r0, #0
 80133ca:	4770      	bx	lr

080133cc <uxr_get_input_reliable_stream>:
 80133cc:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80133d0:	428b      	cmp	r3, r1
 80133d2:	d904      	bls.n	80133de <uxr_get_input_reliable_stream+0x12>
 80133d4:	2318      	movs	r3, #24
 80133d6:	fb03 0001 	mla	r0, r3, r1, r0
 80133da:	3048      	adds	r0, #72	; 0x48
 80133dc:	4770      	bx	lr
 80133de:	2000      	movs	r0, #0
 80133e0:	4770      	bx	lr
 80133e2:	bf00      	nop

080133e4 <uxr_output_streams_confirmed>:
 80133e4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80133e8:	b183      	cbz	r3, 801340c <uxr_output_streams_confirmed+0x28>
 80133ea:	b570      	push	{r4, r5, r6, lr}
 80133ec:	4606      	mov	r6, r0
 80133ee:	f100 0518 	add.w	r5, r0, #24
 80133f2:	2400      	movs	r4, #0
 80133f4:	e000      	b.n	80133f8 <uxr_output_streams_confirmed+0x14>
 80133f6:	b140      	cbz	r0, 801340a <uxr_output_streams_confirmed+0x26>
 80133f8:	4628      	mov	r0, r5
 80133fa:	3401      	adds	r4, #1
 80133fc:	f008 faa0 	bl	801b940 <uxr_is_output_up_to_date>
 8013400:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8013404:	3528      	adds	r5, #40	; 0x28
 8013406:	42a3      	cmp	r3, r4
 8013408:	d8f5      	bhi.n	80133f6 <uxr_output_streams_confirmed+0x12>
 801340a:	bd70      	pop	{r4, r5, r6, pc}
 801340c:	2001      	movs	r0, #1
 801340e:	4770      	bx	lr

08013410 <uxr_buffer_submessage_header>:
 8013410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013412:	460e      	mov	r6, r1
 8013414:	2104      	movs	r1, #4
 8013416:	4604      	mov	r4, r0
 8013418:	4615      	mov	r5, r2
 801341a:	461f      	mov	r7, r3
 801341c:	f7fe fb5e 	bl	8011adc <ucdr_align_to>
 8013420:	2301      	movs	r3, #1
 8013422:	4631      	mov	r1, r6
 8013424:	4620      	mov	r0, r4
 8013426:	ea47 0203 	orr.w	r2, r7, r3
 801342a:	7523      	strb	r3, [r4, #20]
 801342c:	462b      	mov	r3, r5
 801342e:	f000 fa29 	bl	8013884 <uxr_serialize_submessage_header>
 8013432:	4620      	mov	r0, r4
 8013434:	f7fe fb68 	bl	8011b08 <ucdr_buffer_remaining>
 8013438:	42a8      	cmp	r0, r5
 801343a:	bf34      	ite	cc
 801343c:	2000      	movcc	r0, #0
 801343e:	2001      	movcs	r0, #1
 8013440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013442:	bf00      	nop

08013444 <uxr_read_submessage_header>:
 8013444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013448:	4604      	mov	r4, r0
 801344a:	460d      	mov	r5, r1
 801344c:	2104      	movs	r1, #4
 801344e:	4616      	mov	r6, r2
 8013450:	4698      	mov	r8, r3
 8013452:	f7fe fb43 	bl	8011adc <ucdr_align_to>
 8013456:	4620      	mov	r0, r4
 8013458:	f7fe fb56 	bl	8011b08 <ucdr_buffer_remaining>
 801345c:	2803      	cmp	r0, #3
 801345e:	bf8c      	ite	hi
 8013460:	2701      	movhi	r7, #1
 8013462:	2700      	movls	r7, #0
 8013464:	d802      	bhi.n	801346c <uxr_read_submessage_header+0x28>
 8013466:	4638      	mov	r0, r7
 8013468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801346c:	4633      	mov	r3, r6
 801346e:	4642      	mov	r2, r8
 8013470:	4620      	mov	r0, r4
 8013472:	4629      	mov	r1, r5
 8013474:	f000 fa1a 	bl	80138ac <uxr_deserialize_submessage_header>
 8013478:	f898 3000 	ldrb.w	r3, [r8]
 801347c:	4638      	mov	r0, r7
 801347e:	f003 0201 	and.w	r2, r3, #1
 8013482:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8013486:	f888 3000 	strb.w	r3, [r8]
 801348a:	7522      	strb	r2, [r4, #20]
 801348c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013490 <uxr_submessage_padding>:
 8013490:	f010 0003 	ands.w	r0, r0, #3
 8013494:	bf18      	it	ne
 8013496:	f1c0 0004 	rsbne	r0, r0, #4
 801349a:	4770      	bx	lr

0801349c <uxr_millis>:
 801349c:	b510      	push	{r4, lr}
 801349e:	b084      	sub	sp, #16
 80134a0:	2001      	movs	r0, #1
 80134a2:	4669      	mov	r1, sp
 80134a4:	f7ef ff50 	bl	8003348 <clock_gettime>
 80134a8:	4908      	ldr	r1, [pc, #32]	; (80134cc <uxr_millis+0x30>)
 80134aa:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80134ae:	fba0 0301 	umull	r0, r3, r0, r1
 80134b2:	1900      	adds	r0, r0, r4
 80134b4:	fb01 3102 	mla	r1, r1, r2, r3
 80134b8:	4a05      	ldr	r2, [pc, #20]	; (80134d0 <uxr_millis+0x34>)
 80134ba:	f04f 0300 	mov.w	r3, #0
 80134be:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80134c2:	f7ec ff25 	bl	8000310 <__aeabi_ldivmod>
 80134c6:	b004      	add	sp, #16
 80134c8:	bd10      	pop	{r4, pc}
 80134ca:	bf00      	nop
 80134cc:	3b9aca00 	.word	0x3b9aca00
 80134d0:	000f4240 	.word	0x000f4240

080134d4 <uxr_nanos>:
 80134d4:	b510      	push	{r4, lr}
 80134d6:	b084      	sub	sp, #16
 80134d8:	2001      	movs	r0, #1
 80134da:	4669      	mov	r1, sp
 80134dc:	f7ef ff34 	bl	8003348 <clock_gettime>
 80134e0:	4a06      	ldr	r2, [pc, #24]	; (80134fc <uxr_nanos+0x28>)
 80134e2:	9800      	ldr	r0, [sp, #0]
 80134e4:	9902      	ldr	r1, [sp, #8]
 80134e6:	fba0 0302 	umull	r0, r3, r0, r2
 80134ea:	9c01      	ldr	r4, [sp, #4]
 80134ec:	1840      	adds	r0, r0, r1
 80134ee:	fb02 3304 	mla	r3, r2, r4, r3
 80134f2:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80134f6:	b004      	add	sp, #16
 80134f8:	bd10      	pop	{r4, pc}
 80134fa:	bf00      	nop
 80134fc:	3b9aca00 	.word	0x3b9aca00

08013500 <on_full_output_buffer_fragmented>:
 8013500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013504:	460c      	mov	r4, r1
 8013506:	b08a      	sub	sp, #40	; 0x28
 8013508:	4606      	mov	r6, r0
 801350a:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 801350e:	f104 0008 	add.w	r0, r4, #8
 8013512:	f7ff ff45 	bl	80133a0 <uxr_get_output_reliable_stream>
 8013516:	4605      	mov	r5, r0
 8013518:	f008 fa1c 	bl	801b954 <get_available_free_slots>
 801351c:	b968      	cbnz	r0, 801353a <on_full_output_buffer_fragmented+0x3a>
 801351e:	4620      	mov	r0, r4
 8013520:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 8013524:	4798      	blx	r3
 8013526:	b918      	cbnz	r0, 8013530 <on_full_output_buffer_fragmented+0x30>
 8013528:	2001      	movs	r0, #1
 801352a:	b00a      	add	sp, #40	; 0x28
 801352c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013530:	4628      	mov	r0, r5
 8013532:	f008 fa0f 	bl	801b954 <get_available_free_slots>
 8013536:	2800      	cmp	r0, #0
 8013538:	d0f6      	beq.n	8013528 <on_full_output_buffer_fragmented+0x28>
 801353a:	8929      	ldrh	r1, [r5, #8]
 801353c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8013540:	89eb      	ldrh	r3, [r5, #14]
 8013542:	7b28      	ldrb	r0, [r5, #12]
 8013544:	686f      	ldr	r7, [r5, #4]
 8013546:	1a12      	subs	r2, r2, r0
 8013548:	fbb3 f0f1 	udiv	r0, r3, r1
 801354c:	fbb7 f7f1 	udiv	r7, r7, r1
 8013550:	fb01 3110 	mls	r1, r1, r0, r3
 8013554:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8013558:	b289      	uxth	r1, r1
 801355a:	fb07 f101 	mul.w	r1, r7, r1
 801355e:	3f04      	subs	r7, #4
 8013560:	443a      	add	r2, r7
 8013562:	3104      	adds	r1, #4
 8013564:	fa1f f882 	uxth.w	r8, r2
 8013568:	463a      	mov	r2, r7
 801356a:	eba3 0308 	sub.w	r3, r3, r8
 801356e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 8013572:	682b      	ldr	r3, [r5, #0]
 8013574:	4419      	add	r1, r3
 8013576:	2300      	movs	r3, #0
 8013578:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801357c:	9000      	str	r0, [sp, #0]
 801357e:	a802      	add	r0, sp, #8
 8013580:	f7fe fa7e 	bl	8011a80 <ucdr_init_buffer_origin_offset>
 8013584:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8013588:	f102 0308 	add.w	r3, r2, #8
 801358c:	42bb      	cmp	r3, r7
 801358e:	d927      	bls.n	80135e0 <on_full_output_buffer_fragmented+0xe0>
 8013590:	4642      	mov	r2, r8
 8013592:	2300      	movs	r3, #0
 8013594:	210d      	movs	r1, #13
 8013596:	a802      	add	r0, sp, #8
 8013598:	f7ff ff3a 	bl	8013410 <uxr_buffer_submessage_header>
 801359c:	8929      	ldrh	r1, [r5, #8]
 801359e:	89eb      	ldrh	r3, [r5, #14]
 80135a0:	686a      	ldr	r2, [r5, #4]
 80135a2:	fbb3 f0f1 	udiv	r0, r3, r1
 80135a6:	fbb2 f2f1 	udiv	r2, r2, r1
 80135aa:	fb01 3310 	mls	r3, r1, r0, r3
 80135ae:	b29b      	uxth	r3, r3
 80135b0:	fb02 f303 	mul.w	r3, r2, r3
 80135b4:	682a      	ldr	r2, [r5, #0]
 80135b6:	50d7      	str	r7, [r2, r3]
 80135b8:	2101      	movs	r1, #1
 80135ba:	89e8      	ldrh	r0, [r5, #14]
 80135bc:	f008 fb1c 	bl	801bbf8 <uxr_seq_num_add>
 80135c0:	9904      	ldr	r1, [sp, #16]
 80135c2:	9a03      	ldr	r2, [sp, #12]
 80135c4:	81e8      	strh	r0, [r5, #14]
 80135c6:	4630      	mov	r0, r6
 80135c8:	1a52      	subs	r2, r2, r1
 80135ca:	f7fe fa6b 	bl	8011aa4 <ucdr_init_buffer>
 80135ce:	4630      	mov	r0, r6
 80135d0:	4622      	mov	r2, r4
 80135d2:	490f      	ldr	r1, [pc, #60]	; (8013610 <on_full_output_buffer_fragmented+0x110>)
 80135d4:	f7fe fa3a 	bl	8011a4c <ucdr_set_on_full_buffer_callback>
 80135d8:	2000      	movs	r0, #0
 80135da:	b00a      	add	sp, #40	; 0x28
 80135dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135e0:	b292      	uxth	r2, r2
 80135e2:	2302      	movs	r3, #2
 80135e4:	210d      	movs	r1, #13
 80135e6:	a802      	add	r0, sp, #8
 80135e8:	f7ff ff12 	bl	8013410 <uxr_buffer_submessage_header>
 80135ec:	8928      	ldrh	r0, [r5, #8]
 80135ee:	89eb      	ldrh	r3, [r5, #14]
 80135f0:	6869      	ldr	r1, [r5, #4]
 80135f2:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80135f6:	fbb3 f7f0 	udiv	r7, r3, r0
 80135fa:	fbb1 f1f0 	udiv	r1, r1, r0
 80135fe:	fb00 3317 	mls	r3, r0, r7, r3
 8013602:	3208      	adds	r2, #8
 8013604:	b29b      	uxth	r3, r3
 8013606:	fb01 f303 	mul.w	r3, r1, r3
 801360a:	6829      	ldr	r1, [r5, #0]
 801360c:	50ca      	str	r2, [r1, r3]
 801360e:	e7d3      	b.n	80135b8 <on_full_output_buffer_fragmented+0xb8>
 8013610:	08013501 	.word	0x08013501

08013614 <uxr_prepare_output_stream>:
 8013614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013616:	b087      	sub	sp, #28
 8013618:	2707      	movs	r7, #7
 801361a:	2500      	movs	r5, #0
 801361c:	461c      	mov	r4, r3
 801361e:	4606      	mov	r6, r0
 8013620:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8013624:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013626:	e9cd 7500 	strd	r7, r5, [sp]
 801362a:	3204      	adds	r2, #4
 801362c:	f7ff fc44 	bl	8012eb8 <uxr_prepare_stream_to_write_submessage>
 8013630:	f080 0201 	eor.w	r2, r0, #1
 8013634:	b2d2      	uxtb	r2, r2
 8013636:	75a2      	strb	r2, [r4, #22]
 8013638:	b112      	cbz	r2, 8013640 <uxr_prepare_output_stream+0x2c>
 801363a:	4628      	mov	r0, r5
 801363c:	b007      	add	sp, #28
 801363e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013640:	aa05      	add	r2, sp, #20
 8013642:	9902      	ldr	r1, [sp, #8]
 8013644:	4630      	mov	r0, r6
 8013646:	f7ff fd73 	bl	8013130 <uxr_init_base_object_request>
 801364a:	a905      	add	r1, sp, #20
 801364c:	4605      	mov	r5, r0
 801364e:	4620      	mov	r0, r4
 8013650:	f001 f8bc 	bl	80147cc <uxr_serialize_WRITE_DATA_Payload_Data>
 8013654:	69a6      	ldr	r6, [r4, #24]
 8013656:	69e7      	ldr	r7, [r4, #28]
 8013658:	4620      	mov	r0, r4
 801365a:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801365e:	1a52      	subs	r2, r2, r1
 8013660:	f7fe fa20 	bl	8011aa4 <ucdr_init_buffer>
 8013664:	4620      	mov	r0, r4
 8013666:	463a      	mov	r2, r7
 8013668:	4631      	mov	r1, r6
 801366a:	f7fe f9ef 	bl	8011a4c <ucdr_set_on_full_buffer_callback>
 801366e:	4628      	mov	r0, r5
 8013670:	b007      	add	sp, #28
 8013672:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013674 <uxr_prepare_output_stream_fragmented>:
 8013674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013678:	b091      	sub	sp, #68	; 0x44
 801367a:	4605      	mov	r5, r0
 801367c:	3008      	adds	r0, #8
 801367e:	461e      	mov	r6, r3
 8013680:	9105      	str	r1, [sp, #20]
 8013682:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8013686:	9204      	str	r2, [sp, #16]
 8013688:	f7ff fe8a 	bl	80133a0 <uxr_get_output_reliable_stream>
 801368c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8013690:	2b01      	cmp	r3, #1
 8013692:	f000 8093 	beq.w	80137bc <uxr_prepare_output_stream_fragmented+0x148>
 8013696:	4604      	mov	r4, r0
 8013698:	2800      	cmp	r0, #0
 801369a:	f000 808f 	beq.w	80137bc <uxr_prepare_output_stream_fragmented+0x148>
 801369e:	f008 f959 	bl	801b954 <get_available_free_slots>
 80136a2:	2800      	cmp	r0, #0
 80136a4:	f000 8085 	beq.w	80137b2 <uxr_prepare_output_stream_fragmented+0x13e>
 80136a8:	8923      	ldrh	r3, [r4, #8]
 80136aa:	89e7      	ldrh	r7, [r4, #14]
 80136ac:	6862      	ldr	r2, [r4, #4]
 80136ae:	fbb7 f9f3 	udiv	r9, r7, r3
 80136b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80136b6:	fb03 7919 	mls	r9, r3, r9, r7
 80136ba:	6823      	ldr	r3, [r4, #0]
 80136bc:	f1a2 0b04 	sub.w	fp, r2, #4
 80136c0:	9203      	str	r2, [sp, #12]
 80136c2:	fa1f f989 	uxth.w	r9, r9
 80136c6:	fb02 f909 	mul.w	r9, r2, r9
 80136ca:	f109 0904 	add.w	r9, r9, #4
 80136ce:	4499      	add	r9, r3
 80136d0:	7b23      	ldrb	r3, [r4, #12]
 80136d2:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80136d6:	4543      	cmp	r3, r8
 80136d8:	d37c      	bcc.n	80137d4 <uxr_prepare_output_stream_fragmented+0x160>
 80136da:	f1ab 0a04 	sub.w	sl, fp, #4
 80136de:	465a      	mov	r2, fp
 80136e0:	4649      	mov	r1, r9
 80136e2:	a808      	add	r0, sp, #32
 80136e4:	ebaa 0a03 	sub.w	sl, sl, r3
 80136e8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80136ea:	f8cd 8000 	str.w	r8, [sp]
 80136ee:	3308      	adds	r3, #8
 80136f0:	fa1f fa8a 	uxth.w	sl, sl
 80136f4:	9302      	str	r3, [sp, #8]
 80136f6:	2300      	movs	r3, #0
 80136f8:	f7fe f9c2 	bl	8011a80 <ucdr_init_buffer_origin_offset>
 80136fc:	9b02      	ldr	r3, [sp, #8]
 80136fe:	4652      	mov	r2, sl
 8013700:	210d      	movs	r1, #13
 8013702:	455b      	cmp	r3, fp
 8013704:	bf34      	ite	cc
 8013706:	2302      	movcc	r3, #2
 8013708:	2300      	movcs	r3, #0
 801370a:	a808      	add	r0, sp, #32
 801370c:	f7ff fe80 	bl	8013410 <uxr_buffer_submessage_header>
 8013710:	8921      	ldrh	r1, [r4, #8]
 8013712:	6863      	ldr	r3, [r4, #4]
 8013714:	4638      	mov	r0, r7
 8013716:	fbb7 f2f1 	udiv	r2, r7, r1
 801371a:	fbb3 f3f1 	udiv	r3, r3, r1
 801371e:	fb01 7212 	mls	r2, r1, r2, r7
 8013722:	2101      	movs	r1, #1
 8013724:	b292      	uxth	r2, r2
 8013726:	fb02 f303 	mul.w	r3, r2, r3
 801372a:	6822      	ldr	r2, [r4, #0]
 801372c:	f842 b003 	str.w	fp, [r2, r3]
 8013730:	f008 fa62 	bl	801bbf8 <uxr_seq_num_add>
 8013734:	9b03      	ldr	r3, [sp, #12]
 8013736:	f108 0104 	add.w	r1, r8, #4
 801373a:	4607      	mov	r7, r0
 801373c:	f1a3 0208 	sub.w	r2, r3, #8
 8013740:	4630      	mov	r0, r6
 8013742:	4449      	add	r1, r9
 8013744:	eba2 0208 	sub.w	r2, r2, r8
 8013748:	f7fe f9ac 	bl	8011aa4 <ucdr_init_buffer>
 801374c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801374e:	2107      	movs	r1, #7
 8013750:	81e7      	strh	r7, [r4, #14]
 8013752:	1d1a      	adds	r2, r3, #4
 8013754:	2300      	movs	r3, #0
 8013756:	4630      	mov	r0, r6
 8013758:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801375c:	bf28      	it	cs
 801375e:	461a      	movcs	r2, r3
 8013760:	b292      	uxth	r2, r2
 8013762:	f7ff fe55 	bl	8013410 <uxr_buffer_submessage_header>
 8013766:	aa07      	add	r2, sp, #28
 8013768:	9904      	ldr	r1, [sp, #16]
 801376a:	4628      	mov	r0, r5
 801376c:	f7ff fce0 	bl	8013130 <uxr_init_base_object_request>
 8013770:	4604      	mov	r4, r0
 8013772:	b320      	cbz	r0, 80137be <uxr_prepare_output_stream_fragmented+0x14a>
 8013774:	a907      	add	r1, sp, #28
 8013776:	4630      	mov	r0, r6
 8013778:	f001 f828 	bl	80147cc <uxr_serialize_WRITE_DATA_Payload_Data>
 801377c:	4630      	mov	r0, r6
 801377e:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8013782:	1a52      	subs	r2, r2, r1
 8013784:	f7fe f98e 	bl	8011aa4 <ucdr_init_buffer>
 8013788:	9b05      	ldr	r3, [sp, #20]
 801378a:	9a02      	ldr	r2, [sp, #8]
 801378c:	4630      	mov	r0, r6
 801378e:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 8013792:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013794:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 8013798:	462a      	mov	r2, r5
 801379a:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 801379e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80137a0:	4918      	ldr	r1, [pc, #96]	; (8013804 <uxr_prepare_output_stream_fragmented+0x190>)
 80137a2:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 80137a6:	f7fe f951 	bl	8011a4c <ucdr_set_on_full_buffer_callback>
 80137aa:	4620      	mov	r0, r4
 80137ac:	b011      	add	sp, #68	; 0x44
 80137ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137b2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80137b4:	4628      	mov	r0, r5
 80137b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80137b8:	4798      	blx	r3
 80137ba:	b920      	cbnz	r0, 80137c6 <uxr_prepare_output_stream_fragmented+0x152>
 80137bc:	2400      	movs	r4, #0
 80137be:	4620      	mov	r0, r4
 80137c0:	b011      	add	sp, #68	; 0x44
 80137c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137c6:	4620      	mov	r0, r4
 80137c8:	f008 f8c4 	bl	801b954 <get_available_free_slots>
 80137cc:	2800      	cmp	r0, #0
 80137ce:	f47f af6b 	bne.w	80136a8 <uxr_prepare_output_stream_fragmented+0x34>
 80137d2:	e7f3      	b.n	80137bc <uxr_prepare_output_stream_fragmented+0x148>
 80137d4:	4638      	mov	r0, r7
 80137d6:	2101      	movs	r1, #1
 80137d8:	f008 fa0e 	bl	801bbf8 <uxr_seq_num_add>
 80137dc:	8922      	ldrh	r2, [r4, #8]
 80137de:	6863      	ldr	r3, [r4, #4]
 80137e0:	4607      	mov	r7, r0
 80137e2:	fbb3 f9f2 	udiv	r9, r3, r2
 80137e6:	fbb0 f3f2 	udiv	r3, r0, r2
 80137ea:	fb02 0313 	mls	r3, r2, r3, r0
 80137ee:	b29b      	uxth	r3, r3
 80137f0:	fb03 f909 	mul.w	r9, r3, r9
 80137f4:	6823      	ldr	r3, [r4, #0]
 80137f6:	f109 0904 	add.w	r9, r9, #4
 80137fa:	4499      	add	r9, r3
 80137fc:	7b23      	ldrb	r3, [r4, #12]
 80137fe:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8013802:	e76a      	b.n	80136da <uxr_prepare_output_stream_fragmented+0x66>
 8013804:	08013501 	.word	0x08013501

08013808 <uxr_serialize_message_header>:
 8013808:	b5f0      	push	{r4, r5, r6, r7, lr}
 801380a:	4616      	mov	r6, r2
 801380c:	b083      	sub	sp, #12
 801380e:	4604      	mov	r4, r0
 8013810:	460d      	mov	r5, r1
 8013812:	9301      	str	r3, [sp, #4]
 8013814:	9f08      	ldr	r7, [sp, #32]
 8013816:	f7fc fcb5 	bl	8010184 <ucdr_serialize_uint8_t>
 801381a:	4631      	mov	r1, r6
 801381c:	4620      	mov	r0, r4
 801381e:	f7fc fcb1 	bl	8010184 <ucdr_serialize_uint8_t>
 8013822:	9a01      	ldr	r2, [sp, #4]
 8013824:	2101      	movs	r1, #1
 8013826:	4620      	mov	r0, r4
 8013828:	f7fc fd58 	bl	80102dc <ucdr_serialize_endian_uint16_t>
 801382c:	062b      	lsls	r3, r5, #24
 801382e:	d501      	bpl.n	8013834 <uxr_serialize_message_header+0x2c>
 8013830:	b003      	add	sp, #12
 8013832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013834:	2204      	movs	r2, #4
 8013836:	4639      	mov	r1, r7
 8013838:	4620      	mov	r0, r4
 801383a:	b003      	add	sp, #12
 801383c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013840:	f7fc ba54 	b.w	800fcec <ucdr_serialize_array_uint8_t>

08013844 <uxr_deserialize_message_header>:
 8013844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013846:	4616      	mov	r6, r2
 8013848:	b083      	sub	sp, #12
 801384a:	4604      	mov	r4, r0
 801384c:	460d      	mov	r5, r1
 801384e:	9301      	str	r3, [sp, #4]
 8013850:	9f08      	ldr	r7, [sp, #32]
 8013852:	f7fc fcad 	bl	80101b0 <ucdr_deserialize_uint8_t>
 8013856:	4631      	mov	r1, r6
 8013858:	4620      	mov	r0, r4
 801385a:	f7fc fca9 	bl	80101b0 <ucdr_deserialize_uint8_t>
 801385e:	9a01      	ldr	r2, [sp, #4]
 8013860:	2101      	movs	r1, #1
 8013862:	4620      	mov	r0, r4
 8013864:	f7fc fe2e 	bl	80104c4 <ucdr_deserialize_endian_uint16_t>
 8013868:	f995 3000 	ldrsb.w	r3, [r5]
 801386c:	2b00      	cmp	r3, #0
 801386e:	da01      	bge.n	8013874 <uxr_deserialize_message_header+0x30>
 8013870:	b003      	add	sp, #12
 8013872:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013874:	2204      	movs	r2, #4
 8013876:	4639      	mov	r1, r7
 8013878:	4620      	mov	r0, r4
 801387a:	b003      	add	sp, #12
 801387c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013880:	f7fc ba98 	b.w	800fdb4 <ucdr_deserialize_array_uint8_t>

08013884 <uxr_serialize_submessage_header>:
 8013884:	b530      	push	{r4, r5, lr}
 8013886:	4615      	mov	r5, r2
 8013888:	b083      	sub	sp, #12
 801388a:	4604      	mov	r4, r0
 801388c:	9301      	str	r3, [sp, #4]
 801388e:	f7fc fc79 	bl	8010184 <ucdr_serialize_uint8_t>
 8013892:	4629      	mov	r1, r5
 8013894:	4620      	mov	r0, r4
 8013896:	f7fc fc75 	bl	8010184 <ucdr_serialize_uint8_t>
 801389a:	9a01      	ldr	r2, [sp, #4]
 801389c:	2101      	movs	r1, #1
 801389e:	4620      	mov	r0, r4
 80138a0:	b003      	add	sp, #12
 80138a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80138a6:	f7fc bd19 	b.w	80102dc <ucdr_serialize_endian_uint16_t>
 80138aa:	bf00      	nop

080138ac <uxr_deserialize_submessage_header>:
 80138ac:	b530      	push	{r4, r5, lr}
 80138ae:	4615      	mov	r5, r2
 80138b0:	b083      	sub	sp, #12
 80138b2:	4604      	mov	r4, r0
 80138b4:	9301      	str	r3, [sp, #4]
 80138b6:	f7fc fc7b 	bl	80101b0 <ucdr_deserialize_uint8_t>
 80138ba:	4629      	mov	r1, r5
 80138bc:	4620      	mov	r0, r4
 80138be:	f7fc fc77 	bl	80101b0 <ucdr_deserialize_uint8_t>
 80138c2:	9a01      	ldr	r2, [sp, #4]
 80138c4:	2101      	movs	r1, #1
 80138c6:	4620      	mov	r0, r4
 80138c8:	b003      	add	sp, #12
 80138ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80138ce:	f7fc bdf9 	b.w	80104c4 <ucdr_deserialize_endian_uint16_t>
 80138d2:	bf00      	nop

080138d4 <uxr_serialize_CLIENT_Representation>:
 80138d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138d8:	2204      	movs	r2, #4
 80138da:	460e      	mov	r6, r1
 80138dc:	4605      	mov	r5, r0
 80138de:	f7fc fa05 	bl	800fcec <ucdr_serialize_array_uint8_t>
 80138e2:	4607      	mov	r7, r0
 80138e4:	2202      	movs	r2, #2
 80138e6:	1d31      	adds	r1, r6, #4
 80138e8:	4628      	mov	r0, r5
 80138ea:	f7fc f9ff 	bl	800fcec <ucdr_serialize_array_uint8_t>
 80138ee:	4038      	ands	r0, r7
 80138f0:	2202      	movs	r2, #2
 80138f2:	1db1      	adds	r1, r6, #6
 80138f4:	b2c7      	uxtb	r7, r0
 80138f6:	4628      	mov	r0, r5
 80138f8:	f7fc f9f8 	bl	800fcec <ucdr_serialize_array_uint8_t>
 80138fc:	2204      	movs	r2, #4
 80138fe:	4007      	ands	r7, r0
 8013900:	f106 0108 	add.w	r1, r6, #8
 8013904:	4628      	mov	r0, r5
 8013906:	f7fc f9f1 	bl	800fcec <ucdr_serialize_array_uint8_t>
 801390a:	4007      	ands	r7, r0
 801390c:	7b31      	ldrb	r1, [r6, #12]
 801390e:	4628      	mov	r0, r5
 8013910:	f7fc fc38 	bl	8010184 <ucdr_serialize_uint8_t>
 8013914:	7b71      	ldrb	r1, [r6, #13]
 8013916:	4007      	ands	r7, r0
 8013918:	4628      	mov	r0, r5
 801391a:	f7fc fc05 	bl	8010128 <ucdr_serialize_bool>
 801391e:	7b73      	ldrb	r3, [r6, #13]
 8013920:	ea07 0800 	and.w	r8, r7, r0
 8013924:	b93b      	cbnz	r3, 8013936 <uxr_serialize_CLIENT_Representation+0x62>
 8013926:	8bb1      	ldrh	r1, [r6, #28]
 8013928:	4628      	mov	r0, r5
 801392a:	f7fc fc57 	bl	80101dc <ucdr_serialize_uint16_t>
 801392e:	ea08 0000 	and.w	r0, r8, r0
 8013932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013936:	6931      	ldr	r1, [r6, #16]
 8013938:	4628      	mov	r0, r5
 801393a:	f7fc fe39 	bl	80105b0 <ucdr_serialize_uint32_t>
 801393e:	6933      	ldr	r3, [r6, #16]
 8013940:	b1e3      	cbz	r3, 801397c <uxr_serialize_CLIENT_Representation+0xa8>
 8013942:	b1c0      	cbz	r0, 8013976 <uxr_serialize_CLIENT_Representation+0xa2>
 8013944:	4637      	mov	r7, r6
 8013946:	f04f 0900 	mov.w	r9, #0
 801394a:	e000      	b.n	801394e <uxr_serialize_CLIENT_Representation+0x7a>
 801394c:	b19c      	cbz	r4, 8013976 <uxr_serialize_CLIENT_Representation+0xa2>
 801394e:	6979      	ldr	r1, [r7, #20]
 8013950:	4628      	mov	r0, r5
 8013952:	f007 f9ff 	bl	801ad54 <ucdr_serialize_string>
 8013956:	69b9      	ldr	r1, [r7, #24]
 8013958:	4604      	mov	r4, r0
 801395a:	4628      	mov	r0, r5
 801395c:	f007 f9fa 	bl	801ad54 <ucdr_serialize_string>
 8013960:	f109 0901 	add.w	r9, r9, #1
 8013964:	6933      	ldr	r3, [r6, #16]
 8013966:	4004      	ands	r4, r0
 8013968:	3708      	adds	r7, #8
 801396a:	4599      	cmp	r9, r3
 801396c:	b2e4      	uxtb	r4, r4
 801396e:	d3ed      	bcc.n	801394c <uxr_serialize_CLIENT_Representation+0x78>
 8013970:	ea08 0804 	and.w	r8, r8, r4
 8013974:	e7d7      	b.n	8013926 <uxr_serialize_CLIENT_Representation+0x52>
 8013976:	f04f 0800 	mov.w	r8, #0
 801397a:	e7d4      	b.n	8013926 <uxr_serialize_CLIENT_Representation+0x52>
 801397c:	ea08 0800 	and.w	r8, r8, r0
 8013980:	e7d1      	b.n	8013926 <uxr_serialize_CLIENT_Representation+0x52>
 8013982:	bf00      	nop

08013984 <uxr_deserialize_CLIENT_Representation>:
 8013984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013988:	2204      	movs	r2, #4
 801398a:	460c      	mov	r4, r1
 801398c:	4605      	mov	r5, r0
 801398e:	f7fc fa11 	bl	800fdb4 <ucdr_deserialize_array_uint8_t>
 8013992:	4607      	mov	r7, r0
 8013994:	2202      	movs	r2, #2
 8013996:	1d21      	adds	r1, r4, #4
 8013998:	4628      	mov	r0, r5
 801399a:	f7fc fa0b 	bl	800fdb4 <ucdr_deserialize_array_uint8_t>
 801399e:	4038      	ands	r0, r7
 80139a0:	2202      	movs	r2, #2
 80139a2:	1da1      	adds	r1, r4, #6
 80139a4:	b2c6      	uxtb	r6, r0
 80139a6:	4628      	mov	r0, r5
 80139a8:	f7fc fa04 	bl	800fdb4 <ucdr_deserialize_array_uint8_t>
 80139ac:	2204      	movs	r2, #4
 80139ae:	4006      	ands	r6, r0
 80139b0:	f104 0108 	add.w	r1, r4, #8
 80139b4:	4628      	mov	r0, r5
 80139b6:	f7fc f9fd 	bl	800fdb4 <ucdr_deserialize_array_uint8_t>
 80139ba:	4006      	ands	r6, r0
 80139bc:	f104 010c 	add.w	r1, r4, #12
 80139c0:	4628      	mov	r0, r5
 80139c2:	f7fc fbf5 	bl	80101b0 <ucdr_deserialize_uint8_t>
 80139c6:	f104 010d 	add.w	r1, r4, #13
 80139ca:	ea06 0700 	and.w	r7, r6, r0
 80139ce:	4628      	mov	r0, r5
 80139d0:	f7fc fbc0 	bl	8010154 <ucdr_deserialize_bool>
 80139d4:	7b63      	ldrb	r3, [r4, #13]
 80139d6:	4007      	ands	r7, r0
 80139d8:	b93b      	cbnz	r3, 80139ea <uxr_deserialize_CLIENT_Representation+0x66>
 80139da:	f104 011c 	add.w	r1, r4, #28
 80139de:	4628      	mov	r0, r5
 80139e0:	f7fc fcfc 	bl	80103dc <ucdr_deserialize_uint16_t>
 80139e4:	4038      	ands	r0, r7
 80139e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139ea:	f104 0110 	add.w	r1, r4, #16
 80139ee:	4628      	mov	r0, r5
 80139f0:	f7fc ff0e 	bl	8010810 <ucdr_deserialize_uint32_t>
 80139f4:	6923      	ldr	r3, [r4, #16]
 80139f6:	2b01      	cmp	r3, #1
 80139f8:	d903      	bls.n	8013a02 <uxr_deserialize_CLIENT_Representation+0x7e>
 80139fa:	2301      	movs	r3, #1
 80139fc:	2700      	movs	r7, #0
 80139fe:	75ab      	strb	r3, [r5, #22]
 8013a00:	e7eb      	b.n	80139da <uxr_deserialize_CLIENT_Representation+0x56>
 8013a02:	b30b      	cbz	r3, 8013a48 <uxr_deserialize_CLIENT_Representation+0xc4>
 8013a04:	b1f0      	cbz	r0, 8013a44 <uxr_deserialize_CLIENT_Representation+0xc0>
 8013a06:	46a0      	mov	r8, r4
 8013a08:	f04f 0900 	mov.w	r9, #0
 8013a0c:	e000      	b.n	8013a10 <uxr_deserialize_CLIENT_Representation+0x8c>
 8013a0e:	b1ce      	cbz	r6, 8013a44 <uxr_deserialize_CLIENT_Representation+0xc0>
 8013a10:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013a14:	f108 0808 	add.w	r8, r8, #8
 8013a18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a1c:	4628      	mov	r0, r5
 8013a1e:	f007 f9a9 	bl	801ad74 <ucdr_deserialize_string>
 8013a22:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013a26:	4606      	mov	r6, r0
 8013a28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a2c:	4628      	mov	r0, r5
 8013a2e:	f109 0901 	add.w	r9, r9, #1
 8013a32:	f007 f99f 	bl	801ad74 <ucdr_deserialize_string>
 8013a36:	6923      	ldr	r3, [r4, #16]
 8013a38:	4006      	ands	r6, r0
 8013a3a:	4599      	cmp	r9, r3
 8013a3c:	b2f6      	uxtb	r6, r6
 8013a3e:	d3e6      	bcc.n	8013a0e <uxr_deserialize_CLIENT_Representation+0x8a>
 8013a40:	4037      	ands	r7, r6
 8013a42:	e7ca      	b.n	80139da <uxr_deserialize_CLIENT_Representation+0x56>
 8013a44:	2700      	movs	r7, #0
 8013a46:	e7c8      	b.n	80139da <uxr_deserialize_CLIENT_Representation+0x56>
 8013a48:	4007      	ands	r7, r0
 8013a4a:	e7c6      	b.n	80139da <uxr_deserialize_CLIENT_Representation+0x56>

08013a4c <uxr_serialize_AGENT_Representation>:
 8013a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a50:	2204      	movs	r2, #4
 8013a52:	460f      	mov	r7, r1
 8013a54:	4605      	mov	r5, r0
 8013a56:	f7fc f949 	bl	800fcec <ucdr_serialize_array_uint8_t>
 8013a5a:	4604      	mov	r4, r0
 8013a5c:	2202      	movs	r2, #2
 8013a5e:	1d39      	adds	r1, r7, #4
 8013a60:	4628      	mov	r0, r5
 8013a62:	f7fc f943 	bl	800fcec <ucdr_serialize_array_uint8_t>
 8013a66:	4020      	ands	r0, r4
 8013a68:	2202      	movs	r2, #2
 8013a6a:	1db9      	adds	r1, r7, #6
 8013a6c:	b2c4      	uxtb	r4, r0
 8013a6e:	4628      	mov	r0, r5
 8013a70:	f7fc f93c 	bl	800fcec <ucdr_serialize_array_uint8_t>
 8013a74:	7a39      	ldrb	r1, [r7, #8]
 8013a76:	4004      	ands	r4, r0
 8013a78:	4628      	mov	r0, r5
 8013a7a:	f7fc fb55 	bl	8010128 <ucdr_serialize_bool>
 8013a7e:	7a3b      	ldrb	r3, [r7, #8]
 8013a80:	ea00 0804 	and.w	r8, r0, r4
 8013a84:	b913      	cbnz	r3, 8013a8c <uxr_serialize_AGENT_Representation+0x40>
 8013a86:	4640      	mov	r0, r8
 8013a88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a8c:	68f9      	ldr	r1, [r7, #12]
 8013a8e:	4628      	mov	r0, r5
 8013a90:	f7fc fd8e 	bl	80105b0 <ucdr_serialize_uint32_t>
 8013a94:	68fb      	ldr	r3, [r7, #12]
 8013a96:	b303      	cbz	r3, 8013ada <uxr_serialize_AGENT_Representation+0x8e>
 8013a98:	b1d0      	cbz	r0, 8013ad0 <uxr_serialize_AGENT_Representation+0x84>
 8013a9a:	463e      	mov	r6, r7
 8013a9c:	f04f 0900 	mov.w	r9, #0
 8013aa0:	e000      	b.n	8013aa4 <uxr_serialize_AGENT_Representation+0x58>
 8013aa2:	b1ac      	cbz	r4, 8013ad0 <uxr_serialize_AGENT_Representation+0x84>
 8013aa4:	6931      	ldr	r1, [r6, #16]
 8013aa6:	4628      	mov	r0, r5
 8013aa8:	f007 f954 	bl	801ad54 <ucdr_serialize_string>
 8013aac:	6971      	ldr	r1, [r6, #20]
 8013aae:	4604      	mov	r4, r0
 8013ab0:	4628      	mov	r0, r5
 8013ab2:	f007 f94f 	bl	801ad54 <ucdr_serialize_string>
 8013ab6:	f109 0901 	add.w	r9, r9, #1
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	4004      	ands	r4, r0
 8013abe:	3608      	adds	r6, #8
 8013ac0:	4599      	cmp	r9, r3
 8013ac2:	b2e4      	uxtb	r4, r4
 8013ac4:	d3ed      	bcc.n	8013aa2 <uxr_serialize_AGENT_Representation+0x56>
 8013ac6:	ea08 0804 	and.w	r8, r8, r4
 8013aca:	4640      	mov	r0, r8
 8013acc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ad0:	f04f 0800 	mov.w	r8, #0
 8013ad4:	4640      	mov	r0, r8
 8013ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ada:	ea08 0800 	and.w	r8, r8, r0
 8013ade:	e7d2      	b.n	8013a86 <uxr_serialize_AGENT_Representation+0x3a>

08013ae0 <uxr_serialize_DATAWRITER_Representation>:
 8013ae0:	b570      	push	{r4, r5, r6, lr}
 8013ae2:	460d      	mov	r5, r1
 8013ae4:	7809      	ldrb	r1, [r1, #0]
 8013ae6:	4606      	mov	r6, r0
 8013ae8:	f7fc fb4c 	bl	8010184 <ucdr_serialize_uint8_t>
 8013aec:	4604      	mov	r4, r0
 8013aee:	b130      	cbz	r0, 8013afe <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013af0:	782b      	ldrb	r3, [r5, #0]
 8013af2:	2b02      	cmp	r3, #2
 8013af4:	d00c      	beq.n	8013b10 <uxr_serialize_DATAWRITER_Representation+0x30>
 8013af6:	2b03      	cmp	r3, #3
 8013af8:	d010      	beq.n	8013b1c <uxr_serialize_DATAWRITER_Representation+0x3c>
 8013afa:	2b01      	cmp	r3, #1
 8013afc:	d008      	beq.n	8013b10 <uxr_serialize_DATAWRITER_Representation+0x30>
 8013afe:	2202      	movs	r2, #2
 8013b00:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8013b04:	4630      	mov	r0, r6
 8013b06:	f7fc f8f1 	bl	800fcec <ucdr_serialize_array_uint8_t>
 8013b0a:	4020      	ands	r0, r4
 8013b0c:	b2c0      	uxtb	r0, r0
 8013b0e:	bd70      	pop	{r4, r5, r6, pc}
 8013b10:	6869      	ldr	r1, [r5, #4]
 8013b12:	4630      	mov	r0, r6
 8013b14:	f007 f91e 	bl	801ad54 <ucdr_serialize_string>
 8013b18:	4604      	mov	r4, r0
 8013b1a:	e7f0      	b.n	8013afe <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013b1c:	4629      	mov	r1, r5
 8013b1e:	4630      	mov	r0, r6
 8013b20:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8013b24:	3104      	adds	r1, #4
 8013b26:	f007 f8e9 	bl	801acfc <ucdr_serialize_sequence_uint8_t>
 8013b2a:	4604      	mov	r4, r0
 8013b2c:	e7e7      	b.n	8013afe <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013b2e:	bf00      	nop

08013b30 <uxr_serialize_ObjectVariant.part.0>:
 8013b30:	b570      	push	{r4, r5, r6, lr}
 8013b32:	780b      	ldrb	r3, [r1, #0]
 8013b34:	460c      	mov	r4, r1
 8013b36:	4605      	mov	r5, r0
 8013b38:	3b01      	subs	r3, #1
 8013b3a:	2b0d      	cmp	r3, #13
 8013b3c:	d854      	bhi.n	8013be8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8013b3e:	e8df f003 	tbb	[pc, r3]
 8013b42:	0730      	.short	0x0730
 8013b44:	07071b1b 	.word	0x07071b1b
 8013b48:	0c530707 	.word	0x0c530707
 8013b4c:	494e0c0c 	.word	0x494e0c0c
 8013b50:	3104      	adds	r1, #4
 8013b52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b56:	f7ff bfc3 	b.w	8013ae0 <uxr_serialize_DATAWRITER_Representation>
 8013b5a:	7909      	ldrb	r1, [r1, #4]
 8013b5c:	f7fc fb12 	bl	8010184 <ucdr_serialize_uint8_t>
 8013b60:	b1e8      	cbz	r0, 8013b9e <uxr_serialize_ObjectVariant.part.0+0x6e>
 8013b62:	7923      	ldrb	r3, [r4, #4]
 8013b64:	2b01      	cmp	r3, #1
 8013b66:	d001      	beq.n	8013b6c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8013b68:	2b02      	cmp	r3, #2
 8013b6a:	d13d      	bne.n	8013be8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8013b6c:	68a1      	ldr	r1, [r4, #8]
 8013b6e:	4628      	mov	r0, r5
 8013b70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013b74:	f007 b8ee 	b.w	801ad54 <ucdr_serialize_string>
 8013b78:	7909      	ldrb	r1, [r1, #4]
 8013b7a:	f7fc fb03 	bl	8010184 <ucdr_serialize_uint8_t>
 8013b7e:	4606      	mov	r6, r0
 8013b80:	b120      	cbz	r0, 8013b8c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013b82:	7923      	ldrb	r3, [r4, #4]
 8013b84:	2b02      	cmp	r3, #2
 8013b86:	d039      	beq.n	8013bfc <uxr_serialize_ObjectVariant.part.0+0xcc>
 8013b88:	2b03      	cmp	r3, #3
 8013b8a:	d02f      	beq.n	8013bec <uxr_serialize_ObjectVariant.part.0+0xbc>
 8013b8c:	2202      	movs	r2, #2
 8013b8e:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8013b92:	4628      	mov	r0, r5
 8013b94:	f7fc f8aa 	bl	800fcec <ucdr_serialize_array_uint8_t>
 8013b98:	4030      	ands	r0, r6
 8013b9a:	b2c0      	uxtb	r0, r0
 8013b9c:	bd70      	pop	{r4, r5, r6, pc}
 8013b9e:	2000      	movs	r0, #0
 8013ba0:	bd70      	pop	{r4, r5, r6, pc}
 8013ba2:	7909      	ldrb	r1, [r1, #4]
 8013ba4:	f7fc faee 	bl	8010184 <ucdr_serialize_uint8_t>
 8013ba8:	4606      	mov	r6, r0
 8013baa:	b158      	cbz	r0, 8013bc4 <uxr_serialize_ObjectVariant.part.0+0x94>
 8013bac:	7923      	ldrb	r3, [r4, #4]
 8013bae:	2b02      	cmp	r3, #2
 8013bb0:	d003      	beq.n	8013bba <uxr_serialize_ObjectVariant.part.0+0x8a>
 8013bb2:	2b03      	cmp	r3, #3
 8013bb4:	d028      	beq.n	8013c08 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8013bb6:	2b01      	cmp	r3, #1
 8013bb8:	d104      	bne.n	8013bc4 <uxr_serialize_ObjectVariant.part.0+0x94>
 8013bba:	68a1      	ldr	r1, [r4, #8]
 8013bbc:	4628      	mov	r0, r5
 8013bbe:	f007 f8c9 	bl	801ad54 <ucdr_serialize_string>
 8013bc2:	4606      	mov	r6, r0
 8013bc4:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8013bc8:	4628      	mov	r0, r5
 8013bca:	f7fd f817 	bl	8010bfc <ucdr_serialize_int16_t>
 8013bce:	4030      	ands	r0, r6
 8013bd0:	b2c0      	uxtb	r0, r0
 8013bd2:	bd70      	pop	{r4, r5, r6, pc}
 8013bd4:	3104      	adds	r1, #4
 8013bd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013bda:	f7ff be7b 	b.w	80138d4 <uxr_serialize_CLIENT_Representation>
 8013bde:	3104      	adds	r1, #4
 8013be0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013be4:	f7ff bf32 	b.w	8013a4c <uxr_serialize_AGENT_Representation>
 8013be8:	2001      	movs	r0, #1
 8013bea:	bd70      	pop	{r4, r5, r6, pc}
 8013bec:	68a2      	ldr	r2, [r4, #8]
 8013bee:	f104 010c 	add.w	r1, r4, #12
 8013bf2:	4628      	mov	r0, r5
 8013bf4:	f007 f882 	bl	801acfc <ucdr_serialize_sequence_uint8_t>
 8013bf8:	4606      	mov	r6, r0
 8013bfa:	e7c7      	b.n	8013b8c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013bfc:	68a1      	ldr	r1, [r4, #8]
 8013bfe:	4628      	mov	r0, r5
 8013c00:	f007 f8a8 	bl	801ad54 <ucdr_serialize_string>
 8013c04:	4606      	mov	r6, r0
 8013c06:	e7c1      	b.n	8013b8c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013c08:	68a2      	ldr	r2, [r4, #8]
 8013c0a:	f104 010c 	add.w	r1, r4, #12
 8013c0e:	4628      	mov	r0, r5
 8013c10:	f007 f874 	bl	801acfc <ucdr_serialize_sequence_uint8_t>
 8013c14:	4606      	mov	r6, r0
 8013c16:	e7d5      	b.n	8013bc4 <uxr_serialize_ObjectVariant.part.0+0x94>

08013c18 <uxr_deserialize_DATAWRITER_Representation>:
 8013c18:	b570      	push	{r4, r5, r6, lr}
 8013c1a:	4606      	mov	r6, r0
 8013c1c:	460d      	mov	r5, r1
 8013c1e:	f7fc fac7 	bl	80101b0 <ucdr_deserialize_uint8_t>
 8013c22:	4604      	mov	r4, r0
 8013c24:	b130      	cbz	r0, 8013c34 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013c26:	782b      	ldrb	r3, [r5, #0]
 8013c28:	2b02      	cmp	r3, #2
 8013c2a:	d00c      	beq.n	8013c46 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013c2c:	2b03      	cmp	r3, #3
 8013c2e:	d012      	beq.n	8013c56 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8013c30:	2b01      	cmp	r3, #1
 8013c32:	d008      	beq.n	8013c46 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013c34:	2202      	movs	r2, #2
 8013c36:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8013c3a:	4630      	mov	r0, r6
 8013c3c:	f7fc f8ba 	bl	800fdb4 <ucdr_deserialize_array_uint8_t>
 8013c40:	4020      	ands	r0, r4
 8013c42:	b2c0      	uxtb	r0, r0
 8013c44:	bd70      	pop	{r4, r5, r6, pc}
 8013c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013c4a:	6869      	ldr	r1, [r5, #4]
 8013c4c:	4630      	mov	r0, r6
 8013c4e:	f007 f891 	bl	801ad74 <ucdr_deserialize_string>
 8013c52:	4604      	mov	r4, r0
 8013c54:	e7ee      	b.n	8013c34 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013c56:	1d2b      	adds	r3, r5, #4
 8013c58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013c5c:	f105 0108 	add.w	r1, r5, #8
 8013c60:	4630      	mov	r0, r6
 8013c62:	f007 f85d 	bl	801ad20 <ucdr_deserialize_sequence_uint8_t>
 8013c66:	4604      	mov	r4, r0
 8013c68:	e7e4      	b.n	8013c34 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013c6a:	bf00      	nop

08013c6c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8013c6c:	b570      	push	{r4, r5, r6, lr}
 8013c6e:	460d      	mov	r5, r1
 8013c70:	7809      	ldrb	r1, [r1, #0]
 8013c72:	4606      	mov	r6, r0
 8013c74:	f7fc fa58 	bl	8010128 <ucdr_serialize_bool>
 8013c78:	782b      	ldrb	r3, [r5, #0]
 8013c7a:	4604      	mov	r4, r0
 8013c7c:	b94b      	cbnz	r3, 8013c92 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8013c7e:	7a29      	ldrb	r1, [r5, #8]
 8013c80:	4630      	mov	r0, r6
 8013c82:	f7fc fa51 	bl	8010128 <ucdr_serialize_bool>
 8013c86:	7a2b      	ldrb	r3, [r5, #8]
 8013c88:	4004      	ands	r4, r0
 8013c8a:	b2e4      	uxtb	r4, r4
 8013c8c:	b943      	cbnz	r3, 8013ca0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8013c8e:	4620      	mov	r0, r4
 8013c90:	bd70      	pop	{r4, r5, r6, pc}
 8013c92:	6869      	ldr	r1, [r5, #4]
 8013c94:	4630      	mov	r0, r6
 8013c96:	f007 f85d 	bl	801ad54 <ucdr_serialize_string>
 8013c9a:	4004      	ands	r4, r0
 8013c9c:	b2e4      	uxtb	r4, r4
 8013c9e:	e7ee      	b.n	8013c7e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8013ca0:	68e9      	ldr	r1, [r5, #12]
 8013ca2:	4630      	mov	r0, r6
 8013ca4:	f007 f856 	bl	801ad54 <ucdr_serialize_string>
 8013ca8:	4004      	ands	r4, r0
 8013caa:	4620      	mov	r0, r4
 8013cac:	bd70      	pop	{r4, r5, r6, pc}
 8013cae:	bf00      	nop

08013cb0 <uxr_serialize_OBJK_Topic_Binary>:
 8013cb0:	b570      	push	{r4, r5, r6, lr}
 8013cb2:	460d      	mov	r5, r1
 8013cb4:	4606      	mov	r6, r0
 8013cb6:	6809      	ldr	r1, [r1, #0]
 8013cb8:	f007 f84c 	bl	801ad54 <ucdr_serialize_string>
 8013cbc:	4604      	mov	r4, r0
 8013cbe:	7929      	ldrb	r1, [r5, #4]
 8013cc0:	4630      	mov	r0, r6
 8013cc2:	f7fc fa31 	bl	8010128 <ucdr_serialize_bool>
 8013cc6:	792b      	ldrb	r3, [r5, #4]
 8013cc8:	4004      	ands	r4, r0
 8013cca:	b2e4      	uxtb	r4, r4
 8013ccc:	b943      	cbnz	r3, 8013ce0 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8013cce:	7b29      	ldrb	r1, [r5, #12]
 8013cd0:	4630      	mov	r0, r6
 8013cd2:	f7fc fa29 	bl	8010128 <ucdr_serialize_bool>
 8013cd6:	7b2b      	ldrb	r3, [r5, #12]
 8013cd8:	4004      	ands	r4, r0
 8013cda:	b93b      	cbnz	r3, 8013cec <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8013cdc:	4620      	mov	r0, r4
 8013cde:	bd70      	pop	{r4, r5, r6, pc}
 8013ce0:	68a9      	ldr	r1, [r5, #8]
 8013ce2:	4630      	mov	r0, r6
 8013ce4:	f007 f836 	bl	801ad54 <ucdr_serialize_string>
 8013ce8:	4004      	ands	r4, r0
 8013cea:	e7f0      	b.n	8013cce <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8013cec:	6929      	ldr	r1, [r5, #16]
 8013cee:	4630      	mov	r0, r6
 8013cf0:	f007 f830 	bl	801ad54 <ucdr_serialize_string>
 8013cf4:	4004      	ands	r4, r0
 8013cf6:	b2e4      	uxtb	r4, r4
 8013cf8:	4620      	mov	r0, r4
 8013cfa:	bd70      	pop	{r4, r5, r6, pc}

08013cfc <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8013cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d00:	460c      	mov	r4, r1
 8013d02:	7809      	ldrb	r1, [r1, #0]
 8013d04:	4606      	mov	r6, r0
 8013d06:	f7fc fa0f 	bl	8010128 <ucdr_serialize_bool>
 8013d0a:	7823      	ldrb	r3, [r4, #0]
 8013d0c:	4605      	mov	r5, r0
 8013d0e:	b96b      	cbnz	r3, 8013d2c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8013d10:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8013d14:	4630      	mov	r0, r6
 8013d16:	f7fc fa07 	bl	8010128 <ucdr_serialize_bool>
 8013d1a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8013d1e:	4005      	ands	r5, r0
 8013d20:	b2ed      	uxtb	r5, r5
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d169      	bne.n	8013dfa <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8013d26:	4628      	mov	r0, r5
 8013d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d2c:	6861      	ldr	r1, [r4, #4]
 8013d2e:	4630      	mov	r0, r6
 8013d30:	f7fc fc3e 	bl	80105b0 <ucdr_serialize_uint32_t>
 8013d34:	6863      	ldr	r3, [r4, #4]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d06b      	beq.n	8013e12 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8013d3a:	2800      	cmp	r0, #0
 8013d3c:	d067      	beq.n	8013e0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d3e:	68a1      	ldr	r1, [r4, #8]
 8013d40:	4630      	mov	r0, r6
 8013d42:	f007 f807 	bl	801ad54 <ucdr_serialize_string>
 8013d46:	6863      	ldr	r3, [r4, #4]
 8013d48:	2b01      	cmp	r3, #1
 8013d4a:	d953      	bls.n	8013df4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013d4c:	2800      	cmp	r0, #0
 8013d4e:	d05e      	beq.n	8013e0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d50:	68e1      	ldr	r1, [r4, #12]
 8013d52:	4630      	mov	r0, r6
 8013d54:	f006 fffe 	bl	801ad54 <ucdr_serialize_string>
 8013d58:	6863      	ldr	r3, [r4, #4]
 8013d5a:	2b02      	cmp	r3, #2
 8013d5c:	d94a      	bls.n	8013df4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013d5e:	2800      	cmp	r0, #0
 8013d60:	d055      	beq.n	8013e0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d62:	6921      	ldr	r1, [r4, #16]
 8013d64:	4630      	mov	r0, r6
 8013d66:	f006 fff5 	bl	801ad54 <ucdr_serialize_string>
 8013d6a:	6863      	ldr	r3, [r4, #4]
 8013d6c:	2b03      	cmp	r3, #3
 8013d6e:	d941      	bls.n	8013df4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013d70:	2800      	cmp	r0, #0
 8013d72:	d04c      	beq.n	8013e0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d74:	6961      	ldr	r1, [r4, #20]
 8013d76:	4630      	mov	r0, r6
 8013d78:	f006 ffec 	bl	801ad54 <ucdr_serialize_string>
 8013d7c:	6863      	ldr	r3, [r4, #4]
 8013d7e:	2b04      	cmp	r3, #4
 8013d80:	d938      	bls.n	8013df4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013d82:	2800      	cmp	r0, #0
 8013d84:	d043      	beq.n	8013e0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d86:	69a1      	ldr	r1, [r4, #24]
 8013d88:	4630      	mov	r0, r6
 8013d8a:	f006 ffe3 	bl	801ad54 <ucdr_serialize_string>
 8013d8e:	6863      	ldr	r3, [r4, #4]
 8013d90:	2b05      	cmp	r3, #5
 8013d92:	d92f      	bls.n	8013df4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013d94:	2800      	cmp	r0, #0
 8013d96:	d03a      	beq.n	8013e0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013d98:	69e1      	ldr	r1, [r4, #28]
 8013d9a:	4630      	mov	r0, r6
 8013d9c:	f006 ffda 	bl	801ad54 <ucdr_serialize_string>
 8013da0:	6863      	ldr	r3, [r4, #4]
 8013da2:	2b06      	cmp	r3, #6
 8013da4:	d926      	bls.n	8013df4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013da6:	b390      	cbz	r0, 8013e0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013da8:	6a21      	ldr	r1, [r4, #32]
 8013daa:	4630      	mov	r0, r6
 8013dac:	f006 ffd2 	bl	801ad54 <ucdr_serialize_string>
 8013db0:	6863      	ldr	r3, [r4, #4]
 8013db2:	2b07      	cmp	r3, #7
 8013db4:	d91e      	bls.n	8013df4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013db6:	b350      	cbz	r0, 8013e0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013db8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013dba:	4630      	mov	r0, r6
 8013dbc:	f006 ffca 	bl	801ad54 <ucdr_serialize_string>
 8013dc0:	6863      	ldr	r3, [r4, #4]
 8013dc2:	2b08      	cmp	r3, #8
 8013dc4:	d916      	bls.n	8013df4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013dc6:	b310      	cbz	r0, 8013e0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013dc8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013dca:	4630      	mov	r0, r6
 8013dcc:	f006 ffc2 	bl	801ad54 <ucdr_serialize_string>
 8013dd0:	6863      	ldr	r3, [r4, #4]
 8013dd2:	2b09      	cmp	r3, #9
 8013dd4:	d90e      	bls.n	8013df4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013dd6:	b1d0      	cbz	r0, 8013e0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013dd8:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8013ddc:	2709      	movs	r7, #9
 8013dde:	e000      	b.n	8013de2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8013de0:	b1a8      	cbz	r0, 8013e0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013de2:	f858 1b04 	ldr.w	r1, [r8], #4
 8013de6:	4630      	mov	r0, r6
 8013de8:	f006 ffb4 	bl	801ad54 <ucdr_serialize_string>
 8013dec:	3701      	adds	r7, #1
 8013dee:	6862      	ldr	r2, [r4, #4]
 8013df0:	4297      	cmp	r7, r2
 8013df2:	d3f5      	bcc.n	8013de0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8013df4:	4005      	ands	r5, r0
 8013df6:	b2ed      	uxtb	r5, r5
 8013df8:	e78a      	b.n	8013d10 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013dfa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013dfc:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8013e00:	4630      	mov	r0, r6
 8013e02:	f006 ff7b 	bl	801acfc <ucdr_serialize_sequence_uint8_t>
 8013e06:	4005      	ands	r5, r0
 8013e08:	4628      	mov	r0, r5
 8013e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e0e:	2500      	movs	r5, #0
 8013e10:	e77e      	b.n	8013d10 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013e12:	4028      	ands	r0, r5
 8013e14:	b2c5      	uxtb	r5, r0
 8013e16:	e77b      	b.n	8013d10 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08013e18 <uxr_serialize_OBJK_Publisher_Binary>:
 8013e18:	b570      	push	{r4, r5, r6, lr}
 8013e1a:	460d      	mov	r5, r1
 8013e1c:	7809      	ldrb	r1, [r1, #0]
 8013e1e:	4606      	mov	r6, r0
 8013e20:	f7fc f982 	bl	8010128 <ucdr_serialize_bool>
 8013e24:	782b      	ldrb	r3, [r5, #0]
 8013e26:	4604      	mov	r4, r0
 8013e28:	b94b      	cbnz	r3, 8013e3e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8013e2a:	7a29      	ldrb	r1, [r5, #8]
 8013e2c:	4630      	mov	r0, r6
 8013e2e:	f7fc f97b 	bl	8010128 <ucdr_serialize_bool>
 8013e32:	7a2b      	ldrb	r3, [r5, #8]
 8013e34:	4004      	ands	r4, r0
 8013e36:	b2e4      	uxtb	r4, r4
 8013e38:	b943      	cbnz	r3, 8013e4c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8013e3a:	4620      	mov	r0, r4
 8013e3c:	bd70      	pop	{r4, r5, r6, pc}
 8013e3e:	6869      	ldr	r1, [r5, #4]
 8013e40:	4630      	mov	r0, r6
 8013e42:	f006 ff87 	bl	801ad54 <ucdr_serialize_string>
 8013e46:	4004      	ands	r4, r0
 8013e48:	b2e4      	uxtb	r4, r4
 8013e4a:	e7ee      	b.n	8013e2a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8013e4c:	f105 010c 	add.w	r1, r5, #12
 8013e50:	4630      	mov	r0, r6
 8013e52:	f7ff ff53 	bl	8013cfc <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8013e56:	4004      	ands	r4, r0
 8013e58:	4620      	mov	r0, r4
 8013e5a:	bd70      	pop	{r4, r5, r6, pc}

08013e5c <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8013e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e60:	460c      	mov	r4, r1
 8013e62:	7809      	ldrb	r1, [r1, #0]
 8013e64:	4606      	mov	r6, r0
 8013e66:	f7fc f95f 	bl	8010128 <ucdr_serialize_bool>
 8013e6a:	7823      	ldrb	r3, [r4, #0]
 8013e6c:	4605      	mov	r5, r0
 8013e6e:	b96b      	cbnz	r3, 8013e8c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8013e70:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8013e74:	4630      	mov	r0, r6
 8013e76:	f7fc f957 	bl	8010128 <ucdr_serialize_bool>
 8013e7a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8013e7e:	4005      	ands	r5, r0
 8013e80:	b2ed      	uxtb	r5, r5
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d169      	bne.n	8013f5a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8013e86:	4628      	mov	r0, r5
 8013e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e8c:	6861      	ldr	r1, [r4, #4]
 8013e8e:	4630      	mov	r0, r6
 8013e90:	f7fc fb8e 	bl	80105b0 <ucdr_serialize_uint32_t>
 8013e94:	6863      	ldr	r3, [r4, #4]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d06b      	beq.n	8013f72 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8013e9a:	2800      	cmp	r0, #0
 8013e9c:	d067      	beq.n	8013f6e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013e9e:	68a1      	ldr	r1, [r4, #8]
 8013ea0:	4630      	mov	r0, r6
 8013ea2:	f006 ff57 	bl	801ad54 <ucdr_serialize_string>
 8013ea6:	6863      	ldr	r3, [r4, #4]
 8013ea8:	2b01      	cmp	r3, #1
 8013eaa:	d953      	bls.n	8013f54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013eac:	2800      	cmp	r0, #0
 8013eae:	d05e      	beq.n	8013f6e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013eb0:	68e1      	ldr	r1, [r4, #12]
 8013eb2:	4630      	mov	r0, r6
 8013eb4:	f006 ff4e 	bl	801ad54 <ucdr_serialize_string>
 8013eb8:	6863      	ldr	r3, [r4, #4]
 8013eba:	2b02      	cmp	r3, #2
 8013ebc:	d94a      	bls.n	8013f54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013ebe:	2800      	cmp	r0, #0
 8013ec0:	d055      	beq.n	8013f6e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013ec2:	6921      	ldr	r1, [r4, #16]
 8013ec4:	4630      	mov	r0, r6
 8013ec6:	f006 ff45 	bl	801ad54 <ucdr_serialize_string>
 8013eca:	6863      	ldr	r3, [r4, #4]
 8013ecc:	2b03      	cmp	r3, #3
 8013ece:	d941      	bls.n	8013f54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013ed0:	2800      	cmp	r0, #0
 8013ed2:	d04c      	beq.n	8013f6e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013ed4:	6961      	ldr	r1, [r4, #20]
 8013ed6:	4630      	mov	r0, r6
 8013ed8:	f006 ff3c 	bl	801ad54 <ucdr_serialize_string>
 8013edc:	6863      	ldr	r3, [r4, #4]
 8013ede:	2b04      	cmp	r3, #4
 8013ee0:	d938      	bls.n	8013f54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013ee2:	2800      	cmp	r0, #0
 8013ee4:	d043      	beq.n	8013f6e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013ee6:	69a1      	ldr	r1, [r4, #24]
 8013ee8:	4630      	mov	r0, r6
 8013eea:	f006 ff33 	bl	801ad54 <ucdr_serialize_string>
 8013eee:	6863      	ldr	r3, [r4, #4]
 8013ef0:	2b05      	cmp	r3, #5
 8013ef2:	d92f      	bls.n	8013f54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013ef4:	2800      	cmp	r0, #0
 8013ef6:	d03a      	beq.n	8013f6e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013ef8:	69e1      	ldr	r1, [r4, #28]
 8013efa:	4630      	mov	r0, r6
 8013efc:	f006 ff2a 	bl	801ad54 <ucdr_serialize_string>
 8013f00:	6863      	ldr	r3, [r4, #4]
 8013f02:	2b06      	cmp	r3, #6
 8013f04:	d926      	bls.n	8013f54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013f06:	b390      	cbz	r0, 8013f6e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013f08:	6a21      	ldr	r1, [r4, #32]
 8013f0a:	4630      	mov	r0, r6
 8013f0c:	f006 ff22 	bl	801ad54 <ucdr_serialize_string>
 8013f10:	6863      	ldr	r3, [r4, #4]
 8013f12:	2b07      	cmp	r3, #7
 8013f14:	d91e      	bls.n	8013f54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013f16:	b350      	cbz	r0, 8013f6e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013f18:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013f1a:	4630      	mov	r0, r6
 8013f1c:	f006 ff1a 	bl	801ad54 <ucdr_serialize_string>
 8013f20:	6863      	ldr	r3, [r4, #4]
 8013f22:	2b08      	cmp	r3, #8
 8013f24:	d916      	bls.n	8013f54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013f26:	b310      	cbz	r0, 8013f6e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013f28:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013f2a:	4630      	mov	r0, r6
 8013f2c:	f006 ff12 	bl	801ad54 <ucdr_serialize_string>
 8013f30:	6863      	ldr	r3, [r4, #4]
 8013f32:	2b09      	cmp	r3, #9
 8013f34:	d90e      	bls.n	8013f54 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8013f36:	b1d0      	cbz	r0, 8013f6e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013f38:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8013f3c:	2709      	movs	r7, #9
 8013f3e:	e000      	b.n	8013f42 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8013f40:	b1a8      	cbz	r0, 8013f6e <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8013f42:	f858 1b04 	ldr.w	r1, [r8], #4
 8013f46:	4630      	mov	r0, r6
 8013f48:	f006 ff04 	bl	801ad54 <ucdr_serialize_string>
 8013f4c:	3701      	adds	r7, #1
 8013f4e:	6862      	ldr	r2, [r4, #4]
 8013f50:	4297      	cmp	r7, r2
 8013f52:	d3f5      	bcc.n	8013f40 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8013f54:	4005      	ands	r5, r0
 8013f56:	b2ed      	uxtb	r5, r5
 8013f58:	e78a      	b.n	8013e70 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013f5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8013f5c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8013f60:	4630      	mov	r0, r6
 8013f62:	f006 fecb 	bl	801acfc <ucdr_serialize_sequence_uint8_t>
 8013f66:	4005      	ands	r5, r0
 8013f68:	4628      	mov	r0, r5
 8013f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f6e:	2500      	movs	r5, #0
 8013f70:	e77e      	b.n	8013e70 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8013f72:	4028      	ands	r0, r5
 8013f74:	b2c5      	uxtb	r5, r0
 8013f76:	e77b      	b.n	8013e70 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08013f78 <uxr_serialize_OBJK_Subscriber_Binary>:
 8013f78:	b570      	push	{r4, r5, r6, lr}
 8013f7a:	460d      	mov	r5, r1
 8013f7c:	7809      	ldrb	r1, [r1, #0]
 8013f7e:	4606      	mov	r6, r0
 8013f80:	f7fc f8d2 	bl	8010128 <ucdr_serialize_bool>
 8013f84:	782b      	ldrb	r3, [r5, #0]
 8013f86:	4604      	mov	r4, r0
 8013f88:	b94b      	cbnz	r3, 8013f9e <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8013f8a:	7a29      	ldrb	r1, [r5, #8]
 8013f8c:	4630      	mov	r0, r6
 8013f8e:	f7fc f8cb 	bl	8010128 <ucdr_serialize_bool>
 8013f92:	7a2b      	ldrb	r3, [r5, #8]
 8013f94:	4004      	ands	r4, r0
 8013f96:	b2e4      	uxtb	r4, r4
 8013f98:	b943      	cbnz	r3, 8013fac <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8013f9a:	4620      	mov	r0, r4
 8013f9c:	bd70      	pop	{r4, r5, r6, pc}
 8013f9e:	6869      	ldr	r1, [r5, #4]
 8013fa0:	4630      	mov	r0, r6
 8013fa2:	f006 fed7 	bl	801ad54 <ucdr_serialize_string>
 8013fa6:	4004      	ands	r4, r0
 8013fa8:	b2e4      	uxtb	r4, r4
 8013faa:	e7ee      	b.n	8013f8a <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8013fac:	f105 010c 	add.w	r1, r5, #12
 8013fb0:	4630      	mov	r0, r6
 8013fb2:	f7ff ff53 	bl	8013e5c <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8013fb6:	4004      	ands	r4, r0
 8013fb8:	4620      	mov	r0, r4
 8013fba:	bd70      	pop	{r4, r5, r6, pc}

08013fbc <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8013fbc:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8013fc0:	4688      	mov	r8, r1
 8013fc2:	4681      	mov	r9, r0
 8013fc4:	8809      	ldrh	r1, [r1, #0]
 8013fc6:	f7fc f909 	bl	80101dc <ucdr_serialize_uint16_t>
 8013fca:	4606      	mov	r6, r0
 8013fcc:	f898 1002 	ldrb.w	r1, [r8, #2]
 8013fd0:	4648      	mov	r0, r9
 8013fd2:	f7fc f8a9 	bl	8010128 <ucdr_serialize_bool>
 8013fd6:	f898 3002 	ldrb.w	r3, [r8, #2]
 8013fda:	4006      	ands	r6, r0
 8013fdc:	b2f5      	uxtb	r5, r6
 8013fde:	b9eb      	cbnz	r3, 801401c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8013fe0:	f898 1006 	ldrb.w	r1, [r8, #6]
 8013fe4:	4648      	mov	r0, r9
 8013fe6:	f7fc f89f 	bl	8010128 <ucdr_serialize_bool>
 8013fea:	f898 3006 	ldrb.w	r3, [r8, #6]
 8013fee:	4005      	ands	r5, r0
 8013ff0:	bb7b      	cbnz	r3, 8014052 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8013ff2:	f898 100c 	ldrb.w	r1, [r8, #12]
 8013ff6:	4648      	mov	r0, r9
 8013ff8:	f7fc f896 	bl	8010128 <ucdr_serialize_bool>
 8013ffc:	f898 300c 	ldrb.w	r3, [r8, #12]
 8014000:	4005      	ands	r5, r0
 8014002:	b9f3      	cbnz	r3, 8014042 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8014004:	f898 1014 	ldrb.w	r1, [r8, #20]
 8014008:	4648      	mov	r0, r9
 801400a:	f7fc f88d 	bl	8010128 <ucdr_serialize_bool>
 801400e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8014012:	4005      	ands	r5, r0
 8014014:	b94b      	cbnz	r3, 801402a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8014016:	4628      	mov	r0, r5
 8014018:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801401c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8014020:	4648      	mov	r0, r9
 8014022:	f7fc f8db 	bl	80101dc <ucdr_serialize_uint16_t>
 8014026:	4005      	ands	r5, r0
 8014028:	e7da      	b.n	8013fe0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801402a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801402e:	f108 011c 	add.w	r1, r8, #28
 8014032:	4648      	mov	r0, r9
 8014034:	f006 fe62 	bl	801acfc <ucdr_serialize_sequence_uint8_t>
 8014038:	4028      	ands	r0, r5
 801403a:	b2c5      	uxtb	r5, r0
 801403c:	4628      	mov	r0, r5
 801403e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8014042:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014046:	4648      	mov	r0, r9
 8014048:	f7fc fab2 	bl	80105b0 <ucdr_serialize_uint32_t>
 801404c:	4028      	ands	r0, r5
 801404e:	b2c5      	uxtb	r5, r0
 8014050:	e7d8      	b.n	8014004 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8014052:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8014056:	4648      	mov	r0, r9
 8014058:	f7fc faaa 	bl	80105b0 <ucdr_serialize_uint32_t>
 801405c:	4028      	ands	r0, r5
 801405e:	b2c5      	uxtb	r5, r0
 8014060:	e7c7      	b.n	8013ff2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8014062:	bf00      	nop

08014064 <uxr_serialize_OBJK_DataReader_Binary>:
 8014064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014066:	2202      	movs	r2, #2
 8014068:	460c      	mov	r4, r1
 801406a:	4606      	mov	r6, r0
 801406c:	f7fb fe3e 	bl	800fcec <ucdr_serialize_array_uint8_t>
 8014070:	4605      	mov	r5, r0
 8014072:	78a1      	ldrb	r1, [r4, #2]
 8014074:	4630      	mov	r0, r6
 8014076:	f7fc f857 	bl	8010128 <ucdr_serialize_bool>
 801407a:	78a3      	ldrb	r3, [r4, #2]
 801407c:	4005      	ands	r5, r0
 801407e:	b2ed      	uxtb	r5, r5
 8014080:	b90b      	cbnz	r3, 8014086 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8014082:	4628      	mov	r0, r5
 8014084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014086:	f104 0108 	add.w	r1, r4, #8
 801408a:	4630      	mov	r0, r6
 801408c:	f7ff ff96 	bl	8013fbc <uxr_serialize_OBJK_Endpoint_QosBinary>
 8014090:	4607      	mov	r7, r0
 8014092:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8014096:	4630      	mov	r0, r6
 8014098:	f7fc f846 	bl	8010128 <ucdr_serialize_bool>
 801409c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80140a0:	4038      	ands	r0, r7
 80140a2:	b2c7      	uxtb	r7, r0
 80140a4:	b95b      	cbnz	r3, 80140be <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 80140a6:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 80140aa:	4630      	mov	r0, r6
 80140ac:	f7fc f83c 	bl	8010128 <ucdr_serialize_bool>
 80140b0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80140b4:	4007      	ands	r7, r0
 80140b6:	b94b      	cbnz	r3, 80140cc <uxr_serialize_OBJK_DataReader_Binary+0x68>
 80140b8:	403d      	ands	r5, r7
 80140ba:	4628      	mov	r0, r5
 80140bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140be:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 80140c2:	4630      	mov	r0, r6
 80140c4:	f7fc fcca 	bl	8010a5c <ucdr_serialize_uint64_t>
 80140c8:	4007      	ands	r7, r0
 80140ca:	e7ec      	b.n	80140a6 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 80140cc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80140ce:	4630      	mov	r0, r6
 80140d0:	f006 fe40 	bl	801ad54 <ucdr_serialize_string>
 80140d4:	4007      	ands	r7, r0
 80140d6:	b2ff      	uxtb	r7, r7
 80140d8:	e7ee      	b.n	80140b8 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 80140da:	bf00      	nop

080140dc <uxr_serialize_OBJK_DataWriter_Binary>:
 80140dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140de:	2202      	movs	r2, #2
 80140e0:	460d      	mov	r5, r1
 80140e2:	4606      	mov	r6, r0
 80140e4:	f7fb fe02 	bl	800fcec <ucdr_serialize_array_uint8_t>
 80140e8:	4604      	mov	r4, r0
 80140ea:	78a9      	ldrb	r1, [r5, #2]
 80140ec:	4630      	mov	r0, r6
 80140ee:	f7fc f81b 	bl	8010128 <ucdr_serialize_bool>
 80140f2:	78ab      	ldrb	r3, [r5, #2]
 80140f4:	4004      	ands	r4, r0
 80140f6:	b2e4      	uxtb	r4, r4
 80140f8:	b90b      	cbnz	r3, 80140fe <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 80140fa:	4620      	mov	r0, r4
 80140fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140fe:	f105 0108 	add.w	r1, r5, #8
 8014102:	4630      	mov	r0, r6
 8014104:	f7ff ff5a 	bl	8013fbc <uxr_serialize_OBJK_Endpoint_QosBinary>
 8014108:	4607      	mov	r7, r0
 801410a:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 801410e:	4630      	mov	r0, r6
 8014110:	f7fc f80a 	bl	8010128 <ucdr_serialize_bool>
 8014114:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8014118:	4038      	ands	r0, r7
 801411a:	b2c7      	uxtb	r7, r0
 801411c:	b913      	cbnz	r3, 8014124 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801411e:	403c      	ands	r4, r7
 8014120:	4620      	mov	r0, r4
 8014122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014124:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8014128:	4630      	mov	r0, r6
 801412a:	f7fc fc97 	bl	8010a5c <ucdr_serialize_uint64_t>
 801412e:	4007      	ands	r7, r0
 8014130:	e7f5      	b.n	801411e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8014132:	bf00      	nop

08014134 <uxr_serialize_OBJK_Replier_Binary>:
 8014134:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8014138:	460f      	mov	r7, r1
 801413a:	4680      	mov	r8, r0
 801413c:	6809      	ldr	r1, [r1, #0]
 801413e:	f006 fe09 	bl	801ad54 <ucdr_serialize_string>
 8014142:	4605      	mov	r5, r0
 8014144:	6879      	ldr	r1, [r7, #4]
 8014146:	4640      	mov	r0, r8
 8014148:	f006 fe04 	bl	801ad54 <ucdr_serialize_string>
 801414c:	4005      	ands	r5, r0
 801414e:	68b9      	ldr	r1, [r7, #8]
 8014150:	4640      	mov	r0, r8
 8014152:	b2ec      	uxtb	r4, r5
 8014154:	f006 fdfe 	bl	801ad54 <ucdr_serialize_string>
 8014158:	7b39      	ldrb	r1, [r7, #12]
 801415a:	4004      	ands	r4, r0
 801415c:	4640      	mov	r0, r8
 801415e:	f7fb ffe3 	bl	8010128 <ucdr_serialize_bool>
 8014162:	7b3b      	ldrb	r3, [r7, #12]
 8014164:	4004      	ands	r4, r0
 8014166:	b94b      	cbnz	r3, 801417c <uxr_serialize_OBJK_Replier_Binary+0x48>
 8014168:	7d39      	ldrb	r1, [r7, #20]
 801416a:	4640      	mov	r0, r8
 801416c:	f7fb ffdc 	bl	8010128 <ucdr_serialize_bool>
 8014170:	7d3b      	ldrb	r3, [r7, #20]
 8014172:	4004      	ands	r4, r0
 8014174:	b943      	cbnz	r3, 8014188 <uxr_serialize_OBJK_Replier_Binary+0x54>
 8014176:	4620      	mov	r0, r4
 8014178:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801417c:	6939      	ldr	r1, [r7, #16]
 801417e:	4640      	mov	r0, r8
 8014180:	f006 fde8 	bl	801ad54 <ucdr_serialize_string>
 8014184:	4004      	ands	r4, r0
 8014186:	e7ef      	b.n	8014168 <uxr_serialize_OBJK_Replier_Binary+0x34>
 8014188:	69b9      	ldr	r1, [r7, #24]
 801418a:	4640      	mov	r0, r8
 801418c:	f006 fde2 	bl	801ad54 <ucdr_serialize_string>
 8014190:	4004      	ands	r4, r0
 8014192:	b2e4      	uxtb	r4, r4
 8014194:	4620      	mov	r0, r4
 8014196:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 801419a:	bf00      	nop

0801419c <uxr_deserialize_ObjectVariant>:
 801419c:	b570      	push	{r4, r5, r6, lr}
 801419e:	4605      	mov	r5, r0
 80141a0:	460e      	mov	r6, r1
 80141a2:	f7fc f805 	bl	80101b0 <ucdr_deserialize_uint8_t>
 80141a6:	b168      	cbz	r0, 80141c4 <uxr_deserialize_ObjectVariant+0x28>
 80141a8:	7833      	ldrb	r3, [r6, #0]
 80141aa:	4604      	mov	r4, r0
 80141ac:	3b01      	subs	r3, #1
 80141ae:	2b0d      	cmp	r3, #13
 80141b0:	d809      	bhi.n	80141c6 <uxr_deserialize_ObjectVariant+0x2a>
 80141b2:	e8df f003 	tbb	[pc, r3]
 80141b6:	0a41      	.short	0x0a41
 80141b8:	0a0a2323 	.word	0x0a0a2323
 80141bc:	10080a0a 	.word	0x10080a0a
 80141c0:	565c1010 	.word	0x565c1010
 80141c4:	2400      	movs	r4, #0
 80141c6:	4620      	mov	r0, r4
 80141c8:	bd70      	pop	{r4, r5, r6, pc}
 80141ca:	1d31      	adds	r1, r6, #4
 80141cc:	4628      	mov	r0, r5
 80141ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80141d2:	f7ff bd21 	b.w	8013c18 <uxr_deserialize_DATAWRITER_Representation>
 80141d6:	1d31      	adds	r1, r6, #4
 80141d8:	4628      	mov	r0, r5
 80141da:	f7fb ffe9 	bl	80101b0 <ucdr_deserialize_uint8_t>
 80141de:	2800      	cmp	r0, #0
 80141e0:	d0f0      	beq.n	80141c4 <uxr_deserialize_ObjectVariant+0x28>
 80141e2:	7933      	ldrb	r3, [r6, #4]
 80141e4:	2b01      	cmp	r3, #1
 80141e6:	d001      	beq.n	80141ec <uxr_deserialize_ObjectVariant+0x50>
 80141e8:	2b02      	cmp	r3, #2
 80141ea:	d1ec      	bne.n	80141c6 <uxr_deserialize_ObjectVariant+0x2a>
 80141ec:	68b1      	ldr	r1, [r6, #8]
 80141ee:	4628      	mov	r0, r5
 80141f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80141f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80141f8:	f006 bdbc 	b.w	801ad74 <ucdr_deserialize_string>
 80141fc:	1d31      	adds	r1, r6, #4
 80141fe:	4628      	mov	r0, r5
 8014200:	f7fb ffd6 	bl	80101b0 <ucdr_deserialize_uint8_t>
 8014204:	4604      	mov	r4, r0
 8014206:	b170      	cbz	r0, 8014226 <uxr_deserialize_ObjectVariant+0x8a>
 8014208:	7933      	ldrb	r3, [r6, #4]
 801420a:	2b02      	cmp	r3, #2
 801420c:	d04c      	beq.n	80142a8 <uxr_deserialize_ObjectVariant+0x10c>
 801420e:	2b03      	cmp	r3, #3
 8014210:	d109      	bne.n	8014226 <uxr_deserialize_ObjectVariant+0x8a>
 8014212:	f106 0308 	add.w	r3, r6, #8
 8014216:	f44f 7200 	mov.w	r2, #512	; 0x200
 801421a:	f106 010c 	add.w	r1, r6, #12
 801421e:	4628      	mov	r0, r5
 8014220:	f006 fd7e 	bl	801ad20 <ucdr_deserialize_sequence_uint8_t>
 8014224:	4604      	mov	r4, r0
 8014226:	2202      	movs	r2, #2
 8014228:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801422c:	4628      	mov	r0, r5
 801422e:	f7fb fdc1 	bl	800fdb4 <ucdr_deserialize_array_uint8_t>
 8014232:	4020      	ands	r0, r4
 8014234:	b2c4      	uxtb	r4, r0
 8014236:	e7c6      	b.n	80141c6 <uxr_deserialize_ObjectVariant+0x2a>
 8014238:	1d31      	adds	r1, r6, #4
 801423a:	4628      	mov	r0, r5
 801423c:	f7fb ffb8 	bl	80101b0 <ucdr_deserialize_uint8_t>
 8014240:	4604      	mov	r4, r0
 8014242:	b130      	cbz	r0, 8014252 <uxr_deserialize_ObjectVariant+0xb6>
 8014244:	7933      	ldrb	r3, [r6, #4]
 8014246:	2b02      	cmp	r3, #2
 8014248:	d036      	beq.n	80142b8 <uxr_deserialize_ObjectVariant+0x11c>
 801424a:	2b03      	cmp	r3, #3
 801424c:	d03c      	beq.n	80142c8 <uxr_deserialize_ObjectVariant+0x12c>
 801424e:	2b01      	cmp	r3, #1
 8014250:	d032      	beq.n	80142b8 <uxr_deserialize_ObjectVariant+0x11c>
 8014252:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8014256:	4628      	mov	r0, r5
 8014258:	f7fc fdd0 	bl	8010dfc <ucdr_deserialize_int16_t>
 801425c:	4020      	ands	r0, r4
 801425e:	b2c4      	uxtb	r4, r0
 8014260:	e7b1      	b.n	80141c6 <uxr_deserialize_ObjectVariant+0x2a>
 8014262:	1d31      	adds	r1, r6, #4
 8014264:	4628      	mov	r0, r5
 8014266:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801426a:	f7ff bb8b 	b.w	8013984 <uxr_deserialize_CLIENT_Representation>
 801426e:	2204      	movs	r2, #4
 8014270:	4628      	mov	r0, r5
 8014272:	18b1      	adds	r1, r6, r2
 8014274:	f7fb fd9e 	bl	800fdb4 <ucdr_deserialize_array_uint8_t>
 8014278:	4604      	mov	r4, r0
 801427a:	2202      	movs	r2, #2
 801427c:	f106 0108 	add.w	r1, r6, #8
 8014280:	4628      	mov	r0, r5
 8014282:	f7fb fd97 	bl	800fdb4 <ucdr_deserialize_array_uint8_t>
 8014286:	4004      	ands	r4, r0
 8014288:	2202      	movs	r2, #2
 801428a:	f106 010a 	add.w	r1, r6, #10
 801428e:	4628      	mov	r0, r5
 8014290:	b2e4      	uxtb	r4, r4
 8014292:	f7fb fd8f 	bl	800fdb4 <ucdr_deserialize_array_uint8_t>
 8014296:	4603      	mov	r3, r0
 8014298:	f106 010c 	add.w	r1, r6, #12
 801429c:	4628      	mov	r0, r5
 801429e:	401c      	ands	r4, r3
 80142a0:	f7fb ff58 	bl	8010154 <ucdr_deserialize_bool>
 80142a4:	4004      	ands	r4, r0
 80142a6:	e78e      	b.n	80141c6 <uxr_deserialize_ObjectVariant+0x2a>
 80142a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80142ac:	68b1      	ldr	r1, [r6, #8]
 80142ae:	4628      	mov	r0, r5
 80142b0:	f006 fd60 	bl	801ad74 <ucdr_deserialize_string>
 80142b4:	4604      	mov	r4, r0
 80142b6:	e7b6      	b.n	8014226 <uxr_deserialize_ObjectVariant+0x8a>
 80142b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80142bc:	68b1      	ldr	r1, [r6, #8]
 80142be:	4628      	mov	r0, r5
 80142c0:	f006 fd58 	bl	801ad74 <ucdr_deserialize_string>
 80142c4:	4604      	mov	r4, r0
 80142c6:	e7c4      	b.n	8014252 <uxr_deserialize_ObjectVariant+0xb6>
 80142c8:	f106 0308 	add.w	r3, r6, #8
 80142cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80142d0:	f106 010c 	add.w	r1, r6, #12
 80142d4:	4628      	mov	r0, r5
 80142d6:	f006 fd23 	bl	801ad20 <ucdr_deserialize_sequence_uint8_t>
 80142da:	4604      	mov	r4, r0
 80142dc:	e7b9      	b.n	8014252 <uxr_deserialize_ObjectVariant+0xb6>
 80142de:	bf00      	nop

080142e0 <uxr_deserialize_BaseObjectRequest>:
 80142e0:	b570      	push	{r4, r5, r6, lr}
 80142e2:	2202      	movs	r2, #2
 80142e4:	4605      	mov	r5, r0
 80142e6:	460e      	mov	r6, r1
 80142e8:	f7fb fd64 	bl	800fdb4 <ucdr_deserialize_array_uint8_t>
 80142ec:	2202      	movs	r2, #2
 80142ee:	4604      	mov	r4, r0
 80142f0:	4628      	mov	r0, r5
 80142f2:	18b1      	adds	r1, r6, r2
 80142f4:	f7fb fd5e 	bl	800fdb4 <ucdr_deserialize_array_uint8_t>
 80142f8:	4020      	ands	r0, r4
 80142fa:	b2c0      	uxtb	r0, r0
 80142fc:	bd70      	pop	{r4, r5, r6, pc}
 80142fe:	bf00      	nop

08014300 <uxr_serialize_ActivityInfoVariant>:
 8014300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014304:	460e      	mov	r6, r1
 8014306:	7809      	ldrb	r1, [r1, #0]
 8014308:	4680      	mov	r8, r0
 801430a:	f7fb ff3b 	bl	8010184 <ucdr_serialize_uint8_t>
 801430e:	4607      	mov	r7, r0
 8014310:	b138      	cbz	r0, 8014322 <uxr_serialize_ActivityInfoVariant+0x22>
 8014312:	7833      	ldrb	r3, [r6, #0]
 8014314:	2b06      	cmp	r3, #6
 8014316:	f000 8081 	beq.w	801441c <uxr_serialize_ActivityInfoVariant+0x11c>
 801431a:	2b0d      	cmp	r3, #13
 801431c:	d014      	beq.n	8014348 <uxr_serialize_ActivityInfoVariant+0x48>
 801431e:	2b05      	cmp	r3, #5
 8014320:	d002      	beq.n	8014328 <uxr_serialize_ActivityInfoVariant+0x28>
 8014322:	4638      	mov	r0, r7
 8014324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014328:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801432c:	4640      	mov	r0, r8
 801432e:	f7fc fc65 	bl	8010bfc <ucdr_serialize_int16_t>
 8014332:	4607      	mov	r7, r0
 8014334:	4640      	mov	r0, r8
 8014336:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801433a:	f7fc fb8f 	bl	8010a5c <ucdr_serialize_uint64_t>
 801433e:	4038      	ands	r0, r7
 8014340:	b2c7      	uxtb	r7, r0
 8014342:	4638      	mov	r0, r7
 8014344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014348:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801434c:	4640      	mov	r0, r8
 801434e:	f7fc fc55 	bl	8010bfc <ucdr_serialize_int16_t>
 8014352:	68f1      	ldr	r1, [r6, #12]
 8014354:	4607      	mov	r7, r0
 8014356:	4640      	mov	r0, r8
 8014358:	f7fc f92a 	bl	80105b0 <ucdr_serialize_uint32_t>
 801435c:	68f3      	ldr	r3, [r6, #12]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d0ed      	beq.n	801433e <uxr_serialize_ActivityInfoVariant+0x3e>
 8014362:	b318      	cbz	r0, 80143ac <uxr_serialize_ActivityInfoVariant+0xac>
 8014364:	f106 090c 	add.w	r9, r6, #12
 8014368:	2400      	movs	r4, #0
 801436a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801436e:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8014372:	7c29      	ldrb	r1, [r5, #16]
 8014374:	4640      	mov	r0, r8
 8014376:	f7fb ff05 	bl	8010184 <ucdr_serialize_uint8_t>
 801437a:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801437e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8014382:	2800      	cmp	r0, #0
 8014384:	d051      	beq.n	801442a <uxr_serialize_ActivityInfoVariant+0x12a>
 8014386:	7c2b      	ldrb	r3, [r5, #16]
 8014388:	00c9      	lsls	r1, r1, #3
 801438a:	2b03      	cmp	r3, #3
 801438c:	d854      	bhi.n	8014438 <uxr_serialize_ActivityInfoVariant+0x138>
 801438e:	e8df f003 	tbb	[pc, r3]
 8014392:	2133      	.short	0x2133
 8014394:	020f      	.short	0x020f
 8014396:	4449      	add	r1, r9
 8014398:	4640      	mov	r0, r8
 801439a:	6889      	ldr	r1, [r1, #8]
 801439c:	f006 fcda 	bl	801ad54 <ucdr_serialize_string>
 80143a0:	3401      	adds	r4, #1
 80143a2:	68f2      	ldr	r2, [r6, #12]
 80143a4:	4294      	cmp	r4, r2
 80143a6:	d244      	bcs.n	8014432 <uxr_serialize_ActivityInfoVariant+0x132>
 80143a8:	2800      	cmp	r0, #0
 80143aa:	d1de      	bne.n	801436a <uxr_serialize_ActivityInfoVariant+0x6a>
 80143ac:	2700      	movs	r7, #0
 80143ae:	e7b8      	b.n	8014322 <uxr_serialize_ActivityInfoVariant+0x22>
 80143b0:	3108      	adds	r1, #8
 80143b2:	44a2      	add	sl, r4
 80143b4:	2210      	movs	r2, #16
 80143b6:	4640      	mov	r0, r8
 80143b8:	4449      	add	r1, r9
 80143ba:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80143be:	f7fb fc95 	bl	800fcec <ucdr_serialize_array_uint8_t>
 80143c2:	4605      	mov	r5, r0
 80143c4:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 80143c8:	4640      	mov	r0, r8
 80143ca:	f7fc f8f1 	bl	80105b0 <ucdr_serialize_uint32_t>
 80143ce:	4028      	ands	r0, r5
 80143d0:	b2c0      	uxtb	r0, r0
 80143d2:	e7e5      	b.n	80143a0 <uxr_serialize_ActivityInfoVariant+0xa0>
 80143d4:	3108      	adds	r1, #8
 80143d6:	44a2      	add	sl, r4
 80143d8:	2204      	movs	r2, #4
 80143da:	4640      	mov	r0, r8
 80143dc:	4449      	add	r1, r9
 80143de:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80143e2:	f7fb fc83 	bl	800fcec <ucdr_serialize_array_uint8_t>
 80143e6:	4605      	mov	r5, r0
 80143e8:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 80143ec:	4640      	mov	r0, r8
 80143ee:	f7fb fef5 	bl	80101dc <ucdr_serialize_uint16_t>
 80143f2:	4028      	ands	r0, r5
 80143f4:	b2c0      	uxtb	r0, r0
 80143f6:	e7d3      	b.n	80143a0 <uxr_serialize_ActivityInfoVariant+0xa0>
 80143f8:	3108      	adds	r1, #8
 80143fa:	44a2      	add	sl, r4
 80143fc:	2202      	movs	r2, #2
 80143fe:	4640      	mov	r0, r8
 8014400:	4449      	add	r1, r9
 8014402:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8014406:	f7fb fc71 	bl	800fcec <ucdr_serialize_array_uint8_t>
 801440a:	4605      	mov	r5, r0
 801440c:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8014410:	4640      	mov	r0, r8
 8014412:	f7fb feb7 	bl	8010184 <ucdr_serialize_uint8_t>
 8014416:	4028      	ands	r0, r5
 8014418:	b2c0      	uxtb	r0, r0
 801441a:	e7c1      	b.n	80143a0 <uxr_serialize_ActivityInfoVariant+0xa0>
 801441c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8014420:	4640      	mov	r0, r8
 8014422:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014426:	f7fc bbe9 	b.w	8010bfc <ucdr_serialize_int16_t>
 801442a:	3401      	adds	r4, #1
 801442c:	68f2      	ldr	r2, [r6, #12]
 801442e:	42a2      	cmp	r2, r4
 8014430:	d8bc      	bhi.n	80143ac <uxr_serialize_ActivityInfoVariant+0xac>
 8014432:	4007      	ands	r7, r0
 8014434:	b2ff      	uxtb	r7, r7
 8014436:	e774      	b.n	8014322 <uxr_serialize_ActivityInfoVariant+0x22>
 8014438:	3401      	adds	r4, #1
 801443a:	68f3      	ldr	r3, [r6, #12]
 801443c:	3518      	adds	r5, #24
 801443e:	429c      	cmp	r4, r3
 8014440:	d397      	bcc.n	8014372 <uxr_serialize_ActivityInfoVariant+0x72>
 8014442:	e76e      	b.n	8014322 <uxr_serialize_ActivityInfoVariant+0x22>

08014444 <uxr_deserialize_BaseObjectReply>:
 8014444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014448:	2202      	movs	r2, #2
 801444a:	4606      	mov	r6, r0
 801444c:	460f      	mov	r7, r1
 801444e:	f7fb fcb1 	bl	800fdb4 <ucdr_deserialize_array_uint8_t>
 8014452:	2202      	movs	r2, #2
 8014454:	4605      	mov	r5, r0
 8014456:	4630      	mov	r0, r6
 8014458:	18b9      	adds	r1, r7, r2
 801445a:	f7fb fcab 	bl	800fdb4 <ucdr_deserialize_array_uint8_t>
 801445e:	4680      	mov	r8, r0
 8014460:	1d39      	adds	r1, r7, #4
 8014462:	4630      	mov	r0, r6
 8014464:	f7fb fea4 	bl	80101b0 <ucdr_deserialize_uint8_t>
 8014468:	ea05 0508 	and.w	r5, r5, r8
 801446c:	4604      	mov	r4, r0
 801446e:	1d79      	adds	r1, r7, #5
 8014470:	4630      	mov	r0, r6
 8014472:	402c      	ands	r4, r5
 8014474:	f7fb fe9c 	bl	80101b0 <ucdr_deserialize_uint8_t>
 8014478:	4020      	ands	r0, r4
 801447a:	b2c0      	uxtb	r0, r0
 801447c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014480 <uxr_serialize_ReadSpecification>:
 8014480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014482:	460e      	mov	r6, r1
 8014484:	4607      	mov	r7, r0
 8014486:	7809      	ldrb	r1, [r1, #0]
 8014488:	f7fb fe7c 	bl	8010184 <ucdr_serialize_uint8_t>
 801448c:	4604      	mov	r4, r0
 801448e:	7871      	ldrb	r1, [r6, #1]
 8014490:	4638      	mov	r0, r7
 8014492:	f7fb fe77 	bl	8010184 <ucdr_serialize_uint8_t>
 8014496:	4004      	ands	r4, r0
 8014498:	78b1      	ldrb	r1, [r6, #2]
 801449a:	4638      	mov	r0, r7
 801449c:	f7fb fe44 	bl	8010128 <ucdr_serialize_bool>
 80144a0:	78b3      	ldrb	r3, [r6, #2]
 80144a2:	b2e4      	uxtb	r4, r4
 80144a4:	4004      	ands	r4, r0
 80144a6:	b943      	cbnz	r3, 80144ba <uxr_serialize_ReadSpecification+0x3a>
 80144a8:	7a31      	ldrb	r1, [r6, #8]
 80144aa:	4638      	mov	r0, r7
 80144ac:	f7fb fe3c 	bl	8010128 <ucdr_serialize_bool>
 80144b0:	7a33      	ldrb	r3, [r6, #8]
 80144b2:	4004      	ands	r4, r0
 80144b4:	b93b      	cbnz	r3, 80144c6 <uxr_serialize_ReadSpecification+0x46>
 80144b6:	4620      	mov	r0, r4
 80144b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144ba:	6871      	ldr	r1, [r6, #4]
 80144bc:	4638      	mov	r0, r7
 80144be:	f006 fc49 	bl	801ad54 <ucdr_serialize_string>
 80144c2:	4004      	ands	r4, r0
 80144c4:	e7f0      	b.n	80144a8 <uxr_serialize_ReadSpecification+0x28>
 80144c6:	8971      	ldrh	r1, [r6, #10]
 80144c8:	4638      	mov	r0, r7
 80144ca:	f7fb fe87 	bl	80101dc <ucdr_serialize_uint16_t>
 80144ce:	4605      	mov	r5, r0
 80144d0:	89b1      	ldrh	r1, [r6, #12]
 80144d2:	4638      	mov	r0, r7
 80144d4:	f7fb fe82 	bl	80101dc <ucdr_serialize_uint16_t>
 80144d8:	4005      	ands	r5, r0
 80144da:	89f1      	ldrh	r1, [r6, #14]
 80144dc:	4638      	mov	r0, r7
 80144de:	b2ed      	uxtb	r5, r5
 80144e0:	f7fb fe7c 	bl	80101dc <ucdr_serialize_uint16_t>
 80144e4:	8a31      	ldrh	r1, [r6, #16]
 80144e6:	4025      	ands	r5, r4
 80144e8:	4604      	mov	r4, r0
 80144ea:	4638      	mov	r0, r7
 80144ec:	4025      	ands	r5, r4
 80144ee:	f7fb fe75 	bl	80101dc <ucdr_serialize_uint16_t>
 80144f2:	ea00 0405 	and.w	r4, r0, r5
 80144f6:	4620      	mov	r0, r4
 80144f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144fa:	bf00      	nop

080144fc <uxr_serialize_CREATE_CLIENT_Payload>:
 80144fc:	f7ff b9ea 	b.w	80138d4 <uxr_serialize_CLIENT_Representation>

08014500 <uxr_serialize_CREATE_Payload>:
 8014500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014502:	2202      	movs	r2, #2
 8014504:	4607      	mov	r7, r0
 8014506:	460e      	mov	r6, r1
 8014508:	f7fb fbf0 	bl	800fcec <ucdr_serialize_array_uint8_t>
 801450c:	2202      	movs	r2, #2
 801450e:	4605      	mov	r5, r0
 8014510:	4638      	mov	r0, r7
 8014512:	18b1      	adds	r1, r6, r2
 8014514:	f7fb fbea 	bl	800fcec <ucdr_serialize_array_uint8_t>
 8014518:	7931      	ldrb	r1, [r6, #4]
 801451a:	4604      	mov	r4, r0
 801451c:	4638      	mov	r0, r7
 801451e:	f7fb fe31 	bl	8010184 <ucdr_serialize_uint8_t>
 8014522:	b170      	cbz	r0, 8014542 <uxr_serialize_CREATE_Payload+0x42>
 8014524:	7933      	ldrb	r3, [r6, #4]
 8014526:	402c      	ands	r4, r5
 8014528:	3b01      	subs	r3, #1
 801452a:	b2e4      	uxtb	r4, r4
 801452c:	2b0d      	cmp	r3, #13
 801452e:	d809      	bhi.n	8014544 <uxr_serialize_CREATE_Payload+0x44>
 8014530:	e8df f003 	tbb	[pc, r3]
 8014534:	23230a4c 	.word	0x23230a4c
 8014538:	0a0a0a0a 	.word	0x0a0a0a0a
 801453c:	12121208 	.word	0x12121208
 8014540:	3e45      	.short	0x3e45
 8014542:	2400      	movs	r4, #0
 8014544:	4620      	mov	r0, r4
 8014546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014548:	f106 0108 	add.w	r1, r6, #8
 801454c:	4638      	mov	r0, r7
 801454e:	f7ff fac7 	bl	8013ae0 <uxr_serialize_DATAWRITER_Representation>
 8014552:	4004      	ands	r4, r0
 8014554:	4620      	mov	r0, r4
 8014556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014558:	7a31      	ldrb	r1, [r6, #8]
 801455a:	4638      	mov	r0, r7
 801455c:	f7fb fe12 	bl	8010184 <ucdr_serialize_uint8_t>
 8014560:	2800      	cmp	r0, #0
 8014562:	d0ee      	beq.n	8014542 <uxr_serialize_CREATE_Payload+0x42>
 8014564:	7a33      	ldrb	r3, [r6, #8]
 8014566:	2b01      	cmp	r3, #1
 8014568:	d001      	beq.n	801456e <uxr_serialize_CREATE_Payload+0x6e>
 801456a:	2b02      	cmp	r3, #2
 801456c:	d1ea      	bne.n	8014544 <uxr_serialize_CREATE_Payload+0x44>
 801456e:	68f1      	ldr	r1, [r6, #12]
 8014570:	4638      	mov	r0, r7
 8014572:	f006 fbef 	bl	801ad54 <ucdr_serialize_string>
 8014576:	4004      	ands	r4, r0
 8014578:	e7e4      	b.n	8014544 <uxr_serialize_CREATE_Payload+0x44>
 801457a:	7a31      	ldrb	r1, [r6, #8]
 801457c:	4638      	mov	r0, r7
 801457e:	f7fb fe01 	bl	8010184 <ucdr_serialize_uint8_t>
 8014582:	4605      	mov	r5, r0
 8014584:	b158      	cbz	r0, 801459e <uxr_serialize_CREATE_Payload+0x9e>
 8014586:	7a33      	ldrb	r3, [r6, #8]
 8014588:	2b02      	cmp	r3, #2
 801458a:	d034      	beq.n	80145f6 <uxr_serialize_CREATE_Payload+0xf6>
 801458c:	2b03      	cmp	r3, #3
 801458e:	d106      	bne.n	801459e <uxr_serialize_CREATE_Payload+0x9e>
 8014590:	68f2      	ldr	r2, [r6, #12]
 8014592:	f106 0110 	add.w	r1, r6, #16
 8014596:	4638      	mov	r0, r7
 8014598:	f006 fbb0 	bl	801acfc <ucdr_serialize_sequence_uint8_t>
 801459c:	4605      	mov	r5, r0
 801459e:	2202      	movs	r2, #2
 80145a0:	f506 7104 	add.w	r1, r6, #528	; 0x210
 80145a4:	4638      	mov	r0, r7
 80145a6:	f7fb fba1 	bl	800fcec <ucdr_serialize_array_uint8_t>
 80145aa:	4028      	ands	r0, r5
 80145ac:	4004      	ands	r4, r0
 80145ae:	e7c9      	b.n	8014544 <uxr_serialize_CREATE_Payload+0x44>
 80145b0:	f106 0108 	add.w	r1, r6, #8
 80145b4:	4638      	mov	r0, r7
 80145b6:	f7ff f98d 	bl	80138d4 <uxr_serialize_CLIENT_Representation>
 80145ba:	4004      	ands	r4, r0
 80145bc:	e7c2      	b.n	8014544 <uxr_serialize_CREATE_Payload+0x44>
 80145be:	f106 0108 	add.w	r1, r6, #8
 80145c2:	4638      	mov	r0, r7
 80145c4:	f7ff fa42 	bl	8013a4c <uxr_serialize_AGENT_Representation>
 80145c8:	4004      	ands	r4, r0
 80145ca:	e7bb      	b.n	8014544 <uxr_serialize_CREATE_Payload+0x44>
 80145cc:	7a31      	ldrb	r1, [r6, #8]
 80145ce:	4638      	mov	r0, r7
 80145d0:	f7fb fdd8 	bl	8010184 <ucdr_serialize_uint8_t>
 80145d4:	4605      	mov	r5, r0
 80145d6:	b130      	cbz	r0, 80145e6 <uxr_serialize_CREATE_Payload+0xe6>
 80145d8:	7a33      	ldrb	r3, [r6, #8]
 80145da:	2b02      	cmp	r3, #2
 80145dc:	d011      	beq.n	8014602 <uxr_serialize_CREATE_Payload+0x102>
 80145de:	2b03      	cmp	r3, #3
 80145e0:	d015      	beq.n	801460e <uxr_serialize_CREATE_Payload+0x10e>
 80145e2:	2b01      	cmp	r3, #1
 80145e4:	d00d      	beq.n	8014602 <uxr_serialize_CREATE_Payload+0x102>
 80145e6:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 80145ea:	4638      	mov	r0, r7
 80145ec:	f7fc fb06 	bl	8010bfc <ucdr_serialize_int16_t>
 80145f0:	4028      	ands	r0, r5
 80145f2:	4004      	ands	r4, r0
 80145f4:	e7a6      	b.n	8014544 <uxr_serialize_CREATE_Payload+0x44>
 80145f6:	68f1      	ldr	r1, [r6, #12]
 80145f8:	4638      	mov	r0, r7
 80145fa:	f006 fbab 	bl	801ad54 <ucdr_serialize_string>
 80145fe:	4605      	mov	r5, r0
 8014600:	e7cd      	b.n	801459e <uxr_serialize_CREATE_Payload+0x9e>
 8014602:	68f1      	ldr	r1, [r6, #12]
 8014604:	4638      	mov	r0, r7
 8014606:	f006 fba5 	bl	801ad54 <ucdr_serialize_string>
 801460a:	4605      	mov	r5, r0
 801460c:	e7eb      	b.n	80145e6 <uxr_serialize_CREATE_Payload+0xe6>
 801460e:	68f2      	ldr	r2, [r6, #12]
 8014610:	f106 0110 	add.w	r1, r6, #16
 8014614:	4638      	mov	r0, r7
 8014616:	f006 fb71 	bl	801acfc <ucdr_serialize_sequence_uint8_t>
 801461a:	4605      	mov	r5, r0
 801461c:	e7e3      	b.n	80145e6 <uxr_serialize_CREATE_Payload+0xe6>
 801461e:	bf00      	nop

08014620 <uxr_deserialize_GET_INFO_Payload>:
 8014620:	b570      	push	{r4, r5, r6, lr}
 8014622:	2202      	movs	r2, #2
 8014624:	4605      	mov	r5, r0
 8014626:	460e      	mov	r6, r1
 8014628:	f7fb fbc4 	bl	800fdb4 <ucdr_deserialize_array_uint8_t>
 801462c:	2202      	movs	r2, #2
 801462e:	4604      	mov	r4, r0
 8014630:	4628      	mov	r0, r5
 8014632:	18b1      	adds	r1, r6, r2
 8014634:	f7fb fbbe 	bl	800fdb4 <ucdr_deserialize_array_uint8_t>
 8014638:	4603      	mov	r3, r0
 801463a:	1d31      	adds	r1, r6, #4
 801463c:	4628      	mov	r0, r5
 801463e:	401c      	ands	r4, r3
 8014640:	f7fc f8e6 	bl	8010810 <ucdr_deserialize_uint32_t>
 8014644:	b2e4      	uxtb	r4, r4
 8014646:	4020      	ands	r0, r4
 8014648:	bd70      	pop	{r4, r5, r6, pc}
 801464a:	bf00      	nop

0801464c <uxr_serialize_DELETE_Payload>:
 801464c:	b570      	push	{r4, r5, r6, lr}
 801464e:	2202      	movs	r2, #2
 8014650:	4605      	mov	r5, r0
 8014652:	460e      	mov	r6, r1
 8014654:	f7fb fb4a 	bl	800fcec <ucdr_serialize_array_uint8_t>
 8014658:	2202      	movs	r2, #2
 801465a:	4604      	mov	r4, r0
 801465c:	4628      	mov	r0, r5
 801465e:	18b1      	adds	r1, r6, r2
 8014660:	f7fb fb44 	bl	800fcec <ucdr_serialize_array_uint8_t>
 8014664:	4020      	ands	r0, r4
 8014666:	b2c0      	uxtb	r0, r0
 8014668:	bd70      	pop	{r4, r5, r6, pc}
 801466a:	bf00      	nop

0801466c <uxr_deserialize_STATUS_AGENT_Payload>:
 801466c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014670:	460e      	mov	r6, r1
 8014672:	4605      	mov	r5, r0
 8014674:	f7fb fd9c 	bl	80101b0 <ucdr_deserialize_uint8_t>
 8014678:	4604      	mov	r4, r0
 801467a:	1c71      	adds	r1, r6, #1
 801467c:	4628      	mov	r0, r5
 801467e:	f7fb fd97 	bl	80101b0 <ucdr_deserialize_uint8_t>
 8014682:	2204      	movs	r2, #4
 8014684:	4681      	mov	r9, r0
 8014686:	4628      	mov	r0, r5
 8014688:	18b1      	adds	r1, r6, r2
 801468a:	f7fb fb93 	bl	800fdb4 <ucdr_deserialize_array_uint8_t>
 801468e:	f106 0108 	add.w	r1, r6, #8
 8014692:	4680      	mov	r8, r0
 8014694:	2202      	movs	r2, #2
 8014696:	4628      	mov	r0, r5
 8014698:	f7fb fb8c 	bl	800fdb4 <ucdr_deserialize_array_uint8_t>
 801469c:	ea04 0309 	and.w	r3, r4, r9
 80146a0:	4607      	mov	r7, r0
 80146a2:	2202      	movs	r2, #2
 80146a4:	b2db      	uxtb	r3, r3
 80146a6:	f106 010a 	add.w	r1, r6, #10
 80146aa:	4628      	mov	r0, r5
 80146ac:	ea03 0408 	and.w	r4, r3, r8
 80146b0:	f7fb fb80 	bl	800fdb4 <ucdr_deserialize_array_uint8_t>
 80146b4:	4603      	mov	r3, r0
 80146b6:	4628      	mov	r0, r5
 80146b8:	403c      	ands	r4, r7
 80146ba:	f106 010c 	add.w	r1, r6, #12
 80146be:	461d      	mov	r5, r3
 80146c0:	f7fb fd48 	bl	8010154 <ucdr_deserialize_bool>
 80146c4:	4025      	ands	r5, r4
 80146c6:	4028      	ands	r0, r5
 80146c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080146cc <uxr_deserialize_STATUS_Payload>:
 80146cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146d0:	2202      	movs	r2, #2
 80146d2:	4606      	mov	r6, r0
 80146d4:	460f      	mov	r7, r1
 80146d6:	f7fb fb6d 	bl	800fdb4 <ucdr_deserialize_array_uint8_t>
 80146da:	2202      	movs	r2, #2
 80146dc:	4605      	mov	r5, r0
 80146de:	4630      	mov	r0, r6
 80146e0:	18b9      	adds	r1, r7, r2
 80146e2:	f7fb fb67 	bl	800fdb4 <ucdr_deserialize_array_uint8_t>
 80146e6:	4680      	mov	r8, r0
 80146e8:	1d39      	adds	r1, r7, #4
 80146ea:	4630      	mov	r0, r6
 80146ec:	f7fb fd60 	bl	80101b0 <ucdr_deserialize_uint8_t>
 80146f0:	ea05 0508 	and.w	r5, r5, r8
 80146f4:	4604      	mov	r4, r0
 80146f6:	1d79      	adds	r1, r7, #5
 80146f8:	4630      	mov	r0, r6
 80146fa:	402c      	ands	r4, r5
 80146fc:	f7fb fd58 	bl	80101b0 <ucdr_deserialize_uint8_t>
 8014700:	4020      	ands	r0, r4
 8014702:	b2c0      	uxtb	r0, r0
 8014704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014708 <uxr_serialize_INFO_Payload>:
 8014708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801470c:	2202      	movs	r2, #2
 801470e:	460c      	mov	r4, r1
 8014710:	4605      	mov	r5, r0
 8014712:	f7fb faeb 	bl	800fcec <ucdr_serialize_array_uint8_t>
 8014716:	2202      	movs	r2, #2
 8014718:	4680      	mov	r8, r0
 801471a:	4628      	mov	r0, r5
 801471c:	18a1      	adds	r1, r4, r2
 801471e:	f7fb fae5 	bl	800fcec <ucdr_serialize_array_uint8_t>
 8014722:	4607      	mov	r7, r0
 8014724:	7921      	ldrb	r1, [r4, #4]
 8014726:	4628      	mov	r0, r5
 8014728:	f7fb fd2c 	bl	8010184 <ucdr_serialize_uint8_t>
 801472c:	ea08 0807 	and.w	r8, r8, r7
 8014730:	4606      	mov	r6, r0
 8014732:	7961      	ldrb	r1, [r4, #5]
 8014734:	4628      	mov	r0, r5
 8014736:	ea06 0608 	and.w	r6, r6, r8
 801473a:	f7fb fd23 	bl	8010184 <ucdr_serialize_uint8_t>
 801473e:	7a21      	ldrb	r1, [r4, #8]
 8014740:	4030      	ands	r0, r6
 8014742:	b2c7      	uxtb	r7, r0
 8014744:	4628      	mov	r0, r5
 8014746:	f7fb fcef 	bl	8010128 <ucdr_serialize_bool>
 801474a:	7a23      	ldrb	r3, [r4, #8]
 801474c:	4606      	mov	r6, r0
 801474e:	b96b      	cbnz	r3, 801476c <uxr_serialize_INFO_Payload+0x64>
 8014750:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 8014754:	4628      	mov	r0, r5
 8014756:	f7fb fce7 	bl	8010128 <ucdr_serialize_bool>
 801475a:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 801475e:	4030      	ands	r0, r6
 8014760:	b2c6      	uxtb	r6, r0
 8014762:	b983      	cbnz	r3, 8014786 <uxr_serialize_INFO_Payload+0x7e>
 8014764:	ea06 0007 	and.w	r0, r6, r7
 8014768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801476c:	7b21      	ldrb	r1, [r4, #12]
 801476e:	4628      	mov	r0, r5
 8014770:	f7fb fd08 	bl	8010184 <ucdr_serialize_uint8_t>
 8014774:	b188      	cbz	r0, 801479a <uxr_serialize_INFO_Payload+0x92>
 8014776:	f104 010c 	add.w	r1, r4, #12
 801477a:	4628      	mov	r0, r5
 801477c:	f7ff f9d8 	bl	8013b30 <uxr_serialize_ObjectVariant.part.0>
 8014780:	4030      	ands	r0, r6
 8014782:	b2c6      	uxtb	r6, r0
 8014784:	e7e4      	b.n	8014750 <uxr_serialize_INFO_Payload+0x48>
 8014786:	f504 7108 	add.w	r1, r4, #544	; 0x220
 801478a:	4628      	mov	r0, r5
 801478c:	f7ff fdb8 	bl	8014300 <uxr_serialize_ActivityInfoVariant>
 8014790:	4006      	ands	r6, r0
 8014792:	ea06 0007 	and.w	r0, r6, r7
 8014796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801479a:	4606      	mov	r6, r0
 801479c:	e7d8      	b.n	8014750 <uxr_serialize_INFO_Payload+0x48>
 801479e:	bf00      	nop

080147a0 <uxr_serialize_READ_DATA_Payload>:
 80147a0:	b570      	push	{r4, r5, r6, lr}
 80147a2:	2202      	movs	r2, #2
 80147a4:	4605      	mov	r5, r0
 80147a6:	460e      	mov	r6, r1
 80147a8:	f7fb faa0 	bl	800fcec <ucdr_serialize_array_uint8_t>
 80147ac:	2202      	movs	r2, #2
 80147ae:	4604      	mov	r4, r0
 80147b0:	4628      	mov	r0, r5
 80147b2:	18b1      	adds	r1, r6, r2
 80147b4:	f7fb fa9a 	bl	800fcec <ucdr_serialize_array_uint8_t>
 80147b8:	4603      	mov	r3, r0
 80147ba:	1d31      	adds	r1, r6, #4
 80147bc:	4628      	mov	r0, r5
 80147be:	401c      	ands	r4, r3
 80147c0:	f7ff fe5e 	bl	8014480 <uxr_serialize_ReadSpecification>
 80147c4:	b2e4      	uxtb	r4, r4
 80147c6:	4020      	ands	r0, r4
 80147c8:	bd70      	pop	{r4, r5, r6, pc}
 80147ca:	bf00      	nop

080147cc <uxr_serialize_WRITE_DATA_Payload_Data>:
 80147cc:	b570      	push	{r4, r5, r6, lr}
 80147ce:	2202      	movs	r2, #2
 80147d0:	4605      	mov	r5, r0
 80147d2:	460e      	mov	r6, r1
 80147d4:	f7fb fa8a 	bl	800fcec <ucdr_serialize_array_uint8_t>
 80147d8:	2202      	movs	r2, #2
 80147da:	4604      	mov	r4, r0
 80147dc:	4628      	mov	r0, r5
 80147de:	18b1      	adds	r1, r6, r2
 80147e0:	f7fb fa84 	bl	800fcec <ucdr_serialize_array_uint8_t>
 80147e4:	4020      	ands	r0, r4
 80147e6:	b2c0      	uxtb	r0, r0
 80147e8:	bd70      	pop	{r4, r5, r6, pc}
 80147ea:	bf00      	nop

080147ec <uxr_serialize_ACKNACK_Payload>:
 80147ec:	b570      	push	{r4, r5, r6, lr}
 80147ee:	460c      	mov	r4, r1
 80147f0:	4605      	mov	r5, r0
 80147f2:	460e      	mov	r6, r1
 80147f4:	f834 1b02 	ldrh.w	r1, [r4], #2
 80147f8:	f7fb fcf0 	bl	80101dc <ucdr_serialize_uint16_t>
 80147fc:	2202      	movs	r2, #2
 80147fe:	4621      	mov	r1, r4
 8014800:	4604      	mov	r4, r0
 8014802:	4628      	mov	r0, r5
 8014804:	f7fb fa72 	bl	800fcec <ucdr_serialize_array_uint8_t>
 8014808:	4603      	mov	r3, r0
 801480a:	7931      	ldrb	r1, [r6, #4]
 801480c:	4628      	mov	r0, r5
 801480e:	401c      	ands	r4, r3
 8014810:	f7fb fcb8 	bl	8010184 <ucdr_serialize_uint8_t>
 8014814:	b2e4      	uxtb	r4, r4
 8014816:	4020      	ands	r0, r4
 8014818:	bd70      	pop	{r4, r5, r6, pc}
 801481a:	bf00      	nop

0801481c <uxr_deserialize_ACKNACK_Payload>:
 801481c:	b570      	push	{r4, r5, r6, lr}
 801481e:	460e      	mov	r6, r1
 8014820:	4605      	mov	r5, r0
 8014822:	f7fb fddb 	bl	80103dc <ucdr_deserialize_uint16_t>
 8014826:	2202      	movs	r2, #2
 8014828:	4604      	mov	r4, r0
 801482a:	4628      	mov	r0, r5
 801482c:	18b1      	adds	r1, r6, r2
 801482e:	f7fb fac1 	bl	800fdb4 <ucdr_deserialize_array_uint8_t>
 8014832:	4603      	mov	r3, r0
 8014834:	1d31      	adds	r1, r6, #4
 8014836:	4628      	mov	r0, r5
 8014838:	401c      	ands	r4, r3
 801483a:	f7fb fcb9 	bl	80101b0 <ucdr_deserialize_uint8_t>
 801483e:	b2e4      	uxtb	r4, r4
 8014840:	4020      	ands	r0, r4
 8014842:	bd70      	pop	{r4, r5, r6, pc}

08014844 <uxr_serialize_HEARTBEAT_Payload>:
 8014844:	b570      	push	{r4, r5, r6, lr}
 8014846:	460d      	mov	r5, r1
 8014848:	4606      	mov	r6, r0
 801484a:	8809      	ldrh	r1, [r1, #0]
 801484c:	f7fb fcc6 	bl	80101dc <ucdr_serialize_uint16_t>
 8014850:	8869      	ldrh	r1, [r5, #2]
 8014852:	4604      	mov	r4, r0
 8014854:	4630      	mov	r0, r6
 8014856:	f7fb fcc1 	bl	80101dc <ucdr_serialize_uint16_t>
 801485a:	4603      	mov	r3, r0
 801485c:	7929      	ldrb	r1, [r5, #4]
 801485e:	4630      	mov	r0, r6
 8014860:	401c      	ands	r4, r3
 8014862:	f7fb fc8f 	bl	8010184 <ucdr_serialize_uint8_t>
 8014866:	b2e4      	uxtb	r4, r4
 8014868:	4020      	ands	r0, r4
 801486a:	bd70      	pop	{r4, r5, r6, pc}

0801486c <uxr_deserialize_HEARTBEAT_Payload>:
 801486c:	b570      	push	{r4, r5, r6, lr}
 801486e:	460e      	mov	r6, r1
 8014870:	4605      	mov	r5, r0
 8014872:	f7fb fdb3 	bl	80103dc <ucdr_deserialize_uint16_t>
 8014876:	4604      	mov	r4, r0
 8014878:	1cb1      	adds	r1, r6, #2
 801487a:	4628      	mov	r0, r5
 801487c:	f7fb fdae 	bl	80103dc <ucdr_deserialize_uint16_t>
 8014880:	4603      	mov	r3, r0
 8014882:	1d31      	adds	r1, r6, #4
 8014884:	4628      	mov	r0, r5
 8014886:	401c      	ands	r4, r3
 8014888:	f7fb fc92 	bl	80101b0 <ucdr_deserialize_uint8_t>
 801488c:	b2e4      	uxtb	r4, r4
 801488e:	4020      	ands	r0, r4
 8014890:	bd70      	pop	{r4, r5, r6, pc}
 8014892:	bf00      	nop

08014894 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8014894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014898:	460e      	mov	r6, r1
 801489a:	4605      	mov	r5, r0
 801489c:	f7fc fc30 	bl	8011100 <ucdr_deserialize_int32_t>
 80148a0:	4607      	mov	r7, r0
 80148a2:	1d31      	adds	r1, r6, #4
 80148a4:	4628      	mov	r0, r5
 80148a6:	f7fb ffb3 	bl	8010810 <ucdr_deserialize_uint32_t>
 80148aa:	4680      	mov	r8, r0
 80148ac:	f106 0108 	add.w	r1, r6, #8
 80148b0:	4628      	mov	r0, r5
 80148b2:	f7fc fc25 	bl	8011100 <ucdr_deserialize_int32_t>
 80148b6:	ea07 0708 	and.w	r7, r7, r8
 80148ba:	4604      	mov	r4, r0
 80148bc:	f106 010c 	add.w	r1, r6, #12
 80148c0:	4628      	mov	r0, r5
 80148c2:	403c      	ands	r4, r7
 80148c4:	f7fb ffa4 	bl	8010810 <ucdr_deserialize_uint32_t>
 80148c8:	f106 0110 	add.w	r1, r6, #16
 80148cc:	4004      	ands	r4, r0
 80148ce:	4628      	mov	r0, r5
 80148d0:	f7fc fc16 	bl	8011100 <ucdr_deserialize_int32_t>
 80148d4:	4603      	mov	r3, r0
 80148d6:	b2e4      	uxtb	r4, r4
 80148d8:	4628      	mov	r0, r5
 80148da:	461d      	mov	r5, r3
 80148dc:	f106 0114 	add.w	r1, r6, #20
 80148e0:	f7fb ff96 	bl	8010810 <ucdr_deserialize_uint32_t>
 80148e4:	402c      	ands	r4, r5
 80148e6:	4020      	ands	r0, r4
 80148e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080148ec <uxr_serialize_SampleIdentity>:
 80148ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148f0:	4604      	mov	r4, r0
 80148f2:	460d      	mov	r5, r1
 80148f4:	220c      	movs	r2, #12
 80148f6:	f7fb f9f9 	bl	800fcec <ucdr_serialize_array_uint8_t>
 80148fa:	2203      	movs	r2, #3
 80148fc:	f105 010c 	add.w	r1, r5, #12
 8014900:	4607      	mov	r7, r0
 8014902:	4620      	mov	r0, r4
 8014904:	f7fb f9f2 	bl	800fcec <ucdr_serialize_array_uint8_t>
 8014908:	7be9      	ldrb	r1, [r5, #15]
 801490a:	4680      	mov	r8, r0
 801490c:	4620      	mov	r0, r4
 801490e:	f7fb fc39 	bl	8010184 <ucdr_serialize_uint8_t>
 8014912:	6929      	ldr	r1, [r5, #16]
 8014914:	4606      	mov	r6, r0
 8014916:	4620      	mov	r0, r4
 8014918:	f7fc fb5a 	bl	8010fd0 <ucdr_serialize_int32_t>
 801491c:	ea07 0708 	and.w	r7, r7, r8
 8014920:	4603      	mov	r3, r0
 8014922:	4620      	mov	r0, r4
 8014924:	403e      	ands	r6, r7
 8014926:	6969      	ldr	r1, [r5, #20]
 8014928:	461c      	mov	r4, r3
 801492a:	f7fb fe41 	bl	80105b0 <ucdr_serialize_uint32_t>
 801492e:	4034      	ands	r4, r6
 8014930:	4020      	ands	r0, r4
 8014932:	b2c0      	uxtb	r0, r0
 8014934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014938 <uxr_deserialize_SampleIdentity>:
 8014938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801493c:	4604      	mov	r4, r0
 801493e:	460d      	mov	r5, r1
 8014940:	220c      	movs	r2, #12
 8014942:	f7fb fa37 	bl	800fdb4 <ucdr_deserialize_array_uint8_t>
 8014946:	2203      	movs	r2, #3
 8014948:	f105 010c 	add.w	r1, r5, #12
 801494c:	4607      	mov	r7, r0
 801494e:	4620      	mov	r0, r4
 8014950:	f7fb fa30 	bl	800fdb4 <ucdr_deserialize_array_uint8_t>
 8014954:	f105 010f 	add.w	r1, r5, #15
 8014958:	4680      	mov	r8, r0
 801495a:	4620      	mov	r0, r4
 801495c:	f7fb fc28 	bl	80101b0 <ucdr_deserialize_uint8_t>
 8014960:	f105 0110 	add.w	r1, r5, #16
 8014964:	4606      	mov	r6, r0
 8014966:	4620      	mov	r0, r4
 8014968:	f7fc fbca 	bl	8011100 <ucdr_deserialize_int32_t>
 801496c:	ea07 0708 	and.w	r7, r7, r8
 8014970:	4603      	mov	r3, r0
 8014972:	4620      	mov	r0, r4
 8014974:	403e      	ands	r6, r7
 8014976:	f105 0114 	add.w	r1, r5, #20
 801497a:	461c      	mov	r4, r3
 801497c:	f7fb ff48 	bl	8010810 <ucdr_deserialize_uint32_t>
 8014980:	4034      	ands	r4, r6
 8014982:	4020      	ands	r0, r4
 8014984:	b2c0      	uxtb	r0, r0
 8014986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801498a:	bf00      	nop

0801498c <racs_services__srv__Control_Event__get_type_description.part.0>:
 801498c:	b510      	push	{r4, lr}
 801498e:	2000      	movs	r0, #0
 8014990:	4c13      	ldr	r4, [pc, #76]	; (80149e0 <racs_services__srv__Control_Event__get_type_description.part.0+0x54>)
 8014992:	f006 f955 	bl	801ac40 <builtin_interfaces__msg__Time__get_type_description>
 8014996:	300c      	adds	r0, #12
 8014998:	4b12      	ldr	r3, [pc, #72]	; (80149e4 <racs_services__srv__Control_Event__get_type_description.part.0+0x58>)
 801499a:	c807      	ldmia	r0, {r0, r1, r2}
 801499c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80149a0:	7823      	ldrb	r3, [r4, #0]
 80149a2:	b90b      	cbnz	r3, 80149a8 <racs_services__srv__Control_Event__get_type_description.part.0+0x1c>
 80149a4:	2301      	movs	r3, #1
 80149a6:	7023      	strb	r3, [r4, #0]
 80149a8:	4a0f      	ldr	r2, [pc, #60]	; (80149e8 <racs_services__srv__Control_Event__get_type_description.part.0+0x5c>)
 80149aa:	4b10      	ldr	r3, [pc, #64]	; (80149ec <racs_services__srv__Control_Event__get_type_description.part.0+0x60>)
 80149ac:	4c10      	ldr	r4, [pc, #64]	; (80149f0 <racs_services__srv__Control_Event__get_type_description.part.0+0x64>)
 80149ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80149b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80149b4:	7823      	ldrb	r3, [r4, #0]
 80149b6:	b90b      	cbnz	r3, 80149bc <racs_services__srv__Control_Event__get_type_description.part.0+0x30>
 80149b8:	2301      	movs	r3, #1
 80149ba:	7023      	strb	r3, [r4, #0]
 80149bc:	4b0d      	ldr	r3, [pc, #52]	; (80149f4 <racs_services__srv__Control_Event__get_type_description.part.0+0x68>)
 80149be:	4c0e      	ldr	r4, [pc, #56]	; (80149f8 <racs_services__srv__Control_Event__get_type_description.part.0+0x6c>)
 80149c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80149c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80149c8:	2000      	movs	r0, #0
 80149ca:	3418      	adds	r4, #24
 80149cc:	f006 f8d8 	bl	801ab80 <service_msgs__msg__ServiceEventInfo__get_type_description>
 80149d0:	300c      	adds	r0, #12
 80149d2:	4b0a      	ldr	r3, [pc, #40]	; (80149fc <racs_services__srv__Control_Event__get_type_description.part.0+0x70>)
 80149d4:	c807      	ldmia	r0, {r0, r1, r2}
 80149d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80149da:	2201      	movs	r2, #1
 80149dc:	701a      	strb	r2, [r3, #0]
 80149de:	bd10      	pop	{r4, pc}
 80149e0:	20010530 	.word	0x20010530
 80149e4:	20000ea8 	.word	0x20000ea8
 80149e8:	0801fcfc 	.word	0x0801fcfc
 80149ec:	20000ec0 	.word	0x20000ec0
 80149f0:	2001052e 	.word	0x2001052e
 80149f4:	0801fcd8 	.word	0x0801fcd8
 80149f8:	20000ed8 	.word	0x20000ed8
 80149fc:	2001052d 	.word	0x2001052d

08014a00 <racs_services__srv__Control__get_type_hash>:
 8014a00:	4800      	ldr	r0, [pc, #0]	; (8014a04 <racs_services__srv__Control__get_type_hash+0x4>)
 8014a02:	4770      	bx	lr
 8014a04:	20000d78 	.word	0x20000d78

08014a08 <racs_services__srv__Control_Request__get_type_hash>:
 8014a08:	4800      	ldr	r0, [pc, #0]	; (8014a0c <racs_services__srv__Control_Request__get_type_hash+0x4>)
 8014a0a:	4770      	bx	lr
 8014a0c:	20000d54 	.word	0x20000d54

08014a10 <racs_services__srv__Control_Response__get_type_hash>:
 8014a10:	4800      	ldr	r0, [pc, #0]	; (8014a14 <racs_services__srv__Control_Response__get_type_hash+0x4>)
 8014a12:	4770      	bx	lr
 8014a14:	20000d30 	.word	0x20000d30

08014a18 <racs_services__srv__Control_Event__get_type_hash>:
 8014a18:	4800      	ldr	r0, [pc, #0]	; (8014a1c <racs_services__srv__Control_Event__get_type_hash+0x4>)
 8014a1a:	4770      	bx	lr
 8014a1c:	20000d0c 	.word	0x20000d0c

08014a20 <racs_services__srv__Control__get_type_description>:
 8014a20:	b538      	push	{r3, r4, r5, lr}
 8014a22:	4d1c      	ldr	r5, [pc, #112]	; (8014a94 <racs_services__srv__Control__get_type_description+0x74>)
 8014a24:	7828      	ldrb	r0, [r5, #0]
 8014a26:	b108      	cbz	r0, 8014a2c <racs_services__srv__Control__get_type_description+0xc>
 8014a28:	481b      	ldr	r0, [pc, #108]	; (8014a98 <racs_services__srv__Control__get_type_description+0x78>)
 8014a2a:	bd38      	pop	{r3, r4, r5, pc}
 8014a2c:	f006 f908 	bl	801ac40 <builtin_interfaces__msg__Time__get_type_description>
 8014a30:	300c      	adds	r0, #12
 8014a32:	4b1a      	ldr	r3, [pc, #104]	; (8014a9c <racs_services__srv__Control__get_type_description+0x7c>)
 8014a34:	c807      	ldmia	r0, {r0, r1, r2}
 8014a36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014a3a:	4b19      	ldr	r3, [pc, #100]	; (8014aa0 <racs_services__srv__Control__get_type_description+0x80>)
 8014a3c:	781b      	ldrb	r3, [r3, #0]
 8014a3e:	b32b      	cbz	r3, 8014a8c <racs_services__srv__Control__get_type_description+0x6c>
 8014a40:	4a18      	ldr	r2, [pc, #96]	; (8014aa4 <racs_services__srv__Control__get_type_description+0x84>)
 8014a42:	4b19      	ldr	r3, [pc, #100]	; (8014aa8 <racs_services__srv__Control__get_type_description+0x88>)
 8014a44:	4c19      	ldr	r4, [pc, #100]	; (8014aac <racs_services__srv__Control__get_type_description+0x8c>)
 8014a46:	ca07      	ldmia	r2, {r0, r1, r2}
 8014a48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014a4c:	7823      	ldrb	r3, [r4, #0]
 8014a4e:	b90b      	cbnz	r3, 8014a54 <racs_services__srv__Control__get_type_description+0x34>
 8014a50:	2301      	movs	r3, #1
 8014a52:	7023      	strb	r3, [r4, #0]
 8014a54:	4a16      	ldr	r2, [pc, #88]	; (8014ab0 <racs_services__srv__Control__get_type_description+0x90>)
 8014a56:	4b17      	ldr	r3, [pc, #92]	; (8014ab4 <racs_services__srv__Control__get_type_description+0x94>)
 8014a58:	4c17      	ldr	r4, [pc, #92]	; (8014ab8 <racs_services__srv__Control__get_type_description+0x98>)
 8014a5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8014a5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014a60:	7823      	ldrb	r3, [r4, #0]
 8014a62:	b90b      	cbnz	r3, 8014a68 <racs_services__srv__Control__get_type_description+0x48>
 8014a64:	2301      	movs	r3, #1
 8014a66:	7023      	strb	r3, [r4, #0]
 8014a68:	4b14      	ldr	r3, [pc, #80]	; (8014abc <racs_services__srv__Control__get_type_description+0x9c>)
 8014a6a:	4c15      	ldr	r4, [pc, #84]	; (8014ac0 <racs_services__srv__Control__get_type_description+0xa0>)
 8014a6c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014a70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014a74:	2000      	movs	r0, #0
 8014a76:	3418      	adds	r4, #24
 8014a78:	f006 f882 	bl	801ab80 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8014a7c:	300c      	adds	r0, #12
 8014a7e:	2301      	movs	r3, #1
 8014a80:	c807      	ldmia	r0, {r0, r1, r2}
 8014a82:	702b      	strb	r3, [r5, #0]
 8014a84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8014a88:	4803      	ldr	r0, [pc, #12]	; (8014a98 <racs_services__srv__Control__get_type_description+0x78>)
 8014a8a:	bd38      	pop	{r3, r4, r5, pc}
 8014a8c:	f7ff ff7e 	bl	801498c <racs_services__srv__Control_Event__get_type_description.part.0>
 8014a90:	e7d6      	b.n	8014a40 <racs_services__srv__Control__get_type_description+0x20>
 8014a92:	bf00      	nop
 8014a94:	20010531 	.word	0x20010531
 8014a98:	0801fd14 	.word	0x0801fd14
 8014a9c:	200011d0 	.word	0x200011d0
 8014aa0:	2001052d 	.word	0x2001052d
 8014aa4:	0801fcb4 	.word	0x0801fcb4
 8014aa8:	200011e8 	.word	0x200011e8
 8014aac:	20010530 	.word	0x20010530
 8014ab0:	0801fcfc 	.word	0x0801fcfc
 8014ab4:	20001200 	.word	0x20001200
 8014ab8:	2001052e 	.word	0x2001052e
 8014abc:	0801fcd8 	.word	0x0801fcd8
 8014ac0:	20001218 	.word	0x20001218

08014ac4 <racs_services__srv__Control_Request__get_type_description>:
 8014ac4:	4b03      	ldr	r3, [pc, #12]	; (8014ad4 <racs_services__srv__Control_Request__get_type_description+0x10>)
 8014ac6:	781a      	ldrb	r2, [r3, #0]
 8014ac8:	b90a      	cbnz	r2, 8014ace <racs_services__srv__Control_Request__get_type_description+0xa>
 8014aca:	2201      	movs	r2, #1
 8014acc:	701a      	strb	r2, [r3, #0]
 8014ace:	4802      	ldr	r0, [pc, #8]	; (8014ad8 <racs_services__srv__Control_Request__get_type_description+0x14>)
 8014ad0:	4770      	bx	lr
 8014ad2:	bf00      	nop
 8014ad4:	20010530 	.word	0x20010530
 8014ad8:	0801fcf0 	.word	0x0801fcf0

08014adc <racs_services__srv__Control_Response__get_type_description>:
 8014adc:	4b03      	ldr	r3, [pc, #12]	; (8014aec <racs_services__srv__Control_Response__get_type_description+0x10>)
 8014ade:	781a      	ldrb	r2, [r3, #0]
 8014ae0:	b90a      	cbnz	r2, 8014ae6 <racs_services__srv__Control_Response__get_type_description+0xa>
 8014ae2:	2201      	movs	r2, #1
 8014ae4:	701a      	strb	r2, [r3, #0]
 8014ae6:	4802      	ldr	r0, [pc, #8]	; (8014af0 <racs_services__srv__Control_Response__get_type_description+0x14>)
 8014ae8:	4770      	bx	lr
 8014aea:	bf00      	nop
 8014aec:	2001052e 	.word	0x2001052e
 8014af0:	0801fccc 	.word	0x0801fccc

08014af4 <racs_services__srv__Control_Event__get_type_description>:
 8014af4:	b508      	push	{r3, lr}
 8014af6:	4b04      	ldr	r3, [pc, #16]	; (8014b08 <racs_services__srv__Control_Event__get_type_description+0x14>)
 8014af8:	781b      	ldrb	r3, [r3, #0]
 8014afa:	b10b      	cbz	r3, 8014b00 <racs_services__srv__Control_Event__get_type_description+0xc>
 8014afc:	4803      	ldr	r0, [pc, #12]	; (8014b0c <racs_services__srv__Control_Event__get_type_description+0x18>)
 8014afe:	bd08      	pop	{r3, pc}
 8014b00:	f7ff ff44 	bl	801498c <racs_services__srv__Control_Event__get_type_description.part.0>
 8014b04:	4801      	ldr	r0, [pc, #4]	; (8014b0c <racs_services__srv__Control_Event__get_type_description+0x18>)
 8014b06:	bd08      	pop	{r3, pc}
 8014b08:	2001052d 	.word	0x2001052d
 8014b0c:	0801fca8 	.word	0x0801fca8

08014b10 <racs_services__srv__Control__get_type_description_sources>:
 8014b10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b14:	4b2c      	ldr	r3, [pc, #176]	; (8014bc8 <racs_services__srv__Control__get_type_description_sources+0xb8>)
 8014b16:	f893 9000 	ldrb.w	r9, [r3]
 8014b1a:	f1b9 0f00 	cmp.w	r9, #0
 8014b1e:	d002      	beq.n	8014b26 <racs_services__srv__Control__get_type_description_sources+0x16>
 8014b20:	482a      	ldr	r0, [pc, #168]	; (8014bcc <racs_services__srv__Control__get_type_description_sources+0xbc>)
 8014b22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b26:	4d2a      	ldr	r5, [pc, #168]	; (8014bd0 <racs_services__srv__Control__get_type_description_sources+0xc0>)
 8014b28:	4c2a      	ldr	r4, [pc, #168]	; (8014bd4 <racs_services__srv__Control__get_type_description_sources+0xc4>)
 8014b2a:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8014bdc <racs_services__srv__Control__get_type_description_sources+0xcc>
 8014b2e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8014be0 <racs_services__srv__Control__get_type_description_sources+0xd0>
 8014b32:	4e29      	ldr	r6, [pc, #164]	; (8014bd8 <racs_services__srv__Control__get_type_description_sources+0xc8>)
 8014b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b3c:	682b      	ldr	r3, [r5, #0]
 8014b3e:	4625      	mov	r5, r4
 8014b40:	4648      	mov	r0, r9
 8014b42:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 8014b46:	f845 3b04 	str.w	r3, [r5], #4
 8014b4a:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 8014b4e:	f006 f883 	bl	801ac58 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8014b52:	4684      	mov	ip, r0
 8014b54:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 8014b58:	3494      	adds	r4, #148	; 0x94
 8014b5a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014b5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014b60:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014b64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014b66:	f8dc 3000 	ldr.w	r3, [ip]
 8014b6a:	602b      	str	r3, [r5, #0]
 8014b6c:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8014b70:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8014b74:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8014b78:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8014b7c:	f8db 3000 	ldr.w	r3, [fp]
 8014b80:	f8ca 3000 	str.w	r3, [sl]
 8014b84:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8014b88:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014b8a:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8014b8e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8014b90:	f8d8 3000 	ldr.w	r3, [r8]
 8014b94:	603b      	str	r3, [r7, #0]
 8014b96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014b98:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014b9c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014b9e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014ba2:	6833      	ldr	r3, [r6, #0]
 8014ba4:	4648      	mov	r0, r9
 8014ba6:	f8ce 3000 	str.w	r3, [lr]
 8014baa:	f006 f801 	bl	801abb0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 8014bae:	2301      	movs	r3, #1
 8014bb0:	4a05      	ldr	r2, [pc, #20]	; (8014bc8 <racs_services__srv__Control__get_type_description_sources+0xb8>)
 8014bb2:	4605      	mov	r5, r0
 8014bb4:	7013      	strb	r3, [r2, #0]
 8014bb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014bb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014bba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014bbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014bbe:	682b      	ldr	r3, [r5, #0]
 8014bc0:	4802      	ldr	r0, [pc, #8]	; (8014bcc <racs_services__srv__Control__get_type_description_sources+0xbc>)
 8014bc2:	6023      	str	r3, [r4, #0]
 8014bc4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bc8:	2001052c 	.word	0x2001052c
 8014bcc:	0801fdec 	.word	0x0801fdec
 8014bd0:	0801fda4 	.word	0x0801fda4
 8014bd4:	200105e8 	.word	0x200105e8
 8014bd8:	0801fd5c 	.word	0x0801fd5c
 8014bdc:	0801fd38 	.word	0x0801fd38
 8014be0:	0801fd80 	.word	0x0801fd80

08014be4 <racs_services__srv__Control_Request__get_type_description_sources>:
 8014be4:	4b09      	ldr	r3, [pc, #36]	; (8014c0c <racs_services__srv__Control_Request__get_type_description_sources+0x28>)
 8014be6:	781a      	ldrb	r2, [r3, #0]
 8014be8:	b96a      	cbnz	r2, 8014c06 <racs_services__srv__Control_Request__get_type_description_sources+0x22>
 8014bea:	2201      	movs	r2, #1
 8014bec:	b430      	push	{r4, r5}
 8014bee:	4d08      	ldr	r5, [pc, #32]	; (8014c10 <racs_services__srv__Control_Request__get_type_description_sources+0x2c>)
 8014bf0:	4c08      	ldr	r4, [pc, #32]	; (8014c14 <racs_services__srv__Control_Request__get_type_description_sources+0x30>)
 8014bf2:	701a      	strb	r2, [r3, #0]
 8014bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014bf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014bfc:	682b      	ldr	r3, [r5, #0]
 8014bfe:	4806      	ldr	r0, [pc, #24]	; (8014c18 <racs_services__srv__Control_Request__get_type_description_sources+0x34>)
 8014c00:	6023      	str	r3, [r4, #0]
 8014c02:	bc30      	pop	{r4, r5}
 8014c04:	4770      	bx	lr
 8014c06:	4804      	ldr	r0, [pc, #16]	; (8014c18 <racs_services__srv__Control_Request__get_type_description_sources+0x34>)
 8014c08:	4770      	bx	lr
 8014c0a:	bf00      	nop
 8014c0c:	20010533 	.word	0x20010533
 8014c10:	0801fd80 	.word	0x0801fd80
 8014c14:	200106e4 	.word	0x200106e4
 8014c18:	0801fde0 	.word	0x0801fde0

08014c1c <racs_services__srv__Control_Response__get_type_description_sources>:
 8014c1c:	4b09      	ldr	r3, [pc, #36]	; (8014c44 <racs_services__srv__Control_Response__get_type_description_sources+0x28>)
 8014c1e:	781a      	ldrb	r2, [r3, #0]
 8014c20:	b96a      	cbnz	r2, 8014c3e <racs_services__srv__Control_Response__get_type_description_sources+0x22>
 8014c22:	2201      	movs	r2, #1
 8014c24:	b430      	push	{r4, r5}
 8014c26:	4d08      	ldr	r5, [pc, #32]	; (8014c48 <racs_services__srv__Control_Response__get_type_description_sources+0x2c>)
 8014c28:	4c08      	ldr	r4, [pc, #32]	; (8014c4c <racs_services__srv__Control_Response__get_type_description_sources+0x30>)
 8014c2a:	701a      	strb	r2, [r3, #0]
 8014c2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c34:	682b      	ldr	r3, [r5, #0]
 8014c36:	4806      	ldr	r0, [pc, #24]	; (8014c50 <racs_services__srv__Control_Response__get_type_description_sources+0x34>)
 8014c38:	6023      	str	r3, [r4, #0]
 8014c3a:	bc30      	pop	{r4, r5}
 8014c3c:	4770      	bx	lr
 8014c3e:	4804      	ldr	r0, [pc, #16]	; (8014c50 <racs_services__srv__Control_Response__get_type_description_sources+0x34>)
 8014c40:	4770      	bx	lr
 8014c42:	bf00      	nop
 8014c44:	20010532 	.word	0x20010532
 8014c48:	0801fd5c 	.word	0x0801fd5c
 8014c4c:	200106c0 	.word	0x200106c0
 8014c50:	0801fdd4 	.word	0x0801fdd4

08014c54 <racs_services__srv__Control_Event__get_type_description_sources>:
 8014c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c58:	4e27      	ldr	r6, [pc, #156]	; (8014cf8 <racs_services__srv__Control_Event__get_type_description_sources+0xa4>)
 8014c5a:	f896 8000 	ldrb.w	r8, [r6]
 8014c5e:	f1b8 0f00 	cmp.w	r8, #0
 8014c62:	d002      	beq.n	8014c6a <racs_services__srv__Control_Event__get_type_description_sources+0x16>
 8014c64:	4825      	ldr	r0, [pc, #148]	; (8014cfc <racs_services__srv__Control_Event__get_type_description_sources+0xa8>)
 8014c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014c6a:	4d25      	ldr	r5, [pc, #148]	; (8014d00 <racs_services__srv__Control_Event__get_type_description_sources+0xac>)
 8014c6c:	4c25      	ldr	r4, [pc, #148]	; (8014d04 <racs_services__srv__Control_Event__get_type_description_sources+0xb0>)
 8014c6e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8014d0c <racs_services__srv__Control_Event__get_type_description_sources+0xb8>
 8014c72:	4f25      	ldr	r7, [pc, #148]	; (8014d08 <racs_services__srv__Control_Event__get_type_description_sources+0xb4>)
 8014c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014c7c:	682b      	ldr	r3, [r5, #0]
 8014c7e:	4625      	mov	r5, r4
 8014c80:	4640      	mov	r0, r8
 8014c82:	f104 0928 	add.w	r9, r4, #40	; 0x28
 8014c86:	f845 3b04 	str.w	r3, [r5], #4
 8014c8a:	f005 ffe5 	bl	801ac58 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8014c8e:	4684      	mov	ip, r0
 8014c90:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 8014c94:	3470      	adds	r4, #112	; 0x70
 8014c96:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014c9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014c9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014ca0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014ca2:	f8dc 3000 	ldr.w	r3, [ip]
 8014ca6:	602b      	str	r3, [r5, #0]
 8014ca8:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8014cac:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8014cb0:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8014cb4:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8014cb8:	f8da 3000 	ldr.w	r3, [sl]
 8014cbc:	f8c9 3000 	str.w	r3, [r9]
 8014cc0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014cc2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014cc6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8014cc8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014ccc:	683b      	ldr	r3, [r7, #0]
 8014cce:	4640      	mov	r0, r8
 8014cd0:	f8ce 3000 	str.w	r3, [lr]
 8014cd4:	f005 ff6c 	bl	801abb0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 8014cd8:	2301      	movs	r3, #1
 8014cda:	4684      	mov	ip, r0
 8014cdc:	7033      	strb	r3, [r6, #0]
 8014cde:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ce4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014cea:	f8dc 3000 	ldr.w	r3, [ip]
 8014cee:	4803      	ldr	r0, [pc, #12]	; (8014cfc <racs_services__srv__Control_Event__get_type_description_sources+0xa8>)
 8014cf0:	6023      	str	r3, [r4, #0]
 8014cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cf6:	bf00      	nop
 8014cf8:	2001052f 	.word	0x2001052f
 8014cfc:	0801fdc8 	.word	0x0801fdc8
 8014d00:	0801fd38 	.word	0x0801fd38
 8014d04:	20010534 	.word	0x20010534
 8014d08:	0801fd5c 	.word	0x0801fd5c
 8014d0c:	0801fd80 	.word	0x0801fd80

08014d10 <racs_services__srv__Control_Event__fini.part.0>:
 8014d10:	b510      	push	{r4, lr}
 8014d12:	b086      	sub	sp, #24
 8014d14:	4604      	mov	r4, r0
 8014d16:	f005 ff89 	bl	801ac2c <service_msgs__msg__ServiceEventInfo__fini>
 8014d1a:	a801      	add	r0, sp, #4
 8014d1c:	f7f9 ff3a 	bl	800eb94 <rcutils_get_default_allocator>
 8014d20:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014d22:	b130      	cbz	r0, 8014d32 <racs_services__srv__Control_Event__fini.part.0+0x22>
 8014d24:	9b02      	ldr	r3, [sp, #8]
 8014d26:	9905      	ldr	r1, [sp, #20]
 8014d28:	4798      	blx	r3
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8014d30:	6323      	str	r3, [r4, #48]	; 0x30
 8014d32:	a801      	add	r0, sp, #4
 8014d34:	f7f9 ff2e 	bl	800eb94 <rcutils_get_default_allocator>
 8014d38:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014d3a:	b130      	cbz	r0, 8014d4a <racs_services__srv__Control_Event__fini.part.0+0x3a>
 8014d3c:	9b02      	ldr	r3, [sp, #8]
 8014d3e:	9905      	ldr	r1, [sp, #20]
 8014d40:	4798      	blx	r3
 8014d42:	2300      	movs	r3, #0
 8014d44:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8014d48:	63e3      	str	r3, [r4, #60]	; 0x3c
 8014d4a:	b006      	add	sp, #24
 8014d4c:	bd10      	pop	{r4, pc}
 8014d4e:	bf00      	nop

08014d50 <racs_services__srv__Control_Request__init>:
 8014d50:	3800      	subs	r0, #0
 8014d52:	bf18      	it	ne
 8014d54:	2001      	movne	r0, #1
 8014d56:	4770      	bx	lr

08014d58 <racs_services__srv__Control_Request__fini>:
 8014d58:	4770      	bx	lr
 8014d5a:	bf00      	nop

08014d5c <racs_services__srv__Control_Request__copy>:
 8014d5c:	b168      	cbz	r0, 8014d7a <racs_services__srv__Control_Request__copy+0x1e>
 8014d5e:	b161      	cbz	r1, 8014d7a <racs_services__srv__Control_Request__copy+0x1e>
 8014d60:	220a      	movs	r2, #10
 8014d62:	b508      	push	{r3, lr}
 8014d64:	4603      	mov	r3, r0
 8014d66:	4608      	mov	r0, r1
 8014d68:	f833 1b02 	ldrh.w	r1, [r3], #2
 8014d6c:	f820 1b02 	strh.w	r1, [r0], #2
 8014d70:	4619      	mov	r1, r3
 8014d72:	f008 feb5 	bl	801dae0 <memmove>
 8014d76:	2001      	movs	r0, #1
 8014d78:	bd08      	pop	{r3, pc}
 8014d7a:	2000      	movs	r0, #0
 8014d7c:	4770      	bx	lr
 8014d7e:	bf00      	nop

08014d80 <racs_services__srv__Control_Request__Sequence__init>:
 8014d80:	b530      	push	{r4, r5, lr}
 8014d82:	4604      	mov	r4, r0
 8014d84:	b087      	sub	sp, #28
 8014d86:	b148      	cbz	r0, 8014d9c <racs_services__srv__Control_Request__Sequence__init+0x1c>
 8014d88:	460d      	mov	r5, r1
 8014d8a:	a801      	add	r0, sp, #4
 8014d8c:	f7f9 ff02 	bl	800eb94 <rcutils_get_default_allocator>
 8014d90:	b935      	cbnz	r5, 8014da0 <racs_services__srv__Control_Request__Sequence__init+0x20>
 8014d92:	462b      	mov	r3, r5
 8014d94:	2001      	movs	r0, #1
 8014d96:	60a5      	str	r5, [r4, #8]
 8014d98:	e9c4 3500 	strd	r3, r5, [r4]
 8014d9c:	b007      	add	sp, #28
 8014d9e:	bd30      	pop	{r4, r5, pc}
 8014da0:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8014da4:	210c      	movs	r1, #12
 8014da6:	4628      	mov	r0, r5
 8014da8:	4798      	blx	r3
 8014daa:	4603      	mov	r3, r0
 8014dac:	2800      	cmp	r0, #0
 8014dae:	d1f1      	bne.n	8014d94 <racs_services__srv__Control_Request__Sequence__init+0x14>
 8014db0:	e7f4      	b.n	8014d9c <racs_services__srv__Control_Request__Sequence__init+0x1c>
 8014db2:	bf00      	nop

08014db4 <racs_services__srv__Control_Request__Sequence__fini>:
 8014db4:	b180      	cbz	r0, 8014dd8 <racs_services__srv__Control_Request__Sequence__fini+0x24>
 8014db6:	b510      	push	{r4, lr}
 8014db8:	b086      	sub	sp, #24
 8014dba:	4604      	mov	r4, r0
 8014dbc:	a801      	add	r0, sp, #4
 8014dbe:	f7f9 fee9 	bl	800eb94 <rcutils_get_default_allocator>
 8014dc2:	6820      	ldr	r0, [r4, #0]
 8014dc4:	b130      	cbz	r0, 8014dd4 <racs_services__srv__Control_Request__Sequence__fini+0x20>
 8014dc6:	9b02      	ldr	r3, [sp, #8]
 8014dc8:	9905      	ldr	r1, [sp, #20]
 8014dca:	4798      	blx	r3
 8014dcc:	2300      	movs	r3, #0
 8014dce:	e9c4 3300 	strd	r3, r3, [r4]
 8014dd2:	60a3      	str	r3, [r4, #8]
 8014dd4:	b006      	add	sp, #24
 8014dd6:	bd10      	pop	{r4, pc}
 8014dd8:	4770      	bx	lr
 8014dda:	bf00      	nop

08014ddc <racs_services__srv__Control_Response__init>:
 8014ddc:	3800      	subs	r0, #0
 8014dde:	bf18      	it	ne
 8014de0:	2001      	movne	r0, #1
 8014de2:	4770      	bx	lr

08014de4 <racs_services__srv__Control_Response__fini>:
 8014de4:	4770      	bx	lr
 8014de6:	bf00      	nop

08014de8 <racs_services__srv__Control_Response__copy>:
 8014de8:	b120      	cbz	r0, 8014df4 <racs_services__srv__Control_Response__copy+0xc>
 8014dea:	b119      	cbz	r1, 8014df4 <racs_services__srv__Control_Response__copy+0xc>
 8014dec:	7803      	ldrb	r3, [r0, #0]
 8014dee:	2001      	movs	r0, #1
 8014df0:	700b      	strb	r3, [r1, #0]
 8014df2:	4770      	bx	lr
 8014df4:	2000      	movs	r0, #0
 8014df6:	4770      	bx	lr

08014df8 <racs_services__srv__Control_Response__Sequence__init>:
 8014df8:	b530      	push	{r4, r5, lr}
 8014dfa:	4604      	mov	r4, r0
 8014dfc:	b087      	sub	sp, #28
 8014dfe:	b148      	cbz	r0, 8014e14 <racs_services__srv__Control_Response__Sequence__init+0x1c>
 8014e00:	460d      	mov	r5, r1
 8014e02:	a801      	add	r0, sp, #4
 8014e04:	f7f9 fec6 	bl	800eb94 <rcutils_get_default_allocator>
 8014e08:	b935      	cbnz	r5, 8014e18 <racs_services__srv__Control_Response__Sequence__init+0x20>
 8014e0a:	462b      	mov	r3, r5
 8014e0c:	2001      	movs	r0, #1
 8014e0e:	60a5      	str	r5, [r4, #8]
 8014e10:	e9c4 3500 	strd	r3, r5, [r4]
 8014e14:	b007      	add	sp, #28
 8014e16:	bd30      	pop	{r4, r5, pc}
 8014e18:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8014e1c:	2101      	movs	r1, #1
 8014e1e:	4628      	mov	r0, r5
 8014e20:	4798      	blx	r3
 8014e22:	4603      	mov	r3, r0
 8014e24:	2800      	cmp	r0, #0
 8014e26:	d1f1      	bne.n	8014e0c <racs_services__srv__Control_Response__Sequence__init+0x14>
 8014e28:	e7f4      	b.n	8014e14 <racs_services__srv__Control_Response__Sequence__init+0x1c>
 8014e2a:	bf00      	nop

08014e2c <racs_services__srv__Control_Response__Sequence__fini>:
 8014e2c:	b180      	cbz	r0, 8014e50 <racs_services__srv__Control_Response__Sequence__fini+0x24>
 8014e2e:	b510      	push	{r4, lr}
 8014e30:	b086      	sub	sp, #24
 8014e32:	4604      	mov	r4, r0
 8014e34:	a801      	add	r0, sp, #4
 8014e36:	f7f9 fead 	bl	800eb94 <rcutils_get_default_allocator>
 8014e3a:	6820      	ldr	r0, [r4, #0]
 8014e3c:	b130      	cbz	r0, 8014e4c <racs_services__srv__Control_Response__Sequence__fini+0x20>
 8014e3e:	9b02      	ldr	r3, [sp, #8]
 8014e40:	9905      	ldr	r1, [sp, #20]
 8014e42:	4798      	blx	r3
 8014e44:	2300      	movs	r3, #0
 8014e46:	e9c4 3300 	strd	r3, r3, [r4]
 8014e4a:	60a3      	str	r3, [r4, #8]
 8014e4c:	b006      	add	sp, #24
 8014e4e:	bd10      	pop	{r4, pc}
 8014e50:	4770      	bx	lr
 8014e52:	bf00      	nop

08014e54 <racs_services__srv__Control_Event__init>:
 8014e54:	b570      	push	{r4, r5, r6, lr}
 8014e56:	4604      	mov	r4, r0
 8014e58:	b086      	sub	sp, #24
 8014e5a:	b1c8      	cbz	r0, 8014e90 <racs_services__srv__Control_Event__init+0x3c>
 8014e5c:	f005 fed4 	bl	801ac08 <service_msgs__msg__ServiceEventInfo__init>
 8014e60:	4605      	mov	r5, r0
 8014e62:	b178      	cbz	r0, 8014e84 <racs_services__srv__Control_Event__init+0x30>
 8014e64:	2600      	movs	r6, #0
 8014e66:	a801      	add	r0, sp, #4
 8014e68:	f7f9 fe94 	bl	800eb94 <rcutils_get_default_allocator>
 8014e6c:	a801      	add	r0, sp, #4
 8014e6e:	6326      	str	r6, [r4, #48]	; 0x30
 8014e70:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
 8014e74:	f7f9 fe8e 	bl	800eb94 <rcutils_get_default_allocator>
 8014e78:	4628      	mov	r0, r5
 8014e7a:	63e6      	str	r6, [r4, #60]	; 0x3c
 8014e7c:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
 8014e80:	b006      	add	sp, #24
 8014e82:	bd70      	pop	{r4, r5, r6, pc}
 8014e84:	4620      	mov	r0, r4
 8014e86:	f7ff ff43 	bl	8014d10 <racs_services__srv__Control_Event__fini.part.0>
 8014e8a:	4628      	mov	r0, r5
 8014e8c:	b006      	add	sp, #24
 8014e8e:	bd70      	pop	{r4, r5, r6, pc}
 8014e90:	4605      	mov	r5, r0
 8014e92:	4628      	mov	r0, r5
 8014e94:	b006      	add	sp, #24
 8014e96:	bd70      	pop	{r4, r5, r6, pc}

08014e98 <racs_services__srv__Control_Event__fini>:
 8014e98:	b1f0      	cbz	r0, 8014ed8 <racs_services__srv__Control_Event__fini+0x40>
 8014e9a:	b510      	push	{r4, lr}
 8014e9c:	b086      	sub	sp, #24
 8014e9e:	4604      	mov	r4, r0
 8014ea0:	f005 fec4 	bl	801ac2c <service_msgs__msg__ServiceEventInfo__fini>
 8014ea4:	a801      	add	r0, sp, #4
 8014ea6:	f7f9 fe75 	bl	800eb94 <rcutils_get_default_allocator>
 8014eaa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014eac:	b130      	cbz	r0, 8014ebc <racs_services__srv__Control_Event__fini+0x24>
 8014eae:	9b02      	ldr	r3, [sp, #8]
 8014eb0:	9905      	ldr	r1, [sp, #20]
 8014eb2:	4798      	blx	r3
 8014eb4:	2300      	movs	r3, #0
 8014eb6:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8014eba:	6323      	str	r3, [r4, #48]	; 0x30
 8014ebc:	a801      	add	r0, sp, #4
 8014ebe:	f7f9 fe69 	bl	800eb94 <rcutils_get_default_allocator>
 8014ec2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8014ec4:	b130      	cbz	r0, 8014ed4 <racs_services__srv__Control_Event__fini+0x3c>
 8014ec6:	9b02      	ldr	r3, [sp, #8]
 8014ec8:	9905      	ldr	r1, [sp, #20]
 8014eca:	4798      	blx	r3
 8014ecc:	2300      	movs	r3, #0
 8014ece:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8014ed2:	63e3      	str	r3, [r4, #60]	; 0x3c
 8014ed4:	b006      	add	sp, #24
 8014ed6:	bd10      	pop	{r4, pc}
 8014ed8:	4770      	bx	lr
 8014eda:	bf00      	nop

08014edc <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control>:
 8014edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ee0:	2900      	cmp	r1, #0
 8014ee2:	d04d      	beq.n	8014f80 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0xa4>
 8014ee4:	4605      	mov	r5, r0
 8014ee6:	2800      	cmp	r0, #0
 8014ee8:	d04a      	beq.n	8014f80 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0xa4>
 8014eea:	460e      	mov	r6, r1
 8014eec:	4698      	mov	r8, r3
 8014eee:	2040      	movs	r0, #64	; 0x40
 8014ef0:	680b      	ldr	r3, [r1, #0]
 8014ef2:	6909      	ldr	r1, [r1, #16]
 8014ef4:	4617      	mov	r7, r2
 8014ef6:	4798      	blx	r3
 8014ef8:	4604      	mov	r4, r0
 8014efa:	f7ff ffab 	bl	8014e54 <racs_services__srv__Control_Event__init>
 8014efe:	4684      	mov	ip, r0
 8014f00:	b370      	cbz	r0, 8014f60 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x84>
 8014f02:	782b      	ldrb	r3, [r5, #0]
 8014f04:	7023      	strb	r3, [r4, #0]
 8014f06:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8014f0a:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8014f0e:	e9c4 2301 	strd	r2, r3, [r4, #4]
 8014f12:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8014f16:	68e8      	ldr	r0, [r5, #12]
 8014f18:	6929      	ldr	r1, [r5, #16]
 8014f1a:	696a      	ldr	r2, [r5, #20]
 8014f1c:	69ab      	ldr	r3, [r5, #24]
 8014f1e:	60e0      	str	r0, [r4, #12]
 8014f20:	6121      	str	r1, [r4, #16]
 8014f22:	6162      	str	r2, [r4, #20]
 8014f24:	61a3      	str	r3, [r4, #24]
 8014f26:	b157      	cbz	r7, 8014f3e <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x62>
 8014f28:	2101      	movs	r1, #1
 8014f2a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014f2e:	f7ff ff27 	bl	8014d80 <racs_services__srv__Control_Request__Sequence__init>
 8014f32:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8014f34:	4638      	mov	r0, r7
 8014f36:	f7ff ff11 	bl	8014d5c <racs_services__srv__Control_Request__copy>
 8014f3a:	4603      	mov	r3, r0
 8014f3c:	b1c0      	cbz	r0, 8014f70 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x94>
 8014f3e:	f1b8 0f00 	cmp.w	r8, #0
 8014f42:	d00a      	beq.n	8014f5a <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x7e>
 8014f44:	2101      	movs	r1, #1
 8014f46:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8014f4a:	f7ff ff55 	bl	8014df8 <racs_services__srv__Control_Response__Sequence__init>
 8014f4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014f50:	4640      	mov	r0, r8
 8014f52:	f7ff ff49 	bl	8014de8 <racs_services__srv__Control_Response__copy>
 8014f56:	4603      	mov	r3, r0
 8014f58:	b150      	cbz	r0, 8014f70 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x94>
 8014f5a:	4620      	mov	r0, r4
 8014f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f60:	4620      	mov	r0, r4
 8014f62:	4664      	mov	r4, ip
 8014f64:	6873      	ldr	r3, [r6, #4]
 8014f66:	6931      	ldr	r1, [r6, #16]
 8014f68:	4798      	blx	r3
 8014f6a:	4620      	mov	r0, r4
 8014f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f70:	4620      	mov	r0, r4
 8014f72:	461c      	mov	r4, r3
 8014f74:	6872      	ldr	r2, [r6, #4]
 8014f76:	6931      	ldr	r1, [r6, #16]
 8014f78:	4790      	blx	r2
 8014f7a:	4620      	mov	r0, r4
 8014f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f80:	2400      	movs	r4, #0
 8014f82:	4620      	mov	r0, r4
 8014f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014f88 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control>:
 8014f88:	b1b9      	cbz	r1, 8014fba <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x32>
 8014f8a:	b538      	push	{r3, r4, r5, lr}
 8014f8c:	4605      	mov	r5, r0
 8014f8e:	b190      	cbz	r0, 8014fb6 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x2e>
 8014f90:	460c      	mov	r4, r1
 8014f92:	f7ff ff81 	bl	8014e98 <racs_services__srv__Control_Event__fini>
 8014f96:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8014f98:	b110      	cbz	r0, 8014fa0 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x18>
 8014f9a:	6863      	ldr	r3, [r4, #4]
 8014f9c:	6921      	ldr	r1, [r4, #16]
 8014f9e:	4798      	blx	r3
 8014fa0:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8014fa2:	b110      	cbz	r0, 8014faa <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x22>
 8014fa4:	6863      	ldr	r3, [r4, #4]
 8014fa6:	6921      	ldr	r1, [r4, #16]
 8014fa8:	4798      	blx	r3
 8014faa:	4628      	mov	r0, r5
 8014fac:	6863      	ldr	r3, [r4, #4]
 8014fae:	6921      	ldr	r1, [r4, #16]
 8014fb0:	4798      	blx	r3
 8014fb2:	2001      	movs	r0, #1
 8014fb4:	bd38      	pop	{r3, r4, r5, pc}
 8014fb6:	2000      	movs	r0, #0
 8014fb8:	bd38      	pop	{r3, r4, r5, pc}
 8014fba:	2000      	movs	r0, #0
 8014fbc:	4770      	bx	lr
 8014fbe:	bf00      	nop

08014fc0 <racs_services__msg__Debug__get_type_hash>:
 8014fc0:	4800      	ldr	r0, [pc, #0]	; (8014fc4 <racs_services__msg__Debug__get_type_hash+0x4>)
 8014fc2:	4770      	bx	lr
 8014fc4:	200012c4 	.word	0x200012c4

08014fc8 <racs_services__msg__Debug__get_type_description>:
 8014fc8:	4b03      	ldr	r3, [pc, #12]	; (8014fd8 <racs_services__msg__Debug__get_type_description+0x10>)
 8014fca:	781a      	ldrb	r2, [r3, #0]
 8014fcc:	b90a      	cbnz	r2, 8014fd2 <racs_services__msg__Debug__get_type_description+0xa>
 8014fce:	2201      	movs	r2, #1
 8014fd0:	701a      	strb	r2, [r3, #0]
 8014fd2:	4802      	ldr	r0, [pc, #8]	; (8014fdc <racs_services__msg__Debug__get_type_description+0x14>)
 8014fd4:	4770      	bx	lr
 8014fd6:	bf00      	nop
 8014fd8:	20010709 	.word	0x20010709
 8014fdc:	0801fdf8 	.word	0x0801fdf8

08014fe0 <racs_services__msg__Debug__get_type_description_sources>:
 8014fe0:	4b09      	ldr	r3, [pc, #36]	; (8015008 <racs_services__msg__Debug__get_type_description_sources+0x28>)
 8014fe2:	781a      	ldrb	r2, [r3, #0]
 8014fe4:	b96a      	cbnz	r2, 8015002 <racs_services__msg__Debug__get_type_description_sources+0x22>
 8014fe6:	2201      	movs	r2, #1
 8014fe8:	b430      	push	{r4, r5}
 8014fea:	4d08      	ldr	r5, [pc, #32]	; (801500c <racs_services__msg__Debug__get_type_description_sources+0x2c>)
 8014fec:	4c08      	ldr	r4, [pc, #32]	; (8015010 <racs_services__msg__Debug__get_type_description_sources+0x30>)
 8014fee:	701a      	strb	r2, [r3, #0]
 8014ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ff2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014ff8:	682b      	ldr	r3, [r5, #0]
 8014ffa:	4806      	ldr	r0, [pc, #24]	; (8015014 <racs_services__msg__Debug__get_type_description_sources+0x34>)
 8014ffc:	6023      	str	r3, [r4, #0]
 8014ffe:	bc30      	pop	{r4, r5}
 8015000:	4770      	bx	lr
 8015002:	4804      	ldr	r0, [pc, #16]	; (8015014 <racs_services__msg__Debug__get_type_description_sources+0x34>)
 8015004:	4770      	bx	lr
 8015006:	bf00      	nop
 8015008:	20010708 	.word	0x20010708
 801500c:	0801fe1c 	.word	0x0801fe1c
 8015010:	2001070c 	.word	0x2001070c
 8015014:	0801fe40 	.word	0x0801fe40

08015018 <racs_services__msg__Debug__init>:
 8015018:	3800      	subs	r0, #0
 801501a:	bf18      	it	ne
 801501c:	2001      	movne	r0, #1
 801501e:	4770      	bx	lr

08015020 <racs_services__msg__Debug__fini>:
 8015020:	4770      	bx	lr
 8015022:	bf00      	nop

08015024 <racs_services__msg__DirectAccess__get_type_hash>:
 8015024:	4800      	ldr	r0, [pc, #0]	; (8015028 <racs_services__msg__DirectAccess__get_type_hash+0x4>)
 8015026:	4770      	bx	lr
 8015028:	20001368 	.word	0x20001368

0801502c <racs_services__msg__DirectAccess__get_type_description>:
 801502c:	4b03      	ldr	r3, [pc, #12]	; (801503c <racs_services__msg__DirectAccess__get_type_description+0x10>)
 801502e:	781a      	ldrb	r2, [r3, #0]
 8015030:	b90a      	cbnz	r2, 8015036 <racs_services__msg__DirectAccess__get_type_description+0xa>
 8015032:	2201      	movs	r2, #1
 8015034:	701a      	strb	r2, [r3, #0]
 8015036:	4802      	ldr	r0, [pc, #8]	; (8015040 <racs_services__msg__DirectAccess__get_type_description+0x14>)
 8015038:	4770      	bx	lr
 801503a:	bf00      	nop
 801503c:	20010731 	.word	0x20010731
 8015040:	0801fe4c 	.word	0x0801fe4c

08015044 <racs_services__msg__DirectAccess__get_type_description_sources>:
 8015044:	4b09      	ldr	r3, [pc, #36]	; (801506c <racs_services__msg__DirectAccess__get_type_description_sources+0x28>)
 8015046:	781a      	ldrb	r2, [r3, #0]
 8015048:	b96a      	cbnz	r2, 8015066 <racs_services__msg__DirectAccess__get_type_description_sources+0x22>
 801504a:	2201      	movs	r2, #1
 801504c:	b430      	push	{r4, r5}
 801504e:	4d08      	ldr	r5, [pc, #32]	; (8015070 <racs_services__msg__DirectAccess__get_type_description_sources+0x2c>)
 8015050:	4c08      	ldr	r4, [pc, #32]	; (8015074 <racs_services__msg__DirectAccess__get_type_description_sources+0x30>)
 8015052:	701a      	strb	r2, [r3, #0]
 8015054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801505a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801505c:	682b      	ldr	r3, [r5, #0]
 801505e:	4806      	ldr	r0, [pc, #24]	; (8015078 <racs_services__msg__DirectAccess__get_type_description_sources+0x34>)
 8015060:	6023      	str	r3, [r4, #0]
 8015062:	bc30      	pop	{r4, r5}
 8015064:	4770      	bx	lr
 8015066:	4804      	ldr	r0, [pc, #16]	; (8015078 <racs_services__msg__DirectAccess__get_type_description_sources+0x34>)
 8015068:	4770      	bx	lr
 801506a:	bf00      	nop
 801506c:	20010730 	.word	0x20010730
 8015070:	0801fe70 	.word	0x0801fe70
 8015074:	20010734 	.word	0x20010734
 8015078:	0801fe94 	.word	0x0801fe94

0801507c <racs_services__msg__DirectAccess__init>:
 801507c:	3800      	subs	r0, #0
 801507e:	bf18      	it	ne
 8015080:	2001      	movne	r0, #1
 8015082:	4770      	bx	lr

08015084 <racs_services__msg__DirectAccess__fini>:
 8015084:	4770      	bx	lr
 8015086:	bf00      	nop

08015088 <racs_services__msg__Encoder__get_type_hash>:
 8015088:	4800      	ldr	r0, [pc, #0]	; (801508c <racs_services__msg__Encoder__get_type_hash+0x4>)
 801508a:	4770      	bx	lr
 801508c:	20001410 	.word	0x20001410

08015090 <racs_services__msg__Encoder__get_type_description>:
 8015090:	4b03      	ldr	r3, [pc, #12]	; (80150a0 <racs_services__msg__Encoder__get_type_description+0x10>)
 8015092:	781a      	ldrb	r2, [r3, #0]
 8015094:	b90a      	cbnz	r2, 801509a <racs_services__msg__Encoder__get_type_description+0xa>
 8015096:	2201      	movs	r2, #1
 8015098:	701a      	strb	r2, [r3, #0]
 801509a:	4802      	ldr	r0, [pc, #8]	; (80150a4 <racs_services__msg__Encoder__get_type_description+0x14>)
 801509c:	4770      	bx	lr
 801509e:	bf00      	nop
 80150a0:	20010759 	.word	0x20010759
 80150a4:	0801fea0 	.word	0x0801fea0

080150a8 <racs_services__msg__Encoder__get_type_description_sources>:
 80150a8:	4b09      	ldr	r3, [pc, #36]	; (80150d0 <racs_services__msg__Encoder__get_type_description_sources+0x28>)
 80150aa:	781a      	ldrb	r2, [r3, #0]
 80150ac:	b96a      	cbnz	r2, 80150ca <racs_services__msg__Encoder__get_type_description_sources+0x22>
 80150ae:	2201      	movs	r2, #1
 80150b0:	b430      	push	{r4, r5}
 80150b2:	4d08      	ldr	r5, [pc, #32]	; (80150d4 <racs_services__msg__Encoder__get_type_description_sources+0x2c>)
 80150b4:	4c08      	ldr	r4, [pc, #32]	; (80150d8 <racs_services__msg__Encoder__get_type_description_sources+0x30>)
 80150b6:	701a      	strb	r2, [r3, #0]
 80150b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80150ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80150bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80150be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80150c0:	682b      	ldr	r3, [r5, #0]
 80150c2:	4806      	ldr	r0, [pc, #24]	; (80150dc <racs_services__msg__Encoder__get_type_description_sources+0x34>)
 80150c4:	6023      	str	r3, [r4, #0]
 80150c6:	bc30      	pop	{r4, r5}
 80150c8:	4770      	bx	lr
 80150ca:	4804      	ldr	r0, [pc, #16]	; (80150dc <racs_services__msg__Encoder__get_type_description_sources+0x34>)
 80150cc:	4770      	bx	lr
 80150ce:	bf00      	nop
 80150d0:	20010758 	.word	0x20010758
 80150d4:	0801fec4 	.word	0x0801fec4
 80150d8:	2001075c 	.word	0x2001075c
 80150dc:	0801fee8 	.word	0x0801fee8

080150e0 <racs_services__msg__Encoder__init>:
 80150e0:	3800      	subs	r0, #0
 80150e2:	bf18      	it	ne
 80150e4:	2001      	movne	r0, #1
 80150e6:	4770      	bx	lr

080150e8 <racs_services__msg__Encoder__fini>:
 80150e8:	4770      	bx	lr
 80150ea:	bf00      	nop

080150ec <racs_services__msg__Feedback__get_type_hash>:
 80150ec:	4800      	ldr	r0, [pc, #0]	; (80150f0 <racs_services__msg__Feedback__get_type_hash+0x4>)
 80150ee:	4770      	bx	lr
 80150f0:	200014bc 	.word	0x200014bc

080150f4 <racs_services__msg__Feedback__get_type_description>:
 80150f4:	4b03      	ldr	r3, [pc, #12]	; (8015104 <racs_services__msg__Feedback__get_type_description+0x10>)
 80150f6:	781a      	ldrb	r2, [r3, #0]
 80150f8:	b90a      	cbnz	r2, 80150fe <racs_services__msg__Feedback__get_type_description+0xa>
 80150fa:	2201      	movs	r2, #1
 80150fc:	701a      	strb	r2, [r3, #0]
 80150fe:	4802      	ldr	r0, [pc, #8]	; (8015108 <racs_services__msg__Feedback__get_type_description+0x14>)
 8015100:	4770      	bx	lr
 8015102:	bf00      	nop
 8015104:	20010781 	.word	0x20010781
 8015108:	0801fef4 	.word	0x0801fef4

0801510c <racs_services__msg__Feedback__get_type_description_sources>:
 801510c:	4b09      	ldr	r3, [pc, #36]	; (8015134 <racs_services__msg__Feedback__get_type_description_sources+0x28>)
 801510e:	781a      	ldrb	r2, [r3, #0]
 8015110:	b96a      	cbnz	r2, 801512e <racs_services__msg__Feedback__get_type_description_sources+0x22>
 8015112:	2201      	movs	r2, #1
 8015114:	b430      	push	{r4, r5}
 8015116:	4d08      	ldr	r5, [pc, #32]	; (8015138 <racs_services__msg__Feedback__get_type_description_sources+0x2c>)
 8015118:	4c08      	ldr	r4, [pc, #32]	; (801513c <racs_services__msg__Feedback__get_type_description_sources+0x30>)
 801511a:	701a      	strb	r2, [r3, #0]
 801511c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801511e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015124:	682b      	ldr	r3, [r5, #0]
 8015126:	4806      	ldr	r0, [pc, #24]	; (8015140 <racs_services__msg__Feedback__get_type_description_sources+0x34>)
 8015128:	6023      	str	r3, [r4, #0]
 801512a:	bc30      	pop	{r4, r5}
 801512c:	4770      	bx	lr
 801512e:	4804      	ldr	r0, [pc, #16]	; (8015140 <racs_services__msg__Feedback__get_type_description_sources+0x34>)
 8015130:	4770      	bx	lr
 8015132:	bf00      	nop
 8015134:	20010780 	.word	0x20010780
 8015138:	0801ff18 	.word	0x0801ff18
 801513c:	20010784 	.word	0x20010784
 8015140:	0801ff3c 	.word	0x0801ff3c

08015144 <racs_services__msg__Feedback__init>:
 8015144:	3800      	subs	r0, #0
 8015146:	bf18      	it	ne
 8015148:	2001      	movne	r0, #1
 801514a:	4770      	bx	lr

0801514c <racs_services__msg__Feedback__fini>:
 801514c:	4770      	bx	lr
 801514e:	bf00      	nop

08015150 <racs_services__srv__Setup_Event__get_type_description.part.0>:
 8015150:	b510      	push	{r4, lr}
 8015152:	2000      	movs	r0, #0
 8015154:	4c13      	ldr	r4, [pc, #76]	; (80151a4 <racs_services__srv__Setup_Event__get_type_description.part.0+0x54>)
 8015156:	f005 fd73 	bl	801ac40 <builtin_interfaces__msg__Time__get_type_description>
 801515a:	300c      	adds	r0, #12
 801515c:	4b12      	ldr	r3, [pc, #72]	; (80151a8 <racs_services__srv__Setup_Event__get_type_description.part.0+0x58>)
 801515e:	c807      	ldmia	r0, {r0, r1, r2}
 8015160:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015164:	7823      	ldrb	r3, [r4, #0]
 8015166:	b90b      	cbnz	r3, 801516c <racs_services__srv__Setup_Event__get_type_description.part.0+0x1c>
 8015168:	2301      	movs	r3, #1
 801516a:	7023      	strb	r3, [r4, #0]
 801516c:	4a0f      	ldr	r2, [pc, #60]	; (80151ac <racs_services__srv__Setup_Event__get_type_description.part.0+0x5c>)
 801516e:	4b10      	ldr	r3, [pc, #64]	; (80151b0 <racs_services__srv__Setup_Event__get_type_description.part.0+0x60>)
 8015170:	4c10      	ldr	r4, [pc, #64]	; (80151b4 <racs_services__srv__Setup_Event__get_type_description.part.0+0x64>)
 8015172:	ca07      	ldmia	r2, {r0, r1, r2}
 8015174:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015178:	7823      	ldrb	r3, [r4, #0]
 801517a:	b90b      	cbnz	r3, 8015180 <racs_services__srv__Setup_Event__get_type_description.part.0+0x30>
 801517c:	2301      	movs	r3, #1
 801517e:	7023      	strb	r3, [r4, #0]
 8015180:	4b0d      	ldr	r3, [pc, #52]	; (80151b8 <racs_services__srv__Setup_Event__get_type_description.part.0+0x68>)
 8015182:	4c0e      	ldr	r4, [pc, #56]	; (80151bc <racs_services__srv__Setup_Event__get_type_description.part.0+0x6c>)
 8015184:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015188:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801518c:	2000      	movs	r0, #0
 801518e:	3418      	adds	r4, #24
 8015190:	f005 fcf6 	bl	801ab80 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8015194:	300c      	adds	r0, #12
 8015196:	4b0a      	ldr	r3, [pc, #40]	; (80151c0 <racs_services__srv__Setup_Event__get_type_description.part.0+0x70>)
 8015198:	c807      	ldmia	r0, {r0, r1, r2}
 801519a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801519e:	2201      	movs	r2, #1
 80151a0:	701a      	strb	r2, [r3, #0]
 80151a2:	bd10      	pop	{r4, pc}
 80151a4:	200107ac 	.word	0x200107ac
 80151a8:	20001728 	.word	0x20001728
 80151ac:	0801ff9c 	.word	0x0801ff9c
 80151b0:	20001740 	.word	0x20001740
 80151b4:	200107aa 	.word	0x200107aa
 80151b8:	0801ff78 	.word	0x0801ff78
 80151bc:	20001758 	.word	0x20001758
 80151c0:	200107a9 	.word	0x200107a9

080151c4 <racs_services__srv__Setup__get_type_hash>:
 80151c4:	4800      	ldr	r0, [pc, #0]	; (80151c8 <racs_services__srv__Setup__get_type_hash+0x4>)
 80151c6:	4770      	bx	lr
 80151c8:	200015f4 	.word	0x200015f4

080151cc <racs_services__srv__Setup_Request__get_type_hash>:
 80151cc:	4800      	ldr	r0, [pc, #0]	; (80151d0 <racs_services__srv__Setup_Request__get_type_hash+0x4>)
 80151ce:	4770      	bx	lr
 80151d0:	200015d0 	.word	0x200015d0

080151d4 <racs_services__srv__Setup_Response__get_type_hash>:
 80151d4:	4800      	ldr	r0, [pc, #0]	; (80151d8 <racs_services__srv__Setup_Response__get_type_hash+0x4>)
 80151d6:	4770      	bx	lr
 80151d8:	200015ac 	.word	0x200015ac

080151dc <racs_services__srv__Setup_Event__get_type_hash>:
 80151dc:	4800      	ldr	r0, [pc, #0]	; (80151e0 <racs_services__srv__Setup_Event__get_type_hash+0x4>)
 80151de:	4770      	bx	lr
 80151e0:	20001588 	.word	0x20001588

080151e4 <racs_services__srv__Setup__get_type_description>:
 80151e4:	b538      	push	{r3, r4, r5, lr}
 80151e6:	4d1c      	ldr	r5, [pc, #112]	; (8015258 <racs_services__srv__Setup__get_type_description+0x74>)
 80151e8:	7828      	ldrb	r0, [r5, #0]
 80151ea:	b108      	cbz	r0, 80151f0 <racs_services__srv__Setup__get_type_description+0xc>
 80151ec:	481b      	ldr	r0, [pc, #108]	; (801525c <racs_services__srv__Setup__get_type_description+0x78>)
 80151ee:	bd38      	pop	{r3, r4, r5, pc}
 80151f0:	f005 fd26 	bl	801ac40 <builtin_interfaces__msg__Time__get_type_description>
 80151f4:	300c      	adds	r0, #12
 80151f6:	4b1a      	ldr	r3, [pc, #104]	; (8015260 <racs_services__srv__Setup__get_type_description+0x7c>)
 80151f8:	c807      	ldmia	r0, {r0, r1, r2}
 80151fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80151fe:	4b19      	ldr	r3, [pc, #100]	; (8015264 <racs_services__srv__Setup__get_type_description+0x80>)
 8015200:	781b      	ldrb	r3, [r3, #0]
 8015202:	b32b      	cbz	r3, 8015250 <racs_services__srv__Setup__get_type_description+0x6c>
 8015204:	4a18      	ldr	r2, [pc, #96]	; (8015268 <racs_services__srv__Setup__get_type_description+0x84>)
 8015206:	4b19      	ldr	r3, [pc, #100]	; (801526c <racs_services__srv__Setup__get_type_description+0x88>)
 8015208:	4c19      	ldr	r4, [pc, #100]	; (8015270 <racs_services__srv__Setup__get_type_description+0x8c>)
 801520a:	ca07      	ldmia	r2, {r0, r1, r2}
 801520c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015210:	7823      	ldrb	r3, [r4, #0]
 8015212:	b90b      	cbnz	r3, 8015218 <racs_services__srv__Setup__get_type_description+0x34>
 8015214:	2301      	movs	r3, #1
 8015216:	7023      	strb	r3, [r4, #0]
 8015218:	4a16      	ldr	r2, [pc, #88]	; (8015274 <racs_services__srv__Setup__get_type_description+0x90>)
 801521a:	4b17      	ldr	r3, [pc, #92]	; (8015278 <racs_services__srv__Setup__get_type_description+0x94>)
 801521c:	4c17      	ldr	r4, [pc, #92]	; (801527c <racs_services__srv__Setup__get_type_description+0x98>)
 801521e:	ca07      	ldmia	r2, {r0, r1, r2}
 8015220:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8015224:	7823      	ldrb	r3, [r4, #0]
 8015226:	b90b      	cbnz	r3, 801522c <racs_services__srv__Setup__get_type_description+0x48>
 8015228:	2301      	movs	r3, #1
 801522a:	7023      	strb	r3, [r4, #0]
 801522c:	4b14      	ldr	r3, [pc, #80]	; (8015280 <racs_services__srv__Setup__get_type_description+0x9c>)
 801522e:	4c15      	ldr	r4, [pc, #84]	; (8015284 <racs_services__srv__Setup__get_type_description+0xa0>)
 8015230:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015234:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8015238:	2000      	movs	r0, #0
 801523a:	3418      	adds	r4, #24
 801523c:	f005 fca0 	bl	801ab80 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8015240:	300c      	adds	r0, #12
 8015242:	2301      	movs	r3, #1
 8015244:	c807      	ldmia	r0, {r0, r1, r2}
 8015246:	702b      	strb	r3, [r5, #0]
 8015248:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801524c:	4803      	ldr	r0, [pc, #12]	; (801525c <racs_services__srv__Setup__get_type_description+0x78>)
 801524e:	bd38      	pop	{r3, r4, r5, pc}
 8015250:	f7ff ff7e 	bl	8015150 <racs_services__srv__Setup_Event__get_type_description.part.0>
 8015254:	e7d6      	b.n	8015204 <racs_services__srv__Setup__get_type_description+0x20>
 8015256:	bf00      	nop
 8015258:	200107ad 	.word	0x200107ad
 801525c:	0801ffb4 	.word	0x0801ffb4
 8015260:	20001b70 	.word	0x20001b70
 8015264:	200107a9 	.word	0x200107a9
 8015268:	0801ff54 	.word	0x0801ff54
 801526c:	20001b88 	.word	0x20001b88
 8015270:	200107ac 	.word	0x200107ac
 8015274:	0801ff9c 	.word	0x0801ff9c
 8015278:	20001ba0 	.word	0x20001ba0
 801527c:	200107aa 	.word	0x200107aa
 8015280:	0801ff78 	.word	0x0801ff78
 8015284:	20001bb8 	.word	0x20001bb8

08015288 <racs_services__srv__Setup_Request__get_type_description>:
 8015288:	4b03      	ldr	r3, [pc, #12]	; (8015298 <racs_services__srv__Setup_Request__get_type_description+0x10>)
 801528a:	781a      	ldrb	r2, [r3, #0]
 801528c:	b90a      	cbnz	r2, 8015292 <racs_services__srv__Setup_Request__get_type_description+0xa>
 801528e:	2201      	movs	r2, #1
 8015290:	701a      	strb	r2, [r3, #0]
 8015292:	4802      	ldr	r0, [pc, #8]	; (801529c <racs_services__srv__Setup_Request__get_type_description+0x14>)
 8015294:	4770      	bx	lr
 8015296:	bf00      	nop
 8015298:	200107ac 	.word	0x200107ac
 801529c:	0801ff90 	.word	0x0801ff90

080152a0 <racs_services__srv__Setup_Response__get_type_description>:
 80152a0:	4b03      	ldr	r3, [pc, #12]	; (80152b0 <racs_services__srv__Setup_Response__get_type_description+0x10>)
 80152a2:	781a      	ldrb	r2, [r3, #0]
 80152a4:	b90a      	cbnz	r2, 80152aa <racs_services__srv__Setup_Response__get_type_description+0xa>
 80152a6:	2201      	movs	r2, #1
 80152a8:	701a      	strb	r2, [r3, #0]
 80152aa:	4802      	ldr	r0, [pc, #8]	; (80152b4 <racs_services__srv__Setup_Response__get_type_description+0x14>)
 80152ac:	4770      	bx	lr
 80152ae:	bf00      	nop
 80152b0:	200107aa 	.word	0x200107aa
 80152b4:	0801ff6c 	.word	0x0801ff6c

080152b8 <racs_services__srv__Setup_Event__get_type_description>:
 80152b8:	b508      	push	{r3, lr}
 80152ba:	4b04      	ldr	r3, [pc, #16]	; (80152cc <racs_services__srv__Setup_Event__get_type_description+0x14>)
 80152bc:	781b      	ldrb	r3, [r3, #0]
 80152be:	b10b      	cbz	r3, 80152c4 <racs_services__srv__Setup_Event__get_type_description+0xc>
 80152c0:	4803      	ldr	r0, [pc, #12]	; (80152d0 <racs_services__srv__Setup_Event__get_type_description+0x18>)
 80152c2:	bd08      	pop	{r3, pc}
 80152c4:	f7ff ff44 	bl	8015150 <racs_services__srv__Setup_Event__get_type_description.part.0>
 80152c8:	4801      	ldr	r0, [pc, #4]	; (80152d0 <racs_services__srv__Setup_Event__get_type_description+0x18>)
 80152ca:	bd08      	pop	{r3, pc}
 80152cc:	200107a9 	.word	0x200107a9
 80152d0:	0801ff48 	.word	0x0801ff48

080152d4 <racs_services__srv__Setup__get_type_description_sources>:
 80152d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152d8:	4b2c      	ldr	r3, [pc, #176]	; (801538c <racs_services__srv__Setup__get_type_description_sources+0xb8>)
 80152da:	f893 9000 	ldrb.w	r9, [r3]
 80152de:	f1b9 0f00 	cmp.w	r9, #0
 80152e2:	d002      	beq.n	80152ea <racs_services__srv__Setup__get_type_description_sources+0x16>
 80152e4:	482a      	ldr	r0, [pc, #168]	; (8015390 <racs_services__srv__Setup__get_type_description_sources+0xbc>)
 80152e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152ea:	4d2a      	ldr	r5, [pc, #168]	; (8015394 <racs_services__srv__Setup__get_type_description_sources+0xc0>)
 80152ec:	4c2a      	ldr	r4, [pc, #168]	; (8015398 <racs_services__srv__Setup__get_type_description_sources+0xc4>)
 80152ee:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 80153a0 <racs_services__srv__Setup__get_type_description_sources+0xcc>
 80152f2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80153a4 <racs_services__srv__Setup__get_type_description_sources+0xd0>
 80152f6:	4e29      	ldr	r6, [pc, #164]	; (801539c <racs_services__srv__Setup__get_type_description_sources+0xc8>)
 80152f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80152fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80152fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80152fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015300:	682b      	ldr	r3, [r5, #0]
 8015302:	4625      	mov	r5, r4
 8015304:	4648      	mov	r0, r9
 8015306:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 801530a:	f845 3b04 	str.w	r3, [r5], #4
 801530e:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 8015312:	f005 fca1 	bl	801ac58 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8015316:	4684      	mov	ip, r0
 8015318:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 801531c:	3494      	adds	r4, #148	; 0x94
 801531e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015322:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015324:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015328:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801532a:	f8dc 3000 	ldr.w	r3, [ip]
 801532e:	602b      	str	r3, [r5, #0]
 8015330:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8015334:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8015338:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 801533c:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8015340:	f8db 3000 	ldr.w	r3, [fp]
 8015344:	f8ca 3000 	str.w	r3, [sl]
 8015348:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 801534c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801534e:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8015352:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015354:	f8d8 3000 	ldr.w	r3, [r8]
 8015358:	603b      	str	r3, [r7, #0]
 801535a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801535c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015360:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015362:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015366:	6833      	ldr	r3, [r6, #0]
 8015368:	4648      	mov	r0, r9
 801536a:	f8ce 3000 	str.w	r3, [lr]
 801536e:	f005 fc1f 	bl	801abb0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 8015372:	2301      	movs	r3, #1
 8015374:	4a05      	ldr	r2, [pc, #20]	; (801538c <racs_services__srv__Setup__get_type_description_sources+0xb8>)
 8015376:	4605      	mov	r5, r0
 8015378:	7013      	strb	r3, [r2, #0]
 801537a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801537c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801537e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015382:	682b      	ldr	r3, [r5, #0]
 8015384:	4802      	ldr	r0, [pc, #8]	; (8015390 <racs_services__srv__Setup__get_type_description_sources+0xbc>)
 8015386:	6023      	str	r3, [r4, #0]
 8015388:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801538c:	200107a8 	.word	0x200107a8
 8015390:	0802008c 	.word	0x0802008c
 8015394:	08020044 	.word	0x08020044
 8015398:	20010864 	.word	0x20010864
 801539c:	0801fffc 	.word	0x0801fffc
 80153a0:	0801ffd8 	.word	0x0801ffd8
 80153a4:	08020020 	.word	0x08020020

080153a8 <racs_services__srv__Setup_Request__get_type_description_sources>:
 80153a8:	4b09      	ldr	r3, [pc, #36]	; (80153d0 <racs_services__srv__Setup_Request__get_type_description_sources+0x28>)
 80153aa:	781a      	ldrb	r2, [r3, #0]
 80153ac:	b96a      	cbnz	r2, 80153ca <racs_services__srv__Setup_Request__get_type_description_sources+0x22>
 80153ae:	2201      	movs	r2, #1
 80153b0:	b430      	push	{r4, r5}
 80153b2:	4d08      	ldr	r5, [pc, #32]	; (80153d4 <racs_services__srv__Setup_Request__get_type_description_sources+0x2c>)
 80153b4:	4c08      	ldr	r4, [pc, #32]	; (80153d8 <racs_services__srv__Setup_Request__get_type_description_sources+0x30>)
 80153b6:	701a      	strb	r2, [r3, #0]
 80153b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80153ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80153bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80153be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80153c0:	682b      	ldr	r3, [r5, #0]
 80153c2:	4806      	ldr	r0, [pc, #24]	; (80153dc <racs_services__srv__Setup_Request__get_type_description_sources+0x34>)
 80153c4:	6023      	str	r3, [r4, #0]
 80153c6:	bc30      	pop	{r4, r5}
 80153c8:	4770      	bx	lr
 80153ca:	4804      	ldr	r0, [pc, #16]	; (80153dc <racs_services__srv__Setup_Request__get_type_description_sources+0x34>)
 80153cc:	4770      	bx	lr
 80153ce:	bf00      	nop
 80153d0:	200107af 	.word	0x200107af
 80153d4:	08020020 	.word	0x08020020
 80153d8:	20010960 	.word	0x20010960
 80153dc:	08020080 	.word	0x08020080

080153e0 <racs_services__srv__Setup_Response__get_type_description_sources>:
 80153e0:	4b09      	ldr	r3, [pc, #36]	; (8015408 <racs_services__srv__Setup_Response__get_type_description_sources+0x28>)
 80153e2:	781a      	ldrb	r2, [r3, #0]
 80153e4:	b96a      	cbnz	r2, 8015402 <racs_services__srv__Setup_Response__get_type_description_sources+0x22>
 80153e6:	2201      	movs	r2, #1
 80153e8:	b430      	push	{r4, r5}
 80153ea:	4d08      	ldr	r5, [pc, #32]	; (801540c <racs_services__srv__Setup_Response__get_type_description_sources+0x2c>)
 80153ec:	4c08      	ldr	r4, [pc, #32]	; (8015410 <racs_services__srv__Setup_Response__get_type_description_sources+0x30>)
 80153ee:	701a      	strb	r2, [r3, #0]
 80153f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80153f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80153f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80153f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80153f8:	682b      	ldr	r3, [r5, #0]
 80153fa:	4806      	ldr	r0, [pc, #24]	; (8015414 <racs_services__srv__Setup_Response__get_type_description_sources+0x34>)
 80153fc:	6023      	str	r3, [r4, #0]
 80153fe:	bc30      	pop	{r4, r5}
 8015400:	4770      	bx	lr
 8015402:	4804      	ldr	r0, [pc, #16]	; (8015414 <racs_services__srv__Setup_Response__get_type_description_sources+0x34>)
 8015404:	4770      	bx	lr
 8015406:	bf00      	nop
 8015408:	200107ae 	.word	0x200107ae
 801540c:	0801fffc 	.word	0x0801fffc
 8015410:	2001093c 	.word	0x2001093c
 8015414:	08020074 	.word	0x08020074

08015418 <racs_services__srv__Setup_Event__get_type_description_sources>:
 8015418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801541c:	4e27      	ldr	r6, [pc, #156]	; (80154bc <racs_services__srv__Setup_Event__get_type_description_sources+0xa4>)
 801541e:	f896 8000 	ldrb.w	r8, [r6]
 8015422:	f1b8 0f00 	cmp.w	r8, #0
 8015426:	d002      	beq.n	801542e <racs_services__srv__Setup_Event__get_type_description_sources+0x16>
 8015428:	4825      	ldr	r0, [pc, #148]	; (80154c0 <racs_services__srv__Setup_Event__get_type_description_sources+0xa8>)
 801542a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801542e:	4d25      	ldr	r5, [pc, #148]	; (80154c4 <racs_services__srv__Setup_Event__get_type_description_sources+0xac>)
 8015430:	4c25      	ldr	r4, [pc, #148]	; (80154c8 <racs_services__srv__Setup_Event__get_type_description_sources+0xb0>)
 8015432:	f8df a09c 	ldr.w	sl, [pc, #156]	; 80154d0 <racs_services__srv__Setup_Event__get_type_description_sources+0xb8>
 8015436:	4f25      	ldr	r7, [pc, #148]	; (80154cc <racs_services__srv__Setup_Event__get_type_description_sources+0xb4>)
 8015438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801543a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801543c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801543e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015440:	682b      	ldr	r3, [r5, #0]
 8015442:	4625      	mov	r5, r4
 8015444:	4640      	mov	r0, r8
 8015446:	f104 0928 	add.w	r9, r4, #40	; 0x28
 801544a:	f845 3b04 	str.w	r3, [r5], #4
 801544e:	f005 fc03 	bl	801ac58 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8015452:	4684      	mov	ip, r0
 8015454:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 8015458:	3470      	adds	r4, #112	; 0x70
 801545a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801545e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015460:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015466:	f8dc 3000 	ldr.w	r3, [ip]
 801546a:	602b      	str	r3, [r5, #0]
 801546c:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8015470:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8015474:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8015478:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 801547c:	f8da 3000 	ldr.w	r3, [sl]
 8015480:	f8c9 3000 	str.w	r3, [r9]
 8015484:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8015486:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801548a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801548c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015490:	683b      	ldr	r3, [r7, #0]
 8015492:	4640      	mov	r0, r8
 8015494:	f8ce 3000 	str.w	r3, [lr]
 8015498:	f005 fb8a 	bl	801abb0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 801549c:	2301      	movs	r3, #1
 801549e:	4684      	mov	ip, r0
 80154a0:	7033      	strb	r3, [r6, #0]
 80154a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80154a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80154a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80154ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80154ae:	f8dc 3000 	ldr.w	r3, [ip]
 80154b2:	4803      	ldr	r0, [pc, #12]	; (80154c0 <racs_services__srv__Setup_Event__get_type_description_sources+0xa8>)
 80154b4:	6023      	str	r3, [r4, #0]
 80154b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154ba:	bf00      	nop
 80154bc:	200107ab 	.word	0x200107ab
 80154c0:	08020068 	.word	0x08020068
 80154c4:	0801ffd8 	.word	0x0801ffd8
 80154c8:	200107b0 	.word	0x200107b0
 80154cc:	0801fffc 	.word	0x0801fffc
 80154d0:	08020020 	.word	0x08020020

080154d4 <racs_services__srv__Setup_Event__fini.part.0>:
 80154d4:	b510      	push	{r4, lr}
 80154d6:	b086      	sub	sp, #24
 80154d8:	4604      	mov	r4, r0
 80154da:	f005 fba7 	bl	801ac2c <service_msgs__msg__ServiceEventInfo__fini>
 80154de:	a801      	add	r0, sp, #4
 80154e0:	f7f9 fb58 	bl	800eb94 <rcutils_get_default_allocator>
 80154e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80154e6:	b130      	cbz	r0, 80154f6 <racs_services__srv__Setup_Event__fini.part.0+0x22>
 80154e8:	9b02      	ldr	r3, [sp, #8]
 80154ea:	9905      	ldr	r1, [sp, #20]
 80154ec:	4798      	blx	r3
 80154ee:	2300      	movs	r3, #0
 80154f0:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 80154f4:	6323      	str	r3, [r4, #48]	; 0x30
 80154f6:	a801      	add	r0, sp, #4
 80154f8:	f7f9 fb4c 	bl	800eb94 <rcutils_get_default_allocator>
 80154fc:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80154fe:	b130      	cbz	r0, 801550e <racs_services__srv__Setup_Event__fini.part.0+0x3a>
 8015500:	9b02      	ldr	r3, [sp, #8]
 8015502:	9905      	ldr	r1, [sp, #20]
 8015504:	4798      	blx	r3
 8015506:	2300      	movs	r3, #0
 8015508:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 801550c:	63e3      	str	r3, [r4, #60]	; 0x3c
 801550e:	b006      	add	sp, #24
 8015510:	bd10      	pop	{r4, pc}
 8015512:	bf00      	nop

08015514 <racs_services__srv__Setup_Request__init>:
 8015514:	3800      	subs	r0, #0
 8015516:	bf18      	it	ne
 8015518:	2001      	movne	r0, #1
 801551a:	4770      	bx	lr

0801551c <racs_services__srv__Setup_Request__fini>:
 801551c:	4770      	bx	lr
 801551e:	bf00      	nop

08015520 <racs_services__srv__Setup_Request__copy>:
 8015520:	4603      	mov	r3, r0
 8015522:	b1a0      	cbz	r0, 801554e <racs_services__srv__Setup_Request__copy+0x2e>
 8015524:	b199      	cbz	r1, 801554e <racs_services__srv__Setup_Request__copy+0x2e>
 8015526:	7802      	ldrb	r2, [r0, #0]
 8015528:	2001      	movs	r0, #1
 801552a:	700a      	strb	r2, [r1, #0]
 801552c:	689a      	ldr	r2, [r3, #8]
 801552e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8015532:	608a      	str	r2, [r1, #8]
 8015534:	691a      	ldr	r2, [r3, #16]
 8015536:	f8c1 c004 	str.w	ip, [r1, #4]
 801553a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801553e:	610a      	str	r2, [r1, #16]
 8015540:	695a      	ldr	r2, [r3, #20]
 8015542:	699b      	ldr	r3, [r3, #24]
 8015544:	f8c1 c00c 	str.w	ip, [r1, #12]
 8015548:	614a      	str	r2, [r1, #20]
 801554a:	618b      	str	r3, [r1, #24]
 801554c:	4770      	bx	lr
 801554e:	2000      	movs	r0, #0
 8015550:	4770      	bx	lr
 8015552:	bf00      	nop

08015554 <racs_services__srv__Setup_Request__Sequence__init>:
 8015554:	b530      	push	{r4, r5, lr}
 8015556:	4604      	mov	r4, r0
 8015558:	b087      	sub	sp, #28
 801555a:	b148      	cbz	r0, 8015570 <racs_services__srv__Setup_Request__Sequence__init+0x1c>
 801555c:	460d      	mov	r5, r1
 801555e:	a801      	add	r0, sp, #4
 8015560:	f7f9 fb18 	bl	800eb94 <rcutils_get_default_allocator>
 8015564:	b935      	cbnz	r5, 8015574 <racs_services__srv__Setup_Request__Sequence__init+0x20>
 8015566:	462b      	mov	r3, r5
 8015568:	2001      	movs	r0, #1
 801556a:	60a5      	str	r5, [r4, #8]
 801556c:	e9c4 3500 	strd	r3, r5, [r4]
 8015570:	b007      	add	sp, #28
 8015572:	bd30      	pop	{r4, r5, pc}
 8015574:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8015578:	211c      	movs	r1, #28
 801557a:	4628      	mov	r0, r5
 801557c:	4798      	blx	r3
 801557e:	4603      	mov	r3, r0
 8015580:	2800      	cmp	r0, #0
 8015582:	d1f1      	bne.n	8015568 <racs_services__srv__Setup_Request__Sequence__init+0x14>
 8015584:	e7f4      	b.n	8015570 <racs_services__srv__Setup_Request__Sequence__init+0x1c>
 8015586:	bf00      	nop

08015588 <racs_services__srv__Setup_Request__Sequence__fini>:
 8015588:	b180      	cbz	r0, 80155ac <racs_services__srv__Setup_Request__Sequence__fini+0x24>
 801558a:	b510      	push	{r4, lr}
 801558c:	b086      	sub	sp, #24
 801558e:	4604      	mov	r4, r0
 8015590:	a801      	add	r0, sp, #4
 8015592:	f7f9 faff 	bl	800eb94 <rcutils_get_default_allocator>
 8015596:	6820      	ldr	r0, [r4, #0]
 8015598:	b130      	cbz	r0, 80155a8 <racs_services__srv__Setup_Request__Sequence__fini+0x20>
 801559a:	9b02      	ldr	r3, [sp, #8]
 801559c:	9905      	ldr	r1, [sp, #20]
 801559e:	4798      	blx	r3
 80155a0:	2300      	movs	r3, #0
 80155a2:	e9c4 3300 	strd	r3, r3, [r4]
 80155a6:	60a3      	str	r3, [r4, #8]
 80155a8:	b006      	add	sp, #24
 80155aa:	bd10      	pop	{r4, pc}
 80155ac:	4770      	bx	lr
 80155ae:	bf00      	nop

080155b0 <racs_services__srv__Setup_Response__init>:
 80155b0:	3800      	subs	r0, #0
 80155b2:	bf18      	it	ne
 80155b4:	2001      	movne	r0, #1
 80155b6:	4770      	bx	lr

080155b8 <racs_services__srv__Setup_Response__fini>:
 80155b8:	4770      	bx	lr
 80155ba:	bf00      	nop

080155bc <racs_services__srv__Setup_Response__copy>:
 80155bc:	b120      	cbz	r0, 80155c8 <racs_services__srv__Setup_Response__copy+0xc>
 80155be:	b119      	cbz	r1, 80155c8 <racs_services__srv__Setup_Response__copy+0xc>
 80155c0:	7803      	ldrb	r3, [r0, #0]
 80155c2:	2001      	movs	r0, #1
 80155c4:	700b      	strb	r3, [r1, #0]
 80155c6:	4770      	bx	lr
 80155c8:	2000      	movs	r0, #0
 80155ca:	4770      	bx	lr

080155cc <racs_services__srv__Setup_Response__Sequence__init>:
 80155cc:	b530      	push	{r4, r5, lr}
 80155ce:	4604      	mov	r4, r0
 80155d0:	b087      	sub	sp, #28
 80155d2:	b148      	cbz	r0, 80155e8 <racs_services__srv__Setup_Response__Sequence__init+0x1c>
 80155d4:	460d      	mov	r5, r1
 80155d6:	a801      	add	r0, sp, #4
 80155d8:	f7f9 fadc 	bl	800eb94 <rcutils_get_default_allocator>
 80155dc:	b935      	cbnz	r5, 80155ec <racs_services__srv__Setup_Response__Sequence__init+0x20>
 80155de:	462b      	mov	r3, r5
 80155e0:	2001      	movs	r0, #1
 80155e2:	60a5      	str	r5, [r4, #8]
 80155e4:	e9c4 3500 	strd	r3, r5, [r4]
 80155e8:	b007      	add	sp, #28
 80155ea:	bd30      	pop	{r4, r5, pc}
 80155ec:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80155f0:	2101      	movs	r1, #1
 80155f2:	4628      	mov	r0, r5
 80155f4:	4798      	blx	r3
 80155f6:	4603      	mov	r3, r0
 80155f8:	2800      	cmp	r0, #0
 80155fa:	d1f1      	bne.n	80155e0 <racs_services__srv__Setup_Response__Sequence__init+0x14>
 80155fc:	e7f4      	b.n	80155e8 <racs_services__srv__Setup_Response__Sequence__init+0x1c>
 80155fe:	bf00      	nop

08015600 <racs_services__srv__Setup_Response__Sequence__fini>:
 8015600:	b180      	cbz	r0, 8015624 <racs_services__srv__Setup_Response__Sequence__fini+0x24>
 8015602:	b510      	push	{r4, lr}
 8015604:	b086      	sub	sp, #24
 8015606:	4604      	mov	r4, r0
 8015608:	a801      	add	r0, sp, #4
 801560a:	f7f9 fac3 	bl	800eb94 <rcutils_get_default_allocator>
 801560e:	6820      	ldr	r0, [r4, #0]
 8015610:	b130      	cbz	r0, 8015620 <racs_services__srv__Setup_Response__Sequence__fini+0x20>
 8015612:	9b02      	ldr	r3, [sp, #8]
 8015614:	9905      	ldr	r1, [sp, #20]
 8015616:	4798      	blx	r3
 8015618:	2300      	movs	r3, #0
 801561a:	e9c4 3300 	strd	r3, r3, [r4]
 801561e:	60a3      	str	r3, [r4, #8]
 8015620:	b006      	add	sp, #24
 8015622:	bd10      	pop	{r4, pc}
 8015624:	4770      	bx	lr
 8015626:	bf00      	nop

08015628 <racs_services__srv__Setup_Event__init>:
 8015628:	b570      	push	{r4, r5, r6, lr}
 801562a:	4604      	mov	r4, r0
 801562c:	b086      	sub	sp, #24
 801562e:	b1c8      	cbz	r0, 8015664 <racs_services__srv__Setup_Event__init+0x3c>
 8015630:	f005 faea 	bl	801ac08 <service_msgs__msg__ServiceEventInfo__init>
 8015634:	4605      	mov	r5, r0
 8015636:	b178      	cbz	r0, 8015658 <racs_services__srv__Setup_Event__init+0x30>
 8015638:	2600      	movs	r6, #0
 801563a:	a801      	add	r0, sp, #4
 801563c:	f7f9 faaa 	bl	800eb94 <rcutils_get_default_allocator>
 8015640:	a801      	add	r0, sp, #4
 8015642:	6326      	str	r6, [r4, #48]	; 0x30
 8015644:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
 8015648:	f7f9 faa4 	bl	800eb94 <rcutils_get_default_allocator>
 801564c:	4628      	mov	r0, r5
 801564e:	63e6      	str	r6, [r4, #60]	; 0x3c
 8015650:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
 8015654:	b006      	add	sp, #24
 8015656:	bd70      	pop	{r4, r5, r6, pc}
 8015658:	4620      	mov	r0, r4
 801565a:	f7ff ff3b 	bl	80154d4 <racs_services__srv__Setup_Event__fini.part.0>
 801565e:	4628      	mov	r0, r5
 8015660:	b006      	add	sp, #24
 8015662:	bd70      	pop	{r4, r5, r6, pc}
 8015664:	4605      	mov	r5, r0
 8015666:	4628      	mov	r0, r5
 8015668:	b006      	add	sp, #24
 801566a:	bd70      	pop	{r4, r5, r6, pc}

0801566c <racs_services__srv__Setup_Event__fini>:
 801566c:	b1f0      	cbz	r0, 80156ac <racs_services__srv__Setup_Event__fini+0x40>
 801566e:	b510      	push	{r4, lr}
 8015670:	b086      	sub	sp, #24
 8015672:	4604      	mov	r4, r0
 8015674:	f005 fada 	bl	801ac2c <service_msgs__msg__ServiceEventInfo__fini>
 8015678:	a801      	add	r0, sp, #4
 801567a:	f7f9 fa8b 	bl	800eb94 <rcutils_get_default_allocator>
 801567e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8015680:	b130      	cbz	r0, 8015690 <racs_services__srv__Setup_Event__fini+0x24>
 8015682:	9b02      	ldr	r3, [sp, #8]
 8015684:	9905      	ldr	r1, [sp, #20]
 8015686:	4798      	blx	r3
 8015688:	2300      	movs	r3, #0
 801568a:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 801568e:	6323      	str	r3, [r4, #48]	; 0x30
 8015690:	a801      	add	r0, sp, #4
 8015692:	f7f9 fa7f 	bl	800eb94 <rcutils_get_default_allocator>
 8015696:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8015698:	b130      	cbz	r0, 80156a8 <racs_services__srv__Setup_Event__fini+0x3c>
 801569a:	9b02      	ldr	r3, [sp, #8]
 801569c:	9905      	ldr	r1, [sp, #20]
 801569e:	4798      	blx	r3
 80156a0:	2300      	movs	r3, #0
 80156a2:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80156a6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80156a8:	b006      	add	sp, #24
 80156aa:	bd10      	pop	{r4, pc}
 80156ac:	4770      	bx	lr
 80156ae:	bf00      	nop

080156b0 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup>:
 80156b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156b4:	2900      	cmp	r1, #0
 80156b6:	d04d      	beq.n	8015754 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0xa4>
 80156b8:	4605      	mov	r5, r0
 80156ba:	2800      	cmp	r0, #0
 80156bc:	d04a      	beq.n	8015754 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0xa4>
 80156be:	460e      	mov	r6, r1
 80156c0:	4698      	mov	r8, r3
 80156c2:	2040      	movs	r0, #64	; 0x40
 80156c4:	680b      	ldr	r3, [r1, #0]
 80156c6:	6909      	ldr	r1, [r1, #16]
 80156c8:	4617      	mov	r7, r2
 80156ca:	4798      	blx	r3
 80156cc:	4604      	mov	r4, r0
 80156ce:	f7ff ffab 	bl	8015628 <racs_services__srv__Setup_Event__init>
 80156d2:	4684      	mov	ip, r0
 80156d4:	b370      	cbz	r0, 8015734 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x84>
 80156d6:	782b      	ldrb	r3, [r5, #0]
 80156d8:	7023      	strb	r3, [r4, #0]
 80156da:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 80156de:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80156e2:	e9c4 2301 	strd	r2, r3, [r4, #4]
 80156e6:	e9c4 0108 	strd	r0, r1, [r4, #32]
 80156ea:	68e8      	ldr	r0, [r5, #12]
 80156ec:	6929      	ldr	r1, [r5, #16]
 80156ee:	696a      	ldr	r2, [r5, #20]
 80156f0:	69ab      	ldr	r3, [r5, #24]
 80156f2:	60e0      	str	r0, [r4, #12]
 80156f4:	6121      	str	r1, [r4, #16]
 80156f6:	6162      	str	r2, [r4, #20]
 80156f8:	61a3      	str	r3, [r4, #24]
 80156fa:	b157      	cbz	r7, 8015712 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x62>
 80156fc:	2101      	movs	r1, #1
 80156fe:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015702:	f7ff ff27 	bl	8015554 <racs_services__srv__Setup_Request__Sequence__init>
 8015706:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8015708:	4638      	mov	r0, r7
 801570a:	f7ff ff09 	bl	8015520 <racs_services__srv__Setup_Request__copy>
 801570e:	4603      	mov	r3, r0
 8015710:	b1c0      	cbz	r0, 8015744 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x94>
 8015712:	f1b8 0f00 	cmp.w	r8, #0
 8015716:	d00a      	beq.n	801572e <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x7e>
 8015718:	2101      	movs	r1, #1
 801571a:	f104 0034 	add.w	r0, r4, #52	; 0x34
 801571e:	f7ff ff55 	bl	80155cc <racs_services__srv__Setup_Response__Sequence__init>
 8015722:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015724:	4640      	mov	r0, r8
 8015726:	f7ff ff49 	bl	80155bc <racs_services__srv__Setup_Response__copy>
 801572a:	4603      	mov	r3, r0
 801572c:	b150      	cbz	r0, 8015744 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x94>
 801572e:	4620      	mov	r0, r4
 8015730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015734:	4620      	mov	r0, r4
 8015736:	4664      	mov	r4, ip
 8015738:	6873      	ldr	r3, [r6, #4]
 801573a:	6931      	ldr	r1, [r6, #16]
 801573c:	4798      	blx	r3
 801573e:	4620      	mov	r0, r4
 8015740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015744:	4620      	mov	r0, r4
 8015746:	461c      	mov	r4, r3
 8015748:	6872      	ldr	r2, [r6, #4]
 801574a:	6931      	ldr	r1, [r6, #16]
 801574c:	4790      	blx	r2
 801574e:	4620      	mov	r0, r4
 8015750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015754:	2400      	movs	r4, #0
 8015756:	4620      	mov	r0, r4
 8015758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801575c <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup>:
 801575c:	b1b9      	cbz	r1, 801578e <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x32>
 801575e:	b538      	push	{r3, r4, r5, lr}
 8015760:	4605      	mov	r5, r0
 8015762:	b190      	cbz	r0, 801578a <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x2e>
 8015764:	460c      	mov	r4, r1
 8015766:	f7ff ff81 	bl	801566c <racs_services__srv__Setup_Event__fini>
 801576a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801576c:	b110      	cbz	r0, 8015774 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x18>
 801576e:	6863      	ldr	r3, [r4, #4]
 8015770:	6921      	ldr	r1, [r4, #16]
 8015772:	4798      	blx	r3
 8015774:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8015776:	b110      	cbz	r0, 801577e <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x22>
 8015778:	6863      	ldr	r3, [r4, #4]
 801577a:	6921      	ldr	r1, [r4, #16]
 801577c:	4798      	blx	r3
 801577e:	4628      	mov	r0, r5
 8015780:	6863      	ldr	r3, [r4, #4]
 8015782:	6921      	ldr	r1, [r4, #16]
 8015784:	4798      	blx	r3
 8015786:	2001      	movs	r0, #1
 8015788:	bd38      	pop	{r3, r4, r5, pc}
 801578a:	2000      	movs	r0, #0
 801578c:	bd38      	pop	{r3, r4, r5, pc}
 801578e:	2000      	movs	r0, #0
 8015790:	4770      	bx	lr
 8015792:	bf00      	nop

08015794 <rcl_client_get_rmw_handle>:
 8015794:	b118      	cbz	r0, 801579e <rcl_client_get_rmw_handle+0xa>
 8015796:	6800      	ldr	r0, [r0, #0]
 8015798:	b108      	cbz	r0, 801579e <rcl_client_get_rmw_handle+0xa>
 801579a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801579e:	4770      	bx	lr

080157a0 <rcl_send_request>:
 80157a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157a2:	b08b      	sub	sp, #44	; 0x2c
 80157a4:	b1e8      	cbz	r0, 80157e2 <rcl_send_request+0x42>
 80157a6:	4604      	mov	r4, r0
 80157a8:	6800      	ldr	r0, [r0, #0]
 80157aa:	b1d0      	cbz	r0, 80157e2 <rcl_send_request+0x42>
 80157ac:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80157b0:	b1bb      	cbz	r3, 80157e2 <rcl_send_request+0x42>
 80157b2:	460f      	mov	r7, r1
 80157b4:	b1d1      	cbz	r1, 80157ec <rcl_send_request+0x4c>
 80157b6:	4615      	mov	r5, r2
 80157b8:	b1c2      	cbz	r2, 80157ec <rcl_send_request+0x4c>
 80157ba:	2105      	movs	r1, #5
 80157bc:	f500 7088 	add.w	r0, r0, #272	; 0x110
 80157c0:	f003 fa12 	bl	8018be8 <__atomic_load_8>
 80157c4:	6823      	ldr	r3, [r4, #0]
 80157c6:	462a      	mov	r2, r5
 80157c8:	e9c5 0100 	strd	r0, r1, [r5]
 80157cc:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80157d0:	4639      	mov	r1, r7
 80157d2:	f004 fbd3 	bl	8019f7c <rmw_send_request>
 80157d6:	4606      	mov	r6, r0
 80157d8:	b160      	cbz	r0, 80157f4 <rcl_send_request+0x54>
 80157da:	2601      	movs	r6, #1
 80157dc:	4630      	mov	r0, r6
 80157de:	b00b      	add	sp, #44	; 0x2c
 80157e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157e2:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 80157e6:	4630      	mov	r0, r6
 80157e8:	b00b      	add	sp, #44	; 0x2c
 80157ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157ec:	260b      	movs	r6, #11
 80157ee:	4630      	mov	r0, r6
 80157f0:	b00b      	add	sp, #44	; 0x2c
 80157f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157f4:	6820      	ldr	r0, [r4, #0]
 80157f6:	2305      	movs	r3, #5
 80157f8:	f500 7088 	add.w	r0, r0, #272	; 0x110
 80157fc:	9300      	str	r3, [sp, #0]
 80157fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015802:	f003 fa5d 	bl	8018cc0 <__atomic_exchange_8>
 8015806:	6823      	ldr	r3, [r4, #0]
 8015808:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 801580c:	2a00      	cmp	r2, #0
 801580e:	d0e5      	beq.n	80157dc <rcl_send_request+0x3c>
 8015810:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8015814:	a905      	add	r1, sp, #20
 8015816:	f003 ffcd 	bl	80197b4 <rmw_get_gid_for_client>
 801581a:	b970      	cbnz	r0, 801583a <rcl_send_request+0x9a>
 801581c:	6820      	ldr	r0, [r4, #0]
 801581e:	ab06      	add	r3, sp, #24
 8015820:	4631      	mov	r1, r6
 8015822:	463a      	mov	r2, r7
 8015824:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
 8015828:	9302      	str	r3, [sp, #8]
 801582a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801582e:	e9cd 4500 	strd	r4, r5, [sp]
 8015832:	f001 f845 	bl	80168c0 <rcl_send_service_event_message>
 8015836:	4606      	mov	r6, r0
 8015838:	e7d0      	b.n	80157dc <rcl_send_request+0x3c>
 801583a:	f000 f877 	bl	801592c <rcl_convert_rmw_ret_to_rcl_ret>
 801583e:	4606      	mov	r6, r0
 8015840:	e7cc      	b.n	80157dc <rcl_send_request+0x3c>
 8015842:	bf00      	nop
 8015844:	0000      	movs	r0, r0
	...

08015848 <rcl_take_response>:
 8015848:	b5f0      	push	{r4, r5, r6, r7, lr}
 801584a:	468e      	mov	lr, r1
 801584c:	b095      	sub	sp, #84	; 0x54
 801584e:	460c      	mov	r4, r1
 8015850:	4616      	mov	r6, r2
 8015852:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 8015856:	4605      	mov	r5, r0
 8015858:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801585c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015860:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015864:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015868:	2d00      	cmp	r5, #0
 801586a:	d042      	beq.n	80158f2 <rcl_take_response+0xaa>
 801586c:	682b      	ldr	r3, [r5, #0]
 801586e:	2b00      	cmp	r3, #0
 8015870:	d03f      	beq.n	80158f2 <rcl_take_response+0xaa>
 8015872:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8015876:	2800      	cmp	r0, #0
 8015878:	d03b      	beq.n	80158f2 <rcl_take_response+0xaa>
 801587a:	2e00      	cmp	r6, #0
 801587c:	d03c      	beq.n	80158f8 <rcl_take_response+0xb0>
 801587e:	2300      	movs	r3, #0
 8015880:	4632      	mov	r2, r6
 8015882:	a90a      	add	r1, sp, #40	; 0x28
 8015884:	f88d 3013 	strb.w	r3, [sp, #19]
 8015888:	f10d 0313 	add.w	r3, sp, #19
 801588c:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8015910 <rcl_take_response+0xc8>
 8015890:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8015894:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8015898:	f004 fc78 	bl	801a18c <rmw_take_response>
 801589c:	4607      	mov	r7, r0
 801589e:	bb68      	cbnz	r0, 80158fc <rcl_take_response+0xb4>
 80158a0:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80158a4:	b363      	cbz	r3, 8015900 <rcl_take_response+0xb8>
 80158a6:	682b      	ldr	r3, [r5, #0]
 80158a8:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 80158ac:	b19a      	cbz	r2, 80158d6 <rcl_take_response+0x8e>
 80158ae:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80158b2:	a905      	add	r1, sp, #20
 80158b4:	f003 ff7e 	bl	80197b4 <rmw_get_gid_for_client>
 80158b8:	bb28      	cbnz	r0, 8015906 <rcl_take_response+0xbe>
 80158ba:	6829      	ldr	r1, [r5, #0]
 80158bc:	ab06      	add	r3, sp, #24
 80158be:	4632      	mov	r2, r6
 80158c0:	f8d1 0118 	ldr.w	r0, [r1, #280]	; 0x118
 80158c4:	2103      	movs	r1, #3
 80158c6:	9302      	str	r3, [sp, #8]
 80158c8:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80158cc:	e9cd 6700 	strd	r6, r7, [sp]
 80158d0:	f000 fff6 	bl	80168c0 <rcl_send_service_event_message>
 80158d4:	4607      	mov	r7, r0
 80158d6:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 80158da:	46a4      	mov	ip, r4
 80158dc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80158e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158e4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80158e8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80158ec:	4638      	mov	r0, r7
 80158ee:	b015      	add	sp, #84	; 0x54
 80158f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158f2:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 80158f6:	e7ee      	b.n	80158d6 <rcl_take_response+0x8e>
 80158f8:	270b      	movs	r7, #11
 80158fa:	e7ec      	b.n	80158d6 <rcl_take_response+0x8e>
 80158fc:	2701      	movs	r7, #1
 80158fe:	e7ea      	b.n	80158d6 <rcl_take_response+0x8e>
 8015900:	f240 17f5 	movw	r7, #501	; 0x1f5
 8015904:	e7e7      	b.n	80158d6 <rcl_take_response+0x8e>
 8015906:	f000 f811 	bl	801592c <rcl_convert_rmw_ret_to_rcl_ret>
 801590a:	4607      	mov	r7, r0
 801590c:	e7e3      	b.n	80158d6 <rcl_take_response+0x8e>
 801590e:	bf00      	nop
	...

08015918 <rcl_client_is_valid>:
 8015918:	b130      	cbz	r0, 8015928 <rcl_client_is_valid+0x10>
 801591a:	6800      	ldr	r0, [r0, #0]
 801591c:	b120      	cbz	r0, 8015928 <rcl_client_is_valid+0x10>
 801591e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8015922:	3800      	subs	r0, #0
 8015924:	bf18      	it	ne
 8015926:	2001      	movne	r0, #1
 8015928:	4770      	bx	lr
 801592a:	bf00      	nop

0801592c <rcl_convert_rmw_ret_to_rcl_ret>:
 801592c:	280b      	cmp	r0, #11
 801592e:	dc0d      	bgt.n	801594c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8015930:	2800      	cmp	r0, #0
 8015932:	db09      	blt.n	8015948 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015934:	280b      	cmp	r0, #11
 8015936:	d807      	bhi.n	8015948 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015938:	e8df f000 	tbb	[pc, r0]
 801593c:	07060607 	.word	0x07060607
 8015940:	06060606 	.word	0x06060606
 8015944:	07070606 	.word	0x07070606
 8015948:	2001      	movs	r0, #1
 801594a:	4770      	bx	lr
 801594c:	28cb      	cmp	r0, #203	; 0xcb
 801594e:	bf18      	it	ne
 8015950:	2001      	movne	r0, #1
 8015952:	4770      	bx	lr

08015954 <rcl_get_zero_initialized_context>:
 8015954:	4a03      	ldr	r2, [pc, #12]	; (8015964 <rcl_get_zero_initialized_context+0x10>)
 8015956:	4603      	mov	r3, r0
 8015958:	e892 0003 	ldmia.w	r2, {r0, r1}
 801595c:	e883 0003 	stmia.w	r3, {r0, r1}
 8015960:	4618      	mov	r0, r3
 8015962:	4770      	bx	lr
 8015964:	08020098 	.word	0x08020098

08015968 <rcl_context_is_valid>:
 8015968:	b118      	cbz	r0, 8015972 <rcl_context_is_valid+0xa>
 801596a:	6840      	ldr	r0, [r0, #4]
 801596c:	3800      	subs	r0, #0
 801596e:	bf18      	it	ne
 8015970:	2001      	movne	r0, #1
 8015972:	4770      	bx	lr

08015974 <__cleanup_context>:
 8015974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015978:	4606      	mov	r6, r0
 801597a:	2300      	movs	r3, #0
 801597c:	6800      	ldr	r0, [r0, #0]
 801597e:	6073      	str	r3, [r6, #4]
 8015980:	2800      	cmp	r0, #0
 8015982:	d049      	beq.n	8015a18 <__cleanup_context+0xa4>
 8015984:	6947      	ldr	r7, [r0, #20]
 8015986:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801598a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 801598e:	b137      	cbz	r7, 801599e <__cleanup_context+0x2a>
 8015990:	3014      	adds	r0, #20
 8015992:	f000 f9e7 	bl	8015d64 <rcl_init_options_fini>
 8015996:	4607      	mov	r7, r0
 8015998:	2800      	cmp	r0, #0
 801599a:	d144      	bne.n	8015a26 <__cleanup_context+0xb2>
 801599c:	6830      	ldr	r0, [r6, #0]
 801599e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80159a0:	b143      	cbz	r3, 80159b4 <__cleanup_context+0x40>
 80159a2:	3028      	adds	r0, #40	; 0x28
 80159a4:	f004 f930 	bl	8019c08 <rmw_context_fini>
 80159a8:	b118      	cbz	r0, 80159b2 <__cleanup_context+0x3e>
 80159aa:	2f00      	cmp	r7, #0
 80159ac:	d03e      	beq.n	8015a2c <__cleanup_context+0xb8>
 80159ae:	f7f9 f923 	bl	800ebf8 <rcutils_reset_error>
 80159b2:	6830      	ldr	r0, [r6, #0]
 80159b4:	6a03      	ldr	r3, [r0, #32]
 80159b6:	b1db      	cbz	r3, 80159f0 <__cleanup_context+0x7c>
 80159b8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80159bc:	2a01      	cmp	r2, #1
 80159be:	f17c 0100 	sbcs.w	r1, ip, #0
 80159c2:	db11      	blt.n	80159e8 <__cleanup_context+0x74>
 80159c4:	2400      	movs	r4, #0
 80159c6:	4625      	mov	r5, r4
 80159c8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80159cc:	4649      	mov	r1, r9
 80159ce:	b1b8      	cbz	r0, 8015a00 <__cleanup_context+0x8c>
 80159d0:	47c0      	blx	r8
 80159d2:	6833      	ldr	r3, [r6, #0]
 80159d4:	3401      	adds	r4, #1
 80159d6:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80159da:	f145 0500 	adc.w	r5, r5, #0
 80159de:	6a1b      	ldr	r3, [r3, #32]
 80159e0:	4294      	cmp	r4, r2
 80159e2:	eb75 010c 	sbcs.w	r1, r5, ip
 80159e6:	dbef      	blt.n	80159c8 <__cleanup_context+0x54>
 80159e8:	4618      	mov	r0, r3
 80159ea:	4649      	mov	r1, r9
 80159ec:	47c0      	blx	r8
 80159ee:	6830      	ldr	r0, [r6, #0]
 80159f0:	4649      	mov	r1, r9
 80159f2:	47c0      	blx	r8
 80159f4:	2300      	movs	r3, #0
 80159f6:	4638      	mov	r0, r7
 80159f8:	e9c6 3300 	strd	r3, r3, [r6]
 80159fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a00:	3401      	adds	r4, #1
 8015a02:	f145 0500 	adc.w	r5, r5, #0
 8015a06:	4294      	cmp	r4, r2
 8015a08:	eb75 010c 	sbcs.w	r1, r5, ip
 8015a0c:	dbdc      	blt.n	80159c8 <__cleanup_context+0x54>
 8015a0e:	4618      	mov	r0, r3
 8015a10:	4649      	mov	r1, r9
 8015a12:	47c0      	blx	r8
 8015a14:	6830      	ldr	r0, [r6, #0]
 8015a16:	e7eb      	b.n	80159f0 <__cleanup_context+0x7c>
 8015a18:	4607      	mov	r7, r0
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	4638      	mov	r0, r7
 8015a1e:	e9c6 3300 	strd	r3, r3, [r6]
 8015a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a26:	f7f9 f8e7 	bl	800ebf8 <rcutils_reset_error>
 8015a2a:	e7b7      	b.n	801599c <__cleanup_context+0x28>
 8015a2c:	f7ff ff7e 	bl	801592c <rcl_convert_rmw_ret_to_rcl_ret>
 8015a30:	4607      	mov	r7, r0
 8015a32:	e7bc      	b.n	80159ae <__cleanup_context+0x3a>

08015a34 <rcl_init>:
 8015a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a38:	1e05      	subs	r5, r0, #0
 8015a3a:	b0a7      	sub	sp, #156	; 0x9c
 8015a3c:	460e      	mov	r6, r1
 8015a3e:	4690      	mov	r8, r2
 8015a40:	461f      	mov	r7, r3
 8015a42:	f340 80a0 	ble.w	8015b86 <rcl_init+0x152>
 8015a46:	2900      	cmp	r1, #0
 8015a48:	f000 80a0 	beq.w	8015b8c <rcl_init+0x158>
 8015a4c:	f1a1 0e04 	sub.w	lr, r1, #4
 8015a50:	f04f 0c00 	mov.w	ip, #0
 8015a54:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8015a58:	f10c 0c01 	add.w	ip, ip, #1
 8015a5c:	2c00      	cmp	r4, #0
 8015a5e:	f000 8095 	beq.w	8015b8c <rcl_init+0x158>
 8015a62:	4565      	cmp	r5, ip
 8015a64:	d1f6      	bne.n	8015a54 <rcl_init+0x20>
 8015a66:	f1b8 0f00 	cmp.w	r8, #0
 8015a6a:	f000 808f 	beq.w	8015b8c <rcl_init+0x158>
 8015a6e:	f8d8 4000 	ldr.w	r4, [r8]
 8015a72:	2c00      	cmp	r4, #0
 8015a74:	f000 808a 	beq.w	8015b8c <rcl_init+0x158>
 8015a78:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 8015a7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015a7e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015a82:	6823      	ldr	r3, [r4, #0]
 8015a84:	a821      	add	r0, sp, #132	; 0x84
 8015a86:	f8cc 3000 	str.w	r3, [ip]
 8015a8a:	f7f9 f891 	bl	800ebb0 <rcutils_allocator_is_valid>
 8015a8e:	f080 0001 	eor.w	r0, r0, #1
 8015a92:	b2c0      	uxtb	r0, r0
 8015a94:	2800      	cmp	r0, #0
 8015a96:	d179      	bne.n	8015b8c <rcl_init+0x158>
 8015a98:	2f00      	cmp	r7, #0
 8015a9a:	d077      	beq.n	8015b8c <rcl_init+0x158>
 8015a9c:	683b      	ldr	r3, [r7, #0]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d179      	bne.n	8015b96 <rcl_init+0x162>
 8015aa2:	2198      	movs	r1, #152	; 0x98
 8015aa4:	2001      	movs	r0, #1
 8015aa6:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 8015aaa:	4798      	blx	r3
 8015aac:	4604      	mov	r4, r0
 8015aae:	6038      	str	r0, [r7, #0]
 8015ab0:	2800      	cmp	r0, #0
 8015ab2:	f000 80cd 	beq.w	8015c50 <rcl_init+0x21c>
 8015ab6:	a802      	add	r0, sp, #8
 8015ab8:	f003 fbea 	bl	8019290 <rmw_get_zero_initialized_context>
 8015abc:	a902      	add	r1, sp, #8
 8015abe:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015ac2:	2270      	movs	r2, #112	; 0x70
 8015ac4:	f008 f957 	bl	801dd76 <memcpy>
 8015ac8:	f8d7 e000 	ldr.w	lr, [r7]
 8015acc:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 8015ad0:	4674      	mov	r4, lr
 8015ad2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015ad8:	f8dc 3000 	ldr.w	r3, [ip]
 8015adc:	f10e 0114 	add.w	r1, lr, #20
 8015ae0:	4640      	mov	r0, r8
 8015ae2:	6023      	str	r3, [r4, #0]
 8015ae4:	f000 f968 	bl	8015db8 <rcl_init_options_copy>
 8015ae8:	4604      	mov	r4, r0
 8015aea:	2800      	cmp	r0, #0
 8015aec:	d144      	bne.n	8015b78 <rcl_init+0x144>
 8015aee:	f8d7 9000 	ldr.w	r9, [r7]
 8015af2:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 8015af6:	f8c9 0020 	str.w	r0, [r9, #32]
 8015afa:	f8c9 5018 	str.w	r5, [r9, #24]
 8015afe:	f8c9 a01c 	str.w	sl, [r9, #28]
 8015b02:	2d00      	cmp	r5, #0
 8015b04:	d04e      	beq.n	8015ba4 <rcl_init+0x170>
 8015b06:	2e00      	cmp	r6, #0
 8015b08:	d04c      	beq.n	8015ba4 <rcl_init+0x170>
 8015b0a:	2104      	movs	r1, #4
 8015b0c:	4628      	mov	r0, r5
 8015b0e:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 8015b12:	4798      	blx	r3
 8015b14:	f8c9 0020 	str.w	r0, [r9, #32]
 8015b18:	f8d7 9000 	ldr.w	r9, [r7]
 8015b1c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8015b20:	46cb      	mov	fp, r9
 8015b22:	b343      	cbz	r3, 8015b76 <rcl_init+0x142>
 8015b24:	2d01      	cmp	r5, #1
 8015b26:	f17a 0300 	sbcs.w	r3, sl, #0
 8015b2a:	db3b      	blt.n	8015ba4 <rcl_init+0x170>
 8015b2c:	2400      	movs	r4, #0
 8015b2e:	3e04      	subs	r6, #4
 8015b30:	46a1      	mov	r9, r4
 8015b32:	e00b      	b.n	8015b4c <rcl_init+0x118>
 8015b34:	6831      	ldr	r1, [r6, #0]
 8015b36:	f008 f91e 	bl	801dd76 <memcpy>
 8015b3a:	3401      	adds	r4, #1
 8015b3c:	f149 0900 	adc.w	r9, r9, #0
 8015b40:	45ca      	cmp	sl, r9
 8015b42:	bf08      	it	eq
 8015b44:	42a5      	cmpeq	r5, r4
 8015b46:	d02b      	beq.n	8015ba0 <rcl_init+0x16c>
 8015b48:	f8d7 b000 	ldr.w	fp, [r7]
 8015b4c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8015b50:	f7ea fbd6 	bl	8000300 <strlen>
 8015b54:	1c42      	adds	r2, r0, #1
 8015b56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015b58:	4610      	mov	r0, r2
 8015b5a:	9925      	ldr	r1, [sp, #148]	; 0x94
 8015b5c:	f8db b020 	ldr.w	fp, [fp, #32]
 8015b60:	9201      	str	r2, [sp, #4]
 8015b62:	4798      	blx	r3
 8015b64:	683b      	ldr	r3, [r7, #0]
 8015b66:	f84b 0024 	str.w	r0, [fp, r4, lsl #2]
 8015b6a:	6a1b      	ldr	r3, [r3, #32]
 8015b6c:	9a01      	ldr	r2, [sp, #4]
 8015b6e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015b72:	2800      	cmp	r0, #0
 8015b74:	d1de      	bne.n	8015b34 <rcl_init+0x100>
 8015b76:	240a      	movs	r4, #10
 8015b78:	4638      	mov	r0, r7
 8015b7a:	f7ff fefb 	bl	8015974 <__cleanup_context>
 8015b7e:	4620      	mov	r0, r4
 8015b80:	b027      	add	sp, #156	; 0x9c
 8015b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b86:	2900      	cmp	r1, #0
 8015b88:	f43f af6d 	beq.w	8015a66 <rcl_init+0x32>
 8015b8c:	240b      	movs	r4, #11
 8015b8e:	4620      	mov	r0, r4
 8015b90:	b027      	add	sp, #156	; 0x9c
 8015b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b96:	2464      	movs	r4, #100	; 0x64
 8015b98:	4620      	mov	r0, r4
 8015b9a:	b027      	add	sp, #156	; 0x9c
 8015b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ba0:	f8d7 9000 	ldr.w	r9, [r7]
 8015ba4:	493f      	ldr	r1, [pc, #252]	; (8015ca4 <rcl_init+0x270>)
 8015ba6:	680b      	ldr	r3, [r1, #0]
 8015ba8:	3301      	adds	r3, #1
 8015baa:	d04c      	beq.n	8015c46 <rcl_init+0x212>
 8015bac:	461a      	mov	r2, r3
 8015bae:	2000      	movs	r0, #0
 8015bb0:	600b      	str	r3, [r1, #0]
 8015bb2:	f8d9 5014 	ldr.w	r5, [r9, #20]
 8015bb6:	607b      	str	r3, [r7, #4]
 8015bb8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015bba:	3301      	adds	r3, #1
 8015bbc:	e9c5 2006 	strd	r2, r0, [r5, #24]
 8015bc0:	d05d      	beq.n	8015c7e <rcl_init+0x24a>
 8015bc2:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d044      	beq.n	8015c54 <rcl_init+0x220>
 8015bca:	2b01      	cmp	r3, #1
 8015bcc:	d04e      	beq.n	8015c6c <rcl_init+0x238>
 8015bce:	f8d8 3000 	ldr.w	r3, [r8]
 8015bd2:	f105 0634 	add.w	r6, r5, #52	; 0x34
 8015bd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d05a      	beq.n	8015c94 <rcl_init+0x260>
 8015bde:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8015be0:	b953      	cbnz	r3, 8015bf8 <rcl_init+0x1c4>
 8015be2:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8015be6:	2801      	cmp	r0, #1
 8015be8:	d008      	beq.n	8015bfc <rcl_init+0x1c8>
 8015bea:	a921      	add	r1, sp, #132	; 0x84
 8015bec:	4630      	mov	r0, r6
 8015bee:	f006 fceb 	bl	801c5c8 <rcl_get_discovery_static_peers>
 8015bf2:	4604      	mov	r4, r0
 8015bf4:	2800      	cmp	r0, #0
 8015bf6:	d1bf      	bne.n	8015b78 <rcl_init+0x144>
 8015bf8:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8015bfc:	f006 fcda 	bl	801c5b4 <rcl_automatic_discovery_range_to_string>
 8015c00:	683b      	ldr	r3, [r7, #0]
 8015c02:	aa20      	add	r2, sp, #128	; 0x80
 8015c04:	a91f      	add	r1, sp, #124	; 0x7c
 8015c06:	695b      	ldr	r3, [r3, #20]
 8015c08:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8015c0a:	f001 fc79 	bl	8017500 <rcl_validate_enclave_name>
 8015c0e:	4604      	mov	r4, r0
 8015c10:	2800      	cmp	r0, #0
 8015c12:	d1b1      	bne.n	8015b78 <rcl_init+0x144>
 8015c14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015c16:	bb83      	cbnz	r3, 8015c7a <rcl_init+0x246>
 8015c18:	6839      	ldr	r1, [r7, #0]
 8015c1a:	694b      	ldr	r3, [r1, #20]
 8015c1c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8015c20:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8015c22:	f000 fc97 	bl	8016554 <rcl_get_security_options_from_environment>
 8015c26:	4604      	mov	r4, r0
 8015c28:	2800      	cmp	r0, #0
 8015c2a:	d1a5      	bne.n	8015b78 <rcl_init+0x144>
 8015c2c:	6839      	ldr	r1, [r7, #0]
 8015c2e:	6948      	ldr	r0, [r1, #20]
 8015c30:	3128      	adds	r1, #40	; 0x28
 8015c32:	3018      	adds	r0, #24
 8015c34:	f003 feb2 	bl	801999c <rmw_init>
 8015c38:	4604      	mov	r4, r0
 8015c3a:	2800      	cmp	r0, #0
 8015c3c:	d0a7      	beq.n	8015b8e <rcl_init+0x15a>
 8015c3e:	f7ff fe75 	bl	801592c <rcl_convert_rmw_ret_to_rcl_ret>
 8015c42:	4604      	mov	r4, r0
 8015c44:	e798      	b.n	8015b78 <rcl_init+0x144>
 8015c46:	2201      	movs	r2, #1
 8015c48:	4618      	mov	r0, r3
 8015c4a:	600a      	str	r2, [r1, #0]
 8015c4c:	4613      	mov	r3, r2
 8015c4e:	e7b0      	b.n	8015bb2 <rcl_init+0x17e>
 8015c50:	240a      	movs	r4, #10
 8015c52:	e79c      	b.n	8015b8e <rcl_init+0x15a>
 8015c54:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8015c58:	f000 f90c 	bl	8015e74 <rcl_get_localhost_only>
 8015c5c:	4604      	mov	r4, r0
 8015c5e:	2800      	cmp	r0, #0
 8015c60:	d18a      	bne.n	8015b78 <rcl_init+0x144>
 8015c62:	683a      	ldr	r2, [r7, #0]
 8015c64:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8015c68:	6955      	ldr	r5, [r2, #20]
 8015c6a:	e7ae      	b.n	8015bca <rcl_init+0x196>
 8015c6c:	2302      	movs	r3, #2
 8015c6e:	2200      	movs	r2, #0
 8015c70:	4618      	mov	r0, r3
 8015c72:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 8015c76:	63ea      	str	r2, [r5, #60]	; 0x3c
 8015c78:	e7c0      	b.n	8015bfc <rcl_init+0x1c8>
 8015c7a:	2401      	movs	r4, #1
 8015c7c:	e77c      	b.n	8015b78 <rcl_init+0x144>
 8015c7e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8015c82:	f006 fd07 	bl	801c694 <rcl_get_default_domain_id>
 8015c86:	4604      	mov	r4, r0
 8015c88:	2800      	cmp	r0, #0
 8015c8a:	f47f af75 	bne.w	8015b78 <rcl_init+0x144>
 8015c8e:	683b      	ldr	r3, [r7, #0]
 8015c90:	695d      	ldr	r5, [r3, #20]
 8015c92:	e796      	b.n	8015bc2 <rcl_init+0x18e>
 8015c94:	4630      	mov	r0, r6
 8015c96:	f006 fc4b 	bl	801c530 <rcl_get_automatic_discovery_range>
 8015c9a:	4604      	mov	r4, r0
 8015c9c:	2800      	cmp	r0, #0
 8015c9e:	d09e      	beq.n	8015bde <rcl_init+0x1aa>
 8015ca0:	e76a      	b.n	8015b78 <rcl_init+0x144>
 8015ca2:	bf00      	nop
 8015ca4:	20010984 	.word	0x20010984

08015ca8 <rcl_get_zero_initialized_init_options>:
 8015ca8:	2000      	movs	r0, #0
 8015caa:	4770      	bx	lr

08015cac <rcl_init_options_init>:
 8015cac:	b084      	sub	sp, #16
 8015cae:	b570      	push	{r4, r5, r6, lr}
 8015cb0:	b09e      	sub	sp, #120	; 0x78
 8015cb2:	ad23      	add	r5, sp, #140	; 0x8c
 8015cb4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8015cb8:	2800      	cmp	r0, #0
 8015cba:	d046      	beq.n	8015d4a <rcl_init_options_init+0x9e>
 8015cbc:	6803      	ldr	r3, [r0, #0]
 8015cbe:	4604      	mov	r4, r0
 8015cc0:	b133      	cbz	r3, 8015cd0 <rcl_init_options_init+0x24>
 8015cc2:	2564      	movs	r5, #100	; 0x64
 8015cc4:	4628      	mov	r0, r5
 8015cc6:	b01e      	add	sp, #120	; 0x78
 8015cc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ccc:	b004      	add	sp, #16
 8015cce:	4770      	bx	lr
 8015cd0:	4628      	mov	r0, r5
 8015cd2:	f7f8 ff6d 	bl	800ebb0 <rcutils_allocator_is_valid>
 8015cd6:	2800      	cmp	r0, #0
 8015cd8:	d037      	beq.n	8015d4a <rcl_init_options_init+0x9e>
 8015cda:	46ae      	mov	lr, r5
 8015cdc:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8015ce0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015ce4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015ce8:	f8de 3000 	ldr.w	r3, [lr]
 8015cec:	2070      	movs	r0, #112	; 0x70
 8015cee:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8015cf0:	f8cc 3000 	str.w	r3, [ip]
 8015cf4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8015cf6:	4798      	blx	r3
 8015cf8:	4606      	mov	r6, r0
 8015cfa:	6020      	str	r0, [r4, #0]
 8015cfc:	b338      	cbz	r0, 8015d4e <rcl_init_options_init+0xa2>
 8015cfe:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8015d02:	4686      	mov	lr, r0
 8015d04:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015d08:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015d0c:	f8dc 3000 	ldr.w	r3, [ip]
 8015d10:	a802      	add	r0, sp, #8
 8015d12:	f8ce 3000 	str.w	r3, [lr]
 8015d16:	f003 facf 	bl	80192b8 <rmw_get_zero_initialized_init_options>
 8015d1a:	2258      	movs	r2, #88	; 0x58
 8015d1c:	a902      	add	r1, sp, #8
 8015d1e:	f106 0018 	add.w	r0, r6, #24
 8015d22:	f008 f828 	bl	801dd76 <memcpy>
 8015d26:	ab26      	add	r3, sp, #152	; 0x98
 8015d28:	6826      	ldr	r6, [r4, #0]
 8015d2a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015d2e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015d32:	f106 0018 	add.w	r0, r6, #24
 8015d36:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8015d3a:	f003 fd5f 	bl	80197fc <rmw_init_options_init>
 8015d3e:	4605      	mov	r5, r0
 8015d40:	b938      	cbnz	r0, 8015d52 <rcl_init_options_init+0xa6>
 8015d42:	6823      	ldr	r3, [r4, #0]
 8015d44:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
 8015d48:	e7bc      	b.n	8015cc4 <rcl_init_options_init+0x18>
 8015d4a:	250b      	movs	r5, #11
 8015d4c:	e7ba      	b.n	8015cc4 <rcl_init_options_init+0x18>
 8015d4e:	250a      	movs	r5, #10
 8015d50:	e7b8      	b.n	8015cc4 <rcl_init_options_init+0x18>
 8015d52:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8015d54:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8015d56:	6820      	ldr	r0, [r4, #0]
 8015d58:	4798      	blx	r3
 8015d5a:	4628      	mov	r0, r5
 8015d5c:	f7ff fde6 	bl	801592c <rcl_convert_rmw_ret_to_rcl_ret>
 8015d60:	4605      	mov	r5, r0
 8015d62:	e7af      	b.n	8015cc4 <rcl_init_options_init+0x18>

08015d64 <rcl_init_options_fini>:
 8015d64:	b530      	push	{r4, r5, lr}
 8015d66:	b087      	sub	sp, #28
 8015d68:	b1f0      	cbz	r0, 8015da8 <rcl_init_options_fini+0x44>
 8015d6a:	6803      	ldr	r3, [r0, #0]
 8015d6c:	4604      	mov	r4, r0
 8015d6e:	b1db      	cbz	r3, 8015da8 <rcl_init_options_fini+0x44>
 8015d70:	469c      	mov	ip, r3
 8015d72:	f10d 0e04 	add.w	lr, sp, #4
 8015d76:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015d7a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015d7e:	f8dc 3000 	ldr.w	r3, [ip]
 8015d82:	a801      	add	r0, sp, #4
 8015d84:	f8ce 3000 	str.w	r3, [lr]
 8015d88:	f7f8 ff12 	bl	800ebb0 <rcutils_allocator_is_valid>
 8015d8c:	b160      	cbz	r0, 8015da8 <rcl_init_options_fini+0x44>
 8015d8e:	6820      	ldr	r0, [r4, #0]
 8015d90:	3018      	adds	r0, #24
 8015d92:	f003 fdcd 	bl	8019930 <rmw_init_options_fini>
 8015d96:	4605      	mov	r5, r0
 8015d98:	b950      	cbnz	r0, 8015db0 <rcl_init_options_fini+0x4c>
 8015d9a:	6820      	ldr	r0, [r4, #0]
 8015d9c:	9b02      	ldr	r3, [sp, #8]
 8015d9e:	9905      	ldr	r1, [sp, #20]
 8015da0:	4798      	blx	r3
 8015da2:	4628      	mov	r0, r5
 8015da4:	b007      	add	sp, #28
 8015da6:	bd30      	pop	{r4, r5, pc}
 8015da8:	250b      	movs	r5, #11
 8015daa:	4628      	mov	r0, r5
 8015dac:	b007      	add	sp, #28
 8015dae:	bd30      	pop	{r4, r5, pc}
 8015db0:	f7ff fdbc 	bl	801592c <rcl_convert_rmw_ret_to_rcl_ret>
 8015db4:	4605      	mov	r5, r0
 8015db6:	e7f8      	b.n	8015daa <rcl_init_options_fini+0x46>

08015db8 <rcl_init_options_copy>:
 8015db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015dba:	b09d      	sub	sp, #116	; 0x74
 8015dbc:	2800      	cmp	r0, #0
 8015dbe:	d04d      	beq.n	8015e5c <rcl_init_options_copy+0xa4>
 8015dc0:	4604      	mov	r4, r0
 8015dc2:	6800      	ldr	r0, [r0, #0]
 8015dc4:	2800      	cmp	r0, #0
 8015dc6:	d049      	beq.n	8015e5c <rcl_init_options_copy+0xa4>
 8015dc8:	460d      	mov	r5, r1
 8015dca:	f7f8 fef1 	bl	800ebb0 <rcutils_allocator_is_valid>
 8015dce:	2d00      	cmp	r5, #0
 8015dd0:	d044      	beq.n	8015e5c <rcl_init_options_copy+0xa4>
 8015dd2:	f080 0001 	eor.w	r0, r0, #1
 8015dd6:	b2c0      	uxtb	r0, r0
 8015dd8:	2800      	cmp	r0, #0
 8015dda:	d13f      	bne.n	8015e5c <rcl_init_options_copy+0xa4>
 8015ddc:	682b      	ldr	r3, [r5, #0]
 8015dde:	b11b      	cbz	r3, 8015de8 <rcl_init_options_copy+0x30>
 8015de0:	2464      	movs	r4, #100	; 0x64
 8015de2:	4620      	mov	r0, r4
 8015de4:	b01d      	add	sp, #116	; 0x74
 8015de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015de8:	6826      	ldr	r6, [r4, #0]
 8015dea:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 8015dee:	46b6      	mov	lr, r6
 8015df0:	6837      	ldr	r7, [r6, #0]
 8015df2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015df6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015dfa:	f8de 3000 	ldr.w	r3, [lr]
 8015dfe:	2070      	movs	r0, #112	; 0x70
 8015e00:	4619      	mov	r1, r3
 8015e02:	f8cc 3000 	str.w	r3, [ip]
 8015e06:	47b8      	blx	r7
 8015e08:	4606      	mov	r6, r0
 8015e0a:	6028      	str	r0, [r5, #0]
 8015e0c:	b350      	cbz	r0, 8015e64 <rcl_init_options_copy+0xac>
 8015e0e:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 8015e12:	4686      	mov	lr, r0
 8015e14:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015e18:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015e1c:	f8dc 3000 	ldr.w	r3, [ip]
 8015e20:	4668      	mov	r0, sp
 8015e22:	f8ce 3000 	str.w	r3, [lr]
 8015e26:	f003 fa47 	bl	80192b8 <rmw_get_zero_initialized_init_options>
 8015e2a:	2258      	movs	r2, #88	; 0x58
 8015e2c:	4669      	mov	r1, sp
 8015e2e:	f106 0018 	add.w	r0, r6, #24
 8015e32:	f007 ffa0 	bl	801dd76 <memcpy>
 8015e36:	6820      	ldr	r0, [r4, #0]
 8015e38:	6829      	ldr	r1, [r5, #0]
 8015e3a:	3018      	adds	r0, #24
 8015e3c:	3118      	adds	r1, #24
 8015e3e:	f003 fd45 	bl	80198cc <rmw_init_options_copy>
 8015e42:	4604      	mov	r4, r0
 8015e44:	2800      	cmp	r0, #0
 8015e46:	d0cc      	beq.n	8015de2 <rcl_init_options_copy+0x2a>
 8015e48:	f7f8 fec0 	bl	800ebcc <rcutils_get_error_string>
 8015e4c:	f7f8 fed4 	bl	800ebf8 <rcutils_reset_error>
 8015e50:	4628      	mov	r0, r5
 8015e52:	f7ff ff87 	bl	8015d64 <rcl_init_options_fini>
 8015e56:	b138      	cbz	r0, 8015e68 <rcl_init_options_copy+0xb0>
 8015e58:	4604      	mov	r4, r0
 8015e5a:	e7c2      	b.n	8015de2 <rcl_init_options_copy+0x2a>
 8015e5c:	240b      	movs	r4, #11
 8015e5e:	4620      	mov	r0, r4
 8015e60:	b01d      	add	sp, #116	; 0x74
 8015e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e64:	240a      	movs	r4, #10
 8015e66:	e7bc      	b.n	8015de2 <rcl_init_options_copy+0x2a>
 8015e68:	4620      	mov	r0, r4
 8015e6a:	b01d      	add	sp, #116	; 0x74
 8015e6c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015e70:	f7ff bd5c 	b.w	801592c <rcl_convert_rmw_ret_to_rcl_ret>

08015e74 <rcl_get_localhost_only>:
 8015e74:	b510      	push	{r4, lr}
 8015e76:	2300      	movs	r3, #0
 8015e78:	b082      	sub	sp, #8
 8015e7a:	9301      	str	r3, [sp, #4]
 8015e7c:	b1c0      	cbz	r0, 8015eb0 <rcl_get_localhost_only+0x3c>
 8015e7e:	4604      	mov	r4, r0
 8015e80:	a901      	add	r1, sp, #4
 8015e82:	480d      	ldr	r0, [pc, #52]	; (8015eb8 <rcl_get_localhost_only+0x44>)
 8015e84:	f002 ff54 	bl	8018d30 <rcutils_get_env>
 8015e88:	b110      	cbz	r0, 8015e90 <rcl_get_localhost_only+0x1c>
 8015e8a:	2001      	movs	r0, #1
 8015e8c:	b002      	add	sp, #8
 8015e8e:	bd10      	pop	{r4, pc}
 8015e90:	9b01      	ldr	r3, [sp, #4]
 8015e92:	b10b      	cbz	r3, 8015e98 <rcl_get_localhost_only+0x24>
 8015e94:	781b      	ldrb	r3, [r3, #0]
 8015e96:	b923      	cbnz	r3, 8015ea2 <rcl_get_localhost_only+0x2e>
 8015e98:	2300      	movs	r3, #0
 8015e9a:	4618      	mov	r0, r3
 8015e9c:	7023      	strb	r3, [r4, #0]
 8015e9e:	b002      	add	sp, #8
 8015ea0:	bd10      	pop	{r4, pc}
 8015ea2:	2b31      	cmp	r3, #49	; 0x31
 8015ea4:	bf0c      	ite	eq
 8015ea6:	2301      	moveq	r3, #1
 8015ea8:	2302      	movne	r3, #2
 8015eaa:	7023      	strb	r3, [r4, #0]
 8015eac:	b002      	add	sp, #8
 8015eae:	bd10      	pop	{r4, pc}
 8015eb0:	200b      	movs	r0, #11
 8015eb2:	b002      	add	sp, #8
 8015eb4:	bd10      	pop	{r4, pc}
 8015eb6:	bf00      	nop
 8015eb8:	080200a0 	.word	0x080200a0

08015ebc <rcl_get_zero_initialized_node>:
 8015ebc:	4a03      	ldr	r2, [pc, #12]	; (8015ecc <rcl_get_zero_initialized_node+0x10>)
 8015ebe:	4603      	mov	r3, r0
 8015ec0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015ec4:	e883 0003 	stmia.w	r3, {r0, r1}
 8015ec8:	4618      	mov	r0, r3
 8015eca:	4770      	bx	lr
 8015ecc:	080200e4 	.word	0x080200e4

08015ed0 <rcl_node_init>:
 8015ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ed4:	b0ab      	sub	sp, #172	; 0xac
 8015ed6:	4604      	mov	r4, r0
 8015ed8:	460e      	mov	r6, r1
 8015eda:	4615      	mov	r5, r2
 8015edc:	f8dd 80d0 	ldr.w	r8, [sp, #208]	; 0xd0
 8015ee0:	a825      	add	r0, sp, #148	; 0x94
 8015ee2:	461f      	mov	r7, r3
 8015ee4:	f006 fe4a 	bl	801cb7c <rcl_guard_condition_get_default_options>
 8015ee8:	f1b8 0f00 	cmp.w	r8, #0
 8015eec:	f000 80f3 	beq.w	80160d6 <rcl_node_init+0x206>
 8015ef0:	4640      	mov	r0, r8
 8015ef2:	f7f8 fe5d 	bl	800ebb0 <rcutils_allocator_is_valid>
 8015ef6:	2d00      	cmp	r5, #0
 8015ef8:	bf18      	it	ne
 8015efa:	2c00      	cmpne	r4, #0
 8015efc:	f080 0001 	eor.w	r0, r0, #1
 8015f00:	bf0c      	ite	eq
 8015f02:	f04f 0c01 	moveq.w	ip, #1
 8015f06:	f04f 0c00 	movne.w	ip, #0
 8015f0a:	2e00      	cmp	r6, #0
 8015f0c:	bf08      	it	eq
 8015f0e:	f04c 0c01 	orreq.w	ip, ip, #1
 8015f12:	ea4c 0c00 	orr.w	ip, ip, r0
 8015f16:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 8015f1a:	f040 80dc 	bne.w	80160d6 <rcl_node_init+0x206>
 8015f1e:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8015f22:	f1ba 0f00 	cmp.w	sl, #0
 8015f26:	f040 80fc 	bne.w	8016122 <rcl_node_init+0x252>
 8015f2a:	2f00      	cmp	r7, #0
 8015f2c:	f000 80d3 	beq.w	80160d6 <rcl_node_init+0x206>
 8015f30:	4638      	mov	r0, r7
 8015f32:	f7ff fd19 	bl	8015968 <rcl_context_is_valid>
 8015f36:	4683      	mov	fp, r0
 8015f38:	2800      	cmp	r0, #0
 8015f3a:	f000 80d2 	beq.w	80160e2 <rcl_node_init+0x212>
 8015f3e:	4652      	mov	r2, sl
 8015f40:	4630      	mov	r0, r6
 8015f42:	a924      	add	r1, sp, #144	; 0x90
 8015f44:	f8cd a090 	str.w	sl, [sp, #144]	; 0x90
 8015f48:	f003 fb6c 	bl	8019624 <rmw_validate_node_name>
 8015f4c:	4682      	mov	sl, r0
 8015f4e:	2800      	cmp	r0, #0
 8015f50:	f040 80c3 	bne.w	80160da <rcl_node_init+0x20a>
 8015f54:	9824      	ldr	r0, [sp, #144]	; 0x90
 8015f56:	2800      	cmp	r0, #0
 8015f58:	f040 80f1 	bne.w	801613e <rcl_node_init+0x26e>
 8015f5c:	4628      	mov	r0, r5
 8015f5e:	f7ea f9cf 	bl	8000300 <strlen>
 8015f62:	2800      	cmp	r0, #0
 8015f64:	f040 80c0 	bne.w	80160e8 <rcl_node_init+0x218>
 8015f68:	4d79      	ldr	r5, [pc, #484]	; (8016150 <rcl_node_init+0x280>)
 8015f6a:	a924      	add	r1, sp, #144	; 0x90
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	4628      	mov	r0, r5
 8015f70:	f003 fb3a 	bl	80195e8 <rmw_validate_namespace>
 8015f74:	4682      	mov	sl, r0
 8015f76:	2800      	cmp	r0, #0
 8015f78:	f040 80af 	bne.w	80160da <rcl_node_init+0x20a>
 8015f7c:	9824      	ldr	r0, [sp, #144]	; 0x90
 8015f7e:	2800      	cmp	r0, #0
 8015f80:	f040 80d5 	bne.w	801612e <rcl_node_init+0x25e>
 8015f84:	f8d8 3000 	ldr.w	r3, [r8]
 8015f88:	2080      	movs	r0, #128	; 0x80
 8015f8a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015f8e:	4798      	blx	r3
 8015f90:	4682      	mov	sl, r0
 8015f92:	6060      	str	r0, [r4, #4]
 8015f94:	2800      	cmp	r0, #0
 8015f96:	f000 80cf 	beq.w	8016138 <rcl_node_init+0x268>
 8015f9a:	2200      	movs	r2, #0
 8015f9c:	2300      	movs	r3, #0
 8015f9e:	a808      	add	r0, sp, #32
 8015fa0:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 8015fa4:	e9ca 231e 	strd	r2, r3, [sl, #120]	; 0x78
 8015fa8:	f000 f922 	bl	80161f0 <rcl_node_get_default_options>
 8015fac:	a908      	add	r1, sp, #32
 8015fae:	4650      	mov	r0, sl
 8015fb0:	2270      	movs	r2, #112	; 0x70
 8015fb2:	f007 fee0 	bl	801dd76 <memcpy>
 8015fb6:	6861      	ldr	r1, [r4, #4]
 8015fb8:	4640      	mov	r0, r8
 8015fba:	6027      	str	r7, [r4, #0]
 8015fbc:	f000 f926 	bl	801620c <rcl_node_options_copy>
 8015fc0:	2800      	cmp	r0, #0
 8015fc2:	d158      	bne.n	8016076 <rcl_node_init+0x1a6>
 8015fc4:	4628      	mov	r0, r5
 8015fc6:	f7ea f99b 	bl	8000300 <strlen>
 8015fca:	4428      	add	r0, r5
 8015fcc:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8015fd0:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8015fd4:	2b2f      	cmp	r3, #47	; 0x2f
 8015fd6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015fda:	9300      	str	r3, [sp, #0]
 8015fdc:	bf0c      	ite	eq
 8015fde:	4b5d      	ldreq	r3, [pc, #372]	; (8016154 <rcl_node_init+0x284>)
 8015fe0:	4b5d      	ldrne	r3, [pc, #372]	; (8016158 <rcl_node_init+0x288>)
 8015fe2:	9302      	str	r3, [sp, #8]
 8015fe4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015fe8:	9301      	str	r3, [sp, #4]
 8015fea:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8015fee:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8015ff2:	f002 fec5 	bl	8018d80 <rcutils_format_string_limit>
 8015ff6:	6823      	ldr	r3, [r4, #0]
 8015ff8:	f8ca 007c 	str.w	r0, [sl, #124]	; 0x7c
 8015ffc:	4631      	mov	r1, r6
 8015ffe:	6818      	ldr	r0, [r3, #0]
 8016000:	462a      	mov	r2, r5
 8016002:	6866      	ldr	r6, [r4, #4]
 8016004:	3028      	adds	r0, #40	; 0x28
 8016006:	f003 ff23 	bl	8019e50 <rmw_create_node>
 801600a:	6863      	ldr	r3, [r4, #4]
 801600c:	6730      	str	r0, [r6, #112]	; 0x70
 801600e:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8016010:	2800      	cmp	r0, #0
 8016012:	d032      	beq.n	801607a <rcl_node_init+0x1aa>
 8016014:	f003 ffac 	bl	8019f70 <rmw_node_get_graph_guard_condition>
 8016018:	4682      	mov	sl, r0
 801601a:	b360      	cbz	r0, 8016076 <rcl_node_init+0x1a6>
 801601c:	f8d8 3000 	ldr.w	r3, [r8]
 8016020:	2008      	movs	r0, #8
 8016022:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016026:	6866      	ldr	r6, [r4, #4]
 8016028:	4798      	blx	r3
 801602a:	6863      	ldr	r3, [r4, #4]
 801602c:	6770      	str	r0, [r6, #116]	; 0x74
 801602e:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
 8016032:	f1bb 0f00 	cmp.w	fp, #0
 8016036:	d020      	beq.n	801607a <rcl_node_init+0x1aa>
 8016038:	a806      	add	r0, sp, #24
 801603a:	ae25      	add	r6, sp, #148	; 0x94
 801603c:	f006 fcc4 	bl	801c9c8 <rcl_get_zero_initialized_guard_condition>
 8016040:	a806      	add	r0, sp, #24
 8016042:	6863      	ldr	r3, [r4, #4]
 8016044:	46c4      	mov	ip, r8
 8016046:	c803      	ldmia	r0, {r0, r1}
 8016048:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
 801604c:	e88b 0003 	stmia.w	fp, {r0, r1}
 8016050:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016054:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8016056:	f8dc 3000 	ldr.w	r3, [ip]
 801605a:	6033      	str	r3, [r6, #0]
 801605c:	ab2a      	add	r3, sp, #168	; 0xa8
 801605e:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8016062:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016066:	4651      	mov	r1, sl
 8016068:	463a      	mov	r2, r7
 801606a:	4670      	mov	r0, lr
 801606c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801606e:	f006 fd03 	bl	801ca78 <rcl_guard_condition_init_from_rmw>
 8016072:	4682      	mov	sl, r0
 8016074:	b328      	cbz	r0, 80160c2 <rcl_node_init+0x1f2>
 8016076:	6863      	ldr	r3, [r4, #4]
 8016078:	b1f3      	cbz	r3, 80160b8 <rcl_node_init+0x1e8>
 801607a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 801607c:	b128      	cbz	r0, 801608a <rcl_node_init+0x1ba>
 801607e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016082:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016086:	4798      	blx	r3
 8016088:	6863      	ldr	r3, [r4, #4]
 801608a:	6f18      	ldr	r0, [r3, #112]	; 0x70
 801608c:	b110      	cbz	r0, 8016094 <rcl_node_init+0x1c4>
 801608e:	f003 fef1 	bl	8019e74 <rmw_destroy_node>
 8016092:	6863      	ldr	r3, [r4, #4]
 8016094:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8016096:	b148      	cbz	r0, 80160ac <rcl_node_init+0x1dc>
 8016098:	f006 fd4a 	bl	801cb30 <rcl_guard_condition_fini>
 801609c:	6863      	ldr	r3, [r4, #4]
 801609e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80160a2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80160a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80160a8:	4798      	blx	r3
 80160aa:	6863      	ldr	r3, [r4, #4]
 80160ac:	4618      	mov	r0, r3
 80160ae:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80160b2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80160b6:	4798      	blx	r3
 80160b8:	2300      	movs	r3, #0
 80160ba:	f04f 0a01 	mov.w	sl, #1
 80160be:	e9c4 3300 	strd	r3, r3, [r4]
 80160c2:	f1b9 0f00 	cmp.w	r9, #0
 80160c6:	d008      	beq.n	80160da <rcl_node_init+0x20a>
 80160c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80160cc:	4628      	mov	r0, r5
 80160ce:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80160d2:	4798      	blx	r3
 80160d4:	e001      	b.n	80160da <rcl_node_init+0x20a>
 80160d6:	f04f 0a0b 	mov.w	sl, #11
 80160da:	4650      	mov	r0, sl
 80160dc:	b02b      	add	sp, #172	; 0xac
 80160de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160e2:	f04f 0a65 	mov.w	sl, #101	; 0x65
 80160e6:	e7f8      	b.n	80160da <rcl_node_init+0x20a>
 80160e8:	782b      	ldrb	r3, [r5, #0]
 80160ea:	2b2f      	cmp	r3, #47	; 0x2f
 80160ec:	f43f af3d 	beq.w	8015f6a <rcl_node_init+0x9a>
 80160f0:	9503      	str	r5, [sp, #12]
 80160f2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80160f6:	9300      	str	r3, [sp, #0]
 80160f8:	4b18      	ldr	r3, [pc, #96]	; (801615c <rcl_node_init+0x28c>)
 80160fa:	9302      	str	r3, [sp, #8]
 80160fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016100:	9301      	str	r3, [sp, #4]
 8016102:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8016106:	f002 fe3b 	bl	8018d80 <rcutils_format_string_limit>
 801610a:	4605      	mov	r5, r0
 801610c:	b1e0      	cbz	r0, 8016148 <rcl_node_init+0x278>
 801610e:	2200      	movs	r2, #0
 8016110:	a924      	add	r1, sp, #144	; 0x90
 8016112:	9224      	str	r2, [sp, #144]	; 0x90
 8016114:	f003 fa68 	bl	80195e8 <rmw_validate_namespace>
 8016118:	4682      	mov	sl, r0
 801611a:	2800      	cmp	r0, #0
 801611c:	d1d4      	bne.n	80160c8 <rcl_node_init+0x1f8>
 801611e:	46d9      	mov	r9, fp
 8016120:	e72c      	b.n	8015f7c <rcl_node_init+0xac>
 8016122:	f04f 0a64 	mov.w	sl, #100	; 0x64
 8016126:	4650      	mov	r0, sl
 8016128:	b02b      	add	sp, #172	; 0xac
 801612a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801612e:	f04f 0aca 	mov.w	sl, #202	; 0xca
 8016132:	f003 fa6b 	bl	801960c <rmw_namespace_validation_result_string>
 8016136:	e7c4      	b.n	80160c2 <rcl_node_init+0x1f2>
 8016138:	f04f 0a0a 	mov.w	sl, #10
 801613c:	e7c1      	b.n	80160c2 <rcl_node_init+0x1f2>
 801613e:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 8016142:	f003 fac3 	bl	80196cc <rmw_node_name_validation_result_string>
 8016146:	e7c8      	b.n	80160da <rcl_node_init+0x20a>
 8016148:	f04f 0a0a 	mov.w	sl, #10
 801614c:	e7c5      	b.n	80160da <rcl_node_init+0x20a>
 801614e:	bf00      	nop
 8016150:	080200b8 	.word	0x080200b8
 8016154:	0801fb88 	.word	0x0801fb88
 8016158:	080200c0 	.word	0x080200c0
 801615c:	080200bc 	.word	0x080200bc

08016160 <rcl_node_is_valid>:
 8016160:	b130      	cbz	r0, 8016170 <rcl_node_is_valid+0x10>
 8016162:	6843      	ldr	r3, [r0, #4]
 8016164:	b123      	cbz	r3, 8016170 <rcl_node_is_valid+0x10>
 8016166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016168:	b113      	cbz	r3, 8016170 <rcl_node_is_valid+0x10>
 801616a:	6800      	ldr	r0, [r0, #0]
 801616c:	f7ff bbfc 	b.w	8015968 <rcl_context_is_valid>
 8016170:	2000      	movs	r0, #0
 8016172:	4770      	bx	lr

08016174 <rcl_node_get_name>:
 8016174:	b120      	cbz	r0, 8016180 <rcl_node_get_name+0xc>
 8016176:	6840      	ldr	r0, [r0, #4]
 8016178:	b110      	cbz	r0, 8016180 <rcl_node_get_name+0xc>
 801617a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801617c:	b100      	cbz	r0, 8016180 <rcl_node_get_name+0xc>
 801617e:	6880      	ldr	r0, [r0, #8]
 8016180:	4770      	bx	lr
 8016182:	bf00      	nop

08016184 <rcl_node_get_namespace>:
 8016184:	b120      	cbz	r0, 8016190 <rcl_node_get_namespace+0xc>
 8016186:	6840      	ldr	r0, [r0, #4]
 8016188:	b110      	cbz	r0, 8016190 <rcl_node_get_namespace+0xc>
 801618a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801618c:	b100      	cbz	r0, 8016190 <rcl_node_get_namespace+0xc>
 801618e:	68c0      	ldr	r0, [r0, #12]
 8016190:	4770      	bx	lr
 8016192:	bf00      	nop

08016194 <rcl_node_get_options>:
 8016194:	b128      	cbz	r0, 80161a2 <rcl_node_get_options+0xe>
 8016196:	6840      	ldr	r0, [r0, #4]
 8016198:	b118      	cbz	r0, 80161a2 <rcl_node_get_options+0xe>
 801619a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 801619c:	2b00      	cmp	r3, #0
 801619e:	bf08      	it	eq
 80161a0:	2000      	moveq	r0, #0
 80161a2:	4770      	bx	lr

080161a4 <rcl_node_get_rmw_handle>:
 80161a4:	b110      	cbz	r0, 80161ac <rcl_node_get_rmw_handle+0x8>
 80161a6:	6840      	ldr	r0, [r0, #4]
 80161a8:	b100      	cbz	r0, 80161ac <rcl_node_get_rmw_handle+0x8>
 80161aa:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80161ac:	4770      	bx	lr
 80161ae:	bf00      	nop

080161b0 <rcl_get_disable_loaned_message>:
 80161b0:	b510      	push	{r4, lr}
 80161b2:	2300      	movs	r3, #0
 80161b4:	b082      	sub	sp, #8
 80161b6:	9301      	str	r3, [sp, #4]
 80161b8:	b1a0      	cbz	r0, 80161e4 <rcl_get_disable_loaned_message+0x34>
 80161ba:	4604      	mov	r4, r0
 80161bc:	a901      	add	r1, sp, #4
 80161be:	480b      	ldr	r0, [pc, #44]	; (80161ec <rcl_get_disable_loaned_message+0x3c>)
 80161c0:	f002 fdb6 	bl	8018d30 <rcutils_get_env>
 80161c4:	b110      	cbz	r0, 80161cc <rcl_get_disable_loaned_message+0x1c>
 80161c6:	2001      	movs	r0, #1
 80161c8:	b002      	add	sp, #8
 80161ca:	bd10      	pop	{r4, pc}
 80161cc:	9a01      	ldr	r2, [sp, #4]
 80161ce:	2000      	movs	r0, #0
 80161d0:	7813      	ldrb	r3, [r2, #0]
 80161d2:	3b31      	subs	r3, #49	; 0x31
 80161d4:	bf08      	it	eq
 80161d6:	7853      	ldrbeq	r3, [r2, #1]
 80161d8:	fab3 f383 	clz	r3, r3
 80161dc:	095b      	lsrs	r3, r3, #5
 80161de:	7023      	strb	r3, [r4, #0]
 80161e0:	b002      	add	sp, #8
 80161e2:	bd10      	pop	{r4, pc}
 80161e4:	200b      	movs	r0, #11
 80161e6:	b002      	add	sp, #8
 80161e8:	bd10      	pop	{r4, pc}
 80161ea:	bf00      	nop
 80161ec:	080200c8 	.word	0x080200c8

080161f0 <rcl_node_get_default_options>:
 80161f0:	b510      	push	{r4, lr}
 80161f2:	4604      	mov	r4, r0
 80161f4:	2270      	movs	r2, #112	; 0x70
 80161f6:	2100      	movs	r1, #0
 80161f8:	f007 fc8c 	bl	801db14 <memset>
 80161fc:	4620      	mov	r0, r4
 80161fe:	f7f8 fcc9 	bl	800eb94 <rcutils_get_default_allocator>
 8016202:	2301      	movs	r3, #1
 8016204:	4620      	mov	r0, r4
 8016206:	7523      	strb	r3, [r4, #20]
 8016208:	bd10      	pop	{r4, pc}
 801620a:	bf00      	nop

0801620c <rcl_node_options_copy>:
 801620c:	2800      	cmp	r0, #0
 801620e:	bf18      	it	ne
 8016210:	4288      	cmpne	r0, r1
 8016212:	d01b      	beq.n	801624c <rcl_node_options_copy+0x40>
 8016214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016216:	fab1 f681 	clz	r6, r1
 801621a:	460c      	mov	r4, r1
 801621c:	0976      	lsrs	r6, r6, #5
 801621e:	b199      	cbz	r1, 8016248 <rcl_node_options_copy+0x3c>
 8016220:	4605      	mov	r5, r0
 8016222:	8a87      	ldrh	r7, [r0, #20]
 8016224:	4684      	mov	ip, r0
 8016226:	468e      	mov	lr, r1
 8016228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801622a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801622e:	682b      	ldr	r3, [r5, #0]
 8016230:	2250      	movs	r2, #80	; 0x50
 8016232:	f10c 0118 	add.w	r1, ip, #24
 8016236:	f104 0018 	add.w	r0, r4, #24
 801623a:	f8ce 3000 	str.w	r3, [lr]
 801623e:	82a7      	strh	r7, [r4, #20]
 8016240:	f007 fd99 	bl	801dd76 <memcpy>
 8016244:	4630      	mov	r0, r6
 8016246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016248:	200b      	movs	r0, #11
 801624a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801624c:	200b      	movs	r0, #11
 801624e:	4770      	bx	lr

08016250 <rcl_node_resolve_name>:
 8016250:	b082      	sub	sp, #8
 8016252:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016256:	b091      	sub	sp, #68	; 0x44
 8016258:	ac1a      	add	r4, sp, #104	; 0x68
 801625a:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 801625e:	e884 000c 	stmia.w	r4, {r2, r3}
 8016262:	2800      	cmp	r0, #0
 8016264:	d03d      	beq.n	80162e2 <rcl_node_resolve_name+0x92>
 8016266:	460c      	mov	r4, r1
 8016268:	4605      	mov	r5, r0
 801626a:	f7ff ff93 	bl	8016194 <rcl_node_get_options>
 801626e:	2800      	cmp	r0, #0
 8016270:	d03a      	beq.n	80162e8 <rcl_node_resolve_name+0x98>
 8016272:	4628      	mov	r0, r5
 8016274:	f7ff ff7e 	bl	8016174 <rcl_node_get_name>
 8016278:	4606      	mov	r6, r0
 801627a:	4628      	mov	r0, r5
 801627c:	ad0b      	add	r5, sp, #44	; 0x2c
 801627e:	f7ff ff81 	bl	8016184 <rcl_node_get_namespace>
 8016282:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8016286:	4607      	mov	r7, r0
 8016288:	46ac      	mov	ip, r5
 801628a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801628e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016292:	f8de 3000 	ldr.w	r3, [lr]
 8016296:	f8cc 3000 	str.w	r3, [ip]
 801629a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801629c:	b30b      	cbz	r3, 80162e2 <rcl_node_resolve_name+0x92>
 801629e:	4689      	mov	r9, r1
 80162a0:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80162a4:	f002 feee 	bl	8019084 <rcutils_get_zero_initialized_string_map>
 80162a8:	ab10      	add	r3, sp, #64	; 0x40
 80162aa:	9008      	str	r0, [sp, #32]
 80162ac:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80162b0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80162b4:	2100      	movs	r1, #0
 80162b6:	a808      	add	r0, sp, #32
 80162b8:	e895 000c 	ldmia.w	r5, {r2, r3}
 80162bc:	f002 ff34 	bl	8019128 <rcutils_string_map_init>
 80162c0:	4683      	mov	fp, r0
 80162c2:	b1a0      	cbz	r0, 80162ee <rcl_node_resolve_name+0x9e>
 80162c4:	f7f8 fc82 	bl	800ebcc <rcutils_get_error_string>
 80162c8:	f7f8 fc96 	bl	800ebf8 <rcutils_reset_error>
 80162cc:	f1bb 0f0a 	cmp.w	fp, #10
 80162d0:	bf18      	it	ne
 80162d2:	f04f 0b01 	movne.w	fp, #1
 80162d6:	4658      	mov	r0, fp
 80162d8:	b011      	add	sp, #68	; 0x44
 80162da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162de:	b002      	add	sp, #8
 80162e0:	4770      	bx	lr
 80162e2:	f04f 0b0b 	mov.w	fp, #11
 80162e6:	e7f6      	b.n	80162d6 <rcl_node_resolve_name+0x86>
 80162e8:	f04f 0b01 	mov.w	fp, #1
 80162ec:	e7f3      	b.n	80162d6 <rcl_node_resolve_name+0x86>
 80162ee:	9009      	str	r0, [sp, #36]	; 0x24
 80162f0:	9007      	str	r0, [sp, #28]
 80162f2:	a808      	add	r0, sp, #32
 80162f4:	f006 fb62 	bl	801c9bc <rcl_get_default_topic_name_substitutions>
 80162f8:	4683      	mov	fp, r0
 80162fa:	b180      	cbz	r0, 801631e <rcl_node_resolve_name+0xce>
 80162fc:	280a      	cmp	r0, #10
 80162fe:	a808      	add	r0, sp, #32
 8016300:	bf18      	it	ne
 8016302:	f04f 0b01 	movne.w	fp, #1
 8016306:	f002 ff4d 	bl	80191a4 <rcutils_string_map_fini>
 801630a:	4604      	mov	r4, r0
 801630c:	2800      	cmp	r0, #0
 801630e:	d15b      	bne.n	80163c8 <rcl_node_resolve_name+0x178>
 8016310:	4651      	mov	r1, sl
 8016312:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016314:	47c8      	blx	r9
 8016316:	4651      	mov	r1, sl
 8016318:	4620      	mov	r0, r4
 801631a:	47c8      	blx	r9
 801631c:	e7db      	b.n	80162d6 <rcl_node_resolve_name+0x86>
 801631e:	ab09      	add	r3, sp, #36	; 0x24
 8016320:	46ec      	mov	ip, sp
 8016322:	9305      	str	r3, [sp, #20]
 8016324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016326:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801632a:	682b      	ldr	r3, [r5, #0]
 801632c:	463a      	mov	r2, r7
 801632e:	4631      	mov	r1, r6
 8016330:	4620      	mov	r0, r4
 8016332:	f8cc 3000 	str.w	r3, [ip]
 8016336:	ab08      	add	r3, sp, #32
 8016338:	f006 f9e0 	bl	801c6fc <rcl_expand_topic_name>
 801633c:	4683      	mov	fp, r0
 801633e:	b9d8      	cbnz	r0, 8016378 <rcl_node_resolve_name+0x128>
 8016340:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8016342:	4602      	mov	r2, r0
 8016344:	9009      	str	r0, [sp, #36]	; 0x24
 8016346:	a90a      	add	r1, sp, #40	; 0x28
 8016348:	4620      	mov	r0, r4
 801634a:	f003 f87d 	bl	8019448 <rmw_validate_full_topic_name>
 801634e:	bb50      	cbnz	r0, 80163a6 <rcl_node_resolve_name+0x156>
 8016350:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8016352:	2d00      	cmp	r5, #0
 8016354:	d140      	bne.n	80163d8 <rcl_node_resolve_name+0x188>
 8016356:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016358:	a808      	add	r0, sp, #32
 801635a:	601c      	str	r4, [r3, #0]
 801635c:	f002 ff22 	bl	80191a4 <rcutils_string_map_fini>
 8016360:	4683      	mov	fp, r0
 8016362:	2800      	cmp	r0, #0
 8016364:	d043      	beq.n	80163ee <rcl_node_resolve_name+0x19e>
 8016366:	f7f8 fc31 	bl	800ebcc <rcutils_get_error_string>
 801636a:	46a8      	mov	r8, r5
 801636c:	f04f 0b01 	mov.w	fp, #1
 8016370:	462c      	mov	r4, r5
 8016372:	f7f8 fc41 	bl	800ebf8 <rcutils_reset_error>
 8016376:	e00a      	b.n	801638e <rcl_node_resolve_name+0x13e>
 8016378:	2867      	cmp	r0, #103	; 0x67
 801637a:	bf14      	ite	ne
 801637c:	f04f 0800 	movne.w	r8, #0
 8016380:	f008 0801 	andeq.w	r8, r8, #1
 8016384:	9c07      	ldr	r4, [sp, #28]
 8016386:	a808      	add	r0, sp, #32
 8016388:	f002 ff0c 	bl	80191a4 <rcutils_string_map_fini>
 801638c:	bb50      	cbnz	r0, 80163e4 <rcl_node_resolve_name+0x194>
 801638e:	4651      	mov	r1, sl
 8016390:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016392:	47c8      	blx	r9
 8016394:	4651      	mov	r1, sl
 8016396:	4620      	mov	r0, r4
 8016398:	47c8      	blx	r9
 801639a:	f1b8 0f00 	cmp.w	r8, #0
 801639e:	bf18      	it	ne
 80163a0:	f04f 0b68 	movne.w	fp, #104	; 0x68
 80163a4:	e797      	b.n	80162d6 <rcl_node_resolve_name+0x86>
 80163a6:	f7f8 fc11 	bl	800ebcc <rcutils_get_error_string>
 80163aa:	f7f8 fc25 	bl	800ebf8 <rcutils_reset_error>
 80163ae:	a808      	add	r0, sp, #32
 80163b0:	f002 fef8 	bl	80191a4 <rcutils_string_map_fini>
 80163b4:	b998      	cbnz	r0, 80163de <rcl_node_resolve_name+0x18e>
 80163b6:	4651      	mov	r1, sl
 80163b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80163ba:	47c8      	blx	r9
 80163bc:	4651      	mov	r1, sl
 80163be:	4620      	mov	r0, r4
 80163c0:	f04f 0b01 	mov.w	fp, #1
 80163c4:	47c8      	blx	r9
 80163c6:	e786      	b.n	80162d6 <rcl_node_resolve_name+0x86>
 80163c8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80163cc:	f7f8 fbfe 	bl	800ebcc <rcutils_get_error_string>
 80163d0:	f7f8 fc12 	bl	800ebf8 <rcutils_reset_error>
 80163d4:	4644      	mov	r4, r8
 80163d6:	e7da      	b.n	801638e <rcl_node_resolve_name+0x13e>
 80163d8:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80163dc:	e7d3      	b.n	8016386 <rcl_node_resolve_name+0x136>
 80163de:	46d8      	mov	r8, fp
 80163e0:	f04f 0b01 	mov.w	fp, #1
 80163e4:	f7f8 fbf2 	bl	800ebcc <rcutils_get_error_string>
 80163e8:	f7f8 fc06 	bl	800ebf8 <rcutils_reset_error>
 80163ec:	e7cf      	b.n	801638e <rcl_node_resolve_name+0x13e>
 80163ee:	4651      	mov	r1, sl
 80163f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80163f2:	47c8      	blx	r9
 80163f4:	4651      	mov	r1, sl
 80163f6:	4658      	mov	r0, fp
 80163f8:	47c8      	blx	r9
 80163fa:	e76c      	b.n	80162d6 <rcl_node_resolve_name+0x86>

080163fc <exact_match_lookup>:
 80163fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163fe:	f102 0708 	add.w	r7, r2, #8
 8016402:	460b      	mov	r3, r1
 8016404:	b085      	sub	sp, #20
 8016406:	4614      	mov	r4, r2
 8016408:	4606      	mov	r6, r0
 801640a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801640e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016412:	4618      	mov	r0, r3
 8016414:	4919      	ldr	r1, [pc, #100]	; (801647c <exact_match_lookup+0x80>)
 8016416:	e894 000c 	ldmia.w	r4, {r2, r3}
 801641a:	f002 fca3 	bl	8018d64 <rcutils_join_path>
 801641e:	7833      	ldrb	r3, [r6, #0]
 8016420:	4605      	mov	r5, r0
 8016422:	2b2f      	cmp	r3, #47	; 0x2f
 8016424:	d023      	beq.n	801646e <exact_match_lookup+0x72>
 8016426:	f104 030c 	add.w	r3, r4, #12
 801642a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801642e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016432:	1c70      	adds	r0, r6, #1
 8016434:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016438:	f002 fc9a 	bl	8018d70 <rcutils_to_native_path>
 801643c:	4606      	mov	r6, r0
 801643e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8016442:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016446:	4631      	mov	r1, r6
 8016448:	4628      	mov	r0, r5
 801644a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801644e:	f002 fc89 	bl	8018d64 <rcutils_join_path>
 8016452:	4603      	mov	r3, r0
 8016454:	4630      	mov	r0, r6
 8016456:	6862      	ldr	r2, [r4, #4]
 8016458:	461e      	mov	r6, r3
 801645a:	6921      	ldr	r1, [r4, #16]
 801645c:	4790      	blx	r2
 801645e:	4628      	mov	r0, r5
 8016460:	4635      	mov	r5, r6
 8016462:	6863      	ldr	r3, [r4, #4]
 8016464:	6921      	ldr	r1, [r4, #16]
 8016466:	4798      	blx	r3
 8016468:	4628      	mov	r0, r5
 801646a:	b005      	add	sp, #20
 801646c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801646e:	7873      	ldrb	r3, [r6, #1]
 8016470:	2b00      	cmp	r3, #0
 8016472:	d1d8      	bne.n	8016426 <exact_match_lookup+0x2a>
 8016474:	4628      	mov	r0, r5
 8016476:	b005      	add	sp, #20
 8016478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801647a:	bf00      	nop
 801647c:	08020128 	.word	0x08020128

08016480 <rcl_get_secure_root>:
 8016480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016484:	b085      	sub	sp, #20
 8016486:	b168      	cbz	r0, 80164a4 <rcl_get_secure_root+0x24>
 8016488:	4607      	mov	r7, r0
 801648a:	4608      	mov	r0, r1
 801648c:	460c      	mov	r4, r1
 801648e:	f7f8 fb8f 	bl	800ebb0 <rcutils_allocator_is_valid>
 8016492:	b138      	cbz	r0, 80164a4 <rcl_get_secure_root+0x24>
 8016494:	2300      	movs	r3, #0
 8016496:	482d      	ldr	r0, [pc, #180]	; (801654c <rcl_get_secure_root+0xcc>)
 8016498:	a903      	add	r1, sp, #12
 801649a:	9303      	str	r3, [sp, #12]
 801649c:	f002 fc48 	bl	8018d30 <rcutils_get_env>
 80164a0:	4605      	mov	r5, r0
 80164a2:	b120      	cbz	r0, 80164ae <rcl_get_secure_root+0x2e>
 80164a4:	2500      	movs	r5, #0
 80164a6:	4628      	mov	r0, r5
 80164a8:	b005      	add	sp, #20
 80164aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80164ae:	9b03      	ldr	r3, [sp, #12]
 80164b0:	781a      	ldrb	r2, [r3, #0]
 80164b2:	2a00      	cmp	r2, #0
 80164b4:	d0f6      	beq.n	80164a4 <rcl_get_secure_root+0x24>
 80164b6:	f104 090c 	add.w	r9, r4, #12
 80164ba:	e899 0003 	ldmia.w	r9, {r0, r1}
 80164be:	e88d 0003 	stmia.w	sp, {r0, r1}
 80164c2:	4618      	mov	r0, r3
 80164c4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80164c8:	f002 fd94 	bl	8018ff4 <rcutils_strdup>
 80164cc:	4680      	mov	r8, r0
 80164ce:	2800      	cmp	r0, #0
 80164d0:	d0e8      	beq.n	80164a4 <rcl_get_secure_root+0x24>
 80164d2:	a903      	add	r1, sp, #12
 80164d4:	481e      	ldr	r0, [pc, #120]	; (8016550 <rcl_get_secure_root+0xd0>)
 80164d6:	9503      	str	r5, [sp, #12]
 80164d8:	f002 fc2a 	bl	8018d30 <rcutils_get_env>
 80164dc:	b160      	cbz	r0, 80164f8 <rcl_get_secure_root+0x78>
 80164de:	2600      	movs	r6, #0
 80164e0:	4630      	mov	r0, r6
 80164e2:	6863      	ldr	r3, [r4, #4]
 80164e4:	6921      	ldr	r1, [r4, #16]
 80164e6:	4798      	blx	r3
 80164e8:	4640      	mov	r0, r8
 80164ea:	6863      	ldr	r3, [r4, #4]
 80164ec:	6921      	ldr	r1, [r4, #16]
 80164ee:	4798      	blx	r3
 80164f0:	4628      	mov	r0, r5
 80164f2:	b005      	add	sp, #20
 80164f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80164f8:	9b03      	ldr	r3, [sp, #12]
 80164fa:	781e      	ldrb	r6, [r3, #0]
 80164fc:	b1f6      	cbz	r6, 801653c <rcl_get_secure_root+0xbc>
 80164fe:	e899 0003 	ldmia.w	r9, {r0, r1}
 8016502:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016506:	4618      	mov	r0, r3
 8016508:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801650c:	f002 fd72 	bl	8018ff4 <rcutils_strdup>
 8016510:	4606      	mov	r6, r0
 8016512:	2800      	cmp	r0, #0
 8016514:	d0e3      	beq.n	80164de <rcl_get_secure_root+0x5e>
 8016516:	4622      	mov	r2, r4
 8016518:	4641      	mov	r1, r8
 801651a:	f7ff ff6f 	bl	80163fc <exact_match_lookup>
 801651e:	4605      	mov	r5, r0
 8016520:	2d00      	cmp	r5, #0
 8016522:	d0dd      	beq.n	80164e0 <rcl_get_secure_root+0x60>
 8016524:	4628      	mov	r0, r5
 8016526:	f002 fc1b 	bl	8018d60 <rcutils_is_directory>
 801652a:	4603      	mov	r3, r0
 801652c:	2800      	cmp	r0, #0
 801652e:	d1d7      	bne.n	80164e0 <rcl_get_secure_root+0x60>
 8016530:	4628      	mov	r0, r5
 8016532:	6921      	ldr	r1, [r4, #16]
 8016534:	461d      	mov	r5, r3
 8016536:	6863      	ldr	r3, [r4, #4]
 8016538:	4798      	blx	r3
 801653a:	e7d1      	b.n	80164e0 <rcl_get_secure_root+0x60>
 801653c:	4622      	mov	r2, r4
 801653e:	4638      	mov	r0, r7
 8016540:	4641      	mov	r1, r8
 8016542:	f7ff ff5b 	bl	80163fc <exact_match_lookup>
 8016546:	4605      	mov	r5, r0
 8016548:	e7ea      	b.n	8016520 <rcl_get_secure_root+0xa0>
 801654a:	bf00      	nop
 801654c:	08020134 	.word	0x08020134
 8016550:	0802014c 	.word	0x0802014c

08016554 <rcl_get_security_options_from_environment>:
 8016554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016558:	b082      	sub	sp, #8
 801655a:	2300      	movs	r3, #0
 801655c:	4606      	mov	r6, r0
 801655e:	460f      	mov	r7, r1
 8016560:	4821      	ldr	r0, [pc, #132]	; (80165e8 <rcl_get_security_options_from_environment+0x94>)
 8016562:	a901      	add	r1, sp, #4
 8016564:	4690      	mov	r8, r2
 8016566:	9301      	str	r3, [sp, #4]
 8016568:	f002 fbe2 	bl	8018d30 <rcutils_get_env>
 801656c:	b120      	cbz	r0, 8016578 <rcl_get_security_options_from_environment+0x24>
 801656e:	2501      	movs	r5, #1
 8016570:	4628      	mov	r0, r5
 8016572:	b002      	add	sp, #8
 8016574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016578:	4604      	mov	r4, r0
 801657a:	491c      	ldr	r1, [pc, #112]	; (80165ec <rcl_get_security_options_from_environment+0x98>)
 801657c:	9801      	ldr	r0, [sp, #4]
 801657e:	f7e9 fe5f 	bl	8000240 <strcmp>
 8016582:	4605      	mov	r5, r0
 8016584:	b9f0      	cbnz	r0, 80165c4 <rcl_get_security_options_from_environment+0x70>
 8016586:	9001      	str	r0, [sp, #4]
 8016588:	f1b8 0f00 	cmp.w	r8, #0
 801658c:	d021      	beq.n	80165d2 <rcl_get_security_options_from_environment+0x7e>
 801658e:	a901      	add	r1, sp, #4
 8016590:	4817      	ldr	r0, [pc, #92]	; (80165f0 <rcl_get_security_options_from_environment+0x9c>)
 8016592:	f002 fbcd 	bl	8018d30 <rcutils_get_env>
 8016596:	2800      	cmp	r0, #0
 8016598:	d1e9      	bne.n	801656e <rcl_get_security_options_from_environment+0x1a>
 801659a:	4916      	ldr	r1, [pc, #88]	; (80165f4 <rcl_get_security_options_from_environment+0xa0>)
 801659c:	9801      	ldr	r0, [sp, #4]
 801659e:	f7e9 fe4f 	bl	8000240 <strcmp>
 80165a2:	4603      	mov	r3, r0
 80165a4:	4639      	mov	r1, r7
 80165a6:	4630      	mov	r0, r6
 80165a8:	fab3 f383 	clz	r3, r3
 80165ac:	095b      	lsrs	r3, r3, #5
 80165ae:	f888 3000 	strb.w	r3, [r8]
 80165b2:	f7ff ff65 	bl	8016480 <rcl_get_secure_root>
 80165b6:	b170      	cbz	r0, 80165d6 <rcl_get_security_options_from_environment+0x82>
 80165b8:	f8c8 0004 	str.w	r0, [r8, #4]
 80165bc:	4628      	mov	r0, r5
 80165be:	b002      	add	sp, #8
 80165c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165c4:	4625      	mov	r5, r4
 80165c6:	f888 4000 	strb.w	r4, [r8]
 80165ca:	4628      	mov	r0, r5
 80165cc:	b002      	add	sp, #8
 80165ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165d2:	250b      	movs	r5, #11
 80165d4:	e7cc      	b.n	8016570 <rcl_get_security_options_from_environment+0x1c>
 80165d6:	f898 5000 	ldrb.w	r5, [r8]
 80165da:	f1a5 0501 	sub.w	r5, r5, #1
 80165de:	fab5 f585 	clz	r5, r5
 80165e2:	096d      	lsrs	r5, r5, #5
 80165e4:	e7c4      	b.n	8016570 <rcl_get_security_options_from_environment+0x1c>
 80165e6:	bf00      	nop
 80165e8:	080200ec 	.word	0x080200ec
 80165ec:	08020100 	.word	0x08020100
 80165f0:	08020108 	.word	0x08020108
 80165f4:	08020120 	.word	0x08020120

080165f8 <rcl_get_zero_initialized_service>:
 80165f8:	4b01      	ldr	r3, [pc, #4]	; (8016600 <rcl_get_zero_initialized_service+0x8>)
 80165fa:	6818      	ldr	r0, [r3, #0]
 80165fc:	4770      	bx	lr
 80165fe:	bf00      	nop
 8016600:	0802016c 	.word	0x0802016c

08016604 <rcl_service_init>:
 8016604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016608:	b086      	sub	sp, #24
 801660a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801660c:	2d00      	cmp	r5, #0
 801660e:	d04d      	beq.n	80166ac <rcl_service_init+0xa8>
 8016610:	f105 0950 	add.w	r9, r5, #80	; 0x50
 8016614:	4604      	mov	r4, r0
 8016616:	460e      	mov	r6, r1
 8016618:	4690      	mov	r8, r2
 801661a:	4648      	mov	r0, r9
 801661c:	461f      	mov	r7, r3
 801661e:	f7f8 fac7 	bl	800ebb0 <rcutils_allocator_is_valid>
 8016622:	2c00      	cmp	r4, #0
 8016624:	d042      	beq.n	80166ac <rcl_service_init+0xa8>
 8016626:	f080 0001 	eor.w	r0, r0, #1
 801662a:	b2c0      	uxtb	r0, r0
 801662c:	2800      	cmp	r0, #0
 801662e:	d13d      	bne.n	80166ac <rcl_service_init+0xa8>
 8016630:	4630      	mov	r0, r6
 8016632:	f7ff fd95 	bl	8016160 <rcl_node_is_valid>
 8016636:	2800      	cmp	r0, #0
 8016638:	d042      	beq.n	80166c0 <rcl_service_init+0xbc>
 801663a:	2f00      	cmp	r7, #0
 801663c:	d036      	beq.n	80166ac <rcl_service_init+0xa8>
 801663e:	f1b8 0f00 	cmp.w	r8, #0
 8016642:	d033      	beq.n	80166ac <rcl_service_init+0xa8>
 8016644:	f8d4 a000 	ldr.w	sl, [r4]
 8016648:	f1ba 0f00 	cmp.w	sl, #0
 801664c:	d133      	bne.n	80166b6 <rcl_service_init+0xb2>
 801664e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8016652:	2001      	movs	r0, #1
 8016654:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	; 0x5c
 8016658:	4798      	blx	r3
 801665a:	6020      	str	r0, [r4, #0]
 801665c:	2800      	cmp	r0, #0
 801665e:	d075      	beq.n	801674c <rcl_service_init+0x148>
 8016660:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8016664:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8016668:	2201      	movs	r2, #1
 801666a:	f8cd a010 	str.w	sl, [sp, #16]
 801666e:	9005      	str	r0, [sp, #20]
 8016670:	9203      	str	r2, [sp, #12]
 8016672:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016676:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801667a:	4639      	mov	r1, r7
 801667c:	4630      	mov	r0, r6
 801667e:	e899 000c 	ldmia.w	r9, {r2, r3}
 8016682:	f7ff fde5 	bl	8016250 <rcl_node_resolve_name>
 8016686:	4607      	mov	r7, r0
 8016688:	b1f8      	cbz	r0, 80166ca <rcl_service_init+0xc6>
 801668a:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 801668e:	6820      	ldr	r0, [r4, #0]
 8016690:	2b01      	cmp	r3, #1
 8016692:	d943      	bls.n	801671c <rcl_service_init+0x118>
 8016694:	2f0a      	cmp	r7, #10
 8016696:	d000      	beq.n	801669a <rcl_service_init+0x96>
 8016698:	2701      	movs	r7, #1
 801669a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 801669c:	6e29      	ldr	r1, [r5, #96]	; 0x60
 801669e:	4798      	blx	r3
 80166a0:	2300      	movs	r3, #0
 80166a2:	4638      	mov	r0, r7
 80166a4:	6023      	str	r3, [r4, #0]
 80166a6:	b006      	add	sp, #24
 80166a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166ac:	270b      	movs	r7, #11
 80166ae:	4638      	mov	r0, r7
 80166b0:	b006      	add	sp, #24
 80166b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166b6:	2764      	movs	r7, #100	; 0x64
 80166b8:	4638      	mov	r0, r7
 80166ba:	b006      	add	sp, #24
 80166bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166c0:	27c8      	movs	r7, #200	; 0xc8
 80166c2:	4638      	mov	r0, r7
 80166c4:	b006      	add	sp, #24
 80166c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166ca:	4630      	mov	r0, r6
 80166cc:	f7ff fd6a 	bl	80161a4 <rcl_node_get_rmw_handle>
 80166d0:	6827      	ldr	r7, [r4, #0]
 80166d2:	4641      	mov	r1, r8
 80166d4:	462b      	mov	r3, r5
 80166d6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80166da:	f003 fd9f 	bl	801a21c <rmw_create_service>
 80166de:	6821      	ldr	r1, [r4, #0]
 80166e0:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 80166e4:	f8d1 0108 	ldr.w	r0, [r1, #264]	; 0x108
 80166e8:	b390      	cbz	r0, 8016750 <rcl_service_init+0x14c>
 80166ea:	3168      	adds	r1, #104	; 0x68
 80166ec:	f003 fec8 	bl	801a480 <rmw_service_request_subscription_get_actual_qos>
 80166f0:	b9b0      	cbnz	r0, 8016720 <rcl_service_init+0x11c>
 80166f2:	6823      	ldr	r3, [r4, #0]
 80166f4:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 80166f8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80166fc:	f003 feac 	bl	801a458 <rmw_service_response_publisher_get_actual_qos>
 8016700:	4607      	mov	r7, r0
 8016702:	b968      	cbnz	r0, 8016720 <rcl_service_init+0x11c>
 8016704:	6820      	ldr	r0, [r4, #0]
 8016706:	2268      	movs	r2, #104	; 0x68
 8016708:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 801670c:	4629      	mov	r1, r5
 801670e:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 8016712:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
 8016716:	f007 fb2e 	bl	801dd76 <memcpy>
 801671a:	e7c8      	b.n	80166ae <rcl_service_init+0xaa>
 801671c:	2768      	movs	r7, #104	; 0x68
 801671e:	e7bc      	b.n	801669a <rcl_service_init+0x96>
 8016720:	f7ff f904 	bl	801592c <rcl_convert_rmw_ret_to_rcl_ret>
 8016724:	4607      	mov	r7, r0
 8016726:	4630      	mov	r0, r6
 8016728:	f7ff fd3c 	bl	80161a4 <rcl_node_get_rmw_handle>
 801672c:	6823      	ldr	r3, [r4, #0]
 801672e:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8016732:	f003 fe4d 	bl	801a3d0 <rmw_destroy_service>
 8016736:	6821      	ldr	r1, [r4, #0]
 8016738:	f8d1 0110 	ldr.w	r0, [r1, #272]	; 0x110
 801673c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 801673e:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8016740:	4798      	blx	r3
 8016742:	6820      	ldr	r0, [r4, #0]
 8016744:	2300      	movs	r3, #0
 8016746:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 801674a:	e7a6      	b.n	801669a <rcl_service_init+0x96>
 801674c:	270a      	movs	r7, #10
 801674e:	e7ae      	b.n	80166ae <rcl_service_init+0xaa>
 8016750:	2701      	movs	r7, #1
 8016752:	e7f1      	b.n	8016738 <rcl_service_init+0x134>

08016754 <rcl_service_get_default_options>:
 8016754:	b530      	push	{r4, r5, lr}
 8016756:	4d0f      	ldr	r5, [pc, #60]	; (8016794 <rcl_service_get_default_options+0x40>)
 8016758:	b087      	sub	sp, #28
 801675a:	4604      	mov	r4, r0
 801675c:	2250      	movs	r2, #80	; 0x50
 801675e:	490e      	ldr	r1, [pc, #56]	; (8016798 <rcl_service_get_default_options+0x44>)
 8016760:	4628      	mov	r0, r5
 8016762:	f007 fb08 	bl	801dd76 <memcpy>
 8016766:	4668      	mov	r0, sp
 8016768:	f7f8 fa14 	bl	800eb94 <rcutils_get_default_allocator>
 801676c:	46ec      	mov	ip, sp
 801676e:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8016772:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016776:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801677a:	f8dc 3000 	ldr.w	r3, [ip]
 801677e:	2268      	movs	r2, #104	; 0x68
 8016780:	4629      	mov	r1, r5
 8016782:	4620      	mov	r0, r4
 8016784:	f8ce 3000 	str.w	r3, [lr]
 8016788:	f007 faf5 	bl	801dd76 <memcpy>
 801678c:	4620      	mov	r0, r4
 801678e:	b007      	add	sp, #28
 8016790:	bd30      	pop	{r4, r5, pc}
 8016792:	bf00      	nop
 8016794:	20010988 	.word	0x20010988
 8016798:	08020170 	.word	0x08020170

0801679c <rcl_service_get_rmw_handle>:
 801679c:	b118      	cbz	r0, 80167a6 <rcl_service_get_rmw_handle+0xa>
 801679e:	6800      	ldr	r0, [r0, #0]
 80167a0:	b108      	cbz	r0, 80167a6 <rcl_service_get_rmw_handle+0xa>
 80167a2:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 80167a6:	4770      	bx	lr

080167a8 <rcl_take_request>:
 80167a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80167aa:	468e      	mov	lr, r1
 80167ac:	b091      	sub	sp, #68	; 0x44
 80167ae:	460c      	mov	r4, r1
 80167b0:	4617      	mov	r7, r2
 80167b2:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 80167b6:	4605      	mov	r5, r0
 80167b8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80167bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80167c0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80167c4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80167c8:	b30d      	cbz	r5, 801680e <rcl_take_request+0x66>
 80167ca:	682b      	ldr	r3, [r5, #0]
 80167cc:	b1fb      	cbz	r3, 801680e <rcl_take_request+0x66>
 80167ce:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80167d2:	b1e0      	cbz	r0, 801680e <rcl_take_request+0x66>
 80167d4:	b397      	cbz	r7, 801683c <rcl_take_request+0x94>
 80167d6:	2300      	movs	r3, #0
 80167d8:	463a      	mov	r2, r7
 80167da:	a906      	add	r1, sp, #24
 80167dc:	f88d 3017 	strb.w	r3, [sp, #23]
 80167e0:	f10d 0317 	add.w	r3, sp, #23
 80167e4:	f003 fc18 	bl	801a018 <rmw_take_request>
 80167e8:	4606      	mov	r6, r0
 80167ea:	b198      	cbz	r0, 8016814 <rcl_take_request+0x6c>
 80167ec:	280a      	cmp	r0, #10
 80167ee:	bf18      	it	ne
 80167f0:	2601      	movne	r6, #1
 80167f2:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 80167f6:	46a6      	mov	lr, r4
 80167f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80167fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016800:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8016804:	e88e 0003 	stmia.w	lr, {r0, r1}
 8016808:	4630      	mov	r0, r6
 801680a:	b011      	add	sp, #68	; 0x44
 801680c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801680e:	f44f 7616 	mov.w	r6, #600	; 0x258
 8016812:	e7ee      	b.n	80167f2 <rcl_take_request+0x4a>
 8016814:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8016818:	b193      	cbz	r3, 8016840 <rcl_take_request+0x98>
 801681a:	682b      	ldr	r3, [r5, #0]
 801681c:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 8016820:	2800      	cmp	r0, #0
 8016822:	d0e6      	beq.n	80167f2 <rcl_take_request+0x4a>
 8016824:	463a      	mov	r2, r7
 8016826:	ab0a      	add	r3, sp, #40	; 0x28
 8016828:	2101      	movs	r1, #1
 801682a:	9302      	str	r3, [sp, #8]
 801682c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8016830:	e9cd 6700 	strd	r6, r7, [sp]
 8016834:	f000 f844 	bl	80168c0 <rcl_send_service_event_message>
 8016838:	4606      	mov	r6, r0
 801683a:	e7da      	b.n	80167f2 <rcl_take_request+0x4a>
 801683c:	260b      	movs	r6, #11
 801683e:	e7d8      	b.n	80167f2 <rcl_take_request+0x4a>
 8016840:	f240 2659 	movw	r6, #601	; 0x259
 8016844:	e7d5      	b.n	80167f2 <rcl_take_request+0x4a>
 8016846:	bf00      	nop

08016848 <rcl_send_response>:
 8016848:	b350      	cbz	r0, 80168a0 <rcl_send_response+0x58>
 801684a:	6803      	ldr	r3, [r0, #0]
 801684c:	b570      	push	{r4, r5, r6, lr}
 801684e:	4604      	mov	r4, r0
 8016850:	b084      	sub	sp, #16
 8016852:	b1cb      	cbz	r3, 8016888 <rcl_send_response+0x40>
 8016854:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8016858:	b1b0      	cbz	r0, 8016888 <rcl_send_response+0x40>
 801685a:	4615      	mov	r5, r2
 801685c:	b1ea      	cbz	r2, 801689a <rcl_send_response+0x52>
 801685e:	460e      	mov	r6, r1
 8016860:	b1d9      	cbz	r1, 801689a <rcl_send_response+0x52>
 8016862:	f003 fc37 	bl	801a0d4 <rmw_send_response>
 8016866:	b998      	cbnz	r0, 8016890 <rcl_send_response+0x48>
 8016868:	6823      	ldr	r3, [r4, #0]
 801686a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 801686e:	b16b      	cbz	r3, 801688c <rcl_send_response+0x44>
 8016870:	462a      	mov	r2, r5
 8016872:	2102      	movs	r1, #2
 8016874:	4618      	mov	r0, r3
 8016876:	ed96 7b04 	vldr	d7, [r6, #16]
 801687a:	9602      	str	r6, [sp, #8]
 801687c:	ed8d 7b00 	vstr	d7, [sp]
 8016880:	f000 f81e 	bl	80168c0 <rcl_send_service_event_message>
 8016884:	b004      	add	sp, #16
 8016886:	bd70      	pop	{r4, r5, r6, pc}
 8016888:	f44f 7016 	mov.w	r0, #600	; 0x258
 801688c:	b004      	add	sp, #16
 801688e:	bd70      	pop	{r4, r5, r6, pc}
 8016890:	2802      	cmp	r0, #2
 8016892:	bf18      	it	ne
 8016894:	2001      	movne	r0, #1
 8016896:	b004      	add	sp, #16
 8016898:	bd70      	pop	{r4, r5, r6, pc}
 801689a:	200b      	movs	r0, #11
 801689c:	b004      	add	sp, #16
 801689e:	bd70      	pop	{r4, r5, r6, pc}
 80168a0:	f44f 7016 	mov.w	r0, #600	; 0x258
 80168a4:	4770      	bx	lr
 80168a6:	bf00      	nop

080168a8 <rcl_service_is_valid>:
 80168a8:	b130      	cbz	r0, 80168b8 <rcl_service_is_valid+0x10>
 80168aa:	6800      	ldr	r0, [r0, #0]
 80168ac:	b120      	cbz	r0, 80168b8 <rcl_service_is_valid+0x10>
 80168ae:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 80168b2:	3800      	subs	r0, #0
 80168b4:	bf18      	it	ne
 80168b6:	2001      	movne	r0, #1
 80168b8:	4770      	bx	lr
 80168ba:	bf00      	nop
 80168bc:	0000      	movs	r0, r0
	...

080168c0 <rcl_send_service_event_message>:
 80168c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80168c4:	b093      	sub	sp, #76	; 0x4c
 80168c6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80168c8:	b196      	cbz	r6, 80168f0 <rcl_send_service_event_message+0x30>
 80168ca:	4615      	mov	r5, r2
 80168cc:	b182      	cbz	r2, 80168f0 <rcl_send_service_event_message+0x30>
 80168ce:	4604      	mov	r4, r0
 80168d0:	b148      	cbz	r0, 80168e6 <rcl_send_service_event_message+0x26>
 80168d2:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80168d6:	b133      	cbz	r3, 80168e6 <rcl_send_service_event_message+0x26>
 80168d8:	68c0      	ldr	r0, [r0, #12]
 80168da:	460f      	mov	r7, r1
 80168dc:	f000 f9f2 	bl	8016cc4 <rcl_clock_valid>
 80168e0:	b108      	cbz	r0, 80168e6 <rcl_send_service_event_message+0x26>
 80168e2:	7a23      	ldrb	r3, [r4, #8]
 80168e4:	b94b      	cbnz	r3, 80168fa <rcl_send_service_event_message+0x3a>
 80168e6:	2401      	movs	r4, #1
 80168e8:	4620      	mov	r0, r4
 80168ea:	b013      	add	sp, #76	; 0x4c
 80168ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80168f0:	240b      	movs	r4, #11
 80168f2:	4620      	mov	r0, r4
 80168f4:	b013      	add	sp, #76	; 0x4c
 80168f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80168fa:	f104 0e60 	add.w	lr, r4, #96	; 0x60
 80168fe:	f10d 0c0c 	add.w	ip, sp, #12
 8016902:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016906:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801690a:	f8de 3000 	ldr.w	r3, [lr]
 801690e:	a803      	add	r0, sp, #12
 8016910:	f8cc 3000 	str.w	r3, [ip]
 8016914:	f7f8 f94c 	bl	800ebb0 <rcutils_allocator_is_valid>
 8016918:	2800      	cmp	r0, #0
 801691a:	d0e9      	beq.n	80168f0 <rcl_send_service_event_message+0x30>
 801691c:	6820      	ldr	r0, [r4, #0]
 801691e:	f7f7 f8cd 	bl	800dabc <rcl_publisher_is_valid>
 8016922:	2800      	cmp	r0, #0
 8016924:	d05e      	beq.n	80169e4 <rcl_send_service_event_message+0x124>
 8016926:	4669      	mov	r1, sp
 8016928:	68e0      	ldr	r0, [r4, #12]
 801692a:	f000 fa5d 	bl	8016de8 <rcl_clock_get_now>
 801692e:	4601      	mov	r1, r0
 8016930:	2800      	cmp	r0, #0
 8016932:	d146      	bne.n	80169c2 <rcl_send_service_event_message+0x102>
 8016934:	2220      	movs	r2, #32
 8016936:	eb0d 0002 	add.w	r0, sp, r2
 801693a:	f007 f8eb 	bl	801db14 <memset>
 801693e:	f88d 7020 	strb.w	r7, [sp, #32]
 8016942:	e9dd 8900 	ldrd	r8, r9, [sp]
 8016946:	a32a      	add	r3, pc, #168	; (adr r3, 80169f0 <rcl_send_service_event_message+0x130>)
 8016948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801694c:	4640      	mov	r0, r8
 801694e:	4649      	mov	r1, r9
 8016950:	f7e9 fcde 	bl	8000310 <__aeabi_ldivmod>
 8016954:	4649      	mov	r1, r9
 8016956:	9009      	str	r0, [sp, #36]	; 0x24
 8016958:	4640      	mov	r0, r8
 801695a:	a325      	add	r3, pc, #148	; (adr r3, 80169f0 <rcl_send_service_event_message+0x130>)
 801695c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016960:	f7e9 fcd6 	bl	8000310 <__aeabi_ldivmod>
 8016964:	920a      	str	r2, [sp, #40]	; 0x28
 8016966:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 801696a:	6830      	ldr	r0, [r6, #0]
 801696c:	6871      	ldr	r1, [r6, #4]
 801696e:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8016972:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8016976:	7a23      	ldrb	r3, [r4, #8]
 8016978:	68b2      	ldr	r2, [r6, #8]
 801697a:	2b01      	cmp	r3, #1
 801697c:	68f3      	ldr	r3, [r6, #12]
 801697e:	bf08      	it	eq
 8016980:	2500      	moveq	r5, #0
 8016982:	2f01      	cmp	r7, #1
 8016984:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016988:	d81f      	bhi.n	80169ca <rcl_send_service_event_message+0x10a>
 801698a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 801698e:	462a      	mov	r2, r5
 8016990:	a808      	add	r0, sp, #32
 8016992:	a903      	add	r1, sp, #12
 8016994:	699d      	ldr	r5, [r3, #24]
 8016996:	2300      	movs	r3, #0
 8016998:	47a8      	blx	r5
 801699a:	4605      	mov	r5, r0
 801699c:	2d00      	cmp	r5, #0
 801699e:	d0a2      	beq.n	80168e6 <rcl_send_service_event_message+0x26>
 80169a0:	4629      	mov	r1, r5
 80169a2:	6820      	ldr	r0, [r4, #0]
 80169a4:	2200      	movs	r2, #0
 80169a6:	f7f7 f865 	bl	800da74 <rcl_publish>
 80169aa:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80169ae:	4604      	mov	r4, r0
 80169b0:	a903      	add	r1, sp, #12
 80169b2:	4628      	mov	r0, r5
 80169b4:	69db      	ldr	r3, [r3, #28]
 80169b6:	4798      	blx	r3
 80169b8:	2c00      	cmp	r4, #0
 80169ba:	d095      	beq.n	80168e8 <rcl_send_service_event_message+0x28>
 80169bc:	f7f8 f91c 	bl	800ebf8 <rcutils_reset_error>
 80169c0:	e792      	b.n	80168e8 <rcl_send_service_event_message+0x28>
 80169c2:	2401      	movs	r4, #1
 80169c4:	f7f8 f918 	bl	800ebf8 <rcutils_reset_error>
 80169c8:	e78e      	b.n	80168e8 <rcl_send_service_event_message+0x28>
 80169ca:	1eb9      	subs	r1, r7, #2
 80169cc:	2901      	cmp	r1, #1
 80169ce:	d8f8      	bhi.n	80169c2 <rcl_send_service_event_message+0x102>
 80169d0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80169d4:	462b      	mov	r3, r5
 80169d6:	a808      	add	r0, sp, #32
 80169d8:	a903      	add	r1, sp, #12
 80169da:	6995      	ldr	r5, [r2, #24]
 80169dc:	2200      	movs	r2, #0
 80169de:	47a8      	blx	r5
 80169e0:	4605      	mov	r5, r0
 80169e2:	e7db      	b.n	801699c <rcl_send_service_event_message+0xdc>
 80169e4:	f44f 7496 	mov.w	r4, #300	; 0x12c
 80169e8:	e77e      	b.n	80168e8 <rcl_send_service_event_message+0x28>
 80169ea:	bf00      	nop
 80169ec:	f3af 8000 	nop.w
 80169f0:	3b9aca00 	.word	0x3b9aca00
 80169f4:	00000000 	.word	0x00000000

080169f8 <rcl_get_zero_initialized_subscription>:
 80169f8:	4b01      	ldr	r3, [pc, #4]	; (8016a00 <rcl_get_zero_initialized_subscription+0x8>)
 80169fa:	6818      	ldr	r0, [r3, #0]
 80169fc:	4770      	bx	lr
 80169fe:	bf00      	nop
 8016a00:	080201c0 	.word	0x080201c0

08016a04 <rcl_subscription_init>:
 8016a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a08:	b088      	sub	sp, #32
 8016a0a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8016a0c:	b1ff      	cbz	r7, 8016a4e <rcl_subscription_init+0x4a>
 8016a0e:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 8016a12:	4605      	mov	r5, r0
 8016a14:	460e      	mov	r6, r1
 8016a16:	4691      	mov	r9, r2
 8016a18:	4650      	mov	r0, sl
 8016a1a:	4698      	mov	r8, r3
 8016a1c:	f7f8 f8c8 	bl	800ebb0 <rcutils_allocator_is_valid>
 8016a20:	f080 0401 	eor.w	r4, r0, #1
 8016a24:	b2e4      	uxtb	r4, r4
 8016a26:	b994      	cbnz	r4, 8016a4e <rcl_subscription_init+0x4a>
 8016a28:	b18d      	cbz	r5, 8016a4e <rcl_subscription_init+0x4a>
 8016a2a:	4630      	mov	r0, r6
 8016a2c:	f7ff fb98 	bl	8016160 <rcl_node_is_valid>
 8016a30:	2800      	cmp	r0, #0
 8016a32:	d055      	beq.n	8016ae0 <rcl_subscription_init+0xdc>
 8016a34:	f1b9 0f00 	cmp.w	r9, #0
 8016a38:	d009      	beq.n	8016a4e <rcl_subscription_init+0x4a>
 8016a3a:	f1b8 0f00 	cmp.w	r8, #0
 8016a3e:	d006      	beq.n	8016a4e <rcl_subscription_init+0x4a>
 8016a40:	682b      	ldr	r3, [r5, #0]
 8016a42:	b14b      	cbz	r3, 8016a58 <rcl_subscription_init+0x54>
 8016a44:	2464      	movs	r4, #100	; 0x64
 8016a46:	4620      	mov	r0, r4
 8016a48:	b008      	add	sp, #32
 8016a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a4e:	240b      	movs	r4, #11
 8016a50:	4620      	mov	r0, r4
 8016a52:	b008      	add	sp, #32
 8016a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a58:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8016a5c:	aa07      	add	r2, sp, #28
 8016a5e:	9307      	str	r3, [sp, #28]
 8016a60:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8016a64:	9205      	str	r2, [sp, #20]
 8016a66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016a6a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016a6e:	4641      	mov	r1, r8
 8016a70:	4630      	mov	r0, r6
 8016a72:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8016a76:	f7ff fbeb 	bl	8016250 <rcl_node_resolve_name>
 8016a7a:	2800      	cmp	r0, #0
 8016a7c:	d15f      	bne.n	8016b3e <rcl_subscription_init+0x13a>
 8016a7e:	21d0      	movs	r1, #208	; 0xd0
 8016a80:	2001      	movs	r0, #1
 8016a82:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	; 0x5c
 8016a86:	4798      	blx	r3
 8016a88:	6028      	str	r0, [r5, #0]
 8016a8a:	2800      	cmp	r0, #0
 8016a8c:	d05f      	beq.n	8016b4e <rcl_subscription_init+0x14a>
 8016a8e:	4630      	mov	r0, r6
 8016a90:	f7ff fb88 	bl	80161a4 <rcl_node_get_rmw_handle>
 8016a94:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016a98:	4649      	mov	r1, r9
 8016a9a:	9a07      	ldr	r2, [sp, #28]
 8016a9c:	9300      	str	r3, [sp, #0]
 8016a9e:	463b      	mov	r3, r7
 8016aa0:	682c      	ldr	r4, [r5, #0]
 8016aa2:	f003 fd01 	bl	801a4a8 <rmw_create_subscription>
 8016aa6:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
 8016aaa:	682c      	ldr	r4, [r5, #0]
 8016aac:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
 8016ab0:	b348      	cbz	r0, 8016b06 <rcl_subscription_init+0x102>
 8016ab2:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8016ab6:	f003 fded 	bl	801a694 <rmw_subscription_get_actual_qos>
 8016aba:	4604      	mov	r4, r0
 8016abc:	b9a8      	cbnz	r0, 8016aea <rcl_subscription_init+0xe6>
 8016abe:	6828      	ldr	r0, [r5, #0]
 8016ac0:	2278      	movs	r2, #120	; 0x78
 8016ac2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8016ac6:	4639      	mov	r1, r7
 8016ac8:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
 8016acc:	f007 f953 	bl	801dd76 <memcpy>
 8016ad0:	9807      	ldr	r0, [sp, #28]
 8016ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016ad4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8016ad6:	4798      	blx	r3
 8016ad8:	4620      	mov	r0, r4
 8016ada:	b008      	add	sp, #32
 8016adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ae0:	24c8      	movs	r4, #200	; 0xc8
 8016ae2:	4620      	mov	r0, r4
 8016ae4:	b008      	add	sp, #32
 8016ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016aea:	682c      	ldr	r4, [r5, #0]
 8016aec:	b36c      	cbz	r4, 8016b4a <rcl_subscription_init+0x146>
 8016aee:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8016af2:	b14b      	cbz	r3, 8016b08 <rcl_subscription_init+0x104>
 8016af4:	4630      	mov	r0, r6
 8016af6:	f7ff fb55 	bl	80161a4 <rcl_node_get_rmw_handle>
 8016afa:	682b      	ldr	r3, [r5, #0]
 8016afc:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
 8016b00:	f003 fddc 	bl	801a6bc <rmw_destroy_subscription>
 8016b04:	682c      	ldr	r4, [r5, #0]
 8016b06:	b194      	cbz	r4, 8016b2e <rcl_subscription_init+0x12a>
 8016b08:	f104 0650 	add.w	r6, r4, #80	; 0x50
 8016b0c:	4630      	mov	r0, r6
 8016b0e:	f7f8 f84f 	bl	800ebb0 <rcutils_allocator_is_valid>
 8016b12:	b158      	cbz	r0, 8016b2c <rcl_subscription_init+0x128>
 8016b14:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8016b16:	b148      	cbz	r0, 8016b2c <rcl_subscription_init+0x128>
 8016b18:	4631      	mov	r1, r6
 8016b1a:	f002 fbe5 	bl	80192e8 <rmw_subscription_content_filter_options_fini>
 8016b1e:	4606      	mov	r6, r0
 8016b20:	b9c8      	cbnz	r0, 8016b56 <rcl_subscription_init+0x152>
 8016b22:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8016b24:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8016b26:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8016b28:	4798      	blx	r3
 8016b2a:	66e6      	str	r6, [r4, #108]	; 0x6c
 8016b2c:	682c      	ldr	r4, [r5, #0]
 8016b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016b30:	4620      	mov	r0, r4
 8016b32:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8016b34:	2401      	movs	r4, #1
 8016b36:	4798      	blx	r3
 8016b38:	2300      	movs	r3, #0
 8016b3a:	602b      	str	r3, [r5, #0]
 8016b3c:	e7c8      	b.n	8016ad0 <rcl_subscription_init+0xcc>
 8016b3e:	2867      	cmp	r0, #103	; 0x67
 8016b40:	d007      	beq.n	8016b52 <rcl_subscription_init+0x14e>
 8016b42:	2869      	cmp	r0, #105	; 0x69
 8016b44:	d005      	beq.n	8016b52 <rcl_subscription_init+0x14e>
 8016b46:	280a      	cmp	r0, #10
 8016b48:	d001      	beq.n	8016b4e <rcl_subscription_init+0x14a>
 8016b4a:	2401      	movs	r4, #1
 8016b4c:	e7c0      	b.n	8016ad0 <rcl_subscription_init+0xcc>
 8016b4e:	240a      	movs	r4, #10
 8016b50:	e7be      	b.n	8016ad0 <rcl_subscription_init+0xcc>
 8016b52:	2467      	movs	r4, #103	; 0x67
 8016b54:	e7bc      	b.n	8016ad0 <rcl_subscription_init+0xcc>
 8016b56:	f7fe fee9 	bl	801592c <rcl_convert_rmw_ret_to_rcl_ret>
 8016b5a:	682c      	ldr	r4, [r5, #0]
 8016b5c:	e7e7      	b.n	8016b2e <rcl_subscription_init+0x12a>
 8016b5e:	bf00      	nop

08016b60 <rcl_subscription_get_default_options>:
 8016b60:	b570      	push	{r4, r5, r6, lr}
 8016b62:	4c16      	ldr	r4, [pc, #88]	; (8016bbc <rcl_subscription_get_default_options+0x5c>)
 8016b64:	b08a      	sub	sp, #40	; 0x28
 8016b66:	4605      	mov	r5, r0
 8016b68:	2250      	movs	r2, #80	; 0x50
 8016b6a:	4915      	ldr	r1, [pc, #84]	; (8016bc0 <rcl_subscription_get_default_options+0x60>)
 8016b6c:	4620      	mov	r0, r4
 8016b6e:	f007 f902 	bl	801dd76 <memcpy>
 8016b72:	a804      	add	r0, sp, #16
 8016b74:	f7f8 f80e 	bl	800eb94 <rcutils_get_default_allocator>
 8016b78:	f10d 0c10 	add.w	ip, sp, #16
 8016b7c:	f104 0e50 	add.w	lr, r4, #80	; 0x50
 8016b80:	466e      	mov	r6, sp
 8016b82:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016b86:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016b8a:	f8dc 3000 	ldr.w	r3, [ip]
 8016b8e:	4630      	mov	r0, r6
 8016b90:	f8ce 3000 	str.w	r3, [lr]
 8016b94:	f002 fbc2 	bl	801931c <rmw_get_default_subscription_options>
 8016b98:	f104 0364 	add.w	r3, r4, #100	; 0x64
 8016b9c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8016ba0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016ba4:	2301      	movs	r3, #1
 8016ba6:	2278      	movs	r2, #120	; 0x78
 8016ba8:	4621      	mov	r1, r4
 8016baa:	4628      	mov	r0, r5
 8016bac:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8016bb0:	f007 f8e1 	bl	801dd76 <memcpy>
 8016bb4:	4628      	mov	r0, r5
 8016bb6:	b00a      	add	sp, #40	; 0x28
 8016bb8:	bd70      	pop	{r4, r5, r6, pc}
 8016bba:	bf00      	nop
 8016bbc:	200109f0 	.word	0x200109f0
 8016bc0:	080201c8 	.word	0x080201c8

08016bc4 <rcl_take>:
 8016bc4:	2800      	cmp	r0, #0
 8016bc6:	d049      	beq.n	8016c5c <rcl_take+0x98>
 8016bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bcc:	4615      	mov	r5, r2
 8016bce:	6802      	ldr	r2, [r0, #0]
 8016bd0:	b0a0      	sub	sp, #128	; 0x80
 8016bd2:	4604      	mov	r4, r0
 8016bd4:	2a00      	cmp	r2, #0
 8016bd6:	d039      	beq.n	8016c4c <rcl_take+0x88>
 8016bd8:	461f      	mov	r7, r3
 8016bda:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8016bde:	b3ab      	cbz	r3, 8016c4c <rcl_take+0x88>
 8016be0:	460e      	mov	r6, r1
 8016be2:	2900      	cmp	r1, #0
 8016be4:	d038      	beq.n	8016c58 <rcl_take+0x94>
 8016be6:	2d00      	cmp	r5, #0
 8016be8:	d03c      	beq.n	8016c64 <rcl_take+0xa0>
 8016bea:	a802      	add	r0, sp, #8
 8016bec:	f002 fc24 	bl	8019438 <rmw_get_zero_initialized_message_info>
 8016bf0:	6823      	ldr	r3, [r4, #0]
 8016bf2:	f10d 0c08 	add.w	ip, sp, #8
 8016bf6:	46ae      	mov	lr, r5
 8016bf8:	f8d3 80c8 	ldr.w	r8, [r3, #200]	; 0xc8
 8016bfc:	2400      	movs	r4, #0
 8016bfe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016c02:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016c06:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016c0a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016c0e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016c12:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016c16:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8016c1a:	462b      	mov	r3, r5
 8016c1c:	f10d 0247 	add.w	r2, sp, #71	; 0x47
 8016c20:	f88d 4047 	strb.w	r4, [sp, #71]	; 0x47
 8016c24:	e88e 0003 	stmia.w	lr, {r0, r1}
 8016c28:	4631      	mov	r1, r6
 8016c2a:	4640      	mov	r0, r8
 8016c2c:	9700      	str	r7, [sp, #0]
 8016c2e:	f003 fda7 	bl	801a780 <rmw_take_with_info>
 8016c32:	4603      	mov	r3, r0
 8016c34:	b9c0      	cbnz	r0, 8016c68 <rcl_take+0xa4>
 8016c36:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
 8016c3a:	f240 1291 	movw	r2, #401	; 0x191
 8016c3e:	2900      	cmp	r1, #0
 8016c40:	bf08      	it	eq
 8016c42:	4613      	moveq	r3, r2
 8016c44:	4618      	mov	r0, r3
 8016c46:	b020      	add	sp, #128	; 0x80
 8016c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c4c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8016c50:	4618      	mov	r0, r3
 8016c52:	b020      	add	sp, #128	; 0x80
 8016c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c58:	230b      	movs	r3, #11
 8016c5a:	e7f3      	b.n	8016c44 <rcl_take+0x80>
 8016c5c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8016c60:	4618      	mov	r0, r3
 8016c62:	4770      	bx	lr
 8016c64:	ad12      	add	r5, sp, #72	; 0x48
 8016c66:	e7c0      	b.n	8016bea <rcl_take+0x26>
 8016c68:	f7fe fe60 	bl	801592c <rcl_convert_rmw_ret_to_rcl_ret>
 8016c6c:	4603      	mov	r3, r0
 8016c6e:	e7e9      	b.n	8016c44 <rcl_take+0x80>

08016c70 <rcl_subscription_get_rmw_handle>:
 8016c70:	b118      	cbz	r0, 8016c7a <rcl_subscription_get_rmw_handle+0xa>
 8016c72:	6800      	ldr	r0, [r0, #0]
 8016c74:	b108      	cbz	r0, 8016c7a <rcl_subscription_get_rmw_handle+0xa>
 8016c76:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 8016c7a:	4770      	bx	lr

08016c7c <rcl_subscription_is_valid>:
 8016c7c:	b130      	cbz	r0, 8016c8c <rcl_subscription_is_valid+0x10>
 8016c7e:	6800      	ldr	r0, [r0, #0]
 8016c80:	b120      	cbz	r0, 8016c8c <rcl_subscription_is_valid+0x10>
 8016c82:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 8016c86:	3800      	subs	r0, #0
 8016c88:	bf18      	it	ne
 8016c8a:	2001      	movne	r0, #1
 8016c8c:	4770      	bx	lr
 8016c8e:	bf00      	nop

08016c90 <rcl_get_system_time>:
 8016c90:	4608      	mov	r0, r1
 8016c92:	f7f7 bfcd 	b.w	800ec30 <rcutils_system_time_now>
 8016c96:	bf00      	nop

08016c98 <rcl_get_steady_time>:
 8016c98:	4608      	mov	r0, r1
 8016c9a:	f7f7 bff1 	b.w	800ec80 <rcutils_steady_time_now>
 8016c9e:	bf00      	nop

08016ca0 <rcl_get_ros_time>:
 8016ca0:	7a03      	ldrb	r3, [r0, #8]
 8016ca2:	b510      	push	{r4, lr}
 8016ca4:	460c      	mov	r4, r1
 8016ca6:	b143      	cbz	r3, 8016cba <rcl_get_ros_time+0x1a>
 8016ca8:	2105      	movs	r1, #5
 8016caa:	f001 ff9d 	bl	8018be8 <__atomic_load_8>
 8016cae:	4602      	mov	r2, r0
 8016cb0:	460b      	mov	r3, r1
 8016cb2:	2000      	movs	r0, #0
 8016cb4:	e9c4 2300 	strd	r2, r3, [r4]
 8016cb8:	bd10      	pop	{r4, pc}
 8016cba:	4608      	mov	r0, r1
 8016cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016cc0:	f7f7 bfb6 	b.w	800ec30 <rcutils_system_time_now>

08016cc4 <rcl_clock_valid>:
 8016cc4:	b138      	cbz	r0, 8016cd6 <rcl_clock_valid+0x12>
 8016cc6:	7803      	ldrb	r3, [r0, #0]
 8016cc8:	b123      	cbz	r3, 8016cd4 <rcl_clock_valid+0x10>
 8016cca:	68c0      	ldr	r0, [r0, #12]
 8016ccc:	3800      	subs	r0, #0
 8016cce:	bf18      	it	ne
 8016cd0:	2001      	movne	r0, #1
 8016cd2:	4770      	bx	lr
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	4770      	bx	lr

08016cd8 <rcl_clock_init>:
 8016cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cda:	4605      	mov	r5, r0
 8016cdc:	4610      	mov	r0, r2
 8016cde:	4614      	mov	r4, r2
 8016ce0:	460e      	mov	r6, r1
 8016ce2:	f7f7 ff65 	bl	800ebb0 <rcutils_allocator_is_valid>
 8016ce6:	b128      	cbz	r0, 8016cf4 <rcl_clock_init+0x1c>
 8016ce8:	2d03      	cmp	r5, #3
 8016cea:	d803      	bhi.n	8016cf4 <rcl_clock_init+0x1c>
 8016cec:	e8df f005 	tbb	[pc, r5]
 8016cf0:	0659301f 	.word	0x0659301f
 8016cf4:	f04f 0c0b 	mov.w	ip, #11
 8016cf8:	4660      	mov	r0, ip
 8016cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016cfc:	2c00      	cmp	r4, #0
 8016cfe:	d0f9      	beq.n	8016cf4 <rcl_clock_init+0x1c>
 8016d00:	fab6 f386 	clz	r3, r6
 8016d04:	095b      	lsrs	r3, r3, #5
 8016d06:	2e00      	cmp	r6, #0
 8016d08:	d0f4      	beq.n	8016cf4 <rcl_clock_init+0x1c>
 8016d0a:	6133      	str	r3, [r6, #16]
 8016d0c:	469c      	mov	ip, r3
 8016d0e:	f106 0514 	add.w	r5, r6, #20
 8016d12:	4f32      	ldr	r7, [pc, #200]	; (8016ddc <rcl_clock_init+0x104>)
 8016d14:	f04f 0e03 	mov.w	lr, #3
 8016d18:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016d1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016d1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016d20:	6823      	ldr	r3, [r4, #0]
 8016d22:	4660      	mov	r0, ip
 8016d24:	602b      	str	r3, [r5, #0]
 8016d26:	60f7      	str	r7, [r6, #12]
 8016d28:	f886 e000 	strb.w	lr, [r6]
 8016d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d2e:	2e00      	cmp	r6, #0
 8016d30:	d0e0      	beq.n	8016cf4 <rcl_clock_init+0x1c>
 8016d32:	2300      	movs	r3, #0
 8016d34:	f106 0514 	add.w	r5, r6, #20
 8016d38:	7033      	strb	r3, [r6, #0]
 8016d3a:	469c      	mov	ip, r3
 8016d3c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016d40:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8016d44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016d46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016d48:	6823      	ldr	r3, [r4, #0]
 8016d4a:	4660      	mov	r0, ip
 8016d4c:	602b      	str	r3, [r5, #0]
 8016d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d50:	2c00      	cmp	r4, #0
 8016d52:	d0cf      	beq.n	8016cf4 <rcl_clock_init+0x1c>
 8016d54:	fab6 f586 	clz	r5, r6
 8016d58:	096d      	lsrs	r5, r5, #5
 8016d5a:	2e00      	cmp	r6, #0
 8016d5c:	d0ca      	beq.n	8016cf4 <rcl_clock_init+0x1c>
 8016d5e:	46a6      	mov	lr, r4
 8016d60:	7035      	strb	r5, [r6, #0]
 8016d62:	f106 0c14 	add.w	ip, r6, #20
 8016d66:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016d6a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8016d6e:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8016d72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016d76:	f8de 3000 	ldr.w	r3, [lr]
 8016d7a:	2010      	movs	r0, #16
 8016d7c:	f8cc 3000 	str.w	r3, [ip]
 8016d80:	6823      	ldr	r3, [r4, #0]
 8016d82:	6921      	ldr	r1, [r4, #16]
 8016d84:	4798      	blx	r3
 8016d86:	6130      	str	r0, [r6, #16]
 8016d88:	b320      	cbz	r0, 8016dd4 <rcl_clock_init+0xfc>
 8016d8a:	2200      	movs	r2, #0
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	46ac      	mov	ip, r5
 8016d90:	7205      	strb	r5, [r0, #8]
 8016d92:	e9c0 2300 	strd	r2, r3, [r0]
 8016d96:	4a12      	ldr	r2, [pc, #72]	; (8016de0 <rcl_clock_init+0x108>)
 8016d98:	2301      	movs	r3, #1
 8016d9a:	4660      	mov	r0, ip
 8016d9c:	60f2      	str	r2, [r6, #12]
 8016d9e:	7033      	strb	r3, [r6, #0]
 8016da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016da2:	2c00      	cmp	r4, #0
 8016da4:	d0a6      	beq.n	8016cf4 <rcl_clock_init+0x1c>
 8016da6:	fab6 f386 	clz	r3, r6
 8016daa:	095b      	lsrs	r3, r3, #5
 8016dac:	2e00      	cmp	r6, #0
 8016dae:	d0a1      	beq.n	8016cf4 <rcl_clock_init+0x1c>
 8016db0:	6133      	str	r3, [r6, #16]
 8016db2:	469c      	mov	ip, r3
 8016db4:	f106 0514 	add.w	r5, r6, #20
 8016db8:	f8df e028 	ldr.w	lr, [pc, #40]	; 8016de4 <rcl_clock_init+0x10c>
 8016dbc:	2702      	movs	r7, #2
 8016dbe:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016dc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016dc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016dc6:	6823      	ldr	r3, [r4, #0]
 8016dc8:	4660      	mov	r0, ip
 8016dca:	602b      	str	r3, [r5, #0]
 8016dcc:	f8c6 e00c 	str.w	lr, [r6, #12]
 8016dd0:	7037      	strb	r7, [r6, #0]
 8016dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016dd4:	f04f 0c0a 	mov.w	ip, #10
 8016dd8:	e78e      	b.n	8016cf8 <rcl_clock_init+0x20>
 8016dda:	bf00      	nop
 8016ddc:	08016c99 	.word	0x08016c99
 8016de0:	08016ca1 	.word	0x08016ca1
 8016de4:	08016c91 	.word	0x08016c91

08016de8 <rcl_clock_get_now>:
 8016de8:	b140      	cbz	r0, 8016dfc <rcl_clock_get_now+0x14>
 8016dea:	b139      	cbz	r1, 8016dfc <rcl_clock_get_now+0x14>
 8016dec:	7803      	ldrb	r3, [r0, #0]
 8016dee:	b11b      	cbz	r3, 8016df8 <rcl_clock_get_now+0x10>
 8016df0:	68c3      	ldr	r3, [r0, #12]
 8016df2:	b10b      	cbz	r3, 8016df8 <rcl_clock_get_now+0x10>
 8016df4:	6900      	ldr	r0, [r0, #16]
 8016df6:	4718      	bx	r3
 8016df8:	2001      	movs	r0, #1
 8016dfa:	4770      	bx	lr
 8016dfc:	200b      	movs	r0, #11
 8016dfe:	4770      	bx	lr

08016e00 <rcl_clock_add_jump_callback>:
 8016e00:	b082      	sub	sp, #8
 8016e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e06:	a906      	add	r1, sp, #24
 8016e08:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 8016e0c:	e881 000c 	stmia.w	r1, {r2, r3}
 8016e10:	b330      	cbz	r0, 8016e60 <rcl_clock_add_jump_callback+0x60>
 8016e12:	4604      	mov	r4, r0
 8016e14:	3014      	adds	r0, #20
 8016e16:	f7f7 fecb 	bl	800ebb0 <rcutils_allocator_is_valid>
 8016e1a:	b30d      	cbz	r5, 8016e60 <rcl_clock_add_jump_callback+0x60>
 8016e1c:	f080 0301 	eor.w	r3, r0, #1
 8016e20:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8016e24:	d11c      	bne.n	8016e60 <rcl_clock_add_jump_callback+0x60>
 8016e26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016e28:	2a00      	cmp	r2, #0
 8016e2a:	db19      	blt.n	8016e60 <rcl_clock_add_jump_callback+0x60>
 8016e2c:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8016e30:	2901      	cmp	r1, #1
 8016e32:	f172 0200 	sbcs.w	r2, r2, #0
 8016e36:	da13      	bge.n	8016e60 <rcl_clock_add_jump_callback+0x60>
 8016e38:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8016e3c:	2f00      	cmp	r7, #0
 8016e3e:	d040      	beq.n	8016ec2 <rcl_clock_add_jump_callback+0xc2>
 8016e40:	4602      	mov	r2, r0
 8016e42:	e003      	b.n	8016e4c <rcl_clock_add_jump_callback+0x4c>
 8016e44:	42bb      	cmp	r3, r7
 8016e46:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8016e4a:	d010      	beq.n	8016e6e <rcl_clock_add_jump_callback+0x6e>
 8016e4c:	6811      	ldr	r1, [r2, #0]
 8016e4e:	3301      	adds	r3, #1
 8016e50:	42a9      	cmp	r1, r5
 8016e52:	d1f7      	bne.n	8016e44 <rcl_clock_add_jump_callback+0x44>
 8016e54:	6a11      	ldr	r1, [r2, #32]
 8016e56:	42b1      	cmp	r1, r6
 8016e58:	d1f4      	bne.n	8016e44 <rcl_clock_add_jump_callback+0x44>
 8016e5a:	f04f 0e01 	mov.w	lr, #1
 8016e5e:	e001      	b.n	8016e64 <rcl_clock_add_jump_callback+0x64>
 8016e60:	f04f 0e0b 	mov.w	lr, #11
 8016e64:	4670      	mov	r0, lr
 8016e66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e6a:	b002      	add	sp, #8
 8016e6c:	4770      	bx	lr
 8016e6e:	3301      	adds	r3, #1
 8016e70:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016e74:	00d9      	lsls	r1, r3, #3
 8016e76:	69e3      	ldr	r3, [r4, #28]
 8016e78:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8016e7a:	4798      	blx	r3
 8016e7c:	b1f0      	cbz	r0, 8016ebc <rcl_clock_add_jump_callback+0xbc>
 8016e7e:	68a3      	ldr	r3, [r4, #8]
 8016e80:	f10d 0c18 	add.w	ip, sp, #24
 8016e84:	6060      	str	r0, [r4, #4]
 8016e86:	f04f 0e00 	mov.w	lr, #0
 8016e8a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8016e8e:	f103 0801 	add.w	r8, r3, #1
 8016e92:	f840 5032 	str.w	r5, [r0, r2, lsl #3]
 8016e96:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8016e9a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016e9e:	f105 0708 	add.w	r7, r5, #8
 8016ea2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016ea4:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8016ea8:	e887 0003 	stmia.w	r7, {r0, r1}
 8016eac:	4670      	mov	r0, lr
 8016eae:	622e      	str	r6, [r5, #32]
 8016eb0:	f8c4 8008 	str.w	r8, [r4, #8]
 8016eb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016eb8:	b002      	add	sp, #8
 8016eba:	4770      	bx	lr
 8016ebc:	f04f 0e0a 	mov.w	lr, #10
 8016ec0:	e7d0      	b.n	8016e64 <rcl_clock_add_jump_callback+0x64>
 8016ec2:	2128      	movs	r1, #40	; 0x28
 8016ec4:	e7d7      	b.n	8016e76 <rcl_clock_add_jump_callback+0x76>
 8016ec6:	bf00      	nop

08016ec8 <rcl_clock_remove_jump_callback>:
 8016ec8:	2800      	cmp	r0, #0
 8016eca:	d05f      	beq.n	8016f8c <rcl_clock_remove_jump_callback+0xc4>
 8016ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ed0:	4605      	mov	r5, r0
 8016ed2:	3014      	adds	r0, #20
 8016ed4:	460f      	mov	r7, r1
 8016ed6:	4692      	mov	sl, r2
 8016ed8:	f7f7 fe6a 	bl	800ebb0 <rcutils_allocator_is_valid>
 8016edc:	f080 0001 	eor.w	r0, r0, #1
 8016ee0:	b2c0      	uxtb	r0, r0
 8016ee2:	2800      	cmp	r0, #0
 8016ee4:	d13f      	bne.n	8016f66 <rcl_clock_remove_jump_callback+0x9e>
 8016ee6:	2f00      	cmp	r7, #0
 8016ee8:	d03d      	beq.n	8016f66 <rcl_clock_remove_jump_callback+0x9e>
 8016eea:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8016eee:	f1b8 0f00 	cmp.w	r8, #0
 8016ef2:	d00c      	beq.n	8016f0e <rcl_clock_remove_jump_callback+0x46>
 8016ef4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8016ef8:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 8016efc:	464c      	mov	r4, r9
 8016efe:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 8016f02:	6823      	ldr	r3, [r4, #0]
 8016f04:	42bb      	cmp	r3, r7
 8016f06:	d005      	beq.n	8016f14 <rcl_clock_remove_jump_callback+0x4c>
 8016f08:	3428      	adds	r4, #40	; 0x28
 8016f0a:	42a6      	cmp	r6, r4
 8016f0c:	d1f9      	bne.n	8016f02 <rcl_clock_remove_jump_callback+0x3a>
 8016f0e:	2001      	movs	r0, #1
 8016f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f14:	6a23      	ldr	r3, [r4, #32]
 8016f16:	3428      	adds	r4, #40	; 0x28
 8016f18:	42a6      	cmp	r6, r4
 8016f1a:	d02f      	beq.n	8016f7c <rcl_clock_remove_jump_callback+0xb4>
 8016f1c:	4553      	cmp	r3, sl
 8016f1e:	d1f0      	bne.n	8016f02 <rcl_clock_remove_jump_callback+0x3a>
 8016f20:	46a6      	mov	lr, r4
 8016f22:	f1a4 0c28 	sub.w	ip, r4, #40	; 0x28
 8016f26:	3428      	adds	r4, #40	; 0x28
 8016f28:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016f2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016f30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016f34:	42a6      	cmp	r6, r4
 8016f36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016f3a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016f3e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016f42:	d1ed      	bne.n	8016f20 <rcl_clock_remove_jump_callback+0x58>
 8016f44:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8016f48:	60ac      	str	r4, [r5, #8]
 8016f4a:	b17c      	cbz	r4, 8016f6c <rcl_clock_remove_jump_callback+0xa4>
 8016f4c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8016f50:	69eb      	ldr	r3, [r5, #28]
 8016f52:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8016f54:	4648      	mov	r0, r9
 8016f56:	00e1      	lsls	r1, r4, #3
 8016f58:	4798      	blx	r3
 8016f5a:	4603      	mov	r3, r0
 8016f5c:	b1c0      	cbz	r0, 8016f90 <rcl_clock_remove_jump_callback+0xc8>
 8016f5e:	2000      	movs	r0, #0
 8016f60:	606b      	str	r3, [r5, #4]
 8016f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f66:	200b      	movs	r0, #11
 8016f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f6c:	4648      	mov	r0, r9
 8016f6e:	69ab      	ldr	r3, [r5, #24]
 8016f70:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8016f72:	4798      	blx	r3
 8016f74:	4620      	mov	r0, r4
 8016f76:	606c      	str	r4, [r5, #4]
 8016f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f7c:	4553      	cmp	r3, sl
 8016f7e:	d1c6      	bne.n	8016f0e <rcl_clock_remove_jump_callback+0x46>
 8016f80:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8016f84:	60ac      	str	r4, [r5, #8]
 8016f86:	2c00      	cmp	r4, #0
 8016f88:	d1e0      	bne.n	8016f4c <rcl_clock_remove_jump_callback+0x84>
 8016f8a:	e7ef      	b.n	8016f6c <rcl_clock_remove_jump_callback+0xa4>
 8016f8c:	200b      	movs	r0, #11
 8016f8e:	4770      	bx	lr
 8016f90:	200a      	movs	r0, #10
 8016f92:	e7e9      	b.n	8016f68 <rcl_clock_remove_jump_callback+0xa0>

08016f94 <_rcl_timer_time_jump>:
 8016f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f98:	4605      	mov	r5, r0
 8016f9a:	b084      	sub	sp, #16
 8016f9c:	4614      	mov	r4, r2
 8016f9e:	b131      	cbz	r1, 8016fae <_rcl_timer_time_jump+0x1a>
 8016fa0:	7803      	ldrb	r3, [r0, #0]
 8016fa2:	3b02      	subs	r3, #2
 8016fa4:	2b01      	cmp	r3, #1
 8016fa6:	d93f      	bls.n	8017028 <_rcl_timer_time_jump+0x94>
 8016fa8:	b004      	add	sp, #16
 8016faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016fae:	6813      	ldr	r3, [r2, #0]
 8016fb0:	a902      	add	r1, sp, #8
 8016fb2:	6818      	ldr	r0, [r3, #0]
 8016fb4:	f7ff ff18 	bl	8016de8 <rcl_clock_get_now>
 8016fb8:	2800      	cmp	r0, #0
 8016fba:	d1f5      	bne.n	8016fa8 <_rcl_timer_time_jump+0x14>
 8016fbc:	6820      	ldr	r0, [r4, #0]
 8016fbe:	2105      	movs	r1, #5
 8016fc0:	3020      	adds	r0, #32
 8016fc2:	f001 fe11 	bl	8018be8 <__atomic_load_8>
 8016fc6:	6823      	ldr	r3, [r4, #0]
 8016fc8:	4681      	mov	r9, r0
 8016fca:	4688      	mov	r8, r1
 8016fcc:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8016fd0:	2105      	movs	r1, #5
 8016fd2:	f001 fe09 	bl	8018be8 <__atomic_load_8>
 8016fd6:	4607      	mov	r7, r0
 8016fd8:	6820      	ldr	r0, [r4, #0]
 8016fda:	460e      	mov	r6, r1
 8016fdc:	2105      	movs	r1, #5
 8016fde:	3018      	adds	r0, #24
 8016fe0:	f001 fe02 	bl	8018be8 <__atomic_load_8>
 8016fe4:	782b      	ldrb	r3, [r5, #0]
 8016fe6:	4682      	mov	sl, r0
 8016fe8:	460d      	mov	r5, r1
 8016fea:	3b02      	subs	r3, #2
 8016fec:	9a02      	ldr	r2, [sp, #8]
 8016fee:	2b01      	cmp	r3, #1
 8016ff0:	9b03      	ldr	r3, [sp, #12]
 8016ff2:	d937      	bls.n	8017064 <_rcl_timer_time_jump+0xd0>
 8016ff4:	42ba      	cmp	r2, r7
 8016ff6:	eb73 0106 	sbcs.w	r1, r3, r6
 8016ffa:	da60      	bge.n	80170be <_rcl_timer_time_jump+0x12a>
 8016ffc:	454a      	cmp	r2, r9
 8016ffe:	eb73 0108 	sbcs.w	r1, r3, r8
 8017002:	dad1      	bge.n	8016fa8 <_rcl_timer_time_jump+0x14>
 8017004:	eb1a 0202 	adds.w	r2, sl, r2
 8017008:	6820      	ldr	r0, [r4, #0]
 801700a:	eb43 0305 	adc.w	r3, r3, r5
 801700e:	2505      	movs	r5, #5
 8017010:	3028      	adds	r0, #40	; 0x28
 8017012:	9500      	str	r5, [sp, #0]
 8017014:	f001 fe1e 	bl	8018c54 <__atomic_store_8>
 8017018:	6820      	ldr	r0, [r4, #0]
 801701a:	9500      	str	r5, [sp, #0]
 801701c:	3020      	adds	r0, #32
 801701e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017022:	f001 fe17 	bl	8018c54 <__atomic_store_8>
 8017026:	e7bf      	b.n	8016fa8 <_rcl_timer_time_jump+0x14>
 8017028:	6813      	ldr	r3, [r2, #0]
 801702a:	a902      	add	r1, sp, #8
 801702c:	6818      	ldr	r0, [r3, #0]
 801702e:	f7ff fedb 	bl	8016de8 <rcl_clock_get_now>
 8017032:	2800      	cmp	r0, #0
 8017034:	d1b8      	bne.n	8016fa8 <_rcl_timer_time_jump+0x14>
 8017036:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801703a:	4313      	orrs	r3, r2
 801703c:	d0b4      	beq.n	8016fa8 <_rcl_timer_time_jump+0x14>
 801703e:	6820      	ldr	r0, [r4, #0]
 8017040:	2105      	movs	r1, #5
 8017042:	3028      	adds	r0, #40	; 0x28
 8017044:	f001 fdd0 	bl	8018be8 <__atomic_load_8>
 8017048:	9d02      	ldr	r5, [sp, #8]
 801704a:	4602      	mov	r2, r0
 801704c:	9b03      	ldr	r3, [sp, #12]
 801704e:	6820      	ldr	r0, [r4, #0]
 8017050:	1b52      	subs	r2, r2, r5
 8017052:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8017056:	eb61 0303 	sbc.w	r3, r1, r3
 801705a:	2105      	movs	r1, #5
 801705c:	9100      	str	r1, [sp, #0]
 801705e:	f001 fdf9 	bl	8018c54 <__atomic_store_8>
 8017062:	e7a1      	b.n	8016fa8 <_rcl_timer_time_jump+0x14>
 8017064:	4313      	orrs	r3, r2
 8017066:	d09f      	beq.n	8016fa8 <_rcl_timer_time_jump+0x14>
 8017068:	6820      	ldr	r0, [r4, #0]
 801706a:	f04f 0805 	mov.w	r8, #5
 801706e:	2300      	movs	r3, #0
 8017070:	2200      	movs	r2, #0
 8017072:	3030      	adds	r0, #48	; 0x30
 8017074:	f8cd 8000 	str.w	r8, [sp]
 8017078:	f001 fe22 	bl	8018cc0 <__atomic_exchange_8>
 801707c:	ea51 0300 	orrs.w	r3, r1, r0
 8017080:	4606      	mov	r6, r0
 8017082:	460f      	mov	r7, r1
 8017084:	d090      	beq.n	8016fa8 <_rcl_timer_time_jump+0x14>
 8017086:	9a02      	ldr	r2, [sp, #8]
 8017088:	9b03      	ldr	r3, [sp, #12]
 801708a:	1a12      	subs	r2, r2, r0
 801708c:	f8cd 8000 	str.w	r8, [sp]
 8017090:	6820      	ldr	r0, [r4, #0]
 8017092:	eb63 0301 	sbc.w	r3, r3, r1
 8017096:	eb12 020a 	adds.w	r2, r2, sl
 801709a:	f100 0028 	add.w	r0, r0, #40	; 0x28
 801709e:	eb43 0305 	adc.w	r3, r3, r5
 80170a2:	f001 fdd7 	bl	8018c54 <__atomic_store_8>
 80170a6:	f8cd 8000 	str.w	r8, [sp]
 80170aa:	6820      	ldr	r0, [r4, #0]
 80170ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80170b0:	3020      	adds	r0, #32
 80170b2:	1b92      	subs	r2, r2, r6
 80170b4:	eb63 0307 	sbc.w	r3, r3, r7
 80170b8:	f001 fdcc 	bl	8018c54 <__atomic_store_8>
 80170bc:	e774      	b.n	8016fa8 <_rcl_timer_time_jump+0x14>
 80170be:	6820      	ldr	r0, [r4, #0]
 80170c0:	3008      	adds	r0, #8
 80170c2:	f005 fd77 	bl	801cbb4 <rcl_trigger_guard_condition>
 80170c6:	e76f      	b.n	8016fa8 <_rcl_timer_time_jump+0x14>

080170c8 <rcl_get_zero_initialized_timer>:
 80170c8:	4b01      	ldr	r3, [pc, #4]	; (80170d0 <rcl_get_zero_initialized_timer+0x8>)
 80170ca:	6818      	ldr	r0, [r3, #0]
 80170cc:	4770      	bx	lr
 80170ce:	bf00      	nop
 80170d0:	08020218 	.word	0x08020218

080170d4 <rcl_timer_init>:
 80170d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170d8:	b0af      	sub	sp, #188	; 0xbc
 80170da:	460d      	mov	r5, r1
 80170dc:	4604      	mov	r4, r0
 80170de:	4692      	mov	sl, r2
 80170e0:	a83b      	add	r0, sp, #236	; 0xec
 80170e2:	e9dd 8938 	ldrd	r8, r9, [sp, #224]	; 0xe0
 80170e6:	f7f7 fd63 	bl	800ebb0 <rcutils_allocator_is_valid>
 80170ea:	fab5 f385 	clz	r3, r5
 80170ee:	095b      	lsrs	r3, r3, #5
 80170f0:	ea43 73d9 	orr.w	r3, r3, r9, lsr #31
 80170f4:	2c00      	cmp	r4, #0
 80170f6:	bf08      	it	eq
 80170f8:	f043 0301 	orreq.w	r3, r3, #1
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d167      	bne.n	80171d0 <rcl_timer_init+0xfc>
 8017100:	f080 0001 	eor.w	r0, r0, #1
 8017104:	b2c0      	uxtb	r0, r0
 8017106:	2800      	cmp	r0, #0
 8017108:	d162      	bne.n	80171d0 <rcl_timer_init+0xfc>
 801710a:	6823      	ldr	r3, [r4, #0]
 801710c:	b123      	cbz	r3, 8017118 <rcl_timer_init+0x44>
 801710e:	2664      	movs	r6, #100	; 0x64
 8017110:	4630      	mov	r0, r6
 8017112:	b02f      	add	sp, #188	; 0xbc
 8017114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017118:	a908      	add	r1, sp, #32
 801711a:	4628      	mov	r0, r5
 801711c:	f7ff fe64 	bl	8016de8 <rcl_clock_get_now>
 8017120:	4606      	mov	r6, r0
 8017122:	2800      	cmp	r0, #0
 8017124:	d1f4      	bne.n	8017110 <rcl_timer_init+0x3c>
 8017126:	f10d 0b18 	add.w	fp, sp, #24
 801712a:	ae0b      	add	r6, sp, #44	; 0x2c
 801712c:	af18      	add	r7, sp, #96	; 0x60
 801712e:	4658      	mov	r0, fp
 8017130:	e9cd 5a16 	strd	r5, sl, [sp, #88]	; 0x58
 8017134:	f005 fc48 	bl	801c9c8 <rcl_get_zero_initialized_guard_condition>
 8017138:	e89b 0003 	ldmia.w	fp, {r0, r1}
 801713c:	e887 0003 	stmia.w	r7, {r0, r1}
 8017140:	4630      	mov	r0, r6
 8017142:	f005 fd1b 	bl	801cb7c <rcl_guard_condition_get_default_options>
 8017146:	ab0d      	add	r3, sp, #52	; 0x34
 8017148:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801714c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017150:	4651      	mov	r1, sl
 8017152:	4638      	mov	r0, r7
 8017154:	e896 000c 	ldmia.w	r6, {r2, r3}
 8017158:	f005 fc40 	bl	801c9dc <rcl_guard_condition_init>
 801715c:	4606      	mov	r6, r0
 801715e:	2800      	cmp	r0, #0
 8017160:	d1d6      	bne.n	8017110 <rcl_timer_init+0x3c>
 8017162:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8017164:	781b      	ldrb	r3, [r3, #0]
 8017166:	2b01      	cmp	r3, #1
 8017168:	d037      	beq.n	80171da <rcl_timer_init+0x106>
 801716a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 801716c:	f10d 0cec 	add.w	ip, sp, #236	; 0xec
 8017170:	f10d 0e94 	add.w	lr, sp, #148	; 0x94
 8017174:	f04f 0a00 	mov.w	sl, #0
 8017178:	931a      	str	r3, [sp, #104]	; 0x68
 801717a:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 801717e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017182:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 8017186:	eb12 0008 	adds.w	r0, r2, r8
 801718a:	f04f 0800 	mov.w	r8, #0
 801718e:	eb43 0109 	adc.w	r1, r3, r9
 8017192:	f04f 0900 	mov.w	r9, #0
 8017196:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88
 801719a:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 801719e:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
 80171a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80171a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80171aa:	f8dc 3000 	ldr.w	r3, [ip]
 80171ae:	2060      	movs	r0, #96	; 0x60
 80171b0:	f88d a090 	strb.w	sl, [sp, #144]	; 0x90
 80171b4:	4619      	mov	r1, r3
 80171b6:	f8ce 3000 	str.w	r3, [lr]
 80171ba:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 80171bc:	e9cd aa2a 	strd	sl, sl, [sp, #168]	; 0xa8
 80171c0:	4798      	blx	r3
 80171c2:	6020      	str	r0, [r4, #0]
 80171c4:	b358      	cbz	r0, 801721e <rcl_timer_init+0x14a>
 80171c6:	2260      	movs	r2, #96	; 0x60
 80171c8:	a916      	add	r1, sp, #88	; 0x58
 80171ca:	f006 fdd4 	bl	801dd76 <memcpy>
 80171ce:	e79f      	b.n	8017110 <rcl_timer_init+0x3c>
 80171d0:	260b      	movs	r6, #11
 80171d2:	4630      	mov	r0, r6
 80171d4:	b02f      	add	sp, #188	; 0xbc
 80171d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171da:	2001      	movs	r0, #1
 80171dc:	2100      	movs	r1, #0
 80171de:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 80171e2:	ab12      	add	r3, sp, #72	; 0x48
 80171e4:	4a13      	ldr	r2, [pc, #76]	; (8017234 <rcl_timer_init+0x160>)
 80171e6:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 80171ea:	9405      	str	r4, [sp, #20]
 80171ec:	9204      	str	r2, [sp, #16]
 80171ee:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80171f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80171f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80171fa:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 80171fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017200:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8017204:	4628      	mov	r0, r5
 8017206:	e89c 000c 	ldmia.w	ip, {r2, r3}
 801720a:	f7ff fdf9 	bl	8016e00 <rcl_clock_add_jump_callback>
 801720e:	4603      	mov	r3, r0
 8017210:	2800      	cmp	r0, #0
 8017212:	d0aa      	beq.n	801716a <rcl_timer_init+0x96>
 8017214:	4638      	mov	r0, r7
 8017216:	461e      	mov	r6, r3
 8017218:	f005 fc8a 	bl	801cb30 <rcl_guard_condition_fini>
 801721c:	e778      	b.n	8017110 <rcl_timer_init+0x3c>
 801721e:	4638      	mov	r0, r7
 8017220:	260a      	movs	r6, #10
 8017222:	f005 fc85 	bl	801cb30 <rcl_guard_condition_fini>
 8017226:	4622      	mov	r2, r4
 8017228:	4902      	ldr	r1, [pc, #8]	; (8017234 <rcl_timer_init+0x160>)
 801722a:	4628      	mov	r0, r5
 801722c:	f7ff fe4c 	bl	8016ec8 <rcl_clock_remove_jump_callback>
 8017230:	e76e      	b.n	8017110 <rcl_timer_init+0x3c>
 8017232:	bf00      	nop
 8017234:	08016f95 	.word	0x08016f95

08017238 <rcl_timer_call>:
 8017238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801723c:	b087      	sub	sp, #28
 801723e:	2800      	cmp	r0, #0
 8017240:	d06c      	beq.n	801731c <rcl_timer_call+0xe4>
 8017242:	6803      	ldr	r3, [r0, #0]
 8017244:	4604      	mov	r4, r0
 8017246:	2b00      	cmp	r3, #0
 8017248:	d062      	beq.n	8017310 <rcl_timer_call+0xd8>
 801724a:	f3bf 8f5b 	dmb	ish
 801724e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017252:	f3bf 8f5b 	dmb	ish
 8017256:	2b00      	cmp	r3, #0
 8017258:	d14f      	bne.n	80172fa <rcl_timer_call+0xc2>
 801725a:	6803      	ldr	r3, [r0, #0]
 801725c:	a904      	add	r1, sp, #16
 801725e:	6818      	ldr	r0, [r3, #0]
 8017260:	f7ff fdc2 	bl	8016de8 <rcl_clock_get_now>
 8017264:	4605      	mov	r5, r0
 8017266:	2800      	cmp	r0, #0
 8017268:	d149      	bne.n	80172fe <rcl_timer_call+0xc6>
 801726a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801726e:	2b00      	cmp	r3, #0
 8017270:	db49      	blt.n	8017306 <rcl_timer_call+0xce>
 8017272:	2605      	movs	r6, #5
 8017274:	6820      	ldr	r0, [r4, #0]
 8017276:	9600      	str	r6, [sp, #0]
 8017278:	3020      	adds	r0, #32
 801727a:	f001 fd21 	bl	8018cc0 <__atomic_exchange_8>
 801727e:	6823      	ldr	r3, [r4, #0]
 8017280:	4680      	mov	r8, r0
 8017282:	f3bf 8f5b 	dmb	ish
 8017286:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801728a:	f3bf 8f5b 	dmb	ish
 801728e:	6820      	ldr	r0, [r4, #0]
 8017290:	4689      	mov	r9, r1
 8017292:	4631      	mov	r1, r6
 8017294:	3028      	adds	r0, #40	; 0x28
 8017296:	f001 fca7 	bl	8018be8 <__atomic_load_8>
 801729a:	460f      	mov	r7, r1
 801729c:	4631      	mov	r1, r6
 801729e:	4606      	mov	r6, r0
 80172a0:	6820      	ldr	r0, [r4, #0]
 80172a2:	3018      	adds	r0, #24
 80172a4:	f001 fca0 	bl	8018be8 <__atomic_load_8>
 80172a8:	4602      	mov	r2, r0
 80172aa:	9804      	ldr	r0, [sp, #16]
 80172ac:	460b      	mov	r3, r1
 80172ae:	18b6      	adds	r6, r6, r2
 80172b0:	f8dd c014 	ldr.w	ip, [sp, #20]
 80172b4:	4692      	mov	sl, r2
 80172b6:	eb47 0701 	adc.w	r7, r7, r1
 80172ba:	4286      	cmp	r6, r0
 80172bc:	eb77 010c 	sbcs.w	r1, r7, ip
 80172c0:	da04      	bge.n	80172cc <rcl_timer_call+0x94>
 80172c2:	ea53 0102 	orrs.w	r1, r3, r2
 80172c6:	d12e      	bne.n	8017326 <rcl_timer_call+0xee>
 80172c8:	4606      	mov	r6, r0
 80172ca:	4667      	mov	r7, ip
 80172cc:	6820      	ldr	r0, [r4, #0]
 80172ce:	2105      	movs	r1, #5
 80172d0:	4632      	mov	r2, r6
 80172d2:	463b      	mov	r3, r7
 80172d4:	3028      	adds	r0, #40	; 0x28
 80172d6:	9100      	str	r1, [sp, #0]
 80172d8:	f001 fcbc 	bl	8018c54 <__atomic_store_8>
 80172dc:	f1bb 0f00 	cmp.w	fp, #0
 80172e0:	d00d      	beq.n	80172fe <rcl_timer_call+0xc6>
 80172e2:	9a04      	ldr	r2, [sp, #16]
 80172e4:	4620      	mov	r0, r4
 80172e6:	9b05      	ldr	r3, [sp, #20]
 80172e8:	ebb2 0208 	subs.w	r2, r2, r8
 80172ec:	eb63 0309 	sbc.w	r3, r3, r9
 80172f0:	47d8      	blx	fp
 80172f2:	4628      	mov	r0, r5
 80172f4:	b007      	add	sp, #28
 80172f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172fa:	f240 3521 	movw	r5, #801	; 0x321
 80172fe:	4628      	mov	r0, r5
 8017300:	b007      	add	sp, #28
 8017302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017306:	2501      	movs	r5, #1
 8017308:	4628      	mov	r0, r5
 801730a:	b007      	add	sp, #28
 801730c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017310:	f44f 7548 	mov.w	r5, #800	; 0x320
 8017314:	4628      	mov	r0, r5
 8017316:	b007      	add	sp, #28
 8017318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801731c:	250b      	movs	r5, #11
 801731e:	4628      	mov	r0, r5
 8017320:	b007      	add	sp, #28
 8017322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017326:	1b80      	subs	r0, r0, r6
 8017328:	eb6c 0107 	sbc.w	r1, ip, r7
 801732c:	3801      	subs	r0, #1
 801732e:	f161 0100 	sbc.w	r1, r1, #0
 8017332:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8017336:	f7e8 ffeb 	bl	8000310 <__aeabi_ldivmod>
 801733a:	9b02      	ldr	r3, [sp, #8]
 801733c:	3001      	adds	r0, #1
 801733e:	f141 0100 	adc.w	r1, r1, #0
 8017342:	fb00 f303 	mul.w	r3, r0, r3
 8017346:	fb01 330a 	mla	r3, r1, sl, r3
 801734a:	fba0 0a0a 	umull	r0, sl, r0, sl
 801734e:	1986      	adds	r6, r0, r6
 8017350:	4453      	add	r3, sl
 8017352:	eb43 0707 	adc.w	r7, r3, r7
 8017356:	e7b9      	b.n	80172cc <rcl_timer_call+0x94>

08017358 <rcl_timer_is_ready>:
 8017358:	b570      	push	{r4, r5, r6, lr}
 801735a:	b082      	sub	sp, #8
 801735c:	b380      	cbz	r0, 80173c0 <rcl_timer_is_ready+0x68>
 801735e:	6803      	ldr	r3, [r0, #0]
 8017360:	4604      	mov	r4, r0
 8017362:	b38b      	cbz	r3, 80173c8 <rcl_timer_is_ready+0x70>
 8017364:	460d      	mov	r5, r1
 8017366:	b359      	cbz	r1, 80173c0 <rcl_timer_is_ready+0x68>
 8017368:	f3bf 8f5b 	dmb	ish
 801736c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017370:	f3bf 8f5b 	dmb	ish
 8017374:	b953      	cbnz	r3, 801738c <rcl_timer_is_ready+0x34>
 8017376:	6803      	ldr	r3, [r0, #0]
 8017378:	4669      	mov	r1, sp
 801737a:	6818      	ldr	r0, [r3, #0]
 801737c:	f7ff fd34 	bl	8016de8 <rcl_clock_get_now>
 8017380:	4606      	mov	r6, r0
 8017382:	b148      	cbz	r0, 8017398 <rcl_timer_is_ready+0x40>
 8017384:	f240 3321 	movw	r3, #801	; 0x321
 8017388:	4298      	cmp	r0, r3
 801738a:	d102      	bne.n	8017392 <rcl_timer_is_ready+0x3a>
 801738c:	2300      	movs	r3, #0
 801738e:	461e      	mov	r6, r3
 8017390:	702b      	strb	r3, [r5, #0]
 8017392:	4630      	mov	r0, r6
 8017394:	b002      	add	sp, #8
 8017396:	bd70      	pop	{r4, r5, r6, pc}
 8017398:	6820      	ldr	r0, [r4, #0]
 801739a:	2105      	movs	r1, #5
 801739c:	3028      	adds	r0, #40	; 0x28
 801739e:	f001 fc23 	bl	8018be8 <__atomic_load_8>
 80173a2:	9b00      	ldr	r3, [sp, #0]
 80173a4:	1ac0      	subs	r0, r0, r3
 80173a6:	9b01      	ldr	r3, [sp, #4]
 80173a8:	eb61 0103 	sbc.w	r1, r1, r3
 80173ac:	2801      	cmp	r0, #1
 80173ae:	4630      	mov	r0, r6
 80173b0:	f171 0300 	sbcs.w	r3, r1, #0
 80173b4:	bfb4      	ite	lt
 80173b6:	2301      	movlt	r3, #1
 80173b8:	2300      	movge	r3, #0
 80173ba:	702b      	strb	r3, [r5, #0]
 80173bc:	b002      	add	sp, #8
 80173be:	bd70      	pop	{r4, r5, r6, pc}
 80173c0:	260b      	movs	r6, #11
 80173c2:	4630      	mov	r0, r6
 80173c4:	b002      	add	sp, #8
 80173c6:	bd70      	pop	{r4, r5, r6, pc}
 80173c8:	f44f 7648 	mov.w	r6, #800	; 0x320
 80173cc:	e7e1      	b.n	8017392 <rcl_timer_is_ready+0x3a>
 80173ce:	bf00      	nop

080173d0 <rcl_timer_get_time_until_next_call>:
 80173d0:	b570      	push	{r4, r5, r6, lr}
 80173d2:	b082      	sub	sp, #8
 80173d4:	b330      	cbz	r0, 8017424 <rcl_timer_get_time_until_next_call+0x54>
 80173d6:	6803      	ldr	r3, [r0, #0]
 80173d8:	4604      	mov	r4, r0
 80173da:	b33b      	cbz	r3, 801742c <rcl_timer_get_time_until_next_call+0x5c>
 80173dc:	460d      	mov	r5, r1
 80173de:	b309      	cbz	r1, 8017424 <rcl_timer_get_time_until_next_call+0x54>
 80173e0:	f3bf 8f5b 	dmb	ish
 80173e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80173e8:	f3bf 8f5b 	dmb	ish
 80173ec:	b9ab      	cbnz	r3, 801741a <rcl_timer_get_time_until_next_call+0x4a>
 80173ee:	6803      	ldr	r3, [r0, #0]
 80173f0:	4669      	mov	r1, sp
 80173f2:	6818      	ldr	r0, [r3, #0]
 80173f4:	f7ff fcf8 	bl	8016de8 <rcl_clock_get_now>
 80173f8:	4606      	mov	r6, r0
 80173fa:	b958      	cbnz	r0, 8017414 <rcl_timer_get_time_until_next_call+0x44>
 80173fc:	6820      	ldr	r0, [r4, #0]
 80173fe:	2105      	movs	r1, #5
 8017400:	3028      	adds	r0, #40	; 0x28
 8017402:	f001 fbf1 	bl	8018be8 <__atomic_load_8>
 8017406:	9b00      	ldr	r3, [sp, #0]
 8017408:	1ac0      	subs	r0, r0, r3
 801740a:	9b01      	ldr	r3, [sp, #4]
 801740c:	eb61 0103 	sbc.w	r1, r1, r3
 8017410:	6028      	str	r0, [r5, #0]
 8017412:	6069      	str	r1, [r5, #4]
 8017414:	4630      	mov	r0, r6
 8017416:	b002      	add	sp, #8
 8017418:	bd70      	pop	{r4, r5, r6, pc}
 801741a:	f240 3621 	movw	r6, #801	; 0x321
 801741e:	4630      	mov	r0, r6
 8017420:	b002      	add	sp, #8
 8017422:	bd70      	pop	{r4, r5, r6, pc}
 8017424:	260b      	movs	r6, #11
 8017426:	4630      	mov	r0, r6
 8017428:	b002      	add	sp, #8
 801742a:	bd70      	pop	{r4, r5, r6, pc}
 801742c:	f44f 7648 	mov.w	r6, #800	; 0x320
 8017430:	e7f0      	b.n	8017414 <rcl_timer_get_time_until_next_call+0x44>
 8017432:	bf00      	nop

08017434 <rcl_timer_get_guard_condition>:
 8017434:	b130      	cbz	r0, 8017444 <rcl_timer_get_guard_condition+0x10>
 8017436:	6800      	ldr	r0, [r0, #0]
 8017438:	b120      	cbz	r0, 8017444 <rcl_timer_get_guard_condition+0x10>
 801743a:	68c3      	ldr	r3, [r0, #12]
 801743c:	b10b      	cbz	r3, 8017442 <rcl_timer_get_guard_condition+0xe>
 801743e:	3008      	adds	r0, #8
 8017440:	4770      	bx	lr
 8017442:	4618      	mov	r0, r3
 8017444:	4770      	bx	lr
 8017446:	bf00      	nop

08017448 <rcl_validate_enclave_name_with_size>:
 8017448:	2800      	cmp	r0, #0
 801744a:	d049      	beq.n	80174e0 <rcl_validate_enclave_name_with_size+0x98>
 801744c:	b570      	push	{r4, r5, r6, lr}
 801744e:	4615      	mov	r5, r2
 8017450:	b0c2      	sub	sp, #264	; 0x108
 8017452:	b19a      	cbz	r2, 801747c <rcl_validate_enclave_name_with_size+0x34>
 8017454:	461e      	mov	r6, r3
 8017456:	466a      	mov	r2, sp
 8017458:	ab01      	add	r3, sp, #4
 801745a:	460c      	mov	r4, r1
 801745c:	f002 f870 	bl	8019540 <rmw_validate_namespace_with_size>
 8017460:	4684      	mov	ip, r0
 8017462:	b9b8      	cbnz	r0, 8017494 <rcl_validate_enclave_name_with_size+0x4c>
 8017464:	9900      	ldr	r1, [sp, #0]
 8017466:	b171      	cbz	r1, 8017486 <rcl_validate_enclave_name_with_size+0x3e>
 8017468:	2907      	cmp	r1, #7
 801746a:	d019      	beq.n	80174a0 <rcl_validate_enclave_name_with_size+0x58>
 801746c:	1e4b      	subs	r3, r1, #1
 801746e:	2b05      	cmp	r3, #5
 8017470:	d83a      	bhi.n	80174e8 <rcl_validate_enclave_name_with_size+0xa0>
 8017472:	e8df f003 	tbb	[pc, r3]
 8017476:	2926      	.short	0x2926
 8017478:	1d322f2c 	.word	0x1d322f2c
 801747c:	f04f 0c0b 	mov.w	ip, #11
 8017480:	4660      	mov	r0, ip
 8017482:	b042      	add	sp, #264	; 0x108
 8017484:	bd70      	pop	{r4, r5, r6, pc}
 8017486:	2907      	cmp	r1, #7
 8017488:	d00a      	beq.n	80174a0 <rcl_validate_enclave_name_with_size+0x58>
 801748a:	2300      	movs	r3, #0
 801748c:	4660      	mov	r0, ip
 801748e:	602b      	str	r3, [r5, #0]
 8017490:	b042      	add	sp, #264	; 0x108
 8017492:	bd70      	pop	{r4, r5, r6, pc}
 8017494:	f7fe fa4a 	bl	801592c <rcl_convert_rmw_ret_to_rcl_ret>
 8017498:	4684      	mov	ip, r0
 801749a:	4660      	mov	r0, ip
 801749c:	b042      	add	sp, #264	; 0x108
 801749e:	bd70      	pop	{r4, r5, r6, pc}
 80174a0:	2cff      	cmp	r4, #255	; 0xff
 80174a2:	d9f2      	bls.n	801748a <rcl_validate_enclave_name_with_size+0x42>
 80174a4:	6029      	str	r1, [r5, #0]
 80174a6:	2e00      	cmp	r6, #0
 80174a8:	d0ea      	beq.n	8017480 <rcl_validate_enclave_name_with_size+0x38>
 80174aa:	23fe      	movs	r3, #254	; 0xfe
 80174ac:	6033      	str	r3, [r6, #0]
 80174ae:	e7e7      	b.n	8017480 <rcl_validate_enclave_name_with_size+0x38>
 80174b0:	2306      	movs	r3, #6
 80174b2:	602b      	str	r3, [r5, #0]
 80174b4:	2e00      	cmp	r6, #0
 80174b6:	d0e3      	beq.n	8017480 <rcl_validate_enclave_name_with_size+0x38>
 80174b8:	9b01      	ldr	r3, [sp, #4]
 80174ba:	4660      	mov	r0, ip
 80174bc:	6033      	str	r3, [r6, #0]
 80174be:	b042      	add	sp, #264	; 0x108
 80174c0:	bd70      	pop	{r4, r5, r6, pc}
 80174c2:	2301      	movs	r3, #1
 80174c4:	602b      	str	r3, [r5, #0]
 80174c6:	e7f5      	b.n	80174b4 <rcl_validate_enclave_name_with_size+0x6c>
 80174c8:	2302      	movs	r3, #2
 80174ca:	602b      	str	r3, [r5, #0]
 80174cc:	e7f2      	b.n	80174b4 <rcl_validate_enclave_name_with_size+0x6c>
 80174ce:	2303      	movs	r3, #3
 80174d0:	602b      	str	r3, [r5, #0]
 80174d2:	e7ef      	b.n	80174b4 <rcl_validate_enclave_name_with_size+0x6c>
 80174d4:	2304      	movs	r3, #4
 80174d6:	602b      	str	r3, [r5, #0]
 80174d8:	e7ec      	b.n	80174b4 <rcl_validate_enclave_name_with_size+0x6c>
 80174da:	2305      	movs	r3, #5
 80174dc:	602b      	str	r3, [r5, #0]
 80174de:	e7e9      	b.n	80174b4 <rcl_validate_enclave_name_with_size+0x6c>
 80174e0:	f04f 0c0b 	mov.w	ip, #11
 80174e4:	4660      	mov	r0, ip
 80174e6:	4770      	bx	lr
 80174e8:	460b      	mov	r3, r1
 80174ea:	4a04      	ldr	r2, [pc, #16]	; (80174fc <rcl_validate_enclave_name_with_size+0xb4>)
 80174ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80174f0:	a802      	add	r0, sp, #8
 80174f2:	f001 fd31 	bl	8018f58 <rcutils_snprintf>
 80174f6:	f04f 0c01 	mov.w	ip, #1
 80174fa:	e7c1      	b.n	8017480 <rcl_validate_enclave_name_with_size+0x38>
 80174fc:	0802021c 	.word	0x0802021c

08017500 <rcl_validate_enclave_name>:
 8017500:	b168      	cbz	r0, 801751e <rcl_validate_enclave_name+0x1e>
 8017502:	b570      	push	{r4, r5, r6, lr}
 8017504:	460d      	mov	r5, r1
 8017506:	4616      	mov	r6, r2
 8017508:	4604      	mov	r4, r0
 801750a:	f7e8 fef9 	bl	8000300 <strlen>
 801750e:	4633      	mov	r3, r6
 8017510:	4601      	mov	r1, r0
 8017512:	462a      	mov	r2, r5
 8017514:	4620      	mov	r0, r4
 8017516:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801751a:	f7ff bf95 	b.w	8017448 <rcl_validate_enclave_name_with_size>
 801751e:	200b      	movs	r0, #11
 8017520:	4770      	bx	lr
 8017522:	bf00      	nop

08017524 <rcl_get_zero_initialized_wait_set>:
 8017524:	b510      	push	{r4, lr}
 8017526:	4c08      	ldr	r4, [pc, #32]	; (8017548 <rcl_get_zero_initialized_wait_set+0x24>)
 8017528:	4686      	mov	lr, r0
 801752a:	4684      	mov	ip, r0
 801752c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801752e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017532:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017534:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801753a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801753e:	6823      	ldr	r3, [r4, #0]
 8017540:	4670      	mov	r0, lr
 8017542:	f8cc 3000 	str.w	r3, [ip]
 8017546:	bd10      	pop	{r4, pc}
 8017548:	0802027c 	.word	0x0802027c

0801754c <rcl_wait_set_is_valid>:
 801754c:	b118      	cbz	r0, 8017556 <rcl_wait_set_is_valid+0xa>
 801754e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8017550:	3800      	subs	r0, #0
 8017552:	bf18      	it	ne
 8017554:	2001      	movne	r0, #1
 8017556:	4770      	bx	lr

08017558 <rcl_wait_set_fini>:
 8017558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801755c:	b082      	sub	sp, #8
 801755e:	2800      	cmp	r0, #0
 8017560:	f000 8095 	beq.w	801768e <rcl_wait_set_fini+0x136>
 8017564:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8017566:	4604      	mov	r4, r0
 8017568:	2e00      	cmp	r6, #0
 801756a:	f000 808c 	beq.w	8017686 <rcl_wait_set_fini+0x12e>
 801756e:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8017570:	f003 fae0 	bl	801ab34 <rmw_destroy_wait_set>
 8017574:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017576:	1e06      	subs	r6, r0, #0
 8017578:	bf18      	it	ne
 801757a:	f44f 7661 	movne.w	r6, #900	; 0x384
 801757e:	2d00      	cmp	r5, #0
 8017580:	f000 8081 	beq.w	8017686 <rcl_wait_set_fini+0x12e>
 8017584:	2700      	movs	r7, #0
 8017586:	6820      	ldr	r0, [r4, #0]
 8017588:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801758c:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801758e:	6067      	str	r7, [r4, #4]
 8017590:	602f      	str	r7, [r5, #0]
 8017592:	b120      	cbz	r0, 801759e <rcl_wait_set_fini+0x46>
 8017594:	9101      	str	r1, [sp, #4]
 8017596:	47c0      	blx	r8
 8017598:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801759a:	9901      	ldr	r1, [sp, #4]
 801759c:	6027      	str	r7, [r4, #0]
 801759e:	68a8      	ldr	r0, [r5, #8]
 80175a0:	b120      	cbz	r0, 80175ac <rcl_wait_set_fini+0x54>
 80175a2:	47c0      	blx	r8
 80175a4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80175a6:	2300      	movs	r3, #0
 80175a8:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80175ac:	f04f 0800 	mov.w	r8, #0
 80175b0:	68a0      	ldr	r0, [r4, #8]
 80175b2:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80175b4:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80175b6:	f8c4 800c 	str.w	r8, [r4, #12]
 80175ba:	f8c5 800c 	str.w	r8, [r5, #12]
 80175be:	b128      	cbz	r0, 80175cc <rcl_wait_set_fini+0x74>
 80175c0:	47b8      	blx	r7
 80175c2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80175c4:	f8c4 8008 	str.w	r8, [r4, #8]
 80175c8:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80175ca:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80175cc:	f04f 0800 	mov.w	r8, #0
 80175d0:	6968      	ldr	r0, [r5, #20]
 80175d2:	f8c5 8010 	str.w	r8, [r5, #16]
 80175d6:	b128      	cbz	r0, 80175e4 <rcl_wait_set_fini+0x8c>
 80175d8:	47b8      	blx	r7
 80175da:	f8c5 8014 	str.w	r8, [r5, #20]
 80175de:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80175e0:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80175e2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80175e4:	f04f 0800 	mov.w	r8, #0
 80175e8:	6920      	ldr	r0, [r4, #16]
 80175ea:	f8c4 8014 	str.w	r8, [r4, #20]
 80175ee:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 80175f2:	b128      	cbz	r0, 8017600 <rcl_wait_set_fini+0xa8>
 80175f4:	47b8      	blx	r7
 80175f6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80175f8:	f8c4 8010 	str.w	r8, [r4, #16]
 80175fc:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80175fe:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8017600:	f04f 0800 	mov.w	r8, #0
 8017604:	69a0      	ldr	r0, [r4, #24]
 8017606:	f8c4 801c 	str.w	r8, [r4, #28]
 801760a:	f8c5 8018 	str.w	r8, [r5, #24]
 801760e:	b128      	cbz	r0, 801761c <rcl_wait_set_fini+0xc4>
 8017610:	9101      	str	r1, [sp, #4]
 8017612:	47b8      	blx	r7
 8017614:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017616:	9901      	ldr	r1, [sp, #4]
 8017618:	f8c4 8018 	str.w	r8, [r4, #24]
 801761c:	6a28      	ldr	r0, [r5, #32]
 801761e:	b120      	cbz	r0, 801762a <rcl_wait_set_fini+0xd2>
 8017620:	47b8      	blx	r7
 8017622:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017624:	2300      	movs	r3, #0
 8017626:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801762a:	2700      	movs	r7, #0
 801762c:	6a20      	ldr	r0, [r4, #32]
 801762e:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8017632:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8017634:	6267      	str	r7, [r4, #36]	; 0x24
 8017636:	626f      	str	r7, [r5, #36]	; 0x24
 8017638:	b120      	cbz	r0, 8017644 <rcl_wait_set_fini+0xec>
 801763a:	9101      	str	r1, [sp, #4]
 801763c:	47c0      	blx	r8
 801763e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017640:	9901      	ldr	r1, [sp, #4]
 8017642:	6227      	str	r7, [r4, #32]
 8017644:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8017646:	b120      	cbz	r0, 8017652 <rcl_wait_set_fini+0xfa>
 8017648:	47c0      	blx	r8
 801764a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801764c:	2300      	movs	r3, #0
 801764e:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8017652:	2700      	movs	r7, #0
 8017654:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8017656:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801765a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801765c:	62e7      	str	r7, [r4, #44]	; 0x2c
 801765e:	632f      	str	r7, [r5, #48]	; 0x30
 8017660:	b120      	cbz	r0, 801766c <rcl_wait_set_fini+0x114>
 8017662:	9101      	str	r1, [sp, #4]
 8017664:	47c0      	blx	r8
 8017666:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017668:	9901      	ldr	r1, [sp, #4]
 801766a:	62a7      	str	r7, [r4, #40]	; 0x28
 801766c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801766e:	b120      	cbz	r0, 801767a <rcl_wait_set_fini+0x122>
 8017670:	47c0      	blx	r8
 8017672:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017674:	2300      	movs	r3, #0
 8017676:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 801767a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801767c:	4628      	mov	r0, r5
 801767e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8017680:	4798      	blx	r3
 8017682:	2300      	movs	r3, #0
 8017684:	6323      	str	r3, [r4, #48]	; 0x30
 8017686:	4630      	mov	r0, r6
 8017688:	b002      	add	sp, #8
 801768a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801768e:	260b      	movs	r6, #11
 8017690:	4630      	mov	r0, r6
 8017692:	b002      	add	sp, #8
 8017694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017698 <rcl_wait_set_add_subscription>:
 8017698:	b318      	cbz	r0, 80176e2 <rcl_wait_set_add_subscription+0x4a>
 801769a:	b538      	push	{r3, r4, r5, lr}
 801769c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801769e:	4604      	mov	r4, r0
 80176a0:	b30b      	cbz	r3, 80176e6 <rcl_wait_set_add_subscription+0x4e>
 80176a2:	b319      	cbz	r1, 80176ec <rcl_wait_set_add_subscription+0x54>
 80176a4:	681d      	ldr	r5, [r3, #0]
 80176a6:	6840      	ldr	r0, [r0, #4]
 80176a8:	4285      	cmp	r5, r0
 80176aa:	d217      	bcs.n	80176dc <rcl_wait_set_add_subscription+0x44>
 80176ac:	1c68      	adds	r0, r5, #1
 80176ae:	6018      	str	r0, [r3, #0]
 80176b0:	6823      	ldr	r3, [r4, #0]
 80176b2:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80176b6:	b102      	cbz	r2, 80176ba <rcl_wait_set_add_subscription+0x22>
 80176b8:	6015      	str	r5, [r2, #0]
 80176ba:	4608      	mov	r0, r1
 80176bc:	f7ff fad8 	bl	8016c70 <rcl_subscription_get_rmw_handle>
 80176c0:	b150      	cbz	r0, 80176d8 <rcl_wait_set_add_subscription+0x40>
 80176c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80176c4:	6842      	ldr	r2, [r0, #4]
 80176c6:	2000      	movs	r0, #0
 80176c8:	689b      	ldr	r3, [r3, #8]
 80176ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80176ce:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80176d0:	6853      	ldr	r3, [r2, #4]
 80176d2:	3301      	adds	r3, #1
 80176d4:	6053      	str	r3, [r2, #4]
 80176d6:	bd38      	pop	{r3, r4, r5, pc}
 80176d8:	2001      	movs	r0, #1
 80176da:	bd38      	pop	{r3, r4, r5, pc}
 80176dc:	f240 3086 	movw	r0, #902	; 0x386
 80176e0:	bd38      	pop	{r3, r4, r5, pc}
 80176e2:	200b      	movs	r0, #11
 80176e4:	4770      	bx	lr
 80176e6:	f44f 7061 	mov.w	r0, #900	; 0x384
 80176ea:	bd38      	pop	{r3, r4, r5, pc}
 80176ec:	200b      	movs	r0, #11
 80176ee:	bd38      	pop	{r3, r4, r5, pc}

080176f0 <rcl_wait_set_clear>:
 80176f0:	2800      	cmp	r0, #0
 80176f2:	d074      	beq.n	80177de <rcl_wait_set_clear+0xee>
 80176f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80176f6:	b510      	push	{r4, lr}
 80176f8:	4604      	mov	r4, r0
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d071      	beq.n	80177e2 <rcl_wait_set_clear+0xf2>
 80176fe:	6800      	ldr	r0, [r0, #0]
 8017700:	b138      	cbz	r0, 8017712 <rcl_wait_set_clear+0x22>
 8017702:	6862      	ldr	r2, [r4, #4]
 8017704:	2100      	movs	r1, #0
 8017706:	0092      	lsls	r2, r2, #2
 8017708:	f006 fa04 	bl	801db14 <memset>
 801770c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801770e:	2200      	movs	r2, #0
 8017710:	601a      	str	r2, [r3, #0]
 8017712:	68a0      	ldr	r0, [r4, #8]
 8017714:	b138      	cbz	r0, 8017726 <rcl_wait_set_clear+0x36>
 8017716:	68e2      	ldr	r2, [r4, #12]
 8017718:	2100      	movs	r1, #0
 801771a:	0092      	lsls	r2, r2, #2
 801771c:	f006 f9fa 	bl	801db14 <memset>
 8017720:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017722:	2200      	movs	r2, #0
 8017724:	60da      	str	r2, [r3, #12]
 8017726:	69a0      	ldr	r0, [r4, #24]
 8017728:	b138      	cbz	r0, 801773a <rcl_wait_set_clear+0x4a>
 801772a:	69e2      	ldr	r2, [r4, #28]
 801772c:	2100      	movs	r1, #0
 801772e:	0092      	lsls	r2, r2, #2
 8017730:	f006 f9f0 	bl	801db14 <memset>
 8017734:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017736:	2200      	movs	r2, #0
 8017738:	619a      	str	r2, [r3, #24]
 801773a:	6a20      	ldr	r0, [r4, #32]
 801773c:	b138      	cbz	r0, 801774e <rcl_wait_set_clear+0x5e>
 801773e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8017740:	2100      	movs	r1, #0
 8017742:	0092      	lsls	r2, r2, #2
 8017744:	f006 f9e6 	bl	801db14 <memset>
 8017748:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801774a:	2200      	movs	r2, #0
 801774c:	625a      	str	r2, [r3, #36]	; 0x24
 801774e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8017750:	b138      	cbz	r0, 8017762 <rcl_wait_set_clear+0x72>
 8017752:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017754:	2100      	movs	r1, #0
 8017756:	0092      	lsls	r2, r2, #2
 8017758:	f006 f9dc 	bl	801db14 <memset>
 801775c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801775e:	2200      	movs	r2, #0
 8017760:	631a      	str	r2, [r3, #48]	; 0x30
 8017762:	6920      	ldr	r0, [r4, #16]
 8017764:	b138      	cbz	r0, 8017776 <rcl_wait_set_clear+0x86>
 8017766:	6962      	ldr	r2, [r4, #20]
 8017768:	2100      	movs	r1, #0
 801776a:	0092      	lsls	r2, r2, #2
 801776c:	f006 f9d2 	bl	801db14 <memset>
 8017770:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017772:	2200      	movs	r2, #0
 8017774:	641a      	str	r2, [r3, #64]	; 0x40
 8017776:	6898      	ldr	r0, [r3, #8]
 8017778:	b138      	cbz	r0, 801778a <rcl_wait_set_clear+0x9a>
 801777a:	685a      	ldr	r2, [r3, #4]
 801777c:	2100      	movs	r1, #0
 801777e:	0092      	lsls	r2, r2, #2
 8017780:	f006 f9c8 	bl	801db14 <memset>
 8017784:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017786:	2200      	movs	r2, #0
 8017788:	605a      	str	r2, [r3, #4]
 801778a:	6958      	ldr	r0, [r3, #20]
 801778c:	b138      	cbz	r0, 801779e <rcl_wait_set_clear+0xae>
 801778e:	691a      	ldr	r2, [r3, #16]
 8017790:	2100      	movs	r1, #0
 8017792:	0092      	lsls	r2, r2, #2
 8017794:	f006 f9be 	bl	801db14 <memset>
 8017798:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801779a:	2200      	movs	r2, #0
 801779c:	611a      	str	r2, [r3, #16]
 801779e:	6a18      	ldr	r0, [r3, #32]
 80177a0:	b138      	cbz	r0, 80177b2 <rcl_wait_set_clear+0xc2>
 80177a2:	69da      	ldr	r2, [r3, #28]
 80177a4:	2100      	movs	r1, #0
 80177a6:	0092      	lsls	r2, r2, #2
 80177a8:	f006 f9b4 	bl	801db14 <memset>
 80177ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80177ae:	2200      	movs	r2, #0
 80177b0:	61da      	str	r2, [r3, #28]
 80177b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80177b4:	b138      	cbz	r0, 80177c6 <rcl_wait_set_clear+0xd6>
 80177b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80177b8:	2100      	movs	r1, #0
 80177ba:	0092      	lsls	r2, r2, #2
 80177bc:	f006 f9aa 	bl	801db14 <memset>
 80177c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80177c2:	2200      	movs	r2, #0
 80177c4:	629a      	str	r2, [r3, #40]	; 0x28
 80177c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80177c8:	b140      	cbz	r0, 80177dc <rcl_wait_set_clear+0xec>
 80177ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80177cc:	2100      	movs	r1, #0
 80177ce:	0092      	lsls	r2, r2, #2
 80177d0:	f006 f9a0 	bl	801db14 <memset>
 80177d4:	2300      	movs	r3, #0
 80177d6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80177d8:	4618      	mov	r0, r3
 80177da:	6353      	str	r3, [r2, #52]	; 0x34
 80177dc:	bd10      	pop	{r4, pc}
 80177de:	200b      	movs	r0, #11
 80177e0:	4770      	bx	lr
 80177e2:	f44f 7061 	mov.w	r0, #900	; 0x384
 80177e6:	bd10      	pop	{r4, pc}

080177e8 <rcl_wait_set_resize>:
 80177e8:	2800      	cmp	r0, #0
 80177ea:	f000 8180 	beq.w	8017aee <rcl_wait_set_resize+0x306>
 80177ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177f2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80177f4:	b083      	sub	sp, #12
 80177f6:	4605      	mov	r5, r0
 80177f8:	2c00      	cmp	r4, #0
 80177fa:	f000 817a 	beq.w	8017af2 <rcl_wait_set_resize+0x30a>
 80177fe:	f04f 0900 	mov.w	r9, #0
 8017802:	461f      	mov	r7, r3
 8017804:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8017808:	4688      	mov	r8, r1
 801780a:	4616      	mov	r6, r2
 801780c:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 8017810:	f8c0 9004 	str.w	r9, [r0, #4]
 8017814:	f8c4 9000 	str.w	r9, [r4]
 8017818:	2900      	cmp	r1, #0
 801781a:	f000 80bf 	beq.w	801799c <rcl_wait_set_resize+0x1b4>
 801781e:	008c      	lsls	r4, r1, #2
 8017820:	4652      	mov	r2, sl
 8017822:	6800      	ldr	r0, [r0, #0]
 8017824:	4621      	mov	r1, r4
 8017826:	9301      	str	r3, [sp, #4]
 8017828:	4798      	blx	r3
 801782a:	9b01      	ldr	r3, [sp, #4]
 801782c:	6028      	str	r0, [r5, #0]
 801782e:	2800      	cmp	r0, #0
 8017830:	f000 80f6 	beq.w	8017a20 <rcl_wait_set_resize+0x238>
 8017834:	4622      	mov	r2, r4
 8017836:	4649      	mov	r1, r9
 8017838:	9301      	str	r3, [sp, #4]
 801783a:	f006 f96b 	bl	801db14 <memset>
 801783e:	f8c5 8004 	str.w	r8, [r5, #4]
 8017842:	4652      	mov	r2, sl
 8017844:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8017848:	4621      	mov	r1, r4
 801784a:	9b01      	ldr	r3, [sp, #4]
 801784c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8017850:	f8c8 9004 	str.w	r9, [r8, #4]
 8017854:	4798      	blx	r3
 8017856:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017858:	f8c8 0008 	str.w	r0, [r8, #8]
 801785c:	689b      	ldr	r3, [r3, #8]
 801785e:	2b00      	cmp	r3, #0
 8017860:	f000 814a 	beq.w	8017af8 <rcl_wait_set_resize+0x310>
 8017864:	4622      	mov	r2, r4
 8017866:	4649      	mov	r1, r9
 8017868:	4618      	mov	r0, r3
 801786a:	f006 f953 	bl	801db14 <memset>
 801786e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017870:	f04f 0800 	mov.w	r8, #0
 8017874:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8017878:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 801787c:	f8c5 800c 	str.w	r8, [r5, #12]
 8017880:	f8c4 800c 	str.w	r8, [r4, #12]
 8017884:	2e00      	cmp	r6, #0
 8017886:	f040 809b 	bne.w	80179c0 <rcl_wait_set_resize+0x1d8>
 801788a:	68a8      	ldr	r0, [r5, #8]
 801788c:	b128      	cbz	r0, 801789a <rcl_wait_set_resize+0xb2>
 801788e:	4649      	mov	r1, r9
 8017890:	4790      	blx	r2
 8017892:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017894:	60ae      	str	r6, [r5, #8]
 8017896:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801789a:	f04f 0800 	mov.w	r8, #0
 801789e:	19f6      	adds	r6, r6, r7
 80178a0:	f8c4 8010 	str.w	r8, [r4, #16]
 80178a4:	f040 80a2 	bne.w	80179ec <rcl_wait_set_resize+0x204>
 80178a8:	6960      	ldr	r0, [r4, #20]
 80178aa:	b130      	cbz	r0, 80178ba <rcl_wait_set_resize+0xd2>
 80178ac:	4649      	mov	r1, r9
 80178ae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80178b0:	4798      	blx	r3
 80178b2:	6166      	str	r6, [r4, #20]
 80178b4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80178b6:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80178ba:	2600      	movs	r6, #0
 80178bc:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 80178c0:	616e      	str	r6, [r5, #20]
 80178c2:	6426      	str	r6, [r4, #64]	; 0x40
 80178c4:	2f00      	cmp	r7, #0
 80178c6:	f040 80af 	bne.w	8017a28 <rcl_wait_set_resize+0x240>
 80178ca:	6928      	ldr	r0, [r5, #16]
 80178cc:	b138      	cbz	r0, 80178de <rcl_wait_set_resize+0xf6>
 80178ce:	4649      	mov	r1, r9
 80178d0:	47d0      	blx	sl
 80178d2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80178d4:	612f      	str	r7, [r5, #16]
 80178d6:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80178da:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 80178de:	2600      	movs	r6, #0
 80178e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80178e2:	61ee      	str	r6, [r5, #28]
 80178e4:	61a6      	str	r6, [r4, #24]
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	f040 8093 	bne.w	8017a12 <rcl_wait_set_resize+0x22a>
 80178ec:	69a8      	ldr	r0, [r5, #24]
 80178ee:	b120      	cbz	r0, 80178fa <rcl_wait_set_resize+0x112>
 80178f0:	4649      	mov	r1, r9
 80178f2:	47d0      	blx	sl
 80178f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80178f6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80178f8:	61ab      	str	r3, [r5, #24]
 80178fa:	6a20      	ldr	r0, [r4, #32]
 80178fc:	b128      	cbz	r0, 801790a <rcl_wait_set_resize+0x122>
 80178fe:	4649      	mov	r1, r9
 8017900:	47d0      	blx	sl
 8017902:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017904:	2300      	movs	r3, #0
 8017906:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801790a:	2600      	movs	r6, #0
 801790c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801790e:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8017910:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 8017914:	626e      	str	r6, [r5, #36]	; 0x24
 8017916:	6266      	str	r6, [r4, #36]	; 0x24
 8017918:	2b00      	cmp	r3, #0
 801791a:	f000 8098 	beq.w	8017a4e <rcl_wait_set_resize+0x266>
 801791e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8017922:	463a      	mov	r2, r7
 8017924:	6a28      	ldr	r0, [r5, #32]
 8017926:	4651      	mov	r1, sl
 8017928:	47c8      	blx	r9
 801792a:	6228      	str	r0, [r5, #32]
 801792c:	2800      	cmp	r0, #0
 801792e:	d077      	beq.n	8017a20 <rcl_wait_set_resize+0x238>
 8017930:	4652      	mov	r2, sl
 8017932:	4631      	mov	r1, r6
 8017934:	f006 f8ee 	bl	801db14 <memset>
 8017938:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801793a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801793c:	463a      	mov	r2, r7
 801793e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017940:	4651      	mov	r1, sl
 8017942:	626b      	str	r3, [r5, #36]	; 0x24
 8017944:	62a6      	str	r6, [r4, #40]	; 0x28
 8017946:	47c8      	blx	r9
 8017948:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801794a:	62e0      	str	r0, [r4, #44]	; 0x2c
 801794c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801794e:	2c00      	cmp	r4, #0
 8017950:	f000 80f2 	beq.w	8017b38 <rcl_wait_set_resize+0x350>
 8017954:	4620      	mov	r0, r4
 8017956:	4652      	mov	r2, sl
 8017958:	4631      	mov	r1, r6
 801795a:	f006 f8db 	bl	801db14 <memset>
 801795e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017960:	2600      	movs	r6, #0
 8017962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017964:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8017966:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801796a:	62ee      	str	r6, [r5, #44]	; 0x2c
 801796c:	6326      	str	r6, [r4, #48]	; 0x30
 801796e:	2b00      	cmp	r3, #0
 8017970:	f040 8097 	bne.w	8017aa2 <rcl_wait_set_resize+0x2ba>
 8017974:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8017976:	b120      	cbz	r0, 8017982 <rcl_wait_set_resize+0x19a>
 8017978:	4639      	mov	r1, r7
 801797a:	47c0      	blx	r8
 801797c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801797e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017980:	62ab      	str	r3, [r5, #40]	; 0x28
 8017982:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8017984:	2800      	cmp	r0, #0
 8017986:	d04c      	beq.n	8017a22 <rcl_wait_set_resize+0x23a>
 8017988:	4639      	mov	r1, r7
 801798a:	47c0      	blx	r8
 801798c:	2300      	movs	r3, #0
 801798e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8017990:	4618      	mov	r0, r3
 8017992:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 8017996:	b003      	add	sp, #12
 8017998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801799c:	6800      	ldr	r0, [r0, #0]
 801799e:	b120      	cbz	r0, 80179aa <rcl_wait_set_resize+0x1c2>
 80179a0:	4651      	mov	r1, sl
 80179a2:	47d8      	blx	fp
 80179a4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80179a6:	f8c5 8000 	str.w	r8, [r5]
 80179aa:	68a0      	ldr	r0, [r4, #8]
 80179ac:	2800      	cmp	r0, #0
 80179ae:	f43f af5f 	beq.w	8017870 <rcl_wait_set_resize+0x88>
 80179b2:	4651      	mov	r1, sl
 80179b4:	47d8      	blx	fp
 80179b6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80179b8:	2300      	movs	r3, #0
 80179ba:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80179be:	e757      	b.n	8017870 <rcl_wait_set_resize+0x88>
 80179c0:	00b4      	lsls	r4, r6, #2
 80179c2:	464a      	mov	r2, r9
 80179c4:	68a8      	ldr	r0, [r5, #8]
 80179c6:	4621      	mov	r1, r4
 80179c8:	4798      	blx	r3
 80179ca:	60a8      	str	r0, [r5, #8]
 80179cc:	b340      	cbz	r0, 8017a20 <rcl_wait_set_resize+0x238>
 80179ce:	4622      	mov	r2, r4
 80179d0:	4641      	mov	r1, r8
 80179d2:	f006 f89f 	bl	801db14 <memset>
 80179d6:	f04f 0800 	mov.w	r8, #0
 80179da:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80179dc:	60ee      	str	r6, [r5, #12]
 80179de:	19f6      	adds	r6, r6, r7
 80179e0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80179e4:	f8c4 8010 	str.w	r8, [r4, #16]
 80179e8:	f43f af5e 	beq.w	80178a8 <rcl_wait_set_resize+0xc0>
 80179ec:	00b6      	lsls	r6, r6, #2
 80179ee:	464a      	mov	r2, r9
 80179f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80179f2:	6960      	ldr	r0, [r4, #20]
 80179f4:	4631      	mov	r1, r6
 80179f6:	4798      	blx	r3
 80179f8:	4681      	mov	r9, r0
 80179fa:	6160      	str	r0, [r4, #20]
 80179fc:	2800      	cmp	r0, #0
 80179fe:	f000 8084 	beq.w	8017b0a <rcl_wait_set_resize+0x322>
 8017a02:	4632      	mov	r2, r6
 8017a04:	4641      	mov	r1, r8
 8017a06:	f006 f885 	bl	801db14 <memset>
 8017a0a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017a0c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8017a10:	e753      	b.n	80178ba <rcl_wait_set_resize+0xd2>
 8017a12:	009c      	lsls	r4, r3, #2
 8017a14:	464a      	mov	r2, r9
 8017a16:	69a8      	ldr	r0, [r5, #24]
 8017a18:	4621      	mov	r1, r4
 8017a1a:	47c0      	blx	r8
 8017a1c:	61a8      	str	r0, [r5, #24]
 8017a1e:	bb40      	cbnz	r0, 8017a72 <rcl_wait_set_resize+0x28a>
 8017a20:	200a      	movs	r0, #10
 8017a22:	b003      	add	sp, #12
 8017a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a28:	00bc      	lsls	r4, r7, #2
 8017a2a:	464a      	mov	r2, r9
 8017a2c:	6928      	ldr	r0, [r5, #16]
 8017a2e:	4621      	mov	r1, r4
 8017a30:	47c0      	blx	r8
 8017a32:	6128      	str	r0, [r5, #16]
 8017a34:	2800      	cmp	r0, #0
 8017a36:	d0f3      	beq.n	8017a20 <rcl_wait_set_resize+0x238>
 8017a38:	4622      	mov	r2, r4
 8017a3a:	4631      	mov	r1, r6
 8017a3c:	f006 f86a 	bl	801db14 <memset>
 8017a40:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017a42:	616f      	str	r7, [r5, #20]
 8017a44:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8017a48:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8017a4c:	e747      	b.n	80178de <rcl_wait_set_resize+0xf6>
 8017a4e:	6a28      	ldr	r0, [r5, #32]
 8017a50:	b120      	cbz	r0, 8017a5c <rcl_wait_set_resize+0x274>
 8017a52:	4639      	mov	r1, r7
 8017a54:	47c0      	blx	r8
 8017a56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017a58:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017a5a:	622b      	str	r3, [r5, #32]
 8017a5c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017a5e:	2800      	cmp	r0, #0
 8017a60:	f43f af7e 	beq.w	8017960 <rcl_wait_set_resize+0x178>
 8017a64:	4639      	mov	r1, r7
 8017a66:	47c0      	blx	r8
 8017a68:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017a6a:	2300      	movs	r3, #0
 8017a6c:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8017a70:	e776      	b.n	8017960 <rcl_wait_set_resize+0x178>
 8017a72:	4622      	mov	r2, r4
 8017a74:	4631      	mov	r1, r6
 8017a76:	f006 f84d 	bl	801db14 <memset>
 8017a7a:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8017a7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017a7e:	464a      	mov	r2, r9
 8017a80:	6a38      	ldr	r0, [r7, #32]
 8017a82:	4621      	mov	r1, r4
 8017a84:	61eb      	str	r3, [r5, #28]
 8017a86:	61fe      	str	r6, [r7, #28]
 8017a88:	47c0      	blx	r8
 8017a8a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017a8c:	6238      	str	r0, [r7, #32]
 8017a8e:	6a1f      	ldr	r7, [r3, #32]
 8017a90:	2f00      	cmp	r7, #0
 8017a92:	d04a      	beq.n	8017b2a <rcl_wait_set_resize+0x342>
 8017a94:	4622      	mov	r2, r4
 8017a96:	4631      	mov	r1, r6
 8017a98:	4638      	mov	r0, r7
 8017a9a:	f006 f83b 	bl	801db14 <memset>
 8017a9e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017aa0:	e733      	b.n	801790a <rcl_wait_set_resize+0x122>
 8017aa2:	009c      	lsls	r4, r3, #2
 8017aa4:	463a      	mov	r2, r7
 8017aa6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8017aa8:	4621      	mov	r1, r4
 8017aaa:	47c8      	blx	r9
 8017aac:	62a8      	str	r0, [r5, #40]	; 0x28
 8017aae:	2800      	cmp	r0, #0
 8017ab0:	d0b6      	beq.n	8017a20 <rcl_wait_set_resize+0x238>
 8017ab2:	4622      	mov	r2, r4
 8017ab4:	4631      	mov	r1, r6
 8017ab6:	f006 f82d 	bl	801db14 <memset>
 8017aba:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8017abe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017ac0:	463a      	mov	r2, r7
 8017ac2:	4621      	mov	r1, r4
 8017ac4:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8017ac8:	62eb      	str	r3, [r5, #44]	; 0x2c
 8017aca:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 8017ace:	47c8      	blx	r9
 8017ad0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017ad2:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8017ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d034      	beq.n	8017b46 <rcl_wait_set_resize+0x35e>
 8017adc:	4622      	mov	r2, r4
 8017ade:	4631      	mov	r1, r6
 8017ae0:	4618      	mov	r0, r3
 8017ae2:	f006 f817 	bl	801db14 <memset>
 8017ae6:	4630      	mov	r0, r6
 8017ae8:	b003      	add	sp, #12
 8017aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017aee:	200b      	movs	r0, #11
 8017af0:	4770      	bx	lr
 8017af2:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017af6:	e794      	b.n	8017a22 <rcl_wait_set_resize+0x23a>
 8017af8:	6828      	ldr	r0, [r5, #0]
 8017afa:	4651      	mov	r1, sl
 8017afc:	9301      	str	r3, [sp, #4]
 8017afe:	47d8      	blx	fp
 8017b00:	9b01      	ldr	r3, [sp, #4]
 8017b02:	200a      	movs	r0, #10
 8017b04:	e9c5 3300 	strd	r3, r3, [r5]
 8017b08:	e78b      	b.n	8017a22 <rcl_wait_set_resize+0x23a>
 8017b0a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017b0c:	68a8      	ldr	r0, [r5, #8]
 8017b0e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8017b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b12:	4798      	blx	r3
 8017b14:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017b16:	6928      	ldr	r0, [r5, #16]
 8017b18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017b1a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8017b1c:	e9c5 9902 	strd	r9, r9, [r5, #8]
 8017b20:	4790      	blx	r2
 8017b22:	200a      	movs	r0, #10
 8017b24:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8017b28:	e77b      	b.n	8017a22 <rcl_wait_set_resize+0x23a>
 8017b2a:	69a8      	ldr	r0, [r5, #24]
 8017b2c:	4649      	mov	r1, r9
 8017b2e:	47d0      	blx	sl
 8017b30:	200a      	movs	r0, #10
 8017b32:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8017b36:	e774      	b.n	8017a22 <rcl_wait_set_resize+0x23a>
 8017b38:	6a28      	ldr	r0, [r5, #32]
 8017b3a:	4639      	mov	r1, r7
 8017b3c:	47c0      	blx	r8
 8017b3e:	200a      	movs	r0, #10
 8017b40:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8017b44:	e76d      	b.n	8017a22 <rcl_wait_set_resize+0x23a>
 8017b46:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8017b48:	4639      	mov	r1, r7
 8017b4a:	9301      	str	r3, [sp, #4]
 8017b4c:	47c0      	blx	r8
 8017b4e:	9b01      	ldr	r3, [sp, #4]
 8017b50:	200a      	movs	r0, #10
 8017b52:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8017b56:	e764      	b.n	8017a22 <rcl_wait_set_resize+0x23a>

08017b58 <rcl_wait_set_init>:
 8017b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b5c:	b085      	sub	sp, #20
 8017b5e:	4605      	mov	r5, r0
 8017b60:	460e      	mov	r6, r1
 8017b62:	4617      	mov	r7, r2
 8017b64:	a812      	add	r0, sp, #72	; 0x48
 8017b66:	4698      	mov	r8, r3
 8017b68:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8017b6c:	f7f7 f820 	bl	800ebb0 <rcutils_allocator_is_valid>
 8017b70:	2d00      	cmp	r5, #0
 8017b72:	d072      	beq.n	8017c5a <rcl_wait_set_init+0x102>
 8017b74:	f080 0001 	eor.w	r0, r0, #1
 8017b78:	b2c0      	uxtb	r0, r0
 8017b7a:	2800      	cmp	r0, #0
 8017b7c:	d16d      	bne.n	8017c5a <rcl_wait_set_init+0x102>
 8017b7e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8017b82:	f1ba 0f00 	cmp.w	sl, #0
 8017b86:	d004      	beq.n	8017b92 <rcl_wait_set_init+0x3a>
 8017b88:	2464      	movs	r4, #100	; 0x64
 8017b8a:	4620      	mov	r0, r4
 8017b8c:	b005      	add	sp, #20
 8017b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b92:	f1b9 0f00 	cmp.w	r9, #0
 8017b96:	d060      	beq.n	8017c5a <rcl_wait_set_init+0x102>
 8017b98:	4648      	mov	r0, r9
 8017b9a:	f7fd fee5 	bl	8015968 <rcl_context_is_valid>
 8017b9e:	2800      	cmp	r0, #0
 8017ba0:	d068      	beq.n	8017c74 <rcl_wait_set_init+0x11c>
 8017ba2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017ba4:	205c      	movs	r0, #92	; 0x5c
 8017ba6:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017ba8:	4798      	blx	r3
 8017baa:	6328      	str	r0, [r5, #48]	; 0x30
 8017bac:	2800      	cmp	r0, #0
 8017bae:	d063      	beq.n	8017c78 <rcl_wait_set_init+0x120>
 8017bb0:	225c      	movs	r2, #92	; 0x5c
 8017bb2:	4651      	mov	r1, sl
 8017bb4:	f005 ffae 	bl	801db14 <memset>
 8017bb8:	ac12      	add	r4, sp, #72	; 0x48
 8017bba:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 8017bbe:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8017bc2:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 8017bc6:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 8017bca:	eb03 0e02 	add.w	lr, r3, r2
 8017bce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017bd0:	f8d9 9000 	ldr.w	r9, [r9]
 8017bd4:	449e      	add	lr, r3
 8017bd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017bd8:	e9cb aa01 	strd	sl, sl, [fp, #4]
 8017bdc:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8017be0:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8017be4:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 8017be8:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 8017bec:	44be      	add	lr, r7
 8017bee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017bf2:	6823      	ldr	r3, [r4, #0]
 8017bf4:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 8017bf8:	f109 0028 	add.w	r0, r9, #40	; 0x28
 8017bfc:	f8cc 3000 	str.w	r3, [ip]
 8017c00:	f002 ff8e 	bl	801ab20 <rmw_create_wait_set>
 8017c04:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017c06:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 8017c0a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8017c0c:	b350      	cbz	r0, 8017c64 <rcl_wait_set_init+0x10c>
 8017c0e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017c10:	4643      	mov	r3, r8
 8017c12:	463a      	mov	r2, r7
 8017c14:	4631      	mov	r1, r6
 8017c16:	9402      	str	r4, [sp, #8]
 8017c18:	4628      	mov	r0, r5
 8017c1a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017c1c:	9401      	str	r4, [sp, #4]
 8017c1e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017c20:	9400      	str	r4, [sp, #0]
 8017c22:	f7ff fde1 	bl	80177e8 <rcl_wait_set_resize>
 8017c26:	4604      	mov	r4, r0
 8017c28:	2800      	cmp	r0, #0
 8017c2a:	d0ae      	beq.n	8017b8a <rcl_wait_set_init+0x32>
 8017c2c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017c2e:	bb2b      	cbnz	r3, 8017c7c <rcl_wait_set_init+0x124>
 8017c30:	2600      	movs	r6, #0
 8017c32:	4628      	mov	r0, r5
 8017c34:	4633      	mov	r3, r6
 8017c36:	4632      	mov	r2, r6
 8017c38:	4631      	mov	r1, r6
 8017c3a:	9600      	str	r6, [sp, #0]
 8017c3c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8017c40:	f7ff fdd2 	bl	80177e8 <rcl_wait_set_resize>
 8017c44:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8017c46:	2800      	cmp	r0, #0
 8017c48:	d09f      	beq.n	8017b8a <rcl_wait_set_init+0x32>
 8017c4a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8017c4c:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8017c4e:	4798      	blx	r3
 8017c50:	4620      	mov	r0, r4
 8017c52:	632e      	str	r6, [r5, #48]	; 0x30
 8017c54:	b005      	add	sp, #20
 8017c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c5a:	240b      	movs	r4, #11
 8017c5c:	4620      	mov	r0, r4
 8017c5e:	b005      	add	sp, #20
 8017c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c64:	2401      	movs	r4, #1
 8017c66:	f002 ff65 	bl	801ab34 <rmw_destroy_wait_set>
 8017c6a:	2800      	cmp	r0, #0
 8017c6c:	bf18      	it	ne
 8017c6e:	f44f 7461 	movne.w	r4, #900	; 0x384
 8017c72:	e7dd      	b.n	8017c30 <rcl_wait_set_init+0xd8>
 8017c74:	2465      	movs	r4, #101	; 0x65
 8017c76:	e788      	b.n	8017b8a <rcl_wait_set_init+0x32>
 8017c78:	240a      	movs	r4, #10
 8017c7a:	e786      	b.n	8017b8a <rcl_wait_set_init+0x32>
 8017c7c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8017c7e:	e7f2      	b.n	8017c66 <rcl_wait_set_init+0x10e>

08017c80 <rcl_wait_set_add_guard_condition>:
 8017c80:	b318      	cbz	r0, 8017cca <rcl_wait_set_add_guard_condition+0x4a>
 8017c82:	b538      	push	{r3, r4, r5, lr}
 8017c84:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017c86:	4604      	mov	r4, r0
 8017c88:	b30b      	cbz	r3, 8017cce <rcl_wait_set_add_guard_condition+0x4e>
 8017c8a:	b319      	cbz	r1, 8017cd4 <rcl_wait_set_add_guard_condition+0x54>
 8017c8c:	68dd      	ldr	r5, [r3, #12]
 8017c8e:	68c0      	ldr	r0, [r0, #12]
 8017c90:	4285      	cmp	r5, r0
 8017c92:	d217      	bcs.n	8017cc4 <rcl_wait_set_add_guard_condition+0x44>
 8017c94:	1c68      	adds	r0, r5, #1
 8017c96:	60d8      	str	r0, [r3, #12]
 8017c98:	68a3      	ldr	r3, [r4, #8]
 8017c9a:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8017c9e:	b102      	cbz	r2, 8017ca2 <rcl_wait_set_add_guard_condition+0x22>
 8017ca0:	6015      	str	r5, [r2, #0]
 8017ca2:	4608      	mov	r0, r1
 8017ca4:	f004 ff96 	bl	801cbd4 <rcl_guard_condition_get_rmw_handle>
 8017ca8:	b150      	cbz	r0, 8017cc0 <rcl_wait_set_add_guard_condition+0x40>
 8017caa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017cac:	6842      	ldr	r2, [r0, #4]
 8017cae:	2000      	movs	r0, #0
 8017cb0:	695b      	ldr	r3, [r3, #20]
 8017cb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017cb6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017cb8:	6913      	ldr	r3, [r2, #16]
 8017cba:	3301      	adds	r3, #1
 8017cbc:	6113      	str	r3, [r2, #16]
 8017cbe:	bd38      	pop	{r3, r4, r5, pc}
 8017cc0:	2001      	movs	r0, #1
 8017cc2:	bd38      	pop	{r3, r4, r5, pc}
 8017cc4:	f240 3086 	movw	r0, #902	; 0x386
 8017cc8:	bd38      	pop	{r3, r4, r5, pc}
 8017cca:	200b      	movs	r0, #11
 8017ccc:	4770      	bx	lr
 8017cce:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017cd2:	bd38      	pop	{r3, r4, r5, pc}
 8017cd4:	200b      	movs	r0, #11
 8017cd6:	bd38      	pop	{r3, r4, r5, pc}

08017cd8 <rcl_wait_set_add_timer>:
 8017cd8:	b328      	cbz	r0, 8017d26 <rcl_wait_set_add_timer+0x4e>
 8017cda:	b538      	push	{r3, r4, r5, lr}
 8017cdc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017cde:	4604      	mov	r4, r0
 8017ce0:	b31b      	cbz	r3, 8017d2a <rcl_wait_set_add_timer+0x52>
 8017ce2:	b329      	cbz	r1, 8017d30 <rcl_wait_set_add_timer+0x58>
 8017ce4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8017ce6:	6965      	ldr	r5, [r4, #20]
 8017ce8:	42a8      	cmp	r0, r5
 8017cea:	d219      	bcs.n	8017d20 <rcl_wait_set_add_timer+0x48>
 8017cec:	1c45      	adds	r5, r0, #1
 8017cee:	641d      	str	r5, [r3, #64]	; 0x40
 8017cf0:	6923      	ldr	r3, [r4, #16]
 8017cf2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8017cf6:	b102      	cbz	r2, 8017cfa <rcl_wait_set_add_timer+0x22>
 8017cf8:	6010      	str	r0, [r2, #0]
 8017cfa:	4608      	mov	r0, r1
 8017cfc:	f7ff fb9a 	bl	8017434 <rcl_timer_get_guard_condition>
 8017d00:	b168      	cbz	r0, 8017d1e <rcl_wait_set_add_timer+0x46>
 8017d02:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017d04:	68e3      	ldr	r3, [r4, #12]
 8017d06:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8017d08:	3b01      	subs	r3, #1
 8017d0a:	441d      	add	r5, r3
 8017d0c:	f004 ff62 	bl	801cbd4 <rcl_guard_condition_get_rmw_handle>
 8017d10:	b180      	cbz	r0, 8017d34 <rcl_wait_set_add_timer+0x5c>
 8017d12:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017d14:	6842      	ldr	r2, [r0, #4]
 8017d16:	2000      	movs	r0, #0
 8017d18:	695b      	ldr	r3, [r3, #20]
 8017d1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017d1e:	bd38      	pop	{r3, r4, r5, pc}
 8017d20:	f240 3086 	movw	r0, #902	; 0x386
 8017d24:	bd38      	pop	{r3, r4, r5, pc}
 8017d26:	200b      	movs	r0, #11
 8017d28:	4770      	bx	lr
 8017d2a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017d2e:	bd38      	pop	{r3, r4, r5, pc}
 8017d30:	200b      	movs	r0, #11
 8017d32:	bd38      	pop	{r3, r4, r5, pc}
 8017d34:	2001      	movs	r0, #1
 8017d36:	bd38      	pop	{r3, r4, r5, pc}

08017d38 <rcl_wait_set_add_client>:
 8017d38:	b318      	cbz	r0, 8017d82 <rcl_wait_set_add_client+0x4a>
 8017d3a:	b538      	push	{r3, r4, r5, lr}
 8017d3c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017d3e:	4604      	mov	r4, r0
 8017d40:	b30b      	cbz	r3, 8017d86 <rcl_wait_set_add_client+0x4e>
 8017d42:	b319      	cbz	r1, 8017d8c <rcl_wait_set_add_client+0x54>
 8017d44:	699d      	ldr	r5, [r3, #24]
 8017d46:	69c0      	ldr	r0, [r0, #28]
 8017d48:	4285      	cmp	r5, r0
 8017d4a:	d217      	bcs.n	8017d7c <rcl_wait_set_add_client+0x44>
 8017d4c:	1c68      	adds	r0, r5, #1
 8017d4e:	6198      	str	r0, [r3, #24]
 8017d50:	69a3      	ldr	r3, [r4, #24]
 8017d52:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8017d56:	b102      	cbz	r2, 8017d5a <rcl_wait_set_add_client+0x22>
 8017d58:	6015      	str	r5, [r2, #0]
 8017d5a:	4608      	mov	r0, r1
 8017d5c:	f7fd fd1a 	bl	8015794 <rcl_client_get_rmw_handle>
 8017d60:	b150      	cbz	r0, 8017d78 <rcl_wait_set_add_client+0x40>
 8017d62:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017d64:	6842      	ldr	r2, [r0, #4]
 8017d66:	2000      	movs	r0, #0
 8017d68:	6a1b      	ldr	r3, [r3, #32]
 8017d6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017d6e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017d70:	69d3      	ldr	r3, [r2, #28]
 8017d72:	3301      	adds	r3, #1
 8017d74:	61d3      	str	r3, [r2, #28]
 8017d76:	bd38      	pop	{r3, r4, r5, pc}
 8017d78:	2001      	movs	r0, #1
 8017d7a:	bd38      	pop	{r3, r4, r5, pc}
 8017d7c:	f240 3086 	movw	r0, #902	; 0x386
 8017d80:	bd38      	pop	{r3, r4, r5, pc}
 8017d82:	200b      	movs	r0, #11
 8017d84:	4770      	bx	lr
 8017d86:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017d8a:	bd38      	pop	{r3, r4, r5, pc}
 8017d8c:	200b      	movs	r0, #11
 8017d8e:	bd38      	pop	{r3, r4, r5, pc}

08017d90 <rcl_wait_set_add_service>:
 8017d90:	b318      	cbz	r0, 8017dda <rcl_wait_set_add_service+0x4a>
 8017d92:	b538      	push	{r3, r4, r5, lr}
 8017d94:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017d96:	4604      	mov	r4, r0
 8017d98:	b30b      	cbz	r3, 8017dde <rcl_wait_set_add_service+0x4e>
 8017d9a:	b319      	cbz	r1, 8017de4 <rcl_wait_set_add_service+0x54>
 8017d9c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8017d9e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8017da0:	4285      	cmp	r5, r0
 8017da2:	d217      	bcs.n	8017dd4 <rcl_wait_set_add_service+0x44>
 8017da4:	1c68      	adds	r0, r5, #1
 8017da6:	6258      	str	r0, [r3, #36]	; 0x24
 8017da8:	6a23      	ldr	r3, [r4, #32]
 8017daa:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8017dae:	b102      	cbz	r2, 8017db2 <rcl_wait_set_add_service+0x22>
 8017db0:	6015      	str	r5, [r2, #0]
 8017db2:	4608      	mov	r0, r1
 8017db4:	f7fe fcf2 	bl	801679c <rcl_service_get_rmw_handle>
 8017db8:	b150      	cbz	r0, 8017dd0 <rcl_wait_set_add_service+0x40>
 8017dba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017dbc:	6842      	ldr	r2, [r0, #4]
 8017dbe:	2000      	movs	r0, #0
 8017dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017dc6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017dc8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8017dca:	3301      	adds	r3, #1
 8017dcc:	6293      	str	r3, [r2, #40]	; 0x28
 8017dce:	bd38      	pop	{r3, r4, r5, pc}
 8017dd0:	2001      	movs	r0, #1
 8017dd2:	bd38      	pop	{r3, r4, r5, pc}
 8017dd4:	f240 3086 	movw	r0, #902	; 0x386
 8017dd8:	bd38      	pop	{r3, r4, r5, pc}
 8017dda:	200b      	movs	r0, #11
 8017ddc:	4770      	bx	lr
 8017dde:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017de2:	bd38      	pop	{r3, r4, r5, pc}
 8017de4:	200b      	movs	r0, #11
 8017de6:	bd38      	pop	{r3, r4, r5, pc}

08017de8 <rcl_wait>:
 8017de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017dec:	ed2d 8b02 	vpush	{d8}
 8017df0:	b08d      	sub	sp, #52	; 0x34
 8017df2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8017df6:	2800      	cmp	r0, #0
 8017df8:	f000 814f 	beq.w	801809a <rcl_wait+0x2b2>
 8017dfc:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8017dfe:	4605      	mov	r5, r0
 8017e00:	2e00      	cmp	r6, #0
 8017e02:	f000 811a 	beq.w	801803a <rcl_wait+0x252>
 8017e06:	6843      	ldr	r3, [r0, #4]
 8017e08:	b983      	cbnz	r3, 8017e2c <rcl_wait+0x44>
 8017e0a:	68eb      	ldr	r3, [r5, #12]
 8017e0c:	b973      	cbnz	r3, 8017e2c <rcl_wait+0x44>
 8017e0e:	696b      	ldr	r3, [r5, #20]
 8017e10:	b963      	cbnz	r3, 8017e2c <rcl_wait+0x44>
 8017e12:	69eb      	ldr	r3, [r5, #28]
 8017e14:	b953      	cbnz	r3, 8017e2c <rcl_wait+0x44>
 8017e16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8017e18:	b943      	cbnz	r3, 8017e2c <rcl_wait+0x44>
 8017e1a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8017e1c:	b933      	cbnz	r3, 8017e2c <rcl_wait+0x44>
 8017e1e:	f240 3085 	movw	r0, #901	; 0x385
 8017e22:	b00d      	add	sp, #52	; 0x34
 8017e24:	ecbd 8b02 	vpop	{d8}
 8017e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e2c:	9b04      	ldr	r3, [sp, #16]
 8017e2e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8017e30:	2b01      	cmp	r3, #1
 8017e32:	9b05      	ldr	r3, [sp, #20]
 8017e34:	f173 0300 	sbcs.w	r3, r3, #0
 8017e38:	f2c0 80f8 	blt.w	801802c <rcl_wait+0x244>
 8017e3c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8017e40:	2a00      	cmp	r2, #0
 8017e42:	f000 810f 	beq.w	8018064 <rcl_wait+0x27c>
 8017e46:	2400      	movs	r4, #0
 8017e48:	4613      	mov	r3, r2
 8017e4a:	f240 3921 	movw	r9, #801	; 0x321
 8017e4e:	4632      	mov	r2, r6
 8017e50:	46a2      	mov	sl, r4
 8017e52:	46a3      	mov	fp, r4
 8017e54:	ed9f 8b98 	vldr	d8, [pc, #608]	; 80180b8 <rcl_wait+0x2d0>
 8017e58:	e014      	b.n	8017e84 <rcl_wait+0x9c>
 8017e5a:	2800      	cmp	r0, #0
 8017e5c:	d1e1      	bne.n	8017e22 <rcl_wait+0x3a>
 8017e5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017e62:	4542      	cmp	r2, r8
 8017e64:	eb73 0107 	sbcs.w	r1, r3, r7
 8017e68:	da03      	bge.n	8017e72 <rcl_wait+0x8a>
 8017e6a:	4690      	mov	r8, r2
 8017e6c:	461f      	mov	r7, r3
 8017e6e:	f04f 0b01 	mov.w	fp, #1
 8017e72:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8017e74:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8017e76:	3401      	adds	r4, #1
 8017e78:	f14a 0a00 	adc.w	sl, sl, #0
 8017e7c:	429c      	cmp	r4, r3
 8017e7e:	f17a 0100 	sbcs.w	r1, sl, #0
 8017e82:	d228      	bcs.n	8017ed6 <rcl_wait+0xee>
 8017e84:	6928      	ldr	r0, [r5, #16]
 8017e86:	a908      	add	r1, sp, #32
 8017e88:	00a6      	lsls	r6, r4, #2
 8017e8a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8017e8e:	2800      	cmp	r0, #0
 8017e90:	d0f1      	beq.n	8017e76 <rcl_wait+0x8e>
 8017e92:	68eb      	ldr	r3, [r5, #12]
 8017e94:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8017e98:	4423      	add	r3, r4
 8017e9a:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8017e9e:	f1be 0f00 	cmp.w	lr, #0
 8017ea2:	d006      	beq.n	8017eb2 <rcl_wait+0xca>
 8017ea4:	6913      	ldr	r3, [r2, #16]
 8017ea6:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8017eaa:	3301      	adds	r3, #1
 8017eac:	6113      	str	r3, [r2, #16]
 8017eae:	692b      	ldr	r3, [r5, #16]
 8017eb0:	5998      	ldr	r0, [r3, r6]
 8017eb2:	ed8d 8b08 	vstr	d8, [sp, #32]
 8017eb6:	f7ff fa8b 	bl	80173d0 <rcl_timer_get_time_until_next_call>
 8017eba:	4548      	cmp	r0, r9
 8017ebc:	d1cd      	bne.n	8017e5a <rcl_wait+0x72>
 8017ebe:	692b      	ldr	r3, [r5, #16]
 8017ec0:	2200      	movs	r2, #0
 8017ec2:	3401      	adds	r4, #1
 8017ec4:	519a      	str	r2, [r3, r6]
 8017ec6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8017ec8:	f14a 0a00 	adc.w	sl, sl, #0
 8017ecc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8017ece:	429c      	cmp	r4, r3
 8017ed0:	f17a 0100 	sbcs.w	r1, sl, #0
 8017ed4:	d3d6      	bcc.n	8017e84 <rcl_wait+0x9c>
 8017ed6:	4659      	mov	r1, fp
 8017ed8:	4616      	mov	r6, r2
 8017eda:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8017ede:	4313      	orrs	r3, r2
 8017ee0:	f040 80b4 	bne.w	801804c <rcl_wait+0x264>
 8017ee4:	2300      	movs	r3, #0
 8017ee6:	2200      	movs	r2, #0
 8017ee8:	460c      	mov	r4, r1
 8017eea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017eee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017ef2:	ab08      	add	r3, sp, #32
 8017ef4:	9302      	str	r3, [sp, #8]
 8017ef6:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8017efa:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8017efc:	f106 0110 	add.w	r1, r6, #16
 8017f00:	9300      	str	r3, [sp, #0]
 8017f02:	1d30      	adds	r0, r6, #4
 8017f04:	f106 031c 	add.w	r3, r6, #28
 8017f08:	9201      	str	r2, [sp, #4]
 8017f0a:	f106 0228 	add.w	r2, r6, #40	; 0x28
 8017f0e:	f002 fca3 	bl	801a858 <rmw_wait>
 8017f12:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017f14:	4680      	mov	r8, r0
 8017f16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017f18:	b1e2      	cbz	r2, 8017f54 <rcl_wait+0x16c>
 8017f1a:	f04f 0900 	mov.w	r9, #0
 8017f1e:	464f      	mov	r7, r9
 8017f20:	692a      	ldr	r2, [r5, #16]
 8017f22:	f10d 011f 	add.w	r1, sp, #31
 8017f26:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8017f2a:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8017f2e:	b160      	cbz	r0, 8017f4a <rcl_wait+0x162>
 8017f30:	f88d 701f 	strb.w	r7, [sp, #31]
 8017f34:	f7ff fa10 	bl	8017358 <rcl_timer_is_ready>
 8017f38:	2800      	cmp	r0, #0
 8017f3a:	f47f af72 	bne.w	8017e22 <rcl_wait+0x3a>
 8017f3e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8017f42:	b90b      	cbnz	r3, 8017f48 <rcl_wait+0x160>
 8017f44:	692a      	ldr	r2, [r5, #16]
 8017f46:	5193      	str	r3, [r2, r6]
 8017f48:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017f4a:	f109 0901 	add.w	r9, r9, #1
 8017f4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8017f50:	454a      	cmp	r2, r9
 8017f52:	d8e5      	bhi.n	8017f20 <rcl_wait+0x138>
 8017f54:	f038 0002 	bics.w	r0, r8, #2
 8017f58:	d176      	bne.n	8018048 <rcl_wait+0x260>
 8017f5a:	686f      	ldr	r7, [r5, #4]
 8017f5c:	b17f      	cbz	r7, 8017f7e <rcl_wait+0x196>
 8017f5e:	4602      	mov	r2, r0
 8017f60:	e002      	b.n	8017f68 <rcl_wait+0x180>
 8017f62:	3201      	adds	r2, #1
 8017f64:	42ba      	cmp	r2, r7
 8017f66:	d00a      	beq.n	8017f7e <rcl_wait+0x196>
 8017f68:	6899      	ldr	r1, [r3, #8]
 8017f6a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017f6e:	2900      	cmp	r1, #0
 8017f70:	d1f7      	bne.n	8017f62 <rcl_wait+0x17a>
 8017f72:	682e      	ldr	r6, [r5, #0]
 8017f74:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017f78:	3201      	adds	r2, #1
 8017f7a:	42ba      	cmp	r2, r7
 8017f7c:	d1f4      	bne.n	8017f68 <rcl_wait+0x180>
 8017f7e:	68ef      	ldr	r7, [r5, #12]
 8017f80:	b17f      	cbz	r7, 8017fa2 <rcl_wait+0x1ba>
 8017f82:	2200      	movs	r2, #0
 8017f84:	e002      	b.n	8017f8c <rcl_wait+0x1a4>
 8017f86:	3201      	adds	r2, #1
 8017f88:	42ba      	cmp	r2, r7
 8017f8a:	d00a      	beq.n	8017fa2 <rcl_wait+0x1ba>
 8017f8c:	6959      	ldr	r1, [r3, #20]
 8017f8e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017f92:	2900      	cmp	r1, #0
 8017f94:	d1f7      	bne.n	8017f86 <rcl_wait+0x19e>
 8017f96:	68ae      	ldr	r6, [r5, #8]
 8017f98:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017f9c:	3201      	adds	r2, #1
 8017f9e:	42ba      	cmp	r2, r7
 8017fa0:	d1f4      	bne.n	8017f8c <rcl_wait+0x1a4>
 8017fa2:	69ef      	ldr	r7, [r5, #28]
 8017fa4:	b17f      	cbz	r7, 8017fc6 <rcl_wait+0x1de>
 8017fa6:	2200      	movs	r2, #0
 8017fa8:	e002      	b.n	8017fb0 <rcl_wait+0x1c8>
 8017faa:	3201      	adds	r2, #1
 8017fac:	42ba      	cmp	r2, r7
 8017fae:	d00a      	beq.n	8017fc6 <rcl_wait+0x1de>
 8017fb0:	6a19      	ldr	r1, [r3, #32]
 8017fb2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017fb6:	2900      	cmp	r1, #0
 8017fb8:	d1f7      	bne.n	8017faa <rcl_wait+0x1c2>
 8017fba:	69ae      	ldr	r6, [r5, #24]
 8017fbc:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017fc0:	3201      	adds	r2, #1
 8017fc2:	42ba      	cmp	r2, r7
 8017fc4:	d1f4      	bne.n	8017fb0 <rcl_wait+0x1c8>
 8017fc6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8017fc8:	b17f      	cbz	r7, 8017fea <rcl_wait+0x202>
 8017fca:	2200      	movs	r2, #0
 8017fcc:	e002      	b.n	8017fd4 <rcl_wait+0x1ec>
 8017fce:	3201      	adds	r2, #1
 8017fd0:	42ba      	cmp	r2, r7
 8017fd2:	d00a      	beq.n	8017fea <rcl_wait+0x202>
 8017fd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8017fd6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017fda:	2900      	cmp	r1, #0
 8017fdc:	d1f7      	bne.n	8017fce <rcl_wait+0x1e6>
 8017fde:	6a2e      	ldr	r6, [r5, #32]
 8017fe0:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017fe4:	3201      	adds	r2, #1
 8017fe6:	42ba      	cmp	r2, r7
 8017fe8:	d1f4      	bne.n	8017fd4 <rcl_wait+0x1ec>
 8017fea:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 8017fec:	b17f      	cbz	r7, 801800e <rcl_wait+0x226>
 8017fee:	2200      	movs	r2, #0
 8017ff0:	e002      	b.n	8017ff8 <rcl_wait+0x210>
 8017ff2:	3201      	adds	r2, #1
 8017ff4:	42ba      	cmp	r2, r7
 8017ff6:	d00a      	beq.n	801800e <rcl_wait+0x226>
 8017ff8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8017ffa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017ffe:	2900      	cmp	r1, #0
 8018000:	d1f7      	bne.n	8017ff2 <rcl_wait+0x20a>
 8018002:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8018004:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018008:	3201      	adds	r2, #1
 801800a:	42ba      	cmp	r2, r7
 801800c:	d1f4      	bne.n	8017ff8 <rcl_wait+0x210>
 801800e:	f1b8 0f02 	cmp.w	r8, #2
 8018012:	f47f af06 	bne.w	8017e22 <rcl_wait+0x3a>
 8018016:	f084 0301 	eor.w	r3, r4, #1
 801801a:	b2db      	uxtb	r3, r3
 801801c:	2b00      	cmp	r3, #0
 801801e:	bf18      	it	ne
 8018020:	2002      	movne	r0, #2
 8018022:	b00d      	add	sp, #52	; 0x34
 8018024:	ecbd 8b02 	vpop	{d8}
 8018028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801802c:	2a00      	cmp	r2, #0
 801802e:	d03a      	beq.n	80180a6 <rcl_wait+0x2be>
 8018030:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8018034:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8018038:	e705      	b.n	8017e46 <rcl_wait+0x5e>
 801803a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801803e:	b00d      	add	sp, #52	; 0x34
 8018040:	ecbd 8b02 	vpop	{d8}
 8018044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018048:	2001      	movs	r0, #1
 801804a:	e6ea      	b.n	8017e22 <rcl_wait+0x3a>
 801804c:	9b04      	ldr	r3, [sp, #16]
 801804e:	460c      	mov	r4, r1
 8018050:	2b01      	cmp	r3, #1
 8018052:	9b05      	ldr	r3, [sp, #20]
 8018054:	f173 0300 	sbcs.w	r3, r3, #0
 8018058:	bfa8      	it	ge
 801805a:	f044 0401 	orrge.w	r4, r4, #1
 801805e:	b914      	cbnz	r4, 8018066 <rcl_wait+0x27e>
 8018060:	4623      	mov	r3, r4
 8018062:	e747      	b.n	8017ef4 <rcl_wait+0x10c>
 8018064:	4611      	mov	r1, r2
 8018066:	2f00      	cmp	r7, #0
 8018068:	da02      	bge.n	8018070 <rcl_wait+0x288>
 801806a:	f04f 0800 	mov.w	r8, #0
 801806e:	4647      	mov	r7, r8
 8018070:	460c      	mov	r4, r1
 8018072:	4640      	mov	r0, r8
 8018074:	4639      	mov	r1, r7
 8018076:	a312      	add	r3, pc, #72	; (adr r3, 80180c0 <rcl_wait+0x2d8>)
 8018078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801807c:	f7e8 f948 	bl	8000310 <__aeabi_ldivmod>
 8018080:	a30f      	add	r3, pc, #60	; (adr r3, 80180c0 <rcl_wait+0x2d8>)
 8018082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018086:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801808a:	4640      	mov	r0, r8
 801808c:	4639      	mov	r1, r7
 801808e:	f7e8 f93f 	bl	8000310 <__aeabi_ldivmod>
 8018092:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8018096:	ab08      	add	r3, sp, #32
 8018098:	e72c      	b.n	8017ef4 <rcl_wait+0x10c>
 801809a:	200b      	movs	r0, #11
 801809c:	b00d      	add	sp, #52	; 0x34
 801809e:	ecbd 8b02 	vpop	{d8}
 80180a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180a6:	4611      	mov	r1, r2
 80180a8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80180ac:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80180b0:	e713      	b.n	8017eda <rcl_wait+0xf2>
 80180b2:	bf00      	nop
 80180b4:	f3af 8000 	nop.w
 80180b8:	ffffffff 	.word	0xffffffff
 80180bc:	7fffffff 	.word	0x7fffffff
 80180c0:	3b9aca00 	.word	0x3b9aca00
 80180c4:	00000000 	.word	0x00000000

080180c8 <rcl_action_take_goal_response>:
 80180c8:	2800      	cmp	r0, #0
 80180ca:	d039      	beq.n	8018140 <rcl_action_take_goal_response+0x78>
 80180cc:	b570      	push	{r4, r5, r6, lr}
 80180ce:	4604      	mov	r4, r0
 80180d0:	6800      	ldr	r0, [r0, #0]
 80180d2:	b380      	cbz	r0, 8018136 <rcl_action_take_goal_response+0x6e>
 80180d4:	460e      	mov	r6, r1
 80180d6:	4615      	mov	r5, r2
 80180d8:	f7fd fc1e 	bl	8015918 <rcl_client_is_valid>
 80180dc:	b330      	cbz	r0, 801812c <rcl_action_take_goal_response+0x64>
 80180de:	6820      	ldr	r0, [r4, #0]
 80180e0:	3004      	adds	r0, #4
 80180e2:	f7fd fc19 	bl	8015918 <rcl_client_is_valid>
 80180e6:	b308      	cbz	r0, 801812c <rcl_action_take_goal_response+0x64>
 80180e8:	6820      	ldr	r0, [r4, #0]
 80180ea:	3008      	adds	r0, #8
 80180ec:	f7fd fc14 	bl	8015918 <rcl_client_is_valid>
 80180f0:	b1e0      	cbz	r0, 801812c <rcl_action_take_goal_response+0x64>
 80180f2:	6820      	ldr	r0, [r4, #0]
 80180f4:	300c      	adds	r0, #12
 80180f6:	f7fe fdc1 	bl	8016c7c <rcl_subscription_is_valid>
 80180fa:	b1b8      	cbz	r0, 801812c <rcl_action_take_goal_response+0x64>
 80180fc:	6820      	ldr	r0, [r4, #0]
 80180fe:	3010      	adds	r0, #16
 8018100:	f7fe fdbc 	bl	8016c7c <rcl_subscription_is_valid>
 8018104:	b190      	cbz	r0, 801812c <rcl_action_take_goal_response+0x64>
 8018106:	b1cd      	cbz	r5, 801813c <rcl_action_take_goal_response+0x74>
 8018108:	b1c6      	cbz	r6, 801813c <rcl_action_take_goal_response+0x74>
 801810a:	462a      	mov	r2, r5
 801810c:	4631      	mov	r1, r6
 801810e:	6820      	ldr	r0, [r4, #0]
 8018110:	f7fd fb9a 	bl	8015848 <rcl_take_response>
 8018114:	b148      	cbz	r0, 801812a <rcl_action_take_goal_response+0x62>
 8018116:	280a      	cmp	r0, #10
 8018118:	d007      	beq.n	801812a <rcl_action_take_goal_response+0x62>
 801811a:	f240 12f5 	movw	r2, #501	; 0x1f5
 801811e:	f640 0337 	movw	r3, #2103	; 0x837
 8018122:	4290      	cmp	r0, r2
 8018124:	bf0c      	ite	eq
 8018126:	4618      	moveq	r0, r3
 8018128:	2001      	movne	r0, #1
 801812a:	bd70      	pop	{r4, r5, r6, pc}
 801812c:	f7f6 fd64 	bl	800ebf8 <rcutils_reset_error>
 8018130:	f640 0036 	movw	r0, #2102	; 0x836
 8018134:	bd70      	pop	{r4, r5, r6, pc}
 8018136:	f640 0036 	movw	r0, #2102	; 0x836
 801813a:	bd70      	pop	{r4, r5, r6, pc}
 801813c:	200b      	movs	r0, #11
 801813e:	bd70      	pop	{r4, r5, r6, pc}
 8018140:	f640 0036 	movw	r0, #2102	; 0x836
 8018144:	4770      	bx	lr
 8018146:	bf00      	nop

08018148 <rcl_action_send_result_request>:
 8018148:	b390      	cbz	r0, 80181b0 <rcl_action_send_result_request+0x68>
 801814a:	b570      	push	{r4, r5, r6, lr}
 801814c:	4604      	mov	r4, r0
 801814e:	6800      	ldr	r0, [r0, #0]
 8018150:	b348      	cbz	r0, 80181a6 <rcl_action_send_result_request+0x5e>
 8018152:	460e      	mov	r6, r1
 8018154:	4615      	mov	r5, r2
 8018156:	f7fd fbdf 	bl	8015918 <rcl_client_is_valid>
 801815a:	b1f8      	cbz	r0, 801819c <rcl_action_send_result_request+0x54>
 801815c:	6820      	ldr	r0, [r4, #0]
 801815e:	3004      	adds	r0, #4
 8018160:	f7fd fbda 	bl	8015918 <rcl_client_is_valid>
 8018164:	b1d0      	cbz	r0, 801819c <rcl_action_send_result_request+0x54>
 8018166:	6820      	ldr	r0, [r4, #0]
 8018168:	3008      	adds	r0, #8
 801816a:	f7fd fbd5 	bl	8015918 <rcl_client_is_valid>
 801816e:	b1a8      	cbz	r0, 801819c <rcl_action_send_result_request+0x54>
 8018170:	6820      	ldr	r0, [r4, #0]
 8018172:	300c      	adds	r0, #12
 8018174:	f7fe fd82 	bl	8016c7c <rcl_subscription_is_valid>
 8018178:	b180      	cbz	r0, 801819c <rcl_action_send_result_request+0x54>
 801817a:	6820      	ldr	r0, [r4, #0]
 801817c:	3010      	adds	r0, #16
 801817e:	f7fe fd7d 	bl	8016c7c <rcl_subscription_is_valid>
 8018182:	b158      	cbz	r0, 801819c <rcl_action_send_result_request+0x54>
 8018184:	b195      	cbz	r5, 80181ac <rcl_action_send_result_request+0x64>
 8018186:	b18e      	cbz	r6, 80181ac <rcl_action_send_result_request+0x64>
 8018188:	6820      	ldr	r0, [r4, #0]
 801818a:	462a      	mov	r2, r5
 801818c:	4631      	mov	r1, r6
 801818e:	3008      	adds	r0, #8
 8018190:	f7fd fb06 	bl	80157a0 <rcl_send_request>
 8018194:	3800      	subs	r0, #0
 8018196:	bf18      	it	ne
 8018198:	2001      	movne	r0, #1
 801819a:	bd70      	pop	{r4, r5, r6, pc}
 801819c:	f7f6 fd2c 	bl	800ebf8 <rcutils_reset_error>
 80181a0:	f640 0036 	movw	r0, #2102	; 0x836
 80181a4:	bd70      	pop	{r4, r5, r6, pc}
 80181a6:	f640 0036 	movw	r0, #2102	; 0x836
 80181aa:	bd70      	pop	{r4, r5, r6, pc}
 80181ac:	200b      	movs	r0, #11
 80181ae:	bd70      	pop	{r4, r5, r6, pc}
 80181b0:	f640 0036 	movw	r0, #2102	; 0x836
 80181b4:	4770      	bx	lr
 80181b6:	bf00      	nop

080181b8 <rcl_action_take_result_response>:
 80181b8:	2800      	cmp	r0, #0
 80181ba:	d03a      	beq.n	8018232 <rcl_action_take_result_response+0x7a>
 80181bc:	b570      	push	{r4, r5, r6, lr}
 80181be:	4604      	mov	r4, r0
 80181c0:	6800      	ldr	r0, [r0, #0]
 80181c2:	b388      	cbz	r0, 8018228 <rcl_action_take_result_response+0x70>
 80181c4:	460e      	mov	r6, r1
 80181c6:	4615      	mov	r5, r2
 80181c8:	f7fd fba6 	bl	8015918 <rcl_client_is_valid>
 80181cc:	b338      	cbz	r0, 801821e <rcl_action_take_result_response+0x66>
 80181ce:	6820      	ldr	r0, [r4, #0]
 80181d0:	3004      	adds	r0, #4
 80181d2:	f7fd fba1 	bl	8015918 <rcl_client_is_valid>
 80181d6:	b310      	cbz	r0, 801821e <rcl_action_take_result_response+0x66>
 80181d8:	6820      	ldr	r0, [r4, #0]
 80181da:	3008      	adds	r0, #8
 80181dc:	f7fd fb9c 	bl	8015918 <rcl_client_is_valid>
 80181e0:	b1e8      	cbz	r0, 801821e <rcl_action_take_result_response+0x66>
 80181e2:	6820      	ldr	r0, [r4, #0]
 80181e4:	300c      	adds	r0, #12
 80181e6:	f7fe fd49 	bl	8016c7c <rcl_subscription_is_valid>
 80181ea:	b1c0      	cbz	r0, 801821e <rcl_action_take_result_response+0x66>
 80181ec:	6820      	ldr	r0, [r4, #0]
 80181ee:	3010      	adds	r0, #16
 80181f0:	f7fe fd44 	bl	8016c7c <rcl_subscription_is_valid>
 80181f4:	b198      	cbz	r0, 801821e <rcl_action_take_result_response+0x66>
 80181f6:	b1d5      	cbz	r5, 801822e <rcl_action_take_result_response+0x76>
 80181f8:	b1ce      	cbz	r6, 801822e <rcl_action_take_result_response+0x76>
 80181fa:	6820      	ldr	r0, [r4, #0]
 80181fc:	462a      	mov	r2, r5
 80181fe:	4631      	mov	r1, r6
 8018200:	3008      	adds	r0, #8
 8018202:	f7fd fb21 	bl	8015848 <rcl_take_response>
 8018206:	b148      	cbz	r0, 801821c <rcl_action_take_result_response+0x64>
 8018208:	280a      	cmp	r0, #10
 801820a:	d007      	beq.n	801821c <rcl_action_take_result_response+0x64>
 801820c:	f240 12f5 	movw	r2, #501	; 0x1f5
 8018210:	f640 0337 	movw	r3, #2103	; 0x837
 8018214:	4290      	cmp	r0, r2
 8018216:	bf0c      	ite	eq
 8018218:	4618      	moveq	r0, r3
 801821a:	2001      	movne	r0, #1
 801821c:	bd70      	pop	{r4, r5, r6, pc}
 801821e:	f7f6 fceb 	bl	800ebf8 <rcutils_reset_error>
 8018222:	f640 0036 	movw	r0, #2102	; 0x836
 8018226:	bd70      	pop	{r4, r5, r6, pc}
 8018228:	f640 0036 	movw	r0, #2102	; 0x836
 801822c:	bd70      	pop	{r4, r5, r6, pc}
 801822e:	200b      	movs	r0, #11
 8018230:	bd70      	pop	{r4, r5, r6, pc}
 8018232:	f640 0036 	movw	r0, #2102	; 0x836
 8018236:	4770      	bx	lr

08018238 <rcl_action_take_cancel_response>:
 8018238:	2800      	cmp	r0, #0
 801823a:	d03a      	beq.n	80182b2 <rcl_action_take_cancel_response+0x7a>
 801823c:	b570      	push	{r4, r5, r6, lr}
 801823e:	4604      	mov	r4, r0
 8018240:	6800      	ldr	r0, [r0, #0]
 8018242:	b388      	cbz	r0, 80182a8 <rcl_action_take_cancel_response+0x70>
 8018244:	460e      	mov	r6, r1
 8018246:	4615      	mov	r5, r2
 8018248:	f7fd fb66 	bl	8015918 <rcl_client_is_valid>
 801824c:	b338      	cbz	r0, 801829e <rcl_action_take_cancel_response+0x66>
 801824e:	6820      	ldr	r0, [r4, #0]
 8018250:	3004      	adds	r0, #4
 8018252:	f7fd fb61 	bl	8015918 <rcl_client_is_valid>
 8018256:	b310      	cbz	r0, 801829e <rcl_action_take_cancel_response+0x66>
 8018258:	6820      	ldr	r0, [r4, #0]
 801825a:	3008      	adds	r0, #8
 801825c:	f7fd fb5c 	bl	8015918 <rcl_client_is_valid>
 8018260:	b1e8      	cbz	r0, 801829e <rcl_action_take_cancel_response+0x66>
 8018262:	6820      	ldr	r0, [r4, #0]
 8018264:	300c      	adds	r0, #12
 8018266:	f7fe fd09 	bl	8016c7c <rcl_subscription_is_valid>
 801826a:	b1c0      	cbz	r0, 801829e <rcl_action_take_cancel_response+0x66>
 801826c:	6820      	ldr	r0, [r4, #0]
 801826e:	3010      	adds	r0, #16
 8018270:	f7fe fd04 	bl	8016c7c <rcl_subscription_is_valid>
 8018274:	b198      	cbz	r0, 801829e <rcl_action_take_cancel_response+0x66>
 8018276:	b1d5      	cbz	r5, 80182ae <rcl_action_take_cancel_response+0x76>
 8018278:	b1ce      	cbz	r6, 80182ae <rcl_action_take_cancel_response+0x76>
 801827a:	6820      	ldr	r0, [r4, #0]
 801827c:	462a      	mov	r2, r5
 801827e:	4631      	mov	r1, r6
 8018280:	3004      	adds	r0, #4
 8018282:	f7fd fae1 	bl	8015848 <rcl_take_response>
 8018286:	b148      	cbz	r0, 801829c <rcl_action_take_cancel_response+0x64>
 8018288:	280a      	cmp	r0, #10
 801828a:	d007      	beq.n	801829c <rcl_action_take_cancel_response+0x64>
 801828c:	f240 12f5 	movw	r2, #501	; 0x1f5
 8018290:	f640 0337 	movw	r3, #2103	; 0x837
 8018294:	4290      	cmp	r0, r2
 8018296:	bf0c      	ite	eq
 8018298:	4618      	moveq	r0, r3
 801829a:	2001      	movne	r0, #1
 801829c:	bd70      	pop	{r4, r5, r6, pc}
 801829e:	f7f6 fcab 	bl	800ebf8 <rcutils_reset_error>
 80182a2:	f640 0036 	movw	r0, #2102	; 0x836
 80182a6:	bd70      	pop	{r4, r5, r6, pc}
 80182a8:	f640 0036 	movw	r0, #2102	; 0x836
 80182ac:	bd70      	pop	{r4, r5, r6, pc}
 80182ae:	200b      	movs	r0, #11
 80182b0:	bd70      	pop	{r4, r5, r6, pc}
 80182b2:	f640 0036 	movw	r0, #2102	; 0x836
 80182b6:	4770      	bx	lr

080182b8 <rcl_action_take_feedback>:
 80182b8:	2800      	cmp	r0, #0
 80182ba:	d038      	beq.n	801832e <rcl_action_take_feedback+0x76>
 80182bc:	b530      	push	{r4, r5, lr}
 80182be:	4604      	mov	r4, r0
 80182c0:	6800      	ldr	r0, [r0, #0]
 80182c2:	b08f      	sub	sp, #60	; 0x3c
 80182c4:	b378      	cbz	r0, 8018326 <rcl_action_take_feedback+0x6e>
 80182c6:	460d      	mov	r5, r1
 80182c8:	f7fd fb26 	bl	8015918 <rcl_client_is_valid>
 80182cc:	b328      	cbz	r0, 801831a <rcl_action_take_feedback+0x62>
 80182ce:	6820      	ldr	r0, [r4, #0]
 80182d0:	3004      	adds	r0, #4
 80182d2:	f7fd fb21 	bl	8015918 <rcl_client_is_valid>
 80182d6:	b300      	cbz	r0, 801831a <rcl_action_take_feedback+0x62>
 80182d8:	6820      	ldr	r0, [r4, #0]
 80182da:	3008      	adds	r0, #8
 80182dc:	f7fd fb1c 	bl	8015918 <rcl_client_is_valid>
 80182e0:	b1d8      	cbz	r0, 801831a <rcl_action_take_feedback+0x62>
 80182e2:	6820      	ldr	r0, [r4, #0]
 80182e4:	300c      	adds	r0, #12
 80182e6:	f7fe fcc9 	bl	8016c7c <rcl_subscription_is_valid>
 80182ea:	b1b0      	cbz	r0, 801831a <rcl_action_take_feedback+0x62>
 80182ec:	6820      	ldr	r0, [r4, #0]
 80182ee:	3010      	adds	r0, #16
 80182f0:	f7fe fcc4 	bl	8016c7c <rcl_subscription_is_valid>
 80182f4:	b188      	cbz	r0, 801831a <rcl_action_take_feedback+0x62>
 80182f6:	b1ed      	cbz	r5, 8018334 <rcl_action_take_feedback+0x7c>
 80182f8:	6820      	ldr	r0, [r4, #0]
 80182fa:	2300      	movs	r3, #0
 80182fc:	466a      	mov	r2, sp
 80182fe:	4629      	mov	r1, r5
 8018300:	300c      	adds	r0, #12
 8018302:	f7fe fc5f 	bl	8016bc4 <rcl_take>
 8018306:	b160      	cbz	r0, 8018322 <rcl_action_take_feedback+0x6a>
 8018308:	f240 1391 	movw	r3, #401	; 0x191
 801830c:	4298      	cmp	r0, r3
 801830e:	d014      	beq.n	801833a <rcl_action_take_feedback+0x82>
 8018310:	280a      	cmp	r0, #10
 8018312:	bf18      	it	ne
 8018314:	2001      	movne	r0, #1
 8018316:	b00f      	add	sp, #60	; 0x3c
 8018318:	bd30      	pop	{r4, r5, pc}
 801831a:	f7f6 fc6d 	bl	800ebf8 <rcutils_reset_error>
 801831e:	f640 0036 	movw	r0, #2102	; 0x836
 8018322:	b00f      	add	sp, #60	; 0x3c
 8018324:	bd30      	pop	{r4, r5, pc}
 8018326:	f640 0036 	movw	r0, #2102	; 0x836
 801832a:	b00f      	add	sp, #60	; 0x3c
 801832c:	bd30      	pop	{r4, r5, pc}
 801832e:	f640 0036 	movw	r0, #2102	; 0x836
 8018332:	4770      	bx	lr
 8018334:	200b      	movs	r0, #11
 8018336:	b00f      	add	sp, #60	; 0x3c
 8018338:	bd30      	pop	{r4, r5, pc}
 801833a:	f640 0037 	movw	r0, #2103	; 0x837
 801833e:	e7f0      	b.n	8018322 <rcl_action_take_feedback+0x6a>

08018340 <rcl_action_wait_set_add_action_client>:
 8018340:	2800      	cmp	r0, #0
 8018342:	d048      	beq.n	80183d6 <rcl_action_wait_set_add_action_client+0x96>
 8018344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018346:	460c      	mov	r4, r1
 8018348:	2900      	cmp	r1, #0
 801834a:	d03c      	beq.n	80183c6 <rcl_action_wait_set_add_action_client+0x86>
 801834c:	4605      	mov	r5, r0
 801834e:	6808      	ldr	r0, [r1, #0]
 8018350:	2800      	cmp	r0, #0
 8018352:	d038      	beq.n	80183c6 <rcl_action_wait_set_add_action_client+0x86>
 8018354:	4617      	mov	r7, r2
 8018356:	461e      	mov	r6, r3
 8018358:	f7fd fade 	bl	8015918 <rcl_client_is_valid>
 801835c:	b3b0      	cbz	r0, 80183cc <rcl_action_wait_set_add_action_client+0x8c>
 801835e:	6820      	ldr	r0, [r4, #0]
 8018360:	3004      	adds	r0, #4
 8018362:	f7fd fad9 	bl	8015918 <rcl_client_is_valid>
 8018366:	b388      	cbz	r0, 80183cc <rcl_action_wait_set_add_action_client+0x8c>
 8018368:	6820      	ldr	r0, [r4, #0]
 801836a:	3008      	adds	r0, #8
 801836c:	f7fd fad4 	bl	8015918 <rcl_client_is_valid>
 8018370:	b360      	cbz	r0, 80183cc <rcl_action_wait_set_add_action_client+0x8c>
 8018372:	6820      	ldr	r0, [r4, #0]
 8018374:	300c      	adds	r0, #12
 8018376:	f7fe fc81 	bl	8016c7c <rcl_subscription_is_valid>
 801837a:	b338      	cbz	r0, 80183cc <rcl_action_wait_set_add_action_client+0x8c>
 801837c:	6820      	ldr	r0, [r4, #0]
 801837e:	3010      	adds	r0, #16
 8018380:	f7fe fc7c 	bl	8016c7c <rcl_subscription_is_valid>
 8018384:	b310      	cbz	r0, 80183cc <rcl_action_wait_set_add_action_client+0x8c>
 8018386:	6821      	ldr	r1, [r4, #0]
 8018388:	4628      	mov	r0, r5
 801838a:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 801838e:	f7ff fcd3 	bl	8017d38 <rcl_wait_set_add_client>
 8018392:	b9b8      	cbnz	r0, 80183c4 <rcl_action_wait_set_add_action_client+0x84>
 8018394:	6821      	ldr	r1, [r4, #0]
 8018396:	4628      	mov	r0, r5
 8018398:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 801839c:	3104      	adds	r1, #4
 801839e:	f7ff fccb 	bl	8017d38 <rcl_wait_set_add_client>
 80183a2:	b978      	cbnz	r0, 80183c4 <rcl_action_wait_set_add_action_client+0x84>
 80183a4:	6821      	ldr	r1, [r4, #0]
 80183a6:	4628      	mov	r0, r5
 80183a8:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 80183ac:	3108      	adds	r1, #8
 80183ae:	f7ff fcc3 	bl	8017d38 <rcl_wait_set_add_client>
 80183b2:	b938      	cbnz	r0, 80183c4 <rcl_action_wait_set_add_action_client+0x84>
 80183b4:	6821      	ldr	r1, [r4, #0]
 80183b6:	4628      	mov	r0, r5
 80183b8:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 80183bc:	310c      	adds	r1, #12
 80183be:	f7ff f96b 	bl	8017698 <rcl_wait_set_add_subscription>
 80183c2:	b158      	cbz	r0, 80183dc <rcl_action_wait_set_add_action_client+0x9c>
 80183c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183c6:	f640 0036 	movw	r0, #2102	; 0x836
 80183ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183cc:	f7f6 fc14 	bl	800ebf8 <rcutils_reset_error>
 80183d0:	f640 0036 	movw	r0, #2102	; 0x836
 80183d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80183d6:	f44f 7061 	mov.w	r0, #900	; 0x384
 80183da:	4770      	bx	lr
 80183dc:	6821      	ldr	r1, [r4, #0]
 80183de:	4628      	mov	r0, r5
 80183e0:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 80183e4:	3110      	adds	r1, #16
 80183e6:	f7ff f957 	bl	8017698 <rcl_wait_set_add_subscription>
 80183ea:	2800      	cmp	r0, #0
 80183ec:	d1ea      	bne.n	80183c4 <rcl_action_wait_set_add_action_client+0x84>
 80183ee:	b11f      	cbz	r7, 80183f8 <rcl_action_wait_set_add_action_client+0xb8>
 80183f0:	6823      	ldr	r3, [r4, #0]
 80183f2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 80183f6:	603b      	str	r3, [r7, #0]
 80183f8:	2e00      	cmp	r6, #0
 80183fa:	d0e3      	beq.n	80183c4 <rcl_action_wait_set_add_action_client+0x84>
 80183fc:	6823      	ldr	r3, [r4, #0]
 80183fe:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8018402:	6033      	str	r3, [r6, #0]
 8018404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018406:	bf00      	nop

08018408 <rcl_action_client_wait_set_get_entities_ready>:
 8018408:	2800      	cmp	r0, #0
 801840a:	d050      	beq.n	80184ae <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801840c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018410:	460c      	mov	r4, r1
 8018412:	2900      	cmp	r1, #0
 8018414:	d03e      	beq.n	8018494 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8018416:	4605      	mov	r5, r0
 8018418:	6808      	ldr	r0, [r1, #0]
 801841a:	2800      	cmp	r0, #0
 801841c:	d03a      	beq.n	8018494 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801841e:	4616      	mov	r6, r2
 8018420:	461f      	mov	r7, r3
 8018422:	f7fd fa79 	bl	8015918 <rcl_client_is_valid>
 8018426:	2800      	cmp	r0, #0
 8018428:	d038      	beq.n	801849c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801842a:	6820      	ldr	r0, [r4, #0]
 801842c:	3004      	adds	r0, #4
 801842e:	f7fd fa73 	bl	8015918 <rcl_client_is_valid>
 8018432:	2800      	cmp	r0, #0
 8018434:	d032      	beq.n	801849c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8018436:	6820      	ldr	r0, [r4, #0]
 8018438:	3008      	adds	r0, #8
 801843a:	f7fd fa6d 	bl	8015918 <rcl_client_is_valid>
 801843e:	b368      	cbz	r0, 801849c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8018440:	6820      	ldr	r0, [r4, #0]
 8018442:	300c      	adds	r0, #12
 8018444:	f7fe fc1a 	bl	8016c7c <rcl_subscription_is_valid>
 8018448:	b340      	cbz	r0, 801849c <rcl_action_client_wait_set_get_entities_ready+0x94>
 801844a:	6820      	ldr	r0, [r4, #0]
 801844c:	3010      	adds	r0, #16
 801844e:	f7fe fc15 	bl	8016c7c <rcl_subscription_is_valid>
 8018452:	b318      	cbz	r0, 801849c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8018454:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8018458:	2a00      	cmp	r2, #0
 801845a:	bf18      	it	ne
 801845c:	2b00      	cmpne	r3, #0
 801845e:	9b08      	ldr	r3, [sp, #32]
 8018460:	bf0c      	ite	eq
 8018462:	2101      	moveq	r1, #1
 8018464:	2100      	movne	r1, #0
 8018466:	2b00      	cmp	r3, #0
 8018468:	bf08      	it	eq
 801846a:	f041 0101 	orreq.w	r1, r1, #1
 801846e:	2f00      	cmp	r7, #0
 8018470:	bf08      	it	eq
 8018472:	f041 0101 	orreq.w	r1, r1, #1
 8018476:	b9b9      	cbnz	r1, 80184a8 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8018478:	b1b6      	cbz	r6, 80184a8 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801847a:	6823      	ldr	r3, [r4, #0]
 801847c:	686c      	ldr	r4, [r5, #4]
 801847e:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 8018482:	428a      	cmp	r2, r1
 8018484:	4610      	mov	r0, r2
 8018486:	bf38      	it	cc
 8018488:	4608      	movcc	r0, r1
 801848a:	4284      	cmp	r4, r0
 801848c:	d812      	bhi.n	80184b4 <rcl_action_client_wait_set_get_entities_ready+0xac>
 801848e:	2001      	movs	r0, #1
 8018490:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018494:	f640 0036 	movw	r0, #2102	; 0x836
 8018498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801849c:	f7f6 fbac 	bl	800ebf8 <rcutils_reset_error>
 80184a0:	f640 0036 	movw	r0, #2102	; 0x836
 80184a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80184a8:	200b      	movs	r0, #11
 80184aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80184ae:	f44f 7061 	mov.w	r0, #900	; 0x384
 80184b2:	4770      	bx	lr
 80184b4:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 80184b8:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 80184bc:	45f0      	cmp	r8, lr
 80184be:	4640      	mov	r0, r8
 80184c0:	69ec      	ldr	r4, [r5, #28]
 80184c2:	bf38      	it	cc
 80184c4:	4670      	movcc	r0, lr
 80184c6:	4560      	cmp	r0, ip
 80184c8:	bf38      	it	cc
 80184ca:	4660      	movcc	r0, ip
 80184cc:	4284      	cmp	r4, r0
 80184ce:	d9de      	bls.n	801848e <rcl_action_client_wait_set_get_entities_ready+0x86>
 80184d0:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80184d4:	682d      	ldr	r5, [r5, #0]
 80184d6:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 80184da:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 80184de:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80184e2:	1a18      	subs	r0, r3, r0
 80184e4:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 80184e8:	f103 0c0c 	add.w	ip, r3, #12
 80184ec:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 80184f0:	fab0 f080 	clz	r0, r0
 80184f4:	eba5 050c 	sub.w	r5, r5, ip
 80184f8:	0940      	lsrs	r0, r0, #5
 80184fa:	fab5 f585 	clz	r5, r5
 80184fe:	096d      	lsrs	r5, r5, #5
 8018500:	7035      	strb	r5, [r6, #0]
 8018502:	f103 0510 	add.w	r5, r3, #16
 8018506:	1b64      	subs	r4, r4, r5
 8018508:	9d08      	ldr	r5, [sp, #32]
 801850a:	fab4 f484 	clz	r4, r4
 801850e:	0964      	lsrs	r4, r4, #5
 8018510:	703c      	strb	r4, [r7, #0]
 8018512:	1d1c      	adds	r4, r3, #4
 8018514:	3308      	adds	r3, #8
 8018516:	7028      	strb	r0, [r5, #0]
 8018518:	1b09      	subs	r1, r1, r4
 801851a:	2000      	movs	r0, #0
 801851c:	1ad3      	subs	r3, r2, r3
 801851e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018520:	fab1 f181 	clz	r1, r1
 8018524:	fab3 f383 	clz	r3, r3
 8018528:	0949      	lsrs	r1, r1, #5
 801852a:	095b      	lsrs	r3, r3, #5
 801852c:	7011      	strb	r1, [r2, #0]
 801852e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018530:	7013      	strb	r3, [r2, #0]
 8018532:	e7b1      	b.n	8018498 <rcl_action_client_wait_set_get_entities_ready+0x90>

08018534 <rcl_action_take_goal_request>:
 8018534:	2800      	cmp	r0, #0
 8018536:	d039      	beq.n	80185ac <rcl_action_take_goal_request+0x78>
 8018538:	b570      	push	{r4, r5, r6, lr}
 801853a:	4604      	mov	r4, r0
 801853c:	6800      	ldr	r0, [r0, #0]
 801853e:	b380      	cbz	r0, 80185a2 <rcl_action_take_goal_request+0x6e>
 8018540:	460e      	mov	r6, r1
 8018542:	4615      	mov	r5, r2
 8018544:	f7fe f9b0 	bl	80168a8 <rcl_service_is_valid>
 8018548:	b330      	cbz	r0, 8018598 <rcl_action_take_goal_request+0x64>
 801854a:	6820      	ldr	r0, [r4, #0]
 801854c:	3004      	adds	r0, #4
 801854e:	f7fe f9ab 	bl	80168a8 <rcl_service_is_valid>
 8018552:	b308      	cbz	r0, 8018598 <rcl_action_take_goal_request+0x64>
 8018554:	6820      	ldr	r0, [r4, #0]
 8018556:	3008      	adds	r0, #8
 8018558:	f7fe f9a6 	bl	80168a8 <rcl_service_is_valid>
 801855c:	b1e0      	cbz	r0, 8018598 <rcl_action_take_goal_request+0x64>
 801855e:	6820      	ldr	r0, [r4, #0]
 8018560:	300c      	adds	r0, #12
 8018562:	f7f5 faab 	bl	800dabc <rcl_publisher_is_valid>
 8018566:	b1b8      	cbz	r0, 8018598 <rcl_action_take_goal_request+0x64>
 8018568:	6820      	ldr	r0, [r4, #0]
 801856a:	3010      	adds	r0, #16
 801856c:	f7f5 faa6 	bl	800dabc <rcl_publisher_is_valid>
 8018570:	b190      	cbz	r0, 8018598 <rcl_action_take_goal_request+0x64>
 8018572:	b1cd      	cbz	r5, 80185a8 <rcl_action_take_goal_request+0x74>
 8018574:	b1c6      	cbz	r6, 80185a8 <rcl_action_take_goal_request+0x74>
 8018576:	462a      	mov	r2, r5
 8018578:	4631      	mov	r1, r6
 801857a:	6820      	ldr	r0, [r4, #0]
 801857c:	f7fe f914 	bl	80167a8 <rcl_take_request>
 8018580:	b148      	cbz	r0, 8018596 <rcl_action_take_goal_request+0x62>
 8018582:	280a      	cmp	r0, #10
 8018584:	d007      	beq.n	8018596 <rcl_action_take_goal_request+0x62>
 8018586:	f240 2259 	movw	r2, #601	; 0x259
 801858a:	f640 0399 	movw	r3, #2201	; 0x899
 801858e:	4290      	cmp	r0, r2
 8018590:	bf0c      	ite	eq
 8018592:	4618      	moveq	r0, r3
 8018594:	2001      	movne	r0, #1
 8018596:	bd70      	pop	{r4, r5, r6, pc}
 8018598:	f7f6 fb2e 	bl	800ebf8 <rcutils_reset_error>
 801859c:	f640 0098 	movw	r0, #2200	; 0x898
 80185a0:	bd70      	pop	{r4, r5, r6, pc}
 80185a2:	f640 0098 	movw	r0, #2200	; 0x898
 80185a6:	bd70      	pop	{r4, r5, r6, pc}
 80185a8:	200b      	movs	r0, #11
 80185aa:	bd70      	pop	{r4, r5, r6, pc}
 80185ac:	f640 0098 	movw	r0, #2200	; 0x898
 80185b0:	4770      	bx	lr
 80185b2:	bf00      	nop

080185b4 <rcl_action_send_goal_response>:
 80185b4:	b388      	cbz	r0, 801861a <rcl_action_send_goal_response+0x66>
 80185b6:	b570      	push	{r4, r5, r6, lr}
 80185b8:	4604      	mov	r4, r0
 80185ba:	6800      	ldr	r0, [r0, #0]
 80185bc:	b340      	cbz	r0, 8018610 <rcl_action_send_goal_response+0x5c>
 80185be:	460e      	mov	r6, r1
 80185c0:	4615      	mov	r5, r2
 80185c2:	f7fe f971 	bl	80168a8 <rcl_service_is_valid>
 80185c6:	b1f0      	cbz	r0, 8018606 <rcl_action_send_goal_response+0x52>
 80185c8:	6820      	ldr	r0, [r4, #0]
 80185ca:	3004      	adds	r0, #4
 80185cc:	f7fe f96c 	bl	80168a8 <rcl_service_is_valid>
 80185d0:	b1c8      	cbz	r0, 8018606 <rcl_action_send_goal_response+0x52>
 80185d2:	6820      	ldr	r0, [r4, #0]
 80185d4:	3008      	adds	r0, #8
 80185d6:	f7fe f967 	bl	80168a8 <rcl_service_is_valid>
 80185da:	b1a0      	cbz	r0, 8018606 <rcl_action_send_goal_response+0x52>
 80185dc:	6820      	ldr	r0, [r4, #0]
 80185de:	300c      	adds	r0, #12
 80185e0:	f7f5 fa6c 	bl	800dabc <rcl_publisher_is_valid>
 80185e4:	b178      	cbz	r0, 8018606 <rcl_action_send_goal_response+0x52>
 80185e6:	6820      	ldr	r0, [r4, #0]
 80185e8:	3010      	adds	r0, #16
 80185ea:	f7f5 fa67 	bl	800dabc <rcl_publisher_is_valid>
 80185ee:	b150      	cbz	r0, 8018606 <rcl_action_send_goal_response+0x52>
 80185f0:	b18d      	cbz	r5, 8018616 <rcl_action_send_goal_response+0x62>
 80185f2:	b186      	cbz	r6, 8018616 <rcl_action_send_goal_response+0x62>
 80185f4:	462a      	mov	r2, r5
 80185f6:	4631      	mov	r1, r6
 80185f8:	6820      	ldr	r0, [r4, #0]
 80185fa:	f7fe f925 	bl	8016848 <rcl_send_response>
 80185fe:	3800      	subs	r0, #0
 8018600:	bf18      	it	ne
 8018602:	2001      	movne	r0, #1
 8018604:	bd70      	pop	{r4, r5, r6, pc}
 8018606:	f7f6 faf7 	bl	800ebf8 <rcutils_reset_error>
 801860a:	f640 0098 	movw	r0, #2200	; 0x898
 801860e:	bd70      	pop	{r4, r5, r6, pc}
 8018610:	f640 0098 	movw	r0, #2200	; 0x898
 8018614:	bd70      	pop	{r4, r5, r6, pc}
 8018616:	200b      	movs	r0, #11
 8018618:	bd70      	pop	{r4, r5, r6, pc}
 801861a:	f640 0098 	movw	r0, #2200	; 0x898
 801861e:	4770      	bx	lr

08018620 <rcl_action_take_result_request>:
 8018620:	2800      	cmp	r0, #0
 8018622:	d03a      	beq.n	801869a <rcl_action_take_result_request+0x7a>
 8018624:	b570      	push	{r4, r5, r6, lr}
 8018626:	4604      	mov	r4, r0
 8018628:	6800      	ldr	r0, [r0, #0]
 801862a:	b388      	cbz	r0, 8018690 <rcl_action_take_result_request+0x70>
 801862c:	460e      	mov	r6, r1
 801862e:	4615      	mov	r5, r2
 8018630:	f7fe f93a 	bl	80168a8 <rcl_service_is_valid>
 8018634:	b338      	cbz	r0, 8018686 <rcl_action_take_result_request+0x66>
 8018636:	6820      	ldr	r0, [r4, #0]
 8018638:	3004      	adds	r0, #4
 801863a:	f7fe f935 	bl	80168a8 <rcl_service_is_valid>
 801863e:	b310      	cbz	r0, 8018686 <rcl_action_take_result_request+0x66>
 8018640:	6820      	ldr	r0, [r4, #0]
 8018642:	3008      	adds	r0, #8
 8018644:	f7fe f930 	bl	80168a8 <rcl_service_is_valid>
 8018648:	b1e8      	cbz	r0, 8018686 <rcl_action_take_result_request+0x66>
 801864a:	6820      	ldr	r0, [r4, #0]
 801864c:	300c      	adds	r0, #12
 801864e:	f7f5 fa35 	bl	800dabc <rcl_publisher_is_valid>
 8018652:	b1c0      	cbz	r0, 8018686 <rcl_action_take_result_request+0x66>
 8018654:	6820      	ldr	r0, [r4, #0]
 8018656:	3010      	adds	r0, #16
 8018658:	f7f5 fa30 	bl	800dabc <rcl_publisher_is_valid>
 801865c:	b198      	cbz	r0, 8018686 <rcl_action_take_result_request+0x66>
 801865e:	b1d5      	cbz	r5, 8018696 <rcl_action_take_result_request+0x76>
 8018660:	b1ce      	cbz	r6, 8018696 <rcl_action_take_result_request+0x76>
 8018662:	6820      	ldr	r0, [r4, #0]
 8018664:	462a      	mov	r2, r5
 8018666:	4631      	mov	r1, r6
 8018668:	3008      	adds	r0, #8
 801866a:	f7fe f89d 	bl	80167a8 <rcl_take_request>
 801866e:	b148      	cbz	r0, 8018684 <rcl_action_take_result_request+0x64>
 8018670:	280a      	cmp	r0, #10
 8018672:	d007      	beq.n	8018684 <rcl_action_take_result_request+0x64>
 8018674:	f240 2259 	movw	r2, #601	; 0x259
 8018678:	f640 0399 	movw	r3, #2201	; 0x899
 801867c:	4290      	cmp	r0, r2
 801867e:	bf0c      	ite	eq
 8018680:	4618      	moveq	r0, r3
 8018682:	2001      	movne	r0, #1
 8018684:	bd70      	pop	{r4, r5, r6, pc}
 8018686:	f7f6 fab7 	bl	800ebf8 <rcutils_reset_error>
 801868a:	f640 0098 	movw	r0, #2200	; 0x898
 801868e:	bd70      	pop	{r4, r5, r6, pc}
 8018690:	f640 0098 	movw	r0, #2200	; 0x898
 8018694:	bd70      	pop	{r4, r5, r6, pc}
 8018696:	200b      	movs	r0, #11
 8018698:	bd70      	pop	{r4, r5, r6, pc}
 801869a:	f640 0098 	movw	r0, #2200	; 0x898
 801869e:	4770      	bx	lr

080186a0 <rcl_action_take_cancel_request>:
 80186a0:	2800      	cmp	r0, #0
 80186a2:	d03a      	beq.n	801871a <rcl_action_take_cancel_request+0x7a>
 80186a4:	b570      	push	{r4, r5, r6, lr}
 80186a6:	4604      	mov	r4, r0
 80186a8:	6800      	ldr	r0, [r0, #0]
 80186aa:	b388      	cbz	r0, 8018710 <rcl_action_take_cancel_request+0x70>
 80186ac:	460e      	mov	r6, r1
 80186ae:	4615      	mov	r5, r2
 80186b0:	f7fe f8fa 	bl	80168a8 <rcl_service_is_valid>
 80186b4:	b338      	cbz	r0, 8018706 <rcl_action_take_cancel_request+0x66>
 80186b6:	6820      	ldr	r0, [r4, #0]
 80186b8:	3004      	adds	r0, #4
 80186ba:	f7fe f8f5 	bl	80168a8 <rcl_service_is_valid>
 80186be:	b310      	cbz	r0, 8018706 <rcl_action_take_cancel_request+0x66>
 80186c0:	6820      	ldr	r0, [r4, #0]
 80186c2:	3008      	adds	r0, #8
 80186c4:	f7fe f8f0 	bl	80168a8 <rcl_service_is_valid>
 80186c8:	b1e8      	cbz	r0, 8018706 <rcl_action_take_cancel_request+0x66>
 80186ca:	6820      	ldr	r0, [r4, #0]
 80186cc:	300c      	adds	r0, #12
 80186ce:	f7f5 f9f5 	bl	800dabc <rcl_publisher_is_valid>
 80186d2:	b1c0      	cbz	r0, 8018706 <rcl_action_take_cancel_request+0x66>
 80186d4:	6820      	ldr	r0, [r4, #0]
 80186d6:	3010      	adds	r0, #16
 80186d8:	f7f5 f9f0 	bl	800dabc <rcl_publisher_is_valid>
 80186dc:	b198      	cbz	r0, 8018706 <rcl_action_take_cancel_request+0x66>
 80186de:	b1d5      	cbz	r5, 8018716 <rcl_action_take_cancel_request+0x76>
 80186e0:	b1ce      	cbz	r6, 8018716 <rcl_action_take_cancel_request+0x76>
 80186e2:	6820      	ldr	r0, [r4, #0]
 80186e4:	462a      	mov	r2, r5
 80186e6:	4631      	mov	r1, r6
 80186e8:	3004      	adds	r0, #4
 80186ea:	f7fe f85d 	bl	80167a8 <rcl_take_request>
 80186ee:	b148      	cbz	r0, 8018704 <rcl_action_take_cancel_request+0x64>
 80186f0:	280a      	cmp	r0, #10
 80186f2:	d007      	beq.n	8018704 <rcl_action_take_cancel_request+0x64>
 80186f4:	f240 2259 	movw	r2, #601	; 0x259
 80186f8:	f640 0399 	movw	r3, #2201	; 0x899
 80186fc:	4290      	cmp	r0, r2
 80186fe:	bf0c      	ite	eq
 8018700:	4618      	moveq	r0, r3
 8018702:	2001      	movne	r0, #1
 8018704:	bd70      	pop	{r4, r5, r6, pc}
 8018706:	f7f6 fa77 	bl	800ebf8 <rcutils_reset_error>
 801870a:	f640 0098 	movw	r0, #2200	; 0x898
 801870e:	bd70      	pop	{r4, r5, r6, pc}
 8018710:	f640 0098 	movw	r0, #2200	; 0x898
 8018714:	bd70      	pop	{r4, r5, r6, pc}
 8018716:	200b      	movs	r0, #11
 8018718:	bd70      	pop	{r4, r5, r6, pc}
 801871a:	f640 0098 	movw	r0, #2200	; 0x898
 801871e:	4770      	bx	lr

08018720 <rcl_action_send_cancel_response>:
 8018720:	b390      	cbz	r0, 8018788 <rcl_action_send_cancel_response+0x68>
 8018722:	b570      	push	{r4, r5, r6, lr}
 8018724:	4604      	mov	r4, r0
 8018726:	6800      	ldr	r0, [r0, #0]
 8018728:	b348      	cbz	r0, 801877e <rcl_action_send_cancel_response+0x5e>
 801872a:	460e      	mov	r6, r1
 801872c:	4615      	mov	r5, r2
 801872e:	f7fe f8bb 	bl	80168a8 <rcl_service_is_valid>
 8018732:	b1f8      	cbz	r0, 8018774 <rcl_action_send_cancel_response+0x54>
 8018734:	6820      	ldr	r0, [r4, #0]
 8018736:	3004      	adds	r0, #4
 8018738:	f7fe f8b6 	bl	80168a8 <rcl_service_is_valid>
 801873c:	b1d0      	cbz	r0, 8018774 <rcl_action_send_cancel_response+0x54>
 801873e:	6820      	ldr	r0, [r4, #0]
 8018740:	3008      	adds	r0, #8
 8018742:	f7fe f8b1 	bl	80168a8 <rcl_service_is_valid>
 8018746:	b1a8      	cbz	r0, 8018774 <rcl_action_send_cancel_response+0x54>
 8018748:	6820      	ldr	r0, [r4, #0]
 801874a:	300c      	adds	r0, #12
 801874c:	f7f5 f9b6 	bl	800dabc <rcl_publisher_is_valid>
 8018750:	b180      	cbz	r0, 8018774 <rcl_action_send_cancel_response+0x54>
 8018752:	6820      	ldr	r0, [r4, #0]
 8018754:	3010      	adds	r0, #16
 8018756:	f7f5 f9b1 	bl	800dabc <rcl_publisher_is_valid>
 801875a:	b158      	cbz	r0, 8018774 <rcl_action_send_cancel_response+0x54>
 801875c:	b195      	cbz	r5, 8018784 <rcl_action_send_cancel_response+0x64>
 801875e:	b18e      	cbz	r6, 8018784 <rcl_action_send_cancel_response+0x64>
 8018760:	6820      	ldr	r0, [r4, #0]
 8018762:	462a      	mov	r2, r5
 8018764:	4631      	mov	r1, r6
 8018766:	3004      	adds	r0, #4
 8018768:	f7fe f86e 	bl	8016848 <rcl_send_response>
 801876c:	3800      	subs	r0, #0
 801876e:	bf18      	it	ne
 8018770:	2001      	movne	r0, #1
 8018772:	bd70      	pop	{r4, r5, r6, pc}
 8018774:	f7f6 fa40 	bl	800ebf8 <rcutils_reset_error>
 8018778:	f640 0098 	movw	r0, #2200	; 0x898
 801877c:	bd70      	pop	{r4, r5, r6, pc}
 801877e:	f640 0098 	movw	r0, #2200	; 0x898
 8018782:	bd70      	pop	{r4, r5, r6, pc}
 8018784:	200b      	movs	r0, #11
 8018786:	bd70      	pop	{r4, r5, r6, pc}
 8018788:	f640 0098 	movw	r0, #2200	; 0x898
 801878c:	4770      	bx	lr
 801878e:	bf00      	nop

08018790 <rcl_action_wait_set_add_action_server>:
 8018790:	2800      	cmp	r0, #0
 8018792:	d04d      	beq.n	8018830 <rcl_action_wait_set_add_action_server+0xa0>
 8018794:	b570      	push	{r4, r5, r6, lr}
 8018796:	460c      	mov	r4, r1
 8018798:	b159      	cbz	r1, 80187b2 <rcl_action_wait_set_add_action_server+0x22>
 801879a:	4605      	mov	r5, r0
 801879c:	6808      	ldr	r0, [r1, #0]
 801879e:	b140      	cbz	r0, 80187b2 <rcl_action_wait_set_add_action_server+0x22>
 80187a0:	4616      	mov	r6, r2
 80187a2:	f7fe f881 	bl	80168a8 <rcl_service_is_valid>
 80187a6:	b120      	cbz	r0, 80187b2 <rcl_action_wait_set_add_action_server+0x22>
 80187a8:	6820      	ldr	r0, [r4, #0]
 80187aa:	3004      	adds	r0, #4
 80187ac:	f7fe f87c 	bl	80168a8 <rcl_service_is_valid>
 80187b0:	b910      	cbnz	r0, 80187b8 <rcl_action_wait_set_add_action_server+0x28>
 80187b2:	f640 0098 	movw	r0, #2200	; 0x898
 80187b6:	bd70      	pop	{r4, r5, r6, pc}
 80187b8:	6820      	ldr	r0, [r4, #0]
 80187ba:	3008      	adds	r0, #8
 80187bc:	f7fe f874 	bl	80168a8 <rcl_service_is_valid>
 80187c0:	2800      	cmp	r0, #0
 80187c2:	d0f6      	beq.n	80187b2 <rcl_action_wait_set_add_action_server+0x22>
 80187c4:	6820      	ldr	r0, [r4, #0]
 80187c6:	300c      	adds	r0, #12
 80187c8:	f7f5 f990 	bl	800daec <rcl_publisher_is_valid_except_context>
 80187cc:	2800      	cmp	r0, #0
 80187ce:	d0f0      	beq.n	80187b2 <rcl_action_wait_set_add_action_server+0x22>
 80187d0:	6820      	ldr	r0, [r4, #0]
 80187d2:	3010      	adds	r0, #16
 80187d4:	f7f5 f98a 	bl	800daec <rcl_publisher_is_valid_except_context>
 80187d8:	2800      	cmp	r0, #0
 80187da:	d0ea      	beq.n	80187b2 <rcl_action_wait_set_add_action_server+0x22>
 80187dc:	6821      	ldr	r1, [r4, #0]
 80187de:	4628      	mov	r0, r5
 80187e0:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 80187e4:	f7ff fad4 	bl	8017d90 <rcl_wait_set_add_service>
 80187e8:	2800      	cmp	r0, #0
 80187ea:	d1e4      	bne.n	80187b6 <rcl_action_wait_set_add_action_server+0x26>
 80187ec:	6821      	ldr	r1, [r4, #0]
 80187ee:	4628      	mov	r0, r5
 80187f0:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 80187f4:	3104      	adds	r1, #4
 80187f6:	f7ff facb 	bl	8017d90 <rcl_wait_set_add_service>
 80187fa:	2800      	cmp	r0, #0
 80187fc:	d1db      	bne.n	80187b6 <rcl_action_wait_set_add_action_server+0x26>
 80187fe:	6821      	ldr	r1, [r4, #0]
 8018800:	4628      	mov	r0, r5
 8018802:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 8018806:	3108      	adds	r1, #8
 8018808:	f7ff fac2 	bl	8017d90 <rcl_wait_set_add_service>
 801880c:	2800      	cmp	r0, #0
 801880e:	d1d2      	bne.n	80187b6 <rcl_action_wait_set_add_action_server+0x26>
 8018810:	6821      	ldr	r1, [r4, #0]
 8018812:	4628      	mov	r0, r5
 8018814:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 8018818:	3114      	adds	r1, #20
 801881a:	f7ff fa5d 	bl	8017cd8 <rcl_wait_set_add_timer>
 801881e:	2800      	cmp	r0, #0
 8018820:	d1c9      	bne.n	80187b6 <rcl_action_wait_set_add_action_server+0x26>
 8018822:	2e00      	cmp	r6, #0
 8018824:	d0c7      	beq.n	80187b6 <rcl_action_wait_set_add_action_server+0x26>
 8018826:	6823      	ldr	r3, [r4, #0]
 8018828:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801882c:	6033      	str	r3, [r6, #0]
 801882e:	bd70      	pop	{r4, r5, r6, pc}
 8018830:	f44f 7061 	mov.w	r0, #900	; 0x384
 8018834:	4770      	bx	lr
 8018836:	bf00      	nop

08018838 <rcl_action_server_wait_set_get_entities_ready>:
 8018838:	2800      	cmp	r0, #0
 801883a:	d067      	beq.n	801890c <rcl_action_server_wait_set_get_entities_ready+0xd4>
 801883c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018840:	460c      	mov	r4, r1
 8018842:	b161      	cbz	r1, 801885e <rcl_action_server_wait_set_get_entities_ready+0x26>
 8018844:	4605      	mov	r5, r0
 8018846:	6808      	ldr	r0, [r1, #0]
 8018848:	b148      	cbz	r0, 801885e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801884a:	4616      	mov	r6, r2
 801884c:	4698      	mov	r8, r3
 801884e:	f7fe f82b 	bl	80168a8 <rcl_service_is_valid>
 8018852:	b120      	cbz	r0, 801885e <rcl_action_server_wait_set_get_entities_ready+0x26>
 8018854:	6820      	ldr	r0, [r4, #0]
 8018856:	3004      	adds	r0, #4
 8018858:	f7fe f826 	bl	80168a8 <rcl_service_is_valid>
 801885c:	b918      	cbnz	r0, 8018866 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801885e:	f640 0098 	movw	r0, #2200	; 0x898
 8018862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018866:	6820      	ldr	r0, [r4, #0]
 8018868:	3008      	adds	r0, #8
 801886a:	f7fe f81d 	bl	80168a8 <rcl_service_is_valid>
 801886e:	2800      	cmp	r0, #0
 8018870:	d0f5      	beq.n	801885e <rcl_action_server_wait_set_get_entities_ready+0x26>
 8018872:	6820      	ldr	r0, [r4, #0]
 8018874:	300c      	adds	r0, #12
 8018876:	f7f5 f939 	bl	800daec <rcl_publisher_is_valid_except_context>
 801887a:	2800      	cmp	r0, #0
 801887c:	d0ef      	beq.n	801885e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801887e:	6820      	ldr	r0, [r4, #0]
 8018880:	3010      	adds	r0, #16
 8018882:	f7f5 f933 	bl	800daec <rcl_publisher_is_valid_except_context>
 8018886:	2800      	cmp	r0, #0
 8018888:	d0e9      	beq.n	801885e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801888a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801888e:	2a00      	cmp	r2, #0
 8018890:	bf18      	it	ne
 8018892:	2b00      	cmpne	r3, #0
 8018894:	bf0c      	ite	eq
 8018896:	2101      	moveq	r1, #1
 8018898:	2100      	movne	r1, #0
 801889a:	f1b8 0f00 	cmp.w	r8, #0
 801889e:	bf08      	it	eq
 80188a0:	f041 0101 	orreq.w	r1, r1, #1
 80188a4:	bba9      	cbnz	r1, 8018912 <rcl_action_server_wait_set_get_entities_ready+0xda>
 80188a6:	b3a6      	cbz	r6, 8018912 <rcl_action_server_wait_set_get_entities_ready+0xda>
 80188a8:	6821      	ldr	r1, [r4, #0]
 80188aa:	2000      	movs	r0, #0
 80188ac:	692c      	ldr	r4, [r5, #16]
 80188ae:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 80188b2:	6a2f      	ldr	r7, [r5, #32]
 80188b4:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80188b8:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 80188bc:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 80188c0:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 80188c4:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 80188c8:	1a64      	subs	r4, r4, r1
 80188ca:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 80188ce:	fab4 f484 	clz	r4, r4
 80188d2:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80188d6:	0964      	lsrs	r4, r4, #5
 80188d8:	7034      	strb	r4, [r6, #0]
 80188da:	1d0c      	adds	r4, r1, #4
 80188dc:	1b2c      	subs	r4, r5, r4
 80188de:	fab4 f484 	clz	r4, r4
 80188e2:	0964      	lsrs	r4, r4, #5
 80188e4:	f888 4000 	strb.w	r4, [r8]
 80188e8:	f101 0408 	add.w	r4, r1, #8
 80188ec:	1b1b      	subs	r3, r3, r4
 80188ee:	9c06      	ldr	r4, [sp, #24]
 80188f0:	fab3 f383 	clz	r3, r3
 80188f4:	095b      	lsrs	r3, r3, #5
 80188f6:	7023      	strb	r3, [r4, #0]
 80188f8:	f101 0314 	add.w	r3, r1, #20
 80188fc:	1ad3      	subs	r3, r2, r3
 80188fe:	9a07      	ldr	r2, [sp, #28]
 8018900:	fab3 f383 	clz	r3, r3
 8018904:	095b      	lsrs	r3, r3, #5
 8018906:	7013      	strb	r3, [r2, #0]
 8018908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801890c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8018910:	4770      	bx	lr
 8018912:	200b      	movs	r0, #11
 8018914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018918 <_execute_event_handler>:
 8018918:	2002      	movs	r0, #2
 801891a:	4770      	bx	lr

0801891c <_cancel_goal_event_handler>:
 801891c:	2003      	movs	r0, #3
 801891e:	4770      	bx	lr

08018920 <_succeed_event_handler>:
 8018920:	2004      	movs	r0, #4
 8018922:	4770      	bx	lr

08018924 <_abort_event_handler>:
 8018924:	2006      	movs	r0, #6
 8018926:	4770      	bx	lr

08018928 <_canceled_event_handler>:
 8018928:	2005      	movs	r0, #5
 801892a:	4770      	bx	lr

0801892c <rcl_action_transition_goal_state>:
 801892c:	b2c2      	uxtb	r2, r0
 801892e:	2a06      	cmp	r2, #6
 8018930:	d810      	bhi.n	8018954 <rcl_action_transition_goal_state+0x28>
 8018932:	2904      	cmp	r1, #4
 8018934:	d80e      	bhi.n	8018954 <rcl_action_transition_goal_state+0x28>
 8018936:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801893a:	b410      	push	{r4}
 801893c:	1853      	adds	r3, r2, r1
 801893e:	4c06      	ldr	r4, [pc, #24]	; (8018958 <rcl_action_transition_goal_state+0x2c>)
 8018940:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8018944:	b113      	cbz	r3, 801894c <rcl_action_transition_goal_state+0x20>
 8018946:	f85d 4b04 	ldr.w	r4, [sp], #4
 801894a:	4718      	bx	r3
 801894c:	2000      	movs	r0, #0
 801894e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018952:	4770      	bx	lr
 8018954:	2000      	movs	r0, #0
 8018956:	4770      	bx	lr
 8018958:	080202b0 	.word	0x080202b0

0801895c <rcl_action_get_zero_initialized_cancel_response>:
 801895c:	b510      	push	{r4, lr}
 801895e:	4c07      	ldr	r4, [pc, #28]	; (801897c <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8018960:	4686      	mov	lr, r0
 8018962:	4684      	mov	ip, r0
 8018964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018966:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801896a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801896c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018970:	6823      	ldr	r3, [r4, #0]
 8018972:	4670      	mov	r0, lr
 8018974:	f8cc 3000 	str.w	r3, [ip]
 8018978:	bd10      	pop	{r4, pc}
 801897a:	bf00      	nop
 801897c:	0802033c 	.word	0x0802033c

08018980 <rclc_action_send_result_request>:
 8018980:	b1d0      	cbz	r0, 80189b8 <rclc_action_send_result_request+0x38>
 8018982:	4684      	mov	ip, r0
 8018984:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8018988:	b500      	push	{lr}
 801898a:	b087      	sub	sp, #28
 801898c:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8018990:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8018994:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8018998:	f10d 0e08 	add.w	lr, sp, #8
 801899c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80189a0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80189a4:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 80189a8:	a902      	add	r1, sp, #8
 80189aa:	3010      	adds	r0, #16
 80189ac:	f7ff fbcc 	bl	8018148 <rcl_action_send_result_request>
 80189b0:	b920      	cbnz	r0, 80189bc <rclc_action_send_result_request+0x3c>
 80189b2:	b007      	add	sp, #28
 80189b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80189b8:	200b      	movs	r0, #11
 80189ba:	4770      	bx	lr
 80189bc:	9001      	str	r0, [sp, #4]
 80189be:	f7f6 f91b 	bl	800ebf8 <rcutils_reset_error>
 80189c2:	9801      	ldr	r0, [sp, #4]
 80189c4:	b007      	add	sp, #28
 80189c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80189ca:	bf00      	nop

080189cc <rclc_action_take_goal_handle>:
 80189cc:	b160      	cbz	r0, 80189e8 <rclc_action_take_goal_handle+0x1c>
 80189ce:	6883      	ldr	r3, [r0, #8]
 80189d0:	b143      	cbz	r3, 80189e4 <rclc_action_take_goal_handle+0x18>
 80189d2:	6819      	ldr	r1, [r3, #0]
 80189d4:	2200      	movs	r2, #0
 80189d6:	6081      	str	r1, [r0, #8]
 80189d8:	721a      	strb	r2, [r3, #8]
 80189da:	68c1      	ldr	r1, [r0, #12]
 80189dc:	621a      	str	r2, [r3, #32]
 80189de:	849a      	strh	r2, [r3, #36]	; 0x24
 80189e0:	6019      	str	r1, [r3, #0]
 80189e2:	60c3      	str	r3, [r0, #12]
 80189e4:	4618      	mov	r0, r3
 80189e6:	4770      	bx	lr
 80189e8:	4603      	mov	r3, r0
 80189ea:	e7fb      	b.n	80189e4 <rclc_action_take_goal_handle+0x18>

080189ec <rclc_action_remove_used_goal_handle>:
 80189ec:	b180      	cbz	r0, 8018a10 <rclc_action_remove_used_goal_handle+0x24>
 80189ee:	b179      	cbz	r1, 8018a10 <rclc_action_remove_used_goal_handle+0x24>
 80189f0:	68c3      	ldr	r3, [r0, #12]
 80189f2:	4299      	cmp	r1, r3
 80189f4:	d00d      	beq.n	8018a12 <rclc_action_remove_used_goal_handle+0x26>
 80189f6:	b12b      	cbz	r3, 8018a04 <rclc_action_remove_used_goal_handle+0x18>
 80189f8:	681a      	ldr	r2, [r3, #0]
 80189fa:	4291      	cmp	r1, r2
 80189fc:	d003      	beq.n	8018a06 <rclc_action_remove_used_goal_handle+0x1a>
 80189fe:	4613      	mov	r3, r2
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d1f9      	bne.n	80189f8 <rclc_action_remove_used_goal_handle+0xc>
 8018a04:	4770      	bx	lr
 8018a06:	680a      	ldr	r2, [r1, #0]
 8018a08:	601a      	str	r2, [r3, #0]
 8018a0a:	6883      	ldr	r3, [r0, #8]
 8018a0c:	600b      	str	r3, [r1, #0]
 8018a0e:	6081      	str	r1, [r0, #8]
 8018a10:	4770      	bx	lr
 8018a12:	680b      	ldr	r3, [r1, #0]
 8018a14:	60c3      	str	r3, [r0, #12]
 8018a16:	e7f8      	b.n	8018a0a <rclc_action_remove_used_goal_handle+0x1e>

08018a18 <rclc_action_find_goal_handle_by_uuid>:
 8018a18:	b538      	push	{r3, r4, r5, lr}
 8018a1a:	b181      	cbz	r1, 8018a3e <rclc_action_find_goal_handle_by_uuid+0x26>
 8018a1c:	b178      	cbz	r0, 8018a3e <rclc_action_find_goal_handle_by_uuid+0x26>
 8018a1e:	68c4      	ldr	r4, [r0, #12]
 8018a20:	460d      	mov	r5, r1
 8018a22:	b914      	cbnz	r4, 8018a2a <rclc_action_find_goal_handle_by_uuid+0x12>
 8018a24:	e009      	b.n	8018a3a <rclc_action_find_goal_handle_by_uuid+0x22>
 8018a26:	6824      	ldr	r4, [r4, #0]
 8018a28:	b13c      	cbz	r4, 8018a3a <rclc_action_find_goal_handle_by_uuid+0x22>
 8018a2a:	f104 0009 	add.w	r0, r4, #9
 8018a2e:	2210      	movs	r2, #16
 8018a30:	4629      	mov	r1, r5
 8018a32:	f005 f845 	bl	801dac0 <memcmp>
 8018a36:	2800      	cmp	r0, #0
 8018a38:	d1f5      	bne.n	8018a26 <rclc_action_find_goal_handle_by_uuid+0xe>
 8018a3a:	4620      	mov	r0, r4
 8018a3c:	bd38      	pop	{r3, r4, r5, pc}
 8018a3e:	2400      	movs	r4, #0
 8018a40:	4620      	mov	r0, r4
 8018a42:	bd38      	pop	{r3, r4, r5, pc}

08018a44 <rclc_action_find_first_handle_by_status>:
 8018a44:	b140      	cbz	r0, 8018a58 <rclc_action_find_first_handle_by_status+0x14>
 8018a46:	68c0      	ldr	r0, [r0, #12]
 8018a48:	b910      	cbnz	r0, 8018a50 <rclc_action_find_first_handle_by_status+0xc>
 8018a4a:	e005      	b.n	8018a58 <rclc_action_find_first_handle_by_status+0x14>
 8018a4c:	6800      	ldr	r0, [r0, #0]
 8018a4e:	b118      	cbz	r0, 8018a58 <rclc_action_find_first_handle_by_status+0x14>
 8018a50:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8018a54:	428b      	cmp	r3, r1
 8018a56:	d1f9      	bne.n	8018a4c <rclc_action_find_first_handle_by_status+0x8>
 8018a58:	4770      	bx	lr
 8018a5a:	bf00      	nop

08018a5c <rclc_action_find_first_terminated_handle>:
 8018a5c:	b140      	cbz	r0, 8018a70 <rclc_action_find_first_terminated_handle+0x14>
 8018a5e:	68c0      	ldr	r0, [r0, #12]
 8018a60:	b910      	cbnz	r0, 8018a68 <rclc_action_find_first_terminated_handle+0xc>
 8018a62:	e005      	b.n	8018a70 <rclc_action_find_first_terminated_handle+0x14>
 8018a64:	6800      	ldr	r0, [r0, #0]
 8018a66:	b118      	cbz	r0, 8018a70 <rclc_action_find_first_terminated_handle+0x14>
 8018a68:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8018a6c:	2b03      	cmp	r3, #3
 8018a6e:	ddf9      	ble.n	8018a64 <rclc_action_find_first_terminated_handle+0x8>
 8018a70:	4770      	bx	lr
 8018a72:	bf00      	nop

08018a74 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8018a74:	b170      	cbz	r0, 8018a94 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8018a76:	68c0      	ldr	r0, [r0, #12]
 8018a78:	b160      	cbz	r0, 8018a94 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8018a7a:	b410      	push	{r4}
 8018a7c:	e001      	b.n	8018a82 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8018a7e:	6800      	ldr	r0, [r0, #0]
 8018a80:	b128      	cbz	r0, 8018a8e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8018a82:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 8018a86:	4299      	cmp	r1, r3
 8018a88:	bf08      	it	eq
 8018a8a:	4294      	cmpeq	r4, r2
 8018a8c:	d1f7      	bne.n	8018a7e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8018a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018a92:	4770      	bx	lr
 8018a94:	4770      	bx	lr
 8018a96:	bf00      	nop

08018a98 <rclc_action_find_handle_by_result_request_sequence_number>:
 8018a98:	b170      	cbz	r0, 8018ab8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8018a9a:	68c0      	ldr	r0, [r0, #12]
 8018a9c:	b160      	cbz	r0, 8018ab8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8018a9e:	b410      	push	{r4}
 8018aa0:	e001      	b.n	8018aa6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8018aa2:	6800      	ldr	r0, [r0, #0]
 8018aa4:	b128      	cbz	r0, 8018ab2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8018aa6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 8018aaa:	4299      	cmp	r1, r3
 8018aac:	bf08      	it	eq
 8018aae:	4294      	cmpeq	r4, r2
 8018ab0:	d1f7      	bne.n	8018aa2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8018ab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ab6:	4770      	bx	lr
 8018ab8:	4770      	bx	lr
 8018aba:	bf00      	nop

08018abc <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8018abc:	b170      	cbz	r0, 8018adc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8018abe:	68c0      	ldr	r0, [r0, #12]
 8018ac0:	b160      	cbz	r0, 8018adc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8018ac2:	b410      	push	{r4}
 8018ac4:	e001      	b.n	8018aca <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8018ac6:	6800      	ldr	r0, [r0, #0]
 8018ac8:	b128      	cbz	r0, 8018ad6 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8018aca:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 8018ace:	4299      	cmp	r1, r3
 8018ad0:	bf08      	it	eq
 8018ad2:	4294      	cmpeq	r4, r2
 8018ad4:	d1f7      	bne.n	8018ac6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8018ad6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ada:	4770      	bx	lr
 8018adc:	4770      	bx	lr
 8018ade:	bf00      	nop

08018ae0 <rclc_action_find_first_handle_with_goal_response>:
 8018ae0:	b140      	cbz	r0, 8018af4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018ae2:	68c0      	ldr	r0, [r0, #12]
 8018ae4:	b910      	cbnz	r0, 8018aec <rclc_action_find_first_handle_with_goal_response+0xc>
 8018ae6:	e005      	b.n	8018af4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018ae8:	6800      	ldr	r0, [r0, #0]
 8018aea:	b118      	cbz	r0, 8018af4 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018aec:	f890 3020 	ldrb.w	r3, [r0, #32]
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d0f9      	beq.n	8018ae8 <rclc_action_find_first_handle_with_goal_response+0x8>
 8018af4:	4770      	bx	lr
 8018af6:	bf00      	nop

08018af8 <rclc_action_find_first_handle_with_result_response>:
 8018af8:	b140      	cbz	r0, 8018b0c <rclc_action_find_first_handle_with_result_response+0x14>
 8018afa:	68c0      	ldr	r0, [r0, #12]
 8018afc:	b910      	cbnz	r0, 8018b04 <rclc_action_find_first_handle_with_result_response+0xc>
 8018afe:	e005      	b.n	8018b0c <rclc_action_find_first_handle_with_result_response+0x14>
 8018b00:	6800      	ldr	r0, [r0, #0]
 8018b02:	b118      	cbz	r0, 8018b0c <rclc_action_find_first_handle_with_result_response+0x14>
 8018b04:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d0f9      	beq.n	8018b00 <rclc_action_find_first_handle_with_result_response+0x8>
 8018b0c:	4770      	bx	lr
 8018b0e:	bf00      	nop

08018b10 <rclc_action_server_response_goal_request>:
 8018b10:	b198      	cbz	r0, 8018b3a <rclc_action_server_response_goal_request+0x2a>
 8018b12:	2200      	movs	r2, #0
 8018b14:	460b      	mov	r3, r1
 8018b16:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8018b1a:	b510      	push	{r4, lr}
 8018b1c:	6844      	ldr	r4, [r0, #4]
 8018b1e:	b086      	sub	sp, #24
 8018b20:	f104 0010 	add.w	r0, r4, #16
 8018b24:	9205      	str	r2, [sp, #20]
 8018b26:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8018b2a:	aa03      	add	r2, sp, #12
 8018b2c:	f88d 300c 	strb.w	r3, [sp, #12]
 8018b30:	f7ff fd40 	bl	80185b4 <rcl_action_send_goal_response>
 8018b34:	b918      	cbnz	r0, 8018b3e <rclc_action_server_response_goal_request+0x2e>
 8018b36:	b006      	add	sp, #24
 8018b38:	bd10      	pop	{r4, pc}
 8018b3a:	200b      	movs	r0, #11
 8018b3c:	4770      	bx	lr
 8018b3e:	9001      	str	r0, [sp, #4]
 8018b40:	f7f6 f85a 	bl	800ebf8 <rcutils_reset_error>
 8018b44:	9801      	ldr	r0, [sp, #4]
 8018b46:	b006      	add	sp, #24
 8018b48:	bd10      	pop	{r4, pc}
 8018b4a:	bf00      	nop
 8018b4c:	0000      	movs	r0, r0
	...

08018b50 <rclc_action_server_goal_cancel_accept>:
 8018b50:	b310      	cbz	r0, 8018b98 <rclc_action_server_goal_cancel_accept+0x48>
 8018b52:	b510      	push	{r4, lr}
 8018b54:	b090      	sub	sp, #64	; 0x40
 8018b56:	4604      	mov	r4, r0
 8018b58:	a806      	add	r0, sp, #24
 8018b5a:	f7ff feff 	bl	801895c <rcl_action_get_zero_initialized_cancel_response>
 8018b5e:	2300      	movs	r3, #0
 8018b60:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8018b64:	46ec      	mov	ip, sp
 8018b66:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8018b6a:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8018b6e:	f88d 3018 	strb.w	r3, [sp, #24]
 8018b72:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8018b76:	f8cd d01c 	str.w	sp, [sp, #28]
 8018b7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018b7e:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8018ba0 <rclc_action_server_goal_cancel_accept+0x50>
 8018b82:	6860      	ldr	r0, [r4, #4]
 8018b84:	aa06      	add	r2, sp, #24
 8018b86:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8018b8a:	3010      	adds	r0, #16
 8018b8c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8018b90:	f7ff fdc6 	bl	8018720 <rcl_action_send_cancel_response>
 8018b94:	b010      	add	sp, #64	; 0x40
 8018b96:	bd10      	pop	{r4, pc}
 8018b98:	200b      	movs	r0, #11
 8018b9a:	4770      	bx	lr
 8018b9c:	f3af 8000 	nop.w
 8018ba0:	00000001 	.word	0x00000001
 8018ba4:	00000001 	.word	0x00000001

08018ba8 <rclc_action_server_goal_cancel_reject>:
 8018ba8:	b082      	sub	sp, #8
 8018baa:	b530      	push	{r4, r5, lr}
 8018bac:	b08b      	sub	sp, #44	; 0x2c
 8018bae:	ac0e      	add	r4, sp, #56	; 0x38
 8018bb0:	e884 000c 	stmia.w	r4, {r2, r3}
 8018bb4:	b188      	cbz	r0, 8018bda <rclc_action_server_goal_cancel_reject+0x32>
 8018bb6:	4604      	mov	r4, r0
 8018bb8:	a801      	add	r0, sp, #4
 8018bba:	460d      	mov	r5, r1
 8018bbc:	f7ff fece 	bl	801895c <rcl_action_get_zero_initialized_cancel_response>
 8018bc0:	aa01      	add	r2, sp, #4
 8018bc2:	a90e      	add	r1, sp, #56	; 0x38
 8018bc4:	f104 0010 	add.w	r0, r4, #16
 8018bc8:	f88d 5004 	strb.w	r5, [sp, #4]
 8018bcc:	f7ff fda8 	bl	8018720 <rcl_action_send_cancel_response>
 8018bd0:	b00b      	add	sp, #44	; 0x2c
 8018bd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018bd6:	b002      	add	sp, #8
 8018bd8:	4770      	bx	lr
 8018bda:	200b      	movs	r0, #11
 8018bdc:	b00b      	add	sp, #44	; 0x2c
 8018bde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018be2:	b002      	add	sp, #8
 8018be4:	4770      	bx	lr
 8018be6:	bf00      	nop

08018be8 <__atomic_load_8>:
 8018be8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8018bec:	4a16      	ldr	r2, [pc, #88]	; (8018c48 <__atomic_load_8+0x60>)
 8018bee:	4b17      	ldr	r3, [pc, #92]	; (8018c4c <__atomic_load_8+0x64>)
 8018bf0:	f04f 0c01 	mov.w	ip, #1
 8018bf4:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8018bf8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8018bfc:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8018c00:	fb02 f101 	mul.w	r1, r2, r1
 8018c04:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8018c08:	fba3 2301 	umull	r2, r3, r3, r1
 8018c0c:	091b      	lsrs	r3, r3, #4
 8018c0e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8018c12:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8018c16:	b4d0      	push	{r4, r6, r7}
 8018c18:	1ac9      	subs	r1, r1, r3
 8018c1a:	4c0d      	ldr	r4, [pc, #52]	; (8018c50 <__atomic_load_8+0x68>)
 8018c1c:	1862      	adds	r2, r4, r1
 8018c1e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8018c22:	e8c2 cf46 	strexb	r6, ip, [r2]
 8018c26:	2e00      	cmp	r6, #0
 8018c28:	d1f9      	bne.n	8018c1e <__atomic_load_8+0x36>
 8018c2a:	b2db      	uxtb	r3, r3
 8018c2c:	f3bf 8f5b 	dmb	ish
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d1f4      	bne.n	8018c1e <__atomic_load_8+0x36>
 8018c34:	e9d0 6700 	ldrd	r6, r7, [r0]
 8018c38:	f3bf 8f5b 	dmb	ish
 8018c3c:	5463      	strb	r3, [r4, r1]
 8018c3e:	4630      	mov	r0, r6
 8018c40:	4639      	mov	r1, r7
 8018c42:	bcd0      	pop	{r4, r6, r7}
 8018c44:	4770      	bx	lr
 8018c46:	bf00      	nop
 8018c48:	27d4eb2d 	.word	0x27d4eb2d
 8018c4c:	b21642c9 	.word	0xb21642c9
 8018c50:	20010a68 	.word	0x20010a68

08018c54 <__atomic_store_8>:
 8018c54:	b570      	push	{r4, r5, r6, lr}
 8018c56:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8018c5a:	4916      	ldr	r1, [pc, #88]	; (8018cb4 <__atomic_store_8+0x60>)
 8018c5c:	4c16      	ldr	r4, [pc, #88]	; (8018cb8 <__atomic_store_8+0x64>)
 8018c5e:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 8018c62:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8018c66:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8018c6a:	fb01 fe0e 	mul.w	lr, r1, lr
 8018c6e:	4913      	ldr	r1, [pc, #76]	; (8018cbc <__atomic_store_8+0x68>)
 8018c70:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8018c74:	fba1 510e 	umull	r5, r1, r1, lr
 8018c78:	f04f 0501 	mov.w	r5, #1
 8018c7c:	0909      	lsrs	r1, r1, #4
 8018c7e:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8018c82:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 8018c86:	ebae 0e01 	sub.w	lr, lr, r1
 8018c8a:	eb04 0c0e 	add.w	ip, r4, lr
 8018c8e:	e8dc 1f4f 	ldrexb	r1, [ip]
 8018c92:	e8cc 5f46 	strexb	r6, r5, [ip]
 8018c96:	2e00      	cmp	r6, #0
 8018c98:	d1f9      	bne.n	8018c8e <__atomic_store_8+0x3a>
 8018c9a:	b2c9      	uxtb	r1, r1
 8018c9c:	f3bf 8f5b 	dmb	ish
 8018ca0:	2900      	cmp	r1, #0
 8018ca2:	d1f4      	bne.n	8018c8e <__atomic_store_8+0x3a>
 8018ca4:	e9c0 2300 	strd	r2, r3, [r0]
 8018ca8:	f3bf 8f5b 	dmb	ish
 8018cac:	f804 100e 	strb.w	r1, [r4, lr]
 8018cb0:	bd70      	pop	{r4, r5, r6, pc}
 8018cb2:	bf00      	nop
 8018cb4:	27d4eb2d 	.word	0x27d4eb2d
 8018cb8:	20010a68 	.word	0x20010a68
 8018cbc:	b21642c9 	.word	0xb21642c9

08018cc0 <__atomic_exchange_8>:
 8018cc0:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8018cc4:	4917      	ldr	r1, [pc, #92]	; (8018d24 <__atomic_exchange_8+0x64>)
 8018cc6:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 8018cca:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8018cce:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8018cd2:	fb01 fc0c 	mul.w	ip, r1, ip
 8018cd6:	4914      	ldr	r1, [pc, #80]	; (8018d28 <__atomic_exchange_8+0x68>)
 8018cd8:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8018cdc:	b570      	push	{r4, r5, r6, lr}
 8018cde:	4686      	mov	lr, r0
 8018ce0:	fba1 010c 	umull	r0, r1, r1, ip
 8018ce4:	4d11      	ldr	r5, [pc, #68]	; (8018d2c <__atomic_exchange_8+0x6c>)
 8018ce6:	f04f 0001 	mov.w	r0, #1
 8018cea:	0909      	lsrs	r1, r1, #4
 8018cec:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8018cf0:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8018cf4:	ebac 0c01 	sub.w	ip, ip, r1
 8018cf8:	eb05 010c 	add.w	r1, r5, ip
 8018cfc:	e8d1 4f4f 	ldrexb	r4, [r1]
 8018d00:	e8c1 0f46 	strexb	r6, r0, [r1]
 8018d04:	2e00      	cmp	r6, #0
 8018d06:	d1f9      	bne.n	8018cfc <__atomic_exchange_8+0x3c>
 8018d08:	b2e4      	uxtb	r4, r4
 8018d0a:	f3bf 8f5b 	dmb	ish
 8018d0e:	2c00      	cmp	r4, #0
 8018d10:	d1f4      	bne.n	8018cfc <__atomic_exchange_8+0x3c>
 8018d12:	e9de 0100 	ldrd	r0, r1, [lr]
 8018d16:	e9ce 2300 	strd	r2, r3, [lr]
 8018d1a:	f3bf 8f5b 	dmb	ish
 8018d1e:	f805 400c 	strb.w	r4, [r5, ip]
 8018d22:	bd70      	pop	{r4, r5, r6, pc}
 8018d24:	27d4eb2d 	.word	0x27d4eb2d
 8018d28:	b21642c9 	.word	0xb21642c9
 8018d2c:	20010a68 	.word	0x20010a68

08018d30 <rcutils_get_env>:
 8018d30:	b168      	cbz	r0, 8018d4e <rcutils_get_env+0x1e>
 8018d32:	b510      	push	{r4, lr}
 8018d34:	460c      	mov	r4, r1
 8018d36:	b129      	cbz	r1, 8018d44 <rcutils_get_env+0x14>
 8018d38:	f004 fb2c 	bl	801d394 <getenv>
 8018d3c:	b120      	cbz	r0, 8018d48 <rcutils_get_env+0x18>
 8018d3e:	6020      	str	r0, [r4, #0]
 8018d40:	2000      	movs	r0, #0
 8018d42:	bd10      	pop	{r4, pc}
 8018d44:	4803      	ldr	r0, [pc, #12]	; (8018d54 <rcutils_get_env+0x24>)
 8018d46:	bd10      	pop	{r4, pc}
 8018d48:	4b03      	ldr	r3, [pc, #12]	; (8018d58 <rcutils_get_env+0x28>)
 8018d4a:	6023      	str	r3, [r4, #0]
 8018d4c:	bd10      	pop	{r4, pc}
 8018d4e:	4803      	ldr	r0, [pc, #12]	; (8018d5c <rcutils_get_env+0x2c>)
 8018d50:	4770      	bx	lr
 8018d52:	bf00      	nop
 8018d54:	0802037c 	.word	0x0802037c
 8018d58:	080204a0 	.word	0x080204a0
 8018d5c:	08020360 	.word	0x08020360

08018d60 <rcutils_is_directory>:
 8018d60:	2000      	movs	r0, #0
 8018d62:	4770      	bx	lr

08018d64 <rcutils_join_path>:
 8018d64:	b082      	sub	sp, #8
 8018d66:	2000      	movs	r0, #0
 8018d68:	e88d 000c 	stmia.w	sp, {r2, r3}
 8018d6c:	b002      	add	sp, #8
 8018d6e:	4770      	bx	lr

08018d70 <rcutils_to_native_path>:
 8018d70:	b084      	sub	sp, #16
 8018d72:	2000      	movs	r0, #0
 8018d74:	f10d 0c04 	add.w	ip, sp, #4
 8018d78:	b004      	add	sp, #16
 8018d7a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8018d7e:	4770      	bx	lr

08018d80 <rcutils_format_string_limit>:
 8018d80:	b40f      	push	{r0, r1, r2, r3}
 8018d82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d84:	b083      	sub	sp, #12
 8018d86:	ac08      	add	r4, sp, #32
 8018d88:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8018d8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8018d8e:	b326      	cbz	r6, 8018dda <rcutils_format_string_limit+0x5a>
 8018d90:	a808      	add	r0, sp, #32
 8018d92:	f7f5 ff0d 	bl	800ebb0 <rcutils_allocator_is_valid>
 8018d96:	b300      	cbz	r0, 8018dda <rcutils_format_string_limit+0x5a>
 8018d98:	2100      	movs	r1, #0
 8018d9a:	ab0f      	add	r3, sp, #60	; 0x3c
 8018d9c:	4632      	mov	r2, r6
 8018d9e:	4608      	mov	r0, r1
 8018da0:	e9cd 3300 	strd	r3, r3, [sp]
 8018da4:	f000 f906 	bl	8018fb4 <rcutils_vsnprintf>
 8018da8:	1c43      	adds	r3, r0, #1
 8018daa:	4605      	mov	r5, r0
 8018dac:	d015      	beq.n	8018dda <rcutils_format_string_limit+0x5a>
 8018dae:	1c47      	adds	r7, r0, #1
 8018db0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018db2:	429f      	cmp	r7, r3
 8018db4:	d901      	bls.n	8018dba <rcutils_format_string_limit+0x3a>
 8018db6:	1e5d      	subs	r5, r3, #1
 8018db8:	461f      	mov	r7, r3
 8018dba:	9b08      	ldr	r3, [sp, #32]
 8018dbc:	4638      	mov	r0, r7
 8018dbe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018dc0:	4798      	blx	r3
 8018dc2:	4604      	mov	r4, r0
 8018dc4:	b148      	cbz	r0, 8018dda <rcutils_format_string_limit+0x5a>
 8018dc6:	4632      	mov	r2, r6
 8018dc8:	4639      	mov	r1, r7
 8018dca:	9b01      	ldr	r3, [sp, #4]
 8018dcc:	f000 f8f2 	bl	8018fb4 <rcutils_vsnprintf>
 8018dd0:	2800      	cmp	r0, #0
 8018dd2:	db09      	blt.n	8018de8 <rcutils_format_string_limit+0x68>
 8018dd4:	2300      	movs	r3, #0
 8018dd6:	5563      	strb	r3, [r4, r5]
 8018dd8:	e000      	b.n	8018ddc <rcutils_format_string_limit+0x5c>
 8018dda:	2400      	movs	r4, #0
 8018ddc:	4620      	mov	r0, r4
 8018dde:	b003      	add	sp, #12
 8018de0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018de4:	b004      	add	sp, #16
 8018de6:	4770      	bx	lr
 8018de8:	4620      	mov	r0, r4
 8018dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018dec:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018dee:	2400      	movs	r4, #0
 8018df0:	4798      	blx	r3
 8018df2:	e7f3      	b.n	8018ddc <rcutils_format_string_limit+0x5c>

08018df4 <rcutils_repl_str>:
 8018df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018df8:	ed2d 8b02 	vpush	{d8}
 8018dfc:	b087      	sub	sp, #28
 8018dfe:	2600      	movs	r6, #0
 8018e00:	4680      	mov	r8, r0
 8018e02:	468a      	mov	sl, r1
 8018e04:	9000      	str	r0, [sp, #0]
 8018e06:	4608      	mov	r0, r1
 8018e08:	ee08 2a10 	vmov	s16, r2
 8018e0c:	4699      	mov	r9, r3
 8018e0e:	2510      	movs	r5, #16
 8018e10:	f7e7 fa76 	bl	8000300 <strlen>
 8018e14:	4637      	mov	r7, r6
 8018e16:	46b3      	mov	fp, r6
 8018e18:	9001      	str	r0, [sp, #4]
 8018e1a:	e01e      	b.n	8018e5a <rcutils_repl_str+0x66>
 8018e1c:	f10b 0b01 	add.w	fp, fp, #1
 8018e20:	9b01      	ldr	r3, [sp, #4]
 8018e22:	455e      	cmp	r6, fp
 8018e24:	eb04 0803 	add.w	r8, r4, r3
 8018e28:	d211      	bcs.n	8018e4e <rcutils_repl_str+0x5a>
 8018e2a:	442e      	add	r6, r5
 8018e2c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8018e30:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8018e34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018e38:	00b1      	lsls	r1, r6, #2
 8018e3a:	4798      	blx	r3
 8018e3c:	2800      	cmp	r0, #0
 8018e3e:	f000 8088 	beq.w	8018f52 <rcutils_repl_str+0x15e>
 8018e42:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8018e46:	4607      	mov	r7, r0
 8018e48:	bf28      	it	cs
 8018e4a:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8018e4e:	9a00      	ldr	r2, [sp, #0]
 8018e50:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8018e54:	1aa4      	subs	r4, r4, r2
 8018e56:	f843 4c04 	str.w	r4, [r3, #-4]
 8018e5a:	4651      	mov	r1, sl
 8018e5c:	4640      	mov	r0, r8
 8018e5e:	f004 fe93 	bl	801db88 <strstr>
 8018e62:	4604      	mov	r4, r0
 8018e64:	4638      	mov	r0, r7
 8018e66:	2c00      	cmp	r4, #0
 8018e68:	d1d8      	bne.n	8018e1c <rcutils_repl_str+0x28>
 8018e6a:	4640      	mov	r0, r8
 8018e6c:	f7e7 fa48 	bl	8000300 <strlen>
 8018e70:	9b00      	ldr	r3, [sp, #0]
 8018e72:	eba8 0803 	sub.w	r8, r8, r3
 8018e76:	eb08 0400 	add.w	r4, r8, r0
 8018e7a:	9402      	str	r4, [sp, #8]
 8018e7c:	f1bb 0f00 	cmp.w	fp, #0
 8018e80:	d045      	beq.n	8018f0e <rcutils_repl_str+0x11a>
 8018e82:	ee18 0a10 	vmov	r0, s16
 8018e86:	f7e7 fa3b 	bl	8000300 <strlen>
 8018e8a:	9a01      	ldr	r2, [sp, #4]
 8018e8c:	4606      	mov	r6, r0
 8018e8e:	f8d9 3000 	ldr.w	r3, [r9]
 8018e92:	1a82      	subs	r2, r0, r2
 8018e94:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8018e98:	fb0b 4202 	mla	r2, fp, r2, r4
 8018e9c:	1c50      	adds	r0, r2, #1
 8018e9e:	9205      	str	r2, [sp, #20]
 8018ea0:	4798      	blx	r3
 8018ea2:	4682      	mov	sl, r0
 8018ea4:	2800      	cmp	r0, #0
 8018ea6:	d054      	beq.n	8018f52 <rcutils_repl_str+0x15e>
 8018ea8:	683a      	ldr	r2, [r7, #0]
 8018eaa:	463d      	mov	r5, r7
 8018eac:	9900      	ldr	r1, [sp, #0]
 8018eae:	2401      	movs	r4, #1
 8018eb0:	f004 ff61 	bl	801dd76 <memcpy>
 8018eb4:	683b      	ldr	r3, [r7, #0]
 8018eb6:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8018eba:	eb0a 0803 	add.w	r8, sl, r3
 8018ebe:	ee18 7a10 	vmov	r7, s16
 8018ec2:	f8dd a000 	ldr.w	sl, [sp]
 8018ec6:	f8cd 9000 	str.w	r9, [sp]
 8018eca:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018ece:	4632      	mov	r2, r6
 8018ed0:	4639      	mov	r1, r7
 8018ed2:	4640      	mov	r0, r8
 8018ed4:	44b0      	add	r8, r6
 8018ed6:	f004 ff4e 	bl	801dd76 <memcpy>
 8018eda:	f855 2b04 	ldr.w	r2, [r5], #4
 8018ede:	45a3      	cmp	fp, r4
 8018ee0:	444a      	add	r2, r9
 8018ee2:	eb0a 0102 	add.w	r1, sl, r2
 8018ee6:	d02a      	beq.n	8018f3e <rcutils_repl_str+0x14a>
 8018ee8:	6828      	ldr	r0, [r5, #0]
 8018eea:	1a82      	subs	r2, r0, r2
 8018eec:	4640      	mov	r0, r8
 8018eee:	4490      	add	r8, r2
 8018ef0:	f004 ff41 	bl	801dd76 <memcpy>
 8018ef4:	1c62      	adds	r2, r4, #1
 8018ef6:	45a3      	cmp	fp, r4
 8018ef8:	4614      	mov	r4, r2
 8018efa:	d8e8      	bhi.n	8018ece <rcutils_repl_str+0xda>
 8018efc:	f8dd 9000 	ldr.w	r9, [sp]
 8018f00:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8018f04:	2300      	movs	r3, #0
 8018f06:	9a05      	ldr	r2, [sp, #20]
 8018f08:	f80a 3002 	strb.w	r3, [sl, r2]
 8018f0c:	e00b      	b.n	8018f26 <rcutils_repl_str+0x132>
 8018f0e:	4620      	mov	r0, r4
 8018f10:	f8d9 3000 	ldr.w	r3, [r9]
 8018f14:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8018f18:	3001      	adds	r0, #1
 8018f1a:	4798      	blx	r3
 8018f1c:	4682      	mov	sl, r0
 8018f1e:	b110      	cbz	r0, 8018f26 <rcutils_repl_str+0x132>
 8018f20:	9900      	ldr	r1, [sp, #0]
 8018f22:	f004 ff20 	bl	801dd66 <strcpy>
 8018f26:	4638      	mov	r0, r7
 8018f28:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8018f2c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8018f30:	4798      	blx	r3
 8018f32:	4650      	mov	r0, sl
 8018f34:	b007      	add	sp, #28
 8018f36:	ecbd 8b02 	vpop	{d8}
 8018f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f3e:	9b02      	ldr	r3, [sp, #8]
 8018f40:	4640      	mov	r0, r8
 8018f42:	f8dd 9000 	ldr.w	r9, [sp]
 8018f46:	1a9a      	subs	r2, r3, r2
 8018f48:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8018f4c:	f004 ff13 	bl	801dd76 <memcpy>
 8018f50:	e7d8      	b.n	8018f04 <rcutils_repl_str+0x110>
 8018f52:	f04f 0a00 	mov.w	sl, #0
 8018f56:	e7e6      	b.n	8018f26 <rcutils_repl_str+0x132>

08018f58 <rcutils_snprintf>:
 8018f58:	b40c      	push	{r2, r3}
 8018f5a:	b530      	push	{r4, r5, lr}
 8018f5c:	b083      	sub	sp, #12
 8018f5e:	ab06      	add	r3, sp, #24
 8018f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8018f64:	9301      	str	r3, [sp, #4]
 8018f66:	b1e2      	cbz	r2, 8018fa2 <rcutils_snprintf+0x4a>
 8018f68:	fab0 f480 	clz	r4, r0
 8018f6c:	fab1 f581 	clz	r5, r1
 8018f70:	ea50 0c01 	orrs.w	ip, r0, r1
 8018f74:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8018f78:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8018f7c:	d008      	beq.n	8018f90 <rcutils_snprintf+0x38>
 8018f7e:	b984      	cbnz	r4, 8018fa2 <rcutils_snprintf+0x4a>
 8018f80:	b97d      	cbnz	r5, 8018fa2 <rcutils_snprintf+0x4a>
 8018f82:	f004 fd8f 	bl	801daa4 <vsniprintf>
 8018f86:	b003      	add	sp, #12
 8018f88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018f8c:	b002      	add	sp, #8
 8018f8e:	4770      	bx	lr
 8018f90:	4661      	mov	r1, ip
 8018f92:	4660      	mov	r0, ip
 8018f94:	f004 fd86 	bl	801daa4 <vsniprintf>
 8018f98:	b003      	add	sp, #12
 8018f9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018f9e:	b002      	add	sp, #8
 8018fa0:	4770      	bx	lr
 8018fa2:	f004 feb3 	bl	801dd0c <__errno>
 8018fa6:	2216      	movs	r2, #22
 8018fa8:	4603      	mov	r3, r0
 8018faa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018fae:	601a      	str	r2, [r3, #0]
 8018fb0:	e7e9      	b.n	8018f86 <rcutils_snprintf+0x2e>
 8018fb2:	bf00      	nop

08018fb4 <rcutils_vsnprintf>:
 8018fb4:	b570      	push	{r4, r5, r6, lr}
 8018fb6:	b1b2      	cbz	r2, 8018fe6 <rcutils_vsnprintf+0x32>
 8018fb8:	fab0 f480 	clz	r4, r0
 8018fbc:	fab1 f581 	clz	r5, r1
 8018fc0:	ea50 0c01 	orrs.w	ip, r0, r1
 8018fc4:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8018fc8:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8018fcc:	d005      	beq.n	8018fda <rcutils_vsnprintf+0x26>
 8018fce:	b954      	cbnz	r4, 8018fe6 <rcutils_vsnprintf+0x32>
 8018fd0:	b94d      	cbnz	r5, 8018fe6 <rcutils_vsnprintf+0x32>
 8018fd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018fd6:	f004 bd65 	b.w	801daa4 <vsniprintf>
 8018fda:	4661      	mov	r1, ip
 8018fdc:	4660      	mov	r0, ip
 8018fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018fe2:	f004 bd5f 	b.w	801daa4 <vsniprintf>
 8018fe6:	f004 fe91 	bl	801dd0c <__errno>
 8018fea:	2316      	movs	r3, #22
 8018fec:	6003      	str	r3, [r0, #0]
 8018fee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018ff2:	bd70      	pop	{r4, r5, r6, pc}

08018ff4 <rcutils_strdup>:
 8018ff4:	b084      	sub	sp, #16
 8018ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ff8:	ac07      	add	r4, sp, #28
 8018ffa:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8018ffc:	4605      	mov	r5, r0
 8018ffe:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8019002:	b1d0      	cbz	r0, 801903a <rcutils_strdup+0x46>
 8019004:	460c      	mov	r4, r1
 8019006:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801900a:	2100      	movs	r1, #0
 801900c:	f7e7 f928 	bl	8000260 <memchr>
 8019010:	b180      	cbz	r0, 8019034 <rcutils_strdup+0x40>
 8019012:	1b46      	subs	r6, r0, r5
 8019014:	1c70      	adds	r0, r6, #1
 8019016:	4639      	mov	r1, r7
 8019018:	47a0      	blx	r4
 801901a:	4604      	mov	r4, r0
 801901c:	b128      	cbz	r0, 801902a <rcutils_strdup+0x36>
 801901e:	4632      	mov	r2, r6
 8019020:	4629      	mov	r1, r5
 8019022:	f004 fea8 	bl	801dd76 <memcpy>
 8019026:	2300      	movs	r3, #0
 8019028:	55a3      	strb	r3, [r4, r6]
 801902a:	4620      	mov	r0, r4
 801902c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019030:	b004      	add	sp, #16
 8019032:	4770      	bx	lr
 8019034:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8019038:	e7ed      	b.n	8019016 <rcutils_strdup+0x22>
 801903a:	4604      	mov	r4, r0
 801903c:	e7f5      	b.n	801902a <rcutils_strdup+0x36>
 801903e:	bf00      	nop

08019040 <rcutils_strndup>:
 8019040:	b082      	sub	sp, #8
 8019042:	b570      	push	{r4, r5, r6, lr}
 8019044:	ac04      	add	r4, sp, #16
 8019046:	4606      	mov	r6, r0
 8019048:	e884 000c 	stmia.w	r4, {r2, r3}
 801904c:	b1b8      	cbz	r0, 801907e <rcutils_strndup+0x3e>
 801904e:	460c      	mov	r4, r1
 8019050:	460a      	mov	r2, r1
 8019052:	2100      	movs	r1, #0
 8019054:	f7e7 f904 	bl	8000260 <memchr>
 8019058:	b100      	cbz	r0, 801905c <rcutils_strndup+0x1c>
 801905a:	1b84      	subs	r4, r0, r6
 801905c:	9b04      	ldr	r3, [sp, #16]
 801905e:	1c60      	adds	r0, r4, #1
 8019060:	9908      	ldr	r1, [sp, #32]
 8019062:	4798      	blx	r3
 8019064:	4605      	mov	r5, r0
 8019066:	b128      	cbz	r0, 8019074 <rcutils_strndup+0x34>
 8019068:	4622      	mov	r2, r4
 801906a:	4631      	mov	r1, r6
 801906c:	f004 fe83 	bl	801dd76 <memcpy>
 8019070:	2300      	movs	r3, #0
 8019072:	552b      	strb	r3, [r5, r4]
 8019074:	4628      	mov	r0, r5
 8019076:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801907a:	b002      	add	sp, #8
 801907c:	4770      	bx	lr
 801907e:	4605      	mov	r5, r0
 8019080:	e7f8      	b.n	8019074 <rcutils_strndup+0x34>
 8019082:	bf00      	nop

08019084 <rcutils_get_zero_initialized_string_map>:
 8019084:	2000      	movs	r0, #0
 8019086:	4b01      	ldr	r3, [pc, #4]	; (801908c <rcutils_get_zero_initialized_string_map+0x8>)
 8019088:	6018      	str	r0, [r3, #0]
 801908a:	4770      	bx	lr
 801908c:	20010a80 	.word	0x20010a80

08019090 <rcutils_string_map_reserve>:
 8019090:	2800      	cmp	r0, #0
 8019092:	d03e      	beq.n	8019112 <rcutils_string_map_reserve+0x82>
 8019094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019096:	6805      	ldr	r5, [r0, #0]
 8019098:	4606      	mov	r6, r0
 801909a:	460c      	mov	r4, r1
 801909c:	b12d      	cbz	r5, 80190aa <rcutils_string_map_reserve+0x1a>
 801909e:	68ab      	ldr	r3, [r5, #8]
 80190a0:	42a3      	cmp	r3, r4
 80190a2:	d904      	bls.n	80190ae <rcutils_string_map_reserve+0x1e>
 80190a4:	461c      	mov	r4, r3
 80190a6:	2d00      	cmp	r5, #0
 80190a8:	d1f9      	bne.n	801909e <rcutils_string_map_reserve+0xe>
 80190aa:	201f      	movs	r0, #31
 80190ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80190ae:	686b      	ldr	r3, [r5, #4]
 80190b0:	42a3      	cmp	r3, r4
 80190b2:	d02a      	beq.n	801910a <rcutils_string_map_reserve+0x7a>
 80190b4:	69e9      	ldr	r1, [r5, #28]
 80190b6:	b304      	cbz	r4, 80190fa <rcutils_string_map_reserve+0x6a>
 80190b8:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 80190bc:	d227      	bcs.n	801910e <rcutils_string_map_reserve+0x7e>
 80190be:	00e7      	lsls	r7, r4, #3
 80190c0:	460a      	mov	r2, r1
 80190c2:	696b      	ldr	r3, [r5, #20]
 80190c4:	6828      	ldr	r0, [r5, #0]
 80190c6:	4639      	mov	r1, r7
 80190c8:	4798      	blx	r3
 80190ca:	b300      	cbz	r0, 801910e <rcutils_string_map_reserve+0x7e>
 80190cc:	6835      	ldr	r5, [r6, #0]
 80190ce:	686a      	ldr	r2, [r5, #4]
 80190d0:	6028      	str	r0, [r5, #0]
 80190d2:	42a2      	cmp	r2, r4
 80190d4:	d216      	bcs.n	8019104 <rcutils_string_map_reserve+0x74>
 80190d6:	43d1      	mvns	r1, r2
 80190d8:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 80190dc:	4421      	add	r1, r4
 80190de:	2909      	cmp	r1, #9
 80190e0:	d919      	bls.n	8019116 <rcutils_string_map_reserve+0x86>
 80190e2:	0759      	lsls	r1, r3, #29
 80190e4:	d117      	bne.n	8019116 <rcutils_string_map_reserve+0x86>
 80190e6:	1aa1      	subs	r1, r4, r2
 80190e8:	2600      	movs	r6, #0
 80190ea:	2200      	movs	r2, #0
 80190ec:	2700      	movs	r7, #0
 80190ee:	3201      	adds	r2, #1
 80190f0:	4291      	cmp	r1, r2
 80190f2:	e8e3 6702 	strd	r6, r7, [r3], #8
 80190f6:	d8fa      	bhi.n	80190ee <rcutils_string_map_reserve+0x5e>
 80190f8:	e004      	b.n	8019104 <rcutils_string_map_reserve+0x74>
 80190fa:	692b      	ldr	r3, [r5, #16]
 80190fc:	6828      	ldr	r0, [r5, #0]
 80190fe:	4798      	blx	r3
 8019100:	6835      	ldr	r5, [r6, #0]
 8019102:	602c      	str	r4, [r5, #0]
 8019104:	2000      	movs	r0, #0
 8019106:	606c      	str	r4, [r5, #4]
 8019108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801910a:	2000      	movs	r0, #0
 801910c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801910e:	200a      	movs	r0, #10
 8019110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019112:	200b      	movs	r0, #11
 8019114:	4770      	bx	lr
 8019116:	4438      	add	r0, r7
 8019118:	2200      	movs	r2, #0
 801911a:	e9c3 2200 	strd	r2, r2, [r3]
 801911e:	3308      	adds	r3, #8
 8019120:	4283      	cmp	r3, r0
 8019122:	d1fa      	bne.n	801911a <rcutils_string_map_reserve+0x8a>
 8019124:	e7ee      	b.n	8019104 <rcutils_string_map_reserve+0x74>
 8019126:	bf00      	nop

08019128 <rcutils_string_map_init>:
 8019128:	b082      	sub	sp, #8
 801912a:	b570      	push	{r4, r5, r6, lr}
 801912c:	ac04      	add	r4, sp, #16
 801912e:	e884 000c 	stmia.w	r4, {r2, r3}
 8019132:	b378      	cbz	r0, 8019194 <rcutils_string_map_init+0x6c>
 8019134:	6806      	ldr	r6, [r0, #0]
 8019136:	4604      	mov	r4, r0
 8019138:	b12e      	cbz	r6, 8019146 <rcutils_string_map_init+0x1e>
 801913a:	251e      	movs	r5, #30
 801913c:	4628      	mov	r0, r5
 801913e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019142:	b002      	add	sp, #8
 8019144:	4770      	bx	lr
 8019146:	a804      	add	r0, sp, #16
 8019148:	460d      	mov	r5, r1
 801914a:	f7f5 fd31 	bl	800ebb0 <rcutils_allocator_is_valid>
 801914e:	b308      	cbz	r0, 8019194 <rcutils_string_map_init+0x6c>
 8019150:	9b04      	ldr	r3, [sp, #16]
 8019152:	2020      	movs	r0, #32
 8019154:	9908      	ldr	r1, [sp, #32]
 8019156:	4798      	blx	r3
 8019158:	6020      	str	r0, [r4, #0]
 801915a:	b308      	cbz	r0, 80191a0 <rcutils_string_map_init+0x78>
 801915c:	f10d 0e10 	add.w	lr, sp, #16
 8019160:	6086      	str	r6, [r0, #8]
 8019162:	f100 0c0c 	add.w	ip, r0, #12
 8019166:	e9c0 6600 	strd	r6, r6, [r0]
 801916a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801916e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019172:	f8de 3000 	ldr.w	r3, [lr]
 8019176:	4629      	mov	r1, r5
 8019178:	4620      	mov	r0, r4
 801917a:	f8cc 3000 	str.w	r3, [ip]
 801917e:	f7ff ff87 	bl	8019090 <rcutils_string_map_reserve>
 8019182:	4605      	mov	r5, r0
 8019184:	2800      	cmp	r0, #0
 8019186:	d0d9      	beq.n	801913c <rcutils_string_map_init+0x14>
 8019188:	9b05      	ldr	r3, [sp, #20]
 801918a:	9908      	ldr	r1, [sp, #32]
 801918c:	6820      	ldr	r0, [r4, #0]
 801918e:	4798      	blx	r3
 8019190:	6026      	str	r6, [r4, #0]
 8019192:	e7d3      	b.n	801913c <rcutils_string_map_init+0x14>
 8019194:	250b      	movs	r5, #11
 8019196:	4628      	mov	r0, r5
 8019198:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801919c:	b002      	add	sp, #8
 801919e:	4770      	bx	lr
 80191a0:	250a      	movs	r5, #10
 80191a2:	e7cb      	b.n	801913c <rcutils_string_map_init+0x14>

080191a4 <rcutils_string_map_fini>:
 80191a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80191a8:	b083      	sub	sp, #12
 80191aa:	2800      	cmp	r0, #0
 80191ac:	d03e      	beq.n	801922c <rcutils_string_map_fini+0x88>
 80191ae:	6804      	ldr	r4, [r0, #0]
 80191b0:	4606      	mov	r6, r0
 80191b2:	2c00      	cmp	r4, #0
 80191b4:	d036      	beq.n	8019224 <rcutils_string_map_fini+0x80>
 80191b6:	6863      	ldr	r3, [r4, #4]
 80191b8:	b34b      	cbz	r3, 801920e <rcutils_string_map_fini+0x6a>
 80191ba:	2500      	movs	r5, #0
 80191bc:	6822      	ldr	r2, [r4, #0]
 80191be:	462f      	mov	r7, r5
 80191c0:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 80191c4:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 80191c8:	b1f0      	cbz	r0, 8019208 <rcutils_string_map_fini+0x64>
 80191ca:	69e1      	ldr	r1, [r4, #28]
 80191cc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80191d0:	9101      	str	r1, [sp, #4]
 80191d2:	47c8      	blx	r9
 80191d4:	6823      	ldr	r3, [r4, #0]
 80191d6:	9901      	ldr	r1, [sp, #4]
 80191d8:	eb03 0208 	add.w	r2, r3, r8
 80191dc:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
 80191e0:	3501      	adds	r5, #1
 80191e2:	6850      	ldr	r0, [r2, #4]
 80191e4:	47c8      	blx	r9
 80191e6:	68a3      	ldr	r3, [r4, #8]
 80191e8:	6822      	ldr	r2, [r4, #0]
 80191ea:	3b01      	subs	r3, #1
 80191ec:	4442      	add	r2, r8
 80191ee:	6057      	str	r7, [r2, #4]
 80191f0:	60a3      	str	r3, [r4, #8]
 80191f2:	6834      	ldr	r4, [r6, #0]
 80191f4:	6863      	ldr	r3, [r4, #4]
 80191f6:	429d      	cmp	r5, r3
 80191f8:	d209      	bcs.n	801920e <rcutils_string_map_fini+0x6a>
 80191fa:	6822      	ldr	r2, [r4, #0]
 80191fc:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8019200:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 8019204:	2800      	cmp	r0, #0
 8019206:	d1e0      	bne.n	80191ca <rcutils_string_map_fini+0x26>
 8019208:	3501      	adds	r5, #1
 801920a:	429d      	cmp	r5, r3
 801920c:	d3d8      	bcc.n	80191c0 <rcutils_string_map_fini+0x1c>
 801920e:	2100      	movs	r1, #0
 8019210:	4630      	mov	r0, r6
 8019212:	f7ff ff3d 	bl	8019090 <rcutils_string_map_reserve>
 8019216:	4604      	mov	r4, r0
 8019218:	b920      	cbnz	r0, 8019224 <rcutils_string_map_fini+0x80>
 801921a:	6830      	ldr	r0, [r6, #0]
 801921c:	6903      	ldr	r3, [r0, #16]
 801921e:	69c1      	ldr	r1, [r0, #28]
 8019220:	4798      	blx	r3
 8019222:	6034      	str	r4, [r6, #0]
 8019224:	4620      	mov	r0, r4
 8019226:	b003      	add	sp, #12
 8019228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801922c:	240b      	movs	r4, #11
 801922e:	4620      	mov	r0, r4
 8019230:	b003      	add	sp, #12
 8019232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019236:	bf00      	nop

08019238 <rcutils_string_map_getn>:
 8019238:	b338      	cbz	r0, 801928a <rcutils_string_map_getn+0x52>
 801923a:	6803      	ldr	r3, [r0, #0]
 801923c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019240:	4688      	mov	r8, r1
 8019242:	b1d9      	cbz	r1, 801927c <rcutils_string_map_getn+0x44>
 8019244:	fab3 f483 	clz	r4, r3
 8019248:	0964      	lsrs	r4, r4, #5
 801924a:	b1bb      	cbz	r3, 801927c <rcutils_string_map_getn+0x44>
 801924c:	4691      	mov	r9, r2
 801924e:	e9d3 7600 	ldrd	r7, r6, [r3]
 8019252:	b19e      	cbz	r6, 801927c <rcutils_string_map_getn+0x44>
 8019254:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
 8019258:	eb07 0ac4 	add.w	sl, r7, r4, lsl #3
 801925c:	3401      	adds	r4, #1
 801925e:	4628      	mov	r0, r5
 8019260:	b155      	cbz	r5, 8019278 <rcutils_string_map_getn+0x40>
 8019262:	f7e7 f84d 	bl	8000300 <strlen>
 8019266:	4602      	mov	r2, r0
 8019268:	4629      	mov	r1, r5
 801926a:	4640      	mov	r0, r8
 801926c:	454a      	cmp	r2, r9
 801926e:	bf38      	it	cc
 8019270:	464a      	movcc	r2, r9
 8019272:	f004 fc64 	bl	801db3e <strncmp>
 8019276:	b120      	cbz	r0, 8019282 <rcutils_string_map_getn+0x4a>
 8019278:	42a6      	cmp	r6, r4
 801927a:	d1eb      	bne.n	8019254 <rcutils_string_map_getn+0x1c>
 801927c:	2000      	movs	r0, #0
 801927e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019282:	f8da 0004 	ldr.w	r0, [sl, #4]
 8019286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801928a:	4770      	bx	lr
 801928c:	0000      	movs	r0, r0
	...

08019290 <rmw_get_zero_initialized_context>:
 8019290:	b510      	push	{r4, lr}
 8019292:	4604      	mov	r4, r0
 8019294:	3010      	adds	r0, #16
 8019296:	f000 f80f 	bl	80192b8 <rmw_get_zero_initialized_init_options>
 801929a:	2300      	movs	r3, #0
 801929c:	4620      	mov	r0, r4
 801929e:	60a3      	str	r3, [r4, #8]
 80192a0:	66a3      	str	r3, [r4, #104]	; 0x68
 80192a2:	66e3      	str	r3, [r4, #108]	; 0x6c
 80192a4:	ed9f 7b02 	vldr	d7, [pc, #8]	; 80192b0 <rmw_get_zero_initialized_context+0x20>
 80192a8:	ed84 7b00 	vstr	d7, [r4]
 80192ac:	bd10      	pop	{r4, pc}
 80192ae:	bf00      	nop
	...

080192b8 <rmw_get_zero_initialized_init_options>:
 80192b8:	b510      	push	{r4, lr}
 80192ba:	4604      	mov	r4, r0
 80192bc:	2258      	movs	r2, #88	; 0x58
 80192be:	2100      	movs	r1, #0
 80192c0:	f004 fc28 	bl	801db14 <memset>
 80192c4:	f104 0010 	add.w	r0, r4, #16
 80192c8:	f000 f80a 	bl	80192e0 <rmw_get_default_security_options>
 80192cc:	f104 001c 	add.w	r0, r4, #28
 80192d0:	f003 fe50 	bl	801cf74 <rmw_get_zero_initialized_discovery_options>
 80192d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80192d8:	4620      	mov	r0, r4
 80192da:	60e3      	str	r3, [r4, #12]
 80192dc:	bd10      	pop	{r4, pc}
 80192de:	bf00      	nop

080192e0 <rmw_get_default_security_options>:
 80192e0:	2200      	movs	r2, #0
 80192e2:	7002      	strb	r2, [r0, #0]
 80192e4:	6042      	str	r2, [r0, #4]
 80192e6:	4770      	bx	lr

080192e8 <rmw_subscription_content_filter_options_fini>:
 80192e8:	b1b0      	cbz	r0, 8019318 <rmw_subscription_content_filter_options_fini+0x30>
 80192ea:	b538      	push	{r3, r4, r5, lr}
 80192ec:	4604      	mov	r4, r0
 80192ee:	4608      	mov	r0, r1
 80192f0:	460d      	mov	r5, r1
 80192f2:	f7f5 fc5d 	bl	800ebb0 <rcutils_allocator_is_valid>
 80192f6:	b168      	cbz	r0, 8019314 <rmw_subscription_content_filter_options_fini+0x2c>
 80192f8:	6820      	ldr	r0, [r4, #0]
 80192fa:	b120      	cbz	r0, 8019306 <rmw_subscription_content_filter_options_fini+0x1e>
 80192fc:	686b      	ldr	r3, [r5, #4]
 80192fe:	6929      	ldr	r1, [r5, #16]
 8019300:	4798      	blx	r3
 8019302:	2300      	movs	r3, #0
 8019304:	6023      	str	r3, [r4, #0]
 8019306:	1d20      	adds	r0, r4, #4
 8019308:	f003 fe0a 	bl	801cf20 <rcutils_string_array_fini>
 801930c:	3800      	subs	r0, #0
 801930e:	bf18      	it	ne
 8019310:	2001      	movne	r0, #1
 8019312:	bd38      	pop	{r3, r4, r5, pc}
 8019314:	200b      	movs	r0, #11
 8019316:	bd38      	pop	{r3, r4, r5, pc}
 8019318:	200b      	movs	r0, #11
 801931a:	4770      	bx	lr

0801931c <rmw_get_default_subscription_options>:
 801931c:	2200      	movs	r2, #0
 801931e:	e9c0 2200 	strd	r2, r2, [r0]
 8019322:	6082      	str	r2, [r0, #8]
 8019324:	4770      	bx	lr
 8019326:	bf00      	nop

08019328 <rmw_time_equal>:
 8019328:	b4f0      	push	{r4, r5, r6, r7}
 801932a:	b084      	sub	sp, #16
 801932c:	ac04      	add	r4, sp, #16
 801932e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8019332:	4603      	mov	r3, r0
 8019334:	4925      	ldr	r1, [pc, #148]	; (80193cc <rmw_time_equal+0xa4>)
 8019336:	9d01      	ldr	r5, [sp, #4]
 8019338:	4610      	mov	r0, r2
 801933a:	4299      	cmp	r1, r3
 801933c:	f04f 0202 	mov.w	r2, #2
 8019340:	9e03      	ldr	r6, [sp, #12]
 8019342:	41aa      	sbcs	r2, r5
 8019344:	d330      	bcc.n	80193a8 <rmw_time_equal+0x80>
 8019346:	4c22      	ldr	r4, [pc, #136]	; (80193d0 <rmw_time_equal+0xa8>)
 8019348:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801934c:	fba3 3204 	umull	r3, r2, r3, r4
 8019350:	fb04 2205 	mla	r2, r4, r5, r2
 8019354:	43dd      	mvns	r5, r3
 8019356:	1a8c      	subs	r4, r1, r2
 8019358:	4285      	cmp	r5, r0
 801935a:	41b4      	sbcs	r4, r6
 801935c:	d332      	bcc.n	80193c4 <rmw_time_equal+0x9c>
 801935e:	eb10 0c03 	adds.w	ip, r0, r3
 8019362:	eb42 0106 	adc.w	r1, r2, r6
 8019366:	4819      	ldr	r0, [pc, #100]	; (80193cc <rmw_time_equal+0xa4>)
 8019368:	2202      	movs	r2, #2
 801936a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801936c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801936e:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8019372:	4298      	cmp	r0, r3
 8019374:	41b2      	sbcs	r2, r6
 8019376:	d31c      	bcc.n	80193b2 <rmw_time_equal+0x8a>
 8019378:	4c15      	ldr	r4, [pc, #84]	; (80193d0 <rmw_time_equal+0xa8>)
 801937a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801937e:	fba3 3204 	umull	r3, r2, r3, r4
 8019382:	fb04 2206 	mla	r2, r4, r6, r2
 8019386:	43de      	mvns	r6, r3
 8019388:	1a84      	subs	r4, r0, r2
 801938a:	42ae      	cmp	r6, r5
 801938c:	41bc      	sbcs	r4, r7
 801938e:	d315      	bcc.n	80193bc <rmw_time_equal+0x94>
 8019390:	195b      	adds	r3, r3, r5
 8019392:	eb42 0207 	adc.w	r2, r2, r7
 8019396:	428a      	cmp	r2, r1
 8019398:	bf08      	it	eq
 801939a:	4563      	cmpeq	r3, ip
 801939c:	bf0c      	ite	eq
 801939e:	2001      	moveq	r0, #1
 80193a0:	2000      	movne	r0, #0
 80193a2:	b004      	add	sp, #16
 80193a4:	bcf0      	pop	{r4, r5, r6, r7}
 80193a6:	4770      	bx	lr
 80193a8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80193ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80193b0:	e7d9      	b.n	8019366 <rmw_time_equal+0x3e>
 80193b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80193b6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80193ba:	e7ec      	b.n	8019396 <rmw_time_equal+0x6e>
 80193bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80193c0:	4602      	mov	r2, r0
 80193c2:	e7e8      	b.n	8019396 <rmw_time_equal+0x6e>
 80193c4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80193c8:	e7cd      	b.n	8019366 <rmw_time_equal+0x3e>
 80193ca:	bf00      	nop
 80193cc:	25c17d04 	.word	0x25c17d04
 80193d0:	3b9aca00 	.word	0x3b9aca00

080193d4 <rmw_time_total_nsec>:
 80193d4:	b470      	push	{r4, r5, r6}
 80193d6:	b085      	sub	sp, #20
 80193d8:	ac04      	add	r4, sp, #16
 80193da:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80193de:	4603      	mov	r3, r0
 80193e0:	4913      	ldr	r1, [pc, #76]	; (8019430 <rmw_time_total_nsec+0x5c>)
 80193e2:	9d01      	ldr	r5, [sp, #4]
 80193e4:	4610      	mov	r0, r2
 80193e6:	4299      	cmp	r1, r3
 80193e8:	f04f 0202 	mov.w	r2, #2
 80193ec:	9e03      	ldr	r6, [sp, #12]
 80193ee:	41aa      	sbcs	r2, r5
 80193f0:	d311      	bcc.n	8019416 <rmw_time_total_nsec+0x42>
 80193f2:	4c10      	ldr	r4, [pc, #64]	; (8019434 <rmw_time_total_nsec+0x60>)
 80193f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80193f8:	fba3 3204 	umull	r3, r2, r3, r4
 80193fc:	fb04 2205 	mla	r2, r4, r5, r2
 8019400:	43dd      	mvns	r5, r3
 8019402:	1a8c      	subs	r4, r1, r2
 8019404:	4285      	cmp	r5, r0
 8019406:	41b4      	sbcs	r4, r6
 8019408:	d30c      	bcc.n	8019424 <rmw_time_total_nsec+0x50>
 801940a:	1818      	adds	r0, r3, r0
 801940c:	eb42 0106 	adc.w	r1, r2, r6
 8019410:	b005      	add	sp, #20
 8019412:	bc70      	pop	{r4, r5, r6}
 8019414:	4770      	bx	lr
 8019416:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801941a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801941e:	b005      	add	sp, #20
 8019420:	bc70      	pop	{r4, r5, r6}
 8019422:	4770      	bx	lr
 8019424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019428:	b005      	add	sp, #20
 801942a:	bc70      	pop	{r4, r5, r6}
 801942c:	4770      	bx	lr
 801942e:	bf00      	nop
 8019430:	25c17d04 	.word	0x25c17d04
 8019434:	3b9aca00 	.word	0x3b9aca00

08019438 <rmw_get_zero_initialized_message_info>:
 8019438:	b510      	push	{r4, lr}
 801943a:	4604      	mov	r4, r0
 801943c:	2238      	movs	r2, #56	; 0x38
 801943e:	2100      	movs	r1, #0
 8019440:	f004 fb68 	bl	801db14 <memset>
 8019444:	4620      	mov	r0, r4
 8019446:	bd10      	pop	{r4, pc}

08019448 <rmw_validate_full_topic_name>:
 8019448:	2800      	cmp	r0, #0
 801944a:	d05d      	beq.n	8019508 <rmw_validate_full_topic_name+0xc0>
 801944c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019450:	460d      	mov	r5, r1
 8019452:	2900      	cmp	r1, #0
 8019454:	d05a      	beq.n	801950c <rmw_validate_full_topic_name+0xc4>
 8019456:	4604      	mov	r4, r0
 8019458:	4616      	mov	r6, r2
 801945a:	f7e6 ff51 	bl	8000300 <strlen>
 801945e:	b150      	cbz	r0, 8019476 <rmw_validate_full_topic_name+0x2e>
 8019460:	7823      	ldrb	r3, [r4, #0]
 8019462:	2b2f      	cmp	r3, #47	; 0x2f
 8019464:	d00e      	beq.n	8019484 <rmw_validate_full_topic_name+0x3c>
 8019466:	2302      	movs	r3, #2
 8019468:	602b      	str	r3, [r5, #0]
 801946a:	b146      	cbz	r6, 801947e <rmw_validate_full_topic_name+0x36>
 801946c:	2300      	movs	r3, #0
 801946e:	4618      	mov	r0, r3
 8019470:	6033      	str	r3, [r6, #0]
 8019472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019476:	2301      	movs	r3, #1
 8019478:	602b      	str	r3, [r5, #0]
 801947a:	2e00      	cmp	r6, #0
 801947c:	d1f6      	bne.n	801946c <rmw_validate_full_topic_name+0x24>
 801947e:	2000      	movs	r0, #0
 8019480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019484:	1e43      	subs	r3, r0, #1
 8019486:	5ce2      	ldrb	r2, [r4, r3]
 8019488:	2a2f      	cmp	r2, #47	; 0x2f
 801948a:	d041      	beq.n	8019510 <rmw_validate_full_topic_name+0xc8>
 801948c:	1e62      	subs	r2, r4, #1
 801948e:	f1c4 0e01 	rsb	lr, r4, #1
 8019492:	eb02 0800 	add.w	r8, r2, r0
 8019496:	eb0e 0702 	add.w	r7, lr, r2
 801949a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801949e:	f023 0120 	bic.w	r1, r3, #32
 80194a2:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 80194a6:	3941      	subs	r1, #65	; 0x41
 80194a8:	2919      	cmp	r1, #25
 80194aa:	d90f      	bls.n	80194cc <rmw_validate_full_topic_name+0x84>
 80194ac:	f1bc 0f0a 	cmp.w	ip, #10
 80194b0:	d90c      	bls.n	80194cc <rmw_validate_full_topic_name+0x84>
 80194b2:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 80194b6:	fab3 f383 	clz	r3, r3
 80194ba:	095b      	lsrs	r3, r3, #5
 80194bc:	b933      	cbnz	r3, 80194cc <rmw_validate_full_topic_name+0x84>
 80194be:	2204      	movs	r2, #4
 80194c0:	602a      	str	r2, [r5, #0]
 80194c2:	2e00      	cmp	r6, #0
 80194c4:	d0db      	beq.n	801947e <rmw_validate_full_topic_name+0x36>
 80194c6:	4618      	mov	r0, r3
 80194c8:	6037      	str	r7, [r6, #0]
 80194ca:	e7d2      	b.n	8019472 <rmw_validate_full_topic_name+0x2a>
 80194cc:	4542      	cmp	r2, r8
 80194ce:	d1e2      	bne.n	8019496 <rmw_validate_full_topic_name+0x4e>
 80194d0:	2301      	movs	r3, #1
 80194d2:	4f1a      	ldr	r7, [pc, #104]	; (801953c <rmw_validate_full_topic_name+0xf4>)
 80194d4:	e004      	b.n	80194e0 <rmw_validate_full_topic_name+0x98>
 80194d6:	4298      	cmp	r0, r3
 80194d8:	f104 0401 	add.w	r4, r4, #1
 80194dc:	4613      	mov	r3, r2
 80194de:	d91c      	bls.n	801951a <rmw_validate_full_topic_name+0xd2>
 80194e0:	4298      	cmp	r0, r3
 80194e2:	f103 0201 	add.w	r2, r3, #1
 80194e6:	d0f6      	beq.n	80194d6 <rmw_validate_full_topic_name+0x8e>
 80194e8:	7821      	ldrb	r1, [r4, #0]
 80194ea:	292f      	cmp	r1, #47	; 0x2f
 80194ec:	d1f3      	bne.n	80194d6 <rmw_validate_full_topic_name+0x8e>
 80194ee:	7861      	ldrb	r1, [r4, #1]
 80194f0:	292f      	cmp	r1, #47	; 0x2f
 80194f2:	d01e      	beq.n	8019532 <rmw_validate_full_topic_name+0xea>
 80194f4:	5dc9      	ldrb	r1, [r1, r7]
 80194f6:	0749      	lsls	r1, r1, #29
 80194f8:	d5ed      	bpl.n	80194d6 <rmw_validate_full_topic_name+0x8e>
 80194fa:	2206      	movs	r2, #6
 80194fc:	602a      	str	r2, [r5, #0]
 80194fe:	2e00      	cmp	r6, #0
 8019500:	d0bd      	beq.n	801947e <rmw_validate_full_topic_name+0x36>
 8019502:	2000      	movs	r0, #0
 8019504:	6033      	str	r3, [r6, #0]
 8019506:	e7b4      	b.n	8019472 <rmw_validate_full_topic_name+0x2a>
 8019508:	200b      	movs	r0, #11
 801950a:	4770      	bx	lr
 801950c:	200b      	movs	r0, #11
 801950e:	e7b0      	b.n	8019472 <rmw_validate_full_topic_name+0x2a>
 8019510:	2203      	movs	r2, #3
 8019512:	602a      	str	r2, [r5, #0]
 8019514:	2e00      	cmp	r6, #0
 8019516:	d1f4      	bne.n	8019502 <rmw_validate_full_topic_name+0xba>
 8019518:	e7b1      	b.n	801947e <rmw_validate_full_topic_name+0x36>
 801951a:	28f7      	cmp	r0, #247	; 0xf7
 801951c:	d803      	bhi.n	8019526 <rmw_validate_full_topic_name+0xde>
 801951e:	2300      	movs	r3, #0
 8019520:	4618      	mov	r0, r3
 8019522:	602b      	str	r3, [r5, #0]
 8019524:	e7a5      	b.n	8019472 <rmw_validate_full_topic_name+0x2a>
 8019526:	2307      	movs	r3, #7
 8019528:	602b      	str	r3, [r5, #0]
 801952a:	2e00      	cmp	r6, #0
 801952c:	d0a7      	beq.n	801947e <rmw_validate_full_topic_name+0x36>
 801952e:	23f6      	movs	r3, #246	; 0xf6
 8019530:	e7e7      	b.n	8019502 <rmw_validate_full_topic_name+0xba>
 8019532:	2205      	movs	r2, #5
 8019534:	602a      	str	r2, [r5, #0]
 8019536:	2e00      	cmp	r6, #0
 8019538:	d1e3      	bne.n	8019502 <rmw_validate_full_topic_name+0xba>
 801953a:	e7a0      	b.n	801947e <rmw_validate_full_topic_name+0x36>
 801953c:	08020ca8 	.word	0x08020ca8

08019540 <rmw_validate_namespace_with_size>:
 8019540:	2800      	cmp	r0, #0
 8019542:	d043      	beq.n	80195cc <rmw_validate_namespace_with_size+0x8c>
 8019544:	b570      	push	{r4, r5, r6, lr}
 8019546:	4614      	mov	r4, r2
 8019548:	b0c2      	sub	sp, #264	; 0x108
 801954a:	b32a      	cbz	r2, 8019598 <rmw_validate_namespace_with_size+0x58>
 801954c:	2901      	cmp	r1, #1
 801954e:	460d      	mov	r5, r1
 8019550:	461e      	mov	r6, r3
 8019552:	d102      	bne.n	801955a <rmw_validate_namespace_with_size+0x1a>
 8019554:	7803      	ldrb	r3, [r0, #0]
 8019556:	2b2f      	cmp	r3, #47	; 0x2f
 8019558:	d012      	beq.n	8019580 <rmw_validate_namespace_with_size+0x40>
 801955a:	aa01      	add	r2, sp, #4
 801955c:	4669      	mov	r1, sp
 801955e:	f7ff ff73 	bl	8019448 <rmw_validate_full_topic_name>
 8019562:	b980      	cbnz	r0, 8019586 <rmw_validate_namespace_with_size+0x46>
 8019564:	9a00      	ldr	r2, [sp, #0]
 8019566:	b14a      	cbz	r2, 801957c <rmw_validate_namespace_with_size+0x3c>
 8019568:	2a07      	cmp	r2, #7
 801956a:	d007      	beq.n	801957c <rmw_validate_namespace_with_size+0x3c>
 801956c:	1e53      	subs	r3, r2, #1
 801956e:	2b05      	cmp	r3, #5
 8019570:	d82e      	bhi.n	80195d0 <rmw_validate_namespace_with_size+0x90>
 8019572:	e8df f003 	tbb	[pc, r3]
 8019576:	1f1c      	.short	0x1f1c
 8019578:	14282522 	.word	0x14282522
 801957c:	2df5      	cmp	r5, #245	; 0xf5
 801957e:	d804      	bhi.n	801958a <rmw_validate_namespace_with_size+0x4a>
 8019580:	2300      	movs	r3, #0
 8019582:	4618      	mov	r0, r3
 8019584:	6023      	str	r3, [r4, #0]
 8019586:	b042      	add	sp, #264	; 0x108
 8019588:	bd70      	pop	{r4, r5, r6, pc}
 801958a:	2307      	movs	r3, #7
 801958c:	6023      	str	r3, [r4, #0]
 801958e:	2e00      	cmp	r6, #0
 8019590:	d0f9      	beq.n	8019586 <rmw_validate_namespace_with_size+0x46>
 8019592:	23f4      	movs	r3, #244	; 0xf4
 8019594:	6033      	str	r3, [r6, #0]
 8019596:	e7f6      	b.n	8019586 <rmw_validate_namespace_with_size+0x46>
 8019598:	200b      	movs	r0, #11
 801959a:	b042      	add	sp, #264	; 0x108
 801959c:	bd70      	pop	{r4, r5, r6, pc}
 801959e:	2306      	movs	r3, #6
 80195a0:	6023      	str	r3, [r4, #0]
 80195a2:	2e00      	cmp	r6, #0
 80195a4:	d0ef      	beq.n	8019586 <rmw_validate_namespace_with_size+0x46>
 80195a6:	9b01      	ldr	r3, [sp, #4]
 80195a8:	6033      	str	r3, [r6, #0]
 80195aa:	b042      	add	sp, #264	; 0x108
 80195ac:	bd70      	pop	{r4, r5, r6, pc}
 80195ae:	2301      	movs	r3, #1
 80195b0:	6023      	str	r3, [r4, #0]
 80195b2:	e7f6      	b.n	80195a2 <rmw_validate_namespace_with_size+0x62>
 80195b4:	2302      	movs	r3, #2
 80195b6:	6023      	str	r3, [r4, #0]
 80195b8:	e7f3      	b.n	80195a2 <rmw_validate_namespace_with_size+0x62>
 80195ba:	2303      	movs	r3, #3
 80195bc:	6023      	str	r3, [r4, #0]
 80195be:	e7f0      	b.n	80195a2 <rmw_validate_namespace_with_size+0x62>
 80195c0:	2304      	movs	r3, #4
 80195c2:	6023      	str	r3, [r4, #0]
 80195c4:	e7ed      	b.n	80195a2 <rmw_validate_namespace_with_size+0x62>
 80195c6:	2305      	movs	r3, #5
 80195c8:	6023      	str	r3, [r4, #0]
 80195ca:	e7ea      	b.n	80195a2 <rmw_validate_namespace_with_size+0x62>
 80195cc:	200b      	movs	r0, #11
 80195ce:	4770      	bx	lr
 80195d0:	4613      	mov	r3, r2
 80195d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80195d6:	4a03      	ldr	r2, [pc, #12]	; (80195e4 <rmw_validate_namespace_with_size+0xa4>)
 80195d8:	a802      	add	r0, sp, #8
 80195da:	f7ff fcbd 	bl	8018f58 <rcutils_snprintf>
 80195de:	2001      	movs	r0, #1
 80195e0:	e7d1      	b.n	8019586 <rmw_validate_namespace_with_size+0x46>
 80195e2:	bf00      	nop
 80195e4:	08020398 	.word	0x08020398

080195e8 <rmw_validate_namespace>:
 80195e8:	b168      	cbz	r0, 8019606 <rmw_validate_namespace+0x1e>
 80195ea:	b570      	push	{r4, r5, r6, lr}
 80195ec:	460d      	mov	r5, r1
 80195ee:	4616      	mov	r6, r2
 80195f0:	4604      	mov	r4, r0
 80195f2:	f7e6 fe85 	bl	8000300 <strlen>
 80195f6:	4633      	mov	r3, r6
 80195f8:	4601      	mov	r1, r0
 80195fa:	462a      	mov	r2, r5
 80195fc:	4620      	mov	r0, r4
 80195fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019602:	f7ff bf9d 	b.w	8019540 <rmw_validate_namespace_with_size>
 8019606:	200b      	movs	r0, #11
 8019608:	4770      	bx	lr
 801960a:	bf00      	nop

0801960c <rmw_namespace_validation_result_string>:
 801960c:	2807      	cmp	r0, #7
 801960e:	d803      	bhi.n	8019618 <rmw_namespace_validation_result_string+0xc>
 8019610:	4b02      	ldr	r3, [pc, #8]	; (801961c <rmw_namespace_validation_result_string+0x10>)
 8019612:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8019616:	4770      	bx	lr
 8019618:	4801      	ldr	r0, [pc, #4]	; (8019620 <rmw_namespace_validation_result_string+0x14>)
 801961a:	4770      	bx	lr
 801961c:	08020590 	.word	0x08020590
 8019620:	080203e8 	.word	0x080203e8

08019624 <rmw_validate_node_name>:
 8019624:	2800      	cmp	r0, #0
 8019626:	d042      	beq.n	80196ae <rmw_validate_node_name+0x8a>
 8019628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801962c:	460d      	mov	r5, r1
 801962e:	2900      	cmp	r1, #0
 8019630:	d03f      	beq.n	80196b2 <rmw_validate_node_name+0x8e>
 8019632:	4604      	mov	r4, r0
 8019634:	4616      	mov	r6, r2
 8019636:	f7e6 fe63 	bl	8000300 <strlen>
 801963a:	b310      	cbz	r0, 8019682 <rmw_validate_node_name+0x5e>
 801963c:	1e63      	subs	r3, r4, #1
 801963e:	f1c4 0101 	rsb	r1, r4, #1
 8019642:	eb03 0800 	add.w	r8, r3, r0
 8019646:	18cf      	adds	r7, r1, r3
 8019648:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801964c:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8019650:	f02e 0c20 	bic.w	ip, lr, #32
 8019654:	2a09      	cmp	r2, #9
 8019656:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 801965a:	d905      	bls.n	8019668 <rmw_validate_node_name+0x44>
 801965c:	f1bc 0f19 	cmp.w	ip, #25
 8019660:	d902      	bls.n	8019668 <rmw_validate_node_name+0x44>
 8019662:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8019666:	d114      	bne.n	8019692 <rmw_validate_node_name+0x6e>
 8019668:	4598      	cmp	r8, r3
 801966a:	d1ec      	bne.n	8019646 <rmw_validate_node_name+0x22>
 801966c:	7822      	ldrb	r2, [r4, #0]
 801966e:	4b16      	ldr	r3, [pc, #88]	; (80196c8 <rmw_validate_node_name+0xa4>)
 8019670:	5cd3      	ldrb	r3, [r2, r3]
 8019672:	f013 0304 	ands.w	r3, r3, #4
 8019676:	d113      	bne.n	80196a0 <rmw_validate_node_name+0x7c>
 8019678:	28ff      	cmp	r0, #255	; 0xff
 801967a:	d81c      	bhi.n	80196b6 <rmw_validate_node_name+0x92>
 801967c:	4618      	mov	r0, r3
 801967e:	602b      	str	r3, [r5, #0]
 8019680:	e00c      	b.n	801969c <rmw_validate_node_name+0x78>
 8019682:	2301      	movs	r3, #1
 8019684:	602b      	str	r3, [r5, #0]
 8019686:	b17e      	cbz	r6, 80196a8 <rmw_validate_node_name+0x84>
 8019688:	2300      	movs	r3, #0
 801968a:	4618      	mov	r0, r3
 801968c:	6033      	str	r3, [r6, #0]
 801968e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019692:	2302      	movs	r3, #2
 8019694:	602b      	str	r3, [r5, #0]
 8019696:	b13e      	cbz	r6, 80196a8 <rmw_validate_node_name+0x84>
 8019698:	2000      	movs	r0, #0
 801969a:	6037      	str	r7, [r6, #0]
 801969c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196a0:	2303      	movs	r3, #3
 80196a2:	602b      	str	r3, [r5, #0]
 80196a4:	2e00      	cmp	r6, #0
 80196a6:	d1ef      	bne.n	8019688 <rmw_validate_node_name+0x64>
 80196a8:	2000      	movs	r0, #0
 80196aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196ae:	200b      	movs	r0, #11
 80196b0:	4770      	bx	lr
 80196b2:	200b      	movs	r0, #11
 80196b4:	e7f2      	b.n	801969c <rmw_validate_node_name+0x78>
 80196b6:	2204      	movs	r2, #4
 80196b8:	602a      	str	r2, [r5, #0]
 80196ba:	2e00      	cmp	r6, #0
 80196bc:	d0f4      	beq.n	80196a8 <rmw_validate_node_name+0x84>
 80196be:	22fe      	movs	r2, #254	; 0xfe
 80196c0:	4618      	mov	r0, r3
 80196c2:	6032      	str	r2, [r6, #0]
 80196c4:	e7ea      	b.n	801969c <rmw_validate_node_name+0x78>
 80196c6:	bf00      	nop
 80196c8:	08020ca8 	.word	0x08020ca8

080196cc <rmw_node_name_validation_result_string>:
 80196cc:	2804      	cmp	r0, #4
 80196ce:	d803      	bhi.n	80196d8 <rmw_node_name_validation_result_string+0xc>
 80196d0:	4b02      	ldr	r3, [pc, #8]	; (80196dc <rmw_node_name_validation_result_string+0x10>)
 80196d2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80196d6:	4770      	bx	lr
 80196d8:	4801      	ldr	r0, [pc, #4]	; (80196e0 <rmw_node_name_validation_result_string+0x14>)
 80196da:	4770      	bx	lr
 80196dc:	0802069c 	.word	0x0802069c
 80196e0:	080205b0 	.word	0x080205b0

080196e4 <get_memory>:
 80196e4:	4603      	mov	r3, r0
 80196e6:	6840      	ldr	r0, [r0, #4]
 80196e8:	b158      	cbz	r0, 8019702 <get_memory+0x1e>
 80196ea:	6842      	ldr	r2, [r0, #4]
 80196ec:	605a      	str	r2, [r3, #4]
 80196ee:	b10a      	cbz	r2, 80196f4 <get_memory+0x10>
 80196f0:	2100      	movs	r1, #0
 80196f2:	6011      	str	r1, [r2, #0]
 80196f4:	681a      	ldr	r2, [r3, #0]
 80196f6:	6042      	str	r2, [r0, #4]
 80196f8:	b102      	cbz	r2, 80196fc <get_memory+0x18>
 80196fa:	6010      	str	r0, [r2, #0]
 80196fc:	2200      	movs	r2, #0
 80196fe:	6002      	str	r2, [r0, #0]
 8019700:	6018      	str	r0, [r3, #0]
 8019702:	4770      	bx	lr

08019704 <put_memory>:
 8019704:	680b      	ldr	r3, [r1, #0]
 8019706:	b10b      	cbz	r3, 801970c <put_memory+0x8>
 8019708:	684a      	ldr	r2, [r1, #4]
 801970a:	605a      	str	r2, [r3, #4]
 801970c:	684a      	ldr	r2, [r1, #4]
 801970e:	b102      	cbz	r2, 8019712 <put_memory+0xe>
 8019710:	6013      	str	r3, [r2, #0]
 8019712:	6803      	ldr	r3, [r0, #0]
 8019714:	428b      	cmp	r3, r1
 8019716:	6843      	ldr	r3, [r0, #4]
 8019718:	bf08      	it	eq
 801971a:	6002      	streq	r2, [r0, #0]
 801971c:	604b      	str	r3, [r1, #4]
 801971e:	b103      	cbz	r3, 8019722 <put_memory+0x1e>
 8019720:	6019      	str	r1, [r3, #0]
 8019722:	2300      	movs	r3, #0
 8019724:	600b      	str	r3, [r1, #0]
 8019726:	6041      	str	r1, [r0, #4]
 8019728:	4770      	bx	lr
 801972a:	bf00      	nop

0801972c <rmw_destroy_client>:
 801972c:	b570      	push	{r4, r5, r6, lr}
 801972e:	b128      	cbz	r0, 801973c <rmw_destroy_client+0x10>
 8019730:	4604      	mov	r4, r0
 8019732:	6800      	ldr	r0, [r0, #0]
 8019734:	460d      	mov	r5, r1
 8019736:	f7f6 f88b 	bl	800f850 <is_uxrce_rmw_identifier_valid>
 801973a:	b910      	cbnz	r0, 8019742 <rmw_destroy_client+0x16>
 801973c:	2401      	movs	r4, #1
 801973e:	4620      	mov	r0, r4
 8019740:	bd70      	pop	{r4, r5, r6, pc}
 8019742:	6863      	ldr	r3, [r4, #4]
 8019744:	2b00      	cmp	r3, #0
 8019746:	d0f9      	beq.n	801973c <rmw_destroy_client+0x10>
 8019748:	2d00      	cmp	r5, #0
 801974a:	d0f7      	beq.n	801973c <rmw_destroy_client+0x10>
 801974c:	6828      	ldr	r0, [r5, #0]
 801974e:	f7f6 f87f 	bl	800f850 <is_uxrce_rmw_identifier_valid>
 8019752:	2800      	cmp	r0, #0
 8019754:	d0f2      	beq.n	801973c <rmw_destroy_client+0x10>
 8019756:	686e      	ldr	r6, [r5, #4]
 8019758:	2e00      	cmp	r6, #0
 801975a:	d0ef      	beq.n	801973c <rmw_destroy_client+0x10>
 801975c:	6864      	ldr	r4, [r4, #4]
 801975e:	6932      	ldr	r2, [r6, #16]
 8019760:	6920      	ldr	r0, [r4, #16]
 8019762:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8019766:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801976a:	6819      	ldr	r1, [r3, #0]
 801976c:	f002 f94e 	bl	801ba0c <uxr_buffer_cancel_data>
 8019770:	4602      	mov	r2, r0
 8019772:	6920      	ldr	r0, [r4, #16]
 8019774:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8019778:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801977c:	f7f5 ff56 	bl	800f62c <run_xrce_session>
 8019780:	6920      	ldr	r0, [r4, #16]
 8019782:	6932      	ldr	r2, [r6, #16]
 8019784:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8019788:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801978c:	6819      	ldr	r1, [r3, #0]
 801978e:	f7f8 f9fd 	bl	8011b8c <uxr_buffer_delete_entity>
 8019792:	4602      	mov	r2, r0
 8019794:	6920      	ldr	r0, [r4, #16]
 8019796:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801979a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801979e:	f7f5 ff45 	bl	800f62c <run_xrce_session>
 80197a2:	4603      	mov	r3, r0
 80197a4:	4628      	mov	r0, r5
 80197a6:	2b00      	cmp	r3, #0
 80197a8:	bf14      	ite	ne
 80197aa:	2400      	movne	r4, #0
 80197ac:	2402      	moveq	r4, #2
 80197ae:	f7f5 fe19 	bl	800f3e4 <rmw_uxrce_fini_client_memory>
 80197b2:	e7c4      	b.n	801973e <rmw_destroy_client+0x12>

080197b4 <rmw_get_gid_for_client>:
 80197b4:	b1b9      	cbz	r1, 80197e6 <rmw_get_gid_for_client+0x32>
 80197b6:	b538      	push	{r3, r4, r5, lr}
 80197b8:	4605      	mov	r5, r0
 80197ba:	b180      	cbz	r0, 80197de <rmw_get_gid_for_client+0x2a>
 80197bc:	6800      	ldr	r0, [r0, #0]
 80197be:	460c      	mov	r4, r1
 80197c0:	b120      	cbz	r0, 80197cc <rmw_get_gid_for_client+0x18>
 80197c2:	4b0a      	ldr	r3, [pc, #40]	; (80197ec <rmw_get_gid_for_client+0x38>)
 80197c4:	6819      	ldr	r1, [r3, #0]
 80197c6:	f7e6 fd3b 	bl	8000240 <strcmp>
 80197ca:	b950      	cbnz	r0, 80197e2 <rmw_get_gid_for_client+0x2e>
 80197cc:	686b      	ldr	r3, [r5, #4]
 80197ce:	2000      	movs	r0, #0
 80197d0:	6060      	str	r0, [r4, #4]
 80197d2:	60a0      	str	r0, [r4, #8]
 80197d4:	60e0      	str	r0, [r4, #12]
 80197d6:	6120      	str	r0, [r4, #16]
 80197d8:	691b      	ldr	r3, [r3, #16]
 80197da:	6063      	str	r3, [r4, #4]
 80197dc:	bd38      	pop	{r3, r4, r5, pc}
 80197de:	200b      	movs	r0, #11
 80197e0:	bd38      	pop	{r3, r4, r5, pc}
 80197e2:	200c      	movs	r0, #12
 80197e4:	bd38      	pop	{r3, r4, r5, pc}
 80197e6:	200b      	movs	r0, #11
 80197e8:	4770      	bx	lr
 80197ea:	bf00      	nop
 80197ec:	080206c8 	.word	0x080206c8

080197f0 <rmw_get_implementation_identifier>:
 80197f0:	4b01      	ldr	r3, [pc, #4]	; (80197f8 <rmw_get_implementation_identifier+0x8>)
 80197f2:	6818      	ldr	r0, [r3, #0]
 80197f4:	4770      	bx	lr
 80197f6:	bf00      	nop
 80197f8:	080206c8 	.word	0x080206c8

080197fc <rmw_init_options_init>:
 80197fc:	b084      	sub	sp, #16
 80197fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019800:	b083      	sub	sp, #12
 8019802:	ad09      	add	r5, sp, #36	; 0x24
 8019804:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8019808:	b130      	cbz	r0, 8019818 <rmw_init_options_init+0x1c>
 801980a:	4604      	mov	r4, r0
 801980c:	4628      	mov	r0, r5
 801980e:	f7f5 f9cf 	bl	800ebb0 <rcutils_allocator_is_valid>
 8019812:	b108      	cbz	r0, 8019818 <rmw_init_options_init+0x1c>
 8019814:	68a6      	ldr	r6, [r4, #8]
 8019816:	b12e      	cbz	r6, 8019824 <rmw_init_options_init+0x28>
 8019818:	200b      	movs	r0, #11
 801981a:	b003      	add	sp, #12
 801981c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019820:	b004      	add	sp, #16
 8019822:	4770      	bx	lr
 8019824:	2200      	movs	r2, #0
 8019826:	2300      	movs	r3, #0
 8019828:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801982c:	f8df e098 	ldr.w	lr, [pc, #152]	; 80198c8 <rmw_init_options_init+0xcc>
 8019830:	466f      	mov	r7, sp
 8019832:	e9c4 2300 	strd	r2, r3, [r4]
 8019836:	4b20      	ldr	r3, [pc, #128]	; (80198b8 <rmw_init_options_init+0xbc>)
 8019838:	681b      	ldr	r3, [r3, #0]
 801983a:	60a3      	str	r3, [r4, #8]
 801983c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801983e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019842:	682b      	ldr	r3, [r5, #0]
 8019844:	4638      	mov	r0, r7
 8019846:	f8cc 3000 	str.w	r3, [ip]
 801984a:	f8c4 e03c 	str.w	lr, [r4, #60]	; 0x3c
 801984e:	60e6      	str	r6, [r4, #12]
 8019850:	f7ff fd46 	bl	80192e0 <rmw_get_default_security_options>
 8019854:	f104 0310 	add.w	r3, r4, #16
 8019858:	2203      	movs	r2, #3
 801985a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801985e:	e883 0003 	stmia.w	r3, {r0, r1}
 8019862:	4816      	ldr	r0, [pc, #88]	; (80198bc <rmw_init_options_init+0xc0>)
 8019864:	4916      	ldr	r1, [pc, #88]	; (80198c0 <rmw_init_options_init+0xc4>)
 8019866:	7626      	strb	r6, [r4, #24]
 8019868:	f7f5 fcfc 	bl	800f264 <rmw_uxrce_init_init_options_impl_memory>
 801986c:	4813      	ldr	r0, [pc, #76]	; (80198bc <rmw_init_options_init+0xc0>)
 801986e:	f7ff ff39 	bl	80196e4 <get_memory>
 8019872:	b1f0      	cbz	r0, 80198b2 <rmw_init_options_init+0xb6>
 8019874:	4a13      	ldr	r2, [pc, #76]	; (80198c4 <rmw_init_options_init+0xc8>)
 8019876:	6883      	ldr	r3, [r0, #8]
 8019878:	6851      	ldr	r1, [r2, #4]
 801987a:	6563      	str	r3, [r4, #84]	; 0x54
 801987c:	7810      	ldrb	r0, [r2, #0]
 801987e:	6159      	str	r1, [r3, #20]
 8019880:	68d1      	ldr	r1, [r2, #12]
 8019882:	7418      	strb	r0, [r3, #16]
 8019884:	61d9      	str	r1, [r3, #28]
 8019886:	6911      	ldr	r1, [r2, #16]
 8019888:	6219      	str	r1, [r3, #32]
 801988a:	6951      	ldr	r1, [r2, #20]
 801988c:	6892      	ldr	r2, [r2, #8]
 801988e:	6259      	str	r1, [r3, #36]	; 0x24
 8019890:	619a      	str	r2, [r3, #24]
 8019892:	f7f9 fe1f 	bl	80134d4 <uxr_nanos>
 8019896:	f003 fe81 	bl	801d59c <srand>
 801989a:	f003 fead 	bl	801d5f8 <rand>
 801989e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80198a0:	6298      	str	r0, [r3, #40]	; 0x28
 80198a2:	2800      	cmp	r0, #0
 80198a4:	d0f9      	beq.n	801989a <rmw_init_options_init+0x9e>
 80198a6:	2000      	movs	r0, #0
 80198a8:	b003      	add	sp, #12
 80198aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80198ae:	b004      	add	sp, #16
 80198b0:	4770      	bx	lr
 80198b2:	2001      	movs	r0, #1
 80198b4:	e7b1      	b.n	801981a <rmw_init_options_init+0x1e>
 80198b6:	bf00      	nop
 80198b8:	080206c8 	.word	0x080206c8
 80198bc:	2001049c 	.word	0x2001049c
 80198c0:	2000bc70 	.word	0x2000bc70
 80198c4:	2000bafc 	.word	0x2000bafc
 80198c8:	080200b8 	.word	0x080200b8

080198cc <rmw_init_options_copy>:
 80198cc:	b570      	push	{r4, r5, r6, lr}
 80198ce:	b158      	cbz	r0, 80198e8 <rmw_init_options_copy+0x1c>
 80198d0:	460d      	mov	r5, r1
 80198d2:	b149      	cbz	r1, 80198e8 <rmw_init_options_copy+0x1c>
 80198d4:	4604      	mov	r4, r0
 80198d6:	6880      	ldr	r0, [r0, #8]
 80198d8:	b120      	cbz	r0, 80198e4 <rmw_init_options_copy+0x18>
 80198da:	4b13      	ldr	r3, [pc, #76]	; (8019928 <rmw_init_options_copy+0x5c>)
 80198dc:	6819      	ldr	r1, [r3, #0]
 80198de:	f7e6 fcaf 	bl	8000240 <strcmp>
 80198e2:	b9d8      	cbnz	r0, 801991c <rmw_init_options_copy+0x50>
 80198e4:	68ae      	ldr	r6, [r5, #8]
 80198e6:	b116      	cbz	r6, 80198ee <rmw_init_options_copy+0x22>
 80198e8:	260b      	movs	r6, #11
 80198ea:	4630      	mov	r0, r6
 80198ec:	bd70      	pop	{r4, r5, r6, pc}
 80198ee:	2258      	movs	r2, #88	; 0x58
 80198f0:	4621      	mov	r1, r4
 80198f2:	4628      	mov	r0, r5
 80198f4:	f004 fa3f 	bl	801dd76 <memcpy>
 80198f8:	480c      	ldr	r0, [pc, #48]	; (801992c <rmw_init_options_copy+0x60>)
 80198fa:	f7ff fef3 	bl	80196e4 <get_memory>
 80198fe:	b180      	cbz	r0, 8019922 <rmw_init_options_copy+0x56>
 8019900:	6883      	ldr	r3, [r0, #8]
 8019902:	656b      	str	r3, [r5, #84]	; 0x54
 8019904:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8019906:	f103 0410 	add.w	r4, r3, #16
 801990a:	3510      	adds	r5, #16
 801990c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801990e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019910:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8019914:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019918:	4630      	mov	r0, r6
 801991a:	bd70      	pop	{r4, r5, r6, pc}
 801991c:	260c      	movs	r6, #12
 801991e:	4630      	mov	r0, r6
 8019920:	bd70      	pop	{r4, r5, r6, pc}
 8019922:	2601      	movs	r6, #1
 8019924:	e7e1      	b.n	80198ea <rmw_init_options_copy+0x1e>
 8019926:	bf00      	nop
 8019928:	080206c8 	.word	0x080206c8
 801992c:	2001049c 	.word	0x2001049c

08019930 <rmw_init_options_fini>:
 8019930:	b368      	cbz	r0, 801998e <rmw_init_options_fini+0x5e>
 8019932:	b510      	push	{r4, lr}
 8019934:	4604      	mov	r4, r0
 8019936:	b096      	sub	sp, #88	; 0x58
 8019938:	3040      	adds	r0, #64	; 0x40
 801993a:	f7f5 f939 	bl	800ebb0 <rcutils_allocator_is_valid>
 801993e:	b1f0      	cbz	r0, 801997e <rmw_init_options_fini+0x4e>
 8019940:	68a0      	ldr	r0, [r4, #8]
 8019942:	b120      	cbz	r0, 801994e <rmw_init_options_fini+0x1e>
 8019944:	4b13      	ldr	r3, [pc, #76]	; (8019994 <rmw_init_options_fini+0x64>)
 8019946:	6819      	ldr	r1, [r3, #0]
 8019948:	f7e6 fc7a 	bl	8000240 <strcmp>
 801994c:	b9e8      	cbnz	r0, 801998a <rmw_init_options_fini+0x5a>
 801994e:	4b12      	ldr	r3, [pc, #72]	; (8019998 <rmw_init_options_fini+0x68>)
 8019950:	6819      	ldr	r1, [r3, #0]
 8019952:	b1b9      	cbz	r1, 8019984 <rmw_init_options_fini+0x54>
 8019954:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8019956:	e001      	b.n	801995c <rmw_init_options_fini+0x2c>
 8019958:	6849      	ldr	r1, [r1, #4]
 801995a:	b199      	cbz	r1, 8019984 <rmw_init_options_fini+0x54>
 801995c:	688b      	ldr	r3, [r1, #8]
 801995e:	429a      	cmp	r2, r3
 8019960:	d1fa      	bne.n	8019958 <rmw_init_options_fini+0x28>
 8019962:	480d      	ldr	r0, [pc, #52]	; (8019998 <rmw_init_options_fini+0x68>)
 8019964:	f7ff fece 	bl	8019704 <put_memory>
 8019968:	4668      	mov	r0, sp
 801996a:	f7ff fca5 	bl	80192b8 <rmw_get_zero_initialized_init_options>
 801996e:	2258      	movs	r2, #88	; 0x58
 8019970:	4669      	mov	r1, sp
 8019972:	4620      	mov	r0, r4
 8019974:	f004 f9ff 	bl	801dd76 <memcpy>
 8019978:	2000      	movs	r0, #0
 801997a:	b016      	add	sp, #88	; 0x58
 801997c:	bd10      	pop	{r4, pc}
 801997e:	200b      	movs	r0, #11
 8019980:	b016      	add	sp, #88	; 0x58
 8019982:	bd10      	pop	{r4, pc}
 8019984:	2001      	movs	r0, #1
 8019986:	b016      	add	sp, #88	; 0x58
 8019988:	bd10      	pop	{r4, pc}
 801998a:	200c      	movs	r0, #12
 801998c:	e7f5      	b.n	801997a <rmw_init_options_fini+0x4a>
 801998e:	200b      	movs	r0, #11
 8019990:	4770      	bx	lr
 8019992:	bf00      	nop
 8019994:	080206c8 	.word	0x080206c8
 8019998:	2001049c 	.word	0x2001049c

0801999c <rmw_init>:
 801999c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80199a0:	b083      	sub	sp, #12
 80199a2:	2800      	cmp	r0, #0
 80199a4:	f000 80d3 	beq.w	8019b4e <rmw_init+0x1b2>
 80199a8:	460e      	mov	r6, r1
 80199aa:	2900      	cmp	r1, #0
 80199ac:	f000 80cf 	beq.w	8019b4e <rmw_init+0x1b2>
 80199b0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80199b2:	4605      	mov	r5, r0
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	f000 80ca 	beq.w	8019b4e <rmw_init+0x1b2>
 80199ba:	4b78      	ldr	r3, [pc, #480]	; (8019b9c <rmw_init+0x200>)
 80199bc:	6880      	ldr	r0, [r0, #8]
 80199be:	681f      	ldr	r7, [r3, #0]
 80199c0:	b128      	cbz	r0, 80199ce <rmw_init+0x32>
 80199c2:	4639      	mov	r1, r7
 80199c4:	f7e6 fc3c 	bl	8000240 <strcmp>
 80199c8:	2800      	cmp	r0, #0
 80199ca:	f040 80ca 	bne.w	8019b62 <rmw_init+0x1c6>
 80199ce:	4c74      	ldr	r4, [pc, #464]	; (8019ba0 <rmw_init+0x204>)
 80199d0:	f04f 0800 	mov.w	r8, #0
 80199d4:	4973      	ldr	r1, [pc, #460]	; (8019ba4 <rmw_init+0x208>)
 80199d6:	4874      	ldr	r0, [pc, #464]	; (8019ba8 <rmw_init+0x20c>)
 80199d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80199dc:	60b7      	str	r7, [r6, #8]
 80199de:	e9c6 2300 	strd	r2, r3, [r6]
 80199e2:	68eb      	ldr	r3, [r5, #12]
 80199e4:	2201      	movs	r2, #1
 80199e6:	66b3      	str	r3, [r6, #104]	; 0x68
 80199e8:	f7f5 fbdc 	bl	800f1a4 <rmw_uxrce_init_session_memory>
 80199ec:	4620      	mov	r0, r4
 80199ee:	2204      	movs	r2, #4
 80199f0:	496e      	ldr	r1, [pc, #440]	; (8019bac <rmw_init+0x210>)
 80199f2:	f7f5 fc17 	bl	800f224 <rmw_uxrce_init_static_input_buffer_memory>
 80199f6:	486c      	ldr	r0, [pc, #432]	; (8019ba8 <rmw_init+0x20c>)
 80199f8:	f884 800d 	strb.w	r8, [r4, #13]
 80199fc:	f7ff fe72 	bl	80196e4 <get_memory>
 8019a00:	2800      	cmp	r0, #0
 8019a02:	f000 80a9 	beq.w	8019b58 <rmw_init+0x1bc>
 8019a06:	6884      	ldr	r4, [r0, #8]
 8019a08:	6d68      	ldr	r0, [r5, #84]	; 0x54
 8019a0a:	f104 0910 	add.w	r9, r4, #16
 8019a0e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8019a10:	f890 c010 	ldrb.w	ip, [r0, #16]
 8019a14:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8019a18:	9101      	str	r1, [sp, #4]
 8019a1a:	4661      	mov	r1, ip
 8019a1c:	6a00      	ldr	r0, [r0, #32]
 8019a1e:	9000      	str	r0, [sp, #0]
 8019a20:	4648      	mov	r0, r9
 8019a22:	f001 fa2b 	bl	801ae7c <uxr_set_custom_transport_callbacks>
 8019a26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019a2a:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8019a2e:	4960      	ldr	r1, [pc, #384]	; (8019bb0 <rmw_init+0x214>)
 8019a30:	4860      	ldr	r0, [pc, #384]	; (8019bb4 <rmw_init+0x218>)
 8019a32:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8019a36:	f504 725e 	add.w	r2, r4, #888	; 0x378
 8019a3a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 8019a3e:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8019a42:	2201      	movs	r2, #1
 8019a44:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8019a48:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 8019a4c:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8019a50:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8019a54:	66f4      	str	r4, [r6, #108]	; 0x6c
 8019a56:	f7f5 fb85 	bl	800f164 <rmw_uxrce_init_node_memory>
 8019a5a:	2205      	movs	r2, #5
 8019a5c:	4956      	ldr	r1, [pc, #344]	; (8019bb8 <rmw_init+0x21c>)
 8019a5e:	4857      	ldr	r0, [pc, #348]	; (8019bbc <rmw_init+0x220>)
 8019a60:	f7f5 fb60 	bl	800f124 <rmw_uxrce_init_subscription_memory>
 8019a64:	220a      	movs	r2, #10
 8019a66:	4956      	ldr	r1, [pc, #344]	; (8019bc0 <rmw_init+0x224>)
 8019a68:	4856      	ldr	r0, [pc, #344]	; (8019bc4 <rmw_init+0x228>)
 8019a6a:	f7f5 fb3b 	bl	800f0e4 <rmw_uxrce_init_publisher_memory>
 8019a6e:	2202      	movs	r2, #2
 8019a70:	4955      	ldr	r1, [pc, #340]	; (8019bc8 <rmw_init+0x22c>)
 8019a72:	4856      	ldr	r0, [pc, #344]	; (8019bcc <rmw_init+0x230>)
 8019a74:	f7f5 faf6 	bl	800f064 <rmw_uxrce_init_service_memory>
 8019a78:	2201      	movs	r2, #1
 8019a7a:	4955      	ldr	r1, [pc, #340]	; (8019bd0 <rmw_init+0x234>)
 8019a7c:	4855      	ldr	r0, [pc, #340]	; (8019bd4 <rmw_init+0x238>)
 8019a7e:	f7f5 fb11 	bl	800f0a4 <rmw_uxrce_init_client_memory>
 8019a82:	220f      	movs	r2, #15
 8019a84:	4954      	ldr	r1, [pc, #336]	; (8019bd8 <rmw_init+0x23c>)
 8019a86:	4855      	ldr	r0, [pc, #340]	; (8019bdc <rmw_init+0x240>)
 8019a88:	f7f5 fbac 	bl	800f1e4 <rmw_uxrce_init_topic_memory>
 8019a8c:	2203      	movs	r2, #3
 8019a8e:	4954      	ldr	r1, [pc, #336]	; (8019be0 <rmw_init+0x244>)
 8019a90:	4854      	ldr	r0, [pc, #336]	; (8019be4 <rmw_init+0x248>)
 8019a92:	f7f5 fbe7 	bl	800f264 <rmw_uxrce_init_init_options_impl_memory>
 8019a96:	2204      	movs	r2, #4
 8019a98:	4953      	ldr	r1, [pc, #332]	; (8019be8 <rmw_init+0x24c>)
 8019a9a:	4854      	ldr	r0, [pc, #336]	; (8019bec <rmw_init+0x250>)
 8019a9c:	f7f5 fc02 	bl	800f2a4 <rmw_uxrce_init_wait_set_memory>
 8019aa0:	4953      	ldr	r1, [pc, #332]	; (8019bf0 <rmw_init+0x254>)
 8019aa2:	4854      	ldr	r0, [pc, #336]	; (8019bf4 <rmw_init+0x258>)
 8019aa4:	2204      	movs	r2, #4
 8019aa6:	f7f5 fc1d 	bl	800f2e4 <rmw_uxrce_init_guard_condition_memory>
 8019aaa:	4642      	mov	r2, r8
 8019aac:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8019aae:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 8019ab0:	f000 feba 	bl	801a828 <rmw_uxrce_transport_init>
 8019ab4:	4607      	mov	r7, r0
 8019ab6:	2800      	cmp	r0, #0
 8019ab8:	d158      	bne.n	8019b6c <rmw_init+0x1d0>
 8019aba:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8019abc:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8019ac0:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8019ac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019ac6:	4628      	mov	r0, r5
 8019ac8:	f7f8 fb5a 	bl	8012180 <uxr_init_session>
 8019acc:	4622      	mov	r2, r4
 8019ace:	494a      	ldr	r1, [pc, #296]	; (8019bf8 <rmw_init+0x25c>)
 8019ad0:	4628      	mov	r0, r5
 8019ad2:	f7f8 fb79 	bl	80121c8 <uxr_set_topic_callback>
 8019ad6:	463a      	mov	r2, r7
 8019ad8:	4948      	ldr	r1, [pc, #288]	; (8019bfc <rmw_init+0x260>)
 8019ada:	4628      	mov	r0, r5
 8019adc:	f7f8 fb70 	bl	80121c0 <uxr_set_status_callback>
 8019ae0:	463a      	mov	r2, r7
 8019ae2:	4947      	ldr	r1, [pc, #284]	; (8019c00 <rmw_init+0x264>)
 8019ae4:	4628      	mov	r0, r5
 8019ae6:	f7f8 fb73 	bl	80121d0 <uxr_set_request_callback>
 8019aea:	463a      	mov	r2, r7
 8019aec:	4945      	ldr	r1, [pc, #276]	; (8019c04 <rmw_init+0x268>)
 8019aee:	4628      	mov	r0, r5
 8019af0:	f7f8 fb72 	bl	80121d8 <uxr_set_reply_callback>
 8019af4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8019af8:	2304      	movs	r3, #4
 8019afa:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8019afe:	0092      	lsls	r2, r2, #2
 8019b00:	4628      	mov	r0, r5
 8019b02:	f7f8 fba9 	bl	8012258 <uxr_create_input_reliable_stream>
 8019b06:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8019b0a:	2304      	movs	r3, #4
 8019b0c:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8019b10:	0092      	lsls	r2, r2, #2
 8019b12:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8019b16:	4628      	mov	r0, r5
 8019b18:	f7f8 fb74 	bl	8012204 <uxr_create_output_reliable_stream>
 8019b1c:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8019b20:	4628      	mov	r0, r5
 8019b22:	f7f8 fb93 	bl	801224c <uxr_create_input_best_effort_stream>
 8019b26:	f241 3194 	movw	r1, #5012	; 0x1394
 8019b2a:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8019b2e:	4628      	mov	r0, r5
 8019b30:	4421      	add	r1, r4
 8019b32:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8019b36:	f7f8 fb53 	bl	80121e0 <uxr_create_output_best_effort_stream>
 8019b3a:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8019b3e:	4628      	mov	r0, r5
 8019b40:	f7f9 f8dc 	bl	8012cfc <uxr_create_session>
 8019b44:	b1f8      	cbz	r0, 8019b86 <rmw_init+0x1ea>
 8019b46:	4638      	mov	r0, r7
 8019b48:	b003      	add	sp, #12
 8019b4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019b4e:	270b      	movs	r7, #11
 8019b50:	4638      	mov	r0, r7
 8019b52:	b003      	add	sp, #12
 8019b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019b58:	2701      	movs	r7, #1
 8019b5a:	4638      	mov	r0, r7
 8019b5c:	b003      	add	sp, #12
 8019b5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019b62:	270c      	movs	r7, #12
 8019b64:	4638      	mov	r0, r7
 8019b66:	b003      	add	sp, #12
 8019b68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019b6c:	4648      	mov	r0, r9
 8019b6e:	f001 f9c3 	bl	801aef8 <uxr_close_custom_transport>
 8019b72:	4621      	mov	r1, r4
 8019b74:	480c      	ldr	r0, [pc, #48]	; (8019ba8 <rmw_init+0x20c>)
 8019b76:	f7ff fdc5 	bl	8019704 <put_memory>
 8019b7a:	4638      	mov	r0, r7
 8019b7c:	f8c6 806c 	str.w	r8, [r6, #108]	; 0x6c
 8019b80:	b003      	add	sp, #12
 8019b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019b86:	4648      	mov	r0, r9
 8019b88:	f001 f9b6 	bl	801aef8 <uxr_close_custom_transport>
 8019b8c:	4621      	mov	r1, r4
 8019b8e:	4806      	ldr	r0, [pc, #24]	; (8019ba8 <rmw_init+0x20c>)
 8019b90:	f7ff fdb8 	bl	8019704 <put_memory>
 8019b94:	66f7      	str	r7, [r6, #108]	; 0x6c
 8019b96:	2701      	movs	r7, #1
 8019b98:	e7d5      	b.n	8019b46 <rmw_init+0x1aa>
 8019b9a:	bf00      	nop
 8019b9c:	080206c8 	.word	0x080206c8
 8019ba0:	200104ec 	.word	0x200104ec
 8019ba4:	2000c798 	.word	0x2000c798
 8019ba8:	200104dc 	.word	0x200104dc
 8019bac:	2000dd40 	.word	0x2000dd40
 8019bb0:	2000bcf4 	.word	0x2000bcf4
 8019bb4:	200104ac 	.word	0x200104ac
 8019bb8:	2000fe40 	.word	0x2000fe40
 8019bbc:	200104fc 	.word	0x200104fc
 8019bc0:	2000bd98 	.word	0x2000bd98
 8019bc4:	200104bc 	.word	0x200104bc
 8019bc8:	2000c608 	.word	0x2000c608
 8019bcc:	200104cc 	.word	0x200104cc
 8019bd0:	2000bb28 	.word	0x2000bb28
 8019bd4:	2000bb18 	.word	0x2000bb18
 8019bd8:	20010278 	.word	0x20010278
 8019bdc:	2001050c 	.word	0x2001050c
 8019be0:	2000bc70 	.word	0x2000bc70
 8019be4:	2001049c 	.word	0x2001049c
 8019be8:	2001041c 	.word	0x2001041c
 8019bec:	2001051c 	.word	0x2001051c
 8019bf0:	2000bbf0 	.word	0x2000bbf0
 8019bf4:	2001048c 	.word	0x2001048c
 8019bf8:	0801cfe5 	.word	0x0801cfe5
 8019bfc:	0801cfdd 	.word	0x0801cfdd
 8019c00:	0801d07d 	.word	0x0801d07d
 8019c04:	0801d119 	.word	0x0801d119

08019c08 <rmw_context_fini>:
 8019c08:	4b17      	ldr	r3, [pc, #92]	; (8019c68 <rmw_context_fini+0x60>)
 8019c0a:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8019c0c:	b570      	push	{r4, r5, r6, lr}
 8019c0e:	681c      	ldr	r4, [r3, #0]
 8019c10:	4605      	mov	r5, r0
 8019c12:	b334      	cbz	r4, 8019c62 <rmw_context_fini+0x5a>
 8019c14:	2600      	movs	r6, #0
 8019c16:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8019c1a:	6902      	ldr	r2, [r0, #16]
 8019c1c:	428a      	cmp	r2, r1
 8019c1e:	d018      	beq.n	8019c52 <rmw_context_fini+0x4a>
 8019c20:	2c00      	cmp	r4, #0
 8019c22:	d1f8      	bne.n	8019c16 <rmw_context_fini+0xe>
 8019c24:	b189      	cbz	r1, 8019c4a <rmw_context_fini+0x42>
 8019c26:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8019c2a:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8019c2e:	789b      	ldrb	r3, [r3, #2]
 8019c30:	2b01      	cmp	r3, #1
 8019c32:	bf14      	ite	ne
 8019c34:	210a      	movne	r1, #10
 8019c36:	2100      	moveq	r1, #0
 8019c38:	f7f9 f838 	bl	8012cac <uxr_delete_session_retries>
 8019c3c:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8019c3e:	f7f5 fb71 	bl	800f324 <rmw_uxrce_fini_session_memory>
 8019c42:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8019c44:	3010      	adds	r0, #16
 8019c46:	f001 f957 	bl	801aef8 <uxr_close_custom_transport>
 8019c4a:	2300      	movs	r3, #0
 8019c4c:	4630      	mov	r0, r6
 8019c4e:	66eb      	str	r3, [r5, #108]	; 0x6c
 8019c50:	bd70      	pop	{r4, r5, r6, pc}
 8019c52:	3018      	adds	r0, #24
 8019c54:	f000 f90e 	bl	8019e74 <rmw_destroy_node>
 8019c58:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8019c5a:	4606      	mov	r6, r0
 8019c5c:	2c00      	cmp	r4, #0
 8019c5e:	d1da      	bne.n	8019c16 <rmw_context_fini+0xe>
 8019c60:	e7e0      	b.n	8019c24 <rmw_context_fini+0x1c>
 8019c62:	4626      	mov	r6, r4
 8019c64:	e7de      	b.n	8019c24 <rmw_context_fini+0x1c>
 8019c66:	bf00      	nop
 8019c68:	200104ac 	.word	0x200104ac

08019c6c <create_topic>:
 8019c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c70:	4605      	mov	r5, r0
 8019c72:	b084      	sub	sp, #16
 8019c74:	4822      	ldr	r0, [pc, #136]	; (8019d00 <create_topic+0x94>)
 8019c76:	460f      	mov	r7, r1
 8019c78:	4616      	mov	r6, r2
 8019c7a:	f7ff fd33 	bl	80196e4 <get_memory>
 8019c7e:	4604      	mov	r4, r0
 8019c80:	2800      	cmp	r0, #0
 8019c82:	d039      	beq.n	8019cf8 <create_topic+0x8c>
 8019c84:	692b      	ldr	r3, [r5, #16]
 8019c86:	2102      	movs	r1, #2
 8019c88:	6884      	ldr	r4, [r0, #8]
 8019c8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019c8e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8019d08 <create_topic+0x9c>
 8019c92:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 8019c96:	1c42      	adds	r2, r0, #1
 8019c98:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8019c9c:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 8019ca0:	f7f8 f9b0 	bl	8012004 <uxr_object_id>
 8019ca4:	223c      	movs	r2, #60	; 0x3c
 8019ca6:	6120      	str	r0, [r4, #16]
 8019ca8:	4641      	mov	r1, r8
 8019caa:	4638      	mov	r0, r7
 8019cac:	f7f5 fdb8 	bl	800f820 <generate_topic_name>
 8019cb0:	b1f0      	cbz	r0, 8019cf0 <create_topic+0x84>
 8019cb2:	4f14      	ldr	r7, [pc, #80]	; (8019d04 <create_topic+0x98>)
 8019cb4:	4630      	mov	r0, r6
 8019cb6:	2264      	movs	r2, #100	; 0x64
 8019cb8:	4639      	mov	r1, r7
 8019cba:	f7f5 fd83 	bl	800f7c4 <generate_type_name>
 8019cbe:	b1b8      	cbz	r0, 8019cf0 <create_topic+0x84>
 8019cc0:	6928      	ldr	r0, [r5, #16]
 8019cc2:	2106      	movs	r1, #6
 8019cc4:	696b      	ldr	r3, [r5, #20]
 8019cc6:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8019cca:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019cce:	f8cd 8000 	str.w	r8, [sp]
 8019cd2:	e9cd 7101 	strd	r7, r1, [sp, #4]
 8019cd6:	6811      	ldr	r1, [r2, #0]
 8019cd8:	6922      	ldr	r2, [r4, #16]
 8019cda:	f7f7 ffd5 	bl	8011c88 <uxr_buffer_create_topic_bin>
 8019cde:	4602      	mov	r2, r0
 8019ce0:	6928      	ldr	r0, [r5, #16]
 8019ce2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8019ce6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8019cea:	f7f5 fc9f 	bl	800f62c <run_xrce_session>
 8019cee:	b918      	cbnz	r0, 8019cf8 <create_topic+0x8c>
 8019cf0:	4620      	mov	r0, r4
 8019cf2:	2400      	movs	r4, #0
 8019cf4:	f7f5 fb8c 	bl	800f410 <rmw_uxrce_fini_topic_memory>
 8019cf8:	4620      	mov	r0, r4
 8019cfa:	b004      	add	sp, #16
 8019cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d00:	2001050c 	.word	0x2001050c
 8019d04:	20010ac0 	.word	0x20010ac0
 8019d08:	20010a84 	.word	0x20010a84

08019d0c <destroy_topic>:
 8019d0c:	b538      	push	{r3, r4, r5, lr}
 8019d0e:	6985      	ldr	r5, [r0, #24]
 8019d10:	b1dd      	cbz	r5, 8019d4a <destroy_topic+0x3e>
 8019d12:	4604      	mov	r4, r0
 8019d14:	6928      	ldr	r0, [r5, #16]
 8019d16:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8019d1a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019d1e:	6922      	ldr	r2, [r4, #16]
 8019d20:	6819      	ldr	r1, [r3, #0]
 8019d22:	f7f7 ff33 	bl	8011b8c <uxr_buffer_delete_entity>
 8019d26:	4602      	mov	r2, r0
 8019d28:	6928      	ldr	r0, [r5, #16]
 8019d2a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8019d2e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8019d32:	f7f5 fc7b 	bl	800f62c <run_xrce_session>
 8019d36:	4603      	mov	r3, r0
 8019d38:	4620      	mov	r0, r4
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	bf14      	ite	ne
 8019d3e:	2400      	movne	r4, #0
 8019d40:	2402      	moveq	r4, #2
 8019d42:	f7f5 fb65 	bl	800f410 <rmw_uxrce_fini_topic_memory>
 8019d46:	4620      	mov	r0, r4
 8019d48:	bd38      	pop	{r3, r4, r5, pc}
 8019d4a:	2401      	movs	r4, #1
 8019d4c:	4620      	mov	r0, r4
 8019d4e:	bd38      	pop	{r3, r4, r5, pc}

08019d50 <create_node>:
 8019d50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019d54:	b083      	sub	sp, #12
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d064      	beq.n	8019e24 <create_node+0xd4>
 8019d5a:	4606      	mov	r6, r0
 8019d5c:	4838      	ldr	r0, [pc, #224]	; (8019e40 <create_node+0xf0>)
 8019d5e:	460f      	mov	r7, r1
 8019d60:	4690      	mov	r8, r2
 8019d62:	461d      	mov	r5, r3
 8019d64:	f7ff fcbe 	bl	80196e4 <get_memory>
 8019d68:	2800      	cmp	r0, #0
 8019d6a:	d05b      	beq.n	8019e24 <create_node+0xd4>
 8019d6c:	6884      	ldr	r4, [r0, #8]
 8019d6e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8019d70:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8019d74:	f104 0518 	add.w	r5, r4, #24
 8019d78:	6123      	str	r3, [r4, #16]
 8019d7a:	f7ff fd39 	bl	80197f0 <rmw_get_implementation_identifier>
 8019d7e:	f8c4 9020 	str.w	r9, [r4, #32]
 8019d82:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8019d86:	4630      	mov	r0, r6
 8019d88:	f7e6 faba 	bl	8000300 <strlen>
 8019d8c:	1c42      	adds	r2, r0, #1
 8019d8e:	2a3c      	cmp	r2, #60	; 0x3c
 8019d90:	d840      	bhi.n	8019e14 <create_node+0xc4>
 8019d92:	4648      	mov	r0, r9
 8019d94:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8019d98:	4631      	mov	r1, r6
 8019d9a:	f003 ffec 	bl	801dd76 <memcpy>
 8019d9e:	4638      	mov	r0, r7
 8019da0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8019da4:	f7e6 faac 	bl	8000300 <strlen>
 8019da8:	1c42      	adds	r2, r0, #1
 8019daa:	2a3c      	cmp	r2, #60	; 0x3c
 8019dac:	d832      	bhi.n	8019e14 <create_node+0xc4>
 8019dae:	4639      	mov	r1, r7
 8019db0:	4648      	mov	r0, r9
 8019db2:	f003 ffe0 	bl	801dd76 <memcpy>
 8019db6:	6923      	ldr	r3, [r4, #16]
 8019db8:	2101      	movs	r1, #1
 8019dba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019dbe:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8019dc2:	1842      	adds	r2, r0, r1
 8019dc4:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8019dc8:	f7f8 f91c 	bl	8012004 <uxr_object_id>
 8019dcc:	6160      	str	r0, [r4, #20]
 8019dce:	783b      	ldrb	r3, [r7, #0]
 8019dd0:	2b2f      	cmp	r3, #47	; 0x2f
 8019dd2:	d12c      	bne.n	8019e2e <create_node+0xde>
 8019dd4:	787b      	ldrb	r3, [r7, #1]
 8019dd6:	bb53      	cbnz	r3, 8019e2e <create_node+0xde>
 8019dd8:	4633      	mov	r3, r6
 8019dda:	4a1a      	ldr	r2, [pc, #104]	; (8019e44 <create_node+0xf4>)
 8019ddc:	213c      	movs	r1, #60	; 0x3c
 8019dde:	481a      	ldr	r0, [pc, #104]	; (8019e48 <create_node+0xf8>)
 8019de0:	f003 fdbe 	bl	801d960 <sniprintf>
 8019de4:	6920      	ldr	r0, [r4, #16]
 8019de6:	2106      	movs	r1, #6
 8019de8:	fa1f f388 	uxth.w	r3, r8
 8019dec:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8019df0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019df4:	9101      	str	r1, [sp, #4]
 8019df6:	4914      	ldr	r1, [pc, #80]	; (8019e48 <create_node+0xf8>)
 8019df8:	9100      	str	r1, [sp, #0]
 8019dfa:	6811      	ldr	r1, [r2, #0]
 8019dfc:	6962      	ldr	r2, [r4, #20]
 8019dfe:	f7f7 ff11 	bl	8011c24 <uxr_buffer_create_participant_bin>
 8019e02:	4602      	mov	r2, r0
 8019e04:	6920      	ldr	r0, [r4, #16]
 8019e06:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8019e0a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8019e0e:	f7f5 fc0d 	bl	800f62c <run_xrce_session>
 8019e12:	b918      	cbnz	r0, 8019e1c <create_node+0xcc>
 8019e14:	4628      	mov	r0, r5
 8019e16:	2500      	movs	r5, #0
 8019e18:	f7f5 fa8a 	bl	800f330 <rmw_uxrce_fini_node_memory>
 8019e1c:	4628      	mov	r0, r5
 8019e1e:	b003      	add	sp, #12
 8019e20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e24:	2500      	movs	r5, #0
 8019e26:	4628      	mov	r0, r5
 8019e28:	b003      	add	sp, #12
 8019e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e2e:	463b      	mov	r3, r7
 8019e30:	4a06      	ldr	r2, [pc, #24]	; (8019e4c <create_node+0xfc>)
 8019e32:	213c      	movs	r1, #60	; 0x3c
 8019e34:	9600      	str	r6, [sp, #0]
 8019e36:	4804      	ldr	r0, [pc, #16]	; (8019e48 <create_node+0xf8>)
 8019e38:	f003 fd92 	bl	801d960 <sniprintf>
 8019e3c:	e7d2      	b.n	8019de4 <create_node+0x94>
 8019e3e:	bf00      	nop
 8019e40:	200104ac 	.word	0x200104ac
 8019e44:	0801fb7c 	.word	0x0801fb7c
 8019e48:	20010b24 	.word	0x20010b24
 8019e4c:	080200c0 	.word	0x080200c0

08019e50 <rmw_create_node>:
 8019e50:	468c      	mov	ip, r1
 8019e52:	4611      	mov	r1, r2
 8019e54:	f1bc 0f00 	cmp.w	ip, #0
 8019e58:	d00a      	beq.n	8019e70 <rmw_create_node+0x20>
 8019e5a:	f89c 3000 	ldrb.w	r3, [ip]
 8019e5e:	b13b      	cbz	r3, 8019e70 <rmw_create_node+0x20>
 8019e60:	b132      	cbz	r2, 8019e70 <rmw_create_node+0x20>
 8019e62:	7813      	ldrb	r3, [r2, #0]
 8019e64:	b123      	cbz	r3, 8019e70 <rmw_create_node+0x20>
 8019e66:	4603      	mov	r3, r0
 8019e68:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8019e6a:	4660      	mov	r0, ip
 8019e6c:	f7ff bf70 	b.w	8019d50 <create_node>
 8019e70:	2000      	movs	r0, #0
 8019e72:	4770      	bx	lr

08019e74 <rmw_destroy_node>:
 8019e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e76:	b328      	cbz	r0, 8019ec4 <rmw_destroy_node+0x50>
 8019e78:	4607      	mov	r7, r0
 8019e7a:	6800      	ldr	r0, [r0, #0]
 8019e7c:	b120      	cbz	r0, 8019e88 <rmw_destroy_node+0x14>
 8019e7e:	4b37      	ldr	r3, [pc, #220]	; (8019f5c <rmw_destroy_node+0xe8>)
 8019e80:	6819      	ldr	r1, [r3, #0]
 8019e82:	f7e6 f9dd 	bl	8000240 <strcmp>
 8019e86:	b9e8      	cbnz	r0, 8019ec4 <rmw_destroy_node+0x50>
 8019e88:	687d      	ldr	r5, [r7, #4]
 8019e8a:	b1dd      	cbz	r5, 8019ec4 <rmw_destroy_node+0x50>
 8019e8c:	4b34      	ldr	r3, [pc, #208]	; (8019f60 <rmw_destroy_node+0xec>)
 8019e8e:	681c      	ldr	r4, [r3, #0]
 8019e90:	2c00      	cmp	r4, #0
 8019e92:	d060      	beq.n	8019f56 <rmw_destroy_node+0xe2>
 8019e94:	2600      	movs	r6, #0
 8019e96:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8019e9a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8019e9e:	429d      	cmp	r5, r3
 8019ea0:	d013      	beq.n	8019eca <rmw_destroy_node+0x56>
 8019ea2:	2c00      	cmp	r4, #0
 8019ea4:	d1f7      	bne.n	8019e96 <rmw_destroy_node+0x22>
 8019ea6:	4b2f      	ldr	r3, [pc, #188]	; (8019f64 <rmw_destroy_node+0xf0>)
 8019ea8:	681c      	ldr	r4, [r3, #0]
 8019eaa:	b1c4      	cbz	r4, 8019ede <rmw_destroy_node+0x6a>
 8019eac:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8019eb0:	6a0b      	ldr	r3, [r1, #32]
 8019eb2:	429d      	cmp	r5, r3
 8019eb4:	d1f9      	bne.n	8019eaa <rmw_destroy_node+0x36>
 8019eb6:	317c      	adds	r1, #124	; 0x7c
 8019eb8:	4638      	mov	r0, r7
 8019eba:	f000 fbff 	bl	801a6bc <rmw_destroy_subscription>
 8019ebe:	2801      	cmp	r0, #1
 8019ec0:	4606      	mov	r6, r0
 8019ec2:	d1f2      	bne.n	8019eaa <rmw_destroy_node+0x36>
 8019ec4:	2601      	movs	r6, #1
 8019ec6:	4630      	mov	r0, r6
 8019ec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019eca:	3184      	adds	r1, #132	; 0x84
 8019ecc:	4638      	mov	r0, r7
 8019ece:	f7f5 f875 	bl	800efbc <rmw_destroy_publisher>
 8019ed2:	2801      	cmp	r0, #1
 8019ed4:	4606      	mov	r6, r0
 8019ed6:	d0f5      	beq.n	8019ec4 <rmw_destroy_node+0x50>
 8019ed8:	2c00      	cmp	r4, #0
 8019eda:	d1dc      	bne.n	8019e96 <rmw_destroy_node+0x22>
 8019edc:	e7e3      	b.n	8019ea6 <rmw_destroy_node+0x32>
 8019ede:	4b22      	ldr	r3, [pc, #136]	; (8019f68 <rmw_destroy_node+0xf4>)
 8019ee0:	681c      	ldr	r4, [r3, #0]
 8019ee2:	b16c      	cbz	r4, 8019f00 <rmw_destroy_node+0x8c>
 8019ee4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8019ee8:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8019eea:	429d      	cmp	r5, r3
 8019eec:	d1f9      	bne.n	8019ee2 <rmw_destroy_node+0x6e>
 8019eee:	317c      	adds	r1, #124	; 0x7c
 8019ef0:	4638      	mov	r0, r7
 8019ef2:	f000 fa6d 	bl	801a3d0 <rmw_destroy_service>
 8019ef6:	2801      	cmp	r0, #1
 8019ef8:	4606      	mov	r6, r0
 8019efa:	d0e3      	beq.n	8019ec4 <rmw_destroy_node+0x50>
 8019efc:	2c00      	cmp	r4, #0
 8019efe:	d1f1      	bne.n	8019ee4 <rmw_destroy_node+0x70>
 8019f00:	4b1a      	ldr	r3, [pc, #104]	; (8019f6c <rmw_destroy_node+0xf8>)
 8019f02:	681c      	ldr	r4, [r3, #0]
 8019f04:	b16c      	cbz	r4, 8019f22 <rmw_destroy_node+0xae>
 8019f06:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8019f0a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8019f0c:	429d      	cmp	r5, r3
 8019f0e:	d1f9      	bne.n	8019f04 <rmw_destroy_node+0x90>
 8019f10:	317c      	adds	r1, #124	; 0x7c
 8019f12:	4638      	mov	r0, r7
 8019f14:	f7ff fc0a 	bl	801972c <rmw_destroy_client>
 8019f18:	2801      	cmp	r0, #1
 8019f1a:	4606      	mov	r6, r0
 8019f1c:	d0d2      	beq.n	8019ec4 <rmw_destroy_node+0x50>
 8019f1e:	2c00      	cmp	r4, #0
 8019f20:	d1f1      	bne.n	8019f06 <rmw_destroy_node+0x92>
 8019f22:	6928      	ldr	r0, [r5, #16]
 8019f24:	696a      	ldr	r2, [r5, #20]
 8019f26:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8019f2a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019f2e:	6819      	ldr	r1, [r3, #0]
 8019f30:	f7f7 fe2c 	bl	8011b8c <uxr_buffer_delete_entity>
 8019f34:	4602      	mov	r2, r0
 8019f36:	6928      	ldr	r0, [r5, #16]
 8019f38:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8019f3c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8019f40:	f7f5 fb74 	bl	800f62c <run_xrce_session>
 8019f44:	4603      	mov	r3, r0
 8019f46:	4638      	mov	r0, r7
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	bf08      	it	eq
 8019f4c:	2602      	moveq	r6, #2
 8019f4e:	f7f5 f9ef 	bl	800f330 <rmw_uxrce_fini_node_memory>
 8019f52:	4630      	mov	r0, r6
 8019f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f56:	4626      	mov	r6, r4
 8019f58:	e7a5      	b.n	8019ea6 <rmw_destroy_node+0x32>
 8019f5a:	bf00      	nop
 8019f5c:	080206c8 	.word	0x080206c8
 8019f60:	200104bc 	.word	0x200104bc
 8019f64:	200104fc 	.word	0x200104fc
 8019f68:	200104cc 	.word	0x200104cc
 8019f6c:	2000bb18 	.word	0x2000bb18

08019f70 <rmw_node_get_graph_guard_condition>:
 8019f70:	6843      	ldr	r3, [r0, #4]
 8019f72:	6918      	ldr	r0, [r3, #16]
 8019f74:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8019f78:	4770      	bx	lr
 8019f7a:	bf00      	nop

08019f7c <rmw_send_request>:
 8019f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019f80:	4604      	mov	r4, r0
 8019f82:	6800      	ldr	r0, [r0, #0]
 8019f84:	b08b      	sub	sp, #44	; 0x2c
 8019f86:	460e      	mov	r6, r1
 8019f88:	4615      	mov	r5, r2
 8019f8a:	b128      	cbz	r0, 8019f98 <rmw_send_request+0x1c>
 8019f8c:	4b21      	ldr	r3, [pc, #132]	; (801a014 <rmw_send_request+0x98>)
 8019f8e:	6819      	ldr	r1, [r3, #0]
 8019f90:	f7e6 f956 	bl	8000240 <strcmp>
 8019f94:	2800      	cmp	r0, #0
 8019f96:	d139      	bne.n	801a00c <rmw_send_request+0x90>
 8019f98:	6864      	ldr	r4, [r4, #4]
 8019f9a:	2700      	movs	r7, #0
 8019f9c:	6963      	ldr	r3, [r4, #20]
 8019f9e:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 8019fa2:	689b      	ldr	r3, [r3, #8]
 8019fa4:	4798      	blx	r3
 8019fa6:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8019faa:	4630      	mov	r0, r6
 8019fac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019fb0:	4798      	blx	r3
 8019fb2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8019fb6:	9000      	str	r0, [sp, #0]
 8019fb8:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8019fbc:	6922      	ldr	r2, [r4, #16]
 8019fbe:	ab02      	add	r3, sp, #8
 8019fc0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8019fc2:	f7f9 fb27 	bl	8013614 <uxr_prepare_output_stream>
 8019fc6:	e9c5 0700 	strd	r0, r7, [r5]
 8019fca:	b198      	cbz	r0, 8019ff4 <rmw_send_request+0x78>
 8019fcc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8019fd0:	a902      	add	r1, sp, #8
 8019fd2:	4630      	mov	r0, r6
 8019fd4:	4798      	blx	r3
 8019fd6:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8019fda:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8019fde:	2b01      	cmp	r3, #1
 8019fe0:	d00c      	beq.n	8019ffc <rmw_send_request+0x80>
 8019fe2:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8019fe4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019fe8:	f7f8 fd16 	bl	8012a18 <uxr_run_session_until_confirm_delivery>
 8019fec:	4638      	mov	r0, r7
 8019fee:	b00b      	add	sp, #44	; 0x2c
 8019ff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019ff4:	2001      	movs	r0, #1
 8019ff6:	b00b      	add	sp, #44	; 0x2c
 8019ff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019ffc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a000:	f7f8 f950 	bl	80122a4 <uxr_flash_output_streams>
 801a004:	4638      	mov	r0, r7
 801a006:	b00b      	add	sp, #44	; 0x2c
 801a008:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a00c:	200c      	movs	r0, #12
 801a00e:	b00b      	add	sp, #44	; 0x2c
 801a010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a014:	080206c8 	.word	0x080206c8

0801a018 <rmw_take_request>:
 801a018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a01c:	4605      	mov	r5, r0
 801a01e:	6800      	ldr	r0, [r0, #0]
 801a020:	b089      	sub	sp, #36	; 0x24
 801a022:	460c      	mov	r4, r1
 801a024:	4690      	mov	r8, r2
 801a026:	461e      	mov	r6, r3
 801a028:	b128      	cbz	r0, 801a036 <rmw_take_request+0x1e>
 801a02a:	4b28      	ldr	r3, [pc, #160]	; (801a0cc <rmw_take_request+0xb4>)
 801a02c:	6819      	ldr	r1, [r3, #0]
 801a02e:	f7e6 f907 	bl	8000240 <strcmp>
 801a032:	2800      	cmp	r0, #0
 801a034:	d146      	bne.n	801a0c4 <rmw_take_request+0xac>
 801a036:	b10e      	cbz	r6, 801a03c <rmw_take_request+0x24>
 801a038:	2300      	movs	r3, #0
 801a03a:	7033      	strb	r3, [r6, #0]
 801a03c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801a040:	f7f5 fa76 	bl	800f530 <rmw_uxrce_clean_expired_static_input_buffer>
 801a044:	4648      	mov	r0, r9
 801a046:	f7f5 fa49 	bl	800f4dc <rmw_uxrce_find_static_input_buffer_by_owner>
 801a04a:	4607      	mov	r7, r0
 801a04c:	b3b0      	cbz	r0, 801a0bc <rmw_take_request+0xa4>
 801a04e:	6885      	ldr	r5, [r0, #8]
 801a050:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 801a054:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 801a058:	e9c4 3208 	strd	r3, r2, [r4, #32]
 801a05c:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 801a060:	7423      	strb	r3, [r4, #16]
 801a062:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 801a066:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 801a06a:	f8a4 2011 	strh.w	r2, [r4, #17]
 801a06e:	74e3      	strb	r3, [r4, #19]
 801a070:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 801a074:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 801a078:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 801a07c:	6161      	str	r1, [r4, #20]
 801a07e:	61a2      	str	r2, [r4, #24]
 801a080:	61e3      	str	r3, [r4, #28]
 801a082:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801a086:	689b      	ldr	r3, [r3, #8]
 801a088:	4798      	blx	r3
 801a08a:	6844      	ldr	r4, [r0, #4]
 801a08c:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 801a090:	f105 0110 	add.w	r1, r5, #16
 801a094:	4668      	mov	r0, sp
 801a096:	f7f7 fd05 	bl	8011aa4 <ucdr_init_buffer>
 801a09a:	4641      	mov	r1, r8
 801a09c:	68e3      	ldr	r3, [r4, #12]
 801a09e:	4668      	mov	r0, sp
 801a0a0:	4798      	blx	r3
 801a0a2:	4639      	mov	r1, r7
 801a0a4:	4604      	mov	r4, r0
 801a0a6:	480a      	ldr	r0, [pc, #40]	; (801a0d0 <rmw_take_request+0xb8>)
 801a0a8:	f7ff fb2c 	bl	8019704 <put_memory>
 801a0ac:	b106      	cbz	r6, 801a0b0 <rmw_take_request+0x98>
 801a0ae:	7034      	strb	r4, [r6, #0]
 801a0b0:	f084 0001 	eor.w	r0, r4, #1
 801a0b4:	b2c0      	uxtb	r0, r0
 801a0b6:	b009      	add	sp, #36	; 0x24
 801a0b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a0bc:	2001      	movs	r0, #1
 801a0be:	b009      	add	sp, #36	; 0x24
 801a0c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a0c4:	200c      	movs	r0, #12
 801a0c6:	b009      	add	sp, #36	; 0x24
 801a0c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a0cc:	080206c8 	.word	0x080206c8
 801a0d0:	200104ec 	.word	0x200104ec

0801a0d4 <rmw_send_response>:
 801a0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a0d6:	4605      	mov	r5, r0
 801a0d8:	6800      	ldr	r0, [r0, #0]
 801a0da:	b091      	sub	sp, #68	; 0x44
 801a0dc:	460c      	mov	r4, r1
 801a0de:	4616      	mov	r6, r2
 801a0e0:	b128      	cbz	r0, 801a0ee <rmw_send_response+0x1a>
 801a0e2:	4b29      	ldr	r3, [pc, #164]	; (801a188 <rmw_send_response+0xb4>)
 801a0e4:	6819      	ldr	r1, [r3, #0]
 801a0e6:	f7e6 f8ab 	bl	8000240 <strcmp>
 801a0ea:	2800      	cmp	r0, #0
 801a0ec:	d141      	bne.n	801a172 <rmw_send_response+0x9e>
 801a0ee:	686d      	ldr	r5, [r5, #4]
 801a0f0:	68a1      	ldr	r1, [r4, #8]
 801a0f2:	6860      	ldr	r0, [r4, #4]
 801a0f4:	6faf      	ldr	r7, [r5, #120]	; 0x78
 801a0f6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801a0fa:	9307      	str	r3, [sp, #28]
 801a0fc:	4623      	mov	r3, r4
 801a0fe:	9206      	str	r2, [sp, #24]
 801a100:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a104:	789b      	ldrb	r3, [r3, #2]
 801a106:	f88d 2017 	strb.w	r2, [sp, #23]
 801a10a:	f88d 3016 	strb.w	r3, [sp, #22]
 801a10e:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801a112:	68e2      	ldr	r2, [r4, #12]
 801a114:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a118:	ab02      	add	r3, sp, #8
 801a11a:	696c      	ldr	r4, [r5, #20]
 801a11c:	c307      	stmia	r3!, {r0, r1, r2}
 801a11e:	68e3      	ldr	r3, [r4, #12]
 801a120:	4798      	blx	r3
 801a122:	6844      	ldr	r4, [r0, #4]
 801a124:	4630      	mov	r0, r6
 801a126:	6923      	ldr	r3, [r4, #16]
 801a128:	4798      	blx	r3
 801a12a:	f100 0318 	add.w	r3, r0, #24
 801a12e:	6938      	ldr	r0, [r7, #16]
 801a130:	9300      	str	r3, [sp, #0]
 801a132:	ab08      	add	r3, sp, #32
 801a134:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a138:	692a      	ldr	r2, [r5, #16]
 801a13a:	6f29      	ldr	r1, [r5, #112]	; 0x70
 801a13c:	f7f9 fa6a 	bl	8013614 <uxr_prepare_output_stream>
 801a140:	b910      	cbnz	r0, 801a148 <rmw_send_response+0x74>
 801a142:	2001      	movs	r0, #1
 801a144:	b011      	add	sp, #68	; 0x44
 801a146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a148:	a902      	add	r1, sp, #8
 801a14a:	a808      	add	r0, sp, #32
 801a14c:	f7fa fbce 	bl	80148ec <uxr_serialize_SampleIdentity>
 801a150:	68a3      	ldr	r3, [r4, #8]
 801a152:	a908      	add	r1, sp, #32
 801a154:	4630      	mov	r0, r6
 801a156:	4798      	blx	r3
 801a158:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 801a15c:	6938      	ldr	r0, [r7, #16]
 801a15e:	2b01      	cmp	r3, #1
 801a160:	d00a      	beq.n	801a178 <rmw_send_response+0xa4>
 801a162:	6f69      	ldr	r1, [r5, #116]	; 0x74
 801a164:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a168:	f7f8 fc56 	bl	8012a18 <uxr_run_session_until_confirm_delivery>
 801a16c:	2000      	movs	r0, #0
 801a16e:	b011      	add	sp, #68	; 0x44
 801a170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a172:	200c      	movs	r0, #12
 801a174:	b011      	add	sp, #68	; 0x44
 801a176:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a178:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a17c:	f7f8 f892 	bl	80122a4 <uxr_flash_output_streams>
 801a180:	2000      	movs	r0, #0
 801a182:	b011      	add	sp, #68	; 0x44
 801a184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a186:	bf00      	nop
 801a188:	080206c8 	.word	0x080206c8

0801a18c <rmw_take_response>:
 801a18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a190:	4604      	mov	r4, r0
 801a192:	6800      	ldr	r0, [r0, #0]
 801a194:	b088      	sub	sp, #32
 801a196:	460f      	mov	r7, r1
 801a198:	4690      	mov	r8, r2
 801a19a:	461d      	mov	r5, r3
 801a19c:	b120      	cbz	r0, 801a1a8 <rmw_take_response+0x1c>
 801a19e:	4b1d      	ldr	r3, [pc, #116]	; (801a214 <rmw_take_response+0x88>)
 801a1a0:	6819      	ldr	r1, [r3, #0]
 801a1a2:	f7e6 f84d 	bl	8000240 <strcmp>
 801a1a6:	bb68      	cbnz	r0, 801a204 <rmw_take_response+0x78>
 801a1a8:	b10d      	cbz	r5, 801a1ae <rmw_take_response+0x22>
 801a1aa:	2300      	movs	r3, #0
 801a1ac:	702b      	strb	r3, [r5, #0]
 801a1ae:	6864      	ldr	r4, [r4, #4]
 801a1b0:	f7f5 f9be 	bl	800f530 <rmw_uxrce_clean_expired_static_input_buffer>
 801a1b4:	4620      	mov	r0, r4
 801a1b6:	f7f5 f991 	bl	800f4dc <rmw_uxrce_find_static_input_buffer_by_owner>
 801a1ba:	4606      	mov	r6, r0
 801a1bc:	b330      	cbz	r0, 801a20c <rmw_take_response+0x80>
 801a1be:	6963      	ldr	r3, [r4, #20]
 801a1c0:	6884      	ldr	r4, [r0, #8]
 801a1c2:	68db      	ldr	r3, [r3, #12]
 801a1c4:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 801a1c8:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 801a1cc:	e9c7 0108 	strd	r0, r1, [r7, #32]
 801a1d0:	4798      	blx	r3
 801a1d2:	6847      	ldr	r7, [r0, #4]
 801a1d4:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 801a1d8:	f104 0110 	add.w	r1, r4, #16
 801a1dc:	4668      	mov	r0, sp
 801a1de:	f7f7 fc61 	bl	8011aa4 <ucdr_init_buffer>
 801a1e2:	4641      	mov	r1, r8
 801a1e4:	68fb      	ldr	r3, [r7, #12]
 801a1e6:	4668      	mov	r0, sp
 801a1e8:	4798      	blx	r3
 801a1ea:	4631      	mov	r1, r6
 801a1ec:	4604      	mov	r4, r0
 801a1ee:	480a      	ldr	r0, [pc, #40]	; (801a218 <rmw_take_response+0x8c>)
 801a1f0:	f7ff fa88 	bl	8019704 <put_memory>
 801a1f4:	b105      	cbz	r5, 801a1f8 <rmw_take_response+0x6c>
 801a1f6:	702c      	strb	r4, [r5, #0]
 801a1f8:	f084 0001 	eor.w	r0, r4, #1
 801a1fc:	b2c0      	uxtb	r0, r0
 801a1fe:	b008      	add	sp, #32
 801a200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a204:	200c      	movs	r0, #12
 801a206:	b008      	add	sp, #32
 801a208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a20c:	2001      	movs	r0, #1
 801a20e:	b008      	add	sp, #32
 801a210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a214:	080206c8 	.word	0x080206c8
 801a218:	200104ec 	.word	0x200104ec

0801a21c <rmw_create_service>:
 801a21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a220:	b091      	sub	sp, #68	; 0x44
 801a222:	2900      	cmp	r1, #0
 801a224:	f000 80bb 	beq.w	801a39e <rmw_create_service+0x182>
 801a228:	4606      	mov	r6, r0
 801a22a:	2800      	cmp	r0, #0
 801a22c:	f000 80b7 	beq.w	801a39e <rmw_create_service+0x182>
 801a230:	4614      	mov	r4, r2
 801a232:	6800      	ldr	r0, [r0, #0]
 801a234:	4689      	mov	r9, r1
 801a236:	461d      	mov	r5, r3
 801a238:	f7f5 fb0a 	bl	800f850 <is_uxrce_rmw_identifier_valid>
 801a23c:	2c00      	cmp	r4, #0
 801a23e:	f000 80ae 	beq.w	801a39e <rmw_create_service+0x182>
 801a242:	f080 0001 	eor.w	r0, r0, #1
 801a246:	b2c0      	uxtb	r0, r0
 801a248:	2800      	cmp	r0, #0
 801a24a:	f040 80a8 	bne.w	801a39e <rmw_create_service+0x182>
 801a24e:	7823      	ldrb	r3, [r4, #0]
 801a250:	2b00      	cmp	r3, #0
 801a252:	f000 80a4 	beq.w	801a39e <rmw_create_service+0x182>
 801a256:	2d00      	cmp	r5, #0
 801a258:	f000 80a1 	beq.w	801a39e <rmw_create_service+0x182>
 801a25c:	4856      	ldr	r0, [pc, #344]	; (801a3b8 <rmw_create_service+0x19c>)
 801a25e:	f8d6 8004 	ldr.w	r8, [r6, #4]
 801a262:	f7ff fa3f 	bl	80196e4 <get_memory>
 801a266:	4606      	mov	r6, r0
 801a268:	2800      	cmp	r0, #0
 801a26a:	f000 8099 	beq.w	801a3a0 <rmw_create_service+0x184>
 801a26e:	6887      	ldr	r7, [r0, #8]
 801a270:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 801a274:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 801a278:	f7ff faba 	bl	80197f0 <rmw_get_implementation_identifier>
 801a27c:	67f8      	str	r0, [r7, #124]	; 0x7c
 801a27e:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 801a282:	4620      	mov	r0, r4
 801a284:	f7e6 f83c 	bl	8000300 <strlen>
 801a288:	1c42      	adds	r2, r0, #1
 801a28a:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 801a28e:	2a3c      	cmp	r2, #60	; 0x3c
 801a290:	f200 808a 	bhi.w	801a3a8 <rmw_create_service+0x18c>
 801a294:	4621      	mov	r1, r4
 801a296:	4650      	mov	r0, sl
 801a298:	f003 fd6d 	bl	801dd76 <memcpy>
 801a29c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a2a0:	4629      	mov	r1, r5
 801a2a2:	2250      	movs	r2, #80	; 0x50
 801a2a4:	f107 0020 	add.w	r0, r7, #32
 801a2a8:	f8c7 8078 	str.w	r8, [r7, #120]	; 0x78
 801a2ac:	677b      	str	r3, [r7, #116]	; 0x74
 801a2ae:	f003 fd62 	bl	801dd76 <memcpy>
 801a2b2:	4648      	mov	r0, r9
 801a2b4:	4941      	ldr	r1, [pc, #260]	; (801a3bc <rmw_create_service+0x1a0>)
 801a2b6:	f7f5 fae5 	bl	800f884 <get_service_typesupport_handle>
 801a2ba:	2800      	cmp	r0, #0
 801a2bc:	d074      	beq.n	801a3a8 <rmw_create_service+0x18c>
 801a2be:	6843      	ldr	r3, [r0, #4]
 801a2c0:	617b      	str	r3, [r7, #20]
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d070      	beq.n	801a3a8 <rmw_create_service+0x18c>
 801a2c6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801a2ca:	2108      	movs	r1, #8
 801a2cc:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 801a3c4 <rmw_create_service+0x1a8>
 801a2d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a2d4:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 801a3c8 <rmw_create_service+0x1ac>
 801a2d8:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	; 0x5a2
 801a2dc:	1c42      	adds	r2, r0, #1
 801a2de:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
 801a2e2:	f7f7 fe8f 	bl	8012004 <uxr_object_id>
 801a2e6:	2364      	movs	r3, #100	; 0x64
 801a2e8:	6138      	str	r0, [r7, #16]
 801a2ea:	4652      	mov	r2, sl
 801a2ec:	4649      	mov	r1, r9
 801a2ee:	6978      	ldr	r0, [r7, #20]
 801a2f0:	f7f5 fa02 	bl	800f6f8 <generate_service_types>
 801a2f4:	2800      	cmp	r0, #0
 801a2f6:	d057      	beq.n	801a3a8 <rmw_create_service+0x18c>
 801a2f8:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 801a3cc <rmw_create_service+0x1b0>
 801a2fc:	233c      	movs	r3, #60	; 0x3c
 801a2fe:	4a30      	ldr	r2, [pc, #192]	; (801a3c0 <rmw_create_service+0x1a4>)
 801a300:	4620      	mov	r0, r4
 801a302:	4659      	mov	r1, fp
 801a304:	f7f5 f9c6 	bl	800f694 <generate_service_topics>
 801a308:	2800      	cmp	r0, #0
 801a30a:	d04d      	beq.n	801a3a8 <rmw_create_service+0x18c>
 801a30c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801a310:	a80c      	add	r0, sp, #48	; 0x30
 801a312:	4629      	mov	r1, r5
 801a314:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 801a318:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801a31c:	f7f5 f9a2 	bl	800f664 <convert_qos_profile>
 801a320:	4a27      	ldr	r2, [pc, #156]	; (801a3c0 <rmw_create_service+0x1a4>)
 801a322:	a80c      	add	r0, sp, #48	; 0x30
 801a324:	9400      	str	r4, [sp, #0]
 801a326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a328:	e9cd b203 	strd	fp, r2, [sp, #12]
 801a32c:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 801a330:	c803      	ldmia	r0, {r0, r1}
 801a332:	9a08      	ldr	r2, [sp, #32]
 801a334:	9005      	str	r0, [sp, #20]
 801a336:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 801a33a:	2306      	movs	r3, #6
 801a33c:	f8ad 1018 	strh.w	r1, [sp, #24]
 801a340:	9307      	str	r3, [sp, #28]
 801a342:	6811      	ldr	r1, [r2, #0]
 801a344:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801a348:	693a      	ldr	r2, [r7, #16]
 801a34a:	f7f7 fe21 	bl	8011f90 <uxr_buffer_create_replier_bin>
 801a34e:	4602      	mov	r2, r0
 801a350:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801a354:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801a358:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801a35c:	f7f5 f966 	bl	800f62c <run_xrce_session>
 801a360:	b310      	cbz	r0, 801a3a8 <rmw_create_service+0x18c>
 801a362:	7a2b      	ldrb	r3, [r5, #8]
 801a364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a368:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801a36c:	2b02      	cmp	r3, #2
 801a36e:	920e      	str	r2, [sp, #56]	; 0x38
 801a370:	f04f 0200 	mov.w	r2, #0
 801a374:	920f      	str	r2, [sp, #60]	; 0x3c
 801a376:	bf0c      	ite	eq
 801a378:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	; 0x37c
 801a37c:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	; 0x374
 801a380:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a384:	930b      	str	r3, [sp, #44]	; 0x2c
 801a386:	ab0e      	add	r3, sp, #56	; 0x38
 801a388:	673a      	str	r2, [r7, #112]	; 0x70
 801a38a:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 801a38e:	9300      	str	r3, [sp, #0]
 801a390:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a392:	6811      	ldr	r1, [r2, #0]
 801a394:	693a      	ldr	r2, [r7, #16]
 801a396:	f001 faff 	bl	801b998 <uxr_buffer_request_data>
 801a39a:	8338      	strh	r0, [r7, #24]
 801a39c:	e000      	b.n	801a3a0 <rmw_create_service+0x184>
 801a39e:	2600      	movs	r6, #0
 801a3a0:	4630      	mov	r0, r6
 801a3a2:	b011      	add	sp, #68	; 0x44
 801a3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3a8:	4630      	mov	r0, r6
 801a3aa:	2600      	movs	r6, #0
 801a3ac:	f7f5 f804 	bl	800f3b8 <rmw_uxrce_fini_service_memory>
 801a3b0:	4630      	mov	r0, r6
 801a3b2:	b011      	add	sp, #68	; 0x44
 801a3b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3b8:	200104cc 	.word	0x200104cc
 801a3bc:	0801ed14 	.word	0x0801ed14
 801a3c0:	20010c00 	.word	0x20010c00
 801a3c4:	20010c3c 	.word	0x20010c3c
 801a3c8:	20010b9c 	.word	0x20010b9c
 801a3cc:	20010b60 	.word	0x20010b60

0801a3d0 <rmw_destroy_service>:
 801a3d0:	b570      	push	{r4, r5, r6, lr}
 801a3d2:	b128      	cbz	r0, 801a3e0 <rmw_destroy_service+0x10>
 801a3d4:	4604      	mov	r4, r0
 801a3d6:	6800      	ldr	r0, [r0, #0]
 801a3d8:	460d      	mov	r5, r1
 801a3da:	f7f5 fa39 	bl	800f850 <is_uxrce_rmw_identifier_valid>
 801a3de:	b910      	cbnz	r0, 801a3e6 <rmw_destroy_service+0x16>
 801a3e0:	2401      	movs	r4, #1
 801a3e2:	4620      	mov	r0, r4
 801a3e4:	bd70      	pop	{r4, r5, r6, pc}
 801a3e6:	6863      	ldr	r3, [r4, #4]
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	d0f9      	beq.n	801a3e0 <rmw_destroy_service+0x10>
 801a3ec:	2d00      	cmp	r5, #0
 801a3ee:	d0f7      	beq.n	801a3e0 <rmw_destroy_service+0x10>
 801a3f0:	6828      	ldr	r0, [r5, #0]
 801a3f2:	f7f5 fa2d 	bl	800f850 <is_uxrce_rmw_identifier_valid>
 801a3f6:	2800      	cmp	r0, #0
 801a3f8:	d0f2      	beq.n	801a3e0 <rmw_destroy_service+0x10>
 801a3fa:	686e      	ldr	r6, [r5, #4]
 801a3fc:	2e00      	cmp	r6, #0
 801a3fe:	d0ef      	beq.n	801a3e0 <rmw_destroy_service+0x10>
 801a400:	6864      	ldr	r4, [r4, #4]
 801a402:	6932      	ldr	r2, [r6, #16]
 801a404:	6920      	ldr	r0, [r4, #16]
 801a406:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a40a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a40e:	6819      	ldr	r1, [r3, #0]
 801a410:	f001 fafc 	bl	801ba0c <uxr_buffer_cancel_data>
 801a414:	4602      	mov	r2, r0
 801a416:	6920      	ldr	r0, [r4, #16]
 801a418:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801a41c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801a420:	f7f5 f904 	bl	800f62c <run_xrce_session>
 801a424:	6920      	ldr	r0, [r4, #16]
 801a426:	6932      	ldr	r2, [r6, #16]
 801a428:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a42c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a430:	6819      	ldr	r1, [r3, #0]
 801a432:	f7f7 fbab 	bl	8011b8c <uxr_buffer_delete_entity>
 801a436:	4602      	mov	r2, r0
 801a438:	6920      	ldr	r0, [r4, #16]
 801a43a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801a43e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801a442:	f7f5 f8f3 	bl	800f62c <run_xrce_session>
 801a446:	4603      	mov	r3, r0
 801a448:	4628      	mov	r0, r5
 801a44a:	2b00      	cmp	r3, #0
 801a44c:	bf14      	ite	ne
 801a44e:	2400      	movne	r4, #0
 801a450:	2402      	moveq	r4, #2
 801a452:	f7f4 ffb1 	bl	800f3b8 <rmw_uxrce_fini_service_memory>
 801a456:	e7c4      	b.n	801a3e2 <rmw_destroy_service+0x12>

0801a458 <rmw_service_response_publisher_get_actual_qos>:
 801a458:	b181      	cbz	r1, 801a47c <rmw_service_response_publisher_get_actual_qos+0x24>
 801a45a:	4603      	mov	r3, r0
 801a45c:	b510      	push	{r4, lr}
 801a45e:	fab0 f480 	clz	r4, r0
 801a462:	0964      	lsrs	r4, r4, #5
 801a464:	b140      	cbz	r0, 801a478 <rmw_service_response_publisher_get_actual_qos+0x20>
 801a466:	685b      	ldr	r3, [r3, #4]
 801a468:	4608      	mov	r0, r1
 801a46a:	2250      	movs	r2, #80	; 0x50
 801a46c:	f103 0120 	add.w	r1, r3, #32
 801a470:	f003 fc81 	bl	801dd76 <memcpy>
 801a474:	4620      	mov	r0, r4
 801a476:	bd10      	pop	{r4, pc}
 801a478:	200b      	movs	r0, #11
 801a47a:	bd10      	pop	{r4, pc}
 801a47c:	200b      	movs	r0, #11
 801a47e:	4770      	bx	lr

0801a480 <rmw_service_request_subscription_get_actual_qos>:
 801a480:	b178      	cbz	r0, 801a4a2 <rmw_service_request_subscription_get_actual_qos+0x22>
 801a482:	b510      	push	{r4, lr}
 801a484:	fab1 f481 	clz	r4, r1
 801a488:	0964      	lsrs	r4, r4, #5
 801a48a:	b141      	cbz	r1, 801a49e <rmw_service_request_subscription_get_actual_qos+0x1e>
 801a48c:	6843      	ldr	r3, [r0, #4]
 801a48e:	2250      	movs	r2, #80	; 0x50
 801a490:	4608      	mov	r0, r1
 801a492:	f103 0120 	add.w	r1, r3, #32
 801a496:	f003 fc6e 	bl	801dd76 <memcpy>
 801a49a:	4620      	mov	r0, r4
 801a49c:	bd10      	pop	{r4, pc}
 801a49e:	200b      	movs	r0, #11
 801a4a0:	bd10      	pop	{r4, pc}
 801a4a2:	200b      	movs	r0, #11
 801a4a4:	4770      	bx	lr
 801a4a6:	bf00      	nop

0801a4a8 <rmw_create_subscription>:
 801a4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4ac:	b08d      	sub	sp, #52	; 0x34
 801a4ae:	2900      	cmp	r1, #0
 801a4b0:	f000 80d8 	beq.w	801a664 <rmw_create_subscription+0x1bc>
 801a4b4:	4604      	mov	r4, r0
 801a4b6:	2800      	cmp	r0, #0
 801a4b8:	f000 80d4 	beq.w	801a664 <rmw_create_subscription+0x1bc>
 801a4bc:	6800      	ldr	r0, [r0, #0]
 801a4be:	460e      	mov	r6, r1
 801a4c0:	4615      	mov	r5, r2
 801a4c2:	461f      	mov	r7, r3
 801a4c4:	f7f5 f9c4 	bl	800f850 <is_uxrce_rmw_identifier_valid>
 801a4c8:	f080 0001 	eor.w	r0, r0, #1
 801a4cc:	b2c0      	uxtb	r0, r0
 801a4ce:	2800      	cmp	r0, #0
 801a4d0:	f040 80c8 	bne.w	801a664 <rmw_create_subscription+0x1bc>
 801a4d4:	2d00      	cmp	r5, #0
 801a4d6:	f000 80c5 	beq.w	801a664 <rmw_create_subscription+0x1bc>
 801a4da:	782b      	ldrb	r3, [r5, #0]
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	f000 80c1 	beq.w	801a664 <rmw_create_subscription+0x1bc>
 801a4e2:	2f00      	cmp	r7, #0
 801a4e4:	f000 80be 	beq.w	801a664 <rmw_create_subscription+0x1bc>
 801a4e8:	4867      	ldr	r0, [pc, #412]	; (801a688 <rmw_create_subscription+0x1e0>)
 801a4ea:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801a4ee:	f7ff f8f9 	bl	80196e4 <get_memory>
 801a4f2:	4604      	mov	r4, r0
 801a4f4:	2800      	cmp	r0, #0
 801a4f6:	f000 80b6 	beq.w	801a666 <rmw_create_subscription+0x1be>
 801a4fa:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801a4fe:	f108 0a98 	add.w	sl, r8, #152	; 0x98
 801a502:	f8c8 8080 	str.w	r8, [r8, #128]	; 0x80
 801a506:	f7ff f973 	bl	80197f0 <rmw_get_implementation_identifier>
 801a50a:	f8c8 007c 	str.w	r0, [r8, #124]	; 0x7c
 801a50e:	f8c8 a084 	str.w	sl, [r8, #132]	; 0x84
 801a512:	4628      	mov	r0, r5
 801a514:	f7e5 fef4 	bl	8000300 <strlen>
 801a518:	3001      	adds	r0, #1
 801a51a:	f108 047c 	add.w	r4, r8, #124	; 0x7c
 801a51e:	283c      	cmp	r0, #60	; 0x3c
 801a520:	f200 80a5 	bhi.w	801a66e <rmw_create_subscription+0x1c6>
 801a524:	462b      	mov	r3, r5
 801a526:	4a59      	ldr	r2, [pc, #356]	; (801a68c <rmw_create_subscription+0x1e4>)
 801a528:	213c      	movs	r1, #60	; 0x3c
 801a52a:	4650      	mov	r0, sl
 801a52c:	f003 fa18 	bl	801d960 <sniprintf>
 801a530:	4639      	mov	r1, r7
 801a532:	2250      	movs	r2, #80	; 0x50
 801a534:	f108 0028 	add.w	r0, r8, #40	; 0x28
 801a538:	f8c8 9020 	str.w	r9, [r8, #32]
 801a53c:	f003 fc1b 	bl	801dd76 <memcpy>
 801a540:	4630      	mov	r0, r6
 801a542:	4953      	ldr	r1, [pc, #332]	; (801a690 <rmw_create_subscription+0x1e8>)
 801a544:	f7f5 f992 	bl	800f86c <get_message_typesupport_handle>
 801a548:	2800      	cmp	r0, #0
 801a54a:	f000 8090 	beq.w	801a66e <rmw_create_subscription+0x1c6>
 801a54e:	6842      	ldr	r2, [r0, #4]
 801a550:	f8c8 2018 	str.w	r2, [r8, #24]
 801a554:	2a00      	cmp	r2, #0
 801a556:	f000 808a 	beq.w	801a66e <rmw_create_subscription+0x1c6>
 801a55a:	4629      	mov	r1, r5
 801a55c:	463b      	mov	r3, r7
 801a55e:	4648      	mov	r0, r9
 801a560:	f7ff fb84 	bl	8019c6c <create_topic>
 801a564:	f8c8 001c 	str.w	r0, [r8, #28]
 801a568:	2800      	cmp	r0, #0
 801a56a:	f000 8085 	beq.w	801a678 <rmw_create_subscription+0x1d0>
 801a56e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a572:	2104      	movs	r1, #4
 801a574:	2506      	movs	r5, #6
 801a576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a57a:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 801a57e:	1c42      	adds	r2, r0, #1
 801a580:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 801a584:	f7f7 fd3e 	bl	8012004 <uxr_object_id>
 801a588:	f8c8 0010 	str.w	r0, [r8, #16]
 801a58c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801a590:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 801a594:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a598:	9500      	str	r5, [sp, #0]
 801a59a:	6819      	ldr	r1, [r3, #0]
 801a59c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801a5a0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801a5a4:	f7f7 fbd6 	bl	8011d54 <uxr_buffer_create_subscriber_bin>
 801a5a8:	4602      	mov	r2, r0
 801a5aa:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801a5ae:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801a5b2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801a5b6:	f7f5 f839 	bl	800f62c <run_xrce_session>
 801a5ba:	2800      	cmp	r0, #0
 801a5bc:	d057      	beq.n	801a66e <rmw_create_subscription+0x1c6>
 801a5be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801a5c2:	4629      	mov	r1, r5
 801a5c4:	ae08      	add	r6, sp, #32
 801a5c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a5ca:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 801a5ce:	1c42      	adds	r2, r0, #1
 801a5d0:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 801a5d4:	f7f7 fd16 	bl	8012004 <uxr_object_id>
 801a5d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801a5dc:	f8d8 301c 	ldr.w	r3, [r8, #28]
 801a5e0:	4639      	mov	r1, r7
 801a5e2:	f8c8 0014 	str.w	r0, [r8, #20]
 801a5e6:	4630      	mov	r0, r6
 801a5e8:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 801a5ec:	9305      	str	r3, [sp, #20]
 801a5ee:	f7f5 f839 	bl	800f664 <convert_qos_profile>
 801a5f2:	9503      	str	r5, [sp, #12]
 801a5f4:	9b05      	ldr	r3, [sp, #20]
 801a5f6:	e896 0003 	ldmia.w	r6, {r0, r1}
 801a5fa:	9001      	str	r0, [sp, #4]
 801a5fc:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 801a600:	f8ad 1008 	strh.w	r1, [sp, #8]
 801a604:	691b      	ldr	r3, [r3, #16]
 801a606:	9300      	str	r3, [sp, #0]
 801a608:	f8db 1000 	ldr.w	r1, [fp]
 801a60c:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 801a610:	f7f7 fc46 	bl	8011ea0 <uxr_buffer_create_datareader_bin>
 801a614:	4602      	mov	r2, r0
 801a616:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801a61a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801a61e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801a622:	f7f5 f803 	bl	800f62c <run_xrce_session>
 801a626:	b310      	cbz	r0, 801a66e <rmw_create_subscription+0x1c6>
 801a628:	7a3b      	ldrb	r3, [r7, #8]
 801a62a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a62e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801a632:	2b02      	cmp	r3, #2
 801a634:	920a      	str	r2, [sp, #40]	; 0x28
 801a636:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801a63a:	f04f 0200 	mov.w	r2, #0
 801a63e:	bf08      	it	eq
 801a640:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 801a644:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a648:	bf18      	it	ne
 801a64a:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	; 0xd4
 801a64e:	920b      	str	r2, [sp, #44]	; 0x2c
 801a650:	9307      	str	r3, [sp, #28]
 801a652:	ab0a      	add	r3, sp, #40	; 0x28
 801a654:	9300      	str	r3, [sp, #0]
 801a656:	9b07      	ldr	r3, [sp, #28]
 801a658:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801a65c:	6809      	ldr	r1, [r1, #0]
 801a65e:	f001 f99b 	bl	801b998 <uxr_buffer_request_data>
 801a662:	e000      	b.n	801a666 <rmw_create_subscription+0x1be>
 801a664:	2400      	movs	r4, #0
 801a666:	4620      	mov	r0, r4
 801a668:	b00d      	add	sp, #52	; 0x34
 801a66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a66e:	f8d8 001c 	ldr.w	r0, [r8, #28]
 801a672:	b108      	cbz	r0, 801a678 <rmw_create_subscription+0x1d0>
 801a674:	f7f4 fecc 	bl	800f410 <rmw_uxrce_fini_topic_memory>
 801a678:	4620      	mov	r0, r4
 801a67a:	2400      	movs	r4, #0
 801a67c:	f7f4 fe86 	bl	800f38c <rmw_uxrce_fini_subscription_memory>
 801a680:	4620      	mov	r0, r4
 801a682:	b00d      	add	sp, #52	; 0x34
 801a684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a688:	200104fc 	.word	0x200104fc
 801a68c:	0801fb7c 	.word	0x0801fb7c
 801a690:	0801ed14 	.word	0x0801ed14

0801a694 <rmw_subscription_get_actual_qos>:
 801a694:	b178      	cbz	r0, 801a6b6 <rmw_subscription_get_actual_qos+0x22>
 801a696:	b510      	push	{r4, lr}
 801a698:	fab1 f481 	clz	r4, r1
 801a69c:	0964      	lsrs	r4, r4, #5
 801a69e:	b141      	cbz	r1, 801a6b2 <rmw_subscription_get_actual_qos+0x1e>
 801a6a0:	6843      	ldr	r3, [r0, #4]
 801a6a2:	2250      	movs	r2, #80	; 0x50
 801a6a4:	4608      	mov	r0, r1
 801a6a6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801a6aa:	f003 fb64 	bl	801dd76 <memcpy>
 801a6ae:	4620      	mov	r0, r4
 801a6b0:	bd10      	pop	{r4, pc}
 801a6b2:	200b      	movs	r0, #11
 801a6b4:	bd10      	pop	{r4, pc}
 801a6b6:	200b      	movs	r0, #11
 801a6b8:	4770      	bx	lr
 801a6ba:	bf00      	nop

0801a6bc <rmw_destroy_subscription>:
 801a6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a6c0:	b128      	cbz	r0, 801a6ce <rmw_destroy_subscription+0x12>
 801a6c2:	4604      	mov	r4, r0
 801a6c4:	6800      	ldr	r0, [r0, #0]
 801a6c6:	460d      	mov	r5, r1
 801a6c8:	f7f5 f8c2 	bl	800f850 <is_uxrce_rmw_identifier_valid>
 801a6cc:	b918      	cbnz	r0, 801a6d6 <rmw_destroy_subscription+0x1a>
 801a6ce:	2401      	movs	r4, #1
 801a6d0:	4620      	mov	r0, r4
 801a6d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6d6:	6863      	ldr	r3, [r4, #4]
 801a6d8:	2b00      	cmp	r3, #0
 801a6da:	d0f8      	beq.n	801a6ce <rmw_destroy_subscription+0x12>
 801a6dc:	fab5 f485 	clz	r4, r5
 801a6e0:	0964      	lsrs	r4, r4, #5
 801a6e2:	2d00      	cmp	r5, #0
 801a6e4:	d0f3      	beq.n	801a6ce <rmw_destroy_subscription+0x12>
 801a6e6:	6828      	ldr	r0, [r5, #0]
 801a6e8:	f7f5 f8b2 	bl	800f850 <is_uxrce_rmw_identifier_valid>
 801a6ec:	2800      	cmp	r0, #0
 801a6ee:	d0ee      	beq.n	801a6ce <rmw_destroy_subscription+0x12>
 801a6f0:	686e      	ldr	r6, [r5, #4]
 801a6f2:	2e00      	cmp	r6, #0
 801a6f4:	d0eb      	beq.n	801a6ce <rmw_destroy_subscription+0x12>
 801a6f6:	6a37      	ldr	r7, [r6, #32]
 801a6f8:	6972      	ldr	r2, [r6, #20]
 801a6fa:	6938      	ldr	r0, [r7, #16]
 801a6fc:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a700:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a704:	6819      	ldr	r1, [r3, #0]
 801a706:	f001 f981 	bl	801ba0c <uxr_buffer_cancel_data>
 801a70a:	4602      	mov	r2, r0
 801a70c:	6938      	ldr	r0, [r7, #16]
 801a70e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801a712:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801a716:	f7f4 ff89 	bl	800f62c <run_xrce_session>
 801a71a:	69f0      	ldr	r0, [r6, #28]
 801a71c:	f7ff faf6 	bl	8019d0c <destroy_topic>
 801a720:	6a33      	ldr	r3, [r6, #32]
 801a722:	6972      	ldr	r2, [r6, #20]
 801a724:	6918      	ldr	r0, [r3, #16]
 801a726:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a72a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a72e:	6819      	ldr	r1, [r3, #0]
 801a730:	f7f7 fa2c 	bl	8011b8c <uxr_buffer_delete_entity>
 801a734:	6a33      	ldr	r3, [r6, #32]
 801a736:	4680      	mov	r8, r0
 801a738:	6932      	ldr	r2, [r6, #16]
 801a73a:	6918      	ldr	r0, [r3, #16]
 801a73c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a740:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a744:	6819      	ldr	r1, [r3, #0]
 801a746:	f7f7 fa21 	bl	8011b8c <uxr_buffer_delete_entity>
 801a74a:	4606      	mov	r6, r0
 801a74c:	6938      	ldr	r0, [r7, #16]
 801a74e:	4642      	mov	r2, r8
 801a750:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801a754:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801a758:	f7f4 ff68 	bl	800f62c <run_xrce_session>
 801a75c:	693f      	ldr	r7, [r7, #16]
 801a75e:	4632      	mov	r2, r6
 801a760:	4606      	mov	r6, r0
 801a762:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 801a766:	4638      	mov	r0, r7
 801a768:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 801a76c:	f7f4 ff5e 	bl	800f62c <run_xrce_session>
 801a770:	b126      	cbz	r6, 801a77c <rmw_destroy_subscription+0xc0>
 801a772:	b118      	cbz	r0, 801a77c <rmw_destroy_subscription+0xc0>
 801a774:	4628      	mov	r0, r5
 801a776:	f7f4 fe09 	bl	800f38c <rmw_uxrce_fini_subscription_memory>
 801a77a:	e7a9      	b.n	801a6d0 <rmw_destroy_subscription+0x14>
 801a77c:	2402      	movs	r4, #2
 801a77e:	e7f9      	b.n	801a774 <rmw_destroy_subscription+0xb8>

0801a780 <rmw_take_with_info>:
 801a780:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a782:	4604      	mov	r4, r0
 801a784:	6800      	ldr	r0, [r0, #0]
 801a786:	b089      	sub	sp, #36	; 0x24
 801a788:	460f      	mov	r7, r1
 801a78a:	4615      	mov	r5, r2
 801a78c:	b128      	cbz	r0, 801a79a <rmw_take_with_info+0x1a>
 801a78e:	4b24      	ldr	r3, [pc, #144]	; (801a820 <rmw_take_with_info+0xa0>)
 801a790:	6819      	ldr	r1, [r3, #0]
 801a792:	f7e5 fd55 	bl	8000240 <strcmp>
 801a796:	2800      	cmp	r0, #0
 801a798:	d13e      	bne.n	801a818 <rmw_take_with_info+0x98>
 801a79a:	b305      	cbz	r5, 801a7de <rmw_take_with_info+0x5e>
 801a79c:	2300      	movs	r3, #0
 801a79e:	6864      	ldr	r4, [r4, #4]
 801a7a0:	702b      	strb	r3, [r5, #0]
 801a7a2:	f7f4 fec5 	bl	800f530 <rmw_uxrce_clean_expired_static_input_buffer>
 801a7a6:	4620      	mov	r0, r4
 801a7a8:	f7f4 fe98 	bl	800f4dc <rmw_uxrce_find_static_input_buffer_by_owner>
 801a7ac:	4606      	mov	r6, r0
 801a7ae:	b1f0      	cbz	r0, 801a7ee <rmw_take_with_info+0x6e>
 801a7b0:	6881      	ldr	r1, [r0, #8]
 801a7b2:	4668      	mov	r0, sp
 801a7b4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 801a7b8:	3110      	adds	r1, #16
 801a7ba:	f7f7 f973 	bl	8011aa4 <ucdr_init_buffer>
 801a7be:	69a3      	ldr	r3, [r4, #24]
 801a7c0:	4639      	mov	r1, r7
 801a7c2:	4668      	mov	r0, sp
 801a7c4:	68db      	ldr	r3, [r3, #12]
 801a7c6:	4798      	blx	r3
 801a7c8:	4604      	mov	r4, r0
 801a7ca:	4631      	mov	r1, r6
 801a7cc:	4815      	ldr	r0, [pc, #84]	; (801a824 <rmw_take_with_info+0xa4>)
 801a7ce:	f7fe ff99 	bl	8019704 <put_memory>
 801a7d2:	702c      	strb	r4, [r5, #0]
 801a7d4:	f084 0001 	eor.w	r0, r4, #1
 801a7d8:	b2c0      	uxtb	r0, r0
 801a7da:	b009      	add	sp, #36	; 0x24
 801a7dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a7de:	6864      	ldr	r4, [r4, #4]
 801a7e0:	f7f4 fea6 	bl	800f530 <rmw_uxrce_clean_expired_static_input_buffer>
 801a7e4:	4620      	mov	r0, r4
 801a7e6:	f7f4 fe79 	bl	800f4dc <rmw_uxrce_find_static_input_buffer_by_owner>
 801a7ea:	4605      	mov	r5, r0
 801a7ec:	b910      	cbnz	r0, 801a7f4 <rmw_take_with_info+0x74>
 801a7ee:	2001      	movs	r0, #1
 801a7f0:	b009      	add	sp, #36	; 0x24
 801a7f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a7f4:	68a9      	ldr	r1, [r5, #8]
 801a7f6:	4668      	mov	r0, sp
 801a7f8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 801a7fc:	3110      	adds	r1, #16
 801a7fe:	f7f7 f951 	bl	8011aa4 <ucdr_init_buffer>
 801a802:	69a3      	ldr	r3, [r4, #24]
 801a804:	4639      	mov	r1, r7
 801a806:	4668      	mov	r0, sp
 801a808:	68db      	ldr	r3, [r3, #12]
 801a80a:	4798      	blx	r3
 801a80c:	4629      	mov	r1, r5
 801a80e:	4604      	mov	r4, r0
 801a810:	4804      	ldr	r0, [pc, #16]	; (801a824 <rmw_take_with_info+0xa4>)
 801a812:	f7fe ff77 	bl	8019704 <put_memory>
 801a816:	e7dd      	b.n	801a7d4 <rmw_take_with_info+0x54>
 801a818:	200c      	movs	r0, #12
 801a81a:	b009      	add	sp, #36	; 0x24
 801a81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a81e:	bf00      	nop
 801a820:	080206c8 	.word	0x080206c8
 801a824:	200104ec 	.word	0x200104ec

0801a828 <rmw_uxrce_transport_init>:
 801a828:	b508      	push	{r3, lr}
 801a82a:	b108      	cbz	r0, 801a830 <rmw_uxrce_transport_init+0x8>
 801a82c:	f100 0210 	add.w	r2, r0, #16
 801a830:	b139      	cbz	r1, 801a842 <rmw_uxrce_transport_init+0x1a>
 801a832:	6949      	ldr	r1, [r1, #20]
 801a834:	4610      	mov	r0, r2
 801a836:	f000 fb2b 	bl	801ae90 <uxr_init_custom_transport>
 801a83a:	f080 0001 	eor.w	r0, r0, #1
 801a83e:	b2c0      	uxtb	r0, r0
 801a840:	bd08      	pop	{r3, pc}
 801a842:	4b04      	ldr	r3, [pc, #16]	; (801a854 <rmw_uxrce_transport_init+0x2c>)
 801a844:	4610      	mov	r0, r2
 801a846:	6859      	ldr	r1, [r3, #4]
 801a848:	f000 fb22 	bl	801ae90 <uxr_init_custom_transport>
 801a84c:	f080 0001 	eor.w	r0, r0, #1
 801a850:	b2c0      	uxtb	r0, r0
 801a852:	bd08      	pop	{r3, pc}
 801a854:	2000bafc 	.word	0x2000bafc

0801a858 <rmw_wait>:
 801a858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a85c:	4698      	mov	r8, r3
 801a85e:	ea40 0301 	orr.w	r3, r0, r1
 801a862:	b089      	sub	sp, #36	; 0x24
 801a864:	ea48 0303 	orr.w	r3, r8, r3
 801a868:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a86a:	4313      	orrs	r3, r2
 801a86c:	f000 8106 	beq.w	801aa7c <rmw_wait+0x224>
 801a870:	4605      	mov	r5, r0
 801a872:	460e      	mov	r6, r1
 801a874:	4691      	mov	r9, r2
 801a876:	b16c      	cbz	r4, 801a894 <rmw_wait+0x3c>
 801a878:	4ba6      	ldr	r3, [pc, #664]	; (801ab14 <rmw_wait+0x2bc>)
 801a87a:	af04      	add	r7, sp, #16
 801a87c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a87e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801a882:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801a886:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801a88a:	f7fe fd4d 	bl	8019328 <rmw_time_equal>
 801a88e:	2800      	cmp	r0, #0
 801a890:	f000 810b 	beq.w	801aaaa <rmw_wait+0x252>
 801a894:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a898:	f7f4 fe4a 	bl	800f530 <rmw_uxrce_clean_expired_static_input_buffer>
 801a89c:	4b9e      	ldr	r3, [pc, #632]	; (801ab18 <rmw_wait+0x2c0>)
 801a89e:	681c      	ldr	r4, [r3, #0]
 801a8a0:	b14c      	cbz	r4, 801a8b6 <rmw_wait+0x5e>
 801a8a2:	4623      	mov	r3, r4
 801a8a4:	2100      	movs	r1, #0
 801a8a6:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801a8aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a8ae:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 801a8b2:	2b00      	cmp	r3, #0
 801a8b4:	d1f7      	bne.n	801a8a6 <rmw_wait+0x4e>
 801a8b6:	f1b9 0f00 	cmp.w	r9, #0
 801a8ba:	d011      	beq.n	801a8e0 <rmw_wait+0x88>
 801a8bc:	f8d9 1000 	ldr.w	r1, [r9]
 801a8c0:	b171      	cbz	r1, 801a8e0 <rmw_wait+0x88>
 801a8c2:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801a8c6:	2300      	movs	r3, #0
 801a8c8:	2001      	movs	r0, #1
 801a8ca:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a8ce:	3301      	adds	r3, #1
 801a8d0:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801a8d2:	4299      	cmp	r1, r3
 801a8d4:	6912      	ldr	r2, [r2, #16]
 801a8d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a8da:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801a8de:	d1f4      	bne.n	801a8ca <rmw_wait+0x72>
 801a8e0:	f1b8 0f00 	cmp.w	r8, #0
 801a8e4:	d011      	beq.n	801a90a <rmw_wait+0xb2>
 801a8e6:	f8d8 1000 	ldr.w	r1, [r8]
 801a8ea:	b171      	cbz	r1, 801a90a <rmw_wait+0xb2>
 801a8ec:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801a8f0:	2300      	movs	r3, #0
 801a8f2:	2001      	movs	r0, #1
 801a8f4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a8f8:	3301      	adds	r3, #1
 801a8fa:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801a8fc:	4299      	cmp	r1, r3
 801a8fe:	6912      	ldr	r2, [r2, #16]
 801a900:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a904:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801a908:	d1f4      	bne.n	801a8f4 <rmw_wait+0x9c>
 801a90a:	b185      	cbz	r5, 801a92e <rmw_wait+0xd6>
 801a90c:	6829      	ldr	r1, [r5, #0]
 801a90e:	b171      	cbz	r1, 801a92e <rmw_wait+0xd6>
 801a910:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801a914:	2300      	movs	r3, #0
 801a916:	2001      	movs	r0, #1
 801a918:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a91c:	3301      	adds	r3, #1
 801a91e:	6a12      	ldr	r2, [r2, #32]
 801a920:	4299      	cmp	r1, r3
 801a922:	6912      	ldr	r2, [r2, #16]
 801a924:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a928:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801a92c:	d1f4      	bne.n	801a918 <rmw_wait+0xc0>
 801a92e:	b344      	cbz	r4, 801a982 <rmw_wait+0x12a>
 801a930:	4622      	mov	r2, r4
 801a932:	2300      	movs	r3, #0
 801a934:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801a938:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 801a93c:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 801a940:	440b      	add	r3, r1
 801a942:	b2db      	uxtb	r3, r3
 801a944:	2a00      	cmp	r2, #0
 801a946:	d1f5      	bne.n	801a934 <rmw_wait+0xdc>
 801a948:	2b00      	cmp	r3, #0
 801a94a:	d05f      	beq.n	801aa0c <rmw_wait+0x1b4>
 801a94c:	1c7a      	adds	r2, r7, #1
 801a94e:	d00d      	beq.n	801a96c <rmw_wait+0x114>
 801a950:	ee07 7a90 	vmov	s15, r7
 801a954:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801a958:	ee07 3a90 	vmov	s15, r3
 801a95c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a960:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801a964:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801a968:	ee17 7a90 	vmov	r7, s15
 801a96c:	68a0      	ldr	r0, [r4, #8]
 801a96e:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 801a972:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 801a976:	2b00      	cmp	r3, #0
 801a978:	f040 808d 	bne.w	801aa96 <rmw_wait+0x23e>
 801a97c:	6864      	ldr	r4, [r4, #4]
 801a97e:	2c00      	cmp	r4, #0
 801a980:	d1f4      	bne.n	801a96c <rmw_wait+0x114>
 801a982:	f1b9 0f00 	cmp.w	r9, #0
 801a986:	f000 80a1 	beq.w	801aacc <rmw_wait+0x274>
 801a98a:	f8d9 7000 	ldr.w	r7, [r9]
 801a98e:	2f00      	cmp	r7, #0
 801a990:	f000 80a4 	beq.w	801aadc <rmw_wait+0x284>
 801a994:	2400      	movs	r4, #0
 801a996:	4627      	mov	r7, r4
 801a998:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801a99c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a9a0:	f7f4 fd9c 	bl	800f4dc <rmw_uxrce_find_static_input_buffer_by_owner>
 801a9a4:	2800      	cmp	r0, #0
 801a9a6:	d03b      	beq.n	801aa20 <rmw_wait+0x1c8>
 801a9a8:	3401      	adds	r4, #1
 801a9aa:	f8d9 3000 	ldr.w	r3, [r9]
 801a9ae:	2701      	movs	r7, #1
 801a9b0:	42a3      	cmp	r3, r4
 801a9b2:	d8f1      	bhi.n	801a998 <rmw_wait+0x140>
 801a9b4:	2701      	movs	r7, #1
 801a9b6:	f1b8 0f00 	cmp.w	r8, #0
 801a9ba:	d010      	beq.n	801a9de <rmw_wait+0x186>
 801a9bc:	f8d8 3000 	ldr.w	r3, [r8]
 801a9c0:	b16b      	cbz	r3, 801a9de <rmw_wait+0x186>
 801a9c2:	2400      	movs	r4, #0
 801a9c4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801a9c8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a9cc:	f7f4 fd86 	bl	800f4dc <rmw_uxrce_find_static_input_buffer_by_owner>
 801a9d0:	b370      	cbz	r0, 801aa30 <rmw_wait+0x1d8>
 801a9d2:	3401      	adds	r4, #1
 801a9d4:	f8d8 3000 	ldr.w	r3, [r8]
 801a9d8:	2701      	movs	r7, #1
 801a9da:	42a3      	cmp	r3, r4
 801a9dc:	d8f2      	bhi.n	801a9c4 <rmw_wait+0x16c>
 801a9de:	2d00      	cmp	r5, #0
 801a9e0:	d035      	beq.n	801aa4e <rmw_wait+0x1f6>
 801a9e2:	682b      	ldr	r3, [r5, #0]
 801a9e4:	b39b      	cbz	r3, 801aa4e <rmw_wait+0x1f6>
 801a9e6:	2400      	movs	r4, #0
 801a9e8:	686b      	ldr	r3, [r5, #4]
 801a9ea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a9ee:	f7f4 fd75 	bl	800f4dc <rmw_uxrce_find_static_input_buffer_by_owner>
 801a9f2:	b328      	cbz	r0, 801aa40 <rmw_wait+0x1e8>
 801a9f4:	3401      	adds	r4, #1
 801a9f6:	682b      	ldr	r3, [r5, #0]
 801a9f8:	2701      	movs	r7, #1
 801a9fa:	42a3      	cmp	r3, r4
 801a9fc:	d8f4      	bhi.n	801a9e8 <rmw_wait+0x190>
 801a9fe:	2e00      	cmp	r6, #0
 801aa00:	d03c      	beq.n	801aa7c <rmw_wait+0x224>
 801aa02:	6834      	ldr	r4, [r6, #0]
 801aa04:	2c00      	cmp	r4, #0
 801aa06:	d039      	beq.n	801aa7c <rmw_wait+0x224>
 801aa08:	2701      	movs	r7, #1
 801aa0a:	e023      	b.n	801aa54 <rmw_wait+0x1fc>
 801aa0c:	68a0      	ldr	r0, [r4, #8]
 801aa0e:	2100      	movs	r1, #0
 801aa10:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801aa14:	f7f7 ffc6 	bl	80129a4 <uxr_run_session_timeout>
 801aa18:	6864      	ldr	r4, [r4, #4]
 801aa1a:	2c00      	cmp	r4, #0
 801aa1c:	d1f6      	bne.n	801aa0c <rmw_wait+0x1b4>
 801aa1e:	e7b0      	b.n	801a982 <rmw_wait+0x12a>
 801aa20:	e9d9 3200 	ldrd	r3, r2, [r9]
 801aa24:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801aa28:	3401      	adds	r4, #1
 801aa2a:	42a3      	cmp	r3, r4
 801aa2c:	d8b4      	bhi.n	801a998 <rmw_wait+0x140>
 801aa2e:	e7c2      	b.n	801a9b6 <rmw_wait+0x15e>
 801aa30:	e9d8 3200 	ldrd	r3, r2, [r8]
 801aa34:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801aa38:	3401      	adds	r4, #1
 801aa3a:	429c      	cmp	r4, r3
 801aa3c:	d3c2      	bcc.n	801a9c4 <rmw_wait+0x16c>
 801aa3e:	e7ce      	b.n	801a9de <rmw_wait+0x186>
 801aa40:	e9d5 3200 	ldrd	r3, r2, [r5]
 801aa44:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801aa48:	3401      	adds	r4, #1
 801aa4a:	42a3      	cmp	r3, r4
 801aa4c:	d8cc      	bhi.n	801a9e8 <rmw_wait+0x190>
 801aa4e:	b1a6      	cbz	r6, 801aa7a <rmw_wait+0x222>
 801aa50:	6834      	ldr	r4, [r6, #0]
 801aa52:	b194      	cbz	r4, 801aa7a <rmw_wait+0x222>
 801aa54:	2300      	movs	r3, #0
 801aa56:	461d      	mov	r5, r3
 801aa58:	e004      	b.n	801aa64 <rmw_wait+0x20c>
 801aa5a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801aa5e:	3301      	adds	r3, #1
 801aa60:	42a3      	cmp	r3, r4
 801aa62:	d00a      	beq.n	801aa7a <rmw_wait+0x222>
 801aa64:	6870      	ldr	r0, [r6, #4]
 801aa66:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801aa6a:	7c0a      	ldrb	r2, [r1, #16]
 801aa6c:	2a00      	cmp	r2, #0
 801aa6e:	d0f4      	beq.n	801aa5a <rmw_wait+0x202>
 801aa70:	3301      	adds	r3, #1
 801aa72:	4617      	mov	r7, r2
 801aa74:	740d      	strb	r5, [r1, #16]
 801aa76:	42a3      	cmp	r3, r4
 801aa78:	d1f4      	bne.n	801aa64 <rmw_wait+0x20c>
 801aa7a:	b147      	cbz	r7, 801aa8e <rmw_wait+0x236>
 801aa7c:	2000      	movs	r0, #0
 801aa7e:	b009      	add	sp, #36	; 0x24
 801aa80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aa84:	b11e      	cbz	r6, 801aa8e <rmw_wait+0x236>
 801aa86:	6834      	ldr	r4, [r6, #0]
 801aa88:	462f      	mov	r7, r5
 801aa8a:	2c00      	cmp	r4, #0
 801aa8c:	d1e2      	bne.n	801aa54 <rmw_wait+0x1fc>
 801aa8e:	2002      	movs	r0, #2
 801aa90:	b009      	add	sp, #36	; 0x24
 801aa92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aa96:	4639      	mov	r1, r7
 801aa98:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801aa9c:	f7f7 ff9c 	bl	80129d8 <uxr_run_session_until_data>
 801aaa0:	6864      	ldr	r4, [r4, #4]
 801aaa2:	2c00      	cmp	r4, #0
 801aaa4:	f47f af62 	bne.w	801a96c <rmw_wait+0x114>
 801aaa8:	e76b      	b.n	801a982 <rmw_wait+0x12a>
 801aaaa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801aaae:	f7fe fc91 	bl	80193d4 <rmw_time_total_nsec>
 801aab2:	2300      	movs	r3, #0
 801aab4:	4a19      	ldr	r2, [pc, #100]	; (801ab1c <rmw_wait+0x2c4>)
 801aab6:	f7e5 fc7b 	bl	80003b0 <__aeabi_uldivmod>
 801aaba:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 801aabe:	4607      	mov	r7, r0
 801aac0:	f171 0300 	sbcs.w	r3, r1, #0
 801aac4:	bfa8      	it	ge
 801aac6:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 801aaca:	e6e5      	b.n	801a898 <rmw_wait+0x40>
 801aacc:	f1b8 0f00 	cmp.w	r8, #0
 801aad0:	d00f      	beq.n	801aaf2 <rmw_wait+0x29a>
 801aad2:	f8d8 3000 	ldr.w	r3, [r8]
 801aad6:	b193      	cbz	r3, 801aafe <rmw_wait+0x2a6>
 801aad8:	464f      	mov	r7, r9
 801aada:	e772      	b.n	801a9c2 <rmw_wait+0x16a>
 801aadc:	f1b8 0f00 	cmp.w	r8, #0
 801aae0:	d007      	beq.n	801aaf2 <rmw_wait+0x29a>
 801aae2:	f8d8 3000 	ldr.w	r3, [r8]
 801aae6:	2b00      	cmp	r3, #0
 801aae8:	f47f af6b 	bne.w	801a9c2 <rmw_wait+0x16a>
 801aaec:	b155      	cbz	r5, 801ab04 <rmw_wait+0x2ac>
 801aaee:	461f      	mov	r7, r3
 801aaf0:	e777      	b.n	801a9e2 <rmw_wait+0x18a>
 801aaf2:	2d00      	cmp	r5, #0
 801aaf4:	d0c6      	beq.n	801aa84 <rmw_wait+0x22c>
 801aaf6:	682b      	ldr	r3, [r5, #0]
 801aaf8:	b143      	cbz	r3, 801ab0c <rmw_wait+0x2b4>
 801aafa:	4647      	mov	r7, r8
 801aafc:	e773      	b.n	801a9e6 <rmw_wait+0x18e>
 801aafe:	b10d      	cbz	r5, 801ab04 <rmw_wait+0x2ac>
 801ab00:	464f      	mov	r7, r9
 801ab02:	e76e      	b.n	801a9e2 <rmw_wait+0x18a>
 801ab04:	462f      	mov	r7, r5
 801ab06:	2e00      	cmp	r6, #0
 801ab08:	d1a2      	bne.n	801aa50 <rmw_wait+0x1f8>
 801ab0a:	e7c0      	b.n	801aa8e <rmw_wait+0x236>
 801ab0c:	4647      	mov	r7, r8
 801ab0e:	2e00      	cmp	r6, #0
 801ab10:	d19e      	bne.n	801aa50 <rmw_wait+0x1f8>
 801ab12:	e7bc      	b.n	801aa8e <rmw_wait+0x236>
 801ab14:	0801ebc8 	.word	0x0801ebc8
 801ab18:	200104dc 	.word	0x200104dc
 801ab1c:	000f4240 	.word	0x000f4240

0801ab20 <rmw_create_wait_set>:
 801ab20:	b508      	push	{r3, lr}
 801ab22:	4803      	ldr	r0, [pc, #12]	; (801ab30 <rmw_create_wait_set+0x10>)
 801ab24:	f7fe fdde 	bl	80196e4 <get_memory>
 801ab28:	b108      	cbz	r0, 801ab2e <rmw_create_wait_set+0xe>
 801ab2a:	6880      	ldr	r0, [r0, #8]
 801ab2c:	3010      	adds	r0, #16
 801ab2e:	bd08      	pop	{r3, pc}
 801ab30:	2001051c 	.word	0x2001051c

0801ab34 <rmw_destroy_wait_set>:
 801ab34:	b508      	push	{r3, lr}
 801ab36:	4b08      	ldr	r3, [pc, #32]	; (801ab58 <rmw_destroy_wait_set+0x24>)
 801ab38:	6819      	ldr	r1, [r3, #0]
 801ab3a:	b911      	cbnz	r1, 801ab42 <rmw_destroy_wait_set+0xe>
 801ab3c:	e00a      	b.n	801ab54 <rmw_destroy_wait_set+0x20>
 801ab3e:	6849      	ldr	r1, [r1, #4]
 801ab40:	b141      	cbz	r1, 801ab54 <rmw_destroy_wait_set+0x20>
 801ab42:	688b      	ldr	r3, [r1, #8]
 801ab44:	3310      	adds	r3, #16
 801ab46:	4298      	cmp	r0, r3
 801ab48:	d1f9      	bne.n	801ab3e <rmw_destroy_wait_set+0xa>
 801ab4a:	4803      	ldr	r0, [pc, #12]	; (801ab58 <rmw_destroy_wait_set+0x24>)
 801ab4c:	f7fe fdda 	bl	8019704 <put_memory>
 801ab50:	2000      	movs	r0, #0
 801ab52:	bd08      	pop	{r3, pc}
 801ab54:	2001      	movs	r0, #1
 801ab56:	bd08      	pop	{r3, pc}
 801ab58:	2001051c 	.word	0x2001051c

0801ab5c <rmw_uros_epoch_nanos>:
 801ab5c:	4b05      	ldr	r3, [pc, #20]	; (801ab74 <rmw_uros_epoch_nanos+0x18>)
 801ab5e:	681b      	ldr	r3, [r3, #0]
 801ab60:	b123      	cbz	r3, 801ab6c <rmw_uros_epoch_nanos+0x10>
 801ab62:	6898      	ldr	r0, [r3, #8]
 801ab64:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801ab68:	f7f7 bb92 	b.w	8012290 <uxr_epoch_nanos>
 801ab6c:	2000      	movs	r0, #0
 801ab6e:	2100      	movs	r1, #0
 801ab70:	4770      	bx	lr
 801ab72:	bf00      	nop
 801ab74:	200104dc 	.word	0x200104dc

0801ab78 <service_msgs__msg__ServiceEventInfo__get_type_hash>:
 801ab78:	4800      	ldr	r0, [pc, #0]	; (801ab7c <service_msgs__msg__ServiceEventInfo__get_type_hash+0x4>)
 801ab7a:	4770      	bx	lr
 801ab7c:	20001ca0 	.word	0x20001ca0

0801ab80 <service_msgs__msg__ServiceEventInfo__get_type_description>:
 801ab80:	b510      	push	{r4, lr}
 801ab82:	4c08      	ldr	r4, [pc, #32]	; (801aba4 <service_msgs__msg__ServiceEventInfo__get_type_description+0x24>)
 801ab84:	7820      	ldrb	r0, [r4, #0]
 801ab86:	b108      	cbz	r0, 801ab8c <service_msgs__msg__ServiceEventInfo__get_type_description+0xc>
 801ab88:	4807      	ldr	r0, [pc, #28]	; (801aba8 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 801ab8a:	bd10      	pop	{r4, pc}
 801ab8c:	f000 f858 	bl	801ac40 <builtin_interfaces__msg__Time__get_type_description>
 801ab90:	300c      	adds	r0, #12
 801ab92:	4b06      	ldr	r3, [pc, #24]	; (801abac <service_msgs__msg__ServiceEventInfo__get_type_description+0x2c>)
 801ab94:	c807      	ldmia	r0, {r0, r1, r2}
 801ab96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801ab9a:	2301      	movs	r3, #1
 801ab9c:	4802      	ldr	r0, [pc, #8]	; (801aba8 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 801ab9e:	7023      	strb	r3, [r4, #0]
 801aba0:	bd10      	pop	{r4, pc}
 801aba2:	bf00      	nop
 801aba4:	20010ca1 	.word	0x20010ca1
 801aba8:	080206cc 	.word	0x080206cc
 801abac:	20001e24 	.word	0x20001e24

0801abb0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>:
 801abb0:	4800      	ldr	r0, [pc, #0]	; (801abb4 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source+0x4>)
 801abb2:	4770      	bx	lr
 801abb4:	080206f0 	.word	0x080206f0

0801abb8 <service_msgs__msg__ServiceEventInfo__get_type_description_sources>:
 801abb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801abba:	4e0f      	ldr	r6, [pc, #60]	; (801abf8 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x40>)
 801abbc:	7837      	ldrb	r7, [r6, #0]
 801abbe:	b10f      	cbz	r7, 801abc4 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0xc>
 801abc0:	480e      	ldr	r0, [pc, #56]	; (801abfc <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 801abc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801abc4:	4d0e      	ldr	r5, [pc, #56]	; (801ac00 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x48>)
 801abc6:	4c0f      	ldr	r4, [pc, #60]	; (801ac04 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x4c>)
 801abc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801abca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801abcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801abce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801abd0:	682b      	ldr	r3, [r5, #0]
 801abd2:	4638      	mov	r0, r7
 801abd4:	f844 3b04 	str.w	r3, [r4], #4
 801abd8:	f000 f83e 	bl	801ac58 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801abdc:	2301      	movs	r3, #1
 801abde:	4684      	mov	ip, r0
 801abe0:	7033      	strb	r3, [r6, #0]
 801abe2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801abe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801abe8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801abec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801abee:	f8dc 3000 	ldr.w	r3, [ip]
 801abf2:	4802      	ldr	r0, [pc, #8]	; (801abfc <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 801abf4:	6023      	str	r3, [r4, #0]
 801abf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801abf8:	20010ca0 	.word	0x20010ca0
 801abfc:	08020714 	.word	0x08020714
 801ac00:	080206f0 	.word	0x080206f0
 801ac04:	20010ca4 	.word	0x20010ca4

0801ac08 <service_msgs__msg__ServiceEventInfo__init>:
 801ac08:	b538      	push	{r3, r4, r5, lr}
 801ac0a:	b138      	cbz	r0, 801ac1c <service_msgs__msg__ServiceEventInfo__init+0x14>
 801ac0c:	1d05      	adds	r5, r0, #4
 801ac0e:	4628      	mov	r0, r5
 801ac10:	f000 f842 	bl	801ac98 <builtin_interfaces__msg__Time__init>
 801ac14:	4604      	mov	r4, r0
 801ac16:	b120      	cbz	r0, 801ac22 <service_msgs__msg__ServiceEventInfo__init+0x1a>
 801ac18:	4620      	mov	r0, r4
 801ac1a:	bd38      	pop	{r3, r4, r5, pc}
 801ac1c:	4604      	mov	r4, r0
 801ac1e:	4620      	mov	r0, r4
 801ac20:	bd38      	pop	{r3, r4, r5, pc}
 801ac22:	4628      	mov	r0, r5
 801ac24:	f000 f83c 	bl	801aca0 <builtin_interfaces__msg__Time__fini>
 801ac28:	4620      	mov	r0, r4
 801ac2a:	bd38      	pop	{r3, r4, r5, pc}

0801ac2c <service_msgs__msg__ServiceEventInfo__fini>:
 801ac2c:	b110      	cbz	r0, 801ac34 <service_msgs__msg__ServiceEventInfo__fini+0x8>
 801ac2e:	3004      	adds	r0, #4
 801ac30:	f000 b836 	b.w	801aca0 <builtin_interfaces__msg__Time__fini>
 801ac34:	4770      	bx	lr
 801ac36:	bf00      	nop

0801ac38 <builtin_interfaces__msg__Time__get_type_hash>:
 801ac38:	4800      	ldr	r0, [pc, #0]	; (801ac3c <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 801ac3a:	4770      	bx	lr
 801ac3c:	200021c0 	.word	0x200021c0

0801ac40 <builtin_interfaces__msg__Time__get_type_description>:
 801ac40:	4b03      	ldr	r3, [pc, #12]	; (801ac50 <builtin_interfaces__msg__Time__get_type_description+0x10>)
 801ac42:	781a      	ldrb	r2, [r3, #0]
 801ac44:	b90a      	cbnz	r2, 801ac4a <builtin_interfaces__msg__Time__get_type_description+0xa>
 801ac46:	2201      	movs	r2, #1
 801ac48:	701a      	strb	r2, [r3, #0]
 801ac4a:	4802      	ldr	r0, [pc, #8]	; (801ac54 <builtin_interfaces__msg__Time__get_type_description+0x14>)
 801ac4c:	4770      	bx	lr
 801ac4e:	bf00      	nop
 801ac50:	20010ced 	.word	0x20010ced
 801ac54:	08020720 	.word	0x08020720

0801ac58 <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 801ac58:	4800      	ldr	r0, [pc, #0]	; (801ac5c <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 801ac5a:	4770      	bx	lr
 801ac5c:	08020744 	.word	0x08020744

0801ac60 <builtin_interfaces__msg__Time__get_type_description_sources>:
 801ac60:	4b09      	ldr	r3, [pc, #36]	; (801ac88 <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 801ac62:	781a      	ldrb	r2, [r3, #0]
 801ac64:	b96a      	cbnz	r2, 801ac82 <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 801ac66:	2201      	movs	r2, #1
 801ac68:	b430      	push	{r4, r5}
 801ac6a:	4d08      	ldr	r5, [pc, #32]	; (801ac8c <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 801ac6c:	4c08      	ldr	r4, [pc, #32]	; (801ac90 <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 801ac6e:	701a      	strb	r2, [r3, #0]
 801ac70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ac72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ac74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801ac76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801ac78:	682b      	ldr	r3, [r5, #0]
 801ac7a:	4806      	ldr	r0, [pc, #24]	; (801ac94 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 801ac7c:	6023      	str	r3, [r4, #0]
 801ac7e:	bc30      	pop	{r4, r5}
 801ac80:	4770      	bx	lr
 801ac82:	4804      	ldr	r0, [pc, #16]	; (801ac94 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 801ac84:	4770      	bx	lr
 801ac86:	bf00      	nop
 801ac88:	20010cec 	.word	0x20010cec
 801ac8c:	08020744 	.word	0x08020744
 801ac90:	20010cf0 	.word	0x20010cf0
 801ac94:	08020768 	.word	0x08020768

0801ac98 <builtin_interfaces__msg__Time__init>:
 801ac98:	3800      	subs	r0, #0
 801ac9a:	bf18      	it	ne
 801ac9c:	2001      	movne	r0, #1
 801ac9e:	4770      	bx	lr

0801aca0 <builtin_interfaces__msg__Time__fini>:
 801aca0:	4770      	bx	lr
 801aca2:	bf00      	nop

0801aca4 <ucdr_serialize_sequence_char>:
 801aca4:	b570      	push	{r4, r5, r6, lr}
 801aca6:	4615      	mov	r5, r2
 801aca8:	460e      	mov	r6, r1
 801acaa:	7d01      	ldrb	r1, [r0, #20]
 801acac:	4604      	mov	r4, r0
 801acae:	f7f5 fd17 	bl	80106e0 <ucdr_serialize_endian_uint32_t>
 801acb2:	b90d      	cbnz	r5, 801acb8 <ucdr_serialize_sequence_char+0x14>
 801acb4:	2001      	movs	r0, #1
 801acb6:	bd70      	pop	{r4, r5, r6, pc}
 801acb8:	462b      	mov	r3, r5
 801acba:	4632      	mov	r2, r6
 801acbc:	7d21      	ldrb	r1, [r4, #20]
 801acbe:	4620      	mov	r0, r4
 801acc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801acc4:	f7f4 bfac 	b.w	800fc20 <ucdr_serialize_endian_array_char>

0801acc8 <ucdr_deserialize_sequence_char>:
 801acc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801accc:	461d      	mov	r5, r3
 801acce:	4616      	mov	r6, r2
 801acd0:	460f      	mov	r7, r1
 801acd2:	461a      	mov	r2, r3
 801acd4:	7d01      	ldrb	r1, [r0, #20]
 801acd6:	4604      	mov	r4, r0
 801acd8:	f7f5 fe2a 	bl	8010930 <ucdr_deserialize_endian_uint32_t>
 801acdc:	682b      	ldr	r3, [r5, #0]
 801acde:	429e      	cmp	r6, r3
 801ace0:	d201      	bcs.n	801ace6 <ucdr_deserialize_sequence_char+0x1e>
 801ace2:	2201      	movs	r2, #1
 801ace4:	75a2      	strb	r2, [r4, #22]
 801ace6:	b913      	cbnz	r3, 801acee <ucdr_deserialize_sequence_char+0x26>
 801ace8:	2001      	movs	r0, #1
 801acea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801acee:	463a      	mov	r2, r7
 801acf0:	7d21      	ldrb	r1, [r4, #20]
 801acf2:	4620      	mov	r0, r4
 801acf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801acf8:	f7f4 bfc4 	b.w	800fc84 <ucdr_deserialize_endian_array_char>

0801acfc <ucdr_serialize_sequence_uint8_t>:
 801acfc:	b570      	push	{r4, r5, r6, lr}
 801acfe:	4615      	mov	r5, r2
 801ad00:	460e      	mov	r6, r1
 801ad02:	7d01      	ldrb	r1, [r0, #20]
 801ad04:	4604      	mov	r4, r0
 801ad06:	f7f5 fceb 	bl	80106e0 <ucdr_serialize_endian_uint32_t>
 801ad0a:	b90d      	cbnz	r5, 801ad10 <ucdr_serialize_sequence_uint8_t+0x14>
 801ad0c:	2001      	movs	r0, #1
 801ad0e:	bd70      	pop	{r4, r5, r6, pc}
 801ad10:	462b      	mov	r3, r5
 801ad12:	4632      	mov	r2, r6
 801ad14:	7d21      	ldrb	r1, [r4, #20]
 801ad16:	4620      	mov	r0, r4
 801ad18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ad1c:	f7f5 b818 	b.w	800fd50 <ucdr_serialize_endian_array_uint8_t>

0801ad20 <ucdr_deserialize_sequence_uint8_t>:
 801ad20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad24:	461d      	mov	r5, r3
 801ad26:	4616      	mov	r6, r2
 801ad28:	460f      	mov	r7, r1
 801ad2a:	461a      	mov	r2, r3
 801ad2c:	7d01      	ldrb	r1, [r0, #20]
 801ad2e:	4604      	mov	r4, r0
 801ad30:	f7f5 fdfe 	bl	8010930 <ucdr_deserialize_endian_uint32_t>
 801ad34:	682b      	ldr	r3, [r5, #0]
 801ad36:	429e      	cmp	r6, r3
 801ad38:	d201      	bcs.n	801ad3e <ucdr_deserialize_sequence_uint8_t+0x1e>
 801ad3a:	2201      	movs	r2, #1
 801ad3c:	75a2      	strb	r2, [r4, #22]
 801ad3e:	b913      	cbnz	r3, 801ad46 <ucdr_deserialize_sequence_uint8_t+0x26>
 801ad40:	2001      	movs	r0, #1
 801ad42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad46:	463a      	mov	r2, r7
 801ad48:	7d21      	ldrb	r1, [r4, #20]
 801ad4a:	4620      	mov	r0, r4
 801ad4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ad50:	f7f5 b864 	b.w	800fe1c <ucdr_deserialize_endian_array_uint8_t>

0801ad54 <ucdr_serialize_string>:
 801ad54:	b510      	push	{r4, lr}
 801ad56:	b082      	sub	sp, #8
 801ad58:	4604      	mov	r4, r0
 801ad5a:	4608      	mov	r0, r1
 801ad5c:	9101      	str	r1, [sp, #4]
 801ad5e:	f7e5 facf 	bl	8000300 <strlen>
 801ad62:	4602      	mov	r2, r0
 801ad64:	9901      	ldr	r1, [sp, #4]
 801ad66:	4620      	mov	r0, r4
 801ad68:	3201      	adds	r2, #1
 801ad6a:	b002      	add	sp, #8
 801ad6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ad70:	f7ff bf98 	b.w	801aca4 <ucdr_serialize_sequence_char>

0801ad74 <ucdr_deserialize_string>:
 801ad74:	b500      	push	{lr}
 801ad76:	b083      	sub	sp, #12
 801ad78:	ab01      	add	r3, sp, #4
 801ad7a:	f7ff ffa5 	bl	801acc8 <ucdr_deserialize_sequence_char>
 801ad7e:	b003      	add	sp, #12
 801ad80:	f85d fb04 	ldr.w	pc, [sp], #4

0801ad84 <get_custom_error>:
 801ad84:	4b01      	ldr	r3, [pc, #4]	; (801ad8c <get_custom_error+0x8>)
 801ad86:	7818      	ldrb	r0, [r3, #0]
 801ad88:	4770      	bx	lr
 801ad8a:	bf00      	nop
 801ad8c:	20010d14 	.word	0x20010d14

0801ad90 <recv_custom_msg>:
 801ad90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad94:	4693      	mov	fp, r2
 801ad96:	b089      	sub	sp, #36	; 0x24
 801ad98:	2200      	movs	r2, #0
 801ad9a:	4604      	mov	r4, r0
 801ad9c:	468a      	mov	sl, r1
 801ad9e:	9305      	str	r3, [sp, #20]
 801ada0:	f88d 201e 	strb.w	r2, [sp, #30]
 801ada4:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 801ada8:	b322      	cbz	r2, 801adf4 <recv_custom_msg+0x64>
 801adaa:	f200 2902 	addw	r9, r0, #514	; 0x202
 801adae:	f10d 081f 	add.w	r8, sp, #31
 801adb2:	af05      	add	r7, sp, #20
 801adb4:	f10d 061e 	add.w	r6, sp, #30
 801adb8:	f44f 7500 	mov.w	r5, #512	; 0x200
 801adbc:	e002      	b.n	801adc4 <recv_custom_msg+0x34>
 801adbe:	9b05      	ldr	r3, [sp, #20]
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	dd0f      	ble.n	801ade4 <recv_custom_msg+0x54>
 801adc4:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 801adc8:	4623      	mov	r3, r4
 801adca:	4622      	mov	r2, r4
 801adcc:	4648      	mov	r0, r9
 801adce:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801add2:	e9cd 5600 	strd	r5, r6, [sp]
 801add6:	f001 f913 	bl	801c000 <uxr_read_framed_msg>
 801adda:	2800      	cmp	r0, #0
 801addc:	d0ef      	beq.n	801adbe <recv_custom_msg+0x2e>
 801adde:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801ade2:	b1b3      	cbz	r3, 801ae12 <recv_custom_msg+0x82>
 801ade4:	4b0f      	ldr	r3, [pc, #60]	; (801ae24 <recv_custom_msg+0x94>)
 801ade6:	2000      	movs	r0, #0
 801ade8:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801adec:	701a      	strb	r2, [r3, #0]
 801adee:	b009      	add	sp, #36	; 0x24
 801adf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adf4:	f10d 021f 	add.w	r2, sp, #31
 801adf8:	4601      	mov	r1, r0
 801adfa:	9200      	str	r2, [sp, #0]
 801adfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ae00:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 801ae04:	47a8      	blx	r5
 801ae06:	2800      	cmp	r0, #0
 801ae08:	d0ec      	beq.n	801ade4 <recv_custom_msg+0x54>
 801ae0a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801ae0e:	2b00      	cmp	r3, #0
 801ae10:	d1e8      	bne.n	801ade4 <recv_custom_msg+0x54>
 801ae12:	f8cb 0000 	str.w	r0, [fp]
 801ae16:	2001      	movs	r0, #1
 801ae18:	f8ca 4000 	str.w	r4, [sl]
 801ae1c:	b009      	add	sp, #36	; 0x24
 801ae1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae22:	bf00      	nop
 801ae24:	20010d14 	.word	0x20010d14

0801ae28 <send_custom_msg>:
 801ae28:	b530      	push	{r4, r5, lr}
 801ae2a:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 801ae2e:	b087      	sub	sp, #28
 801ae30:	4614      	mov	r4, r2
 801ae32:	b995      	cbnz	r5, 801ae5a <send_custom_msg+0x32>
 801ae34:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 801ae38:	f10d 0317 	add.w	r3, sp, #23
 801ae3c:	47a8      	blx	r5
 801ae3e:	1e03      	subs	r3, r0, #0
 801ae40:	bf18      	it	ne
 801ae42:	2301      	movne	r3, #1
 801ae44:	42a0      	cmp	r0, r4
 801ae46:	bf18      	it	ne
 801ae48:	2300      	movne	r3, #0
 801ae4a:	b91b      	cbnz	r3, 801ae54 <send_custom_msg+0x2c>
 801ae4c:	4a0a      	ldr	r2, [pc, #40]	; (801ae78 <send_custom_msg+0x50>)
 801ae4e:	f89d 1017 	ldrb.w	r1, [sp, #23]
 801ae52:	7011      	strb	r1, [r2, #0]
 801ae54:	4618      	mov	r0, r3
 801ae56:	b007      	add	sp, #28
 801ae58:	bd30      	pop	{r4, r5, pc}
 801ae5a:	460b      	mov	r3, r1
 801ae5c:	2200      	movs	r2, #0
 801ae5e:	f10d 0117 	add.w	r1, sp, #23
 801ae62:	9400      	str	r4, [sp, #0]
 801ae64:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801ae68:	4602      	mov	r2, r0
 801ae6a:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 801ae6e:	f200 2002 	addw	r0, r0, #514	; 0x202
 801ae72:	f000 fee7 	bl	801bc44 <uxr_write_framed_msg>
 801ae76:	e7e2      	b.n	801ae3e <send_custom_msg+0x16>
 801ae78:	20010d14 	.word	0x20010d14

0801ae7c <uxr_set_custom_transport_callbacks>:
 801ae7c:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 801ae80:	9901      	ldr	r1, [sp, #4]
 801ae82:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 801ae86:	9b00      	ldr	r3, [sp, #0]
 801ae88:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 801ae8c:	4770      	bx	lr
 801ae8e:	bf00      	nop

0801ae90 <uxr_init_custom_transport>:
 801ae90:	b538      	push	{r3, r4, r5, lr}
 801ae92:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 801ae96:	b303      	cbz	r3, 801aeda <uxr_init_custom_transport+0x4a>
 801ae98:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 801ae9c:	4604      	mov	r4, r0
 801ae9e:	b1e2      	cbz	r2, 801aeda <uxr_init_custom_transport+0x4a>
 801aea0:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 801aea4:	b1ca      	cbz	r2, 801aeda <uxr_init_custom_transport+0x4a>
 801aea6:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 801aeaa:	b1b2      	cbz	r2, 801aeda <uxr_init_custom_transport+0x4a>
 801aeac:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 801aeb0:	4798      	blx	r3
 801aeb2:	4605      	mov	r5, r0
 801aeb4:	b188      	cbz	r0, 801aeda <uxr_init_custom_transport+0x4a>
 801aeb6:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 801aeba:	b98b      	cbnz	r3, 801aee0 <uxr_init_custom_transport+0x50>
 801aebc:	4b0b      	ldr	r3, [pc, #44]	; (801aeec <uxr_init_custom_transport+0x5c>)
 801aebe:	4628      	mov	r0, r5
 801aec0:	490b      	ldr	r1, [pc, #44]	; (801aef0 <uxr_init_custom_transport+0x60>)
 801aec2:	4a0c      	ldr	r2, [pc, #48]	; (801aef4 <uxr_init_custom_transport+0x64>)
 801aec4:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 801aec8:	f44f 7300 	mov.w	r3, #512	; 0x200
 801aecc:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 801aed0:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 801aed4:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 801aed8:	bd38      	pop	{r3, r4, r5, pc}
 801aeda:	2500      	movs	r5, #0
 801aedc:	4628      	mov	r0, r5
 801aede:	bd38      	pop	{r3, r4, r5, pc}
 801aee0:	2100      	movs	r1, #0
 801aee2:	f204 2002 	addw	r0, r4, #514	; 0x202
 801aee6:	f000 fea7 	bl	801bc38 <uxr_init_framing_io>
 801aeea:	e7e7      	b.n	801aebc <uxr_init_custom_transport+0x2c>
 801aeec:	0801ad91 	.word	0x0801ad91
 801aef0:	0801ae29 	.word	0x0801ae29
 801aef4:	0801ad85 	.word	0x0801ad85

0801aef8 <uxr_close_custom_transport>:
 801aef8:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 801aefc:	4718      	bx	r3
 801aefe:	bf00      	nop

0801af00 <uxr_init_input_best_effort_stream>:
 801af00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801af04:	8003      	strh	r3, [r0, #0]
 801af06:	4770      	bx	lr

0801af08 <uxr_reset_input_best_effort_stream>:
 801af08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801af0c:	8003      	strh	r3, [r0, #0]
 801af0e:	4770      	bx	lr

0801af10 <uxr_receive_best_effort_message>:
 801af10:	b538      	push	{r3, r4, r5, lr}
 801af12:	4604      	mov	r4, r0
 801af14:	8800      	ldrh	r0, [r0, #0]
 801af16:	460d      	mov	r5, r1
 801af18:	f000 fe76 	bl	801bc08 <uxr_seq_num_cmp>
 801af1c:	4603      	mov	r3, r0
 801af1e:	0fc0      	lsrs	r0, r0, #31
 801af20:	2b00      	cmp	r3, #0
 801af22:	bfb8      	it	lt
 801af24:	8025      	strhlt	r5, [r4, #0]
 801af26:	bd38      	pop	{r3, r4, r5, pc}

0801af28 <on_full_input_buffer>:
 801af28:	b570      	push	{r4, r5, r6, lr}
 801af2a:	460c      	mov	r4, r1
 801af2c:	4605      	mov	r5, r0
 801af2e:	8908      	ldrh	r0, [r1, #8]
 801af30:	682b      	ldr	r3, [r5, #0]
 801af32:	7d26      	ldrb	r6, [r4, #20]
 801af34:	e9d1 1200 	ldrd	r1, r2, [r1]
 801af38:	fbb2 f2f0 	udiv	r2, r2, r0
 801af3c:	eba3 0c01 	sub.w	ip, r3, r1
 801af40:	fbbc fcf2 	udiv	ip, ip, r2
 801af44:	f10c 0c01 	add.w	ip, ip, #1
 801af48:	fa1f f38c 	uxth.w	r3, ip
 801af4c:	fbb3 fcf0 	udiv	ip, r3, r0
 801af50:	fb00 331c 	mls	r3, r0, ip, r3
 801af54:	b29b      	uxth	r3, r3
 801af56:	fb02 f303 	mul.w	r3, r2, r3
 801af5a:	1d18      	adds	r0, r3, #4
 801af5c:	4408      	add	r0, r1
 801af5e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801af62:	b116      	cbz	r6, 801af6a <on_full_input_buffer+0x42>
 801af64:	2600      	movs	r6, #0
 801af66:	f840 6c04 	str.w	r6, [r0, #-4]
 801af6a:	2a03      	cmp	r2, #3
 801af6c:	d801      	bhi.n	801af72 <on_full_input_buffer+0x4a>
 801af6e:	2001      	movs	r0, #1
 801af70:	bd70      	pop	{r4, r5, r6, pc}
 801af72:	3308      	adds	r3, #8
 801af74:	4628      	mov	r0, r5
 801af76:	3a04      	subs	r2, #4
 801af78:	4419      	add	r1, r3
 801af7a:	692b      	ldr	r3, [r5, #16]
 801af7c:	f7f6 fd8a 	bl	8011a94 <ucdr_init_buffer_origin>
 801af80:	4628      	mov	r0, r5
 801af82:	4622      	mov	r2, r4
 801af84:	4902      	ldr	r1, [pc, #8]	; (801af90 <on_full_input_buffer+0x68>)
 801af86:	f7f6 fd61 	bl	8011a4c <ucdr_set_on_full_buffer_callback>
 801af8a:	2000      	movs	r0, #0
 801af8c:	bd70      	pop	{r4, r5, r6, pc}
 801af8e:	bf00      	nop
 801af90:	0801af29 	.word	0x0801af29

0801af94 <uxr_init_input_reliable_stream>:
 801af94:	b510      	push	{r4, lr}
 801af96:	e9c0 1200 	strd	r1, r2, [r0]
 801af9a:	2400      	movs	r4, #0
 801af9c:	9a02      	ldr	r2, [sp, #8]
 801af9e:	8103      	strh	r3, [r0, #8]
 801afa0:	6102      	str	r2, [r0, #16]
 801afa2:	7504      	strb	r4, [r0, #20]
 801afa4:	b1c3      	cbz	r3, 801afd8 <uxr_init_input_reliable_stream+0x44>
 801afa6:	600c      	str	r4, [r1, #0]
 801afa8:	8901      	ldrh	r1, [r0, #8]
 801afaa:	2901      	cmp	r1, #1
 801afac:	d914      	bls.n	801afd8 <uxr_init_input_reliable_stream+0x44>
 801afae:	f04f 0c01 	mov.w	ip, #1
 801afb2:	6843      	ldr	r3, [r0, #4]
 801afb4:	f10c 0e01 	add.w	lr, ip, #1
 801afb8:	fbbc f2f1 	udiv	r2, ip, r1
 801afbc:	fbb3 f3f1 	udiv	r3, r3, r1
 801afc0:	fb01 c212 	mls	r2, r1, r2, ip
 801afc4:	fa1f fc8e 	uxth.w	ip, lr
 801afc8:	b292      	uxth	r2, r2
 801afca:	fb02 f303 	mul.w	r3, r2, r3
 801afce:	6802      	ldr	r2, [r0, #0]
 801afd0:	50d4      	str	r4, [r2, r3]
 801afd2:	8901      	ldrh	r1, [r0, #8]
 801afd4:	4561      	cmp	r1, ip
 801afd6:	d8ec      	bhi.n	801afb2 <uxr_init_input_reliable_stream+0x1e>
 801afd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801afdc:	60c3      	str	r3, [r0, #12]
 801afde:	bd10      	pop	{r4, pc}

0801afe0 <uxr_reset_input_reliable_stream>:
 801afe0:	8901      	ldrh	r1, [r0, #8]
 801afe2:	b1d9      	cbz	r1, 801b01c <uxr_reset_input_reliable_stream+0x3c>
 801afe4:	b510      	push	{r4, lr}
 801afe6:	f04f 0e00 	mov.w	lr, #0
 801afea:	46f4      	mov	ip, lr
 801afec:	4674      	mov	r4, lr
 801afee:	6843      	ldr	r3, [r0, #4]
 801aff0:	f10e 0e01 	add.w	lr, lr, #1
 801aff4:	fbbc f2f1 	udiv	r2, ip, r1
 801aff8:	fbb3 f3f1 	udiv	r3, r3, r1
 801affc:	fb01 c212 	mls	r2, r1, r2, ip
 801b000:	fa1f fc8e 	uxth.w	ip, lr
 801b004:	b292      	uxth	r2, r2
 801b006:	fb02 f303 	mul.w	r3, r2, r3
 801b00a:	6802      	ldr	r2, [r0, #0]
 801b00c:	50d4      	str	r4, [r2, r3]
 801b00e:	8901      	ldrh	r1, [r0, #8]
 801b010:	4561      	cmp	r1, ip
 801b012:	d8ec      	bhi.n	801afee <uxr_reset_input_reliable_stream+0xe>
 801b014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b018:	60c3      	str	r3, [r0, #12]
 801b01a:	bd10      	pop	{r4, pc}
 801b01c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b020:	60c3      	str	r3, [r0, #12]
 801b022:	4770      	bx	lr

0801b024 <uxr_receive_reliable_message>:
 801b024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b028:	4604      	mov	r4, r0
 801b02a:	460d      	mov	r5, r1
 801b02c:	8901      	ldrh	r1, [r0, #8]
 801b02e:	4617      	mov	r7, r2
 801b030:	8980      	ldrh	r0, [r0, #12]
 801b032:	4698      	mov	r8, r3
 801b034:	f000 fde0 	bl	801bbf8 <uxr_seq_num_add>
 801b038:	4629      	mov	r1, r5
 801b03a:	4606      	mov	r6, r0
 801b03c:	89a0      	ldrh	r0, [r4, #12]
 801b03e:	f000 fde3 	bl	801bc08 <uxr_seq_num_cmp>
 801b042:	2800      	cmp	r0, #0
 801b044:	db0a      	blt.n	801b05c <uxr_receive_reliable_message+0x38>
 801b046:	2600      	movs	r6, #0
 801b048:	4629      	mov	r1, r5
 801b04a:	89e0      	ldrh	r0, [r4, #14]
 801b04c:	f000 fddc 	bl	801bc08 <uxr_seq_num_cmp>
 801b050:	2800      	cmp	r0, #0
 801b052:	da00      	bge.n	801b056 <uxr_receive_reliable_message+0x32>
 801b054:	81e5      	strh	r5, [r4, #14]
 801b056:	4630      	mov	r0, r6
 801b058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b05c:	4630      	mov	r0, r6
 801b05e:	4629      	mov	r1, r5
 801b060:	f000 fdd2 	bl	801bc08 <uxr_seq_num_cmp>
 801b064:	2800      	cmp	r0, #0
 801b066:	dbee      	blt.n	801b046 <uxr_receive_reliable_message+0x22>
 801b068:	6923      	ldr	r3, [r4, #16]
 801b06a:	4638      	mov	r0, r7
 801b06c:	4798      	blx	r3
 801b06e:	4681      	mov	r9, r0
 801b070:	2101      	movs	r1, #1
 801b072:	89a0      	ldrh	r0, [r4, #12]
 801b074:	f000 fdc0 	bl	801bbf8 <uxr_seq_num_add>
 801b078:	f1b9 0f00 	cmp.w	r9, #0
 801b07c:	bf08      	it	eq
 801b07e:	4285      	cmpeq	r5, r0
 801b080:	bf0c      	ite	eq
 801b082:	2601      	moveq	r6, #1
 801b084:	2600      	movne	r6, #0
 801b086:	d104      	bne.n	801b092 <uxr_receive_reliable_message+0x6e>
 801b088:	2300      	movs	r3, #0
 801b08a:	9a08      	ldr	r2, [sp, #32]
 801b08c:	81a0      	strh	r0, [r4, #12]
 801b08e:	7013      	strb	r3, [r2, #0]
 801b090:	e7da      	b.n	801b048 <uxr_receive_reliable_message+0x24>
 801b092:	8922      	ldrh	r2, [r4, #8]
 801b094:	6863      	ldr	r3, [r4, #4]
 801b096:	fbb5 f0f2 	udiv	r0, r5, r2
 801b09a:	fbb3 f3f2 	udiv	r3, r3, r2
 801b09e:	fb02 5010 	mls	r0, r2, r0, r5
 801b0a2:	b280      	uxth	r0, r0
 801b0a4:	fb03 f000 	mul.w	r0, r3, r0
 801b0a8:	6823      	ldr	r3, [r4, #0]
 801b0aa:	3004      	adds	r0, #4
 801b0ac:	4418      	add	r0, r3
 801b0ae:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	d1c7      	bne.n	801b046 <uxr_receive_reliable_message+0x22>
 801b0b6:	4639      	mov	r1, r7
 801b0b8:	4642      	mov	r2, r8
 801b0ba:	f002 fe5c 	bl	801dd76 <memcpy>
 801b0be:	8921      	ldrh	r1, [r4, #8]
 801b0c0:	6863      	ldr	r3, [r4, #4]
 801b0c2:	fbb5 f2f1 	udiv	r2, r5, r1
 801b0c6:	fbb3 f3f1 	udiv	r3, r3, r1
 801b0ca:	fb01 5212 	mls	r2, r1, r2, r5
 801b0ce:	b292      	uxth	r2, r2
 801b0d0:	fb02 f303 	mul.w	r3, r2, r3
 801b0d4:	6822      	ldr	r2, [r4, #0]
 801b0d6:	f842 8003 	str.w	r8, [r2, r3]
 801b0da:	2301      	movs	r3, #1
 801b0dc:	9a08      	ldr	r2, [sp, #32]
 801b0de:	7013      	strb	r3, [r2, #0]
 801b0e0:	f1b9 0f00 	cmp.w	r9, #0
 801b0e4:	d0af      	beq.n	801b046 <uxr_receive_reliable_message+0x22>
 801b0e6:	89a6      	ldrh	r6, [r4, #12]
 801b0e8:	2101      	movs	r1, #1
 801b0ea:	4630      	mov	r0, r6
 801b0ec:	f000 fd84 	bl	801bbf8 <uxr_seq_num_add>
 801b0f0:	8921      	ldrh	r1, [r4, #8]
 801b0f2:	6863      	ldr	r3, [r4, #4]
 801b0f4:	4606      	mov	r6, r0
 801b0f6:	fbb0 f2f1 	udiv	r2, r0, r1
 801b0fa:	fbb3 f3f1 	udiv	r3, r3, r1
 801b0fe:	fb01 0212 	mls	r2, r1, r2, r0
 801b102:	6820      	ldr	r0, [r4, #0]
 801b104:	b292      	uxth	r2, r2
 801b106:	fb02 f303 	mul.w	r3, r2, r3
 801b10a:	3304      	adds	r3, #4
 801b10c:	4418      	add	r0, r3
 801b10e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b112:	2b00      	cmp	r3, #0
 801b114:	d097      	beq.n	801b046 <uxr_receive_reliable_message+0x22>
 801b116:	6923      	ldr	r3, [r4, #16]
 801b118:	4798      	blx	r3
 801b11a:	2802      	cmp	r0, #2
 801b11c:	d002      	beq.n	801b124 <uxr_receive_reliable_message+0x100>
 801b11e:	2801      	cmp	r0, #1
 801b120:	d0e2      	beq.n	801b0e8 <uxr_receive_reliable_message+0xc4>
 801b122:	e790      	b.n	801b046 <uxr_receive_reliable_message+0x22>
 801b124:	2601      	movs	r6, #1
 801b126:	e78f      	b.n	801b048 <uxr_receive_reliable_message+0x24>

0801b128 <uxr_next_input_reliable_buffer_available>:
 801b128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b12c:	4604      	mov	r4, r0
 801b12e:	460f      	mov	r7, r1
 801b130:	8980      	ldrh	r0, [r0, #12]
 801b132:	2101      	movs	r1, #1
 801b134:	4690      	mov	r8, r2
 801b136:	f000 fd5f 	bl	801bbf8 <uxr_seq_num_add>
 801b13a:	8922      	ldrh	r2, [r4, #8]
 801b13c:	6866      	ldr	r6, [r4, #4]
 801b13e:	fbb0 f3f2 	udiv	r3, r0, r2
 801b142:	fbb6 f6f2 	udiv	r6, r6, r2
 801b146:	fb02 0313 	mls	r3, r2, r3, r0
 801b14a:	b29b      	uxth	r3, r3
 801b14c:	fb03 f606 	mul.w	r6, r3, r6
 801b150:	6823      	ldr	r3, [r4, #0]
 801b152:	3604      	adds	r6, #4
 801b154:	441e      	add	r6, r3
 801b156:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801b15a:	f1b9 0f00 	cmp.w	r9, #0
 801b15e:	d023      	beq.n	801b1a8 <uxr_next_input_reliable_buffer_available+0x80>
 801b160:	4605      	mov	r5, r0
 801b162:	6923      	ldr	r3, [r4, #16]
 801b164:	4630      	mov	r0, r6
 801b166:	4798      	blx	r3
 801b168:	4682      	mov	sl, r0
 801b16a:	b300      	cbz	r0, 801b1ae <uxr_next_input_reliable_buffer_available+0x86>
 801b16c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801b170:	2101      	movs	r1, #1
 801b172:	4650      	mov	r0, sl
 801b174:	f000 fd40 	bl	801bbf8 <uxr_seq_num_add>
 801b178:	8921      	ldrh	r1, [r4, #8]
 801b17a:	4682      	mov	sl, r0
 801b17c:	6863      	ldr	r3, [r4, #4]
 801b17e:	6820      	ldr	r0, [r4, #0]
 801b180:	fbba f2f1 	udiv	r2, sl, r1
 801b184:	fbb3 f3f1 	udiv	r3, r3, r1
 801b188:	fb01 a212 	mls	r2, r1, r2, sl
 801b18c:	b292      	uxth	r2, r2
 801b18e:	fb02 f303 	mul.w	r3, r2, r3
 801b192:	3304      	adds	r3, #4
 801b194:	4418      	add	r0, r3
 801b196:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801b19a:	b12b      	cbz	r3, 801b1a8 <uxr_next_input_reliable_buffer_available+0x80>
 801b19c:	6923      	ldr	r3, [r4, #16]
 801b19e:	4798      	blx	r3
 801b1a0:	2802      	cmp	r0, #2
 801b1a2:	d01b      	beq.n	801b1dc <uxr_next_input_reliable_buffer_available+0xb4>
 801b1a4:	2801      	cmp	r0, #1
 801b1a6:	d0e3      	beq.n	801b170 <uxr_next_input_reliable_buffer_available+0x48>
 801b1a8:	2000      	movs	r0, #0
 801b1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b1ae:	464a      	mov	r2, r9
 801b1b0:	4631      	mov	r1, r6
 801b1b2:	4638      	mov	r0, r7
 801b1b4:	f7f6 fc76 	bl	8011aa4 <ucdr_init_buffer>
 801b1b8:	8921      	ldrh	r1, [r4, #8]
 801b1ba:	6863      	ldr	r3, [r4, #4]
 801b1bc:	2001      	movs	r0, #1
 801b1be:	fbb5 f2f1 	udiv	r2, r5, r1
 801b1c2:	fbb3 f3f1 	udiv	r3, r3, r1
 801b1c6:	fb01 5212 	mls	r2, r1, r2, r5
 801b1ca:	b292      	uxth	r2, r2
 801b1cc:	fb02 f303 	mul.w	r3, r2, r3
 801b1d0:	6822      	ldr	r2, [r4, #0]
 801b1d2:	f842 a003 	str.w	sl, [r2, r3]
 801b1d6:	81a5      	strh	r5, [r4, #12]
 801b1d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b1dc:	8920      	ldrh	r0, [r4, #8]
 801b1de:	eb06 0108 	add.w	r1, r6, r8
 801b1e2:	6863      	ldr	r3, [r4, #4]
 801b1e4:	eba9 0208 	sub.w	r2, r9, r8
 801b1e8:	fbb5 f6f0 	udiv	r6, r5, r0
 801b1ec:	fbb3 f3f0 	udiv	r3, r3, r0
 801b1f0:	fb00 5516 	mls	r5, r0, r6, r5
 801b1f4:	2000      	movs	r0, #0
 801b1f6:	b2ad      	uxth	r5, r5
 801b1f8:	fb03 f505 	mul.w	r5, r3, r5
 801b1fc:	6823      	ldr	r3, [r4, #0]
 801b1fe:	5158      	str	r0, [r3, r5]
 801b200:	4638      	mov	r0, r7
 801b202:	f7f6 fc4f 	bl	8011aa4 <ucdr_init_buffer>
 801b206:	4638      	mov	r0, r7
 801b208:	4622      	mov	r2, r4
 801b20a:	4903      	ldr	r1, [pc, #12]	; (801b218 <uxr_next_input_reliable_buffer_available+0xf0>)
 801b20c:	f7f6 fc1e 	bl	8011a4c <ucdr_set_on_full_buffer_callback>
 801b210:	2001      	movs	r0, #1
 801b212:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801b216:	e7c8      	b.n	801b1aa <uxr_next_input_reliable_buffer_available+0x82>
 801b218:	0801af29 	.word	0x0801af29

0801b21c <uxr_process_heartbeat>:
 801b21c:	b538      	push	{r3, r4, r5, lr}
 801b21e:	4611      	mov	r1, r2
 801b220:	4604      	mov	r4, r0
 801b222:	89c0      	ldrh	r0, [r0, #14]
 801b224:	4615      	mov	r5, r2
 801b226:	f000 fcef 	bl	801bc08 <uxr_seq_num_cmp>
 801b22a:	2800      	cmp	r0, #0
 801b22c:	bfb8      	it	lt
 801b22e:	81e5      	strhlt	r5, [r4, #14]
 801b230:	bd38      	pop	{r3, r4, r5, pc}
 801b232:	bf00      	nop

0801b234 <uxr_compute_acknack>:
 801b234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b238:	8903      	ldrh	r3, [r0, #8]
 801b23a:	4604      	mov	r4, r0
 801b23c:	460f      	mov	r7, r1
 801b23e:	8985      	ldrh	r5, [r0, #12]
 801b240:	b1db      	cbz	r3, 801b27a <uxr_compute_acknack+0x46>
 801b242:	4628      	mov	r0, r5
 801b244:	2601      	movs	r6, #1
 801b246:	e004      	b.n	801b252 <uxr_compute_acknack+0x1e>
 801b248:	4566      	cmp	r6, ip
 801b24a:	f106 0601 	add.w	r6, r6, #1
 801b24e:	d214      	bcs.n	801b27a <uxr_compute_acknack+0x46>
 801b250:	89a0      	ldrh	r0, [r4, #12]
 801b252:	b2b1      	uxth	r1, r6
 801b254:	f000 fcd0 	bl	801bbf8 <uxr_seq_num_add>
 801b258:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801b25c:	fbb0 f2fc 	udiv	r2, r0, ip
 801b260:	e9d4 1300 	ldrd	r1, r3, [r4]
 801b264:	fb0c 0212 	mls	r2, ip, r2, r0
 801b268:	fbb3 f3fc 	udiv	r3, r3, ip
 801b26c:	b292      	uxth	r2, r2
 801b26e:	fb02 f303 	mul.w	r3, r2, r3
 801b272:	58cb      	ldr	r3, [r1, r3]
 801b274:	2b00      	cmp	r3, #0
 801b276:	d1e7      	bne.n	801b248 <uxr_compute_acknack+0x14>
 801b278:	4605      	mov	r5, r0
 801b27a:	803d      	strh	r5, [r7, #0]
 801b27c:	2101      	movs	r1, #1
 801b27e:	89e6      	ldrh	r6, [r4, #14]
 801b280:	4628      	mov	r0, r5
 801b282:	f000 fcbd 	bl	801bc00 <uxr_seq_num_sub>
 801b286:	4601      	mov	r1, r0
 801b288:	4630      	mov	r0, r6
 801b28a:	f000 fcb9 	bl	801bc00 <uxr_seq_num_sub>
 801b28e:	4606      	mov	r6, r0
 801b290:	b328      	cbz	r0, 801b2de <uxr_compute_acknack+0xaa>
 801b292:	f04f 0900 	mov.w	r9, #0
 801b296:	f04f 0801 	mov.w	r8, #1
 801b29a:	464d      	mov	r5, r9
 801b29c:	fa1f f189 	uxth.w	r1, r9
 801b2a0:	8838      	ldrh	r0, [r7, #0]
 801b2a2:	f000 fca9 	bl	801bbf8 <uxr_seq_num_add>
 801b2a6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801b2aa:	6861      	ldr	r1, [r4, #4]
 801b2ac:	fa08 fe09 	lsl.w	lr, r8, r9
 801b2b0:	6822      	ldr	r2, [r4, #0]
 801b2b2:	f109 0901 	add.w	r9, r9, #1
 801b2b6:	ea4e 0e05 	orr.w	lr, lr, r5
 801b2ba:	fbb0 f3fc 	udiv	r3, r0, ip
 801b2be:	fbb1 f1fc 	udiv	r1, r1, ip
 801b2c2:	fb03 001c 	mls	r0, r3, ip, r0
 801b2c6:	b283      	uxth	r3, r0
 801b2c8:	fb01 f303 	mul.w	r3, r1, r3
 801b2cc:	58d3      	ldr	r3, [r2, r3]
 801b2ce:	b90b      	cbnz	r3, 801b2d4 <uxr_compute_acknack+0xa0>
 801b2d0:	fa1f f58e 	uxth.w	r5, lr
 801b2d4:	454e      	cmp	r6, r9
 801b2d6:	d1e1      	bne.n	801b29c <uxr_compute_acknack+0x68>
 801b2d8:	4628      	mov	r0, r5
 801b2da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b2de:	4605      	mov	r5, r0
 801b2e0:	4628      	mov	r0, r5
 801b2e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b2e6:	bf00      	nop

0801b2e8 <uxr_init_output_best_effort_stream>:
 801b2e8:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801b2ec:	6001      	str	r1, [r0, #0]
 801b2ee:	7303      	strb	r3, [r0, #12]
 801b2f0:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801b2f4:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801b2f8:	4770      	bx	lr
 801b2fa:	bf00      	nop

0801b2fc <uxr_reset_output_best_effort_stream>:
 801b2fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b300:	7b03      	ldrb	r3, [r0, #12]
 801b302:	81c2      	strh	r2, [r0, #14]
 801b304:	6043      	str	r3, [r0, #4]
 801b306:	4770      	bx	lr

0801b308 <uxr_prepare_best_effort_buffer_to_write>:
 801b308:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b30a:	4604      	mov	r4, r0
 801b30c:	b083      	sub	sp, #12
 801b30e:	6840      	ldr	r0, [r0, #4]
 801b310:	460d      	mov	r5, r1
 801b312:	4616      	mov	r6, r2
 801b314:	f7f8 f8bc 	bl	8013490 <uxr_submessage_padding>
 801b318:	6863      	ldr	r3, [r4, #4]
 801b31a:	4418      	add	r0, r3
 801b31c:	68a3      	ldr	r3, [r4, #8]
 801b31e:	1942      	adds	r2, r0, r5
 801b320:	4293      	cmp	r3, r2
 801b322:	bf2c      	ite	cs
 801b324:	2701      	movcs	r7, #1
 801b326:	2700      	movcc	r7, #0
 801b328:	d202      	bcs.n	801b330 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801b32a:	4638      	mov	r0, r7
 801b32c:	b003      	add	sp, #12
 801b32e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b330:	9000      	str	r0, [sp, #0]
 801b332:	2300      	movs	r3, #0
 801b334:	4630      	mov	r0, r6
 801b336:	6821      	ldr	r1, [r4, #0]
 801b338:	f7f6 fba2 	bl	8011a80 <ucdr_init_buffer_origin_offset>
 801b33c:	6861      	ldr	r1, [r4, #4]
 801b33e:	4638      	mov	r0, r7
 801b340:	4429      	add	r1, r5
 801b342:	6061      	str	r1, [r4, #4]
 801b344:	b003      	add	sp, #12
 801b346:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b348 <uxr_prepare_best_effort_buffer_to_send>:
 801b348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b34c:	4604      	mov	r4, r0
 801b34e:	461d      	mov	r5, r3
 801b350:	6840      	ldr	r0, [r0, #4]
 801b352:	7b23      	ldrb	r3, [r4, #12]
 801b354:	4298      	cmp	r0, r3
 801b356:	bf8c      	ite	hi
 801b358:	2601      	movhi	r6, #1
 801b35a:	2600      	movls	r6, #0
 801b35c:	d802      	bhi.n	801b364 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801b35e:	4630      	mov	r0, r6
 801b360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b364:	4688      	mov	r8, r1
 801b366:	89e0      	ldrh	r0, [r4, #14]
 801b368:	2101      	movs	r1, #1
 801b36a:	4617      	mov	r7, r2
 801b36c:	f000 fc44 	bl	801bbf8 <uxr_seq_num_add>
 801b370:	6823      	ldr	r3, [r4, #0]
 801b372:	81e0      	strh	r0, [r4, #14]
 801b374:	8028      	strh	r0, [r5, #0]
 801b376:	4630      	mov	r0, r6
 801b378:	f8c8 3000 	str.w	r3, [r8]
 801b37c:	6863      	ldr	r3, [r4, #4]
 801b37e:	603b      	str	r3, [r7, #0]
 801b380:	7b23      	ldrb	r3, [r4, #12]
 801b382:	6063      	str	r3, [r4, #4]
 801b384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b388 <on_full_output_buffer>:
 801b388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b38a:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801b38e:	460c      	mov	r4, r1
 801b390:	6803      	ldr	r3, [r0, #0]
 801b392:	4605      	mov	r5, r0
 801b394:	7b26      	ldrb	r6, [r4, #12]
 801b396:	e9d1 1200 	ldrd	r1, r2, [r1]
 801b39a:	fbb2 f2fc 	udiv	r2, r2, ip
 801b39e:	eba3 0e01 	sub.w	lr, r3, r1
 801b3a2:	6903      	ldr	r3, [r0, #16]
 801b3a4:	fbbe fef2 	udiv	lr, lr, r2
 801b3a8:	f10e 0e01 	add.w	lr, lr, #1
 801b3ac:	fa1f fe8e 	uxth.w	lr, lr
 801b3b0:	fbbe f7fc 	udiv	r7, lr, ip
 801b3b4:	fb0c ec17 	mls	ip, ip, r7, lr
 801b3b8:	fa1f fc8c 	uxth.w	ip, ip
 801b3bc:	fb02 fc0c 	mul.w	ip, r2, ip
 801b3c0:	f851 200c 	ldr.w	r2, [r1, ip]
 801b3c4:	44b4      	add	ip, r6
 801b3c6:	1b92      	subs	r2, r2, r6
 801b3c8:	f10c 0c08 	add.w	ip, ip, #8
 801b3cc:	3a04      	subs	r2, #4
 801b3ce:	4461      	add	r1, ip
 801b3d0:	f7f6 fb60 	bl	8011a94 <ucdr_init_buffer_origin>
 801b3d4:	4628      	mov	r0, r5
 801b3d6:	4622      	mov	r2, r4
 801b3d8:	4902      	ldr	r1, [pc, #8]	; (801b3e4 <on_full_output_buffer+0x5c>)
 801b3da:	f7f6 fb37 	bl	8011a4c <ucdr_set_on_full_buffer_callback>
 801b3de:	2000      	movs	r0, #0
 801b3e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b3e2:	bf00      	nop
 801b3e4:	0801b389 	.word	0x0801b389

0801b3e8 <uxr_init_output_reliable_stream>:
 801b3e8:	b530      	push	{r4, r5, lr}
 801b3ea:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801b3ee:	8103      	strh	r3, [r0, #8]
 801b3f0:	7304      	strb	r4, [r0, #12]
 801b3f2:	e9c0 1200 	strd	r1, r2, [r0]
 801b3f6:	b1e3      	cbz	r3, 801b432 <uxr_init_output_reliable_stream+0x4a>
 801b3f8:	600c      	str	r4, [r1, #0]
 801b3fa:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801b3fe:	f1bc 0f01 	cmp.w	ip, #1
 801b402:	d916      	bls.n	801b432 <uxr_init_output_reliable_stream+0x4a>
 801b404:	f04f 0e01 	mov.w	lr, #1
 801b408:	6843      	ldr	r3, [r0, #4]
 801b40a:	f10e 0501 	add.w	r5, lr, #1
 801b40e:	7b04      	ldrb	r4, [r0, #12]
 801b410:	6801      	ldr	r1, [r0, #0]
 801b412:	fbbe f2fc 	udiv	r2, lr, ip
 801b416:	fbb3 f3fc 	udiv	r3, r3, ip
 801b41a:	fb0c e212 	mls	r2, ip, r2, lr
 801b41e:	fa1f fe85 	uxth.w	lr, r5
 801b422:	b292      	uxth	r2, r2
 801b424:	fb02 f303 	mul.w	r3, r2, r3
 801b428:	50cc      	str	r4, [r1, r3]
 801b42a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801b42e:	45f4      	cmp	ip, lr
 801b430:	d8ea      	bhi.n	801b408 <uxr_init_output_reliable_stream+0x20>
 801b432:	4b07      	ldr	r3, [pc, #28]	; (801b450 <uxr_init_output_reliable_stream+0x68>)
 801b434:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b438:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801b43c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801b440:	f8c0 300e 	str.w	r3, [r0, #14]
 801b444:	2300      	movs	r3, #0
 801b446:	8242      	strh	r2, [r0, #18]
 801b448:	8403      	strh	r3, [r0, #32]
 801b44a:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801b44e:	bd30      	pop	{r4, r5, pc}
 801b450:	ffff0000 	.word	0xffff0000
 801b454:	00000000 	.word	0x00000000

0801b458 <uxr_reset_output_reliable_stream>:
 801b458:	8901      	ldrh	r1, [r0, #8]
 801b45a:	b510      	push	{r4, lr}
 801b45c:	b1b1      	cbz	r1, 801b48c <uxr_reset_output_reliable_stream+0x34>
 801b45e:	f04f 0e00 	mov.w	lr, #0
 801b462:	46f4      	mov	ip, lr
 801b464:	6843      	ldr	r3, [r0, #4]
 801b466:	f10e 0e01 	add.w	lr, lr, #1
 801b46a:	7b04      	ldrb	r4, [r0, #12]
 801b46c:	fbbc f2f1 	udiv	r2, ip, r1
 801b470:	fbb3 f3f1 	udiv	r3, r3, r1
 801b474:	fb01 c212 	mls	r2, r1, r2, ip
 801b478:	fa1f fc8e 	uxth.w	ip, lr
 801b47c:	b292      	uxth	r2, r2
 801b47e:	fb02 f303 	mul.w	r3, r2, r3
 801b482:	6802      	ldr	r2, [r0, #0]
 801b484:	50d4      	str	r4, [r2, r3]
 801b486:	8901      	ldrh	r1, [r0, #8]
 801b488:	4561      	cmp	r1, ip
 801b48a:	d8eb      	bhi.n	801b464 <uxr_reset_output_reliable_stream+0xc>
 801b48c:	4b08      	ldr	r3, [pc, #32]	; (801b4b0 <uxr_reset_output_reliable_stream+0x58>)
 801b48e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b492:	ed9f 7b05 	vldr	d7, [pc, #20]	; 801b4a8 <uxr_reset_output_reliable_stream+0x50>
 801b496:	f8c0 300e 	str.w	r3, [r0, #14]
 801b49a:	2300      	movs	r3, #0
 801b49c:	8242      	strh	r2, [r0, #18]
 801b49e:	8403      	strh	r3, [r0, #32]
 801b4a0:	ed80 7b06 	vstr	d7, [r0, #24]
 801b4a4:	bd10      	pop	{r4, pc}
 801b4a6:	bf00      	nop
 801b4a8:	ffffffff 	.word	0xffffffff
 801b4ac:	7fffffff 	.word	0x7fffffff
 801b4b0:	ffff0000 	.word	0xffff0000

0801b4b4 <uxr_prepare_reliable_buffer_to_write>:
 801b4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4b8:	4604      	mov	r4, r0
 801b4ba:	b091      	sub	sp, #68	; 0x44
 801b4bc:	8900      	ldrh	r0, [r0, #8]
 801b4be:	468b      	mov	fp, r1
 801b4c0:	89e6      	ldrh	r6, [r4, #14]
 801b4c2:	9204      	str	r2, [sp, #16]
 801b4c4:	6865      	ldr	r5, [r4, #4]
 801b4c6:	6823      	ldr	r3, [r4, #0]
 801b4c8:	f894 900c 	ldrb.w	r9, [r4, #12]
 801b4cc:	fbb6 f2f0 	udiv	r2, r6, r0
 801b4d0:	fbb5 f5f0 	udiv	r5, r5, r0
 801b4d4:	fb00 6212 	mls	r2, r0, r2, r6
 801b4d8:	1f2f      	subs	r7, r5, #4
 801b4da:	b292      	uxth	r2, r2
 801b4dc:	fb05 3202 	mla	r2, r5, r2, r3
 801b4e0:	1d11      	adds	r1, r2, #4
 801b4e2:	f8d2 8000 	ldr.w	r8, [r2]
 801b4e6:	9103      	str	r1, [sp, #12]
 801b4e8:	2800      	cmp	r0, #0
 801b4ea:	f000 814a 	beq.w	801b782 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801b4ee:	f04f 0c00 	mov.w	ip, #0
 801b4f2:	46e2      	mov	sl, ip
 801b4f4:	4661      	mov	r1, ip
 801b4f6:	f10c 0c01 	add.w	ip, ip, #1
 801b4fa:	fbb1 f2f0 	udiv	r2, r1, r0
 801b4fe:	fb00 1212 	mls	r2, r0, r2, r1
 801b502:	fa1f f18c 	uxth.w	r1, ip
 801b506:	b292      	uxth	r2, r2
 801b508:	fb05 f202 	mul.w	r2, r5, r2
 801b50c:	589a      	ldr	r2, [r3, r2]
 801b50e:	454a      	cmp	r2, r9
 801b510:	d103      	bne.n	801b51a <uxr_prepare_reliable_buffer_to_write+0x66>
 801b512:	f10a 0a01 	add.w	sl, sl, #1
 801b516:	fa1f fa8a 	uxth.w	sl, sl
 801b51a:	4281      	cmp	r1, r0
 801b51c:	d3eb      	bcc.n	801b4f6 <uxr_prepare_reliable_buffer_to_write+0x42>
 801b51e:	4640      	mov	r0, r8
 801b520:	2104      	movs	r1, #4
 801b522:	f8cd a014 	str.w	sl, [sp, #20]
 801b526:	f7f6 fac1 	bl	8011aac <ucdr_alignment>
 801b52a:	4480      	add	r8, r0
 801b52c:	eb08 020b 	add.w	r2, r8, fp
 801b530:	42ba      	cmp	r2, r7
 801b532:	f240 80ca 	bls.w	801b6ca <uxr_prepare_reliable_buffer_to_write+0x216>
 801b536:	7b22      	ldrb	r2, [r4, #12]
 801b538:	445a      	add	r2, fp
 801b53a:	42ba      	cmp	r2, r7
 801b53c:	f240 80b2 	bls.w	801b6a4 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801b540:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801b544:	b2bb      	uxth	r3, r7
 801b546:	eba2 0209 	sub.w	r2, r2, r9
 801b54a:	441a      	add	r2, r3
 801b54c:	b292      	uxth	r2, r2
 801b54e:	fb0a f902 	mul.w	r9, sl, r2
 801b552:	9205      	str	r2, [sp, #20]
 801b554:	45d9      	cmp	r9, fp
 801b556:	9206      	str	r2, [sp, #24]
 801b558:	f0c0 80b3 	bcc.w	801b6c2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b55c:	f108 0204 	add.w	r2, r8, #4
 801b560:	42ba      	cmp	r2, r7
 801b562:	f080 80da 	bcs.w	801b71a <uxr_prepare_reliable_buffer_to_write+0x266>
 801b566:	f1a3 0904 	sub.w	r9, r3, #4
 801b56a:	9b05      	ldr	r3, [sp, #20]
 801b56c:	eba9 0908 	sub.w	r9, r9, r8
 801b570:	fa1f f989 	uxth.w	r9, r9
 801b574:	ebab 0b09 	sub.w	fp, fp, r9
 801b578:	fbbb f2f3 	udiv	r2, fp, r3
 801b57c:	fb03 b312 	mls	r3, r3, r2, fp
 801b580:	2b00      	cmp	r3, #0
 801b582:	f040 80c4 	bne.w	801b70e <uxr_prepare_reliable_buffer_to_write+0x25a>
 801b586:	b293      	uxth	r3, r2
 801b588:	4553      	cmp	r3, sl
 801b58a:	f200 809a 	bhi.w	801b6c2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b58e:	2b00      	cmp	r3, #0
 801b590:	f000 80f9 	beq.w	801b786 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801b594:	f8cd 801c 	str.w	r8, [sp, #28]
 801b598:	f04f 0a00 	mov.w	sl, #0
 801b59c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801b5a0:	f10d 0b20 	add.w	fp, sp, #32
 801b5a4:	9505      	str	r5, [sp, #20]
 801b5a6:	461d      	mov	r5, r3
 801b5a8:	e000      	b.n	801b5ac <uxr_prepare_reliable_buffer_to_write+0xf8>
 801b5aa:	46c1      	mov	r9, r8
 801b5ac:	8922      	ldrh	r2, [r4, #8]
 801b5ae:	4658      	mov	r0, fp
 801b5b0:	6863      	ldr	r3, [r4, #4]
 801b5b2:	f10a 0a01 	add.w	sl, sl, #1
 801b5b6:	fbb6 f1f2 	udiv	r1, r6, r2
 801b5ba:	fbb3 f3f2 	udiv	r3, r3, r2
 801b5be:	fb02 6111 	mls	r1, r2, r1, r6
 801b5c2:	463a      	mov	r2, r7
 801b5c4:	b289      	uxth	r1, r1
 801b5c6:	fb03 f101 	mul.w	r1, r3, r1
 801b5ca:	6823      	ldr	r3, [r4, #0]
 801b5cc:	3104      	adds	r1, #4
 801b5ce:	4419      	add	r1, r3
 801b5d0:	2300      	movs	r3, #0
 801b5d2:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801b5d6:	f8cd c000 	str.w	ip, [sp]
 801b5da:	f7f6 fa51 	bl	8011a80 <ucdr_init_buffer_origin_offset>
 801b5de:	464a      	mov	r2, r9
 801b5e0:	2300      	movs	r3, #0
 801b5e2:	210d      	movs	r1, #13
 801b5e4:	4658      	mov	r0, fp
 801b5e6:	f7f7 ff13 	bl	8013410 <uxr_buffer_submessage_header>
 801b5ea:	8921      	ldrh	r1, [r4, #8]
 801b5ec:	6863      	ldr	r3, [r4, #4]
 801b5ee:	4630      	mov	r0, r6
 801b5f0:	fbb6 f2f1 	udiv	r2, r6, r1
 801b5f4:	fbb3 f3f1 	udiv	r3, r3, r1
 801b5f8:	fb01 6212 	mls	r2, r1, r2, r6
 801b5fc:	2101      	movs	r1, #1
 801b5fe:	b292      	uxth	r2, r2
 801b600:	fb02 f303 	mul.w	r3, r2, r3
 801b604:	6822      	ldr	r2, [r4, #0]
 801b606:	50d7      	str	r7, [r2, r3]
 801b608:	f000 faf6 	bl	801bbf8 <uxr_seq_num_add>
 801b60c:	4606      	mov	r6, r0
 801b60e:	fa1f f38a 	uxth.w	r3, sl
 801b612:	429d      	cmp	r5, r3
 801b614:	d8c9      	bhi.n	801b5aa <uxr_prepare_reliable_buffer_to_write+0xf6>
 801b616:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801b61a:	9d05      	ldr	r5, [sp, #20]
 801b61c:	8920      	ldrh	r0, [r4, #8]
 801b61e:	463a      	mov	r2, r7
 801b620:	6863      	ldr	r3, [r4, #4]
 801b622:	fbb6 f1f0 	udiv	r1, r6, r0
 801b626:	fbb3 f3f0 	udiv	r3, r3, r0
 801b62a:	fb00 6111 	mls	r1, r0, r1, r6
 801b62e:	4658      	mov	r0, fp
 801b630:	b289      	uxth	r1, r1
 801b632:	fb01 f303 	mul.w	r3, r1, r3
 801b636:	6821      	ldr	r1, [r4, #0]
 801b638:	3304      	adds	r3, #4
 801b63a:	4419      	add	r1, r3
 801b63c:	2300      	movs	r3, #0
 801b63e:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801b642:	9700      	str	r7, [sp, #0]
 801b644:	f7f6 fa1c 	bl	8011a80 <ucdr_init_buffer_origin_offset>
 801b648:	9f06      	ldr	r7, [sp, #24]
 801b64a:	4658      	mov	r0, fp
 801b64c:	2302      	movs	r3, #2
 801b64e:	b2ba      	uxth	r2, r7
 801b650:	210d      	movs	r1, #13
 801b652:	f7f7 fedd 	bl	8013410 <uxr_buffer_submessage_header>
 801b656:	f108 0104 	add.w	r1, r8, #4
 801b65a:	9b03      	ldr	r3, [sp, #12]
 801b65c:	f1a5 0208 	sub.w	r2, r5, #8
 801b660:	8925      	ldrh	r5, [r4, #8]
 801b662:	440b      	add	r3, r1
 801b664:	eba2 0208 	sub.w	r2, r2, r8
 801b668:	fbb6 f0f5 	udiv	r0, r6, r5
 801b66c:	4619      	mov	r1, r3
 801b66e:	6863      	ldr	r3, [r4, #4]
 801b670:	fb05 6010 	mls	r0, r5, r0, r6
 801b674:	fbb3 f3f5 	udiv	r3, r3, r5
 801b678:	b280      	uxth	r0, r0
 801b67a:	6825      	ldr	r5, [r4, #0]
 801b67c:	fb00 f303 	mul.w	r3, r0, r3
 801b680:	7b20      	ldrb	r0, [r4, #12]
 801b682:	3004      	adds	r0, #4
 801b684:	4438      	add	r0, r7
 801b686:	50e8      	str	r0, [r5, r3]
 801b688:	9d04      	ldr	r5, [sp, #16]
 801b68a:	4628      	mov	r0, r5
 801b68c:	f7f6 fa0a 	bl	8011aa4 <ucdr_init_buffer>
 801b690:	4628      	mov	r0, r5
 801b692:	4622      	mov	r2, r4
 801b694:	493d      	ldr	r1, [pc, #244]	; (801b78c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801b696:	f7f6 f9d9 	bl	8011a4c <ucdr_set_on_full_buffer_callback>
 801b69a:	2001      	movs	r0, #1
 801b69c:	81e6      	strh	r6, [r4, #14]
 801b69e:	b011      	add	sp, #68	; 0x44
 801b6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6a4:	2101      	movs	r1, #1
 801b6a6:	89e0      	ldrh	r0, [r4, #14]
 801b6a8:	f000 faa6 	bl	801bbf8 <uxr_seq_num_add>
 801b6ac:	4605      	mov	r5, r0
 801b6ae:	8921      	ldrh	r1, [r4, #8]
 801b6b0:	8a60      	ldrh	r0, [r4, #18]
 801b6b2:	f000 faa1 	bl	801bbf8 <uxr_seq_num_add>
 801b6b6:	4601      	mov	r1, r0
 801b6b8:	4628      	mov	r0, r5
 801b6ba:	f000 faa5 	bl	801bc08 <uxr_seq_num_cmp>
 801b6be:	2800      	cmp	r0, #0
 801b6c0:	dd44      	ble.n	801b74c <uxr_prepare_reliable_buffer_to_write+0x298>
 801b6c2:	2000      	movs	r0, #0
 801b6c4:	b011      	add	sp, #68	; 0x44
 801b6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6ca:	8921      	ldrh	r1, [r4, #8]
 801b6cc:	8a60      	ldrh	r0, [r4, #18]
 801b6ce:	9205      	str	r2, [sp, #20]
 801b6d0:	f000 fa92 	bl	801bbf8 <uxr_seq_num_add>
 801b6d4:	4601      	mov	r1, r0
 801b6d6:	4630      	mov	r0, r6
 801b6d8:	f000 fa96 	bl	801bc08 <uxr_seq_num_cmp>
 801b6dc:	2800      	cmp	r0, #0
 801b6de:	9a05      	ldr	r2, [sp, #20]
 801b6e0:	dcef      	bgt.n	801b6c2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b6e2:	8925      	ldrh	r5, [r4, #8]
 801b6e4:	e9d4 7300 	ldrd	r7, r3, [r4]
 801b6e8:	fbb6 f4f5 	udiv	r4, r6, r5
 801b6ec:	fbb3 f3f5 	udiv	r3, r3, r5
 801b6f0:	fb05 6414 	mls	r4, r5, r4, r6
 801b6f4:	b2a4      	uxth	r4, r4
 801b6f6:	fb04 f303 	mul.w	r3, r4, r3
 801b6fa:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801b6fe:	50fa      	str	r2, [r7, r3]
 801b700:	2300      	movs	r3, #0
 801b702:	f8cd 8000 	str.w	r8, [sp]
 801b706:	f7f6 f9bb 	bl	8011a80 <ucdr_init_buffer_origin_offset>
 801b70a:	2001      	movs	r0, #1
 801b70c:	e7da      	b.n	801b6c4 <uxr_prepare_reliable_buffer_to_write+0x210>
 801b70e:	3201      	adds	r2, #1
 801b710:	9306      	str	r3, [sp, #24]
 801b712:	b293      	uxth	r3, r2
 801b714:	4553      	cmp	r3, sl
 801b716:	d8d4      	bhi.n	801b6c2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b718:	e739      	b.n	801b58e <uxr_prepare_reliable_buffer_to_write+0xda>
 801b71a:	4630      	mov	r0, r6
 801b71c:	2101      	movs	r1, #1
 801b71e:	9307      	str	r3, [sp, #28]
 801b720:	f000 fa6a 	bl	801bbf8 <uxr_seq_num_add>
 801b724:	4606      	mov	r6, r0
 801b726:	8920      	ldrh	r0, [r4, #8]
 801b728:	6862      	ldr	r2, [r4, #4]
 801b72a:	fbb6 f1f0 	udiv	r1, r6, r0
 801b72e:	fbb2 f2f0 	udiv	r2, r2, r0
 801b732:	fb00 6111 	mls	r1, r0, r1, r6
 801b736:	b289      	uxth	r1, r1
 801b738:	fb01 f202 	mul.w	r2, r1, r2
 801b73c:	6821      	ldr	r1, [r4, #0]
 801b73e:	3204      	adds	r2, #4
 801b740:	188b      	adds	r3, r1, r2
 801b742:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801b746:	9303      	str	r3, [sp, #12]
 801b748:	9b07      	ldr	r3, [sp, #28]
 801b74a:	e70c      	b.n	801b566 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801b74c:	8921      	ldrh	r1, [r4, #8]
 801b74e:	6863      	ldr	r3, [r4, #4]
 801b750:	9804      	ldr	r0, [sp, #16]
 801b752:	fbb5 f2f1 	udiv	r2, r5, r1
 801b756:	fbb3 f3f1 	udiv	r3, r3, r1
 801b75a:	fb01 5212 	mls	r2, r1, r2, r5
 801b75e:	6821      	ldr	r1, [r4, #0]
 801b760:	b292      	uxth	r2, r2
 801b762:	fb02 f303 	mul.w	r3, r2, r3
 801b766:	7b22      	ldrb	r2, [r4, #12]
 801b768:	3304      	adds	r3, #4
 801b76a:	445a      	add	r2, fp
 801b76c:	4419      	add	r1, r3
 801b76e:	f841 2c04 	str.w	r2, [r1, #-4]
 801b772:	7b23      	ldrb	r3, [r4, #12]
 801b774:	9300      	str	r3, [sp, #0]
 801b776:	2300      	movs	r3, #0
 801b778:	f7f6 f982 	bl	8011a80 <ucdr_init_buffer_origin_offset>
 801b77c:	2001      	movs	r0, #1
 801b77e:	81e5      	strh	r5, [r4, #14]
 801b780:	e7a0      	b.n	801b6c4 <uxr_prepare_reliable_buffer_to_write+0x210>
 801b782:	4682      	mov	sl, r0
 801b784:	e6cb      	b.n	801b51e <uxr_prepare_reliable_buffer_to_write+0x6a>
 801b786:	f10d 0b20 	add.w	fp, sp, #32
 801b78a:	e747      	b.n	801b61c <uxr_prepare_reliable_buffer_to_write+0x168>
 801b78c:	0801b389 	.word	0x0801b389

0801b790 <uxr_prepare_next_reliable_buffer_to_send>:
 801b790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b792:	4604      	mov	r4, r0
 801b794:	461d      	mov	r5, r3
 801b796:	460f      	mov	r7, r1
 801b798:	8a00      	ldrh	r0, [r0, #16]
 801b79a:	2101      	movs	r1, #1
 801b79c:	4616      	mov	r6, r2
 801b79e:	f000 fa2b 	bl	801bbf8 <uxr_seq_num_add>
 801b7a2:	8028      	strh	r0, [r5, #0]
 801b7a4:	8922      	ldrh	r2, [r4, #8]
 801b7a6:	6863      	ldr	r3, [r4, #4]
 801b7a8:	fbb0 f1f2 	udiv	r1, r0, r2
 801b7ac:	fbb3 f3f2 	udiv	r3, r3, r2
 801b7b0:	fb02 0c11 	mls	ip, r2, r1, r0
 801b7b4:	89e1      	ldrh	r1, [r4, #14]
 801b7b6:	fa1f fc8c 	uxth.w	ip, ip
 801b7ba:	fb0c fc03 	mul.w	ip, ip, r3
 801b7be:	6823      	ldr	r3, [r4, #0]
 801b7c0:	f10c 0c04 	add.w	ip, ip, #4
 801b7c4:	4463      	add	r3, ip
 801b7c6:	603b      	str	r3, [r7, #0]
 801b7c8:	6823      	ldr	r3, [r4, #0]
 801b7ca:	449c      	add	ip, r3
 801b7cc:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801b7d0:	6033      	str	r3, [r6, #0]
 801b7d2:	f000 fa19 	bl	801bc08 <uxr_seq_num_cmp>
 801b7d6:	2800      	cmp	r0, #0
 801b7d8:	dd01      	ble.n	801b7de <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801b7da:	2000      	movs	r0, #0
 801b7dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b7de:	7b23      	ldrb	r3, [r4, #12]
 801b7e0:	6832      	ldr	r2, [r6, #0]
 801b7e2:	429a      	cmp	r2, r3
 801b7e4:	d9f9      	bls.n	801b7da <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801b7e6:	8a61      	ldrh	r1, [r4, #18]
 801b7e8:	8a20      	ldrh	r0, [r4, #16]
 801b7ea:	f000 fa09 	bl	801bc00 <uxr_seq_num_sub>
 801b7ee:	8923      	ldrh	r3, [r4, #8]
 801b7f0:	4283      	cmp	r3, r0
 801b7f2:	d0f2      	beq.n	801b7da <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801b7f4:	8828      	ldrh	r0, [r5, #0]
 801b7f6:	89e3      	ldrh	r3, [r4, #14]
 801b7f8:	8220      	strh	r0, [r4, #16]
 801b7fa:	4298      	cmp	r0, r3
 801b7fc:	d001      	beq.n	801b802 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801b7fe:	2001      	movs	r0, #1
 801b800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b802:	2101      	movs	r1, #1
 801b804:	f000 f9f8 	bl	801bbf8 <uxr_seq_num_add>
 801b808:	4603      	mov	r3, r0
 801b80a:	2001      	movs	r0, #1
 801b80c:	81e3      	strh	r3, [r4, #14]
 801b80e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b810 <uxr_update_output_stream_heartbeat_timestamp>:
 801b810:	b570      	push	{r4, r5, r6, lr}
 801b812:	8a01      	ldrh	r1, [r0, #16]
 801b814:	4604      	mov	r4, r0
 801b816:	8a40      	ldrh	r0, [r0, #18]
 801b818:	4615      	mov	r5, r2
 801b81a:	461e      	mov	r6, r3
 801b81c:	f000 f9f4 	bl	801bc08 <uxr_seq_num_cmp>
 801b820:	2800      	cmp	r0, #0
 801b822:	db07      	blt.n	801b834 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801b824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b828:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801b82c:	2000      	movs	r0, #0
 801b82e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801b832:	bd70      	pop	{r4, r5, r6, pc}
 801b834:	f894 0020 	ldrb.w	r0, [r4, #32]
 801b838:	b940      	cbnz	r0, 801b84c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801b83a:	2301      	movs	r3, #1
 801b83c:	f884 3020 	strb.w	r3, [r4, #32]
 801b840:	3564      	adds	r5, #100	; 0x64
 801b842:	f146 0600 	adc.w	r6, r6, #0
 801b846:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801b84a:	bd70      	pop	{r4, r5, r6, pc}
 801b84c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801b850:	4295      	cmp	r5, r2
 801b852:	eb76 0303 	sbcs.w	r3, r6, r3
 801b856:	db04      	blt.n	801b862 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801b858:	1c43      	adds	r3, r0, #1
 801b85a:	2001      	movs	r0, #1
 801b85c:	f884 3020 	strb.w	r3, [r4, #32]
 801b860:	e7ee      	b.n	801b840 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801b862:	2000      	movs	r0, #0
 801b864:	e7ec      	b.n	801b840 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801b866:	bf00      	nop

0801b868 <uxr_begin_output_nack_buffer_it>:
 801b868:	8a40      	ldrh	r0, [r0, #18]
 801b86a:	4770      	bx	lr

0801b86c <uxr_next_reliable_nack_buffer_to_send>:
 801b86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b870:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 801b874:	b197      	cbz	r7, 801b89c <uxr_next_reliable_nack_buffer_to_send+0x30>
 801b876:	4680      	mov	r8, r0
 801b878:	460d      	mov	r5, r1
 801b87a:	4616      	mov	r6, r2
 801b87c:	461c      	mov	r4, r3
 801b87e:	8818      	ldrh	r0, [r3, #0]
 801b880:	2101      	movs	r1, #1
 801b882:	f000 f9b9 	bl	801bbf8 <uxr_seq_num_add>
 801b886:	8020      	strh	r0, [r4, #0]
 801b888:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801b88c:	f000 f9bc 	bl	801bc08 <uxr_seq_num_cmp>
 801b890:	2800      	cmp	r0, #0
 801b892:	dd06      	ble.n	801b8a2 <uxr_next_reliable_nack_buffer_to_send+0x36>
 801b894:	2300      	movs	r3, #0
 801b896:	461f      	mov	r7, r3
 801b898:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 801b89c:	4638      	mov	r0, r7
 801b89e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b8a2:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801b8a6:	8820      	ldrh	r0, [r4, #0]
 801b8a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b8ac:	fbb0 f3f2 	udiv	r3, r0, r2
 801b8b0:	fbb1 fcf2 	udiv	ip, r1, r2
 801b8b4:	fb02 0313 	mls	r3, r2, r3, r0
 801b8b8:	b29b      	uxth	r3, r3
 801b8ba:	fb03 fc0c 	mul.w	ip, r3, ip
 801b8be:	f8d8 3000 	ldr.w	r3, [r8]
 801b8c2:	f10c 0c04 	add.w	ip, ip, #4
 801b8c6:	4463      	add	r3, ip
 801b8c8:	602b      	str	r3, [r5, #0]
 801b8ca:	f8d8 3000 	ldr.w	r3, [r8]
 801b8ce:	4463      	add	r3, ip
 801b8d0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801b8d4:	6033      	str	r3, [r6, #0]
 801b8d6:	f898 200c 	ldrb.w	r2, [r8, #12]
 801b8da:	429a      	cmp	r2, r3
 801b8dc:	d0d0      	beq.n	801b880 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801b8de:	e7dd      	b.n	801b89c <uxr_next_reliable_nack_buffer_to_send+0x30>

0801b8e0 <uxr_process_acknack>:
 801b8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b8e2:	4604      	mov	r4, r0
 801b8e4:	460e      	mov	r6, r1
 801b8e6:	4610      	mov	r0, r2
 801b8e8:	2101      	movs	r1, #1
 801b8ea:	f000 f989 	bl	801bc00 <uxr_seq_num_sub>
 801b8ee:	8a61      	ldrh	r1, [r4, #18]
 801b8f0:	f000 f986 	bl	801bc00 <uxr_seq_num_sub>
 801b8f4:	b1c8      	cbz	r0, 801b92a <uxr_process_acknack+0x4a>
 801b8f6:	4605      	mov	r5, r0
 801b8f8:	2700      	movs	r7, #0
 801b8fa:	2101      	movs	r1, #1
 801b8fc:	8a60      	ldrh	r0, [r4, #18]
 801b8fe:	f000 f97b 	bl	801bbf8 <uxr_seq_num_add>
 801b902:	8923      	ldrh	r3, [r4, #8]
 801b904:	6862      	ldr	r2, [r4, #4]
 801b906:	3701      	adds	r7, #1
 801b908:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801b90c:	6821      	ldr	r1, [r4, #0]
 801b90e:	42bd      	cmp	r5, r7
 801b910:	8260      	strh	r0, [r4, #18]
 801b912:	fbb0 fef3 	udiv	lr, r0, r3
 801b916:	fbb2 f2f3 	udiv	r2, r2, r3
 801b91a:	fb03 031e 	mls	r3, r3, lr, r0
 801b91e:	b29b      	uxth	r3, r3
 801b920:	fb02 f303 	mul.w	r3, r2, r3
 801b924:	f841 c003 	str.w	ip, [r1, r3]
 801b928:	d1e7      	bne.n	801b8fa <uxr_process_acknack+0x1a>
 801b92a:	3e00      	subs	r6, #0
 801b92c:	f04f 0300 	mov.w	r3, #0
 801b930:	bf18      	it	ne
 801b932:	2601      	movne	r6, #1
 801b934:	f884 3020 	strb.w	r3, [r4, #32]
 801b938:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801b93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b93e:	bf00      	nop

0801b940 <uxr_is_output_up_to_date>:
 801b940:	8a01      	ldrh	r1, [r0, #16]
 801b942:	8a40      	ldrh	r0, [r0, #18]
 801b944:	b508      	push	{r3, lr}
 801b946:	f000 f95f 	bl	801bc08 <uxr_seq_num_cmp>
 801b94a:	fab0 f080 	clz	r0, r0
 801b94e:	0940      	lsrs	r0, r0, #5
 801b950:	bd08      	pop	{r3, pc}
 801b952:	bf00      	nop

0801b954 <get_available_free_slots>:
 801b954:	8901      	ldrh	r1, [r0, #8]
 801b956:	b1e1      	cbz	r1, 801b992 <get_available_free_slots+0x3e>
 801b958:	6843      	ldr	r3, [r0, #4]
 801b95a:	f04f 0c00 	mov.w	ip, #0
 801b95e:	b530      	push	{r4, r5, lr}
 801b960:	fbb3 fef1 	udiv	lr, r3, r1
 801b964:	6805      	ldr	r5, [r0, #0]
 801b966:	4662      	mov	r2, ip
 801b968:	7b04      	ldrb	r4, [r0, #12]
 801b96a:	4660      	mov	r0, ip
 801b96c:	f10c 0c01 	add.w	ip, ip, #1
 801b970:	fbb2 f3f1 	udiv	r3, r2, r1
 801b974:	fb01 2313 	mls	r3, r1, r3, r2
 801b978:	fa1f f28c 	uxth.w	r2, ip
 801b97c:	b29b      	uxth	r3, r3
 801b97e:	fb0e f303 	mul.w	r3, lr, r3
 801b982:	58eb      	ldr	r3, [r5, r3]
 801b984:	429c      	cmp	r4, r3
 801b986:	d101      	bne.n	801b98c <get_available_free_slots+0x38>
 801b988:	3001      	adds	r0, #1
 801b98a:	b280      	uxth	r0, r0
 801b98c:	428a      	cmp	r2, r1
 801b98e:	d3ed      	bcc.n	801b96c <get_available_free_slots+0x18>
 801b990:	bd30      	pop	{r4, r5, pc}
 801b992:	4608      	mov	r0, r1
 801b994:	4770      	bx	lr
 801b996:	bf00      	nop

0801b998 <uxr_buffer_request_data>:
 801b998:	b530      	push	{r4, r5, lr}
 801b99a:	b095      	sub	sp, #84	; 0x54
 801b99c:	4604      	mov	r4, r0
 801b99e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801b9a0:	9303      	str	r3, [sp, #12]
 801b9a2:	2d00      	cmp	r5, #0
 801b9a4:	f88d 301c 	strb.w	r3, [sp, #28]
 801b9a8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801b9ac:	f04f 0200 	mov.w	r2, #0
 801b9b0:	bf14      	ite	ne
 801b9b2:	2101      	movne	r1, #1
 801b9b4:	4611      	moveq	r1, r2
 801b9b6:	f88d 201d 	strb.w	r2, [sp, #29]
 801b9ba:	f88d 201e 	strb.w	r2, [sp, #30]
 801b9be:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801b9c2:	d021      	beq.n	801ba08 <uxr_buffer_request_data+0x70>
 801b9c4:	686b      	ldr	r3, [r5, #4]
 801b9c6:	2210      	movs	r2, #16
 801b9c8:	6829      	ldr	r1, [r5, #0]
 801b9ca:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 801b9ce:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 801b9d2:	2308      	movs	r3, #8
 801b9d4:	2100      	movs	r1, #0
 801b9d6:	4620      	mov	r0, r4
 801b9d8:	e9cd 3100 	strd	r3, r1, [sp]
 801b9dc:	ab0c      	add	r3, sp, #48	; 0x30
 801b9de:	9905      	ldr	r1, [sp, #20]
 801b9e0:	f7f7 fa6a 	bl	8012eb8 <uxr_prepare_stream_to_write_submessage>
 801b9e4:	b918      	cbnz	r0, 801b9ee <uxr_buffer_request_data+0x56>
 801b9e6:	4604      	mov	r4, r0
 801b9e8:	4620      	mov	r0, r4
 801b9ea:	b015      	add	sp, #84	; 0x54
 801b9ec:	bd30      	pop	{r4, r5, pc}
 801b9ee:	9904      	ldr	r1, [sp, #16]
 801b9f0:	aa06      	add	r2, sp, #24
 801b9f2:	4620      	mov	r0, r4
 801b9f4:	f7f7 fb9c 	bl	8013130 <uxr_init_base_object_request>
 801b9f8:	4604      	mov	r4, r0
 801b9fa:	a906      	add	r1, sp, #24
 801b9fc:	a80c      	add	r0, sp, #48	; 0x30
 801b9fe:	f7f8 fecf 	bl	80147a0 <uxr_serialize_READ_DATA_Payload>
 801ba02:	4620      	mov	r0, r4
 801ba04:	b015      	add	sp, #84	; 0x54
 801ba06:	bd30      	pop	{r4, r5, pc}
 801ba08:	2208      	movs	r2, #8
 801ba0a:	e7e2      	b.n	801b9d2 <uxr_buffer_request_data+0x3a>

0801ba0c <uxr_buffer_cancel_data>:
 801ba0c:	b510      	push	{r4, lr}
 801ba0e:	2300      	movs	r3, #0
 801ba10:	b094      	sub	sp, #80	; 0x50
 801ba12:	4604      	mov	r4, r0
 801ba14:	9205      	str	r2, [sp, #20]
 801ba16:	9301      	str	r3, [sp, #4]
 801ba18:	f8ad 301c 	strh.w	r3, [sp, #28]
 801ba1c:	f88d 301e 	strb.w	r3, [sp, #30]
 801ba20:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 801ba24:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 801ba28:	2308      	movs	r3, #8
 801ba2a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801ba2e:	2201      	movs	r2, #1
 801ba30:	9300      	str	r3, [sp, #0]
 801ba32:	ab0c      	add	r3, sp, #48	; 0x30
 801ba34:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 801ba38:	2210      	movs	r2, #16
 801ba3a:	f7f7 fa3d 	bl	8012eb8 <uxr_prepare_stream_to_write_submessage>
 801ba3e:	b918      	cbnz	r0, 801ba48 <uxr_buffer_cancel_data+0x3c>
 801ba40:	4604      	mov	r4, r0
 801ba42:	4620      	mov	r0, r4
 801ba44:	b014      	add	sp, #80	; 0x50
 801ba46:	bd10      	pop	{r4, pc}
 801ba48:	9905      	ldr	r1, [sp, #20]
 801ba4a:	aa06      	add	r2, sp, #24
 801ba4c:	4620      	mov	r0, r4
 801ba4e:	f7f7 fb6f 	bl	8013130 <uxr_init_base_object_request>
 801ba52:	4604      	mov	r4, r0
 801ba54:	a906      	add	r1, sp, #24
 801ba56:	a80c      	add	r0, sp, #48	; 0x30
 801ba58:	f7f8 fea2 	bl	80147a0 <uxr_serialize_READ_DATA_Payload>
 801ba5c:	4620      	mov	r0, r4
 801ba5e:	b014      	add	sp, #80	; 0x50
 801ba60:	bd10      	pop	{r4, pc}
 801ba62:	bf00      	nop

0801ba64 <read_submessage_format>:
 801ba64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ba68:	b095      	sub	sp, #84	; 0x54
 801ba6a:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 801ba6e:	b113      	cbz	r3, 801ba76 <read_submessage_format+0x12>
 801ba70:	b015      	add	sp, #84	; 0x54
 801ba72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ba76:	4606      	mov	r6, r0
 801ba78:	981c      	ldr	r0, [sp, #112]	; 0x70
 801ba7a:	460c      	mov	r4, r1
 801ba7c:	4615      	mov	r5, r2
 801ba7e:	9004      	str	r0, [sp, #16]
 801ba80:	4699      	mov	r9, r3
 801ba82:	981d      	ldr	r0, [sp, #116]	; 0x74
 801ba84:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 801ba88:	9005      	str	r0, [sp, #20]
 801ba8a:	a80c      	add	r0, sp, #48	; 0x30
 801ba8c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801ba90:	1a52      	subs	r2, r2, r1
 801ba92:	f7f6 f807 	bl	8011aa4 <ucdr_init_buffer>
 801ba96:	a80c      	add	r0, sp, #48	; 0x30
 801ba98:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801ba9c:	f7f5 ffd6 	bl	8011a4c <ucdr_set_on_full_buffer_callback>
 801baa0:	69e2      	ldr	r2, [r4, #28]
 801baa2:	b19a      	cbz	r2, 801bacc <read_submessage_format+0x68>
 801baa4:	f1b8 0f07 	cmp.w	r8, #7
 801baa8:	f882 9014 	strb.w	r9, [r2, #20]
 801baac:	d040      	beq.n	801bb30 <read_submessage_format+0xcc>
 801baae:	f1b8 0f08 	cmp.w	r8, #8
 801bab2:	d02e      	beq.n	801bb12 <read_submessage_format+0xae>
 801bab4:	f1b8 0f06 	cmp.w	r8, #6
 801bab8:	d011      	beq.n	801bade <read_submessage_format+0x7a>
 801baba:	2301      	movs	r3, #1
 801babc:	7513      	strb	r3, [r2, #20]
 801babe:	4629      	mov	r1, r5
 801bac0:	4620      	mov	r0, r4
 801bac2:	f7f6 f843 	bl	8011b4c <ucdr_advance_buffer>
 801bac6:	b015      	add	sp, #84	; 0x54
 801bac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bacc:	f1b8 0f07 	cmp.w	r8, #7
 801bad0:	d02e      	beq.n	801bb30 <read_submessage_format+0xcc>
 801bad2:	f1b8 0f08 	cmp.w	r8, #8
 801bad6:	d01c      	beq.n	801bb12 <read_submessage_format+0xae>
 801bad8:	f1b8 0f06 	cmp.w	r8, #6
 801badc:	d1ef      	bne.n	801babe <read_submessage_format+0x5a>
 801bade:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 801bae2:	f1b8 0f00 	cmp.w	r8, #0
 801bae6:	d011      	beq.n	801bb0c <read_submessage_format+0xa8>
 801bae8:	ab0c      	add	r3, sp, #48	; 0x30
 801baea:	9501      	str	r5, [sp, #4]
 801baec:	463a      	mov	r2, r7
 801baee:	4630      	mov	r0, r6
 801baf0:	9300      	str	r3, [sp, #0]
 801baf2:	2306      	movs	r3, #6
 801baf4:	f88d 3016 	strb.w	r3, [sp, #22]
 801baf8:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 801bafc:	9302      	str	r3, [sp, #8]
 801bafe:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801bb02:	47c0      	blx	r8
 801bb04:	2301      	movs	r3, #1
 801bb06:	69e2      	ldr	r2, [r4, #28]
 801bb08:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801bb0c:	2a00      	cmp	r2, #0
 801bb0e:	d1d4      	bne.n	801baba <read_submessage_format+0x56>
 801bb10:	e7d5      	b.n	801babe <read_submessage_format+0x5a>
 801bb12:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 801bb16:	2b00      	cmp	r3, #0
 801bb18:	d0f8      	beq.n	801bb0c <read_submessage_format+0xa8>
 801bb1a:	a80c      	add	r0, sp, #48	; 0x30
 801bb1c:	a906      	add	r1, sp, #24
 801bb1e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801bb22:	f7f8 ff09 	bl	8014938 <uxr_deserialize_SampleIdentity>
 801bb26:	b9a0      	cbnz	r0, 801bb52 <read_submessage_format+0xee>
 801bb28:	69e2      	ldr	r2, [r4, #28]
 801bb2a:	2a00      	cmp	r2, #0
 801bb2c:	d1c5      	bne.n	801baba <read_submessage_format+0x56>
 801bb2e:	e7c6      	b.n	801babe <read_submessage_format+0x5a>
 801bb30:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 801bb34:	b13b      	cbz	r3, 801bb46 <read_submessage_format+0xe2>
 801bb36:	a906      	add	r1, sp, #24
 801bb38:	a80c      	add	r0, sp, #48	; 0x30
 801bb3a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801bb3e:	f7f8 fbcf 	bl	80142e0 <uxr_deserialize_BaseObjectRequest>
 801bb42:	bb60      	cbnz	r0, 801bb9e <read_submessage_format+0x13a>
 801bb44:	69e2      	ldr	r2, [r4, #28]
 801bb46:	68a3      	ldr	r3, [r4, #8]
 801bb48:	442b      	add	r3, r5
 801bb4a:	60a3      	str	r3, [r4, #8]
 801bb4c:	2a00      	cmp	r2, #0
 801bb4e:	d1b4      	bne.n	801baba <read_submessage_format+0x56>
 801bb50:	e7b5      	b.n	801babe <read_submessage_format+0x5a>
 801bb52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bb54:	a80c      	add	r0, sp, #48	; 0x30
 801bb56:	eba8 0803 	sub.w	r8, r8, r3
 801bb5a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801bb5e:	44a8      	add	r8, r5
 801bb60:	1a52      	subs	r2, r2, r1
 801bb62:	f7f5 ff9f 	bl	8011aa4 <ucdr_init_buffer>
 801bb66:	a80c      	add	r0, sp, #48	; 0x30
 801bb68:	fa1f f888 	uxth.w	r8, r8
 801bb6c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801bb70:	f7f5 ff6c 	bl	8011a4c <ucdr_set_on_full_buffer_callback>
 801bb74:	ab0c      	add	r3, sp, #48	; 0x30
 801bb76:	2108      	movs	r1, #8
 801bb78:	f8cd 8004 	str.w	r8, [sp, #4]
 801bb7c:	9300      	str	r3, [sp, #0]
 801bb7e:	463a      	mov	r2, r7
 801bb80:	f88d 1016 	strb.w	r1, [sp, #22]
 801bb84:	ab06      	add	r3, sp, #24
 801bb86:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 801bb8a:	4630      	mov	r0, r6
 801bb8c:	9102      	str	r1, [sp, #8]
 801bb8e:	9905      	ldr	r1, [sp, #20]
 801bb90:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 801bb94:	47b8      	blx	r7
 801bb96:	2301      	movs	r3, #1
 801bb98:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801bb9c:	e7c4      	b.n	801bb28 <read_submessage_format+0xc4>
 801bb9e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801bba2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bba4:	a80c      	add	r0, sp, #48	; 0x30
 801bba6:	1a52      	subs	r2, r2, r1
 801bba8:	eba8 0803 	sub.w	r8, r8, r3
 801bbac:	f7f5 ff7a 	bl	8011aa4 <ucdr_init_buffer>
 801bbb0:	a80c      	add	r0, sp, #48	; 0x30
 801bbb2:	44a8      	add	r8, r5
 801bbb4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801bbb8:	f7f5 ff48 	bl	8011a4c <ucdr_set_on_full_buffer_callback>
 801bbbc:	ab0c      	add	r3, sp, #48	; 0x30
 801bbbe:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801bbc2:	fa1f f888 	uxth.w	r8, r8
 801bbc6:	9300      	str	r3, [sp, #0]
 801bbc8:	463a      	mov	r2, r7
 801bbca:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801bbce:	4630      	mov	r0, r6
 801bbd0:	f8cd 8004 	str.w	r8, [sp, #4]
 801bbd4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801bbd8:	2107      	movs	r1, #7
 801bbda:	f88d 1016 	strb.w	r1, [sp, #22]
 801bbde:	b29b      	uxth	r3, r3
 801bbe0:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 801bbe4:	9102      	str	r1, [sp, #8]
 801bbe6:	9905      	ldr	r1, [sp, #20]
 801bbe8:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 801bbec:	47b8      	blx	r7
 801bbee:	2301      	movs	r3, #1
 801bbf0:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801bbf4:	e7a6      	b.n	801bb44 <read_submessage_format+0xe0>
 801bbf6:	bf00      	nop

0801bbf8 <uxr_seq_num_add>:
 801bbf8:	4408      	add	r0, r1
 801bbfa:	b280      	uxth	r0, r0
 801bbfc:	4770      	bx	lr
 801bbfe:	bf00      	nop

0801bc00 <uxr_seq_num_sub>:
 801bc00:	1a40      	subs	r0, r0, r1
 801bc02:	b280      	uxth	r0, r0
 801bc04:	4770      	bx	lr
 801bc06:	bf00      	nop

0801bc08 <uxr_seq_num_cmp>:
 801bc08:	4288      	cmp	r0, r1
 801bc0a:	d011      	beq.n	801bc30 <uxr_seq_num_cmp+0x28>
 801bc0c:	d309      	bcc.n	801bc22 <uxr_seq_num_cmp+0x1a>
 801bc0e:	4288      	cmp	r0, r1
 801bc10:	d910      	bls.n	801bc34 <uxr_seq_num_cmp+0x2c>
 801bc12:	1a40      	subs	r0, r0, r1
 801bc14:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801bc18:	bfd4      	ite	le
 801bc1a:	2001      	movle	r0, #1
 801bc1c:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 801bc20:	4770      	bx	lr
 801bc22:	1a0b      	subs	r3, r1, r0
 801bc24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801bc28:	daf1      	bge.n	801bc0e <uxr_seq_num_cmp+0x6>
 801bc2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bc2e:	4770      	bx	lr
 801bc30:	2000      	movs	r0, #0
 801bc32:	4770      	bx	lr
 801bc34:	2001      	movs	r0, #1
 801bc36:	4770      	bx	lr

0801bc38 <uxr_init_framing_io>:
 801bc38:	2300      	movs	r3, #0
 801bc3a:	7041      	strb	r1, [r0, #1]
 801bc3c:	7003      	strb	r3, [r0, #0]
 801bc3e:	8583      	strh	r3, [r0, #44]	; 0x2c
 801bc40:	4770      	bx	lr
 801bc42:	bf00      	nop

0801bc44 <uxr_write_framed_msg>:
 801bc44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc48:	4617      	mov	r7, r2
 801bc4a:	7842      	ldrb	r2, [r0, #1]
 801bc4c:	460e      	mov	r6, r1
 801bc4e:	b083      	sub	sp, #12
 801bc50:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 801bc54:	469b      	mov	fp, r3
 801bc56:	237e      	movs	r3, #126	; 0x7e
 801bc58:	4604      	mov	r4, r0
 801bc5a:	2901      	cmp	r1, #1
 801bc5c:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 801bc60:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801bc64:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801bc68:	f240 8115 	bls.w	801be96 <uxr_write_framed_msg+0x252>
 801bc6c:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801bc70:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 801bc74:	2202      	movs	r2, #2
 801bc76:	2901      	cmp	r1, #1
 801bc78:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801bc7c:	d952      	bls.n	801bd24 <uxr_write_framed_msg+0xe0>
 801bc7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bc80:	2103      	movs	r1, #3
 801bc82:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 801bc86:	b2dd      	uxtb	r5, r3
 801bc88:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801bc8c:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801bc90:	2a01      	cmp	r2, #1
 801bc92:	d95c      	bls.n	801bd4e <uxr_write_framed_msg+0x10a>
 801bc94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bc96:	1862      	adds	r2, r4, r1
 801bc98:	3101      	adds	r1, #1
 801bc9a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801bc9e:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 801bca2:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801bca6:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801bcaa:	2a01      	cmp	r2, #1
 801bcac:	d961      	bls.n	801bd72 <uxr_write_framed_msg+0x12e>
 801bcae:	1c4a      	adds	r2, r1, #1
 801bcb0:	4421      	add	r1, r4
 801bcb2:	b2d2      	uxtb	r2, r2
 801bcb4:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 801bcb8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	d06a      	beq.n	801bd96 <uxr_write_framed_msg+0x152>
 801bcc0:	f04f 0800 	mov.w	r8, #0
 801bcc4:	46c1      	mov	r9, r8
 801bcc6:	e016      	b.n	801bcf6 <uxr_write_framed_msg+0xb2>
 801bcc8:	2a29      	cmp	r2, #41	; 0x29
 801bcca:	d868      	bhi.n	801bd9e <uxr_write_framed_msg+0x15a>
 801bccc:	18a0      	adds	r0, r4, r2
 801bcce:	3201      	adds	r2, #1
 801bcd0:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801bcd4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801bcd8:	ea88 0101 	eor.w	r1, r8, r1
 801bcdc:	4b7d      	ldr	r3, [pc, #500]	; (801bed4 <uxr_write_framed_msg+0x290>)
 801bcde:	f109 0901 	add.w	r9, r9, #1
 801bce2:	b2c9      	uxtb	r1, r1
 801bce4:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 801bce8:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 801bcec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bcee:	454b      	cmp	r3, r9
 801bcf0:	d969      	bls.n	801bdc6 <uxr_write_framed_msg+0x182>
 801bcf2:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801bcf6:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801bcfa:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 801bcfe:	2801      	cmp	r0, #1
 801bd00:	d8e2      	bhi.n	801bcc8 <uxr_write_framed_msg+0x84>
 801bd02:	1c50      	adds	r0, r2, #1
 801bd04:	b2c0      	uxtb	r0, r0
 801bd06:	2829      	cmp	r0, #41	; 0x29
 801bd08:	d849      	bhi.n	801bd9e <uxr_write_framed_msg+0x15a>
 801bd0a:	18a0      	adds	r0, r4, r2
 801bd0c:	f04f 037d 	mov.w	r3, #125	; 0x7d
 801bd10:	3202      	adds	r2, #2
 801bd12:	f081 0520 	eor.w	r5, r1, #32
 801bd16:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801bd1a:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 801bd1e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801bd22:	e7d9      	b.n	801bcd8 <uxr_write_framed_msg+0x94>
 801bd24:	2104      	movs	r1, #4
 801bd26:	f04f 0c03 	mov.w	ip, #3
 801bd2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bd2c:	4422      	add	r2, r4
 801bd2e:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 801bd32:	44a4      	add	ip, r4
 801bd34:	b2dd      	uxtb	r5, r3
 801bd36:	f080 0020 	eor.w	r0, r0, #32
 801bd3a:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 801bd3e:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801bd42:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 801bd46:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801bd4a:	2a01      	cmp	r2, #1
 801bd4c:	d8a2      	bhi.n	801bc94 <uxr_write_framed_msg+0x50>
 801bd4e:	1862      	adds	r2, r4, r1
 801bd50:	207d      	movs	r0, #125	; 0x7d
 801bd52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bd54:	f085 0520 	eor.w	r5, r5, #32
 801bd58:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 801bd5c:	3102      	adds	r1, #2
 801bd5e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801bd62:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 801bd66:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801bd6a:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801bd6e:	2a01      	cmp	r2, #1
 801bd70:	d89d      	bhi.n	801bcae <uxr_write_framed_msg+0x6a>
 801bd72:	1c4d      	adds	r5, r1, #1
 801bd74:	1c8a      	adds	r2, r1, #2
 801bd76:	f080 0020 	eor.w	r0, r0, #32
 801bd7a:	4421      	add	r1, r4
 801bd7c:	fa54 f585 	uxtab	r5, r4, r5
 801bd80:	b2d2      	uxtb	r2, r2
 801bd82:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 801bd86:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 801bd8a:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 801bd8e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801bd92:	2b00      	cmp	r3, #0
 801bd94:	d194      	bne.n	801bcc0 <uxr_write_framed_msg+0x7c>
 801bd96:	4619      	mov	r1, r3
 801bd98:	f8ad 3004 	strh.w	r3, [sp, #4]
 801bd9c:	e019      	b.n	801bdd2 <uxr_write_framed_msg+0x18e>
 801bd9e:	2500      	movs	r5, #0
 801bda0:	e000      	b.n	801bda4 <uxr_write_framed_msg+0x160>
 801bda2:	b160      	cbz	r0, 801bdbe <uxr_write_framed_msg+0x17a>
 801bda4:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801bda8:	1b52      	subs	r2, r2, r5
 801bdaa:	4653      	mov	r3, sl
 801bdac:	4638      	mov	r0, r7
 801bdae:	4421      	add	r1, r4
 801bdb0:	47b0      	blx	r6
 801bdb2:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801bdb6:	4405      	add	r5, r0
 801bdb8:	4295      	cmp	r5, r2
 801bdba:	d3f2      	bcc.n	801bda2 <uxr_write_framed_msg+0x15e>
 801bdbc:	d066      	beq.n	801be8c <uxr_write_framed_msg+0x248>
 801bdbe:	2000      	movs	r0, #0
 801bdc0:	b003      	add	sp, #12
 801bdc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdc6:	fa5f f188 	uxtb.w	r1, r8
 801bdca:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801bdce:	f8ad 8004 	strh.w	r8, [sp, #4]
 801bdd2:	f04f 0900 	mov.w	r9, #0
 801bdd6:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 801bdda:	46c8      	mov	r8, r9
 801bddc:	e013      	b.n	801be06 <uxr_write_framed_msg+0x1c2>
 801bdde:	2a29      	cmp	r2, #41	; 0x29
 801bde0:	d824      	bhi.n	801be2c <uxr_write_framed_msg+0x1e8>
 801bde2:	18a3      	adds	r3, r4, r2
 801bde4:	3201      	adds	r2, #1
 801bde6:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 801bdea:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801bdee:	f109 0901 	add.w	r9, r9, #1
 801bdf2:	f1b9 0f02 	cmp.w	r9, #2
 801bdf6:	d02d      	beq.n	801be54 <uxr_write_framed_msg+0x210>
 801bdf8:	f109 0308 	add.w	r3, r9, #8
 801bdfc:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801be00:	446b      	add	r3, sp
 801be02:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 801be06:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 801be0a:	2b01      	cmp	r3, #1
 801be0c:	d8e7      	bhi.n	801bdde <uxr_write_framed_msg+0x19a>
 801be0e:	1c53      	adds	r3, r2, #1
 801be10:	b2db      	uxtb	r3, r3
 801be12:	2b29      	cmp	r3, #41	; 0x29
 801be14:	d80a      	bhi.n	801be2c <uxr_write_framed_msg+0x1e8>
 801be16:	18a3      	adds	r3, r4, r2
 801be18:	f081 0120 	eor.w	r1, r1, #32
 801be1c:	3202      	adds	r2, #2
 801be1e:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 801be22:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 801be26:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801be2a:	e7e0      	b.n	801bdee <uxr_write_framed_msg+0x1aa>
 801be2c:	2500      	movs	r5, #0
 801be2e:	e001      	b.n	801be34 <uxr_write_framed_msg+0x1f0>
 801be30:	2800      	cmp	r0, #0
 801be32:	d0c4      	beq.n	801bdbe <uxr_write_framed_msg+0x17a>
 801be34:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801be38:	1b52      	subs	r2, r2, r5
 801be3a:	4653      	mov	r3, sl
 801be3c:	4638      	mov	r0, r7
 801be3e:	4421      	add	r1, r4
 801be40:	47b0      	blx	r6
 801be42:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801be46:	4405      	add	r5, r0
 801be48:	4295      	cmp	r5, r2
 801be4a:	d3f1      	bcc.n	801be30 <uxr_write_framed_msg+0x1ec>
 801be4c:	d1b7      	bne.n	801bdbe <uxr_write_framed_msg+0x17a>
 801be4e:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 801be52:	e7d1      	b.n	801bdf8 <uxr_write_framed_msg+0x1b4>
 801be54:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801be58:	b19a      	cbz	r2, 801be82 <uxr_write_framed_msg+0x23e>
 801be5a:	2500      	movs	r5, #0
 801be5c:	e001      	b.n	801be62 <uxr_write_framed_msg+0x21e>
 801be5e:	2800      	cmp	r0, #0
 801be60:	d0ad      	beq.n	801bdbe <uxr_write_framed_msg+0x17a>
 801be62:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801be66:	1b52      	subs	r2, r2, r5
 801be68:	4653      	mov	r3, sl
 801be6a:	4638      	mov	r0, r7
 801be6c:	4421      	add	r1, r4
 801be6e:	47b0      	blx	r6
 801be70:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801be74:	4405      	add	r5, r0
 801be76:	4295      	cmp	r5, r2
 801be78:	d3f1      	bcc.n	801be5e <uxr_write_framed_msg+0x21a>
 801be7a:	d1a0      	bne.n	801bdbe <uxr_write_framed_msg+0x17a>
 801be7c:	2300      	movs	r3, #0
 801be7e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801be82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801be84:	b298      	uxth	r0, r3
 801be86:	b003      	add	sp, #12
 801be88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be8c:	f04f 0300 	mov.w	r3, #0
 801be90:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801be94:	e72a      	b.n	801bcec <uxr_write_framed_msg+0xa8>
 801be96:	217d      	movs	r1, #125	; 0x7d
 801be98:	f082 0220 	eor.w	r2, r2, #32
 801be9c:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 801bea0:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801bea4:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 801bea8:	2203      	movs	r2, #3
 801beaa:	2901      	cmp	r1, #1
 801beac:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801beb0:	d803      	bhi.n	801beba <uxr_write_framed_msg+0x276>
 801beb2:	2105      	movs	r1, #5
 801beb4:	f04f 0c04 	mov.w	ip, #4
 801beb8:	e737      	b.n	801bd2a <uxr_write_framed_msg+0xe6>
 801beba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bebc:	2104      	movs	r1, #4
 801bebe:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 801bec2:	b2dd      	uxtb	r5, r3
 801bec4:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801bec8:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801becc:	2a01      	cmp	r2, #1
 801bece:	f63f aee1 	bhi.w	801bc94 <uxr_write_framed_msg+0x50>
 801bed2:	e73c      	b.n	801bd4e <uxr_write_framed_msg+0x10a>
 801bed4:	08020774 	.word	0x08020774

0801bed8 <uxr_framing_read_transport>:
 801bed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bedc:	4604      	mov	r4, r0
 801bede:	b085      	sub	sp, #20
 801bee0:	4692      	mov	sl, r2
 801bee2:	4689      	mov	r9, r1
 801bee4:	461d      	mov	r5, r3
 801bee6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801bee8:	f7f7 fad8 	bl	801349c <uxr_millis>
 801beec:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801bef0:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 801bef4:	4680      	mov	r8, r0
 801bef6:	42ba      	cmp	r2, r7
 801bef8:	d05f      	beq.n	801bfba <uxr_framing_read_transport+0xe2>
 801befa:	d817      	bhi.n	801bf2c <uxr_framing_read_transport+0x54>
 801befc:	3f01      	subs	r7, #1
 801befe:	1aba      	subs	r2, r7, r2
 801bf00:	2700      	movs	r7, #0
 801bf02:	b2d2      	uxtb	r2, r2
 801bf04:	42b2      	cmp	r2, r6
 801bf06:	d81a      	bhi.n	801bf3e <uxr_framing_read_transport+0x66>
 801bf08:	19d3      	adds	r3, r2, r7
 801bf0a:	42b3      	cmp	r3, r6
 801bf0c:	d852      	bhi.n	801bfb4 <uxr_framing_read_transport+0xdc>
 801bf0e:	b9d2      	cbnz	r2, 801bf46 <uxr_framing_read_transport+0x6e>
 801bf10:	2600      	movs	r6, #0
 801bf12:	f7f7 fac3 	bl	801349c <uxr_millis>
 801bf16:	682b      	ldr	r3, [r5, #0]
 801bf18:	eba0 0008 	sub.w	r0, r0, r8
 801bf1c:	1a1b      	subs	r3, r3, r0
 801bf1e:	4630      	mov	r0, r6
 801bf20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bf24:	602b      	str	r3, [r5, #0]
 801bf26:	b005      	add	sp, #20
 801bf28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf2c:	2f00      	cmp	r7, #0
 801bf2e:	d060      	beq.n	801bff2 <uxr_framing_read_transport+0x11a>
 801bf30:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 801bf34:	3f01      	subs	r7, #1
 801bf36:	b2d2      	uxtb	r2, r2
 801bf38:	b2ff      	uxtb	r7, r7
 801bf3a:	42b2      	cmp	r2, r6
 801bf3c:	d9e4      	bls.n	801bf08 <uxr_framing_read_transport+0x30>
 801bf3e:	b2f2      	uxtb	r2, r6
 801bf40:	2700      	movs	r7, #0
 801bf42:	2a00      	cmp	r2, #0
 801bf44:	d0e4      	beq.n	801bf10 <uxr_framing_read_transport+0x38>
 801bf46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bf48:	4650      	mov	r0, sl
 801bf4a:	9203      	str	r2, [sp, #12]
 801bf4c:	9300      	str	r3, [sp, #0]
 801bf4e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801bf52:	682b      	ldr	r3, [r5, #0]
 801bf54:	3102      	adds	r1, #2
 801bf56:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 801bffc <uxr_framing_read_transport+0x124>
 801bf5a:	4421      	add	r1, r4
 801bf5c:	47c8      	blx	r9
 801bf5e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801bf62:	4606      	mov	r6, r0
 801bf64:	4403      	add	r3, r0
 801bf66:	0859      	lsrs	r1, r3, #1
 801bf68:	fbab 2101 	umull	r2, r1, fp, r1
 801bf6c:	222a      	movs	r2, #42	; 0x2a
 801bf6e:	0889      	lsrs	r1, r1, #2
 801bf70:	fb02 3111 	mls	r1, r2, r1, r3
 801bf74:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 801bf78:	2800      	cmp	r0, #0
 801bf7a:	d0c9      	beq.n	801bf10 <uxr_framing_read_transport+0x38>
 801bf7c:	9a03      	ldr	r2, [sp, #12]
 801bf7e:	4290      	cmp	r0, r2
 801bf80:	d1c7      	bne.n	801bf12 <uxr_framing_read_transport+0x3a>
 801bf82:	2f00      	cmp	r7, #0
 801bf84:	d0c5      	beq.n	801bf12 <uxr_framing_read_transport+0x3a>
 801bf86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bf88:	3102      	adds	r1, #2
 801bf8a:	463a      	mov	r2, r7
 801bf8c:	4650      	mov	r0, sl
 801bf8e:	4421      	add	r1, r4
 801bf90:	9300      	str	r3, [sp, #0]
 801bf92:	2300      	movs	r3, #0
 801bf94:	47c8      	blx	r9
 801bf96:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801bf9a:	4406      	add	r6, r0
 801bf9c:	1813      	adds	r3, r2, r0
 801bf9e:	085a      	lsrs	r2, r3, #1
 801bfa0:	fbab 1b02 	umull	r1, fp, fp, r2
 801bfa4:	222a      	movs	r2, #42	; 0x2a
 801bfa6:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 801bfaa:	fb02 331b 	mls	r3, r2, fp, r3
 801bfae:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801bfb2:	e7ae      	b.n	801bf12 <uxr_framing_read_transport+0x3a>
 801bfb4:	1ab6      	subs	r6, r6, r2
 801bfb6:	b2f7      	uxtb	r7, r6
 801bfb8:	e7a9      	b.n	801bf0e <uxr_framing_read_transport+0x36>
 801bfba:	2300      	movs	r3, #0
 801bfbc:	2e28      	cmp	r6, #40	; 0x28
 801bfbe:	85a3      	strh	r3, [r4, #44]	; 0x2c
 801bfc0:	d9bd      	bls.n	801bf3e <uxr_framing_read_transport+0x66>
 801bfc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bfc4:	2229      	movs	r2, #41	; 0x29
 801bfc6:	1ca1      	adds	r1, r4, #2
 801bfc8:	4650      	mov	r0, sl
 801bfca:	9300      	str	r3, [sp, #0]
 801bfcc:	682b      	ldr	r3, [r5, #0]
 801bfce:	47c8      	blx	r9
 801bfd0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801bfd4:	4606      	mov	r6, r0
 801bfd6:	212a      	movs	r1, #42	; 0x2a
 801bfd8:	4403      	add	r3, r0
 801bfda:	4808      	ldr	r0, [pc, #32]	; (801bffc <uxr_framing_read_transport+0x124>)
 801bfdc:	085a      	lsrs	r2, r3, #1
 801bfde:	fba0 0202 	umull	r0, r2, r0, r2
 801bfe2:	0892      	lsrs	r2, r2, #2
 801bfe4:	fb01 3312 	mls	r3, r1, r2, r3
 801bfe8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801bfec:	2e00      	cmp	r6, #0
 801bfee:	d08f      	beq.n	801bf10 <uxr_framing_read_transport+0x38>
 801bff0:	e78f      	b.n	801bf12 <uxr_framing_read_transport+0x3a>
 801bff2:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 801bff6:	b2d2      	uxtb	r2, r2
 801bff8:	e784      	b.n	801bf04 <uxr_framing_read_transport+0x2c>
 801bffa:	bf00      	nop
 801bffc:	30c30c31 	.word	0x30c30c31

0801c000 <uxr_read_framed_msg>:
 801c000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c004:	461e      	mov	r6, r3
 801c006:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801c00a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 801c00e:	b083      	sub	sp, #12
 801c010:	4604      	mov	r4, r0
 801c012:	4688      	mov	r8, r1
 801c014:	429d      	cmp	r5, r3
 801c016:	4691      	mov	r9, r2
 801c018:	f000 818c 	beq.w	801c334 <uxr_read_framed_msg+0x334>
 801c01c:	7823      	ldrb	r3, [r4, #0]
 801c01e:	4dc3      	ldr	r5, [pc, #780]	; (801c32c <uxr_read_framed_msg+0x32c>)
 801c020:	4fc3      	ldr	r7, [pc, #780]	; (801c330 <uxr_read_framed_msg+0x330>)
 801c022:	2b07      	cmp	r3, #7
 801c024:	d8fd      	bhi.n	801c022 <uxr_read_framed_msg+0x22>
 801c026:	e8df f013 	tbh	[pc, r3, lsl #1]
 801c02a:	011c      	.short	0x011c
 801c02c:	00d900fb 	.word	0x00d900fb
 801c030:	008f00ba 	.word	0x008f00ba
 801c034:	00320051 	.word	0x00320051
 801c038:	0008      	.short	0x0008
 801c03a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801c03e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801c042:	4299      	cmp	r1, r3
 801c044:	f000 814d 	beq.w	801c2e2 <uxr_read_framed_msg+0x2e2>
 801c048:	18e2      	adds	r2, r4, r3
 801c04a:	7892      	ldrb	r2, [r2, #2]
 801c04c:	2a7d      	cmp	r2, #125	; 0x7d
 801c04e:	f000 81b8 	beq.w	801c3c2 <uxr_read_framed_msg+0x3c2>
 801c052:	3301      	adds	r3, #1
 801c054:	212a      	movs	r1, #42	; 0x2a
 801c056:	2a7e      	cmp	r2, #126	; 0x7e
 801c058:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801c05c:	fba5 c000 	umull	ip, r0, r5, r0
 801c060:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801c064:	fb01 3310 	mls	r3, r1, r0, r3
 801c068:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c06c:	f000 8257 	beq.w	801c51e <uxr_read_framed_msg+0x51e>
 801c070:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801c072:	2000      	movs	r0, #0
 801c074:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 801c076:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801c07a:	7020      	strb	r0, [r4, #0]
 801c07c:	b29b      	uxth	r3, r3
 801c07e:	4299      	cmp	r1, r3
 801c080:	86a3      	strh	r3, [r4, #52]	; 0x34
 801c082:	f000 8178 	beq.w	801c376 <uxr_read_framed_msg+0x376>
 801c086:	2000      	movs	r0, #0
 801c088:	b003      	add	sp, #12
 801c08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c08e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801c092:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801c096:	4298      	cmp	r0, r3
 801c098:	f000 8132 	beq.w	801c300 <uxr_read_framed_msg+0x300>
 801c09c:	18e2      	adds	r2, r4, r3
 801c09e:	7891      	ldrb	r1, [r2, #2]
 801c0a0:	297d      	cmp	r1, #125	; 0x7d
 801c0a2:	f000 8170 	beq.w	801c386 <uxr_read_framed_msg+0x386>
 801c0a6:	3301      	adds	r3, #1
 801c0a8:	202a      	movs	r0, #42	; 0x2a
 801c0aa:	297e      	cmp	r1, #126	; 0x7e
 801c0ac:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801c0b0:	fba5 c202 	umull	ip, r2, r5, r2
 801c0b4:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c0b8:	fb00 3312 	mls	r3, r0, r2, r3
 801c0bc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c0c0:	f000 821d 	beq.w	801c4fe <uxr_read_framed_msg+0x4fe>
 801c0c4:	2307      	movs	r3, #7
 801c0c6:	86a1      	strh	r1, [r4, #52]	; 0x34
 801c0c8:	7023      	strb	r3, [r4, #0]
 801c0ca:	e7aa      	b.n	801c022 <uxr_read_framed_msg+0x22>
 801c0cc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801c0ce:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 801c0d2:	459e      	cmp	lr, r3
 801c0d4:	d827      	bhi.n	801c126 <uxr_read_framed_msg+0x126>
 801c0d6:	e032      	b.n	801c13e <uxr_read_framed_msg+0x13e>
 801c0d8:	fba5 b101 	umull	fp, r1, r5, r1
 801c0dc:	f89c c002 	ldrb.w	ip, [ip, #2]
 801c0e0:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 801c0e4:	0889      	lsrs	r1, r1, #2
 801c0e6:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 801c0ea:	fb0b 0111 	mls	r1, fp, r1, r0
 801c0ee:	f000 80d4 	beq.w	801c29a <uxr_read_framed_msg+0x29a>
 801c0f2:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801c0f6:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 801c0fa:	f000 80cb 	beq.w	801c294 <uxr_read_framed_msg+0x294>
 801c0fe:	f806 c003 	strb.w	ip, [r6, r3]
 801c102:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801c104:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801c106:	ea80 010c 	eor.w	r1, r0, ip
 801c10a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 801c10e:	3301      	adds	r3, #1
 801c110:	b2c9      	uxtb	r1, r1
 801c112:	b29b      	uxth	r3, r3
 801c114:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 801c118:	4573      	cmp	r3, lr
 801c11a:	8663      	strh	r3, [r4, #50]	; 0x32
 801c11c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 801c120:	86e2      	strh	r2, [r4, #54]	; 0x36
 801c122:	f080 811d 	bcs.w	801c360 <uxr_read_framed_msg+0x360>
 801c126:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801c12a:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 801c12e:	1c50      	adds	r0, r2, #1
 801c130:	eb04 0c02 	add.w	ip, r4, r2
 801c134:	4592      	cmp	sl, r2
 801c136:	ea4f 0150 	mov.w	r1, r0, lsr #1
 801c13a:	d1cd      	bne.n	801c0d8 <uxr_read_framed_msg+0xd8>
 801c13c:	459e      	cmp	lr, r3
 801c13e:	f040 8114 	bne.w	801c36a <uxr_read_framed_msg+0x36a>
 801c142:	2306      	movs	r3, #6
 801c144:	7023      	strb	r3, [r4, #0]
 801c146:	e76c      	b.n	801c022 <uxr_read_framed_msg+0x22>
 801c148:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801c14c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801c150:	4298      	cmp	r0, r3
 801c152:	f000 80c6 	beq.w	801c2e2 <uxr_read_framed_msg+0x2e2>
 801c156:	18e2      	adds	r2, r4, r3
 801c158:	7891      	ldrb	r1, [r2, #2]
 801c15a:	297d      	cmp	r1, #125	; 0x7d
 801c15c:	f000 8193 	beq.w	801c486 <uxr_read_framed_msg+0x486>
 801c160:	3301      	adds	r3, #1
 801c162:	202a      	movs	r0, #42	; 0x2a
 801c164:	297e      	cmp	r1, #126	; 0x7e
 801c166:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801c16a:	fba5 c202 	umull	ip, r2, r5, r2
 801c16e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c172:	fb00 3312 	mls	r3, r0, r2, r3
 801c176:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c17a:	f000 81d0 	beq.w	801c51e <uxr_read_framed_msg+0x51e>
 801c17e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801c180:	2000      	movs	r0, #0
 801c182:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801c186:	990c      	ldr	r1, [sp, #48]	; 0x30
 801c188:	8660      	strh	r0, [r4, #50]	; 0x32
 801c18a:	b29b      	uxth	r3, r3
 801c18c:	86e0      	strh	r0, [r4, #54]	; 0x36
 801c18e:	428b      	cmp	r3, r1
 801c190:	8623      	strh	r3, [r4, #48]	; 0x30
 801c192:	f240 80e2 	bls.w	801c35a <uxr_read_framed_msg+0x35a>
 801c196:	7020      	strb	r0, [r4, #0]
 801c198:	b003      	add	sp, #12
 801c19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c19e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801c1a2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801c1a6:	4298      	cmp	r0, r3
 801c1a8:	f000 80aa 	beq.w	801c300 <uxr_read_framed_msg+0x300>
 801c1ac:	18e2      	adds	r2, r4, r3
 801c1ae:	7891      	ldrb	r1, [r2, #2]
 801c1b0:	297d      	cmp	r1, #125	; 0x7d
 801c1b2:	f000 8186 	beq.w	801c4c2 <uxr_read_framed_msg+0x4c2>
 801c1b6:	3301      	adds	r3, #1
 801c1b8:	202a      	movs	r0, #42	; 0x2a
 801c1ba:	297e      	cmp	r1, #126	; 0x7e
 801c1bc:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801c1c0:	fba5 c202 	umull	ip, r2, r5, r2
 801c1c4:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c1c8:	fb00 3312 	mls	r3, r0, r2, r3
 801c1cc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c1d0:	f000 8195 	beq.w	801c4fe <uxr_read_framed_msg+0x4fe>
 801c1d4:	2304      	movs	r3, #4
 801c1d6:	8621      	strh	r1, [r4, #48]	; 0x30
 801c1d8:	7023      	strb	r3, [r4, #0]
 801c1da:	e722      	b.n	801c022 <uxr_read_framed_msg+0x22>
 801c1dc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801c1e0:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801c1e4:	4290      	cmp	r0, r2
 801c1e6:	f000 80b4 	beq.w	801c352 <uxr_read_framed_msg+0x352>
 801c1ea:	18a3      	adds	r3, r4, r2
 801c1ec:	7899      	ldrb	r1, [r3, #2]
 801c1ee:	297d      	cmp	r1, #125	; 0x7d
 801c1f0:	f000 8107 	beq.w	801c402 <uxr_read_framed_msg+0x402>
 801c1f4:	3201      	adds	r2, #1
 801c1f6:	232a      	movs	r3, #42	; 0x2a
 801c1f8:	297e      	cmp	r1, #126	; 0x7e
 801c1fa:	ea4f 0052 	mov.w	r0, r2, lsr #1
 801c1fe:	fba5 c000 	umull	ip, r0, r5, r0
 801c202:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801c206:	fb03 2210 	mls	r2, r3, r0, r2
 801c20a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801c20e:	f000 818a 	beq.w	801c526 <uxr_read_framed_msg+0x526>
 801c212:	7863      	ldrb	r3, [r4, #1]
 801c214:	428b      	cmp	r3, r1
 801c216:	bf0c      	ite	eq
 801c218:	2303      	moveq	r3, #3
 801c21a:	2300      	movne	r3, #0
 801c21c:	7023      	strb	r3, [r4, #0]
 801c21e:	e700      	b.n	801c022 <uxr_read_framed_msg+0x22>
 801c220:	2300      	movs	r3, #0
 801c222:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801c226:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 801c22a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801c22e:	4299      	cmp	r1, r3
 801c230:	d06a      	beq.n	801c308 <uxr_read_framed_msg+0x308>
 801c232:	18e2      	adds	r2, r4, r3
 801c234:	7890      	ldrb	r0, [r2, #2]
 801c236:	287d      	cmp	r0, #125	; 0x7d
 801c238:	f000 8100 	beq.w	801c43c <uxr_read_framed_msg+0x43c>
 801c23c:	3301      	adds	r3, #1
 801c23e:	212a      	movs	r1, #42	; 0x2a
 801c240:	287e      	cmp	r0, #126	; 0x7e
 801c242:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 801c246:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801c24a:	fba5 c202 	umull	ip, r2, r5, r2
 801c24e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c252:	fb01 3312 	mls	r3, r1, r2, r3
 801c256:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c25a:	d055      	beq.n	801c308 <uxr_read_framed_msg+0x308>
 801c25c:	2302      	movs	r3, #2
 801c25e:	7023      	strb	r3, [r4, #0]
 801c260:	e6df      	b.n	801c022 <uxr_read_framed_msg+0x22>
 801c262:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 801c266:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 801c26a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801c26e:	1c5a      	adds	r2, r3, #1
 801c270:	459c      	cmp	ip, r3
 801c272:	eb04 0103 	add.w	r1, r4, r3
 801c276:	ea4f 0352 	mov.w	r3, r2, lsr #1
 801c27a:	f43f af04 	beq.w	801c086 <uxr_read_framed_msg+0x86>
 801c27e:	fba5 0303 	umull	r0, r3, r5, r3
 801c282:	7889      	ldrb	r1, [r1, #2]
 801c284:	089b      	lsrs	r3, r3, #2
 801c286:	297e      	cmp	r1, #126	; 0x7e
 801c288:	fb0e 2313 	mls	r3, lr, r3, r2
 801c28c:	b2db      	uxtb	r3, r3
 801c28e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c292:	d1ec      	bne.n	801c26e <uxr_read_framed_msg+0x26e>
 801c294:	2301      	movs	r3, #1
 801c296:	7023      	strb	r3, [r4, #0]
 801c298:	e6c3      	b.n	801c022 <uxr_read_framed_msg+0x22>
 801c29a:	1c50      	adds	r0, r2, #1
 801c29c:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 801c2a0:	3202      	adds	r2, #2
 801c2a2:	0841      	lsrs	r1, r0, #1
 801c2a4:	fba5 c101 	umull	ip, r1, r5, r1
 801c2a8:	0889      	lsrs	r1, r1, #2
 801c2aa:	fb0b 0111 	mls	r1, fp, r1, r0
 801c2ae:	1860      	adds	r0, r4, r1
 801c2b0:	b2c9      	uxtb	r1, r1
 801c2b2:	458a      	cmp	sl, r1
 801c2b4:	f43f af42 	beq.w	801c13c <uxr_read_framed_msg+0x13c>
 801c2b8:	0851      	lsrs	r1, r2, #1
 801c2ba:	7880      	ldrb	r0, [r0, #2]
 801c2bc:	fba5 a101 	umull	sl, r1, r5, r1
 801c2c0:	287e      	cmp	r0, #126	; 0x7e
 801c2c2:	f080 0c20 	eor.w	ip, r0, #32
 801c2c6:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801c2ca:	fb0b 2211 	mls	r2, fp, r1, r2
 801c2ce:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801c2d2:	f47f af14 	bne.w	801c0fe <uxr_read_framed_msg+0xfe>
 801c2d6:	459e      	cmp	lr, r3
 801c2d8:	f43f af33 	beq.w	801c142 <uxr_read_framed_msg+0x142>
 801c2dc:	2301      	movs	r3, #1
 801c2de:	7023      	strb	r3, [r4, #0]
 801c2e0:	e69f      	b.n	801c022 <uxr_read_framed_msg+0x22>
 801c2e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c2e4:	9300      	str	r3, [sp, #0]
 801c2e6:	2301      	movs	r3, #1
 801c2e8:	9301      	str	r3, [sp, #4]
 801c2ea:	464a      	mov	r2, r9
 801c2ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c2ee:	4641      	mov	r1, r8
 801c2f0:	4620      	mov	r0, r4
 801c2f2:	f7ff fdf1 	bl	801bed8 <uxr_framing_read_transport>
 801c2f6:	2800      	cmp	r0, #0
 801c2f8:	f43f aec5 	beq.w	801c086 <uxr_read_framed_msg+0x86>
 801c2fc:	7823      	ldrb	r3, [r4, #0]
 801c2fe:	e690      	b.n	801c022 <uxr_read_framed_msg+0x22>
 801c300:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c302:	9300      	str	r3, [sp, #0]
 801c304:	2302      	movs	r3, #2
 801c306:	e7ef      	b.n	801c2e8 <uxr_read_framed_msg+0x2e8>
 801c308:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c30a:	464a      	mov	r2, r9
 801c30c:	4641      	mov	r1, r8
 801c30e:	4620      	mov	r0, r4
 801c310:	9300      	str	r3, [sp, #0]
 801c312:	2304      	movs	r3, #4
 801c314:	9301      	str	r3, [sp, #4]
 801c316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c318:	f7ff fdde 	bl	801bed8 <uxr_framing_read_transport>
 801c31c:	2800      	cmp	r0, #0
 801c31e:	d1ed      	bne.n	801c2fc <uxr_read_framed_msg+0x2fc>
 801c320:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801c324:	2b7e      	cmp	r3, #126	; 0x7e
 801c326:	d0e9      	beq.n	801c2fc <uxr_read_framed_msg+0x2fc>
 801c328:	e6ad      	b.n	801c086 <uxr_read_framed_msg+0x86>
 801c32a:	bf00      	nop
 801c32c:	30c30c31 	.word	0x30c30c31
 801c330:	08020774 	.word	0x08020774
 801c334:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c336:	9300      	str	r3, [sp, #0]
 801c338:	2305      	movs	r3, #5
 801c33a:	9301      	str	r3, [sp, #4]
 801c33c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c33e:	f7ff fdcb 	bl	801bed8 <uxr_framing_read_transport>
 801c342:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801c346:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801c34a:	429a      	cmp	r2, r3
 801c34c:	f43f ae9b 	beq.w	801c086 <uxr_read_framed_msg+0x86>
 801c350:	e664      	b.n	801c01c <uxr_read_framed_msg+0x1c>
 801c352:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c354:	9300      	str	r3, [sp, #0]
 801c356:	2303      	movs	r3, #3
 801c358:	e7c6      	b.n	801c2e8 <uxr_read_framed_msg+0x2e8>
 801c35a:	2305      	movs	r3, #5
 801c35c:	7023      	strb	r3, [r4, #0]
 801c35e:	e660      	b.n	801c022 <uxr_read_framed_msg+0x22>
 801c360:	f43f aeef 	beq.w	801c142 <uxr_read_framed_msg+0x142>
 801c364:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801c368:	d094      	beq.n	801c294 <uxr_read_framed_msg+0x294>
 801c36a:	ebae 0303 	sub.w	r3, lr, r3
 801c36e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c370:	3302      	adds	r3, #2
 801c372:	9200      	str	r2, [sp, #0]
 801c374:	e7b8      	b.n	801c2e8 <uxr_read_framed_msg+0x2e8>
 801c376:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801c37a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c37c:	7013      	strb	r3, [r2, #0]
 801c37e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801c380:	b003      	add	sp, #12
 801c382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c386:	1c59      	adds	r1, r3, #1
 801c388:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801c38c:	084a      	lsrs	r2, r1, #1
 801c38e:	fba5 e202 	umull	lr, r2, r5, r2
 801c392:	0892      	lsrs	r2, r2, #2
 801c394:	fb0c 1212 	mls	r2, ip, r2, r1
 801c398:	b2d1      	uxtb	r1, r2
 801c39a:	4288      	cmp	r0, r1
 801c39c:	d0b0      	beq.n	801c300 <uxr_read_framed_msg+0x300>
 801c39e:	3302      	adds	r3, #2
 801c3a0:	4422      	add	r2, r4
 801c3a2:	7891      	ldrb	r1, [r2, #2]
 801c3a4:	085a      	lsrs	r2, r3, #1
 801c3a6:	fba5 0202 	umull	r0, r2, r5, r2
 801c3aa:	297e      	cmp	r1, #126	; 0x7e
 801c3ac:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c3b0:	fb0c 3312 	mls	r3, ip, r2, r3
 801c3b4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c3b8:	f000 80a1 	beq.w	801c4fe <uxr_read_framed_msg+0x4fe>
 801c3bc:	f081 0120 	eor.w	r1, r1, #32
 801c3c0:	e680      	b.n	801c0c4 <uxr_read_framed_msg+0xc4>
 801c3c2:	f103 0c01 	add.w	ip, r3, #1
 801c3c6:	202a      	movs	r0, #42	; 0x2a
 801c3c8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801c3cc:	fba5 e202 	umull	lr, r2, r5, r2
 801c3d0:	0892      	lsrs	r2, r2, #2
 801c3d2:	fb00 c212 	mls	r2, r0, r2, ip
 801c3d6:	fa5f fc82 	uxtb.w	ip, r2
 801c3da:	4561      	cmp	r1, ip
 801c3dc:	d081      	beq.n	801c2e2 <uxr_read_framed_msg+0x2e2>
 801c3de:	3302      	adds	r3, #2
 801c3e0:	4422      	add	r2, r4
 801c3e2:	0859      	lsrs	r1, r3, #1
 801c3e4:	7892      	ldrb	r2, [r2, #2]
 801c3e6:	fba5 c101 	umull	ip, r1, r5, r1
 801c3ea:	2a7e      	cmp	r2, #126	; 0x7e
 801c3ec:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801c3f0:	fb00 3311 	mls	r3, r0, r1, r3
 801c3f4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c3f8:	f000 8091 	beq.w	801c51e <uxr_read_framed_msg+0x51e>
 801c3fc:	f082 0220 	eor.w	r2, r2, #32
 801c400:	e636      	b.n	801c070 <uxr_read_framed_msg+0x70>
 801c402:	1c51      	adds	r1, r2, #1
 801c404:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801c408:	084b      	lsrs	r3, r1, #1
 801c40a:	fba5 e303 	umull	lr, r3, r5, r3
 801c40e:	089b      	lsrs	r3, r3, #2
 801c410:	fb0c 1313 	mls	r3, ip, r3, r1
 801c414:	b2d9      	uxtb	r1, r3
 801c416:	4288      	cmp	r0, r1
 801c418:	d09b      	beq.n	801c352 <uxr_read_framed_msg+0x352>
 801c41a:	3202      	adds	r2, #2
 801c41c:	4423      	add	r3, r4
 801c41e:	0850      	lsrs	r0, r2, #1
 801c420:	789b      	ldrb	r3, [r3, #2]
 801c422:	fba5 1000 	umull	r1, r0, r5, r0
 801c426:	2b7e      	cmp	r3, #126	; 0x7e
 801c428:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801c42c:	fb0c 2210 	mls	r2, ip, r0, r2
 801c430:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801c434:	d077      	beq.n	801c526 <uxr_read_framed_msg+0x526>
 801c436:	f083 0120 	eor.w	r1, r3, #32
 801c43a:	e6ea      	b.n	801c212 <uxr_read_framed_msg+0x212>
 801c43c:	f103 0c01 	add.w	ip, r3, #1
 801c440:	202a      	movs	r0, #42	; 0x2a
 801c442:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801c446:	fba5 e202 	umull	lr, r2, r5, r2
 801c44a:	0892      	lsrs	r2, r2, #2
 801c44c:	fb00 c212 	mls	r2, r0, r2, ip
 801c450:	fa5f fc82 	uxtb.w	ip, r2
 801c454:	4561      	cmp	r1, ip
 801c456:	f43f af57 	beq.w	801c308 <uxr_read_framed_msg+0x308>
 801c45a:	3302      	adds	r3, #2
 801c45c:	4422      	add	r2, r4
 801c45e:	7891      	ldrb	r1, [r2, #2]
 801c460:	085a      	lsrs	r2, r3, #1
 801c462:	fba5 c202 	umull	ip, r2, r5, r2
 801c466:	297e      	cmp	r1, #126	; 0x7e
 801c468:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801c46c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c470:	fb00 3312 	mls	r3, r0, r2, r3
 801c474:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c478:	f43f af46 	beq.w	801c308 <uxr_read_framed_msg+0x308>
 801c47c:	f081 0120 	eor.w	r1, r1, #32
 801c480:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801c484:	e6ea      	b.n	801c25c <uxr_read_framed_msg+0x25c>
 801c486:	1c59      	adds	r1, r3, #1
 801c488:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801c48c:	084a      	lsrs	r2, r1, #1
 801c48e:	fba5 e202 	umull	lr, r2, r5, r2
 801c492:	0892      	lsrs	r2, r2, #2
 801c494:	fb0c 1212 	mls	r2, ip, r2, r1
 801c498:	b2d1      	uxtb	r1, r2
 801c49a:	4288      	cmp	r0, r1
 801c49c:	f43f af21 	beq.w	801c2e2 <uxr_read_framed_msg+0x2e2>
 801c4a0:	3302      	adds	r3, #2
 801c4a2:	4422      	add	r2, r4
 801c4a4:	7891      	ldrb	r1, [r2, #2]
 801c4a6:	085a      	lsrs	r2, r3, #1
 801c4a8:	fba5 0202 	umull	r0, r2, r5, r2
 801c4ac:	297e      	cmp	r1, #126	; 0x7e
 801c4ae:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c4b2:	fb0c 3312 	mls	r3, ip, r2, r3
 801c4b6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c4ba:	d030      	beq.n	801c51e <uxr_read_framed_msg+0x51e>
 801c4bc:	f081 0120 	eor.w	r1, r1, #32
 801c4c0:	e65d      	b.n	801c17e <uxr_read_framed_msg+0x17e>
 801c4c2:	1c59      	adds	r1, r3, #1
 801c4c4:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801c4c8:	084a      	lsrs	r2, r1, #1
 801c4ca:	fba5 e202 	umull	lr, r2, r5, r2
 801c4ce:	0892      	lsrs	r2, r2, #2
 801c4d0:	fb0c 1212 	mls	r2, ip, r2, r1
 801c4d4:	b2d1      	uxtb	r1, r2
 801c4d6:	4288      	cmp	r0, r1
 801c4d8:	f43f af12 	beq.w	801c300 <uxr_read_framed_msg+0x300>
 801c4dc:	3302      	adds	r3, #2
 801c4de:	4422      	add	r2, r4
 801c4e0:	7891      	ldrb	r1, [r2, #2]
 801c4e2:	085a      	lsrs	r2, r3, #1
 801c4e4:	fba5 0202 	umull	r0, r2, r5, r2
 801c4e8:	297e      	cmp	r1, #126	; 0x7e
 801c4ea:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801c4ee:	fb0c 3312 	mls	r3, ip, r2, r3
 801c4f2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801c4f6:	d002      	beq.n	801c4fe <uxr_read_framed_msg+0x4fe>
 801c4f8:	f081 0120 	eor.w	r1, r1, #32
 801c4fc:	e66a      	b.n	801c1d4 <uxr_read_framed_msg+0x1d4>
 801c4fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c500:	9300      	str	r3, [sp, #0]
 801c502:	2302      	movs	r3, #2
 801c504:	9301      	str	r3, [sp, #4]
 801c506:	464a      	mov	r2, r9
 801c508:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c50a:	4641      	mov	r1, r8
 801c50c:	4620      	mov	r0, r4
 801c50e:	f7ff fce3 	bl	801bed8 <uxr_framing_read_transport>
 801c512:	2800      	cmp	r0, #0
 801c514:	f47f aef2 	bne.w	801c2fc <uxr_read_framed_msg+0x2fc>
 801c518:	2301      	movs	r3, #1
 801c51a:	7023      	strb	r3, [r4, #0]
 801c51c:	e581      	b.n	801c022 <uxr_read_framed_msg+0x22>
 801c51e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c520:	9300      	str	r3, [sp, #0]
 801c522:	2301      	movs	r3, #1
 801c524:	e7ee      	b.n	801c504 <uxr_read_framed_msg+0x504>
 801c526:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c528:	9300      	str	r3, [sp, #0]
 801c52a:	2303      	movs	r3, #3
 801c52c:	e7ea      	b.n	801c504 <uxr_read_framed_msg+0x504>
 801c52e:	bf00      	nop

0801c530 <rcl_get_automatic_discovery_range>:
 801c530:	b530      	push	{r4, r5, lr}
 801c532:	2300      	movs	r3, #0
 801c534:	b083      	sub	sp, #12
 801c536:	9301      	str	r3, [sp, #4]
 801c538:	b1c0      	cbz	r0, 801c56c <rcl_get_automatic_discovery_range+0x3c>
 801c53a:	4604      	mov	r4, r0
 801c53c:	a901      	add	r1, sp, #4
 801c53e:	4818      	ldr	r0, [pc, #96]	; (801c5a0 <rcl_get_automatic_discovery_range+0x70>)
 801c540:	f7fc fbf6 	bl	8018d30 <rcutils_get_env>
 801c544:	b110      	cbz	r0, 801c54c <rcl_get_automatic_discovery_range+0x1c>
 801c546:	2001      	movs	r0, #1
 801c548:	b003      	add	sp, #12
 801c54a:	bd30      	pop	{r4, r5, pc}
 801c54c:	9d01      	ldr	r5, [sp, #4]
 801c54e:	782b      	ldrb	r3, [r5, #0]
 801c550:	b13b      	cbz	r3, 801c562 <rcl_get_automatic_discovery_range+0x32>
 801c552:	4914      	ldr	r1, [pc, #80]	; (801c5a4 <rcl_get_automatic_discovery_range+0x74>)
 801c554:	4628      	mov	r0, r5
 801c556:	f7e3 fe73 	bl	8000240 <strcmp>
 801c55a:	b950      	cbnz	r0, 801c572 <rcl_get_automatic_discovery_range+0x42>
 801c55c:	2301      	movs	r3, #1
 801c55e:	7023      	strb	r3, [r4, #0]
 801c560:	e7f2      	b.n	801c548 <rcl_get_automatic_discovery_range+0x18>
 801c562:	2303      	movs	r3, #3
 801c564:	2000      	movs	r0, #0
 801c566:	7023      	strb	r3, [r4, #0]
 801c568:	b003      	add	sp, #12
 801c56a:	bd30      	pop	{r4, r5, pc}
 801c56c:	200b      	movs	r0, #11
 801c56e:	b003      	add	sp, #12
 801c570:	bd30      	pop	{r4, r5, pc}
 801c572:	490d      	ldr	r1, [pc, #52]	; (801c5a8 <rcl_get_automatic_discovery_range+0x78>)
 801c574:	4628      	mov	r0, r5
 801c576:	f7e3 fe63 	bl	8000240 <strcmp>
 801c57a:	b168      	cbz	r0, 801c598 <rcl_get_automatic_discovery_range+0x68>
 801c57c:	490b      	ldr	r1, [pc, #44]	; (801c5ac <rcl_get_automatic_discovery_range+0x7c>)
 801c57e:	4628      	mov	r0, r5
 801c580:	f7e3 fe5e 	bl	8000240 <strcmp>
 801c584:	2800      	cmp	r0, #0
 801c586:	d0ec      	beq.n	801c562 <rcl_get_automatic_discovery_range+0x32>
 801c588:	4909      	ldr	r1, [pc, #36]	; (801c5b0 <rcl_get_automatic_discovery_range+0x80>)
 801c58a:	4628      	mov	r0, r5
 801c58c:	f7e3 fe58 	bl	8000240 <strcmp>
 801c590:	b910      	cbnz	r0, 801c598 <rcl_get_automatic_discovery_range+0x68>
 801c592:	2304      	movs	r3, #4
 801c594:	7023      	strb	r3, [r4, #0]
 801c596:	e7d7      	b.n	801c548 <rcl_get_automatic_discovery_range+0x18>
 801c598:	2302      	movs	r3, #2
 801c59a:	2000      	movs	r0, #0
 801c59c:	7023      	strb	r3, [r4, #0]
 801c59e:	e7d3      	b.n	801c548 <rcl_get_automatic_discovery_range+0x18>
 801c5a0:	08020974 	.word	0x08020974
 801c5a4:	08020994 	.word	0x08020994
 801c5a8:	08020998 	.word	0x08020998
 801c5ac:	080209a4 	.word	0x080209a4
 801c5b0:	080209ac 	.word	0x080209ac

0801c5b4 <rcl_automatic_discovery_range_to_string>:
 801c5b4:	2804      	cmp	r0, #4
 801c5b6:	d803      	bhi.n	801c5c0 <rcl_automatic_discovery_range_to_string+0xc>
 801c5b8:	4b02      	ldr	r3, [pc, #8]	; (801c5c4 <rcl_automatic_discovery_range_to_string+0x10>)
 801c5ba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801c5be:	4770      	bx	lr
 801c5c0:	2000      	movs	r0, #0
 801c5c2:	4770      	bx	lr
 801c5c4:	08020a9c 	.word	0x08020a9c

0801c5c8 <rcl_get_discovery_static_peers>:
 801c5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c5cc:	2300      	movs	r3, #0
 801c5ce:	b08e      	sub	sp, #56	; 0x38
 801c5d0:	9306      	str	r3, [sp, #24]
 801c5d2:	2900      	cmp	r1, #0
 801c5d4:	d04b      	beq.n	801c66e <rcl_get_discovery_static_peers+0xa6>
 801c5d6:	4605      	mov	r5, r0
 801c5d8:	2800      	cmp	r0, #0
 801c5da:	d048      	beq.n	801c66e <rcl_get_discovery_static_peers+0xa6>
 801c5dc:	460c      	mov	r4, r1
 801c5de:	482c      	ldr	r0, [pc, #176]	; (801c690 <rcl_get_discovery_static_peers+0xc8>)
 801c5e0:	a906      	add	r1, sp, #24
 801c5e2:	f7fc fba5 	bl	8018d30 <rcutils_get_env>
 801c5e6:	b118      	cbz	r0, 801c5f0 <rcl_get_discovery_static_peers+0x28>
 801c5e8:	2001      	movs	r0, #1
 801c5ea:	b00e      	add	sp, #56	; 0x38
 801c5ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c5f0:	9b06      	ldr	r3, [sp, #24]
 801c5f2:	2b00      	cmp	r3, #0
 801c5f4:	d0f8      	beq.n	801c5e8 <rcl_get_discovery_static_peers+0x20>
 801c5f6:	af07      	add	r7, sp, #28
 801c5f8:	4638      	mov	r0, r7
 801c5fa:	f000 fc73 	bl	801cee4 <rcutils_get_zero_initialized_string_array>
 801c5fe:	f104 0308 	add.w	r3, r4, #8
 801c602:	9703      	str	r7, [sp, #12]
 801c604:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c608:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801c60c:	213b      	movs	r1, #59	; 0x3b
 801c60e:	9806      	ldr	r0, [sp, #24]
 801c610:	e894 000c 	ldmia.w	r4, {r2, r3}
 801c614:	f000 fba8 	bl	801cd68 <rcutils_split>
 801c618:	2800      	cmp	r0, #0
 801c61a:	d1e5      	bne.n	801c5e8 <rcl_get_discovery_static_peers+0x20>
 801c61c:	4622      	mov	r2, r4
 801c61e:	9907      	ldr	r1, [sp, #28]
 801c620:	4628      	mov	r0, r5
 801c622:	f000 fcaf 	bl	801cf84 <rmw_discovery_options_init>
 801c626:	4604      	mov	r4, r0
 801c628:	bb78      	cbnz	r0, 801c68a <rcl_get_discovery_static_peers+0xc2>
 801c62a:	9e07      	ldr	r6, [sp, #28]
 801c62c:	b336      	cbz	r6, 801c67c <rcl_get_discovery_static_peers+0xb4>
 801c62e:	f8dd a020 	ldr.w	sl, [sp, #32]
 801c632:	4680      	mov	r8, r0
 801c634:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 801c638:	ea4f 2904 	mov.w	r9, r4, lsl #8
 801c63c:	4608      	mov	r0, r1
 801c63e:	9105      	str	r1, [sp, #20]
 801c640:	f7e3 fe5e 	bl	8000300 <strlen>
 801c644:	28ff      	cmp	r0, #255	; 0xff
 801c646:	9905      	ldr	r1, [sp, #20]
 801c648:	d815      	bhi.n	801c676 <rcl_get_discovery_static_peers+0xae>
 801c64a:	6868      	ldr	r0, [r5, #4]
 801c64c:	f44f 7280 	mov.w	r2, #256	; 0x100
 801c650:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 801c654:	3401      	adds	r4, #1
 801c656:	f001 fa84 	bl	801db62 <strncpy>
 801c65a:	686b      	ldr	r3, [r5, #4]
 801c65c:	9e07      	ldr	r6, [sp, #28]
 801c65e:	444b      	add	r3, r9
 801c660:	42b4      	cmp	r4, r6
 801c662:	f883 80ff 	strb.w	r8, [r3, #255]	; 0xff
 801c666:	d209      	bcs.n	801c67c <rcl_get_discovery_static_peers+0xb4>
 801c668:	f8dd a020 	ldr.w	sl, [sp, #32]
 801c66c:	e7e2      	b.n	801c634 <rcl_get_discovery_static_peers+0x6c>
 801c66e:	200b      	movs	r0, #11
 801c670:	b00e      	add	sp, #56	; 0x38
 801c672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c676:	3401      	adds	r4, #1
 801c678:	42b4      	cmp	r4, r6
 801c67a:	d3db      	bcc.n	801c634 <rcl_get_discovery_static_peers+0x6c>
 801c67c:	4638      	mov	r0, r7
 801c67e:	f000 fc4f 	bl	801cf20 <rcutils_string_array_fini>
 801c682:	3800      	subs	r0, #0
 801c684:	bf18      	it	ne
 801c686:	2001      	movne	r0, #1
 801c688:	e7af      	b.n	801c5ea <rcl_get_discovery_static_peers+0x22>
 801c68a:	f7f9 f94f 	bl	801592c <rcl_convert_rmw_ret_to_rcl_ret>
 801c68e:	e7ac      	b.n	801c5ea <rcl_get_discovery_static_peers+0x22>
 801c690:	080209bc 	.word	0x080209bc

0801c694 <rcl_get_default_domain_id>:
 801c694:	b530      	push	{r4, r5, lr}
 801c696:	2300      	movs	r3, #0
 801c698:	b083      	sub	sp, #12
 801c69a:	9300      	str	r3, [sp, #0]
 801c69c:	b1d0      	cbz	r0, 801c6d4 <rcl_get_default_domain_id+0x40>
 801c69e:	4604      	mov	r4, r0
 801c6a0:	4669      	mov	r1, sp
 801c6a2:	4815      	ldr	r0, [pc, #84]	; (801c6f8 <rcl_get_default_domain_id+0x64>)
 801c6a4:	f7fc fb44 	bl	8018d30 <rcutils_get_env>
 801c6a8:	4602      	mov	r2, r0
 801c6aa:	b110      	cbz	r0, 801c6b2 <rcl_get_default_domain_id+0x1e>
 801c6ac:	2001      	movs	r0, #1
 801c6ae:	b003      	add	sp, #12
 801c6b0:	bd30      	pop	{r4, r5, pc}
 801c6b2:	9b00      	ldr	r3, [sp, #0]
 801c6b4:	b18b      	cbz	r3, 801c6da <rcl_get_default_domain_id+0x46>
 801c6b6:	7818      	ldrb	r0, [r3, #0]
 801c6b8:	2800      	cmp	r0, #0
 801c6ba:	d0f8      	beq.n	801c6ae <rcl_get_default_domain_id+0x1a>
 801c6bc:	a901      	add	r1, sp, #4
 801c6be:	4618      	mov	r0, r3
 801c6c0:	9201      	str	r2, [sp, #4]
 801c6c2:	f001 f881 	bl	801d7c8 <strtoul>
 801c6c6:	4605      	mov	r5, r0
 801c6c8:	b150      	cbz	r0, 801c6e0 <rcl_get_default_domain_id+0x4c>
 801c6ca:	1c43      	adds	r3, r0, #1
 801c6cc:	d00d      	beq.n	801c6ea <rcl_get_default_domain_id+0x56>
 801c6ce:	2000      	movs	r0, #0
 801c6d0:	6025      	str	r5, [r4, #0]
 801c6d2:	e7ec      	b.n	801c6ae <rcl_get_default_domain_id+0x1a>
 801c6d4:	200b      	movs	r0, #11
 801c6d6:	b003      	add	sp, #12
 801c6d8:	bd30      	pop	{r4, r5, pc}
 801c6da:	4618      	mov	r0, r3
 801c6dc:	b003      	add	sp, #12
 801c6de:	bd30      	pop	{r4, r5, pc}
 801c6e0:	9b01      	ldr	r3, [sp, #4]
 801c6e2:	781b      	ldrb	r3, [r3, #0]
 801c6e4:	2b00      	cmp	r3, #0
 801c6e6:	d0f2      	beq.n	801c6ce <rcl_get_default_domain_id+0x3a>
 801c6e8:	e7e0      	b.n	801c6ac <rcl_get_default_domain_id+0x18>
 801c6ea:	f001 fb0f 	bl	801dd0c <__errno>
 801c6ee:	6803      	ldr	r3, [r0, #0]
 801c6f0:	2b22      	cmp	r3, #34	; 0x22
 801c6f2:	d1ec      	bne.n	801c6ce <rcl_get_default_domain_id+0x3a>
 801c6f4:	e7da      	b.n	801c6ac <rcl_get_default_domain_id+0x18>
 801c6f6:	bf00      	nop
 801c6f8:	08020ab0 	.word	0x08020ab0

0801c6fc <rcl_expand_topic_name>:
 801c6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c700:	b08d      	sub	sp, #52	; 0x34
 801c702:	4698      	mov	r8, r3
 801c704:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c706:	9207      	str	r2, [sp, #28]
 801c708:	2b00      	cmp	r3, #0
 801c70a:	bf18      	it	ne
 801c70c:	f1b8 0f00 	cmpne.w	r8, #0
 801c710:	bf0c      	ite	eq
 801c712:	2301      	moveq	r3, #1
 801c714:	2300      	movne	r3, #0
 801c716:	2a00      	cmp	r2, #0
 801c718:	bf08      	it	eq
 801c71a:	f043 0301 	orreq.w	r3, r3, #1
 801c71e:	2900      	cmp	r1, #0
 801c720:	bf08      	it	eq
 801c722:	f043 0301 	orreq.w	r3, r3, #1
 801c726:	2b00      	cmp	r3, #0
 801c728:	d13d      	bne.n	801c7a6 <rcl_expand_topic_name+0xaa>
 801c72a:	fab0 f280 	clz	r2, r0
 801c72e:	4604      	mov	r4, r0
 801c730:	0952      	lsrs	r2, r2, #5
 801c732:	2800      	cmp	r0, #0
 801c734:	d037      	beq.n	801c7a6 <rcl_expand_topic_name+0xaa>
 801c736:	460f      	mov	r7, r1
 801c738:	a90b      	add	r1, sp, #44	; 0x2c
 801c73a:	f000 fa51 	bl	801cbe0 <rcl_validate_topic_name>
 801c73e:	4605      	mov	r5, r0
 801c740:	bb68      	cbnz	r0, 801c79e <rcl_expand_topic_name+0xa2>
 801c742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c744:	2b00      	cmp	r3, #0
 801c746:	d137      	bne.n	801c7b8 <rcl_expand_topic_name+0xbc>
 801c748:	4602      	mov	r2, r0
 801c74a:	a90b      	add	r1, sp, #44	; 0x2c
 801c74c:	4638      	mov	r0, r7
 801c74e:	f7fc ff69 	bl	8019624 <rmw_validate_node_name>
 801c752:	bb68      	cbnz	r0, 801c7b0 <rcl_expand_topic_name+0xb4>
 801c754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c756:	2b00      	cmp	r3, #0
 801c758:	d133      	bne.n	801c7c2 <rcl_expand_topic_name+0xc6>
 801c75a:	462a      	mov	r2, r5
 801c75c:	a90b      	add	r1, sp, #44	; 0x2c
 801c75e:	9807      	ldr	r0, [sp, #28]
 801c760:	f7fc ff42 	bl	80195e8 <rmw_validate_namespace>
 801c764:	bb20      	cbnz	r0, 801c7b0 <rcl_expand_topic_name+0xb4>
 801c766:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801c768:	2d00      	cmp	r5, #0
 801c76a:	f040 80a2 	bne.w	801c8b2 <rcl_expand_topic_name+0x1b6>
 801c76e:	217b      	movs	r1, #123	; 0x7b
 801c770:	4620      	mov	r0, r4
 801c772:	f001 f9d7 	bl	801db24 <strchr>
 801c776:	7823      	ldrb	r3, [r4, #0]
 801c778:	4681      	mov	r9, r0
 801c77a:	bb20      	cbnz	r0, 801c7c6 <rcl_expand_topic_name+0xca>
 801c77c:	2b2f      	cmp	r3, #47	; 0x2f
 801c77e:	d122      	bne.n	801c7c6 <rcl_expand_topic_name+0xca>
 801c780:	ab19      	add	r3, sp, #100	; 0x64
 801c782:	e893 0003 	ldmia.w	r3, {r0, r1}
 801c786:	ab16      	add	r3, sp, #88	; 0x58
 801c788:	e88d 0003 	stmia.w	sp, {r0, r1}
 801c78c:	4620      	mov	r0, r4
 801c78e:	cb0e      	ldmia	r3, {r1, r2, r3}
 801c790:	f7fc fc30 	bl	8018ff4 <rcutils_strdup>
 801c794:	2800      	cmp	r0, #0
 801c796:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c798:	bf08      	it	eq
 801c79a:	250a      	moveq	r5, #10
 801c79c:	6018      	str	r0, [r3, #0]
 801c79e:	4628      	mov	r0, r5
 801c7a0:	b00d      	add	sp, #52	; 0x34
 801c7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7a6:	250b      	movs	r5, #11
 801c7a8:	4628      	mov	r0, r5
 801c7aa:	b00d      	add	sp, #52	; 0x34
 801c7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7b0:	f7f9 f8bc 	bl	801592c <rcl_convert_rmw_ret_to_rcl_ret>
 801c7b4:	4605      	mov	r5, r0
 801c7b6:	e7f2      	b.n	801c79e <rcl_expand_topic_name+0xa2>
 801c7b8:	2567      	movs	r5, #103	; 0x67
 801c7ba:	4628      	mov	r0, r5
 801c7bc:	b00d      	add	sp, #52	; 0x34
 801c7be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7c2:	25c9      	movs	r5, #201	; 0xc9
 801c7c4:	e7eb      	b.n	801c79e <rcl_expand_topic_name+0xa2>
 801c7c6:	2b7e      	cmp	r3, #126	; 0x7e
 801c7c8:	d075      	beq.n	801c8b6 <rcl_expand_topic_name+0x1ba>
 801c7ca:	f1b9 0f00 	cmp.w	r9, #0
 801c7ce:	f000 80c2 	beq.w	801c956 <rcl_expand_topic_name+0x25a>
 801c7d2:	2300      	movs	r3, #0
 801c7d4:	46a2      	mov	sl, r4
 801c7d6:	461e      	mov	r6, r3
 801c7d8:	9508      	str	r5, [sp, #32]
 801c7da:	4655      	mov	r5, sl
 801c7dc:	9409      	str	r4, [sp, #36]	; 0x24
 801c7de:	46b2      	mov	sl, r6
 801c7e0:	464c      	mov	r4, r9
 801c7e2:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801c7e6:	2c00      	cmp	r4, #0
 801c7e8:	f000 80ae 	beq.w	801c948 <rcl_expand_topic_name+0x24c>
 801c7ec:	217d      	movs	r1, #125	; 0x7d
 801c7ee:	4628      	mov	r0, r5
 801c7f0:	f001 f998 	bl	801db24 <strchr>
 801c7f4:	eba0 0904 	sub.w	r9, r0, r4
 801c7f8:	4621      	mov	r1, r4
 801c7fa:	4869      	ldr	r0, [pc, #420]	; (801c9a0 <rcl_expand_topic_name+0x2a4>)
 801c7fc:	f109 0601 	add.w	r6, r9, #1
 801c800:	4632      	mov	r2, r6
 801c802:	f001 f99c 	bl	801db3e <strncmp>
 801c806:	2800      	cmp	r0, #0
 801c808:	d051      	beq.n	801c8ae <rcl_expand_topic_name+0x1b2>
 801c80a:	4632      	mov	r2, r6
 801c80c:	4621      	mov	r1, r4
 801c80e:	4865      	ldr	r0, [pc, #404]	; (801c9a4 <rcl_expand_topic_name+0x2a8>)
 801c810:	f001 f995 	bl	801db3e <strncmp>
 801c814:	b128      	cbz	r0, 801c822 <rcl_expand_topic_name+0x126>
 801c816:	4632      	mov	r2, r6
 801c818:	4621      	mov	r1, r4
 801c81a:	4863      	ldr	r0, [pc, #396]	; (801c9a8 <rcl_expand_topic_name+0x2ac>)
 801c81c:	f001 f98f 	bl	801db3e <strncmp>
 801c820:	bb38      	cbnz	r0, 801c872 <rcl_expand_topic_name+0x176>
 801c822:	46d9      	mov	r9, fp
 801c824:	ab18      	add	r3, sp, #96	; 0x60
 801c826:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801c82a:	ab16      	add	r3, sp, #88	; 0x58
 801c82c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801c830:	4620      	mov	r0, r4
 801c832:	4631      	mov	r1, r6
 801c834:	cb0c      	ldmia	r3, {r2, r3}
 801c836:	f7fc fc03 	bl	8019040 <rcutils_strndup>
 801c83a:	4604      	mov	r4, r0
 801c83c:	2800      	cmp	r0, #0
 801c83e:	f000 80a3 	beq.w	801c988 <rcl_expand_topic_name+0x28c>
 801c842:	464a      	mov	r2, r9
 801c844:	4628      	mov	r0, r5
 801c846:	ab16      	add	r3, sp, #88	; 0x58
 801c848:	4621      	mov	r1, r4
 801c84a:	f7fc fad3 	bl	8018df4 <rcutils_repl_str>
 801c84e:	991a      	ldr	r1, [sp, #104]	; 0x68
 801c850:	4605      	mov	r5, r0
 801c852:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c854:	4620      	mov	r0, r4
 801c856:	4798      	blx	r3
 801c858:	4650      	mov	r0, sl
 801c85a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c85c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801c85e:	4798      	blx	r3
 801c860:	2d00      	cmp	r5, #0
 801c862:	d06c      	beq.n	801c93e <rcl_expand_topic_name+0x242>
 801c864:	217b      	movs	r1, #123	; 0x7b
 801c866:	4628      	mov	r0, r5
 801c868:	f001 f95c 	bl	801db24 <strchr>
 801c86c:	46aa      	mov	sl, r5
 801c86e:	4604      	mov	r4, r0
 801c870:	e7b9      	b.n	801c7e6 <rcl_expand_topic_name+0xea>
 801c872:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801c876:	1c61      	adds	r1, r4, #1
 801c878:	4640      	mov	r0, r8
 801c87a:	f7fc fcdd 	bl	8019238 <rcutils_string_map_getn>
 801c87e:	4681      	mov	r9, r0
 801c880:	2800      	cmp	r0, #0
 801c882:	d1cf      	bne.n	801c824 <rcl_expand_topic_name+0x128>
 801c884:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c886:	aa18      	add	r2, sp, #96	; 0x60
 801c888:	2569      	movs	r5, #105	; 0x69
 801c88a:	6018      	str	r0, [r3, #0]
 801c88c:	ab16      	add	r3, sp, #88	; 0x58
 801c88e:	ca07      	ldmia	r2, {r0, r1, r2}
 801c890:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801c894:	4631      	mov	r1, r6
 801c896:	4620      	mov	r0, r4
 801c898:	cb0c      	ldmia	r3, {r2, r3}
 801c89a:	f7fc fbd1 	bl	8019040 <rcutils_strndup>
 801c89e:	991a      	ldr	r1, [sp, #104]	; 0x68
 801c8a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c8a2:	4798      	blx	r3
 801c8a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c8a6:	991a      	ldr	r1, [sp, #104]	; 0x68
 801c8a8:	4650      	mov	r0, sl
 801c8aa:	4798      	blx	r3
 801c8ac:	e777      	b.n	801c79e <rcl_expand_topic_name+0xa2>
 801c8ae:	46b9      	mov	r9, r7
 801c8b0:	e7b8      	b.n	801c824 <rcl_expand_topic_name+0x128>
 801c8b2:	25ca      	movs	r5, #202	; 0xca
 801c8b4:	e773      	b.n	801c79e <rcl_expand_topic_name+0xa2>
 801c8b6:	9e07      	ldr	r6, [sp, #28]
 801c8b8:	4630      	mov	r0, r6
 801c8ba:	f7e3 fd21 	bl	8000300 <strlen>
 801c8be:	4a3b      	ldr	r2, [pc, #236]	; (801c9ac <rcl_expand_topic_name+0x2b0>)
 801c8c0:	4b3b      	ldr	r3, [pc, #236]	; (801c9b0 <rcl_expand_topic_name+0x2b4>)
 801c8c2:	9603      	str	r6, [sp, #12]
 801c8c4:	2801      	cmp	r0, #1
 801c8c6:	bf18      	it	ne
 801c8c8:	4613      	movne	r3, r2
 801c8ca:	9704      	str	r7, [sp, #16]
 801c8cc:	9302      	str	r3, [sp, #8]
 801c8ce:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801c8d0:	9300      	str	r3, [sp, #0]
 801c8d2:	1c63      	adds	r3, r4, #1
 801c8d4:	9305      	str	r3, [sp, #20]
 801c8d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c8da:	9301      	str	r3, [sp, #4]
 801c8dc:	ab16      	add	r3, sp, #88	; 0x58
 801c8de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c8e0:	f7fc fa4e 	bl	8018d80 <rcutils_format_string_limit>
 801c8e4:	4606      	mov	r6, r0
 801c8e6:	b350      	cbz	r0, 801c93e <rcl_expand_topic_name+0x242>
 801c8e8:	f1b9 0f00 	cmp.w	r9, #0
 801c8ec:	d005      	beq.n	801c8fa <rcl_expand_topic_name+0x1fe>
 801c8ee:	217b      	movs	r1, #123	; 0x7b
 801c8f0:	46b2      	mov	sl, r6
 801c8f2:	f001 f917 	bl	801db24 <strchr>
 801c8f6:	4681      	mov	r9, r0
 801c8f8:	e76e      	b.n	801c7d8 <rcl_expand_topic_name+0xdc>
 801c8fa:	7833      	ldrb	r3, [r6, #0]
 801c8fc:	2b2f      	cmp	r3, #47	; 0x2f
 801c8fe:	d01b      	beq.n	801c938 <rcl_expand_topic_name+0x23c>
 801c900:	9c07      	ldr	r4, [sp, #28]
 801c902:	4620      	mov	r0, r4
 801c904:	f7e3 fcfc 	bl	8000300 <strlen>
 801c908:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c90c:	4a29      	ldr	r2, [pc, #164]	; (801c9b4 <rcl_expand_topic_name+0x2b8>)
 801c90e:	9301      	str	r3, [sp, #4]
 801c910:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801c912:	9604      	str	r6, [sp, #16]
 801c914:	9300      	str	r3, [sp, #0]
 801c916:	4b28      	ldr	r3, [pc, #160]	; (801c9b8 <rcl_expand_topic_name+0x2bc>)
 801c918:	9403      	str	r4, [sp, #12]
 801c91a:	2801      	cmp	r0, #1
 801c91c:	bf18      	it	ne
 801c91e:	4613      	movne	r3, r2
 801c920:	9302      	str	r3, [sp, #8]
 801c922:	ab16      	add	r3, sp, #88	; 0x58
 801c924:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c926:	f7fc fa2b 	bl	8018d80 <rcutils_format_string_limit>
 801c92a:	4603      	mov	r3, r0
 801c92c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801c92e:	4630      	mov	r0, r6
 801c930:	991a      	ldr	r1, [sp, #104]	; 0x68
 801c932:	461e      	mov	r6, r3
 801c934:	4790      	blx	r2
 801c936:	b116      	cbz	r6, 801c93e <rcl_expand_topic_name+0x242>
 801c938:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c93a:	601e      	str	r6, [r3, #0]
 801c93c:	e72f      	b.n	801c79e <rcl_expand_topic_name+0xa2>
 801c93e:	2300      	movs	r3, #0
 801c940:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801c942:	250a      	movs	r5, #10
 801c944:	6013      	str	r3, [r2, #0]
 801c946:	e72a      	b.n	801c79e <rcl_expand_topic_name+0xa2>
 801c948:	4653      	mov	r3, sl
 801c94a:	4656      	mov	r6, sl
 801c94c:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801c950:	2b00      	cmp	r3, #0
 801c952:	d1d2      	bne.n	801c8fa <rcl_expand_topic_name+0x1fe>
 801c954:	7823      	ldrb	r3, [r4, #0]
 801c956:	2b2f      	cmp	r3, #47	; 0x2f
 801c958:	d01e      	beq.n	801c998 <rcl_expand_topic_name+0x29c>
 801c95a:	9e07      	ldr	r6, [sp, #28]
 801c95c:	4630      	mov	r0, r6
 801c95e:	f7e3 fccf 	bl	8000300 <strlen>
 801c962:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c964:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c968:	9603      	str	r6, [sp, #12]
 801c96a:	9404      	str	r4, [sp, #16]
 801c96c:	e9cd 2300 	strd	r2, r3, [sp]
 801c970:	4a10      	ldr	r2, [pc, #64]	; (801c9b4 <rcl_expand_topic_name+0x2b8>)
 801c972:	4b11      	ldr	r3, [pc, #68]	; (801c9b8 <rcl_expand_topic_name+0x2bc>)
 801c974:	2801      	cmp	r0, #1
 801c976:	bf18      	it	ne
 801c978:	4613      	movne	r3, r2
 801c97a:	9302      	str	r3, [sp, #8]
 801c97c:	ab16      	add	r3, sp, #88	; 0x58
 801c97e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801c980:	f7fc f9fe 	bl	8018d80 <rcutils_format_string_limit>
 801c984:	4606      	mov	r6, r0
 801c986:	e7d6      	b.n	801c936 <rcl_expand_topic_name+0x23a>
 801c988:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 801c98c:	4650      	mov	r0, sl
 801c98e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c990:	6014      	str	r4, [r2, #0]
 801c992:	250a      	movs	r5, #10
 801c994:	4798      	blx	r3
 801c996:	e702      	b.n	801c79e <rcl_expand_topic_name+0xa2>
 801c998:	2300      	movs	r3, #0
 801c99a:	461e      	mov	r6, r3
 801c99c:	e7cc      	b.n	801c938 <rcl_expand_topic_name+0x23c>
 801c99e:	bf00      	nop
 801c9a0:	08020ac8 	.word	0x08020ac8
 801c9a4:	08020ad0 	.word	0x08020ad0
 801c9a8:	08020ad8 	.word	0x08020ad8
 801c9ac:	08020ac0 	.word	0x08020ac0
 801c9b0:	0801fb78 	.word	0x0801fb78
 801c9b4:	080200c0 	.word	0x080200c0
 801c9b8:	0801fb88 	.word	0x0801fb88

0801c9bc <rcl_get_default_topic_name_substitutions>:
 801c9bc:	2800      	cmp	r0, #0
 801c9be:	bf0c      	ite	eq
 801c9c0:	200b      	moveq	r0, #11
 801c9c2:	2000      	movne	r0, #0
 801c9c4:	4770      	bx	lr
 801c9c6:	bf00      	nop

0801c9c8 <rcl_get_zero_initialized_guard_condition>:
 801c9c8:	4a03      	ldr	r2, [pc, #12]	; (801c9d8 <rcl_get_zero_initialized_guard_condition+0x10>)
 801c9ca:	4603      	mov	r3, r0
 801c9cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c9d0:	e883 0003 	stmia.w	r3, {r0, r1}
 801c9d4:	4618      	mov	r0, r3
 801c9d6:	4770      	bx	lr
 801c9d8:	08020ae4 	.word	0x08020ae4

0801c9dc <rcl_guard_condition_init>:
 801c9dc:	b082      	sub	sp, #8
 801c9de:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c9e0:	b087      	sub	sp, #28
 801c9e2:	4604      	mov	r4, r0
 801c9e4:	460d      	mov	r5, r1
 801c9e6:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 801c9ea:	f10d 0c04 	add.w	ip, sp, #4
 801c9ee:	e9ce 2300 	strd	r2, r3, [lr]
 801c9f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801c9f6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801c9fa:	f8de 3000 	ldr.w	r3, [lr]
 801c9fe:	a801      	add	r0, sp, #4
 801ca00:	f8cc 3000 	str.w	r3, [ip]
 801ca04:	f7f2 f8d4 	bl	800ebb0 <rcutils_allocator_is_valid>
 801ca08:	b354      	cbz	r4, 801ca60 <rcl_guard_condition_init+0x84>
 801ca0a:	f080 0301 	eor.w	r3, r0, #1
 801ca0e:	b2db      	uxtb	r3, r3
 801ca10:	bb33      	cbnz	r3, 801ca60 <rcl_guard_condition_init+0x84>
 801ca12:	6866      	ldr	r6, [r4, #4]
 801ca14:	b9ee      	cbnz	r6, 801ca52 <rcl_guard_condition_init+0x76>
 801ca16:	b31d      	cbz	r5, 801ca60 <rcl_guard_condition_init+0x84>
 801ca18:	4628      	mov	r0, r5
 801ca1a:	f7f8 ffa5 	bl	8015968 <rcl_context_is_valid>
 801ca1e:	b308      	cbz	r0, 801ca64 <rcl_guard_condition_init+0x88>
 801ca20:	9b01      	ldr	r3, [sp, #4]
 801ca22:	201c      	movs	r0, #28
 801ca24:	9905      	ldr	r1, [sp, #20]
 801ca26:	4798      	blx	r3
 801ca28:	4607      	mov	r7, r0
 801ca2a:	6060      	str	r0, [r4, #4]
 801ca2c:	b310      	cbz	r0, 801ca74 <rcl_guard_condition_init+0x98>
 801ca2e:	6828      	ldr	r0, [r5, #0]
 801ca30:	3028      	adds	r0, #40	; 0x28
 801ca32:	f000 fbbb 	bl	801d1ac <rmw_create_guard_condition>
 801ca36:	6038      	str	r0, [r7, #0]
 801ca38:	6860      	ldr	r0, [r4, #4]
 801ca3a:	6807      	ldr	r7, [r0, #0]
 801ca3c:	b1a7      	cbz	r7, 801ca68 <rcl_guard_condition_init+0x8c>
 801ca3e:	2301      	movs	r3, #1
 801ca40:	ac01      	add	r4, sp, #4
 801ca42:	f100 0708 	add.w	r7, r0, #8
 801ca46:	7103      	strb	r3, [r0, #4]
 801ca48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ca4a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801ca4c:	6823      	ldr	r3, [r4, #0]
 801ca4e:	603b      	str	r3, [r7, #0]
 801ca50:	e000      	b.n	801ca54 <rcl_guard_condition_init+0x78>
 801ca52:	2664      	movs	r6, #100	; 0x64
 801ca54:	4630      	mov	r0, r6
 801ca56:	b007      	add	sp, #28
 801ca58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ca5c:	b002      	add	sp, #8
 801ca5e:	4770      	bx	lr
 801ca60:	260b      	movs	r6, #11
 801ca62:	e7f7      	b.n	801ca54 <rcl_guard_condition_init+0x78>
 801ca64:	2665      	movs	r6, #101	; 0x65
 801ca66:	e7f5      	b.n	801ca54 <rcl_guard_condition_init+0x78>
 801ca68:	9b02      	ldr	r3, [sp, #8]
 801ca6a:	2601      	movs	r6, #1
 801ca6c:	9905      	ldr	r1, [sp, #20]
 801ca6e:	4798      	blx	r3
 801ca70:	6067      	str	r7, [r4, #4]
 801ca72:	e7ef      	b.n	801ca54 <rcl_guard_condition_init+0x78>
 801ca74:	260a      	movs	r6, #10
 801ca76:	e7ed      	b.n	801ca54 <rcl_guard_condition_init+0x78>

0801ca78 <rcl_guard_condition_init_from_rmw>:
 801ca78:	b082      	sub	sp, #8
 801ca7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca7e:	b086      	sub	sp, #24
 801ca80:	4604      	mov	r4, r0
 801ca82:	460e      	mov	r6, r1
 801ca84:	4615      	mov	r5, r2
 801ca86:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801ca8a:	f10d 0e04 	add.w	lr, sp, #4
 801ca8e:	f84c 3f04 	str.w	r3, [ip, #4]!
 801ca92:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801ca96:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801ca9a:	f8dc 3000 	ldr.w	r3, [ip]
 801ca9e:	a801      	add	r0, sp, #4
 801caa0:	f8ce 3000 	str.w	r3, [lr]
 801caa4:	f7f2 f884 	bl	800ebb0 <rcutils_allocator_is_valid>
 801caa8:	f080 0301 	eor.w	r3, r0, #1
 801caac:	b2db      	uxtb	r3, r3
 801caae:	bb3b      	cbnz	r3, 801cb00 <rcl_guard_condition_init_from_rmw+0x88>
 801cab0:	b334      	cbz	r4, 801cb00 <rcl_guard_condition_init_from_rmw+0x88>
 801cab2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801cab6:	f1b8 0f00 	cmp.w	r8, #0
 801caba:	d11a      	bne.n	801caf2 <rcl_guard_condition_init_from_rmw+0x7a>
 801cabc:	b305      	cbz	r5, 801cb00 <rcl_guard_condition_init_from_rmw+0x88>
 801cabe:	4628      	mov	r0, r5
 801cac0:	f7f8 ff52 	bl	8015968 <rcl_context_is_valid>
 801cac4:	b1f0      	cbz	r0, 801cb04 <rcl_guard_condition_init_from_rmw+0x8c>
 801cac6:	9b01      	ldr	r3, [sp, #4]
 801cac8:	201c      	movs	r0, #28
 801caca:	9905      	ldr	r1, [sp, #20]
 801cacc:	4798      	blx	r3
 801cace:	4607      	mov	r7, r0
 801cad0:	6060      	str	r0, [r4, #4]
 801cad2:	b320      	cbz	r0, 801cb1e <rcl_guard_condition_init_from_rmw+0xa6>
 801cad4:	b1c6      	cbz	r6, 801cb08 <rcl_guard_condition_init_from_rmw+0x90>
 801cad6:	6006      	str	r6, [r0, #0]
 801cad8:	f880 8004 	strb.w	r8, [r0, #4]
 801cadc:	ac01      	add	r4, sp, #4
 801cade:	f107 0c08 	add.w	ip, r7, #8
 801cae2:	2500      	movs	r5, #0
 801cae4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801cae6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801caea:	6823      	ldr	r3, [r4, #0]
 801caec:	f8cc 3000 	str.w	r3, [ip]
 801caf0:	e000      	b.n	801caf4 <rcl_guard_condition_init_from_rmw+0x7c>
 801caf2:	2564      	movs	r5, #100	; 0x64
 801caf4:	4628      	mov	r0, r5
 801caf6:	b006      	add	sp, #24
 801caf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cafc:	b002      	add	sp, #8
 801cafe:	4770      	bx	lr
 801cb00:	250b      	movs	r5, #11
 801cb02:	e7f7      	b.n	801caf4 <rcl_guard_condition_init_from_rmw+0x7c>
 801cb04:	2565      	movs	r5, #101	; 0x65
 801cb06:	e7f5      	b.n	801caf4 <rcl_guard_condition_init_from_rmw+0x7c>
 801cb08:	6828      	ldr	r0, [r5, #0]
 801cb0a:	3028      	adds	r0, #40	; 0x28
 801cb0c:	f000 fb4e 	bl	801d1ac <rmw_create_guard_condition>
 801cb10:	6038      	str	r0, [r7, #0]
 801cb12:	6867      	ldr	r7, [r4, #4]
 801cb14:	683e      	ldr	r6, [r7, #0]
 801cb16:	b126      	cbz	r6, 801cb22 <rcl_guard_condition_init_from_rmw+0xaa>
 801cb18:	2301      	movs	r3, #1
 801cb1a:	713b      	strb	r3, [r7, #4]
 801cb1c:	e7de      	b.n	801cadc <rcl_guard_condition_init_from_rmw+0x64>
 801cb1e:	250a      	movs	r5, #10
 801cb20:	e7e8      	b.n	801caf4 <rcl_guard_condition_init_from_rmw+0x7c>
 801cb22:	9b02      	ldr	r3, [sp, #8]
 801cb24:	4638      	mov	r0, r7
 801cb26:	9905      	ldr	r1, [sp, #20]
 801cb28:	2501      	movs	r5, #1
 801cb2a:	4798      	blx	r3
 801cb2c:	6066      	str	r6, [r4, #4]
 801cb2e:	e7e1      	b.n	801caf4 <rcl_guard_condition_init_from_rmw+0x7c>

0801cb30 <rcl_guard_condition_fini>:
 801cb30:	b570      	push	{r4, r5, r6, lr}
 801cb32:	b082      	sub	sp, #8
 801cb34:	b1f0      	cbz	r0, 801cb74 <rcl_guard_condition_fini+0x44>
 801cb36:	6843      	ldr	r3, [r0, #4]
 801cb38:	4604      	mov	r4, r0
 801cb3a:	b163      	cbz	r3, 801cb56 <rcl_guard_condition_fini+0x26>
 801cb3c:	6818      	ldr	r0, [r3, #0]
 801cb3e:	68de      	ldr	r6, [r3, #12]
 801cb40:	6999      	ldr	r1, [r3, #24]
 801cb42:	b160      	cbz	r0, 801cb5e <rcl_guard_condition_fini+0x2e>
 801cb44:	791d      	ldrb	r5, [r3, #4]
 801cb46:	b965      	cbnz	r5, 801cb62 <rcl_guard_condition_fini+0x32>
 801cb48:	4618      	mov	r0, r3
 801cb4a:	47b0      	blx	r6
 801cb4c:	2300      	movs	r3, #0
 801cb4e:	4628      	mov	r0, r5
 801cb50:	6063      	str	r3, [r4, #4]
 801cb52:	b002      	add	sp, #8
 801cb54:	bd70      	pop	{r4, r5, r6, pc}
 801cb56:	461d      	mov	r5, r3
 801cb58:	4628      	mov	r0, r5
 801cb5a:	b002      	add	sp, #8
 801cb5c:	bd70      	pop	{r4, r5, r6, pc}
 801cb5e:	4605      	mov	r5, r0
 801cb60:	e7f2      	b.n	801cb48 <rcl_guard_condition_fini+0x18>
 801cb62:	9101      	str	r1, [sp, #4]
 801cb64:	f000 fb38 	bl	801d1d8 <rmw_destroy_guard_condition>
 801cb68:	1e05      	subs	r5, r0, #0
 801cb6a:	6863      	ldr	r3, [r4, #4]
 801cb6c:	9901      	ldr	r1, [sp, #4]
 801cb6e:	bf18      	it	ne
 801cb70:	2501      	movne	r5, #1
 801cb72:	e7e9      	b.n	801cb48 <rcl_guard_condition_fini+0x18>
 801cb74:	250b      	movs	r5, #11
 801cb76:	4628      	mov	r0, r5
 801cb78:	b002      	add	sp, #8
 801cb7a:	bd70      	pop	{r4, r5, r6, pc}

0801cb7c <rcl_guard_condition_get_default_options>:
 801cb7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb7e:	b087      	sub	sp, #28
 801cb80:	4606      	mov	r6, r0
 801cb82:	4c0b      	ldr	r4, [pc, #44]	; (801cbb0 <rcl_guard_condition_get_default_options+0x34>)
 801cb84:	4668      	mov	r0, sp
 801cb86:	f7f2 f805 	bl	800eb94 <rcutils_get_default_allocator>
 801cb8a:	46ee      	mov	lr, sp
 801cb8c:	46a4      	mov	ip, r4
 801cb8e:	4625      	mov	r5, r4
 801cb90:	4634      	mov	r4, r6
 801cb92:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801cb96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cb9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801cb9c:	f8de 7000 	ldr.w	r7, [lr]
 801cba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801cba2:	4630      	mov	r0, r6
 801cba4:	f8cc 7000 	str.w	r7, [ip]
 801cba8:	6027      	str	r7, [r4, #0]
 801cbaa:	b007      	add	sp, #28
 801cbac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cbae:	bf00      	nop
 801cbb0:	20010d18 	.word	0x20010d18

0801cbb4 <rcl_trigger_guard_condition>:
 801cbb4:	b148      	cbz	r0, 801cbca <rcl_trigger_guard_condition+0x16>
 801cbb6:	b508      	push	{r3, lr}
 801cbb8:	6843      	ldr	r3, [r0, #4]
 801cbba:	b143      	cbz	r3, 801cbce <rcl_trigger_guard_condition+0x1a>
 801cbbc:	6818      	ldr	r0, [r3, #0]
 801cbbe:	f000 fb1f 	bl	801d200 <rmw_trigger_guard_condition>
 801cbc2:	3800      	subs	r0, #0
 801cbc4:	bf18      	it	ne
 801cbc6:	2001      	movne	r0, #1
 801cbc8:	bd08      	pop	{r3, pc}
 801cbca:	200b      	movs	r0, #11
 801cbcc:	4770      	bx	lr
 801cbce:	200b      	movs	r0, #11
 801cbd0:	bd08      	pop	{r3, pc}
 801cbd2:	bf00      	nop

0801cbd4 <rcl_guard_condition_get_rmw_handle>:
 801cbd4:	b110      	cbz	r0, 801cbdc <rcl_guard_condition_get_rmw_handle+0x8>
 801cbd6:	6840      	ldr	r0, [r0, #4]
 801cbd8:	b100      	cbz	r0, 801cbdc <rcl_guard_condition_get_rmw_handle+0x8>
 801cbda:	6800      	ldr	r0, [r0, #0]
 801cbdc:	4770      	bx	lr
 801cbde:	bf00      	nop

0801cbe0 <rcl_validate_topic_name>:
 801cbe0:	2800      	cmp	r0, #0
 801cbe2:	f000 8089 	beq.w	801ccf8 <rcl_validate_topic_name+0x118>
 801cbe6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cbea:	460e      	mov	r6, r1
 801cbec:	2900      	cmp	r1, #0
 801cbee:	f000 8085 	beq.w	801ccfc <rcl_validate_topic_name+0x11c>
 801cbf2:	4604      	mov	r4, r0
 801cbf4:	4617      	mov	r7, r2
 801cbf6:	f7e3 fb83 	bl	8000300 <strlen>
 801cbfa:	b1b0      	cbz	r0, 801cc2a <rcl_validate_topic_name+0x4a>
 801cbfc:	f894 e000 	ldrb.w	lr, [r4]
 801cc00:	f8df c160 	ldr.w	ip, [pc, #352]	; 801cd64 <rcl_validate_topic_name+0x184>
 801cc04:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801cc08:	f013 0304 	ands.w	r3, r3, #4
 801cc0c:	d139      	bne.n	801cc82 <rcl_validate_topic_name+0xa2>
 801cc0e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801cc12:	f814 2008 	ldrb.w	r2, [r4, r8]
 801cc16:	2a2f      	cmp	r2, #47	; 0x2f
 801cc18:	d10f      	bne.n	801cc3a <rcl_validate_topic_name+0x5a>
 801cc1a:	2202      	movs	r2, #2
 801cc1c:	6032      	str	r2, [r6, #0]
 801cc1e:	b3a7      	cbz	r7, 801cc8a <rcl_validate_topic_name+0xaa>
 801cc20:	4618      	mov	r0, r3
 801cc22:	f8c7 8000 	str.w	r8, [r7]
 801cc26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc2a:	2301      	movs	r3, #1
 801cc2c:	6033      	str	r3, [r6, #0]
 801cc2e:	b367      	cbz	r7, 801cc8a <rcl_validate_topic_name+0xaa>
 801cc30:	2300      	movs	r3, #0
 801cc32:	4618      	mov	r0, r3
 801cc34:	603b      	str	r3, [r7, #0]
 801cc36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc3a:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 801cc3e:	461d      	mov	r5, r3
 801cc40:	4619      	mov	r1, r3
 801cc42:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801cc46:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 801cc4a:	f1b9 0f09 	cmp.w	r9, #9
 801cc4e:	d91f      	bls.n	801cc90 <rcl_validate_topic_name+0xb0>
 801cc50:	f022 0920 	bic.w	r9, r2, #32
 801cc54:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 801cc58:	f1b9 0f19 	cmp.w	r9, #25
 801cc5c:	d918      	bls.n	801cc90 <rcl_validate_topic_name+0xb0>
 801cc5e:	2a5f      	cmp	r2, #95	; 0x5f
 801cc60:	d024      	beq.n	801ccac <rcl_validate_topic_name+0xcc>
 801cc62:	2a2f      	cmp	r2, #47	; 0x2f
 801cc64:	d058      	beq.n	801cd18 <rcl_validate_topic_name+0x138>
 801cc66:	2a7e      	cmp	r2, #126	; 0x7e
 801cc68:	d04a      	beq.n	801cd00 <rcl_validate_topic_name+0x120>
 801cc6a:	2a7b      	cmp	r2, #123	; 0x7b
 801cc6c:	d05b      	beq.n	801cd26 <rcl_validate_topic_name+0x146>
 801cc6e:	2a7d      	cmp	r2, #125	; 0x7d
 801cc70:	d169      	bne.n	801cd46 <rcl_validate_topic_name+0x166>
 801cc72:	2d00      	cmp	r5, #0
 801cc74:	d15c      	bne.n	801cd30 <rcl_validate_topic_name+0x150>
 801cc76:	2305      	movs	r3, #5
 801cc78:	6033      	str	r3, [r6, #0]
 801cc7a:	b137      	cbz	r7, 801cc8a <rcl_validate_topic_name+0xaa>
 801cc7c:	2000      	movs	r0, #0
 801cc7e:	6039      	str	r1, [r7, #0]
 801cc80:	e7d9      	b.n	801cc36 <rcl_validate_topic_name+0x56>
 801cc82:	2304      	movs	r3, #4
 801cc84:	6033      	str	r3, [r6, #0]
 801cc86:	2f00      	cmp	r7, #0
 801cc88:	d1d2      	bne.n	801cc30 <rcl_validate_topic_name+0x50>
 801cc8a:	2000      	movs	r0, #0
 801cc8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc90:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801cc94:	0752      	lsls	r2, r2, #29
 801cc96:	d509      	bpl.n	801ccac <rcl_validate_topic_name+0xcc>
 801cc98:	2900      	cmp	r1, #0
 801cc9a:	bf0c      	ite	eq
 801cc9c:	2200      	moveq	r2, #0
 801cc9e:	f005 0201 	andne.w	r2, r5, #1
 801cca2:	b11a      	cbz	r2, 801ccac <rcl_validate_topic_name+0xcc>
 801cca4:	1e4d      	subs	r5, r1, #1
 801cca6:	429d      	cmp	r5, r3
 801cca8:	d031      	beq.n	801cd0e <rcl_validate_topic_name+0x12e>
 801ccaa:	4615      	mov	r5, r2
 801ccac:	3101      	adds	r1, #1
 801ccae:	4288      	cmp	r0, r1
 801ccb0:	d1c7      	bne.n	801cc42 <rcl_validate_topic_name+0x62>
 801ccb2:	2d00      	cmp	r5, #0
 801ccb4:	d142      	bne.n	801cd3c <rcl_validate_topic_name+0x15c>
 801ccb6:	4628      	mov	r0, r5
 801ccb8:	2301      	movs	r3, #1
 801ccba:	e00c      	b.n	801ccd6 <rcl_validate_topic_name+0xf6>
 801ccbc:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 801ccc0:	d101      	bne.n	801ccc6 <rcl_validate_topic_name+0xe6>
 801ccc2:	2801      	cmp	r0, #1
 801ccc4:	d047      	beq.n	801cd56 <rcl_validate_topic_name+0x176>
 801ccc6:	1c5a      	adds	r2, r3, #1
 801ccc8:	428b      	cmp	r3, r1
 801ccca:	f100 0001 	add.w	r0, r0, #1
 801ccce:	f104 0401 	add.w	r4, r4, #1
 801ccd2:	4613      	mov	r3, r2
 801ccd4:	d22e      	bcs.n	801cd34 <rcl_validate_topic_name+0x154>
 801ccd6:	4580      	cmp	r8, r0
 801ccd8:	d0f5      	beq.n	801ccc6 <rcl_validate_topic_name+0xe6>
 801ccda:	7822      	ldrb	r2, [r4, #0]
 801ccdc:	2a2f      	cmp	r2, #47	; 0x2f
 801ccde:	d1ed      	bne.n	801ccbc <rcl_validate_topic_name+0xdc>
 801cce0:	7862      	ldrb	r2, [r4, #1]
 801cce2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801cce6:	0752      	lsls	r2, r2, #29
 801cce8:	d5ed      	bpl.n	801ccc6 <rcl_validate_topic_name+0xe6>
 801ccea:	2204      	movs	r2, #4
 801ccec:	6032      	str	r2, [r6, #0]
 801ccee:	2f00      	cmp	r7, #0
 801ccf0:	d0cb      	beq.n	801cc8a <rcl_validate_topic_name+0xaa>
 801ccf2:	2000      	movs	r0, #0
 801ccf4:	603b      	str	r3, [r7, #0]
 801ccf6:	e79e      	b.n	801cc36 <rcl_validate_topic_name+0x56>
 801ccf8:	200b      	movs	r0, #11
 801ccfa:	4770      	bx	lr
 801ccfc:	200b      	movs	r0, #11
 801ccfe:	e79a      	b.n	801cc36 <rcl_validate_topic_name+0x56>
 801cd00:	2900      	cmp	r1, #0
 801cd02:	d0d3      	beq.n	801ccac <rcl_validate_topic_name+0xcc>
 801cd04:	2306      	movs	r3, #6
 801cd06:	6033      	str	r3, [r6, #0]
 801cd08:	2f00      	cmp	r7, #0
 801cd0a:	d1b7      	bne.n	801cc7c <rcl_validate_topic_name+0x9c>
 801cd0c:	e7bd      	b.n	801cc8a <rcl_validate_topic_name+0xaa>
 801cd0e:	2309      	movs	r3, #9
 801cd10:	6033      	str	r3, [r6, #0]
 801cd12:	2f00      	cmp	r7, #0
 801cd14:	d1b2      	bne.n	801cc7c <rcl_validate_topic_name+0x9c>
 801cd16:	e7b8      	b.n	801cc8a <rcl_validate_topic_name+0xaa>
 801cd18:	2d00      	cmp	r5, #0
 801cd1a:	d0c7      	beq.n	801ccac <rcl_validate_topic_name+0xcc>
 801cd1c:	2308      	movs	r3, #8
 801cd1e:	6033      	str	r3, [r6, #0]
 801cd20:	2f00      	cmp	r7, #0
 801cd22:	d1ab      	bne.n	801cc7c <rcl_validate_topic_name+0x9c>
 801cd24:	e7b1      	b.n	801cc8a <rcl_validate_topic_name+0xaa>
 801cd26:	2d00      	cmp	r5, #0
 801cd28:	d1f8      	bne.n	801cd1c <rcl_validate_topic_name+0x13c>
 801cd2a:	460b      	mov	r3, r1
 801cd2c:	2501      	movs	r5, #1
 801cd2e:	e7bd      	b.n	801ccac <rcl_validate_topic_name+0xcc>
 801cd30:	2500      	movs	r5, #0
 801cd32:	e7bb      	b.n	801ccac <rcl_validate_topic_name+0xcc>
 801cd34:	2300      	movs	r3, #0
 801cd36:	4618      	mov	r0, r3
 801cd38:	6033      	str	r3, [r6, #0]
 801cd3a:	e77c      	b.n	801cc36 <rcl_validate_topic_name+0x56>
 801cd3c:	2205      	movs	r2, #5
 801cd3e:	6032      	str	r2, [r6, #0]
 801cd40:	2f00      	cmp	r7, #0
 801cd42:	d1d6      	bne.n	801ccf2 <rcl_validate_topic_name+0x112>
 801cd44:	e7a1      	b.n	801cc8a <rcl_validate_topic_name+0xaa>
 801cd46:	2d00      	cmp	r5, #0
 801cd48:	bf14      	ite	ne
 801cd4a:	2308      	movne	r3, #8
 801cd4c:	2303      	moveq	r3, #3
 801cd4e:	6033      	str	r3, [r6, #0]
 801cd50:	2f00      	cmp	r7, #0
 801cd52:	d193      	bne.n	801cc7c <rcl_validate_topic_name+0x9c>
 801cd54:	e799      	b.n	801cc8a <rcl_validate_topic_name+0xaa>
 801cd56:	2307      	movs	r3, #7
 801cd58:	6033      	str	r3, [r6, #0]
 801cd5a:	2f00      	cmp	r7, #0
 801cd5c:	d095      	beq.n	801cc8a <rcl_validate_topic_name+0xaa>
 801cd5e:	2301      	movs	r3, #1
 801cd60:	e7c7      	b.n	801ccf2 <rcl_validate_topic_name+0x112>
 801cd62:	bf00      	nop
 801cd64:	08020ca8 	.word	0x08020ca8

0801cd68 <rcutils_split>:
 801cd68:	b082      	sub	sp, #8
 801cd6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd6e:	b08d      	sub	sp, #52	; 0x34
 801cd70:	ac16      	add	r4, sp, #88	; 0x58
 801cd72:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801cd74:	e884 000c 	stmia.w	r4, {r2, r3}
 801cd78:	2f00      	cmp	r7, #0
 801cd7a:	f000 80a8 	beq.w	801cece <rcutils_split+0x166>
 801cd7e:	4605      	mov	r5, r0
 801cd80:	2800      	cmp	r0, #0
 801cd82:	d07e      	beq.n	801ce82 <rcutils_split+0x11a>
 801cd84:	7803      	ldrb	r3, [r0, #0]
 801cd86:	2b00      	cmp	r3, #0
 801cd88:	d07b      	beq.n	801ce82 <rcutils_split+0x11a>
 801cd8a:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 801cd8e:	460e      	mov	r6, r1
 801cd90:	9203      	str	r2, [sp, #12]
 801cd92:	f107 0408 	add.w	r4, r7, #8
 801cd96:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 801cd9a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801cd9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801cda0:	4628      	mov	r0, r5
 801cda2:	f8c4 b000 	str.w	fp, [r4]
 801cda6:	f7e3 faab 	bl	8000300 <strlen>
 801cdaa:	782c      	ldrb	r4, [r5, #0]
 801cdac:	182b      	adds	r3, r5, r0
 801cdae:	1ba4      	subs	r4, r4, r6
 801cdb0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801cdb4:	fab4 f484 	clz	r4, r4
 801cdb8:	42b3      	cmp	r3, r6
 801cdba:	bf14      	ite	ne
 801cdbc:	4680      	movne	r8, r0
 801cdbe:	f1a0 0801 	subeq.w	r8, r0, #1
 801cdc2:	2001      	movs	r0, #1
 801cdc4:	0964      	lsrs	r4, r4, #5
 801cdc6:	6038      	str	r0, [r7, #0]
 801cdc8:	4544      	cmp	r4, r8
 801cdca:	d26b      	bcs.n	801cea4 <rcutils_split+0x13c>
 801cdcc:	192b      	adds	r3, r5, r4
 801cdce:	eb05 0108 	add.w	r1, r5, r8
 801cdd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cdd6:	42b2      	cmp	r2, r6
 801cdd8:	d101      	bne.n	801cdde <rcutils_split+0x76>
 801cdda:	3001      	adds	r0, #1
 801cddc:	6038      	str	r0, [r7, #0]
 801cdde:	4299      	cmp	r1, r3
 801cde0:	d1f7      	bne.n	801cdd2 <rcutils_split+0x6a>
 801cde2:	9b03      	ldr	r3, [sp, #12]
 801cde4:	0080      	lsls	r0, r0, #2
 801cde6:	4659      	mov	r1, fp
 801cde8:	4798      	blx	r3
 801cdea:	4603      	mov	r3, r0
 801cdec:	6078      	str	r0, [r7, #4]
 801cdee:	2800      	cmp	r0, #0
 801cdf0:	d05f      	beq.n	801ceb2 <rcutils_split+0x14a>
 801cdf2:	f04f 0a00 	mov.w	sl, #0
 801cdf6:	46a1      	mov	r9, r4
 801cdf8:	e002      	b.n	801ce00 <rcutils_split+0x98>
 801cdfa:	3401      	adds	r4, #1
 801cdfc:	45a0      	cmp	r8, r4
 801cdfe:	d922      	bls.n	801ce46 <rcutils_split+0xde>
 801ce00:	5d2a      	ldrb	r2, [r5, r4]
 801ce02:	42b2      	cmp	r2, r6
 801ce04:	d1f9      	bne.n	801cdfa <rcutils_split+0x92>
 801ce06:	45a1      	cmp	r9, r4
 801ce08:	eba4 0209 	sub.w	r2, r4, r9
 801ce0c:	d032      	beq.n	801ce74 <rcutils_split+0x10c>
 801ce0e:	4659      	mov	r1, fp
 801ce10:	1c90      	adds	r0, r2, #2
 801ce12:	9302      	str	r3, [sp, #8]
 801ce14:	9b03      	ldr	r3, [sp, #12]
 801ce16:	9201      	str	r2, [sp, #4]
 801ce18:	4798      	blx	r3
 801ce1a:	9a01      	ldr	r2, [sp, #4]
 801ce1c:	9b02      	ldr	r3, [sp, #8]
 801ce1e:	1c51      	adds	r1, r2, #1
 801ce20:	687a      	ldr	r2, [r7, #4]
 801ce22:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 801ce26:	eb05 0309 	add.w	r3, r5, r9
 801ce2a:	f852 002a 	ldr.w	r0, [r2, sl, lsl #2]
 801ce2e:	2800      	cmp	r0, #0
 801ce30:	d04f      	beq.n	801ced2 <rcutils_split+0x16a>
 801ce32:	4a2b      	ldr	r2, [pc, #172]	; (801cee0 <rcutils_split+0x178>)
 801ce34:	f10a 0a01 	add.w	sl, sl, #1
 801ce38:	f000 fd92 	bl	801d960 <sniprintf>
 801ce3c:	687b      	ldr	r3, [r7, #4]
 801ce3e:	3401      	adds	r4, #1
 801ce40:	45a0      	cmp	r8, r4
 801ce42:	46a1      	mov	r9, r4
 801ce44:	d8dc      	bhi.n	801ce00 <rcutils_split+0x98>
 801ce46:	45a1      	cmp	r9, r4
 801ce48:	d039      	beq.n	801cebe <rcutils_split+0x156>
 801ce4a:	eba4 0409 	sub.w	r4, r4, r9
 801ce4e:	4659      	mov	r1, fp
 801ce50:	9301      	str	r3, [sp, #4]
 801ce52:	1ca0      	adds	r0, r4, #2
 801ce54:	9b03      	ldr	r3, [sp, #12]
 801ce56:	4798      	blx	r3
 801ce58:	9b01      	ldr	r3, [sp, #4]
 801ce5a:	4a21      	ldr	r2, [pc, #132]	; (801cee0 <rcutils_split+0x178>)
 801ce5c:	1c61      	adds	r1, r4, #1
 801ce5e:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 801ce62:	eb05 0309 	add.w	r3, r5, r9
 801ce66:	6878      	ldr	r0, [r7, #4]
 801ce68:	2500      	movs	r5, #0
 801ce6a:	f850 002a 	ldr.w	r0, [r0, sl, lsl #2]
 801ce6e:	f000 fd77 	bl	801d960 <sniprintf>
 801ce72:	e011      	b.n	801ce98 <rcutils_split+0x130>
 801ce74:	683a      	ldr	r2, [r7, #0]
 801ce76:	2100      	movs	r1, #0
 801ce78:	3a01      	subs	r2, #1
 801ce7a:	603a      	str	r2, [r7, #0]
 801ce7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801ce80:	e7dd      	b.n	801ce3e <rcutils_split+0xd6>
 801ce82:	ac04      	add	r4, sp, #16
 801ce84:	a804      	add	r0, sp, #16
 801ce86:	f000 f82d 	bl	801cee4 <rcutils_get_zero_initialized_string_array>
 801ce8a:	2500      	movs	r5, #0
 801ce8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801ce8e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801ce90:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801ce94:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801ce98:	4628      	mov	r0, r5
 801ce9a:	b00d      	add	sp, #52	; 0x34
 801ce9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cea0:	b002      	add	sp, #8
 801cea2:	4770      	bx	lr
 801cea4:	9b03      	ldr	r3, [sp, #12]
 801cea6:	4659      	mov	r1, fp
 801cea8:	2004      	movs	r0, #4
 801ceaa:	4798      	blx	r3
 801ceac:	4603      	mov	r3, r0
 801ceae:	6078      	str	r0, [r7, #4]
 801ceb0:	b928      	cbnz	r0, 801cebe <rcutils_split+0x156>
 801ceb2:	4638      	mov	r0, r7
 801ceb4:	f000 f834 	bl	801cf20 <rcutils_string_array_fini>
 801ceb8:	b970      	cbnz	r0, 801ced8 <rcutils_split+0x170>
 801ceba:	2502      	movs	r5, #2
 801cebc:	e7ec      	b.n	801ce98 <rcutils_split+0x130>
 801cebe:	683a      	ldr	r2, [r7, #0]
 801cec0:	2100      	movs	r1, #0
 801cec2:	3a01      	subs	r2, #1
 801cec4:	460d      	mov	r5, r1
 801cec6:	603a      	str	r2, [r7, #0]
 801cec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801cecc:	e7e4      	b.n	801ce98 <rcutils_split+0x130>
 801cece:	250b      	movs	r5, #11
 801ced0:	e7e2      	b.n	801ce98 <rcutils_split+0x130>
 801ced2:	f8c7 a000 	str.w	sl, [r7]
 801ced6:	e7ec      	b.n	801ceb2 <rcutils_split+0x14a>
 801ced8:	2502      	movs	r5, #2
 801ceda:	f7f1 fe8d 	bl	800ebf8 <rcutils_reset_error>
 801cede:	e7db      	b.n	801ce98 <rcutils_split+0x130>
 801cee0:	0801fb7c 	.word	0x0801fb7c

0801cee4 <rcutils_get_zero_initialized_string_array>:
 801cee4:	b570      	push	{r4, r5, r6, lr}
 801cee6:	b086      	sub	sp, #24
 801cee8:	4606      	mov	r6, r0
 801ceea:	4c0c      	ldr	r4, [pc, #48]	; (801cf1c <rcutils_get_zero_initialized_string_array+0x38>)
 801ceec:	4668      	mov	r0, sp
 801ceee:	f7f1 fe25 	bl	800eb3c <rcutils_get_zero_initialized_allocator>
 801cef2:	46ee      	mov	lr, sp
 801cef4:	f104 0508 	add.w	r5, r4, #8
 801cef8:	46a4      	mov	ip, r4
 801cefa:	4634      	mov	r4, r6
 801cefc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801cf00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801cf02:	f8de 3000 	ldr.w	r3, [lr]
 801cf06:	602b      	str	r3, [r5, #0]
 801cf08:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801cf0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801cf0e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801cf12:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801cf16:	4630      	mov	r0, r6
 801cf18:	b006      	add	sp, #24
 801cf1a:	bd70      	pop	{r4, r5, r6, pc}
 801cf1c:	20010d2c 	.word	0x20010d2c

0801cf20 <rcutils_string_array_fini>:
 801cf20:	b328      	cbz	r0, 801cf6e <rcutils_string_array_fini+0x4e>
 801cf22:	b570      	push	{r4, r5, r6, lr}
 801cf24:	4604      	mov	r4, r0
 801cf26:	6840      	ldr	r0, [r0, #4]
 801cf28:	b1e0      	cbz	r0, 801cf64 <rcutils_string_array_fini+0x44>
 801cf2a:	f104 0008 	add.w	r0, r4, #8
 801cf2e:	f7f1 fe3f 	bl	800ebb0 <rcutils_allocator_is_valid>
 801cf32:	b1c0      	cbz	r0, 801cf66 <rcutils_string_array_fini+0x46>
 801cf34:	6823      	ldr	r3, [r4, #0]
 801cf36:	b1c3      	cbz	r3, 801cf6a <rcutils_string_array_fini+0x4a>
 801cf38:	2500      	movs	r5, #0
 801cf3a:	6860      	ldr	r0, [r4, #4]
 801cf3c:	462e      	mov	r6, r5
 801cf3e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801cf42:	68e3      	ldr	r3, [r4, #12]
 801cf44:	69a1      	ldr	r1, [r4, #24]
 801cf46:	4798      	blx	r3
 801cf48:	e9d4 3000 	ldrd	r3, r0, [r4]
 801cf4c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801cf50:	3501      	adds	r5, #1
 801cf52:	429d      	cmp	r5, r3
 801cf54:	d3f3      	bcc.n	801cf3e <rcutils_string_array_fini+0x1e>
 801cf56:	68e3      	ldr	r3, [r4, #12]
 801cf58:	69a1      	ldr	r1, [r4, #24]
 801cf5a:	4798      	blx	r3
 801cf5c:	2300      	movs	r3, #0
 801cf5e:	4618      	mov	r0, r3
 801cf60:	e9c4 3300 	strd	r3, r3, [r4]
 801cf64:	bd70      	pop	{r4, r5, r6, pc}
 801cf66:	200b      	movs	r0, #11
 801cf68:	bd70      	pop	{r4, r5, r6, pc}
 801cf6a:	6860      	ldr	r0, [r4, #4]
 801cf6c:	e7f3      	b.n	801cf56 <rcutils_string_array_fini+0x36>
 801cf6e:	200b      	movs	r0, #11
 801cf70:	4770      	bx	lr
 801cf72:	bf00      	nop

0801cf74 <rmw_get_zero_initialized_discovery_options>:
 801cf74:	b510      	push	{r4, lr}
 801cf76:	4604      	mov	r4, r0
 801cf78:	2220      	movs	r2, #32
 801cf7a:	2100      	movs	r1, #0
 801cf7c:	f000 fdca 	bl	801db14 <memset>
 801cf80:	4620      	mov	r0, r4
 801cf82:	bd10      	pop	{r4, pc}

0801cf84 <rmw_discovery_options_init>:
 801cf84:	b570      	push	{r4, r5, r6, lr}
 801cf86:	b318      	cbz	r0, 801cfd0 <rmw_discovery_options_init+0x4c>
 801cf88:	4604      	mov	r4, r0
 801cf8a:	4610      	mov	r0, r2
 801cf8c:	460e      	mov	r6, r1
 801cf8e:	4615      	mov	r5, r2
 801cf90:	f7f1 fe0e 	bl	800ebb0 <rcutils_allocator_is_valid>
 801cf94:	b1e0      	cbz	r0, 801cfd0 <rmw_discovery_options_init+0x4c>
 801cf96:	68a3      	ldr	r3, [r4, #8]
 801cf98:	b9d3      	cbnz	r3, 801cfd0 <rmw_discovery_options_init+0x4c>
 801cf9a:	6863      	ldr	r3, [r4, #4]
 801cf9c:	b9c3      	cbnz	r3, 801cfd0 <rmw_discovery_options_init+0x4c>
 801cf9e:	7823      	ldrb	r3, [r4, #0]
 801cfa0:	b90b      	cbnz	r3, 801cfa6 <rmw_discovery_options_init+0x22>
 801cfa2:	2302      	movs	r3, #2
 801cfa4:	7023      	strb	r3, [r4, #0]
 801cfa6:	b1a6      	cbz	r6, 801cfd2 <rmw_discovery_options_init+0x4e>
 801cfa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 801cfac:	4630      	mov	r0, r6
 801cfae:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 801cfb2:	4798      	blx	r3
 801cfb4:	6060      	str	r0, [r4, #4]
 801cfb6:	b170      	cbz	r0, 801cfd6 <rmw_discovery_options_init+0x52>
 801cfb8:	f104 0c0c 	add.w	ip, r4, #12
 801cfbc:	60a6      	str	r6, [r4, #8]
 801cfbe:	2600      	movs	r6, #0
 801cfc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801cfc2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801cfc6:	682b      	ldr	r3, [r5, #0]
 801cfc8:	4630      	mov	r0, r6
 801cfca:	f8cc 3000 	str.w	r3, [ip]
 801cfce:	bd70      	pop	{r4, r5, r6, pc}
 801cfd0:	260b      	movs	r6, #11
 801cfd2:	4630      	mov	r0, r6
 801cfd4:	bd70      	pop	{r4, r5, r6, pc}
 801cfd6:	260a      	movs	r6, #10
 801cfd8:	e7fb      	b.n	801cfd2 <rmw_discovery_options_init+0x4e>
 801cfda:	bf00      	nop

0801cfdc <on_status>:
 801cfdc:	b082      	sub	sp, #8
 801cfde:	b002      	add	sp, #8
 801cfe0:	4770      	bx	lr
 801cfe2:	bf00      	nop

0801cfe4 <on_topic>:
 801cfe4:	4a23      	ldr	r2, [pc, #140]	; (801d074 <on_topic+0x90>)
 801cfe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cfea:	6812      	ldr	r2, [r2, #0]
 801cfec:	b094      	sub	sp, #80	; 0x50
 801cfee:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801cff0:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801cff4:	9113      	str	r1, [sp, #76]	; 0x4c
 801cff6:	9312      	str	r3, [sp, #72]	; 0x48
 801cff8:	b3c2      	cbz	r2, 801d06c <on_topic+0x88>
 801cffa:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801cffe:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801d002:	e001      	b.n	801d008 <on_topic+0x24>
 801d004:	6852      	ldr	r2, [r2, #4]
 801d006:	b38a      	cbz	r2, 801d06c <on_topic+0x88>
 801d008:	6894      	ldr	r4, [r2, #8]
 801d00a:	8aa3      	ldrh	r3, [r4, #20]
 801d00c:	428b      	cmp	r3, r1
 801d00e:	d1f9      	bne.n	801d004 <on_topic+0x20>
 801d010:	7da3      	ldrb	r3, [r4, #22]
 801d012:	4283      	cmp	r3, r0
 801d014:	d1f6      	bne.n	801d004 <on_topic+0x20>
 801d016:	2248      	movs	r2, #72	; 0x48
 801d018:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801d01c:	4668      	mov	r0, sp
 801d01e:	f000 feaa 	bl	801dd76 <memcpy>
 801d022:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801d026:	4620      	mov	r0, r4
 801d028:	cb0c      	ldmia	r3, {r2, r3}
 801d02a:	f7f2 f9fd 	bl	800f428 <rmw_uxrce_get_static_input_buffer_for_entity>
 801d02e:	4607      	mov	r7, r0
 801d030:	b1e0      	cbz	r0, 801d06c <on_topic+0x88>
 801d032:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801d036:	462a      	mov	r2, r5
 801d038:	4630      	mov	r0, r6
 801d03a:	f108 0110 	add.w	r1, r8, #16
 801d03e:	f7f2 feb9 	bl	800fdb4 <ucdr_deserialize_array_uint8_t>
 801d042:	b930      	cbnz	r0, 801d052 <on_topic+0x6e>
 801d044:	4639      	mov	r1, r7
 801d046:	480c      	ldr	r0, [pc, #48]	; (801d078 <on_topic+0x94>)
 801d048:	b014      	add	sp, #80	; 0x50
 801d04a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d04e:	f7fc bb59 	b.w	8019704 <put_memory>
 801d052:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801d056:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801d05a:	f7fd fd7f 	bl	801ab5c <rmw_uros_epoch_nanos>
 801d05e:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 801d062:	2305      	movs	r3, #5
 801d064:	e942 0102 	strd	r0, r1, [r2, #-8]
 801d068:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801d06c:	b014      	add	sp, #80	; 0x50
 801d06e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d072:	bf00      	nop
 801d074:	200104fc 	.word	0x200104fc
 801d078:	200104ec 	.word	0x200104ec

0801d07c <on_request>:
 801d07c:	4824      	ldr	r0, [pc, #144]	; (801d110 <on_request+0x94>)
 801d07e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d082:	6800      	ldr	r0, [r0, #0]
 801d084:	b094      	sub	sp, #80	; 0x50
 801d086:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801d088:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801d08c:	9113      	str	r1, [sp, #76]	; 0x4c
 801d08e:	2800      	cmp	r0, #0
 801d090:	d03b      	beq.n	801d10a <on_request+0x8e>
 801d092:	461d      	mov	r5, r3
 801d094:	e001      	b.n	801d09a <on_request+0x1e>
 801d096:	6840      	ldr	r0, [r0, #4]
 801d098:	b3b8      	cbz	r0, 801d10a <on_request+0x8e>
 801d09a:	6884      	ldr	r4, [r0, #8]
 801d09c:	8b21      	ldrh	r1, [r4, #24]
 801d09e:	4291      	cmp	r1, r2
 801d0a0:	d1f9      	bne.n	801d096 <on_request+0x1a>
 801d0a2:	2248      	movs	r2, #72	; 0x48
 801d0a4:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801d0a8:	4668      	mov	r0, sp
 801d0aa:	f000 fe64 	bl	801dd76 <memcpy>
 801d0ae:	f104 0320 	add.w	r3, r4, #32
 801d0b2:	4620      	mov	r0, r4
 801d0b4:	cb0c      	ldmia	r3, {r2, r3}
 801d0b6:	f7f2 f9b7 	bl	800f428 <rmw_uxrce_get_static_input_buffer_for_entity>
 801d0ba:	4680      	mov	r8, r0
 801d0bc:	b328      	cbz	r0, 801d10a <on_request+0x8e>
 801d0be:	4630      	mov	r0, r6
 801d0c0:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801d0c4:	463a      	mov	r2, r7
 801d0c6:	f106 0110 	add.w	r1, r6, #16
 801d0ca:	f7f2 fe73 	bl	800fdb4 <ucdr_deserialize_array_uint8_t>
 801d0ce:	b930      	cbnz	r0, 801d0de <on_request+0x62>
 801d0d0:	4641      	mov	r1, r8
 801d0d2:	4810      	ldr	r0, [pc, #64]	; (801d114 <on_request+0x98>)
 801d0d4:	b014      	add	sp, #80	; 0x50
 801d0d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d0da:	f7fc bb13 	b.w	8019704 <put_memory>
 801d0de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801d0e0:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 801d0e4:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801d0e8:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801d0ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801d0f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 801d0f4:	e88c 0003 	stmia.w	ip, {r0, r1}
 801d0f8:	f7fd fd30 	bl	801ab5c <rmw_uros_epoch_nanos>
 801d0fc:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801d100:	2303      	movs	r3, #3
 801d102:	e942 0102 	strd	r0, r1, [r2, #-8]
 801d106:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801d10a:	b014      	add	sp, #80	; 0x50
 801d10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d110:	200104cc 	.word	0x200104cc
 801d114:	200104ec 	.word	0x200104ec

0801d118 <on_reply>:
 801d118:	4822      	ldr	r0, [pc, #136]	; (801d1a4 <on_reply+0x8c>)
 801d11a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d11e:	6800      	ldr	r0, [r0, #0]
 801d120:	b094      	sub	sp, #80	; 0x50
 801d122:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801d124:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801d128:	9113      	str	r1, [sp, #76]	; 0x4c
 801d12a:	b3b8      	cbz	r0, 801d19c <on_reply+0x84>
 801d12c:	461d      	mov	r5, r3
 801d12e:	e001      	b.n	801d134 <on_reply+0x1c>
 801d130:	6840      	ldr	r0, [r0, #4]
 801d132:	b398      	cbz	r0, 801d19c <on_reply+0x84>
 801d134:	6884      	ldr	r4, [r0, #8]
 801d136:	8b21      	ldrh	r1, [r4, #24]
 801d138:	4291      	cmp	r1, r2
 801d13a:	d1f9      	bne.n	801d130 <on_reply+0x18>
 801d13c:	2248      	movs	r2, #72	; 0x48
 801d13e:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801d142:	4668      	mov	r0, sp
 801d144:	f000 fe17 	bl	801dd76 <memcpy>
 801d148:	f104 0320 	add.w	r3, r4, #32
 801d14c:	4620      	mov	r0, r4
 801d14e:	cb0c      	ldmia	r3, {r2, r3}
 801d150:	f7f2 f96a 	bl	800f428 <rmw_uxrce_get_static_input_buffer_for_entity>
 801d154:	4680      	mov	r8, r0
 801d156:	b308      	cbz	r0, 801d19c <on_reply+0x84>
 801d158:	4630      	mov	r0, r6
 801d15a:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801d15e:	463a      	mov	r2, r7
 801d160:	f106 0110 	add.w	r1, r6, #16
 801d164:	f7f2 fe26 	bl	800fdb4 <ucdr_deserialize_array_uint8_t>
 801d168:	b930      	cbnz	r0, 801d178 <on_reply+0x60>
 801d16a:	4641      	mov	r1, r8
 801d16c:	480e      	ldr	r0, [pc, #56]	; (801d1a8 <on_reply+0x90>)
 801d16e:	b014      	add	sp, #80	; 0x50
 801d170:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d174:	f7fc bac6 	b.w	8019704 <put_memory>
 801d178:	2200      	movs	r2, #0
 801d17a:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801d17e:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801d182:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 801d186:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 801d18a:	f7fd fce7 	bl	801ab5c <rmw_uros_epoch_nanos>
 801d18e:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801d192:	2304      	movs	r3, #4
 801d194:	e942 0102 	strd	r0, r1, [r2, #-8]
 801d198:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801d19c:	b014      	add	sp, #80	; 0x50
 801d19e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d1a2:	bf00      	nop
 801d1a4:	2000bb18 	.word	0x2000bb18
 801d1a8:	200104ec 	.word	0x200104ec

0801d1ac <rmw_create_guard_condition>:
 801d1ac:	b538      	push	{r3, r4, r5, lr}
 801d1ae:	4605      	mov	r5, r0
 801d1b0:	4808      	ldr	r0, [pc, #32]	; (801d1d4 <rmw_create_guard_condition+0x28>)
 801d1b2:	f7fc fa97 	bl	80196e4 <get_memory>
 801d1b6:	4603      	mov	r3, r0
 801d1b8:	b148      	cbz	r0, 801d1ce <rmw_create_guard_condition+0x22>
 801d1ba:	6884      	ldr	r4, [r0, #8]
 801d1bc:	2300      	movs	r3, #0
 801d1be:	61e5      	str	r5, [r4, #28]
 801d1c0:	7423      	strb	r3, [r4, #16]
 801d1c2:	f7fc fb15 	bl	80197f0 <rmw_get_implementation_identifier>
 801d1c6:	f104 0314 	add.w	r3, r4, #20
 801d1ca:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801d1ce:	4618      	mov	r0, r3
 801d1d0:	bd38      	pop	{r3, r4, r5, pc}
 801d1d2:	bf00      	nop
 801d1d4:	2001048c 	.word	0x2001048c

0801d1d8 <rmw_destroy_guard_condition>:
 801d1d8:	b508      	push	{r3, lr}
 801d1da:	4b08      	ldr	r3, [pc, #32]	; (801d1fc <rmw_destroy_guard_condition+0x24>)
 801d1dc:	6819      	ldr	r1, [r3, #0]
 801d1de:	b911      	cbnz	r1, 801d1e6 <rmw_destroy_guard_condition+0xe>
 801d1e0:	e00a      	b.n	801d1f8 <rmw_destroy_guard_condition+0x20>
 801d1e2:	6849      	ldr	r1, [r1, #4]
 801d1e4:	b141      	cbz	r1, 801d1f8 <rmw_destroy_guard_condition+0x20>
 801d1e6:	688b      	ldr	r3, [r1, #8]
 801d1e8:	3314      	adds	r3, #20
 801d1ea:	4298      	cmp	r0, r3
 801d1ec:	d1f9      	bne.n	801d1e2 <rmw_destroy_guard_condition+0xa>
 801d1ee:	4803      	ldr	r0, [pc, #12]	; (801d1fc <rmw_destroy_guard_condition+0x24>)
 801d1f0:	f7fc fa88 	bl	8019704 <put_memory>
 801d1f4:	2000      	movs	r0, #0
 801d1f6:	bd08      	pop	{r3, pc}
 801d1f8:	2001      	movs	r0, #1
 801d1fa:	bd08      	pop	{r3, pc}
 801d1fc:	2001048c 	.word	0x2001048c

0801d200 <rmw_trigger_guard_condition>:
 801d200:	b160      	cbz	r0, 801d21c <rmw_trigger_guard_condition+0x1c>
 801d202:	b510      	push	{r4, lr}
 801d204:	4604      	mov	r4, r0
 801d206:	6800      	ldr	r0, [r0, #0]
 801d208:	f7f2 fb22 	bl	800f850 <is_uxrce_rmw_identifier_valid>
 801d20c:	b908      	cbnz	r0, 801d212 <rmw_trigger_guard_condition+0x12>
 801d20e:	2001      	movs	r0, #1
 801d210:	bd10      	pop	{r4, pc}
 801d212:	6863      	ldr	r3, [r4, #4]
 801d214:	2201      	movs	r2, #1
 801d216:	2000      	movs	r0, #0
 801d218:	741a      	strb	r2, [r3, #16]
 801d21a:	bd10      	pop	{r4, pc}
 801d21c:	2001      	movs	r0, #1
 801d21e:	4770      	bx	lr

0801d220 <expf>:
 801d220:	ee10 2a10 	vmov	r2, s0
 801d224:	f240 412a 	movw	r1, #1066	; 0x42a
 801d228:	f3c2 530a 	ubfx	r3, r2, #20, #11
 801d22c:	428b      	cmp	r3, r1
 801d22e:	b430      	push	{r4, r5}
 801d230:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801d234:	d92a      	bls.n	801d28c <expf+0x6c>
 801d236:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 801d23a:	d058      	beq.n	801d2ee <expf+0xce>
 801d23c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801d240:	d303      	bcc.n	801d24a <expf+0x2a>
 801d242:	ee30 0a00 	vadd.f32	s0, s0, s0
 801d246:	bc30      	pop	{r4, r5}
 801d248:	4770      	bx	lr
 801d24a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801d2f4 <expf+0xd4>
 801d24e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801d252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d256:	dd03      	ble.n	801d260 <expf+0x40>
 801d258:	bc30      	pop	{r4, r5}
 801d25a:	2000      	movs	r0, #0
 801d25c:	f000 b876 	b.w	801d34c <__math_oflowf>
 801d260:	eddf 7a25 	vldr	s15, [pc, #148]	; 801d2f8 <expf+0xd8>
 801d264:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801d268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d26c:	d503      	bpl.n	801d276 <expf+0x56>
 801d26e:	bc30      	pop	{r4, r5}
 801d270:	2000      	movs	r0, #0
 801d272:	f000 b85f 	b.w	801d334 <__math_uflowf>
 801d276:	eddf 7a21 	vldr	s15, [pc, #132]	; 801d2fc <expf+0xdc>
 801d27a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801d27e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d282:	d503      	bpl.n	801d28c <expf+0x6c>
 801d284:	bc30      	pop	{r4, r5}
 801d286:	2000      	movs	r0, #0
 801d288:	f000 b85a 	b.w	801d340 <__math_may_uflowf>
 801d28c:	4b1c      	ldr	r3, [pc, #112]	; (801d300 <expf+0xe0>)
 801d28e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801d292:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 801d296:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 801d29a:	eeb0 7b44 	vmov.f64	d7, d4
 801d29e:	eea5 7b06 	vfma.f64	d7, d5, d6
 801d2a2:	ee17 0a10 	vmov	r0, s14
 801d2a6:	ee37 7b44 	vsub.f64	d7, d7, d4
 801d2aa:	f000 021f 	and.w	r2, r0, #31
 801d2ae:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801d2b2:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 801d2b6:	ee27 4b07 	vmul.f64	d4, d7, d7
 801d2ba:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 801d2be:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 801d2c2:	eea5 6b07 	vfma.f64	d6, d5, d7
 801d2c6:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 801d2ca:	684d      	ldr	r5, [r1, #4]
 801d2cc:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 801d2d0:	2100      	movs	r1, #0
 801d2d2:	190a      	adds	r2, r1, r4
 801d2d4:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 801d2d8:	eea5 0b07 	vfma.f64	d0, d5, d7
 801d2dc:	ec43 2b17 	vmov	d7, r2, r3
 801d2e0:	eea6 0b04 	vfma.f64	d0, d6, d4
 801d2e4:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d2e8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801d2ec:	e7ab      	b.n	801d246 <expf+0x26>
 801d2ee:	ed9f 0a05 	vldr	s0, [pc, #20]	; 801d304 <expf+0xe4>
 801d2f2:	e7a8      	b.n	801d246 <expf+0x26>
 801d2f4:	42b17217 	.word	0x42b17217
 801d2f8:	c2cff1b4 	.word	0xc2cff1b4
 801d2fc:	c2ce8ecf 	.word	0xc2ce8ecf
 801d300:	08020af0 	.word	0x08020af0
 801d304:	00000000 	.word	0x00000000

0801d308 <with_errnof>:
 801d308:	b513      	push	{r0, r1, r4, lr}
 801d30a:	4604      	mov	r4, r0
 801d30c:	ed8d 0a01 	vstr	s0, [sp, #4]
 801d310:	f000 fcfc 	bl	801dd0c <__errno>
 801d314:	ed9d 0a01 	vldr	s0, [sp, #4]
 801d318:	6004      	str	r4, [r0, #0]
 801d31a:	b002      	add	sp, #8
 801d31c:	bd10      	pop	{r4, pc}

0801d31e <xflowf>:
 801d31e:	b130      	cbz	r0, 801d32e <xflowf+0x10>
 801d320:	eef1 7a40 	vneg.f32	s15, s0
 801d324:	ee27 0a80 	vmul.f32	s0, s15, s0
 801d328:	2022      	movs	r0, #34	; 0x22
 801d32a:	f7ff bfed 	b.w	801d308 <with_errnof>
 801d32e:	eef0 7a40 	vmov.f32	s15, s0
 801d332:	e7f7      	b.n	801d324 <xflowf+0x6>

0801d334 <__math_uflowf>:
 801d334:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801d33c <__math_uflowf+0x8>
 801d338:	f7ff bff1 	b.w	801d31e <xflowf>
 801d33c:	10000000 	.word	0x10000000

0801d340 <__math_may_uflowf>:
 801d340:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801d348 <__math_may_uflowf+0x8>
 801d344:	f7ff bfeb 	b.w	801d31e <xflowf>
 801d348:	1a200000 	.word	0x1a200000

0801d34c <__math_oflowf>:
 801d34c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801d354 <__math_oflowf+0x8>
 801d350:	f7ff bfe5 	b.w	801d31e <xflowf>
 801d354:	70000000 	.word	0x70000000

0801d358 <calloc>:
 801d358:	4b02      	ldr	r3, [pc, #8]	; (801d364 <calloc+0xc>)
 801d35a:	460a      	mov	r2, r1
 801d35c:	4601      	mov	r1, r0
 801d35e:	6818      	ldr	r0, [r3, #0]
 801d360:	f000 b802 	b.w	801d368 <_calloc_r>
 801d364:	20002338 	.word	0x20002338

0801d368 <_calloc_r>:
 801d368:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d36a:	fba1 2402 	umull	r2, r4, r1, r2
 801d36e:	b94c      	cbnz	r4, 801d384 <_calloc_r+0x1c>
 801d370:	4611      	mov	r1, r2
 801d372:	9201      	str	r2, [sp, #4]
 801d374:	f000 f886 	bl	801d484 <_malloc_r>
 801d378:	9a01      	ldr	r2, [sp, #4]
 801d37a:	4605      	mov	r5, r0
 801d37c:	b930      	cbnz	r0, 801d38c <_calloc_r+0x24>
 801d37e:	4628      	mov	r0, r5
 801d380:	b003      	add	sp, #12
 801d382:	bd30      	pop	{r4, r5, pc}
 801d384:	220c      	movs	r2, #12
 801d386:	6002      	str	r2, [r0, #0]
 801d388:	2500      	movs	r5, #0
 801d38a:	e7f8      	b.n	801d37e <_calloc_r+0x16>
 801d38c:	4621      	mov	r1, r4
 801d38e:	f000 fbc1 	bl	801db14 <memset>
 801d392:	e7f4      	b.n	801d37e <_calloc_r+0x16>

0801d394 <getenv>:
 801d394:	b507      	push	{r0, r1, r2, lr}
 801d396:	4b04      	ldr	r3, [pc, #16]	; (801d3a8 <getenv+0x14>)
 801d398:	4601      	mov	r1, r0
 801d39a:	aa01      	add	r2, sp, #4
 801d39c:	6818      	ldr	r0, [r3, #0]
 801d39e:	f000 f805 	bl	801d3ac <_findenv_r>
 801d3a2:	b003      	add	sp, #12
 801d3a4:	f85d fb04 	ldr.w	pc, [sp], #4
 801d3a8:	20002338 	.word	0x20002338

0801d3ac <_findenv_r>:
 801d3ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3b0:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801d420 <_findenv_r+0x74>
 801d3b4:	4607      	mov	r7, r0
 801d3b6:	4689      	mov	r9, r1
 801d3b8:	4616      	mov	r6, r2
 801d3ba:	f000 fd09 	bl	801ddd0 <__env_lock>
 801d3be:	f8da 4000 	ldr.w	r4, [sl]
 801d3c2:	b134      	cbz	r4, 801d3d2 <_findenv_r+0x26>
 801d3c4:	464b      	mov	r3, r9
 801d3c6:	4698      	mov	r8, r3
 801d3c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d3cc:	b13a      	cbz	r2, 801d3de <_findenv_r+0x32>
 801d3ce:	2a3d      	cmp	r2, #61	; 0x3d
 801d3d0:	d1f9      	bne.n	801d3c6 <_findenv_r+0x1a>
 801d3d2:	4638      	mov	r0, r7
 801d3d4:	f000 fd02 	bl	801dddc <__env_unlock>
 801d3d8:	2000      	movs	r0, #0
 801d3da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3de:	eba8 0809 	sub.w	r8, r8, r9
 801d3e2:	46a3      	mov	fp, r4
 801d3e4:	f854 0b04 	ldr.w	r0, [r4], #4
 801d3e8:	2800      	cmp	r0, #0
 801d3ea:	d0f2      	beq.n	801d3d2 <_findenv_r+0x26>
 801d3ec:	4642      	mov	r2, r8
 801d3ee:	4649      	mov	r1, r9
 801d3f0:	f000 fba5 	bl	801db3e <strncmp>
 801d3f4:	2800      	cmp	r0, #0
 801d3f6:	d1f4      	bne.n	801d3e2 <_findenv_r+0x36>
 801d3f8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801d3fc:	eb03 0508 	add.w	r5, r3, r8
 801d400:	f813 3008 	ldrb.w	r3, [r3, r8]
 801d404:	2b3d      	cmp	r3, #61	; 0x3d
 801d406:	d1ec      	bne.n	801d3e2 <_findenv_r+0x36>
 801d408:	f8da 3000 	ldr.w	r3, [sl]
 801d40c:	ebab 0303 	sub.w	r3, fp, r3
 801d410:	109b      	asrs	r3, r3, #2
 801d412:	4638      	mov	r0, r7
 801d414:	6033      	str	r3, [r6, #0]
 801d416:	f000 fce1 	bl	801dddc <__env_unlock>
 801d41a:	1c68      	adds	r0, r5, #1
 801d41c:	e7dd      	b.n	801d3da <_findenv_r+0x2e>
 801d41e:	bf00      	nop
 801d420:	20000000 	.word	0x20000000

0801d424 <malloc>:
 801d424:	4b02      	ldr	r3, [pc, #8]	; (801d430 <malloc+0xc>)
 801d426:	4601      	mov	r1, r0
 801d428:	6818      	ldr	r0, [r3, #0]
 801d42a:	f000 b82b 	b.w	801d484 <_malloc_r>
 801d42e:	bf00      	nop
 801d430:	20002338 	.word	0x20002338

0801d434 <free>:
 801d434:	4b02      	ldr	r3, [pc, #8]	; (801d440 <free+0xc>)
 801d436:	4601      	mov	r1, r0
 801d438:	6818      	ldr	r0, [r3, #0]
 801d43a:	f000 bcd5 	b.w	801dde8 <_free_r>
 801d43e:	bf00      	nop
 801d440:	20002338 	.word	0x20002338

0801d444 <sbrk_aligned>:
 801d444:	b570      	push	{r4, r5, r6, lr}
 801d446:	4e0e      	ldr	r6, [pc, #56]	; (801d480 <sbrk_aligned+0x3c>)
 801d448:	460c      	mov	r4, r1
 801d44a:	6831      	ldr	r1, [r6, #0]
 801d44c:	4605      	mov	r5, r0
 801d44e:	b911      	cbnz	r1, 801d456 <sbrk_aligned+0x12>
 801d450:	f000 fc3a 	bl	801dcc8 <_sbrk_r>
 801d454:	6030      	str	r0, [r6, #0]
 801d456:	4621      	mov	r1, r4
 801d458:	4628      	mov	r0, r5
 801d45a:	f000 fc35 	bl	801dcc8 <_sbrk_r>
 801d45e:	1c43      	adds	r3, r0, #1
 801d460:	d00a      	beq.n	801d478 <sbrk_aligned+0x34>
 801d462:	1cc4      	adds	r4, r0, #3
 801d464:	f024 0403 	bic.w	r4, r4, #3
 801d468:	42a0      	cmp	r0, r4
 801d46a:	d007      	beq.n	801d47c <sbrk_aligned+0x38>
 801d46c:	1a21      	subs	r1, r4, r0
 801d46e:	4628      	mov	r0, r5
 801d470:	f000 fc2a 	bl	801dcc8 <_sbrk_r>
 801d474:	3001      	adds	r0, #1
 801d476:	d101      	bne.n	801d47c <sbrk_aligned+0x38>
 801d478:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801d47c:	4620      	mov	r0, r4
 801d47e:	bd70      	pop	{r4, r5, r6, pc}
 801d480:	20010d4c 	.word	0x20010d4c

0801d484 <_malloc_r>:
 801d484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d488:	1ccd      	adds	r5, r1, #3
 801d48a:	f025 0503 	bic.w	r5, r5, #3
 801d48e:	3508      	adds	r5, #8
 801d490:	2d0c      	cmp	r5, #12
 801d492:	bf38      	it	cc
 801d494:	250c      	movcc	r5, #12
 801d496:	2d00      	cmp	r5, #0
 801d498:	4607      	mov	r7, r0
 801d49a:	db01      	blt.n	801d4a0 <_malloc_r+0x1c>
 801d49c:	42a9      	cmp	r1, r5
 801d49e:	d905      	bls.n	801d4ac <_malloc_r+0x28>
 801d4a0:	230c      	movs	r3, #12
 801d4a2:	603b      	str	r3, [r7, #0]
 801d4a4:	2600      	movs	r6, #0
 801d4a6:	4630      	mov	r0, r6
 801d4a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d4ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801d580 <_malloc_r+0xfc>
 801d4b0:	f000 f868 	bl	801d584 <__malloc_lock>
 801d4b4:	f8d8 3000 	ldr.w	r3, [r8]
 801d4b8:	461c      	mov	r4, r3
 801d4ba:	bb5c      	cbnz	r4, 801d514 <_malloc_r+0x90>
 801d4bc:	4629      	mov	r1, r5
 801d4be:	4638      	mov	r0, r7
 801d4c0:	f7ff ffc0 	bl	801d444 <sbrk_aligned>
 801d4c4:	1c43      	adds	r3, r0, #1
 801d4c6:	4604      	mov	r4, r0
 801d4c8:	d155      	bne.n	801d576 <_malloc_r+0xf2>
 801d4ca:	f8d8 4000 	ldr.w	r4, [r8]
 801d4ce:	4626      	mov	r6, r4
 801d4d0:	2e00      	cmp	r6, #0
 801d4d2:	d145      	bne.n	801d560 <_malloc_r+0xdc>
 801d4d4:	2c00      	cmp	r4, #0
 801d4d6:	d048      	beq.n	801d56a <_malloc_r+0xe6>
 801d4d8:	6823      	ldr	r3, [r4, #0]
 801d4da:	4631      	mov	r1, r6
 801d4dc:	4638      	mov	r0, r7
 801d4de:	eb04 0903 	add.w	r9, r4, r3
 801d4e2:	f000 fbf1 	bl	801dcc8 <_sbrk_r>
 801d4e6:	4581      	cmp	r9, r0
 801d4e8:	d13f      	bne.n	801d56a <_malloc_r+0xe6>
 801d4ea:	6821      	ldr	r1, [r4, #0]
 801d4ec:	1a6d      	subs	r5, r5, r1
 801d4ee:	4629      	mov	r1, r5
 801d4f0:	4638      	mov	r0, r7
 801d4f2:	f7ff ffa7 	bl	801d444 <sbrk_aligned>
 801d4f6:	3001      	adds	r0, #1
 801d4f8:	d037      	beq.n	801d56a <_malloc_r+0xe6>
 801d4fa:	6823      	ldr	r3, [r4, #0]
 801d4fc:	442b      	add	r3, r5
 801d4fe:	6023      	str	r3, [r4, #0]
 801d500:	f8d8 3000 	ldr.w	r3, [r8]
 801d504:	2b00      	cmp	r3, #0
 801d506:	d038      	beq.n	801d57a <_malloc_r+0xf6>
 801d508:	685a      	ldr	r2, [r3, #4]
 801d50a:	42a2      	cmp	r2, r4
 801d50c:	d12b      	bne.n	801d566 <_malloc_r+0xe2>
 801d50e:	2200      	movs	r2, #0
 801d510:	605a      	str	r2, [r3, #4]
 801d512:	e00f      	b.n	801d534 <_malloc_r+0xb0>
 801d514:	6822      	ldr	r2, [r4, #0]
 801d516:	1b52      	subs	r2, r2, r5
 801d518:	d41f      	bmi.n	801d55a <_malloc_r+0xd6>
 801d51a:	2a0b      	cmp	r2, #11
 801d51c:	d917      	bls.n	801d54e <_malloc_r+0xca>
 801d51e:	1961      	adds	r1, r4, r5
 801d520:	42a3      	cmp	r3, r4
 801d522:	6025      	str	r5, [r4, #0]
 801d524:	bf18      	it	ne
 801d526:	6059      	strne	r1, [r3, #4]
 801d528:	6863      	ldr	r3, [r4, #4]
 801d52a:	bf08      	it	eq
 801d52c:	f8c8 1000 	streq.w	r1, [r8]
 801d530:	5162      	str	r2, [r4, r5]
 801d532:	604b      	str	r3, [r1, #4]
 801d534:	4638      	mov	r0, r7
 801d536:	f104 060b 	add.w	r6, r4, #11
 801d53a:	f000 f829 	bl	801d590 <__malloc_unlock>
 801d53e:	f026 0607 	bic.w	r6, r6, #7
 801d542:	1d23      	adds	r3, r4, #4
 801d544:	1af2      	subs	r2, r6, r3
 801d546:	d0ae      	beq.n	801d4a6 <_malloc_r+0x22>
 801d548:	1b9b      	subs	r3, r3, r6
 801d54a:	50a3      	str	r3, [r4, r2]
 801d54c:	e7ab      	b.n	801d4a6 <_malloc_r+0x22>
 801d54e:	42a3      	cmp	r3, r4
 801d550:	6862      	ldr	r2, [r4, #4]
 801d552:	d1dd      	bne.n	801d510 <_malloc_r+0x8c>
 801d554:	f8c8 2000 	str.w	r2, [r8]
 801d558:	e7ec      	b.n	801d534 <_malloc_r+0xb0>
 801d55a:	4623      	mov	r3, r4
 801d55c:	6864      	ldr	r4, [r4, #4]
 801d55e:	e7ac      	b.n	801d4ba <_malloc_r+0x36>
 801d560:	4634      	mov	r4, r6
 801d562:	6876      	ldr	r6, [r6, #4]
 801d564:	e7b4      	b.n	801d4d0 <_malloc_r+0x4c>
 801d566:	4613      	mov	r3, r2
 801d568:	e7cc      	b.n	801d504 <_malloc_r+0x80>
 801d56a:	230c      	movs	r3, #12
 801d56c:	603b      	str	r3, [r7, #0]
 801d56e:	4638      	mov	r0, r7
 801d570:	f000 f80e 	bl	801d590 <__malloc_unlock>
 801d574:	e797      	b.n	801d4a6 <_malloc_r+0x22>
 801d576:	6025      	str	r5, [r4, #0]
 801d578:	e7dc      	b.n	801d534 <_malloc_r+0xb0>
 801d57a:	605b      	str	r3, [r3, #4]
 801d57c:	deff      	udf	#255	; 0xff
 801d57e:	bf00      	nop
 801d580:	20010d48 	.word	0x20010d48

0801d584 <__malloc_lock>:
 801d584:	4801      	ldr	r0, [pc, #4]	; (801d58c <__malloc_lock+0x8>)
 801d586:	f000 bbec 	b.w	801dd62 <__retarget_lock_acquire_recursive>
 801d58a:	bf00      	nop
 801d58c:	20010e91 	.word	0x20010e91

0801d590 <__malloc_unlock>:
 801d590:	4801      	ldr	r0, [pc, #4]	; (801d598 <__malloc_unlock+0x8>)
 801d592:	f000 bbe7 	b.w	801dd64 <__retarget_lock_release_recursive>
 801d596:	bf00      	nop
 801d598:	20010e91 	.word	0x20010e91

0801d59c <srand>:
 801d59c:	b538      	push	{r3, r4, r5, lr}
 801d59e:	4b10      	ldr	r3, [pc, #64]	; (801d5e0 <srand+0x44>)
 801d5a0:	681d      	ldr	r5, [r3, #0]
 801d5a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801d5a4:	4604      	mov	r4, r0
 801d5a6:	b9b3      	cbnz	r3, 801d5d6 <srand+0x3a>
 801d5a8:	2018      	movs	r0, #24
 801d5aa:	f7ff ff3b 	bl	801d424 <malloc>
 801d5ae:	4602      	mov	r2, r0
 801d5b0:	6328      	str	r0, [r5, #48]	; 0x30
 801d5b2:	b920      	cbnz	r0, 801d5be <srand+0x22>
 801d5b4:	4b0b      	ldr	r3, [pc, #44]	; (801d5e4 <srand+0x48>)
 801d5b6:	480c      	ldr	r0, [pc, #48]	; (801d5e8 <srand+0x4c>)
 801d5b8:	2146      	movs	r1, #70	; 0x46
 801d5ba:	f000 fbeb 	bl	801dd94 <__assert_func>
 801d5be:	490b      	ldr	r1, [pc, #44]	; (801d5ec <srand+0x50>)
 801d5c0:	4b0b      	ldr	r3, [pc, #44]	; (801d5f0 <srand+0x54>)
 801d5c2:	e9c0 1300 	strd	r1, r3, [r0]
 801d5c6:	4b0b      	ldr	r3, [pc, #44]	; (801d5f4 <srand+0x58>)
 801d5c8:	6083      	str	r3, [r0, #8]
 801d5ca:	230b      	movs	r3, #11
 801d5cc:	8183      	strh	r3, [r0, #12]
 801d5ce:	2100      	movs	r1, #0
 801d5d0:	2001      	movs	r0, #1
 801d5d2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d5d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801d5d8:	2200      	movs	r2, #0
 801d5da:	611c      	str	r4, [r3, #16]
 801d5dc:	615a      	str	r2, [r3, #20]
 801d5de:	bd38      	pop	{r3, r4, r5, pc}
 801d5e0:	20002338 	.word	0x20002338
 801d5e4:	08020c38 	.word	0x08020c38
 801d5e8:	08020c4f 	.word	0x08020c4f
 801d5ec:	abcd330e 	.word	0xabcd330e
 801d5f0:	e66d1234 	.word	0xe66d1234
 801d5f4:	0005deec 	.word	0x0005deec

0801d5f8 <rand>:
 801d5f8:	4b16      	ldr	r3, [pc, #88]	; (801d654 <rand+0x5c>)
 801d5fa:	b510      	push	{r4, lr}
 801d5fc:	681c      	ldr	r4, [r3, #0]
 801d5fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801d600:	b9b3      	cbnz	r3, 801d630 <rand+0x38>
 801d602:	2018      	movs	r0, #24
 801d604:	f7ff ff0e 	bl	801d424 <malloc>
 801d608:	4602      	mov	r2, r0
 801d60a:	6320      	str	r0, [r4, #48]	; 0x30
 801d60c:	b920      	cbnz	r0, 801d618 <rand+0x20>
 801d60e:	4b12      	ldr	r3, [pc, #72]	; (801d658 <rand+0x60>)
 801d610:	4812      	ldr	r0, [pc, #72]	; (801d65c <rand+0x64>)
 801d612:	2152      	movs	r1, #82	; 0x52
 801d614:	f000 fbbe 	bl	801dd94 <__assert_func>
 801d618:	4911      	ldr	r1, [pc, #68]	; (801d660 <rand+0x68>)
 801d61a:	4b12      	ldr	r3, [pc, #72]	; (801d664 <rand+0x6c>)
 801d61c:	e9c0 1300 	strd	r1, r3, [r0]
 801d620:	4b11      	ldr	r3, [pc, #68]	; (801d668 <rand+0x70>)
 801d622:	6083      	str	r3, [r0, #8]
 801d624:	230b      	movs	r3, #11
 801d626:	8183      	strh	r3, [r0, #12]
 801d628:	2100      	movs	r1, #0
 801d62a:	2001      	movs	r0, #1
 801d62c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d630:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801d632:	480e      	ldr	r0, [pc, #56]	; (801d66c <rand+0x74>)
 801d634:	690b      	ldr	r3, [r1, #16]
 801d636:	694c      	ldr	r4, [r1, #20]
 801d638:	4a0d      	ldr	r2, [pc, #52]	; (801d670 <rand+0x78>)
 801d63a:	4358      	muls	r0, r3
 801d63c:	fb02 0004 	mla	r0, r2, r4, r0
 801d640:	fba3 3202 	umull	r3, r2, r3, r2
 801d644:	3301      	adds	r3, #1
 801d646:	eb40 0002 	adc.w	r0, r0, r2
 801d64a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801d64e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801d652:	bd10      	pop	{r4, pc}
 801d654:	20002338 	.word	0x20002338
 801d658:	08020c38 	.word	0x08020c38
 801d65c:	08020c4f 	.word	0x08020c4f
 801d660:	abcd330e 	.word	0xabcd330e
 801d664:	e66d1234 	.word	0xe66d1234
 801d668:	0005deec 	.word	0x0005deec
 801d66c:	5851f42d 	.word	0x5851f42d
 801d670:	4c957f2d 	.word	0x4c957f2d

0801d674 <realloc>:
 801d674:	4b02      	ldr	r3, [pc, #8]	; (801d680 <realloc+0xc>)
 801d676:	460a      	mov	r2, r1
 801d678:	4601      	mov	r1, r0
 801d67a:	6818      	ldr	r0, [r3, #0]
 801d67c:	f000 b802 	b.w	801d684 <_realloc_r>
 801d680:	20002338 	.word	0x20002338

0801d684 <_realloc_r>:
 801d684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d688:	4680      	mov	r8, r0
 801d68a:	4614      	mov	r4, r2
 801d68c:	460e      	mov	r6, r1
 801d68e:	b921      	cbnz	r1, 801d69a <_realloc_r+0x16>
 801d690:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d694:	4611      	mov	r1, r2
 801d696:	f7ff bef5 	b.w	801d484 <_malloc_r>
 801d69a:	b92a      	cbnz	r2, 801d6a8 <_realloc_r+0x24>
 801d69c:	f000 fba4 	bl	801dde8 <_free_r>
 801d6a0:	4625      	mov	r5, r4
 801d6a2:	4628      	mov	r0, r5
 801d6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d6a8:	f000 fbea 	bl	801de80 <_malloc_usable_size_r>
 801d6ac:	4284      	cmp	r4, r0
 801d6ae:	4607      	mov	r7, r0
 801d6b0:	d802      	bhi.n	801d6b8 <_realloc_r+0x34>
 801d6b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d6b6:	d812      	bhi.n	801d6de <_realloc_r+0x5a>
 801d6b8:	4621      	mov	r1, r4
 801d6ba:	4640      	mov	r0, r8
 801d6bc:	f7ff fee2 	bl	801d484 <_malloc_r>
 801d6c0:	4605      	mov	r5, r0
 801d6c2:	2800      	cmp	r0, #0
 801d6c4:	d0ed      	beq.n	801d6a2 <_realloc_r+0x1e>
 801d6c6:	42bc      	cmp	r4, r7
 801d6c8:	4622      	mov	r2, r4
 801d6ca:	4631      	mov	r1, r6
 801d6cc:	bf28      	it	cs
 801d6ce:	463a      	movcs	r2, r7
 801d6d0:	f000 fb51 	bl	801dd76 <memcpy>
 801d6d4:	4631      	mov	r1, r6
 801d6d6:	4640      	mov	r0, r8
 801d6d8:	f000 fb86 	bl	801dde8 <_free_r>
 801d6dc:	e7e1      	b.n	801d6a2 <_realloc_r+0x1e>
 801d6de:	4635      	mov	r5, r6
 801d6e0:	e7df      	b.n	801d6a2 <_realloc_r+0x1e>
	...

0801d6e4 <_strtoul_l.constprop.0>:
 801d6e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d6e8:	4f36      	ldr	r7, [pc, #216]	; (801d7c4 <_strtoul_l.constprop.0+0xe0>)
 801d6ea:	4686      	mov	lr, r0
 801d6ec:	460d      	mov	r5, r1
 801d6ee:	4628      	mov	r0, r5
 801d6f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d6f4:	5d3e      	ldrb	r6, [r7, r4]
 801d6f6:	f016 0608 	ands.w	r6, r6, #8
 801d6fa:	d1f8      	bne.n	801d6ee <_strtoul_l.constprop.0+0xa>
 801d6fc:	2c2d      	cmp	r4, #45	; 0x2d
 801d6fe:	d130      	bne.n	801d762 <_strtoul_l.constprop.0+0x7e>
 801d700:	782c      	ldrb	r4, [r5, #0]
 801d702:	2601      	movs	r6, #1
 801d704:	1c85      	adds	r5, r0, #2
 801d706:	2b00      	cmp	r3, #0
 801d708:	d057      	beq.n	801d7ba <_strtoul_l.constprop.0+0xd6>
 801d70a:	2b10      	cmp	r3, #16
 801d70c:	d109      	bne.n	801d722 <_strtoul_l.constprop.0+0x3e>
 801d70e:	2c30      	cmp	r4, #48	; 0x30
 801d710:	d107      	bne.n	801d722 <_strtoul_l.constprop.0+0x3e>
 801d712:	7828      	ldrb	r0, [r5, #0]
 801d714:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801d718:	2858      	cmp	r0, #88	; 0x58
 801d71a:	d149      	bne.n	801d7b0 <_strtoul_l.constprop.0+0xcc>
 801d71c:	786c      	ldrb	r4, [r5, #1]
 801d71e:	2310      	movs	r3, #16
 801d720:	3502      	adds	r5, #2
 801d722:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801d726:	2700      	movs	r7, #0
 801d728:	fbb8 f8f3 	udiv	r8, r8, r3
 801d72c:	fb03 f908 	mul.w	r9, r3, r8
 801d730:	ea6f 0909 	mvn.w	r9, r9
 801d734:	4638      	mov	r0, r7
 801d736:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801d73a:	f1bc 0f09 	cmp.w	ip, #9
 801d73e:	d815      	bhi.n	801d76c <_strtoul_l.constprop.0+0x88>
 801d740:	4664      	mov	r4, ip
 801d742:	42a3      	cmp	r3, r4
 801d744:	dd23      	ble.n	801d78e <_strtoul_l.constprop.0+0xaa>
 801d746:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801d74a:	d007      	beq.n	801d75c <_strtoul_l.constprop.0+0x78>
 801d74c:	4580      	cmp	r8, r0
 801d74e:	d31b      	bcc.n	801d788 <_strtoul_l.constprop.0+0xa4>
 801d750:	d101      	bne.n	801d756 <_strtoul_l.constprop.0+0x72>
 801d752:	45a1      	cmp	r9, r4
 801d754:	db18      	blt.n	801d788 <_strtoul_l.constprop.0+0xa4>
 801d756:	fb00 4003 	mla	r0, r0, r3, r4
 801d75a:	2701      	movs	r7, #1
 801d75c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d760:	e7e9      	b.n	801d736 <_strtoul_l.constprop.0+0x52>
 801d762:	2c2b      	cmp	r4, #43	; 0x2b
 801d764:	bf04      	itt	eq
 801d766:	782c      	ldrbeq	r4, [r5, #0]
 801d768:	1c85      	addeq	r5, r0, #2
 801d76a:	e7cc      	b.n	801d706 <_strtoul_l.constprop.0+0x22>
 801d76c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801d770:	f1bc 0f19 	cmp.w	ip, #25
 801d774:	d801      	bhi.n	801d77a <_strtoul_l.constprop.0+0x96>
 801d776:	3c37      	subs	r4, #55	; 0x37
 801d778:	e7e3      	b.n	801d742 <_strtoul_l.constprop.0+0x5e>
 801d77a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801d77e:	f1bc 0f19 	cmp.w	ip, #25
 801d782:	d804      	bhi.n	801d78e <_strtoul_l.constprop.0+0xaa>
 801d784:	3c57      	subs	r4, #87	; 0x57
 801d786:	e7dc      	b.n	801d742 <_strtoul_l.constprop.0+0x5e>
 801d788:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801d78c:	e7e6      	b.n	801d75c <_strtoul_l.constprop.0+0x78>
 801d78e:	1c7b      	adds	r3, r7, #1
 801d790:	d106      	bne.n	801d7a0 <_strtoul_l.constprop.0+0xbc>
 801d792:	2322      	movs	r3, #34	; 0x22
 801d794:	f8ce 3000 	str.w	r3, [lr]
 801d798:	4638      	mov	r0, r7
 801d79a:	b932      	cbnz	r2, 801d7aa <_strtoul_l.constprop.0+0xc6>
 801d79c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d7a0:	b106      	cbz	r6, 801d7a4 <_strtoul_l.constprop.0+0xc0>
 801d7a2:	4240      	negs	r0, r0
 801d7a4:	2a00      	cmp	r2, #0
 801d7a6:	d0f9      	beq.n	801d79c <_strtoul_l.constprop.0+0xb8>
 801d7a8:	b107      	cbz	r7, 801d7ac <_strtoul_l.constprop.0+0xc8>
 801d7aa:	1e69      	subs	r1, r5, #1
 801d7ac:	6011      	str	r1, [r2, #0]
 801d7ae:	e7f5      	b.n	801d79c <_strtoul_l.constprop.0+0xb8>
 801d7b0:	2430      	movs	r4, #48	; 0x30
 801d7b2:	2b00      	cmp	r3, #0
 801d7b4:	d1b5      	bne.n	801d722 <_strtoul_l.constprop.0+0x3e>
 801d7b6:	2308      	movs	r3, #8
 801d7b8:	e7b3      	b.n	801d722 <_strtoul_l.constprop.0+0x3e>
 801d7ba:	2c30      	cmp	r4, #48	; 0x30
 801d7bc:	d0a9      	beq.n	801d712 <_strtoul_l.constprop.0+0x2e>
 801d7be:	230a      	movs	r3, #10
 801d7c0:	e7af      	b.n	801d722 <_strtoul_l.constprop.0+0x3e>
 801d7c2:	bf00      	nop
 801d7c4:	08020ca8 	.word	0x08020ca8

0801d7c8 <strtoul>:
 801d7c8:	4613      	mov	r3, r2
 801d7ca:	460a      	mov	r2, r1
 801d7cc:	4601      	mov	r1, r0
 801d7ce:	4802      	ldr	r0, [pc, #8]	; (801d7d8 <strtoul+0x10>)
 801d7d0:	6800      	ldr	r0, [r0, #0]
 801d7d2:	f7ff bf87 	b.w	801d6e4 <_strtoul_l.constprop.0>
 801d7d6:	bf00      	nop
 801d7d8:	20002338 	.word	0x20002338

0801d7dc <std>:
 801d7dc:	2300      	movs	r3, #0
 801d7de:	b510      	push	{r4, lr}
 801d7e0:	4604      	mov	r4, r0
 801d7e2:	e9c0 3300 	strd	r3, r3, [r0]
 801d7e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d7ea:	6083      	str	r3, [r0, #8]
 801d7ec:	8181      	strh	r1, [r0, #12]
 801d7ee:	6643      	str	r3, [r0, #100]	; 0x64
 801d7f0:	81c2      	strh	r2, [r0, #14]
 801d7f2:	6183      	str	r3, [r0, #24]
 801d7f4:	4619      	mov	r1, r3
 801d7f6:	2208      	movs	r2, #8
 801d7f8:	305c      	adds	r0, #92	; 0x5c
 801d7fa:	f000 f98b 	bl	801db14 <memset>
 801d7fe:	4b0d      	ldr	r3, [pc, #52]	; (801d834 <std+0x58>)
 801d800:	6263      	str	r3, [r4, #36]	; 0x24
 801d802:	4b0d      	ldr	r3, [pc, #52]	; (801d838 <std+0x5c>)
 801d804:	62a3      	str	r3, [r4, #40]	; 0x28
 801d806:	4b0d      	ldr	r3, [pc, #52]	; (801d83c <std+0x60>)
 801d808:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d80a:	4b0d      	ldr	r3, [pc, #52]	; (801d840 <std+0x64>)
 801d80c:	6323      	str	r3, [r4, #48]	; 0x30
 801d80e:	4b0d      	ldr	r3, [pc, #52]	; (801d844 <std+0x68>)
 801d810:	6224      	str	r4, [r4, #32]
 801d812:	429c      	cmp	r4, r3
 801d814:	d006      	beq.n	801d824 <std+0x48>
 801d816:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801d81a:	4294      	cmp	r4, r2
 801d81c:	d002      	beq.n	801d824 <std+0x48>
 801d81e:	33d0      	adds	r3, #208	; 0xd0
 801d820:	429c      	cmp	r4, r3
 801d822:	d105      	bne.n	801d830 <std+0x54>
 801d824:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d82c:	f000 ba98 	b.w	801dd60 <__retarget_lock_init_recursive>
 801d830:	bd10      	pop	{r4, pc}
 801d832:	bf00      	nop
 801d834:	0801d9c9 	.word	0x0801d9c9
 801d838:	0801d9eb 	.word	0x0801d9eb
 801d83c:	0801da23 	.word	0x0801da23
 801d840:	0801da47 	.word	0x0801da47
 801d844:	20010d50 	.word	0x20010d50

0801d848 <stdio_exit_handler>:
 801d848:	4a02      	ldr	r2, [pc, #8]	; (801d854 <stdio_exit_handler+0xc>)
 801d84a:	4903      	ldr	r1, [pc, #12]	; (801d858 <stdio_exit_handler+0x10>)
 801d84c:	4803      	ldr	r0, [pc, #12]	; (801d85c <stdio_exit_handler+0x14>)
 801d84e:	f000 b869 	b.w	801d924 <_fwalk_sglue>
 801d852:	bf00      	nop
 801d854:	200022e0 	.word	0x200022e0
 801d858:	0801e56d 	.word	0x0801e56d
 801d85c:	200022ec 	.word	0x200022ec

0801d860 <cleanup_stdio>:
 801d860:	6841      	ldr	r1, [r0, #4]
 801d862:	4b0c      	ldr	r3, [pc, #48]	; (801d894 <cleanup_stdio+0x34>)
 801d864:	4299      	cmp	r1, r3
 801d866:	b510      	push	{r4, lr}
 801d868:	4604      	mov	r4, r0
 801d86a:	d001      	beq.n	801d870 <cleanup_stdio+0x10>
 801d86c:	f000 fe7e 	bl	801e56c <_fflush_r>
 801d870:	68a1      	ldr	r1, [r4, #8]
 801d872:	4b09      	ldr	r3, [pc, #36]	; (801d898 <cleanup_stdio+0x38>)
 801d874:	4299      	cmp	r1, r3
 801d876:	d002      	beq.n	801d87e <cleanup_stdio+0x1e>
 801d878:	4620      	mov	r0, r4
 801d87a:	f000 fe77 	bl	801e56c <_fflush_r>
 801d87e:	68e1      	ldr	r1, [r4, #12]
 801d880:	4b06      	ldr	r3, [pc, #24]	; (801d89c <cleanup_stdio+0x3c>)
 801d882:	4299      	cmp	r1, r3
 801d884:	d004      	beq.n	801d890 <cleanup_stdio+0x30>
 801d886:	4620      	mov	r0, r4
 801d888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d88c:	f000 be6e 	b.w	801e56c <_fflush_r>
 801d890:	bd10      	pop	{r4, pc}
 801d892:	bf00      	nop
 801d894:	20010d50 	.word	0x20010d50
 801d898:	20010db8 	.word	0x20010db8
 801d89c:	20010e20 	.word	0x20010e20

0801d8a0 <global_stdio_init.part.0>:
 801d8a0:	b510      	push	{r4, lr}
 801d8a2:	4b0b      	ldr	r3, [pc, #44]	; (801d8d0 <global_stdio_init.part.0+0x30>)
 801d8a4:	4c0b      	ldr	r4, [pc, #44]	; (801d8d4 <global_stdio_init.part.0+0x34>)
 801d8a6:	4a0c      	ldr	r2, [pc, #48]	; (801d8d8 <global_stdio_init.part.0+0x38>)
 801d8a8:	601a      	str	r2, [r3, #0]
 801d8aa:	4620      	mov	r0, r4
 801d8ac:	2200      	movs	r2, #0
 801d8ae:	2104      	movs	r1, #4
 801d8b0:	f7ff ff94 	bl	801d7dc <std>
 801d8b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801d8b8:	2201      	movs	r2, #1
 801d8ba:	2109      	movs	r1, #9
 801d8bc:	f7ff ff8e 	bl	801d7dc <std>
 801d8c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801d8c4:	2202      	movs	r2, #2
 801d8c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d8ca:	2112      	movs	r1, #18
 801d8cc:	f7ff bf86 	b.w	801d7dc <std>
 801d8d0:	20010e88 	.word	0x20010e88
 801d8d4:	20010d50 	.word	0x20010d50
 801d8d8:	0801d849 	.word	0x0801d849

0801d8dc <__sfp_lock_acquire>:
 801d8dc:	4801      	ldr	r0, [pc, #4]	; (801d8e4 <__sfp_lock_acquire+0x8>)
 801d8de:	f000 ba40 	b.w	801dd62 <__retarget_lock_acquire_recursive>
 801d8e2:	bf00      	nop
 801d8e4:	20010e92 	.word	0x20010e92

0801d8e8 <__sfp_lock_release>:
 801d8e8:	4801      	ldr	r0, [pc, #4]	; (801d8f0 <__sfp_lock_release+0x8>)
 801d8ea:	f000 ba3b 	b.w	801dd64 <__retarget_lock_release_recursive>
 801d8ee:	bf00      	nop
 801d8f0:	20010e92 	.word	0x20010e92

0801d8f4 <__sinit>:
 801d8f4:	b510      	push	{r4, lr}
 801d8f6:	4604      	mov	r4, r0
 801d8f8:	f7ff fff0 	bl	801d8dc <__sfp_lock_acquire>
 801d8fc:	6a23      	ldr	r3, [r4, #32]
 801d8fe:	b11b      	cbz	r3, 801d908 <__sinit+0x14>
 801d900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d904:	f7ff bff0 	b.w	801d8e8 <__sfp_lock_release>
 801d908:	4b04      	ldr	r3, [pc, #16]	; (801d91c <__sinit+0x28>)
 801d90a:	6223      	str	r3, [r4, #32]
 801d90c:	4b04      	ldr	r3, [pc, #16]	; (801d920 <__sinit+0x2c>)
 801d90e:	681b      	ldr	r3, [r3, #0]
 801d910:	2b00      	cmp	r3, #0
 801d912:	d1f5      	bne.n	801d900 <__sinit+0xc>
 801d914:	f7ff ffc4 	bl	801d8a0 <global_stdio_init.part.0>
 801d918:	e7f2      	b.n	801d900 <__sinit+0xc>
 801d91a:	bf00      	nop
 801d91c:	0801d861 	.word	0x0801d861
 801d920:	20010e88 	.word	0x20010e88

0801d924 <_fwalk_sglue>:
 801d924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d928:	4607      	mov	r7, r0
 801d92a:	4688      	mov	r8, r1
 801d92c:	4614      	mov	r4, r2
 801d92e:	2600      	movs	r6, #0
 801d930:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d934:	f1b9 0901 	subs.w	r9, r9, #1
 801d938:	d505      	bpl.n	801d946 <_fwalk_sglue+0x22>
 801d93a:	6824      	ldr	r4, [r4, #0]
 801d93c:	2c00      	cmp	r4, #0
 801d93e:	d1f7      	bne.n	801d930 <_fwalk_sglue+0xc>
 801d940:	4630      	mov	r0, r6
 801d942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d946:	89ab      	ldrh	r3, [r5, #12]
 801d948:	2b01      	cmp	r3, #1
 801d94a:	d907      	bls.n	801d95c <_fwalk_sglue+0x38>
 801d94c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d950:	3301      	adds	r3, #1
 801d952:	d003      	beq.n	801d95c <_fwalk_sglue+0x38>
 801d954:	4629      	mov	r1, r5
 801d956:	4638      	mov	r0, r7
 801d958:	47c0      	blx	r8
 801d95a:	4306      	orrs	r6, r0
 801d95c:	3568      	adds	r5, #104	; 0x68
 801d95e:	e7e9      	b.n	801d934 <_fwalk_sglue+0x10>

0801d960 <sniprintf>:
 801d960:	b40c      	push	{r2, r3}
 801d962:	b530      	push	{r4, r5, lr}
 801d964:	4b17      	ldr	r3, [pc, #92]	; (801d9c4 <sniprintf+0x64>)
 801d966:	1e0c      	subs	r4, r1, #0
 801d968:	681d      	ldr	r5, [r3, #0]
 801d96a:	b09d      	sub	sp, #116	; 0x74
 801d96c:	da08      	bge.n	801d980 <sniprintf+0x20>
 801d96e:	238b      	movs	r3, #139	; 0x8b
 801d970:	602b      	str	r3, [r5, #0]
 801d972:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d976:	b01d      	add	sp, #116	; 0x74
 801d978:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d97c:	b002      	add	sp, #8
 801d97e:	4770      	bx	lr
 801d980:	f44f 7302 	mov.w	r3, #520	; 0x208
 801d984:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d988:	bf14      	ite	ne
 801d98a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801d98e:	4623      	moveq	r3, r4
 801d990:	9304      	str	r3, [sp, #16]
 801d992:	9307      	str	r3, [sp, #28]
 801d994:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801d998:	9002      	str	r0, [sp, #8]
 801d99a:	9006      	str	r0, [sp, #24]
 801d99c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d9a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d9a2:	ab21      	add	r3, sp, #132	; 0x84
 801d9a4:	a902      	add	r1, sp, #8
 801d9a6:	4628      	mov	r0, r5
 801d9a8:	9301      	str	r3, [sp, #4]
 801d9aa:	f000 facb 	bl	801df44 <_svfiprintf_r>
 801d9ae:	1c43      	adds	r3, r0, #1
 801d9b0:	bfbc      	itt	lt
 801d9b2:	238b      	movlt	r3, #139	; 0x8b
 801d9b4:	602b      	strlt	r3, [r5, #0]
 801d9b6:	2c00      	cmp	r4, #0
 801d9b8:	d0dd      	beq.n	801d976 <sniprintf+0x16>
 801d9ba:	9b02      	ldr	r3, [sp, #8]
 801d9bc:	2200      	movs	r2, #0
 801d9be:	701a      	strb	r2, [r3, #0]
 801d9c0:	e7d9      	b.n	801d976 <sniprintf+0x16>
 801d9c2:	bf00      	nop
 801d9c4:	20002338 	.word	0x20002338

0801d9c8 <__sread>:
 801d9c8:	b510      	push	{r4, lr}
 801d9ca:	460c      	mov	r4, r1
 801d9cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d9d0:	f000 f968 	bl	801dca4 <_read_r>
 801d9d4:	2800      	cmp	r0, #0
 801d9d6:	bfab      	itete	ge
 801d9d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d9da:	89a3      	ldrhlt	r3, [r4, #12]
 801d9dc:	181b      	addge	r3, r3, r0
 801d9de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d9e2:	bfac      	ite	ge
 801d9e4:	6563      	strge	r3, [r4, #84]	; 0x54
 801d9e6:	81a3      	strhlt	r3, [r4, #12]
 801d9e8:	bd10      	pop	{r4, pc}

0801d9ea <__swrite>:
 801d9ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d9ee:	461f      	mov	r7, r3
 801d9f0:	898b      	ldrh	r3, [r1, #12]
 801d9f2:	05db      	lsls	r3, r3, #23
 801d9f4:	4605      	mov	r5, r0
 801d9f6:	460c      	mov	r4, r1
 801d9f8:	4616      	mov	r6, r2
 801d9fa:	d505      	bpl.n	801da08 <__swrite+0x1e>
 801d9fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801da00:	2302      	movs	r3, #2
 801da02:	2200      	movs	r2, #0
 801da04:	f000 f93c 	bl	801dc80 <_lseek_r>
 801da08:	89a3      	ldrh	r3, [r4, #12]
 801da0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801da0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801da12:	81a3      	strh	r3, [r4, #12]
 801da14:	4632      	mov	r2, r6
 801da16:	463b      	mov	r3, r7
 801da18:	4628      	mov	r0, r5
 801da1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801da1e:	f000 b963 	b.w	801dce8 <_write_r>

0801da22 <__sseek>:
 801da22:	b510      	push	{r4, lr}
 801da24:	460c      	mov	r4, r1
 801da26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801da2a:	f000 f929 	bl	801dc80 <_lseek_r>
 801da2e:	1c43      	adds	r3, r0, #1
 801da30:	89a3      	ldrh	r3, [r4, #12]
 801da32:	bf15      	itete	ne
 801da34:	6560      	strne	r0, [r4, #84]	; 0x54
 801da36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801da3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801da3e:	81a3      	strheq	r3, [r4, #12]
 801da40:	bf18      	it	ne
 801da42:	81a3      	strhne	r3, [r4, #12]
 801da44:	bd10      	pop	{r4, pc}

0801da46 <__sclose>:
 801da46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801da4a:	f000 b8b3 	b.w	801dbb4 <_close_r>

0801da4e <_vsniprintf_r>:
 801da4e:	b530      	push	{r4, r5, lr}
 801da50:	4614      	mov	r4, r2
 801da52:	2c00      	cmp	r4, #0
 801da54:	b09b      	sub	sp, #108	; 0x6c
 801da56:	4605      	mov	r5, r0
 801da58:	461a      	mov	r2, r3
 801da5a:	da05      	bge.n	801da68 <_vsniprintf_r+0x1a>
 801da5c:	238b      	movs	r3, #139	; 0x8b
 801da5e:	6003      	str	r3, [r0, #0]
 801da60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801da64:	b01b      	add	sp, #108	; 0x6c
 801da66:	bd30      	pop	{r4, r5, pc}
 801da68:	f44f 7302 	mov.w	r3, #520	; 0x208
 801da6c:	f8ad 300c 	strh.w	r3, [sp, #12]
 801da70:	bf14      	ite	ne
 801da72:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801da76:	4623      	moveq	r3, r4
 801da78:	9302      	str	r3, [sp, #8]
 801da7a:	9305      	str	r3, [sp, #20]
 801da7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801da80:	9100      	str	r1, [sp, #0]
 801da82:	9104      	str	r1, [sp, #16]
 801da84:	f8ad 300e 	strh.w	r3, [sp, #14]
 801da88:	4669      	mov	r1, sp
 801da8a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801da8c:	f000 fa5a 	bl	801df44 <_svfiprintf_r>
 801da90:	1c43      	adds	r3, r0, #1
 801da92:	bfbc      	itt	lt
 801da94:	238b      	movlt	r3, #139	; 0x8b
 801da96:	602b      	strlt	r3, [r5, #0]
 801da98:	2c00      	cmp	r4, #0
 801da9a:	d0e3      	beq.n	801da64 <_vsniprintf_r+0x16>
 801da9c:	9b00      	ldr	r3, [sp, #0]
 801da9e:	2200      	movs	r2, #0
 801daa0:	701a      	strb	r2, [r3, #0]
 801daa2:	e7df      	b.n	801da64 <_vsniprintf_r+0x16>

0801daa4 <vsniprintf>:
 801daa4:	b507      	push	{r0, r1, r2, lr}
 801daa6:	9300      	str	r3, [sp, #0]
 801daa8:	4613      	mov	r3, r2
 801daaa:	460a      	mov	r2, r1
 801daac:	4601      	mov	r1, r0
 801daae:	4803      	ldr	r0, [pc, #12]	; (801dabc <vsniprintf+0x18>)
 801dab0:	6800      	ldr	r0, [r0, #0]
 801dab2:	f7ff ffcc 	bl	801da4e <_vsniprintf_r>
 801dab6:	b003      	add	sp, #12
 801dab8:	f85d fb04 	ldr.w	pc, [sp], #4
 801dabc:	20002338 	.word	0x20002338

0801dac0 <memcmp>:
 801dac0:	b510      	push	{r4, lr}
 801dac2:	3901      	subs	r1, #1
 801dac4:	4402      	add	r2, r0
 801dac6:	4290      	cmp	r0, r2
 801dac8:	d101      	bne.n	801dace <memcmp+0xe>
 801daca:	2000      	movs	r0, #0
 801dacc:	e005      	b.n	801dada <memcmp+0x1a>
 801dace:	7803      	ldrb	r3, [r0, #0]
 801dad0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801dad4:	42a3      	cmp	r3, r4
 801dad6:	d001      	beq.n	801dadc <memcmp+0x1c>
 801dad8:	1b18      	subs	r0, r3, r4
 801dada:	bd10      	pop	{r4, pc}
 801dadc:	3001      	adds	r0, #1
 801dade:	e7f2      	b.n	801dac6 <memcmp+0x6>

0801dae0 <memmove>:
 801dae0:	4288      	cmp	r0, r1
 801dae2:	b510      	push	{r4, lr}
 801dae4:	eb01 0402 	add.w	r4, r1, r2
 801dae8:	d902      	bls.n	801daf0 <memmove+0x10>
 801daea:	4284      	cmp	r4, r0
 801daec:	4623      	mov	r3, r4
 801daee:	d807      	bhi.n	801db00 <memmove+0x20>
 801daf0:	1e43      	subs	r3, r0, #1
 801daf2:	42a1      	cmp	r1, r4
 801daf4:	d008      	beq.n	801db08 <memmove+0x28>
 801daf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801dafa:	f803 2f01 	strb.w	r2, [r3, #1]!
 801dafe:	e7f8      	b.n	801daf2 <memmove+0x12>
 801db00:	4402      	add	r2, r0
 801db02:	4601      	mov	r1, r0
 801db04:	428a      	cmp	r2, r1
 801db06:	d100      	bne.n	801db0a <memmove+0x2a>
 801db08:	bd10      	pop	{r4, pc}
 801db0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801db0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801db12:	e7f7      	b.n	801db04 <memmove+0x24>

0801db14 <memset>:
 801db14:	4402      	add	r2, r0
 801db16:	4603      	mov	r3, r0
 801db18:	4293      	cmp	r3, r2
 801db1a:	d100      	bne.n	801db1e <memset+0xa>
 801db1c:	4770      	bx	lr
 801db1e:	f803 1b01 	strb.w	r1, [r3], #1
 801db22:	e7f9      	b.n	801db18 <memset+0x4>

0801db24 <strchr>:
 801db24:	b2c9      	uxtb	r1, r1
 801db26:	4603      	mov	r3, r0
 801db28:	f810 2b01 	ldrb.w	r2, [r0], #1
 801db2c:	b11a      	cbz	r2, 801db36 <strchr+0x12>
 801db2e:	428a      	cmp	r2, r1
 801db30:	d1f9      	bne.n	801db26 <strchr+0x2>
 801db32:	4618      	mov	r0, r3
 801db34:	4770      	bx	lr
 801db36:	2900      	cmp	r1, #0
 801db38:	bf18      	it	ne
 801db3a:	2300      	movne	r3, #0
 801db3c:	e7f9      	b.n	801db32 <strchr+0xe>

0801db3e <strncmp>:
 801db3e:	b510      	push	{r4, lr}
 801db40:	b16a      	cbz	r2, 801db5e <strncmp+0x20>
 801db42:	3901      	subs	r1, #1
 801db44:	1884      	adds	r4, r0, r2
 801db46:	f810 2b01 	ldrb.w	r2, [r0], #1
 801db4a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801db4e:	429a      	cmp	r2, r3
 801db50:	d103      	bne.n	801db5a <strncmp+0x1c>
 801db52:	42a0      	cmp	r0, r4
 801db54:	d001      	beq.n	801db5a <strncmp+0x1c>
 801db56:	2a00      	cmp	r2, #0
 801db58:	d1f5      	bne.n	801db46 <strncmp+0x8>
 801db5a:	1ad0      	subs	r0, r2, r3
 801db5c:	bd10      	pop	{r4, pc}
 801db5e:	4610      	mov	r0, r2
 801db60:	e7fc      	b.n	801db5c <strncmp+0x1e>

0801db62 <strncpy>:
 801db62:	b510      	push	{r4, lr}
 801db64:	3901      	subs	r1, #1
 801db66:	4603      	mov	r3, r0
 801db68:	b132      	cbz	r2, 801db78 <strncpy+0x16>
 801db6a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801db6e:	f803 4b01 	strb.w	r4, [r3], #1
 801db72:	3a01      	subs	r2, #1
 801db74:	2c00      	cmp	r4, #0
 801db76:	d1f7      	bne.n	801db68 <strncpy+0x6>
 801db78:	441a      	add	r2, r3
 801db7a:	2100      	movs	r1, #0
 801db7c:	4293      	cmp	r3, r2
 801db7e:	d100      	bne.n	801db82 <strncpy+0x20>
 801db80:	bd10      	pop	{r4, pc}
 801db82:	f803 1b01 	strb.w	r1, [r3], #1
 801db86:	e7f9      	b.n	801db7c <strncpy+0x1a>

0801db88 <strstr>:
 801db88:	780a      	ldrb	r2, [r1, #0]
 801db8a:	b570      	push	{r4, r5, r6, lr}
 801db8c:	b96a      	cbnz	r2, 801dbaa <strstr+0x22>
 801db8e:	bd70      	pop	{r4, r5, r6, pc}
 801db90:	429a      	cmp	r2, r3
 801db92:	d109      	bne.n	801dba8 <strstr+0x20>
 801db94:	460c      	mov	r4, r1
 801db96:	4605      	mov	r5, r0
 801db98:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801db9c:	2b00      	cmp	r3, #0
 801db9e:	d0f6      	beq.n	801db8e <strstr+0x6>
 801dba0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801dba4:	429e      	cmp	r6, r3
 801dba6:	d0f7      	beq.n	801db98 <strstr+0x10>
 801dba8:	3001      	adds	r0, #1
 801dbaa:	7803      	ldrb	r3, [r0, #0]
 801dbac:	2b00      	cmp	r3, #0
 801dbae:	d1ef      	bne.n	801db90 <strstr+0x8>
 801dbb0:	4618      	mov	r0, r3
 801dbb2:	e7ec      	b.n	801db8e <strstr+0x6>

0801dbb4 <_close_r>:
 801dbb4:	b538      	push	{r3, r4, r5, lr}
 801dbb6:	4d06      	ldr	r5, [pc, #24]	; (801dbd0 <_close_r+0x1c>)
 801dbb8:	2300      	movs	r3, #0
 801dbba:	4604      	mov	r4, r0
 801dbbc:	4608      	mov	r0, r1
 801dbbe:	602b      	str	r3, [r5, #0]
 801dbc0:	f7e5 fd75 	bl	80036ae <_close>
 801dbc4:	1c43      	adds	r3, r0, #1
 801dbc6:	d102      	bne.n	801dbce <_close_r+0x1a>
 801dbc8:	682b      	ldr	r3, [r5, #0]
 801dbca:	b103      	cbz	r3, 801dbce <_close_r+0x1a>
 801dbcc:	6023      	str	r3, [r4, #0]
 801dbce:	bd38      	pop	{r3, r4, r5, pc}
 801dbd0:	20010e8c 	.word	0x20010e8c

0801dbd4 <_reclaim_reent>:
 801dbd4:	4b29      	ldr	r3, [pc, #164]	; (801dc7c <_reclaim_reent+0xa8>)
 801dbd6:	681b      	ldr	r3, [r3, #0]
 801dbd8:	4283      	cmp	r3, r0
 801dbda:	b570      	push	{r4, r5, r6, lr}
 801dbdc:	4604      	mov	r4, r0
 801dbde:	d04b      	beq.n	801dc78 <_reclaim_reent+0xa4>
 801dbe0:	69c3      	ldr	r3, [r0, #28]
 801dbe2:	b143      	cbz	r3, 801dbf6 <_reclaim_reent+0x22>
 801dbe4:	68db      	ldr	r3, [r3, #12]
 801dbe6:	2b00      	cmp	r3, #0
 801dbe8:	d144      	bne.n	801dc74 <_reclaim_reent+0xa0>
 801dbea:	69e3      	ldr	r3, [r4, #28]
 801dbec:	6819      	ldr	r1, [r3, #0]
 801dbee:	b111      	cbz	r1, 801dbf6 <_reclaim_reent+0x22>
 801dbf0:	4620      	mov	r0, r4
 801dbf2:	f000 f8f9 	bl	801dde8 <_free_r>
 801dbf6:	6961      	ldr	r1, [r4, #20]
 801dbf8:	b111      	cbz	r1, 801dc00 <_reclaim_reent+0x2c>
 801dbfa:	4620      	mov	r0, r4
 801dbfc:	f000 f8f4 	bl	801dde8 <_free_r>
 801dc00:	69e1      	ldr	r1, [r4, #28]
 801dc02:	b111      	cbz	r1, 801dc0a <_reclaim_reent+0x36>
 801dc04:	4620      	mov	r0, r4
 801dc06:	f000 f8ef 	bl	801dde8 <_free_r>
 801dc0a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801dc0c:	b111      	cbz	r1, 801dc14 <_reclaim_reent+0x40>
 801dc0e:	4620      	mov	r0, r4
 801dc10:	f000 f8ea 	bl	801dde8 <_free_r>
 801dc14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dc16:	b111      	cbz	r1, 801dc1e <_reclaim_reent+0x4a>
 801dc18:	4620      	mov	r0, r4
 801dc1a:	f000 f8e5 	bl	801dde8 <_free_r>
 801dc1e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801dc20:	b111      	cbz	r1, 801dc28 <_reclaim_reent+0x54>
 801dc22:	4620      	mov	r0, r4
 801dc24:	f000 f8e0 	bl	801dde8 <_free_r>
 801dc28:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801dc2a:	b111      	cbz	r1, 801dc32 <_reclaim_reent+0x5e>
 801dc2c:	4620      	mov	r0, r4
 801dc2e:	f000 f8db 	bl	801dde8 <_free_r>
 801dc32:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801dc34:	b111      	cbz	r1, 801dc3c <_reclaim_reent+0x68>
 801dc36:	4620      	mov	r0, r4
 801dc38:	f000 f8d6 	bl	801dde8 <_free_r>
 801dc3c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801dc3e:	b111      	cbz	r1, 801dc46 <_reclaim_reent+0x72>
 801dc40:	4620      	mov	r0, r4
 801dc42:	f000 f8d1 	bl	801dde8 <_free_r>
 801dc46:	6a23      	ldr	r3, [r4, #32]
 801dc48:	b1b3      	cbz	r3, 801dc78 <_reclaim_reent+0xa4>
 801dc4a:	4620      	mov	r0, r4
 801dc4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dc50:	4718      	bx	r3
 801dc52:	5949      	ldr	r1, [r1, r5]
 801dc54:	b941      	cbnz	r1, 801dc68 <_reclaim_reent+0x94>
 801dc56:	3504      	adds	r5, #4
 801dc58:	69e3      	ldr	r3, [r4, #28]
 801dc5a:	2d80      	cmp	r5, #128	; 0x80
 801dc5c:	68d9      	ldr	r1, [r3, #12]
 801dc5e:	d1f8      	bne.n	801dc52 <_reclaim_reent+0x7e>
 801dc60:	4620      	mov	r0, r4
 801dc62:	f000 f8c1 	bl	801dde8 <_free_r>
 801dc66:	e7c0      	b.n	801dbea <_reclaim_reent+0x16>
 801dc68:	680e      	ldr	r6, [r1, #0]
 801dc6a:	4620      	mov	r0, r4
 801dc6c:	f000 f8bc 	bl	801dde8 <_free_r>
 801dc70:	4631      	mov	r1, r6
 801dc72:	e7ef      	b.n	801dc54 <_reclaim_reent+0x80>
 801dc74:	2500      	movs	r5, #0
 801dc76:	e7ef      	b.n	801dc58 <_reclaim_reent+0x84>
 801dc78:	bd70      	pop	{r4, r5, r6, pc}
 801dc7a:	bf00      	nop
 801dc7c:	20002338 	.word	0x20002338

0801dc80 <_lseek_r>:
 801dc80:	b538      	push	{r3, r4, r5, lr}
 801dc82:	4d07      	ldr	r5, [pc, #28]	; (801dca0 <_lseek_r+0x20>)
 801dc84:	4604      	mov	r4, r0
 801dc86:	4608      	mov	r0, r1
 801dc88:	4611      	mov	r1, r2
 801dc8a:	2200      	movs	r2, #0
 801dc8c:	602a      	str	r2, [r5, #0]
 801dc8e:	461a      	mov	r2, r3
 801dc90:	f7e5 fd34 	bl	80036fc <_lseek>
 801dc94:	1c43      	adds	r3, r0, #1
 801dc96:	d102      	bne.n	801dc9e <_lseek_r+0x1e>
 801dc98:	682b      	ldr	r3, [r5, #0]
 801dc9a:	b103      	cbz	r3, 801dc9e <_lseek_r+0x1e>
 801dc9c:	6023      	str	r3, [r4, #0]
 801dc9e:	bd38      	pop	{r3, r4, r5, pc}
 801dca0:	20010e8c 	.word	0x20010e8c

0801dca4 <_read_r>:
 801dca4:	b538      	push	{r3, r4, r5, lr}
 801dca6:	4d07      	ldr	r5, [pc, #28]	; (801dcc4 <_read_r+0x20>)
 801dca8:	4604      	mov	r4, r0
 801dcaa:	4608      	mov	r0, r1
 801dcac:	4611      	mov	r1, r2
 801dcae:	2200      	movs	r2, #0
 801dcb0:	602a      	str	r2, [r5, #0]
 801dcb2:	461a      	mov	r2, r3
 801dcb4:	f7e5 fcc2 	bl	800363c <_read>
 801dcb8:	1c43      	adds	r3, r0, #1
 801dcba:	d102      	bne.n	801dcc2 <_read_r+0x1e>
 801dcbc:	682b      	ldr	r3, [r5, #0]
 801dcbe:	b103      	cbz	r3, 801dcc2 <_read_r+0x1e>
 801dcc0:	6023      	str	r3, [r4, #0]
 801dcc2:	bd38      	pop	{r3, r4, r5, pc}
 801dcc4:	20010e8c 	.word	0x20010e8c

0801dcc8 <_sbrk_r>:
 801dcc8:	b538      	push	{r3, r4, r5, lr}
 801dcca:	4d06      	ldr	r5, [pc, #24]	; (801dce4 <_sbrk_r+0x1c>)
 801dccc:	2300      	movs	r3, #0
 801dcce:	4604      	mov	r4, r0
 801dcd0:	4608      	mov	r0, r1
 801dcd2:	602b      	str	r3, [r5, #0]
 801dcd4:	f7e5 fd20 	bl	8003718 <_sbrk>
 801dcd8:	1c43      	adds	r3, r0, #1
 801dcda:	d102      	bne.n	801dce2 <_sbrk_r+0x1a>
 801dcdc:	682b      	ldr	r3, [r5, #0]
 801dcde:	b103      	cbz	r3, 801dce2 <_sbrk_r+0x1a>
 801dce0:	6023      	str	r3, [r4, #0]
 801dce2:	bd38      	pop	{r3, r4, r5, pc}
 801dce4:	20010e8c 	.word	0x20010e8c

0801dce8 <_write_r>:
 801dce8:	b538      	push	{r3, r4, r5, lr}
 801dcea:	4d07      	ldr	r5, [pc, #28]	; (801dd08 <_write_r+0x20>)
 801dcec:	4604      	mov	r4, r0
 801dcee:	4608      	mov	r0, r1
 801dcf0:	4611      	mov	r1, r2
 801dcf2:	2200      	movs	r2, #0
 801dcf4:	602a      	str	r2, [r5, #0]
 801dcf6:	461a      	mov	r2, r3
 801dcf8:	f7e5 fcbd 	bl	8003676 <_write>
 801dcfc:	1c43      	adds	r3, r0, #1
 801dcfe:	d102      	bne.n	801dd06 <_write_r+0x1e>
 801dd00:	682b      	ldr	r3, [r5, #0]
 801dd02:	b103      	cbz	r3, 801dd06 <_write_r+0x1e>
 801dd04:	6023      	str	r3, [r4, #0]
 801dd06:	bd38      	pop	{r3, r4, r5, pc}
 801dd08:	20010e8c 	.word	0x20010e8c

0801dd0c <__errno>:
 801dd0c:	4b01      	ldr	r3, [pc, #4]	; (801dd14 <__errno+0x8>)
 801dd0e:	6818      	ldr	r0, [r3, #0]
 801dd10:	4770      	bx	lr
 801dd12:	bf00      	nop
 801dd14:	20002338 	.word	0x20002338

0801dd18 <__libc_init_array>:
 801dd18:	b570      	push	{r4, r5, r6, lr}
 801dd1a:	4d0d      	ldr	r5, [pc, #52]	; (801dd50 <__libc_init_array+0x38>)
 801dd1c:	4c0d      	ldr	r4, [pc, #52]	; (801dd54 <__libc_init_array+0x3c>)
 801dd1e:	1b64      	subs	r4, r4, r5
 801dd20:	10a4      	asrs	r4, r4, #2
 801dd22:	2600      	movs	r6, #0
 801dd24:	42a6      	cmp	r6, r4
 801dd26:	d109      	bne.n	801dd3c <__libc_init_array+0x24>
 801dd28:	4d0b      	ldr	r5, [pc, #44]	; (801dd58 <__libc_init_array+0x40>)
 801dd2a:	4c0c      	ldr	r4, [pc, #48]	; (801dd5c <__libc_init_array+0x44>)
 801dd2c:	f000 ff00 	bl	801eb30 <_init>
 801dd30:	1b64      	subs	r4, r4, r5
 801dd32:	10a4      	asrs	r4, r4, #2
 801dd34:	2600      	movs	r6, #0
 801dd36:	42a6      	cmp	r6, r4
 801dd38:	d105      	bne.n	801dd46 <__libc_init_array+0x2e>
 801dd3a:	bd70      	pop	{r4, r5, r6, pc}
 801dd3c:	f855 3b04 	ldr.w	r3, [r5], #4
 801dd40:	4798      	blx	r3
 801dd42:	3601      	adds	r6, #1
 801dd44:	e7ee      	b.n	801dd24 <__libc_init_array+0xc>
 801dd46:	f855 3b04 	ldr.w	r3, [r5], #4
 801dd4a:	4798      	blx	r3
 801dd4c:	3601      	adds	r6, #1
 801dd4e:	e7f2      	b.n	801dd36 <__libc_init_array+0x1e>
 801dd50:	08020e20 	.word	0x08020e20
 801dd54:	08020e20 	.word	0x08020e20
 801dd58:	08020e20 	.word	0x08020e20
 801dd5c:	08020e40 	.word	0x08020e40

0801dd60 <__retarget_lock_init_recursive>:
 801dd60:	4770      	bx	lr

0801dd62 <__retarget_lock_acquire_recursive>:
 801dd62:	4770      	bx	lr

0801dd64 <__retarget_lock_release_recursive>:
 801dd64:	4770      	bx	lr

0801dd66 <strcpy>:
 801dd66:	4603      	mov	r3, r0
 801dd68:	f811 2b01 	ldrb.w	r2, [r1], #1
 801dd6c:	f803 2b01 	strb.w	r2, [r3], #1
 801dd70:	2a00      	cmp	r2, #0
 801dd72:	d1f9      	bne.n	801dd68 <strcpy+0x2>
 801dd74:	4770      	bx	lr

0801dd76 <memcpy>:
 801dd76:	440a      	add	r2, r1
 801dd78:	4291      	cmp	r1, r2
 801dd7a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801dd7e:	d100      	bne.n	801dd82 <memcpy+0xc>
 801dd80:	4770      	bx	lr
 801dd82:	b510      	push	{r4, lr}
 801dd84:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dd88:	f803 4f01 	strb.w	r4, [r3, #1]!
 801dd8c:	4291      	cmp	r1, r2
 801dd8e:	d1f9      	bne.n	801dd84 <memcpy+0xe>
 801dd90:	bd10      	pop	{r4, pc}
	...

0801dd94 <__assert_func>:
 801dd94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dd96:	4614      	mov	r4, r2
 801dd98:	461a      	mov	r2, r3
 801dd9a:	4b09      	ldr	r3, [pc, #36]	; (801ddc0 <__assert_func+0x2c>)
 801dd9c:	681b      	ldr	r3, [r3, #0]
 801dd9e:	4605      	mov	r5, r0
 801dda0:	68d8      	ldr	r0, [r3, #12]
 801dda2:	b14c      	cbz	r4, 801ddb8 <__assert_func+0x24>
 801dda4:	4b07      	ldr	r3, [pc, #28]	; (801ddc4 <__assert_func+0x30>)
 801dda6:	9100      	str	r1, [sp, #0]
 801dda8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ddac:	4906      	ldr	r1, [pc, #24]	; (801ddc8 <__assert_func+0x34>)
 801ddae:	462b      	mov	r3, r5
 801ddb0:	f000 fc04 	bl	801e5bc <fiprintf>
 801ddb4:	f000 fc14 	bl	801e5e0 <abort>
 801ddb8:	4b04      	ldr	r3, [pc, #16]	; (801ddcc <__assert_func+0x38>)
 801ddba:	461c      	mov	r4, r3
 801ddbc:	e7f3      	b.n	801dda6 <__assert_func+0x12>
 801ddbe:	bf00      	nop
 801ddc0:	20002338 	.word	0x20002338
 801ddc4:	08020da8 	.word	0x08020da8
 801ddc8:	08020db5 	.word	0x08020db5
 801ddcc:	08020de3 	.word	0x08020de3

0801ddd0 <__env_lock>:
 801ddd0:	4801      	ldr	r0, [pc, #4]	; (801ddd8 <__env_lock+0x8>)
 801ddd2:	f7ff bfc6 	b.w	801dd62 <__retarget_lock_acquire_recursive>
 801ddd6:	bf00      	nop
 801ddd8:	20010e90 	.word	0x20010e90

0801dddc <__env_unlock>:
 801dddc:	4801      	ldr	r0, [pc, #4]	; (801dde4 <__env_unlock+0x8>)
 801ddde:	f7ff bfc1 	b.w	801dd64 <__retarget_lock_release_recursive>
 801dde2:	bf00      	nop
 801dde4:	20010e90 	.word	0x20010e90

0801dde8 <_free_r>:
 801dde8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ddea:	2900      	cmp	r1, #0
 801ddec:	d044      	beq.n	801de78 <_free_r+0x90>
 801ddee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ddf2:	9001      	str	r0, [sp, #4]
 801ddf4:	2b00      	cmp	r3, #0
 801ddf6:	f1a1 0404 	sub.w	r4, r1, #4
 801ddfa:	bfb8      	it	lt
 801ddfc:	18e4      	addlt	r4, r4, r3
 801ddfe:	f7ff fbc1 	bl	801d584 <__malloc_lock>
 801de02:	4a1e      	ldr	r2, [pc, #120]	; (801de7c <_free_r+0x94>)
 801de04:	9801      	ldr	r0, [sp, #4]
 801de06:	6813      	ldr	r3, [r2, #0]
 801de08:	b933      	cbnz	r3, 801de18 <_free_r+0x30>
 801de0a:	6063      	str	r3, [r4, #4]
 801de0c:	6014      	str	r4, [r2, #0]
 801de0e:	b003      	add	sp, #12
 801de10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801de14:	f7ff bbbc 	b.w	801d590 <__malloc_unlock>
 801de18:	42a3      	cmp	r3, r4
 801de1a:	d908      	bls.n	801de2e <_free_r+0x46>
 801de1c:	6825      	ldr	r5, [r4, #0]
 801de1e:	1961      	adds	r1, r4, r5
 801de20:	428b      	cmp	r3, r1
 801de22:	bf01      	itttt	eq
 801de24:	6819      	ldreq	r1, [r3, #0]
 801de26:	685b      	ldreq	r3, [r3, #4]
 801de28:	1949      	addeq	r1, r1, r5
 801de2a:	6021      	streq	r1, [r4, #0]
 801de2c:	e7ed      	b.n	801de0a <_free_r+0x22>
 801de2e:	461a      	mov	r2, r3
 801de30:	685b      	ldr	r3, [r3, #4]
 801de32:	b10b      	cbz	r3, 801de38 <_free_r+0x50>
 801de34:	42a3      	cmp	r3, r4
 801de36:	d9fa      	bls.n	801de2e <_free_r+0x46>
 801de38:	6811      	ldr	r1, [r2, #0]
 801de3a:	1855      	adds	r5, r2, r1
 801de3c:	42a5      	cmp	r5, r4
 801de3e:	d10b      	bne.n	801de58 <_free_r+0x70>
 801de40:	6824      	ldr	r4, [r4, #0]
 801de42:	4421      	add	r1, r4
 801de44:	1854      	adds	r4, r2, r1
 801de46:	42a3      	cmp	r3, r4
 801de48:	6011      	str	r1, [r2, #0]
 801de4a:	d1e0      	bne.n	801de0e <_free_r+0x26>
 801de4c:	681c      	ldr	r4, [r3, #0]
 801de4e:	685b      	ldr	r3, [r3, #4]
 801de50:	6053      	str	r3, [r2, #4]
 801de52:	440c      	add	r4, r1
 801de54:	6014      	str	r4, [r2, #0]
 801de56:	e7da      	b.n	801de0e <_free_r+0x26>
 801de58:	d902      	bls.n	801de60 <_free_r+0x78>
 801de5a:	230c      	movs	r3, #12
 801de5c:	6003      	str	r3, [r0, #0]
 801de5e:	e7d6      	b.n	801de0e <_free_r+0x26>
 801de60:	6825      	ldr	r5, [r4, #0]
 801de62:	1961      	adds	r1, r4, r5
 801de64:	428b      	cmp	r3, r1
 801de66:	bf04      	itt	eq
 801de68:	6819      	ldreq	r1, [r3, #0]
 801de6a:	685b      	ldreq	r3, [r3, #4]
 801de6c:	6063      	str	r3, [r4, #4]
 801de6e:	bf04      	itt	eq
 801de70:	1949      	addeq	r1, r1, r5
 801de72:	6021      	streq	r1, [r4, #0]
 801de74:	6054      	str	r4, [r2, #4]
 801de76:	e7ca      	b.n	801de0e <_free_r+0x26>
 801de78:	b003      	add	sp, #12
 801de7a:	bd30      	pop	{r4, r5, pc}
 801de7c:	20010d48 	.word	0x20010d48

0801de80 <_malloc_usable_size_r>:
 801de80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801de84:	1f18      	subs	r0, r3, #4
 801de86:	2b00      	cmp	r3, #0
 801de88:	bfbc      	itt	lt
 801de8a:	580b      	ldrlt	r3, [r1, r0]
 801de8c:	18c0      	addlt	r0, r0, r3
 801de8e:	4770      	bx	lr

0801de90 <__ssputs_r>:
 801de90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801de94:	688e      	ldr	r6, [r1, #8]
 801de96:	461f      	mov	r7, r3
 801de98:	42be      	cmp	r6, r7
 801de9a:	680b      	ldr	r3, [r1, #0]
 801de9c:	4682      	mov	sl, r0
 801de9e:	460c      	mov	r4, r1
 801dea0:	4690      	mov	r8, r2
 801dea2:	d82c      	bhi.n	801defe <__ssputs_r+0x6e>
 801dea4:	898a      	ldrh	r2, [r1, #12]
 801dea6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801deaa:	d026      	beq.n	801defa <__ssputs_r+0x6a>
 801deac:	6965      	ldr	r5, [r4, #20]
 801deae:	6909      	ldr	r1, [r1, #16]
 801deb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801deb4:	eba3 0901 	sub.w	r9, r3, r1
 801deb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801debc:	1c7b      	adds	r3, r7, #1
 801debe:	444b      	add	r3, r9
 801dec0:	106d      	asrs	r5, r5, #1
 801dec2:	429d      	cmp	r5, r3
 801dec4:	bf38      	it	cc
 801dec6:	461d      	movcc	r5, r3
 801dec8:	0553      	lsls	r3, r2, #21
 801deca:	d527      	bpl.n	801df1c <__ssputs_r+0x8c>
 801decc:	4629      	mov	r1, r5
 801dece:	f7ff fad9 	bl	801d484 <_malloc_r>
 801ded2:	4606      	mov	r6, r0
 801ded4:	b360      	cbz	r0, 801df30 <__ssputs_r+0xa0>
 801ded6:	6921      	ldr	r1, [r4, #16]
 801ded8:	464a      	mov	r2, r9
 801deda:	f7ff ff4c 	bl	801dd76 <memcpy>
 801dede:	89a3      	ldrh	r3, [r4, #12]
 801dee0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801dee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dee8:	81a3      	strh	r3, [r4, #12]
 801deea:	6126      	str	r6, [r4, #16]
 801deec:	6165      	str	r5, [r4, #20]
 801deee:	444e      	add	r6, r9
 801def0:	eba5 0509 	sub.w	r5, r5, r9
 801def4:	6026      	str	r6, [r4, #0]
 801def6:	60a5      	str	r5, [r4, #8]
 801def8:	463e      	mov	r6, r7
 801defa:	42be      	cmp	r6, r7
 801defc:	d900      	bls.n	801df00 <__ssputs_r+0x70>
 801defe:	463e      	mov	r6, r7
 801df00:	6820      	ldr	r0, [r4, #0]
 801df02:	4632      	mov	r2, r6
 801df04:	4641      	mov	r1, r8
 801df06:	f7ff fdeb 	bl	801dae0 <memmove>
 801df0a:	68a3      	ldr	r3, [r4, #8]
 801df0c:	1b9b      	subs	r3, r3, r6
 801df0e:	60a3      	str	r3, [r4, #8]
 801df10:	6823      	ldr	r3, [r4, #0]
 801df12:	4433      	add	r3, r6
 801df14:	6023      	str	r3, [r4, #0]
 801df16:	2000      	movs	r0, #0
 801df18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801df1c:	462a      	mov	r2, r5
 801df1e:	f7ff fbb1 	bl	801d684 <_realloc_r>
 801df22:	4606      	mov	r6, r0
 801df24:	2800      	cmp	r0, #0
 801df26:	d1e0      	bne.n	801deea <__ssputs_r+0x5a>
 801df28:	6921      	ldr	r1, [r4, #16]
 801df2a:	4650      	mov	r0, sl
 801df2c:	f7ff ff5c 	bl	801dde8 <_free_r>
 801df30:	230c      	movs	r3, #12
 801df32:	f8ca 3000 	str.w	r3, [sl]
 801df36:	89a3      	ldrh	r3, [r4, #12]
 801df38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801df3c:	81a3      	strh	r3, [r4, #12]
 801df3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801df42:	e7e9      	b.n	801df18 <__ssputs_r+0x88>

0801df44 <_svfiprintf_r>:
 801df44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df48:	4698      	mov	r8, r3
 801df4a:	898b      	ldrh	r3, [r1, #12]
 801df4c:	061b      	lsls	r3, r3, #24
 801df4e:	b09d      	sub	sp, #116	; 0x74
 801df50:	4607      	mov	r7, r0
 801df52:	460d      	mov	r5, r1
 801df54:	4614      	mov	r4, r2
 801df56:	d50e      	bpl.n	801df76 <_svfiprintf_r+0x32>
 801df58:	690b      	ldr	r3, [r1, #16]
 801df5a:	b963      	cbnz	r3, 801df76 <_svfiprintf_r+0x32>
 801df5c:	2140      	movs	r1, #64	; 0x40
 801df5e:	f7ff fa91 	bl	801d484 <_malloc_r>
 801df62:	6028      	str	r0, [r5, #0]
 801df64:	6128      	str	r0, [r5, #16]
 801df66:	b920      	cbnz	r0, 801df72 <_svfiprintf_r+0x2e>
 801df68:	230c      	movs	r3, #12
 801df6a:	603b      	str	r3, [r7, #0]
 801df6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801df70:	e0d0      	b.n	801e114 <_svfiprintf_r+0x1d0>
 801df72:	2340      	movs	r3, #64	; 0x40
 801df74:	616b      	str	r3, [r5, #20]
 801df76:	2300      	movs	r3, #0
 801df78:	9309      	str	r3, [sp, #36]	; 0x24
 801df7a:	2320      	movs	r3, #32
 801df7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801df80:	f8cd 800c 	str.w	r8, [sp, #12]
 801df84:	2330      	movs	r3, #48	; 0x30
 801df86:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801e12c <_svfiprintf_r+0x1e8>
 801df8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801df8e:	f04f 0901 	mov.w	r9, #1
 801df92:	4623      	mov	r3, r4
 801df94:	469a      	mov	sl, r3
 801df96:	f813 2b01 	ldrb.w	r2, [r3], #1
 801df9a:	b10a      	cbz	r2, 801dfa0 <_svfiprintf_r+0x5c>
 801df9c:	2a25      	cmp	r2, #37	; 0x25
 801df9e:	d1f9      	bne.n	801df94 <_svfiprintf_r+0x50>
 801dfa0:	ebba 0b04 	subs.w	fp, sl, r4
 801dfa4:	d00b      	beq.n	801dfbe <_svfiprintf_r+0x7a>
 801dfa6:	465b      	mov	r3, fp
 801dfa8:	4622      	mov	r2, r4
 801dfaa:	4629      	mov	r1, r5
 801dfac:	4638      	mov	r0, r7
 801dfae:	f7ff ff6f 	bl	801de90 <__ssputs_r>
 801dfb2:	3001      	adds	r0, #1
 801dfb4:	f000 80a9 	beq.w	801e10a <_svfiprintf_r+0x1c6>
 801dfb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dfba:	445a      	add	r2, fp
 801dfbc:	9209      	str	r2, [sp, #36]	; 0x24
 801dfbe:	f89a 3000 	ldrb.w	r3, [sl]
 801dfc2:	2b00      	cmp	r3, #0
 801dfc4:	f000 80a1 	beq.w	801e10a <_svfiprintf_r+0x1c6>
 801dfc8:	2300      	movs	r3, #0
 801dfca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801dfce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dfd2:	f10a 0a01 	add.w	sl, sl, #1
 801dfd6:	9304      	str	r3, [sp, #16]
 801dfd8:	9307      	str	r3, [sp, #28]
 801dfda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801dfde:	931a      	str	r3, [sp, #104]	; 0x68
 801dfe0:	4654      	mov	r4, sl
 801dfe2:	2205      	movs	r2, #5
 801dfe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dfe8:	4850      	ldr	r0, [pc, #320]	; (801e12c <_svfiprintf_r+0x1e8>)
 801dfea:	f7e2 f939 	bl	8000260 <memchr>
 801dfee:	9a04      	ldr	r2, [sp, #16]
 801dff0:	b9d8      	cbnz	r0, 801e02a <_svfiprintf_r+0xe6>
 801dff2:	06d0      	lsls	r0, r2, #27
 801dff4:	bf44      	itt	mi
 801dff6:	2320      	movmi	r3, #32
 801dff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dffc:	0711      	lsls	r1, r2, #28
 801dffe:	bf44      	itt	mi
 801e000:	232b      	movmi	r3, #43	; 0x2b
 801e002:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e006:	f89a 3000 	ldrb.w	r3, [sl]
 801e00a:	2b2a      	cmp	r3, #42	; 0x2a
 801e00c:	d015      	beq.n	801e03a <_svfiprintf_r+0xf6>
 801e00e:	9a07      	ldr	r2, [sp, #28]
 801e010:	4654      	mov	r4, sl
 801e012:	2000      	movs	r0, #0
 801e014:	f04f 0c0a 	mov.w	ip, #10
 801e018:	4621      	mov	r1, r4
 801e01a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e01e:	3b30      	subs	r3, #48	; 0x30
 801e020:	2b09      	cmp	r3, #9
 801e022:	d94d      	bls.n	801e0c0 <_svfiprintf_r+0x17c>
 801e024:	b1b0      	cbz	r0, 801e054 <_svfiprintf_r+0x110>
 801e026:	9207      	str	r2, [sp, #28]
 801e028:	e014      	b.n	801e054 <_svfiprintf_r+0x110>
 801e02a:	eba0 0308 	sub.w	r3, r0, r8
 801e02e:	fa09 f303 	lsl.w	r3, r9, r3
 801e032:	4313      	orrs	r3, r2
 801e034:	9304      	str	r3, [sp, #16]
 801e036:	46a2      	mov	sl, r4
 801e038:	e7d2      	b.n	801dfe0 <_svfiprintf_r+0x9c>
 801e03a:	9b03      	ldr	r3, [sp, #12]
 801e03c:	1d19      	adds	r1, r3, #4
 801e03e:	681b      	ldr	r3, [r3, #0]
 801e040:	9103      	str	r1, [sp, #12]
 801e042:	2b00      	cmp	r3, #0
 801e044:	bfbb      	ittet	lt
 801e046:	425b      	neglt	r3, r3
 801e048:	f042 0202 	orrlt.w	r2, r2, #2
 801e04c:	9307      	strge	r3, [sp, #28]
 801e04e:	9307      	strlt	r3, [sp, #28]
 801e050:	bfb8      	it	lt
 801e052:	9204      	strlt	r2, [sp, #16]
 801e054:	7823      	ldrb	r3, [r4, #0]
 801e056:	2b2e      	cmp	r3, #46	; 0x2e
 801e058:	d10c      	bne.n	801e074 <_svfiprintf_r+0x130>
 801e05a:	7863      	ldrb	r3, [r4, #1]
 801e05c:	2b2a      	cmp	r3, #42	; 0x2a
 801e05e:	d134      	bne.n	801e0ca <_svfiprintf_r+0x186>
 801e060:	9b03      	ldr	r3, [sp, #12]
 801e062:	1d1a      	adds	r2, r3, #4
 801e064:	681b      	ldr	r3, [r3, #0]
 801e066:	9203      	str	r2, [sp, #12]
 801e068:	2b00      	cmp	r3, #0
 801e06a:	bfb8      	it	lt
 801e06c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801e070:	3402      	adds	r4, #2
 801e072:	9305      	str	r3, [sp, #20]
 801e074:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801e13c <_svfiprintf_r+0x1f8>
 801e078:	7821      	ldrb	r1, [r4, #0]
 801e07a:	2203      	movs	r2, #3
 801e07c:	4650      	mov	r0, sl
 801e07e:	f7e2 f8ef 	bl	8000260 <memchr>
 801e082:	b138      	cbz	r0, 801e094 <_svfiprintf_r+0x150>
 801e084:	9b04      	ldr	r3, [sp, #16]
 801e086:	eba0 000a 	sub.w	r0, r0, sl
 801e08a:	2240      	movs	r2, #64	; 0x40
 801e08c:	4082      	lsls	r2, r0
 801e08e:	4313      	orrs	r3, r2
 801e090:	3401      	adds	r4, #1
 801e092:	9304      	str	r3, [sp, #16]
 801e094:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e098:	4825      	ldr	r0, [pc, #148]	; (801e130 <_svfiprintf_r+0x1ec>)
 801e09a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e09e:	2206      	movs	r2, #6
 801e0a0:	f7e2 f8de 	bl	8000260 <memchr>
 801e0a4:	2800      	cmp	r0, #0
 801e0a6:	d038      	beq.n	801e11a <_svfiprintf_r+0x1d6>
 801e0a8:	4b22      	ldr	r3, [pc, #136]	; (801e134 <_svfiprintf_r+0x1f0>)
 801e0aa:	bb1b      	cbnz	r3, 801e0f4 <_svfiprintf_r+0x1b0>
 801e0ac:	9b03      	ldr	r3, [sp, #12]
 801e0ae:	3307      	adds	r3, #7
 801e0b0:	f023 0307 	bic.w	r3, r3, #7
 801e0b4:	3308      	adds	r3, #8
 801e0b6:	9303      	str	r3, [sp, #12]
 801e0b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e0ba:	4433      	add	r3, r6
 801e0bc:	9309      	str	r3, [sp, #36]	; 0x24
 801e0be:	e768      	b.n	801df92 <_svfiprintf_r+0x4e>
 801e0c0:	fb0c 3202 	mla	r2, ip, r2, r3
 801e0c4:	460c      	mov	r4, r1
 801e0c6:	2001      	movs	r0, #1
 801e0c8:	e7a6      	b.n	801e018 <_svfiprintf_r+0xd4>
 801e0ca:	2300      	movs	r3, #0
 801e0cc:	3401      	adds	r4, #1
 801e0ce:	9305      	str	r3, [sp, #20]
 801e0d0:	4619      	mov	r1, r3
 801e0d2:	f04f 0c0a 	mov.w	ip, #10
 801e0d6:	4620      	mov	r0, r4
 801e0d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e0dc:	3a30      	subs	r2, #48	; 0x30
 801e0de:	2a09      	cmp	r2, #9
 801e0e0:	d903      	bls.n	801e0ea <_svfiprintf_r+0x1a6>
 801e0e2:	2b00      	cmp	r3, #0
 801e0e4:	d0c6      	beq.n	801e074 <_svfiprintf_r+0x130>
 801e0e6:	9105      	str	r1, [sp, #20]
 801e0e8:	e7c4      	b.n	801e074 <_svfiprintf_r+0x130>
 801e0ea:	fb0c 2101 	mla	r1, ip, r1, r2
 801e0ee:	4604      	mov	r4, r0
 801e0f0:	2301      	movs	r3, #1
 801e0f2:	e7f0      	b.n	801e0d6 <_svfiprintf_r+0x192>
 801e0f4:	ab03      	add	r3, sp, #12
 801e0f6:	9300      	str	r3, [sp, #0]
 801e0f8:	462a      	mov	r2, r5
 801e0fa:	4b0f      	ldr	r3, [pc, #60]	; (801e138 <_svfiprintf_r+0x1f4>)
 801e0fc:	a904      	add	r1, sp, #16
 801e0fe:	4638      	mov	r0, r7
 801e100:	f3af 8000 	nop.w
 801e104:	1c42      	adds	r2, r0, #1
 801e106:	4606      	mov	r6, r0
 801e108:	d1d6      	bne.n	801e0b8 <_svfiprintf_r+0x174>
 801e10a:	89ab      	ldrh	r3, [r5, #12]
 801e10c:	065b      	lsls	r3, r3, #25
 801e10e:	f53f af2d 	bmi.w	801df6c <_svfiprintf_r+0x28>
 801e112:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e114:	b01d      	add	sp, #116	; 0x74
 801e116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e11a:	ab03      	add	r3, sp, #12
 801e11c:	9300      	str	r3, [sp, #0]
 801e11e:	462a      	mov	r2, r5
 801e120:	4b05      	ldr	r3, [pc, #20]	; (801e138 <_svfiprintf_r+0x1f4>)
 801e122:	a904      	add	r1, sp, #16
 801e124:	4638      	mov	r0, r7
 801e126:	f000 f879 	bl	801e21c <_printf_i>
 801e12a:	e7eb      	b.n	801e104 <_svfiprintf_r+0x1c0>
 801e12c:	08020de4 	.word	0x08020de4
 801e130:	08020dee 	.word	0x08020dee
 801e134:	00000000 	.word	0x00000000
 801e138:	0801de91 	.word	0x0801de91
 801e13c:	08020dea 	.word	0x08020dea

0801e140 <_printf_common>:
 801e140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e144:	4616      	mov	r6, r2
 801e146:	4699      	mov	r9, r3
 801e148:	688a      	ldr	r2, [r1, #8]
 801e14a:	690b      	ldr	r3, [r1, #16]
 801e14c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e150:	4293      	cmp	r3, r2
 801e152:	bfb8      	it	lt
 801e154:	4613      	movlt	r3, r2
 801e156:	6033      	str	r3, [r6, #0]
 801e158:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e15c:	4607      	mov	r7, r0
 801e15e:	460c      	mov	r4, r1
 801e160:	b10a      	cbz	r2, 801e166 <_printf_common+0x26>
 801e162:	3301      	adds	r3, #1
 801e164:	6033      	str	r3, [r6, #0]
 801e166:	6823      	ldr	r3, [r4, #0]
 801e168:	0699      	lsls	r1, r3, #26
 801e16a:	bf42      	ittt	mi
 801e16c:	6833      	ldrmi	r3, [r6, #0]
 801e16e:	3302      	addmi	r3, #2
 801e170:	6033      	strmi	r3, [r6, #0]
 801e172:	6825      	ldr	r5, [r4, #0]
 801e174:	f015 0506 	ands.w	r5, r5, #6
 801e178:	d106      	bne.n	801e188 <_printf_common+0x48>
 801e17a:	f104 0a19 	add.w	sl, r4, #25
 801e17e:	68e3      	ldr	r3, [r4, #12]
 801e180:	6832      	ldr	r2, [r6, #0]
 801e182:	1a9b      	subs	r3, r3, r2
 801e184:	42ab      	cmp	r3, r5
 801e186:	dc26      	bgt.n	801e1d6 <_printf_common+0x96>
 801e188:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e18c:	1e13      	subs	r3, r2, #0
 801e18e:	6822      	ldr	r2, [r4, #0]
 801e190:	bf18      	it	ne
 801e192:	2301      	movne	r3, #1
 801e194:	0692      	lsls	r2, r2, #26
 801e196:	d42b      	bmi.n	801e1f0 <_printf_common+0xb0>
 801e198:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e19c:	4649      	mov	r1, r9
 801e19e:	4638      	mov	r0, r7
 801e1a0:	47c0      	blx	r8
 801e1a2:	3001      	adds	r0, #1
 801e1a4:	d01e      	beq.n	801e1e4 <_printf_common+0xa4>
 801e1a6:	6823      	ldr	r3, [r4, #0]
 801e1a8:	6922      	ldr	r2, [r4, #16]
 801e1aa:	f003 0306 	and.w	r3, r3, #6
 801e1ae:	2b04      	cmp	r3, #4
 801e1b0:	bf02      	ittt	eq
 801e1b2:	68e5      	ldreq	r5, [r4, #12]
 801e1b4:	6833      	ldreq	r3, [r6, #0]
 801e1b6:	1aed      	subeq	r5, r5, r3
 801e1b8:	68a3      	ldr	r3, [r4, #8]
 801e1ba:	bf0c      	ite	eq
 801e1bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e1c0:	2500      	movne	r5, #0
 801e1c2:	4293      	cmp	r3, r2
 801e1c4:	bfc4      	itt	gt
 801e1c6:	1a9b      	subgt	r3, r3, r2
 801e1c8:	18ed      	addgt	r5, r5, r3
 801e1ca:	2600      	movs	r6, #0
 801e1cc:	341a      	adds	r4, #26
 801e1ce:	42b5      	cmp	r5, r6
 801e1d0:	d11a      	bne.n	801e208 <_printf_common+0xc8>
 801e1d2:	2000      	movs	r0, #0
 801e1d4:	e008      	b.n	801e1e8 <_printf_common+0xa8>
 801e1d6:	2301      	movs	r3, #1
 801e1d8:	4652      	mov	r2, sl
 801e1da:	4649      	mov	r1, r9
 801e1dc:	4638      	mov	r0, r7
 801e1de:	47c0      	blx	r8
 801e1e0:	3001      	adds	r0, #1
 801e1e2:	d103      	bne.n	801e1ec <_printf_common+0xac>
 801e1e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e1e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e1ec:	3501      	adds	r5, #1
 801e1ee:	e7c6      	b.n	801e17e <_printf_common+0x3e>
 801e1f0:	18e1      	adds	r1, r4, r3
 801e1f2:	1c5a      	adds	r2, r3, #1
 801e1f4:	2030      	movs	r0, #48	; 0x30
 801e1f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e1fa:	4422      	add	r2, r4
 801e1fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e200:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e204:	3302      	adds	r3, #2
 801e206:	e7c7      	b.n	801e198 <_printf_common+0x58>
 801e208:	2301      	movs	r3, #1
 801e20a:	4622      	mov	r2, r4
 801e20c:	4649      	mov	r1, r9
 801e20e:	4638      	mov	r0, r7
 801e210:	47c0      	blx	r8
 801e212:	3001      	adds	r0, #1
 801e214:	d0e6      	beq.n	801e1e4 <_printf_common+0xa4>
 801e216:	3601      	adds	r6, #1
 801e218:	e7d9      	b.n	801e1ce <_printf_common+0x8e>
	...

0801e21c <_printf_i>:
 801e21c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e220:	7e0f      	ldrb	r7, [r1, #24]
 801e222:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e224:	2f78      	cmp	r7, #120	; 0x78
 801e226:	4691      	mov	r9, r2
 801e228:	4680      	mov	r8, r0
 801e22a:	460c      	mov	r4, r1
 801e22c:	469a      	mov	sl, r3
 801e22e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801e232:	d807      	bhi.n	801e244 <_printf_i+0x28>
 801e234:	2f62      	cmp	r7, #98	; 0x62
 801e236:	d80a      	bhi.n	801e24e <_printf_i+0x32>
 801e238:	2f00      	cmp	r7, #0
 801e23a:	f000 80d4 	beq.w	801e3e6 <_printf_i+0x1ca>
 801e23e:	2f58      	cmp	r7, #88	; 0x58
 801e240:	f000 80c0 	beq.w	801e3c4 <_printf_i+0x1a8>
 801e244:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e248:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e24c:	e03a      	b.n	801e2c4 <_printf_i+0xa8>
 801e24e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e252:	2b15      	cmp	r3, #21
 801e254:	d8f6      	bhi.n	801e244 <_printf_i+0x28>
 801e256:	a101      	add	r1, pc, #4	; (adr r1, 801e25c <_printf_i+0x40>)
 801e258:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e25c:	0801e2b5 	.word	0x0801e2b5
 801e260:	0801e2c9 	.word	0x0801e2c9
 801e264:	0801e245 	.word	0x0801e245
 801e268:	0801e245 	.word	0x0801e245
 801e26c:	0801e245 	.word	0x0801e245
 801e270:	0801e245 	.word	0x0801e245
 801e274:	0801e2c9 	.word	0x0801e2c9
 801e278:	0801e245 	.word	0x0801e245
 801e27c:	0801e245 	.word	0x0801e245
 801e280:	0801e245 	.word	0x0801e245
 801e284:	0801e245 	.word	0x0801e245
 801e288:	0801e3cd 	.word	0x0801e3cd
 801e28c:	0801e2f5 	.word	0x0801e2f5
 801e290:	0801e387 	.word	0x0801e387
 801e294:	0801e245 	.word	0x0801e245
 801e298:	0801e245 	.word	0x0801e245
 801e29c:	0801e3ef 	.word	0x0801e3ef
 801e2a0:	0801e245 	.word	0x0801e245
 801e2a4:	0801e2f5 	.word	0x0801e2f5
 801e2a8:	0801e245 	.word	0x0801e245
 801e2ac:	0801e245 	.word	0x0801e245
 801e2b0:	0801e38f 	.word	0x0801e38f
 801e2b4:	682b      	ldr	r3, [r5, #0]
 801e2b6:	1d1a      	adds	r2, r3, #4
 801e2b8:	681b      	ldr	r3, [r3, #0]
 801e2ba:	602a      	str	r2, [r5, #0]
 801e2bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e2c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e2c4:	2301      	movs	r3, #1
 801e2c6:	e09f      	b.n	801e408 <_printf_i+0x1ec>
 801e2c8:	6820      	ldr	r0, [r4, #0]
 801e2ca:	682b      	ldr	r3, [r5, #0]
 801e2cc:	0607      	lsls	r7, r0, #24
 801e2ce:	f103 0104 	add.w	r1, r3, #4
 801e2d2:	6029      	str	r1, [r5, #0]
 801e2d4:	d501      	bpl.n	801e2da <_printf_i+0xbe>
 801e2d6:	681e      	ldr	r6, [r3, #0]
 801e2d8:	e003      	b.n	801e2e2 <_printf_i+0xc6>
 801e2da:	0646      	lsls	r6, r0, #25
 801e2dc:	d5fb      	bpl.n	801e2d6 <_printf_i+0xba>
 801e2de:	f9b3 6000 	ldrsh.w	r6, [r3]
 801e2e2:	2e00      	cmp	r6, #0
 801e2e4:	da03      	bge.n	801e2ee <_printf_i+0xd2>
 801e2e6:	232d      	movs	r3, #45	; 0x2d
 801e2e8:	4276      	negs	r6, r6
 801e2ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e2ee:	485a      	ldr	r0, [pc, #360]	; (801e458 <_printf_i+0x23c>)
 801e2f0:	230a      	movs	r3, #10
 801e2f2:	e012      	b.n	801e31a <_printf_i+0xfe>
 801e2f4:	682b      	ldr	r3, [r5, #0]
 801e2f6:	6820      	ldr	r0, [r4, #0]
 801e2f8:	1d19      	adds	r1, r3, #4
 801e2fa:	6029      	str	r1, [r5, #0]
 801e2fc:	0605      	lsls	r5, r0, #24
 801e2fe:	d501      	bpl.n	801e304 <_printf_i+0xe8>
 801e300:	681e      	ldr	r6, [r3, #0]
 801e302:	e002      	b.n	801e30a <_printf_i+0xee>
 801e304:	0641      	lsls	r1, r0, #25
 801e306:	d5fb      	bpl.n	801e300 <_printf_i+0xe4>
 801e308:	881e      	ldrh	r6, [r3, #0]
 801e30a:	4853      	ldr	r0, [pc, #332]	; (801e458 <_printf_i+0x23c>)
 801e30c:	2f6f      	cmp	r7, #111	; 0x6f
 801e30e:	bf0c      	ite	eq
 801e310:	2308      	moveq	r3, #8
 801e312:	230a      	movne	r3, #10
 801e314:	2100      	movs	r1, #0
 801e316:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e31a:	6865      	ldr	r5, [r4, #4]
 801e31c:	60a5      	str	r5, [r4, #8]
 801e31e:	2d00      	cmp	r5, #0
 801e320:	bfa2      	ittt	ge
 801e322:	6821      	ldrge	r1, [r4, #0]
 801e324:	f021 0104 	bicge.w	r1, r1, #4
 801e328:	6021      	strge	r1, [r4, #0]
 801e32a:	b90e      	cbnz	r6, 801e330 <_printf_i+0x114>
 801e32c:	2d00      	cmp	r5, #0
 801e32e:	d04b      	beq.n	801e3c8 <_printf_i+0x1ac>
 801e330:	4615      	mov	r5, r2
 801e332:	fbb6 f1f3 	udiv	r1, r6, r3
 801e336:	fb03 6711 	mls	r7, r3, r1, r6
 801e33a:	5dc7      	ldrb	r7, [r0, r7]
 801e33c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801e340:	4637      	mov	r7, r6
 801e342:	42bb      	cmp	r3, r7
 801e344:	460e      	mov	r6, r1
 801e346:	d9f4      	bls.n	801e332 <_printf_i+0x116>
 801e348:	2b08      	cmp	r3, #8
 801e34a:	d10b      	bne.n	801e364 <_printf_i+0x148>
 801e34c:	6823      	ldr	r3, [r4, #0]
 801e34e:	07de      	lsls	r6, r3, #31
 801e350:	d508      	bpl.n	801e364 <_printf_i+0x148>
 801e352:	6923      	ldr	r3, [r4, #16]
 801e354:	6861      	ldr	r1, [r4, #4]
 801e356:	4299      	cmp	r1, r3
 801e358:	bfde      	ittt	le
 801e35a:	2330      	movle	r3, #48	; 0x30
 801e35c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e360:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801e364:	1b52      	subs	r2, r2, r5
 801e366:	6122      	str	r2, [r4, #16]
 801e368:	f8cd a000 	str.w	sl, [sp]
 801e36c:	464b      	mov	r3, r9
 801e36e:	aa03      	add	r2, sp, #12
 801e370:	4621      	mov	r1, r4
 801e372:	4640      	mov	r0, r8
 801e374:	f7ff fee4 	bl	801e140 <_printf_common>
 801e378:	3001      	adds	r0, #1
 801e37a:	d14a      	bne.n	801e412 <_printf_i+0x1f6>
 801e37c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e380:	b004      	add	sp, #16
 801e382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e386:	6823      	ldr	r3, [r4, #0]
 801e388:	f043 0320 	orr.w	r3, r3, #32
 801e38c:	6023      	str	r3, [r4, #0]
 801e38e:	4833      	ldr	r0, [pc, #204]	; (801e45c <_printf_i+0x240>)
 801e390:	2778      	movs	r7, #120	; 0x78
 801e392:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801e396:	6823      	ldr	r3, [r4, #0]
 801e398:	6829      	ldr	r1, [r5, #0]
 801e39a:	061f      	lsls	r7, r3, #24
 801e39c:	f851 6b04 	ldr.w	r6, [r1], #4
 801e3a0:	d402      	bmi.n	801e3a8 <_printf_i+0x18c>
 801e3a2:	065f      	lsls	r7, r3, #25
 801e3a4:	bf48      	it	mi
 801e3a6:	b2b6      	uxthmi	r6, r6
 801e3a8:	07df      	lsls	r7, r3, #31
 801e3aa:	bf48      	it	mi
 801e3ac:	f043 0320 	orrmi.w	r3, r3, #32
 801e3b0:	6029      	str	r1, [r5, #0]
 801e3b2:	bf48      	it	mi
 801e3b4:	6023      	strmi	r3, [r4, #0]
 801e3b6:	b91e      	cbnz	r6, 801e3c0 <_printf_i+0x1a4>
 801e3b8:	6823      	ldr	r3, [r4, #0]
 801e3ba:	f023 0320 	bic.w	r3, r3, #32
 801e3be:	6023      	str	r3, [r4, #0]
 801e3c0:	2310      	movs	r3, #16
 801e3c2:	e7a7      	b.n	801e314 <_printf_i+0xf8>
 801e3c4:	4824      	ldr	r0, [pc, #144]	; (801e458 <_printf_i+0x23c>)
 801e3c6:	e7e4      	b.n	801e392 <_printf_i+0x176>
 801e3c8:	4615      	mov	r5, r2
 801e3ca:	e7bd      	b.n	801e348 <_printf_i+0x12c>
 801e3cc:	682b      	ldr	r3, [r5, #0]
 801e3ce:	6826      	ldr	r6, [r4, #0]
 801e3d0:	6961      	ldr	r1, [r4, #20]
 801e3d2:	1d18      	adds	r0, r3, #4
 801e3d4:	6028      	str	r0, [r5, #0]
 801e3d6:	0635      	lsls	r5, r6, #24
 801e3d8:	681b      	ldr	r3, [r3, #0]
 801e3da:	d501      	bpl.n	801e3e0 <_printf_i+0x1c4>
 801e3dc:	6019      	str	r1, [r3, #0]
 801e3de:	e002      	b.n	801e3e6 <_printf_i+0x1ca>
 801e3e0:	0670      	lsls	r0, r6, #25
 801e3e2:	d5fb      	bpl.n	801e3dc <_printf_i+0x1c0>
 801e3e4:	8019      	strh	r1, [r3, #0]
 801e3e6:	2300      	movs	r3, #0
 801e3e8:	6123      	str	r3, [r4, #16]
 801e3ea:	4615      	mov	r5, r2
 801e3ec:	e7bc      	b.n	801e368 <_printf_i+0x14c>
 801e3ee:	682b      	ldr	r3, [r5, #0]
 801e3f0:	1d1a      	adds	r2, r3, #4
 801e3f2:	602a      	str	r2, [r5, #0]
 801e3f4:	681d      	ldr	r5, [r3, #0]
 801e3f6:	6862      	ldr	r2, [r4, #4]
 801e3f8:	2100      	movs	r1, #0
 801e3fa:	4628      	mov	r0, r5
 801e3fc:	f7e1 ff30 	bl	8000260 <memchr>
 801e400:	b108      	cbz	r0, 801e406 <_printf_i+0x1ea>
 801e402:	1b40      	subs	r0, r0, r5
 801e404:	6060      	str	r0, [r4, #4]
 801e406:	6863      	ldr	r3, [r4, #4]
 801e408:	6123      	str	r3, [r4, #16]
 801e40a:	2300      	movs	r3, #0
 801e40c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e410:	e7aa      	b.n	801e368 <_printf_i+0x14c>
 801e412:	6923      	ldr	r3, [r4, #16]
 801e414:	462a      	mov	r2, r5
 801e416:	4649      	mov	r1, r9
 801e418:	4640      	mov	r0, r8
 801e41a:	47d0      	blx	sl
 801e41c:	3001      	adds	r0, #1
 801e41e:	d0ad      	beq.n	801e37c <_printf_i+0x160>
 801e420:	6823      	ldr	r3, [r4, #0]
 801e422:	079b      	lsls	r3, r3, #30
 801e424:	d413      	bmi.n	801e44e <_printf_i+0x232>
 801e426:	68e0      	ldr	r0, [r4, #12]
 801e428:	9b03      	ldr	r3, [sp, #12]
 801e42a:	4298      	cmp	r0, r3
 801e42c:	bfb8      	it	lt
 801e42e:	4618      	movlt	r0, r3
 801e430:	e7a6      	b.n	801e380 <_printf_i+0x164>
 801e432:	2301      	movs	r3, #1
 801e434:	4632      	mov	r2, r6
 801e436:	4649      	mov	r1, r9
 801e438:	4640      	mov	r0, r8
 801e43a:	47d0      	blx	sl
 801e43c:	3001      	adds	r0, #1
 801e43e:	d09d      	beq.n	801e37c <_printf_i+0x160>
 801e440:	3501      	adds	r5, #1
 801e442:	68e3      	ldr	r3, [r4, #12]
 801e444:	9903      	ldr	r1, [sp, #12]
 801e446:	1a5b      	subs	r3, r3, r1
 801e448:	42ab      	cmp	r3, r5
 801e44a:	dcf2      	bgt.n	801e432 <_printf_i+0x216>
 801e44c:	e7eb      	b.n	801e426 <_printf_i+0x20a>
 801e44e:	2500      	movs	r5, #0
 801e450:	f104 0619 	add.w	r6, r4, #25
 801e454:	e7f5      	b.n	801e442 <_printf_i+0x226>
 801e456:	bf00      	nop
 801e458:	08020df5 	.word	0x08020df5
 801e45c:	08020e06 	.word	0x08020e06

0801e460 <__sflush_r>:
 801e460:	898a      	ldrh	r2, [r1, #12]
 801e462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e466:	4605      	mov	r5, r0
 801e468:	0710      	lsls	r0, r2, #28
 801e46a:	460c      	mov	r4, r1
 801e46c:	d458      	bmi.n	801e520 <__sflush_r+0xc0>
 801e46e:	684b      	ldr	r3, [r1, #4]
 801e470:	2b00      	cmp	r3, #0
 801e472:	dc05      	bgt.n	801e480 <__sflush_r+0x20>
 801e474:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e476:	2b00      	cmp	r3, #0
 801e478:	dc02      	bgt.n	801e480 <__sflush_r+0x20>
 801e47a:	2000      	movs	r0, #0
 801e47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e480:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e482:	2e00      	cmp	r6, #0
 801e484:	d0f9      	beq.n	801e47a <__sflush_r+0x1a>
 801e486:	2300      	movs	r3, #0
 801e488:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e48c:	682f      	ldr	r7, [r5, #0]
 801e48e:	6a21      	ldr	r1, [r4, #32]
 801e490:	602b      	str	r3, [r5, #0]
 801e492:	d032      	beq.n	801e4fa <__sflush_r+0x9a>
 801e494:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e496:	89a3      	ldrh	r3, [r4, #12]
 801e498:	075a      	lsls	r2, r3, #29
 801e49a:	d505      	bpl.n	801e4a8 <__sflush_r+0x48>
 801e49c:	6863      	ldr	r3, [r4, #4]
 801e49e:	1ac0      	subs	r0, r0, r3
 801e4a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e4a2:	b10b      	cbz	r3, 801e4a8 <__sflush_r+0x48>
 801e4a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e4a6:	1ac0      	subs	r0, r0, r3
 801e4a8:	2300      	movs	r3, #0
 801e4aa:	4602      	mov	r2, r0
 801e4ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e4ae:	6a21      	ldr	r1, [r4, #32]
 801e4b0:	4628      	mov	r0, r5
 801e4b2:	47b0      	blx	r6
 801e4b4:	1c43      	adds	r3, r0, #1
 801e4b6:	89a3      	ldrh	r3, [r4, #12]
 801e4b8:	d106      	bne.n	801e4c8 <__sflush_r+0x68>
 801e4ba:	6829      	ldr	r1, [r5, #0]
 801e4bc:	291d      	cmp	r1, #29
 801e4be:	d82b      	bhi.n	801e518 <__sflush_r+0xb8>
 801e4c0:	4a29      	ldr	r2, [pc, #164]	; (801e568 <__sflush_r+0x108>)
 801e4c2:	410a      	asrs	r2, r1
 801e4c4:	07d6      	lsls	r6, r2, #31
 801e4c6:	d427      	bmi.n	801e518 <__sflush_r+0xb8>
 801e4c8:	2200      	movs	r2, #0
 801e4ca:	6062      	str	r2, [r4, #4]
 801e4cc:	04d9      	lsls	r1, r3, #19
 801e4ce:	6922      	ldr	r2, [r4, #16]
 801e4d0:	6022      	str	r2, [r4, #0]
 801e4d2:	d504      	bpl.n	801e4de <__sflush_r+0x7e>
 801e4d4:	1c42      	adds	r2, r0, #1
 801e4d6:	d101      	bne.n	801e4dc <__sflush_r+0x7c>
 801e4d8:	682b      	ldr	r3, [r5, #0]
 801e4da:	b903      	cbnz	r3, 801e4de <__sflush_r+0x7e>
 801e4dc:	6560      	str	r0, [r4, #84]	; 0x54
 801e4de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e4e0:	602f      	str	r7, [r5, #0]
 801e4e2:	2900      	cmp	r1, #0
 801e4e4:	d0c9      	beq.n	801e47a <__sflush_r+0x1a>
 801e4e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e4ea:	4299      	cmp	r1, r3
 801e4ec:	d002      	beq.n	801e4f4 <__sflush_r+0x94>
 801e4ee:	4628      	mov	r0, r5
 801e4f0:	f7ff fc7a 	bl	801dde8 <_free_r>
 801e4f4:	2000      	movs	r0, #0
 801e4f6:	6360      	str	r0, [r4, #52]	; 0x34
 801e4f8:	e7c0      	b.n	801e47c <__sflush_r+0x1c>
 801e4fa:	2301      	movs	r3, #1
 801e4fc:	4628      	mov	r0, r5
 801e4fe:	47b0      	blx	r6
 801e500:	1c41      	adds	r1, r0, #1
 801e502:	d1c8      	bne.n	801e496 <__sflush_r+0x36>
 801e504:	682b      	ldr	r3, [r5, #0]
 801e506:	2b00      	cmp	r3, #0
 801e508:	d0c5      	beq.n	801e496 <__sflush_r+0x36>
 801e50a:	2b1d      	cmp	r3, #29
 801e50c:	d001      	beq.n	801e512 <__sflush_r+0xb2>
 801e50e:	2b16      	cmp	r3, #22
 801e510:	d101      	bne.n	801e516 <__sflush_r+0xb6>
 801e512:	602f      	str	r7, [r5, #0]
 801e514:	e7b1      	b.n	801e47a <__sflush_r+0x1a>
 801e516:	89a3      	ldrh	r3, [r4, #12]
 801e518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e51c:	81a3      	strh	r3, [r4, #12]
 801e51e:	e7ad      	b.n	801e47c <__sflush_r+0x1c>
 801e520:	690f      	ldr	r7, [r1, #16]
 801e522:	2f00      	cmp	r7, #0
 801e524:	d0a9      	beq.n	801e47a <__sflush_r+0x1a>
 801e526:	0793      	lsls	r3, r2, #30
 801e528:	680e      	ldr	r6, [r1, #0]
 801e52a:	bf08      	it	eq
 801e52c:	694b      	ldreq	r3, [r1, #20]
 801e52e:	600f      	str	r7, [r1, #0]
 801e530:	bf18      	it	ne
 801e532:	2300      	movne	r3, #0
 801e534:	eba6 0807 	sub.w	r8, r6, r7
 801e538:	608b      	str	r3, [r1, #8]
 801e53a:	f1b8 0f00 	cmp.w	r8, #0
 801e53e:	dd9c      	ble.n	801e47a <__sflush_r+0x1a>
 801e540:	6a21      	ldr	r1, [r4, #32]
 801e542:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e544:	4643      	mov	r3, r8
 801e546:	463a      	mov	r2, r7
 801e548:	4628      	mov	r0, r5
 801e54a:	47b0      	blx	r6
 801e54c:	2800      	cmp	r0, #0
 801e54e:	dc06      	bgt.n	801e55e <__sflush_r+0xfe>
 801e550:	89a3      	ldrh	r3, [r4, #12]
 801e552:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e556:	81a3      	strh	r3, [r4, #12]
 801e558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e55c:	e78e      	b.n	801e47c <__sflush_r+0x1c>
 801e55e:	4407      	add	r7, r0
 801e560:	eba8 0800 	sub.w	r8, r8, r0
 801e564:	e7e9      	b.n	801e53a <__sflush_r+0xda>
 801e566:	bf00      	nop
 801e568:	dfbffffe 	.word	0xdfbffffe

0801e56c <_fflush_r>:
 801e56c:	b538      	push	{r3, r4, r5, lr}
 801e56e:	690b      	ldr	r3, [r1, #16]
 801e570:	4605      	mov	r5, r0
 801e572:	460c      	mov	r4, r1
 801e574:	b913      	cbnz	r3, 801e57c <_fflush_r+0x10>
 801e576:	2500      	movs	r5, #0
 801e578:	4628      	mov	r0, r5
 801e57a:	bd38      	pop	{r3, r4, r5, pc}
 801e57c:	b118      	cbz	r0, 801e586 <_fflush_r+0x1a>
 801e57e:	6a03      	ldr	r3, [r0, #32]
 801e580:	b90b      	cbnz	r3, 801e586 <_fflush_r+0x1a>
 801e582:	f7ff f9b7 	bl	801d8f4 <__sinit>
 801e586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e58a:	2b00      	cmp	r3, #0
 801e58c:	d0f3      	beq.n	801e576 <_fflush_r+0xa>
 801e58e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e590:	07d0      	lsls	r0, r2, #31
 801e592:	d404      	bmi.n	801e59e <_fflush_r+0x32>
 801e594:	0599      	lsls	r1, r3, #22
 801e596:	d402      	bmi.n	801e59e <_fflush_r+0x32>
 801e598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e59a:	f7ff fbe2 	bl	801dd62 <__retarget_lock_acquire_recursive>
 801e59e:	4628      	mov	r0, r5
 801e5a0:	4621      	mov	r1, r4
 801e5a2:	f7ff ff5d 	bl	801e460 <__sflush_r>
 801e5a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e5a8:	07da      	lsls	r2, r3, #31
 801e5aa:	4605      	mov	r5, r0
 801e5ac:	d4e4      	bmi.n	801e578 <_fflush_r+0xc>
 801e5ae:	89a3      	ldrh	r3, [r4, #12]
 801e5b0:	059b      	lsls	r3, r3, #22
 801e5b2:	d4e1      	bmi.n	801e578 <_fflush_r+0xc>
 801e5b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e5b6:	f7ff fbd5 	bl	801dd64 <__retarget_lock_release_recursive>
 801e5ba:	e7dd      	b.n	801e578 <_fflush_r+0xc>

0801e5bc <fiprintf>:
 801e5bc:	b40e      	push	{r1, r2, r3}
 801e5be:	b503      	push	{r0, r1, lr}
 801e5c0:	4601      	mov	r1, r0
 801e5c2:	ab03      	add	r3, sp, #12
 801e5c4:	4805      	ldr	r0, [pc, #20]	; (801e5dc <fiprintf+0x20>)
 801e5c6:	f853 2b04 	ldr.w	r2, [r3], #4
 801e5ca:	6800      	ldr	r0, [r0, #0]
 801e5cc:	9301      	str	r3, [sp, #4]
 801e5ce:	f000 f837 	bl	801e640 <_vfiprintf_r>
 801e5d2:	b002      	add	sp, #8
 801e5d4:	f85d eb04 	ldr.w	lr, [sp], #4
 801e5d8:	b003      	add	sp, #12
 801e5da:	4770      	bx	lr
 801e5dc:	20002338 	.word	0x20002338

0801e5e0 <abort>:
 801e5e0:	b508      	push	{r3, lr}
 801e5e2:	2006      	movs	r0, #6
 801e5e4:	f000 fa04 	bl	801e9f0 <raise>
 801e5e8:	2001      	movs	r0, #1
 801e5ea:	f7e5 f81d 	bl	8003628 <_exit>

0801e5ee <__sfputc_r>:
 801e5ee:	6893      	ldr	r3, [r2, #8]
 801e5f0:	3b01      	subs	r3, #1
 801e5f2:	2b00      	cmp	r3, #0
 801e5f4:	b410      	push	{r4}
 801e5f6:	6093      	str	r3, [r2, #8]
 801e5f8:	da08      	bge.n	801e60c <__sfputc_r+0x1e>
 801e5fa:	6994      	ldr	r4, [r2, #24]
 801e5fc:	42a3      	cmp	r3, r4
 801e5fe:	db01      	blt.n	801e604 <__sfputc_r+0x16>
 801e600:	290a      	cmp	r1, #10
 801e602:	d103      	bne.n	801e60c <__sfputc_r+0x1e>
 801e604:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e608:	f000 b934 	b.w	801e874 <__swbuf_r>
 801e60c:	6813      	ldr	r3, [r2, #0]
 801e60e:	1c58      	adds	r0, r3, #1
 801e610:	6010      	str	r0, [r2, #0]
 801e612:	7019      	strb	r1, [r3, #0]
 801e614:	4608      	mov	r0, r1
 801e616:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e61a:	4770      	bx	lr

0801e61c <__sfputs_r>:
 801e61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e61e:	4606      	mov	r6, r0
 801e620:	460f      	mov	r7, r1
 801e622:	4614      	mov	r4, r2
 801e624:	18d5      	adds	r5, r2, r3
 801e626:	42ac      	cmp	r4, r5
 801e628:	d101      	bne.n	801e62e <__sfputs_r+0x12>
 801e62a:	2000      	movs	r0, #0
 801e62c:	e007      	b.n	801e63e <__sfputs_r+0x22>
 801e62e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e632:	463a      	mov	r2, r7
 801e634:	4630      	mov	r0, r6
 801e636:	f7ff ffda 	bl	801e5ee <__sfputc_r>
 801e63a:	1c43      	adds	r3, r0, #1
 801e63c:	d1f3      	bne.n	801e626 <__sfputs_r+0xa>
 801e63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e640 <_vfiprintf_r>:
 801e640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e644:	460d      	mov	r5, r1
 801e646:	b09d      	sub	sp, #116	; 0x74
 801e648:	4614      	mov	r4, r2
 801e64a:	4698      	mov	r8, r3
 801e64c:	4606      	mov	r6, r0
 801e64e:	b118      	cbz	r0, 801e658 <_vfiprintf_r+0x18>
 801e650:	6a03      	ldr	r3, [r0, #32]
 801e652:	b90b      	cbnz	r3, 801e658 <_vfiprintf_r+0x18>
 801e654:	f7ff f94e 	bl	801d8f4 <__sinit>
 801e658:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e65a:	07d9      	lsls	r1, r3, #31
 801e65c:	d405      	bmi.n	801e66a <_vfiprintf_r+0x2a>
 801e65e:	89ab      	ldrh	r3, [r5, #12]
 801e660:	059a      	lsls	r2, r3, #22
 801e662:	d402      	bmi.n	801e66a <_vfiprintf_r+0x2a>
 801e664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e666:	f7ff fb7c 	bl	801dd62 <__retarget_lock_acquire_recursive>
 801e66a:	89ab      	ldrh	r3, [r5, #12]
 801e66c:	071b      	lsls	r3, r3, #28
 801e66e:	d501      	bpl.n	801e674 <_vfiprintf_r+0x34>
 801e670:	692b      	ldr	r3, [r5, #16]
 801e672:	b99b      	cbnz	r3, 801e69c <_vfiprintf_r+0x5c>
 801e674:	4629      	mov	r1, r5
 801e676:	4630      	mov	r0, r6
 801e678:	f000 f93a 	bl	801e8f0 <__swsetup_r>
 801e67c:	b170      	cbz	r0, 801e69c <_vfiprintf_r+0x5c>
 801e67e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e680:	07dc      	lsls	r4, r3, #31
 801e682:	d504      	bpl.n	801e68e <_vfiprintf_r+0x4e>
 801e684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e688:	b01d      	add	sp, #116	; 0x74
 801e68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e68e:	89ab      	ldrh	r3, [r5, #12]
 801e690:	0598      	lsls	r0, r3, #22
 801e692:	d4f7      	bmi.n	801e684 <_vfiprintf_r+0x44>
 801e694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e696:	f7ff fb65 	bl	801dd64 <__retarget_lock_release_recursive>
 801e69a:	e7f3      	b.n	801e684 <_vfiprintf_r+0x44>
 801e69c:	2300      	movs	r3, #0
 801e69e:	9309      	str	r3, [sp, #36]	; 0x24
 801e6a0:	2320      	movs	r3, #32
 801e6a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e6a6:	f8cd 800c 	str.w	r8, [sp, #12]
 801e6aa:	2330      	movs	r3, #48	; 0x30
 801e6ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801e860 <_vfiprintf_r+0x220>
 801e6b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e6b4:	f04f 0901 	mov.w	r9, #1
 801e6b8:	4623      	mov	r3, r4
 801e6ba:	469a      	mov	sl, r3
 801e6bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e6c0:	b10a      	cbz	r2, 801e6c6 <_vfiprintf_r+0x86>
 801e6c2:	2a25      	cmp	r2, #37	; 0x25
 801e6c4:	d1f9      	bne.n	801e6ba <_vfiprintf_r+0x7a>
 801e6c6:	ebba 0b04 	subs.w	fp, sl, r4
 801e6ca:	d00b      	beq.n	801e6e4 <_vfiprintf_r+0xa4>
 801e6cc:	465b      	mov	r3, fp
 801e6ce:	4622      	mov	r2, r4
 801e6d0:	4629      	mov	r1, r5
 801e6d2:	4630      	mov	r0, r6
 801e6d4:	f7ff ffa2 	bl	801e61c <__sfputs_r>
 801e6d8:	3001      	adds	r0, #1
 801e6da:	f000 80a9 	beq.w	801e830 <_vfiprintf_r+0x1f0>
 801e6de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e6e0:	445a      	add	r2, fp
 801e6e2:	9209      	str	r2, [sp, #36]	; 0x24
 801e6e4:	f89a 3000 	ldrb.w	r3, [sl]
 801e6e8:	2b00      	cmp	r3, #0
 801e6ea:	f000 80a1 	beq.w	801e830 <_vfiprintf_r+0x1f0>
 801e6ee:	2300      	movs	r3, #0
 801e6f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e6f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e6f8:	f10a 0a01 	add.w	sl, sl, #1
 801e6fc:	9304      	str	r3, [sp, #16]
 801e6fe:	9307      	str	r3, [sp, #28]
 801e700:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e704:	931a      	str	r3, [sp, #104]	; 0x68
 801e706:	4654      	mov	r4, sl
 801e708:	2205      	movs	r2, #5
 801e70a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e70e:	4854      	ldr	r0, [pc, #336]	; (801e860 <_vfiprintf_r+0x220>)
 801e710:	f7e1 fda6 	bl	8000260 <memchr>
 801e714:	9a04      	ldr	r2, [sp, #16]
 801e716:	b9d8      	cbnz	r0, 801e750 <_vfiprintf_r+0x110>
 801e718:	06d1      	lsls	r1, r2, #27
 801e71a:	bf44      	itt	mi
 801e71c:	2320      	movmi	r3, #32
 801e71e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e722:	0713      	lsls	r3, r2, #28
 801e724:	bf44      	itt	mi
 801e726:	232b      	movmi	r3, #43	; 0x2b
 801e728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e72c:	f89a 3000 	ldrb.w	r3, [sl]
 801e730:	2b2a      	cmp	r3, #42	; 0x2a
 801e732:	d015      	beq.n	801e760 <_vfiprintf_r+0x120>
 801e734:	9a07      	ldr	r2, [sp, #28]
 801e736:	4654      	mov	r4, sl
 801e738:	2000      	movs	r0, #0
 801e73a:	f04f 0c0a 	mov.w	ip, #10
 801e73e:	4621      	mov	r1, r4
 801e740:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e744:	3b30      	subs	r3, #48	; 0x30
 801e746:	2b09      	cmp	r3, #9
 801e748:	d94d      	bls.n	801e7e6 <_vfiprintf_r+0x1a6>
 801e74a:	b1b0      	cbz	r0, 801e77a <_vfiprintf_r+0x13a>
 801e74c:	9207      	str	r2, [sp, #28]
 801e74e:	e014      	b.n	801e77a <_vfiprintf_r+0x13a>
 801e750:	eba0 0308 	sub.w	r3, r0, r8
 801e754:	fa09 f303 	lsl.w	r3, r9, r3
 801e758:	4313      	orrs	r3, r2
 801e75a:	9304      	str	r3, [sp, #16]
 801e75c:	46a2      	mov	sl, r4
 801e75e:	e7d2      	b.n	801e706 <_vfiprintf_r+0xc6>
 801e760:	9b03      	ldr	r3, [sp, #12]
 801e762:	1d19      	adds	r1, r3, #4
 801e764:	681b      	ldr	r3, [r3, #0]
 801e766:	9103      	str	r1, [sp, #12]
 801e768:	2b00      	cmp	r3, #0
 801e76a:	bfbb      	ittet	lt
 801e76c:	425b      	neglt	r3, r3
 801e76e:	f042 0202 	orrlt.w	r2, r2, #2
 801e772:	9307      	strge	r3, [sp, #28]
 801e774:	9307      	strlt	r3, [sp, #28]
 801e776:	bfb8      	it	lt
 801e778:	9204      	strlt	r2, [sp, #16]
 801e77a:	7823      	ldrb	r3, [r4, #0]
 801e77c:	2b2e      	cmp	r3, #46	; 0x2e
 801e77e:	d10c      	bne.n	801e79a <_vfiprintf_r+0x15a>
 801e780:	7863      	ldrb	r3, [r4, #1]
 801e782:	2b2a      	cmp	r3, #42	; 0x2a
 801e784:	d134      	bne.n	801e7f0 <_vfiprintf_r+0x1b0>
 801e786:	9b03      	ldr	r3, [sp, #12]
 801e788:	1d1a      	adds	r2, r3, #4
 801e78a:	681b      	ldr	r3, [r3, #0]
 801e78c:	9203      	str	r2, [sp, #12]
 801e78e:	2b00      	cmp	r3, #0
 801e790:	bfb8      	it	lt
 801e792:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801e796:	3402      	adds	r4, #2
 801e798:	9305      	str	r3, [sp, #20]
 801e79a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801e870 <_vfiprintf_r+0x230>
 801e79e:	7821      	ldrb	r1, [r4, #0]
 801e7a0:	2203      	movs	r2, #3
 801e7a2:	4650      	mov	r0, sl
 801e7a4:	f7e1 fd5c 	bl	8000260 <memchr>
 801e7a8:	b138      	cbz	r0, 801e7ba <_vfiprintf_r+0x17a>
 801e7aa:	9b04      	ldr	r3, [sp, #16]
 801e7ac:	eba0 000a 	sub.w	r0, r0, sl
 801e7b0:	2240      	movs	r2, #64	; 0x40
 801e7b2:	4082      	lsls	r2, r0
 801e7b4:	4313      	orrs	r3, r2
 801e7b6:	3401      	adds	r4, #1
 801e7b8:	9304      	str	r3, [sp, #16]
 801e7ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e7be:	4829      	ldr	r0, [pc, #164]	; (801e864 <_vfiprintf_r+0x224>)
 801e7c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e7c4:	2206      	movs	r2, #6
 801e7c6:	f7e1 fd4b 	bl	8000260 <memchr>
 801e7ca:	2800      	cmp	r0, #0
 801e7cc:	d03f      	beq.n	801e84e <_vfiprintf_r+0x20e>
 801e7ce:	4b26      	ldr	r3, [pc, #152]	; (801e868 <_vfiprintf_r+0x228>)
 801e7d0:	bb1b      	cbnz	r3, 801e81a <_vfiprintf_r+0x1da>
 801e7d2:	9b03      	ldr	r3, [sp, #12]
 801e7d4:	3307      	adds	r3, #7
 801e7d6:	f023 0307 	bic.w	r3, r3, #7
 801e7da:	3308      	adds	r3, #8
 801e7dc:	9303      	str	r3, [sp, #12]
 801e7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e7e0:	443b      	add	r3, r7
 801e7e2:	9309      	str	r3, [sp, #36]	; 0x24
 801e7e4:	e768      	b.n	801e6b8 <_vfiprintf_r+0x78>
 801e7e6:	fb0c 3202 	mla	r2, ip, r2, r3
 801e7ea:	460c      	mov	r4, r1
 801e7ec:	2001      	movs	r0, #1
 801e7ee:	e7a6      	b.n	801e73e <_vfiprintf_r+0xfe>
 801e7f0:	2300      	movs	r3, #0
 801e7f2:	3401      	adds	r4, #1
 801e7f4:	9305      	str	r3, [sp, #20]
 801e7f6:	4619      	mov	r1, r3
 801e7f8:	f04f 0c0a 	mov.w	ip, #10
 801e7fc:	4620      	mov	r0, r4
 801e7fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e802:	3a30      	subs	r2, #48	; 0x30
 801e804:	2a09      	cmp	r2, #9
 801e806:	d903      	bls.n	801e810 <_vfiprintf_r+0x1d0>
 801e808:	2b00      	cmp	r3, #0
 801e80a:	d0c6      	beq.n	801e79a <_vfiprintf_r+0x15a>
 801e80c:	9105      	str	r1, [sp, #20]
 801e80e:	e7c4      	b.n	801e79a <_vfiprintf_r+0x15a>
 801e810:	fb0c 2101 	mla	r1, ip, r1, r2
 801e814:	4604      	mov	r4, r0
 801e816:	2301      	movs	r3, #1
 801e818:	e7f0      	b.n	801e7fc <_vfiprintf_r+0x1bc>
 801e81a:	ab03      	add	r3, sp, #12
 801e81c:	9300      	str	r3, [sp, #0]
 801e81e:	462a      	mov	r2, r5
 801e820:	4b12      	ldr	r3, [pc, #72]	; (801e86c <_vfiprintf_r+0x22c>)
 801e822:	a904      	add	r1, sp, #16
 801e824:	4630      	mov	r0, r6
 801e826:	f3af 8000 	nop.w
 801e82a:	4607      	mov	r7, r0
 801e82c:	1c78      	adds	r0, r7, #1
 801e82e:	d1d6      	bne.n	801e7de <_vfiprintf_r+0x19e>
 801e830:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e832:	07d9      	lsls	r1, r3, #31
 801e834:	d405      	bmi.n	801e842 <_vfiprintf_r+0x202>
 801e836:	89ab      	ldrh	r3, [r5, #12]
 801e838:	059a      	lsls	r2, r3, #22
 801e83a:	d402      	bmi.n	801e842 <_vfiprintf_r+0x202>
 801e83c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e83e:	f7ff fa91 	bl	801dd64 <__retarget_lock_release_recursive>
 801e842:	89ab      	ldrh	r3, [r5, #12]
 801e844:	065b      	lsls	r3, r3, #25
 801e846:	f53f af1d 	bmi.w	801e684 <_vfiprintf_r+0x44>
 801e84a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e84c:	e71c      	b.n	801e688 <_vfiprintf_r+0x48>
 801e84e:	ab03      	add	r3, sp, #12
 801e850:	9300      	str	r3, [sp, #0]
 801e852:	462a      	mov	r2, r5
 801e854:	4b05      	ldr	r3, [pc, #20]	; (801e86c <_vfiprintf_r+0x22c>)
 801e856:	a904      	add	r1, sp, #16
 801e858:	4630      	mov	r0, r6
 801e85a:	f7ff fcdf 	bl	801e21c <_printf_i>
 801e85e:	e7e4      	b.n	801e82a <_vfiprintf_r+0x1ea>
 801e860:	08020de4 	.word	0x08020de4
 801e864:	08020dee 	.word	0x08020dee
 801e868:	00000000 	.word	0x00000000
 801e86c:	0801e61d 	.word	0x0801e61d
 801e870:	08020dea 	.word	0x08020dea

0801e874 <__swbuf_r>:
 801e874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e876:	460e      	mov	r6, r1
 801e878:	4614      	mov	r4, r2
 801e87a:	4605      	mov	r5, r0
 801e87c:	b118      	cbz	r0, 801e886 <__swbuf_r+0x12>
 801e87e:	6a03      	ldr	r3, [r0, #32]
 801e880:	b90b      	cbnz	r3, 801e886 <__swbuf_r+0x12>
 801e882:	f7ff f837 	bl	801d8f4 <__sinit>
 801e886:	69a3      	ldr	r3, [r4, #24]
 801e888:	60a3      	str	r3, [r4, #8]
 801e88a:	89a3      	ldrh	r3, [r4, #12]
 801e88c:	071a      	lsls	r2, r3, #28
 801e88e:	d525      	bpl.n	801e8dc <__swbuf_r+0x68>
 801e890:	6923      	ldr	r3, [r4, #16]
 801e892:	b31b      	cbz	r3, 801e8dc <__swbuf_r+0x68>
 801e894:	6823      	ldr	r3, [r4, #0]
 801e896:	6922      	ldr	r2, [r4, #16]
 801e898:	1a98      	subs	r0, r3, r2
 801e89a:	6963      	ldr	r3, [r4, #20]
 801e89c:	b2f6      	uxtb	r6, r6
 801e89e:	4283      	cmp	r3, r0
 801e8a0:	4637      	mov	r7, r6
 801e8a2:	dc04      	bgt.n	801e8ae <__swbuf_r+0x3a>
 801e8a4:	4621      	mov	r1, r4
 801e8a6:	4628      	mov	r0, r5
 801e8a8:	f7ff fe60 	bl	801e56c <_fflush_r>
 801e8ac:	b9e0      	cbnz	r0, 801e8e8 <__swbuf_r+0x74>
 801e8ae:	68a3      	ldr	r3, [r4, #8]
 801e8b0:	3b01      	subs	r3, #1
 801e8b2:	60a3      	str	r3, [r4, #8]
 801e8b4:	6823      	ldr	r3, [r4, #0]
 801e8b6:	1c5a      	adds	r2, r3, #1
 801e8b8:	6022      	str	r2, [r4, #0]
 801e8ba:	701e      	strb	r6, [r3, #0]
 801e8bc:	6962      	ldr	r2, [r4, #20]
 801e8be:	1c43      	adds	r3, r0, #1
 801e8c0:	429a      	cmp	r2, r3
 801e8c2:	d004      	beq.n	801e8ce <__swbuf_r+0x5a>
 801e8c4:	89a3      	ldrh	r3, [r4, #12]
 801e8c6:	07db      	lsls	r3, r3, #31
 801e8c8:	d506      	bpl.n	801e8d8 <__swbuf_r+0x64>
 801e8ca:	2e0a      	cmp	r6, #10
 801e8cc:	d104      	bne.n	801e8d8 <__swbuf_r+0x64>
 801e8ce:	4621      	mov	r1, r4
 801e8d0:	4628      	mov	r0, r5
 801e8d2:	f7ff fe4b 	bl	801e56c <_fflush_r>
 801e8d6:	b938      	cbnz	r0, 801e8e8 <__swbuf_r+0x74>
 801e8d8:	4638      	mov	r0, r7
 801e8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e8dc:	4621      	mov	r1, r4
 801e8de:	4628      	mov	r0, r5
 801e8e0:	f000 f806 	bl	801e8f0 <__swsetup_r>
 801e8e4:	2800      	cmp	r0, #0
 801e8e6:	d0d5      	beq.n	801e894 <__swbuf_r+0x20>
 801e8e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801e8ec:	e7f4      	b.n	801e8d8 <__swbuf_r+0x64>
	...

0801e8f0 <__swsetup_r>:
 801e8f0:	b538      	push	{r3, r4, r5, lr}
 801e8f2:	4b2a      	ldr	r3, [pc, #168]	; (801e99c <__swsetup_r+0xac>)
 801e8f4:	4605      	mov	r5, r0
 801e8f6:	6818      	ldr	r0, [r3, #0]
 801e8f8:	460c      	mov	r4, r1
 801e8fa:	b118      	cbz	r0, 801e904 <__swsetup_r+0x14>
 801e8fc:	6a03      	ldr	r3, [r0, #32]
 801e8fe:	b90b      	cbnz	r3, 801e904 <__swsetup_r+0x14>
 801e900:	f7fe fff8 	bl	801d8f4 <__sinit>
 801e904:	89a3      	ldrh	r3, [r4, #12]
 801e906:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e90a:	0718      	lsls	r0, r3, #28
 801e90c:	d422      	bmi.n	801e954 <__swsetup_r+0x64>
 801e90e:	06d9      	lsls	r1, r3, #27
 801e910:	d407      	bmi.n	801e922 <__swsetup_r+0x32>
 801e912:	2309      	movs	r3, #9
 801e914:	602b      	str	r3, [r5, #0]
 801e916:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e91a:	81a3      	strh	r3, [r4, #12]
 801e91c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e920:	e034      	b.n	801e98c <__swsetup_r+0x9c>
 801e922:	0758      	lsls	r0, r3, #29
 801e924:	d512      	bpl.n	801e94c <__swsetup_r+0x5c>
 801e926:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e928:	b141      	cbz	r1, 801e93c <__swsetup_r+0x4c>
 801e92a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e92e:	4299      	cmp	r1, r3
 801e930:	d002      	beq.n	801e938 <__swsetup_r+0x48>
 801e932:	4628      	mov	r0, r5
 801e934:	f7ff fa58 	bl	801dde8 <_free_r>
 801e938:	2300      	movs	r3, #0
 801e93a:	6363      	str	r3, [r4, #52]	; 0x34
 801e93c:	89a3      	ldrh	r3, [r4, #12]
 801e93e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e942:	81a3      	strh	r3, [r4, #12]
 801e944:	2300      	movs	r3, #0
 801e946:	6063      	str	r3, [r4, #4]
 801e948:	6923      	ldr	r3, [r4, #16]
 801e94a:	6023      	str	r3, [r4, #0]
 801e94c:	89a3      	ldrh	r3, [r4, #12]
 801e94e:	f043 0308 	orr.w	r3, r3, #8
 801e952:	81a3      	strh	r3, [r4, #12]
 801e954:	6923      	ldr	r3, [r4, #16]
 801e956:	b94b      	cbnz	r3, 801e96c <__swsetup_r+0x7c>
 801e958:	89a3      	ldrh	r3, [r4, #12]
 801e95a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e95e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e962:	d003      	beq.n	801e96c <__swsetup_r+0x7c>
 801e964:	4621      	mov	r1, r4
 801e966:	4628      	mov	r0, r5
 801e968:	f000 f884 	bl	801ea74 <__smakebuf_r>
 801e96c:	89a0      	ldrh	r0, [r4, #12]
 801e96e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e972:	f010 0301 	ands.w	r3, r0, #1
 801e976:	d00a      	beq.n	801e98e <__swsetup_r+0x9e>
 801e978:	2300      	movs	r3, #0
 801e97a:	60a3      	str	r3, [r4, #8]
 801e97c:	6963      	ldr	r3, [r4, #20]
 801e97e:	425b      	negs	r3, r3
 801e980:	61a3      	str	r3, [r4, #24]
 801e982:	6923      	ldr	r3, [r4, #16]
 801e984:	b943      	cbnz	r3, 801e998 <__swsetup_r+0xa8>
 801e986:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e98a:	d1c4      	bne.n	801e916 <__swsetup_r+0x26>
 801e98c:	bd38      	pop	{r3, r4, r5, pc}
 801e98e:	0781      	lsls	r1, r0, #30
 801e990:	bf58      	it	pl
 801e992:	6963      	ldrpl	r3, [r4, #20]
 801e994:	60a3      	str	r3, [r4, #8]
 801e996:	e7f4      	b.n	801e982 <__swsetup_r+0x92>
 801e998:	2000      	movs	r0, #0
 801e99a:	e7f7      	b.n	801e98c <__swsetup_r+0x9c>
 801e99c:	20002338 	.word	0x20002338

0801e9a0 <_raise_r>:
 801e9a0:	291f      	cmp	r1, #31
 801e9a2:	b538      	push	{r3, r4, r5, lr}
 801e9a4:	4604      	mov	r4, r0
 801e9a6:	460d      	mov	r5, r1
 801e9a8:	d904      	bls.n	801e9b4 <_raise_r+0x14>
 801e9aa:	2316      	movs	r3, #22
 801e9ac:	6003      	str	r3, [r0, #0]
 801e9ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e9b2:	bd38      	pop	{r3, r4, r5, pc}
 801e9b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801e9b6:	b112      	cbz	r2, 801e9be <_raise_r+0x1e>
 801e9b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e9bc:	b94b      	cbnz	r3, 801e9d2 <_raise_r+0x32>
 801e9be:	4620      	mov	r0, r4
 801e9c0:	f000 f830 	bl	801ea24 <_getpid_r>
 801e9c4:	462a      	mov	r2, r5
 801e9c6:	4601      	mov	r1, r0
 801e9c8:	4620      	mov	r0, r4
 801e9ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e9ce:	f000 b817 	b.w	801ea00 <_kill_r>
 801e9d2:	2b01      	cmp	r3, #1
 801e9d4:	d00a      	beq.n	801e9ec <_raise_r+0x4c>
 801e9d6:	1c59      	adds	r1, r3, #1
 801e9d8:	d103      	bne.n	801e9e2 <_raise_r+0x42>
 801e9da:	2316      	movs	r3, #22
 801e9dc:	6003      	str	r3, [r0, #0]
 801e9de:	2001      	movs	r0, #1
 801e9e0:	e7e7      	b.n	801e9b2 <_raise_r+0x12>
 801e9e2:	2400      	movs	r4, #0
 801e9e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e9e8:	4628      	mov	r0, r5
 801e9ea:	4798      	blx	r3
 801e9ec:	2000      	movs	r0, #0
 801e9ee:	e7e0      	b.n	801e9b2 <_raise_r+0x12>

0801e9f0 <raise>:
 801e9f0:	4b02      	ldr	r3, [pc, #8]	; (801e9fc <raise+0xc>)
 801e9f2:	4601      	mov	r1, r0
 801e9f4:	6818      	ldr	r0, [r3, #0]
 801e9f6:	f7ff bfd3 	b.w	801e9a0 <_raise_r>
 801e9fa:	bf00      	nop
 801e9fc:	20002338 	.word	0x20002338

0801ea00 <_kill_r>:
 801ea00:	b538      	push	{r3, r4, r5, lr}
 801ea02:	4d07      	ldr	r5, [pc, #28]	; (801ea20 <_kill_r+0x20>)
 801ea04:	2300      	movs	r3, #0
 801ea06:	4604      	mov	r4, r0
 801ea08:	4608      	mov	r0, r1
 801ea0a:	4611      	mov	r1, r2
 801ea0c:	602b      	str	r3, [r5, #0]
 801ea0e:	f7e4 fdfb 	bl	8003608 <_kill>
 801ea12:	1c43      	adds	r3, r0, #1
 801ea14:	d102      	bne.n	801ea1c <_kill_r+0x1c>
 801ea16:	682b      	ldr	r3, [r5, #0]
 801ea18:	b103      	cbz	r3, 801ea1c <_kill_r+0x1c>
 801ea1a:	6023      	str	r3, [r4, #0]
 801ea1c:	bd38      	pop	{r3, r4, r5, pc}
 801ea1e:	bf00      	nop
 801ea20:	20010e8c 	.word	0x20010e8c

0801ea24 <_getpid_r>:
 801ea24:	f7e4 bde8 	b.w	80035f8 <_getpid>

0801ea28 <__swhatbuf_r>:
 801ea28:	b570      	push	{r4, r5, r6, lr}
 801ea2a:	460c      	mov	r4, r1
 801ea2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ea30:	2900      	cmp	r1, #0
 801ea32:	b096      	sub	sp, #88	; 0x58
 801ea34:	4615      	mov	r5, r2
 801ea36:	461e      	mov	r6, r3
 801ea38:	da0d      	bge.n	801ea56 <__swhatbuf_r+0x2e>
 801ea3a:	89a3      	ldrh	r3, [r4, #12]
 801ea3c:	f013 0f80 	tst.w	r3, #128	; 0x80
 801ea40:	f04f 0100 	mov.w	r1, #0
 801ea44:	bf0c      	ite	eq
 801ea46:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801ea4a:	2340      	movne	r3, #64	; 0x40
 801ea4c:	2000      	movs	r0, #0
 801ea4e:	6031      	str	r1, [r6, #0]
 801ea50:	602b      	str	r3, [r5, #0]
 801ea52:	b016      	add	sp, #88	; 0x58
 801ea54:	bd70      	pop	{r4, r5, r6, pc}
 801ea56:	466a      	mov	r2, sp
 801ea58:	f000 f848 	bl	801eaec <_fstat_r>
 801ea5c:	2800      	cmp	r0, #0
 801ea5e:	dbec      	blt.n	801ea3a <__swhatbuf_r+0x12>
 801ea60:	9901      	ldr	r1, [sp, #4]
 801ea62:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801ea66:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801ea6a:	4259      	negs	r1, r3
 801ea6c:	4159      	adcs	r1, r3
 801ea6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ea72:	e7eb      	b.n	801ea4c <__swhatbuf_r+0x24>

0801ea74 <__smakebuf_r>:
 801ea74:	898b      	ldrh	r3, [r1, #12]
 801ea76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ea78:	079d      	lsls	r5, r3, #30
 801ea7a:	4606      	mov	r6, r0
 801ea7c:	460c      	mov	r4, r1
 801ea7e:	d507      	bpl.n	801ea90 <__smakebuf_r+0x1c>
 801ea80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ea84:	6023      	str	r3, [r4, #0]
 801ea86:	6123      	str	r3, [r4, #16]
 801ea88:	2301      	movs	r3, #1
 801ea8a:	6163      	str	r3, [r4, #20]
 801ea8c:	b002      	add	sp, #8
 801ea8e:	bd70      	pop	{r4, r5, r6, pc}
 801ea90:	ab01      	add	r3, sp, #4
 801ea92:	466a      	mov	r2, sp
 801ea94:	f7ff ffc8 	bl	801ea28 <__swhatbuf_r>
 801ea98:	9900      	ldr	r1, [sp, #0]
 801ea9a:	4605      	mov	r5, r0
 801ea9c:	4630      	mov	r0, r6
 801ea9e:	f7fe fcf1 	bl	801d484 <_malloc_r>
 801eaa2:	b948      	cbnz	r0, 801eab8 <__smakebuf_r+0x44>
 801eaa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eaa8:	059a      	lsls	r2, r3, #22
 801eaaa:	d4ef      	bmi.n	801ea8c <__smakebuf_r+0x18>
 801eaac:	f023 0303 	bic.w	r3, r3, #3
 801eab0:	f043 0302 	orr.w	r3, r3, #2
 801eab4:	81a3      	strh	r3, [r4, #12]
 801eab6:	e7e3      	b.n	801ea80 <__smakebuf_r+0xc>
 801eab8:	89a3      	ldrh	r3, [r4, #12]
 801eaba:	6020      	str	r0, [r4, #0]
 801eabc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801eac0:	81a3      	strh	r3, [r4, #12]
 801eac2:	9b00      	ldr	r3, [sp, #0]
 801eac4:	6163      	str	r3, [r4, #20]
 801eac6:	9b01      	ldr	r3, [sp, #4]
 801eac8:	6120      	str	r0, [r4, #16]
 801eaca:	b15b      	cbz	r3, 801eae4 <__smakebuf_r+0x70>
 801eacc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ead0:	4630      	mov	r0, r6
 801ead2:	f000 f81d 	bl	801eb10 <_isatty_r>
 801ead6:	b128      	cbz	r0, 801eae4 <__smakebuf_r+0x70>
 801ead8:	89a3      	ldrh	r3, [r4, #12]
 801eada:	f023 0303 	bic.w	r3, r3, #3
 801eade:	f043 0301 	orr.w	r3, r3, #1
 801eae2:	81a3      	strh	r3, [r4, #12]
 801eae4:	89a3      	ldrh	r3, [r4, #12]
 801eae6:	431d      	orrs	r5, r3
 801eae8:	81a5      	strh	r5, [r4, #12]
 801eaea:	e7cf      	b.n	801ea8c <__smakebuf_r+0x18>

0801eaec <_fstat_r>:
 801eaec:	b538      	push	{r3, r4, r5, lr}
 801eaee:	4d07      	ldr	r5, [pc, #28]	; (801eb0c <_fstat_r+0x20>)
 801eaf0:	2300      	movs	r3, #0
 801eaf2:	4604      	mov	r4, r0
 801eaf4:	4608      	mov	r0, r1
 801eaf6:	4611      	mov	r1, r2
 801eaf8:	602b      	str	r3, [r5, #0]
 801eafa:	f7e4 fde4 	bl	80036c6 <_fstat>
 801eafe:	1c43      	adds	r3, r0, #1
 801eb00:	d102      	bne.n	801eb08 <_fstat_r+0x1c>
 801eb02:	682b      	ldr	r3, [r5, #0]
 801eb04:	b103      	cbz	r3, 801eb08 <_fstat_r+0x1c>
 801eb06:	6023      	str	r3, [r4, #0]
 801eb08:	bd38      	pop	{r3, r4, r5, pc}
 801eb0a:	bf00      	nop
 801eb0c:	20010e8c 	.word	0x20010e8c

0801eb10 <_isatty_r>:
 801eb10:	b538      	push	{r3, r4, r5, lr}
 801eb12:	4d06      	ldr	r5, [pc, #24]	; (801eb2c <_isatty_r+0x1c>)
 801eb14:	2300      	movs	r3, #0
 801eb16:	4604      	mov	r4, r0
 801eb18:	4608      	mov	r0, r1
 801eb1a:	602b      	str	r3, [r5, #0]
 801eb1c:	f7e4 fde3 	bl	80036e6 <_isatty>
 801eb20:	1c43      	adds	r3, r0, #1
 801eb22:	d102      	bne.n	801eb2a <_isatty_r+0x1a>
 801eb24:	682b      	ldr	r3, [r5, #0]
 801eb26:	b103      	cbz	r3, 801eb2a <_isatty_r+0x1a>
 801eb28:	6023      	str	r3, [r4, #0]
 801eb2a:	bd38      	pop	{r3, r4, r5, pc}
 801eb2c:	20010e8c 	.word	0x20010e8c

0801eb30 <_init>:
 801eb30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb32:	bf00      	nop
 801eb34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eb36:	bc08      	pop	{r3}
 801eb38:	469e      	mov	lr, r3
 801eb3a:	4770      	bx	lr

0801eb3c <_fini>:
 801eb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eb3e:	bf00      	nop
 801eb40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eb42:	bc08      	pop	{r3}
 801eb44:	469e      	mov	lr, r3
 801eb46:	4770      	bx	lr
