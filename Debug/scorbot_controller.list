
scorbot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d568  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002038  0801d768  0801d768  0002d768  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f7a0  0801f7a0  000321dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801f7a0  0801f7a0  0002f7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f7a8  0801f7a8  000321dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  0801f7a8  0801f7a8  0002f7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801f7c0  0801f7c0  0002f7c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000021dc  20000000  0801f7c8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000eb0c  200021e0  080219a4  000321e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20010cec  080219a4  00040cec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000321dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  0003220a  2**0
                  CONTENTS, READONLY
 13 .debug_info   000360e7  00000000  00000000  00032280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000066ad  00000000  00000000  00068367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ec8  00000000  00000000  0006ea18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000179a  00000000  00000000  000708e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000358c2  00000000  00000000  0007207a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002db59  00000000  00000000  000a793c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011efed  00000000  00000000  000d5495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008e30  00000000  00000000  001f4484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001fd2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200021e0 	.word	0x200021e0
 800021c:	00000000 	.word	0x00000000
 8000220:	0801d750 	.word	0x0801d750

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200021e4 	.word	0x200021e4
 800023c:	0801d750 	.word	0x0801d750

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800032e:	f000 b9bb 	b.w	80006a8 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <pwm_callback>:
#include <callbacks.hpp>

void pwm_callback(const void* msgin) {
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	const racs_services__msg__DirectAccess* pwm_msg =
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	60fb      	str	r3, [r7, #12]
		(const racs_services__msg__DirectAccess*) msgin;

	if(pwm_msg->num_motors != ScorBot.getSize()) {
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461c      	mov	r4, r3
 80006be:	480f      	ldr	r0, [pc, #60]	; (80006fc <pwm_callback+0x50>)
 80006c0:	f000 fb73 	bl	8000daa <_ZN5Robot7getSizeEv>
 80006c4:	4603      	mov	r3, r0
 80006c6:	429c      	cmp	r4, r3
 80006c8:	bf14      	ite	ne
 80006ca:	2301      	movne	r3, #1
 80006cc:	2300      	moveq	r3, #0
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d005      	beq.n	80006e0 <pwm_callback+0x34>
	    ScorBot.setStatus(Robot::Status::Idle, true);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2100      	movs	r1, #0
 80006d8:	4808      	ldr	r0, [pc, #32]	; (80006fc <pwm_callback+0x50>)
 80006da:	f000 fb73 	bl	8000dc4 <_ZN5Robot9setStatusENS_6StatusEb>
	    return;
 80006de:	e00a      	b.n	80006f6 <pwm_callback+0x4a>
	}

	ScorBot.setPWMs(pwm_msg->pwms);
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	3302      	adds	r3, #2
 80006e4:	4619      	mov	r1, r3
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <pwm_callback+0x50>)
 80006e8:	f000 fbf7 	bl	8000eda <_ZN5Robot7setPWMsEPKs>
	ScorBot.setStatus(Robot::Status::DAQ, false);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2101      	movs	r1, #1
 80006f0:	4802      	ldr	r0, [pc, #8]	; (80006fc <pwm_callback+0x50>)
 80006f2:	f000 fb67 	bl	8000dc4 <_ZN5Robot9setStatusENS_6StatusEb>
}
 80006f6:	3714      	adds	r7, #20
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd90      	pop	{r4, r7, pc}
 80006fc:	200021fc 	.word	0x200021fc

08000700 <control_callback>:

void control_callback(const void* request_msg, void* response_msg){
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
		racs_services__srv__Control_Request* req_in =
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	60fb      	str	r3, [r7, #12]
				(racs_services__srv__Control_Request*) request_msg;
		racs_services__srv__Control_Response* res_in =
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	60bb      	str	r3, [r7, #8]
				(racs_services__srv__Control_Response*) response_msg;
		ScorBot.lastEvent = getCurrentTime();
 8000712:	f003 fa5d 	bl	8003bd0 <_Z14getCurrentTimev>
 8000716:	4603      	mov	r3, r0
 8000718:	4a06      	ldr	r2, [pc, #24]	; (8000734 <control_callback+0x34>)
 800071a:	6013      	str	r3, [r2, #0]
		ScorBot.rcvCtrl(req_in);
 800071c:	68f9      	ldr	r1, [r7, #12]
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <control_callback+0x34>)
 8000720:	f000 fc32 	bl	8000f88 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request>
		ScorBot.sndCtrl(res_in);
 8000724:	68b9      	ldr	r1, [r7, #8]
 8000726:	4803      	ldr	r0, [pc, #12]	; (8000734 <control_callback+0x34>)
 8000728:	f000 fc8b 	bl	8001042 <_ZN5Robot7sndCtrlEP36racs_services__srv__Control_Response>
	}
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200021fc 	.word	0x200021fc

08000738 <setup_callback>:

void setup_callback(const void* request_msg, void* response_msg){
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
		racs_services__srv__Setup_Request* req_in =
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	60fb      	str	r3, [r7, #12]
				(racs_services__srv__Setup_Request*) request_msg;
		racs_services__srv__Setup_Response* res_in =
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	60bb      	str	r3, [r7, #8]
				(racs_services__srv__Setup_Response*) response_msg;
		ScorBot.lastEvent = getCurrentTime();
 800074a:	f003 fa41 	bl	8003bd0 <_Z14getCurrentTimev>
 800074e:	4603      	mov	r3, r0
 8000750:	4a06      	ldr	r2, [pc, #24]	; (800076c <setup_callback+0x34>)
 8000752:	6013      	str	r3, [r2, #0]
		ScorBot.rcvSetup(req_in);
 8000754:	68f9      	ldr	r1, [r7, #12]
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <setup_callback+0x34>)
 8000758:	f000 fc84 	bl	8001064 <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request>
		ScorBot.sndSetup(res_in);
 800075c:	68b9      	ldr	r1, [r7, #8]
 800075e:	4803      	ldr	r0, [pc, #12]	; (800076c <setup_callback+0x34>)
 8000760:	f000 fce0 	bl	8001124 <_ZN5Robot8sndSetupEP34racs_services__srv__Setup_Response>
	}
 8000764:	bf00      	nop
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200021fc 	.word	0x200021fc

08000770 <feedback_timer_callback>:

void feedback_timer_callback(rcl_timer_t* timer, int64_t last_call_time)
{
 8000770:	b590      	push	{r4, r7, lr}
 8000772:	b08d      	sub	sp, #52	; 0x34
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	e9c7 2300 	strd	r2, r3, [r7]
	//UNUSED(timer);
	UNUSED(last_call_time);

	if (timer != NULL) {
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d043      	beq.n	800080a <feedback_timer_callback+0x9a>
		racs_services__msg__Feedback feedback;
		rcl_ret_t rc;

		int size = ScorBot.getSize();
 8000782:	4823      	ldr	r0, [pc, #140]	; (8000810 <feedback_timer_callback+0xa0>)
 8000784:	f000 fb11 	bl	8000daa <_ZN5Robot7getSizeEv>
 8000788:	62b8      	str	r0, [r7, #40]	; 0x28
		feedback.num_motors = size;
 800078a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800078c:	b2db      	uxtb	r3, r3
 800078e:	753b      	strb	r3, [r7, #20]
		for(uint8_t i = 0; i < size; i++) {
 8000790:	2300      	movs	r3, #0
 8000792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000796:	e013      	b.n	80007c0 <feedback_timer_callback+0x50>
			feedback.encoders[i] = ScorBot.getEncoder(i);
 8000798:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800079c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007a0:	4619      	mov	r1, r3
 80007a2:	481b      	ldr	r0, [pc, #108]	; (8000810 <feedback_timer_callback+0xa0>)
 80007a4:	f000 fb85 	bl	8000eb2 <_ZN5Robot10getEncoderEh>
 80007a8:	4603      	mov	r3, r0
 80007aa:	461a      	mov	r2, r3
 80007ac:	0063      	lsls	r3, r4, #1
 80007ae:	3330      	adds	r3, #48	; 0x30
 80007b0:	443b      	add	r3, r7
 80007b2:	f823 2c1a 	strh.w	r2, [r3, #-26]
		for(uint8_t i = 0; i < size; i++) {
 80007b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007ba:	3301      	adds	r3, #1
 80007bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80007c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007c6:	429a      	cmp	r2, r3
 80007c8:	dce6      	bgt.n	8000798 <feedback_timer_callback+0x28>
		}

		for(uint8_t i = 6; i > size; i--) {
 80007ca:	2306      	movs	r3, #6
 80007cc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80007d0:	e00c      	b.n	80007ec <feedback_timer_callback+0x7c>
			feedback.encoders[i] = 0;
 80007d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	3330      	adds	r3, #48	; 0x30
 80007da:	443b      	add	r3, r7
 80007dc:	2200      	movs	r2, #0
 80007de:	f823 2c1a 	strh.w	r2, [r3, #-26]
		for(uint8_t i = 6; i > size; i--) {
 80007e2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80007e6:	3b01      	subs	r3, #1
 80007e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80007ec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80007f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007f2:	429a      	cmp	r2, r3
 80007f4:	dbed      	blt.n	80007d2 <feedback_timer_callback+0x62>
		}
		rc = rcl_publish(&feedback_publisher, &feedback, NULL);
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	2200      	movs	r2, #0
 80007fc:	4619      	mov	r1, r3
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <feedback_timer_callback+0xa4>)
 8000800:	f00c f986 	bl	800cb10 <rcl_publish>
 8000804:	6278      	str	r0, [r7, #36]	; 0x24
		if (rc != RCL_RET_OK) return;
 8000806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000808:	2b00      	cmp	r3, #0
	}
}
 800080a:	3734      	adds	r7, #52	; 0x34
 800080c:	46bd      	mov	sp, r7
 800080e:	bd90      	pop	{r4, r7, pc}
 8000810:	200021fc 	.word	0x200021fc
 8000814:	20006664 	.word	0x20006664

08000818 <robot_timer_callback>:

void robot_timer_callback(rcl_timer_t* timer, int64_t last_call_time)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	e9c7 2300 	strd	r2, r3, [r7]
	//UNUSED(timer);
	UNUSED(last_call_time);
	if (timer != NULL) {
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d002      	beq.n	8000830 <robot_timer_callback+0x18>
		ScorBot.cycle();
 800082a:	4803      	ldr	r0, [pc, #12]	; (8000838 <robot_timer_callback+0x20>)
 800082c:	f000 fd70 	bl	8001310 <_ZN5Robot5cycleEv>
	}

}
 8000830:	bf00      	nop
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200021fc 	.word	0x200021fc

0800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>:

PinControl::PinControl() {

}

PinControl::PinControl(GPIO_TypeDef* port, uint16_t pin){
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	4613      	mov	r3, r2
 8000848:	80fb      	strh	r3, [r7, #6]
  this->port = port;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	68ba      	ldr	r2, [r7, #8]
 800084e:	601a      	str	r2, [r3, #0]
  this->pin = pin;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	88fa      	ldrh	r2, [r7, #6]
 8000854:	809a      	strh	r2, [r3, #4]
  setLimits(0.0, 0.0);
 8000856:	eddf 0a06 	vldr	s1, [pc, #24]	; 8000870 <_ZN10PinControlC1EP12GPIO_TypeDeft+0x34>
 800085a:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000870 <_ZN10PinControlC1EP12GPIO_TypeDeft+0x34>
 800085e:	68f8      	ldr	r0, [r7, #12]
 8000860:	f000 f808 	bl	8000874 <_ZN10PinControl9setLimitsEff>
}
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	4618      	mov	r0, r3
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	00000000 	.word	0x00000000

08000874 <_ZN10PinControl9setLimitsEff>:
  this->port = port;
  this->pin = pin;
  setLimits(v1, v2);
}

void PinControl::setLimits(float v1, float v2){
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000880:	edc7 0a01 	vstr	s1, [r7, #4]
  this->v1 = v1;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	68ba      	ldr	r2, [r7, #8]
 8000888:	609a      	str	r2, [r3, #8]
  this->v2 = v2;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	60da      	str	r2, [r3, #12]
}
 8000890:	bf00      	nop
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <_ZN10PinControl3setEb>:

void PinControl::set(bool state){
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(port, pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6818      	ldr	r0, [r3, #0]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	8899      	ldrh	r1, [r3, #4]
 80008b0:	78fb      	ldrb	r3, [r7, #3]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <_ZN10PinControl3setEb+0x1e>
 80008b6:	2301      	movs	r3, #1
 80008b8:	e000      	b.n	80008bc <_ZN10PinControl3setEb+0x20>
 80008ba:	2300      	movs	r3, #0
 80008bc:	461a      	mov	r2, r3
 80008be:	f004 f8c5 	bl	8004a4c <HAL_GPIO_WritePin>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
	...

080008cc <_ZN10PinMeasureC1EP12GPIO_TypeDeft>:

PinMeasure::PinMeasure() {

}

PinMeasure::PinMeasure(GPIO_TypeDef* port, uint16_t pin){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	4613      	mov	r3, r2
 80008d8:	80fb      	strh	r3, [r7, #6]
  this->port = port;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	68ba      	ldr	r2, [r7, #8]
 80008de:	601a      	str	r2, [r3, #0]
  this->pin = pin;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	88fa      	ldrh	r2, [r7, #6]
 80008e4:	809a      	strh	r2, [r3, #4]
  setLimits(0.0, 0.0);
 80008e6:	eddf 0a06 	vldr	s1, [pc, #24]	; 8000900 <_ZN10PinMeasureC1EP12GPIO_TypeDeft+0x34>
 80008ea:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8000900 <_ZN10PinMeasureC1EP12GPIO_TypeDeft+0x34>
 80008ee:	68f8      	ldr	r0, [r7, #12]
 80008f0:	f000 f808 	bl	8000904 <_ZN10PinMeasure9setLimitsEff>
}
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	4618      	mov	r0, r3
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	00000000 	.word	0x00000000

08000904 <_ZN10PinMeasure9setLimitsEff>:
  this->port = port;
  this->pin = pin;
  setLimits(v1, v2);
}

void PinMeasure::setLimits(float v1, float v2){
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000910:	edc7 0a01 	vstr	s1, [r7, #4]
  this->v1 = v1;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	609a      	str	r2, [r3, #8]
  this->v2 = v2;
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	60da      	str	r2, [r3, #12]
}
 8000920:	bf00      	nop
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <_ZN10PinMeasure5stateEv>:

bool PinMeasure::state(){
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin(port, pin);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	889b      	ldrh	r3, [r3, #4]
 800093c:	4619      	mov	r1, r3
 800093e:	4610      	mov	r0, r2
 8000940:	f004 f86c 	bl	8004a1c <HAL_GPIO_ReadPin>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	bf14      	ite	ne
 800094a:	2301      	movne	r3, #1
 800094c:	2300      	moveq	r3, #0
 800094e:	b2db      	uxtb	r3, r3
}
 8000950:	4618      	mov	r0, r3
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefh10PinMeasure>:
Motor::Motor(PinControl &INA, PinControl &INB,
			 TIM_HandleTypeDef* htimPWM, uint8_t CCRx,
			 TIM_HandleTypeDef* htimENC, PinMeasure &END)
  : pin_INA(INA), pin_INB(INB), htimPWM(htimPWM), CCRx(CCRx), htimENC(htimENC), pin_END(END) {}
*/
Motor::Motor(PinControl INA, PinControl INB,
 8000958:	b084      	sub	sp, #16
 800095a:	b490      	push	{r4, r7}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
 8000962:	f107 0014 	add.w	r0, r7, #20
 8000966:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			 TIM_HandleTypeDef* htimPWM, uint8_t CCRx,
			 PinMeasure END)
  : pin_INA(INA), pin_INB(INB), htimPWM(htimPWM), CCRx(CCRx), htimENC(NULL), pin_END(END) {}
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	461c      	mov	r4, r3
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000974:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f103 0410 	add.w	r4, r3, #16
 800097e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000982:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000984:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800098c:	621a      	str	r2, [r3, #32]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	629a      	str	r2, [r3, #40]	; 0x28
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80009a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80009a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4618      	mov	r0, r3
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bc90      	pop	{r4, r7}
 80009c0:	b004      	add	sp, #16
 80009c2:	4770      	bx	lr

080009c4 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>:

Motor::Motor(PinControl INA, PinControl INB,
 80009c4:	b084      	sub	sp, #16
 80009c6:	b490      	push	{r4, r7}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
 80009ce:	f107 0014 	add.w	r0, r7, #20
 80009d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			 TIM_HandleTypeDef* htimPWM, uint8_t CCRx,
			 TIM_HandleTypeDef* htimENC, PinMeasure END)
  : pin_INA(INA), pin_INB(INB), htimPWM(htimPWM), CCRx(CCRx), htimENC(htimENC), pin_END(END) {}
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	461c      	mov	r4, r3
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f103 0410 	add.w	r4, r3, #16
 80009ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009f8:	621a      	str	r2, [r3, #32]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000a00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000a08:	629a      	str	r2, [r3, #40]	; 0x28
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8000a10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4618      	mov	r0, r3
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bc90      	pop	{r4, r7}
 8000a2c:	b004      	add	sp, #16
 8000a2e:	4770      	bx	lr

08000a30 <_ZN5MotorD1Ev>:


Motor::~Motor() {}
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <_ZN5Motor10getEncoderEv>:

/*void Motor::invertEncoder(bool invert){
  this->encoder_invert = invert;
}*/

int16_t Motor::getEncoder(){
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
  if (htimENC != NULL) {
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d005      	beq.n	8000a62 <_ZN5Motor10getEncoderEv+0x1c>
	  return htimENC->Instance->CNT;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a5e:	b21b      	sxth	r3, r3
 8000a60:	e000      	b.n	8000a64 <_ZN5Motor10getEncoderEv+0x1e>
  } else {
	  return 0;
 8000a62:	2300      	movs	r3, #0
  }
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <_ZN5Motor10driveMotorEs>:

void Motor::invertMotor(bool invert){
  this->motor_invert = invert;
}
void Motor::driveMotor(int16_t spwm){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	807b      	strh	r3, [r7, #2]
  OperatingMode mode = OperatingMode::BRAKE_GND;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
  spwm = std::min(std::max(spwm, (int16_t)-255), (int16_t)255);
 8000a80:	f64f 7301 	movw	r3, #65281	; 0xff01
 8000a84:	813b      	strh	r3, [r7, #8]
 8000a86:	f107 0208 	add.w	r2, r7, #8
 8000a8a:	1cbb      	adds	r3, r7, #2
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 fe60 	bl	8001754 <_ZSt3maxIsERKT_S2_S2_>
 8000a94:	4602      	mov	r2, r0
 8000a96:	23ff      	movs	r3, #255	; 0xff
 8000a98:	817b      	strh	r3, [r7, #10]
 8000a9a:	f107 030a 	add.w	r3, r7, #10
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4610      	mov	r0, r2
 8000aa2:	f000 fe6d 	bl	8001780 <_ZSt3minIsERKT_S2_S2_>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aac:	807b      	strh	r3, [r7, #2]

  if(spwm > 0) {
 8000aae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	dd09      	ble.n	8000aca <_ZN5Motor10driveMotorEs+0x5a>
    mode = motor_invert ? OperatingMode::SPIN_CCW : OperatingMode::SPIN_CW;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <_ZN5Motor10driveMotorEs+0x54>
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e000      	b.n	8000ac6 <_ZN5Motor10driveMotorEs+0x56>
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	e00f      	b.n	8000aea <_ZN5Motor10driveMotorEs+0x7a>
  } else if (spwm < 0) {
 8000aca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	da09      	bge.n	8000ae6 <_ZN5Motor10driveMotorEs+0x76>
    mode = motor_invert ? OperatingMode::SPIN_CW : OperatingMode::SPIN_CCW;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <_ZN5Motor10driveMotorEs+0x70>
 8000adc:	2302      	movs	r3, #2
 8000ade:	e000      	b.n	8000ae2 <_ZN5Motor10driveMotorEs+0x72>
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	e001      	b.n	8000aea <_ZN5Motor10driveMotorEs+0x7a>
  } else {
    mode = OperatingMode::BRAKE_GND;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
  }

  switch(mode){
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	2b03      	cmp	r3, #3
 8000aee:	d83b      	bhi.n	8000b68 <_ZN5Motor10driveMotorEs+0xf8>
 8000af0:	a201      	add	r2, pc, #4	; (adr r2, 8000af8 <_ZN5Motor10driveMotorEs+0x88>)
 8000af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af6:	bf00      	nop
 8000af8:	08000b09 	.word	0x08000b09
 8000afc:	08000b21 	.word	0x08000b21
 8000b00:	08000b39 	.word	0x08000b39
 8000b04:	08000b51 	.word	0x08000b51
    case OperatingMode::BRAKE_GND:
      pin_INA.set(false);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff fec5 	bl	800089c <_ZN10PinControl3setEb>
      pin_INB.set(false);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	3310      	adds	r3, #16
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff febf 	bl	800089c <_ZN10PinControl3setEb>
      break;
 8000b1e:	e023      	b.n	8000b68 <_ZN5Motor10driveMotorEs+0xf8>
    case OperatingMode::SPIN_CCW:
      pin_INA.set(false);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff feb9 	bl	800089c <_ZN10PinControl3setEb>
      pin_INB.set(true);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3310      	adds	r3, #16
 8000b2e:	2101      	movs	r1, #1
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff feb3 	bl	800089c <_ZN10PinControl3setEb>
      break;
 8000b36:	e017      	b.n	8000b68 <_ZN5Motor10driveMotorEs+0xf8>
    case OperatingMode::SPIN_CW:
      pin_INA.set(true);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fead 	bl	800089c <_ZN10PinControl3setEb>
      pin_INB.set(false);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	3310      	adds	r3, #16
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fea7 	bl	800089c <_ZN10PinControl3setEb>
      break;
 8000b4e:	e00b      	b.n	8000b68 <_ZN5Motor10driveMotorEs+0xf8>
    case OperatingMode::BRAKE_VCC:
      pin_INA.set(true);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2101      	movs	r1, #1
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fea1 	bl	800089c <_ZN10PinControl3setEb>
      pin_INB.set(true);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	3310      	adds	r3, #16
 8000b5e:	2101      	movs	r1, #1
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fe9b 	bl	800089c <_ZN10PinControl3setEb>
      break;
 8000b66:	bf00      	nop
  }
  switch(CCRx) {
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	2b05      	cmp	r3, #5
 8000b72:	d851      	bhi.n	8000c18 <_ZN5Motor10driveMotorEs+0x1a8>
 8000b74:	a201      	add	r2, pc, #4	; (adr r2, 8000b7c <_ZN5Motor10driveMotorEs+0x10c>)
 8000b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7a:	bf00      	nop
 8000b7c:	08000b95 	.word	0x08000b95
 8000b80:	08000bab 	.word	0x08000bab
 8000b84:	08000bc1 	.word	0x08000bc1
 8000b88:	08000bd7 	.word	0x08000bd7
 8000b8c:	08000bed 	.word	0x08000bed
 8000b90:	08000c03 	.word	0x08000c03
    case 1:
      htimPWM->Instance->CCR1 = (uint16_t) abs(spwm);
 8000b94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	bfb8      	it	lt
 8000b9c:	425b      	neglt	r3, r3
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6a1b      	ldr	r3, [r3, #32]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	635a      	str	r2, [r3, #52]	; 0x34
      break;
 8000ba8:	e036      	b.n	8000c18 <_ZN5Motor10driveMotorEs+0x1a8>
    case 2:
      htimPWM->Instance->CCR2 = (uint16_t) abs(spwm);
 8000baa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6a1b      	ldr	r3, [r3, #32]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	639a      	str	r2, [r3, #56]	; 0x38
      break;
 8000bbe:	e02b      	b.n	8000c18 <_ZN5Motor10driveMotorEs+0x1a8>
    case 3:
      htimPWM->Instance->CCR3 = (uint16_t) abs(spwm);
 8000bc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	bfb8      	it	lt
 8000bc8:	425b      	neglt	r3, r3
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6a1b      	ldr	r3, [r3, #32]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8000bd4:	e020      	b.n	8000c18 <_ZN5Motor10driveMotorEs+0x1a8>
    case 4:
      htimPWM->Instance->CCR4 = (uint16_t) abs(spwm);
 8000bd6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	bfb8      	it	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6a1b      	ldr	r3, [r3, #32]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8000bea:	e015      	b.n	8000c18 <_ZN5Motor10driveMotorEs+0x1a8>
    case 5:
      htimPWM->Instance->CCR5 = (uint16_t) abs(spwm);
 8000bec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	bfb8      	it	lt
 8000bf4:	425b      	neglt	r3, r3
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6a1b      	ldr	r3, [r3, #32]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	659a      	str	r2, [r3, #88]	; 0x58
      break;
 8000c00:	e00a      	b.n	8000c18 <_ZN5Motor10driveMotorEs+0x1a8>
    case 6:
      htimPWM->Instance->CCR6 = (uint16_t) abs(spwm);
 8000c02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	bfb8      	it	lt
 8000c0a:	425b      	neglt	r3, r3
 8000c0c:	b29a      	uxth	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6a1b      	ldr	r3, [r3, #32]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8000c16:	bf00      	nop

  }
}
 8000c18:	bf00      	nop
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <_ZN5Motor11isInEndStopEv>:

bool Motor::isInEndStop(){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  return pin_END.state();
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	332c      	adds	r3, #44	; 0x2c
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fe7d 	bl	800092c <_ZN10PinMeasure5stateEv>
 8000c32:	4603      	mov	r3, r0
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <_ZN5RobotC1E10PinControlS0_mhPP5MotorPf>:
// Robot
// ==================================================

/*Robot::Robot(PinControl &enable, PinControl &toggle, unsigned long ts_ms, uint8_t size, Motor **motors, float *encs_div)
  : motors(motors), error_div(encs_div), pin_enable(enable), pin_toggle(toggle) {*/
Robot::Robot(PinControl enable, PinControl toggle, unsigned long ts_ms, uint8_t size, Motor **motors, float *encs_div)
 8000c3c:	b084      	sub	sp, #16
 8000c3e:	b590      	push	{r4, r7, lr}
 8000c40:	b085      	sub	sp, #20
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000c4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  : pin_enable(enable), pin_toggle(toggle), motors(motors), error_div(encs_div) {
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	1d1c      	adds	r4, r3, #4
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f103 0414 	add.w	r4, r3, #20
 8000c62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c70:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000c76:	645a      	str	r2, [r3, #68]	; 0x44
  this->ts = ts_ms;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c7c:	625a      	str	r2, [r3, #36]	; 0x24
  //this->motors = 		(Motor**)	malloc(size * sizeof(Motor*));
  this->pids = 			(PID*)		malloc(size * sizeof(PID));
 8000c7e:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8000c82:	4613      	mov	r3, r2
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	1a9b      	subs	r3, r3, r2
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f01b f9da 	bl	801c044 <malloc>
 8000c90:	4603      	mov	r3, r0
 8000c92:	461a      	mov	r2, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	631a      	str	r2, [r3, #48]	; 0x30
  this->switches = 		(bool*) 	malloc(size * sizeof(bool));
 8000c98:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f01b f9d1 	bl	801c044 <malloc>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	639a      	str	r2, [r3, #56]	; 0x38
  this->motors_pwm = 	(int16_t*) 	malloc(size * sizeof(int16_t));
 8000caa:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f01b f9c7 	bl	801c044 <malloc>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	461a      	mov	r2, r3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	63da      	str	r2, [r3, #60]	; 0x3c
  this->encoders =		(int16_t*)	malloc(size * sizeof(int16_t));
 8000cbe:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f01b f9bd 	bl	801c044 <malloc>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	461a      	mov	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	641a      	str	r2, [r3, #64]	; 0x40
  //this->error_div = 	(float*) 	malloc(size * sizeof(float));

  this->size = size;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8000cd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  this->status = Status::Idle;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  this->lastEvent = getCurrentTime();
 8000ce4:	f002 ff74 	bl	8003bd0 <_Z14getCurrentTimev>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	601a      	str	r2, [r3, #0]

  for(int i = 0; i < size; i++){
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	e01e      	b.n	8000d32 <_ZN5RobotC1E10PinControlS0_mhPP5MotorPf+0xf6>
    this->switches[i] = false;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
    this->motors_pwm[i] = 0;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	4413      	add	r3, r2
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	801a      	strh	r2, [r3, #0]
    this->encoders[i] = 0;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	4413      	add	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	801a      	strh	r2, [r3, #0]
    this->error_div[i] = 0.0;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	f04f 0200 	mov.w	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < size; i++){
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	dbdb      	blt.n	8000cf4 <_ZN5RobotC1E10PinControlS0_mhPP5MotorPf+0xb8>
        setMotor(i, motors[i]);
      }
    }
  }*/

  lastEvent = getCurrentTime();
 8000d3c:	f002 ff48 	bl	8003bd0 <_Z14getCurrentTimev>
 8000d40:	4602      	mov	r2, r0
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	601a      	str	r2, [r3, #0]
  update();
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f000 f9fa 	bl	8001140 <_ZN5Robot6updateEv>
}
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000d58:	b004      	add	sp, #16
 8000d5a:	4770      	bx	lr

08000d5c <_ZN5RobotD1Ev>:
  : Robot(enable, toggle,ts_ms, size, motors, NULL) {}

Robot::Robot(PinControl enable, PinControl toggle, unsigned long ts_ms, uint8_t size)
  : Robot(enable, toggle,ts_ms, size, NULL, NULL) {}

Robot::~Robot() {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  free(this->motors);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f01b f973 	bl	801c054 <free>
  free(this->pids);
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4618      	mov	r0, r3
 8000d74:	f01b f96e 	bl	801c054 <free>
  free(this->switches);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f01b f969 	bl	801c054 <free>
  free(this->motors_pwm);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d86:	4618      	mov	r0, r3
 8000d88:	f01b f964 	bl	801c054 <free>
  free(this->encoders);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	4618      	mov	r0, r3
 8000d92:	f01b f95f 	bl	801c054 <free>
  free(this->error_div);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f01b f95a 	bl	801c054 <free>
}
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <_ZN5Robot7getSizeEv>:

int Robot::getSize(){
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
  return this->size;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <_ZN5Robot9setStatusENS_6StatusEb>:

Robot::Status Robot::getStatus(){
  return this->status;
}

void Robot::setStatus(Status status, bool reset = false){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	70fb      	strb	r3, [r7, #3]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	70bb      	strb	r3, [r7, #2]
  if(this->status != status || reset){
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000dda:	78fa      	ldrb	r2, [r7, #3]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d102      	bne.n	8000de6 <_ZN5Robot9setStatusENS_6StatusEb+0x22>
 8000de0:	78bb      	ldrb	r3, [r7, #2]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d006      	beq.n	8000df4 <_ZN5Robot9setStatusENS_6StatusEb+0x30>
    //resetPWMs(); riga non necessaria?
    resetPIDs();
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f000 f843 	bl	8000e72 <_ZN5Robot9resetPIDsEv>
    this->status = status;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	78fa      	ldrb	r2, [r7, #3]
 8000df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <_ZN5Robot8getMotorEh>:

Motor * Robot::getMotor(uint8_t index){
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	70fb      	strb	r3, [r7, #3]
  return this->motors[index];
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4413      	add	r3, r2
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_ZN5Robot17setEncoderDividerEhf>:
void Robot::setMotor(uint8_t index, Motor * motor, float enc_div){
  this->motors[index] = motor;
  this->error_div[index] = enc_div;
}

void Robot::setEncoderDivider(uint8_t index, float enc_div){
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e2e:	72fb      	strb	r3, [r7, #11]
  this->error_div[index] = enc_div;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e34:	7afb      	ldrb	r3, [r7, #11]
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	601a      	str	r2, [r3, #0]
}
 8000e3e:	bf00      	nop
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <_ZN5Robot6getPIDEh>:

PID * Robot::getPID(uint8_t index){
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	460b      	mov	r3, r1
 8000e54:	70fb      	strb	r3, [r7, #3]
  return &(this->pids[index]);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e5a:	78fa      	ldrb	r2, [r7, #3]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	00db      	lsls	r3, r3, #3
 8000e60:	1a9b      	subs	r3, r3, r2
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	440b      	add	r3, r1
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <_ZN5Robot9resetPIDsEv>:
  for(int i = 0; i < size; i++){
    getPID(i)->setup(kp, ki, kd);
  }
}

void Robot::resetPIDs(){
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b084      	sub	sp, #16
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < size; i++){
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	e00c      	b.n	8000e9a <_ZN5Robot9resetPIDsEv+0x28>
    getPID(i)->reset();
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	4619      	mov	r1, r3
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff ffdf 	bl	8000e4a <_ZN5Robot6getPIDEh>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 fd88 	bl	80019a4 <_ZN3PID5resetEv>
  for(int i = 0; i < size; i++){
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	3301      	adds	r3, #1
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	dbeb      	blt.n	8000e80 <_ZN5Robot9resetPIDsEv+0xe>
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <_ZN5Robot10getEncoderEh>:
  for(int i = 0; i < size; i++){
    setEncoder(i, 0);
  }
}*/

int16_t Robot::getEncoder(uint8_t index) {
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	460b      	mov	r3, r1
 8000ebc:	70fb      	strb	r3, [r7, #3]
	return getMotor(index)->getEncoder();
 8000ebe:	78fb      	ldrb	r3, [r7, #3]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff ff9a 	bl	8000dfc <_ZN5Robot8getMotorEh>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fdbb 	bl	8000a46 <_ZN5Motor10getEncoderEv>
 8000ed0:	4603      	mov	r3, r0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <_ZN5Robot7setPWMsEPKs>:

void Robot::setPWMs(const int16_t *pwms){
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b084      	sub	sp, #16
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	6039      	str	r1, [r7, #0]
  for(int i = 0; i < size; i++){
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	e00e      	b.n	8000f08 <_ZN5Robot7setPWMsEPKs+0x2e>
    setPWM(i, pwms[i]);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	b2d9      	uxtb	r1, r3
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	683a      	ldr	r2, [r7, #0]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000efa:	461a      	mov	r2, r3
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f000 f80f 	bl	8000f20 <_ZN5Robot6setPWMEhs>
  for(int i = 0; i < size; i++){
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	3301      	adds	r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f0e:	461a      	mov	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4293      	cmp	r3, r2
 8000f14:	dbe9      	blt.n	8000eea <_ZN5Robot7setPWMsEPKs+0x10>
  }
}
 8000f16:	bf00      	nop
 8000f18:	bf00      	nop
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <_ZN5Robot6setPWMEhs>:

void Robot::setPWM(uint8_t index, const int16_t pwm){
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	70fb      	strb	r3, [r7, #3]
 8000f2c:	4613      	mov	r3, r2
 8000f2e:	803b      	strh	r3, [r7, #0]
  motors_pwm[index] = pwm;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f34:	78fb      	ldrb	r3, [r7, #3]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	4413      	add	r3, r2
 8000f3a:	883a      	ldrh	r2, [r7, #0]
 8000f3c:	801a      	strh	r2, [r3, #0]

}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <_ZN5Robot9resetPWMsEv>:

void Robot::resetPWMs(){
 8000f4a:	b480      	push	{r7}
 8000f4c:	b085      	sub	sp, #20
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < size; i++){
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	e009      	b.n	8000f6c <_ZN5Robot9resetPWMsEv+0x22>
    motors_pwm[i] = 0;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	4413      	add	r3, r2
 8000f62:	2200      	movs	r2, #0
 8000f64:	801a      	strh	r2, [r3, #0]
  for(int i = 0; i < size; i++){
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f72:	461a      	mov	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4293      	cmp	r3, r2
 8000f78:	dbee      	blt.n	8000f58 <_ZN5Robot9resetPWMsEv+0xe>
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request>:
void Robot::disableMotors(){
  setStatus(Status::Idle, true);
  pin_enable.set(false);
}

void Robot::rcvCtrl(racs_services__srv__Control_Request* request){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]

  if(request->command > 2) {
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	785b      	ldrb	r3, [r3, #1]
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d905      	bls.n	8000fa6 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x1e>
    setStatus(Status::Idle, true);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ff10 	bl	8000dc4 <_ZN5Robot9setStatusENS_6StatusEb>
    return;
 8000fa4:	e04a      	b.n	800103c <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xb4>
  }

  switch(request->command){
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	785b      	ldrb	r3, [r3, #1]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d002      	beq.n	8000fb4 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x2c>
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d01c      	beq.n	8000fec <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x64>
 8000fb2:	e03c      	b.n	800102e <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xa6>
    case (unsigned char) Command::Idle:
      for(int i = 0; i < size; i++) {
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	e010      	b.n	8000fdc <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x54>
        motors_pwm[i] = 0;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	4413      	add	r3, r2
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	801a      	strh	r2, [r3, #0]
        encoders[i] = 0;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	4413      	add	r3, r2
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	801a      	strh	r2, [r3, #0]
      for(int i = 0; i < size; i++) {
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	dbe7      	blt.n	8000fba <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x32>
      }
      break;
 8000fea:	e020      	b.n	800102e <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0xa6>

    case (unsigned char) Command::PID:
      for(int i = 0; i < size; i++) {
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
 8000ff0:	e015      	b.n	800101e <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x96>
        motors_pwm[i] = 0;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	4413      	add	r3, r2
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	801a      	strh	r2, [r3, #0]
        encoders[i] = request->encoders[i];
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	441a      	add	r2, r3
 800100a:	6839      	ldr	r1, [r7, #0]
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	440b      	add	r3, r1
 8001012:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001016:	8013      	strh	r3, [r2, #0]
      for(int i = 0; i < size; i++) {
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	3301      	adds	r3, #1
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001024:	461a      	mov	r2, r3
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	4293      	cmp	r3, r2
 800102a:	dbe2      	blt.n	8000ff2 <_ZN5Robot7rcvCtrlEP35racs_services__srv__Control_Request+0x6a>
      }
      break;
 800102c:	bf00      	nop
  }

  setStatus((Status) request->command);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	785b      	ldrb	r3, [r3, #1]
 8001032:	2200      	movs	r2, #0
 8001034:	4619      	mov	r1, r3
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff fec4 	bl	8000dc4 <_ZN5Robot9setStatusENS_6StatusEb>
}
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <_ZN5Robot7sndCtrlEP36racs_services__srv__Control_Response>:

void Robot::sndCtrl(racs_services__srv__Control_Response* response){
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
	response->response = (uint8_t) status;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	701a      	strb	r2, [r3, #0]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request>:

void Robot::rcvSetup(racs_services__srv__Setup_Request* request){
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]

  setEncoderDivider(request->motor_index, request->eed);
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	781a      	ldrb	r2, [r3, #0]
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	edd3 7a01 	vldr	s15, [r3, #4]
 8001078:	eeb0 0a67 	vmov.f32	s0, s15
 800107c:	4611      	mov	r1, r2
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff fece 	bl	8000e20 <_ZN5Robot17setEncoderDividerEhf>
  getPID(request->motor_index)->reset();
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff fedd 	bl	8000e4a <_ZN5Robot6getPIDEh>
 8001090:	4603      	mov	r3, r0
 8001092:	4618      	mov	r0, r3
 8001094:	f000 fc86 	bl	80019a4 <_ZN3PID5resetEv>
  getPID(request->motor_index)->init((float) ts/1000.0, request->tau, request->sat, true);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	4619      	mov	r1, r3
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff fed3 	bl	8000e4a <_ZN5Robot6getPIDEh>
 80010a4:	4602      	mov	r2, r0
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b2:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001120 <_ZN5Robot8rcvSetupEP33racs_services__srv__Setup_Request+0xbc>
 80010b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	edd3 7a05 	vldr	s15, [r3, #20]
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	edd3 6a06 	vldr	s13, [r3, #24]
 80010c6:	2101      	movs	r1, #1
 80010c8:	eeb0 1a66 	vmov.f32	s2, s13
 80010cc:	eef0 0a67 	vmov.f32	s1, s15
 80010d0:	eeb0 0a47 	vmov.f32	s0, s14
 80010d4:	4610      	mov	r0, r2
 80010d6:	f000 fbdd 	bl	8001894 <_ZN3PID4initEfffb>
  getPID(request->motor_index)->setup(request->p, request->i, request->d);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	4619      	mov	r1, r3
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff feb2 	bl	8000e4a <_ZN5Robot6getPIDEh>
 80010e6:	4602      	mov	r2, r0
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	ed93 7a03 	vldr	s14, [r3, #12]
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	edd3 6a04 	vldr	s13, [r3, #16]
 80010fa:	eeb0 1a66 	vmov.f32	s2, s13
 80010fe:	eef0 0a47 	vmov.f32	s1, s14
 8001102:	eeb0 0a67 	vmov.f32	s0, s15
 8001106:	4610      	mov	r0, r2
 8001108:	f000 fc32 	bl	8001970 <_ZN3PID5setupEfff>

  setStatus(Status::Idle, true);
 800110c:	2201      	movs	r2, #1
 800110e:	2100      	movs	r1, #0
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff fe57 	bl	8000dc4 <_ZN5Robot9setStatusENS_6StatusEb>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	447a0000 	.word	0x447a0000

08001124 <_ZN5Robot8sndSetupEP34racs_services__srv__Setup_Response>:

void Robot::sndSetup(racs_services__srv__Setup_Response* response){
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  response->response = (uint8_t) Status::Setup;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	2203      	movs	r2, #3
 8001132:	701a      	strb	r2, [r3, #0]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <_ZN5Robot6updateEv>:

void Robot::update(){
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b089      	sub	sp, #36	; 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  switch(status){
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800114e:	2b02      	cmp	r3, #2
 8001150:	d00c      	beq.n	800116c <_ZN5Robot6updateEv+0x2c>
 8001152:	2b02      	cmp	r3, #2
 8001154:	f200 8088 	bhi.w	8001268 <_ZN5Robot6updateEv+0x128>
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <_ZN5Robot6updateEv+0x24>
 800115c:	2b01      	cmp	r3, #1
 800115e:	f000 808e 	beq.w	800127e <_ZN5Robot6updateEv+0x13e>
 8001162:	e081      	b.n	8001268 <_ZN5Robot6updateEv+0x128>
    case Status::Idle:
      resetPWMs();
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff fef0 	bl	8000f4a <_ZN5Robot9resetPWMsEv>
      break;
 800116a:	e089      	b.n	8001280 <_ZN5Robot6updateEv+0x140>

    case Status::DAQ:
      break;

    case Status::PID:
      for(int i = 0; i < size; i++){
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
 8001170:	e072      	b.n	8001258 <_ZN5Robot6updateEv+0x118>
        float err = (float) (getMotor(i)->getEncoder() - encoders[i]) / ((error_div[i] == 0) ? 1.0 : error_div[i]);
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	4619      	mov	r1, r3
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff fe3f 	bl	8000dfc <_ZN5Robot8getMotorEh>
 800117e:	4603      	mov	r3, r0
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fc60 	bl	8000a46 <_ZN5Motor10getEncoderEv>
 8001186:	4603      	mov	r3, r0
 8001188:	4619      	mov	r1, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	4413      	add	r3, r2
 8001194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001198:	1acb      	subs	r3, r1, r3
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a2:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	edd3 7a00 	vldr	s15, [r3]
 80011b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011bc:	d009      	beq.n	80011d2 <_ZN5Robot6updateEv+0x92>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	edd3 7a00 	vldr	s15, [r3]
 80011cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011d0:	e001      	b.n	80011d6 <_ZN5Robot6updateEv+0x96>
 80011d2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80011d6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80011da:	eef7 7bc6 	vcvt.f32.f64	s15, d6
 80011de:	edc7 7a05 	vstr	s15, [r7, #20]
    	motors_pwm[i] = (int16_t) std::min(std::max((float) 0, getPID(i)->evolve(err)), (float) MAX_PWM) - HALF_PWM;
 80011e2:	f04f 0300 	mov.w	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	4619      	mov	r1, r3
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff fe2b 	bl	8000e4a <_ZN5Robot6getPIDEh>
 80011f4:	4603      	mov	r3, r0
 80011f6:	ed97 0a05 	vldr	s0, [r7, #20]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 fcbf 	bl	8001b7e <_ZN3PID6evolveEf>
 8001200:	eef0 7a40 	vmov.f32	s15, s0
 8001204:	edc7 7a03 	vstr	s15, [r7, #12]
 8001208:	f107 020c 	add.w	r2, r7, #12
 800120c:	f107 0308 	add.w	r3, r7, #8
 8001210:	4611      	mov	r1, r2
 8001212:	4618      	mov	r0, r3
 8001214:	f000 faca 	bl	80017ac <_ZSt3maxIfERKT_S2_S2_>
 8001218:	4602      	mov	r2, r0
 800121a:	f04f 438f 	mov.w	r3, #1199570944	; 0x47800000
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	4619      	mov	r1, r3
 8001226:	4610      	mov	r0, r2
 8001228:	f000 fad9 	bl	80017de <_ZSt3minIfERKT_S2_S2_>
 800122c:	4603      	mov	r3, r0
 800122e:	edd3 7a00 	vldr	s15, [r3]
 8001232:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001236:	ee17 3a90 	vmov	r3, s15
 800123a:	b21b      	sxth	r3, r3
 800123c:	b29b      	uxth	r3, r3
 800123e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8001242:	b299      	uxth	r1, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4413      	add	r3, r2
 800124e:	b20a      	sxth	r2, r1
 8001250:	801a      	strh	r2, [r3, #0]
      for(int i = 0; i < size; i++){
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3301      	adds	r3, #1
 8001256:	61fb      	str	r3, [r7, #28]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800125e:	461a      	mov	r2, r3
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	4293      	cmp	r3, r2
 8001264:	db85      	blt.n	8001172 <_ZN5Robot6updateEv+0x32>
      }
      break;
 8001266:	e00b      	b.n	8001280 <_ZN5Robot6updateEv+0x140>

    default:
      resetPWMs();
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff fe6e 	bl	8000f4a <_ZN5Robot9resetPWMsEv>
      resetPIDs();
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff fdff 	bl	8000e72 <_ZN5Robot9resetPIDsEv>
      status = Status::Idle;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      break;
 800127c:	e000      	b.n	8001280 <_ZN5Robot6updateEv+0x140>
      break;
 800127e:	bf00      	nop
  }

  for(int i = 0; i < size; i++){
 8001280:	2300      	movs	r3, #0
 8001282:	61bb      	str	r3, [r7, #24]
 8001284:	e012      	b.n	80012ac <_ZN5Robot6updateEv+0x16c>
    switches[i] = getMotor(i)->isInEndStop();
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	4619      	mov	r1, r3
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff fdb5 	bl	8000dfc <_ZN5Robot8getMotorEh>
 8001292:	4601      	mov	r1, r0
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	18d4      	adds	r4, r2, r3
 800129c:	4608      	mov	r0, r1
 800129e:	f7ff fcbf 	bl	8000c20 <_ZN5Motor11isInEndStopEv>
 80012a2:	4603      	mov	r3, r0
 80012a4:	7023      	strb	r3, [r4, #0]
  for(int i = 0; i < size; i++){
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	3301      	adds	r3, #1
 80012aa:	61bb      	str	r3, [r7, #24]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80012b2:	461a      	mov	r2, r3
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	4293      	cmp	r3, r2
 80012b8:	dbe5      	blt.n	8001286 <_ZN5Robot6updateEv+0x146>
  }
}
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
 80012be:	3724      	adds	r7, #36	; 0x24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd90      	pop	{r4, r7, pc}

080012c4 <_ZN5Robot7actuateEv>:

void Robot::actuate(){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  for(int i = 0; i < size; i++){
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	e012      	b.n	80012f8 <_ZN5Robot7actuateEv+0x34>
    getMotor(i)->driveMotor(motors_pwm[i]);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	4619      	mov	r1, r3
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff fd8f 	bl	8000dfc <_ZN5Robot8getMotorEh>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	4413      	add	r3, r2
 80012e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ec:	4619      	mov	r1, r3
 80012ee:	f7ff fbbf 	bl	8000a70 <_ZN5Motor10driveMotorEs>
  for(int i = 0; i < size; i++){
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	3301      	adds	r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80012fe:	461a      	mov	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4293      	cmp	r3, r2
 8001304:	dbe5      	blt.n	80012d2 <_ZN5Robot7actuateEv+0xe>
  }
}
 8001306:	bf00      	nop
 8001308:	bf00      	nop
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <_ZN5Robot5cycleEv>:
      }
    }
  }
}*/

void Robot::cycle(){
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
      //if (getElapsedTime(lastEvent) >= time_ms){
    	//lastEvent = getCurrentTime();
        pin_toggle.set(true);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3314      	adds	r3, #20
 800131c:	2101      	movs	r1, #1
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fabc 	bl	800089c <_ZN10PinControl3setEb>
        update();
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff0b 	bl	8001140 <_ZN5Robot6updateEv>
        actuate();
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ffca 	bl	80012c4 <_ZN5Robot7actuateEv>
        pin_toggle.set(false);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3314      	adds	r3, #20
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fab0 	bl	800089c <_ZN10PinControl3setEb>
      //}
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <_Z12create_robotv>:

Robot create_robot() {
 8001344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001346:	f5ad 7d47 	sub.w	sp, sp, #796	; 0x31c
 800134a:	af0c      	add	r7, sp, #48	; 0x30
 800134c:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8001350:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8001354:	6018      	str	r0, [r3, #0]

	PinControl mot1_ina = PinControl(MOTOR1_INA_GPIO_Port, MOTOR1_INA_Pin);
 8001356:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800135a:	2201      	movs	r2, #1
 800135c:	49cd      	ldr	r1, [pc, #820]	; (8001694 <_Z12create_robotv+0x350>)
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fa6c 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot1_inb = PinControl(MOTOR1_INB_GPIO_Port, MOTOR1_INB_Pin);
 8001364:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 8001368:	2202      	movs	r2, #2
 800136a:	49ca      	ldr	r1, [pc, #808]	; (8001694 <_Z12create_robotv+0x350>)
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fa65 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot1_end = PinMeasure(MOTOR1_END_GPIO_Port, MOTOR1_END_Pin);
 8001372:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800137a:	49c7      	ldr	r1, [pc, #796]	; (8001698 <_Z12create_robotv+0x354>)
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff faa5 	bl	80008cc <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot2_ina = PinControl(MOTOR2_INA_GPIO_Port, MOTOR2_INA_Pin);
 8001382:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8001386:	2204      	movs	r2, #4
 8001388:	49c2      	ldr	r1, [pc, #776]	; (8001694 <_Z12create_robotv+0x350>)
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fa56 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot2_inb = PinControl(MOTOR2_INB_GPIO_Port, MOTOR2_INB_Pin);
 8001390:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8001394:	2208      	movs	r2, #8
 8001396:	49bf      	ldr	r1, [pc, #764]	; (8001694 <_Z12create_robotv+0x350>)
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fa4f 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot2_end = PinMeasure(MOTOR2_END_GPIO_Port, MOTOR2_END_Pin);
 800139e:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80013a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013a6:	49bc      	ldr	r1, [pc, #752]	; (8001698 <_Z12create_robotv+0x354>)
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fa8f 	bl	80008cc <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot3_ina = PinControl(MOTOR3_INA_GPIO_Port, MOTOR3_INA_Pin);
 80013ae:	f507 731c 	add.w	r3, r7, #624	; 0x270
 80013b2:	2210      	movs	r2, #16
 80013b4:	49b7      	ldr	r1, [pc, #732]	; (8001694 <_Z12create_robotv+0x350>)
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fa40 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot3_inb = PinControl(MOTOR3_INB_GPIO_Port, MOTOR3_INB_Pin);
 80013bc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80013c0:	2220      	movs	r2, #32
 80013c2:	49b4      	ldr	r1, [pc, #720]	; (8001694 <_Z12create_robotv+0x350>)
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fa39 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot3_end = PinMeasure(MOTOR3_END_GPIO_Port, MOTOR3_END_Pin);
 80013ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80013ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013d2:	49b1      	ldr	r1, [pc, #708]	; (8001698 <_Z12create_robotv+0x354>)
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fa79 	bl	80008cc <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot4_ina = PinControl(MOTOR4_INA_GPIO_Port, MOTOR4_INA_Pin);
 80013da:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80013de:	2240      	movs	r2, #64	; 0x40
 80013e0:	49ac      	ldr	r1, [pc, #688]	; (8001694 <_Z12create_robotv+0x350>)
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fa2a 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot4_inb = PinControl(MOTOR4_INB_GPIO_Port, MOTOR4_INB_Pin);
 80013e8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80013ec:	2280      	movs	r2, #128	; 0x80
 80013ee:	49a9      	ldr	r1, [pc, #676]	; (8001694 <_Z12create_robotv+0x350>)
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fa23 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot4_end = PinMeasure(MOTOR4_END_GPIO_Port, MOTOR4_END_Pin);
 80013f6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80013fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013fe:	49a6      	ldr	r1, [pc, #664]	; (8001698 <_Z12create_robotv+0x354>)
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fa63 	bl	80008cc <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot5_ina = PinControl(MOTOR5_INA_GPIO_Port, MOTOR5_INA_Pin);
 8001406:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800140a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800140e:	49a1      	ldr	r1, [pc, #644]	; (8001694 <_Z12create_robotv+0x350>)
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fa13 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot5_inb = PinControl(MOTOR5_INB_GPIO_Port, MOTOR5_INB_Pin);
 8001416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800141a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800141e:	499d      	ldr	r1, [pc, #628]	; (8001694 <_Z12create_robotv+0x350>)
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fa0b 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot5_end = PinMeasure(MOTOR5_END_GPIO_Port, MOTOR5_END_Pin);
 8001426:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800142a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800142e:	499a      	ldr	r1, [pc, #616]	; (8001698 <_Z12create_robotv+0x354>)
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fa4b 	bl	80008cc <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl mot6_ina = PinControl(MOTOR6_INA_GPIO_Port, MOTOR6_INA_Pin);
 8001436:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800143a:	2204      	movs	r2, #4
 800143c:	4996      	ldr	r1, [pc, #600]	; (8001698 <_Z12create_robotv+0x354>)
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f9fc 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl mot6_inb = PinControl(MOTOR6_INB_GPIO_Port, MOTOR6_INB_Pin);
 8001444:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8001448:	2208      	movs	r2, #8
 800144a:	4993      	ldr	r1, [pc, #588]	; (8001698 <_Z12create_robotv+0x354>)
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f9f5 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinMeasure mot6_end = PinMeasure(MOTOR6_END_GPIO_Port, MOTOR6_END_Pin);
 8001452:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001456:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800145a:	498f      	ldr	r1, [pc, #572]	; (8001698 <_Z12create_robotv+0x354>)
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fa35 	bl	80008cc <_ZN10PinMeasureC1EP12GPIO_TypeDeft>

	PinControl enable = PinControl(MOTORS_EN_GPIO_Port, MOTORS_EN_Pin);
 8001462:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001466:	2240      	movs	r2, #64	; 0x40
 8001468:	498b      	ldr	r1, [pc, #556]	; (8001698 <_Z12create_robotv+0x354>)
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f9e6 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>
	PinControl toggle = PinControl(PIN_TOGGLE_GPIO_Port, PIN_TOGGLE_Pin);
 8001470:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8001474:	2220      	movs	r2, #32
 8001476:	4988      	ldr	r1, [pc, #544]	; (8001698 <_Z12create_robotv+0x354>)
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f9df 	bl	800083c <_ZN10PinControlC1EP12GPIO_TypeDeft>

	Motor motor1 = Motor(mot1_ina, mot1_inb, &htim1, 1, &htim2, mot1_end);
 800147e:	f507 75ae 	add.w	r5, r7, #348	; 0x15c
 8001482:	ac08      	add	r4, sp, #32
 8001484:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001488:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800148a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800148e:	4b83      	ldr	r3, [pc, #524]	; (800169c <_Z12create_robotv+0x358>)
 8001490:	9307      	str	r3, [sp, #28]
 8001492:	2301      	movs	r3, #1
 8001494:	9306      	str	r3, [sp, #24]
 8001496:	4b82      	ldr	r3, [pc, #520]	; (80016a0 <_Z12create_robotv+0x35c>)
 8001498:	9305      	str	r3, [sp, #20]
 800149a:	ac01      	add	r4, sp, #4
 800149c:	f507 7330 	add.w	r3, r7, #704	; 0x2c0
 80014a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80014a6:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80014b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014b2:	4628      	mov	r0, r5
 80014b4:	f7ff fa86 	bl	80009c4 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor2 = Motor(mot2_ina, mot2_inb, &htim1, 2, &htim3, mot2_end);
 80014b8:	f507 758c 	add.w	r5, r7, #280	; 0x118
 80014bc:	ac08      	add	r4, sp, #32
 80014be:	f507 7320 	add.w	r3, r7, #640	; 0x280
 80014c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80014c8:	4b76      	ldr	r3, [pc, #472]	; (80016a4 <_Z12create_robotv+0x360>)
 80014ca:	9307      	str	r3, [sp, #28]
 80014cc:	2302      	movs	r3, #2
 80014ce:	9306      	str	r3, [sp, #24]
 80014d0:	4b73      	ldr	r3, [pc, #460]	; (80016a0 <_Z12create_robotv+0x35c>)
 80014d2:	9305      	str	r3, [sp, #20]
 80014d4:	ac01      	add	r4, sp, #4
 80014d6:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80014da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80014e0:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80014ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014ec:	4628      	mov	r0, r5
 80014ee:	f7ff fa69 	bl	80009c4 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor3 = Motor(mot3_ina, mot3_inb, &htim1, 3, &htim4, mot3_end);
 80014f2:	f107 05d4 	add.w	r5, r7, #212	; 0xd4
 80014f6:	ac08      	add	r4, sp, #32
 80014f8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80014fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001502:	4b69      	ldr	r3, [pc, #420]	; (80016a8 <_Z12create_robotv+0x364>)
 8001504:	9307      	str	r3, [sp, #28]
 8001506:	2303      	movs	r3, #3
 8001508:	9306      	str	r3, [sp, #24]
 800150a:	4b65      	ldr	r3, [pc, #404]	; (80016a0 <_Z12create_robotv+0x35c>)
 800150c:	9305      	str	r3, [sp, #20]
 800150e:	ac01      	add	r4, sp, #4
 8001510:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001514:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001516:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800151a:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8001524:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001526:	4628      	mov	r0, r5
 8001528:	f7ff fa4c 	bl	80009c4 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor4 = Motor(mot4_ina, mot4_inb, &htim1, 4, &htim5, mot4_end);
 800152c:	f107 0590 	add.w	r5, r7, #144	; 0x90
 8001530:	ac08      	add	r4, sp, #32
 8001532:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001536:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800153c:	4b5b      	ldr	r3, [pc, #364]	; (80016ac <_Z12create_robotv+0x368>)
 800153e:	9307      	str	r3, [sp, #28]
 8001540:	2304      	movs	r3, #4
 8001542:	9306      	str	r3, [sp, #24]
 8001544:	4b56      	ldr	r3, [pc, #344]	; (80016a0 <_Z12create_robotv+0x35c>)
 8001546:	9305      	str	r3, [sp, #20]
 8001548:	ac01      	add	r4, sp, #4
 800154a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800154e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001550:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001554:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800155e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001560:	4628      	mov	r0, r5
 8001562:	f7ff fa2f 	bl	80009c4 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor5 = Motor(mot5_ina, mot5_inb, &htim9, 1, &htim8, mot5_end);
 8001566:	f107 054c 	add.w	r5, r7, #76	; 0x4c
 800156a:	ac08      	add	r4, sp, #32
 800156c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8001570:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001572:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001576:	4b4e      	ldr	r3, [pc, #312]	; (80016b0 <_Z12create_robotv+0x36c>)
 8001578:	9307      	str	r3, [sp, #28]
 800157a:	2301      	movs	r3, #1
 800157c:	9306      	str	r3, [sp, #24]
 800157e:	4b4d      	ldr	r3, [pc, #308]	; (80016b4 <_Z12create_robotv+0x370>)
 8001580:	9305      	str	r3, [sp, #20]
 8001582:	ac01      	add	r4, sp, #4
 8001584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001588:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800158a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800158e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001598:	cb0e      	ldmia	r3, {r1, r2, r3}
 800159a:	4628      	mov	r0, r5
 800159c:	f7ff fa12 	bl	80009c4 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefhS2_10PinMeasure>
	Motor motor6 = Motor(mot6_ina, mot6_inb, &htim9, 2, 		mot6_end);
 80015a0:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80015a4:	f5a3 7484 	sub.w	r4, r3, #264	; 0x108
 80015a8:	f107 0608 	add.w	r6, r7, #8
 80015ac:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80015b0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80015b4:	ad07      	add	r5, sp, #28
 80015b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015b8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80015bc:	2302      	movs	r3, #2
 80015be:	9306      	str	r3, [sp, #24]
 80015c0:	4b3c      	ldr	r3, [pc, #240]	; (80016b4 <_Z12create_robotv+0x370>)
 80015c2:	9305      	str	r3, [sp, #20]
 80015c4:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80015c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015cc:	ad01      	add	r5, sp, #4
 80015ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015d0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80015d4:	68e3      	ldr	r3, [r4, #12]
 80015d6:	9300      	str	r3, [sp, #0]
 80015d8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80015dc:	4630      	mov	r0, r6
 80015de:	f7ff f9bb 	bl	8000958 <_ZN5MotorC1E10PinControlS0_P17TIM_HandleTypeDefh10PinMeasure>

	Motor** motors = (Motor**) malloc(sizeof(Motor*)*6);
 80015e2:	2018      	movs	r0, #24
 80015e4:	f01a fd2e 	bl	801c044 <malloc>
 80015e8:	4603      	mov	r3, r0
 80015ea:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
	//Motor** motors = (Motor**) malloc(sizeof(Motor*)*1);
	float* encs_div = (float*) malloc(sizeof(float)*6);
 80015ee:	2018      	movs	r0, #24
 80015f0:	f01a fd28 	bl	801c044 <malloc>
 80015f4:	4603      	mov	r3, r0
 80015f6:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
	//float* encs_div = (float*) malloc(sizeof(float)*1);

	motors[0] = &motor1; motors[1] = &motor2; motors[2] = &motor3; motors[3] = &motor4; motors[4] = &motor5; motors[5] = &motor6;
 80015fa:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80015fe:	f507 72ae 	add.w	r2, r7, #348	; 0x15c
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8001608:	3304      	adds	r3, #4
 800160a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8001614:	3308      	adds	r3, #8
 8001616:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8001620:	330c      	adds	r3, #12
 8001622:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800162c:	3310      	adds	r3, #16
 800162e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8001638:	3314      	adds	r3, #20
 800163a:	f107 0208 	add.w	r2, r7, #8
 800163e:	601a      	str	r2, [r3, #0]
	encs_div[0] = 1; encs_div[1] = 1; encs_div[2] = 1; encs_div[3] = 1; encs_div[4] = 1; encs_div[5] = 1;
 8001640:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8001644:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800164e:	3304      	adds	r3, #4
 8001650:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800165a:	3308      	adds	r3, #8
 800165c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8001666:	330c      	adds	r3, #12
 8001668:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8001672:	3310      	adds	r3, #16
 8001674:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800167e:	3314      	adds	r3, #20
 8001680:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001684:	601a      	str	r2, [r3, #0]
	Robot myRobot = Robot(enable, toggle, TS, 6, motors, encs_div);
 8001686:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800168a:	f5a3 749c 	sub.w	r4, r3, #312	; 0x138
 800168e:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8001692:	e011      	b.n	80016b8 <_Z12create_robotv+0x374>
 8001694:	40020c00 	.word	0x40020c00
 8001698:	40021800 	.word	0x40021800
 800169c:	20006718 	.word	0x20006718
 80016a0:	200066cc 	.word	0x200066cc
 80016a4:	20006764 	.word	0x20006764
 80016a8:	200067b0 	.word	0x200067b0
 80016ac:	200067fc 	.word	0x200067fc
 80016b0:	20006848 	.word	0x20006848
 80016b4:	20006894 	.word	0x20006894
 80016b8:	f5a3 7639 	sub.w	r6, r3, #740	; 0x2e4
 80016bc:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 80016c0:	9308      	str	r3, [sp, #32]
 80016c2:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 80016c6:	9307      	str	r3, [sp, #28]
 80016c8:	2306      	movs	r3, #6
 80016ca:	9306      	str	r3, [sp, #24]
 80016cc:	230a      	movs	r3, #10
 80016ce:	9305      	str	r3, [sp, #20]
 80016d0:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 80016d4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016d8:	ad01      	add	r5, sp, #4
 80016da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016dc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80016e0:	68e3      	ldr	r3, [r4, #12]
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80016e8:	6830      	ldr	r0, [r6, #0]
 80016ea:	f7ff faa7 	bl	8000c3c <_ZN5RobotC1E10PinControlS0_mhPP5MotorPf>
	//Robot myRobot = Robot(enable, toggle, TS, 1, motors, encs_div);

	return myRobot;
 80016ee:	bf00      	nop
}
 80016f0:	f107 0308 	add.w	r3, r7, #8
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff f99b 	bl	8000a30 <_ZN5MotorD1Ev>
 80016fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff f996 	bl	8000a30 <_ZN5MotorD1Ev>
 8001704:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff f991 	bl	8000a30 <_ZN5MotorD1Ev>
 800170e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff f98c 	bl	8000a30 <_ZN5MotorD1Ev>
 8001718:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff f987 	bl	8000a30 <_ZN5MotorD1Ev>
 8001722:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff f982 	bl	8000a30 <_ZN5MotorD1Ev>
	return myRobot;
 800172c:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8001730:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8001734:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 8001738:	f5a2 7239 	sub.w	r2, r2, #740	; 0x2e4
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	601a      	str	r2, [r3, #0]
}
 8001740:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 8001744:	f5a3 7339 	sub.w	r3, r3, #740	; 0x2e4
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	f507 773b 	add.w	r7, r7, #748	; 0x2ec
 800174e:	46bd      	mov	sp, r7
 8001750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001752:	bf00      	nop

08001754 <_ZSt3maxIsERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800176a:	429a      	cmp	r2, r3
 800176c:	da01      	bge.n	8001772 <_ZSt3maxIsERKT_S2_S2_+0x1e>
	return __b;
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	e000      	b.n	8001774 <_ZSt3maxIsERKT_S2_S2_+0x20>
      return __a;
 8001772:	687b      	ldr	r3, [r7, #4]
    }
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <_ZSt3minIsERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001796:	429a      	cmp	r2, r3
 8001798:	da01      	bge.n	800179e <_ZSt3minIsERKT_S2_S2_+0x1e>
	return __b;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	e000      	b.n	80017a0 <_ZSt3minIsERKT_S2_S2_+0x20>
      return __a;
 800179e:	687b      	ldr	r3, [r7, #4]
    }
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	ed93 7a00 	vldr	s14, [r3]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	edd3 7a00 	vldr	s15, [r3]
 80017c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ca:	d501      	bpl.n	80017d0 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	e000      	b.n	80017d2 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 80017d0:	687b      	ldr	r3, [r7, #4]
    }
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	ed93 7a00 	vldr	s14, [r3]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	edd3 7a00 	vldr	s15, [r3]
 80017f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fc:	d501      	bpl.n	8001802 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	e000      	b.n	8001804 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8001802:	687b      	ldr	r3, [r7, #4]
    }
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <_Z41__static_initialization_and_destruction_0ii>:

Robot ScorBot = create_robot();
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d108      	bne.n	8001832 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001826:	4293      	cmp	r3, r2
 8001828:	d103      	bne.n	8001832 <_Z41__static_initialization_and_destruction_0ii+0x22>
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fd89 	bl	8001344 <_Z12create_robotv>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d107      	bne.n	8001848 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800183e:	4293      	cmp	r3, r2
 8001840:	d102      	bne.n	8001848 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8001842:	4803      	ldr	r0, [pc, #12]	; (8001850 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8001844:	f7ff fa8a 	bl	8000d5c <_ZN5RobotD1Ev>
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	200021fc 	.word	0x200021fc

08001854 <_GLOBAL__sub_I__ZN10PinControlC2Ev>:
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
 8001858:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800185c:	2001      	movs	r0, #1
 800185e:	f7ff ffd7 	bl	8001810 <_Z41__static_initialization_and_destruction_0ii>
 8001862:	bd80      	pop	{r7, pc}

08001864 <_GLOBAL__sub_D__ZN10PinControlC2Ev>:
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
 8001868:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800186c:	2000      	movs	r0, #0
 800186e:	f7ff ffcf 	bl	8001810 <_Z41__static_initialization_and_destruction_0ii>
 8001872:	bd80      	pop	{r7, pc}

08001874 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	ed87 0a01 	vstr	s0, [r7, #4]
 800187e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001882:	f01a fadd 	bl	801be40 <expf>
 8001886:	eef0 7a40 	vmov.f32	s15, s0
 800188a:	eeb0 0a67 	vmov.f32	s0, s15
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <_ZN3PID4initEfffb>:


// PID

void PID::init(float ts, float pole, float sat, bool bumpless)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6178      	str	r0, [r7, #20]
 800189c:	ed87 0a04 	vstr	s0, [r7, #16]
 80018a0:	edc7 0a03 	vstr	s1, [r7, #12]
 80018a4:	ed87 1a02 	vstr	s2, [r7, #8]
 80018a8:	460b      	mov	r3, r1
 80018aa:	71fb      	strb	r3, [r7, #7]
  this->ts = ts;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	601a      	str	r2, [r3, #0]
  this->pole = pole;
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	605a      	str	r2, [r3, #4]
  this->sat = sat;
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	609a      	str	r2, [r3, #8]
  this->bumpless = bumpless;
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	79fa      	ldrb	r2, [r7, #7]
 80018c2:	731a      	strb	r2, [r3, #12]

  if(pole > 0)
 80018c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d0:	dd2d      	ble.n	800192e <_ZN3PID4initEfffb+0x9a>
  {
    A = exp(-pole*ts);
 80018d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80018d6:	eeb1 7a67 	vneg.f32	s14, s15
 80018da:	edd7 7a04 	vldr	s15, [r7, #16]
 80018de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e2:	eeb0 0a67 	vmov.f32	s0, s15
 80018e6:	f7ff ffc5 	bl	8001874 <_ZSt3expf>
 80018ea:	eef0 7a40 	vmov.f32	s15, s0
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    B = (1-A)/pole;
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80018fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80018fe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001902:	ed97 7a03 	vldr	s14, [r7, #12]
 8001906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    C = -pole*pole;
 8001910:	edd7 7a03 	vldr	s15, [r7, #12]
 8001914:	eeb1 7a67 	vneg.f32	s14, s15
 8001918:	edd7 7a03 	vldr	s15, [r7, #12]
 800191c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    D = pole;
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	635a      	str	r2, [r3, #52]	; 0x34
 800192c:	e019      	b.n	8001962 <_ZN3PID4initEfffb+0xce>
  }
  else
  {
    A = 0;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	629a      	str	r2, [r3, #40]	; 0x28
    B = 1;
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800193c:	62da      	str	r2, [r3, #44]	; 0x2c
    C = -1/ts;
 800193e:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8001942:	ed97 7a04 	vldr	s14, [r7, #16]
 8001946:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    D = 1/ts;
 8001950:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001954:	ed97 7a04 	vldr	s14, [r7, #16]
 8001958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
  }

  apply_saturation();
 8001962:	6978      	ldr	r0, [r7, #20]
 8001964:	f000 f926 	bl	8001bb4 <_ZN3PID16apply_saturationEv>
}
 8001968:	bf00      	nop
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <_ZN3PID5setupEfff>:

void PID::setup(float kp, float ki, float kd)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	ed87 0a02 	vstr	s0, [r7, #8]
 800197c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001980:	ed87 1a00 	vstr	s2, [r7]
  this->kp = kp;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	611a      	str	r2, [r3, #16]
  this->ki = ki;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	615a      	str	r2, [r3, #20]
  this->kd = kd;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	619a      	str	r2, [r3, #24]
}
 8001996:	bf00      	nop
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <_ZN3PID5resetEv>:

void PID::reset()
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  reset(0.0, 0.0);
 80019ac:	eddf 0a05 	vldr	s1, [pc, #20]	; 80019c4 <_ZN3PID5resetEv+0x20>
 80019b0:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80019c4 <_ZN3PID5resetEv+0x20>
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f807 	bl	80019c8 <_ZN3PID5resetEff>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	00000000 	.word	0x00000000

080019c8 <_ZN3PID5resetEff>:

void PID::reset(float xi, float xd)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80019d4:	edc7 0a01 	vstr	s1, [r7, #4]
  this-> xi = xi;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	621a      	str	r2, [r3, #32]
  this-> xd = xd;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	625a      	str	r2, [r3, #36]	; 0x24

  apply_saturation();
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 f8e5 	bl	8001bb4 <_ZN3PID16apply_saturationEv>
}
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <_ZN3PID5inputEf>:

void PID::input(float e)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	ed87 0a00 	vstr	s0, [r7]
  this->e = e;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	61da      	str	r2, [r3, #28]
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <_ZN3PID4stepEv>:

void PID::step()
{  
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  xi = xi + (bumpless ? ki*ts*e : ts*e);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	ed93 7a08 	vldr	s14, [r3, #32]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7b1b      	ldrb	r3, [r3, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d00d      	beq.n	8001a42 <_ZN3PID4stepEv+0x32>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	edd3 6a05 	vldr	s13, [r3, #20]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	edd3 7a00 	vldr	s15, [r3]
 8001a32:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a40:	e007      	b.n	8001a52 <_ZN3PID4stepEv+0x42>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	edd3 6a00 	vldr	s13, [r3]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	edc3 7a08 	vstr	s15, [r3, #32]
  xd = A*xd + (bumpless ? kd*B*e : B*e);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001a68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7b1b      	ldrb	r3, [r3, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00d      	beq.n	8001a90 <_ZN3PID4stepEv+0x80>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	edd3 6a06 	vldr	s13, [r3, #24]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001a80:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a8e:	e007      	b.n	8001aa0 <_ZN3PID4stepEv+0x90>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aa0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

  apply_saturation();
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f882 	bl	8001bb4 <_ZN3PID16apply_saturationEv>
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <_ZN3PID6outputEv>:

float PID::output()
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  float u;

  if(bumpless) u = (kp + kd*D) * e + xi + C*xd;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	7b1b      	ldrb	r3, [r3, #12]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d023      	beq.n	8001b10 <_ZN3PID6outputEv+0x58>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	ed93 7a04 	vldr	s14, [r3, #16]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	edd3 6a06 	vldr	s13, [r3, #24]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001ada:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ade:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	edd3 7a07 	vldr	s15, [r3, #28]
 8001ae8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	edd3 7a08 	vldr	s15, [r3, #32]
 8001af2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001b02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0a:	edc7 7a03 	vstr	s15, [r7, #12]
 8001b0e:	e02c      	b.n	8001b6a <_ZN3PID6outputEv+0xb2>
  else u = (kp + kd*D) * e + ki*xi + kd*C*xd;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	edd3 6a06 	vldr	s13, [r3, #24]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001b22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	edd3 6a05 	vldr	s13, [r3, #20]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	edd3 6a06 	vldr	s13, [r3, #24]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001b54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001b5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b66:	edc7 7a03 	vstr	s15, [r7, #12]

  return u;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	ee07 3a90 	vmov	s15, r3
}
 8001b70:	eeb0 0a67 	vmov.f32	s0, s15
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <_ZN3PID6evolveEf>:

float PID::evolve(float e)
{ 
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b084      	sub	sp, #16
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	ed87 0a00 	vstr	s0, [r7]
  float u;
  
  input(e);
 8001b8a:	ed97 0a00 	vldr	s0, [r7]
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ff2f 	bl	80019f2 <_ZN3PID5inputEf>
  u = output();
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ff8f 	bl	8001ab8 <_ZN3PID6outputEv>
 8001b9a:	ed87 0a03 	vstr	s0, [r7, #12]
  step();
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ff36 	bl	8001a10 <_ZN3PID4stepEv>

  return u;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	ee07 3a90 	vmov	s15, r3
}
 8001baa:	eeb0 0a67 	vmov.f32	s0, s15
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <_ZN3PID16apply_saturationEv>:

void PID::apply_saturation()
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if(sat > 0)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bca:	dc00      	bgt.n	8001bce <_ZN3PID16apply_saturationEv+0x1a>
  {
    xi = xi > +sat ? +sat : xi;
    xi = xi < -sat ? -sat : xi;
  }
}
 8001bcc:	e02a      	b.n	8001c24 <_ZN3PID16apply_saturationEv+0x70>
    xi = xi > +sat ? +sat : xi;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	ed93 7a08 	vldr	s14, [r3, #32]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be2:	dd02      	ble.n	8001bea <_ZN3PID16apply_saturationEv+0x36>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	e001      	b.n	8001bee <_ZN3PID16apply_saturationEv+0x3a>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6213      	str	r3, [r2, #32]
    xi = xi < -sat ? -sat : xi;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	ed93 7a08 	vldr	s14, [r3, #32]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bfe:	eef1 7a67 	vneg.f32	s15, s15
 8001c02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0a:	d505      	bpl.n	8001c18 <_ZN3PID16apply_saturationEv+0x64>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c12:	eef1 7a67 	vneg.f32	s15, s15
 8001c16:	e002      	b.n	8001c1e <_ZN3PID16apply_saturationEv+0x6a>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	edd3 7a08 	vldr	s15, [r3, #32]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	; 0x28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001c3c:	f008 fa88 	bl	800a150 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001c40:	4b5b      	ldr	r3, [pc, #364]	; (8001db0 <pvPortMallocMicroROS+0x180>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001c48:	f000 f98a 	bl	8001f60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001c4c:	4b59      	ldr	r3, [pc, #356]	; (8001db4 <pvPortMallocMicroROS+0x184>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f040 8092 	bne.w	8001d7e <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d01f      	beq.n	8001ca0 <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 8001c60:	2208      	movs	r2, #8
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d016      	beq.n	8001ca0 <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f023 0307 	bic.w	r3, r3, #7
 8001c78:	3308      	adds	r3, #8
 8001c7a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00c      	beq.n	8001ca0 <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c8a:	b672      	cpsid	i
 8001c8c:	f383 8811 	msr	BASEPRI, r3
 8001c90:	f3bf 8f6f 	isb	sy
 8001c94:	f3bf 8f4f 	dsb	sy
 8001c98:	b662      	cpsie	i
 8001c9a:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001c9c:	bf00      	nop
 8001c9e:	e7fe      	b.n	8001c9e <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d06b      	beq.n	8001d7e <pvPortMallocMicroROS+0x14e>
 8001ca6:	4b44      	ldr	r3, [pc, #272]	; (8001db8 <pvPortMallocMicroROS+0x188>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d866      	bhi.n	8001d7e <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001cb0:	4b42      	ldr	r3, [pc, #264]	; (8001dbc <pvPortMallocMicroROS+0x18c>)
 8001cb2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001cb4:	4b41      	ldr	r3, [pc, #260]	; (8001dbc <pvPortMallocMicroROS+0x18c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001cba:	e004      	b.n	8001cc6 <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d903      	bls.n	8001cd8 <pvPortMallocMicroROS+0xa8>
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1f1      	bne.n	8001cbc <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001cd8:	4b35      	ldr	r3, [pc, #212]	; (8001db0 <pvPortMallocMicroROS+0x180>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d04d      	beq.n	8001d7e <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2208      	movs	r2, #8
 8001ce8:	4413      	add	r3, r2
 8001cea:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	1ad2      	subs	r2, r2, r3
 8001cfc:	2308      	movs	r3, #8
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d921      	bls.n	8001d48 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00c      	beq.n	8001d30 <pvPortMallocMicroROS+0x100>
	__asm volatile
 8001d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d1a:	b672      	cpsid	i
 8001d1c:	f383 8811 	msr	BASEPRI, r3
 8001d20:	f3bf 8f6f 	isb	sy
 8001d24:	f3bf 8f4f 	dsb	sy
 8001d28:	b662      	cpsie	i
 8001d2a:	613b      	str	r3, [r7, #16]
}
 8001d2c:	bf00      	nop
 8001d2e:	e7fe      	b.n	8001d2e <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	1ad2      	subs	r2, r2, r3
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001d42:	69b8      	ldr	r0, [r7, #24]
 8001d44:	f000 f96e 	bl	8002024 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <pvPortMallocMicroROS+0x188>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	4a19      	ldr	r2, [pc, #100]	; (8001db8 <pvPortMallocMicroROS+0x188>)
 8001d54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001d56:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <pvPortMallocMicroROS+0x188>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <pvPortMallocMicroROS+0x190>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d203      	bcs.n	8001d6a <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <pvPortMallocMicroROS+0x188>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a16      	ldr	r2, [pc, #88]	; (8001dc0 <pvPortMallocMicroROS+0x190>)
 8001d68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <pvPortMallocMicroROS+0x184>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	431a      	orrs	r2, r3
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001d7e:	f008 f9f5 	bl	800a16c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00c      	beq.n	8001da6 <pvPortMallocMicroROS+0x176>
	__asm volatile
 8001d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d90:	b672      	cpsid	i
 8001d92:	f383 8811 	msr	BASEPRI, r3
 8001d96:	f3bf 8f6f 	isb	sy
 8001d9a:	f3bf 8f4f 	dsb	sy
 8001d9e:	b662      	cpsie	i
 8001da0:	60fb      	str	r3, [r7, #12]
}
 8001da2:	bf00      	nop
 8001da4:	e7fe      	b.n	8001da4 <pvPortMallocMicroROS+0x174>
	return pvReturn;
 8001da6:	69fb      	ldr	r3, [r7, #28]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3728      	adds	r7, #40	; 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20005e4c 	.word	0x20005e4c
 8001db4:	20005e58 	.word	0x20005e58
 8001db8:	20005e50 	.word	0x20005e50
 8001dbc:	20005e44 	.word	0x20005e44
 8001dc0:	20005e54 	.word	0x20005e54

08001dc4 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d04c      	beq.n	8001e70 <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8001dd6:	2308      	movs	r3, #8
 8001dd8:	425b      	negs	r3, r3
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	4413      	add	r3, r2
 8001dde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <vPortFreeMicroROS+0xb4>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4013      	ands	r3, r2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10c      	bne.n	8001e0c <vPortFreeMicroROS+0x48>
	__asm volatile
 8001df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df6:	b672      	cpsid	i
 8001df8:	f383 8811 	msr	BASEPRI, r3
 8001dfc:	f3bf 8f6f 	isb	sy
 8001e00:	f3bf 8f4f 	dsb	sy
 8001e04:	b662      	cpsie	i
 8001e06:	60fb      	str	r3, [r7, #12]
}
 8001e08:	bf00      	nop
 8001e0a:	e7fe      	b.n	8001e0a <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00c      	beq.n	8001e2e <vPortFreeMicroROS+0x6a>
	__asm volatile
 8001e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e18:	b672      	cpsid	i
 8001e1a:	f383 8811 	msr	BASEPRI, r3
 8001e1e:	f3bf 8f6f 	isb	sy
 8001e22:	f3bf 8f4f 	dsb	sy
 8001e26:	b662      	cpsie	i
 8001e28:	60bb      	str	r3, [r7, #8]
}
 8001e2a:	bf00      	nop
 8001e2c:	e7fe      	b.n	8001e2c <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <vPortFreeMicroROS+0xb4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d019      	beq.n	8001e70 <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d115      	bne.n	8001e70 <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <vPortFreeMicroROS+0xb4>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	401a      	ands	r2, r3
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001e54:	f008 f97c 	bl	800a150 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <vPortFreeMicroROS+0xb8>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4413      	add	r3, r2
 8001e62:	4a06      	ldr	r2, [pc, #24]	; (8001e7c <vPortFreeMicroROS+0xb8>)
 8001e64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001e66:	6938      	ldr	r0, [r7, #16]
 8001e68:	f000 f8dc 	bl	8002024 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001e6c:	f008 f97e 	bl	800a16c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001e70:	bf00      	nop
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20005e58 	.word	0x20005e58
 8001e7c:	20005e50 	.word	0x20005e50

08001e80 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001e80:	b480      	push	{r7}
 8001e82:	b087      	sub	sp, #28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001e8c:	2308      	movs	r3, #8
 8001e8e:	425b      	negs	r3, r3
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	4413      	add	r3, r2
 8001e94:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <getBlockSize+0x38>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]

	return count;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	371c      	adds	r7, #28
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	20005e58 	.word	0x20005e58

08001ebc <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001ec6:	f008 f943 	bl	800a150 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001eca:	6838      	ldr	r0, [r7, #0]
 8001ecc:	f7ff feb0 	bl	8001c30 <pvPortMallocMicroROS>
 8001ed0:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d017      	beq.n	8001f08 <pvPortReallocMicroROS+0x4c>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d014      	beq.n	8001f08 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff ffce 	bl	8001e80 <getBlockSize>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2208      	movs	r2, #8
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d201      	bcs.n	8001ef8 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	68b8      	ldr	r0, [r7, #8]
 8001efe:	f01a fd4a 	bl	801c996 <memcpy>

		vPortFreeMicroROS(pv);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff ff5e 	bl	8001dc4 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001f08:	f008 f930 	bl	800a16c <xTaskResumeAll>

	return newmem;
 8001f0c:	68bb      	ldr	r3, [r7, #8]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b086      	sub	sp, #24
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001f20:	f008 f916 	bl	800a150 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	fb02 f303 	mul.w	r3, r2, r3
 8001f2c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001f2e:	6978      	ldr	r0, [r7, #20]
 8001f30:	f7ff fe7e 	bl	8001c30 <pvPortMallocMicroROS>
 8001f34:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001f3a:	e004      	b.n	8001f46 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	613a      	str	r2, [r7, #16]
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	1e5a      	subs	r2, r3, #1
 8001f4a:	617a      	str	r2, [r7, #20]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f5      	bne.n	8001f3c <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001f50:	f008 f90c 	bl	800a16c <xTaskResumeAll>
  	return mem;
 8001f54:	68fb      	ldr	r3, [r7, #12]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001f66:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001f6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001f6c:	4b27      	ldr	r3, [pc, #156]	; (800200c <prvHeapInit+0xac>)
 8001f6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00c      	beq.n	8001f94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	3307      	adds	r3, #7
 8001f7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f023 0307 	bic.w	r3, r3, #7
 8001f86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	4a1f      	ldr	r2, [pc, #124]	; (800200c <prvHeapInit+0xac>)
 8001f90:	4413      	add	r3, r2
 8001f92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001f98:	4a1d      	ldr	r2, [pc, #116]	; (8002010 <prvHeapInit+0xb0>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <prvHeapInit+0xb0>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	4413      	add	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001fac:	2208      	movs	r2, #8
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1a9b      	subs	r3, r3, r2
 8001fb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f023 0307 	bic.w	r3, r3, #7
 8001fba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4a15      	ldr	r2, [pc, #84]	; (8002014 <prvHeapInit+0xb4>)
 8001fc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001fc2:	4b14      	ldr	r3, [pc, #80]	; (8002014 <prvHeapInit+0xb4>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <prvHeapInit+0xb4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	1ad2      	subs	r2, r2, r3
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <prvHeapInit+0xb4>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	4a0a      	ldr	r2, [pc, #40]	; (8002018 <prvHeapInit+0xb8>)
 8001fee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	4a09      	ldr	r2, [pc, #36]	; (800201c <prvHeapInit+0xbc>)
 8001ff6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001ff8:	4b09      	ldr	r3, [pc, #36]	; (8002020 <prvHeapInit+0xc0>)
 8001ffa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ffe:	601a      	str	r2, [r3, #0]
}
 8002000:	bf00      	nop
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	20002244 	.word	0x20002244
 8002010:	20005e44 	.word	0x20005e44
 8002014:	20005e4c 	.word	0x20005e4c
 8002018:	20005e54 	.word	0x20005e54
 800201c:	20005e50 	.word	0x20005e50
 8002020:	20005e58 	.word	0x20005e58

08002024 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800202c:	4b28      	ldr	r3, [pc, #160]	; (80020d0 <prvInsertBlockIntoFreeList+0xac>)
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	e002      	b.n	8002038 <prvInsertBlockIntoFreeList+0x14>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	429a      	cmp	r2, r3
 8002040:	d8f7      	bhi.n	8002032 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	4413      	add	r3, r2
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	429a      	cmp	r2, r3
 8002052:	d108      	bne.n	8002066 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	685a      	ldr	r2, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	441a      	add	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	68ba      	ldr	r2, [r7, #8]
 8002070:	441a      	add	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d118      	bne.n	80020ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <prvInsertBlockIntoFreeList+0xb0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d00d      	beq.n	80020a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	441a      	add	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	e008      	b.n	80020b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80020a2:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <prvInsertBlockIntoFreeList+0xb0>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	e003      	b.n	80020b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80020b4:	68fa      	ldr	r2, [r7, #12]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d002      	beq.n	80020c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80020c2:	bf00      	nop
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20005e44 	.word	0x20005e44
 80020d4:	20005e4c 	.word	0x20005e4c

080020d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <MX_DMA_Init+0x48>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a0f      	ldr	r2, [pc, #60]	; (8002120 <MX_DMA_Init+0x48>)
 80020e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <MX_DMA_Init+0x48>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f2:	607b      	str	r3, [r7, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2105      	movs	r1, #5
 80020fa:	200c      	movs	r0, #12
 80020fc:	f001 fea2 	bl	8003e44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002100:	200c      	movs	r0, #12
 8002102:	f001 febb 	bl	8003e7c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	2105      	movs	r1, #5
 800210a:	200e      	movs	r0, #14
 800210c:	f001 fe9a 	bl	8003e44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002110:	200e      	movs	r0, #14
 8002112:	f001 feb3 	bl	8003e7c <HAL_NVIC_EnableIRQ>

}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800

08002124 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002132:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8002134:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002138:	4904      	ldr	r1, [pc, #16]	; (800214c <cubemx_transport_open+0x28>)
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f005 f89c 	bl	8007278 <HAL_UART_Receive_DMA>
    return true;
 8002140:	2301      	movs	r3, #1
}
 8002142:	4618      	mov	r0, r3
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20005e5c 	.word	0x20005e5c

08002150 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800215e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f005 f8cd 	bl	8007300 <HAL_UART_DMAStop>
    return true;
 8002166:	2301      	movs	r3, #1
}
 8002168:	4618      	mov	r0, r3
 800216a:	3710      	adds	r7, #16
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, const uint8_t * buf, size_t len, uint8_t * err){
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8002184:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800218a:	2b20      	cmp	r3, #32
 800218c:	d11a      	bne.n	80021c4 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	b29b      	uxth	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	6978      	ldr	r0, [r7, #20]
 8002198:	f004 fff2 	bl	8007180 <HAL_UART_Transmit_DMA>
 800219c:	4603      	mov	r3, r0
 800219e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80021a0:	e002      	b.n	80021a8 <cubemx_transport_write+0x38>
            osDelay(1);
 80021a2:	2001      	movs	r0, #1
 80021a4:	f006 ff4a 	bl	800903c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80021a8:	7cfb      	ldrb	r3, [r7, #19]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d103      	bne.n	80021b6 <cubemx_transport_write+0x46>
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021b2:	2b20      	cmp	r3, #32
 80021b4:	d1f5      	bne.n	80021a2 <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 80021b6:	7cfb      	ldrb	r3, [r7, #19]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <cubemx_transport_write+0x50>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	e002      	b.n	80021c6 <cubemx_transport_write+0x56>
 80021c0:	2300      	movs	r3, #0
 80021c2:	e000      	b.n	80021c6 <cubemx_transport_write+0x56>
    }else{
        return 0;
 80021c4:	2300      	movs	r3, #0
    }
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
 80021dc:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80021e4:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021ea:	b672      	cpsid	i
}
 80021ec:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80021fa:	4a1c      	ldr	r2, [pc, #112]	; (800226c <cubemx_transport_read+0x9c>)
 80021fc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80021fe:	b662      	cpsie	i
}
 8002200:	bf00      	nop
        __enable_irq();
        ms_used++;
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	3301      	adds	r3, #1
 8002206:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8002208:	2001      	movs	r0, #1
 800220a:	f006 ff17 	bl	800903c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 800220e:	4b18      	ldr	r3, [pc, #96]	; (8002270 <cubemx_transport_read+0xa0>)
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	4b16      	ldr	r3, [pc, #88]	; (800226c <cubemx_transport_read+0x9c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d103      	bne.n	8002222 <cubemx_transport_read+0x52>
 800221a:	69fa      	ldr	r2, [r7, #28]
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	dbe3      	blt.n	80021ea <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002226:	e011      	b.n	800224c <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <cubemx_transport_read+0xa0>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68b9      	ldr	r1, [r7, #8]
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	440b      	add	r3, r1
 8002232:	4910      	ldr	r1, [pc, #64]	; (8002274 <cubemx_transport_read+0xa4>)
 8002234:	5c8a      	ldrb	r2, [r1, r2]
 8002236:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8002238:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <cubemx_transport_read+0xa0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	3301      	adds	r3, #1
 800223e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002242:	4a0b      	ldr	r2, [pc, #44]	; (8002270 <cubemx_transport_read+0xa0>)
 8002244:	6013      	str	r3, [r2, #0]
        wrote++;
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	3301      	adds	r3, #1
 800224a:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <cubemx_transport_read+0xa0>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <cubemx_transport_read+0x9c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d003      	beq.n	8002260 <cubemx_transport_read+0x90>
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	429a      	cmp	r2, r3
 800225e:	d3e3      	bcc.n	8002228 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002260:	69bb      	ldr	r3, [r7, #24]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3720      	adds	r7, #32
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20006660 	.word	0x20006660
 8002270:	2000665c 	.word	0x2000665c
 8002274:	20005e5c 	.word	0x20005e5c

08002278 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800227c:	4a08      	ldr	r2, [pc, #32]	; (80022a0 <_Z16MX_FREERTOS_Initv+0x28>)
 800227e:	2100      	movs	r1, #0
 8002280:	4808      	ldr	r0, [pc, #32]	; (80022a4 <_Z16MX_FREERTOS_Initv+0x2c>)
 8002282:	f006 fe35 	bl	8008ef0 <osThreadNew>
 8002286:	4603      	mov	r3, r0
 8002288:	4a07      	ldr	r2, [pc, #28]	; (80022a8 <_Z16MX_FREERTOS_Initv+0x30>)
 800228a:	6013      	str	r3, [r2, #0]

  /* creation of cycleRobot */
  cycleRobotHandle = osThreadNew(cycleRobotTask, NULL, &cycleRobot_attributes);
 800228c:	4a07      	ldr	r2, [pc, #28]	; (80022ac <_Z16MX_FREERTOS_Initv+0x34>)
 800228e:	2100      	movs	r1, #0
 8002290:	4807      	ldr	r0, [pc, #28]	; (80022b0 <_Z16MX_FREERTOS_Initv+0x38>)
 8002292:	f006 fe2d 	bl	8008ef0 <osThreadNew>
 8002296:	4603      	mov	r3, r0
 8002298:	4a06      	ldr	r2, [pc, #24]	; (80022b4 <_Z16MX_FREERTOS_Initv+0x3c>)
 800229a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800229c:	bf00      	nop
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	0801d7f0 	.word	0x0801d7f0
 80022a4:	080022b9 	.word	0x080022b9
 80022a8:	20006668 	.word	0x20006668
 80022ac:	0801d814 	.word	0x0801d814
 80022b0:	0800262d 	.word	0x0800262d
 80022b4:	2000666c 	.word	0x2000666c

080022b8 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80022b8:	b5b0      	push	{r4, r5, r7, lr}
 80022ba:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
 80022be:	af02      	add	r7, sp, #8
 80022c0:	f507 731e 	add.w	r3, r7, #632	; 0x278
 80022c4:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80022c8:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartDefaultTask */
	rmw_uros_set_custom_transport(
 80022ca:	4bc1      	ldr	r3, [pc, #772]	; (80025d0 <_Z16StartDefaultTaskPv+0x318>)
 80022cc:	9301      	str	r3, [sp, #4]
 80022ce:	4bc1      	ldr	r3, [pc, #772]	; (80025d4 <_Z16StartDefaultTaskPv+0x31c>)
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	4bc1      	ldr	r3, [pc, #772]	; (80025d8 <_Z16StartDefaultTaskPv+0x320>)
 80022d4:	4ac1      	ldr	r2, [pc, #772]	; (80025dc <_Z16StartDefaultTaskPv+0x324>)
 80022d6:	49c2      	ldr	r1, [pc, #776]	; (80025e0 <_Z16StartDefaultTaskPv+0x328>)
 80022d8:	2001      	movs	r0, #1
 80022da:	f00b fd49 	bl	800dd70 <rmw_uros_set_custom_transport>
		cubemx_transport_open,
		cubemx_transport_close,
		cubemx_transport_write,
		cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 80022de:	f507 730d 	add.w	r3, r7, #564	; 0x234
 80022e2:	4618      	mov	r0, r3
 80022e4:	f00b fc76 	bl	800dbd4 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 80022e8:	4bbe      	ldr	r3, [pc, #760]	; (80025e4 <_Z16StartDefaultTaskPv+0x32c>)
 80022ea:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
	freeRTOS_allocator.deallocate = microros_deallocate;
 80022ee:	4bbe      	ldr	r3, [pc, #760]	; (80025e8 <_Z16StartDefaultTaskPv+0x330>)
 80022f0:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
	freeRTOS_allocator.reallocate = microros_reallocate;
 80022f4:	4bbd      	ldr	r3, [pc, #756]	; (80025ec <_Z16StartDefaultTaskPv+0x334>)
 80022f6:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 80022fa:	4bbd      	ldr	r3, [pc, #756]	; (80025f0 <_Z16StartDefaultTaskPv+0x338>)
 80022fc:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) return;
 8002300:	f507 730d 	add.w	r3, r7, #564	; 0x234
 8002304:	4618      	mov	r0, r3
 8002306:	f00b fc73 	bl	800dbf0 <rcutils_set_default_allocator>
 800230a:	4603      	mov	r3, r0
 800230c:	f083 0301 	eor.w	r3, r3, #1
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	f040 8137 	bne.w	8002586 <_Z16StartDefaultTaskPv+0x2ce>
	//Robot ScorBot = create_robot();

	rcl_ret_t rc;
	rcl_node_t node; // nodo;
	rcl_timer_t feedback_timer, robot_timer;
	const unsigned int feedback_timer_period = RCL_MS_TO_NS(1000);
 8002318:	4bb6      	ldr	r3, [pc, #728]	; (80025f4 <_Z16StartDefaultTaskPv+0x33c>)
 800231a:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
	const unsigned int robot_timer_period = RCL_MS_TO_NS(10);
 800231e:	4bb6      	ldr	r3, [pc, #728]	; (80025f8 <_Z16StartDefaultTaskPv+0x340>)
 8002320:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
	//rcl_publisher_t feedback_publisher; // publisher
	rcl_subscription_t subscriber;
	rcl_service_t setup_service, control_service; //servizi

	const char* feedback_publisher_name = "/feedback";	//publisher
 8002324:	4bb5      	ldr	r3, [pc, #724]	; (80025fc <_Z16StartDefaultTaskPv+0x344>)
 8002326:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
	const char* pwm_subscriber_name = "/pwm";			//subscriber
 800232a:	4bb5      	ldr	r3, [pc, #724]	; (8002600 <_Z16StartDefaultTaskPv+0x348>)
 800232c:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
	const char* setup_service_name = "/setup";			//servizi
 8002330:	4bb4      	ldr	r3, [pc, #720]	; (8002604 <_Z16StartDefaultTaskPv+0x34c>)
 8002332:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
	const char* control_service_name = "/control";
 8002336:	4bb4      	ldr	r3, [pc, #720]	; (8002608 <_Z16StartDefaultTaskPv+0x350>)
 8002338:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

	const rosidl_message_type_support_t* feedback_type_support =
		ROSIDL_GET_MSG_TYPE_SUPPORT(racs_services, msg, Feedback);
 800233c:	f009 fbcc 	bl	800bad8 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback>
 8002340:	f8c7 025c 	str.w	r0, [r7, #604]	; 0x25c
	const rosidl_message_type_support_t * pwm_type_support =
	  ROSIDL_GET_MSG_TYPE_SUPPORT(racs_services, msg, DirectAccess);
 8002344:	f009 fbb0 	bl	800baa8 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess>
 8002348:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
	const rosidl_service_type_support_t* setup_type_support =
		ROSIDL_GET_SRV_TYPE_SUPPORT(racs_services, srv, Setup);
 800234c:	f009 fbdc 	bl	800bb08 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup>
 8002350:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
	const rosidl_service_type_support_t* control_type_support =
		ROSIDL_GET_SRV_TYPE_SUPPORT(racs_services, srv, Control);
 8002354:	f009 fb82 	bl	800ba5c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control>
 8002358:	f8c7 0250 	str.w	r0, [r7, #592]	; 0x250
	racs_services__srv__Setup_Request req_setup;
	racs_services__srv__Setup_Response res_setup;
	racs_services__srv__Control_Request req_control;
	racs_services__srv__Control_Response res_control;

	allocator = rcl_get_default_allocator();
 800235c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002360:	4618      	mov	r0, r3
 8002362:	f00b fc63 	bl	800dc2c <rcutils_get_default_allocator>
 8002366:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800236a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800236e:	f507 74e8 	add.w	r4, r7, #464	; 0x1d0
 8002372:	461d      	mov	r5, r3
 8002374:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002378:	682b      	ldr	r3, [r5, #0]
 800237a:	6023      	str	r3, [r4, #0]

	rc = rclc_support_init(&support, 0, NULL, &allocator);
 800237c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8002380:	f507 70f2 	add.w	r0, r7, #484	; 0x1e4
 8002384:	2200      	movs	r2, #0
 8002386:	2100      	movs	r1, #0
 8002388:	f00b fab2 	bl	800d8f0 <rclc_support_init>
 800238c:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
	if (rc != RCL_RET_OK) return;
 8002390:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8002394:	2b00      	cmp	r3, #0
 8002396:	f040 80f8 	bne.w	800258a <_Z16StartDefaultTaskPv+0x2d2>

	rc = rclc_timer_init_default(&feedback_timer, &support, feedback_timer_period, feedback_timer_callback);
 800239a:	f507 71f2 	add.w	r1, r7, #484	; 0x1e4
 800239e:	f507 700a 	add.w	r0, r7, #552	; 0x228
 80023a2:	4b9a      	ldr	r3, [pc, #616]	; (800260c <_Z16StartDefaultTaskPv+0x354>)
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	a388      	add	r3, pc, #544	; (adr r3, 80025c8 <_Z16StartDefaultTaskPv+0x310>)
 80023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ac:	f00b fbda 	bl	800db64 <rclc_timer_init_default>
 80023b0:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
	if (rc != RCL_RET_OK) return;
 80023b4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f040 80e8 	bne.w	800258e <_Z16StartDefaultTaskPv+0x2d6>

	rc = rclc_timer_init_default(&robot_timer, &support, robot_timer_period, robot_timer_callback);
 80023be:	f507 71f2 	add.w	r1, r7, #484	; 0x1e4
 80023c2:	f507 7009 	add.w	r0, r7, #548	; 0x224
 80023c6:	4b92      	ldr	r3, [pc, #584]	; (8002610 <_Z16StartDefaultTaskPv+0x358>)
 80023c8:	9300      	str	r3, [sp, #0]
 80023ca:	4a8b      	ldr	r2, [pc, #556]	; (80025f8 <_Z16StartDefaultTaskPv+0x340>)
 80023cc:	f04f 0300 	mov.w	r3, #0
 80023d0:	f00b fbc8 	bl	800db64 <rclc_timer_init_default>
 80023d4:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
	if (rc != RCL_RET_OK) return;
 80023d8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f040 80d8 	bne.w	8002592 <_Z16StartDefaultTaskPv+0x2da>

	rc = rclc_node_init_default(&node, "STM32_node", "", &support);
 80023e2:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 80023e6:	f507 700b 	add.w	r0, r7, #556	; 0x22c
 80023ea:	4a8a      	ldr	r2, [pc, #552]	; (8002614 <_Z16StartDefaultTaskPv+0x35c>)
 80023ec:	498a      	ldr	r1, [pc, #552]	; (8002618 <_Z16StartDefaultTaskPv+0x360>)
 80023ee:	f00b fac9 	bl	800d984 <rclc_node_init_default>
 80023f2:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
	if (rc != RCL_RET_OK) return;
 80023f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f040 80cb 	bne.w	8002596 <_Z16StartDefaultTaskPv+0x2de>

	rc = rclc_publisher_init_best_effort(
 8002400:	f507 710b 	add.w	r1, r7, #556	; 0x22c
 8002404:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8002408:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800240c:	4883      	ldr	r0, [pc, #524]	; (800261c <_Z16StartDefaultTaskPv+0x364>)
 800240e:	f00b fafb 	bl	800da08 <rclc_publisher_init_best_effort>
 8002412:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
	  &feedback_publisher, &node, feedback_type_support, feedback_publisher_name);
	if (rc != RCL_RET_OK) return;
 8002416:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800241a:	2b00      	cmp	r3, #0
 800241c:	f040 80bd 	bne.w	800259a <_Z16StartDefaultTaskPv+0x2e2>

	rc = rclc_subscription_init_best_effort(
 8002420:	f507 710b 	add.w	r1, r7, #556	; 0x22c
 8002424:	f507 7008 	add.w	r0, r7, #544	; 0x220
 8002428:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 800242c:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8002430:	f00b fb5e 	bl	800daf0 <rclc_subscription_init_best_effort>
 8002434:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
	  &subscriber, &node, pwm_type_support, pwm_subscriber_name);
	if (rc != RCL_RET_OK) return;
 8002438:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800243c:	2b00      	cmp	r3, #0
 800243e:	f040 80ae 	bne.w	800259e <_Z16StartDefaultTaskPv+0x2e6>

	rc = rclc_service_init_default(
 8002442:	f507 710b 	add.w	r1, r7, #556	; 0x22c
 8002446:	f507 7007 	add.w	r0, r7, #540	; 0x21c
 800244a:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800244e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8002452:	f00b fb13 	bl	800da7c <rclc_service_init_default>
 8002456:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
		&setup_service, &node, setup_type_support, setup_service_name);
	if (rc != RCL_RET_OK) return;
 800245a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800245e:	2b00      	cmp	r3, #0
 8002460:	f040 809f 	bne.w	80025a2 <_Z16StartDefaultTaskPv+0x2ea>

	rc = rclc_service_init_default(
 8002464:	f507 710b 	add.w	r1, r7, #556	; 0x22c
 8002468:	f507 7006 	add.w	r0, r7, #536	; 0x218
 800246c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8002470:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8002474:	f00b fb02 	bl	800da7c <rclc_service_init_default>
 8002478:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
		&control_service, &node, control_type_support, control_service_name);
	if (rc != RCL_RET_OK) return;
 800247c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8002480:	2b00      	cmp	r3, #0
 8002482:	f040 8090 	bne.w	80025a6 <_Z16StartDefaultTaskPv+0x2ee>

	rclc_executor_t executor;
	executor = rclc_executor_get_zero_initialized_executor();
 8002486:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800248a:	f5a3 74c0 	sub.w	r4, r3, #384	; 0x180
 800248e:	463b      	mov	r3, r7
 8002490:	4618      	mov	r0, r3
 8002492:	f00a fecb 	bl	800d22c <rclc_executor_get_zero_initialized_executor>
 8002496:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800249a:	f5a3 731e 	sub.w	r3, r3, #632	; 0x278
 800249e:	4620      	mov	r0, r4
 80024a0:	4619      	mov	r1, r3
 80024a2:	2390      	movs	r3, #144	; 0x90
 80024a4:	461a      	mov	r2, r3
 80024a6:	f01a fa76 	bl	801c996 <memcpy>
	unsigned int num_handles = 5; //2 servizi, 2 timer e 1 sub
 80024aa:	2305      	movs	r3, #5
 80024ac:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
	rclc_executor_init(&executor, &support.context, num_handles, &allocator);
 80024b0:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80024b4:	f507 71f2 	add.w	r1, r7, #484	; 0x1e4
 80024b8:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 80024bc:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80024c0:	f00a febe 	bl	800d240 <rclc_executor_init>

	rc = rclc_executor_add_timer(&executor, &feedback_timer);
 80024c4:	f507 720a 	add.w	r2, r7, #552	; 0x228
 80024c8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80024cc:	4611      	mov	r1, r2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f00a ff70 	bl	800d3b4 <rclc_executor_add_timer>
 80024d4:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
	if (rc != RCL_RET_OK) return;
 80024d8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d164      	bne.n	80025aa <_Z16StartDefaultTaskPv+0x2f2>

	rc = rclc_executor_add_timer(&executor, &robot_timer);
 80024e0:	f507 7209 	add.w	r2, r7, #548	; 0x224
 80024e4:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80024e8:	4611      	mov	r1, r2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f00a ff62 	bl	800d3b4 <rclc_executor_add_timer>
 80024f0:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
	if (rc != RCL_RET_OK) return;
 80024f4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d158      	bne.n	80025ae <_Z16StartDefaultTaskPv+0x2f6>

	rc = rclc_executor_add_subscription(
 80024fc:	f507 72e0 	add.w	r2, r7, #448	; 0x1c0
 8002500:	f507 7108 	add.w	r1, r7, #544	; 0x220
 8002504:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8002508:	2300      	movs	r3, #0
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	4b44      	ldr	r3, [pc, #272]	; (8002620 <_Z16StartDefaultTaskPv+0x368>)
 800250e:	f00a ff13 	bl	800d338 <rclc_executor_add_subscription>
 8002512:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
	  &executor, &subscriber, &pwm_msg,
	  &pwm_callback, ON_NEW_DATA);
	if (rc != RCL_RET_OK) return;
 8002516:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800251a:	2b00      	cmp	r3, #0
 800251c:	d149      	bne.n	80025b2 <_Z16StartDefaultTaskPv+0x2fa>

	rc = rclc_executor_add_service(
 800251e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8002522:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8002526:	f507 7107 	add.w	r1, r7, #540	; 0x21c
 800252a:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 800252e:	4c3d      	ldr	r4, [pc, #244]	; (8002624 <_Z16StartDefaultTaskPv+0x36c>)
 8002530:	9400      	str	r4, [sp, #0]
 8002532:	f00a ff6d 	bl	800d410 <rclc_executor_add_service>
 8002536:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
		&executor, &setup_service, &req_setup,
		&res_setup, setup_callback);
	if (rc != RCL_RET_OK) return;
 800253a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800253e:	2b00      	cmp	r3, #0
 8002540:	d139      	bne.n	80025b6 <_Z16StartDefaultTaskPv+0x2fe>

	rc = rclc_executor_add_service(
 8002542:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8002546:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 800254a:	f507 7106 	add.w	r1, r7, #536	; 0x218
 800254e:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8002552:	4c35      	ldr	r4, [pc, #212]	; (8002628 <_Z16StartDefaultTaskPv+0x370>)
 8002554:	9400      	str	r4, [sp, #0]
 8002556:	f00a ff5b 	bl	800d410 <rclc_executor_add_service>
 800255a:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
		&executor, &control_service, &req_control,
		&res_control, control_callback);
	if (rc != RCL_RET_OK) return;
 800255e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8002562:	2b00      	cmp	r3, #0
 8002564:	d129      	bne.n	80025ba <_Z16StartDefaultTaskPv+0x302>

	Robot ScorBot = create_robot();
 8002566:	f507 731e 	add.w	r3, r7, #632	; 0x278
 800256a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800256e:	4618      	mov	r0, r3
 8002570:	f7fe fee8 	bl	8001344 <_Z12create_robotv>

	rclc_executor_spin(&executor);
 8002574:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002578:	4618      	mov	r0, r3
 800257a:	f00b f979 	bl	800d870 <rclc_executor_spin>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800257e:	2001      	movs	r0, #1
 8002580:	f006 fd5c 	bl	800903c <osDelay>
 8002584:	e7fb      	b.n	800257e <_Z16StartDefaultTaskPv+0x2c6>
	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) return;
 8002586:	bf00      	nop
 8002588:	e018      	b.n	80025bc <_Z16StartDefaultTaskPv+0x304>
	if (rc != RCL_RET_OK) return;
 800258a:	bf00      	nop
 800258c:	e016      	b.n	80025bc <_Z16StartDefaultTaskPv+0x304>
	if (rc != RCL_RET_OK) return;
 800258e:	bf00      	nop
 8002590:	e014      	b.n	80025bc <_Z16StartDefaultTaskPv+0x304>
	if (rc != RCL_RET_OK) return;
 8002592:	bf00      	nop
 8002594:	e012      	b.n	80025bc <_Z16StartDefaultTaskPv+0x304>
	if (rc != RCL_RET_OK) return;
 8002596:	bf00      	nop
 8002598:	e010      	b.n	80025bc <_Z16StartDefaultTaskPv+0x304>
	if (rc != RCL_RET_OK) return;
 800259a:	bf00      	nop
 800259c:	e00e      	b.n	80025bc <_Z16StartDefaultTaskPv+0x304>
	if (rc != RCL_RET_OK) return;
 800259e:	bf00      	nop
 80025a0:	e00c      	b.n	80025bc <_Z16StartDefaultTaskPv+0x304>
	if (rc != RCL_RET_OK) return;
 80025a2:	bf00      	nop
 80025a4:	e00a      	b.n	80025bc <_Z16StartDefaultTaskPv+0x304>
	if (rc != RCL_RET_OK) return;
 80025a6:	bf00      	nop
 80025a8:	e008      	b.n	80025bc <_Z16StartDefaultTaskPv+0x304>
	if (rc != RCL_RET_OK) return;
 80025aa:	bf00      	nop
 80025ac:	e006      	b.n	80025bc <_Z16StartDefaultTaskPv+0x304>
	if (rc != RCL_RET_OK) return;
 80025ae:	bf00      	nop
 80025b0:	e004      	b.n	80025bc <_Z16StartDefaultTaskPv+0x304>
	if (rc != RCL_RET_OK) return;
 80025b2:	bf00      	nop
 80025b4:	e002      	b.n	80025bc <_Z16StartDefaultTaskPv+0x304>
	if (rc != RCL_RET_OK) return;
 80025b6:	bf00      	nop
 80025b8:	e000      	b.n	80025bc <_Z16StartDefaultTaskPv+0x304>
	if (rc != RCL_RET_OK) return;
 80025ba:	bf00      	nop
  }
  /* USER CODE END StartDefaultTask */
}
 80025bc:	f507 771e 	add.w	r7, r7, #632	; 0x278
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bdb0      	pop	{r4, r5, r7, pc}
 80025c4:	f3af 8000 	nop.w
 80025c8:	3b9aca00 	.word	0x3b9aca00
 80025cc:	00000000 	.word	0x00000000
 80025d0:	080021d1 	.word	0x080021d1
 80025d4:	08002171 	.word	0x08002171
 80025d8:	08002151 	.word	0x08002151
 80025dc:	08002125 	.word	0x08002125
 80025e0:	200068e0 	.word	0x200068e0
 80025e4:	08002941 	.word	0x08002941
 80025e8:	08002985 	.word	0x08002985
 80025ec:	080029bd 	.word	0x080029bd
 80025f0:	08002a29 	.word	0x08002a29
 80025f4:	3b9aca00 	.word	0x3b9aca00
 80025f8:	00989680 	.word	0x00989680
 80025fc:	0801d780 	.word	0x0801d780
 8002600:	0801d78c 	.word	0x0801d78c
 8002604:	0801d794 	.word	0x0801d794
 8002608:	0801d79c 	.word	0x0801d79c
 800260c:	08000771 	.word	0x08000771
 8002610:	08000819 	.word	0x08000819
 8002614:	0801d7a8 	.word	0x0801d7a8
 8002618:	0801d7ac 	.word	0x0801d7ac
 800261c:	20006664 	.word	0x20006664
 8002620:	080006ad 	.word	0x080006ad
 8002624:	08000739 	.word	0x08000739
 8002628:	08000701 	.word	0x08000701

0800262c <_Z14cycleRobotTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_cycleRobotTask */
void cycleRobotTask(void *argument)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN cycleRobotTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002634:	2001      	movs	r0, #1
 8002636:	f006 fd01 	bl	800903c <osDelay>
 800263a:	e7fb      	b.n	8002634 <_Z14cycleRobotTaskPv+0x8>

0800263c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08c      	sub	sp, #48	; 0x30
 8002640:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002642:	f107 031c 	add.w	r3, r7, #28
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	605a      	str	r2, [r3, #4]
 800264c:	609a      	str	r2, [r3, #8]
 800264e:	60da      	str	r2, [r3, #12]
 8002650:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002652:	4b58      	ldr	r3, [pc, #352]	; (80027b4 <MX_GPIO_Init+0x178>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	4a57      	ldr	r2, [pc, #348]	; (80027b4 <MX_GPIO_Init+0x178>)
 8002658:	f043 0310 	orr.w	r3, r3, #16
 800265c:	6313      	str	r3, [r2, #48]	; 0x30
 800265e:	4b55      	ldr	r3, [pc, #340]	; (80027b4 <MX_GPIO_Init+0x178>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	61bb      	str	r3, [r7, #24]
 8002668:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800266a:	4b52      	ldr	r3, [pc, #328]	; (80027b4 <MX_GPIO_Init+0x178>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	4a51      	ldr	r2, [pc, #324]	; (80027b4 <MX_GPIO_Init+0x178>)
 8002670:	f043 0304 	orr.w	r3, r3, #4
 8002674:	6313      	str	r3, [r2, #48]	; 0x30
 8002676:	4b4f      	ldr	r3, [pc, #316]	; (80027b4 <MX_GPIO_Init+0x178>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002682:	4b4c      	ldr	r3, [pc, #304]	; (80027b4 <MX_GPIO_Init+0x178>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	4a4b      	ldr	r2, [pc, #300]	; (80027b4 <MX_GPIO_Init+0x178>)
 8002688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800268c:	6313      	str	r3, [r2, #48]	; 0x30
 800268e:	4b49      	ldr	r3, [pc, #292]	; (80027b4 <MX_GPIO_Init+0x178>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800269a:	4b46      	ldr	r3, [pc, #280]	; (80027b4 <MX_GPIO_Init+0x178>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	4a45      	ldr	r2, [pc, #276]	; (80027b4 <MX_GPIO_Init+0x178>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6313      	str	r3, [r2, #48]	; 0x30
 80026a6:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <MX_GPIO_Init+0x178>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b2:	4b40      	ldr	r3, [pc, #256]	; (80027b4 <MX_GPIO_Init+0x178>)
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	4a3f      	ldr	r2, [pc, #252]	; (80027b4 <MX_GPIO_Init+0x178>)
 80026b8:	f043 0302 	orr.w	r3, r3, #2
 80026bc:	6313      	str	r3, [r2, #48]	; 0x30
 80026be:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <MX_GPIO_Init+0x178>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026ca:	4b3a      	ldr	r3, [pc, #232]	; (80027b4 <MX_GPIO_Init+0x178>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	4a39      	ldr	r2, [pc, #228]	; (80027b4 <MX_GPIO_Init+0x178>)
 80026d0:	f043 0308 	orr.w	r3, r3, #8
 80026d4:	6313      	str	r3, [r2, #48]	; 0x30
 80026d6:	4b37      	ldr	r3, [pc, #220]	; (80027b4 <MX_GPIO_Init+0x178>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	607b      	str	r3, [r7, #4]
 80026e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026e2:	4b34      	ldr	r3, [pc, #208]	; (80027b4 <MX_GPIO_Init+0x178>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	4a33      	ldr	r2, [pc, #204]	; (80027b4 <MX_GPIO_Init+0x178>)
 80026e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026ec:	6313      	str	r3, [r2, #48]	; 0x30
 80026ee:	4b31      	ldr	r3, [pc, #196]	; (80027b4 <MX_GPIO_Init+0x178>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80026fa:	2200      	movs	r2, #0
 80026fc:	f244 0181 	movw	r1, #16513	; 0x4081
 8002700:	482d      	ldr	r0, [pc, #180]	; (80027b8 <MX_GPIO_Init+0x17c>)
 8002702:	f002 f9a3 	bl	8004a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, MOTOR5_INA_Pin|MOTOR5_INB_Pin|MOTOR1_INA_Pin|MOTOR1_INB_Pin
 8002706:	2200      	movs	r2, #0
 8002708:	f24c 01ff 	movw	r1, #49407	; 0xc0ff
 800270c:	482b      	ldr	r0, [pc, #172]	; (80027bc <MX_GPIO_Init+0x180>)
 800270e:	f002 f99d 	bl	8004a4c <HAL_GPIO_WritePin>
                          |MOTOR2_INA_Pin|MOTOR2_INB_Pin|MOTOR3_INA_Pin|MOTOR3_INB_Pin
                          |MOTOR4_INA_Pin|MOTOR4_INB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, MOTOR6_INA_Pin|MOTOR6_INB_Pin|PIN_TOGGLE_Pin|MOTORS_EN_Pin
 8002712:	2200      	movs	r2, #0
 8002714:	f647 616c 	movw	r1, #32364	; 0x7e6c
 8002718:	4829      	ldr	r0, [pc, #164]	; (80027c0 <MX_GPIO_Init+0x184>)
 800271a:	f002 f997 	bl	8004a4c <HAL_GPIO_WritePin>
                          |MOTOR1_END_Pin|MOTOR2_END_Pin|MOTOR3_END_Pin|MOTOR4_END_Pin
                          |MOTOR5_END_Pin|MOTOR6_END_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800271e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002724:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800272e:	f107 031c 	add.w	r3, r7, #28
 8002732:	4619      	mov	r1, r3
 8002734:	4823      	ldr	r0, [pc, #140]	; (80027c4 <MX_GPIO_Init+0x188>)
 8002736:	f001 ffc5 	bl	80046c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800273a:	f244 0381 	movw	r3, #16513	; 0x4081
 800273e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002740:	2301      	movs	r3, #1
 8002742:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002748:	2300      	movs	r3, #0
 800274a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800274c:	f107 031c 	add.w	r3, r7, #28
 8002750:	4619      	mov	r1, r3
 8002752:	4819      	ldr	r0, [pc, #100]	; (80027b8 <MX_GPIO_Init+0x17c>)
 8002754:	f001 ffb6 	bl	80046c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = MOTOR5_INA_Pin|MOTOR5_INB_Pin|MOTOR1_INA_Pin|MOTOR1_INB_Pin
 8002758:	f24c 03ff 	movw	r3, #49407	; 0xc0ff
 800275c:	61fb      	str	r3, [r7, #28]
                          |MOTOR2_INA_Pin|MOTOR2_INB_Pin|MOTOR3_INA_Pin|MOTOR3_INB_Pin
                          |MOTOR4_INA_Pin|MOTOR4_INB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800275e:	2301      	movs	r3, #1
 8002760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002766:	2300      	movs	r3, #0
 8002768:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800276a:	f107 031c 	add.w	r3, r7, #28
 800276e:	4619      	mov	r1, r3
 8002770:	4812      	ldr	r0, [pc, #72]	; (80027bc <MX_GPIO_Init+0x180>)
 8002772:	f001 ffa7 	bl	80046c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = MOTOR6_INA_Pin|MOTOR6_INB_Pin|PIN_TOGGLE_Pin|MOTORS_EN_Pin
 8002776:	f647 636c 	movw	r3, #32364	; 0x7e6c
 800277a:	61fb      	str	r3, [r7, #28]
                          |MOTOR1_END_Pin|MOTOR2_END_Pin|MOTOR3_END_Pin|MOTOR4_END_Pin
                          |MOTOR5_END_Pin|MOTOR6_END_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800277c:	2301      	movs	r3, #1
 800277e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002780:	2300      	movs	r3, #0
 8002782:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002784:	2300      	movs	r3, #0
 8002786:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002788:	f107 031c 	add.w	r3, r7, #28
 800278c:	4619      	mov	r1, r3
 800278e:	480c      	ldr	r0, [pc, #48]	; (80027c0 <MX_GPIO_Init+0x184>)
 8002790:	f001 ff98 	bl	80046c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002798:	2300      	movs	r3, #0
 800279a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80027a0:	f107 031c 	add.w	r3, r7, #28
 80027a4:	4619      	mov	r1, r3
 80027a6:	4806      	ldr	r0, [pc, #24]	; (80027c0 <MX_GPIO_Init+0x184>)
 80027a8:	f001 ff8c 	bl	80046c4 <HAL_GPIO_Init>

}
 80027ac:	bf00      	nop
 80027ae:	3730      	adds	r7, #48	; 0x30
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40023800 	.word	0x40023800
 80027b8:	40020400 	.word	0x40020400
 80027bc:	40020c00 	.word	0x40020c00
 80027c0:	40021800 	.word	0x40021800
 80027c4:	40020800 	.word	0x40020800

080027c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027cc:	f001 fa31 	bl	8003c32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027d0:	f000 f81e 	bl	8002810 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027d4:	f7ff ff32 	bl	800263c <MX_GPIO_Init>
  MX_DMA_Init();
 80027d8:	f7ff fc7e 	bl	80020d8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80027dc:	f001 f850 	bl	8003880 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80027e0:	f001 f94e 	bl	8003a80 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 80027e4:	f000 fbc8 	bl	8002f78 <MX_TIM1_Init>
  MX_TIM2_Init();
 80027e8:	f000 fc7a 	bl	80030e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80027ec:	f000 fccc 	bl	8003188 <MX_TIM3_Init>
  MX_TIM4_Init();
 80027f0:	f000 fd20 	bl	8003234 <MX_TIM4_Init>
  MX_TIM5_Init();
 80027f4:	f000 fd74 	bl	80032e0 <MX_TIM5_Init>
  MX_TIM8_Init();
 80027f8:	f000 fdc8 	bl	800338c <MX_TIM8_Init>
  MX_TIM9_Init();
 80027fc:	f000 fe20 	bl	8003440 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002800:	f006 fb0c 	bl	8008e1c <osKernelInitialize>
  MX_FREERTOS_Init();
 8002804:	f7ff fd38 	bl	8002278 <_Z16MX_FREERTOS_Initv>

  /* Start scheduler */
  osKernelStart();
 8002808:	f006 fb3c 	bl	8008e84 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800280c:	e7fe      	b.n	800280c <main+0x44>
	...

08002810 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b094      	sub	sp, #80	; 0x50
 8002814:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002816:	f107 031c 	add.w	r3, r7, #28
 800281a:	2234      	movs	r2, #52	; 0x34
 800281c:	2100      	movs	r1, #0
 800281e:	4618      	mov	r0, r3
 8002820:	f019 ff88 	bl	801c734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002824:	f107 0308 	add.w	r3, r7, #8
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	60da      	str	r2, [r3, #12]
 8002832:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002834:	f002 fa6c 	bl	8004d10 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002838:	4b33      	ldr	r3, [pc, #204]	; (8002908 <_Z18SystemClock_Configv+0xf8>)
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	4a32      	ldr	r2, [pc, #200]	; (8002908 <_Z18SystemClock_Configv+0xf8>)
 800283e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002842:	6413      	str	r3, [r2, #64]	; 0x40
 8002844:	4b30      	ldr	r3, [pc, #192]	; (8002908 <_Z18SystemClock_Configv+0xf8>)
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284c:	607b      	str	r3, [r7, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002850:	4b2e      	ldr	r3, [pc, #184]	; (800290c <_Z18SystemClock_Configv+0xfc>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002858:	4a2c      	ldr	r2, [pc, #176]	; (800290c <_Z18SystemClock_Configv+0xfc>)
 800285a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	4b2a      	ldr	r3, [pc, #168]	; (800290c <_Z18SystemClock_Configv+0xfc>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002868:	603b      	str	r3, [r7, #0]
 800286a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800286c:	2301      	movs	r3, #1
 800286e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002870:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002874:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002876:	2302      	movs	r3, #2
 8002878:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800287a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800287e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002880:	2304      	movs	r3, #4
 8002882:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002884:	2360      	movs	r3, #96	; 0x60
 8002886:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002888:	2302      	movs	r3, #2
 800288a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800288c:	2304      	movs	r3, #4
 800288e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002890:	2302      	movs	r3, #2
 8002892:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002894:	f107 031c 	add.w	r3, r7, #28
 8002898:	4618      	mov	r0, r3
 800289a:	f002 fa99 	bl	8004dd0 <HAL_RCC_OscConfig>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf14      	ite	ne
 80028a4:	2301      	movne	r3, #1
 80028a6:	2300      	moveq	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80028ae:	f000 f841 	bl	8002934 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80028b2:	f002 fa3d 	bl	8004d30 <HAL_PWREx_EnableOverDrive>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	bf14      	ite	ne
 80028bc:	2301      	movne	r3, #1
 80028be:	2300      	moveq	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 80028c6:	f000 f835 	bl	8002934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028ca:	230f      	movs	r3, #15
 80028cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028ce:	2302      	movs	r3, #2
 80028d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028d2:	2300      	movs	r3, #0
 80028d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028dc:	2300      	movs	r3, #0
 80028de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80028e0:	f107 0308 	add.w	r3, r7, #8
 80028e4:	2103      	movs	r1, #3
 80028e6:	4618      	mov	r0, r3
 80028e8:	f002 fd20 	bl	800532c <HAL_RCC_ClockConfig>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	bf14      	ite	ne
 80028f2:	2301      	movne	r3, #1
 80028f4:	2300      	moveq	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <_Z18SystemClock_Configv+0xf0>
  {
    Error_Handler();
 80028fc:	f000 f81a 	bl	8002934 <Error_Handler>
  }
}
 8002900:	bf00      	nop
 8002902:	3750      	adds	r7, #80	; 0x50
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40023800 	.word	0x40023800
 800290c:	40007000 	.word	0x40007000

08002910 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a04      	ldr	r2, [pc, #16]	; (8002930 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d101      	bne.n	8002926 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002922:	f001 f993 	bl	8003c4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40001000 	.word	0x40001000

08002934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002938:	b672      	cpsid	i
}
 800293a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800293c:	e7fe      	b.n	800293c <Error_Handler+0x8>
	...

08002940 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800294a:	4b0c      	ldr	r3, [pc, #48]	; (800297c <microros_allocate+0x3c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4413      	add	r3, r2
 8002954:	461a      	mov	r2, r3
 8002956:	4b09      	ldr	r3, [pc, #36]	; (800297c <microros_allocate+0x3c>)
 8002958:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <microros_allocate+0x40>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4413      	add	r3, r2
 8002964:	461a      	mov	r2, r3
 8002966:	4b06      	ldr	r3, [pc, #24]	; (8002980 <microros_allocate+0x40>)
 8002968:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff f960 	bl	8001c30 <pvPortMallocMicroROS>
 8002970:	4603      	mov	r3, r0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20006670 	.word	0x20006670
 8002980:	20006674 	.word	0x20006674

08002984 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00c      	beq.n	80029ae <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff fa73 	bl	8001e80 <getBlockSize>
 800299a:	4603      	mov	r3, r0
 800299c:	4a06      	ldr	r2, [pc, #24]	; (80029b8 <microros_deallocate+0x34>)
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	4b04      	ldr	r3, [pc, #16]	; (80029b8 <microros_deallocate+0x34>)
 80029a6:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff fa0b 	bl	8001dc4 <vPortFreeMicroROS>
  }
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20006674 	.word	0x20006674

080029bc <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80029c8:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <microros_reallocate+0x64>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	4413      	add	r3, r2
 80029d2:	461a      	mov	r2, r3
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <microros_reallocate+0x64>)
 80029d6:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80029d8:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <microros_reallocate+0x68>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	4413      	add	r3, r2
 80029e2:	461a      	mov	r2, r3
 80029e4:	4b0f      	ldr	r3, [pc, #60]	; (8002a24 <microros_reallocate+0x68>)
 80029e6:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d104      	bne.n	80029f8 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80029ee:	68b8      	ldr	r0, [r7, #8]
 80029f0:	f7ff f91e 	bl	8001c30 <pvPortMallocMicroROS>
 80029f4:	4603      	mov	r3, r0
 80029f6:	e00e      	b.n	8002a16 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80029f8:	68f8      	ldr	r0, [r7, #12]
 80029fa:	f7ff fa41 	bl	8001e80 <getBlockSize>
 80029fe:	4603      	mov	r3, r0
 8002a00:	4a08      	ldr	r2, [pc, #32]	; (8002a24 <microros_reallocate+0x68>)
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	461a      	mov	r2, r3
 8002a08:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <microros_reallocate+0x68>)
 8002a0a:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8002a0c:	68b9      	ldr	r1, [r7, #8]
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f7ff fa54 	bl	8001ebc <pvPortReallocMicroROS>
 8002a14:	4603      	mov	r3, r0
  }
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20006670 	.word	0x20006670
 8002a24:	20006674 	.word	0x20006674

08002a28 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	fb02 f303 	mul.w	r3, r2, r3
 8002a3c:	4a0c      	ldr	r2, [pc, #48]	; (8002a70 <microros_zero_allocate+0x48>)
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	4413      	add	r3, r2
 8002a42:	461a      	mov	r2, r3
 8002a44:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <microros_zero_allocate+0x48>)
 8002a46:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	fb02 f303 	mul.w	r3, r2, r3
 8002a50:	4a08      	ldr	r2, [pc, #32]	; (8002a74 <microros_zero_allocate+0x4c>)
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	4413      	add	r3, r2
 8002a56:	461a      	mov	r2, r3
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <microros_zero_allocate+0x4c>)
 8002a5a:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f7ff fa59 	bl	8001f16 <pvPortCallocMicroROS>
 8002a64:	4603      	mov	r3, r0
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	20006670 	.word	0x20006670
 8002a74:	20006674 	.word	0x20006674

08002a78 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002a78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a7c:	b086      	sub	sp, #24
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8002a86:	2300      	movs	r3, #0
 8002a88:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002a8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a8e:	a320      	add	r3, pc, #128	; (adr r3, 8002b10 <UTILS_NanosecondsToTimespec+0x98>)
 8002a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a94:	f7fd fc3c 	bl	8000310 <__aeabi_ldivmod>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8002aa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002aa6:	a31a      	add	r3, pc, #104	; (adr r3, 8002b10 <UTILS_NanosecondsToTimespec+0x98>)
 8002aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aac:	f7fd fc30 	bl	8000310 <__aeabi_ldivmod>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	da20      	bge.n	8002afe <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	4a11      	ldr	r2, [pc, #68]	; (8002b08 <UTILS_NanosecondsToTimespec+0x90>)
 8002ac2:	fb82 1203 	smull	r1, r2, r2, r3
 8002ac6:	1712      	asrs	r2, r2, #28
 8002ac8:	17db      	asrs	r3, r3, #31
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	3301      	adds	r3, #1
 8002ace:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad6:	6979      	ldr	r1, [r7, #20]
 8002ad8:	17c8      	asrs	r0, r1, #31
 8002ada:	460c      	mov	r4, r1
 8002adc:	4605      	mov	r5, r0
 8002ade:	ebb2 0804 	subs.w	r8, r2, r4
 8002ae2:	eb63 0905 	sbc.w	r9, r3, r5
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	4906      	ldr	r1, [pc, #24]	; (8002b0c <UTILS_NanosecondsToTimespec+0x94>)
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	441a      	add	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	609a      	str	r2, [r3, #8]
    }
}
 8002afe:	bf00      	nop
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b08:	44b82fa1 	.word	0x44b82fa1
 8002b0c:	3b9aca00 	.word	0x3b9aca00
 8002b10:	3b9aca00 	.word	0x3b9aca00
 8002b14:	00000000 	.word	0x00000000

08002b18 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b1c:	b08e      	sub	sp, #56	; 0x38
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6278      	str	r0, [r7, #36]	; 0x24
 8002b22:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8002b24:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002b28:	2300      	movs	r3, #0
 8002b2a:	6013      	str	r3, [r2, #0]
 8002b2c:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002b3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f007 fda0 	bl	800a684 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8002b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b46:	17da      	asrs	r2, r3, #31
 8002b48:	61bb      	str	r3, [r7, #24]
 8002b4a:	61fa      	str	r2, [r7, #28]
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	69b9      	ldr	r1, [r7, #24]
 8002b56:	000b      	movs	r3, r1
 8002b58:	2200      	movs	r2, #0
 8002b5a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b60:	2200      	movs	r2, #0
 8002b62:	461c      	mov	r4, r3
 8002b64:	4615      	mov	r5, r2
 8002b66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002b6a:	1911      	adds	r1, r2, r4
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	416b      	adcs	r3, r5
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002b76:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002b7a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	f04f 0400 	mov.w	r4, #0
 8002b86:	f04f 0500 	mov.w	r5, #0
 8002b8a:	015d      	lsls	r5, r3, #5
 8002b8c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002b90:	0154      	lsls	r4, r2, #5
 8002b92:	4622      	mov	r2, r4
 8002b94:	462b      	mov	r3, r5
 8002b96:	ebb2 0800 	subs.w	r8, r2, r0
 8002b9a:	eb63 0901 	sbc.w	r9, r3, r1
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002baa:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002bae:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8002bb2:	4690      	mov	r8, r2
 8002bb4:	4699      	mov	r9, r3
 8002bb6:	eb18 0a00 	adds.w	sl, r8, r0
 8002bba:	eb49 0b01 	adc.w	fp, r9, r1
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 0300 	mov.w	r3, #0
 8002bc6:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002bca:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bce:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bd2:	ebb2 040a 	subs.w	r4, r2, sl
 8002bd6:	603c      	str	r4, [r7, #0]
 8002bd8:	eb63 030b 	sbc.w	r3, r3, fp
 8002bdc:	607b      	str	r3, [r7, #4]
 8002bde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002be2:	4623      	mov	r3, r4
 8002be4:	181b      	adds	r3, r3, r0
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	462b      	mov	r3, r5
 8002bea:	eb41 0303 	adc.w	r3, r1, r3
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	6a3a      	ldr	r2, [r7, #32]
 8002bf2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bf6:	f7ff ff3f 	bl	8002a78 <UTILS_NanosecondsToTimespec>

    return 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3738      	adds	r7, #56	; 0x38
 8002c00:	46bd      	mov	sp, r7
 8002c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002c08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c0e:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <HAL_MspInit+0x4c>)
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	4a10      	ldr	r2, [pc, #64]	; (8002c54 <HAL_MspInit+0x4c>)
 8002c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c18:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1a:	4b0e      	ldr	r3, [pc, #56]	; (8002c54 <HAL_MspInit+0x4c>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c22:	607b      	str	r3, [r7, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c26:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <HAL_MspInit+0x4c>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <HAL_MspInit+0x4c>)
 8002c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c30:	6453      	str	r3, [r2, #68]	; 0x44
 8002c32:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <HAL_MspInit+0x4c>)
 8002c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	210f      	movs	r1, #15
 8002c42:	f06f 0001 	mvn.w	r0, #1
 8002c46:	f001 f8fd 	bl	8003e44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40023800 	.word	0x40023800

08002c58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08e      	sub	sp, #56	; 0x38
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002c68:	4b33      	ldr	r3, [pc, #204]	; (8002d38 <HAL_InitTick+0xe0>)
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	4a32      	ldr	r2, [pc, #200]	; (8002d38 <HAL_InitTick+0xe0>)
 8002c6e:	f043 0310 	orr.w	r3, r3, #16
 8002c72:	6413      	str	r3, [r2, #64]	; 0x40
 8002c74:	4b30      	ldr	r3, [pc, #192]	; (8002d38 <HAL_InitTick+0xe0>)
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c80:	f107 0210 	add.w	r2, r7, #16
 8002c84:	f107 0314 	add.w	r3, r7, #20
 8002c88:	4611      	mov	r1, r2
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f002 fd74 	bl	8005778 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d103      	bne.n	8002ca2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c9a:	f002 fd45 	bl	8005728 <HAL_RCC_GetPCLK1Freq>
 8002c9e:	6378      	str	r0, [r7, #52]	; 0x34
 8002ca0:	e004      	b.n	8002cac <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002ca2:	f002 fd41 	bl	8005728 <HAL_RCC_GetPCLK1Freq>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cae:	4a23      	ldr	r2, [pc, #140]	; (8002d3c <HAL_InitTick+0xe4>)
 8002cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb4:	0c9b      	lsrs	r3, r3, #18
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002cba:	4b21      	ldr	r3, [pc, #132]	; (8002d40 <HAL_InitTick+0xe8>)
 8002cbc:	4a21      	ldr	r2, [pc, #132]	; (8002d44 <HAL_InitTick+0xec>)
 8002cbe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002cc0:	4b1f      	ldr	r3, [pc, #124]	; (8002d40 <HAL_InitTick+0xe8>)
 8002cc2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002cc6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002cc8:	4a1d      	ldr	r2, [pc, #116]	; (8002d40 <HAL_InitTick+0xe8>)
 8002cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ccc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002cce:	4b1c      	ldr	r3, [pc, #112]	; (8002d40 <HAL_InitTick+0xe8>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd4:	4b1a      	ldr	r3, [pc, #104]	; (8002d40 <HAL_InitTick+0xe8>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cda:	4b19      	ldr	r3, [pc, #100]	; (8002d40 <HAL_InitTick+0xe8>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002ce0:	4817      	ldr	r0, [pc, #92]	; (8002d40 <HAL_InitTick+0xe8>)
 8002ce2:	f003 f9a3 	bl	800602c <HAL_TIM_Base_Init>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002cec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d11b      	bne.n	8002d2c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002cf4:	4812      	ldr	r0, [pc, #72]	; (8002d40 <HAL_InitTick+0xe8>)
 8002cf6:	f003 f9fb 	bl	80060f0 <HAL_TIM_Base_Start_IT>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002d00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d111      	bne.n	8002d2c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d08:	2036      	movs	r0, #54	; 0x36
 8002d0a:	f001 f8b7 	bl	8003e7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b0f      	cmp	r3, #15
 8002d12:	d808      	bhi.n	8002d26 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002d14:	2200      	movs	r2, #0
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	2036      	movs	r0, #54	; 0x36
 8002d1a:	f001 f893 	bl	8003e44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d1e:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <HAL_InitTick+0xf0>)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	e002      	b.n	8002d2c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002d2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3738      	adds	r7, #56	; 0x38
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	431bde83 	.word	0x431bde83
 8002d40:	20006678 	.word	0x20006678
 8002d44:	40001000 	.word	0x40001000
 8002d48:	20000008 	.word	0x20000008

08002d4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d50:	e7fe      	b.n	8002d50 <NMI_Handler+0x4>

08002d52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d52:	b480      	push	{r7}
 8002d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d56:	e7fe      	b.n	8002d56 <HardFault_Handler+0x4>

08002d58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d5c:	e7fe      	b.n	8002d5c <MemManage_Handler+0x4>

08002d5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d62:	e7fe      	b.n	8002d62 <BusFault_Handler+0x4>

08002d64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d68:	e7fe      	b.n	8002d68 <UsageFault_Handler+0x4>

08002d6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d6e:	bf00      	nop
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002d7c:	4802      	ldr	r0, [pc, #8]	; (8002d88 <DMA1_Stream1_IRQHandler+0x10>)
 8002d7e:	f001 fa2b 	bl	80041d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	200069c8 	.word	0x200069c8

08002d8c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002d90:	4802      	ldr	r0, [pc, #8]	; (8002d9c <DMA1_Stream3_IRQHandler+0x10>)
 8002d92:	f001 fa21 	bl	80041d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20006968 	.word	0x20006968

08002da0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002da4:	4802      	ldr	r0, [pc, #8]	; (8002db0 <USART3_IRQHandler+0x10>)
 8002da6:	f004 fb3d 	bl	8007424 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	200068e0 	.word	0x200068e0

08002db4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002db8:	4802      	ldr	r0, [pc, #8]	; (8002dc4 <TIM6_DAC_IRQHandler+0x10>)
 8002dba:	f003 fb0f 	bl	80063dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20006678 	.word	0x20006678

08002dc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return 1;
 8002dcc:	2301      	movs	r3, #1
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <_kill>:

int _kill(int pid, int sig)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002de2:	f019 fda3 	bl	801c92c <__errno>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2216      	movs	r2, #22
 8002dea:	601a      	str	r2, [r3, #0]
  return -1;
 8002dec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <_exit>:

void _exit (int status)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff ffe7 	bl	8002dd8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e0a:	e7fe      	b.n	8002e0a <_exit+0x12>

08002e0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	e00a      	b.n	8002e34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e1e:	f3af 8000 	nop.w
 8002e22:	4601      	mov	r1, r0
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	60ba      	str	r2, [r7, #8]
 8002e2a:	b2ca      	uxtb	r2, r1
 8002e2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	3301      	adds	r3, #1
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	dbf0      	blt.n	8002e1e <_read+0x12>
  }

  return len;
 8002e3c:	687b      	ldr	r3, [r7, #4]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b086      	sub	sp, #24
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	e009      	b.n	8002e6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	1c5a      	adds	r2, r3, #1
 8002e5c:	60ba      	str	r2, [r7, #8]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	dbf1      	blt.n	8002e58 <_write+0x12>
  }
  return len;
 8002e74:	687b      	ldr	r3, [r7, #4]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <_close>:

int _close(int file)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
 8002e9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ea6:	605a      	str	r2, [r3, #4]
  return 0;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <_isatty>:

int _isatty(int file)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ebe:	2301      	movs	r3, #1
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
	...

08002ee8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ef0:	4a14      	ldr	r2, [pc, #80]	; (8002f44 <_sbrk+0x5c>)
 8002ef2:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <_sbrk+0x60>)
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002efc:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <_sbrk+0x64>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d102      	bne.n	8002f0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f04:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <_sbrk+0x64>)
 8002f06:	4a12      	ldr	r2, [pc, #72]	; (8002f50 <_sbrk+0x68>)
 8002f08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f0a:	4b10      	ldr	r3, [pc, #64]	; (8002f4c <_sbrk+0x64>)
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4413      	add	r3, r2
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d207      	bcs.n	8002f28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f18:	f019 fd08 	bl	801c92c <__errno>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	220c      	movs	r2, #12
 8002f20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f26:	e009      	b.n	8002f3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f28:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <_sbrk+0x64>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f2e:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <_sbrk+0x64>)
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4413      	add	r3, r2
 8002f36:	4a05      	ldr	r2, [pc, #20]	; (8002f4c <_sbrk+0x64>)
 8002f38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20080000 	.word	0x20080000
 8002f48:	00000400 	.word	0x00000400
 8002f4c:	200066c8 	.word	0x200066c8
 8002f50:	20010cf0 	.word	0x20010cf0

08002f54 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f58:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <SystemInit+0x20>)
 8002f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5e:	4a05      	ldr	r2, [pc, #20]	; (8002f74 <SystemInit+0x20>)
 8002f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f68:	bf00      	nop
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b096      	sub	sp, #88	; 0x58
 8002f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f7e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	605a      	str	r2, [r3, #4]
 8002f88:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
 8002f92:	605a      	str	r2, [r3, #4]
 8002f94:	609a      	str	r2, [r3, #8]
 8002f96:	60da      	str	r2, [r3, #12]
 8002f98:	611a      	str	r2, [r3, #16]
 8002f9a:	615a      	str	r2, [r3, #20]
 8002f9c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f9e:	1d3b      	adds	r3, r7, #4
 8002fa0:	222c      	movs	r2, #44	; 0x2c
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f019 fbc5 	bl	801c734 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002faa:	4b4b      	ldr	r3, [pc, #300]	; (80030d8 <MX_TIM1_Init+0x160>)
 8002fac:	4a4b      	ldr	r2, [pc, #300]	; (80030dc <MX_TIM1_Init+0x164>)
 8002fae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002fb0:	4b49      	ldr	r3, [pc, #292]	; (80030d8 <MX_TIM1_Init+0x160>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fb6:	4b48      	ldr	r3, [pc, #288]	; (80030d8 <MX_TIM1_Init+0x160>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002fbc:	4b46      	ldr	r3, [pc, #280]	; (80030d8 <MX_TIM1_Init+0x160>)
 8002fbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fc2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fc4:	4b44      	ldr	r3, [pc, #272]	; (80030d8 <MX_TIM1_Init+0x160>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002fca:	4b43      	ldr	r3, [pc, #268]	; (80030d8 <MX_TIM1_Init+0x160>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fd0:	4b41      	ldr	r3, [pc, #260]	; (80030d8 <MX_TIM1_Init+0x160>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002fd6:	4840      	ldr	r0, [pc, #256]	; (80030d8 <MX_TIM1_Init+0x160>)
 8002fd8:	f003 f902 	bl	80061e0 <HAL_TIM_PWM_Init>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002fe2:	f7ff fca7 	bl	8002934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002fea:	2300      	movs	r3, #0
 8002fec:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ff2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4837      	ldr	r0, [pc, #220]	; (80030d8 <MX_TIM1_Init+0x160>)
 8002ffa:	f003 ff49 	bl	8006e90 <HAL_TIMEx_MasterConfigSynchronization>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003004:	f7ff fc96 	bl	8002934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003008:	2360      	movs	r3, #96	; 0x60
 800300a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003010:	2300      	movs	r3, #0
 8003012:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003014:	2300      	movs	r3, #0
 8003016:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003018:	2300      	movs	r3, #0
 800301a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800301c:	2300      	movs	r3, #0
 800301e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003020:	2300      	movs	r3, #0
 8003022:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003024:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003028:	2200      	movs	r2, #0
 800302a:	4619      	mov	r1, r3
 800302c:	482a      	ldr	r0, [pc, #168]	; (80030d8 <MX_TIM1_Init+0x160>)
 800302e:	f003 faf5 	bl	800661c <HAL_TIM_PWM_ConfigChannel>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003038:	f7ff fc7c 	bl	8002934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800303c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003040:	2204      	movs	r2, #4
 8003042:	4619      	mov	r1, r3
 8003044:	4824      	ldr	r0, [pc, #144]	; (80030d8 <MX_TIM1_Init+0x160>)
 8003046:	f003 fae9 	bl	800661c <HAL_TIM_PWM_ConfigChannel>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8003050:	f7ff fc70 	bl	8002934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003054:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003058:	2208      	movs	r2, #8
 800305a:	4619      	mov	r1, r3
 800305c:	481e      	ldr	r0, [pc, #120]	; (80030d8 <MX_TIM1_Init+0x160>)
 800305e:	f003 fadd 	bl	800661c <HAL_TIM_PWM_ConfigChannel>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8003068:	f7ff fc64 	bl	8002934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800306c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003070:	220c      	movs	r2, #12
 8003072:	4619      	mov	r1, r3
 8003074:	4818      	ldr	r0, [pc, #96]	; (80030d8 <MX_TIM1_Init+0x160>)
 8003076:	f003 fad1 	bl	800661c <HAL_TIM_PWM_ConfigChannel>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8003080:	f7ff fc58 	bl	8002934 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003084:	2300      	movs	r3, #0
 8003086:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003088:	2300      	movs	r3, #0
 800308a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800308c:	2300      	movs	r3, #0
 800308e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003098:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800309c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80030a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80030b4:	1d3b      	adds	r3, r7, #4
 80030b6:	4619      	mov	r1, r3
 80030b8:	4807      	ldr	r0, [pc, #28]	; (80030d8 <MX_TIM1_Init+0x160>)
 80030ba:	f003 ff77 	bl	8006fac <HAL_TIMEx_ConfigBreakDeadTime>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <MX_TIM1_Init+0x150>
  {
    Error_Handler();
 80030c4:	f7ff fc36 	bl	8002934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80030c8:	4803      	ldr	r0, [pc, #12]	; (80030d8 <MX_TIM1_Init+0x160>)
 80030ca:	f000 fb7d 	bl	80037c8 <HAL_TIM_MspPostInit>

}
 80030ce:	bf00      	nop
 80030d0:	3758      	adds	r7, #88	; 0x58
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	200066cc 	.word	0x200066cc
 80030dc:	40010000 	.word	0x40010000

080030e0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08c      	sub	sp, #48	; 0x30
 80030e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80030e6:	f107 030c 	add.w	r3, r7, #12
 80030ea:	2224      	movs	r2, #36	; 0x24
 80030ec:	2100      	movs	r1, #0
 80030ee:	4618      	mov	r0, r3
 80030f0:	f019 fb20 	bl	801c734 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030f4:	463b      	mov	r3, r7
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	605a      	str	r2, [r3, #4]
 80030fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80030fe:	4b21      	ldr	r3, [pc, #132]	; (8003184 <MX_TIM2_Init+0xa4>)
 8003100:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003104:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003106:	4b1f      	ldr	r3, [pc, #124]	; (8003184 <MX_TIM2_Init+0xa4>)
 8003108:	2200      	movs	r2, #0
 800310a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800310c:	4b1d      	ldr	r3, [pc, #116]	; (8003184 <MX_TIM2_Init+0xa4>)
 800310e:	2200      	movs	r2, #0
 8003110:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003112:	4b1c      	ldr	r3, [pc, #112]	; (8003184 <MX_TIM2_Init+0xa4>)
 8003114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003118:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800311a:	4b1a      	ldr	r3, [pc, #104]	; (8003184 <MX_TIM2_Init+0xa4>)
 800311c:	2200      	movs	r2, #0
 800311e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003120:	4b18      	ldr	r3, [pc, #96]	; (8003184 <MX_TIM2_Init+0xa4>)
 8003122:	2200      	movs	r2, #0
 8003124:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003126:	2301      	movs	r3, #1
 8003128:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800312a:	2300      	movs	r3, #0
 800312c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800312e:	2301      	movs	r3, #1
 8003130:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003132:	2300      	movs	r3, #0
 8003134:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800313a:	2300      	movs	r3, #0
 800313c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800313e:	2301      	movs	r3, #1
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003142:	2300      	movs	r3, #0
 8003144:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003146:	2300      	movs	r3, #0
 8003148:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800314a:	f107 030c 	add.w	r3, r7, #12
 800314e:	4619      	mov	r1, r3
 8003150:	480c      	ldr	r0, [pc, #48]	; (8003184 <MX_TIM2_Init+0xa4>)
 8003152:	f003 f89d 	bl	8006290 <HAL_TIM_Encoder_Init>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800315c:	f7ff fbea 	bl	8002934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003160:	2300      	movs	r3, #0
 8003162:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003164:	2300      	movs	r3, #0
 8003166:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003168:	463b      	mov	r3, r7
 800316a:	4619      	mov	r1, r3
 800316c:	4805      	ldr	r0, [pc, #20]	; (8003184 <MX_TIM2_Init+0xa4>)
 800316e:	f003 fe8f 	bl	8006e90 <HAL_TIMEx_MasterConfigSynchronization>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003178:	f7ff fbdc 	bl	8002934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800317c:	bf00      	nop
 800317e:	3730      	adds	r7, #48	; 0x30
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	20006718 	.word	0x20006718

08003188 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08c      	sub	sp, #48	; 0x30
 800318c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800318e:	f107 030c 	add.w	r3, r7, #12
 8003192:	2224      	movs	r2, #36	; 0x24
 8003194:	2100      	movs	r1, #0
 8003196:	4618      	mov	r0, r3
 8003198:	f019 facc 	bl	801c734 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800319c:	463b      	mov	r3, r7
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	605a      	str	r2, [r3, #4]
 80031a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80031a6:	4b21      	ldr	r3, [pc, #132]	; (800322c <MX_TIM3_Init+0xa4>)
 80031a8:	4a21      	ldr	r2, [pc, #132]	; (8003230 <MX_TIM3_Init+0xa8>)
 80031aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80031ac:	4b1f      	ldr	r3, [pc, #124]	; (800322c <MX_TIM3_Init+0xa4>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031b2:	4b1e      	ldr	r3, [pc, #120]	; (800322c <MX_TIM3_Init+0xa4>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80031b8:	4b1c      	ldr	r3, [pc, #112]	; (800322c <MX_TIM3_Init+0xa4>)
 80031ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031c0:	4b1a      	ldr	r3, [pc, #104]	; (800322c <MX_TIM3_Init+0xa4>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031c6:	4b19      	ldr	r3, [pc, #100]	; (800322c <MX_TIM3_Init+0xa4>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80031cc:	2301      	movs	r3, #1
 80031ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80031d0:	2300      	movs	r3, #0
 80031d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80031d4:	2301      	movs	r3, #1
 80031d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80031d8:	2300      	movs	r3, #0
 80031da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80031e0:	2300      	movs	r3, #0
 80031e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80031e4:	2301      	movs	r3, #1
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80031e8:	2300      	movs	r3, #0
 80031ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80031ec:	2300      	movs	r3, #0
 80031ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80031f0:	f107 030c 	add.w	r3, r7, #12
 80031f4:	4619      	mov	r1, r3
 80031f6:	480d      	ldr	r0, [pc, #52]	; (800322c <MX_TIM3_Init+0xa4>)
 80031f8:	f003 f84a 	bl	8006290 <HAL_TIM_Encoder_Init>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003202:	f7ff fb97 	bl	8002934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003206:	2300      	movs	r3, #0
 8003208:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800320a:	2300      	movs	r3, #0
 800320c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800320e:	463b      	mov	r3, r7
 8003210:	4619      	mov	r1, r3
 8003212:	4806      	ldr	r0, [pc, #24]	; (800322c <MX_TIM3_Init+0xa4>)
 8003214:	f003 fe3c 	bl	8006e90 <HAL_TIMEx_MasterConfigSynchronization>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800321e:	f7ff fb89 	bl	8002934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003222:	bf00      	nop
 8003224:	3730      	adds	r7, #48	; 0x30
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	20006764 	.word	0x20006764
 8003230:	40000400 	.word	0x40000400

08003234 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08c      	sub	sp, #48	; 0x30
 8003238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800323a:	f107 030c 	add.w	r3, r7, #12
 800323e:	2224      	movs	r2, #36	; 0x24
 8003240:	2100      	movs	r1, #0
 8003242:	4618      	mov	r0, r3
 8003244:	f019 fa76 	bl	801c734 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003248:	463b      	mov	r3, r7
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	605a      	str	r2, [r3, #4]
 8003250:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003252:	4b21      	ldr	r3, [pc, #132]	; (80032d8 <MX_TIM4_Init+0xa4>)
 8003254:	4a21      	ldr	r2, [pc, #132]	; (80032dc <MX_TIM4_Init+0xa8>)
 8003256:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003258:	4b1f      	ldr	r3, [pc, #124]	; (80032d8 <MX_TIM4_Init+0xa4>)
 800325a:	2200      	movs	r2, #0
 800325c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800325e:	4b1e      	ldr	r3, [pc, #120]	; (80032d8 <MX_TIM4_Init+0xa4>)
 8003260:	2200      	movs	r2, #0
 8003262:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003264:	4b1c      	ldr	r3, [pc, #112]	; (80032d8 <MX_TIM4_Init+0xa4>)
 8003266:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800326a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800326c:	4b1a      	ldr	r3, [pc, #104]	; (80032d8 <MX_TIM4_Init+0xa4>)
 800326e:	2200      	movs	r2, #0
 8003270:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003272:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <MX_TIM4_Init+0xa4>)
 8003274:	2200      	movs	r2, #0
 8003276:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003278:	2301      	movs	r3, #1
 800327a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800327c:	2300      	movs	r3, #0
 800327e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003280:	2301      	movs	r3, #1
 8003282:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003284:	2300      	movs	r3, #0
 8003286:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800328c:	2300      	movs	r3, #0
 800328e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003290:	2301      	movs	r3, #1
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003294:	2300      	movs	r3, #0
 8003296:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003298:	2300      	movs	r3, #0
 800329a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800329c:	f107 030c 	add.w	r3, r7, #12
 80032a0:	4619      	mov	r1, r3
 80032a2:	480d      	ldr	r0, [pc, #52]	; (80032d8 <MX_TIM4_Init+0xa4>)
 80032a4:	f002 fff4 	bl	8006290 <HAL_TIM_Encoder_Init>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80032ae:	f7ff fb41 	bl	8002934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032b2:	2300      	movs	r3, #0
 80032b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032b6:	2300      	movs	r3, #0
 80032b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80032ba:	463b      	mov	r3, r7
 80032bc:	4619      	mov	r1, r3
 80032be:	4806      	ldr	r0, [pc, #24]	; (80032d8 <MX_TIM4_Init+0xa4>)
 80032c0:	f003 fde6 	bl	8006e90 <HAL_TIMEx_MasterConfigSynchronization>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80032ca:	f7ff fb33 	bl	8002934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80032ce:	bf00      	nop
 80032d0:	3730      	adds	r7, #48	; 0x30
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	200067b0 	.word	0x200067b0
 80032dc:	40000800 	.word	0x40000800

080032e0 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08c      	sub	sp, #48	; 0x30
 80032e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80032e6:	f107 030c 	add.w	r3, r7, #12
 80032ea:	2224      	movs	r2, #36	; 0x24
 80032ec:	2100      	movs	r1, #0
 80032ee:	4618      	mov	r0, r3
 80032f0:	f019 fa20 	bl	801c734 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032f4:	463b      	mov	r3, r7
 80032f6:	2200      	movs	r2, #0
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	605a      	str	r2, [r3, #4]
 80032fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80032fe:	4b21      	ldr	r3, [pc, #132]	; (8003384 <MX_TIM5_Init+0xa4>)
 8003300:	4a21      	ldr	r2, [pc, #132]	; (8003388 <MX_TIM5_Init+0xa8>)
 8003302:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003304:	4b1f      	ldr	r3, [pc, #124]	; (8003384 <MX_TIM5_Init+0xa4>)
 8003306:	2200      	movs	r2, #0
 8003308:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800330a:	4b1e      	ldr	r3, [pc, #120]	; (8003384 <MX_TIM5_Init+0xa4>)
 800330c:	2200      	movs	r2, #0
 800330e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003310:	4b1c      	ldr	r3, [pc, #112]	; (8003384 <MX_TIM5_Init+0xa4>)
 8003312:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003316:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003318:	4b1a      	ldr	r3, [pc, #104]	; (8003384 <MX_TIM5_Init+0xa4>)
 800331a:	2200      	movs	r2, #0
 800331c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800331e:	4b19      	ldr	r3, [pc, #100]	; (8003384 <MX_TIM5_Init+0xa4>)
 8003320:	2200      	movs	r2, #0
 8003322:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003324:	2301      	movs	r3, #1
 8003326:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003328:	2300      	movs	r3, #0
 800332a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800332c:	2301      	movs	r3, #1
 800332e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003330:	2300      	movs	r3, #0
 8003332:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003334:	2300      	movs	r3, #0
 8003336:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003338:	2300      	movs	r3, #0
 800333a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800333c:	2301      	movs	r3, #1
 800333e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003340:	2300      	movs	r3, #0
 8003342:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003344:	2300      	movs	r3, #0
 8003346:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003348:	f107 030c 	add.w	r3, r7, #12
 800334c:	4619      	mov	r1, r3
 800334e:	480d      	ldr	r0, [pc, #52]	; (8003384 <MX_TIM5_Init+0xa4>)
 8003350:	f002 ff9e 	bl	8006290 <HAL_TIM_Encoder_Init>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800335a:	f7ff faeb 	bl	8002934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800335e:	2300      	movs	r3, #0
 8003360:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003362:	2300      	movs	r3, #0
 8003364:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003366:	463b      	mov	r3, r7
 8003368:	4619      	mov	r1, r3
 800336a:	4806      	ldr	r0, [pc, #24]	; (8003384 <MX_TIM5_Init+0xa4>)
 800336c:	f003 fd90 	bl	8006e90 <HAL_TIMEx_MasterConfigSynchronization>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8003376:	f7ff fadd 	bl	8002934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800337a:	bf00      	nop
 800337c:	3730      	adds	r7, #48	; 0x30
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	200067fc 	.word	0x200067fc
 8003388:	40000c00 	.word	0x40000c00

0800338c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08c      	sub	sp, #48	; 0x30
 8003390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003392:	f107 030c 	add.w	r3, r7, #12
 8003396:	2224      	movs	r2, #36	; 0x24
 8003398:	2100      	movs	r1, #0
 800339a:	4618      	mov	r0, r3
 800339c:	f019 f9ca 	bl	801c734 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033a0:	463b      	mov	r3, r7
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	605a      	str	r2, [r3, #4]
 80033a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80033aa:	4b23      	ldr	r3, [pc, #140]	; (8003438 <MX_TIM8_Init+0xac>)
 80033ac:	4a23      	ldr	r2, [pc, #140]	; (800343c <MX_TIM8_Init+0xb0>)
 80033ae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80033b0:	4b21      	ldr	r3, [pc, #132]	; (8003438 <MX_TIM8_Init+0xac>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033b6:	4b20      	ldr	r3, [pc, #128]	; (8003438 <MX_TIM8_Init+0xac>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80033bc:	4b1e      	ldr	r3, [pc, #120]	; (8003438 <MX_TIM8_Init+0xac>)
 80033be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033c2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033c4:	4b1c      	ldr	r3, [pc, #112]	; (8003438 <MX_TIM8_Init+0xac>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80033ca:	4b1b      	ldr	r3, [pc, #108]	; (8003438 <MX_TIM8_Init+0xac>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033d0:	4b19      	ldr	r3, [pc, #100]	; (8003438 <MX_TIM8_Init+0xac>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80033d6:	2301      	movs	r3, #1
 80033d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80033de:	2301      	movs	r3, #1
 80033e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80033e2:	2300      	movs	r3, #0
 80033e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80033e6:	2300      	movs	r3, #0
 80033e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80033ea:	2300      	movs	r3, #0
 80033ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80033ee:	2301      	movs	r3, #1
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80033f2:	2300      	movs	r3, #0
 80033f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80033fa:	f107 030c 	add.w	r3, r7, #12
 80033fe:	4619      	mov	r1, r3
 8003400:	480d      	ldr	r0, [pc, #52]	; (8003438 <MX_TIM8_Init+0xac>)
 8003402:	f002 ff45 	bl	8006290 <HAL_TIM_Encoder_Init>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 800340c:	f7ff fa92 	bl	8002934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003410:	2300      	movs	r3, #0
 8003412:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003414:	2300      	movs	r3, #0
 8003416:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003418:	2300      	movs	r3, #0
 800341a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800341c:	463b      	mov	r3, r7
 800341e:	4619      	mov	r1, r3
 8003420:	4805      	ldr	r0, [pc, #20]	; (8003438 <MX_TIM8_Init+0xac>)
 8003422:	f003 fd35 	bl	8006e90 <HAL_TIMEx_MasterConfigSynchronization>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800342c:	f7ff fa82 	bl	8002934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003430:	bf00      	nop
 8003432:	3730      	adds	r7, #48	; 0x30
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	20006848 	.word	0x20006848
 800343c:	40010400 	.word	0x40010400

08003440 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b088      	sub	sp, #32
 8003444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003446:	1d3b      	adds	r3, r7, #4
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	605a      	str	r2, [r3, #4]
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	60da      	str	r2, [r3, #12]
 8003452:	611a      	str	r2, [r3, #16]
 8003454:	615a      	str	r2, [r3, #20]
 8003456:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003458:	4b1f      	ldr	r3, [pc, #124]	; (80034d8 <MX_TIM9_Init+0x98>)
 800345a:	4a20      	ldr	r2, [pc, #128]	; (80034dc <MX_TIM9_Init+0x9c>)
 800345c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 800345e:	4b1e      	ldr	r3, [pc, #120]	; (80034d8 <MX_TIM9_Init+0x98>)
 8003460:	2200      	movs	r2, #0
 8003462:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003464:	4b1c      	ldr	r3, [pc, #112]	; (80034d8 <MX_TIM9_Init+0x98>)
 8003466:	2200      	movs	r2, #0
 8003468:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800346a:	4b1b      	ldr	r3, [pc, #108]	; (80034d8 <MX_TIM9_Init+0x98>)
 800346c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003470:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003472:	4b19      	ldr	r3, [pc, #100]	; (80034d8 <MX_TIM9_Init+0x98>)
 8003474:	2200      	movs	r2, #0
 8003476:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003478:	4b17      	ldr	r3, [pc, #92]	; (80034d8 <MX_TIM9_Init+0x98>)
 800347a:	2200      	movs	r2, #0
 800347c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800347e:	4816      	ldr	r0, [pc, #88]	; (80034d8 <MX_TIM9_Init+0x98>)
 8003480:	f002 feae 	bl	80061e0 <HAL_TIM_PWM_Init>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 800348a:	f7ff fa53 	bl	8002934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800348e:	2360      	movs	r3, #96	; 0x60
 8003490:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800349e:	1d3b      	adds	r3, r7, #4
 80034a0:	2200      	movs	r2, #0
 80034a2:	4619      	mov	r1, r3
 80034a4:	480c      	ldr	r0, [pc, #48]	; (80034d8 <MX_TIM9_Init+0x98>)
 80034a6:	f003 f8b9 	bl	800661c <HAL_TIM_PWM_ConfigChannel>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 80034b0:	f7ff fa40 	bl	8002934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034b4:	1d3b      	adds	r3, r7, #4
 80034b6:	2204      	movs	r2, #4
 80034b8:	4619      	mov	r1, r3
 80034ba:	4807      	ldr	r0, [pc, #28]	; (80034d8 <MX_TIM9_Init+0x98>)
 80034bc:	f003 f8ae 	bl	800661c <HAL_TIM_PWM_ConfigChannel>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 80034c6:	f7ff fa35 	bl	8002934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80034ca:	4803      	ldr	r0, [pc, #12]	; (80034d8 <MX_TIM9_Init+0x98>)
 80034cc:	f000 f97c 	bl	80037c8 <HAL_TIM_MspPostInit>

}
 80034d0:	bf00      	nop
 80034d2:	3720      	adds	r7, #32
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	20006894 	.word	0x20006894
 80034dc:	40014000 	.word	0x40014000

080034e0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a13      	ldr	r2, [pc, #76]	; (800353c <HAL_TIM_PWM_MspInit+0x5c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d10c      	bne.n	800350c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034f2:	4b13      	ldr	r3, [pc, #76]	; (8003540 <HAL_TIM_PWM_MspInit+0x60>)
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	4a12      	ldr	r2, [pc, #72]	; (8003540 <HAL_TIM_PWM_MspInit+0x60>)
 80034f8:	f043 0301 	orr.w	r3, r3, #1
 80034fc:	6453      	str	r3, [r2, #68]	; 0x44
 80034fe:	4b10      	ldr	r3, [pc, #64]	; (8003540 <HAL_TIM_PWM_MspInit+0x60>)
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800350a:	e010      	b.n	800352e <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM9)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a0c      	ldr	r2, [pc, #48]	; (8003544 <HAL_TIM_PWM_MspInit+0x64>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d10b      	bne.n	800352e <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003516:	4b0a      	ldr	r3, [pc, #40]	; (8003540 <HAL_TIM_PWM_MspInit+0x60>)
 8003518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351a:	4a09      	ldr	r2, [pc, #36]	; (8003540 <HAL_TIM_PWM_MspInit+0x60>)
 800351c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003520:	6453      	str	r3, [r2, #68]	; 0x44
 8003522:	4b07      	ldr	r3, [pc, #28]	; (8003540 <HAL_TIM_PWM_MspInit+0x60>)
 8003524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352a:	60bb      	str	r3, [r7, #8]
 800352c:	68bb      	ldr	r3, [r7, #8]
}
 800352e:	bf00      	nop
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40010000 	.word	0x40010000
 8003540:	40023800 	.word	0x40023800
 8003544:	40014000 	.word	0x40014000

08003548 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b094      	sub	sp, #80	; 0x50
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003550:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	609a      	str	r2, [r3, #8]
 800355c:	60da      	str	r2, [r3, #12]
 800355e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003568:	d144      	bne.n	80035f4 <HAL_TIM_Encoder_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800356a:	4b8e      	ldr	r3, [pc, #568]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 800356c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356e:	4a8d      	ldr	r2, [pc, #564]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003570:	f043 0301 	orr.w	r3, r3, #1
 8003574:	6413      	str	r3, [r2, #64]	; 0x40
 8003576:	4b8b      	ldr	r3, [pc, #556]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003580:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003582:	4b88      	ldr	r3, [pc, #544]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	4a87      	ldr	r2, [pc, #540]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	6313      	str	r3, [r2, #48]	; 0x30
 800358e:	4b85      	ldr	r3, [pc, #532]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	637b      	str	r3, [r7, #52]	; 0x34
 8003598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800359a:	4b82      	ldr	r3, [pc, #520]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	4a81      	ldr	r2, [pc, #516]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 80035a0:	f043 0302 	orr.w	r3, r3, #2
 80035a4:	6313      	str	r3, [r2, #48]	; 0x30
 80035a6:	4b7f      	ldr	r3, [pc, #508]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	f003 0302 	and.w	r3, r3, #2
 80035ae:	633b      	str	r3, [r7, #48]	; 0x30
 80035b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR1_CHA_Pin;
 80035b2:	2320      	movs	r3, #32
 80035b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b6:	2302      	movs	r3, #2
 80035b8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035be:	2300      	movs	r3, #0
 80035c0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035c2:	2301      	movs	r3, #1
 80035c4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR1_CHA_GPIO_Port, &GPIO_InitStruct);
 80035c6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035ca:	4619      	mov	r1, r3
 80035cc:	4876      	ldr	r0, [pc, #472]	; (80037a8 <HAL_TIM_Encoder_MspInit+0x260>)
 80035ce:	f001 f879 	bl	80046c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR1_CHB_Pin;
 80035d2:	2308      	movs	r3, #8
 80035d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d6:	2302      	movs	r3, #2
 80035d8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035de:	2300      	movs	r3, #0
 80035e0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035e2:	2301      	movs	r3, #1
 80035e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR1_CHB_GPIO_Port, &GPIO_InitStruct);
 80035e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035ea:	4619      	mov	r1, r3
 80035ec:	486f      	ldr	r0, [pc, #444]	; (80037ac <HAL_TIM_Encoder_MspInit+0x264>)
 80035ee:	f001 f869 	bl	80046c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80035f2:	e0d3      	b.n	800379c <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM3)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a6d      	ldr	r2, [pc, #436]	; (80037b0 <HAL_TIM_Encoder_MspInit+0x268>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d144      	bne.n	8003688 <HAL_TIM_Encoder_MspInit+0x140>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035fe:	4b69      	ldr	r3, [pc, #420]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	4a68      	ldr	r2, [pc, #416]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003604:	f043 0302 	orr.w	r3, r3, #2
 8003608:	6413      	str	r3, [r2, #64]	; 0x40
 800360a:	4b66      	ldr	r3, [pc, #408]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 800360c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003616:	4b63      	ldr	r3, [pc, #396]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	4a62      	ldr	r2, [pc, #392]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	6313      	str	r3, [r2, #48]	; 0x30
 8003622:	4b60      	ldr	r3, [pc, #384]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	62bb      	str	r3, [r7, #40]	; 0x28
 800362c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800362e:	4b5d      	ldr	r3, [pc, #372]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	4a5c      	ldr	r2, [pc, #368]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003634:	f043 0302 	orr.w	r3, r3, #2
 8003638:	6313      	str	r3, [r2, #48]	; 0x30
 800363a:	4b5a      	ldr	r3, [pc, #360]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	627b      	str	r3, [r7, #36]	; 0x24
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = MOTOR2_CHA_Pin;
 8003646:	2340      	movs	r3, #64	; 0x40
 8003648:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800364a:	2302      	movs	r3, #2
 800364c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364e:	2300      	movs	r3, #0
 8003650:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003652:	2300      	movs	r3, #0
 8003654:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003656:	2302      	movs	r3, #2
 8003658:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR2_CHA_GPIO_Port, &GPIO_InitStruct);
 800365a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800365e:	4619      	mov	r1, r3
 8003660:	4851      	ldr	r0, [pc, #324]	; (80037a8 <HAL_TIM_Encoder_MspInit+0x260>)
 8003662:	f001 f82f 	bl	80046c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MOTOR2_CHB_Pin;
 8003666:	2320      	movs	r3, #32
 8003668:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366a:	2302      	movs	r3, #2
 800366c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366e:	2300      	movs	r3, #0
 8003670:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003672:	2300      	movs	r3, #0
 8003674:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003676:	2302      	movs	r3, #2
 8003678:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(MOTOR2_CHB_GPIO_Port, &GPIO_InitStruct);
 800367a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800367e:	4619      	mov	r1, r3
 8003680:	484a      	ldr	r0, [pc, #296]	; (80037ac <HAL_TIM_Encoder_MspInit+0x264>)
 8003682:	f001 f81f 	bl	80046c4 <HAL_GPIO_Init>
}
 8003686:	e089      	b.n	800379c <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM4)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a49      	ldr	r2, [pc, #292]	; (80037b4 <HAL_TIM_Encoder_MspInit+0x26c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d129      	bne.n	80036e6 <HAL_TIM_Encoder_MspInit+0x19e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003692:	4b44      	ldr	r3, [pc, #272]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	4a43      	ldr	r2, [pc, #268]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003698:	f043 0304 	orr.w	r3, r3, #4
 800369c:	6413      	str	r3, [r2, #64]	; 0x40
 800369e:	4b41      	ldr	r3, [pc, #260]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f003 0304 	and.w	r3, r3, #4
 80036a6:	623b      	str	r3, [r7, #32]
 80036a8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036aa:	4b3e      	ldr	r3, [pc, #248]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	4a3d      	ldr	r2, [pc, #244]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 80036b0:	f043 0308 	orr.w	r3, r3, #8
 80036b4:	6313      	str	r3, [r2, #48]	; 0x30
 80036b6:	4b3b      	ldr	r3, [pc, #236]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	61fb      	str	r3, [r7, #28]
 80036c0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = MOTOR3_CHA_Pin|MOTOR3_CHB_Pin;
 80036c2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80036c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c8:	2302      	movs	r3, #2
 80036ca:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d0:	2300      	movs	r3, #0
 80036d2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80036d4:	2302      	movs	r3, #2
 80036d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80036dc:	4619      	mov	r1, r3
 80036de:	4836      	ldr	r0, [pc, #216]	; (80037b8 <HAL_TIM_Encoder_MspInit+0x270>)
 80036e0:	f000 fff0 	bl	80046c4 <HAL_GPIO_Init>
}
 80036e4:	e05a      	b.n	800379c <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM5)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a34      	ldr	r2, [pc, #208]	; (80037bc <HAL_TIM_Encoder_MspInit+0x274>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d128      	bne.n	8003742 <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80036f0:	4b2c      	ldr	r3, [pc, #176]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	4a2b      	ldr	r2, [pc, #172]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 80036f6:	f043 0308 	orr.w	r3, r3, #8
 80036fa:	6413      	str	r3, [r2, #64]	; 0x40
 80036fc:	4b29      	ldr	r3, [pc, #164]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	f003 0308 	and.w	r3, r3, #8
 8003704:	61bb      	str	r3, [r7, #24]
 8003706:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003708:	4b26      	ldr	r3, [pc, #152]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 800370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370c:	4a25      	ldr	r2, [pc, #148]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	6313      	str	r3, [r2, #48]	; 0x30
 8003714:	4b23      	ldr	r3, [pc, #140]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOTOR4_CHA_Pin|MOTOR4_CHB_Pin;
 8003720:	2303      	movs	r3, #3
 8003722:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003724:	2302      	movs	r3, #2
 8003726:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003728:	2300      	movs	r3, #0
 800372a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800372c:	2300      	movs	r3, #0
 800372e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003730:	2302      	movs	r3, #2
 8003732:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003734:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003738:	4619      	mov	r1, r3
 800373a:	481b      	ldr	r0, [pc, #108]	; (80037a8 <HAL_TIM_Encoder_MspInit+0x260>)
 800373c:	f000 ffc2 	bl	80046c4 <HAL_GPIO_Init>
}
 8003740:	e02c      	b.n	800379c <HAL_TIM_Encoder_MspInit+0x254>
  else if(tim_encoderHandle->Instance==TIM8)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1e      	ldr	r2, [pc, #120]	; (80037c0 <HAL_TIM_Encoder_MspInit+0x278>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d127      	bne.n	800379c <HAL_TIM_Encoder_MspInit+0x254>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800374c:	4b15      	ldr	r3, [pc, #84]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 800374e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003750:	4a14      	ldr	r2, [pc, #80]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003752:	f043 0302 	orr.w	r3, r3, #2
 8003756:	6453      	str	r3, [r2, #68]	; 0x44
 8003758:	4b12      	ldr	r3, [pc, #72]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 800375a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	613b      	str	r3, [r7, #16]
 8003762:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003764:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003768:	4a0e      	ldr	r2, [pc, #56]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 800376a:	f043 0304 	orr.w	r3, r3, #4
 800376e:	6313      	str	r3, [r2, #48]	; 0x30
 8003770:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR5_CHA_Pin|MOTOR5_CHB_Pin;
 800377c:	23c0      	movs	r3, #192	; 0xc0
 800377e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003780:	2302      	movs	r3, #2
 8003782:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003784:	2300      	movs	r3, #0
 8003786:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003788:	2300      	movs	r3, #0
 800378a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800378c:	2303      	movs	r3, #3
 800378e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003790:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003794:	4619      	mov	r1, r3
 8003796:	480b      	ldr	r0, [pc, #44]	; (80037c4 <HAL_TIM_Encoder_MspInit+0x27c>)
 8003798:	f000 ff94 	bl	80046c4 <HAL_GPIO_Init>
}
 800379c:	bf00      	nop
 800379e:	3750      	adds	r7, #80	; 0x50
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40023800 	.word	0x40023800
 80037a8:	40020000 	.word	0x40020000
 80037ac:	40020400 	.word	0x40020400
 80037b0:	40000400 	.word	0x40000400
 80037b4:	40000800 	.word	0x40000800
 80037b8:	40020c00 	.word	0x40020c00
 80037bc:	40000c00 	.word	0x40000c00
 80037c0:	40010400 	.word	0x40010400
 80037c4:	40020800 	.word	0x40020800

080037c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	; 0x28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d0:	f107 0314 	add.w	r3, r7, #20
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	605a      	str	r2, [r3, #4]
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	60da      	str	r2, [r3, #12]
 80037de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a22      	ldr	r2, [pc, #136]	; (8003870 <HAL_TIM_MspPostInit+0xa8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d11d      	bne.n	8003826 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80037ea:	4b22      	ldr	r3, [pc, #136]	; (8003874 <HAL_TIM_MspPostInit+0xac>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	4a21      	ldr	r2, [pc, #132]	; (8003874 <HAL_TIM_MspPostInit+0xac>)
 80037f0:	f043 0310 	orr.w	r3, r3, #16
 80037f4:	6313      	str	r3, [r2, #48]	; 0x30
 80037f6:	4b1f      	ldr	r3, [pc, #124]	; (8003874 <HAL_TIM_MspPostInit+0xac>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	f003 0310 	and.w	r3, r3, #16
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	693b      	ldr	r3, [r7, #16]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR1_PWM_Pin|MOTOR2_PWM_Pin|MOTOR3_PWM_Pin|MOTOR4_PWM_Pin;
 8003802:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8003806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003808:	2302      	movs	r3, #2
 800380a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380c:	2300      	movs	r3, #0
 800380e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003810:	2300      	movs	r3, #0
 8003812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003814:	2301      	movs	r3, #1
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003818:	f107 0314 	add.w	r3, r7, #20
 800381c:	4619      	mov	r1, r3
 800381e:	4816      	ldr	r0, [pc, #88]	; (8003878 <HAL_TIM_MspPostInit+0xb0>)
 8003820:	f000 ff50 	bl	80046c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8003824:	e020      	b.n	8003868 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM9)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a14      	ldr	r2, [pc, #80]	; (800387c <HAL_TIM_MspPostInit+0xb4>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d11b      	bne.n	8003868 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003830:	4b10      	ldr	r3, [pc, #64]	; (8003874 <HAL_TIM_MspPostInit+0xac>)
 8003832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003834:	4a0f      	ldr	r2, [pc, #60]	; (8003874 <HAL_TIM_MspPostInit+0xac>)
 8003836:	f043 0310 	orr.w	r3, r3, #16
 800383a:	6313      	str	r3, [r2, #48]	; 0x30
 800383c:	4b0d      	ldr	r3, [pc, #52]	; (8003874 <HAL_TIM_MspPostInit+0xac>)
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	f003 0310 	and.w	r3, r3, #16
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR5_PWM_Pin|MOTOR6_PWM_Pin;
 8003848:	2360      	movs	r3, #96	; 0x60
 800384a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384c:	2302      	movs	r3, #2
 800384e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003850:	2300      	movs	r3, #0
 8003852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003854:	2300      	movs	r3, #0
 8003856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003858:	2303      	movs	r3, #3
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800385c:	f107 0314 	add.w	r3, r7, #20
 8003860:	4619      	mov	r1, r3
 8003862:	4805      	ldr	r0, [pc, #20]	; (8003878 <HAL_TIM_MspPostInit+0xb0>)
 8003864:	f000 ff2e 	bl	80046c4 <HAL_GPIO_Init>
}
 8003868:	bf00      	nop
 800386a:	3728      	adds	r7, #40	; 0x28
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40010000 	.word	0x40010000
 8003874:	40023800 	.word	0x40023800
 8003878:	40021000 	.word	0x40021000
 800387c:	40014000 	.word	0x40014000

08003880 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003884:	4b14      	ldr	r3, [pc, #80]	; (80038d8 <MX_USART3_UART_Init+0x58>)
 8003886:	4a15      	ldr	r2, [pc, #84]	; (80038dc <MX_USART3_UART_Init+0x5c>)
 8003888:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800388a:	4b13      	ldr	r3, [pc, #76]	; (80038d8 <MX_USART3_UART_Init+0x58>)
 800388c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003890:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003892:	4b11      	ldr	r3, [pc, #68]	; (80038d8 <MX_USART3_UART_Init+0x58>)
 8003894:	2200      	movs	r2, #0
 8003896:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003898:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <MX_USART3_UART_Init+0x58>)
 800389a:	2200      	movs	r2, #0
 800389c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800389e:	4b0e      	ldr	r3, [pc, #56]	; (80038d8 <MX_USART3_UART_Init+0x58>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80038a4:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <MX_USART3_UART_Init+0x58>)
 80038a6:	220c      	movs	r2, #12
 80038a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038aa:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <MX_USART3_UART_Init+0x58>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80038b0:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <MX_USART3_UART_Init+0x58>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038b6:	4b08      	ldr	r3, [pc, #32]	; (80038d8 <MX_USART3_UART_Init+0x58>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038bc:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <MX_USART3_UART_Init+0x58>)
 80038be:	2200      	movs	r2, #0
 80038c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80038c2:	4805      	ldr	r0, [pc, #20]	; (80038d8 <MX_USART3_UART_Init+0x58>)
 80038c4:	f003 fc0e 	bl	80070e4 <HAL_UART_Init>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80038ce:	f7ff f831 	bl	8002934 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80038d2:	bf00      	nop
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	200068e0 	.word	0x200068e0
 80038dc:	40004800 	.word	0x40004800

080038e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b0ae      	sub	sp, #184	; 0xb8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	60da      	str	r2, [r3, #12]
 80038f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038f8:	f107 0314 	add.w	r3, r7, #20
 80038fc:	2290      	movs	r2, #144	; 0x90
 80038fe:	2100      	movs	r1, #0
 8003900:	4618      	mov	r0, r3
 8003902:	f018 ff17 	bl	801c734 <memset>
  if(uartHandle->Instance==USART3)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a56      	ldr	r2, [pc, #344]	; (8003a64 <HAL_UART_MspInit+0x184>)
 800390c:	4293      	cmp	r3, r2
 800390e:	f040 80a4 	bne.w	8003a5a <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003912:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003916:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003918:	2300      	movs	r3, #0
 800391a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800391c:	f107 0314 	add.w	r3, r7, #20
 8003920:	4618      	mov	r0, r3
 8003922:	f001 ff5b 	bl	80057dc <HAL_RCCEx_PeriphCLKConfig>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800392c:	f7ff f802 	bl	8002934 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003930:	4b4d      	ldr	r3, [pc, #308]	; (8003a68 <HAL_UART_MspInit+0x188>)
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	4a4c      	ldr	r2, [pc, #304]	; (8003a68 <HAL_UART_MspInit+0x188>)
 8003936:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800393a:	6413      	str	r3, [r2, #64]	; 0x40
 800393c:	4b4a      	ldr	r3, [pc, #296]	; (8003a68 <HAL_UART_MspInit+0x188>)
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003944:	613b      	str	r3, [r7, #16]
 8003946:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003948:	4b47      	ldr	r3, [pc, #284]	; (8003a68 <HAL_UART_MspInit+0x188>)
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	4a46      	ldr	r2, [pc, #280]	; (8003a68 <HAL_UART_MspInit+0x188>)
 800394e:	f043 0308 	orr.w	r3, r3, #8
 8003952:	6313      	str	r3, [r2, #48]	; 0x30
 8003954:	4b44      	ldr	r3, [pc, #272]	; (8003a68 <HAL_UART_MspInit+0x188>)
 8003956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003960:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003964:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003968:	2302      	movs	r3, #2
 800396a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396e:	2300      	movs	r3, #0
 8003970:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003974:	2303      	movs	r3, #3
 8003976:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800397a:	2307      	movs	r3, #7
 800397c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003980:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003984:	4619      	mov	r1, r3
 8003986:	4839      	ldr	r0, [pc, #228]	; (8003a6c <HAL_UART_MspInit+0x18c>)
 8003988:	f000 fe9c 	bl	80046c4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800398c:	4b38      	ldr	r3, [pc, #224]	; (8003a70 <HAL_UART_MspInit+0x190>)
 800398e:	4a39      	ldr	r2, [pc, #228]	; (8003a74 <HAL_UART_MspInit+0x194>)
 8003990:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8003992:	4b37      	ldr	r3, [pc, #220]	; (8003a70 <HAL_UART_MspInit+0x190>)
 8003994:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003998:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800399a:	4b35      	ldr	r3, [pc, #212]	; (8003a70 <HAL_UART_MspInit+0x190>)
 800399c:	2240      	movs	r2, #64	; 0x40
 800399e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039a0:	4b33      	ldr	r3, [pc, #204]	; (8003a70 <HAL_UART_MspInit+0x190>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039a6:	4b32      	ldr	r3, [pc, #200]	; (8003a70 <HAL_UART_MspInit+0x190>)
 80039a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039ac:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039ae:	4b30      	ldr	r3, [pc, #192]	; (8003a70 <HAL_UART_MspInit+0x190>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039b4:	4b2e      	ldr	r3, [pc, #184]	; (8003a70 <HAL_UART_MspInit+0x190>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80039ba:	4b2d      	ldr	r3, [pc, #180]	; (8003a70 <HAL_UART_MspInit+0x190>)
 80039bc:	2200      	movs	r2, #0
 80039be:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80039c0:	4b2b      	ldr	r3, [pc, #172]	; (8003a70 <HAL_UART_MspInit+0x190>)
 80039c2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80039c6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039c8:	4b29      	ldr	r3, [pc, #164]	; (8003a70 <HAL_UART_MspInit+0x190>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80039ce:	4828      	ldr	r0, [pc, #160]	; (8003a70 <HAL_UART_MspInit+0x190>)
 80039d0:	f000 fa62 	bl	8003e98 <HAL_DMA_Init>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_UART_MspInit+0xfe>
    {
      Error_Handler();
 80039da:	f7fe ffab 	bl	8002934 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a23      	ldr	r2, [pc, #140]	; (8003a70 <HAL_UART_MspInit+0x190>)
 80039e2:	671a      	str	r2, [r3, #112]	; 0x70
 80039e4:	4a22      	ldr	r2, [pc, #136]	; (8003a70 <HAL_UART_MspInit+0x190>)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80039ea:	4b23      	ldr	r3, [pc, #140]	; (8003a78 <HAL_UART_MspInit+0x198>)
 80039ec:	4a23      	ldr	r2, [pc, #140]	; (8003a7c <HAL_UART_MspInit+0x19c>)
 80039ee:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80039f0:	4b21      	ldr	r3, [pc, #132]	; (8003a78 <HAL_UART_MspInit+0x198>)
 80039f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039f6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039f8:	4b1f      	ldr	r3, [pc, #124]	; (8003a78 <HAL_UART_MspInit+0x198>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039fe:	4b1e      	ldr	r3, [pc, #120]	; (8003a78 <HAL_UART_MspInit+0x198>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a04:	4b1c      	ldr	r3, [pc, #112]	; (8003a78 <HAL_UART_MspInit+0x198>)
 8003a06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a0a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a0c:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <HAL_UART_MspInit+0x198>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a12:	4b19      	ldr	r3, [pc, #100]	; (8003a78 <HAL_UART_MspInit+0x198>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003a18:	4b17      	ldr	r3, [pc, #92]	; (8003a78 <HAL_UART_MspInit+0x198>)
 8003a1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a1e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003a20:	4b15      	ldr	r3, [pc, #84]	; (8003a78 <HAL_UART_MspInit+0x198>)
 8003a22:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003a26:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a28:	4b13      	ldr	r3, [pc, #76]	; (8003a78 <HAL_UART_MspInit+0x198>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003a2e:	4812      	ldr	r0, [pc, #72]	; (8003a78 <HAL_UART_MspInit+0x198>)
 8003a30:	f000 fa32 	bl	8003e98 <HAL_DMA_Init>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 8003a3a:	f7fe ff7b 	bl	8002934 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a0d      	ldr	r2, [pc, #52]	; (8003a78 <HAL_UART_MspInit+0x198>)
 8003a42:	675a      	str	r2, [r3, #116]	; 0x74
 8003a44:	4a0c      	ldr	r2, [pc, #48]	; (8003a78 <HAL_UART_MspInit+0x198>)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2105      	movs	r1, #5
 8003a4e:	2027      	movs	r0, #39	; 0x27
 8003a50:	f000 f9f8 	bl	8003e44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003a54:	2027      	movs	r0, #39	; 0x27
 8003a56:	f000 fa11 	bl	8003e7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8003a5a:	bf00      	nop
 8003a5c:	37b8      	adds	r7, #184	; 0xb8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40004800 	.word	0x40004800
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	40020c00 	.word	0x40020c00
 8003a70:	20006968 	.word	0x20006968
 8003a74:	40026058 	.word	0x40026058
 8003a78:	200069c8 	.word	0x200069c8
 8003a7c:	40026028 	.word	0x40026028

08003a80 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003a84:	4b14      	ldr	r3, [pc, #80]	; (8003ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003a8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003a8c:	4b12      	ldr	r3, [pc, #72]	; (8003ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a8e:	2206      	movs	r2, #6
 8003a90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003a92:	4b11      	ldr	r3, [pc, #68]	; (8003ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a94:	2202      	movs	r2, #2
 8003a96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003a98:	4b0f      	ldr	r3, [pc, #60]	; (8003ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003a9e:	4b0e      	ldr	r3, [pc, #56]	; (8003ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003aa0:	2202      	movs	r2, #2
 8003aa2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003aa4:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003aaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003ab0:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003ab6:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003ab8:	2201      	movs	r2, #1
 8003aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003abc:	4b06      	ldr	r3, [pc, #24]	; (8003ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003ac2:	4805      	ldr	r0, [pc, #20]	; (8003ad8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003ac4:	f000 ffdb 	bl	8004a7e <HAL_PCD_Init>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8003ace:	f7fe ff31 	bl	8002934 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003ad2:	bf00      	nop
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20006a28 	.word	0x20006a28

08003adc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b0ae      	sub	sp, #184	; 0xb8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	605a      	str	r2, [r3, #4]
 8003aee:	609a      	str	r2, [r3, #8]
 8003af0:	60da      	str	r2, [r3, #12]
 8003af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003af4:	f107 0314 	add.w	r3, r7, #20
 8003af8:	2290      	movs	r2, #144	; 0x90
 8003afa:	2100      	movs	r1, #0
 8003afc:	4618      	mov	r0, r3
 8003afe:	f018 fe19 	bl	801c734 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b0a:	d159      	bne.n	8003bc0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003b0c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b10:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b18:	f107 0314 	add.w	r3, r7, #20
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f001 fe5d 	bl	80057dc <HAL_RCCEx_PeriphCLKConfig>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8003b28:	f7fe ff04 	bl	8002934 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b2c:	4b26      	ldr	r3, [pc, #152]	; (8003bc8 <HAL_PCD_MspInit+0xec>)
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b30:	4a25      	ldr	r2, [pc, #148]	; (8003bc8 <HAL_PCD_MspInit+0xec>)
 8003b32:	f043 0301 	orr.w	r3, r3, #1
 8003b36:	6313      	str	r3, [r2, #48]	; 0x30
 8003b38:	4b23      	ldr	r3, [pc, #140]	; (8003bc8 <HAL_PCD_MspInit+0xec>)
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003b44:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003b48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003b5e:	230a      	movs	r3, #10
 8003b60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4818      	ldr	r0, [pc, #96]	; (8003bcc <HAL_PCD_MspInit+0xf0>)
 8003b6c:	f000 fdaa 	bl	80046c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003b70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003b84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003b88:	4619      	mov	r1, r3
 8003b8a:	4810      	ldr	r0, [pc, #64]	; (8003bcc <HAL_PCD_MspInit+0xf0>)
 8003b8c:	f000 fd9a 	bl	80046c4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003b90:	4b0d      	ldr	r3, [pc, #52]	; (8003bc8 <HAL_PCD_MspInit+0xec>)
 8003b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b94:	4a0c      	ldr	r2, [pc, #48]	; (8003bc8 <HAL_PCD_MspInit+0xec>)
 8003b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b9a:	6353      	str	r3, [r2, #52]	; 0x34
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <HAL_PCD_MspInit+0xec>)
 8003b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4b07      	ldr	r3, [pc, #28]	; (8003bc8 <HAL_PCD_MspInit+0xec>)
 8003baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bac:	4a06      	ldr	r2, [pc, #24]	; (8003bc8 <HAL_PCD_MspInit+0xec>)
 8003bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bb2:	6453      	str	r3, [r2, #68]	; 0x44
 8003bb4:	4b04      	ldr	r3, [pc, #16]	; (8003bc8 <HAL_PCD_MspInit+0xec>)
 8003bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003bc0:	bf00      	nop
 8003bc2:	37b8      	adds	r7, #184	; 0xb8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	40020000 	.word	0x40020000

08003bd0 <_Z14getCurrentTimev>:
}
long remap( long v,  long a1,  long b1,  long a2,  long b2, bool clamp = false){
  return round(remap((float) v, (float) a1, (float) b1, (float) a2, (float) b2, clamp));
}

uint32_t getCurrentTime() {
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8003bd4:	f000 f84e 	bl	8003c74 <HAL_GetTick>
 8003bd8:	4603      	mov	r3, r0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003be4:	480d      	ldr	r0, [pc, #52]	; (8003c1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003be6:	490e      	ldr	r1, [pc, #56]	; (8003c20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003be8:	4a0e      	ldr	r2, [pc, #56]	; (8003c24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bec:	e002      	b.n	8003bf4 <LoopCopyDataInit>

08003bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bf2:	3304      	adds	r3, #4

08003bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bf8:	d3f9      	bcc.n	8003bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bfa:	4a0b      	ldr	r2, [pc, #44]	; (8003c28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003bfc:	4c0b      	ldr	r4, [pc, #44]	; (8003c2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c00:	e001      	b.n	8003c06 <LoopFillZerobss>

08003c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c04:	3204      	adds	r2, #4

08003c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c08:	d3fb      	bcc.n	8003c02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003c0a:	f7ff f9a3 	bl	8002f54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c0e:	f018 fe93 	bl	801c938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c12:	f7fe fdd9 	bl	80027c8 <main>
  bx  lr    
 8003c16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c18:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c20:	200021dc 	.word	0x200021dc
  ldr r2, =_sidata
 8003c24:	0801f7c8 	.word	0x0801f7c8
  ldr r2, =_sbss
 8003c28:	200021e0 	.word	0x200021e0
  ldr r4, =_ebss
 8003c2c:	20010cec 	.word	0x20010cec

08003c30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c30:	e7fe      	b.n	8003c30 <ADC_IRQHandler>

08003c32 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c36:	2003      	movs	r0, #3
 8003c38:	f000 f8f9 	bl	8003e2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c3c:	200f      	movs	r0, #15
 8003c3e:	f7ff f80b 	bl	8002c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c42:	f7fe ffe1 	bl	8002c08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c50:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <HAL_IncTick+0x20>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <HAL_IncTick+0x24>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	4a04      	ldr	r2, [pc, #16]	; (8003c70 <HAL_IncTick+0x24>)
 8003c5e:	6013      	str	r3, [r2, #0]
}
 8003c60:	bf00      	nop
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	2000000c 	.word	0x2000000c
 8003c70:	20006f30 	.word	0x20006f30

08003c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  return uwTick;
 8003c78:	4b03      	ldr	r3, [pc, #12]	; (8003c88 <HAL_GetTick+0x14>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	20006f30 	.word	0x20006f30

08003c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c94:	f7ff ffee 	bl	8003c74 <HAL_GetTick>
 8003c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ca4:	d005      	beq.n	8003cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <HAL_Delay+0x44>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	461a      	mov	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4413      	add	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003cb2:	bf00      	nop
 8003cb4:	f7ff ffde 	bl	8003c74 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d8f7      	bhi.n	8003cb4 <HAL_Delay+0x28>
  {
  }
}
 8003cc4:	bf00      	nop
 8003cc6:	bf00      	nop
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	2000000c 	.word	0x2000000c

08003cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <__NVIC_SetPriorityGrouping+0x40>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003cfc:	4b06      	ldr	r3, [pc, #24]	; (8003d18 <__NVIC_SetPriorityGrouping+0x44>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d02:	4a04      	ldr	r2, [pc, #16]	; (8003d14 <__NVIC_SetPriorityGrouping+0x40>)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	60d3      	str	r3, [r2, #12]
}
 8003d08:	bf00      	nop
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	e000ed00 	.word	0xe000ed00
 8003d18:	05fa0000 	.word	0x05fa0000

08003d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d20:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <__NVIC_GetPriorityGrouping+0x18>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	0a1b      	lsrs	r3, r3, #8
 8003d26:	f003 0307 	and.w	r3, r3, #7
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	e000ed00 	.word	0xe000ed00

08003d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	db0b      	blt.n	8003d62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	f003 021f 	and.w	r2, r3, #31
 8003d50:	4907      	ldr	r1, [pc, #28]	; (8003d70 <__NVIC_EnableIRQ+0x38>)
 8003d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d56:	095b      	lsrs	r3, r3, #5
 8003d58:	2001      	movs	r0, #1
 8003d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	e000e100 	.word	0xe000e100

08003d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	6039      	str	r1, [r7, #0]
 8003d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	db0a      	blt.n	8003d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	490c      	ldr	r1, [pc, #48]	; (8003dc0 <__NVIC_SetPriority+0x4c>)
 8003d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d92:	0112      	lsls	r2, r2, #4
 8003d94:	b2d2      	uxtb	r2, r2
 8003d96:	440b      	add	r3, r1
 8003d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d9c:	e00a      	b.n	8003db4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	4908      	ldr	r1, [pc, #32]	; (8003dc4 <__NVIC_SetPriority+0x50>)
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	3b04      	subs	r3, #4
 8003dac:	0112      	lsls	r2, r2, #4
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	440b      	add	r3, r1
 8003db2:	761a      	strb	r2, [r3, #24]
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	e000e100 	.word	0xe000e100
 8003dc4:	e000ed00 	.word	0xe000ed00

08003dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b089      	sub	sp, #36	; 0x24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	f1c3 0307 	rsb	r3, r3, #7
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	bf28      	it	cs
 8003de6:	2304      	movcs	r3, #4
 8003de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	3304      	adds	r3, #4
 8003dee:	2b06      	cmp	r3, #6
 8003df0:	d902      	bls.n	8003df8 <NVIC_EncodePriority+0x30>
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	3b03      	subs	r3, #3
 8003df6:	e000      	b.n	8003dfa <NVIC_EncodePriority+0x32>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	43da      	mvns	r2, r3
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	401a      	ands	r2, r3
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1a:	43d9      	mvns	r1, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e20:	4313      	orrs	r3, r2
         );
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3724      	adds	r7, #36	; 0x24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff ff4c 	bl	8003cd4 <__NVIC_SetPriorityGrouping>
}
 8003e3c:	bf00      	nop
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
 8003e50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e52:	2300      	movs	r3, #0
 8003e54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e56:	f7ff ff61 	bl	8003d1c <__NVIC_GetPriorityGrouping>
 8003e5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	68b9      	ldr	r1, [r7, #8]
 8003e60:	6978      	ldr	r0, [r7, #20]
 8003e62:	f7ff ffb1 	bl	8003dc8 <NVIC_EncodePriority>
 8003e66:	4602      	mov	r2, r0
 8003e68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e6c:	4611      	mov	r1, r2
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff ff80 	bl	8003d74 <__NVIC_SetPriority>
}
 8003e74:	bf00      	nop
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff ff54 	bl	8003d38 <__NVIC_EnableIRQ>
}
 8003e90:	bf00      	nop
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ea4:	f7ff fee6 	bl	8003c74 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d101      	bne.n	8003eb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e099      	b.n	8003fe8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0201 	bic.w	r2, r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ed4:	e00f      	b.n	8003ef6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ed6:	f7ff fecd 	bl	8003c74 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b05      	cmp	r3, #5
 8003ee2:	d908      	bls.n	8003ef6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2203      	movs	r2, #3
 8003eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e078      	b.n	8003fe8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e8      	bne.n	8003ed6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4b38      	ldr	r3, [pc, #224]	; (8003ff0 <HAL_DMA_Init+0x158>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d107      	bne.n	8003f60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f023 0307 	bic.w	r3, r3, #7
 8003f76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d117      	bne.n	8003fba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00e      	beq.n	8003fba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 fb15 	bl	80045cc <DMA_CheckFifoParam>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d008      	beq.n	8003fba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2240      	movs	r2, #64	; 0x40
 8003fac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e016      	b.n	8003fe8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 facc 	bl	8004560 <DMA_CalcBaseAndBitshift>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd0:	223f      	movs	r2, #63	; 0x3f
 8003fd2:	409a      	lsls	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	e010803f 	.word	0xe010803f

08003ff4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <HAL_DMA_Start_IT+0x26>
 8004016:	2302      	movs	r3, #2
 8004018:	e048      	b.n	80040ac <HAL_DMA_Start_IT+0xb8>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b01      	cmp	r3, #1
 800402c:	d137      	bne.n	800409e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2202      	movs	r2, #2
 8004032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	68b9      	ldr	r1, [r7, #8]
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 fa5e 	bl	8004504 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404c:	223f      	movs	r2, #63	; 0x3f
 800404e:	409a      	lsls	r2, r3
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0216 	orr.w	r2, r2, #22
 8004062:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695a      	ldr	r2, [r3, #20]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004072:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004078:	2b00      	cmp	r3, #0
 800407a:	d007      	beq.n	800408c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0208 	orr.w	r2, r2, #8
 800408a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]
 800409c:	e005      	b.n	80040aa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80040a6:	2302      	movs	r3, #2
 80040a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80040aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80040c2:	f7ff fdd7 	bl	8003c74 <HAL_GetTick>
 80040c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d008      	beq.n	80040e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2280      	movs	r2, #128	; 0x80
 80040d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e052      	b.n	800418c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0216 	bic.w	r2, r2, #22
 80040f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695a      	ldr	r2, [r3, #20]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004104:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	2b00      	cmp	r3, #0
 800410c:	d103      	bne.n	8004116 <HAL_DMA_Abort+0x62>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004112:	2b00      	cmp	r3, #0
 8004114:	d007      	beq.n	8004126 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0208 	bic.w	r2, r2, #8
 8004124:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0201 	bic.w	r2, r2, #1
 8004134:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004136:	e013      	b.n	8004160 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004138:	f7ff fd9c 	bl	8003c74 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b05      	cmp	r3, #5
 8004144:	d90c      	bls.n	8004160 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2220      	movs	r2, #32
 800414a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2203      	movs	r2, #3
 8004150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e015      	b.n	800418c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e4      	bne.n	8004138 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004172:	223f      	movs	r2, #63	; 0x3f
 8004174:	409a      	lsls	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d004      	beq.n	80041b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2280      	movs	r2, #128	; 0x80
 80041ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e00c      	b.n	80041cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2205      	movs	r2, #5
 80041b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0201 	bic.w	r2, r2, #1
 80041c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80041e0:	2300      	movs	r3, #0
 80041e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80041e4:	4b8e      	ldr	r3, [pc, #568]	; (8004420 <HAL_DMA_IRQHandler+0x248>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a8e      	ldr	r2, [pc, #568]	; (8004424 <HAL_DMA_IRQHandler+0x24c>)
 80041ea:	fba2 2303 	umull	r2, r3, r2, r3
 80041ee:	0a9b      	lsrs	r3, r3, #10
 80041f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004202:	2208      	movs	r2, #8
 8004204:	409a      	lsls	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4013      	ands	r3, r2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d01a      	beq.n	8004244 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	d013      	beq.n	8004244 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0204 	bic.w	r2, r2, #4
 800422a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004230:	2208      	movs	r2, #8
 8004232:	409a      	lsls	r2, r3
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423c:	f043 0201 	orr.w	r2, r3, #1
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004248:	2201      	movs	r2, #1
 800424a:	409a      	lsls	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4013      	ands	r3, r2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d012      	beq.n	800427a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00b      	beq.n	800427a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004266:	2201      	movs	r2, #1
 8004268:	409a      	lsls	r2, r3
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004272:	f043 0202 	orr.w	r2, r3, #2
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427e:	2204      	movs	r2, #4
 8004280:	409a      	lsls	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4013      	ands	r3, r2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d012      	beq.n	80042b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00b      	beq.n	80042b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429c:	2204      	movs	r2, #4
 800429e:	409a      	lsls	r2, r3
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a8:	f043 0204 	orr.w	r2, r3, #4
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b4:	2210      	movs	r2, #16
 80042b6:	409a      	lsls	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4013      	ands	r3, r2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d043      	beq.n	8004348 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d03c      	beq.n	8004348 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d2:	2210      	movs	r2, #16
 80042d4:	409a      	lsls	r2, r3
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d018      	beq.n	800431a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d108      	bne.n	8004308 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d024      	beq.n	8004348 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	4798      	blx	r3
 8004306:	e01f      	b.n	8004348 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800430c:	2b00      	cmp	r3, #0
 800430e:	d01b      	beq.n	8004348 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	4798      	blx	r3
 8004318:	e016      	b.n	8004348 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004324:	2b00      	cmp	r3, #0
 8004326:	d107      	bne.n	8004338 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0208 	bic.w	r2, r2, #8
 8004336:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434c:	2220      	movs	r2, #32
 800434e:	409a      	lsls	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4013      	ands	r3, r2
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 808f 	beq.w	8004478 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 8087 	beq.w	8004478 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436e:	2220      	movs	r2, #32
 8004370:	409a      	lsls	r2, r3
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b05      	cmp	r3, #5
 8004380:	d136      	bne.n	80043f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 0216 	bic.w	r2, r2, #22
 8004390:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695a      	ldr	r2, [r3, #20]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d103      	bne.n	80043b2 <HAL_DMA_IRQHandler+0x1da>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d007      	beq.n	80043c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0208 	bic.w	r2, r2, #8
 80043c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c6:	223f      	movs	r2, #63	; 0x3f
 80043c8:	409a      	lsls	r2, r3
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d07e      	beq.n	80044e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	4798      	blx	r3
        }
        return;
 80043ee:	e079      	b.n	80044e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d01d      	beq.n	800443a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10d      	bne.n	8004428 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004410:	2b00      	cmp	r3, #0
 8004412:	d031      	beq.n	8004478 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	4798      	blx	r3
 800441c:	e02c      	b.n	8004478 <HAL_DMA_IRQHandler+0x2a0>
 800441e:	bf00      	nop
 8004420:	20000004 	.word	0x20000004
 8004424:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442c:	2b00      	cmp	r3, #0
 800442e:	d023      	beq.n	8004478 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	4798      	blx	r3
 8004438:	e01e      	b.n	8004478 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10f      	bne.n	8004468 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 0210 	bic.w	r2, r2, #16
 8004456:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447c:	2b00      	cmp	r3, #0
 800447e:	d032      	beq.n	80044e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d022      	beq.n	80044d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2205      	movs	r2, #5
 8004490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 0201 	bic.w	r2, r2, #1
 80044a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	3301      	adds	r3, #1
 80044a8:	60bb      	str	r3, [r7, #8]
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d307      	bcc.n	80044c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f2      	bne.n	80044a4 <HAL_DMA_IRQHandler+0x2cc>
 80044be:	e000      	b.n	80044c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80044c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d005      	beq.n	80044e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	4798      	blx	r3
 80044e2:	e000      	b.n	80044e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80044e4:	bf00      	nop
    }
  }
}
 80044e6:	3718      	adds	r7, #24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004520:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	2b40      	cmp	r3, #64	; 0x40
 8004530:	d108      	bne.n	8004544 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004542:	e007      	b.n	8004554 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	60da      	str	r2, [r3, #12]
}
 8004554:	bf00      	nop
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	b2db      	uxtb	r3, r3
 800456e:	3b10      	subs	r3, #16
 8004570:	4a13      	ldr	r2, [pc, #76]	; (80045c0 <DMA_CalcBaseAndBitshift+0x60>)
 8004572:	fba2 2303 	umull	r2, r3, r2, r3
 8004576:	091b      	lsrs	r3, r3, #4
 8004578:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800457a:	4a12      	ldr	r2, [pc, #72]	; (80045c4 <DMA_CalcBaseAndBitshift+0x64>)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	4413      	add	r3, r2
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b03      	cmp	r3, #3
 800458c:	d908      	bls.n	80045a0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <DMA_CalcBaseAndBitshift+0x68>)
 8004596:	4013      	ands	r3, r2
 8004598:	1d1a      	adds	r2, r3, #4
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	659a      	str	r2, [r3, #88]	; 0x58
 800459e:	e006      	b.n	80045ae <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	461a      	mov	r2, r3
 80045a6:	4b08      	ldr	r3, [pc, #32]	; (80045c8 <DMA_CalcBaseAndBitshift+0x68>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	aaaaaaab 	.word	0xaaaaaaab
 80045c4:	0801d850 	.word	0x0801d850
 80045c8:	fffffc00 	.word	0xfffffc00

080045cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045d4:	2300      	movs	r3, #0
 80045d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d11f      	bne.n	8004626 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d856      	bhi.n	800469a <DMA_CheckFifoParam+0xce>
 80045ec:	a201      	add	r2, pc, #4	; (adr r2, 80045f4 <DMA_CheckFifoParam+0x28>)
 80045ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f2:	bf00      	nop
 80045f4:	08004605 	.word	0x08004605
 80045f8:	08004617 	.word	0x08004617
 80045fc:	08004605 	.word	0x08004605
 8004600:	0800469b 	.word	0x0800469b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d046      	beq.n	800469e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004614:	e043      	b.n	800469e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800461e:	d140      	bne.n	80046a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004624:	e03d      	b.n	80046a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800462e:	d121      	bne.n	8004674 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2b03      	cmp	r3, #3
 8004634:	d837      	bhi.n	80046a6 <DMA_CheckFifoParam+0xda>
 8004636:	a201      	add	r2, pc, #4	; (adr r2, 800463c <DMA_CheckFifoParam+0x70>)
 8004638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463c:	0800464d 	.word	0x0800464d
 8004640:	08004653 	.word	0x08004653
 8004644:	0800464d 	.word	0x0800464d
 8004648:	08004665 	.word	0x08004665
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	73fb      	strb	r3, [r7, #15]
      break;
 8004650:	e030      	b.n	80046b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004656:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d025      	beq.n	80046aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004662:	e022      	b.n	80046aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004668:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800466c:	d11f      	bne.n	80046ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004672:	e01c      	b.n	80046ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b02      	cmp	r3, #2
 8004678:	d903      	bls.n	8004682 <DMA_CheckFifoParam+0xb6>
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	2b03      	cmp	r3, #3
 800467e:	d003      	beq.n	8004688 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004680:	e018      	b.n	80046b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	73fb      	strb	r3, [r7, #15]
      break;
 8004686:	e015      	b.n	80046b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00e      	beq.n	80046b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	73fb      	strb	r3, [r7, #15]
      break;
 8004698:	e00b      	b.n	80046b2 <DMA_CheckFifoParam+0xe6>
      break;
 800469a:	bf00      	nop
 800469c:	e00a      	b.n	80046b4 <DMA_CheckFifoParam+0xe8>
      break;
 800469e:	bf00      	nop
 80046a0:	e008      	b.n	80046b4 <DMA_CheckFifoParam+0xe8>
      break;
 80046a2:	bf00      	nop
 80046a4:	e006      	b.n	80046b4 <DMA_CheckFifoParam+0xe8>
      break;
 80046a6:	bf00      	nop
 80046a8:	e004      	b.n	80046b4 <DMA_CheckFifoParam+0xe8>
      break;
 80046aa:	bf00      	nop
 80046ac:	e002      	b.n	80046b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80046ae:	bf00      	nop
 80046b0:	e000      	b.n	80046b4 <DMA_CheckFifoParam+0xe8>
      break;
 80046b2:	bf00      	nop
    }
  } 
  
  return status; 
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop

080046c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b089      	sub	sp, #36	; 0x24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80046ce:	2300      	movs	r3, #0
 80046d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80046d2:	2300      	movs	r3, #0
 80046d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80046d6:	2300      	movs	r3, #0
 80046d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80046da:	2300      	movs	r3, #0
 80046dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80046de:	2300      	movs	r3, #0
 80046e0:	61fb      	str	r3, [r7, #28]
 80046e2:	e175      	b.n	80049d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80046e4:	2201      	movs	r2, #1
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	4013      	ands	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	f040 8164 	bne.w	80049ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f003 0303 	and.w	r3, r3, #3
 800470a:	2b01      	cmp	r3, #1
 800470c:	d005      	beq.n	800471a <HAL_GPIO_Init+0x56>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d130      	bne.n	800477c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	2203      	movs	r2, #3
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	43db      	mvns	r3, r3
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	4013      	ands	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	fa02 f303 	lsl.w	r3, r2, r3
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	4313      	orrs	r3, r2
 8004742:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004750:	2201      	movs	r2, #1
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	43db      	mvns	r3, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4013      	ands	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	091b      	lsrs	r3, r3, #4
 8004766:	f003 0201 	and.w	r2, r3, #1
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	4313      	orrs	r3, r2
 8004774:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f003 0303 	and.w	r3, r3, #3
 8004784:	2b03      	cmp	r3, #3
 8004786:	d017      	beq.n	80047b8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	2203      	movs	r2, #3
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	43db      	mvns	r3, r3
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	4013      	ands	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f003 0303 	and.w	r3, r3, #3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d123      	bne.n	800480c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	08da      	lsrs	r2, r3, #3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3208      	adds	r2, #8
 80047cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	220f      	movs	r2, #15
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	43db      	mvns	r3, r3
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	4013      	ands	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	08da      	lsrs	r2, r3, #3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	3208      	adds	r2, #8
 8004806:	69b9      	ldr	r1, [r7, #24]
 8004808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	2203      	movs	r2, #3
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	43db      	mvns	r3, r3
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	4013      	ands	r3, r2
 8004822:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f003 0203 	and.w	r2, r3, #3
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	4313      	orrs	r3, r2
 8004838:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80be 	beq.w	80049ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800484e:	4b66      	ldr	r3, [pc, #408]	; (80049e8 <HAL_GPIO_Init+0x324>)
 8004850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004852:	4a65      	ldr	r2, [pc, #404]	; (80049e8 <HAL_GPIO_Init+0x324>)
 8004854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004858:	6453      	str	r3, [r2, #68]	; 0x44
 800485a:	4b63      	ldr	r3, [pc, #396]	; (80049e8 <HAL_GPIO_Init+0x324>)
 800485c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004866:	4a61      	ldr	r2, [pc, #388]	; (80049ec <HAL_GPIO_Init+0x328>)
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	089b      	lsrs	r3, r3, #2
 800486c:	3302      	adds	r3, #2
 800486e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004872:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	220f      	movs	r2, #15
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	43db      	mvns	r3, r3
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	4013      	ands	r3, r2
 8004888:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a58      	ldr	r2, [pc, #352]	; (80049f0 <HAL_GPIO_Init+0x32c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d037      	beq.n	8004902 <HAL_GPIO_Init+0x23e>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a57      	ldr	r2, [pc, #348]	; (80049f4 <HAL_GPIO_Init+0x330>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d031      	beq.n	80048fe <HAL_GPIO_Init+0x23a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a56      	ldr	r2, [pc, #344]	; (80049f8 <HAL_GPIO_Init+0x334>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d02b      	beq.n	80048fa <HAL_GPIO_Init+0x236>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a55      	ldr	r2, [pc, #340]	; (80049fc <HAL_GPIO_Init+0x338>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d025      	beq.n	80048f6 <HAL_GPIO_Init+0x232>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a54      	ldr	r2, [pc, #336]	; (8004a00 <HAL_GPIO_Init+0x33c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d01f      	beq.n	80048f2 <HAL_GPIO_Init+0x22e>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a53      	ldr	r2, [pc, #332]	; (8004a04 <HAL_GPIO_Init+0x340>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d019      	beq.n	80048ee <HAL_GPIO_Init+0x22a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a52      	ldr	r2, [pc, #328]	; (8004a08 <HAL_GPIO_Init+0x344>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d013      	beq.n	80048ea <HAL_GPIO_Init+0x226>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a51      	ldr	r2, [pc, #324]	; (8004a0c <HAL_GPIO_Init+0x348>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00d      	beq.n	80048e6 <HAL_GPIO_Init+0x222>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a50      	ldr	r2, [pc, #320]	; (8004a10 <HAL_GPIO_Init+0x34c>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d007      	beq.n	80048e2 <HAL_GPIO_Init+0x21e>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a4f      	ldr	r2, [pc, #316]	; (8004a14 <HAL_GPIO_Init+0x350>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d101      	bne.n	80048de <HAL_GPIO_Init+0x21a>
 80048da:	2309      	movs	r3, #9
 80048dc:	e012      	b.n	8004904 <HAL_GPIO_Init+0x240>
 80048de:	230a      	movs	r3, #10
 80048e0:	e010      	b.n	8004904 <HAL_GPIO_Init+0x240>
 80048e2:	2308      	movs	r3, #8
 80048e4:	e00e      	b.n	8004904 <HAL_GPIO_Init+0x240>
 80048e6:	2307      	movs	r3, #7
 80048e8:	e00c      	b.n	8004904 <HAL_GPIO_Init+0x240>
 80048ea:	2306      	movs	r3, #6
 80048ec:	e00a      	b.n	8004904 <HAL_GPIO_Init+0x240>
 80048ee:	2305      	movs	r3, #5
 80048f0:	e008      	b.n	8004904 <HAL_GPIO_Init+0x240>
 80048f2:	2304      	movs	r3, #4
 80048f4:	e006      	b.n	8004904 <HAL_GPIO_Init+0x240>
 80048f6:	2303      	movs	r3, #3
 80048f8:	e004      	b.n	8004904 <HAL_GPIO_Init+0x240>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e002      	b.n	8004904 <HAL_GPIO_Init+0x240>
 80048fe:	2301      	movs	r3, #1
 8004900:	e000      	b.n	8004904 <HAL_GPIO_Init+0x240>
 8004902:	2300      	movs	r3, #0
 8004904:	69fa      	ldr	r2, [r7, #28]
 8004906:	f002 0203 	and.w	r2, r2, #3
 800490a:	0092      	lsls	r2, r2, #2
 800490c:	4093      	lsls	r3, r2
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	4313      	orrs	r3, r2
 8004912:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004914:	4935      	ldr	r1, [pc, #212]	; (80049ec <HAL_GPIO_Init+0x328>)
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	089b      	lsrs	r3, r3, #2
 800491a:	3302      	adds	r3, #2
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004922:	4b3d      	ldr	r3, [pc, #244]	; (8004a18 <HAL_GPIO_Init+0x354>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	43db      	mvns	r3, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4013      	ands	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800493e:	69ba      	ldr	r2, [r7, #24]
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	4313      	orrs	r3, r2
 8004944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004946:	4a34      	ldr	r2, [pc, #208]	; (8004a18 <HAL_GPIO_Init+0x354>)
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800494c:	4b32      	ldr	r3, [pc, #200]	; (8004a18 <HAL_GPIO_Init+0x354>)
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	43db      	mvns	r3, r3
 8004956:	69ba      	ldr	r2, [r7, #24]
 8004958:	4013      	ands	r3, r2
 800495a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004970:	4a29      	ldr	r2, [pc, #164]	; (8004a18 <HAL_GPIO_Init+0x354>)
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004976:	4b28      	ldr	r3, [pc, #160]	; (8004a18 <HAL_GPIO_Init+0x354>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	43db      	mvns	r3, r3
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	4013      	ands	r3, r2
 8004984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	4313      	orrs	r3, r2
 8004998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800499a:	4a1f      	ldr	r2, [pc, #124]	; (8004a18 <HAL_GPIO_Init+0x354>)
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049a0:	4b1d      	ldr	r3, [pc, #116]	; (8004a18 <HAL_GPIO_Init+0x354>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	43db      	mvns	r3, r3
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	4013      	ands	r3, r2
 80049ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049c4:	4a14      	ldr	r2, [pc, #80]	; (8004a18 <HAL_GPIO_Init+0x354>)
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	3301      	adds	r3, #1
 80049ce:	61fb      	str	r3, [r7, #28]
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	2b0f      	cmp	r3, #15
 80049d4:	f67f ae86 	bls.w	80046e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80049d8:	bf00      	nop
 80049da:	bf00      	nop
 80049dc:	3724      	adds	r7, #36	; 0x24
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	40023800 	.word	0x40023800
 80049ec:	40013800 	.word	0x40013800
 80049f0:	40020000 	.word	0x40020000
 80049f4:	40020400 	.word	0x40020400
 80049f8:	40020800 	.word	0x40020800
 80049fc:	40020c00 	.word	0x40020c00
 8004a00:	40021000 	.word	0x40021000
 8004a04:	40021400 	.word	0x40021400
 8004a08:	40021800 	.word	0x40021800
 8004a0c:	40021c00 	.word	0x40021c00
 8004a10:	40022000 	.word	0x40022000
 8004a14:	40022400 	.word	0x40022400
 8004a18:	40013c00 	.word	0x40013c00

08004a1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	460b      	mov	r3, r1
 8004a26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691a      	ldr	r2, [r3, #16]
 8004a2c:	887b      	ldrh	r3, [r7, #2]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a34:	2301      	movs	r3, #1
 8004a36:	73fb      	strb	r3, [r7, #15]
 8004a38:	e001      	b.n	8004a3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	460b      	mov	r3, r1
 8004a56:	807b      	strh	r3, [r7, #2]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a5c:	787b      	ldrb	r3, [r7, #1]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a62:	887a      	ldrh	r2, [r7, #2]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004a68:	e003      	b.n	8004a72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004a6a:	887b      	ldrh	r3, [r7, #2]
 8004a6c:	041a      	lsls	r2, r3, #16
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	619a      	str	r2, [r3, #24]
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a80:	b08f      	sub	sp, #60	; 0x3c
 8004a82:	af0a      	add	r7, sp, #40	; 0x28
 8004a84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e116      	b.n	8004cbe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7ff f816 	bl	8003adc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2203      	movs	r2, #3
 8004ab4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d102      	bne.n	8004aca <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f003 ff00 	bl	80088d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	603b      	str	r3, [r7, #0]
 8004ada:	687e      	ldr	r6, [r7, #4]
 8004adc:	466d      	mov	r5, sp
 8004ade:	f106 0410 	add.w	r4, r6, #16
 8004ae2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ae4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ae6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ae8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004aee:	e885 0003 	stmia.w	r5, {r0, r1}
 8004af2:	1d33      	adds	r3, r6, #4
 8004af4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004af6:	6838      	ldr	r0, [r7, #0]
 8004af8:	f003 fe94 	bl	8008824 <USB_CoreInit>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d005      	beq.n	8004b0e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2202      	movs	r2, #2
 8004b06:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e0d7      	b.n	8004cbe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2100      	movs	r1, #0
 8004b14:	4618      	mov	r0, r3
 8004b16:	f003 feee 	bl	80088f6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	73fb      	strb	r3, [r7, #15]
 8004b1e:	e04a      	b.n	8004bb6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004b20:	7bfa      	ldrb	r2, [r7, #15]
 8004b22:	6879      	ldr	r1, [r7, #4]
 8004b24:	4613      	mov	r3, r2
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	4413      	add	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	440b      	add	r3, r1
 8004b2e:	333d      	adds	r3, #61	; 0x3d
 8004b30:	2201      	movs	r2, #1
 8004b32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b34:	7bfa      	ldrb	r2, [r7, #15]
 8004b36:	6879      	ldr	r1, [r7, #4]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	4413      	add	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	333c      	adds	r3, #60	; 0x3c
 8004b44:	7bfa      	ldrb	r2, [r7, #15]
 8004b46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b48:	7bfa      	ldrb	r2, [r7, #15]
 8004b4a:	7bfb      	ldrb	r3, [r7, #15]
 8004b4c:	b298      	uxth	r0, r3
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	4613      	mov	r3, r2
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	4413      	add	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	3344      	adds	r3, #68	; 0x44
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b60:	7bfa      	ldrb	r2, [r7, #15]
 8004b62:	6879      	ldr	r1, [r7, #4]
 8004b64:	4613      	mov	r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	4413      	add	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	3340      	adds	r3, #64	; 0x40
 8004b70:	2200      	movs	r2, #0
 8004b72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b74:	7bfa      	ldrb	r2, [r7, #15]
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	440b      	add	r3, r1
 8004b82:	3348      	adds	r3, #72	; 0x48
 8004b84:	2200      	movs	r2, #0
 8004b86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b88:	7bfa      	ldrb	r2, [r7, #15]
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	4413      	add	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	334c      	adds	r3, #76	; 0x4c
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b9c:	7bfa      	ldrb	r2, [r7, #15]
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	4413      	add	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	440b      	add	r3, r1
 8004baa:	3354      	adds	r3, #84	; 0x54
 8004bac:	2200      	movs	r2, #0
 8004bae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	73fb      	strb	r3, [r7, #15]
 8004bb6:	7bfa      	ldrb	r2, [r7, #15]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d3af      	bcc.n	8004b20 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	73fb      	strb	r3, [r7, #15]
 8004bc4:	e044      	b.n	8004c50 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004bc6:	7bfa      	ldrb	r2, [r7, #15]
 8004bc8:	6879      	ldr	r1, [r7, #4]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	4413      	add	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	440b      	add	r3, r1
 8004bd4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004bd8:	2200      	movs	r2, #0
 8004bda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004bdc:	7bfa      	ldrb	r2, [r7, #15]
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	4613      	mov	r3, r2
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	4413      	add	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004bee:	7bfa      	ldrb	r2, [r7, #15]
 8004bf0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004bf2:	7bfa      	ldrb	r2, [r7, #15]
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4413      	add	r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	440b      	add	r3, r1
 8004c00:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004c04:	2200      	movs	r2, #0
 8004c06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c08:	7bfa      	ldrb	r2, [r7, #15]
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004c1e:	7bfa      	ldrb	r2, [r7, #15]
 8004c20:	6879      	ldr	r1, [r7, #4]
 8004c22:	4613      	mov	r3, r2
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	4413      	add	r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	440b      	add	r3, r1
 8004c2c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004c30:	2200      	movs	r2, #0
 8004c32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004c34:	7bfa      	ldrb	r2, [r7, #15]
 8004c36:	6879      	ldr	r1, [r7, #4]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	4413      	add	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
 8004c50:	7bfa      	ldrb	r2, [r7, #15]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d3b5      	bcc.n	8004bc6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	687e      	ldr	r6, [r7, #4]
 8004c62:	466d      	mov	r5, sp
 8004c64:	f106 0410 	add.w	r4, r6, #16
 8004c68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c74:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c78:	1d33      	adds	r3, r6, #4
 8004c7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c7c:	6838      	ldr	r0, [r7, #0]
 8004c7e:	f003 fe87 	bl	8008990 <USB_DevInit>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d005      	beq.n	8004c94 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e014      	b.n	8004cbe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d102      	bne.n	8004cb2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f80b 	bl	8004cc8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f004 f845 	bl	8008d46 <USB_DevDisconnect>

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004cc8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b085      	sub	sp, #20
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cf6:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <HAL_PCDEx_ActivateLPM+0x44>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	10000003 	.word	0x10000003

08004d10 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d14:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a04      	ldr	r2, [pc, #16]	; (8004d2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d1e:	6013      	str	r3, [r2, #0]
}
 8004d20:	bf00      	nop
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40007000 	.word	0x40007000

08004d30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004d36:	2300      	movs	r3, #0
 8004d38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d3a:	4b23      	ldr	r3, [pc, #140]	; (8004dc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	4a22      	ldr	r2, [pc, #136]	; (8004dc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d44:	6413      	str	r3, [r2, #64]	; 0x40
 8004d46:	4b20      	ldr	r3, [pc, #128]	; (8004dc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d4e:	603b      	str	r3, [r7, #0]
 8004d50:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004d52:	4b1e      	ldr	r3, [pc, #120]	; (8004dcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a1d      	ldr	r2, [pc, #116]	; (8004dcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d5c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d5e:	f7fe ff89 	bl	8003c74 <HAL_GetTick>
 8004d62:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d64:	e009      	b.n	8004d7a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d66:	f7fe ff85 	bl	8003c74 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d74:	d901      	bls.n	8004d7a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e022      	b.n	8004dc0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d7a:	4b14      	ldr	r3, [pc, #80]	; (8004dcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d86:	d1ee      	bne.n	8004d66 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004d88:	4b10      	ldr	r3, [pc, #64]	; (8004dcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a0f      	ldr	r2, [pc, #60]	; (8004dcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d92:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d94:	f7fe ff6e 	bl	8003c74 <HAL_GetTick>
 8004d98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004d9a:	e009      	b.n	8004db0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d9c:	f7fe ff6a 	bl	8003c74 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004daa:	d901      	bls.n	8004db0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e007      	b.n	8004dc0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004db0:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dbc:	d1ee      	bne.n	8004d9c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	40007000 	.word	0x40007000

08004dd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d101      	bne.n	8004de6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e29b      	b.n	800531e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	f000 8087 	beq.w	8004f02 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004df4:	4b96      	ldr	r3, [pc, #600]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f003 030c 	and.w	r3, r3, #12
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	d00c      	beq.n	8004e1a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e00:	4b93      	ldr	r3, [pc, #588]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 030c 	and.w	r3, r3, #12
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d112      	bne.n	8004e32 <HAL_RCC_OscConfig+0x62>
 8004e0c:	4b90      	ldr	r3, [pc, #576]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e18:	d10b      	bne.n	8004e32 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e1a:	4b8d      	ldr	r3, [pc, #564]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d06c      	beq.n	8004f00 <HAL_RCC_OscConfig+0x130>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d168      	bne.n	8004f00 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e275      	b.n	800531e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e3a:	d106      	bne.n	8004e4a <HAL_RCC_OscConfig+0x7a>
 8004e3c:	4b84      	ldr	r3, [pc, #528]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a83      	ldr	r2, [pc, #524]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e46:	6013      	str	r3, [r2, #0]
 8004e48:	e02e      	b.n	8004ea8 <HAL_RCC_OscConfig+0xd8>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10c      	bne.n	8004e6c <HAL_RCC_OscConfig+0x9c>
 8004e52:	4b7f      	ldr	r3, [pc, #508]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a7e      	ldr	r2, [pc, #504]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e5c:	6013      	str	r3, [r2, #0]
 8004e5e:	4b7c      	ldr	r3, [pc, #496]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a7b      	ldr	r2, [pc, #492]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004e64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	e01d      	b.n	8004ea8 <HAL_RCC_OscConfig+0xd8>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e74:	d10c      	bne.n	8004e90 <HAL_RCC_OscConfig+0xc0>
 8004e76:	4b76      	ldr	r3, [pc, #472]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a75      	ldr	r2, [pc, #468]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e80:	6013      	str	r3, [r2, #0]
 8004e82:	4b73      	ldr	r3, [pc, #460]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a72      	ldr	r2, [pc, #456]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e8c:	6013      	str	r3, [r2, #0]
 8004e8e:	e00b      	b.n	8004ea8 <HAL_RCC_OscConfig+0xd8>
 8004e90:	4b6f      	ldr	r3, [pc, #444]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a6e      	ldr	r2, [pc, #440]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e9a:	6013      	str	r3, [r2, #0]
 8004e9c:	4b6c      	ldr	r3, [pc, #432]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a6b      	ldr	r2, [pc, #428]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ea6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d013      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb0:	f7fe fee0 	bl	8003c74 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eb8:	f7fe fedc 	bl	8003c74 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b64      	cmp	r3, #100	; 0x64
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e229      	b.n	800531e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eca:	4b61      	ldr	r3, [pc, #388]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0f0      	beq.n	8004eb8 <HAL_RCC_OscConfig+0xe8>
 8004ed6:	e014      	b.n	8004f02 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed8:	f7fe fecc 	bl	8003c74 <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ee0:	f7fe fec8 	bl	8003c74 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b64      	cmp	r3, #100	; 0x64
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e215      	b.n	800531e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ef2:	4b57      	ldr	r3, [pc, #348]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f0      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x110>
 8004efe:	e000      	b.n	8004f02 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d069      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f0e:	4b50      	ldr	r3, [pc, #320]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 030c 	and.w	r3, r3, #12
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00b      	beq.n	8004f32 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f1a:	4b4d      	ldr	r3, [pc, #308]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 030c 	and.w	r3, r3, #12
 8004f22:	2b08      	cmp	r3, #8
 8004f24:	d11c      	bne.n	8004f60 <HAL_RCC_OscConfig+0x190>
 8004f26:	4b4a      	ldr	r3, [pc, #296]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d116      	bne.n	8004f60 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f32:	4b47      	ldr	r3, [pc, #284]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d005      	beq.n	8004f4a <HAL_RCC_OscConfig+0x17a>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d001      	beq.n	8004f4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e1e9      	b.n	800531e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f4a:	4b41      	ldr	r3, [pc, #260]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	493d      	ldr	r1, [pc, #244]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f5e:	e040      	b.n	8004fe2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d023      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f68:	4b39      	ldr	r3, [pc, #228]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a38      	ldr	r2, [pc, #224]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004f6e:	f043 0301 	orr.w	r3, r3, #1
 8004f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f74:	f7fe fe7e 	bl	8003c74 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f7c:	f7fe fe7a 	bl	8003c74 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e1c7      	b.n	800531e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f8e:	4b30      	ldr	r3, [pc, #192]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0f0      	beq.n	8004f7c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f9a:	4b2d      	ldr	r3, [pc, #180]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	4929      	ldr	r1, [pc, #164]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	600b      	str	r3, [r1, #0]
 8004fae:	e018      	b.n	8004fe2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fb0:	4b27      	ldr	r3, [pc, #156]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a26      	ldr	r2, [pc, #152]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004fb6:	f023 0301 	bic.w	r3, r3, #1
 8004fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbc:	f7fe fe5a 	bl	8003c74 <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fc4:	f7fe fe56 	bl	8003c74 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e1a3      	b.n	800531e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fd6:	4b1e      	ldr	r3, [pc, #120]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f0      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0308 	and.w	r3, r3, #8
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d038      	beq.n	8005060 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d019      	beq.n	800502a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ff6:	4b16      	ldr	r3, [pc, #88]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ffa:	4a15      	ldr	r2, [pc, #84]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8004ffc:	f043 0301 	orr.w	r3, r3, #1
 8005000:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005002:	f7fe fe37 	bl	8003c74 <HAL_GetTick>
 8005006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005008:	e008      	b.n	800501c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800500a:	f7fe fe33 	bl	8003c74 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	2b02      	cmp	r3, #2
 8005016:	d901      	bls.n	800501c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e180      	b.n	800531e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800501c:	4b0c      	ldr	r3, [pc, #48]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 800501e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d0f0      	beq.n	800500a <HAL_RCC_OscConfig+0x23a>
 8005028:	e01a      	b.n	8005060 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800502a:	4b09      	ldr	r3, [pc, #36]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 800502c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800502e:	4a08      	ldr	r2, [pc, #32]	; (8005050 <HAL_RCC_OscConfig+0x280>)
 8005030:	f023 0301 	bic.w	r3, r3, #1
 8005034:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005036:	f7fe fe1d 	bl	8003c74 <HAL_GetTick>
 800503a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800503c:	e00a      	b.n	8005054 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800503e:	f7fe fe19 	bl	8003c74 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d903      	bls.n	8005054 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e166      	b.n	800531e <HAL_RCC_OscConfig+0x54e>
 8005050:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005054:	4b92      	ldr	r3, [pc, #584]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 8005056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1ee      	bne.n	800503e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 80a4 	beq.w	80051b6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800506e:	4b8c      	ldr	r3, [pc, #560]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10d      	bne.n	8005096 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800507a:	4b89      	ldr	r3, [pc, #548]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	4a88      	ldr	r2, [pc, #544]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 8005080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005084:	6413      	str	r3, [r2, #64]	; 0x40
 8005086:	4b86      	ldr	r3, [pc, #536]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800508e:	60bb      	str	r3, [r7, #8]
 8005090:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005092:	2301      	movs	r3, #1
 8005094:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005096:	4b83      	ldr	r3, [pc, #524]	; (80052a4 <HAL_RCC_OscConfig+0x4d4>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d118      	bne.n	80050d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80050a2:	4b80      	ldr	r3, [pc, #512]	; (80052a4 <HAL_RCC_OscConfig+0x4d4>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a7f      	ldr	r2, [pc, #508]	; (80052a4 <HAL_RCC_OscConfig+0x4d4>)
 80050a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ae:	f7fe fde1 	bl	8003c74 <HAL_GetTick>
 80050b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050b4:	e008      	b.n	80050c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050b6:	f7fe fddd 	bl	8003c74 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b64      	cmp	r3, #100	; 0x64
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e12a      	b.n	800531e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050c8:	4b76      	ldr	r3, [pc, #472]	; (80052a4 <HAL_RCC_OscConfig+0x4d4>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0f0      	beq.n	80050b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d106      	bne.n	80050ea <HAL_RCC_OscConfig+0x31a>
 80050dc:	4b70      	ldr	r3, [pc, #448]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 80050de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e0:	4a6f      	ldr	r2, [pc, #444]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 80050e2:	f043 0301 	orr.w	r3, r3, #1
 80050e6:	6713      	str	r3, [r2, #112]	; 0x70
 80050e8:	e02d      	b.n	8005146 <HAL_RCC_OscConfig+0x376>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10c      	bne.n	800510c <HAL_RCC_OscConfig+0x33c>
 80050f2:	4b6b      	ldr	r3, [pc, #428]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 80050f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f6:	4a6a      	ldr	r2, [pc, #424]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 80050f8:	f023 0301 	bic.w	r3, r3, #1
 80050fc:	6713      	str	r3, [r2, #112]	; 0x70
 80050fe:	4b68      	ldr	r3, [pc, #416]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 8005100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005102:	4a67      	ldr	r2, [pc, #412]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 8005104:	f023 0304 	bic.w	r3, r3, #4
 8005108:	6713      	str	r3, [r2, #112]	; 0x70
 800510a:	e01c      	b.n	8005146 <HAL_RCC_OscConfig+0x376>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	2b05      	cmp	r3, #5
 8005112:	d10c      	bne.n	800512e <HAL_RCC_OscConfig+0x35e>
 8005114:	4b62      	ldr	r3, [pc, #392]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 8005116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005118:	4a61      	ldr	r2, [pc, #388]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 800511a:	f043 0304 	orr.w	r3, r3, #4
 800511e:	6713      	str	r3, [r2, #112]	; 0x70
 8005120:	4b5f      	ldr	r3, [pc, #380]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 8005122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005124:	4a5e      	ldr	r2, [pc, #376]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 8005126:	f043 0301 	orr.w	r3, r3, #1
 800512a:	6713      	str	r3, [r2, #112]	; 0x70
 800512c:	e00b      	b.n	8005146 <HAL_RCC_OscConfig+0x376>
 800512e:	4b5c      	ldr	r3, [pc, #368]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 8005130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005132:	4a5b      	ldr	r2, [pc, #364]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 8005134:	f023 0301 	bic.w	r3, r3, #1
 8005138:	6713      	str	r3, [r2, #112]	; 0x70
 800513a:	4b59      	ldr	r3, [pc, #356]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 800513c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513e:	4a58      	ldr	r2, [pc, #352]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 8005140:	f023 0304 	bic.w	r3, r3, #4
 8005144:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d015      	beq.n	800517a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800514e:	f7fe fd91 	bl	8003c74 <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005154:	e00a      	b.n	800516c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005156:	f7fe fd8d 	bl	8003c74 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	f241 3288 	movw	r2, #5000	; 0x1388
 8005164:	4293      	cmp	r3, r2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e0d8      	b.n	800531e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800516c:	4b4c      	ldr	r3, [pc, #304]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 800516e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0ee      	beq.n	8005156 <HAL_RCC_OscConfig+0x386>
 8005178:	e014      	b.n	80051a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800517a:	f7fe fd7b 	bl	8003c74 <HAL_GetTick>
 800517e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005180:	e00a      	b.n	8005198 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005182:	f7fe fd77 	bl	8003c74 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005190:	4293      	cmp	r3, r2
 8005192:	d901      	bls.n	8005198 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e0c2      	b.n	800531e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005198:	4b41      	ldr	r3, [pc, #260]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 800519a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1ee      	bne.n	8005182 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051a4:	7dfb      	ldrb	r3, [r7, #23]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d105      	bne.n	80051b6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051aa:	4b3d      	ldr	r3, [pc, #244]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	4a3c      	ldr	r2, [pc, #240]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 80051b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 80ae 	beq.w	800531c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051c0:	4b37      	ldr	r3, [pc, #220]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f003 030c 	and.w	r3, r3, #12
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d06d      	beq.n	80052a8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d14b      	bne.n	800526c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d4:	4b32      	ldr	r3, [pc, #200]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a31      	ldr	r2, [pc, #196]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 80051da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e0:	f7fe fd48 	bl	8003c74 <HAL_GetTick>
 80051e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e8:	f7fe fd44 	bl	8003c74 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e091      	b.n	800531e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051fa:	4b29      	ldr	r3, [pc, #164]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1f0      	bne.n	80051e8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	69da      	ldr	r2, [r3, #28]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	431a      	orrs	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005214:	019b      	lsls	r3, r3, #6
 8005216:	431a      	orrs	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521c:	085b      	lsrs	r3, r3, #1
 800521e:	3b01      	subs	r3, #1
 8005220:	041b      	lsls	r3, r3, #16
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005228:	061b      	lsls	r3, r3, #24
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005230:	071b      	lsls	r3, r3, #28
 8005232:	491b      	ldr	r1, [pc, #108]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 8005234:	4313      	orrs	r3, r2
 8005236:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005238:	4b19      	ldr	r3, [pc, #100]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a18      	ldr	r2, [pc, #96]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 800523e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005244:	f7fe fd16 	bl	8003c74 <HAL_GetTick>
 8005248:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800524a:	e008      	b.n	800525e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800524c:	f7fe fd12 	bl	8003c74 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d901      	bls.n	800525e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e05f      	b.n	800531e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800525e:	4b10      	ldr	r3, [pc, #64]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d0f0      	beq.n	800524c <HAL_RCC_OscConfig+0x47c>
 800526a:	e057      	b.n	800531c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800526c:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a0b      	ldr	r2, [pc, #44]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 8005272:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005276:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005278:	f7fe fcfc 	bl	8003c74 <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005280:	f7fe fcf8 	bl	8003c74 <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e045      	b.n	800531e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005292:	4b03      	ldr	r3, [pc, #12]	; (80052a0 <HAL_RCC_OscConfig+0x4d0>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1f0      	bne.n	8005280 <HAL_RCC_OscConfig+0x4b0>
 800529e:	e03d      	b.n	800531c <HAL_RCC_OscConfig+0x54c>
 80052a0:	40023800 	.word	0x40023800
 80052a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80052a8:	4b1f      	ldr	r3, [pc, #124]	; (8005328 <HAL_RCC_OscConfig+0x558>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d030      	beq.n	8005318 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d129      	bne.n	8005318 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d122      	bne.n	8005318 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052d8:	4013      	ands	r3, r2
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052de:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d119      	bne.n	8005318 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ee:	085b      	lsrs	r3, r3, #1
 80052f0:	3b01      	subs	r3, #1
 80052f2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d10f      	bne.n	8005318 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005302:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005304:	429a      	cmp	r2, r3
 8005306:	d107      	bne.n	8005318 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005312:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005314:	429a      	cmp	r2, r3
 8005316:	d001      	beq.n	800531c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e000      	b.n	800531e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3718      	adds	r7, #24
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	40023800 	.word	0x40023800

0800532c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e0d0      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005344:	4b6a      	ldr	r3, [pc, #424]	; (80054f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 030f 	and.w	r3, r3, #15
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	429a      	cmp	r2, r3
 8005350:	d910      	bls.n	8005374 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005352:	4b67      	ldr	r3, [pc, #412]	; (80054f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f023 020f 	bic.w	r2, r3, #15
 800535a:	4965      	ldr	r1, [pc, #404]	; (80054f0 <HAL_RCC_ClockConfig+0x1c4>)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	4313      	orrs	r3, r2
 8005360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005362:	4b63      	ldr	r3, [pc, #396]	; (80054f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 030f 	and.w	r3, r3, #15
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	429a      	cmp	r2, r3
 800536e:	d001      	beq.n	8005374 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e0b8      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d020      	beq.n	80053c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b00      	cmp	r3, #0
 800538a:	d005      	beq.n	8005398 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800538c:	4b59      	ldr	r3, [pc, #356]	; (80054f4 <HAL_RCC_ClockConfig+0x1c8>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	4a58      	ldr	r2, [pc, #352]	; (80054f4 <HAL_RCC_ClockConfig+0x1c8>)
 8005392:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005396:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0308 	and.w	r3, r3, #8
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d005      	beq.n	80053b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053a4:	4b53      	ldr	r3, [pc, #332]	; (80054f4 <HAL_RCC_ClockConfig+0x1c8>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	4a52      	ldr	r2, [pc, #328]	; (80054f4 <HAL_RCC_ClockConfig+0x1c8>)
 80053aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053b0:	4b50      	ldr	r3, [pc, #320]	; (80054f4 <HAL_RCC_ClockConfig+0x1c8>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	494d      	ldr	r1, [pc, #308]	; (80054f4 <HAL_RCC_ClockConfig+0x1c8>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d040      	beq.n	8005450 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d107      	bne.n	80053e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053d6:	4b47      	ldr	r3, [pc, #284]	; (80054f4 <HAL_RCC_ClockConfig+0x1c8>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d115      	bne.n	800540e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e07f      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d107      	bne.n	80053fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ee:	4b41      	ldr	r3, [pc, #260]	; (80054f4 <HAL_RCC_ClockConfig+0x1c8>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d109      	bne.n	800540e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e073      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053fe:	4b3d      	ldr	r3, [pc, #244]	; (80054f4 <HAL_RCC_ClockConfig+0x1c8>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e06b      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800540e:	4b39      	ldr	r3, [pc, #228]	; (80054f4 <HAL_RCC_ClockConfig+0x1c8>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f023 0203 	bic.w	r2, r3, #3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	4936      	ldr	r1, [pc, #216]	; (80054f4 <HAL_RCC_ClockConfig+0x1c8>)
 800541c:	4313      	orrs	r3, r2
 800541e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005420:	f7fe fc28 	bl	8003c74 <HAL_GetTick>
 8005424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005426:	e00a      	b.n	800543e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005428:	f7fe fc24 	bl	8003c74 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	f241 3288 	movw	r2, #5000	; 0x1388
 8005436:	4293      	cmp	r3, r2
 8005438:	d901      	bls.n	800543e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e053      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800543e:	4b2d      	ldr	r3, [pc, #180]	; (80054f4 <HAL_RCC_ClockConfig+0x1c8>)
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 020c 	and.w	r2, r3, #12
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	429a      	cmp	r2, r3
 800544e:	d1eb      	bne.n	8005428 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005450:	4b27      	ldr	r3, [pc, #156]	; (80054f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 030f 	and.w	r3, r3, #15
 8005458:	683a      	ldr	r2, [r7, #0]
 800545a:	429a      	cmp	r2, r3
 800545c:	d210      	bcs.n	8005480 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800545e:	4b24      	ldr	r3, [pc, #144]	; (80054f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f023 020f 	bic.w	r2, r3, #15
 8005466:	4922      	ldr	r1, [pc, #136]	; (80054f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	4313      	orrs	r3, r2
 800546c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800546e:	4b20      	ldr	r3, [pc, #128]	; (80054f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	429a      	cmp	r2, r3
 800547a:	d001      	beq.n	8005480 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e032      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b00      	cmp	r3, #0
 800548a:	d008      	beq.n	800549e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800548c:	4b19      	ldr	r3, [pc, #100]	; (80054f4 <HAL_RCC_ClockConfig+0x1c8>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	4916      	ldr	r1, [pc, #88]	; (80054f4 <HAL_RCC_ClockConfig+0x1c8>)
 800549a:	4313      	orrs	r3, r2
 800549c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0308 	and.w	r3, r3, #8
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d009      	beq.n	80054be <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054aa:	4b12      	ldr	r3, [pc, #72]	; (80054f4 <HAL_RCC_ClockConfig+0x1c8>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	490e      	ldr	r1, [pc, #56]	; (80054f4 <HAL_RCC_ClockConfig+0x1c8>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054be:	f000 f821 	bl	8005504 <HAL_RCC_GetSysClockFreq>
 80054c2:	4602      	mov	r2, r0
 80054c4:	4b0b      	ldr	r3, [pc, #44]	; (80054f4 <HAL_RCC_ClockConfig+0x1c8>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	091b      	lsrs	r3, r3, #4
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	490a      	ldr	r1, [pc, #40]	; (80054f8 <HAL_RCC_ClockConfig+0x1cc>)
 80054d0:	5ccb      	ldrb	r3, [r1, r3]
 80054d2:	fa22 f303 	lsr.w	r3, r2, r3
 80054d6:	4a09      	ldr	r2, [pc, #36]	; (80054fc <HAL_RCC_ClockConfig+0x1d0>)
 80054d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80054da:	4b09      	ldr	r3, [pc, #36]	; (8005500 <HAL_RCC_ClockConfig+0x1d4>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4618      	mov	r0, r3
 80054e0:	f7fd fbba 	bl	8002c58 <HAL_InitTick>

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	40023c00 	.word	0x40023c00
 80054f4:	40023800 	.word	0x40023800
 80054f8:	0801d838 	.word	0x0801d838
 80054fc:	20000004 	.word	0x20000004
 8005500:	20000008 	.word	0x20000008

08005504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005508:	b094      	sub	sp, #80	; 0x50
 800550a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800550c:	2300      	movs	r3, #0
 800550e:	647b      	str	r3, [r7, #68]	; 0x44
 8005510:	2300      	movs	r3, #0
 8005512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005514:	2300      	movs	r3, #0
 8005516:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005518:	2300      	movs	r3, #0
 800551a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800551c:	4b79      	ldr	r3, [pc, #484]	; (8005704 <HAL_RCC_GetSysClockFreq+0x200>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f003 030c 	and.w	r3, r3, #12
 8005524:	2b08      	cmp	r3, #8
 8005526:	d00d      	beq.n	8005544 <HAL_RCC_GetSysClockFreq+0x40>
 8005528:	2b08      	cmp	r3, #8
 800552a:	f200 80e1 	bhi.w	80056f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <HAL_RCC_GetSysClockFreq+0x34>
 8005532:	2b04      	cmp	r3, #4
 8005534:	d003      	beq.n	800553e <HAL_RCC_GetSysClockFreq+0x3a>
 8005536:	e0db      	b.n	80056f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005538:	4b73      	ldr	r3, [pc, #460]	; (8005708 <HAL_RCC_GetSysClockFreq+0x204>)
 800553a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800553c:	e0db      	b.n	80056f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800553e:	4b73      	ldr	r3, [pc, #460]	; (800570c <HAL_RCC_GetSysClockFreq+0x208>)
 8005540:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005542:	e0d8      	b.n	80056f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005544:	4b6f      	ldr	r3, [pc, #444]	; (8005704 <HAL_RCC_GetSysClockFreq+0x200>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800554c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800554e:	4b6d      	ldr	r3, [pc, #436]	; (8005704 <HAL_RCC_GetSysClockFreq+0x200>)
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d063      	beq.n	8005622 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800555a:	4b6a      	ldr	r3, [pc, #424]	; (8005704 <HAL_RCC_GetSysClockFreq+0x200>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	099b      	lsrs	r3, r3, #6
 8005560:	2200      	movs	r2, #0
 8005562:	63bb      	str	r3, [r7, #56]	; 0x38
 8005564:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800556c:	633b      	str	r3, [r7, #48]	; 0x30
 800556e:	2300      	movs	r3, #0
 8005570:	637b      	str	r3, [r7, #52]	; 0x34
 8005572:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005576:	4622      	mov	r2, r4
 8005578:	462b      	mov	r3, r5
 800557a:	f04f 0000 	mov.w	r0, #0
 800557e:	f04f 0100 	mov.w	r1, #0
 8005582:	0159      	lsls	r1, r3, #5
 8005584:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005588:	0150      	lsls	r0, r2, #5
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	4621      	mov	r1, r4
 8005590:	1a51      	subs	r1, r2, r1
 8005592:	6139      	str	r1, [r7, #16]
 8005594:	4629      	mov	r1, r5
 8005596:	eb63 0301 	sbc.w	r3, r3, r1
 800559a:	617b      	str	r3, [r7, #20]
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	f04f 0300 	mov.w	r3, #0
 80055a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055a8:	4659      	mov	r1, fp
 80055aa:	018b      	lsls	r3, r1, #6
 80055ac:	4651      	mov	r1, sl
 80055ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055b2:	4651      	mov	r1, sl
 80055b4:	018a      	lsls	r2, r1, #6
 80055b6:	4651      	mov	r1, sl
 80055b8:	ebb2 0801 	subs.w	r8, r2, r1
 80055bc:	4659      	mov	r1, fp
 80055be:	eb63 0901 	sbc.w	r9, r3, r1
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	f04f 0300 	mov.w	r3, #0
 80055ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055d6:	4690      	mov	r8, r2
 80055d8:	4699      	mov	r9, r3
 80055da:	4623      	mov	r3, r4
 80055dc:	eb18 0303 	adds.w	r3, r8, r3
 80055e0:	60bb      	str	r3, [r7, #8]
 80055e2:	462b      	mov	r3, r5
 80055e4:	eb49 0303 	adc.w	r3, r9, r3
 80055e8:	60fb      	str	r3, [r7, #12]
 80055ea:	f04f 0200 	mov.w	r2, #0
 80055ee:	f04f 0300 	mov.w	r3, #0
 80055f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80055f6:	4629      	mov	r1, r5
 80055f8:	024b      	lsls	r3, r1, #9
 80055fa:	4621      	mov	r1, r4
 80055fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005600:	4621      	mov	r1, r4
 8005602:	024a      	lsls	r2, r1, #9
 8005604:	4610      	mov	r0, r2
 8005606:	4619      	mov	r1, r3
 8005608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800560a:	2200      	movs	r2, #0
 800560c:	62bb      	str	r3, [r7, #40]	; 0x28
 800560e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005610:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005614:	f7fa fecc 	bl	80003b0 <__aeabi_uldivmod>
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	4613      	mov	r3, r2
 800561e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005620:	e058      	b.n	80056d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005622:	4b38      	ldr	r3, [pc, #224]	; (8005704 <HAL_RCC_GetSysClockFreq+0x200>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	099b      	lsrs	r3, r3, #6
 8005628:	2200      	movs	r2, #0
 800562a:	4618      	mov	r0, r3
 800562c:	4611      	mov	r1, r2
 800562e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005632:	623b      	str	r3, [r7, #32]
 8005634:	2300      	movs	r3, #0
 8005636:	627b      	str	r3, [r7, #36]	; 0x24
 8005638:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800563c:	4642      	mov	r2, r8
 800563e:	464b      	mov	r3, r9
 8005640:	f04f 0000 	mov.w	r0, #0
 8005644:	f04f 0100 	mov.w	r1, #0
 8005648:	0159      	lsls	r1, r3, #5
 800564a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800564e:	0150      	lsls	r0, r2, #5
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4641      	mov	r1, r8
 8005656:	ebb2 0a01 	subs.w	sl, r2, r1
 800565a:	4649      	mov	r1, r9
 800565c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005660:	f04f 0200 	mov.w	r2, #0
 8005664:	f04f 0300 	mov.w	r3, #0
 8005668:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800566c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005670:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005674:	ebb2 040a 	subs.w	r4, r2, sl
 8005678:	eb63 050b 	sbc.w	r5, r3, fp
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	00eb      	lsls	r3, r5, #3
 8005686:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800568a:	00e2      	lsls	r2, r4, #3
 800568c:	4614      	mov	r4, r2
 800568e:	461d      	mov	r5, r3
 8005690:	4643      	mov	r3, r8
 8005692:	18e3      	adds	r3, r4, r3
 8005694:	603b      	str	r3, [r7, #0]
 8005696:	464b      	mov	r3, r9
 8005698:	eb45 0303 	adc.w	r3, r5, r3
 800569c:	607b      	str	r3, [r7, #4]
 800569e:	f04f 0200 	mov.w	r2, #0
 80056a2:	f04f 0300 	mov.w	r3, #0
 80056a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056aa:	4629      	mov	r1, r5
 80056ac:	028b      	lsls	r3, r1, #10
 80056ae:	4621      	mov	r1, r4
 80056b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056b4:	4621      	mov	r1, r4
 80056b6:	028a      	lsls	r2, r1, #10
 80056b8:	4610      	mov	r0, r2
 80056ba:	4619      	mov	r1, r3
 80056bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056be:	2200      	movs	r2, #0
 80056c0:	61bb      	str	r3, [r7, #24]
 80056c2:	61fa      	str	r2, [r7, #28]
 80056c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056c8:	f7fa fe72 	bl	80003b0 <__aeabi_uldivmod>
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	4613      	mov	r3, r2
 80056d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80056d4:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <HAL_RCC_GetSysClockFreq+0x200>)
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	0c1b      	lsrs	r3, r3, #16
 80056da:	f003 0303 	and.w	r3, r3, #3
 80056de:	3301      	adds	r3, #1
 80056e0:	005b      	lsls	r3, r3, #1
 80056e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80056e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056ee:	e002      	b.n	80056f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056f0:	4b05      	ldr	r3, [pc, #20]	; (8005708 <HAL_RCC_GetSysClockFreq+0x204>)
 80056f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80056f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3750      	adds	r7, #80	; 0x50
 80056fc:	46bd      	mov	sp, r7
 80056fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005702:	bf00      	nop
 8005704:	40023800 	.word	0x40023800
 8005708:	00f42400 	.word	0x00f42400
 800570c:	007a1200 	.word	0x007a1200

08005710 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005710:	b480      	push	{r7}
 8005712:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005714:	4b03      	ldr	r3, [pc, #12]	; (8005724 <HAL_RCC_GetHCLKFreq+0x14>)
 8005716:	681b      	ldr	r3, [r3, #0]
}
 8005718:	4618      	mov	r0, r3
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	20000004 	.word	0x20000004

08005728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800572c:	f7ff fff0 	bl	8005710 <HAL_RCC_GetHCLKFreq>
 8005730:	4602      	mov	r2, r0
 8005732:	4b05      	ldr	r3, [pc, #20]	; (8005748 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	0a9b      	lsrs	r3, r3, #10
 8005738:	f003 0307 	and.w	r3, r3, #7
 800573c:	4903      	ldr	r1, [pc, #12]	; (800574c <HAL_RCC_GetPCLK1Freq+0x24>)
 800573e:	5ccb      	ldrb	r3, [r1, r3]
 8005740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005744:	4618      	mov	r0, r3
 8005746:	bd80      	pop	{r7, pc}
 8005748:	40023800 	.word	0x40023800
 800574c:	0801d848 	.word	0x0801d848

08005750 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005754:	f7ff ffdc 	bl	8005710 <HAL_RCC_GetHCLKFreq>
 8005758:	4602      	mov	r2, r0
 800575a:	4b05      	ldr	r3, [pc, #20]	; (8005770 <HAL_RCC_GetPCLK2Freq+0x20>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	0b5b      	lsrs	r3, r3, #13
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	4903      	ldr	r1, [pc, #12]	; (8005774 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005766:	5ccb      	ldrb	r3, [r1, r3]
 8005768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800576c:	4618      	mov	r0, r3
 800576e:	bd80      	pop	{r7, pc}
 8005770:	40023800 	.word	0x40023800
 8005774:	0801d848 	.word	0x0801d848

08005778 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	220f      	movs	r2, #15
 8005786:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005788:	4b12      	ldr	r3, [pc, #72]	; (80057d4 <HAL_RCC_GetClockConfig+0x5c>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f003 0203 	and.w	r2, r3, #3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005794:	4b0f      	ldr	r3, [pc, #60]	; (80057d4 <HAL_RCC_GetClockConfig+0x5c>)
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80057a0:	4b0c      	ldr	r3, [pc, #48]	; (80057d4 <HAL_RCC_GetClockConfig+0x5c>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80057ac:	4b09      	ldr	r3, [pc, #36]	; (80057d4 <HAL_RCC_GetClockConfig+0x5c>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	08db      	lsrs	r3, r3, #3
 80057b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80057ba:	4b07      	ldr	r3, [pc, #28]	; (80057d8 <HAL_RCC_GetClockConfig+0x60>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 020f 	and.w	r2, r3, #15
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	601a      	str	r2, [r3, #0]
}
 80057c6:	bf00      	nop
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	40023800 	.word	0x40023800
 80057d8:	40023c00 	.word	0x40023c00

080057dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b088      	sub	sp, #32
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80057e4:	2300      	movs	r3, #0
 80057e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80057e8:	2300      	movs	r3, #0
 80057ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80057ec:	2300      	movs	r3, #0
 80057ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80057f0:	2300      	movs	r3, #0
 80057f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80057f4:	2300      	movs	r3, #0
 80057f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	d012      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005804:	4b69      	ldr	r3, [pc, #420]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	4a68      	ldr	r2, [pc, #416]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800580a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800580e:	6093      	str	r3, [r2, #8]
 8005810:	4b66      	ldr	r3, [pc, #408]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005818:	4964      	ldr	r1, [pc, #400]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800581a:	4313      	orrs	r3, r2
 800581c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005826:	2301      	movs	r3, #1
 8005828:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d017      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005836:	4b5d      	ldr	r3, [pc, #372]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800583c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005844:	4959      	ldr	r1, [pc, #356]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005846:	4313      	orrs	r3, r2
 8005848:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005850:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005854:	d101      	bne.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005856:	2301      	movs	r3, #1
 8005858:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005862:	2301      	movs	r3, #1
 8005864:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d017      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005872:	4b4e      	ldr	r3, [pc, #312]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005878:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005880:	494a      	ldr	r1, [pc, #296]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005882:	4313      	orrs	r3, r2
 8005884:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005890:	d101      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005892:	2301      	movs	r3, #1
 8005894:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800589e:	2301      	movs	r3, #1
 80058a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80058ae:	2301      	movs	r3, #1
 80058b0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0320 	and.w	r3, r3, #32
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f000 808b 	beq.w	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80058c0:	4b3a      	ldr	r3, [pc, #232]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c4:	4a39      	ldr	r2, [pc, #228]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ca:	6413      	str	r3, [r2, #64]	; 0x40
 80058cc:	4b37      	ldr	r3, [pc, #220]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058d4:	60bb      	str	r3, [r7, #8]
 80058d6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80058d8:	4b35      	ldr	r3, [pc, #212]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a34      	ldr	r2, [pc, #208]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058e4:	f7fe f9c6 	bl	8003c74 <HAL_GetTick>
 80058e8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80058ea:	e008      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058ec:	f7fe f9c2 	bl	8003c74 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b64      	cmp	r3, #100	; 0x64
 80058f8:	d901      	bls.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e38f      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80058fe:	4b2c      	ldr	r3, [pc, #176]	; (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0f0      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800590a:	4b28      	ldr	r3, [pc, #160]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800590c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005912:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d035      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	429a      	cmp	r2, r3
 8005926:	d02e      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005928:	4b20      	ldr	r3, [pc, #128]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800592a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005930:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005932:	4b1e      	ldr	r3, [pc, #120]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005936:	4a1d      	ldr	r2, [pc, #116]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800593c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800593e:	4b1b      	ldr	r3, [pc, #108]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005942:	4a1a      	ldr	r2, [pc, #104]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005948:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800594a:	4a18      	ldr	r2, [pc, #96]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005950:	4b16      	ldr	r3, [pc, #88]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005954:	f003 0301 	and.w	r3, r3, #1
 8005958:	2b01      	cmp	r3, #1
 800595a:	d114      	bne.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595c:	f7fe f98a 	bl	8003c74 <HAL_GetTick>
 8005960:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005962:	e00a      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005964:	f7fe f986 	bl	8003c74 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005972:	4293      	cmp	r3, r2
 8005974:	d901      	bls.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e351      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800597a:	4b0c      	ldr	r3, [pc, #48]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800597c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597e:	f003 0302 	and.w	r3, r3, #2
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0ee      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800598e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005992:	d111      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005994:	4b05      	ldr	r3, [pc, #20]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80059a0:	4b04      	ldr	r3, [pc, #16]	; (80059b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80059a2:	400b      	ands	r3, r1
 80059a4:	4901      	ldr	r1, [pc, #4]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	608b      	str	r3, [r1, #8]
 80059aa:	e00b      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80059ac:	40023800 	.word	0x40023800
 80059b0:	40007000 	.word	0x40007000
 80059b4:	0ffffcff 	.word	0x0ffffcff
 80059b8:	4bac      	ldr	r3, [pc, #688]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	4aab      	ldr	r2, [pc, #684]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80059c2:	6093      	str	r3, [r2, #8]
 80059c4:	4ba9      	ldr	r3, [pc, #676]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059d0:	49a6      	ldr	r1, [pc, #664]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0310 	and.w	r3, r3, #16
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d010      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059e2:	4ba2      	ldr	r3, [pc, #648]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059e8:	4aa0      	ldr	r2, [pc, #640]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80059f2:	4b9e      	ldr	r3, [pc, #632]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fc:	499b      	ldr	r1, [pc, #620]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00a      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a10:	4b96      	ldr	r3, [pc, #600]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a1e:	4993      	ldr	r1, [pc, #588]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a32:	4b8e      	ldr	r3, [pc, #568]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a40:	498a      	ldr	r1, [pc, #552]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00a      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a54:	4b85      	ldr	r3, [pc, #532]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a62:	4982      	ldr	r1, [pc, #520]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00a      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a76:	4b7d      	ldr	r3, [pc, #500]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a84:	4979      	ldr	r1, [pc, #484]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00a      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a98:	4b74      	ldr	r3, [pc, #464]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a9e:	f023 0203 	bic.w	r2, r3, #3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa6:	4971      	ldr	r1, [pc, #452]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005aba:	4b6c      	ldr	r3, [pc, #432]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac0:	f023 020c 	bic.w	r2, r3, #12
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ac8:	4968      	ldr	r1, [pc, #416]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00a      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005adc:	4b63      	ldr	r3, [pc, #396]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aea:	4960      	ldr	r1, [pc, #384]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00a      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005afe:	4b5b      	ldr	r3, [pc, #364]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b04:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b0c:	4957      	ldr	r1, [pc, #348]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00a      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b20:	4b52      	ldr	r3, [pc, #328]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b2e:	494f      	ldr	r1, [pc, #316]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00a      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005b42:	4b4a      	ldr	r3, [pc, #296]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b48:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b50:	4946      	ldr	r1, [pc, #280]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00a      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005b64:	4b41      	ldr	r3, [pc, #260]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b6a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b72:	493e      	ldr	r1, [pc, #248]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00a      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005b86:	4b39      	ldr	r3, [pc, #228]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b94:	4935      	ldr	r1, [pc, #212]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00a      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005ba8:	4b30      	ldr	r3, [pc, #192]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bb6:	492d      	ldr	r1, [pc, #180]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d011      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005bca:	4b28      	ldr	r3, [pc, #160]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bd8:	4924      	ldr	r1, [pc, #144]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005be4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005be8:	d101      	bne.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005bea:	2301      	movs	r3, #1
 8005bec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0308 	and.w	r3, r3, #8
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d00a      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c0a:	4b18      	ldr	r3, [pc, #96]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c10:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c18:	4914      	ldr	r1, [pc, #80]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00b      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c2c:	4b0f      	ldr	r3, [pc, #60]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c32:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c3c:	490b      	ldr	r1, [pc, #44]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00f      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005c50:	4b06      	ldr	r3, [pc, #24]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c56:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c60:	4902      	ldr	r1, [pc, #8]	; (8005c6c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005c68:	e002      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005c6a:	bf00      	nop
 8005c6c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00b      	beq.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c7c:	4b8a      	ldr	r3, [pc, #552]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c82:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c8c:	4986      	ldr	r1, [pc, #536]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00b      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005ca0:	4b81      	ldr	r3, [pc, #516]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ca6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cb0:	497d      	ldr	r1, [pc, #500]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d006      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f000 80d6 	beq.w	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ccc:	4b76      	ldr	r3, [pc, #472]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a75      	ldr	r2, [pc, #468]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cd2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005cd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cd8:	f7fd ffcc 	bl	8003c74 <HAL_GetTick>
 8005cdc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cde:	e008      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ce0:	f7fd ffc8 	bl	8003c74 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b64      	cmp	r3, #100	; 0x64
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e195      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cf2:	4b6d      	ldr	r3, [pc, #436]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1f0      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d021      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d11d      	bne.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d12:	4b65      	ldr	r3, [pc, #404]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d18:	0c1b      	lsrs	r3, r3, #16
 8005d1a:	f003 0303 	and.w	r3, r3, #3
 8005d1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d20:	4b61      	ldr	r3, [pc, #388]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d26:	0e1b      	lsrs	r3, r3, #24
 8005d28:	f003 030f 	and.w	r3, r3, #15
 8005d2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	019a      	lsls	r2, r3, #6
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	041b      	lsls	r3, r3, #16
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	061b      	lsls	r3, r3, #24
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	071b      	lsls	r3, r3, #28
 8005d46:	4958      	ldr	r1, [pc, #352]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d004      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d62:	d00a      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d02e      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d78:	d129      	bne.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d7a:	4b4b      	ldr	r3, [pc, #300]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d80:	0c1b      	lsrs	r3, r3, #16
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d88:	4b47      	ldr	r3, [pc, #284]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d8e:	0f1b      	lsrs	r3, r3, #28
 8005d90:	f003 0307 	and.w	r3, r3, #7
 8005d94:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	019a      	lsls	r2, r3, #6
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	041b      	lsls	r3, r3, #16
 8005da0:	431a      	orrs	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	061b      	lsls	r3, r3, #24
 8005da8:	431a      	orrs	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	071b      	lsls	r3, r3, #28
 8005dae:	493e      	ldr	r1, [pc, #248]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005db6:	4b3c      	ldr	r3, [pc, #240]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dbc:	f023 021f 	bic.w	r2, r3, #31
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	4938      	ldr	r1, [pc, #224]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d01d      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005dda:	4b33      	ldr	r3, [pc, #204]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ddc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005de0:	0e1b      	lsrs	r3, r3, #24
 8005de2:	f003 030f 	and.w	r3, r3, #15
 8005de6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005de8:	4b2f      	ldr	r3, [pc, #188]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dee:	0f1b      	lsrs	r3, r3, #28
 8005df0:	f003 0307 	and.w	r3, r3, #7
 8005df4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	019a      	lsls	r2, r3, #6
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	041b      	lsls	r3, r3, #16
 8005e02:	431a      	orrs	r2, r3
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	061b      	lsls	r3, r3, #24
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	071b      	lsls	r3, r3, #28
 8005e0e:	4926      	ldr	r1, [pc, #152]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d011      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	019a      	lsls	r2, r3, #6
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	041b      	lsls	r3, r3, #16
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	061b      	lsls	r3, r3, #24
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	071b      	lsls	r3, r3, #28
 8005e3e:	491a      	ldr	r1, [pc, #104]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e46:	4b18      	ldr	r3, [pc, #96]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a17      	ldr	r2, [pc, #92]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e52:	f7fd ff0f 	bl	8003c74 <HAL_GetTick>
 8005e56:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e58:	e008      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e5a:	f7fd ff0b 	bl	8003c74 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	2b64      	cmp	r3, #100	; 0x64
 8005e66:	d901      	bls.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	e0d8      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e6c:	4b0e      	ldr	r3, [pc, #56]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d0f0      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	f040 80ce 	bne.w	800601c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005e80:	4b09      	ldr	r3, [pc, #36]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a08      	ldr	r2, [pc, #32]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e8c:	f7fd fef2 	bl	8003c74 <HAL_GetTick>
 8005e90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e92:	e00b      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e94:	f7fd feee 	bl	8003c74 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	2b64      	cmp	r3, #100	; 0x64
 8005ea0:	d904      	bls.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ea2:	2303      	movs	r3, #3
 8005ea4:	e0bb      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005ea6:	bf00      	nop
 8005ea8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005eac:	4b5e      	ldr	r3, [pc, #376]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005eb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eb8:	d0ec      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d009      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d02e      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d12a      	bne.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005ee2:	4b51      	ldr	r3, [pc, #324]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee8:	0c1b      	lsrs	r3, r3, #16
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ef0:	4b4d      	ldr	r3, [pc, #308]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef6:	0f1b      	lsrs	r3, r3, #28
 8005ef8:	f003 0307 	and.w	r3, r3, #7
 8005efc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	019a      	lsls	r2, r3, #6
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	041b      	lsls	r3, r3, #16
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	061b      	lsls	r3, r3, #24
 8005f10:	431a      	orrs	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	071b      	lsls	r3, r3, #28
 8005f16:	4944      	ldr	r1, [pc, #272]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005f1e:	4b42      	ldr	r3, [pc, #264]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f24:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	021b      	lsls	r3, r3, #8
 8005f30:	493d      	ldr	r1, [pc, #244]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d022      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f4c:	d11d      	bne.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f4e:	4b36      	ldr	r3, [pc, #216]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f54:	0e1b      	lsrs	r3, r3, #24
 8005f56:	f003 030f 	and.w	r3, r3, #15
 8005f5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f5c:	4b32      	ldr	r3, [pc, #200]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f62:	0f1b      	lsrs	r3, r3, #28
 8005f64:	f003 0307 	and.w	r3, r3, #7
 8005f68:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	019a      	lsls	r2, r3, #6
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	041b      	lsls	r3, r3, #16
 8005f76:	431a      	orrs	r2, r3
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	061b      	lsls	r3, r3, #24
 8005f7c:	431a      	orrs	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	071b      	lsls	r3, r3, #28
 8005f82:	4929      	ldr	r1, [pc, #164]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0308 	and.w	r3, r3, #8
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d028      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f96:	4b24      	ldr	r3, [pc, #144]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f9c:	0e1b      	lsrs	r3, r3, #24
 8005f9e:	f003 030f 	and.w	r3, r3, #15
 8005fa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005fa4:	4b20      	ldr	r3, [pc, #128]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005faa:	0c1b      	lsrs	r3, r3, #16
 8005fac:	f003 0303 	and.w	r3, r3, #3
 8005fb0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	019a      	lsls	r2, r3, #6
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	041b      	lsls	r3, r3, #16
 8005fbc:	431a      	orrs	r2, r3
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	061b      	lsls	r3, r3, #24
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	071b      	lsls	r3, r3, #28
 8005fca:	4917      	ldr	r1, [pc, #92]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005fd2:	4b15      	ldr	r3, [pc, #84]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe0:	4911      	ldr	r1, [pc, #68]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005fe8:	4b0f      	ldr	r3, [pc, #60]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a0e      	ldr	r2, [pc, #56]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ff2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ff4:	f7fd fe3e 	bl	8003c74 <HAL_GetTick>
 8005ff8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ffa:	e008      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ffc:	f7fd fe3a 	bl	8003c74 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b64      	cmp	r3, #100	; 0x64
 8006008:	d901      	bls.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e007      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800600e:	4b06      	ldr	r3, [pc, #24]	; (8006028 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006016:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800601a:	d1ef      	bne.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3720      	adds	r7, #32
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	40023800 	.word	0x40023800

0800602c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e049      	b.n	80060d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b00      	cmp	r3, #0
 8006048:	d106      	bne.n	8006058 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f841 	bl	80060da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	3304      	adds	r3, #4
 8006068:	4619      	mov	r1, r3
 800606a:	4610      	mov	r0, r2
 800606c:	f000 fc12 	bl	8006894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80060e2:	bf00      	nop
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
	...

080060f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b01      	cmp	r3, #1
 8006102:	d001      	beq.n	8006108 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e054      	b.n	80061b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68da      	ldr	r2, [r3, #12]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0201 	orr.w	r2, r2, #1
 800611e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a26      	ldr	r2, [pc, #152]	; (80061c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d022      	beq.n	8006170 <HAL_TIM_Base_Start_IT+0x80>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006132:	d01d      	beq.n	8006170 <HAL_TIM_Base_Start_IT+0x80>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a22      	ldr	r2, [pc, #136]	; (80061c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d018      	beq.n	8006170 <HAL_TIM_Base_Start_IT+0x80>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a21      	ldr	r2, [pc, #132]	; (80061c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d013      	beq.n	8006170 <HAL_TIM_Base_Start_IT+0x80>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a1f      	ldr	r2, [pc, #124]	; (80061cc <HAL_TIM_Base_Start_IT+0xdc>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d00e      	beq.n	8006170 <HAL_TIM_Base_Start_IT+0x80>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a1e      	ldr	r2, [pc, #120]	; (80061d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d009      	beq.n	8006170 <HAL_TIM_Base_Start_IT+0x80>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a1c      	ldr	r2, [pc, #112]	; (80061d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d004      	beq.n	8006170 <HAL_TIM_Base_Start_IT+0x80>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a1b      	ldr	r2, [pc, #108]	; (80061d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d115      	bne.n	800619c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689a      	ldr	r2, [r3, #8]
 8006176:	4b19      	ldr	r3, [pc, #100]	; (80061dc <HAL_TIM_Base_Start_IT+0xec>)
 8006178:	4013      	ands	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2b06      	cmp	r3, #6
 8006180:	d015      	beq.n	80061ae <HAL_TIM_Base_Start_IT+0xbe>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006188:	d011      	beq.n	80061ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f042 0201 	orr.w	r2, r2, #1
 8006198:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800619a:	e008      	b.n	80061ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f042 0201 	orr.w	r2, r2, #1
 80061aa:	601a      	str	r2, [r3, #0]
 80061ac:	e000      	b.n	80061b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	40010000 	.word	0x40010000
 80061c4:	40000400 	.word	0x40000400
 80061c8:	40000800 	.word	0x40000800
 80061cc:	40000c00 	.word	0x40000c00
 80061d0:	40010400 	.word	0x40010400
 80061d4:	40014000 	.word	0x40014000
 80061d8:	40001800 	.word	0x40001800
 80061dc:	00010007 	.word	0x00010007

080061e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d101      	bne.n	80061f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e049      	b.n	8006286 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d106      	bne.n	800620c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f7fd f96a 	bl	80034e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	3304      	adds	r3, #4
 800621c:	4619      	mov	r1, r3
 800621e:	4610      	mov	r0, r2
 8006220:	f000 fb38 	bl	8006894 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
	...

08006290 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e08f      	b.n	80063c4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d106      	bne.n	80062be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f7fd f945 	bl	8003548 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2202      	movs	r2, #2
 80062c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	6899      	ldr	r1, [r3, #8]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	4b3e      	ldr	r3, [pc, #248]	; (80063cc <HAL_TIM_Encoder_Init+0x13c>)
 80062d2:	400b      	ands	r3, r1
 80062d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	3304      	adds	r3, #4
 80062de:	4619      	mov	r1, r3
 80062e0:	4610      	mov	r0, r2
 80062e2:	f000 fad7 	bl	8006894 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6a1b      	ldr	r3, [r3, #32]
 80062fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	4313      	orrs	r3, r2
 8006306:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	4b31      	ldr	r3, [pc, #196]	; (80063d0 <HAL_TIM_Encoder_Init+0x140>)
 800630c:	4013      	ands	r3, r2
 800630e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	689a      	ldr	r2, [r3, #8]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	021b      	lsls	r3, r3, #8
 800631a:	4313      	orrs	r3, r2
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	4313      	orrs	r3, r2
 8006320:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	4b2b      	ldr	r3, [pc, #172]	; (80063d4 <HAL_TIM_Encoder_Init+0x144>)
 8006326:	4013      	ands	r3, r2
 8006328:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	4b2a      	ldr	r3, [pc, #168]	; (80063d8 <HAL_TIM_Encoder_Init+0x148>)
 800632e:	4013      	ands	r3, r2
 8006330:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	68da      	ldr	r2, [r3, #12]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	021b      	lsls	r3, r3, #8
 800633c:	4313      	orrs	r3, r2
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	4313      	orrs	r3, r2
 8006342:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	011a      	lsls	r2, r3, #4
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	031b      	lsls	r3, r3, #12
 8006350:	4313      	orrs	r3, r2
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	4313      	orrs	r3, r2
 8006356:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800635e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006366:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685a      	ldr	r2, [r3, #4]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	011b      	lsls	r3, r3, #4
 8006372:	4313      	orrs	r3, r2
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	4313      	orrs	r3, r2
 8006378:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3718      	adds	r7, #24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	fffebff8 	.word	0xfffebff8
 80063d0:	fffffcfc 	.word	0xfffffcfc
 80063d4:	fffff3f3 	.word	0xfffff3f3
 80063d8:	ffff0f0f 	.word	0xffff0f0f

080063dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d122      	bne.n	8006438 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d11b      	bne.n	8006438 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f06f 0202 	mvn.w	r2, #2
 8006408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fa1a 	bl	8006858 <HAL_TIM_IC_CaptureCallback>
 8006424:	e005      	b.n	8006432 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fa0c 	bl	8006844 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fa1d 	bl	800686c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	f003 0304 	and.w	r3, r3, #4
 8006442:	2b04      	cmp	r3, #4
 8006444:	d122      	bne.n	800648c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b04      	cmp	r3, #4
 8006452:	d11b      	bne.n	800648c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f06f 0204 	mvn.w	r2, #4
 800645c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2202      	movs	r2, #2
 8006462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f9f0 	bl	8006858 <HAL_TIM_IC_CaptureCallback>
 8006478:	e005      	b.n	8006486 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 f9e2 	bl	8006844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f9f3 	bl	800686c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f003 0308 	and.w	r3, r3, #8
 8006496:	2b08      	cmp	r3, #8
 8006498:	d122      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d11b      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f06f 0208 	mvn.w	r2, #8
 80064b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2204      	movs	r2, #4
 80064b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	f003 0303 	and.w	r3, r3, #3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f9c6 	bl	8006858 <HAL_TIM_IC_CaptureCallback>
 80064cc:	e005      	b.n	80064da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f9b8 	bl	8006844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f9c9 	bl	800686c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f003 0310 	and.w	r3, r3, #16
 80064ea:	2b10      	cmp	r3, #16
 80064ec:	d122      	bne.n	8006534 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f003 0310 	and.w	r3, r3, #16
 80064f8:	2b10      	cmp	r3, #16
 80064fa:	d11b      	bne.n	8006534 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f06f 0210 	mvn.w	r2, #16
 8006504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2208      	movs	r2, #8
 800650a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f99c 	bl	8006858 <HAL_TIM_IC_CaptureCallback>
 8006520:	e005      	b.n	800652e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f98e 	bl	8006844 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 f99f 	bl	800686c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b01      	cmp	r3, #1
 8006540:	d10e      	bne.n	8006560 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	2b01      	cmp	r3, #1
 800654e:	d107      	bne.n	8006560 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f06f 0201 	mvn.w	r2, #1
 8006558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7fc f9d8 	bl	8002910 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656a:	2b80      	cmp	r3, #128	; 0x80
 800656c:	d10e      	bne.n	800658c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006578:	2b80      	cmp	r3, #128	; 0x80
 800657a:	d107      	bne.n	800658c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fd98 	bl	80070bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006596:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800659a:	d10e      	bne.n	80065ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a6:	2b80      	cmp	r3, #128	; 0x80
 80065a8:	d107      	bne.n	80065ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80065b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fd8b 	bl	80070d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c4:	2b40      	cmp	r3, #64	; 0x40
 80065c6:	d10e      	bne.n	80065e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d2:	2b40      	cmp	r3, #64	; 0x40
 80065d4:	d107      	bne.n	80065e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 f94d 	bl	8006880 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	f003 0320 	and.w	r3, r3, #32
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	d10e      	bne.n	8006612 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f003 0320 	and.w	r3, r3, #32
 80065fe:	2b20      	cmp	r3, #32
 8006600:	d107      	bne.n	8006612 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f06f 0220 	mvn.w	r2, #32
 800660a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fd4b 	bl	80070a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006612:	bf00      	nop
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
	...

0800661c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006628:	2300      	movs	r3, #0
 800662a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006632:	2b01      	cmp	r3, #1
 8006634:	d101      	bne.n	800663a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006636:	2302      	movs	r3, #2
 8006638:	e0ff      	b.n	800683a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2201      	movs	r2, #1
 800663e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b14      	cmp	r3, #20
 8006646:	f200 80f0 	bhi.w	800682a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800664a:	a201      	add	r2, pc, #4	; (adr r2, 8006650 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800664c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006650:	080066a5 	.word	0x080066a5
 8006654:	0800682b 	.word	0x0800682b
 8006658:	0800682b 	.word	0x0800682b
 800665c:	0800682b 	.word	0x0800682b
 8006660:	080066e5 	.word	0x080066e5
 8006664:	0800682b 	.word	0x0800682b
 8006668:	0800682b 	.word	0x0800682b
 800666c:	0800682b 	.word	0x0800682b
 8006670:	08006727 	.word	0x08006727
 8006674:	0800682b 	.word	0x0800682b
 8006678:	0800682b 	.word	0x0800682b
 800667c:	0800682b 	.word	0x0800682b
 8006680:	08006767 	.word	0x08006767
 8006684:	0800682b 	.word	0x0800682b
 8006688:	0800682b 	.word	0x0800682b
 800668c:	0800682b 	.word	0x0800682b
 8006690:	080067a9 	.word	0x080067a9
 8006694:	0800682b 	.word	0x0800682b
 8006698:	0800682b 	.word	0x0800682b
 800669c:	0800682b 	.word	0x0800682b
 80066a0:	080067e9 	.word	0x080067e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68b9      	ldr	r1, [r7, #8]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 f992 	bl	80069d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	699a      	ldr	r2, [r3, #24]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f042 0208 	orr.w	r2, r2, #8
 80066be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699a      	ldr	r2, [r3, #24]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f022 0204 	bic.w	r2, r2, #4
 80066ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6999      	ldr	r1, [r3, #24]
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	691a      	ldr	r2, [r3, #16]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	619a      	str	r2, [r3, #24]
      break;
 80066e2:	e0a5      	b.n	8006830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68b9      	ldr	r1, [r7, #8]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 f9e4 	bl	8006ab8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	699a      	ldr	r2, [r3, #24]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	699a      	ldr	r2, [r3, #24]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800670e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6999      	ldr	r1, [r3, #24]
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	021a      	lsls	r2, r3, #8
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	619a      	str	r2, [r3, #24]
      break;
 8006724:	e084      	b.n	8006830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68b9      	ldr	r1, [r7, #8]
 800672c:	4618      	mov	r0, r3
 800672e:	f000 fa3b 	bl	8006ba8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	69da      	ldr	r2, [r3, #28]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f042 0208 	orr.w	r2, r2, #8
 8006740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69da      	ldr	r2, [r3, #28]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f022 0204 	bic.w	r2, r2, #4
 8006750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	69d9      	ldr	r1, [r3, #28]
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	691a      	ldr	r2, [r3, #16]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	61da      	str	r2, [r3, #28]
      break;
 8006764:	e064      	b.n	8006830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68b9      	ldr	r1, [r7, #8]
 800676c:	4618      	mov	r0, r3
 800676e:	f000 fa91 	bl	8006c94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	69da      	ldr	r2, [r3, #28]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006780:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	69da      	ldr	r2, [r3, #28]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	69d9      	ldr	r1, [r3, #28]
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	021a      	lsls	r2, r3, #8
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	430a      	orrs	r2, r1
 80067a4:	61da      	str	r2, [r3, #28]
      break;
 80067a6:	e043      	b.n	8006830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68b9      	ldr	r1, [r7, #8]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f000 fac8 	bl	8006d44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f042 0208 	orr.w	r2, r2, #8
 80067c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f022 0204 	bic.w	r2, r2, #4
 80067d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	691a      	ldr	r2, [r3, #16]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067e6:	e023      	b.n	8006830 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68b9      	ldr	r1, [r7, #8]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fafa 	bl	8006de8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006802:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006812:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	021a      	lsls	r2, r3, #8
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	430a      	orrs	r2, r1
 8006826:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006828:	e002      	b.n	8006830 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	75fb      	strb	r3, [r7, #23]
      break;
 800682e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006838:	7dfb      	ldrb	r3, [r7, #23]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop

08006844 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a40      	ldr	r2, [pc, #256]	; (80069a8 <TIM_Base_SetConfig+0x114>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d013      	beq.n	80068d4 <TIM_Base_SetConfig+0x40>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068b2:	d00f      	beq.n	80068d4 <TIM_Base_SetConfig+0x40>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a3d      	ldr	r2, [pc, #244]	; (80069ac <TIM_Base_SetConfig+0x118>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d00b      	beq.n	80068d4 <TIM_Base_SetConfig+0x40>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a3c      	ldr	r2, [pc, #240]	; (80069b0 <TIM_Base_SetConfig+0x11c>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d007      	beq.n	80068d4 <TIM_Base_SetConfig+0x40>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a3b      	ldr	r2, [pc, #236]	; (80069b4 <TIM_Base_SetConfig+0x120>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d003      	beq.n	80068d4 <TIM_Base_SetConfig+0x40>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a3a      	ldr	r2, [pc, #232]	; (80069b8 <TIM_Base_SetConfig+0x124>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d108      	bne.n	80068e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a2f      	ldr	r2, [pc, #188]	; (80069a8 <TIM_Base_SetConfig+0x114>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d02b      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f4:	d027      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a2c      	ldr	r2, [pc, #176]	; (80069ac <TIM_Base_SetConfig+0x118>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d023      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a2b      	ldr	r2, [pc, #172]	; (80069b0 <TIM_Base_SetConfig+0x11c>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d01f      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a2a      	ldr	r2, [pc, #168]	; (80069b4 <TIM_Base_SetConfig+0x120>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d01b      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a29      	ldr	r2, [pc, #164]	; (80069b8 <TIM_Base_SetConfig+0x124>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d017      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a28      	ldr	r2, [pc, #160]	; (80069bc <TIM_Base_SetConfig+0x128>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d013      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a27      	ldr	r2, [pc, #156]	; (80069c0 <TIM_Base_SetConfig+0x12c>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d00f      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a26      	ldr	r2, [pc, #152]	; (80069c4 <TIM_Base_SetConfig+0x130>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d00b      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a25      	ldr	r2, [pc, #148]	; (80069c8 <TIM_Base_SetConfig+0x134>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d007      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a24      	ldr	r2, [pc, #144]	; (80069cc <TIM_Base_SetConfig+0x138>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d003      	beq.n	8006946 <TIM_Base_SetConfig+0xb2>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a23      	ldr	r2, [pc, #140]	; (80069d0 <TIM_Base_SetConfig+0x13c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d108      	bne.n	8006958 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800694c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	4313      	orrs	r3, r2
 8006956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	4313      	orrs	r3, r2
 8006964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	689a      	ldr	r2, [r3, #8]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a0a      	ldr	r2, [pc, #40]	; (80069a8 <TIM_Base_SetConfig+0x114>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d003      	beq.n	800698c <TIM_Base_SetConfig+0xf8>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a0c      	ldr	r2, [pc, #48]	; (80069b8 <TIM_Base_SetConfig+0x124>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d103      	bne.n	8006994 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	691a      	ldr	r2, [r3, #16]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	615a      	str	r2, [r3, #20]
}
 800699a:	bf00      	nop
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	40010000 	.word	0x40010000
 80069ac:	40000400 	.word	0x40000400
 80069b0:	40000800 	.word	0x40000800
 80069b4:	40000c00 	.word	0x40000c00
 80069b8:	40010400 	.word	0x40010400
 80069bc:	40014000 	.word	0x40014000
 80069c0:	40014400 	.word	0x40014400
 80069c4:	40014800 	.word	0x40014800
 80069c8:	40001800 	.word	0x40001800
 80069cc:	40001c00 	.word	0x40001c00
 80069d0:	40002000 	.word	0x40002000

080069d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b087      	sub	sp, #28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	f023 0201 	bic.w	r2, r3, #1
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	699b      	ldr	r3, [r3, #24]
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	4b2b      	ldr	r3, [pc, #172]	; (8006aac <TIM_OC1_SetConfig+0xd8>)
 8006a00:	4013      	ands	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0303 	bic.w	r3, r3, #3
 8006a0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f023 0302 	bic.w	r3, r3, #2
 8006a1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a21      	ldr	r2, [pc, #132]	; (8006ab0 <TIM_OC1_SetConfig+0xdc>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d003      	beq.n	8006a38 <TIM_OC1_SetConfig+0x64>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a20      	ldr	r2, [pc, #128]	; (8006ab4 <TIM_OC1_SetConfig+0xe0>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d10c      	bne.n	8006a52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f023 0308 	bic.w	r3, r3, #8
 8006a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f023 0304 	bic.w	r3, r3, #4
 8006a50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a16      	ldr	r2, [pc, #88]	; (8006ab0 <TIM_OC1_SetConfig+0xdc>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d003      	beq.n	8006a62 <TIM_OC1_SetConfig+0x8e>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a15      	ldr	r2, [pc, #84]	; (8006ab4 <TIM_OC1_SetConfig+0xe0>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d111      	bne.n	8006a86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	695b      	ldr	r3, [r3, #20]
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	68fa      	ldr	r2, [r7, #12]
 8006a90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	621a      	str	r2, [r3, #32]
}
 8006aa0:	bf00      	nop
 8006aa2:	371c      	adds	r7, #28
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr
 8006aac:	fffeff8f 	.word	0xfffeff8f
 8006ab0:	40010000 	.word	0x40010000
 8006ab4:	40010400 	.word	0x40010400

08006ab8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b087      	sub	sp, #28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	f023 0210 	bic.w	r2, r3, #16
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	4b2e      	ldr	r3, [pc, #184]	; (8006b9c <TIM_OC2_SetConfig+0xe4>)
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	021b      	lsls	r3, r3, #8
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f023 0320 	bic.w	r3, r3, #32
 8006b02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	011b      	lsls	r3, r3, #4
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a23      	ldr	r2, [pc, #140]	; (8006ba0 <TIM_OC2_SetConfig+0xe8>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d003      	beq.n	8006b20 <TIM_OC2_SetConfig+0x68>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a22      	ldr	r2, [pc, #136]	; (8006ba4 <TIM_OC2_SetConfig+0xec>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d10d      	bne.n	8006b3c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	011b      	lsls	r3, r3, #4
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a18      	ldr	r2, [pc, #96]	; (8006ba0 <TIM_OC2_SetConfig+0xe8>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d003      	beq.n	8006b4c <TIM_OC2_SetConfig+0x94>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a17      	ldr	r2, [pc, #92]	; (8006ba4 <TIM_OC2_SetConfig+0xec>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d113      	bne.n	8006b74 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	695b      	ldr	r3, [r3, #20]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	699b      	ldr	r3, [r3, #24]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	621a      	str	r2, [r3, #32]
}
 8006b8e:	bf00      	nop
 8006b90:	371c      	adds	r7, #28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	feff8fff 	.word	0xfeff8fff
 8006ba0:	40010000 	.word	0x40010000
 8006ba4:	40010400 	.word	0x40010400

08006ba8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	69db      	ldr	r3, [r3, #28]
 8006bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	4b2d      	ldr	r3, [pc, #180]	; (8006c88 <TIM_OC3_SetConfig+0xe0>)
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f023 0303 	bic.w	r3, r3, #3
 8006bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	021b      	lsls	r3, r3, #8
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a22      	ldr	r2, [pc, #136]	; (8006c8c <TIM_OC3_SetConfig+0xe4>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d003      	beq.n	8006c0e <TIM_OC3_SetConfig+0x66>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a21      	ldr	r2, [pc, #132]	; (8006c90 <TIM_OC3_SetConfig+0xe8>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d10d      	bne.n	8006c2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	021b      	lsls	r3, r3, #8
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a17      	ldr	r2, [pc, #92]	; (8006c8c <TIM_OC3_SetConfig+0xe4>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d003      	beq.n	8006c3a <TIM_OC3_SetConfig+0x92>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a16      	ldr	r2, [pc, #88]	; (8006c90 <TIM_OC3_SetConfig+0xe8>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d113      	bne.n	8006c62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	695b      	ldr	r3, [r3, #20]
 8006c4e:	011b      	lsls	r3, r3, #4
 8006c50:	693a      	ldr	r2, [r7, #16]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	011b      	lsls	r3, r3, #4
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	685a      	ldr	r2, [r3, #4]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	621a      	str	r2, [r3, #32]
}
 8006c7c:	bf00      	nop
 8006c7e:	371c      	adds	r7, #28
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	fffeff8f 	.word	0xfffeff8f
 8006c8c:	40010000 	.word	0x40010000
 8006c90:	40010400 	.word	0x40010400

08006c94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	4b1e      	ldr	r3, [pc, #120]	; (8006d38 <TIM_OC4_SetConfig+0xa4>)
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	021b      	lsls	r3, r3, #8
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	031b      	lsls	r3, r3, #12
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4a13      	ldr	r2, [pc, #76]	; (8006d3c <TIM_OC4_SetConfig+0xa8>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d003      	beq.n	8006cfc <TIM_OC4_SetConfig+0x68>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	4a12      	ldr	r2, [pc, #72]	; (8006d40 <TIM_OC4_SetConfig+0xac>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d109      	bne.n	8006d10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	695b      	ldr	r3, [r3, #20]
 8006d08:	019b      	lsls	r3, r3, #6
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	621a      	str	r2, [r3, #32]
}
 8006d2a:	bf00      	nop
 8006d2c:	371c      	adds	r7, #28
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	feff8fff 	.word	0xfeff8fff
 8006d3c:	40010000 	.word	0x40010000
 8006d40:	40010400 	.word	0x40010400

08006d44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	4b1b      	ldr	r3, [pc, #108]	; (8006ddc <TIM_OC5_SetConfig+0x98>)
 8006d70:	4013      	ands	r3, r2
 8006d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	041b      	lsls	r3, r3, #16
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a12      	ldr	r2, [pc, #72]	; (8006de0 <TIM_OC5_SetConfig+0x9c>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d003      	beq.n	8006da2 <TIM_OC5_SetConfig+0x5e>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a11      	ldr	r2, [pc, #68]	; (8006de4 <TIM_OC5_SetConfig+0xa0>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d109      	bne.n	8006db6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006da8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	021b      	lsls	r3, r3, #8
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	697a      	ldr	r2, [r7, #20]
 8006dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	621a      	str	r2, [r3, #32]
}
 8006dd0:	bf00      	nop
 8006dd2:	371c      	adds	r7, #28
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	fffeff8f 	.word	0xfffeff8f
 8006de0:	40010000 	.word	0x40010000
 8006de4:	40010400 	.word	0x40010400

08006de8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b087      	sub	sp, #28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	4b1c      	ldr	r3, [pc, #112]	; (8006e84 <TIM_OC6_SetConfig+0x9c>)
 8006e14:	4013      	ands	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	021b      	lsls	r3, r3, #8
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	051b      	lsls	r3, r3, #20
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a13      	ldr	r2, [pc, #76]	; (8006e88 <TIM_OC6_SetConfig+0xa0>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d003      	beq.n	8006e48 <TIM_OC6_SetConfig+0x60>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a12      	ldr	r2, [pc, #72]	; (8006e8c <TIM_OC6_SetConfig+0xa4>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d109      	bne.n	8006e5c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	029b      	lsls	r3, r3, #10
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	621a      	str	r2, [r3, #32]
}
 8006e76:	bf00      	nop
 8006e78:	371c      	adds	r7, #28
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	feff8fff 	.word	0xfeff8fff
 8006e88:	40010000 	.word	0x40010000
 8006e8c:	40010400 	.word	0x40010400

08006e90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d101      	bne.n	8006ea8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	e06d      	b.n	8006f84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a30      	ldr	r2, [pc, #192]	; (8006f90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d004      	beq.n	8006edc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a2f      	ldr	r2, [pc, #188]	; (8006f94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d108      	bne.n	8006eee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ee2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ef4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68fa      	ldr	r2, [r7, #12]
 8006f06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a20      	ldr	r2, [pc, #128]	; (8006f90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d022      	beq.n	8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f1a:	d01d      	beq.n	8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a1d      	ldr	r2, [pc, #116]	; (8006f98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d018      	beq.n	8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a1c      	ldr	r2, [pc, #112]	; (8006f9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d013      	beq.n	8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a1a      	ldr	r2, [pc, #104]	; (8006fa0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d00e      	beq.n	8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a15      	ldr	r2, [pc, #84]	; (8006f94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d009      	beq.n	8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a16      	ldr	r2, [pc, #88]	; (8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d004      	beq.n	8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a15      	ldr	r2, [pc, #84]	; (8006fa8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d10c      	bne.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	40010000 	.word	0x40010000
 8006f94:	40010400 	.word	0x40010400
 8006f98:	40000400 	.word	0x40000400
 8006f9c:	40000800 	.word	0x40000800
 8006fa0:	40000c00 	.word	0x40000c00
 8006fa4:	40014000 	.word	0x40014000
 8006fa8:	40001800 	.word	0x40001800

08006fac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d101      	bne.n	8006fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	e065      	b.n	8007094 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4313      	orrs	r3, r2
 8007006:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	4313      	orrs	r3, r2
 8007014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	695b      	ldr	r3, [r3, #20]
 8007020:	4313      	orrs	r3, r2
 8007022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702e:	4313      	orrs	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	041b      	lsls	r3, r3, #16
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a16      	ldr	r2, [pc, #88]	; (80070a0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d004      	beq.n	8007056 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a14      	ldr	r2, [pc, #80]	; (80070a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d115      	bne.n	8007082 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	051b      	lsls	r3, r3, #20
 8007062:	4313      	orrs	r3, r2
 8007064:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	69db      	ldr	r3, [r3, #28]
 8007070:	4313      	orrs	r3, r2
 8007072:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	4313      	orrs	r3, r2
 8007080:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007092:	2300      	movs	r3, #0
}
 8007094:	4618      	mov	r0, r3
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	40010000 	.word	0x40010000
 80070a4:	40010400 	.word	0x40010400

080070a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80070d8:	bf00      	nop
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e040      	b.n	8007178 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d106      	bne.n	800710c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7fc fbea 	bl	80038e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2224      	movs	r2, #36	; 0x24
 8007110:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f022 0201 	bic.w	r2, r2, #1
 8007120:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 fcae 	bl	8007a84 <UART_SetConfig>
 8007128:	4603      	mov	r3, r0
 800712a:	2b01      	cmp	r3, #1
 800712c:	d101      	bne.n	8007132 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e022      	b.n	8007178 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007136:	2b00      	cmp	r3, #0
 8007138:	d002      	beq.n	8007140 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 ff06 	bl	8007f4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800714e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	689a      	ldr	r2, [r3, #8]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800715e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f042 0201 	orr.w	r2, r2, #1
 800716e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 ff8d 	bl	8008090 <UART_CheckIdleState>
 8007176:	4603      	mov	r3, r0
}
 8007178:	4618      	mov	r0, r3
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b08a      	sub	sp, #40	; 0x28
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	4613      	mov	r3, r2
 800718c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007192:	2b20      	cmp	r3, #32
 8007194:	d165      	bne.n	8007262 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d002      	beq.n	80071a2 <HAL_UART_Transmit_DMA+0x22>
 800719c:	88fb      	ldrh	r3, [r7, #6]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e05e      	b.n	8007264 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	88fa      	ldrh	r2, [r7, #6]
 80071b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	88fa      	ldrh	r2, [r7, #6]
 80071b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2221      	movs	r2, #33	; 0x21
 80071c8:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d027      	beq.n	8007222 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d6:	4a25      	ldr	r2, [pc, #148]	; (800726c <HAL_UART_Transmit_DMA+0xec>)
 80071d8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071de:	4a24      	ldr	r2, [pc, #144]	; (8007270 <HAL_UART_Transmit_DMA+0xf0>)
 80071e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e6:	4a23      	ldr	r2, [pc, #140]	; (8007274 <HAL_UART_Transmit_DMA+0xf4>)
 80071e8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ee:	2200      	movs	r2, #0
 80071f0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071fa:	4619      	mov	r1, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	3328      	adds	r3, #40	; 0x28
 8007202:	461a      	mov	r2, r3
 8007204:	88fb      	ldrh	r3, [r7, #6]
 8007206:	f7fc fef5 	bl	8003ff4 <HAL_DMA_Start_IT>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d008      	beq.n	8007222 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2210      	movs	r2, #16
 8007214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2220      	movs	r2, #32
 800721c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e020      	b.n	8007264 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2240      	movs	r2, #64	; 0x40
 8007228:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	3308      	adds	r3, #8
 8007230:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	e853 3f00 	ldrex	r3, [r3]
 8007238:	613b      	str	r3, [r7, #16]
   return(result);
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007240:	627b      	str	r3, [r7, #36]	; 0x24
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	3308      	adds	r3, #8
 8007248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800724a:	623a      	str	r2, [r7, #32]
 800724c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724e:	69f9      	ldr	r1, [r7, #28]
 8007250:	6a3a      	ldr	r2, [r7, #32]
 8007252:	e841 2300 	strex	r3, r2, [r1]
 8007256:	61bb      	str	r3, [r7, #24]
   return(result);
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1e5      	bne.n	800722a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800725e:	2300      	movs	r3, #0
 8007260:	e000      	b.n	8007264 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8007262:	2302      	movs	r3, #2
  }
}
 8007264:	4618      	mov	r0, r3
 8007266:	3728      	adds	r7, #40	; 0x28
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	0800850d 	.word	0x0800850d
 8007270:	080085a3 	.word	0x080085a3
 8007274:	08008725 	.word	0x08008725

08007278 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b08a      	sub	sp, #40	; 0x28
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	4613      	mov	r3, r2
 8007284:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800728c:	2b20      	cmp	r3, #32
 800728e:	d132      	bne.n	80072f6 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d002      	beq.n	800729c <HAL_UART_Receive_DMA+0x24>
 8007296:	88fb      	ldrh	r3, [r7, #6]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d101      	bne.n	80072a0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e02b      	b.n	80072f8 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d018      	beq.n	80072e6 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	e853 3f00 	ldrex	r3, [r3]
 80072c0:	613b      	str	r3, [r7, #16]
   return(result);
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80072c8:	627b      	str	r3, [r7, #36]	; 0x24
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	461a      	mov	r2, r3
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	623b      	str	r3, [r7, #32]
 80072d4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d6:	69f9      	ldr	r1, [r7, #28]
 80072d8:	6a3a      	ldr	r2, [r7, #32]
 80072da:	e841 2300 	strex	r3, r2, [r1]
 80072de:	61bb      	str	r3, [r7, #24]
   return(result);
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1e6      	bne.n	80072b4 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80072e6:	88fb      	ldrh	r3, [r7, #6]
 80072e8:	461a      	mov	r2, r3
 80072ea:	68b9      	ldr	r1, [r7, #8]
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f000 ffe3 	bl	80082b8 <UART_Start_Receive_DMA>
 80072f2:	4603      	mov	r3, r0
 80072f4:	e000      	b.n	80072f8 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 80072f6:	2302      	movs	r3, #2
  }
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3728      	adds	r7, #40	; 0x28
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b090      	sub	sp, #64	; 0x40
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800730c:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007314:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007320:	2b80      	cmp	r3, #128	; 0x80
 8007322:	d139      	bne.n	8007398 <HAL_UART_DMAStop+0x98>
 8007324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007326:	2b21      	cmp	r3, #33	; 0x21
 8007328:	d136      	bne.n	8007398 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	3308      	adds	r3, #8
 8007330:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	e853 3f00 	ldrex	r3, [r3]
 8007338:	61fb      	str	r3, [r7, #28]
   return(result);
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007340:	637b      	str	r3, [r7, #52]	; 0x34
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3308      	adds	r3, #8
 8007348:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800734a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800734c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007352:	e841 2300 	strex	r3, r2, [r1]
 8007356:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1e5      	bne.n	800732a <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007362:	2b00      	cmp	r3, #0
 8007364:	d015      	beq.n	8007392 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800736a:	4618      	mov	r0, r3
 800736c:	f7fc fea2 	bl	80040b4 <HAL_DMA_Abort>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00d      	beq.n	8007392 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737a:	4618      	mov	r0, r3
 800737c:	f7fd f8b6 	bl	80044ec <HAL_DMA_GetError>
 8007380:	4603      	mov	r3, r0
 8007382:	2b20      	cmp	r3, #32
 8007384:	d105      	bne.n	8007392 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2210      	movs	r2, #16
 800738a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e044      	b.n	800741c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f001 f830 	bl	80083f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a2:	2b40      	cmp	r3, #64	; 0x40
 80073a4:	d139      	bne.n	800741a <HAL_UART_DMAStop+0x11a>
 80073a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a8:	2b22      	cmp	r3, #34	; 0x22
 80073aa:	d136      	bne.n	800741a <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3308      	adds	r3, #8
 80073b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	e853 3f00 	ldrex	r3, [r3]
 80073ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073c2:	633b      	str	r3, [r7, #48]	; 0x30
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3308      	adds	r3, #8
 80073ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073cc:	61ba      	str	r2, [r7, #24]
 80073ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d0:	6979      	ldr	r1, [r7, #20]
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	e841 2300 	strex	r3, r2, [r1]
 80073d8:	613b      	str	r3, [r7, #16]
   return(result);
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1e5      	bne.n	80073ac <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d015      	beq.n	8007414 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7fc fe61 	bl	80040b4 <HAL_DMA_Abort>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00d      	beq.n	8007414 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7fd f875 	bl	80044ec <HAL_DMA_GetError>
 8007402:	4603      	mov	r3, r0
 8007404:	2b20      	cmp	r3, #32
 8007406:	d105      	bne.n	8007414 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2210      	movs	r2, #16
 800740c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e003      	b.n	800741c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f001 f815 	bl	8008444 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3740      	adds	r7, #64	; 0x40
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b0ba      	sub	sp, #232	; 0xe8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	69db      	ldr	r3, [r3, #28]
 8007432:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800744a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800744e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007452:	4013      	ands	r3, r2
 8007454:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007458:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800745c:	2b00      	cmp	r3, #0
 800745e:	d115      	bne.n	800748c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007464:	f003 0320 	and.w	r3, r3, #32
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00f      	beq.n	800748c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800746c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007470:	f003 0320 	and.w	r3, r3, #32
 8007474:	2b00      	cmp	r3, #0
 8007476:	d009      	beq.n	800748c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 82ac 	beq.w	80079da <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	4798      	blx	r3
      }
      return;
 800748a:	e2a6      	b.n	80079da <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800748c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 8117 	beq.w	80076c4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007496:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d106      	bne.n	80074b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80074a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80074a6:	4b85      	ldr	r3, [pc, #532]	; (80076bc <HAL_UART_IRQHandler+0x298>)
 80074a8:	4013      	ands	r3, r2
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 810a 	beq.w	80076c4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80074b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d011      	beq.n	80074e0 <HAL_UART_IRQHandler+0xbc>
 80074bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00b      	beq.n	80074e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2201      	movs	r2, #1
 80074ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074d6:	f043 0201 	orr.w	r2, r3, #1
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d011      	beq.n	8007510 <HAL_UART_IRQHandler+0xec>
 80074ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00b      	beq.n	8007510 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2202      	movs	r2, #2
 80074fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007506:	f043 0204 	orr.w	r2, r3, #4
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007514:	f003 0304 	and.w	r3, r3, #4
 8007518:	2b00      	cmp	r3, #0
 800751a:	d011      	beq.n	8007540 <HAL_UART_IRQHandler+0x11c>
 800751c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00b      	beq.n	8007540 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2204      	movs	r2, #4
 800752e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007536:	f043 0202 	orr.w	r2, r3, #2
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007544:	f003 0308 	and.w	r3, r3, #8
 8007548:	2b00      	cmp	r3, #0
 800754a:	d017      	beq.n	800757c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800754c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007550:	f003 0320 	and.w	r3, r3, #32
 8007554:	2b00      	cmp	r3, #0
 8007556:	d105      	bne.n	8007564 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800755c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00b      	beq.n	800757c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2208      	movs	r2, #8
 800756a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007572:	f043 0208 	orr.w	r2, r3, #8
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800757c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007584:	2b00      	cmp	r3, #0
 8007586:	d012      	beq.n	80075ae <HAL_UART_IRQHandler+0x18a>
 8007588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800758c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d00c      	beq.n	80075ae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800759c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075a4:	f043 0220 	orr.w	r2, r3, #32
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 8212 	beq.w	80079de <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80075ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075be:	f003 0320 	and.w	r3, r3, #32
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00d      	beq.n	80075e2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80075c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075ca:	f003 0320 	and.w	r3, r3, #32
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d007      	beq.n	80075e2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f6:	2b40      	cmp	r3, #64	; 0x40
 80075f8:	d005      	beq.n	8007606 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80075fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007602:	2b00      	cmp	r3, #0
 8007604:	d04f      	beq.n	80076a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 ff1c 	bl	8008444 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007616:	2b40      	cmp	r3, #64	; 0x40
 8007618:	d141      	bne.n	800769e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3308      	adds	r3, #8
 8007620:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007630:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007638:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	3308      	adds	r3, #8
 8007642:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007646:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800764a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007652:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007656:	e841 2300 	strex	r3, r2, [r1]
 800765a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800765e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1d9      	bne.n	800761a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800766a:	2b00      	cmp	r3, #0
 800766c:	d013      	beq.n	8007696 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007672:	4a13      	ldr	r2, [pc, #76]	; (80076c0 <HAL_UART_IRQHandler+0x29c>)
 8007674:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800767a:	4618      	mov	r0, r3
 800767c:	f7fc fd8a 	bl	8004194 <HAL_DMA_Abort_IT>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d017      	beq.n	80076b6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800768a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007690:	4610      	mov	r0, r2
 8007692:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007694:	e00f      	b.n	80076b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f9d4 	bl	8007a44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800769c:	e00b      	b.n	80076b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 f9d0 	bl	8007a44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076a4:	e007      	b.n	80076b6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f9cc 	bl	8007a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80076b4:	e193      	b.n	80079de <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076b6:	bf00      	nop
    return;
 80076b8:	e191      	b.n	80079de <HAL_UART_IRQHandler+0x5ba>
 80076ba:	bf00      	nop
 80076bc:	04000120 	.word	0x04000120
 80076c0:	080087a3 	.word	0x080087a3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	f040 814c 	bne.w	8007966 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80076ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d2:	f003 0310 	and.w	r3, r3, #16
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	f000 8145 	beq.w	8007966 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80076dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076e0:	f003 0310 	and.w	r3, r3, #16
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f000 813e 	beq.w	8007966 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2210      	movs	r2, #16
 80076f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076fc:	2b40      	cmp	r3, #64	; 0x40
 80076fe:	f040 80b6 	bne.w	800786e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800770e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007712:	2b00      	cmp	r3, #0
 8007714:	f000 8165 	beq.w	80079e2 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800771e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007722:	429a      	cmp	r2, r3
 8007724:	f080 815d 	bcs.w	80079e2 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800772e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007736:	69db      	ldr	r3, [r3, #28]
 8007738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800773c:	f000 8086 	beq.w	800784c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007748:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800774c:	e853 3f00 	ldrex	r3, [r3]
 8007750:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007754:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800775c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	461a      	mov	r2, r3
 8007766:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800776a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800776e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007772:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007776:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800777a:	e841 2300 	strex	r3, r2, [r1]
 800777e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007782:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1da      	bne.n	8007740 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	3308      	adds	r3, #8
 8007790:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007794:	e853 3f00 	ldrex	r3, [r3]
 8007798:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800779a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800779c:	f023 0301 	bic.w	r3, r3, #1
 80077a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	3308      	adds	r3, #8
 80077aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80077ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80077b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80077b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80077ba:	e841 2300 	strex	r3, r2, [r1]
 80077be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80077c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1e1      	bne.n	800778a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3308      	adds	r3, #8
 80077cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077d0:	e853 3f00 	ldrex	r3, [r3]
 80077d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80077d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	3308      	adds	r3, #8
 80077e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80077ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80077ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80077f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80077f2:	e841 2300 	strex	r3, r2, [r1]
 80077f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80077f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1e3      	bne.n	80077c6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2220      	movs	r2, #32
 8007802:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007814:	e853 3f00 	ldrex	r3, [r3]
 8007818:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800781a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800781c:	f023 0310 	bic.w	r3, r3, #16
 8007820:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	461a      	mov	r2, r3
 800782a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800782e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007830:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007832:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007834:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007836:	e841 2300 	strex	r3, r2, [r1]
 800783a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800783c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1e4      	bne.n	800780c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007846:	4618      	mov	r0, r3
 8007848:	f7fc fc34 	bl	80040b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2202      	movs	r2, #2
 8007850:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800785e:	b29b      	uxth	r3, r3
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	b29b      	uxth	r3, r3
 8007864:	4619      	mov	r1, r3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f8f6 	bl	8007a58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800786c:	e0b9      	b.n	80079e2 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800787a:	b29b      	uxth	r3, r3
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007888:	b29b      	uxth	r3, r3
 800788a:	2b00      	cmp	r3, #0
 800788c:	f000 80ab 	beq.w	80079e6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8007890:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 80a6 	beq.w	80079e6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a2:	e853 3f00 	ldrex	r3, [r3]
 80078a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	461a      	mov	r2, r3
 80078b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80078bc:	647b      	str	r3, [r7, #68]	; 0x44
 80078be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078c4:	e841 2300 	strex	r3, r2, [r1]
 80078c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1e4      	bne.n	800789a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	3308      	adds	r3, #8
 80078d6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078da:	e853 3f00 	ldrex	r3, [r3]
 80078de:	623b      	str	r3, [r7, #32]
   return(result);
 80078e0:	6a3b      	ldr	r3, [r7, #32]
 80078e2:	f023 0301 	bic.w	r3, r3, #1
 80078e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3308      	adds	r3, #8
 80078f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80078f4:	633a      	str	r2, [r7, #48]	; 0x30
 80078f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078fc:	e841 2300 	strex	r3, r2, [r1]
 8007900:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1e3      	bne.n	80078d0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2220      	movs	r2, #32
 800790c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	e853 3f00 	ldrex	r3, [r3]
 8007928:	60fb      	str	r3, [r7, #12]
   return(result);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f023 0310 	bic.w	r3, r3, #16
 8007930:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	461a      	mov	r2, r3
 800793a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800793e:	61fb      	str	r3, [r7, #28]
 8007940:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007942:	69b9      	ldr	r1, [r7, #24]
 8007944:	69fa      	ldr	r2, [r7, #28]
 8007946:	e841 2300 	strex	r3, r2, [r1]
 800794a:	617b      	str	r3, [r7, #20]
   return(result);
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1e4      	bne.n	800791c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2202      	movs	r2, #2
 8007956:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007958:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800795c:	4619      	mov	r1, r3
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 f87a 	bl	8007a58 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007964:	e03f      	b.n	80079e6 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800796a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00e      	beq.n	8007990 <HAL_UART_IRQHandler+0x56c>
 8007972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d008      	beq.n	8007990 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007986:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f871 	bl	8007a70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800798e:	e02d      	b.n	80079ec <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00e      	beq.n	80079ba <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800799c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d008      	beq.n	80079ba <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d01c      	beq.n	80079ea <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	4798      	blx	r3
    }
    return;
 80079b8:	e017      	b.n	80079ea <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80079ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d012      	beq.n	80079ec <HAL_UART_IRQHandler+0x5c8>
 80079c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00c      	beq.n	80079ec <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fefb 	bl	80087ce <UART_EndTransmit_IT>
    return;
 80079d8:	e008      	b.n	80079ec <HAL_UART_IRQHandler+0x5c8>
      return;
 80079da:	bf00      	nop
 80079dc:	e006      	b.n	80079ec <HAL_UART_IRQHandler+0x5c8>
    return;
 80079de:	bf00      	nop
 80079e0:	e004      	b.n	80079ec <HAL_UART_IRQHandler+0x5c8>
      return;
 80079e2:	bf00      	nop
 80079e4:	e002      	b.n	80079ec <HAL_UART_IRQHandler+0x5c8>
      return;
 80079e6:	bf00      	nop
 80079e8:	e000      	b.n	80079ec <HAL_UART_IRQHandler+0x5c8>
    return;
 80079ea:	bf00      	nop
  }

}
 80079ec:	37e8      	adds	r7, #232	; 0xe8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop

080079f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	460b      	mov	r3, r1
 8007a62:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b088      	sub	sp, #32
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	689a      	ldr	r2, [r3, #8]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	431a      	orrs	r2, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	695b      	ldr	r3, [r3, #20]
 8007a9e:	431a      	orrs	r2, r3
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	69db      	ldr	r3, [r3, #28]
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	4ba6      	ldr	r3, [pc, #664]	; (8007d48 <UART_SetConfig+0x2c4>)
 8007ab0:	4013      	ands	r3, r2
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	6812      	ldr	r2, [r2, #0]
 8007ab6:	6979      	ldr	r1, [r7, #20]
 8007ab8:	430b      	orrs	r3, r1
 8007aba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	68da      	ldr	r2, [r3, #12]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	430a      	orrs	r2, r1
 8007ad0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	697a      	ldr	r2, [r7, #20]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	697a      	ldr	r2, [r7, #20]
 8007af2:	430a      	orrs	r2, r1
 8007af4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a94      	ldr	r2, [pc, #592]	; (8007d4c <UART_SetConfig+0x2c8>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d120      	bne.n	8007b42 <UART_SetConfig+0xbe>
 8007b00:	4b93      	ldr	r3, [pc, #588]	; (8007d50 <UART_SetConfig+0x2cc>)
 8007b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b06:	f003 0303 	and.w	r3, r3, #3
 8007b0a:	2b03      	cmp	r3, #3
 8007b0c:	d816      	bhi.n	8007b3c <UART_SetConfig+0xb8>
 8007b0e:	a201      	add	r2, pc, #4	; (adr r2, 8007b14 <UART_SetConfig+0x90>)
 8007b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b14:	08007b25 	.word	0x08007b25
 8007b18:	08007b31 	.word	0x08007b31
 8007b1c:	08007b2b 	.word	0x08007b2b
 8007b20:	08007b37 	.word	0x08007b37
 8007b24:	2301      	movs	r3, #1
 8007b26:	77fb      	strb	r3, [r7, #31]
 8007b28:	e150      	b.n	8007dcc <UART_SetConfig+0x348>
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	77fb      	strb	r3, [r7, #31]
 8007b2e:	e14d      	b.n	8007dcc <UART_SetConfig+0x348>
 8007b30:	2304      	movs	r3, #4
 8007b32:	77fb      	strb	r3, [r7, #31]
 8007b34:	e14a      	b.n	8007dcc <UART_SetConfig+0x348>
 8007b36:	2308      	movs	r3, #8
 8007b38:	77fb      	strb	r3, [r7, #31]
 8007b3a:	e147      	b.n	8007dcc <UART_SetConfig+0x348>
 8007b3c:	2310      	movs	r3, #16
 8007b3e:	77fb      	strb	r3, [r7, #31]
 8007b40:	e144      	b.n	8007dcc <UART_SetConfig+0x348>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a83      	ldr	r2, [pc, #524]	; (8007d54 <UART_SetConfig+0x2d0>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d132      	bne.n	8007bb2 <UART_SetConfig+0x12e>
 8007b4c:	4b80      	ldr	r3, [pc, #512]	; (8007d50 <UART_SetConfig+0x2cc>)
 8007b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b52:	f003 030c 	and.w	r3, r3, #12
 8007b56:	2b0c      	cmp	r3, #12
 8007b58:	d828      	bhi.n	8007bac <UART_SetConfig+0x128>
 8007b5a:	a201      	add	r2, pc, #4	; (adr r2, 8007b60 <UART_SetConfig+0xdc>)
 8007b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b60:	08007b95 	.word	0x08007b95
 8007b64:	08007bad 	.word	0x08007bad
 8007b68:	08007bad 	.word	0x08007bad
 8007b6c:	08007bad 	.word	0x08007bad
 8007b70:	08007ba1 	.word	0x08007ba1
 8007b74:	08007bad 	.word	0x08007bad
 8007b78:	08007bad 	.word	0x08007bad
 8007b7c:	08007bad 	.word	0x08007bad
 8007b80:	08007b9b 	.word	0x08007b9b
 8007b84:	08007bad 	.word	0x08007bad
 8007b88:	08007bad 	.word	0x08007bad
 8007b8c:	08007bad 	.word	0x08007bad
 8007b90:	08007ba7 	.word	0x08007ba7
 8007b94:	2300      	movs	r3, #0
 8007b96:	77fb      	strb	r3, [r7, #31]
 8007b98:	e118      	b.n	8007dcc <UART_SetConfig+0x348>
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	77fb      	strb	r3, [r7, #31]
 8007b9e:	e115      	b.n	8007dcc <UART_SetConfig+0x348>
 8007ba0:	2304      	movs	r3, #4
 8007ba2:	77fb      	strb	r3, [r7, #31]
 8007ba4:	e112      	b.n	8007dcc <UART_SetConfig+0x348>
 8007ba6:	2308      	movs	r3, #8
 8007ba8:	77fb      	strb	r3, [r7, #31]
 8007baa:	e10f      	b.n	8007dcc <UART_SetConfig+0x348>
 8007bac:	2310      	movs	r3, #16
 8007bae:	77fb      	strb	r3, [r7, #31]
 8007bb0:	e10c      	b.n	8007dcc <UART_SetConfig+0x348>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a68      	ldr	r2, [pc, #416]	; (8007d58 <UART_SetConfig+0x2d4>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d120      	bne.n	8007bfe <UART_SetConfig+0x17a>
 8007bbc:	4b64      	ldr	r3, [pc, #400]	; (8007d50 <UART_SetConfig+0x2cc>)
 8007bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bc2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007bc6:	2b30      	cmp	r3, #48	; 0x30
 8007bc8:	d013      	beq.n	8007bf2 <UART_SetConfig+0x16e>
 8007bca:	2b30      	cmp	r3, #48	; 0x30
 8007bcc:	d814      	bhi.n	8007bf8 <UART_SetConfig+0x174>
 8007bce:	2b20      	cmp	r3, #32
 8007bd0:	d009      	beq.n	8007be6 <UART_SetConfig+0x162>
 8007bd2:	2b20      	cmp	r3, #32
 8007bd4:	d810      	bhi.n	8007bf8 <UART_SetConfig+0x174>
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d002      	beq.n	8007be0 <UART_SetConfig+0x15c>
 8007bda:	2b10      	cmp	r3, #16
 8007bdc:	d006      	beq.n	8007bec <UART_SetConfig+0x168>
 8007bde:	e00b      	b.n	8007bf8 <UART_SetConfig+0x174>
 8007be0:	2300      	movs	r3, #0
 8007be2:	77fb      	strb	r3, [r7, #31]
 8007be4:	e0f2      	b.n	8007dcc <UART_SetConfig+0x348>
 8007be6:	2302      	movs	r3, #2
 8007be8:	77fb      	strb	r3, [r7, #31]
 8007bea:	e0ef      	b.n	8007dcc <UART_SetConfig+0x348>
 8007bec:	2304      	movs	r3, #4
 8007bee:	77fb      	strb	r3, [r7, #31]
 8007bf0:	e0ec      	b.n	8007dcc <UART_SetConfig+0x348>
 8007bf2:	2308      	movs	r3, #8
 8007bf4:	77fb      	strb	r3, [r7, #31]
 8007bf6:	e0e9      	b.n	8007dcc <UART_SetConfig+0x348>
 8007bf8:	2310      	movs	r3, #16
 8007bfa:	77fb      	strb	r3, [r7, #31]
 8007bfc:	e0e6      	b.n	8007dcc <UART_SetConfig+0x348>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a56      	ldr	r2, [pc, #344]	; (8007d5c <UART_SetConfig+0x2d8>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d120      	bne.n	8007c4a <UART_SetConfig+0x1c6>
 8007c08:	4b51      	ldr	r3, [pc, #324]	; (8007d50 <UART_SetConfig+0x2cc>)
 8007c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c12:	2bc0      	cmp	r3, #192	; 0xc0
 8007c14:	d013      	beq.n	8007c3e <UART_SetConfig+0x1ba>
 8007c16:	2bc0      	cmp	r3, #192	; 0xc0
 8007c18:	d814      	bhi.n	8007c44 <UART_SetConfig+0x1c0>
 8007c1a:	2b80      	cmp	r3, #128	; 0x80
 8007c1c:	d009      	beq.n	8007c32 <UART_SetConfig+0x1ae>
 8007c1e:	2b80      	cmp	r3, #128	; 0x80
 8007c20:	d810      	bhi.n	8007c44 <UART_SetConfig+0x1c0>
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d002      	beq.n	8007c2c <UART_SetConfig+0x1a8>
 8007c26:	2b40      	cmp	r3, #64	; 0x40
 8007c28:	d006      	beq.n	8007c38 <UART_SetConfig+0x1b4>
 8007c2a:	e00b      	b.n	8007c44 <UART_SetConfig+0x1c0>
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	77fb      	strb	r3, [r7, #31]
 8007c30:	e0cc      	b.n	8007dcc <UART_SetConfig+0x348>
 8007c32:	2302      	movs	r3, #2
 8007c34:	77fb      	strb	r3, [r7, #31]
 8007c36:	e0c9      	b.n	8007dcc <UART_SetConfig+0x348>
 8007c38:	2304      	movs	r3, #4
 8007c3a:	77fb      	strb	r3, [r7, #31]
 8007c3c:	e0c6      	b.n	8007dcc <UART_SetConfig+0x348>
 8007c3e:	2308      	movs	r3, #8
 8007c40:	77fb      	strb	r3, [r7, #31]
 8007c42:	e0c3      	b.n	8007dcc <UART_SetConfig+0x348>
 8007c44:	2310      	movs	r3, #16
 8007c46:	77fb      	strb	r3, [r7, #31]
 8007c48:	e0c0      	b.n	8007dcc <UART_SetConfig+0x348>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a44      	ldr	r2, [pc, #272]	; (8007d60 <UART_SetConfig+0x2dc>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d125      	bne.n	8007ca0 <UART_SetConfig+0x21c>
 8007c54:	4b3e      	ldr	r3, [pc, #248]	; (8007d50 <UART_SetConfig+0x2cc>)
 8007c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c62:	d017      	beq.n	8007c94 <UART_SetConfig+0x210>
 8007c64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c68:	d817      	bhi.n	8007c9a <UART_SetConfig+0x216>
 8007c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c6e:	d00b      	beq.n	8007c88 <UART_SetConfig+0x204>
 8007c70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c74:	d811      	bhi.n	8007c9a <UART_SetConfig+0x216>
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d003      	beq.n	8007c82 <UART_SetConfig+0x1fe>
 8007c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c7e:	d006      	beq.n	8007c8e <UART_SetConfig+0x20a>
 8007c80:	e00b      	b.n	8007c9a <UART_SetConfig+0x216>
 8007c82:	2300      	movs	r3, #0
 8007c84:	77fb      	strb	r3, [r7, #31]
 8007c86:	e0a1      	b.n	8007dcc <UART_SetConfig+0x348>
 8007c88:	2302      	movs	r3, #2
 8007c8a:	77fb      	strb	r3, [r7, #31]
 8007c8c:	e09e      	b.n	8007dcc <UART_SetConfig+0x348>
 8007c8e:	2304      	movs	r3, #4
 8007c90:	77fb      	strb	r3, [r7, #31]
 8007c92:	e09b      	b.n	8007dcc <UART_SetConfig+0x348>
 8007c94:	2308      	movs	r3, #8
 8007c96:	77fb      	strb	r3, [r7, #31]
 8007c98:	e098      	b.n	8007dcc <UART_SetConfig+0x348>
 8007c9a:	2310      	movs	r3, #16
 8007c9c:	77fb      	strb	r3, [r7, #31]
 8007c9e:	e095      	b.n	8007dcc <UART_SetConfig+0x348>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a2f      	ldr	r2, [pc, #188]	; (8007d64 <UART_SetConfig+0x2e0>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d125      	bne.n	8007cf6 <UART_SetConfig+0x272>
 8007caa:	4b29      	ldr	r3, [pc, #164]	; (8007d50 <UART_SetConfig+0x2cc>)
 8007cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007cb4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cb8:	d017      	beq.n	8007cea <UART_SetConfig+0x266>
 8007cba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cbe:	d817      	bhi.n	8007cf0 <UART_SetConfig+0x26c>
 8007cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cc4:	d00b      	beq.n	8007cde <UART_SetConfig+0x25a>
 8007cc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cca:	d811      	bhi.n	8007cf0 <UART_SetConfig+0x26c>
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d003      	beq.n	8007cd8 <UART_SetConfig+0x254>
 8007cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cd4:	d006      	beq.n	8007ce4 <UART_SetConfig+0x260>
 8007cd6:	e00b      	b.n	8007cf0 <UART_SetConfig+0x26c>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	77fb      	strb	r3, [r7, #31]
 8007cdc:	e076      	b.n	8007dcc <UART_SetConfig+0x348>
 8007cde:	2302      	movs	r3, #2
 8007ce0:	77fb      	strb	r3, [r7, #31]
 8007ce2:	e073      	b.n	8007dcc <UART_SetConfig+0x348>
 8007ce4:	2304      	movs	r3, #4
 8007ce6:	77fb      	strb	r3, [r7, #31]
 8007ce8:	e070      	b.n	8007dcc <UART_SetConfig+0x348>
 8007cea:	2308      	movs	r3, #8
 8007cec:	77fb      	strb	r3, [r7, #31]
 8007cee:	e06d      	b.n	8007dcc <UART_SetConfig+0x348>
 8007cf0:	2310      	movs	r3, #16
 8007cf2:	77fb      	strb	r3, [r7, #31]
 8007cf4:	e06a      	b.n	8007dcc <UART_SetConfig+0x348>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a1b      	ldr	r2, [pc, #108]	; (8007d68 <UART_SetConfig+0x2e4>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d138      	bne.n	8007d72 <UART_SetConfig+0x2ee>
 8007d00:	4b13      	ldr	r3, [pc, #76]	; (8007d50 <UART_SetConfig+0x2cc>)
 8007d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d06:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007d0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d0e:	d017      	beq.n	8007d40 <UART_SetConfig+0x2bc>
 8007d10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d14:	d82a      	bhi.n	8007d6c <UART_SetConfig+0x2e8>
 8007d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d1a:	d00b      	beq.n	8007d34 <UART_SetConfig+0x2b0>
 8007d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d20:	d824      	bhi.n	8007d6c <UART_SetConfig+0x2e8>
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d003      	beq.n	8007d2e <UART_SetConfig+0x2aa>
 8007d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d2a:	d006      	beq.n	8007d3a <UART_SetConfig+0x2b6>
 8007d2c:	e01e      	b.n	8007d6c <UART_SetConfig+0x2e8>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	77fb      	strb	r3, [r7, #31]
 8007d32:	e04b      	b.n	8007dcc <UART_SetConfig+0x348>
 8007d34:	2302      	movs	r3, #2
 8007d36:	77fb      	strb	r3, [r7, #31]
 8007d38:	e048      	b.n	8007dcc <UART_SetConfig+0x348>
 8007d3a:	2304      	movs	r3, #4
 8007d3c:	77fb      	strb	r3, [r7, #31]
 8007d3e:	e045      	b.n	8007dcc <UART_SetConfig+0x348>
 8007d40:	2308      	movs	r3, #8
 8007d42:	77fb      	strb	r3, [r7, #31]
 8007d44:	e042      	b.n	8007dcc <UART_SetConfig+0x348>
 8007d46:	bf00      	nop
 8007d48:	efff69f3 	.word	0xefff69f3
 8007d4c:	40011000 	.word	0x40011000
 8007d50:	40023800 	.word	0x40023800
 8007d54:	40004400 	.word	0x40004400
 8007d58:	40004800 	.word	0x40004800
 8007d5c:	40004c00 	.word	0x40004c00
 8007d60:	40005000 	.word	0x40005000
 8007d64:	40011400 	.word	0x40011400
 8007d68:	40007800 	.word	0x40007800
 8007d6c:	2310      	movs	r3, #16
 8007d6e:	77fb      	strb	r3, [r7, #31]
 8007d70:	e02c      	b.n	8007dcc <UART_SetConfig+0x348>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a72      	ldr	r2, [pc, #456]	; (8007f40 <UART_SetConfig+0x4bc>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d125      	bne.n	8007dc8 <UART_SetConfig+0x344>
 8007d7c:	4b71      	ldr	r3, [pc, #452]	; (8007f44 <UART_SetConfig+0x4c0>)
 8007d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d82:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007d86:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007d8a:	d017      	beq.n	8007dbc <UART_SetConfig+0x338>
 8007d8c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007d90:	d817      	bhi.n	8007dc2 <UART_SetConfig+0x33e>
 8007d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d96:	d00b      	beq.n	8007db0 <UART_SetConfig+0x32c>
 8007d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d9c:	d811      	bhi.n	8007dc2 <UART_SetConfig+0x33e>
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d003      	beq.n	8007daa <UART_SetConfig+0x326>
 8007da2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007da6:	d006      	beq.n	8007db6 <UART_SetConfig+0x332>
 8007da8:	e00b      	b.n	8007dc2 <UART_SetConfig+0x33e>
 8007daa:	2300      	movs	r3, #0
 8007dac:	77fb      	strb	r3, [r7, #31]
 8007dae:	e00d      	b.n	8007dcc <UART_SetConfig+0x348>
 8007db0:	2302      	movs	r3, #2
 8007db2:	77fb      	strb	r3, [r7, #31]
 8007db4:	e00a      	b.n	8007dcc <UART_SetConfig+0x348>
 8007db6:	2304      	movs	r3, #4
 8007db8:	77fb      	strb	r3, [r7, #31]
 8007dba:	e007      	b.n	8007dcc <UART_SetConfig+0x348>
 8007dbc:	2308      	movs	r3, #8
 8007dbe:	77fb      	strb	r3, [r7, #31]
 8007dc0:	e004      	b.n	8007dcc <UART_SetConfig+0x348>
 8007dc2:	2310      	movs	r3, #16
 8007dc4:	77fb      	strb	r3, [r7, #31]
 8007dc6:	e001      	b.n	8007dcc <UART_SetConfig+0x348>
 8007dc8:	2310      	movs	r3, #16
 8007dca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	69db      	ldr	r3, [r3, #28]
 8007dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dd4:	d15b      	bne.n	8007e8e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007dd6:	7ffb      	ldrb	r3, [r7, #31]
 8007dd8:	2b08      	cmp	r3, #8
 8007dda:	d828      	bhi.n	8007e2e <UART_SetConfig+0x3aa>
 8007ddc:	a201      	add	r2, pc, #4	; (adr r2, 8007de4 <UART_SetConfig+0x360>)
 8007dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007de2:	bf00      	nop
 8007de4:	08007e09 	.word	0x08007e09
 8007de8:	08007e11 	.word	0x08007e11
 8007dec:	08007e19 	.word	0x08007e19
 8007df0:	08007e2f 	.word	0x08007e2f
 8007df4:	08007e1f 	.word	0x08007e1f
 8007df8:	08007e2f 	.word	0x08007e2f
 8007dfc:	08007e2f 	.word	0x08007e2f
 8007e00:	08007e2f 	.word	0x08007e2f
 8007e04:	08007e27 	.word	0x08007e27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e08:	f7fd fc8e 	bl	8005728 <HAL_RCC_GetPCLK1Freq>
 8007e0c:	61b8      	str	r0, [r7, #24]
        break;
 8007e0e:	e013      	b.n	8007e38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e10:	f7fd fc9e 	bl	8005750 <HAL_RCC_GetPCLK2Freq>
 8007e14:	61b8      	str	r0, [r7, #24]
        break;
 8007e16:	e00f      	b.n	8007e38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e18:	4b4b      	ldr	r3, [pc, #300]	; (8007f48 <UART_SetConfig+0x4c4>)
 8007e1a:	61bb      	str	r3, [r7, #24]
        break;
 8007e1c:	e00c      	b.n	8007e38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e1e:	f7fd fb71 	bl	8005504 <HAL_RCC_GetSysClockFreq>
 8007e22:	61b8      	str	r0, [r7, #24]
        break;
 8007e24:	e008      	b.n	8007e38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e2a:	61bb      	str	r3, [r7, #24]
        break;
 8007e2c:	e004      	b.n	8007e38 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	77bb      	strb	r3, [r7, #30]
        break;
 8007e36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d074      	beq.n	8007f28 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	005a      	lsls	r2, r3, #1
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	085b      	lsrs	r3, r3, #1
 8007e48:	441a      	add	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	2b0f      	cmp	r3, #15
 8007e58:	d916      	bls.n	8007e88 <UART_SetConfig+0x404>
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e60:	d212      	bcs.n	8007e88 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	f023 030f 	bic.w	r3, r3, #15
 8007e6a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	085b      	lsrs	r3, r3, #1
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	f003 0307 	and.w	r3, r3, #7
 8007e76:	b29a      	uxth	r2, r3
 8007e78:	89fb      	ldrh	r3, [r7, #14]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	89fa      	ldrh	r2, [r7, #14]
 8007e84:	60da      	str	r2, [r3, #12]
 8007e86:	e04f      	b.n	8007f28 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	77bb      	strb	r3, [r7, #30]
 8007e8c:	e04c      	b.n	8007f28 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e8e:	7ffb      	ldrb	r3, [r7, #31]
 8007e90:	2b08      	cmp	r3, #8
 8007e92:	d828      	bhi.n	8007ee6 <UART_SetConfig+0x462>
 8007e94:	a201      	add	r2, pc, #4	; (adr r2, 8007e9c <UART_SetConfig+0x418>)
 8007e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9a:	bf00      	nop
 8007e9c:	08007ec1 	.word	0x08007ec1
 8007ea0:	08007ec9 	.word	0x08007ec9
 8007ea4:	08007ed1 	.word	0x08007ed1
 8007ea8:	08007ee7 	.word	0x08007ee7
 8007eac:	08007ed7 	.word	0x08007ed7
 8007eb0:	08007ee7 	.word	0x08007ee7
 8007eb4:	08007ee7 	.word	0x08007ee7
 8007eb8:	08007ee7 	.word	0x08007ee7
 8007ebc:	08007edf 	.word	0x08007edf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ec0:	f7fd fc32 	bl	8005728 <HAL_RCC_GetPCLK1Freq>
 8007ec4:	61b8      	str	r0, [r7, #24]
        break;
 8007ec6:	e013      	b.n	8007ef0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ec8:	f7fd fc42 	bl	8005750 <HAL_RCC_GetPCLK2Freq>
 8007ecc:	61b8      	str	r0, [r7, #24]
        break;
 8007ece:	e00f      	b.n	8007ef0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ed0:	4b1d      	ldr	r3, [pc, #116]	; (8007f48 <UART_SetConfig+0x4c4>)
 8007ed2:	61bb      	str	r3, [r7, #24]
        break;
 8007ed4:	e00c      	b.n	8007ef0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ed6:	f7fd fb15 	bl	8005504 <HAL_RCC_GetSysClockFreq>
 8007eda:	61b8      	str	r0, [r7, #24]
        break;
 8007edc:	e008      	b.n	8007ef0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ee2:	61bb      	str	r3, [r7, #24]
        break;
 8007ee4:	e004      	b.n	8007ef0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	77bb      	strb	r3, [r7, #30]
        break;
 8007eee:	bf00      	nop
    }

    if (pclk != 0U)
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d018      	beq.n	8007f28 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	085a      	lsrs	r2, r3, #1
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	441a      	add	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	2b0f      	cmp	r3, #15
 8007f0e:	d909      	bls.n	8007f24 <UART_SetConfig+0x4a0>
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f16:	d205      	bcs.n	8007f24 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	60da      	str	r2, [r3, #12]
 8007f22:	e001      	b.n	8007f28 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007f34:	7fbb      	ldrb	r3, [r7, #30]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3720      	adds	r7, #32
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	40007c00 	.word	0x40007c00
 8007f44:	40023800 	.word	0x40023800
 8007f48:	00f42400 	.word	0x00f42400

08007f4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00a      	beq.n	8007f76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	430a      	orrs	r2, r1
 8007f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f7a:	f003 0302 	and.w	r3, r3, #2
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00a      	beq.n	8007f98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	430a      	orrs	r2, r1
 8007f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9c:	f003 0304 	and.w	r3, r3, #4
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00a      	beq.n	8007fba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	430a      	orrs	r2, r1
 8007fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbe:	f003 0308 	and.w	r3, r3, #8
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00a      	beq.n	8007fdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe0:	f003 0310 	and.w	r3, r3, #16
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00a      	beq.n	8007ffe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008002:	f003 0320 	and.w	r3, r3, #32
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00a      	beq.n	8008020 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	430a      	orrs	r2, r1
 800801e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008028:	2b00      	cmp	r3, #0
 800802a:	d01a      	beq.n	8008062 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	430a      	orrs	r2, r1
 8008040:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800804a:	d10a      	bne.n	8008062 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	430a      	orrs	r2, r1
 8008060:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00a      	beq.n	8008084 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	430a      	orrs	r2, r1
 8008082:	605a      	str	r2, [r3, #4]
  }
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af02      	add	r7, sp, #8
 8008096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080a0:	f7fb fde8 	bl	8003c74 <HAL_GetTick>
 80080a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 0308 	and.w	r3, r3, #8
 80080b0:	2b08      	cmp	r3, #8
 80080b2:	d10e      	bne.n	80080d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080b8:	9300      	str	r3, [sp, #0]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2200      	movs	r2, #0
 80080be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f831 	bl	800812a <UART_WaitOnFlagUntilTimeout>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d001      	beq.n	80080d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e027      	b.n	8008122 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 0304 	and.w	r3, r3, #4
 80080dc:	2b04      	cmp	r3, #4
 80080de:	d10e      	bne.n	80080fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080e4:	9300      	str	r3, [sp, #0]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 f81b 	bl	800812a <UART_WaitOnFlagUntilTimeout>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d001      	beq.n	80080fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e011      	b.n	8008122 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2220      	movs	r2, #32
 8008102:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2220      	movs	r2, #32
 8008108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3710      	adds	r7, #16
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b09c      	sub	sp, #112	; 0x70
 800812e:	af00      	add	r7, sp, #0
 8008130:	60f8      	str	r0, [r7, #12]
 8008132:	60b9      	str	r1, [r7, #8]
 8008134:	603b      	str	r3, [r7, #0]
 8008136:	4613      	mov	r3, r2
 8008138:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800813a:	e0a7      	b.n	800828c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800813c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800813e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008142:	f000 80a3 	beq.w	800828c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008146:	f7fb fd95 	bl	8003c74 <HAL_GetTick>
 800814a:	4602      	mov	r2, r0
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008152:	429a      	cmp	r2, r3
 8008154:	d302      	bcc.n	800815c <UART_WaitOnFlagUntilTimeout+0x32>
 8008156:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008158:	2b00      	cmp	r3, #0
 800815a:	d13f      	bne.n	80081dc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008164:	e853 3f00 	ldrex	r3, [r3]
 8008168:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800816a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800816c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008170:	667b      	str	r3, [r7, #100]	; 0x64
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800817a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800817c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008180:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008182:	e841 2300 	strex	r3, r2, [r1]
 8008186:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1e6      	bne.n	800815c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3308      	adds	r3, #8
 8008194:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008198:	e853 3f00 	ldrex	r3, [r3]
 800819c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800819e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a0:	f023 0301 	bic.w	r3, r3, #1
 80081a4:	663b      	str	r3, [r7, #96]	; 0x60
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3308      	adds	r3, #8
 80081ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80081ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80081b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80081b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081b6:	e841 2300 	strex	r3, r2, [r1]
 80081ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80081bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1e5      	bne.n	800818e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2220      	movs	r2, #32
 80081c6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2220      	movs	r2, #32
 80081cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80081d8:	2303      	movs	r3, #3
 80081da:	e068      	b.n	80082ae <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0304 	and.w	r3, r3, #4
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d050      	beq.n	800828c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	69db      	ldr	r3, [r3, #28]
 80081f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081f8:	d148      	bne.n	800828c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008202:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820c:	e853 3f00 	ldrex	r3, [r3]
 8008210:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008214:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008218:	66fb      	str	r3, [r7, #108]	; 0x6c
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	461a      	mov	r2, r3
 8008220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008222:	637b      	str	r3, [r7, #52]	; 0x34
 8008224:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008226:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008228:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800822a:	e841 2300 	strex	r3, r2, [r1]
 800822e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1e6      	bne.n	8008204 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3308      	adds	r3, #8
 800823c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	e853 3f00 	ldrex	r3, [r3]
 8008244:	613b      	str	r3, [r7, #16]
   return(result);
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	f023 0301 	bic.w	r3, r3, #1
 800824c:	66bb      	str	r3, [r7, #104]	; 0x68
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	3308      	adds	r3, #8
 8008254:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008256:	623a      	str	r2, [r7, #32]
 8008258:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825a:	69f9      	ldr	r1, [r7, #28]
 800825c:	6a3a      	ldr	r2, [r7, #32]
 800825e:	e841 2300 	strex	r3, r2, [r1]
 8008262:	61bb      	str	r3, [r7, #24]
   return(result);
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d1e5      	bne.n	8008236 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2220      	movs	r2, #32
 800826e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2220      	movs	r2, #32
 8008274:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2220      	movs	r2, #32
 800827c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008288:	2303      	movs	r3, #3
 800828a:	e010      	b.n	80082ae <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	69da      	ldr	r2, [r3, #28]
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	4013      	ands	r3, r2
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	429a      	cmp	r2, r3
 800829a:	bf0c      	ite	eq
 800829c:	2301      	moveq	r3, #1
 800829e:	2300      	movne	r3, #0
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	461a      	mov	r2, r3
 80082a4:	79fb      	ldrb	r3, [r7, #7]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	f43f af48 	beq.w	800813c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082ac:	2300      	movs	r3, #0
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3770      	adds	r7, #112	; 0x70
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
	...

080082b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b096      	sub	sp, #88	; 0x58
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	4613      	mov	r3, r2
 80082c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	88fa      	ldrh	r2, [r7, #6]
 80082d0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2222      	movs	r2, #34	; 0x22
 80082e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d028      	beq.n	800833e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082f0:	4a3e      	ldr	r2, [pc, #248]	; (80083ec <UART_Start_Receive_DMA+0x134>)
 80082f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082f8:	4a3d      	ldr	r2, [pc, #244]	; (80083f0 <UART_Start_Receive_DMA+0x138>)
 80082fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008300:	4a3c      	ldr	r2, [pc, #240]	; (80083f4 <UART_Start_Receive_DMA+0x13c>)
 8008302:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008308:	2200      	movs	r2, #0
 800830a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	3324      	adds	r3, #36	; 0x24
 8008316:	4619      	mov	r1, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800831c:	461a      	mov	r2, r3
 800831e:	88fb      	ldrh	r3, [r7, #6]
 8008320:	f7fb fe68 	bl	8003ff4 <HAL_DMA_Start_IT>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d009      	beq.n	800833e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2210      	movs	r2, #16
 800832e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2220      	movs	r2, #32
 8008336:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e051      	b.n	80083e2 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d018      	beq.n	8008378 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800834e:	e853 3f00 	ldrex	r3, [r3]
 8008352:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800835a:	657b      	str	r3, [r7, #84]	; 0x54
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	461a      	mov	r2, r3
 8008362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008364:	64bb      	str	r3, [r7, #72]	; 0x48
 8008366:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008368:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800836a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800836c:	e841 2300 	strex	r3, r2, [r1]
 8008370:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008372:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1e6      	bne.n	8008346 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	3308      	adds	r3, #8
 800837e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008382:	e853 3f00 	ldrex	r3, [r3]
 8008386:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	f043 0301 	orr.w	r3, r3, #1
 800838e:	653b      	str	r3, [r7, #80]	; 0x50
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	3308      	adds	r3, #8
 8008396:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008398:	637a      	str	r2, [r7, #52]	; 0x34
 800839a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800839e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083a0:	e841 2300 	strex	r3, r2, [r1]
 80083a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80083a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1e5      	bne.n	8008378 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	3308      	adds	r3, #8
 80083b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	e853 3f00 	ldrex	r3, [r3]
 80083ba:	613b      	str	r3, [r7, #16]
   return(result);
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	3308      	adds	r3, #8
 80083ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083cc:	623a      	str	r2, [r7, #32]
 80083ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d0:	69f9      	ldr	r1, [r7, #28]
 80083d2:	6a3a      	ldr	r2, [r7, #32]
 80083d4:	e841 2300 	strex	r3, r2, [r1]
 80083d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1e5      	bne.n	80083ac <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3758      	adds	r7, #88	; 0x58
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	080085bf 	.word	0x080085bf
 80083f0:	080086e7 	.word	0x080086e7
 80083f4:	08008725 	.word	0x08008725

080083f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b089      	sub	sp, #36	; 0x24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	e853 3f00 	ldrex	r3, [r3]
 800840c:	60bb      	str	r3, [r7, #8]
   return(result);
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008414:	61fb      	str	r3, [r7, #28]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	461a      	mov	r2, r3
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	61bb      	str	r3, [r7, #24]
 8008420:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008422:	6979      	ldr	r1, [r7, #20]
 8008424:	69ba      	ldr	r2, [r7, #24]
 8008426:	e841 2300 	strex	r3, r2, [r1]
 800842a:	613b      	str	r3, [r7, #16]
   return(result);
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d1e6      	bne.n	8008400 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2220      	movs	r2, #32
 8008436:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8008438:	bf00      	nop
 800843a:	3724      	adds	r7, #36	; 0x24
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008444:	b480      	push	{r7}
 8008446:	b095      	sub	sp, #84	; 0x54
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008454:	e853 3f00 	ldrex	r3, [r3]
 8008458:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800845a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008460:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	461a      	mov	r2, r3
 8008468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800846a:	643b      	str	r3, [r7, #64]	; 0x40
 800846c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008470:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008472:	e841 2300 	strex	r3, r2, [r1]
 8008476:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1e6      	bne.n	800844c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	3308      	adds	r3, #8
 8008484:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	e853 3f00 	ldrex	r3, [r3]
 800848c:	61fb      	str	r3, [r7, #28]
   return(result);
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	f023 0301 	bic.w	r3, r3, #1
 8008494:	64bb      	str	r3, [r7, #72]	; 0x48
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	3308      	adds	r3, #8
 800849c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800849e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084a6:	e841 2300 	strex	r3, r2, [r1]
 80084aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1e5      	bne.n	800847e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d118      	bne.n	80084ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	e853 3f00 	ldrex	r3, [r3]
 80084c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	f023 0310 	bic.w	r3, r3, #16
 80084ce:	647b      	str	r3, [r7, #68]	; 0x44
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	461a      	mov	r2, r3
 80084d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084d8:	61bb      	str	r3, [r7, #24]
 80084da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084dc:	6979      	ldr	r1, [r7, #20]
 80084de:	69ba      	ldr	r2, [r7, #24]
 80084e0:	e841 2300 	strex	r3, r2, [r1]
 80084e4:	613b      	str	r3, [r7, #16]
   return(result);
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1e6      	bne.n	80084ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2220      	movs	r2, #32
 80084f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2200      	movs	r2, #0
 80084f8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008500:	bf00      	nop
 8008502:	3754      	adds	r7, #84	; 0x54
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b090      	sub	sp, #64	; 0x40
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008518:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	69db      	ldr	r3, [r3, #28]
 800851e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008522:	d037      	beq.n	8008594 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8008524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008526:	2200      	movs	r2, #0
 8008528:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800852c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	3308      	adds	r3, #8
 8008532:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008536:	e853 3f00 	ldrex	r3, [r3]
 800853a:	623b      	str	r3, [r7, #32]
   return(result);
 800853c:	6a3b      	ldr	r3, [r7, #32]
 800853e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008542:	63bb      	str	r3, [r7, #56]	; 0x38
 8008544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	3308      	adds	r3, #8
 800854a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800854c:	633a      	str	r2, [r7, #48]	; 0x30
 800854e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008550:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008554:	e841 2300 	strex	r3, r2, [r1]
 8008558:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800855a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855c:	2b00      	cmp	r3, #0
 800855e:	d1e5      	bne.n	800852c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	e853 3f00 	ldrex	r3, [r3]
 800856c:	60fb      	str	r3, [r7, #12]
   return(result);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008574:	637b      	str	r3, [r7, #52]	; 0x34
 8008576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800857e:	61fb      	str	r3, [r7, #28]
 8008580:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008582:	69b9      	ldr	r1, [r7, #24]
 8008584:	69fa      	ldr	r2, [r7, #28]
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	617b      	str	r3, [r7, #20]
   return(result);
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1e6      	bne.n	8008560 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008592:	e002      	b.n	800859a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8008594:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008596:	f7ff fa2d 	bl	80079f4 <HAL_UART_TxCpltCallback>
}
 800859a:	bf00      	nop
 800859c:	3740      	adds	r7, #64	; 0x40
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}

080085a2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80085a2:	b580      	push	{r7, lr}
 80085a4:	b084      	sub	sp, #16
 80085a6:	af00      	add	r7, sp, #0
 80085a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f7ff fa29 	bl	8007a08 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085b6:	bf00      	nop
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b09c      	sub	sp, #112	; 0x70
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ca:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	69db      	ldr	r3, [r3, #28]
 80085d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085d4:	d071      	beq.n	80086ba <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80085d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085d8:	2200      	movs	r2, #0
 80085da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085e6:	e853 3f00 	ldrex	r3, [r3]
 80085ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80085f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	461a      	mov	r2, r3
 80085fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80085fe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008600:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008602:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008604:	e841 2300 	strex	r3, r2, [r1]
 8008608:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800860a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1e6      	bne.n	80085de <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	3308      	adds	r3, #8
 8008616:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861a:	e853 3f00 	ldrex	r3, [r3]
 800861e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008622:	f023 0301 	bic.w	r3, r3, #1
 8008626:	667b      	str	r3, [r7, #100]	; 0x64
 8008628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	3308      	adds	r3, #8
 800862e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008630:	647a      	str	r2, [r7, #68]	; 0x44
 8008632:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008634:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008636:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008638:	e841 2300 	strex	r3, r2, [r1]
 800863c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800863e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1e5      	bne.n	8008610 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	3308      	adds	r3, #8
 800864a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	e853 3f00 	ldrex	r3, [r3]
 8008652:	623b      	str	r3, [r7, #32]
   return(result);
 8008654:	6a3b      	ldr	r3, [r7, #32]
 8008656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800865a:	663b      	str	r3, [r7, #96]	; 0x60
 800865c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	3308      	adds	r3, #8
 8008662:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008664:	633a      	str	r2, [r7, #48]	; 0x30
 8008666:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008668:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800866a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800866c:	e841 2300 	strex	r3, r2, [r1]
 8008670:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1e5      	bne.n	8008644 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800867a:	2220      	movs	r2, #32
 800867c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008684:	2b01      	cmp	r3, #1
 8008686:	d118      	bne.n	80086ba <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	e853 3f00 	ldrex	r3, [r3]
 8008694:	60fb      	str	r3, [r7, #12]
   return(result);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f023 0310 	bic.w	r3, r3, #16
 800869c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800869e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	461a      	mov	r2, r3
 80086a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086a6:	61fb      	str	r3, [r7, #28]
 80086a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086aa:	69b9      	ldr	r1, [r7, #24]
 80086ac:	69fa      	ldr	r2, [r7, #28]
 80086ae:	e841 2300 	strex	r3, r2, [r1]
 80086b2:	617b      	str	r3, [r7, #20]
   return(result);
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1e6      	bne.n	8008688 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086bc:	2200      	movs	r2, #0
 80086be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d107      	bne.n	80086d8 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80086ce:	4619      	mov	r1, r3
 80086d0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80086d2:	f7ff f9c1 	bl	8007a58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80086d6:	e002      	b.n	80086de <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80086d8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80086da:	f7ff f99f 	bl	8007a1c <HAL_UART_RxCpltCallback>
}
 80086de:	bf00      	nop
 80086e0:	3770      	adds	r7, #112	; 0x70
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b084      	sub	sp, #16
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2201      	movs	r2, #1
 80086f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d109      	bne.n	8008716 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008708:	085b      	lsrs	r3, r3, #1
 800870a:	b29b      	uxth	r3, r3
 800870c:	4619      	mov	r1, r3
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f7ff f9a2 	bl	8007a58 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008714:	e002      	b.n	800871c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f7ff f98a 	bl	8007a30 <HAL_UART_RxHalfCpltCallback>
}
 800871c:	bf00      	nop
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b086      	sub	sp, #24
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008730:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008736:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800873e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800874a:	2b80      	cmp	r3, #128	; 0x80
 800874c:	d109      	bne.n	8008762 <UART_DMAError+0x3e>
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	2b21      	cmp	r3, #33	; 0x21
 8008752:	d106      	bne.n	8008762 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	2200      	movs	r2, #0
 8008758:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800875c:	6978      	ldr	r0, [r7, #20]
 800875e:	f7ff fe4b 	bl	80083f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800876c:	2b40      	cmp	r3, #64	; 0x40
 800876e:	d109      	bne.n	8008784 <UART_DMAError+0x60>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2b22      	cmp	r3, #34	; 0x22
 8008774:	d106      	bne.n	8008784 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	2200      	movs	r2, #0
 800877a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800877e:	6978      	ldr	r0, [r7, #20]
 8008780:	f7ff fe60 	bl	8008444 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800878a:	f043 0210 	orr.w	r2, r3, #16
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008794:	6978      	ldr	r0, [r7, #20]
 8008796:	f7ff f955 	bl	8007a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800879a:	bf00      	nop
 800879c:	3718      	adds	r7, #24
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b084      	sub	sp, #16
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f7ff f93f 	bl	8007a44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087c6:	bf00      	nop
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b088      	sub	sp, #32
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	e853 3f00 	ldrex	r3, [r3]
 80087e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087ea:	61fb      	str	r3, [r7, #28]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	461a      	mov	r2, r3
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	61bb      	str	r3, [r7, #24]
 80087f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f8:	6979      	ldr	r1, [r7, #20]
 80087fa:	69ba      	ldr	r2, [r7, #24]
 80087fc:	e841 2300 	strex	r3, r2, [r1]
 8008800:	613b      	str	r3, [r7, #16]
   return(result);
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d1e6      	bne.n	80087d6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2220      	movs	r2, #32
 800880c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f7ff f8ed 	bl	80079f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800881a:	bf00      	nop
 800881c:	3720      	adds	r7, #32
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
	...

08008824 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008824:	b084      	sub	sp, #16
 8008826:	b580      	push	{r7, lr}
 8008828:	b084      	sub	sp, #16
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
 800882e:	f107 001c 	add.w	r0, r7, #28
 8008832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008838:	2b01      	cmp	r3, #1
 800883a:	d120      	bne.n	800887e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008840:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	68da      	ldr	r2, [r3, #12]
 800884c:	4b20      	ldr	r3, [pc, #128]	; (80088d0 <USB_CoreInit+0xac>)
 800884e:	4013      	ands	r3, r2
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008862:	2b01      	cmp	r3, #1
 8008864:	d105      	bne.n	8008872 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fa96 	bl	8008da4 <USB_CoreReset>
 8008878:	4603      	mov	r3, r0
 800887a:	73fb      	strb	r3, [r7, #15]
 800887c:	e010      	b.n	80088a0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fa8a 	bl	8008da4 <USB_CoreReset>
 8008890:	4603      	mov	r3, r0
 8008892:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008898:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80088a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d10b      	bne.n	80088be <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	f043 0206 	orr.w	r2, r3, #6
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	f043 0220 	orr.w	r2, r3, #32
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80088be:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80088ca:	b004      	add	sp, #16
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	ffbdffbf 	.word	0xffbdffbf

080088d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	f023 0201 	bic.w	r2, r3, #1
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	370c      	adds	r7, #12
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr

080088f6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b084      	sub	sp, #16
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
 80088fe:	460b      	mov	r3, r1
 8008900:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008902:	2300      	movs	r3, #0
 8008904:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	68db      	ldr	r3, [r3, #12]
 800890a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008912:	78fb      	ldrb	r3, [r7, #3]
 8008914:	2b01      	cmp	r3, #1
 8008916:	d115      	bne.n	8008944 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	68db      	ldr	r3, [r3, #12]
 800891c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008924:	2001      	movs	r0, #1
 8008926:	f7fb f9b1 	bl	8003c8c <HAL_Delay>
      ms++;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	3301      	adds	r3, #1
 800892e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 fa29 	bl	8008d88 <USB_GetMode>
 8008936:	4603      	mov	r3, r0
 8008938:	2b01      	cmp	r3, #1
 800893a:	d01e      	beq.n	800897a <USB_SetCurrentMode+0x84>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2b31      	cmp	r3, #49	; 0x31
 8008940:	d9f0      	bls.n	8008924 <USB_SetCurrentMode+0x2e>
 8008942:	e01a      	b.n	800897a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008944:	78fb      	ldrb	r3, [r7, #3]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d115      	bne.n	8008976 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	68db      	ldr	r3, [r3, #12]
 800894e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008956:	2001      	movs	r0, #1
 8008958:	f7fb f998 	bl	8003c8c <HAL_Delay>
      ms++;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	3301      	adds	r3, #1
 8008960:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 fa10 	bl	8008d88 <USB_GetMode>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d005      	beq.n	800897a <USB_SetCurrentMode+0x84>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2b31      	cmp	r3, #49	; 0x31
 8008972:	d9f0      	bls.n	8008956 <USB_SetCurrentMode+0x60>
 8008974:	e001      	b.n	800897a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	e005      	b.n	8008986 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2b32      	cmp	r3, #50	; 0x32
 800897e:	d101      	bne.n	8008984 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e000      	b.n	8008986 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
	...

08008990 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008990:	b084      	sub	sp, #16
 8008992:	b580      	push	{r7, lr}
 8008994:	b086      	sub	sp, #24
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
 800899a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800899e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80089a2:	2300      	movs	r3, #0
 80089a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80089aa:	2300      	movs	r3, #0
 80089ac:	613b      	str	r3, [r7, #16]
 80089ae:	e009      	b.n	80089c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	3340      	adds	r3, #64	; 0x40
 80089b6:	009b      	lsls	r3, r3, #2
 80089b8:	4413      	add	r3, r2
 80089ba:	2200      	movs	r2, #0
 80089bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	3301      	adds	r3, #1
 80089c2:	613b      	str	r3, [r7, #16]
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	2b0e      	cmp	r3, #14
 80089c8:	d9f2      	bls.n	80089b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80089ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d11c      	bne.n	8008a0a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089de:	f043 0302 	orr.w	r3, r3, #2
 80089e2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	601a      	str	r2, [r3, #0]
 8008a08:	e005      	b.n	8008a16 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	2300      	movs	r3, #0
 8008a20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a28:	4619      	mov	r1, r3
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a30:	461a      	mov	r2, r3
 8008a32:	680b      	ldr	r3, [r1, #0]
 8008a34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d10c      	bne.n	8008a56 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d104      	bne.n	8008a4c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008a42:	2100      	movs	r1, #0
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 f965 	bl	8008d14 <USB_SetDevSpeed>
 8008a4a:	e008      	b.n	8008a5e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008a4c:	2101      	movs	r1, #1
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f960 	bl	8008d14 <USB_SetDevSpeed>
 8008a54:	e003      	b.n	8008a5e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008a56:	2103      	movs	r1, #3
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 f95b 	bl	8008d14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008a5e:	2110      	movs	r1, #16
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 f8f3 	bl	8008c4c <USB_FlushTxFifo>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d001      	beq.n	8008a70 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f91f 	bl	8008cb4 <USB_FlushRxFifo>
 8008a76:	4603      	mov	r3, r0
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d001      	beq.n	8008a80 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a86:	461a      	mov	r2, r3
 8008a88:	2300      	movs	r3, #0
 8008a8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a92:	461a      	mov	r2, r3
 8008a94:	2300      	movs	r3, #0
 8008a96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	613b      	str	r3, [r7, #16]
 8008aa8:	e043      	b.n	8008b32 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	015a      	lsls	r2, r3, #5
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008abc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ac0:	d118      	bne.n	8008af4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d10a      	bne.n	8008ade <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	015a      	lsls	r2, r3, #5
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	4413      	add	r3, r2
 8008ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ada:	6013      	str	r3, [r2, #0]
 8008adc:	e013      	b.n	8008b06 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aea:	461a      	mov	r2, r3
 8008aec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008af0:	6013      	str	r3, [r2, #0]
 8008af2:	e008      	b.n	8008b06 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	015a      	lsls	r2, r3, #5
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	4413      	add	r3, r2
 8008afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b00:	461a      	mov	r2, r3
 8008b02:	2300      	movs	r3, #0
 8008b04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	015a      	lsls	r2, r3, #5
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b12:	461a      	mov	r2, r3
 8008b14:	2300      	movs	r3, #0
 8008b16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	015a      	lsls	r2, r3, #5
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b24:	461a      	mov	r2, r3
 8008b26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	3301      	adds	r3, #1
 8008b30:	613b      	str	r3, [r7, #16]
 8008b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d3b7      	bcc.n	8008aaa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	613b      	str	r3, [r7, #16]
 8008b3e:	e043      	b.n	8008bc8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	015a      	lsls	r2, r3, #5
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	4413      	add	r3, r2
 8008b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b56:	d118      	bne.n	8008b8a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d10a      	bne.n	8008b74 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	015a      	lsls	r2, r3, #5
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	4413      	add	r3, r2
 8008b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b70:	6013      	str	r3, [r2, #0]
 8008b72:	e013      	b.n	8008b9c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	015a      	lsls	r2, r3, #5
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b80:	461a      	mov	r2, r3
 8008b82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b86:	6013      	str	r3, [r2, #0]
 8008b88:	e008      	b.n	8008b9c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b96:	461a      	mov	r2, r3
 8008b98:	2300      	movs	r3, #0
 8008b9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	015a      	lsls	r2, r3, #5
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba8:	461a      	mov	r2, r3
 8008baa:	2300      	movs	r3, #0
 8008bac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	015a      	lsls	r2, r3, #5
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bba:	461a      	mov	r2, r3
 8008bbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008bc0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	613b      	str	r3, [r7, #16]
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d3b7      	bcc.n	8008b40 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	68fa      	ldr	r2, [r7, #12]
 8008bda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008be2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008bf0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d105      	bne.n	8008c04 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	699b      	ldr	r3, [r3, #24]
 8008bfc:	f043 0210 	orr.w	r2, r3, #16
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	699a      	ldr	r2, [r3, #24]
 8008c08:	4b0e      	ldr	r3, [pc, #56]	; (8008c44 <USB_DevInit+0x2b4>)
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d005      	beq.n	8008c22 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	f043 0208 	orr.w	r2, r3, #8
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d105      	bne.n	8008c34 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	699a      	ldr	r2, [r3, #24]
 8008c2c:	4b06      	ldr	r3, [pc, #24]	; (8008c48 <USB_DevInit+0x2b8>)
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3718      	adds	r7, #24
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c40:	b004      	add	sp, #16
 8008c42:	4770      	bx	lr
 8008c44:	803c3800 	.word	0x803c3800
 8008c48:	40000004 	.word	0x40000004

08008c4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c56:	2300      	movs	r3, #0
 8008c58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	4a13      	ldr	r2, [pc, #76]	; (8008cb0 <USB_FlushTxFifo+0x64>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d901      	bls.n	8008c6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008c68:	2303      	movs	r3, #3
 8008c6a:	e01b      	b.n	8008ca4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	691b      	ldr	r3, [r3, #16]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	daf2      	bge.n	8008c5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008c74:	2300      	movs	r3, #0
 8008c76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	019b      	lsls	r3, r3, #6
 8008c7c:	f043 0220 	orr.w	r2, r3, #32
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	3301      	adds	r3, #1
 8008c88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	4a08      	ldr	r2, [pc, #32]	; (8008cb0 <USB_FlushTxFifo+0x64>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d901      	bls.n	8008c96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008c92:	2303      	movs	r3, #3
 8008c94:	e006      	b.n	8008ca4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	f003 0320 	and.w	r3, r3, #32
 8008c9e:	2b20      	cmp	r3, #32
 8008ca0:	d0f0      	beq.n	8008c84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3714      	adds	r7, #20
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr
 8008cb0:	00030d40 	.word	0x00030d40

08008cb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	4a11      	ldr	r2, [pc, #68]	; (8008d10 <USB_FlushRxFifo+0x5c>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d901      	bls.n	8008cd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	e018      	b.n	8008d04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	daf2      	bge.n	8008cc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2210      	movs	r2, #16
 8008ce2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	4a08      	ldr	r2, [pc, #32]	; (8008d10 <USB_FlushRxFifo+0x5c>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d901      	bls.n	8008cf6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	e006      	b.n	8008d04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	f003 0310 	and.w	r3, r3, #16
 8008cfe:	2b10      	cmp	r3, #16
 8008d00:	d0f0      	beq.n	8008ce4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3714      	adds	r7, #20
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr
 8008d10:	00030d40 	.word	0x00030d40

08008d14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	78fb      	ldrb	r3, [r7, #3]
 8008d2e:	68f9      	ldr	r1, [r7, #12]
 8008d30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d34:	4313      	orrs	r3, r2
 8008d36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3714      	adds	r7, #20
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008d46:	b480      	push	{r7}
 8008d48:	b085      	sub	sp, #20
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008d60:	f023 0303 	bic.w	r3, r3, #3
 8008d64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d74:	f043 0302 	orr.w	r3, r3, #2
 8008d78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	695b      	ldr	r3, [r3, #20]
 8008d94:	f003 0301 	and.w	r3, r3, #1
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008dac:	2300      	movs	r3, #0
 8008dae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	3301      	adds	r3, #1
 8008db4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	4a13      	ldr	r2, [pc, #76]	; (8008e08 <USB_CoreReset+0x64>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d901      	bls.n	8008dc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	e01b      	b.n	8008dfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	691b      	ldr	r3, [r3, #16]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	daf2      	bge.n	8008db0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	f043 0201 	orr.w	r2, r3, #1
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	4a09      	ldr	r2, [pc, #36]	; (8008e08 <USB_CoreReset+0x64>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d901      	bls.n	8008dec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008de8:	2303      	movs	r3, #3
 8008dea:	e006      	b.n	8008dfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	f003 0301 	and.w	r3, r3, #1
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d0f0      	beq.n	8008dda <USB_CoreReset+0x36>

  return HAL_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	00030d40 	.word	0x00030d40

08008e0c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008e0c:	b480      	push	{r7}
 8008e0e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8008e10:	bf00      	nop
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
	...

08008e1c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e22:	f3ef 8305 	mrs	r3, IPSR
 8008e26:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e28:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d10f      	bne.n	8008e4e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8008e32:	607b      	str	r3, [r7, #4]
  return(result);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d105      	bne.n	8008e46 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e3a:	f3ef 8311 	mrs	r3, BASEPRI
 8008e3e:	603b      	str	r3, [r7, #0]
  return(result);
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d007      	beq.n	8008e56 <osKernelInitialize+0x3a>
 8008e46:	4b0e      	ldr	r3, [pc, #56]	; (8008e80 <osKernelInitialize+0x64>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2b02      	cmp	r3, #2
 8008e4c:	d103      	bne.n	8008e56 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008e4e:	f06f 0305 	mvn.w	r3, #5
 8008e52:	60fb      	str	r3, [r7, #12]
 8008e54:	e00c      	b.n	8008e70 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008e56:	4b0a      	ldr	r3, [pc, #40]	; (8008e80 <osKernelInitialize+0x64>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d105      	bne.n	8008e6a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008e5e:	4b08      	ldr	r3, [pc, #32]	; (8008e80 <osKernelInitialize+0x64>)
 8008e60:	2201      	movs	r2, #1
 8008e62:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	60fb      	str	r3, [r7, #12]
 8008e68:	e002      	b.n	8008e70 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e6e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008e70:	68fb      	ldr	r3, [r7, #12]
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	20006f34 	.word	0x20006f34

08008e84 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e8a:	f3ef 8305 	mrs	r3, IPSR
 8008e8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008e90:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10f      	bne.n	8008eb6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e96:	f3ef 8310 	mrs	r3, PRIMASK
 8008e9a:	607b      	str	r3, [r7, #4]
  return(result);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d105      	bne.n	8008eae <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ea2:	f3ef 8311 	mrs	r3, BASEPRI
 8008ea6:	603b      	str	r3, [r7, #0]
  return(result);
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d007      	beq.n	8008ebe <osKernelStart+0x3a>
 8008eae:	4b0f      	ldr	r3, [pc, #60]	; (8008eec <osKernelStart+0x68>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2b02      	cmp	r3, #2
 8008eb4:	d103      	bne.n	8008ebe <osKernelStart+0x3a>
    stat = osErrorISR;
 8008eb6:	f06f 0305 	mvn.w	r3, #5
 8008eba:	60fb      	str	r3, [r7, #12]
 8008ebc:	e010      	b.n	8008ee0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008ebe:	4b0b      	ldr	r3, [pc, #44]	; (8008eec <osKernelStart+0x68>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d109      	bne.n	8008eda <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008ec6:	f7ff ffa1 	bl	8008e0c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008eca:	4b08      	ldr	r3, [pc, #32]	; (8008eec <osKernelStart+0x68>)
 8008ecc:	2202      	movs	r2, #2
 8008ece:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008ed0:	f001 f8ca 	bl	800a068 <vTaskStartScheduler>
      stat = osOK;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	60fb      	str	r3, [r7, #12]
 8008ed8:	e002      	b.n	8008ee0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ede:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	20006f34 	.word	0x20006f34

08008ef0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b090      	sub	sp, #64	; 0x40
 8008ef4:	af04      	add	r7, sp, #16
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008efc:	2300      	movs	r3, #0
 8008efe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f00:	f3ef 8305 	mrs	r3, IPSR
 8008f04:	61fb      	str	r3, [r7, #28]
  return(result);
 8008f06:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	f040 808f 	bne.w	800902c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8008f12:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d105      	bne.n	8008f26 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f1a:	f3ef 8311 	mrs	r3, BASEPRI
 8008f1e:	617b      	str	r3, [r7, #20]
  return(result);
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d003      	beq.n	8008f2e <osThreadNew+0x3e>
 8008f26:	4b44      	ldr	r3, [pc, #272]	; (8009038 <osThreadNew+0x148>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d07e      	beq.n	800902c <osThreadNew+0x13c>
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d07b      	beq.n	800902c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008f34:	2380      	movs	r3, #128	; 0x80
 8008f36:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008f38:	2318      	movs	r3, #24
 8008f3a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008f40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f44:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d045      	beq.n	8008fd8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d002      	beq.n	8008f5a <osThreadNew+0x6a>
        name = attr->name;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	699b      	ldr	r3, [r3, #24]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d002      	beq.n	8008f68 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	699b      	ldr	r3, [r3, #24]
 8008f66:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d008      	beq.n	8008f80 <osThreadNew+0x90>
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f70:	2b38      	cmp	r3, #56	; 0x38
 8008f72:	d805      	bhi.n	8008f80 <osThreadNew+0x90>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	f003 0301 	and.w	r3, r3, #1
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d001      	beq.n	8008f84 <osThreadNew+0x94>
        return (NULL);
 8008f80:	2300      	movs	r3, #0
 8008f82:	e054      	b.n	800902e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	695b      	ldr	r3, [r3, #20]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d003      	beq.n	8008f94 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	695b      	ldr	r3, [r3, #20]
 8008f90:	089b      	lsrs	r3, r3, #2
 8008f92:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00e      	beq.n	8008fba <osThreadNew+0xca>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	68db      	ldr	r3, [r3, #12]
 8008fa0:	2ba7      	cmp	r3, #167	; 0xa7
 8008fa2:	d90a      	bls.n	8008fba <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d006      	beq.n	8008fba <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	695b      	ldr	r3, [r3, #20]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d002      	beq.n	8008fba <osThreadNew+0xca>
        mem = 1;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	623b      	str	r3, [r7, #32]
 8008fb8:	e010      	b.n	8008fdc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d10c      	bne.n	8008fdc <osThreadNew+0xec>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d108      	bne.n	8008fdc <osThreadNew+0xec>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d104      	bne.n	8008fdc <osThreadNew+0xec>
          mem = 0;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	623b      	str	r3, [r7, #32]
 8008fd6:	e001      	b.n	8008fdc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008fdc:	6a3b      	ldr	r3, [r7, #32]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d110      	bne.n	8009004 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008fea:	9202      	str	r2, [sp, #8]
 8008fec:	9301      	str	r3, [sp, #4]
 8008fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff0:	9300      	str	r3, [sp, #0]
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ff6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	f000 fe3f 	bl	8009c7c <xTaskCreateStatic>
 8008ffe:	4603      	mov	r3, r0
 8009000:	613b      	str	r3, [r7, #16]
 8009002:	e013      	b.n	800902c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8009004:	6a3b      	ldr	r3, [r7, #32]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d110      	bne.n	800902c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800900a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900c:	b29a      	uxth	r2, r3
 800900e:	f107 0310 	add.w	r3, r7, #16
 8009012:	9301      	str	r3, [sp, #4]
 8009014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f000 fe90 	bl	8009d42 <xTaskCreate>
 8009022:	4603      	mov	r3, r0
 8009024:	2b01      	cmp	r3, #1
 8009026:	d001      	beq.n	800902c <osThreadNew+0x13c>
          hTask = NULL;
 8009028:	2300      	movs	r3, #0
 800902a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800902c:	693b      	ldr	r3, [r7, #16]
}
 800902e:	4618      	mov	r0, r3
 8009030:	3730      	adds	r7, #48	; 0x30
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	20006f34 	.word	0x20006f34

0800903c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009044:	f3ef 8305 	mrs	r3, IPSR
 8009048:	613b      	str	r3, [r7, #16]
  return(result);
 800904a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800904c:	2b00      	cmp	r3, #0
 800904e:	d10f      	bne.n	8009070 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009050:	f3ef 8310 	mrs	r3, PRIMASK
 8009054:	60fb      	str	r3, [r7, #12]
  return(result);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d105      	bne.n	8009068 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800905c:	f3ef 8311 	mrs	r3, BASEPRI
 8009060:	60bb      	str	r3, [r7, #8]
  return(result);
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d007      	beq.n	8009078 <osDelay+0x3c>
 8009068:	4b0a      	ldr	r3, [pc, #40]	; (8009094 <osDelay+0x58>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2b02      	cmp	r3, #2
 800906e:	d103      	bne.n	8009078 <osDelay+0x3c>
    stat = osErrorISR;
 8009070:	f06f 0305 	mvn.w	r3, #5
 8009074:	617b      	str	r3, [r7, #20]
 8009076:	e007      	b.n	8009088 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009078:	2300      	movs	r3, #0
 800907a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d002      	beq.n	8009088 <osDelay+0x4c>
      vTaskDelay(ticks);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 ffba 	bl	8009ffc <vTaskDelay>
    }
  }

  return (stat);
 8009088:	697b      	ldr	r3, [r7, #20]
}
 800908a:	4618      	mov	r0, r3
 800908c:	3718      	adds	r7, #24
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	20006f34 	.word	0x20006f34

08009098 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	60f8      	str	r0, [r7, #12]
 80090a0:	60b9      	str	r1, [r7, #8]
 80090a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	4a07      	ldr	r2, [pc, #28]	; (80090c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80090a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	4a06      	ldr	r2, [pc, #24]	; (80090c8 <vApplicationGetIdleTaskMemory+0x30>)
 80090ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2280      	movs	r2, #128	; 0x80
 80090b4:	601a      	str	r2, [r3, #0]
}
 80090b6:	bf00      	nop
 80090b8:	3714      	adds	r7, #20
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	20006f38 	.word	0x20006f38
 80090c8:	20006fe0 	.word	0x20006fe0

080090cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80090cc:	b480      	push	{r7}
 80090ce:	b085      	sub	sp, #20
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	4a07      	ldr	r2, [pc, #28]	; (80090f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80090dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	4a06      	ldr	r2, [pc, #24]	; (80090fc <vApplicationGetTimerTaskMemory+0x30>)
 80090e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80090ea:	601a      	str	r2, [r3, #0]
}
 80090ec:	bf00      	nop
 80090ee:	3714      	adds	r7, #20
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr
 80090f8:	200071e0 	.word	0x200071e0
 80090fc:	20007288 	.word	0x20007288

08009100 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f103 0208 	add.w	r2, r3, #8
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009118:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f103 0208 	add.w	r2, r3, #8
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f103 0208 	add.w	r2, r3, #8
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009134:	bf00      	nop
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800914e:	bf00      	nop
 8009150:	370c      	adds	r7, #12
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr

0800915a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800915a:	b480      	push	{r7}
 800915c:	b085      	sub	sp, #20
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	689a      	ldr	r2, [r3, #8]
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	683a      	ldr	r2, [r7, #0]
 800917e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	683a      	ldr	r2, [r7, #0]
 8009184:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	1c5a      	adds	r2, r3, #1
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	601a      	str	r2, [r3, #0]
}
 8009196:	bf00      	nop
 8009198:	3714      	adds	r7, #20
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr

080091a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091a2:	b480      	push	{r7}
 80091a4:	b085      	sub	sp, #20
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
 80091aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091b8:	d103      	bne.n	80091c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	60fb      	str	r3, [r7, #12]
 80091c0:	e00c      	b.n	80091dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	3308      	adds	r3, #8
 80091c6:	60fb      	str	r3, [r7, #12]
 80091c8:	e002      	b.n	80091d0 <vListInsert+0x2e>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	60fb      	str	r3, [r7, #12]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68ba      	ldr	r2, [r7, #8]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d2f6      	bcs.n	80091ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	685a      	ldr	r2, [r3, #4]
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	683a      	ldr	r2, [r7, #0]
 80091ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	683a      	ldr	r2, [r7, #0]
 80091f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	1c5a      	adds	r2, r3, #1
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	601a      	str	r2, [r3, #0]
}
 8009208:	bf00      	nop
 800920a:	3714      	adds	r7, #20
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009214:	b480      	push	{r7}
 8009216:	b085      	sub	sp, #20
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	6892      	ldr	r2, [r2, #8]
 800922a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	6852      	ldr	r2, [r2, #4]
 8009234:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	429a      	cmp	r2, r3
 800923e:	d103      	bne.n	8009248 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	689a      	ldr	r2, [r3, #8]
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	1e5a      	subs	r2, r3, #1
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3714      	adds	r7, #20
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10c      	bne.n	8009296 <xQueueGenericReset+0x2e>
	__asm volatile
 800927c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009280:	b672      	cpsid	i
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	b662      	cpsie	i
 8009290:	60bb      	str	r3, [r7, #8]
}
 8009292:	bf00      	nop
 8009294:	e7fe      	b.n	8009294 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8009296:	f002 f8d1 	bl	800b43c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092a2:	68f9      	ldr	r1, [r7, #12]
 80092a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80092a6:	fb01 f303 	mul.w	r3, r1, r3
 80092aa:	441a      	add	r2, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2200      	movs	r2, #0
 80092b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092c6:	3b01      	subs	r3, #1
 80092c8:	68f9      	ldr	r1, [r7, #12]
 80092ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80092cc:	fb01 f303 	mul.w	r3, r1, r3
 80092d0:	441a      	add	r2, r3
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	22ff      	movs	r2, #255	; 0xff
 80092da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	22ff      	movs	r2, #255	; 0xff
 80092e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d114      	bne.n	8009316 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d01a      	beq.n	800932a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	3310      	adds	r3, #16
 80092f8:	4618      	mov	r0, r3
 80092fa:	f001 f95d 	bl	800a5b8 <xTaskRemoveFromEventList>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d012      	beq.n	800932a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009304:	4b0c      	ldr	r3, [pc, #48]	; (8009338 <xQueueGenericReset+0xd0>)
 8009306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800930a:	601a      	str	r2, [r3, #0]
 800930c:	f3bf 8f4f 	dsb	sy
 8009310:	f3bf 8f6f 	isb	sy
 8009314:	e009      	b.n	800932a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	3310      	adds	r3, #16
 800931a:	4618      	mov	r0, r3
 800931c:	f7ff fef0 	bl	8009100 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	3324      	adds	r3, #36	; 0x24
 8009324:	4618      	mov	r0, r3
 8009326:	f7ff feeb 	bl	8009100 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800932a:	f002 f8bb 	bl	800b4a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800932e:	2301      	movs	r3, #1
}
 8009330:	4618      	mov	r0, r3
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	e000ed04 	.word	0xe000ed04

0800933c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800933c:	b580      	push	{r7, lr}
 800933e:	b08e      	sub	sp, #56	; 0x38
 8009340:	af02      	add	r7, sp, #8
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
 8009348:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d10c      	bne.n	800936a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8009350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009354:	b672      	cpsid	i
 8009356:	f383 8811 	msr	BASEPRI, r3
 800935a:	f3bf 8f6f 	isb	sy
 800935e:	f3bf 8f4f 	dsb	sy
 8009362:	b662      	cpsie	i
 8009364:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009366:	bf00      	nop
 8009368:	e7fe      	b.n	8009368 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d10c      	bne.n	800938a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8009370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009374:	b672      	cpsid	i
 8009376:	f383 8811 	msr	BASEPRI, r3
 800937a:	f3bf 8f6f 	isb	sy
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	b662      	cpsie	i
 8009384:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009386:	bf00      	nop
 8009388:	e7fe      	b.n	8009388 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d002      	beq.n	8009396 <xQueueGenericCreateStatic+0x5a>
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d001      	beq.n	800939a <xQueueGenericCreateStatic+0x5e>
 8009396:	2301      	movs	r3, #1
 8009398:	e000      	b.n	800939c <xQueueGenericCreateStatic+0x60>
 800939a:	2300      	movs	r3, #0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d10c      	bne.n	80093ba <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80093a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a4:	b672      	cpsid	i
 80093a6:	f383 8811 	msr	BASEPRI, r3
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	b662      	cpsie	i
 80093b4:	623b      	str	r3, [r7, #32]
}
 80093b6:	bf00      	nop
 80093b8:	e7fe      	b.n	80093b8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d102      	bne.n	80093c6 <xQueueGenericCreateStatic+0x8a>
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d101      	bne.n	80093ca <xQueueGenericCreateStatic+0x8e>
 80093c6:	2301      	movs	r3, #1
 80093c8:	e000      	b.n	80093cc <xQueueGenericCreateStatic+0x90>
 80093ca:	2300      	movs	r3, #0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d10c      	bne.n	80093ea <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80093d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d4:	b672      	cpsid	i
 80093d6:	f383 8811 	msr	BASEPRI, r3
 80093da:	f3bf 8f6f 	isb	sy
 80093de:	f3bf 8f4f 	dsb	sy
 80093e2:	b662      	cpsie	i
 80093e4:	61fb      	str	r3, [r7, #28]
}
 80093e6:	bf00      	nop
 80093e8:	e7fe      	b.n	80093e8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80093ea:	2350      	movs	r3, #80	; 0x50
 80093ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	2b50      	cmp	r3, #80	; 0x50
 80093f2:	d00c      	beq.n	800940e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80093f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f8:	b672      	cpsid	i
 80093fa:	f383 8811 	msr	BASEPRI, r3
 80093fe:	f3bf 8f6f 	isb	sy
 8009402:	f3bf 8f4f 	dsb	sy
 8009406:	b662      	cpsie	i
 8009408:	61bb      	str	r3, [r7, #24]
}
 800940a:	bf00      	nop
 800940c:	e7fe      	b.n	800940c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800940e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00d      	beq.n	8009436 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800941a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941c:	2201      	movs	r2, #1
 800941e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009422:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009428:	9300      	str	r3, [sp, #0]
 800942a:	4613      	mov	r3, r2
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	68b9      	ldr	r1, [r7, #8]
 8009430:	68f8      	ldr	r0, [r7, #12]
 8009432:	f000 f805 	bl	8009440 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009438:	4618      	mov	r0, r3
 800943a:	3730      	adds	r7, #48	; 0x30
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	607a      	str	r2, [r7, #4]
 800944c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d103      	bne.n	800945c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	69ba      	ldr	r2, [r7, #24]
 8009458:	601a      	str	r2, [r3, #0]
 800945a:	e002      	b.n	8009462 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009468:	69bb      	ldr	r3, [r7, #24]
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800946e:	2101      	movs	r1, #1
 8009470:	69b8      	ldr	r0, [r7, #24]
 8009472:	f7ff fef9 	bl	8009268 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	78fa      	ldrb	r2, [r7, #3]
 800947a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800947e:	bf00      	nop
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
	...

08009488 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b08e      	sub	sp, #56	; 0x38
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
 8009494:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009496:	2300      	movs	r3, #0
 8009498:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800949e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d10c      	bne.n	80094be <xQueueGenericSend+0x36>
	__asm volatile
 80094a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a8:	b672      	cpsid	i
 80094aa:	f383 8811 	msr	BASEPRI, r3
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	f3bf 8f4f 	dsb	sy
 80094b6:	b662      	cpsie	i
 80094b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80094ba:	bf00      	nop
 80094bc:	e7fe      	b.n	80094bc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d103      	bne.n	80094cc <xQueueGenericSend+0x44>
 80094c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d101      	bne.n	80094d0 <xQueueGenericSend+0x48>
 80094cc:	2301      	movs	r3, #1
 80094ce:	e000      	b.n	80094d2 <xQueueGenericSend+0x4a>
 80094d0:	2300      	movs	r3, #0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d10c      	bne.n	80094f0 <xQueueGenericSend+0x68>
	__asm volatile
 80094d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094da:	b672      	cpsid	i
 80094dc:	f383 8811 	msr	BASEPRI, r3
 80094e0:	f3bf 8f6f 	isb	sy
 80094e4:	f3bf 8f4f 	dsb	sy
 80094e8:	b662      	cpsie	i
 80094ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80094ec:	bf00      	nop
 80094ee:	e7fe      	b.n	80094ee <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d103      	bne.n	80094fe <xQueueGenericSend+0x76>
 80094f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d101      	bne.n	8009502 <xQueueGenericSend+0x7a>
 80094fe:	2301      	movs	r3, #1
 8009500:	e000      	b.n	8009504 <xQueueGenericSend+0x7c>
 8009502:	2300      	movs	r3, #0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d10c      	bne.n	8009522 <xQueueGenericSend+0x9a>
	__asm volatile
 8009508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950c:	b672      	cpsid	i
 800950e:	f383 8811 	msr	BASEPRI, r3
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	b662      	cpsie	i
 800951c:	623b      	str	r3, [r7, #32]
}
 800951e:	bf00      	nop
 8009520:	e7fe      	b.n	8009520 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009522:	f001 fa3b 	bl	800a99c <xTaskGetSchedulerState>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d102      	bne.n	8009532 <xQueueGenericSend+0xaa>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d101      	bne.n	8009536 <xQueueGenericSend+0xae>
 8009532:	2301      	movs	r3, #1
 8009534:	e000      	b.n	8009538 <xQueueGenericSend+0xb0>
 8009536:	2300      	movs	r3, #0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d10c      	bne.n	8009556 <xQueueGenericSend+0xce>
	__asm volatile
 800953c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009540:	b672      	cpsid	i
 8009542:	f383 8811 	msr	BASEPRI, r3
 8009546:	f3bf 8f6f 	isb	sy
 800954a:	f3bf 8f4f 	dsb	sy
 800954e:	b662      	cpsie	i
 8009550:	61fb      	str	r3, [r7, #28]
}
 8009552:	bf00      	nop
 8009554:	e7fe      	b.n	8009554 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009556:	f001 ff71 	bl	800b43c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800955a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800955e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009562:	429a      	cmp	r2, r3
 8009564:	d302      	bcc.n	800956c <xQueueGenericSend+0xe4>
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	2b02      	cmp	r3, #2
 800956a:	d129      	bne.n	80095c0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800956c:	683a      	ldr	r2, [r7, #0]
 800956e:	68b9      	ldr	r1, [r7, #8]
 8009570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009572:	f000 fa15 	bl	80099a0 <prvCopyDataToQueue>
 8009576:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957c:	2b00      	cmp	r3, #0
 800957e:	d010      	beq.n	80095a2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009582:	3324      	adds	r3, #36	; 0x24
 8009584:	4618      	mov	r0, r3
 8009586:	f001 f817 	bl	800a5b8 <xTaskRemoveFromEventList>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d013      	beq.n	80095b8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009590:	4b3f      	ldr	r3, [pc, #252]	; (8009690 <xQueueGenericSend+0x208>)
 8009592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009596:	601a      	str	r2, [r3, #0]
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	e00a      	b.n	80095b8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80095a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d007      	beq.n	80095b8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80095a8:	4b39      	ldr	r3, [pc, #228]	; (8009690 <xQueueGenericSend+0x208>)
 80095aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ae:	601a      	str	r2, [r3, #0]
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80095b8:	f001 ff74 	bl	800b4a4 <vPortExitCritical>
				return pdPASS;
 80095bc:	2301      	movs	r3, #1
 80095be:	e063      	b.n	8009688 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d103      	bne.n	80095ce <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80095c6:	f001 ff6d 	bl	800b4a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80095ca:	2300      	movs	r3, #0
 80095cc:	e05c      	b.n	8009688 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80095ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d106      	bne.n	80095e2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80095d4:	f107 0314 	add.w	r3, r7, #20
 80095d8:	4618      	mov	r0, r3
 80095da:	f001 f87b 	bl	800a6d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80095de:	2301      	movs	r3, #1
 80095e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80095e2:	f001 ff5f 	bl	800b4a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80095e6:	f000 fdb3 	bl	800a150 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80095ea:	f001 ff27 	bl	800b43c <vPortEnterCritical>
 80095ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095f4:	b25b      	sxtb	r3, r3
 80095f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095fa:	d103      	bne.n	8009604 <xQueueGenericSend+0x17c>
 80095fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009606:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800960a:	b25b      	sxtb	r3, r3
 800960c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009610:	d103      	bne.n	800961a <xQueueGenericSend+0x192>
 8009612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009614:	2200      	movs	r2, #0
 8009616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800961a:	f001 ff43 	bl	800b4a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800961e:	1d3a      	adds	r2, r7, #4
 8009620:	f107 0314 	add.w	r3, r7, #20
 8009624:	4611      	mov	r1, r2
 8009626:	4618      	mov	r0, r3
 8009628:	f001 f86a 	bl	800a700 <xTaskCheckForTimeOut>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d124      	bne.n	800967c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009632:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009634:	f000 faac 	bl	8009b90 <prvIsQueueFull>
 8009638:	4603      	mov	r3, r0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d018      	beq.n	8009670 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800963e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009640:	3310      	adds	r3, #16
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	4611      	mov	r1, r2
 8009646:	4618      	mov	r0, r3
 8009648:	f000 ff62 	bl	800a510 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800964c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800964e:	f000 fa37 	bl	8009ac0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009652:	f000 fd8b 	bl	800a16c <xTaskResumeAll>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	f47f af7c 	bne.w	8009556 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800965e:	4b0c      	ldr	r3, [pc, #48]	; (8009690 <xQueueGenericSend+0x208>)
 8009660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009664:	601a      	str	r2, [r3, #0]
 8009666:	f3bf 8f4f 	dsb	sy
 800966a:	f3bf 8f6f 	isb	sy
 800966e:	e772      	b.n	8009556 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009672:	f000 fa25 	bl	8009ac0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009676:	f000 fd79 	bl	800a16c <xTaskResumeAll>
 800967a:	e76c      	b.n	8009556 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800967c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800967e:	f000 fa1f 	bl	8009ac0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009682:	f000 fd73 	bl	800a16c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009686:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009688:	4618      	mov	r0, r3
 800968a:	3738      	adds	r7, #56	; 0x38
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	e000ed04 	.word	0xe000ed04

08009694 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b08e      	sub	sp, #56	; 0x38
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
 80096a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80096a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d10c      	bne.n	80096c6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80096ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b0:	b672      	cpsid	i
 80096b2:	f383 8811 	msr	BASEPRI, r3
 80096b6:	f3bf 8f6f 	isb	sy
 80096ba:	f3bf 8f4f 	dsb	sy
 80096be:	b662      	cpsie	i
 80096c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80096c2:	bf00      	nop
 80096c4:	e7fe      	b.n	80096c4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d103      	bne.n	80096d4 <xQueueGenericSendFromISR+0x40>
 80096cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d101      	bne.n	80096d8 <xQueueGenericSendFromISR+0x44>
 80096d4:	2301      	movs	r3, #1
 80096d6:	e000      	b.n	80096da <xQueueGenericSendFromISR+0x46>
 80096d8:	2300      	movs	r3, #0
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d10c      	bne.n	80096f8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80096de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e2:	b672      	cpsid	i
 80096e4:	f383 8811 	msr	BASEPRI, r3
 80096e8:	f3bf 8f6f 	isb	sy
 80096ec:	f3bf 8f4f 	dsb	sy
 80096f0:	b662      	cpsie	i
 80096f2:	623b      	str	r3, [r7, #32]
}
 80096f4:	bf00      	nop
 80096f6:	e7fe      	b.n	80096f6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	2b02      	cmp	r3, #2
 80096fc:	d103      	bne.n	8009706 <xQueueGenericSendFromISR+0x72>
 80096fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009702:	2b01      	cmp	r3, #1
 8009704:	d101      	bne.n	800970a <xQueueGenericSendFromISR+0x76>
 8009706:	2301      	movs	r3, #1
 8009708:	e000      	b.n	800970c <xQueueGenericSendFromISR+0x78>
 800970a:	2300      	movs	r3, #0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d10c      	bne.n	800972a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8009710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009714:	b672      	cpsid	i
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	b662      	cpsie	i
 8009724:	61fb      	str	r3, [r7, #28]
}
 8009726:	bf00      	nop
 8009728:	e7fe      	b.n	8009728 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800972a:	f001 ff6f 	bl	800b60c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800972e:	f3ef 8211 	mrs	r2, BASEPRI
 8009732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009736:	b672      	cpsid	i
 8009738:	f383 8811 	msr	BASEPRI, r3
 800973c:	f3bf 8f6f 	isb	sy
 8009740:	f3bf 8f4f 	dsb	sy
 8009744:	b662      	cpsie	i
 8009746:	61ba      	str	r2, [r7, #24]
 8009748:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800974a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800974c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800974e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009750:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009756:	429a      	cmp	r2, r3
 8009758:	d302      	bcc.n	8009760 <xQueueGenericSendFromISR+0xcc>
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	2b02      	cmp	r3, #2
 800975e:	d12c      	bne.n	80097ba <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009762:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800976a:	683a      	ldr	r2, [r7, #0]
 800976c:	68b9      	ldr	r1, [r7, #8]
 800976e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009770:	f000 f916 	bl	80099a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009774:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009778:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800977c:	d112      	bne.n	80097a4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800977e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009782:	2b00      	cmp	r3, #0
 8009784:	d016      	beq.n	80097b4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009788:	3324      	adds	r3, #36	; 0x24
 800978a:	4618      	mov	r0, r3
 800978c:	f000 ff14 	bl	800a5b8 <xTaskRemoveFromEventList>
 8009790:	4603      	mov	r3, r0
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00e      	beq.n	80097b4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d00b      	beq.n	80097b4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	601a      	str	r2, [r3, #0]
 80097a2:	e007      	b.n	80097b4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80097a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80097a8:	3301      	adds	r3, #1
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	b25a      	sxtb	r2, r3
 80097ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80097b4:	2301      	movs	r3, #1
 80097b6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80097b8:	e001      	b.n	80097be <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80097ba:	2300      	movs	r3, #0
 80097bc:	637b      	str	r3, [r7, #52]	; 0x34
 80097be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80097c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3738      	adds	r7, #56	; 0x38
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}

080097d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b08c      	sub	sp, #48	; 0x30
 80097d8:	af00      	add	r7, sp, #0
 80097da:	60f8      	str	r0, [r7, #12]
 80097dc:	60b9      	str	r1, [r7, #8]
 80097de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80097e0:	2300      	movs	r3, #0
 80097e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80097e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d10c      	bne.n	8009808 <xQueueReceive+0x34>
	__asm volatile
 80097ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f2:	b672      	cpsid	i
 80097f4:	f383 8811 	msr	BASEPRI, r3
 80097f8:	f3bf 8f6f 	isb	sy
 80097fc:	f3bf 8f4f 	dsb	sy
 8009800:	b662      	cpsie	i
 8009802:	623b      	str	r3, [r7, #32]
}
 8009804:	bf00      	nop
 8009806:	e7fe      	b.n	8009806 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d103      	bne.n	8009816 <xQueueReceive+0x42>
 800980e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009812:	2b00      	cmp	r3, #0
 8009814:	d101      	bne.n	800981a <xQueueReceive+0x46>
 8009816:	2301      	movs	r3, #1
 8009818:	e000      	b.n	800981c <xQueueReceive+0x48>
 800981a:	2300      	movs	r3, #0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10c      	bne.n	800983a <xQueueReceive+0x66>
	__asm volatile
 8009820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009824:	b672      	cpsid	i
 8009826:	f383 8811 	msr	BASEPRI, r3
 800982a:	f3bf 8f6f 	isb	sy
 800982e:	f3bf 8f4f 	dsb	sy
 8009832:	b662      	cpsie	i
 8009834:	61fb      	str	r3, [r7, #28]
}
 8009836:	bf00      	nop
 8009838:	e7fe      	b.n	8009838 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800983a:	f001 f8af 	bl	800a99c <xTaskGetSchedulerState>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d102      	bne.n	800984a <xQueueReceive+0x76>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d101      	bne.n	800984e <xQueueReceive+0x7a>
 800984a:	2301      	movs	r3, #1
 800984c:	e000      	b.n	8009850 <xQueueReceive+0x7c>
 800984e:	2300      	movs	r3, #0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10c      	bne.n	800986e <xQueueReceive+0x9a>
	__asm volatile
 8009854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009858:	b672      	cpsid	i
 800985a:	f383 8811 	msr	BASEPRI, r3
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	f3bf 8f4f 	dsb	sy
 8009866:	b662      	cpsie	i
 8009868:	61bb      	str	r3, [r7, #24]
}
 800986a:	bf00      	nop
 800986c:	e7fe      	b.n	800986c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800986e:	f001 fde5 	bl	800b43c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009876:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987a:	2b00      	cmp	r3, #0
 800987c:	d01f      	beq.n	80098be <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800987e:	68b9      	ldr	r1, [r7, #8]
 8009880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009882:	f000 f8f7 	bl	8009a74 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009888:	1e5a      	subs	r2, r3, #1
 800988a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800988c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800988e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00f      	beq.n	80098b6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009898:	3310      	adds	r3, #16
 800989a:	4618      	mov	r0, r3
 800989c:	f000 fe8c 	bl	800a5b8 <xTaskRemoveFromEventList>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d007      	beq.n	80098b6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80098a6:	4b3d      	ldr	r3, [pc, #244]	; (800999c <xQueueReceive+0x1c8>)
 80098a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ac:	601a      	str	r2, [r3, #0]
 80098ae:	f3bf 8f4f 	dsb	sy
 80098b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80098b6:	f001 fdf5 	bl	800b4a4 <vPortExitCritical>
				return pdPASS;
 80098ba:	2301      	movs	r3, #1
 80098bc:	e069      	b.n	8009992 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d103      	bne.n	80098cc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80098c4:	f001 fdee 	bl	800b4a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80098c8:	2300      	movs	r3, #0
 80098ca:	e062      	b.n	8009992 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d106      	bne.n	80098e0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098d2:	f107 0310 	add.w	r3, r7, #16
 80098d6:	4618      	mov	r0, r3
 80098d8:	f000 fefc 	bl	800a6d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80098dc:	2301      	movs	r3, #1
 80098de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80098e0:	f001 fde0 	bl	800b4a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80098e4:	f000 fc34 	bl	800a150 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80098e8:	f001 fda8 	bl	800b43c <vPortEnterCritical>
 80098ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098f2:	b25b      	sxtb	r3, r3
 80098f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098f8:	d103      	bne.n	8009902 <xQueueReceive+0x12e>
 80098fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fc:	2200      	movs	r2, #0
 80098fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009904:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009908:	b25b      	sxtb	r3, r3
 800990a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800990e:	d103      	bne.n	8009918 <xQueueReceive+0x144>
 8009910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009912:	2200      	movs	r2, #0
 8009914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009918:	f001 fdc4 	bl	800b4a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800991c:	1d3a      	adds	r2, r7, #4
 800991e:	f107 0310 	add.w	r3, r7, #16
 8009922:	4611      	mov	r1, r2
 8009924:	4618      	mov	r0, r3
 8009926:	f000 feeb 	bl	800a700 <xTaskCheckForTimeOut>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d123      	bne.n	8009978 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009930:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009932:	f000 f917 	bl	8009b64 <prvIsQueueEmpty>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d017      	beq.n	800996c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800993c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993e:	3324      	adds	r3, #36	; 0x24
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	4611      	mov	r1, r2
 8009944:	4618      	mov	r0, r3
 8009946:	f000 fde3 	bl	800a510 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800994a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800994c:	f000 f8b8 	bl	8009ac0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009950:	f000 fc0c 	bl	800a16c <xTaskResumeAll>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d189      	bne.n	800986e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800995a:	4b10      	ldr	r3, [pc, #64]	; (800999c <xQueueReceive+0x1c8>)
 800995c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009960:	601a      	str	r2, [r3, #0]
 8009962:	f3bf 8f4f 	dsb	sy
 8009966:	f3bf 8f6f 	isb	sy
 800996a:	e780      	b.n	800986e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800996c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800996e:	f000 f8a7 	bl	8009ac0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009972:	f000 fbfb 	bl	800a16c <xTaskResumeAll>
 8009976:	e77a      	b.n	800986e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800997a:	f000 f8a1 	bl	8009ac0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800997e:	f000 fbf5 	bl	800a16c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009984:	f000 f8ee 	bl	8009b64 <prvIsQueueEmpty>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	f43f af6f 	beq.w	800986e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009990:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009992:	4618      	mov	r0, r3
 8009994:	3730      	adds	r7, #48	; 0x30
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	e000ed04 	.word	0xe000ed04

080099a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b086      	sub	sp, #24
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80099ac:	2300      	movs	r3, #0
 80099ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d10d      	bne.n	80099da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d14d      	bne.n	8009a62 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f001 f804 	bl	800a9d8 <xTaskPriorityDisinherit>
 80099d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2200      	movs	r2, #0
 80099d6:	609a      	str	r2, [r3, #8]
 80099d8:	e043      	b.n	8009a62 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d119      	bne.n	8009a14 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6858      	ldr	r0, [r3, #4]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099e8:	461a      	mov	r2, r3
 80099ea:	68b9      	ldr	r1, [r7, #8]
 80099ec:	f012 ffd3 	bl	801c996 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	685a      	ldr	r2, [r3, #4]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f8:	441a      	add	r2, r3
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	685a      	ldr	r2, [r3, #4]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d32b      	bcc.n	8009a62 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	605a      	str	r2, [r3, #4]
 8009a12:	e026      	b.n	8009a62 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	68d8      	ldr	r0, [r3, #12]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	68b9      	ldr	r1, [r7, #8]
 8009a20:	f012 ffb9 	bl	801c996 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	68da      	ldr	r2, [r3, #12]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2c:	425b      	negs	r3, r3
 8009a2e:	441a      	add	r2, r3
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	68da      	ldr	r2, [r3, #12]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d207      	bcs.n	8009a50 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	689a      	ldr	r2, [r3, #8]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a48:	425b      	negs	r3, r3
 8009a4a:	441a      	add	r2, r3
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2b02      	cmp	r3, #2
 8009a54:	d105      	bne.n	8009a62 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a56:	693b      	ldr	r3, [r7, #16]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d002      	beq.n	8009a62 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	1c5a      	adds	r2, r3, #1
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009a6a:	697b      	ldr	r3, [r7, #20]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3718      	adds	r7, #24
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d018      	beq.n	8009ab8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	68da      	ldr	r2, [r3, #12]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a8e:	441a      	add	r2, r3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	68da      	ldr	r2, [r3, #12]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d303      	bcc.n	8009aa8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	68d9      	ldr	r1, [r3, #12]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	6838      	ldr	r0, [r7, #0]
 8009ab4:	f012 ff6f 	bl	801c996 <memcpy>
	}
}
 8009ab8:	bf00      	nop
 8009aba:	3708      	adds	r7, #8
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009ac8:	f001 fcb8 	bl	800b43c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ad2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ad4:	e011      	b.n	8009afa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d012      	beq.n	8009b04 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	3324      	adds	r3, #36	; 0x24
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f000 fd68 	bl	800a5b8 <xTaskRemoveFromEventList>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d001      	beq.n	8009af2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009aee:	f000 fe6d 	bl	800a7cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009af2:	7bfb      	ldrb	r3, [r7, #15]
 8009af4:	3b01      	subs	r3, #1
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009afa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	dce9      	bgt.n	8009ad6 <prvUnlockQueue+0x16>
 8009b02:	e000      	b.n	8009b06 <prvUnlockQueue+0x46>
					break;
 8009b04:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	22ff      	movs	r2, #255	; 0xff
 8009b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009b0e:	f001 fcc9 	bl	800b4a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009b12:	f001 fc93 	bl	800b43c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009b1c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b1e:	e011      	b.n	8009b44 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	691b      	ldr	r3, [r3, #16]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d012      	beq.n	8009b4e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	3310      	adds	r3, #16
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f000 fd43 	bl	800a5b8 <xTaskRemoveFromEventList>
 8009b32:	4603      	mov	r3, r0
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d001      	beq.n	8009b3c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009b38:	f000 fe48 	bl	800a7cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009b3c:	7bbb      	ldrb	r3, [r7, #14]
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009b44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	dce9      	bgt.n	8009b20 <prvUnlockQueue+0x60>
 8009b4c:	e000      	b.n	8009b50 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009b4e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	22ff      	movs	r2, #255	; 0xff
 8009b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009b58:	f001 fca4 	bl	800b4a4 <vPortExitCritical>
}
 8009b5c:	bf00      	nop
 8009b5e:	3710      	adds	r7, #16
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b6c:	f001 fc66 	bl	800b43c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d102      	bne.n	8009b7e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	60fb      	str	r3, [r7, #12]
 8009b7c:	e001      	b.n	8009b82 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009b82:	f001 fc8f 	bl	800b4a4 <vPortExitCritical>

	return xReturn;
 8009b86:	68fb      	ldr	r3, [r7, #12]
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3710      	adds	r7, #16
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009b98:	f001 fc50 	bl	800b43c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d102      	bne.n	8009bae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	60fb      	str	r3, [r7, #12]
 8009bac:	e001      	b.n	8009bb2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009bb2:	f001 fc77 	bl	800b4a4 <vPortExitCritical>

	return xReturn;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b085      	sub	sp, #20
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bca:	2300      	movs	r3, #0
 8009bcc:	60fb      	str	r3, [r7, #12]
 8009bce:	e014      	b.n	8009bfa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009bd0:	4a0f      	ldr	r2, [pc, #60]	; (8009c10 <vQueueAddToRegistry+0x50>)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d10b      	bne.n	8009bf4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009bdc:	490c      	ldr	r1, [pc, #48]	; (8009c10 <vQueueAddToRegistry+0x50>)
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	683a      	ldr	r2, [r7, #0]
 8009be2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009be6:	4a0a      	ldr	r2, [pc, #40]	; (8009c10 <vQueueAddToRegistry+0x50>)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	00db      	lsls	r3, r3, #3
 8009bec:	4413      	add	r3, r2
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009bf2:	e006      	b.n	8009c02 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	60fb      	str	r3, [r7, #12]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2b07      	cmp	r3, #7
 8009bfe:	d9e7      	bls.n	8009bd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009c00:	bf00      	nop
 8009c02:	bf00      	nop
 8009c04:	3714      	adds	r7, #20
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	20007688 	.word	0x20007688

08009c14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b086      	sub	sp, #24
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009c24:	f001 fc0a 	bl	800b43c <vPortEnterCritical>
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c2e:	b25b      	sxtb	r3, r3
 8009c30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c34:	d103      	bne.n	8009c3e <vQueueWaitForMessageRestricted+0x2a>
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c44:	b25b      	sxtb	r3, r3
 8009c46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c4a:	d103      	bne.n	8009c54 <vQueueWaitForMessageRestricted+0x40>
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c54:	f001 fc26 	bl	800b4a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d106      	bne.n	8009c6e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	3324      	adds	r3, #36	; 0x24
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	68b9      	ldr	r1, [r7, #8]
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f000 fc77 	bl	800a55c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009c6e:	6978      	ldr	r0, [r7, #20]
 8009c70:	f7ff ff26 	bl	8009ac0 <prvUnlockQueue>
	}
 8009c74:	bf00      	nop
 8009c76:	3718      	adds	r7, #24
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b08e      	sub	sp, #56	; 0x38
 8009c80:	af04      	add	r7, sp, #16
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
 8009c88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d10c      	bne.n	8009caa <xTaskCreateStatic+0x2e>
	__asm volatile
 8009c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c94:	b672      	cpsid	i
 8009c96:	f383 8811 	msr	BASEPRI, r3
 8009c9a:	f3bf 8f6f 	isb	sy
 8009c9e:	f3bf 8f4f 	dsb	sy
 8009ca2:	b662      	cpsie	i
 8009ca4:	623b      	str	r3, [r7, #32]
}
 8009ca6:	bf00      	nop
 8009ca8:	e7fe      	b.n	8009ca8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8009caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d10c      	bne.n	8009cca <xTaskCreateStatic+0x4e>
	__asm volatile
 8009cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb4:	b672      	cpsid	i
 8009cb6:	f383 8811 	msr	BASEPRI, r3
 8009cba:	f3bf 8f6f 	isb	sy
 8009cbe:	f3bf 8f4f 	dsb	sy
 8009cc2:	b662      	cpsie	i
 8009cc4:	61fb      	str	r3, [r7, #28]
}
 8009cc6:	bf00      	nop
 8009cc8:	e7fe      	b.n	8009cc8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009cca:	23a8      	movs	r3, #168	; 0xa8
 8009ccc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009cce:	693b      	ldr	r3, [r7, #16]
 8009cd0:	2ba8      	cmp	r3, #168	; 0xa8
 8009cd2:	d00c      	beq.n	8009cee <xTaskCreateStatic+0x72>
	__asm volatile
 8009cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd8:	b672      	cpsid	i
 8009cda:	f383 8811 	msr	BASEPRI, r3
 8009cde:	f3bf 8f6f 	isb	sy
 8009ce2:	f3bf 8f4f 	dsb	sy
 8009ce6:	b662      	cpsie	i
 8009ce8:	61bb      	str	r3, [r7, #24]
}
 8009cea:	bf00      	nop
 8009cec:	e7fe      	b.n	8009cec <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009cee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d01e      	beq.n	8009d34 <xTaskCreateStatic+0xb8>
 8009cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d01b      	beq.n	8009d34 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cfe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d04:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d08:	2202      	movs	r2, #2
 8009d0a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d0e:	2300      	movs	r3, #0
 8009d10:	9303      	str	r3, [sp, #12]
 8009d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d14:	9302      	str	r3, [sp, #8]
 8009d16:	f107 0314 	add.w	r3, r7, #20
 8009d1a:	9301      	str	r3, [sp, #4]
 8009d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d1e:	9300      	str	r3, [sp, #0]
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	68b9      	ldr	r1, [r7, #8]
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	f000 f850 	bl	8009dcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009d2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009d2e:	f000 f8f5 	bl	8009f1c <prvAddNewTaskToReadyList>
 8009d32:	e001      	b.n	8009d38 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8009d34:	2300      	movs	r3, #0
 8009d36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009d38:	697b      	ldr	r3, [r7, #20]
	}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3728      	adds	r7, #40	; 0x28
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b08c      	sub	sp, #48	; 0x30
 8009d46:	af04      	add	r7, sp, #16
 8009d48:	60f8      	str	r0, [r7, #12]
 8009d4a:	60b9      	str	r1, [r7, #8]
 8009d4c:	603b      	str	r3, [r7, #0]
 8009d4e:	4613      	mov	r3, r2
 8009d50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009d52:	88fb      	ldrh	r3, [r7, #6]
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	4618      	mov	r0, r3
 8009d58:	f001 fc9c 	bl	800b694 <pvPortMalloc>
 8009d5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00e      	beq.n	8009d82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009d64:	20a8      	movs	r0, #168	; 0xa8
 8009d66:	f001 fc95 	bl	800b694 <pvPortMalloc>
 8009d6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d003      	beq.n	8009d7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009d72:	69fb      	ldr	r3, [r7, #28]
 8009d74:	697a      	ldr	r2, [r7, #20]
 8009d76:	631a      	str	r2, [r3, #48]	; 0x30
 8009d78:	e005      	b.n	8009d86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009d7a:	6978      	ldr	r0, [r7, #20]
 8009d7c:	f001 fd54 	bl	800b828 <vPortFree>
 8009d80:	e001      	b.n	8009d86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009d82:	2300      	movs	r3, #0
 8009d84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d017      	beq.n	8009dbc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009d94:	88fa      	ldrh	r2, [r7, #6]
 8009d96:	2300      	movs	r3, #0
 8009d98:	9303      	str	r3, [sp, #12]
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	9302      	str	r3, [sp, #8]
 8009d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da0:	9301      	str	r3, [sp, #4]
 8009da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	68b9      	ldr	r1, [r7, #8]
 8009daa:	68f8      	ldr	r0, [r7, #12]
 8009dac:	f000 f80e 	bl	8009dcc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009db0:	69f8      	ldr	r0, [r7, #28]
 8009db2:	f000 f8b3 	bl	8009f1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009db6:	2301      	movs	r3, #1
 8009db8:	61bb      	str	r3, [r7, #24]
 8009dba:	e002      	b.n	8009dc2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009dbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dc0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009dc2:	69bb      	ldr	r3, [r7, #24]
	}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3720      	adds	r7, #32
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b088      	sub	sp, #32
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
 8009dd8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ddc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	461a      	mov	r2, r3
 8009de4:	21a5      	movs	r1, #165	; 0xa5
 8009de6:	f012 fca5 	bl	801c734 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dee:	6879      	ldr	r1, [r7, #4]
 8009df0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009df4:	440b      	add	r3, r1
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	4413      	add	r3, r2
 8009dfa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009dfc:	69bb      	ldr	r3, [r7, #24]
 8009dfe:	f023 0307 	bic.w	r3, r3, #7
 8009e02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	f003 0307 	and.w	r3, r3, #7
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00c      	beq.n	8009e28 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8009e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e12:	b672      	cpsid	i
 8009e14:	f383 8811 	msr	BASEPRI, r3
 8009e18:	f3bf 8f6f 	isb	sy
 8009e1c:	f3bf 8f4f 	dsb	sy
 8009e20:	b662      	cpsie	i
 8009e22:	617b      	str	r3, [r7, #20]
}
 8009e24:	bf00      	nop
 8009e26:	e7fe      	b.n	8009e26 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d01f      	beq.n	8009e6e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e2e:	2300      	movs	r3, #0
 8009e30:	61fb      	str	r3, [r7, #28]
 8009e32:	e012      	b.n	8009e5a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	4413      	add	r3, r2
 8009e3a:	7819      	ldrb	r1, [r3, #0]
 8009e3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e3e:	69fb      	ldr	r3, [r7, #28]
 8009e40:	4413      	add	r3, r2
 8009e42:	3334      	adds	r3, #52	; 0x34
 8009e44:	460a      	mov	r2, r1
 8009e46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009e48:	68ba      	ldr	r2, [r7, #8]
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	781b      	ldrb	r3, [r3, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d006      	beq.n	8009e62 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	3301      	adds	r3, #1
 8009e58:	61fb      	str	r3, [r7, #28]
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	2b0f      	cmp	r3, #15
 8009e5e:	d9e9      	bls.n	8009e34 <prvInitialiseNewTask+0x68>
 8009e60:	e000      	b.n	8009e64 <prvInitialiseNewTask+0x98>
			{
				break;
 8009e62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e66:	2200      	movs	r2, #0
 8009e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009e6c:	e003      	b.n	8009e76 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e78:	2b37      	cmp	r3, #55	; 0x37
 8009e7a:	d901      	bls.n	8009e80 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009e7c:	2337      	movs	r3, #55	; 0x37
 8009e7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e8a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8e:	2200      	movs	r2, #0
 8009e90:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e94:	3304      	adds	r3, #4
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7ff f952 	bl	8009140 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9e:	3318      	adds	r3, #24
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7ff f94d 	bl	8009140 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eaa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ece:	3354      	adds	r3, #84	; 0x54
 8009ed0:	224c      	movs	r2, #76	; 0x4c
 8009ed2:	2100      	movs	r1, #0
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f012 fc2d 	bl	801c734 <memset>
 8009eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009edc:	4a0c      	ldr	r2, [pc, #48]	; (8009f10 <prvInitialiseNewTask+0x144>)
 8009ede:	659a      	str	r2, [r3, #88]	; 0x58
 8009ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee2:	4a0c      	ldr	r2, [pc, #48]	; (8009f14 <prvInitialiseNewTask+0x148>)
 8009ee4:	65da      	str	r2, [r3, #92]	; 0x5c
 8009ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee8:	4a0b      	ldr	r2, [pc, #44]	; (8009f18 <prvInitialiseNewTask+0x14c>)
 8009eea:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009eec:	683a      	ldr	r2, [r7, #0]
 8009eee:	68f9      	ldr	r1, [r7, #12]
 8009ef0:	69b8      	ldr	r0, [r7, #24]
 8009ef2:	f001 f993 	bl	800b21c <pxPortInitialiseStack>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d002      	beq.n	8009f08 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f06:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f08:	bf00      	nop
 8009f0a:	3720      	adds	r7, #32
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	20010ba8 	.word	0x20010ba8
 8009f14:	20010c10 	.word	0x20010c10
 8009f18:	20010c78 	.word	0x20010c78

08009f1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b082      	sub	sp, #8
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009f24:	f001 fa8a 	bl	800b43c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009f28:	4b2d      	ldr	r3, [pc, #180]	; (8009fe0 <prvAddNewTaskToReadyList+0xc4>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	3301      	adds	r3, #1
 8009f2e:	4a2c      	ldr	r2, [pc, #176]	; (8009fe0 <prvAddNewTaskToReadyList+0xc4>)
 8009f30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f32:	4b2c      	ldr	r3, [pc, #176]	; (8009fe4 <prvAddNewTaskToReadyList+0xc8>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d109      	bne.n	8009f4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009f3a:	4a2a      	ldr	r2, [pc, #168]	; (8009fe4 <prvAddNewTaskToReadyList+0xc8>)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009f40:	4b27      	ldr	r3, [pc, #156]	; (8009fe0 <prvAddNewTaskToReadyList+0xc4>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d110      	bne.n	8009f6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009f48:	f000 fc64 	bl	800a814 <prvInitialiseTaskLists>
 8009f4c:	e00d      	b.n	8009f6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009f4e:	4b26      	ldr	r3, [pc, #152]	; (8009fe8 <prvAddNewTaskToReadyList+0xcc>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d109      	bne.n	8009f6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009f56:	4b23      	ldr	r3, [pc, #140]	; (8009fe4 <prvAddNewTaskToReadyList+0xc8>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d802      	bhi.n	8009f6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009f64:	4a1f      	ldr	r2, [pc, #124]	; (8009fe4 <prvAddNewTaskToReadyList+0xc8>)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009f6a:	4b20      	ldr	r3, [pc, #128]	; (8009fec <prvAddNewTaskToReadyList+0xd0>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	3301      	adds	r3, #1
 8009f70:	4a1e      	ldr	r2, [pc, #120]	; (8009fec <prvAddNewTaskToReadyList+0xd0>)
 8009f72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009f74:	4b1d      	ldr	r3, [pc, #116]	; (8009fec <prvAddNewTaskToReadyList+0xd0>)
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f80:	4b1b      	ldr	r3, [pc, #108]	; (8009ff0 <prvAddNewTaskToReadyList+0xd4>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d903      	bls.n	8009f90 <prvAddNewTaskToReadyList+0x74>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8c:	4a18      	ldr	r2, [pc, #96]	; (8009ff0 <prvAddNewTaskToReadyList+0xd4>)
 8009f8e:	6013      	str	r3, [r2, #0]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f94:	4613      	mov	r3, r2
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	4413      	add	r3, r2
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	4a15      	ldr	r2, [pc, #84]	; (8009ff4 <prvAddNewTaskToReadyList+0xd8>)
 8009f9e:	441a      	add	r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	3304      	adds	r3, #4
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	4610      	mov	r0, r2
 8009fa8:	f7ff f8d7 	bl	800915a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009fac:	f001 fa7a 	bl	800b4a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009fb0:	4b0d      	ldr	r3, [pc, #52]	; (8009fe8 <prvAddNewTaskToReadyList+0xcc>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d00e      	beq.n	8009fd6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009fb8:	4b0a      	ldr	r3, [pc, #40]	; (8009fe4 <prvAddNewTaskToReadyList+0xc8>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d207      	bcs.n	8009fd6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009fc6:	4b0c      	ldr	r3, [pc, #48]	; (8009ff8 <prvAddNewTaskToReadyList+0xdc>)
 8009fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fcc:	601a      	str	r2, [r3, #0]
 8009fce:	f3bf 8f4f 	dsb	sy
 8009fd2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fd6:	bf00      	nop
 8009fd8:	3708      	adds	r7, #8
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	20007b9c 	.word	0x20007b9c
 8009fe4:	200076c8 	.word	0x200076c8
 8009fe8:	20007ba8 	.word	0x20007ba8
 8009fec:	20007bb8 	.word	0x20007bb8
 8009ff0:	20007ba4 	.word	0x20007ba4
 8009ff4:	200076cc 	.word	0x200076cc
 8009ff8:	e000ed04 	.word	0xe000ed04

08009ffc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a004:	2300      	movs	r3, #0
 800a006:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d019      	beq.n	800a042 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a00e:	4b14      	ldr	r3, [pc, #80]	; (800a060 <vTaskDelay+0x64>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00c      	beq.n	800a030 <vTaskDelay+0x34>
	__asm volatile
 800a016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01a:	b672      	cpsid	i
 800a01c:	f383 8811 	msr	BASEPRI, r3
 800a020:	f3bf 8f6f 	isb	sy
 800a024:	f3bf 8f4f 	dsb	sy
 800a028:	b662      	cpsie	i
 800a02a:	60bb      	str	r3, [r7, #8]
}
 800a02c:	bf00      	nop
 800a02e:	e7fe      	b.n	800a02e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800a030:	f000 f88e 	bl	800a150 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a034:	2100      	movs	r1, #0
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 fd40 	bl	800aabc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a03c:	f000 f896 	bl	800a16c <xTaskResumeAll>
 800a040:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d107      	bne.n	800a058 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800a048:	4b06      	ldr	r3, [pc, #24]	; (800a064 <vTaskDelay+0x68>)
 800a04a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a04e:	601a      	str	r2, [r3, #0]
 800a050:	f3bf 8f4f 	dsb	sy
 800a054:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a058:	bf00      	nop
 800a05a:	3710      	adds	r7, #16
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	20007bc4 	.word	0x20007bc4
 800a064:	e000ed04 	.word	0xe000ed04

0800a068 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b08a      	sub	sp, #40	; 0x28
 800a06c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a06e:	2300      	movs	r3, #0
 800a070:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a072:	2300      	movs	r3, #0
 800a074:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a076:	463a      	mov	r2, r7
 800a078:	1d39      	adds	r1, r7, #4
 800a07a:	f107 0308 	add.w	r3, r7, #8
 800a07e:	4618      	mov	r0, r3
 800a080:	f7ff f80a 	bl	8009098 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a084:	6839      	ldr	r1, [r7, #0]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	9202      	str	r2, [sp, #8]
 800a08c:	9301      	str	r3, [sp, #4]
 800a08e:	2300      	movs	r3, #0
 800a090:	9300      	str	r3, [sp, #0]
 800a092:	2300      	movs	r3, #0
 800a094:	460a      	mov	r2, r1
 800a096:	4926      	ldr	r1, [pc, #152]	; (800a130 <vTaskStartScheduler+0xc8>)
 800a098:	4826      	ldr	r0, [pc, #152]	; (800a134 <vTaskStartScheduler+0xcc>)
 800a09a:	f7ff fdef 	bl	8009c7c <xTaskCreateStatic>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	4a25      	ldr	r2, [pc, #148]	; (800a138 <vTaskStartScheduler+0xd0>)
 800a0a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a0a4:	4b24      	ldr	r3, [pc, #144]	; (800a138 <vTaskStartScheduler+0xd0>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d002      	beq.n	800a0b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	617b      	str	r3, [r7, #20]
 800a0b0:	e001      	b.n	800a0b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d102      	bne.n	800a0c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a0bc:	f000 fd52 	bl	800ab64 <xTimerCreateTimerTask>
 800a0c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d11d      	bne.n	800a104 <vTaskStartScheduler+0x9c>
	__asm volatile
 800a0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0cc:	b672      	cpsid	i
 800a0ce:	f383 8811 	msr	BASEPRI, r3
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	f3bf 8f4f 	dsb	sy
 800a0da:	b662      	cpsie	i
 800a0dc:	613b      	str	r3, [r7, #16]
}
 800a0de:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a0e0:	4b16      	ldr	r3, [pc, #88]	; (800a13c <vTaskStartScheduler+0xd4>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	3354      	adds	r3, #84	; 0x54
 800a0e6:	4a16      	ldr	r2, [pc, #88]	; (800a140 <vTaskStartScheduler+0xd8>)
 800a0e8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a0ea:	4b16      	ldr	r3, [pc, #88]	; (800a144 <vTaskStartScheduler+0xdc>)
 800a0ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a0f2:	4b15      	ldr	r3, [pc, #84]	; (800a148 <vTaskStartScheduler+0xe0>)
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a0f8:	4b14      	ldr	r3, [pc, #80]	; (800a14c <vTaskStartScheduler+0xe4>)
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a0fe:	f001 f91f 	bl	800b340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a102:	e010      	b.n	800a126 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a10a:	d10c      	bne.n	800a126 <vTaskStartScheduler+0xbe>
	__asm volatile
 800a10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a110:	b672      	cpsid	i
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	b662      	cpsie	i
 800a120:	60fb      	str	r3, [r7, #12]
}
 800a122:	bf00      	nop
 800a124:	e7fe      	b.n	800a124 <vTaskStartScheduler+0xbc>
}
 800a126:	bf00      	nop
 800a128:	3718      	adds	r7, #24
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	0801d7b8 	.word	0x0801d7b8
 800a134:	0800a7e5 	.word	0x0800a7e5
 800a138:	20007bc0 	.word	0x20007bc0
 800a13c:	200076c8 	.word	0x200076c8
 800a140:	200021d8 	.word	0x200021d8
 800a144:	20007bbc 	.word	0x20007bbc
 800a148:	20007ba8 	.word	0x20007ba8
 800a14c:	20007ba0 	.word	0x20007ba0

0800a150 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a150:	b480      	push	{r7}
 800a152:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a154:	4b04      	ldr	r3, [pc, #16]	; (800a168 <vTaskSuspendAll+0x18>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	3301      	adds	r3, #1
 800a15a:	4a03      	ldr	r2, [pc, #12]	; (800a168 <vTaskSuspendAll+0x18>)
 800a15c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a15e:	bf00      	nop
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr
 800a168:	20007bc4 	.word	0x20007bc4

0800a16c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a172:	2300      	movs	r3, #0
 800a174:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a176:	2300      	movs	r3, #0
 800a178:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a17a:	4b43      	ldr	r3, [pc, #268]	; (800a288 <xTaskResumeAll+0x11c>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d10c      	bne.n	800a19c <xTaskResumeAll+0x30>
	__asm volatile
 800a182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a186:	b672      	cpsid	i
 800a188:	f383 8811 	msr	BASEPRI, r3
 800a18c:	f3bf 8f6f 	isb	sy
 800a190:	f3bf 8f4f 	dsb	sy
 800a194:	b662      	cpsie	i
 800a196:	603b      	str	r3, [r7, #0]
}
 800a198:	bf00      	nop
 800a19a:	e7fe      	b.n	800a19a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a19c:	f001 f94e 	bl	800b43c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a1a0:	4b39      	ldr	r3, [pc, #228]	; (800a288 <xTaskResumeAll+0x11c>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	3b01      	subs	r3, #1
 800a1a6:	4a38      	ldr	r2, [pc, #224]	; (800a288 <xTaskResumeAll+0x11c>)
 800a1a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1aa:	4b37      	ldr	r3, [pc, #220]	; (800a288 <xTaskResumeAll+0x11c>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d162      	bne.n	800a278 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a1b2:	4b36      	ldr	r3, [pc, #216]	; (800a28c <xTaskResumeAll+0x120>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d05e      	beq.n	800a278 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a1ba:	e02f      	b.n	800a21c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1bc:	4b34      	ldr	r3, [pc, #208]	; (800a290 <xTaskResumeAll+0x124>)
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	3318      	adds	r3, #24
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7ff f823 	bl	8009214 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	3304      	adds	r3, #4
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7ff f81e 	bl	8009214 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1dc:	4b2d      	ldr	r3, [pc, #180]	; (800a294 <xTaskResumeAll+0x128>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	429a      	cmp	r2, r3
 800a1e2:	d903      	bls.n	800a1ec <xTaskResumeAll+0x80>
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e8:	4a2a      	ldr	r2, [pc, #168]	; (800a294 <xTaskResumeAll+0x128>)
 800a1ea:	6013      	str	r3, [r2, #0]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	4413      	add	r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	4a27      	ldr	r2, [pc, #156]	; (800a298 <xTaskResumeAll+0x12c>)
 800a1fa:	441a      	add	r2, r3
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	3304      	adds	r3, #4
 800a200:	4619      	mov	r1, r3
 800a202:	4610      	mov	r0, r2
 800a204:	f7fe ffa9 	bl	800915a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a20c:	4b23      	ldr	r3, [pc, #140]	; (800a29c <xTaskResumeAll+0x130>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a212:	429a      	cmp	r2, r3
 800a214:	d302      	bcc.n	800a21c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800a216:	4b22      	ldr	r3, [pc, #136]	; (800a2a0 <xTaskResumeAll+0x134>)
 800a218:	2201      	movs	r2, #1
 800a21a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a21c:	4b1c      	ldr	r3, [pc, #112]	; (800a290 <xTaskResumeAll+0x124>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d1cb      	bne.n	800a1bc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d001      	beq.n	800a22e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a22a:	f000 fb97 	bl	800a95c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a22e:	4b1d      	ldr	r3, [pc, #116]	; (800a2a4 <xTaskResumeAll+0x138>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d010      	beq.n	800a25c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a23a:	f000 f847 	bl	800a2cc <xTaskIncrementTick>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d002      	beq.n	800a24a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800a244:	4b16      	ldr	r3, [pc, #88]	; (800a2a0 <xTaskResumeAll+0x134>)
 800a246:	2201      	movs	r2, #1
 800a248:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	3b01      	subs	r3, #1
 800a24e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d1f1      	bne.n	800a23a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800a256:	4b13      	ldr	r3, [pc, #76]	; (800a2a4 <xTaskResumeAll+0x138>)
 800a258:	2200      	movs	r2, #0
 800a25a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a25c:	4b10      	ldr	r3, [pc, #64]	; (800a2a0 <xTaskResumeAll+0x134>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d009      	beq.n	800a278 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a264:	2301      	movs	r3, #1
 800a266:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a268:	4b0f      	ldr	r3, [pc, #60]	; (800a2a8 <xTaskResumeAll+0x13c>)
 800a26a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a26e:	601a      	str	r2, [r3, #0]
 800a270:	f3bf 8f4f 	dsb	sy
 800a274:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a278:	f001 f914 	bl	800b4a4 <vPortExitCritical>

	return xAlreadyYielded;
 800a27c:	68bb      	ldr	r3, [r7, #8]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	20007bc4 	.word	0x20007bc4
 800a28c:	20007b9c 	.word	0x20007b9c
 800a290:	20007b5c 	.word	0x20007b5c
 800a294:	20007ba4 	.word	0x20007ba4
 800a298:	200076cc 	.word	0x200076cc
 800a29c:	200076c8 	.word	0x200076c8
 800a2a0:	20007bb0 	.word	0x20007bb0
 800a2a4:	20007bac 	.word	0x20007bac
 800a2a8:	e000ed04 	.word	0xe000ed04

0800a2ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a2b2:	4b05      	ldr	r3, [pc, #20]	; (800a2c8 <xTaskGetTickCount+0x1c>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a2b8:	687b      	ldr	r3, [r7, #4]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	370c      	adds	r7, #12
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop
 800a2c8:	20007ba0 	.word	0x20007ba0

0800a2cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2d6:	4b50      	ldr	r3, [pc, #320]	; (800a418 <xTaskIncrementTick+0x14c>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f040 808b 	bne.w	800a3f6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a2e0:	4b4e      	ldr	r3, [pc, #312]	; (800a41c <xTaskIncrementTick+0x150>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a2e8:	4a4c      	ldr	r2, [pc, #304]	; (800a41c <xTaskIncrementTick+0x150>)
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d122      	bne.n	800a33a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800a2f4:	4b4a      	ldr	r3, [pc, #296]	; (800a420 <xTaskIncrementTick+0x154>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00c      	beq.n	800a318 <xTaskIncrementTick+0x4c>
	__asm volatile
 800a2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a302:	b672      	cpsid	i
 800a304:	f383 8811 	msr	BASEPRI, r3
 800a308:	f3bf 8f6f 	isb	sy
 800a30c:	f3bf 8f4f 	dsb	sy
 800a310:	b662      	cpsie	i
 800a312:	603b      	str	r3, [r7, #0]
}
 800a314:	bf00      	nop
 800a316:	e7fe      	b.n	800a316 <xTaskIncrementTick+0x4a>
 800a318:	4b41      	ldr	r3, [pc, #260]	; (800a420 <xTaskIncrementTick+0x154>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	60fb      	str	r3, [r7, #12]
 800a31e:	4b41      	ldr	r3, [pc, #260]	; (800a424 <xTaskIncrementTick+0x158>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a3f      	ldr	r2, [pc, #252]	; (800a420 <xTaskIncrementTick+0x154>)
 800a324:	6013      	str	r3, [r2, #0]
 800a326:	4a3f      	ldr	r2, [pc, #252]	; (800a424 <xTaskIncrementTick+0x158>)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6013      	str	r3, [r2, #0]
 800a32c:	4b3e      	ldr	r3, [pc, #248]	; (800a428 <xTaskIncrementTick+0x15c>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	3301      	adds	r3, #1
 800a332:	4a3d      	ldr	r2, [pc, #244]	; (800a428 <xTaskIncrementTick+0x15c>)
 800a334:	6013      	str	r3, [r2, #0]
 800a336:	f000 fb11 	bl	800a95c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a33a:	4b3c      	ldr	r3, [pc, #240]	; (800a42c <xTaskIncrementTick+0x160>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	693a      	ldr	r2, [r7, #16]
 800a340:	429a      	cmp	r2, r3
 800a342:	d349      	bcc.n	800a3d8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a344:	4b36      	ldr	r3, [pc, #216]	; (800a420 <xTaskIncrementTick+0x154>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d104      	bne.n	800a358 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a34e:	4b37      	ldr	r3, [pc, #220]	; (800a42c <xTaskIncrementTick+0x160>)
 800a350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a354:	601a      	str	r2, [r3, #0]
					break;
 800a356:	e03f      	b.n	800a3d8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a358:	4b31      	ldr	r3, [pc, #196]	; (800a420 <xTaskIncrementTick+0x154>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a368:	693a      	ldr	r2, [r7, #16]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d203      	bcs.n	800a378 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a370:	4a2e      	ldr	r2, [pc, #184]	; (800a42c <xTaskIncrementTick+0x160>)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a376:	e02f      	b.n	800a3d8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	3304      	adds	r3, #4
 800a37c:	4618      	mov	r0, r3
 800a37e:	f7fe ff49 	bl	8009214 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a386:	2b00      	cmp	r3, #0
 800a388:	d004      	beq.n	800a394 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	3318      	adds	r3, #24
 800a38e:	4618      	mov	r0, r3
 800a390:	f7fe ff40 	bl	8009214 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a398:	4b25      	ldr	r3, [pc, #148]	; (800a430 <xTaskIncrementTick+0x164>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d903      	bls.n	800a3a8 <xTaskIncrementTick+0xdc>
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3a4:	4a22      	ldr	r2, [pc, #136]	; (800a430 <xTaskIncrementTick+0x164>)
 800a3a6:	6013      	str	r3, [r2, #0]
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3ac:	4613      	mov	r3, r2
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	4413      	add	r3, r2
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	4a1f      	ldr	r2, [pc, #124]	; (800a434 <xTaskIncrementTick+0x168>)
 800a3b6:	441a      	add	r2, r3
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	3304      	adds	r3, #4
 800a3bc:	4619      	mov	r1, r3
 800a3be:	4610      	mov	r0, r2
 800a3c0:	f7fe fecb 	bl	800915a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3c8:	4b1b      	ldr	r3, [pc, #108]	; (800a438 <xTaskIncrementTick+0x16c>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d3b8      	bcc.n	800a344 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3d6:	e7b5      	b.n	800a344 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a3d8:	4b17      	ldr	r3, [pc, #92]	; (800a438 <xTaskIncrementTick+0x16c>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3de:	4915      	ldr	r1, [pc, #84]	; (800a434 <xTaskIncrementTick+0x168>)
 800a3e0:	4613      	mov	r3, r2
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	4413      	add	r3, r2
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	440b      	add	r3, r1
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d907      	bls.n	800a400 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	617b      	str	r3, [r7, #20]
 800a3f4:	e004      	b.n	800a400 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a3f6:	4b11      	ldr	r3, [pc, #68]	; (800a43c <xTaskIncrementTick+0x170>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	4a0f      	ldr	r2, [pc, #60]	; (800a43c <xTaskIncrementTick+0x170>)
 800a3fe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a400:	4b0f      	ldr	r3, [pc, #60]	; (800a440 <xTaskIncrementTick+0x174>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d001      	beq.n	800a40c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800a408:	2301      	movs	r3, #1
 800a40a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a40c:	697b      	ldr	r3, [r7, #20]
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3718      	adds	r7, #24
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	20007bc4 	.word	0x20007bc4
 800a41c:	20007ba0 	.word	0x20007ba0
 800a420:	20007b54 	.word	0x20007b54
 800a424:	20007b58 	.word	0x20007b58
 800a428:	20007bb4 	.word	0x20007bb4
 800a42c:	20007bbc 	.word	0x20007bbc
 800a430:	20007ba4 	.word	0x20007ba4
 800a434:	200076cc 	.word	0x200076cc
 800a438:	200076c8 	.word	0x200076c8
 800a43c:	20007bac 	.word	0x20007bac
 800a440:	20007bb0 	.word	0x20007bb0

0800a444 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a44a:	4b2b      	ldr	r3, [pc, #172]	; (800a4f8 <vTaskSwitchContext+0xb4>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d003      	beq.n	800a45a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a452:	4b2a      	ldr	r3, [pc, #168]	; (800a4fc <vTaskSwitchContext+0xb8>)
 800a454:	2201      	movs	r2, #1
 800a456:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a458:	e048      	b.n	800a4ec <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800a45a:	4b28      	ldr	r3, [pc, #160]	; (800a4fc <vTaskSwitchContext+0xb8>)
 800a45c:	2200      	movs	r2, #0
 800a45e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a460:	4b27      	ldr	r3, [pc, #156]	; (800a500 <vTaskSwitchContext+0xbc>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	60fb      	str	r3, [r7, #12]
 800a466:	e012      	b.n	800a48e <vTaskSwitchContext+0x4a>
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10c      	bne.n	800a488 <vTaskSwitchContext+0x44>
	__asm volatile
 800a46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a472:	b672      	cpsid	i
 800a474:	f383 8811 	msr	BASEPRI, r3
 800a478:	f3bf 8f6f 	isb	sy
 800a47c:	f3bf 8f4f 	dsb	sy
 800a480:	b662      	cpsie	i
 800a482:	607b      	str	r3, [r7, #4]
}
 800a484:	bf00      	nop
 800a486:	e7fe      	b.n	800a486 <vTaskSwitchContext+0x42>
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	3b01      	subs	r3, #1
 800a48c:	60fb      	str	r3, [r7, #12]
 800a48e:	491d      	ldr	r1, [pc, #116]	; (800a504 <vTaskSwitchContext+0xc0>)
 800a490:	68fa      	ldr	r2, [r7, #12]
 800a492:	4613      	mov	r3, r2
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	4413      	add	r3, r2
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	440b      	add	r3, r1
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d0e2      	beq.n	800a468 <vTaskSwitchContext+0x24>
 800a4a2:	68fa      	ldr	r2, [r7, #12]
 800a4a4:	4613      	mov	r3, r2
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	4413      	add	r3, r2
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	4a15      	ldr	r2, [pc, #84]	; (800a504 <vTaskSwitchContext+0xc0>)
 800a4ae:	4413      	add	r3, r2
 800a4b0:	60bb      	str	r3, [r7, #8]
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	685a      	ldr	r2, [r3, #4]
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	605a      	str	r2, [r3, #4]
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	685a      	ldr	r2, [r3, #4]
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	3308      	adds	r3, #8
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d104      	bne.n	800a4d2 <vTaskSwitchContext+0x8e>
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	685b      	ldr	r3, [r3, #4]
 800a4cc:	685a      	ldr	r2, [r3, #4]
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	605a      	str	r2, [r3, #4]
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	4a0b      	ldr	r2, [pc, #44]	; (800a508 <vTaskSwitchContext+0xc4>)
 800a4da:	6013      	str	r3, [r2, #0]
 800a4dc:	4a08      	ldr	r2, [pc, #32]	; (800a500 <vTaskSwitchContext+0xbc>)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a4e2:	4b09      	ldr	r3, [pc, #36]	; (800a508 <vTaskSwitchContext+0xc4>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	3354      	adds	r3, #84	; 0x54
 800a4e8:	4a08      	ldr	r2, [pc, #32]	; (800a50c <vTaskSwitchContext+0xc8>)
 800a4ea:	6013      	str	r3, [r2, #0]
}
 800a4ec:	bf00      	nop
 800a4ee:	3714      	adds	r7, #20
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr
 800a4f8:	20007bc4 	.word	0x20007bc4
 800a4fc:	20007bb0 	.word	0x20007bb0
 800a500:	20007ba4 	.word	0x20007ba4
 800a504:	200076cc 	.word	0x200076cc
 800a508:	200076c8 	.word	0x200076c8
 800a50c:	200021d8 	.word	0x200021d8

0800a510 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d10c      	bne.n	800a53a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800a520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a524:	b672      	cpsid	i
 800a526:	f383 8811 	msr	BASEPRI, r3
 800a52a:	f3bf 8f6f 	isb	sy
 800a52e:	f3bf 8f4f 	dsb	sy
 800a532:	b662      	cpsie	i
 800a534:	60fb      	str	r3, [r7, #12]
}
 800a536:	bf00      	nop
 800a538:	e7fe      	b.n	800a538 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a53a:	4b07      	ldr	r3, [pc, #28]	; (800a558 <vTaskPlaceOnEventList+0x48>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	3318      	adds	r3, #24
 800a540:	4619      	mov	r1, r3
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f7fe fe2d 	bl	80091a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a548:	2101      	movs	r1, #1
 800a54a:	6838      	ldr	r0, [r7, #0]
 800a54c:	f000 fab6 	bl	800aabc <prvAddCurrentTaskToDelayedList>
}
 800a550:	bf00      	nop
 800a552:	3710      	adds	r7, #16
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}
 800a558:	200076c8 	.word	0x200076c8

0800a55c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b086      	sub	sp, #24
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d10c      	bne.n	800a588 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800a56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a572:	b672      	cpsid	i
 800a574:	f383 8811 	msr	BASEPRI, r3
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	b662      	cpsie	i
 800a582:	617b      	str	r3, [r7, #20]
}
 800a584:	bf00      	nop
 800a586:	e7fe      	b.n	800a586 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a588:	4b0a      	ldr	r3, [pc, #40]	; (800a5b4 <vTaskPlaceOnEventListRestricted+0x58>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	3318      	adds	r3, #24
 800a58e:	4619      	mov	r1, r3
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f7fe fde2 	bl	800915a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d002      	beq.n	800a5a2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800a59c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a5a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a5a2:	6879      	ldr	r1, [r7, #4]
 800a5a4:	68b8      	ldr	r0, [r7, #8]
 800a5a6:	f000 fa89 	bl	800aabc <prvAddCurrentTaskToDelayedList>
	}
 800a5aa:	bf00      	nop
 800a5ac:	3718      	adds	r7, #24
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	200076c8 	.word	0x200076c8

0800a5b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d10c      	bne.n	800a5e8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800a5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d2:	b672      	cpsid	i
 800a5d4:	f383 8811 	msr	BASEPRI, r3
 800a5d8:	f3bf 8f6f 	isb	sy
 800a5dc:	f3bf 8f4f 	dsb	sy
 800a5e0:	b662      	cpsie	i
 800a5e2:	60fb      	str	r3, [r7, #12]
}
 800a5e4:	bf00      	nop
 800a5e6:	e7fe      	b.n	800a5e6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	3318      	adds	r3, #24
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7fe fe11 	bl	8009214 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5f2:	4b1e      	ldr	r3, [pc, #120]	; (800a66c <xTaskRemoveFromEventList+0xb4>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d11d      	bne.n	800a636 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	3304      	adds	r3, #4
 800a5fe:	4618      	mov	r0, r3
 800a600:	f7fe fe08 	bl	8009214 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a608:	4b19      	ldr	r3, [pc, #100]	; (800a670 <xTaskRemoveFromEventList+0xb8>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d903      	bls.n	800a618 <xTaskRemoveFromEventList+0x60>
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a614:	4a16      	ldr	r2, [pc, #88]	; (800a670 <xTaskRemoveFromEventList+0xb8>)
 800a616:	6013      	str	r3, [r2, #0]
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a61c:	4613      	mov	r3, r2
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4413      	add	r3, r2
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	4a13      	ldr	r2, [pc, #76]	; (800a674 <xTaskRemoveFromEventList+0xbc>)
 800a626:	441a      	add	r2, r3
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	3304      	adds	r3, #4
 800a62c:	4619      	mov	r1, r3
 800a62e:	4610      	mov	r0, r2
 800a630:	f7fe fd93 	bl	800915a <vListInsertEnd>
 800a634:	e005      	b.n	800a642 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	3318      	adds	r3, #24
 800a63a:	4619      	mov	r1, r3
 800a63c:	480e      	ldr	r0, [pc, #56]	; (800a678 <xTaskRemoveFromEventList+0xc0>)
 800a63e:	f7fe fd8c 	bl	800915a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a646:	4b0d      	ldr	r3, [pc, #52]	; (800a67c <xTaskRemoveFromEventList+0xc4>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d905      	bls.n	800a65c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a650:	2301      	movs	r3, #1
 800a652:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a654:	4b0a      	ldr	r3, [pc, #40]	; (800a680 <xTaskRemoveFromEventList+0xc8>)
 800a656:	2201      	movs	r2, #1
 800a658:	601a      	str	r2, [r3, #0]
 800a65a:	e001      	b.n	800a660 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800a65c:	2300      	movs	r3, #0
 800a65e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a660:	697b      	ldr	r3, [r7, #20]
}
 800a662:	4618      	mov	r0, r3
 800a664:	3718      	adds	r7, #24
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	20007bc4 	.word	0x20007bc4
 800a670:	20007ba4 	.word	0x20007ba4
 800a674:	200076cc 	.word	0x200076cc
 800a678:	20007b5c 	.word	0x20007b5c
 800a67c:	200076c8 	.word	0x200076c8
 800a680:	20007bb0 	.word	0x20007bb0

0800a684 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d10c      	bne.n	800a6ac <vTaskSetTimeOutState+0x28>
	__asm volatile
 800a692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a696:	b672      	cpsid	i
 800a698:	f383 8811 	msr	BASEPRI, r3
 800a69c:	f3bf 8f6f 	isb	sy
 800a6a0:	f3bf 8f4f 	dsb	sy
 800a6a4:	b662      	cpsie	i
 800a6a6:	60fb      	str	r3, [r7, #12]
}
 800a6a8:	bf00      	nop
 800a6aa:	e7fe      	b.n	800a6aa <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 800a6ac:	f000 fec6 	bl	800b43c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a6b0:	4b06      	ldr	r3, [pc, #24]	; (800a6cc <vTaskSetTimeOutState+0x48>)
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800a6b8:	4b05      	ldr	r3, [pc, #20]	; (800a6d0 <vTaskSetTimeOutState+0x4c>)
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800a6c0:	f000 fef0 	bl	800b4a4 <vPortExitCritical>
}
 800a6c4:	bf00      	nop
 800a6c6:	3710      	adds	r7, #16
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	20007bb4 	.word	0x20007bb4
 800a6d0:	20007ba0 	.word	0x20007ba0

0800a6d4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a6dc:	4b06      	ldr	r3, [pc, #24]	; (800a6f8 <vTaskInternalSetTimeOutState+0x24>)
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a6e4:	4b05      	ldr	r3, [pc, #20]	; (800a6fc <vTaskInternalSetTimeOutState+0x28>)
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	605a      	str	r2, [r3, #4]
}
 800a6ec:	bf00      	nop
 800a6ee:	370c      	adds	r7, #12
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr
 800a6f8:	20007bb4 	.word	0x20007bb4
 800a6fc:	20007ba0 	.word	0x20007ba0

0800a700 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b088      	sub	sp, #32
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10c      	bne.n	800a72a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800a710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a714:	b672      	cpsid	i
 800a716:	f383 8811 	msr	BASEPRI, r3
 800a71a:	f3bf 8f6f 	isb	sy
 800a71e:	f3bf 8f4f 	dsb	sy
 800a722:	b662      	cpsie	i
 800a724:	613b      	str	r3, [r7, #16]
}
 800a726:	bf00      	nop
 800a728:	e7fe      	b.n	800a728 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d10c      	bne.n	800a74a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800a730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a734:	b672      	cpsid	i
 800a736:	f383 8811 	msr	BASEPRI, r3
 800a73a:	f3bf 8f6f 	isb	sy
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	b662      	cpsie	i
 800a744:	60fb      	str	r3, [r7, #12]
}
 800a746:	bf00      	nop
 800a748:	e7fe      	b.n	800a748 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800a74a:	f000 fe77 	bl	800b43c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a74e:	4b1d      	ldr	r3, [pc, #116]	; (800a7c4 <xTaskCheckForTimeOut+0xc4>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	69ba      	ldr	r2, [r7, #24]
 800a75a:	1ad3      	subs	r3, r2, r3
 800a75c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a766:	d102      	bne.n	800a76e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a768:	2300      	movs	r3, #0
 800a76a:	61fb      	str	r3, [r7, #28]
 800a76c:	e023      	b.n	800a7b6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	4b15      	ldr	r3, [pc, #84]	; (800a7c8 <xTaskCheckForTimeOut+0xc8>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	429a      	cmp	r2, r3
 800a778:	d007      	beq.n	800a78a <xTaskCheckForTimeOut+0x8a>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	69ba      	ldr	r2, [r7, #24]
 800a780:	429a      	cmp	r2, r3
 800a782:	d302      	bcc.n	800a78a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a784:	2301      	movs	r3, #1
 800a786:	61fb      	str	r3, [r7, #28]
 800a788:	e015      	b.n	800a7b6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	697a      	ldr	r2, [r7, #20]
 800a790:	429a      	cmp	r2, r3
 800a792:	d20b      	bcs.n	800a7ac <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	1ad2      	subs	r2, r2, r3
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f7ff ff97 	bl	800a6d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	61fb      	str	r3, [r7, #28]
 800a7aa:	e004      	b.n	800a7b6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a7b6:	f000 fe75 	bl	800b4a4 <vPortExitCritical>

	return xReturn;
 800a7ba:	69fb      	ldr	r3, [r7, #28]
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3720      	adds	r7, #32
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	20007ba0 	.word	0x20007ba0
 800a7c8:	20007bb4 	.word	0x20007bb4

0800a7cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a7d0:	4b03      	ldr	r3, [pc, #12]	; (800a7e0 <vTaskMissedYield+0x14>)
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	601a      	str	r2, [r3, #0]
}
 800a7d6:	bf00      	nop
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr
 800a7e0:	20007bb0 	.word	0x20007bb0

0800a7e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a7ec:	f000 f852 	bl	800a894 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a7f0:	4b06      	ldr	r3, [pc, #24]	; (800a80c <prvIdleTask+0x28>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d9f9      	bls.n	800a7ec <prvIdleTask+0x8>
			{
				taskYIELD();
 800a7f8:	4b05      	ldr	r3, [pc, #20]	; (800a810 <prvIdleTask+0x2c>)
 800a7fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7fe:	601a      	str	r2, [r3, #0]
 800a800:	f3bf 8f4f 	dsb	sy
 800a804:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a808:	e7f0      	b.n	800a7ec <prvIdleTask+0x8>
 800a80a:	bf00      	nop
 800a80c:	200076cc 	.word	0x200076cc
 800a810:	e000ed04 	.word	0xe000ed04

0800a814 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a81a:	2300      	movs	r3, #0
 800a81c:	607b      	str	r3, [r7, #4]
 800a81e:	e00c      	b.n	800a83a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	4613      	mov	r3, r2
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	4413      	add	r3, r2
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	4a12      	ldr	r2, [pc, #72]	; (800a874 <prvInitialiseTaskLists+0x60>)
 800a82c:	4413      	add	r3, r2
 800a82e:	4618      	mov	r0, r3
 800a830:	f7fe fc66 	bl	8009100 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	3301      	adds	r3, #1
 800a838:	607b      	str	r3, [r7, #4]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2b37      	cmp	r3, #55	; 0x37
 800a83e:	d9ef      	bls.n	800a820 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a840:	480d      	ldr	r0, [pc, #52]	; (800a878 <prvInitialiseTaskLists+0x64>)
 800a842:	f7fe fc5d 	bl	8009100 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a846:	480d      	ldr	r0, [pc, #52]	; (800a87c <prvInitialiseTaskLists+0x68>)
 800a848:	f7fe fc5a 	bl	8009100 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a84c:	480c      	ldr	r0, [pc, #48]	; (800a880 <prvInitialiseTaskLists+0x6c>)
 800a84e:	f7fe fc57 	bl	8009100 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a852:	480c      	ldr	r0, [pc, #48]	; (800a884 <prvInitialiseTaskLists+0x70>)
 800a854:	f7fe fc54 	bl	8009100 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a858:	480b      	ldr	r0, [pc, #44]	; (800a888 <prvInitialiseTaskLists+0x74>)
 800a85a:	f7fe fc51 	bl	8009100 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a85e:	4b0b      	ldr	r3, [pc, #44]	; (800a88c <prvInitialiseTaskLists+0x78>)
 800a860:	4a05      	ldr	r2, [pc, #20]	; (800a878 <prvInitialiseTaskLists+0x64>)
 800a862:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a864:	4b0a      	ldr	r3, [pc, #40]	; (800a890 <prvInitialiseTaskLists+0x7c>)
 800a866:	4a05      	ldr	r2, [pc, #20]	; (800a87c <prvInitialiseTaskLists+0x68>)
 800a868:	601a      	str	r2, [r3, #0]
}
 800a86a:	bf00      	nop
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	200076cc 	.word	0x200076cc
 800a878:	20007b2c 	.word	0x20007b2c
 800a87c:	20007b40 	.word	0x20007b40
 800a880:	20007b5c 	.word	0x20007b5c
 800a884:	20007b70 	.word	0x20007b70
 800a888:	20007b88 	.word	0x20007b88
 800a88c:	20007b54 	.word	0x20007b54
 800a890:	20007b58 	.word	0x20007b58

0800a894 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a89a:	e019      	b.n	800a8d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a89c:	f000 fdce 	bl	800b43c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8a0:	4b10      	ldr	r3, [pc, #64]	; (800a8e4 <prvCheckTasksWaitingTermination+0x50>)
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	3304      	adds	r3, #4
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7fe fcb1 	bl	8009214 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a8b2:	4b0d      	ldr	r3, [pc, #52]	; (800a8e8 <prvCheckTasksWaitingTermination+0x54>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	3b01      	subs	r3, #1
 800a8b8:	4a0b      	ldr	r2, [pc, #44]	; (800a8e8 <prvCheckTasksWaitingTermination+0x54>)
 800a8ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a8bc:	4b0b      	ldr	r3, [pc, #44]	; (800a8ec <prvCheckTasksWaitingTermination+0x58>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	3b01      	subs	r3, #1
 800a8c2:	4a0a      	ldr	r2, [pc, #40]	; (800a8ec <prvCheckTasksWaitingTermination+0x58>)
 800a8c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a8c6:	f000 fded 	bl	800b4a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 f810 	bl	800a8f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a8d0:	4b06      	ldr	r3, [pc, #24]	; (800a8ec <prvCheckTasksWaitingTermination+0x58>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d1e1      	bne.n	800a89c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a8d8:	bf00      	nop
 800a8da:	bf00      	nop
 800a8dc:	3708      	adds	r7, #8
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	20007b70 	.word	0x20007b70
 800a8e8:	20007b9c 	.word	0x20007b9c
 800a8ec:	20007b84 	.word	0x20007b84

0800a8f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	3354      	adds	r3, #84	; 0x54
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f011 ff79 	bl	801c7f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d108      	bne.n	800a91e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a910:	4618      	mov	r0, r3
 800a912:	f000 ff89 	bl	800b828 <vPortFree>
				vPortFree( pxTCB );
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 ff86 	bl	800b828 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a91c:	e01a      	b.n	800a954 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a924:	2b01      	cmp	r3, #1
 800a926:	d103      	bne.n	800a930 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f000 ff7d 	bl	800b828 <vPortFree>
	}
 800a92e:	e011      	b.n	800a954 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a936:	2b02      	cmp	r3, #2
 800a938:	d00c      	beq.n	800a954 <prvDeleteTCB+0x64>
	__asm volatile
 800a93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93e:	b672      	cpsid	i
 800a940:	f383 8811 	msr	BASEPRI, r3
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	f3bf 8f4f 	dsb	sy
 800a94c:	b662      	cpsie	i
 800a94e:	60fb      	str	r3, [r7, #12]
}
 800a950:	bf00      	nop
 800a952:	e7fe      	b.n	800a952 <prvDeleteTCB+0x62>
	}
 800a954:	bf00      	nop
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a962:	4b0c      	ldr	r3, [pc, #48]	; (800a994 <prvResetNextTaskUnblockTime+0x38>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d104      	bne.n	800a976 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a96c:	4b0a      	ldr	r3, [pc, #40]	; (800a998 <prvResetNextTaskUnblockTime+0x3c>)
 800a96e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a972:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a974:	e008      	b.n	800a988 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a976:	4b07      	ldr	r3, [pc, #28]	; (800a994 <prvResetNextTaskUnblockTime+0x38>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	68db      	ldr	r3, [r3, #12]
 800a97c:	68db      	ldr	r3, [r3, #12]
 800a97e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	4a04      	ldr	r2, [pc, #16]	; (800a998 <prvResetNextTaskUnblockTime+0x3c>)
 800a986:	6013      	str	r3, [r2, #0]
}
 800a988:	bf00      	nop
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr
 800a994:	20007b54 	.word	0x20007b54
 800a998:	20007bbc 	.word	0x20007bbc

0800a99c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a99c:	b480      	push	{r7}
 800a99e:	b083      	sub	sp, #12
 800a9a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a9a2:	4b0b      	ldr	r3, [pc, #44]	; (800a9d0 <xTaskGetSchedulerState+0x34>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d102      	bne.n	800a9b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	607b      	str	r3, [r7, #4]
 800a9ae:	e008      	b.n	800a9c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9b0:	4b08      	ldr	r3, [pc, #32]	; (800a9d4 <xTaskGetSchedulerState+0x38>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d102      	bne.n	800a9be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a9b8:	2302      	movs	r3, #2
 800a9ba:	607b      	str	r3, [r7, #4]
 800a9bc:	e001      	b.n	800a9c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a9c2:	687b      	ldr	r3, [r7, #4]
	}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr
 800a9d0:	20007ba8 	.word	0x20007ba8
 800a9d4:	20007bc4 	.word	0x20007bc4

0800a9d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b086      	sub	sp, #24
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d05a      	beq.n	800aaa4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a9ee:	4b30      	ldr	r3, [pc, #192]	; (800aab0 <xTaskPriorityDisinherit+0xd8>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	693a      	ldr	r2, [r7, #16]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d00c      	beq.n	800aa12 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800a9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fc:	b672      	cpsid	i
 800a9fe:	f383 8811 	msr	BASEPRI, r3
 800aa02:	f3bf 8f6f 	isb	sy
 800aa06:	f3bf 8f4f 	dsb	sy
 800aa0a:	b662      	cpsie	i
 800aa0c:	60fb      	str	r3, [r7, #12]
}
 800aa0e:	bf00      	nop
 800aa10:	e7fe      	b.n	800aa10 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d10c      	bne.n	800aa34 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800aa1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa1e:	b672      	cpsid	i
 800aa20:	f383 8811 	msr	BASEPRI, r3
 800aa24:	f3bf 8f6f 	isb	sy
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	b662      	cpsie	i
 800aa2e:	60bb      	str	r3, [r7, #8]
}
 800aa30:	bf00      	nop
 800aa32:	e7fe      	b.n	800aa32 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa38:	1e5a      	subs	r2, r3, #1
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d02c      	beq.n	800aaa4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d128      	bne.n	800aaa4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	3304      	adds	r3, #4
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7fe fbdc 	bl	8009214 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa68:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aa70:	693b      	ldr	r3, [r7, #16]
 800aa72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa74:	4b0f      	ldr	r3, [pc, #60]	; (800aab4 <xTaskPriorityDisinherit+0xdc>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	d903      	bls.n	800aa84 <xTaskPriorityDisinherit+0xac>
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa80:	4a0c      	ldr	r2, [pc, #48]	; (800aab4 <xTaskPriorityDisinherit+0xdc>)
 800aa82:	6013      	str	r3, [r2, #0]
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa88:	4613      	mov	r3, r2
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	4413      	add	r3, r2
 800aa8e:	009b      	lsls	r3, r3, #2
 800aa90:	4a09      	ldr	r2, [pc, #36]	; (800aab8 <xTaskPriorityDisinherit+0xe0>)
 800aa92:	441a      	add	r2, r3
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	3304      	adds	r3, #4
 800aa98:	4619      	mov	r1, r3
 800aa9a:	4610      	mov	r0, r2
 800aa9c:	f7fe fb5d 	bl	800915a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aaa4:	697b      	ldr	r3, [r7, #20]
	}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3718      	adds	r7, #24
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	200076c8 	.word	0x200076c8
 800aab4:	20007ba4 	.word	0x20007ba4
 800aab8:	200076cc 	.word	0x200076cc

0800aabc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aac6:	4b21      	ldr	r3, [pc, #132]	; (800ab4c <prvAddCurrentTaskToDelayedList+0x90>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aacc:	4b20      	ldr	r3, [pc, #128]	; (800ab50 <prvAddCurrentTaskToDelayedList+0x94>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	3304      	adds	r3, #4
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7fe fb9e 	bl	8009214 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aade:	d10a      	bne.n	800aaf6 <prvAddCurrentTaskToDelayedList+0x3a>
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d007      	beq.n	800aaf6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aae6:	4b1a      	ldr	r3, [pc, #104]	; (800ab50 <prvAddCurrentTaskToDelayedList+0x94>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	3304      	adds	r3, #4
 800aaec:	4619      	mov	r1, r3
 800aaee:	4819      	ldr	r0, [pc, #100]	; (800ab54 <prvAddCurrentTaskToDelayedList+0x98>)
 800aaf0:	f7fe fb33 	bl	800915a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aaf4:	e026      	b.n	800ab44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aaf6:	68fa      	ldr	r2, [r7, #12]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4413      	add	r3, r2
 800aafc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aafe:	4b14      	ldr	r3, [pc, #80]	; (800ab50 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	68ba      	ldr	r2, [r7, #8]
 800ab04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ab06:	68ba      	ldr	r2, [r7, #8]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d209      	bcs.n	800ab22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab0e:	4b12      	ldr	r3, [pc, #72]	; (800ab58 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	4b0f      	ldr	r3, [pc, #60]	; (800ab50 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	3304      	adds	r3, #4
 800ab18:	4619      	mov	r1, r3
 800ab1a:	4610      	mov	r0, r2
 800ab1c:	f7fe fb41 	bl	80091a2 <vListInsert>
}
 800ab20:	e010      	b.n	800ab44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab22:	4b0e      	ldr	r3, [pc, #56]	; (800ab5c <prvAddCurrentTaskToDelayedList+0xa0>)
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	4b0a      	ldr	r3, [pc, #40]	; (800ab50 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	3304      	adds	r3, #4
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	4610      	mov	r0, r2
 800ab30:	f7fe fb37 	bl	80091a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ab34:	4b0a      	ldr	r3, [pc, #40]	; (800ab60 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68ba      	ldr	r2, [r7, #8]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d202      	bcs.n	800ab44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ab3e:	4a08      	ldr	r2, [pc, #32]	; (800ab60 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	6013      	str	r3, [r2, #0]
}
 800ab44:	bf00      	nop
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	20007ba0 	.word	0x20007ba0
 800ab50:	200076c8 	.word	0x200076c8
 800ab54:	20007b88 	.word	0x20007b88
 800ab58:	20007b58 	.word	0x20007b58
 800ab5c:	20007b54 	.word	0x20007b54
 800ab60:	20007bbc 	.word	0x20007bbc

0800ab64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b08a      	sub	sp, #40	; 0x28
 800ab68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ab6e:	f000 fb15 	bl	800b19c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ab72:	4b1d      	ldr	r3, [pc, #116]	; (800abe8 <xTimerCreateTimerTask+0x84>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d021      	beq.n	800abbe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ab82:	1d3a      	adds	r2, r7, #4
 800ab84:	f107 0108 	add.w	r1, r7, #8
 800ab88:	f107 030c 	add.w	r3, r7, #12
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7fe fa9d 	bl	80090cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ab92:	6879      	ldr	r1, [r7, #4]
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	68fa      	ldr	r2, [r7, #12]
 800ab98:	9202      	str	r2, [sp, #8]
 800ab9a:	9301      	str	r3, [sp, #4]
 800ab9c:	2302      	movs	r3, #2
 800ab9e:	9300      	str	r3, [sp, #0]
 800aba0:	2300      	movs	r3, #0
 800aba2:	460a      	mov	r2, r1
 800aba4:	4911      	ldr	r1, [pc, #68]	; (800abec <xTimerCreateTimerTask+0x88>)
 800aba6:	4812      	ldr	r0, [pc, #72]	; (800abf0 <xTimerCreateTimerTask+0x8c>)
 800aba8:	f7ff f868 	bl	8009c7c <xTaskCreateStatic>
 800abac:	4603      	mov	r3, r0
 800abae:	4a11      	ldr	r2, [pc, #68]	; (800abf4 <xTimerCreateTimerTask+0x90>)
 800abb0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800abb2:	4b10      	ldr	r3, [pc, #64]	; (800abf4 <xTimerCreateTimerTask+0x90>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d001      	beq.n	800abbe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800abba:	2301      	movs	r3, #1
 800abbc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d10c      	bne.n	800abde <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800abc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc8:	b672      	cpsid	i
 800abca:	f383 8811 	msr	BASEPRI, r3
 800abce:	f3bf 8f6f 	isb	sy
 800abd2:	f3bf 8f4f 	dsb	sy
 800abd6:	b662      	cpsie	i
 800abd8:	613b      	str	r3, [r7, #16]
}
 800abda:	bf00      	nop
 800abdc:	e7fe      	b.n	800abdc <xTimerCreateTimerTask+0x78>
	return xReturn;
 800abde:	697b      	ldr	r3, [r7, #20]
}
 800abe0:	4618      	mov	r0, r3
 800abe2:	3718      	adds	r7, #24
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	20007bf8 	.word	0x20007bf8
 800abec:	0801d7c0 	.word	0x0801d7c0
 800abf0:	0800ad35 	.word	0x0800ad35
 800abf4:	20007bfc 	.word	0x20007bfc

0800abf8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b08a      	sub	sp, #40	; 0x28
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	60f8      	str	r0, [r7, #12]
 800ac00:	60b9      	str	r1, [r7, #8]
 800ac02:	607a      	str	r2, [r7, #4]
 800ac04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ac06:	2300      	movs	r3, #0
 800ac08:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d10c      	bne.n	800ac2a <xTimerGenericCommand+0x32>
	__asm volatile
 800ac10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac14:	b672      	cpsid	i
 800ac16:	f383 8811 	msr	BASEPRI, r3
 800ac1a:	f3bf 8f6f 	isb	sy
 800ac1e:	f3bf 8f4f 	dsb	sy
 800ac22:	b662      	cpsie	i
 800ac24:	623b      	str	r3, [r7, #32]
}
 800ac26:	bf00      	nop
 800ac28:	e7fe      	b.n	800ac28 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ac2a:	4b1a      	ldr	r3, [pc, #104]	; (800ac94 <xTimerGenericCommand+0x9c>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d02a      	beq.n	800ac88 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	2b05      	cmp	r3, #5
 800ac42:	dc18      	bgt.n	800ac76 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ac44:	f7ff feaa 	bl	800a99c <xTaskGetSchedulerState>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b02      	cmp	r3, #2
 800ac4c:	d109      	bne.n	800ac62 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ac4e:	4b11      	ldr	r3, [pc, #68]	; (800ac94 <xTimerGenericCommand+0x9c>)
 800ac50:	6818      	ldr	r0, [r3, #0]
 800ac52:	f107 0110 	add.w	r1, r7, #16
 800ac56:	2300      	movs	r3, #0
 800ac58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac5a:	f7fe fc15 	bl	8009488 <xQueueGenericSend>
 800ac5e:	6278      	str	r0, [r7, #36]	; 0x24
 800ac60:	e012      	b.n	800ac88 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ac62:	4b0c      	ldr	r3, [pc, #48]	; (800ac94 <xTimerGenericCommand+0x9c>)
 800ac64:	6818      	ldr	r0, [r3, #0]
 800ac66:	f107 0110 	add.w	r1, r7, #16
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f7fe fc0b 	bl	8009488 <xQueueGenericSend>
 800ac72:	6278      	str	r0, [r7, #36]	; 0x24
 800ac74:	e008      	b.n	800ac88 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ac76:	4b07      	ldr	r3, [pc, #28]	; (800ac94 <xTimerGenericCommand+0x9c>)
 800ac78:	6818      	ldr	r0, [r3, #0]
 800ac7a:	f107 0110 	add.w	r1, r7, #16
 800ac7e:	2300      	movs	r3, #0
 800ac80:	683a      	ldr	r2, [r7, #0]
 800ac82:	f7fe fd07 	bl	8009694 <xQueueGenericSendFromISR>
 800ac86:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ac88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3728      	adds	r7, #40	; 0x28
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	20007bf8 	.word	0x20007bf8

0800ac98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b088      	sub	sp, #32
 800ac9c:	af02      	add	r7, sp, #8
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aca2:	4b23      	ldr	r3, [pc, #140]	; (800ad30 <prvProcessExpiredTimer+0x98>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	3304      	adds	r3, #4
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7fe faaf 	bl	8009214 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acbc:	f003 0304 	and.w	r3, r3, #4
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d024      	beq.n	800ad0e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	699a      	ldr	r2, [r3, #24]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	18d1      	adds	r1, r2, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	683a      	ldr	r2, [r7, #0]
 800acd0:	6978      	ldr	r0, [r7, #20]
 800acd2:	f000 f8d3 	bl	800ae7c <prvInsertTimerInActiveList>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d021      	beq.n	800ad20 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800acdc:	2300      	movs	r3, #0
 800acde:	9300      	str	r3, [sp, #0]
 800ace0:	2300      	movs	r3, #0
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	2100      	movs	r1, #0
 800ace6:	6978      	ldr	r0, [r7, #20]
 800ace8:	f7ff ff86 	bl	800abf8 <xTimerGenericCommand>
 800acec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800acee:	693b      	ldr	r3, [r7, #16]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d115      	bne.n	800ad20 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800acf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf8:	b672      	cpsid	i
 800acfa:	f383 8811 	msr	BASEPRI, r3
 800acfe:	f3bf 8f6f 	isb	sy
 800ad02:	f3bf 8f4f 	dsb	sy
 800ad06:	b662      	cpsie	i
 800ad08:	60fb      	str	r3, [r7, #12]
}
 800ad0a:	bf00      	nop
 800ad0c:	e7fe      	b.n	800ad0c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad14:	f023 0301 	bic.w	r3, r3, #1
 800ad18:	b2da      	uxtb	r2, r3
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	6a1b      	ldr	r3, [r3, #32]
 800ad24:	6978      	ldr	r0, [r7, #20]
 800ad26:	4798      	blx	r3
}
 800ad28:	bf00      	nop
 800ad2a:	3718      	adds	r7, #24
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}
 800ad30:	20007bf0 	.word	0x20007bf0

0800ad34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad3c:	f107 0308 	add.w	r3, r7, #8
 800ad40:	4618      	mov	r0, r3
 800ad42:	f000 f857 	bl	800adf4 <prvGetNextExpireTime>
 800ad46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	68f8      	ldr	r0, [r7, #12]
 800ad4e:	f000 f803 	bl	800ad58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ad52:	f000 f8d5 	bl	800af00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ad56:	e7f1      	b.n	800ad3c <prvTimerTask+0x8>

0800ad58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ad62:	f7ff f9f5 	bl	800a150 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ad66:	f107 0308 	add.w	r3, r7, #8
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f000 f866 	bl	800ae3c <prvSampleTimeNow>
 800ad70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d130      	bne.n	800adda <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d10a      	bne.n	800ad94 <prvProcessTimerOrBlockTask+0x3c>
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d806      	bhi.n	800ad94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ad86:	f7ff f9f1 	bl	800a16c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ad8a:	68f9      	ldr	r1, [r7, #12]
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f7ff ff83 	bl	800ac98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ad92:	e024      	b.n	800adde <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d008      	beq.n	800adac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ad9a:	4b13      	ldr	r3, [pc, #76]	; (800ade8 <prvProcessTimerOrBlockTask+0x90>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d101      	bne.n	800ada8 <prvProcessTimerOrBlockTask+0x50>
 800ada4:	2301      	movs	r3, #1
 800ada6:	e000      	b.n	800adaa <prvProcessTimerOrBlockTask+0x52>
 800ada8:	2300      	movs	r3, #0
 800adaa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800adac:	4b0f      	ldr	r3, [pc, #60]	; (800adec <prvProcessTimerOrBlockTask+0x94>)
 800adae:	6818      	ldr	r0, [r3, #0]
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	1ad3      	subs	r3, r2, r3
 800adb6:	683a      	ldr	r2, [r7, #0]
 800adb8:	4619      	mov	r1, r3
 800adba:	f7fe ff2b 	bl	8009c14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800adbe:	f7ff f9d5 	bl	800a16c <xTaskResumeAll>
 800adc2:	4603      	mov	r3, r0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d10a      	bne.n	800adde <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800adc8:	4b09      	ldr	r3, [pc, #36]	; (800adf0 <prvProcessTimerOrBlockTask+0x98>)
 800adca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800adce:	601a      	str	r2, [r3, #0]
 800add0:	f3bf 8f4f 	dsb	sy
 800add4:	f3bf 8f6f 	isb	sy
}
 800add8:	e001      	b.n	800adde <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800adda:	f7ff f9c7 	bl	800a16c <xTaskResumeAll>
}
 800adde:	bf00      	nop
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	20007bf4 	.word	0x20007bf4
 800adec:	20007bf8 	.word	0x20007bf8
 800adf0:	e000ed04 	.word	0xe000ed04

0800adf4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800adf4:	b480      	push	{r7}
 800adf6:	b085      	sub	sp, #20
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800adfc:	4b0e      	ldr	r3, [pc, #56]	; (800ae38 <prvGetNextExpireTime+0x44>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d101      	bne.n	800ae0a <prvGetNextExpireTime+0x16>
 800ae06:	2201      	movs	r2, #1
 800ae08:	e000      	b.n	800ae0c <prvGetNextExpireTime+0x18>
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d105      	bne.n	800ae24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ae18:	4b07      	ldr	r3, [pc, #28]	; (800ae38 <prvGetNextExpireTime+0x44>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	68db      	ldr	r3, [r3, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	60fb      	str	r3, [r7, #12]
 800ae22:	e001      	b.n	800ae28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ae24:	2300      	movs	r3, #0
 800ae26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ae28:	68fb      	ldr	r3, [r7, #12]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3714      	adds	r7, #20
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr
 800ae36:	bf00      	nop
 800ae38:	20007bf0 	.word	0x20007bf0

0800ae3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ae44:	f7ff fa32 	bl	800a2ac <xTaskGetTickCount>
 800ae48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ae4a:	4b0b      	ldr	r3, [pc, #44]	; (800ae78 <prvSampleTimeNow+0x3c>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	68fa      	ldr	r2, [r7, #12]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d205      	bcs.n	800ae60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ae54:	f000 f93c 	bl	800b0d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	601a      	str	r2, [r3, #0]
 800ae5e:	e002      	b.n	800ae66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ae66:	4a04      	ldr	r2, [pc, #16]	; (800ae78 <prvSampleTimeNow+0x3c>)
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	20007c00 	.word	0x20007c00

0800ae7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b086      	sub	sp, #24
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	607a      	str	r2, [r7, #4]
 800ae88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	68ba      	ldr	r2, [r7, #8]
 800ae92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	68fa      	ldr	r2, [r7, #12]
 800ae98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ae9a:	68ba      	ldr	r2, [r7, #8]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d812      	bhi.n	800aec8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aea2:	687a      	ldr	r2, [r7, #4]
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	1ad2      	subs	r2, r2, r3
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	699b      	ldr	r3, [r3, #24]
 800aeac:	429a      	cmp	r2, r3
 800aeae:	d302      	bcc.n	800aeb6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	617b      	str	r3, [r7, #20]
 800aeb4:	e01b      	b.n	800aeee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aeb6:	4b10      	ldr	r3, [pc, #64]	; (800aef8 <prvInsertTimerInActiveList+0x7c>)
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	3304      	adds	r3, #4
 800aebe:	4619      	mov	r1, r3
 800aec0:	4610      	mov	r0, r2
 800aec2:	f7fe f96e 	bl	80091a2 <vListInsert>
 800aec6:	e012      	b.n	800aeee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aec8:	687a      	ldr	r2, [r7, #4]
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d206      	bcs.n	800aede <prvInsertTimerInActiveList+0x62>
 800aed0:	68ba      	ldr	r2, [r7, #8]
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d302      	bcc.n	800aede <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aed8:	2301      	movs	r3, #1
 800aeda:	617b      	str	r3, [r7, #20]
 800aedc:	e007      	b.n	800aeee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aede:	4b07      	ldr	r3, [pc, #28]	; (800aefc <prvInsertTimerInActiveList+0x80>)
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	3304      	adds	r3, #4
 800aee6:	4619      	mov	r1, r3
 800aee8:	4610      	mov	r0, r2
 800aeea:	f7fe f95a 	bl	80091a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aeee:	697b      	ldr	r3, [r7, #20]
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3718      	adds	r7, #24
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	20007bf4 	.word	0x20007bf4
 800aefc:	20007bf0 	.word	0x20007bf0

0800af00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b08e      	sub	sp, #56	; 0x38
 800af04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af06:	e0d0      	b.n	800b0aa <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	da1a      	bge.n	800af44 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800af0e:	1d3b      	adds	r3, r7, #4
 800af10:	3304      	adds	r3, #4
 800af12:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800af14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af16:	2b00      	cmp	r3, #0
 800af18:	d10c      	bne.n	800af34 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800af1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1e:	b672      	cpsid	i
 800af20:	f383 8811 	msr	BASEPRI, r3
 800af24:	f3bf 8f6f 	isb	sy
 800af28:	f3bf 8f4f 	dsb	sy
 800af2c:	b662      	cpsie	i
 800af2e:	61fb      	str	r3, [r7, #28]
}
 800af30:	bf00      	nop
 800af32:	e7fe      	b.n	800af32 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800af34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af3a:	6850      	ldr	r0, [r2, #4]
 800af3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af3e:	6892      	ldr	r2, [r2, #8]
 800af40:	4611      	mov	r1, r2
 800af42:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2b00      	cmp	r3, #0
 800af48:	f2c0 80af 	blt.w	800b0aa <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800af50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af52:	695b      	ldr	r3, [r3, #20]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d004      	beq.n	800af62 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5a:	3304      	adds	r3, #4
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7fe f959 	bl	8009214 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af62:	463b      	mov	r3, r7
 800af64:	4618      	mov	r0, r3
 800af66:	f7ff ff69 	bl	800ae3c <prvSampleTimeNow>
 800af6a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2b09      	cmp	r3, #9
 800af70:	f200 809a 	bhi.w	800b0a8 <prvProcessReceivedCommands+0x1a8>
 800af74:	a201      	add	r2, pc, #4	; (adr r2, 800af7c <prvProcessReceivedCommands+0x7c>)
 800af76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af7a:	bf00      	nop
 800af7c:	0800afa5 	.word	0x0800afa5
 800af80:	0800afa5 	.word	0x0800afa5
 800af84:	0800afa5 	.word	0x0800afa5
 800af88:	0800b01d 	.word	0x0800b01d
 800af8c:	0800b031 	.word	0x0800b031
 800af90:	0800b07f 	.word	0x0800b07f
 800af94:	0800afa5 	.word	0x0800afa5
 800af98:	0800afa5 	.word	0x0800afa5
 800af9c:	0800b01d 	.word	0x0800b01d
 800afa0:	0800b031 	.word	0x0800b031
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800afa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afaa:	f043 0301 	orr.w	r3, r3, #1
 800afae:	b2da      	uxtb	r2, r3
 800afb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800afb6:	68ba      	ldr	r2, [r7, #8]
 800afb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afba:	699b      	ldr	r3, [r3, #24]
 800afbc:	18d1      	adds	r1, r2, r3
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afc4:	f7ff ff5a 	bl	800ae7c <prvInsertTimerInActiveList>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d06d      	beq.n	800b0aa <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd0:	6a1b      	ldr	r3, [r3, #32]
 800afd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afd4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800afd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800afdc:	f003 0304 	and.w	r3, r3, #4
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d062      	beq.n	800b0aa <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800afe4:	68ba      	ldr	r2, [r7, #8]
 800afe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe8:	699b      	ldr	r3, [r3, #24]
 800afea:	441a      	add	r2, r3
 800afec:	2300      	movs	r3, #0
 800afee:	9300      	str	r3, [sp, #0]
 800aff0:	2300      	movs	r3, #0
 800aff2:	2100      	movs	r1, #0
 800aff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aff6:	f7ff fdff 	bl	800abf8 <xTimerGenericCommand>
 800affa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800affc:	6a3b      	ldr	r3, [r7, #32]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d153      	bne.n	800b0aa <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800b002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b006:	b672      	cpsid	i
 800b008:	f383 8811 	msr	BASEPRI, r3
 800b00c:	f3bf 8f6f 	isb	sy
 800b010:	f3bf 8f4f 	dsb	sy
 800b014:	b662      	cpsie	i
 800b016:	61bb      	str	r3, [r7, #24]
}
 800b018:	bf00      	nop
 800b01a:	e7fe      	b.n	800b01a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b022:	f023 0301 	bic.w	r3, r3, #1
 800b026:	b2da      	uxtb	r2, r3
 800b028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b02e:	e03c      	b.n	800b0aa <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b032:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b036:	f043 0301 	orr.w	r3, r3, #1
 800b03a:	b2da      	uxtb	r2, r3
 800b03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b042:	68ba      	ldr	r2, [r7, #8]
 800b044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b046:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04a:	699b      	ldr	r3, [r3, #24]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d10c      	bne.n	800b06a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800b050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b054:	b672      	cpsid	i
 800b056:	f383 8811 	msr	BASEPRI, r3
 800b05a:	f3bf 8f6f 	isb	sy
 800b05e:	f3bf 8f4f 	dsb	sy
 800b062:	b662      	cpsie	i
 800b064:	617b      	str	r3, [r7, #20]
}
 800b066:	bf00      	nop
 800b068:	e7fe      	b.n	800b068 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06c:	699a      	ldr	r2, [r3, #24]
 800b06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b070:	18d1      	adds	r1, r2, r3
 800b072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b078:	f7ff ff00 	bl	800ae7c <prvInsertTimerInActiveList>
					break;
 800b07c:	e015      	b.n	800b0aa <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b080:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b084:	f003 0302 	and.w	r3, r3, #2
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d103      	bne.n	800b094 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800b08c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b08e:	f000 fbcb 	bl	800b828 <vPortFree>
 800b092:	e00a      	b.n	800b0aa <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b096:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b09a:	f023 0301 	bic.w	r3, r3, #1
 800b09e:	b2da      	uxtb	r2, r3
 800b0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b0a6:	e000      	b.n	800b0aa <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800b0a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b0aa:	4b08      	ldr	r3, [pc, #32]	; (800b0cc <prvProcessReceivedCommands+0x1cc>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	1d39      	adds	r1, r7, #4
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7fe fb8e 	bl	80097d4 <xQueueReceive>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	f47f af24 	bne.w	800af08 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b0c0:	bf00      	nop
 800b0c2:	bf00      	nop
 800b0c4:	3730      	adds	r7, #48	; 0x30
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
 800b0ca:	bf00      	nop
 800b0cc:	20007bf8 	.word	0x20007bf8

0800b0d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b088      	sub	sp, #32
 800b0d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b0d6:	e04a      	b.n	800b16e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0d8:	4b2e      	ldr	r3, [pc, #184]	; (800b194 <prvSwitchTimerLists+0xc4>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	68db      	ldr	r3, [r3, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0e2:	4b2c      	ldr	r3, [pc, #176]	; (800b194 <prvSwitchTimerLists+0xc4>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	3304      	adds	r3, #4
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7fe f88f 	bl	8009214 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	6a1b      	ldr	r3, [r3, #32]
 800b0fa:	68f8      	ldr	r0, [r7, #12]
 800b0fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b104:	f003 0304 	and.w	r3, r3, #4
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d030      	beq.n	800b16e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	699b      	ldr	r3, [r3, #24]
 800b110:	693a      	ldr	r2, [r7, #16]
 800b112:	4413      	add	r3, r2
 800b114:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b116:	68ba      	ldr	r2, [r7, #8]
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d90e      	bls.n	800b13c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	68ba      	ldr	r2, [r7, #8]
 800b122:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	68fa      	ldr	r2, [r7, #12]
 800b128:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b12a:	4b1a      	ldr	r3, [pc, #104]	; (800b194 <prvSwitchTimerLists+0xc4>)
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	3304      	adds	r3, #4
 800b132:	4619      	mov	r1, r3
 800b134:	4610      	mov	r0, r2
 800b136:	f7fe f834 	bl	80091a2 <vListInsert>
 800b13a:	e018      	b.n	800b16e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b13c:	2300      	movs	r3, #0
 800b13e:	9300      	str	r3, [sp, #0]
 800b140:	2300      	movs	r3, #0
 800b142:	693a      	ldr	r2, [r7, #16]
 800b144:	2100      	movs	r1, #0
 800b146:	68f8      	ldr	r0, [r7, #12]
 800b148:	f7ff fd56 	bl	800abf8 <xTimerGenericCommand>
 800b14c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d10c      	bne.n	800b16e <prvSwitchTimerLists+0x9e>
	__asm volatile
 800b154:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b158:	b672      	cpsid	i
 800b15a:	f383 8811 	msr	BASEPRI, r3
 800b15e:	f3bf 8f6f 	isb	sy
 800b162:	f3bf 8f4f 	dsb	sy
 800b166:	b662      	cpsie	i
 800b168:	603b      	str	r3, [r7, #0]
}
 800b16a:	bf00      	nop
 800b16c:	e7fe      	b.n	800b16c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b16e:	4b09      	ldr	r3, [pc, #36]	; (800b194 <prvSwitchTimerLists+0xc4>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d1af      	bne.n	800b0d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b178:	4b06      	ldr	r3, [pc, #24]	; (800b194 <prvSwitchTimerLists+0xc4>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b17e:	4b06      	ldr	r3, [pc, #24]	; (800b198 <prvSwitchTimerLists+0xc8>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4a04      	ldr	r2, [pc, #16]	; (800b194 <prvSwitchTimerLists+0xc4>)
 800b184:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b186:	4a04      	ldr	r2, [pc, #16]	; (800b198 <prvSwitchTimerLists+0xc8>)
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	6013      	str	r3, [r2, #0]
}
 800b18c:	bf00      	nop
 800b18e:	3718      	adds	r7, #24
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}
 800b194:	20007bf0 	.word	0x20007bf0
 800b198:	20007bf4 	.word	0x20007bf4

0800b19c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b082      	sub	sp, #8
 800b1a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b1a2:	f000 f94b 	bl	800b43c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b1a6:	4b15      	ldr	r3, [pc, #84]	; (800b1fc <prvCheckForValidListAndQueue+0x60>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d120      	bne.n	800b1f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b1ae:	4814      	ldr	r0, [pc, #80]	; (800b200 <prvCheckForValidListAndQueue+0x64>)
 800b1b0:	f7fd ffa6 	bl	8009100 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b1b4:	4813      	ldr	r0, [pc, #76]	; (800b204 <prvCheckForValidListAndQueue+0x68>)
 800b1b6:	f7fd ffa3 	bl	8009100 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b1ba:	4b13      	ldr	r3, [pc, #76]	; (800b208 <prvCheckForValidListAndQueue+0x6c>)
 800b1bc:	4a10      	ldr	r2, [pc, #64]	; (800b200 <prvCheckForValidListAndQueue+0x64>)
 800b1be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b1c0:	4b12      	ldr	r3, [pc, #72]	; (800b20c <prvCheckForValidListAndQueue+0x70>)
 800b1c2:	4a10      	ldr	r2, [pc, #64]	; (800b204 <prvCheckForValidListAndQueue+0x68>)
 800b1c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	9300      	str	r3, [sp, #0]
 800b1ca:	4b11      	ldr	r3, [pc, #68]	; (800b210 <prvCheckForValidListAndQueue+0x74>)
 800b1cc:	4a11      	ldr	r2, [pc, #68]	; (800b214 <prvCheckForValidListAndQueue+0x78>)
 800b1ce:	2110      	movs	r1, #16
 800b1d0:	200a      	movs	r0, #10
 800b1d2:	f7fe f8b3 	bl	800933c <xQueueGenericCreateStatic>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	4a08      	ldr	r2, [pc, #32]	; (800b1fc <prvCheckForValidListAndQueue+0x60>)
 800b1da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b1dc:	4b07      	ldr	r3, [pc, #28]	; (800b1fc <prvCheckForValidListAndQueue+0x60>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d005      	beq.n	800b1f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b1e4:	4b05      	ldr	r3, [pc, #20]	; (800b1fc <prvCheckForValidListAndQueue+0x60>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	490b      	ldr	r1, [pc, #44]	; (800b218 <prvCheckForValidListAndQueue+0x7c>)
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7fe fce8 	bl	8009bc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1f0:	f000 f958 	bl	800b4a4 <vPortExitCritical>
}
 800b1f4:	bf00      	nop
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	20007bf8 	.word	0x20007bf8
 800b200:	20007bc8 	.word	0x20007bc8
 800b204:	20007bdc 	.word	0x20007bdc
 800b208:	20007bf0 	.word	0x20007bf0
 800b20c:	20007bf4 	.word	0x20007bf4
 800b210:	20007ca4 	.word	0x20007ca4
 800b214:	20007c04 	.word	0x20007c04
 800b218:	0801d7c8 	.word	0x0801d7c8

0800b21c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b21c:	b480      	push	{r7}
 800b21e:	b085      	sub	sp, #20
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	3b04      	subs	r3, #4
 800b22c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b234:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	3b04      	subs	r3, #4
 800b23a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	f023 0201 	bic.w	r2, r3, #1
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	3b04      	subs	r3, #4
 800b24a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b24c:	4a0c      	ldr	r2, [pc, #48]	; (800b280 <pxPortInitialiseStack+0x64>)
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	3b14      	subs	r3, #20
 800b256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b258:	687a      	ldr	r2, [r7, #4]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	3b04      	subs	r3, #4
 800b262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f06f 0202 	mvn.w	r2, #2
 800b26a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	3b20      	subs	r3, #32
 800b270:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b272:	68fb      	ldr	r3, [r7, #12]
}
 800b274:	4618      	mov	r0, r3
 800b276:	3714      	adds	r7, #20
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr
 800b280:	0800b285 	.word	0x0800b285

0800b284 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b284:	b480      	push	{r7}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b28a:	2300      	movs	r3, #0
 800b28c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b28e:	4b14      	ldr	r3, [pc, #80]	; (800b2e0 <prvTaskExitError+0x5c>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b296:	d00c      	beq.n	800b2b2 <prvTaskExitError+0x2e>
	__asm volatile
 800b298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29c:	b672      	cpsid	i
 800b29e:	f383 8811 	msr	BASEPRI, r3
 800b2a2:	f3bf 8f6f 	isb	sy
 800b2a6:	f3bf 8f4f 	dsb	sy
 800b2aa:	b662      	cpsie	i
 800b2ac:	60fb      	str	r3, [r7, #12]
}
 800b2ae:	bf00      	nop
 800b2b0:	e7fe      	b.n	800b2b0 <prvTaskExitError+0x2c>
	__asm volatile
 800b2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b6:	b672      	cpsid	i
 800b2b8:	f383 8811 	msr	BASEPRI, r3
 800b2bc:	f3bf 8f6f 	isb	sy
 800b2c0:	f3bf 8f4f 	dsb	sy
 800b2c4:	b662      	cpsie	i
 800b2c6:	60bb      	str	r3, [r7, #8]
}
 800b2c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b2ca:	bf00      	nop
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d0fc      	beq.n	800b2cc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b2d2:	bf00      	nop
 800b2d4:	bf00      	nop
 800b2d6:	3714      	adds	r7, #20
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr
 800b2e0:	20000010 	.word	0x20000010
	...

0800b2f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b2f0:	4b07      	ldr	r3, [pc, #28]	; (800b310 <pxCurrentTCBConst2>)
 800b2f2:	6819      	ldr	r1, [r3, #0]
 800b2f4:	6808      	ldr	r0, [r1, #0]
 800b2f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2fa:	f380 8809 	msr	PSP, r0
 800b2fe:	f3bf 8f6f 	isb	sy
 800b302:	f04f 0000 	mov.w	r0, #0
 800b306:	f380 8811 	msr	BASEPRI, r0
 800b30a:	4770      	bx	lr
 800b30c:	f3af 8000 	nop.w

0800b310 <pxCurrentTCBConst2>:
 800b310:	200076c8 	.word	0x200076c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b314:	bf00      	nop
 800b316:	bf00      	nop

0800b318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b318:	4808      	ldr	r0, [pc, #32]	; (800b33c <prvPortStartFirstTask+0x24>)
 800b31a:	6800      	ldr	r0, [r0, #0]
 800b31c:	6800      	ldr	r0, [r0, #0]
 800b31e:	f380 8808 	msr	MSP, r0
 800b322:	f04f 0000 	mov.w	r0, #0
 800b326:	f380 8814 	msr	CONTROL, r0
 800b32a:	b662      	cpsie	i
 800b32c:	b661      	cpsie	f
 800b32e:	f3bf 8f4f 	dsb	sy
 800b332:	f3bf 8f6f 	isb	sy
 800b336:	df00      	svc	0
 800b338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b33a:	bf00      	nop
 800b33c:	e000ed08 	.word	0xe000ed08

0800b340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b346:	4b37      	ldr	r3, [pc, #220]	; (800b424 <xPortStartScheduler+0xe4>)
 800b348:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	b2db      	uxtb	r3, r3
 800b350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	22ff      	movs	r2, #255	; 0xff
 800b356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	b2db      	uxtb	r3, r3
 800b35e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b360:	78fb      	ldrb	r3, [r7, #3]
 800b362:	b2db      	uxtb	r3, r3
 800b364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b368:	b2da      	uxtb	r2, r3
 800b36a:	4b2f      	ldr	r3, [pc, #188]	; (800b428 <xPortStartScheduler+0xe8>)
 800b36c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b36e:	4b2f      	ldr	r3, [pc, #188]	; (800b42c <xPortStartScheduler+0xec>)
 800b370:	2207      	movs	r2, #7
 800b372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b374:	e009      	b.n	800b38a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b376:	4b2d      	ldr	r3, [pc, #180]	; (800b42c <xPortStartScheduler+0xec>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	3b01      	subs	r3, #1
 800b37c:	4a2b      	ldr	r2, [pc, #172]	; (800b42c <xPortStartScheduler+0xec>)
 800b37e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b380:	78fb      	ldrb	r3, [r7, #3]
 800b382:	b2db      	uxtb	r3, r3
 800b384:	005b      	lsls	r3, r3, #1
 800b386:	b2db      	uxtb	r3, r3
 800b388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b38a:	78fb      	ldrb	r3, [r7, #3]
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b392:	2b80      	cmp	r3, #128	; 0x80
 800b394:	d0ef      	beq.n	800b376 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b396:	4b25      	ldr	r3, [pc, #148]	; (800b42c <xPortStartScheduler+0xec>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f1c3 0307 	rsb	r3, r3, #7
 800b39e:	2b04      	cmp	r3, #4
 800b3a0:	d00c      	beq.n	800b3bc <xPortStartScheduler+0x7c>
	__asm volatile
 800b3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a6:	b672      	cpsid	i
 800b3a8:	f383 8811 	msr	BASEPRI, r3
 800b3ac:	f3bf 8f6f 	isb	sy
 800b3b0:	f3bf 8f4f 	dsb	sy
 800b3b4:	b662      	cpsie	i
 800b3b6:	60bb      	str	r3, [r7, #8]
}
 800b3b8:	bf00      	nop
 800b3ba:	e7fe      	b.n	800b3ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b3bc:	4b1b      	ldr	r3, [pc, #108]	; (800b42c <xPortStartScheduler+0xec>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	021b      	lsls	r3, r3, #8
 800b3c2:	4a1a      	ldr	r2, [pc, #104]	; (800b42c <xPortStartScheduler+0xec>)
 800b3c4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b3c6:	4b19      	ldr	r3, [pc, #100]	; (800b42c <xPortStartScheduler+0xec>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b3ce:	4a17      	ldr	r2, [pc, #92]	; (800b42c <xPortStartScheduler+0xec>)
 800b3d0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	b2da      	uxtb	r2, r3
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b3da:	4b15      	ldr	r3, [pc, #84]	; (800b430 <xPortStartScheduler+0xf0>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4a14      	ldr	r2, [pc, #80]	; (800b430 <xPortStartScheduler+0xf0>)
 800b3e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b3e4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b3e6:	4b12      	ldr	r3, [pc, #72]	; (800b430 <xPortStartScheduler+0xf0>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a11      	ldr	r2, [pc, #68]	; (800b430 <xPortStartScheduler+0xf0>)
 800b3ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b3f0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b3f2:	f000 f8dd 	bl	800b5b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b3f6:	4b0f      	ldr	r3, [pc, #60]	; (800b434 <xPortStartScheduler+0xf4>)
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b3fc:	f000 f8fc 	bl	800b5f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b400:	4b0d      	ldr	r3, [pc, #52]	; (800b438 <xPortStartScheduler+0xf8>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a0c      	ldr	r2, [pc, #48]	; (800b438 <xPortStartScheduler+0xf8>)
 800b406:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b40a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b40c:	f7ff ff84 	bl	800b318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b410:	f7ff f818 	bl	800a444 <vTaskSwitchContext>
	prvTaskExitError();
 800b414:	f7ff ff36 	bl	800b284 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b418:	2300      	movs	r3, #0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3710      	adds	r7, #16
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	e000e400 	.word	0xe000e400
 800b428:	20007cf4 	.word	0x20007cf4
 800b42c:	20007cf8 	.word	0x20007cf8
 800b430:	e000ed20 	.word	0xe000ed20
 800b434:	20000010 	.word	0x20000010
 800b438:	e000ef34 	.word	0xe000ef34

0800b43c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
	__asm volatile
 800b442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b446:	b672      	cpsid	i
 800b448:	f383 8811 	msr	BASEPRI, r3
 800b44c:	f3bf 8f6f 	isb	sy
 800b450:	f3bf 8f4f 	dsb	sy
 800b454:	b662      	cpsie	i
 800b456:	607b      	str	r3, [r7, #4]
}
 800b458:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b45a:	4b10      	ldr	r3, [pc, #64]	; (800b49c <vPortEnterCritical+0x60>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	3301      	adds	r3, #1
 800b460:	4a0e      	ldr	r2, [pc, #56]	; (800b49c <vPortEnterCritical+0x60>)
 800b462:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b464:	4b0d      	ldr	r3, [pc, #52]	; (800b49c <vPortEnterCritical+0x60>)
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	2b01      	cmp	r3, #1
 800b46a:	d111      	bne.n	800b490 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b46c:	4b0c      	ldr	r3, [pc, #48]	; (800b4a0 <vPortEnterCritical+0x64>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	b2db      	uxtb	r3, r3
 800b472:	2b00      	cmp	r3, #0
 800b474:	d00c      	beq.n	800b490 <vPortEnterCritical+0x54>
	__asm volatile
 800b476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47a:	b672      	cpsid	i
 800b47c:	f383 8811 	msr	BASEPRI, r3
 800b480:	f3bf 8f6f 	isb	sy
 800b484:	f3bf 8f4f 	dsb	sy
 800b488:	b662      	cpsie	i
 800b48a:	603b      	str	r3, [r7, #0]
}
 800b48c:	bf00      	nop
 800b48e:	e7fe      	b.n	800b48e <vPortEnterCritical+0x52>
	}
}
 800b490:	bf00      	nop
 800b492:	370c      	adds	r7, #12
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr
 800b49c:	20000010 	.word	0x20000010
 800b4a0:	e000ed04 	.word	0xe000ed04

0800b4a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b083      	sub	sp, #12
 800b4a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b4aa:	4b13      	ldr	r3, [pc, #76]	; (800b4f8 <vPortExitCritical+0x54>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d10c      	bne.n	800b4cc <vPortExitCritical+0x28>
	__asm volatile
 800b4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b6:	b672      	cpsid	i
 800b4b8:	f383 8811 	msr	BASEPRI, r3
 800b4bc:	f3bf 8f6f 	isb	sy
 800b4c0:	f3bf 8f4f 	dsb	sy
 800b4c4:	b662      	cpsie	i
 800b4c6:	607b      	str	r3, [r7, #4]
}
 800b4c8:	bf00      	nop
 800b4ca:	e7fe      	b.n	800b4ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800b4cc:	4b0a      	ldr	r3, [pc, #40]	; (800b4f8 <vPortExitCritical+0x54>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	3b01      	subs	r3, #1
 800b4d2:	4a09      	ldr	r2, [pc, #36]	; (800b4f8 <vPortExitCritical+0x54>)
 800b4d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b4d6:	4b08      	ldr	r3, [pc, #32]	; (800b4f8 <vPortExitCritical+0x54>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d105      	bne.n	800b4ea <vPortExitCritical+0x46>
 800b4de:	2300      	movs	r3, #0
 800b4e0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	f383 8811 	msr	BASEPRI, r3
}
 800b4e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b4ea:	bf00      	nop
 800b4ec:	370c      	adds	r7, #12
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f4:	4770      	bx	lr
 800b4f6:	bf00      	nop
 800b4f8:	20000010 	.word	0x20000010
 800b4fc:	00000000 	.word	0x00000000

0800b500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b500:	f3ef 8009 	mrs	r0, PSP
 800b504:	f3bf 8f6f 	isb	sy
 800b508:	4b15      	ldr	r3, [pc, #84]	; (800b560 <pxCurrentTCBConst>)
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	f01e 0f10 	tst.w	lr, #16
 800b510:	bf08      	it	eq
 800b512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b51a:	6010      	str	r0, [r2, #0]
 800b51c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b520:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b524:	b672      	cpsid	i
 800b526:	f380 8811 	msr	BASEPRI, r0
 800b52a:	f3bf 8f4f 	dsb	sy
 800b52e:	f3bf 8f6f 	isb	sy
 800b532:	b662      	cpsie	i
 800b534:	f7fe ff86 	bl	800a444 <vTaskSwitchContext>
 800b538:	f04f 0000 	mov.w	r0, #0
 800b53c:	f380 8811 	msr	BASEPRI, r0
 800b540:	bc09      	pop	{r0, r3}
 800b542:	6819      	ldr	r1, [r3, #0]
 800b544:	6808      	ldr	r0, [r1, #0]
 800b546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b54a:	f01e 0f10 	tst.w	lr, #16
 800b54e:	bf08      	it	eq
 800b550:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b554:	f380 8809 	msr	PSP, r0
 800b558:	f3bf 8f6f 	isb	sy
 800b55c:	4770      	bx	lr
 800b55e:	bf00      	nop

0800b560 <pxCurrentTCBConst>:
 800b560:	200076c8 	.word	0x200076c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b564:	bf00      	nop
 800b566:	bf00      	nop

0800b568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
	__asm volatile
 800b56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b572:	b672      	cpsid	i
 800b574:	f383 8811 	msr	BASEPRI, r3
 800b578:	f3bf 8f6f 	isb	sy
 800b57c:	f3bf 8f4f 	dsb	sy
 800b580:	b662      	cpsie	i
 800b582:	607b      	str	r3, [r7, #4]
}
 800b584:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b586:	f7fe fea1 	bl	800a2cc <xTaskIncrementTick>
 800b58a:	4603      	mov	r3, r0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d003      	beq.n	800b598 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b590:	4b06      	ldr	r3, [pc, #24]	; (800b5ac <SysTick_Handler+0x44>)
 800b592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b596:	601a      	str	r2, [r3, #0]
 800b598:	2300      	movs	r3, #0
 800b59a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	f383 8811 	msr	BASEPRI, r3
}
 800b5a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b5a4:	bf00      	nop
 800b5a6:	3708      	adds	r7, #8
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}
 800b5ac:	e000ed04 	.word	0xe000ed04

0800b5b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b5b4:	4b0b      	ldr	r3, [pc, #44]	; (800b5e4 <vPortSetupTimerInterrupt+0x34>)
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b5ba:	4b0b      	ldr	r3, [pc, #44]	; (800b5e8 <vPortSetupTimerInterrupt+0x38>)
 800b5bc:	2200      	movs	r2, #0
 800b5be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b5c0:	4b0a      	ldr	r3, [pc, #40]	; (800b5ec <vPortSetupTimerInterrupt+0x3c>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	4a0a      	ldr	r2, [pc, #40]	; (800b5f0 <vPortSetupTimerInterrupt+0x40>)
 800b5c6:	fba2 2303 	umull	r2, r3, r2, r3
 800b5ca:	099b      	lsrs	r3, r3, #6
 800b5cc:	4a09      	ldr	r2, [pc, #36]	; (800b5f4 <vPortSetupTimerInterrupt+0x44>)
 800b5ce:	3b01      	subs	r3, #1
 800b5d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b5d2:	4b04      	ldr	r3, [pc, #16]	; (800b5e4 <vPortSetupTimerInterrupt+0x34>)
 800b5d4:	2207      	movs	r2, #7
 800b5d6:	601a      	str	r2, [r3, #0]
}
 800b5d8:	bf00      	nop
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	e000e010 	.word	0xe000e010
 800b5e8:	e000e018 	.word	0xe000e018
 800b5ec:	20000004 	.word	0x20000004
 800b5f0:	10624dd3 	.word	0x10624dd3
 800b5f4:	e000e014 	.word	0xe000e014

0800b5f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b5f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b608 <vPortEnableVFP+0x10>
 800b5fc:	6801      	ldr	r1, [r0, #0]
 800b5fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b602:	6001      	str	r1, [r0, #0]
 800b604:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b606:	bf00      	nop
 800b608:	e000ed88 	.word	0xe000ed88

0800b60c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b60c:	b480      	push	{r7}
 800b60e:	b085      	sub	sp, #20
 800b610:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b612:	f3ef 8305 	mrs	r3, IPSR
 800b616:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2b0f      	cmp	r3, #15
 800b61c:	d916      	bls.n	800b64c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b61e:	4a19      	ldr	r2, [pc, #100]	; (800b684 <vPortValidateInterruptPriority+0x78>)
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	4413      	add	r3, r2
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b628:	4b17      	ldr	r3, [pc, #92]	; (800b688 <vPortValidateInterruptPriority+0x7c>)
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	7afa      	ldrb	r2, [r7, #11]
 800b62e:	429a      	cmp	r2, r3
 800b630:	d20c      	bcs.n	800b64c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800b632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b636:	b672      	cpsid	i
 800b638:	f383 8811 	msr	BASEPRI, r3
 800b63c:	f3bf 8f6f 	isb	sy
 800b640:	f3bf 8f4f 	dsb	sy
 800b644:	b662      	cpsie	i
 800b646:	607b      	str	r3, [r7, #4]
}
 800b648:	bf00      	nop
 800b64a:	e7fe      	b.n	800b64a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b64c:	4b0f      	ldr	r3, [pc, #60]	; (800b68c <vPortValidateInterruptPriority+0x80>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b654:	4b0e      	ldr	r3, [pc, #56]	; (800b690 <vPortValidateInterruptPriority+0x84>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d90c      	bls.n	800b676 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800b65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b660:	b672      	cpsid	i
 800b662:	f383 8811 	msr	BASEPRI, r3
 800b666:	f3bf 8f6f 	isb	sy
 800b66a:	f3bf 8f4f 	dsb	sy
 800b66e:	b662      	cpsie	i
 800b670:	603b      	str	r3, [r7, #0]
}
 800b672:	bf00      	nop
 800b674:	e7fe      	b.n	800b674 <vPortValidateInterruptPriority+0x68>
	}
 800b676:	bf00      	nop
 800b678:	3714      	adds	r7, #20
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr
 800b682:	bf00      	nop
 800b684:	e000e3f0 	.word	0xe000e3f0
 800b688:	20007cf4 	.word	0x20007cf4
 800b68c:	e000ed0c 	.word	0xe000ed0c
 800b690:	20007cf8 	.word	0x20007cf8

0800b694 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b08a      	sub	sp, #40	; 0x28
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b69c:	2300      	movs	r3, #0
 800b69e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b6a0:	f7fe fd56 	bl	800a150 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b6a4:	4b5b      	ldr	r3, [pc, #364]	; (800b814 <pvPortMalloc+0x180>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d101      	bne.n	800b6b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b6ac:	f000 f91a 	bl	800b8e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b6b0:	4b59      	ldr	r3, [pc, #356]	; (800b818 <pvPortMalloc+0x184>)
 800b6b2:	681a      	ldr	r2, [r3, #0]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	4013      	ands	r3, r2
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	f040 8092 	bne.w	800b7e2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d01f      	beq.n	800b704 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800b6c4:	2208      	movs	r2, #8
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f003 0307 	and.w	r3, r3, #7
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d016      	beq.n	800b704 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f023 0307 	bic.w	r3, r3, #7
 800b6dc:	3308      	adds	r3, #8
 800b6de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f003 0307 	and.w	r3, r3, #7
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d00c      	beq.n	800b704 <pvPortMalloc+0x70>
	__asm volatile
 800b6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ee:	b672      	cpsid	i
 800b6f0:	f383 8811 	msr	BASEPRI, r3
 800b6f4:	f3bf 8f6f 	isb	sy
 800b6f8:	f3bf 8f4f 	dsb	sy
 800b6fc:	b662      	cpsie	i
 800b6fe:	617b      	str	r3, [r7, #20]
}
 800b700:	bf00      	nop
 800b702:	e7fe      	b.n	800b702 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d06b      	beq.n	800b7e2 <pvPortMalloc+0x14e>
 800b70a:	4b44      	ldr	r3, [pc, #272]	; (800b81c <pvPortMalloc+0x188>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	687a      	ldr	r2, [r7, #4]
 800b710:	429a      	cmp	r2, r3
 800b712:	d866      	bhi.n	800b7e2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b714:	4b42      	ldr	r3, [pc, #264]	; (800b820 <pvPortMalloc+0x18c>)
 800b716:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b718:	4b41      	ldr	r3, [pc, #260]	; (800b820 <pvPortMalloc+0x18c>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b71e:	e004      	b.n	800b72a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800b720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b722:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	687a      	ldr	r2, [r7, #4]
 800b730:	429a      	cmp	r2, r3
 800b732:	d903      	bls.n	800b73c <pvPortMalloc+0xa8>
 800b734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d1f1      	bne.n	800b720 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b73c:	4b35      	ldr	r3, [pc, #212]	; (800b814 <pvPortMalloc+0x180>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b742:	429a      	cmp	r2, r3
 800b744:	d04d      	beq.n	800b7e2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b746:	6a3b      	ldr	r3, [r7, #32]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	2208      	movs	r2, #8
 800b74c:	4413      	add	r3, r2
 800b74e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	6a3b      	ldr	r3, [r7, #32]
 800b756:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b75a:	685a      	ldr	r2, [r3, #4]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	1ad2      	subs	r2, r2, r3
 800b760:	2308      	movs	r3, #8
 800b762:	005b      	lsls	r3, r3, #1
 800b764:	429a      	cmp	r2, r3
 800b766:	d921      	bls.n	800b7ac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	4413      	add	r3, r2
 800b76e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b770:	69bb      	ldr	r3, [r7, #24]
 800b772:	f003 0307 	and.w	r3, r3, #7
 800b776:	2b00      	cmp	r3, #0
 800b778:	d00c      	beq.n	800b794 <pvPortMalloc+0x100>
	__asm volatile
 800b77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77e:	b672      	cpsid	i
 800b780:	f383 8811 	msr	BASEPRI, r3
 800b784:	f3bf 8f6f 	isb	sy
 800b788:	f3bf 8f4f 	dsb	sy
 800b78c:	b662      	cpsie	i
 800b78e:	613b      	str	r3, [r7, #16]
}
 800b790:	bf00      	nop
 800b792:	e7fe      	b.n	800b792 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b796:	685a      	ldr	r2, [r3, #4]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	1ad2      	subs	r2, r2, r3
 800b79c:	69bb      	ldr	r3, [r7, #24]
 800b79e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b7a6:	69b8      	ldr	r0, [r7, #24]
 800b7a8:	f000 f8fe 	bl	800b9a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b7ac:	4b1b      	ldr	r3, [pc, #108]	; (800b81c <pvPortMalloc+0x188>)
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	1ad3      	subs	r3, r2, r3
 800b7b6:	4a19      	ldr	r2, [pc, #100]	; (800b81c <pvPortMalloc+0x188>)
 800b7b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b7ba:	4b18      	ldr	r3, [pc, #96]	; (800b81c <pvPortMalloc+0x188>)
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	4b19      	ldr	r3, [pc, #100]	; (800b824 <pvPortMalloc+0x190>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d203      	bcs.n	800b7ce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b7c6:	4b15      	ldr	r3, [pc, #84]	; (800b81c <pvPortMalloc+0x188>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	4a16      	ldr	r2, [pc, #88]	; (800b824 <pvPortMalloc+0x190>)
 800b7cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d0:	685a      	ldr	r2, [r3, #4]
 800b7d2:	4b11      	ldr	r3, [pc, #68]	; (800b818 <pvPortMalloc+0x184>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	431a      	orrs	r2, r3
 800b7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7de:	2200      	movs	r2, #0
 800b7e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b7e2:	f7fe fcc3 	bl	800a16c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b7e6:	69fb      	ldr	r3, [r7, #28]
 800b7e8:	f003 0307 	and.w	r3, r3, #7
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d00c      	beq.n	800b80a <pvPortMalloc+0x176>
	__asm volatile
 800b7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f4:	b672      	cpsid	i
 800b7f6:	f383 8811 	msr	BASEPRI, r3
 800b7fa:	f3bf 8f6f 	isb	sy
 800b7fe:	f3bf 8f4f 	dsb	sy
 800b802:	b662      	cpsie	i
 800b804:	60fb      	str	r3, [r7, #12]
}
 800b806:	bf00      	nop
 800b808:	e7fe      	b.n	800b808 <pvPortMalloc+0x174>
	return pvReturn;
 800b80a:	69fb      	ldr	r3, [r7, #28]
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3728      	adds	r7, #40	; 0x28
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	2000b904 	.word	0x2000b904
 800b818:	2000b910 	.word	0x2000b910
 800b81c:	2000b908 	.word	0x2000b908
 800b820:	2000b8fc 	.word	0x2000b8fc
 800b824:	2000b90c 	.word	0x2000b90c

0800b828 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b086      	sub	sp, #24
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d04c      	beq.n	800b8d4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b83a:	2308      	movs	r3, #8
 800b83c:	425b      	negs	r3, r3
 800b83e:	697a      	ldr	r2, [r7, #20]
 800b840:	4413      	add	r3, r2
 800b842:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	685a      	ldr	r2, [r3, #4]
 800b84c:	4b23      	ldr	r3, [pc, #140]	; (800b8dc <vPortFree+0xb4>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4013      	ands	r3, r2
 800b852:	2b00      	cmp	r3, #0
 800b854:	d10c      	bne.n	800b870 <vPortFree+0x48>
	__asm volatile
 800b856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85a:	b672      	cpsid	i
 800b85c:	f383 8811 	msr	BASEPRI, r3
 800b860:	f3bf 8f6f 	isb	sy
 800b864:	f3bf 8f4f 	dsb	sy
 800b868:	b662      	cpsie	i
 800b86a:	60fb      	str	r3, [r7, #12]
}
 800b86c:	bf00      	nop
 800b86e:	e7fe      	b.n	800b86e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d00c      	beq.n	800b892 <vPortFree+0x6a>
	__asm volatile
 800b878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87c:	b672      	cpsid	i
 800b87e:	f383 8811 	msr	BASEPRI, r3
 800b882:	f3bf 8f6f 	isb	sy
 800b886:	f3bf 8f4f 	dsb	sy
 800b88a:	b662      	cpsie	i
 800b88c:	60bb      	str	r3, [r7, #8]
}
 800b88e:	bf00      	nop
 800b890:	e7fe      	b.n	800b890 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	685a      	ldr	r2, [r3, #4]
 800b896:	4b11      	ldr	r3, [pc, #68]	; (800b8dc <vPortFree+0xb4>)
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4013      	ands	r3, r2
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d019      	beq.n	800b8d4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d115      	bne.n	800b8d4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b8a8:	693b      	ldr	r3, [r7, #16]
 800b8aa:	685a      	ldr	r2, [r3, #4]
 800b8ac:	4b0b      	ldr	r3, [pc, #44]	; (800b8dc <vPortFree+0xb4>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	43db      	mvns	r3, r3
 800b8b2:	401a      	ands	r2, r3
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b8b8:	f7fe fc4a 	bl	800a150 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	685a      	ldr	r2, [r3, #4]
 800b8c0:	4b07      	ldr	r3, [pc, #28]	; (800b8e0 <vPortFree+0xb8>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4413      	add	r3, r2
 800b8c6:	4a06      	ldr	r2, [pc, #24]	; (800b8e0 <vPortFree+0xb8>)
 800b8c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b8ca:	6938      	ldr	r0, [r7, #16]
 800b8cc:	f000 f86c 	bl	800b9a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800b8d0:	f7fe fc4c 	bl	800a16c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b8d4:	bf00      	nop
 800b8d6:	3718      	adds	r7, #24
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}
 800b8dc:	2000b910 	.word	0x2000b910
 800b8e0:	2000b908 	.word	0x2000b908

0800b8e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b085      	sub	sp, #20
 800b8e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b8ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b8ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b8f0:	4b27      	ldr	r3, [pc, #156]	; (800b990 <prvHeapInit+0xac>)
 800b8f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f003 0307 	and.w	r3, r3, #7
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d00c      	beq.n	800b918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	3307      	adds	r3, #7
 800b902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	f023 0307 	bic.w	r3, r3, #7
 800b90a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b90c:	68ba      	ldr	r2, [r7, #8]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	1ad3      	subs	r3, r2, r3
 800b912:	4a1f      	ldr	r2, [pc, #124]	; (800b990 <prvHeapInit+0xac>)
 800b914:	4413      	add	r3, r2
 800b916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b91c:	4a1d      	ldr	r2, [pc, #116]	; (800b994 <prvHeapInit+0xb0>)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b922:	4b1c      	ldr	r3, [pc, #112]	; (800b994 <prvHeapInit+0xb0>)
 800b924:	2200      	movs	r2, #0
 800b926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	68ba      	ldr	r2, [r7, #8]
 800b92c:	4413      	add	r3, r2
 800b92e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b930:	2208      	movs	r2, #8
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	1a9b      	subs	r3, r3, r2
 800b936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f023 0307 	bic.w	r3, r3, #7
 800b93e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	4a15      	ldr	r2, [pc, #84]	; (800b998 <prvHeapInit+0xb4>)
 800b944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b946:	4b14      	ldr	r3, [pc, #80]	; (800b998 <prvHeapInit+0xb4>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	2200      	movs	r2, #0
 800b94c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b94e:	4b12      	ldr	r3, [pc, #72]	; (800b998 <prvHeapInit+0xb4>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2200      	movs	r2, #0
 800b954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	68fa      	ldr	r2, [r7, #12]
 800b95e:	1ad2      	subs	r2, r2, r3
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b964:	4b0c      	ldr	r3, [pc, #48]	; (800b998 <prvHeapInit+0xb4>)
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	4a0a      	ldr	r2, [pc, #40]	; (800b99c <prvHeapInit+0xb8>)
 800b972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	4a09      	ldr	r2, [pc, #36]	; (800b9a0 <prvHeapInit+0xbc>)
 800b97a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b97c:	4b09      	ldr	r3, [pc, #36]	; (800b9a4 <prvHeapInit+0xc0>)
 800b97e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b982:	601a      	str	r2, [r3, #0]
}
 800b984:	bf00      	nop
 800b986:	3714      	adds	r7, #20
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr
 800b990:	20007cfc 	.word	0x20007cfc
 800b994:	2000b8fc 	.word	0x2000b8fc
 800b998:	2000b904 	.word	0x2000b904
 800b99c:	2000b90c 	.word	0x2000b90c
 800b9a0:	2000b908 	.word	0x2000b908
 800b9a4:	2000b910 	.word	0x2000b910

0800b9a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b085      	sub	sp, #20
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b9b0:	4b28      	ldr	r3, [pc, #160]	; (800ba54 <prvInsertBlockIntoFreeList+0xac>)
 800b9b2:	60fb      	str	r3, [r7, #12]
 800b9b4:	e002      	b.n	800b9bc <prvInsertBlockIntoFreeList+0x14>
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	60fb      	str	r3, [r7, #12]
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d8f7      	bhi.n	800b9b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	68ba      	ldr	r2, [r7, #8]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	687a      	ldr	r2, [r7, #4]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d108      	bne.n	800b9ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	685a      	ldr	r2, [r3, #4]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	441a      	add	r2, r3
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	68ba      	ldr	r2, [r7, #8]
 800b9f4:	441a      	add	r2, r3
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	d118      	bne.n	800ba30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681a      	ldr	r2, [r3, #0]
 800ba02:	4b15      	ldr	r3, [pc, #84]	; (800ba58 <prvInsertBlockIntoFreeList+0xb0>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d00d      	beq.n	800ba26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	685a      	ldr	r2, [r3, #4]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	441a      	add	r2, r3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	601a      	str	r2, [r3, #0]
 800ba24:	e008      	b.n	800ba38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ba26:	4b0c      	ldr	r3, [pc, #48]	; (800ba58 <prvInsertBlockIntoFreeList+0xb0>)
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	601a      	str	r2, [r3, #0]
 800ba2e:	e003      	b.n	800ba38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ba38:	68fa      	ldr	r2, [r7, #12]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d002      	beq.n	800ba46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba46:	bf00      	nop
 800ba48:	3714      	adds	r7, #20
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr
 800ba52:	bf00      	nop
 800ba54:	2000b8fc 	.word	0x2000b8fc
 800ba58:	2000b904 	.word	0x2000b904

0800ba5c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control>:
 800ba5c:	4b04      	ldr	r3, [pc, #16]	; (800ba70 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	b10a      	cbz	r2, 800ba66 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0xa>
 800ba62:	4803      	ldr	r0, [pc, #12]	; (800ba70 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800ba64:	4770      	bx	lr
 800ba66:	4a03      	ldr	r2, [pc, #12]	; (800ba74 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x18>)
 800ba68:	4801      	ldr	r0, [pc, #4]	; (800ba70 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Control+0x14>)
 800ba6a:	6812      	ldr	r2, [r2, #0]
 800ba6c:	601a      	str	r2, [r3, #0]
 800ba6e:	4770      	bx	lr
 800ba70:	2000001c 	.word	0x2000001c
 800ba74:	20000a10 	.word	0x20000a10

0800ba78 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800ba78:	4b06      	ldr	r3, [pc, #24]	; (800ba94 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x1c>)
 800ba7a:	4807      	ldr	r0, [pc, #28]	; (800ba98 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x20>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	4907      	ldr	r1, [pc, #28]	; (800ba9c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x24>)
 800ba80:	4a07      	ldr	r2, [pc, #28]	; (800baa0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x28>)
 800ba82:	b410      	push	{r4}
 800ba84:	4c07      	ldr	r4, [pc, #28]	; (800baa4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x2c>)
 800ba86:	6003      	str	r3, [r0, #0]
 800ba88:	6023      	str	r3, [r4, #0]
 800ba8a:	600b      	str	r3, [r1, #0]
 800ba8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba90:	6013      	str	r3, [r2, #0]
 800ba92:	4770      	bx	lr
 800ba94:	20000a10 	.word	0x20000a10
 800ba98:	20000090 	.word	0x20000090
 800ba9c:	20000050 	.word	0x20000050
 800baa0:	2000001c 	.word	0x2000001c
 800baa4:	20000078 	.word	0x20000078

0800baa8 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800baa8:	4b04      	ldr	r3, [pc, #16]	; (800babc <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	b10a      	cbz	r2, 800bab2 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0xa>
 800baae:	4803      	ldr	r0, [pc, #12]	; (800babc <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800bab0:	4770      	bx	lr
 800bab2:	4a03      	ldr	r2, [pc, #12]	; (800bac0 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x18>)
 800bab4:	4801      	ldr	r0, [pc, #4]	; (800babc <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800bab6:	6812      	ldr	r2, [r2, #0]
 800bab8:	601a      	str	r2, [r3, #0]
 800baba:	4770      	bx	lr
 800babc:	200000b0 	.word	0x200000b0
 800bac0:	20000a10 	.word	0x20000a10

0800bac4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800bac4:	4a02      	ldr	r2, [pc, #8]	; (800bad0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0xc>)
 800bac6:	4b03      	ldr	r3, [pc, #12]	; (800bad4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x10>)
 800bac8:	6812      	ldr	r2, [r2, #0]
 800baca:	601a      	str	r2, [r3, #0]
 800bacc:	4770      	bx	lr
 800bace:	bf00      	nop
 800bad0:	20000a10 	.word	0x20000a10
 800bad4:	200000b0 	.word	0x200000b0

0800bad8 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800bad8:	4b04      	ldr	r3, [pc, #16]	; (800baec <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800bada:	681a      	ldr	r2, [r3, #0]
 800badc:	b10a      	cbz	r2, 800bae2 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0xa>
 800bade:	4803      	ldr	r0, [pc, #12]	; (800baec <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800bae0:	4770      	bx	lr
 800bae2:	4a03      	ldr	r2, [pc, #12]	; (800baf0 <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x18>)
 800bae4:	4801      	ldr	r0, [pc, #4]	; (800baec <rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800bae6:	6812      	ldr	r2, [r2, #0]
 800bae8:	601a      	str	r2, [r3, #0]
 800baea:	4770      	bx	lr
 800baec:	200000d0 	.word	0x200000d0
 800baf0:	20000a10 	.word	0x20000a10

0800baf4 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800baf4:	4a02      	ldr	r2, [pc, #8]	; (800bb00 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0xc>)
 800baf6:	4b03      	ldr	r3, [pc, #12]	; (800bb04 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__msg__Feedback+0x10>)
 800baf8:	6812      	ldr	r2, [r2, #0]
 800bafa:	601a      	str	r2, [r3, #0]
 800bafc:	4770      	bx	lr
 800bafe:	bf00      	nop
 800bb00:	20000a10 	.word	0x20000a10
 800bb04:	200000d0 	.word	0x200000d0

0800bb08 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800bb08:	4b04      	ldr	r3, [pc, #16]	; (800bb1c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	b10a      	cbz	r2, 800bb12 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0xa>
 800bb0e:	4803      	ldr	r0, [pc, #12]	; (800bb1c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800bb10:	4770      	bx	lr
 800bb12:	4a03      	ldr	r2, [pc, #12]	; (800bb20 <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x18>)
 800bb14:	4801      	ldr	r0, [pc, #4]	; (800bb1c <rosidl_typesupport_c__get_service_type_support_handle__racs_services__srv__Setup+0x14>)
 800bb16:	6812      	ldr	r2, [r2, #0]
 800bb18:	601a      	str	r2, [r3, #0]
 800bb1a:	4770      	bx	lr
 800bb1c:	200000f0 	.word	0x200000f0
 800bb20:	20000a10 	.word	0x20000a10

0800bb24 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800bb24:	4b06      	ldr	r3, [pc, #24]	; (800bb40 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x1c>)
 800bb26:	4807      	ldr	r0, [pc, #28]	; (800bb44 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x20>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4907      	ldr	r1, [pc, #28]	; (800bb48 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x24>)
 800bb2c:	4a07      	ldr	r2, [pc, #28]	; (800bb4c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x28>)
 800bb2e:	b410      	push	{r4}
 800bb30:	4c07      	ldr	r4, [pc, #28]	; (800bb50 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x2c>)
 800bb32:	6003      	str	r3, [r0, #0]
 800bb34:	6023      	str	r3, [r4, #0]
 800bb36:	600b      	str	r3, [r1, #0]
 800bb38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb3c:	6013      	str	r3, [r2, #0]
 800bb3e:	4770      	bx	lr
 800bb40:	20000a10 	.word	0x20000a10
 800bb44:	20000164 	.word	0x20000164
 800bb48:	20000124 	.word	0x20000124
 800bb4c:	200000f0 	.word	0x200000f0
 800bb50:	2000014c 	.word	0x2000014c

0800bb54 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__size_function__Control_Request__encoders>:
 800bb54:	2006      	movs	r0, #6
 800bb56:	4770      	bx	lr

0800bb58 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__get_const_function__Control_Request__encoders>:
 800bb58:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bb5c:	4770      	bx	lr
 800bb5e:	bf00      	nop

0800bb60 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__fetch_function__Control_Request__encoders>:
 800bb60:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 800bb64:	8013      	strh	r3, [r2, #0]
 800bb66:	4770      	bx	lr

0800bb68 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__assign_function__Control_Request__encoders>:
 800bb68:	f9b2 3000 	ldrsh.w	r3, [r2]
 800bb6c:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800bb70:	4770      	bx	lr
 800bb72:	bf00      	nop

0800bb74 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__size_function__Control_Event__request>:
 800bb74:	6840      	ldr	r0, [r0, #4]
 800bb76:	4770      	bx	lr

0800bb78 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_const_function__Control_Event__request>:
 800bb78:	6800      	ldr	r0, [r0, #0]
 800bb7a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800bb7e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bb82:	4770      	bx	lr

0800bb84 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__fetch_function__Control_Event__request>:
 800bb84:	6800      	ldr	r0, [r0, #0]
 800bb86:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800bb8a:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 800bb8e:	f850 c011 	ldr.w	ip, [r0, r1, lsl #1]
 800bb92:	6858      	ldr	r0, [r3, #4]
 800bb94:	6899      	ldr	r1, [r3, #8]
 800bb96:	f8c2 c000 	str.w	ip, [r2]
 800bb9a:	6050      	str	r0, [r2, #4]
 800bb9c:	6091      	str	r1, [r2, #8]
 800bb9e:	899b      	ldrh	r3, [r3, #12]
 800bba0:	8193      	strh	r3, [r2, #12]
 800bba2:	4770      	bx	lr

0800bba4 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__assign_function__Control_Event__request>:
 800bba4:	6800      	ldr	r0, [r0, #0]
 800bba6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800bbaa:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800bbae:	eb00 0341 	add.w	r3, r0, r1, lsl #1
 800bbb2:	b510      	push	{r4, lr}
 800bbb4:	6814      	ldr	r4, [r2, #0]
 800bbb6:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800bbba:	f840 4011 	str.w	r4, [r0, r1, lsl #1]
 800bbbe:	f8c3 e004 	str.w	lr, [r3, #4]
 800bbc2:	f8c3 c008 	str.w	ip, [r3, #8]
 800bbc6:	8992      	ldrh	r2, [r2, #12]
 800bbc8:	819a      	strh	r2, [r3, #12]
 800bbca:	bd10      	pop	{r4, pc}

0800bbcc <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__size_function__Control_Event__response>:
 800bbcc:	6840      	ldr	r0, [r0, #4]
 800bbce:	4770      	bx	lr

0800bbd0 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_const_function__Control_Event__response>:
 800bbd0:	6800      	ldr	r0, [r0, #0]
 800bbd2:	4408      	add	r0, r1
 800bbd4:	4770      	bx	lr
 800bbd6:	bf00      	nop

0800bbd8 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__fetch_function__Control_Event__response>:
 800bbd8:	6803      	ldr	r3, [r0, #0]
 800bbda:	5c5b      	ldrb	r3, [r3, r1]
 800bbdc:	7013      	strb	r3, [r2, #0]
 800bbde:	4770      	bx	lr

0800bbe0 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__assign_function__Control_Event__response>:
 800bbe0:	6803      	ldr	r3, [r0, #0]
 800bbe2:	7812      	ldrb	r2, [r2, #0]
 800bbe4:	545a      	strb	r2, [r3, r1]
 800bbe6:	4770      	bx	lr

0800bbe8 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__Control_Request_init_function>:
 800bbe8:	f007 bf26 	b.w	8013a38 <racs_services__srv__Control_Request__init>

0800bbec <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__Control_Request_fini_function>:
 800bbec:	f007 bf28 	b.w	8013a40 <racs_services__srv__Control_Request__fini>

0800bbf0 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__Control_Response_init_function>:
 800bbf0:	f007 bf68 	b.w	8013ac4 <racs_services__srv__Control_Response__init>

0800bbf4 <racs_services__srv__Control_Response__rosidl_typesupport_introspection_c__Control_Response_fini_function>:
 800bbf4:	f007 bf6a 	b.w	8013acc <racs_services__srv__Control_Response__fini>

0800bbf8 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__Control_Event_init_function>:
 800bbf8:	f007 bfa0 	b.w	8013b3c <racs_services__srv__Control_Event__init>

0800bbfc <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__Control_Event_fini_function>:
 800bbfc:	f007 bfc0 	b.w	8013b80 <racs_services__srv__Control_Event__fini>

0800bc00 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__resize_function__Control_Event__request>:
 800bc00:	b510      	push	{r4, lr}
 800bc02:	4604      	mov	r4, r0
 800bc04:	b082      	sub	sp, #8
 800bc06:	9101      	str	r1, [sp, #4]
 800bc08:	f007 ff48 	bl	8013a9c <racs_services__srv__Control_Request__Sequence__fini>
 800bc0c:	9901      	ldr	r1, [sp, #4]
 800bc0e:	4620      	mov	r0, r4
 800bc10:	b002      	add	sp, #8
 800bc12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc16:	f007 bf27 	b.w	8013a68 <racs_services__srv__Control_Request__Sequence__init>
 800bc1a:	bf00      	nop

0800bc1c <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__resize_function__Control_Event__response>:
 800bc1c:	b510      	push	{r4, lr}
 800bc1e:	4604      	mov	r4, r0
 800bc20:	b082      	sub	sp, #8
 800bc22:	9101      	str	r1, [sp, #4]
 800bc24:	f007 ff76 	bl	8013b14 <racs_services__srv__Control_Response__Sequence__fini>
 800bc28:	9901      	ldr	r1, [sp, #4]
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	b002      	add	sp, #8
 800bc2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc32:	f007 bf55 	b.w	8013ae0 <racs_services__srv__Control_Response__Sequence__init>
 800bc36:	bf00      	nop

0800bc38 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_function__Control_Event__response>:
 800bc38:	6800      	ldr	r0, [r0, #0]
 800bc3a:	4408      	add	r0, r1
 800bc3c:	4770      	bx	lr
 800bc3e:	bf00      	nop

0800bc40 <racs_services__srv__Control_Request__rosidl_typesupport_introspection_c__get_function__Control_Request__encoders>:
 800bc40:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bc44:	4770      	bx	lr
 800bc46:	bf00      	nop

0800bc48 <racs_services__srv__Control_Event__rosidl_typesupport_introspection_c__get_function__Control_Event__request>:
 800bc48:	6800      	ldr	r0, [r0, #0]
 800bc4a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800bc4e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bc52:	4770      	bx	lr

0800bc54 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800bc54:	4b04      	ldr	r3, [pc, #16]	; (800bc68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800bc56:	681a      	ldr	r2, [r3, #0]
 800bc58:	b10a      	cbz	r2, 800bc5e <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0xa>
 800bc5a:	4803      	ldr	r0, [pc, #12]	; (800bc68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800bc5c:	4770      	bx	lr
 800bc5e:	4a03      	ldr	r2, [pc, #12]	; (800bc6c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x18>)
 800bc60:	4801      	ldr	r0, [pc, #4]	; (800bc68 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x14>)
 800bc62:	6812      	ldr	r2, [r2, #0]
 800bc64:	601a      	str	r2, [r3, #0]
 800bc66:	4770      	bx	lr
 800bc68:	200002fc 	.word	0x200002fc
 800bc6c:	20000a14 	.word	0x20000a14

0800bc70 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response>:
 800bc70:	4b04      	ldr	r3, [pc, #16]	; (800bc84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	b10a      	cbz	r2, 800bc7a <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0xa>
 800bc76:	4803      	ldr	r0, [pc, #12]	; (800bc84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800bc78:	4770      	bx	lr
 800bc7a:	4a03      	ldr	r2, [pc, #12]	; (800bc88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x18>)
 800bc7c:	4801      	ldr	r0, [pc, #4]	; (800bc84 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x14>)
 800bc7e:	6812      	ldr	r2, [r2, #0]
 800bc80:	601a      	str	r2, [r3, #0]
 800bc82:	4770      	bx	lr
 800bc84:	20000350 	.word	0x20000350
 800bc88:	20000a14 	.word	0x20000a14

0800bc8c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event>:
 800bc8c:	b508      	push	{r3, lr}
 800bc8e:	f002 febf 	bl	800ea10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800bc92:	4913      	ldr	r1, [pc, #76]	; (800bce0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x54>)
 800bc94:	4b13      	ldr	r3, [pc, #76]	; (800bce4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x58>)
 800bc96:	680a      	ldr	r2, [r1, #0]
 800bc98:	60d8      	str	r0, [r3, #12]
 800bc9a:	b152      	cbz	r2, 800bcb2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x26>
 800bc9c:	4a12      	ldr	r2, [pc, #72]	; (800bce8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x5c>)
 800bc9e:	6499      	str	r1, [r3, #72]	; 0x48
 800bca0:	6811      	ldr	r1, [r2, #0]
 800bca2:	b171      	cbz	r1, 800bcc2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x36>
 800bca4:	4911      	ldr	r1, [pc, #68]	; (800bcec <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800bca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800bcaa:	680b      	ldr	r3, [r1, #0]
 800bcac:	b193      	cbz	r3, 800bcd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x48>
 800bcae:	480f      	ldr	r0, [pc, #60]	; (800bcec <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800bcb0:	bd08      	pop	{r3, pc}
 800bcb2:	4a0f      	ldr	r2, [pc, #60]	; (800bcf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800bcb4:	6499      	str	r1, [r3, #72]	; 0x48
 800bcb6:	6812      	ldr	r2, [r2, #0]
 800bcb8:	600a      	str	r2, [r1, #0]
 800bcba:	4a0b      	ldr	r2, [pc, #44]	; (800bce8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x5c>)
 800bcbc:	6811      	ldr	r1, [r2, #0]
 800bcbe:	2900      	cmp	r1, #0
 800bcc0:	d1f0      	bne.n	800bca4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x18>
 800bcc2:	490b      	ldr	r1, [pc, #44]	; (800bcf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800bcc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800bcc8:	6809      	ldr	r1, [r1, #0]
 800bcca:	6011      	str	r1, [r2, #0]
 800bccc:	4907      	ldr	r1, [pc, #28]	; (800bcec <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800bcce:	680b      	ldr	r3, [r1, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d1ec      	bne.n	800bcae <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x22>
 800bcd4:	4b06      	ldr	r3, [pc, #24]	; (800bcf0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x64>)
 800bcd6:	4805      	ldr	r0, [pc, #20]	; (800bcec <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x60>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	600b      	str	r3, [r1, #0]
 800bcdc:	bd08      	pop	{r3, pc}
 800bcde:	bf00      	nop
 800bce0:	200002fc 	.word	0x200002fc
 800bce4:	2000017c 	.word	0x2000017c
 800bce8:	20000350 	.word	0x20000350
 800bcec:	20000230 	.word	0x20000230
 800bcf0:	20000a14 	.word	0x20000a14

0800bcf4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control>:
 800bcf4:	4b25      	ldr	r3, [pc, #148]	; (800bd8c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800bcf6:	681a      	ldr	r2, [r3, #0]
 800bcf8:	b510      	push	{r4, lr}
 800bcfa:	b142      	cbz	r2, 800bd0e <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x1a>
 800bcfc:	685c      	ldr	r4, [r3, #4]
 800bcfe:	68a3      	ldr	r3, [r4, #8]
 800bd00:	b163      	cbz	r3, 800bd1c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x28>
 800bd02:	68e3      	ldr	r3, [r4, #12]
 800bd04:	b193      	cbz	r3, 800bd2c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x38>
 800bd06:	6923      	ldr	r3, [r4, #16]
 800bd08:	b1c3      	cbz	r3, 800bd3c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x48>
 800bd0a:	4820      	ldr	r0, [pc, #128]	; (800bd8c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800bd0c:	bd10      	pop	{r4, pc}
 800bd0e:	4a20      	ldr	r2, [pc, #128]	; (800bd90 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800bd10:	685c      	ldr	r4, [r3, #4]
 800bd12:	6812      	ldr	r2, [r2, #0]
 800bd14:	601a      	str	r2, [r3, #0]
 800bd16:	68a3      	ldr	r3, [r4, #8]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d1f2      	bne.n	800bd02 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xe>
 800bd1c:	4a1d      	ldr	r2, [pc, #116]	; (800bd94 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa0>)
 800bd1e:	6813      	ldr	r3, [r2, #0]
 800bd20:	b303      	cbz	r3, 800bd64 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x70>
 800bd22:	6853      	ldr	r3, [r2, #4]
 800bd24:	60a3      	str	r3, [r4, #8]
 800bd26:	68e3      	ldr	r3, [r4, #12]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d1ec      	bne.n	800bd06 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x12>
 800bd2c:	4b1a      	ldr	r3, [pc, #104]	; (800bd98 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa4>)
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	b1e2      	cbz	r2, 800bd6c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x78>
 800bd32:	685b      	ldr	r3, [r3, #4]
 800bd34:	60e3      	str	r3, [r4, #12]
 800bd36:	6923      	ldr	r3, [r4, #16]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d1e6      	bne.n	800bd0a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x16>
 800bd3c:	f002 fe68 	bl	800ea10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800bd40:	4a14      	ldr	r2, [pc, #80]	; (800bd94 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa0>)
 800bd42:	4916      	ldr	r1, [pc, #88]	; (800bd9c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa8>)
 800bd44:	6813      	ldr	r3, [r2, #0]
 800bd46:	60c8      	str	r0, [r1, #12]
 800bd48:	b1e3      	cbz	r3, 800bd84 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x90>
 800bd4a:	4b13      	ldr	r3, [pc, #76]	; (800bd98 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xa4>)
 800bd4c:	648a      	str	r2, [r1, #72]	; 0x48
 800bd4e:	681a      	ldr	r2, [r3, #0]
 800bd50:	b1a2      	cbz	r2, 800bd7c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x88>
 800bd52:	4a13      	ldr	r2, [pc, #76]	; (800bda0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0xac>)
 800bd54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800bd58:	6813      	ldr	r3, [r2, #0]
 800bd5a:	b15b      	cbz	r3, 800bd74 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x80>
 800bd5c:	6853      	ldr	r3, [r2, #4]
 800bd5e:	480b      	ldr	r0, [pc, #44]	; (800bd8c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x98>)
 800bd60:	6123      	str	r3, [r4, #16]
 800bd62:	bd10      	pop	{r4, pc}
 800bd64:	4b0a      	ldr	r3, [pc, #40]	; (800bd90 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	6013      	str	r3, [r2, #0]
 800bd6a:	e7da      	b.n	800bd22 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x2e>
 800bd6c:	4a08      	ldr	r2, [pc, #32]	; (800bd90 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800bd6e:	6812      	ldr	r2, [r2, #0]
 800bd70:	601a      	str	r2, [r3, #0]
 800bd72:	e7de      	b.n	800bd32 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x3e>
 800bd74:	4b06      	ldr	r3, [pc, #24]	; (800bd90 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	6013      	str	r3, [r2, #0]
 800bd7a:	e7ef      	b.n	800bd5c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x68>
 800bd7c:	4a04      	ldr	r2, [pc, #16]	; (800bd90 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800bd7e:	6812      	ldr	r2, [r2, #0]
 800bd80:	601a      	str	r2, [r3, #0]
 800bd82:	e7e6      	b.n	800bd52 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x5e>
 800bd84:	4b02      	ldr	r3, [pc, #8]	; (800bd90 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x9c>)
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	6013      	str	r3, [r2, #0]
 800bd8a:	e7de      	b.n	800bd4a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Control+0x56>
 800bd8c:	2000037c 	.word	0x2000037c
 800bd90:	20000a14 	.word	0x20000a14
 800bd94:	200002fc 	.word	0x200002fc
 800bd98:	20000350 	.word	0x20000350
 800bd9c:	2000017c 	.word	0x2000017c
 800bda0:	20000230 	.word	0x20000230

0800bda4 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__size_function__DirectAccess__pwms>:
 800bda4:	2006      	movs	r0, #6
 800bda6:	4770      	bx	lr

0800bda8 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__get_const_function__DirectAccess__pwms>:
 800bda8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bdac:	4770      	bx	lr
 800bdae:	bf00      	nop

0800bdb0 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__fetch_function__DirectAccess__pwms>:
 800bdb0:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 800bdb4:	8013      	strh	r3, [r2, #0]
 800bdb6:	4770      	bx	lr

0800bdb8 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__assign_function__DirectAccess__pwms>:
 800bdb8:	f9b2 3000 	ldrsh.w	r3, [r2]
 800bdbc:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800bdc0:	4770      	bx	lr
 800bdc2:	bf00      	nop

0800bdc4 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__DirectAccess_init_function>:
 800bdc4:	f007 bf9c 	b.w	8013d00 <racs_services__msg__DirectAccess__init>

0800bdc8 <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__DirectAccess_fini_function>:
 800bdc8:	f007 bf9e 	b.w	8013d08 <racs_services__msg__DirectAccess__fini>

0800bdcc <racs_services__msg__DirectAccess__rosidl_typesupport_introspection_c__get_function__DirectAccess__pwms>:
 800bdcc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bdd0:	4770      	bx	lr
 800bdd2:	bf00      	nop

0800bdd4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800bdd4:	4b04      	ldr	r3, [pc, #16]	; (800bde8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800bdd6:	681a      	ldr	r2, [r3, #0]
 800bdd8:	b10a      	cbz	r2, 800bdde <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0xa>
 800bdda:	4803      	ldr	r0, [pc, #12]	; (800bde8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800bddc:	4770      	bx	lr
 800bdde:	4a03      	ldr	r2, [pc, #12]	; (800bdec <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x18>)
 800bde0:	4801      	ldr	r0, [pc, #4]	; (800bde8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x14>)
 800bde2:	6812      	ldr	r2, [r2, #0]
 800bde4:	601a      	str	r2, [r3, #0]
 800bde6:	4770      	bx	lr
 800bde8:	20000420 	.word	0x20000420
 800bdec:	20000a14 	.word	0x20000a14

0800bdf0 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__size_function__Feedback__encoders>:
 800bdf0:	2006      	movs	r0, #6
 800bdf2:	4770      	bx	lr

0800bdf4 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__get_const_function__Feedback__encoders>:
 800bdf4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800bdf8:	4770      	bx	lr
 800bdfa:	bf00      	nop

0800bdfc <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__fetch_function__Feedback__encoders>:
 800bdfc:	f930 3011 	ldrsh.w	r3, [r0, r1, lsl #1]
 800be00:	8013      	strh	r3, [r2, #0]
 800be02:	4770      	bx	lr

0800be04 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__assign_function__Feedback__encoders>:
 800be04:	f9b2 3000 	ldrsh.w	r3, [r2]
 800be08:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 800be0c:	4770      	bx	lr
 800be0e:	bf00      	nop

0800be10 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__Feedback_init_function>:
 800be10:	f007 bfa8 	b.w	8013d64 <racs_services__msg__Feedback__init>

0800be14 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__Feedback_fini_function>:
 800be14:	f007 bfaa 	b.w	8013d6c <racs_services__msg__Feedback__fini>

0800be18 <racs_services__msg__Feedback__rosidl_typesupport_introspection_c__get_function__Feedback__encoders>:
 800be18:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 800be1c:	4770      	bx	lr
 800be1e:	bf00      	nop

0800be20 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800be20:	4b04      	ldr	r3, [pc, #16]	; (800be34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	b10a      	cbz	r2, 800be2a <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0xa>
 800be26:	4803      	ldr	r0, [pc, #12]	; (800be34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800be28:	4770      	bx	lr
 800be2a:	4a03      	ldr	r2, [pc, #12]	; (800be38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x18>)
 800be2c:	4801      	ldr	r0, [pc, #4]	; (800be34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__msg__Feedback+0x14>)
 800be2e:	6812      	ldr	r2, [r2, #0]
 800be30:	601a      	str	r2, [r3, #0]
 800be32:	4770      	bx	lr
 800be34:	200004b0 	.word	0x200004b0
 800be38:	20000a14 	.word	0x20000a14

0800be3c <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__size_function__Setup_Event__request>:
 800be3c:	6840      	ldr	r0, [r0, #4]
 800be3e:	4770      	bx	lr

0800be40 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_const_function__Setup_Event__request>:
 800be40:	6800      	ldr	r0, [r0, #0]
 800be42:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800be46:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800be4a:	4770      	bx	lr

0800be4c <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__fetch_function__Setup_Event__request>:
 800be4c:	6803      	ldr	r3, [r0, #0]
 800be4e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800be52:	4694      	mov	ip, r2
 800be54:	b500      	push	{lr}
 800be56:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800be5a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800be5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800be62:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800be66:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800be6a:	f85d fb04 	ldr.w	pc, [sp], #4
 800be6e:	bf00      	nop

0800be70 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__assign_function__Setup_Event__request>:
 800be70:	6803      	ldr	r3, [r0, #0]
 800be72:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800be76:	b500      	push	{lr}
 800be78:	4696      	mov	lr, r2
 800be7a:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800be7e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800be82:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800be86:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800be8a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800be8e:	f85d fb04 	ldr.w	pc, [sp], #4
 800be92:	bf00      	nop

0800be94 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__size_function__Setup_Event__response>:
 800be94:	6840      	ldr	r0, [r0, #4]
 800be96:	4770      	bx	lr

0800be98 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_const_function__Setup_Event__response>:
 800be98:	6800      	ldr	r0, [r0, #0]
 800be9a:	4408      	add	r0, r1
 800be9c:	4770      	bx	lr
 800be9e:	bf00      	nop

0800bea0 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__fetch_function__Setup_Event__response>:
 800bea0:	6803      	ldr	r3, [r0, #0]
 800bea2:	5c5b      	ldrb	r3, [r3, r1]
 800bea4:	7013      	strb	r3, [r2, #0]
 800bea6:	4770      	bx	lr

0800bea8 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__assign_function__Setup_Event__response>:
 800bea8:	6803      	ldr	r3, [r0, #0]
 800beaa:	7812      	ldrb	r2, [r2, #0]
 800beac:	545a      	strb	r2, [r3, r1]
 800beae:	4770      	bx	lr

0800beb0 <racs_services__srv__Setup_Request__rosidl_typesupport_introspection_c__Setup_Request_init_function>:
 800beb0:	f008 b940 	b.w	8014134 <racs_services__srv__Setup_Request__init>

0800beb4 <racs_services__srv__Setup_Request__rosidl_typesupport_introspection_c__Setup_Request_fini_function>:
 800beb4:	f008 b942 	b.w	801413c <racs_services__srv__Setup_Request__fini>

0800beb8 <racs_services__srv__Setup_Response__rosidl_typesupport_introspection_c__Setup_Response_init_function>:
 800beb8:	f008 b98a 	b.w	80141d0 <racs_services__srv__Setup_Response__init>

0800bebc <racs_services__srv__Setup_Response__rosidl_typesupport_introspection_c__Setup_Response_fini_function>:
 800bebc:	f008 b98c 	b.w	80141d8 <racs_services__srv__Setup_Response__fini>

0800bec0 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__Setup_Event_init_function>:
 800bec0:	f008 b9c2 	b.w	8014248 <racs_services__srv__Setup_Event__init>

0800bec4 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__Setup_Event_fini_function>:
 800bec4:	f008 b9e2 	b.w	801428c <racs_services__srv__Setup_Event__fini>

0800bec8 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__resize_function__Setup_Event__request>:
 800bec8:	b510      	push	{r4, lr}
 800beca:	4604      	mov	r4, r0
 800becc:	b082      	sub	sp, #8
 800bece:	9101      	str	r1, [sp, #4]
 800bed0:	f008 f96a 	bl	80141a8 <racs_services__srv__Setup_Request__Sequence__fini>
 800bed4:	9901      	ldr	r1, [sp, #4]
 800bed6:	4620      	mov	r0, r4
 800bed8:	b002      	add	sp, #8
 800beda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bede:	f008 b949 	b.w	8014174 <racs_services__srv__Setup_Request__Sequence__init>
 800bee2:	bf00      	nop

0800bee4 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__resize_function__Setup_Event__response>:
 800bee4:	b510      	push	{r4, lr}
 800bee6:	4604      	mov	r4, r0
 800bee8:	b082      	sub	sp, #8
 800beea:	9101      	str	r1, [sp, #4]
 800beec:	f008 f998 	bl	8014220 <racs_services__srv__Setup_Response__Sequence__fini>
 800bef0:	9901      	ldr	r1, [sp, #4]
 800bef2:	4620      	mov	r0, r4
 800bef4:	b002      	add	sp, #8
 800bef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800befa:	f008 b977 	b.w	80141ec <racs_services__srv__Setup_Response__Sequence__init>
 800befe:	bf00      	nop

0800bf00 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_function__Setup_Event__response>:
 800bf00:	6800      	ldr	r0, [r0, #0]
 800bf02:	4408      	add	r0, r1
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop

0800bf08 <racs_services__srv__Setup_Event__rosidl_typesupport_introspection_c__get_function__Setup_Event__request>:
 800bf08:	6800      	ldr	r0, [r0, #0]
 800bf0a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800bf0e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800bf12:	4770      	bx	lr

0800bf14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800bf14:	4b04      	ldr	r3, [pc, #16]	; (800bf28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800bf16:	681a      	ldr	r2, [r3, #0]
 800bf18:	b10a      	cbz	r2, 800bf1e <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0xa>
 800bf1a:	4803      	ldr	r0, [pc, #12]	; (800bf28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800bf1c:	4770      	bx	lr
 800bf1e:	4a03      	ldr	r2, [pc, #12]	; (800bf2c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x18>)
 800bf20:	4801      	ldr	r0, [pc, #4]	; (800bf28 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x14>)
 800bf22:	6812      	ldr	r2, [r2, #0]
 800bf24:	601a      	str	r2, [r3, #0]
 800bf26:	4770      	bx	lr
 800bf28:	20000738 	.word	0x20000738
 800bf2c:	20000a14 	.word	0x20000a14

0800bf30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response>:
 800bf30:	4b04      	ldr	r3, [pc, #16]	; (800bf44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800bf32:	681a      	ldr	r2, [r3, #0]
 800bf34:	b10a      	cbz	r2, 800bf3a <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0xa>
 800bf36:	4803      	ldr	r0, [pc, #12]	; (800bf44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800bf38:	4770      	bx	lr
 800bf3a:	4a03      	ldr	r2, [pc, #12]	; (800bf48 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x18>)
 800bf3c:	4801      	ldr	r0, [pc, #4]	; (800bf44 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x14>)
 800bf3e:	6812      	ldr	r2, [r2, #0]
 800bf40:	601a      	str	r2, [r3, #0]
 800bf42:	4770      	bx	lr
 800bf44:	2000078c 	.word	0x2000078c
 800bf48:	20000a14 	.word	0x20000a14

0800bf4c <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event>:
 800bf4c:	b508      	push	{r3, lr}
 800bf4e:	f002 fd5f 	bl	800ea10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800bf52:	4913      	ldr	r1, [pc, #76]	; (800bfa0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x54>)
 800bf54:	4b13      	ldr	r3, [pc, #76]	; (800bfa4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x58>)
 800bf56:	680a      	ldr	r2, [r1, #0]
 800bf58:	60d8      	str	r0, [r3, #12]
 800bf5a:	b152      	cbz	r2, 800bf72 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x26>
 800bf5c:	4a12      	ldr	r2, [pc, #72]	; (800bfa8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x5c>)
 800bf5e:	6499      	str	r1, [r3, #72]	; 0x48
 800bf60:	6811      	ldr	r1, [r2, #0]
 800bf62:	b171      	cbz	r1, 800bf82 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x36>
 800bf64:	4911      	ldr	r1, [pc, #68]	; (800bfac <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800bf66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800bf6a:	680b      	ldr	r3, [r1, #0]
 800bf6c:	b193      	cbz	r3, 800bf94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x48>
 800bf6e:	480f      	ldr	r0, [pc, #60]	; (800bfac <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800bf70:	bd08      	pop	{r3, pc}
 800bf72:	4a0f      	ldr	r2, [pc, #60]	; (800bfb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800bf74:	6499      	str	r1, [r3, #72]	; 0x48
 800bf76:	6812      	ldr	r2, [r2, #0]
 800bf78:	600a      	str	r2, [r1, #0]
 800bf7a:	4a0b      	ldr	r2, [pc, #44]	; (800bfa8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x5c>)
 800bf7c:	6811      	ldr	r1, [r2, #0]
 800bf7e:	2900      	cmp	r1, #0
 800bf80:	d1f0      	bne.n	800bf64 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x18>
 800bf82:	490b      	ldr	r1, [pc, #44]	; (800bfb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800bf84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800bf88:	6809      	ldr	r1, [r1, #0]
 800bf8a:	6011      	str	r1, [r2, #0]
 800bf8c:	4907      	ldr	r1, [pc, #28]	; (800bfac <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800bf8e:	680b      	ldr	r3, [r1, #0]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d1ec      	bne.n	800bf6e <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x22>
 800bf94:	4b06      	ldr	r3, [pc, #24]	; (800bfb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x64>)
 800bf96:	4805      	ldr	r0, [pc, #20]	; (800bfac <rosidl_typesupport_introspection_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x60>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	600b      	str	r3, [r1, #0]
 800bf9c:	bd08      	pop	{r3, pc}
 800bf9e:	bf00      	nop
 800bfa0:	20000738 	.word	0x20000738
 800bfa4:	200004c8 	.word	0x200004c8
 800bfa8:	2000078c 	.word	0x2000078c
 800bfac:	2000057c 	.word	0x2000057c
 800bfb0:	20000a14 	.word	0x20000a14

0800bfb4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800bfb4:	4b25      	ldr	r3, [pc, #148]	; (800c04c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800bfb6:	681a      	ldr	r2, [r3, #0]
 800bfb8:	b510      	push	{r4, lr}
 800bfba:	b142      	cbz	r2, 800bfce <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x1a>
 800bfbc:	685c      	ldr	r4, [r3, #4]
 800bfbe:	68a3      	ldr	r3, [r4, #8]
 800bfc0:	b163      	cbz	r3, 800bfdc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x28>
 800bfc2:	68e3      	ldr	r3, [r4, #12]
 800bfc4:	b193      	cbz	r3, 800bfec <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x38>
 800bfc6:	6923      	ldr	r3, [r4, #16]
 800bfc8:	b1c3      	cbz	r3, 800bffc <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x48>
 800bfca:	4820      	ldr	r0, [pc, #128]	; (800c04c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800bfcc:	bd10      	pop	{r4, pc}
 800bfce:	4a20      	ldr	r2, [pc, #128]	; (800c050 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800bfd0:	685c      	ldr	r4, [r3, #4]
 800bfd2:	6812      	ldr	r2, [r2, #0]
 800bfd4:	601a      	str	r2, [r3, #0]
 800bfd6:	68a3      	ldr	r3, [r4, #8]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d1f2      	bne.n	800bfc2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xe>
 800bfdc:	4a1d      	ldr	r2, [pc, #116]	; (800c054 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa0>)
 800bfde:	6813      	ldr	r3, [r2, #0]
 800bfe0:	b303      	cbz	r3, 800c024 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x70>
 800bfe2:	6853      	ldr	r3, [r2, #4]
 800bfe4:	60a3      	str	r3, [r4, #8]
 800bfe6:	68e3      	ldr	r3, [r4, #12]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d1ec      	bne.n	800bfc6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x12>
 800bfec:	4b1a      	ldr	r3, [pc, #104]	; (800c058 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa4>)
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	b1e2      	cbz	r2, 800c02c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x78>
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	60e3      	str	r3, [r4, #12]
 800bff6:	6923      	ldr	r3, [r4, #16]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d1e6      	bne.n	800bfca <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x16>
 800bffc:	f002 fd08 	bl	800ea10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c000:	4a14      	ldr	r2, [pc, #80]	; (800c054 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa0>)
 800c002:	4916      	ldr	r1, [pc, #88]	; (800c05c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa8>)
 800c004:	6813      	ldr	r3, [r2, #0]
 800c006:	60c8      	str	r0, [r1, #12]
 800c008:	b1e3      	cbz	r3, 800c044 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x90>
 800c00a:	4b13      	ldr	r3, [pc, #76]	; (800c058 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xa4>)
 800c00c:	648a      	str	r2, [r1, #72]	; 0x48
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	b1a2      	cbz	r2, 800c03c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x88>
 800c012:	4a13      	ldr	r2, [pc, #76]	; (800c060 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0xac>)
 800c014:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800c018:	6813      	ldr	r3, [r2, #0]
 800c01a:	b15b      	cbz	r3, 800c034 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x80>
 800c01c:	6853      	ldr	r3, [r2, #4]
 800c01e:	480b      	ldr	r0, [pc, #44]	; (800c04c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x98>)
 800c020:	6123      	str	r3, [r4, #16]
 800c022:	bd10      	pop	{r4, pc}
 800c024:	4b0a      	ldr	r3, [pc, #40]	; (800c050 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	6013      	str	r3, [r2, #0]
 800c02a:	e7da      	b.n	800bfe2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x2e>
 800c02c:	4a08      	ldr	r2, [pc, #32]	; (800c050 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800c02e:	6812      	ldr	r2, [r2, #0]
 800c030:	601a      	str	r2, [r3, #0]
 800c032:	e7de      	b.n	800bff2 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x3e>
 800c034:	4b06      	ldr	r3, [pc, #24]	; (800c050 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	6013      	str	r3, [r2, #0]
 800c03a:	e7ef      	b.n	800c01c <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x68>
 800c03c:	4a04      	ldr	r2, [pc, #16]	; (800c050 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800c03e:	6812      	ldr	r2, [r2, #0]
 800c040:	601a      	str	r2, [r3, #0]
 800c042:	e7e6      	b.n	800c012 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x5e>
 800c044:	4b02      	ldr	r3, [pc, #8]	; (800c050 <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x9c>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	6013      	str	r3, [r2, #0]
 800c04a:	e7de      	b.n	800c00a <rosidl_typesupport_introspection_c__get_service_type_support_handle__racs_services__srv__Setup+0x56>
 800c04c:	200007b8 	.word	0x200007b8
 800c050:	20000a14 	.word	0x20000a14
 800c054:	20000738 	.word	0x20000738
 800c058:	2000078c 	.word	0x2000078c
 800c05c:	200004c8 	.word	0x200004c8
 800c060:	2000057c 	.word	0x2000057c

0800c064 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Request>:
 800c064:	4800      	ldr	r0, [pc, #0]	; (800c068 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Request+0x4>)
 800c066:	4770      	bx	lr
 800c068:	20000838 	.word	0x20000838

0800c06c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Response>:
 800c06c:	4800      	ldr	r0, [pc, #0]	; (800c070 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Response+0x4>)
 800c06e:	4770      	bx	lr
 800c070:	20000850 	.word	0x20000850

0800c074 <_Control_Response__max_serialized_size>:
 800c074:	2101      	movs	r1, #1
 800c076:	2000      	movs	r0, #0
 800c078:	b508      	push	{r3, lr}
 800c07a:	f004 fb8b 	bl	8010794 <ucdr_alignment>
 800c07e:	3001      	adds	r0, #1
 800c080:	bd08      	pop	{r3, pc}
 800c082:	bf00      	nop

0800c084 <_Control_Response__cdr_deserialize>:
 800c084:	b109      	cbz	r1, 800c08a <_Control_Response__cdr_deserialize+0x6>
 800c086:	f003 b837 	b.w	800f0f8 <ucdr_deserialize_uint8_t>
 800c08a:	4608      	mov	r0, r1
 800c08c:	4770      	bx	lr
 800c08e:	bf00      	nop

0800c090 <_Control_Event__max_serialized_size>:
 800c090:	b500      	push	{lr}
 800c092:	b083      	sub	sp, #12
 800c094:	2301      	movs	r3, #1
 800c096:	2100      	movs	r1, #0
 800c098:	f10d 0007 	add.w	r0, sp, #7
 800c09c:	f88d 3007 	strb.w	r3, [sp, #7]
 800c0a0:	f002 fd66 	bl	800eb70 <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800c0a4:	b003      	add	sp, #12
 800c0a6:	f85d fb04 	ldr.w	pc, [sp], #4
 800c0aa:	bf00      	nop

0800c0ac <get_serialized_size_racs_services__srv__Control_Request>:
 800c0ac:	b1b0      	cbz	r0, 800c0dc <get_serialized_size_racs_services__srv__Control_Request+0x30>
 800c0ae:	b538      	push	{r3, r4, r5, lr}
 800c0b0:	460d      	mov	r5, r1
 800c0b2:	2101      	movs	r1, #1
 800c0b4:	4628      	mov	r0, r5
 800c0b6:	f004 fb6d 	bl	8010794 <ucdr_alignment>
 800c0ba:	1c6b      	adds	r3, r5, #1
 800c0bc:	2101      	movs	r1, #1
 800c0be:	f1c5 050c 	rsb	r5, r5, #12
 800c0c2:	181c      	adds	r4, r3, r0
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	f004 fb65 	bl	8010794 <ucdr_alignment>
 800c0ca:	3001      	adds	r0, #1
 800c0cc:	2102      	movs	r1, #2
 800c0ce:	4404      	add	r4, r0
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	f004 fb5f 	bl	8010794 <ucdr_alignment>
 800c0d6:	4428      	add	r0, r5
 800c0d8:	4420      	add	r0, r4
 800c0da:	bd38      	pop	{r3, r4, r5, pc}
 800c0dc:	4770      	bx	lr
 800c0de:	bf00      	nop

0800c0e0 <get_serialized_size_racs_services__srv__Control_Response>:
 800c0e0:	b138      	cbz	r0, 800c0f2 <get_serialized_size_racs_services__srv__Control_Response+0x12>
 800c0e2:	b508      	push	{r3, lr}
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	2101      	movs	r1, #1
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f004 fb53 	bl	8010794 <ucdr_alignment>
 800c0ee:	3001      	adds	r0, #1
 800c0f0:	bd08      	pop	{r3, pc}
 800c0f2:	4770      	bx	lr

0800c0f4 <_Control_Request__cdr_deserialize>:
 800c0f4:	b538      	push	{r3, r4, r5, lr}
 800c0f6:	460c      	mov	r4, r1
 800c0f8:	b169      	cbz	r1, 800c116 <_Control_Request__cdr_deserialize+0x22>
 800c0fa:	4605      	mov	r5, r0
 800c0fc:	f002 fffc 	bl	800f0f8 <ucdr_deserialize_uint8_t>
 800c100:	1c61      	adds	r1, r4, #1
 800c102:	4628      	mov	r0, r5
 800c104:	f002 fff8 	bl	800f0f8 <ucdr_deserialize_uint8_t>
 800c108:	1ca1      	adds	r1, r4, #2
 800c10a:	4628      	mov	r0, r5
 800c10c:	2206      	movs	r2, #6
 800c10e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c112:	f002 bf59 	b.w	800efc8 <ucdr_deserialize_array_int16_t>
 800c116:	4608      	mov	r0, r1
 800c118:	bd38      	pop	{r3, r4, r5, pc}
 800c11a:	bf00      	nop

0800c11c <_Control_Response__cdr_serialize>:
 800c11c:	460a      	mov	r2, r1
 800c11e:	b118      	cbz	r0, 800c128 <_Control_Response__cdr_serialize+0xc>
 800c120:	7801      	ldrb	r1, [r0, #0]
 800c122:	4610      	mov	r0, r2
 800c124:	f002 bfd2 	b.w	800f0cc <ucdr_serialize_uint8_t>
 800c128:	4770      	bx	lr
 800c12a:	bf00      	nop

0800c12c <_Control_Request__cdr_serialize>:
 800c12c:	b188      	cbz	r0, 800c152 <_Control_Request__cdr_serialize+0x26>
 800c12e:	b538      	push	{r3, r4, r5, lr}
 800c130:	460d      	mov	r5, r1
 800c132:	4604      	mov	r4, r0
 800c134:	7801      	ldrb	r1, [r0, #0]
 800c136:	4628      	mov	r0, r5
 800c138:	f002 ffc8 	bl	800f0cc <ucdr_serialize_uint8_t>
 800c13c:	7861      	ldrb	r1, [r4, #1]
 800c13e:	4628      	mov	r0, r5
 800c140:	f002 ffc4 	bl	800f0cc <ucdr_serialize_uint8_t>
 800c144:	1ca1      	adds	r1, r4, #2
 800c146:	4628      	mov	r0, r5
 800c148:	2206      	movs	r2, #6
 800c14a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c14e:	f002 bee5 	b.w	800ef1c <ucdr_serialize_array_int16_t>
 800c152:	4770      	bx	lr

0800c154 <get_serialized_size_racs_services__srv__Control_Event.part.0>:
 800c154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c158:	460e      	mov	r6, r1
 800c15a:	4605      	mov	r5, r0
 800c15c:	f002 fc6e 	bl	800ea3c <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800c160:	2104      	movs	r1, #4
 800c162:	eb06 0800 	add.w	r8, r6, r0
 800c166:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
 800c16a:	4640      	mov	r0, r8
 800c16c:	f004 fb12 	bl	8010794 <ucdr_alignment>
 800c170:	3004      	adds	r0, #4
 800c172:	4480      	add	r8, r0
 800c174:	f1b9 0f00 	cmp.w	r9, #0
 800c178:	d019      	beq.n	800c1ae <get_serialized_size_racs_services__srv__Control_Event.part.0+0x5a>
 800c17a:	2700      	movs	r7, #0
 800c17c:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800c1fc <get_serialized_size_racs_services__srv__Control_Event.part.0+0xa8>
 800c180:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800c182:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
 800c186:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c18a:	4641      	mov	r1, r8
 800c18c:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800c190:	3701      	adds	r7, #1
 800c192:	695b      	ldr	r3, [r3, #20]
 800c194:	4798      	blx	r3
 800c196:	4604      	mov	r4, r0
 800c198:	4640      	mov	r0, r8
 800c19a:	2c04      	cmp	r4, #4
 800c19c:	4621      	mov	r1, r4
 800c19e:	bf28      	it	cs
 800c1a0:	2104      	movcs	r1, #4
 800c1a2:	f004 faf7 	bl	8010794 <ucdr_alignment>
 800c1a6:	45b9      	cmp	r9, r7
 800c1a8:	4420      	add	r0, r4
 800c1aa:	4480      	add	r8, r0
 800c1ac:	d1e8      	bne.n	800c180 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x2c>
 800c1ae:	4640      	mov	r0, r8
 800c1b0:	2104      	movs	r1, #4
 800c1b2:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800c1b4:	f004 faee 	bl	8010794 <ucdr_alignment>
 800c1b8:	4480      	add	r8, r0
 800c1ba:	f108 0804 	add.w	r8, r8, #4
 800c1be:	b1c7      	cbz	r7, 800c1f2 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x9e>
 800c1c0:	f04f 0900 	mov.w	r9, #0
 800c1c4:	f8df a038 	ldr.w	sl, [pc, #56]	; 800c200 <get_serialized_size_racs_services__srv__Control_Event.part.0+0xac>
 800c1c8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800c1ca:	4641      	mov	r1, r8
 800c1cc:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c1d0:	4448      	add	r0, r9
 800c1d2:	f109 0901 	add.w	r9, r9, #1
 800c1d6:	695b      	ldr	r3, [r3, #20]
 800c1d8:	4798      	blx	r3
 800c1da:	4604      	mov	r4, r0
 800c1dc:	4640      	mov	r0, r8
 800c1de:	2c04      	cmp	r4, #4
 800c1e0:	4621      	mov	r1, r4
 800c1e2:	bf28      	it	cs
 800c1e4:	2104      	movcs	r1, #4
 800c1e6:	f004 fad5 	bl	8010794 <ucdr_alignment>
 800c1ea:	454f      	cmp	r7, r9
 800c1ec:	4420      	add	r0, r4
 800c1ee:	4480      	add	r8, r0
 800c1f0:	d1ea      	bne.n	800c1c8 <get_serialized_size_racs_services__srv__Control_Event.part.0+0x74>
 800c1f2:	eba8 0006 	sub.w	r0, r8, r6
 800c1f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1fa:	bf00      	nop
 800c1fc:	20000838 	.word	0x20000838
 800c200:	20000850 	.word	0x20000850

0800c204 <get_serialized_size_racs_services__srv__Control_Event>:
 800c204:	b108      	cbz	r0, 800c20a <get_serialized_size_racs_services__srv__Control_Event+0x6>
 800c206:	f7ff bfa5 	b.w	800c154 <get_serialized_size_racs_services__srv__Control_Event.part.0>
 800c20a:	4770      	bx	lr

0800c20c <_Control_Event__get_serialized_size>:
 800c20c:	b110      	cbz	r0, 800c214 <_Control_Event__get_serialized_size+0x8>
 800c20e:	2100      	movs	r1, #0
 800c210:	f7ff bfa0 	b.w	800c154 <get_serialized_size_racs_services__srv__Control_Event.part.0>
 800c214:	4770      	bx	lr
 800c216:	bf00      	nop

0800c218 <_Control_Event__cdr_deserialize>:
 800c218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c21c:	460c      	mov	r4, r1
 800c21e:	b082      	sub	sp, #8
 800c220:	2900      	cmp	r1, #0
 800c222:	d045      	beq.n	800c2b0 <_Control_Event__cdr_deserialize+0x98>
 800c224:	4607      	mov	r7, r0
 800c226:	f002 fcc9 	bl	800ebbc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c22a:	4603      	mov	r3, r0
 800c22c:	4621      	mov	r1, r4
 800c22e:	4638      	mov	r0, r7
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	68db      	ldr	r3, [r3, #12]
 800c234:	4798      	blx	r3
 800c236:	4638      	mov	r0, r7
 800c238:	a901      	add	r1, sp, #4
 800c23a:	f003 fa8d 	bl	800f758 <ucdr_deserialize_uint32_t>
 800c23e:	9b01      	ldr	r3, [sp, #4]
 800c240:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c242:	429a      	cmp	r2, r3
 800c244:	d330      	bcc.n	800c2a8 <_Control_Event__cdr_deserialize+0x90>
 800c246:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c248:	b193      	cbz	r3, 800c270 <_Control_Event__cdr_deserialize+0x58>
 800c24a:	2500      	movs	r5, #0
 800c24c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800c2bc <_Control_Event__cdr_deserialize+0xa4>
 800c250:	462e      	mov	r6, r5
 800c252:	e002      	b.n	800c25a <_Control_Event__cdr_deserialize+0x42>
 800c254:	9b01      	ldr	r3, [sp, #4]
 800c256:	429e      	cmp	r6, r3
 800c258:	d20a      	bcs.n	800c270 <_Control_Event__cdr_deserialize+0x58>
 800c25a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800c25c:	4638      	mov	r0, r7
 800c25e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c262:	3601      	adds	r6, #1
 800c264:	4429      	add	r1, r5
 800c266:	350e      	adds	r5, #14
 800c268:	68db      	ldr	r3, [r3, #12]
 800c26a:	4798      	blx	r3
 800c26c:	2800      	cmp	r0, #0
 800c26e:	d1f1      	bne.n	800c254 <_Control_Event__cdr_deserialize+0x3c>
 800c270:	a901      	add	r1, sp, #4
 800c272:	4638      	mov	r0, r7
 800c274:	f003 fa70 	bl	800f758 <ucdr_deserialize_uint32_t>
 800c278:	9b01      	ldr	r3, [sp, #4]
 800c27a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d313      	bcc.n	800c2a8 <_Control_Event__cdr_deserialize+0x90>
 800c280:	63a3      	str	r3, [r4, #56]	; 0x38
 800c282:	b193      	cbz	r3, 800c2aa <_Control_Event__cdr_deserialize+0x92>
 800c284:	2500      	movs	r5, #0
 800c286:	4e0c      	ldr	r6, [pc, #48]	; (800c2b8 <_Control_Event__cdr_deserialize+0xa0>)
 800c288:	e002      	b.n	800c290 <_Control_Event__cdr_deserialize+0x78>
 800c28a:	9b01      	ldr	r3, [sp, #4]
 800c28c:	429d      	cmp	r5, r3
 800c28e:	d20c      	bcs.n	800c2aa <_Control_Event__cdr_deserialize+0x92>
 800c290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c292:	4638      	mov	r0, r7
 800c294:	6873      	ldr	r3, [r6, #4]
 800c296:	4429      	add	r1, r5
 800c298:	3501      	adds	r5, #1
 800c29a:	68db      	ldr	r3, [r3, #12]
 800c29c:	4798      	blx	r3
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	d1f3      	bne.n	800c28a <_Control_Event__cdr_deserialize+0x72>
 800c2a2:	b002      	add	sp, #8
 800c2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2a8:	2000      	movs	r0, #0
 800c2aa:	b002      	add	sp, #8
 800c2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2b0:	4608      	mov	r0, r1
 800c2b2:	b002      	add	sp, #8
 800c2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2b8:	20000850 	.word	0x20000850
 800c2bc:	20000838 	.word	0x20000838

0800c2c0 <_Control_Event__cdr_serialize>:
 800c2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	d03b      	beq.n	800c340 <_Control_Event__cdr_serialize+0x80>
 800c2c8:	4605      	mov	r5, r0
 800c2ca:	460e      	mov	r6, r1
 800c2cc:	f002 fc76 	bl	800ebbc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	4631      	mov	r1, r6
 800c2d4:	4628      	mov	r0, r5
 800c2d6:	685b      	ldr	r3, [r3, #4]
 800c2d8:	689b      	ldr	r3, [r3, #8]
 800c2da:	4798      	blx	r3
 800c2dc:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800c2de:	4630      	mov	r0, r6
 800c2e0:	4639      	mov	r1, r7
 800c2e2:	f003 f909 	bl	800f4f8 <ucdr_serialize_uint32_t>
 800c2e6:	b198      	cbz	r0, 800c310 <_Control_Event__cdr_serialize+0x50>
 800c2e8:	b197      	cbz	r7, 800c310 <_Control_Event__cdr_serialize+0x50>
 800c2ea:	2400      	movs	r4, #0
 800c2ec:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800c34c <_Control_Event__cdr_serialize+0x8c>
 800c2f0:	e001      	b.n	800c2f6 <_Control_Event__cdr_serialize+0x36>
 800c2f2:	42a7      	cmp	r7, r4
 800c2f4:	d00c      	beq.n	800c310 <_Control_Event__cdr_serialize+0x50>
 800c2f6:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800c2fa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800c2fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c300:	4631      	mov	r1, r6
 800c302:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 800c306:	3401      	adds	r4, #1
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	4798      	blx	r3
 800c30c:	2800      	cmp	r0, #0
 800c30e:	d1f0      	bne.n	800c2f2 <_Control_Event__cdr_serialize+0x32>
 800c310:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800c312:	4630      	mov	r0, r6
 800c314:	4639      	mov	r1, r7
 800c316:	f003 f8ef 	bl	800f4f8 <ucdr_serialize_uint32_t>
 800c31a:	4680      	mov	r8, r0
 800c31c:	b180      	cbz	r0, 800c340 <_Control_Event__cdr_serialize+0x80>
 800c31e:	b18f      	cbz	r7, 800c344 <_Control_Event__cdr_serialize+0x84>
 800c320:	2400      	movs	r4, #0
 800c322:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800c350 <_Control_Event__cdr_serialize+0x90>
 800c326:	e001      	b.n	800c32c <_Control_Event__cdr_serialize+0x6c>
 800c328:	42a7      	cmp	r7, r4
 800c32a:	d00b      	beq.n	800c344 <_Control_Event__cdr_serialize+0x84>
 800c32c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800c32e:	4631      	mov	r1, r6
 800c330:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c334:	4420      	add	r0, r4
 800c336:	3401      	adds	r4, #1
 800c338:	689b      	ldr	r3, [r3, #8]
 800c33a:	4798      	blx	r3
 800c33c:	2800      	cmp	r0, #0
 800c33e:	d1f3      	bne.n	800c328 <_Control_Event__cdr_serialize+0x68>
 800c340:	f04f 0800 	mov.w	r8, #0
 800c344:	4640      	mov	r0, r8
 800c346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c34a:	bf00      	nop
 800c34c:	20000838 	.word	0x20000838
 800c350:	20000850 	.word	0x20000850

0800c354 <_Control_Response__get_serialized_size>:
 800c354:	b130      	cbz	r0, 800c364 <_Control_Response__get_serialized_size+0x10>
 800c356:	2101      	movs	r1, #1
 800c358:	2000      	movs	r0, #0
 800c35a:	b508      	push	{r3, lr}
 800c35c:	f004 fa1a 	bl	8010794 <ucdr_alignment>
 800c360:	3001      	adds	r0, #1
 800c362:	bd08      	pop	{r3, pc}
 800c364:	4770      	bx	lr
 800c366:	bf00      	nop

0800c368 <_Control_Request__get_serialized_size>:
 800c368:	b190      	cbz	r0, 800c390 <_Control_Request__get_serialized_size+0x28>
 800c36a:	2101      	movs	r1, #1
 800c36c:	2000      	movs	r0, #0
 800c36e:	b510      	push	{r4, lr}
 800c370:	f004 fa10 	bl	8010794 <ucdr_alignment>
 800c374:	2101      	movs	r1, #1
 800c376:	1844      	adds	r4, r0, r1
 800c378:	4620      	mov	r0, r4
 800c37a:	f004 fa0b 	bl	8010794 <ucdr_alignment>
 800c37e:	3001      	adds	r0, #1
 800c380:	2102      	movs	r1, #2
 800c382:	4404      	add	r4, r0
 800c384:	4620      	mov	r0, r4
 800c386:	f004 fa05 	bl	8010794 <ucdr_alignment>
 800c38a:	300c      	adds	r0, #12
 800c38c:	4420      	add	r0, r4
 800c38e:	bd10      	pop	{r4, pc}
 800c390:	4770      	bx	lr
 800c392:	bf00      	nop

0800c394 <_Control_Request__max_serialized_size>:
 800c394:	b538      	push	{r3, r4, r5, lr}
 800c396:	2101      	movs	r1, #1
 800c398:	2000      	movs	r0, #0
 800c39a:	f004 f9fb 	bl	8010794 <ucdr_alignment>
 800c39e:	2101      	movs	r1, #1
 800c3a0:	1845      	adds	r5, r0, r1
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	f004 f9f6 	bl	8010794 <ucdr_alignment>
 800c3a8:	1c44      	adds	r4, r0, #1
 800c3aa:	2102      	movs	r1, #2
 800c3ac:	442c      	add	r4, r5
 800c3ae:	4620      	mov	r0, r4
 800c3b0:	f004 f9f0 	bl	8010794 <ucdr_alignment>
 800c3b4:	300c      	adds	r0, #12
 800c3b6:	4420      	add	r0, r4
 800c3b8:	bd38      	pop	{r3, r4, r5, pc}
 800c3ba:	bf00      	nop

0800c3bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Event>:
 800c3bc:	4800      	ldr	r0, [pc, #0]	; (800c3c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Control_Event+0x4>)
 800c3be:	4770      	bx	lr
 800c3c0:	20000820 	.word	0x20000820

0800c3c4 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Control>:
 800c3c4:	4800      	ldr	r0, [pc, #0]	; (800c3c8 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Control+0x4>)
 800c3c6:	4770      	bx	lr
 800c3c8:	200007f4 	.word	0x200007f4

0800c3cc <get_serialized_size_racs_services__msg__DirectAccess>:
 800c3cc:	b180      	cbz	r0, 800c3f0 <get_serialized_size_racs_services__msg__DirectAccess+0x24>
 800c3ce:	b538      	push	{r3, r4, r5, lr}
 800c3d0:	460d      	mov	r5, r1
 800c3d2:	2101      	movs	r1, #1
 800c3d4:	4628      	mov	r0, r5
 800c3d6:	f004 f9dd 	bl	8010794 <ucdr_alignment>
 800c3da:	1c6b      	adds	r3, r5, #1
 800c3dc:	f1c5 050c 	rsb	r5, r5, #12
 800c3e0:	2102      	movs	r1, #2
 800c3e2:	181c      	adds	r4, r3, r0
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	f004 f9d5 	bl	8010794 <ucdr_alignment>
 800c3ea:	4428      	add	r0, r5
 800c3ec:	4420      	add	r0, r4
 800c3ee:	bd38      	pop	{r3, r4, r5, pc}
 800c3f0:	4770      	bx	lr
 800c3f2:	bf00      	nop

0800c3f4 <_DirectAccess__cdr_deserialize>:
 800c3f4:	b538      	push	{r3, r4, r5, lr}
 800c3f6:	460c      	mov	r4, r1
 800c3f8:	b149      	cbz	r1, 800c40e <_DirectAccess__cdr_deserialize+0x1a>
 800c3fa:	4605      	mov	r5, r0
 800c3fc:	f002 fe7c 	bl	800f0f8 <ucdr_deserialize_uint8_t>
 800c400:	1ca1      	adds	r1, r4, #2
 800c402:	2206      	movs	r2, #6
 800c404:	4628      	mov	r0, r5
 800c406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c40a:	f002 bddd 	b.w	800efc8 <ucdr_deserialize_array_int16_t>
 800c40e:	4608      	mov	r0, r1
 800c410:	bd38      	pop	{r3, r4, r5, pc}
 800c412:	bf00      	nop

0800c414 <_DirectAccess__cdr_serialize>:
 800c414:	b170      	cbz	r0, 800c434 <_DirectAccess__cdr_serialize+0x20>
 800c416:	b538      	push	{r3, r4, r5, lr}
 800c418:	4604      	mov	r4, r0
 800c41a:	460d      	mov	r5, r1
 800c41c:	4608      	mov	r0, r1
 800c41e:	f814 1b02 	ldrb.w	r1, [r4], #2
 800c422:	f002 fe53 	bl	800f0cc <ucdr_serialize_uint8_t>
 800c426:	4628      	mov	r0, r5
 800c428:	4621      	mov	r1, r4
 800c42a:	2206      	movs	r2, #6
 800c42c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c430:	f002 bd74 	b.w	800ef1c <ucdr_serialize_array_int16_t>
 800c434:	4770      	bx	lr
 800c436:	bf00      	nop

0800c438 <_DirectAccess__get_serialized_size>:
 800c438:	b160      	cbz	r0, 800c454 <_DirectAccess__get_serialized_size+0x1c>
 800c43a:	2101      	movs	r1, #1
 800c43c:	2000      	movs	r0, #0
 800c43e:	b510      	push	{r4, lr}
 800c440:	f004 f9a8 	bl	8010794 <ucdr_alignment>
 800c444:	1c44      	adds	r4, r0, #1
 800c446:	2102      	movs	r1, #2
 800c448:	4620      	mov	r0, r4
 800c44a:	f004 f9a3 	bl	8010794 <ucdr_alignment>
 800c44e:	300c      	adds	r0, #12
 800c450:	4420      	add	r0, r4
 800c452:	bd10      	pop	{r4, pc}
 800c454:	4770      	bx	lr
 800c456:	bf00      	nop

0800c458 <_DirectAccess__max_serialized_size>:
 800c458:	b510      	push	{r4, lr}
 800c45a:	2101      	movs	r1, #1
 800c45c:	2000      	movs	r0, #0
 800c45e:	f004 f999 	bl	8010794 <ucdr_alignment>
 800c462:	1c44      	adds	r4, r0, #1
 800c464:	2102      	movs	r1, #2
 800c466:	4620      	mov	r0, r4
 800c468:	f004 f994 	bl	8010794 <ucdr_alignment>
 800c46c:	300c      	adds	r0, #12
 800c46e:	4420      	add	r0, r4
 800c470:	bd10      	pop	{r4, pc}
 800c472:	bf00      	nop

0800c474 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__DirectAccess>:
 800c474:	4800      	ldr	r0, [pc, #0]	; (800c478 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__DirectAccess+0x4>)
 800c476:	4770      	bx	lr
 800c478:	200008bc 	.word	0x200008bc

0800c47c <get_serialized_size_racs_services__msg__Feedback>:
 800c47c:	b180      	cbz	r0, 800c4a0 <get_serialized_size_racs_services__msg__Feedback+0x24>
 800c47e:	b538      	push	{r3, r4, r5, lr}
 800c480:	460d      	mov	r5, r1
 800c482:	2101      	movs	r1, #1
 800c484:	4628      	mov	r0, r5
 800c486:	f004 f985 	bl	8010794 <ucdr_alignment>
 800c48a:	1c6b      	adds	r3, r5, #1
 800c48c:	f1c5 050c 	rsb	r5, r5, #12
 800c490:	2102      	movs	r1, #2
 800c492:	181c      	adds	r4, r3, r0
 800c494:	4620      	mov	r0, r4
 800c496:	f004 f97d 	bl	8010794 <ucdr_alignment>
 800c49a:	4428      	add	r0, r5
 800c49c:	4420      	add	r0, r4
 800c49e:	bd38      	pop	{r3, r4, r5, pc}
 800c4a0:	4770      	bx	lr
 800c4a2:	bf00      	nop

0800c4a4 <_Feedback__cdr_deserialize>:
 800c4a4:	b538      	push	{r3, r4, r5, lr}
 800c4a6:	460c      	mov	r4, r1
 800c4a8:	b149      	cbz	r1, 800c4be <_Feedback__cdr_deserialize+0x1a>
 800c4aa:	4605      	mov	r5, r0
 800c4ac:	f002 fe24 	bl	800f0f8 <ucdr_deserialize_uint8_t>
 800c4b0:	1ca1      	adds	r1, r4, #2
 800c4b2:	2206      	movs	r2, #6
 800c4b4:	4628      	mov	r0, r5
 800c4b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4ba:	f002 bd85 	b.w	800efc8 <ucdr_deserialize_array_int16_t>
 800c4be:	4608      	mov	r0, r1
 800c4c0:	bd38      	pop	{r3, r4, r5, pc}
 800c4c2:	bf00      	nop

0800c4c4 <_Feedback__cdr_serialize>:
 800c4c4:	b170      	cbz	r0, 800c4e4 <_Feedback__cdr_serialize+0x20>
 800c4c6:	b538      	push	{r3, r4, r5, lr}
 800c4c8:	4604      	mov	r4, r0
 800c4ca:	460d      	mov	r5, r1
 800c4cc:	4608      	mov	r0, r1
 800c4ce:	f814 1b02 	ldrb.w	r1, [r4], #2
 800c4d2:	f002 fdfb 	bl	800f0cc <ucdr_serialize_uint8_t>
 800c4d6:	4628      	mov	r0, r5
 800c4d8:	4621      	mov	r1, r4
 800c4da:	2206      	movs	r2, #6
 800c4dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4e0:	f002 bd1c 	b.w	800ef1c <ucdr_serialize_array_int16_t>
 800c4e4:	4770      	bx	lr
 800c4e6:	bf00      	nop

0800c4e8 <_Feedback__get_serialized_size>:
 800c4e8:	b160      	cbz	r0, 800c504 <_Feedback__get_serialized_size+0x1c>
 800c4ea:	2101      	movs	r1, #1
 800c4ec:	2000      	movs	r0, #0
 800c4ee:	b510      	push	{r4, lr}
 800c4f0:	f004 f950 	bl	8010794 <ucdr_alignment>
 800c4f4:	1c44      	adds	r4, r0, #1
 800c4f6:	2102      	movs	r1, #2
 800c4f8:	4620      	mov	r0, r4
 800c4fa:	f004 f94b 	bl	8010794 <ucdr_alignment>
 800c4fe:	300c      	adds	r0, #12
 800c500:	4420      	add	r0, r4
 800c502:	bd10      	pop	{r4, pc}
 800c504:	4770      	bx	lr
 800c506:	bf00      	nop

0800c508 <_Feedback__max_serialized_size>:
 800c508:	b510      	push	{r4, lr}
 800c50a:	2101      	movs	r1, #1
 800c50c:	2000      	movs	r0, #0
 800c50e:	f004 f941 	bl	8010794 <ucdr_alignment>
 800c512:	1c44      	adds	r4, r0, #1
 800c514:	2102      	movs	r1, #2
 800c516:	4620      	mov	r0, r4
 800c518:	f004 f93c 	bl	8010794 <ucdr_alignment>
 800c51c:	300c      	adds	r0, #12
 800c51e:	4420      	add	r0, r4
 800c520:	bd10      	pop	{r4, pc}
 800c522:	bf00      	nop

0800c524 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Feedback>:
 800c524:	4800      	ldr	r0, [pc, #0]	; (800c528 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__msg__Feedback+0x4>)
 800c526:	4770      	bx	lr
 800c528:	200008f0 	.word	0x200008f0

0800c52c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Request>:
 800c52c:	4800      	ldr	r0, [pc, #0]	; (800c530 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Request+0x4>)
 800c52e:	4770      	bx	lr
 800c530:	20000978 	.word	0x20000978

0800c534 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Response>:
 800c534:	4800      	ldr	r0, [pc, #0]	; (800c538 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Response+0x4>)
 800c536:	4770      	bx	lr
 800c538:	20000990 	.word	0x20000990

0800c53c <_Setup_Response__max_serialized_size>:
 800c53c:	2101      	movs	r1, #1
 800c53e:	2000      	movs	r0, #0
 800c540:	b508      	push	{r3, lr}
 800c542:	f004 f927 	bl	8010794 <ucdr_alignment>
 800c546:	3001      	adds	r0, #1
 800c548:	bd08      	pop	{r3, pc}
 800c54a:	bf00      	nop

0800c54c <_Setup_Response__cdr_deserialize>:
 800c54c:	b109      	cbz	r1, 800c552 <_Setup_Response__cdr_deserialize+0x6>
 800c54e:	f002 bdd3 	b.w	800f0f8 <ucdr_deserialize_uint8_t>
 800c552:	4608      	mov	r0, r1
 800c554:	4770      	bx	lr
 800c556:	bf00      	nop

0800c558 <_Setup_Event__max_serialized_size>:
 800c558:	b500      	push	{lr}
 800c55a:	b083      	sub	sp, #12
 800c55c:	2301      	movs	r3, #1
 800c55e:	2100      	movs	r1, #0
 800c560:	f10d 0007 	add.w	r0, sp, #7
 800c564:	f88d 3007 	strb.w	r3, [sp, #7]
 800c568:	f002 fb02 	bl	800eb70 <max_serialized_size_service_msgs__msg__ServiceEventInfo>
 800c56c:	b003      	add	sp, #12
 800c56e:	f85d fb04 	ldr.w	pc, [sp], #4
 800c572:	bf00      	nop

0800c574 <get_serialized_size_racs_services__srv__Setup_Request.part.0>:
 800c574:	b570      	push	{r4, r5, r6, lr}
 800c576:	4604      	mov	r4, r0
 800c578:	2101      	movs	r1, #1
 800c57a:	f004 f90b 	bl	8010794 <ucdr_alignment>
 800c57e:	2104      	movs	r1, #4
 800c580:	1c65      	adds	r5, r4, #1
 800c582:	f1c4 0404 	rsb	r4, r4, #4
 800c586:	4405      	add	r5, r0
 800c588:	4628      	mov	r0, r5
 800c58a:	f004 f903 	bl	8010794 <ucdr_alignment>
 800c58e:	2104      	movs	r1, #4
 800c590:	1846      	adds	r6, r0, r1
 800c592:	442e      	add	r6, r5
 800c594:	4630      	mov	r0, r6
 800c596:	f004 f8fd 	bl	8010794 <ucdr_alignment>
 800c59a:	2104      	movs	r1, #4
 800c59c:	1845      	adds	r5, r0, r1
 800c59e:	442e      	add	r6, r5
 800c5a0:	4630      	mov	r0, r6
 800c5a2:	f004 f8f7 	bl	8010794 <ucdr_alignment>
 800c5a6:	2104      	movs	r1, #4
 800c5a8:	4408      	add	r0, r1
 800c5aa:	4406      	add	r6, r0
 800c5ac:	4630      	mov	r0, r6
 800c5ae:	f004 f8f1 	bl	8010794 <ucdr_alignment>
 800c5b2:	2104      	movs	r1, #4
 800c5b4:	1845      	adds	r5, r0, r1
 800c5b6:	4435      	add	r5, r6
 800c5b8:	4628      	mov	r0, r5
 800c5ba:	f004 f8eb 	bl	8010794 <ucdr_alignment>
 800c5be:	2104      	movs	r1, #4
 800c5c0:	4408      	add	r0, r1
 800c5c2:	4405      	add	r5, r0
 800c5c4:	4628      	mov	r0, r5
 800c5c6:	f004 f8e5 	bl	8010794 <ucdr_alignment>
 800c5ca:	4420      	add	r0, r4
 800c5cc:	4428      	add	r0, r5
 800c5ce:	bd70      	pop	{r4, r5, r6, pc}

0800c5d0 <get_serialized_size_racs_services__srv__Setup_Request>:
 800c5d0:	b110      	cbz	r0, 800c5d8 <get_serialized_size_racs_services__srv__Setup_Request+0x8>
 800c5d2:	4608      	mov	r0, r1
 800c5d4:	f7ff bfce 	b.w	800c574 <get_serialized_size_racs_services__srv__Setup_Request.part.0>
 800c5d8:	4770      	bx	lr
 800c5da:	bf00      	nop

0800c5dc <_Setup_Request__get_serialized_size>:
 800c5dc:	b110      	cbz	r0, 800c5e4 <_Setup_Request__get_serialized_size+0x8>
 800c5de:	2000      	movs	r0, #0
 800c5e0:	f7ff bfc8 	b.w	800c574 <get_serialized_size_racs_services__srv__Setup_Request.part.0>
 800c5e4:	4770      	bx	lr
 800c5e6:	bf00      	nop

0800c5e8 <get_serialized_size_racs_services__srv__Setup_Response>:
 800c5e8:	b138      	cbz	r0, 800c5fa <get_serialized_size_racs_services__srv__Setup_Response+0x12>
 800c5ea:	b508      	push	{r3, lr}
 800c5ec:	460b      	mov	r3, r1
 800c5ee:	2101      	movs	r1, #1
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f004 f8cf 	bl	8010794 <ucdr_alignment>
 800c5f6:	3001      	adds	r0, #1
 800c5f8:	bd08      	pop	{r3, pc}
 800c5fa:	4770      	bx	lr

0800c5fc <_Setup_Request__cdr_deserialize>:
 800c5fc:	b538      	push	{r3, r4, r5, lr}
 800c5fe:	460c      	mov	r4, r1
 800c600:	b309      	cbz	r1, 800c646 <_Setup_Request__cdr_deserialize+0x4a>
 800c602:	4605      	mov	r5, r0
 800c604:	f002 fd78 	bl	800f0f8 <ucdr_deserialize_uint8_t>
 800c608:	1d21      	adds	r1, r4, #4
 800c60a:	4628      	mov	r0, r5
 800c60c:	f003 ffda 	bl	80105c4 <ucdr_deserialize_float>
 800c610:	f104 0108 	add.w	r1, r4, #8
 800c614:	4628      	mov	r0, r5
 800c616:	f003 ffd5 	bl	80105c4 <ucdr_deserialize_float>
 800c61a:	f104 010c 	add.w	r1, r4, #12
 800c61e:	4628      	mov	r0, r5
 800c620:	f003 ffd0 	bl	80105c4 <ucdr_deserialize_float>
 800c624:	f104 0110 	add.w	r1, r4, #16
 800c628:	4628      	mov	r0, r5
 800c62a:	f003 ffcb 	bl	80105c4 <ucdr_deserialize_float>
 800c62e:	f104 0114 	add.w	r1, r4, #20
 800c632:	4628      	mov	r0, r5
 800c634:	f003 ffc6 	bl	80105c4 <ucdr_deserialize_float>
 800c638:	f104 0118 	add.w	r1, r4, #24
 800c63c:	4628      	mov	r0, r5
 800c63e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c642:	f003 bfbf 	b.w	80105c4 <ucdr_deserialize_float>
 800c646:	4608      	mov	r0, r1
 800c648:	bd38      	pop	{r3, r4, r5, pc}
 800c64a:	bf00      	nop

0800c64c <_Setup_Response__cdr_serialize>:
 800c64c:	460a      	mov	r2, r1
 800c64e:	b118      	cbz	r0, 800c658 <_Setup_Response__cdr_serialize+0xc>
 800c650:	7801      	ldrb	r1, [r0, #0]
 800c652:	4610      	mov	r0, r2
 800c654:	f002 bd3a 	b.w	800f0cc <ucdr_serialize_uint8_t>
 800c658:	4770      	bx	lr
 800c65a:	bf00      	nop

0800c65c <_Setup_Request__cdr_serialize>:
 800c65c:	b330      	cbz	r0, 800c6ac <_Setup_Request__cdr_serialize+0x50>
 800c65e:	b538      	push	{r3, r4, r5, lr}
 800c660:	460d      	mov	r5, r1
 800c662:	4604      	mov	r4, r0
 800c664:	7801      	ldrb	r1, [r0, #0]
 800c666:	4628      	mov	r0, r5
 800c668:	f002 fd30 	bl	800f0cc <ucdr_serialize_uint8_t>
 800c66c:	ed94 0a01 	vldr	s0, [r4, #4]
 800c670:	4628      	mov	r0, r5
 800c672:	f003 ff0f 	bl	8010494 <ucdr_serialize_float>
 800c676:	ed94 0a02 	vldr	s0, [r4, #8]
 800c67a:	4628      	mov	r0, r5
 800c67c:	f003 ff0a 	bl	8010494 <ucdr_serialize_float>
 800c680:	ed94 0a03 	vldr	s0, [r4, #12]
 800c684:	4628      	mov	r0, r5
 800c686:	f003 ff05 	bl	8010494 <ucdr_serialize_float>
 800c68a:	ed94 0a04 	vldr	s0, [r4, #16]
 800c68e:	4628      	mov	r0, r5
 800c690:	f003 ff00 	bl	8010494 <ucdr_serialize_float>
 800c694:	ed94 0a05 	vldr	s0, [r4, #20]
 800c698:	4628      	mov	r0, r5
 800c69a:	f003 fefb 	bl	8010494 <ucdr_serialize_float>
 800c69e:	ed94 0a06 	vldr	s0, [r4, #24]
 800c6a2:	4628      	mov	r0, r5
 800c6a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6a8:	f003 bef4 	b.w	8010494 <ucdr_serialize_float>
 800c6ac:	4770      	bx	lr
 800c6ae:	bf00      	nop

0800c6b0 <get_serialized_size_racs_services__srv__Setup_Event.part.0>:
 800c6b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6b4:	460e      	mov	r6, r1
 800c6b6:	4605      	mov	r5, r0
 800c6b8:	f002 f9c0 	bl	800ea3c <get_serialized_size_service_msgs__msg__ServiceEventInfo>
 800c6bc:	2104      	movs	r1, #4
 800c6be:	eb06 0800 	add.w	r8, r6, r0
 800c6c2:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
 800c6c6:	4640      	mov	r0, r8
 800c6c8:	f004 f864 	bl	8010794 <ucdr_alignment>
 800c6cc:	3004      	adds	r0, #4
 800c6ce:	4480      	add	r8, r0
 800c6d0:	f1b9 0f00 	cmp.w	r9, #0
 800c6d4:	d019      	beq.n	800c70a <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x5a>
 800c6d6:	2700      	movs	r7, #0
 800c6d8:	f8df a07c 	ldr.w	sl, [pc, #124]	; 800c758 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0xa8>
 800c6dc:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800c6de:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
 800c6e2:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c6e6:	4641      	mov	r1, r8
 800c6e8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800c6ec:	3701      	adds	r7, #1
 800c6ee:	695b      	ldr	r3, [r3, #20]
 800c6f0:	4798      	blx	r3
 800c6f2:	4604      	mov	r4, r0
 800c6f4:	4640      	mov	r0, r8
 800c6f6:	2c04      	cmp	r4, #4
 800c6f8:	4621      	mov	r1, r4
 800c6fa:	bf28      	it	cs
 800c6fc:	2104      	movcs	r1, #4
 800c6fe:	f004 f849 	bl	8010794 <ucdr_alignment>
 800c702:	45b9      	cmp	r9, r7
 800c704:	4420      	add	r0, r4
 800c706:	4480      	add	r8, r0
 800c708:	d1e8      	bne.n	800c6dc <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x2c>
 800c70a:	4640      	mov	r0, r8
 800c70c:	2104      	movs	r1, #4
 800c70e:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800c710:	f004 f840 	bl	8010794 <ucdr_alignment>
 800c714:	4480      	add	r8, r0
 800c716:	f108 0804 	add.w	r8, r8, #4
 800c71a:	b1c7      	cbz	r7, 800c74e <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x9e>
 800c71c:	f04f 0900 	mov.w	r9, #0
 800c720:	f8df a038 	ldr.w	sl, [pc, #56]	; 800c75c <get_serialized_size_racs_services__srv__Setup_Event.part.0+0xac>
 800c724:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800c726:	4641      	mov	r1, r8
 800c728:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c72c:	4448      	add	r0, r9
 800c72e:	f109 0901 	add.w	r9, r9, #1
 800c732:	695b      	ldr	r3, [r3, #20]
 800c734:	4798      	blx	r3
 800c736:	4604      	mov	r4, r0
 800c738:	4640      	mov	r0, r8
 800c73a:	2c04      	cmp	r4, #4
 800c73c:	4621      	mov	r1, r4
 800c73e:	bf28      	it	cs
 800c740:	2104      	movcs	r1, #4
 800c742:	f004 f827 	bl	8010794 <ucdr_alignment>
 800c746:	454f      	cmp	r7, r9
 800c748:	4420      	add	r0, r4
 800c74a:	4480      	add	r8, r0
 800c74c:	d1ea      	bne.n	800c724 <get_serialized_size_racs_services__srv__Setup_Event.part.0+0x74>
 800c74e:	eba8 0006 	sub.w	r0, r8, r6
 800c752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c756:	bf00      	nop
 800c758:	20000978 	.word	0x20000978
 800c75c:	20000990 	.word	0x20000990

0800c760 <get_serialized_size_racs_services__srv__Setup_Event>:
 800c760:	b108      	cbz	r0, 800c766 <get_serialized_size_racs_services__srv__Setup_Event+0x6>
 800c762:	f7ff bfa5 	b.w	800c6b0 <get_serialized_size_racs_services__srv__Setup_Event.part.0>
 800c766:	4770      	bx	lr

0800c768 <_Setup_Event__get_serialized_size>:
 800c768:	b110      	cbz	r0, 800c770 <_Setup_Event__get_serialized_size+0x8>
 800c76a:	2100      	movs	r1, #0
 800c76c:	f7ff bfa0 	b.w	800c6b0 <get_serialized_size_racs_services__srv__Setup_Event.part.0>
 800c770:	4770      	bx	lr
 800c772:	bf00      	nop

0800c774 <_Setup_Event__cdr_deserialize>:
 800c774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c778:	460c      	mov	r4, r1
 800c77a:	b082      	sub	sp, #8
 800c77c:	2900      	cmp	r1, #0
 800c77e:	d045      	beq.n	800c80c <_Setup_Event__cdr_deserialize+0x98>
 800c780:	4607      	mov	r7, r0
 800c782:	f002 fa1b 	bl	800ebbc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c786:	4603      	mov	r3, r0
 800c788:	4621      	mov	r1, r4
 800c78a:	4638      	mov	r0, r7
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	68db      	ldr	r3, [r3, #12]
 800c790:	4798      	blx	r3
 800c792:	4638      	mov	r0, r7
 800c794:	a901      	add	r1, sp, #4
 800c796:	f002 ffdf 	bl	800f758 <ucdr_deserialize_uint32_t>
 800c79a:	9b01      	ldr	r3, [sp, #4]
 800c79c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d330      	bcc.n	800c804 <_Setup_Event__cdr_deserialize+0x90>
 800c7a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c7a4:	b193      	cbz	r3, 800c7cc <_Setup_Event__cdr_deserialize+0x58>
 800c7a6:	2500      	movs	r5, #0
 800c7a8:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800c818 <_Setup_Event__cdr_deserialize+0xa4>
 800c7ac:	462e      	mov	r6, r5
 800c7ae:	e002      	b.n	800c7b6 <_Setup_Event__cdr_deserialize+0x42>
 800c7b0:	9b01      	ldr	r3, [sp, #4]
 800c7b2:	429e      	cmp	r6, r3
 800c7b4:	d20a      	bcs.n	800c7cc <_Setup_Event__cdr_deserialize+0x58>
 800c7b6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800c7b8:	4638      	mov	r0, r7
 800c7ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c7be:	3601      	adds	r6, #1
 800c7c0:	4429      	add	r1, r5
 800c7c2:	351c      	adds	r5, #28
 800c7c4:	68db      	ldr	r3, [r3, #12]
 800c7c6:	4798      	blx	r3
 800c7c8:	2800      	cmp	r0, #0
 800c7ca:	d1f1      	bne.n	800c7b0 <_Setup_Event__cdr_deserialize+0x3c>
 800c7cc:	a901      	add	r1, sp, #4
 800c7ce:	4638      	mov	r0, r7
 800c7d0:	f002 ffc2 	bl	800f758 <ucdr_deserialize_uint32_t>
 800c7d4:	9b01      	ldr	r3, [sp, #4]
 800c7d6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d313      	bcc.n	800c804 <_Setup_Event__cdr_deserialize+0x90>
 800c7dc:	63a3      	str	r3, [r4, #56]	; 0x38
 800c7de:	b193      	cbz	r3, 800c806 <_Setup_Event__cdr_deserialize+0x92>
 800c7e0:	2500      	movs	r5, #0
 800c7e2:	4e0c      	ldr	r6, [pc, #48]	; (800c814 <_Setup_Event__cdr_deserialize+0xa0>)
 800c7e4:	e002      	b.n	800c7ec <_Setup_Event__cdr_deserialize+0x78>
 800c7e6:	9b01      	ldr	r3, [sp, #4]
 800c7e8:	429d      	cmp	r5, r3
 800c7ea:	d20c      	bcs.n	800c806 <_Setup_Event__cdr_deserialize+0x92>
 800c7ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7ee:	4638      	mov	r0, r7
 800c7f0:	6873      	ldr	r3, [r6, #4]
 800c7f2:	4429      	add	r1, r5
 800c7f4:	3501      	adds	r5, #1
 800c7f6:	68db      	ldr	r3, [r3, #12]
 800c7f8:	4798      	blx	r3
 800c7fa:	2800      	cmp	r0, #0
 800c7fc:	d1f3      	bne.n	800c7e6 <_Setup_Event__cdr_deserialize+0x72>
 800c7fe:	b002      	add	sp, #8
 800c800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c804:	2000      	movs	r0, #0
 800c806:	b002      	add	sp, #8
 800c808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c80c:	4608      	mov	r0, r1
 800c80e:	b002      	add	sp, #8
 800c810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c814:	20000990 	.word	0x20000990
 800c818:	20000978 	.word	0x20000978

0800c81c <_Setup_Event__cdr_serialize>:
 800c81c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c820:	2800      	cmp	r0, #0
 800c822:	d03b      	beq.n	800c89c <_Setup_Event__cdr_serialize+0x80>
 800c824:	4605      	mov	r5, r0
 800c826:	460e      	mov	r6, r1
 800c828:	f002 f9c8 	bl	800ebbc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>
 800c82c:	4603      	mov	r3, r0
 800c82e:	4631      	mov	r1, r6
 800c830:	4628      	mov	r0, r5
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	689b      	ldr	r3, [r3, #8]
 800c836:	4798      	blx	r3
 800c838:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 800c83a:	4630      	mov	r0, r6
 800c83c:	4639      	mov	r1, r7
 800c83e:	f002 fe5b 	bl	800f4f8 <ucdr_serialize_uint32_t>
 800c842:	b198      	cbz	r0, 800c86c <_Setup_Event__cdr_serialize+0x50>
 800c844:	b197      	cbz	r7, 800c86c <_Setup_Event__cdr_serialize+0x50>
 800c846:	2400      	movs	r4, #0
 800c848:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800c8a8 <_Setup_Event__cdr_serialize+0x8c>
 800c84c:	e001      	b.n	800c852 <_Setup_Event__cdr_serialize+0x36>
 800c84e:	42a7      	cmp	r7, r4
 800c850:	d00c      	beq.n	800c86c <_Setup_Event__cdr_serialize+0x50>
 800c852:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 800c856:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800c858:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c85c:	4631      	mov	r1, r6
 800c85e:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800c862:	3401      	adds	r4, #1
 800c864:	689b      	ldr	r3, [r3, #8]
 800c866:	4798      	blx	r3
 800c868:	2800      	cmp	r0, #0
 800c86a:	d1f0      	bne.n	800c84e <_Setup_Event__cdr_serialize+0x32>
 800c86c:	6baf      	ldr	r7, [r5, #56]	; 0x38
 800c86e:	4630      	mov	r0, r6
 800c870:	4639      	mov	r1, r7
 800c872:	f002 fe41 	bl	800f4f8 <ucdr_serialize_uint32_t>
 800c876:	4680      	mov	r8, r0
 800c878:	b180      	cbz	r0, 800c89c <_Setup_Event__cdr_serialize+0x80>
 800c87a:	b18f      	cbz	r7, 800c8a0 <_Setup_Event__cdr_serialize+0x84>
 800c87c:	2400      	movs	r4, #0
 800c87e:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800c8ac <_Setup_Event__cdr_serialize+0x90>
 800c882:	e001      	b.n	800c888 <_Setup_Event__cdr_serialize+0x6c>
 800c884:	42a7      	cmp	r7, r4
 800c886:	d00b      	beq.n	800c8a0 <_Setup_Event__cdr_serialize+0x84>
 800c888:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800c88a:	4631      	mov	r1, r6
 800c88c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c890:	4420      	add	r0, r4
 800c892:	3401      	adds	r4, #1
 800c894:	689b      	ldr	r3, [r3, #8]
 800c896:	4798      	blx	r3
 800c898:	2800      	cmp	r0, #0
 800c89a:	d1f3      	bne.n	800c884 <_Setup_Event__cdr_serialize+0x68>
 800c89c:	f04f 0800 	mov.w	r8, #0
 800c8a0:	4640      	mov	r0, r8
 800c8a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8a6:	bf00      	nop
 800c8a8:	20000978 	.word	0x20000978
 800c8ac:	20000990 	.word	0x20000990

0800c8b0 <_Setup_Response__get_serialized_size>:
 800c8b0:	b130      	cbz	r0, 800c8c0 <_Setup_Response__get_serialized_size+0x10>
 800c8b2:	2101      	movs	r1, #1
 800c8b4:	2000      	movs	r0, #0
 800c8b6:	b508      	push	{r3, lr}
 800c8b8:	f003 ff6c 	bl	8010794 <ucdr_alignment>
 800c8bc:	3001      	adds	r0, #1
 800c8be:	bd08      	pop	{r3, pc}
 800c8c0:	4770      	bx	lr
 800c8c2:	bf00      	nop

0800c8c4 <max_serialized_size_racs_services__srv__Setup_Request>:
 800c8c4:	b570      	push	{r4, r5, r6, lr}
 800c8c6:	460c      	mov	r4, r1
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	1c65      	adds	r5, r4, #1
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	7003      	strb	r3, [r0, #0]
 800c8d0:	4620      	mov	r0, r4
 800c8d2:	f003 ff5f 	bl	8010794 <ucdr_alignment>
 800c8d6:	4405      	add	r5, r0
 800c8d8:	2104      	movs	r1, #4
 800c8da:	f1c4 0404 	rsb	r4, r4, #4
 800c8de:	4628      	mov	r0, r5
 800c8e0:	f003 ff58 	bl	8010794 <ucdr_alignment>
 800c8e4:	2104      	movs	r1, #4
 800c8e6:	1846      	adds	r6, r0, r1
 800c8e8:	442e      	add	r6, r5
 800c8ea:	4630      	mov	r0, r6
 800c8ec:	f003 ff52 	bl	8010794 <ucdr_alignment>
 800c8f0:	2104      	movs	r1, #4
 800c8f2:	1845      	adds	r5, r0, r1
 800c8f4:	442e      	add	r6, r5
 800c8f6:	4630      	mov	r0, r6
 800c8f8:	f003 ff4c 	bl	8010794 <ucdr_alignment>
 800c8fc:	2104      	movs	r1, #4
 800c8fe:	4408      	add	r0, r1
 800c900:	4406      	add	r6, r0
 800c902:	4630      	mov	r0, r6
 800c904:	f003 ff46 	bl	8010794 <ucdr_alignment>
 800c908:	2104      	movs	r1, #4
 800c90a:	1845      	adds	r5, r0, r1
 800c90c:	4435      	add	r5, r6
 800c90e:	4628      	mov	r0, r5
 800c910:	f003 ff40 	bl	8010794 <ucdr_alignment>
 800c914:	2104      	movs	r1, #4
 800c916:	4408      	add	r0, r1
 800c918:	4405      	add	r5, r0
 800c91a:	4628      	mov	r0, r5
 800c91c:	f003 ff3a 	bl	8010794 <ucdr_alignment>
 800c920:	4420      	add	r0, r4
 800c922:	4428      	add	r0, r5
 800c924:	bd70      	pop	{r4, r5, r6, pc}
 800c926:	bf00      	nop

0800c928 <_Setup_Request__max_serialized_size>:
 800c928:	b500      	push	{lr}
 800c92a:	b083      	sub	sp, #12
 800c92c:	2100      	movs	r1, #0
 800c92e:	f10d 0007 	add.w	r0, sp, #7
 800c932:	f7ff ffc7 	bl	800c8c4 <max_serialized_size_racs_services__srv__Setup_Request>
 800c936:	b003      	add	sp, #12
 800c938:	f85d fb04 	ldr.w	pc, [sp], #4

0800c93c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Event>:
 800c93c:	4800      	ldr	r0, [pc, #0]	; (800c940 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__racs_services__srv__Setup_Event+0x4>)
 800c93e:	4770      	bx	lr
 800c940:	20000960 	.word	0x20000960

0800c944 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Setup>:
 800c944:	4800      	ldr	r0, [pc, #0]	; (800c948 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__racs_services__srv__Setup+0x4>)
 800c946:	4770      	bx	lr
 800c948:	20000934 	.word	0x20000934

0800c94c <rcl_get_zero_initialized_publisher>:
 800c94c:	4b01      	ldr	r3, [pc, #4]	; (800c954 <rcl_get_zero_initialized_publisher+0x8>)
 800c94e:	6818      	ldr	r0, [r3, #0]
 800c950:	4770      	bx	lr
 800c952:	bf00      	nop
 800c954:	0801e3b0 	.word	0x0801e3b0

0800c958 <rcl_publisher_init>:
 800c958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c95c:	b088      	sub	sp, #32
 800c95e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800c960:	2e00      	cmp	r6, #0
 800c962:	d06c      	beq.n	800ca3e <rcl_publisher_init+0xe6>
 800c964:	f106 0a50 	add.w	sl, r6, #80	; 0x50
 800c968:	4605      	mov	r5, r0
 800c96a:	460f      	mov	r7, r1
 800c96c:	4690      	mov	r8, r2
 800c96e:	4650      	mov	r0, sl
 800c970:	4699      	mov	r9, r3
 800c972:	f001 f969 	bl	800dc48 <rcutils_allocator_is_valid>
 800c976:	f080 0401 	eor.w	r4, r0, #1
 800c97a:	b2e4      	uxtb	r4, r4
 800c97c:	2c00      	cmp	r4, #0
 800c97e:	d15e      	bne.n	800ca3e <rcl_publisher_init+0xe6>
 800c980:	2d00      	cmp	r5, #0
 800c982:	d05c      	beq.n	800ca3e <rcl_publisher_init+0xe6>
 800c984:	682b      	ldr	r3, [r5, #0]
 800c986:	b123      	cbz	r3, 800c992 <rcl_publisher_init+0x3a>
 800c988:	2464      	movs	r4, #100	; 0x64
 800c98a:	4620      	mov	r0, r4
 800c98c:	b008      	add	sp, #32
 800c98e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c992:	4638      	mov	r0, r7
 800c994:	f008 f9f4 	bl	8014d80 <rcl_node_is_valid>
 800c998:	2800      	cmp	r0, #0
 800c99a:	d055      	beq.n	800ca48 <rcl_publisher_init+0xf0>
 800c99c:	f1b8 0f00 	cmp.w	r8, #0
 800c9a0:	d04d      	beq.n	800ca3e <rcl_publisher_init+0xe6>
 800c9a2:	fab9 f389 	clz	r3, r9
 800c9a6:	095b      	lsrs	r3, r3, #5
 800c9a8:	f1b9 0f00 	cmp.w	r9, #0
 800c9ac:	d047      	beq.n	800ca3e <rcl_publisher_init+0xe6>
 800c9ae:	aa07      	add	r2, sp, #28
 800c9b0:	9307      	str	r3, [sp, #28]
 800c9b2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800c9b6:	f106 0358 	add.w	r3, r6, #88	; 0x58
 800c9ba:	9205      	str	r2, [sp, #20]
 800c9bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c9c0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c9c4:	4649      	mov	r1, r9
 800c9c6:	4638      	mov	r0, r7
 800c9c8:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800c9cc:	f008 fa50 	bl	8014e70 <rcl_node_resolve_name>
 800c9d0:	2800      	cmp	r0, #0
 800c9d2:	d150      	bne.n	800ca76 <rcl_publisher_init+0x11e>
 800c9d4:	21c8      	movs	r1, #200	; 0xc8
 800c9d6:	2001      	movs	r0, #1
 800c9d8:	e9d6 3217 	ldrd	r3, r2, [r6, #92]	; 0x5c
 800c9dc:	4798      	blx	r3
 800c9de:	6028      	str	r0, [r5, #0]
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	d050      	beq.n	800ca86 <rcl_publisher_init+0x12e>
 800c9e4:	4638      	mov	r0, r7
 800c9e6:	f008 f9ed 	bl	8014dc4 <rcl_node_get_rmw_handle>
 800c9ea:	f106 0364 	add.w	r3, r6, #100	; 0x64
 800c9ee:	4641      	mov	r1, r8
 800c9f0:	9a07      	ldr	r2, [sp, #28]
 800c9f2:	9300      	str	r3, [sp, #0]
 800c9f4:	4633      	mov	r3, r6
 800c9f6:	682c      	ldr	r4, [r5, #0]
 800c9f8:	f001 fa34 	bl	800de64 <rmw_create_publisher>
 800c9fc:	682b      	ldr	r3, [r5, #0]
 800c9fe:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 800ca02:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800ca06:	b370      	cbz	r0, 800ca66 <rcl_publisher_init+0x10e>
 800ca08:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800ca0c:	f001 fb0e 	bl	800e02c <rmw_publisher_get_actual_qos>
 800ca10:	682b      	ldr	r3, [r5, #0]
 800ca12:	4604      	mov	r4, r0
 800ca14:	b9d0      	cbnz	r0, 800ca4c <rcl_publisher_init+0xf4>
 800ca16:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
 800ca1a:	4631      	mov	r1, r6
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800ca22:	2270      	movs	r2, #112	; 0x70
 800ca24:	f00f ffb7 	bl	801c996 <memcpy>
 800ca28:	683a      	ldr	r2, [r7, #0]
 800ca2a:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800ca2e:	9807      	ldr	r0, [sp, #28]
 800ca30:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800ca32:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800ca34:	4798      	blx	r3
 800ca36:	4620      	mov	r0, r4
 800ca38:	b008      	add	sp, #32
 800ca3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca3e:	240b      	movs	r4, #11
 800ca40:	4620      	mov	r0, r4
 800ca42:	b008      	add	sp, #32
 800ca44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca48:	24c8      	movs	r4, #200	; 0xc8
 800ca4a:	e79e      	b.n	800c98a <rcl_publisher_init+0x32>
 800ca4c:	b1cb      	cbz	r3, 800ca82 <rcl_publisher_init+0x12a>
 800ca4e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800ca52:	b142      	cbz	r2, 800ca66 <rcl_publisher_init+0x10e>
 800ca54:	4638      	mov	r0, r7
 800ca56:	f008 f9b5 	bl	8014dc4 <rcl_node_get_rmw_handle>
 800ca5a:	682b      	ldr	r3, [r5, #0]
 800ca5c:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800ca60:	f001 faf8 	bl	800e054 <rmw_destroy_publisher>
 800ca64:	682b      	ldr	r3, [r5, #0]
 800ca66:	4618      	mov	r0, r3
 800ca68:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800ca6a:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800ca6c:	2401      	movs	r4, #1
 800ca6e:	4790      	blx	r2
 800ca70:	2300      	movs	r3, #0
 800ca72:	602b      	str	r3, [r5, #0]
 800ca74:	e7db      	b.n	800ca2e <rcl_publisher_init+0xd6>
 800ca76:	2867      	cmp	r0, #103	; 0x67
 800ca78:	d007      	beq.n	800ca8a <rcl_publisher_init+0x132>
 800ca7a:	2869      	cmp	r0, #105	; 0x69
 800ca7c:	d005      	beq.n	800ca8a <rcl_publisher_init+0x132>
 800ca7e:	280a      	cmp	r0, #10
 800ca80:	d001      	beq.n	800ca86 <rcl_publisher_init+0x12e>
 800ca82:	2401      	movs	r4, #1
 800ca84:	e7d3      	b.n	800ca2e <rcl_publisher_init+0xd6>
 800ca86:	240a      	movs	r4, #10
 800ca88:	e7d1      	b.n	800ca2e <rcl_publisher_init+0xd6>
 800ca8a:	2467      	movs	r4, #103	; 0x67
 800ca8c:	e7cf      	b.n	800ca2e <rcl_publisher_init+0xd6>
 800ca8e:	bf00      	nop

0800ca90 <rcl_publisher_get_default_options>:
 800ca90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca92:	4d1d      	ldr	r5, [pc, #116]	; (800cb08 <rcl_publisher_get_default_options+0x78>)
 800ca94:	b08b      	sub	sp, #44	; 0x2c
 800ca96:	2250      	movs	r2, #80	; 0x50
 800ca98:	491c      	ldr	r1, [pc, #112]	; (800cb0c <rcl_publisher_get_default_options+0x7c>)
 800ca9a:	4604      	mov	r4, r0
 800ca9c:	4628      	mov	r0, r5
 800ca9e:	f00f ff7a 	bl	801c996 <memcpy>
 800caa2:	a802      	add	r0, sp, #8
 800caa4:	f001 f8c2 	bl	800dc2c <rcutils_get_default_allocator>
 800caa8:	f10d 0c08 	add.w	ip, sp, #8
 800caac:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800cab0:	466e      	mov	r6, sp
 800cab2:	2700      	movs	r7, #0
 800cab4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cab8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cabc:	f8dc 3000 	ldr.w	r3, [ip]
 800cac0:	4630      	mov	r0, r6
 800cac2:	f8ce 3000 	str.w	r3, [lr]
 800cac6:	f001 f94f 	bl	800dd68 <rmw_get_default_publisher_options>
 800caca:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800cace:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
 800cad2:	e896 0003 	ldmia.w	r6, {r0, r1}
 800cad6:	e883 0003 	stmia.w	r3, {r0, r1}
 800cada:	f10d 0027 	add.w	r0, sp, #39	; 0x27
 800cade:	f008 f977 	bl	8014dd0 <rcl_get_disable_loaned_message>
 800cae2:	b958      	cbnz	r0, 800cafc <rcl_publisher_get_default_options+0x6c>
 800cae4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800cae8:	f885 306c 	strb.w	r3, [r5, #108]	; 0x6c
 800caec:	2270      	movs	r2, #112	; 0x70
 800caee:	4906      	ldr	r1, [pc, #24]	; (800cb08 <rcl_publisher_get_default_options+0x78>)
 800caf0:	4620      	mov	r0, r4
 800caf2:	f00f ff50 	bl	801c996 <memcpy>
 800caf6:	4620      	mov	r0, r4
 800caf8:	b00b      	add	sp, #44	; 0x2c
 800cafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cafc:	f001 f8c8 	bl	800dc90 <rcutils_reset_error>
 800cb00:	f885 706c 	strb.w	r7, [r5, #108]	; 0x6c
 800cb04:	e7f2      	b.n	800caec <rcl_publisher_get_default_options+0x5c>
 800cb06:	bf00      	nop
 800cb08:	2000b918 	.word	0x2000b918
 800cb0c:	0801e3b8 	.word	0x0801e3b8

0800cb10 <rcl_publish>:
 800cb10:	b1f8      	cbz	r0, 800cb52 <rcl_publish+0x42>
 800cb12:	6803      	ldr	r3, [r0, #0]
 800cb14:	b570      	push	{r4, r5, r6, lr}
 800cb16:	4604      	mov	r4, r0
 800cb18:	b1b3      	cbz	r3, 800cb48 <rcl_publish+0x38>
 800cb1a:	4616      	mov	r6, r2
 800cb1c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800cb20:	b192      	cbz	r2, 800cb48 <rcl_publish+0x38>
 800cb22:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800cb26:	460d      	mov	r5, r1
 800cb28:	f007 fd2e 	bl	8014588 <rcl_context_is_valid>
 800cb2c:	b160      	cbz	r0, 800cb48 <rcl_publish+0x38>
 800cb2e:	6823      	ldr	r3, [r4, #0]
 800cb30:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800cb34:	b140      	cbz	r0, 800cb48 <rcl_publish+0x38>
 800cb36:	b155      	cbz	r5, 800cb4e <rcl_publish+0x3e>
 800cb38:	4632      	mov	r2, r6
 800cb3a:	4629      	mov	r1, r5
 800cb3c:	f001 f932 	bl	800dda4 <rmw_publish>
 800cb40:	3800      	subs	r0, #0
 800cb42:	bf18      	it	ne
 800cb44:	2001      	movne	r0, #1
 800cb46:	bd70      	pop	{r4, r5, r6, pc}
 800cb48:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800cb4c:	bd70      	pop	{r4, r5, r6, pc}
 800cb4e:	200b      	movs	r0, #11
 800cb50:	bd70      	pop	{r4, r5, r6, pc}
 800cb52:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800cb56:	4770      	bx	lr

0800cb58 <rcl_publisher_is_valid>:
 800cb58:	b1a0      	cbz	r0, 800cb84 <rcl_publisher_is_valid+0x2c>
 800cb5a:	6803      	ldr	r3, [r0, #0]
 800cb5c:	b510      	push	{r4, lr}
 800cb5e:	4604      	mov	r4, r0
 800cb60:	b173      	cbz	r3, 800cb80 <rcl_publisher_is_valid+0x28>
 800cb62:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800cb66:	b15a      	cbz	r2, 800cb80 <rcl_publisher_is_valid+0x28>
 800cb68:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800cb6c:	f007 fd0c 	bl	8014588 <rcl_context_is_valid>
 800cb70:	b130      	cbz	r0, 800cb80 <rcl_publisher_is_valid+0x28>
 800cb72:	6823      	ldr	r3, [r4, #0]
 800cb74:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800cb78:	3800      	subs	r0, #0
 800cb7a:	bf18      	it	ne
 800cb7c:	2001      	movne	r0, #1
 800cb7e:	bd10      	pop	{r4, pc}
 800cb80:	2000      	movs	r0, #0
 800cb82:	bd10      	pop	{r4, pc}
 800cb84:	2000      	movs	r0, #0
 800cb86:	4770      	bx	lr

0800cb88 <rcl_publisher_is_valid_except_context>:
 800cb88:	b130      	cbz	r0, 800cb98 <rcl_publisher_is_valid_except_context+0x10>
 800cb8a:	6800      	ldr	r0, [r0, #0]
 800cb8c:	b120      	cbz	r0, 800cb98 <rcl_publisher_is_valid_except_context+0x10>
 800cb8e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 800cb92:	3800      	subs	r0, #0
 800cb94:	bf18      	it	ne
 800cb96:	2001      	movne	r0, #1
 800cb98:	4770      	bx	lr
 800cb9a:	bf00      	nop

0800cb9c <_rclc_check_for_new_data>:
 800cb9c:	2800      	cmp	r0, #0
 800cb9e:	d046      	beq.n	800cc2e <_rclc_check_for_new_data+0x92>
 800cba0:	4603      	mov	r3, r0
 800cba2:	b530      	push	{r4, r5, lr}
 800cba4:	7802      	ldrb	r2, [r0, #0]
 800cba6:	b085      	sub	sp, #20
 800cba8:	2a0a      	cmp	r2, #10
 800cbaa:	d842      	bhi.n	800cc32 <_rclc_check_for_new_data+0x96>
 800cbac:	e8df f002 	tbb	[pc, r2]
 800cbb0:	14181212 	.word	0x14181212
 800cbb4:	06060614 	.word	0x06060614
 800cbb8:	2e1a      	.short	0x2e1a
 800cbba:	16          	.byte	0x16
 800cbbb:	00          	.byte	0x00
 800cbbc:	6a0a      	ldr	r2, [r1, #32]
 800cbbe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800cbc0:	2000      	movs	r0, #0
 800cbc2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800cbc6:	1a12      	subs	r2, r2, r0
 800cbc8:	bf18      	it	ne
 800cbca:	2201      	movne	r2, #1
 800cbcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800cbd0:	b005      	add	sp, #20
 800cbd2:	bd30      	pop	{r4, r5, pc}
 800cbd4:	680a      	ldr	r2, [r1, #0]
 800cbd6:	e7f2      	b.n	800cbbe <_rclc_check_for_new_data+0x22>
 800cbd8:	698a      	ldr	r2, [r1, #24]
 800cbda:	e7f0      	b.n	800cbbe <_rclc_check_for_new_data+0x22>
 800cbdc:	688a      	ldr	r2, [r1, #8]
 800cbde:	e7ee      	b.n	800cbbe <_rclc_check_for_new_data+0x22>
 800cbe0:	690a      	ldr	r2, [r1, #16]
 800cbe2:	e7ec      	b.n	800cbbe <_rclc_check_for_new_data+0x22>
 800cbe4:	685c      	ldr	r4, [r3, #4]
 800cbe6:	4608      	mov	r0, r1
 800cbe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cbec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cbf4:	f104 0110 	add.w	r1, r4, #16
 800cbf8:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800cbfc:	9500      	str	r5, [sp, #0]
 800cbfe:	f104 0341 	add.w	r3, r4, #65	; 0x41
 800cc02:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800cc06:	f00a fa0f 	bl	8017028 <rcl_action_client_wait_set_get_entities_ready>
 800cc0a:	e7e1      	b.n	800cbd0 <_rclc_check_for_new_data+0x34>
 800cc0c:	685c      	ldr	r4, [r3, #4]
 800cc0e:	4608      	mov	r0, r1
 800cc10:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800cc14:	f104 0123 	add.w	r1, r4, #35	; 0x23
 800cc18:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800cc1c:	e9cd 2100 	strd	r2, r1, [sp]
 800cc20:	f104 0220 	add.w	r2, r4, #32
 800cc24:	f104 0110 	add.w	r1, r4, #16
 800cc28:	f00a fc16 	bl	8017458 <rcl_action_server_wait_set_get_entities_ready>
 800cc2c:	e7d0      	b.n	800cbd0 <_rclc_check_for_new_data+0x34>
 800cc2e:	200b      	movs	r0, #11
 800cc30:	4770      	bx	lr
 800cc32:	2001      	movs	r0, #1
 800cc34:	e7cc      	b.n	800cbd0 <_rclc_check_for_new_data+0x34>
 800cc36:	bf00      	nop

0800cc38 <_rclc_take_new_data>:
 800cc38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc3a:	b099      	sub	sp, #100	; 0x64
 800cc3c:	2800      	cmp	r0, #0
 800cc3e:	f000 8088 	beq.w	800cd52 <_rclc_take_new_data+0x11a>
 800cc42:	7803      	ldrb	r3, [r0, #0]
 800cc44:	4604      	mov	r4, r0
 800cc46:	2b0a      	cmp	r3, #10
 800cc48:	f200 8167 	bhi.w	800cf1a <_rclc_take_new_data+0x2e2>
 800cc4c:	e8df f003 	tbb	[pc, r3]
 800cc50:	44152d2d 	.word	0x44152d2d
 800cc54:	19191944 	.word	0x19191944
 800cc58:	065a      	.short	0x065a
 800cc5a:	15          	.byte	0x15
 800cc5b:	00          	.byte	0x00
 800cc5c:	6840      	ldr	r0, [r0, #4]
 800cc5e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	f040 80b2 	bne.w	800cdcc <_rclc_take_new_data+0x194>
 800cc68:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	f040 80e4 	bne.w	800ce3a <_rclc_take_new_data+0x202>
 800cc72:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d16f      	bne.n	800cd5a <_rclc_take_new_data+0x122>
 800cc7a:	2500      	movs	r5, #0
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	b019      	add	sp, #100	; 0x64
 800cc80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc82:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800cc84:	6a0b      	ldr	r3, [r1, #32]
 800cc86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d0f5      	beq.n	800cc7a <_rclc_take_new_data+0x42>
 800cc8e:	6882      	ldr	r2, [r0, #8]
 800cc90:	f100 0110 	add.w	r1, r0, #16
 800cc94:	6840      	ldr	r0, [r0, #4]
 800cc96:	f008 fb97 	bl	80153c8 <rcl_take_request>
 800cc9a:	4605      	mov	r5, r0
 800cc9c:	2800      	cmp	r0, #0
 800cc9e:	d0ec      	beq.n	800cc7a <_rclc_take_new_data+0x42>
 800cca0:	f240 2359 	movw	r3, #601	; 0x259
 800cca4:	4298      	cmp	r0, r3
 800cca6:	d013      	beq.n	800ccd0 <_rclc_take_new_data+0x98>
 800cca8:	e029      	b.n	800ccfe <_rclc_take_new_data+0xc6>
 800ccaa:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ccac:	680b      	ldr	r3, [r1, #0]
 800ccae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d0e1      	beq.n	800cc7a <_rclc_take_new_data+0x42>
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	aa0a      	add	r2, sp, #40	; 0x28
 800ccba:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800ccbe:	f008 fd91 	bl	80157e4 <rcl_take>
 800ccc2:	4605      	mov	r5, r0
 800ccc4:	2800      	cmp	r0, #0
 800ccc6:	d0d9      	beq.n	800cc7c <_rclc_take_new_data+0x44>
 800ccc8:	f240 1391 	movw	r3, #401	; 0x191
 800cccc:	4298      	cmp	r0, r3
 800ccce:	d116      	bne.n	800ccfe <_rclc_take_new_data+0xc6>
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800ccd6:	e7d1      	b.n	800cc7c <_rclc_take_new_data+0x44>
 800ccd8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ccda:	698b      	ldr	r3, [r1, #24]
 800ccdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d0ca      	beq.n	800cc7a <_rclc_take_new_data+0x42>
 800cce4:	6882      	ldr	r2, [r0, #8]
 800cce6:	f100 0110 	add.w	r1, r0, #16
 800ccea:	6840      	ldr	r0, [r0, #4]
 800ccec:	f007 fbbc 	bl	8014468 <rcl_take_response>
 800ccf0:	4605      	mov	r5, r0
 800ccf2:	2800      	cmp	r0, #0
 800ccf4:	d0c1      	beq.n	800cc7a <_rclc_take_new_data+0x42>
 800ccf6:	f240 13f5 	movw	r3, #501	; 0x1f5
 800ccfa:	4298      	cmp	r0, r3
 800ccfc:	d0be      	beq.n	800cc7c <_rclc_take_new_data+0x44>
 800ccfe:	f000 ffc7 	bl	800dc90 <rcutils_reset_error>
 800cd02:	e7bb      	b.n	800cc7c <_rclc_take_new_data+0x44>
 800cd04:	6840      	ldr	r0, [r0, #4]
 800cd06:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d17d      	bne.n	800ce0a <_rclc_take_new_data+0x1d2>
 800cd0e:	69c3      	ldr	r3, [r0, #28]
 800cd10:	b11b      	cbz	r3, 800cd1a <_rclc_take_new_data+0xe2>
 800cd12:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d144      	bne.n	800cda4 <_rclc_take_new_data+0x16c>
 800cd1a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	f040 80ac 	bne.w	800ce7c <_rclc_take_new_data+0x244>
 800cd24:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d0a6      	beq.n	800cc7a <_rclc_take_new_data+0x42>
 800cd2c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800cd2e:	a90a      	add	r1, sp, #40	; 0x28
 800cd30:	3010      	adds	r0, #16
 800cd32:	f00a f851 	bl	8016dd8 <rcl_action_take_result_response>
 800cd36:	4605      	mov	r5, r0
 800cd38:	2800      	cmp	r0, #0
 800cd3a:	d1e0      	bne.n	800ccfe <_rclc_take_new_data+0xc6>
 800cd3c:	6860      	ldr	r0, [r4, #4]
 800cd3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800cd42:	f00a fcb9 	bl	80176b8 <rclc_action_find_handle_by_result_request_sequence_number>
 800cd46:	2800      	cmp	r0, #0
 800cd48:	d098      	beq.n	800cc7c <_rclc_take_new_data+0x44>
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 800cd50:	e794      	b.n	800cc7c <_rclc_take_new_data+0x44>
 800cd52:	250b      	movs	r5, #11
 800cd54:	4628      	mov	r0, r5
 800cd56:	b019      	add	sp, #100	; 0x64
 800cd58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd5a:	ae04      	add	r6, sp, #16
 800cd5c:	3010      	adds	r0, #16
 800cd5e:	aa0a      	add	r2, sp, #40	; 0x28
 800cd60:	4631      	mov	r1, r6
 800cd62:	f00a faad 	bl	80172c0 <rcl_action_take_cancel_request>
 800cd66:	4605      	mov	r5, r0
 800cd68:	2800      	cmp	r0, #0
 800cd6a:	d1c8      	bne.n	800ccfe <_rclc_take_new_data+0xc6>
 800cd6c:	a90a      	add	r1, sp, #40	; 0x28
 800cd6e:	6860      	ldr	r0, [r4, #4]
 800cd70:	f00a fc62 	bl	8017638 <rclc_action_find_goal_handle_by_uuid>
 800cd74:	4607      	mov	r7, r0
 800cd76:	2800      	cmp	r0, #0
 800cd78:	f000 80bb 	beq.w	800cef2 <_rclc_take_new_data+0x2ba>
 800cd7c:	2101      	movs	r1, #1
 800cd7e:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800cd82:	f00a fbe3 	bl	801754c <rcl_action_transition_goal_state>
 800cd86:	2803      	cmp	r0, #3
 800cd88:	4684      	mov	ip, r0
 800cd8a:	f040 80a7 	bne.w	800cedc <_rclc_take_new_data+0x2a4>
 800cd8e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800cd92:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800cd94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cd96:	e896 0003 	ldmia.w	r6, {r0, r1}
 800cd9a:	e884 0003 	stmia.w	r4, {r0, r1}
 800cd9e:	f887 c008 	strb.w	ip, [r7, #8]
 800cda2:	e76b      	b.n	800cc7c <_rclc_take_new_data+0x44>
 800cda4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800cda6:	3010      	adds	r0, #16
 800cda8:	f00a f896 	bl	8016ed8 <rcl_action_take_feedback>
 800cdac:	4605      	mov	r5, r0
 800cdae:	2800      	cmp	r0, #0
 800cdb0:	d1a5      	bne.n	800ccfe <_rclc_take_new_data+0xc6>
 800cdb2:	6860      	ldr	r0, [r4, #4]
 800cdb4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800cdb6:	f00a fc3f 	bl	8017638 <rclc_action_find_goal_handle_by_uuid>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	2800      	cmp	r0, #0
 800cdbe:	f000 80a3 	beq.w	800cf08 <_rclc_take_new_data+0x2d0>
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	6860      	ldr	r0, [r4, #4]
 800cdc6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800cdca:	e7a6      	b.n	800cd1a <_rclc_take_new_data+0xe2>
 800cdcc:	f00a fc0e 	bl	80175ec <rclc_action_take_goal_handle>
 800cdd0:	4606      	mov	r6, r0
 800cdd2:	6860      	ldr	r0, [r4, #4]
 800cdd4:	2e00      	cmp	r6, #0
 800cdd6:	f43f af47 	beq.w	800cc68 <_rclc_take_new_data+0x30>
 800cdda:	6070      	str	r0, [r6, #4]
 800cddc:	f106 0128 	add.w	r1, r6, #40	; 0x28
 800cde0:	69f2      	ldr	r2, [r6, #28]
 800cde2:	3010      	adds	r0, #16
 800cde4:	f00a f9b6 	bl	8017154 <rcl_action_take_goal_request>
 800cde8:	4605      	mov	r5, r0
 800cdea:	2800      	cmp	r0, #0
 800cdec:	f040 808e 	bne.w	800cf0c <_rclc_take_new_data+0x2d4>
 800cdf0:	69f7      	ldr	r7, [r6, #28]
 800cdf2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800cdf4:	7235      	strb	r5, [r6, #8]
 800cdf6:	f8c6 0009 	str.w	r0, [r6, #9]
 800cdfa:	f8c6 100d 	str.w	r1, [r6, #13]
 800cdfe:	6860      	ldr	r0, [r4, #4]
 800ce00:	f8c6 2011 	str.w	r2, [r6, #17]
 800ce04:	f8c6 3015 	str.w	r3, [r6, #21]
 800ce08:	e72e      	b.n	800cc68 <_rclc_take_new_data+0x30>
 800ce0a:	aa04      	add	r2, sp, #16
 800ce0c:	a90a      	add	r1, sp, #40	; 0x28
 800ce0e:	3010      	adds	r0, #16
 800ce10:	f009 ff6a 	bl	8016ce8 <rcl_action_take_goal_response>
 800ce14:	4605      	mov	r5, r0
 800ce16:	2800      	cmp	r0, #0
 800ce18:	f47f af71 	bne.w	800ccfe <_rclc_take_new_data+0xc6>
 800ce1c:	6860      	ldr	r0, [r4, #4]
 800ce1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ce22:	f00a fc37 	bl	8017694 <rclc_action_find_handle_by_goal_request_sequence_number>
 800ce26:	b130      	cbz	r0, 800ce36 <_rclc_take_new_data+0x1fe>
 800ce28:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800ce32:	f880 2020 	strb.w	r2, [r0, #32]
 800ce36:	6860      	ldr	r0, [r4, #4]
 800ce38:	e769      	b.n	800cd0e <_rclc_take_new_data+0xd6>
 800ce3a:	3010      	adds	r0, #16
 800ce3c:	aa04      	add	r2, sp, #16
 800ce3e:	a90a      	add	r1, sp, #40	; 0x28
 800ce40:	f00a f9fe 	bl	8017240 <rcl_action_take_result_request>
 800ce44:	4605      	mov	r5, r0
 800ce46:	2800      	cmp	r0, #0
 800ce48:	f47f af59 	bne.w	800ccfe <_rclc_take_new_data+0xc6>
 800ce4c:	a904      	add	r1, sp, #16
 800ce4e:	6860      	ldr	r0, [r4, #4]
 800ce50:	f00a fbf2 	bl	8017638 <rclc_action_find_goal_handle_by_uuid>
 800ce54:	4607      	mov	r7, r0
 800ce56:	b160      	cbz	r0, 800ce72 <_rclc_take_new_data+0x23a>
 800ce58:	ad0a      	add	r5, sp, #40	; 0x28
 800ce5a:	f100 0640 	add.w	r6, r0, #64	; 0x40
 800ce5e:	f04f 0c02 	mov.w	ip, #2
 800ce62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ce64:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ce66:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ce6a:	e886 0003 	stmia.w	r6, {r0, r1}
 800ce6e:	f887 c008 	strb.w	ip, [r7, #8]
 800ce72:	6860      	ldr	r0, [r4, #4]
 800ce74:	2300      	movs	r3, #0
 800ce76:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 800ce7a:	e6fa      	b.n	800cc72 <_rclc_take_new_data+0x3a>
 800ce7c:	f100 0230 	add.w	r2, r0, #48	; 0x30
 800ce80:	a90a      	add	r1, sp, #40	; 0x28
 800ce82:	3010      	adds	r0, #16
 800ce84:	f009 ffe8 	bl	8016e58 <rcl_action_take_cancel_response>
 800ce88:	4605      	mov	r5, r0
 800ce8a:	2800      	cmp	r0, #0
 800ce8c:	f47f af37 	bne.w	800ccfe <_rclc_take_new_data+0xc6>
 800ce90:	6860      	ldr	r0, [r4, #4]
 800ce92:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ce96:	f00a fc21 	bl	80176dc <rclc_action_find_handle_by_cancel_request_sequence_number>
 800ce9a:	4606      	mov	r6, r0
 800ce9c:	6860      	ldr	r0, [r4, #4]
 800ce9e:	2e00      	cmp	r6, #0
 800cea0:	f43f af40 	beq.w	800cd24 <_rclc_take_new_data+0xec>
 800cea4:	2701      	movs	r7, #1
 800cea6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800cea8:	84b7      	strh	r7, [r6, #36]	; 0x24
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	f43f af3a 	beq.w	800cd24 <_rclc_take_new_data+0xec>
 800ceb0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ceb2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800ceb6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800ceba:	f00a fbbd 	bl	8017638 <rclc_action_find_goal_handle_by_uuid>
 800cebe:	b138      	cbz	r0, 800ced0 <_rclc_take_new_data+0x298>
 800cec0:	6860      	ldr	r0, [r4, #4]
 800cec2:	3501      	adds	r5, #1
 800cec4:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 800cec8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ceca:	42ab      	cmp	r3, r5
 800cecc:	d8f0      	bhi.n	800ceb0 <_rclc_take_new_data+0x278>
 800cece:	e729      	b.n	800cd24 <_rclc_take_new_data+0xec>
 800ced0:	6860      	ldr	r0, [r4, #4]
 800ced2:	3501      	adds	r5, #1
 800ced4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ced6:	42ab      	cmp	r3, r5
 800ced8:	d8ea      	bhi.n	800ceb0 <_rclc_take_new_data+0x278>
 800ceda:	e723      	b.n	800cd24 <_rclc_take_new_data+0xec>
 800cedc:	ab06      	add	r3, sp, #24
 800cede:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cee0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cee4:	2103      	movs	r1, #3
 800cee6:	6860      	ldr	r0, [r4, #4]
 800cee8:	e896 000c 	ldmia.w	r6, {r2, r3}
 800ceec:	f00a fc6c 	bl	80177c8 <rclc_action_server_goal_cancel_reject>
 800cef0:	e6c4      	b.n	800cc7c <_rclc_take_new_data+0x44>
 800cef2:	ab06      	add	r3, sp, #24
 800cef4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cef6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800cefa:	2102      	movs	r1, #2
 800cefc:	6860      	ldr	r0, [r4, #4]
 800cefe:	e896 000c 	ldmia.w	r6, {r2, r3}
 800cf02:	f00a fc61 	bl	80177c8 <rclc_action_server_goal_cancel_reject>
 800cf06:	e6b9      	b.n	800cc7c <_rclc_take_new_data+0x44>
 800cf08:	6860      	ldr	r0, [r4, #4]
 800cf0a:	e706      	b.n	800cd1a <_rclc_take_new_data+0xe2>
 800cf0c:	4631      	mov	r1, r6
 800cf0e:	6860      	ldr	r0, [r4, #4]
 800cf10:	f00a fb7c 	bl	801760c <rclc_action_remove_used_goal_handle>
 800cf14:	f000 febc 	bl	800dc90 <rcutils_reset_error>
 800cf18:	e6b0      	b.n	800cc7c <_rclc_take_new_data+0x44>
 800cf1a:	2501      	movs	r5, #1
 800cf1c:	e6ae      	b.n	800cc7c <_rclc_take_new_data+0x44>
 800cf1e:	bf00      	nop

0800cf20 <_rclc_execute.part.0>:
 800cf20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf22:	7803      	ldrb	r3, [r0, #0]
 800cf24:	b085      	sub	sp, #20
 800cf26:	4604      	mov	r4, r0
 800cf28:	2b0a      	cmp	r3, #10
 800cf2a:	f200 8139 	bhi.w	800d1a0 <_rclc_execute.part.0+0x280>
 800cf2e:	e8df f003 	tbb	[pc, r3]
 800cf32:	4268      	.short	0x4268
 800cf34:	06a75b4d 	.word	0x06a75b4d
 800cf38:	721d0606 	.word	0x721d0606
 800cf3c:	62          	.byte	0x62
 800cf3d:	00          	.byte	0x00
 800cf3e:	2b06      	cmp	r3, #6
 800cf40:	f000 8126 	beq.w	800d190 <_rclc_execute.part.0+0x270>
 800cf44:	2b07      	cmp	r3, #7
 800cf46:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800cf48:	f040 811c 	bne.w	800d184 <_rclc_execute.part.0+0x264>
 800cf4c:	f104 0510 	add.w	r5, r4, #16
 800cf50:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800cf54:	6880      	ldr	r0, [r0, #8]
 800cf56:	4798      	blx	r3
 800cf58:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800cf5a:	4629      	mov	r1, r5
 800cf5c:	6860      	ldr	r0, [r4, #4]
 800cf5e:	f008 fa83 	bl	8015468 <rcl_send_response>
 800cf62:	4604      	mov	r4, r0
 800cf64:	b378      	cbz	r0, 800cfc6 <_rclc_execute.part.0+0xa6>
 800cf66:	f000 fe93 	bl	800dc90 <rcutils_reset_error>
 800cf6a:	e02c      	b.n	800cfc6 <_rclc_execute.part.0+0xa6>
 800cf6c:	6840      	ldr	r0, [r0, #4]
 800cf6e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	f000 808e 	beq.w	800d094 <_rclc_execute.part.0+0x174>
 800cf78:	2600      	movs	r6, #0
 800cf7a:	2701      	movs	r7, #1
 800cf7c:	e004      	b.n	800cf88 <_rclc_execute.part.0+0x68>
 800cf7e:	f00a fb0f 	bl	80175a0 <rclc_action_send_result_request>
 800cf82:	b998      	cbnz	r0, 800cfac <_rclc_execute.part.0+0x8c>
 800cf84:	722f      	strb	r7, [r5, #8]
 800cf86:	6860      	ldr	r0, [r4, #4]
 800cf88:	f00a fbba 	bl	8017700 <rclc_action_find_first_handle_with_goal_response>
 800cf8c:	4605      	mov	r5, r0
 800cf8e:	2800      	cmp	r0, #0
 800cf90:	d07f      	beq.n	800d092 <_rclc_execute.part.0+0x172>
 800cf92:	6863      	ldr	r3, [r4, #4]
 800cf94:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800cf96:	699b      	ldr	r3, [r3, #24]
 800cf98:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 800cf9c:	f885 6020 	strb.w	r6, [r5, #32]
 800cfa0:	4798      	blx	r3
 800cfa2:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800cfa6:	4628      	mov	r0, r5
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d1e8      	bne.n	800cf7e <_rclc_execute.part.0+0x5e>
 800cfac:	6860      	ldr	r0, [r4, #4]
 800cfae:	4629      	mov	r1, r5
 800cfb0:	f00a fb2c 	bl	801760c <rclc_action_remove_used_goal_handle>
 800cfb4:	e7e7      	b.n	800cf86 <_rclc_execute.part.0+0x66>
 800cfb6:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800cfba:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 800cfbe:	b100      	cbz	r0, 800cfc2 <_rclc_execute.part.0+0xa2>
 800cfc0:	68a0      	ldr	r0, [r4, #8]
 800cfc2:	2400      	movs	r4, #0
 800cfc4:	4798      	blx	r3
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	b005      	add	sp, #20
 800cfca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfcc:	6840      	ldr	r0, [r0, #4]
 800cfce:	f008 ff43 	bl	8015e58 <rcl_timer_call>
 800cfd2:	f240 3321 	movw	r3, #801	; 0x321
 800cfd6:	4604      	mov	r4, r0
 800cfd8:	4298      	cmp	r0, r3
 800cfda:	d001      	beq.n	800cfe0 <_rclc_execute.part.0+0xc0>
 800cfdc:	2800      	cmp	r0, #0
 800cfde:	d1c2      	bne.n	800cf66 <_rclc_execute.part.0+0x46>
 800cfe0:	2400      	movs	r4, #0
 800cfe2:	4620      	mov	r0, r4
 800cfe4:	b005      	add	sp, #20
 800cfe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfe8:	2400      	movs	r4, #0
 800cfea:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800cfec:	6880      	ldr	r0, [r0, #8]
 800cfee:	4798      	blx	r3
 800cff0:	4620      	mov	r0, r4
 800cff2:	b005      	add	sp, #20
 800cff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cff6:	2400      	movs	r4, #0
 800cff8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800cffa:	4798      	blx	r3
 800cffc:	4620      	mov	r0, r4
 800cffe:	b005      	add	sp, #20
 800d000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d002:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800d006:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d008:	b100      	cbz	r0, 800d00c <_rclc_execute.part.0+0xec>
 800d00a:	68a0      	ldr	r0, [r4, #8]
 800d00c:	2400      	movs	r4, #0
 800d00e:	4798      	blx	r3
 800d010:	4620      	mov	r0, r4
 800d012:	b005      	add	sp, #20
 800d014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d016:	6840      	ldr	r0, [r0, #4]
 800d018:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800d01c:	bb3b      	cbnz	r3, 800d06e <_rclc_execute.part.0+0x14e>
 800d01e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d07d      	beq.n	800d122 <_rclc_execute.part.0+0x202>
 800d026:	f640 0634 	movw	r6, #2100	; 0x834
 800d02a:	2701      	movs	r7, #1
 800d02c:	e007      	b.n	800d03e <_rclc_execute.part.0+0x11e>
 800d02e:	4628      	mov	r0, r5
 800d030:	f00a fb7e 	bl	8017730 <rclc_action_server_response_goal_request>
 800d034:	4629      	mov	r1, r5
 800d036:	6860      	ldr	r0, [r4, #4]
 800d038:	f00a fae8 	bl	801760c <rclc_action_remove_used_goal_handle>
 800d03c:	6860      	ldr	r0, [r4, #4]
 800d03e:	2100      	movs	r1, #0
 800d040:	f00a fb10 	bl	8017664 <rclc_action_find_first_handle_by_status>
 800d044:	4605      	mov	r5, r0
 800d046:	2800      	cmp	r0, #0
 800d048:	d068      	beq.n	800d11c <_rclc_execute.part.0+0x1fc>
 800d04a:	6863      	ldr	r3, [r4, #4]
 800d04c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d04e:	699b      	ldr	r3, [r3, #24]
 800d050:	4798      	blx	r3
 800d052:	42b0      	cmp	r0, r6
 800d054:	f04f 0100 	mov.w	r1, #0
 800d058:	d1e9      	bne.n	800d02e <_rclc_execute.part.0+0x10e>
 800d05a:	2101      	movs	r1, #1
 800d05c:	4628      	mov	r0, r5
 800d05e:	f00a fb67 	bl	8017730 <rclc_action_server_response_goal_request>
 800d062:	722f      	strb	r7, [r5, #8]
 800d064:	e7ea      	b.n	800d03c <_rclc_execute.part.0+0x11c>
 800d066:	6848      	ldr	r0, [r1, #4]
 800d068:	f00a fad0 	bl	801760c <rclc_action_remove_used_goal_handle>
 800d06c:	6860      	ldr	r0, [r4, #4]
 800d06e:	f00a fb05 	bl	801767c <rclc_action_find_first_terminated_handle>
 800d072:	4601      	mov	r1, r0
 800d074:	2800      	cmp	r0, #0
 800d076:	d1f6      	bne.n	800d066 <_rclc_execute.part.0+0x146>
 800d078:	6860      	ldr	r0, [r4, #4]
 800d07a:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800d07e:	e7ce      	b.n	800d01e <_rclc_execute.part.0+0xfe>
 800d080:	2400      	movs	r4, #0
 800d082:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d084:	f100 0110 	add.w	r1, r0, #16
 800d088:	6880      	ldr	r0, [r0, #8]
 800d08a:	4798      	blx	r3
 800d08c:	4620      	mov	r0, r4
 800d08e:	b005      	add	sp, #20
 800d090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d092:	6860      	ldr	r0, [r4, #4]
 800d094:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d098:	b18b      	cbz	r3, 800d0be <_rclc_execute.part.0+0x19e>
 800d09a:	68c5      	ldr	r5, [r0, #12]
 800d09c:	b32d      	cbz	r5, 800d0ea <_rclc_execute.part.0+0x1ca>
 800d09e:	2600      	movs	r6, #0
 800d0a0:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800d0a4:	b143      	cbz	r3, 800d0b8 <_rclc_execute.part.0+0x198>
 800d0a6:	69c3      	ldr	r3, [r0, #28]
 800d0a8:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 800d0ac:	b123      	cbz	r3, 800d0b8 <_rclc_execute.part.0+0x198>
 800d0ae:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800d0b0:	4628      	mov	r0, r5
 800d0b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d0b4:	4798      	blx	r3
 800d0b6:	6860      	ldr	r0, [r4, #4]
 800d0b8:	682d      	ldr	r5, [r5, #0]
 800d0ba:	2d00      	cmp	r5, #0
 800d0bc:	d1f0      	bne.n	800d0a0 <_rclc_execute.part.0+0x180>
 800d0be:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800d0c2:	b193      	cbz	r3, 800d0ea <_rclc_execute.part.0+0x1ca>
 800d0c4:	68c5      	ldr	r5, [r0, #12]
 800d0c6:	b185      	cbz	r5, 800d0ea <_rclc_execute.part.0+0x1ca>
 800d0c8:	2600      	movs	r6, #0
 800d0ca:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800d0ce:	b14b      	cbz	r3, 800d0e4 <_rclc_execute.part.0+0x1c4>
 800d0d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d0d2:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 800d0d6:	b12b      	cbz	r3, 800d0e4 <_rclc_execute.part.0+0x1c4>
 800d0d8:	4628      	mov	r0, r5
 800d0da:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 800d0de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d0e0:	4798      	blx	r3
 800d0e2:	6860      	ldr	r0, [r4, #4]
 800d0e4:	682d      	ldr	r5, [r5, #0]
 800d0e6:	2d00      	cmp	r5, #0
 800d0e8:	d1ef      	bne.n	800d0ca <_rclc_execute.part.0+0x1aa>
 800d0ea:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	f43f af76 	beq.w	800cfe0 <_rclc_execute.part.0+0xc0>
 800d0f4:	2700      	movs	r7, #0
 800d0f6:	e00b      	b.n	800d110 <_rclc_execute.part.0+0x1f0>
 800d0f8:	6863      	ldr	r3, [r4, #4]
 800d0fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d0fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d0fe:	6a1e      	ldr	r6, [r3, #32]
 800d100:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 800d104:	47b0      	blx	r6
 800d106:	6860      	ldr	r0, [r4, #4]
 800d108:	4629      	mov	r1, r5
 800d10a:	f00a fa7f 	bl	801760c <rclc_action_remove_used_goal_handle>
 800d10e:	6860      	ldr	r0, [r4, #4]
 800d110:	f00a fb02 	bl	8017718 <rclc_action_find_first_handle_with_result_response>
 800d114:	4605      	mov	r5, r0
 800d116:	2800      	cmp	r0, #0
 800d118:	d1ee      	bne.n	800d0f8 <_rclc_execute.part.0+0x1d8>
 800d11a:	e761      	b.n	800cfe0 <_rclc_execute.part.0+0xc0>
 800d11c:	6860      	ldr	r0, [r4, #4]
 800d11e:	f880 5020 	strb.w	r5, [r0, #32]
 800d122:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800d126:	2b00      	cmp	r3, #0
 800d128:	f43f af5a 	beq.w	800cfe0 <_rclc_execute.part.0+0xc0>
 800d12c:	68c5      	ldr	r5, [r0, #12]
 800d12e:	b1b5      	cbz	r5, 800d15e <_rclc_execute.part.0+0x23e>
 800d130:	2602      	movs	r6, #2
 800d132:	e001      	b.n	800d138 <_rclc_execute.part.0+0x218>
 800d134:	682d      	ldr	r5, [r5, #0]
 800d136:	b195      	cbz	r5, 800d15e <_rclc_execute.part.0+0x23e>
 800d138:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800d13c:	2b03      	cmp	r3, #3
 800d13e:	d1f9      	bne.n	800d134 <_rclc_execute.part.0+0x214>
 800d140:	69c3      	ldr	r3, [r0, #28]
 800d142:	4628      	mov	r0, r5
 800d144:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d146:	4798      	blx	r3
 800d148:	4603      	mov	r3, r0
 800d14a:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800d14e:	4628      	mov	r0, r5
 800d150:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800d154:	b143      	cbz	r3, 800d168 <_rclc_execute.part.0+0x248>
 800d156:	f00a fb0b 	bl	8017770 <rclc_action_server_goal_cancel_accept>
 800d15a:	6860      	ldr	r0, [r4, #4]
 800d15c:	e7ea      	b.n	800d134 <_rclc_execute.part.0+0x214>
 800d15e:	2300      	movs	r3, #0
 800d160:	461c      	mov	r4, r3
 800d162:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800d166:	e72e      	b.n	800cfc6 <_rclc_execute.part.0+0xa6>
 800d168:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800d16a:	f105 0758 	add.w	r7, r5, #88	; 0x58
 800d16e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d172:	2101      	movs	r1, #1
 800d174:	6860      	ldr	r0, [r4, #4]
 800d176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d17a:	f00a fb25 	bl	80177c8 <rclc_action_server_goal_cancel_reject>
 800d17e:	722e      	strb	r6, [r5, #8]
 800d180:	6860      	ldr	r0, [r4, #4]
 800d182:	e7d7      	b.n	800d134 <_rclc_execute.part.0+0x214>
 800d184:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800d186:	f104 0510 	add.w	r5, r4, #16
 800d18a:	6880      	ldr	r0, [r0, #8]
 800d18c:	4798      	blx	r3
 800d18e:	e6e3      	b.n	800cf58 <_rclc_execute.part.0+0x38>
 800d190:	f100 0510 	add.w	r5, r0, #16
 800d194:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800d196:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800d198:	4629      	mov	r1, r5
 800d19a:	6880      	ldr	r0, [r0, #8]
 800d19c:	4798      	blx	r3
 800d19e:	e6db      	b.n	800cf58 <_rclc_execute.part.0+0x38>
 800d1a0:	2401      	movs	r4, #1
 800d1a2:	e710      	b.n	800cfc6 <_rclc_execute.part.0+0xa6>

0800d1a4 <rclc_executor_trigger_any>:
 800d1a4:	2800      	cmp	r0, #0
 800d1a6:	d03d      	beq.n	800d224 <rclc_executor_trigger_any+0x80>
 800d1a8:	2900      	cmp	r1, #0
 800d1aa:	d03c      	beq.n	800d226 <rclc_executor_trigger_any+0x82>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	2800      	cmp	r0, #0
 800d1b6:	d035      	beq.n	800d224 <rclc_executor_trigger_any+0x80>
 800d1b8:	b430      	push	{r4, r5}
 800d1ba:	f893 c000 	ldrb.w	ip, [r3]
 800d1be:	f1bc 0f08 	cmp.w	ip, #8
 800d1c2:	d11d      	bne.n	800d200 <rclc_executor_trigger_any+0x5c>
 800d1c4:	685c      	ldr	r4, [r3, #4]
 800d1c6:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800d1c8:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800d1cc:	d105      	bne.n	800d1da <rclc_executor_trigger_any+0x36>
 800d1ce:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800d1d2:	b910      	cbnz	r0, 800d1da <rclc_executor_trigger_any+0x36>
 800d1d4:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 800d1d8:	b128      	cbz	r0, 800d1e6 <rclc_executor_trigger_any+0x42>
 800d1da:	bc30      	pop	{r4, r5}
 800d1dc:	4770      	bx	lr
 800d1de:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800d1e2:	2800      	cmp	r0, #0
 800d1e4:	d1f9      	bne.n	800d1da <rclc_executor_trigger_any+0x36>
 800d1e6:	3201      	adds	r2, #1
 800d1e8:	3340      	adds	r3, #64	; 0x40
 800d1ea:	4291      	cmp	r1, r2
 800d1ec:	d017      	beq.n	800d21e <rclc_executor_trigger_any+0x7a>
 800d1ee:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800d1f2:	2800      	cmp	r0, #0
 800d1f4:	d0f1      	beq.n	800d1da <rclc_executor_trigger_any+0x36>
 800d1f6:	f893 c000 	ldrb.w	ip, [r3]
 800d1fa:	f1bc 0f08 	cmp.w	ip, #8
 800d1fe:	d0e1      	beq.n	800d1c4 <rclc_executor_trigger_any+0x20>
 800d200:	f1bc 0f09 	cmp.w	ip, #9
 800d204:	d1eb      	bne.n	800d1de <rclc_executor_trigger_any+0x3a>
 800d206:	685c      	ldr	r4, [r3, #4]
 800d208:	6a25      	ldr	r5, [r4, #32]
 800d20a:	2d00      	cmp	r5, #0
 800d20c:	d1e5      	bne.n	800d1da <rclc_executor_trigger_any+0x36>
 800d20e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800d212:	2800      	cmp	r0, #0
 800d214:	d1e1      	bne.n	800d1da <rclc_executor_trigger_any+0x36>
 800d216:	3201      	adds	r2, #1
 800d218:	3340      	adds	r3, #64	; 0x40
 800d21a:	4291      	cmp	r1, r2
 800d21c:	d1e7      	bne.n	800d1ee <rclc_executor_trigger_any+0x4a>
 800d21e:	2000      	movs	r0, #0
 800d220:	bc30      	pop	{r4, r5}
 800d222:	4770      	bx	lr
 800d224:	4770      	bx	lr
 800d226:	4608      	mov	r0, r1
 800d228:	4770      	bx	lr
 800d22a:	bf00      	nop

0800d22c <rclc_executor_get_zero_initialized_executor>:
 800d22c:	b510      	push	{r4, lr}
 800d22e:	4604      	mov	r4, r0
 800d230:	2290      	movs	r2, #144	; 0x90
 800d232:	4902      	ldr	r1, [pc, #8]	; (800d23c <rclc_executor_get_zero_initialized_executor+0x10>)
 800d234:	f00f fbaf 	bl	801c996 <memcpy>
 800d238:	4620      	mov	r0, r4
 800d23a:	bd10      	pop	{r4, pc}
 800d23c:	0801e408 	.word	0x0801e408

0800d240 <rclc_executor_init>:
 800d240:	2900      	cmp	r1, #0
 800d242:	d06a      	beq.n	800d31a <rclc_executor_init+0xda>
 800d244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d248:	4605      	mov	r5, r0
 800d24a:	b0b2      	sub	sp, #200	; 0xc8
 800d24c:	2800      	cmp	r0, #0
 800d24e:	d05c      	beq.n	800d30a <rclc_executor_init+0xca>
 800d250:	4616      	mov	r6, r2
 800d252:	4618      	mov	r0, r3
 800d254:	4688      	mov	r8, r1
 800d256:	461f      	mov	r7, r3
 800d258:	f000 fcf6 	bl	800dc48 <rcutils_allocator_is_valid>
 800d25c:	2e00      	cmp	r6, #0
 800d25e:	d054      	beq.n	800d30a <rclc_executor_init+0xca>
 800d260:	f080 0401 	eor.w	r4, r0, #1
 800d264:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800d268:	d14f      	bne.n	800d30a <rclc_executor_init+0xca>
 800d26a:	2290      	movs	r2, #144	; 0x90
 800d26c:	4930      	ldr	r1, [pc, #192]	; (800d330 <rclc_executor_init+0xf0>)
 800d26e:	a80e      	add	r0, sp, #56	; 0x38
 800d270:	f00f fb91 	bl	801c996 <memcpy>
 800d274:	a90e      	add	r1, sp, #56	; 0x38
 800d276:	2290      	movs	r2, #144	; 0x90
 800d278:	4628      	mov	r0, r5
 800d27a:	f00f fb8c 	bl	801c996 <memcpy>
 800d27e:	4668      	mov	r0, sp
 800d280:	f8c5 8004 	str.w	r8, [r5, #4]
 800d284:	60ee      	str	r6, [r5, #12]
 800d286:	f008 ff5d 	bl	8016144 <rcl_get_zero_initialized_wait_set>
 800d28a:	46ec      	mov	ip, sp
 800d28c:	f105 0e18 	add.w	lr, r5, #24
 800d290:	f8d7 8000 	ldr.w	r8, [r7]
 800d294:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d298:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d29c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d2a0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d2a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d2a8:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800d328 <rclc_executor_init+0xe8>
 800d2ac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d2b0:	f8dc 3000 	ldr.w	r3, [ip]
 800d2b4:	01b0      	lsls	r0, r6, #6
 800d2b6:	6939      	ldr	r1, [r7, #16]
 800d2b8:	f8ce 3000 	str.w	r3, [lr]
 800d2bc:	616f      	str	r7, [r5, #20]
 800d2be:	ed85 7b1c 	vstr	d7, [r5, #112]	; 0x70
 800d2c2:	47c0      	blx	r8
 800d2c4:	60a8      	str	r0, [r5, #8]
 800d2c6:	b908      	cbnz	r0, 800d2cc <rclc_executor_init+0x8c>
 800d2c8:	e029      	b.n	800d31e <rclc_executor_init+0xde>
 800d2ca:	68a8      	ldr	r0, [r5, #8]
 800d2cc:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800d2d0:	3401      	adds	r4, #1
 800d2d2:	4631      	mov	r1, r6
 800d2d4:	f000 faf4 	bl	800d8c0 <rclc_executor_handle_init>
 800d2d8:	42a6      	cmp	r6, r4
 800d2da:	d8f6      	bhi.n	800d2ca <rclc_executor_init+0x8a>
 800d2dc:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 800d2e0:	f000 fae4 	bl	800d8ac <rclc_executor_handle_counters_zero_init>
 800d2e4:	4a13      	ldr	r2, [pc, #76]	; (800d334 <rclc_executor_init+0xf4>)
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	68a8      	ldr	r0, [r5, #8]
 800d2ea:	e9c5 2320 	strd	r2, r3, [r5, #128]	; 0x80
 800d2ee:	b168      	cbz	r0, 800d30c <rclc_executor_init+0xcc>
 800d2f0:	68eb      	ldr	r3, [r5, #12]
 800d2f2:	b173      	cbz	r3, 800d312 <rclc_executor_init+0xd2>
 800d2f4:	696a      	ldr	r2, [r5, #20]
 800d2f6:	fab2 f382 	clz	r3, r2
 800d2fa:	095b      	lsrs	r3, r3, #5
 800d2fc:	b14a      	cbz	r2, 800d312 <rclc_executor_init+0xd2>
 800d2fe:	4618      	mov	r0, r3
 800d300:	f885 3088 	strb.w	r3, [r5, #136]	; 0x88
 800d304:	b032      	add	sp, #200	; 0xc8
 800d306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d30a:	200b      	movs	r0, #11
 800d30c:	b032      	add	sp, #200	; 0xc8
 800d30e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d312:	2000      	movs	r0, #0
 800d314:	b032      	add	sp, #200	; 0xc8
 800d316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d31a:	200b      	movs	r0, #11
 800d31c:	4770      	bx	lr
 800d31e:	200a      	movs	r0, #10
 800d320:	e7f4      	b.n	800d30c <rclc_executor_init+0xcc>
 800d322:	bf00      	nop
 800d324:	f3af 8000 	nop.w
 800d328:	3b9aca00 	.word	0x3b9aca00
 800d32c:	00000000 	.word	0x00000000
 800d330:	0801e408 	.word	0x0801e408
 800d334:	0800d1a5 	.word	0x0800d1a5

0800d338 <rclc_executor_add_subscription>:
 800d338:	2b00      	cmp	r3, #0
 800d33a:	bf18      	it	ne
 800d33c:	2a00      	cmpne	r2, #0
 800d33e:	b570      	push	{r4, r5, r6, lr}
 800d340:	4604      	mov	r4, r0
 800d342:	bf0c      	ite	eq
 800d344:	2001      	moveq	r0, #1
 800d346:	2000      	movne	r0, #0
 800d348:	f89d c010 	ldrb.w	ip, [sp, #16]
 800d34c:	2900      	cmp	r1, #0
 800d34e:	bf08      	it	eq
 800d350:	f040 0001 	orreq.w	r0, r0, #1
 800d354:	bb28      	cbnz	r0, 800d3a2 <rclc_executor_add_subscription+0x6a>
 800d356:	fab4 f584 	clz	r5, r4
 800d35a:	096d      	lsrs	r5, r5, #5
 800d35c:	b30c      	cbz	r4, 800d3a2 <rclc_executor_add_subscription+0x6a>
 800d35e:	e9d4 0603 	ldrd	r0, r6, [r4, #12]
 800d362:	4286      	cmp	r6, r0
 800d364:	d301      	bcc.n	800d36a <rclc_executor_add_subscription+0x32>
 800d366:	2001      	movs	r0, #1
 800d368:	bd70      	pop	{r4, r5, r6, pc}
 800d36a:	68a0      	ldr	r0, [r4, #8]
 800d36c:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 800d370:	f800 500e 	strb.w	r5, [r0, lr]
 800d374:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 800d378:	3601      	adds	r6, #1
 800d37a:	6303      	str	r3, [r0, #48]	; 0x30
 800d37c:	2301      	movs	r3, #1
 800d37e:	62c5      	str	r5, [r0, #44]	; 0x2c
 800d380:	f104 0518 	add.w	r5, r4, #24
 800d384:	f880 c001 	strb.w	ip, [r0, #1]
 800d388:	8703      	strh	r3, [r0, #56]	; 0x38
 800d38a:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800d38e:	4628      	mov	r0, r5
 800d390:	6126      	str	r6, [r4, #16]
 800d392:	f008 feeb 	bl	801616c <rcl_wait_set_is_valid>
 800d396:	b930      	cbnz	r0, 800d3a6 <rclc_executor_add_subscription+0x6e>
 800d398:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800d39a:	2000      	movs	r0, #0
 800d39c:	3301      	adds	r3, #1
 800d39e:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d3a0:	bd70      	pop	{r4, r5, r6, pc}
 800d3a2:	200b      	movs	r0, #11
 800d3a4:	bd70      	pop	{r4, r5, r6, pc}
 800d3a6:	4628      	mov	r0, r5
 800d3a8:	f008 fee6 	bl	8016178 <rcl_wait_set_fini>
 800d3ac:	2800      	cmp	r0, #0
 800d3ae:	d0f3      	beq.n	800d398 <rclc_executor_add_subscription+0x60>
 800d3b0:	bd70      	pop	{r4, r5, r6, pc}
 800d3b2:	bf00      	nop

0800d3b4 <rclc_executor_add_timer>:
 800d3b4:	b351      	cbz	r1, 800d40c <rclc_executor_add_timer+0x58>
 800d3b6:	fab0 f280 	clz	r2, r0
 800d3ba:	b570      	push	{r4, r5, r6, lr}
 800d3bc:	0952      	lsrs	r2, r2, #5
 800d3be:	4604      	mov	r4, r0
 800d3c0:	b1e0      	cbz	r0, 800d3fc <rclc_executor_add_timer+0x48>
 800d3c2:	e9d0 0303 	ldrd	r0, r3, [r0, #12]
 800d3c6:	4283      	cmp	r3, r0
 800d3c8:	d301      	bcc.n	800d3ce <rclc_executor_add_timer+0x1a>
 800d3ca:	2001      	movs	r0, #1
 800d3cc:	bd70      	pop	{r4, r5, r6, pc}
 800d3ce:	68a0      	ldr	r0, [r4, #8]
 800d3d0:	019d      	lsls	r5, r3, #6
 800d3d2:	1c5e      	adds	r6, r3, #1
 800d3d4:	eb00 1383 	add.w	r3, r0, r3, lsl #6
 800d3d8:	6059      	str	r1, [r3, #4]
 800d3da:	2102      	movs	r1, #2
 800d3dc:	5341      	strh	r1, [r0, r5]
 800d3de:	2101      	movs	r1, #1
 800d3e0:	f104 0518 	add.w	r5, r4, #24
 800d3e4:	62da      	str	r2, [r3, #44]	; 0x2c
 800d3e6:	8719      	strh	r1, [r3, #56]	; 0x38
 800d3e8:	4628      	mov	r0, r5
 800d3ea:	6126      	str	r6, [r4, #16]
 800d3ec:	f008 febe 	bl	801616c <rcl_wait_set_is_valid>
 800d3f0:	b930      	cbnz	r0, 800d400 <rclc_executor_add_timer+0x4c>
 800d3f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800d3f4:	2000      	movs	r0, #0
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	6523      	str	r3, [r4, #80]	; 0x50
 800d3fa:	bd70      	pop	{r4, r5, r6, pc}
 800d3fc:	200b      	movs	r0, #11
 800d3fe:	bd70      	pop	{r4, r5, r6, pc}
 800d400:	4628      	mov	r0, r5
 800d402:	f008 feb9 	bl	8016178 <rcl_wait_set_fini>
 800d406:	2800      	cmp	r0, #0
 800d408:	d0f3      	beq.n	800d3f2 <rclc_executor_add_timer+0x3e>
 800d40a:	bd70      	pop	{r4, r5, r6, pc}
 800d40c:	200b      	movs	r0, #11
 800d40e:	4770      	bx	lr

0800d410 <rclc_executor_add_service>:
 800d410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d412:	9d06      	ldr	r5, [sp, #24]
 800d414:	4604      	mov	r4, r0
 800d416:	2b00      	cmp	r3, #0
 800d418:	bf18      	it	ne
 800d41a:	2d00      	cmpne	r5, #0
 800d41c:	bf0c      	ite	eq
 800d41e:	2001      	moveq	r0, #1
 800d420:	2000      	movne	r0, #0
 800d422:	2a00      	cmp	r2, #0
 800d424:	bf08      	it	eq
 800d426:	f040 0001 	orreq.w	r0, r0, #1
 800d42a:	2900      	cmp	r1, #0
 800d42c:	bf08      	it	eq
 800d42e:	f040 0001 	orreq.w	r0, r0, #1
 800d432:	bb40      	cbnz	r0, 800d486 <rclc_executor_add_service+0x76>
 800d434:	fab4 f684 	clz	r6, r4
 800d438:	0976      	lsrs	r6, r6, #5
 800d43a:	b324      	cbz	r4, 800d486 <rclc_executor_add_service+0x76>
 800d43c:	e9d4 7003 	ldrd	r7, r0, [r4, #12]
 800d440:	42b8      	cmp	r0, r7
 800d442:	d301      	bcc.n	800d448 <rclc_executor_add_service+0x38>
 800d444:	2001      	movs	r0, #1
 800d446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d448:	68a7      	ldr	r7, [r4, #8]
 800d44a:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 800d44e:	f100 0c01 	add.w	ip, r0, #1
 800d452:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 800d456:	6283      	str	r3, [r0, #40]	; 0x28
 800d458:	2305      	movs	r3, #5
 800d45a:	6305      	str	r5, [r0, #48]	; 0x30
 800d45c:	f104 0518 	add.w	r5, r4, #24
 800d460:	e9c0 1201 	strd	r1, r2, [r0, #4]
 800d464:	f827 300e 	strh.w	r3, [r7, lr]
 800d468:	2301      	movs	r3, #1
 800d46a:	62c6      	str	r6, [r0, #44]	; 0x2c
 800d46c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 800d470:	4628      	mov	r0, r5
 800d472:	f8c4 c010 	str.w	ip, [r4, #16]
 800d476:	f008 fe79 	bl	801616c <rcl_wait_set_is_valid>
 800d47a:	b930      	cbnz	r0, 800d48a <rclc_executor_add_service+0x7a>
 800d47c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d47e:	2000      	movs	r0, #0
 800d480:	3301      	adds	r3, #1
 800d482:	65a3      	str	r3, [r4, #88]	; 0x58
 800d484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d486:	200b      	movs	r0, #11
 800d488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d48a:	4628      	mov	r0, r5
 800d48c:	f008 fe74 	bl	8016178 <rcl_wait_set_fini>
 800d490:	2800      	cmp	r0, #0
 800d492:	d0f3      	beq.n	800d47c <rclc_executor_add_service+0x6c>
 800d494:	e7d7      	b.n	800d446 <rclc_executor_add_service+0x36>
 800d496:	bf00      	nop

0800d498 <rclc_executor_prepare>:
 800d498:	2800      	cmp	r0, #0
 800d49a:	d044      	beq.n	800d526 <rclc_executor_prepare+0x8e>
 800d49c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d49e:	f100 0518 	add.w	r5, r0, #24
 800d4a2:	b09b      	sub	sp, #108	; 0x6c
 800d4a4:	4604      	mov	r4, r0
 800d4a6:	4628      	mov	r0, r5
 800d4a8:	f008 fe60 	bl	801616c <rcl_wait_set_is_valid>
 800d4ac:	b110      	cbz	r0, 800d4b4 <rclc_executor_prepare+0x1c>
 800d4ae:	2000      	movs	r0, #0
 800d4b0:	b01b      	add	sp, #108	; 0x6c
 800d4b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4b4:	4628      	mov	r0, r5
 800d4b6:	f008 fe5f 	bl	8016178 <rcl_wait_set_fini>
 800d4ba:	2800      	cmp	r0, #0
 800d4bc:	d130      	bne.n	800d520 <rclc_executor_prepare+0x88>
 800d4be:	a80c      	add	r0, sp, #48	; 0x30
 800d4c0:	ae04      	add	r6, sp, #16
 800d4c2:	f008 fe3f 	bl	8016144 <rcl_get_zero_initialized_wait_set>
 800d4c6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800d4ca:	46ae      	mov	lr, r5
 800d4cc:	6967      	ldr	r7, [r4, #20]
 800d4ce:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d4d2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d4d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d4da:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d4de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d4e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d4e6:	f8dc 3000 	ldr.w	r3, [ip]
 800d4ea:	f8ce 3000 	str.w	r3, [lr]
 800d4ee:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d4f0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	4628      	mov	r0, r5
 800d4f6:	6862      	ldr	r2, [r4, #4]
 800d4f8:	6033      	str	r3, [r6, #0]
 800d4fa:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800d4fc:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d4fe:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800d502:	e9d4 3214 	ldrd	r3, r2, [r4, #80]	; 0x50
 800d506:	e9cd 2100 	strd	r2, r1, [sp]
 800d50a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d50c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800d50e:	f009 f933 	bl	8016778 <rcl_wait_set_init>
 800d512:	2800      	cmp	r0, #0
 800d514:	d0cc      	beq.n	800d4b0 <rclc_executor_prepare+0x18>
 800d516:	900b      	str	r0, [sp, #44]	; 0x2c
 800d518:	f000 fbba 	bl	800dc90 <rcutils_reset_error>
 800d51c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800d51e:	e7c7      	b.n	800d4b0 <rclc_executor_prepare+0x18>
 800d520:	f000 fbb6 	bl	800dc90 <rcutils_reset_error>
 800d524:	e7cb      	b.n	800d4be <rclc_executor_prepare+0x26>
 800d526:	200b      	movs	r0, #11
 800d528:	4770      	bx	lr
 800d52a:	bf00      	nop

0800d52c <rclc_executor_spin_some.part.0>:
 800d52c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d530:	4605      	mov	r5, r0
 800d532:	4691      	mov	r9, r2
 800d534:	4698      	mov	r8, r3
 800d536:	f7ff ffaf 	bl	800d498 <rclc_executor_prepare>
 800d53a:	f105 0618 	add.w	r6, r5, #24
 800d53e:	4630      	mov	r0, r6
 800d540:	f008 fee6 	bl	8016310 <rcl_wait_set_clear>
 800d544:	4607      	mov	r7, r0
 800d546:	2800      	cmp	r0, #0
 800d548:	f040 80a8 	bne.w	800d69c <rclc_executor_spin_some.part.0+0x170>
 800d54c:	68eb      	ldr	r3, [r5, #12]
 800d54e:	b30b      	cbz	r3, 800d594 <rclc_executor_spin_some.part.0+0x68>
 800d550:	4604      	mov	r4, r0
 800d552:	68a9      	ldr	r1, [r5, #8]
 800d554:	01a2      	lsls	r2, r4, #6
 800d556:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800d55a:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 800d55e:	b1cb      	cbz	r3, 800d594 <rclc_executor_spin_some.part.0+0x68>
 800d560:	5c8b      	ldrb	r3, [r1, r2]
 800d562:	2b0a      	cmp	r3, #10
 800d564:	f200 80de 	bhi.w	800d724 <rclc_executor_spin_some.part.0+0x1f8>
 800d568:	e8df f003 	tbb	[pc, r3]
 800d56c:	8da99d9d 	.word	0x8da99d9d
 800d570:	0606068d 	.word	0x0606068d
 800d574:	c1ce      	.short	0xc1ce
 800d576:	b5          	.byte	0xb5
 800d577:	00          	.byte	0x00
 800d578:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d57c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d580:	4630      	mov	r0, r6
 800d582:	f009 fa15 	bl	80169b0 <rcl_wait_set_add_service>
 800d586:	2800      	cmp	r0, #0
 800d588:	f040 8087 	bne.w	800d69a <rclc_executor_spin_some.part.0+0x16e>
 800d58c:	3401      	adds	r4, #1
 800d58e:	68eb      	ldr	r3, [r5, #12]
 800d590:	429c      	cmp	r4, r3
 800d592:	d3de      	bcc.n	800d552 <rclc_executor_spin_some.part.0+0x26>
 800d594:	4643      	mov	r3, r8
 800d596:	464a      	mov	r2, r9
 800d598:	4630      	mov	r0, r6
 800d59a:	f009 fa35 	bl	8016a08 <rcl_wait>
 800d59e:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	f000 80c6 	beq.w	800d734 <rclc_executor_spin_some.part.0+0x208>
 800d5a8:	2b01      	cmp	r3, #1
 800d5aa:	f040 80bb 	bne.w	800d724 <rclc_executor_spin_some.part.0+0x1f8>
 800d5ae:	68eb      	ldr	r3, [r5, #12]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	f000 8159 	beq.w	800d868 <rclc_executor_spin_some.part.0+0x33c>
 800d5b6:	2400      	movs	r4, #0
 800d5b8:	f240 1991 	movw	r9, #401	; 0x191
 800d5bc:	46a0      	mov	r8, r4
 800d5be:	e00a      	b.n	800d5d6 <rclc_executor_spin_some.part.0+0xaa>
 800d5c0:	f7ff faec 	bl	800cb9c <_rclc_check_for_new_data>
 800d5c4:	4604      	mov	r4, r0
 800d5c6:	b110      	cbz	r0, 800d5ce <rclc_executor_spin_some.part.0+0xa2>
 800d5c8:	4548      	cmp	r0, r9
 800d5ca:	f040 80b1 	bne.w	800d730 <rclc_executor_spin_some.part.0+0x204>
 800d5ce:	68eb      	ldr	r3, [r5, #12]
 800d5d0:	4598      	cmp	r8, r3
 800d5d2:	f080 8126 	bcs.w	800d822 <rclc_executor_spin_some.part.0+0x2f6>
 800d5d6:	68aa      	ldr	r2, [r5, #8]
 800d5d8:	4631      	mov	r1, r6
 800d5da:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d5de:	f108 0801 	add.w	r8, r8, #1
 800d5e2:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800d5e6:	f1bc 0f00 	cmp.w	ip, #0
 800d5ea:	d1e9      	bne.n	800d5c0 <rclc_executor_spin_some.part.0+0x94>
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	4610      	mov	r0, r2
 800d5f0:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 800d5f4:	4798      	blx	r3
 800d5f6:	2800      	cmp	r0, #0
 800d5f8:	f000 809a 	beq.w	800d730 <rclc_executor_spin_some.part.0+0x204>
 800d5fc:	68eb      	ldr	r3, [r5, #12]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	f000 8096 	beq.w	800d730 <rclc_executor_spin_some.part.0+0x204>
 800d604:	f04f 0800 	mov.w	r8, #0
 800d608:	f240 1991 	movw	r9, #401	; 0x191
 800d60c:	e009      	b.n	800d622 <rclc_executor_spin_some.part.0+0xf6>
 800d60e:	f7ff fb13 	bl	800cc38 <_rclc_take_new_data>
 800d612:	4604      	mov	r4, r0
 800d614:	b110      	cbz	r0, 800d61c <rclc_executor_spin_some.part.0+0xf0>
 800d616:	4548      	cmp	r0, r9
 800d618:	f040 808a 	bne.w	800d730 <rclc_executor_spin_some.part.0+0x204>
 800d61c:	68eb      	ldr	r3, [r5, #12]
 800d61e:	4598      	cmp	r8, r3
 800d620:	d209      	bcs.n	800d636 <rclc_executor_spin_some.part.0+0x10a>
 800d622:	68a8      	ldr	r0, [r5, #8]
 800d624:	4631      	mov	r1, r6
 800d626:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800d62a:	f108 0801 	add.w	r8, r8, #1
 800d62e:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 800d632:	2a00      	cmp	r2, #0
 800d634:	d1eb      	bne.n	800d60e <rclc_executor_spin_some.part.0+0xe2>
 800d636:	2b00      	cmp	r3, #0
 800d638:	d07a      	beq.n	800d730 <rclc_executor_spin_some.part.0+0x204>
 800d63a:	2600      	movs	r6, #0
 800d63c:	e00e      	b.n	800d65c <rclc_executor_spin_some.part.0+0x130>
 800d63e:	f812 200c 	ldrb.w	r2, [r2, ip]
 800d642:	2a08      	cmp	r2, #8
 800d644:	f000 80fc 	beq.w	800d840 <rclc_executor_spin_some.part.0+0x314>
 800d648:	2a09      	cmp	r2, #9
 800d64a:	f000 80ee 	beq.w	800d82a <rclc_executor_spin_some.part.0+0x2fe>
 800d64e:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800d652:	b98a      	cbnz	r2, 800d678 <rclc_executor_spin_some.part.0+0x14c>
 800d654:	3601      	adds	r6, #1
 800d656:	429e      	cmp	r6, r3
 800d658:	d267      	bcs.n	800d72a <rclc_executor_spin_some.part.0+0x1fe>
 800d65a:	2400      	movs	r4, #0
 800d65c:	68aa      	ldr	r2, [r5, #8]
 800d65e:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800d662:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800d666:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 800d66a:	2900      	cmp	r1, #0
 800d66c:	d060      	beq.n	800d730 <rclc_executor_spin_some.part.0+0x204>
 800d66e:	7841      	ldrb	r1, [r0, #1]
 800d670:	2900      	cmp	r1, #0
 800d672:	d0e4      	beq.n	800d63e <rclc_executor_spin_some.part.0+0x112>
 800d674:	2901      	cmp	r1, #1
 800d676:	d1ed      	bne.n	800d654 <rclc_executor_spin_some.part.0+0x128>
 800d678:	f7ff fc52 	bl	800cf20 <_rclc_execute.part.0>
 800d67c:	2800      	cmp	r0, #0
 800d67e:	f040 80b5 	bne.w	800d7ec <rclc_executor_spin_some.part.0+0x2c0>
 800d682:	68eb      	ldr	r3, [r5, #12]
 800d684:	e7e6      	b.n	800d654 <rclc_executor_spin_some.part.0+0x128>
 800d686:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d68a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d68e:	4630      	mov	r0, r6
 800d690:	f009 f962 	bl	8016958 <rcl_wait_set_add_client>
 800d694:	2800      	cmp	r0, #0
 800d696:	f43f af79 	beq.w	800d58c <rclc_executor_spin_some.part.0+0x60>
 800d69a:	4607      	mov	r7, r0
 800d69c:	f000 faf8 	bl	800dc90 <rcutils_reset_error>
 800d6a0:	4638      	mov	r0, r7
 800d6a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6a6:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d6aa:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d6ae:	4630      	mov	r0, r6
 800d6b0:	f008 fe02 	bl	80162b8 <rcl_wait_set_add_subscription>
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	f43f af69 	beq.w	800d58c <rclc_executor_spin_some.part.0+0x60>
 800d6ba:	4607      	mov	r7, r0
 800d6bc:	e7ee      	b.n	800d69c <rclc_executor_spin_some.part.0+0x170>
 800d6be:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d6c2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d6c6:	4630      	mov	r0, r6
 800d6c8:	f009 f916 	bl	80168f8 <rcl_wait_set_add_timer>
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	f43f af5d 	beq.w	800d58c <rclc_executor_spin_some.part.0+0x60>
 800d6d2:	4607      	mov	r7, r0
 800d6d4:	e7e2      	b.n	800d69c <rclc_executor_spin_some.part.0+0x170>
 800d6d6:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d6da:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d6de:	4630      	mov	r0, r6
 800d6e0:	f009 f8de 	bl	80168a0 <rcl_wait_set_add_guard_condition>
 800d6e4:	2800      	cmp	r0, #0
 800d6e6:	f43f af51 	beq.w	800d58c <rclc_executor_spin_some.part.0+0x60>
 800d6ea:	4607      	mov	r7, r0
 800d6ec:	e7d6      	b.n	800d69c <rclc_executor_spin_some.part.0+0x170>
 800d6ee:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d6f2:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d6f6:	4630      	mov	r0, r6
 800d6f8:	3110      	adds	r1, #16
 800d6fa:	f009 fe59 	bl	80173b0 <rcl_action_wait_set_add_action_server>
 800d6fe:	2800      	cmp	r0, #0
 800d700:	f43f af44 	beq.w	800d58c <rclc_executor_spin_some.part.0+0x60>
 800d704:	4607      	mov	r7, r0
 800d706:	e7c9      	b.n	800d69c <rclc_executor_spin_some.part.0+0x170>
 800d708:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d70c:	2300      	movs	r3, #0
 800d70e:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 800d712:	4630      	mov	r0, r6
 800d714:	3110      	adds	r1, #16
 800d716:	f009 fc23 	bl	8016f60 <rcl_action_wait_set_add_action_client>
 800d71a:	2800      	cmp	r0, #0
 800d71c:	f43f af36 	beq.w	800d58c <rclc_executor_spin_some.part.0+0x60>
 800d720:	4607      	mov	r7, r0
 800d722:	e7bb      	b.n	800d69c <rclc_executor_spin_some.part.0+0x170>
 800d724:	2701      	movs	r7, #1
 800d726:	f000 fab3 	bl	800dc90 <rcutils_reset_error>
 800d72a:	4638      	mov	r0, r7
 800d72c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d730:	4627      	mov	r7, r4
 800d732:	e7fa      	b.n	800d72a <rclc_executor_spin_some.part.0+0x1fe>
 800d734:	68eb      	ldr	r3, [r5, #12]
 800d736:	2b00      	cmp	r3, #0
 800d738:	f000 8093 	beq.w	800d862 <rclc_executor_spin_some.part.0+0x336>
 800d73c:	2400      	movs	r4, #0
 800d73e:	f240 1991 	movw	r9, #401	; 0x191
 800d742:	46a0      	mov	r8, r4
 800d744:	e008      	b.n	800d758 <rclc_executor_spin_some.part.0+0x22c>
 800d746:	f7ff fa29 	bl	800cb9c <_rclc_check_for_new_data>
 800d74a:	4604      	mov	r4, r0
 800d74c:	b108      	cbz	r0, 800d752 <rclc_executor_spin_some.part.0+0x226>
 800d74e:	4548      	cmp	r0, r9
 800d750:	d1ee      	bne.n	800d730 <rclc_executor_spin_some.part.0+0x204>
 800d752:	68eb      	ldr	r3, [r5, #12]
 800d754:	4598      	cmp	r8, r3
 800d756:	d266      	bcs.n	800d826 <rclc_executor_spin_some.part.0+0x2fa>
 800d758:	68aa      	ldr	r2, [r5, #8]
 800d75a:	4631      	mov	r1, r6
 800d75c:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800d760:	f108 0801 	add.w	r8, r8, #1
 800d764:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 800d768:	f1bc 0f00 	cmp.w	ip, #0
 800d76c:	d1eb      	bne.n	800d746 <rclc_executor_spin_some.part.0+0x21a>
 800d76e:	4619      	mov	r1, r3
 800d770:	4610      	mov	r0, r2
 800d772:	e9d5 3220 	ldrd	r3, r2, [r5, #128]	; 0x80
 800d776:	4798      	blx	r3
 800d778:	2800      	cmp	r0, #0
 800d77a:	d0d9      	beq.n	800d730 <rclc_executor_spin_some.part.0+0x204>
 800d77c:	68eb      	ldr	r3, [r5, #12]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d0d6      	beq.n	800d730 <rclc_executor_spin_some.part.0+0x204>
 800d782:	f04f 0a00 	mov.w	sl, #0
 800d786:	f240 1891 	movw	r8, #401	; 0x191
 800d78a:	f240 2959 	movw	r9, #601	; 0x259
 800d78e:	e00e      	b.n	800d7ae <rclc_executor_spin_some.part.0+0x282>
 800d790:	f813 300b 	ldrb.w	r3, [r3, fp]
 800d794:	2b08      	cmp	r3, #8
 800d796:	d034      	beq.n	800d802 <rclc_executor_spin_some.part.0+0x2d6>
 800d798:	2b09      	cmp	r3, #9
 800d79a:	d029      	beq.n	800d7f0 <rclc_executor_spin_some.part.0+0x2c4>
 800d79c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800d7a0:	bb03      	cbnz	r3, 800d7e4 <rclc_executor_spin_some.part.0+0x2b8>
 800d7a2:	f10a 0a01 	add.w	sl, sl, #1
 800d7a6:	68eb      	ldr	r3, [r5, #12]
 800d7a8:	459a      	cmp	sl, r3
 800d7aa:	d2be      	bcs.n	800d72a <rclc_executor_spin_some.part.0+0x1fe>
 800d7ac:	2400      	movs	r4, #0
 800d7ae:	68a8      	ldr	r0, [r5, #8]
 800d7b0:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800d7b4:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800d7b8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d0b7      	beq.n	800d730 <rclc_executor_spin_some.part.0+0x204>
 800d7c0:	4631      	mov	r1, r6
 800d7c2:	f7ff fa39 	bl	800cc38 <_rclc_take_new_data>
 800d7c6:	2800      	cmp	r0, #0
 800d7c8:	bf18      	it	ne
 800d7ca:	4540      	cmpne	r0, r8
 800d7cc:	d001      	beq.n	800d7d2 <rclc_executor_spin_some.part.0+0x2a6>
 800d7ce:	4548      	cmp	r0, r9
 800d7d0:	d10c      	bne.n	800d7ec <rclc_executor_spin_some.part.0+0x2c0>
 800d7d2:	68ab      	ldr	r3, [r5, #8]
 800d7d4:	eb13 000b 	adds.w	r0, r3, fp
 800d7d8:	d021      	beq.n	800d81e <rclc_executor_spin_some.part.0+0x2f2>
 800d7da:	7842      	ldrb	r2, [r0, #1]
 800d7dc:	2a00      	cmp	r2, #0
 800d7de:	d0d7      	beq.n	800d790 <rclc_executor_spin_some.part.0+0x264>
 800d7e0:	2a01      	cmp	r2, #1
 800d7e2:	d1de      	bne.n	800d7a2 <rclc_executor_spin_some.part.0+0x276>
 800d7e4:	f7ff fb9c 	bl	800cf20 <_rclc_execute.part.0>
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	d0da      	beq.n	800d7a2 <rclc_executor_spin_some.part.0+0x276>
 800d7ec:	4607      	mov	r7, r0
 800d7ee:	e79c      	b.n	800d72a <rclc_executor_spin_some.part.0+0x1fe>
 800d7f0:	6843      	ldr	r3, [r0, #4]
 800d7f2:	6a1a      	ldr	r2, [r3, #32]
 800d7f4:	2a00      	cmp	r2, #0
 800d7f6:	d1f5      	bne.n	800d7e4 <rclc_executor_spin_some.part.0+0x2b8>
 800d7f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d0d0      	beq.n	800d7a2 <rclc_executor_spin_some.part.0+0x276>
 800d800:	e7f0      	b.n	800d7e4 <rclc_executor_spin_some.part.0+0x2b8>
 800d802:	6843      	ldr	r3, [r0, #4]
 800d804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d806:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800d80a:	d1eb      	bne.n	800d7e4 <rclc_executor_spin_some.part.0+0x2b8>
 800d80c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d810:	2a00      	cmp	r2, #0
 800d812:	d1e7      	bne.n	800d7e4 <rclc_executor_spin_some.part.0+0x2b8>
 800d814:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d0c2      	beq.n	800d7a2 <rclc_executor_spin_some.part.0+0x276>
 800d81c:	e7e2      	b.n	800d7e4 <rclc_executor_spin_some.part.0+0x2b8>
 800d81e:	270b      	movs	r7, #11
 800d820:	e783      	b.n	800d72a <rclc_executor_spin_some.part.0+0x1fe>
 800d822:	68aa      	ldr	r2, [r5, #8]
 800d824:	e6e2      	b.n	800d5ec <rclc_executor_spin_some.part.0+0xc0>
 800d826:	68aa      	ldr	r2, [r5, #8]
 800d828:	e7a1      	b.n	800d76e <rclc_executor_spin_some.part.0+0x242>
 800d82a:	6842      	ldr	r2, [r0, #4]
 800d82c:	6a11      	ldr	r1, [r2, #32]
 800d82e:	2900      	cmp	r1, #0
 800d830:	f47f af22 	bne.w	800d678 <rclc_executor_spin_some.part.0+0x14c>
 800d834:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800d838:	2a00      	cmp	r2, #0
 800d83a:	f43f af0b 	beq.w	800d654 <rclc_executor_spin_some.part.0+0x128>
 800d83e:	e71b      	b.n	800d678 <rclc_executor_spin_some.part.0+0x14c>
 800d840:	6842      	ldr	r2, [r0, #4]
 800d842:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800d844:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 800d848:	f47f af16 	bne.w	800d678 <rclc_executor_spin_some.part.0+0x14c>
 800d84c:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 800d850:	2900      	cmp	r1, #0
 800d852:	f47f af11 	bne.w	800d678 <rclc_executor_spin_some.part.0+0x14c>
 800d856:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 800d85a:	2a00      	cmp	r2, #0
 800d85c:	f43f aefa 	beq.w	800d654 <rclc_executor_spin_some.part.0+0x128>
 800d860:	e70a      	b.n	800d678 <rclc_executor_spin_some.part.0+0x14c>
 800d862:	68aa      	ldr	r2, [r5, #8]
 800d864:	461c      	mov	r4, r3
 800d866:	e782      	b.n	800d76e <rclc_executor_spin_some.part.0+0x242>
 800d868:	68aa      	ldr	r2, [r5, #8]
 800d86a:	461c      	mov	r4, r3
 800d86c:	e6be      	b.n	800d5ec <rclc_executor_spin_some.part.0+0xc0>
 800d86e:	bf00      	nop

0800d870 <rclc_executor_spin>:
 800d870:	b1d0      	cbz	r0, 800d8a8 <rclc_executor_spin+0x38>
 800d872:	b510      	push	{r4, lr}
 800d874:	4604      	mov	r4, r0
 800d876:	b082      	sub	sp, #8
 800d878:	e004      	b.n	800d884 <rclc_executor_spin+0x14>
 800d87a:	f7ff fe57 	bl	800d52c <rclc_executor_spin_some.part.0>
 800d87e:	f030 0302 	bics.w	r3, r0, #2
 800d882:	d10f      	bne.n	800d8a4 <rclc_executor_spin+0x34>
 800d884:	6860      	ldr	r0, [r4, #4]
 800d886:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
 800d88a:	e9cd 2300 	strd	r2, r3, [sp]
 800d88e:	f006 fe7b 	bl	8014588 <rcl_context_is_valid>
 800d892:	4601      	mov	r1, r0
 800d894:	4620      	mov	r0, r4
 800d896:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d89a:	2900      	cmp	r1, #0
 800d89c:	d1ed      	bne.n	800d87a <rclc_executor_spin+0xa>
 800d89e:	f000 f9f7 	bl	800dc90 <rcutils_reset_error>
 800d8a2:	2001      	movs	r0, #1
 800d8a4:	b002      	add	sp, #8
 800d8a6:	bd10      	pop	{r4, pc}
 800d8a8:	200b      	movs	r0, #11
 800d8aa:	4770      	bx	lr

0800d8ac <rclc_executor_handle_counters_zero_init>:
 800d8ac:	b130      	cbz	r0, 800d8bc <rclc_executor_handle_counters_zero_init+0x10>
 800d8ae:	2220      	movs	r2, #32
 800d8b0:	2100      	movs	r1, #0
 800d8b2:	b508      	push	{r3, lr}
 800d8b4:	f00e ff3e 	bl	801c734 <memset>
 800d8b8:	2000      	movs	r0, #0
 800d8ba:	bd08      	pop	{r3, pc}
 800d8bc:	200b      	movs	r0, #11
 800d8be:	4770      	bx	lr

0800d8c0 <rclc_executor_handle_init>:
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	b178      	cbz	r0, 800d8e4 <rclc_executor_handle_init+0x24>
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	f04f 0c0b 	mov.w	ip, #11
 800d8ca:	6341      	str	r1, [r0, #52]	; 0x34
 800d8cc:	4610      	mov	r0, r2
 800d8ce:	f8a3 c000 	strh.w	ip, [r3]
 800d8d2:	631a      	str	r2, [r3, #48]	; 0x30
 800d8d4:	871a      	strh	r2, [r3, #56]	; 0x38
 800d8d6:	ed9f 7b04 	vldr	d7, [pc, #16]	; 800d8e8 <rclc_executor_handle_init+0x28>
 800d8da:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800d8de:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 800d8e2:	4770      	bx	lr
 800d8e4:	200b      	movs	r0, #11
 800d8e6:	4770      	bx	lr
	...

0800d8f0 <rclc_support_init>:
 800d8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8f4:	b086      	sub	sp, #24
 800d8f6:	b3bb      	cbz	r3, 800d968 <rclc_support_init+0x78>
 800d8f8:	4606      	mov	r6, r0
 800d8fa:	b3a8      	cbz	r0, 800d968 <rclc_support_init+0x78>
 800d8fc:	461c      	mov	r4, r3
 800d8fe:	460f      	mov	r7, r1
 800d900:	4690      	mov	r8, r2
 800d902:	f006 ffe1 	bl	80148c8 <rcl_get_zero_initialized_init_options>
 800d906:	f104 050c 	add.w	r5, r4, #12
 800d90a:	9005      	str	r0, [sp, #20]
 800d90c:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d910:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d914:	a805      	add	r0, sp, #20
 800d916:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800d91a:	f006 ffd7 	bl	80148cc <rcl_init_options_init>
 800d91e:	4605      	mov	r5, r0
 800d920:	b9e0      	cbnz	r0, 800d95c <rclc_support_init+0x6c>
 800d922:	ad02      	add	r5, sp, #8
 800d924:	4628      	mov	r0, r5
 800d926:	f006 fe25 	bl	8014574 <rcl_get_zero_initialized_context>
 800d92a:	4633      	mov	r3, r6
 800d92c:	aa05      	add	r2, sp, #20
 800d92e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d932:	e886 0003 	stmia.w	r6, {r0, r1}
 800d936:	4641      	mov	r1, r8
 800d938:	4638      	mov	r0, r7
 800d93a:	f006 fe8b 	bl	8014654 <rcl_init>
 800d93e:	4605      	mov	r5, r0
 800d940:	b9b8      	cbnz	r0, 800d972 <rclc_support_init+0x82>
 800d942:	4622      	mov	r2, r4
 800d944:	f106 010c 	add.w	r1, r6, #12
 800d948:	2003      	movs	r0, #3
 800d94a:	60b4      	str	r4, [r6, #8]
 800d94c:	f007 ffd4 	bl	80158f8 <rcl_clock_init>
 800d950:	4605      	mov	r5, r0
 800d952:	b970      	cbnz	r0, 800d972 <rclc_support_init+0x82>
 800d954:	a805      	add	r0, sp, #20
 800d956:	f007 f815 	bl	8014984 <rcl_init_options_fini>
 800d95a:	b108      	cbz	r0, 800d960 <rclc_support_init+0x70>
 800d95c:	f000 f998 	bl	800dc90 <rcutils_reset_error>
 800d960:	4628      	mov	r0, r5
 800d962:	b006      	add	sp, #24
 800d964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d968:	250b      	movs	r5, #11
 800d96a:	4628      	mov	r0, r5
 800d96c:	b006      	add	sp, #24
 800d96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d972:	f000 f98d 	bl	800dc90 <rcutils_reset_error>
 800d976:	a805      	add	r0, sp, #20
 800d978:	f007 f804 	bl	8014984 <rcl_init_options_fini>
 800d97c:	2800      	cmp	r0, #0
 800d97e:	d0ef      	beq.n	800d960 <rclc_support_init+0x70>
 800d980:	e7ec      	b.n	800d95c <rclc_support_init+0x6c>
 800d982:	bf00      	nop

0800d984 <rclc_node_init_default>:
 800d984:	2b00      	cmp	r3, #0
 800d986:	bf18      	it	ne
 800d988:	2a00      	cmpne	r2, #0
 800d98a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d98e:	4616      	mov	r6, r2
 800d990:	bf0c      	ite	eq
 800d992:	2201      	moveq	r2, #1
 800d994:	2200      	movne	r2, #0
 800d996:	b0a3      	sub	sp, #140	; 0x8c
 800d998:	2900      	cmp	r1, #0
 800d99a:	bf08      	it	eq
 800d99c:	f042 0201 	orreq.w	r2, r2, #1
 800d9a0:	bb22      	cbnz	r2, 800d9ec <rclc_node_init_default+0x68>
 800d9a2:	4604      	mov	r4, r0
 800d9a4:	b310      	cbz	r0, 800d9ec <rclc_node_init_default+0x68>
 800d9a6:	f10d 0810 	add.w	r8, sp, #16
 800d9aa:	461f      	mov	r7, r3
 800d9ac:	460d      	mov	r5, r1
 800d9ae:	f10d 0918 	add.w	r9, sp, #24
 800d9b2:	4640      	mov	r0, r8
 800d9b4:	f007 f892 	bl	8014adc <rcl_get_zero_initialized_node>
 800d9b8:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d9bc:	e884 0003 	stmia.w	r4, {r0, r1}
 800d9c0:	4648      	mov	r0, r9
 800d9c2:	f007 fa25 	bl	8014e10 <rcl_node_get_default_options>
 800d9c6:	4640      	mov	r0, r8
 800d9c8:	f007 f888 	bl	8014adc <rcl_get_zero_initialized_node>
 800d9cc:	f8cd 9000 	str.w	r9, [sp]
 800d9d0:	463b      	mov	r3, r7
 800d9d2:	4632      	mov	r2, r6
 800d9d4:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d9d8:	e884 0003 	stmia.w	r4, {r0, r1}
 800d9dc:	4629      	mov	r1, r5
 800d9de:	4620      	mov	r0, r4
 800d9e0:	f007 f886 	bl	8014af0 <rcl_node_init>
 800d9e4:	b930      	cbnz	r0, 800d9f4 <rclc_node_init_default+0x70>
 800d9e6:	b023      	add	sp, #140	; 0x8c
 800d9e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9ec:	200b      	movs	r0, #11
 800d9ee:	b023      	add	sp, #140	; 0x8c
 800d9f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9f4:	9003      	str	r0, [sp, #12]
 800d9f6:	f000 f94b 	bl	800dc90 <rcutils_reset_error>
 800d9fa:	f000 f949 	bl	800dc90 <rcutils_reset_error>
 800d9fe:	9803      	ldr	r0, [sp, #12]
 800da00:	b023      	add	sp, #140	; 0x8c
 800da02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da06:	bf00      	nop

0800da08 <rclc_publisher_init_best_effort>:
 800da08:	2b00      	cmp	r3, #0
 800da0a:	bf18      	it	ne
 800da0c:	2a00      	cmpne	r2, #0
 800da0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da12:	4616      	mov	r6, r2
 800da14:	bf0c      	ite	eq
 800da16:	2201      	moveq	r2, #1
 800da18:	2200      	movne	r2, #0
 800da1a:	b0a0      	sub	sp, #128	; 0x80
 800da1c:	2900      	cmp	r1, #0
 800da1e:	bf08      	it	eq
 800da20:	f042 0201 	orreq.w	r2, r2, #1
 800da24:	bb1a      	cbnz	r2, 800da6e <rclc_publisher_init_best_effort+0x66>
 800da26:	4604      	mov	r4, r0
 800da28:	b308      	cbz	r0, 800da6e <rclc_publisher_init_best_effort+0x66>
 800da2a:	f10d 0810 	add.w	r8, sp, #16
 800da2e:	461f      	mov	r7, r3
 800da30:	460d      	mov	r5, r1
 800da32:	f7fe ff8b 	bl	800c94c <rcl_get_zero_initialized_publisher>
 800da36:	6020      	str	r0, [r4, #0]
 800da38:	4640      	mov	r0, r8
 800da3a:	f7ff f829 	bl	800ca90 <rcl_publisher_get_default_options>
 800da3e:	2250      	movs	r2, #80	; 0x50
 800da40:	490d      	ldr	r1, [pc, #52]	; (800da78 <rclc_publisher_init_best_effort+0x70>)
 800da42:	4640      	mov	r0, r8
 800da44:	f00e ffa7 	bl	801c996 <memcpy>
 800da48:	463b      	mov	r3, r7
 800da4a:	4632      	mov	r2, r6
 800da4c:	4629      	mov	r1, r5
 800da4e:	4620      	mov	r0, r4
 800da50:	f8cd 8000 	str.w	r8, [sp]
 800da54:	f7fe ff80 	bl	800c958 <rcl_publisher_init>
 800da58:	b910      	cbnz	r0, 800da60 <rclc_publisher_init_best_effort+0x58>
 800da5a:	b020      	add	sp, #128	; 0x80
 800da5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da60:	9003      	str	r0, [sp, #12]
 800da62:	f000 f915 	bl	800dc90 <rcutils_reset_error>
 800da66:	9803      	ldr	r0, [sp, #12]
 800da68:	b020      	add	sp, #128	; 0x80
 800da6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da6e:	200b      	movs	r0, #11
 800da70:	b020      	add	sp, #128	; 0x80
 800da72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da76:	bf00      	nop
 800da78:	0801e498 	.word	0x0801e498

0800da7c <rclc_service_init_default>:
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	bf18      	it	ne
 800da80:	2a00      	cmpne	r2, #0
 800da82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da86:	4616      	mov	r6, r2
 800da88:	bf0c      	ite	eq
 800da8a:	2201      	moveq	r2, #1
 800da8c:	2200      	movne	r2, #0
 800da8e:	b09e      	sub	sp, #120	; 0x78
 800da90:	2900      	cmp	r1, #0
 800da92:	bf08      	it	eq
 800da94:	f042 0201 	orreq.w	r2, r2, #1
 800da98:	bb1a      	cbnz	r2, 800dae2 <rclc_service_init_default+0x66>
 800da9a:	4604      	mov	r4, r0
 800da9c:	b308      	cbz	r0, 800dae2 <rclc_service_init_default+0x66>
 800da9e:	f10d 0810 	add.w	r8, sp, #16
 800daa2:	461f      	mov	r7, r3
 800daa4:	460d      	mov	r5, r1
 800daa6:	f007 fbb7 	bl	8015218 <rcl_get_zero_initialized_service>
 800daaa:	6020      	str	r0, [r4, #0]
 800daac:	4640      	mov	r0, r8
 800daae:	f007 fc61 	bl	8015374 <rcl_service_get_default_options>
 800dab2:	2250      	movs	r2, #80	; 0x50
 800dab4:	490d      	ldr	r1, [pc, #52]	; (800daec <rclc_service_init_default+0x70>)
 800dab6:	4640      	mov	r0, r8
 800dab8:	f00e ff6d 	bl	801c996 <memcpy>
 800dabc:	463b      	mov	r3, r7
 800dabe:	4632      	mov	r2, r6
 800dac0:	4629      	mov	r1, r5
 800dac2:	4620      	mov	r0, r4
 800dac4:	f8cd 8000 	str.w	r8, [sp]
 800dac8:	f007 fbac 	bl	8015224 <rcl_service_init>
 800dacc:	b910      	cbnz	r0, 800dad4 <rclc_service_init_default+0x58>
 800dace:	b01e      	add	sp, #120	; 0x78
 800dad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dad4:	9003      	str	r0, [sp, #12]
 800dad6:	f000 f8db 	bl	800dc90 <rcutils_reset_error>
 800dada:	9803      	ldr	r0, [sp, #12]
 800dadc:	b01e      	add	sp, #120	; 0x78
 800dade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dae2:	200b      	movs	r0, #11
 800dae4:	b01e      	add	sp, #120	; 0x78
 800dae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daea:	bf00      	nop
 800daec:	0801e4e8 	.word	0x0801e4e8

0800daf0 <rclc_subscription_init_best_effort>:
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	bf18      	it	ne
 800daf4:	2a00      	cmpne	r2, #0
 800daf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dafa:	4616      	mov	r6, r2
 800dafc:	bf0c      	ite	eq
 800dafe:	2201      	moveq	r2, #1
 800db00:	2200      	movne	r2, #0
 800db02:	b0a2      	sub	sp, #136	; 0x88
 800db04:	2900      	cmp	r1, #0
 800db06:	bf08      	it	eq
 800db08:	f042 0201 	orreq.w	r2, r2, #1
 800db0c:	bb1a      	cbnz	r2, 800db56 <rclc_subscription_init_best_effort+0x66>
 800db0e:	4604      	mov	r4, r0
 800db10:	b308      	cbz	r0, 800db56 <rclc_subscription_init_best_effort+0x66>
 800db12:	f10d 0810 	add.w	r8, sp, #16
 800db16:	461f      	mov	r7, r3
 800db18:	460d      	mov	r5, r1
 800db1a:	f007 fd7d 	bl	8015618 <rcl_get_zero_initialized_subscription>
 800db1e:	6020      	str	r0, [r4, #0]
 800db20:	4640      	mov	r0, r8
 800db22:	f007 fe2d 	bl	8015780 <rcl_subscription_get_default_options>
 800db26:	2250      	movs	r2, #80	; 0x50
 800db28:	490d      	ldr	r1, [pc, #52]	; (800db60 <rclc_subscription_init_best_effort+0x70>)
 800db2a:	4640      	mov	r0, r8
 800db2c:	f00e ff33 	bl	801c996 <memcpy>
 800db30:	463b      	mov	r3, r7
 800db32:	4632      	mov	r2, r6
 800db34:	4629      	mov	r1, r5
 800db36:	4620      	mov	r0, r4
 800db38:	f8cd 8000 	str.w	r8, [sp]
 800db3c:	f007 fd72 	bl	8015624 <rcl_subscription_init>
 800db40:	b910      	cbnz	r0, 800db48 <rclc_subscription_init_best_effort+0x58>
 800db42:	b022      	add	sp, #136	; 0x88
 800db44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db48:	9003      	str	r0, [sp, #12]
 800db4a:	f000 f8a1 	bl	800dc90 <rcutils_reset_error>
 800db4e:	9803      	ldr	r0, [sp, #12]
 800db50:	b022      	add	sp, #136	; 0x88
 800db52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db56:	200b      	movs	r0, #11
 800db58:	b022      	add	sp, #136	; 0x88
 800db5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db5e:	bf00      	nop
 800db60:	0801e538 	.word	0x0801e538

0800db64 <rclc_timer_init_default>:
 800db64:	b361      	cbz	r1, 800dbc0 <rclc_timer_init_default+0x5c>
 800db66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db6a:	4606      	mov	r6, r0
 800db6c:	b08a      	sub	sp, #40	; 0x28
 800db6e:	b318      	cbz	r0, 800dbb8 <rclc_timer_init_default+0x54>
 800db70:	460d      	mov	r5, r1
 800db72:	4690      	mov	r8, r2
 800db74:	461f      	mov	r7, r3
 800db76:	f008 f8b7 	bl	8015ce8 <rcl_get_zero_initialized_timer>
 800db7a:	68ac      	ldr	r4, [r5, #8]
 800db7c:	f10d 0c0c 	add.w	ip, sp, #12
 800db80:	6030      	str	r0, [r6, #0]
 800db82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800db84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800db88:	6823      	ldr	r3, [r4, #0]
 800db8a:	462a      	mov	r2, r5
 800db8c:	f105 010c 	add.w	r1, r5, #12
 800db90:	4630      	mov	r0, r6
 800db92:	f8cc 3000 	str.w	r3, [ip]
 800db96:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800db98:	e9cd 8700 	strd	r8, r7, [sp]
 800db9c:	9302      	str	r3, [sp, #8]
 800db9e:	f008 f8a9 	bl	8015cf4 <rcl_timer_init>
 800dba2:	b910      	cbnz	r0, 800dbaa <rclc_timer_init_default+0x46>
 800dba4:	b00a      	add	sp, #40	; 0x28
 800dba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbaa:	9009      	str	r0, [sp, #36]	; 0x24
 800dbac:	f000 f870 	bl	800dc90 <rcutils_reset_error>
 800dbb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dbb2:	b00a      	add	sp, #40	; 0x28
 800dbb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbb8:	200b      	movs	r0, #11
 800dbba:	b00a      	add	sp, #40	; 0x28
 800dbbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbc0:	200b      	movs	r0, #11
 800dbc2:	4770      	bx	lr

0800dbc4 <__default_zero_allocate>:
 800dbc4:	f00e b9d8 	b.w	801bf78 <calloc>

0800dbc8 <__default_reallocate>:
 800dbc8:	f00e bb64 	b.w	801c294 <realloc>

0800dbcc <__default_deallocate>:
 800dbcc:	f00e ba42 	b.w	801c054 <free>

0800dbd0 <__default_allocate>:
 800dbd0:	f00e ba38 	b.w	801c044 <malloc>

0800dbd4 <rcutils_get_zero_initialized_allocator>:
 800dbd4:	b510      	push	{r4, lr}
 800dbd6:	4c05      	ldr	r4, [pc, #20]	; (800dbec <rcutils_get_zero_initialized_allocator+0x18>)
 800dbd8:	4686      	mov	lr, r0
 800dbda:	4684      	mov	ip, r0
 800dbdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dbde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dbe2:	6823      	ldr	r3, [r4, #0]
 800dbe4:	4670      	mov	r0, lr
 800dbe6:	f8cc 3000 	str.w	r3, [ip]
 800dbea:	bd10      	pop	{r4, pc}
 800dbec:	0801e588 	.word	0x0801e588

0800dbf0 <rcutils_set_default_allocator>:
 800dbf0:	b1a8      	cbz	r0, 800dc1e <rcutils_set_default_allocator+0x2e>
 800dbf2:	6802      	ldr	r2, [r0, #0]
 800dbf4:	b1a2      	cbz	r2, 800dc20 <rcutils_set_default_allocator+0x30>
 800dbf6:	6841      	ldr	r1, [r0, #4]
 800dbf8:	b1a1      	cbz	r1, 800dc24 <rcutils_set_default_allocator+0x34>
 800dbfa:	b410      	push	{r4}
 800dbfc:	68c4      	ldr	r4, [r0, #12]
 800dbfe:	b164      	cbz	r4, 800dc1a <rcutils_set_default_allocator+0x2a>
 800dc00:	6880      	ldr	r0, [r0, #8]
 800dc02:	b138      	cbz	r0, 800dc14 <rcutils_set_default_allocator+0x24>
 800dc04:	4b08      	ldr	r3, [pc, #32]	; (800dc28 <rcutils_set_default_allocator+0x38>)
 800dc06:	601a      	str	r2, [r3, #0]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800dc0e:	2001      	movs	r0, #1
 800dc10:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800dc14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc18:	4770      	bx	lr
 800dc1a:	4620      	mov	r0, r4
 800dc1c:	e7fa      	b.n	800dc14 <rcutils_set_default_allocator+0x24>
 800dc1e:	4770      	bx	lr
 800dc20:	4610      	mov	r0, r2
 800dc22:	4770      	bx	lr
 800dc24:	4608      	mov	r0, r1
 800dc26:	4770      	bx	lr
 800dc28:	200009fc 	.word	0x200009fc

0800dc2c <rcutils_get_default_allocator>:
 800dc2c:	b510      	push	{r4, lr}
 800dc2e:	4c05      	ldr	r4, [pc, #20]	; (800dc44 <rcutils_get_default_allocator+0x18>)
 800dc30:	4686      	mov	lr, r0
 800dc32:	4684      	mov	ip, r0
 800dc34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dc36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dc3a:	6823      	ldr	r3, [r4, #0]
 800dc3c:	4670      	mov	r0, lr
 800dc3e:	f8cc 3000 	str.w	r3, [ip]
 800dc42:	bd10      	pop	{r4, pc}
 800dc44:	200009fc 	.word	0x200009fc

0800dc48 <rcutils_allocator_is_valid>:
 800dc48:	b158      	cbz	r0, 800dc62 <rcutils_allocator_is_valid+0x1a>
 800dc4a:	6803      	ldr	r3, [r0, #0]
 800dc4c:	b143      	cbz	r3, 800dc60 <rcutils_allocator_is_valid+0x18>
 800dc4e:	6843      	ldr	r3, [r0, #4]
 800dc50:	b133      	cbz	r3, 800dc60 <rcutils_allocator_is_valid+0x18>
 800dc52:	68c3      	ldr	r3, [r0, #12]
 800dc54:	b123      	cbz	r3, 800dc60 <rcutils_allocator_is_valid+0x18>
 800dc56:	6880      	ldr	r0, [r0, #8]
 800dc58:	3800      	subs	r0, #0
 800dc5a:	bf18      	it	ne
 800dc5c:	2001      	movne	r0, #1
 800dc5e:	4770      	bx	lr
 800dc60:	4618      	mov	r0, r3
 800dc62:	4770      	bx	lr

0800dc64 <rcutils_get_error_string>:
 800dc64:	4b06      	ldr	r3, [pc, #24]	; (800dc80 <rcutils_get_error_string+0x1c>)
 800dc66:	781b      	ldrb	r3, [r3, #0]
 800dc68:	b13b      	cbz	r3, 800dc7a <rcutils_get_error_string+0x16>
 800dc6a:	4b06      	ldr	r3, [pc, #24]	; (800dc84 <rcutils_get_error_string+0x20>)
 800dc6c:	781a      	ldrb	r2, [r3, #0]
 800dc6e:	b90a      	cbnz	r2, 800dc74 <rcutils_get_error_string+0x10>
 800dc70:	2201      	movs	r2, #1
 800dc72:	701a      	strb	r2, [r3, #0]
 800dc74:	4b04      	ldr	r3, [pc, #16]	; (800dc88 <rcutils_get_error_string+0x24>)
 800dc76:	7818      	ldrb	r0, [r3, #0]
 800dc78:	4770      	bx	lr
 800dc7a:	4b04      	ldr	r3, [pc, #16]	; (800dc8c <rcutils_get_error_string+0x28>)
 800dc7c:	7818      	ldrb	r0, [r3, #0]
 800dc7e:	4770      	bx	lr
 800dc80:	2000b988 	.word	0x2000b988
 800dc84:	2000b9a1 	.word	0x2000b9a1
 800dc88:	2000b9a0 	.word	0x2000b9a0
 800dc8c:	0801daac 	.word	0x0801daac

0800dc90 <rcutils_reset_error>:
 800dc90:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800dcb0 <rcutils_reset_error+0x20>
 800dc94:	2300      	movs	r3, #0
 800dc96:	4a08      	ldr	r2, [pc, #32]	; (800dcb8 <rcutils_reset_error+0x28>)
 800dc98:	4808      	ldr	r0, [pc, #32]	; (800dcbc <rcutils_reset_error+0x2c>)
 800dc9a:	8013      	strh	r3, [r2, #0]
 800dc9c:	4908      	ldr	r1, [pc, #32]	; (800dcc0 <rcutils_reset_error+0x30>)
 800dc9e:	7003      	strb	r3, [r0, #0]
 800dca0:	700b      	strb	r3, [r1, #0]
 800dca2:	ed82 7b02 	vstr	d7, [r2, #8]
 800dca6:	4a07      	ldr	r2, [pc, #28]	; (800dcc4 <rcutils_reset_error+0x34>)
 800dca8:	7013      	strb	r3, [r2, #0]
 800dcaa:	4770      	bx	lr
 800dcac:	f3af 8000 	nop.w
	...
 800dcb8:	2000b990 	.word	0x2000b990
 800dcbc:	2000b9a1 	.word	0x2000b9a1
 800dcc0:	2000b9a0 	.word	0x2000b9a0
 800dcc4:	2000b988 	.word	0x2000b988

0800dcc8 <rcutils_system_time_now>:
 800dcc8:	b310      	cbz	r0, 800dd10 <rcutils_system_time_now+0x48>
 800dcca:	b570      	push	{r4, r5, r6, lr}
 800dccc:	b084      	sub	sp, #16
 800dcce:	4604      	mov	r4, r0
 800dcd0:	2001      	movs	r0, #1
 800dcd2:	4669      	mov	r1, sp
 800dcd4:	f7f4 ff20 	bl	8002b18 <clock_gettime>
 800dcd8:	2800      	cmp	r0, #0
 800dcda:	db16      	blt.n	800dd0a <rcutils_system_time_now+0x42>
 800dcdc:	e9dd 3100 	ldrd	r3, r1, [sp]
 800dce0:	2900      	cmp	r1, #0
 800dce2:	db12      	blt.n	800dd0a <rcutils_system_time_now+0x42>
 800dce4:	ea53 0201 	orrs.w	r2, r3, r1
 800dce8:	9d02      	ldr	r5, [sp, #8]
 800dcea:	d101      	bne.n	800dcf0 <rcutils_system_time_now+0x28>
 800dcec:	2d00      	cmp	r5, #0
 800dcee:	db0c      	blt.n	800dd0a <rcutils_system_time_now+0x42>
 800dcf0:	4e08      	ldr	r6, [pc, #32]	; (800dd14 <rcutils_system_time_now+0x4c>)
 800dcf2:	2000      	movs	r0, #0
 800dcf4:	fba3 3206 	umull	r3, r2, r3, r6
 800dcf8:	195b      	adds	r3, r3, r5
 800dcfa:	fb06 2201 	mla	r2, r6, r1, r2
 800dcfe:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800dd02:	e9c4 3200 	strd	r3, r2, [r4]
 800dd06:	b004      	add	sp, #16
 800dd08:	bd70      	pop	{r4, r5, r6, pc}
 800dd0a:	2002      	movs	r0, #2
 800dd0c:	b004      	add	sp, #16
 800dd0e:	bd70      	pop	{r4, r5, r6, pc}
 800dd10:	200b      	movs	r0, #11
 800dd12:	4770      	bx	lr
 800dd14:	3b9aca00 	.word	0x3b9aca00

0800dd18 <rcutils_steady_time_now>:
 800dd18:	b310      	cbz	r0, 800dd60 <rcutils_steady_time_now+0x48>
 800dd1a:	b570      	push	{r4, r5, r6, lr}
 800dd1c:	b084      	sub	sp, #16
 800dd1e:	4604      	mov	r4, r0
 800dd20:	2000      	movs	r0, #0
 800dd22:	4669      	mov	r1, sp
 800dd24:	f7f4 fef8 	bl	8002b18 <clock_gettime>
 800dd28:	2800      	cmp	r0, #0
 800dd2a:	db16      	blt.n	800dd5a <rcutils_steady_time_now+0x42>
 800dd2c:	e9dd 3100 	ldrd	r3, r1, [sp]
 800dd30:	2900      	cmp	r1, #0
 800dd32:	db12      	blt.n	800dd5a <rcutils_steady_time_now+0x42>
 800dd34:	ea53 0201 	orrs.w	r2, r3, r1
 800dd38:	9d02      	ldr	r5, [sp, #8]
 800dd3a:	d101      	bne.n	800dd40 <rcutils_steady_time_now+0x28>
 800dd3c:	2d00      	cmp	r5, #0
 800dd3e:	db0c      	blt.n	800dd5a <rcutils_steady_time_now+0x42>
 800dd40:	4e08      	ldr	r6, [pc, #32]	; (800dd64 <rcutils_steady_time_now+0x4c>)
 800dd42:	2000      	movs	r0, #0
 800dd44:	fba3 3206 	umull	r3, r2, r3, r6
 800dd48:	195b      	adds	r3, r3, r5
 800dd4a:	fb06 2201 	mla	r2, r6, r1, r2
 800dd4e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800dd52:	e9c4 3200 	strd	r3, r2, [r4]
 800dd56:	b004      	add	sp, #16
 800dd58:	bd70      	pop	{r4, r5, r6, pc}
 800dd5a:	2002      	movs	r0, #2
 800dd5c:	b004      	add	sp, #16
 800dd5e:	bd70      	pop	{r4, r5, r6, pc}
 800dd60:	200b      	movs	r0, #11
 800dd62:	4770      	bx	lr
 800dd64:	3b9aca00 	.word	0x3b9aca00

0800dd68 <rmw_get_default_publisher_options>:
 800dd68:	2200      	movs	r2, #0
 800dd6a:	6002      	str	r2, [r0, #0]
 800dd6c:	7102      	strb	r2, [r0, #4]
 800dd6e:	4770      	bx	lr

0800dd70 <rmw_uros_set_custom_transport>:
 800dd70:	b470      	push	{r4, r5, r6}
 800dd72:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800dd76:	b162      	cbz	r2, 800dd92 <rmw_uros_set_custom_transport+0x22>
 800dd78:	b15b      	cbz	r3, 800dd92 <rmw_uros_set_custom_transport+0x22>
 800dd7a:	b155      	cbz	r5, 800dd92 <rmw_uros_set_custom_transport+0x22>
 800dd7c:	b14e      	cbz	r6, 800dd92 <rmw_uros_set_custom_transport+0x22>
 800dd7e:	4c06      	ldr	r4, [pc, #24]	; (800dd98 <rmw_uros_set_custom_transport+0x28>)
 800dd80:	7020      	strb	r0, [r4, #0]
 800dd82:	2000      	movs	r0, #0
 800dd84:	6166      	str	r6, [r4, #20]
 800dd86:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800dd8a:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800dd8e:	bc70      	pop	{r4, r5, r6}
 800dd90:	4770      	bx	lr
 800dd92:	200b      	movs	r0, #11
 800dd94:	bc70      	pop	{r4, r5, r6}
 800dd96:	4770      	bx	lr
 800dd98:	2000b9a4 	.word	0x2000b9a4

0800dd9c <flush_session>:
 800dd9c:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800dd9e:	f003 bcaf 	b.w	8011700 <uxr_run_session_until_confirm_delivery>
 800dda2:	bf00      	nop

0800dda4 <rmw_publish>:
 800dda4:	2800      	cmp	r0, #0
 800dda6:	d053      	beq.n	800de50 <rmw_publish+0xac>
 800dda8:	b570      	push	{r4, r5, r6, lr}
 800ddaa:	460d      	mov	r5, r1
 800ddac:	b08e      	sub	sp, #56	; 0x38
 800ddae:	2900      	cmp	r1, #0
 800ddb0:	d04b      	beq.n	800de4a <rmw_publish+0xa6>
 800ddb2:	4604      	mov	r4, r0
 800ddb4:	6800      	ldr	r0, [r0, #0]
 800ddb6:	f000 fd97 	bl	800e8e8 <is_uxrce_rmw_identifier_valid>
 800ddba:	2800      	cmp	r0, #0
 800ddbc:	d045      	beq.n	800de4a <rmw_publish+0xa6>
 800ddbe:	6866      	ldr	r6, [r4, #4]
 800ddc0:	2e00      	cmp	r6, #0
 800ddc2:	d042      	beq.n	800de4a <rmw_publish+0xa6>
 800ddc4:	69b4      	ldr	r4, [r6, #24]
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	6923      	ldr	r3, [r4, #16]
 800ddca:	4798      	blx	r3
 800ddcc:	69f3      	ldr	r3, [r6, #28]
 800ddce:	9005      	str	r0, [sp, #20]
 800ddd0:	b113      	cbz	r3, 800ddd8 <rmw_publish+0x34>
 800ddd2:	a805      	add	r0, sp, #20
 800ddd4:	4798      	blx	r3
 800ddd6:	9805      	ldr	r0, [sp, #20]
 800ddd8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800dddc:	691b      	ldr	r3, [r3, #16]
 800ddde:	9000      	str	r0, [sp, #0]
 800dde0:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800dde4:	6972      	ldr	r2, [r6, #20]
 800dde6:	ab06      	add	r3, sp, #24
 800dde8:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800ddea:	f004 fa87 	bl	80122fc <uxr_prepare_output_stream>
 800ddee:	b1d8      	cbz	r0, 800de28 <rmw_publish+0x84>
 800ddf0:	68a3      	ldr	r3, [r4, #8]
 800ddf2:	a906      	add	r1, sp, #24
 800ddf4:	4628      	mov	r0, r5
 800ddf6:	4798      	blx	r3
 800ddf8:	6a33      	ldr	r3, [r6, #32]
 800ddfa:	4604      	mov	r4, r0
 800ddfc:	b10b      	cbz	r3, 800de02 <rmw_publish+0x5e>
 800ddfe:	a806      	add	r0, sp, #24
 800de00:	4798      	blx	r3
 800de02:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800de06:	2b01      	cmp	r3, #1
 800de08:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800de0c:	d022      	beq.n	800de54 <rmw_publish+0xb0>
 800de0e:	6918      	ldr	r0, [r3, #16]
 800de10:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800de12:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800de16:	f003 fc73 	bl	8011700 <uxr_run_session_until_confirm_delivery>
 800de1a:	4020      	ands	r0, r4
 800de1c:	b2c4      	uxtb	r4, r0
 800de1e:	f084 0001 	eor.w	r0, r4, #1
 800de22:	b2c0      	uxtb	r0, r0
 800de24:	b00e      	add	sp, #56	; 0x38
 800de26:	bd70      	pop	{r4, r5, r6, pc}
 800de28:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800de2c:	6918      	ldr	r0, [r3, #16]
 800de2e:	9b05      	ldr	r3, [sp, #20]
 800de30:	9602      	str	r6, [sp, #8]
 800de32:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800de36:	9300      	str	r3, [sp, #0]
 800de38:	4b09      	ldr	r3, [pc, #36]	; (800de60 <rmw_publish+0xbc>)
 800de3a:	9301      	str	r3, [sp, #4]
 800de3c:	ab06      	add	r3, sp, #24
 800de3e:	6972      	ldr	r2, [r6, #20]
 800de40:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800de42:	f004 fa8b 	bl	801235c <uxr_prepare_output_stream_fragmented>
 800de46:	2800      	cmp	r0, #0
 800de48:	d1d2      	bne.n	800ddf0 <rmw_publish+0x4c>
 800de4a:	2001      	movs	r0, #1
 800de4c:	b00e      	add	sp, #56	; 0x38
 800de4e:	bd70      	pop	{r4, r5, r6, pc}
 800de50:	2001      	movs	r0, #1
 800de52:	4770      	bx	lr
 800de54:	6918      	ldr	r0, [r3, #16]
 800de56:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800de5a:	f003 f897 	bl	8010f8c <uxr_flash_output_streams>
 800de5e:	e7de      	b.n	800de1e <rmw_publish+0x7a>
 800de60:	0800dd9d 	.word	0x0800dd9d

0800de64 <rmw_create_publisher>:
 800de64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de68:	b087      	sub	sp, #28
 800de6a:	2800      	cmp	r0, #0
 800de6c:	f000 80d2 	beq.w	800e014 <rmw_create_publisher+0x1b0>
 800de70:	460e      	mov	r6, r1
 800de72:	2900      	cmp	r1, #0
 800de74:	f000 80ce 	beq.w	800e014 <rmw_create_publisher+0x1b0>
 800de78:	4604      	mov	r4, r0
 800de7a:	6800      	ldr	r0, [r0, #0]
 800de7c:	4615      	mov	r5, r2
 800de7e:	461f      	mov	r7, r3
 800de80:	f000 fd32 	bl	800e8e8 <is_uxrce_rmw_identifier_valid>
 800de84:	f080 0001 	eor.w	r0, r0, #1
 800de88:	b2c0      	uxtb	r0, r0
 800de8a:	2800      	cmp	r0, #0
 800de8c:	f040 80c2 	bne.w	800e014 <rmw_create_publisher+0x1b0>
 800de90:	2d00      	cmp	r5, #0
 800de92:	f000 80bf 	beq.w	800e014 <rmw_create_publisher+0x1b0>
 800de96:	782b      	ldrb	r3, [r5, #0]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	f000 80bb 	beq.w	800e014 <rmw_create_publisher+0x1b0>
 800de9e:	2f00      	cmp	r7, #0
 800dea0:	f000 80b8 	beq.w	800e014 <rmw_create_publisher+0x1b0>
 800dea4:	485e      	ldr	r0, [pc, #376]	; (800e020 <rmw_create_publisher+0x1bc>)
 800dea6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800deaa:	f00a fa2b 	bl	8018304 <get_memory>
 800deae:	2800      	cmp	r0, #0
 800deb0:	f000 80b0 	beq.w	800e014 <rmw_create_publisher+0x1b0>
 800deb4:	6884      	ldr	r4, [r0, #8]
 800deb6:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 800deba:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800debe:	f00a faa7 	bl	8018410 <rmw_get_implementation_identifier>
 800dec2:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800dec6:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800deca:	4628      	mov	r0, r5
 800decc:	f7f2 fa18 	bl	8000300 <strlen>
 800ded0:	3001      	adds	r0, #1
 800ded2:	f104 0884 	add.w	r8, r4, #132	; 0x84
 800ded6:	283c      	cmp	r0, #60	; 0x3c
 800ded8:	f200 808f 	bhi.w	800dffa <rmw_create_publisher+0x196>
 800dedc:	462b      	mov	r3, r5
 800dede:	4a51      	ldr	r2, [pc, #324]	; (800e024 <rmw_create_publisher+0x1c0>)
 800dee0:	213c      	movs	r1, #60	; 0x3c
 800dee2:	4650      	mov	r0, sl
 800dee4:	f00e fb4c 	bl	801c580 <sniprintf>
 800dee8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800deec:	4639      	mov	r1, r7
 800deee:	2250      	movs	r2, #80	; 0x50
 800def0:	67e3      	str	r3, [r4, #124]	; 0x7c
 800def2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800def6:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 800defa:	f00e fd4c 	bl	801c996 <memcpy>
 800defe:	7a3b      	ldrb	r3, [r7, #8]
 800df00:	4630      	mov	r0, r6
 800df02:	4949      	ldr	r1, [pc, #292]	; (800e028 <rmw_create_publisher+0x1c4>)
 800df04:	2b02      	cmp	r3, #2
 800df06:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df0a:	bf0c      	ite	eq
 800df0c:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800df10:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800df14:	67a3      	str	r3, [r4, #120]	; 0x78
 800df16:	2300      	movs	r3, #0
 800df18:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800df1c:	f000 fcf2 	bl	800e904 <get_message_typesupport_handle>
 800df20:	2800      	cmp	r0, #0
 800df22:	d06a      	beq.n	800dffa <rmw_create_publisher+0x196>
 800df24:	6842      	ldr	r2, [r0, #4]
 800df26:	61a2      	str	r2, [r4, #24]
 800df28:	2a00      	cmp	r2, #0
 800df2a:	d066      	beq.n	800dffa <rmw_create_publisher+0x196>
 800df2c:	4629      	mov	r1, r5
 800df2e:	463b      	mov	r3, r7
 800df30:	4648      	mov	r0, r9
 800df32:	f00a fcab 	bl	801888c <create_topic>
 800df36:	6260      	str	r0, [r4, #36]	; 0x24
 800df38:	2800      	cmp	r0, #0
 800df3a:	d062      	beq.n	800e002 <rmw_create_publisher+0x19e>
 800df3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df40:	2103      	movs	r1, #3
 800df42:	2506      	movs	r5, #6
 800df44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df48:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 800df4c:	1c42      	adds	r2, r0, #1
 800df4e:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 800df52:	f002 fecb 	bl	8010cec <uxr_object_id>
 800df56:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800df5a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df5e:	6120      	str	r0, [r4, #16]
 800df60:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800df64:	6910      	ldr	r0, [r2, #16]
 800df66:	9500      	str	r5, [sp, #0]
 800df68:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800df6c:	6819      	ldr	r1, [r3, #0]
 800df6e:	6922      	ldr	r2, [r4, #16]
 800df70:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800df74:	f002 fd32 	bl	80109dc <uxr_buffer_create_publisher_bin>
 800df78:	4602      	mov	r2, r0
 800df7a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800df7e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800df82:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800df86:	f000 fb9d 	bl	800e6c4 <run_xrce_session>
 800df8a:	b3b0      	cbz	r0, 800dffa <rmw_create_publisher+0x196>
 800df8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df90:	2105      	movs	r1, #5
 800df92:	f10d 0a10 	add.w	sl, sp, #16
 800df96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df9a:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 800df9e:	1c42      	adds	r2, r0, #1
 800dfa0:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 800dfa4:	f002 fea2 	bl	8010cec <uxr_object_id>
 800dfa8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800dfac:	4639      	mov	r1, r7
 800dfae:	6160      	str	r0, [r4, #20]
 800dfb0:	691e      	ldr	r6, [r3, #16]
 800dfb2:	4650      	mov	r0, sl
 800dfb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dfb8:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800dfbc:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 800dfc0:	f8d3 7384 	ldr.w	r7, [r3, #900]	; 0x384
 800dfc4:	f000 fb9a 	bl	800e6fc <convert_qos_profile>
 800dfc8:	9503      	str	r5, [sp, #12]
 800dfca:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800dfce:	9001      	str	r0, [sp, #4]
 800dfd0:	4630      	mov	r0, r6
 800dfd2:	f8ad 1008 	strh.w	r1, [sp, #8]
 800dfd6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800dfda:	9300      	str	r3, [sp, #0]
 800dfdc:	6839      	ldr	r1, [r7, #0]
 800dfde:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800dfe2:	f002 fd5b 	bl	8010a9c <uxr_buffer_create_datawriter_bin>
 800dfe6:	4602      	mov	r2, r0
 800dfe8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800dfec:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800dff0:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800dff4:	f000 fb66 	bl	800e6c4 <run_xrce_session>
 800dff8:	b970      	cbnz	r0, 800e018 <rmw_create_publisher+0x1b4>
 800dffa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800dffc:	b108      	cbz	r0, 800e002 <rmw_create_publisher+0x19e>
 800dffe:	f000 fa53 	bl	800e4a8 <rmw_uxrce_fini_topic_memory>
 800e002:	4640      	mov	r0, r8
 800e004:	f04f 0800 	mov.w	r8, #0
 800e008:	f000 f9f6 	bl	800e3f8 <rmw_uxrce_fini_publisher_memory>
 800e00c:	4640      	mov	r0, r8
 800e00e:	b007      	add	sp, #28
 800e010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e014:	f04f 0800 	mov.w	r8, #0
 800e018:	4640      	mov	r0, r8
 800e01a:	b007      	add	sp, #28
 800e01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e020:	20010364 	.word	0x20010364
 800e024:	0801e5ac 	.word	0x0801e5ac
 800e028:	0801d950 	.word	0x0801d950

0800e02c <rmw_publisher_get_actual_qos>:
 800e02c:	b178      	cbz	r0, 800e04e <rmw_publisher_get_actual_qos+0x22>
 800e02e:	b510      	push	{r4, lr}
 800e030:	fab1 f481 	clz	r4, r1
 800e034:	0964      	lsrs	r4, r4, #5
 800e036:	b141      	cbz	r1, 800e04a <rmw_publisher_get_actual_qos+0x1e>
 800e038:	6843      	ldr	r3, [r0, #4]
 800e03a:	2250      	movs	r2, #80	; 0x50
 800e03c:	4608      	mov	r0, r1
 800e03e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800e042:	f00e fca8 	bl	801c996 <memcpy>
 800e046:	4620      	mov	r0, r4
 800e048:	bd10      	pop	{r4, pc}
 800e04a:	200b      	movs	r0, #11
 800e04c:	bd10      	pop	{r4, pc}
 800e04e:	200b      	movs	r0, #11
 800e050:	4770      	bx	lr
 800e052:	bf00      	nop

0800e054 <rmw_destroy_publisher>:
 800e054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e058:	b128      	cbz	r0, 800e066 <rmw_destroy_publisher+0x12>
 800e05a:	4604      	mov	r4, r0
 800e05c:	6800      	ldr	r0, [r0, #0]
 800e05e:	460d      	mov	r5, r1
 800e060:	f000 fc42 	bl	800e8e8 <is_uxrce_rmw_identifier_valid>
 800e064:	b918      	cbnz	r0, 800e06e <rmw_destroy_publisher+0x1a>
 800e066:	2401      	movs	r4, #1
 800e068:	4620      	mov	r0, r4
 800e06a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e06e:	6863      	ldr	r3, [r4, #4]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d0f8      	beq.n	800e066 <rmw_destroy_publisher+0x12>
 800e074:	fab5 f485 	clz	r4, r5
 800e078:	0964      	lsrs	r4, r4, #5
 800e07a:	2d00      	cmp	r5, #0
 800e07c:	d0f3      	beq.n	800e066 <rmw_destroy_publisher+0x12>
 800e07e:	6828      	ldr	r0, [r5, #0]
 800e080:	f000 fc32 	bl	800e8e8 <is_uxrce_rmw_identifier_valid>
 800e084:	2800      	cmp	r0, #0
 800e086:	d0ee      	beq.n	800e066 <rmw_destroy_publisher+0x12>
 800e088:	686e      	ldr	r6, [r5, #4]
 800e08a:	2e00      	cmp	r6, #0
 800e08c:	d0eb      	beq.n	800e066 <rmw_destroy_publisher+0x12>
 800e08e:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800e090:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 800e094:	f00a fc4a 	bl	801892c <destroy_topic>
 800e098:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800e09c:	6972      	ldr	r2, [r6, #20]
 800e09e:	6918      	ldr	r0, [r3, #16]
 800e0a0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e0a4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e0a8:	6819      	ldr	r1, [r3, #0]
 800e0aa:	f002 fbe3 	bl	8010874 <uxr_buffer_delete_entity>
 800e0ae:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800e0b2:	4680      	mov	r8, r0
 800e0b4:	6932      	ldr	r2, [r6, #16]
 800e0b6:	6918      	ldr	r0, [r3, #16]
 800e0b8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800e0bc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e0c0:	6819      	ldr	r1, [r3, #0]
 800e0c2:	f002 fbd7 	bl	8010874 <uxr_buffer_delete_entity>
 800e0c6:	4606      	mov	r6, r0
 800e0c8:	6938      	ldr	r0, [r7, #16]
 800e0ca:	4642      	mov	r2, r8
 800e0cc:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 800e0d0:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 800e0d4:	f000 faf6 	bl	800e6c4 <run_xrce_session>
 800e0d8:	693f      	ldr	r7, [r7, #16]
 800e0da:	4632      	mov	r2, r6
 800e0dc:	4606      	mov	r6, r0
 800e0de:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 800e0e2:	4638      	mov	r0, r7
 800e0e4:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 800e0e8:	f000 faec 	bl	800e6c4 <run_xrce_session>
 800e0ec:	b126      	cbz	r6, 800e0f8 <rmw_destroy_publisher+0xa4>
 800e0ee:	b118      	cbz	r0, 800e0f8 <rmw_destroy_publisher+0xa4>
 800e0f0:	4628      	mov	r0, r5
 800e0f2:	f000 f981 	bl	800e3f8 <rmw_uxrce_fini_publisher_memory>
 800e0f6:	e7b7      	b.n	800e068 <rmw_destroy_publisher+0x14>
 800e0f8:	2402      	movs	r4, #2
 800e0fa:	e7f9      	b.n	800e0f0 <rmw_destroy_publisher+0x9c>

0800e0fc <rmw_uxrce_init_service_memory>:
 800e0fc:	b1e2      	cbz	r2, 800e138 <rmw_uxrce_init_service_memory+0x3c>
 800e0fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e102:	7b05      	ldrb	r5, [r0, #12]
 800e104:	4606      	mov	r6, r0
 800e106:	b9ad      	cbnz	r5, 800e134 <rmw_uxrce_init_service_memory+0x38>
 800e108:	23c8      	movs	r3, #200	; 0xc8
 800e10a:	4617      	mov	r7, r2
 800e10c:	460c      	mov	r4, r1
 800e10e:	46a8      	mov	r8, r5
 800e110:	6083      	str	r3, [r0, #8]
 800e112:	f240 1301 	movw	r3, #257	; 0x101
 800e116:	e9c0 5500 	strd	r5, r5, [r0]
 800e11a:	8183      	strh	r3, [r0, #12]
 800e11c:	3501      	adds	r5, #1
 800e11e:	4621      	mov	r1, r4
 800e120:	4630      	mov	r0, r6
 800e122:	f00a f8ff 	bl	8018324 <put_memory>
 800e126:	42af      	cmp	r7, r5
 800e128:	60a4      	str	r4, [r4, #8]
 800e12a:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800e12e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800e132:	d1f3      	bne.n	800e11c <rmw_uxrce_init_service_memory+0x20>
 800e134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e138:	4770      	bx	lr
 800e13a:	bf00      	nop

0800e13c <rmw_uxrce_init_client_memory>:
 800e13c:	b1e2      	cbz	r2, 800e178 <rmw_uxrce_init_client_memory+0x3c>
 800e13e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e142:	7b05      	ldrb	r5, [r0, #12]
 800e144:	4606      	mov	r6, r0
 800e146:	b9ad      	cbnz	r5, 800e174 <rmw_uxrce_init_client_memory+0x38>
 800e148:	23c8      	movs	r3, #200	; 0xc8
 800e14a:	4617      	mov	r7, r2
 800e14c:	460c      	mov	r4, r1
 800e14e:	46a8      	mov	r8, r5
 800e150:	6083      	str	r3, [r0, #8]
 800e152:	f240 1301 	movw	r3, #257	; 0x101
 800e156:	e9c0 5500 	strd	r5, r5, [r0]
 800e15a:	8183      	strh	r3, [r0, #12]
 800e15c:	3501      	adds	r5, #1
 800e15e:	4621      	mov	r1, r4
 800e160:	4630      	mov	r0, r6
 800e162:	f00a f8df 	bl	8018324 <put_memory>
 800e166:	42af      	cmp	r7, r5
 800e168:	60a4      	str	r4, [r4, #8]
 800e16a:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800e16e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 800e172:	d1f3      	bne.n	800e15c <rmw_uxrce_init_client_memory+0x20>
 800e174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e178:	4770      	bx	lr
 800e17a:	bf00      	nop

0800e17c <rmw_uxrce_init_publisher_memory>:
 800e17c:	b1e2      	cbz	r2, 800e1b8 <rmw_uxrce_init_publisher_memory+0x3c>
 800e17e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e182:	7b05      	ldrb	r5, [r0, #12]
 800e184:	4606      	mov	r6, r0
 800e186:	b9ad      	cbnz	r5, 800e1b4 <rmw_uxrce_init_publisher_memory+0x38>
 800e188:	23d8      	movs	r3, #216	; 0xd8
 800e18a:	4617      	mov	r7, r2
 800e18c:	460c      	mov	r4, r1
 800e18e:	46a8      	mov	r8, r5
 800e190:	6083      	str	r3, [r0, #8]
 800e192:	f240 1301 	movw	r3, #257	; 0x101
 800e196:	e9c0 5500 	strd	r5, r5, [r0]
 800e19a:	8183      	strh	r3, [r0, #12]
 800e19c:	3501      	adds	r5, #1
 800e19e:	4621      	mov	r1, r4
 800e1a0:	4630      	mov	r0, r6
 800e1a2:	f00a f8bf 	bl	8018324 <put_memory>
 800e1a6:	42af      	cmp	r7, r5
 800e1a8:	60a4      	str	r4, [r4, #8]
 800e1aa:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800e1ae:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800e1b2:	d1f3      	bne.n	800e19c <rmw_uxrce_init_publisher_memory+0x20>
 800e1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1b8:	4770      	bx	lr
 800e1ba:	bf00      	nop

0800e1bc <rmw_uxrce_init_subscription_memory>:
 800e1bc:	b1e2      	cbz	r2, 800e1f8 <rmw_uxrce_init_subscription_memory+0x3c>
 800e1be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1c2:	7b05      	ldrb	r5, [r0, #12]
 800e1c4:	4606      	mov	r6, r0
 800e1c6:	b9ad      	cbnz	r5, 800e1f4 <rmw_uxrce_init_subscription_memory+0x38>
 800e1c8:	23d8      	movs	r3, #216	; 0xd8
 800e1ca:	4617      	mov	r7, r2
 800e1cc:	460c      	mov	r4, r1
 800e1ce:	46a8      	mov	r8, r5
 800e1d0:	6083      	str	r3, [r0, #8]
 800e1d2:	f240 1301 	movw	r3, #257	; 0x101
 800e1d6:	e9c0 5500 	strd	r5, r5, [r0]
 800e1da:	8183      	strh	r3, [r0, #12]
 800e1dc:	3501      	adds	r5, #1
 800e1de:	4621      	mov	r1, r4
 800e1e0:	4630      	mov	r0, r6
 800e1e2:	f00a f89f 	bl	8018324 <put_memory>
 800e1e6:	42af      	cmp	r7, r5
 800e1e8:	60a4      	str	r4, [r4, #8]
 800e1ea:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800e1ee:	f804 8ccc 	strb.w	r8, [r4, #-204]
 800e1f2:	d1f3      	bne.n	800e1dc <rmw_uxrce_init_subscription_memory+0x20>
 800e1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1f8:	4770      	bx	lr
 800e1fa:	bf00      	nop

0800e1fc <rmw_uxrce_init_node_memory>:
 800e1fc:	b1e2      	cbz	r2, 800e238 <rmw_uxrce_init_node_memory+0x3c>
 800e1fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e202:	7b05      	ldrb	r5, [r0, #12]
 800e204:	4606      	mov	r6, r0
 800e206:	b9ad      	cbnz	r5, 800e234 <rmw_uxrce_init_node_memory+0x38>
 800e208:	23a4      	movs	r3, #164	; 0xa4
 800e20a:	4617      	mov	r7, r2
 800e20c:	460c      	mov	r4, r1
 800e20e:	46a8      	mov	r8, r5
 800e210:	6083      	str	r3, [r0, #8]
 800e212:	f240 1301 	movw	r3, #257	; 0x101
 800e216:	e9c0 5500 	strd	r5, r5, [r0]
 800e21a:	8183      	strh	r3, [r0, #12]
 800e21c:	3501      	adds	r5, #1
 800e21e:	4621      	mov	r1, r4
 800e220:	4630      	mov	r0, r6
 800e222:	f00a f87f 	bl	8018324 <put_memory>
 800e226:	42af      	cmp	r7, r5
 800e228:	60a4      	str	r4, [r4, #8]
 800e22a:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800e22e:	f804 8c98 	strb.w	r8, [r4, #-152]
 800e232:	d1f3      	bne.n	800e21c <rmw_uxrce_init_node_memory+0x20>
 800e234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e238:	4770      	bx	lr
 800e23a:	bf00      	nop

0800e23c <rmw_uxrce_init_session_memory>:
 800e23c:	b1ea      	cbz	r2, 800e27a <rmw_uxrce_init_session_memory+0x3e>
 800e23e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e242:	7b05      	ldrb	r5, [r0, #12]
 800e244:	4606      	mov	r6, r0
 800e246:	b9b5      	cbnz	r5, 800e276 <rmw_uxrce_init_session_memory+0x3a>
 800e248:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800e24c:	f240 1301 	movw	r3, #257	; 0x101
 800e250:	4617      	mov	r7, r2
 800e252:	460c      	mov	r4, r1
 800e254:	46a9      	mov	r9, r5
 800e256:	f8c0 8008 	str.w	r8, [r0, #8]
 800e25a:	8183      	strh	r3, [r0, #12]
 800e25c:	e9c0 5500 	strd	r5, r5, [r0]
 800e260:	3501      	adds	r5, #1
 800e262:	4621      	mov	r1, r4
 800e264:	4630      	mov	r0, r6
 800e266:	f00a f85d 	bl	8018324 <put_memory>
 800e26a:	42af      	cmp	r7, r5
 800e26c:	60a4      	str	r4, [r4, #8]
 800e26e:	f884 900c 	strb.w	r9, [r4, #12]
 800e272:	4444      	add	r4, r8
 800e274:	d1f4      	bne.n	800e260 <rmw_uxrce_init_session_memory+0x24>
 800e276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e27a:	4770      	bx	lr

0800e27c <rmw_uxrce_init_topic_memory>:
 800e27c:	b1e2      	cbz	r2, 800e2b8 <rmw_uxrce_init_topic_memory+0x3c>
 800e27e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e282:	7b05      	ldrb	r5, [r0, #12]
 800e284:	4606      	mov	r6, r0
 800e286:	b9ad      	cbnz	r5, 800e2b4 <rmw_uxrce_init_topic_memory+0x38>
 800e288:	231c      	movs	r3, #28
 800e28a:	4617      	mov	r7, r2
 800e28c:	460c      	mov	r4, r1
 800e28e:	46a8      	mov	r8, r5
 800e290:	6083      	str	r3, [r0, #8]
 800e292:	f240 1301 	movw	r3, #257	; 0x101
 800e296:	e9c0 5500 	strd	r5, r5, [r0]
 800e29a:	8183      	strh	r3, [r0, #12]
 800e29c:	3501      	adds	r5, #1
 800e29e:	4621      	mov	r1, r4
 800e2a0:	4630      	mov	r0, r6
 800e2a2:	f00a f83f 	bl	8018324 <put_memory>
 800e2a6:	42af      	cmp	r7, r5
 800e2a8:	60a4      	str	r4, [r4, #8]
 800e2aa:	f104 041c 	add.w	r4, r4, #28
 800e2ae:	f804 8c10 	strb.w	r8, [r4, #-16]
 800e2b2:	d1f3      	bne.n	800e29c <rmw_uxrce_init_topic_memory+0x20>
 800e2b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2b8:	4770      	bx	lr
 800e2ba:	bf00      	nop

0800e2bc <rmw_uxrce_init_static_input_buffer_memory>:
 800e2bc:	b1ea      	cbz	r2, 800e2fa <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800e2be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2c2:	7b05      	ldrb	r5, [r0, #12]
 800e2c4:	4606      	mov	r6, r0
 800e2c6:	b9b5      	cbnz	r5, 800e2f6 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800e2c8:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800e2cc:	4617      	mov	r7, r2
 800e2ce:	460c      	mov	r4, r1
 800e2d0:	46a8      	mov	r8, r5
 800e2d2:	6083      	str	r3, [r0, #8]
 800e2d4:	f240 1301 	movw	r3, #257	; 0x101
 800e2d8:	e9c0 5500 	strd	r5, r5, [r0]
 800e2dc:	8183      	strh	r3, [r0, #12]
 800e2de:	3501      	adds	r5, #1
 800e2e0:	4621      	mov	r1, r4
 800e2e2:	4630      	mov	r0, r6
 800e2e4:	f00a f81e 	bl	8018324 <put_memory>
 800e2e8:	42af      	cmp	r7, r5
 800e2ea:	60a4      	str	r4, [r4, #8]
 800e2ec:	f884 800c 	strb.w	r8, [r4, #12]
 800e2f0:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800e2f4:	d1f3      	bne.n	800e2de <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800e2f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2fa:	4770      	bx	lr

0800e2fc <rmw_uxrce_init_init_options_impl_memory>:
 800e2fc:	b1e2      	cbz	r2, 800e338 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800e2fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e302:	7b05      	ldrb	r5, [r0, #12]
 800e304:	4606      	mov	r6, r0
 800e306:	b9ad      	cbnz	r5, 800e334 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800e308:	232c      	movs	r3, #44	; 0x2c
 800e30a:	4617      	mov	r7, r2
 800e30c:	460c      	mov	r4, r1
 800e30e:	46a8      	mov	r8, r5
 800e310:	6083      	str	r3, [r0, #8]
 800e312:	f240 1301 	movw	r3, #257	; 0x101
 800e316:	e9c0 5500 	strd	r5, r5, [r0]
 800e31a:	8183      	strh	r3, [r0, #12]
 800e31c:	3501      	adds	r5, #1
 800e31e:	4621      	mov	r1, r4
 800e320:	4630      	mov	r0, r6
 800e322:	f009 ffff 	bl	8018324 <put_memory>
 800e326:	42af      	cmp	r7, r5
 800e328:	60a4      	str	r4, [r4, #8]
 800e32a:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800e32e:	f804 8c20 	strb.w	r8, [r4, #-32]
 800e332:	d1f3      	bne.n	800e31c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800e334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e338:	4770      	bx	lr
 800e33a:	bf00      	nop

0800e33c <rmw_uxrce_init_wait_set_memory>:
 800e33c:	b1e2      	cbz	r2, 800e378 <rmw_uxrce_init_wait_set_memory+0x3c>
 800e33e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e342:	7b05      	ldrb	r5, [r0, #12]
 800e344:	4606      	mov	r6, r0
 800e346:	b9ad      	cbnz	r5, 800e374 <rmw_uxrce_init_wait_set_memory+0x38>
 800e348:	231c      	movs	r3, #28
 800e34a:	4617      	mov	r7, r2
 800e34c:	460c      	mov	r4, r1
 800e34e:	46a8      	mov	r8, r5
 800e350:	6083      	str	r3, [r0, #8]
 800e352:	f240 1301 	movw	r3, #257	; 0x101
 800e356:	e9c0 5500 	strd	r5, r5, [r0]
 800e35a:	8183      	strh	r3, [r0, #12]
 800e35c:	3501      	adds	r5, #1
 800e35e:	4621      	mov	r1, r4
 800e360:	4630      	mov	r0, r6
 800e362:	f009 ffdf 	bl	8018324 <put_memory>
 800e366:	42af      	cmp	r7, r5
 800e368:	60a4      	str	r4, [r4, #8]
 800e36a:	f104 041c 	add.w	r4, r4, #28
 800e36e:	f804 8c10 	strb.w	r8, [r4, #-16]
 800e372:	d1f3      	bne.n	800e35c <rmw_uxrce_init_wait_set_memory+0x20>
 800e374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e378:	4770      	bx	lr
 800e37a:	bf00      	nop

0800e37c <rmw_uxrce_init_guard_condition_memory>:
 800e37c:	b1e2      	cbz	r2, 800e3b8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800e37e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e382:	7b05      	ldrb	r5, [r0, #12]
 800e384:	4606      	mov	r6, r0
 800e386:	b9ad      	cbnz	r5, 800e3b4 <rmw_uxrce_init_guard_condition_memory+0x38>
 800e388:	2320      	movs	r3, #32
 800e38a:	4617      	mov	r7, r2
 800e38c:	460c      	mov	r4, r1
 800e38e:	46a8      	mov	r8, r5
 800e390:	6083      	str	r3, [r0, #8]
 800e392:	f240 1301 	movw	r3, #257	; 0x101
 800e396:	e9c0 5500 	strd	r5, r5, [r0]
 800e39a:	8183      	strh	r3, [r0, #12]
 800e39c:	3501      	adds	r5, #1
 800e39e:	4621      	mov	r1, r4
 800e3a0:	4630      	mov	r0, r6
 800e3a2:	f009 ffbf 	bl	8018324 <put_memory>
 800e3a6:	42af      	cmp	r7, r5
 800e3a8:	60a4      	str	r4, [r4, #8]
 800e3aa:	f104 0420 	add.w	r4, r4, #32
 800e3ae:	f804 8c14 	strb.w	r8, [r4, #-20]
 800e3b2:	d1f3      	bne.n	800e39c <rmw_uxrce_init_guard_condition_memory+0x20>
 800e3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3b8:	4770      	bx	lr
 800e3ba:	bf00      	nop

0800e3bc <rmw_uxrce_fini_session_memory>:
 800e3bc:	4601      	mov	r1, r0
 800e3be:	4801      	ldr	r0, [pc, #4]	; (800e3c4 <rmw_uxrce_fini_session_memory+0x8>)
 800e3c0:	f009 bfb0 	b.w	8018324 <put_memory>
 800e3c4:	20010384 	.word	0x20010384

0800e3c8 <rmw_uxrce_fini_node_memory>:
 800e3c8:	b538      	push	{r3, r4, r5, lr}
 800e3ca:	4604      	mov	r4, r0
 800e3cc:	6800      	ldr	r0, [r0, #0]
 800e3ce:	b128      	cbz	r0, 800e3dc <rmw_uxrce_fini_node_memory+0x14>
 800e3d0:	4b07      	ldr	r3, [pc, #28]	; (800e3f0 <rmw_uxrce_fini_node_memory+0x28>)
 800e3d2:	6819      	ldr	r1, [r3, #0]
 800e3d4:	f7f1 ff34 	bl	8000240 <strcmp>
 800e3d8:	b940      	cbnz	r0, 800e3ec <rmw_uxrce_fini_node_memory+0x24>
 800e3da:	6020      	str	r0, [r4, #0]
 800e3dc:	6861      	ldr	r1, [r4, #4]
 800e3de:	b129      	cbz	r1, 800e3ec <rmw_uxrce_fini_node_memory+0x24>
 800e3e0:	2500      	movs	r5, #0
 800e3e2:	4804      	ldr	r0, [pc, #16]	; (800e3f4 <rmw_uxrce_fini_node_memory+0x2c>)
 800e3e4:	610d      	str	r5, [r1, #16]
 800e3e6:	f009 ff9d 	bl	8018324 <put_memory>
 800e3ea:	6065      	str	r5, [r4, #4]
 800e3ec:	bd38      	pop	{r3, r4, r5, pc}
 800e3ee:	bf00      	nop
 800e3f0:	0801f050 	.word	0x0801f050
 800e3f4:	20010354 	.word	0x20010354

0800e3f8 <rmw_uxrce_fini_publisher_memory>:
 800e3f8:	b510      	push	{r4, lr}
 800e3fa:	4604      	mov	r4, r0
 800e3fc:	6800      	ldr	r0, [r0, #0]
 800e3fe:	b128      	cbz	r0, 800e40c <rmw_uxrce_fini_publisher_memory+0x14>
 800e400:	4b06      	ldr	r3, [pc, #24]	; (800e41c <rmw_uxrce_fini_publisher_memory+0x24>)
 800e402:	6819      	ldr	r1, [r3, #0]
 800e404:	f7f1 ff1c 	bl	8000240 <strcmp>
 800e408:	b938      	cbnz	r0, 800e41a <rmw_uxrce_fini_publisher_memory+0x22>
 800e40a:	6020      	str	r0, [r4, #0]
 800e40c:	6861      	ldr	r1, [r4, #4]
 800e40e:	b121      	cbz	r1, 800e41a <rmw_uxrce_fini_publisher_memory+0x22>
 800e410:	4803      	ldr	r0, [pc, #12]	; (800e420 <rmw_uxrce_fini_publisher_memory+0x28>)
 800e412:	f009 ff87 	bl	8018324 <put_memory>
 800e416:	2300      	movs	r3, #0
 800e418:	6063      	str	r3, [r4, #4]
 800e41a:	bd10      	pop	{r4, pc}
 800e41c:	0801f050 	.word	0x0801f050
 800e420:	20010364 	.word	0x20010364

0800e424 <rmw_uxrce_fini_subscription_memory>:
 800e424:	b510      	push	{r4, lr}
 800e426:	4604      	mov	r4, r0
 800e428:	6800      	ldr	r0, [r0, #0]
 800e42a:	b128      	cbz	r0, 800e438 <rmw_uxrce_fini_subscription_memory+0x14>
 800e42c:	4b06      	ldr	r3, [pc, #24]	; (800e448 <rmw_uxrce_fini_subscription_memory+0x24>)
 800e42e:	6819      	ldr	r1, [r3, #0]
 800e430:	f7f1 ff06 	bl	8000240 <strcmp>
 800e434:	b938      	cbnz	r0, 800e446 <rmw_uxrce_fini_subscription_memory+0x22>
 800e436:	6020      	str	r0, [r4, #0]
 800e438:	6861      	ldr	r1, [r4, #4]
 800e43a:	b121      	cbz	r1, 800e446 <rmw_uxrce_fini_subscription_memory+0x22>
 800e43c:	4803      	ldr	r0, [pc, #12]	; (800e44c <rmw_uxrce_fini_subscription_memory+0x28>)
 800e43e:	f009 ff71 	bl	8018324 <put_memory>
 800e442:	2300      	movs	r3, #0
 800e444:	6063      	str	r3, [r4, #4]
 800e446:	bd10      	pop	{r4, pc}
 800e448:	0801f050 	.word	0x0801f050
 800e44c:	200103a4 	.word	0x200103a4

0800e450 <rmw_uxrce_fini_service_memory>:
 800e450:	b510      	push	{r4, lr}
 800e452:	4604      	mov	r4, r0
 800e454:	6800      	ldr	r0, [r0, #0]
 800e456:	b128      	cbz	r0, 800e464 <rmw_uxrce_fini_service_memory+0x14>
 800e458:	4b06      	ldr	r3, [pc, #24]	; (800e474 <rmw_uxrce_fini_service_memory+0x24>)
 800e45a:	6819      	ldr	r1, [r3, #0]
 800e45c:	f7f1 fef0 	bl	8000240 <strcmp>
 800e460:	b938      	cbnz	r0, 800e472 <rmw_uxrce_fini_service_memory+0x22>
 800e462:	6020      	str	r0, [r4, #0]
 800e464:	6861      	ldr	r1, [r4, #4]
 800e466:	b121      	cbz	r1, 800e472 <rmw_uxrce_fini_service_memory+0x22>
 800e468:	4803      	ldr	r0, [pc, #12]	; (800e478 <rmw_uxrce_fini_service_memory+0x28>)
 800e46a:	f009 ff5b 	bl	8018324 <put_memory>
 800e46e:	2300      	movs	r3, #0
 800e470:	6063      	str	r3, [r4, #4]
 800e472:	bd10      	pop	{r4, pc}
 800e474:	0801f050 	.word	0x0801f050
 800e478:	20010374 	.word	0x20010374

0800e47c <rmw_uxrce_fini_client_memory>:
 800e47c:	b510      	push	{r4, lr}
 800e47e:	4604      	mov	r4, r0
 800e480:	6800      	ldr	r0, [r0, #0]
 800e482:	b128      	cbz	r0, 800e490 <rmw_uxrce_fini_client_memory+0x14>
 800e484:	4b06      	ldr	r3, [pc, #24]	; (800e4a0 <rmw_uxrce_fini_client_memory+0x24>)
 800e486:	6819      	ldr	r1, [r3, #0]
 800e488:	f7f1 feda 	bl	8000240 <strcmp>
 800e48c:	b938      	cbnz	r0, 800e49e <rmw_uxrce_fini_client_memory+0x22>
 800e48e:	6020      	str	r0, [r4, #0]
 800e490:	6861      	ldr	r1, [r4, #4]
 800e492:	b121      	cbz	r1, 800e49e <rmw_uxrce_fini_client_memory+0x22>
 800e494:	4803      	ldr	r0, [pc, #12]	; (800e4a4 <rmw_uxrce_fini_client_memory+0x28>)
 800e496:	f009 ff45 	bl	8018324 <put_memory>
 800e49a:	2300      	movs	r3, #0
 800e49c:	6063      	str	r3, [r4, #4]
 800e49e:	bd10      	pop	{r4, pc}
 800e4a0:	0801f050 	.word	0x0801f050
 800e4a4:	2000b9c0 	.word	0x2000b9c0

0800e4a8 <rmw_uxrce_fini_topic_memory>:
 800e4a8:	b510      	push	{r4, lr}
 800e4aa:	4604      	mov	r4, r0
 800e4ac:	4803      	ldr	r0, [pc, #12]	; (800e4bc <rmw_uxrce_fini_topic_memory+0x14>)
 800e4ae:	4621      	mov	r1, r4
 800e4b0:	f009 ff38 	bl	8018324 <put_memory>
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	61a3      	str	r3, [r4, #24]
 800e4b8:	bd10      	pop	{r4, pc}
 800e4ba:	bf00      	nop
 800e4bc:	200103b4 	.word	0x200103b4

0800e4c0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800e4c0:	b082      	sub	sp, #8
 800e4c2:	492b      	ldr	r1, [pc, #172]	; (800e570 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800e4c4:	b530      	push	{r4, r5, lr}
 800e4c6:	680d      	ldr	r5, [r1, #0]
 800e4c8:	ac03      	add	r4, sp, #12
 800e4ca:	e884 000c 	stmia.w	r4, {r2, r3}
 800e4ce:	461c      	mov	r4, r3
 800e4d0:	2d00      	cmp	r5, #0
 800e4d2:	d04b      	beq.n	800e56c <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 800e4d4:	462b      	mov	r3, r5
 800e4d6:	2100      	movs	r1, #0
 800e4d8:	689a      	ldr	r2, [r3, #8]
 800e4da:	685b      	ldr	r3, [r3, #4]
 800e4dc:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800e4e0:	4290      	cmp	r0, r2
 800e4e2:	bf08      	it	eq
 800e4e4:	3101      	addeq	r1, #1
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d1f6      	bne.n	800e4d8 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800e4ea:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e4ee:	2b02      	cmp	r3, #2
 800e4f0:	d029      	beq.n	800e546 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e4f2:	d820      	bhi.n	800e536 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 800e4f4:	428c      	cmp	r4, r1
 800e4f6:	d828      	bhi.n	800e54a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800e4f8:	fab4 f284 	clz	r2, r4
 800e4fc:	0952      	lsrs	r2, r2, #5
 800e4fe:	b324      	cbz	r4, 800e54a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 800e500:	b1dd      	cbz	r5, 800e53a <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 800e502:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800e506:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800e50a:	e001      	b.n	800e510 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 800e50c:	686d      	ldr	r5, [r5, #4]
 800e50e:	b1ad      	cbz	r5, 800e53c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800e510:	68ab      	ldr	r3, [r5, #8]
 800e512:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 800e516:	4288      	cmp	r0, r1
 800e518:	d1f8      	bne.n	800e50c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800e51a:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 800e51e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800e522:	4561      	cmp	r1, ip
 800e524:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800e528:	eb73 0e04 	sbcs.w	lr, r3, r4
 800e52c:	daee      	bge.n	800e50c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800e52e:	468c      	mov	ip, r1
 800e530:	461c      	mov	r4, r3
 800e532:	462a      	mov	r2, r5
 800e534:	e7ea      	b.n	800e50c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 800e536:	2b03      	cmp	r3, #3
 800e538:	d0dc      	beq.n	800e4f4 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 800e53a:	2200      	movs	r2, #0
 800e53c:	4610      	mov	r0, r2
 800e53e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e542:	b002      	add	sp, #8
 800e544:	4770      	bx	lr
 800e546:	428c      	cmp	r4, r1
 800e548:	d905      	bls.n	800e556 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 800e54a:	4809      	ldr	r0, [pc, #36]	; (800e570 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800e54c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e550:	b002      	add	sp, #8
 800e552:	f009 bed7 	b.w	8018304 <get_memory>
 800e556:	fab4 f284 	clz	r2, r4
 800e55a:	0952      	lsrs	r2, r2, #5
 800e55c:	2c00      	cmp	r4, #0
 800e55e:	d1ed      	bne.n	800e53c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 800e560:	4803      	ldr	r0, [pc, #12]	; (800e570 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 800e562:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e566:	b002      	add	sp, #8
 800e568:	f009 becc 	b.w	8018304 <get_memory>
 800e56c:	4629      	mov	r1, r5
 800e56e:	e7bc      	b.n	800e4ea <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800e570:	20010394 	.word	0x20010394

0800e574 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800e574:	4b12      	ldr	r3, [pc, #72]	; (800e5c0 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	b530      	push	{r4, r5, lr}
 800e57a:	b1f3      	cbz	r3, 800e5ba <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 800e57c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800e580:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 800e584:	2400      	movs	r4, #0
 800e586:	e001      	b.n	800e58c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e588:	685b      	ldr	r3, [r3, #4]
 800e58a:	b1a3      	cbz	r3, 800e5b6 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800e58c:	689a      	ldr	r2, [r3, #8]
 800e58e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 800e592:	4288      	cmp	r0, r1
 800e594:	d1f8      	bne.n	800e588 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e596:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 800e59a:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 800e59e:	4571      	cmp	r1, lr
 800e5a0:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800e5a4:	eb72 050c 	sbcs.w	r5, r2, ip
 800e5a8:	daee      	bge.n	800e588 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e5aa:	461c      	mov	r4, r3
 800e5ac:	685b      	ldr	r3, [r3, #4]
 800e5ae:	468e      	mov	lr, r1
 800e5b0:	4694      	mov	ip, r2
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d1ea      	bne.n	800e58c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e5b6:	4620      	mov	r0, r4
 800e5b8:	bd30      	pop	{r4, r5, pc}
 800e5ba:	461c      	mov	r4, r3
 800e5bc:	4620      	mov	r0, r4
 800e5be:	bd30      	pop	{r4, r5, pc}
 800e5c0:	20010394 	.word	0x20010394
 800e5c4:	00000000 	.word	0x00000000

0800e5c8 <rmw_uxrce_clean_expired_static_input_buffer>:
 800e5c8:	4b3d      	ldr	r3, [pc, #244]	; (800e6c0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e5ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ce:	681f      	ldr	r7, [r3, #0]
 800e5d0:	ed2d 8b06 	vpush	{d8-d10}
 800e5d4:	b08d      	sub	sp, #52	; 0x34
 800e5d6:	f00b f8d1 	bl	801977c <rmw_uros_epoch_nanos>
 800e5da:	2f00      	cmp	r7, #0
 800e5dc:	d05d      	beq.n	800e69a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e5de:	46b8      	mov	r8, r7
 800e5e0:	4681      	mov	r9, r0
 800e5e2:	468a      	mov	sl, r1
 800e5e4:	ac04      	add	r4, sp, #16
 800e5e6:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e5ea:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800e5ee:	2b04      	cmp	r3, #4
 800e5f0:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 800e6a8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800e5f4:	ed9f ab2e 	vldr	d10, [pc, #184]	; 800e6b0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800e5f8:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 800e6b8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800e5fc:	d03f      	beq.n	800e67e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e5fe:	2b05      	cmp	r3, #5
 800e600:	d044      	beq.n	800e68c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800e602:	2b03      	cmp	r3, #3
 800e604:	d03b      	beq.n	800e67e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e606:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e60a:	ed8d ab06 	vstr	d10, [sp, #24]
 800e60e:	ab08      	add	r3, sp, #32
 800e610:	ed8d 8b08 	vstr	d8, [sp, #32]
 800e614:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 800e618:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e61a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e61e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e622:	f009 fc91 	bl	8017f48 <rmw_time_equal>
 800e626:	b118      	cbz	r0, 800e630 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800e628:	ed8d 9b04 	vstr	d9, [sp, #16]
 800e62c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e630:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 800e634:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 800e638:	f855 7c04 	ldr.w	r7, [r5, #-4]
 800e63c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800e640:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e644:	f009 fcd6 	bl	8017ff4 <rmw_time_total_nsec>
 800e648:	1830      	adds	r0, r6, r0
 800e64a:	eb47 0101 	adc.w	r1, r7, r1
 800e64e:	4548      	cmp	r0, r9
 800e650:	eb71 030a 	sbcs.w	r3, r1, sl
 800e654:	db05      	blt.n	800e662 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800e656:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800e65a:	4591      	cmp	r9, r2
 800e65c:	eb7a 0303 	sbcs.w	r3, sl, r3
 800e660:	da03      	bge.n	800e66a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800e662:	4641      	mov	r1, r8
 800e664:	4816      	ldr	r0, [pc, #88]	; (800e6c0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e666:	f009 fe5d 	bl	8018324 <put_memory>
 800e66a:	f1bb 0f00 	cmp.w	fp, #0
 800e66e:	d014      	beq.n	800e69a <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e670:	46d8      	mov	r8, fp
 800e672:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e676:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 800e67a:	2b04      	cmp	r3, #4
 800e67c:	d1bf      	bne.n	800e5fe <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800e67e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800e682:	3340      	adds	r3, #64	; 0x40
 800e684:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e686:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e68a:	e7c0      	b.n	800e60e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e68c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 800e690:	3348      	adds	r3, #72	; 0x48
 800e692:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e694:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e698:	e7b9      	b.n	800e60e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e69a:	b00d      	add	sp, #52	; 0x34
 800e69c:	ecbd 8b06 	vpop	{d8-d10}
 800e6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6a4:	f3af 8000 	nop.w
	...
 800e6b0:	00000001 	.word	0x00000001
 800e6b4:	00000000 	.word	0x00000000
 800e6b8:	0000001e 	.word	0x0000001e
 800e6bc:	00000000 	.word	0x00000000
 800e6c0:	20010394 	.word	0x20010394

0800e6c4 <run_xrce_session>:
 800e6c4:	b510      	push	{r4, lr}
 800e6c6:	788c      	ldrb	r4, [r1, #2]
 800e6c8:	b086      	sub	sp, #24
 800e6ca:	2c01      	cmp	r4, #1
 800e6cc:	f8ad 200e 	strh.w	r2, [sp, #14]
 800e6d0:	d00c      	beq.n	800e6ec <run_xrce_session+0x28>
 800e6d2:	2401      	movs	r4, #1
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	f10d 020e 	add.w	r2, sp, #14
 800e6da:	f10d 0317 	add.w	r3, sp, #23
 800e6de:	9400      	str	r4, [sp, #0]
 800e6e0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e6e4:	f003 f830 	bl	8011748 <uxr_run_session_until_all_status>
 800e6e8:	b006      	add	sp, #24
 800e6ea:	bd10      	pop	{r4, pc}
 800e6ec:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800e6f0:	f002 fc4c 	bl	8010f8c <uxr_flash_output_streams>
 800e6f4:	4620      	mov	r0, r4
 800e6f6:	b006      	add	sp, #24
 800e6f8:	bd10      	pop	{r4, pc}
 800e6fa:	bf00      	nop

0800e6fc <convert_qos_profile>:
 800e6fc:	7a4a      	ldrb	r2, [r1, #9]
 800e6fe:	f891 c008 	ldrb.w	ip, [r1, #8]
 800e702:	2a02      	cmp	r2, #2
 800e704:	bf18      	it	ne
 800e706:	2200      	movne	r2, #0
 800e708:	7002      	strb	r2, [r0, #0]
 800e70a:	f1ac 0202 	sub.w	r2, ip, #2
 800e70e:	fab2 f282 	clz	r2, r2
 800e712:	0952      	lsrs	r2, r2, #5
 800e714:	7042      	strb	r2, [r0, #1]
 800e716:	780a      	ldrb	r2, [r1, #0]
 800e718:	8889      	ldrh	r1, [r1, #4]
 800e71a:	f1a2 0202 	sub.w	r2, r2, #2
 800e71e:	8081      	strh	r1, [r0, #4]
 800e720:	fab2 f282 	clz	r2, r2
 800e724:	0952      	lsrs	r2, r2, #5
 800e726:	7082      	strb	r2, [r0, #2]
 800e728:	4770      	bx	lr
 800e72a:	bf00      	nop

0800e72c <generate_service_topics>:
 800e72c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e72e:	461d      	mov	r5, r3
 800e730:	b083      	sub	sp, #12
 800e732:	4606      	mov	r6, r0
 800e734:	4c11      	ldr	r4, [pc, #68]	; (800e77c <generate_service_topics+0x50>)
 800e736:	4608      	mov	r0, r1
 800e738:	4b11      	ldr	r3, [pc, #68]	; (800e780 <generate_service_topics+0x54>)
 800e73a:	4617      	mov	r7, r2
 800e73c:	4629      	mov	r1, r5
 800e73e:	4a11      	ldr	r2, [pc, #68]	; (800e784 <generate_service_topics+0x58>)
 800e740:	9401      	str	r4, [sp, #4]
 800e742:	9600      	str	r6, [sp, #0]
 800e744:	f00d ff1c 	bl	801c580 <sniprintf>
 800e748:	4a0f      	ldr	r2, [pc, #60]	; (800e788 <generate_service_topics+0x5c>)
 800e74a:	4604      	mov	r4, r0
 800e74c:	4b0f      	ldr	r3, [pc, #60]	; (800e78c <generate_service_topics+0x60>)
 800e74e:	9201      	str	r2, [sp, #4]
 800e750:	4638      	mov	r0, r7
 800e752:	4a0c      	ldr	r2, [pc, #48]	; (800e784 <generate_service_topics+0x58>)
 800e754:	4629      	mov	r1, r5
 800e756:	9600      	str	r6, [sp, #0]
 800e758:	f00d ff12 	bl	801c580 <sniprintf>
 800e75c:	2c00      	cmp	r4, #0
 800e75e:	bfa8      	it	ge
 800e760:	42a5      	cmpge	r5, r4
 800e762:	bfcc      	ite	gt
 800e764:	2401      	movgt	r4, #1
 800e766:	2400      	movle	r4, #0
 800e768:	dd05      	ble.n	800e776 <generate_service_topics+0x4a>
 800e76a:	2800      	cmp	r0, #0
 800e76c:	bfa8      	it	ge
 800e76e:	4285      	cmpge	r5, r0
 800e770:	bfcc      	ite	gt
 800e772:	2401      	movgt	r4, #1
 800e774:	2400      	movle	r4, #0
 800e776:	4620      	mov	r0, r4
 800e778:	b003      	add	sp, #12
 800e77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e77c:	0801e5d0 	.word	0x0801e5d0
 800e780:	0801e5cc 	.word	0x0801e5cc
 800e784:	0801e5a8 	.word	0x0801e5a8
 800e788:	0801e5c4 	.word	0x0801e5c4
 800e78c:	0801e5c0 	.word	0x0801e5c0

0800e790 <generate_service_types>:
 800e790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e794:	4606      	mov	r6, r0
 800e796:	b087      	sub	sp, #28
 800e798:	461c      	mov	r4, r3
 800e79a:	6883      	ldr	r3, [r0, #8]
 800e79c:	460d      	mov	r5, r1
 800e79e:	4617      	mov	r7, r2
 800e7a0:	4798      	blx	r3
 800e7a2:	68f3      	ldr	r3, [r6, #12]
 800e7a4:	4606      	mov	r6, r0
 800e7a6:	4798      	blx	r3
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800e7ae:	6872      	ldr	r2, [r6, #4]
 800e7b0:	702b      	strb	r3, [r5, #0]
 800e7b2:	6813      	ldr	r3, [r2, #0]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d03f      	beq.n	800e838 <generate_service_types+0xa8>
 800e7b8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800e84c <generate_service_types+0xbc>
 800e7bc:	4649      	mov	r1, r9
 800e7be:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800e854 <generate_service_types+0xc4>
 800e7c2:	4628      	mov	r0, r5
 800e7c4:	f8df a090 	ldr.w	sl, [pc, #144]	; 800e858 <generate_service_types+0xc8>
 800e7c8:	f8cd 8014 	str.w	r8, [sp, #20]
 800e7cc:	6852      	ldr	r2, [r2, #4]
 800e7ce:	9100      	str	r1, [sp, #0]
 800e7d0:	4621      	mov	r1, r4
 800e7d2:	f8cd 8008 	str.w	r8, [sp, #8]
 800e7d6:	f8cd a004 	str.w	sl, [sp, #4]
 800e7da:	e9cd 9203 	strd	r9, r2, [sp, #12]
 800e7de:	4a1a      	ldr	r2, [pc, #104]	; (800e848 <generate_service_types+0xb8>)
 800e7e0:	f00d fece 	bl	801c580 <sniprintf>
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	42a0      	cmp	r0, r4
 800e7e8:	ea6f 0600 	mvn.w	r6, r0
 800e7ec:	703b      	strb	r3, [r7, #0]
 800e7ee:	f8db 3000 	ldr.w	r3, [fp]
 800e7f2:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 800e7f6:	bfac      	ite	ge
 800e7f8:	2500      	movge	r5, #0
 800e7fa:	2501      	movlt	r5, #1
 800e7fc:	b30b      	cbz	r3, 800e842 <generate_service_types+0xb2>
 800e7fe:	4a13      	ldr	r2, [pc, #76]	; (800e84c <generate_service_types+0xbc>)
 800e800:	f8cd 8014 	str.w	r8, [sp, #20]
 800e804:	402e      	ands	r6, r5
 800e806:	f8db 1004 	ldr.w	r1, [fp, #4]
 800e80a:	4638      	mov	r0, r7
 800e80c:	9104      	str	r1, [sp, #16]
 800e80e:	4621      	mov	r1, r4
 800e810:	e9cd 2a00 	strd	r2, sl, [sp]
 800e814:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800e818:	4a0b      	ldr	r2, [pc, #44]	; (800e848 <generate_service_types+0xb8>)
 800e81a:	f00d feb1 	bl	801c580 <sniprintf>
 800e81e:	2800      	cmp	r0, #0
 800e820:	bfb4      	ite	lt
 800e822:	2600      	movlt	r6, #0
 800e824:	f006 0601 	andge.w	r6, r6, #1
 800e828:	42a0      	cmp	r0, r4
 800e82a:	bfac      	ite	ge
 800e82c:	2000      	movge	r0, #0
 800e82e:	f006 0001 	andlt.w	r0, r6, #1
 800e832:	b007      	add	sp, #28
 800e834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e838:	4b05      	ldr	r3, [pc, #20]	; (800e850 <generate_service_types+0xc0>)
 800e83a:	f8df 9010 	ldr.w	r9, [pc, #16]	; 800e84c <generate_service_types+0xbc>
 800e83e:	4619      	mov	r1, r3
 800e840:	e7bd      	b.n	800e7be <generate_service_types+0x2e>
 800e842:	4b03      	ldr	r3, [pc, #12]	; (800e850 <generate_service_types+0xc0>)
 800e844:	461a      	mov	r2, r3
 800e846:	e7db      	b.n	800e800 <generate_service_types+0x70>
 800e848:	0801e5a0 	.word	0x0801e5a0
 800e84c:	0801e59c 	.word	0x0801e59c
 800e850:	0801ee28 	.word	0x0801ee28
 800e854:	0801e5b0 	.word	0x0801e5b0
 800e858:	0801e5b4 	.word	0x0801e5b4

0800e85c <generate_type_name>:
 800e85c:	2300      	movs	r3, #0
 800e85e:	b530      	push	{r4, r5, lr}
 800e860:	700b      	strb	r3, [r1, #0]
 800e862:	b087      	sub	sp, #28
 800e864:	6803      	ldr	r3, [r0, #0]
 800e866:	4614      	mov	r4, r2
 800e868:	b1bb      	cbz	r3, 800e89a <generate_type_name+0x3e>
 800e86a:	4a0e      	ldr	r2, [pc, #56]	; (800e8a4 <generate_type_name+0x48>)
 800e86c:	4615      	mov	r5, r2
 800e86e:	9500      	str	r5, [sp, #0]
 800e870:	9203      	str	r2, [sp, #12]
 800e872:	4d0d      	ldr	r5, [pc, #52]	; (800e8a8 <generate_type_name+0x4c>)
 800e874:	6842      	ldr	r2, [r0, #4]
 800e876:	4608      	mov	r0, r1
 800e878:	490c      	ldr	r1, [pc, #48]	; (800e8ac <generate_type_name+0x50>)
 800e87a:	9204      	str	r2, [sp, #16]
 800e87c:	9105      	str	r1, [sp, #20]
 800e87e:	9102      	str	r1, [sp, #8]
 800e880:	4621      	mov	r1, r4
 800e882:	4a0b      	ldr	r2, [pc, #44]	; (800e8b0 <generate_type_name+0x54>)
 800e884:	9501      	str	r5, [sp, #4]
 800e886:	f00d fe7b 	bl	801c580 <sniprintf>
 800e88a:	2800      	cmp	r0, #0
 800e88c:	bfa8      	it	ge
 800e88e:	4284      	cmpge	r4, r0
 800e890:	bfcc      	ite	gt
 800e892:	2001      	movgt	r0, #1
 800e894:	2000      	movle	r0, #0
 800e896:	b007      	add	sp, #28
 800e898:	bd30      	pop	{r4, r5, pc}
 800e89a:	4b06      	ldr	r3, [pc, #24]	; (800e8b4 <generate_type_name+0x58>)
 800e89c:	4a01      	ldr	r2, [pc, #4]	; (800e8a4 <generate_type_name+0x48>)
 800e89e:	461d      	mov	r5, r3
 800e8a0:	e7e5      	b.n	800e86e <generate_type_name+0x12>
 800e8a2:	bf00      	nop
 800e8a4:	0801e59c 	.word	0x0801e59c
 800e8a8:	0801e5b4 	.word	0x0801e5b4
 800e8ac:	0801e5b0 	.word	0x0801e5b0
 800e8b0:	0801e5a0 	.word	0x0801e5a0
 800e8b4:	0801ee28 	.word	0x0801ee28

0800e8b8 <generate_topic_name>:
 800e8b8:	b530      	push	{r4, r5, lr}
 800e8ba:	4614      	mov	r4, r2
 800e8bc:	b083      	sub	sp, #12
 800e8be:	4605      	mov	r5, r0
 800e8c0:	4b07      	ldr	r3, [pc, #28]	; (800e8e0 <generate_topic_name+0x28>)
 800e8c2:	4a08      	ldr	r2, [pc, #32]	; (800e8e4 <generate_topic_name+0x2c>)
 800e8c4:	4608      	mov	r0, r1
 800e8c6:	9500      	str	r5, [sp, #0]
 800e8c8:	4621      	mov	r1, r4
 800e8ca:	f00d fe59 	bl	801c580 <sniprintf>
 800e8ce:	2800      	cmp	r0, #0
 800e8d0:	bfa8      	it	ge
 800e8d2:	4284      	cmpge	r4, r0
 800e8d4:	bfcc      	ite	gt
 800e8d6:	2001      	movgt	r0, #1
 800e8d8:	2000      	movle	r0, #0
 800e8da:	b003      	add	sp, #12
 800e8dc:	bd30      	pop	{r4, r5, pc}
 800e8de:	bf00      	nop
 800e8e0:	0801e5d8 	.word	0x0801e5d8
 800e8e4:	0801e5b8 	.word	0x0801e5b8

0800e8e8 <is_uxrce_rmw_identifier_valid>:
 800e8e8:	b510      	push	{r4, lr}
 800e8ea:	4604      	mov	r4, r0
 800e8ec:	b140      	cbz	r0, 800e900 <is_uxrce_rmw_identifier_valid+0x18>
 800e8ee:	f009 fd8f 	bl	8018410 <rmw_get_implementation_identifier>
 800e8f2:	4601      	mov	r1, r0
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	f7f1 fca3 	bl	8000240 <strcmp>
 800e8fa:	fab0 f080 	clz	r0, r0
 800e8fe:	0940      	lsrs	r0, r0, #5
 800e900:	bd10      	pop	{r4, pc}
 800e902:	bf00      	nop

0800e904 <get_message_typesupport_handle>:
 800e904:	6883      	ldr	r3, [r0, #8]
 800e906:	4718      	bx	r3

0800e908 <get_message_typesupport_handle_function>:
 800e908:	b510      	push	{r4, lr}
 800e90a:	4604      	mov	r4, r0
 800e90c:	6800      	ldr	r0, [r0, #0]
 800e90e:	f7f1 fc97 	bl	8000240 <strcmp>
 800e912:	2800      	cmp	r0, #0
 800e914:	bf0c      	ite	eq
 800e916:	4620      	moveq	r0, r4
 800e918:	2000      	movne	r0, #0
 800e91a:	bd10      	pop	{r4, pc}

0800e91c <get_service_typesupport_handle>:
 800e91c:	6883      	ldr	r3, [r0, #8]
 800e91e:	4718      	bx	r3

0800e920 <get_service_typesupport_handle_function>:
 800e920:	b510      	push	{r4, lr}
 800e922:	4604      	mov	r4, r0
 800e924:	6800      	ldr	r0, [r0, #0]
 800e926:	f7f1 fc8b 	bl	8000240 <strcmp>
 800e92a:	2800      	cmp	r0, #0
 800e92c:	bf0c      	ite	eq
 800e92e:	4620      	moveq	r0, r4
 800e930:	2000      	movne	r0, #0
 800e932:	bd10      	pop	{r4, pc}

0800e934 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800e934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e938:	6805      	ldr	r5, [r0, #0]
 800e93a:	4604      	mov	r4, r0
 800e93c:	460e      	mov	r6, r1
 800e93e:	4628      	mov	r0, r5
 800e940:	f7f1 fc7e 	bl	8000240 <strcmp>
 800e944:	b1c8      	cbz	r0, 800e97a <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800e946:	4b11      	ldr	r3, [pc, #68]	; (800e98c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	429d      	cmp	r5, r3
 800e94c:	d112      	bne.n	800e974 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e94e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e952:	f8d8 4000 	ldr.w	r4, [r8]
 800e956:	b16c      	cbz	r4, 800e974 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e958:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e95c:	2700      	movs	r7, #0
 800e95e:	3d04      	subs	r5, #4
 800e960:	4631      	mov	r1, r6
 800e962:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800e966:	f7f1 fc6b 	bl	8000240 <strcmp>
 800e96a:	00bb      	lsls	r3, r7, #2
 800e96c:	b140      	cbz	r0, 800e980 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800e96e:	3701      	adds	r7, #1
 800e970:	42bc      	cmp	r4, r7
 800e972:	d1f5      	bne.n	800e960 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800e974:	2000      	movs	r0, #0
 800e976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e97a:	4620      	mov	r0, r4
 800e97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e980:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e984:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e988:	58d3      	ldr	r3, [r2, r3]
 800e98a:	4718      	bx	r3
 800e98c:	20000a10 	.word	0x20000a10

0800e990 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 800e990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e994:	6805      	ldr	r5, [r0, #0]
 800e996:	4604      	mov	r4, r0
 800e998:	460e      	mov	r6, r1
 800e99a:	4628      	mov	r0, r5
 800e99c:	f7f1 fc50 	bl	8000240 <strcmp>
 800e9a0:	b1c8      	cbz	r0, 800e9d6 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 800e9a2:	4b11      	ldr	r3, [pc, #68]	; (800e9e8 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	429d      	cmp	r5, r3
 800e9a8:	d112      	bne.n	800e9d0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800e9aa:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e9ae:	f8d8 4000 	ldr.w	r4, [r8]
 800e9b2:	b16c      	cbz	r4, 800e9d0 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 800e9b4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e9b8:	2700      	movs	r7, #0
 800e9ba:	3d04      	subs	r5, #4
 800e9bc:	4631      	mov	r1, r6
 800e9be:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800e9c2:	f7f1 fc3d 	bl	8000240 <strcmp>
 800e9c6:	00bb      	lsls	r3, r7, #2
 800e9c8:	b140      	cbz	r0, 800e9dc <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 800e9ca:	3701      	adds	r7, #1
 800e9cc:	42bc      	cmp	r4, r7
 800e9ce:	d1f5      	bne.n	800e9bc <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 800e9d0:	2000      	movs	r0, #0
 800e9d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e9e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9e4:	58d3      	ldr	r3, [r2, r3]
 800e9e6:	4718      	bx	r3
 800e9e8:	20000a10 	.word	0x20000a10

0800e9ec <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__size_function__ServiceEventInfo__client_gid>:
 800e9ec:	2010      	movs	r0, #16
 800e9ee:	4770      	bx	lr

0800e9f0 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_const_function__ServiceEventInfo__client_gid>:
 800e9f0:	4408      	add	r0, r1
 800e9f2:	4770      	bx	lr

0800e9f4 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__fetch_function__ServiceEventInfo__client_gid>:
 800e9f4:	5c43      	ldrb	r3, [r0, r1]
 800e9f6:	7013      	strb	r3, [r2, #0]
 800e9f8:	4770      	bx	lr
 800e9fa:	bf00      	nop

0800e9fc <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__assign_function__ServiceEventInfo__client_gid>:
 800e9fc:	7813      	ldrb	r3, [r2, #0]
 800e9fe:	5443      	strb	r3, [r0, r1]
 800ea00:	4770      	bx	lr
 800ea02:	bf00      	nop

0800ea04 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_init_function>:
 800ea04:	f00a bf10 	b.w	8019828 <service_msgs__msg__ServiceEventInfo__init>

0800ea08 <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__ServiceEventInfo_fini_function>:
 800ea08:	f00a bf20 	b.w	801984c <service_msgs__msg__ServiceEventInfo__fini>

0800ea0c <service_msgs__msg__ServiceEventInfo__rosidl_typesupport_introspection_c__get_function__ServiceEventInfo__client_gid>:
 800ea0c:	4408      	add	r0, r1
 800ea0e:	4770      	bx	lr

0800ea10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800ea10:	b508      	push	{r3, lr}
 800ea12:	f000 f8db 	bl	800ebcc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ea16:	4b06      	ldr	r3, [pc, #24]	; (800ea30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800ea18:	4906      	ldr	r1, [pc, #24]	; (800ea34 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x24>)
 800ea1a:	681a      	ldr	r2, [r3, #0]
 800ea1c:	6488      	str	r0, [r1, #72]	; 0x48
 800ea1e:	b10a      	cbz	r2, 800ea24 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x14>
 800ea20:	4803      	ldr	r0, [pc, #12]	; (800ea30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800ea22:	bd08      	pop	{r3, pc}
 800ea24:	4a04      	ldr	r2, [pc, #16]	; (800ea38 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x28>)
 800ea26:	4802      	ldr	r0, [pc, #8]	; (800ea30 <rosidl_typesupport_introspection_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x20>)
 800ea28:	6812      	ldr	r2, [r2, #0]
 800ea2a:	601a      	str	r2, [r3, #0]
 800ea2c:	bd08      	pop	{r3, pc}
 800ea2e:	bf00      	nop
 800ea30:	20000b08 	.word	0x20000b08
 800ea34:	20000a18 	.word	0x20000a18
 800ea38:	20000a14 	.word	0x20000a14

0800ea3c <get_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800ea3c:	b5b0      	push	{r4, r5, r7, lr}
 800ea3e:	4604      	mov	r4, r0
 800ea40:	b1d8      	cbz	r0, 800ea7a <get_serialized_size_service_msgs__msg__ServiceEventInfo+0x3e>
 800ea42:	460d      	mov	r5, r1
 800ea44:	2101      	movs	r1, #1
 800ea46:	4628      	mov	r0, r5
 800ea48:	f001 fea4 	bl	8010794 <ucdr_alignment>
 800ea4c:	1c6b      	adds	r3, r5, #1
 800ea4e:	4607      	mov	r7, r0
 800ea50:	1d20      	adds	r0, r4, #4
 800ea52:	f1c5 0508 	rsb	r5, r5, #8
 800ea56:	441f      	add	r7, r3
 800ea58:	4639      	mov	r1, r7
 800ea5a:	f000 f8c5 	bl	800ebe8 <get_serialized_size_builtin_interfaces__msg__Time>
 800ea5e:	4407      	add	r7, r0
 800ea60:	2101      	movs	r1, #1
 800ea62:	4638      	mov	r0, r7
 800ea64:	f001 fe96 	bl	8010794 <ucdr_alignment>
 800ea68:	f100 0410 	add.w	r4, r0, #16
 800ea6c:	2108      	movs	r1, #8
 800ea6e:	443c      	add	r4, r7
 800ea70:	4620      	mov	r0, r4
 800ea72:	f001 fe8f 	bl	8010794 <ucdr_alignment>
 800ea76:	4428      	add	r0, r5
 800ea78:	4420      	add	r0, r4
 800ea7a:	bdb0      	pop	{r4, r5, r7, pc}

0800ea7c <_ServiceEventInfo__cdr_deserialize>:
 800ea7c:	b538      	push	{r3, r4, r5, lr}
 800ea7e:	460c      	mov	r4, r1
 800ea80:	b1b9      	cbz	r1, 800eab2 <_ServiceEventInfo__cdr_deserialize+0x36>
 800ea82:	4605      	mov	r5, r0
 800ea84:	f000 fb38 	bl	800f0f8 <ucdr_deserialize_uint8_t>
 800ea88:	f000 f912 	bl	800ecb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	1d21      	adds	r1, r4, #4
 800ea90:	4628      	mov	r0, r5
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	68db      	ldr	r3, [r3, #12]
 800ea96:	4798      	blx	r3
 800ea98:	f104 010c 	add.w	r1, r4, #12
 800ea9c:	4628      	mov	r0, r5
 800ea9e:	2210      	movs	r2, #16
 800eaa0:	f000 f9d4 	bl	800ee4c <ucdr_deserialize_array_uint8_t>
 800eaa4:	f104 0120 	add.w	r1, r4, #32
 800eaa8:	4628      	mov	r0, r5
 800eaaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eaae:	f001 bc2b 	b.w	8010308 <ucdr_deserialize_int64_t>
 800eab2:	4608      	mov	r0, r1
 800eab4:	bd38      	pop	{r3, r4, r5, pc}
 800eab6:	bf00      	nop

0800eab8 <_ServiceEventInfo__cdr_serialize>:
 800eab8:	b1e8      	cbz	r0, 800eaf6 <_ServiceEventInfo__cdr_serialize+0x3e>
 800eaba:	b570      	push	{r4, r5, r6, lr}
 800eabc:	4606      	mov	r6, r0
 800eabe:	460d      	mov	r5, r1
 800eac0:	4604      	mov	r4, r0
 800eac2:	4608      	mov	r0, r1
 800eac4:	f816 1b04 	ldrb.w	r1, [r6], #4
 800eac8:	f000 fb00 	bl	800f0cc <ucdr_serialize_uint8_t>
 800eacc:	f000 f8f0 	bl	800ecb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>
 800ead0:	4603      	mov	r3, r0
 800ead2:	4629      	mov	r1, r5
 800ead4:	4630      	mov	r0, r6
 800ead6:	685b      	ldr	r3, [r3, #4]
 800ead8:	689b      	ldr	r3, [r3, #8]
 800eada:	4798      	blx	r3
 800eadc:	2210      	movs	r2, #16
 800eade:	f104 010c 	add.w	r1, r4, #12
 800eae2:	4628      	mov	r0, r5
 800eae4:	f000 f94e 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 800eae8:	4628      	mov	r0, r5
 800eaea:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
 800eaee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eaf2:	f001 bb39 	b.w	8010168 <ucdr_serialize_int64_t>
 800eaf6:	4770      	bx	lr

0800eaf8 <_ServiceEventInfo__get_serialized_size>:
 800eaf8:	b538      	push	{r3, r4, r5, lr}
 800eafa:	4604      	mov	r4, r0
 800eafc:	b1b0      	cbz	r0, 800eb2c <_ServiceEventInfo__get_serialized_size+0x34>
 800eafe:	2101      	movs	r1, #1
 800eb00:	2000      	movs	r0, #0
 800eb02:	f001 fe47 	bl	8010794 <ucdr_alignment>
 800eb06:	4605      	mov	r5, r0
 800eb08:	1d20      	adds	r0, r4, #4
 800eb0a:	3501      	adds	r5, #1
 800eb0c:	4629      	mov	r1, r5
 800eb0e:	f000 f86b 	bl	800ebe8 <get_serialized_size_builtin_interfaces__msg__Time>
 800eb12:	4405      	add	r5, r0
 800eb14:	2101      	movs	r1, #1
 800eb16:	4628      	mov	r0, r5
 800eb18:	f001 fe3c 	bl	8010794 <ucdr_alignment>
 800eb1c:	3010      	adds	r0, #16
 800eb1e:	2108      	movs	r1, #8
 800eb20:	4405      	add	r5, r0
 800eb22:	4628      	mov	r0, r5
 800eb24:	f001 fe36 	bl	8010794 <ucdr_alignment>
 800eb28:	3008      	adds	r0, #8
 800eb2a:	4428      	add	r0, r5
 800eb2c:	bd38      	pop	{r3, r4, r5, pc}
 800eb2e:	bf00      	nop

0800eb30 <_ServiceEventInfo__max_serialized_size>:
 800eb30:	b550      	push	{r4, r6, lr}
 800eb32:	2601      	movs	r6, #1
 800eb34:	b083      	sub	sp, #12
 800eb36:	2000      	movs	r0, #0
 800eb38:	4631      	mov	r1, r6
 800eb3a:	f88d 6007 	strb.w	r6, [sp, #7]
 800eb3e:	f001 fe29 	bl	8010794 <ucdr_alignment>
 800eb42:	4604      	mov	r4, r0
 800eb44:	f10d 0007 	add.w	r0, sp, #7
 800eb48:	4434      	add	r4, r6
 800eb4a:	4621      	mov	r1, r4
 800eb4c:	f000 f89c 	bl	800ec88 <max_serialized_size_builtin_interfaces__msg__Time>
 800eb50:	4404      	add	r4, r0
 800eb52:	4631      	mov	r1, r6
 800eb54:	4620      	mov	r0, r4
 800eb56:	f001 fe1d 	bl	8010794 <ucdr_alignment>
 800eb5a:	3010      	adds	r0, #16
 800eb5c:	2108      	movs	r1, #8
 800eb5e:	4404      	add	r4, r0
 800eb60:	4620      	mov	r0, r4
 800eb62:	f001 fe17 	bl	8010794 <ucdr_alignment>
 800eb66:	3008      	adds	r0, #8
 800eb68:	4420      	add	r0, r4
 800eb6a:	b003      	add	sp, #12
 800eb6c:	bd50      	pop	{r4, r6, pc}
 800eb6e:	bf00      	nop

0800eb70 <max_serialized_size_service_msgs__msg__ServiceEventInfo>:
 800eb70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb74:	f04f 0801 	mov.w	r8, #1
 800eb78:	460c      	mov	r4, r1
 800eb7a:	4607      	mov	r7, r0
 800eb7c:	4641      	mov	r1, r8
 800eb7e:	4620      	mov	r0, r4
 800eb80:	f887 8000 	strb.w	r8, [r7]
 800eb84:	eb04 0608 	add.w	r6, r4, r8
 800eb88:	f001 fe04 	bl	8010794 <ucdr_alignment>
 800eb8c:	4605      	mov	r5, r0
 800eb8e:	4638      	mov	r0, r7
 800eb90:	f1c4 0408 	rsb	r4, r4, #8
 800eb94:	4435      	add	r5, r6
 800eb96:	4629      	mov	r1, r5
 800eb98:	f000 f876 	bl	800ec88 <max_serialized_size_builtin_interfaces__msg__Time>
 800eb9c:	4405      	add	r5, r0
 800eb9e:	4641      	mov	r1, r8
 800eba0:	4628      	mov	r0, r5
 800eba2:	f001 fdf7 	bl	8010794 <ucdr_alignment>
 800eba6:	3010      	adds	r0, #16
 800eba8:	2108      	movs	r1, #8
 800ebaa:	4405      	add	r5, r0
 800ebac:	4628      	mov	r0, r5
 800ebae:	f001 fdf1 	bl	8010794 <ucdr_alignment>
 800ebb2:	4420      	add	r0, r4
 800ebb4:	4428      	add	r0, r5
 800ebb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebba:	bf00      	nop

0800ebbc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo>:
 800ebbc:	4800      	ldr	r0, [pc, #0]	; (800ebc0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__service_msgs__msg__ServiceEventInfo+0x4>)
 800ebbe:	4770      	bx	lr
 800ebc0:	20000b20 	.word	0x20000b20

0800ebc4 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_init_function>:
 800ebc4:	f00a be78 	b.w	80198b8 <builtin_interfaces__msg__Time__init>

0800ebc8 <builtin_interfaces__msg__Time__rosidl_typesupport_introspection_c__Time_fini_function>:
 800ebc8:	f00a be7a 	b.w	80198c0 <builtin_interfaces__msg__Time__fini>

0800ebcc <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800ebcc:	4b04      	ldr	r3, [pc, #16]	; (800ebe0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800ebce:	681a      	ldr	r2, [r3, #0]
 800ebd0:	b10a      	cbz	r2, 800ebd6 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0xa>
 800ebd2:	4803      	ldr	r0, [pc, #12]	; (800ebe0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800ebd4:	4770      	bx	lr
 800ebd6:	4a03      	ldr	r2, [pc, #12]	; (800ebe4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x18>)
 800ebd8:	4801      	ldr	r0, [pc, #4]	; (800ebe0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x14>)
 800ebda:	6812      	ldr	r2, [r2, #0]
 800ebdc:	601a      	str	r2, [r3, #0]
 800ebde:	4770      	bx	lr
 800ebe0:	20000bcc 	.word	0x20000bcc
 800ebe4:	20000a14 	.word	0x20000a14

0800ebe8 <get_serialized_size_builtin_interfaces__msg__Time>:
 800ebe8:	b180      	cbz	r0, 800ec0c <get_serialized_size_builtin_interfaces__msg__Time+0x24>
 800ebea:	b538      	push	{r3, r4, r5, lr}
 800ebec:	460d      	mov	r5, r1
 800ebee:	2104      	movs	r1, #4
 800ebf0:	4628      	mov	r0, r5
 800ebf2:	f001 fdcf 	bl	8010794 <ucdr_alignment>
 800ebf6:	1d2b      	adds	r3, r5, #4
 800ebf8:	f1c5 0504 	rsb	r5, r5, #4
 800ebfc:	2104      	movs	r1, #4
 800ebfe:	181c      	adds	r4, r3, r0
 800ec00:	4620      	mov	r0, r4
 800ec02:	f001 fdc7 	bl	8010794 <ucdr_alignment>
 800ec06:	4428      	add	r0, r5
 800ec08:	4420      	add	r0, r4
 800ec0a:	bd38      	pop	{r3, r4, r5, pc}
 800ec0c:	4770      	bx	lr
 800ec0e:	bf00      	nop

0800ec10 <_Time__cdr_deserialize>:
 800ec10:	b538      	push	{r3, r4, r5, lr}
 800ec12:	460c      	mov	r4, r1
 800ec14:	b141      	cbz	r1, 800ec28 <_Time__cdr_deserialize+0x18>
 800ec16:	4605      	mov	r5, r0
 800ec18:	f001 fa16 	bl	8010048 <ucdr_deserialize_int32_t>
 800ec1c:	1d21      	adds	r1, r4, #4
 800ec1e:	4628      	mov	r0, r5
 800ec20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec24:	f000 bd98 	b.w	800f758 <ucdr_deserialize_uint32_t>
 800ec28:	4608      	mov	r0, r1
 800ec2a:	bd38      	pop	{r3, r4, r5, pc}

0800ec2c <_Time__cdr_serialize>:
 800ec2c:	b160      	cbz	r0, 800ec48 <_Time__cdr_serialize+0x1c>
 800ec2e:	b538      	push	{r3, r4, r5, lr}
 800ec30:	460d      	mov	r5, r1
 800ec32:	4604      	mov	r4, r0
 800ec34:	6801      	ldr	r1, [r0, #0]
 800ec36:	4628      	mov	r0, r5
 800ec38:	f001 f96e 	bl	800ff18 <ucdr_serialize_int32_t>
 800ec3c:	6861      	ldr	r1, [r4, #4]
 800ec3e:	4628      	mov	r0, r5
 800ec40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec44:	f000 bc58 	b.w	800f4f8 <ucdr_serialize_uint32_t>
 800ec48:	4770      	bx	lr
 800ec4a:	bf00      	nop

0800ec4c <_Time__get_serialized_size>:
 800ec4c:	b160      	cbz	r0, 800ec68 <_Time__get_serialized_size+0x1c>
 800ec4e:	2104      	movs	r1, #4
 800ec50:	2000      	movs	r0, #0
 800ec52:	b510      	push	{r4, lr}
 800ec54:	f001 fd9e 	bl	8010794 <ucdr_alignment>
 800ec58:	2104      	movs	r1, #4
 800ec5a:	1844      	adds	r4, r0, r1
 800ec5c:	4620      	mov	r0, r4
 800ec5e:	f001 fd99 	bl	8010794 <ucdr_alignment>
 800ec62:	3004      	adds	r0, #4
 800ec64:	4420      	add	r0, r4
 800ec66:	bd10      	pop	{r4, pc}
 800ec68:	4770      	bx	lr
 800ec6a:	bf00      	nop

0800ec6c <_Time__max_serialized_size>:
 800ec6c:	b510      	push	{r4, lr}
 800ec6e:	2104      	movs	r1, #4
 800ec70:	2000      	movs	r0, #0
 800ec72:	f001 fd8f 	bl	8010794 <ucdr_alignment>
 800ec76:	2104      	movs	r1, #4
 800ec78:	1844      	adds	r4, r0, r1
 800ec7a:	4620      	mov	r0, r4
 800ec7c:	f001 fd8a 	bl	8010794 <ucdr_alignment>
 800ec80:	3004      	adds	r0, #4
 800ec82:	4420      	add	r0, r4
 800ec84:	bd10      	pop	{r4, pc}
 800ec86:	bf00      	nop

0800ec88 <max_serialized_size_builtin_interfaces__msg__Time>:
 800ec88:	b538      	push	{r3, r4, r5, lr}
 800ec8a:	460c      	mov	r4, r1
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	2104      	movs	r1, #4
 800ec90:	1d25      	adds	r5, r4, #4
 800ec92:	7003      	strb	r3, [r0, #0]
 800ec94:	4620      	mov	r0, r4
 800ec96:	f1c4 0404 	rsb	r4, r4, #4
 800ec9a:	f001 fd7b 	bl	8010794 <ucdr_alignment>
 800ec9e:	4405      	add	r5, r0
 800eca0:	2104      	movs	r1, #4
 800eca2:	4628      	mov	r0, r5
 800eca4:	f001 fd76 	bl	8010794 <ucdr_alignment>
 800eca8:	4420      	add	r0, r4
 800ecaa:	4428      	add	r0, r5
 800ecac:	bd38      	pop	{r3, r4, r5, pc}
 800ecae:	bf00      	nop

0800ecb0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time>:
 800ecb0:	4800      	ldr	r0, [pc, #0]	; (800ecb4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__builtin_interfaces__msg__Time+0x4>)
 800ecb2:	4770      	bx	lr
 800ecb4:	20000be4 	.word	0x20000be4

0800ecb8 <ucdr_serialize_endian_array_char>:
 800ecb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecbc:	4619      	mov	r1, r3
 800ecbe:	461f      	mov	r7, r3
 800ecc0:	4605      	mov	r5, r0
 800ecc2:	4690      	mov	r8, r2
 800ecc4:	f001 fd0e 	bl	80106e4 <ucdr_check_buffer_available_for>
 800ecc8:	b9e0      	cbnz	r0, 800ed04 <ucdr_serialize_endian_array_char+0x4c>
 800ecca:	463e      	mov	r6, r7
 800eccc:	e00b      	b.n	800ece6 <ucdr_serialize_endian_array_char+0x2e>
 800ecce:	4441      	add	r1, r8
 800ecd0:	68a8      	ldr	r0, [r5, #8]
 800ecd2:	4622      	mov	r2, r4
 800ecd4:	1b36      	subs	r6, r6, r4
 800ecd6:	f00d fe5e 	bl	801c996 <memcpy>
 800ecda:	68ab      	ldr	r3, [r5, #8]
 800ecdc:	6928      	ldr	r0, [r5, #16]
 800ecde:	4423      	add	r3, r4
 800ece0:	4420      	add	r0, r4
 800ece2:	60ab      	str	r3, [r5, #8]
 800ece4:	6128      	str	r0, [r5, #16]
 800ece6:	4631      	mov	r1, r6
 800ece8:	2201      	movs	r2, #1
 800ecea:	4628      	mov	r0, r5
 800ecec:	f001 fd84 	bl	80107f8 <ucdr_check_final_buffer_behavior_array>
 800ecf0:	1bb9      	subs	r1, r7, r6
 800ecf2:	4604      	mov	r4, r0
 800ecf4:	2800      	cmp	r0, #0
 800ecf6:	d1ea      	bne.n	800ecce <ucdr_serialize_endian_array_char+0x16>
 800ecf8:	2301      	movs	r3, #1
 800ecfa:	7da8      	ldrb	r0, [r5, #22]
 800ecfc:	756b      	strb	r3, [r5, #21]
 800ecfe:	4058      	eors	r0, r3
 800ed00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed04:	463a      	mov	r2, r7
 800ed06:	4641      	mov	r1, r8
 800ed08:	68a8      	ldr	r0, [r5, #8]
 800ed0a:	f00d fe44 	bl	801c996 <memcpy>
 800ed0e:	68aa      	ldr	r2, [r5, #8]
 800ed10:	692b      	ldr	r3, [r5, #16]
 800ed12:	443a      	add	r2, r7
 800ed14:	443b      	add	r3, r7
 800ed16:	60aa      	str	r2, [r5, #8]
 800ed18:	612b      	str	r3, [r5, #16]
 800ed1a:	e7ed      	b.n	800ecf8 <ucdr_serialize_endian_array_char+0x40>

0800ed1c <ucdr_deserialize_endian_array_char>:
 800ed1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed20:	4619      	mov	r1, r3
 800ed22:	461f      	mov	r7, r3
 800ed24:	4605      	mov	r5, r0
 800ed26:	4690      	mov	r8, r2
 800ed28:	f001 fcdc 	bl	80106e4 <ucdr_check_buffer_available_for>
 800ed2c:	b9e8      	cbnz	r0, 800ed6a <ucdr_deserialize_endian_array_char+0x4e>
 800ed2e:	463e      	mov	r6, r7
 800ed30:	e00c      	b.n	800ed4c <ucdr_deserialize_endian_array_char+0x30>
 800ed32:	eb08 0003 	add.w	r0, r8, r3
 800ed36:	68a9      	ldr	r1, [r5, #8]
 800ed38:	4622      	mov	r2, r4
 800ed3a:	1b36      	subs	r6, r6, r4
 800ed3c:	f00d fe2b 	bl	801c996 <memcpy>
 800ed40:	68ab      	ldr	r3, [r5, #8]
 800ed42:	6928      	ldr	r0, [r5, #16]
 800ed44:	4423      	add	r3, r4
 800ed46:	4420      	add	r0, r4
 800ed48:	60ab      	str	r3, [r5, #8]
 800ed4a:	6128      	str	r0, [r5, #16]
 800ed4c:	4631      	mov	r1, r6
 800ed4e:	2201      	movs	r2, #1
 800ed50:	4628      	mov	r0, r5
 800ed52:	f001 fd51 	bl	80107f8 <ucdr_check_final_buffer_behavior_array>
 800ed56:	1bbb      	subs	r3, r7, r6
 800ed58:	4604      	mov	r4, r0
 800ed5a:	2800      	cmp	r0, #0
 800ed5c:	d1e9      	bne.n	800ed32 <ucdr_deserialize_endian_array_char+0x16>
 800ed5e:	2301      	movs	r3, #1
 800ed60:	7da8      	ldrb	r0, [r5, #22]
 800ed62:	756b      	strb	r3, [r5, #21]
 800ed64:	4058      	eors	r0, r3
 800ed66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed6a:	463a      	mov	r2, r7
 800ed6c:	68a9      	ldr	r1, [r5, #8]
 800ed6e:	4640      	mov	r0, r8
 800ed70:	f00d fe11 	bl	801c996 <memcpy>
 800ed74:	68aa      	ldr	r2, [r5, #8]
 800ed76:	692b      	ldr	r3, [r5, #16]
 800ed78:	443a      	add	r2, r7
 800ed7a:	443b      	add	r3, r7
 800ed7c:	60aa      	str	r2, [r5, #8]
 800ed7e:	612b      	str	r3, [r5, #16]
 800ed80:	e7ed      	b.n	800ed5e <ucdr_deserialize_endian_array_char+0x42>
 800ed82:	bf00      	nop

0800ed84 <ucdr_serialize_array_uint8_t>:
 800ed84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed88:	4688      	mov	r8, r1
 800ed8a:	4611      	mov	r1, r2
 800ed8c:	4617      	mov	r7, r2
 800ed8e:	4605      	mov	r5, r0
 800ed90:	f001 fca8 	bl	80106e4 <ucdr_check_buffer_available_for>
 800ed94:	b9e0      	cbnz	r0, 800edd0 <ucdr_serialize_array_uint8_t+0x4c>
 800ed96:	463e      	mov	r6, r7
 800ed98:	e00b      	b.n	800edb2 <ucdr_serialize_array_uint8_t+0x2e>
 800ed9a:	4441      	add	r1, r8
 800ed9c:	68a8      	ldr	r0, [r5, #8]
 800ed9e:	4622      	mov	r2, r4
 800eda0:	1b36      	subs	r6, r6, r4
 800eda2:	f00d fdf8 	bl	801c996 <memcpy>
 800eda6:	68ab      	ldr	r3, [r5, #8]
 800eda8:	6928      	ldr	r0, [r5, #16]
 800edaa:	4423      	add	r3, r4
 800edac:	4420      	add	r0, r4
 800edae:	60ab      	str	r3, [r5, #8]
 800edb0:	6128      	str	r0, [r5, #16]
 800edb2:	4631      	mov	r1, r6
 800edb4:	2201      	movs	r2, #1
 800edb6:	4628      	mov	r0, r5
 800edb8:	f001 fd1e 	bl	80107f8 <ucdr_check_final_buffer_behavior_array>
 800edbc:	1bb9      	subs	r1, r7, r6
 800edbe:	4604      	mov	r4, r0
 800edc0:	2800      	cmp	r0, #0
 800edc2:	d1ea      	bne.n	800ed9a <ucdr_serialize_array_uint8_t+0x16>
 800edc4:	2301      	movs	r3, #1
 800edc6:	7da8      	ldrb	r0, [r5, #22]
 800edc8:	756b      	strb	r3, [r5, #21]
 800edca:	4058      	eors	r0, r3
 800edcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edd0:	463a      	mov	r2, r7
 800edd2:	4641      	mov	r1, r8
 800edd4:	68a8      	ldr	r0, [r5, #8]
 800edd6:	f00d fdde 	bl	801c996 <memcpy>
 800edda:	68aa      	ldr	r2, [r5, #8]
 800eddc:	692b      	ldr	r3, [r5, #16]
 800edde:	443a      	add	r2, r7
 800ede0:	443b      	add	r3, r7
 800ede2:	60aa      	str	r2, [r5, #8]
 800ede4:	612b      	str	r3, [r5, #16]
 800ede6:	e7ed      	b.n	800edc4 <ucdr_serialize_array_uint8_t+0x40>

0800ede8 <ucdr_serialize_endian_array_uint8_t>:
 800ede8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edec:	4619      	mov	r1, r3
 800edee:	461f      	mov	r7, r3
 800edf0:	4605      	mov	r5, r0
 800edf2:	4690      	mov	r8, r2
 800edf4:	f001 fc76 	bl	80106e4 <ucdr_check_buffer_available_for>
 800edf8:	b9e0      	cbnz	r0, 800ee34 <ucdr_serialize_endian_array_uint8_t+0x4c>
 800edfa:	463e      	mov	r6, r7
 800edfc:	e00b      	b.n	800ee16 <ucdr_serialize_endian_array_uint8_t+0x2e>
 800edfe:	4441      	add	r1, r8
 800ee00:	68a8      	ldr	r0, [r5, #8]
 800ee02:	4622      	mov	r2, r4
 800ee04:	1b36      	subs	r6, r6, r4
 800ee06:	f00d fdc6 	bl	801c996 <memcpy>
 800ee0a:	68ab      	ldr	r3, [r5, #8]
 800ee0c:	6928      	ldr	r0, [r5, #16]
 800ee0e:	4423      	add	r3, r4
 800ee10:	4420      	add	r0, r4
 800ee12:	60ab      	str	r3, [r5, #8]
 800ee14:	6128      	str	r0, [r5, #16]
 800ee16:	4631      	mov	r1, r6
 800ee18:	2201      	movs	r2, #1
 800ee1a:	4628      	mov	r0, r5
 800ee1c:	f001 fcec 	bl	80107f8 <ucdr_check_final_buffer_behavior_array>
 800ee20:	1bb9      	subs	r1, r7, r6
 800ee22:	4604      	mov	r4, r0
 800ee24:	2800      	cmp	r0, #0
 800ee26:	d1ea      	bne.n	800edfe <ucdr_serialize_endian_array_uint8_t+0x16>
 800ee28:	2301      	movs	r3, #1
 800ee2a:	7da8      	ldrb	r0, [r5, #22]
 800ee2c:	756b      	strb	r3, [r5, #21]
 800ee2e:	4058      	eors	r0, r3
 800ee30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee34:	463a      	mov	r2, r7
 800ee36:	4641      	mov	r1, r8
 800ee38:	68a8      	ldr	r0, [r5, #8]
 800ee3a:	f00d fdac 	bl	801c996 <memcpy>
 800ee3e:	68aa      	ldr	r2, [r5, #8]
 800ee40:	692b      	ldr	r3, [r5, #16]
 800ee42:	443a      	add	r2, r7
 800ee44:	443b      	add	r3, r7
 800ee46:	60aa      	str	r2, [r5, #8]
 800ee48:	612b      	str	r3, [r5, #16]
 800ee4a:	e7ed      	b.n	800ee28 <ucdr_serialize_endian_array_uint8_t+0x40>

0800ee4c <ucdr_deserialize_array_uint8_t>:
 800ee4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee50:	4688      	mov	r8, r1
 800ee52:	4611      	mov	r1, r2
 800ee54:	4617      	mov	r7, r2
 800ee56:	4605      	mov	r5, r0
 800ee58:	f001 fc44 	bl	80106e4 <ucdr_check_buffer_available_for>
 800ee5c:	b9e8      	cbnz	r0, 800ee9a <ucdr_deserialize_array_uint8_t+0x4e>
 800ee5e:	463e      	mov	r6, r7
 800ee60:	e00c      	b.n	800ee7c <ucdr_deserialize_array_uint8_t+0x30>
 800ee62:	eb08 0003 	add.w	r0, r8, r3
 800ee66:	68a9      	ldr	r1, [r5, #8]
 800ee68:	4622      	mov	r2, r4
 800ee6a:	1b36      	subs	r6, r6, r4
 800ee6c:	f00d fd93 	bl	801c996 <memcpy>
 800ee70:	68ab      	ldr	r3, [r5, #8]
 800ee72:	6928      	ldr	r0, [r5, #16]
 800ee74:	4423      	add	r3, r4
 800ee76:	4420      	add	r0, r4
 800ee78:	60ab      	str	r3, [r5, #8]
 800ee7a:	6128      	str	r0, [r5, #16]
 800ee7c:	4631      	mov	r1, r6
 800ee7e:	2201      	movs	r2, #1
 800ee80:	4628      	mov	r0, r5
 800ee82:	f001 fcb9 	bl	80107f8 <ucdr_check_final_buffer_behavior_array>
 800ee86:	1bbb      	subs	r3, r7, r6
 800ee88:	4604      	mov	r4, r0
 800ee8a:	2800      	cmp	r0, #0
 800ee8c:	d1e9      	bne.n	800ee62 <ucdr_deserialize_array_uint8_t+0x16>
 800ee8e:	2301      	movs	r3, #1
 800ee90:	7da8      	ldrb	r0, [r5, #22]
 800ee92:	756b      	strb	r3, [r5, #21]
 800ee94:	4058      	eors	r0, r3
 800ee96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee9a:	463a      	mov	r2, r7
 800ee9c:	68a9      	ldr	r1, [r5, #8]
 800ee9e:	4640      	mov	r0, r8
 800eea0:	f00d fd79 	bl	801c996 <memcpy>
 800eea4:	68aa      	ldr	r2, [r5, #8]
 800eea6:	692b      	ldr	r3, [r5, #16]
 800eea8:	443a      	add	r2, r7
 800eeaa:	443b      	add	r3, r7
 800eeac:	60aa      	str	r2, [r5, #8]
 800eeae:	612b      	str	r3, [r5, #16]
 800eeb0:	e7ed      	b.n	800ee8e <ucdr_deserialize_array_uint8_t+0x42>
 800eeb2:	bf00      	nop

0800eeb4 <ucdr_deserialize_endian_array_uint8_t>:
 800eeb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeb8:	4619      	mov	r1, r3
 800eeba:	461f      	mov	r7, r3
 800eebc:	4605      	mov	r5, r0
 800eebe:	4690      	mov	r8, r2
 800eec0:	f001 fc10 	bl	80106e4 <ucdr_check_buffer_available_for>
 800eec4:	b9e8      	cbnz	r0, 800ef02 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 800eec6:	463e      	mov	r6, r7
 800eec8:	e00c      	b.n	800eee4 <ucdr_deserialize_endian_array_uint8_t+0x30>
 800eeca:	eb08 0003 	add.w	r0, r8, r3
 800eece:	68a9      	ldr	r1, [r5, #8]
 800eed0:	4622      	mov	r2, r4
 800eed2:	1b36      	subs	r6, r6, r4
 800eed4:	f00d fd5f 	bl	801c996 <memcpy>
 800eed8:	68ab      	ldr	r3, [r5, #8]
 800eeda:	6928      	ldr	r0, [r5, #16]
 800eedc:	4423      	add	r3, r4
 800eede:	4420      	add	r0, r4
 800eee0:	60ab      	str	r3, [r5, #8]
 800eee2:	6128      	str	r0, [r5, #16]
 800eee4:	4631      	mov	r1, r6
 800eee6:	2201      	movs	r2, #1
 800eee8:	4628      	mov	r0, r5
 800eeea:	f001 fc85 	bl	80107f8 <ucdr_check_final_buffer_behavior_array>
 800eeee:	1bbb      	subs	r3, r7, r6
 800eef0:	4604      	mov	r4, r0
 800eef2:	2800      	cmp	r0, #0
 800eef4:	d1e9      	bne.n	800eeca <ucdr_deserialize_endian_array_uint8_t+0x16>
 800eef6:	2301      	movs	r3, #1
 800eef8:	7da8      	ldrb	r0, [r5, #22]
 800eefa:	756b      	strb	r3, [r5, #21]
 800eefc:	4058      	eors	r0, r3
 800eefe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef02:	463a      	mov	r2, r7
 800ef04:	68a9      	ldr	r1, [r5, #8]
 800ef06:	4640      	mov	r0, r8
 800ef08:	f00d fd45 	bl	801c996 <memcpy>
 800ef0c:	68aa      	ldr	r2, [r5, #8]
 800ef0e:	692b      	ldr	r3, [r5, #16]
 800ef10:	443a      	add	r2, r7
 800ef12:	443b      	add	r3, r7
 800ef14:	60aa      	str	r2, [r5, #8]
 800ef16:	612b      	str	r3, [r5, #16]
 800ef18:	e7ed      	b.n	800eef6 <ucdr_deserialize_endian_array_uint8_t+0x42>
 800ef1a:	bf00      	nop

0800ef1c <ucdr_serialize_array_int16_t>:
 800ef1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef20:	4604      	mov	r4, r0
 800ef22:	460e      	mov	r6, r1
 800ef24:	2102      	movs	r1, #2
 800ef26:	4617      	mov	r7, r2
 800ef28:	f001 fc3c 	bl	80107a4 <ucdr_buffer_alignment>
 800ef2c:	4601      	mov	r1, r0
 800ef2e:	4620      	mov	r0, r4
 800ef30:	7d65      	ldrb	r5, [r4, #21]
 800ef32:	f001 fc7f 	bl	8010834 <ucdr_advance_buffer>
 800ef36:	7d21      	ldrb	r1, [r4, #20]
 800ef38:	7565      	strb	r5, [r4, #21]
 800ef3a:	2901      	cmp	r1, #1
 800ef3c:	d011      	beq.n	800ef62 <ucdr_serialize_array_int16_t+0x46>
 800ef3e:	b15f      	cbz	r7, 800ef58 <ucdr_serialize_array_int16_t+0x3c>
 800ef40:	3e02      	subs	r6, #2
 800ef42:	2500      	movs	r5, #0
 800ef44:	e000      	b.n	800ef48 <ucdr_serialize_array_int16_t+0x2c>
 800ef46:	7d21      	ldrb	r1, [r4, #20]
 800ef48:	3501      	adds	r5, #1
 800ef4a:	f936 2f02 	ldrsh.w	r2, [r6, #2]!
 800ef4e:	4620      	mov	r0, r4
 800ef50:	f000 fe78 	bl	800fc44 <ucdr_serialize_endian_int16_t>
 800ef54:	42af      	cmp	r7, r5
 800ef56:	d1f6      	bne.n	800ef46 <ucdr_serialize_array_int16_t+0x2a>
 800ef58:	7da0      	ldrb	r0, [r4, #22]
 800ef5a:	f080 0001 	eor.w	r0, r0, #1
 800ef5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef62:	007f      	lsls	r7, r7, #1
 800ef64:	4620      	mov	r0, r4
 800ef66:	4639      	mov	r1, r7
 800ef68:	f001 fbbc 	bl	80106e4 <ucdr_check_buffer_available_for>
 800ef6c:	b9f8      	cbnz	r0, 800efae <ucdr_serialize_array_int16_t+0x92>
 800ef6e:	46b8      	mov	r8, r7
 800ef70:	e00c      	b.n	800ef8c <ucdr_serialize_array_int16_t+0x70>
 800ef72:	462a      	mov	r2, r5
 800ef74:	4431      	add	r1, r6
 800ef76:	68a0      	ldr	r0, [r4, #8]
 800ef78:	eba8 0805 	sub.w	r8, r8, r5
 800ef7c:	f00d fd0b 	bl	801c996 <memcpy>
 800ef80:	68a2      	ldr	r2, [r4, #8]
 800ef82:	6923      	ldr	r3, [r4, #16]
 800ef84:	442a      	add	r2, r5
 800ef86:	442b      	add	r3, r5
 800ef88:	60a2      	str	r2, [r4, #8]
 800ef8a:	6123      	str	r3, [r4, #16]
 800ef8c:	4641      	mov	r1, r8
 800ef8e:	2202      	movs	r2, #2
 800ef90:	4620      	mov	r0, r4
 800ef92:	f001 fc31 	bl	80107f8 <ucdr_check_final_buffer_behavior_array>
 800ef96:	eba7 0108 	sub.w	r1, r7, r8
 800ef9a:	4605      	mov	r5, r0
 800ef9c:	2800      	cmp	r0, #0
 800ef9e:	d1e8      	bne.n	800ef72 <ucdr_serialize_array_int16_t+0x56>
 800efa0:	2302      	movs	r3, #2
 800efa2:	7da0      	ldrb	r0, [r4, #22]
 800efa4:	7563      	strb	r3, [r4, #21]
 800efa6:	f080 0001 	eor.w	r0, r0, #1
 800efaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efae:	463a      	mov	r2, r7
 800efb0:	4631      	mov	r1, r6
 800efb2:	68a0      	ldr	r0, [r4, #8]
 800efb4:	f00d fcef 	bl	801c996 <memcpy>
 800efb8:	68a2      	ldr	r2, [r4, #8]
 800efba:	6923      	ldr	r3, [r4, #16]
 800efbc:	443a      	add	r2, r7
 800efbe:	441f      	add	r7, r3
 800efc0:	60a2      	str	r2, [r4, #8]
 800efc2:	6127      	str	r7, [r4, #16]
 800efc4:	e7ec      	b.n	800efa0 <ucdr_serialize_array_int16_t+0x84>
 800efc6:	bf00      	nop

0800efc8 <ucdr_deserialize_array_int16_t>:
 800efc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efcc:	4604      	mov	r4, r0
 800efce:	460e      	mov	r6, r1
 800efd0:	2102      	movs	r1, #2
 800efd2:	4617      	mov	r7, r2
 800efd4:	f001 fbe6 	bl	80107a4 <ucdr_buffer_alignment>
 800efd8:	4601      	mov	r1, r0
 800efda:	4620      	mov	r0, r4
 800efdc:	7d65      	ldrb	r5, [r4, #21]
 800efde:	f001 fc29 	bl	8010834 <ucdr_advance_buffer>
 800efe2:	7d21      	ldrb	r1, [r4, #20]
 800efe4:	7565      	strb	r5, [r4, #21]
 800efe6:	2901      	cmp	r1, #1
 800efe8:	d010      	beq.n	800f00c <ucdr_deserialize_array_int16_t+0x44>
 800efea:	b157      	cbz	r7, 800f002 <ucdr_deserialize_array_int16_t+0x3a>
 800efec:	2500      	movs	r5, #0
 800efee:	e000      	b.n	800eff2 <ucdr_deserialize_array_int16_t+0x2a>
 800eff0:	7d21      	ldrb	r1, [r4, #20]
 800eff2:	3501      	adds	r5, #1
 800eff4:	4632      	mov	r2, r6
 800eff6:	4620      	mov	r0, r4
 800eff8:	3602      	adds	r6, #2
 800effa:	f000 ff17 	bl	800fe2c <ucdr_deserialize_endian_int16_t>
 800effe:	42af      	cmp	r7, r5
 800f000:	d1f6      	bne.n	800eff0 <ucdr_deserialize_array_int16_t+0x28>
 800f002:	7da0      	ldrb	r0, [r4, #22]
 800f004:	f080 0001 	eor.w	r0, r0, #1
 800f008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f00c:	007f      	lsls	r7, r7, #1
 800f00e:	4620      	mov	r0, r4
 800f010:	4639      	mov	r1, r7
 800f012:	f001 fb67 	bl	80106e4 <ucdr_check_buffer_available_for>
 800f016:	b9f8      	cbnz	r0, 800f058 <ucdr_deserialize_array_int16_t+0x90>
 800f018:	46b8      	mov	r8, r7
 800f01a:	e00c      	b.n	800f036 <ucdr_deserialize_array_int16_t+0x6e>
 800f01c:	18f0      	adds	r0, r6, r3
 800f01e:	462a      	mov	r2, r5
 800f020:	68a1      	ldr	r1, [r4, #8]
 800f022:	eba8 0805 	sub.w	r8, r8, r5
 800f026:	f00d fcb6 	bl	801c996 <memcpy>
 800f02a:	68a2      	ldr	r2, [r4, #8]
 800f02c:	6923      	ldr	r3, [r4, #16]
 800f02e:	442a      	add	r2, r5
 800f030:	442b      	add	r3, r5
 800f032:	60a2      	str	r2, [r4, #8]
 800f034:	6123      	str	r3, [r4, #16]
 800f036:	4641      	mov	r1, r8
 800f038:	2202      	movs	r2, #2
 800f03a:	4620      	mov	r0, r4
 800f03c:	f001 fbdc 	bl	80107f8 <ucdr_check_final_buffer_behavior_array>
 800f040:	eba7 0308 	sub.w	r3, r7, r8
 800f044:	4605      	mov	r5, r0
 800f046:	2800      	cmp	r0, #0
 800f048:	d1e8      	bne.n	800f01c <ucdr_deserialize_array_int16_t+0x54>
 800f04a:	2302      	movs	r3, #2
 800f04c:	7da0      	ldrb	r0, [r4, #22]
 800f04e:	7563      	strb	r3, [r4, #21]
 800f050:	f080 0001 	eor.w	r0, r0, #1
 800f054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f058:	463a      	mov	r2, r7
 800f05a:	68a1      	ldr	r1, [r4, #8]
 800f05c:	4630      	mov	r0, r6
 800f05e:	f00d fc9a 	bl	801c996 <memcpy>
 800f062:	68a2      	ldr	r2, [r4, #8]
 800f064:	6923      	ldr	r3, [r4, #16]
 800f066:	443a      	add	r2, r7
 800f068:	441f      	add	r7, r3
 800f06a:	60a2      	str	r2, [r4, #8]
 800f06c:	6127      	str	r7, [r4, #16]
 800f06e:	e7ec      	b.n	800f04a <ucdr_deserialize_array_int16_t+0x82>

0800f070 <ucdr_serialize_bool>:
 800f070:	b538      	push	{r3, r4, r5, lr}
 800f072:	460d      	mov	r5, r1
 800f074:	2101      	movs	r1, #1
 800f076:	4604      	mov	r4, r0
 800f078:	f001 fb40 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800f07c:	b148      	cbz	r0, 800f092 <ucdr_serialize_bool+0x22>
 800f07e:	68a3      	ldr	r3, [r4, #8]
 800f080:	2101      	movs	r1, #1
 800f082:	701d      	strb	r5, [r3, #0]
 800f084:	68a2      	ldr	r2, [r4, #8]
 800f086:	6923      	ldr	r3, [r4, #16]
 800f088:	440a      	add	r2, r1
 800f08a:	7561      	strb	r1, [r4, #21]
 800f08c:	440b      	add	r3, r1
 800f08e:	60a2      	str	r2, [r4, #8]
 800f090:	6123      	str	r3, [r4, #16]
 800f092:	7da0      	ldrb	r0, [r4, #22]
 800f094:	f080 0001 	eor.w	r0, r0, #1
 800f098:	bd38      	pop	{r3, r4, r5, pc}
 800f09a:	bf00      	nop

0800f09c <ucdr_deserialize_bool>:
 800f09c:	b538      	push	{r3, r4, r5, lr}
 800f09e:	460d      	mov	r5, r1
 800f0a0:	2101      	movs	r1, #1
 800f0a2:	4604      	mov	r4, r0
 800f0a4:	f001 fb2a 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800f0a8:	b160      	cbz	r0, 800f0c4 <ucdr_deserialize_bool+0x28>
 800f0aa:	68a2      	ldr	r2, [r4, #8]
 800f0ac:	2101      	movs	r1, #1
 800f0ae:	6923      	ldr	r3, [r4, #16]
 800f0b0:	f812 0b01 	ldrb.w	r0, [r2], #1
 800f0b4:	440b      	add	r3, r1
 800f0b6:	3800      	subs	r0, #0
 800f0b8:	bf18      	it	ne
 800f0ba:	2001      	movne	r0, #1
 800f0bc:	7028      	strb	r0, [r5, #0]
 800f0be:	60a2      	str	r2, [r4, #8]
 800f0c0:	6123      	str	r3, [r4, #16]
 800f0c2:	7561      	strb	r1, [r4, #21]
 800f0c4:	7da0      	ldrb	r0, [r4, #22]
 800f0c6:	f080 0001 	eor.w	r0, r0, #1
 800f0ca:	bd38      	pop	{r3, r4, r5, pc}

0800f0cc <ucdr_serialize_uint8_t>:
 800f0cc:	b538      	push	{r3, r4, r5, lr}
 800f0ce:	460d      	mov	r5, r1
 800f0d0:	2101      	movs	r1, #1
 800f0d2:	4604      	mov	r4, r0
 800f0d4:	f001 fb12 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800f0d8:	b148      	cbz	r0, 800f0ee <ucdr_serialize_uint8_t+0x22>
 800f0da:	68a3      	ldr	r3, [r4, #8]
 800f0dc:	2101      	movs	r1, #1
 800f0de:	701d      	strb	r5, [r3, #0]
 800f0e0:	68a2      	ldr	r2, [r4, #8]
 800f0e2:	6923      	ldr	r3, [r4, #16]
 800f0e4:	440a      	add	r2, r1
 800f0e6:	7561      	strb	r1, [r4, #21]
 800f0e8:	440b      	add	r3, r1
 800f0ea:	60a2      	str	r2, [r4, #8]
 800f0ec:	6123      	str	r3, [r4, #16]
 800f0ee:	7da0      	ldrb	r0, [r4, #22]
 800f0f0:	f080 0001 	eor.w	r0, r0, #1
 800f0f4:	bd38      	pop	{r3, r4, r5, pc}
 800f0f6:	bf00      	nop

0800f0f8 <ucdr_deserialize_uint8_t>:
 800f0f8:	b538      	push	{r3, r4, r5, lr}
 800f0fa:	460d      	mov	r5, r1
 800f0fc:	2101      	movs	r1, #1
 800f0fe:	4604      	mov	r4, r0
 800f100:	f001 fafc 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800f104:	b150      	cbz	r0, 800f11c <ucdr_deserialize_uint8_t+0x24>
 800f106:	68a3      	ldr	r3, [r4, #8]
 800f108:	2101      	movs	r1, #1
 800f10a:	781b      	ldrb	r3, [r3, #0]
 800f10c:	702b      	strb	r3, [r5, #0]
 800f10e:	68a2      	ldr	r2, [r4, #8]
 800f110:	6923      	ldr	r3, [r4, #16]
 800f112:	440a      	add	r2, r1
 800f114:	7561      	strb	r1, [r4, #21]
 800f116:	440b      	add	r3, r1
 800f118:	60a2      	str	r2, [r4, #8]
 800f11a:	6123      	str	r3, [r4, #16]
 800f11c:	7da0      	ldrb	r0, [r4, #22]
 800f11e:	f080 0001 	eor.w	r0, r0, #1
 800f122:	bd38      	pop	{r3, r4, r5, pc}

0800f124 <ucdr_serialize_uint16_t>:
 800f124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f128:	460b      	mov	r3, r1
 800f12a:	b082      	sub	sp, #8
 800f12c:	4604      	mov	r4, r0
 800f12e:	2102      	movs	r1, #2
 800f130:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f134:	f001 fb36 	bl	80107a4 <ucdr_buffer_alignment>
 800f138:	4601      	mov	r1, r0
 800f13a:	4620      	mov	r0, r4
 800f13c:	7d67      	ldrb	r7, [r4, #21]
 800f13e:	f001 fb79 	bl	8010834 <ucdr_advance_buffer>
 800f142:	2102      	movs	r1, #2
 800f144:	4620      	mov	r0, r4
 800f146:	f001 facd 	bl	80106e4 <ucdr_check_buffer_available_for>
 800f14a:	bb78      	cbnz	r0, 800f1ac <ucdr_serialize_uint16_t+0x88>
 800f14c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f150:	42ab      	cmp	r3, r5
 800f152:	d926      	bls.n	800f1a2 <ucdr_serialize_uint16_t+0x7e>
 800f154:	1b5e      	subs	r6, r3, r5
 800f156:	60a3      	str	r3, [r4, #8]
 800f158:	6923      	ldr	r3, [r4, #16]
 800f15a:	4620      	mov	r0, r4
 800f15c:	f1c6 0802 	rsb	r8, r6, #2
 800f160:	4433      	add	r3, r6
 800f162:	4641      	mov	r1, r8
 800f164:	6123      	str	r3, [r4, #16]
 800f166:	f001 fac9 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800f16a:	2800      	cmp	r0, #0
 800f16c:	d03b      	beq.n	800f1e6 <ucdr_serialize_uint16_t+0xc2>
 800f16e:	7d23      	ldrb	r3, [r4, #20]
 800f170:	2b01      	cmp	r3, #1
 800f172:	d04a      	beq.n	800f20a <ucdr_serialize_uint16_t+0xe6>
 800f174:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f178:	702b      	strb	r3, [r5, #0]
 800f17a:	2e00      	cmp	r6, #0
 800f17c:	d040      	beq.n	800f200 <ucdr_serialize_uint16_t+0xdc>
 800f17e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f182:	706b      	strb	r3, [r5, #1]
 800f184:	6923      	ldr	r3, [r4, #16]
 800f186:	2102      	movs	r1, #2
 800f188:	68a2      	ldr	r2, [r4, #8]
 800f18a:	3302      	adds	r3, #2
 800f18c:	7da0      	ldrb	r0, [r4, #22]
 800f18e:	4442      	add	r2, r8
 800f190:	7561      	strb	r1, [r4, #21]
 800f192:	1b9e      	subs	r6, r3, r6
 800f194:	f080 0001 	eor.w	r0, r0, #1
 800f198:	60a2      	str	r2, [r4, #8]
 800f19a:	6126      	str	r6, [r4, #16]
 800f19c:	b002      	add	sp, #8
 800f19e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1a2:	2102      	movs	r1, #2
 800f1a4:	4620      	mov	r0, r4
 800f1a6:	f001 faa9 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800f1aa:	b190      	cbz	r0, 800f1d2 <ucdr_serialize_uint16_t+0xae>
 800f1ac:	7d23      	ldrb	r3, [r4, #20]
 800f1ae:	2b01      	cmp	r3, #1
 800f1b0:	68a3      	ldr	r3, [r4, #8]
 800f1b2:	d014      	beq.n	800f1de <ucdr_serialize_uint16_t+0xba>
 800f1b4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f1b8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f1bc:	7019      	strb	r1, [r3, #0]
 800f1be:	68a3      	ldr	r3, [r4, #8]
 800f1c0:	705a      	strb	r2, [r3, #1]
 800f1c2:	2102      	movs	r1, #2
 800f1c4:	68a2      	ldr	r2, [r4, #8]
 800f1c6:	6923      	ldr	r3, [r4, #16]
 800f1c8:	440a      	add	r2, r1
 800f1ca:	7561      	strb	r1, [r4, #21]
 800f1cc:	440b      	add	r3, r1
 800f1ce:	60a2      	str	r2, [r4, #8]
 800f1d0:	6123      	str	r3, [r4, #16]
 800f1d2:	7da0      	ldrb	r0, [r4, #22]
 800f1d4:	f080 0001 	eor.w	r0, r0, #1
 800f1d8:	b002      	add	sp, #8
 800f1da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1de:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f1e2:	801a      	strh	r2, [r3, #0]
 800f1e4:	e7ed      	b.n	800f1c2 <ucdr_serialize_uint16_t+0x9e>
 800f1e6:	68a2      	ldr	r2, [r4, #8]
 800f1e8:	6923      	ldr	r3, [r4, #16]
 800f1ea:	7da0      	ldrb	r0, [r4, #22]
 800f1ec:	1b92      	subs	r2, r2, r6
 800f1ee:	1b9b      	subs	r3, r3, r6
 800f1f0:	7567      	strb	r7, [r4, #21]
 800f1f2:	f080 0001 	eor.w	r0, r0, #1
 800f1f6:	60a2      	str	r2, [r4, #8]
 800f1f8:	6123      	str	r3, [r4, #16]
 800f1fa:	b002      	add	sp, #8
 800f1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f200:	68a3      	ldr	r3, [r4, #8]
 800f202:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f206:	701a      	strb	r2, [r3, #0]
 800f208:	e7bc      	b.n	800f184 <ucdr_serialize_uint16_t+0x60>
 800f20a:	4628      	mov	r0, r5
 800f20c:	f10d 0506 	add.w	r5, sp, #6
 800f210:	4632      	mov	r2, r6
 800f212:	4629      	mov	r1, r5
 800f214:	f00d fbbf 	bl	801c996 <memcpy>
 800f218:	4642      	mov	r2, r8
 800f21a:	19a9      	adds	r1, r5, r6
 800f21c:	68a0      	ldr	r0, [r4, #8]
 800f21e:	f00d fbba 	bl	801c996 <memcpy>
 800f222:	e7af      	b.n	800f184 <ucdr_serialize_uint16_t+0x60>

0800f224 <ucdr_serialize_endian_uint16_t>:
 800f224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f228:	4604      	mov	r4, r0
 800f22a:	b083      	sub	sp, #12
 800f22c:	460d      	mov	r5, r1
 800f22e:	2102      	movs	r1, #2
 800f230:	f8ad 2006 	strh.w	r2, [sp, #6]
 800f234:	f001 fab6 	bl	80107a4 <ucdr_buffer_alignment>
 800f238:	4601      	mov	r1, r0
 800f23a:	4620      	mov	r0, r4
 800f23c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f240:	f001 faf8 	bl	8010834 <ucdr_advance_buffer>
 800f244:	2102      	movs	r1, #2
 800f246:	4620      	mov	r0, r4
 800f248:	f001 fa4c 	bl	80106e4 <ucdr_check_buffer_available_for>
 800f24c:	bb70      	cbnz	r0, 800f2ac <ucdr_serialize_endian_uint16_t+0x88>
 800f24e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f252:	42be      	cmp	r6, r7
 800f254:	d925      	bls.n	800f2a2 <ucdr_serialize_endian_uint16_t+0x7e>
 800f256:	6923      	ldr	r3, [r4, #16]
 800f258:	4620      	mov	r0, r4
 800f25a:	60a6      	str	r6, [r4, #8]
 800f25c:	1bf6      	subs	r6, r6, r7
 800f25e:	4433      	add	r3, r6
 800f260:	f1c6 0902 	rsb	r9, r6, #2
 800f264:	6123      	str	r3, [r4, #16]
 800f266:	4649      	mov	r1, r9
 800f268:	f001 fa48 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800f26c:	2800      	cmp	r0, #0
 800f26e:	d039      	beq.n	800f2e4 <ucdr_serialize_endian_uint16_t+0xc0>
 800f270:	2d01      	cmp	r5, #1
 800f272:	d04a      	beq.n	800f30a <ucdr_serialize_endian_uint16_t+0xe6>
 800f274:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f278:	703b      	strb	r3, [r7, #0]
 800f27a:	2e00      	cmp	r6, #0
 800f27c:	d040      	beq.n	800f300 <ucdr_serialize_endian_uint16_t+0xdc>
 800f27e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f282:	707b      	strb	r3, [r7, #1]
 800f284:	6923      	ldr	r3, [r4, #16]
 800f286:	2102      	movs	r1, #2
 800f288:	68a2      	ldr	r2, [r4, #8]
 800f28a:	7da0      	ldrb	r0, [r4, #22]
 800f28c:	3302      	adds	r3, #2
 800f28e:	444a      	add	r2, r9
 800f290:	7561      	strb	r1, [r4, #21]
 800f292:	1b9b      	subs	r3, r3, r6
 800f294:	f080 0001 	eor.w	r0, r0, #1
 800f298:	60a2      	str	r2, [r4, #8]
 800f29a:	6123      	str	r3, [r4, #16]
 800f29c:	b003      	add	sp, #12
 800f29e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2a2:	2102      	movs	r1, #2
 800f2a4:	4620      	mov	r0, r4
 800f2a6:	f001 fa29 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800f2aa:	b188      	cbz	r0, 800f2d0 <ucdr_serialize_endian_uint16_t+0xac>
 800f2ac:	2d01      	cmp	r5, #1
 800f2ae:	68a3      	ldr	r3, [r4, #8]
 800f2b0:	d014      	beq.n	800f2dc <ucdr_serialize_endian_uint16_t+0xb8>
 800f2b2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f2b6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f2ba:	7019      	strb	r1, [r3, #0]
 800f2bc:	68a3      	ldr	r3, [r4, #8]
 800f2be:	705a      	strb	r2, [r3, #1]
 800f2c0:	2102      	movs	r1, #2
 800f2c2:	68a2      	ldr	r2, [r4, #8]
 800f2c4:	6923      	ldr	r3, [r4, #16]
 800f2c6:	440a      	add	r2, r1
 800f2c8:	7561      	strb	r1, [r4, #21]
 800f2ca:	440b      	add	r3, r1
 800f2cc:	60a2      	str	r2, [r4, #8]
 800f2ce:	6123      	str	r3, [r4, #16]
 800f2d0:	7da0      	ldrb	r0, [r4, #22]
 800f2d2:	f080 0001 	eor.w	r0, r0, #1
 800f2d6:	b003      	add	sp, #12
 800f2d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2dc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f2e0:	801a      	strh	r2, [r3, #0]
 800f2e2:	e7ed      	b.n	800f2c0 <ucdr_serialize_endian_uint16_t+0x9c>
 800f2e4:	68a2      	ldr	r2, [r4, #8]
 800f2e6:	6923      	ldr	r3, [r4, #16]
 800f2e8:	7da0      	ldrb	r0, [r4, #22]
 800f2ea:	1b92      	subs	r2, r2, r6
 800f2ec:	1b9b      	subs	r3, r3, r6
 800f2ee:	f884 8015 	strb.w	r8, [r4, #21]
 800f2f2:	f080 0001 	eor.w	r0, r0, #1
 800f2f6:	60a2      	str	r2, [r4, #8]
 800f2f8:	6123      	str	r3, [r4, #16]
 800f2fa:	b003      	add	sp, #12
 800f2fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f300:	68a3      	ldr	r3, [r4, #8]
 800f302:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f306:	701a      	strb	r2, [r3, #0]
 800f308:	e7bc      	b.n	800f284 <ucdr_serialize_endian_uint16_t+0x60>
 800f30a:	f10d 0506 	add.w	r5, sp, #6
 800f30e:	4632      	mov	r2, r6
 800f310:	4638      	mov	r0, r7
 800f312:	4629      	mov	r1, r5
 800f314:	f00d fb3f 	bl	801c996 <memcpy>
 800f318:	464a      	mov	r2, r9
 800f31a:	19a9      	adds	r1, r5, r6
 800f31c:	68a0      	ldr	r0, [r4, #8]
 800f31e:	f00d fb3a 	bl	801c996 <memcpy>
 800f322:	e7af      	b.n	800f284 <ucdr_serialize_endian_uint16_t+0x60>

0800f324 <ucdr_deserialize_uint16_t>:
 800f324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f328:	4604      	mov	r4, r0
 800f32a:	460d      	mov	r5, r1
 800f32c:	2102      	movs	r1, #2
 800f32e:	f001 fa39 	bl	80107a4 <ucdr_buffer_alignment>
 800f332:	4601      	mov	r1, r0
 800f334:	4620      	mov	r0, r4
 800f336:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f33a:	f001 fa7b 	bl	8010834 <ucdr_advance_buffer>
 800f33e:	2102      	movs	r1, #2
 800f340:	4620      	mov	r0, r4
 800f342:	f001 f9cf 	bl	80106e4 <ucdr_check_buffer_available_for>
 800f346:	bb60      	cbnz	r0, 800f3a2 <ucdr_deserialize_uint16_t+0x7e>
 800f348:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f34c:	42be      	cmp	r6, r7
 800f34e:	d923      	bls.n	800f398 <ucdr_deserialize_uint16_t+0x74>
 800f350:	6923      	ldr	r3, [r4, #16]
 800f352:	4620      	mov	r0, r4
 800f354:	60a6      	str	r6, [r4, #8]
 800f356:	1bf6      	subs	r6, r6, r7
 800f358:	4433      	add	r3, r6
 800f35a:	f1c6 0902 	rsb	r9, r6, #2
 800f35e:	6123      	str	r3, [r4, #16]
 800f360:	4649      	mov	r1, r9
 800f362:	f001 f9cb 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800f366:	2800      	cmp	r0, #0
 800f368:	d034      	beq.n	800f3d4 <ucdr_deserialize_uint16_t+0xb0>
 800f36a:	7d23      	ldrb	r3, [r4, #20]
 800f36c:	2b01      	cmp	r3, #1
 800f36e:	d042      	beq.n	800f3f6 <ucdr_deserialize_uint16_t+0xd2>
 800f370:	787b      	ldrb	r3, [r7, #1]
 800f372:	702b      	strb	r3, [r5, #0]
 800f374:	2e00      	cmp	r6, #0
 800f376:	d03a      	beq.n	800f3ee <ucdr_deserialize_uint16_t+0xca>
 800f378:	783b      	ldrb	r3, [r7, #0]
 800f37a:	706b      	strb	r3, [r5, #1]
 800f37c:	6923      	ldr	r3, [r4, #16]
 800f37e:	2102      	movs	r1, #2
 800f380:	68a2      	ldr	r2, [r4, #8]
 800f382:	3302      	adds	r3, #2
 800f384:	7da0      	ldrb	r0, [r4, #22]
 800f386:	444a      	add	r2, r9
 800f388:	7561      	strb	r1, [r4, #21]
 800f38a:	1b9b      	subs	r3, r3, r6
 800f38c:	f080 0001 	eor.w	r0, r0, #1
 800f390:	60a2      	str	r2, [r4, #8]
 800f392:	6123      	str	r3, [r4, #16]
 800f394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f398:	2102      	movs	r1, #2
 800f39a:	4620      	mov	r0, r4
 800f39c:	f001 f9ae 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800f3a0:	b180      	cbz	r0, 800f3c4 <ucdr_deserialize_uint16_t+0xa0>
 800f3a2:	7d23      	ldrb	r3, [r4, #20]
 800f3a4:	2b01      	cmp	r3, #1
 800f3a6:	68a3      	ldr	r3, [r4, #8]
 800f3a8:	d011      	beq.n	800f3ce <ucdr_deserialize_uint16_t+0xaa>
 800f3aa:	785b      	ldrb	r3, [r3, #1]
 800f3ac:	702b      	strb	r3, [r5, #0]
 800f3ae:	68a3      	ldr	r3, [r4, #8]
 800f3b0:	781b      	ldrb	r3, [r3, #0]
 800f3b2:	706b      	strb	r3, [r5, #1]
 800f3b4:	2102      	movs	r1, #2
 800f3b6:	68a2      	ldr	r2, [r4, #8]
 800f3b8:	6923      	ldr	r3, [r4, #16]
 800f3ba:	440a      	add	r2, r1
 800f3bc:	7561      	strb	r1, [r4, #21]
 800f3be:	440b      	add	r3, r1
 800f3c0:	60a2      	str	r2, [r4, #8]
 800f3c2:	6123      	str	r3, [r4, #16]
 800f3c4:	7da0      	ldrb	r0, [r4, #22]
 800f3c6:	f080 0001 	eor.w	r0, r0, #1
 800f3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3ce:	881b      	ldrh	r3, [r3, #0]
 800f3d0:	802b      	strh	r3, [r5, #0]
 800f3d2:	e7ef      	b.n	800f3b4 <ucdr_deserialize_uint16_t+0x90>
 800f3d4:	68a2      	ldr	r2, [r4, #8]
 800f3d6:	6923      	ldr	r3, [r4, #16]
 800f3d8:	1b92      	subs	r2, r2, r6
 800f3da:	7da0      	ldrb	r0, [r4, #22]
 800f3dc:	1b9b      	subs	r3, r3, r6
 800f3de:	f884 8015 	strb.w	r8, [r4, #21]
 800f3e2:	f080 0001 	eor.w	r0, r0, #1
 800f3e6:	60a2      	str	r2, [r4, #8]
 800f3e8:	6123      	str	r3, [r4, #16]
 800f3ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3ee:	68a3      	ldr	r3, [r4, #8]
 800f3f0:	781b      	ldrb	r3, [r3, #0]
 800f3f2:	706b      	strb	r3, [r5, #1]
 800f3f4:	e7c2      	b.n	800f37c <ucdr_deserialize_uint16_t+0x58>
 800f3f6:	4639      	mov	r1, r7
 800f3f8:	4632      	mov	r2, r6
 800f3fa:	4628      	mov	r0, r5
 800f3fc:	f00d facb 	bl	801c996 <memcpy>
 800f400:	464a      	mov	r2, r9
 800f402:	19a8      	adds	r0, r5, r6
 800f404:	68a1      	ldr	r1, [r4, #8]
 800f406:	f00d fac6 	bl	801c996 <memcpy>
 800f40a:	e7b7      	b.n	800f37c <ucdr_deserialize_uint16_t+0x58>

0800f40c <ucdr_deserialize_endian_uint16_t>:
 800f40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f410:	4604      	mov	r4, r0
 800f412:	460e      	mov	r6, r1
 800f414:	2102      	movs	r1, #2
 800f416:	4615      	mov	r5, r2
 800f418:	f001 f9c4 	bl	80107a4 <ucdr_buffer_alignment>
 800f41c:	4601      	mov	r1, r0
 800f41e:	4620      	mov	r0, r4
 800f420:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f424:	f001 fa06 	bl	8010834 <ucdr_advance_buffer>
 800f428:	2102      	movs	r1, #2
 800f42a:	4620      	mov	r0, r4
 800f42c:	f001 f95a 	bl	80106e4 <ucdr_check_buffer_available_for>
 800f430:	bb70      	cbnz	r0, 800f490 <ucdr_deserialize_endian_uint16_t+0x84>
 800f432:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800f436:	454f      	cmp	r7, r9
 800f438:	d925      	bls.n	800f486 <ucdr_deserialize_endian_uint16_t+0x7a>
 800f43a:	6923      	ldr	r3, [r4, #16]
 800f43c:	4620      	mov	r0, r4
 800f43e:	60a7      	str	r7, [r4, #8]
 800f440:	eba7 0709 	sub.w	r7, r7, r9
 800f444:	443b      	add	r3, r7
 800f446:	f1c7 0a02 	rsb	sl, r7, #2
 800f44a:	6123      	str	r3, [r4, #16]
 800f44c:	4651      	mov	r1, sl
 800f44e:	f001 f955 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800f452:	2800      	cmp	r0, #0
 800f454:	d034      	beq.n	800f4c0 <ucdr_deserialize_endian_uint16_t+0xb4>
 800f456:	2e01      	cmp	r6, #1
 800f458:	d043      	beq.n	800f4e2 <ucdr_deserialize_endian_uint16_t+0xd6>
 800f45a:	f899 3001 	ldrb.w	r3, [r9, #1]
 800f45e:	702b      	strb	r3, [r5, #0]
 800f460:	2f00      	cmp	r7, #0
 800f462:	d03a      	beq.n	800f4da <ucdr_deserialize_endian_uint16_t+0xce>
 800f464:	f899 3000 	ldrb.w	r3, [r9]
 800f468:	706b      	strb	r3, [r5, #1]
 800f46a:	6923      	ldr	r3, [r4, #16]
 800f46c:	2102      	movs	r1, #2
 800f46e:	68a2      	ldr	r2, [r4, #8]
 800f470:	3302      	adds	r3, #2
 800f472:	7da0      	ldrb	r0, [r4, #22]
 800f474:	4452      	add	r2, sl
 800f476:	7561      	strb	r1, [r4, #21]
 800f478:	1bdb      	subs	r3, r3, r7
 800f47a:	f080 0001 	eor.w	r0, r0, #1
 800f47e:	60a2      	str	r2, [r4, #8]
 800f480:	6123      	str	r3, [r4, #16]
 800f482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f486:	2102      	movs	r1, #2
 800f488:	4620      	mov	r0, r4
 800f48a:	f001 f937 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800f48e:	b178      	cbz	r0, 800f4b0 <ucdr_deserialize_endian_uint16_t+0xa4>
 800f490:	2e01      	cmp	r6, #1
 800f492:	68a3      	ldr	r3, [r4, #8]
 800f494:	d011      	beq.n	800f4ba <ucdr_deserialize_endian_uint16_t+0xae>
 800f496:	785b      	ldrb	r3, [r3, #1]
 800f498:	702b      	strb	r3, [r5, #0]
 800f49a:	68a3      	ldr	r3, [r4, #8]
 800f49c:	781b      	ldrb	r3, [r3, #0]
 800f49e:	706b      	strb	r3, [r5, #1]
 800f4a0:	2102      	movs	r1, #2
 800f4a2:	68a2      	ldr	r2, [r4, #8]
 800f4a4:	6923      	ldr	r3, [r4, #16]
 800f4a6:	440a      	add	r2, r1
 800f4a8:	7561      	strb	r1, [r4, #21]
 800f4aa:	440b      	add	r3, r1
 800f4ac:	60a2      	str	r2, [r4, #8]
 800f4ae:	6123      	str	r3, [r4, #16]
 800f4b0:	7da0      	ldrb	r0, [r4, #22]
 800f4b2:	f080 0001 	eor.w	r0, r0, #1
 800f4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ba:	881b      	ldrh	r3, [r3, #0]
 800f4bc:	802b      	strh	r3, [r5, #0]
 800f4be:	e7ef      	b.n	800f4a0 <ucdr_deserialize_endian_uint16_t+0x94>
 800f4c0:	68a2      	ldr	r2, [r4, #8]
 800f4c2:	6923      	ldr	r3, [r4, #16]
 800f4c4:	1bd2      	subs	r2, r2, r7
 800f4c6:	7da0      	ldrb	r0, [r4, #22]
 800f4c8:	1bdb      	subs	r3, r3, r7
 800f4ca:	f884 8015 	strb.w	r8, [r4, #21]
 800f4ce:	f080 0001 	eor.w	r0, r0, #1
 800f4d2:	60a2      	str	r2, [r4, #8]
 800f4d4:	6123      	str	r3, [r4, #16]
 800f4d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4da:	68a3      	ldr	r3, [r4, #8]
 800f4dc:	781b      	ldrb	r3, [r3, #0]
 800f4de:	706b      	strb	r3, [r5, #1]
 800f4e0:	e7c3      	b.n	800f46a <ucdr_deserialize_endian_uint16_t+0x5e>
 800f4e2:	4649      	mov	r1, r9
 800f4e4:	463a      	mov	r2, r7
 800f4e6:	4628      	mov	r0, r5
 800f4e8:	f00d fa55 	bl	801c996 <memcpy>
 800f4ec:	4652      	mov	r2, sl
 800f4ee:	19e8      	adds	r0, r5, r7
 800f4f0:	68a1      	ldr	r1, [r4, #8]
 800f4f2:	f00d fa50 	bl	801c996 <memcpy>
 800f4f6:	e7b8      	b.n	800f46a <ucdr_deserialize_endian_uint16_t+0x5e>

0800f4f8 <ucdr_serialize_uint32_t>:
 800f4f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4fc:	b082      	sub	sp, #8
 800f4fe:	4604      	mov	r4, r0
 800f500:	9101      	str	r1, [sp, #4]
 800f502:	2104      	movs	r1, #4
 800f504:	f001 f94e 	bl	80107a4 <ucdr_buffer_alignment>
 800f508:	4601      	mov	r1, r0
 800f50a:	4620      	mov	r0, r4
 800f50c:	7d67      	ldrb	r7, [r4, #21]
 800f50e:	f001 f991 	bl	8010834 <ucdr_advance_buffer>
 800f512:	2104      	movs	r1, #4
 800f514:	4620      	mov	r0, r4
 800f516:	f001 f8e5 	bl	80106e4 <ucdr_check_buffer_available_for>
 800f51a:	2800      	cmp	r0, #0
 800f51c:	d139      	bne.n	800f592 <ucdr_serialize_uint32_t+0x9a>
 800f51e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f522:	42ab      	cmp	r3, r5
 800f524:	d930      	bls.n	800f588 <ucdr_serialize_uint32_t+0x90>
 800f526:	1b5e      	subs	r6, r3, r5
 800f528:	60a3      	str	r3, [r4, #8]
 800f52a:	6923      	ldr	r3, [r4, #16]
 800f52c:	4620      	mov	r0, r4
 800f52e:	f1c6 0804 	rsb	r8, r6, #4
 800f532:	4433      	add	r3, r6
 800f534:	4641      	mov	r1, r8
 800f536:	6123      	str	r3, [r4, #16]
 800f538:	f001 f8e0 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800f53c:	2800      	cmp	r0, #0
 800f53e:	d04c      	beq.n	800f5da <ucdr_serialize_uint32_t+0xe2>
 800f540:	7d23      	ldrb	r3, [r4, #20]
 800f542:	2b01      	cmp	r3, #1
 800f544:	d063      	beq.n	800f60e <ucdr_serialize_uint32_t+0x116>
 800f546:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f54a:	702b      	strb	r3, [r5, #0]
 800f54c:	2e00      	cmp	r6, #0
 800f54e:	d051      	beq.n	800f5f4 <ucdr_serialize_uint32_t+0xfc>
 800f550:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f554:	2e01      	cmp	r6, #1
 800f556:	706b      	strb	r3, [r5, #1]
 800f558:	d050      	beq.n	800f5fc <ucdr_serialize_uint32_t+0x104>
 800f55a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f55e:	2e02      	cmp	r6, #2
 800f560:	70ab      	strb	r3, [r5, #2]
 800f562:	d04f      	beq.n	800f604 <ucdr_serialize_uint32_t+0x10c>
 800f564:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f568:	70eb      	strb	r3, [r5, #3]
 800f56a:	6923      	ldr	r3, [r4, #16]
 800f56c:	2104      	movs	r1, #4
 800f56e:	68a2      	ldr	r2, [r4, #8]
 800f570:	3304      	adds	r3, #4
 800f572:	7da0      	ldrb	r0, [r4, #22]
 800f574:	4442      	add	r2, r8
 800f576:	7561      	strb	r1, [r4, #21]
 800f578:	1b9e      	subs	r6, r3, r6
 800f57a:	f080 0001 	eor.w	r0, r0, #1
 800f57e:	60a2      	str	r2, [r4, #8]
 800f580:	6126      	str	r6, [r4, #16]
 800f582:	b002      	add	sp, #8
 800f584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f588:	2104      	movs	r1, #4
 800f58a:	4620      	mov	r0, r4
 800f58c:	f001 f8b6 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800f590:	b1d0      	cbz	r0, 800f5c8 <ucdr_serialize_uint32_t+0xd0>
 800f592:	7d23      	ldrb	r3, [r4, #20]
 800f594:	2b01      	cmp	r3, #1
 800f596:	68a3      	ldr	r3, [r4, #8]
 800f598:	d01c      	beq.n	800f5d4 <ucdr_serialize_uint32_t+0xdc>
 800f59a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f59e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f5a2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f5a6:	7018      	strb	r0, [r3, #0]
 800f5a8:	68a3      	ldr	r3, [r4, #8]
 800f5aa:	705a      	strb	r2, [r3, #1]
 800f5ac:	68a3      	ldr	r3, [r4, #8]
 800f5ae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f5b2:	7099      	strb	r1, [r3, #2]
 800f5b4:	68a3      	ldr	r3, [r4, #8]
 800f5b6:	70da      	strb	r2, [r3, #3]
 800f5b8:	2104      	movs	r1, #4
 800f5ba:	68a2      	ldr	r2, [r4, #8]
 800f5bc:	6923      	ldr	r3, [r4, #16]
 800f5be:	440a      	add	r2, r1
 800f5c0:	7561      	strb	r1, [r4, #21]
 800f5c2:	440b      	add	r3, r1
 800f5c4:	60a2      	str	r2, [r4, #8]
 800f5c6:	6123      	str	r3, [r4, #16]
 800f5c8:	7da0      	ldrb	r0, [r4, #22]
 800f5ca:	f080 0001 	eor.w	r0, r0, #1
 800f5ce:	b002      	add	sp, #8
 800f5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5d4:	9a01      	ldr	r2, [sp, #4]
 800f5d6:	601a      	str	r2, [r3, #0]
 800f5d8:	e7ee      	b.n	800f5b8 <ucdr_serialize_uint32_t+0xc0>
 800f5da:	68a2      	ldr	r2, [r4, #8]
 800f5dc:	6923      	ldr	r3, [r4, #16]
 800f5de:	7da0      	ldrb	r0, [r4, #22]
 800f5e0:	1b92      	subs	r2, r2, r6
 800f5e2:	1b9b      	subs	r3, r3, r6
 800f5e4:	7567      	strb	r7, [r4, #21]
 800f5e6:	f080 0001 	eor.w	r0, r0, #1
 800f5ea:	60a2      	str	r2, [r4, #8]
 800f5ec:	6123      	str	r3, [r4, #16]
 800f5ee:	b002      	add	sp, #8
 800f5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5f4:	68a3      	ldr	r3, [r4, #8]
 800f5f6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f5fa:	701a      	strb	r2, [r3, #0]
 800f5fc:	68a3      	ldr	r3, [r4, #8]
 800f5fe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f602:	701a      	strb	r2, [r3, #0]
 800f604:	68a3      	ldr	r3, [r4, #8]
 800f606:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f60a:	701a      	strb	r2, [r3, #0]
 800f60c:	e7ad      	b.n	800f56a <ucdr_serialize_uint32_t+0x72>
 800f60e:	4628      	mov	r0, r5
 800f610:	ad01      	add	r5, sp, #4
 800f612:	4632      	mov	r2, r6
 800f614:	4629      	mov	r1, r5
 800f616:	f00d f9be 	bl	801c996 <memcpy>
 800f61a:	4642      	mov	r2, r8
 800f61c:	19a9      	adds	r1, r5, r6
 800f61e:	68a0      	ldr	r0, [r4, #8]
 800f620:	f00d f9b9 	bl	801c996 <memcpy>
 800f624:	e7a1      	b.n	800f56a <ucdr_serialize_uint32_t+0x72>
 800f626:	bf00      	nop

0800f628 <ucdr_serialize_endian_uint32_t>:
 800f628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f62c:	4604      	mov	r4, r0
 800f62e:	b083      	sub	sp, #12
 800f630:	460d      	mov	r5, r1
 800f632:	2104      	movs	r1, #4
 800f634:	9201      	str	r2, [sp, #4]
 800f636:	f001 f8b5 	bl	80107a4 <ucdr_buffer_alignment>
 800f63a:	4601      	mov	r1, r0
 800f63c:	4620      	mov	r0, r4
 800f63e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f642:	f001 f8f7 	bl	8010834 <ucdr_advance_buffer>
 800f646:	2104      	movs	r1, #4
 800f648:	4620      	mov	r0, r4
 800f64a:	f001 f84b 	bl	80106e4 <ucdr_check_buffer_available_for>
 800f64e:	2800      	cmp	r0, #0
 800f650:	d138      	bne.n	800f6c4 <ucdr_serialize_endian_uint32_t+0x9c>
 800f652:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f656:	42b7      	cmp	r7, r6
 800f658:	d92f      	bls.n	800f6ba <ucdr_serialize_endian_uint32_t+0x92>
 800f65a:	6923      	ldr	r3, [r4, #16]
 800f65c:	4620      	mov	r0, r4
 800f65e:	60a7      	str	r7, [r4, #8]
 800f660:	1bbf      	subs	r7, r7, r6
 800f662:	443b      	add	r3, r7
 800f664:	f1c7 0904 	rsb	r9, r7, #4
 800f668:	6123      	str	r3, [r4, #16]
 800f66a:	4649      	mov	r1, r9
 800f66c:	f001 f846 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800f670:	2800      	cmp	r0, #0
 800f672:	d04a      	beq.n	800f70a <ucdr_serialize_endian_uint32_t+0xe2>
 800f674:	2d01      	cmp	r5, #1
 800f676:	d063      	beq.n	800f740 <ucdr_serialize_endian_uint32_t+0x118>
 800f678:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f67c:	7033      	strb	r3, [r6, #0]
 800f67e:	2f00      	cmp	r7, #0
 800f680:	d051      	beq.n	800f726 <ucdr_serialize_endian_uint32_t+0xfe>
 800f682:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f686:	2f01      	cmp	r7, #1
 800f688:	7073      	strb	r3, [r6, #1]
 800f68a:	d050      	beq.n	800f72e <ucdr_serialize_endian_uint32_t+0x106>
 800f68c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f690:	2f02      	cmp	r7, #2
 800f692:	70b3      	strb	r3, [r6, #2]
 800f694:	d04f      	beq.n	800f736 <ucdr_serialize_endian_uint32_t+0x10e>
 800f696:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f69a:	70f3      	strb	r3, [r6, #3]
 800f69c:	6923      	ldr	r3, [r4, #16]
 800f69e:	2104      	movs	r1, #4
 800f6a0:	68a2      	ldr	r2, [r4, #8]
 800f6a2:	7da0      	ldrb	r0, [r4, #22]
 800f6a4:	3304      	adds	r3, #4
 800f6a6:	444a      	add	r2, r9
 800f6a8:	7561      	strb	r1, [r4, #21]
 800f6aa:	1bdb      	subs	r3, r3, r7
 800f6ac:	f080 0001 	eor.w	r0, r0, #1
 800f6b0:	60a2      	str	r2, [r4, #8]
 800f6b2:	6123      	str	r3, [r4, #16]
 800f6b4:	b003      	add	sp, #12
 800f6b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6ba:	2104      	movs	r1, #4
 800f6bc:	4620      	mov	r0, r4
 800f6be:	f001 f81d 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800f6c2:	b1c8      	cbz	r0, 800f6f8 <ucdr_serialize_endian_uint32_t+0xd0>
 800f6c4:	2d01      	cmp	r5, #1
 800f6c6:	68a3      	ldr	r3, [r4, #8]
 800f6c8:	d01c      	beq.n	800f704 <ucdr_serialize_endian_uint32_t+0xdc>
 800f6ca:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f6ce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f6d2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f6d6:	7018      	strb	r0, [r3, #0]
 800f6d8:	68a3      	ldr	r3, [r4, #8]
 800f6da:	705a      	strb	r2, [r3, #1]
 800f6dc:	68a3      	ldr	r3, [r4, #8]
 800f6de:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f6e2:	7099      	strb	r1, [r3, #2]
 800f6e4:	68a3      	ldr	r3, [r4, #8]
 800f6e6:	70da      	strb	r2, [r3, #3]
 800f6e8:	2104      	movs	r1, #4
 800f6ea:	68a2      	ldr	r2, [r4, #8]
 800f6ec:	6923      	ldr	r3, [r4, #16]
 800f6ee:	440a      	add	r2, r1
 800f6f0:	7561      	strb	r1, [r4, #21]
 800f6f2:	440b      	add	r3, r1
 800f6f4:	60a2      	str	r2, [r4, #8]
 800f6f6:	6123      	str	r3, [r4, #16]
 800f6f8:	7da0      	ldrb	r0, [r4, #22]
 800f6fa:	f080 0001 	eor.w	r0, r0, #1
 800f6fe:	b003      	add	sp, #12
 800f700:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f704:	9a01      	ldr	r2, [sp, #4]
 800f706:	601a      	str	r2, [r3, #0]
 800f708:	e7ee      	b.n	800f6e8 <ucdr_serialize_endian_uint32_t+0xc0>
 800f70a:	68a2      	ldr	r2, [r4, #8]
 800f70c:	6923      	ldr	r3, [r4, #16]
 800f70e:	7da0      	ldrb	r0, [r4, #22]
 800f710:	1bd2      	subs	r2, r2, r7
 800f712:	1bdb      	subs	r3, r3, r7
 800f714:	f884 8015 	strb.w	r8, [r4, #21]
 800f718:	f080 0001 	eor.w	r0, r0, #1
 800f71c:	60a2      	str	r2, [r4, #8]
 800f71e:	6123      	str	r3, [r4, #16]
 800f720:	b003      	add	sp, #12
 800f722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f726:	68a3      	ldr	r3, [r4, #8]
 800f728:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f72c:	701a      	strb	r2, [r3, #0]
 800f72e:	68a3      	ldr	r3, [r4, #8]
 800f730:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f734:	701a      	strb	r2, [r3, #0]
 800f736:	68a3      	ldr	r3, [r4, #8]
 800f738:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f73c:	701a      	strb	r2, [r3, #0]
 800f73e:	e7ad      	b.n	800f69c <ucdr_serialize_endian_uint32_t+0x74>
 800f740:	ad01      	add	r5, sp, #4
 800f742:	463a      	mov	r2, r7
 800f744:	4630      	mov	r0, r6
 800f746:	4629      	mov	r1, r5
 800f748:	f00d f925 	bl	801c996 <memcpy>
 800f74c:	464a      	mov	r2, r9
 800f74e:	19e9      	adds	r1, r5, r7
 800f750:	68a0      	ldr	r0, [r4, #8]
 800f752:	f00d f920 	bl	801c996 <memcpy>
 800f756:	e7a1      	b.n	800f69c <ucdr_serialize_endian_uint32_t+0x74>

0800f758 <ucdr_deserialize_uint32_t>:
 800f758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f75c:	4604      	mov	r4, r0
 800f75e:	460d      	mov	r5, r1
 800f760:	2104      	movs	r1, #4
 800f762:	f001 f81f 	bl	80107a4 <ucdr_buffer_alignment>
 800f766:	4601      	mov	r1, r0
 800f768:	4620      	mov	r0, r4
 800f76a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f76e:	f001 f861 	bl	8010834 <ucdr_advance_buffer>
 800f772:	2104      	movs	r1, #4
 800f774:	4620      	mov	r0, r4
 800f776:	f000 ffb5 	bl	80106e4 <ucdr_check_buffer_available_for>
 800f77a:	2800      	cmp	r0, #0
 800f77c:	d138      	bne.n	800f7f0 <ucdr_deserialize_uint32_t+0x98>
 800f77e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800f782:	42b7      	cmp	r7, r6
 800f784:	d92f      	bls.n	800f7e6 <ucdr_deserialize_uint32_t+0x8e>
 800f786:	6923      	ldr	r3, [r4, #16]
 800f788:	4620      	mov	r0, r4
 800f78a:	60a7      	str	r7, [r4, #8]
 800f78c:	1bbf      	subs	r7, r7, r6
 800f78e:	443b      	add	r3, r7
 800f790:	f1c7 0904 	rsb	r9, r7, #4
 800f794:	6123      	str	r3, [r4, #16]
 800f796:	4649      	mov	r1, r9
 800f798:	f000 ffb0 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800f79c:	2800      	cmp	r0, #0
 800f79e:	d046      	beq.n	800f82e <ucdr_deserialize_uint32_t+0xd6>
 800f7a0:	7d23      	ldrb	r3, [r4, #20]
 800f7a2:	2b01      	cmp	r3, #1
 800f7a4:	d05c      	beq.n	800f860 <ucdr_deserialize_uint32_t+0x108>
 800f7a6:	78f3      	ldrb	r3, [r6, #3]
 800f7a8:	702b      	strb	r3, [r5, #0]
 800f7aa:	2f00      	cmp	r7, #0
 800f7ac:	d04c      	beq.n	800f848 <ucdr_deserialize_uint32_t+0xf0>
 800f7ae:	78b3      	ldrb	r3, [r6, #2]
 800f7b0:	2f01      	cmp	r7, #1
 800f7b2:	706b      	strb	r3, [r5, #1]
 800f7b4:	f105 0302 	add.w	r3, r5, #2
 800f7b8:	d04a      	beq.n	800f850 <ucdr_deserialize_uint32_t+0xf8>
 800f7ba:	7873      	ldrb	r3, [r6, #1]
 800f7bc:	2f02      	cmp	r7, #2
 800f7be:	70ab      	strb	r3, [r5, #2]
 800f7c0:	f105 0303 	add.w	r3, r5, #3
 800f7c4:	d048      	beq.n	800f858 <ucdr_deserialize_uint32_t+0x100>
 800f7c6:	7833      	ldrb	r3, [r6, #0]
 800f7c8:	70eb      	strb	r3, [r5, #3]
 800f7ca:	6923      	ldr	r3, [r4, #16]
 800f7cc:	2104      	movs	r1, #4
 800f7ce:	68a2      	ldr	r2, [r4, #8]
 800f7d0:	3304      	adds	r3, #4
 800f7d2:	7da0      	ldrb	r0, [r4, #22]
 800f7d4:	444a      	add	r2, r9
 800f7d6:	7561      	strb	r1, [r4, #21]
 800f7d8:	1bdb      	subs	r3, r3, r7
 800f7da:	f080 0001 	eor.w	r0, r0, #1
 800f7de:	60a2      	str	r2, [r4, #8]
 800f7e0:	6123      	str	r3, [r4, #16]
 800f7e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7e6:	2104      	movs	r1, #4
 800f7e8:	4620      	mov	r0, r4
 800f7ea:	f000 ff87 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800f7ee:	b1b0      	cbz	r0, 800f81e <ucdr_deserialize_uint32_t+0xc6>
 800f7f0:	7d23      	ldrb	r3, [r4, #20]
 800f7f2:	2b01      	cmp	r3, #1
 800f7f4:	68a3      	ldr	r3, [r4, #8]
 800f7f6:	d017      	beq.n	800f828 <ucdr_deserialize_uint32_t+0xd0>
 800f7f8:	78db      	ldrb	r3, [r3, #3]
 800f7fa:	702b      	strb	r3, [r5, #0]
 800f7fc:	68a3      	ldr	r3, [r4, #8]
 800f7fe:	789b      	ldrb	r3, [r3, #2]
 800f800:	706b      	strb	r3, [r5, #1]
 800f802:	68a3      	ldr	r3, [r4, #8]
 800f804:	785b      	ldrb	r3, [r3, #1]
 800f806:	70ab      	strb	r3, [r5, #2]
 800f808:	68a3      	ldr	r3, [r4, #8]
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	70eb      	strb	r3, [r5, #3]
 800f80e:	2104      	movs	r1, #4
 800f810:	68a2      	ldr	r2, [r4, #8]
 800f812:	6923      	ldr	r3, [r4, #16]
 800f814:	440a      	add	r2, r1
 800f816:	7561      	strb	r1, [r4, #21]
 800f818:	440b      	add	r3, r1
 800f81a:	60a2      	str	r2, [r4, #8]
 800f81c:	6123      	str	r3, [r4, #16]
 800f81e:	7da0      	ldrb	r0, [r4, #22]
 800f820:	f080 0001 	eor.w	r0, r0, #1
 800f824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	602b      	str	r3, [r5, #0]
 800f82c:	e7ef      	b.n	800f80e <ucdr_deserialize_uint32_t+0xb6>
 800f82e:	68a2      	ldr	r2, [r4, #8]
 800f830:	6923      	ldr	r3, [r4, #16]
 800f832:	1bd2      	subs	r2, r2, r7
 800f834:	7da0      	ldrb	r0, [r4, #22]
 800f836:	1bdb      	subs	r3, r3, r7
 800f838:	f884 8015 	strb.w	r8, [r4, #21]
 800f83c:	f080 0001 	eor.w	r0, r0, #1
 800f840:	60a2      	str	r2, [r4, #8]
 800f842:	6123      	str	r3, [r4, #16]
 800f844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f848:	68a3      	ldr	r3, [r4, #8]
 800f84a:	789b      	ldrb	r3, [r3, #2]
 800f84c:	706b      	strb	r3, [r5, #1]
 800f84e:	1cab      	adds	r3, r5, #2
 800f850:	68a2      	ldr	r2, [r4, #8]
 800f852:	7852      	ldrb	r2, [r2, #1]
 800f854:	f803 2b01 	strb.w	r2, [r3], #1
 800f858:	68a2      	ldr	r2, [r4, #8]
 800f85a:	7812      	ldrb	r2, [r2, #0]
 800f85c:	701a      	strb	r2, [r3, #0]
 800f85e:	e7b4      	b.n	800f7ca <ucdr_deserialize_uint32_t+0x72>
 800f860:	4631      	mov	r1, r6
 800f862:	463a      	mov	r2, r7
 800f864:	4628      	mov	r0, r5
 800f866:	f00d f896 	bl	801c996 <memcpy>
 800f86a:	464a      	mov	r2, r9
 800f86c:	19e8      	adds	r0, r5, r7
 800f86e:	68a1      	ldr	r1, [r4, #8]
 800f870:	f00d f891 	bl	801c996 <memcpy>
 800f874:	e7a9      	b.n	800f7ca <ucdr_deserialize_uint32_t+0x72>
 800f876:	bf00      	nop

0800f878 <ucdr_deserialize_endian_uint32_t>:
 800f878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f87c:	4604      	mov	r4, r0
 800f87e:	460e      	mov	r6, r1
 800f880:	2104      	movs	r1, #4
 800f882:	4615      	mov	r5, r2
 800f884:	f000 ff8e 	bl	80107a4 <ucdr_buffer_alignment>
 800f888:	4601      	mov	r1, r0
 800f88a:	4620      	mov	r0, r4
 800f88c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f890:	f000 ffd0 	bl	8010834 <ucdr_advance_buffer>
 800f894:	2104      	movs	r1, #4
 800f896:	4620      	mov	r0, r4
 800f898:	f000 ff24 	bl	80106e4 <ucdr_check_buffer_available_for>
 800f89c:	2800      	cmp	r0, #0
 800f89e:	d13c      	bne.n	800f91a <ucdr_deserialize_endian_uint32_t+0xa2>
 800f8a0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800f8a4:	42bb      	cmp	r3, r7
 800f8a6:	d933      	bls.n	800f910 <ucdr_deserialize_endian_uint32_t+0x98>
 800f8a8:	eba3 0907 	sub.w	r9, r3, r7
 800f8ac:	60a3      	str	r3, [r4, #8]
 800f8ae:	6923      	ldr	r3, [r4, #16]
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	f1c9 0a04 	rsb	sl, r9, #4
 800f8b6:	444b      	add	r3, r9
 800f8b8:	4651      	mov	r1, sl
 800f8ba:	6123      	str	r3, [r4, #16]
 800f8bc:	f000 ff1e 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800f8c0:	2800      	cmp	r0, #0
 800f8c2:	d048      	beq.n	800f956 <ucdr_deserialize_endian_uint32_t+0xde>
 800f8c4:	2e01      	cmp	r6, #1
 800f8c6:	d061      	beq.n	800f98c <ucdr_deserialize_endian_uint32_t+0x114>
 800f8c8:	78fb      	ldrb	r3, [r7, #3]
 800f8ca:	702b      	strb	r3, [r5, #0]
 800f8cc:	f1b9 0f00 	cmp.w	r9, #0
 800f8d0:	d050      	beq.n	800f974 <ucdr_deserialize_endian_uint32_t+0xfc>
 800f8d2:	78bb      	ldrb	r3, [r7, #2]
 800f8d4:	f1b9 0f01 	cmp.w	r9, #1
 800f8d8:	706b      	strb	r3, [r5, #1]
 800f8da:	f105 0302 	add.w	r3, r5, #2
 800f8de:	d04d      	beq.n	800f97c <ucdr_deserialize_endian_uint32_t+0x104>
 800f8e0:	787b      	ldrb	r3, [r7, #1]
 800f8e2:	f1b9 0f02 	cmp.w	r9, #2
 800f8e6:	70ab      	strb	r3, [r5, #2]
 800f8e8:	f105 0303 	add.w	r3, r5, #3
 800f8ec:	d04a      	beq.n	800f984 <ucdr_deserialize_endian_uint32_t+0x10c>
 800f8ee:	783b      	ldrb	r3, [r7, #0]
 800f8f0:	70eb      	strb	r3, [r5, #3]
 800f8f2:	6923      	ldr	r3, [r4, #16]
 800f8f4:	2104      	movs	r1, #4
 800f8f6:	68a2      	ldr	r2, [r4, #8]
 800f8f8:	3304      	adds	r3, #4
 800f8fa:	7da0      	ldrb	r0, [r4, #22]
 800f8fc:	4452      	add	r2, sl
 800f8fe:	7561      	strb	r1, [r4, #21]
 800f900:	eba3 0309 	sub.w	r3, r3, r9
 800f904:	f080 0001 	eor.w	r0, r0, #1
 800f908:	60a2      	str	r2, [r4, #8]
 800f90a:	6123      	str	r3, [r4, #16]
 800f90c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f910:	2104      	movs	r1, #4
 800f912:	4620      	mov	r0, r4
 800f914:	f000 fef2 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800f918:	b1a8      	cbz	r0, 800f946 <ucdr_deserialize_endian_uint32_t+0xce>
 800f91a:	2e01      	cmp	r6, #1
 800f91c:	68a3      	ldr	r3, [r4, #8]
 800f91e:	d017      	beq.n	800f950 <ucdr_deserialize_endian_uint32_t+0xd8>
 800f920:	78db      	ldrb	r3, [r3, #3]
 800f922:	702b      	strb	r3, [r5, #0]
 800f924:	68a3      	ldr	r3, [r4, #8]
 800f926:	789b      	ldrb	r3, [r3, #2]
 800f928:	706b      	strb	r3, [r5, #1]
 800f92a:	68a3      	ldr	r3, [r4, #8]
 800f92c:	785b      	ldrb	r3, [r3, #1]
 800f92e:	70ab      	strb	r3, [r5, #2]
 800f930:	68a3      	ldr	r3, [r4, #8]
 800f932:	781b      	ldrb	r3, [r3, #0]
 800f934:	70eb      	strb	r3, [r5, #3]
 800f936:	2104      	movs	r1, #4
 800f938:	68a2      	ldr	r2, [r4, #8]
 800f93a:	6923      	ldr	r3, [r4, #16]
 800f93c:	440a      	add	r2, r1
 800f93e:	7561      	strb	r1, [r4, #21]
 800f940:	440b      	add	r3, r1
 800f942:	60a2      	str	r2, [r4, #8]
 800f944:	6123      	str	r3, [r4, #16]
 800f946:	7da0      	ldrb	r0, [r4, #22]
 800f948:	f080 0001 	eor.w	r0, r0, #1
 800f94c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	602b      	str	r3, [r5, #0]
 800f954:	e7ef      	b.n	800f936 <ucdr_deserialize_endian_uint32_t+0xbe>
 800f956:	68a2      	ldr	r2, [r4, #8]
 800f958:	6923      	ldr	r3, [r4, #16]
 800f95a:	eba2 0209 	sub.w	r2, r2, r9
 800f95e:	7da0      	ldrb	r0, [r4, #22]
 800f960:	eba3 0309 	sub.w	r3, r3, r9
 800f964:	f884 8015 	strb.w	r8, [r4, #21]
 800f968:	f080 0001 	eor.w	r0, r0, #1
 800f96c:	60a2      	str	r2, [r4, #8]
 800f96e:	6123      	str	r3, [r4, #16]
 800f970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f974:	68a3      	ldr	r3, [r4, #8]
 800f976:	789b      	ldrb	r3, [r3, #2]
 800f978:	706b      	strb	r3, [r5, #1]
 800f97a:	1cab      	adds	r3, r5, #2
 800f97c:	68a2      	ldr	r2, [r4, #8]
 800f97e:	7852      	ldrb	r2, [r2, #1]
 800f980:	f803 2b01 	strb.w	r2, [r3], #1
 800f984:	68a2      	ldr	r2, [r4, #8]
 800f986:	7812      	ldrb	r2, [r2, #0]
 800f988:	701a      	strb	r2, [r3, #0]
 800f98a:	e7b2      	b.n	800f8f2 <ucdr_deserialize_endian_uint32_t+0x7a>
 800f98c:	4639      	mov	r1, r7
 800f98e:	464a      	mov	r2, r9
 800f990:	4628      	mov	r0, r5
 800f992:	f00d f800 	bl	801c996 <memcpy>
 800f996:	4652      	mov	r2, sl
 800f998:	eb05 0009 	add.w	r0, r5, r9
 800f99c:	68a1      	ldr	r1, [r4, #8]
 800f99e:	f00c fffa 	bl	801c996 <memcpy>
 800f9a2:	e7a6      	b.n	800f8f2 <ucdr_deserialize_endian_uint32_t+0x7a>

0800f9a4 <ucdr_serialize_uint64_t>:
 800f9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9a8:	4604      	mov	r4, r0
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	2108      	movs	r1, #8
 800f9ae:	e9cd 2300 	strd	r2, r3, [sp]
 800f9b2:	f000 fef7 	bl	80107a4 <ucdr_buffer_alignment>
 800f9b6:	4601      	mov	r1, r0
 800f9b8:	4620      	mov	r0, r4
 800f9ba:	7d67      	ldrb	r7, [r4, #21]
 800f9bc:	f000 ff3a 	bl	8010834 <ucdr_advance_buffer>
 800f9c0:	2108      	movs	r1, #8
 800f9c2:	4620      	mov	r0, r4
 800f9c4:	f000 fe8e 	bl	80106e4 <ucdr_check_buffer_available_for>
 800f9c8:	2800      	cmp	r0, #0
 800f9ca:	d14e      	bne.n	800fa6a <ucdr_serialize_uint64_t+0xc6>
 800f9cc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f9d0:	42ab      	cmp	r3, r5
 800f9d2:	d945      	bls.n	800fa60 <ucdr_serialize_uint64_t+0xbc>
 800f9d4:	1b5e      	subs	r6, r3, r5
 800f9d6:	60a3      	str	r3, [r4, #8]
 800f9d8:	6923      	ldr	r3, [r4, #16]
 800f9da:	4620      	mov	r0, r4
 800f9dc:	f1c6 0808 	rsb	r8, r6, #8
 800f9e0:	4433      	add	r3, r6
 800f9e2:	4641      	mov	r1, r8
 800f9e4:	6123      	str	r3, [r4, #16]
 800f9e6:	f000 fe89 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800f9ea:	2800      	cmp	r0, #0
 800f9ec:	d074      	beq.n	800fad8 <ucdr_serialize_uint64_t+0x134>
 800f9ee:	7d23      	ldrb	r3, [r4, #20]
 800f9f0:	2b01      	cmp	r3, #1
 800f9f2:	f000 809b 	beq.w	800fb2c <ucdr_serialize_uint64_t+0x188>
 800f9f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f9fa:	702b      	strb	r3, [r5, #0]
 800f9fc:	2e00      	cmp	r6, #0
 800f9fe:	d078      	beq.n	800faf2 <ucdr_serialize_uint64_t+0x14e>
 800fa00:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fa04:	2e01      	cmp	r6, #1
 800fa06:	706b      	strb	r3, [r5, #1]
 800fa08:	d077      	beq.n	800fafa <ucdr_serialize_uint64_t+0x156>
 800fa0a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fa0e:	2e02      	cmp	r6, #2
 800fa10:	70ab      	strb	r3, [r5, #2]
 800fa12:	d076      	beq.n	800fb02 <ucdr_serialize_uint64_t+0x15e>
 800fa14:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fa18:	2e03      	cmp	r6, #3
 800fa1a:	70eb      	strb	r3, [r5, #3]
 800fa1c:	d075      	beq.n	800fb0a <ucdr_serialize_uint64_t+0x166>
 800fa1e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800fa22:	2e04      	cmp	r6, #4
 800fa24:	712b      	strb	r3, [r5, #4]
 800fa26:	d074      	beq.n	800fb12 <ucdr_serialize_uint64_t+0x16e>
 800fa28:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800fa2c:	2e05      	cmp	r6, #5
 800fa2e:	716b      	strb	r3, [r5, #5]
 800fa30:	d073      	beq.n	800fb1a <ucdr_serialize_uint64_t+0x176>
 800fa32:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800fa36:	2e06      	cmp	r6, #6
 800fa38:	71ab      	strb	r3, [r5, #6]
 800fa3a:	d072      	beq.n	800fb22 <ucdr_serialize_uint64_t+0x17e>
 800fa3c:	f89d 3000 	ldrb.w	r3, [sp]
 800fa40:	71eb      	strb	r3, [r5, #7]
 800fa42:	6923      	ldr	r3, [r4, #16]
 800fa44:	2108      	movs	r1, #8
 800fa46:	68a2      	ldr	r2, [r4, #8]
 800fa48:	3308      	adds	r3, #8
 800fa4a:	7da0      	ldrb	r0, [r4, #22]
 800fa4c:	4442      	add	r2, r8
 800fa4e:	7561      	strb	r1, [r4, #21]
 800fa50:	1b9e      	subs	r6, r3, r6
 800fa52:	f080 0001 	eor.w	r0, r0, #1
 800fa56:	60a2      	str	r2, [r4, #8]
 800fa58:	6126      	str	r6, [r4, #16]
 800fa5a:	b002      	add	sp, #8
 800fa5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa60:	2108      	movs	r1, #8
 800fa62:	4620      	mov	r0, r4
 800fa64:	f000 fe4a 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800fa68:	b350      	cbz	r0, 800fac0 <ucdr_serialize_uint64_t+0x11c>
 800fa6a:	7d23      	ldrb	r3, [r4, #20]
 800fa6c:	2b01      	cmp	r3, #1
 800fa6e:	d02d      	beq.n	800facc <ucdr_serialize_uint64_t+0x128>
 800fa70:	68a3      	ldr	r3, [r4, #8]
 800fa72:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800fa76:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fa7a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800fa7e:	7018      	strb	r0, [r3, #0]
 800fa80:	68a3      	ldr	r3, [r4, #8]
 800fa82:	705a      	strb	r2, [r3, #1]
 800fa84:	68a3      	ldr	r3, [r4, #8]
 800fa86:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fa8a:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800fa8e:	7099      	strb	r1, [r3, #2]
 800fa90:	68a3      	ldr	r3, [r4, #8]
 800fa92:	70da      	strb	r2, [r3, #3]
 800fa94:	68a3      	ldr	r3, [r4, #8]
 800fa96:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fa9a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800fa9e:	7118      	strb	r0, [r3, #4]
 800faa0:	68a3      	ldr	r3, [r4, #8]
 800faa2:	715a      	strb	r2, [r3, #5]
 800faa4:	68a3      	ldr	r3, [r4, #8]
 800faa6:	f89d 2000 	ldrb.w	r2, [sp]
 800faaa:	7199      	strb	r1, [r3, #6]
 800faac:	68a3      	ldr	r3, [r4, #8]
 800faae:	71da      	strb	r2, [r3, #7]
 800fab0:	2108      	movs	r1, #8
 800fab2:	68a2      	ldr	r2, [r4, #8]
 800fab4:	6923      	ldr	r3, [r4, #16]
 800fab6:	440a      	add	r2, r1
 800fab8:	7561      	strb	r1, [r4, #21]
 800faba:	440b      	add	r3, r1
 800fabc:	60a2      	str	r2, [r4, #8]
 800fabe:	6123      	str	r3, [r4, #16]
 800fac0:	7da0      	ldrb	r0, [r4, #22]
 800fac2:	f080 0001 	eor.w	r0, r0, #1
 800fac6:	b002      	add	sp, #8
 800fac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800facc:	466b      	mov	r3, sp
 800face:	68a2      	ldr	r2, [r4, #8]
 800fad0:	cb03      	ldmia	r3!, {r0, r1}
 800fad2:	6010      	str	r0, [r2, #0]
 800fad4:	6051      	str	r1, [r2, #4]
 800fad6:	e7eb      	b.n	800fab0 <ucdr_serialize_uint64_t+0x10c>
 800fad8:	68a2      	ldr	r2, [r4, #8]
 800fada:	6923      	ldr	r3, [r4, #16]
 800fadc:	7da0      	ldrb	r0, [r4, #22]
 800fade:	1b92      	subs	r2, r2, r6
 800fae0:	1b9b      	subs	r3, r3, r6
 800fae2:	7567      	strb	r7, [r4, #21]
 800fae4:	f080 0001 	eor.w	r0, r0, #1
 800fae8:	60a2      	str	r2, [r4, #8]
 800faea:	6123      	str	r3, [r4, #16]
 800faec:	b002      	add	sp, #8
 800faee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800faf2:	68a3      	ldr	r3, [r4, #8]
 800faf4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800faf8:	701a      	strb	r2, [r3, #0]
 800fafa:	68a3      	ldr	r3, [r4, #8]
 800fafc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fb00:	701a      	strb	r2, [r3, #0]
 800fb02:	68a3      	ldr	r3, [r4, #8]
 800fb04:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fb08:	701a      	strb	r2, [r3, #0]
 800fb0a:	68a3      	ldr	r3, [r4, #8]
 800fb0c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800fb10:	701a      	strb	r2, [r3, #0]
 800fb12:	68a3      	ldr	r3, [r4, #8]
 800fb14:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800fb18:	701a      	strb	r2, [r3, #0]
 800fb1a:	68a3      	ldr	r3, [r4, #8]
 800fb1c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800fb20:	701a      	strb	r2, [r3, #0]
 800fb22:	68a3      	ldr	r3, [r4, #8]
 800fb24:	f89d 2000 	ldrb.w	r2, [sp]
 800fb28:	701a      	strb	r2, [r3, #0]
 800fb2a:	e78a      	b.n	800fa42 <ucdr_serialize_uint64_t+0x9e>
 800fb2c:	4628      	mov	r0, r5
 800fb2e:	466d      	mov	r5, sp
 800fb30:	4632      	mov	r2, r6
 800fb32:	4629      	mov	r1, r5
 800fb34:	f00c ff2f 	bl	801c996 <memcpy>
 800fb38:	4642      	mov	r2, r8
 800fb3a:	19a9      	adds	r1, r5, r6
 800fb3c:	68a0      	ldr	r0, [r4, #8]
 800fb3e:	f00c ff2a 	bl	801c996 <memcpy>
 800fb42:	e77e      	b.n	800fa42 <ucdr_serialize_uint64_t+0x9e>

0800fb44 <ucdr_serialize_int16_t>:
 800fb44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb48:	460b      	mov	r3, r1
 800fb4a:	b082      	sub	sp, #8
 800fb4c:	4604      	mov	r4, r0
 800fb4e:	2102      	movs	r1, #2
 800fb50:	f8ad 3006 	strh.w	r3, [sp, #6]
 800fb54:	f000 fe26 	bl	80107a4 <ucdr_buffer_alignment>
 800fb58:	4601      	mov	r1, r0
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	7d67      	ldrb	r7, [r4, #21]
 800fb5e:	f000 fe69 	bl	8010834 <ucdr_advance_buffer>
 800fb62:	2102      	movs	r1, #2
 800fb64:	4620      	mov	r0, r4
 800fb66:	f000 fdbd 	bl	80106e4 <ucdr_check_buffer_available_for>
 800fb6a:	bb78      	cbnz	r0, 800fbcc <ucdr_serialize_int16_t+0x88>
 800fb6c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fb70:	42ab      	cmp	r3, r5
 800fb72:	d926      	bls.n	800fbc2 <ucdr_serialize_int16_t+0x7e>
 800fb74:	1b5e      	subs	r6, r3, r5
 800fb76:	60a3      	str	r3, [r4, #8]
 800fb78:	6923      	ldr	r3, [r4, #16]
 800fb7a:	4620      	mov	r0, r4
 800fb7c:	f1c6 0802 	rsb	r8, r6, #2
 800fb80:	4433      	add	r3, r6
 800fb82:	4641      	mov	r1, r8
 800fb84:	6123      	str	r3, [r4, #16]
 800fb86:	f000 fdb9 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800fb8a:	2800      	cmp	r0, #0
 800fb8c:	d03b      	beq.n	800fc06 <ucdr_serialize_int16_t+0xc2>
 800fb8e:	7d23      	ldrb	r3, [r4, #20]
 800fb90:	2b01      	cmp	r3, #1
 800fb92:	d04a      	beq.n	800fc2a <ucdr_serialize_int16_t+0xe6>
 800fb94:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fb98:	702b      	strb	r3, [r5, #0]
 800fb9a:	2e00      	cmp	r6, #0
 800fb9c:	d040      	beq.n	800fc20 <ucdr_serialize_int16_t+0xdc>
 800fb9e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fba2:	706b      	strb	r3, [r5, #1]
 800fba4:	6923      	ldr	r3, [r4, #16]
 800fba6:	2102      	movs	r1, #2
 800fba8:	68a2      	ldr	r2, [r4, #8]
 800fbaa:	3302      	adds	r3, #2
 800fbac:	7da0      	ldrb	r0, [r4, #22]
 800fbae:	4442      	add	r2, r8
 800fbb0:	7561      	strb	r1, [r4, #21]
 800fbb2:	1b9e      	subs	r6, r3, r6
 800fbb4:	f080 0001 	eor.w	r0, r0, #1
 800fbb8:	60a2      	str	r2, [r4, #8]
 800fbba:	6126      	str	r6, [r4, #16]
 800fbbc:	b002      	add	sp, #8
 800fbbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbc2:	2102      	movs	r1, #2
 800fbc4:	4620      	mov	r0, r4
 800fbc6:	f000 fd99 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800fbca:	b190      	cbz	r0, 800fbf2 <ucdr_serialize_int16_t+0xae>
 800fbcc:	7d23      	ldrb	r3, [r4, #20]
 800fbce:	2b01      	cmp	r3, #1
 800fbd0:	68a3      	ldr	r3, [r4, #8]
 800fbd2:	d014      	beq.n	800fbfe <ucdr_serialize_int16_t+0xba>
 800fbd4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fbd8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fbdc:	7019      	strb	r1, [r3, #0]
 800fbde:	68a3      	ldr	r3, [r4, #8]
 800fbe0:	705a      	strb	r2, [r3, #1]
 800fbe2:	2102      	movs	r1, #2
 800fbe4:	68a2      	ldr	r2, [r4, #8]
 800fbe6:	6923      	ldr	r3, [r4, #16]
 800fbe8:	440a      	add	r2, r1
 800fbea:	7561      	strb	r1, [r4, #21]
 800fbec:	440b      	add	r3, r1
 800fbee:	60a2      	str	r2, [r4, #8]
 800fbf0:	6123      	str	r3, [r4, #16]
 800fbf2:	7da0      	ldrb	r0, [r4, #22]
 800fbf4:	f080 0001 	eor.w	r0, r0, #1
 800fbf8:	b002      	add	sp, #8
 800fbfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbfe:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fc02:	801a      	strh	r2, [r3, #0]
 800fc04:	e7ed      	b.n	800fbe2 <ucdr_serialize_int16_t+0x9e>
 800fc06:	68a2      	ldr	r2, [r4, #8]
 800fc08:	6923      	ldr	r3, [r4, #16]
 800fc0a:	7da0      	ldrb	r0, [r4, #22]
 800fc0c:	1b92      	subs	r2, r2, r6
 800fc0e:	1b9b      	subs	r3, r3, r6
 800fc10:	7567      	strb	r7, [r4, #21]
 800fc12:	f080 0001 	eor.w	r0, r0, #1
 800fc16:	60a2      	str	r2, [r4, #8]
 800fc18:	6123      	str	r3, [r4, #16]
 800fc1a:	b002      	add	sp, #8
 800fc1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc20:	68a3      	ldr	r3, [r4, #8]
 800fc22:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fc26:	701a      	strb	r2, [r3, #0]
 800fc28:	e7bc      	b.n	800fba4 <ucdr_serialize_int16_t+0x60>
 800fc2a:	4628      	mov	r0, r5
 800fc2c:	f10d 0506 	add.w	r5, sp, #6
 800fc30:	4632      	mov	r2, r6
 800fc32:	4629      	mov	r1, r5
 800fc34:	f00c feaf 	bl	801c996 <memcpy>
 800fc38:	4642      	mov	r2, r8
 800fc3a:	19a9      	adds	r1, r5, r6
 800fc3c:	68a0      	ldr	r0, [r4, #8]
 800fc3e:	f00c feaa 	bl	801c996 <memcpy>
 800fc42:	e7af      	b.n	800fba4 <ucdr_serialize_int16_t+0x60>

0800fc44 <ucdr_serialize_endian_int16_t>:
 800fc44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fc48:	4604      	mov	r4, r0
 800fc4a:	b083      	sub	sp, #12
 800fc4c:	460d      	mov	r5, r1
 800fc4e:	2102      	movs	r1, #2
 800fc50:	f8ad 2006 	strh.w	r2, [sp, #6]
 800fc54:	f000 fda6 	bl	80107a4 <ucdr_buffer_alignment>
 800fc58:	4601      	mov	r1, r0
 800fc5a:	4620      	mov	r0, r4
 800fc5c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fc60:	f000 fde8 	bl	8010834 <ucdr_advance_buffer>
 800fc64:	2102      	movs	r1, #2
 800fc66:	4620      	mov	r0, r4
 800fc68:	f000 fd3c 	bl	80106e4 <ucdr_check_buffer_available_for>
 800fc6c:	bb70      	cbnz	r0, 800fccc <ucdr_serialize_endian_int16_t+0x88>
 800fc6e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800fc72:	42be      	cmp	r6, r7
 800fc74:	d925      	bls.n	800fcc2 <ucdr_serialize_endian_int16_t+0x7e>
 800fc76:	6923      	ldr	r3, [r4, #16]
 800fc78:	4620      	mov	r0, r4
 800fc7a:	60a6      	str	r6, [r4, #8]
 800fc7c:	1bf6      	subs	r6, r6, r7
 800fc7e:	4433      	add	r3, r6
 800fc80:	f1c6 0902 	rsb	r9, r6, #2
 800fc84:	6123      	str	r3, [r4, #16]
 800fc86:	4649      	mov	r1, r9
 800fc88:	f000 fd38 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800fc8c:	2800      	cmp	r0, #0
 800fc8e:	d039      	beq.n	800fd04 <ucdr_serialize_endian_int16_t+0xc0>
 800fc90:	2d01      	cmp	r5, #1
 800fc92:	d04a      	beq.n	800fd2a <ucdr_serialize_endian_int16_t+0xe6>
 800fc94:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fc98:	703b      	strb	r3, [r7, #0]
 800fc9a:	2e00      	cmp	r6, #0
 800fc9c:	d040      	beq.n	800fd20 <ucdr_serialize_endian_int16_t+0xdc>
 800fc9e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fca2:	707b      	strb	r3, [r7, #1]
 800fca4:	6923      	ldr	r3, [r4, #16]
 800fca6:	2102      	movs	r1, #2
 800fca8:	68a2      	ldr	r2, [r4, #8]
 800fcaa:	7da0      	ldrb	r0, [r4, #22]
 800fcac:	3302      	adds	r3, #2
 800fcae:	444a      	add	r2, r9
 800fcb0:	7561      	strb	r1, [r4, #21]
 800fcb2:	1b9b      	subs	r3, r3, r6
 800fcb4:	f080 0001 	eor.w	r0, r0, #1
 800fcb8:	60a2      	str	r2, [r4, #8]
 800fcba:	6123      	str	r3, [r4, #16]
 800fcbc:	b003      	add	sp, #12
 800fcbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcc2:	2102      	movs	r1, #2
 800fcc4:	4620      	mov	r0, r4
 800fcc6:	f000 fd19 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800fcca:	b188      	cbz	r0, 800fcf0 <ucdr_serialize_endian_int16_t+0xac>
 800fccc:	2d01      	cmp	r5, #1
 800fcce:	68a3      	ldr	r3, [r4, #8]
 800fcd0:	d014      	beq.n	800fcfc <ucdr_serialize_endian_int16_t+0xb8>
 800fcd2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800fcd6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fcda:	7019      	strb	r1, [r3, #0]
 800fcdc:	68a3      	ldr	r3, [r4, #8]
 800fcde:	705a      	strb	r2, [r3, #1]
 800fce0:	2102      	movs	r1, #2
 800fce2:	68a2      	ldr	r2, [r4, #8]
 800fce4:	6923      	ldr	r3, [r4, #16]
 800fce6:	440a      	add	r2, r1
 800fce8:	7561      	strb	r1, [r4, #21]
 800fcea:	440b      	add	r3, r1
 800fcec:	60a2      	str	r2, [r4, #8]
 800fcee:	6123      	str	r3, [r4, #16]
 800fcf0:	7da0      	ldrb	r0, [r4, #22]
 800fcf2:	f080 0001 	eor.w	r0, r0, #1
 800fcf6:	b003      	add	sp, #12
 800fcf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcfc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fd00:	801a      	strh	r2, [r3, #0]
 800fd02:	e7ed      	b.n	800fce0 <ucdr_serialize_endian_int16_t+0x9c>
 800fd04:	68a2      	ldr	r2, [r4, #8]
 800fd06:	6923      	ldr	r3, [r4, #16]
 800fd08:	7da0      	ldrb	r0, [r4, #22]
 800fd0a:	1b92      	subs	r2, r2, r6
 800fd0c:	1b9b      	subs	r3, r3, r6
 800fd0e:	f884 8015 	strb.w	r8, [r4, #21]
 800fd12:	f080 0001 	eor.w	r0, r0, #1
 800fd16:	60a2      	str	r2, [r4, #8]
 800fd18:	6123      	str	r3, [r4, #16]
 800fd1a:	b003      	add	sp, #12
 800fd1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd20:	68a3      	ldr	r3, [r4, #8]
 800fd22:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fd26:	701a      	strb	r2, [r3, #0]
 800fd28:	e7bc      	b.n	800fca4 <ucdr_serialize_endian_int16_t+0x60>
 800fd2a:	f10d 0506 	add.w	r5, sp, #6
 800fd2e:	4632      	mov	r2, r6
 800fd30:	4638      	mov	r0, r7
 800fd32:	4629      	mov	r1, r5
 800fd34:	f00c fe2f 	bl	801c996 <memcpy>
 800fd38:	464a      	mov	r2, r9
 800fd3a:	19a9      	adds	r1, r5, r6
 800fd3c:	68a0      	ldr	r0, [r4, #8]
 800fd3e:	f00c fe2a 	bl	801c996 <memcpy>
 800fd42:	e7af      	b.n	800fca4 <ucdr_serialize_endian_int16_t+0x60>

0800fd44 <ucdr_deserialize_int16_t>:
 800fd44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd48:	4604      	mov	r4, r0
 800fd4a:	460d      	mov	r5, r1
 800fd4c:	2102      	movs	r1, #2
 800fd4e:	f000 fd29 	bl	80107a4 <ucdr_buffer_alignment>
 800fd52:	4601      	mov	r1, r0
 800fd54:	4620      	mov	r0, r4
 800fd56:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fd5a:	f000 fd6b 	bl	8010834 <ucdr_advance_buffer>
 800fd5e:	2102      	movs	r1, #2
 800fd60:	4620      	mov	r0, r4
 800fd62:	f000 fcbf 	bl	80106e4 <ucdr_check_buffer_available_for>
 800fd66:	bb60      	cbnz	r0, 800fdc2 <ucdr_deserialize_int16_t+0x7e>
 800fd68:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800fd6c:	42be      	cmp	r6, r7
 800fd6e:	d923      	bls.n	800fdb8 <ucdr_deserialize_int16_t+0x74>
 800fd70:	6923      	ldr	r3, [r4, #16]
 800fd72:	4620      	mov	r0, r4
 800fd74:	60a6      	str	r6, [r4, #8]
 800fd76:	1bf6      	subs	r6, r6, r7
 800fd78:	4433      	add	r3, r6
 800fd7a:	f1c6 0902 	rsb	r9, r6, #2
 800fd7e:	6123      	str	r3, [r4, #16]
 800fd80:	4649      	mov	r1, r9
 800fd82:	f000 fcbb 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800fd86:	2800      	cmp	r0, #0
 800fd88:	d034      	beq.n	800fdf4 <ucdr_deserialize_int16_t+0xb0>
 800fd8a:	7d23      	ldrb	r3, [r4, #20]
 800fd8c:	2b01      	cmp	r3, #1
 800fd8e:	d042      	beq.n	800fe16 <ucdr_deserialize_int16_t+0xd2>
 800fd90:	787b      	ldrb	r3, [r7, #1]
 800fd92:	702b      	strb	r3, [r5, #0]
 800fd94:	2e00      	cmp	r6, #0
 800fd96:	d03a      	beq.n	800fe0e <ucdr_deserialize_int16_t+0xca>
 800fd98:	783b      	ldrb	r3, [r7, #0]
 800fd9a:	706b      	strb	r3, [r5, #1]
 800fd9c:	6923      	ldr	r3, [r4, #16]
 800fd9e:	2102      	movs	r1, #2
 800fda0:	68a2      	ldr	r2, [r4, #8]
 800fda2:	3302      	adds	r3, #2
 800fda4:	7da0      	ldrb	r0, [r4, #22]
 800fda6:	444a      	add	r2, r9
 800fda8:	7561      	strb	r1, [r4, #21]
 800fdaa:	1b9b      	subs	r3, r3, r6
 800fdac:	f080 0001 	eor.w	r0, r0, #1
 800fdb0:	60a2      	str	r2, [r4, #8]
 800fdb2:	6123      	str	r3, [r4, #16]
 800fdb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdb8:	2102      	movs	r1, #2
 800fdba:	4620      	mov	r0, r4
 800fdbc:	f000 fc9e 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800fdc0:	b180      	cbz	r0, 800fde4 <ucdr_deserialize_int16_t+0xa0>
 800fdc2:	7d23      	ldrb	r3, [r4, #20]
 800fdc4:	2b01      	cmp	r3, #1
 800fdc6:	68a3      	ldr	r3, [r4, #8]
 800fdc8:	d011      	beq.n	800fdee <ucdr_deserialize_int16_t+0xaa>
 800fdca:	785b      	ldrb	r3, [r3, #1]
 800fdcc:	702b      	strb	r3, [r5, #0]
 800fdce:	68a3      	ldr	r3, [r4, #8]
 800fdd0:	781b      	ldrb	r3, [r3, #0]
 800fdd2:	706b      	strb	r3, [r5, #1]
 800fdd4:	2102      	movs	r1, #2
 800fdd6:	68a2      	ldr	r2, [r4, #8]
 800fdd8:	6923      	ldr	r3, [r4, #16]
 800fdda:	440a      	add	r2, r1
 800fddc:	7561      	strb	r1, [r4, #21]
 800fdde:	440b      	add	r3, r1
 800fde0:	60a2      	str	r2, [r4, #8]
 800fde2:	6123      	str	r3, [r4, #16]
 800fde4:	7da0      	ldrb	r0, [r4, #22]
 800fde6:	f080 0001 	eor.w	r0, r0, #1
 800fdea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdee:	881b      	ldrh	r3, [r3, #0]
 800fdf0:	802b      	strh	r3, [r5, #0]
 800fdf2:	e7ef      	b.n	800fdd4 <ucdr_deserialize_int16_t+0x90>
 800fdf4:	68a2      	ldr	r2, [r4, #8]
 800fdf6:	6923      	ldr	r3, [r4, #16]
 800fdf8:	1b92      	subs	r2, r2, r6
 800fdfa:	7da0      	ldrb	r0, [r4, #22]
 800fdfc:	1b9b      	subs	r3, r3, r6
 800fdfe:	f884 8015 	strb.w	r8, [r4, #21]
 800fe02:	f080 0001 	eor.w	r0, r0, #1
 800fe06:	60a2      	str	r2, [r4, #8]
 800fe08:	6123      	str	r3, [r4, #16]
 800fe0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe0e:	68a3      	ldr	r3, [r4, #8]
 800fe10:	781b      	ldrb	r3, [r3, #0]
 800fe12:	706b      	strb	r3, [r5, #1]
 800fe14:	e7c2      	b.n	800fd9c <ucdr_deserialize_int16_t+0x58>
 800fe16:	4639      	mov	r1, r7
 800fe18:	4632      	mov	r2, r6
 800fe1a:	4628      	mov	r0, r5
 800fe1c:	f00c fdbb 	bl	801c996 <memcpy>
 800fe20:	464a      	mov	r2, r9
 800fe22:	19a8      	adds	r0, r5, r6
 800fe24:	68a1      	ldr	r1, [r4, #8]
 800fe26:	f00c fdb6 	bl	801c996 <memcpy>
 800fe2a:	e7b7      	b.n	800fd9c <ucdr_deserialize_int16_t+0x58>

0800fe2c <ucdr_deserialize_endian_int16_t>:
 800fe2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe30:	4604      	mov	r4, r0
 800fe32:	460e      	mov	r6, r1
 800fe34:	2102      	movs	r1, #2
 800fe36:	4615      	mov	r5, r2
 800fe38:	f000 fcb4 	bl	80107a4 <ucdr_buffer_alignment>
 800fe3c:	4601      	mov	r1, r0
 800fe3e:	4620      	mov	r0, r4
 800fe40:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fe44:	f000 fcf6 	bl	8010834 <ucdr_advance_buffer>
 800fe48:	2102      	movs	r1, #2
 800fe4a:	4620      	mov	r0, r4
 800fe4c:	f000 fc4a 	bl	80106e4 <ucdr_check_buffer_available_for>
 800fe50:	bb70      	cbnz	r0, 800feb0 <ucdr_deserialize_endian_int16_t+0x84>
 800fe52:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800fe56:	454f      	cmp	r7, r9
 800fe58:	d925      	bls.n	800fea6 <ucdr_deserialize_endian_int16_t+0x7a>
 800fe5a:	6923      	ldr	r3, [r4, #16]
 800fe5c:	4620      	mov	r0, r4
 800fe5e:	60a7      	str	r7, [r4, #8]
 800fe60:	eba7 0709 	sub.w	r7, r7, r9
 800fe64:	443b      	add	r3, r7
 800fe66:	f1c7 0a02 	rsb	sl, r7, #2
 800fe6a:	6123      	str	r3, [r4, #16]
 800fe6c:	4651      	mov	r1, sl
 800fe6e:	f000 fc45 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800fe72:	2800      	cmp	r0, #0
 800fe74:	d034      	beq.n	800fee0 <ucdr_deserialize_endian_int16_t+0xb4>
 800fe76:	2e01      	cmp	r6, #1
 800fe78:	d043      	beq.n	800ff02 <ucdr_deserialize_endian_int16_t+0xd6>
 800fe7a:	f899 3001 	ldrb.w	r3, [r9, #1]
 800fe7e:	702b      	strb	r3, [r5, #0]
 800fe80:	2f00      	cmp	r7, #0
 800fe82:	d03a      	beq.n	800fefa <ucdr_deserialize_endian_int16_t+0xce>
 800fe84:	f899 3000 	ldrb.w	r3, [r9]
 800fe88:	706b      	strb	r3, [r5, #1]
 800fe8a:	6923      	ldr	r3, [r4, #16]
 800fe8c:	2102      	movs	r1, #2
 800fe8e:	68a2      	ldr	r2, [r4, #8]
 800fe90:	3302      	adds	r3, #2
 800fe92:	7da0      	ldrb	r0, [r4, #22]
 800fe94:	4452      	add	r2, sl
 800fe96:	7561      	strb	r1, [r4, #21]
 800fe98:	1bdb      	subs	r3, r3, r7
 800fe9a:	f080 0001 	eor.w	r0, r0, #1
 800fe9e:	60a2      	str	r2, [r4, #8]
 800fea0:	6123      	str	r3, [r4, #16]
 800fea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fea6:	2102      	movs	r1, #2
 800fea8:	4620      	mov	r0, r4
 800feaa:	f000 fc27 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800feae:	b178      	cbz	r0, 800fed0 <ucdr_deserialize_endian_int16_t+0xa4>
 800feb0:	2e01      	cmp	r6, #1
 800feb2:	68a3      	ldr	r3, [r4, #8]
 800feb4:	d011      	beq.n	800feda <ucdr_deserialize_endian_int16_t+0xae>
 800feb6:	785b      	ldrb	r3, [r3, #1]
 800feb8:	702b      	strb	r3, [r5, #0]
 800feba:	68a3      	ldr	r3, [r4, #8]
 800febc:	781b      	ldrb	r3, [r3, #0]
 800febe:	706b      	strb	r3, [r5, #1]
 800fec0:	2102      	movs	r1, #2
 800fec2:	68a2      	ldr	r2, [r4, #8]
 800fec4:	6923      	ldr	r3, [r4, #16]
 800fec6:	440a      	add	r2, r1
 800fec8:	7561      	strb	r1, [r4, #21]
 800feca:	440b      	add	r3, r1
 800fecc:	60a2      	str	r2, [r4, #8]
 800fece:	6123      	str	r3, [r4, #16]
 800fed0:	7da0      	ldrb	r0, [r4, #22]
 800fed2:	f080 0001 	eor.w	r0, r0, #1
 800fed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800feda:	881b      	ldrh	r3, [r3, #0]
 800fedc:	802b      	strh	r3, [r5, #0]
 800fede:	e7ef      	b.n	800fec0 <ucdr_deserialize_endian_int16_t+0x94>
 800fee0:	68a2      	ldr	r2, [r4, #8]
 800fee2:	6923      	ldr	r3, [r4, #16]
 800fee4:	1bd2      	subs	r2, r2, r7
 800fee6:	7da0      	ldrb	r0, [r4, #22]
 800fee8:	1bdb      	subs	r3, r3, r7
 800feea:	f884 8015 	strb.w	r8, [r4, #21]
 800feee:	f080 0001 	eor.w	r0, r0, #1
 800fef2:	60a2      	str	r2, [r4, #8]
 800fef4:	6123      	str	r3, [r4, #16]
 800fef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fefa:	68a3      	ldr	r3, [r4, #8]
 800fefc:	781b      	ldrb	r3, [r3, #0]
 800fefe:	706b      	strb	r3, [r5, #1]
 800ff00:	e7c3      	b.n	800fe8a <ucdr_deserialize_endian_int16_t+0x5e>
 800ff02:	4649      	mov	r1, r9
 800ff04:	463a      	mov	r2, r7
 800ff06:	4628      	mov	r0, r5
 800ff08:	f00c fd45 	bl	801c996 <memcpy>
 800ff0c:	4652      	mov	r2, sl
 800ff0e:	19e8      	adds	r0, r5, r7
 800ff10:	68a1      	ldr	r1, [r4, #8]
 800ff12:	f00c fd40 	bl	801c996 <memcpy>
 800ff16:	e7b8      	b.n	800fe8a <ucdr_deserialize_endian_int16_t+0x5e>

0800ff18 <ucdr_serialize_int32_t>:
 800ff18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff1c:	b082      	sub	sp, #8
 800ff1e:	4604      	mov	r4, r0
 800ff20:	9101      	str	r1, [sp, #4]
 800ff22:	2104      	movs	r1, #4
 800ff24:	f000 fc3e 	bl	80107a4 <ucdr_buffer_alignment>
 800ff28:	4601      	mov	r1, r0
 800ff2a:	4620      	mov	r0, r4
 800ff2c:	7d67      	ldrb	r7, [r4, #21]
 800ff2e:	f000 fc81 	bl	8010834 <ucdr_advance_buffer>
 800ff32:	2104      	movs	r1, #4
 800ff34:	4620      	mov	r0, r4
 800ff36:	f000 fbd5 	bl	80106e4 <ucdr_check_buffer_available_for>
 800ff3a:	2800      	cmp	r0, #0
 800ff3c:	d139      	bne.n	800ffb2 <ucdr_serialize_int32_t+0x9a>
 800ff3e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ff42:	42ab      	cmp	r3, r5
 800ff44:	d930      	bls.n	800ffa8 <ucdr_serialize_int32_t+0x90>
 800ff46:	1b5e      	subs	r6, r3, r5
 800ff48:	60a3      	str	r3, [r4, #8]
 800ff4a:	6923      	ldr	r3, [r4, #16]
 800ff4c:	4620      	mov	r0, r4
 800ff4e:	f1c6 0804 	rsb	r8, r6, #4
 800ff52:	4433      	add	r3, r6
 800ff54:	4641      	mov	r1, r8
 800ff56:	6123      	str	r3, [r4, #16]
 800ff58:	f000 fbd0 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800ff5c:	2800      	cmp	r0, #0
 800ff5e:	d04c      	beq.n	800fffa <ucdr_serialize_int32_t+0xe2>
 800ff60:	7d23      	ldrb	r3, [r4, #20]
 800ff62:	2b01      	cmp	r3, #1
 800ff64:	d063      	beq.n	801002e <ucdr_serialize_int32_t+0x116>
 800ff66:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ff6a:	702b      	strb	r3, [r5, #0]
 800ff6c:	2e00      	cmp	r6, #0
 800ff6e:	d051      	beq.n	8010014 <ucdr_serialize_int32_t+0xfc>
 800ff70:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ff74:	2e01      	cmp	r6, #1
 800ff76:	706b      	strb	r3, [r5, #1]
 800ff78:	d050      	beq.n	801001c <ucdr_serialize_int32_t+0x104>
 800ff7a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ff7e:	2e02      	cmp	r6, #2
 800ff80:	70ab      	strb	r3, [r5, #2]
 800ff82:	d04f      	beq.n	8010024 <ucdr_serialize_int32_t+0x10c>
 800ff84:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ff88:	70eb      	strb	r3, [r5, #3]
 800ff8a:	6923      	ldr	r3, [r4, #16]
 800ff8c:	2104      	movs	r1, #4
 800ff8e:	68a2      	ldr	r2, [r4, #8]
 800ff90:	3304      	adds	r3, #4
 800ff92:	7da0      	ldrb	r0, [r4, #22]
 800ff94:	4442      	add	r2, r8
 800ff96:	7561      	strb	r1, [r4, #21]
 800ff98:	1b9e      	subs	r6, r3, r6
 800ff9a:	f080 0001 	eor.w	r0, r0, #1
 800ff9e:	60a2      	str	r2, [r4, #8]
 800ffa0:	6126      	str	r6, [r4, #16]
 800ffa2:	b002      	add	sp, #8
 800ffa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffa8:	2104      	movs	r1, #4
 800ffaa:	4620      	mov	r0, r4
 800ffac:	f000 fba6 	bl	80106fc <ucdr_check_final_buffer_behavior>
 800ffb0:	b1d0      	cbz	r0, 800ffe8 <ucdr_serialize_int32_t+0xd0>
 800ffb2:	7d23      	ldrb	r3, [r4, #20]
 800ffb4:	2b01      	cmp	r3, #1
 800ffb6:	68a3      	ldr	r3, [r4, #8]
 800ffb8:	d01c      	beq.n	800fff4 <ucdr_serialize_int32_t+0xdc>
 800ffba:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ffbe:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ffc2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800ffc6:	7018      	strb	r0, [r3, #0]
 800ffc8:	68a3      	ldr	r3, [r4, #8]
 800ffca:	705a      	strb	r2, [r3, #1]
 800ffcc:	68a3      	ldr	r3, [r4, #8]
 800ffce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ffd2:	7099      	strb	r1, [r3, #2]
 800ffd4:	68a3      	ldr	r3, [r4, #8]
 800ffd6:	70da      	strb	r2, [r3, #3]
 800ffd8:	2104      	movs	r1, #4
 800ffda:	68a2      	ldr	r2, [r4, #8]
 800ffdc:	6923      	ldr	r3, [r4, #16]
 800ffde:	440a      	add	r2, r1
 800ffe0:	7561      	strb	r1, [r4, #21]
 800ffe2:	440b      	add	r3, r1
 800ffe4:	60a2      	str	r2, [r4, #8]
 800ffe6:	6123      	str	r3, [r4, #16]
 800ffe8:	7da0      	ldrb	r0, [r4, #22]
 800ffea:	f080 0001 	eor.w	r0, r0, #1
 800ffee:	b002      	add	sp, #8
 800fff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fff4:	9a01      	ldr	r2, [sp, #4]
 800fff6:	601a      	str	r2, [r3, #0]
 800fff8:	e7ee      	b.n	800ffd8 <ucdr_serialize_int32_t+0xc0>
 800fffa:	68a2      	ldr	r2, [r4, #8]
 800fffc:	6923      	ldr	r3, [r4, #16]
 800fffe:	7da0      	ldrb	r0, [r4, #22]
 8010000:	1b92      	subs	r2, r2, r6
 8010002:	1b9b      	subs	r3, r3, r6
 8010004:	7567      	strb	r7, [r4, #21]
 8010006:	f080 0001 	eor.w	r0, r0, #1
 801000a:	60a2      	str	r2, [r4, #8]
 801000c:	6123      	str	r3, [r4, #16]
 801000e:	b002      	add	sp, #8
 8010010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010014:	68a3      	ldr	r3, [r4, #8]
 8010016:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801001a:	701a      	strb	r2, [r3, #0]
 801001c:	68a3      	ldr	r3, [r4, #8]
 801001e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010022:	701a      	strb	r2, [r3, #0]
 8010024:	68a3      	ldr	r3, [r4, #8]
 8010026:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801002a:	701a      	strb	r2, [r3, #0]
 801002c:	e7ad      	b.n	800ff8a <ucdr_serialize_int32_t+0x72>
 801002e:	4628      	mov	r0, r5
 8010030:	ad01      	add	r5, sp, #4
 8010032:	4632      	mov	r2, r6
 8010034:	4629      	mov	r1, r5
 8010036:	f00c fcae 	bl	801c996 <memcpy>
 801003a:	4642      	mov	r2, r8
 801003c:	19a9      	adds	r1, r5, r6
 801003e:	68a0      	ldr	r0, [r4, #8]
 8010040:	f00c fca9 	bl	801c996 <memcpy>
 8010044:	e7a1      	b.n	800ff8a <ucdr_serialize_int32_t+0x72>
 8010046:	bf00      	nop

08010048 <ucdr_deserialize_int32_t>:
 8010048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801004c:	4604      	mov	r4, r0
 801004e:	460d      	mov	r5, r1
 8010050:	2104      	movs	r1, #4
 8010052:	f000 fba7 	bl	80107a4 <ucdr_buffer_alignment>
 8010056:	4601      	mov	r1, r0
 8010058:	4620      	mov	r0, r4
 801005a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801005e:	f000 fbe9 	bl	8010834 <ucdr_advance_buffer>
 8010062:	2104      	movs	r1, #4
 8010064:	4620      	mov	r0, r4
 8010066:	f000 fb3d 	bl	80106e4 <ucdr_check_buffer_available_for>
 801006a:	2800      	cmp	r0, #0
 801006c:	d138      	bne.n	80100e0 <ucdr_deserialize_int32_t+0x98>
 801006e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8010072:	42b7      	cmp	r7, r6
 8010074:	d92f      	bls.n	80100d6 <ucdr_deserialize_int32_t+0x8e>
 8010076:	6923      	ldr	r3, [r4, #16]
 8010078:	4620      	mov	r0, r4
 801007a:	60a7      	str	r7, [r4, #8]
 801007c:	1bbf      	subs	r7, r7, r6
 801007e:	443b      	add	r3, r7
 8010080:	f1c7 0904 	rsb	r9, r7, #4
 8010084:	6123      	str	r3, [r4, #16]
 8010086:	4649      	mov	r1, r9
 8010088:	f000 fb38 	bl	80106fc <ucdr_check_final_buffer_behavior>
 801008c:	2800      	cmp	r0, #0
 801008e:	d046      	beq.n	801011e <ucdr_deserialize_int32_t+0xd6>
 8010090:	7d23      	ldrb	r3, [r4, #20]
 8010092:	2b01      	cmp	r3, #1
 8010094:	d05c      	beq.n	8010150 <ucdr_deserialize_int32_t+0x108>
 8010096:	78f3      	ldrb	r3, [r6, #3]
 8010098:	702b      	strb	r3, [r5, #0]
 801009a:	2f00      	cmp	r7, #0
 801009c:	d04c      	beq.n	8010138 <ucdr_deserialize_int32_t+0xf0>
 801009e:	78b3      	ldrb	r3, [r6, #2]
 80100a0:	2f01      	cmp	r7, #1
 80100a2:	706b      	strb	r3, [r5, #1]
 80100a4:	f105 0302 	add.w	r3, r5, #2
 80100a8:	d04a      	beq.n	8010140 <ucdr_deserialize_int32_t+0xf8>
 80100aa:	7873      	ldrb	r3, [r6, #1]
 80100ac:	2f02      	cmp	r7, #2
 80100ae:	70ab      	strb	r3, [r5, #2]
 80100b0:	f105 0303 	add.w	r3, r5, #3
 80100b4:	d048      	beq.n	8010148 <ucdr_deserialize_int32_t+0x100>
 80100b6:	7833      	ldrb	r3, [r6, #0]
 80100b8:	70eb      	strb	r3, [r5, #3]
 80100ba:	6923      	ldr	r3, [r4, #16]
 80100bc:	2104      	movs	r1, #4
 80100be:	68a2      	ldr	r2, [r4, #8]
 80100c0:	3304      	adds	r3, #4
 80100c2:	7da0      	ldrb	r0, [r4, #22]
 80100c4:	444a      	add	r2, r9
 80100c6:	7561      	strb	r1, [r4, #21]
 80100c8:	1bdb      	subs	r3, r3, r7
 80100ca:	f080 0001 	eor.w	r0, r0, #1
 80100ce:	60a2      	str	r2, [r4, #8]
 80100d0:	6123      	str	r3, [r4, #16]
 80100d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100d6:	2104      	movs	r1, #4
 80100d8:	4620      	mov	r0, r4
 80100da:	f000 fb0f 	bl	80106fc <ucdr_check_final_buffer_behavior>
 80100de:	b1b0      	cbz	r0, 801010e <ucdr_deserialize_int32_t+0xc6>
 80100e0:	7d23      	ldrb	r3, [r4, #20]
 80100e2:	2b01      	cmp	r3, #1
 80100e4:	68a3      	ldr	r3, [r4, #8]
 80100e6:	d017      	beq.n	8010118 <ucdr_deserialize_int32_t+0xd0>
 80100e8:	78db      	ldrb	r3, [r3, #3]
 80100ea:	702b      	strb	r3, [r5, #0]
 80100ec:	68a3      	ldr	r3, [r4, #8]
 80100ee:	789b      	ldrb	r3, [r3, #2]
 80100f0:	706b      	strb	r3, [r5, #1]
 80100f2:	68a3      	ldr	r3, [r4, #8]
 80100f4:	785b      	ldrb	r3, [r3, #1]
 80100f6:	70ab      	strb	r3, [r5, #2]
 80100f8:	68a3      	ldr	r3, [r4, #8]
 80100fa:	781b      	ldrb	r3, [r3, #0]
 80100fc:	70eb      	strb	r3, [r5, #3]
 80100fe:	2104      	movs	r1, #4
 8010100:	68a2      	ldr	r2, [r4, #8]
 8010102:	6923      	ldr	r3, [r4, #16]
 8010104:	440a      	add	r2, r1
 8010106:	7561      	strb	r1, [r4, #21]
 8010108:	440b      	add	r3, r1
 801010a:	60a2      	str	r2, [r4, #8]
 801010c:	6123      	str	r3, [r4, #16]
 801010e:	7da0      	ldrb	r0, [r4, #22]
 8010110:	f080 0001 	eor.w	r0, r0, #1
 8010114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	602b      	str	r3, [r5, #0]
 801011c:	e7ef      	b.n	80100fe <ucdr_deserialize_int32_t+0xb6>
 801011e:	68a2      	ldr	r2, [r4, #8]
 8010120:	6923      	ldr	r3, [r4, #16]
 8010122:	1bd2      	subs	r2, r2, r7
 8010124:	7da0      	ldrb	r0, [r4, #22]
 8010126:	1bdb      	subs	r3, r3, r7
 8010128:	f884 8015 	strb.w	r8, [r4, #21]
 801012c:	f080 0001 	eor.w	r0, r0, #1
 8010130:	60a2      	str	r2, [r4, #8]
 8010132:	6123      	str	r3, [r4, #16]
 8010134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010138:	68a3      	ldr	r3, [r4, #8]
 801013a:	789b      	ldrb	r3, [r3, #2]
 801013c:	706b      	strb	r3, [r5, #1]
 801013e:	1cab      	adds	r3, r5, #2
 8010140:	68a2      	ldr	r2, [r4, #8]
 8010142:	7852      	ldrb	r2, [r2, #1]
 8010144:	f803 2b01 	strb.w	r2, [r3], #1
 8010148:	68a2      	ldr	r2, [r4, #8]
 801014a:	7812      	ldrb	r2, [r2, #0]
 801014c:	701a      	strb	r2, [r3, #0]
 801014e:	e7b4      	b.n	80100ba <ucdr_deserialize_int32_t+0x72>
 8010150:	4631      	mov	r1, r6
 8010152:	463a      	mov	r2, r7
 8010154:	4628      	mov	r0, r5
 8010156:	f00c fc1e 	bl	801c996 <memcpy>
 801015a:	464a      	mov	r2, r9
 801015c:	19e8      	adds	r0, r5, r7
 801015e:	68a1      	ldr	r1, [r4, #8]
 8010160:	f00c fc19 	bl	801c996 <memcpy>
 8010164:	e7a9      	b.n	80100ba <ucdr_deserialize_int32_t+0x72>
 8010166:	bf00      	nop

08010168 <ucdr_serialize_int64_t>:
 8010168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801016c:	4604      	mov	r4, r0
 801016e:	b082      	sub	sp, #8
 8010170:	2108      	movs	r1, #8
 8010172:	e9cd 2300 	strd	r2, r3, [sp]
 8010176:	f000 fb15 	bl	80107a4 <ucdr_buffer_alignment>
 801017a:	4601      	mov	r1, r0
 801017c:	4620      	mov	r0, r4
 801017e:	7d67      	ldrb	r7, [r4, #21]
 8010180:	f000 fb58 	bl	8010834 <ucdr_advance_buffer>
 8010184:	2108      	movs	r1, #8
 8010186:	4620      	mov	r0, r4
 8010188:	f000 faac 	bl	80106e4 <ucdr_check_buffer_available_for>
 801018c:	2800      	cmp	r0, #0
 801018e:	d14e      	bne.n	801022e <ucdr_serialize_int64_t+0xc6>
 8010190:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010194:	42ab      	cmp	r3, r5
 8010196:	d945      	bls.n	8010224 <ucdr_serialize_int64_t+0xbc>
 8010198:	1b5e      	subs	r6, r3, r5
 801019a:	60a3      	str	r3, [r4, #8]
 801019c:	6923      	ldr	r3, [r4, #16]
 801019e:	4620      	mov	r0, r4
 80101a0:	f1c6 0808 	rsb	r8, r6, #8
 80101a4:	4433      	add	r3, r6
 80101a6:	4641      	mov	r1, r8
 80101a8:	6123      	str	r3, [r4, #16]
 80101aa:	f000 faa7 	bl	80106fc <ucdr_check_final_buffer_behavior>
 80101ae:	2800      	cmp	r0, #0
 80101b0:	d074      	beq.n	801029c <ucdr_serialize_int64_t+0x134>
 80101b2:	7d23      	ldrb	r3, [r4, #20]
 80101b4:	2b01      	cmp	r3, #1
 80101b6:	f000 809b 	beq.w	80102f0 <ucdr_serialize_int64_t+0x188>
 80101ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80101be:	702b      	strb	r3, [r5, #0]
 80101c0:	2e00      	cmp	r6, #0
 80101c2:	d078      	beq.n	80102b6 <ucdr_serialize_int64_t+0x14e>
 80101c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80101c8:	2e01      	cmp	r6, #1
 80101ca:	706b      	strb	r3, [r5, #1]
 80101cc:	d077      	beq.n	80102be <ucdr_serialize_int64_t+0x156>
 80101ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80101d2:	2e02      	cmp	r6, #2
 80101d4:	70ab      	strb	r3, [r5, #2]
 80101d6:	d076      	beq.n	80102c6 <ucdr_serialize_int64_t+0x15e>
 80101d8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80101dc:	2e03      	cmp	r6, #3
 80101de:	70eb      	strb	r3, [r5, #3]
 80101e0:	d075      	beq.n	80102ce <ucdr_serialize_int64_t+0x166>
 80101e2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80101e6:	2e04      	cmp	r6, #4
 80101e8:	712b      	strb	r3, [r5, #4]
 80101ea:	d074      	beq.n	80102d6 <ucdr_serialize_int64_t+0x16e>
 80101ec:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80101f0:	2e05      	cmp	r6, #5
 80101f2:	716b      	strb	r3, [r5, #5]
 80101f4:	d073      	beq.n	80102de <ucdr_serialize_int64_t+0x176>
 80101f6:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80101fa:	2e06      	cmp	r6, #6
 80101fc:	71ab      	strb	r3, [r5, #6]
 80101fe:	d072      	beq.n	80102e6 <ucdr_serialize_int64_t+0x17e>
 8010200:	f89d 3000 	ldrb.w	r3, [sp]
 8010204:	71eb      	strb	r3, [r5, #7]
 8010206:	6923      	ldr	r3, [r4, #16]
 8010208:	2108      	movs	r1, #8
 801020a:	68a2      	ldr	r2, [r4, #8]
 801020c:	3308      	adds	r3, #8
 801020e:	7da0      	ldrb	r0, [r4, #22]
 8010210:	4442      	add	r2, r8
 8010212:	7561      	strb	r1, [r4, #21]
 8010214:	1b9e      	subs	r6, r3, r6
 8010216:	f080 0001 	eor.w	r0, r0, #1
 801021a:	60a2      	str	r2, [r4, #8]
 801021c:	6126      	str	r6, [r4, #16]
 801021e:	b002      	add	sp, #8
 8010220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010224:	2108      	movs	r1, #8
 8010226:	4620      	mov	r0, r4
 8010228:	f000 fa68 	bl	80106fc <ucdr_check_final_buffer_behavior>
 801022c:	b350      	cbz	r0, 8010284 <ucdr_serialize_int64_t+0x11c>
 801022e:	7d23      	ldrb	r3, [r4, #20]
 8010230:	2b01      	cmp	r3, #1
 8010232:	d02d      	beq.n	8010290 <ucdr_serialize_int64_t+0x128>
 8010234:	68a3      	ldr	r3, [r4, #8]
 8010236:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801023a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801023e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010242:	7018      	strb	r0, [r3, #0]
 8010244:	68a3      	ldr	r3, [r4, #8]
 8010246:	705a      	strb	r2, [r3, #1]
 8010248:	68a3      	ldr	r3, [r4, #8]
 801024a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801024e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8010252:	7099      	strb	r1, [r3, #2]
 8010254:	68a3      	ldr	r3, [r4, #8]
 8010256:	70da      	strb	r2, [r3, #3]
 8010258:	68a3      	ldr	r3, [r4, #8]
 801025a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801025e:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8010262:	7118      	strb	r0, [r3, #4]
 8010264:	68a3      	ldr	r3, [r4, #8]
 8010266:	715a      	strb	r2, [r3, #5]
 8010268:	68a3      	ldr	r3, [r4, #8]
 801026a:	f89d 2000 	ldrb.w	r2, [sp]
 801026e:	7199      	strb	r1, [r3, #6]
 8010270:	68a3      	ldr	r3, [r4, #8]
 8010272:	71da      	strb	r2, [r3, #7]
 8010274:	2108      	movs	r1, #8
 8010276:	68a2      	ldr	r2, [r4, #8]
 8010278:	6923      	ldr	r3, [r4, #16]
 801027a:	440a      	add	r2, r1
 801027c:	7561      	strb	r1, [r4, #21]
 801027e:	440b      	add	r3, r1
 8010280:	60a2      	str	r2, [r4, #8]
 8010282:	6123      	str	r3, [r4, #16]
 8010284:	7da0      	ldrb	r0, [r4, #22]
 8010286:	f080 0001 	eor.w	r0, r0, #1
 801028a:	b002      	add	sp, #8
 801028c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010290:	466b      	mov	r3, sp
 8010292:	68a2      	ldr	r2, [r4, #8]
 8010294:	cb03      	ldmia	r3!, {r0, r1}
 8010296:	6010      	str	r0, [r2, #0]
 8010298:	6051      	str	r1, [r2, #4]
 801029a:	e7eb      	b.n	8010274 <ucdr_serialize_int64_t+0x10c>
 801029c:	68a2      	ldr	r2, [r4, #8]
 801029e:	6923      	ldr	r3, [r4, #16]
 80102a0:	7da0      	ldrb	r0, [r4, #22]
 80102a2:	1b92      	subs	r2, r2, r6
 80102a4:	1b9b      	subs	r3, r3, r6
 80102a6:	7567      	strb	r7, [r4, #21]
 80102a8:	f080 0001 	eor.w	r0, r0, #1
 80102ac:	60a2      	str	r2, [r4, #8]
 80102ae:	6123      	str	r3, [r4, #16]
 80102b0:	b002      	add	sp, #8
 80102b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102b6:	68a3      	ldr	r3, [r4, #8]
 80102b8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80102bc:	701a      	strb	r2, [r3, #0]
 80102be:	68a3      	ldr	r3, [r4, #8]
 80102c0:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80102c4:	701a      	strb	r2, [r3, #0]
 80102c6:	68a3      	ldr	r3, [r4, #8]
 80102c8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80102cc:	701a      	strb	r2, [r3, #0]
 80102ce:	68a3      	ldr	r3, [r4, #8]
 80102d0:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80102d4:	701a      	strb	r2, [r3, #0]
 80102d6:	68a3      	ldr	r3, [r4, #8]
 80102d8:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80102dc:	701a      	strb	r2, [r3, #0]
 80102de:	68a3      	ldr	r3, [r4, #8]
 80102e0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80102e4:	701a      	strb	r2, [r3, #0]
 80102e6:	68a3      	ldr	r3, [r4, #8]
 80102e8:	f89d 2000 	ldrb.w	r2, [sp]
 80102ec:	701a      	strb	r2, [r3, #0]
 80102ee:	e78a      	b.n	8010206 <ucdr_serialize_int64_t+0x9e>
 80102f0:	4628      	mov	r0, r5
 80102f2:	466d      	mov	r5, sp
 80102f4:	4632      	mov	r2, r6
 80102f6:	4629      	mov	r1, r5
 80102f8:	f00c fb4d 	bl	801c996 <memcpy>
 80102fc:	4642      	mov	r2, r8
 80102fe:	19a9      	adds	r1, r5, r6
 8010300:	68a0      	ldr	r0, [r4, #8]
 8010302:	f00c fb48 	bl	801c996 <memcpy>
 8010306:	e77e      	b.n	8010206 <ucdr_serialize_int64_t+0x9e>

08010308 <ucdr_deserialize_int64_t>:
 8010308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801030c:	4604      	mov	r4, r0
 801030e:	460d      	mov	r5, r1
 8010310:	2108      	movs	r1, #8
 8010312:	f000 fa47 	bl	80107a4 <ucdr_buffer_alignment>
 8010316:	4601      	mov	r1, r0
 8010318:	4620      	mov	r0, r4
 801031a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801031e:	f000 fa89 	bl	8010834 <ucdr_advance_buffer>
 8010322:	2108      	movs	r1, #8
 8010324:	4620      	mov	r0, r4
 8010326:	f000 f9dd 	bl	80106e4 <ucdr_check_buffer_available_for>
 801032a:	2800      	cmp	r0, #0
 801032c:	d151      	bne.n	80103d2 <ucdr_deserialize_int64_t+0xca>
 801032e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010332:	42be      	cmp	r6, r7
 8010334:	d948      	bls.n	80103c8 <ucdr_deserialize_int64_t+0xc0>
 8010336:	6923      	ldr	r3, [r4, #16]
 8010338:	4620      	mov	r0, r4
 801033a:	60a6      	str	r6, [r4, #8]
 801033c:	1bf6      	subs	r6, r6, r7
 801033e:	4433      	add	r3, r6
 8010340:	f1c6 0908 	rsb	r9, r6, #8
 8010344:	6123      	str	r3, [r4, #16]
 8010346:	4649      	mov	r1, r9
 8010348:	f000 f9d8 	bl	80106fc <ucdr_check_final_buffer_behavior>
 801034c:	2800      	cmp	r0, #0
 801034e:	d06d      	beq.n	801042c <ucdr_deserialize_int64_t+0x124>
 8010350:	7d23      	ldrb	r3, [r4, #20]
 8010352:	2b01      	cmp	r3, #1
 8010354:	f000 8093 	beq.w	801047e <ucdr_deserialize_int64_t+0x176>
 8010358:	79fb      	ldrb	r3, [r7, #7]
 801035a:	702b      	strb	r3, [r5, #0]
 801035c:	2e00      	cmp	r6, #0
 801035e:	d072      	beq.n	8010446 <ucdr_deserialize_int64_t+0x13e>
 8010360:	79bb      	ldrb	r3, [r7, #6]
 8010362:	2e01      	cmp	r6, #1
 8010364:	706b      	strb	r3, [r5, #1]
 8010366:	f105 0302 	add.w	r3, r5, #2
 801036a:	d070      	beq.n	801044e <ucdr_deserialize_int64_t+0x146>
 801036c:	797b      	ldrb	r3, [r7, #5]
 801036e:	2e02      	cmp	r6, #2
 8010370:	70ab      	strb	r3, [r5, #2]
 8010372:	f105 0303 	add.w	r3, r5, #3
 8010376:	d06e      	beq.n	8010456 <ucdr_deserialize_int64_t+0x14e>
 8010378:	793b      	ldrb	r3, [r7, #4]
 801037a:	2e03      	cmp	r6, #3
 801037c:	70eb      	strb	r3, [r5, #3]
 801037e:	f105 0304 	add.w	r3, r5, #4
 8010382:	d06c      	beq.n	801045e <ucdr_deserialize_int64_t+0x156>
 8010384:	78fb      	ldrb	r3, [r7, #3]
 8010386:	2e04      	cmp	r6, #4
 8010388:	712b      	strb	r3, [r5, #4]
 801038a:	f105 0305 	add.w	r3, r5, #5
 801038e:	d06a      	beq.n	8010466 <ucdr_deserialize_int64_t+0x15e>
 8010390:	78bb      	ldrb	r3, [r7, #2]
 8010392:	2e05      	cmp	r6, #5
 8010394:	716b      	strb	r3, [r5, #5]
 8010396:	f105 0306 	add.w	r3, r5, #6
 801039a:	d068      	beq.n	801046e <ucdr_deserialize_int64_t+0x166>
 801039c:	787b      	ldrb	r3, [r7, #1]
 801039e:	2e06      	cmp	r6, #6
 80103a0:	71ab      	strb	r3, [r5, #6]
 80103a2:	f105 0307 	add.w	r3, r5, #7
 80103a6:	d066      	beq.n	8010476 <ucdr_deserialize_int64_t+0x16e>
 80103a8:	783b      	ldrb	r3, [r7, #0]
 80103aa:	71eb      	strb	r3, [r5, #7]
 80103ac:	6923      	ldr	r3, [r4, #16]
 80103ae:	2108      	movs	r1, #8
 80103b0:	68a2      	ldr	r2, [r4, #8]
 80103b2:	3308      	adds	r3, #8
 80103b4:	7da0      	ldrb	r0, [r4, #22]
 80103b6:	444a      	add	r2, r9
 80103b8:	7561      	strb	r1, [r4, #21]
 80103ba:	1b9e      	subs	r6, r3, r6
 80103bc:	f080 0001 	eor.w	r0, r0, #1
 80103c0:	60a2      	str	r2, [r4, #8]
 80103c2:	6126      	str	r6, [r4, #16]
 80103c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103c8:	2108      	movs	r1, #8
 80103ca:	4620      	mov	r0, r4
 80103cc:	f000 f996 	bl	80106fc <ucdr_check_final_buffer_behavior>
 80103d0:	b310      	cbz	r0, 8010418 <ucdr_deserialize_int64_t+0x110>
 80103d2:	7d23      	ldrb	r3, [r4, #20]
 80103d4:	2b01      	cmp	r3, #1
 80103d6:	68a3      	ldr	r3, [r4, #8]
 80103d8:	d023      	beq.n	8010422 <ucdr_deserialize_int64_t+0x11a>
 80103da:	79db      	ldrb	r3, [r3, #7]
 80103dc:	702b      	strb	r3, [r5, #0]
 80103de:	68a3      	ldr	r3, [r4, #8]
 80103e0:	799b      	ldrb	r3, [r3, #6]
 80103e2:	706b      	strb	r3, [r5, #1]
 80103e4:	68a3      	ldr	r3, [r4, #8]
 80103e6:	795b      	ldrb	r3, [r3, #5]
 80103e8:	70ab      	strb	r3, [r5, #2]
 80103ea:	68a3      	ldr	r3, [r4, #8]
 80103ec:	791b      	ldrb	r3, [r3, #4]
 80103ee:	70eb      	strb	r3, [r5, #3]
 80103f0:	68a3      	ldr	r3, [r4, #8]
 80103f2:	78db      	ldrb	r3, [r3, #3]
 80103f4:	712b      	strb	r3, [r5, #4]
 80103f6:	68a3      	ldr	r3, [r4, #8]
 80103f8:	789b      	ldrb	r3, [r3, #2]
 80103fa:	716b      	strb	r3, [r5, #5]
 80103fc:	68a3      	ldr	r3, [r4, #8]
 80103fe:	785b      	ldrb	r3, [r3, #1]
 8010400:	71ab      	strb	r3, [r5, #6]
 8010402:	68a3      	ldr	r3, [r4, #8]
 8010404:	781b      	ldrb	r3, [r3, #0]
 8010406:	71eb      	strb	r3, [r5, #7]
 8010408:	2108      	movs	r1, #8
 801040a:	68a2      	ldr	r2, [r4, #8]
 801040c:	6923      	ldr	r3, [r4, #16]
 801040e:	440a      	add	r2, r1
 8010410:	7561      	strb	r1, [r4, #21]
 8010412:	440b      	add	r3, r1
 8010414:	60a2      	str	r2, [r4, #8]
 8010416:	6123      	str	r3, [r4, #16]
 8010418:	7da0      	ldrb	r0, [r4, #22]
 801041a:	f080 0001 	eor.w	r0, r0, #1
 801041e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010422:	681a      	ldr	r2, [r3, #0]
 8010424:	685b      	ldr	r3, [r3, #4]
 8010426:	602a      	str	r2, [r5, #0]
 8010428:	606b      	str	r3, [r5, #4]
 801042a:	e7ed      	b.n	8010408 <ucdr_deserialize_int64_t+0x100>
 801042c:	68a2      	ldr	r2, [r4, #8]
 801042e:	6923      	ldr	r3, [r4, #16]
 8010430:	1b92      	subs	r2, r2, r6
 8010432:	7da0      	ldrb	r0, [r4, #22]
 8010434:	1b9b      	subs	r3, r3, r6
 8010436:	f884 8015 	strb.w	r8, [r4, #21]
 801043a:	f080 0001 	eor.w	r0, r0, #1
 801043e:	60a2      	str	r2, [r4, #8]
 8010440:	6123      	str	r3, [r4, #16]
 8010442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010446:	68a3      	ldr	r3, [r4, #8]
 8010448:	799b      	ldrb	r3, [r3, #6]
 801044a:	706b      	strb	r3, [r5, #1]
 801044c:	1cab      	adds	r3, r5, #2
 801044e:	68a2      	ldr	r2, [r4, #8]
 8010450:	7952      	ldrb	r2, [r2, #5]
 8010452:	f803 2b01 	strb.w	r2, [r3], #1
 8010456:	68a2      	ldr	r2, [r4, #8]
 8010458:	7912      	ldrb	r2, [r2, #4]
 801045a:	f803 2b01 	strb.w	r2, [r3], #1
 801045e:	68a2      	ldr	r2, [r4, #8]
 8010460:	78d2      	ldrb	r2, [r2, #3]
 8010462:	f803 2b01 	strb.w	r2, [r3], #1
 8010466:	68a2      	ldr	r2, [r4, #8]
 8010468:	7892      	ldrb	r2, [r2, #2]
 801046a:	f803 2b01 	strb.w	r2, [r3], #1
 801046e:	68a2      	ldr	r2, [r4, #8]
 8010470:	7852      	ldrb	r2, [r2, #1]
 8010472:	f803 2b01 	strb.w	r2, [r3], #1
 8010476:	68a2      	ldr	r2, [r4, #8]
 8010478:	7812      	ldrb	r2, [r2, #0]
 801047a:	701a      	strb	r2, [r3, #0]
 801047c:	e796      	b.n	80103ac <ucdr_deserialize_int64_t+0xa4>
 801047e:	4639      	mov	r1, r7
 8010480:	4632      	mov	r2, r6
 8010482:	4628      	mov	r0, r5
 8010484:	f00c fa87 	bl	801c996 <memcpy>
 8010488:	464a      	mov	r2, r9
 801048a:	19a8      	adds	r0, r5, r6
 801048c:	68a1      	ldr	r1, [r4, #8]
 801048e:	f00c fa82 	bl	801c996 <memcpy>
 8010492:	e78b      	b.n	80103ac <ucdr_deserialize_int64_t+0xa4>

08010494 <ucdr_serialize_float>:
 8010494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010498:	4604      	mov	r4, r0
 801049a:	b082      	sub	sp, #8
 801049c:	2104      	movs	r1, #4
 801049e:	ed8d 0a01 	vstr	s0, [sp, #4]
 80104a2:	f000 f97f 	bl	80107a4 <ucdr_buffer_alignment>
 80104a6:	4601      	mov	r1, r0
 80104a8:	4620      	mov	r0, r4
 80104aa:	7d67      	ldrb	r7, [r4, #21]
 80104ac:	f000 f9c2 	bl	8010834 <ucdr_advance_buffer>
 80104b0:	2104      	movs	r1, #4
 80104b2:	4620      	mov	r0, r4
 80104b4:	f000 f916 	bl	80106e4 <ucdr_check_buffer_available_for>
 80104b8:	2800      	cmp	r0, #0
 80104ba:	d139      	bne.n	8010530 <ucdr_serialize_float+0x9c>
 80104bc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80104c0:	42ab      	cmp	r3, r5
 80104c2:	d930      	bls.n	8010526 <ucdr_serialize_float+0x92>
 80104c4:	1b5e      	subs	r6, r3, r5
 80104c6:	60a3      	str	r3, [r4, #8]
 80104c8:	6923      	ldr	r3, [r4, #16]
 80104ca:	4620      	mov	r0, r4
 80104cc:	f1c6 0804 	rsb	r8, r6, #4
 80104d0:	4433      	add	r3, r6
 80104d2:	4641      	mov	r1, r8
 80104d4:	6123      	str	r3, [r4, #16]
 80104d6:	f000 f911 	bl	80106fc <ucdr_check_final_buffer_behavior>
 80104da:	2800      	cmp	r0, #0
 80104dc:	d04c      	beq.n	8010578 <ucdr_serialize_float+0xe4>
 80104de:	7d23      	ldrb	r3, [r4, #20]
 80104e0:	2b01      	cmp	r3, #1
 80104e2:	d063      	beq.n	80105ac <ucdr_serialize_float+0x118>
 80104e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80104e8:	702b      	strb	r3, [r5, #0]
 80104ea:	2e00      	cmp	r6, #0
 80104ec:	d051      	beq.n	8010592 <ucdr_serialize_float+0xfe>
 80104ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80104f2:	2e01      	cmp	r6, #1
 80104f4:	706b      	strb	r3, [r5, #1]
 80104f6:	d050      	beq.n	801059a <ucdr_serialize_float+0x106>
 80104f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80104fc:	2e02      	cmp	r6, #2
 80104fe:	70ab      	strb	r3, [r5, #2]
 8010500:	d04f      	beq.n	80105a2 <ucdr_serialize_float+0x10e>
 8010502:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010506:	70eb      	strb	r3, [r5, #3]
 8010508:	6923      	ldr	r3, [r4, #16]
 801050a:	2104      	movs	r1, #4
 801050c:	68a2      	ldr	r2, [r4, #8]
 801050e:	3304      	adds	r3, #4
 8010510:	7da0      	ldrb	r0, [r4, #22]
 8010512:	4442      	add	r2, r8
 8010514:	7561      	strb	r1, [r4, #21]
 8010516:	1b9e      	subs	r6, r3, r6
 8010518:	f080 0001 	eor.w	r0, r0, #1
 801051c:	60a2      	str	r2, [r4, #8]
 801051e:	6126      	str	r6, [r4, #16]
 8010520:	b002      	add	sp, #8
 8010522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010526:	2104      	movs	r1, #4
 8010528:	4620      	mov	r0, r4
 801052a:	f000 f8e7 	bl	80106fc <ucdr_check_final_buffer_behavior>
 801052e:	b1d0      	cbz	r0, 8010566 <ucdr_serialize_float+0xd2>
 8010530:	7d23      	ldrb	r3, [r4, #20]
 8010532:	2b01      	cmp	r3, #1
 8010534:	68a3      	ldr	r3, [r4, #8]
 8010536:	d01c      	beq.n	8010572 <ucdr_serialize_float+0xde>
 8010538:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801053c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010540:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8010544:	7018      	strb	r0, [r3, #0]
 8010546:	68a3      	ldr	r3, [r4, #8]
 8010548:	705a      	strb	r2, [r3, #1]
 801054a:	68a3      	ldr	r3, [r4, #8]
 801054c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010550:	7099      	strb	r1, [r3, #2]
 8010552:	68a3      	ldr	r3, [r4, #8]
 8010554:	70da      	strb	r2, [r3, #3]
 8010556:	2104      	movs	r1, #4
 8010558:	68a2      	ldr	r2, [r4, #8]
 801055a:	6923      	ldr	r3, [r4, #16]
 801055c:	440a      	add	r2, r1
 801055e:	7561      	strb	r1, [r4, #21]
 8010560:	440b      	add	r3, r1
 8010562:	60a2      	str	r2, [r4, #8]
 8010564:	6123      	str	r3, [r4, #16]
 8010566:	7da0      	ldrb	r0, [r4, #22]
 8010568:	f080 0001 	eor.w	r0, r0, #1
 801056c:	b002      	add	sp, #8
 801056e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010572:	9a01      	ldr	r2, [sp, #4]
 8010574:	601a      	str	r2, [r3, #0]
 8010576:	e7ee      	b.n	8010556 <ucdr_serialize_float+0xc2>
 8010578:	68a2      	ldr	r2, [r4, #8]
 801057a:	6923      	ldr	r3, [r4, #16]
 801057c:	7da0      	ldrb	r0, [r4, #22]
 801057e:	1b92      	subs	r2, r2, r6
 8010580:	1b9b      	subs	r3, r3, r6
 8010582:	7567      	strb	r7, [r4, #21]
 8010584:	f080 0001 	eor.w	r0, r0, #1
 8010588:	60a2      	str	r2, [r4, #8]
 801058a:	6123      	str	r3, [r4, #16]
 801058c:	b002      	add	sp, #8
 801058e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010592:	68a3      	ldr	r3, [r4, #8]
 8010594:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010598:	701a      	strb	r2, [r3, #0]
 801059a:	68a3      	ldr	r3, [r4, #8]
 801059c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80105a0:	701a      	strb	r2, [r3, #0]
 80105a2:	68a3      	ldr	r3, [r4, #8]
 80105a4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80105a8:	701a      	strb	r2, [r3, #0]
 80105aa:	e7ad      	b.n	8010508 <ucdr_serialize_float+0x74>
 80105ac:	4628      	mov	r0, r5
 80105ae:	ad01      	add	r5, sp, #4
 80105b0:	4632      	mov	r2, r6
 80105b2:	4629      	mov	r1, r5
 80105b4:	f00c f9ef 	bl	801c996 <memcpy>
 80105b8:	4642      	mov	r2, r8
 80105ba:	19a9      	adds	r1, r5, r6
 80105bc:	68a0      	ldr	r0, [r4, #8]
 80105be:	f00c f9ea 	bl	801c996 <memcpy>
 80105c2:	e7a1      	b.n	8010508 <ucdr_serialize_float+0x74>

080105c4 <ucdr_deserialize_float>:
 80105c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105c8:	4604      	mov	r4, r0
 80105ca:	460d      	mov	r5, r1
 80105cc:	2104      	movs	r1, #4
 80105ce:	f000 f8e9 	bl	80107a4 <ucdr_buffer_alignment>
 80105d2:	4601      	mov	r1, r0
 80105d4:	4620      	mov	r0, r4
 80105d6:	f894 8015 	ldrb.w	r8, [r4, #21]
 80105da:	f000 f92b 	bl	8010834 <ucdr_advance_buffer>
 80105de:	2104      	movs	r1, #4
 80105e0:	4620      	mov	r0, r4
 80105e2:	f000 f87f 	bl	80106e4 <ucdr_check_buffer_available_for>
 80105e6:	2800      	cmp	r0, #0
 80105e8:	d138      	bne.n	801065c <ucdr_deserialize_float+0x98>
 80105ea:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 80105ee:	42b7      	cmp	r7, r6
 80105f0:	d92f      	bls.n	8010652 <ucdr_deserialize_float+0x8e>
 80105f2:	6923      	ldr	r3, [r4, #16]
 80105f4:	4620      	mov	r0, r4
 80105f6:	60a7      	str	r7, [r4, #8]
 80105f8:	1bbf      	subs	r7, r7, r6
 80105fa:	443b      	add	r3, r7
 80105fc:	f1c7 0904 	rsb	r9, r7, #4
 8010600:	6123      	str	r3, [r4, #16]
 8010602:	4649      	mov	r1, r9
 8010604:	f000 f87a 	bl	80106fc <ucdr_check_final_buffer_behavior>
 8010608:	2800      	cmp	r0, #0
 801060a:	d046      	beq.n	801069a <ucdr_deserialize_float+0xd6>
 801060c:	7d23      	ldrb	r3, [r4, #20]
 801060e:	2b01      	cmp	r3, #1
 8010610:	d05c      	beq.n	80106cc <ucdr_deserialize_float+0x108>
 8010612:	78f3      	ldrb	r3, [r6, #3]
 8010614:	702b      	strb	r3, [r5, #0]
 8010616:	2f00      	cmp	r7, #0
 8010618:	d04c      	beq.n	80106b4 <ucdr_deserialize_float+0xf0>
 801061a:	78b3      	ldrb	r3, [r6, #2]
 801061c:	2f01      	cmp	r7, #1
 801061e:	706b      	strb	r3, [r5, #1]
 8010620:	f105 0302 	add.w	r3, r5, #2
 8010624:	d04a      	beq.n	80106bc <ucdr_deserialize_float+0xf8>
 8010626:	7873      	ldrb	r3, [r6, #1]
 8010628:	2f02      	cmp	r7, #2
 801062a:	70ab      	strb	r3, [r5, #2]
 801062c:	f105 0303 	add.w	r3, r5, #3
 8010630:	d048      	beq.n	80106c4 <ucdr_deserialize_float+0x100>
 8010632:	7833      	ldrb	r3, [r6, #0]
 8010634:	70eb      	strb	r3, [r5, #3]
 8010636:	6923      	ldr	r3, [r4, #16]
 8010638:	2104      	movs	r1, #4
 801063a:	68a2      	ldr	r2, [r4, #8]
 801063c:	3304      	adds	r3, #4
 801063e:	7da0      	ldrb	r0, [r4, #22]
 8010640:	444a      	add	r2, r9
 8010642:	7561      	strb	r1, [r4, #21]
 8010644:	1bdb      	subs	r3, r3, r7
 8010646:	f080 0001 	eor.w	r0, r0, #1
 801064a:	60a2      	str	r2, [r4, #8]
 801064c:	6123      	str	r3, [r4, #16]
 801064e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010652:	2104      	movs	r1, #4
 8010654:	4620      	mov	r0, r4
 8010656:	f000 f851 	bl	80106fc <ucdr_check_final_buffer_behavior>
 801065a:	b1b0      	cbz	r0, 801068a <ucdr_deserialize_float+0xc6>
 801065c:	7d23      	ldrb	r3, [r4, #20]
 801065e:	2b01      	cmp	r3, #1
 8010660:	68a3      	ldr	r3, [r4, #8]
 8010662:	d017      	beq.n	8010694 <ucdr_deserialize_float+0xd0>
 8010664:	78db      	ldrb	r3, [r3, #3]
 8010666:	702b      	strb	r3, [r5, #0]
 8010668:	68a3      	ldr	r3, [r4, #8]
 801066a:	789b      	ldrb	r3, [r3, #2]
 801066c:	706b      	strb	r3, [r5, #1]
 801066e:	68a3      	ldr	r3, [r4, #8]
 8010670:	785b      	ldrb	r3, [r3, #1]
 8010672:	70ab      	strb	r3, [r5, #2]
 8010674:	68a3      	ldr	r3, [r4, #8]
 8010676:	781b      	ldrb	r3, [r3, #0]
 8010678:	70eb      	strb	r3, [r5, #3]
 801067a:	2104      	movs	r1, #4
 801067c:	68a2      	ldr	r2, [r4, #8]
 801067e:	6923      	ldr	r3, [r4, #16]
 8010680:	440a      	add	r2, r1
 8010682:	7561      	strb	r1, [r4, #21]
 8010684:	440b      	add	r3, r1
 8010686:	60a2      	str	r2, [r4, #8]
 8010688:	6123      	str	r3, [r4, #16]
 801068a:	7da0      	ldrb	r0, [r4, #22]
 801068c:	f080 0001 	eor.w	r0, r0, #1
 8010690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	602b      	str	r3, [r5, #0]
 8010698:	e7ef      	b.n	801067a <ucdr_deserialize_float+0xb6>
 801069a:	68a2      	ldr	r2, [r4, #8]
 801069c:	6923      	ldr	r3, [r4, #16]
 801069e:	1bd2      	subs	r2, r2, r7
 80106a0:	7da0      	ldrb	r0, [r4, #22]
 80106a2:	1bdb      	subs	r3, r3, r7
 80106a4:	f884 8015 	strb.w	r8, [r4, #21]
 80106a8:	f080 0001 	eor.w	r0, r0, #1
 80106ac:	60a2      	str	r2, [r4, #8]
 80106ae:	6123      	str	r3, [r4, #16]
 80106b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106b4:	68a3      	ldr	r3, [r4, #8]
 80106b6:	789b      	ldrb	r3, [r3, #2]
 80106b8:	706b      	strb	r3, [r5, #1]
 80106ba:	1cab      	adds	r3, r5, #2
 80106bc:	68a2      	ldr	r2, [r4, #8]
 80106be:	7852      	ldrb	r2, [r2, #1]
 80106c0:	f803 2b01 	strb.w	r2, [r3], #1
 80106c4:	68a2      	ldr	r2, [r4, #8]
 80106c6:	7812      	ldrb	r2, [r2, #0]
 80106c8:	701a      	strb	r2, [r3, #0]
 80106ca:	e7b4      	b.n	8010636 <ucdr_deserialize_float+0x72>
 80106cc:	4631      	mov	r1, r6
 80106ce:	463a      	mov	r2, r7
 80106d0:	4628      	mov	r0, r5
 80106d2:	f00c f960 	bl	801c996 <memcpy>
 80106d6:	464a      	mov	r2, r9
 80106d8:	19e8      	adds	r0, r5, r7
 80106da:	68a1      	ldr	r1, [r4, #8]
 80106dc:	f00c f95b 	bl	801c996 <memcpy>
 80106e0:	e7a9      	b.n	8010636 <ucdr_deserialize_float+0x72>
 80106e2:	bf00      	nop

080106e4 <ucdr_check_buffer_available_for>:
 80106e4:	7d83      	ldrb	r3, [r0, #22]
 80106e6:	b93b      	cbnz	r3, 80106f8 <ucdr_check_buffer_available_for+0x14>
 80106e8:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 80106ec:	4419      	add	r1, r3
 80106ee:	4288      	cmp	r0, r1
 80106f0:	bf34      	ite	cc
 80106f2:	2000      	movcc	r0, #0
 80106f4:	2001      	movcs	r0, #1
 80106f6:	4770      	bx	lr
 80106f8:	2000      	movs	r0, #0
 80106fa:	4770      	bx	lr

080106fc <ucdr_check_final_buffer_behavior>:
 80106fc:	7d83      	ldrb	r3, [r0, #22]
 80106fe:	b943      	cbnz	r3, 8010712 <ucdr_check_final_buffer_behavior+0x16>
 8010700:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8010704:	b510      	push	{r4, lr}
 8010706:	4291      	cmp	r1, r2
 8010708:	4604      	mov	r4, r0
 801070a:	d205      	bcs.n	8010718 <ucdr_check_final_buffer_behavior+0x1c>
 801070c:	2301      	movs	r3, #1
 801070e:	4618      	mov	r0, r3
 8010710:	bd10      	pop	{r4, pc}
 8010712:	2300      	movs	r3, #0
 8010714:	4618      	mov	r0, r3
 8010716:	4770      	bx	lr
 8010718:	6982      	ldr	r2, [r0, #24]
 801071a:	b13a      	cbz	r2, 801072c <ucdr_check_final_buffer_behavior+0x30>
 801071c:	69c1      	ldr	r1, [r0, #28]
 801071e:	4790      	blx	r2
 8010720:	f080 0301 	eor.w	r3, r0, #1
 8010724:	75a0      	strb	r0, [r4, #22]
 8010726:	b2db      	uxtb	r3, r3
 8010728:	4618      	mov	r0, r3
 801072a:	bd10      	pop	{r4, pc}
 801072c:	2001      	movs	r0, #1
 801072e:	75a0      	strb	r0, [r4, #22]
 8010730:	e7fa      	b.n	8010728 <ucdr_check_final_buffer_behavior+0x2c>
 8010732:	bf00      	nop

08010734 <ucdr_set_on_full_buffer_callback>:
 8010734:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8010738:	4770      	bx	lr
 801073a:	bf00      	nop

0801073c <ucdr_init_buffer_origin_offset_endian>:
 801073c:	b410      	push	{r4}
 801073e:	9c01      	ldr	r4, [sp, #4]
 8010740:	440a      	add	r2, r1
 8010742:	6001      	str	r1, [r0, #0]
 8010744:	6042      	str	r2, [r0, #4]
 8010746:	190a      	adds	r2, r1, r4
 8010748:	441c      	add	r4, r3
 801074a:	6082      	str	r2, [r0, #8]
 801074c:	2200      	movs	r2, #0
 801074e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8010752:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010756:	7542      	strb	r2, [r0, #21]
 8010758:	f85d 4b04 	ldr.w	r4, [sp], #4
 801075c:	7582      	strb	r2, [r0, #22]
 801075e:	7503      	strb	r3, [r0, #20]
 8010760:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8010764:	4770      	bx	lr
 8010766:	bf00      	nop

08010768 <ucdr_init_buffer_origin_offset>:
 8010768:	b510      	push	{r4, lr}
 801076a:	b082      	sub	sp, #8
 801076c:	9c04      	ldr	r4, [sp, #16]
 801076e:	9400      	str	r4, [sp, #0]
 8010770:	2401      	movs	r4, #1
 8010772:	9401      	str	r4, [sp, #4]
 8010774:	f7ff ffe2 	bl	801073c <ucdr_init_buffer_origin_offset_endian>
 8010778:	b002      	add	sp, #8
 801077a:	bd10      	pop	{r4, pc}

0801077c <ucdr_init_buffer_origin>:
 801077c:	b510      	push	{r4, lr}
 801077e:	2400      	movs	r4, #0
 8010780:	b082      	sub	sp, #8
 8010782:	9400      	str	r4, [sp, #0]
 8010784:	f7ff fff0 	bl	8010768 <ucdr_init_buffer_origin_offset>
 8010788:	b002      	add	sp, #8
 801078a:	bd10      	pop	{r4, pc}

0801078c <ucdr_init_buffer>:
 801078c:	2300      	movs	r3, #0
 801078e:	f7ff bff5 	b.w	801077c <ucdr_init_buffer_origin>
 8010792:	bf00      	nop

08010794 <ucdr_alignment>:
 8010794:	fbb0 f2f1 	udiv	r2, r0, r1
 8010798:	fb02 0011 	mls	r0, r2, r1, r0
 801079c:	1e4b      	subs	r3, r1, #1
 801079e:	1a08      	subs	r0, r1, r0
 80107a0:	4018      	ands	r0, r3
 80107a2:	4770      	bx	lr

080107a4 <ucdr_buffer_alignment>:
 80107a4:	7d43      	ldrb	r3, [r0, #21]
 80107a6:	428b      	cmp	r3, r1
 80107a8:	d209      	bcs.n	80107be <ucdr_buffer_alignment+0x1a>
 80107aa:	6903      	ldr	r3, [r0, #16]
 80107ac:	1e4a      	subs	r2, r1, #1
 80107ae:	fbb3 f0f1 	udiv	r0, r3, r1
 80107b2:	fb01 3010 	mls	r0, r1, r0, r3
 80107b6:	1a09      	subs	r1, r1, r0
 80107b8:	ea01 0002 	and.w	r0, r1, r2
 80107bc:	4770      	bx	lr
 80107be:	2000      	movs	r0, #0
 80107c0:	4770      	bx	lr
 80107c2:	bf00      	nop

080107c4 <ucdr_align_to>:
 80107c4:	b538      	push	{r3, r4, r5, lr}
 80107c6:	4604      	mov	r4, r0
 80107c8:	460d      	mov	r5, r1
 80107ca:	f7ff ffeb 	bl	80107a4 <ucdr_buffer_alignment>
 80107ce:	68a3      	ldr	r3, [r4, #8]
 80107d0:	7565      	strb	r5, [r4, #21]
 80107d2:	181a      	adds	r2, r3, r0
 80107d4:	6923      	ldr	r3, [r4, #16]
 80107d6:	4418      	add	r0, r3
 80107d8:	6863      	ldr	r3, [r4, #4]
 80107da:	4293      	cmp	r3, r2
 80107dc:	6120      	str	r0, [r4, #16]
 80107de:	bf28      	it	cs
 80107e0:	4613      	movcs	r3, r2
 80107e2:	60a3      	str	r3, [r4, #8]
 80107e4:	bd38      	pop	{r3, r4, r5, pc}
 80107e6:	bf00      	nop

080107e8 <ucdr_buffer_length>:
 80107e8:	6882      	ldr	r2, [r0, #8]
 80107ea:	6800      	ldr	r0, [r0, #0]
 80107ec:	1a10      	subs	r0, r2, r0
 80107ee:	4770      	bx	lr

080107f0 <ucdr_buffer_remaining>:
 80107f0:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 80107f4:	1a10      	subs	r0, r2, r0
 80107f6:	4770      	bx	lr

080107f8 <ucdr_check_final_buffer_behavior_array>:
 80107f8:	b538      	push	{r3, r4, r5, lr}
 80107fa:	7d83      	ldrb	r3, [r0, #22]
 80107fc:	b9a3      	cbnz	r3, 8010828 <ucdr_check_final_buffer_behavior_array+0x30>
 80107fe:	4604      	mov	r4, r0
 8010800:	460d      	mov	r5, r1
 8010802:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8010806:	429a      	cmp	r2, r3
 8010808:	d300      	bcc.n	801080c <ucdr_check_final_buffer_behavior_array+0x14>
 801080a:	b931      	cbnz	r1, 801081a <ucdr_check_final_buffer_behavior_array+0x22>
 801080c:	4620      	mov	r0, r4
 801080e:	f7ff ffef 	bl	80107f0 <ucdr_buffer_remaining>
 8010812:	42a8      	cmp	r0, r5
 8010814:	bf28      	it	cs
 8010816:	4628      	movcs	r0, r5
 8010818:	bd38      	pop	{r3, r4, r5, pc}
 801081a:	6983      	ldr	r3, [r0, #24]
 801081c:	b133      	cbz	r3, 801082c <ucdr_check_final_buffer_behavior_array+0x34>
 801081e:	69c1      	ldr	r1, [r0, #28]
 8010820:	4798      	blx	r3
 8010822:	75a0      	strb	r0, [r4, #22]
 8010824:	2800      	cmp	r0, #0
 8010826:	d0f1      	beq.n	801080c <ucdr_check_final_buffer_behavior_array+0x14>
 8010828:	2000      	movs	r0, #0
 801082a:	bd38      	pop	{r3, r4, r5, pc}
 801082c:	2301      	movs	r3, #1
 801082e:	7583      	strb	r3, [r0, #22]
 8010830:	e7fa      	b.n	8010828 <ucdr_check_final_buffer_behavior_array+0x30>
 8010832:	bf00      	nop

08010834 <ucdr_advance_buffer>:
 8010834:	b538      	push	{r3, r4, r5, lr}
 8010836:	4604      	mov	r4, r0
 8010838:	460d      	mov	r5, r1
 801083a:	f7ff ff53 	bl	80106e4 <ucdr_check_buffer_available_for>
 801083e:	b178      	cbz	r0, 8010860 <ucdr_advance_buffer+0x2c>
 8010840:	6923      	ldr	r3, [r4, #16]
 8010842:	68a2      	ldr	r2, [r4, #8]
 8010844:	442b      	add	r3, r5
 8010846:	442a      	add	r2, r5
 8010848:	6123      	str	r3, [r4, #16]
 801084a:	2301      	movs	r3, #1
 801084c:	60a2      	str	r2, [r4, #8]
 801084e:	7563      	strb	r3, [r4, #21]
 8010850:	bd38      	pop	{r3, r4, r5, pc}
 8010852:	68a2      	ldr	r2, [r4, #8]
 8010854:	1a2d      	subs	r5, r5, r0
 8010856:	6923      	ldr	r3, [r4, #16]
 8010858:	4402      	add	r2, r0
 801085a:	4418      	add	r0, r3
 801085c:	60a2      	str	r2, [r4, #8]
 801085e:	6120      	str	r0, [r4, #16]
 8010860:	4629      	mov	r1, r5
 8010862:	2201      	movs	r2, #1
 8010864:	4620      	mov	r0, r4
 8010866:	f7ff ffc7 	bl	80107f8 <ucdr_check_final_buffer_behavior_array>
 801086a:	2800      	cmp	r0, #0
 801086c:	d1f1      	bne.n	8010852 <ucdr_advance_buffer+0x1e>
 801086e:	2301      	movs	r3, #1
 8010870:	7563      	strb	r3, [r4, #21]
 8010872:	bd38      	pop	{r3, r4, r5, pc}

08010874 <uxr_buffer_delete_entity>:
 8010874:	b510      	push	{r4, lr}
 8010876:	2300      	movs	r3, #0
 8010878:	b08e      	sub	sp, #56	; 0x38
 801087a:	4604      	mov	r4, r0
 801087c:	9103      	str	r1, [sp, #12]
 801087e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010882:	2303      	movs	r3, #3
 8010884:	2204      	movs	r2, #4
 8010886:	9300      	str	r3, [sp, #0]
 8010888:	ab06      	add	r3, sp, #24
 801088a:	f001 f989 	bl	8011ba0 <uxr_prepare_stream_to_write_submessage>
 801088e:	b918      	cbnz	r0, 8010898 <uxr_buffer_delete_entity+0x24>
 8010890:	4604      	mov	r4, r0
 8010892:	4620      	mov	r0, r4
 8010894:	b00e      	add	sp, #56	; 0x38
 8010896:	bd10      	pop	{r4, pc}
 8010898:	9902      	ldr	r1, [sp, #8]
 801089a:	aa05      	add	r2, sp, #20
 801089c:	4620      	mov	r0, r4
 801089e:	f001 fabb 	bl	8011e18 <uxr_init_base_object_request>
 80108a2:	4604      	mov	r4, r0
 80108a4:	a905      	add	r1, sp, #20
 80108a6:	a806      	add	r0, sp, #24
 80108a8:	f002 fd44 	bl	8013334 <uxr_serialize_DELETE_Payload>
 80108ac:	4620      	mov	r0, r4
 80108ae:	b00e      	add	sp, #56	; 0x38
 80108b0:	bd10      	pop	{r4, pc}
 80108b2:	bf00      	nop

080108b4 <uxr_common_create_entity>:
 80108b4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80108b8:	b510      	push	{r4, lr}
 80108ba:	f1bc 0f01 	cmp.w	ip, #1
 80108be:	b08c      	sub	sp, #48	; 0x30
 80108c0:	4604      	mov	r4, r0
 80108c2:	9202      	str	r2, [sp, #8]
 80108c4:	bf0c      	ite	eq
 80108c6:	f003 0201 	andeq.w	r2, r3, #1
 80108ca:	2200      	movne	r2, #0
 80108cc:	330e      	adds	r3, #14
 80108ce:	9103      	str	r1, [sp, #12]
 80108d0:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 80108d4:	441a      	add	r2, r3
 80108d6:	ab04      	add	r3, sp, #16
 80108d8:	9101      	str	r1, [sp, #4]
 80108da:	2101      	movs	r1, #1
 80108dc:	b292      	uxth	r2, r2
 80108de:	9100      	str	r1, [sp, #0]
 80108e0:	9903      	ldr	r1, [sp, #12]
 80108e2:	f001 f95d 	bl	8011ba0 <uxr_prepare_stream_to_write_submessage>
 80108e6:	b918      	cbnz	r0, 80108f0 <uxr_common_create_entity+0x3c>
 80108e8:	4604      	mov	r4, r0
 80108ea:	4620      	mov	r0, r4
 80108ec:	b00c      	add	sp, #48	; 0x30
 80108ee:	bd10      	pop	{r4, pc}
 80108f0:	9902      	ldr	r1, [sp, #8]
 80108f2:	4620      	mov	r0, r4
 80108f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80108f6:	f001 fa8f 	bl	8011e18 <uxr_init_base_object_request>
 80108fa:	4604      	mov	r4, r0
 80108fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80108fe:	a804      	add	r0, sp, #16
 8010900:	f002 fc72 	bl	80131e8 <uxr_serialize_CREATE_Payload>
 8010904:	4620      	mov	r0, r4
 8010906:	b00c      	add	sp, #48	; 0x30
 8010908:	bd10      	pop	{r4, pc}
 801090a:	bf00      	nop

0801090c <uxr_buffer_create_participant_bin>:
 801090c:	b570      	push	{r4, r5, r6, lr}
 801090e:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8010912:	4605      	mov	r5, r0
 8010914:	ac11      	add	r4, sp, #68	; 0x44
 8010916:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 801091a:	2303      	movs	r3, #3
 801091c:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 8010920:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010924:	7223      	strb	r3, [r4, #8]
 8010926:	2300      	movs	r3, #0
 8010928:	2201      	movs	r2, #1
 801092a:	f88d 3014 	strb.w	r3, [sp, #20]
 801092e:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8010930:	7122      	strb	r2, [r4, #4]
 8010932:	b1cb      	cbz	r3, 8010968 <uxr_buffer_create_participant_bin+0x5c>
 8010934:	f88d 201c 	strb.w	r2, [sp, #28]
 8010938:	9308      	str	r3, [sp, #32]
 801093a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801093e:	a915      	add	r1, sp, #84	; 0x54
 8010940:	a809      	add	r0, sp, #36	; 0x24
 8010942:	f7ff ff23 	bl	801078c <ucdr_init_buffer>
 8010946:	a905      	add	r1, sp, #20
 8010948:	a809      	add	r0, sp, #36	; 0x24
 801094a:	f002 f803 	bl	8012954 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801094e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010950:	9600      	str	r6, [sp, #0]
 8010952:	4628      	mov	r0, r5
 8010954:	9401      	str	r4, [sp, #4]
 8010956:	60e3      	str	r3, [r4, #12]
 8010958:	b29b      	uxth	r3, r3
 801095a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801095e:	f7ff ffa9 	bl	80108b4 <uxr_common_create_entity>
 8010962:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 8010966:	bd70      	pop	{r4, r5, r6, pc}
 8010968:	f88d 301c 	strb.w	r3, [sp, #28]
 801096c:	e7e5      	b.n	801093a <uxr_buffer_create_participant_bin+0x2e>
 801096e:	bf00      	nop

08010970 <uxr_buffer_create_topic_bin>:
 8010970:	b570      	push	{r4, r5, r6, lr}
 8010972:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8010976:	4605      	mov	r5, r0
 8010978:	4618      	mov	r0, r3
 801097a:	9105      	str	r1, [sp, #20]
 801097c:	a997      	add	r1, sp, #604	; 0x25c
 801097e:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 8010982:	ac13      	add	r4, sp, #76	; 0x4c
 8010984:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010988:	2302      	movs	r3, #2
 801098a:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 801098e:	f000 f9cf 	bl	8010d30 <uxr_object_id_to_raw>
 8010992:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 8010994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010998:	a917      	add	r1, sp, #92	; 0x5c
 801099a:	a80b      	add	r0, sp, #44	; 0x2c
 801099c:	9306      	str	r3, [sp, #24]
 801099e:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 80109a0:	930a      	str	r3, [sp, #40]	; 0x28
 80109a2:	2303      	movs	r3, #3
 80109a4:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 80109a8:	2301      	movs	r3, #1
 80109aa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80109ae:	2300      	movs	r3, #0
 80109b0:	f88d 301c 	strb.w	r3, [sp, #28]
 80109b4:	f7ff feea 	bl	801078c <ucdr_init_buffer>
 80109b8:	a906      	add	r1, sp, #24
 80109ba:	a80b      	add	r0, sp, #44	; 0x2c
 80109bc:	f001 ffec 	bl	8012998 <uxr_serialize_OBJK_Topic_Binary>
 80109c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80109c2:	4628      	mov	r0, r5
 80109c4:	9600      	str	r6, [sp, #0]
 80109c6:	9316      	str	r3, [sp, #88]	; 0x58
 80109c8:	b29b      	uxth	r3, r3
 80109ca:	9401      	str	r4, [sp, #4]
 80109cc:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80109d0:	f7ff ff70 	bl	80108b4 <uxr_common_create_entity>
 80109d4:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 80109d8:	bd70      	pop	{r4, r5, r6, pc}
 80109da:	bf00      	nop

080109dc <uxr_buffer_create_publisher_bin>:
 80109dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109de:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 80109e2:	2603      	movs	r6, #3
 80109e4:	4605      	mov	r5, r0
 80109e6:	4618      	mov	r0, r3
 80109e8:	9105      	str	r1, [sp, #20]
 80109ea:	a992      	add	r1, sp, #584	; 0x248
 80109ec:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 80109f0:	ac0e      	add	r4, sp, #56	; 0x38
 80109f2:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 80109f6:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80109fa:	f000 f999 	bl	8010d30 <uxr_object_id_to_raw>
 80109fe:	2300      	movs	r3, #0
 8010a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010a04:	a912      	add	r1, sp, #72	; 0x48
 8010a06:	a806      	add	r0, sp, #24
 8010a08:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8010a0c:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8010a10:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8010a14:	f7ff feba 	bl	801078c <ucdr_init_buffer>
 8010a18:	a993      	add	r1, sp, #588	; 0x24c
 8010a1a:	a806      	add	r0, sp, #24
 8010a1c:	f002 f870 	bl	8012b00 <uxr_serialize_OBJK_Publisher_Binary>
 8010a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a22:	4628      	mov	r0, r5
 8010a24:	9700      	str	r7, [sp, #0]
 8010a26:	9311      	str	r3, [sp, #68]	; 0x44
 8010a28:	b29b      	uxth	r3, r3
 8010a2a:	9401      	str	r4, [sp, #4]
 8010a2c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010a30:	f7ff ff40 	bl	80108b4 <uxr_common_create_entity>
 8010a34:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8010a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a3a:	bf00      	nop

08010a3c <uxr_buffer_create_subscriber_bin>:
 8010a3c:	b570      	push	{r4, r5, r6, lr}
 8010a3e:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 8010a42:	4605      	mov	r5, r0
 8010a44:	4618      	mov	r0, r3
 8010a46:	9105      	str	r1, [sp, #20]
 8010a48:	a992      	add	r1, sp, #584	; 0x248
 8010a4a:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 8010a4e:	ac0e      	add	r4, sp, #56	; 0x38
 8010a50:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010a54:	2304      	movs	r3, #4
 8010a56:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8010a5a:	f000 f969 	bl	8010d30 <uxr_object_id_to_raw>
 8010a5e:	2300      	movs	r3, #0
 8010a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010a64:	a912      	add	r1, sp, #72	; 0x48
 8010a66:	a806      	add	r0, sp, #24
 8010a68:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8010a6c:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8010a70:	2303      	movs	r3, #3
 8010a72:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8010a76:	f7ff fe89 	bl	801078c <ucdr_init_buffer>
 8010a7a:	a993      	add	r1, sp, #588	; 0x24c
 8010a7c:	a806      	add	r0, sp, #24
 8010a7e:	f002 f8ef 	bl	8012c60 <uxr_serialize_OBJK_Subscriber_Binary>
 8010a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a84:	4628      	mov	r0, r5
 8010a86:	9600      	str	r6, [sp, #0]
 8010a88:	9311      	str	r3, [sp, #68]	; 0x44
 8010a8a:	b29b      	uxth	r3, r3
 8010a8c:	9401      	str	r4, [sp, #4]
 8010a8e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010a92:	f7ff ff0f 	bl	80108b4 <uxr_common_create_entity>
 8010a96:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 8010a9a:	bd70      	pop	{r4, r5, r6, pc}

08010a9c <uxr_buffer_create_datawriter_bin>:
 8010a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010aa0:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8010aa4:	4606      	mov	r6, r0
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	2703      	movs	r7, #3
 8010aaa:	ac1d      	add	r4, sp, #116	; 0x74
 8010aac:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8010ab0:	9105      	str	r1, [sp, #20]
 8010ab2:	a9a1      	add	r1, sp, #644	; 0x284
 8010ab4:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8010ab8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010abc:	2305      	movs	r3, #5
 8010abe:	7123      	strb	r3, [r4, #4]
 8010ac0:	f000 f936 	bl	8010d30 <uxr_object_id_to_raw>
 8010ac4:	a90e      	add	r1, sp, #56	; 0x38
 8010ac6:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8010ac8:	7227      	strb	r7, [r4, #8]
 8010aca:	f000 f931 	bl	8010d30 <uxr_object_id_to_raw>
 8010ace:	2300      	movs	r3, #0
 8010ad0:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8010ad4:	3d00      	subs	r5, #0
 8010ad6:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 8010ada:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8010ade:	bf18      	it	ne
 8010ae0:	2501      	movne	r5, #1
 8010ae2:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8010ae6:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8010aea:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8010aee:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010af2:	2301      	movs	r3, #1
 8010af4:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8010af8:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8010afc:	bb8a      	cbnz	r2, 8010b62 <uxr_buffer_create_datawriter_bin+0xc6>
 8010afe:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8010b02:	f04f 0c13 	mov.w	ip, #19
 8010b06:	250b      	movs	r5, #11
 8010b08:	2221      	movs	r2, #33	; 0x21
 8010b0a:	2111      	movs	r1, #17
 8010b0c:	2009      	movs	r0, #9
 8010b0e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010b12:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8010b16:	b923      	cbnz	r3, 8010b22 <uxr_buffer_create_datawriter_bin+0x86>
 8010b18:	4672      	mov	r2, lr
 8010b1a:	4661      	mov	r1, ip
 8010b1c:	4628      	mov	r0, r5
 8010b1e:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8010b22:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8010b26:	2b01      	cmp	r3, #1
 8010b28:	d025      	beq.n	8010b76 <uxr_buffer_create_datawriter_bin+0xda>
 8010b2a:	2b03      	cmp	r3, #3
 8010b2c:	d029      	beq.n	8010b82 <uxr_buffer_create_datawriter_bin+0xe6>
 8010b2e:	b32b      	cbz	r3, 8010b7c <uxr_buffer_create_datawriter_bin+0xe0>
 8010b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010b34:	a921      	add	r1, sp, #132	; 0x84
 8010b36:	a806      	add	r0, sp, #24
 8010b38:	f7ff fe28 	bl	801078c <ucdr_init_buffer>
 8010b3c:	a90e      	add	r1, sp, #56	; 0x38
 8010b3e:	a806      	add	r0, sp, #24
 8010b40:	f002 f940 	bl	8012dc4 <uxr_serialize_OBJK_DataWriter_Binary>
 8010b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b46:	f8cd 8000 	str.w	r8, [sp]
 8010b4a:	4630      	mov	r0, r6
 8010b4c:	9401      	str	r4, [sp, #4]
 8010b4e:	60e3      	str	r3, [r4, #12]
 8010b50:	b29b      	uxth	r3, r3
 8010b52:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010b56:	f7ff fead 	bl	80108b4 <uxr_common_create_entity>
 8010b5a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8010b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b62:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8010b66:	f04f 0c12 	mov.w	ip, #18
 8010b6a:	250a      	movs	r5, #10
 8010b6c:	2220      	movs	r2, #32
 8010b6e:	2110      	movs	r1, #16
 8010b70:	2008      	movs	r0, #8
 8010b72:	2702      	movs	r7, #2
 8010b74:	e7cd      	b.n	8010b12 <uxr_buffer_create_datawriter_bin+0x76>
 8010b76:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8010b7a:	e7d9      	b.n	8010b30 <uxr_buffer_create_datawriter_bin+0x94>
 8010b7c:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8010b80:	e7d6      	b.n	8010b30 <uxr_buffer_create_datawriter_bin+0x94>
 8010b82:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8010b86:	e7d3      	b.n	8010b30 <uxr_buffer_create_datawriter_bin+0x94>

08010b88 <uxr_buffer_create_datareader_bin>:
 8010b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b8c:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8010b90:	4606      	mov	r6, r0
 8010b92:	4618      	mov	r0, r3
 8010b94:	2703      	movs	r7, #3
 8010b96:	ac1f      	add	r4, sp, #124	; 0x7c
 8010b98:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 8010b9c:	9105      	str	r1, [sp, #20]
 8010b9e:	a9a3      	add	r1, sp, #652	; 0x28c
 8010ba0:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 8010ba4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010ba8:	2306      	movs	r3, #6
 8010baa:	7123      	strb	r3, [r4, #4]
 8010bac:	f000 f8c0 	bl	8010d30 <uxr_object_id_to_raw>
 8010bb0:	a90e      	add	r1, sp, #56	; 0x38
 8010bb2:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 8010bb4:	7227      	strb	r7, [r4, #8]
 8010bb6:	f000 f8bb 	bl	8010d30 <uxr_object_id_to_raw>
 8010bba:	2300      	movs	r3, #0
 8010bbc:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8010bc0:	3d00      	subs	r5, #0
 8010bc2:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 8010bc6:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8010bca:	bf18      	it	ne
 8010bcc:	2501      	movne	r5, #1
 8010bce:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8010bd2:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8010bd6:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8010bda:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8010bde:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010be2:	2301      	movs	r3, #1
 8010be4:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8010be8:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8010bec:	bb8a      	cbnz	r2, 8010c52 <uxr_buffer_create_datareader_bin+0xca>
 8010bee:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8010bf2:	f04f 0c13 	mov.w	ip, #19
 8010bf6:	250b      	movs	r5, #11
 8010bf8:	2221      	movs	r2, #33	; 0x21
 8010bfa:	2111      	movs	r1, #17
 8010bfc:	2009      	movs	r0, #9
 8010bfe:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010c02:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 8010c06:	b923      	cbnz	r3, 8010c12 <uxr_buffer_create_datareader_bin+0x8a>
 8010c08:	4672      	mov	r2, lr
 8010c0a:	4661      	mov	r1, ip
 8010c0c:	4628      	mov	r0, r5
 8010c0e:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8010c12:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 8010c16:	2b01      	cmp	r3, #1
 8010c18:	d025      	beq.n	8010c66 <uxr_buffer_create_datareader_bin+0xde>
 8010c1a:	2b03      	cmp	r3, #3
 8010c1c:	d029      	beq.n	8010c72 <uxr_buffer_create_datareader_bin+0xea>
 8010c1e:	b32b      	cbz	r3, 8010c6c <uxr_buffer_create_datareader_bin+0xe4>
 8010c20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010c24:	a923      	add	r1, sp, #140	; 0x8c
 8010c26:	a806      	add	r0, sp, #24
 8010c28:	f7ff fdb0 	bl	801078c <ucdr_init_buffer>
 8010c2c:	a90e      	add	r1, sp, #56	; 0x38
 8010c2e:	a806      	add	r0, sp, #24
 8010c30:	f002 f88c 	bl	8012d4c <uxr_serialize_OBJK_DataReader_Binary>
 8010c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010c36:	f8cd 8000 	str.w	r8, [sp]
 8010c3a:	4630      	mov	r0, r6
 8010c3c:	9401      	str	r4, [sp, #4]
 8010c3e:	60e3      	str	r3, [r4, #12]
 8010c40:	b29b      	uxth	r3, r3
 8010c42:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010c46:	f7ff fe35 	bl	80108b4 <uxr_common_create_entity>
 8010c4a:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8010c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c52:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8010c56:	f04f 0c12 	mov.w	ip, #18
 8010c5a:	250a      	movs	r5, #10
 8010c5c:	2220      	movs	r2, #32
 8010c5e:	2110      	movs	r1, #16
 8010c60:	2008      	movs	r0, #8
 8010c62:	2702      	movs	r7, #2
 8010c64:	e7cd      	b.n	8010c02 <uxr_buffer_create_datareader_bin+0x7a>
 8010c66:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8010c6a:	e7d9      	b.n	8010c20 <uxr_buffer_create_datareader_bin+0x98>
 8010c6c:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8010c70:	e7d6      	b.n	8010c20 <uxr_buffer_create_datareader_bin+0x98>
 8010c72:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8010c76:	e7d3      	b.n	8010c20 <uxr_buffer_create_datareader_bin+0x98>

08010c78 <uxr_buffer_create_replier_bin>:
 8010c78:	b570      	push	{r4, r5, r6, lr}
 8010c7a:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8010c7e:	4605      	mov	r5, r0
 8010c80:	4618      	mov	r0, r3
 8010c82:	9105      	str	r1, [sp, #20]
 8010c84:	a999      	add	r1, sp, #612	; 0x264
 8010c86:	f89d 6294 	ldrb.w	r6, [sp, #660]	; 0x294
 8010c8a:	ac15      	add	r4, sp, #84	; 0x54
 8010c8c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010c90:	2308      	movs	r3, #8
 8010c92:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8010c96:	f000 f84b 	bl	8010d30 <uxr_object_id_to_raw>
 8010c9a:	9b9e      	ldr	r3, [sp, #632]	; 0x278
 8010c9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010ca0:	a919      	add	r1, sp, #100	; 0x64
 8010ca2:	a80d      	add	r0, sp, #52	; 0x34
 8010ca4:	9306      	str	r3, [sp, #24]
 8010ca6:	9b9f      	ldr	r3, [sp, #636]	; 0x27c
 8010ca8:	9307      	str	r3, [sp, #28]
 8010caa:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 8010cac:	9308      	str	r3, [sp, #32]
 8010cae:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8010cb0:	930c      	str	r3, [sp, #48]	; 0x30
 8010cb2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010cb4:	930a      	str	r3, [sp, #40]	; 0x28
 8010cb6:	2301      	movs	r3, #1
 8010cb8:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8010cbc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8010cc0:	2303      	movs	r3, #3
 8010cc2:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8010cc6:	f7ff fd61 	bl	801078c <ucdr_init_buffer>
 8010cca:	a906      	add	r1, sp, #24
 8010ccc:	a80d      	add	r0, sp, #52	; 0x34
 8010cce:	f002 f8a5 	bl	8012e1c <uxr_serialize_OBJK_Replier_Binary>
 8010cd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010cd4:	4628      	mov	r0, r5
 8010cd6:	9600      	str	r6, [sp, #0]
 8010cd8:	9318      	str	r3, [sp, #96]	; 0x60
 8010cda:	b29b      	uxth	r3, r3
 8010cdc:	9401      	str	r4, [sp, #4]
 8010cde:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010ce2:	f7ff fde7 	bl	80108b4 <uxr_common_create_entity>
 8010ce6:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
 8010cea:	bd70      	pop	{r4, r5, r6, pc}

08010cec <uxr_object_id>:
 8010cec:	b082      	sub	sp, #8
 8010cee:	2300      	movs	r3, #0
 8010cf0:	f88d 1006 	strb.w	r1, [sp, #6]
 8010cf4:	f360 030f 	bfi	r3, r0, #0, #16
 8010cf8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010cfc:	f362 431f 	bfi	r3, r2, #16, #16
 8010d00:	4618      	mov	r0, r3
 8010d02:	b002      	add	sp, #8
 8010d04:	4770      	bx	lr
 8010d06:	bf00      	nop

08010d08 <uxr_object_id_from_raw>:
 8010d08:	7843      	ldrb	r3, [r0, #1]
 8010d0a:	b082      	sub	sp, #8
 8010d0c:	7801      	ldrb	r1, [r0, #0]
 8010d0e:	2000      	movs	r0, #0
 8010d10:	091a      	lsrs	r2, r3, #4
 8010d12:	f003 030f 	and.w	r3, r3, #15
 8010d16:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8010d1a:	f88d 3006 	strb.w	r3, [sp, #6]
 8010d1e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010d22:	f362 000f 	bfi	r0, r2, #0, #16
 8010d26:	f363 401f 	bfi	r0, r3, #16, #16
 8010d2a:	b002      	add	sp, #8
 8010d2c:	4770      	bx	lr
 8010d2e:	bf00      	nop

08010d30 <uxr_object_id_to_raw>:
 8010d30:	4602      	mov	r2, r0
 8010d32:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8010d36:	b082      	sub	sp, #8
 8010d38:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8010d3c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8010d40:	f881 c000 	strb.w	ip, [r1]
 8010d44:	7048      	strb	r0, [r1, #1]
 8010d46:	b002      	add	sp, #8
 8010d48:	4770      	bx	lr
 8010d4a:	bf00      	nop

08010d4c <on_get_fragmentation_info>:
 8010d4c:	b500      	push	{lr}
 8010d4e:	b08b      	sub	sp, #44	; 0x2c
 8010d50:	4601      	mov	r1, r0
 8010d52:	2204      	movs	r2, #4
 8010d54:	a802      	add	r0, sp, #8
 8010d56:	f7ff fd19 	bl	801078c <ucdr_init_buffer>
 8010d5a:	f10d 0305 	add.w	r3, sp, #5
 8010d5e:	f10d 0206 	add.w	r2, sp, #6
 8010d62:	a901      	add	r1, sp, #4
 8010d64:	a802      	add	r0, sp, #8
 8010d66:	f001 f9e1 	bl	801212c <uxr_read_submessage_header>
 8010d6a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010d6e:	2b0d      	cmp	r3, #13
 8010d70:	d003      	beq.n	8010d7a <on_get_fragmentation_info+0x2e>
 8010d72:	2000      	movs	r0, #0
 8010d74:	b00b      	add	sp, #44	; 0x2c
 8010d76:	f85d fb04 	ldr.w	pc, [sp], #4
 8010d7a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010d7e:	f013 0f02 	tst.w	r3, #2
 8010d82:	bf14      	ite	ne
 8010d84:	2002      	movne	r0, #2
 8010d86:	2001      	moveq	r0, #1
 8010d88:	b00b      	add	sp, #44	; 0x2c
 8010d8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010d8e:	bf00      	nop

08010d90 <read_submessage_get_info>:
 8010d90:	b570      	push	{r4, r5, r6, lr}
 8010d92:	2500      	movs	r5, #0
 8010d94:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8010d98:	460e      	mov	r6, r1
 8010d9a:	4604      	mov	r4, r0
 8010d9c:	f44f 7224 	mov.w	r2, #656	; 0x290
 8010da0:	4629      	mov	r1, r5
 8010da2:	a810      	add	r0, sp, #64	; 0x40
 8010da4:	9503      	str	r5, [sp, #12]
 8010da6:	9504      	str	r5, [sp, #16]
 8010da8:	f00b fcc4 	bl	801c734 <memset>
 8010dac:	a903      	add	r1, sp, #12
 8010dae:	4630      	mov	r0, r6
 8010db0:	f002 faaa 	bl	8013308 <uxr_deserialize_GET_INFO_Payload>
 8010db4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8010db8:	4620      	mov	r0, r4
 8010dba:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8010dbe:	f001 f823 	bl	8011e08 <uxr_session_header_offset>
 8010dc2:	462b      	mov	r3, r5
 8010dc4:	220c      	movs	r2, #12
 8010dc6:	a905      	add	r1, sp, #20
 8010dc8:	9000      	str	r0, [sp, #0]
 8010dca:	a808      	add	r0, sp, #32
 8010dcc:	f7ff fccc 	bl	8010768 <ucdr_init_buffer_origin_offset>
 8010dd0:	a910      	add	r1, sp, #64	; 0x40
 8010dd2:	a808      	add	r0, sp, #32
 8010dd4:	f002 fb0c 	bl	80133f0 <uxr_serialize_INFO_Payload>
 8010dd8:	9b08      	ldr	r3, [sp, #32]
 8010dda:	462a      	mov	r2, r5
 8010ddc:	4629      	mov	r1, r5
 8010dde:	4620      	mov	r0, r4
 8010de0:	f000 ffbe 	bl	8011d60 <uxr_stamp_session_header>
 8010de4:	a808      	add	r0, sp, #32
 8010de6:	f7ff fcff 	bl	80107e8 <ucdr_buffer_length>
 8010dea:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8010dec:	4602      	mov	r2, r0
 8010dee:	a905      	add	r1, sp, #20
 8010df0:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010df4:	47a0      	blx	r4
 8010df6:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 8010dfa:	bd70      	pop	{r4, r5, r6, pc}

08010dfc <write_submessage_acknack.isra.0>:
 8010dfc:	b570      	push	{r4, r5, r6, lr}
 8010dfe:	b092      	sub	sp, #72	; 0x48
 8010e00:	4605      	mov	r5, r0
 8010e02:	460e      	mov	r6, r1
 8010e04:	4614      	mov	r4, r2
 8010e06:	f000 ffff 	bl	8011e08 <uxr_session_header_offset>
 8010e0a:	a905      	add	r1, sp, #20
 8010e0c:	9000      	str	r0, [sp, #0]
 8010e0e:	2300      	movs	r3, #0
 8010e10:	a80a      	add	r0, sp, #40	; 0x28
 8010e12:	2211      	movs	r2, #17
 8010e14:	f7ff fca8 	bl	8010768 <ucdr_init_buffer_origin_offset>
 8010e18:	2218      	movs	r2, #24
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	210a      	movs	r1, #10
 8010e1e:	fb02 5404 	mla	r4, r2, r4, r5
 8010e22:	a80a      	add	r0, sp, #40	; 0x28
 8010e24:	2205      	movs	r2, #5
 8010e26:	3450      	adds	r4, #80	; 0x50
 8010e28:	f001 f966 	bl	80120f8 <uxr_buffer_submessage_header>
 8010e2c:	a903      	add	r1, sp, #12
 8010e2e:	4620      	mov	r0, r4
 8010e30:	f009 f810 	bl	8019e54 <uxr_compute_acknack>
 8010e34:	ba40      	rev16	r0, r0
 8010e36:	a903      	add	r1, sp, #12
 8010e38:	f88d 6010 	strb.w	r6, [sp, #16]
 8010e3c:	f8ad 000e 	strh.w	r0, [sp, #14]
 8010e40:	a80a      	add	r0, sp, #40	; 0x28
 8010e42:	f002 fb47 	bl	80134d4 <uxr_serialize_ACKNACK_Payload>
 8010e46:	2200      	movs	r2, #0
 8010e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e4a:	4628      	mov	r0, r5
 8010e4c:	4611      	mov	r1, r2
 8010e4e:	f000 ff87 	bl	8011d60 <uxr_stamp_session_header>
 8010e52:	a80a      	add	r0, sp, #40	; 0x28
 8010e54:	f7ff fcc8 	bl	80107e8 <ucdr_buffer_length>
 8010e58:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8010e5a:	4602      	mov	r2, r0
 8010e5c:	a905      	add	r1, sp, #20
 8010e5e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8010e62:	47a0      	blx	r4
 8010e64:	b012      	add	sp, #72	; 0x48
 8010e66:	bd70      	pop	{r4, r5, r6, pc}

08010e68 <uxr_init_session>:
 8010e68:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8010ea0 <uxr_init_session+0x38>
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	b510      	push	{r4, lr}
 8010e70:	4604      	mov	r4, r0
 8010e72:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 8010e76:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 8010e7a:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 8010e7e:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 8010e82:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 8010e86:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 8010e8a:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 8010e8e:	2181      	movs	r1, #129	; 0x81
 8010e90:	f000 feca 	bl	8011c28 <uxr_init_session_info>
 8010e94:	f104 0008 	add.w	r0, r4, #8
 8010e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e9c:	f001 b848 	b.w	8011f30 <uxr_init_stream_storage>
	...

08010ea8 <uxr_set_status_callback>:
 8010ea8:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8010eac:	4770      	bx	lr
 8010eae:	bf00      	nop

08010eb0 <uxr_set_topic_callback>:
 8010eb0:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8010eb4:	4770      	bx	lr
 8010eb6:	bf00      	nop

08010eb8 <uxr_set_request_callback>:
 8010eb8:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8010ebc:	4770      	bx	lr
 8010ebe:	bf00      	nop

08010ec0 <uxr_set_reply_callback>:
 8010ec0:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8010ec4:	4770      	bx	lr
 8010ec6:	bf00      	nop

08010ec8 <uxr_create_output_best_effort_stream>:
 8010ec8:	b510      	push	{r4, lr}
 8010eca:	4604      	mov	r4, r0
 8010ecc:	b084      	sub	sp, #16
 8010ece:	e9cd 2100 	strd	r2, r1, [sp]
 8010ed2:	f000 ff99 	bl	8011e08 <uxr_session_header_offset>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	f104 0008 	add.w	r0, r4, #8
 8010edc:	e9dd 2100 	ldrd	r2, r1, [sp]
 8010ee0:	b004      	add	sp, #16
 8010ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ee6:	f001 b869 	b.w	8011fbc <uxr_add_output_best_effort_buffer>
 8010eea:	bf00      	nop

08010eec <uxr_create_output_reliable_stream>:
 8010eec:	b530      	push	{r4, r5, lr}
 8010eee:	b089      	sub	sp, #36	; 0x24
 8010ef0:	4604      	mov	r4, r0
 8010ef2:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8010ef6:	9303      	str	r3, [sp, #12]
 8010ef8:	f000 ff86 	bl	8011e08 <uxr_session_header_offset>
 8010efc:	4605      	mov	r5, r0
 8010efe:	9905      	ldr	r1, [sp, #20]
 8010f00:	f104 0008 	add.w	r0, r4, #8
 8010f04:	9500      	str	r5, [sp, #0]
 8010f06:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8010f0a:	f001 f86b 	bl	8011fe4 <uxr_add_output_reliable_buffer>
 8010f0e:	2200      	movs	r2, #0
 8010f10:	fa5f fc80 	uxtb.w	ip, r0
 8010f14:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8010f18:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8010f1c:	0e03      	lsrs	r3, r0, #24
 8010f1e:	f36c 0207 	bfi	r2, ip, #0, #8
 8010f22:	f364 220f 	bfi	r2, r4, #8, #8
 8010f26:	f361 4217 	bfi	r2, r1, #16, #8
 8010f2a:	f363 621f 	bfi	r2, r3, #24, #8
 8010f2e:	4610      	mov	r0, r2
 8010f30:	b009      	add	sp, #36	; 0x24
 8010f32:	bd30      	pop	{r4, r5, pc}

08010f34 <uxr_create_input_best_effort_stream>:
 8010f34:	b082      	sub	sp, #8
 8010f36:	3008      	adds	r0, #8
 8010f38:	b002      	add	sp, #8
 8010f3a:	f001 b86d 	b.w	8012018 <uxr_add_input_best_effort_buffer>
 8010f3e:	bf00      	nop

08010f40 <uxr_create_input_reliable_stream>:
 8010f40:	b510      	push	{r4, lr}
 8010f42:	4c0c      	ldr	r4, [pc, #48]	; (8010f74 <uxr_create_input_reliable_stream+0x34>)
 8010f44:	b084      	sub	sp, #16
 8010f46:	3008      	adds	r0, #8
 8010f48:	9400      	str	r4, [sp, #0]
 8010f4a:	f001 f87b 	bl	8012044 <uxr_add_input_reliable_buffer>
 8010f4e:	2200      	movs	r2, #0
 8010f50:	fa5f fe80 	uxtb.w	lr, r0
 8010f54:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8010f58:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8010f5c:	0e03      	lsrs	r3, r0, #24
 8010f5e:	f36e 0207 	bfi	r2, lr, #0, #8
 8010f62:	f36c 220f 	bfi	r2, ip, #8, #8
 8010f66:	f361 4217 	bfi	r2, r1, #16, #8
 8010f6a:	f363 621f 	bfi	r2, r3, #24, #8
 8010f6e:	4610      	mov	r0, r2
 8010f70:	b004      	add	sp, #16
 8010f72:	bd10      	pop	{r4, pc}
 8010f74:	08010d4d 	.word	0x08010d4d

08010f78 <uxr_epoch_nanos>:
 8010f78:	b510      	push	{r4, lr}
 8010f7a:	4604      	mov	r4, r0
 8010f7c:	f001 f91e 	bl	80121bc <uxr_nanos>
 8010f80:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8010f84:	1ac0      	subs	r0, r0, r3
 8010f86:	eb61 0102 	sbc.w	r1, r1, r2
 8010f8a:	bd10      	pop	{r4, pc}

08010f8c <uxr_flash_output_streams>:
 8010f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f90:	7e03      	ldrb	r3, [r0, #24]
 8010f92:	b084      	sub	sp, #16
 8010f94:	4604      	mov	r4, r0
 8010f96:	b1fb      	cbz	r3, 8010fd8 <uxr_flash_output_streams+0x4c>
 8010f98:	f04f 0900 	mov.w	r9, #0
 8010f9c:	f10d 0802 	add.w	r8, sp, #2
 8010fa0:	af03      	add	r7, sp, #12
 8010fa2:	ae02      	add	r6, sp, #8
 8010fa4:	4648      	mov	r0, r9
 8010fa6:	2201      	movs	r2, #1
 8010fa8:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8010fac:	4611      	mov	r1, r2
 8010fae:	3508      	adds	r5, #8
 8010fb0:	f000 ff64 	bl	8011e7c <uxr_stream_id>
 8010fb4:	4684      	mov	ip, r0
 8010fb6:	4643      	mov	r3, r8
 8010fb8:	463a      	mov	r2, r7
 8010fba:	4631      	mov	r1, r6
 8010fbc:	4628      	mov	r0, r5
 8010fbe:	f8cd c004 	str.w	ip, [sp, #4]
 8010fc2:	f008 ffd1 	bl	8019f68 <uxr_prepare_best_effort_buffer_to_send>
 8010fc6:	2800      	cmp	r0, #0
 8010fc8:	d13d      	bne.n	8011046 <uxr_flash_output_streams+0xba>
 8010fca:	f109 0901 	add.w	r9, r9, #1
 8010fce:	7e23      	ldrb	r3, [r4, #24]
 8010fd0:	fa5f f089 	uxtb.w	r0, r9
 8010fd4:	4283      	cmp	r3, r0
 8010fd6:	d8e6      	bhi.n	8010fa6 <uxr_flash_output_streams+0x1a>
 8010fd8:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8010fdc:	b383      	cbz	r3, 8011040 <uxr_flash_output_streams+0xb4>
 8010fde:	f04f 0900 	mov.w	r9, #0
 8010fe2:	f10d 0802 	add.w	r8, sp, #2
 8010fe6:	af03      	add	r7, sp, #12
 8010fe8:	ae02      	add	r6, sp, #8
 8010fea:	4648      	mov	r0, r9
 8010fec:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8010ff0:	2201      	movs	r2, #1
 8010ff2:	2102      	movs	r1, #2
 8010ff4:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8010ff8:	f000 ff40 	bl	8011e7c <uxr_stream_id>
 8010ffc:	9001      	str	r0, [sp, #4]
 8010ffe:	3520      	adds	r5, #32
 8011000:	e00c      	b.n	801101c <uxr_flash_output_streams+0x90>
 8011002:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011006:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801100a:	9b02      	ldr	r3, [sp, #8]
 801100c:	f000 fea8 	bl	8011d60 <uxr_stamp_session_header>
 8011010:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011012:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8011016:	e9d3 0a00 	ldrd	r0, sl, [r3]
 801101a:	47d0      	blx	sl
 801101c:	4643      	mov	r3, r8
 801101e:	463a      	mov	r2, r7
 8011020:	4631      	mov	r1, r6
 8011022:	4628      	mov	r0, r5
 8011024:	f009 f9c4 	bl	801a3b0 <uxr_prepare_next_reliable_buffer_to_send>
 8011028:	4603      	mov	r3, r0
 801102a:	4620      	mov	r0, r4
 801102c:	2b00      	cmp	r3, #0
 801102e:	d1e8      	bne.n	8011002 <uxr_flash_output_streams+0x76>
 8011030:	f109 0901 	add.w	r9, r9, #1
 8011034:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8011038:	fa5f f089 	uxtb.w	r0, r9
 801103c:	4283      	cmp	r3, r0
 801103e:	d8d5      	bhi.n	8010fec <uxr_flash_output_streams+0x60>
 8011040:	b004      	add	sp, #16
 8011042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011046:	9b02      	ldr	r3, [sp, #8]
 8011048:	4620      	mov	r0, r4
 801104a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801104e:	f109 0901 	add.w	r9, r9, #1
 8011052:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8011056:	f000 fe83 	bl	8011d60 <uxr_stamp_session_header>
 801105a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801105c:	9a03      	ldr	r2, [sp, #12]
 801105e:	685d      	ldr	r5, [r3, #4]
 8011060:	6818      	ldr	r0, [r3, #0]
 8011062:	9902      	ldr	r1, [sp, #8]
 8011064:	47a8      	blx	r5
 8011066:	7e23      	ldrb	r3, [r4, #24]
 8011068:	fa5f f089 	uxtb.w	r0, r9
 801106c:	4283      	cmp	r3, r0
 801106e:	d89a      	bhi.n	8010fa6 <uxr_flash_output_streams+0x1a>
 8011070:	e7b2      	b.n	8010fd8 <uxr_flash_output_streams+0x4c>
 8011072:	bf00      	nop

08011074 <read_submessage_info>:
 8011074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011078:	460d      	mov	r5, r1
 801107a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 801107e:	4606      	mov	r6, r0
 8011080:	4669      	mov	r1, sp
 8011082:	4628      	mov	r0, r5
 8011084:	f002 f852 	bl	801312c <uxr_deserialize_BaseObjectReply>
 8011088:	4604      	mov	r4, r0
 801108a:	a902      	add	r1, sp, #8
 801108c:	4628      	mov	r0, r5
 801108e:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8011092:	f7fe f803 	bl	800f09c <ucdr_deserialize_bool>
 8011096:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801109a:	4004      	ands	r4, r0
 801109c:	b2e4      	uxtb	r4, r4
 801109e:	b95b      	cbnz	r3, 80110b8 <read_submessage_info+0x44>
 80110a0:	a987      	add	r1, sp, #540	; 0x21c
 80110a2:	4628      	mov	r0, r5
 80110a4:	f7fd fffa 	bl	800f09c <ucdr_deserialize_bool>
 80110a8:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 80110ac:	4680      	mov	r8, r0
 80110ae:	b94b      	cbnz	r3, 80110c4 <read_submessage_info+0x50>
 80110b0:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 80110b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110b8:	a903      	add	r1, sp, #12
 80110ba:	4628      	mov	r0, r5
 80110bc:	f001 fee2 	bl	8012e84 <uxr_deserialize_ObjectVariant>
 80110c0:	4004      	ands	r4, r0
 80110c2:	e7ed      	b.n	80110a0 <read_submessage_info+0x2c>
 80110c4:	a988      	add	r1, sp, #544	; 0x220
 80110c6:	4628      	mov	r0, r5
 80110c8:	f7fe f816 	bl	800f0f8 <ucdr_deserialize_uint8_t>
 80110cc:	ea14 0f08 	tst.w	r4, r8
 80110d0:	d0ee      	beq.n	80110b0 <read_submessage_info+0x3c>
 80110d2:	2800      	cmp	r0, #0
 80110d4:	d0ec      	beq.n	80110b0 <read_submessage_info+0x3c>
 80110d6:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 80110da:	2b0d      	cmp	r3, #13
 80110dc:	d1e8      	bne.n	80110b0 <read_submessage_info+0x3c>
 80110de:	a98a      	add	r1, sp, #552	; 0x228
 80110e0:	4628      	mov	r0, r5
 80110e2:	f7fe fe2f 	bl	800fd44 <ucdr_deserialize_int16_t>
 80110e6:	b138      	cbz	r0, 80110f8 <read_submessage_info+0x84>
 80110e8:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	dd06      	ble.n	80110fe <read_submessage_info+0x8a>
 80110f0:	2f00      	cmp	r7, #0
 80110f2:	bf14      	ite	ne
 80110f4:	2001      	movne	r0, #1
 80110f6:	2002      	moveq	r0, #2
 80110f8:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 80110fc:	e7d8      	b.n	80110b0 <read_submessage_info+0x3c>
 80110fe:	2000      	movs	r0, #0
 8011100:	e7fa      	b.n	80110f8 <read_submessage_info+0x84>
 8011102:	bf00      	nop

08011104 <read_submessage_list>:
 8011104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011108:	4604      	mov	r4, r0
 801110a:	b097      	sub	sp, #92	; 0x5c
 801110c:	460d      	mov	r5, r1
 801110e:	4ec1      	ldr	r6, [pc, #772]	; (8011414 <read_submessage_list+0x310>)
 8011110:	9209      	str	r2, [sp, #36]	; 0x24
 8011112:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8011116:	aa0c      	add	r2, sp, #48	; 0x30
 8011118:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 801111c:	4628      	mov	r0, r5
 801111e:	f001 f805 	bl	801212c <uxr_read_submessage_header>
 8011122:	2800      	cmp	r0, #0
 8011124:	f000 8142 	beq.w	80113ac <read_submessage_list+0x2a8>
 8011128:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 801112c:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8011130:	3b02      	subs	r3, #2
 8011132:	2b0d      	cmp	r3, #13
 8011134:	d8ed      	bhi.n	8011112 <read_submessage_list+0xe>
 8011136:	a101      	add	r1, pc, #4	; (adr r1, 801113c <read_submessage_list+0x38>)
 8011138:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801113c:	080113a3 	.word	0x080113a3
 8011140:	08011113 	.word	0x08011113
 8011144:	08011393 	.word	0x08011393
 8011148:	08011331 	.word	0x08011331
 801114c:	08011327 	.word	0x08011327
 8011150:	08011113 	.word	0x08011113
 8011154:	08011113 	.word	0x08011113
 8011158:	0801127d 	.word	0x0801127d
 801115c:	0801120f 	.word	0x0801120f
 8011160:	080111cf 	.word	0x080111cf
 8011164:	08011113 	.word	0x08011113
 8011168:	08011113 	.word	0x08011113
 801116c:	08011113 	.word	0x08011113
 8011170:	08011175 	.word	0x08011175
 8011174:	a910      	add	r1, sp, #64	; 0x40
 8011176:	4628      	mov	r0, r5
 8011178:	f002 fa00 	bl	801357c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 801117c:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 8011180:	f1b8 0f00 	cmp.w	r8, #0
 8011184:	f000 811a 	beq.w	80113bc <read_submessage_list+0x2b8>
 8011188:	f001 f818 	bl	80121bc <uxr_nanos>
 801118c:	4602      	mov	r2, r0
 801118e:	460b      	mov	r3, r1
 8011190:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8011194:	2100      	movs	r1, #0
 8011196:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8011198:	9006      	str	r0, [sp, #24]
 801119a:	468c      	mov	ip, r1
 801119c:	9815      	ldr	r0, [sp, #84]	; 0x54
 801119e:	fbc7 0c06 	smlal	r0, ip, r7, r6
 80111a2:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80111a4:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 80111a8:	468c      	mov	ip, r1
 80111aa:	9811      	ldr	r0, [sp, #68]	; 0x44
 80111ac:	fbc7 0c06 	smlal	r0, ip, r7, r6
 80111b0:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 80111b4:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 80111b8:	fbc7 0106 	smlal	r0, r1, r7, r6
 80111bc:	e9cd 0100 	strd	r0, r1, [sp]
 80111c0:	4620      	mov	r0, r4
 80111c2:	47c0      	blx	r8
 80111c4:	f04f 0301 	mov.w	r3, #1
 80111c8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 80111cc:	e7a1      	b.n	8011112 <read_submessage_list+0xe>
 80111ce:	a910      	add	r1, sp, #64	; 0x40
 80111d0:	4628      	mov	r0, r5
 80111d2:	f002 f9bf 	bl	8013554 <uxr_deserialize_HEARTBEAT_Payload>
 80111d6:	2100      	movs	r1, #0
 80111d8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80111dc:	f000 fe7c 	bl	8011ed8 <uxr_stream_id_from_raw>
 80111e0:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80111e4:	900f      	str	r0, [sp, #60]	; 0x3c
 80111e6:	f104 0008 	add.w	r0, r4, #8
 80111ea:	4641      	mov	r1, r8
 80111ec:	f000 ff62 	bl	80120b4 <uxr_get_input_reliable_stream>
 80111f0:	2800      	cmp	r0, #0
 80111f2:	d08e      	beq.n	8011112 <read_submessage_list+0xe>
 80111f4:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 80111f8:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80111fc:	f008 fe1e 	bl	8019e3c <uxr_process_heartbeat>
 8011200:	4642      	mov	r2, r8
 8011202:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8011206:	4620      	mov	r0, r4
 8011208:	f7ff fdf8 	bl	8010dfc <write_submessage_acknack.isra.0>
 801120c:	e781      	b.n	8011112 <read_submessage_list+0xe>
 801120e:	a910      	add	r1, sp, #64	; 0x40
 8011210:	4628      	mov	r0, r5
 8011212:	f002 f977 	bl	8013504 <uxr_deserialize_ACKNACK_Payload>
 8011216:	2100      	movs	r1, #0
 8011218:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 801121c:	f000 fe5c 	bl	8011ed8 <uxr_stream_id_from_raw>
 8011220:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8011224:	900d      	str	r0, [sp, #52]	; 0x34
 8011226:	f104 0008 	add.w	r0, r4, #8
 801122a:	f000 ff2d 	bl	8012088 <uxr_get_output_reliable_stream>
 801122e:	4680      	mov	r8, r0
 8011230:	2800      	cmp	r0, #0
 8011232:	f43f af6e 	beq.w	8011112 <read_submessage_list+0xe>
 8011236:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 801123a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 801123e:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 8011242:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8011246:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801124a:	b289      	uxth	r1, r1
 801124c:	f009 f958 	bl	801a500 <uxr_process_acknack>
 8011250:	4640      	mov	r0, r8
 8011252:	f009 f919 	bl	801a488 <uxr_begin_output_nack_buffer_it>
 8011256:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 801125a:	e005      	b.n	8011268 <read_submessage_list+0x164>
 801125c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801125e:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 8011262:	e9d3 0900 	ldrd	r0, r9, [r3]
 8011266:	47c8      	blx	r9
 8011268:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 801126c:	aa0f      	add	r2, sp, #60	; 0x3c
 801126e:	4651      	mov	r1, sl
 8011270:	4640      	mov	r0, r8
 8011272:	f009 f90b 	bl	801a48c <uxr_next_reliable_nack_buffer_to_send>
 8011276:	2800      	cmp	r0, #0
 8011278:	d1f0      	bne.n	801125c <read_submessage_list+0x158>
 801127a:	e74a      	b.n	8011112 <read_submessage_list+0xe>
 801127c:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8011280:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8011284:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8011288:	4628      	mov	r0, r5
 801128a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 801128e:	4651      	mov	r1, sl
 8011290:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8011294:	f1a8 0804 	sub.w	r8, r8, #4
 8011298:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 801129c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 80112a0:	fa1f f888 	uxth.w	r8, r8
 80112a4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80112a8:	f009 090e 	and.w	r9, r9, #14
 80112ac:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 80112b0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 80112b4:	f001 fe88 	bl	8012fc8 <uxr_deserialize_BaseObjectRequest>
 80112b8:	4650      	mov	r0, sl
 80112ba:	a90f      	add	r1, sp, #60	; 0x3c
 80112bc:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 80112c0:	f000 fdca 	bl	8011e58 <uxr_parse_base_object_request>
 80112c4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80112c6:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 80112ca:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 80112ce:	9110      	str	r1, [sp, #64]	; 0x40
 80112d0:	f1bb 0f00 	cmp.w	fp, #0
 80112d4:	d006      	beq.n	80112e4 <read_submessage_list+0x1e0>
 80112d6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80112da:	4652      	mov	r2, sl
 80112dc:	4620      	mov	r0, r4
 80112de:	9300      	str	r3, [sp, #0]
 80112e0:	2300      	movs	r3, #0
 80112e2:	47d8      	blx	fp
 80112e4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80112e6:	b182      	cbz	r2, 801130a <read_submessage_list+0x206>
 80112e8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80112ea:	f04f 0c00 	mov.w	ip, #0
 80112ee:	3902      	subs	r1, #2
 80112f0:	e003      	b.n	80112fa <read_submessage_list+0x1f6>
 80112f2:	f10c 0c01 	add.w	ip, ip, #1
 80112f6:	4594      	cmp	ip, r2
 80112f8:	d007      	beq.n	801130a <read_submessage_list+0x206>
 80112fa:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 80112fe:	4553      	cmp	r3, sl
 8011300:	d1f7      	bne.n	80112f2 <read_submessage_list+0x1ee>
 8011302:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8011304:	2200      	movs	r2, #0
 8011306:	f803 200c 	strb.w	r2, [r3, ip]
 801130a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801130e:	464b      	mov	r3, r9
 8011310:	4642      	mov	r2, r8
 8011312:	4620      	mov	r0, r4
 8011314:	9102      	str	r1, [sp, #8]
 8011316:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011318:	9101      	str	r1, [sp, #4]
 801131a:	990d      	ldr	r1, [sp, #52]	; 0x34
 801131c:	9100      	str	r1, [sp, #0]
 801131e:	4629      	mov	r1, r5
 8011320:	f009 f9b0 	bl	801a684 <read_submessage_format>
 8011324:	e6f5      	b.n	8011112 <read_submessage_list+0xe>
 8011326:	4629      	mov	r1, r5
 8011328:	4620      	mov	r0, r4
 801132a:	f7ff fea3 	bl	8011074 <read_submessage_info>
 801132e:	e6f0      	b.n	8011112 <read_submessage_list+0xe>
 8011330:	2a00      	cmp	r2, #0
 8011332:	d03e      	beq.n	80113b2 <read_submessage_list+0x2ae>
 8011334:	a910      	add	r1, sp, #64	; 0x40
 8011336:	4628      	mov	r0, r5
 8011338:	f002 f83c 	bl	80133b4 <uxr_deserialize_STATUS_Payload>
 801133c:	a90e      	add	r1, sp, #56	; 0x38
 801133e:	aa0d      	add	r2, sp, #52	; 0x34
 8011340:	a810      	add	r0, sp, #64	; 0x40
 8011342:	f000 fd89 	bl	8011e58 <uxr_parse_base_object_request>
 8011346:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011348:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 801134c:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8011350:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 8011354:	910f      	str	r1, [sp, #60]	; 0x3c
 8011356:	f1ba 0f00 	cmp.w	sl, #0
 801135a:	d006      	beq.n	801136a <read_submessage_list+0x266>
 801135c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8011360:	4642      	mov	r2, r8
 8011362:	4620      	mov	r0, r4
 8011364:	9300      	str	r3, [sp, #0]
 8011366:	464b      	mov	r3, r9
 8011368:	47d0      	blx	sl
 801136a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 801136c:	2a00      	cmp	r2, #0
 801136e:	f43f aed0 	beq.w	8011112 <read_submessage_list+0xe>
 8011372:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8011374:	2100      	movs	r1, #0
 8011376:	3802      	subs	r0, #2
 8011378:	e003      	b.n	8011382 <read_submessage_list+0x27e>
 801137a:	3101      	adds	r1, #1
 801137c:	4291      	cmp	r1, r2
 801137e:	f43f aec8 	beq.w	8011112 <read_submessage_list+0xe>
 8011382:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8011386:	4543      	cmp	r3, r8
 8011388:	d1f7      	bne.n	801137a <read_submessage_list+0x276>
 801138a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 801138c:	f803 9001 	strb.w	r9, [r3, r1]
 8011390:	e6bf      	b.n	8011112 <read_submessage_list+0xe>
 8011392:	2a00      	cmp	r2, #0
 8011394:	f47f aebd 	bne.w	8011112 <read_submessage_list+0xe>
 8011398:	4629      	mov	r1, r5
 801139a:	4620      	mov	r0, r4
 801139c:	f000 fca0 	bl	8011ce0 <uxr_read_create_session_status>
 80113a0:	e6b7      	b.n	8011112 <read_submessage_list+0xe>
 80113a2:	4629      	mov	r1, r5
 80113a4:	4620      	mov	r0, r4
 80113a6:	f7ff fcf3 	bl	8010d90 <read_submessage_get_info>
 80113aa:	e6b2      	b.n	8011112 <read_submessage_list+0xe>
 80113ac:	b017      	add	sp, #92	; 0x5c
 80113ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113b2:	4629      	mov	r1, r5
 80113b4:	4620      	mov	r0, r4
 80113b6:	f000 fca1 	bl	8011cfc <uxr_read_delete_session_status>
 80113ba:	e6aa      	b.n	8011112 <read_submessage_list+0xe>
 80113bc:	f000 fefe 	bl	80121bc <uxr_nanos>
 80113c0:	4642      	mov	r2, r8
 80113c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80113c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80113c6:	fbc7 3206 	smlal	r3, r2, r7, r6
 80113ca:	1818      	adds	r0, r3, r0
 80113cc:	9f12      	ldr	r7, [sp, #72]	; 0x48
 80113ce:	eb42 0101 	adc.w	r1, r2, r1
 80113d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80113d4:	4642      	mov	r2, r8
 80113d6:	fbc7 3206 	smlal	r3, r2, r7, r6
 80113da:	469c      	mov	ip, r3
 80113dc:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 80113e0:	fbc3 7806 	smlal	r7, r8, r3, r6
 80113e4:	4643      	mov	r3, r8
 80113e6:	eb1c 0c07 	adds.w	ip, ip, r7
 80113ea:	eb42 0203 	adc.w	r2, r2, r3
 80113ee:	ebb0 030c 	subs.w	r3, r0, ip
 80113f2:	eb61 0202 	sbc.w	r2, r1, r2
 80113f6:	2a00      	cmp	r2, #0
 80113f8:	db08      	blt.n	801140c <read_submessage_list+0x308>
 80113fa:	085b      	lsrs	r3, r3, #1
 80113fc:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8011400:	1052      	asrs	r2, r2, #1
 8011402:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8011406:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 801140a:	e6db      	b.n	80111c4 <read_submessage_list+0xc0>
 801140c:	3301      	adds	r3, #1
 801140e:	f142 0200 	adc.w	r2, r2, #0
 8011412:	e7f2      	b.n	80113fa <read_submessage_list+0x2f6>
 8011414:	3b9aca00 	.word	0x3b9aca00

08011418 <listen_message_reliably>:
 8011418:	1e0b      	subs	r3, r1, #0
 801141a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801141e:	bfb8      	it	lt
 8011420:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8011424:	b09d      	sub	sp, #116	; 0x74
 8011426:	4680      	mov	r8, r0
 8011428:	9305      	str	r3, [sp, #20]
 801142a:	f000 feab 	bl	8012184 <uxr_millis>
 801142e:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 8011432:	4681      	mov	r9, r0
 8011434:	2a00      	cmp	r2, #0
 8011436:	f000 809a 	beq.w	801156e <listen_message_reliably+0x156>
 801143a:	2600      	movs	r6, #0
 801143c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011440:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8011444:	460f      	mov	r7, r1
 8011446:	4630      	mov	r0, r6
 8011448:	9303      	str	r3, [sp, #12]
 801144a:	e00e      	b.n	801146a <listen_message_reliably+0x52>
 801144c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801144e:	3601      	adds	r6, #1
 8011450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011452:	455a      	cmp	r2, fp
 8011454:	9903      	ldr	r1, [sp, #12]
 8011456:	b2f0      	uxtb	r0, r6
 8011458:	eb73 0101 	sbcs.w	r1, r3, r1
 801145c:	da01      	bge.n	8011462 <listen_message_reliably+0x4a>
 801145e:	4693      	mov	fp, r2
 8011460:	9303      	str	r3, [sp, #12]
 8011462:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8011466:	4283      	cmp	r3, r0
 8011468:	d95f      	bls.n	801152a <listen_message_reliably+0x112>
 801146a:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 801146e:	2102      	movs	r1, #2
 8011470:	2201      	movs	r2, #1
 8011472:	00e4      	lsls	r4, r4, #3
 8011474:	f000 fd02 	bl	8011e7c <uxr_stream_id>
 8011478:	4601      	mov	r1, r0
 801147a:	f104 0520 	add.w	r5, r4, #32
 801147e:	463b      	mov	r3, r7
 8011480:	464a      	mov	r2, r9
 8011482:	9109      	str	r1, [sp, #36]	; 0x24
 8011484:	4445      	add	r5, r8
 8011486:	4628      	mov	r0, r5
 8011488:	f008 ffd2 	bl	801a430 <uxr_update_output_stream_heartbeat_timestamp>
 801148c:	eb08 0304 	add.w	r3, r8, r4
 8011490:	2800      	cmp	r0, #0
 8011492:	d0db      	beq.n	801144c <listen_message_reliably+0x34>
 8011494:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 8011498:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 801149c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80114a0:	4640      	mov	r0, r8
 80114a2:	3501      	adds	r5, #1
 80114a4:	4444      	add	r4, r8
 80114a6:	9304      	str	r3, [sp, #16]
 80114a8:	f000 fcae 	bl	8011e08 <uxr_session_header_offset>
 80114ac:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80114b0:	2300      	movs	r3, #0
 80114b2:	2211      	movs	r2, #17
 80114b4:	a90c      	add	r1, sp, #48	; 0x30
 80114b6:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 80114ba:	9000      	str	r0, [sp, #0]
 80114bc:	4650      	mov	r0, sl
 80114be:	3601      	adds	r6, #1
 80114c0:	f7ff f952 	bl	8010768 <ucdr_init_buffer_origin_offset>
 80114c4:	2300      	movs	r3, #0
 80114c6:	2205      	movs	r2, #5
 80114c8:	210b      	movs	r1, #11
 80114ca:	4650      	mov	r0, sl
 80114cc:	f000 fe14 	bl	80120f8 <uxr_buffer_submessage_header>
 80114d0:	2101      	movs	r1, #1
 80114d2:	8968      	ldrh	r0, [r5, #10]
 80114d4:	f009 f9a0 	bl	801a818 <uxr_seq_num_add>
 80114d8:	892b      	ldrh	r3, [r5, #8]
 80114da:	4602      	mov	r2, r0
 80114dc:	a90a      	add	r1, sp, #40	; 0x28
 80114de:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80114e2:	4650      	mov	r0, sl
 80114e4:	9b04      	ldr	r3, [sp, #16]
 80114e6:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80114ea:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80114ee:	f002 f81d 	bl	801352c <uxr_serialize_HEARTBEAT_Payload>
 80114f2:	2200      	movs	r2, #0
 80114f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80114f6:	4640      	mov	r0, r8
 80114f8:	4611      	mov	r1, r2
 80114fa:	f000 fc31 	bl	8011d60 <uxr_stamp_session_header>
 80114fe:	4650      	mov	r0, sl
 8011500:	f7ff f972 	bl	80107e8 <ucdr_buffer_length>
 8011504:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8011508:	4602      	mov	r2, r0
 801150a:	a90c      	add	r1, sp, #48	; 0x30
 801150c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011510:	47a8      	blx	r5
 8011512:	9903      	ldr	r1, [sp, #12]
 8011514:	b2f0      	uxtb	r0, r6
 8011516:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 801151a:	455a      	cmp	r2, fp
 801151c:	eb73 0101 	sbcs.w	r1, r3, r1
 8011520:	db9d      	blt.n	801145e <listen_message_reliably+0x46>
 8011522:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8011526:	4283      	cmp	r3, r0
 8011528:	d89f      	bhi.n	801146a <listen_message_reliably+0x52>
 801152a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801152e:	9a03      	ldr	r2, [sp, #12]
 8011530:	429a      	cmp	r2, r3
 8011532:	bf08      	it	eq
 8011534:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 8011538:	d019      	beq.n	801156e <listen_message_reliably+0x156>
 801153a:	ebab 0309 	sub.w	r3, fp, r9
 801153e:	2b00      	cmp	r3, #0
 8011540:	9d05      	ldr	r5, [sp, #20]
 8011542:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 8011546:	aa08      	add	r2, sp, #32
 8011548:	bf08      	it	eq
 801154a:	2301      	moveq	r3, #1
 801154c:	a907      	add	r1, sp, #28
 801154e:	6884      	ldr	r4, [r0, #8]
 8011550:	429d      	cmp	r5, r3
 8011552:	6800      	ldr	r0, [r0, #0]
 8011554:	bfa8      	it	ge
 8011556:	461d      	movge	r5, r3
 8011558:	462b      	mov	r3, r5
 801155a:	47a0      	blx	r4
 801155c:	b948      	cbnz	r0, 8011572 <listen_message_reliably+0x15a>
 801155e:	9b05      	ldr	r3, [sp, #20]
 8011560:	1b5b      	subs	r3, r3, r5
 8011562:	2b00      	cmp	r3, #0
 8011564:	9305      	str	r3, [sp, #20]
 8011566:	f73f af60 	bgt.w	801142a <listen_message_reliably+0x12>
 801156a:	4604      	mov	r4, r0
 801156c:	e012      	b.n	8011594 <listen_message_reliably+0x17c>
 801156e:	9b05      	ldr	r3, [sp, #20]
 8011570:	e7e5      	b.n	801153e <listen_message_reliably+0x126>
 8011572:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011576:	4604      	mov	r4, r0
 8011578:	2500      	movs	r5, #0
 801157a:	a80c      	add	r0, sp, #48	; 0x30
 801157c:	f7ff f906 	bl	801078c <ucdr_init_buffer>
 8011580:	f10d 031a 	add.w	r3, sp, #26
 8011584:	aa06      	add	r2, sp, #24
 8011586:	a90c      	add	r1, sp, #48	; 0x30
 8011588:	4640      	mov	r0, r8
 801158a:	f88d 5018 	strb.w	r5, [sp, #24]
 801158e:	f000 fbfb 	bl	8011d88 <uxr_read_session_header>
 8011592:	b918      	cbnz	r0, 801159c <listen_message_reliably+0x184>
 8011594:	4620      	mov	r0, r4
 8011596:	b01d      	add	sp, #116	; 0x74
 8011598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801159c:	4629      	mov	r1, r5
 801159e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80115a2:	f000 fc99 	bl	8011ed8 <uxr_stream_id_from_raw>
 80115a6:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80115aa:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 80115ae:	f3c0 2507 	ubfx	r5, r0, #8, #8
 80115b2:	2e01      	cmp	r6, #1
 80115b4:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 80115b8:	d04b      	beq.n	8011652 <listen_message_reliably+0x23a>
 80115ba:	2e02      	cmp	r6, #2
 80115bc:	d00f      	beq.n	80115de <listen_message_reliably+0x1c6>
 80115be:	2e00      	cmp	r6, #0
 80115c0:	d1e8      	bne.n	8011594 <listen_message_reliably+0x17c>
 80115c2:	4631      	mov	r1, r6
 80115c4:	4630      	mov	r0, r6
 80115c6:	f000 fc87 	bl	8011ed8 <uxr_stream_id_from_raw>
 80115ca:	4602      	mov	r2, r0
 80115cc:	a90c      	add	r1, sp, #48	; 0x30
 80115ce:	4640      	mov	r0, r8
 80115d0:	920a      	str	r2, [sp, #40]	; 0x28
 80115d2:	f7ff fd97 	bl	8011104 <read_submessage_list>
 80115d6:	4620      	mov	r0, r4
 80115d8:	b01d      	add	sp, #116	; 0x74
 80115da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115de:	4629      	mov	r1, r5
 80115e0:	f108 0008 	add.w	r0, r8, #8
 80115e4:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 80115e8:	f000 fd64 	bl	80120b4 <uxr_get_input_reliable_stream>
 80115ec:	4607      	mov	r7, r0
 80115ee:	b338      	cbz	r0, 8011640 <listen_message_reliably+0x228>
 80115f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80115f2:	a80c      	add	r0, sp, #48	; 0x30
 80115f4:	9203      	str	r2, [sp, #12]
 80115f6:	f7ff f8fb 	bl	80107f0 <ucdr_buffer_remaining>
 80115fa:	4603      	mov	r3, r0
 80115fc:	f10d 0019 	add.w	r0, sp, #25
 8011600:	9a03      	ldr	r2, [sp, #12]
 8011602:	4651      	mov	r1, sl
 8011604:	9000      	str	r0, [sp, #0]
 8011606:	4638      	mov	r0, r7
 8011608:	f008 fb1c 	bl	8019c44 <uxr_receive_reliable_message>
 801160c:	b1c0      	cbz	r0, 8011640 <listen_message_reliably+0x228>
 801160e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011612:	b393      	cbz	r3, 801167a <listen_message_reliably+0x262>
 8011614:	ae14      	add	r6, sp, #80	; 0x50
 8011616:	f04f 0a02 	mov.w	sl, #2
 801161a:	e00a      	b.n	8011632 <listen_message_reliably+0x21a>
 801161c:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 8011620:	4631      	mov	r1, r6
 8011622:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8011626:	4640      	mov	r0, r8
 8011628:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 801162c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801162e:	f7ff fd69 	bl	8011104 <read_submessage_list>
 8011632:	2204      	movs	r2, #4
 8011634:	4631      	mov	r1, r6
 8011636:	4638      	mov	r0, r7
 8011638:	f008 fb86 	bl	8019d48 <uxr_next_input_reliable_buffer_available>
 801163c:	2800      	cmp	r0, #0
 801163e:	d1ed      	bne.n	801161c <listen_message_reliably+0x204>
 8011640:	4640      	mov	r0, r8
 8011642:	462a      	mov	r2, r5
 8011644:	4649      	mov	r1, r9
 8011646:	f7ff fbd9 	bl	8010dfc <write_submessage_acknack.isra.0>
 801164a:	4620      	mov	r0, r4
 801164c:	b01d      	add	sp, #116	; 0x74
 801164e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011652:	4629      	mov	r1, r5
 8011654:	f108 0008 	add.w	r0, r8, #8
 8011658:	f000 fd22 	bl	80120a0 <uxr_get_input_best_effort_stream>
 801165c:	2800      	cmp	r0, #0
 801165e:	d099      	beq.n	8011594 <listen_message_reliably+0x17c>
 8011660:	4651      	mov	r1, sl
 8011662:	f008 fa65 	bl	8019b30 <uxr_receive_best_effort_message>
 8011666:	2800      	cmp	r0, #0
 8011668:	d094      	beq.n	8011594 <listen_message_reliably+0x17c>
 801166a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 801166e:	a90c      	add	r1, sp, #48	; 0x30
 8011670:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011672:	4640      	mov	r0, r8
 8011674:	f7ff fd46 	bl	8011104 <read_submessage_list>
 8011678:	e78c      	b.n	8011594 <listen_message_reliably+0x17c>
 801167a:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 801167e:	a90c      	add	r1, sp, #48	; 0x30
 8011680:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011682:	4640      	mov	r0, r8
 8011684:	f7ff fd3e 	bl	8011104 <read_submessage_list>
 8011688:	e7c4      	b.n	8011614 <listen_message_reliably+0x1fc>
 801168a:	bf00      	nop

0801168c <uxr_run_session_timeout>:
 801168c:	b570      	push	{r4, r5, r6, lr}
 801168e:	4604      	mov	r4, r0
 8011690:	460d      	mov	r5, r1
 8011692:	f000 fd77 	bl	8012184 <uxr_millis>
 8011696:	4606      	mov	r6, r0
 8011698:	4620      	mov	r0, r4
 801169a:	f7ff fc77 	bl	8010f8c <uxr_flash_output_streams>
 801169e:	4629      	mov	r1, r5
 80116a0:	4620      	mov	r0, r4
 80116a2:	f7ff feb9 	bl	8011418 <listen_message_reliably>
 80116a6:	f000 fd6d 	bl	8012184 <uxr_millis>
 80116aa:	1b83      	subs	r3, r0, r6
 80116ac:	1ae9      	subs	r1, r5, r3
 80116ae:	2900      	cmp	r1, #0
 80116b0:	dcf6      	bgt.n	80116a0 <uxr_run_session_timeout+0x14>
 80116b2:	f104 0008 	add.w	r0, r4, #8
 80116b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80116ba:	f000 bd07 	b.w	80120cc <uxr_output_streams_confirmed>
 80116be:	bf00      	nop

080116c0 <uxr_run_session_until_data>:
 80116c0:	b570      	push	{r4, r5, r6, lr}
 80116c2:	4604      	mov	r4, r0
 80116c4:	460d      	mov	r5, r1
 80116c6:	f000 fd5d 	bl	8012184 <uxr_millis>
 80116ca:	4606      	mov	r6, r0
 80116cc:	4620      	mov	r0, r4
 80116ce:	f7ff fc5d 	bl	8010f8c <uxr_flash_output_streams>
 80116d2:	2300      	movs	r3, #0
 80116d4:	4629      	mov	r1, r5
 80116d6:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 80116da:	e005      	b.n	80116e8 <uxr_run_session_until_data+0x28>
 80116dc:	f000 fd52 	bl	8012184 <uxr_millis>
 80116e0:	1b83      	subs	r3, r0, r6
 80116e2:	1ae9      	subs	r1, r5, r3
 80116e4:	2900      	cmp	r1, #0
 80116e6:	dd07      	ble.n	80116f8 <uxr_run_session_until_data+0x38>
 80116e8:	4620      	mov	r0, r4
 80116ea:	f7ff fe95 	bl	8011418 <listen_message_reliably>
 80116ee:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 80116f2:	2800      	cmp	r0, #0
 80116f4:	d0f2      	beq.n	80116dc <uxr_run_session_until_data+0x1c>
 80116f6:	bd70      	pop	{r4, r5, r6, pc}
 80116f8:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 80116fc:	bd70      	pop	{r4, r5, r6, pc}
 80116fe:	bf00      	nop

08011700 <uxr_run_session_until_confirm_delivery>:
 8011700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011704:	4606      	mov	r6, r0
 8011706:	460d      	mov	r5, r1
 8011708:	f000 fd3c 	bl	8012184 <uxr_millis>
 801170c:	4607      	mov	r7, r0
 801170e:	4630      	mov	r0, r6
 8011710:	f106 0808 	add.w	r8, r6, #8
 8011714:	f7ff fc3a 	bl	8010f8c <uxr_flash_output_streams>
 8011718:	2d00      	cmp	r5, #0
 801171a:	db10      	blt.n	801173e <uxr_run_session_until_confirm_delivery+0x3e>
 801171c:	462c      	mov	r4, r5
 801171e:	e006      	b.n	801172e <uxr_run_session_until_confirm_delivery+0x2e>
 8011720:	f7ff fe7a 	bl	8011418 <listen_message_reliably>
 8011724:	f000 fd2e 	bl	8012184 <uxr_millis>
 8011728:	1bc3      	subs	r3, r0, r7
 801172a:	1aec      	subs	r4, r5, r3
 801172c:	d407      	bmi.n	801173e <uxr_run_session_until_confirm_delivery+0x3e>
 801172e:	4640      	mov	r0, r8
 8011730:	f000 fccc 	bl	80120cc <uxr_output_streams_confirmed>
 8011734:	4603      	mov	r3, r0
 8011736:	4621      	mov	r1, r4
 8011738:	4630      	mov	r0, r6
 801173a:	2b00      	cmp	r3, #0
 801173c:	d0f0      	beq.n	8011720 <uxr_run_session_until_confirm_delivery+0x20>
 801173e:	4640      	mov	r0, r8
 8011740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011744:	f000 bcc2 	b.w	80120cc <uxr_output_streams_confirmed>

08011748 <uxr_run_session_until_all_status>:
 8011748:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801174c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8011750:	4606      	mov	r6, r0
 8011752:	4688      	mov	r8, r1
 8011754:	4692      	mov	sl, r2
 8011756:	461f      	mov	r7, r3
 8011758:	f7ff fc18 	bl	8010f8c <uxr_flash_output_streams>
 801175c:	f1bb 0f00 	cmp.w	fp, #0
 8011760:	d004      	beq.n	801176c <uxr_run_session_until_all_status+0x24>
 8011762:	465a      	mov	r2, fp
 8011764:	21ff      	movs	r1, #255	; 0xff
 8011766:	4638      	mov	r0, r7
 8011768:	f00a ffe4 	bl	801c734 <memset>
 801176c:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8011770:	1e7d      	subs	r5, r7, #1
 8011772:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 8011776:	f000 fd05 	bl	8012184 <uxr_millis>
 801177a:	4641      	mov	r1, r8
 801177c:	4681      	mov	r9, r0
 801177e:	4630      	mov	r0, r6
 8011780:	f7ff fe4a 	bl	8011418 <listen_message_reliably>
 8011784:	f000 fcfe 	bl	8012184 <uxr_millis>
 8011788:	eba0 0009 	sub.w	r0, r0, r9
 801178c:	eba8 0100 	sub.w	r1, r8, r0
 8011790:	f1bb 0f00 	cmp.w	fp, #0
 8011794:	d029      	beq.n	80117ea <uxr_run_session_until_all_status+0xa2>
 8011796:	46ae      	mov	lr, r5
 8011798:	f04f 0c00 	mov.w	ip, #0
 801179c:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 80117a0:	2cff      	cmp	r4, #255	; 0xff
 80117a2:	d015      	beq.n	80117d0 <uxr_run_session_until_all_status+0x88>
 80117a4:	f10c 0c01 	add.w	ip, ip, #1
 80117a8:	45e3      	cmp	fp, ip
 80117aa:	d8f7      	bhi.n	801179c <uxr_run_session_until_all_status+0x54>
 80117ac:	2300      	movs	r3, #0
 80117ae:	67f3      	str	r3, [r6, #124]	; 0x7c
 80117b0:	e000      	b.n	80117b4 <uxr_run_session_until_all_status+0x6c>
 80117b2:	b158      	cbz	r0, 80117cc <uxr_run_session_until_all_status+0x84>
 80117b4:	462b      	mov	r3, r5
 80117b6:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80117ba:	3302      	adds	r3, #2
 80117bc:	2801      	cmp	r0, #1
 80117be:	eba3 0307 	sub.w	r3, r3, r7
 80117c2:	bf8c      	ite	hi
 80117c4:	2000      	movhi	r0, #0
 80117c6:	2001      	movls	r0, #1
 80117c8:	459b      	cmp	fp, r3
 80117ca:	d8f2      	bhi.n	80117b2 <uxr_run_session_until_all_status+0x6a>
 80117cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117d0:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 80117d4:	f10c 0c01 	add.w	ip, ip, #1
 80117d8:	45dc      	cmp	ip, fp
 80117da:	d201      	bcs.n	80117e0 <uxr_run_session_until_all_status+0x98>
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d0dd      	beq.n	801179c <uxr_run_session_until_all_status+0x54>
 80117e0:	2900      	cmp	r1, #0
 80117e2:	dde3      	ble.n	80117ac <uxr_run_session_until_all_status+0x64>
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d1ca      	bne.n	801177e <uxr_run_session_until_all_status+0x36>
 80117e8:	e7e0      	b.n	80117ac <uxr_run_session_until_all_status+0x64>
 80117ea:	2001      	movs	r0, #1
 80117ec:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 80117f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080117f4 <wait_session_status>:
 80117f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117f8:	4604      	mov	r4, r0
 80117fa:	b09d      	sub	sp, #116	; 0x74
 80117fc:	20ff      	movs	r0, #255	; 0xff
 80117fe:	9303      	str	r3, [sp, #12]
 8011800:	7160      	strb	r0, [r4, #5]
 8011802:	2b00      	cmp	r3, #0
 8011804:	f000 80b6 	beq.w	8011974 <wait_session_status+0x180>
 8011808:	4689      	mov	r9, r1
 801180a:	4692      	mov	sl, r2
 801180c:	f04f 0b00 	mov.w	fp, #0
 8011810:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011812:	4652      	mov	r2, sl
 8011814:	4649      	mov	r1, r9
 8011816:	e9d3 0500 	ldrd	r0, r5, [r3]
 801181a:	47a8      	blx	r5
 801181c:	f000 fcb2 	bl	8012184 <uxr_millis>
 8011820:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011824:	4605      	mov	r5, r0
 8011826:	e009      	b.n	801183c <wait_session_status+0x48>
 8011828:	f000 fcac 	bl	8012184 <uxr_millis>
 801182c:	1b40      	subs	r0, r0, r5
 801182e:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8011832:	2b00      	cmp	r3, #0
 8011834:	dd40      	ble.n	80118b8 <wait_session_status+0xc4>
 8011836:	7960      	ldrb	r0, [r4, #5]
 8011838:	28ff      	cmp	r0, #255	; 0xff
 801183a:	d145      	bne.n	80118c8 <wait_session_status+0xd4>
 801183c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 801183e:	a908      	add	r1, sp, #32
 8011840:	6896      	ldr	r6, [r2, #8]
 8011842:	6810      	ldr	r0, [r2, #0]
 8011844:	aa09      	add	r2, sp, #36	; 0x24
 8011846:	47b0      	blx	r6
 8011848:	2800      	cmp	r0, #0
 801184a:	d0ed      	beq.n	8011828 <wait_session_status+0x34>
 801184c:	a80c      	add	r0, sp, #48	; 0x30
 801184e:	2600      	movs	r6, #0
 8011850:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8011854:	f7fe ff9a 	bl	801078c <ucdr_init_buffer>
 8011858:	f10d 031e 	add.w	r3, sp, #30
 801185c:	aa07      	add	r2, sp, #28
 801185e:	a90c      	add	r1, sp, #48	; 0x30
 8011860:	4620      	mov	r0, r4
 8011862:	f88d 601c 	strb.w	r6, [sp, #28]
 8011866:	f000 fa8f 	bl	8011d88 <uxr_read_session_header>
 801186a:	2800      	cmp	r0, #0
 801186c:	d0dc      	beq.n	8011828 <wait_session_status+0x34>
 801186e:	4631      	mov	r1, r6
 8011870:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8011874:	f000 fb30 	bl	8011ed8 <uxr_stream_id_from_raw>
 8011878:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801187c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8011880:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011884:	2f01      	cmp	r7, #1
 8011886:	9302      	str	r3, [sp, #8]
 8011888:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 801188c:	d05c      	beq.n	8011948 <wait_session_status+0x154>
 801188e:	2f02      	cmp	r7, #2
 8011890:	d020      	beq.n	80118d4 <wait_session_status+0xe0>
 8011892:	2f00      	cmp	r7, #0
 8011894:	d1c8      	bne.n	8011828 <wait_session_status+0x34>
 8011896:	4639      	mov	r1, r7
 8011898:	4638      	mov	r0, r7
 801189a:	f000 fb1d 	bl	8011ed8 <uxr_stream_id_from_raw>
 801189e:	a90c      	add	r1, sp, #48	; 0x30
 80118a0:	4602      	mov	r2, r0
 80118a2:	900b      	str	r0, [sp, #44]	; 0x2c
 80118a4:	4620      	mov	r0, r4
 80118a6:	f7ff fc2d 	bl	8011104 <read_submessage_list>
 80118aa:	f000 fc6b 	bl	8012184 <uxr_millis>
 80118ae:	1b40      	subs	r0, r0, r5
 80118b0:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	dcbe      	bgt.n	8011836 <wait_session_status+0x42>
 80118b8:	f10b 0b01 	add.w	fp, fp, #1
 80118bc:	9b03      	ldr	r3, [sp, #12]
 80118be:	7960      	ldrb	r0, [r4, #5]
 80118c0:	455b      	cmp	r3, fp
 80118c2:	d001      	beq.n	80118c8 <wait_session_status+0xd4>
 80118c4:	28ff      	cmp	r0, #255	; 0xff
 80118c6:	d0a3      	beq.n	8011810 <wait_session_status+0x1c>
 80118c8:	38ff      	subs	r0, #255	; 0xff
 80118ca:	bf18      	it	ne
 80118cc:	2001      	movne	r0, #1
 80118ce:	b01d      	add	sp, #116	; 0x74
 80118d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118d4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80118d8:	4631      	mov	r1, r6
 80118da:	f104 0008 	add.w	r0, r4, #8
 80118de:	9304      	str	r3, [sp, #16]
 80118e0:	f000 fbe8 	bl	80120b4 <uxr_get_input_reliable_stream>
 80118e4:	4680      	mov	r8, r0
 80118e6:	b348      	cbz	r0, 801193c <wait_session_status+0x148>
 80118e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80118ea:	a80c      	add	r0, sp, #48	; 0x30
 80118ec:	9205      	str	r2, [sp, #20]
 80118ee:	f7fe ff7f 	bl	80107f0 <ucdr_buffer_remaining>
 80118f2:	4603      	mov	r3, r0
 80118f4:	f10d 001d 	add.w	r0, sp, #29
 80118f8:	9a05      	ldr	r2, [sp, #20]
 80118fa:	9000      	str	r0, [sp, #0]
 80118fc:	4640      	mov	r0, r8
 80118fe:	9902      	ldr	r1, [sp, #8]
 8011900:	f008 f9a0 	bl	8019c44 <uxr_receive_reliable_message>
 8011904:	b1d0      	cbz	r0, 801193c <wait_session_status+0x148>
 8011906:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d03a      	beq.n	8011984 <wait_session_status+0x190>
 801190e:	9f04      	ldr	r7, [sp, #16]
 8011910:	e00a      	b.n	8011928 <wait_session_status+0x134>
 8011912:	f04f 0302 	mov.w	r3, #2
 8011916:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 801191a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801191e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8011922:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011924:	f7ff fbee 	bl	8011104 <read_submessage_list>
 8011928:	a914      	add	r1, sp, #80	; 0x50
 801192a:	2204      	movs	r2, #4
 801192c:	4640      	mov	r0, r8
 801192e:	f008 fa0b 	bl	8019d48 <uxr_next_input_reliable_buffer_available>
 8011932:	4603      	mov	r3, r0
 8011934:	a914      	add	r1, sp, #80	; 0x50
 8011936:	4620      	mov	r0, r4
 8011938:	2b00      	cmp	r3, #0
 801193a:	d1ea      	bne.n	8011912 <wait_session_status+0x11e>
 801193c:	4632      	mov	r2, r6
 801193e:	9904      	ldr	r1, [sp, #16]
 8011940:	4620      	mov	r0, r4
 8011942:	f7ff fa5b 	bl	8010dfc <write_submessage_acknack.isra.0>
 8011946:	e76f      	b.n	8011828 <wait_session_status+0x34>
 8011948:	4631      	mov	r1, r6
 801194a:	f104 0008 	add.w	r0, r4, #8
 801194e:	f000 fba7 	bl	80120a0 <uxr_get_input_best_effort_stream>
 8011952:	2800      	cmp	r0, #0
 8011954:	f43f af68 	beq.w	8011828 <wait_session_status+0x34>
 8011958:	9902      	ldr	r1, [sp, #8]
 801195a:	f008 f8e9 	bl	8019b30 <uxr_receive_best_effort_message>
 801195e:	2800      	cmp	r0, #0
 8011960:	f43f af62 	beq.w	8011828 <wait_session_status+0x34>
 8011964:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8011968:	a90c      	add	r1, sp, #48	; 0x30
 801196a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801196c:	4620      	mov	r0, r4
 801196e:	f7ff fbc9 	bl	8011104 <read_submessage_list>
 8011972:	e759      	b.n	8011828 <wait_session_status+0x34>
 8011974:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011976:	e9d3 0400 	ldrd	r0, r4, [r3]
 801197a:	47a0      	blx	r4
 801197c:	2001      	movs	r0, #1
 801197e:	b01d      	add	sp, #116	; 0x74
 8011980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011984:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8011988:	a90c      	add	r1, sp, #48	; 0x30
 801198a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801198c:	4620      	mov	r0, r4
 801198e:	f7ff fbb9 	bl	8011104 <read_submessage_list>
 8011992:	e7bc      	b.n	801190e <wait_session_status+0x11a>

08011994 <uxr_delete_session_retries>:
 8011994:	b530      	push	{r4, r5, lr}
 8011996:	b08f      	sub	sp, #60	; 0x3c
 8011998:	4604      	mov	r4, r0
 801199a:	460d      	mov	r5, r1
 801199c:	f000 fa34 	bl	8011e08 <uxr_session_header_offset>
 80119a0:	2300      	movs	r3, #0
 80119a2:	2210      	movs	r2, #16
 80119a4:	a902      	add	r1, sp, #8
 80119a6:	9000      	str	r0, [sp, #0]
 80119a8:	a806      	add	r0, sp, #24
 80119aa:	f7fe fedd 	bl	8010768 <ucdr_init_buffer_origin_offset>
 80119ae:	a906      	add	r1, sp, #24
 80119b0:	4620      	mov	r0, r4
 80119b2:	f000 f979 	bl	8011ca8 <uxr_buffer_delete_session>
 80119b6:	2200      	movs	r2, #0
 80119b8:	9b06      	ldr	r3, [sp, #24]
 80119ba:	4620      	mov	r0, r4
 80119bc:	4611      	mov	r1, r2
 80119be:	f000 f9cf 	bl	8011d60 <uxr_stamp_session_header>
 80119c2:	a806      	add	r0, sp, #24
 80119c4:	f7fe ff10 	bl	80107e8 <ucdr_buffer_length>
 80119c8:	462b      	mov	r3, r5
 80119ca:	4602      	mov	r2, r0
 80119cc:	a902      	add	r1, sp, #8
 80119ce:	4620      	mov	r0, r4
 80119d0:	f7ff ff10 	bl	80117f4 <wait_session_status>
 80119d4:	b118      	cbz	r0, 80119de <uxr_delete_session_retries+0x4a>
 80119d6:	7960      	ldrb	r0, [r4, #5]
 80119d8:	fab0 f080 	clz	r0, r0
 80119dc:	0940      	lsrs	r0, r0, #5
 80119de:	b00f      	add	sp, #60	; 0x3c
 80119e0:	bd30      	pop	{r4, r5, pc}
 80119e2:	bf00      	nop

080119e4 <uxr_create_session>:
 80119e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119e8:	f100 0b08 	add.w	fp, r0, #8
 80119ec:	4604      	mov	r4, r0
 80119ee:	b0ab      	sub	sp, #172	; 0xac
 80119f0:	4658      	mov	r0, fp
 80119f2:	465e      	mov	r6, fp
 80119f4:	f000 faa6 	bl	8011f44 <uxr_reset_stream_storage>
 80119f8:	4620      	mov	r0, r4
 80119fa:	f000 fa05 	bl	8011e08 <uxr_session_header_offset>
 80119fe:	2300      	movs	r3, #0
 8011a00:	221c      	movs	r2, #28
 8011a02:	a90b      	add	r1, sp, #44	; 0x2c
 8011a04:	9000      	str	r0, [sp, #0]
 8011a06:	a812      	add	r0, sp, #72	; 0x48
 8011a08:	f7fe feae 	bl	8010768 <ucdr_init_buffer_origin_offset>
 8011a0c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011a0e:	a912      	add	r1, sp, #72	; 0x48
 8011a10:	4620      	mov	r0, r4
 8011a12:	8a1a      	ldrh	r2, [r3, #16]
 8011a14:	3a04      	subs	r2, #4
 8011a16:	b292      	uxth	r2, r2
 8011a18:	f000 f91c 	bl	8011c54 <uxr_buffer_create_session>
 8011a1c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8011a1e:	4620      	mov	r0, r4
 8011a20:	f000 f98a 	bl	8011d38 <uxr_stamp_create_session_header>
 8011a24:	a812      	add	r0, sp, #72	; 0x48
 8011a26:	f7fe fedf 	bl	80107e8 <ucdr_buffer_length>
 8011a2a:	23ff      	movs	r3, #255	; 0xff
 8011a2c:	4681      	mov	r9, r0
 8011a2e:	7163      	strb	r3, [r4, #5]
 8011a30:	230a      	movs	r3, #10
 8011a32:	9303      	str	r3, [sp, #12]
 8011a34:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8011a36:	464a      	mov	r2, r9
 8011a38:	a90b      	add	r1, sp, #44	; 0x2c
 8011a3a:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011a3e:	47a8      	blx	r5
 8011a40:	f000 fba0 	bl	8012184 <uxr_millis>
 8011a44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011a48:	4605      	mov	r5, r0
 8011a4a:	e009      	b.n	8011a60 <uxr_create_session+0x7c>
 8011a4c:	f000 fb9a 	bl	8012184 <uxr_millis>
 8011a50:	1b40      	subs	r0, r0, r5
 8011a52:	7962      	ldrb	r2, [r4, #5]
 8011a54:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	dd38      	ble.n	8011ace <uxr_create_session+0xea>
 8011a5c:	2aff      	cmp	r2, #255	; 0xff
 8011a5e:	d13c      	bne.n	8011ada <uxr_create_session+0xf6>
 8011a60:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8011a62:	a907      	add	r1, sp, #28
 8011a64:	6897      	ldr	r7, [r2, #8]
 8011a66:	6810      	ldr	r0, [r2, #0]
 8011a68:	aa08      	add	r2, sp, #32
 8011a6a:	47b8      	blx	r7
 8011a6c:	2800      	cmp	r0, #0
 8011a6e:	d0ed      	beq.n	8011a4c <uxr_create_session+0x68>
 8011a70:	a81a      	add	r0, sp, #104	; 0x68
 8011a72:	2700      	movs	r7, #0
 8011a74:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011a78:	f7fe fe88 	bl	801078c <ucdr_init_buffer>
 8011a7c:	f10d 031a 	add.w	r3, sp, #26
 8011a80:	aa06      	add	r2, sp, #24
 8011a82:	a91a      	add	r1, sp, #104	; 0x68
 8011a84:	4620      	mov	r0, r4
 8011a86:	f88d 7018 	strb.w	r7, [sp, #24]
 8011a8a:	f000 f97d 	bl	8011d88 <uxr_read_session_header>
 8011a8e:	2800      	cmp	r0, #0
 8011a90:	d0dc      	beq.n	8011a4c <uxr_create_session+0x68>
 8011a92:	4639      	mov	r1, r7
 8011a94:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011a98:	f000 fa1e 	bl	8011ed8 <uxr_stream_id_from_raw>
 8011a9c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011aa0:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8011aa4:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8011aa8:	2f01      	cmp	r7, #1
 8011aaa:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8011aae:	d053      	beq.n	8011b58 <uxr_create_session+0x174>
 8011ab0:	2f02      	cmp	r7, #2
 8011ab2:	d018      	beq.n	8011ae6 <uxr_create_session+0x102>
 8011ab4:	2f00      	cmp	r7, #0
 8011ab6:	d1c9      	bne.n	8011a4c <uxr_create_session+0x68>
 8011ab8:	4639      	mov	r1, r7
 8011aba:	4638      	mov	r0, r7
 8011abc:	f000 fa0c 	bl	8011ed8 <uxr_stream_id_from_raw>
 8011ac0:	a91a      	add	r1, sp, #104	; 0x68
 8011ac2:	4602      	mov	r2, r0
 8011ac4:	900a      	str	r0, [sp, #40]	; 0x28
 8011ac6:	4620      	mov	r0, r4
 8011ac8:	f7ff fb1c 	bl	8011104 <read_submessage_list>
 8011acc:	e7be      	b.n	8011a4c <uxr_create_session+0x68>
 8011ace:	9b03      	ldr	r3, [sp, #12]
 8011ad0:	3b01      	subs	r3, #1
 8011ad2:	9303      	str	r3, [sp, #12]
 8011ad4:	d001      	beq.n	8011ada <uxr_create_session+0xf6>
 8011ad6:	2aff      	cmp	r2, #255	; 0xff
 8011ad8:	d0ac      	beq.n	8011a34 <uxr_create_session+0x50>
 8011ada:	2a00      	cmp	r2, #0
 8011adc:	d051      	beq.n	8011b82 <uxr_create_session+0x19e>
 8011ade:	2000      	movs	r0, #0
 8011ae0:	b02b      	add	sp, #172	; 0xac
 8011ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ae6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8011aea:	4641      	mov	r1, r8
 8011aec:	4630      	mov	r0, r6
 8011aee:	9304      	str	r3, [sp, #16]
 8011af0:	f000 fae0 	bl	80120b4 <uxr_get_input_reliable_stream>
 8011af4:	4682      	mov	sl, r0
 8011af6:	b348      	cbz	r0, 8011b4c <uxr_create_session+0x168>
 8011af8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011afa:	a81a      	add	r0, sp, #104	; 0x68
 8011afc:	9205      	str	r2, [sp, #20]
 8011afe:	f7fe fe77 	bl	80107f0 <ucdr_buffer_remaining>
 8011b02:	4603      	mov	r3, r0
 8011b04:	f10d 0019 	add.w	r0, sp, #25
 8011b08:	9a05      	ldr	r2, [sp, #20]
 8011b0a:	4659      	mov	r1, fp
 8011b0c:	9000      	str	r0, [sp, #0]
 8011b0e:	4650      	mov	r0, sl
 8011b10:	f008 f898 	bl	8019c44 <uxr_receive_reliable_message>
 8011b14:	b1d0      	cbz	r0, 8011b4c <uxr_create_session+0x168>
 8011b16:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d038      	beq.n	8011b90 <uxr_create_session+0x1ac>
 8011b1e:	9f04      	ldr	r7, [sp, #16]
 8011b20:	e00a      	b.n	8011b38 <uxr_create_session+0x154>
 8011b22:	f04f 0302 	mov.w	r3, #2
 8011b26:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 8011b2a:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 8011b2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011b32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b34:	f7ff fae6 	bl	8011104 <read_submessage_list>
 8011b38:	a922      	add	r1, sp, #136	; 0x88
 8011b3a:	2204      	movs	r2, #4
 8011b3c:	4650      	mov	r0, sl
 8011b3e:	f008 f903 	bl	8019d48 <uxr_next_input_reliable_buffer_available>
 8011b42:	4603      	mov	r3, r0
 8011b44:	a922      	add	r1, sp, #136	; 0x88
 8011b46:	4620      	mov	r0, r4
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d1ea      	bne.n	8011b22 <uxr_create_session+0x13e>
 8011b4c:	4642      	mov	r2, r8
 8011b4e:	9904      	ldr	r1, [sp, #16]
 8011b50:	4620      	mov	r0, r4
 8011b52:	f7ff f953 	bl	8010dfc <write_submessage_acknack.isra.0>
 8011b56:	e779      	b.n	8011a4c <uxr_create_session+0x68>
 8011b58:	4641      	mov	r1, r8
 8011b5a:	4630      	mov	r0, r6
 8011b5c:	f000 faa0 	bl	80120a0 <uxr_get_input_best_effort_stream>
 8011b60:	2800      	cmp	r0, #0
 8011b62:	f43f af73 	beq.w	8011a4c <uxr_create_session+0x68>
 8011b66:	4659      	mov	r1, fp
 8011b68:	f007 ffe2 	bl	8019b30 <uxr_receive_best_effort_message>
 8011b6c:	2800      	cmp	r0, #0
 8011b6e:	f43f af6d 	beq.w	8011a4c <uxr_create_session+0x68>
 8011b72:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8011b76:	a91a      	add	r1, sp, #104	; 0x68
 8011b78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b7a:	4620      	mov	r0, r4
 8011b7c:	f7ff fac2 	bl	8011104 <read_submessage_list>
 8011b80:	e764      	b.n	8011a4c <uxr_create_session+0x68>
 8011b82:	4630      	mov	r0, r6
 8011b84:	f000 f9de 	bl	8011f44 <uxr_reset_stream_storage>
 8011b88:	2001      	movs	r0, #1
 8011b8a:	b02b      	add	sp, #172	; 0xac
 8011b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b90:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8011b94:	a91a      	add	r1, sp, #104	; 0x68
 8011b96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b98:	4620      	mov	r0, r4
 8011b9a:	f7ff fab3 	bl	8011104 <read_submessage_list>
 8011b9e:	e7be      	b.n	8011b1e <uxr_create_session+0x13a>

08011ba0 <uxr_prepare_stream_to_write_submessage>:
 8011ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ba4:	b082      	sub	sp, #8
 8011ba6:	4604      	mov	r4, r0
 8011ba8:	4610      	mov	r0, r2
 8011baa:	4615      	mov	r5, r2
 8011bac:	461e      	mov	r6, r3
 8011bae:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8011bb2:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8011bb6:	f105 0904 	add.w	r9, r5, #4
 8011bba:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8011bbe:	9101      	str	r1, [sp, #4]
 8011bc0:	f000 fada 	bl	8012178 <uxr_submessage_padding>
 8011bc4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011bc8:	4481      	add	r9, r0
 8011bca:	2b01      	cmp	r3, #1
 8011bcc:	d01d      	beq.n	8011c0a <uxr_prepare_stream_to_write_submessage+0x6a>
 8011bce:	2b02      	cmp	r3, #2
 8011bd0:	d116      	bne.n	8011c00 <uxr_prepare_stream_to_write_submessage+0x60>
 8011bd2:	f104 0008 	add.w	r0, r4, #8
 8011bd6:	4651      	mov	r1, sl
 8011bd8:	f000 fa56 	bl	8012088 <uxr_get_output_reliable_stream>
 8011bdc:	4604      	mov	r4, r0
 8011bde:	b158      	cbz	r0, 8011bf8 <uxr_prepare_stream_to_write_submessage+0x58>
 8011be0:	4649      	mov	r1, r9
 8011be2:	4632      	mov	r2, r6
 8011be4:	f008 fa76 	bl	801a0d4 <uxr_prepare_reliable_buffer_to_write>
 8011be8:	4604      	mov	r4, r0
 8011bea:	b12c      	cbz	r4, 8011bf8 <uxr_prepare_stream_to_write_submessage+0x58>
 8011bec:	4643      	mov	r3, r8
 8011bee:	b2aa      	uxth	r2, r5
 8011bf0:	4639      	mov	r1, r7
 8011bf2:	4630      	mov	r0, r6
 8011bf4:	f000 fa80 	bl	80120f8 <uxr_buffer_submessage_header>
 8011bf8:	4620      	mov	r0, r4
 8011bfa:	b002      	add	sp, #8
 8011bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c00:	2400      	movs	r4, #0
 8011c02:	4620      	mov	r0, r4
 8011c04:	b002      	add	sp, #8
 8011c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c0a:	f104 0008 	add.w	r0, r4, #8
 8011c0e:	4651      	mov	r1, sl
 8011c10:	f000 fa32 	bl	8012078 <uxr_get_output_best_effort_stream>
 8011c14:	4604      	mov	r4, r0
 8011c16:	2800      	cmp	r0, #0
 8011c18:	d0ee      	beq.n	8011bf8 <uxr_prepare_stream_to_write_submessage+0x58>
 8011c1a:	4649      	mov	r1, r9
 8011c1c:	4632      	mov	r2, r6
 8011c1e:	f008 f983 	bl	8019f28 <uxr_prepare_best_effort_buffer_to_write>
 8011c22:	4604      	mov	r4, r0
 8011c24:	e7e1      	b.n	8011bea <uxr_prepare_stream_to_write_submessage+0x4a>
 8011c26:	bf00      	nop

08011c28 <uxr_init_session_info>:
 8011c28:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8011c2c:	23ff      	movs	r3, #255	; 0xff
 8011c2e:	7102      	strb	r2, [r0, #4]
 8011c30:	f880 c001 	strb.w	ip, [r0, #1]
 8011c34:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8011c38:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8011c3c:	7001      	strb	r1, [r0, #0]
 8011c3e:	f880 c002 	strb.w	ip, [r0, #2]
 8011c42:	7143      	strb	r3, [r0, #5]
 8011c44:	70c2      	strb	r2, [r0, #3]
 8011c46:	b500      	push	{lr}
 8011c48:	f04f 0e09 	mov.w	lr, #9
 8011c4c:	f8a0 e006 	strh.w	lr, [r0, #6]
 8011c50:	f85d fb04 	ldr.w	pc, [sp], #4

08011c54 <uxr_buffer_create_session>:
 8011c54:	b530      	push	{r4, r5, lr}
 8011c56:	2300      	movs	r3, #0
 8011c58:	b089      	sub	sp, #36	; 0x24
 8011c5a:	4d12      	ldr	r5, [pc, #72]	; (8011ca4 <uxr_buffer_create_session+0x50>)
 8011c5c:	460c      	mov	r4, r1
 8011c5e:	9307      	str	r3, [sp, #28]
 8011c60:	4619      	mov	r1, r3
 8011c62:	f8ad 201c 	strh.w	r2, [sp, #28]
 8011c66:	2201      	movs	r2, #1
 8011c68:	9301      	str	r3, [sp, #4]
 8011c6a:	80c2      	strh	r2, [r0, #6]
 8011c6c:	f88d 2004 	strb.w	r2, [sp, #4]
 8011c70:	682a      	ldr	r2, [r5, #0]
 8011c72:	9303      	str	r3, [sp, #12]
 8011c74:	9200      	str	r2, [sp, #0]
 8011c76:	88aa      	ldrh	r2, [r5, #4]
 8011c78:	9306      	str	r3, [sp, #24]
 8011c7a:	f8ad 2006 	strh.w	r2, [sp, #6]
 8011c7e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8011c82:	9202      	str	r2, [sp, #8]
 8011c84:	7802      	ldrb	r2, [r0, #0]
 8011c86:	4620      	mov	r0, r4
 8011c88:	f88d 200c 	strb.w	r2, [sp, #12]
 8011c8c:	2210      	movs	r2, #16
 8011c8e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8011c92:	f000 fa31 	bl	80120f8 <uxr_buffer_submessage_header>
 8011c96:	4669      	mov	r1, sp
 8011c98:	4620      	mov	r0, r4
 8011c9a:	f001 faa3 	bl	80131e4 <uxr_serialize_CREATE_CLIENT_Payload>
 8011c9e:	b009      	add	sp, #36	; 0x24
 8011ca0:	bd30      	pop	{r4, r5, pc}
 8011ca2:	bf00      	nop
 8011ca4:	0801d7d0 	.word	0x0801d7d0

08011ca8 <uxr_buffer_delete_session>:
 8011ca8:	4a0c      	ldr	r2, [pc, #48]	; (8011cdc <uxr_buffer_delete_session+0x34>)
 8011caa:	2302      	movs	r3, #2
 8011cac:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8011cb0:	b510      	push	{r4, lr}
 8011cb2:	460c      	mov	r4, r1
 8011cb4:	b082      	sub	sp, #8
 8011cb6:	8911      	ldrh	r1, [r2, #8]
 8011cb8:	2204      	movs	r2, #4
 8011cba:	80c3      	strh	r3, [r0, #6]
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	f8ad 1006 	strh.w	r1, [sp, #6]
 8011cc2:	4620      	mov	r0, r4
 8011cc4:	2103      	movs	r1, #3
 8011cc6:	f8ad c004 	strh.w	ip, [sp, #4]
 8011cca:	f000 fa15 	bl	80120f8 <uxr_buffer_submessage_header>
 8011cce:	a901      	add	r1, sp, #4
 8011cd0:	4620      	mov	r0, r4
 8011cd2:	f001 fb2f 	bl	8013334 <uxr_serialize_DELETE_Payload>
 8011cd6:	b002      	add	sp, #8
 8011cd8:	bd10      	pop	{r4, pc}
 8011cda:	bf00      	nop
 8011cdc:	0801d7d0 	.word	0x0801d7d0

08011ce0 <uxr_read_create_session_status>:
 8011ce0:	b510      	push	{r4, lr}
 8011ce2:	460b      	mov	r3, r1
 8011ce4:	b088      	sub	sp, #32
 8011ce6:	4604      	mov	r4, r0
 8011ce8:	a901      	add	r1, sp, #4
 8011cea:	4618      	mov	r0, r3
 8011cec:	f001 fb32 	bl	8013354 <uxr_deserialize_STATUS_AGENT_Payload>
 8011cf0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011cf4:	7163      	strb	r3, [r4, #5]
 8011cf6:	b008      	add	sp, #32
 8011cf8:	bd10      	pop	{r4, pc}
 8011cfa:	bf00      	nop

08011cfc <uxr_read_delete_session_status>:
 8011cfc:	b510      	push	{r4, lr}
 8011cfe:	b084      	sub	sp, #16
 8011d00:	4604      	mov	r4, r0
 8011d02:	4608      	mov	r0, r1
 8011d04:	a902      	add	r1, sp, #8
 8011d06:	f001 fb55 	bl	80133b4 <uxr_deserialize_STATUS_Payload>
 8011d0a:	88e3      	ldrh	r3, [r4, #6]
 8011d0c:	2b02      	cmp	r3, #2
 8011d0e:	d001      	beq.n	8011d14 <uxr_read_delete_session_status+0x18>
 8011d10:	b004      	add	sp, #16
 8011d12:	bd10      	pop	{r4, pc}
 8011d14:	f10d 000a 	add.w	r0, sp, #10
 8011d18:	f7fe fff6 	bl	8010d08 <uxr_object_id_from_raw>
 8011d1c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8011d20:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8011d24:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011d28:	b29b      	uxth	r3, r3
 8011d2a:	2b02      	cmp	r3, #2
 8011d2c:	d1f0      	bne.n	8011d10 <uxr_read_delete_session_status+0x14>
 8011d2e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011d32:	7163      	strb	r3, [r4, #5]
 8011d34:	e7ec      	b.n	8011d10 <uxr_read_delete_session_status+0x14>
 8011d36:	bf00      	nop

08011d38 <uxr_stamp_create_session_header>:
 8011d38:	b510      	push	{r4, lr}
 8011d3a:	2208      	movs	r2, #8
 8011d3c:	b08a      	sub	sp, #40	; 0x28
 8011d3e:	4604      	mov	r4, r0
 8011d40:	eb0d 0002 	add.w	r0, sp, r2
 8011d44:	f7fe fd22 	bl	801078c <ucdr_init_buffer>
 8011d48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d4c:	2300      	movs	r3, #0
 8011d4e:	a802      	add	r0, sp, #8
 8011d50:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8011d54:	9400      	str	r4, [sp, #0]
 8011d56:	461a      	mov	r2, r3
 8011d58:	f000 fbca 	bl	80124f0 <uxr_serialize_message_header>
 8011d5c:	b00a      	add	sp, #40	; 0x28
 8011d5e:	bd10      	pop	{r4, pc}

08011d60 <uxr_stamp_session_header>:
 8011d60:	b530      	push	{r4, r5, lr}
 8011d62:	b08d      	sub	sp, #52	; 0x34
 8011d64:	4604      	mov	r4, r0
 8011d66:	460d      	mov	r5, r1
 8011d68:	4619      	mov	r1, r3
 8011d6a:	a804      	add	r0, sp, #16
 8011d6c:	9203      	str	r2, [sp, #12]
 8011d6e:	2208      	movs	r2, #8
 8011d70:	f7fe fd0c 	bl	801078c <ucdr_init_buffer>
 8011d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d78:	9b03      	ldr	r3, [sp, #12]
 8011d7a:	462a      	mov	r2, r5
 8011d7c:	a804      	add	r0, sp, #16
 8011d7e:	9400      	str	r4, [sp, #0]
 8011d80:	f000 fbb6 	bl	80124f0 <uxr_serialize_message_header>
 8011d84:	b00d      	add	sp, #52	; 0x34
 8011d86:	bd30      	pop	{r4, r5, pc}

08011d88 <uxr_read_session_header>:
 8011d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d8c:	4607      	mov	r7, r0
 8011d8e:	b084      	sub	sp, #16
 8011d90:	4608      	mov	r0, r1
 8011d92:	460c      	mov	r4, r1
 8011d94:	4615      	mov	r5, r2
 8011d96:	461e      	mov	r6, r3
 8011d98:	f7fe fd2a 	bl	80107f0 <ucdr_buffer_remaining>
 8011d9c:	2808      	cmp	r0, #8
 8011d9e:	d803      	bhi.n	8011da8 <uxr_read_session_header+0x20>
 8011da0:	2000      	movs	r0, #0
 8011da2:	b004      	add	sp, #16
 8011da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011da8:	f10d 080c 	add.w	r8, sp, #12
 8011dac:	4633      	mov	r3, r6
 8011dae:	462a      	mov	r2, r5
 8011db0:	4620      	mov	r0, r4
 8011db2:	f10d 010b 	add.w	r1, sp, #11
 8011db6:	f8cd 8000 	str.w	r8, [sp]
 8011dba:	f000 fbb7 	bl	801252c <uxr_deserialize_message_header>
 8011dbe:	783a      	ldrb	r2, [r7, #0]
 8011dc0:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8011dc4:	4293      	cmp	r3, r2
 8011dc6:	d1eb      	bne.n	8011da0 <uxr_read_session_header+0x18>
 8011dc8:	061b      	lsls	r3, r3, #24
 8011dca:	d41b      	bmi.n	8011e04 <uxr_read_session_header+0x7c>
 8011dcc:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8011dd0:	787b      	ldrb	r3, [r7, #1]
 8011dd2:	429a      	cmp	r2, r3
 8011dd4:	d003      	beq.n	8011dde <uxr_read_session_header+0x56>
 8011dd6:	2001      	movs	r0, #1
 8011dd8:	f080 0001 	eor.w	r0, r0, #1
 8011ddc:	e7e1      	b.n	8011da2 <uxr_read_session_header+0x1a>
 8011dde:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8011de2:	1cb8      	adds	r0, r7, #2
 8011de4:	78bb      	ldrb	r3, [r7, #2]
 8011de6:	429a      	cmp	r2, r3
 8011de8:	d1f5      	bne.n	8011dd6 <uxr_read_session_header+0x4e>
 8011dea:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8011dee:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8011df2:	429a      	cmp	r2, r3
 8011df4:	d1ef      	bne.n	8011dd6 <uxr_read_session_header+0x4e>
 8011df6:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8011dfa:	7843      	ldrb	r3, [r0, #1]
 8011dfc:	429a      	cmp	r2, r3
 8011dfe:	d1ea      	bne.n	8011dd6 <uxr_read_session_header+0x4e>
 8011e00:	2000      	movs	r0, #0
 8011e02:	e7e9      	b.n	8011dd8 <uxr_read_session_header+0x50>
 8011e04:	2001      	movs	r0, #1
 8011e06:	e7cc      	b.n	8011da2 <uxr_read_session_header+0x1a>

08011e08 <uxr_session_header_offset>:
 8011e08:	f990 3000 	ldrsb.w	r3, [r0]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	bfac      	ite	ge
 8011e10:	2008      	movge	r0, #8
 8011e12:	2004      	movlt	r0, #4
 8011e14:	4770      	bx	lr
 8011e16:	bf00      	nop

08011e18 <uxr_init_base_object_request>:
 8011e18:	b510      	push	{r4, lr}
 8011e1a:	b082      	sub	sp, #8
 8011e1c:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 8011e20:	9101      	str	r1, [sp, #4]
 8011e22:	88c3      	ldrh	r3, [r0, #6]
 8011e24:	f1a3 010a 	sub.w	r1, r3, #10
 8011e28:	b289      	uxth	r1, r1
 8011e2a:	42a1      	cmp	r1, r4
 8011e2c:	d80f      	bhi.n	8011e4e <uxr_init_base_object_request+0x36>
 8011e2e:	3301      	adds	r3, #1
 8011e30:	b29c      	uxth	r4, r3
 8011e32:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8011e36:	b2db      	uxtb	r3, r3
 8011e38:	80c4      	strh	r4, [r0, #6]
 8011e3a:	1c91      	adds	r1, r2, #2
 8011e3c:	9801      	ldr	r0, [sp, #4]
 8011e3e:	f882 c000 	strb.w	ip, [r2]
 8011e42:	7053      	strb	r3, [r2, #1]
 8011e44:	f7fe ff74 	bl	8010d30 <uxr_object_id_to_raw>
 8011e48:	4620      	mov	r0, r4
 8011e4a:	b002      	add	sp, #8
 8011e4c:	bd10      	pop	{r4, pc}
 8011e4e:	230a      	movs	r3, #10
 8011e50:	f04f 0c00 	mov.w	ip, #0
 8011e54:	461c      	mov	r4, r3
 8011e56:	e7ef      	b.n	8011e38 <uxr_init_base_object_request+0x20>

08011e58 <uxr_parse_base_object_request>:
 8011e58:	b570      	push	{r4, r5, r6, lr}
 8011e5a:	4604      	mov	r4, r0
 8011e5c:	3002      	adds	r0, #2
 8011e5e:	460d      	mov	r5, r1
 8011e60:	4616      	mov	r6, r2
 8011e62:	f7fe ff51 	bl	8010d08 <uxr_object_id_from_raw>
 8011e66:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8011e6a:	8028      	strh	r0, [r5, #0]
 8011e6c:	806b      	strh	r3, [r5, #2]
 8011e6e:	7822      	ldrb	r2, [r4, #0]
 8011e70:	7863      	ldrb	r3, [r4, #1]
 8011e72:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011e76:	8033      	strh	r3, [r6, #0]
 8011e78:	bd70      	pop	{r4, r5, r6, pc}
 8011e7a:	bf00      	nop

08011e7c <uxr_stream_id>:
 8011e7c:	2901      	cmp	r1, #1
 8011e7e:	4684      	mov	ip, r0
 8011e80:	b500      	push	{lr}
 8011e82:	b083      	sub	sp, #12
 8011e84:	d01f      	beq.n	8011ec6 <uxr_stream_id+0x4a>
 8011e86:	2902      	cmp	r1, #2
 8011e88:	f04f 0e00 	mov.w	lr, #0
 8011e8c:	d020      	beq.n	8011ed0 <uxr_stream_id+0x54>
 8011e8e:	2300      	movs	r3, #0
 8011e90:	2000      	movs	r0, #0
 8011e92:	f36e 0307 	bfi	r3, lr, #0, #8
 8011e96:	f36c 230f 	bfi	r3, ip, #8, #8
 8011e9a:	f361 4317 	bfi	r3, r1, #16, #8
 8011e9e:	f362 631f 	bfi	r3, r2, #24, #8
 8011ea2:	fa5f fc83 	uxtb.w	ip, r3
 8011ea6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011eaa:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011eae:	0e1b      	lsrs	r3, r3, #24
 8011eb0:	f36c 0007 	bfi	r0, ip, #0, #8
 8011eb4:	f361 200f 	bfi	r0, r1, #8, #8
 8011eb8:	f362 4017 	bfi	r0, r2, #16, #8
 8011ebc:	f363 601f 	bfi	r0, r3, #24, #8
 8011ec0:	b003      	add	sp, #12
 8011ec2:	f85d fb04 	ldr.w	pc, [sp], #4
 8011ec6:	f100 0e01 	add.w	lr, r0, #1
 8011eca:	fa5f fe8e 	uxtb.w	lr, lr
 8011ece:	e7de      	b.n	8011e8e <uxr_stream_id+0x12>
 8011ed0:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 8011ed4:	e7db      	b.n	8011e8e <uxr_stream_id+0x12>
 8011ed6:	bf00      	nop

08011ed8 <uxr_stream_id_from_raw>:
 8011ed8:	b082      	sub	sp, #8
 8011eda:	b130      	cbz	r0, 8011eea <uxr_stream_id_from_raw+0x12>
 8011edc:	0603      	lsls	r3, r0, #24
 8011ede:	d421      	bmi.n	8011f24 <uxr_stream_id_from_raw+0x4c>
 8011ee0:	1e42      	subs	r2, r0, #1
 8011ee2:	f04f 0c01 	mov.w	ip, #1
 8011ee6:	b2d2      	uxtb	r2, r2
 8011ee8:	e001      	b.n	8011eee <uxr_stream_id_from_raw+0x16>
 8011eea:	4684      	mov	ip, r0
 8011eec:	4602      	mov	r2, r0
 8011eee:	2300      	movs	r3, #0
 8011ef0:	f360 0307 	bfi	r3, r0, #0, #8
 8011ef4:	2000      	movs	r0, #0
 8011ef6:	f362 230f 	bfi	r3, r2, #8, #8
 8011efa:	f36c 4317 	bfi	r3, ip, #16, #8
 8011efe:	f361 631f 	bfi	r3, r1, #24, #8
 8011f02:	fa5f fc83 	uxtb.w	ip, r3
 8011f06:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011f0a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011f0e:	0e1b      	lsrs	r3, r3, #24
 8011f10:	f36c 0007 	bfi	r0, ip, #0, #8
 8011f14:	f361 200f 	bfi	r0, r1, #8, #8
 8011f18:	f362 4017 	bfi	r0, r2, #16, #8
 8011f1c:	f363 601f 	bfi	r0, r3, #24, #8
 8011f20:	b002      	add	sp, #8
 8011f22:	4770      	bx	lr
 8011f24:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 8011f28:	f04f 0c02 	mov.w	ip, #2
 8011f2c:	e7df      	b.n	8011eee <uxr_stream_id_from_raw+0x16>
 8011f2e:	bf00      	nop

08011f30 <uxr_init_stream_storage>:
 8011f30:	2300      	movs	r3, #0
 8011f32:	7403      	strb	r3, [r0, #16]
 8011f34:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8011f38:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8011f3c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8011f40:	4770      	bx	lr
 8011f42:	bf00      	nop

08011f44 <uxr_reset_stream_storage>:
 8011f44:	b570      	push	{r4, r5, r6, lr}
 8011f46:	7c03      	ldrb	r3, [r0, #16]
 8011f48:	4604      	mov	r4, r0
 8011f4a:	b14b      	cbz	r3, 8011f60 <uxr_reset_stream_storage+0x1c>
 8011f4c:	4606      	mov	r6, r0
 8011f4e:	2500      	movs	r5, #0
 8011f50:	4630      	mov	r0, r6
 8011f52:	3501      	adds	r5, #1
 8011f54:	f007 ffe2 	bl	8019f1c <uxr_reset_output_best_effort_stream>
 8011f58:	7c23      	ldrb	r3, [r4, #16]
 8011f5a:	3610      	adds	r6, #16
 8011f5c:	42ab      	cmp	r3, r5
 8011f5e:	d8f7      	bhi.n	8011f50 <uxr_reset_stream_storage+0xc>
 8011f60:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011f64:	b15b      	cbz	r3, 8011f7e <uxr_reset_stream_storage+0x3a>
 8011f66:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8011f6a:	2500      	movs	r5, #0
 8011f6c:	4630      	mov	r0, r6
 8011f6e:	3501      	adds	r5, #1
 8011f70:	f007 fdda 	bl	8019b28 <uxr_reset_input_best_effort_stream>
 8011f74:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011f78:	3602      	adds	r6, #2
 8011f7a:	42ab      	cmp	r3, r5
 8011f7c:	d8f6      	bhi.n	8011f6c <uxr_reset_stream_storage+0x28>
 8011f7e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011f82:	b15b      	cbz	r3, 8011f9c <uxr_reset_stream_storage+0x58>
 8011f84:	f104 0618 	add.w	r6, r4, #24
 8011f88:	2500      	movs	r5, #0
 8011f8a:	4630      	mov	r0, r6
 8011f8c:	3501      	adds	r5, #1
 8011f8e:	f008 f873 	bl	801a078 <uxr_reset_output_reliable_stream>
 8011f92:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8011f96:	3628      	adds	r6, #40	; 0x28
 8011f98:	42ab      	cmp	r3, r5
 8011f9a:	d8f6      	bhi.n	8011f8a <uxr_reset_stream_storage+0x46>
 8011f9c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8011fa0:	b15b      	cbz	r3, 8011fba <uxr_reset_stream_storage+0x76>
 8011fa2:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8011fa6:	2500      	movs	r5, #0
 8011fa8:	4630      	mov	r0, r6
 8011faa:	3501      	adds	r5, #1
 8011fac:	f007 fe28 	bl	8019c00 <uxr_reset_input_reliable_stream>
 8011fb0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8011fb4:	3618      	adds	r6, #24
 8011fb6:	42ab      	cmp	r3, r5
 8011fb8:	d8f6      	bhi.n	8011fa8 <uxr_reset_stream_storage+0x64>
 8011fba:	bd70      	pop	{r4, r5, r6, pc}

08011fbc <uxr_add_output_best_effort_buffer>:
 8011fbc:	b510      	push	{r4, lr}
 8011fbe:	7c04      	ldrb	r4, [r0, #16]
 8011fc0:	b082      	sub	sp, #8
 8011fc2:	f104 0c01 	add.w	ip, r4, #1
 8011fc6:	f880 c010 	strb.w	ip, [r0, #16]
 8011fca:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8011fce:	f007 ff9b 	bl	8019f08 <uxr_init_output_best_effort_stream>
 8011fd2:	2201      	movs	r2, #1
 8011fd4:	4620      	mov	r0, r4
 8011fd6:	4611      	mov	r1, r2
 8011fd8:	b002      	add	sp, #8
 8011fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fde:	f7ff bf4d 	b.w	8011e7c <uxr_stream_id>
 8011fe2:	bf00      	nop

08011fe4 <uxr_add_output_reliable_buffer>:
 8011fe4:	b510      	push	{r4, lr}
 8011fe6:	b084      	sub	sp, #16
 8011fe8:	4684      	mov	ip, r0
 8011fea:	2028      	movs	r0, #40	; 0x28
 8011fec:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8011ff0:	9400      	str	r4, [sp, #0]
 8011ff2:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 8011ff6:	fb00 c004 	mla	r0, r0, r4, ip
 8011ffa:	f104 0e01 	add.w	lr, r4, #1
 8011ffe:	3018      	adds	r0, #24
 8012000:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 8012004:	f008 f800 	bl	801a008 <uxr_init_output_reliable_stream>
 8012008:	2201      	movs	r2, #1
 801200a:	2102      	movs	r1, #2
 801200c:	4620      	mov	r0, r4
 801200e:	b004      	add	sp, #16
 8012010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012014:	f7ff bf32 	b.w	8011e7c <uxr_stream_id>

08012018 <uxr_add_input_best_effort_buffer>:
 8012018:	b510      	push	{r4, lr}
 801201a:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 801201e:	b082      	sub	sp, #8
 8012020:	1c62      	adds	r2, r4, #1
 8012022:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8012026:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 801202a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801202e:	f007 fd77 	bl	8019b20 <uxr_init_input_best_effort_stream>
 8012032:	2200      	movs	r2, #0
 8012034:	2101      	movs	r1, #1
 8012036:	4620      	mov	r0, r4
 8012038:	b002      	add	sp, #8
 801203a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801203e:	f7ff bf1d 	b.w	8011e7c <uxr_stream_id>
 8012042:	bf00      	nop

08012044 <uxr_add_input_reliable_buffer>:
 8012044:	b510      	push	{r4, lr}
 8012046:	b084      	sub	sp, #16
 8012048:	4684      	mov	ip, r0
 801204a:	2018      	movs	r0, #24
 801204c:	9c06      	ldr	r4, [sp, #24]
 801204e:	9400      	str	r4, [sp, #0]
 8012050:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 8012054:	fb00 c004 	mla	r0, r0, r4, ip
 8012058:	f104 0e01 	add.w	lr, r4, #1
 801205c:	3048      	adds	r0, #72	; 0x48
 801205e:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 8012062:	f007 fda7 	bl	8019bb4 <uxr_init_input_reliable_stream>
 8012066:	2200      	movs	r2, #0
 8012068:	2102      	movs	r1, #2
 801206a:	4620      	mov	r0, r4
 801206c:	b004      	add	sp, #16
 801206e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012072:	f7ff bf03 	b.w	8011e7c <uxr_stream_id>
 8012076:	bf00      	nop

08012078 <uxr_get_output_best_effort_stream>:
 8012078:	7c03      	ldrb	r3, [r0, #16]
 801207a:	428b      	cmp	r3, r1
 801207c:	bf8c      	ite	hi
 801207e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8012082:	2000      	movls	r0, #0
 8012084:	4770      	bx	lr
 8012086:	bf00      	nop

08012088 <uxr_get_output_reliable_stream>:
 8012088:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801208c:	428b      	cmp	r3, r1
 801208e:	d904      	bls.n	801209a <uxr_get_output_reliable_stream+0x12>
 8012090:	2328      	movs	r3, #40	; 0x28
 8012092:	fb03 0001 	mla	r0, r3, r1, r0
 8012096:	3018      	adds	r0, #24
 8012098:	4770      	bx	lr
 801209a:	2000      	movs	r0, #0
 801209c:	4770      	bx	lr
 801209e:	bf00      	nop

080120a0 <uxr_get_input_best_effort_stream>:
 80120a0:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80120a4:	428b      	cmp	r3, r1
 80120a6:	d903      	bls.n	80120b0 <uxr_get_input_best_effort_stream+0x10>
 80120a8:	3121      	adds	r1, #33	; 0x21
 80120aa:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80120ae:	4770      	bx	lr
 80120b0:	2000      	movs	r0, #0
 80120b2:	4770      	bx	lr

080120b4 <uxr_get_input_reliable_stream>:
 80120b4:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80120b8:	428b      	cmp	r3, r1
 80120ba:	d904      	bls.n	80120c6 <uxr_get_input_reliable_stream+0x12>
 80120bc:	2318      	movs	r3, #24
 80120be:	fb03 0001 	mla	r0, r3, r1, r0
 80120c2:	3048      	adds	r0, #72	; 0x48
 80120c4:	4770      	bx	lr
 80120c6:	2000      	movs	r0, #0
 80120c8:	4770      	bx	lr
 80120ca:	bf00      	nop

080120cc <uxr_output_streams_confirmed>:
 80120cc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80120d0:	b183      	cbz	r3, 80120f4 <uxr_output_streams_confirmed+0x28>
 80120d2:	b570      	push	{r4, r5, r6, lr}
 80120d4:	4606      	mov	r6, r0
 80120d6:	f100 0518 	add.w	r5, r0, #24
 80120da:	2400      	movs	r4, #0
 80120dc:	e000      	b.n	80120e0 <uxr_output_streams_confirmed+0x14>
 80120de:	b140      	cbz	r0, 80120f2 <uxr_output_streams_confirmed+0x26>
 80120e0:	4628      	mov	r0, r5
 80120e2:	3401      	adds	r4, #1
 80120e4:	f008 fa3c 	bl	801a560 <uxr_is_output_up_to_date>
 80120e8:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 80120ec:	3528      	adds	r5, #40	; 0x28
 80120ee:	42a3      	cmp	r3, r4
 80120f0:	d8f5      	bhi.n	80120de <uxr_output_streams_confirmed+0x12>
 80120f2:	bd70      	pop	{r4, r5, r6, pc}
 80120f4:	2001      	movs	r0, #1
 80120f6:	4770      	bx	lr

080120f8 <uxr_buffer_submessage_header>:
 80120f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120fa:	460e      	mov	r6, r1
 80120fc:	2104      	movs	r1, #4
 80120fe:	4604      	mov	r4, r0
 8012100:	4615      	mov	r5, r2
 8012102:	461f      	mov	r7, r3
 8012104:	f7fe fb5e 	bl	80107c4 <ucdr_align_to>
 8012108:	2301      	movs	r3, #1
 801210a:	4631      	mov	r1, r6
 801210c:	4620      	mov	r0, r4
 801210e:	ea47 0203 	orr.w	r2, r7, r3
 8012112:	7523      	strb	r3, [r4, #20]
 8012114:	462b      	mov	r3, r5
 8012116:	f000 fa29 	bl	801256c <uxr_serialize_submessage_header>
 801211a:	4620      	mov	r0, r4
 801211c:	f7fe fb68 	bl	80107f0 <ucdr_buffer_remaining>
 8012120:	42a8      	cmp	r0, r5
 8012122:	bf34      	ite	cc
 8012124:	2000      	movcc	r0, #0
 8012126:	2001      	movcs	r0, #1
 8012128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801212a:	bf00      	nop

0801212c <uxr_read_submessage_header>:
 801212c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012130:	4604      	mov	r4, r0
 8012132:	460d      	mov	r5, r1
 8012134:	2104      	movs	r1, #4
 8012136:	4616      	mov	r6, r2
 8012138:	4698      	mov	r8, r3
 801213a:	f7fe fb43 	bl	80107c4 <ucdr_align_to>
 801213e:	4620      	mov	r0, r4
 8012140:	f7fe fb56 	bl	80107f0 <ucdr_buffer_remaining>
 8012144:	2803      	cmp	r0, #3
 8012146:	bf8c      	ite	hi
 8012148:	2701      	movhi	r7, #1
 801214a:	2700      	movls	r7, #0
 801214c:	d802      	bhi.n	8012154 <uxr_read_submessage_header+0x28>
 801214e:	4638      	mov	r0, r7
 8012150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012154:	4633      	mov	r3, r6
 8012156:	4642      	mov	r2, r8
 8012158:	4620      	mov	r0, r4
 801215a:	4629      	mov	r1, r5
 801215c:	f000 fa1a 	bl	8012594 <uxr_deserialize_submessage_header>
 8012160:	f898 3000 	ldrb.w	r3, [r8]
 8012164:	4638      	mov	r0, r7
 8012166:	f003 0201 	and.w	r2, r3, #1
 801216a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 801216e:	f888 3000 	strb.w	r3, [r8]
 8012172:	7522      	strb	r2, [r4, #20]
 8012174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012178 <uxr_submessage_padding>:
 8012178:	f010 0003 	ands.w	r0, r0, #3
 801217c:	bf18      	it	ne
 801217e:	f1c0 0004 	rsbne	r0, r0, #4
 8012182:	4770      	bx	lr

08012184 <uxr_millis>:
 8012184:	b510      	push	{r4, lr}
 8012186:	b084      	sub	sp, #16
 8012188:	2001      	movs	r0, #1
 801218a:	4669      	mov	r1, sp
 801218c:	f7f0 fcc4 	bl	8002b18 <clock_gettime>
 8012190:	4908      	ldr	r1, [pc, #32]	; (80121b4 <uxr_millis+0x30>)
 8012192:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8012196:	fba0 0301 	umull	r0, r3, r0, r1
 801219a:	1900      	adds	r0, r0, r4
 801219c:	fb01 3102 	mla	r1, r1, r2, r3
 80121a0:	4a05      	ldr	r2, [pc, #20]	; (80121b8 <uxr_millis+0x34>)
 80121a2:	f04f 0300 	mov.w	r3, #0
 80121a6:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80121aa:	f7ee f8b1 	bl	8000310 <__aeabi_ldivmod>
 80121ae:	b004      	add	sp, #16
 80121b0:	bd10      	pop	{r4, pc}
 80121b2:	bf00      	nop
 80121b4:	3b9aca00 	.word	0x3b9aca00
 80121b8:	000f4240 	.word	0x000f4240

080121bc <uxr_nanos>:
 80121bc:	b510      	push	{r4, lr}
 80121be:	b084      	sub	sp, #16
 80121c0:	2001      	movs	r0, #1
 80121c2:	4669      	mov	r1, sp
 80121c4:	f7f0 fca8 	bl	8002b18 <clock_gettime>
 80121c8:	4a06      	ldr	r2, [pc, #24]	; (80121e4 <uxr_nanos+0x28>)
 80121ca:	9800      	ldr	r0, [sp, #0]
 80121cc:	9902      	ldr	r1, [sp, #8]
 80121ce:	fba0 0302 	umull	r0, r3, r0, r2
 80121d2:	9c01      	ldr	r4, [sp, #4]
 80121d4:	1840      	adds	r0, r0, r1
 80121d6:	fb02 3304 	mla	r3, r2, r4, r3
 80121da:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80121de:	b004      	add	sp, #16
 80121e0:	bd10      	pop	{r4, pc}
 80121e2:	bf00      	nop
 80121e4:	3b9aca00 	.word	0x3b9aca00

080121e8 <on_full_output_buffer_fragmented>:
 80121e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121ec:	460c      	mov	r4, r1
 80121ee:	b08a      	sub	sp, #40	; 0x28
 80121f0:	4606      	mov	r6, r0
 80121f2:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 80121f6:	f104 0008 	add.w	r0, r4, #8
 80121fa:	f7ff ff45 	bl	8012088 <uxr_get_output_reliable_stream>
 80121fe:	4605      	mov	r5, r0
 8012200:	f008 f9b8 	bl	801a574 <get_available_free_slots>
 8012204:	b968      	cbnz	r0, 8012222 <on_full_output_buffer_fragmented+0x3a>
 8012206:	4620      	mov	r0, r4
 8012208:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 801220c:	4798      	blx	r3
 801220e:	b918      	cbnz	r0, 8012218 <on_full_output_buffer_fragmented+0x30>
 8012210:	2001      	movs	r0, #1
 8012212:	b00a      	add	sp, #40	; 0x28
 8012214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012218:	4628      	mov	r0, r5
 801221a:	f008 f9ab 	bl	801a574 <get_available_free_slots>
 801221e:	2800      	cmp	r0, #0
 8012220:	d0f6      	beq.n	8012210 <on_full_output_buffer_fragmented+0x28>
 8012222:	8929      	ldrh	r1, [r5, #8]
 8012224:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8012228:	89eb      	ldrh	r3, [r5, #14]
 801222a:	7b28      	ldrb	r0, [r5, #12]
 801222c:	686f      	ldr	r7, [r5, #4]
 801222e:	1a12      	subs	r2, r2, r0
 8012230:	fbb3 f0f1 	udiv	r0, r3, r1
 8012234:	fbb7 f7f1 	udiv	r7, r7, r1
 8012238:	fb01 3110 	mls	r1, r1, r0, r3
 801223c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 8012240:	b289      	uxth	r1, r1
 8012242:	fb07 f101 	mul.w	r1, r7, r1
 8012246:	3f04      	subs	r7, #4
 8012248:	443a      	add	r2, r7
 801224a:	3104      	adds	r1, #4
 801224c:	fa1f f882 	uxth.w	r8, r2
 8012250:	463a      	mov	r2, r7
 8012252:	eba3 0308 	sub.w	r3, r3, r8
 8012256:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 801225a:	682b      	ldr	r3, [r5, #0]
 801225c:	4419      	add	r1, r3
 801225e:	2300      	movs	r3, #0
 8012260:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8012264:	9000      	str	r0, [sp, #0]
 8012266:	a802      	add	r0, sp, #8
 8012268:	f7fe fa7e 	bl	8010768 <ucdr_init_buffer_origin_offset>
 801226c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8012270:	f102 0308 	add.w	r3, r2, #8
 8012274:	42bb      	cmp	r3, r7
 8012276:	d927      	bls.n	80122c8 <on_full_output_buffer_fragmented+0xe0>
 8012278:	4642      	mov	r2, r8
 801227a:	2300      	movs	r3, #0
 801227c:	210d      	movs	r1, #13
 801227e:	a802      	add	r0, sp, #8
 8012280:	f7ff ff3a 	bl	80120f8 <uxr_buffer_submessage_header>
 8012284:	8929      	ldrh	r1, [r5, #8]
 8012286:	89eb      	ldrh	r3, [r5, #14]
 8012288:	686a      	ldr	r2, [r5, #4]
 801228a:	fbb3 f0f1 	udiv	r0, r3, r1
 801228e:	fbb2 f2f1 	udiv	r2, r2, r1
 8012292:	fb01 3310 	mls	r3, r1, r0, r3
 8012296:	b29b      	uxth	r3, r3
 8012298:	fb02 f303 	mul.w	r3, r2, r3
 801229c:	682a      	ldr	r2, [r5, #0]
 801229e:	50d7      	str	r7, [r2, r3]
 80122a0:	2101      	movs	r1, #1
 80122a2:	89e8      	ldrh	r0, [r5, #14]
 80122a4:	f008 fab8 	bl	801a818 <uxr_seq_num_add>
 80122a8:	9904      	ldr	r1, [sp, #16]
 80122aa:	9a03      	ldr	r2, [sp, #12]
 80122ac:	81e8      	strh	r0, [r5, #14]
 80122ae:	4630      	mov	r0, r6
 80122b0:	1a52      	subs	r2, r2, r1
 80122b2:	f7fe fa6b 	bl	801078c <ucdr_init_buffer>
 80122b6:	4630      	mov	r0, r6
 80122b8:	4622      	mov	r2, r4
 80122ba:	490f      	ldr	r1, [pc, #60]	; (80122f8 <on_full_output_buffer_fragmented+0x110>)
 80122bc:	f7fe fa3a 	bl	8010734 <ucdr_set_on_full_buffer_callback>
 80122c0:	2000      	movs	r0, #0
 80122c2:	b00a      	add	sp, #40	; 0x28
 80122c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122c8:	b292      	uxth	r2, r2
 80122ca:	2302      	movs	r3, #2
 80122cc:	210d      	movs	r1, #13
 80122ce:	a802      	add	r0, sp, #8
 80122d0:	f7ff ff12 	bl	80120f8 <uxr_buffer_submessage_header>
 80122d4:	8928      	ldrh	r0, [r5, #8]
 80122d6:	89eb      	ldrh	r3, [r5, #14]
 80122d8:	6869      	ldr	r1, [r5, #4]
 80122da:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80122de:	fbb3 f7f0 	udiv	r7, r3, r0
 80122e2:	fbb1 f1f0 	udiv	r1, r1, r0
 80122e6:	fb00 3317 	mls	r3, r0, r7, r3
 80122ea:	3208      	adds	r2, #8
 80122ec:	b29b      	uxth	r3, r3
 80122ee:	fb01 f303 	mul.w	r3, r1, r3
 80122f2:	6829      	ldr	r1, [r5, #0]
 80122f4:	50ca      	str	r2, [r1, r3]
 80122f6:	e7d3      	b.n	80122a0 <on_full_output_buffer_fragmented+0xb8>
 80122f8:	080121e9 	.word	0x080121e9

080122fc <uxr_prepare_output_stream>:
 80122fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122fe:	b087      	sub	sp, #28
 8012300:	2707      	movs	r7, #7
 8012302:	2500      	movs	r5, #0
 8012304:	461c      	mov	r4, r3
 8012306:	4606      	mov	r6, r0
 8012308:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801230c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801230e:	e9cd 7500 	strd	r7, r5, [sp]
 8012312:	3204      	adds	r2, #4
 8012314:	f7ff fc44 	bl	8011ba0 <uxr_prepare_stream_to_write_submessage>
 8012318:	f080 0201 	eor.w	r2, r0, #1
 801231c:	b2d2      	uxtb	r2, r2
 801231e:	75a2      	strb	r2, [r4, #22]
 8012320:	b112      	cbz	r2, 8012328 <uxr_prepare_output_stream+0x2c>
 8012322:	4628      	mov	r0, r5
 8012324:	b007      	add	sp, #28
 8012326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012328:	aa05      	add	r2, sp, #20
 801232a:	9902      	ldr	r1, [sp, #8]
 801232c:	4630      	mov	r0, r6
 801232e:	f7ff fd73 	bl	8011e18 <uxr_init_base_object_request>
 8012332:	a905      	add	r1, sp, #20
 8012334:	4605      	mov	r5, r0
 8012336:	4620      	mov	r0, r4
 8012338:	f001 f8bc 	bl	80134b4 <uxr_serialize_WRITE_DATA_Payload_Data>
 801233c:	69a6      	ldr	r6, [r4, #24]
 801233e:	69e7      	ldr	r7, [r4, #28]
 8012340:	4620      	mov	r0, r4
 8012342:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8012346:	1a52      	subs	r2, r2, r1
 8012348:	f7fe fa20 	bl	801078c <ucdr_init_buffer>
 801234c:	4620      	mov	r0, r4
 801234e:	463a      	mov	r2, r7
 8012350:	4631      	mov	r1, r6
 8012352:	f7fe f9ef 	bl	8010734 <ucdr_set_on_full_buffer_callback>
 8012356:	4628      	mov	r0, r5
 8012358:	b007      	add	sp, #28
 801235a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801235c <uxr_prepare_output_stream_fragmented>:
 801235c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012360:	b091      	sub	sp, #68	; 0x44
 8012362:	4605      	mov	r5, r0
 8012364:	3008      	adds	r0, #8
 8012366:	461e      	mov	r6, r3
 8012368:	9105      	str	r1, [sp, #20]
 801236a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801236e:	9204      	str	r2, [sp, #16]
 8012370:	f7ff fe8a 	bl	8012088 <uxr_get_output_reliable_stream>
 8012374:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8012378:	2b01      	cmp	r3, #1
 801237a:	f000 8093 	beq.w	80124a4 <uxr_prepare_output_stream_fragmented+0x148>
 801237e:	4604      	mov	r4, r0
 8012380:	2800      	cmp	r0, #0
 8012382:	f000 808f 	beq.w	80124a4 <uxr_prepare_output_stream_fragmented+0x148>
 8012386:	f008 f8f5 	bl	801a574 <get_available_free_slots>
 801238a:	2800      	cmp	r0, #0
 801238c:	f000 8085 	beq.w	801249a <uxr_prepare_output_stream_fragmented+0x13e>
 8012390:	8923      	ldrh	r3, [r4, #8]
 8012392:	89e7      	ldrh	r7, [r4, #14]
 8012394:	6862      	ldr	r2, [r4, #4]
 8012396:	fbb7 f9f3 	udiv	r9, r7, r3
 801239a:	fbb2 f2f3 	udiv	r2, r2, r3
 801239e:	fb03 7919 	mls	r9, r3, r9, r7
 80123a2:	6823      	ldr	r3, [r4, #0]
 80123a4:	f1a2 0b04 	sub.w	fp, r2, #4
 80123a8:	9203      	str	r2, [sp, #12]
 80123aa:	fa1f f989 	uxth.w	r9, r9
 80123ae:	fb02 f909 	mul.w	r9, r2, r9
 80123b2:	f109 0904 	add.w	r9, r9, #4
 80123b6:	4499      	add	r9, r3
 80123b8:	7b23      	ldrb	r3, [r4, #12]
 80123ba:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80123be:	4543      	cmp	r3, r8
 80123c0:	d37c      	bcc.n	80124bc <uxr_prepare_output_stream_fragmented+0x160>
 80123c2:	f1ab 0a04 	sub.w	sl, fp, #4
 80123c6:	465a      	mov	r2, fp
 80123c8:	4649      	mov	r1, r9
 80123ca:	a808      	add	r0, sp, #32
 80123cc:	ebaa 0a03 	sub.w	sl, sl, r3
 80123d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80123d2:	f8cd 8000 	str.w	r8, [sp]
 80123d6:	3308      	adds	r3, #8
 80123d8:	fa1f fa8a 	uxth.w	sl, sl
 80123dc:	9302      	str	r3, [sp, #8]
 80123de:	2300      	movs	r3, #0
 80123e0:	f7fe f9c2 	bl	8010768 <ucdr_init_buffer_origin_offset>
 80123e4:	9b02      	ldr	r3, [sp, #8]
 80123e6:	4652      	mov	r2, sl
 80123e8:	210d      	movs	r1, #13
 80123ea:	455b      	cmp	r3, fp
 80123ec:	bf34      	ite	cc
 80123ee:	2302      	movcc	r3, #2
 80123f0:	2300      	movcs	r3, #0
 80123f2:	a808      	add	r0, sp, #32
 80123f4:	f7ff fe80 	bl	80120f8 <uxr_buffer_submessage_header>
 80123f8:	8921      	ldrh	r1, [r4, #8]
 80123fa:	6863      	ldr	r3, [r4, #4]
 80123fc:	4638      	mov	r0, r7
 80123fe:	fbb7 f2f1 	udiv	r2, r7, r1
 8012402:	fbb3 f3f1 	udiv	r3, r3, r1
 8012406:	fb01 7212 	mls	r2, r1, r2, r7
 801240a:	2101      	movs	r1, #1
 801240c:	b292      	uxth	r2, r2
 801240e:	fb02 f303 	mul.w	r3, r2, r3
 8012412:	6822      	ldr	r2, [r4, #0]
 8012414:	f842 b003 	str.w	fp, [r2, r3]
 8012418:	f008 f9fe 	bl	801a818 <uxr_seq_num_add>
 801241c:	9b03      	ldr	r3, [sp, #12]
 801241e:	f108 0104 	add.w	r1, r8, #4
 8012422:	4607      	mov	r7, r0
 8012424:	f1a3 0208 	sub.w	r2, r3, #8
 8012428:	4630      	mov	r0, r6
 801242a:	4449      	add	r1, r9
 801242c:	eba2 0208 	sub.w	r2, r2, r8
 8012430:	f7fe f9ac 	bl	801078c <ucdr_init_buffer>
 8012434:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012436:	2107      	movs	r1, #7
 8012438:	81e7      	strh	r7, [r4, #14]
 801243a:	1d1a      	adds	r2, r3, #4
 801243c:	2300      	movs	r3, #0
 801243e:	4630      	mov	r0, r6
 8012440:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8012444:	bf28      	it	cs
 8012446:	461a      	movcs	r2, r3
 8012448:	b292      	uxth	r2, r2
 801244a:	f7ff fe55 	bl	80120f8 <uxr_buffer_submessage_header>
 801244e:	aa07      	add	r2, sp, #28
 8012450:	9904      	ldr	r1, [sp, #16]
 8012452:	4628      	mov	r0, r5
 8012454:	f7ff fce0 	bl	8011e18 <uxr_init_base_object_request>
 8012458:	4604      	mov	r4, r0
 801245a:	b320      	cbz	r0, 80124a6 <uxr_prepare_output_stream_fragmented+0x14a>
 801245c:	a907      	add	r1, sp, #28
 801245e:	4630      	mov	r0, r6
 8012460:	f001 f828 	bl	80134b4 <uxr_serialize_WRITE_DATA_Payload_Data>
 8012464:	4630      	mov	r0, r6
 8012466:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801246a:	1a52      	subs	r2, r2, r1
 801246c:	f7fe f98e 	bl	801078c <ucdr_init_buffer>
 8012470:	9b05      	ldr	r3, [sp, #20]
 8012472:	9a02      	ldr	r2, [sp, #8]
 8012474:	4630      	mov	r0, r6
 8012476:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 801247a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801247c:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 8012480:	462a      	mov	r2, r5
 8012482:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 8012486:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8012488:	4918      	ldr	r1, [pc, #96]	; (80124ec <uxr_prepare_output_stream_fragmented+0x190>)
 801248a:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 801248e:	f7fe f951 	bl	8010734 <ucdr_set_on_full_buffer_callback>
 8012492:	4620      	mov	r0, r4
 8012494:	b011      	add	sp, #68	; 0x44
 8012496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801249a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801249c:	4628      	mov	r0, r5
 801249e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80124a0:	4798      	blx	r3
 80124a2:	b920      	cbnz	r0, 80124ae <uxr_prepare_output_stream_fragmented+0x152>
 80124a4:	2400      	movs	r4, #0
 80124a6:	4620      	mov	r0, r4
 80124a8:	b011      	add	sp, #68	; 0x44
 80124aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124ae:	4620      	mov	r0, r4
 80124b0:	f008 f860 	bl	801a574 <get_available_free_slots>
 80124b4:	2800      	cmp	r0, #0
 80124b6:	f47f af6b 	bne.w	8012390 <uxr_prepare_output_stream_fragmented+0x34>
 80124ba:	e7f3      	b.n	80124a4 <uxr_prepare_output_stream_fragmented+0x148>
 80124bc:	4638      	mov	r0, r7
 80124be:	2101      	movs	r1, #1
 80124c0:	f008 f9aa 	bl	801a818 <uxr_seq_num_add>
 80124c4:	8922      	ldrh	r2, [r4, #8]
 80124c6:	6863      	ldr	r3, [r4, #4]
 80124c8:	4607      	mov	r7, r0
 80124ca:	fbb3 f9f2 	udiv	r9, r3, r2
 80124ce:	fbb0 f3f2 	udiv	r3, r0, r2
 80124d2:	fb02 0313 	mls	r3, r2, r3, r0
 80124d6:	b29b      	uxth	r3, r3
 80124d8:	fb03 f909 	mul.w	r9, r3, r9
 80124dc:	6823      	ldr	r3, [r4, #0]
 80124de:	f109 0904 	add.w	r9, r9, #4
 80124e2:	4499      	add	r9, r3
 80124e4:	7b23      	ldrb	r3, [r4, #12]
 80124e6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80124ea:	e76a      	b.n	80123c2 <uxr_prepare_output_stream_fragmented+0x66>
 80124ec:	080121e9 	.word	0x080121e9

080124f0 <uxr_serialize_message_header>:
 80124f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124f2:	4616      	mov	r6, r2
 80124f4:	b083      	sub	sp, #12
 80124f6:	4604      	mov	r4, r0
 80124f8:	460d      	mov	r5, r1
 80124fa:	9301      	str	r3, [sp, #4]
 80124fc:	9f08      	ldr	r7, [sp, #32]
 80124fe:	f7fc fde5 	bl	800f0cc <ucdr_serialize_uint8_t>
 8012502:	4631      	mov	r1, r6
 8012504:	4620      	mov	r0, r4
 8012506:	f7fc fde1 	bl	800f0cc <ucdr_serialize_uint8_t>
 801250a:	9a01      	ldr	r2, [sp, #4]
 801250c:	2101      	movs	r1, #1
 801250e:	4620      	mov	r0, r4
 8012510:	f7fc fe88 	bl	800f224 <ucdr_serialize_endian_uint16_t>
 8012514:	062b      	lsls	r3, r5, #24
 8012516:	d501      	bpl.n	801251c <uxr_serialize_message_header+0x2c>
 8012518:	b003      	add	sp, #12
 801251a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801251c:	2204      	movs	r2, #4
 801251e:	4639      	mov	r1, r7
 8012520:	4620      	mov	r0, r4
 8012522:	b003      	add	sp, #12
 8012524:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012528:	f7fc bc2c 	b.w	800ed84 <ucdr_serialize_array_uint8_t>

0801252c <uxr_deserialize_message_header>:
 801252c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801252e:	4616      	mov	r6, r2
 8012530:	b083      	sub	sp, #12
 8012532:	4604      	mov	r4, r0
 8012534:	460d      	mov	r5, r1
 8012536:	9301      	str	r3, [sp, #4]
 8012538:	9f08      	ldr	r7, [sp, #32]
 801253a:	f7fc fddd 	bl	800f0f8 <ucdr_deserialize_uint8_t>
 801253e:	4631      	mov	r1, r6
 8012540:	4620      	mov	r0, r4
 8012542:	f7fc fdd9 	bl	800f0f8 <ucdr_deserialize_uint8_t>
 8012546:	9a01      	ldr	r2, [sp, #4]
 8012548:	2101      	movs	r1, #1
 801254a:	4620      	mov	r0, r4
 801254c:	f7fc ff5e 	bl	800f40c <ucdr_deserialize_endian_uint16_t>
 8012550:	f995 3000 	ldrsb.w	r3, [r5]
 8012554:	2b00      	cmp	r3, #0
 8012556:	da01      	bge.n	801255c <uxr_deserialize_message_header+0x30>
 8012558:	b003      	add	sp, #12
 801255a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801255c:	2204      	movs	r2, #4
 801255e:	4639      	mov	r1, r7
 8012560:	4620      	mov	r0, r4
 8012562:	b003      	add	sp, #12
 8012564:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8012568:	f7fc bc70 	b.w	800ee4c <ucdr_deserialize_array_uint8_t>

0801256c <uxr_serialize_submessage_header>:
 801256c:	b530      	push	{r4, r5, lr}
 801256e:	4615      	mov	r5, r2
 8012570:	b083      	sub	sp, #12
 8012572:	4604      	mov	r4, r0
 8012574:	9301      	str	r3, [sp, #4]
 8012576:	f7fc fda9 	bl	800f0cc <ucdr_serialize_uint8_t>
 801257a:	4629      	mov	r1, r5
 801257c:	4620      	mov	r0, r4
 801257e:	f7fc fda5 	bl	800f0cc <ucdr_serialize_uint8_t>
 8012582:	9a01      	ldr	r2, [sp, #4]
 8012584:	2101      	movs	r1, #1
 8012586:	4620      	mov	r0, r4
 8012588:	b003      	add	sp, #12
 801258a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801258e:	f7fc be49 	b.w	800f224 <ucdr_serialize_endian_uint16_t>
 8012592:	bf00      	nop

08012594 <uxr_deserialize_submessage_header>:
 8012594:	b530      	push	{r4, r5, lr}
 8012596:	4615      	mov	r5, r2
 8012598:	b083      	sub	sp, #12
 801259a:	4604      	mov	r4, r0
 801259c:	9301      	str	r3, [sp, #4]
 801259e:	f7fc fdab 	bl	800f0f8 <ucdr_deserialize_uint8_t>
 80125a2:	4629      	mov	r1, r5
 80125a4:	4620      	mov	r0, r4
 80125a6:	f7fc fda7 	bl	800f0f8 <ucdr_deserialize_uint8_t>
 80125aa:	9a01      	ldr	r2, [sp, #4]
 80125ac:	2101      	movs	r1, #1
 80125ae:	4620      	mov	r0, r4
 80125b0:	b003      	add	sp, #12
 80125b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80125b6:	f7fc bf29 	b.w	800f40c <ucdr_deserialize_endian_uint16_t>
 80125ba:	bf00      	nop

080125bc <uxr_serialize_CLIENT_Representation>:
 80125bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80125c0:	2204      	movs	r2, #4
 80125c2:	460e      	mov	r6, r1
 80125c4:	4605      	mov	r5, r0
 80125c6:	f7fc fbdd 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 80125ca:	4607      	mov	r7, r0
 80125cc:	2202      	movs	r2, #2
 80125ce:	1d31      	adds	r1, r6, #4
 80125d0:	4628      	mov	r0, r5
 80125d2:	f7fc fbd7 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 80125d6:	4038      	ands	r0, r7
 80125d8:	2202      	movs	r2, #2
 80125da:	1db1      	adds	r1, r6, #6
 80125dc:	b2c7      	uxtb	r7, r0
 80125de:	4628      	mov	r0, r5
 80125e0:	f7fc fbd0 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 80125e4:	2204      	movs	r2, #4
 80125e6:	4007      	ands	r7, r0
 80125e8:	f106 0108 	add.w	r1, r6, #8
 80125ec:	4628      	mov	r0, r5
 80125ee:	f7fc fbc9 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 80125f2:	4007      	ands	r7, r0
 80125f4:	7b31      	ldrb	r1, [r6, #12]
 80125f6:	4628      	mov	r0, r5
 80125f8:	f7fc fd68 	bl	800f0cc <ucdr_serialize_uint8_t>
 80125fc:	7b71      	ldrb	r1, [r6, #13]
 80125fe:	4007      	ands	r7, r0
 8012600:	4628      	mov	r0, r5
 8012602:	f7fc fd35 	bl	800f070 <ucdr_serialize_bool>
 8012606:	7b73      	ldrb	r3, [r6, #13]
 8012608:	ea07 0800 	and.w	r8, r7, r0
 801260c:	b93b      	cbnz	r3, 801261e <uxr_serialize_CLIENT_Representation+0x62>
 801260e:	8bb1      	ldrh	r1, [r6, #28]
 8012610:	4628      	mov	r0, r5
 8012612:	f7fc fd87 	bl	800f124 <ucdr_serialize_uint16_t>
 8012616:	ea08 0000 	and.w	r0, r8, r0
 801261a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801261e:	6931      	ldr	r1, [r6, #16]
 8012620:	4628      	mov	r0, r5
 8012622:	f7fc ff69 	bl	800f4f8 <ucdr_serialize_uint32_t>
 8012626:	6933      	ldr	r3, [r6, #16]
 8012628:	b1e3      	cbz	r3, 8012664 <uxr_serialize_CLIENT_Representation+0xa8>
 801262a:	b1c0      	cbz	r0, 801265e <uxr_serialize_CLIENT_Representation+0xa2>
 801262c:	4637      	mov	r7, r6
 801262e:	f04f 0900 	mov.w	r9, #0
 8012632:	e000      	b.n	8012636 <uxr_serialize_CLIENT_Representation+0x7a>
 8012634:	b19c      	cbz	r4, 801265e <uxr_serialize_CLIENT_Representation+0xa2>
 8012636:	6979      	ldr	r1, [r7, #20]
 8012638:	4628      	mov	r0, r5
 801263a:	f007 f99b 	bl	8019974 <ucdr_serialize_string>
 801263e:	69b9      	ldr	r1, [r7, #24]
 8012640:	4604      	mov	r4, r0
 8012642:	4628      	mov	r0, r5
 8012644:	f007 f996 	bl	8019974 <ucdr_serialize_string>
 8012648:	f109 0901 	add.w	r9, r9, #1
 801264c:	6933      	ldr	r3, [r6, #16]
 801264e:	4004      	ands	r4, r0
 8012650:	3708      	adds	r7, #8
 8012652:	4599      	cmp	r9, r3
 8012654:	b2e4      	uxtb	r4, r4
 8012656:	d3ed      	bcc.n	8012634 <uxr_serialize_CLIENT_Representation+0x78>
 8012658:	ea08 0804 	and.w	r8, r8, r4
 801265c:	e7d7      	b.n	801260e <uxr_serialize_CLIENT_Representation+0x52>
 801265e:	f04f 0800 	mov.w	r8, #0
 8012662:	e7d4      	b.n	801260e <uxr_serialize_CLIENT_Representation+0x52>
 8012664:	ea08 0800 	and.w	r8, r8, r0
 8012668:	e7d1      	b.n	801260e <uxr_serialize_CLIENT_Representation+0x52>
 801266a:	bf00      	nop

0801266c <uxr_deserialize_CLIENT_Representation>:
 801266c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012670:	2204      	movs	r2, #4
 8012672:	460c      	mov	r4, r1
 8012674:	4605      	mov	r5, r0
 8012676:	f7fc fbe9 	bl	800ee4c <ucdr_deserialize_array_uint8_t>
 801267a:	4607      	mov	r7, r0
 801267c:	2202      	movs	r2, #2
 801267e:	1d21      	adds	r1, r4, #4
 8012680:	4628      	mov	r0, r5
 8012682:	f7fc fbe3 	bl	800ee4c <ucdr_deserialize_array_uint8_t>
 8012686:	4038      	ands	r0, r7
 8012688:	2202      	movs	r2, #2
 801268a:	1da1      	adds	r1, r4, #6
 801268c:	b2c6      	uxtb	r6, r0
 801268e:	4628      	mov	r0, r5
 8012690:	f7fc fbdc 	bl	800ee4c <ucdr_deserialize_array_uint8_t>
 8012694:	2204      	movs	r2, #4
 8012696:	4006      	ands	r6, r0
 8012698:	f104 0108 	add.w	r1, r4, #8
 801269c:	4628      	mov	r0, r5
 801269e:	f7fc fbd5 	bl	800ee4c <ucdr_deserialize_array_uint8_t>
 80126a2:	4006      	ands	r6, r0
 80126a4:	f104 010c 	add.w	r1, r4, #12
 80126a8:	4628      	mov	r0, r5
 80126aa:	f7fc fd25 	bl	800f0f8 <ucdr_deserialize_uint8_t>
 80126ae:	f104 010d 	add.w	r1, r4, #13
 80126b2:	ea06 0700 	and.w	r7, r6, r0
 80126b6:	4628      	mov	r0, r5
 80126b8:	f7fc fcf0 	bl	800f09c <ucdr_deserialize_bool>
 80126bc:	7b63      	ldrb	r3, [r4, #13]
 80126be:	4007      	ands	r7, r0
 80126c0:	b93b      	cbnz	r3, 80126d2 <uxr_deserialize_CLIENT_Representation+0x66>
 80126c2:	f104 011c 	add.w	r1, r4, #28
 80126c6:	4628      	mov	r0, r5
 80126c8:	f7fc fe2c 	bl	800f324 <ucdr_deserialize_uint16_t>
 80126cc:	4038      	ands	r0, r7
 80126ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80126d2:	f104 0110 	add.w	r1, r4, #16
 80126d6:	4628      	mov	r0, r5
 80126d8:	f7fd f83e 	bl	800f758 <ucdr_deserialize_uint32_t>
 80126dc:	6923      	ldr	r3, [r4, #16]
 80126de:	2b01      	cmp	r3, #1
 80126e0:	d903      	bls.n	80126ea <uxr_deserialize_CLIENT_Representation+0x7e>
 80126e2:	2301      	movs	r3, #1
 80126e4:	2700      	movs	r7, #0
 80126e6:	75ab      	strb	r3, [r5, #22]
 80126e8:	e7eb      	b.n	80126c2 <uxr_deserialize_CLIENT_Representation+0x56>
 80126ea:	b30b      	cbz	r3, 8012730 <uxr_deserialize_CLIENT_Representation+0xc4>
 80126ec:	b1f0      	cbz	r0, 801272c <uxr_deserialize_CLIENT_Representation+0xc0>
 80126ee:	46a0      	mov	r8, r4
 80126f0:	f04f 0900 	mov.w	r9, #0
 80126f4:	e000      	b.n	80126f8 <uxr_deserialize_CLIENT_Representation+0x8c>
 80126f6:	b1ce      	cbz	r6, 801272c <uxr_deserialize_CLIENT_Representation+0xc0>
 80126f8:	f8d8 1014 	ldr.w	r1, [r8, #20]
 80126fc:	f108 0808 	add.w	r8, r8, #8
 8012700:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012704:	4628      	mov	r0, r5
 8012706:	f007 f945 	bl	8019994 <ucdr_deserialize_string>
 801270a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801270e:	4606      	mov	r6, r0
 8012710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012714:	4628      	mov	r0, r5
 8012716:	f109 0901 	add.w	r9, r9, #1
 801271a:	f007 f93b 	bl	8019994 <ucdr_deserialize_string>
 801271e:	6923      	ldr	r3, [r4, #16]
 8012720:	4006      	ands	r6, r0
 8012722:	4599      	cmp	r9, r3
 8012724:	b2f6      	uxtb	r6, r6
 8012726:	d3e6      	bcc.n	80126f6 <uxr_deserialize_CLIENT_Representation+0x8a>
 8012728:	4037      	ands	r7, r6
 801272a:	e7ca      	b.n	80126c2 <uxr_deserialize_CLIENT_Representation+0x56>
 801272c:	2700      	movs	r7, #0
 801272e:	e7c8      	b.n	80126c2 <uxr_deserialize_CLIENT_Representation+0x56>
 8012730:	4007      	ands	r7, r0
 8012732:	e7c6      	b.n	80126c2 <uxr_deserialize_CLIENT_Representation+0x56>

08012734 <uxr_serialize_AGENT_Representation>:
 8012734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012738:	2204      	movs	r2, #4
 801273a:	460f      	mov	r7, r1
 801273c:	4605      	mov	r5, r0
 801273e:	f7fc fb21 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 8012742:	4604      	mov	r4, r0
 8012744:	2202      	movs	r2, #2
 8012746:	1d39      	adds	r1, r7, #4
 8012748:	4628      	mov	r0, r5
 801274a:	f7fc fb1b 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 801274e:	4020      	ands	r0, r4
 8012750:	2202      	movs	r2, #2
 8012752:	1db9      	adds	r1, r7, #6
 8012754:	b2c4      	uxtb	r4, r0
 8012756:	4628      	mov	r0, r5
 8012758:	f7fc fb14 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 801275c:	7a39      	ldrb	r1, [r7, #8]
 801275e:	4004      	ands	r4, r0
 8012760:	4628      	mov	r0, r5
 8012762:	f7fc fc85 	bl	800f070 <ucdr_serialize_bool>
 8012766:	7a3b      	ldrb	r3, [r7, #8]
 8012768:	ea00 0804 	and.w	r8, r0, r4
 801276c:	b913      	cbnz	r3, 8012774 <uxr_serialize_AGENT_Representation+0x40>
 801276e:	4640      	mov	r0, r8
 8012770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012774:	68f9      	ldr	r1, [r7, #12]
 8012776:	4628      	mov	r0, r5
 8012778:	f7fc febe 	bl	800f4f8 <ucdr_serialize_uint32_t>
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	b303      	cbz	r3, 80127c2 <uxr_serialize_AGENT_Representation+0x8e>
 8012780:	b1d0      	cbz	r0, 80127b8 <uxr_serialize_AGENT_Representation+0x84>
 8012782:	463e      	mov	r6, r7
 8012784:	f04f 0900 	mov.w	r9, #0
 8012788:	e000      	b.n	801278c <uxr_serialize_AGENT_Representation+0x58>
 801278a:	b1ac      	cbz	r4, 80127b8 <uxr_serialize_AGENT_Representation+0x84>
 801278c:	6931      	ldr	r1, [r6, #16]
 801278e:	4628      	mov	r0, r5
 8012790:	f007 f8f0 	bl	8019974 <ucdr_serialize_string>
 8012794:	6971      	ldr	r1, [r6, #20]
 8012796:	4604      	mov	r4, r0
 8012798:	4628      	mov	r0, r5
 801279a:	f007 f8eb 	bl	8019974 <ucdr_serialize_string>
 801279e:	f109 0901 	add.w	r9, r9, #1
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	4004      	ands	r4, r0
 80127a6:	3608      	adds	r6, #8
 80127a8:	4599      	cmp	r9, r3
 80127aa:	b2e4      	uxtb	r4, r4
 80127ac:	d3ed      	bcc.n	801278a <uxr_serialize_AGENT_Representation+0x56>
 80127ae:	ea08 0804 	and.w	r8, r8, r4
 80127b2:	4640      	mov	r0, r8
 80127b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127b8:	f04f 0800 	mov.w	r8, #0
 80127bc:	4640      	mov	r0, r8
 80127be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127c2:	ea08 0800 	and.w	r8, r8, r0
 80127c6:	e7d2      	b.n	801276e <uxr_serialize_AGENT_Representation+0x3a>

080127c8 <uxr_serialize_DATAWRITER_Representation>:
 80127c8:	b570      	push	{r4, r5, r6, lr}
 80127ca:	460d      	mov	r5, r1
 80127cc:	7809      	ldrb	r1, [r1, #0]
 80127ce:	4606      	mov	r6, r0
 80127d0:	f7fc fc7c 	bl	800f0cc <ucdr_serialize_uint8_t>
 80127d4:	4604      	mov	r4, r0
 80127d6:	b130      	cbz	r0, 80127e6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80127d8:	782b      	ldrb	r3, [r5, #0]
 80127da:	2b02      	cmp	r3, #2
 80127dc:	d00c      	beq.n	80127f8 <uxr_serialize_DATAWRITER_Representation+0x30>
 80127de:	2b03      	cmp	r3, #3
 80127e0:	d010      	beq.n	8012804 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80127e2:	2b01      	cmp	r3, #1
 80127e4:	d008      	beq.n	80127f8 <uxr_serialize_DATAWRITER_Representation+0x30>
 80127e6:	2202      	movs	r2, #2
 80127e8:	f505 7102 	add.w	r1, r5, #520	; 0x208
 80127ec:	4630      	mov	r0, r6
 80127ee:	f7fc fac9 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 80127f2:	4020      	ands	r0, r4
 80127f4:	b2c0      	uxtb	r0, r0
 80127f6:	bd70      	pop	{r4, r5, r6, pc}
 80127f8:	6869      	ldr	r1, [r5, #4]
 80127fa:	4630      	mov	r0, r6
 80127fc:	f007 f8ba 	bl	8019974 <ucdr_serialize_string>
 8012800:	4604      	mov	r4, r0
 8012802:	e7f0      	b.n	80127e6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012804:	4629      	mov	r1, r5
 8012806:	4630      	mov	r0, r6
 8012808:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801280c:	3104      	adds	r1, #4
 801280e:	f007 f885 	bl	801991c <ucdr_serialize_sequence_uint8_t>
 8012812:	4604      	mov	r4, r0
 8012814:	e7e7      	b.n	80127e6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8012816:	bf00      	nop

08012818 <uxr_serialize_ObjectVariant.part.0>:
 8012818:	b570      	push	{r4, r5, r6, lr}
 801281a:	780b      	ldrb	r3, [r1, #0]
 801281c:	460c      	mov	r4, r1
 801281e:	4605      	mov	r5, r0
 8012820:	3b01      	subs	r3, #1
 8012822:	2b0d      	cmp	r3, #13
 8012824:	d854      	bhi.n	80128d0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012826:	e8df f003 	tbb	[pc, r3]
 801282a:	0730      	.short	0x0730
 801282c:	07071b1b 	.word	0x07071b1b
 8012830:	0c530707 	.word	0x0c530707
 8012834:	494e0c0c 	.word	0x494e0c0c
 8012838:	3104      	adds	r1, #4
 801283a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801283e:	f7ff bfc3 	b.w	80127c8 <uxr_serialize_DATAWRITER_Representation>
 8012842:	7909      	ldrb	r1, [r1, #4]
 8012844:	f7fc fc42 	bl	800f0cc <ucdr_serialize_uint8_t>
 8012848:	b1e8      	cbz	r0, 8012886 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801284a:	7923      	ldrb	r3, [r4, #4]
 801284c:	2b01      	cmp	r3, #1
 801284e:	d001      	beq.n	8012854 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8012850:	2b02      	cmp	r3, #2
 8012852:	d13d      	bne.n	80128d0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8012854:	68a1      	ldr	r1, [r4, #8]
 8012856:	4628      	mov	r0, r5
 8012858:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801285c:	f007 b88a 	b.w	8019974 <ucdr_serialize_string>
 8012860:	7909      	ldrb	r1, [r1, #4]
 8012862:	f7fc fc33 	bl	800f0cc <ucdr_serialize_uint8_t>
 8012866:	4606      	mov	r6, r0
 8012868:	b120      	cbz	r0, 8012874 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801286a:	7923      	ldrb	r3, [r4, #4]
 801286c:	2b02      	cmp	r3, #2
 801286e:	d039      	beq.n	80128e4 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8012870:	2b03      	cmp	r3, #3
 8012872:	d02f      	beq.n	80128d4 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8012874:	2202      	movs	r2, #2
 8012876:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 801287a:	4628      	mov	r0, r5
 801287c:	f7fc fa82 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 8012880:	4030      	ands	r0, r6
 8012882:	b2c0      	uxtb	r0, r0
 8012884:	bd70      	pop	{r4, r5, r6, pc}
 8012886:	2000      	movs	r0, #0
 8012888:	bd70      	pop	{r4, r5, r6, pc}
 801288a:	7909      	ldrb	r1, [r1, #4]
 801288c:	f7fc fc1e 	bl	800f0cc <ucdr_serialize_uint8_t>
 8012890:	4606      	mov	r6, r0
 8012892:	b158      	cbz	r0, 80128ac <uxr_serialize_ObjectVariant.part.0+0x94>
 8012894:	7923      	ldrb	r3, [r4, #4]
 8012896:	2b02      	cmp	r3, #2
 8012898:	d003      	beq.n	80128a2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801289a:	2b03      	cmp	r3, #3
 801289c:	d028      	beq.n	80128f0 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801289e:	2b01      	cmp	r3, #1
 80128a0:	d104      	bne.n	80128ac <uxr_serialize_ObjectVariant.part.0+0x94>
 80128a2:	68a1      	ldr	r1, [r4, #8]
 80128a4:	4628      	mov	r0, r5
 80128a6:	f007 f865 	bl	8019974 <ucdr_serialize_string>
 80128aa:	4606      	mov	r6, r0
 80128ac:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 80128b0:	4628      	mov	r0, r5
 80128b2:	f7fd f947 	bl	800fb44 <ucdr_serialize_int16_t>
 80128b6:	4030      	ands	r0, r6
 80128b8:	b2c0      	uxtb	r0, r0
 80128ba:	bd70      	pop	{r4, r5, r6, pc}
 80128bc:	3104      	adds	r1, #4
 80128be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80128c2:	f7ff be7b 	b.w	80125bc <uxr_serialize_CLIENT_Representation>
 80128c6:	3104      	adds	r1, #4
 80128c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80128cc:	f7ff bf32 	b.w	8012734 <uxr_serialize_AGENT_Representation>
 80128d0:	2001      	movs	r0, #1
 80128d2:	bd70      	pop	{r4, r5, r6, pc}
 80128d4:	68a2      	ldr	r2, [r4, #8]
 80128d6:	f104 010c 	add.w	r1, r4, #12
 80128da:	4628      	mov	r0, r5
 80128dc:	f007 f81e 	bl	801991c <ucdr_serialize_sequence_uint8_t>
 80128e0:	4606      	mov	r6, r0
 80128e2:	e7c7      	b.n	8012874 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80128e4:	68a1      	ldr	r1, [r4, #8]
 80128e6:	4628      	mov	r0, r5
 80128e8:	f007 f844 	bl	8019974 <ucdr_serialize_string>
 80128ec:	4606      	mov	r6, r0
 80128ee:	e7c1      	b.n	8012874 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80128f0:	68a2      	ldr	r2, [r4, #8]
 80128f2:	f104 010c 	add.w	r1, r4, #12
 80128f6:	4628      	mov	r0, r5
 80128f8:	f007 f810 	bl	801991c <ucdr_serialize_sequence_uint8_t>
 80128fc:	4606      	mov	r6, r0
 80128fe:	e7d5      	b.n	80128ac <uxr_serialize_ObjectVariant.part.0+0x94>

08012900 <uxr_deserialize_DATAWRITER_Representation>:
 8012900:	b570      	push	{r4, r5, r6, lr}
 8012902:	4606      	mov	r6, r0
 8012904:	460d      	mov	r5, r1
 8012906:	f7fc fbf7 	bl	800f0f8 <ucdr_deserialize_uint8_t>
 801290a:	4604      	mov	r4, r0
 801290c:	b130      	cbz	r0, 801291c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801290e:	782b      	ldrb	r3, [r5, #0]
 8012910:	2b02      	cmp	r3, #2
 8012912:	d00c      	beq.n	801292e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8012914:	2b03      	cmp	r3, #3
 8012916:	d012      	beq.n	801293e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8012918:	2b01      	cmp	r3, #1
 801291a:	d008      	beq.n	801292e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801291c:	2202      	movs	r2, #2
 801291e:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8012922:	4630      	mov	r0, r6
 8012924:	f7fc fa92 	bl	800ee4c <ucdr_deserialize_array_uint8_t>
 8012928:	4020      	ands	r0, r4
 801292a:	b2c0      	uxtb	r0, r0
 801292c:	bd70      	pop	{r4, r5, r6, pc}
 801292e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012932:	6869      	ldr	r1, [r5, #4]
 8012934:	4630      	mov	r0, r6
 8012936:	f007 f82d 	bl	8019994 <ucdr_deserialize_string>
 801293a:	4604      	mov	r4, r0
 801293c:	e7ee      	b.n	801291c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801293e:	1d2b      	adds	r3, r5, #4
 8012940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012944:	f105 0108 	add.w	r1, r5, #8
 8012948:	4630      	mov	r0, r6
 801294a:	f006 fff9 	bl	8019940 <ucdr_deserialize_sequence_uint8_t>
 801294e:	4604      	mov	r4, r0
 8012950:	e7e4      	b.n	801291c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8012952:	bf00      	nop

08012954 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8012954:	b570      	push	{r4, r5, r6, lr}
 8012956:	460d      	mov	r5, r1
 8012958:	7809      	ldrb	r1, [r1, #0]
 801295a:	4606      	mov	r6, r0
 801295c:	f7fc fb88 	bl	800f070 <ucdr_serialize_bool>
 8012960:	782b      	ldrb	r3, [r5, #0]
 8012962:	4604      	mov	r4, r0
 8012964:	b94b      	cbnz	r3, 801297a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8012966:	7a29      	ldrb	r1, [r5, #8]
 8012968:	4630      	mov	r0, r6
 801296a:	f7fc fb81 	bl	800f070 <ucdr_serialize_bool>
 801296e:	7a2b      	ldrb	r3, [r5, #8]
 8012970:	4004      	ands	r4, r0
 8012972:	b2e4      	uxtb	r4, r4
 8012974:	b943      	cbnz	r3, 8012988 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8012976:	4620      	mov	r0, r4
 8012978:	bd70      	pop	{r4, r5, r6, pc}
 801297a:	6869      	ldr	r1, [r5, #4]
 801297c:	4630      	mov	r0, r6
 801297e:	f006 fff9 	bl	8019974 <ucdr_serialize_string>
 8012982:	4004      	ands	r4, r0
 8012984:	b2e4      	uxtb	r4, r4
 8012986:	e7ee      	b.n	8012966 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8012988:	68e9      	ldr	r1, [r5, #12]
 801298a:	4630      	mov	r0, r6
 801298c:	f006 fff2 	bl	8019974 <ucdr_serialize_string>
 8012990:	4004      	ands	r4, r0
 8012992:	4620      	mov	r0, r4
 8012994:	bd70      	pop	{r4, r5, r6, pc}
 8012996:	bf00      	nop

08012998 <uxr_serialize_OBJK_Topic_Binary>:
 8012998:	b570      	push	{r4, r5, r6, lr}
 801299a:	460d      	mov	r5, r1
 801299c:	4606      	mov	r6, r0
 801299e:	6809      	ldr	r1, [r1, #0]
 80129a0:	f006 ffe8 	bl	8019974 <ucdr_serialize_string>
 80129a4:	4604      	mov	r4, r0
 80129a6:	7929      	ldrb	r1, [r5, #4]
 80129a8:	4630      	mov	r0, r6
 80129aa:	f7fc fb61 	bl	800f070 <ucdr_serialize_bool>
 80129ae:	792b      	ldrb	r3, [r5, #4]
 80129b0:	4004      	ands	r4, r0
 80129b2:	b2e4      	uxtb	r4, r4
 80129b4:	b943      	cbnz	r3, 80129c8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80129b6:	7b29      	ldrb	r1, [r5, #12]
 80129b8:	4630      	mov	r0, r6
 80129ba:	f7fc fb59 	bl	800f070 <ucdr_serialize_bool>
 80129be:	7b2b      	ldrb	r3, [r5, #12]
 80129c0:	4004      	ands	r4, r0
 80129c2:	b93b      	cbnz	r3, 80129d4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80129c4:	4620      	mov	r0, r4
 80129c6:	bd70      	pop	{r4, r5, r6, pc}
 80129c8:	68a9      	ldr	r1, [r5, #8]
 80129ca:	4630      	mov	r0, r6
 80129cc:	f006 ffd2 	bl	8019974 <ucdr_serialize_string>
 80129d0:	4004      	ands	r4, r0
 80129d2:	e7f0      	b.n	80129b6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80129d4:	6929      	ldr	r1, [r5, #16]
 80129d6:	4630      	mov	r0, r6
 80129d8:	f006 ffcc 	bl	8019974 <ucdr_serialize_string>
 80129dc:	4004      	ands	r4, r0
 80129de:	b2e4      	uxtb	r4, r4
 80129e0:	4620      	mov	r0, r4
 80129e2:	bd70      	pop	{r4, r5, r6, pc}

080129e4 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80129e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129e8:	460c      	mov	r4, r1
 80129ea:	7809      	ldrb	r1, [r1, #0]
 80129ec:	4606      	mov	r6, r0
 80129ee:	f7fc fb3f 	bl	800f070 <ucdr_serialize_bool>
 80129f2:	7823      	ldrb	r3, [r4, #0]
 80129f4:	4605      	mov	r5, r0
 80129f6:	b96b      	cbnz	r3, 8012a14 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 80129f8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 80129fc:	4630      	mov	r0, r6
 80129fe:	f7fc fb37 	bl	800f070 <ucdr_serialize_bool>
 8012a02:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012a06:	4005      	ands	r5, r0
 8012a08:	b2ed      	uxtb	r5, r5
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d169      	bne.n	8012ae2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8012a0e:	4628      	mov	r0, r5
 8012a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a14:	6861      	ldr	r1, [r4, #4]
 8012a16:	4630      	mov	r0, r6
 8012a18:	f7fc fd6e 	bl	800f4f8 <ucdr_serialize_uint32_t>
 8012a1c:	6863      	ldr	r3, [r4, #4]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d06b      	beq.n	8012afa <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8012a22:	2800      	cmp	r0, #0
 8012a24:	d067      	beq.n	8012af6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012a26:	68a1      	ldr	r1, [r4, #8]
 8012a28:	4630      	mov	r0, r6
 8012a2a:	f006 ffa3 	bl	8019974 <ucdr_serialize_string>
 8012a2e:	6863      	ldr	r3, [r4, #4]
 8012a30:	2b01      	cmp	r3, #1
 8012a32:	d953      	bls.n	8012adc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a34:	2800      	cmp	r0, #0
 8012a36:	d05e      	beq.n	8012af6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012a38:	68e1      	ldr	r1, [r4, #12]
 8012a3a:	4630      	mov	r0, r6
 8012a3c:	f006 ff9a 	bl	8019974 <ucdr_serialize_string>
 8012a40:	6863      	ldr	r3, [r4, #4]
 8012a42:	2b02      	cmp	r3, #2
 8012a44:	d94a      	bls.n	8012adc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a46:	2800      	cmp	r0, #0
 8012a48:	d055      	beq.n	8012af6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012a4a:	6921      	ldr	r1, [r4, #16]
 8012a4c:	4630      	mov	r0, r6
 8012a4e:	f006 ff91 	bl	8019974 <ucdr_serialize_string>
 8012a52:	6863      	ldr	r3, [r4, #4]
 8012a54:	2b03      	cmp	r3, #3
 8012a56:	d941      	bls.n	8012adc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a58:	2800      	cmp	r0, #0
 8012a5a:	d04c      	beq.n	8012af6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012a5c:	6961      	ldr	r1, [r4, #20]
 8012a5e:	4630      	mov	r0, r6
 8012a60:	f006 ff88 	bl	8019974 <ucdr_serialize_string>
 8012a64:	6863      	ldr	r3, [r4, #4]
 8012a66:	2b04      	cmp	r3, #4
 8012a68:	d938      	bls.n	8012adc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a6a:	2800      	cmp	r0, #0
 8012a6c:	d043      	beq.n	8012af6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012a6e:	69a1      	ldr	r1, [r4, #24]
 8012a70:	4630      	mov	r0, r6
 8012a72:	f006 ff7f 	bl	8019974 <ucdr_serialize_string>
 8012a76:	6863      	ldr	r3, [r4, #4]
 8012a78:	2b05      	cmp	r3, #5
 8012a7a:	d92f      	bls.n	8012adc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a7c:	2800      	cmp	r0, #0
 8012a7e:	d03a      	beq.n	8012af6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012a80:	69e1      	ldr	r1, [r4, #28]
 8012a82:	4630      	mov	r0, r6
 8012a84:	f006 ff76 	bl	8019974 <ucdr_serialize_string>
 8012a88:	6863      	ldr	r3, [r4, #4]
 8012a8a:	2b06      	cmp	r3, #6
 8012a8c:	d926      	bls.n	8012adc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a8e:	b390      	cbz	r0, 8012af6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012a90:	6a21      	ldr	r1, [r4, #32]
 8012a92:	4630      	mov	r0, r6
 8012a94:	f006 ff6e 	bl	8019974 <ucdr_serialize_string>
 8012a98:	6863      	ldr	r3, [r4, #4]
 8012a9a:	2b07      	cmp	r3, #7
 8012a9c:	d91e      	bls.n	8012adc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012a9e:	b350      	cbz	r0, 8012af6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012aa0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012aa2:	4630      	mov	r0, r6
 8012aa4:	f006 ff66 	bl	8019974 <ucdr_serialize_string>
 8012aa8:	6863      	ldr	r3, [r4, #4]
 8012aaa:	2b08      	cmp	r3, #8
 8012aac:	d916      	bls.n	8012adc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012aae:	b310      	cbz	r0, 8012af6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012ab0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012ab2:	4630      	mov	r0, r6
 8012ab4:	f006 ff5e 	bl	8019974 <ucdr_serialize_string>
 8012ab8:	6863      	ldr	r3, [r4, #4]
 8012aba:	2b09      	cmp	r3, #9
 8012abc:	d90e      	bls.n	8012adc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8012abe:	b1d0      	cbz	r0, 8012af6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012ac0:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8012ac4:	2709      	movs	r7, #9
 8012ac6:	e000      	b.n	8012aca <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8012ac8:	b1a8      	cbz	r0, 8012af6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8012aca:	f858 1b04 	ldr.w	r1, [r8], #4
 8012ace:	4630      	mov	r0, r6
 8012ad0:	f006 ff50 	bl	8019974 <ucdr_serialize_string>
 8012ad4:	3701      	adds	r7, #1
 8012ad6:	6862      	ldr	r2, [r4, #4]
 8012ad8:	4297      	cmp	r7, r2
 8012ada:	d3f5      	bcc.n	8012ac8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8012adc:	4005      	ands	r5, r0
 8012ade:	b2ed      	uxtb	r5, r5
 8012ae0:	e78a      	b.n	80129f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012ae2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012ae4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8012ae8:	4630      	mov	r0, r6
 8012aea:	f006 ff17 	bl	801991c <ucdr_serialize_sequence_uint8_t>
 8012aee:	4005      	ands	r5, r0
 8012af0:	4628      	mov	r0, r5
 8012af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012af6:	2500      	movs	r5, #0
 8012af8:	e77e      	b.n	80129f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8012afa:	4028      	ands	r0, r5
 8012afc:	b2c5      	uxtb	r5, r0
 8012afe:	e77b      	b.n	80129f8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08012b00 <uxr_serialize_OBJK_Publisher_Binary>:
 8012b00:	b570      	push	{r4, r5, r6, lr}
 8012b02:	460d      	mov	r5, r1
 8012b04:	7809      	ldrb	r1, [r1, #0]
 8012b06:	4606      	mov	r6, r0
 8012b08:	f7fc fab2 	bl	800f070 <ucdr_serialize_bool>
 8012b0c:	782b      	ldrb	r3, [r5, #0]
 8012b0e:	4604      	mov	r4, r0
 8012b10:	b94b      	cbnz	r3, 8012b26 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8012b12:	7a29      	ldrb	r1, [r5, #8]
 8012b14:	4630      	mov	r0, r6
 8012b16:	f7fc faab 	bl	800f070 <ucdr_serialize_bool>
 8012b1a:	7a2b      	ldrb	r3, [r5, #8]
 8012b1c:	4004      	ands	r4, r0
 8012b1e:	b2e4      	uxtb	r4, r4
 8012b20:	b943      	cbnz	r3, 8012b34 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8012b22:	4620      	mov	r0, r4
 8012b24:	bd70      	pop	{r4, r5, r6, pc}
 8012b26:	6869      	ldr	r1, [r5, #4]
 8012b28:	4630      	mov	r0, r6
 8012b2a:	f006 ff23 	bl	8019974 <ucdr_serialize_string>
 8012b2e:	4004      	ands	r4, r0
 8012b30:	b2e4      	uxtb	r4, r4
 8012b32:	e7ee      	b.n	8012b12 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8012b34:	f105 010c 	add.w	r1, r5, #12
 8012b38:	4630      	mov	r0, r6
 8012b3a:	f7ff ff53 	bl	80129e4 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8012b3e:	4004      	ands	r4, r0
 8012b40:	4620      	mov	r0, r4
 8012b42:	bd70      	pop	{r4, r5, r6, pc}

08012b44 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8012b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b48:	460c      	mov	r4, r1
 8012b4a:	7809      	ldrb	r1, [r1, #0]
 8012b4c:	4606      	mov	r6, r0
 8012b4e:	f7fc fa8f 	bl	800f070 <ucdr_serialize_bool>
 8012b52:	7823      	ldrb	r3, [r4, #0]
 8012b54:	4605      	mov	r5, r0
 8012b56:	b96b      	cbnz	r3, 8012b74 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8012b58:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8012b5c:	4630      	mov	r0, r6
 8012b5e:	f7fc fa87 	bl	800f070 <ucdr_serialize_bool>
 8012b62:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012b66:	4005      	ands	r5, r0
 8012b68:	b2ed      	uxtb	r5, r5
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d169      	bne.n	8012c42 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8012b6e:	4628      	mov	r0, r5
 8012b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b74:	6861      	ldr	r1, [r4, #4]
 8012b76:	4630      	mov	r0, r6
 8012b78:	f7fc fcbe 	bl	800f4f8 <ucdr_serialize_uint32_t>
 8012b7c:	6863      	ldr	r3, [r4, #4]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d06b      	beq.n	8012c5a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8012b82:	2800      	cmp	r0, #0
 8012b84:	d067      	beq.n	8012c56 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b86:	68a1      	ldr	r1, [r4, #8]
 8012b88:	4630      	mov	r0, r6
 8012b8a:	f006 fef3 	bl	8019974 <ucdr_serialize_string>
 8012b8e:	6863      	ldr	r3, [r4, #4]
 8012b90:	2b01      	cmp	r3, #1
 8012b92:	d953      	bls.n	8012c3c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012b94:	2800      	cmp	r0, #0
 8012b96:	d05e      	beq.n	8012c56 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012b98:	68e1      	ldr	r1, [r4, #12]
 8012b9a:	4630      	mov	r0, r6
 8012b9c:	f006 feea 	bl	8019974 <ucdr_serialize_string>
 8012ba0:	6863      	ldr	r3, [r4, #4]
 8012ba2:	2b02      	cmp	r3, #2
 8012ba4:	d94a      	bls.n	8012c3c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012ba6:	2800      	cmp	r0, #0
 8012ba8:	d055      	beq.n	8012c56 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012baa:	6921      	ldr	r1, [r4, #16]
 8012bac:	4630      	mov	r0, r6
 8012bae:	f006 fee1 	bl	8019974 <ucdr_serialize_string>
 8012bb2:	6863      	ldr	r3, [r4, #4]
 8012bb4:	2b03      	cmp	r3, #3
 8012bb6:	d941      	bls.n	8012c3c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012bb8:	2800      	cmp	r0, #0
 8012bba:	d04c      	beq.n	8012c56 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012bbc:	6961      	ldr	r1, [r4, #20]
 8012bbe:	4630      	mov	r0, r6
 8012bc0:	f006 fed8 	bl	8019974 <ucdr_serialize_string>
 8012bc4:	6863      	ldr	r3, [r4, #4]
 8012bc6:	2b04      	cmp	r3, #4
 8012bc8:	d938      	bls.n	8012c3c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012bca:	2800      	cmp	r0, #0
 8012bcc:	d043      	beq.n	8012c56 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012bce:	69a1      	ldr	r1, [r4, #24]
 8012bd0:	4630      	mov	r0, r6
 8012bd2:	f006 fecf 	bl	8019974 <ucdr_serialize_string>
 8012bd6:	6863      	ldr	r3, [r4, #4]
 8012bd8:	2b05      	cmp	r3, #5
 8012bda:	d92f      	bls.n	8012c3c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012bdc:	2800      	cmp	r0, #0
 8012bde:	d03a      	beq.n	8012c56 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012be0:	69e1      	ldr	r1, [r4, #28]
 8012be2:	4630      	mov	r0, r6
 8012be4:	f006 fec6 	bl	8019974 <ucdr_serialize_string>
 8012be8:	6863      	ldr	r3, [r4, #4]
 8012bea:	2b06      	cmp	r3, #6
 8012bec:	d926      	bls.n	8012c3c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012bee:	b390      	cbz	r0, 8012c56 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012bf0:	6a21      	ldr	r1, [r4, #32]
 8012bf2:	4630      	mov	r0, r6
 8012bf4:	f006 febe 	bl	8019974 <ucdr_serialize_string>
 8012bf8:	6863      	ldr	r3, [r4, #4]
 8012bfa:	2b07      	cmp	r3, #7
 8012bfc:	d91e      	bls.n	8012c3c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012bfe:	b350      	cbz	r0, 8012c56 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012c00:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012c02:	4630      	mov	r0, r6
 8012c04:	f006 feb6 	bl	8019974 <ucdr_serialize_string>
 8012c08:	6863      	ldr	r3, [r4, #4]
 8012c0a:	2b08      	cmp	r3, #8
 8012c0c:	d916      	bls.n	8012c3c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012c0e:	b310      	cbz	r0, 8012c56 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012c10:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012c12:	4630      	mov	r0, r6
 8012c14:	f006 feae 	bl	8019974 <ucdr_serialize_string>
 8012c18:	6863      	ldr	r3, [r4, #4]
 8012c1a:	2b09      	cmp	r3, #9
 8012c1c:	d90e      	bls.n	8012c3c <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8012c1e:	b1d0      	cbz	r0, 8012c56 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012c20:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8012c24:	2709      	movs	r7, #9
 8012c26:	e000      	b.n	8012c2a <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8012c28:	b1a8      	cbz	r0, 8012c56 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8012c2a:	f858 1b04 	ldr.w	r1, [r8], #4
 8012c2e:	4630      	mov	r0, r6
 8012c30:	f006 fea0 	bl	8019974 <ucdr_serialize_string>
 8012c34:	3701      	adds	r7, #1
 8012c36:	6862      	ldr	r2, [r4, #4]
 8012c38:	4297      	cmp	r7, r2
 8012c3a:	d3f5      	bcc.n	8012c28 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8012c3c:	4005      	ands	r5, r0
 8012c3e:	b2ed      	uxtb	r5, r5
 8012c40:	e78a      	b.n	8012b58 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012c42:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012c44:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8012c48:	4630      	mov	r0, r6
 8012c4a:	f006 fe67 	bl	801991c <ucdr_serialize_sequence_uint8_t>
 8012c4e:	4005      	ands	r5, r0
 8012c50:	4628      	mov	r0, r5
 8012c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c56:	2500      	movs	r5, #0
 8012c58:	e77e      	b.n	8012b58 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8012c5a:	4028      	ands	r0, r5
 8012c5c:	b2c5      	uxtb	r5, r0
 8012c5e:	e77b      	b.n	8012b58 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08012c60 <uxr_serialize_OBJK_Subscriber_Binary>:
 8012c60:	b570      	push	{r4, r5, r6, lr}
 8012c62:	460d      	mov	r5, r1
 8012c64:	7809      	ldrb	r1, [r1, #0]
 8012c66:	4606      	mov	r6, r0
 8012c68:	f7fc fa02 	bl	800f070 <ucdr_serialize_bool>
 8012c6c:	782b      	ldrb	r3, [r5, #0]
 8012c6e:	4604      	mov	r4, r0
 8012c70:	b94b      	cbnz	r3, 8012c86 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8012c72:	7a29      	ldrb	r1, [r5, #8]
 8012c74:	4630      	mov	r0, r6
 8012c76:	f7fc f9fb 	bl	800f070 <ucdr_serialize_bool>
 8012c7a:	7a2b      	ldrb	r3, [r5, #8]
 8012c7c:	4004      	ands	r4, r0
 8012c7e:	b2e4      	uxtb	r4, r4
 8012c80:	b943      	cbnz	r3, 8012c94 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8012c82:	4620      	mov	r0, r4
 8012c84:	bd70      	pop	{r4, r5, r6, pc}
 8012c86:	6869      	ldr	r1, [r5, #4]
 8012c88:	4630      	mov	r0, r6
 8012c8a:	f006 fe73 	bl	8019974 <ucdr_serialize_string>
 8012c8e:	4004      	ands	r4, r0
 8012c90:	b2e4      	uxtb	r4, r4
 8012c92:	e7ee      	b.n	8012c72 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8012c94:	f105 010c 	add.w	r1, r5, #12
 8012c98:	4630      	mov	r0, r6
 8012c9a:	f7ff ff53 	bl	8012b44 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8012c9e:	4004      	ands	r4, r0
 8012ca0:	4620      	mov	r0, r4
 8012ca2:	bd70      	pop	{r4, r5, r6, pc}

08012ca4 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8012ca4:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8012ca8:	4688      	mov	r8, r1
 8012caa:	4681      	mov	r9, r0
 8012cac:	8809      	ldrh	r1, [r1, #0]
 8012cae:	f7fc fa39 	bl	800f124 <ucdr_serialize_uint16_t>
 8012cb2:	4606      	mov	r6, r0
 8012cb4:	f898 1002 	ldrb.w	r1, [r8, #2]
 8012cb8:	4648      	mov	r0, r9
 8012cba:	f7fc f9d9 	bl	800f070 <ucdr_serialize_bool>
 8012cbe:	f898 3002 	ldrb.w	r3, [r8, #2]
 8012cc2:	4006      	ands	r6, r0
 8012cc4:	b2f5      	uxtb	r5, r6
 8012cc6:	b9eb      	cbnz	r3, 8012d04 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8012cc8:	f898 1006 	ldrb.w	r1, [r8, #6]
 8012ccc:	4648      	mov	r0, r9
 8012cce:	f7fc f9cf 	bl	800f070 <ucdr_serialize_bool>
 8012cd2:	f898 3006 	ldrb.w	r3, [r8, #6]
 8012cd6:	4005      	ands	r5, r0
 8012cd8:	bb7b      	cbnz	r3, 8012d3a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8012cda:	f898 100c 	ldrb.w	r1, [r8, #12]
 8012cde:	4648      	mov	r0, r9
 8012ce0:	f7fc f9c6 	bl	800f070 <ucdr_serialize_bool>
 8012ce4:	f898 300c 	ldrb.w	r3, [r8, #12]
 8012ce8:	4005      	ands	r5, r0
 8012cea:	b9f3      	cbnz	r3, 8012d2a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8012cec:	f898 1014 	ldrb.w	r1, [r8, #20]
 8012cf0:	4648      	mov	r0, r9
 8012cf2:	f7fc f9bd 	bl	800f070 <ucdr_serialize_bool>
 8012cf6:	f898 3014 	ldrb.w	r3, [r8, #20]
 8012cfa:	4005      	ands	r5, r0
 8012cfc:	b94b      	cbnz	r3, 8012d12 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8012cfe:	4628      	mov	r0, r5
 8012d00:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012d04:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8012d08:	4648      	mov	r0, r9
 8012d0a:	f7fc fa0b 	bl	800f124 <ucdr_serialize_uint16_t>
 8012d0e:	4005      	ands	r5, r0
 8012d10:	e7da      	b.n	8012cc8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8012d12:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8012d16:	f108 011c 	add.w	r1, r8, #28
 8012d1a:	4648      	mov	r0, r9
 8012d1c:	f006 fdfe 	bl	801991c <ucdr_serialize_sequence_uint8_t>
 8012d20:	4028      	ands	r0, r5
 8012d22:	b2c5      	uxtb	r5, r0
 8012d24:	4628      	mov	r0, r5
 8012d26:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8012d2a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012d2e:	4648      	mov	r0, r9
 8012d30:	f7fc fbe2 	bl	800f4f8 <ucdr_serialize_uint32_t>
 8012d34:	4028      	ands	r0, r5
 8012d36:	b2c5      	uxtb	r5, r0
 8012d38:	e7d8      	b.n	8012cec <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8012d3a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8012d3e:	4648      	mov	r0, r9
 8012d40:	f7fc fbda 	bl	800f4f8 <ucdr_serialize_uint32_t>
 8012d44:	4028      	ands	r0, r5
 8012d46:	b2c5      	uxtb	r5, r0
 8012d48:	e7c7      	b.n	8012cda <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8012d4a:	bf00      	nop

08012d4c <uxr_serialize_OBJK_DataReader_Binary>:
 8012d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d4e:	2202      	movs	r2, #2
 8012d50:	460c      	mov	r4, r1
 8012d52:	4606      	mov	r6, r0
 8012d54:	f7fc f816 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 8012d58:	4605      	mov	r5, r0
 8012d5a:	78a1      	ldrb	r1, [r4, #2]
 8012d5c:	4630      	mov	r0, r6
 8012d5e:	f7fc f987 	bl	800f070 <ucdr_serialize_bool>
 8012d62:	78a3      	ldrb	r3, [r4, #2]
 8012d64:	4005      	ands	r5, r0
 8012d66:	b2ed      	uxtb	r5, r5
 8012d68:	b90b      	cbnz	r3, 8012d6e <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8012d6a:	4628      	mov	r0, r5
 8012d6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d6e:	f104 0108 	add.w	r1, r4, #8
 8012d72:	4630      	mov	r0, r6
 8012d74:	f7ff ff96 	bl	8012ca4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012d78:	4607      	mov	r7, r0
 8012d7a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8012d7e:	4630      	mov	r0, r6
 8012d80:	f7fc f976 	bl	800f070 <ucdr_serialize_bool>
 8012d84:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8012d88:	4038      	ands	r0, r7
 8012d8a:	b2c7      	uxtb	r7, r0
 8012d8c:	b95b      	cbnz	r3, 8012da6 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8012d8e:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8012d92:	4630      	mov	r0, r6
 8012d94:	f7fc f96c 	bl	800f070 <ucdr_serialize_bool>
 8012d98:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8012d9c:	4007      	ands	r7, r0
 8012d9e:	b94b      	cbnz	r3, 8012db4 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8012da0:	403d      	ands	r5, r7
 8012da2:	4628      	mov	r0, r5
 8012da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012da6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8012daa:	4630      	mov	r0, r6
 8012dac:	f7fc fdfa 	bl	800f9a4 <ucdr_serialize_uint64_t>
 8012db0:	4007      	ands	r7, r0
 8012db2:	e7ec      	b.n	8012d8e <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8012db4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8012db6:	4630      	mov	r0, r6
 8012db8:	f006 fddc 	bl	8019974 <ucdr_serialize_string>
 8012dbc:	4007      	ands	r7, r0
 8012dbe:	b2ff      	uxtb	r7, r7
 8012dc0:	e7ee      	b.n	8012da0 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8012dc2:	bf00      	nop

08012dc4 <uxr_serialize_OBJK_DataWriter_Binary>:
 8012dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dc6:	2202      	movs	r2, #2
 8012dc8:	460d      	mov	r5, r1
 8012dca:	4606      	mov	r6, r0
 8012dcc:	f7fb ffda 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 8012dd0:	4604      	mov	r4, r0
 8012dd2:	78a9      	ldrb	r1, [r5, #2]
 8012dd4:	4630      	mov	r0, r6
 8012dd6:	f7fc f94b 	bl	800f070 <ucdr_serialize_bool>
 8012dda:	78ab      	ldrb	r3, [r5, #2]
 8012ddc:	4004      	ands	r4, r0
 8012dde:	b2e4      	uxtb	r4, r4
 8012de0:	b90b      	cbnz	r3, 8012de6 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8012de2:	4620      	mov	r0, r4
 8012de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012de6:	f105 0108 	add.w	r1, r5, #8
 8012dea:	4630      	mov	r0, r6
 8012dec:	f7ff ff5a 	bl	8012ca4 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8012df0:	4607      	mov	r7, r0
 8012df2:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8012df6:	4630      	mov	r0, r6
 8012df8:	f7fc f93a 	bl	800f070 <ucdr_serialize_bool>
 8012dfc:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8012e00:	4038      	ands	r0, r7
 8012e02:	b2c7      	uxtb	r7, r0
 8012e04:	b913      	cbnz	r3, 8012e0c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8012e06:	403c      	ands	r4, r7
 8012e08:	4620      	mov	r0, r4
 8012e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e0c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8012e10:	4630      	mov	r0, r6
 8012e12:	f7fc fdc7 	bl	800f9a4 <ucdr_serialize_uint64_t>
 8012e16:	4007      	ands	r7, r0
 8012e18:	e7f5      	b.n	8012e06 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8012e1a:	bf00      	nop

08012e1c <uxr_serialize_OBJK_Replier_Binary>:
 8012e1c:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8012e20:	460f      	mov	r7, r1
 8012e22:	4680      	mov	r8, r0
 8012e24:	6809      	ldr	r1, [r1, #0]
 8012e26:	f006 fda5 	bl	8019974 <ucdr_serialize_string>
 8012e2a:	4605      	mov	r5, r0
 8012e2c:	6879      	ldr	r1, [r7, #4]
 8012e2e:	4640      	mov	r0, r8
 8012e30:	f006 fda0 	bl	8019974 <ucdr_serialize_string>
 8012e34:	4005      	ands	r5, r0
 8012e36:	68b9      	ldr	r1, [r7, #8]
 8012e38:	4640      	mov	r0, r8
 8012e3a:	b2ec      	uxtb	r4, r5
 8012e3c:	f006 fd9a 	bl	8019974 <ucdr_serialize_string>
 8012e40:	7b39      	ldrb	r1, [r7, #12]
 8012e42:	4004      	ands	r4, r0
 8012e44:	4640      	mov	r0, r8
 8012e46:	f7fc f913 	bl	800f070 <ucdr_serialize_bool>
 8012e4a:	7b3b      	ldrb	r3, [r7, #12]
 8012e4c:	4004      	ands	r4, r0
 8012e4e:	b94b      	cbnz	r3, 8012e64 <uxr_serialize_OBJK_Replier_Binary+0x48>
 8012e50:	7d39      	ldrb	r1, [r7, #20]
 8012e52:	4640      	mov	r0, r8
 8012e54:	f7fc f90c 	bl	800f070 <ucdr_serialize_bool>
 8012e58:	7d3b      	ldrb	r3, [r7, #20]
 8012e5a:	4004      	ands	r4, r0
 8012e5c:	b943      	cbnz	r3, 8012e70 <uxr_serialize_OBJK_Replier_Binary+0x54>
 8012e5e:	4620      	mov	r0, r4
 8012e60:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8012e64:	6939      	ldr	r1, [r7, #16]
 8012e66:	4640      	mov	r0, r8
 8012e68:	f006 fd84 	bl	8019974 <ucdr_serialize_string>
 8012e6c:	4004      	ands	r4, r0
 8012e6e:	e7ef      	b.n	8012e50 <uxr_serialize_OBJK_Replier_Binary+0x34>
 8012e70:	69b9      	ldr	r1, [r7, #24]
 8012e72:	4640      	mov	r0, r8
 8012e74:	f006 fd7e 	bl	8019974 <ucdr_serialize_string>
 8012e78:	4004      	ands	r4, r0
 8012e7a:	b2e4      	uxtb	r4, r4
 8012e7c:	4620      	mov	r0, r4
 8012e7e:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8012e82:	bf00      	nop

08012e84 <uxr_deserialize_ObjectVariant>:
 8012e84:	b570      	push	{r4, r5, r6, lr}
 8012e86:	4605      	mov	r5, r0
 8012e88:	460e      	mov	r6, r1
 8012e8a:	f7fc f935 	bl	800f0f8 <ucdr_deserialize_uint8_t>
 8012e8e:	b168      	cbz	r0, 8012eac <uxr_deserialize_ObjectVariant+0x28>
 8012e90:	7833      	ldrb	r3, [r6, #0]
 8012e92:	4604      	mov	r4, r0
 8012e94:	3b01      	subs	r3, #1
 8012e96:	2b0d      	cmp	r3, #13
 8012e98:	d809      	bhi.n	8012eae <uxr_deserialize_ObjectVariant+0x2a>
 8012e9a:	e8df f003 	tbb	[pc, r3]
 8012e9e:	0a41      	.short	0x0a41
 8012ea0:	0a0a2323 	.word	0x0a0a2323
 8012ea4:	10080a0a 	.word	0x10080a0a
 8012ea8:	565c1010 	.word	0x565c1010
 8012eac:	2400      	movs	r4, #0
 8012eae:	4620      	mov	r0, r4
 8012eb0:	bd70      	pop	{r4, r5, r6, pc}
 8012eb2:	1d31      	adds	r1, r6, #4
 8012eb4:	4628      	mov	r0, r5
 8012eb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012eba:	f7ff bd21 	b.w	8012900 <uxr_deserialize_DATAWRITER_Representation>
 8012ebe:	1d31      	adds	r1, r6, #4
 8012ec0:	4628      	mov	r0, r5
 8012ec2:	f7fc f919 	bl	800f0f8 <ucdr_deserialize_uint8_t>
 8012ec6:	2800      	cmp	r0, #0
 8012ec8:	d0f0      	beq.n	8012eac <uxr_deserialize_ObjectVariant+0x28>
 8012eca:	7933      	ldrb	r3, [r6, #4]
 8012ecc:	2b01      	cmp	r3, #1
 8012ece:	d001      	beq.n	8012ed4 <uxr_deserialize_ObjectVariant+0x50>
 8012ed0:	2b02      	cmp	r3, #2
 8012ed2:	d1ec      	bne.n	8012eae <uxr_deserialize_ObjectVariant+0x2a>
 8012ed4:	68b1      	ldr	r1, [r6, #8]
 8012ed6:	4628      	mov	r0, r5
 8012ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012edc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012ee0:	f006 bd58 	b.w	8019994 <ucdr_deserialize_string>
 8012ee4:	1d31      	adds	r1, r6, #4
 8012ee6:	4628      	mov	r0, r5
 8012ee8:	f7fc f906 	bl	800f0f8 <ucdr_deserialize_uint8_t>
 8012eec:	4604      	mov	r4, r0
 8012eee:	b170      	cbz	r0, 8012f0e <uxr_deserialize_ObjectVariant+0x8a>
 8012ef0:	7933      	ldrb	r3, [r6, #4]
 8012ef2:	2b02      	cmp	r3, #2
 8012ef4:	d04c      	beq.n	8012f90 <uxr_deserialize_ObjectVariant+0x10c>
 8012ef6:	2b03      	cmp	r3, #3
 8012ef8:	d109      	bne.n	8012f0e <uxr_deserialize_ObjectVariant+0x8a>
 8012efa:	f106 0308 	add.w	r3, r6, #8
 8012efe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012f02:	f106 010c 	add.w	r1, r6, #12
 8012f06:	4628      	mov	r0, r5
 8012f08:	f006 fd1a 	bl	8019940 <ucdr_deserialize_sequence_uint8_t>
 8012f0c:	4604      	mov	r4, r0
 8012f0e:	2202      	movs	r2, #2
 8012f10:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8012f14:	4628      	mov	r0, r5
 8012f16:	f7fb ff99 	bl	800ee4c <ucdr_deserialize_array_uint8_t>
 8012f1a:	4020      	ands	r0, r4
 8012f1c:	b2c4      	uxtb	r4, r0
 8012f1e:	e7c6      	b.n	8012eae <uxr_deserialize_ObjectVariant+0x2a>
 8012f20:	1d31      	adds	r1, r6, #4
 8012f22:	4628      	mov	r0, r5
 8012f24:	f7fc f8e8 	bl	800f0f8 <ucdr_deserialize_uint8_t>
 8012f28:	4604      	mov	r4, r0
 8012f2a:	b130      	cbz	r0, 8012f3a <uxr_deserialize_ObjectVariant+0xb6>
 8012f2c:	7933      	ldrb	r3, [r6, #4]
 8012f2e:	2b02      	cmp	r3, #2
 8012f30:	d036      	beq.n	8012fa0 <uxr_deserialize_ObjectVariant+0x11c>
 8012f32:	2b03      	cmp	r3, #3
 8012f34:	d03c      	beq.n	8012fb0 <uxr_deserialize_ObjectVariant+0x12c>
 8012f36:	2b01      	cmp	r3, #1
 8012f38:	d032      	beq.n	8012fa0 <uxr_deserialize_ObjectVariant+0x11c>
 8012f3a:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8012f3e:	4628      	mov	r0, r5
 8012f40:	f7fc ff00 	bl	800fd44 <ucdr_deserialize_int16_t>
 8012f44:	4020      	ands	r0, r4
 8012f46:	b2c4      	uxtb	r4, r0
 8012f48:	e7b1      	b.n	8012eae <uxr_deserialize_ObjectVariant+0x2a>
 8012f4a:	1d31      	adds	r1, r6, #4
 8012f4c:	4628      	mov	r0, r5
 8012f4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012f52:	f7ff bb8b 	b.w	801266c <uxr_deserialize_CLIENT_Representation>
 8012f56:	2204      	movs	r2, #4
 8012f58:	4628      	mov	r0, r5
 8012f5a:	18b1      	adds	r1, r6, r2
 8012f5c:	f7fb ff76 	bl	800ee4c <ucdr_deserialize_array_uint8_t>
 8012f60:	4604      	mov	r4, r0
 8012f62:	2202      	movs	r2, #2
 8012f64:	f106 0108 	add.w	r1, r6, #8
 8012f68:	4628      	mov	r0, r5
 8012f6a:	f7fb ff6f 	bl	800ee4c <ucdr_deserialize_array_uint8_t>
 8012f6e:	4004      	ands	r4, r0
 8012f70:	2202      	movs	r2, #2
 8012f72:	f106 010a 	add.w	r1, r6, #10
 8012f76:	4628      	mov	r0, r5
 8012f78:	b2e4      	uxtb	r4, r4
 8012f7a:	f7fb ff67 	bl	800ee4c <ucdr_deserialize_array_uint8_t>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	f106 010c 	add.w	r1, r6, #12
 8012f84:	4628      	mov	r0, r5
 8012f86:	401c      	ands	r4, r3
 8012f88:	f7fc f888 	bl	800f09c <ucdr_deserialize_bool>
 8012f8c:	4004      	ands	r4, r0
 8012f8e:	e78e      	b.n	8012eae <uxr_deserialize_ObjectVariant+0x2a>
 8012f90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012f94:	68b1      	ldr	r1, [r6, #8]
 8012f96:	4628      	mov	r0, r5
 8012f98:	f006 fcfc 	bl	8019994 <ucdr_deserialize_string>
 8012f9c:	4604      	mov	r4, r0
 8012f9e:	e7b6      	b.n	8012f0e <uxr_deserialize_ObjectVariant+0x8a>
 8012fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012fa4:	68b1      	ldr	r1, [r6, #8]
 8012fa6:	4628      	mov	r0, r5
 8012fa8:	f006 fcf4 	bl	8019994 <ucdr_deserialize_string>
 8012fac:	4604      	mov	r4, r0
 8012fae:	e7c4      	b.n	8012f3a <uxr_deserialize_ObjectVariant+0xb6>
 8012fb0:	f106 0308 	add.w	r3, r6, #8
 8012fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012fb8:	f106 010c 	add.w	r1, r6, #12
 8012fbc:	4628      	mov	r0, r5
 8012fbe:	f006 fcbf 	bl	8019940 <ucdr_deserialize_sequence_uint8_t>
 8012fc2:	4604      	mov	r4, r0
 8012fc4:	e7b9      	b.n	8012f3a <uxr_deserialize_ObjectVariant+0xb6>
 8012fc6:	bf00      	nop

08012fc8 <uxr_deserialize_BaseObjectRequest>:
 8012fc8:	b570      	push	{r4, r5, r6, lr}
 8012fca:	2202      	movs	r2, #2
 8012fcc:	4605      	mov	r5, r0
 8012fce:	460e      	mov	r6, r1
 8012fd0:	f7fb ff3c 	bl	800ee4c <ucdr_deserialize_array_uint8_t>
 8012fd4:	2202      	movs	r2, #2
 8012fd6:	4604      	mov	r4, r0
 8012fd8:	4628      	mov	r0, r5
 8012fda:	18b1      	adds	r1, r6, r2
 8012fdc:	f7fb ff36 	bl	800ee4c <ucdr_deserialize_array_uint8_t>
 8012fe0:	4020      	ands	r0, r4
 8012fe2:	b2c0      	uxtb	r0, r0
 8012fe4:	bd70      	pop	{r4, r5, r6, pc}
 8012fe6:	bf00      	nop

08012fe8 <uxr_serialize_ActivityInfoVariant>:
 8012fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012fec:	460e      	mov	r6, r1
 8012fee:	7809      	ldrb	r1, [r1, #0]
 8012ff0:	4680      	mov	r8, r0
 8012ff2:	f7fc f86b 	bl	800f0cc <ucdr_serialize_uint8_t>
 8012ff6:	4607      	mov	r7, r0
 8012ff8:	b138      	cbz	r0, 801300a <uxr_serialize_ActivityInfoVariant+0x22>
 8012ffa:	7833      	ldrb	r3, [r6, #0]
 8012ffc:	2b06      	cmp	r3, #6
 8012ffe:	f000 8081 	beq.w	8013104 <uxr_serialize_ActivityInfoVariant+0x11c>
 8013002:	2b0d      	cmp	r3, #13
 8013004:	d014      	beq.n	8013030 <uxr_serialize_ActivityInfoVariant+0x48>
 8013006:	2b05      	cmp	r3, #5
 8013008:	d002      	beq.n	8013010 <uxr_serialize_ActivityInfoVariant+0x28>
 801300a:	4638      	mov	r0, r7
 801300c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013010:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8013014:	4640      	mov	r0, r8
 8013016:	f7fc fd95 	bl	800fb44 <ucdr_serialize_int16_t>
 801301a:	4607      	mov	r7, r0
 801301c:	4640      	mov	r0, r8
 801301e:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8013022:	f7fc fcbf 	bl	800f9a4 <ucdr_serialize_uint64_t>
 8013026:	4038      	ands	r0, r7
 8013028:	b2c7      	uxtb	r7, r0
 801302a:	4638      	mov	r0, r7
 801302c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013030:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8013034:	4640      	mov	r0, r8
 8013036:	f7fc fd85 	bl	800fb44 <ucdr_serialize_int16_t>
 801303a:	68f1      	ldr	r1, [r6, #12]
 801303c:	4607      	mov	r7, r0
 801303e:	4640      	mov	r0, r8
 8013040:	f7fc fa5a 	bl	800f4f8 <ucdr_serialize_uint32_t>
 8013044:	68f3      	ldr	r3, [r6, #12]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d0ed      	beq.n	8013026 <uxr_serialize_ActivityInfoVariant+0x3e>
 801304a:	b318      	cbz	r0, 8013094 <uxr_serialize_ActivityInfoVariant+0xac>
 801304c:	f106 090c 	add.w	r9, r6, #12
 8013050:	2400      	movs	r4, #0
 8013052:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8013056:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801305a:	7c29      	ldrb	r1, [r5, #16]
 801305c:	4640      	mov	r0, r8
 801305e:	f7fc f835 	bl	800f0cc <ucdr_serialize_uint8_t>
 8013062:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8013066:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801306a:	2800      	cmp	r0, #0
 801306c:	d051      	beq.n	8013112 <uxr_serialize_ActivityInfoVariant+0x12a>
 801306e:	7c2b      	ldrb	r3, [r5, #16]
 8013070:	00c9      	lsls	r1, r1, #3
 8013072:	2b03      	cmp	r3, #3
 8013074:	d854      	bhi.n	8013120 <uxr_serialize_ActivityInfoVariant+0x138>
 8013076:	e8df f003 	tbb	[pc, r3]
 801307a:	2133      	.short	0x2133
 801307c:	020f      	.short	0x020f
 801307e:	4449      	add	r1, r9
 8013080:	4640      	mov	r0, r8
 8013082:	6889      	ldr	r1, [r1, #8]
 8013084:	f006 fc76 	bl	8019974 <ucdr_serialize_string>
 8013088:	3401      	adds	r4, #1
 801308a:	68f2      	ldr	r2, [r6, #12]
 801308c:	4294      	cmp	r4, r2
 801308e:	d244      	bcs.n	801311a <uxr_serialize_ActivityInfoVariant+0x132>
 8013090:	2800      	cmp	r0, #0
 8013092:	d1de      	bne.n	8013052 <uxr_serialize_ActivityInfoVariant+0x6a>
 8013094:	2700      	movs	r7, #0
 8013096:	e7b8      	b.n	801300a <uxr_serialize_ActivityInfoVariant+0x22>
 8013098:	3108      	adds	r1, #8
 801309a:	44a2      	add	sl, r4
 801309c:	2210      	movs	r2, #16
 801309e:	4640      	mov	r0, r8
 80130a0:	4449      	add	r1, r9
 80130a2:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80130a6:	f7fb fe6d 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 80130aa:	4605      	mov	r5, r0
 80130ac:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 80130b0:	4640      	mov	r0, r8
 80130b2:	f7fc fa21 	bl	800f4f8 <ucdr_serialize_uint32_t>
 80130b6:	4028      	ands	r0, r5
 80130b8:	b2c0      	uxtb	r0, r0
 80130ba:	e7e5      	b.n	8013088 <uxr_serialize_ActivityInfoVariant+0xa0>
 80130bc:	3108      	adds	r1, #8
 80130be:	44a2      	add	sl, r4
 80130c0:	2204      	movs	r2, #4
 80130c2:	4640      	mov	r0, r8
 80130c4:	4449      	add	r1, r9
 80130c6:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80130ca:	f7fb fe5b 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 80130ce:	4605      	mov	r5, r0
 80130d0:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 80130d4:	4640      	mov	r0, r8
 80130d6:	f7fc f825 	bl	800f124 <ucdr_serialize_uint16_t>
 80130da:	4028      	ands	r0, r5
 80130dc:	b2c0      	uxtb	r0, r0
 80130de:	e7d3      	b.n	8013088 <uxr_serialize_ActivityInfoVariant+0xa0>
 80130e0:	3108      	adds	r1, #8
 80130e2:	44a2      	add	sl, r4
 80130e4:	2202      	movs	r2, #2
 80130e6:	4640      	mov	r0, r8
 80130e8:	4449      	add	r1, r9
 80130ea:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80130ee:	f7fb fe49 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 80130f2:	4605      	mov	r5, r0
 80130f4:	f89a 1016 	ldrb.w	r1, [sl, #22]
 80130f8:	4640      	mov	r0, r8
 80130fa:	f7fb ffe7 	bl	800f0cc <ucdr_serialize_uint8_t>
 80130fe:	4028      	ands	r0, r5
 8013100:	b2c0      	uxtb	r0, r0
 8013102:	e7c1      	b.n	8013088 <uxr_serialize_ActivityInfoVariant+0xa0>
 8013104:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8013108:	4640      	mov	r0, r8
 801310a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801310e:	f7fc bd19 	b.w	800fb44 <ucdr_serialize_int16_t>
 8013112:	3401      	adds	r4, #1
 8013114:	68f2      	ldr	r2, [r6, #12]
 8013116:	42a2      	cmp	r2, r4
 8013118:	d8bc      	bhi.n	8013094 <uxr_serialize_ActivityInfoVariant+0xac>
 801311a:	4007      	ands	r7, r0
 801311c:	b2ff      	uxtb	r7, r7
 801311e:	e774      	b.n	801300a <uxr_serialize_ActivityInfoVariant+0x22>
 8013120:	3401      	adds	r4, #1
 8013122:	68f3      	ldr	r3, [r6, #12]
 8013124:	3518      	adds	r5, #24
 8013126:	429c      	cmp	r4, r3
 8013128:	d397      	bcc.n	801305a <uxr_serialize_ActivityInfoVariant+0x72>
 801312a:	e76e      	b.n	801300a <uxr_serialize_ActivityInfoVariant+0x22>

0801312c <uxr_deserialize_BaseObjectReply>:
 801312c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013130:	2202      	movs	r2, #2
 8013132:	4606      	mov	r6, r0
 8013134:	460f      	mov	r7, r1
 8013136:	f7fb fe89 	bl	800ee4c <ucdr_deserialize_array_uint8_t>
 801313a:	2202      	movs	r2, #2
 801313c:	4605      	mov	r5, r0
 801313e:	4630      	mov	r0, r6
 8013140:	18b9      	adds	r1, r7, r2
 8013142:	f7fb fe83 	bl	800ee4c <ucdr_deserialize_array_uint8_t>
 8013146:	4680      	mov	r8, r0
 8013148:	1d39      	adds	r1, r7, #4
 801314a:	4630      	mov	r0, r6
 801314c:	f7fb ffd4 	bl	800f0f8 <ucdr_deserialize_uint8_t>
 8013150:	ea05 0508 	and.w	r5, r5, r8
 8013154:	4604      	mov	r4, r0
 8013156:	1d79      	adds	r1, r7, #5
 8013158:	4630      	mov	r0, r6
 801315a:	402c      	ands	r4, r5
 801315c:	f7fb ffcc 	bl	800f0f8 <ucdr_deserialize_uint8_t>
 8013160:	4020      	ands	r0, r4
 8013162:	b2c0      	uxtb	r0, r0
 8013164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013168 <uxr_serialize_ReadSpecification>:
 8013168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801316a:	460e      	mov	r6, r1
 801316c:	4607      	mov	r7, r0
 801316e:	7809      	ldrb	r1, [r1, #0]
 8013170:	f7fb ffac 	bl	800f0cc <ucdr_serialize_uint8_t>
 8013174:	4604      	mov	r4, r0
 8013176:	7871      	ldrb	r1, [r6, #1]
 8013178:	4638      	mov	r0, r7
 801317a:	f7fb ffa7 	bl	800f0cc <ucdr_serialize_uint8_t>
 801317e:	4004      	ands	r4, r0
 8013180:	78b1      	ldrb	r1, [r6, #2]
 8013182:	4638      	mov	r0, r7
 8013184:	f7fb ff74 	bl	800f070 <ucdr_serialize_bool>
 8013188:	78b3      	ldrb	r3, [r6, #2]
 801318a:	b2e4      	uxtb	r4, r4
 801318c:	4004      	ands	r4, r0
 801318e:	b943      	cbnz	r3, 80131a2 <uxr_serialize_ReadSpecification+0x3a>
 8013190:	7a31      	ldrb	r1, [r6, #8]
 8013192:	4638      	mov	r0, r7
 8013194:	f7fb ff6c 	bl	800f070 <ucdr_serialize_bool>
 8013198:	7a33      	ldrb	r3, [r6, #8]
 801319a:	4004      	ands	r4, r0
 801319c:	b93b      	cbnz	r3, 80131ae <uxr_serialize_ReadSpecification+0x46>
 801319e:	4620      	mov	r0, r4
 80131a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131a2:	6871      	ldr	r1, [r6, #4]
 80131a4:	4638      	mov	r0, r7
 80131a6:	f006 fbe5 	bl	8019974 <ucdr_serialize_string>
 80131aa:	4004      	ands	r4, r0
 80131ac:	e7f0      	b.n	8013190 <uxr_serialize_ReadSpecification+0x28>
 80131ae:	8971      	ldrh	r1, [r6, #10]
 80131b0:	4638      	mov	r0, r7
 80131b2:	f7fb ffb7 	bl	800f124 <ucdr_serialize_uint16_t>
 80131b6:	4605      	mov	r5, r0
 80131b8:	89b1      	ldrh	r1, [r6, #12]
 80131ba:	4638      	mov	r0, r7
 80131bc:	f7fb ffb2 	bl	800f124 <ucdr_serialize_uint16_t>
 80131c0:	4005      	ands	r5, r0
 80131c2:	89f1      	ldrh	r1, [r6, #14]
 80131c4:	4638      	mov	r0, r7
 80131c6:	b2ed      	uxtb	r5, r5
 80131c8:	f7fb ffac 	bl	800f124 <ucdr_serialize_uint16_t>
 80131cc:	8a31      	ldrh	r1, [r6, #16]
 80131ce:	4025      	ands	r5, r4
 80131d0:	4604      	mov	r4, r0
 80131d2:	4638      	mov	r0, r7
 80131d4:	4025      	ands	r5, r4
 80131d6:	f7fb ffa5 	bl	800f124 <ucdr_serialize_uint16_t>
 80131da:	ea00 0405 	and.w	r4, r0, r5
 80131de:	4620      	mov	r0, r4
 80131e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131e2:	bf00      	nop

080131e4 <uxr_serialize_CREATE_CLIENT_Payload>:
 80131e4:	f7ff b9ea 	b.w	80125bc <uxr_serialize_CLIENT_Representation>

080131e8 <uxr_serialize_CREATE_Payload>:
 80131e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131ea:	2202      	movs	r2, #2
 80131ec:	4607      	mov	r7, r0
 80131ee:	460e      	mov	r6, r1
 80131f0:	f7fb fdc8 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 80131f4:	2202      	movs	r2, #2
 80131f6:	4605      	mov	r5, r0
 80131f8:	4638      	mov	r0, r7
 80131fa:	18b1      	adds	r1, r6, r2
 80131fc:	f7fb fdc2 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 8013200:	7931      	ldrb	r1, [r6, #4]
 8013202:	4604      	mov	r4, r0
 8013204:	4638      	mov	r0, r7
 8013206:	f7fb ff61 	bl	800f0cc <ucdr_serialize_uint8_t>
 801320a:	b170      	cbz	r0, 801322a <uxr_serialize_CREATE_Payload+0x42>
 801320c:	7933      	ldrb	r3, [r6, #4]
 801320e:	402c      	ands	r4, r5
 8013210:	3b01      	subs	r3, #1
 8013212:	b2e4      	uxtb	r4, r4
 8013214:	2b0d      	cmp	r3, #13
 8013216:	d809      	bhi.n	801322c <uxr_serialize_CREATE_Payload+0x44>
 8013218:	e8df f003 	tbb	[pc, r3]
 801321c:	23230a4c 	.word	0x23230a4c
 8013220:	0a0a0a0a 	.word	0x0a0a0a0a
 8013224:	12121208 	.word	0x12121208
 8013228:	3e45      	.short	0x3e45
 801322a:	2400      	movs	r4, #0
 801322c:	4620      	mov	r0, r4
 801322e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013230:	f106 0108 	add.w	r1, r6, #8
 8013234:	4638      	mov	r0, r7
 8013236:	f7ff fac7 	bl	80127c8 <uxr_serialize_DATAWRITER_Representation>
 801323a:	4004      	ands	r4, r0
 801323c:	4620      	mov	r0, r4
 801323e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013240:	7a31      	ldrb	r1, [r6, #8]
 8013242:	4638      	mov	r0, r7
 8013244:	f7fb ff42 	bl	800f0cc <ucdr_serialize_uint8_t>
 8013248:	2800      	cmp	r0, #0
 801324a:	d0ee      	beq.n	801322a <uxr_serialize_CREATE_Payload+0x42>
 801324c:	7a33      	ldrb	r3, [r6, #8]
 801324e:	2b01      	cmp	r3, #1
 8013250:	d001      	beq.n	8013256 <uxr_serialize_CREATE_Payload+0x6e>
 8013252:	2b02      	cmp	r3, #2
 8013254:	d1ea      	bne.n	801322c <uxr_serialize_CREATE_Payload+0x44>
 8013256:	68f1      	ldr	r1, [r6, #12]
 8013258:	4638      	mov	r0, r7
 801325a:	f006 fb8b 	bl	8019974 <ucdr_serialize_string>
 801325e:	4004      	ands	r4, r0
 8013260:	e7e4      	b.n	801322c <uxr_serialize_CREATE_Payload+0x44>
 8013262:	7a31      	ldrb	r1, [r6, #8]
 8013264:	4638      	mov	r0, r7
 8013266:	f7fb ff31 	bl	800f0cc <ucdr_serialize_uint8_t>
 801326a:	4605      	mov	r5, r0
 801326c:	b158      	cbz	r0, 8013286 <uxr_serialize_CREATE_Payload+0x9e>
 801326e:	7a33      	ldrb	r3, [r6, #8]
 8013270:	2b02      	cmp	r3, #2
 8013272:	d034      	beq.n	80132de <uxr_serialize_CREATE_Payload+0xf6>
 8013274:	2b03      	cmp	r3, #3
 8013276:	d106      	bne.n	8013286 <uxr_serialize_CREATE_Payload+0x9e>
 8013278:	68f2      	ldr	r2, [r6, #12]
 801327a:	f106 0110 	add.w	r1, r6, #16
 801327e:	4638      	mov	r0, r7
 8013280:	f006 fb4c 	bl	801991c <ucdr_serialize_sequence_uint8_t>
 8013284:	4605      	mov	r5, r0
 8013286:	2202      	movs	r2, #2
 8013288:	f506 7104 	add.w	r1, r6, #528	; 0x210
 801328c:	4638      	mov	r0, r7
 801328e:	f7fb fd79 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 8013292:	4028      	ands	r0, r5
 8013294:	4004      	ands	r4, r0
 8013296:	e7c9      	b.n	801322c <uxr_serialize_CREATE_Payload+0x44>
 8013298:	f106 0108 	add.w	r1, r6, #8
 801329c:	4638      	mov	r0, r7
 801329e:	f7ff f98d 	bl	80125bc <uxr_serialize_CLIENT_Representation>
 80132a2:	4004      	ands	r4, r0
 80132a4:	e7c2      	b.n	801322c <uxr_serialize_CREATE_Payload+0x44>
 80132a6:	f106 0108 	add.w	r1, r6, #8
 80132aa:	4638      	mov	r0, r7
 80132ac:	f7ff fa42 	bl	8012734 <uxr_serialize_AGENT_Representation>
 80132b0:	4004      	ands	r4, r0
 80132b2:	e7bb      	b.n	801322c <uxr_serialize_CREATE_Payload+0x44>
 80132b4:	7a31      	ldrb	r1, [r6, #8]
 80132b6:	4638      	mov	r0, r7
 80132b8:	f7fb ff08 	bl	800f0cc <ucdr_serialize_uint8_t>
 80132bc:	4605      	mov	r5, r0
 80132be:	b130      	cbz	r0, 80132ce <uxr_serialize_CREATE_Payload+0xe6>
 80132c0:	7a33      	ldrb	r3, [r6, #8]
 80132c2:	2b02      	cmp	r3, #2
 80132c4:	d011      	beq.n	80132ea <uxr_serialize_CREATE_Payload+0x102>
 80132c6:	2b03      	cmp	r3, #3
 80132c8:	d015      	beq.n	80132f6 <uxr_serialize_CREATE_Payload+0x10e>
 80132ca:	2b01      	cmp	r3, #1
 80132cc:	d00d      	beq.n	80132ea <uxr_serialize_CREATE_Payload+0x102>
 80132ce:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 80132d2:	4638      	mov	r0, r7
 80132d4:	f7fc fc36 	bl	800fb44 <ucdr_serialize_int16_t>
 80132d8:	4028      	ands	r0, r5
 80132da:	4004      	ands	r4, r0
 80132dc:	e7a6      	b.n	801322c <uxr_serialize_CREATE_Payload+0x44>
 80132de:	68f1      	ldr	r1, [r6, #12]
 80132e0:	4638      	mov	r0, r7
 80132e2:	f006 fb47 	bl	8019974 <ucdr_serialize_string>
 80132e6:	4605      	mov	r5, r0
 80132e8:	e7cd      	b.n	8013286 <uxr_serialize_CREATE_Payload+0x9e>
 80132ea:	68f1      	ldr	r1, [r6, #12]
 80132ec:	4638      	mov	r0, r7
 80132ee:	f006 fb41 	bl	8019974 <ucdr_serialize_string>
 80132f2:	4605      	mov	r5, r0
 80132f4:	e7eb      	b.n	80132ce <uxr_serialize_CREATE_Payload+0xe6>
 80132f6:	68f2      	ldr	r2, [r6, #12]
 80132f8:	f106 0110 	add.w	r1, r6, #16
 80132fc:	4638      	mov	r0, r7
 80132fe:	f006 fb0d 	bl	801991c <ucdr_serialize_sequence_uint8_t>
 8013302:	4605      	mov	r5, r0
 8013304:	e7e3      	b.n	80132ce <uxr_serialize_CREATE_Payload+0xe6>
 8013306:	bf00      	nop

08013308 <uxr_deserialize_GET_INFO_Payload>:
 8013308:	b570      	push	{r4, r5, r6, lr}
 801330a:	2202      	movs	r2, #2
 801330c:	4605      	mov	r5, r0
 801330e:	460e      	mov	r6, r1
 8013310:	f7fb fd9c 	bl	800ee4c <ucdr_deserialize_array_uint8_t>
 8013314:	2202      	movs	r2, #2
 8013316:	4604      	mov	r4, r0
 8013318:	4628      	mov	r0, r5
 801331a:	18b1      	adds	r1, r6, r2
 801331c:	f7fb fd96 	bl	800ee4c <ucdr_deserialize_array_uint8_t>
 8013320:	4603      	mov	r3, r0
 8013322:	1d31      	adds	r1, r6, #4
 8013324:	4628      	mov	r0, r5
 8013326:	401c      	ands	r4, r3
 8013328:	f7fc fa16 	bl	800f758 <ucdr_deserialize_uint32_t>
 801332c:	b2e4      	uxtb	r4, r4
 801332e:	4020      	ands	r0, r4
 8013330:	bd70      	pop	{r4, r5, r6, pc}
 8013332:	bf00      	nop

08013334 <uxr_serialize_DELETE_Payload>:
 8013334:	b570      	push	{r4, r5, r6, lr}
 8013336:	2202      	movs	r2, #2
 8013338:	4605      	mov	r5, r0
 801333a:	460e      	mov	r6, r1
 801333c:	f7fb fd22 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 8013340:	2202      	movs	r2, #2
 8013342:	4604      	mov	r4, r0
 8013344:	4628      	mov	r0, r5
 8013346:	18b1      	adds	r1, r6, r2
 8013348:	f7fb fd1c 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 801334c:	4020      	ands	r0, r4
 801334e:	b2c0      	uxtb	r0, r0
 8013350:	bd70      	pop	{r4, r5, r6, pc}
 8013352:	bf00      	nop

08013354 <uxr_deserialize_STATUS_AGENT_Payload>:
 8013354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013358:	460e      	mov	r6, r1
 801335a:	4605      	mov	r5, r0
 801335c:	f7fb fecc 	bl	800f0f8 <ucdr_deserialize_uint8_t>
 8013360:	4604      	mov	r4, r0
 8013362:	1c71      	adds	r1, r6, #1
 8013364:	4628      	mov	r0, r5
 8013366:	f7fb fec7 	bl	800f0f8 <ucdr_deserialize_uint8_t>
 801336a:	2204      	movs	r2, #4
 801336c:	4681      	mov	r9, r0
 801336e:	4628      	mov	r0, r5
 8013370:	18b1      	adds	r1, r6, r2
 8013372:	f7fb fd6b 	bl	800ee4c <ucdr_deserialize_array_uint8_t>
 8013376:	f106 0108 	add.w	r1, r6, #8
 801337a:	4680      	mov	r8, r0
 801337c:	2202      	movs	r2, #2
 801337e:	4628      	mov	r0, r5
 8013380:	f7fb fd64 	bl	800ee4c <ucdr_deserialize_array_uint8_t>
 8013384:	ea04 0309 	and.w	r3, r4, r9
 8013388:	4607      	mov	r7, r0
 801338a:	2202      	movs	r2, #2
 801338c:	b2db      	uxtb	r3, r3
 801338e:	f106 010a 	add.w	r1, r6, #10
 8013392:	4628      	mov	r0, r5
 8013394:	ea03 0408 	and.w	r4, r3, r8
 8013398:	f7fb fd58 	bl	800ee4c <ucdr_deserialize_array_uint8_t>
 801339c:	4603      	mov	r3, r0
 801339e:	4628      	mov	r0, r5
 80133a0:	403c      	ands	r4, r7
 80133a2:	f106 010c 	add.w	r1, r6, #12
 80133a6:	461d      	mov	r5, r3
 80133a8:	f7fb fe78 	bl	800f09c <ucdr_deserialize_bool>
 80133ac:	4025      	ands	r5, r4
 80133ae:	4028      	ands	r0, r5
 80133b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080133b4 <uxr_deserialize_STATUS_Payload>:
 80133b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133b8:	2202      	movs	r2, #2
 80133ba:	4606      	mov	r6, r0
 80133bc:	460f      	mov	r7, r1
 80133be:	f7fb fd45 	bl	800ee4c <ucdr_deserialize_array_uint8_t>
 80133c2:	2202      	movs	r2, #2
 80133c4:	4605      	mov	r5, r0
 80133c6:	4630      	mov	r0, r6
 80133c8:	18b9      	adds	r1, r7, r2
 80133ca:	f7fb fd3f 	bl	800ee4c <ucdr_deserialize_array_uint8_t>
 80133ce:	4680      	mov	r8, r0
 80133d0:	1d39      	adds	r1, r7, #4
 80133d2:	4630      	mov	r0, r6
 80133d4:	f7fb fe90 	bl	800f0f8 <ucdr_deserialize_uint8_t>
 80133d8:	ea05 0508 	and.w	r5, r5, r8
 80133dc:	4604      	mov	r4, r0
 80133de:	1d79      	adds	r1, r7, #5
 80133e0:	4630      	mov	r0, r6
 80133e2:	402c      	ands	r4, r5
 80133e4:	f7fb fe88 	bl	800f0f8 <ucdr_deserialize_uint8_t>
 80133e8:	4020      	ands	r0, r4
 80133ea:	b2c0      	uxtb	r0, r0
 80133ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080133f0 <uxr_serialize_INFO_Payload>:
 80133f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133f4:	2202      	movs	r2, #2
 80133f6:	460c      	mov	r4, r1
 80133f8:	4605      	mov	r5, r0
 80133fa:	f7fb fcc3 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 80133fe:	2202      	movs	r2, #2
 8013400:	4680      	mov	r8, r0
 8013402:	4628      	mov	r0, r5
 8013404:	18a1      	adds	r1, r4, r2
 8013406:	f7fb fcbd 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 801340a:	4607      	mov	r7, r0
 801340c:	7921      	ldrb	r1, [r4, #4]
 801340e:	4628      	mov	r0, r5
 8013410:	f7fb fe5c 	bl	800f0cc <ucdr_serialize_uint8_t>
 8013414:	ea08 0807 	and.w	r8, r8, r7
 8013418:	4606      	mov	r6, r0
 801341a:	7961      	ldrb	r1, [r4, #5]
 801341c:	4628      	mov	r0, r5
 801341e:	ea06 0608 	and.w	r6, r6, r8
 8013422:	f7fb fe53 	bl	800f0cc <ucdr_serialize_uint8_t>
 8013426:	7a21      	ldrb	r1, [r4, #8]
 8013428:	4030      	ands	r0, r6
 801342a:	b2c7      	uxtb	r7, r0
 801342c:	4628      	mov	r0, r5
 801342e:	f7fb fe1f 	bl	800f070 <ucdr_serialize_bool>
 8013432:	7a23      	ldrb	r3, [r4, #8]
 8013434:	4606      	mov	r6, r0
 8013436:	b96b      	cbnz	r3, 8013454 <uxr_serialize_INFO_Payload+0x64>
 8013438:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 801343c:	4628      	mov	r0, r5
 801343e:	f7fb fe17 	bl	800f070 <ucdr_serialize_bool>
 8013442:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 8013446:	4030      	ands	r0, r6
 8013448:	b2c6      	uxtb	r6, r0
 801344a:	b983      	cbnz	r3, 801346e <uxr_serialize_INFO_Payload+0x7e>
 801344c:	ea06 0007 	and.w	r0, r6, r7
 8013450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013454:	7b21      	ldrb	r1, [r4, #12]
 8013456:	4628      	mov	r0, r5
 8013458:	f7fb fe38 	bl	800f0cc <ucdr_serialize_uint8_t>
 801345c:	b188      	cbz	r0, 8013482 <uxr_serialize_INFO_Payload+0x92>
 801345e:	f104 010c 	add.w	r1, r4, #12
 8013462:	4628      	mov	r0, r5
 8013464:	f7ff f9d8 	bl	8012818 <uxr_serialize_ObjectVariant.part.0>
 8013468:	4030      	ands	r0, r6
 801346a:	b2c6      	uxtb	r6, r0
 801346c:	e7e4      	b.n	8013438 <uxr_serialize_INFO_Payload+0x48>
 801346e:	f504 7108 	add.w	r1, r4, #544	; 0x220
 8013472:	4628      	mov	r0, r5
 8013474:	f7ff fdb8 	bl	8012fe8 <uxr_serialize_ActivityInfoVariant>
 8013478:	4006      	ands	r6, r0
 801347a:	ea06 0007 	and.w	r0, r6, r7
 801347e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013482:	4606      	mov	r6, r0
 8013484:	e7d8      	b.n	8013438 <uxr_serialize_INFO_Payload+0x48>
 8013486:	bf00      	nop

08013488 <uxr_serialize_READ_DATA_Payload>:
 8013488:	b570      	push	{r4, r5, r6, lr}
 801348a:	2202      	movs	r2, #2
 801348c:	4605      	mov	r5, r0
 801348e:	460e      	mov	r6, r1
 8013490:	f7fb fc78 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 8013494:	2202      	movs	r2, #2
 8013496:	4604      	mov	r4, r0
 8013498:	4628      	mov	r0, r5
 801349a:	18b1      	adds	r1, r6, r2
 801349c:	f7fb fc72 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 80134a0:	4603      	mov	r3, r0
 80134a2:	1d31      	adds	r1, r6, #4
 80134a4:	4628      	mov	r0, r5
 80134a6:	401c      	ands	r4, r3
 80134a8:	f7ff fe5e 	bl	8013168 <uxr_serialize_ReadSpecification>
 80134ac:	b2e4      	uxtb	r4, r4
 80134ae:	4020      	ands	r0, r4
 80134b0:	bd70      	pop	{r4, r5, r6, pc}
 80134b2:	bf00      	nop

080134b4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80134b4:	b570      	push	{r4, r5, r6, lr}
 80134b6:	2202      	movs	r2, #2
 80134b8:	4605      	mov	r5, r0
 80134ba:	460e      	mov	r6, r1
 80134bc:	f7fb fc62 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 80134c0:	2202      	movs	r2, #2
 80134c2:	4604      	mov	r4, r0
 80134c4:	4628      	mov	r0, r5
 80134c6:	18b1      	adds	r1, r6, r2
 80134c8:	f7fb fc5c 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 80134cc:	4020      	ands	r0, r4
 80134ce:	b2c0      	uxtb	r0, r0
 80134d0:	bd70      	pop	{r4, r5, r6, pc}
 80134d2:	bf00      	nop

080134d4 <uxr_serialize_ACKNACK_Payload>:
 80134d4:	b570      	push	{r4, r5, r6, lr}
 80134d6:	460c      	mov	r4, r1
 80134d8:	4605      	mov	r5, r0
 80134da:	460e      	mov	r6, r1
 80134dc:	f834 1b02 	ldrh.w	r1, [r4], #2
 80134e0:	f7fb fe20 	bl	800f124 <ucdr_serialize_uint16_t>
 80134e4:	2202      	movs	r2, #2
 80134e6:	4621      	mov	r1, r4
 80134e8:	4604      	mov	r4, r0
 80134ea:	4628      	mov	r0, r5
 80134ec:	f7fb fc4a 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 80134f0:	4603      	mov	r3, r0
 80134f2:	7931      	ldrb	r1, [r6, #4]
 80134f4:	4628      	mov	r0, r5
 80134f6:	401c      	ands	r4, r3
 80134f8:	f7fb fde8 	bl	800f0cc <ucdr_serialize_uint8_t>
 80134fc:	b2e4      	uxtb	r4, r4
 80134fe:	4020      	ands	r0, r4
 8013500:	bd70      	pop	{r4, r5, r6, pc}
 8013502:	bf00      	nop

08013504 <uxr_deserialize_ACKNACK_Payload>:
 8013504:	b570      	push	{r4, r5, r6, lr}
 8013506:	460e      	mov	r6, r1
 8013508:	4605      	mov	r5, r0
 801350a:	f7fb ff0b 	bl	800f324 <ucdr_deserialize_uint16_t>
 801350e:	2202      	movs	r2, #2
 8013510:	4604      	mov	r4, r0
 8013512:	4628      	mov	r0, r5
 8013514:	18b1      	adds	r1, r6, r2
 8013516:	f7fb fc99 	bl	800ee4c <ucdr_deserialize_array_uint8_t>
 801351a:	4603      	mov	r3, r0
 801351c:	1d31      	adds	r1, r6, #4
 801351e:	4628      	mov	r0, r5
 8013520:	401c      	ands	r4, r3
 8013522:	f7fb fde9 	bl	800f0f8 <ucdr_deserialize_uint8_t>
 8013526:	b2e4      	uxtb	r4, r4
 8013528:	4020      	ands	r0, r4
 801352a:	bd70      	pop	{r4, r5, r6, pc}

0801352c <uxr_serialize_HEARTBEAT_Payload>:
 801352c:	b570      	push	{r4, r5, r6, lr}
 801352e:	460d      	mov	r5, r1
 8013530:	4606      	mov	r6, r0
 8013532:	8809      	ldrh	r1, [r1, #0]
 8013534:	f7fb fdf6 	bl	800f124 <ucdr_serialize_uint16_t>
 8013538:	8869      	ldrh	r1, [r5, #2]
 801353a:	4604      	mov	r4, r0
 801353c:	4630      	mov	r0, r6
 801353e:	f7fb fdf1 	bl	800f124 <ucdr_serialize_uint16_t>
 8013542:	4603      	mov	r3, r0
 8013544:	7929      	ldrb	r1, [r5, #4]
 8013546:	4630      	mov	r0, r6
 8013548:	401c      	ands	r4, r3
 801354a:	f7fb fdbf 	bl	800f0cc <ucdr_serialize_uint8_t>
 801354e:	b2e4      	uxtb	r4, r4
 8013550:	4020      	ands	r0, r4
 8013552:	bd70      	pop	{r4, r5, r6, pc}

08013554 <uxr_deserialize_HEARTBEAT_Payload>:
 8013554:	b570      	push	{r4, r5, r6, lr}
 8013556:	460e      	mov	r6, r1
 8013558:	4605      	mov	r5, r0
 801355a:	f7fb fee3 	bl	800f324 <ucdr_deserialize_uint16_t>
 801355e:	4604      	mov	r4, r0
 8013560:	1cb1      	adds	r1, r6, #2
 8013562:	4628      	mov	r0, r5
 8013564:	f7fb fede 	bl	800f324 <ucdr_deserialize_uint16_t>
 8013568:	4603      	mov	r3, r0
 801356a:	1d31      	adds	r1, r6, #4
 801356c:	4628      	mov	r0, r5
 801356e:	401c      	ands	r4, r3
 8013570:	f7fb fdc2 	bl	800f0f8 <ucdr_deserialize_uint8_t>
 8013574:	b2e4      	uxtb	r4, r4
 8013576:	4020      	ands	r0, r4
 8013578:	bd70      	pop	{r4, r5, r6, pc}
 801357a:	bf00      	nop

0801357c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801357c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013580:	460e      	mov	r6, r1
 8013582:	4605      	mov	r5, r0
 8013584:	f7fc fd60 	bl	8010048 <ucdr_deserialize_int32_t>
 8013588:	4607      	mov	r7, r0
 801358a:	1d31      	adds	r1, r6, #4
 801358c:	4628      	mov	r0, r5
 801358e:	f7fc f8e3 	bl	800f758 <ucdr_deserialize_uint32_t>
 8013592:	4680      	mov	r8, r0
 8013594:	f106 0108 	add.w	r1, r6, #8
 8013598:	4628      	mov	r0, r5
 801359a:	f7fc fd55 	bl	8010048 <ucdr_deserialize_int32_t>
 801359e:	ea07 0708 	and.w	r7, r7, r8
 80135a2:	4604      	mov	r4, r0
 80135a4:	f106 010c 	add.w	r1, r6, #12
 80135a8:	4628      	mov	r0, r5
 80135aa:	403c      	ands	r4, r7
 80135ac:	f7fc f8d4 	bl	800f758 <ucdr_deserialize_uint32_t>
 80135b0:	f106 0110 	add.w	r1, r6, #16
 80135b4:	4004      	ands	r4, r0
 80135b6:	4628      	mov	r0, r5
 80135b8:	f7fc fd46 	bl	8010048 <ucdr_deserialize_int32_t>
 80135bc:	4603      	mov	r3, r0
 80135be:	b2e4      	uxtb	r4, r4
 80135c0:	4628      	mov	r0, r5
 80135c2:	461d      	mov	r5, r3
 80135c4:	f106 0114 	add.w	r1, r6, #20
 80135c8:	f7fc f8c6 	bl	800f758 <ucdr_deserialize_uint32_t>
 80135cc:	402c      	ands	r4, r5
 80135ce:	4020      	ands	r0, r4
 80135d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080135d4 <uxr_serialize_SampleIdentity>:
 80135d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135d8:	4604      	mov	r4, r0
 80135da:	460d      	mov	r5, r1
 80135dc:	220c      	movs	r2, #12
 80135de:	f7fb fbd1 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 80135e2:	2203      	movs	r2, #3
 80135e4:	f105 010c 	add.w	r1, r5, #12
 80135e8:	4607      	mov	r7, r0
 80135ea:	4620      	mov	r0, r4
 80135ec:	f7fb fbca 	bl	800ed84 <ucdr_serialize_array_uint8_t>
 80135f0:	7be9      	ldrb	r1, [r5, #15]
 80135f2:	4680      	mov	r8, r0
 80135f4:	4620      	mov	r0, r4
 80135f6:	f7fb fd69 	bl	800f0cc <ucdr_serialize_uint8_t>
 80135fa:	6929      	ldr	r1, [r5, #16]
 80135fc:	4606      	mov	r6, r0
 80135fe:	4620      	mov	r0, r4
 8013600:	f7fc fc8a 	bl	800ff18 <ucdr_serialize_int32_t>
 8013604:	ea07 0708 	and.w	r7, r7, r8
 8013608:	4603      	mov	r3, r0
 801360a:	4620      	mov	r0, r4
 801360c:	403e      	ands	r6, r7
 801360e:	6969      	ldr	r1, [r5, #20]
 8013610:	461c      	mov	r4, r3
 8013612:	f7fb ff71 	bl	800f4f8 <ucdr_serialize_uint32_t>
 8013616:	4034      	ands	r4, r6
 8013618:	4020      	ands	r0, r4
 801361a:	b2c0      	uxtb	r0, r0
 801361c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013620 <uxr_deserialize_SampleIdentity>:
 8013620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013624:	4604      	mov	r4, r0
 8013626:	460d      	mov	r5, r1
 8013628:	220c      	movs	r2, #12
 801362a:	f7fb fc0f 	bl	800ee4c <ucdr_deserialize_array_uint8_t>
 801362e:	2203      	movs	r2, #3
 8013630:	f105 010c 	add.w	r1, r5, #12
 8013634:	4607      	mov	r7, r0
 8013636:	4620      	mov	r0, r4
 8013638:	f7fb fc08 	bl	800ee4c <ucdr_deserialize_array_uint8_t>
 801363c:	f105 010f 	add.w	r1, r5, #15
 8013640:	4680      	mov	r8, r0
 8013642:	4620      	mov	r0, r4
 8013644:	f7fb fd58 	bl	800f0f8 <ucdr_deserialize_uint8_t>
 8013648:	f105 0110 	add.w	r1, r5, #16
 801364c:	4606      	mov	r6, r0
 801364e:	4620      	mov	r0, r4
 8013650:	f7fc fcfa 	bl	8010048 <ucdr_deserialize_int32_t>
 8013654:	ea07 0708 	and.w	r7, r7, r8
 8013658:	4603      	mov	r3, r0
 801365a:	4620      	mov	r0, r4
 801365c:	403e      	ands	r6, r7
 801365e:	f105 0114 	add.w	r1, r5, #20
 8013662:	461c      	mov	r4, r3
 8013664:	f7fc f878 	bl	800f758 <ucdr_deserialize_uint32_t>
 8013668:	4034      	ands	r4, r6
 801366a:	4020      	ands	r0, r4
 801366c:	b2c0      	uxtb	r0, r0
 801366e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013672:	bf00      	nop

08013674 <racs_services__srv__Control_Event__get_type_description.part.0>:
 8013674:	b510      	push	{r4, lr}
 8013676:	2000      	movs	r0, #0
 8013678:	4c13      	ldr	r4, [pc, #76]	; (80136c8 <racs_services__srv__Control_Event__get_type_description.part.0+0x54>)
 801367a:	f006 f8f1 	bl	8019860 <builtin_interfaces__msg__Time__get_type_description>
 801367e:	300c      	adds	r0, #12
 8013680:	4b12      	ldr	r3, [pc, #72]	; (80136cc <racs_services__srv__Control_Event__get_type_description.part.0+0x58>)
 8013682:	c807      	ldmia	r0, {r0, r1, r2}
 8013684:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013688:	7823      	ldrb	r3, [r4, #0]
 801368a:	b90b      	cbnz	r3, 8013690 <racs_services__srv__Control_Event__get_type_description.part.0+0x1c>
 801368c:	2301      	movs	r3, #1
 801368e:	7023      	strb	r3, [r4, #0]
 8013690:	4a0f      	ldr	r2, [pc, #60]	; (80136d0 <racs_services__srv__Control_Event__get_type_description.part.0+0x5c>)
 8013692:	4b10      	ldr	r3, [pc, #64]	; (80136d4 <racs_services__srv__Control_Event__get_type_description.part.0+0x60>)
 8013694:	4c10      	ldr	r4, [pc, #64]	; (80136d8 <racs_services__srv__Control_Event__get_type_description.part.0+0x64>)
 8013696:	ca07      	ldmia	r2, {r0, r1, r2}
 8013698:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801369c:	7823      	ldrb	r3, [r4, #0]
 801369e:	b90b      	cbnz	r3, 80136a4 <racs_services__srv__Control_Event__get_type_description.part.0+0x30>
 80136a0:	2301      	movs	r3, #1
 80136a2:	7023      	strb	r3, [r4, #0]
 80136a4:	4b0d      	ldr	r3, [pc, #52]	; (80136dc <racs_services__srv__Control_Event__get_type_description.part.0+0x68>)
 80136a6:	4c0e      	ldr	r4, [pc, #56]	; (80136e0 <racs_services__srv__Control_Event__get_type_description.part.0+0x6c>)
 80136a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80136ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80136b0:	2000      	movs	r0, #0
 80136b2:	3418      	adds	r4, #24
 80136b4:	f006 f874 	bl	80197a0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 80136b8:	300c      	adds	r0, #12
 80136ba:	4b0a      	ldr	r3, [pc, #40]	; (80136e4 <racs_services__srv__Control_Event__get_type_description.part.0+0x70>)
 80136bc:	c807      	ldmia	r0, {r0, r1, r2}
 80136be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80136c2:	2201      	movs	r2, #1
 80136c4:	701a      	strb	r2, [r3, #0]
 80136c6:	bd10      	pop	{r4, pc}
 80136c8:	200103d8 	.word	0x200103d8
 80136cc:	20000dd0 	.word	0x20000dd0
 80136d0:	0801e72c 	.word	0x0801e72c
 80136d4:	20000de8 	.word	0x20000de8
 80136d8:	200103d6 	.word	0x200103d6
 80136dc:	0801e708 	.word	0x0801e708
 80136e0:	20000e00 	.word	0x20000e00
 80136e4:	200103d5 	.word	0x200103d5

080136e8 <racs_services__srv__Control__get_type_hash>:
 80136e8:	4800      	ldr	r0, [pc, #0]	; (80136ec <racs_services__srv__Control__get_type_hash+0x4>)
 80136ea:	4770      	bx	lr
 80136ec:	20000ca0 	.word	0x20000ca0

080136f0 <racs_services__srv__Control_Request__get_type_hash>:
 80136f0:	4800      	ldr	r0, [pc, #0]	; (80136f4 <racs_services__srv__Control_Request__get_type_hash+0x4>)
 80136f2:	4770      	bx	lr
 80136f4:	20000c7c 	.word	0x20000c7c

080136f8 <racs_services__srv__Control_Response__get_type_hash>:
 80136f8:	4800      	ldr	r0, [pc, #0]	; (80136fc <racs_services__srv__Control_Response__get_type_hash+0x4>)
 80136fa:	4770      	bx	lr
 80136fc:	20000c58 	.word	0x20000c58

08013700 <racs_services__srv__Control_Event__get_type_hash>:
 8013700:	4800      	ldr	r0, [pc, #0]	; (8013704 <racs_services__srv__Control_Event__get_type_hash+0x4>)
 8013702:	4770      	bx	lr
 8013704:	20000c34 	.word	0x20000c34

08013708 <racs_services__srv__Control__get_type_description>:
 8013708:	b538      	push	{r3, r4, r5, lr}
 801370a:	4d1c      	ldr	r5, [pc, #112]	; (801377c <racs_services__srv__Control__get_type_description+0x74>)
 801370c:	7828      	ldrb	r0, [r5, #0]
 801370e:	b108      	cbz	r0, 8013714 <racs_services__srv__Control__get_type_description+0xc>
 8013710:	481b      	ldr	r0, [pc, #108]	; (8013780 <racs_services__srv__Control__get_type_description+0x78>)
 8013712:	bd38      	pop	{r3, r4, r5, pc}
 8013714:	f006 f8a4 	bl	8019860 <builtin_interfaces__msg__Time__get_type_description>
 8013718:	300c      	adds	r0, #12
 801371a:	4b1a      	ldr	r3, [pc, #104]	; (8013784 <racs_services__srv__Control__get_type_description+0x7c>)
 801371c:	c807      	ldmia	r0, {r0, r1, r2}
 801371e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013722:	4b19      	ldr	r3, [pc, #100]	; (8013788 <racs_services__srv__Control__get_type_description+0x80>)
 8013724:	781b      	ldrb	r3, [r3, #0]
 8013726:	b32b      	cbz	r3, 8013774 <racs_services__srv__Control__get_type_description+0x6c>
 8013728:	4a18      	ldr	r2, [pc, #96]	; (801378c <racs_services__srv__Control__get_type_description+0x84>)
 801372a:	4b19      	ldr	r3, [pc, #100]	; (8013790 <racs_services__srv__Control__get_type_description+0x88>)
 801372c:	4c19      	ldr	r4, [pc, #100]	; (8013794 <racs_services__srv__Control__get_type_description+0x8c>)
 801372e:	ca07      	ldmia	r2, {r0, r1, r2}
 8013730:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013734:	7823      	ldrb	r3, [r4, #0]
 8013736:	b90b      	cbnz	r3, 801373c <racs_services__srv__Control__get_type_description+0x34>
 8013738:	2301      	movs	r3, #1
 801373a:	7023      	strb	r3, [r4, #0]
 801373c:	4a16      	ldr	r2, [pc, #88]	; (8013798 <racs_services__srv__Control__get_type_description+0x90>)
 801373e:	4b17      	ldr	r3, [pc, #92]	; (801379c <racs_services__srv__Control__get_type_description+0x94>)
 8013740:	4c17      	ldr	r4, [pc, #92]	; (80137a0 <racs_services__srv__Control__get_type_description+0x98>)
 8013742:	ca07      	ldmia	r2, {r0, r1, r2}
 8013744:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013748:	7823      	ldrb	r3, [r4, #0]
 801374a:	b90b      	cbnz	r3, 8013750 <racs_services__srv__Control__get_type_description+0x48>
 801374c:	2301      	movs	r3, #1
 801374e:	7023      	strb	r3, [r4, #0]
 8013750:	4b14      	ldr	r3, [pc, #80]	; (80137a4 <racs_services__srv__Control__get_type_description+0x9c>)
 8013752:	4c15      	ldr	r4, [pc, #84]	; (80137a8 <racs_services__srv__Control__get_type_description+0xa0>)
 8013754:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013758:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801375c:	2000      	movs	r0, #0
 801375e:	3418      	adds	r4, #24
 8013760:	f006 f81e 	bl	80197a0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8013764:	300c      	adds	r0, #12
 8013766:	2301      	movs	r3, #1
 8013768:	c807      	ldmia	r0, {r0, r1, r2}
 801376a:	702b      	strb	r3, [r5, #0]
 801376c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013770:	4803      	ldr	r0, [pc, #12]	; (8013780 <racs_services__srv__Control__get_type_description+0x78>)
 8013772:	bd38      	pop	{r3, r4, r5, pc}
 8013774:	f7ff ff7e 	bl	8013674 <racs_services__srv__Control_Event__get_type_description.part.0>
 8013778:	e7d6      	b.n	8013728 <racs_services__srv__Control__get_type_description+0x20>
 801377a:	bf00      	nop
 801377c:	200103d9 	.word	0x200103d9
 8013780:	0801e744 	.word	0x0801e744
 8013784:	200010f8 	.word	0x200010f8
 8013788:	200103d5 	.word	0x200103d5
 801378c:	0801e6e4 	.word	0x0801e6e4
 8013790:	20001110 	.word	0x20001110
 8013794:	200103d8 	.word	0x200103d8
 8013798:	0801e72c 	.word	0x0801e72c
 801379c:	20001128 	.word	0x20001128
 80137a0:	200103d6 	.word	0x200103d6
 80137a4:	0801e708 	.word	0x0801e708
 80137a8:	20001140 	.word	0x20001140

080137ac <racs_services__srv__Control_Request__get_type_description>:
 80137ac:	4b03      	ldr	r3, [pc, #12]	; (80137bc <racs_services__srv__Control_Request__get_type_description+0x10>)
 80137ae:	781a      	ldrb	r2, [r3, #0]
 80137b0:	b90a      	cbnz	r2, 80137b6 <racs_services__srv__Control_Request__get_type_description+0xa>
 80137b2:	2201      	movs	r2, #1
 80137b4:	701a      	strb	r2, [r3, #0]
 80137b6:	4802      	ldr	r0, [pc, #8]	; (80137c0 <racs_services__srv__Control_Request__get_type_description+0x14>)
 80137b8:	4770      	bx	lr
 80137ba:	bf00      	nop
 80137bc:	200103d8 	.word	0x200103d8
 80137c0:	0801e720 	.word	0x0801e720

080137c4 <racs_services__srv__Control_Response__get_type_description>:
 80137c4:	4b03      	ldr	r3, [pc, #12]	; (80137d4 <racs_services__srv__Control_Response__get_type_description+0x10>)
 80137c6:	781a      	ldrb	r2, [r3, #0]
 80137c8:	b90a      	cbnz	r2, 80137ce <racs_services__srv__Control_Response__get_type_description+0xa>
 80137ca:	2201      	movs	r2, #1
 80137cc:	701a      	strb	r2, [r3, #0]
 80137ce:	4802      	ldr	r0, [pc, #8]	; (80137d8 <racs_services__srv__Control_Response__get_type_description+0x14>)
 80137d0:	4770      	bx	lr
 80137d2:	bf00      	nop
 80137d4:	200103d6 	.word	0x200103d6
 80137d8:	0801e6fc 	.word	0x0801e6fc

080137dc <racs_services__srv__Control_Event__get_type_description>:
 80137dc:	b508      	push	{r3, lr}
 80137de:	4b04      	ldr	r3, [pc, #16]	; (80137f0 <racs_services__srv__Control_Event__get_type_description+0x14>)
 80137e0:	781b      	ldrb	r3, [r3, #0]
 80137e2:	b10b      	cbz	r3, 80137e8 <racs_services__srv__Control_Event__get_type_description+0xc>
 80137e4:	4803      	ldr	r0, [pc, #12]	; (80137f4 <racs_services__srv__Control_Event__get_type_description+0x18>)
 80137e6:	bd08      	pop	{r3, pc}
 80137e8:	f7ff ff44 	bl	8013674 <racs_services__srv__Control_Event__get_type_description.part.0>
 80137ec:	4801      	ldr	r0, [pc, #4]	; (80137f4 <racs_services__srv__Control_Event__get_type_description+0x18>)
 80137ee:	bd08      	pop	{r3, pc}
 80137f0:	200103d5 	.word	0x200103d5
 80137f4:	0801e6d8 	.word	0x0801e6d8

080137f8 <racs_services__srv__Control__get_type_description_sources>:
 80137f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137fc:	4b2c      	ldr	r3, [pc, #176]	; (80138b0 <racs_services__srv__Control__get_type_description_sources+0xb8>)
 80137fe:	f893 9000 	ldrb.w	r9, [r3]
 8013802:	f1b9 0f00 	cmp.w	r9, #0
 8013806:	d002      	beq.n	801380e <racs_services__srv__Control__get_type_description_sources+0x16>
 8013808:	482a      	ldr	r0, [pc, #168]	; (80138b4 <racs_services__srv__Control__get_type_description_sources+0xbc>)
 801380a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801380e:	4d2a      	ldr	r5, [pc, #168]	; (80138b8 <racs_services__srv__Control__get_type_description_sources+0xc0>)
 8013810:	4c2a      	ldr	r4, [pc, #168]	; (80138bc <racs_services__srv__Control__get_type_description_sources+0xc4>)
 8013812:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 80138c4 <racs_services__srv__Control__get_type_description_sources+0xcc>
 8013816:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80138c8 <racs_services__srv__Control__get_type_description_sources+0xd0>
 801381a:	4e29      	ldr	r6, [pc, #164]	; (80138c0 <racs_services__srv__Control__get_type_description_sources+0xc8>)
 801381c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801381e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013824:	682b      	ldr	r3, [r5, #0]
 8013826:	4625      	mov	r5, r4
 8013828:	4648      	mov	r0, r9
 801382a:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 801382e:	f845 3b04 	str.w	r3, [r5], #4
 8013832:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 8013836:	f006 f81f 	bl	8019878 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 801383a:	4684      	mov	ip, r0
 801383c:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 8013840:	3494      	adds	r4, #148	; 0x94
 8013842:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013846:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013848:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801384c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801384e:	f8dc 3000 	ldr.w	r3, [ip]
 8013852:	602b      	str	r3, [r5, #0]
 8013854:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8013858:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 801385c:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8013860:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8013864:	f8db 3000 	ldr.w	r3, [fp]
 8013868:	f8ca 3000 	str.w	r3, [sl]
 801386c:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8013870:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013872:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8013876:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013878:	f8d8 3000 	ldr.w	r3, [r8]
 801387c:	603b      	str	r3, [r7, #0]
 801387e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013880:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013884:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013886:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801388a:	6833      	ldr	r3, [r6, #0]
 801388c:	4648      	mov	r0, r9
 801388e:	f8ce 3000 	str.w	r3, [lr]
 8013892:	f005 ff9d 	bl	80197d0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 8013896:	2301      	movs	r3, #1
 8013898:	4a05      	ldr	r2, [pc, #20]	; (80138b0 <racs_services__srv__Control__get_type_description_sources+0xb8>)
 801389a:	4605      	mov	r5, r0
 801389c:	7013      	strb	r3, [r2, #0]
 801389e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80138a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80138a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80138a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80138a6:	682b      	ldr	r3, [r5, #0]
 80138a8:	4802      	ldr	r0, [pc, #8]	; (80138b4 <racs_services__srv__Control__get_type_description_sources+0xbc>)
 80138aa:	6023      	str	r3, [r4, #0]
 80138ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138b0:	200103d4 	.word	0x200103d4
 80138b4:	0801e81c 	.word	0x0801e81c
 80138b8:	0801e7d4 	.word	0x0801e7d4
 80138bc:	20010490 	.word	0x20010490
 80138c0:	0801e78c 	.word	0x0801e78c
 80138c4:	0801e768 	.word	0x0801e768
 80138c8:	0801e7b0 	.word	0x0801e7b0

080138cc <racs_services__srv__Control_Request__get_type_description_sources>:
 80138cc:	4b09      	ldr	r3, [pc, #36]	; (80138f4 <racs_services__srv__Control_Request__get_type_description_sources+0x28>)
 80138ce:	781a      	ldrb	r2, [r3, #0]
 80138d0:	b96a      	cbnz	r2, 80138ee <racs_services__srv__Control_Request__get_type_description_sources+0x22>
 80138d2:	2201      	movs	r2, #1
 80138d4:	b430      	push	{r4, r5}
 80138d6:	4d08      	ldr	r5, [pc, #32]	; (80138f8 <racs_services__srv__Control_Request__get_type_description_sources+0x2c>)
 80138d8:	4c08      	ldr	r4, [pc, #32]	; (80138fc <racs_services__srv__Control_Request__get_type_description_sources+0x30>)
 80138da:	701a      	strb	r2, [r3, #0]
 80138dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80138de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80138e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80138e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80138e4:	682b      	ldr	r3, [r5, #0]
 80138e6:	4806      	ldr	r0, [pc, #24]	; (8013900 <racs_services__srv__Control_Request__get_type_description_sources+0x34>)
 80138e8:	6023      	str	r3, [r4, #0]
 80138ea:	bc30      	pop	{r4, r5}
 80138ec:	4770      	bx	lr
 80138ee:	4804      	ldr	r0, [pc, #16]	; (8013900 <racs_services__srv__Control_Request__get_type_description_sources+0x34>)
 80138f0:	4770      	bx	lr
 80138f2:	bf00      	nop
 80138f4:	200103db 	.word	0x200103db
 80138f8:	0801e7b0 	.word	0x0801e7b0
 80138fc:	2001058c 	.word	0x2001058c
 8013900:	0801e810 	.word	0x0801e810

08013904 <racs_services__srv__Control_Response__get_type_description_sources>:
 8013904:	4b09      	ldr	r3, [pc, #36]	; (801392c <racs_services__srv__Control_Response__get_type_description_sources+0x28>)
 8013906:	781a      	ldrb	r2, [r3, #0]
 8013908:	b96a      	cbnz	r2, 8013926 <racs_services__srv__Control_Response__get_type_description_sources+0x22>
 801390a:	2201      	movs	r2, #1
 801390c:	b430      	push	{r4, r5}
 801390e:	4d08      	ldr	r5, [pc, #32]	; (8013930 <racs_services__srv__Control_Response__get_type_description_sources+0x2c>)
 8013910:	4c08      	ldr	r4, [pc, #32]	; (8013934 <racs_services__srv__Control_Response__get_type_description_sources+0x30>)
 8013912:	701a      	strb	r2, [r3, #0]
 8013914:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801391a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801391c:	682b      	ldr	r3, [r5, #0]
 801391e:	4806      	ldr	r0, [pc, #24]	; (8013938 <racs_services__srv__Control_Response__get_type_description_sources+0x34>)
 8013920:	6023      	str	r3, [r4, #0]
 8013922:	bc30      	pop	{r4, r5}
 8013924:	4770      	bx	lr
 8013926:	4804      	ldr	r0, [pc, #16]	; (8013938 <racs_services__srv__Control_Response__get_type_description_sources+0x34>)
 8013928:	4770      	bx	lr
 801392a:	bf00      	nop
 801392c:	200103da 	.word	0x200103da
 8013930:	0801e78c 	.word	0x0801e78c
 8013934:	20010568 	.word	0x20010568
 8013938:	0801e804 	.word	0x0801e804

0801393c <racs_services__srv__Control_Event__get_type_description_sources>:
 801393c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013940:	4e27      	ldr	r6, [pc, #156]	; (80139e0 <racs_services__srv__Control_Event__get_type_description_sources+0xa4>)
 8013942:	f896 8000 	ldrb.w	r8, [r6]
 8013946:	f1b8 0f00 	cmp.w	r8, #0
 801394a:	d002      	beq.n	8013952 <racs_services__srv__Control_Event__get_type_description_sources+0x16>
 801394c:	4825      	ldr	r0, [pc, #148]	; (80139e4 <racs_services__srv__Control_Event__get_type_description_sources+0xa8>)
 801394e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013952:	4d25      	ldr	r5, [pc, #148]	; (80139e8 <racs_services__srv__Control_Event__get_type_description_sources+0xac>)
 8013954:	4c25      	ldr	r4, [pc, #148]	; (80139ec <racs_services__srv__Control_Event__get_type_description_sources+0xb0>)
 8013956:	f8df a09c 	ldr.w	sl, [pc, #156]	; 80139f4 <racs_services__srv__Control_Event__get_type_description_sources+0xb8>
 801395a:	4f25      	ldr	r7, [pc, #148]	; (80139f0 <racs_services__srv__Control_Event__get_type_description_sources+0xb4>)
 801395c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801395e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013964:	682b      	ldr	r3, [r5, #0]
 8013966:	4625      	mov	r5, r4
 8013968:	4640      	mov	r0, r8
 801396a:	f104 0928 	add.w	r9, r4, #40	; 0x28
 801396e:	f845 3b04 	str.w	r3, [r5], #4
 8013972:	f005 ff81 	bl	8019878 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8013976:	4684      	mov	ip, r0
 8013978:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 801397c:	3470      	adds	r4, #112	; 0x70
 801397e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013984:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013988:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801398a:	f8dc 3000 	ldr.w	r3, [ip]
 801398e:	602b      	str	r3, [r5, #0]
 8013990:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8013994:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8013998:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 801399c:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 80139a0:	f8da 3000 	ldr.w	r3, [sl]
 80139a4:	f8c9 3000 	str.w	r3, [r9]
 80139a8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80139aa:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80139ae:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80139b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80139b4:	683b      	ldr	r3, [r7, #0]
 80139b6:	4640      	mov	r0, r8
 80139b8:	f8ce 3000 	str.w	r3, [lr]
 80139bc:	f005 ff08 	bl	80197d0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 80139c0:	2301      	movs	r3, #1
 80139c2:	4684      	mov	ip, r0
 80139c4:	7033      	strb	r3, [r6, #0]
 80139c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80139ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80139cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80139d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80139d2:	f8dc 3000 	ldr.w	r3, [ip]
 80139d6:	4803      	ldr	r0, [pc, #12]	; (80139e4 <racs_services__srv__Control_Event__get_type_description_sources+0xa8>)
 80139d8:	6023      	str	r3, [r4, #0]
 80139da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139de:	bf00      	nop
 80139e0:	200103d7 	.word	0x200103d7
 80139e4:	0801e7f8 	.word	0x0801e7f8
 80139e8:	0801e768 	.word	0x0801e768
 80139ec:	200103dc 	.word	0x200103dc
 80139f0:	0801e78c 	.word	0x0801e78c
 80139f4:	0801e7b0 	.word	0x0801e7b0

080139f8 <racs_services__srv__Control_Event__fini.part.0>:
 80139f8:	b510      	push	{r4, lr}
 80139fa:	b086      	sub	sp, #24
 80139fc:	4604      	mov	r4, r0
 80139fe:	f005 ff25 	bl	801984c <service_msgs__msg__ServiceEventInfo__fini>
 8013a02:	a801      	add	r0, sp, #4
 8013a04:	f7fa f912 	bl	800dc2c <rcutils_get_default_allocator>
 8013a08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8013a0a:	b130      	cbz	r0, 8013a1a <racs_services__srv__Control_Event__fini.part.0+0x22>
 8013a0c:	9b02      	ldr	r3, [sp, #8]
 8013a0e:	9905      	ldr	r1, [sp, #20]
 8013a10:	4798      	blx	r3
 8013a12:	2300      	movs	r3, #0
 8013a14:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8013a18:	6323      	str	r3, [r4, #48]	; 0x30
 8013a1a:	a801      	add	r0, sp, #4
 8013a1c:	f7fa f906 	bl	800dc2c <rcutils_get_default_allocator>
 8013a20:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8013a22:	b130      	cbz	r0, 8013a32 <racs_services__srv__Control_Event__fini.part.0+0x3a>
 8013a24:	9b02      	ldr	r3, [sp, #8]
 8013a26:	9905      	ldr	r1, [sp, #20]
 8013a28:	4798      	blx	r3
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8013a30:	63e3      	str	r3, [r4, #60]	; 0x3c
 8013a32:	b006      	add	sp, #24
 8013a34:	bd10      	pop	{r4, pc}
 8013a36:	bf00      	nop

08013a38 <racs_services__srv__Control_Request__init>:
 8013a38:	3800      	subs	r0, #0
 8013a3a:	bf18      	it	ne
 8013a3c:	2001      	movne	r0, #1
 8013a3e:	4770      	bx	lr

08013a40 <racs_services__srv__Control_Request__fini>:
 8013a40:	4770      	bx	lr
 8013a42:	bf00      	nop

08013a44 <racs_services__srv__Control_Request__copy>:
 8013a44:	b168      	cbz	r0, 8013a62 <racs_services__srv__Control_Request__copy+0x1e>
 8013a46:	b161      	cbz	r1, 8013a62 <racs_services__srv__Control_Request__copy+0x1e>
 8013a48:	220c      	movs	r2, #12
 8013a4a:	b508      	push	{r3, lr}
 8013a4c:	4603      	mov	r3, r0
 8013a4e:	4608      	mov	r0, r1
 8013a50:	f833 1b02 	ldrh.w	r1, [r3], #2
 8013a54:	f820 1b02 	strh.w	r1, [r0], #2
 8013a58:	4619      	mov	r1, r3
 8013a5a:	f008 fe51 	bl	801c700 <memmove>
 8013a5e:	2001      	movs	r0, #1
 8013a60:	bd08      	pop	{r3, pc}
 8013a62:	2000      	movs	r0, #0
 8013a64:	4770      	bx	lr
 8013a66:	bf00      	nop

08013a68 <racs_services__srv__Control_Request__Sequence__init>:
 8013a68:	b530      	push	{r4, r5, lr}
 8013a6a:	4604      	mov	r4, r0
 8013a6c:	b087      	sub	sp, #28
 8013a6e:	b148      	cbz	r0, 8013a84 <racs_services__srv__Control_Request__Sequence__init+0x1c>
 8013a70:	460d      	mov	r5, r1
 8013a72:	a801      	add	r0, sp, #4
 8013a74:	f7fa f8da 	bl	800dc2c <rcutils_get_default_allocator>
 8013a78:	b935      	cbnz	r5, 8013a88 <racs_services__srv__Control_Request__Sequence__init+0x20>
 8013a7a:	462b      	mov	r3, r5
 8013a7c:	2001      	movs	r0, #1
 8013a7e:	60a5      	str	r5, [r4, #8]
 8013a80:	e9c4 3500 	strd	r3, r5, [r4]
 8013a84:	b007      	add	sp, #28
 8013a86:	bd30      	pop	{r4, r5, pc}
 8013a88:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013a8c:	210e      	movs	r1, #14
 8013a8e:	4628      	mov	r0, r5
 8013a90:	4798      	blx	r3
 8013a92:	4603      	mov	r3, r0
 8013a94:	2800      	cmp	r0, #0
 8013a96:	d1f1      	bne.n	8013a7c <racs_services__srv__Control_Request__Sequence__init+0x14>
 8013a98:	e7f4      	b.n	8013a84 <racs_services__srv__Control_Request__Sequence__init+0x1c>
 8013a9a:	bf00      	nop

08013a9c <racs_services__srv__Control_Request__Sequence__fini>:
 8013a9c:	b180      	cbz	r0, 8013ac0 <racs_services__srv__Control_Request__Sequence__fini+0x24>
 8013a9e:	b510      	push	{r4, lr}
 8013aa0:	b086      	sub	sp, #24
 8013aa2:	4604      	mov	r4, r0
 8013aa4:	a801      	add	r0, sp, #4
 8013aa6:	f7fa f8c1 	bl	800dc2c <rcutils_get_default_allocator>
 8013aaa:	6820      	ldr	r0, [r4, #0]
 8013aac:	b130      	cbz	r0, 8013abc <racs_services__srv__Control_Request__Sequence__fini+0x20>
 8013aae:	9b02      	ldr	r3, [sp, #8]
 8013ab0:	9905      	ldr	r1, [sp, #20]
 8013ab2:	4798      	blx	r3
 8013ab4:	2300      	movs	r3, #0
 8013ab6:	e9c4 3300 	strd	r3, r3, [r4]
 8013aba:	60a3      	str	r3, [r4, #8]
 8013abc:	b006      	add	sp, #24
 8013abe:	bd10      	pop	{r4, pc}
 8013ac0:	4770      	bx	lr
 8013ac2:	bf00      	nop

08013ac4 <racs_services__srv__Control_Response__init>:
 8013ac4:	3800      	subs	r0, #0
 8013ac6:	bf18      	it	ne
 8013ac8:	2001      	movne	r0, #1
 8013aca:	4770      	bx	lr

08013acc <racs_services__srv__Control_Response__fini>:
 8013acc:	4770      	bx	lr
 8013ace:	bf00      	nop

08013ad0 <racs_services__srv__Control_Response__copy>:
 8013ad0:	b120      	cbz	r0, 8013adc <racs_services__srv__Control_Response__copy+0xc>
 8013ad2:	b119      	cbz	r1, 8013adc <racs_services__srv__Control_Response__copy+0xc>
 8013ad4:	7803      	ldrb	r3, [r0, #0]
 8013ad6:	2001      	movs	r0, #1
 8013ad8:	700b      	strb	r3, [r1, #0]
 8013ada:	4770      	bx	lr
 8013adc:	2000      	movs	r0, #0
 8013ade:	4770      	bx	lr

08013ae0 <racs_services__srv__Control_Response__Sequence__init>:
 8013ae0:	b530      	push	{r4, r5, lr}
 8013ae2:	4604      	mov	r4, r0
 8013ae4:	b087      	sub	sp, #28
 8013ae6:	b148      	cbz	r0, 8013afc <racs_services__srv__Control_Response__Sequence__init+0x1c>
 8013ae8:	460d      	mov	r5, r1
 8013aea:	a801      	add	r0, sp, #4
 8013aec:	f7fa f89e 	bl	800dc2c <rcutils_get_default_allocator>
 8013af0:	b935      	cbnz	r5, 8013b00 <racs_services__srv__Control_Response__Sequence__init+0x20>
 8013af2:	462b      	mov	r3, r5
 8013af4:	2001      	movs	r0, #1
 8013af6:	60a5      	str	r5, [r4, #8]
 8013af8:	e9c4 3500 	strd	r3, r5, [r4]
 8013afc:	b007      	add	sp, #28
 8013afe:	bd30      	pop	{r4, r5, pc}
 8013b00:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013b04:	2101      	movs	r1, #1
 8013b06:	4628      	mov	r0, r5
 8013b08:	4798      	blx	r3
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	2800      	cmp	r0, #0
 8013b0e:	d1f1      	bne.n	8013af4 <racs_services__srv__Control_Response__Sequence__init+0x14>
 8013b10:	e7f4      	b.n	8013afc <racs_services__srv__Control_Response__Sequence__init+0x1c>
 8013b12:	bf00      	nop

08013b14 <racs_services__srv__Control_Response__Sequence__fini>:
 8013b14:	b180      	cbz	r0, 8013b38 <racs_services__srv__Control_Response__Sequence__fini+0x24>
 8013b16:	b510      	push	{r4, lr}
 8013b18:	b086      	sub	sp, #24
 8013b1a:	4604      	mov	r4, r0
 8013b1c:	a801      	add	r0, sp, #4
 8013b1e:	f7fa f885 	bl	800dc2c <rcutils_get_default_allocator>
 8013b22:	6820      	ldr	r0, [r4, #0]
 8013b24:	b130      	cbz	r0, 8013b34 <racs_services__srv__Control_Response__Sequence__fini+0x20>
 8013b26:	9b02      	ldr	r3, [sp, #8]
 8013b28:	9905      	ldr	r1, [sp, #20]
 8013b2a:	4798      	blx	r3
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	e9c4 3300 	strd	r3, r3, [r4]
 8013b32:	60a3      	str	r3, [r4, #8]
 8013b34:	b006      	add	sp, #24
 8013b36:	bd10      	pop	{r4, pc}
 8013b38:	4770      	bx	lr
 8013b3a:	bf00      	nop

08013b3c <racs_services__srv__Control_Event__init>:
 8013b3c:	b570      	push	{r4, r5, r6, lr}
 8013b3e:	4604      	mov	r4, r0
 8013b40:	b086      	sub	sp, #24
 8013b42:	b1c8      	cbz	r0, 8013b78 <racs_services__srv__Control_Event__init+0x3c>
 8013b44:	f005 fe70 	bl	8019828 <service_msgs__msg__ServiceEventInfo__init>
 8013b48:	4605      	mov	r5, r0
 8013b4a:	b178      	cbz	r0, 8013b6c <racs_services__srv__Control_Event__init+0x30>
 8013b4c:	2600      	movs	r6, #0
 8013b4e:	a801      	add	r0, sp, #4
 8013b50:	f7fa f86c 	bl	800dc2c <rcutils_get_default_allocator>
 8013b54:	a801      	add	r0, sp, #4
 8013b56:	6326      	str	r6, [r4, #48]	; 0x30
 8013b58:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
 8013b5c:	f7fa f866 	bl	800dc2c <rcutils_get_default_allocator>
 8013b60:	4628      	mov	r0, r5
 8013b62:	63e6      	str	r6, [r4, #60]	; 0x3c
 8013b64:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
 8013b68:	b006      	add	sp, #24
 8013b6a:	bd70      	pop	{r4, r5, r6, pc}
 8013b6c:	4620      	mov	r0, r4
 8013b6e:	f7ff ff43 	bl	80139f8 <racs_services__srv__Control_Event__fini.part.0>
 8013b72:	4628      	mov	r0, r5
 8013b74:	b006      	add	sp, #24
 8013b76:	bd70      	pop	{r4, r5, r6, pc}
 8013b78:	4605      	mov	r5, r0
 8013b7a:	4628      	mov	r0, r5
 8013b7c:	b006      	add	sp, #24
 8013b7e:	bd70      	pop	{r4, r5, r6, pc}

08013b80 <racs_services__srv__Control_Event__fini>:
 8013b80:	b1f0      	cbz	r0, 8013bc0 <racs_services__srv__Control_Event__fini+0x40>
 8013b82:	b510      	push	{r4, lr}
 8013b84:	b086      	sub	sp, #24
 8013b86:	4604      	mov	r4, r0
 8013b88:	f005 fe60 	bl	801984c <service_msgs__msg__ServiceEventInfo__fini>
 8013b8c:	a801      	add	r0, sp, #4
 8013b8e:	f7fa f84d 	bl	800dc2c <rcutils_get_default_allocator>
 8013b92:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8013b94:	b130      	cbz	r0, 8013ba4 <racs_services__srv__Control_Event__fini+0x24>
 8013b96:	9b02      	ldr	r3, [sp, #8]
 8013b98:	9905      	ldr	r1, [sp, #20]
 8013b9a:	4798      	blx	r3
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8013ba2:	6323      	str	r3, [r4, #48]	; 0x30
 8013ba4:	a801      	add	r0, sp, #4
 8013ba6:	f7fa f841 	bl	800dc2c <rcutils_get_default_allocator>
 8013baa:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8013bac:	b130      	cbz	r0, 8013bbc <racs_services__srv__Control_Event__fini+0x3c>
 8013bae:	9b02      	ldr	r3, [sp, #8]
 8013bb0:	9905      	ldr	r1, [sp, #20]
 8013bb2:	4798      	blx	r3
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8013bba:	63e3      	str	r3, [r4, #60]	; 0x3c
 8013bbc:	b006      	add	sp, #24
 8013bbe:	bd10      	pop	{r4, pc}
 8013bc0:	4770      	bx	lr
 8013bc2:	bf00      	nop

08013bc4 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control>:
 8013bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bc8:	2900      	cmp	r1, #0
 8013bca:	d04d      	beq.n	8013c68 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0xa4>
 8013bcc:	4605      	mov	r5, r0
 8013bce:	2800      	cmp	r0, #0
 8013bd0:	d04a      	beq.n	8013c68 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0xa4>
 8013bd2:	460e      	mov	r6, r1
 8013bd4:	4698      	mov	r8, r3
 8013bd6:	2040      	movs	r0, #64	; 0x40
 8013bd8:	680b      	ldr	r3, [r1, #0]
 8013bda:	6909      	ldr	r1, [r1, #16]
 8013bdc:	4617      	mov	r7, r2
 8013bde:	4798      	blx	r3
 8013be0:	4604      	mov	r4, r0
 8013be2:	f7ff ffab 	bl	8013b3c <racs_services__srv__Control_Event__init>
 8013be6:	4684      	mov	ip, r0
 8013be8:	b370      	cbz	r0, 8013c48 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x84>
 8013bea:	782b      	ldrb	r3, [r5, #0]
 8013bec:	7023      	strb	r3, [r4, #0]
 8013bee:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 8013bf2:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8013bf6:	e9c4 2301 	strd	r2, r3, [r4, #4]
 8013bfa:	e9c4 0108 	strd	r0, r1, [r4, #32]
 8013bfe:	68e8      	ldr	r0, [r5, #12]
 8013c00:	6929      	ldr	r1, [r5, #16]
 8013c02:	696a      	ldr	r2, [r5, #20]
 8013c04:	69ab      	ldr	r3, [r5, #24]
 8013c06:	60e0      	str	r0, [r4, #12]
 8013c08:	6121      	str	r1, [r4, #16]
 8013c0a:	6162      	str	r2, [r4, #20]
 8013c0c:	61a3      	str	r3, [r4, #24]
 8013c0e:	b157      	cbz	r7, 8013c26 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x62>
 8013c10:	2101      	movs	r1, #1
 8013c12:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8013c16:	f7ff ff27 	bl	8013a68 <racs_services__srv__Control_Request__Sequence__init>
 8013c1a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013c1c:	4638      	mov	r0, r7
 8013c1e:	f7ff ff11 	bl	8013a44 <racs_services__srv__Control_Request__copy>
 8013c22:	4603      	mov	r3, r0
 8013c24:	b1c0      	cbz	r0, 8013c58 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x94>
 8013c26:	f1b8 0f00 	cmp.w	r8, #0
 8013c2a:	d00a      	beq.n	8013c42 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x7e>
 8013c2c:	2101      	movs	r1, #1
 8013c2e:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8013c32:	f7ff ff55 	bl	8013ae0 <racs_services__srv__Control_Response__Sequence__init>
 8013c36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c38:	4640      	mov	r0, r8
 8013c3a:	f7ff ff49 	bl	8013ad0 <racs_services__srv__Control_Response__copy>
 8013c3e:	4603      	mov	r3, r0
 8013c40:	b150      	cbz	r0, 8013c58 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Control+0x94>
 8013c42:	4620      	mov	r0, r4
 8013c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c48:	4620      	mov	r0, r4
 8013c4a:	4664      	mov	r4, ip
 8013c4c:	6873      	ldr	r3, [r6, #4]
 8013c4e:	6931      	ldr	r1, [r6, #16]
 8013c50:	4798      	blx	r3
 8013c52:	4620      	mov	r0, r4
 8013c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c58:	4620      	mov	r0, r4
 8013c5a:	461c      	mov	r4, r3
 8013c5c:	6872      	ldr	r2, [r6, #4]
 8013c5e:	6931      	ldr	r1, [r6, #16]
 8013c60:	4790      	blx	r2
 8013c62:	4620      	mov	r0, r4
 8013c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c68:	2400      	movs	r4, #0
 8013c6a:	4620      	mov	r0, r4
 8013c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013c70 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control>:
 8013c70:	b1b9      	cbz	r1, 8013ca2 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x32>
 8013c72:	b538      	push	{r3, r4, r5, lr}
 8013c74:	4605      	mov	r5, r0
 8013c76:	b190      	cbz	r0, 8013c9e <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x2e>
 8013c78:	460c      	mov	r4, r1
 8013c7a:	f7ff ff81 	bl	8013b80 <racs_services__srv__Control_Event__fini>
 8013c7e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8013c80:	b110      	cbz	r0, 8013c88 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x18>
 8013c82:	6863      	ldr	r3, [r4, #4]
 8013c84:	6921      	ldr	r1, [r4, #16]
 8013c86:	4798      	blx	r3
 8013c88:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8013c8a:	b110      	cbz	r0, 8013c92 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Control+0x22>
 8013c8c:	6863      	ldr	r3, [r4, #4]
 8013c8e:	6921      	ldr	r1, [r4, #16]
 8013c90:	4798      	blx	r3
 8013c92:	4628      	mov	r0, r5
 8013c94:	6863      	ldr	r3, [r4, #4]
 8013c96:	6921      	ldr	r1, [r4, #16]
 8013c98:	4798      	blx	r3
 8013c9a:	2001      	movs	r0, #1
 8013c9c:	bd38      	pop	{r3, r4, r5, pc}
 8013c9e:	2000      	movs	r0, #0
 8013ca0:	bd38      	pop	{r3, r4, r5, pc}
 8013ca2:	2000      	movs	r0, #0
 8013ca4:	4770      	bx	lr
 8013ca6:	bf00      	nop

08013ca8 <racs_services__msg__DirectAccess__get_type_hash>:
 8013ca8:	4800      	ldr	r0, [pc, #0]	; (8013cac <racs_services__msg__DirectAccess__get_type_hash+0x4>)
 8013caa:	4770      	bx	lr
 8013cac:	200011ec 	.word	0x200011ec

08013cb0 <racs_services__msg__DirectAccess__get_type_description>:
 8013cb0:	4b03      	ldr	r3, [pc, #12]	; (8013cc0 <racs_services__msg__DirectAccess__get_type_description+0x10>)
 8013cb2:	781a      	ldrb	r2, [r3, #0]
 8013cb4:	b90a      	cbnz	r2, 8013cba <racs_services__msg__DirectAccess__get_type_description+0xa>
 8013cb6:	2201      	movs	r2, #1
 8013cb8:	701a      	strb	r2, [r3, #0]
 8013cba:	4802      	ldr	r0, [pc, #8]	; (8013cc4 <racs_services__msg__DirectAccess__get_type_description+0x14>)
 8013cbc:	4770      	bx	lr
 8013cbe:	bf00      	nop
 8013cc0:	200105b1 	.word	0x200105b1
 8013cc4:	0801e828 	.word	0x0801e828

08013cc8 <racs_services__msg__DirectAccess__get_type_description_sources>:
 8013cc8:	4b09      	ldr	r3, [pc, #36]	; (8013cf0 <racs_services__msg__DirectAccess__get_type_description_sources+0x28>)
 8013cca:	781a      	ldrb	r2, [r3, #0]
 8013ccc:	b96a      	cbnz	r2, 8013cea <racs_services__msg__DirectAccess__get_type_description_sources+0x22>
 8013cce:	2201      	movs	r2, #1
 8013cd0:	b430      	push	{r4, r5}
 8013cd2:	4d08      	ldr	r5, [pc, #32]	; (8013cf4 <racs_services__msg__DirectAccess__get_type_description_sources+0x2c>)
 8013cd4:	4c08      	ldr	r4, [pc, #32]	; (8013cf8 <racs_services__msg__DirectAccess__get_type_description_sources+0x30>)
 8013cd6:	701a      	strb	r2, [r3, #0]
 8013cd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013cda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013ce0:	682b      	ldr	r3, [r5, #0]
 8013ce2:	4806      	ldr	r0, [pc, #24]	; (8013cfc <racs_services__msg__DirectAccess__get_type_description_sources+0x34>)
 8013ce4:	6023      	str	r3, [r4, #0]
 8013ce6:	bc30      	pop	{r4, r5}
 8013ce8:	4770      	bx	lr
 8013cea:	4804      	ldr	r0, [pc, #16]	; (8013cfc <racs_services__msg__DirectAccess__get_type_description_sources+0x34>)
 8013cec:	4770      	bx	lr
 8013cee:	bf00      	nop
 8013cf0:	200105b0 	.word	0x200105b0
 8013cf4:	0801e84c 	.word	0x0801e84c
 8013cf8:	200105b4 	.word	0x200105b4
 8013cfc:	0801e870 	.word	0x0801e870

08013d00 <racs_services__msg__DirectAccess__init>:
 8013d00:	3800      	subs	r0, #0
 8013d02:	bf18      	it	ne
 8013d04:	2001      	movne	r0, #1
 8013d06:	4770      	bx	lr

08013d08 <racs_services__msg__DirectAccess__fini>:
 8013d08:	4770      	bx	lr
 8013d0a:	bf00      	nop

08013d0c <racs_services__msg__Feedback__get_type_hash>:
 8013d0c:	4800      	ldr	r0, [pc, #0]	; (8013d10 <racs_services__msg__Feedback__get_type_hash+0x4>)
 8013d0e:	4770      	bx	lr
 8013d10:	200012fc 	.word	0x200012fc

08013d14 <racs_services__msg__Feedback__get_type_description>:
 8013d14:	4b03      	ldr	r3, [pc, #12]	; (8013d24 <racs_services__msg__Feedback__get_type_description+0x10>)
 8013d16:	781a      	ldrb	r2, [r3, #0]
 8013d18:	b90a      	cbnz	r2, 8013d1e <racs_services__msg__Feedback__get_type_description+0xa>
 8013d1a:	2201      	movs	r2, #1
 8013d1c:	701a      	strb	r2, [r3, #0]
 8013d1e:	4802      	ldr	r0, [pc, #8]	; (8013d28 <racs_services__msg__Feedback__get_type_description+0x14>)
 8013d20:	4770      	bx	lr
 8013d22:	bf00      	nop
 8013d24:	200105d9 	.word	0x200105d9
 8013d28:	0801e87c 	.word	0x0801e87c

08013d2c <racs_services__msg__Feedback__get_type_description_sources>:
 8013d2c:	4b09      	ldr	r3, [pc, #36]	; (8013d54 <racs_services__msg__Feedback__get_type_description_sources+0x28>)
 8013d2e:	781a      	ldrb	r2, [r3, #0]
 8013d30:	b96a      	cbnz	r2, 8013d4e <racs_services__msg__Feedback__get_type_description_sources+0x22>
 8013d32:	2201      	movs	r2, #1
 8013d34:	b430      	push	{r4, r5}
 8013d36:	4d08      	ldr	r5, [pc, #32]	; (8013d58 <racs_services__msg__Feedback__get_type_description_sources+0x2c>)
 8013d38:	4c08      	ldr	r4, [pc, #32]	; (8013d5c <racs_services__msg__Feedback__get_type_description_sources+0x30>)
 8013d3a:	701a      	strb	r2, [r3, #0]
 8013d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013d44:	682b      	ldr	r3, [r5, #0]
 8013d46:	4806      	ldr	r0, [pc, #24]	; (8013d60 <racs_services__msg__Feedback__get_type_description_sources+0x34>)
 8013d48:	6023      	str	r3, [r4, #0]
 8013d4a:	bc30      	pop	{r4, r5}
 8013d4c:	4770      	bx	lr
 8013d4e:	4804      	ldr	r0, [pc, #16]	; (8013d60 <racs_services__msg__Feedback__get_type_description_sources+0x34>)
 8013d50:	4770      	bx	lr
 8013d52:	bf00      	nop
 8013d54:	200105d8 	.word	0x200105d8
 8013d58:	0801e8a0 	.word	0x0801e8a0
 8013d5c:	200105dc 	.word	0x200105dc
 8013d60:	0801e8c4 	.word	0x0801e8c4

08013d64 <racs_services__msg__Feedback__init>:
 8013d64:	3800      	subs	r0, #0
 8013d66:	bf18      	it	ne
 8013d68:	2001      	movne	r0, #1
 8013d6a:	4770      	bx	lr

08013d6c <racs_services__msg__Feedback__fini>:
 8013d6c:	4770      	bx	lr
 8013d6e:	bf00      	nop

08013d70 <racs_services__srv__Setup_Event__get_type_description.part.0>:
 8013d70:	b510      	push	{r4, lr}
 8013d72:	2000      	movs	r0, #0
 8013d74:	4c13      	ldr	r4, [pc, #76]	; (8013dc4 <racs_services__srv__Setup_Event__get_type_description.part.0+0x54>)
 8013d76:	f005 fd73 	bl	8019860 <builtin_interfaces__msg__Time__get_type_description>
 8013d7a:	300c      	adds	r0, #12
 8013d7c:	4b12      	ldr	r3, [pc, #72]	; (8013dc8 <racs_services__srv__Setup_Event__get_type_description.part.0+0x58>)
 8013d7e:	c807      	ldmia	r0, {r0, r1, r2}
 8013d80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013d84:	7823      	ldrb	r3, [r4, #0]
 8013d86:	b90b      	cbnz	r3, 8013d8c <racs_services__srv__Setup_Event__get_type_description.part.0+0x1c>
 8013d88:	2301      	movs	r3, #1
 8013d8a:	7023      	strb	r3, [r4, #0]
 8013d8c:	4a0f      	ldr	r2, [pc, #60]	; (8013dcc <racs_services__srv__Setup_Event__get_type_description.part.0+0x5c>)
 8013d8e:	4b10      	ldr	r3, [pc, #64]	; (8013dd0 <racs_services__srv__Setup_Event__get_type_description.part.0+0x60>)
 8013d90:	4c10      	ldr	r4, [pc, #64]	; (8013dd4 <racs_services__srv__Setup_Event__get_type_description.part.0+0x64>)
 8013d92:	ca07      	ldmia	r2, {r0, r1, r2}
 8013d94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013d98:	7823      	ldrb	r3, [r4, #0]
 8013d9a:	b90b      	cbnz	r3, 8013da0 <racs_services__srv__Setup_Event__get_type_description.part.0+0x30>
 8013d9c:	2301      	movs	r3, #1
 8013d9e:	7023      	strb	r3, [r4, #0]
 8013da0:	4b0d      	ldr	r3, [pc, #52]	; (8013dd8 <racs_services__srv__Setup_Event__get_type_description.part.0+0x68>)
 8013da2:	4c0e      	ldr	r4, [pc, #56]	; (8013ddc <racs_services__srv__Setup_Event__get_type_description.part.0+0x6c>)
 8013da4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013da8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013dac:	2000      	movs	r0, #0
 8013dae:	3418      	adds	r4, #24
 8013db0:	f005 fcf6 	bl	80197a0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8013db4:	300c      	adds	r0, #12
 8013db6:	4b0a      	ldr	r3, [pc, #40]	; (8013de0 <racs_services__srv__Setup_Event__get_type_description.part.0+0x70>)
 8013db8:	c807      	ldmia	r0, {r0, r1, r2}
 8013dba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013dbe:	2201      	movs	r2, #1
 8013dc0:	701a      	strb	r2, [r3, #0]
 8013dc2:	bd10      	pop	{r4, pc}
 8013dc4:	20010604 	.word	0x20010604
 8013dc8:	200015c8 	.word	0x200015c8
 8013dcc:	0801e924 	.word	0x0801e924
 8013dd0:	200015e0 	.word	0x200015e0
 8013dd4:	20010602 	.word	0x20010602
 8013dd8:	0801e900 	.word	0x0801e900
 8013ddc:	200015f8 	.word	0x200015f8
 8013de0:	20010601 	.word	0x20010601

08013de4 <racs_services__srv__Setup__get_type_hash>:
 8013de4:	4800      	ldr	r0, [pc, #0]	; (8013de8 <racs_services__srv__Setup__get_type_hash+0x4>)
 8013de6:	4770      	bx	lr
 8013de8:	20001498 	.word	0x20001498

08013dec <racs_services__srv__Setup_Request__get_type_hash>:
 8013dec:	4800      	ldr	r0, [pc, #0]	; (8013df0 <racs_services__srv__Setup_Request__get_type_hash+0x4>)
 8013dee:	4770      	bx	lr
 8013df0:	20001474 	.word	0x20001474

08013df4 <racs_services__srv__Setup_Response__get_type_hash>:
 8013df4:	4800      	ldr	r0, [pc, #0]	; (8013df8 <racs_services__srv__Setup_Response__get_type_hash+0x4>)
 8013df6:	4770      	bx	lr
 8013df8:	20001450 	.word	0x20001450

08013dfc <racs_services__srv__Setup_Event__get_type_hash>:
 8013dfc:	4800      	ldr	r0, [pc, #0]	; (8013e00 <racs_services__srv__Setup_Event__get_type_hash+0x4>)
 8013dfe:	4770      	bx	lr
 8013e00:	2000142c 	.word	0x2000142c

08013e04 <racs_services__srv__Setup__get_type_description>:
 8013e04:	b538      	push	{r3, r4, r5, lr}
 8013e06:	4d1c      	ldr	r5, [pc, #112]	; (8013e78 <racs_services__srv__Setup__get_type_description+0x74>)
 8013e08:	7828      	ldrb	r0, [r5, #0]
 8013e0a:	b108      	cbz	r0, 8013e10 <racs_services__srv__Setup__get_type_description+0xc>
 8013e0c:	481b      	ldr	r0, [pc, #108]	; (8013e7c <racs_services__srv__Setup__get_type_description+0x78>)
 8013e0e:	bd38      	pop	{r3, r4, r5, pc}
 8013e10:	f005 fd26 	bl	8019860 <builtin_interfaces__msg__Time__get_type_description>
 8013e14:	300c      	adds	r0, #12
 8013e16:	4b1a      	ldr	r3, [pc, #104]	; (8013e80 <racs_services__srv__Setup__get_type_description+0x7c>)
 8013e18:	c807      	ldmia	r0, {r0, r1, r2}
 8013e1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013e1e:	4b19      	ldr	r3, [pc, #100]	; (8013e84 <racs_services__srv__Setup__get_type_description+0x80>)
 8013e20:	781b      	ldrb	r3, [r3, #0]
 8013e22:	b32b      	cbz	r3, 8013e70 <racs_services__srv__Setup__get_type_description+0x6c>
 8013e24:	4a18      	ldr	r2, [pc, #96]	; (8013e88 <racs_services__srv__Setup__get_type_description+0x84>)
 8013e26:	4b19      	ldr	r3, [pc, #100]	; (8013e8c <racs_services__srv__Setup__get_type_description+0x88>)
 8013e28:	4c19      	ldr	r4, [pc, #100]	; (8013e90 <racs_services__srv__Setup__get_type_description+0x8c>)
 8013e2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8013e2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013e30:	7823      	ldrb	r3, [r4, #0]
 8013e32:	b90b      	cbnz	r3, 8013e38 <racs_services__srv__Setup__get_type_description+0x34>
 8013e34:	2301      	movs	r3, #1
 8013e36:	7023      	strb	r3, [r4, #0]
 8013e38:	4a16      	ldr	r2, [pc, #88]	; (8013e94 <racs_services__srv__Setup__get_type_description+0x90>)
 8013e3a:	4b17      	ldr	r3, [pc, #92]	; (8013e98 <racs_services__srv__Setup__get_type_description+0x94>)
 8013e3c:	4c17      	ldr	r4, [pc, #92]	; (8013e9c <racs_services__srv__Setup__get_type_description+0x98>)
 8013e3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8013e40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013e44:	7823      	ldrb	r3, [r4, #0]
 8013e46:	b90b      	cbnz	r3, 8013e4c <racs_services__srv__Setup__get_type_description+0x48>
 8013e48:	2301      	movs	r3, #1
 8013e4a:	7023      	strb	r3, [r4, #0]
 8013e4c:	4b14      	ldr	r3, [pc, #80]	; (8013ea0 <racs_services__srv__Setup__get_type_description+0x9c>)
 8013e4e:	4c15      	ldr	r4, [pc, #84]	; (8013ea4 <racs_services__srv__Setup__get_type_description+0xa0>)
 8013e50:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8013e54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013e58:	2000      	movs	r0, #0
 8013e5a:	3418      	adds	r4, #24
 8013e5c:	f005 fca0 	bl	80197a0 <service_msgs__msg__ServiceEventInfo__get_type_description>
 8013e60:	300c      	adds	r0, #12
 8013e62:	2301      	movs	r3, #1
 8013e64:	c807      	ldmia	r0, {r0, r1, r2}
 8013e66:	702b      	strb	r3, [r5, #0]
 8013e68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8013e6c:	4803      	ldr	r0, [pc, #12]	; (8013e7c <racs_services__srv__Setup__get_type_description+0x78>)
 8013e6e:	bd38      	pop	{r3, r4, r5, pc}
 8013e70:	f7ff ff7e 	bl	8013d70 <racs_services__srv__Setup_Event__get_type_description.part.0>
 8013e74:	e7d6      	b.n	8013e24 <racs_services__srv__Setup__get_type_description+0x20>
 8013e76:	bf00      	nop
 8013e78:	20010605 	.word	0x20010605
 8013e7c:	0801e93c 	.word	0x0801e93c
 8013e80:	20001a10 	.word	0x20001a10
 8013e84:	20010601 	.word	0x20010601
 8013e88:	0801e8dc 	.word	0x0801e8dc
 8013e8c:	20001a28 	.word	0x20001a28
 8013e90:	20010604 	.word	0x20010604
 8013e94:	0801e924 	.word	0x0801e924
 8013e98:	20001a40 	.word	0x20001a40
 8013e9c:	20010602 	.word	0x20010602
 8013ea0:	0801e900 	.word	0x0801e900
 8013ea4:	20001a58 	.word	0x20001a58

08013ea8 <racs_services__srv__Setup_Request__get_type_description>:
 8013ea8:	4b03      	ldr	r3, [pc, #12]	; (8013eb8 <racs_services__srv__Setup_Request__get_type_description+0x10>)
 8013eaa:	781a      	ldrb	r2, [r3, #0]
 8013eac:	b90a      	cbnz	r2, 8013eb2 <racs_services__srv__Setup_Request__get_type_description+0xa>
 8013eae:	2201      	movs	r2, #1
 8013eb0:	701a      	strb	r2, [r3, #0]
 8013eb2:	4802      	ldr	r0, [pc, #8]	; (8013ebc <racs_services__srv__Setup_Request__get_type_description+0x14>)
 8013eb4:	4770      	bx	lr
 8013eb6:	bf00      	nop
 8013eb8:	20010604 	.word	0x20010604
 8013ebc:	0801e918 	.word	0x0801e918

08013ec0 <racs_services__srv__Setup_Response__get_type_description>:
 8013ec0:	4b03      	ldr	r3, [pc, #12]	; (8013ed0 <racs_services__srv__Setup_Response__get_type_description+0x10>)
 8013ec2:	781a      	ldrb	r2, [r3, #0]
 8013ec4:	b90a      	cbnz	r2, 8013eca <racs_services__srv__Setup_Response__get_type_description+0xa>
 8013ec6:	2201      	movs	r2, #1
 8013ec8:	701a      	strb	r2, [r3, #0]
 8013eca:	4802      	ldr	r0, [pc, #8]	; (8013ed4 <racs_services__srv__Setup_Response__get_type_description+0x14>)
 8013ecc:	4770      	bx	lr
 8013ece:	bf00      	nop
 8013ed0:	20010602 	.word	0x20010602
 8013ed4:	0801e8f4 	.word	0x0801e8f4

08013ed8 <racs_services__srv__Setup_Event__get_type_description>:
 8013ed8:	b508      	push	{r3, lr}
 8013eda:	4b04      	ldr	r3, [pc, #16]	; (8013eec <racs_services__srv__Setup_Event__get_type_description+0x14>)
 8013edc:	781b      	ldrb	r3, [r3, #0]
 8013ede:	b10b      	cbz	r3, 8013ee4 <racs_services__srv__Setup_Event__get_type_description+0xc>
 8013ee0:	4803      	ldr	r0, [pc, #12]	; (8013ef0 <racs_services__srv__Setup_Event__get_type_description+0x18>)
 8013ee2:	bd08      	pop	{r3, pc}
 8013ee4:	f7ff ff44 	bl	8013d70 <racs_services__srv__Setup_Event__get_type_description.part.0>
 8013ee8:	4801      	ldr	r0, [pc, #4]	; (8013ef0 <racs_services__srv__Setup_Event__get_type_description+0x18>)
 8013eea:	bd08      	pop	{r3, pc}
 8013eec:	20010601 	.word	0x20010601
 8013ef0:	0801e8d0 	.word	0x0801e8d0

08013ef4 <racs_services__srv__Setup__get_type_description_sources>:
 8013ef4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ef8:	4b2c      	ldr	r3, [pc, #176]	; (8013fac <racs_services__srv__Setup__get_type_description_sources+0xb8>)
 8013efa:	f893 9000 	ldrb.w	r9, [r3]
 8013efe:	f1b9 0f00 	cmp.w	r9, #0
 8013f02:	d002      	beq.n	8013f0a <racs_services__srv__Setup__get_type_description_sources+0x16>
 8013f04:	482a      	ldr	r0, [pc, #168]	; (8013fb0 <racs_services__srv__Setup__get_type_description_sources+0xbc>)
 8013f06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f0a:	4d2a      	ldr	r5, [pc, #168]	; (8013fb4 <racs_services__srv__Setup__get_type_description_sources+0xc0>)
 8013f0c:	4c2a      	ldr	r4, [pc, #168]	; (8013fb8 <racs_services__srv__Setup__get_type_description_sources+0xc4>)
 8013f0e:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8013fc0 <racs_services__srv__Setup__get_type_description_sources+0xcc>
 8013f12:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8013fc4 <racs_services__srv__Setup__get_type_description_sources+0xd0>
 8013f16:	4e29      	ldr	r6, [pc, #164]	; (8013fbc <racs_services__srv__Setup__get_type_description_sources+0xc8>)
 8013f18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f20:	682b      	ldr	r3, [r5, #0]
 8013f22:	4625      	mov	r5, r4
 8013f24:	4648      	mov	r0, r9
 8013f26:	f104 0a28 	add.w	sl, r4, #40	; 0x28
 8013f2a:	f845 3b04 	str.w	r3, [r5], #4
 8013f2e:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 8013f32:	f005 fca1 	bl	8019878 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8013f36:	4684      	mov	ip, r0
 8013f38:	f104 0e70 	add.w	lr, r4, #112	; 0x70
 8013f3c:	3494      	adds	r4, #148	; 0x94
 8013f3e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013f42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013f44:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8013f48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013f4a:	f8dc 3000 	ldr.w	r3, [ip]
 8013f4e:	602b      	str	r3, [r5, #0]
 8013f50:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8013f54:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8013f58:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
 8013f5c:	e8aa 000f 	stmia.w	sl!, {r0, r1, r2, r3}
 8013f60:	f8db 3000 	ldr.w	r3, [fp]
 8013f64:	f8ca 3000 	str.w	r3, [sl]
 8013f68:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8013f6c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013f6e:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8013f72:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8013f74:	f8d8 3000 	ldr.w	r3, [r8]
 8013f78:	603b      	str	r3, [r7, #0]
 8013f7a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013f7c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013f80:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8013f82:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8013f86:	6833      	ldr	r3, [r6, #0]
 8013f88:	4648      	mov	r0, r9
 8013f8a:	f8ce 3000 	str.w	r3, [lr]
 8013f8e:	f005 fc1f 	bl	80197d0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 8013f92:	2301      	movs	r3, #1
 8013f94:	4a05      	ldr	r2, [pc, #20]	; (8013fac <racs_services__srv__Setup__get_type_description_sources+0xb8>)
 8013f96:	4605      	mov	r5, r0
 8013f98:	7013      	strb	r3, [r2, #0]
 8013f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fa2:	682b      	ldr	r3, [r5, #0]
 8013fa4:	4802      	ldr	r0, [pc, #8]	; (8013fb0 <racs_services__srv__Setup__get_type_description_sources+0xbc>)
 8013fa6:	6023      	str	r3, [r4, #0]
 8013fa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fac:	20010600 	.word	0x20010600
 8013fb0:	0801ea14 	.word	0x0801ea14
 8013fb4:	0801e9cc 	.word	0x0801e9cc
 8013fb8:	200106bc 	.word	0x200106bc
 8013fbc:	0801e984 	.word	0x0801e984
 8013fc0:	0801e960 	.word	0x0801e960
 8013fc4:	0801e9a8 	.word	0x0801e9a8

08013fc8 <racs_services__srv__Setup_Request__get_type_description_sources>:
 8013fc8:	4b09      	ldr	r3, [pc, #36]	; (8013ff0 <racs_services__srv__Setup_Request__get_type_description_sources+0x28>)
 8013fca:	781a      	ldrb	r2, [r3, #0]
 8013fcc:	b96a      	cbnz	r2, 8013fea <racs_services__srv__Setup_Request__get_type_description_sources+0x22>
 8013fce:	2201      	movs	r2, #1
 8013fd0:	b430      	push	{r4, r5}
 8013fd2:	4d08      	ldr	r5, [pc, #32]	; (8013ff4 <racs_services__srv__Setup_Request__get_type_description_sources+0x2c>)
 8013fd4:	4c08      	ldr	r4, [pc, #32]	; (8013ff8 <racs_services__srv__Setup_Request__get_type_description_sources+0x30>)
 8013fd6:	701a      	strb	r2, [r3, #0]
 8013fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fe0:	682b      	ldr	r3, [r5, #0]
 8013fe2:	4806      	ldr	r0, [pc, #24]	; (8013ffc <racs_services__srv__Setup_Request__get_type_description_sources+0x34>)
 8013fe4:	6023      	str	r3, [r4, #0]
 8013fe6:	bc30      	pop	{r4, r5}
 8013fe8:	4770      	bx	lr
 8013fea:	4804      	ldr	r0, [pc, #16]	; (8013ffc <racs_services__srv__Setup_Request__get_type_description_sources+0x34>)
 8013fec:	4770      	bx	lr
 8013fee:	bf00      	nop
 8013ff0:	20010607 	.word	0x20010607
 8013ff4:	0801e9a8 	.word	0x0801e9a8
 8013ff8:	200107b8 	.word	0x200107b8
 8013ffc:	0801ea08 	.word	0x0801ea08

08014000 <racs_services__srv__Setup_Response__get_type_description_sources>:
 8014000:	4b09      	ldr	r3, [pc, #36]	; (8014028 <racs_services__srv__Setup_Response__get_type_description_sources+0x28>)
 8014002:	781a      	ldrb	r2, [r3, #0]
 8014004:	b96a      	cbnz	r2, 8014022 <racs_services__srv__Setup_Response__get_type_description_sources+0x22>
 8014006:	2201      	movs	r2, #1
 8014008:	b430      	push	{r4, r5}
 801400a:	4d08      	ldr	r5, [pc, #32]	; (801402c <racs_services__srv__Setup_Response__get_type_description_sources+0x2c>)
 801400c:	4c08      	ldr	r4, [pc, #32]	; (8014030 <racs_services__srv__Setup_Response__get_type_description_sources+0x30>)
 801400e:	701a      	strb	r2, [r3, #0]
 8014010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014018:	682b      	ldr	r3, [r5, #0]
 801401a:	4806      	ldr	r0, [pc, #24]	; (8014034 <racs_services__srv__Setup_Response__get_type_description_sources+0x34>)
 801401c:	6023      	str	r3, [r4, #0]
 801401e:	bc30      	pop	{r4, r5}
 8014020:	4770      	bx	lr
 8014022:	4804      	ldr	r0, [pc, #16]	; (8014034 <racs_services__srv__Setup_Response__get_type_description_sources+0x34>)
 8014024:	4770      	bx	lr
 8014026:	bf00      	nop
 8014028:	20010606 	.word	0x20010606
 801402c:	0801e984 	.word	0x0801e984
 8014030:	20010794 	.word	0x20010794
 8014034:	0801e9fc 	.word	0x0801e9fc

08014038 <racs_services__srv__Setup_Event__get_type_description_sources>:
 8014038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801403c:	4e27      	ldr	r6, [pc, #156]	; (80140dc <racs_services__srv__Setup_Event__get_type_description_sources+0xa4>)
 801403e:	f896 8000 	ldrb.w	r8, [r6]
 8014042:	f1b8 0f00 	cmp.w	r8, #0
 8014046:	d002      	beq.n	801404e <racs_services__srv__Setup_Event__get_type_description_sources+0x16>
 8014048:	4825      	ldr	r0, [pc, #148]	; (80140e0 <racs_services__srv__Setup_Event__get_type_description_sources+0xa8>)
 801404a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801404e:	4d25      	ldr	r5, [pc, #148]	; (80140e4 <racs_services__srv__Setup_Event__get_type_description_sources+0xac>)
 8014050:	4c25      	ldr	r4, [pc, #148]	; (80140e8 <racs_services__srv__Setup_Event__get_type_description_sources+0xb0>)
 8014052:	f8df a09c 	ldr.w	sl, [pc, #156]	; 80140f0 <racs_services__srv__Setup_Event__get_type_description_sources+0xb8>
 8014056:	4f25      	ldr	r7, [pc, #148]	; (80140ec <racs_services__srv__Setup_Event__get_type_description_sources+0xb4>)
 8014058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801405a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801405c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801405e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014060:	682b      	ldr	r3, [r5, #0]
 8014062:	4625      	mov	r5, r4
 8014064:	4640      	mov	r0, r8
 8014066:	f104 0928 	add.w	r9, r4, #40	; 0x28
 801406a:	f845 3b04 	str.w	r3, [r5], #4
 801406e:	f005 fc03 	bl	8019878 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 8014072:	4684      	mov	ip, r0
 8014074:	f104 0e4c 	add.w	lr, r4, #76	; 0x4c
 8014078:	3470      	adds	r4, #112	; 0x70
 801407a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801407e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014080:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014084:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014086:	f8dc 3000 	ldr.w	r3, [ip]
 801408a:	602b      	str	r3, [r5, #0]
 801408c:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8014090:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 8014094:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
 8014098:	e8a9 000f 	stmia.w	r9!, {r0, r1, r2, r3}
 801409c:	f8da 3000 	ldr.w	r3, [sl]
 80140a0:	f8c9 3000 	str.w	r3, [r9]
 80140a4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80140a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80140aa:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80140ac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80140b0:	683b      	ldr	r3, [r7, #0]
 80140b2:	4640      	mov	r0, r8
 80140b4:	f8ce 3000 	str.w	r3, [lr]
 80140b8:	f005 fb8a 	bl	80197d0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>
 80140bc:	2301      	movs	r3, #1
 80140be:	4684      	mov	ip, r0
 80140c0:	7033      	strb	r3, [r6, #0]
 80140c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80140c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80140c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80140cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80140ce:	f8dc 3000 	ldr.w	r3, [ip]
 80140d2:	4803      	ldr	r0, [pc, #12]	; (80140e0 <racs_services__srv__Setup_Event__get_type_description_sources+0xa8>)
 80140d4:	6023      	str	r3, [r4, #0]
 80140d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80140da:	bf00      	nop
 80140dc:	20010603 	.word	0x20010603
 80140e0:	0801e9f0 	.word	0x0801e9f0
 80140e4:	0801e960 	.word	0x0801e960
 80140e8:	20010608 	.word	0x20010608
 80140ec:	0801e984 	.word	0x0801e984
 80140f0:	0801e9a8 	.word	0x0801e9a8

080140f4 <racs_services__srv__Setup_Event__fini.part.0>:
 80140f4:	b510      	push	{r4, lr}
 80140f6:	b086      	sub	sp, #24
 80140f8:	4604      	mov	r4, r0
 80140fa:	f005 fba7 	bl	801984c <service_msgs__msg__ServiceEventInfo__fini>
 80140fe:	a801      	add	r0, sp, #4
 8014100:	f7f9 fd94 	bl	800dc2c <rcutils_get_default_allocator>
 8014104:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8014106:	b130      	cbz	r0, 8014116 <racs_services__srv__Setup_Event__fini.part.0+0x22>
 8014108:	9b02      	ldr	r3, [sp, #8]
 801410a:	9905      	ldr	r1, [sp, #20]
 801410c:	4798      	blx	r3
 801410e:	2300      	movs	r3, #0
 8014110:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8014114:	6323      	str	r3, [r4, #48]	; 0x30
 8014116:	a801      	add	r0, sp, #4
 8014118:	f7f9 fd88 	bl	800dc2c <rcutils_get_default_allocator>
 801411c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801411e:	b130      	cbz	r0, 801412e <racs_services__srv__Setup_Event__fini.part.0+0x3a>
 8014120:	9b02      	ldr	r3, [sp, #8]
 8014122:	9905      	ldr	r1, [sp, #20]
 8014124:	4798      	blx	r3
 8014126:	2300      	movs	r3, #0
 8014128:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 801412c:	63e3      	str	r3, [r4, #60]	; 0x3c
 801412e:	b006      	add	sp, #24
 8014130:	bd10      	pop	{r4, pc}
 8014132:	bf00      	nop

08014134 <racs_services__srv__Setup_Request__init>:
 8014134:	3800      	subs	r0, #0
 8014136:	bf18      	it	ne
 8014138:	2001      	movne	r0, #1
 801413a:	4770      	bx	lr

0801413c <racs_services__srv__Setup_Request__fini>:
 801413c:	4770      	bx	lr
 801413e:	bf00      	nop

08014140 <racs_services__srv__Setup_Request__copy>:
 8014140:	4603      	mov	r3, r0
 8014142:	b1a0      	cbz	r0, 801416e <racs_services__srv__Setup_Request__copy+0x2e>
 8014144:	b199      	cbz	r1, 801416e <racs_services__srv__Setup_Request__copy+0x2e>
 8014146:	7802      	ldrb	r2, [r0, #0]
 8014148:	2001      	movs	r0, #1
 801414a:	700a      	strb	r2, [r1, #0]
 801414c:	689a      	ldr	r2, [r3, #8]
 801414e:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8014152:	608a      	str	r2, [r1, #8]
 8014154:	691a      	ldr	r2, [r3, #16]
 8014156:	f8c1 c004 	str.w	ip, [r1, #4]
 801415a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801415e:	610a      	str	r2, [r1, #16]
 8014160:	695a      	ldr	r2, [r3, #20]
 8014162:	699b      	ldr	r3, [r3, #24]
 8014164:	f8c1 c00c 	str.w	ip, [r1, #12]
 8014168:	614a      	str	r2, [r1, #20]
 801416a:	618b      	str	r3, [r1, #24]
 801416c:	4770      	bx	lr
 801416e:	2000      	movs	r0, #0
 8014170:	4770      	bx	lr
 8014172:	bf00      	nop

08014174 <racs_services__srv__Setup_Request__Sequence__init>:
 8014174:	b530      	push	{r4, r5, lr}
 8014176:	4604      	mov	r4, r0
 8014178:	b087      	sub	sp, #28
 801417a:	b148      	cbz	r0, 8014190 <racs_services__srv__Setup_Request__Sequence__init+0x1c>
 801417c:	460d      	mov	r5, r1
 801417e:	a801      	add	r0, sp, #4
 8014180:	f7f9 fd54 	bl	800dc2c <rcutils_get_default_allocator>
 8014184:	b935      	cbnz	r5, 8014194 <racs_services__srv__Setup_Request__Sequence__init+0x20>
 8014186:	462b      	mov	r3, r5
 8014188:	2001      	movs	r0, #1
 801418a:	60a5      	str	r5, [r4, #8]
 801418c:	e9c4 3500 	strd	r3, r5, [r4]
 8014190:	b007      	add	sp, #28
 8014192:	bd30      	pop	{r4, r5, pc}
 8014194:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8014198:	211c      	movs	r1, #28
 801419a:	4628      	mov	r0, r5
 801419c:	4798      	blx	r3
 801419e:	4603      	mov	r3, r0
 80141a0:	2800      	cmp	r0, #0
 80141a2:	d1f1      	bne.n	8014188 <racs_services__srv__Setup_Request__Sequence__init+0x14>
 80141a4:	e7f4      	b.n	8014190 <racs_services__srv__Setup_Request__Sequence__init+0x1c>
 80141a6:	bf00      	nop

080141a8 <racs_services__srv__Setup_Request__Sequence__fini>:
 80141a8:	b180      	cbz	r0, 80141cc <racs_services__srv__Setup_Request__Sequence__fini+0x24>
 80141aa:	b510      	push	{r4, lr}
 80141ac:	b086      	sub	sp, #24
 80141ae:	4604      	mov	r4, r0
 80141b0:	a801      	add	r0, sp, #4
 80141b2:	f7f9 fd3b 	bl	800dc2c <rcutils_get_default_allocator>
 80141b6:	6820      	ldr	r0, [r4, #0]
 80141b8:	b130      	cbz	r0, 80141c8 <racs_services__srv__Setup_Request__Sequence__fini+0x20>
 80141ba:	9b02      	ldr	r3, [sp, #8]
 80141bc:	9905      	ldr	r1, [sp, #20]
 80141be:	4798      	blx	r3
 80141c0:	2300      	movs	r3, #0
 80141c2:	e9c4 3300 	strd	r3, r3, [r4]
 80141c6:	60a3      	str	r3, [r4, #8]
 80141c8:	b006      	add	sp, #24
 80141ca:	bd10      	pop	{r4, pc}
 80141cc:	4770      	bx	lr
 80141ce:	bf00      	nop

080141d0 <racs_services__srv__Setup_Response__init>:
 80141d0:	3800      	subs	r0, #0
 80141d2:	bf18      	it	ne
 80141d4:	2001      	movne	r0, #1
 80141d6:	4770      	bx	lr

080141d8 <racs_services__srv__Setup_Response__fini>:
 80141d8:	4770      	bx	lr
 80141da:	bf00      	nop

080141dc <racs_services__srv__Setup_Response__copy>:
 80141dc:	b120      	cbz	r0, 80141e8 <racs_services__srv__Setup_Response__copy+0xc>
 80141de:	b119      	cbz	r1, 80141e8 <racs_services__srv__Setup_Response__copy+0xc>
 80141e0:	7803      	ldrb	r3, [r0, #0]
 80141e2:	2001      	movs	r0, #1
 80141e4:	700b      	strb	r3, [r1, #0]
 80141e6:	4770      	bx	lr
 80141e8:	2000      	movs	r0, #0
 80141ea:	4770      	bx	lr

080141ec <racs_services__srv__Setup_Response__Sequence__init>:
 80141ec:	b530      	push	{r4, r5, lr}
 80141ee:	4604      	mov	r4, r0
 80141f0:	b087      	sub	sp, #28
 80141f2:	b148      	cbz	r0, 8014208 <racs_services__srv__Setup_Response__Sequence__init+0x1c>
 80141f4:	460d      	mov	r5, r1
 80141f6:	a801      	add	r0, sp, #4
 80141f8:	f7f9 fd18 	bl	800dc2c <rcutils_get_default_allocator>
 80141fc:	b935      	cbnz	r5, 801420c <racs_services__srv__Setup_Response__Sequence__init+0x20>
 80141fe:	462b      	mov	r3, r5
 8014200:	2001      	movs	r0, #1
 8014202:	60a5      	str	r5, [r4, #8]
 8014204:	e9c4 3500 	strd	r3, r5, [r4]
 8014208:	b007      	add	sp, #28
 801420a:	bd30      	pop	{r4, r5, pc}
 801420c:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8014210:	2101      	movs	r1, #1
 8014212:	4628      	mov	r0, r5
 8014214:	4798      	blx	r3
 8014216:	4603      	mov	r3, r0
 8014218:	2800      	cmp	r0, #0
 801421a:	d1f1      	bne.n	8014200 <racs_services__srv__Setup_Response__Sequence__init+0x14>
 801421c:	e7f4      	b.n	8014208 <racs_services__srv__Setup_Response__Sequence__init+0x1c>
 801421e:	bf00      	nop

08014220 <racs_services__srv__Setup_Response__Sequence__fini>:
 8014220:	b180      	cbz	r0, 8014244 <racs_services__srv__Setup_Response__Sequence__fini+0x24>
 8014222:	b510      	push	{r4, lr}
 8014224:	b086      	sub	sp, #24
 8014226:	4604      	mov	r4, r0
 8014228:	a801      	add	r0, sp, #4
 801422a:	f7f9 fcff 	bl	800dc2c <rcutils_get_default_allocator>
 801422e:	6820      	ldr	r0, [r4, #0]
 8014230:	b130      	cbz	r0, 8014240 <racs_services__srv__Setup_Response__Sequence__fini+0x20>
 8014232:	9b02      	ldr	r3, [sp, #8]
 8014234:	9905      	ldr	r1, [sp, #20]
 8014236:	4798      	blx	r3
 8014238:	2300      	movs	r3, #0
 801423a:	e9c4 3300 	strd	r3, r3, [r4]
 801423e:	60a3      	str	r3, [r4, #8]
 8014240:	b006      	add	sp, #24
 8014242:	bd10      	pop	{r4, pc}
 8014244:	4770      	bx	lr
 8014246:	bf00      	nop

08014248 <racs_services__srv__Setup_Event__init>:
 8014248:	b570      	push	{r4, r5, r6, lr}
 801424a:	4604      	mov	r4, r0
 801424c:	b086      	sub	sp, #24
 801424e:	b1c8      	cbz	r0, 8014284 <racs_services__srv__Setup_Event__init+0x3c>
 8014250:	f005 faea 	bl	8019828 <service_msgs__msg__ServiceEventInfo__init>
 8014254:	4605      	mov	r5, r0
 8014256:	b178      	cbz	r0, 8014278 <racs_services__srv__Setup_Event__init+0x30>
 8014258:	2600      	movs	r6, #0
 801425a:	a801      	add	r0, sp, #4
 801425c:	f7f9 fce6 	bl	800dc2c <rcutils_get_default_allocator>
 8014260:	a801      	add	r0, sp, #4
 8014262:	6326      	str	r6, [r4, #48]	; 0x30
 8014264:	e9c4 660a 	strd	r6, r6, [r4, #40]	; 0x28
 8014268:	f7f9 fce0 	bl	800dc2c <rcutils_get_default_allocator>
 801426c:	4628      	mov	r0, r5
 801426e:	63e6      	str	r6, [r4, #60]	; 0x3c
 8014270:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
 8014274:	b006      	add	sp, #24
 8014276:	bd70      	pop	{r4, r5, r6, pc}
 8014278:	4620      	mov	r0, r4
 801427a:	f7ff ff3b 	bl	80140f4 <racs_services__srv__Setup_Event__fini.part.0>
 801427e:	4628      	mov	r0, r5
 8014280:	b006      	add	sp, #24
 8014282:	bd70      	pop	{r4, r5, r6, pc}
 8014284:	4605      	mov	r5, r0
 8014286:	4628      	mov	r0, r5
 8014288:	b006      	add	sp, #24
 801428a:	bd70      	pop	{r4, r5, r6, pc}

0801428c <racs_services__srv__Setup_Event__fini>:
 801428c:	b1f0      	cbz	r0, 80142cc <racs_services__srv__Setup_Event__fini+0x40>
 801428e:	b510      	push	{r4, lr}
 8014290:	b086      	sub	sp, #24
 8014292:	4604      	mov	r4, r0
 8014294:	f005 fada 	bl	801984c <service_msgs__msg__ServiceEventInfo__fini>
 8014298:	a801      	add	r0, sp, #4
 801429a:	f7f9 fcc7 	bl	800dc2c <rcutils_get_default_allocator>
 801429e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80142a0:	b130      	cbz	r0, 80142b0 <racs_services__srv__Setup_Event__fini+0x24>
 80142a2:	9b02      	ldr	r3, [sp, #8]
 80142a4:	9905      	ldr	r1, [sp, #20]
 80142a6:	4798      	blx	r3
 80142a8:	2300      	movs	r3, #0
 80142aa:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 80142ae:	6323      	str	r3, [r4, #48]	; 0x30
 80142b0:	a801      	add	r0, sp, #4
 80142b2:	f7f9 fcbb 	bl	800dc2c <rcutils_get_default_allocator>
 80142b6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80142b8:	b130      	cbz	r0, 80142c8 <racs_services__srv__Setup_Event__fini+0x3c>
 80142ba:	9b02      	ldr	r3, [sp, #8]
 80142bc:	9905      	ldr	r1, [sp, #20]
 80142be:	4798      	blx	r3
 80142c0:	2300      	movs	r3, #0
 80142c2:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80142c6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80142c8:	b006      	add	sp, #24
 80142ca:	bd10      	pop	{r4, pc}
 80142cc:	4770      	bx	lr
 80142ce:	bf00      	nop

080142d0 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup>:
 80142d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142d4:	2900      	cmp	r1, #0
 80142d6:	d04d      	beq.n	8014374 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0xa4>
 80142d8:	4605      	mov	r5, r0
 80142da:	2800      	cmp	r0, #0
 80142dc:	d04a      	beq.n	8014374 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0xa4>
 80142de:	460e      	mov	r6, r1
 80142e0:	4698      	mov	r8, r3
 80142e2:	2040      	movs	r0, #64	; 0x40
 80142e4:	680b      	ldr	r3, [r1, #0]
 80142e6:	6909      	ldr	r1, [r1, #16]
 80142e8:	4617      	mov	r7, r2
 80142ea:	4798      	blx	r3
 80142ec:	4604      	mov	r4, r0
 80142ee:	f7ff ffab 	bl	8014248 <racs_services__srv__Setup_Event__init>
 80142f2:	4684      	mov	ip, r0
 80142f4:	b370      	cbz	r0, 8014354 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x84>
 80142f6:	782b      	ldrb	r3, [r5, #0]
 80142f8:	7023      	strb	r3, [r4, #0]
 80142fa:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
 80142fe:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8014302:	e9c4 2301 	strd	r2, r3, [r4, #4]
 8014306:	e9c4 0108 	strd	r0, r1, [r4, #32]
 801430a:	68e8      	ldr	r0, [r5, #12]
 801430c:	6929      	ldr	r1, [r5, #16]
 801430e:	696a      	ldr	r2, [r5, #20]
 8014310:	69ab      	ldr	r3, [r5, #24]
 8014312:	60e0      	str	r0, [r4, #12]
 8014314:	6121      	str	r1, [r4, #16]
 8014316:	6162      	str	r2, [r4, #20]
 8014318:	61a3      	str	r3, [r4, #24]
 801431a:	b157      	cbz	r7, 8014332 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x62>
 801431c:	2101      	movs	r1, #1
 801431e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014322:	f7ff ff27 	bl	8014174 <racs_services__srv__Setup_Request__Sequence__init>
 8014326:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8014328:	4638      	mov	r0, r7
 801432a:	f7ff ff09 	bl	8014140 <racs_services__srv__Setup_Request__copy>
 801432e:	4603      	mov	r3, r0
 8014330:	b1c0      	cbz	r0, 8014364 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x94>
 8014332:	f1b8 0f00 	cmp.w	r8, #0
 8014336:	d00a      	beq.n	801434e <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x7e>
 8014338:	2101      	movs	r1, #1
 801433a:	f104 0034 	add.w	r0, r4, #52	; 0x34
 801433e:	f7ff ff55 	bl	80141ec <racs_services__srv__Setup_Response__Sequence__init>
 8014342:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014344:	4640      	mov	r0, r8
 8014346:	f7ff ff49 	bl	80141dc <racs_services__srv__Setup_Response__copy>
 801434a:	4603      	mov	r3, r0
 801434c:	b150      	cbz	r0, 8014364 <rosidl_typesupport_c__create_service_event_message__racs_services__srv__Setup+0x94>
 801434e:	4620      	mov	r0, r4
 8014350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014354:	4620      	mov	r0, r4
 8014356:	4664      	mov	r4, ip
 8014358:	6873      	ldr	r3, [r6, #4]
 801435a:	6931      	ldr	r1, [r6, #16]
 801435c:	4798      	blx	r3
 801435e:	4620      	mov	r0, r4
 8014360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014364:	4620      	mov	r0, r4
 8014366:	461c      	mov	r4, r3
 8014368:	6872      	ldr	r2, [r6, #4]
 801436a:	6931      	ldr	r1, [r6, #16]
 801436c:	4790      	blx	r2
 801436e:	4620      	mov	r0, r4
 8014370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014374:	2400      	movs	r4, #0
 8014376:	4620      	mov	r0, r4
 8014378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801437c <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup>:
 801437c:	b1b9      	cbz	r1, 80143ae <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x32>
 801437e:	b538      	push	{r3, r4, r5, lr}
 8014380:	4605      	mov	r5, r0
 8014382:	b190      	cbz	r0, 80143aa <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x2e>
 8014384:	460c      	mov	r4, r1
 8014386:	f7ff ff81 	bl	801428c <racs_services__srv__Setup_Event__fini>
 801438a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801438c:	b110      	cbz	r0, 8014394 <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x18>
 801438e:	6863      	ldr	r3, [r4, #4]
 8014390:	6921      	ldr	r1, [r4, #16]
 8014392:	4798      	blx	r3
 8014394:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8014396:	b110      	cbz	r0, 801439e <rosidl_typesupport_c__destroy_service_event_message__racs_services__srv__Setup+0x22>
 8014398:	6863      	ldr	r3, [r4, #4]
 801439a:	6921      	ldr	r1, [r4, #16]
 801439c:	4798      	blx	r3
 801439e:	4628      	mov	r0, r5
 80143a0:	6863      	ldr	r3, [r4, #4]
 80143a2:	6921      	ldr	r1, [r4, #16]
 80143a4:	4798      	blx	r3
 80143a6:	2001      	movs	r0, #1
 80143a8:	bd38      	pop	{r3, r4, r5, pc}
 80143aa:	2000      	movs	r0, #0
 80143ac:	bd38      	pop	{r3, r4, r5, pc}
 80143ae:	2000      	movs	r0, #0
 80143b0:	4770      	bx	lr
 80143b2:	bf00      	nop

080143b4 <rcl_client_get_rmw_handle>:
 80143b4:	b118      	cbz	r0, 80143be <rcl_client_get_rmw_handle+0xa>
 80143b6:	6800      	ldr	r0, [r0, #0]
 80143b8:	b108      	cbz	r0, 80143be <rcl_client_get_rmw_handle+0xa>
 80143ba:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 80143be:	4770      	bx	lr

080143c0 <rcl_send_request>:
 80143c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80143c2:	b08b      	sub	sp, #44	; 0x2c
 80143c4:	b1e8      	cbz	r0, 8014402 <rcl_send_request+0x42>
 80143c6:	4604      	mov	r4, r0
 80143c8:	6800      	ldr	r0, [r0, #0]
 80143ca:	b1d0      	cbz	r0, 8014402 <rcl_send_request+0x42>
 80143cc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80143d0:	b1bb      	cbz	r3, 8014402 <rcl_send_request+0x42>
 80143d2:	460f      	mov	r7, r1
 80143d4:	b1d1      	cbz	r1, 801440c <rcl_send_request+0x4c>
 80143d6:	4615      	mov	r5, r2
 80143d8:	b1c2      	cbz	r2, 801440c <rcl_send_request+0x4c>
 80143da:	2105      	movs	r1, #5
 80143dc:	f500 7088 	add.w	r0, r0, #272	; 0x110
 80143e0:	f003 fa12 	bl	8017808 <__atomic_load_8>
 80143e4:	6823      	ldr	r3, [r4, #0]
 80143e6:	462a      	mov	r2, r5
 80143e8:	e9c5 0100 	strd	r0, r1, [r5]
 80143ec:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80143f0:	4639      	mov	r1, r7
 80143f2:	f004 fbd3 	bl	8018b9c <rmw_send_request>
 80143f6:	4606      	mov	r6, r0
 80143f8:	b160      	cbz	r0, 8014414 <rcl_send_request+0x54>
 80143fa:	2601      	movs	r6, #1
 80143fc:	4630      	mov	r0, r6
 80143fe:	b00b      	add	sp, #44	; 0x2c
 8014400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014402:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 8014406:	4630      	mov	r0, r6
 8014408:	b00b      	add	sp, #44	; 0x2c
 801440a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801440c:	260b      	movs	r6, #11
 801440e:	4630      	mov	r0, r6
 8014410:	b00b      	add	sp, #44	; 0x2c
 8014412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014414:	6820      	ldr	r0, [r4, #0]
 8014416:	2305      	movs	r3, #5
 8014418:	f500 7088 	add.w	r0, r0, #272	; 0x110
 801441c:	9300      	str	r3, [sp, #0]
 801441e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014422:	f003 fa5d 	bl	80178e0 <__atomic_exchange_8>
 8014426:	6823      	ldr	r3, [r4, #0]
 8014428:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 801442c:	2a00      	cmp	r2, #0
 801442e:	d0e5      	beq.n	80143fc <rcl_send_request+0x3c>
 8014430:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8014434:	a905      	add	r1, sp, #20
 8014436:	f003 ffcd 	bl	80183d4 <rmw_get_gid_for_client>
 801443a:	b970      	cbnz	r0, 801445a <rcl_send_request+0x9a>
 801443c:	6820      	ldr	r0, [r4, #0]
 801443e:	ab06      	add	r3, sp, #24
 8014440:	4631      	mov	r1, r6
 8014442:	463a      	mov	r2, r7
 8014444:	f8d0 0118 	ldr.w	r0, [r0, #280]	; 0x118
 8014448:	9302      	str	r3, [sp, #8]
 801444a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801444e:	e9cd 4500 	strd	r4, r5, [sp]
 8014452:	f001 f845 	bl	80154e0 <rcl_send_service_event_message>
 8014456:	4606      	mov	r6, r0
 8014458:	e7d0      	b.n	80143fc <rcl_send_request+0x3c>
 801445a:	f000 f877 	bl	801454c <rcl_convert_rmw_ret_to_rcl_ret>
 801445e:	4606      	mov	r6, r0
 8014460:	e7cc      	b.n	80143fc <rcl_send_request+0x3c>
 8014462:	bf00      	nop
 8014464:	0000      	movs	r0, r0
	...

08014468 <rcl_take_response>:
 8014468:	b5f0      	push	{r4, r5, r6, r7, lr}
 801446a:	468e      	mov	lr, r1
 801446c:	b095      	sub	sp, #84	; 0x54
 801446e:	460c      	mov	r4, r1
 8014470:	4616      	mov	r6, r2
 8014472:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 8014476:	4605      	mov	r5, r0
 8014478:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801447c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014480:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014484:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014488:	2d00      	cmp	r5, #0
 801448a:	d042      	beq.n	8014512 <rcl_take_response+0xaa>
 801448c:	682b      	ldr	r3, [r5, #0]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d03f      	beq.n	8014512 <rcl_take_response+0xaa>
 8014492:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8014496:	2800      	cmp	r0, #0
 8014498:	d03b      	beq.n	8014512 <rcl_take_response+0xaa>
 801449a:	2e00      	cmp	r6, #0
 801449c:	d03c      	beq.n	8014518 <rcl_take_response+0xb0>
 801449e:	2300      	movs	r3, #0
 80144a0:	4632      	mov	r2, r6
 80144a2:	a90a      	add	r1, sp, #40	; 0x28
 80144a4:	f88d 3013 	strb.w	r3, [sp, #19]
 80144a8:	f10d 0313 	add.w	r3, sp, #19
 80144ac:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8014530 <rcl_take_response+0xc8>
 80144b0:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80144b4:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80144b8:	f004 fc78 	bl	8018dac <rmw_take_response>
 80144bc:	4607      	mov	r7, r0
 80144be:	bb68      	cbnz	r0, 801451c <rcl_take_response+0xb4>
 80144c0:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80144c4:	b363      	cbz	r3, 8014520 <rcl_take_response+0xb8>
 80144c6:	682b      	ldr	r3, [r5, #0]
 80144c8:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 80144cc:	b19a      	cbz	r2, 80144f6 <rcl_take_response+0x8e>
 80144ce:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80144d2:	a905      	add	r1, sp, #20
 80144d4:	f003 ff7e 	bl	80183d4 <rmw_get_gid_for_client>
 80144d8:	bb28      	cbnz	r0, 8014526 <rcl_take_response+0xbe>
 80144da:	6829      	ldr	r1, [r5, #0]
 80144dc:	ab06      	add	r3, sp, #24
 80144de:	4632      	mov	r2, r6
 80144e0:	f8d1 0118 	ldr.w	r0, [r1, #280]	; 0x118
 80144e4:	2103      	movs	r1, #3
 80144e6:	9302      	str	r3, [sp, #8]
 80144e8:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80144ec:	e9cd 6700 	strd	r6, r7, [sp]
 80144f0:	f000 fff6 	bl	80154e0 <rcl_send_service_event_message>
 80144f4:	4607      	mov	r7, r0
 80144f6:	f10d 0e38 	add.w	lr, sp, #56	; 0x38
 80144fa:	46a4      	mov	ip, r4
 80144fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014500:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014504:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014508:	e88c 0003 	stmia.w	ip, {r0, r1}
 801450c:	4638      	mov	r0, r7
 801450e:	b015      	add	sp, #84	; 0x54
 8014510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014512:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 8014516:	e7ee      	b.n	80144f6 <rcl_take_response+0x8e>
 8014518:	270b      	movs	r7, #11
 801451a:	e7ec      	b.n	80144f6 <rcl_take_response+0x8e>
 801451c:	2701      	movs	r7, #1
 801451e:	e7ea      	b.n	80144f6 <rcl_take_response+0x8e>
 8014520:	f240 17f5 	movw	r7, #501	; 0x1f5
 8014524:	e7e7      	b.n	80144f6 <rcl_take_response+0x8e>
 8014526:	f000 f811 	bl	801454c <rcl_convert_rmw_ret_to_rcl_ret>
 801452a:	4607      	mov	r7, r0
 801452c:	e7e3      	b.n	80144f6 <rcl_take_response+0x8e>
 801452e:	bf00      	nop
	...

08014538 <rcl_client_is_valid>:
 8014538:	b130      	cbz	r0, 8014548 <rcl_client_is_valid+0x10>
 801453a:	6800      	ldr	r0, [r0, #0]
 801453c:	b120      	cbz	r0, 8014548 <rcl_client_is_valid+0x10>
 801453e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8014542:	3800      	subs	r0, #0
 8014544:	bf18      	it	ne
 8014546:	2001      	movne	r0, #1
 8014548:	4770      	bx	lr
 801454a:	bf00      	nop

0801454c <rcl_convert_rmw_ret_to_rcl_ret>:
 801454c:	280b      	cmp	r0, #11
 801454e:	dc0d      	bgt.n	801456c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8014550:	2800      	cmp	r0, #0
 8014552:	db09      	blt.n	8014568 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8014554:	280b      	cmp	r0, #11
 8014556:	d807      	bhi.n	8014568 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8014558:	e8df f000 	tbb	[pc, r0]
 801455c:	07060607 	.word	0x07060607
 8014560:	06060606 	.word	0x06060606
 8014564:	07070606 	.word	0x07070606
 8014568:	2001      	movs	r0, #1
 801456a:	4770      	bx	lr
 801456c:	28cb      	cmp	r0, #203	; 0xcb
 801456e:	bf18      	it	ne
 8014570:	2001      	movne	r0, #1
 8014572:	4770      	bx	lr

08014574 <rcl_get_zero_initialized_context>:
 8014574:	4a03      	ldr	r2, [pc, #12]	; (8014584 <rcl_get_zero_initialized_context+0x10>)
 8014576:	4603      	mov	r3, r0
 8014578:	e892 0003 	ldmia.w	r2, {r0, r1}
 801457c:	e883 0003 	stmia.w	r3, {r0, r1}
 8014580:	4618      	mov	r0, r3
 8014582:	4770      	bx	lr
 8014584:	0801ea20 	.word	0x0801ea20

08014588 <rcl_context_is_valid>:
 8014588:	b118      	cbz	r0, 8014592 <rcl_context_is_valid+0xa>
 801458a:	6840      	ldr	r0, [r0, #4]
 801458c:	3800      	subs	r0, #0
 801458e:	bf18      	it	ne
 8014590:	2001      	movne	r0, #1
 8014592:	4770      	bx	lr

08014594 <__cleanup_context>:
 8014594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014598:	4606      	mov	r6, r0
 801459a:	2300      	movs	r3, #0
 801459c:	6800      	ldr	r0, [r0, #0]
 801459e:	6073      	str	r3, [r6, #4]
 80145a0:	2800      	cmp	r0, #0
 80145a2:	d049      	beq.n	8014638 <__cleanup_context+0xa4>
 80145a4:	6947      	ldr	r7, [r0, #20]
 80145a6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80145aa:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80145ae:	b137      	cbz	r7, 80145be <__cleanup_context+0x2a>
 80145b0:	3014      	adds	r0, #20
 80145b2:	f000 f9e7 	bl	8014984 <rcl_init_options_fini>
 80145b6:	4607      	mov	r7, r0
 80145b8:	2800      	cmp	r0, #0
 80145ba:	d144      	bne.n	8014646 <__cleanup_context+0xb2>
 80145bc:	6830      	ldr	r0, [r6, #0]
 80145be:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80145c0:	b143      	cbz	r3, 80145d4 <__cleanup_context+0x40>
 80145c2:	3028      	adds	r0, #40	; 0x28
 80145c4:	f004 f930 	bl	8018828 <rmw_context_fini>
 80145c8:	b118      	cbz	r0, 80145d2 <__cleanup_context+0x3e>
 80145ca:	2f00      	cmp	r7, #0
 80145cc:	d03e      	beq.n	801464c <__cleanup_context+0xb8>
 80145ce:	f7f9 fb5f 	bl	800dc90 <rcutils_reset_error>
 80145d2:	6830      	ldr	r0, [r6, #0]
 80145d4:	6a03      	ldr	r3, [r0, #32]
 80145d6:	b1db      	cbz	r3, 8014610 <__cleanup_context+0x7c>
 80145d8:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80145dc:	2a01      	cmp	r2, #1
 80145de:	f17c 0100 	sbcs.w	r1, ip, #0
 80145e2:	db11      	blt.n	8014608 <__cleanup_context+0x74>
 80145e4:	2400      	movs	r4, #0
 80145e6:	4625      	mov	r5, r4
 80145e8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80145ec:	4649      	mov	r1, r9
 80145ee:	b1b8      	cbz	r0, 8014620 <__cleanup_context+0x8c>
 80145f0:	47c0      	blx	r8
 80145f2:	6833      	ldr	r3, [r6, #0]
 80145f4:	3401      	adds	r4, #1
 80145f6:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80145fa:	f145 0500 	adc.w	r5, r5, #0
 80145fe:	6a1b      	ldr	r3, [r3, #32]
 8014600:	4294      	cmp	r4, r2
 8014602:	eb75 010c 	sbcs.w	r1, r5, ip
 8014606:	dbef      	blt.n	80145e8 <__cleanup_context+0x54>
 8014608:	4618      	mov	r0, r3
 801460a:	4649      	mov	r1, r9
 801460c:	47c0      	blx	r8
 801460e:	6830      	ldr	r0, [r6, #0]
 8014610:	4649      	mov	r1, r9
 8014612:	47c0      	blx	r8
 8014614:	2300      	movs	r3, #0
 8014616:	4638      	mov	r0, r7
 8014618:	e9c6 3300 	strd	r3, r3, [r6]
 801461c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014620:	3401      	adds	r4, #1
 8014622:	f145 0500 	adc.w	r5, r5, #0
 8014626:	4294      	cmp	r4, r2
 8014628:	eb75 010c 	sbcs.w	r1, r5, ip
 801462c:	dbdc      	blt.n	80145e8 <__cleanup_context+0x54>
 801462e:	4618      	mov	r0, r3
 8014630:	4649      	mov	r1, r9
 8014632:	47c0      	blx	r8
 8014634:	6830      	ldr	r0, [r6, #0]
 8014636:	e7eb      	b.n	8014610 <__cleanup_context+0x7c>
 8014638:	4607      	mov	r7, r0
 801463a:	2300      	movs	r3, #0
 801463c:	4638      	mov	r0, r7
 801463e:	e9c6 3300 	strd	r3, r3, [r6]
 8014642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014646:	f7f9 fb23 	bl	800dc90 <rcutils_reset_error>
 801464a:	e7b7      	b.n	80145bc <__cleanup_context+0x28>
 801464c:	f7ff ff7e 	bl	801454c <rcl_convert_rmw_ret_to_rcl_ret>
 8014650:	4607      	mov	r7, r0
 8014652:	e7bc      	b.n	80145ce <__cleanup_context+0x3a>

08014654 <rcl_init>:
 8014654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014658:	1e05      	subs	r5, r0, #0
 801465a:	b0a7      	sub	sp, #156	; 0x9c
 801465c:	460e      	mov	r6, r1
 801465e:	4690      	mov	r8, r2
 8014660:	461f      	mov	r7, r3
 8014662:	f340 80a0 	ble.w	80147a6 <rcl_init+0x152>
 8014666:	2900      	cmp	r1, #0
 8014668:	f000 80a0 	beq.w	80147ac <rcl_init+0x158>
 801466c:	f1a1 0e04 	sub.w	lr, r1, #4
 8014670:	f04f 0c00 	mov.w	ip, #0
 8014674:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8014678:	f10c 0c01 	add.w	ip, ip, #1
 801467c:	2c00      	cmp	r4, #0
 801467e:	f000 8095 	beq.w	80147ac <rcl_init+0x158>
 8014682:	4565      	cmp	r5, ip
 8014684:	d1f6      	bne.n	8014674 <rcl_init+0x20>
 8014686:	f1b8 0f00 	cmp.w	r8, #0
 801468a:	f000 808f 	beq.w	80147ac <rcl_init+0x158>
 801468e:	f8d8 4000 	ldr.w	r4, [r8]
 8014692:	2c00      	cmp	r4, #0
 8014694:	f000 808a 	beq.w	80147ac <rcl_init+0x158>
 8014698:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 801469c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801469e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146a2:	6823      	ldr	r3, [r4, #0]
 80146a4:	a821      	add	r0, sp, #132	; 0x84
 80146a6:	f8cc 3000 	str.w	r3, [ip]
 80146aa:	f7f9 facd 	bl	800dc48 <rcutils_allocator_is_valid>
 80146ae:	f080 0001 	eor.w	r0, r0, #1
 80146b2:	b2c0      	uxtb	r0, r0
 80146b4:	2800      	cmp	r0, #0
 80146b6:	d179      	bne.n	80147ac <rcl_init+0x158>
 80146b8:	2f00      	cmp	r7, #0
 80146ba:	d077      	beq.n	80147ac <rcl_init+0x158>
 80146bc:	683b      	ldr	r3, [r7, #0]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d179      	bne.n	80147b6 <rcl_init+0x162>
 80146c2:	2198      	movs	r1, #152	; 0x98
 80146c4:	2001      	movs	r0, #1
 80146c6:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 80146ca:	4798      	blx	r3
 80146cc:	4604      	mov	r4, r0
 80146ce:	6038      	str	r0, [r7, #0]
 80146d0:	2800      	cmp	r0, #0
 80146d2:	f000 80cd 	beq.w	8014870 <rcl_init+0x21c>
 80146d6:	a802      	add	r0, sp, #8
 80146d8:	f003 fbea 	bl	8017eb0 <rmw_get_zero_initialized_context>
 80146dc:	a902      	add	r1, sp, #8
 80146de:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80146e2:	2270      	movs	r2, #112	; 0x70
 80146e4:	f008 f957 	bl	801c996 <memcpy>
 80146e8:	f8d7 e000 	ldr.w	lr, [r7]
 80146ec:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 80146f0:	4674      	mov	r4, lr
 80146f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80146f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80146f8:	f8dc 3000 	ldr.w	r3, [ip]
 80146fc:	f10e 0114 	add.w	r1, lr, #20
 8014700:	4640      	mov	r0, r8
 8014702:	6023      	str	r3, [r4, #0]
 8014704:	f000 f968 	bl	80149d8 <rcl_init_options_copy>
 8014708:	4604      	mov	r4, r0
 801470a:	2800      	cmp	r0, #0
 801470c:	d144      	bne.n	8014798 <rcl_init+0x144>
 801470e:	f8d7 9000 	ldr.w	r9, [r7]
 8014712:	ea4f 7ae5 	mov.w	sl, r5, asr #31
 8014716:	f8c9 0020 	str.w	r0, [r9, #32]
 801471a:	f8c9 5018 	str.w	r5, [r9, #24]
 801471e:	f8c9 a01c 	str.w	sl, [r9, #28]
 8014722:	2d00      	cmp	r5, #0
 8014724:	d04e      	beq.n	80147c4 <rcl_init+0x170>
 8014726:	2e00      	cmp	r6, #0
 8014728:	d04c      	beq.n	80147c4 <rcl_init+0x170>
 801472a:	2104      	movs	r1, #4
 801472c:	4628      	mov	r0, r5
 801472e:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 8014732:	4798      	blx	r3
 8014734:	f8c9 0020 	str.w	r0, [r9, #32]
 8014738:	f8d7 9000 	ldr.w	r9, [r7]
 801473c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8014740:	46cb      	mov	fp, r9
 8014742:	b343      	cbz	r3, 8014796 <rcl_init+0x142>
 8014744:	2d01      	cmp	r5, #1
 8014746:	f17a 0300 	sbcs.w	r3, sl, #0
 801474a:	db3b      	blt.n	80147c4 <rcl_init+0x170>
 801474c:	2400      	movs	r4, #0
 801474e:	3e04      	subs	r6, #4
 8014750:	46a1      	mov	r9, r4
 8014752:	e00b      	b.n	801476c <rcl_init+0x118>
 8014754:	6831      	ldr	r1, [r6, #0]
 8014756:	f008 f91e 	bl	801c996 <memcpy>
 801475a:	3401      	adds	r4, #1
 801475c:	f149 0900 	adc.w	r9, r9, #0
 8014760:	45ca      	cmp	sl, r9
 8014762:	bf08      	it	eq
 8014764:	42a5      	cmpeq	r5, r4
 8014766:	d02b      	beq.n	80147c0 <rcl_init+0x16c>
 8014768:	f8d7 b000 	ldr.w	fp, [r7]
 801476c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8014770:	f7eb fdc6 	bl	8000300 <strlen>
 8014774:	1c42      	adds	r2, r0, #1
 8014776:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014778:	4610      	mov	r0, r2
 801477a:	9925      	ldr	r1, [sp, #148]	; 0x94
 801477c:	f8db b020 	ldr.w	fp, [fp, #32]
 8014780:	9201      	str	r2, [sp, #4]
 8014782:	4798      	blx	r3
 8014784:	683b      	ldr	r3, [r7, #0]
 8014786:	f84b 0024 	str.w	r0, [fp, r4, lsl #2]
 801478a:	6a1b      	ldr	r3, [r3, #32]
 801478c:	9a01      	ldr	r2, [sp, #4]
 801478e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014792:	2800      	cmp	r0, #0
 8014794:	d1de      	bne.n	8014754 <rcl_init+0x100>
 8014796:	240a      	movs	r4, #10
 8014798:	4638      	mov	r0, r7
 801479a:	f7ff fefb 	bl	8014594 <__cleanup_context>
 801479e:	4620      	mov	r0, r4
 80147a0:	b027      	add	sp, #156	; 0x9c
 80147a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147a6:	2900      	cmp	r1, #0
 80147a8:	f43f af6d 	beq.w	8014686 <rcl_init+0x32>
 80147ac:	240b      	movs	r4, #11
 80147ae:	4620      	mov	r0, r4
 80147b0:	b027      	add	sp, #156	; 0x9c
 80147b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147b6:	2464      	movs	r4, #100	; 0x64
 80147b8:	4620      	mov	r0, r4
 80147ba:	b027      	add	sp, #156	; 0x9c
 80147bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147c0:	f8d7 9000 	ldr.w	r9, [r7]
 80147c4:	493f      	ldr	r1, [pc, #252]	; (80148c4 <rcl_init+0x270>)
 80147c6:	680b      	ldr	r3, [r1, #0]
 80147c8:	3301      	adds	r3, #1
 80147ca:	d04c      	beq.n	8014866 <rcl_init+0x212>
 80147cc:	461a      	mov	r2, r3
 80147ce:	2000      	movs	r0, #0
 80147d0:	600b      	str	r3, [r1, #0]
 80147d2:	f8d9 5014 	ldr.w	r5, [r9, #20]
 80147d6:	607b      	str	r3, [r7, #4]
 80147d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80147da:	3301      	adds	r3, #1
 80147dc:	e9c5 2006 	strd	r2, r0, [r5, #24]
 80147e0:	d05d      	beq.n	801489e <rcl_init+0x24a>
 80147e2:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d044      	beq.n	8014874 <rcl_init+0x220>
 80147ea:	2b01      	cmp	r3, #1
 80147ec:	d04e      	beq.n	801488c <rcl_init+0x238>
 80147ee:	f8d8 3000 	ldr.w	r3, [r8]
 80147f2:	f105 0634 	add.w	r6, r5, #52	; 0x34
 80147f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d05a      	beq.n	80148b4 <rcl_init+0x260>
 80147fe:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8014800:	b953      	cbnz	r3, 8014818 <rcl_init+0x1c4>
 8014802:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8014806:	2801      	cmp	r0, #1
 8014808:	d008      	beq.n	801481c <rcl_init+0x1c8>
 801480a:	a921      	add	r1, sp, #132	; 0x84
 801480c:	4630      	mov	r0, r6
 801480e:	f006 fceb 	bl	801b1e8 <rcl_get_discovery_static_peers>
 8014812:	4604      	mov	r4, r0
 8014814:	2800      	cmp	r0, #0
 8014816:	d1bf      	bne.n	8014798 <rcl_init+0x144>
 8014818:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 801481c:	f006 fcda 	bl	801b1d4 <rcl_automatic_discovery_range_to_string>
 8014820:	683b      	ldr	r3, [r7, #0]
 8014822:	aa20      	add	r2, sp, #128	; 0x80
 8014824:	a91f      	add	r1, sp, #124	; 0x7c
 8014826:	695b      	ldr	r3, [r3, #20]
 8014828:	6d58      	ldr	r0, [r3, #84]	; 0x54
 801482a:	f001 fc79 	bl	8016120 <rcl_validate_enclave_name>
 801482e:	4604      	mov	r4, r0
 8014830:	2800      	cmp	r0, #0
 8014832:	d1b1      	bne.n	8014798 <rcl_init+0x144>
 8014834:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014836:	bb83      	cbnz	r3, 801489a <rcl_init+0x246>
 8014838:	6839      	ldr	r1, [r7, #0]
 801483a:	694b      	ldr	r3, [r1, #20]
 801483c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8014840:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8014842:	f000 fc97 	bl	8015174 <rcl_get_security_options_from_environment>
 8014846:	4604      	mov	r4, r0
 8014848:	2800      	cmp	r0, #0
 801484a:	d1a5      	bne.n	8014798 <rcl_init+0x144>
 801484c:	6839      	ldr	r1, [r7, #0]
 801484e:	6948      	ldr	r0, [r1, #20]
 8014850:	3128      	adds	r1, #40	; 0x28
 8014852:	3018      	adds	r0, #24
 8014854:	f003 feb2 	bl	80185bc <rmw_init>
 8014858:	4604      	mov	r4, r0
 801485a:	2800      	cmp	r0, #0
 801485c:	d0a7      	beq.n	80147ae <rcl_init+0x15a>
 801485e:	f7ff fe75 	bl	801454c <rcl_convert_rmw_ret_to_rcl_ret>
 8014862:	4604      	mov	r4, r0
 8014864:	e798      	b.n	8014798 <rcl_init+0x144>
 8014866:	2201      	movs	r2, #1
 8014868:	4618      	mov	r0, r3
 801486a:	600a      	str	r2, [r1, #0]
 801486c:	4613      	mov	r3, r2
 801486e:	e7b0      	b.n	80147d2 <rcl_init+0x17e>
 8014870:	240a      	movs	r4, #10
 8014872:	e79c      	b.n	80147ae <rcl_init+0x15a>
 8014874:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8014878:	f000 f90c 	bl	8014a94 <rcl_get_localhost_only>
 801487c:	4604      	mov	r4, r0
 801487e:	2800      	cmp	r0, #0
 8014880:	d18a      	bne.n	8014798 <rcl_init+0x144>
 8014882:	683a      	ldr	r2, [r7, #0]
 8014884:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8014888:	6955      	ldr	r5, [r2, #20]
 801488a:	e7ae      	b.n	80147ea <rcl_init+0x196>
 801488c:	2302      	movs	r3, #2
 801488e:	2200      	movs	r2, #0
 8014890:	4618      	mov	r0, r3
 8014892:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
 8014896:	63ea      	str	r2, [r5, #60]	; 0x3c
 8014898:	e7c0      	b.n	801481c <rcl_init+0x1c8>
 801489a:	2401      	movs	r4, #1
 801489c:	e77c      	b.n	8014798 <rcl_init+0x144>
 801489e:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80148a2:	f006 fd07 	bl	801b2b4 <rcl_get_default_domain_id>
 80148a6:	4604      	mov	r4, r0
 80148a8:	2800      	cmp	r0, #0
 80148aa:	f47f af75 	bne.w	8014798 <rcl_init+0x144>
 80148ae:	683b      	ldr	r3, [r7, #0]
 80148b0:	695d      	ldr	r5, [r3, #20]
 80148b2:	e796      	b.n	80147e2 <rcl_init+0x18e>
 80148b4:	4630      	mov	r0, r6
 80148b6:	f006 fc4b 	bl	801b150 <rcl_get_automatic_discovery_range>
 80148ba:	4604      	mov	r4, r0
 80148bc:	2800      	cmp	r0, #0
 80148be:	d09e      	beq.n	80147fe <rcl_init+0x1aa>
 80148c0:	e76a      	b.n	8014798 <rcl_init+0x144>
 80148c2:	bf00      	nop
 80148c4:	200107dc 	.word	0x200107dc

080148c8 <rcl_get_zero_initialized_init_options>:
 80148c8:	2000      	movs	r0, #0
 80148ca:	4770      	bx	lr

080148cc <rcl_init_options_init>:
 80148cc:	b084      	sub	sp, #16
 80148ce:	b570      	push	{r4, r5, r6, lr}
 80148d0:	b09e      	sub	sp, #120	; 0x78
 80148d2:	ad23      	add	r5, sp, #140	; 0x8c
 80148d4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 80148d8:	2800      	cmp	r0, #0
 80148da:	d046      	beq.n	801496a <rcl_init_options_init+0x9e>
 80148dc:	6803      	ldr	r3, [r0, #0]
 80148de:	4604      	mov	r4, r0
 80148e0:	b133      	cbz	r3, 80148f0 <rcl_init_options_init+0x24>
 80148e2:	2564      	movs	r5, #100	; 0x64
 80148e4:	4628      	mov	r0, r5
 80148e6:	b01e      	add	sp, #120	; 0x78
 80148e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80148ec:	b004      	add	sp, #16
 80148ee:	4770      	bx	lr
 80148f0:	4628      	mov	r0, r5
 80148f2:	f7f9 f9a9 	bl	800dc48 <rcutils_allocator_is_valid>
 80148f6:	2800      	cmp	r0, #0
 80148f8:	d037      	beq.n	801496a <rcl_init_options_init+0x9e>
 80148fa:	46ae      	mov	lr, r5
 80148fc:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8014900:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014904:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014908:	f8de 3000 	ldr.w	r3, [lr]
 801490c:	2070      	movs	r0, #112	; 0x70
 801490e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8014910:	f8cc 3000 	str.w	r3, [ip]
 8014914:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014916:	4798      	blx	r3
 8014918:	4606      	mov	r6, r0
 801491a:	6020      	str	r0, [r4, #0]
 801491c:	b338      	cbz	r0, 801496e <rcl_init_options_init+0xa2>
 801491e:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8014922:	4686      	mov	lr, r0
 8014924:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014928:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801492c:	f8dc 3000 	ldr.w	r3, [ip]
 8014930:	a802      	add	r0, sp, #8
 8014932:	f8ce 3000 	str.w	r3, [lr]
 8014936:	f003 facf 	bl	8017ed8 <rmw_get_zero_initialized_init_options>
 801493a:	2258      	movs	r2, #88	; 0x58
 801493c:	a902      	add	r1, sp, #8
 801493e:	f106 0018 	add.w	r0, r6, #24
 8014942:	f008 f828 	bl	801c996 <memcpy>
 8014946:	ab26      	add	r3, sp, #152	; 0x98
 8014948:	6826      	ldr	r6, [r4, #0]
 801494a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801494e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8014952:	f106 0018 	add.w	r0, r6, #24
 8014956:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 801495a:	f003 fd5f 	bl	801841c <rmw_init_options_init>
 801495e:	4605      	mov	r5, r0
 8014960:	b938      	cbnz	r0, 8014972 <rcl_init_options_init+0xa6>
 8014962:	6823      	ldr	r3, [r4, #0]
 8014964:	f883 0034 	strb.w	r0, [r3, #52]	; 0x34
 8014968:	e7bc      	b.n	80148e4 <rcl_init_options_init+0x18>
 801496a:	250b      	movs	r5, #11
 801496c:	e7ba      	b.n	80148e4 <rcl_init_options_init+0x18>
 801496e:	250a      	movs	r5, #10
 8014970:	e7b8      	b.n	80148e4 <rcl_init_options_init+0x18>
 8014972:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8014974:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8014976:	6820      	ldr	r0, [r4, #0]
 8014978:	4798      	blx	r3
 801497a:	4628      	mov	r0, r5
 801497c:	f7ff fde6 	bl	801454c <rcl_convert_rmw_ret_to_rcl_ret>
 8014980:	4605      	mov	r5, r0
 8014982:	e7af      	b.n	80148e4 <rcl_init_options_init+0x18>

08014984 <rcl_init_options_fini>:
 8014984:	b530      	push	{r4, r5, lr}
 8014986:	b087      	sub	sp, #28
 8014988:	b1f0      	cbz	r0, 80149c8 <rcl_init_options_fini+0x44>
 801498a:	6803      	ldr	r3, [r0, #0]
 801498c:	4604      	mov	r4, r0
 801498e:	b1db      	cbz	r3, 80149c8 <rcl_init_options_fini+0x44>
 8014990:	469c      	mov	ip, r3
 8014992:	f10d 0e04 	add.w	lr, sp, #4
 8014996:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801499a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801499e:	f8dc 3000 	ldr.w	r3, [ip]
 80149a2:	a801      	add	r0, sp, #4
 80149a4:	f8ce 3000 	str.w	r3, [lr]
 80149a8:	f7f9 f94e 	bl	800dc48 <rcutils_allocator_is_valid>
 80149ac:	b160      	cbz	r0, 80149c8 <rcl_init_options_fini+0x44>
 80149ae:	6820      	ldr	r0, [r4, #0]
 80149b0:	3018      	adds	r0, #24
 80149b2:	f003 fdcd 	bl	8018550 <rmw_init_options_fini>
 80149b6:	4605      	mov	r5, r0
 80149b8:	b950      	cbnz	r0, 80149d0 <rcl_init_options_fini+0x4c>
 80149ba:	6820      	ldr	r0, [r4, #0]
 80149bc:	9b02      	ldr	r3, [sp, #8]
 80149be:	9905      	ldr	r1, [sp, #20]
 80149c0:	4798      	blx	r3
 80149c2:	4628      	mov	r0, r5
 80149c4:	b007      	add	sp, #28
 80149c6:	bd30      	pop	{r4, r5, pc}
 80149c8:	250b      	movs	r5, #11
 80149ca:	4628      	mov	r0, r5
 80149cc:	b007      	add	sp, #28
 80149ce:	bd30      	pop	{r4, r5, pc}
 80149d0:	f7ff fdbc 	bl	801454c <rcl_convert_rmw_ret_to_rcl_ret>
 80149d4:	4605      	mov	r5, r0
 80149d6:	e7f8      	b.n	80149ca <rcl_init_options_fini+0x46>

080149d8 <rcl_init_options_copy>:
 80149d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80149da:	b09d      	sub	sp, #116	; 0x74
 80149dc:	2800      	cmp	r0, #0
 80149de:	d04d      	beq.n	8014a7c <rcl_init_options_copy+0xa4>
 80149e0:	4604      	mov	r4, r0
 80149e2:	6800      	ldr	r0, [r0, #0]
 80149e4:	2800      	cmp	r0, #0
 80149e6:	d049      	beq.n	8014a7c <rcl_init_options_copy+0xa4>
 80149e8:	460d      	mov	r5, r1
 80149ea:	f7f9 f92d 	bl	800dc48 <rcutils_allocator_is_valid>
 80149ee:	2d00      	cmp	r5, #0
 80149f0:	d044      	beq.n	8014a7c <rcl_init_options_copy+0xa4>
 80149f2:	f080 0001 	eor.w	r0, r0, #1
 80149f6:	b2c0      	uxtb	r0, r0
 80149f8:	2800      	cmp	r0, #0
 80149fa:	d13f      	bne.n	8014a7c <rcl_init_options_copy+0xa4>
 80149fc:	682b      	ldr	r3, [r5, #0]
 80149fe:	b11b      	cbz	r3, 8014a08 <rcl_init_options_copy+0x30>
 8014a00:	2464      	movs	r4, #100	; 0x64
 8014a02:	4620      	mov	r0, r4
 8014a04:	b01d      	add	sp, #116	; 0x74
 8014a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a08:	6826      	ldr	r6, [r4, #0]
 8014a0a:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 8014a0e:	46b6      	mov	lr, r6
 8014a10:	6837      	ldr	r7, [r6, #0]
 8014a12:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014a16:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014a1a:	f8de 3000 	ldr.w	r3, [lr]
 8014a1e:	2070      	movs	r0, #112	; 0x70
 8014a20:	4619      	mov	r1, r3
 8014a22:	f8cc 3000 	str.w	r3, [ip]
 8014a26:	47b8      	blx	r7
 8014a28:	4606      	mov	r6, r0
 8014a2a:	6028      	str	r0, [r5, #0]
 8014a2c:	b350      	cbz	r0, 8014a84 <rcl_init_options_copy+0xac>
 8014a2e:	f10d 0c5c 	add.w	ip, sp, #92	; 0x5c
 8014a32:	4686      	mov	lr, r0
 8014a34:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014a38:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014a3c:	f8dc 3000 	ldr.w	r3, [ip]
 8014a40:	4668      	mov	r0, sp
 8014a42:	f8ce 3000 	str.w	r3, [lr]
 8014a46:	f003 fa47 	bl	8017ed8 <rmw_get_zero_initialized_init_options>
 8014a4a:	2258      	movs	r2, #88	; 0x58
 8014a4c:	4669      	mov	r1, sp
 8014a4e:	f106 0018 	add.w	r0, r6, #24
 8014a52:	f007 ffa0 	bl	801c996 <memcpy>
 8014a56:	6820      	ldr	r0, [r4, #0]
 8014a58:	6829      	ldr	r1, [r5, #0]
 8014a5a:	3018      	adds	r0, #24
 8014a5c:	3118      	adds	r1, #24
 8014a5e:	f003 fd45 	bl	80184ec <rmw_init_options_copy>
 8014a62:	4604      	mov	r4, r0
 8014a64:	2800      	cmp	r0, #0
 8014a66:	d0cc      	beq.n	8014a02 <rcl_init_options_copy+0x2a>
 8014a68:	f7f9 f8fc 	bl	800dc64 <rcutils_get_error_string>
 8014a6c:	f7f9 f910 	bl	800dc90 <rcutils_reset_error>
 8014a70:	4628      	mov	r0, r5
 8014a72:	f7ff ff87 	bl	8014984 <rcl_init_options_fini>
 8014a76:	b138      	cbz	r0, 8014a88 <rcl_init_options_copy+0xb0>
 8014a78:	4604      	mov	r4, r0
 8014a7a:	e7c2      	b.n	8014a02 <rcl_init_options_copy+0x2a>
 8014a7c:	240b      	movs	r4, #11
 8014a7e:	4620      	mov	r0, r4
 8014a80:	b01d      	add	sp, #116	; 0x74
 8014a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a84:	240a      	movs	r4, #10
 8014a86:	e7bc      	b.n	8014a02 <rcl_init_options_copy+0x2a>
 8014a88:	4620      	mov	r0, r4
 8014a8a:	b01d      	add	sp, #116	; 0x74
 8014a8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014a90:	f7ff bd5c 	b.w	801454c <rcl_convert_rmw_ret_to_rcl_ret>

08014a94 <rcl_get_localhost_only>:
 8014a94:	b510      	push	{r4, lr}
 8014a96:	2300      	movs	r3, #0
 8014a98:	b082      	sub	sp, #8
 8014a9a:	9301      	str	r3, [sp, #4]
 8014a9c:	b1c0      	cbz	r0, 8014ad0 <rcl_get_localhost_only+0x3c>
 8014a9e:	4604      	mov	r4, r0
 8014aa0:	a901      	add	r1, sp, #4
 8014aa2:	480d      	ldr	r0, [pc, #52]	; (8014ad8 <rcl_get_localhost_only+0x44>)
 8014aa4:	f002 ff54 	bl	8017950 <rcutils_get_env>
 8014aa8:	b110      	cbz	r0, 8014ab0 <rcl_get_localhost_only+0x1c>
 8014aaa:	2001      	movs	r0, #1
 8014aac:	b002      	add	sp, #8
 8014aae:	bd10      	pop	{r4, pc}
 8014ab0:	9b01      	ldr	r3, [sp, #4]
 8014ab2:	b10b      	cbz	r3, 8014ab8 <rcl_get_localhost_only+0x24>
 8014ab4:	781b      	ldrb	r3, [r3, #0]
 8014ab6:	b923      	cbnz	r3, 8014ac2 <rcl_get_localhost_only+0x2e>
 8014ab8:	2300      	movs	r3, #0
 8014aba:	4618      	mov	r0, r3
 8014abc:	7023      	strb	r3, [r4, #0]
 8014abe:	b002      	add	sp, #8
 8014ac0:	bd10      	pop	{r4, pc}
 8014ac2:	2b31      	cmp	r3, #49	; 0x31
 8014ac4:	bf0c      	ite	eq
 8014ac6:	2301      	moveq	r3, #1
 8014ac8:	2302      	movne	r3, #2
 8014aca:	7023      	strb	r3, [r4, #0]
 8014acc:	b002      	add	sp, #8
 8014ace:	bd10      	pop	{r4, pc}
 8014ad0:	200b      	movs	r0, #11
 8014ad2:	b002      	add	sp, #8
 8014ad4:	bd10      	pop	{r4, pc}
 8014ad6:	bf00      	nop
 8014ad8:	0801ea28 	.word	0x0801ea28

08014adc <rcl_get_zero_initialized_node>:
 8014adc:	4a03      	ldr	r2, [pc, #12]	; (8014aec <rcl_get_zero_initialized_node+0x10>)
 8014ade:	4603      	mov	r3, r0
 8014ae0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014ae4:	e883 0003 	stmia.w	r3, {r0, r1}
 8014ae8:	4618      	mov	r0, r3
 8014aea:	4770      	bx	lr
 8014aec:	0801ea6c 	.word	0x0801ea6c

08014af0 <rcl_node_init>:
 8014af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014af4:	b0ab      	sub	sp, #172	; 0xac
 8014af6:	4604      	mov	r4, r0
 8014af8:	460e      	mov	r6, r1
 8014afa:	4615      	mov	r5, r2
 8014afc:	f8dd 80d0 	ldr.w	r8, [sp, #208]	; 0xd0
 8014b00:	a825      	add	r0, sp, #148	; 0x94
 8014b02:	461f      	mov	r7, r3
 8014b04:	f006 fe4a 	bl	801b79c <rcl_guard_condition_get_default_options>
 8014b08:	f1b8 0f00 	cmp.w	r8, #0
 8014b0c:	f000 80f3 	beq.w	8014cf6 <rcl_node_init+0x206>
 8014b10:	4640      	mov	r0, r8
 8014b12:	f7f9 f899 	bl	800dc48 <rcutils_allocator_is_valid>
 8014b16:	2d00      	cmp	r5, #0
 8014b18:	bf18      	it	ne
 8014b1a:	2c00      	cmpne	r4, #0
 8014b1c:	f080 0001 	eor.w	r0, r0, #1
 8014b20:	bf0c      	ite	eq
 8014b22:	f04f 0c01 	moveq.w	ip, #1
 8014b26:	f04f 0c00 	movne.w	ip, #0
 8014b2a:	2e00      	cmp	r6, #0
 8014b2c:	bf08      	it	eq
 8014b2e:	f04c 0c01 	orreq.w	ip, ip, #1
 8014b32:	ea4c 0c00 	orr.w	ip, ip, r0
 8014b36:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 8014b3a:	f040 80dc 	bne.w	8014cf6 <rcl_node_init+0x206>
 8014b3e:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8014b42:	f1ba 0f00 	cmp.w	sl, #0
 8014b46:	f040 80fc 	bne.w	8014d42 <rcl_node_init+0x252>
 8014b4a:	2f00      	cmp	r7, #0
 8014b4c:	f000 80d3 	beq.w	8014cf6 <rcl_node_init+0x206>
 8014b50:	4638      	mov	r0, r7
 8014b52:	f7ff fd19 	bl	8014588 <rcl_context_is_valid>
 8014b56:	4683      	mov	fp, r0
 8014b58:	2800      	cmp	r0, #0
 8014b5a:	f000 80d2 	beq.w	8014d02 <rcl_node_init+0x212>
 8014b5e:	4652      	mov	r2, sl
 8014b60:	4630      	mov	r0, r6
 8014b62:	a924      	add	r1, sp, #144	; 0x90
 8014b64:	f8cd a090 	str.w	sl, [sp, #144]	; 0x90
 8014b68:	f003 fb6c 	bl	8018244 <rmw_validate_node_name>
 8014b6c:	4682      	mov	sl, r0
 8014b6e:	2800      	cmp	r0, #0
 8014b70:	f040 80c3 	bne.w	8014cfa <rcl_node_init+0x20a>
 8014b74:	9824      	ldr	r0, [sp, #144]	; 0x90
 8014b76:	2800      	cmp	r0, #0
 8014b78:	f040 80f1 	bne.w	8014d5e <rcl_node_init+0x26e>
 8014b7c:	4628      	mov	r0, r5
 8014b7e:	f7eb fbbf 	bl	8000300 <strlen>
 8014b82:	2800      	cmp	r0, #0
 8014b84:	f040 80c0 	bne.w	8014d08 <rcl_node_init+0x218>
 8014b88:	4d79      	ldr	r5, [pc, #484]	; (8014d70 <rcl_node_init+0x280>)
 8014b8a:	a924      	add	r1, sp, #144	; 0x90
 8014b8c:	2200      	movs	r2, #0
 8014b8e:	4628      	mov	r0, r5
 8014b90:	f003 fb3a 	bl	8018208 <rmw_validate_namespace>
 8014b94:	4682      	mov	sl, r0
 8014b96:	2800      	cmp	r0, #0
 8014b98:	f040 80af 	bne.w	8014cfa <rcl_node_init+0x20a>
 8014b9c:	9824      	ldr	r0, [sp, #144]	; 0x90
 8014b9e:	2800      	cmp	r0, #0
 8014ba0:	f040 80d5 	bne.w	8014d4e <rcl_node_init+0x25e>
 8014ba4:	f8d8 3000 	ldr.w	r3, [r8]
 8014ba8:	2080      	movs	r0, #128	; 0x80
 8014baa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014bae:	4798      	blx	r3
 8014bb0:	4682      	mov	sl, r0
 8014bb2:	6060      	str	r0, [r4, #4]
 8014bb4:	2800      	cmp	r0, #0
 8014bb6:	f000 80cf 	beq.w	8014d58 <rcl_node_init+0x268>
 8014bba:	2200      	movs	r2, #0
 8014bbc:	2300      	movs	r3, #0
 8014bbe:	a808      	add	r0, sp, #32
 8014bc0:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 8014bc4:	e9ca 231e 	strd	r2, r3, [sl, #120]	; 0x78
 8014bc8:	f000 f922 	bl	8014e10 <rcl_node_get_default_options>
 8014bcc:	a908      	add	r1, sp, #32
 8014bce:	4650      	mov	r0, sl
 8014bd0:	2270      	movs	r2, #112	; 0x70
 8014bd2:	f007 fee0 	bl	801c996 <memcpy>
 8014bd6:	6861      	ldr	r1, [r4, #4]
 8014bd8:	4640      	mov	r0, r8
 8014bda:	6027      	str	r7, [r4, #0]
 8014bdc:	f000 f926 	bl	8014e2c <rcl_node_options_copy>
 8014be0:	2800      	cmp	r0, #0
 8014be2:	d158      	bne.n	8014c96 <rcl_node_init+0x1a6>
 8014be4:	4628      	mov	r0, r5
 8014be6:	f7eb fb8b 	bl	8000300 <strlen>
 8014bea:	4428      	add	r0, r5
 8014bec:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8014bf0:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8014bf4:	2b2f      	cmp	r3, #47	; 0x2f
 8014bf6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014bfa:	9300      	str	r3, [sp, #0]
 8014bfc:	bf0c      	ite	eq
 8014bfe:	4b5d      	ldreq	r3, [pc, #372]	; (8014d74 <rcl_node_init+0x284>)
 8014c00:	4b5d      	ldrne	r3, [pc, #372]	; (8014d78 <rcl_node_init+0x288>)
 8014c02:	9302      	str	r3, [sp, #8]
 8014c04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014c08:	9301      	str	r3, [sp, #4]
 8014c0a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8014c0e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014c12:	f002 fec5 	bl	80179a0 <rcutils_format_string_limit>
 8014c16:	6823      	ldr	r3, [r4, #0]
 8014c18:	f8ca 007c 	str.w	r0, [sl, #124]	; 0x7c
 8014c1c:	4631      	mov	r1, r6
 8014c1e:	6818      	ldr	r0, [r3, #0]
 8014c20:	462a      	mov	r2, r5
 8014c22:	6866      	ldr	r6, [r4, #4]
 8014c24:	3028      	adds	r0, #40	; 0x28
 8014c26:	f003 ff23 	bl	8018a70 <rmw_create_node>
 8014c2a:	6863      	ldr	r3, [r4, #4]
 8014c2c:	6730      	str	r0, [r6, #112]	; 0x70
 8014c2e:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8014c30:	2800      	cmp	r0, #0
 8014c32:	d032      	beq.n	8014c9a <rcl_node_init+0x1aa>
 8014c34:	f003 ffac 	bl	8018b90 <rmw_node_get_graph_guard_condition>
 8014c38:	4682      	mov	sl, r0
 8014c3a:	b360      	cbz	r0, 8014c96 <rcl_node_init+0x1a6>
 8014c3c:	f8d8 3000 	ldr.w	r3, [r8]
 8014c40:	2008      	movs	r0, #8
 8014c42:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014c46:	6866      	ldr	r6, [r4, #4]
 8014c48:	4798      	blx	r3
 8014c4a:	6863      	ldr	r3, [r4, #4]
 8014c4c:	6770      	str	r0, [r6, #116]	; 0x74
 8014c4e:	f8d3 b074 	ldr.w	fp, [r3, #116]	; 0x74
 8014c52:	f1bb 0f00 	cmp.w	fp, #0
 8014c56:	d020      	beq.n	8014c9a <rcl_node_init+0x1aa>
 8014c58:	a806      	add	r0, sp, #24
 8014c5a:	ae25      	add	r6, sp, #148	; 0x94
 8014c5c:	f006 fcc4 	bl	801b5e8 <rcl_get_zero_initialized_guard_condition>
 8014c60:	a806      	add	r0, sp, #24
 8014c62:	6863      	ldr	r3, [r4, #4]
 8014c64:	46c4      	mov	ip, r8
 8014c66:	c803      	ldmia	r0, {r0, r1}
 8014c68:	f8d3 e074 	ldr.w	lr, [r3, #116]	; 0x74
 8014c6c:	e88b 0003 	stmia.w	fp, {r0, r1}
 8014c70:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014c74:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014c76:	f8dc 3000 	ldr.w	r3, [ip]
 8014c7a:	6033      	str	r3, [r6, #0]
 8014c7c:	ab2a      	add	r3, sp, #168	; 0xa8
 8014c7e:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8014c82:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014c86:	4651      	mov	r1, sl
 8014c88:	463a      	mov	r2, r7
 8014c8a:	4670      	mov	r0, lr
 8014c8c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014c8e:	f006 fd03 	bl	801b698 <rcl_guard_condition_init_from_rmw>
 8014c92:	4682      	mov	sl, r0
 8014c94:	b328      	cbz	r0, 8014ce2 <rcl_node_init+0x1f2>
 8014c96:	6863      	ldr	r3, [r4, #4]
 8014c98:	b1f3      	cbz	r3, 8014cd8 <rcl_node_init+0x1e8>
 8014c9a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8014c9c:	b128      	cbz	r0, 8014caa <rcl_node_init+0x1ba>
 8014c9e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014ca2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014ca6:	4798      	blx	r3
 8014ca8:	6863      	ldr	r3, [r4, #4]
 8014caa:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8014cac:	b110      	cbz	r0, 8014cb4 <rcl_node_init+0x1c4>
 8014cae:	f003 fef1 	bl	8018a94 <rmw_destroy_node>
 8014cb2:	6863      	ldr	r3, [r4, #4]
 8014cb4:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8014cb6:	b148      	cbz	r0, 8014ccc <rcl_node_init+0x1dc>
 8014cb8:	f006 fd4a 	bl	801b750 <rcl_guard_condition_fini>
 8014cbc:	6863      	ldr	r3, [r4, #4]
 8014cbe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014cc2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8014cc4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014cc8:	4798      	blx	r3
 8014cca:	6863      	ldr	r3, [r4, #4]
 8014ccc:	4618      	mov	r0, r3
 8014cce:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014cd2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014cd6:	4798      	blx	r3
 8014cd8:	2300      	movs	r3, #0
 8014cda:	f04f 0a01 	mov.w	sl, #1
 8014cde:	e9c4 3300 	strd	r3, r3, [r4]
 8014ce2:	f1b9 0f00 	cmp.w	r9, #0
 8014ce6:	d008      	beq.n	8014cfa <rcl_node_init+0x20a>
 8014ce8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014cec:	4628      	mov	r0, r5
 8014cee:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014cf2:	4798      	blx	r3
 8014cf4:	e001      	b.n	8014cfa <rcl_node_init+0x20a>
 8014cf6:	f04f 0a0b 	mov.w	sl, #11
 8014cfa:	4650      	mov	r0, sl
 8014cfc:	b02b      	add	sp, #172	; 0xac
 8014cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d02:	f04f 0a65 	mov.w	sl, #101	; 0x65
 8014d06:	e7f8      	b.n	8014cfa <rcl_node_init+0x20a>
 8014d08:	782b      	ldrb	r3, [r5, #0]
 8014d0a:	2b2f      	cmp	r3, #47	; 0x2f
 8014d0c:	f43f af3d 	beq.w	8014b8a <rcl_node_init+0x9a>
 8014d10:	9503      	str	r5, [sp, #12]
 8014d12:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014d16:	9300      	str	r3, [sp, #0]
 8014d18:	4b18      	ldr	r3, [pc, #96]	; (8014d7c <rcl_node_init+0x28c>)
 8014d1a:	9302      	str	r3, [sp, #8]
 8014d1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014d20:	9301      	str	r3, [sp, #4]
 8014d22:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014d26:	f002 fe3b 	bl	80179a0 <rcutils_format_string_limit>
 8014d2a:	4605      	mov	r5, r0
 8014d2c:	b1e0      	cbz	r0, 8014d68 <rcl_node_init+0x278>
 8014d2e:	2200      	movs	r2, #0
 8014d30:	a924      	add	r1, sp, #144	; 0x90
 8014d32:	9224      	str	r2, [sp, #144]	; 0x90
 8014d34:	f003 fa68 	bl	8018208 <rmw_validate_namespace>
 8014d38:	4682      	mov	sl, r0
 8014d3a:	2800      	cmp	r0, #0
 8014d3c:	d1d4      	bne.n	8014ce8 <rcl_node_init+0x1f8>
 8014d3e:	46d9      	mov	r9, fp
 8014d40:	e72c      	b.n	8014b9c <rcl_node_init+0xac>
 8014d42:	f04f 0a64 	mov.w	sl, #100	; 0x64
 8014d46:	4650      	mov	r0, sl
 8014d48:	b02b      	add	sp, #172	; 0xac
 8014d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d4e:	f04f 0aca 	mov.w	sl, #202	; 0xca
 8014d52:	f003 fa6b 	bl	801822c <rmw_namespace_validation_result_string>
 8014d56:	e7c4      	b.n	8014ce2 <rcl_node_init+0x1f2>
 8014d58:	f04f 0a0a 	mov.w	sl, #10
 8014d5c:	e7c1      	b.n	8014ce2 <rcl_node_init+0x1f2>
 8014d5e:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 8014d62:	f003 fac3 	bl	80182ec <rmw_node_name_validation_result_string>
 8014d66:	e7c8      	b.n	8014cfa <rcl_node_init+0x20a>
 8014d68:	f04f 0a0a 	mov.w	sl, #10
 8014d6c:	e7c5      	b.n	8014cfa <rcl_node_init+0x20a>
 8014d6e:	bf00      	nop
 8014d70:	0801ea40 	.word	0x0801ea40
 8014d74:	0801e5b8 	.word	0x0801e5b8
 8014d78:	0801ea48 	.word	0x0801ea48
 8014d7c:	0801ea44 	.word	0x0801ea44

08014d80 <rcl_node_is_valid>:
 8014d80:	b130      	cbz	r0, 8014d90 <rcl_node_is_valid+0x10>
 8014d82:	6843      	ldr	r3, [r0, #4]
 8014d84:	b123      	cbz	r3, 8014d90 <rcl_node_is_valid+0x10>
 8014d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d88:	b113      	cbz	r3, 8014d90 <rcl_node_is_valid+0x10>
 8014d8a:	6800      	ldr	r0, [r0, #0]
 8014d8c:	f7ff bbfc 	b.w	8014588 <rcl_context_is_valid>
 8014d90:	2000      	movs	r0, #0
 8014d92:	4770      	bx	lr

08014d94 <rcl_node_get_name>:
 8014d94:	b120      	cbz	r0, 8014da0 <rcl_node_get_name+0xc>
 8014d96:	6840      	ldr	r0, [r0, #4]
 8014d98:	b110      	cbz	r0, 8014da0 <rcl_node_get_name+0xc>
 8014d9a:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8014d9c:	b100      	cbz	r0, 8014da0 <rcl_node_get_name+0xc>
 8014d9e:	6880      	ldr	r0, [r0, #8]
 8014da0:	4770      	bx	lr
 8014da2:	bf00      	nop

08014da4 <rcl_node_get_namespace>:
 8014da4:	b120      	cbz	r0, 8014db0 <rcl_node_get_namespace+0xc>
 8014da6:	6840      	ldr	r0, [r0, #4]
 8014da8:	b110      	cbz	r0, 8014db0 <rcl_node_get_namespace+0xc>
 8014daa:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8014dac:	b100      	cbz	r0, 8014db0 <rcl_node_get_namespace+0xc>
 8014dae:	68c0      	ldr	r0, [r0, #12]
 8014db0:	4770      	bx	lr
 8014db2:	bf00      	nop

08014db4 <rcl_node_get_options>:
 8014db4:	b128      	cbz	r0, 8014dc2 <rcl_node_get_options+0xe>
 8014db6:	6840      	ldr	r0, [r0, #4]
 8014db8:	b118      	cbz	r0, 8014dc2 <rcl_node_get_options+0xe>
 8014dba:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	bf08      	it	eq
 8014dc0:	2000      	moveq	r0, #0
 8014dc2:	4770      	bx	lr

08014dc4 <rcl_node_get_rmw_handle>:
 8014dc4:	b110      	cbz	r0, 8014dcc <rcl_node_get_rmw_handle+0x8>
 8014dc6:	6840      	ldr	r0, [r0, #4]
 8014dc8:	b100      	cbz	r0, 8014dcc <rcl_node_get_rmw_handle+0x8>
 8014dca:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8014dcc:	4770      	bx	lr
 8014dce:	bf00      	nop

08014dd0 <rcl_get_disable_loaned_message>:
 8014dd0:	b510      	push	{r4, lr}
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	b082      	sub	sp, #8
 8014dd6:	9301      	str	r3, [sp, #4]
 8014dd8:	b1a0      	cbz	r0, 8014e04 <rcl_get_disable_loaned_message+0x34>
 8014dda:	4604      	mov	r4, r0
 8014ddc:	a901      	add	r1, sp, #4
 8014dde:	480b      	ldr	r0, [pc, #44]	; (8014e0c <rcl_get_disable_loaned_message+0x3c>)
 8014de0:	f002 fdb6 	bl	8017950 <rcutils_get_env>
 8014de4:	b110      	cbz	r0, 8014dec <rcl_get_disable_loaned_message+0x1c>
 8014de6:	2001      	movs	r0, #1
 8014de8:	b002      	add	sp, #8
 8014dea:	bd10      	pop	{r4, pc}
 8014dec:	9a01      	ldr	r2, [sp, #4]
 8014dee:	2000      	movs	r0, #0
 8014df0:	7813      	ldrb	r3, [r2, #0]
 8014df2:	3b31      	subs	r3, #49	; 0x31
 8014df4:	bf08      	it	eq
 8014df6:	7853      	ldrbeq	r3, [r2, #1]
 8014df8:	fab3 f383 	clz	r3, r3
 8014dfc:	095b      	lsrs	r3, r3, #5
 8014dfe:	7023      	strb	r3, [r4, #0]
 8014e00:	b002      	add	sp, #8
 8014e02:	bd10      	pop	{r4, pc}
 8014e04:	200b      	movs	r0, #11
 8014e06:	b002      	add	sp, #8
 8014e08:	bd10      	pop	{r4, pc}
 8014e0a:	bf00      	nop
 8014e0c:	0801ea50 	.word	0x0801ea50

08014e10 <rcl_node_get_default_options>:
 8014e10:	b510      	push	{r4, lr}
 8014e12:	4604      	mov	r4, r0
 8014e14:	2270      	movs	r2, #112	; 0x70
 8014e16:	2100      	movs	r1, #0
 8014e18:	f007 fc8c 	bl	801c734 <memset>
 8014e1c:	4620      	mov	r0, r4
 8014e1e:	f7f8 ff05 	bl	800dc2c <rcutils_get_default_allocator>
 8014e22:	2301      	movs	r3, #1
 8014e24:	4620      	mov	r0, r4
 8014e26:	7523      	strb	r3, [r4, #20]
 8014e28:	bd10      	pop	{r4, pc}
 8014e2a:	bf00      	nop

08014e2c <rcl_node_options_copy>:
 8014e2c:	2800      	cmp	r0, #0
 8014e2e:	bf18      	it	ne
 8014e30:	4288      	cmpne	r0, r1
 8014e32:	d01b      	beq.n	8014e6c <rcl_node_options_copy+0x40>
 8014e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e36:	fab1 f681 	clz	r6, r1
 8014e3a:	460c      	mov	r4, r1
 8014e3c:	0976      	lsrs	r6, r6, #5
 8014e3e:	b199      	cbz	r1, 8014e68 <rcl_node_options_copy+0x3c>
 8014e40:	4605      	mov	r5, r0
 8014e42:	8a87      	ldrh	r7, [r0, #20]
 8014e44:	4684      	mov	ip, r0
 8014e46:	468e      	mov	lr, r1
 8014e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014e4a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014e4e:	682b      	ldr	r3, [r5, #0]
 8014e50:	2250      	movs	r2, #80	; 0x50
 8014e52:	f10c 0118 	add.w	r1, ip, #24
 8014e56:	f104 0018 	add.w	r0, r4, #24
 8014e5a:	f8ce 3000 	str.w	r3, [lr]
 8014e5e:	82a7      	strh	r7, [r4, #20]
 8014e60:	f007 fd99 	bl	801c996 <memcpy>
 8014e64:	4630      	mov	r0, r6
 8014e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e68:	200b      	movs	r0, #11
 8014e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e6c:	200b      	movs	r0, #11
 8014e6e:	4770      	bx	lr

08014e70 <rcl_node_resolve_name>:
 8014e70:	b082      	sub	sp, #8
 8014e72:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e76:	b091      	sub	sp, #68	; 0x44
 8014e78:	ac1a      	add	r4, sp, #104	; 0x68
 8014e7a:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 8014e7e:	e884 000c 	stmia.w	r4, {r2, r3}
 8014e82:	2800      	cmp	r0, #0
 8014e84:	d03d      	beq.n	8014f02 <rcl_node_resolve_name+0x92>
 8014e86:	460c      	mov	r4, r1
 8014e88:	4605      	mov	r5, r0
 8014e8a:	f7ff ff93 	bl	8014db4 <rcl_node_get_options>
 8014e8e:	2800      	cmp	r0, #0
 8014e90:	d03a      	beq.n	8014f08 <rcl_node_resolve_name+0x98>
 8014e92:	4628      	mov	r0, r5
 8014e94:	f7ff ff7e 	bl	8014d94 <rcl_node_get_name>
 8014e98:	4606      	mov	r6, r0
 8014e9a:	4628      	mov	r0, r5
 8014e9c:	ad0b      	add	r5, sp, #44	; 0x2c
 8014e9e:	f7ff ff81 	bl	8014da4 <rcl_node_get_namespace>
 8014ea2:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8014ea6:	4607      	mov	r7, r0
 8014ea8:	46ac      	mov	ip, r5
 8014eaa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014eae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014eb2:	f8de 3000 	ldr.w	r3, [lr]
 8014eb6:	f8cc 3000 	str.w	r3, [ip]
 8014eba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014ebc:	b30b      	cbz	r3, 8014f02 <rcl_node_resolve_name+0x92>
 8014ebe:	4689      	mov	r9, r1
 8014ec0:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8014ec4:	f002 feee 	bl	8017ca4 <rcutils_get_zero_initialized_string_map>
 8014ec8:	ab10      	add	r3, sp, #64	; 0x40
 8014eca:	9008      	str	r0, [sp, #32]
 8014ecc:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8014ed0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014ed4:	2100      	movs	r1, #0
 8014ed6:	a808      	add	r0, sp, #32
 8014ed8:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014edc:	f002 ff34 	bl	8017d48 <rcutils_string_map_init>
 8014ee0:	4683      	mov	fp, r0
 8014ee2:	b1a0      	cbz	r0, 8014f0e <rcl_node_resolve_name+0x9e>
 8014ee4:	f7f8 febe 	bl	800dc64 <rcutils_get_error_string>
 8014ee8:	f7f8 fed2 	bl	800dc90 <rcutils_reset_error>
 8014eec:	f1bb 0f0a 	cmp.w	fp, #10
 8014ef0:	bf18      	it	ne
 8014ef2:	f04f 0b01 	movne.w	fp, #1
 8014ef6:	4658      	mov	r0, fp
 8014ef8:	b011      	add	sp, #68	; 0x44
 8014efa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014efe:	b002      	add	sp, #8
 8014f00:	4770      	bx	lr
 8014f02:	f04f 0b0b 	mov.w	fp, #11
 8014f06:	e7f6      	b.n	8014ef6 <rcl_node_resolve_name+0x86>
 8014f08:	f04f 0b01 	mov.w	fp, #1
 8014f0c:	e7f3      	b.n	8014ef6 <rcl_node_resolve_name+0x86>
 8014f0e:	9009      	str	r0, [sp, #36]	; 0x24
 8014f10:	9007      	str	r0, [sp, #28]
 8014f12:	a808      	add	r0, sp, #32
 8014f14:	f006 fb62 	bl	801b5dc <rcl_get_default_topic_name_substitutions>
 8014f18:	4683      	mov	fp, r0
 8014f1a:	b180      	cbz	r0, 8014f3e <rcl_node_resolve_name+0xce>
 8014f1c:	280a      	cmp	r0, #10
 8014f1e:	a808      	add	r0, sp, #32
 8014f20:	bf18      	it	ne
 8014f22:	f04f 0b01 	movne.w	fp, #1
 8014f26:	f002 ff4d 	bl	8017dc4 <rcutils_string_map_fini>
 8014f2a:	4604      	mov	r4, r0
 8014f2c:	2800      	cmp	r0, #0
 8014f2e:	d15b      	bne.n	8014fe8 <rcl_node_resolve_name+0x178>
 8014f30:	4651      	mov	r1, sl
 8014f32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014f34:	47c8      	blx	r9
 8014f36:	4651      	mov	r1, sl
 8014f38:	4620      	mov	r0, r4
 8014f3a:	47c8      	blx	r9
 8014f3c:	e7db      	b.n	8014ef6 <rcl_node_resolve_name+0x86>
 8014f3e:	ab09      	add	r3, sp, #36	; 0x24
 8014f40:	46ec      	mov	ip, sp
 8014f42:	9305      	str	r3, [sp, #20]
 8014f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014f46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014f4a:	682b      	ldr	r3, [r5, #0]
 8014f4c:	463a      	mov	r2, r7
 8014f4e:	4631      	mov	r1, r6
 8014f50:	4620      	mov	r0, r4
 8014f52:	f8cc 3000 	str.w	r3, [ip]
 8014f56:	ab08      	add	r3, sp, #32
 8014f58:	f006 f9e0 	bl	801b31c <rcl_expand_topic_name>
 8014f5c:	4683      	mov	fp, r0
 8014f5e:	b9d8      	cbnz	r0, 8014f98 <rcl_node_resolve_name+0x128>
 8014f60:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8014f62:	4602      	mov	r2, r0
 8014f64:	9009      	str	r0, [sp, #36]	; 0x24
 8014f66:	a90a      	add	r1, sp, #40	; 0x28
 8014f68:	4620      	mov	r0, r4
 8014f6a:	f003 f87d 	bl	8018068 <rmw_validate_full_topic_name>
 8014f6e:	bb50      	cbnz	r0, 8014fc6 <rcl_node_resolve_name+0x156>
 8014f70:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8014f72:	2d00      	cmp	r5, #0
 8014f74:	d140      	bne.n	8014ff8 <rcl_node_resolve_name+0x188>
 8014f76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014f78:	a808      	add	r0, sp, #32
 8014f7a:	601c      	str	r4, [r3, #0]
 8014f7c:	f002 ff22 	bl	8017dc4 <rcutils_string_map_fini>
 8014f80:	4683      	mov	fp, r0
 8014f82:	2800      	cmp	r0, #0
 8014f84:	d043      	beq.n	801500e <rcl_node_resolve_name+0x19e>
 8014f86:	f7f8 fe6d 	bl	800dc64 <rcutils_get_error_string>
 8014f8a:	46a8      	mov	r8, r5
 8014f8c:	f04f 0b01 	mov.w	fp, #1
 8014f90:	462c      	mov	r4, r5
 8014f92:	f7f8 fe7d 	bl	800dc90 <rcutils_reset_error>
 8014f96:	e00a      	b.n	8014fae <rcl_node_resolve_name+0x13e>
 8014f98:	2867      	cmp	r0, #103	; 0x67
 8014f9a:	bf14      	ite	ne
 8014f9c:	f04f 0800 	movne.w	r8, #0
 8014fa0:	f008 0801 	andeq.w	r8, r8, #1
 8014fa4:	9c07      	ldr	r4, [sp, #28]
 8014fa6:	a808      	add	r0, sp, #32
 8014fa8:	f002 ff0c 	bl	8017dc4 <rcutils_string_map_fini>
 8014fac:	bb50      	cbnz	r0, 8015004 <rcl_node_resolve_name+0x194>
 8014fae:	4651      	mov	r1, sl
 8014fb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014fb2:	47c8      	blx	r9
 8014fb4:	4651      	mov	r1, sl
 8014fb6:	4620      	mov	r0, r4
 8014fb8:	47c8      	blx	r9
 8014fba:	f1b8 0f00 	cmp.w	r8, #0
 8014fbe:	bf18      	it	ne
 8014fc0:	f04f 0b68 	movne.w	fp, #104	; 0x68
 8014fc4:	e797      	b.n	8014ef6 <rcl_node_resolve_name+0x86>
 8014fc6:	f7f8 fe4d 	bl	800dc64 <rcutils_get_error_string>
 8014fca:	f7f8 fe61 	bl	800dc90 <rcutils_reset_error>
 8014fce:	a808      	add	r0, sp, #32
 8014fd0:	f002 fef8 	bl	8017dc4 <rcutils_string_map_fini>
 8014fd4:	b998      	cbnz	r0, 8014ffe <rcl_node_resolve_name+0x18e>
 8014fd6:	4651      	mov	r1, sl
 8014fd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014fda:	47c8      	blx	r9
 8014fdc:	4651      	mov	r1, sl
 8014fde:	4620      	mov	r0, r4
 8014fe0:	f04f 0b01 	mov.w	fp, #1
 8014fe4:	47c8      	blx	r9
 8014fe6:	e786      	b.n	8014ef6 <rcl_node_resolve_name+0x86>
 8014fe8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8014fec:	f7f8 fe3a 	bl	800dc64 <rcutils_get_error_string>
 8014ff0:	f7f8 fe4e 	bl	800dc90 <rcutils_reset_error>
 8014ff4:	4644      	mov	r4, r8
 8014ff6:	e7da      	b.n	8014fae <rcl_node_resolve_name+0x13e>
 8014ff8:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8014ffc:	e7d3      	b.n	8014fa6 <rcl_node_resolve_name+0x136>
 8014ffe:	46d8      	mov	r8, fp
 8015000:	f04f 0b01 	mov.w	fp, #1
 8015004:	f7f8 fe2e 	bl	800dc64 <rcutils_get_error_string>
 8015008:	f7f8 fe42 	bl	800dc90 <rcutils_reset_error>
 801500c:	e7cf      	b.n	8014fae <rcl_node_resolve_name+0x13e>
 801500e:	4651      	mov	r1, sl
 8015010:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015012:	47c8      	blx	r9
 8015014:	4651      	mov	r1, sl
 8015016:	4658      	mov	r0, fp
 8015018:	47c8      	blx	r9
 801501a:	e76c      	b.n	8014ef6 <rcl_node_resolve_name+0x86>

0801501c <exact_match_lookup>:
 801501c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801501e:	f102 0708 	add.w	r7, r2, #8
 8015022:	460b      	mov	r3, r1
 8015024:	b085      	sub	sp, #20
 8015026:	4614      	mov	r4, r2
 8015028:	4606      	mov	r6, r0
 801502a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801502e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015032:	4618      	mov	r0, r3
 8015034:	4919      	ldr	r1, [pc, #100]	; (801509c <exact_match_lookup+0x80>)
 8015036:	e894 000c 	ldmia.w	r4, {r2, r3}
 801503a:	f002 fca3 	bl	8017984 <rcutils_join_path>
 801503e:	7833      	ldrb	r3, [r6, #0]
 8015040:	4605      	mov	r5, r0
 8015042:	2b2f      	cmp	r3, #47	; 0x2f
 8015044:	d023      	beq.n	801508e <exact_match_lookup+0x72>
 8015046:	f104 030c 	add.w	r3, r4, #12
 801504a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801504e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015052:	1c70      	adds	r0, r6, #1
 8015054:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8015058:	f002 fc9a 	bl	8017990 <rcutils_to_native_path>
 801505c:	4606      	mov	r6, r0
 801505e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8015062:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015066:	4631      	mov	r1, r6
 8015068:	4628      	mov	r0, r5
 801506a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801506e:	f002 fc89 	bl	8017984 <rcutils_join_path>
 8015072:	4603      	mov	r3, r0
 8015074:	4630      	mov	r0, r6
 8015076:	6862      	ldr	r2, [r4, #4]
 8015078:	461e      	mov	r6, r3
 801507a:	6921      	ldr	r1, [r4, #16]
 801507c:	4790      	blx	r2
 801507e:	4628      	mov	r0, r5
 8015080:	4635      	mov	r5, r6
 8015082:	6863      	ldr	r3, [r4, #4]
 8015084:	6921      	ldr	r1, [r4, #16]
 8015086:	4798      	blx	r3
 8015088:	4628      	mov	r0, r5
 801508a:	b005      	add	sp, #20
 801508c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801508e:	7873      	ldrb	r3, [r6, #1]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d1d8      	bne.n	8015046 <exact_match_lookup+0x2a>
 8015094:	4628      	mov	r0, r5
 8015096:	b005      	add	sp, #20
 8015098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801509a:	bf00      	nop
 801509c:	0801eab0 	.word	0x0801eab0

080150a0 <rcl_get_secure_root>:
 80150a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80150a4:	b085      	sub	sp, #20
 80150a6:	b168      	cbz	r0, 80150c4 <rcl_get_secure_root+0x24>
 80150a8:	4607      	mov	r7, r0
 80150aa:	4608      	mov	r0, r1
 80150ac:	460c      	mov	r4, r1
 80150ae:	f7f8 fdcb 	bl	800dc48 <rcutils_allocator_is_valid>
 80150b2:	b138      	cbz	r0, 80150c4 <rcl_get_secure_root+0x24>
 80150b4:	2300      	movs	r3, #0
 80150b6:	482d      	ldr	r0, [pc, #180]	; (801516c <rcl_get_secure_root+0xcc>)
 80150b8:	a903      	add	r1, sp, #12
 80150ba:	9303      	str	r3, [sp, #12]
 80150bc:	f002 fc48 	bl	8017950 <rcutils_get_env>
 80150c0:	4605      	mov	r5, r0
 80150c2:	b120      	cbz	r0, 80150ce <rcl_get_secure_root+0x2e>
 80150c4:	2500      	movs	r5, #0
 80150c6:	4628      	mov	r0, r5
 80150c8:	b005      	add	sp, #20
 80150ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80150ce:	9b03      	ldr	r3, [sp, #12]
 80150d0:	781a      	ldrb	r2, [r3, #0]
 80150d2:	2a00      	cmp	r2, #0
 80150d4:	d0f6      	beq.n	80150c4 <rcl_get_secure_root+0x24>
 80150d6:	f104 090c 	add.w	r9, r4, #12
 80150da:	e899 0003 	ldmia.w	r9, {r0, r1}
 80150de:	e88d 0003 	stmia.w	sp, {r0, r1}
 80150e2:	4618      	mov	r0, r3
 80150e4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80150e8:	f002 fd94 	bl	8017c14 <rcutils_strdup>
 80150ec:	4680      	mov	r8, r0
 80150ee:	2800      	cmp	r0, #0
 80150f0:	d0e8      	beq.n	80150c4 <rcl_get_secure_root+0x24>
 80150f2:	a903      	add	r1, sp, #12
 80150f4:	481e      	ldr	r0, [pc, #120]	; (8015170 <rcl_get_secure_root+0xd0>)
 80150f6:	9503      	str	r5, [sp, #12]
 80150f8:	f002 fc2a 	bl	8017950 <rcutils_get_env>
 80150fc:	b160      	cbz	r0, 8015118 <rcl_get_secure_root+0x78>
 80150fe:	2600      	movs	r6, #0
 8015100:	4630      	mov	r0, r6
 8015102:	6863      	ldr	r3, [r4, #4]
 8015104:	6921      	ldr	r1, [r4, #16]
 8015106:	4798      	blx	r3
 8015108:	4640      	mov	r0, r8
 801510a:	6863      	ldr	r3, [r4, #4]
 801510c:	6921      	ldr	r1, [r4, #16]
 801510e:	4798      	blx	r3
 8015110:	4628      	mov	r0, r5
 8015112:	b005      	add	sp, #20
 8015114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015118:	9b03      	ldr	r3, [sp, #12]
 801511a:	781e      	ldrb	r6, [r3, #0]
 801511c:	b1f6      	cbz	r6, 801515c <rcl_get_secure_root+0xbc>
 801511e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8015122:	e88d 0003 	stmia.w	sp, {r0, r1}
 8015126:	4618      	mov	r0, r3
 8015128:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801512c:	f002 fd72 	bl	8017c14 <rcutils_strdup>
 8015130:	4606      	mov	r6, r0
 8015132:	2800      	cmp	r0, #0
 8015134:	d0e3      	beq.n	80150fe <rcl_get_secure_root+0x5e>
 8015136:	4622      	mov	r2, r4
 8015138:	4641      	mov	r1, r8
 801513a:	f7ff ff6f 	bl	801501c <exact_match_lookup>
 801513e:	4605      	mov	r5, r0
 8015140:	2d00      	cmp	r5, #0
 8015142:	d0dd      	beq.n	8015100 <rcl_get_secure_root+0x60>
 8015144:	4628      	mov	r0, r5
 8015146:	f002 fc1b 	bl	8017980 <rcutils_is_directory>
 801514a:	4603      	mov	r3, r0
 801514c:	2800      	cmp	r0, #0
 801514e:	d1d7      	bne.n	8015100 <rcl_get_secure_root+0x60>
 8015150:	4628      	mov	r0, r5
 8015152:	6921      	ldr	r1, [r4, #16]
 8015154:	461d      	mov	r5, r3
 8015156:	6863      	ldr	r3, [r4, #4]
 8015158:	4798      	blx	r3
 801515a:	e7d1      	b.n	8015100 <rcl_get_secure_root+0x60>
 801515c:	4622      	mov	r2, r4
 801515e:	4638      	mov	r0, r7
 8015160:	4641      	mov	r1, r8
 8015162:	f7ff ff5b 	bl	801501c <exact_match_lookup>
 8015166:	4605      	mov	r5, r0
 8015168:	e7ea      	b.n	8015140 <rcl_get_secure_root+0xa0>
 801516a:	bf00      	nop
 801516c:	0801eabc 	.word	0x0801eabc
 8015170:	0801ead4 	.word	0x0801ead4

08015174 <rcl_get_security_options_from_environment>:
 8015174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015178:	b082      	sub	sp, #8
 801517a:	2300      	movs	r3, #0
 801517c:	4606      	mov	r6, r0
 801517e:	460f      	mov	r7, r1
 8015180:	4821      	ldr	r0, [pc, #132]	; (8015208 <rcl_get_security_options_from_environment+0x94>)
 8015182:	a901      	add	r1, sp, #4
 8015184:	4690      	mov	r8, r2
 8015186:	9301      	str	r3, [sp, #4]
 8015188:	f002 fbe2 	bl	8017950 <rcutils_get_env>
 801518c:	b120      	cbz	r0, 8015198 <rcl_get_security_options_from_environment+0x24>
 801518e:	2501      	movs	r5, #1
 8015190:	4628      	mov	r0, r5
 8015192:	b002      	add	sp, #8
 8015194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015198:	4604      	mov	r4, r0
 801519a:	491c      	ldr	r1, [pc, #112]	; (801520c <rcl_get_security_options_from_environment+0x98>)
 801519c:	9801      	ldr	r0, [sp, #4]
 801519e:	f7eb f84f 	bl	8000240 <strcmp>
 80151a2:	4605      	mov	r5, r0
 80151a4:	b9f0      	cbnz	r0, 80151e4 <rcl_get_security_options_from_environment+0x70>
 80151a6:	9001      	str	r0, [sp, #4]
 80151a8:	f1b8 0f00 	cmp.w	r8, #0
 80151ac:	d021      	beq.n	80151f2 <rcl_get_security_options_from_environment+0x7e>
 80151ae:	a901      	add	r1, sp, #4
 80151b0:	4817      	ldr	r0, [pc, #92]	; (8015210 <rcl_get_security_options_from_environment+0x9c>)
 80151b2:	f002 fbcd 	bl	8017950 <rcutils_get_env>
 80151b6:	2800      	cmp	r0, #0
 80151b8:	d1e9      	bne.n	801518e <rcl_get_security_options_from_environment+0x1a>
 80151ba:	4916      	ldr	r1, [pc, #88]	; (8015214 <rcl_get_security_options_from_environment+0xa0>)
 80151bc:	9801      	ldr	r0, [sp, #4]
 80151be:	f7eb f83f 	bl	8000240 <strcmp>
 80151c2:	4603      	mov	r3, r0
 80151c4:	4639      	mov	r1, r7
 80151c6:	4630      	mov	r0, r6
 80151c8:	fab3 f383 	clz	r3, r3
 80151cc:	095b      	lsrs	r3, r3, #5
 80151ce:	f888 3000 	strb.w	r3, [r8]
 80151d2:	f7ff ff65 	bl	80150a0 <rcl_get_secure_root>
 80151d6:	b170      	cbz	r0, 80151f6 <rcl_get_security_options_from_environment+0x82>
 80151d8:	f8c8 0004 	str.w	r0, [r8, #4]
 80151dc:	4628      	mov	r0, r5
 80151de:	b002      	add	sp, #8
 80151e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151e4:	4625      	mov	r5, r4
 80151e6:	f888 4000 	strb.w	r4, [r8]
 80151ea:	4628      	mov	r0, r5
 80151ec:	b002      	add	sp, #8
 80151ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151f2:	250b      	movs	r5, #11
 80151f4:	e7cc      	b.n	8015190 <rcl_get_security_options_from_environment+0x1c>
 80151f6:	f898 5000 	ldrb.w	r5, [r8]
 80151fa:	f1a5 0501 	sub.w	r5, r5, #1
 80151fe:	fab5 f585 	clz	r5, r5
 8015202:	096d      	lsrs	r5, r5, #5
 8015204:	e7c4      	b.n	8015190 <rcl_get_security_options_from_environment+0x1c>
 8015206:	bf00      	nop
 8015208:	0801ea74 	.word	0x0801ea74
 801520c:	0801ea88 	.word	0x0801ea88
 8015210:	0801ea90 	.word	0x0801ea90
 8015214:	0801eaa8 	.word	0x0801eaa8

08015218 <rcl_get_zero_initialized_service>:
 8015218:	4b01      	ldr	r3, [pc, #4]	; (8015220 <rcl_get_zero_initialized_service+0x8>)
 801521a:	6818      	ldr	r0, [r3, #0]
 801521c:	4770      	bx	lr
 801521e:	bf00      	nop
 8015220:	0801eaf4 	.word	0x0801eaf4

08015224 <rcl_service_init>:
 8015224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015228:	b086      	sub	sp, #24
 801522a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801522c:	2d00      	cmp	r5, #0
 801522e:	d04d      	beq.n	80152cc <rcl_service_init+0xa8>
 8015230:	f105 0950 	add.w	r9, r5, #80	; 0x50
 8015234:	4604      	mov	r4, r0
 8015236:	460e      	mov	r6, r1
 8015238:	4690      	mov	r8, r2
 801523a:	4648      	mov	r0, r9
 801523c:	461f      	mov	r7, r3
 801523e:	f7f8 fd03 	bl	800dc48 <rcutils_allocator_is_valid>
 8015242:	2c00      	cmp	r4, #0
 8015244:	d042      	beq.n	80152cc <rcl_service_init+0xa8>
 8015246:	f080 0001 	eor.w	r0, r0, #1
 801524a:	b2c0      	uxtb	r0, r0
 801524c:	2800      	cmp	r0, #0
 801524e:	d13d      	bne.n	80152cc <rcl_service_init+0xa8>
 8015250:	4630      	mov	r0, r6
 8015252:	f7ff fd95 	bl	8014d80 <rcl_node_is_valid>
 8015256:	2800      	cmp	r0, #0
 8015258:	d042      	beq.n	80152e0 <rcl_service_init+0xbc>
 801525a:	2f00      	cmp	r7, #0
 801525c:	d036      	beq.n	80152cc <rcl_service_init+0xa8>
 801525e:	f1b8 0f00 	cmp.w	r8, #0
 8015262:	d033      	beq.n	80152cc <rcl_service_init+0xa8>
 8015264:	f8d4 a000 	ldr.w	sl, [r4]
 8015268:	f1ba 0f00 	cmp.w	sl, #0
 801526c:	d133      	bne.n	80152d6 <rcl_service_init+0xb2>
 801526e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8015272:	2001      	movs	r0, #1
 8015274:	e9d5 3217 	ldrd	r3, r2, [r5, #92]	; 0x5c
 8015278:	4798      	blx	r3
 801527a:	6020      	str	r0, [r4, #0]
 801527c:	2800      	cmp	r0, #0
 801527e:	d075      	beq.n	801536c <rcl_service_init+0x148>
 8015280:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8015284:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8015288:	2201      	movs	r2, #1
 801528a:	f8cd a010 	str.w	sl, [sp, #16]
 801528e:	9005      	str	r0, [sp, #20]
 8015290:	9203      	str	r2, [sp, #12]
 8015292:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015296:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801529a:	4639      	mov	r1, r7
 801529c:	4630      	mov	r0, r6
 801529e:	e899 000c 	ldmia.w	r9, {r2, r3}
 80152a2:	f7ff fde5 	bl	8014e70 <rcl_node_resolve_name>
 80152a6:	4607      	mov	r7, r0
 80152a8:	b1f8      	cbz	r0, 80152ea <rcl_service_init+0xc6>
 80152aa:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 80152ae:	6820      	ldr	r0, [r4, #0]
 80152b0:	2b01      	cmp	r3, #1
 80152b2:	d943      	bls.n	801533c <rcl_service_init+0x118>
 80152b4:	2f0a      	cmp	r7, #10
 80152b6:	d000      	beq.n	80152ba <rcl_service_init+0x96>
 80152b8:	2701      	movs	r7, #1
 80152ba:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80152bc:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80152be:	4798      	blx	r3
 80152c0:	2300      	movs	r3, #0
 80152c2:	4638      	mov	r0, r7
 80152c4:	6023      	str	r3, [r4, #0]
 80152c6:	b006      	add	sp, #24
 80152c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152cc:	270b      	movs	r7, #11
 80152ce:	4638      	mov	r0, r7
 80152d0:	b006      	add	sp, #24
 80152d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152d6:	2764      	movs	r7, #100	; 0x64
 80152d8:	4638      	mov	r0, r7
 80152da:	b006      	add	sp, #24
 80152dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152e0:	27c8      	movs	r7, #200	; 0xc8
 80152e2:	4638      	mov	r0, r7
 80152e4:	b006      	add	sp, #24
 80152e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152ea:	4630      	mov	r0, r6
 80152ec:	f7ff fd6a 	bl	8014dc4 <rcl_node_get_rmw_handle>
 80152f0:	6827      	ldr	r7, [r4, #0]
 80152f2:	4641      	mov	r1, r8
 80152f4:	462b      	mov	r3, r5
 80152f6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80152fa:	f003 fd9f 	bl	8018e3c <rmw_create_service>
 80152fe:	6821      	ldr	r1, [r4, #0]
 8015300:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8015304:	f8d1 0108 	ldr.w	r0, [r1, #264]	; 0x108
 8015308:	b390      	cbz	r0, 8015370 <rcl_service_init+0x14c>
 801530a:	3168      	adds	r1, #104	; 0x68
 801530c:	f003 fec8 	bl	80190a0 <rmw_service_request_subscription_get_actual_qos>
 8015310:	b9b0      	cbnz	r0, 8015340 <rcl_service_init+0x11c>
 8015312:	6823      	ldr	r3, [r4, #0]
 8015314:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8015318:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 801531c:	f003 feac 	bl	8019078 <rmw_service_response_publisher_get_actual_qos>
 8015320:	4607      	mov	r7, r0
 8015322:	b968      	cbnz	r0, 8015340 <rcl_service_init+0x11c>
 8015324:	6820      	ldr	r0, [r4, #0]
 8015326:	2268      	movs	r2, #104	; 0x68
 8015328:	f895 3048 	ldrb.w	r3, [r5, #72]	; 0x48
 801532c:	4629      	mov	r1, r5
 801532e:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 8015332:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
 8015336:	f007 fb2e 	bl	801c996 <memcpy>
 801533a:	e7c8      	b.n	80152ce <rcl_service_init+0xaa>
 801533c:	2768      	movs	r7, #104	; 0x68
 801533e:	e7bc      	b.n	80152ba <rcl_service_init+0x96>
 8015340:	f7ff f904 	bl	801454c <rcl_convert_rmw_ret_to_rcl_ret>
 8015344:	4607      	mov	r7, r0
 8015346:	4630      	mov	r0, r6
 8015348:	f7ff fd3c 	bl	8014dc4 <rcl_node_get_rmw_handle>
 801534c:	6823      	ldr	r3, [r4, #0]
 801534e:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
 8015352:	f003 fe4d 	bl	8018ff0 <rmw_destroy_service>
 8015356:	6821      	ldr	r1, [r4, #0]
 8015358:	f8d1 0110 	ldr.w	r0, [r1, #272]	; 0x110
 801535c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 801535e:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8015360:	4798      	blx	r3
 8015362:	6820      	ldr	r0, [r4, #0]
 8015364:	2300      	movs	r3, #0
 8015366:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
 801536a:	e7a6      	b.n	80152ba <rcl_service_init+0x96>
 801536c:	270a      	movs	r7, #10
 801536e:	e7ae      	b.n	80152ce <rcl_service_init+0xaa>
 8015370:	2701      	movs	r7, #1
 8015372:	e7f1      	b.n	8015358 <rcl_service_init+0x134>

08015374 <rcl_service_get_default_options>:
 8015374:	b530      	push	{r4, r5, lr}
 8015376:	4d0f      	ldr	r5, [pc, #60]	; (80153b4 <rcl_service_get_default_options+0x40>)
 8015378:	b087      	sub	sp, #28
 801537a:	4604      	mov	r4, r0
 801537c:	2250      	movs	r2, #80	; 0x50
 801537e:	490e      	ldr	r1, [pc, #56]	; (80153b8 <rcl_service_get_default_options+0x44>)
 8015380:	4628      	mov	r0, r5
 8015382:	f007 fb08 	bl	801c996 <memcpy>
 8015386:	4668      	mov	r0, sp
 8015388:	f7f8 fc50 	bl	800dc2c <rcutils_get_default_allocator>
 801538c:	46ec      	mov	ip, sp
 801538e:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 8015392:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015396:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801539a:	f8dc 3000 	ldr.w	r3, [ip]
 801539e:	2268      	movs	r2, #104	; 0x68
 80153a0:	4629      	mov	r1, r5
 80153a2:	4620      	mov	r0, r4
 80153a4:	f8ce 3000 	str.w	r3, [lr]
 80153a8:	f007 faf5 	bl	801c996 <memcpy>
 80153ac:	4620      	mov	r0, r4
 80153ae:	b007      	add	sp, #28
 80153b0:	bd30      	pop	{r4, r5, pc}
 80153b2:	bf00      	nop
 80153b4:	200107e0 	.word	0x200107e0
 80153b8:	0801eaf8 	.word	0x0801eaf8

080153bc <rcl_service_get_rmw_handle>:
 80153bc:	b118      	cbz	r0, 80153c6 <rcl_service_get_rmw_handle+0xa>
 80153be:	6800      	ldr	r0, [r0, #0]
 80153c0:	b108      	cbz	r0, 80153c6 <rcl_service_get_rmw_handle+0xa>
 80153c2:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 80153c6:	4770      	bx	lr

080153c8 <rcl_take_request>:
 80153c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80153ca:	468e      	mov	lr, r1
 80153cc:	b091      	sub	sp, #68	; 0x44
 80153ce:	460c      	mov	r4, r1
 80153d0:	4617      	mov	r7, r2
 80153d2:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 80153d6:	4605      	mov	r5, r0
 80153d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80153dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80153e0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80153e4:	e88c 0003 	stmia.w	ip, {r0, r1}
 80153e8:	b30d      	cbz	r5, 801542e <rcl_take_request+0x66>
 80153ea:	682b      	ldr	r3, [r5, #0]
 80153ec:	b1fb      	cbz	r3, 801542e <rcl_take_request+0x66>
 80153ee:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80153f2:	b1e0      	cbz	r0, 801542e <rcl_take_request+0x66>
 80153f4:	b397      	cbz	r7, 801545c <rcl_take_request+0x94>
 80153f6:	2300      	movs	r3, #0
 80153f8:	463a      	mov	r2, r7
 80153fa:	a906      	add	r1, sp, #24
 80153fc:	f88d 3017 	strb.w	r3, [sp, #23]
 8015400:	f10d 0317 	add.w	r3, sp, #23
 8015404:	f003 fc18 	bl	8018c38 <rmw_take_request>
 8015408:	4606      	mov	r6, r0
 801540a:	b198      	cbz	r0, 8015434 <rcl_take_request+0x6c>
 801540c:	280a      	cmp	r0, #10
 801540e:	bf18      	it	ne
 8015410:	2601      	movne	r6, #1
 8015412:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 8015416:	46a6      	mov	lr, r4
 8015418:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801541c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015420:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8015424:	e88e 0003 	stmia.w	lr, {r0, r1}
 8015428:	4630      	mov	r0, r6
 801542a:	b011      	add	sp, #68	; 0x44
 801542c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801542e:	f44f 7616 	mov.w	r6, #600	; 0x258
 8015432:	e7ee      	b.n	8015412 <rcl_take_request+0x4a>
 8015434:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8015438:	b193      	cbz	r3, 8015460 <rcl_take_request+0x98>
 801543a:	682b      	ldr	r3, [r5, #0]
 801543c:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 8015440:	2800      	cmp	r0, #0
 8015442:	d0e6      	beq.n	8015412 <rcl_take_request+0x4a>
 8015444:	463a      	mov	r2, r7
 8015446:	ab0a      	add	r3, sp, #40	; 0x28
 8015448:	2101      	movs	r1, #1
 801544a:	9302      	str	r3, [sp, #8]
 801544c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 8015450:	e9cd 6700 	strd	r6, r7, [sp]
 8015454:	f000 f844 	bl	80154e0 <rcl_send_service_event_message>
 8015458:	4606      	mov	r6, r0
 801545a:	e7da      	b.n	8015412 <rcl_take_request+0x4a>
 801545c:	260b      	movs	r6, #11
 801545e:	e7d8      	b.n	8015412 <rcl_take_request+0x4a>
 8015460:	f240 2659 	movw	r6, #601	; 0x259
 8015464:	e7d5      	b.n	8015412 <rcl_take_request+0x4a>
 8015466:	bf00      	nop

08015468 <rcl_send_response>:
 8015468:	b350      	cbz	r0, 80154c0 <rcl_send_response+0x58>
 801546a:	6803      	ldr	r3, [r0, #0]
 801546c:	b570      	push	{r4, r5, r6, lr}
 801546e:	4604      	mov	r4, r0
 8015470:	b084      	sub	sp, #16
 8015472:	b1cb      	cbz	r3, 80154a8 <rcl_send_response+0x40>
 8015474:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8015478:	b1b0      	cbz	r0, 80154a8 <rcl_send_response+0x40>
 801547a:	4615      	mov	r5, r2
 801547c:	b1ea      	cbz	r2, 80154ba <rcl_send_response+0x52>
 801547e:	460e      	mov	r6, r1
 8015480:	b1d9      	cbz	r1, 80154ba <rcl_send_response+0x52>
 8015482:	f003 fc37 	bl	8018cf4 <rmw_send_response>
 8015486:	b998      	cbnz	r0, 80154b0 <rcl_send_response+0x48>
 8015488:	6823      	ldr	r3, [r4, #0]
 801548a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 801548e:	b16b      	cbz	r3, 80154ac <rcl_send_response+0x44>
 8015490:	462a      	mov	r2, r5
 8015492:	2102      	movs	r1, #2
 8015494:	4618      	mov	r0, r3
 8015496:	ed96 7b04 	vldr	d7, [r6, #16]
 801549a:	9602      	str	r6, [sp, #8]
 801549c:	ed8d 7b00 	vstr	d7, [sp]
 80154a0:	f000 f81e 	bl	80154e0 <rcl_send_service_event_message>
 80154a4:	b004      	add	sp, #16
 80154a6:	bd70      	pop	{r4, r5, r6, pc}
 80154a8:	f44f 7016 	mov.w	r0, #600	; 0x258
 80154ac:	b004      	add	sp, #16
 80154ae:	bd70      	pop	{r4, r5, r6, pc}
 80154b0:	2802      	cmp	r0, #2
 80154b2:	bf18      	it	ne
 80154b4:	2001      	movne	r0, #1
 80154b6:	b004      	add	sp, #16
 80154b8:	bd70      	pop	{r4, r5, r6, pc}
 80154ba:	200b      	movs	r0, #11
 80154bc:	b004      	add	sp, #16
 80154be:	bd70      	pop	{r4, r5, r6, pc}
 80154c0:	f44f 7016 	mov.w	r0, #600	; 0x258
 80154c4:	4770      	bx	lr
 80154c6:	bf00      	nop

080154c8 <rcl_service_is_valid>:
 80154c8:	b130      	cbz	r0, 80154d8 <rcl_service_is_valid+0x10>
 80154ca:	6800      	ldr	r0, [r0, #0]
 80154cc:	b120      	cbz	r0, 80154d8 <rcl_service_is_valid+0x10>
 80154ce:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 80154d2:	3800      	subs	r0, #0
 80154d4:	bf18      	it	ne
 80154d6:	2001      	movne	r0, #1
 80154d8:	4770      	bx	lr
 80154da:	bf00      	nop
 80154dc:	0000      	movs	r0, r0
	...

080154e0 <rcl_send_service_event_message>:
 80154e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80154e4:	b093      	sub	sp, #76	; 0x4c
 80154e6:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80154e8:	b196      	cbz	r6, 8015510 <rcl_send_service_event_message+0x30>
 80154ea:	4615      	mov	r5, r2
 80154ec:	b182      	cbz	r2, 8015510 <rcl_send_service_event_message+0x30>
 80154ee:	4604      	mov	r4, r0
 80154f0:	b148      	cbz	r0, 8015506 <rcl_send_service_event_message+0x26>
 80154f2:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80154f6:	b133      	cbz	r3, 8015506 <rcl_send_service_event_message+0x26>
 80154f8:	68c0      	ldr	r0, [r0, #12]
 80154fa:	460f      	mov	r7, r1
 80154fc:	f000 f9f2 	bl	80158e4 <rcl_clock_valid>
 8015500:	b108      	cbz	r0, 8015506 <rcl_send_service_event_message+0x26>
 8015502:	7a23      	ldrb	r3, [r4, #8]
 8015504:	b94b      	cbnz	r3, 801551a <rcl_send_service_event_message+0x3a>
 8015506:	2401      	movs	r4, #1
 8015508:	4620      	mov	r0, r4
 801550a:	b013      	add	sp, #76	; 0x4c
 801550c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015510:	240b      	movs	r4, #11
 8015512:	4620      	mov	r0, r4
 8015514:	b013      	add	sp, #76	; 0x4c
 8015516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801551a:	f104 0e60 	add.w	lr, r4, #96	; 0x60
 801551e:	f10d 0c0c 	add.w	ip, sp, #12
 8015522:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015526:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801552a:	f8de 3000 	ldr.w	r3, [lr]
 801552e:	a803      	add	r0, sp, #12
 8015530:	f8cc 3000 	str.w	r3, [ip]
 8015534:	f7f8 fb88 	bl	800dc48 <rcutils_allocator_is_valid>
 8015538:	2800      	cmp	r0, #0
 801553a:	d0e9      	beq.n	8015510 <rcl_send_service_event_message+0x30>
 801553c:	6820      	ldr	r0, [r4, #0]
 801553e:	f7f7 fb0b 	bl	800cb58 <rcl_publisher_is_valid>
 8015542:	2800      	cmp	r0, #0
 8015544:	d05e      	beq.n	8015604 <rcl_send_service_event_message+0x124>
 8015546:	4669      	mov	r1, sp
 8015548:	68e0      	ldr	r0, [r4, #12]
 801554a:	f000 fa5d 	bl	8015a08 <rcl_clock_get_now>
 801554e:	4601      	mov	r1, r0
 8015550:	2800      	cmp	r0, #0
 8015552:	d146      	bne.n	80155e2 <rcl_send_service_event_message+0x102>
 8015554:	2220      	movs	r2, #32
 8015556:	eb0d 0002 	add.w	r0, sp, r2
 801555a:	f007 f8eb 	bl	801c734 <memset>
 801555e:	f88d 7020 	strb.w	r7, [sp, #32]
 8015562:	e9dd 8900 	ldrd	r8, r9, [sp]
 8015566:	a32a      	add	r3, pc, #168	; (adr r3, 8015610 <rcl_send_service_event_message+0x130>)
 8015568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801556c:	4640      	mov	r0, r8
 801556e:	4649      	mov	r1, r9
 8015570:	f7ea fece 	bl	8000310 <__aeabi_ldivmod>
 8015574:	4649      	mov	r1, r9
 8015576:	9009      	str	r0, [sp, #36]	; 0x24
 8015578:	4640      	mov	r0, r8
 801557a:	a325      	add	r3, pc, #148	; (adr r3, 8015610 <rcl_send_service_event_message+0x130>)
 801557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015580:	f7ea fec6 	bl	8000310 <__aeabi_ldivmod>
 8015584:	920a      	str	r2, [sp, #40]	; 0x28
 8015586:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
 801558a:	6830      	ldr	r0, [r6, #0]
 801558c:	6871      	ldr	r1, [r6, #4]
 801558e:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8015592:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8015596:	7a23      	ldrb	r3, [r4, #8]
 8015598:	68b2      	ldr	r2, [r6, #8]
 801559a:	2b01      	cmp	r3, #1
 801559c:	68f3      	ldr	r3, [r6, #12]
 801559e:	bf08      	it	eq
 80155a0:	2500      	moveq	r5, #0
 80155a2:	2f01      	cmp	r7, #1
 80155a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80155a8:	d81f      	bhi.n	80155ea <rcl_send_service_event_message+0x10a>
 80155aa:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80155ae:	462a      	mov	r2, r5
 80155b0:	a808      	add	r0, sp, #32
 80155b2:	a903      	add	r1, sp, #12
 80155b4:	699d      	ldr	r5, [r3, #24]
 80155b6:	2300      	movs	r3, #0
 80155b8:	47a8      	blx	r5
 80155ba:	4605      	mov	r5, r0
 80155bc:	2d00      	cmp	r5, #0
 80155be:	d0a2      	beq.n	8015506 <rcl_send_service_event_message+0x26>
 80155c0:	4629      	mov	r1, r5
 80155c2:	6820      	ldr	r0, [r4, #0]
 80155c4:	2200      	movs	r2, #0
 80155c6:	f7f7 faa3 	bl	800cb10 <rcl_publish>
 80155ca:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80155ce:	4604      	mov	r4, r0
 80155d0:	a903      	add	r1, sp, #12
 80155d2:	4628      	mov	r0, r5
 80155d4:	69db      	ldr	r3, [r3, #28]
 80155d6:	4798      	blx	r3
 80155d8:	2c00      	cmp	r4, #0
 80155da:	d095      	beq.n	8015508 <rcl_send_service_event_message+0x28>
 80155dc:	f7f8 fb58 	bl	800dc90 <rcutils_reset_error>
 80155e0:	e792      	b.n	8015508 <rcl_send_service_event_message+0x28>
 80155e2:	2401      	movs	r4, #1
 80155e4:	f7f8 fb54 	bl	800dc90 <rcutils_reset_error>
 80155e8:	e78e      	b.n	8015508 <rcl_send_service_event_message+0x28>
 80155ea:	1eb9      	subs	r1, r7, #2
 80155ec:	2901      	cmp	r1, #1
 80155ee:	d8f8      	bhi.n	80155e2 <rcl_send_service_event_message+0x102>
 80155f0:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80155f4:	462b      	mov	r3, r5
 80155f6:	a808      	add	r0, sp, #32
 80155f8:	a903      	add	r1, sp, #12
 80155fa:	6995      	ldr	r5, [r2, #24]
 80155fc:	2200      	movs	r2, #0
 80155fe:	47a8      	blx	r5
 8015600:	4605      	mov	r5, r0
 8015602:	e7db      	b.n	80155bc <rcl_send_service_event_message+0xdc>
 8015604:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8015608:	e77e      	b.n	8015508 <rcl_send_service_event_message+0x28>
 801560a:	bf00      	nop
 801560c:	f3af 8000 	nop.w
 8015610:	3b9aca00 	.word	0x3b9aca00
 8015614:	00000000 	.word	0x00000000

08015618 <rcl_get_zero_initialized_subscription>:
 8015618:	4b01      	ldr	r3, [pc, #4]	; (8015620 <rcl_get_zero_initialized_subscription+0x8>)
 801561a:	6818      	ldr	r0, [r3, #0]
 801561c:	4770      	bx	lr
 801561e:	bf00      	nop
 8015620:	0801eb48 	.word	0x0801eb48

08015624 <rcl_subscription_init>:
 8015624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015628:	b088      	sub	sp, #32
 801562a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801562c:	b1ff      	cbz	r7, 801566e <rcl_subscription_init+0x4a>
 801562e:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 8015632:	4605      	mov	r5, r0
 8015634:	460e      	mov	r6, r1
 8015636:	4691      	mov	r9, r2
 8015638:	4650      	mov	r0, sl
 801563a:	4698      	mov	r8, r3
 801563c:	f7f8 fb04 	bl	800dc48 <rcutils_allocator_is_valid>
 8015640:	f080 0401 	eor.w	r4, r0, #1
 8015644:	b2e4      	uxtb	r4, r4
 8015646:	b994      	cbnz	r4, 801566e <rcl_subscription_init+0x4a>
 8015648:	b18d      	cbz	r5, 801566e <rcl_subscription_init+0x4a>
 801564a:	4630      	mov	r0, r6
 801564c:	f7ff fb98 	bl	8014d80 <rcl_node_is_valid>
 8015650:	2800      	cmp	r0, #0
 8015652:	d055      	beq.n	8015700 <rcl_subscription_init+0xdc>
 8015654:	f1b9 0f00 	cmp.w	r9, #0
 8015658:	d009      	beq.n	801566e <rcl_subscription_init+0x4a>
 801565a:	f1b8 0f00 	cmp.w	r8, #0
 801565e:	d006      	beq.n	801566e <rcl_subscription_init+0x4a>
 8015660:	682b      	ldr	r3, [r5, #0]
 8015662:	b14b      	cbz	r3, 8015678 <rcl_subscription_init+0x54>
 8015664:	2464      	movs	r4, #100	; 0x64
 8015666:	4620      	mov	r0, r4
 8015668:	b008      	add	sp, #32
 801566a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801566e:	240b      	movs	r4, #11
 8015670:	4620      	mov	r0, r4
 8015672:	b008      	add	sp, #32
 8015674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015678:	e9cd 3303 	strd	r3, r3, [sp, #12]
 801567c:	aa07      	add	r2, sp, #28
 801567e:	9307      	str	r3, [sp, #28]
 8015680:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015684:	9205      	str	r2, [sp, #20]
 8015686:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801568a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801568e:	4641      	mov	r1, r8
 8015690:	4630      	mov	r0, r6
 8015692:	e89a 000c 	ldmia.w	sl, {r2, r3}
 8015696:	f7ff fbeb 	bl	8014e70 <rcl_node_resolve_name>
 801569a:	2800      	cmp	r0, #0
 801569c:	d15f      	bne.n	801575e <rcl_subscription_init+0x13a>
 801569e:	21d0      	movs	r1, #208	; 0xd0
 80156a0:	2001      	movs	r0, #1
 80156a2:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	; 0x5c
 80156a6:	4798      	blx	r3
 80156a8:	6028      	str	r0, [r5, #0]
 80156aa:	2800      	cmp	r0, #0
 80156ac:	d05f      	beq.n	801576e <rcl_subscription_init+0x14a>
 80156ae:	4630      	mov	r0, r6
 80156b0:	f7ff fb88 	bl	8014dc4 <rcl_node_get_rmw_handle>
 80156b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80156b8:	4649      	mov	r1, r9
 80156ba:	9a07      	ldr	r2, [sp, #28]
 80156bc:	9300      	str	r3, [sp, #0]
 80156be:	463b      	mov	r3, r7
 80156c0:	682c      	ldr	r4, [r5, #0]
 80156c2:	f003 fd01 	bl	80190c8 <rmw_create_subscription>
 80156c6:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
 80156ca:	682c      	ldr	r4, [r5, #0]
 80156cc:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
 80156d0:	b348      	cbz	r0, 8015726 <rcl_subscription_init+0x102>
 80156d2:	f104 0178 	add.w	r1, r4, #120	; 0x78
 80156d6:	f003 fded 	bl	80192b4 <rmw_subscription_get_actual_qos>
 80156da:	4604      	mov	r4, r0
 80156dc:	b9a8      	cbnz	r0, 801570a <rcl_subscription_init+0xe6>
 80156de:	6828      	ldr	r0, [r5, #0]
 80156e0:	2278      	movs	r2, #120	; 0x78
 80156e2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80156e6:	4639      	mov	r1, r7
 80156e8:	f880 30c0 	strb.w	r3, [r0, #192]	; 0xc0
 80156ec:	f007 f953 	bl	801c996 <memcpy>
 80156f0:	9807      	ldr	r0, [sp, #28]
 80156f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80156f4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80156f6:	4798      	blx	r3
 80156f8:	4620      	mov	r0, r4
 80156fa:	b008      	add	sp, #32
 80156fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015700:	24c8      	movs	r4, #200	; 0xc8
 8015702:	4620      	mov	r0, r4
 8015704:	b008      	add	sp, #32
 8015706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801570a:	682c      	ldr	r4, [r5, #0]
 801570c:	b36c      	cbz	r4, 801576a <rcl_subscription_init+0x146>
 801570e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8015712:	b14b      	cbz	r3, 8015728 <rcl_subscription_init+0x104>
 8015714:	4630      	mov	r0, r6
 8015716:	f7ff fb55 	bl	8014dc4 <rcl_node_get_rmw_handle>
 801571a:	682b      	ldr	r3, [r5, #0]
 801571c:	f8d3 10c8 	ldr.w	r1, [r3, #200]	; 0xc8
 8015720:	f003 fddc 	bl	80192dc <rmw_destroy_subscription>
 8015724:	682c      	ldr	r4, [r5, #0]
 8015726:	b194      	cbz	r4, 801574e <rcl_subscription_init+0x12a>
 8015728:	f104 0650 	add.w	r6, r4, #80	; 0x50
 801572c:	4630      	mov	r0, r6
 801572e:	f7f8 fa8b 	bl	800dc48 <rcutils_allocator_is_valid>
 8015732:	b158      	cbz	r0, 801574c <rcl_subscription_init+0x128>
 8015734:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8015736:	b148      	cbz	r0, 801574c <rcl_subscription_init+0x128>
 8015738:	4631      	mov	r1, r6
 801573a:	f002 fbe5 	bl	8017f08 <rmw_subscription_content_filter_options_fini>
 801573e:	4606      	mov	r6, r0
 8015740:	b9c8      	cbnz	r0, 8015776 <rcl_subscription_init+0x152>
 8015742:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8015744:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8015746:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8015748:	4798      	blx	r3
 801574a:	66e6      	str	r6, [r4, #108]	; 0x6c
 801574c:	682c      	ldr	r4, [r5, #0]
 801574e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015750:	4620      	mov	r0, r4
 8015752:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8015754:	2401      	movs	r4, #1
 8015756:	4798      	blx	r3
 8015758:	2300      	movs	r3, #0
 801575a:	602b      	str	r3, [r5, #0]
 801575c:	e7c8      	b.n	80156f0 <rcl_subscription_init+0xcc>
 801575e:	2867      	cmp	r0, #103	; 0x67
 8015760:	d007      	beq.n	8015772 <rcl_subscription_init+0x14e>
 8015762:	2869      	cmp	r0, #105	; 0x69
 8015764:	d005      	beq.n	8015772 <rcl_subscription_init+0x14e>
 8015766:	280a      	cmp	r0, #10
 8015768:	d001      	beq.n	801576e <rcl_subscription_init+0x14a>
 801576a:	2401      	movs	r4, #1
 801576c:	e7c0      	b.n	80156f0 <rcl_subscription_init+0xcc>
 801576e:	240a      	movs	r4, #10
 8015770:	e7be      	b.n	80156f0 <rcl_subscription_init+0xcc>
 8015772:	2467      	movs	r4, #103	; 0x67
 8015774:	e7bc      	b.n	80156f0 <rcl_subscription_init+0xcc>
 8015776:	f7fe fee9 	bl	801454c <rcl_convert_rmw_ret_to_rcl_ret>
 801577a:	682c      	ldr	r4, [r5, #0]
 801577c:	e7e7      	b.n	801574e <rcl_subscription_init+0x12a>
 801577e:	bf00      	nop

08015780 <rcl_subscription_get_default_options>:
 8015780:	b570      	push	{r4, r5, r6, lr}
 8015782:	4c16      	ldr	r4, [pc, #88]	; (80157dc <rcl_subscription_get_default_options+0x5c>)
 8015784:	b08a      	sub	sp, #40	; 0x28
 8015786:	4605      	mov	r5, r0
 8015788:	2250      	movs	r2, #80	; 0x50
 801578a:	4915      	ldr	r1, [pc, #84]	; (80157e0 <rcl_subscription_get_default_options+0x60>)
 801578c:	4620      	mov	r0, r4
 801578e:	f007 f902 	bl	801c996 <memcpy>
 8015792:	a804      	add	r0, sp, #16
 8015794:	f7f8 fa4a 	bl	800dc2c <rcutils_get_default_allocator>
 8015798:	f10d 0c10 	add.w	ip, sp, #16
 801579c:	f104 0e50 	add.w	lr, r4, #80	; 0x50
 80157a0:	466e      	mov	r6, sp
 80157a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80157a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80157aa:	f8dc 3000 	ldr.w	r3, [ip]
 80157ae:	4630      	mov	r0, r6
 80157b0:	f8ce 3000 	str.w	r3, [lr]
 80157b4:	f002 fbc2 	bl	8017f3c <rmw_get_default_subscription_options>
 80157b8:	f104 0364 	add.w	r3, r4, #100	; 0x64
 80157bc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80157c0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80157c4:	2301      	movs	r3, #1
 80157c6:	2278      	movs	r2, #120	; 0x78
 80157c8:	4621      	mov	r1, r4
 80157ca:	4628      	mov	r0, r5
 80157cc:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 80157d0:	f007 f8e1 	bl	801c996 <memcpy>
 80157d4:	4628      	mov	r0, r5
 80157d6:	b00a      	add	sp, #40	; 0x28
 80157d8:	bd70      	pop	{r4, r5, r6, pc}
 80157da:	bf00      	nop
 80157dc:	20010848 	.word	0x20010848
 80157e0:	0801eb50 	.word	0x0801eb50

080157e4 <rcl_take>:
 80157e4:	2800      	cmp	r0, #0
 80157e6:	d049      	beq.n	801587c <rcl_take+0x98>
 80157e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157ec:	4615      	mov	r5, r2
 80157ee:	6802      	ldr	r2, [r0, #0]
 80157f0:	b0a0      	sub	sp, #128	; 0x80
 80157f2:	4604      	mov	r4, r0
 80157f4:	2a00      	cmp	r2, #0
 80157f6:	d039      	beq.n	801586c <rcl_take+0x88>
 80157f8:	461f      	mov	r7, r3
 80157fa:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 80157fe:	b3ab      	cbz	r3, 801586c <rcl_take+0x88>
 8015800:	460e      	mov	r6, r1
 8015802:	2900      	cmp	r1, #0
 8015804:	d038      	beq.n	8015878 <rcl_take+0x94>
 8015806:	2d00      	cmp	r5, #0
 8015808:	d03c      	beq.n	8015884 <rcl_take+0xa0>
 801580a:	a802      	add	r0, sp, #8
 801580c:	f002 fc24 	bl	8018058 <rmw_get_zero_initialized_message_info>
 8015810:	6823      	ldr	r3, [r4, #0]
 8015812:	f10d 0c08 	add.w	ip, sp, #8
 8015816:	46ae      	mov	lr, r5
 8015818:	f8d3 80c8 	ldr.w	r8, [r3, #200]	; 0xc8
 801581c:	2400      	movs	r4, #0
 801581e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015822:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015826:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801582a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801582e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015832:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015836:	e89c 0003 	ldmia.w	ip, {r0, r1}
 801583a:	462b      	mov	r3, r5
 801583c:	f10d 0247 	add.w	r2, sp, #71	; 0x47
 8015840:	f88d 4047 	strb.w	r4, [sp, #71]	; 0x47
 8015844:	e88e 0003 	stmia.w	lr, {r0, r1}
 8015848:	4631      	mov	r1, r6
 801584a:	4640      	mov	r0, r8
 801584c:	9700      	str	r7, [sp, #0]
 801584e:	f003 fda7 	bl	80193a0 <rmw_take_with_info>
 8015852:	4603      	mov	r3, r0
 8015854:	b9c0      	cbnz	r0, 8015888 <rcl_take+0xa4>
 8015856:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
 801585a:	f240 1291 	movw	r2, #401	; 0x191
 801585e:	2900      	cmp	r1, #0
 8015860:	bf08      	it	eq
 8015862:	4613      	moveq	r3, r2
 8015864:	4618      	mov	r0, r3
 8015866:	b020      	add	sp, #128	; 0x80
 8015868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801586c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8015870:	4618      	mov	r0, r3
 8015872:	b020      	add	sp, #128	; 0x80
 8015874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015878:	230b      	movs	r3, #11
 801587a:	e7f3      	b.n	8015864 <rcl_take+0x80>
 801587c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8015880:	4618      	mov	r0, r3
 8015882:	4770      	bx	lr
 8015884:	ad12      	add	r5, sp, #72	; 0x48
 8015886:	e7c0      	b.n	801580a <rcl_take+0x26>
 8015888:	f7fe fe60 	bl	801454c <rcl_convert_rmw_ret_to_rcl_ret>
 801588c:	4603      	mov	r3, r0
 801588e:	e7e9      	b.n	8015864 <rcl_take+0x80>

08015890 <rcl_subscription_get_rmw_handle>:
 8015890:	b118      	cbz	r0, 801589a <rcl_subscription_get_rmw_handle+0xa>
 8015892:	6800      	ldr	r0, [r0, #0]
 8015894:	b108      	cbz	r0, 801589a <rcl_subscription_get_rmw_handle+0xa>
 8015896:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 801589a:	4770      	bx	lr

0801589c <rcl_subscription_is_valid>:
 801589c:	b130      	cbz	r0, 80158ac <rcl_subscription_is_valid+0x10>
 801589e:	6800      	ldr	r0, [r0, #0]
 80158a0:	b120      	cbz	r0, 80158ac <rcl_subscription_is_valid+0x10>
 80158a2:	f8d0 00c8 	ldr.w	r0, [r0, #200]	; 0xc8
 80158a6:	3800      	subs	r0, #0
 80158a8:	bf18      	it	ne
 80158aa:	2001      	movne	r0, #1
 80158ac:	4770      	bx	lr
 80158ae:	bf00      	nop

080158b0 <rcl_get_system_time>:
 80158b0:	4608      	mov	r0, r1
 80158b2:	f7f8 ba09 	b.w	800dcc8 <rcutils_system_time_now>
 80158b6:	bf00      	nop

080158b8 <rcl_get_steady_time>:
 80158b8:	4608      	mov	r0, r1
 80158ba:	f7f8 ba2d 	b.w	800dd18 <rcutils_steady_time_now>
 80158be:	bf00      	nop

080158c0 <rcl_get_ros_time>:
 80158c0:	7a03      	ldrb	r3, [r0, #8]
 80158c2:	b510      	push	{r4, lr}
 80158c4:	460c      	mov	r4, r1
 80158c6:	b143      	cbz	r3, 80158da <rcl_get_ros_time+0x1a>
 80158c8:	2105      	movs	r1, #5
 80158ca:	f001 ff9d 	bl	8017808 <__atomic_load_8>
 80158ce:	4602      	mov	r2, r0
 80158d0:	460b      	mov	r3, r1
 80158d2:	2000      	movs	r0, #0
 80158d4:	e9c4 2300 	strd	r2, r3, [r4]
 80158d8:	bd10      	pop	{r4, pc}
 80158da:	4608      	mov	r0, r1
 80158dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80158e0:	f7f8 b9f2 	b.w	800dcc8 <rcutils_system_time_now>

080158e4 <rcl_clock_valid>:
 80158e4:	b138      	cbz	r0, 80158f6 <rcl_clock_valid+0x12>
 80158e6:	7803      	ldrb	r3, [r0, #0]
 80158e8:	b123      	cbz	r3, 80158f4 <rcl_clock_valid+0x10>
 80158ea:	68c0      	ldr	r0, [r0, #12]
 80158ec:	3800      	subs	r0, #0
 80158ee:	bf18      	it	ne
 80158f0:	2001      	movne	r0, #1
 80158f2:	4770      	bx	lr
 80158f4:	4618      	mov	r0, r3
 80158f6:	4770      	bx	lr

080158f8 <rcl_clock_init>:
 80158f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158fa:	4605      	mov	r5, r0
 80158fc:	4610      	mov	r0, r2
 80158fe:	4614      	mov	r4, r2
 8015900:	460e      	mov	r6, r1
 8015902:	f7f8 f9a1 	bl	800dc48 <rcutils_allocator_is_valid>
 8015906:	b128      	cbz	r0, 8015914 <rcl_clock_init+0x1c>
 8015908:	2d03      	cmp	r5, #3
 801590a:	d803      	bhi.n	8015914 <rcl_clock_init+0x1c>
 801590c:	e8df f005 	tbb	[pc, r5]
 8015910:	0659301f 	.word	0x0659301f
 8015914:	f04f 0c0b 	mov.w	ip, #11
 8015918:	4660      	mov	r0, ip
 801591a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801591c:	2c00      	cmp	r4, #0
 801591e:	d0f9      	beq.n	8015914 <rcl_clock_init+0x1c>
 8015920:	fab6 f386 	clz	r3, r6
 8015924:	095b      	lsrs	r3, r3, #5
 8015926:	2e00      	cmp	r6, #0
 8015928:	d0f4      	beq.n	8015914 <rcl_clock_init+0x1c>
 801592a:	6133      	str	r3, [r6, #16]
 801592c:	469c      	mov	ip, r3
 801592e:	f106 0514 	add.w	r5, r6, #20
 8015932:	4f32      	ldr	r7, [pc, #200]	; (80159fc <rcl_clock_init+0x104>)
 8015934:	f04f 0e03 	mov.w	lr, #3
 8015938:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801593c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801593e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015940:	6823      	ldr	r3, [r4, #0]
 8015942:	4660      	mov	r0, ip
 8015944:	602b      	str	r3, [r5, #0]
 8015946:	60f7      	str	r7, [r6, #12]
 8015948:	f886 e000 	strb.w	lr, [r6]
 801594c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801594e:	2e00      	cmp	r6, #0
 8015950:	d0e0      	beq.n	8015914 <rcl_clock_init+0x1c>
 8015952:	2300      	movs	r3, #0
 8015954:	f106 0514 	add.w	r5, r6, #20
 8015958:	7033      	strb	r3, [r6, #0]
 801595a:	469c      	mov	ip, r3
 801595c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8015960:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8015964:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015966:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015968:	6823      	ldr	r3, [r4, #0]
 801596a:	4660      	mov	r0, ip
 801596c:	602b      	str	r3, [r5, #0]
 801596e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015970:	2c00      	cmp	r4, #0
 8015972:	d0cf      	beq.n	8015914 <rcl_clock_init+0x1c>
 8015974:	fab6 f586 	clz	r5, r6
 8015978:	096d      	lsrs	r5, r5, #5
 801597a:	2e00      	cmp	r6, #0
 801597c:	d0ca      	beq.n	8015914 <rcl_clock_init+0x1c>
 801597e:	46a6      	mov	lr, r4
 8015980:	7035      	strb	r5, [r6, #0]
 8015982:	f106 0c14 	add.w	ip, r6, #20
 8015986:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801598a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801598e:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8015992:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015996:	f8de 3000 	ldr.w	r3, [lr]
 801599a:	2010      	movs	r0, #16
 801599c:	f8cc 3000 	str.w	r3, [ip]
 80159a0:	6823      	ldr	r3, [r4, #0]
 80159a2:	6921      	ldr	r1, [r4, #16]
 80159a4:	4798      	blx	r3
 80159a6:	6130      	str	r0, [r6, #16]
 80159a8:	b320      	cbz	r0, 80159f4 <rcl_clock_init+0xfc>
 80159aa:	2200      	movs	r2, #0
 80159ac:	2300      	movs	r3, #0
 80159ae:	46ac      	mov	ip, r5
 80159b0:	7205      	strb	r5, [r0, #8]
 80159b2:	e9c0 2300 	strd	r2, r3, [r0]
 80159b6:	4a12      	ldr	r2, [pc, #72]	; (8015a00 <rcl_clock_init+0x108>)
 80159b8:	2301      	movs	r3, #1
 80159ba:	4660      	mov	r0, ip
 80159bc:	60f2      	str	r2, [r6, #12]
 80159be:	7033      	strb	r3, [r6, #0]
 80159c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159c2:	2c00      	cmp	r4, #0
 80159c4:	d0a6      	beq.n	8015914 <rcl_clock_init+0x1c>
 80159c6:	fab6 f386 	clz	r3, r6
 80159ca:	095b      	lsrs	r3, r3, #5
 80159cc:	2e00      	cmp	r6, #0
 80159ce:	d0a1      	beq.n	8015914 <rcl_clock_init+0x1c>
 80159d0:	6133      	str	r3, [r6, #16]
 80159d2:	469c      	mov	ip, r3
 80159d4:	f106 0514 	add.w	r5, r6, #20
 80159d8:	f8df e028 	ldr.w	lr, [pc, #40]	; 8015a04 <rcl_clock_init+0x10c>
 80159dc:	2702      	movs	r7, #2
 80159de:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80159e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80159e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80159e6:	6823      	ldr	r3, [r4, #0]
 80159e8:	4660      	mov	r0, ip
 80159ea:	602b      	str	r3, [r5, #0]
 80159ec:	f8c6 e00c 	str.w	lr, [r6, #12]
 80159f0:	7037      	strb	r7, [r6, #0]
 80159f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159f4:	f04f 0c0a 	mov.w	ip, #10
 80159f8:	e78e      	b.n	8015918 <rcl_clock_init+0x20>
 80159fa:	bf00      	nop
 80159fc:	080158b9 	.word	0x080158b9
 8015a00:	080158c1 	.word	0x080158c1
 8015a04:	080158b1 	.word	0x080158b1

08015a08 <rcl_clock_get_now>:
 8015a08:	b140      	cbz	r0, 8015a1c <rcl_clock_get_now+0x14>
 8015a0a:	b139      	cbz	r1, 8015a1c <rcl_clock_get_now+0x14>
 8015a0c:	7803      	ldrb	r3, [r0, #0]
 8015a0e:	b11b      	cbz	r3, 8015a18 <rcl_clock_get_now+0x10>
 8015a10:	68c3      	ldr	r3, [r0, #12]
 8015a12:	b10b      	cbz	r3, 8015a18 <rcl_clock_get_now+0x10>
 8015a14:	6900      	ldr	r0, [r0, #16]
 8015a16:	4718      	bx	r3
 8015a18:	2001      	movs	r0, #1
 8015a1a:	4770      	bx	lr
 8015a1c:	200b      	movs	r0, #11
 8015a1e:	4770      	bx	lr

08015a20 <rcl_clock_add_jump_callback>:
 8015a20:	b082      	sub	sp, #8
 8015a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a26:	a906      	add	r1, sp, #24
 8015a28:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	; 0x30
 8015a2c:	e881 000c 	stmia.w	r1, {r2, r3}
 8015a30:	b330      	cbz	r0, 8015a80 <rcl_clock_add_jump_callback+0x60>
 8015a32:	4604      	mov	r4, r0
 8015a34:	3014      	adds	r0, #20
 8015a36:	f7f8 f907 	bl	800dc48 <rcutils_allocator_is_valid>
 8015a3a:	b30d      	cbz	r5, 8015a80 <rcl_clock_add_jump_callback+0x60>
 8015a3c:	f080 0301 	eor.w	r3, r0, #1
 8015a40:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8015a44:	d11c      	bne.n	8015a80 <rcl_clock_add_jump_callback+0x60>
 8015a46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015a48:	2a00      	cmp	r2, #0
 8015a4a:	db19      	blt.n	8015a80 <rcl_clock_add_jump_callback+0x60>
 8015a4c:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8015a50:	2901      	cmp	r1, #1
 8015a52:	f172 0200 	sbcs.w	r2, r2, #0
 8015a56:	da13      	bge.n	8015a80 <rcl_clock_add_jump_callback+0x60>
 8015a58:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8015a5c:	2f00      	cmp	r7, #0
 8015a5e:	d040      	beq.n	8015ae2 <rcl_clock_add_jump_callback+0xc2>
 8015a60:	4602      	mov	r2, r0
 8015a62:	e003      	b.n	8015a6c <rcl_clock_add_jump_callback+0x4c>
 8015a64:	42bb      	cmp	r3, r7
 8015a66:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8015a6a:	d010      	beq.n	8015a8e <rcl_clock_add_jump_callback+0x6e>
 8015a6c:	6811      	ldr	r1, [r2, #0]
 8015a6e:	3301      	adds	r3, #1
 8015a70:	42a9      	cmp	r1, r5
 8015a72:	d1f7      	bne.n	8015a64 <rcl_clock_add_jump_callback+0x44>
 8015a74:	6a11      	ldr	r1, [r2, #32]
 8015a76:	42b1      	cmp	r1, r6
 8015a78:	d1f4      	bne.n	8015a64 <rcl_clock_add_jump_callback+0x44>
 8015a7a:	f04f 0e01 	mov.w	lr, #1
 8015a7e:	e001      	b.n	8015a84 <rcl_clock_add_jump_callback+0x64>
 8015a80:	f04f 0e0b 	mov.w	lr, #11
 8015a84:	4670      	mov	r0, lr
 8015a86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015a8a:	b002      	add	sp, #8
 8015a8c:	4770      	bx	lr
 8015a8e:	3301      	adds	r3, #1
 8015a90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015a94:	00d9      	lsls	r1, r3, #3
 8015a96:	69e3      	ldr	r3, [r4, #28]
 8015a98:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8015a9a:	4798      	blx	r3
 8015a9c:	b1f0      	cbz	r0, 8015adc <rcl_clock_add_jump_callback+0xbc>
 8015a9e:	68a3      	ldr	r3, [r4, #8]
 8015aa0:	f10d 0c18 	add.w	ip, sp, #24
 8015aa4:	6060      	str	r0, [r4, #4]
 8015aa6:	f04f 0e00 	mov.w	lr, #0
 8015aaa:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8015aae:	f103 0801 	add.w	r8, r3, #1
 8015ab2:	f840 5032 	str.w	r5, [r0, r2, lsl #3]
 8015ab6:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 8015aba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015abe:	f105 0708 	add.w	r7, r5, #8
 8015ac2:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8015ac4:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8015ac8:	e887 0003 	stmia.w	r7, {r0, r1}
 8015acc:	4670      	mov	r0, lr
 8015ace:	622e      	str	r6, [r5, #32]
 8015ad0:	f8c4 8008 	str.w	r8, [r4, #8]
 8015ad4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015ad8:	b002      	add	sp, #8
 8015ada:	4770      	bx	lr
 8015adc:	f04f 0e0a 	mov.w	lr, #10
 8015ae0:	e7d0      	b.n	8015a84 <rcl_clock_add_jump_callback+0x64>
 8015ae2:	2128      	movs	r1, #40	; 0x28
 8015ae4:	e7d7      	b.n	8015a96 <rcl_clock_add_jump_callback+0x76>
 8015ae6:	bf00      	nop

08015ae8 <rcl_clock_remove_jump_callback>:
 8015ae8:	2800      	cmp	r0, #0
 8015aea:	d05f      	beq.n	8015bac <rcl_clock_remove_jump_callback+0xc4>
 8015aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015af0:	4605      	mov	r5, r0
 8015af2:	3014      	adds	r0, #20
 8015af4:	460f      	mov	r7, r1
 8015af6:	4692      	mov	sl, r2
 8015af8:	f7f8 f8a6 	bl	800dc48 <rcutils_allocator_is_valid>
 8015afc:	f080 0001 	eor.w	r0, r0, #1
 8015b00:	b2c0      	uxtb	r0, r0
 8015b02:	2800      	cmp	r0, #0
 8015b04:	d13f      	bne.n	8015b86 <rcl_clock_remove_jump_callback+0x9e>
 8015b06:	2f00      	cmp	r7, #0
 8015b08:	d03d      	beq.n	8015b86 <rcl_clock_remove_jump_callback+0x9e>
 8015b0a:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8015b0e:	f1b8 0f00 	cmp.w	r8, #0
 8015b12:	d00c      	beq.n	8015b2e <rcl_clock_remove_jump_callback+0x46>
 8015b14:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8015b18:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 8015b1c:	464c      	mov	r4, r9
 8015b1e:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 8015b22:	6823      	ldr	r3, [r4, #0]
 8015b24:	42bb      	cmp	r3, r7
 8015b26:	d005      	beq.n	8015b34 <rcl_clock_remove_jump_callback+0x4c>
 8015b28:	3428      	adds	r4, #40	; 0x28
 8015b2a:	42a6      	cmp	r6, r4
 8015b2c:	d1f9      	bne.n	8015b22 <rcl_clock_remove_jump_callback+0x3a>
 8015b2e:	2001      	movs	r0, #1
 8015b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b34:	6a23      	ldr	r3, [r4, #32]
 8015b36:	3428      	adds	r4, #40	; 0x28
 8015b38:	42a6      	cmp	r6, r4
 8015b3a:	d02f      	beq.n	8015b9c <rcl_clock_remove_jump_callback+0xb4>
 8015b3c:	4553      	cmp	r3, sl
 8015b3e:	d1f0      	bne.n	8015b22 <rcl_clock_remove_jump_callback+0x3a>
 8015b40:	46a6      	mov	lr, r4
 8015b42:	f1a4 0c28 	sub.w	ip, r4, #40	; 0x28
 8015b46:	3428      	adds	r4, #40	; 0x28
 8015b48:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015b4c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b50:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015b54:	42a6      	cmp	r6, r4
 8015b56:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b5a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015b5e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015b62:	d1ed      	bne.n	8015b40 <rcl_clock_remove_jump_callback+0x58>
 8015b64:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8015b68:	60ac      	str	r4, [r5, #8]
 8015b6a:	b17c      	cbz	r4, 8015b8c <rcl_clock_remove_jump_callback+0xa4>
 8015b6c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8015b70:	69eb      	ldr	r3, [r5, #28]
 8015b72:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8015b74:	4648      	mov	r0, r9
 8015b76:	00e1      	lsls	r1, r4, #3
 8015b78:	4798      	blx	r3
 8015b7a:	4603      	mov	r3, r0
 8015b7c:	b1c0      	cbz	r0, 8015bb0 <rcl_clock_remove_jump_callback+0xc8>
 8015b7e:	2000      	movs	r0, #0
 8015b80:	606b      	str	r3, [r5, #4]
 8015b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b86:	200b      	movs	r0, #11
 8015b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b8c:	4648      	mov	r0, r9
 8015b8e:	69ab      	ldr	r3, [r5, #24]
 8015b90:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8015b92:	4798      	blx	r3
 8015b94:	4620      	mov	r0, r4
 8015b96:	606c      	str	r4, [r5, #4]
 8015b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b9c:	4553      	cmp	r3, sl
 8015b9e:	d1c6      	bne.n	8015b2e <rcl_clock_remove_jump_callback+0x46>
 8015ba0:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8015ba4:	60ac      	str	r4, [r5, #8]
 8015ba6:	2c00      	cmp	r4, #0
 8015ba8:	d1e0      	bne.n	8015b6c <rcl_clock_remove_jump_callback+0x84>
 8015baa:	e7ef      	b.n	8015b8c <rcl_clock_remove_jump_callback+0xa4>
 8015bac:	200b      	movs	r0, #11
 8015bae:	4770      	bx	lr
 8015bb0:	200a      	movs	r0, #10
 8015bb2:	e7e9      	b.n	8015b88 <rcl_clock_remove_jump_callback+0xa0>

08015bb4 <_rcl_timer_time_jump>:
 8015bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015bb8:	4605      	mov	r5, r0
 8015bba:	b084      	sub	sp, #16
 8015bbc:	4614      	mov	r4, r2
 8015bbe:	b131      	cbz	r1, 8015bce <_rcl_timer_time_jump+0x1a>
 8015bc0:	7803      	ldrb	r3, [r0, #0]
 8015bc2:	3b02      	subs	r3, #2
 8015bc4:	2b01      	cmp	r3, #1
 8015bc6:	d93f      	bls.n	8015c48 <_rcl_timer_time_jump+0x94>
 8015bc8:	b004      	add	sp, #16
 8015bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bce:	6813      	ldr	r3, [r2, #0]
 8015bd0:	a902      	add	r1, sp, #8
 8015bd2:	6818      	ldr	r0, [r3, #0]
 8015bd4:	f7ff ff18 	bl	8015a08 <rcl_clock_get_now>
 8015bd8:	2800      	cmp	r0, #0
 8015bda:	d1f5      	bne.n	8015bc8 <_rcl_timer_time_jump+0x14>
 8015bdc:	6820      	ldr	r0, [r4, #0]
 8015bde:	2105      	movs	r1, #5
 8015be0:	3020      	adds	r0, #32
 8015be2:	f001 fe11 	bl	8017808 <__atomic_load_8>
 8015be6:	6823      	ldr	r3, [r4, #0]
 8015be8:	4681      	mov	r9, r0
 8015bea:	4688      	mov	r8, r1
 8015bec:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8015bf0:	2105      	movs	r1, #5
 8015bf2:	f001 fe09 	bl	8017808 <__atomic_load_8>
 8015bf6:	4607      	mov	r7, r0
 8015bf8:	6820      	ldr	r0, [r4, #0]
 8015bfa:	460e      	mov	r6, r1
 8015bfc:	2105      	movs	r1, #5
 8015bfe:	3018      	adds	r0, #24
 8015c00:	f001 fe02 	bl	8017808 <__atomic_load_8>
 8015c04:	782b      	ldrb	r3, [r5, #0]
 8015c06:	4682      	mov	sl, r0
 8015c08:	460d      	mov	r5, r1
 8015c0a:	3b02      	subs	r3, #2
 8015c0c:	9a02      	ldr	r2, [sp, #8]
 8015c0e:	2b01      	cmp	r3, #1
 8015c10:	9b03      	ldr	r3, [sp, #12]
 8015c12:	d937      	bls.n	8015c84 <_rcl_timer_time_jump+0xd0>
 8015c14:	42ba      	cmp	r2, r7
 8015c16:	eb73 0106 	sbcs.w	r1, r3, r6
 8015c1a:	da60      	bge.n	8015cde <_rcl_timer_time_jump+0x12a>
 8015c1c:	454a      	cmp	r2, r9
 8015c1e:	eb73 0108 	sbcs.w	r1, r3, r8
 8015c22:	dad1      	bge.n	8015bc8 <_rcl_timer_time_jump+0x14>
 8015c24:	eb1a 0202 	adds.w	r2, sl, r2
 8015c28:	6820      	ldr	r0, [r4, #0]
 8015c2a:	eb43 0305 	adc.w	r3, r3, r5
 8015c2e:	2505      	movs	r5, #5
 8015c30:	3028      	adds	r0, #40	; 0x28
 8015c32:	9500      	str	r5, [sp, #0]
 8015c34:	f001 fe1e 	bl	8017874 <__atomic_store_8>
 8015c38:	6820      	ldr	r0, [r4, #0]
 8015c3a:	9500      	str	r5, [sp, #0]
 8015c3c:	3020      	adds	r0, #32
 8015c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015c42:	f001 fe17 	bl	8017874 <__atomic_store_8>
 8015c46:	e7bf      	b.n	8015bc8 <_rcl_timer_time_jump+0x14>
 8015c48:	6813      	ldr	r3, [r2, #0]
 8015c4a:	a902      	add	r1, sp, #8
 8015c4c:	6818      	ldr	r0, [r3, #0]
 8015c4e:	f7ff fedb 	bl	8015a08 <rcl_clock_get_now>
 8015c52:	2800      	cmp	r0, #0
 8015c54:	d1b8      	bne.n	8015bc8 <_rcl_timer_time_jump+0x14>
 8015c56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015c5a:	4313      	orrs	r3, r2
 8015c5c:	d0b4      	beq.n	8015bc8 <_rcl_timer_time_jump+0x14>
 8015c5e:	6820      	ldr	r0, [r4, #0]
 8015c60:	2105      	movs	r1, #5
 8015c62:	3028      	adds	r0, #40	; 0x28
 8015c64:	f001 fdd0 	bl	8017808 <__atomic_load_8>
 8015c68:	9d02      	ldr	r5, [sp, #8]
 8015c6a:	4602      	mov	r2, r0
 8015c6c:	9b03      	ldr	r3, [sp, #12]
 8015c6e:	6820      	ldr	r0, [r4, #0]
 8015c70:	1b52      	subs	r2, r2, r5
 8015c72:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8015c76:	eb61 0303 	sbc.w	r3, r1, r3
 8015c7a:	2105      	movs	r1, #5
 8015c7c:	9100      	str	r1, [sp, #0]
 8015c7e:	f001 fdf9 	bl	8017874 <__atomic_store_8>
 8015c82:	e7a1      	b.n	8015bc8 <_rcl_timer_time_jump+0x14>
 8015c84:	4313      	orrs	r3, r2
 8015c86:	d09f      	beq.n	8015bc8 <_rcl_timer_time_jump+0x14>
 8015c88:	6820      	ldr	r0, [r4, #0]
 8015c8a:	f04f 0805 	mov.w	r8, #5
 8015c8e:	2300      	movs	r3, #0
 8015c90:	2200      	movs	r2, #0
 8015c92:	3030      	adds	r0, #48	; 0x30
 8015c94:	f8cd 8000 	str.w	r8, [sp]
 8015c98:	f001 fe22 	bl	80178e0 <__atomic_exchange_8>
 8015c9c:	ea51 0300 	orrs.w	r3, r1, r0
 8015ca0:	4606      	mov	r6, r0
 8015ca2:	460f      	mov	r7, r1
 8015ca4:	d090      	beq.n	8015bc8 <_rcl_timer_time_jump+0x14>
 8015ca6:	9a02      	ldr	r2, [sp, #8]
 8015ca8:	9b03      	ldr	r3, [sp, #12]
 8015caa:	1a12      	subs	r2, r2, r0
 8015cac:	f8cd 8000 	str.w	r8, [sp]
 8015cb0:	6820      	ldr	r0, [r4, #0]
 8015cb2:	eb63 0301 	sbc.w	r3, r3, r1
 8015cb6:	eb12 020a 	adds.w	r2, r2, sl
 8015cba:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8015cbe:	eb43 0305 	adc.w	r3, r3, r5
 8015cc2:	f001 fdd7 	bl	8017874 <__atomic_store_8>
 8015cc6:	f8cd 8000 	str.w	r8, [sp]
 8015cca:	6820      	ldr	r0, [r4, #0]
 8015ccc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015cd0:	3020      	adds	r0, #32
 8015cd2:	1b92      	subs	r2, r2, r6
 8015cd4:	eb63 0307 	sbc.w	r3, r3, r7
 8015cd8:	f001 fdcc 	bl	8017874 <__atomic_store_8>
 8015cdc:	e774      	b.n	8015bc8 <_rcl_timer_time_jump+0x14>
 8015cde:	6820      	ldr	r0, [r4, #0]
 8015ce0:	3008      	adds	r0, #8
 8015ce2:	f005 fd77 	bl	801b7d4 <rcl_trigger_guard_condition>
 8015ce6:	e76f      	b.n	8015bc8 <_rcl_timer_time_jump+0x14>

08015ce8 <rcl_get_zero_initialized_timer>:
 8015ce8:	4b01      	ldr	r3, [pc, #4]	; (8015cf0 <rcl_get_zero_initialized_timer+0x8>)
 8015cea:	6818      	ldr	r0, [r3, #0]
 8015cec:	4770      	bx	lr
 8015cee:	bf00      	nop
 8015cf0:	0801eba0 	.word	0x0801eba0

08015cf4 <rcl_timer_init>:
 8015cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cf8:	b0af      	sub	sp, #188	; 0xbc
 8015cfa:	460d      	mov	r5, r1
 8015cfc:	4604      	mov	r4, r0
 8015cfe:	4692      	mov	sl, r2
 8015d00:	a83b      	add	r0, sp, #236	; 0xec
 8015d02:	e9dd 8938 	ldrd	r8, r9, [sp, #224]	; 0xe0
 8015d06:	f7f7 ff9f 	bl	800dc48 <rcutils_allocator_is_valid>
 8015d0a:	fab5 f385 	clz	r3, r5
 8015d0e:	095b      	lsrs	r3, r3, #5
 8015d10:	ea43 73d9 	orr.w	r3, r3, r9, lsr #31
 8015d14:	2c00      	cmp	r4, #0
 8015d16:	bf08      	it	eq
 8015d18:	f043 0301 	orreq.w	r3, r3, #1
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d167      	bne.n	8015df0 <rcl_timer_init+0xfc>
 8015d20:	f080 0001 	eor.w	r0, r0, #1
 8015d24:	b2c0      	uxtb	r0, r0
 8015d26:	2800      	cmp	r0, #0
 8015d28:	d162      	bne.n	8015df0 <rcl_timer_init+0xfc>
 8015d2a:	6823      	ldr	r3, [r4, #0]
 8015d2c:	b123      	cbz	r3, 8015d38 <rcl_timer_init+0x44>
 8015d2e:	2664      	movs	r6, #100	; 0x64
 8015d30:	4630      	mov	r0, r6
 8015d32:	b02f      	add	sp, #188	; 0xbc
 8015d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d38:	a908      	add	r1, sp, #32
 8015d3a:	4628      	mov	r0, r5
 8015d3c:	f7ff fe64 	bl	8015a08 <rcl_clock_get_now>
 8015d40:	4606      	mov	r6, r0
 8015d42:	2800      	cmp	r0, #0
 8015d44:	d1f4      	bne.n	8015d30 <rcl_timer_init+0x3c>
 8015d46:	f10d 0b18 	add.w	fp, sp, #24
 8015d4a:	ae0b      	add	r6, sp, #44	; 0x2c
 8015d4c:	af18      	add	r7, sp, #96	; 0x60
 8015d4e:	4658      	mov	r0, fp
 8015d50:	e9cd 5a16 	strd	r5, sl, [sp, #88]	; 0x58
 8015d54:	f005 fc48 	bl	801b5e8 <rcl_get_zero_initialized_guard_condition>
 8015d58:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8015d5c:	e887 0003 	stmia.w	r7, {r0, r1}
 8015d60:	4630      	mov	r0, r6
 8015d62:	f005 fd1b 	bl	801b79c <rcl_guard_condition_get_default_options>
 8015d66:	ab0d      	add	r3, sp, #52	; 0x34
 8015d68:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015d6c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8015d70:	4651      	mov	r1, sl
 8015d72:	4638      	mov	r0, r7
 8015d74:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015d78:	f005 fc40 	bl	801b5fc <rcl_guard_condition_init>
 8015d7c:	4606      	mov	r6, r0
 8015d7e:	2800      	cmp	r0, #0
 8015d80:	d1d6      	bne.n	8015d30 <rcl_timer_init+0x3c>
 8015d82:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8015d84:	781b      	ldrb	r3, [r3, #0]
 8015d86:	2b01      	cmp	r3, #1
 8015d88:	d037      	beq.n	8015dfa <rcl_timer_init+0x106>
 8015d8a:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8015d8c:	f10d 0cec 	add.w	ip, sp, #236	; 0xec
 8015d90:	f10d 0e94 	add.w	lr, sp, #148	; 0x94
 8015d94:	f04f 0a00 	mov.w	sl, #0
 8015d98:	931a      	str	r3, [sp, #104]	; 0x68
 8015d9a:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
 8015d9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015da2:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 8015da6:	eb12 0008 	adds.w	r0, r2, r8
 8015daa:	f04f 0800 	mov.w	r8, #0
 8015dae:	eb43 0109 	adc.w	r1, r3, r9
 8015db2:	f04f 0900 	mov.w	r9, #0
 8015db6:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88
 8015dba:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8015dbe:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
 8015dc2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015dc6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8015dca:	f8dc 3000 	ldr.w	r3, [ip]
 8015dce:	2060      	movs	r0, #96	; 0x60
 8015dd0:	f88d a090 	strb.w	sl, [sp, #144]	; 0x90
 8015dd4:	4619      	mov	r1, r3
 8015dd6:	f8ce 3000 	str.w	r3, [lr]
 8015dda:	9b3b      	ldr	r3, [sp, #236]	; 0xec
 8015ddc:	e9cd aa2a 	strd	sl, sl, [sp, #168]	; 0xa8
 8015de0:	4798      	blx	r3
 8015de2:	6020      	str	r0, [r4, #0]
 8015de4:	b358      	cbz	r0, 8015e3e <rcl_timer_init+0x14a>
 8015de6:	2260      	movs	r2, #96	; 0x60
 8015de8:	a916      	add	r1, sp, #88	; 0x58
 8015dea:	f006 fdd4 	bl	801c996 <memcpy>
 8015dee:	e79f      	b.n	8015d30 <rcl_timer_init+0x3c>
 8015df0:	260b      	movs	r6, #11
 8015df2:	4630      	mov	r0, r6
 8015df4:	b02f      	add	sp, #188	; 0xbc
 8015df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dfa:	2001      	movs	r0, #1
 8015dfc:	2100      	movs	r1, #0
 8015dfe:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8015e02:	ab12      	add	r3, sp, #72	; 0x48
 8015e04:	4a13      	ldr	r2, [pc, #76]	; (8015e54 <rcl_timer_init+0x160>)
 8015e06:	f10d 0c40 	add.w	ip, sp, #64	; 0x40
 8015e0a:	9405      	str	r4, [sp, #20]
 8015e0c:	9204      	str	r2, [sp, #16]
 8015e0e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8015e12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015e16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015e1a:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8015e1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015e20:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015e24:	4628      	mov	r0, r5
 8015e26:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8015e2a:	f7ff fdf9 	bl	8015a20 <rcl_clock_add_jump_callback>
 8015e2e:	4603      	mov	r3, r0
 8015e30:	2800      	cmp	r0, #0
 8015e32:	d0aa      	beq.n	8015d8a <rcl_timer_init+0x96>
 8015e34:	4638      	mov	r0, r7
 8015e36:	461e      	mov	r6, r3
 8015e38:	f005 fc8a 	bl	801b750 <rcl_guard_condition_fini>
 8015e3c:	e778      	b.n	8015d30 <rcl_timer_init+0x3c>
 8015e3e:	4638      	mov	r0, r7
 8015e40:	260a      	movs	r6, #10
 8015e42:	f005 fc85 	bl	801b750 <rcl_guard_condition_fini>
 8015e46:	4622      	mov	r2, r4
 8015e48:	4902      	ldr	r1, [pc, #8]	; (8015e54 <rcl_timer_init+0x160>)
 8015e4a:	4628      	mov	r0, r5
 8015e4c:	f7ff fe4c 	bl	8015ae8 <rcl_clock_remove_jump_callback>
 8015e50:	e76e      	b.n	8015d30 <rcl_timer_init+0x3c>
 8015e52:	bf00      	nop
 8015e54:	08015bb5 	.word	0x08015bb5

08015e58 <rcl_timer_call>:
 8015e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e5c:	b087      	sub	sp, #28
 8015e5e:	2800      	cmp	r0, #0
 8015e60:	d06c      	beq.n	8015f3c <rcl_timer_call+0xe4>
 8015e62:	6803      	ldr	r3, [r0, #0]
 8015e64:	4604      	mov	r4, r0
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d062      	beq.n	8015f30 <rcl_timer_call+0xd8>
 8015e6a:	f3bf 8f5b 	dmb	ish
 8015e6e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015e72:	f3bf 8f5b 	dmb	ish
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d14f      	bne.n	8015f1a <rcl_timer_call+0xc2>
 8015e7a:	6803      	ldr	r3, [r0, #0]
 8015e7c:	a904      	add	r1, sp, #16
 8015e7e:	6818      	ldr	r0, [r3, #0]
 8015e80:	f7ff fdc2 	bl	8015a08 <rcl_clock_get_now>
 8015e84:	4605      	mov	r5, r0
 8015e86:	2800      	cmp	r0, #0
 8015e88:	d149      	bne.n	8015f1e <rcl_timer_call+0xc6>
 8015e8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	db49      	blt.n	8015f26 <rcl_timer_call+0xce>
 8015e92:	2605      	movs	r6, #5
 8015e94:	6820      	ldr	r0, [r4, #0]
 8015e96:	9600      	str	r6, [sp, #0]
 8015e98:	3020      	adds	r0, #32
 8015e9a:	f001 fd21 	bl	80178e0 <__atomic_exchange_8>
 8015e9e:	6823      	ldr	r3, [r4, #0]
 8015ea0:	4680      	mov	r8, r0
 8015ea2:	f3bf 8f5b 	dmb	ish
 8015ea6:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8015eaa:	f3bf 8f5b 	dmb	ish
 8015eae:	6820      	ldr	r0, [r4, #0]
 8015eb0:	4689      	mov	r9, r1
 8015eb2:	4631      	mov	r1, r6
 8015eb4:	3028      	adds	r0, #40	; 0x28
 8015eb6:	f001 fca7 	bl	8017808 <__atomic_load_8>
 8015eba:	460f      	mov	r7, r1
 8015ebc:	4631      	mov	r1, r6
 8015ebe:	4606      	mov	r6, r0
 8015ec0:	6820      	ldr	r0, [r4, #0]
 8015ec2:	3018      	adds	r0, #24
 8015ec4:	f001 fca0 	bl	8017808 <__atomic_load_8>
 8015ec8:	4602      	mov	r2, r0
 8015eca:	9804      	ldr	r0, [sp, #16]
 8015ecc:	460b      	mov	r3, r1
 8015ece:	18b6      	adds	r6, r6, r2
 8015ed0:	f8dd c014 	ldr.w	ip, [sp, #20]
 8015ed4:	4692      	mov	sl, r2
 8015ed6:	eb47 0701 	adc.w	r7, r7, r1
 8015eda:	4286      	cmp	r6, r0
 8015edc:	eb77 010c 	sbcs.w	r1, r7, ip
 8015ee0:	da04      	bge.n	8015eec <rcl_timer_call+0x94>
 8015ee2:	ea53 0102 	orrs.w	r1, r3, r2
 8015ee6:	d12e      	bne.n	8015f46 <rcl_timer_call+0xee>
 8015ee8:	4606      	mov	r6, r0
 8015eea:	4667      	mov	r7, ip
 8015eec:	6820      	ldr	r0, [r4, #0]
 8015eee:	2105      	movs	r1, #5
 8015ef0:	4632      	mov	r2, r6
 8015ef2:	463b      	mov	r3, r7
 8015ef4:	3028      	adds	r0, #40	; 0x28
 8015ef6:	9100      	str	r1, [sp, #0]
 8015ef8:	f001 fcbc 	bl	8017874 <__atomic_store_8>
 8015efc:	f1bb 0f00 	cmp.w	fp, #0
 8015f00:	d00d      	beq.n	8015f1e <rcl_timer_call+0xc6>
 8015f02:	9a04      	ldr	r2, [sp, #16]
 8015f04:	4620      	mov	r0, r4
 8015f06:	9b05      	ldr	r3, [sp, #20]
 8015f08:	ebb2 0208 	subs.w	r2, r2, r8
 8015f0c:	eb63 0309 	sbc.w	r3, r3, r9
 8015f10:	47d8      	blx	fp
 8015f12:	4628      	mov	r0, r5
 8015f14:	b007      	add	sp, #28
 8015f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f1a:	f240 3521 	movw	r5, #801	; 0x321
 8015f1e:	4628      	mov	r0, r5
 8015f20:	b007      	add	sp, #28
 8015f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f26:	2501      	movs	r5, #1
 8015f28:	4628      	mov	r0, r5
 8015f2a:	b007      	add	sp, #28
 8015f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f30:	f44f 7548 	mov.w	r5, #800	; 0x320
 8015f34:	4628      	mov	r0, r5
 8015f36:	b007      	add	sp, #28
 8015f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f3c:	250b      	movs	r5, #11
 8015f3e:	4628      	mov	r0, r5
 8015f40:	b007      	add	sp, #28
 8015f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f46:	1b80      	subs	r0, r0, r6
 8015f48:	eb6c 0107 	sbc.w	r1, ip, r7
 8015f4c:	3801      	subs	r0, #1
 8015f4e:	f161 0100 	sbc.w	r1, r1, #0
 8015f52:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8015f56:	f7ea f9db 	bl	8000310 <__aeabi_ldivmod>
 8015f5a:	9b02      	ldr	r3, [sp, #8]
 8015f5c:	3001      	adds	r0, #1
 8015f5e:	f141 0100 	adc.w	r1, r1, #0
 8015f62:	fb00 f303 	mul.w	r3, r0, r3
 8015f66:	fb01 330a 	mla	r3, r1, sl, r3
 8015f6a:	fba0 0a0a 	umull	r0, sl, r0, sl
 8015f6e:	1986      	adds	r6, r0, r6
 8015f70:	4453      	add	r3, sl
 8015f72:	eb43 0707 	adc.w	r7, r3, r7
 8015f76:	e7b9      	b.n	8015eec <rcl_timer_call+0x94>

08015f78 <rcl_timer_is_ready>:
 8015f78:	b570      	push	{r4, r5, r6, lr}
 8015f7a:	b082      	sub	sp, #8
 8015f7c:	b380      	cbz	r0, 8015fe0 <rcl_timer_is_ready+0x68>
 8015f7e:	6803      	ldr	r3, [r0, #0]
 8015f80:	4604      	mov	r4, r0
 8015f82:	b38b      	cbz	r3, 8015fe8 <rcl_timer_is_ready+0x70>
 8015f84:	460d      	mov	r5, r1
 8015f86:	b359      	cbz	r1, 8015fe0 <rcl_timer_is_ready+0x68>
 8015f88:	f3bf 8f5b 	dmb	ish
 8015f8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015f90:	f3bf 8f5b 	dmb	ish
 8015f94:	b953      	cbnz	r3, 8015fac <rcl_timer_is_ready+0x34>
 8015f96:	6803      	ldr	r3, [r0, #0]
 8015f98:	4669      	mov	r1, sp
 8015f9a:	6818      	ldr	r0, [r3, #0]
 8015f9c:	f7ff fd34 	bl	8015a08 <rcl_clock_get_now>
 8015fa0:	4606      	mov	r6, r0
 8015fa2:	b148      	cbz	r0, 8015fb8 <rcl_timer_is_ready+0x40>
 8015fa4:	f240 3321 	movw	r3, #801	; 0x321
 8015fa8:	4298      	cmp	r0, r3
 8015faa:	d102      	bne.n	8015fb2 <rcl_timer_is_ready+0x3a>
 8015fac:	2300      	movs	r3, #0
 8015fae:	461e      	mov	r6, r3
 8015fb0:	702b      	strb	r3, [r5, #0]
 8015fb2:	4630      	mov	r0, r6
 8015fb4:	b002      	add	sp, #8
 8015fb6:	bd70      	pop	{r4, r5, r6, pc}
 8015fb8:	6820      	ldr	r0, [r4, #0]
 8015fba:	2105      	movs	r1, #5
 8015fbc:	3028      	adds	r0, #40	; 0x28
 8015fbe:	f001 fc23 	bl	8017808 <__atomic_load_8>
 8015fc2:	9b00      	ldr	r3, [sp, #0]
 8015fc4:	1ac0      	subs	r0, r0, r3
 8015fc6:	9b01      	ldr	r3, [sp, #4]
 8015fc8:	eb61 0103 	sbc.w	r1, r1, r3
 8015fcc:	2801      	cmp	r0, #1
 8015fce:	4630      	mov	r0, r6
 8015fd0:	f171 0300 	sbcs.w	r3, r1, #0
 8015fd4:	bfb4      	ite	lt
 8015fd6:	2301      	movlt	r3, #1
 8015fd8:	2300      	movge	r3, #0
 8015fda:	702b      	strb	r3, [r5, #0]
 8015fdc:	b002      	add	sp, #8
 8015fde:	bd70      	pop	{r4, r5, r6, pc}
 8015fe0:	260b      	movs	r6, #11
 8015fe2:	4630      	mov	r0, r6
 8015fe4:	b002      	add	sp, #8
 8015fe6:	bd70      	pop	{r4, r5, r6, pc}
 8015fe8:	f44f 7648 	mov.w	r6, #800	; 0x320
 8015fec:	e7e1      	b.n	8015fb2 <rcl_timer_is_ready+0x3a>
 8015fee:	bf00      	nop

08015ff0 <rcl_timer_get_time_until_next_call>:
 8015ff0:	b570      	push	{r4, r5, r6, lr}
 8015ff2:	b082      	sub	sp, #8
 8015ff4:	b330      	cbz	r0, 8016044 <rcl_timer_get_time_until_next_call+0x54>
 8015ff6:	6803      	ldr	r3, [r0, #0]
 8015ff8:	4604      	mov	r4, r0
 8015ffa:	b33b      	cbz	r3, 801604c <rcl_timer_get_time_until_next_call+0x5c>
 8015ffc:	460d      	mov	r5, r1
 8015ffe:	b309      	cbz	r1, 8016044 <rcl_timer_get_time_until_next_call+0x54>
 8016000:	f3bf 8f5b 	dmb	ish
 8016004:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016008:	f3bf 8f5b 	dmb	ish
 801600c:	b9ab      	cbnz	r3, 801603a <rcl_timer_get_time_until_next_call+0x4a>
 801600e:	6803      	ldr	r3, [r0, #0]
 8016010:	4669      	mov	r1, sp
 8016012:	6818      	ldr	r0, [r3, #0]
 8016014:	f7ff fcf8 	bl	8015a08 <rcl_clock_get_now>
 8016018:	4606      	mov	r6, r0
 801601a:	b958      	cbnz	r0, 8016034 <rcl_timer_get_time_until_next_call+0x44>
 801601c:	6820      	ldr	r0, [r4, #0]
 801601e:	2105      	movs	r1, #5
 8016020:	3028      	adds	r0, #40	; 0x28
 8016022:	f001 fbf1 	bl	8017808 <__atomic_load_8>
 8016026:	9b00      	ldr	r3, [sp, #0]
 8016028:	1ac0      	subs	r0, r0, r3
 801602a:	9b01      	ldr	r3, [sp, #4]
 801602c:	eb61 0103 	sbc.w	r1, r1, r3
 8016030:	6028      	str	r0, [r5, #0]
 8016032:	6069      	str	r1, [r5, #4]
 8016034:	4630      	mov	r0, r6
 8016036:	b002      	add	sp, #8
 8016038:	bd70      	pop	{r4, r5, r6, pc}
 801603a:	f240 3621 	movw	r6, #801	; 0x321
 801603e:	4630      	mov	r0, r6
 8016040:	b002      	add	sp, #8
 8016042:	bd70      	pop	{r4, r5, r6, pc}
 8016044:	260b      	movs	r6, #11
 8016046:	4630      	mov	r0, r6
 8016048:	b002      	add	sp, #8
 801604a:	bd70      	pop	{r4, r5, r6, pc}
 801604c:	f44f 7648 	mov.w	r6, #800	; 0x320
 8016050:	e7f0      	b.n	8016034 <rcl_timer_get_time_until_next_call+0x44>
 8016052:	bf00      	nop

08016054 <rcl_timer_get_guard_condition>:
 8016054:	b130      	cbz	r0, 8016064 <rcl_timer_get_guard_condition+0x10>
 8016056:	6800      	ldr	r0, [r0, #0]
 8016058:	b120      	cbz	r0, 8016064 <rcl_timer_get_guard_condition+0x10>
 801605a:	68c3      	ldr	r3, [r0, #12]
 801605c:	b10b      	cbz	r3, 8016062 <rcl_timer_get_guard_condition+0xe>
 801605e:	3008      	adds	r0, #8
 8016060:	4770      	bx	lr
 8016062:	4618      	mov	r0, r3
 8016064:	4770      	bx	lr
 8016066:	bf00      	nop

08016068 <rcl_validate_enclave_name_with_size>:
 8016068:	2800      	cmp	r0, #0
 801606a:	d049      	beq.n	8016100 <rcl_validate_enclave_name_with_size+0x98>
 801606c:	b570      	push	{r4, r5, r6, lr}
 801606e:	4615      	mov	r5, r2
 8016070:	b0c2      	sub	sp, #264	; 0x108
 8016072:	b19a      	cbz	r2, 801609c <rcl_validate_enclave_name_with_size+0x34>
 8016074:	461e      	mov	r6, r3
 8016076:	466a      	mov	r2, sp
 8016078:	ab01      	add	r3, sp, #4
 801607a:	460c      	mov	r4, r1
 801607c:	f002 f870 	bl	8018160 <rmw_validate_namespace_with_size>
 8016080:	4684      	mov	ip, r0
 8016082:	b9b8      	cbnz	r0, 80160b4 <rcl_validate_enclave_name_with_size+0x4c>
 8016084:	9900      	ldr	r1, [sp, #0]
 8016086:	b171      	cbz	r1, 80160a6 <rcl_validate_enclave_name_with_size+0x3e>
 8016088:	2907      	cmp	r1, #7
 801608a:	d019      	beq.n	80160c0 <rcl_validate_enclave_name_with_size+0x58>
 801608c:	1e4b      	subs	r3, r1, #1
 801608e:	2b05      	cmp	r3, #5
 8016090:	d83a      	bhi.n	8016108 <rcl_validate_enclave_name_with_size+0xa0>
 8016092:	e8df f003 	tbb	[pc, r3]
 8016096:	2926      	.short	0x2926
 8016098:	1d322f2c 	.word	0x1d322f2c
 801609c:	f04f 0c0b 	mov.w	ip, #11
 80160a0:	4660      	mov	r0, ip
 80160a2:	b042      	add	sp, #264	; 0x108
 80160a4:	bd70      	pop	{r4, r5, r6, pc}
 80160a6:	2907      	cmp	r1, #7
 80160a8:	d00a      	beq.n	80160c0 <rcl_validate_enclave_name_with_size+0x58>
 80160aa:	2300      	movs	r3, #0
 80160ac:	4660      	mov	r0, ip
 80160ae:	602b      	str	r3, [r5, #0]
 80160b0:	b042      	add	sp, #264	; 0x108
 80160b2:	bd70      	pop	{r4, r5, r6, pc}
 80160b4:	f7fe fa4a 	bl	801454c <rcl_convert_rmw_ret_to_rcl_ret>
 80160b8:	4684      	mov	ip, r0
 80160ba:	4660      	mov	r0, ip
 80160bc:	b042      	add	sp, #264	; 0x108
 80160be:	bd70      	pop	{r4, r5, r6, pc}
 80160c0:	2cff      	cmp	r4, #255	; 0xff
 80160c2:	d9f2      	bls.n	80160aa <rcl_validate_enclave_name_with_size+0x42>
 80160c4:	6029      	str	r1, [r5, #0]
 80160c6:	2e00      	cmp	r6, #0
 80160c8:	d0ea      	beq.n	80160a0 <rcl_validate_enclave_name_with_size+0x38>
 80160ca:	23fe      	movs	r3, #254	; 0xfe
 80160cc:	6033      	str	r3, [r6, #0]
 80160ce:	e7e7      	b.n	80160a0 <rcl_validate_enclave_name_with_size+0x38>
 80160d0:	2306      	movs	r3, #6
 80160d2:	602b      	str	r3, [r5, #0]
 80160d4:	2e00      	cmp	r6, #0
 80160d6:	d0e3      	beq.n	80160a0 <rcl_validate_enclave_name_with_size+0x38>
 80160d8:	9b01      	ldr	r3, [sp, #4]
 80160da:	4660      	mov	r0, ip
 80160dc:	6033      	str	r3, [r6, #0]
 80160de:	b042      	add	sp, #264	; 0x108
 80160e0:	bd70      	pop	{r4, r5, r6, pc}
 80160e2:	2301      	movs	r3, #1
 80160e4:	602b      	str	r3, [r5, #0]
 80160e6:	e7f5      	b.n	80160d4 <rcl_validate_enclave_name_with_size+0x6c>
 80160e8:	2302      	movs	r3, #2
 80160ea:	602b      	str	r3, [r5, #0]
 80160ec:	e7f2      	b.n	80160d4 <rcl_validate_enclave_name_with_size+0x6c>
 80160ee:	2303      	movs	r3, #3
 80160f0:	602b      	str	r3, [r5, #0]
 80160f2:	e7ef      	b.n	80160d4 <rcl_validate_enclave_name_with_size+0x6c>
 80160f4:	2304      	movs	r3, #4
 80160f6:	602b      	str	r3, [r5, #0]
 80160f8:	e7ec      	b.n	80160d4 <rcl_validate_enclave_name_with_size+0x6c>
 80160fa:	2305      	movs	r3, #5
 80160fc:	602b      	str	r3, [r5, #0]
 80160fe:	e7e9      	b.n	80160d4 <rcl_validate_enclave_name_with_size+0x6c>
 8016100:	f04f 0c0b 	mov.w	ip, #11
 8016104:	4660      	mov	r0, ip
 8016106:	4770      	bx	lr
 8016108:	460b      	mov	r3, r1
 801610a:	4a04      	ldr	r2, [pc, #16]	; (801611c <rcl_validate_enclave_name_with_size+0xb4>)
 801610c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016110:	a802      	add	r0, sp, #8
 8016112:	f001 fd31 	bl	8017b78 <rcutils_snprintf>
 8016116:	f04f 0c01 	mov.w	ip, #1
 801611a:	e7c1      	b.n	80160a0 <rcl_validate_enclave_name_with_size+0x38>
 801611c:	0801eba4 	.word	0x0801eba4

08016120 <rcl_validate_enclave_name>:
 8016120:	b168      	cbz	r0, 801613e <rcl_validate_enclave_name+0x1e>
 8016122:	b570      	push	{r4, r5, r6, lr}
 8016124:	460d      	mov	r5, r1
 8016126:	4616      	mov	r6, r2
 8016128:	4604      	mov	r4, r0
 801612a:	f7ea f8e9 	bl	8000300 <strlen>
 801612e:	4633      	mov	r3, r6
 8016130:	4601      	mov	r1, r0
 8016132:	462a      	mov	r2, r5
 8016134:	4620      	mov	r0, r4
 8016136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801613a:	f7ff bf95 	b.w	8016068 <rcl_validate_enclave_name_with_size>
 801613e:	200b      	movs	r0, #11
 8016140:	4770      	bx	lr
 8016142:	bf00      	nop

08016144 <rcl_get_zero_initialized_wait_set>:
 8016144:	b510      	push	{r4, lr}
 8016146:	4c08      	ldr	r4, [pc, #32]	; (8016168 <rcl_get_zero_initialized_wait_set+0x24>)
 8016148:	4686      	mov	lr, r0
 801614a:	4684      	mov	ip, r0
 801614c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801614e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016152:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016154:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016158:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801615a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801615e:	6823      	ldr	r3, [r4, #0]
 8016160:	4670      	mov	r0, lr
 8016162:	f8cc 3000 	str.w	r3, [ip]
 8016166:	bd10      	pop	{r4, pc}
 8016168:	0801ec04 	.word	0x0801ec04

0801616c <rcl_wait_set_is_valid>:
 801616c:	b118      	cbz	r0, 8016176 <rcl_wait_set_is_valid+0xa>
 801616e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8016170:	3800      	subs	r0, #0
 8016172:	bf18      	it	ne
 8016174:	2001      	movne	r0, #1
 8016176:	4770      	bx	lr

08016178 <rcl_wait_set_fini>:
 8016178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801617c:	b082      	sub	sp, #8
 801617e:	2800      	cmp	r0, #0
 8016180:	f000 8095 	beq.w	80162ae <rcl_wait_set_fini+0x136>
 8016184:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8016186:	4604      	mov	r4, r0
 8016188:	2e00      	cmp	r6, #0
 801618a:	f000 808c 	beq.w	80162a6 <rcl_wait_set_fini+0x12e>
 801618e:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8016190:	f003 fae0 	bl	8019754 <rmw_destroy_wait_set>
 8016194:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016196:	1e06      	subs	r6, r0, #0
 8016198:	bf18      	it	ne
 801619a:	f44f 7661 	movne.w	r6, #900	; 0x384
 801619e:	2d00      	cmp	r5, #0
 80161a0:	f000 8081 	beq.w	80162a6 <rcl_wait_set_fini+0x12e>
 80161a4:	2700      	movs	r7, #0
 80161a6:	6820      	ldr	r0, [r4, #0]
 80161a8:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80161ac:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80161ae:	6067      	str	r7, [r4, #4]
 80161b0:	602f      	str	r7, [r5, #0]
 80161b2:	b120      	cbz	r0, 80161be <rcl_wait_set_fini+0x46>
 80161b4:	9101      	str	r1, [sp, #4]
 80161b6:	47c0      	blx	r8
 80161b8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80161ba:	9901      	ldr	r1, [sp, #4]
 80161bc:	6027      	str	r7, [r4, #0]
 80161be:	68a8      	ldr	r0, [r5, #8]
 80161c0:	b120      	cbz	r0, 80161cc <rcl_wait_set_fini+0x54>
 80161c2:	47c0      	blx	r8
 80161c4:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80161c6:	2300      	movs	r3, #0
 80161c8:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80161cc:	f04f 0800 	mov.w	r8, #0
 80161d0:	68a0      	ldr	r0, [r4, #8]
 80161d2:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80161d4:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80161d6:	f8c4 800c 	str.w	r8, [r4, #12]
 80161da:	f8c5 800c 	str.w	r8, [r5, #12]
 80161de:	b128      	cbz	r0, 80161ec <rcl_wait_set_fini+0x74>
 80161e0:	47b8      	blx	r7
 80161e2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80161e4:	f8c4 8008 	str.w	r8, [r4, #8]
 80161e8:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80161ea:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80161ec:	f04f 0800 	mov.w	r8, #0
 80161f0:	6968      	ldr	r0, [r5, #20]
 80161f2:	f8c5 8010 	str.w	r8, [r5, #16]
 80161f6:	b128      	cbz	r0, 8016204 <rcl_wait_set_fini+0x8c>
 80161f8:	47b8      	blx	r7
 80161fa:	f8c5 8014 	str.w	r8, [r5, #20]
 80161fe:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016200:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8016202:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016204:	f04f 0800 	mov.w	r8, #0
 8016208:	6920      	ldr	r0, [r4, #16]
 801620a:	f8c4 8014 	str.w	r8, [r4, #20]
 801620e:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8016212:	b128      	cbz	r0, 8016220 <rcl_wait_set_fini+0xa8>
 8016214:	47b8      	blx	r7
 8016216:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016218:	f8c4 8010 	str.w	r8, [r4, #16]
 801621c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801621e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016220:	f04f 0800 	mov.w	r8, #0
 8016224:	69a0      	ldr	r0, [r4, #24]
 8016226:	f8c4 801c 	str.w	r8, [r4, #28]
 801622a:	f8c5 8018 	str.w	r8, [r5, #24]
 801622e:	b128      	cbz	r0, 801623c <rcl_wait_set_fini+0xc4>
 8016230:	9101      	str	r1, [sp, #4]
 8016232:	47b8      	blx	r7
 8016234:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016236:	9901      	ldr	r1, [sp, #4]
 8016238:	f8c4 8018 	str.w	r8, [r4, #24]
 801623c:	6a28      	ldr	r0, [r5, #32]
 801623e:	b120      	cbz	r0, 801624a <rcl_wait_set_fini+0xd2>
 8016240:	47b8      	blx	r7
 8016242:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016244:	2300      	movs	r3, #0
 8016246:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801624a:	2700      	movs	r7, #0
 801624c:	6a20      	ldr	r0, [r4, #32]
 801624e:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8016252:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8016254:	6267      	str	r7, [r4, #36]	; 0x24
 8016256:	626f      	str	r7, [r5, #36]	; 0x24
 8016258:	b120      	cbz	r0, 8016264 <rcl_wait_set_fini+0xec>
 801625a:	9101      	str	r1, [sp, #4]
 801625c:	47c0      	blx	r8
 801625e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016260:	9901      	ldr	r1, [sp, #4]
 8016262:	6227      	str	r7, [r4, #32]
 8016264:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8016266:	b120      	cbz	r0, 8016272 <rcl_wait_set_fini+0xfa>
 8016268:	47c0      	blx	r8
 801626a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801626c:	2300      	movs	r3, #0
 801626e:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8016272:	2700      	movs	r7, #0
 8016274:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8016276:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 801627a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801627c:	62e7      	str	r7, [r4, #44]	; 0x2c
 801627e:	632f      	str	r7, [r5, #48]	; 0x30
 8016280:	b120      	cbz	r0, 801628c <rcl_wait_set_fini+0x114>
 8016282:	9101      	str	r1, [sp, #4]
 8016284:	47c0      	blx	r8
 8016286:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016288:	9901      	ldr	r1, [sp, #4]
 801628a:	62a7      	str	r7, [r4, #40]	; 0x28
 801628c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 801628e:	b120      	cbz	r0, 801629a <rcl_wait_set_fini+0x122>
 8016290:	47c0      	blx	r8
 8016292:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8016294:	2300      	movs	r3, #0
 8016296:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 801629a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801629c:	4628      	mov	r0, r5
 801629e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80162a0:	4798      	blx	r3
 80162a2:	2300      	movs	r3, #0
 80162a4:	6323      	str	r3, [r4, #48]	; 0x30
 80162a6:	4630      	mov	r0, r6
 80162a8:	b002      	add	sp, #8
 80162aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162ae:	260b      	movs	r6, #11
 80162b0:	4630      	mov	r0, r6
 80162b2:	b002      	add	sp, #8
 80162b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080162b8 <rcl_wait_set_add_subscription>:
 80162b8:	b318      	cbz	r0, 8016302 <rcl_wait_set_add_subscription+0x4a>
 80162ba:	b538      	push	{r3, r4, r5, lr}
 80162bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80162be:	4604      	mov	r4, r0
 80162c0:	b30b      	cbz	r3, 8016306 <rcl_wait_set_add_subscription+0x4e>
 80162c2:	b319      	cbz	r1, 801630c <rcl_wait_set_add_subscription+0x54>
 80162c4:	681d      	ldr	r5, [r3, #0]
 80162c6:	6840      	ldr	r0, [r0, #4]
 80162c8:	4285      	cmp	r5, r0
 80162ca:	d217      	bcs.n	80162fc <rcl_wait_set_add_subscription+0x44>
 80162cc:	1c68      	adds	r0, r5, #1
 80162ce:	6018      	str	r0, [r3, #0]
 80162d0:	6823      	ldr	r3, [r4, #0]
 80162d2:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80162d6:	b102      	cbz	r2, 80162da <rcl_wait_set_add_subscription+0x22>
 80162d8:	6015      	str	r5, [r2, #0]
 80162da:	4608      	mov	r0, r1
 80162dc:	f7ff fad8 	bl	8015890 <rcl_subscription_get_rmw_handle>
 80162e0:	b150      	cbz	r0, 80162f8 <rcl_wait_set_add_subscription+0x40>
 80162e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80162e4:	6842      	ldr	r2, [r0, #4]
 80162e6:	2000      	movs	r0, #0
 80162e8:	689b      	ldr	r3, [r3, #8]
 80162ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80162ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80162f0:	6853      	ldr	r3, [r2, #4]
 80162f2:	3301      	adds	r3, #1
 80162f4:	6053      	str	r3, [r2, #4]
 80162f6:	bd38      	pop	{r3, r4, r5, pc}
 80162f8:	2001      	movs	r0, #1
 80162fa:	bd38      	pop	{r3, r4, r5, pc}
 80162fc:	f240 3086 	movw	r0, #902	; 0x386
 8016300:	bd38      	pop	{r3, r4, r5, pc}
 8016302:	200b      	movs	r0, #11
 8016304:	4770      	bx	lr
 8016306:	f44f 7061 	mov.w	r0, #900	; 0x384
 801630a:	bd38      	pop	{r3, r4, r5, pc}
 801630c:	200b      	movs	r0, #11
 801630e:	bd38      	pop	{r3, r4, r5, pc}

08016310 <rcl_wait_set_clear>:
 8016310:	2800      	cmp	r0, #0
 8016312:	d074      	beq.n	80163fe <rcl_wait_set_clear+0xee>
 8016314:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016316:	b510      	push	{r4, lr}
 8016318:	4604      	mov	r4, r0
 801631a:	2b00      	cmp	r3, #0
 801631c:	d071      	beq.n	8016402 <rcl_wait_set_clear+0xf2>
 801631e:	6800      	ldr	r0, [r0, #0]
 8016320:	b138      	cbz	r0, 8016332 <rcl_wait_set_clear+0x22>
 8016322:	6862      	ldr	r2, [r4, #4]
 8016324:	2100      	movs	r1, #0
 8016326:	0092      	lsls	r2, r2, #2
 8016328:	f006 fa04 	bl	801c734 <memset>
 801632c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801632e:	2200      	movs	r2, #0
 8016330:	601a      	str	r2, [r3, #0]
 8016332:	68a0      	ldr	r0, [r4, #8]
 8016334:	b138      	cbz	r0, 8016346 <rcl_wait_set_clear+0x36>
 8016336:	68e2      	ldr	r2, [r4, #12]
 8016338:	2100      	movs	r1, #0
 801633a:	0092      	lsls	r2, r2, #2
 801633c:	f006 f9fa 	bl	801c734 <memset>
 8016340:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016342:	2200      	movs	r2, #0
 8016344:	60da      	str	r2, [r3, #12]
 8016346:	69a0      	ldr	r0, [r4, #24]
 8016348:	b138      	cbz	r0, 801635a <rcl_wait_set_clear+0x4a>
 801634a:	69e2      	ldr	r2, [r4, #28]
 801634c:	2100      	movs	r1, #0
 801634e:	0092      	lsls	r2, r2, #2
 8016350:	f006 f9f0 	bl	801c734 <memset>
 8016354:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016356:	2200      	movs	r2, #0
 8016358:	619a      	str	r2, [r3, #24]
 801635a:	6a20      	ldr	r0, [r4, #32]
 801635c:	b138      	cbz	r0, 801636e <rcl_wait_set_clear+0x5e>
 801635e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8016360:	2100      	movs	r1, #0
 8016362:	0092      	lsls	r2, r2, #2
 8016364:	f006 f9e6 	bl	801c734 <memset>
 8016368:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801636a:	2200      	movs	r2, #0
 801636c:	625a      	str	r2, [r3, #36]	; 0x24
 801636e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8016370:	b138      	cbz	r0, 8016382 <rcl_wait_set_clear+0x72>
 8016372:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016374:	2100      	movs	r1, #0
 8016376:	0092      	lsls	r2, r2, #2
 8016378:	f006 f9dc 	bl	801c734 <memset>
 801637c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801637e:	2200      	movs	r2, #0
 8016380:	631a      	str	r2, [r3, #48]	; 0x30
 8016382:	6920      	ldr	r0, [r4, #16]
 8016384:	b138      	cbz	r0, 8016396 <rcl_wait_set_clear+0x86>
 8016386:	6962      	ldr	r2, [r4, #20]
 8016388:	2100      	movs	r1, #0
 801638a:	0092      	lsls	r2, r2, #2
 801638c:	f006 f9d2 	bl	801c734 <memset>
 8016390:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016392:	2200      	movs	r2, #0
 8016394:	641a      	str	r2, [r3, #64]	; 0x40
 8016396:	6898      	ldr	r0, [r3, #8]
 8016398:	b138      	cbz	r0, 80163aa <rcl_wait_set_clear+0x9a>
 801639a:	685a      	ldr	r2, [r3, #4]
 801639c:	2100      	movs	r1, #0
 801639e:	0092      	lsls	r2, r2, #2
 80163a0:	f006 f9c8 	bl	801c734 <memset>
 80163a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80163a6:	2200      	movs	r2, #0
 80163a8:	605a      	str	r2, [r3, #4]
 80163aa:	6958      	ldr	r0, [r3, #20]
 80163ac:	b138      	cbz	r0, 80163be <rcl_wait_set_clear+0xae>
 80163ae:	691a      	ldr	r2, [r3, #16]
 80163b0:	2100      	movs	r1, #0
 80163b2:	0092      	lsls	r2, r2, #2
 80163b4:	f006 f9be 	bl	801c734 <memset>
 80163b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80163ba:	2200      	movs	r2, #0
 80163bc:	611a      	str	r2, [r3, #16]
 80163be:	6a18      	ldr	r0, [r3, #32]
 80163c0:	b138      	cbz	r0, 80163d2 <rcl_wait_set_clear+0xc2>
 80163c2:	69da      	ldr	r2, [r3, #28]
 80163c4:	2100      	movs	r1, #0
 80163c6:	0092      	lsls	r2, r2, #2
 80163c8:	f006 f9b4 	bl	801c734 <memset>
 80163cc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80163ce:	2200      	movs	r2, #0
 80163d0:	61da      	str	r2, [r3, #28]
 80163d2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80163d4:	b138      	cbz	r0, 80163e6 <rcl_wait_set_clear+0xd6>
 80163d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80163d8:	2100      	movs	r1, #0
 80163da:	0092      	lsls	r2, r2, #2
 80163dc:	f006 f9aa 	bl	801c734 <memset>
 80163e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80163e2:	2200      	movs	r2, #0
 80163e4:	629a      	str	r2, [r3, #40]	; 0x28
 80163e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80163e8:	b140      	cbz	r0, 80163fc <rcl_wait_set_clear+0xec>
 80163ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80163ec:	2100      	movs	r1, #0
 80163ee:	0092      	lsls	r2, r2, #2
 80163f0:	f006 f9a0 	bl	801c734 <memset>
 80163f4:	2300      	movs	r3, #0
 80163f6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80163f8:	4618      	mov	r0, r3
 80163fa:	6353      	str	r3, [r2, #52]	; 0x34
 80163fc:	bd10      	pop	{r4, pc}
 80163fe:	200b      	movs	r0, #11
 8016400:	4770      	bx	lr
 8016402:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016406:	bd10      	pop	{r4, pc}

08016408 <rcl_wait_set_resize>:
 8016408:	2800      	cmp	r0, #0
 801640a:	f000 8180 	beq.w	801670e <rcl_wait_set_resize+0x306>
 801640e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016412:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8016414:	b083      	sub	sp, #12
 8016416:	4605      	mov	r5, r0
 8016418:	2c00      	cmp	r4, #0
 801641a:	f000 817a 	beq.w	8016712 <rcl_wait_set_resize+0x30a>
 801641e:	f04f 0900 	mov.w	r9, #0
 8016422:	461f      	mov	r7, r3
 8016424:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8016428:	4688      	mov	r8, r1
 801642a:	4616      	mov	r6, r2
 801642c:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 8016430:	f8c0 9004 	str.w	r9, [r0, #4]
 8016434:	f8c4 9000 	str.w	r9, [r4]
 8016438:	2900      	cmp	r1, #0
 801643a:	f000 80bf 	beq.w	80165bc <rcl_wait_set_resize+0x1b4>
 801643e:	008c      	lsls	r4, r1, #2
 8016440:	4652      	mov	r2, sl
 8016442:	6800      	ldr	r0, [r0, #0]
 8016444:	4621      	mov	r1, r4
 8016446:	9301      	str	r3, [sp, #4]
 8016448:	4798      	blx	r3
 801644a:	9b01      	ldr	r3, [sp, #4]
 801644c:	6028      	str	r0, [r5, #0]
 801644e:	2800      	cmp	r0, #0
 8016450:	f000 80f6 	beq.w	8016640 <rcl_wait_set_resize+0x238>
 8016454:	4622      	mov	r2, r4
 8016456:	4649      	mov	r1, r9
 8016458:	9301      	str	r3, [sp, #4]
 801645a:	f006 f96b 	bl	801c734 <memset>
 801645e:	f8c5 8004 	str.w	r8, [r5, #4]
 8016462:	4652      	mov	r2, sl
 8016464:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8016468:	4621      	mov	r1, r4
 801646a:	9b01      	ldr	r3, [sp, #4]
 801646c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8016470:	f8c8 9004 	str.w	r9, [r8, #4]
 8016474:	4798      	blx	r3
 8016476:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016478:	f8c8 0008 	str.w	r0, [r8, #8]
 801647c:	689b      	ldr	r3, [r3, #8]
 801647e:	2b00      	cmp	r3, #0
 8016480:	f000 814a 	beq.w	8016718 <rcl_wait_set_resize+0x310>
 8016484:	4622      	mov	r2, r4
 8016486:	4649      	mov	r1, r9
 8016488:	4618      	mov	r0, r3
 801648a:	f006 f953 	bl	801c734 <memset>
 801648e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8016490:	f04f 0800 	mov.w	r8, #0
 8016494:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8016498:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 801649c:	f8c5 800c 	str.w	r8, [r5, #12]
 80164a0:	f8c4 800c 	str.w	r8, [r4, #12]
 80164a4:	2e00      	cmp	r6, #0
 80164a6:	f040 809b 	bne.w	80165e0 <rcl_wait_set_resize+0x1d8>
 80164aa:	68a8      	ldr	r0, [r5, #8]
 80164ac:	b128      	cbz	r0, 80164ba <rcl_wait_set_resize+0xb2>
 80164ae:	4649      	mov	r1, r9
 80164b0:	4790      	blx	r2
 80164b2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80164b4:	60ae      	str	r6, [r5, #8]
 80164b6:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80164ba:	f04f 0800 	mov.w	r8, #0
 80164be:	19f6      	adds	r6, r6, r7
 80164c0:	f8c4 8010 	str.w	r8, [r4, #16]
 80164c4:	f040 80a2 	bne.w	801660c <rcl_wait_set_resize+0x204>
 80164c8:	6960      	ldr	r0, [r4, #20]
 80164ca:	b130      	cbz	r0, 80164da <rcl_wait_set_resize+0xd2>
 80164cc:	4649      	mov	r1, r9
 80164ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80164d0:	4798      	blx	r3
 80164d2:	6166      	str	r6, [r4, #20]
 80164d4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80164d6:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80164da:	2600      	movs	r6, #0
 80164dc:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 80164e0:	616e      	str	r6, [r5, #20]
 80164e2:	6426      	str	r6, [r4, #64]	; 0x40
 80164e4:	2f00      	cmp	r7, #0
 80164e6:	f040 80af 	bne.w	8016648 <rcl_wait_set_resize+0x240>
 80164ea:	6928      	ldr	r0, [r5, #16]
 80164ec:	b138      	cbz	r0, 80164fe <rcl_wait_set_resize+0xf6>
 80164ee:	4649      	mov	r1, r9
 80164f0:	47d0      	blx	sl
 80164f2:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80164f4:	612f      	str	r7, [r5, #16]
 80164f6:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80164fa:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 80164fe:	2600      	movs	r6, #0
 8016500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016502:	61ee      	str	r6, [r5, #28]
 8016504:	61a6      	str	r6, [r4, #24]
 8016506:	2b00      	cmp	r3, #0
 8016508:	f040 8093 	bne.w	8016632 <rcl_wait_set_resize+0x22a>
 801650c:	69a8      	ldr	r0, [r5, #24]
 801650e:	b120      	cbz	r0, 801651a <rcl_wait_set_resize+0x112>
 8016510:	4649      	mov	r1, r9
 8016512:	47d0      	blx	sl
 8016514:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016516:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8016518:	61ab      	str	r3, [r5, #24]
 801651a:	6a20      	ldr	r0, [r4, #32]
 801651c:	b128      	cbz	r0, 801652a <rcl_wait_set_resize+0x122>
 801651e:	4649      	mov	r1, r9
 8016520:	47d0      	blx	sl
 8016522:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8016524:	2300      	movs	r3, #0
 8016526:	e9c4 3307 	strd	r3, r3, [r4, #28]
 801652a:	2600      	movs	r6, #0
 801652c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801652e:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8016530:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 8016534:	626e      	str	r6, [r5, #36]	; 0x24
 8016536:	6266      	str	r6, [r4, #36]	; 0x24
 8016538:	2b00      	cmp	r3, #0
 801653a:	f000 8098 	beq.w	801666e <rcl_wait_set_resize+0x266>
 801653e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8016542:	463a      	mov	r2, r7
 8016544:	6a28      	ldr	r0, [r5, #32]
 8016546:	4651      	mov	r1, sl
 8016548:	47c8      	blx	r9
 801654a:	6228      	str	r0, [r5, #32]
 801654c:	2800      	cmp	r0, #0
 801654e:	d077      	beq.n	8016640 <rcl_wait_set_resize+0x238>
 8016550:	4652      	mov	r2, sl
 8016552:	4631      	mov	r1, r6
 8016554:	f006 f8ee 	bl	801c734 <memset>
 8016558:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801655a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801655c:	463a      	mov	r2, r7
 801655e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8016560:	4651      	mov	r1, sl
 8016562:	626b      	str	r3, [r5, #36]	; 0x24
 8016564:	62a6      	str	r6, [r4, #40]	; 0x28
 8016566:	47c8      	blx	r9
 8016568:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801656a:	62e0      	str	r0, [r4, #44]	; 0x2c
 801656c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 801656e:	2c00      	cmp	r4, #0
 8016570:	f000 80f2 	beq.w	8016758 <rcl_wait_set_resize+0x350>
 8016574:	4620      	mov	r0, r4
 8016576:	4652      	mov	r2, sl
 8016578:	4631      	mov	r1, r6
 801657a:	f006 f8db 	bl	801c734 <memset>
 801657e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8016580:	2600      	movs	r6, #0
 8016582:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016584:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8016586:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801658a:	62ee      	str	r6, [r5, #44]	; 0x2c
 801658c:	6326      	str	r6, [r4, #48]	; 0x30
 801658e:	2b00      	cmp	r3, #0
 8016590:	f040 8097 	bne.w	80166c2 <rcl_wait_set_resize+0x2ba>
 8016594:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8016596:	b120      	cbz	r0, 80165a2 <rcl_wait_set_resize+0x19a>
 8016598:	4639      	mov	r1, r7
 801659a:	47c0      	blx	r8
 801659c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801659e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80165a0:	62ab      	str	r3, [r5, #40]	; 0x28
 80165a2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80165a4:	2800      	cmp	r0, #0
 80165a6:	d04c      	beq.n	8016642 <rcl_wait_set_resize+0x23a>
 80165a8:	4639      	mov	r1, r7
 80165aa:	47c0      	blx	r8
 80165ac:	2300      	movs	r3, #0
 80165ae:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80165b0:	4618      	mov	r0, r3
 80165b2:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 80165b6:	b003      	add	sp, #12
 80165b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165bc:	6800      	ldr	r0, [r0, #0]
 80165be:	b120      	cbz	r0, 80165ca <rcl_wait_set_resize+0x1c2>
 80165c0:	4651      	mov	r1, sl
 80165c2:	47d8      	blx	fp
 80165c4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80165c6:	f8c5 8000 	str.w	r8, [r5]
 80165ca:	68a0      	ldr	r0, [r4, #8]
 80165cc:	2800      	cmp	r0, #0
 80165ce:	f43f af5f 	beq.w	8016490 <rcl_wait_set_resize+0x88>
 80165d2:	4651      	mov	r1, sl
 80165d4:	47d8      	blx	fp
 80165d6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80165d8:	2300      	movs	r3, #0
 80165da:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80165de:	e757      	b.n	8016490 <rcl_wait_set_resize+0x88>
 80165e0:	00b4      	lsls	r4, r6, #2
 80165e2:	464a      	mov	r2, r9
 80165e4:	68a8      	ldr	r0, [r5, #8]
 80165e6:	4621      	mov	r1, r4
 80165e8:	4798      	blx	r3
 80165ea:	60a8      	str	r0, [r5, #8]
 80165ec:	b340      	cbz	r0, 8016640 <rcl_wait_set_resize+0x238>
 80165ee:	4622      	mov	r2, r4
 80165f0:	4641      	mov	r1, r8
 80165f2:	f006 f89f 	bl	801c734 <memset>
 80165f6:	f04f 0800 	mov.w	r8, #0
 80165fa:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80165fc:	60ee      	str	r6, [r5, #12]
 80165fe:	19f6      	adds	r6, r6, r7
 8016600:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8016604:	f8c4 8010 	str.w	r8, [r4, #16]
 8016608:	f43f af5e 	beq.w	80164c8 <rcl_wait_set_resize+0xc0>
 801660c:	00b6      	lsls	r6, r6, #2
 801660e:	464a      	mov	r2, r9
 8016610:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8016612:	6960      	ldr	r0, [r4, #20]
 8016614:	4631      	mov	r1, r6
 8016616:	4798      	blx	r3
 8016618:	4681      	mov	r9, r0
 801661a:	6160      	str	r0, [r4, #20]
 801661c:	2800      	cmp	r0, #0
 801661e:	f000 8084 	beq.w	801672a <rcl_wait_set_resize+0x322>
 8016622:	4632      	mov	r2, r6
 8016624:	4641      	mov	r1, r8
 8016626:	f006 f885 	bl	801c734 <memset>
 801662a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801662c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8016630:	e753      	b.n	80164da <rcl_wait_set_resize+0xd2>
 8016632:	009c      	lsls	r4, r3, #2
 8016634:	464a      	mov	r2, r9
 8016636:	69a8      	ldr	r0, [r5, #24]
 8016638:	4621      	mov	r1, r4
 801663a:	47c0      	blx	r8
 801663c:	61a8      	str	r0, [r5, #24]
 801663e:	bb40      	cbnz	r0, 8016692 <rcl_wait_set_resize+0x28a>
 8016640:	200a      	movs	r0, #10
 8016642:	b003      	add	sp, #12
 8016644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016648:	00bc      	lsls	r4, r7, #2
 801664a:	464a      	mov	r2, r9
 801664c:	6928      	ldr	r0, [r5, #16]
 801664e:	4621      	mov	r1, r4
 8016650:	47c0      	blx	r8
 8016652:	6128      	str	r0, [r5, #16]
 8016654:	2800      	cmp	r0, #0
 8016656:	d0f3      	beq.n	8016640 <rcl_wait_set_resize+0x238>
 8016658:	4622      	mov	r2, r4
 801665a:	4631      	mov	r1, r6
 801665c:	f006 f86a 	bl	801c734 <memset>
 8016660:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8016662:	616f      	str	r7, [r5, #20]
 8016664:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8016668:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 801666c:	e747      	b.n	80164fe <rcl_wait_set_resize+0xf6>
 801666e:	6a28      	ldr	r0, [r5, #32]
 8016670:	b120      	cbz	r0, 801667c <rcl_wait_set_resize+0x274>
 8016672:	4639      	mov	r1, r7
 8016674:	47c0      	blx	r8
 8016676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016678:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801667a:	622b      	str	r3, [r5, #32]
 801667c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801667e:	2800      	cmp	r0, #0
 8016680:	f43f af7e 	beq.w	8016580 <rcl_wait_set_resize+0x178>
 8016684:	4639      	mov	r1, r7
 8016686:	47c0      	blx	r8
 8016688:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801668a:	2300      	movs	r3, #0
 801668c:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8016690:	e776      	b.n	8016580 <rcl_wait_set_resize+0x178>
 8016692:	4622      	mov	r2, r4
 8016694:	4631      	mov	r1, r6
 8016696:	f006 f84d 	bl	801c734 <memset>
 801669a:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 801669c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801669e:	464a      	mov	r2, r9
 80166a0:	6a38      	ldr	r0, [r7, #32]
 80166a2:	4621      	mov	r1, r4
 80166a4:	61eb      	str	r3, [r5, #28]
 80166a6:	61fe      	str	r6, [r7, #28]
 80166a8:	47c0      	blx	r8
 80166aa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80166ac:	6238      	str	r0, [r7, #32]
 80166ae:	6a1f      	ldr	r7, [r3, #32]
 80166b0:	2f00      	cmp	r7, #0
 80166b2:	d04a      	beq.n	801674a <rcl_wait_set_resize+0x342>
 80166b4:	4622      	mov	r2, r4
 80166b6:	4631      	mov	r1, r6
 80166b8:	4638      	mov	r0, r7
 80166ba:	f006 f83b 	bl	801c734 <memset>
 80166be:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80166c0:	e733      	b.n	801652a <rcl_wait_set_resize+0x122>
 80166c2:	009c      	lsls	r4, r3, #2
 80166c4:	463a      	mov	r2, r7
 80166c6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80166c8:	4621      	mov	r1, r4
 80166ca:	47c8      	blx	r9
 80166cc:	62a8      	str	r0, [r5, #40]	; 0x28
 80166ce:	2800      	cmp	r0, #0
 80166d0:	d0b6      	beq.n	8016640 <rcl_wait_set_resize+0x238>
 80166d2:	4622      	mov	r2, r4
 80166d4:	4631      	mov	r1, r6
 80166d6:	f006 f82d 	bl	801c734 <memset>
 80166da:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 80166de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80166e0:	463a      	mov	r2, r7
 80166e2:	4621      	mov	r1, r4
 80166e4:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 80166e8:	62eb      	str	r3, [r5, #44]	; 0x2c
 80166ea:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 80166ee:	47c8      	blx	r9
 80166f0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80166f2:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 80166f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d034      	beq.n	8016766 <rcl_wait_set_resize+0x35e>
 80166fc:	4622      	mov	r2, r4
 80166fe:	4631      	mov	r1, r6
 8016700:	4618      	mov	r0, r3
 8016702:	f006 f817 	bl	801c734 <memset>
 8016706:	4630      	mov	r0, r6
 8016708:	b003      	add	sp, #12
 801670a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801670e:	200b      	movs	r0, #11
 8016710:	4770      	bx	lr
 8016712:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016716:	e794      	b.n	8016642 <rcl_wait_set_resize+0x23a>
 8016718:	6828      	ldr	r0, [r5, #0]
 801671a:	4651      	mov	r1, sl
 801671c:	9301      	str	r3, [sp, #4]
 801671e:	47d8      	blx	fp
 8016720:	9b01      	ldr	r3, [sp, #4]
 8016722:	200a      	movs	r0, #10
 8016724:	e9c5 3300 	strd	r3, r3, [r5]
 8016728:	e78b      	b.n	8016642 <rcl_wait_set_resize+0x23a>
 801672a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801672c:	68a8      	ldr	r0, [r5, #8]
 801672e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8016730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016732:	4798      	blx	r3
 8016734:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016736:	6928      	ldr	r0, [r5, #16]
 8016738:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801673a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801673c:	e9c5 9902 	strd	r9, r9, [r5, #8]
 8016740:	4790      	blx	r2
 8016742:	200a      	movs	r0, #10
 8016744:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8016748:	e77b      	b.n	8016642 <rcl_wait_set_resize+0x23a>
 801674a:	69a8      	ldr	r0, [r5, #24]
 801674c:	4649      	mov	r1, r9
 801674e:	47d0      	blx	sl
 8016750:	200a      	movs	r0, #10
 8016752:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8016756:	e774      	b.n	8016642 <rcl_wait_set_resize+0x23a>
 8016758:	6a28      	ldr	r0, [r5, #32]
 801675a:	4639      	mov	r1, r7
 801675c:	47c0      	blx	r8
 801675e:	200a      	movs	r0, #10
 8016760:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8016764:	e76d      	b.n	8016642 <rcl_wait_set_resize+0x23a>
 8016766:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8016768:	4639      	mov	r1, r7
 801676a:	9301      	str	r3, [sp, #4]
 801676c:	47c0      	blx	r8
 801676e:	9b01      	ldr	r3, [sp, #4]
 8016770:	200a      	movs	r0, #10
 8016772:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8016776:	e764      	b.n	8016642 <rcl_wait_set_resize+0x23a>

08016778 <rcl_wait_set_init>:
 8016778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801677c:	b085      	sub	sp, #20
 801677e:	4605      	mov	r5, r0
 8016780:	460e      	mov	r6, r1
 8016782:	4617      	mov	r7, r2
 8016784:	a812      	add	r0, sp, #72	; 0x48
 8016786:	4698      	mov	r8, r3
 8016788:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 801678c:	f7f7 fa5c 	bl	800dc48 <rcutils_allocator_is_valid>
 8016790:	2d00      	cmp	r5, #0
 8016792:	d072      	beq.n	801687a <rcl_wait_set_init+0x102>
 8016794:	f080 0001 	eor.w	r0, r0, #1
 8016798:	b2c0      	uxtb	r0, r0
 801679a:	2800      	cmp	r0, #0
 801679c:	d16d      	bne.n	801687a <rcl_wait_set_init+0x102>
 801679e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 80167a2:	f1ba 0f00 	cmp.w	sl, #0
 80167a6:	d004      	beq.n	80167b2 <rcl_wait_set_init+0x3a>
 80167a8:	2464      	movs	r4, #100	; 0x64
 80167aa:	4620      	mov	r0, r4
 80167ac:	b005      	add	sp, #20
 80167ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167b2:	f1b9 0f00 	cmp.w	r9, #0
 80167b6:	d060      	beq.n	801687a <rcl_wait_set_init+0x102>
 80167b8:	4648      	mov	r0, r9
 80167ba:	f7fd fee5 	bl	8014588 <rcl_context_is_valid>
 80167be:	2800      	cmp	r0, #0
 80167c0:	d068      	beq.n	8016894 <rcl_wait_set_init+0x11c>
 80167c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80167c4:	205c      	movs	r0, #92	; 0x5c
 80167c6:	9916      	ldr	r1, [sp, #88]	; 0x58
 80167c8:	4798      	blx	r3
 80167ca:	6328      	str	r0, [r5, #48]	; 0x30
 80167cc:	2800      	cmp	r0, #0
 80167ce:	d063      	beq.n	8016898 <rcl_wait_set_init+0x120>
 80167d0:	225c      	movs	r2, #92	; 0x5c
 80167d2:	4651      	mov	r1, sl
 80167d4:	f005 ffae 	bl	801c734 <memset>
 80167d8:	ac12      	add	r4, sp, #72	; 0x48
 80167da:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 80167de:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 80167e2:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 80167e6:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 80167ea:	eb03 0e02 	add.w	lr, r3, r2
 80167ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80167f0:	f8d9 9000 	ldr.w	r9, [r9]
 80167f4:	449e      	add	lr, r3
 80167f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80167f8:	e9cb aa01 	strd	sl, sl, [fp, #4]
 80167fc:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8016800:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8016804:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 8016808:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 801680c:	44be      	add	lr, r7
 801680e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016812:	6823      	ldr	r3, [r4, #0]
 8016814:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 8016818:	f109 0028 	add.w	r0, r9, #40	; 0x28
 801681c:	f8cc 3000 	str.w	r3, [ip]
 8016820:	f002 ff8e 	bl	8019740 <rmw_create_wait_set>
 8016824:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016826:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 801682a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801682c:	b350      	cbz	r0, 8016884 <rcl_wait_set_init+0x10c>
 801682e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8016830:	4643      	mov	r3, r8
 8016832:	463a      	mov	r2, r7
 8016834:	4631      	mov	r1, r6
 8016836:	9402      	str	r4, [sp, #8]
 8016838:	4628      	mov	r0, r5
 801683a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801683c:	9401      	str	r4, [sp, #4]
 801683e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8016840:	9400      	str	r4, [sp, #0]
 8016842:	f7ff fde1 	bl	8016408 <rcl_wait_set_resize>
 8016846:	4604      	mov	r4, r0
 8016848:	2800      	cmp	r0, #0
 801684a:	d0ae      	beq.n	80167aa <rcl_wait_set_init+0x32>
 801684c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801684e:	bb2b      	cbnz	r3, 801689c <rcl_wait_set_init+0x124>
 8016850:	2600      	movs	r6, #0
 8016852:	4628      	mov	r0, r5
 8016854:	4633      	mov	r3, r6
 8016856:	4632      	mov	r2, r6
 8016858:	4631      	mov	r1, r6
 801685a:	9600      	str	r6, [sp, #0]
 801685c:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8016860:	f7ff fdd2 	bl	8016408 <rcl_wait_set_resize>
 8016864:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8016866:	2800      	cmp	r0, #0
 8016868:	d09f      	beq.n	80167aa <rcl_wait_set_init+0x32>
 801686a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 801686c:	6d81      	ldr	r1, [r0, #88]	; 0x58
 801686e:	4798      	blx	r3
 8016870:	4620      	mov	r0, r4
 8016872:	632e      	str	r6, [r5, #48]	; 0x30
 8016874:	b005      	add	sp, #20
 8016876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801687a:	240b      	movs	r4, #11
 801687c:	4620      	mov	r0, r4
 801687e:	b005      	add	sp, #20
 8016880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016884:	2401      	movs	r4, #1
 8016886:	f002 ff65 	bl	8019754 <rmw_destroy_wait_set>
 801688a:	2800      	cmp	r0, #0
 801688c:	bf18      	it	ne
 801688e:	f44f 7461 	movne.w	r4, #900	; 0x384
 8016892:	e7dd      	b.n	8016850 <rcl_wait_set_init+0xd8>
 8016894:	2465      	movs	r4, #101	; 0x65
 8016896:	e788      	b.n	80167aa <rcl_wait_set_init+0x32>
 8016898:	240a      	movs	r4, #10
 801689a:	e786      	b.n	80167aa <rcl_wait_set_init+0x32>
 801689c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801689e:	e7f2      	b.n	8016886 <rcl_wait_set_init+0x10e>

080168a0 <rcl_wait_set_add_guard_condition>:
 80168a0:	b318      	cbz	r0, 80168ea <rcl_wait_set_add_guard_condition+0x4a>
 80168a2:	b538      	push	{r3, r4, r5, lr}
 80168a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80168a6:	4604      	mov	r4, r0
 80168a8:	b30b      	cbz	r3, 80168ee <rcl_wait_set_add_guard_condition+0x4e>
 80168aa:	b319      	cbz	r1, 80168f4 <rcl_wait_set_add_guard_condition+0x54>
 80168ac:	68dd      	ldr	r5, [r3, #12]
 80168ae:	68c0      	ldr	r0, [r0, #12]
 80168b0:	4285      	cmp	r5, r0
 80168b2:	d217      	bcs.n	80168e4 <rcl_wait_set_add_guard_condition+0x44>
 80168b4:	1c68      	adds	r0, r5, #1
 80168b6:	60d8      	str	r0, [r3, #12]
 80168b8:	68a3      	ldr	r3, [r4, #8]
 80168ba:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80168be:	b102      	cbz	r2, 80168c2 <rcl_wait_set_add_guard_condition+0x22>
 80168c0:	6015      	str	r5, [r2, #0]
 80168c2:	4608      	mov	r0, r1
 80168c4:	f004 ff96 	bl	801b7f4 <rcl_guard_condition_get_rmw_handle>
 80168c8:	b150      	cbz	r0, 80168e0 <rcl_wait_set_add_guard_condition+0x40>
 80168ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80168cc:	6842      	ldr	r2, [r0, #4]
 80168ce:	2000      	movs	r0, #0
 80168d0:	695b      	ldr	r3, [r3, #20]
 80168d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80168d6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80168d8:	6913      	ldr	r3, [r2, #16]
 80168da:	3301      	adds	r3, #1
 80168dc:	6113      	str	r3, [r2, #16]
 80168de:	bd38      	pop	{r3, r4, r5, pc}
 80168e0:	2001      	movs	r0, #1
 80168e2:	bd38      	pop	{r3, r4, r5, pc}
 80168e4:	f240 3086 	movw	r0, #902	; 0x386
 80168e8:	bd38      	pop	{r3, r4, r5, pc}
 80168ea:	200b      	movs	r0, #11
 80168ec:	4770      	bx	lr
 80168ee:	f44f 7061 	mov.w	r0, #900	; 0x384
 80168f2:	bd38      	pop	{r3, r4, r5, pc}
 80168f4:	200b      	movs	r0, #11
 80168f6:	bd38      	pop	{r3, r4, r5, pc}

080168f8 <rcl_wait_set_add_timer>:
 80168f8:	b328      	cbz	r0, 8016946 <rcl_wait_set_add_timer+0x4e>
 80168fa:	b538      	push	{r3, r4, r5, lr}
 80168fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80168fe:	4604      	mov	r4, r0
 8016900:	b31b      	cbz	r3, 801694a <rcl_wait_set_add_timer+0x52>
 8016902:	b329      	cbz	r1, 8016950 <rcl_wait_set_add_timer+0x58>
 8016904:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8016906:	6965      	ldr	r5, [r4, #20]
 8016908:	42a8      	cmp	r0, r5
 801690a:	d219      	bcs.n	8016940 <rcl_wait_set_add_timer+0x48>
 801690c:	1c45      	adds	r5, r0, #1
 801690e:	641d      	str	r5, [r3, #64]	; 0x40
 8016910:	6923      	ldr	r3, [r4, #16]
 8016912:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8016916:	b102      	cbz	r2, 801691a <rcl_wait_set_add_timer+0x22>
 8016918:	6010      	str	r0, [r2, #0]
 801691a:	4608      	mov	r0, r1
 801691c:	f7ff fb9a 	bl	8016054 <rcl_timer_get_guard_condition>
 8016920:	b168      	cbz	r0, 801693e <rcl_wait_set_add_timer+0x46>
 8016922:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016924:	68e3      	ldr	r3, [r4, #12]
 8016926:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8016928:	3b01      	subs	r3, #1
 801692a:	441d      	add	r5, r3
 801692c:	f004 ff62 	bl	801b7f4 <rcl_guard_condition_get_rmw_handle>
 8016930:	b180      	cbz	r0, 8016954 <rcl_wait_set_add_timer+0x5c>
 8016932:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016934:	6842      	ldr	r2, [r0, #4]
 8016936:	2000      	movs	r0, #0
 8016938:	695b      	ldr	r3, [r3, #20]
 801693a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801693e:	bd38      	pop	{r3, r4, r5, pc}
 8016940:	f240 3086 	movw	r0, #902	; 0x386
 8016944:	bd38      	pop	{r3, r4, r5, pc}
 8016946:	200b      	movs	r0, #11
 8016948:	4770      	bx	lr
 801694a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801694e:	bd38      	pop	{r3, r4, r5, pc}
 8016950:	200b      	movs	r0, #11
 8016952:	bd38      	pop	{r3, r4, r5, pc}
 8016954:	2001      	movs	r0, #1
 8016956:	bd38      	pop	{r3, r4, r5, pc}

08016958 <rcl_wait_set_add_client>:
 8016958:	b318      	cbz	r0, 80169a2 <rcl_wait_set_add_client+0x4a>
 801695a:	b538      	push	{r3, r4, r5, lr}
 801695c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801695e:	4604      	mov	r4, r0
 8016960:	b30b      	cbz	r3, 80169a6 <rcl_wait_set_add_client+0x4e>
 8016962:	b319      	cbz	r1, 80169ac <rcl_wait_set_add_client+0x54>
 8016964:	699d      	ldr	r5, [r3, #24]
 8016966:	69c0      	ldr	r0, [r0, #28]
 8016968:	4285      	cmp	r5, r0
 801696a:	d217      	bcs.n	801699c <rcl_wait_set_add_client+0x44>
 801696c:	1c68      	adds	r0, r5, #1
 801696e:	6198      	str	r0, [r3, #24]
 8016970:	69a3      	ldr	r3, [r4, #24]
 8016972:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8016976:	b102      	cbz	r2, 801697a <rcl_wait_set_add_client+0x22>
 8016978:	6015      	str	r5, [r2, #0]
 801697a:	4608      	mov	r0, r1
 801697c:	f7fd fd1a 	bl	80143b4 <rcl_client_get_rmw_handle>
 8016980:	b150      	cbz	r0, 8016998 <rcl_wait_set_add_client+0x40>
 8016982:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016984:	6842      	ldr	r2, [r0, #4]
 8016986:	2000      	movs	r0, #0
 8016988:	6a1b      	ldr	r3, [r3, #32]
 801698a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801698e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016990:	69d3      	ldr	r3, [r2, #28]
 8016992:	3301      	adds	r3, #1
 8016994:	61d3      	str	r3, [r2, #28]
 8016996:	bd38      	pop	{r3, r4, r5, pc}
 8016998:	2001      	movs	r0, #1
 801699a:	bd38      	pop	{r3, r4, r5, pc}
 801699c:	f240 3086 	movw	r0, #902	; 0x386
 80169a0:	bd38      	pop	{r3, r4, r5, pc}
 80169a2:	200b      	movs	r0, #11
 80169a4:	4770      	bx	lr
 80169a6:	f44f 7061 	mov.w	r0, #900	; 0x384
 80169aa:	bd38      	pop	{r3, r4, r5, pc}
 80169ac:	200b      	movs	r0, #11
 80169ae:	bd38      	pop	{r3, r4, r5, pc}

080169b0 <rcl_wait_set_add_service>:
 80169b0:	b318      	cbz	r0, 80169fa <rcl_wait_set_add_service+0x4a>
 80169b2:	b538      	push	{r3, r4, r5, lr}
 80169b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80169b6:	4604      	mov	r4, r0
 80169b8:	b30b      	cbz	r3, 80169fe <rcl_wait_set_add_service+0x4e>
 80169ba:	b319      	cbz	r1, 8016a04 <rcl_wait_set_add_service+0x54>
 80169bc:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80169be:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80169c0:	4285      	cmp	r5, r0
 80169c2:	d217      	bcs.n	80169f4 <rcl_wait_set_add_service+0x44>
 80169c4:	1c68      	adds	r0, r5, #1
 80169c6:	6258      	str	r0, [r3, #36]	; 0x24
 80169c8:	6a23      	ldr	r3, [r4, #32]
 80169ca:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80169ce:	b102      	cbz	r2, 80169d2 <rcl_wait_set_add_service+0x22>
 80169d0:	6015      	str	r5, [r2, #0]
 80169d2:	4608      	mov	r0, r1
 80169d4:	f7fe fcf2 	bl	80153bc <rcl_service_get_rmw_handle>
 80169d8:	b150      	cbz	r0, 80169f0 <rcl_wait_set_add_service+0x40>
 80169da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80169dc:	6842      	ldr	r2, [r0, #4]
 80169de:	2000      	movs	r0, #0
 80169e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80169e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80169e8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80169ea:	3301      	adds	r3, #1
 80169ec:	6293      	str	r3, [r2, #40]	; 0x28
 80169ee:	bd38      	pop	{r3, r4, r5, pc}
 80169f0:	2001      	movs	r0, #1
 80169f2:	bd38      	pop	{r3, r4, r5, pc}
 80169f4:	f240 3086 	movw	r0, #902	; 0x386
 80169f8:	bd38      	pop	{r3, r4, r5, pc}
 80169fa:	200b      	movs	r0, #11
 80169fc:	4770      	bx	lr
 80169fe:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016a02:	bd38      	pop	{r3, r4, r5, pc}
 8016a04:	200b      	movs	r0, #11
 8016a06:	bd38      	pop	{r3, r4, r5, pc}

08016a08 <rcl_wait>:
 8016a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a0c:	ed2d 8b02 	vpush	{d8}
 8016a10:	b08d      	sub	sp, #52	; 0x34
 8016a12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016a16:	2800      	cmp	r0, #0
 8016a18:	f000 814f 	beq.w	8016cba <rcl_wait+0x2b2>
 8016a1c:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8016a1e:	4605      	mov	r5, r0
 8016a20:	2e00      	cmp	r6, #0
 8016a22:	f000 811a 	beq.w	8016c5a <rcl_wait+0x252>
 8016a26:	6843      	ldr	r3, [r0, #4]
 8016a28:	b983      	cbnz	r3, 8016a4c <rcl_wait+0x44>
 8016a2a:	68eb      	ldr	r3, [r5, #12]
 8016a2c:	b973      	cbnz	r3, 8016a4c <rcl_wait+0x44>
 8016a2e:	696b      	ldr	r3, [r5, #20]
 8016a30:	b963      	cbnz	r3, 8016a4c <rcl_wait+0x44>
 8016a32:	69eb      	ldr	r3, [r5, #28]
 8016a34:	b953      	cbnz	r3, 8016a4c <rcl_wait+0x44>
 8016a36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016a38:	b943      	cbnz	r3, 8016a4c <rcl_wait+0x44>
 8016a3a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8016a3c:	b933      	cbnz	r3, 8016a4c <rcl_wait+0x44>
 8016a3e:	f240 3085 	movw	r0, #901	; 0x385
 8016a42:	b00d      	add	sp, #52	; 0x34
 8016a44:	ecbd 8b02 	vpop	{d8}
 8016a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a4c:	9b04      	ldr	r3, [sp, #16]
 8016a4e:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8016a50:	2b01      	cmp	r3, #1
 8016a52:	9b05      	ldr	r3, [sp, #20]
 8016a54:	f173 0300 	sbcs.w	r3, r3, #0
 8016a58:	f2c0 80f8 	blt.w	8016c4c <rcl_wait+0x244>
 8016a5c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8016a60:	2a00      	cmp	r2, #0
 8016a62:	f000 810f 	beq.w	8016c84 <rcl_wait+0x27c>
 8016a66:	2400      	movs	r4, #0
 8016a68:	4613      	mov	r3, r2
 8016a6a:	f240 3921 	movw	r9, #801	; 0x321
 8016a6e:	4632      	mov	r2, r6
 8016a70:	46a2      	mov	sl, r4
 8016a72:	46a3      	mov	fp, r4
 8016a74:	ed9f 8b98 	vldr	d8, [pc, #608]	; 8016cd8 <rcl_wait+0x2d0>
 8016a78:	e014      	b.n	8016aa4 <rcl_wait+0x9c>
 8016a7a:	2800      	cmp	r0, #0
 8016a7c:	d1e1      	bne.n	8016a42 <rcl_wait+0x3a>
 8016a7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016a82:	4542      	cmp	r2, r8
 8016a84:	eb73 0107 	sbcs.w	r1, r3, r7
 8016a88:	da03      	bge.n	8016a92 <rcl_wait+0x8a>
 8016a8a:	4690      	mov	r8, r2
 8016a8c:	461f      	mov	r7, r3
 8016a8e:	f04f 0b01 	mov.w	fp, #1
 8016a92:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8016a94:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8016a96:	3401      	adds	r4, #1
 8016a98:	f14a 0a00 	adc.w	sl, sl, #0
 8016a9c:	429c      	cmp	r4, r3
 8016a9e:	f17a 0100 	sbcs.w	r1, sl, #0
 8016aa2:	d228      	bcs.n	8016af6 <rcl_wait+0xee>
 8016aa4:	6928      	ldr	r0, [r5, #16]
 8016aa6:	a908      	add	r1, sp, #32
 8016aa8:	00a6      	lsls	r6, r4, #2
 8016aaa:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8016aae:	2800      	cmp	r0, #0
 8016ab0:	d0f1      	beq.n	8016a96 <rcl_wait+0x8e>
 8016ab2:	68eb      	ldr	r3, [r5, #12]
 8016ab4:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8016ab8:	4423      	add	r3, r4
 8016aba:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8016abe:	f1be 0f00 	cmp.w	lr, #0
 8016ac2:	d006      	beq.n	8016ad2 <rcl_wait+0xca>
 8016ac4:	6913      	ldr	r3, [r2, #16]
 8016ac6:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8016aca:	3301      	adds	r3, #1
 8016acc:	6113      	str	r3, [r2, #16]
 8016ace:	692b      	ldr	r3, [r5, #16]
 8016ad0:	5998      	ldr	r0, [r3, r6]
 8016ad2:	ed8d 8b08 	vstr	d8, [sp, #32]
 8016ad6:	f7ff fa8b 	bl	8015ff0 <rcl_timer_get_time_until_next_call>
 8016ada:	4548      	cmp	r0, r9
 8016adc:	d1cd      	bne.n	8016a7a <rcl_wait+0x72>
 8016ade:	692b      	ldr	r3, [r5, #16]
 8016ae0:	2200      	movs	r2, #0
 8016ae2:	3401      	adds	r4, #1
 8016ae4:	519a      	str	r2, [r3, r6]
 8016ae6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8016ae8:	f14a 0a00 	adc.w	sl, sl, #0
 8016aec:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8016aee:	429c      	cmp	r4, r3
 8016af0:	f17a 0100 	sbcs.w	r1, sl, #0
 8016af4:	d3d6      	bcc.n	8016aa4 <rcl_wait+0x9c>
 8016af6:	4659      	mov	r1, fp
 8016af8:	4616      	mov	r6, r2
 8016afa:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8016afe:	4313      	orrs	r3, r2
 8016b00:	f040 80b4 	bne.w	8016c6c <rcl_wait+0x264>
 8016b04:	2300      	movs	r3, #0
 8016b06:	2200      	movs	r2, #0
 8016b08:	460c      	mov	r4, r1
 8016b0a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016b0e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016b12:	ab08      	add	r3, sp, #32
 8016b14:	9302      	str	r3, [sp, #8]
 8016b16:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8016b1a:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8016b1c:	f106 0110 	add.w	r1, r6, #16
 8016b20:	9300      	str	r3, [sp, #0]
 8016b22:	1d30      	adds	r0, r6, #4
 8016b24:	f106 031c 	add.w	r3, r6, #28
 8016b28:	9201      	str	r2, [sp, #4]
 8016b2a:	f106 0228 	add.w	r2, r6, #40	; 0x28
 8016b2e:	f002 fca3 	bl	8019478 <rmw_wait>
 8016b32:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016b34:	4680      	mov	r8, r0
 8016b36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016b38:	b1e2      	cbz	r2, 8016b74 <rcl_wait+0x16c>
 8016b3a:	f04f 0900 	mov.w	r9, #0
 8016b3e:	464f      	mov	r7, r9
 8016b40:	692a      	ldr	r2, [r5, #16]
 8016b42:	f10d 011f 	add.w	r1, sp, #31
 8016b46:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8016b4a:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8016b4e:	b160      	cbz	r0, 8016b6a <rcl_wait+0x162>
 8016b50:	f88d 701f 	strb.w	r7, [sp, #31]
 8016b54:	f7ff fa10 	bl	8015f78 <rcl_timer_is_ready>
 8016b58:	2800      	cmp	r0, #0
 8016b5a:	f47f af72 	bne.w	8016a42 <rcl_wait+0x3a>
 8016b5e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8016b62:	b90b      	cbnz	r3, 8016b68 <rcl_wait+0x160>
 8016b64:	692a      	ldr	r2, [r5, #16]
 8016b66:	5193      	str	r3, [r2, r6]
 8016b68:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016b6a:	f109 0901 	add.w	r9, r9, #1
 8016b6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016b70:	454a      	cmp	r2, r9
 8016b72:	d8e5      	bhi.n	8016b40 <rcl_wait+0x138>
 8016b74:	f038 0002 	bics.w	r0, r8, #2
 8016b78:	d176      	bne.n	8016c68 <rcl_wait+0x260>
 8016b7a:	686f      	ldr	r7, [r5, #4]
 8016b7c:	b17f      	cbz	r7, 8016b9e <rcl_wait+0x196>
 8016b7e:	4602      	mov	r2, r0
 8016b80:	e002      	b.n	8016b88 <rcl_wait+0x180>
 8016b82:	3201      	adds	r2, #1
 8016b84:	42ba      	cmp	r2, r7
 8016b86:	d00a      	beq.n	8016b9e <rcl_wait+0x196>
 8016b88:	6899      	ldr	r1, [r3, #8]
 8016b8a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016b8e:	2900      	cmp	r1, #0
 8016b90:	d1f7      	bne.n	8016b82 <rcl_wait+0x17a>
 8016b92:	682e      	ldr	r6, [r5, #0]
 8016b94:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8016b98:	3201      	adds	r2, #1
 8016b9a:	42ba      	cmp	r2, r7
 8016b9c:	d1f4      	bne.n	8016b88 <rcl_wait+0x180>
 8016b9e:	68ef      	ldr	r7, [r5, #12]
 8016ba0:	b17f      	cbz	r7, 8016bc2 <rcl_wait+0x1ba>
 8016ba2:	2200      	movs	r2, #0
 8016ba4:	e002      	b.n	8016bac <rcl_wait+0x1a4>
 8016ba6:	3201      	adds	r2, #1
 8016ba8:	42ba      	cmp	r2, r7
 8016baa:	d00a      	beq.n	8016bc2 <rcl_wait+0x1ba>
 8016bac:	6959      	ldr	r1, [r3, #20]
 8016bae:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016bb2:	2900      	cmp	r1, #0
 8016bb4:	d1f7      	bne.n	8016ba6 <rcl_wait+0x19e>
 8016bb6:	68ae      	ldr	r6, [r5, #8]
 8016bb8:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8016bbc:	3201      	adds	r2, #1
 8016bbe:	42ba      	cmp	r2, r7
 8016bc0:	d1f4      	bne.n	8016bac <rcl_wait+0x1a4>
 8016bc2:	69ef      	ldr	r7, [r5, #28]
 8016bc4:	b17f      	cbz	r7, 8016be6 <rcl_wait+0x1de>
 8016bc6:	2200      	movs	r2, #0
 8016bc8:	e002      	b.n	8016bd0 <rcl_wait+0x1c8>
 8016bca:	3201      	adds	r2, #1
 8016bcc:	42ba      	cmp	r2, r7
 8016bce:	d00a      	beq.n	8016be6 <rcl_wait+0x1de>
 8016bd0:	6a19      	ldr	r1, [r3, #32]
 8016bd2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016bd6:	2900      	cmp	r1, #0
 8016bd8:	d1f7      	bne.n	8016bca <rcl_wait+0x1c2>
 8016bda:	69ae      	ldr	r6, [r5, #24]
 8016bdc:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8016be0:	3201      	adds	r2, #1
 8016be2:	42ba      	cmp	r2, r7
 8016be4:	d1f4      	bne.n	8016bd0 <rcl_wait+0x1c8>
 8016be6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8016be8:	b17f      	cbz	r7, 8016c0a <rcl_wait+0x202>
 8016bea:	2200      	movs	r2, #0
 8016bec:	e002      	b.n	8016bf4 <rcl_wait+0x1ec>
 8016bee:	3201      	adds	r2, #1
 8016bf0:	42ba      	cmp	r2, r7
 8016bf2:	d00a      	beq.n	8016c0a <rcl_wait+0x202>
 8016bf4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8016bf6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016bfa:	2900      	cmp	r1, #0
 8016bfc:	d1f7      	bne.n	8016bee <rcl_wait+0x1e6>
 8016bfe:	6a2e      	ldr	r6, [r5, #32]
 8016c00:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8016c04:	3201      	adds	r2, #1
 8016c06:	42ba      	cmp	r2, r7
 8016c08:	d1f4      	bne.n	8016bf4 <rcl_wait+0x1ec>
 8016c0a:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 8016c0c:	b17f      	cbz	r7, 8016c2e <rcl_wait+0x226>
 8016c0e:	2200      	movs	r2, #0
 8016c10:	e002      	b.n	8016c18 <rcl_wait+0x210>
 8016c12:	3201      	adds	r2, #1
 8016c14:	42ba      	cmp	r2, r7
 8016c16:	d00a      	beq.n	8016c2e <rcl_wait+0x226>
 8016c18:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8016c1a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8016c1e:	2900      	cmp	r1, #0
 8016c20:	d1f7      	bne.n	8016c12 <rcl_wait+0x20a>
 8016c22:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8016c24:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8016c28:	3201      	adds	r2, #1
 8016c2a:	42ba      	cmp	r2, r7
 8016c2c:	d1f4      	bne.n	8016c18 <rcl_wait+0x210>
 8016c2e:	f1b8 0f02 	cmp.w	r8, #2
 8016c32:	f47f af06 	bne.w	8016a42 <rcl_wait+0x3a>
 8016c36:	f084 0301 	eor.w	r3, r4, #1
 8016c3a:	b2db      	uxtb	r3, r3
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	bf18      	it	ne
 8016c40:	2002      	movne	r0, #2
 8016c42:	b00d      	add	sp, #52	; 0x34
 8016c44:	ecbd 8b02 	vpop	{d8}
 8016c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c4c:	2a00      	cmp	r2, #0
 8016c4e:	d03a      	beq.n	8016cc6 <rcl_wait+0x2be>
 8016c50:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8016c54:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8016c58:	e705      	b.n	8016a66 <rcl_wait+0x5e>
 8016c5a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016c5e:	b00d      	add	sp, #52	; 0x34
 8016c60:	ecbd 8b02 	vpop	{d8}
 8016c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c68:	2001      	movs	r0, #1
 8016c6a:	e6ea      	b.n	8016a42 <rcl_wait+0x3a>
 8016c6c:	9b04      	ldr	r3, [sp, #16]
 8016c6e:	460c      	mov	r4, r1
 8016c70:	2b01      	cmp	r3, #1
 8016c72:	9b05      	ldr	r3, [sp, #20]
 8016c74:	f173 0300 	sbcs.w	r3, r3, #0
 8016c78:	bfa8      	it	ge
 8016c7a:	f044 0401 	orrge.w	r4, r4, #1
 8016c7e:	b914      	cbnz	r4, 8016c86 <rcl_wait+0x27e>
 8016c80:	4623      	mov	r3, r4
 8016c82:	e747      	b.n	8016b14 <rcl_wait+0x10c>
 8016c84:	4611      	mov	r1, r2
 8016c86:	2f00      	cmp	r7, #0
 8016c88:	da02      	bge.n	8016c90 <rcl_wait+0x288>
 8016c8a:	f04f 0800 	mov.w	r8, #0
 8016c8e:	4647      	mov	r7, r8
 8016c90:	460c      	mov	r4, r1
 8016c92:	4640      	mov	r0, r8
 8016c94:	4639      	mov	r1, r7
 8016c96:	a312      	add	r3, pc, #72	; (adr r3, 8016ce0 <rcl_wait+0x2d8>)
 8016c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c9c:	f7e9 fb38 	bl	8000310 <__aeabi_ldivmod>
 8016ca0:	a30f      	add	r3, pc, #60	; (adr r3, 8016ce0 <rcl_wait+0x2d8>)
 8016ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ca6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016caa:	4640      	mov	r0, r8
 8016cac:	4639      	mov	r1, r7
 8016cae:	f7e9 fb2f 	bl	8000310 <__aeabi_ldivmod>
 8016cb2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016cb6:	ab08      	add	r3, sp, #32
 8016cb8:	e72c      	b.n	8016b14 <rcl_wait+0x10c>
 8016cba:	200b      	movs	r0, #11
 8016cbc:	b00d      	add	sp, #52	; 0x34
 8016cbe:	ecbd 8b02 	vpop	{d8}
 8016cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cc6:	4611      	mov	r1, r2
 8016cc8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8016ccc:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8016cd0:	e713      	b.n	8016afa <rcl_wait+0xf2>
 8016cd2:	bf00      	nop
 8016cd4:	f3af 8000 	nop.w
 8016cd8:	ffffffff 	.word	0xffffffff
 8016cdc:	7fffffff 	.word	0x7fffffff
 8016ce0:	3b9aca00 	.word	0x3b9aca00
 8016ce4:	00000000 	.word	0x00000000

08016ce8 <rcl_action_take_goal_response>:
 8016ce8:	2800      	cmp	r0, #0
 8016cea:	d039      	beq.n	8016d60 <rcl_action_take_goal_response+0x78>
 8016cec:	b570      	push	{r4, r5, r6, lr}
 8016cee:	4604      	mov	r4, r0
 8016cf0:	6800      	ldr	r0, [r0, #0]
 8016cf2:	b380      	cbz	r0, 8016d56 <rcl_action_take_goal_response+0x6e>
 8016cf4:	460e      	mov	r6, r1
 8016cf6:	4615      	mov	r5, r2
 8016cf8:	f7fd fc1e 	bl	8014538 <rcl_client_is_valid>
 8016cfc:	b330      	cbz	r0, 8016d4c <rcl_action_take_goal_response+0x64>
 8016cfe:	6820      	ldr	r0, [r4, #0]
 8016d00:	3004      	adds	r0, #4
 8016d02:	f7fd fc19 	bl	8014538 <rcl_client_is_valid>
 8016d06:	b308      	cbz	r0, 8016d4c <rcl_action_take_goal_response+0x64>
 8016d08:	6820      	ldr	r0, [r4, #0]
 8016d0a:	3008      	adds	r0, #8
 8016d0c:	f7fd fc14 	bl	8014538 <rcl_client_is_valid>
 8016d10:	b1e0      	cbz	r0, 8016d4c <rcl_action_take_goal_response+0x64>
 8016d12:	6820      	ldr	r0, [r4, #0]
 8016d14:	300c      	adds	r0, #12
 8016d16:	f7fe fdc1 	bl	801589c <rcl_subscription_is_valid>
 8016d1a:	b1b8      	cbz	r0, 8016d4c <rcl_action_take_goal_response+0x64>
 8016d1c:	6820      	ldr	r0, [r4, #0]
 8016d1e:	3010      	adds	r0, #16
 8016d20:	f7fe fdbc 	bl	801589c <rcl_subscription_is_valid>
 8016d24:	b190      	cbz	r0, 8016d4c <rcl_action_take_goal_response+0x64>
 8016d26:	b1cd      	cbz	r5, 8016d5c <rcl_action_take_goal_response+0x74>
 8016d28:	b1c6      	cbz	r6, 8016d5c <rcl_action_take_goal_response+0x74>
 8016d2a:	462a      	mov	r2, r5
 8016d2c:	4631      	mov	r1, r6
 8016d2e:	6820      	ldr	r0, [r4, #0]
 8016d30:	f7fd fb9a 	bl	8014468 <rcl_take_response>
 8016d34:	b148      	cbz	r0, 8016d4a <rcl_action_take_goal_response+0x62>
 8016d36:	280a      	cmp	r0, #10
 8016d38:	d007      	beq.n	8016d4a <rcl_action_take_goal_response+0x62>
 8016d3a:	f240 12f5 	movw	r2, #501	; 0x1f5
 8016d3e:	f640 0337 	movw	r3, #2103	; 0x837
 8016d42:	4290      	cmp	r0, r2
 8016d44:	bf0c      	ite	eq
 8016d46:	4618      	moveq	r0, r3
 8016d48:	2001      	movne	r0, #1
 8016d4a:	bd70      	pop	{r4, r5, r6, pc}
 8016d4c:	f7f6 ffa0 	bl	800dc90 <rcutils_reset_error>
 8016d50:	f640 0036 	movw	r0, #2102	; 0x836
 8016d54:	bd70      	pop	{r4, r5, r6, pc}
 8016d56:	f640 0036 	movw	r0, #2102	; 0x836
 8016d5a:	bd70      	pop	{r4, r5, r6, pc}
 8016d5c:	200b      	movs	r0, #11
 8016d5e:	bd70      	pop	{r4, r5, r6, pc}
 8016d60:	f640 0036 	movw	r0, #2102	; 0x836
 8016d64:	4770      	bx	lr
 8016d66:	bf00      	nop

08016d68 <rcl_action_send_result_request>:
 8016d68:	b390      	cbz	r0, 8016dd0 <rcl_action_send_result_request+0x68>
 8016d6a:	b570      	push	{r4, r5, r6, lr}
 8016d6c:	4604      	mov	r4, r0
 8016d6e:	6800      	ldr	r0, [r0, #0]
 8016d70:	b348      	cbz	r0, 8016dc6 <rcl_action_send_result_request+0x5e>
 8016d72:	460e      	mov	r6, r1
 8016d74:	4615      	mov	r5, r2
 8016d76:	f7fd fbdf 	bl	8014538 <rcl_client_is_valid>
 8016d7a:	b1f8      	cbz	r0, 8016dbc <rcl_action_send_result_request+0x54>
 8016d7c:	6820      	ldr	r0, [r4, #0]
 8016d7e:	3004      	adds	r0, #4
 8016d80:	f7fd fbda 	bl	8014538 <rcl_client_is_valid>
 8016d84:	b1d0      	cbz	r0, 8016dbc <rcl_action_send_result_request+0x54>
 8016d86:	6820      	ldr	r0, [r4, #0]
 8016d88:	3008      	adds	r0, #8
 8016d8a:	f7fd fbd5 	bl	8014538 <rcl_client_is_valid>
 8016d8e:	b1a8      	cbz	r0, 8016dbc <rcl_action_send_result_request+0x54>
 8016d90:	6820      	ldr	r0, [r4, #0]
 8016d92:	300c      	adds	r0, #12
 8016d94:	f7fe fd82 	bl	801589c <rcl_subscription_is_valid>
 8016d98:	b180      	cbz	r0, 8016dbc <rcl_action_send_result_request+0x54>
 8016d9a:	6820      	ldr	r0, [r4, #0]
 8016d9c:	3010      	adds	r0, #16
 8016d9e:	f7fe fd7d 	bl	801589c <rcl_subscription_is_valid>
 8016da2:	b158      	cbz	r0, 8016dbc <rcl_action_send_result_request+0x54>
 8016da4:	b195      	cbz	r5, 8016dcc <rcl_action_send_result_request+0x64>
 8016da6:	b18e      	cbz	r6, 8016dcc <rcl_action_send_result_request+0x64>
 8016da8:	6820      	ldr	r0, [r4, #0]
 8016daa:	462a      	mov	r2, r5
 8016dac:	4631      	mov	r1, r6
 8016dae:	3008      	adds	r0, #8
 8016db0:	f7fd fb06 	bl	80143c0 <rcl_send_request>
 8016db4:	3800      	subs	r0, #0
 8016db6:	bf18      	it	ne
 8016db8:	2001      	movne	r0, #1
 8016dba:	bd70      	pop	{r4, r5, r6, pc}
 8016dbc:	f7f6 ff68 	bl	800dc90 <rcutils_reset_error>
 8016dc0:	f640 0036 	movw	r0, #2102	; 0x836
 8016dc4:	bd70      	pop	{r4, r5, r6, pc}
 8016dc6:	f640 0036 	movw	r0, #2102	; 0x836
 8016dca:	bd70      	pop	{r4, r5, r6, pc}
 8016dcc:	200b      	movs	r0, #11
 8016dce:	bd70      	pop	{r4, r5, r6, pc}
 8016dd0:	f640 0036 	movw	r0, #2102	; 0x836
 8016dd4:	4770      	bx	lr
 8016dd6:	bf00      	nop

08016dd8 <rcl_action_take_result_response>:
 8016dd8:	2800      	cmp	r0, #0
 8016dda:	d03a      	beq.n	8016e52 <rcl_action_take_result_response+0x7a>
 8016ddc:	b570      	push	{r4, r5, r6, lr}
 8016dde:	4604      	mov	r4, r0
 8016de0:	6800      	ldr	r0, [r0, #0]
 8016de2:	b388      	cbz	r0, 8016e48 <rcl_action_take_result_response+0x70>
 8016de4:	460e      	mov	r6, r1
 8016de6:	4615      	mov	r5, r2
 8016de8:	f7fd fba6 	bl	8014538 <rcl_client_is_valid>
 8016dec:	b338      	cbz	r0, 8016e3e <rcl_action_take_result_response+0x66>
 8016dee:	6820      	ldr	r0, [r4, #0]
 8016df0:	3004      	adds	r0, #4
 8016df2:	f7fd fba1 	bl	8014538 <rcl_client_is_valid>
 8016df6:	b310      	cbz	r0, 8016e3e <rcl_action_take_result_response+0x66>
 8016df8:	6820      	ldr	r0, [r4, #0]
 8016dfa:	3008      	adds	r0, #8
 8016dfc:	f7fd fb9c 	bl	8014538 <rcl_client_is_valid>
 8016e00:	b1e8      	cbz	r0, 8016e3e <rcl_action_take_result_response+0x66>
 8016e02:	6820      	ldr	r0, [r4, #0]
 8016e04:	300c      	adds	r0, #12
 8016e06:	f7fe fd49 	bl	801589c <rcl_subscription_is_valid>
 8016e0a:	b1c0      	cbz	r0, 8016e3e <rcl_action_take_result_response+0x66>
 8016e0c:	6820      	ldr	r0, [r4, #0]
 8016e0e:	3010      	adds	r0, #16
 8016e10:	f7fe fd44 	bl	801589c <rcl_subscription_is_valid>
 8016e14:	b198      	cbz	r0, 8016e3e <rcl_action_take_result_response+0x66>
 8016e16:	b1d5      	cbz	r5, 8016e4e <rcl_action_take_result_response+0x76>
 8016e18:	b1ce      	cbz	r6, 8016e4e <rcl_action_take_result_response+0x76>
 8016e1a:	6820      	ldr	r0, [r4, #0]
 8016e1c:	462a      	mov	r2, r5
 8016e1e:	4631      	mov	r1, r6
 8016e20:	3008      	adds	r0, #8
 8016e22:	f7fd fb21 	bl	8014468 <rcl_take_response>
 8016e26:	b148      	cbz	r0, 8016e3c <rcl_action_take_result_response+0x64>
 8016e28:	280a      	cmp	r0, #10
 8016e2a:	d007      	beq.n	8016e3c <rcl_action_take_result_response+0x64>
 8016e2c:	f240 12f5 	movw	r2, #501	; 0x1f5
 8016e30:	f640 0337 	movw	r3, #2103	; 0x837
 8016e34:	4290      	cmp	r0, r2
 8016e36:	bf0c      	ite	eq
 8016e38:	4618      	moveq	r0, r3
 8016e3a:	2001      	movne	r0, #1
 8016e3c:	bd70      	pop	{r4, r5, r6, pc}
 8016e3e:	f7f6 ff27 	bl	800dc90 <rcutils_reset_error>
 8016e42:	f640 0036 	movw	r0, #2102	; 0x836
 8016e46:	bd70      	pop	{r4, r5, r6, pc}
 8016e48:	f640 0036 	movw	r0, #2102	; 0x836
 8016e4c:	bd70      	pop	{r4, r5, r6, pc}
 8016e4e:	200b      	movs	r0, #11
 8016e50:	bd70      	pop	{r4, r5, r6, pc}
 8016e52:	f640 0036 	movw	r0, #2102	; 0x836
 8016e56:	4770      	bx	lr

08016e58 <rcl_action_take_cancel_response>:
 8016e58:	2800      	cmp	r0, #0
 8016e5a:	d03a      	beq.n	8016ed2 <rcl_action_take_cancel_response+0x7a>
 8016e5c:	b570      	push	{r4, r5, r6, lr}
 8016e5e:	4604      	mov	r4, r0
 8016e60:	6800      	ldr	r0, [r0, #0]
 8016e62:	b388      	cbz	r0, 8016ec8 <rcl_action_take_cancel_response+0x70>
 8016e64:	460e      	mov	r6, r1
 8016e66:	4615      	mov	r5, r2
 8016e68:	f7fd fb66 	bl	8014538 <rcl_client_is_valid>
 8016e6c:	b338      	cbz	r0, 8016ebe <rcl_action_take_cancel_response+0x66>
 8016e6e:	6820      	ldr	r0, [r4, #0]
 8016e70:	3004      	adds	r0, #4
 8016e72:	f7fd fb61 	bl	8014538 <rcl_client_is_valid>
 8016e76:	b310      	cbz	r0, 8016ebe <rcl_action_take_cancel_response+0x66>
 8016e78:	6820      	ldr	r0, [r4, #0]
 8016e7a:	3008      	adds	r0, #8
 8016e7c:	f7fd fb5c 	bl	8014538 <rcl_client_is_valid>
 8016e80:	b1e8      	cbz	r0, 8016ebe <rcl_action_take_cancel_response+0x66>
 8016e82:	6820      	ldr	r0, [r4, #0]
 8016e84:	300c      	adds	r0, #12
 8016e86:	f7fe fd09 	bl	801589c <rcl_subscription_is_valid>
 8016e8a:	b1c0      	cbz	r0, 8016ebe <rcl_action_take_cancel_response+0x66>
 8016e8c:	6820      	ldr	r0, [r4, #0]
 8016e8e:	3010      	adds	r0, #16
 8016e90:	f7fe fd04 	bl	801589c <rcl_subscription_is_valid>
 8016e94:	b198      	cbz	r0, 8016ebe <rcl_action_take_cancel_response+0x66>
 8016e96:	b1d5      	cbz	r5, 8016ece <rcl_action_take_cancel_response+0x76>
 8016e98:	b1ce      	cbz	r6, 8016ece <rcl_action_take_cancel_response+0x76>
 8016e9a:	6820      	ldr	r0, [r4, #0]
 8016e9c:	462a      	mov	r2, r5
 8016e9e:	4631      	mov	r1, r6
 8016ea0:	3004      	adds	r0, #4
 8016ea2:	f7fd fae1 	bl	8014468 <rcl_take_response>
 8016ea6:	b148      	cbz	r0, 8016ebc <rcl_action_take_cancel_response+0x64>
 8016ea8:	280a      	cmp	r0, #10
 8016eaa:	d007      	beq.n	8016ebc <rcl_action_take_cancel_response+0x64>
 8016eac:	f240 12f5 	movw	r2, #501	; 0x1f5
 8016eb0:	f640 0337 	movw	r3, #2103	; 0x837
 8016eb4:	4290      	cmp	r0, r2
 8016eb6:	bf0c      	ite	eq
 8016eb8:	4618      	moveq	r0, r3
 8016eba:	2001      	movne	r0, #1
 8016ebc:	bd70      	pop	{r4, r5, r6, pc}
 8016ebe:	f7f6 fee7 	bl	800dc90 <rcutils_reset_error>
 8016ec2:	f640 0036 	movw	r0, #2102	; 0x836
 8016ec6:	bd70      	pop	{r4, r5, r6, pc}
 8016ec8:	f640 0036 	movw	r0, #2102	; 0x836
 8016ecc:	bd70      	pop	{r4, r5, r6, pc}
 8016ece:	200b      	movs	r0, #11
 8016ed0:	bd70      	pop	{r4, r5, r6, pc}
 8016ed2:	f640 0036 	movw	r0, #2102	; 0x836
 8016ed6:	4770      	bx	lr

08016ed8 <rcl_action_take_feedback>:
 8016ed8:	2800      	cmp	r0, #0
 8016eda:	d038      	beq.n	8016f4e <rcl_action_take_feedback+0x76>
 8016edc:	b530      	push	{r4, r5, lr}
 8016ede:	4604      	mov	r4, r0
 8016ee0:	6800      	ldr	r0, [r0, #0]
 8016ee2:	b08f      	sub	sp, #60	; 0x3c
 8016ee4:	b378      	cbz	r0, 8016f46 <rcl_action_take_feedback+0x6e>
 8016ee6:	460d      	mov	r5, r1
 8016ee8:	f7fd fb26 	bl	8014538 <rcl_client_is_valid>
 8016eec:	b328      	cbz	r0, 8016f3a <rcl_action_take_feedback+0x62>
 8016eee:	6820      	ldr	r0, [r4, #0]
 8016ef0:	3004      	adds	r0, #4
 8016ef2:	f7fd fb21 	bl	8014538 <rcl_client_is_valid>
 8016ef6:	b300      	cbz	r0, 8016f3a <rcl_action_take_feedback+0x62>
 8016ef8:	6820      	ldr	r0, [r4, #0]
 8016efa:	3008      	adds	r0, #8
 8016efc:	f7fd fb1c 	bl	8014538 <rcl_client_is_valid>
 8016f00:	b1d8      	cbz	r0, 8016f3a <rcl_action_take_feedback+0x62>
 8016f02:	6820      	ldr	r0, [r4, #0]
 8016f04:	300c      	adds	r0, #12
 8016f06:	f7fe fcc9 	bl	801589c <rcl_subscription_is_valid>
 8016f0a:	b1b0      	cbz	r0, 8016f3a <rcl_action_take_feedback+0x62>
 8016f0c:	6820      	ldr	r0, [r4, #0]
 8016f0e:	3010      	adds	r0, #16
 8016f10:	f7fe fcc4 	bl	801589c <rcl_subscription_is_valid>
 8016f14:	b188      	cbz	r0, 8016f3a <rcl_action_take_feedback+0x62>
 8016f16:	b1ed      	cbz	r5, 8016f54 <rcl_action_take_feedback+0x7c>
 8016f18:	6820      	ldr	r0, [r4, #0]
 8016f1a:	2300      	movs	r3, #0
 8016f1c:	466a      	mov	r2, sp
 8016f1e:	4629      	mov	r1, r5
 8016f20:	300c      	adds	r0, #12
 8016f22:	f7fe fc5f 	bl	80157e4 <rcl_take>
 8016f26:	b160      	cbz	r0, 8016f42 <rcl_action_take_feedback+0x6a>
 8016f28:	f240 1391 	movw	r3, #401	; 0x191
 8016f2c:	4298      	cmp	r0, r3
 8016f2e:	d014      	beq.n	8016f5a <rcl_action_take_feedback+0x82>
 8016f30:	280a      	cmp	r0, #10
 8016f32:	bf18      	it	ne
 8016f34:	2001      	movne	r0, #1
 8016f36:	b00f      	add	sp, #60	; 0x3c
 8016f38:	bd30      	pop	{r4, r5, pc}
 8016f3a:	f7f6 fea9 	bl	800dc90 <rcutils_reset_error>
 8016f3e:	f640 0036 	movw	r0, #2102	; 0x836
 8016f42:	b00f      	add	sp, #60	; 0x3c
 8016f44:	bd30      	pop	{r4, r5, pc}
 8016f46:	f640 0036 	movw	r0, #2102	; 0x836
 8016f4a:	b00f      	add	sp, #60	; 0x3c
 8016f4c:	bd30      	pop	{r4, r5, pc}
 8016f4e:	f640 0036 	movw	r0, #2102	; 0x836
 8016f52:	4770      	bx	lr
 8016f54:	200b      	movs	r0, #11
 8016f56:	b00f      	add	sp, #60	; 0x3c
 8016f58:	bd30      	pop	{r4, r5, pc}
 8016f5a:	f640 0037 	movw	r0, #2103	; 0x837
 8016f5e:	e7f0      	b.n	8016f42 <rcl_action_take_feedback+0x6a>

08016f60 <rcl_action_wait_set_add_action_client>:
 8016f60:	2800      	cmp	r0, #0
 8016f62:	d048      	beq.n	8016ff6 <rcl_action_wait_set_add_action_client+0x96>
 8016f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f66:	460c      	mov	r4, r1
 8016f68:	2900      	cmp	r1, #0
 8016f6a:	d03c      	beq.n	8016fe6 <rcl_action_wait_set_add_action_client+0x86>
 8016f6c:	4605      	mov	r5, r0
 8016f6e:	6808      	ldr	r0, [r1, #0]
 8016f70:	2800      	cmp	r0, #0
 8016f72:	d038      	beq.n	8016fe6 <rcl_action_wait_set_add_action_client+0x86>
 8016f74:	4617      	mov	r7, r2
 8016f76:	461e      	mov	r6, r3
 8016f78:	f7fd fade 	bl	8014538 <rcl_client_is_valid>
 8016f7c:	b3b0      	cbz	r0, 8016fec <rcl_action_wait_set_add_action_client+0x8c>
 8016f7e:	6820      	ldr	r0, [r4, #0]
 8016f80:	3004      	adds	r0, #4
 8016f82:	f7fd fad9 	bl	8014538 <rcl_client_is_valid>
 8016f86:	b388      	cbz	r0, 8016fec <rcl_action_wait_set_add_action_client+0x8c>
 8016f88:	6820      	ldr	r0, [r4, #0]
 8016f8a:	3008      	adds	r0, #8
 8016f8c:	f7fd fad4 	bl	8014538 <rcl_client_is_valid>
 8016f90:	b360      	cbz	r0, 8016fec <rcl_action_wait_set_add_action_client+0x8c>
 8016f92:	6820      	ldr	r0, [r4, #0]
 8016f94:	300c      	adds	r0, #12
 8016f96:	f7fe fc81 	bl	801589c <rcl_subscription_is_valid>
 8016f9a:	b338      	cbz	r0, 8016fec <rcl_action_wait_set_add_action_client+0x8c>
 8016f9c:	6820      	ldr	r0, [r4, #0]
 8016f9e:	3010      	adds	r0, #16
 8016fa0:	f7fe fc7c 	bl	801589c <rcl_subscription_is_valid>
 8016fa4:	b310      	cbz	r0, 8016fec <rcl_action_wait_set_add_action_client+0x8c>
 8016fa6:	6821      	ldr	r1, [r4, #0]
 8016fa8:	4628      	mov	r0, r5
 8016faa:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 8016fae:	f7ff fcd3 	bl	8016958 <rcl_wait_set_add_client>
 8016fb2:	b9b8      	cbnz	r0, 8016fe4 <rcl_action_wait_set_add_action_client+0x84>
 8016fb4:	6821      	ldr	r1, [r4, #0]
 8016fb6:	4628      	mov	r0, r5
 8016fb8:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 8016fbc:	3104      	adds	r1, #4
 8016fbe:	f7ff fccb 	bl	8016958 <rcl_wait_set_add_client>
 8016fc2:	b978      	cbnz	r0, 8016fe4 <rcl_action_wait_set_add_action_client+0x84>
 8016fc4:	6821      	ldr	r1, [r4, #0]
 8016fc6:	4628      	mov	r0, r5
 8016fc8:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 8016fcc:	3108      	adds	r1, #8
 8016fce:	f7ff fcc3 	bl	8016958 <rcl_wait_set_add_client>
 8016fd2:	b938      	cbnz	r0, 8016fe4 <rcl_action_wait_set_add_action_client+0x84>
 8016fd4:	6821      	ldr	r1, [r4, #0]
 8016fd6:	4628      	mov	r0, r5
 8016fd8:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 8016fdc:	310c      	adds	r1, #12
 8016fde:	f7ff f96b 	bl	80162b8 <rcl_wait_set_add_subscription>
 8016fe2:	b158      	cbz	r0, 8016ffc <rcl_action_wait_set_add_action_client+0x9c>
 8016fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fe6:	f640 0036 	movw	r0, #2102	; 0x836
 8016fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fec:	f7f6 fe50 	bl	800dc90 <rcutils_reset_error>
 8016ff0:	f640 0036 	movw	r0, #2102	; 0x836
 8016ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016ff6:	f44f 7061 	mov.w	r0, #900	; 0x384
 8016ffa:	4770      	bx	lr
 8016ffc:	6821      	ldr	r1, [r4, #0]
 8016ffe:	4628      	mov	r0, r5
 8017000:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 8017004:	3110      	adds	r1, #16
 8017006:	f7ff f957 	bl	80162b8 <rcl_wait_set_add_subscription>
 801700a:	2800      	cmp	r0, #0
 801700c:	d1ea      	bne.n	8016fe4 <rcl_action_wait_set_add_action_client+0x84>
 801700e:	b11f      	cbz	r7, 8017018 <rcl_action_wait_set_add_action_client+0xb8>
 8017010:	6823      	ldr	r3, [r4, #0]
 8017012:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8017016:	603b      	str	r3, [r7, #0]
 8017018:	2e00      	cmp	r6, #0
 801701a:	d0e3      	beq.n	8016fe4 <rcl_action_wait_set_add_action_client+0x84>
 801701c:	6823      	ldr	r3, [r4, #0]
 801701e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8017022:	6033      	str	r3, [r6, #0]
 8017024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017026:	bf00      	nop

08017028 <rcl_action_client_wait_set_get_entities_ready>:
 8017028:	2800      	cmp	r0, #0
 801702a:	d050      	beq.n	80170ce <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801702c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017030:	460c      	mov	r4, r1
 8017032:	2900      	cmp	r1, #0
 8017034:	d03e      	beq.n	80170b4 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8017036:	4605      	mov	r5, r0
 8017038:	6808      	ldr	r0, [r1, #0]
 801703a:	2800      	cmp	r0, #0
 801703c:	d03a      	beq.n	80170b4 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 801703e:	4616      	mov	r6, r2
 8017040:	461f      	mov	r7, r3
 8017042:	f7fd fa79 	bl	8014538 <rcl_client_is_valid>
 8017046:	2800      	cmp	r0, #0
 8017048:	d038      	beq.n	80170bc <rcl_action_client_wait_set_get_entities_ready+0x94>
 801704a:	6820      	ldr	r0, [r4, #0]
 801704c:	3004      	adds	r0, #4
 801704e:	f7fd fa73 	bl	8014538 <rcl_client_is_valid>
 8017052:	2800      	cmp	r0, #0
 8017054:	d032      	beq.n	80170bc <rcl_action_client_wait_set_get_entities_ready+0x94>
 8017056:	6820      	ldr	r0, [r4, #0]
 8017058:	3008      	adds	r0, #8
 801705a:	f7fd fa6d 	bl	8014538 <rcl_client_is_valid>
 801705e:	b368      	cbz	r0, 80170bc <rcl_action_client_wait_set_get_entities_ready+0x94>
 8017060:	6820      	ldr	r0, [r4, #0]
 8017062:	300c      	adds	r0, #12
 8017064:	f7fe fc1a 	bl	801589c <rcl_subscription_is_valid>
 8017068:	b340      	cbz	r0, 80170bc <rcl_action_client_wait_set_get_entities_ready+0x94>
 801706a:	6820      	ldr	r0, [r4, #0]
 801706c:	3010      	adds	r0, #16
 801706e:	f7fe fc15 	bl	801589c <rcl_subscription_is_valid>
 8017072:	b318      	cbz	r0, 80170bc <rcl_action_client_wait_set_get_entities_ready+0x94>
 8017074:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8017078:	2a00      	cmp	r2, #0
 801707a:	bf18      	it	ne
 801707c:	2b00      	cmpne	r3, #0
 801707e:	9b08      	ldr	r3, [sp, #32]
 8017080:	bf0c      	ite	eq
 8017082:	2101      	moveq	r1, #1
 8017084:	2100      	movne	r1, #0
 8017086:	2b00      	cmp	r3, #0
 8017088:	bf08      	it	eq
 801708a:	f041 0101 	orreq.w	r1, r1, #1
 801708e:	2f00      	cmp	r7, #0
 8017090:	bf08      	it	eq
 8017092:	f041 0101 	orreq.w	r1, r1, #1
 8017096:	b9b9      	cbnz	r1, 80170c8 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8017098:	b1b6      	cbz	r6, 80170c8 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801709a:	6823      	ldr	r3, [r4, #0]
 801709c:	686c      	ldr	r4, [r5, #4]
 801709e:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 80170a2:	428a      	cmp	r2, r1
 80170a4:	4610      	mov	r0, r2
 80170a6:	bf38      	it	cc
 80170a8:	4608      	movcc	r0, r1
 80170aa:	4284      	cmp	r4, r0
 80170ac:	d812      	bhi.n	80170d4 <rcl_action_client_wait_set_get_entities_ready+0xac>
 80170ae:	2001      	movs	r0, #1
 80170b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80170b4:	f640 0036 	movw	r0, #2102	; 0x836
 80170b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80170bc:	f7f6 fde8 	bl	800dc90 <rcutils_reset_error>
 80170c0:	f640 0036 	movw	r0, #2102	; 0x836
 80170c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80170c8:	200b      	movs	r0, #11
 80170ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80170ce:	f44f 7061 	mov.w	r0, #900	; 0x384
 80170d2:	4770      	bx	lr
 80170d4:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 80170d8:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 80170dc:	45f0      	cmp	r8, lr
 80170de:	4640      	mov	r0, r8
 80170e0:	69ec      	ldr	r4, [r5, #28]
 80170e2:	bf38      	it	cc
 80170e4:	4670      	movcc	r0, lr
 80170e6:	4560      	cmp	r0, ip
 80170e8:	bf38      	it	cc
 80170ea:	4660      	movcc	r0, ip
 80170ec:	4284      	cmp	r4, r0
 80170ee:	d9de      	bls.n	80170ae <rcl_action_client_wait_set_get_entities_ready+0x86>
 80170f0:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80170f4:	682d      	ldr	r5, [r5, #0]
 80170f6:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 80170fa:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 80170fe:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8017102:	1a18      	subs	r0, r3, r0
 8017104:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8017108:	f103 0c0c 	add.w	ip, r3, #12
 801710c:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 8017110:	fab0 f080 	clz	r0, r0
 8017114:	eba5 050c 	sub.w	r5, r5, ip
 8017118:	0940      	lsrs	r0, r0, #5
 801711a:	fab5 f585 	clz	r5, r5
 801711e:	096d      	lsrs	r5, r5, #5
 8017120:	7035      	strb	r5, [r6, #0]
 8017122:	f103 0510 	add.w	r5, r3, #16
 8017126:	1b64      	subs	r4, r4, r5
 8017128:	9d08      	ldr	r5, [sp, #32]
 801712a:	fab4 f484 	clz	r4, r4
 801712e:	0964      	lsrs	r4, r4, #5
 8017130:	703c      	strb	r4, [r7, #0]
 8017132:	1d1c      	adds	r4, r3, #4
 8017134:	3308      	adds	r3, #8
 8017136:	7028      	strb	r0, [r5, #0]
 8017138:	1b09      	subs	r1, r1, r4
 801713a:	2000      	movs	r0, #0
 801713c:	1ad3      	subs	r3, r2, r3
 801713e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017140:	fab1 f181 	clz	r1, r1
 8017144:	fab3 f383 	clz	r3, r3
 8017148:	0949      	lsrs	r1, r1, #5
 801714a:	095b      	lsrs	r3, r3, #5
 801714c:	7011      	strb	r1, [r2, #0]
 801714e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017150:	7013      	strb	r3, [r2, #0]
 8017152:	e7b1      	b.n	80170b8 <rcl_action_client_wait_set_get_entities_ready+0x90>

08017154 <rcl_action_take_goal_request>:
 8017154:	2800      	cmp	r0, #0
 8017156:	d039      	beq.n	80171cc <rcl_action_take_goal_request+0x78>
 8017158:	b570      	push	{r4, r5, r6, lr}
 801715a:	4604      	mov	r4, r0
 801715c:	6800      	ldr	r0, [r0, #0]
 801715e:	b380      	cbz	r0, 80171c2 <rcl_action_take_goal_request+0x6e>
 8017160:	460e      	mov	r6, r1
 8017162:	4615      	mov	r5, r2
 8017164:	f7fe f9b0 	bl	80154c8 <rcl_service_is_valid>
 8017168:	b330      	cbz	r0, 80171b8 <rcl_action_take_goal_request+0x64>
 801716a:	6820      	ldr	r0, [r4, #0]
 801716c:	3004      	adds	r0, #4
 801716e:	f7fe f9ab 	bl	80154c8 <rcl_service_is_valid>
 8017172:	b308      	cbz	r0, 80171b8 <rcl_action_take_goal_request+0x64>
 8017174:	6820      	ldr	r0, [r4, #0]
 8017176:	3008      	adds	r0, #8
 8017178:	f7fe f9a6 	bl	80154c8 <rcl_service_is_valid>
 801717c:	b1e0      	cbz	r0, 80171b8 <rcl_action_take_goal_request+0x64>
 801717e:	6820      	ldr	r0, [r4, #0]
 8017180:	300c      	adds	r0, #12
 8017182:	f7f5 fce9 	bl	800cb58 <rcl_publisher_is_valid>
 8017186:	b1b8      	cbz	r0, 80171b8 <rcl_action_take_goal_request+0x64>
 8017188:	6820      	ldr	r0, [r4, #0]
 801718a:	3010      	adds	r0, #16
 801718c:	f7f5 fce4 	bl	800cb58 <rcl_publisher_is_valid>
 8017190:	b190      	cbz	r0, 80171b8 <rcl_action_take_goal_request+0x64>
 8017192:	b1cd      	cbz	r5, 80171c8 <rcl_action_take_goal_request+0x74>
 8017194:	b1c6      	cbz	r6, 80171c8 <rcl_action_take_goal_request+0x74>
 8017196:	462a      	mov	r2, r5
 8017198:	4631      	mov	r1, r6
 801719a:	6820      	ldr	r0, [r4, #0]
 801719c:	f7fe f914 	bl	80153c8 <rcl_take_request>
 80171a0:	b148      	cbz	r0, 80171b6 <rcl_action_take_goal_request+0x62>
 80171a2:	280a      	cmp	r0, #10
 80171a4:	d007      	beq.n	80171b6 <rcl_action_take_goal_request+0x62>
 80171a6:	f240 2259 	movw	r2, #601	; 0x259
 80171aa:	f640 0399 	movw	r3, #2201	; 0x899
 80171ae:	4290      	cmp	r0, r2
 80171b0:	bf0c      	ite	eq
 80171b2:	4618      	moveq	r0, r3
 80171b4:	2001      	movne	r0, #1
 80171b6:	bd70      	pop	{r4, r5, r6, pc}
 80171b8:	f7f6 fd6a 	bl	800dc90 <rcutils_reset_error>
 80171bc:	f640 0098 	movw	r0, #2200	; 0x898
 80171c0:	bd70      	pop	{r4, r5, r6, pc}
 80171c2:	f640 0098 	movw	r0, #2200	; 0x898
 80171c6:	bd70      	pop	{r4, r5, r6, pc}
 80171c8:	200b      	movs	r0, #11
 80171ca:	bd70      	pop	{r4, r5, r6, pc}
 80171cc:	f640 0098 	movw	r0, #2200	; 0x898
 80171d0:	4770      	bx	lr
 80171d2:	bf00      	nop

080171d4 <rcl_action_send_goal_response>:
 80171d4:	b388      	cbz	r0, 801723a <rcl_action_send_goal_response+0x66>
 80171d6:	b570      	push	{r4, r5, r6, lr}
 80171d8:	4604      	mov	r4, r0
 80171da:	6800      	ldr	r0, [r0, #0]
 80171dc:	b340      	cbz	r0, 8017230 <rcl_action_send_goal_response+0x5c>
 80171de:	460e      	mov	r6, r1
 80171e0:	4615      	mov	r5, r2
 80171e2:	f7fe f971 	bl	80154c8 <rcl_service_is_valid>
 80171e6:	b1f0      	cbz	r0, 8017226 <rcl_action_send_goal_response+0x52>
 80171e8:	6820      	ldr	r0, [r4, #0]
 80171ea:	3004      	adds	r0, #4
 80171ec:	f7fe f96c 	bl	80154c8 <rcl_service_is_valid>
 80171f0:	b1c8      	cbz	r0, 8017226 <rcl_action_send_goal_response+0x52>
 80171f2:	6820      	ldr	r0, [r4, #0]
 80171f4:	3008      	adds	r0, #8
 80171f6:	f7fe f967 	bl	80154c8 <rcl_service_is_valid>
 80171fa:	b1a0      	cbz	r0, 8017226 <rcl_action_send_goal_response+0x52>
 80171fc:	6820      	ldr	r0, [r4, #0]
 80171fe:	300c      	adds	r0, #12
 8017200:	f7f5 fcaa 	bl	800cb58 <rcl_publisher_is_valid>
 8017204:	b178      	cbz	r0, 8017226 <rcl_action_send_goal_response+0x52>
 8017206:	6820      	ldr	r0, [r4, #0]
 8017208:	3010      	adds	r0, #16
 801720a:	f7f5 fca5 	bl	800cb58 <rcl_publisher_is_valid>
 801720e:	b150      	cbz	r0, 8017226 <rcl_action_send_goal_response+0x52>
 8017210:	b18d      	cbz	r5, 8017236 <rcl_action_send_goal_response+0x62>
 8017212:	b186      	cbz	r6, 8017236 <rcl_action_send_goal_response+0x62>
 8017214:	462a      	mov	r2, r5
 8017216:	4631      	mov	r1, r6
 8017218:	6820      	ldr	r0, [r4, #0]
 801721a:	f7fe f925 	bl	8015468 <rcl_send_response>
 801721e:	3800      	subs	r0, #0
 8017220:	bf18      	it	ne
 8017222:	2001      	movne	r0, #1
 8017224:	bd70      	pop	{r4, r5, r6, pc}
 8017226:	f7f6 fd33 	bl	800dc90 <rcutils_reset_error>
 801722a:	f640 0098 	movw	r0, #2200	; 0x898
 801722e:	bd70      	pop	{r4, r5, r6, pc}
 8017230:	f640 0098 	movw	r0, #2200	; 0x898
 8017234:	bd70      	pop	{r4, r5, r6, pc}
 8017236:	200b      	movs	r0, #11
 8017238:	bd70      	pop	{r4, r5, r6, pc}
 801723a:	f640 0098 	movw	r0, #2200	; 0x898
 801723e:	4770      	bx	lr

08017240 <rcl_action_take_result_request>:
 8017240:	2800      	cmp	r0, #0
 8017242:	d03a      	beq.n	80172ba <rcl_action_take_result_request+0x7a>
 8017244:	b570      	push	{r4, r5, r6, lr}
 8017246:	4604      	mov	r4, r0
 8017248:	6800      	ldr	r0, [r0, #0]
 801724a:	b388      	cbz	r0, 80172b0 <rcl_action_take_result_request+0x70>
 801724c:	460e      	mov	r6, r1
 801724e:	4615      	mov	r5, r2
 8017250:	f7fe f93a 	bl	80154c8 <rcl_service_is_valid>
 8017254:	b338      	cbz	r0, 80172a6 <rcl_action_take_result_request+0x66>
 8017256:	6820      	ldr	r0, [r4, #0]
 8017258:	3004      	adds	r0, #4
 801725a:	f7fe f935 	bl	80154c8 <rcl_service_is_valid>
 801725e:	b310      	cbz	r0, 80172a6 <rcl_action_take_result_request+0x66>
 8017260:	6820      	ldr	r0, [r4, #0]
 8017262:	3008      	adds	r0, #8
 8017264:	f7fe f930 	bl	80154c8 <rcl_service_is_valid>
 8017268:	b1e8      	cbz	r0, 80172a6 <rcl_action_take_result_request+0x66>
 801726a:	6820      	ldr	r0, [r4, #0]
 801726c:	300c      	adds	r0, #12
 801726e:	f7f5 fc73 	bl	800cb58 <rcl_publisher_is_valid>
 8017272:	b1c0      	cbz	r0, 80172a6 <rcl_action_take_result_request+0x66>
 8017274:	6820      	ldr	r0, [r4, #0]
 8017276:	3010      	adds	r0, #16
 8017278:	f7f5 fc6e 	bl	800cb58 <rcl_publisher_is_valid>
 801727c:	b198      	cbz	r0, 80172a6 <rcl_action_take_result_request+0x66>
 801727e:	b1d5      	cbz	r5, 80172b6 <rcl_action_take_result_request+0x76>
 8017280:	b1ce      	cbz	r6, 80172b6 <rcl_action_take_result_request+0x76>
 8017282:	6820      	ldr	r0, [r4, #0]
 8017284:	462a      	mov	r2, r5
 8017286:	4631      	mov	r1, r6
 8017288:	3008      	adds	r0, #8
 801728a:	f7fe f89d 	bl	80153c8 <rcl_take_request>
 801728e:	b148      	cbz	r0, 80172a4 <rcl_action_take_result_request+0x64>
 8017290:	280a      	cmp	r0, #10
 8017292:	d007      	beq.n	80172a4 <rcl_action_take_result_request+0x64>
 8017294:	f240 2259 	movw	r2, #601	; 0x259
 8017298:	f640 0399 	movw	r3, #2201	; 0x899
 801729c:	4290      	cmp	r0, r2
 801729e:	bf0c      	ite	eq
 80172a0:	4618      	moveq	r0, r3
 80172a2:	2001      	movne	r0, #1
 80172a4:	bd70      	pop	{r4, r5, r6, pc}
 80172a6:	f7f6 fcf3 	bl	800dc90 <rcutils_reset_error>
 80172aa:	f640 0098 	movw	r0, #2200	; 0x898
 80172ae:	bd70      	pop	{r4, r5, r6, pc}
 80172b0:	f640 0098 	movw	r0, #2200	; 0x898
 80172b4:	bd70      	pop	{r4, r5, r6, pc}
 80172b6:	200b      	movs	r0, #11
 80172b8:	bd70      	pop	{r4, r5, r6, pc}
 80172ba:	f640 0098 	movw	r0, #2200	; 0x898
 80172be:	4770      	bx	lr

080172c0 <rcl_action_take_cancel_request>:
 80172c0:	2800      	cmp	r0, #0
 80172c2:	d03a      	beq.n	801733a <rcl_action_take_cancel_request+0x7a>
 80172c4:	b570      	push	{r4, r5, r6, lr}
 80172c6:	4604      	mov	r4, r0
 80172c8:	6800      	ldr	r0, [r0, #0]
 80172ca:	b388      	cbz	r0, 8017330 <rcl_action_take_cancel_request+0x70>
 80172cc:	460e      	mov	r6, r1
 80172ce:	4615      	mov	r5, r2
 80172d0:	f7fe f8fa 	bl	80154c8 <rcl_service_is_valid>
 80172d4:	b338      	cbz	r0, 8017326 <rcl_action_take_cancel_request+0x66>
 80172d6:	6820      	ldr	r0, [r4, #0]
 80172d8:	3004      	adds	r0, #4
 80172da:	f7fe f8f5 	bl	80154c8 <rcl_service_is_valid>
 80172de:	b310      	cbz	r0, 8017326 <rcl_action_take_cancel_request+0x66>
 80172e0:	6820      	ldr	r0, [r4, #0]
 80172e2:	3008      	adds	r0, #8
 80172e4:	f7fe f8f0 	bl	80154c8 <rcl_service_is_valid>
 80172e8:	b1e8      	cbz	r0, 8017326 <rcl_action_take_cancel_request+0x66>
 80172ea:	6820      	ldr	r0, [r4, #0]
 80172ec:	300c      	adds	r0, #12
 80172ee:	f7f5 fc33 	bl	800cb58 <rcl_publisher_is_valid>
 80172f2:	b1c0      	cbz	r0, 8017326 <rcl_action_take_cancel_request+0x66>
 80172f4:	6820      	ldr	r0, [r4, #0]
 80172f6:	3010      	adds	r0, #16
 80172f8:	f7f5 fc2e 	bl	800cb58 <rcl_publisher_is_valid>
 80172fc:	b198      	cbz	r0, 8017326 <rcl_action_take_cancel_request+0x66>
 80172fe:	b1d5      	cbz	r5, 8017336 <rcl_action_take_cancel_request+0x76>
 8017300:	b1ce      	cbz	r6, 8017336 <rcl_action_take_cancel_request+0x76>
 8017302:	6820      	ldr	r0, [r4, #0]
 8017304:	462a      	mov	r2, r5
 8017306:	4631      	mov	r1, r6
 8017308:	3004      	adds	r0, #4
 801730a:	f7fe f85d 	bl	80153c8 <rcl_take_request>
 801730e:	b148      	cbz	r0, 8017324 <rcl_action_take_cancel_request+0x64>
 8017310:	280a      	cmp	r0, #10
 8017312:	d007      	beq.n	8017324 <rcl_action_take_cancel_request+0x64>
 8017314:	f240 2259 	movw	r2, #601	; 0x259
 8017318:	f640 0399 	movw	r3, #2201	; 0x899
 801731c:	4290      	cmp	r0, r2
 801731e:	bf0c      	ite	eq
 8017320:	4618      	moveq	r0, r3
 8017322:	2001      	movne	r0, #1
 8017324:	bd70      	pop	{r4, r5, r6, pc}
 8017326:	f7f6 fcb3 	bl	800dc90 <rcutils_reset_error>
 801732a:	f640 0098 	movw	r0, #2200	; 0x898
 801732e:	bd70      	pop	{r4, r5, r6, pc}
 8017330:	f640 0098 	movw	r0, #2200	; 0x898
 8017334:	bd70      	pop	{r4, r5, r6, pc}
 8017336:	200b      	movs	r0, #11
 8017338:	bd70      	pop	{r4, r5, r6, pc}
 801733a:	f640 0098 	movw	r0, #2200	; 0x898
 801733e:	4770      	bx	lr

08017340 <rcl_action_send_cancel_response>:
 8017340:	b390      	cbz	r0, 80173a8 <rcl_action_send_cancel_response+0x68>
 8017342:	b570      	push	{r4, r5, r6, lr}
 8017344:	4604      	mov	r4, r0
 8017346:	6800      	ldr	r0, [r0, #0]
 8017348:	b348      	cbz	r0, 801739e <rcl_action_send_cancel_response+0x5e>
 801734a:	460e      	mov	r6, r1
 801734c:	4615      	mov	r5, r2
 801734e:	f7fe f8bb 	bl	80154c8 <rcl_service_is_valid>
 8017352:	b1f8      	cbz	r0, 8017394 <rcl_action_send_cancel_response+0x54>
 8017354:	6820      	ldr	r0, [r4, #0]
 8017356:	3004      	adds	r0, #4
 8017358:	f7fe f8b6 	bl	80154c8 <rcl_service_is_valid>
 801735c:	b1d0      	cbz	r0, 8017394 <rcl_action_send_cancel_response+0x54>
 801735e:	6820      	ldr	r0, [r4, #0]
 8017360:	3008      	adds	r0, #8
 8017362:	f7fe f8b1 	bl	80154c8 <rcl_service_is_valid>
 8017366:	b1a8      	cbz	r0, 8017394 <rcl_action_send_cancel_response+0x54>
 8017368:	6820      	ldr	r0, [r4, #0]
 801736a:	300c      	adds	r0, #12
 801736c:	f7f5 fbf4 	bl	800cb58 <rcl_publisher_is_valid>
 8017370:	b180      	cbz	r0, 8017394 <rcl_action_send_cancel_response+0x54>
 8017372:	6820      	ldr	r0, [r4, #0]
 8017374:	3010      	adds	r0, #16
 8017376:	f7f5 fbef 	bl	800cb58 <rcl_publisher_is_valid>
 801737a:	b158      	cbz	r0, 8017394 <rcl_action_send_cancel_response+0x54>
 801737c:	b195      	cbz	r5, 80173a4 <rcl_action_send_cancel_response+0x64>
 801737e:	b18e      	cbz	r6, 80173a4 <rcl_action_send_cancel_response+0x64>
 8017380:	6820      	ldr	r0, [r4, #0]
 8017382:	462a      	mov	r2, r5
 8017384:	4631      	mov	r1, r6
 8017386:	3004      	adds	r0, #4
 8017388:	f7fe f86e 	bl	8015468 <rcl_send_response>
 801738c:	3800      	subs	r0, #0
 801738e:	bf18      	it	ne
 8017390:	2001      	movne	r0, #1
 8017392:	bd70      	pop	{r4, r5, r6, pc}
 8017394:	f7f6 fc7c 	bl	800dc90 <rcutils_reset_error>
 8017398:	f640 0098 	movw	r0, #2200	; 0x898
 801739c:	bd70      	pop	{r4, r5, r6, pc}
 801739e:	f640 0098 	movw	r0, #2200	; 0x898
 80173a2:	bd70      	pop	{r4, r5, r6, pc}
 80173a4:	200b      	movs	r0, #11
 80173a6:	bd70      	pop	{r4, r5, r6, pc}
 80173a8:	f640 0098 	movw	r0, #2200	; 0x898
 80173ac:	4770      	bx	lr
 80173ae:	bf00      	nop

080173b0 <rcl_action_wait_set_add_action_server>:
 80173b0:	2800      	cmp	r0, #0
 80173b2:	d04d      	beq.n	8017450 <rcl_action_wait_set_add_action_server+0xa0>
 80173b4:	b570      	push	{r4, r5, r6, lr}
 80173b6:	460c      	mov	r4, r1
 80173b8:	b159      	cbz	r1, 80173d2 <rcl_action_wait_set_add_action_server+0x22>
 80173ba:	4605      	mov	r5, r0
 80173bc:	6808      	ldr	r0, [r1, #0]
 80173be:	b140      	cbz	r0, 80173d2 <rcl_action_wait_set_add_action_server+0x22>
 80173c0:	4616      	mov	r6, r2
 80173c2:	f7fe f881 	bl	80154c8 <rcl_service_is_valid>
 80173c6:	b120      	cbz	r0, 80173d2 <rcl_action_wait_set_add_action_server+0x22>
 80173c8:	6820      	ldr	r0, [r4, #0]
 80173ca:	3004      	adds	r0, #4
 80173cc:	f7fe f87c 	bl	80154c8 <rcl_service_is_valid>
 80173d0:	b910      	cbnz	r0, 80173d8 <rcl_action_wait_set_add_action_server+0x28>
 80173d2:	f640 0098 	movw	r0, #2200	; 0x898
 80173d6:	bd70      	pop	{r4, r5, r6, pc}
 80173d8:	6820      	ldr	r0, [r4, #0]
 80173da:	3008      	adds	r0, #8
 80173dc:	f7fe f874 	bl	80154c8 <rcl_service_is_valid>
 80173e0:	2800      	cmp	r0, #0
 80173e2:	d0f6      	beq.n	80173d2 <rcl_action_wait_set_add_action_server+0x22>
 80173e4:	6820      	ldr	r0, [r4, #0]
 80173e6:	300c      	adds	r0, #12
 80173e8:	f7f5 fbce 	bl	800cb88 <rcl_publisher_is_valid_except_context>
 80173ec:	2800      	cmp	r0, #0
 80173ee:	d0f0      	beq.n	80173d2 <rcl_action_wait_set_add_action_server+0x22>
 80173f0:	6820      	ldr	r0, [r4, #0]
 80173f2:	3010      	adds	r0, #16
 80173f4:	f7f5 fbc8 	bl	800cb88 <rcl_publisher_is_valid_except_context>
 80173f8:	2800      	cmp	r0, #0
 80173fa:	d0ea      	beq.n	80173d2 <rcl_action_wait_set_add_action_server+0x22>
 80173fc:	6821      	ldr	r1, [r4, #0]
 80173fe:	4628      	mov	r0, r5
 8017400:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 8017404:	f7ff fad4 	bl	80169b0 <rcl_wait_set_add_service>
 8017408:	2800      	cmp	r0, #0
 801740a:	d1e4      	bne.n	80173d6 <rcl_action_wait_set_add_action_server+0x26>
 801740c:	6821      	ldr	r1, [r4, #0]
 801740e:	4628      	mov	r0, r5
 8017410:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 8017414:	3104      	adds	r1, #4
 8017416:	f7ff facb 	bl	80169b0 <rcl_wait_set_add_service>
 801741a:	2800      	cmp	r0, #0
 801741c:	d1db      	bne.n	80173d6 <rcl_action_wait_set_add_action_server+0x26>
 801741e:	6821      	ldr	r1, [r4, #0]
 8017420:	4628      	mov	r0, r5
 8017422:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 8017426:	3108      	adds	r1, #8
 8017428:	f7ff fac2 	bl	80169b0 <rcl_wait_set_add_service>
 801742c:	2800      	cmp	r0, #0
 801742e:	d1d2      	bne.n	80173d6 <rcl_action_wait_set_add_action_server+0x26>
 8017430:	6821      	ldr	r1, [r4, #0]
 8017432:	4628      	mov	r0, r5
 8017434:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 8017438:	3114      	adds	r1, #20
 801743a:	f7ff fa5d 	bl	80168f8 <rcl_wait_set_add_timer>
 801743e:	2800      	cmp	r0, #0
 8017440:	d1c9      	bne.n	80173d6 <rcl_action_wait_set_add_action_server+0x26>
 8017442:	2e00      	cmp	r6, #0
 8017444:	d0c7      	beq.n	80173d6 <rcl_action_wait_set_add_action_server+0x26>
 8017446:	6823      	ldr	r3, [r4, #0]
 8017448:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 801744c:	6033      	str	r3, [r6, #0]
 801744e:	bd70      	pop	{r4, r5, r6, pc}
 8017450:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017454:	4770      	bx	lr
 8017456:	bf00      	nop

08017458 <rcl_action_server_wait_set_get_entities_ready>:
 8017458:	2800      	cmp	r0, #0
 801745a:	d067      	beq.n	801752c <rcl_action_server_wait_set_get_entities_ready+0xd4>
 801745c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017460:	460c      	mov	r4, r1
 8017462:	b161      	cbz	r1, 801747e <rcl_action_server_wait_set_get_entities_ready+0x26>
 8017464:	4605      	mov	r5, r0
 8017466:	6808      	ldr	r0, [r1, #0]
 8017468:	b148      	cbz	r0, 801747e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801746a:	4616      	mov	r6, r2
 801746c:	4698      	mov	r8, r3
 801746e:	f7fe f82b 	bl	80154c8 <rcl_service_is_valid>
 8017472:	b120      	cbz	r0, 801747e <rcl_action_server_wait_set_get_entities_ready+0x26>
 8017474:	6820      	ldr	r0, [r4, #0]
 8017476:	3004      	adds	r0, #4
 8017478:	f7fe f826 	bl	80154c8 <rcl_service_is_valid>
 801747c:	b918      	cbnz	r0, 8017486 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 801747e:	f640 0098 	movw	r0, #2200	; 0x898
 8017482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017486:	6820      	ldr	r0, [r4, #0]
 8017488:	3008      	adds	r0, #8
 801748a:	f7fe f81d 	bl	80154c8 <rcl_service_is_valid>
 801748e:	2800      	cmp	r0, #0
 8017490:	d0f5      	beq.n	801747e <rcl_action_server_wait_set_get_entities_ready+0x26>
 8017492:	6820      	ldr	r0, [r4, #0]
 8017494:	300c      	adds	r0, #12
 8017496:	f7f5 fb77 	bl	800cb88 <rcl_publisher_is_valid_except_context>
 801749a:	2800      	cmp	r0, #0
 801749c:	d0ef      	beq.n	801747e <rcl_action_server_wait_set_get_entities_ready+0x26>
 801749e:	6820      	ldr	r0, [r4, #0]
 80174a0:	3010      	adds	r0, #16
 80174a2:	f7f5 fb71 	bl	800cb88 <rcl_publisher_is_valid_except_context>
 80174a6:	2800      	cmp	r0, #0
 80174a8:	d0e9      	beq.n	801747e <rcl_action_server_wait_set_get_entities_ready+0x26>
 80174aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80174ae:	2a00      	cmp	r2, #0
 80174b0:	bf18      	it	ne
 80174b2:	2b00      	cmpne	r3, #0
 80174b4:	bf0c      	ite	eq
 80174b6:	2101      	moveq	r1, #1
 80174b8:	2100      	movne	r1, #0
 80174ba:	f1b8 0f00 	cmp.w	r8, #0
 80174be:	bf08      	it	eq
 80174c0:	f041 0101 	orreq.w	r1, r1, #1
 80174c4:	bba9      	cbnz	r1, 8017532 <rcl_action_server_wait_set_get_entities_ready+0xda>
 80174c6:	b3a6      	cbz	r6, 8017532 <rcl_action_server_wait_set_get_entities_ready+0xda>
 80174c8:	6821      	ldr	r1, [r4, #0]
 80174ca:	2000      	movs	r0, #0
 80174cc:	692c      	ldr	r4, [r5, #16]
 80174ce:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 80174d2:	6a2f      	ldr	r7, [r5, #32]
 80174d4:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80174d8:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 80174dc:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 80174e0:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 80174e4:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 80174e8:	1a64      	subs	r4, r4, r1
 80174ea:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 80174ee:	fab4 f484 	clz	r4, r4
 80174f2:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80174f6:	0964      	lsrs	r4, r4, #5
 80174f8:	7034      	strb	r4, [r6, #0]
 80174fa:	1d0c      	adds	r4, r1, #4
 80174fc:	1b2c      	subs	r4, r5, r4
 80174fe:	fab4 f484 	clz	r4, r4
 8017502:	0964      	lsrs	r4, r4, #5
 8017504:	f888 4000 	strb.w	r4, [r8]
 8017508:	f101 0408 	add.w	r4, r1, #8
 801750c:	1b1b      	subs	r3, r3, r4
 801750e:	9c06      	ldr	r4, [sp, #24]
 8017510:	fab3 f383 	clz	r3, r3
 8017514:	095b      	lsrs	r3, r3, #5
 8017516:	7023      	strb	r3, [r4, #0]
 8017518:	f101 0314 	add.w	r3, r1, #20
 801751c:	1ad3      	subs	r3, r2, r3
 801751e:	9a07      	ldr	r2, [sp, #28]
 8017520:	fab3 f383 	clz	r3, r3
 8017524:	095b      	lsrs	r3, r3, #5
 8017526:	7013      	strb	r3, [r2, #0]
 8017528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801752c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017530:	4770      	bx	lr
 8017532:	200b      	movs	r0, #11
 8017534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017538 <_execute_event_handler>:
 8017538:	2002      	movs	r0, #2
 801753a:	4770      	bx	lr

0801753c <_cancel_goal_event_handler>:
 801753c:	2003      	movs	r0, #3
 801753e:	4770      	bx	lr

08017540 <_succeed_event_handler>:
 8017540:	2004      	movs	r0, #4
 8017542:	4770      	bx	lr

08017544 <_abort_event_handler>:
 8017544:	2006      	movs	r0, #6
 8017546:	4770      	bx	lr

08017548 <_canceled_event_handler>:
 8017548:	2005      	movs	r0, #5
 801754a:	4770      	bx	lr

0801754c <rcl_action_transition_goal_state>:
 801754c:	b2c2      	uxtb	r2, r0
 801754e:	2a06      	cmp	r2, #6
 8017550:	d810      	bhi.n	8017574 <rcl_action_transition_goal_state+0x28>
 8017552:	2904      	cmp	r1, #4
 8017554:	d80e      	bhi.n	8017574 <rcl_action_transition_goal_state+0x28>
 8017556:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801755a:	b410      	push	{r4}
 801755c:	1853      	adds	r3, r2, r1
 801755e:	4c06      	ldr	r4, [pc, #24]	; (8017578 <rcl_action_transition_goal_state+0x2c>)
 8017560:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8017564:	b113      	cbz	r3, 801756c <rcl_action_transition_goal_state+0x20>
 8017566:	f85d 4b04 	ldr.w	r4, [sp], #4
 801756a:	4718      	bx	r3
 801756c:	2000      	movs	r0, #0
 801756e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017572:	4770      	bx	lr
 8017574:	2000      	movs	r0, #0
 8017576:	4770      	bx	lr
 8017578:	0801ec38 	.word	0x0801ec38

0801757c <rcl_action_get_zero_initialized_cancel_response>:
 801757c:	b510      	push	{r4, lr}
 801757e:	4c07      	ldr	r4, [pc, #28]	; (801759c <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8017580:	4686      	mov	lr, r0
 8017582:	4684      	mov	ip, r0
 8017584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017586:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801758a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801758c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017590:	6823      	ldr	r3, [r4, #0]
 8017592:	4670      	mov	r0, lr
 8017594:	f8cc 3000 	str.w	r3, [ip]
 8017598:	bd10      	pop	{r4, pc}
 801759a:	bf00      	nop
 801759c:	0801ecc4 	.word	0x0801ecc4

080175a0 <rclc_action_send_result_request>:
 80175a0:	b1d0      	cbz	r0, 80175d8 <rclc_action_send_result_request+0x38>
 80175a2:	4684      	mov	ip, r0
 80175a4:	f8d0 0009 	ldr.w	r0, [r0, #9]
 80175a8:	b500      	push	{lr}
 80175aa:	b087      	sub	sp, #28
 80175ac:	f8dc 100d 	ldr.w	r1, [ip, #13]
 80175b0:	f8dc 2011 	ldr.w	r2, [ip, #17]
 80175b4:	f8dc 3015 	ldr.w	r3, [ip, #21]
 80175b8:	f10d 0e08 	add.w	lr, sp, #8
 80175bc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80175c0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80175c4:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 80175c8:	a902      	add	r1, sp, #8
 80175ca:	3010      	adds	r0, #16
 80175cc:	f7ff fbcc 	bl	8016d68 <rcl_action_send_result_request>
 80175d0:	b920      	cbnz	r0, 80175dc <rclc_action_send_result_request+0x3c>
 80175d2:	b007      	add	sp, #28
 80175d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80175d8:	200b      	movs	r0, #11
 80175da:	4770      	bx	lr
 80175dc:	9001      	str	r0, [sp, #4]
 80175de:	f7f6 fb57 	bl	800dc90 <rcutils_reset_error>
 80175e2:	9801      	ldr	r0, [sp, #4]
 80175e4:	b007      	add	sp, #28
 80175e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80175ea:	bf00      	nop

080175ec <rclc_action_take_goal_handle>:
 80175ec:	b160      	cbz	r0, 8017608 <rclc_action_take_goal_handle+0x1c>
 80175ee:	6883      	ldr	r3, [r0, #8]
 80175f0:	b143      	cbz	r3, 8017604 <rclc_action_take_goal_handle+0x18>
 80175f2:	6819      	ldr	r1, [r3, #0]
 80175f4:	2200      	movs	r2, #0
 80175f6:	6081      	str	r1, [r0, #8]
 80175f8:	721a      	strb	r2, [r3, #8]
 80175fa:	68c1      	ldr	r1, [r0, #12]
 80175fc:	621a      	str	r2, [r3, #32]
 80175fe:	849a      	strh	r2, [r3, #36]	; 0x24
 8017600:	6019      	str	r1, [r3, #0]
 8017602:	60c3      	str	r3, [r0, #12]
 8017604:	4618      	mov	r0, r3
 8017606:	4770      	bx	lr
 8017608:	4603      	mov	r3, r0
 801760a:	e7fb      	b.n	8017604 <rclc_action_take_goal_handle+0x18>

0801760c <rclc_action_remove_used_goal_handle>:
 801760c:	b180      	cbz	r0, 8017630 <rclc_action_remove_used_goal_handle+0x24>
 801760e:	b179      	cbz	r1, 8017630 <rclc_action_remove_used_goal_handle+0x24>
 8017610:	68c3      	ldr	r3, [r0, #12]
 8017612:	4299      	cmp	r1, r3
 8017614:	d00d      	beq.n	8017632 <rclc_action_remove_used_goal_handle+0x26>
 8017616:	b12b      	cbz	r3, 8017624 <rclc_action_remove_used_goal_handle+0x18>
 8017618:	681a      	ldr	r2, [r3, #0]
 801761a:	4291      	cmp	r1, r2
 801761c:	d003      	beq.n	8017626 <rclc_action_remove_used_goal_handle+0x1a>
 801761e:	4613      	mov	r3, r2
 8017620:	2b00      	cmp	r3, #0
 8017622:	d1f9      	bne.n	8017618 <rclc_action_remove_used_goal_handle+0xc>
 8017624:	4770      	bx	lr
 8017626:	680a      	ldr	r2, [r1, #0]
 8017628:	601a      	str	r2, [r3, #0]
 801762a:	6883      	ldr	r3, [r0, #8]
 801762c:	600b      	str	r3, [r1, #0]
 801762e:	6081      	str	r1, [r0, #8]
 8017630:	4770      	bx	lr
 8017632:	680b      	ldr	r3, [r1, #0]
 8017634:	60c3      	str	r3, [r0, #12]
 8017636:	e7f8      	b.n	801762a <rclc_action_remove_used_goal_handle+0x1e>

08017638 <rclc_action_find_goal_handle_by_uuid>:
 8017638:	b538      	push	{r3, r4, r5, lr}
 801763a:	b181      	cbz	r1, 801765e <rclc_action_find_goal_handle_by_uuid+0x26>
 801763c:	b178      	cbz	r0, 801765e <rclc_action_find_goal_handle_by_uuid+0x26>
 801763e:	68c4      	ldr	r4, [r0, #12]
 8017640:	460d      	mov	r5, r1
 8017642:	b914      	cbnz	r4, 801764a <rclc_action_find_goal_handle_by_uuid+0x12>
 8017644:	e009      	b.n	801765a <rclc_action_find_goal_handle_by_uuid+0x22>
 8017646:	6824      	ldr	r4, [r4, #0]
 8017648:	b13c      	cbz	r4, 801765a <rclc_action_find_goal_handle_by_uuid+0x22>
 801764a:	f104 0009 	add.w	r0, r4, #9
 801764e:	2210      	movs	r2, #16
 8017650:	4629      	mov	r1, r5
 8017652:	f005 f845 	bl	801c6e0 <memcmp>
 8017656:	2800      	cmp	r0, #0
 8017658:	d1f5      	bne.n	8017646 <rclc_action_find_goal_handle_by_uuid+0xe>
 801765a:	4620      	mov	r0, r4
 801765c:	bd38      	pop	{r3, r4, r5, pc}
 801765e:	2400      	movs	r4, #0
 8017660:	4620      	mov	r0, r4
 8017662:	bd38      	pop	{r3, r4, r5, pc}

08017664 <rclc_action_find_first_handle_by_status>:
 8017664:	b140      	cbz	r0, 8017678 <rclc_action_find_first_handle_by_status+0x14>
 8017666:	68c0      	ldr	r0, [r0, #12]
 8017668:	b910      	cbnz	r0, 8017670 <rclc_action_find_first_handle_by_status+0xc>
 801766a:	e005      	b.n	8017678 <rclc_action_find_first_handle_by_status+0x14>
 801766c:	6800      	ldr	r0, [r0, #0]
 801766e:	b118      	cbz	r0, 8017678 <rclc_action_find_first_handle_by_status+0x14>
 8017670:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8017674:	428b      	cmp	r3, r1
 8017676:	d1f9      	bne.n	801766c <rclc_action_find_first_handle_by_status+0x8>
 8017678:	4770      	bx	lr
 801767a:	bf00      	nop

0801767c <rclc_action_find_first_terminated_handle>:
 801767c:	b140      	cbz	r0, 8017690 <rclc_action_find_first_terminated_handle+0x14>
 801767e:	68c0      	ldr	r0, [r0, #12]
 8017680:	b910      	cbnz	r0, 8017688 <rclc_action_find_first_terminated_handle+0xc>
 8017682:	e005      	b.n	8017690 <rclc_action_find_first_terminated_handle+0x14>
 8017684:	6800      	ldr	r0, [r0, #0]
 8017686:	b118      	cbz	r0, 8017690 <rclc_action_find_first_terminated_handle+0x14>
 8017688:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801768c:	2b03      	cmp	r3, #3
 801768e:	ddf9      	ble.n	8017684 <rclc_action_find_first_terminated_handle+0x8>
 8017690:	4770      	bx	lr
 8017692:	bf00      	nop

08017694 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8017694:	b170      	cbz	r0, 80176b4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8017696:	68c0      	ldr	r0, [r0, #12]
 8017698:	b160      	cbz	r0, 80176b4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801769a:	b410      	push	{r4}
 801769c:	e001      	b.n	80176a2 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 801769e:	6800      	ldr	r0, [r0, #0]
 80176a0:	b128      	cbz	r0, 80176ae <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 80176a2:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 80176a6:	4299      	cmp	r1, r3
 80176a8:	bf08      	it	eq
 80176aa:	4294      	cmpeq	r4, r2
 80176ac:	d1f7      	bne.n	801769e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 80176ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176b2:	4770      	bx	lr
 80176b4:	4770      	bx	lr
 80176b6:	bf00      	nop

080176b8 <rclc_action_find_handle_by_result_request_sequence_number>:
 80176b8:	b170      	cbz	r0, 80176d8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80176ba:	68c0      	ldr	r0, [r0, #12]
 80176bc:	b160      	cbz	r0, 80176d8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 80176be:	b410      	push	{r4}
 80176c0:	e001      	b.n	80176c6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 80176c2:	6800      	ldr	r0, [r0, #0]
 80176c4:	b128      	cbz	r0, 80176d2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 80176c6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 80176ca:	4299      	cmp	r1, r3
 80176cc:	bf08      	it	eq
 80176ce:	4294      	cmpeq	r4, r2
 80176d0:	d1f7      	bne.n	80176c2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 80176d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176d6:	4770      	bx	lr
 80176d8:	4770      	bx	lr
 80176da:	bf00      	nop

080176dc <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80176dc:	b170      	cbz	r0, 80176fc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80176de:	68c0      	ldr	r0, [r0, #12]
 80176e0:	b160      	cbz	r0, 80176fc <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80176e2:	b410      	push	{r4}
 80176e4:	e001      	b.n	80176ea <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80176e6:	6800      	ldr	r0, [r0, #0]
 80176e8:	b128      	cbz	r0, 80176f6 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80176ea:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 80176ee:	4299      	cmp	r1, r3
 80176f0:	bf08      	it	eq
 80176f2:	4294      	cmpeq	r4, r2
 80176f4:	d1f7      	bne.n	80176e6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80176f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176fa:	4770      	bx	lr
 80176fc:	4770      	bx	lr
 80176fe:	bf00      	nop

08017700 <rclc_action_find_first_handle_with_goal_response>:
 8017700:	b140      	cbz	r0, 8017714 <rclc_action_find_first_handle_with_goal_response+0x14>
 8017702:	68c0      	ldr	r0, [r0, #12]
 8017704:	b910      	cbnz	r0, 801770c <rclc_action_find_first_handle_with_goal_response+0xc>
 8017706:	e005      	b.n	8017714 <rclc_action_find_first_handle_with_goal_response+0x14>
 8017708:	6800      	ldr	r0, [r0, #0]
 801770a:	b118      	cbz	r0, 8017714 <rclc_action_find_first_handle_with_goal_response+0x14>
 801770c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8017710:	2b00      	cmp	r3, #0
 8017712:	d0f9      	beq.n	8017708 <rclc_action_find_first_handle_with_goal_response+0x8>
 8017714:	4770      	bx	lr
 8017716:	bf00      	nop

08017718 <rclc_action_find_first_handle_with_result_response>:
 8017718:	b140      	cbz	r0, 801772c <rclc_action_find_first_handle_with_result_response+0x14>
 801771a:	68c0      	ldr	r0, [r0, #12]
 801771c:	b910      	cbnz	r0, 8017724 <rclc_action_find_first_handle_with_result_response+0xc>
 801771e:	e005      	b.n	801772c <rclc_action_find_first_handle_with_result_response+0x14>
 8017720:	6800      	ldr	r0, [r0, #0]
 8017722:	b118      	cbz	r0, 801772c <rclc_action_find_first_handle_with_result_response+0x14>
 8017724:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8017728:	2b00      	cmp	r3, #0
 801772a:	d0f9      	beq.n	8017720 <rclc_action_find_first_handle_with_result_response+0x8>
 801772c:	4770      	bx	lr
 801772e:	bf00      	nop

08017730 <rclc_action_server_response_goal_request>:
 8017730:	b198      	cbz	r0, 801775a <rclc_action_server_response_goal_request+0x2a>
 8017732:	2200      	movs	r2, #0
 8017734:	460b      	mov	r3, r1
 8017736:	f100 0128 	add.w	r1, r0, #40	; 0x28
 801773a:	b510      	push	{r4, lr}
 801773c:	6844      	ldr	r4, [r0, #4]
 801773e:	b086      	sub	sp, #24
 8017740:	f104 0010 	add.w	r0, r4, #16
 8017744:	9205      	str	r2, [sp, #20]
 8017746:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801774a:	aa03      	add	r2, sp, #12
 801774c:	f88d 300c 	strb.w	r3, [sp, #12]
 8017750:	f7ff fd40 	bl	80171d4 <rcl_action_send_goal_response>
 8017754:	b918      	cbnz	r0, 801775e <rclc_action_server_response_goal_request+0x2e>
 8017756:	b006      	add	sp, #24
 8017758:	bd10      	pop	{r4, pc}
 801775a:	200b      	movs	r0, #11
 801775c:	4770      	bx	lr
 801775e:	9001      	str	r0, [sp, #4]
 8017760:	f7f6 fa96 	bl	800dc90 <rcutils_reset_error>
 8017764:	9801      	ldr	r0, [sp, #4]
 8017766:	b006      	add	sp, #24
 8017768:	bd10      	pop	{r4, pc}
 801776a:	bf00      	nop
 801776c:	0000      	movs	r0, r0
	...

08017770 <rclc_action_server_goal_cancel_accept>:
 8017770:	b310      	cbz	r0, 80177b8 <rclc_action_server_goal_cancel_accept+0x48>
 8017772:	b510      	push	{r4, lr}
 8017774:	b090      	sub	sp, #64	; 0x40
 8017776:	4604      	mov	r4, r0
 8017778:	a806      	add	r0, sp, #24
 801777a:	f7ff feff 	bl	801757c <rcl_action_get_zero_initialized_cancel_response>
 801777e:	2300      	movs	r3, #0
 8017780:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8017784:	46ec      	mov	ip, sp
 8017786:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801778a:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801778e:	f88d 3018 	strb.w	r3, [sp, #24]
 8017792:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8017796:	f8cd d01c 	str.w	sp, [sp, #28]
 801779a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801779e:	ed9f 7b08 	vldr	d7, [pc, #32]	; 80177c0 <rclc_action_server_goal_cancel_accept+0x50>
 80177a2:	6860      	ldr	r0, [r4, #4]
 80177a4:	aa06      	add	r2, sp, #24
 80177a6:	f104 0158 	add.w	r1, r4, #88	; 0x58
 80177aa:	3010      	adds	r0, #16
 80177ac:	ed8d 7b08 	vstr	d7, [sp, #32]
 80177b0:	f7ff fdc6 	bl	8017340 <rcl_action_send_cancel_response>
 80177b4:	b010      	add	sp, #64	; 0x40
 80177b6:	bd10      	pop	{r4, pc}
 80177b8:	200b      	movs	r0, #11
 80177ba:	4770      	bx	lr
 80177bc:	f3af 8000 	nop.w
 80177c0:	00000001 	.word	0x00000001
 80177c4:	00000001 	.word	0x00000001

080177c8 <rclc_action_server_goal_cancel_reject>:
 80177c8:	b082      	sub	sp, #8
 80177ca:	b530      	push	{r4, r5, lr}
 80177cc:	b08b      	sub	sp, #44	; 0x2c
 80177ce:	ac0e      	add	r4, sp, #56	; 0x38
 80177d0:	e884 000c 	stmia.w	r4, {r2, r3}
 80177d4:	b188      	cbz	r0, 80177fa <rclc_action_server_goal_cancel_reject+0x32>
 80177d6:	4604      	mov	r4, r0
 80177d8:	a801      	add	r0, sp, #4
 80177da:	460d      	mov	r5, r1
 80177dc:	f7ff fece 	bl	801757c <rcl_action_get_zero_initialized_cancel_response>
 80177e0:	aa01      	add	r2, sp, #4
 80177e2:	a90e      	add	r1, sp, #56	; 0x38
 80177e4:	f104 0010 	add.w	r0, r4, #16
 80177e8:	f88d 5004 	strb.w	r5, [sp, #4]
 80177ec:	f7ff fda8 	bl	8017340 <rcl_action_send_cancel_response>
 80177f0:	b00b      	add	sp, #44	; 0x2c
 80177f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80177f6:	b002      	add	sp, #8
 80177f8:	4770      	bx	lr
 80177fa:	200b      	movs	r0, #11
 80177fc:	b00b      	add	sp, #44	; 0x2c
 80177fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017802:	b002      	add	sp, #8
 8017804:	4770      	bx	lr
 8017806:	bf00      	nop

08017808 <__atomic_load_8>:
 8017808:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 801780c:	4a16      	ldr	r2, [pc, #88]	; (8017868 <__atomic_load_8+0x60>)
 801780e:	4b17      	ldr	r3, [pc, #92]	; (801786c <__atomic_load_8+0x64>)
 8017810:	f04f 0c01 	mov.w	ip, #1
 8017814:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8017818:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 801781c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8017820:	fb02 f101 	mul.w	r1, r2, r1
 8017824:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8017828:	fba3 2301 	umull	r2, r3, r3, r1
 801782c:	091b      	lsrs	r3, r3, #4
 801782e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8017832:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8017836:	b4d0      	push	{r4, r6, r7}
 8017838:	1ac9      	subs	r1, r1, r3
 801783a:	4c0d      	ldr	r4, [pc, #52]	; (8017870 <__atomic_load_8+0x68>)
 801783c:	1862      	adds	r2, r4, r1
 801783e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8017842:	e8c2 cf46 	strexb	r6, ip, [r2]
 8017846:	2e00      	cmp	r6, #0
 8017848:	d1f9      	bne.n	801783e <__atomic_load_8+0x36>
 801784a:	b2db      	uxtb	r3, r3
 801784c:	f3bf 8f5b 	dmb	ish
 8017850:	2b00      	cmp	r3, #0
 8017852:	d1f4      	bne.n	801783e <__atomic_load_8+0x36>
 8017854:	e9d0 6700 	ldrd	r6, r7, [r0]
 8017858:	f3bf 8f5b 	dmb	ish
 801785c:	5463      	strb	r3, [r4, r1]
 801785e:	4630      	mov	r0, r6
 8017860:	4639      	mov	r1, r7
 8017862:	bcd0      	pop	{r4, r6, r7}
 8017864:	4770      	bx	lr
 8017866:	bf00      	nop
 8017868:	27d4eb2d 	.word	0x27d4eb2d
 801786c:	b21642c9 	.word	0xb21642c9
 8017870:	200108c0 	.word	0x200108c0

08017874 <__atomic_store_8>:
 8017874:	b570      	push	{r4, r5, r6, lr}
 8017876:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801787a:	4916      	ldr	r1, [pc, #88]	; (80178d4 <__atomic_store_8+0x60>)
 801787c:	4c16      	ldr	r4, [pc, #88]	; (80178d8 <__atomic_store_8+0x64>)
 801787e:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 8017882:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8017886:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801788a:	fb01 fe0e 	mul.w	lr, r1, lr
 801788e:	4913      	ldr	r1, [pc, #76]	; (80178dc <__atomic_store_8+0x68>)
 8017890:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8017894:	fba1 510e 	umull	r5, r1, r1, lr
 8017898:	f04f 0501 	mov.w	r5, #1
 801789c:	0909      	lsrs	r1, r1, #4
 801789e:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 80178a2:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 80178a6:	ebae 0e01 	sub.w	lr, lr, r1
 80178aa:	eb04 0c0e 	add.w	ip, r4, lr
 80178ae:	e8dc 1f4f 	ldrexb	r1, [ip]
 80178b2:	e8cc 5f46 	strexb	r6, r5, [ip]
 80178b6:	2e00      	cmp	r6, #0
 80178b8:	d1f9      	bne.n	80178ae <__atomic_store_8+0x3a>
 80178ba:	b2c9      	uxtb	r1, r1
 80178bc:	f3bf 8f5b 	dmb	ish
 80178c0:	2900      	cmp	r1, #0
 80178c2:	d1f4      	bne.n	80178ae <__atomic_store_8+0x3a>
 80178c4:	e9c0 2300 	strd	r2, r3, [r0]
 80178c8:	f3bf 8f5b 	dmb	ish
 80178cc:	f804 100e 	strb.w	r1, [r4, lr]
 80178d0:	bd70      	pop	{r4, r5, r6, pc}
 80178d2:	bf00      	nop
 80178d4:	27d4eb2d 	.word	0x27d4eb2d
 80178d8:	200108c0 	.word	0x200108c0
 80178dc:	b21642c9 	.word	0xb21642c9

080178e0 <__atomic_exchange_8>:
 80178e0:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 80178e4:	4917      	ldr	r1, [pc, #92]	; (8017944 <__atomic_exchange_8+0x64>)
 80178e6:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 80178ea:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 80178ee:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 80178f2:	fb01 fc0c 	mul.w	ip, r1, ip
 80178f6:	4914      	ldr	r1, [pc, #80]	; (8017948 <__atomic_exchange_8+0x68>)
 80178f8:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 80178fc:	b570      	push	{r4, r5, r6, lr}
 80178fe:	4686      	mov	lr, r0
 8017900:	fba1 010c 	umull	r0, r1, r1, ip
 8017904:	4d11      	ldr	r5, [pc, #68]	; (801794c <__atomic_exchange_8+0x6c>)
 8017906:	f04f 0001 	mov.w	r0, #1
 801790a:	0909      	lsrs	r1, r1, #4
 801790c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8017910:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8017914:	ebac 0c01 	sub.w	ip, ip, r1
 8017918:	eb05 010c 	add.w	r1, r5, ip
 801791c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8017920:	e8c1 0f46 	strexb	r6, r0, [r1]
 8017924:	2e00      	cmp	r6, #0
 8017926:	d1f9      	bne.n	801791c <__atomic_exchange_8+0x3c>
 8017928:	b2e4      	uxtb	r4, r4
 801792a:	f3bf 8f5b 	dmb	ish
 801792e:	2c00      	cmp	r4, #0
 8017930:	d1f4      	bne.n	801791c <__atomic_exchange_8+0x3c>
 8017932:	e9de 0100 	ldrd	r0, r1, [lr]
 8017936:	e9ce 2300 	strd	r2, r3, [lr]
 801793a:	f3bf 8f5b 	dmb	ish
 801793e:	f805 400c 	strb.w	r4, [r5, ip]
 8017942:	bd70      	pop	{r4, r5, r6, pc}
 8017944:	27d4eb2d 	.word	0x27d4eb2d
 8017948:	b21642c9 	.word	0xb21642c9
 801794c:	200108c0 	.word	0x200108c0

08017950 <rcutils_get_env>:
 8017950:	b168      	cbz	r0, 801796e <rcutils_get_env+0x1e>
 8017952:	b510      	push	{r4, lr}
 8017954:	460c      	mov	r4, r1
 8017956:	b129      	cbz	r1, 8017964 <rcutils_get_env+0x14>
 8017958:	f004 fb2c 	bl	801bfb4 <getenv>
 801795c:	b120      	cbz	r0, 8017968 <rcutils_get_env+0x18>
 801795e:	6020      	str	r0, [r4, #0]
 8017960:	2000      	movs	r0, #0
 8017962:	bd10      	pop	{r4, pc}
 8017964:	4803      	ldr	r0, [pc, #12]	; (8017974 <rcutils_get_env+0x24>)
 8017966:	bd10      	pop	{r4, pc}
 8017968:	4b03      	ldr	r3, [pc, #12]	; (8017978 <rcutils_get_env+0x28>)
 801796a:	6023      	str	r3, [r4, #0]
 801796c:	bd10      	pop	{r4, pc}
 801796e:	4803      	ldr	r0, [pc, #12]	; (801797c <rcutils_get_env+0x2c>)
 8017970:	4770      	bx	lr
 8017972:	bf00      	nop
 8017974:	0801ed04 	.word	0x0801ed04
 8017978:	0801ee28 	.word	0x0801ee28
 801797c:	0801ece8 	.word	0x0801ece8

08017980 <rcutils_is_directory>:
 8017980:	2000      	movs	r0, #0
 8017982:	4770      	bx	lr

08017984 <rcutils_join_path>:
 8017984:	b082      	sub	sp, #8
 8017986:	2000      	movs	r0, #0
 8017988:	e88d 000c 	stmia.w	sp, {r2, r3}
 801798c:	b002      	add	sp, #8
 801798e:	4770      	bx	lr

08017990 <rcutils_to_native_path>:
 8017990:	b084      	sub	sp, #16
 8017992:	2000      	movs	r0, #0
 8017994:	f10d 0c04 	add.w	ip, sp, #4
 8017998:	b004      	add	sp, #16
 801799a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801799e:	4770      	bx	lr

080179a0 <rcutils_format_string_limit>:
 80179a0:	b40f      	push	{r0, r1, r2, r3}
 80179a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80179a4:	b083      	sub	sp, #12
 80179a6:	ac08      	add	r4, sp, #32
 80179a8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80179aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80179ae:	b326      	cbz	r6, 80179fa <rcutils_format_string_limit+0x5a>
 80179b0:	a808      	add	r0, sp, #32
 80179b2:	f7f6 f949 	bl	800dc48 <rcutils_allocator_is_valid>
 80179b6:	b300      	cbz	r0, 80179fa <rcutils_format_string_limit+0x5a>
 80179b8:	2100      	movs	r1, #0
 80179ba:	ab0f      	add	r3, sp, #60	; 0x3c
 80179bc:	4632      	mov	r2, r6
 80179be:	4608      	mov	r0, r1
 80179c0:	e9cd 3300 	strd	r3, r3, [sp]
 80179c4:	f000 f906 	bl	8017bd4 <rcutils_vsnprintf>
 80179c8:	1c43      	adds	r3, r0, #1
 80179ca:	4605      	mov	r5, r0
 80179cc:	d015      	beq.n	80179fa <rcutils_format_string_limit+0x5a>
 80179ce:	1c47      	adds	r7, r0, #1
 80179d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80179d2:	429f      	cmp	r7, r3
 80179d4:	d901      	bls.n	80179da <rcutils_format_string_limit+0x3a>
 80179d6:	1e5d      	subs	r5, r3, #1
 80179d8:	461f      	mov	r7, r3
 80179da:	9b08      	ldr	r3, [sp, #32]
 80179dc:	4638      	mov	r0, r7
 80179de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80179e0:	4798      	blx	r3
 80179e2:	4604      	mov	r4, r0
 80179e4:	b148      	cbz	r0, 80179fa <rcutils_format_string_limit+0x5a>
 80179e6:	4632      	mov	r2, r6
 80179e8:	4639      	mov	r1, r7
 80179ea:	9b01      	ldr	r3, [sp, #4]
 80179ec:	f000 f8f2 	bl	8017bd4 <rcutils_vsnprintf>
 80179f0:	2800      	cmp	r0, #0
 80179f2:	db09      	blt.n	8017a08 <rcutils_format_string_limit+0x68>
 80179f4:	2300      	movs	r3, #0
 80179f6:	5563      	strb	r3, [r4, r5]
 80179f8:	e000      	b.n	80179fc <rcutils_format_string_limit+0x5c>
 80179fa:	2400      	movs	r4, #0
 80179fc:	4620      	mov	r0, r4
 80179fe:	b003      	add	sp, #12
 8017a00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017a04:	b004      	add	sp, #16
 8017a06:	4770      	bx	lr
 8017a08:	4620      	mov	r0, r4
 8017a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017a0e:	2400      	movs	r4, #0
 8017a10:	4798      	blx	r3
 8017a12:	e7f3      	b.n	80179fc <rcutils_format_string_limit+0x5c>

08017a14 <rcutils_repl_str>:
 8017a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a18:	ed2d 8b02 	vpush	{d8}
 8017a1c:	b087      	sub	sp, #28
 8017a1e:	2600      	movs	r6, #0
 8017a20:	4680      	mov	r8, r0
 8017a22:	468a      	mov	sl, r1
 8017a24:	9000      	str	r0, [sp, #0]
 8017a26:	4608      	mov	r0, r1
 8017a28:	ee08 2a10 	vmov	s16, r2
 8017a2c:	4699      	mov	r9, r3
 8017a2e:	2510      	movs	r5, #16
 8017a30:	f7e8 fc66 	bl	8000300 <strlen>
 8017a34:	4637      	mov	r7, r6
 8017a36:	46b3      	mov	fp, r6
 8017a38:	9001      	str	r0, [sp, #4]
 8017a3a:	e01e      	b.n	8017a7a <rcutils_repl_str+0x66>
 8017a3c:	f10b 0b01 	add.w	fp, fp, #1
 8017a40:	9b01      	ldr	r3, [sp, #4]
 8017a42:	455e      	cmp	r6, fp
 8017a44:	eb04 0803 	add.w	r8, r4, r3
 8017a48:	d211      	bcs.n	8017a6e <rcutils_repl_str+0x5a>
 8017a4a:	442e      	add	r6, r5
 8017a4c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8017a50:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8017a54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017a58:	00b1      	lsls	r1, r6, #2
 8017a5a:	4798      	blx	r3
 8017a5c:	2800      	cmp	r0, #0
 8017a5e:	f000 8088 	beq.w	8017b72 <rcutils_repl_str+0x15e>
 8017a62:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8017a66:	4607      	mov	r7, r0
 8017a68:	bf28      	it	cs
 8017a6a:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8017a6e:	9a00      	ldr	r2, [sp, #0]
 8017a70:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8017a74:	1aa4      	subs	r4, r4, r2
 8017a76:	f843 4c04 	str.w	r4, [r3, #-4]
 8017a7a:	4651      	mov	r1, sl
 8017a7c:	4640      	mov	r0, r8
 8017a7e:	f004 fe93 	bl	801c7a8 <strstr>
 8017a82:	4604      	mov	r4, r0
 8017a84:	4638      	mov	r0, r7
 8017a86:	2c00      	cmp	r4, #0
 8017a88:	d1d8      	bne.n	8017a3c <rcutils_repl_str+0x28>
 8017a8a:	4640      	mov	r0, r8
 8017a8c:	f7e8 fc38 	bl	8000300 <strlen>
 8017a90:	9b00      	ldr	r3, [sp, #0]
 8017a92:	eba8 0803 	sub.w	r8, r8, r3
 8017a96:	eb08 0400 	add.w	r4, r8, r0
 8017a9a:	9402      	str	r4, [sp, #8]
 8017a9c:	f1bb 0f00 	cmp.w	fp, #0
 8017aa0:	d045      	beq.n	8017b2e <rcutils_repl_str+0x11a>
 8017aa2:	ee18 0a10 	vmov	r0, s16
 8017aa6:	f7e8 fc2b 	bl	8000300 <strlen>
 8017aaa:	9a01      	ldr	r2, [sp, #4]
 8017aac:	4606      	mov	r6, r0
 8017aae:	f8d9 3000 	ldr.w	r3, [r9]
 8017ab2:	1a82      	subs	r2, r0, r2
 8017ab4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017ab8:	fb0b 4202 	mla	r2, fp, r2, r4
 8017abc:	1c50      	adds	r0, r2, #1
 8017abe:	9205      	str	r2, [sp, #20]
 8017ac0:	4798      	blx	r3
 8017ac2:	4682      	mov	sl, r0
 8017ac4:	2800      	cmp	r0, #0
 8017ac6:	d054      	beq.n	8017b72 <rcutils_repl_str+0x15e>
 8017ac8:	683a      	ldr	r2, [r7, #0]
 8017aca:	463d      	mov	r5, r7
 8017acc:	9900      	ldr	r1, [sp, #0]
 8017ace:	2401      	movs	r4, #1
 8017ad0:	f004 ff61 	bl	801c996 <memcpy>
 8017ad4:	683b      	ldr	r3, [r7, #0]
 8017ad6:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8017ada:	eb0a 0803 	add.w	r8, sl, r3
 8017ade:	ee18 7a10 	vmov	r7, s16
 8017ae2:	f8dd a000 	ldr.w	sl, [sp]
 8017ae6:	f8cd 9000 	str.w	r9, [sp]
 8017aea:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017aee:	4632      	mov	r2, r6
 8017af0:	4639      	mov	r1, r7
 8017af2:	4640      	mov	r0, r8
 8017af4:	44b0      	add	r8, r6
 8017af6:	f004 ff4e 	bl	801c996 <memcpy>
 8017afa:	f855 2b04 	ldr.w	r2, [r5], #4
 8017afe:	45a3      	cmp	fp, r4
 8017b00:	444a      	add	r2, r9
 8017b02:	eb0a 0102 	add.w	r1, sl, r2
 8017b06:	d02a      	beq.n	8017b5e <rcutils_repl_str+0x14a>
 8017b08:	6828      	ldr	r0, [r5, #0]
 8017b0a:	1a82      	subs	r2, r0, r2
 8017b0c:	4640      	mov	r0, r8
 8017b0e:	4490      	add	r8, r2
 8017b10:	f004 ff41 	bl	801c996 <memcpy>
 8017b14:	1c62      	adds	r2, r4, #1
 8017b16:	45a3      	cmp	fp, r4
 8017b18:	4614      	mov	r4, r2
 8017b1a:	d8e8      	bhi.n	8017aee <rcutils_repl_str+0xda>
 8017b1c:	f8dd 9000 	ldr.w	r9, [sp]
 8017b20:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8017b24:	2300      	movs	r3, #0
 8017b26:	9a05      	ldr	r2, [sp, #20]
 8017b28:	f80a 3002 	strb.w	r3, [sl, r2]
 8017b2c:	e00b      	b.n	8017b46 <rcutils_repl_str+0x132>
 8017b2e:	4620      	mov	r0, r4
 8017b30:	f8d9 3000 	ldr.w	r3, [r9]
 8017b34:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017b38:	3001      	adds	r0, #1
 8017b3a:	4798      	blx	r3
 8017b3c:	4682      	mov	sl, r0
 8017b3e:	b110      	cbz	r0, 8017b46 <rcutils_repl_str+0x132>
 8017b40:	9900      	ldr	r1, [sp, #0]
 8017b42:	f004 ff20 	bl	801c986 <strcpy>
 8017b46:	4638      	mov	r0, r7
 8017b48:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017b4c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017b50:	4798      	blx	r3
 8017b52:	4650      	mov	r0, sl
 8017b54:	b007      	add	sp, #28
 8017b56:	ecbd 8b02 	vpop	{d8}
 8017b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b5e:	9b02      	ldr	r3, [sp, #8]
 8017b60:	4640      	mov	r0, r8
 8017b62:	f8dd 9000 	ldr.w	r9, [sp]
 8017b66:	1a9a      	subs	r2, r3, r2
 8017b68:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8017b6c:	f004 ff13 	bl	801c996 <memcpy>
 8017b70:	e7d8      	b.n	8017b24 <rcutils_repl_str+0x110>
 8017b72:	f04f 0a00 	mov.w	sl, #0
 8017b76:	e7e6      	b.n	8017b46 <rcutils_repl_str+0x132>

08017b78 <rcutils_snprintf>:
 8017b78:	b40c      	push	{r2, r3}
 8017b7a:	b530      	push	{r4, r5, lr}
 8017b7c:	b083      	sub	sp, #12
 8017b7e:	ab06      	add	r3, sp, #24
 8017b80:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b84:	9301      	str	r3, [sp, #4]
 8017b86:	b1e2      	cbz	r2, 8017bc2 <rcutils_snprintf+0x4a>
 8017b88:	fab0 f480 	clz	r4, r0
 8017b8c:	fab1 f581 	clz	r5, r1
 8017b90:	ea50 0c01 	orrs.w	ip, r0, r1
 8017b94:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8017b98:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8017b9c:	d008      	beq.n	8017bb0 <rcutils_snprintf+0x38>
 8017b9e:	b984      	cbnz	r4, 8017bc2 <rcutils_snprintf+0x4a>
 8017ba0:	b97d      	cbnz	r5, 8017bc2 <rcutils_snprintf+0x4a>
 8017ba2:	f004 fd8f 	bl	801c6c4 <vsniprintf>
 8017ba6:	b003      	add	sp, #12
 8017ba8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017bac:	b002      	add	sp, #8
 8017bae:	4770      	bx	lr
 8017bb0:	4661      	mov	r1, ip
 8017bb2:	4660      	mov	r0, ip
 8017bb4:	f004 fd86 	bl	801c6c4 <vsniprintf>
 8017bb8:	b003      	add	sp, #12
 8017bba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017bbe:	b002      	add	sp, #8
 8017bc0:	4770      	bx	lr
 8017bc2:	f004 feb3 	bl	801c92c <__errno>
 8017bc6:	2216      	movs	r2, #22
 8017bc8:	4603      	mov	r3, r0
 8017bca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017bce:	601a      	str	r2, [r3, #0]
 8017bd0:	e7e9      	b.n	8017ba6 <rcutils_snprintf+0x2e>
 8017bd2:	bf00      	nop

08017bd4 <rcutils_vsnprintf>:
 8017bd4:	b570      	push	{r4, r5, r6, lr}
 8017bd6:	b1b2      	cbz	r2, 8017c06 <rcutils_vsnprintf+0x32>
 8017bd8:	fab0 f480 	clz	r4, r0
 8017bdc:	fab1 f581 	clz	r5, r1
 8017be0:	ea50 0c01 	orrs.w	ip, r0, r1
 8017be4:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8017be8:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8017bec:	d005      	beq.n	8017bfa <rcutils_vsnprintf+0x26>
 8017bee:	b954      	cbnz	r4, 8017c06 <rcutils_vsnprintf+0x32>
 8017bf0:	b94d      	cbnz	r5, 8017c06 <rcutils_vsnprintf+0x32>
 8017bf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017bf6:	f004 bd65 	b.w	801c6c4 <vsniprintf>
 8017bfa:	4661      	mov	r1, ip
 8017bfc:	4660      	mov	r0, ip
 8017bfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c02:	f004 bd5f 	b.w	801c6c4 <vsniprintf>
 8017c06:	f004 fe91 	bl	801c92c <__errno>
 8017c0a:	2316      	movs	r3, #22
 8017c0c:	6003      	str	r3, [r0, #0]
 8017c0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017c12:	bd70      	pop	{r4, r5, r6, pc}

08017c14 <rcutils_strdup>:
 8017c14:	b084      	sub	sp, #16
 8017c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c18:	ac07      	add	r4, sp, #28
 8017c1a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8017c1c:	4605      	mov	r5, r0
 8017c1e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8017c22:	b1d0      	cbz	r0, 8017c5a <rcutils_strdup+0x46>
 8017c24:	460c      	mov	r4, r1
 8017c26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017c2a:	2100      	movs	r1, #0
 8017c2c:	f7e8 fb18 	bl	8000260 <memchr>
 8017c30:	b180      	cbz	r0, 8017c54 <rcutils_strdup+0x40>
 8017c32:	1b46      	subs	r6, r0, r5
 8017c34:	1c70      	adds	r0, r6, #1
 8017c36:	4639      	mov	r1, r7
 8017c38:	47a0      	blx	r4
 8017c3a:	4604      	mov	r4, r0
 8017c3c:	b128      	cbz	r0, 8017c4a <rcutils_strdup+0x36>
 8017c3e:	4632      	mov	r2, r6
 8017c40:	4629      	mov	r1, r5
 8017c42:	f004 fea8 	bl	801c996 <memcpy>
 8017c46:	2300      	movs	r3, #0
 8017c48:	55a3      	strb	r3, [r4, r6]
 8017c4a:	4620      	mov	r0, r4
 8017c4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017c50:	b004      	add	sp, #16
 8017c52:	4770      	bx	lr
 8017c54:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8017c58:	e7ed      	b.n	8017c36 <rcutils_strdup+0x22>
 8017c5a:	4604      	mov	r4, r0
 8017c5c:	e7f5      	b.n	8017c4a <rcutils_strdup+0x36>
 8017c5e:	bf00      	nop

08017c60 <rcutils_strndup>:
 8017c60:	b082      	sub	sp, #8
 8017c62:	b570      	push	{r4, r5, r6, lr}
 8017c64:	ac04      	add	r4, sp, #16
 8017c66:	4606      	mov	r6, r0
 8017c68:	e884 000c 	stmia.w	r4, {r2, r3}
 8017c6c:	b1b8      	cbz	r0, 8017c9e <rcutils_strndup+0x3e>
 8017c6e:	460c      	mov	r4, r1
 8017c70:	460a      	mov	r2, r1
 8017c72:	2100      	movs	r1, #0
 8017c74:	f7e8 faf4 	bl	8000260 <memchr>
 8017c78:	b100      	cbz	r0, 8017c7c <rcutils_strndup+0x1c>
 8017c7a:	1b84      	subs	r4, r0, r6
 8017c7c:	9b04      	ldr	r3, [sp, #16]
 8017c7e:	1c60      	adds	r0, r4, #1
 8017c80:	9908      	ldr	r1, [sp, #32]
 8017c82:	4798      	blx	r3
 8017c84:	4605      	mov	r5, r0
 8017c86:	b128      	cbz	r0, 8017c94 <rcutils_strndup+0x34>
 8017c88:	4622      	mov	r2, r4
 8017c8a:	4631      	mov	r1, r6
 8017c8c:	f004 fe83 	bl	801c996 <memcpy>
 8017c90:	2300      	movs	r3, #0
 8017c92:	552b      	strb	r3, [r5, r4]
 8017c94:	4628      	mov	r0, r5
 8017c96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c9a:	b002      	add	sp, #8
 8017c9c:	4770      	bx	lr
 8017c9e:	4605      	mov	r5, r0
 8017ca0:	e7f8      	b.n	8017c94 <rcutils_strndup+0x34>
 8017ca2:	bf00      	nop

08017ca4 <rcutils_get_zero_initialized_string_map>:
 8017ca4:	2000      	movs	r0, #0
 8017ca6:	4b01      	ldr	r3, [pc, #4]	; (8017cac <rcutils_get_zero_initialized_string_map+0x8>)
 8017ca8:	6018      	str	r0, [r3, #0]
 8017caa:	4770      	bx	lr
 8017cac:	200108d8 	.word	0x200108d8

08017cb0 <rcutils_string_map_reserve>:
 8017cb0:	2800      	cmp	r0, #0
 8017cb2:	d03e      	beq.n	8017d32 <rcutils_string_map_reserve+0x82>
 8017cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cb6:	6805      	ldr	r5, [r0, #0]
 8017cb8:	4606      	mov	r6, r0
 8017cba:	460c      	mov	r4, r1
 8017cbc:	b12d      	cbz	r5, 8017cca <rcutils_string_map_reserve+0x1a>
 8017cbe:	68ab      	ldr	r3, [r5, #8]
 8017cc0:	42a3      	cmp	r3, r4
 8017cc2:	d904      	bls.n	8017cce <rcutils_string_map_reserve+0x1e>
 8017cc4:	461c      	mov	r4, r3
 8017cc6:	2d00      	cmp	r5, #0
 8017cc8:	d1f9      	bne.n	8017cbe <rcutils_string_map_reserve+0xe>
 8017cca:	201f      	movs	r0, #31
 8017ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017cce:	686b      	ldr	r3, [r5, #4]
 8017cd0:	42a3      	cmp	r3, r4
 8017cd2:	d02a      	beq.n	8017d2a <rcutils_string_map_reserve+0x7a>
 8017cd4:	69e9      	ldr	r1, [r5, #28]
 8017cd6:	b304      	cbz	r4, 8017d1a <rcutils_string_map_reserve+0x6a>
 8017cd8:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 8017cdc:	d227      	bcs.n	8017d2e <rcutils_string_map_reserve+0x7e>
 8017cde:	00e7      	lsls	r7, r4, #3
 8017ce0:	460a      	mov	r2, r1
 8017ce2:	696b      	ldr	r3, [r5, #20]
 8017ce4:	6828      	ldr	r0, [r5, #0]
 8017ce6:	4639      	mov	r1, r7
 8017ce8:	4798      	blx	r3
 8017cea:	b300      	cbz	r0, 8017d2e <rcutils_string_map_reserve+0x7e>
 8017cec:	6835      	ldr	r5, [r6, #0]
 8017cee:	686a      	ldr	r2, [r5, #4]
 8017cf0:	6028      	str	r0, [r5, #0]
 8017cf2:	42a2      	cmp	r2, r4
 8017cf4:	d216      	bcs.n	8017d24 <rcutils_string_map_reserve+0x74>
 8017cf6:	43d1      	mvns	r1, r2
 8017cf8:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
 8017cfc:	4421      	add	r1, r4
 8017cfe:	2909      	cmp	r1, #9
 8017d00:	d919      	bls.n	8017d36 <rcutils_string_map_reserve+0x86>
 8017d02:	0759      	lsls	r1, r3, #29
 8017d04:	d117      	bne.n	8017d36 <rcutils_string_map_reserve+0x86>
 8017d06:	1aa1      	subs	r1, r4, r2
 8017d08:	2600      	movs	r6, #0
 8017d0a:	2200      	movs	r2, #0
 8017d0c:	2700      	movs	r7, #0
 8017d0e:	3201      	adds	r2, #1
 8017d10:	4291      	cmp	r1, r2
 8017d12:	e8e3 6702 	strd	r6, r7, [r3], #8
 8017d16:	d8fa      	bhi.n	8017d0e <rcutils_string_map_reserve+0x5e>
 8017d18:	e004      	b.n	8017d24 <rcutils_string_map_reserve+0x74>
 8017d1a:	692b      	ldr	r3, [r5, #16]
 8017d1c:	6828      	ldr	r0, [r5, #0]
 8017d1e:	4798      	blx	r3
 8017d20:	6835      	ldr	r5, [r6, #0]
 8017d22:	602c      	str	r4, [r5, #0]
 8017d24:	2000      	movs	r0, #0
 8017d26:	606c      	str	r4, [r5, #4]
 8017d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d2a:	2000      	movs	r0, #0
 8017d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d2e:	200a      	movs	r0, #10
 8017d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d32:	200b      	movs	r0, #11
 8017d34:	4770      	bx	lr
 8017d36:	4438      	add	r0, r7
 8017d38:	2200      	movs	r2, #0
 8017d3a:	e9c3 2200 	strd	r2, r2, [r3]
 8017d3e:	3308      	adds	r3, #8
 8017d40:	4283      	cmp	r3, r0
 8017d42:	d1fa      	bne.n	8017d3a <rcutils_string_map_reserve+0x8a>
 8017d44:	e7ee      	b.n	8017d24 <rcutils_string_map_reserve+0x74>
 8017d46:	bf00      	nop

08017d48 <rcutils_string_map_init>:
 8017d48:	b082      	sub	sp, #8
 8017d4a:	b570      	push	{r4, r5, r6, lr}
 8017d4c:	ac04      	add	r4, sp, #16
 8017d4e:	e884 000c 	stmia.w	r4, {r2, r3}
 8017d52:	b378      	cbz	r0, 8017db4 <rcutils_string_map_init+0x6c>
 8017d54:	6806      	ldr	r6, [r0, #0]
 8017d56:	4604      	mov	r4, r0
 8017d58:	b12e      	cbz	r6, 8017d66 <rcutils_string_map_init+0x1e>
 8017d5a:	251e      	movs	r5, #30
 8017d5c:	4628      	mov	r0, r5
 8017d5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017d62:	b002      	add	sp, #8
 8017d64:	4770      	bx	lr
 8017d66:	a804      	add	r0, sp, #16
 8017d68:	460d      	mov	r5, r1
 8017d6a:	f7f5 ff6d 	bl	800dc48 <rcutils_allocator_is_valid>
 8017d6e:	b308      	cbz	r0, 8017db4 <rcutils_string_map_init+0x6c>
 8017d70:	9b04      	ldr	r3, [sp, #16]
 8017d72:	2020      	movs	r0, #32
 8017d74:	9908      	ldr	r1, [sp, #32]
 8017d76:	4798      	blx	r3
 8017d78:	6020      	str	r0, [r4, #0]
 8017d7a:	b308      	cbz	r0, 8017dc0 <rcutils_string_map_init+0x78>
 8017d7c:	f10d 0e10 	add.w	lr, sp, #16
 8017d80:	6086      	str	r6, [r0, #8]
 8017d82:	f100 0c0c 	add.w	ip, r0, #12
 8017d86:	e9c0 6600 	strd	r6, r6, [r0]
 8017d8a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017d8e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017d92:	f8de 3000 	ldr.w	r3, [lr]
 8017d96:	4629      	mov	r1, r5
 8017d98:	4620      	mov	r0, r4
 8017d9a:	f8cc 3000 	str.w	r3, [ip]
 8017d9e:	f7ff ff87 	bl	8017cb0 <rcutils_string_map_reserve>
 8017da2:	4605      	mov	r5, r0
 8017da4:	2800      	cmp	r0, #0
 8017da6:	d0d9      	beq.n	8017d5c <rcutils_string_map_init+0x14>
 8017da8:	9b05      	ldr	r3, [sp, #20]
 8017daa:	9908      	ldr	r1, [sp, #32]
 8017dac:	6820      	ldr	r0, [r4, #0]
 8017dae:	4798      	blx	r3
 8017db0:	6026      	str	r6, [r4, #0]
 8017db2:	e7d3      	b.n	8017d5c <rcutils_string_map_init+0x14>
 8017db4:	250b      	movs	r5, #11
 8017db6:	4628      	mov	r0, r5
 8017db8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017dbc:	b002      	add	sp, #8
 8017dbe:	4770      	bx	lr
 8017dc0:	250a      	movs	r5, #10
 8017dc2:	e7cb      	b.n	8017d5c <rcutils_string_map_init+0x14>

08017dc4 <rcutils_string_map_fini>:
 8017dc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017dc8:	b083      	sub	sp, #12
 8017dca:	2800      	cmp	r0, #0
 8017dcc:	d03e      	beq.n	8017e4c <rcutils_string_map_fini+0x88>
 8017dce:	6804      	ldr	r4, [r0, #0]
 8017dd0:	4606      	mov	r6, r0
 8017dd2:	2c00      	cmp	r4, #0
 8017dd4:	d036      	beq.n	8017e44 <rcutils_string_map_fini+0x80>
 8017dd6:	6863      	ldr	r3, [r4, #4]
 8017dd8:	b34b      	cbz	r3, 8017e2e <rcutils_string_map_fini+0x6a>
 8017dda:	2500      	movs	r5, #0
 8017ddc:	6822      	ldr	r2, [r4, #0]
 8017dde:	462f      	mov	r7, r5
 8017de0:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 8017de4:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8017de8:	b1f0      	cbz	r0, 8017e28 <rcutils_string_map_fini+0x64>
 8017dea:	69e1      	ldr	r1, [r4, #28]
 8017dec:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017df0:	9101      	str	r1, [sp, #4]
 8017df2:	47c8      	blx	r9
 8017df4:	6823      	ldr	r3, [r4, #0]
 8017df6:	9901      	ldr	r1, [sp, #4]
 8017df8:	eb03 0208 	add.w	r2, r3, r8
 8017dfc:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
 8017e00:	3501      	adds	r5, #1
 8017e02:	6850      	ldr	r0, [r2, #4]
 8017e04:	47c8      	blx	r9
 8017e06:	68a3      	ldr	r3, [r4, #8]
 8017e08:	6822      	ldr	r2, [r4, #0]
 8017e0a:	3b01      	subs	r3, #1
 8017e0c:	4442      	add	r2, r8
 8017e0e:	6057      	str	r7, [r2, #4]
 8017e10:	60a3      	str	r3, [r4, #8]
 8017e12:	6834      	ldr	r4, [r6, #0]
 8017e14:	6863      	ldr	r3, [r4, #4]
 8017e16:	429d      	cmp	r5, r3
 8017e18:	d209      	bcs.n	8017e2e <rcutils_string_map_fini+0x6a>
 8017e1a:	6822      	ldr	r2, [r4, #0]
 8017e1c:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 8017e20:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
 8017e24:	2800      	cmp	r0, #0
 8017e26:	d1e0      	bne.n	8017dea <rcutils_string_map_fini+0x26>
 8017e28:	3501      	adds	r5, #1
 8017e2a:	429d      	cmp	r5, r3
 8017e2c:	d3d8      	bcc.n	8017de0 <rcutils_string_map_fini+0x1c>
 8017e2e:	2100      	movs	r1, #0
 8017e30:	4630      	mov	r0, r6
 8017e32:	f7ff ff3d 	bl	8017cb0 <rcutils_string_map_reserve>
 8017e36:	4604      	mov	r4, r0
 8017e38:	b920      	cbnz	r0, 8017e44 <rcutils_string_map_fini+0x80>
 8017e3a:	6830      	ldr	r0, [r6, #0]
 8017e3c:	6903      	ldr	r3, [r0, #16]
 8017e3e:	69c1      	ldr	r1, [r0, #28]
 8017e40:	4798      	blx	r3
 8017e42:	6034      	str	r4, [r6, #0]
 8017e44:	4620      	mov	r0, r4
 8017e46:	b003      	add	sp, #12
 8017e48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e4c:	240b      	movs	r4, #11
 8017e4e:	4620      	mov	r0, r4
 8017e50:	b003      	add	sp, #12
 8017e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017e56:	bf00      	nop

08017e58 <rcutils_string_map_getn>:
 8017e58:	b338      	cbz	r0, 8017eaa <rcutils_string_map_getn+0x52>
 8017e5a:	6803      	ldr	r3, [r0, #0]
 8017e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e60:	4688      	mov	r8, r1
 8017e62:	b1d9      	cbz	r1, 8017e9c <rcutils_string_map_getn+0x44>
 8017e64:	fab3 f483 	clz	r4, r3
 8017e68:	0964      	lsrs	r4, r4, #5
 8017e6a:	b1bb      	cbz	r3, 8017e9c <rcutils_string_map_getn+0x44>
 8017e6c:	4691      	mov	r9, r2
 8017e6e:	e9d3 7600 	ldrd	r7, r6, [r3]
 8017e72:	b19e      	cbz	r6, 8017e9c <rcutils_string_map_getn+0x44>
 8017e74:	f857 5034 	ldr.w	r5, [r7, r4, lsl #3]
 8017e78:	eb07 0ac4 	add.w	sl, r7, r4, lsl #3
 8017e7c:	3401      	adds	r4, #1
 8017e7e:	4628      	mov	r0, r5
 8017e80:	b155      	cbz	r5, 8017e98 <rcutils_string_map_getn+0x40>
 8017e82:	f7e8 fa3d 	bl	8000300 <strlen>
 8017e86:	4602      	mov	r2, r0
 8017e88:	4629      	mov	r1, r5
 8017e8a:	4640      	mov	r0, r8
 8017e8c:	454a      	cmp	r2, r9
 8017e8e:	bf38      	it	cc
 8017e90:	464a      	movcc	r2, r9
 8017e92:	f004 fc64 	bl	801c75e <strncmp>
 8017e96:	b120      	cbz	r0, 8017ea2 <rcutils_string_map_getn+0x4a>
 8017e98:	42a6      	cmp	r6, r4
 8017e9a:	d1eb      	bne.n	8017e74 <rcutils_string_map_getn+0x1c>
 8017e9c:	2000      	movs	r0, #0
 8017e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ea2:	f8da 0004 	ldr.w	r0, [sl, #4]
 8017ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017eaa:	4770      	bx	lr
 8017eac:	0000      	movs	r0, r0
	...

08017eb0 <rmw_get_zero_initialized_context>:
 8017eb0:	b510      	push	{r4, lr}
 8017eb2:	4604      	mov	r4, r0
 8017eb4:	3010      	adds	r0, #16
 8017eb6:	f000 f80f 	bl	8017ed8 <rmw_get_zero_initialized_init_options>
 8017eba:	2300      	movs	r3, #0
 8017ebc:	4620      	mov	r0, r4
 8017ebe:	60a3      	str	r3, [r4, #8]
 8017ec0:	66a3      	str	r3, [r4, #104]	; 0x68
 8017ec2:	66e3      	str	r3, [r4, #108]	; 0x6c
 8017ec4:	ed9f 7b02 	vldr	d7, [pc, #8]	; 8017ed0 <rmw_get_zero_initialized_context+0x20>
 8017ec8:	ed84 7b00 	vstr	d7, [r4]
 8017ecc:	bd10      	pop	{r4, pc}
 8017ece:	bf00      	nop
	...

08017ed8 <rmw_get_zero_initialized_init_options>:
 8017ed8:	b510      	push	{r4, lr}
 8017eda:	4604      	mov	r4, r0
 8017edc:	2258      	movs	r2, #88	; 0x58
 8017ede:	2100      	movs	r1, #0
 8017ee0:	f004 fc28 	bl	801c734 <memset>
 8017ee4:	f104 0010 	add.w	r0, r4, #16
 8017ee8:	f000 f80a 	bl	8017f00 <rmw_get_default_security_options>
 8017eec:	f104 001c 	add.w	r0, r4, #28
 8017ef0:	f003 fe50 	bl	801bb94 <rmw_get_zero_initialized_discovery_options>
 8017ef4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017ef8:	4620      	mov	r0, r4
 8017efa:	60e3      	str	r3, [r4, #12]
 8017efc:	bd10      	pop	{r4, pc}
 8017efe:	bf00      	nop

08017f00 <rmw_get_default_security_options>:
 8017f00:	2200      	movs	r2, #0
 8017f02:	7002      	strb	r2, [r0, #0]
 8017f04:	6042      	str	r2, [r0, #4]
 8017f06:	4770      	bx	lr

08017f08 <rmw_subscription_content_filter_options_fini>:
 8017f08:	b1b0      	cbz	r0, 8017f38 <rmw_subscription_content_filter_options_fini+0x30>
 8017f0a:	b538      	push	{r3, r4, r5, lr}
 8017f0c:	4604      	mov	r4, r0
 8017f0e:	4608      	mov	r0, r1
 8017f10:	460d      	mov	r5, r1
 8017f12:	f7f5 fe99 	bl	800dc48 <rcutils_allocator_is_valid>
 8017f16:	b168      	cbz	r0, 8017f34 <rmw_subscription_content_filter_options_fini+0x2c>
 8017f18:	6820      	ldr	r0, [r4, #0]
 8017f1a:	b120      	cbz	r0, 8017f26 <rmw_subscription_content_filter_options_fini+0x1e>
 8017f1c:	686b      	ldr	r3, [r5, #4]
 8017f1e:	6929      	ldr	r1, [r5, #16]
 8017f20:	4798      	blx	r3
 8017f22:	2300      	movs	r3, #0
 8017f24:	6023      	str	r3, [r4, #0]
 8017f26:	1d20      	adds	r0, r4, #4
 8017f28:	f003 fe0a 	bl	801bb40 <rcutils_string_array_fini>
 8017f2c:	3800      	subs	r0, #0
 8017f2e:	bf18      	it	ne
 8017f30:	2001      	movne	r0, #1
 8017f32:	bd38      	pop	{r3, r4, r5, pc}
 8017f34:	200b      	movs	r0, #11
 8017f36:	bd38      	pop	{r3, r4, r5, pc}
 8017f38:	200b      	movs	r0, #11
 8017f3a:	4770      	bx	lr

08017f3c <rmw_get_default_subscription_options>:
 8017f3c:	2200      	movs	r2, #0
 8017f3e:	e9c0 2200 	strd	r2, r2, [r0]
 8017f42:	6082      	str	r2, [r0, #8]
 8017f44:	4770      	bx	lr
 8017f46:	bf00      	nop

08017f48 <rmw_time_equal>:
 8017f48:	b4f0      	push	{r4, r5, r6, r7}
 8017f4a:	b084      	sub	sp, #16
 8017f4c:	ac04      	add	r4, sp, #16
 8017f4e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8017f52:	4603      	mov	r3, r0
 8017f54:	4925      	ldr	r1, [pc, #148]	; (8017fec <rmw_time_equal+0xa4>)
 8017f56:	9d01      	ldr	r5, [sp, #4]
 8017f58:	4610      	mov	r0, r2
 8017f5a:	4299      	cmp	r1, r3
 8017f5c:	f04f 0202 	mov.w	r2, #2
 8017f60:	9e03      	ldr	r6, [sp, #12]
 8017f62:	41aa      	sbcs	r2, r5
 8017f64:	d330      	bcc.n	8017fc8 <rmw_time_equal+0x80>
 8017f66:	4c22      	ldr	r4, [pc, #136]	; (8017ff0 <rmw_time_equal+0xa8>)
 8017f68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017f6c:	fba3 3204 	umull	r3, r2, r3, r4
 8017f70:	fb04 2205 	mla	r2, r4, r5, r2
 8017f74:	43dd      	mvns	r5, r3
 8017f76:	1a8c      	subs	r4, r1, r2
 8017f78:	4285      	cmp	r5, r0
 8017f7a:	41b4      	sbcs	r4, r6
 8017f7c:	d332      	bcc.n	8017fe4 <rmw_time_equal+0x9c>
 8017f7e:	eb10 0c03 	adds.w	ip, r0, r3
 8017f82:	eb42 0106 	adc.w	r1, r2, r6
 8017f86:	4819      	ldr	r0, [pc, #100]	; (8017fec <rmw_time_equal+0xa4>)
 8017f88:	2202      	movs	r2, #2
 8017f8a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8017f8c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8017f8e:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8017f92:	4298      	cmp	r0, r3
 8017f94:	41b2      	sbcs	r2, r6
 8017f96:	d31c      	bcc.n	8017fd2 <rmw_time_equal+0x8a>
 8017f98:	4c15      	ldr	r4, [pc, #84]	; (8017ff0 <rmw_time_equal+0xa8>)
 8017f9a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8017f9e:	fba3 3204 	umull	r3, r2, r3, r4
 8017fa2:	fb04 2206 	mla	r2, r4, r6, r2
 8017fa6:	43de      	mvns	r6, r3
 8017fa8:	1a84      	subs	r4, r0, r2
 8017faa:	42ae      	cmp	r6, r5
 8017fac:	41bc      	sbcs	r4, r7
 8017fae:	d315      	bcc.n	8017fdc <rmw_time_equal+0x94>
 8017fb0:	195b      	adds	r3, r3, r5
 8017fb2:	eb42 0207 	adc.w	r2, r2, r7
 8017fb6:	428a      	cmp	r2, r1
 8017fb8:	bf08      	it	eq
 8017fba:	4563      	cmpeq	r3, ip
 8017fbc:	bf0c      	ite	eq
 8017fbe:	2001      	moveq	r0, #1
 8017fc0:	2000      	movne	r0, #0
 8017fc2:	b004      	add	sp, #16
 8017fc4:	bcf0      	pop	{r4, r5, r6, r7}
 8017fc6:	4770      	bx	lr
 8017fc8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8017fcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017fd0:	e7d9      	b.n	8017f86 <rmw_time_equal+0x3e>
 8017fd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017fd6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8017fda:	e7ec      	b.n	8017fb6 <rmw_time_equal+0x6e>
 8017fdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017fe0:	4602      	mov	r2, r0
 8017fe2:	e7e8      	b.n	8017fb6 <rmw_time_equal+0x6e>
 8017fe4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8017fe8:	e7cd      	b.n	8017f86 <rmw_time_equal+0x3e>
 8017fea:	bf00      	nop
 8017fec:	25c17d04 	.word	0x25c17d04
 8017ff0:	3b9aca00 	.word	0x3b9aca00

08017ff4 <rmw_time_total_nsec>:
 8017ff4:	b470      	push	{r4, r5, r6}
 8017ff6:	b085      	sub	sp, #20
 8017ff8:	ac04      	add	r4, sp, #16
 8017ffa:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8017ffe:	4603      	mov	r3, r0
 8018000:	4913      	ldr	r1, [pc, #76]	; (8018050 <rmw_time_total_nsec+0x5c>)
 8018002:	9d01      	ldr	r5, [sp, #4]
 8018004:	4610      	mov	r0, r2
 8018006:	4299      	cmp	r1, r3
 8018008:	f04f 0202 	mov.w	r2, #2
 801800c:	9e03      	ldr	r6, [sp, #12]
 801800e:	41aa      	sbcs	r2, r5
 8018010:	d311      	bcc.n	8018036 <rmw_time_total_nsec+0x42>
 8018012:	4c10      	ldr	r4, [pc, #64]	; (8018054 <rmw_time_total_nsec+0x60>)
 8018014:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018018:	fba3 3204 	umull	r3, r2, r3, r4
 801801c:	fb04 2205 	mla	r2, r4, r5, r2
 8018020:	43dd      	mvns	r5, r3
 8018022:	1a8c      	subs	r4, r1, r2
 8018024:	4285      	cmp	r5, r0
 8018026:	41b4      	sbcs	r4, r6
 8018028:	d30c      	bcc.n	8018044 <rmw_time_total_nsec+0x50>
 801802a:	1818      	adds	r0, r3, r0
 801802c:	eb42 0106 	adc.w	r1, r2, r6
 8018030:	b005      	add	sp, #20
 8018032:	bc70      	pop	{r4, r5, r6}
 8018034:	4770      	bx	lr
 8018036:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801803a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801803e:	b005      	add	sp, #20
 8018040:	bc70      	pop	{r4, r5, r6}
 8018042:	4770      	bx	lr
 8018044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018048:	b005      	add	sp, #20
 801804a:	bc70      	pop	{r4, r5, r6}
 801804c:	4770      	bx	lr
 801804e:	bf00      	nop
 8018050:	25c17d04 	.word	0x25c17d04
 8018054:	3b9aca00 	.word	0x3b9aca00

08018058 <rmw_get_zero_initialized_message_info>:
 8018058:	b510      	push	{r4, lr}
 801805a:	4604      	mov	r4, r0
 801805c:	2238      	movs	r2, #56	; 0x38
 801805e:	2100      	movs	r1, #0
 8018060:	f004 fb68 	bl	801c734 <memset>
 8018064:	4620      	mov	r0, r4
 8018066:	bd10      	pop	{r4, pc}

08018068 <rmw_validate_full_topic_name>:
 8018068:	2800      	cmp	r0, #0
 801806a:	d05d      	beq.n	8018128 <rmw_validate_full_topic_name+0xc0>
 801806c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018070:	460d      	mov	r5, r1
 8018072:	2900      	cmp	r1, #0
 8018074:	d05a      	beq.n	801812c <rmw_validate_full_topic_name+0xc4>
 8018076:	4604      	mov	r4, r0
 8018078:	4616      	mov	r6, r2
 801807a:	f7e8 f941 	bl	8000300 <strlen>
 801807e:	b150      	cbz	r0, 8018096 <rmw_validate_full_topic_name+0x2e>
 8018080:	7823      	ldrb	r3, [r4, #0]
 8018082:	2b2f      	cmp	r3, #47	; 0x2f
 8018084:	d00e      	beq.n	80180a4 <rmw_validate_full_topic_name+0x3c>
 8018086:	2302      	movs	r3, #2
 8018088:	602b      	str	r3, [r5, #0]
 801808a:	b146      	cbz	r6, 801809e <rmw_validate_full_topic_name+0x36>
 801808c:	2300      	movs	r3, #0
 801808e:	4618      	mov	r0, r3
 8018090:	6033      	str	r3, [r6, #0]
 8018092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018096:	2301      	movs	r3, #1
 8018098:	602b      	str	r3, [r5, #0]
 801809a:	2e00      	cmp	r6, #0
 801809c:	d1f6      	bne.n	801808c <rmw_validate_full_topic_name+0x24>
 801809e:	2000      	movs	r0, #0
 80180a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180a4:	1e43      	subs	r3, r0, #1
 80180a6:	5ce2      	ldrb	r2, [r4, r3]
 80180a8:	2a2f      	cmp	r2, #47	; 0x2f
 80180aa:	d041      	beq.n	8018130 <rmw_validate_full_topic_name+0xc8>
 80180ac:	1e62      	subs	r2, r4, #1
 80180ae:	f1c4 0e01 	rsb	lr, r4, #1
 80180b2:	eb02 0800 	add.w	r8, r2, r0
 80180b6:	eb0e 0702 	add.w	r7, lr, r2
 80180ba:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80180be:	f023 0120 	bic.w	r1, r3, #32
 80180c2:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 80180c6:	3941      	subs	r1, #65	; 0x41
 80180c8:	2919      	cmp	r1, #25
 80180ca:	d90f      	bls.n	80180ec <rmw_validate_full_topic_name+0x84>
 80180cc:	f1bc 0f0a 	cmp.w	ip, #10
 80180d0:	d90c      	bls.n	80180ec <rmw_validate_full_topic_name+0x84>
 80180d2:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 80180d6:	fab3 f383 	clz	r3, r3
 80180da:	095b      	lsrs	r3, r3, #5
 80180dc:	b933      	cbnz	r3, 80180ec <rmw_validate_full_topic_name+0x84>
 80180de:	2204      	movs	r2, #4
 80180e0:	602a      	str	r2, [r5, #0]
 80180e2:	2e00      	cmp	r6, #0
 80180e4:	d0db      	beq.n	801809e <rmw_validate_full_topic_name+0x36>
 80180e6:	4618      	mov	r0, r3
 80180e8:	6037      	str	r7, [r6, #0]
 80180ea:	e7d2      	b.n	8018092 <rmw_validate_full_topic_name+0x2a>
 80180ec:	4542      	cmp	r2, r8
 80180ee:	d1e2      	bne.n	80180b6 <rmw_validate_full_topic_name+0x4e>
 80180f0:	2301      	movs	r3, #1
 80180f2:	4f1a      	ldr	r7, [pc, #104]	; (801815c <rmw_validate_full_topic_name+0xf4>)
 80180f4:	e004      	b.n	8018100 <rmw_validate_full_topic_name+0x98>
 80180f6:	4298      	cmp	r0, r3
 80180f8:	f104 0401 	add.w	r4, r4, #1
 80180fc:	4613      	mov	r3, r2
 80180fe:	d91c      	bls.n	801813a <rmw_validate_full_topic_name+0xd2>
 8018100:	4298      	cmp	r0, r3
 8018102:	f103 0201 	add.w	r2, r3, #1
 8018106:	d0f6      	beq.n	80180f6 <rmw_validate_full_topic_name+0x8e>
 8018108:	7821      	ldrb	r1, [r4, #0]
 801810a:	292f      	cmp	r1, #47	; 0x2f
 801810c:	d1f3      	bne.n	80180f6 <rmw_validate_full_topic_name+0x8e>
 801810e:	7861      	ldrb	r1, [r4, #1]
 8018110:	292f      	cmp	r1, #47	; 0x2f
 8018112:	d01e      	beq.n	8018152 <rmw_validate_full_topic_name+0xea>
 8018114:	5dc9      	ldrb	r1, [r1, r7]
 8018116:	0749      	lsls	r1, r1, #29
 8018118:	d5ed      	bpl.n	80180f6 <rmw_validate_full_topic_name+0x8e>
 801811a:	2206      	movs	r2, #6
 801811c:	602a      	str	r2, [r5, #0]
 801811e:	2e00      	cmp	r6, #0
 8018120:	d0bd      	beq.n	801809e <rmw_validate_full_topic_name+0x36>
 8018122:	2000      	movs	r0, #0
 8018124:	6033      	str	r3, [r6, #0]
 8018126:	e7b4      	b.n	8018092 <rmw_validate_full_topic_name+0x2a>
 8018128:	200b      	movs	r0, #11
 801812a:	4770      	bx	lr
 801812c:	200b      	movs	r0, #11
 801812e:	e7b0      	b.n	8018092 <rmw_validate_full_topic_name+0x2a>
 8018130:	2203      	movs	r2, #3
 8018132:	602a      	str	r2, [r5, #0]
 8018134:	2e00      	cmp	r6, #0
 8018136:	d1f4      	bne.n	8018122 <rmw_validate_full_topic_name+0xba>
 8018138:	e7b1      	b.n	801809e <rmw_validate_full_topic_name+0x36>
 801813a:	28f7      	cmp	r0, #247	; 0xf7
 801813c:	d803      	bhi.n	8018146 <rmw_validate_full_topic_name+0xde>
 801813e:	2300      	movs	r3, #0
 8018140:	4618      	mov	r0, r3
 8018142:	602b      	str	r3, [r5, #0]
 8018144:	e7a5      	b.n	8018092 <rmw_validate_full_topic_name+0x2a>
 8018146:	2307      	movs	r3, #7
 8018148:	602b      	str	r3, [r5, #0]
 801814a:	2e00      	cmp	r6, #0
 801814c:	d0a7      	beq.n	801809e <rmw_validate_full_topic_name+0x36>
 801814e:	23f6      	movs	r3, #246	; 0xf6
 8018150:	e7e7      	b.n	8018122 <rmw_validate_full_topic_name+0xba>
 8018152:	2205      	movs	r2, #5
 8018154:	602a      	str	r2, [r5, #0]
 8018156:	2e00      	cmp	r6, #0
 8018158:	d1e3      	bne.n	8018122 <rmw_validate_full_topic_name+0xba>
 801815a:	e7a0      	b.n	801809e <rmw_validate_full_topic_name+0x36>
 801815c:	0801f630 	.word	0x0801f630

08018160 <rmw_validate_namespace_with_size>:
 8018160:	2800      	cmp	r0, #0
 8018162:	d043      	beq.n	80181ec <rmw_validate_namespace_with_size+0x8c>
 8018164:	b570      	push	{r4, r5, r6, lr}
 8018166:	4614      	mov	r4, r2
 8018168:	b0c2      	sub	sp, #264	; 0x108
 801816a:	b32a      	cbz	r2, 80181b8 <rmw_validate_namespace_with_size+0x58>
 801816c:	2901      	cmp	r1, #1
 801816e:	460d      	mov	r5, r1
 8018170:	461e      	mov	r6, r3
 8018172:	d102      	bne.n	801817a <rmw_validate_namespace_with_size+0x1a>
 8018174:	7803      	ldrb	r3, [r0, #0]
 8018176:	2b2f      	cmp	r3, #47	; 0x2f
 8018178:	d012      	beq.n	80181a0 <rmw_validate_namespace_with_size+0x40>
 801817a:	aa01      	add	r2, sp, #4
 801817c:	4669      	mov	r1, sp
 801817e:	f7ff ff73 	bl	8018068 <rmw_validate_full_topic_name>
 8018182:	b980      	cbnz	r0, 80181a6 <rmw_validate_namespace_with_size+0x46>
 8018184:	9a00      	ldr	r2, [sp, #0]
 8018186:	b14a      	cbz	r2, 801819c <rmw_validate_namespace_with_size+0x3c>
 8018188:	2a07      	cmp	r2, #7
 801818a:	d007      	beq.n	801819c <rmw_validate_namespace_with_size+0x3c>
 801818c:	1e53      	subs	r3, r2, #1
 801818e:	2b05      	cmp	r3, #5
 8018190:	d82e      	bhi.n	80181f0 <rmw_validate_namespace_with_size+0x90>
 8018192:	e8df f003 	tbb	[pc, r3]
 8018196:	1f1c      	.short	0x1f1c
 8018198:	14282522 	.word	0x14282522
 801819c:	2df5      	cmp	r5, #245	; 0xf5
 801819e:	d804      	bhi.n	80181aa <rmw_validate_namespace_with_size+0x4a>
 80181a0:	2300      	movs	r3, #0
 80181a2:	4618      	mov	r0, r3
 80181a4:	6023      	str	r3, [r4, #0]
 80181a6:	b042      	add	sp, #264	; 0x108
 80181a8:	bd70      	pop	{r4, r5, r6, pc}
 80181aa:	2307      	movs	r3, #7
 80181ac:	6023      	str	r3, [r4, #0]
 80181ae:	2e00      	cmp	r6, #0
 80181b0:	d0f9      	beq.n	80181a6 <rmw_validate_namespace_with_size+0x46>
 80181b2:	23f4      	movs	r3, #244	; 0xf4
 80181b4:	6033      	str	r3, [r6, #0]
 80181b6:	e7f6      	b.n	80181a6 <rmw_validate_namespace_with_size+0x46>
 80181b8:	200b      	movs	r0, #11
 80181ba:	b042      	add	sp, #264	; 0x108
 80181bc:	bd70      	pop	{r4, r5, r6, pc}
 80181be:	2306      	movs	r3, #6
 80181c0:	6023      	str	r3, [r4, #0]
 80181c2:	2e00      	cmp	r6, #0
 80181c4:	d0ef      	beq.n	80181a6 <rmw_validate_namespace_with_size+0x46>
 80181c6:	9b01      	ldr	r3, [sp, #4]
 80181c8:	6033      	str	r3, [r6, #0]
 80181ca:	b042      	add	sp, #264	; 0x108
 80181cc:	bd70      	pop	{r4, r5, r6, pc}
 80181ce:	2301      	movs	r3, #1
 80181d0:	6023      	str	r3, [r4, #0]
 80181d2:	e7f6      	b.n	80181c2 <rmw_validate_namespace_with_size+0x62>
 80181d4:	2302      	movs	r3, #2
 80181d6:	6023      	str	r3, [r4, #0]
 80181d8:	e7f3      	b.n	80181c2 <rmw_validate_namespace_with_size+0x62>
 80181da:	2303      	movs	r3, #3
 80181dc:	6023      	str	r3, [r4, #0]
 80181de:	e7f0      	b.n	80181c2 <rmw_validate_namespace_with_size+0x62>
 80181e0:	2304      	movs	r3, #4
 80181e2:	6023      	str	r3, [r4, #0]
 80181e4:	e7ed      	b.n	80181c2 <rmw_validate_namespace_with_size+0x62>
 80181e6:	2305      	movs	r3, #5
 80181e8:	6023      	str	r3, [r4, #0]
 80181ea:	e7ea      	b.n	80181c2 <rmw_validate_namespace_with_size+0x62>
 80181ec:	200b      	movs	r0, #11
 80181ee:	4770      	bx	lr
 80181f0:	4613      	mov	r3, r2
 80181f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80181f6:	4a03      	ldr	r2, [pc, #12]	; (8018204 <rmw_validate_namespace_with_size+0xa4>)
 80181f8:	a802      	add	r0, sp, #8
 80181fa:	f7ff fcbd 	bl	8017b78 <rcutils_snprintf>
 80181fe:	2001      	movs	r0, #1
 8018200:	e7d1      	b.n	80181a6 <rmw_validate_namespace_with_size+0x46>
 8018202:	bf00      	nop
 8018204:	0801ed20 	.word	0x0801ed20

08018208 <rmw_validate_namespace>:
 8018208:	b168      	cbz	r0, 8018226 <rmw_validate_namespace+0x1e>
 801820a:	b570      	push	{r4, r5, r6, lr}
 801820c:	460d      	mov	r5, r1
 801820e:	4616      	mov	r6, r2
 8018210:	4604      	mov	r4, r0
 8018212:	f7e8 f875 	bl	8000300 <strlen>
 8018216:	4633      	mov	r3, r6
 8018218:	4601      	mov	r1, r0
 801821a:	462a      	mov	r2, r5
 801821c:	4620      	mov	r0, r4
 801821e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018222:	f7ff bf9d 	b.w	8018160 <rmw_validate_namespace_with_size>
 8018226:	200b      	movs	r0, #11
 8018228:	4770      	bx	lr
 801822a:	bf00      	nop

0801822c <rmw_namespace_validation_result_string>:
 801822c:	2807      	cmp	r0, #7
 801822e:	d803      	bhi.n	8018238 <rmw_namespace_validation_result_string+0xc>
 8018230:	4b02      	ldr	r3, [pc, #8]	; (801823c <rmw_namespace_validation_result_string+0x10>)
 8018232:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8018236:	4770      	bx	lr
 8018238:	4801      	ldr	r0, [pc, #4]	; (8018240 <rmw_namespace_validation_result_string+0x14>)
 801823a:	4770      	bx	lr
 801823c:	0801ef18 	.word	0x0801ef18
 8018240:	0801ed70 	.word	0x0801ed70

08018244 <rmw_validate_node_name>:
 8018244:	2800      	cmp	r0, #0
 8018246:	d042      	beq.n	80182ce <rmw_validate_node_name+0x8a>
 8018248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801824c:	460d      	mov	r5, r1
 801824e:	2900      	cmp	r1, #0
 8018250:	d03f      	beq.n	80182d2 <rmw_validate_node_name+0x8e>
 8018252:	4604      	mov	r4, r0
 8018254:	4616      	mov	r6, r2
 8018256:	f7e8 f853 	bl	8000300 <strlen>
 801825a:	b310      	cbz	r0, 80182a2 <rmw_validate_node_name+0x5e>
 801825c:	1e63      	subs	r3, r4, #1
 801825e:	f1c4 0101 	rsb	r1, r4, #1
 8018262:	eb03 0800 	add.w	r8, r3, r0
 8018266:	18cf      	adds	r7, r1, r3
 8018268:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801826c:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8018270:	f02e 0c20 	bic.w	ip, lr, #32
 8018274:	2a09      	cmp	r2, #9
 8018276:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 801827a:	d905      	bls.n	8018288 <rmw_validate_node_name+0x44>
 801827c:	f1bc 0f19 	cmp.w	ip, #25
 8018280:	d902      	bls.n	8018288 <rmw_validate_node_name+0x44>
 8018282:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8018286:	d114      	bne.n	80182b2 <rmw_validate_node_name+0x6e>
 8018288:	4598      	cmp	r8, r3
 801828a:	d1ec      	bne.n	8018266 <rmw_validate_node_name+0x22>
 801828c:	7822      	ldrb	r2, [r4, #0]
 801828e:	4b16      	ldr	r3, [pc, #88]	; (80182e8 <rmw_validate_node_name+0xa4>)
 8018290:	5cd3      	ldrb	r3, [r2, r3]
 8018292:	f013 0304 	ands.w	r3, r3, #4
 8018296:	d113      	bne.n	80182c0 <rmw_validate_node_name+0x7c>
 8018298:	28ff      	cmp	r0, #255	; 0xff
 801829a:	d81c      	bhi.n	80182d6 <rmw_validate_node_name+0x92>
 801829c:	4618      	mov	r0, r3
 801829e:	602b      	str	r3, [r5, #0]
 80182a0:	e00c      	b.n	80182bc <rmw_validate_node_name+0x78>
 80182a2:	2301      	movs	r3, #1
 80182a4:	602b      	str	r3, [r5, #0]
 80182a6:	b17e      	cbz	r6, 80182c8 <rmw_validate_node_name+0x84>
 80182a8:	2300      	movs	r3, #0
 80182aa:	4618      	mov	r0, r3
 80182ac:	6033      	str	r3, [r6, #0]
 80182ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182b2:	2302      	movs	r3, #2
 80182b4:	602b      	str	r3, [r5, #0]
 80182b6:	b13e      	cbz	r6, 80182c8 <rmw_validate_node_name+0x84>
 80182b8:	2000      	movs	r0, #0
 80182ba:	6037      	str	r7, [r6, #0]
 80182bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182c0:	2303      	movs	r3, #3
 80182c2:	602b      	str	r3, [r5, #0]
 80182c4:	2e00      	cmp	r6, #0
 80182c6:	d1ef      	bne.n	80182a8 <rmw_validate_node_name+0x64>
 80182c8:	2000      	movs	r0, #0
 80182ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182ce:	200b      	movs	r0, #11
 80182d0:	4770      	bx	lr
 80182d2:	200b      	movs	r0, #11
 80182d4:	e7f2      	b.n	80182bc <rmw_validate_node_name+0x78>
 80182d6:	2204      	movs	r2, #4
 80182d8:	602a      	str	r2, [r5, #0]
 80182da:	2e00      	cmp	r6, #0
 80182dc:	d0f4      	beq.n	80182c8 <rmw_validate_node_name+0x84>
 80182de:	22fe      	movs	r2, #254	; 0xfe
 80182e0:	4618      	mov	r0, r3
 80182e2:	6032      	str	r2, [r6, #0]
 80182e4:	e7ea      	b.n	80182bc <rmw_validate_node_name+0x78>
 80182e6:	bf00      	nop
 80182e8:	0801f630 	.word	0x0801f630

080182ec <rmw_node_name_validation_result_string>:
 80182ec:	2804      	cmp	r0, #4
 80182ee:	d803      	bhi.n	80182f8 <rmw_node_name_validation_result_string+0xc>
 80182f0:	4b02      	ldr	r3, [pc, #8]	; (80182fc <rmw_node_name_validation_result_string+0x10>)
 80182f2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80182f6:	4770      	bx	lr
 80182f8:	4801      	ldr	r0, [pc, #4]	; (8018300 <rmw_node_name_validation_result_string+0x14>)
 80182fa:	4770      	bx	lr
 80182fc:	0801f024 	.word	0x0801f024
 8018300:	0801ef38 	.word	0x0801ef38

08018304 <get_memory>:
 8018304:	4603      	mov	r3, r0
 8018306:	6840      	ldr	r0, [r0, #4]
 8018308:	b158      	cbz	r0, 8018322 <get_memory+0x1e>
 801830a:	6842      	ldr	r2, [r0, #4]
 801830c:	605a      	str	r2, [r3, #4]
 801830e:	b10a      	cbz	r2, 8018314 <get_memory+0x10>
 8018310:	2100      	movs	r1, #0
 8018312:	6011      	str	r1, [r2, #0]
 8018314:	681a      	ldr	r2, [r3, #0]
 8018316:	6042      	str	r2, [r0, #4]
 8018318:	b102      	cbz	r2, 801831c <get_memory+0x18>
 801831a:	6010      	str	r0, [r2, #0]
 801831c:	2200      	movs	r2, #0
 801831e:	6002      	str	r2, [r0, #0]
 8018320:	6018      	str	r0, [r3, #0]
 8018322:	4770      	bx	lr

08018324 <put_memory>:
 8018324:	680b      	ldr	r3, [r1, #0]
 8018326:	b10b      	cbz	r3, 801832c <put_memory+0x8>
 8018328:	684a      	ldr	r2, [r1, #4]
 801832a:	605a      	str	r2, [r3, #4]
 801832c:	684a      	ldr	r2, [r1, #4]
 801832e:	b102      	cbz	r2, 8018332 <put_memory+0xe>
 8018330:	6013      	str	r3, [r2, #0]
 8018332:	6803      	ldr	r3, [r0, #0]
 8018334:	428b      	cmp	r3, r1
 8018336:	6843      	ldr	r3, [r0, #4]
 8018338:	bf08      	it	eq
 801833a:	6002      	streq	r2, [r0, #0]
 801833c:	604b      	str	r3, [r1, #4]
 801833e:	b103      	cbz	r3, 8018342 <put_memory+0x1e>
 8018340:	6019      	str	r1, [r3, #0]
 8018342:	2300      	movs	r3, #0
 8018344:	600b      	str	r3, [r1, #0]
 8018346:	6041      	str	r1, [r0, #4]
 8018348:	4770      	bx	lr
 801834a:	bf00      	nop

0801834c <rmw_destroy_client>:
 801834c:	b570      	push	{r4, r5, r6, lr}
 801834e:	b128      	cbz	r0, 801835c <rmw_destroy_client+0x10>
 8018350:	4604      	mov	r4, r0
 8018352:	6800      	ldr	r0, [r0, #0]
 8018354:	460d      	mov	r5, r1
 8018356:	f7f6 fac7 	bl	800e8e8 <is_uxrce_rmw_identifier_valid>
 801835a:	b910      	cbnz	r0, 8018362 <rmw_destroy_client+0x16>
 801835c:	2401      	movs	r4, #1
 801835e:	4620      	mov	r0, r4
 8018360:	bd70      	pop	{r4, r5, r6, pc}
 8018362:	6863      	ldr	r3, [r4, #4]
 8018364:	2b00      	cmp	r3, #0
 8018366:	d0f9      	beq.n	801835c <rmw_destroy_client+0x10>
 8018368:	2d00      	cmp	r5, #0
 801836a:	d0f7      	beq.n	801835c <rmw_destroy_client+0x10>
 801836c:	6828      	ldr	r0, [r5, #0]
 801836e:	f7f6 fabb 	bl	800e8e8 <is_uxrce_rmw_identifier_valid>
 8018372:	2800      	cmp	r0, #0
 8018374:	d0f2      	beq.n	801835c <rmw_destroy_client+0x10>
 8018376:	686e      	ldr	r6, [r5, #4]
 8018378:	2e00      	cmp	r6, #0
 801837a:	d0ef      	beq.n	801835c <rmw_destroy_client+0x10>
 801837c:	6864      	ldr	r4, [r4, #4]
 801837e:	6932      	ldr	r2, [r6, #16]
 8018380:	6920      	ldr	r0, [r4, #16]
 8018382:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8018386:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801838a:	6819      	ldr	r1, [r3, #0]
 801838c:	f002 f94e 	bl	801a62c <uxr_buffer_cancel_data>
 8018390:	4602      	mov	r2, r0
 8018392:	6920      	ldr	r0, [r4, #16]
 8018394:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8018398:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801839c:	f7f6 f992 	bl	800e6c4 <run_xrce_session>
 80183a0:	6920      	ldr	r0, [r4, #16]
 80183a2:	6932      	ldr	r2, [r6, #16]
 80183a4:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80183a8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80183ac:	6819      	ldr	r1, [r3, #0]
 80183ae:	f7f8 fa61 	bl	8010874 <uxr_buffer_delete_entity>
 80183b2:	4602      	mov	r2, r0
 80183b4:	6920      	ldr	r0, [r4, #16]
 80183b6:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80183ba:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80183be:	f7f6 f981 	bl	800e6c4 <run_xrce_session>
 80183c2:	4603      	mov	r3, r0
 80183c4:	4628      	mov	r0, r5
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	bf14      	ite	ne
 80183ca:	2400      	movne	r4, #0
 80183cc:	2402      	moveq	r4, #2
 80183ce:	f7f6 f855 	bl	800e47c <rmw_uxrce_fini_client_memory>
 80183d2:	e7c4      	b.n	801835e <rmw_destroy_client+0x12>

080183d4 <rmw_get_gid_for_client>:
 80183d4:	b1b9      	cbz	r1, 8018406 <rmw_get_gid_for_client+0x32>
 80183d6:	b538      	push	{r3, r4, r5, lr}
 80183d8:	4605      	mov	r5, r0
 80183da:	b180      	cbz	r0, 80183fe <rmw_get_gid_for_client+0x2a>
 80183dc:	6800      	ldr	r0, [r0, #0]
 80183de:	460c      	mov	r4, r1
 80183e0:	b120      	cbz	r0, 80183ec <rmw_get_gid_for_client+0x18>
 80183e2:	4b0a      	ldr	r3, [pc, #40]	; (801840c <rmw_get_gid_for_client+0x38>)
 80183e4:	6819      	ldr	r1, [r3, #0]
 80183e6:	f7e7 ff2b 	bl	8000240 <strcmp>
 80183ea:	b950      	cbnz	r0, 8018402 <rmw_get_gid_for_client+0x2e>
 80183ec:	686b      	ldr	r3, [r5, #4]
 80183ee:	2000      	movs	r0, #0
 80183f0:	6060      	str	r0, [r4, #4]
 80183f2:	60a0      	str	r0, [r4, #8]
 80183f4:	60e0      	str	r0, [r4, #12]
 80183f6:	6120      	str	r0, [r4, #16]
 80183f8:	691b      	ldr	r3, [r3, #16]
 80183fa:	6063      	str	r3, [r4, #4]
 80183fc:	bd38      	pop	{r3, r4, r5, pc}
 80183fe:	200b      	movs	r0, #11
 8018400:	bd38      	pop	{r3, r4, r5, pc}
 8018402:	200c      	movs	r0, #12
 8018404:	bd38      	pop	{r3, r4, r5, pc}
 8018406:	200b      	movs	r0, #11
 8018408:	4770      	bx	lr
 801840a:	bf00      	nop
 801840c:	0801f050 	.word	0x0801f050

08018410 <rmw_get_implementation_identifier>:
 8018410:	4b01      	ldr	r3, [pc, #4]	; (8018418 <rmw_get_implementation_identifier+0x8>)
 8018412:	6818      	ldr	r0, [r3, #0]
 8018414:	4770      	bx	lr
 8018416:	bf00      	nop
 8018418:	0801f050 	.word	0x0801f050

0801841c <rmw_init_options_init>:
 801841c:	b084      	sub	sp, #16
 801841e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018420:	b083      	sub	sp, #12
 8018422:	ad09      	add	r5, sp, #36	; 0x24
 8018424:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8018428:	b130      	cbz	r0, 8018438 <rmw_init_options_init+0x1c>
 801842a:	4604      	mov	r4, r0
 801842c:	4628      	mov	r0, r5
 801842e:	f7f5 fc0b 	bl	800dc48 <rcutils_allocator_is_valid>
 8018432:	b108      	cbz	r0, 8018438 <rmw_init_options_init+0x1c>
 8018434:	68a6      	ldr	r6, [r4, #8]
 8018436:	b12e      	cbz	r6, 8018444 <rmw_init_options_init+0x28>
 8018438:	200b      	movs	r0, #11
 801843a:	b003      	add	sp, #12
 801843c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8018440:	b004      	add	sp, #16
 8018442:	4770      	bx	lr
 8018444:	2200      	movs	r2, #0
 8018446:	2300      	movs	r3, #0
 8018448:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 801844c:	f8df e098 	ldr.w	lr, [pc, #152]	; 80184e8 <rmw_init_options_init+0xcc>
 8018450:	466f      	mov	r7, sp
 8018452:	e9c4 2300 	strd	r2, r3, [r4]
 8018456:	4b20      	ldr	r3, [pc, #128]	; (80184d8 <rmw_init_options_init+0xbc>)
 8018458:	681b      	ldr	r3, [r3, #0]
 801845a:	60a3      	str	r3, [r4, #8]
 801845c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801845e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018462:	682b      	ldr	r3, [r5, #0]
 8018464:	4638      	mov	r0, r7
 8018466:	f8cc 3000 	str.w	r3, [ip]
 801846a:	f8c4 e03c 	str.w	lr, [r4, #60]	; 0x3c
 801846e:	60e6      	str	r6, [r4, #12]
 8018470:	f7ff fd46 	bl	8017f00 <rmw_get_default_security_options>
 8018474:	f104 0310 	add.w	r3, r4, #16
 8018478:	2203      	movs	r2, #3
 801847a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801847e:	e883 0003 	stmia.w	r3, {r0, r1}
 8018482:	4816      	ldr	r0, [pc, #88]	; (80184dc <rmw_init_options_init+0xc0>)
 8018484:	4916      	ldr	r1, [pc, #88]	; (80184e0 <rmw_init_options_init+0xc4>)
 8018486:	7626      	strb	r6, [r4, #24]
 8018488:	f7f5 ff38 	bl	800e2fc <rmw_uxrce_init_init_options_impl_memory>
 801848c:	4813      	ldr	r0, [pc, #76]	; (80184dc <rmw_init_options_init+0xc0>)
 801848e:	f7ff ff39 	bl	8018304 <get_memory>
 8018492:	b1f0      	cbz	r0, 80184d2 <rmw_init_options_init+0xb6>
 8018494:	4a13      	ldr	r2, [pc, #76]	; (80184e4 <rmw_init_options_init+0xc8>)
 8018496:	6883      	ldr	r3, [r0, #8]
 8018498:	6851      	ldr	r1, [r2, #4]
 801849a:	6563      	str	r3, [r4, #84]	; 0x54
 801849c:	7810      	ldrb	r0, [r2, #0]
 801849e:	6159      	str	r1, [r3, #20]
 80184a0:	68d1      	ldr	r1, [r2, #12]
 80184a2:	7418      	strb	r0, [r3, #16]
 80184a4:	61d9      	str	r1, [r3, #28]
 80184a6:	6911      	ldr	r1, [r2, #16]
 80184a8:	6219      	str	r1, [r3, #32]
 80184aa:	6951      	ldr	r1, [r2, #20]
 80184ac:	6892      	ldr	r2, [r2, #8]
 80184ae:	6259      	str	r1, [r3, #36]	; 0x24
 80184b0:	619a      	str	r2, [r3, #24]
 80184b2:	f7f9 fe83 	bl	80121bc <uxr_nanos>
 80184b6:	f003 fe81 	bl	801c1bc <srand>
 80184ba:	f003 fead 	bl	801c218 <rand>
 80184be:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80184c0:	6298      	str	r0, [r3, #40]	; 0x28
 80184c2:	2800      	cmp	r0, #0
 80184c4:	d0f9      	beq.n	80184ba <rmw_init_options_init+0x9e>
 80184c6:	2000      	movs	r0, #0
 80184c8:	b003      	add	sp, #12
 80184ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80184ce:	b004      	add	sp, #16
 80184d0:	4770      	bx	lr
 80184d2:	2001      	movs	r0, #1
 80184d4:	e7b1      	b.n	801843a <rmw_init_options_init+0x1e>
 80184d6:	bf00      	nop
 80184d8:	0801f050 	.word	0x0801f050
 80184dc:	20010344 	.word	0x20010344
 80184e0:	2000bb18 	.word	0x2000bb18
 80184e4:	2000b9a4 	.word	0x2000b9a4
 80184e8:	0801ea40 	.word	0x0801ea40

080184ec <rmw_init_options_copy>:
 80184ec:	b570      	push	{r4, r5, r6, lr}
 80184ee:	b158      	cbz	r0, 8018508 <rmw_init_options_copy+0x1c>
 80184f0:	460d      	mov	r5, r1
 80184f2:	b149      	cbz	r1, 8018508 <rmw_init_options_copy+0x1c>
 80184f4:	4604      	mov	r4, r0
 80184f6:	6880      	ldr	r0, [r0, #8]
 80184f8:	b120      	cbz	r0, 8018504 <rmw_init_options_copy+0x18>
 80184fa:	4b13      	ldr	r3, [pc, #76]	; (8018548 <rmw_init_options_copy+0x5c>)
 80184fc:	6819      	ldr	r1, [r3, #0]
 80184fe:	f7e7 fe9f 	bl	8000240 <strcmp>
 8018502:	b9d8      	cbnz	r0, 801853c <rmw_init_options_copy+0x50>
 8018504:	68ae      	ldr	r6, [r5, #8]
 8018506:	b116      	cbz	r6, 801850e <rmw_init_options_copy+0x22>
 8018508:	260b      	movs	r6, #11
 801850a:	4630      	mov	r0, r6
 801850c:	bd70      	pop	{r4, r5, r6, pc}
 801850e:	2258      	movs	r2, #88	; 0x58
 8018510:	4621      	mov	r1, r4
 8018512:	4628      	mov	r0, r5
 8018514:	f004 fa3f 	bl	801c996 <memcpy>
 8018518:	480c      	ldr	r0, [pc, #48]	; (801854c <rmw_init_options_copy+0x60>)
 801851a:	f7ff fef3 	bl	8018304 <get_memory>
 801851e:	b180      	cbz	r0, 8018542 <rmw_init_options_copy+0x56>
 8018520:	6883      	ldr	r3, [r0, #8]
 8018522:	656b      	str	r3, [r5, #84]	; 0x54
 8018524:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8018526:	f103 0410 	add.w	r4, r3, #16
 801852a:	3510      	adds	r5, #16
 801852c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801852e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018530:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018534:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8018538:	4630      	mov	r0, r6
 801853a:	bd70      	pop	{r4, r5, r6, pc}
 801853c:	260c      	movs	r6, #12
 801853e:	4630      	mov	r0, r6
 8018540:	bd70      	pop	{r4, r5, r6, pc}
 8018542:	2601      	movs	r6, #1
 8018544:	e7e1      	b.n	801850a <rmw_init_options_copy+0x1e>
 8018546:	bf00      	nop
 8018548:	0801f050 	.word	0x0801f050
 801854c:	20010344 	.word	0x20010344

08018550 <rmw_init_options_fini>:
 8018550:	b368      	cbz	r0, 80185ae <rmw_init_options_fini+0x5e>
 8018552:	b510      	push	{r4, lr}
 8018554:	4604      	mov	r4, r0
 8018556:	b096      	sub	sp, #88	; 0x58
 8018558:	3040      	adds	r0, #64	; 0x40
 801855a:	f7f5 fb75 	bl	800dc48 <rcutils_allocator_is_valid>
 801855e:	b1f0      	cbz	r0, 801859e <rmw_init_options_fini+0x4e>
 8018560:	68a0      	ldr	r0, [r4, #8]
 8018562:	b120      	cbz	r0, 801856e <rmw_init_options_fini+0x1e>
 8018564:	4b13      	ldr	r3, [pc, #76]	; (80185b4 <rmw_init_options_fini+0x64>)
 8018566:	6819      	ldr	r1, [r3, #0]
 8018568:	f7e7 fe6a 	bl	8000240 <strcmp>
 801856c:	b9e8      	cbnz	r0, 80185aa <rmw_init_options_fini+0x5a>
 801856e:	4b12      	ldr	r3, [pc, #72]	; (80185b8 <rmw_init_options_fini+0x68>)
 8018570:	6819      	ldr	r1, [r3, #0]
 8018572:	b1b9      	cbz	r1, 80185a4 <rmw_init_options_fini+0x54>
 8018574:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8018576:	e001      	b.n	801857c <rmw_init_options_fini+0x2c>
 8018578:	6849      	ldr	r1, [r1, #4]
 801857a:	b199      	cbz	r1, 80185a4 <rmw_init_options_fini+0x54>
 801857c:	688b      	ldr	r3, [r1, #8]
 801857e:	429a      	cmp	r2, r3
 8018580:	d1fa      	bne.n	8018578 <rmw_init_options_fini+0x28>
 8018582:	480d      	ldr	r0, [pc, #52]	; (80185b8 <rmw_init_options_fini+0x68>)
 8018584:	f7ff fece 	bl	8018324 <put_memory>
 8018588:	4668      	mov	r0, sp
 801858a:	f7ff fca5 	bl	8017ed8 <rmw_get_zero_initialized_init_options>
 801858e:	2258      	movs	r2, #88	; 0x58
 8018590:	4669      	mov	r1, sp
 8018592:	4620      	mov	r0, r4
 8018594:	f004 f9ff 	bl	801c996 <memcpy>
 8018598:	2000      	movs	r0, #0
 801859a:	b016      	add	sp, #88	; 0x58
 801859c:	bd10      	pop	{r4, pc}
 801859e:	200b      	movs	r0, #11
 80185a0:	b016      	add	sp, #88	; 0x58
 80185a2:	bd10      	pop	{r4, pc}
 80185a4:	2001      	movs	r0, #1
 80185a6:	b016      	add	sp, #88	; 0x58
 80185a8:	bd10      	pop	{r4, pc}
 80185aa:	200c      	movs	r0, #12
 80185ac:	e7f5      	b.n	801859a <rmw_init_options_fini+0x4a>
 80185ae:	200b      	movs	r0, #11
 80185b0:	4770      	bx	lr
 80185b2:	bf00      	nop
 80185b4:	0801f050 	.word	0x0801f050
 80185b8:	20010344 	.word	0x20010344

080185bc <rmw_init>:
 80185bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80185c0:	b083      	sub	sp, #12
 80185c2:	2800      	cmp	r0, #0
 80185c4:	f000 80d3 	beq.w	801876e <rmw_init+0x1b2>
 80185c8:	460e      	mov	r6, r1
 80185ca:	2900      	cmp	r1, #0
 80185cc:	f000 80cf 	beq.w	801876e <rmw_init+0x1b2>
 80185d0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80185d2:	4605      	mov	r5, r0
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	f000 80ca 	beq.w	801876e <rmw_init+0x1b2>
 80185da:	4b78      	ldr	r3, [pc, #480]	; (80187bc <rmw_init+0x200>)
 80185dc:	6880      	ldr	r0, [r0, #8]
 80185de:	681f      	ldr	r7, [r3, #0]
 80185e0:	b128      	cbz	r0, 80185ee <rmw_init+0x32>
 80185e2:	4639      	mov	r1, r7
 80185e4:	f7e7 fe2c 	bl	8000240 <strcmp>
 80185e8:	2800      	cmp	r0, #0
 80185ea:	f040 80ca 	bne.w	8018782 <rmw_init+0x1c6>
 80185ee:	4c74      	ldr	r4, [pc, #464]	; (80187c0 <rmw_init+0x204>)
 80185f0:	f04f 0800 	mov.w	r8, #0
 80185f4:	4973      	ldr	r1, [pc, #460]	; (80187c4 <rmw_init+0x208>)
 80185f6:	4874      	ldr	r0, [pc, #464]	; (80187c8 <rmw_init+0x20c>)
 80185f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80185fc:	60b7      	str	r7, [r6, #8]
 80185fe:	e9c6 2300 	strd	r2, r3, [r6]
 8018602:	68eb      	ldr	r3, [r5, #12]
 8018604:	2201      	movs	r2, #1
 8018606:	66b3      	str	r3, [r6, #104]	; 0x68
 8018608:	f7f5 fe18 	bl	800e23c <rmw_uxrce_init_session_memory>
 801860c:	4620      	mov	r0, r4
 801860e:	2204      	movs	r2, #4
 8018610:	496e      	ldr	r1, [pc, #440]	; (80187cc <rmw_init+0x210>)
 8018612:	f7f5 fe53 	bl	800e2bc <rmw_uxrce_init_static_input_buffer_memory>
 8018616:	486c      	ldr	r0, [pc, #432]	; (80187c8 <rmw_init+0x20c>)
 8018618:	f884 800d 	strb.w	r8, [r4, #13]
 801861c:	f7ff fe72 	bl	8018304 <get_memory>
 8018620:	2800      	cmp	r0, #0
 8018622:	f000 80a9 	beq.w	8018778 <rmw_init+0x1bc>
 8018626:	6884      	ldr	r4, [r0, #8]
 8018628:	6d68      	ldr	r0, [r5, #84]	; 0x54
 801862a:	f104 0910 	add.w	r9, r4, #16
 801862e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8018630:	f890 c010 	ldrb.w	ip, [r0, #16]
 8018634:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8018638:	9101      	str	r1, [sp, #4]
 801863a:	4661      	mov	r1, ip
 801863c:	6a00      	ldr	r0, [r0, #32]
 801863e:	9000      	str	r0, [sp, #0]
 8018640:	4648      	mov	r0, r9
 8018642:	f001 fa2b 	bl	8019a9c <uxr_set_custom_transport_callbacks>
 8018646:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801864a:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 801864e:	4960      	ldr	r1, [pc, #384]	; (80187d0 <rmw_init+0x214>)
 8018650:	4860      	ldr	r0, [pc, #384]	; (80187d4 <rmw_init+0x218>)
 8018652:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8018656:	f504 725e 	add.w	r2, r4, #888	; 0x378
 801865a:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 801865e:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8018662:	2201      	movs	r2, #1
 8018664:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8018668:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 801866c:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8018670:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8018674:	66f4      	str	r4, [r6, #108]	; 0x6c
 8018676:	f7f5 fdc1 	bl	800e1fc <rmw_uxrce_init_node_memory>
 801867a:	2205      	movs	r2, #5
 801867c:	4956      	ldr	r1, [pc, #344]	; (80187d8 <rmw_init+0x21c>)
 801867e:	4857      	ldr	r0, [pc, #348]	; (80187dc <rmw_init+0x220>)
 8018680:	f7f5 fd9c 	bl	800e1bc <rmw_uxrce_init_subscription_memory>
 8018684:	220a      	movs	r2, #10
 8018686:	4956      	ldr	r1, [pc, #344]	; (80187e0 <rmw_init+0x224>)
 8018688:	4856      	ldr	r0, [pc, #344]	; (80187e4 <rmw_init+0x228>)
 801868a:	f7f5 fd77 	bl	800e17c <rmw_uxrce_init_publisher_memory>
 801868e:	2202      	movs	r2, #2
 8018690:	4955      	ldr	r1, [pc, #340]	; (80187e8 <rmw_init+0x22c>)
 8018692:	4856      	ldr	r0, [pc, #344]	; (80187ec <rmw_init+0x230>)
 8018694:	f7f5 fd32 	bl	800e0fc <rmw_uxrce_init_service_memory>
 8018698:	2201      	movs	r2, #1
 801869a:	4955      	ldr	r1, [pc, #340]	; (80187f0 <rmw_init+0x234>)
 801869c:	4855      	ldr	r0, [pc, #340]	; (80187f4 <rmw_init+0x238>)
 801869e:	f7f5 fd4d 	bl	800e13c <rmw_uxrce_init_client_memory>
 80186a2:	220f      	movs	r2, #15
 80186a4:	4954      	ldr	r1, [pc, #336]	; (80187f8 <rmw_init+0x23c>)
 80186a6:	4855      	ldr	r0, [pc, #340]	; (80187fc <rmw_init+0x240>)
 80186a8:	f7f5 fde8 	bl	800e27c <rmw_uxrce_init_topic_memory>
 80186ac:	2203      	movs	r2, #3
 80186ae:	4954      	ldr	r1, [pc, #336]	; (8018800 <rmw_init+0x244>)
 80186b0:	4854      	ldr	r0, [pc, #336]	; (8018804 <rmw_init+0x248>)
 80186b2:	f7f5 fe23 	bl	800e2fc <rmw_uxrce_init_init_options_impl_memory>
 80186b6:	2204      	movs	r2, #4
 80186b8:	4953      	ldr	r1, [pc, #332]	; (8018808 <rmw_init+0x24c>)
 80186ba:	4854      	ldr	r0, [pc, #336]	; (801880c <rmw_init+0x250>)
 80186bc:	f7f5 fe3e 	bl	800e33c <rmw_uxrce_init_wait_set_memory>
 80186c0:	4953      	ldr	r1, [pc, #332]	; (8018810 <rmw_init+0x254>)
 80186c2:	4854      	ldr	r0, [pc, #336]	; (8018814 <rmw_init+0x258>)
 80186c4:	2204      	movs	r2, #4
 80186c6:	f7f5 fe59 	bl	800e37c <rmw_uxrce_init_guard_condition_memory>
 80186ca:	4642      	mov	r2, r8
 80186cc:	6d69      	ldr	r1, [r5, #84]	; 0x54
 80186ce:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
 80186d0:	f000 feba 	bl	8019448 <rmw_uxrce_transport_init>
 80186d4:	4607      	mov	r7, r0
 80186d6:	2800      	cmp	r0, #0
 80186d8:	d158      	bne.n	801878c <rmw_init+0x1d0>
 80186da:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80186dc:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 80186e0:	f504 7122 	add.w	r1, r4, #648	; 0x288
 80186e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80186e6:	4628      	mov	r0, r5
 80186e8:	f7f8 fbbe 	bl	8010e68 <uxr_init_session>
 80186ec:	4622      	mov	r2, r4
 80186ee:	494a      	ldr	r1, [pc, #296]	; (8018818 <rmw_init+0x25c>)
 80186f0:	4628      	mov	r0, r5
 80186f2:	f7f8 fbdd 	bl	8010eb0 <uxr_set_topic_callback>
 80186f6:	463a      	mov	r2, r7
 80186f8:	4948      	ldr	r1, [pc, #288]	; (801881c <rmw_init+0x260>)
 80186fa:	4628      	mov	r0, r5
 80186fc:	f7f8 fbd4 	bl	8010ea8 <uxr_set_status_callback>
 8018700:	463a      	mov	r2, r7
 8018702:	4947      	ldr	r1, [pc, #284]	; (8018820 <rmw_init+0x264>)
 8018704:	4628      	mov	r0, r5
 8018706:	f7f8 fbd7 	bl	8010eb8 <uxr_set_request_callback>
 801870a:	463a      	mov	r2, r7
 801870c:	4945      	ldr	r1, [pc, #276]	; (8018824 <rmw_init+0x268>)
 801870e:	4628      	mov	r0, r5
 8018710:	f7f8 fbd6 	bl	8010ec0 <uxr_set_reply_callback>
 8018714:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8018718:	2304      	movs	r3, #4
 801871a:	f504 7165 	add.w	r1, r4, #916	; 0x394
 801871e:	0092      	lsls	r2, r2, #2
 8018720:	4628      	mov	r0, r5
 8018722:	f7f8 fc0d 	bl	8010f40 <uxr_create_input_reliable_stream>
 8018726:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 801872a:	2304      	movs	r3, #4
 801872c:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8018730:	0092      	lsls	r2, r2, #2
 8018732:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8018736:	4628      	mov	r0, r5
 8018738:	f7f8 fbd8 	bl	8010eec <uxr_create_output_reliable_stream>
 801873c:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8018740:	4628      	mov	r0, r5
 8018742:	f7f8 fbf7 	bl	8010f34 <uxr_create_input_best_effort_stream>
 8018746:	f241 3194 	movw	r1, #5012	; 0x1394
 801874a:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 801874e:	4628      	mov	r0, r5
 8018750:	4421      	add	r1, r4
 8018752:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8018756:	f7f8 fbb7 	bl	8010ec8 <uxr_create_output_best_effort_stream>
 801875a:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 801875e:	4628      	mov	r0, r5
 8018760:	f7f9 f940 	bl	80119e4 <uxr_create_session>
 8018764:	b1f8      	cbz	r0, 80187a6 <rmw_init+0x1ea>
 8018766:	4638      	mov	r0, r7
 8018768:	b003      	add	sp, #12
 801876a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801876e:	270b      	movs	r7, #11
 8018770:	4638      	mov	r0, r7
 8018772:	b003      	add	sp, #12
 8018774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018778:	2701      	movs	r7, #1
 801877a:	4638      	mov	r0, r7
 801877c:	b003      	add	sp, #12
 801877e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018782:	270c      	movs	r7, #12
 8018784:	4638      	mov	r0, r7
 8018786:	b003      	add	sp, #12
 8018788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801878c:	4648      	mov	r0, r9
 801878e:	f001 f9c3 	bl	8019b18 <uxr_close_custom_transport>
 8018792:	4621      	mov	r1, r4
 8018794:	480c      	ldr	r0, [pc, #48]	; (80187c8 <rmw_init+0x20c>)
 8018796:	f7ff fdc5 	bl	8018324 <put_memory>
 801879a:	4638      	mov	r0, r7
 801879c:	f8c6 806c 	str.w	r8, [r6, #108]	; 0x6c
 80187a0:	b003      	add	sp, #12
 80187a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80187a6:	4648      	mov	r0, r9
 80187a8:	f001 f9b6 	bl	8019b18 <uxr_close_custom_transport>
 80187ac:	4621      	mov	r1, r4
 80187ae:	4806      	ldr	r0, [pc, #24]	; (80187c8 <rmw_init+0x20c>)
 80187b0:	f7ff fdb8 	bl	8018324 <put_memory>
 80187b4:	66f7      	str	r7, [r6, #108]	; 0x6c
 80187b6:	2701      	movs	r7, #1
 80187b8:	e7d5      	b.n	8018766 <rmw_init+0x1aa>
 80187ba:	bf00      	nop
 80187bc:	0801f050 	.word	0x0801f050
 80187c0:	20010394 	.word	0x20010394
 80187c4:	2000c640 	.word	0x2000c640
 80187c8:	20010384 	.word	0x20010384
 80187cc:	2000dbe8 	.word	0x2000dbe8
 80187d0:	2000bb9c 	.word	0x2000bb9c
 80187d4:	20010354 	.word	0x20010354
 80187d8:	2000fce8 	.word	0x2000fce8
 80187dc:	200103a4 	.word	0x200103a4
 80187e0:	2000bc40 	.word	0x2000bc40
 80187e4:	20010364 	.word	0x20010364
 80187e8:	2000c4b0 	.word	0x2000c4b0
 80187ec:	20010374 	.word	0x20010374
 80187f0:	2000b9d0 	.word	0x2000b9d0
 80187f4:	2000b9c0 	.word	0x2000b9c0
 80187f8:	20010120 	.word	0x20010120
 80187fc:	200103b4 	.word	0x200103b4
 8018800:	2000bb18 	.word	0x2000bb18
 8018804:	20010344 	.word	0x20010344
 8018808:	200102c4 	.word	0x200102c4
 801880c:	200103c4 	.word	0x200103c4
 8018810:	2000ba98 	.word	0x2000ba98
 8018814:	20010334 	.word	0x20010334
 8018818:	0801bc05 	.word	0x0801bc05
 801881c:	0801bbfd 	.word	0x0801bbfd
 8018820:	0801bc9d 	.word	0x0801bc9d
 8018824:	0801bd39 	.word	0x0801bd39

08018828 <rmw_context_fini>:
 8018828:	4b17      	ldr	r3, [pc, #92]	; (8018888 <rmw_context_fini+0x60>)
 801882a:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 801882c:	b570      	push	{r4, r5, r6, lr}
 801882e:	681c      	ldr	r4, [r3, #0]
 8018830:	4605      	mov	r5, r0
 8018832:	b334      	cbz	r4, 8018882 <rmw_context_fini+0x5a>
 8018834:	2600      	movs	r6, #0
 8018836:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 801883a:	6902      	ldr	r2, [r0, #16]
 801883c:	428a      	cmp	r2, r1
 801883e:	d018      	beq.n	8018872 <rmw_context_fini+0x4a>
 8018840:	2c00      	cmp	r4, #0
 8018842:	d1f8      	bne.n	8018836 <rmw_context_fini+0xe>
 8018844:	b189      	cbz	r1, 801886a <rmw_context_fini+0x42>
 8018846:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 801884a:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 801884e:	789b      	ldrb	r3, [r3, #2]
 8018850:	2b01      	cmp	r3, #1
 8018852:	bf14      	ite	ne
 8018854:	210a      	movne	r1, #10
 8018856:	2100      	moveq	r1, #0
 8018858:	f7f9 f89c 	bl	8011994 <uxr_delete_session_retries>
 801885c:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 801885e:	f7f5 fdad 	bl	800e3bc <rmw_uxrce_fini_session_memory>
 8018862:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8018864:	3010      	adds	r0, #16
 8018866:	f001 f957 	bl	8019b18 <uxr_close_custom_transport>
 801886a:	2300      	movs	r3, #0
 801886c:	4630      	mov	r0, r6
 801886e:	66eb      	str	r3, [r5, #108]	; 0x6c
 8018870:	bd70      	pop	{r4, r5, r6, pc}
 8018872:	3018      	adds	r0, #24
 8018874:	f000 f90e 	bl	8018a94 <rmw_destroy_node>
 8018878:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 801887a:	4606      	mov	r6, r0
 801887c:	2c00      	cmp	r4, #0
 801887e:	d1da      	bne.n	8018836 <rmw_context_fini+0xe>
 8018880:	e7e0      	b.n	8018844 <rmw_context_fini+0x1c>
 8018882:	4626      	mov	r6, r4
 8018884:	e7de      	b.n	8018844 <rmw_context_fini+0x1c>
 8018886:	bf00      	nop
 8018888:	20010354 	.word	0x20010354

0801888c <create_topic>:
 801888c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018890:	4605      	mov	r5, r0
 8018892:	b084      	sub	sp, #16
 8018894:	4822      	ldr	r0, [pc, #136]	; (8018920 <create_topic+0x94>)
 8018896:	460f      	mov	r7, r1
 8018898:	4616      	mov	r6, r2
 801889a:	f7ff fd33 	bl	8018304 <get_memory>
 801889e:	4604      	mov	r4, r0
 80188a0:	2800      	cmp	r0, #0
 80188a2:	d039      	beq.n	8018918 <create_topic+0x8c>
 80188a4:	692b      	ldr	r3, [r5, #16]
 80188a6:	2102      	movs	r1, #2
 80188a8:	6884      	ldr	r4, [r0, #8]
 80188aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80188ae:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8018928 <create_topic+0x9c>
 80188b2:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 80188b6:	1c42      	adds	r2, r0, #1
 80188b8:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80188bc:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 80188c0:	f7f8 fa14 	bl	8010cec <uxr_object_id>
 80188c4:	223c      	movs	r2, #60	; 0x3c
 80188c6:	6120      	str	r0, [r4, #16]
 80188c8:	4641      	mov	r1, r8
 80188ca:	4638      	mov	r0, r7
 80188cc:	f7f5 fff4 	bl	800e8b8 <generate_topic_name>
 80188d0:	b1f0      	cbz	r0, 8018910 <create_topic+0x84>
 80188d2:	4f14      	ldr	r7, [pc, #80]	; (8018924 <create_topic+0x98>)
 80188d4:	4630      	mov	r0, r6
 80188d6:	2264      	movs	r2, #100	; 0x64
 80188d8:	4639      	mov	r1, r7
 80188da:	f7f5 ffbf 	bl	800e85c <generate_type_name>
 80188de:	b1b8      	cbz	r0, 8018910 <create_topic+0x84>
 80188e0:	6928      	ldr	r0, [r5, #16]
 80188e2:	2106      	movs	r1, #6
 80188e4:	696b      	ldr	r3, [r5, #20]
 80188e6:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 80188ea:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80188ee:	f8cd 8000 	str.w	r8, [sp]
 80188f2:	e9cd 7101 	strd	r7, r1, [sp, #4]
 80188f6:	6811      	ldr	r1, [r2, #0]
 80188f8:	6922      	ldr	r2, [r4, #16]
 80188fa:	f7f8 f839 	bl	8010970 <uxr_buffer_create_topic_bin>
 80188fe:	4602      	mov	r2, r0
 8018900:	6928      	ldr	r0, [r5, #16]
 8018902:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8018906:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801890a:	f7f5 fedb 	bl	800e6c4 <run_xrce_session>
 801890e:	b918      	cbnz	r0, 8018918 <create_topic+0x8c>
 8018910:	4620      	mov	r0, r4
 8018912:	2400      	movs	r4, #0
 8018914:	f7f5 fdc8 	bl	800e4a8 <rmw_uxrce_fini_topic_memory>
 8018918:	4620      	mov	r0, r4
 801891a:	b004      	add	sp, #16
 801891c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018920:	200103b4 	.word	0x200103b4
 8018924:	20010918 	.word	0x20010918
 8018928:	200108dc 	.word	0x200108dc

0801892c <destroy_topic>:
 801892c:	b538      	push	{r3, r4, r5, lr}
 801892e:	6985      	ldr	r5, [r0, #24]
 8018930:	b1dd      	cbz	r5, 801896a <destroy_topic+0x3e>
 8018932:	4604      	mov	r4, r0
 8018934:	6928      	ldr	r0, [r5, #16]
 8018936:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801893a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801893e:	6922      	ldr	r2, [r4, #16]
 8018940:	6819      	ldr	r1, [r3, #0]
 8018942:	f7f7 ff97 	bl	8010874 <uxr_buffer_delete_entity>
 8018946:	4602      	mov	r2, r0
 8018948:	6928      	ldr	r0, [r5, #16]
 801894a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801894e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8018952:	f7f5 feb7 	bl	800e6c4 <run_xrce_session>
 8018956:	4603      	mov	r3, r0
 8018958:	4620      	mov	r0, r4
 801895a:	2b00      	cmp	r3, #0
 801895c:	bf14      	ite	ne
 801895e:	2400      	movne	r4, #0
 8018960:	2402      	moveq	r4, #2
 8018962:	f7f5 fda1 	bl	800e4a8 <rmw_uxrce_fini_topic_memory>
 8018966:	4620      	mov	r0, r4
 8018968:	bd38      	pop	{r3, r4, r5, pc}
 801896a:	2401      	movs	r4, #1
 801896c:	4620      	mov	r0, r4
 801896e:	bd38      	pop	{r3, r4, r5, pc}

08018970 <create_node>:
 8018970:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018974:	b083      	sub	sp, #12
 8018976:	2b00      	cmp	r3, #0
 8018978:	d064      	beq.n	8018a44 <create_node+0xd4>
 801897a:	4606      	mov	r6, r0
 801897c:	4838      	ldr	r0, [pc, #224]	; (8018a60 <create_node+0xf0>)
 801897e:	460f      	mov	r7, r1
 8018980:	4690      	mov	r8, r2
 8018982:	461d      	mov	r5, r3
 8018984:	f7ff fcbe 	bl	8018304 <get_memory>
 8018988:	2800      	cmp	r0, #0
 801898a:	d05b      	beq.n	8018a44 <create_node+0xd4>
 801898c:	6884      	ldr	r4, [r0, #8]
 801898e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8018990:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8018994:	f104 0518 	add.w	r5, r4, #24
 8018998:	6123      	str	r3, [r4, #16]
 801899a:	f7ff fd39 	bl	8018410 <rmw_get_implementation_identifier>
 801899e:	f8c4 9020 	str.w	r9, [r4, #32]
 80189a2:	e9c4 0406 	strd	r0, r4, [r4, #24]
 80189a6:	4630      	mov	r0, r6
 80189a8:	f7e7 fcaa 	bl	8000300 <strlen>
 80189ac:	1c42      	adds	r2, r0, #1
 80189ae:	2a3c      	cmp	r2, #60	; 0x3c
 80189b0:	d840      	bhi.n	8018a34 <create_node+0xc4>
 80189b2:	4648      	mov	r0, r9
 80189b4:	f104 0968 	add.w	r9, r4, #104	; 0x68
 80189b8:	4631      	mov	r1, r6
 80189ba:	f003 ffec 	bl	801c996 <memcpy>
 80189be:	4638      	mov	r0, r7
 80189c0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 80189c4:	f7e7 fc9c 	bl	8000300 <strlen>
 80189c8:	1c42      	adds	r2, r0, #1
 80189ca:	2a3c      	cmp	r2, #60	; 0x3c
 80189cc:	d832      	bhi.n	8018a34 <create_node+0xc4>
 80189ce:	4639      	mov	r1, r7
 80189d0:	4648      	mov	r0, r9
 80189d2:	f003 ffe0 	bl	801c996 <memcpy>
 80189d6:	6923      	ldr	r3, [r4, #16]
 80189d8:	2101      	movs	r1, #1
 80189da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80189de:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 80189e2:	1842      	adds	r2, r0, r1
 80189e4:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 80189e8:	f7f8 f980 	bl	8010cec <uxr_object_id>
 80189ec:	6160      	str	r0, [r4, #20]
 80189ee:	783b      	ldrb	r3, [r7, #0]
 80189f0:	2b2f      	cmp	r3, #47	; 0x2f
 80189f2:	d12c      	bne.n	8018a4e <create_node+0xde>
 80189f4:	787b      	ldrb	r3, [r7, #1]
 80189f6:	bb53      	cbnz	r3, 8018a4e <create_node+0xde>
 80189f8:	4633      	mov	r3, r6
 80189fa:	4a1a      	ldr	r2, [pc, #104]	; (8018a64 <create_node+0xf4>)
 80189fc:	213c      	movs	r1, #60	; 0x3c
 80189fe:	481a      	ldr	r0, [pc, #104]	; (8018a68 <create_node+0xf8>)
 8018a00:	f003 fdbe 	bl	801c580 <sniprintf>
 8018a04:	6920      	ldr	r0, [r4, #16]
 8018a06:	2106      	movs	r1, #6
 8018a08:	fa1f f388 	uxth.w	r3, r8
 8018a0c:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8018a10:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018a14:	9101      	str	r1, [sp, #4]
 8018a16:	4914      	ldr	r1, [pc, #80]	; (8018a68 <create_node+0xf8>)
 8018a18:	9100      	str	r1, [sp, #0]
 8018a1a:	6811      	ldr	r1, [r2, #0]
 8018a1c:	6962      	ldr	r2, [r4, #20]
 8018a1e:	f7f7 ff75 	bl	801090c <uxr_buffer_create_participant_bin>
 8018a22:	4602      	mov	r2, r0
 8018a24:	6920      	ldr	r0, [r4, #16]
 8018a26:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8018a2a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8018a2e:	f7f5 fe49 	bl	800e6c4 <run_xrce_session>
 8018a32:	b918      	cbnz	r0, 8018a3c <create_node+0xcc>
 8018a34:	4628      	mov	r0, r5
 8018a36:	2500      	movs	r5, #0
 8018a38:	f7f5 fcc6 	bl	800e3c8 <rmw_uxrce_fini_node_memory>
 8018a3c:	4628      	mov	r0, r5
 8018a3e:	b003      	add	sp, #12
 8018a40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018a44:	2500      	movs	r5, #0
 8018a46:	4628      	mov	r0, r5
 8018a48:	b003      	add	sp, #12
 8018a4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018a4e:	463b      	mov	r3, r7
 8018a50:	4a06      	ldr	r2, [pc, #24]	; (8018a6c <create_node+0xfc>)
 8018a52:	213c      	movs	r1, #60	; 0x3c
 8018a54:	9600      	str	r6, [sp, #0]
 8018a56:	4804      	ldr	r0, [pc, #16]	; (8018a68 <create_node+0xf8>)
 8018a58:	f003 fd92 	bl	801c580 <sniprintf>
 8018a5c:	e7d2      	b.n	8018a04 <create_node+0x94>
 8018a5e:	bf00      	nop
 8018a60:	20010354 	.word	0x20010354
 8018a64:	0801e5ac 	.word	0x0801e5ac
 8018a68:	2001097c 	.word	0x2001097c
 8018a6c:	0801ea48 	.word	0x0801ea48

08018a70 <rmw_create_node>:
 8018a70:	468c      	mov	ip, r1
 8018a72:	4611      	mov	r1, r2
 8018a74:	f1bc 0f00 	cmp.w	ip, #0
 8018a78:	d00a      	beq.n	8018a90 <rmw_create_node+0x20>
 8018a7a:	f89c 3000 	ldrb.w	r3, [ip]
 8018a7e:	b13b      	cbz	r3, 8018a90 <rmw_create_node+0x20>
 8018a80:	b132      	cbz	r2, 8018a90 <rmw_create_node+0x20>
 8018a82:	7813      	ldrb	r3, [r2, #0]
 8018a84:	b123      	cbz	r3, 8018a90 <rmw_create_node+0x20>
 8018a86:	4603      	mov	r3, r0
 8018a88:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8018a8a:	4660      	mov	r0, ip
 8018a8c:	f7ff bf70 	b.w	8018970 <create_node>
 8018a90:	2000      	movs	r0, #0
 8018a92:	4770      	bx	lr

08018a94 <rmw_destroy_node>:
 8018a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a96:	b328      	cbz	r0, 8018ae4 <rmw_destroy_node+0x50>
 8018a98:	4607      	mov	r7, r0
 8018a9a:	6800      	ldr	r0, [r0, #0]
 8018a9c:	b120      	cbz	r0, 8018aa8 <rmw_destroy_node+0x14>
 8018a9e:	4b37      	ldr	r3, [pc, #220]	; (8018b7c <rmw_destroy_node+0xe8>)
 8018aa0:	6819      	ldr	r1, [r3, #0]
 8018aa2:	f7e7 fbcd 	bl	8000240 <strcmp>
 8018aa6:	b9e8      	cbnz	r0, 8018ae4 <rmw_destroy_node+0x50>
 8018aa8:	687d      	ldr	r5, [r7, #4]
 8018aaa:	b1dd      	cbz	r5, 8018ae4 <rmw_destroy_node+0x50>
 8018aac:	4b34      	ldr	r3, [pc, #208]	; (8018b80 <rmw_destroy_node+0xec>)
 8018aae:	681c      	ldr	r4, [r3, #0]
 8018ab0:	2c00      	cmp	r4, #0
 8018ab2:	d060      	beq.n	8018b76 <rmw_destroy_node+0xe2>
 8018ab4:	2600      	movs	r6, #0
 8018ab6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018aba:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8018abe:	429d      	cmp	r5, r3
 8018ac0:	d013      	beq.n	8018aea <rmw_destroy_node+0x56>
 8018ac2:	2c00      	cmp	r4, #0
 8018ac4:	d1f7      	bne.n	8018ab6 <rmw_destroy_node+0x22>
 8018ac6:	4b2f      	ldr	r3, [pc, #188]	; (8018b84 <rmw_destroy_node+0xf0>)
 8018ac8:	681c      	ldr	r4, [r3, #0]
 8018aca:	b1c4      	cbz	r4, 8018afe <rmw_destroy_node+0x6a>
 8018acc:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018ad0:	6a0b      	ldr	r3, [r1, #32]
 8018ad2:	429d      	cmp	r5, r3
 8018ad4:	d1f9      	bne.n	8018aca <rmw_destroy_node+0x36>
 8018ad6:	317c      	adds	r1, #124	; 0x7c
 8018ad8:	4638      	mov	r0, r7
 8018ada:	f000 fbff 	bl	80192dc <rmw_destroy_subscription>
 8018ade:	2801      	cmp	r0, #1
 8018ae0:	4606      	mov	r6, r0
 8018ae2:	d1f2      	bne.n	8018aca <rmw_destroy_node+0x36>
 8018ae4:	2601      	movs	r6, #1
 8018ae6:	4630      	mov	r0, r6
 8018ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018aea:	3184      	adds	r1, #132	; 0x84
 8018aec:	4638      	mov	r0, r7
 8018aee:	f7f5 fab1 	bl	800e054 <rmw_destroy_publisher>
 8018af2:	2801      	cmp	r0, #1
 8018af4:	4606      	mov	r6, r0
 8018af6:	d0f5      	beq.n	8018ae4 <rmw_destroy_node+0x50>
 8018af8:	2c00      	cmp	r4, #0
 8018afa:	d1dc      	bne.n	8018ab6 <rmw_destroy_node+0x22>
 8018afc:	e7e3      	b.n	8018ac6 <rmw_destroy_node+0x32>
 8018afe:	4b22      	ldr	r3, [pc, #136]	; (8018b88 <rmw_destroy_node+0xf4>)
 8018b00:	681c      	ldr	r4, [r3, #0]
 8018b02:	b16c      	cbz	r4, 8018b20 <rmw_destroy_node+0x8c>
 8018b04:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018b08:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8018b0a:	429d      	cmp	r5, r3
 8018b0c:	d1f9      	bne.n	8018b02 <rmw_destroy_node+0x6e>
 8018b0e:	317c      	adds	r1, #124	; 0x7c
 8018b10:	4638      	mov	r0, r7
 8018b12:	f000 fa6d 	bl	8018ff0 <rmw_destroy_service>
 8018b16:	2801      	cmp	r0, #1
 8018b18:	4606      	mov	r6, r0
 8018b1a:	d0e3      	beq.n	8018ae4 <rmw_destroy_node+0x50>
 8018b1c:	2c00      	cmp	r4, #0
 8018b1e:	d1f1      	bne.n	8018b04 <rmw_destroy_node+0x70>
 8018b20:	4b1a      	ldr	r3, [pc, #104]	; (8018b8c <rmw_destroy_node+0xf8>)
 8018b22:	681c      	ldr	r4, [r3, #0]
 8018b24:	b16c      	cbz	r4, 8018b42 <rmw_destroy_node+0xae>
 8018b26:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8018b2a:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8018b2c:	429d      	cmp	r5, r3
 8018b2e:	d1f9      	bne.n	8018b24 <rmw_destroy_node+0x90>
 8018b30:	317c      	adds	r1, #124	; 0x7c
 8018b32:	4638      	mov	r0, r7
 8018b34:	f7ff fc0a 	bl	801834c <rmw_destroy_client>
 8018b38:	2801      	cmp	r0, #1
 8018b3a:	4606      	mov	r6, r0
 8018b3c:	d0d2      	beq.n	8018ae4 <rmw_destroy_node+0x50>
 8018b3e:	2c00      	cmp	r4, #0
 8018b40:	d1f1      	bne.n	8018b26 <rmw_destroy_node+0x92>
 8018b42:	6928      	ldr	r0, [r5, #16]
 8018b44:	696a      	ldr	r2, [r5, #20]
 8018b46:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8018b4a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018b4e:	6819      	ldr	r1, [r3, #0]
 8018b50:	f7f7 fe90 	bl	8010874 <uxr_buffer_delete_entity>
 8018b54:	4602      	mov	r2, r0
 8018b56:	6928      	ldr	r0, [r5, #16]
 8018b58:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8018b5c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8018b60:	f7f5 fdb0 	bl	800e6c4 <run_xrce_session>
 8018b64:	4603      	mov	r3, r0
 8018b66:	4638      	mov	r0, r7
 8018b68:	2b00      	cmp	r3, #0
 8018b6a:	bf08      	it	eq
 8018b6c:	2602      	moveq	r6, #2
 8018b6e:	f7f5 fc2b 	bl	800e3c8 <rmw_uxrce_fini_node_memory>
 8018b72:	4630      	mov	r0, r6
 8018b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b76:	4626      	mov	r6, r4
 8018b78:	e7a5      	b.n	8018ac6 <rmw_destroy_node+0x32>
 8018b7a:	bf00      	nop
 8018b7c:	0801f050 	.word	0x0801f050
 8018b80:	20010364 	.word	0x20010364
 8018b84:	200103a4 	.word	0x200103a4
 8018b88:	20010374 	.word	0x20010374
 8018b8c:	2000b9c0 	.word	0x2000b9c0

08018b90 <rmw_node_get_graph_guard_condition>:
 8018b90:	6843      	ldr	r3, [r0, #4]
 8018b92:	6918      	ldr	r0, [r3, #16]
 8018b94:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8018b98:	4770      	bx	lr
 8018b9a:	bf00      	nop

08018b9c <rmw_send_request>:
 8018b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018ba0:	4604      	mov	r4, r0
 8018ba2:	6800      	ldr	r0, [r0, #0]
 8018ba4:	b08b      	sub	sp, #44	; 0x2c
 8018ba6:	460e      	mov	r6, r1
 8018ba8:	4615      	mov	r5, r2
 8018baa:	b128      	cbz	r0, 8018bb8 <rmw_send_request+0x1c>
 8018bac:	4b21      	ldr	r3, [pc, #132]	; (8018c34 <rmw_send_request+0x98>)
 8018bae:	6819      	ldr	r1, [r3, #0]
 8018bb0:	f7e7 fb46 	bl	8000240 <strcmp>
 8018bb4:	2800      	cmp	r0, #0
 8018bb6:	d139      	bne.n	8018c2c <rmw_send_request+0x90>
 8018bb8:	6864      	ldr	r4, [r4, #4]
 8018bba:	2700      	movs	r7, #0
 8018bbc:	6963      	ldr	r3, [r4, #20]
 8018bbe:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 8018bc2:	689b      	ldr	r3, [r3, #8]
 8018bc4:	4798      	blx	r3
 8018bc6:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8018bca:	4630      	mov	r0, r6
 8018bcc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018bd0:	4798      	blx	r3
 8018bd2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018bd6:	9000      	str	r0, [sp, #0]
 8018bd8:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8018bdc:	6922      	ldr	r2, [r4, #16]
 8018bde:	ab02      	add	r3, sp, #8
 8018be0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8018be2:	f7f9 fb8b 	bl	80122fc <uxr_prepare_output_stream>
 8018be6:	e9c5 0700 	strd	r0, r7, [r5]
 8018bea:	b198      	cbz	r0, 8018c14 <rmw_send_request+0x78>
 8018bec:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8018bf0:	a902      	add	r1, sp, #8
 8018bf2:	4630      	mov	r0, r6
 8018bf4:	4798      	blx	r3
 8018bf6:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8018bfa:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8018bfe:	2b01      	cmp	r3, #1
 8018c00:	d00c      	beq.n	8018c1c <rmw_send_request+0x80>
 8018c02:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8018c04:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018c08:	f7f8 fd7a 	bl	8011700 <uxr_run_session_until_confirm_delivery>
 8018c0c:	4638      	mov	r0, r7
 8018c0e:	b00b      	add	sp, #44	; 0x2c
 8018c10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018c14:	2001      	movs	r0, #1
 8018c16:	b00b      	add	sp, #44	; 0x2c
 8018c18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018c1c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018c20:	f7f8 f9b4 	bl	8010f8c <uxr_flash_output_streams>
 8018c24:	4638      	mov	r0, r7
 8018c26:	b00b      	add	sp, #44	; 0x2c
 8018c28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018c2c:	200c      	movs	r0, #12
 8018c2e:	b00b      	add	sp, #44	; 0x2c
 8018c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018c34:	0801f050 	.word	0x0801f050

08018c38 <rmw_take_request>:
 8018c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018c3c:	4605      	mov	r5, r0
 8018c3e:	6800      	ldr	r0, [r0, #0]
 8018c40:	b089      	sub	sp, #36	; 0x24
 8018c42:	460c      	mov	r4, r1
 8018c44:	4690      	mov	r8, r2
 8018c46:	461e      	mov	r6, r3
 8018c48:	b128      	cbz	r0, 8018c56 <rmw_take_request+0x1e>
 8018c4a:	4b28      	ldr	r3, [pc, #160]	; (8018cec <rmw_take_request+0xb4>)
 8018c4c:	6819      	ldr	r1, [r3, #0]
 8018c4e:	f7e7 faf7 	bl	8000240 <strcmp>
 8018c52:	2800      	cmp	r0, #0
 8018c54:	d146      	bne.n	8018ce4 <rmw_take_request+0xac>
 8018c56:	b10e      	cbz	r6, 8018c5c <rmw_take_request+0x24>
 8018c58:	2300      	movs	r3, #0
 8018c5a:	7033      	strb	r3, [r6, #0]
 8018c5c:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8018c60:	f7f5 fcb2 	bl	800e5c8 <rmw_uxrce_clean_expired_static_input_buffer>
 8018c64:	4648      	mov	r0, r9
 8018c66:	f7f5 fc85 	bl	800e574 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018c6a:	4607      	mov	r7, r0
 8018c6c:	b3b0      	cbz	r0, 8018cdc <rmw_take_request+0xa4>
 8018c6e:	6885      	ldr	r5, [r0, #8]
 8018c70:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8018c74:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 8018c78:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8018c7c:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8018c80:	7423      	strb	r3, [r4, #16]
 8018c82:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 8018c86:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 8018c8a:	f8a4 2011 	strh.w	r2, [r4, #17]
 8018c8e:	74e3      	strb	r3, [r4, #19]
 8018c90:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 8018c94:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 8018c98:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 8018c9c:	6161      	str	r1, [r4, #20]
 8018c9e:	61a2      	str	r2, [r4, #24]
 8018ca0:	61e3      	str	r3, [r4, #28]
 8018ca2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8018ca6:	689b      	ldr	r3, [r3, #8]
 8018ca8:	4798      	blx	r3
 8018caa:	6844      	ldr	r4, [r0, #4]
 8018cac:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8018cb0:	f105 0110 	add.w	r1, r5, #16
 8018cb4:	4668      	mov	r0, sp
 8018cb6:	f7f7 fd69 	bl	801078c <ucdr_init_buffer>
 8018cba:	4641      	mov	r1, r8
 8018cbc:	68e3      	ldr	r3, [r4, #12]
 8018cbe:	4668      	mov	r0, sp
 8018cc0:	4798      	blx	r3
 8018cc2:	4639      	mov	r1, r7
 8018cc4:	4604      	mov	r4, r0
 8018cc6:	480a      	ldr	r0, [pc, #40]	; (8018cf0 <rmw_take_request+0xb8>)
 8018cc8:	f7ff fb2c 	bl	8018324 <put_memory>
 8018ccc:	b106      	cbz	r6, 8018cd0 <rmw_take_request+0x98>
 8018cce:	7034      	strb	r4, [r6, #0]
 8018cd0:	f084 0001 	eor.w	r0, r4, #1
 8018cd4:	b2c0      	uxtb	r0, r0
 8018cd6:	b009      	add	sp, #36	; 0x24
 8018cd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018cdc:	2001      	movs	r0, #1
 8018cde:	b009      	add	sp, #36	; 0x24
 8018ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018ce4:	200c      	movs	r0, #12
 8018ce6:	b009      	add	sp, #36	; 0x24
 8018ce8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018cec:	0801f050 	.word	0x0801f050
 8018cf0:	20010394 	.word	0x20010394

08018cf4 <rmw_send_response>:
 8018cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018cf6:	4605      	mov	r5, r0
 8018cf8:	6800      	ldr	r0, [r0, #0]
 8018cfa:	b091      	sub	sp, #68	; 0x44
 8018cfc:	460c      	mov	r4, r1
 8018cfe:	4616      	mov	r6, r2
 8018d00:	b128      	cbz	r0, 8018d0e <rmw_send_response+0x1a>
 8018d02:	4b29      	ldr	r3, [pc, #164]	; (8018da8 <rmw_send_response+0xb4>)
 8018d04:	6819      	ldr	r1, [r3, #0]
 8018d06:	f7e7 fa9b 	bl	8000240 <strcmp>
 8018d0a:	2800      	cmp	r0, #0
 8018d0c:	d141      	bne.n	8018d92 <rmw_send_response+0x9e>
 8018d0e:	686d      	ldr	r5, [r5, #4]
 8018d10:	68a1      	ldr	r1, [r4, #8]
 8018d12:	6860      	ldr	r0, [r4, #4]
 8018d14:	6faf      	ldr	r7, [r5, #120]	; 0x78
 8018d16:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8018d1a:	9307      	str	r3, [sp, #28]
 8018d1c:	4623      	mov	r3, r4
 8018d1e:	9206      	str	r2, [sp, #24]
 8018d20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018d24:	789b      	ldrb	r3, [r3, #2]
 8018d26:	f88d 2017 	strb.w	r2, [sp, #23]
 8018d2a:	f88d 3016 	strb.w	r3, [sp, #22]
 8018d2e:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8018d32:	68e2      	ldr	r2, [r4, #12]
 8018d34:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018d38:	ab02      	add	r3, sp, #8
 8018d3a:	696c      	ldr	r4, [r5, #20]
 8018d3c:	c307      	stmia	r3!, {r0, r1, r2}
 8018d3e:	68e3      	ldr	r3, [r4, #12]
 8018d40:	4798      	blx	r3
 8018d42:	6844      	ldr	r4, [r0, #4]
 8018d44:	4630      	mov	r0, r6
 8018d46:	6923      	ldr	r3, [r4, #16]
 8018d48:	4798      	blx	r3
 8018d4a:	f100 0318 	add.w	r3, r0, #24
 8018d4e:	6938      	ldr	r0, [r7, #16]
 8018d50:	9300      	str	r3, [sp, #0]
 8018d52:	ab08      	add	r3, sp, #32
 8018d54:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018d58:	692a      	ldr	r2, [r5, #16]
 8018d5a:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8018d5c:	f7f9 face 	bl	80122fc <uxr_prepare_output_stream>
 8018d60:	b910      	cbnz	r0, 8018d68 <rmw_send_response+0x74>
 8018d62:	2001      	movs	r0, #1
 8018d64:	b011      	add	sp, #68	; 0x44
 8018d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d68:	a902      	add	r1, sp, #8
 8018d6a:	a808      	add	r0, sp, #32
 8018d6c:	f7fa fc32 	bl	80135d4 <uxr_serialize_SampleIdentity>
 8018d70:	68a3      	ldr	r3, [r4, #8]
 8018d72:	a908      	add	r1, sp, #32
 8018d74:	4630      	mov	r0, r6
 8018d76:	4798      	blx	r3
 8018d78:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8018d7c:	6938      	ldr	r0, [r7, #16]
 8018d7e:	2b01      	cmp	r3, #1
 8018d80:	d00a      	beq.n	8018d98 <rmw_send_response+0xa4>
 8018d82:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8018d84:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018d88:	f7f8 fcba 	bl	8011700 <uxr_run_session_until_confirm_delivery>
 8018d8c:	2000      	movs	r0, #0
 8018d8e:	b011      	add	sp, #68	; 0x44
 8018d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d92:	200c      	movs	r0, #12
 8018d94:	b011      	add	sp, #68	; 0x44
 8018d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d98:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018d9c:	f7f8 f8f6 	bl	8010f8c <uxr_flash_output_streams>
 8018da0:	2000      	movs	r0, #0
 8018da2:	b011      	add	sp, #68	; 0x44
 8018da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018da6:	bf00      	nop
 8018da8:	0801f050 	.word	0x0801f050

08018dac <rmw_take_response>:
 8018dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018db0:	4604      	mov	r4, r0
 8018db2:	6800      	ldr	r0, [r0, #0]
 8018db4:	b088      	sub	sp, #32
 8018db6:	460f      	mov	r7, r1
 8018db8:	4690      	mov	r8, r2
 8018dba:	461d      	mov	r5, r3
 8018dbc:	b120      	cbz	r0, 8018dc8 <rmw_take_response+0x1c>
 8018dbe:	4b1d      	ldr	r3, [pc, #116]	; (8018e34 <rmw_take_response+0x88>)
 8018dc0:	6819      	ldr	r1, [r3, #0]
 8018dc2:	f7e7 fa3d 	bl	8000240 <strcmp>
 8018dc6:	bb68      	cbnz	r0, 8018e24 <rmw_take_response+0x78>
 8018dc8:	b10d      	cbz	r5, 8018dce <rmw_take_response+0x22>
 8018dca:	2300      	movs	r3, #0
 8018dcc:	702b      	strb	r3, [r5, #0]
 8018dce:	6864      	ldr	r4, [r4, #4]
 8018dd0:	f7f5 fbfa 	bl	800e5c8 <rmw_uxrce_clean_expired_static_input_buffer>
 8018dd4:	4620      	mov	r0, r4
 8018dd6:	f7f5 fbcd 	bl	800e574 <rmw_uxrce_find_static_input_buffer_by_owner>
 8018dda:	4606      	mov	r6, r0
 8018ddc:	b330      	cbz	r0, 8018e2c <rmw_take_response+0x80>
 8018dde:	6963      	ldr	r3, [r4, #20]
 8018de0:	6884      	ldr	r4, [r0, #8]
 8018de2:	68db      	ldr	r3, [r3, #12]
 8018de4:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 8018de8:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8018dec:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8018df0:	4798      	blx	r3
 8018df2:	6847      	ldr	r7, [r0, #4]
 8018df4:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 8018df8:	f104 0110 	add.w	r1, r4, #16
 8018dfc:	4668      	mov	r0, sp
 8018dfe:	f7f7 fcc5 	bl	801078c <ucdr_init_buffer>
 8018e02:	4641      	mov	r1, r8
 8018e04:	68fb      	ldr	r3, [r7, #12]
 8018e06:	4668      	mov	r0, sp
 8018e08:	4798      	blx	r3
 8018e0a:	4631      	mov	r1, r6
 8018e0c:	4604      	mov	r4, r0
 8018e0e:	480a      	ldr	r0, [pc, #40]	; (8018e38 <rmw_take_response+0x8c>)
 8018e10:	f7ff fa88 	bl	8018324 <put_memory>
 8018e14:	b105      	cbz	r5, 8018e18 <rmw_take_response+0x6c>
 8018e16:	702c      	strb	r4, [r5, #0]
 8018e18:	f084 0001 	eor.w	r0, r4, #1
 8018e1c:	b2c0      	uxtb	r0, r0
 8018e1e:	b008      	add	sp, #32
 8018e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e24:	200c      	movs	r0, #12
 8018e26:	b008      	add	sp, #32
 8018e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e2c:	2001      	movs	r0, #1
 8018e2e:	b008      	add	sp, #32
 8018e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e34:	0801f050 	.word	0x0801f050
 8018e38:	20010394 	.word	0x20010394

08018e3c <rmw_create_service>:
 8018e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e40:	b091      	sub	sp, #68	; 0x44
 8018e42:	2900      	cmp	r1, #0
 8018e44:	f000 80bb 	beq.w	8018fbe <rmw_create_service+0x182>
 8018e48:	4606      	mov	r6, r0
 8018e4a:	2800      	cmp	r0, #0
 8018e4c:	f000 80b7 	beq.w	8018fbe <rmw_create_service+0x182>
 8018e50:	4614      	mov	r4, r2
 8018e52:	6800      	ldr	r0, [r0, #0]
 8018e54:	4689      	mov	r9, r1
 8018e56:	461d      	mov	r5, r3
 8018e58:	f7f5 fd46 	bl	800e8e8 <is_uxrce_rmw_identifier_valid>
 8018e5c:	2c00      	cmp	r4, #0
 8018e5e:	f000 80ae 	beq.w	8018fbe <rmw_create_service+0x182>
 8018e62:	f080 0001 	eor.w	r0, r0, #1
 8018e66:	b2c0      	uxtb	r0, r0
 8018e68:	2800      	cmp	r0, #0
 8018e6a:	f040 80a8 	bne.w	8018fbe <rmw_create_service+0x182>
 8018e6e:	7823      	ldrb	r3, [r4, #0]
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	f000 80a4 	beq.w	8018fbe <rmw_create_service+0x182>
 8018e76:	2d00      	cmp	r5, #0
 8018e78:	f000 80a1 	beq.w	8018fbe <rmw_create_service+0x182>
 8018e7c:	4856      	ldr	r0, [pc, #344]	; (8018fd8 <rmw_create_service+0x19c>)
 8018e7e:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8018e82:	f7ff fa3f 	bl	8018304 <get_memory>
 8018e86:	4606      	mov	r6, r0
 8018e88:	2800      	cmp	r0, #0
 8018e8a:	f000 8099 	beq.w	8018fc0 <rmw_create_service+0x184>
 8018e8e:	6887      	ldr	r7, [r0, #8]
 8018e90:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 8018e94:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 8018e98:	f7ff faba 	bl	8018410 <rmw_get_implementation_identifier>
 8018e9c:	67f8      	str	r0, [r7, #124]	; 0x7c
 8018e9e:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 8018ea2:	4620      	mov	r0, r4
 8018ea4:	f7e7 fa2c 	bl	8000300 <strlen>
 8018ea8:	1c42      	adds	r2, r0, #1
 8018eaa:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 8018eae:	2a3c      	cmp	r2, #60	; 0x3c
 8018eb0:	f200 808a 	bhi.w	8018fc8 <rmw_create_service+0x18c>
 8018eb4:	4621      	mov	r1, r4
 8018eb6:	4650      	mov	r0, sl
 8018eb8:	f003 fd6d 	bl	801c996 <memcpy>
 8018ebc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018ec0:	4629      	mov	r1, r5
 8018ec2:	2250      	movs	r2, #80	; 0x50
 8018ec4:	f107 0020 	add.w	r0, r7, #32
 8018ec8:	f8c7 8078 	str.w	r8, [r7, #120]	; 0x78
 8018ecc:	677b      	str	r3, [r7, #116]	; 0x74
 8018ece:	f003 fd62 	bl	801c996 <memcpy>
 8018ed2:	4648      	mov	r0, r9
 8018ed4:	4941      	ldr	r1, [pc, #260]	; (8018fdc <rmw_create_service+0x1a0>)
 8018ed6:	f7f5 fd21 	bl	800e91c <get_service_typesupport_handle>
 8018eda:	2800      	cmp	r0, #0
 8018edc:	d074      	beq.n	8018fc8 <rmw_create_service+0x18c>
 8018ede:	6843      	ldr	r3, [r0, #4]
 8018ee0:	617b      	str	r3, [r7, #20]
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	d070      	beq.n	8018fc8 <rmw_create_service+0x18c>
 8018ee6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018eea:	2108      	movs	r1, #8
 8018eec:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8018fe4 <rmw_create_service+0x1a8>
 8018ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8018ef4:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8018fe8 <rmw_create_service+0x1ac>
 8018ef8:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	; 0x5a2
 8018efc:	1c42      	adds	r2, r0, #1
 8018efe:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
 8018f02:	f7f7 fef3 	bl	8010cec <uxr_object_id>
 8018f06:	2364      	movs	r3, #100	; 0x64
 8018f08:	6138      	str	r0, [r7, #16]
 8018f0a:	4652      	mov	r2, sl
 8018f0c:	4649      	mov	r1, r9
 8018f0e:	6978      	ldr	r0, [r7, #20]
 8018f10:	f7f5 fc3e 	bl	800e790 <generate_service_types>
 8018f14:	2800      	cmp	r0, #0
 8018f16:	d057      	beq.n	8018fc8 <rmw_create_service+0x18c>
 8018f18:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8018fec <rmw_create_service+0x1b0>
 8018f1c:	233c      	movs	r3, #60	; 0x3c
 8018f1e:	4a30      	ldr	r2, [pc, #192]	; (8018fe0 <rmw_create_service+0x1a4>)
 8018f20:	4620      	mov	r0, r4
 8018f22:	4659      	mov	r1, fp
 8018f24:	f7f5 fc02 	bl	800e72c <generate_service_topics>
 8018f28:	2800      	cmp	r0, #0
 8018f2a:	d04d      	beq.n	8018fc8 <rmw_create_service+0x18c>
 8018f2c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8018f30:	a80c      	add	r0, sp, #48	; 0x30
 8018f32:	4629      	mov	r1, r5
 8018f34:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8018f38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018f3c:	f7f5 fbde 	bl	800e6fc <convert_qos_profile>
 8018f40:	4a27      	ldr	r2, [pc, #156]	; (8018fe0 <rmw_create_service+0x1a4>)
 8018f42:	a80c      	add	r0, sp, #48	; 0x30
 8018f44:	9400      	str	r4, [sp, #0]
 8018f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f48:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018f4c:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8018f50:	c803      	ldmia	r0, {r0, r1}
 8018f52:	9a08      	ldr	r2, [sp, #32]
 8018f54:	9005      	str	r0, [sp, #20]
 8018f56:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8018f5a:	2306      	movs	r3, #6
 8018f5c:	f8ad 1018 	strh.w	r1, [sp, #24]
 8018f60:	9307      	str	r3, [sp, #28]
 8018f62:	6811      	ldr	r1, [r2, #0]
 8018f64:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8018f68:	693a      	ldr	r2, [r7, #16]
 8018f6a:	f7f7 fe85 	bl	8010c78 <uxr_buffer_create_replier_bin>
 8018f6e:	4602      	mov	r2, r0
 8018f70:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8018f74:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8018f78:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8018f7c:	f7f5 fba2 	bl	800e6c4 <run_xrce_session>
 8018f80:	b310      	cbz	r0, 8018fc8 <rmw_create_service+0x18c>
 8018f82:	7a2b      	ldrb	r3, [r5, #8]
 8018f84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018f88:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8018f8c:	2b02      	cmp	r3, #2
 8018f8e:	920e      	str	r2, [sp, #56]	; 0x38
 8018f90:	f04f 0200 	mov.w	r2, #0
 8018f94:	920f      	str	r2, [sp, #60]	; 0x3c
 8018f96:	bf0c      	ite	eq
 8018f98:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	; 0x37c
 8018f9c:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	; 0x374
 8018fa0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8018fa4:	930b      	str	r3, [sp, #44]	; 0x2c
 8018fa6:	ab0e      	add	r3, sp, #56	; 0x38
 8018fa8:	673a      	str	r2, [r7, #112]	; 0x70
 8018faa:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 8018fae:	9300      	str	r3, [sp, #0]
 8018fb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018fb2:	6811      	ldr	r1, [r2, #0]
 8018fb4:	693a      	ldr	r2, [r7, #16]
 8018fb6:	f001 faff 	bl	801a5b8 <uxr_buffer_request_data>
 8018fba:	8338      	strh	r0, [r7, #24]
 8018fbc:	e000      	b.n	8018fc0 <rmw_create_service+0x184>
 8018fbe:	2600      	movs	r6, #0
 8018fc0:	4630      	mov	r0, r6
 8018fc2:	b011      	add	sp, #68	; 0x44
 8018fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fc8:	4630      	mov	r0, r6
 8018fca:	2600      	movs	r6, #0
 8018fcc:	f7f5 fa40 	bl	800e450 <rmw_uxrce_fini_service_memory>
 8018fd0:	4630      	mov	r0, r6
 8018fd2:	b011      	add	sp, #68	; 0x44
 8018fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fd8:	20010374 	.word	0x20010374
 8018fdc:	0801d950 	.word	0x0801d950
 8018fe0:	20010a58 	.word	0x20010a58
 8018fe4:	20010a94 	.word	0x20010a94
 8018fe8:	200109f4 	.word	0x200109f4
 8018fec:	200109b8 	.word	0x200109b8

08018ff0 <rmw_destroy_service>:
 8018ff0:	b570      	push	{r4, r5, r6, lr}
 8018ff2:	b128      	cbz	r0, 8019000 <rmw_destroy_service+0x10>
 8018ff4:	4604      	mov	r4, r0
 8018ff6:	6800      	ldr	r0, [r0, #0]
 8018ff8:	460d      	mov	r5, r1
 8018ffa:	f7f5 fc75 	bl	800e8e8 <is_uxrce_rmw_identifier_valid>
 8018ffe:	b910      	cbnz	r0, 8019006 <rmw_destroy_service+0x16>
 8019000:	2401      	movs	r4, #1
 8019002:	4620      	mov	r0, r4
 8019004:	bd70      	pop	{r4, r5, r6, pc}
 8019006:	6863      	ldr	r3, [r4, #4]
 8019008:	2b00      	cmp	r3, #0
 801900a:	d0f9      	beq.n	8019000 <rmw_destroy_service+0x10>
 801900c:	2d00      	cmp	r5, #0
 801900e:	d0f7      	beq.n	8019000 <rmw_destroy_service+0x10>
 8019010:	6828      	ldr	r0, [r5, #0]
 8019012:	f7f5 fc69 	bl	800e8e8 <is_uxrce_rmw_identifier_valid>
 8019016:	2800      	cmp	r0, #0
 8019018:	d0f2      	beq.n	8019000 <rmw_destroy_service+0x10>
 801901a:	686e      	ldr	r6, [r5, #4]
 801901c:	2e00      	cmp	r6, #0
 801901e:	d0ef      	beq.n	8019000 <rmw_destroy_service+0x10>
 8019020:	6864      	ldr	r4, [r4, #4]
 8019022:	6932      	ldr	r2, [r6, #16]
 8019024:	6920      	ldr	r0, [r4, #16]
 8019026:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801902a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801902e:	6819      	ldr	r1, [r3, #0]
 8019030:	f001 fafc 	bl	801a62c <uxr_buffer_cancel_data>
 8019034:	4602      	mov	r2, r0
 8019036:	6920      	ldr	r0, [r4, #16]
 8019038:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801903c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8019040:	f7f5 fb40 	bl	800e6c4 <run_xrce_session>
 8019044:	6920      	ldr	r0, [r4, #16]
 8019046:	6932      	ldr	r2, [r6, #16]
 8019048:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801904c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019050:	6819      	ldr	r1, [r3, #0]
 8019052:	f7f7 fc0f 	bl	8010874 <uxr_buffer_delete_entity>
 8019056:	4602      	mov	r2, r0
 8019058:	6920      	ldr	r0, [r4, #16]
 801905a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801905e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8019062:	f7f5 fb2f 	bl	800e6c4 <run_xrce_session>
 8019066:	4603      	mov	r3, r0
 8019068:	4628      	mov	r0, r5
 801906a:	2b00      	cmp	r3, #0
 801906c:	bf14      	ite	ne
 801906e:	2400      	movne	r4, #0
 8019070:	2402      	moveq	r4, #2
 8019072:	f7f5 f9ed 	bl	800e450 <rmw_uxrce_fini_service_memory>
 8019076:	e7c4      	b.n	8019002 <rmw_destroy_service+0x12>

08019078 <rmw_service_response_publisher_get_actual_qos>:
 8019078:	b181      	cbz	r1, 801909c <rmw_service_response_publisher_get_actual_qos+0x24>
 801907a:	4603      	mov	r3, r0
 801907c:	b510      	push	{r4, lr}
 801907e:	fab0 f480 	clz	r4, r0
 8019082:	0964      	lsrs	r4, r4, #5
 8019084:	b140      	cbz	r0, 8019098 <rmw_service_response_publisher_get_actual_qos+0x20>
 8019086:	685b      	ldr	r3, [r3, #4]
 8019088:	4608      	mov	r0, r1
 801908a:	2250      	movs	r2, #80	; 0x50
 801908c:	f103 0120 	add.w	r1, r3, #32
 8019090:	f003 fc81 	bl	801c996 <memcpy>
 8019094:	4620      	mov	r0, r4
 8019096:	bd10      	pop	{r4, pc}
 8019098:	200b      	movs	r0, #11
 801909a:	bd10      	pop	{r4, pc}
 801909c:	200b      	movs	r0, #11
 801909e:	4770      	bx	lr

080190a0 <rmw_service_request_subscription_get_actual_qos>:
 80190a0:	b178      	cbz	r0, 80190c2 <rmw_service_request_subscription_get_actual_qos+0x22>
 80190a2:	b510      	push	{r4, lr}
 80190a4:	fab1 f481 	clz	r4, r1
 80190a8:	0964      	lsrs	r4, r4, #5
 80190aa:	b141      	cbz	r1, 80190be <rmw_service_request_subscription_get_actual_qos+0x1e>
 80190ac:	6843      	ldr	r3, [r0, #4]
 80190ae:	2250      	movs	r2, #80	; 0x50
 80190b0:	4608      	mov	r0, r1
 80190b2:	f103 0120 	add.w	r1, r3, #32
 80190b6:	f003 fc6e 	bl	801c996 <memcpy>
 80190ba:	4620      	mov	r0, r4
 80190bc:	bd10      	pop	{r4, pc}
 80190be:	200b      	movs	r0, #11
 80190c0:	bd10      	pop	{r4, pc}
 80190c2:	200b      	movs	r0, #11
 80190c4:	4770      	bx	lr
 80190c6:	bf00      	nop

080190c8 <rmw_create_subscription>:
 80190c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190cc:	b08d      	sub	sp, #52	; 0x34
 80190ce:	2900      	cmp	r1, #0
 80190d0:	f000 80d8 	beq.w	8019284 <rmw_create_subscription+0x1bc>
 80190d4:	4604      	mov	r4, r0
 80190d6:	2800      	cmp	r0, #0
 80190d8:	f000 80d4 	beq.w	8019284 <rmw_create_subscription+0x1bc>
 80190dc:	6800      	ldr	r0, [r0, #0]
 80190de:	460e      	mov	r6, r1
 80190e0:	4615      	mov	r5, r2
 80190e2:	461f      	mov	r7, r3
 80190e4:	f7f5 fc00 	bl	800e8e8 <is_uxrce_rmw_identifier_valid>
 80190e8:	f080 0001 	eor.w	r0, r0, #1
 80190ec:	b2c0      	uxtb	r0, r0
 80190ee:	2800      	cmp	r0, #0
 80190f0:	f040 80c8 	bne.w	8019284 <rmw_create_subscription+0x1bc>
 80190f4:	2d00      	cmp	r5, #0
 80190f6:	f000 80c5 	beq.w	8019284 <rmw_create_subscription+0x1bc>
 80190fa:	782b      	ldrb	r3, [r5, #0]
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	f000 80c1 	beq.w	8019284 <rmw_create_subscription+0x1bc>
 8019102:	2f00      	cmp	r7, #0
 8019104:	f000 80be 	beq.w	8019284 <rmw_create_subscription+0x1bc>
 8019108:	4867      	ldr	r0, [pc, #412]	; (80192a8 <rmw_create_subscription+0x1e0>)
 801910a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801910e:	f7ff f8f9 	bl	8018304 <get_memory>
 8019112:	4604      	mov	r4, r0
 8019114:	2800      	cmp	r0, #0
 8019116:	f000 80b6 	beq.w	8019286 <rmw_create_subscription+0x1be>
 801911a:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801911e:	f108 0a98 	add.w	sl, r8, #152	; 0x98
 8019122:	f8c8 8080 	str.w	r8, [r8, #128]	; 0x80
 8019126:	f7ff f973 	bl	8018410 <rmw_get_implementation_identifier>
 801912a:	f8c8 007c 	str.w	r0, [r8, #124]	; 0x7c
 801912e:	f8c8 a084 	str.w	sl, [r8, #132]	; 0x84
 8019132:	4628      	mov	r0, r5
 8019134:	f7e7 f8e4 	bl	8000300 <strlen>
 8019138:	3001      	adds	r0, #1
 801913a:	f108 047c 	add.w	r4, r8, #124	; 0x7c
 801913e:	283c      	cmp	r0, #60	; 0x3c
 8019140:	f200 80a5 	bhi.w	801928e <rmw_create_subscription+0x1c6>
 8019144:	462b      	mov	r3, r5
 8019146:	4a59      	ldr	r2, [pc, #356]	; (80192ac <rmw_create_subscription+0x1e4>)
 8019148:	213c      	movs	r1, #60	; 0x3c
 801914a:	4650      	mov	r0, sl
 801914c:	f003 fa18 	bl	801c580 <sniprintf>
 8019150:	4639      	mov	r1, r7
 8019152:	2250      	movs	r2, #80	; 0x50
 8019154:	f108 0028 	add.w	r0, r8, #40	; 0x28
 8019158:	f8c8 9020 	str.w	r9, [r8, #32]
 801915c:	f003 fc1b 	bl	801c996 <memcpy>
 8019160:	4630      	mov	r0, r6
 8019162:	4953      	ldr	r1, [pc, #332]	; (80192b0 <rmw_create_subscription+0x1e8>)
 8019164:	f7f5 fbce 	bl	800e904 <get_message_typesupport_handle>
 8019168:	2800      	cmp	r0, #0
 801916a:	f000 8090 	beq.w	801928e <rmw_create_subscription+0x1c6>
 801916e:	6842      	ldr	r2, [r0, #4]
 8019170:	f8c8 2018 	str.w	r2, [r8, #24]
 8019174:	2a00      	cmp	r2, #0
 8019176:	f000 808a 	beq.w	801928e <rmw_create_subscription+0x1c6>
 801917a:	4629      	mov	r1, r5
 801917c:	463b      	mov	r3, r7
 801917e:	4648      	mov	r0, r9
 8019180:	f7ff fb84 	bl	801888c <create_topic>
 8019184:	f8c8 001c 	str.w	r0, [r8, #28]
 8019188:	2800      	cmp	r0, #0
 801918a:	f000 8085 	beq.w	8019298 <rmw_create_subscription+0x1d0>
 801918e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019192:	2104      	movs	r1, #4
 8019194:	2506      	movs	r5, #6
 8019196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801919a:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 801919e:	1c42      	adds	r2, r0, #1
 80191a0:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 80191a4:	f7f7 fda2 	bl	8010cec <uxr_object_id>
 80191a8:	f8c8 0010 	str.w	r0, [r8, #16]
 80191ac:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80191b0:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 80191b4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80191b8:	9500      	str	r5, [sp, #0]
 80191ba:	6819      	ldr	r1, [r3, #0]
 80191bc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80191c0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80191c4:	f7f7 fc3a 	bl	8010a3c <uxr_buffer_create_subscriber_bin>
 80191c8:	4602      	mov	r2, r0
 80191ca:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80191ce:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80191d2:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80191d6:	f7f5 fa75 	bl	800e6c4 <run_xrce_session>
 80191da:	2800      	cmp	r0, #0
 80191dc:	d057      	beq.n	801928e <rmw_create_subscription+0x1c6>
 80191de:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80191e2:	4629      	mov	r1, r5
 80191e4:	ae08      	add	r6, sp, #32
 80191e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80191ea:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 80191ee:	1c42      	adds	r2, r0, #1
 80191f0:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 80191f4:	f7f7 fd7a 	bl	8010cec <uxr_object_id>
 80191f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80191fc:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8019200:	4639      	mov	r1, r7
 8019202:	f8c8 0014 	str.w	r0, [r8, #20]
 8019206:	4630      	mov	r0, r6
 8019208:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 801920c:	9305      	str	r3, [sp, #20]
 801920e:	f7f5 fa75 	bl	800e6fc <convert_qos_profile>
 8019212:	9503      	str	r5, [sp, #12]
 8019214:	9b05      	ldr	r3, [sp, #20]
 8019216:	e896 0003 	ldmia.w	r6, {r0, r1}
 801921a:	9001      	str	r0, [sp, #4]
 801921c:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 8019220:	f8ad 1008 	strh.w	r1, [sp, #8]
 8019224:	691b      	ldr	r3, [r3, #16]
 8019226:	9300      	str	r3, [sp, #0]
 8019228:	f8db 1000 	ldr.w	r1, [fp]
 801922c:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 8019230:	f7f7 fcaa 	bl	8010b88 <uxr_buffer_create_datareader_bin>
 8019234:	4602      	mov	r2, r0
 8019236:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801923a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801923e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8019242:	f7f5 fa3f 	bl	800e6c4 <run_xrce_session>
 8019246:	b310      	cbz	r0, 801928e <rmw_create_subscription+0x1c6>
 8019248:	7a3b      	ldrb	r3, [r7, #8]
 801924a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801924e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8019252:	2b02      	cmp	r3, #2
 8019254:	920a      	str	r2, [sp, #40]	; 0x28
 8019256:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801925a:	f04f 0200 	mov.w	r2, #0
 801925e:	bf08      	it	eq
 8019260:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 8019264:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019268:	bf18      	it	ne
 801926a:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	; 0xd4
 801926e:	920b      	str	r2, [sp, #44]	; 0x2c
 8019270:	9307      	str	r3, [sp, #28]
 8019272:	ab0a      	add	r3, sp, #40	; 0x28
 8019274:	9300      	str	r3, [sp, #0]
 8019276:	9b07      	ldr	r3, [sp, #28]
 8019278:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801927c:	6809      	ldr	r1, [r1, #0]
 801927e:	f001 f99b 	bl	801a5b8 <uxr_buffer_request_data>
 8019282:	e000      	b.n	8019286 <rmw_create_subscription+0x1be>
 8019284:	2400      	movs	r4, #0
 8019286:	4620      	mov	r0, r4
 8019288:	b00d      	add	sp, #52	; 0x34
 801928a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801928e:	f8d8 001c 	ldr.w	r0, [r8, #28]
 8019292:	b108      	cbz	r0, 8019298 <rmw_create_subscription+0x1d0>
 8019294:	f7f5 f908 	bl	800e4a8 <rmw_uxrce_fini_topic_memory>
 8019298:	4620      	mov	r0, r4
 801929a:	2400      	movs	r4, #0
 801929c:	f7f5 f8c2 	bl	800e424 <rmw_uxrce_fini_subscription_memory>
 80192a0:	4620      	mov	r0, r4
 80192a2:	b00d      	add	sp, #52	; 0x34
 80192a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192a8:	200103a4 	.word	0x200103a4
 80192ac:	0801e5ac 	.word	0x0801e5ac
 80192b0:	0801d950 	.word	0x0801d950

080192b4 <rmw_subscription_get_actual_qos>:
 80192b4:	b178      	cbz	r0, 80192d6 <rmw_subscription_get_actual_qos+0x22>
 80192b6:	b510      	push	{r4, lr}
 80192b8:	fab1 f481 	clz	r4, r1
 80192bc:	0964      	lsrs	r4, r4, #5
 80192be:	b141      	cbz	r1, 80192d2 <rmw_subscription_get_actual_qos+0x1e>
 80192c0:	6843      	ldr	r3, [r0, #4]
 80192c2:	2250      	movs	r2, #80	; 0x50
 80192c4:	4608      	mov	r0, r1
 80192c6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80192ca:	f003 fb64 	bl	801c996 <memcpy>
 80192ce:	4620      	mov	r0, r4
 80192d0:	bd10      	pop	{r4, pc}
 80192d2:	200b      	movs	r0, #11
 80192d4:	bd10      	pop	{r4, pc}
 80192d6:	200b      	movs	r0, #11
 80192d8:	4770      	bx	lr
 80192da:	bf00      	nop

080192dc <rmw_destroy_subscription>:
 80192dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192e0:	b128      	cbz	r0, 80192ee <rmw_destroy_subscription+0x12>
 80192e2:	4604      	mov	r4, r0
 80192e4:	6800      	ldr	r0, [r0, #0]
 80192e6:	460d      	mov	r5, r1
 80192e8:	f7f5 fafe 	bl	800e8e8 <is_uxrce_rmw_identifier_valid>
 80192ec:	b918      	cbnz	r0, 80192f6 <rmw_destroy_subscription+0x1a>
 80192ee:	2401      	movs	r4, #1
 80192f0:	4620      	mov	r0, r4
 80192f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192f6:	6863      	ldr	r3, [r4, #4]
 80192f8:	2b00      	cmp	r3, #0
 80192fa:	d0f8      	beq.n	80192ee <rmw_destroy_subscription+0x12>
 80192fc:	fab5 f485 	clz	r4, r5
 8019300:	0964      	lsrs	r4, r4, #5
 8019302:	2d00      	cmp	r5, #0
 8019304:	d0f3      	beq.n	80192ee <rmw_destroy_subscription+0x12>
 8019306:	6828      	ldr	r0, [r5, #0]
 8019308:	f7f5 faee 	bl	800e8e8 <is_uxrce_rmw_identifier_valid>
 801930c:	2800      	cmp	r0, #0
 801930e:	d0ee      	beq.n	80192ee <rmw_destroy_subscription+0x12>
 8019310:	686e      	ldr	r6, [r5, #4]
 8019312:	2e00      	cmp	r6, #0
 8019314:	d0eb      	beq.n	80192ee <rmw_destroy_subscription+0x12>
 8019316:	6a37      	ldr	r7, [r6, #32]
 8019318:	6972      	ldr	r2, [r6, #20]
 801931a:	6938      	ldr	r0, [r7, #16]
 801931c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8019320:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019324:	6819      	ldr	r1, [r3, #0]
 8019326:	f001 f981 	bl	801a62c <uxr_buffer_cancel_data>
 801932a:	4602      	mov	r2, r0
 801932c:	6938      	ldr	r0, [r7, #16]
 801932e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8019332:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8019336:	f7f5 f9c5 	bl	800e6c4 <run_xrce_session>
 801933a:	69f0      	ldr	r0, [r6, #28]
 801933c:	f7ff faf6 	bl	801892c <destroy_topic>
 8019340:	6a33      	ldr	r3, [r6, #32]
 8019342:	6972      	ldr	r2, [r6, #20]
 8019344:	6918      	ldr	r0, [r3, #16]
 8019346:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801934a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801934e:	6819      	ldr	r1, [r3, #0]
 8019350:	f7f7 fa90 	bl	8010874 <uxr_buffer_delete_entity>
 8019354:	6a33      	ldr	r3, [r6, #32]
 8019356:	4680      	mov	r8, r0
 8019358:	6932      	ldr	r2, [r6, #16]
 801935a:	6918      	ldr	r0, [r3, #16]
 801935c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8019360:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019364:	6819      	ldr	r1, [r3, #0]
 8019366:	f7f7 fa85 	bl	8010874 <uxr_buffer_delete_entity>
 801936a:	4606      	mov	r6, r0
 801936c:	6938      	ldr	r0, [r7, #16]
 801936e:	4642      	mov	r2, r8
 8019370:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8019374:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8019378:	f7f5 f9a4 	bl	800e6c4 <run_xrce_session>
 801937c:	693f      	ldr	r7, [r7, #16]
 801937e:	4632      	mov	r2, r6
 8019380:	4606      	mov	r6, r0
 8019382:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8019386:	4638      	mov	r0, r7
 8019388:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 801938c:	f7f5 f99a 	bl	800e6c4 <run_xrce_session>
 8019390:	b126      	cbz	r6, 801939c <rmw_destroy_subscription+0xc0>
 8019392:	b118      	cbz	r0, 801939c <rmw_destroy_subscription+0xc0>
 8019394:	4628      	mov	r0, r5
 8019396:	f7f5 f845 	bl	800e424 <rmw_uxrce_fini_subscription_memory>
 801939a:	e7a9      	b.n	80192f0 <rmw_destroy_subscription+0x14>
 801939c:	2402      	movs	r4, #2
 801939e:	e7f9      	b.n	8019394 <rmw_destroy_subscription+0xb8>

080193a0 <rmw_take_with_info>:
 80193a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80193a2:	4604      	mov	r4, r0
 80193a4:	6800      	ldr	r0, [r0, #0]
 80193a6:	b089      	sub	sp, #36	; 0x24
 80193a8:	460f      	mov	r7, r1
 80193aa:	4615      	mov	r5, r2
 80193ac:	b128      	cbz	r0, 80193ba <rmw_take_with_info+0x1a>
 80193ae:	4b24      	ldr	r3, [pc, #144]	; (8019440 <rmw_take_with_info+0xa0>)
 80193b0:	6819      	ldr	r1, [r3, #0]
 80193b2:	f7e6 ff45 	bl	8000240 <strcmp>
 80193b6:	2800      	cmp	r0, #0
 80193b8:	d13e      	bne.n	8019438 <rmw_take_with_info+0x98>
 80193ba:	b305      	cbz	r5, 80193fe <rmw_take_with_info+0x5e>
 80193bc:	2300      	movs	r3, #0
 80193be:	6864      	ldr	r4, [r4, #4]
 80193c0:	702b      	strb	r3, [r5, #0]
 80193c2:	f7f5 f901 	bl	800e5c8 <rmw_uxrce_clean_expired_static_input_buffer>
 80193c6:	4620      	mov	r0, r4
 80193c8:	f7f5 f8d4 	bl	800e574 <rmw_uxrce_find_static_input_buffer_by_owner>
 80193cc:	4606      	mov	r6, r0
 80193ce:	b1f0      	cbz	r0, 801940e <rmw_take_with_info+0x6e>
 80193d0:	6881      	ldr	r1, [r0, #8]
 80193d2:	4668      	mov	r0, sp
 80193d4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 80193d8:	3110      	adds	r1, #16
 80193da:	f7f7 f9d7 	bl	801078c <ucdr_init_buffer>
 80193de:	69a3      	ldr	r3, [r4, #24]
 80193e0:	4639      	mov	r1, r7
 80193e2:	4668      	mov	r0, sp
 80193e4:	68db      	ldr	r3, [r3, #12]
 80193e6:	4798      	blx	r3
 80193e8:	4604      	mov	r4, r0
 80193ea:	4631      	mov	r1, r6
 80193ec:	4815      	ldr	r0, [pc, #84]	; (8019444 <rmw_take_with_info+0xa4>)
 80193ee:	f7fe ff99 	bl	8018324 <put_memory>
 80193f2:	702c      	strb	r4, [r5, #0]
 80193f4:	f084 0001 	eor.w	r0, r4, #1
 80193f8:	b2c0      	uxtb	r0, r0
 80193fa:	b009      	add	sp, #36	; 0x24
 80193fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80193fe:	6864      	ldr	r4, [r4, #4]
 8019400:	f7f5 f8e2 	bl	800e5c8 <rmw_uxrce_clean_expired_static_input_buffer>
 8019404:	4620      	mov	r0, r4
 8019406:	f7f5 f8b5 	bl	800e574 <rmw_uxrce_find_static_input_buffer_by_owner>
 801940a:	4605      	mov	r5, r0
 801940c:	b910      	cbnz	r0, 8019414 <rmw_take_with_info+0x74>
 801940e:	2001      	movs	r0, #1
 8019410:	b009      	add	sp, #36	; 0x24
 8019412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019414:	68a9      	ldr	r1, [r5, #8]
 8019416:	4668      	mov	r0, sp
 8019418:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 801941c:	3110      	adds	r1, #16
 801941e:	f7f7 f9b5 	bl	801078c <ucdr_init_buffer>
 8019422:	69a3      	ldr	r3, [r4, #24]
 8019424:	4639      	mov	r1, r7
 8019426:	4668      	mov	r0, sp
 8019428:	68db      	ldr	r3, [r3, #12]
 801942a:	4798      	blx	r3
 801942c:	4629      	mov	r1, r5
 801942e:	4604      	mov	r4, r0
 8019430:	4804      	ldr	r0, [pc, #16]	; (8019444 <rmw_take_with_info+0xa4>)
 8019432:	f7fe ff77 	bl	8018324 <put_memory>
 8019436:	e7dd      	b.n	80193f4 <rmw_take_with_info+0x54>
 8019438:	200c      	movs	r0, #12
 801943a:	b009      	add	sp, #36	; 0x24
 801943c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801943e:	bf00      	nop
 8019440:	0801f050 	.word	0x0801f050
 8019444:	20010394 	.word	0x20010394

08019448 <rmw_uxrce_transport_init>:
 8019448:	b508      	push	{r3, lr}
 801944a:	b108      	cbz	r0, 8019450 <rmw_uxrce_transport_init+0x8>
 801944c:	f100 0210 	add.w	r2, r0, #16
 8019450:	b139      	cbz	r1, 8019462 <rmw_uxrce_transport_init+0x1a>
 8019452:	6949      	ldr	r1, [r1, #20]
 8019454:	4610      	mov	r0, r2
 8019456:	f000 fb2b 	bl	8019ab0 <uxr_init_custom_transport>
 801945a:	f080 0001 	eor.w	r0, r0, #1
 801945e:	b2c0      	uxtb	r0, r0
 8019460:	bd08      	pop	{r3, pc}
 8019462:	4b04      	ldr	r3, [pc, #16]	; (8019474 <rmw_uxrce_transport_init+0x2c>)
 8019464:	4610      	mov	r0, r2
 8019466:	6859      	ldr	r1, [r3, #4]
 8019468:	f000 fb22 	bl	8019ab0 <uxr_init_custom_transport>
 801946c:	f080 0001 	eor.w	r0, r0, #1
 8019470:	b2c0      	uxtb	r0, r0
 8019472:	bd08      	pop	{r3, pc}
 8019474:	2000b9a4 	.word	0x2000b9a4

08019478 <rmw_wait>:
 8019478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801947c:	4698      	mov	r8, r3
 801947e:	ea40 0301 	orr.w	r3, r0, r1
 8019482:	b089      	sub	sp, #36	; 0x24
 8019484:	ea48 0303 	orr.w	r3, r8, r3
 8019488:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801948a:	4313      	orrs	r3, r2
 801948c:	f000 8106 	beq.w	801969c <rmw_wait+0x224>
 8019490:	4605      	mov	r5, r0
 8019492:	460e      	mov	r6, r1
 8019494:	4691      	mov	r9, r2
 8019496:	b16c      	cbz	r4, 80194b4 <rmw_wait+0x3c>
 8019498:	4ba6      	ldr	r3, [pc, #664]	; (8019734 <rmw_wait+0x2bc>)
 801949a:	af04      	add	r7, sp, #16
 801949c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801949e:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80194a2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80194a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80194aa:	f7fe fd4d 	bl	8017f48 <rmw_time_equal>
 80194ae:	2800      	cmp	r0, #0
 80194b0:	f000 810b 	beq.w	80196ca <rmw_wait+0x252>
 80194b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80194b8:	f7f5 f886 	bl	800e5c8 <rmw_uxrce_clean_expired_static_input_buffer>
 80194bc:	4b9e      	ldr	r3, [pc, #632]	; (8019738 <rmw_wait+0x2c0>)
 80194be:	681c      	ldr	r4, [r3, #0]
 80194c0:	b14c      	cbz	r4, 80194d6 <rmw_wait+0x5e>
 80194c2:	4623      	mov	r3, r4
 80194c4:	2100      	movs	r1, #0
 80194c6:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80194ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80194ce:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d1f7      	bne.n	80194c6 <rmw_wait+0x4e>
 80194d6:	f1b9 0f00 	cmp.w	r9, #0
 80194da:	d011      	beq.n	8019500 <rmw_wait+0x88>
 80194dc:	f8d9 1000 	ldr.w	r1, [r9]
 80194e0:	b171      	cbz	r1, 8019500 <rmw_wait+0x88>
 80194e2:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80194e6:	2300      	movs	r3, #0
 80194e8:	2001      	movs	r0, #1
 80194ea:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80194ee:	3301      	adds	r3, #1
 80194f0:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80194f2:	4299      	cmp	r1, r3
 80194f4:	6912      	ldr	r2, [r2, #16]
 80194f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80194fa:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 80194fe:	d1f4      	bne.n	80194ea <rmw_wait+0x72>
 8019500:	f1b8 0f00 	cmp.w	r8, #0
 8019504:	d011      	beq.n	801952a <rmw_wait+0xb2>
 8019506:	f8d8 1000 	ldr.w	r1, [r8]
 801950a:	b171      	cbz	r1, 801952a <rmw_wait+0xb2>
 801950c:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8019510:	2300      	movs	r3, #0
 8019512:	2001      	movs	r0, #1
 8019514:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019518:	3301      	adds	r3, #1
 801951a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801951c:	4299      	cmp	r1, r3
 801951e:	6912      	ldr	r2, [r2, #16]
 8019520:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8019524:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8019528:	d1f4      	bne.n	8019514 <rmw_wait+0x9c>
 801952a:	b185      	cbz	r5, 801954e <rmw_wait+0xd6>
 801952c:	6829      	ldr	r1, [r5, #0]
 801952e:	b171      	cbz	r1, 801954e <rmw_wait+0xd6>
 8019530:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8019534:	2300      	movs	r3, #0
 8019536:	2001      	movs	r0, #1
 8019538:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801953c:	3301      	adds	r3, #1
 801953e:	6a12      	ldr	r2, [r2, #32]
 8019540:	4299      	cmp	r1, r3
 8019542:	6912      	ldr	r2, [r2, #16]
 8019544:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8019548:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801954c:	d1f4      	bne.n	8019538 <rmw_wait+0xc0>
 801954e:	b344      	cbz	r4, 80195a2 <rmw_wait+0x12a>
 8019550:	4622      	mov	r2, r4
 8019552:	2300      	movs	r3, #0
 8019554:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8019558:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 801955c:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 8019560:	440b      	add	r3, r1
 8019562:	b2db      	uxtb	r3, r3
 8019564:	2a00      	cmp	r2, #0
 8019566:	d1f5      	bne.n	8019554 <rmw_wait+0xdc>
 8019568:	2b00      	cmp	r3, #0
 801956a:	d05f      	beq.n	801962c <rmw_wait+0x1b4>
 801956c:	1c7a      	adds	r2, r7, #1
 801956e:	d00d      	beq.n	801958c <rmw_wait+0x114>
 8019570:	ee07 7a90 	vmov	s15, r7
 8019574:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019578:	ee07 3a90 	vmov	s15, r3
 801957c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019580:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8019584:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8019588:	ee17 7a90 	vmov	r7, s15
 801958c:	68a0      	ldr	r0, [r4, #8]
 801958e:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8019592:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 8019596:	2b00      	cmp	r3, #0
 8019598:	f040 808d 	bne.w	80196b6 <rmw_wait+0x23e>
 801959c:	6864      	ldr	r4, [r4, #4]
 801959e:	2c00      	cmp	r4, #0
 80195a0:	d1f4      	bne.n	801958c <rmw_wait+0x114>
 80195a2:	f1b9 0f00 	cmp.w	r9, #0
 80195a6:	f000 80a1 	beq.w	80196ec <rmw_wait+0x274>
 80195aa:	f8d9 7000 	ldr.w	r7, [r9]
 80195ae:	2f00      	cmp	r7, #0
 80195b0:	f000 80a4 	beq.w	80196fc <rmw_wait+0x284>
 80195b4:	2400      	movs	r4, #0
 80195b6:	4627      	mov	r7, r4
 80195b8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80195bc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80195c0:	f7f4 ffd8 	bl	800e574 <rmw_uxrce_find_static_input_buffer_by_owner>
 80195c4:	2800      	cmp	r0, #0
 80195c6:	d03b      	beq.n	8019640 <rmw_wait+0x1c8>
 80195c8:	3401      	adds	r4, #1
 80195ca:	f8d9 3000 	ldr.w	r3, [r9]
 80195ce:	2701      	movs	r7, #1
 80195d0:	42a3      	cmp	r3, r4
 80195d2:	d8f1      	bhi.n	80195b8 <rmw_wait+0x140>
 80195d4:	2701      	movs	r7, #1
 80195d6:	f1b8 0f00 	cmp.w	r8, #0
 80195da:	d010      	beq.n	80195fe <rmw_wait+0x186>
 80195dc:	f8d8 3000 	ldr.w	r3, [r8]
 80195e0:	b16b      	cbz	r3, 80195fe <rmw_wait+0x186>
 80195e2:	2400      	movs	r4, #0
 80195e4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80195e8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80195ec:	f7f4 ffc2 	bl	800e574 <rmw_uxrce_find_static_input_buffer_by_owner>
 80195f0:	b370      	cbz	r0, 8019650 <rmw_wait+0x1d8>
 80195f2:	3401      	adds	r4, #1
 80195f4:	f8d8 3000 	ldr.w	r3, [r8]
 80195f8:	2701      	movs	r7, #1
 80195fa:	42a3      	cmp	r3, r4
 80195fc:	d8f2      	bhi.n	80195e4 <rmw_wait+0x16c>
 80195fe:	2d00      	cmp	r5, #0
 8019600:	d035      	beq.n	801966e <rmw_wait+0x1f6>
 8019602:	682b      	ldr	r3, [r5, #0]
 8019604:	b39b      	cbz	r3, 801966e <rmw_wait+0x1f6>
 8019606:	2400      	movs	r4, #0
 8019608:	686b      	ldr	r3, [r5, #4]
 801960a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801960e:	f7f4 ffb1 	bl	800e574 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019612:	b328      	cbz	r0, 8019660 <rmw_wait+0x1e8>
 8019614:	3401      	adds	r4, #1
 8019616:	682b      	ldr	r3, [r5, #0]
 8019618:	2701      	movs	r7, #1
 801961a:	42a3      	cmp	r3, r4
 801961c:	d8f4      	bhi.n	8019608 <rmw_wait+0x190>
 801961e:	2e00      	cmp	r6, #0
 8019620:	d03c      	beq.n	801969c <rmw_wait+0x224>
 8019622:	6834      	ldr	r4, [r6, #0]
 8019624:	2c00      	cmp	r4, #0
 8019626:	d039      	beq.n	801969c <rmw_wait+0x224>
 8019628:	2701      	movs	r7, #1
 801962a:	e023      	b.n	8019674 <rmw_wait+0x1fc>
 801962c:	68a0      	ldr	r0, [r4, #8]
 801962e:	2100      	movs	r1, #0
 8019630:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019634:	f7f8 f82a 	bl	801168c <uxr_run_session_timeout>
 8019638:	6864      	ldr	r4, [r4, #4]
 801963a:	2c00      	cmp	r4, #0
 801963c:	d1f6      	bne.n	801962c <rmw_wait+0x1b4>
 801963e:	e7b0      	b.n	80195a2 <rmw_wait+0x12a>
 8019640:	e9d9 3200 	ldrd	r3, r2, [r9]
 8019644:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019648:	3401      	adds	r4, #1
 801964a:	42a3      	cmp	r3, r4
 801964c:	d8b4      	bhi.n	80195b8 <rmw_wait+0x140>
 801964e:	e7c2      	b.n	80195d6 <rmw_wait+0x15e>
 8019650:	e9d8 3200 	ldrd	r3, r2, [r8]
 8019654:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019658:	3401      	adds	r4, #1
 801965a:	429c      	cmp	r4, r3
 801965c:	d3c2      	bcc.n	80195e4 <rmw_wait+0x16c>
 801965e:	e7ce      	b.n	80195fe <rmw_wait+0x186>
 8019660:	e9d5 3200 	ldrd	r3, r2, [r5]
 8019664:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019668:	3401      	adds	r4, #1
 801966a:	42a3      	cmp	r3, r4
 801966c:	d8cc      	bhi.n	8019608 <rmw_wait+0x190>
 801966e:	b1a6      	cbz	r6, 801969a <rmw_wait+0x222>
 8019670:	6834      	ldr	r4, [r6, #0]
 8019672:	b194      	cbz	r4, 801969a <rmw_wait+0x222>
 8019674:	2300      	movs	r3, #0
 8019676:	461d      	mov	r5, r3
 8019678:	e004      	b.n	8019684 <rmw_wait+0x20c>
 801967a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801967e:	3301      	adds	r3, #1
 8019680:	42a3      	cmp	r3, r4
 8019682:	d00a      	beq.n	801969a <rmw_wait+0x222>
 8019684:	6870      	ldr	r0, [r6, #4]
 8019686:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801968a:	7c0a      	ldrb	r2, [r1, #16]
 801968c:	2a00      	cmp	r2, #0
 801968e:	d0f4      	beq.n	801967a <rmw_wait+0x202>
 8019690:	3301      	adds	r3, #1
 8019692:	4617      	mov	r7, r2
 8019694:	740d      	strb	r5, [r1, #16]
 8019696:	42a3      	cmp	r3, r4
 8019698:	d1f4      	bne.n	8019684 <rmw_wait+0x20c>
 801969a:	b147      	cbz	r7, 80196ae <rmw_wait+0x236>
 801969c:	2000      	movs	r0, #0
 801969e:	b009      	add	sp, #36	; 0x24
 80196a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80196a4:	b11e      	cbz	r6, 80196ae <rmw_wait+0x236>
 80196a6:	6834      	ldr	r4, [r6, #0]
 80196a8:	462f      	mov	r7, r5
 80196aa:	2c00      	cmp	r4, #0
 80196ac:	d1e2      	bne.n	8019674 <rmw_wait+0x1fc>
 80196ae:	2002      	movs	r0, #2
 80196b0:	b009      	add	sp, #36	; 0x24
 80196b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80196b6:	4639      	mov	r1, r7
 80196b8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80196bc:	f7f8 f800 	bl	80116c0 <uxr_run_session_until_data>
 80196c0:	6864      	ldr	r4, [r4, #4]
 80196c2:	2c00      	cmp	r4, #0
 80196c4:	f47f af62 	bne.w	801958c <rmw_wait+0x114>
 80196c8:	e76b      	b.n	80195a2 <rmw_wait+0x12a>
 80196ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80196ce:	f7fe fc91 	bl	8017ff4 <rmw_time_total_nsec>
 80196d2:	2300      	movs	r3, #0
 80196d4:	4a19      	ldr	r2, [pc, #100]	; (801973c <rmw_wait+0x2c4>)
 80196d6:	f7e6 fe6b 	bl	80003b0 <__aeabi_uldivmod>
 80196da:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80196de:	4607      	mov	r7, r0
 80196e0:	f171 0300 	sbcs.w	r3, r1, #0
 80196e4:	bfa8      	it	ge
 80196e6:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 80196ea:	e6e5      	b.n	80194b8 <rmw_wait+0x40>
 80196ec:	f1b8 0f00 	cmp.w	r8, #0
 80196f0:	d00f      	beq.n	8019712 <rmw_wait+0x29a>
 80196f2:	f8d8 3000 	ldr.w	r3, [r8]
 80196f6:	b193      	cbz	r3, 801971e <rmw_wait+0x2a6>
 80196f8:	464f      	mov	r7, r9
 80196fa:	e772      	b.n	80195e2 <rmw_wait+0x16a>
 80196fc:	f1b8 0f00 	cmp.w	r8, #0
 8019700:	d007      	beq.n	8019712 <rmw_wait+0x29a>
 8019702:	f8d8 3000 	ldr.w	r3, [r8]
 8019706:	2b00      	cmp	r3, #0
 8019708:	f47f af6b 	bne.w	80195e2 <rmw_wait+0x16a>
 801970c:	b155      	cbz	r5, 8019724 <rmw_wait+0x2ac>
 801970e:	461f      	mov	r7, r3
 8019710:	e777      	b.n	8019602 <rmw_wait+0x18a>
 8019712:	2d00      	cmp	r5, #0
 8019714:	d0c6      	beq.n	80196a4 <rmw_wait+0x22c>
 8019716:	682b      	ldr	r3, [r5, #0]
 8019718:	b143      	cbz	r3, 801972c <rmw_wait+0x2b4>
 801971a:	4647      	mov	r7, r8
 801971c:	e773      	b.n	8019606 <rmw_wait+0x18e>
 801971e:	b10d      	cbz	r5, 8019724 <rmw_wait+0x2ac>
 8019720:	464f      	mov	r7, r9
 8019722:	e76e      	b.n	8019602 <rmw_wait+0x18a>
 8019724:	462f      	mov	r7, r5
 8019726:	2e00      	cmp	r6, #0
 8019728:	d1a2      	bne.n	8019670 <rmw_wait+0x1f8>
 801972a:	e7c0      	b.n	80196ae <rmw_wait+0x236>
 801972c:	4647      	mov	r7, r8
 801972e:	2e00      	cmp	r6, #0
 8019730:	d19e      	bne.n	8019670 <rmw_wait+0x1f8>
 8019732:	e7bc      	b.n	80196ae <rmw_wait+0x236>
 8019734:	0801d7e0 	.word	0x0801d7e0
 8019738:	20010384 	.word	0x20010384
 801973c:	000f4240 	.word	0x000f4240

08019740 <rmw_create_wait_set>:
 8019740:	b508      	push	{r3, lr}
 8019742:	4803      	ldr	r0, [pc, #12]	; (8019750 <rmw_create_wait_set+0x10>)
 8019744:	f7fe fdde 	bl	8018304 <get_memory>
 8019748:	b108      	cbz	r0, 801974e <rmw_create_wait_set+0xe>
 801974a:	6880      	ldr	r0, [r0, #8]
 801974c:	3010      	adds	r0, #16
 801974e:	bd08      	pop	{r3, pc}
 8019750:	200103c4 	.word	0x200103c4

08019754 <rmw_destroy_wait_set>:
 8019754:	b508      	push	{r3, lr}
 8019756:	4b08      	ldr	r3, [pc, #32]	; (8019778 <rmw_destroy_wait_set+0x24>)
 8019758:	6819      	ldr	r1, [r3, #0]
 801975a:	b911      	cbnz	r1, 8019762 <rmw_destroy_wait_set+0xe>
 801975c:	e00a      	b.n	8019774 <rmw_destroy_wait_set+0x20>
 801975e:	6849      	ldr	r1, [r1, #4]
 8019760:	b141      	cbz	r1, 8019774 <rmw_destroy_wait_set+0x20>
 8019762:	688b      	ldr	r3, [r1, #8]
 8019764:	3310      	adds	r3, #16
 8019766:	4298      	cmp	r0, r3
 8019768:	d1f9      	bne.n	801975e <rmw_destroy_wait_set+0xa>
 801976a:	4803      	ldr	r0, [pc, #12]	; (8019778 <rmw_destroy_wait_set+0x24>)
 801976c:	f7fe fdda 	bl	8018324 <put_memory>
 8019770:	2000      	movs	r0, #0
 8019772:	bd08      	pop	{r3, pc}
 8019774:	2001      	movs	r0, #1
 8019776:	bd08      	pop	{r3, pc}
 8019778:	200103c4 	.word	0x200103c4

0801977c <rmw_uros_epoch_nanos>:
 801977c:	4b05      	ldr	r3, [pc, #20]	; (8019794 <rmw_uros_epoch_nanos+0x18>)
 801977e:	681b      	ldr	r3, [r3, #0]
 8019780:	b123      	cbz	r3, 801978c <rmw_uros_epoch_nanos+0x10>
 8019782:	6898      	ldr	r0, [r3, #8]
 8019784:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019788:	f7f7 bbf6 	b.w	8010f78 <uxr_epoch_nanos>
 801978c:	2000      	movs	r0, #0
 801978e:	2100      	movs	r1, #0
 8019790:	4770      	bx	lr
 8019792:	bf00      	nop
 8019794:	20010384 	.word	0x20010384

08019798 <service_msgs__msg__ServiceEventInfo__get_type_hash>:
 8019798:	4800      	ldr	r0, [pc, #0]	; (801979c <service_msgs__msg__ServiceEventInfo__get_type_hash+0x4>)
 801979a:	4770      	bx	lr
 801979c:	20001b40 	.word	0x20001b40

080197a0 <service_msgs__msg__ServiceEventInfo__get_type_description>:
 80197a0:	b510      	push	{r4, lr}
 80197a2:	4c08      	ldr	r4, [pc, #32]	; (80197c4 <service_msgs__msg__ServiceEventInfo__get_type_description+0x24>)
 80197a4:	7820      	ldrb	r0, [r4, #0]
 80197a6:	b108      	cbz	r0, 80197ac <service_msgs__msg__ServiceEventInfo__get_type_description+0xc>
 80197a8:	4807      	ldr	r0, [pc, #28]	; (80197c8 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 80197aa:	bd10      	pop	{r4, pc}
 80197ac:	f000 f858 	bl	8019860 <builtin_interfaces__msg__Time__get_type_description>
 80197b0:	300c      	adds	r0, #12
 80197b2:	4b06      	ldr	r3, [pc, #24]	; (80197cc <service_msgs__msg__ServiceEventInfo__get_type_description+0x2c>)
 80197b4:	c807      	ldmia	r0, {r0, r1, r2}
 80197b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80197ba:	2301      	movs	r3, #1
 80197bc:	4802      	ldr	r0, [pc, #8]	; (80197c8 <service_msgs__msg__ServiceEventInfo__get_type_description+0x28>)
 80197be:	7023      	strb	r3, [r4, #0]
 80197c0:	bd10      	pop	{r4, pc}
 80197c2:	bf00      	nop
 80197c4:	20010af9 	.word	0x20010af9
 80197c8:	0801f054 	.word	0x0801f054
 80197cc:	20001cc4 	.word	0x20001cc4

080197d0 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source>:
 80197d0:	4800      	ldr	r0, [pc, #0]	; (80197d4 <service_msgs__msg__ServiceEventInfo__get_individual_type_description_source+0x4>)
 80197d2:	4770      	bx	lr
 80197d4:	0801f078 	.word	0x0801f078

080197d8 <service_msgs__msg__ServiceEventInfo__get_type_description_sources>:
 80197d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197da:	4e0f      	ldr	r6, [pc, #60]	; (8019818 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x40>)
 80197dc:	7837      	ldrb	r7, [r6, #0]
 80197de:	b10f      	cbz	r7, 80197e4 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0xc>
 80197e0:	480e      	ldr	r0, [pc, #56]	; (801981c <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 80197e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80197e4:	4d0e      	ldr	r5, [pc, #56]	; (8019820 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x48>)
 80197e6:	4c0f      	ldr	r4, [pc, #60]	; (8019824 <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x4c>)
 80197e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80197ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80197ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80197ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80197f0:	682b      	ldr	r3, [r5, #0]
 80197f2:	4638      	mov	r0, r7
 80197f4:	f844 3b04 	str.w	r3, [r4], #4
 80197f8:	f000 f83e 	bl	8019878 <builtin_interfaces__msg__Time__get_individual_type_description_source>
 80197fc:	2301      	movs	r3, #1
 80197fe:	4684      	mov	ip, r0
 8019800:	7033      	strb	r3, [r6, #0]
 8019802:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8019806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019808:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801980c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801980e:	f8dc 3000 	ldr.w	r3, [ip]
 8019812:	4802      	ldr	r0, [pc, #8]	; (801981c <service_msgs__msg__ServiceEventInfo__get_type_description_sources+0x44>)
 8019814:	6023      	str	r3, [r4, #0]
 8019816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019818:	20010af8 	.word	0x20010af8
 801981c:	0801f09c 	.word	0x0801f09c
 8019820:	0801f078 	.word	0x0801f078
 8019824:	20010afc 	.word	0x20010afc

08019828 <service_msgs__msg__ServiceEventInfo__init>:
 8019828:	b538      	push	{r3, r4, r5, lr}
 801982a:	b138      	cbz	r0, 801983c <service_msgs__msg__ServiceEventInfo__init+0x14>
 801982c:	1d05      	adds	r5, r0, #4
 801982e:	4628      	mov	r0, r5
 8019830:	f000 f842 	bl	80198b8 <builtin_interfaces__msg__Time__init>
 8019834:	4604      	mov	r4, r0
 8019836:	b120      	cbz	r0, 8019842 <service_msgs__msg__ServiceEventInfo__init+0x1a>
 8019838:	4620      	mov	r0, r4
 801983a:	bd38      	pop	{r3, r4, r5, pc}
 801983c:	4604      	mov	r4, r0
 801983e:	4620      	mov	r0, r4
 8019840:	bd38      	pop	{r3, r4, r5, pc}
 8019842:	4628      	mov	r0, r5
 8019844:	f000 f83c 	bl	80198c0 <builtin_interfaces__msg__Time__fini>
 8019848:	4620      	mov	r0, r4
 801984a:	bd38      	pop	{r3, r4, r5, pc}

0801984c <service_msgs__msg__ServiceEventInfo__fini>:
 801984c:	b110      	cbz	r0, 8019854 <service_msgs__msg__ServiceEventInfo__fini+0x8>
 801984e:	3004      	adds	r0, #4
 8019850:	f000 b836 	b.w	80198c0 <builtin_interfaces__msg__Time__fini>
 8019854:	4770      	bx	lr
 8019856:	bf00      	nop

08019858 <builtin_interfaces__msg__Time__get_type_hash>:
 8019858:	4800      	ldr	r0, [pc, #0]	; (801985c <builtin_interfaces__msg__Time__get_type_hash+0x4>)
 801985a:	4770      	bx	lr
 801985c:	20002060 	.word	0x20002060

08019860 <builtin_interfaces__msg__Time__get_type_description>:
 8019860:	4b03      	ldr	r3, [pc, #12]	; (8019870 <builtin_interfaces__msg__Time__get_type_description+0x10>)
 8019862:	781a      	ldrb	r2, [r3, #0]
 8019864:	b90a      	cbnz	r2, 801986a <builtin_interfaces__msg__Time__get_type_description+0xa>
 8019866:	2201      	movs	r2, #1
 8019868:	701a      	strb	r2, [r3, #0]
 801986a:	4802      	ldr	r0, [pc, #8]	; (8019874 <builtin_interfaces__msg__Time__get_type_description+0x14>)
 801986c:	4770      	bx	lr
 801986e:	bf00      	nop
 8019870:	20010b45 	.word	0x20010b45
 8019874:	0801f0a8 	.word	0x0801f0a8

08019878 <builtin_interfaces__msg__Time__get_individual_type_description_source>:
 8019878:	4800      	ldr	r0, [pc, #0]	; (801987c <builtin_interfaces__msg__Time__get_individual_type_description_source+0x4>)
 801987a:	4770      	bx	lr
 801987c:	0801f0cc 	.word	0x0801f0cc

08019880 <builtin_interfaces__msg__Time__get_type_description_sources>:
 8019880:	4b09      	ldr	r3, [pc, #36]	; (80198a8 <builtin_interfaces__msg__Time__get_type_description_sources+0x28>)
 8019882:	781a      	ldrb	r2, [r3, #0]
 8019884:	b96a      	cbnz	r2, 80198a2 <builtin_interfaces__msg__Time__get_type_description_sources+0x22>
 8019886:	2201      	movs	r2, #1
 8019888:	b430      	push	{r4, r5}
 801988a:	4d08      	ldr	r5, [pc, #32]	; (80198ac <builtin_interfaces__msg__Time__get_type_description_sources+0x2c>)
 801988c:	4c08      	ldr	r4, [pc, #32]	; (80198b0 <builtin_interfaces__msg__Time__get_type_description_sources+0x30>)
 801988e:	701a      	strb	r2, [r3, #0]
 8019890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019898:	682b      	ldr	r3, [r5, #0]
 801989a:	4806      	ldr	r0, [pc, #24]	; (80198b4 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 801989c:	6023      	str	r3, [r4, #0]
 801989e:	bc30      	pop	{r4, r5}
 80198a0:	4770      	bx	lr
 80198a2:	4804      	ldr	r0, [pc, #16]	; (80198b4 <builtin_interfaces__msg__Time__get_type_description_sources+0x34>)
 80198a4:	4770      	bx	lr
 80198a6:	bf00      	nop
 80198a8:	20010b44 	.word	0x20010b44
 80198ac:	0801f0cc 	.word	0x0801f0cc
 80198b0:	20010b48 	.word	0x20010b48
 80198b4:	0801f0f0 	.word	0x0801f0f0

080198b8 <builtin_interfaces__msg__Time__init>:
 80198b8:	3800      	subs	r0, #0
 80198ba:	bf18      	it	ne
 80198bc:	2001      	movne	r0, #1
 80198be:	4770      	bx	lr

080198c0 <builtin_interfaces__msg__Time__fini>:
 80198c0:	4770      	bx	lr
 80198c2:	bf00      	nop

080198c4 <ucdr_serialize_sequence_char>:
 80198c4:	b570      	push	{r4, r5, r6, lr}
 80198c6:	4615      	mov	r5, r2
 80198c8:	460e      	mov	r6, r1
 80198ca:	7d01      	ldrb	r1, [r0, #20]
 80198cc:	4604      	mov	r4, r0
 80198ce:	f7f5 feab 	bl	800f628 <ucdr_serialize_endian_uint32_t>
 80198d2:	b90d      	cbnz	r5, 80198d8 <ucdr_serialize_sequence_char+0x14>
 80198d4:	2001      	movs	r0, #1
 80198d6:	bd70      	pop	{r4, r5, r6, pc}
 80198d8:	462b      	mov	r3, r5
 80198da:	4632      	mov	r2, r6
 80198dc:	7d21      	ldrb	r1, [r4, #20]
 80198de:	4620      	mov	r0, r4
 80198e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80198e4:	f7f5 b9e8 	b.w	800ecb8 <ucdr_serialize_endian_array_char>

080198e8 <ucdr_deserialize_sequence_char>:
 80198e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198ec:	461d      	mov	r5, r3
 80198ee:	4616      	mov	r6, r2
 80198f0:	460f      	mov	r7, r1
 80198f2:	461a      	mov	r2, r3
 80198f4:	7d01      	ldrb	r1, [r0, #20]
 80198f6:	4604      	mov	r4, r0
 80198f8:	f7f5 ffbe 	bl	800f878 <ucdr_deserialize_endian_uint32_t>
 80198fc:	682b      	ldr	r3, [r5, #0]
 80198fe:	429e      	cmp	r6, r3
 8019900:	d201      	bcs.n	8019906 <ucdr_deserialize_sequence_char+0x1e>
 8019902:	2201      	movs	r2, #1
 8019904:	75a2      	strb	r2, [r4, #22]
 8019906:	b913      	cbnz	r3, 801990e <ucdr_deserialize_sequence_char+0x26>
 8019908:	2001      	movs	r0, #1
 801990a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801990e:	463a      	mov	r2, r7
 8019910:	7d21      	ldrb	r1, [r4, #20]
 8019912:	4620      	mov	r0, r4
 8019914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019918:	f7f5 ba00 	b.w	800ed1c <ucdr_deserialize_endian_array_char>

0801991c <ucdr_serialize_sequence_uint8_t>:
 801991c:	b570      	push	{r4, r5, r6, lr}
 801991e:	4615      	mov	r5, r2
 8019920:	460e      	mov	r6, r1
 8019922:	7d01      	ldrb	r1, [r0, #20]
 8019924:	4604      	mov	r4, r0
 8019926:	f7f5 fe7f 	bl	800f628 <ucdr_serialize_endian_uint32_t>
 801992a:	b90d      	cbnz	r5, 8019930 <ucdr_serialize_sequence_uint8_t+0x14>
 801992c:	2001      	movs	r0, #1
 801992e:	bd70      	pop	{r4, r5, r6, pc}
 8019930:	462b      	mov	r3, r5
 8019932:	4632      	mov	r2, r6
 8019934:	7d21      	ldrb	r1, [r4, #20]
 8019936:	4620      	mov	r0, r4
 8019938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801993c:	f7f5 ba54 	b.w	800ede8 <ucdr_serialize_endian_array_uint8_t>

08019940 <ucdr_deserialize_sequence_uint8_t>:
 8019940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019944:	461d      	mov	r5, r3
 8019946:	4616      	mov	r6, r2
 8019948:	460f      	mov	r7, r1
 801994a:	461a      	mov	r2, r3
 801994c:	7d01      	ldrb	r1, [r0, #20]
 801994e:	4604      	mov	r4, r0
 8019950:	f7f5 ff92 	bl	800f878 <ucdr_deserialize_endian_uint32_t>
 8019954:	682b      	ldr	r3, [r5, #0]
 8019956:	429e      	cmp	r6, r3
 8019958:	d201      	bcs.n	801995e <ucdr_deserialize_sequence_uint8_t+0x1e>
 801995a:	2201      	movs	r2, #1
 801995c:	75a2      	strb	r2, [r4, #22]
 801995e:	b913      	cbnz	r3, 8019966 <ucdr_deserialize_sequence_uint8_t+0x26>
 8019960:	2001      	movs	r0, #1
 8019962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019966:	463a      	mov	r2, r7
 8019968:	7d21      	ldrb	r1, [r4, #20]
 801996a:	4620      	mov	r0, r4
 801996c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019970:	f7f5 baa0 	b.w	800eeb4 <ucdr_deserialize_endian_array_uint8_t>

08019974 <ucdr_serialize_string>:
 8019974:	b510      	push	{r4, lr}
 8019976:	b082      	sub	sp, #8
 8019978:	4604      	mov	r4, r0
 801997a:	4608      	mov	r0, r1
 801997c:	9101      	str	r1, [sp, #4]
 801997e:	f7e6 fcbf 	bl	8000300 <strlen>
 8019982:	4602      	mov	r2, r0
 8019984:	9901      	ldr	r1, [sp, #4]
 8019986:	4620      	mov	r0, r4
 8019988:	3201      	adds	r2, #1
 801998a:	b002      	add	sp, #8
 801998c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019990:	f7ff bf98 	b.w	80198c4 <ucdr_serialize_sequence_char>

08019994 <ucdr_deserialize_string>:
 8019994:	b500      	push	{lr}
 8019996:	b083      	sub	sp, #12
 8019998:	ab01      	add	r3, sp, #4
 801999a:	f7ff ffa5 	bl	80198e8 <ucdr_deserialize_sequence_char>
 801999e:	b003      	add	sp, #12
 80199a0:	f85d fb04 	ldr.w	pc, [sp], #4

080199a4 <get_custom_error>:
 80199a4:	4b01      	ldr	r3, [pc, #4]	; (80199ac <get_custom_error+0x8>)
 80199a6:	7818      	ldrb	r0, [r3, #0]
 80199a8:	4770      	bx	lr
 80199aa:	bf00      	nop
 80199ac:	20010b6c 	.word	0x20010b6c

080199b0 <recv_custom_msg>:
 80199b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199b4:	4693      	mov	fp, r2
 80199b6:	b089      	sub	sp, #36	; 0x24
 80199b8:	2200      	movs	r2, #0
 80199ba:	4604      	mov	r4, r0
 80199bc:	468a      	mov	sl, r1
 80199be:	9305      	str	r3, [sp, #20]
 80199c0:	f88d 201e 	strb.w	r2, [sp, #30]
 80199c4:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 80199c8:	b322      	cbz	r2, 8019a14 <recv_custom_msg+0x64>
 80199ca:	f200 2902 	addw	r9, r0, #514	; 0x202
 80199ce:	f10d 081f 	add.w	r8, sp, #31
 80199d2:	af05      	add	r7, sp, #20
 80199d4:	f10d 061e 	add.w	r6, sp, #30
 80199d8:	f44f 7500 	mov.w	r5, #512	; 0x200
 80199dc:	e002      	b.n	80199e4 <recv_custom_msg+0x34>
 80199de:	9b05      	ldr	r3, [sp, #20]
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	dd0f      	ble.n	8019a04 <recv_custom_msg+0x54>
 80199e4:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 80199e8:	4623      	mov	r3, r4
 80199ea:	4622      	mov	r2, r4
 80199ec:	4648      	mov	r0, r9
 80199ee:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80199f2:	e9cd 5600 	strd	r5, r6, [sp]
 80199f6:	f001 f913 	bl	801ac20 <uxr_read_framed_msg>
 80199fa:	2800      	cmp	r0, #0
 80199fc:	d0ef      	beq.n	80199de <recv_custom_msg+0x2e>
 80199fe:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8019a02:	b1b3      	cbz	r3, 8019a32 <recv_custom_msg+0x82>
 8019a04:	4b0f      	ldr	r3, [pc, #60]	; (8019a44 <recv_custom_msg+0x94>)
 8019a06:	2000      	movs	r0, #0
 8019a08:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8019a0c:	701a      	strb	r2, [r3, #0]
 8019a0e:	b009      	add	sp, #36	; 0x24
 8019a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a14:	f10d 021f 	add.w	r2, sp, #31
 8019a18:	4601      	mov	r1, r0
 8019a1a:	9200      	str	r2, [sp, #0]
 8019a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019a20:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8019a24:	47a8      	blx	r5
 8019a26:	2800      	cmp	r0, #0
 8019a28:	d0ec      	beq.n	8019a04 <recv_custom_msg+0x54>
 8019a2a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d1e8      	bne.n	8019a04 <recv_custom_msg+0x54>
 8019a32:	f8cb 0000 	str.w	r0, [fp]
 8019a36:	2001      	movs	r0, #1
 8019a38:	f8ca 4000 	str.w	r4, [sl]
 8019a3c:	b009      	add	sp, #36	; 0x24
 8019a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a42:	bf00      	nop
 8019a44:	20010b6c 	.word	0x20010b6c

08019a48 <send_custom_msg>:
 8019a48:	b530      	push	{r4, r5, lr}
 8019a4a:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8019a4e:	b087      	sub	sp, #28
 8019a50:	4614      	mov	r4, r2
 8019a52:	b995      	cbnz	r5, 8019a7a <send_custom_msg+0x32>
 8019a54:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 8019a58:	f10d 0317 	add.w	r3, sp, #23
 8019a5c:	47a8      	blx	r5
 8019a5e:	1e03      	subs	r3, r0, #0
 8019a60:	bf18      	it	ne
 8019a62:	2301      	movne	r3, #1
 8019a64:	42a0      	cmp	r0, r4
 8019a66:	bf18      	it	ne
 8019a68:	2300      	movne	r3, #0
 8019a6a:	b91b      	cbnz	r3, 8019a74 <send_custom_msg+0x2c>
 8019a6c:	4a0a      	ldr	r2, [pc, #40]	; (8019a98 <send_custom_msg+0x50>)
 8019a6e:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8019a72:	7011      	strb	r1, [r2, #0]
 8019a74:	4618      	mov	r0, r3
 8019a76:	b007      	add	sp, #28
 8019a78:	bd30      	pop	{r4, r5, pc}
 8019a7a:	460b      	mov	r3, r1
 8019a7c:	2200      	movs	r2, #0
 8019a7e:	f10d 0117 	add.w	r1, sp, #23
 8019a82:	9400      	str	r4, [sp, #0]
 8019a84:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8019a88:	4602      	mov	r2, r0
 8019a8a:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8019a8e:	f200 2002 	addw	r0, r0, #514	; 0x202
 8019a92:	f000 fee7 	bl	801a864 <uxr_write_framed_msg>
 8019a96:	e7e2      	b.n	8019a5e <send_custom_msg+0x16>
 8019a98:	20010b6c 	.word	0x20010b6c

08019a9c <uxr_set_custom_transport_callbacks>:
 8019a9c:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8019aa0:	9901      	ldr	r1, [sp, #4]
 8019aa2:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8019aa6:	9b00      	ldr	r3, [sp, #0]
 8019aa8:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 8019aac:	4770      	bx	lr
 8019aae:	bf00      	nop

08019ab0 <uxr_init_custom_transport>:
 8019ab0:	b538      	push	{r3, r4, r5, lr}
 8019ab2:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8019ab6:	b303      	cbz	r3, 8019afa <uxr_init_custom_transport+0x4a>
 8019ab8:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8019abc:	4604      	mov	r4, r0
 8019abe:	b1e2      	cbz	r2, 8019afa <uxr_init_custom_transport+0x4a>
 8019ac0:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8019ac4:	b1ca      	cbz	r2, 8019afa <uxr_init_custom_transport+0x4a>
 8019ac6:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8019aca:	b1b2      	cbz	r2, 8019afa <uxr_init_custom_transport+0x4a>
 8019acc:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8019ad0:	4798      	blx	r3
 8019ad2:	4605      	mov	r5, r0
 8019ad4:	b188      	cbz	r0, 8019afa <uxr_init_custom_transport+0x4a>
 8019ad6:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8019ada:	b98b      	cbnz	r3, 8019b00 <uxr_init_custom_transport+0x50>
 8019adc:	4b0b      	ldr	r3, [pc, #44]	; (8019b0c <uxr_init_custom_transport+0x5c>)
 8019ade:	4628      	mov	r0, r5
 8019ae0:	490b      	ldr	r1, [pc, #44]	; (8019b10 <uxr_init_custom_transport+0x60>)
 8019ae2:	4a0c      	ldr	r2, [pc, #48]	; (8019b14 <uxr_init_custom_transport+0x64>)
 8019ae4:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8019ae8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019aec:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8019af0:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8019af4:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8019af8:	bd38      	pop	{r3, r4, r5, pc}
 8019afa:	2500      	movs	r5, #0
 8019afc:	4628      	mov	r0, r5
 8019afe:	bd38      	pop	{r3, r4, r5, pc}
 8019b00:	2100      	movs	r1, #0
 8019b02:	f204 2002 	addw	r0, r4, #514	; 0x202
 8019b06:	f000 fea7 	bl	801a858 <uxr_init_framing_io>
 8019b0a:	e7e7      	b.n	8019adc <uxr_init_custom_transport+0x2c>
 8019b0c:	080199b1 	.word	0x080199b1
 8019b10:	08019a49 	.word	0x08019a49
 8019b14:	080199a5 	.word	0x080199a5

08019b18 <uxr_close_custom_transport>:
 8019b18:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8019b1c:	4718      	bx	r3
 8019b1e:	bf00      	nop

08019b20 <uxr_init_input_best_effort_stream>:
 8019b20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019b24:	8003      	strh	r3, [r0, #0]
 8019b26:	4770      	bx	lr

08019b28 <uxr_reset_input_best_effort_stream>:
 8019b28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019b2c:	8003      	strh	r3, [r0, #0]
 8019b2e:	4770      	bx	lr

08019b30 <uxr_receive_best_effort_message>:
 8019b30:	b538      	push	{r3, r4, r5, lr}
 8019b32:	4604      	mov	r4, r0
 8019b34:	8800      	ldrh	r0, [r0, #0]
 8019b36:	460d      	mov	r5, r1
 8019b38:	f000 fe76 	bl	801a828 <uxr_seq_num_cmp>
 8019b3c:	4603      	mov	r3, r0
 8019b3e:	0fc0      	lsrs	r0, r0, #31
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	bfb8      	it	lt
 8019b44:	8025      	strhlt	r5, [r4, #0]
 8019b46:	bd38      	pop	{r3, r4, r5, pc}

08019b48 <on_full_input_buffer>:
 8019b48:	b570      	push	{r4, r5, r6, lr}
 8019b4a:	460c      	mov	r4, r1
 8019b4c:	4605      	mov	r5, r0
 8019b4e:	8908      	ldrh	r0, [r1, #8]
 8019b50:	682b      	ldr	r3, [r5, #0]
 8019b52:	7d26      	ldrb	r6, [r4, #20]
 8019b54:	e9d1 1200 	ldrd	r1, r2, [r1]
 8019b58:	fbb2 f2f0 	udiv	r2, r2, r0
 8019b5c:	eba3 0c01 	sub.w	ip, r3, r1
 8019b60:	fbbc fcf2 	udiv	ip, ip, r2
 8019b64:	f10c 0c01 	add.w	ip, ip, #1
 8019b68:	fa1f f38c 	uxth.w	r3, ip
 8019b6c:	fbb3 fcf0 	udiv	ip, r3, r0
 8019b70:	fb00 331c 	mls	r3, r0, ip, r3
 8019b74:	b29b      	uxth	r3, r3
 8019b76:	fb02 f303 	mul.w	r3, r2, r3
 8019b7a:	1d18      	adds	r0, r3, #4
 8019b7c:	4408      	add	r0, r1
 8019b7e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8019b82:	b116      	cbz	r6, 8019b8a <on_full_input_buffer+0x42>
 8019b84:	2600      	movs	r6, #0
 8019b86:	f840 6c04 	str.w	r6, [r0, #-4]
 8019b8a:	2a03      	cmp	r2, #3
 8019b8c:	d801      	bhi.n	8019b92 <on_full_input_buffer+0x4a>
 8019b8e:	2001      	movs	r0, #1
 8019b90:	bd70      	pop	{r4, r5, r6, pc}
 8019b92:	3308      	adds	r3, #8
 8019b94:	4628      	mov	r0, r5
 8019b96:	3a04      	subs	r2, #4
 8019b98:	4419      	add	r1, r3
 8019b9a:	692b      	ldr	r3, [r5, #16]
 8019b9c:	f7f6 fdee 	bl	801077c <ucdr_init_buffer_origin>
 8019ba0:	4628      	mov	r0, r5
 8019ba2:	4622      	mov	r2, r4
 8019ba4:	4902      	ldr	r1, [pc, #8]	; (8019bb0 <on_full_input_buffer+0x68>)
 8019ba6:	f7f6 fdc5 	bl	8010734 <ucdr_set_on_full_buffer_callback>
 8019baa:	2000      	movs	r0, #0
 8019bac:	bd70      	pop	{r4, r5, r6, pc}
 8019bae:	bf00      	nop
 8019bb0:	08019b49 	.word	0x08019b49

08019bb4 <uxr_init_input_reliable_stream>:
 8019bb4:	b510      	push	{r4, lr}
 8019bb6:	e9c0 1200 	strd	r1, r2, [r0]
 8019bba:	2400      	movs	r4, #0
 8019bbc:	9a02      	ldr	r2, [sp, #8]
 8019bbe:	8103      	strh	r3, [r0, #8]
 8019bc0:	6102      	str	r2, [r0, #16]
 8019bc2:	7504      	strb	r4, [r0, #20]
 8019bc4:	b1c3      	cbz	r3, 8019bf8 <uxr_init_input_reliable_stream+0x44>
 8019bc6:	600c      	str	r4, [r1, #0]
 8019bc8:	8901      	ldrh	r1, [r0, #8]
 8019bca:	2901      	cmp	r1, #1
 8019bcc:	d914      	bls.n	8019bf8 <uxr_init_input_reliable_stream+0x44>
 8019bce:	f04f 0c01 	mov.w	ip, #1
 8019bd2:	6843      	ldr	r3, [r0, #4]
 8019bd4:	f10c 0e01 	add.w	lr, ip, #1
 8019bd8:	fbbc f2f1 	udiv	r2, ip, r1
 8019bdc:	fbb3 f3f1 	udiv	r3, r3, r1
 8019be0:	fb01 c212 	mls	r2, r1, r2, ip
 8019be4:	fa1f fc8e 	uxth.w	ip, lr
 8019be8:	b292      	uxth	r2, r2
 8019bea:	fb02 f303 	mul.w	r3, r2, r3
 8019bee:	6802      	ldr	r2, [r0, #0]
 8019bf0:	50d4      	str	r4, [r2, r3]
 8019bf2:	8901      	ldrh	r1, [r0, #8]
 8019bf4:	4561      	cmp	r1, ip
 8019bf6:	d8ec      	bhi.n	8019bd2 <uxr_init_input_reliable_stream+0x1e>
 8019bf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019bfc:	60c3      	str	r3, [r0, #12]
 8019bfe:	bd10      	pop	{r4, pc}

08019c00 <uxr_reset_input_reliable_stream>:
 8019c00:	8901      	ldrh	r1, [r0, #8]
 8019c02:	b1d9      	cbz	r1, 8019c3c <uxr_reset_input_reliable_stream+0x3c>
 8019c04:	b510      	push	{r4, lr}
 8019c06:	f04f 0e00 	mov.w	lr, #0
 8019c0a:	46f4      	mov	ip, lr
 8019c0c:	4674      	mov	r4, lr
 8019c0e:	6843      	ldr	r3, [r0, #4]
 8019c10:	f10e 0e01 	add.w	lr, lr, #1
 8019c14:	fbbc f2f1 	udiv	r2, ip, r1
 8019c18:	fbb3 f3f1 	udiv	r3, r3, r1
 8019c1c:	fb01 c212 	mls	r2, r1, r2, ip
 8019c20:	fa1f fc8e 	uxth.w	ip, lr
 8019c24:	b292      	uxth	r2, r2
 8019c26:	fb02 f303 	mul.w	r3, r2, r3
 8019c2a:	6802      	ldr	r2, [r0, #0]
 8019c2c:	50d4      	str	r4, [r2, r3]
 8019c2e:	8901      	ldrh	r1, [r0, #8]
 8019c30:	4561      	cmp	r1, ip
 8019c32:	d8ec      	bhi.n	8019c0e <uxr_reset_input_reliable_stream+0xe>
 8019c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019c38:	60c3      	str	r3, [r0, #12]
 8019c3a:	bd10      	pop	{r4, pc}
 8019c3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019c40:	60c3      	str	r3, [r0, #12]
 8019c42:	4770      	bx	lr

08019c44 <uxr_receive_reliable_message>:
 8019c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c48:	4604      	mov	r4, r0
 8019c4a:	460d      	mov	r5, r1
 8019c4c:	8901      	ldrh	r1, [r0, #8]
 8019c4e:	4617      	mov	r7, r2
 8019c50:	8980      	ldrh	r0, [r0, #12]
 8019c52:	4698      	mov	r8, r3
 8019c54:	f000 fde0 	bl	801a818 <uxr_seq_num_add>
 8019c58:	4629      	mov	r1, r5
 8019c5a:	4606      	mov	r6, r0
 8019c5c:	89a0      	ldrh	r0, [r4, #12]
 8019c5e:	f000 fde3 	bl	801a828 <uxr_seq_num_cmp>
 8019c62:	2800      	cmp	r0, #0
 8019c64:	db0a      	blt.n	8019c7c <uxr_receive_reliable_message+0x38>
 8019c66:	2600      	movs	r6, #0
 8019c68:	4629      	mov	r1, r5
 8019c6a:	89e0      	ldrh	r0, [r4, #14]
 8019c6c:	f000 fddc 	bl	801a828 <uxr_seq_num_cmp>
 8019c70:	2800      	cmp	r0, #0
 8019c72:	da00      	bge.n	8019c76 <uxr_receive_reliable_message+0x32>
 8019c74:	81e5      	strh	r5, [r4, #14]
 8019c76:	4630      	mov	r0, r6
 8019c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c7c:	4630      	mov	r0, r6
 8019c7e:	4629      	mov	r1, r5
 8019c80:	f000 fdd2 	bl	801a828 <uxr_seq_num_cmp>
 8019c84:	2800      	cmp	r0, #0
 8019c86:	dbee      	blt.n	8019c66 <uxr_receive_reliable_message+0x22>
 8019c88:	6923      	ldr	r3, [r4, #16]
 8019c8a:	4638      	mov	r0, r7
 8019c8c:	4798      	blx	r3
 8019c8e:	4681      	mov	r9, r0
 8019c90:	2101      	movs	r1, #1
 8019c92:	89a0      	ldrh	r0, [r4, #12]
 8019c94:	f000 fdc0 	bl	801a818 <uxr_seq_num_add>
 8019c98:	f1b9 0f00 	cmp.w	r9, #0
 8019c9c:	bf08      	it	eq
 8019c9e:	4285      	cmpeq	r5, r0
 8019ca0:	bf0c      	ite	eq
 8019ca2:	2601      	moveq	r6, #1
 8019ca4:	2600      	movne	r6, #0
 8019ca6:	d104      	bne.n	8019cb2 <uxr_receive_reliable_message+0x6e>
 8019ca8:	2300      	movs	r3, #0
 8019caa:	9a08      	ldr	r2, [sp, #32]
 8019cac:	81a0      	strh	r0, [r4, #12]
 8019cae:	7013      	strb	r3, [r2, #0]
 8019cb0:	e7da      	b.n	8019c68 <uxr_receive_reliable_message+0x24>
 8019cb2:	8922      	ldrh	r2, [r4, #8]
 8019cb4:	6863      	ldr	r3, [r4, #4]
 8019cb6:	fbb5 f0f2 	udiv	r0, r5, r2
 8019cba:	fbb3 f3f2 	udiv	r3, r3, r2
 8019cbe:	fb02 5010 	mls	r0, r2, r0, r5
 8019cc2:	b280      	uxth	r0, r0
 8019cc4:	fb03 f000 	mul.w	r0, r3, r0
 8019cc8:	6823      	ldr	r3, [r4, #0]
 8019cca:	3004      	adds	r0, #4
 8019ccc:	4418      	add	r0, r3
 8019cce:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	d1c7      	bne.n	8019c66 <uxr_receive_reliable_message+0x22>
 8019cd6:	4639      	mov	r1, r7
 8019cd8:	4642      	mov	r2, r8
 8019cda:	f002 fe5c 	bl	801c996 <memcpy>
 8019cde:	8921      	ldrh	r1, [r4, #8]
 8019ce0:	6863      	ldr	r3, [r4, #4]
 8019ce2:	fbb5 f2f1 	udiv	r2, r5, r1
 8019ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8019cea:	fb01 5212 	mls	r2, r1, r2, r5
 8019cee:	b292      	uxth	r2, r2
 8019cf0:	fb02 f303 	mul.w	r3, r2, r3
 8019cf4:	6822      	ldr	r2, [r4, #0]
 8019cf6:	f842 8003 	str.w	r8, [r2, r3]
 8019cfa:	2301      	movs	r3, #1
 8019cfc:	9a08      	ldr	r2, [sp, #32]
 8019cfe:	7013      	strb	r3, [r2, #0]
 8019d00:	f1b9 0f00 	cmp.w	r9, #0
 8019d04:	d0af      	beq.n	8019c66 <uxr_receive_reliable_message+0x22>
 8019d06:	89a6      	ldrh	r6, [r4, #12]
 8019d08:	2101      	movs	r1, #1
 8019d0a:	4630      	mov	r0, r6
 8019d0c:	f000 fd84 	bl	801a818 <uxr_seq_num_add>
 8019d10:	8921      	ldrh	r1, [r4, #8]
 8019d12:	6863      	ldr	r3, [r4, #4]
 8019d14:	4606      	mov	r6, r0
 8019d16:	fbb0 f2f1 	udiv	r2, r0, r1
 8019d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8019d1e:	fb01 0212 	mls	r2, r1, r2, r0
 8019d22:	6820      	ldr	r0, [r4, #0]
 8019d24:	b292      	uxth	r2, r2
 8019d26:	fb02 f303 	mul.w	r3, r2, r3
 8019d2a:	3304      	adds	r3, #4
 8019d2c:	4418      	add	r0, r3
 8019d2e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	d097      	beq.n	8019c66 <uxr_receive_reliable_message+0x22>
 8019d36:	6923      	ldr	r3, [r4, #16]
 8019d38:	4798      	blx	r3
 8019d3a:	2802      	cmp	r0, #2
 8019d3c:	d002      	beq.n	8019d44 <uxr_receive_reliable_message+0x100>
 8019d3e:	2801      	cmp	r0, #1
 8019d40:	d0e2      	beq.n	8019d08 <uxr_receive_reliable_message+0xc4>
 8019d42:	e790      	b.n	8019c66 <uxr_receive_reliable_message+0x22>
 8019d44:	2601      	movs	r6, #1
 8019d46:	e78f      	b.n	8019c68 <uxr_receive_reliable_message+0x24>

08019d48 <uxr_next_input_reliable_buffer_available>:
 8019d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d4c:	4604      	mov	r4, r0
 8019d4e:	460f      	mov	r7, r1
 8019d50:	8980      	ldrh	r0, [r0, #12]
 8019d52:	2101      	movs	r1, #1
 8019d54:	4690      	mov	r8, r2
 8019d56:	f000 fd5f 	bl	801a818 <uxr_seq_num_add>
 8019d5a:	8922      	ldrh	r2, [r4, #8]
 8019d5c:	6866      	ldr	r6, [r4, #4]
 8019d5e:	fbb0 f3f2 	udiv	r3, r0, r2
 8019d62:	fbb6 f6f2 	udiv	r6, r6, r2
 8019d66:	fb02 0313 	mls	r3, r2, r3, r0
 8019d6a:	b29b      	uxth	r3, r3
 8019d6c:	fb03 f606 	mul.w	r6, r3, r6
 8019d70:	6823      	ldr	r3, [r4, #0]
 8019d72:	3604      	adds	r6, #4
 8019d74:	441e      	add	r6, r3
 8019d76:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8019d7a:	f1b9 0f00 	cmp.w	r9, #0
 8019d7e:	d023      	beq.n	8019dc8 <uxr_next_input_reliable_buffer_available+0x80>
 8019d80:	4605      	mov	r5, r0
 8019d82:	6923      	ldr	r3, [r4, #16]
 8019d84:	4630      	mov	r0, r6
 8019d86:	4798      	blx	r3
 8019d88:	4682      	mov	sl, r0
 8019d8a:	b300      	cbz	r0, 8019dce <uxr_next_input_reliable_buffer_available+0x86>
 8019d8c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8019d90:	2101      	movs	r1, #1
 8019d92:	4650      	mov	r0, sl
 8019d94:	f000 fd40 	bl	801a818 <uxr_seq_num_add>
 8019d98:	8921      	ldrh	r1, [r4, #8]
 8019d9a:	4682      	mov	sl, r0
 8019d9c:	6863      	ldr	r3, [r4, #4]
 8019d9e:	6820      	ldr	r0, [r4, #0]
 8019da0:	fbba f2f1 	udiv	r2, sl, r1
 8019da4:	fbb3 f3f1 	udiv	r3, r3, r1
 8019da8:	fb01 a212 	mls	r2, r1, r2, sl
 8019dac:	b292      	uxth	r2, r2
 8019dae:	fb02 f303 	mul.w	r3, r2, r3
 8019db2:	3304      	adds	r3, #4
 8019db4:	4418      	add	r0, r3
 8019db6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019dba:	b12b      	cbz	r3, 8019dc8 <uxr_next_input_reliable_buffer_available+0x80>
 8019dbc:	6923      	ldr	r3, [r4, #16]
 8019dbe:	4798      	blx	r3
 8019dc0:	2802      	cmp	r0, #2
 8019dc2:	d01b      	beq.n	8019dfc <uxr_next_input_reliable_buffer_available+0xb4>
 8019dc4:	2801      	cmp	r0, #1
 8019dc6:	d0e3      	beq.n	8019d90 <uxr_next_input_reliable_buffer_available+0x48>
 8019dc8:	2000      	movs	r0, #0
 8019dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019dce:	464a      	mov	r2, r9
 8019dd0:	4631      	mov	r1, r6
 8019dd2:	4638      	mov	r0, r7
 8019dd4:	f7f6 fcda 	bl	801078c <ucdr_init_buffer>
 8019dd8:	8921      	ldrh	r1, [r4, #8]
 8019dda:	6863      	ldr	r3, [r4, #4]
 8019ddc:	2001      	movs	r0, #1
 8019dde:	fbb5 f2f1 	udiv	r2, r5, r1
 8019de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8019de6:	fb01 5212 	mls	r2, r1, r2, r5
 8019dea:	b292      	uxth	r2, r2
 8019dec:	fb02 f303 	mul.w	r3, r2, r3
 8019df0:	6822      	ldr	r2, [r4, #0]
 8019df2:	f842 a003 	str.w	sl, [r2, r3]
 8019df6:	81a5      	strh	r5, [r4, #12]
 8019df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019dfc:	8920      	ldrh	r0, [r4, #8]
 8019dfe:	eb06 0108 	add.w	r1, r6, r8
 8019e02:	6863      	ldr	r3, [r4, #4]
 8019e04:	eba9 0208 	sub.w	r2, r9, r8
 8019e08:	fbb5 f6f0 	udiv	r6, r5, r0
 8019e0c:	fbb3 f3f0 	udiv	r3, r3, r0
 8019e10:	fb00 5516 	mls	r5, r0, r6, r5
 8019e14:	2000      	movs	r0, #0
 8019e16:	b2ad      	uxth	r5, r5
 8019e18:	fb03 f505 	mul.w	r5, r3, r5
 8019e1c:	6823      	ldr	r3, [r4, #0]
 8019e1e:	5158      	str	r0, [r3, r5]
 8019e20:	4638      	mov	r0, r7
 8019e22:	f7f6 fcb3 	bl	801078c <ucdr_init_buffer>
 8019e26:	4638      	mov	r0, r7
 8019e28:	4622      	mov	r2, r4
 8019e2a:	4903      	ldr	r1, [pc, #12]	; (8019e38 <uxr_next_input_reliable_buffer_available+0xf0>)
 8019e2c:	f7f6 fc82 	bl	8010734 <ucdr_set_on_full_buffer_callback>
 8019e30:	2001      	movs	r0, #1
 8019e32:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8019e36:	e7c8      	b.n	8019dca <uxr_next_input_reliable_buffer_available+0x82>
 8019e38:	08019b49 	.word	0x08019b49

08019e3c <uxr_process_heartbeat>:
 8019e3c:	b538      	push	{r3, r4, r5, lr}
 8019e3e:	4611      	mov	r1, r2
 8019e40:	4604      	mov	r4, r0
 8019e42:	89c0      	ldrh	r0, [r0, #14]
 8019e44:	4615      	mov	r5, r2
 8019e46:	f000 fcef 	bl	801a828 <uxr_seq_num_cmp>
 8019e4a:	2800      	cmp	r0, #0
 8019e4c:	bfb8      	it	lt
 8019e4e:	81e5      	strhlt	r5, [r4, #14]
 8019e50:	bd38      	pop	{r3, r4, r5, pc}
 8019e52:	bf00      	nop

08019e54 <uxr_compute_acknack>:
 8019e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e58:	8903      	ldrh	r3, [r0, #8]
 8019e5a:	4604      	mov	r4, r0
 8019e5c:	460f      	mov	r7, r1
 8019e5e:	8985      	ldrh	r5, [r0, #12]
 8019e60:	b1db      	cbz	r3, 8019e9a <uxr_compute_acknack+0x46>
 8019e62:	4628      	mov	r0, r5
 8019e64:	2601      	movs	r6, #1
 8019e66:	e004      	b.n	8019e72 <uxr_compute_acknack+0x1e>
 8019e68:	4566      	cmp	r6, ip
 8019e6a:	f106 0601 	add.w	r6, r6, #1
 8019e6e:	d214      	bcs.n	8019e9a <uxr_compute_acknack+0x46>
 8019e70:	89a0      	ldrh	r0, [r4, #12]
 8019e72:	b2b1      	uxth	r1, r6
 8019e74:	f000 fcd0 	bl	801a818 <uxr_seq_num_add>
 8019e78:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019e7c:	fbb0 f2fc 	udiv	r2, r0, ip
 8019e80:	e9d4 1300 	ldrd	r1, r3, [r4]
 8019e84:	fb0c 0212 	mls	r2, ip, r2, r0
 8019e88:	fbb3 f3fc 	udiv	r3, r3, ip
 8019e8c:	b292      	uxth	r2, r2
 8019e8e:	fb02 f303 	mul.w	r3, r2, r3
 8019e92:	58cb      	ldr	r3, [r1, r3]
 8019e94:	2b00      	cmp	r3, #0
 8019e96:	d1e7      	bne.n	8019e68 <uxr_compute_acknack+0x14>
 8019e98:	4605      	mov	r5, r0
 8019e9a:	803d      	strh	r5, [r7, #0]
 8019e9c:	2101      	movs	r1, #1
 8019e9e:	89e6      	ldrh	r6, [r4, #14]
 8019ea0:	4628      	mov	r0, r5
 8019ea2:	f000 fcbd 	bl	801a820 <uxr_seq_num_sub>
 8019ea6:	4601      	mov	r1, r0
 8019ea8:	4630      	mov	r0, r6
 8019eaa:	f000 fcb9 	bl	801a820 <uxr_seq_num_sub>
 8019eae:	4606      	mov	r6, r0
 8019eb0:	b328      	cbz	r0, 8019efe <uxr_compute_acknack+0xaa>
 8019eb2:	f04f 0900 	mov.w	r9, #0
 8019eb6:	f04f 0801 	mov.w	r8, #1
 8019eba:	464d      	mov	r5, r9
 8019ebc:	fa1f f189 	uxth.w	r1, r9
 8019ec0:	8838      	ldrh	r0, [r7, #0]
 8019ec2:	f000 fca9 	bl	801a818 <uxr_seq_num_add>
 8019ec6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8019eca:	6861      	ldr	r1, [r4, #4]
 8019ecc:	fa08 fe09 	lsl.w	lr, r8, r9
 8019ed0:	6822      	ldr	r2, [r4, #0]
 8019ed2:	f109 0901 	add.w	r9, r9, #1
 8019ed6:	ea4e 0e05 	orr.w	lr, lr, r5
 8019eda:	fbb0 f3fc 	udiv	r3, r0, ip
 8019ede:	fbb1 f1fc 	udiv	r1, r1, ip
 8019ee2:	fb03 001c 	mls	r0, r3, ip, r0
 8019ee6:	b283      	uxth	r3, r0
 8019ee8:	fb01 f303 	mul.w	r3, r1, r3
 8019eec:	58d3      	ldr	r3, [r2, r3]
 8019eee:	b90b      	cbnz	r3, 8019ef4 <uxr_compute_acknack+0xa0>
 8019ef0:	fa1f f58e 	uxth.w	r5, lr
 8019ef4:	454e      	cmp	r6, r9
 8019ef6:	d1e1      	bne.n	8019ebc <uxr_compute_acknack+0x68>
 8019ef8:	4628      	mov	r0, r5
 8019efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019efe:	4605      	mov	r5, r0
 8019f00:	4628      	mov	r0, r5
 8019f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019f06:	bf00      	nop

08019f08 <uxr_init_output_best_effort_stream>:
 8019f08:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8019f0c:	6001      	str	r1, [r0, #0]
 8019f0e:	7303      	strb	r3, [r0, #12]
 8019f10:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8019f14:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8019f18:	4770      	bx	lr
 8019f1a:	bf00      	nop

08019f1c <uxr_reset_output_best_effort_stream>:
 8019f1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019f20:	7b03      	ldrb	r3, [r0, #12]
 8019f22:	81c2      	strh	r2, [r0, #14]
 8019f24:	6043      	str	r3, [r0, #4]
 8019f26:	4770      	bx	lr

08019f28 <uxr_prepare_best_effort_buffer_to_write>:
 8019f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f2a:	4604      	mov	r4, r0
 8019f2c:	b083      	sub	sp, #12
 8019f2e:	6840      	ldr	r0, [r0, #4]
 8019f30:	460d      	mov	r5, r1
 8019f32:	4616      	mov	r6, r2
 8019f34:	f7f8 f920 	bl	8012178 <uxr_submessage_padding>
 8019f38:	6863      	ldr	r3, [r4, #4]
 8019f3a:	4418      	add	r0, r3
 8019f3c:	68a3      	ldr	r3, [r4, #8]
 8019f3e:	1942      	adds	r2, r0, r5
 8019f40:	4293      	cmp	r3, r2
 8019f42:	bf2c      	ite	cs
 8019f44:	2701      	movcs	r7, #1
 8019f46:	2700      	movcc	r7, #0
 8019f48:	d202      	bcs.n	8019f50 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8019f4a:	4638      	mov	r0, r7
 8019f4c:	b003      	add	sp, #12
 8019f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f50:	9000      	str	r0, [sp, #0]
 8019f52:	2300      	movs	r3, #0
 8019f54:	4630      	mov	r0, r6
 8019f56:	6821      	ldr	r1, [r4, #0]
 8019f58:	f7f6 fc06 	bl	8010768 <ucdr_init_buffer_origin_offset>
 8019f5c:	6861      	ldr	r1, [r4, #4]
 8019f5e:	4638      	mov	r0, r7
 8019f60:	4429      	add	r1, r5
 8019f62:	6061      	str	r1, [r4, #4]
 8019f64:	b003      	add	sp, #12
 8019f66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019f68 <uxr_prepare_best_effort_buffer_to_send>:
 8019f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f6c:	4604      	mov	r4, r0
 8019f6e:	461d      	mov	r5, r3
 8019f70:	6840      	ldr	r0, [r0, #4]
 8019f72:	7b23      	ldrb	r3, [r4, #12]
 8019f74:	4298      	cmp	r0, r3
 8019f76:	bf8c      	ite	hi
 8019f78:	2601      	movhi	r6, #1
 8019f7a:	2600      	movls	r6, #0
 8019f7c:	d802      	bhi.n	8019f84 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8019f7e:	4630      	mov	r0, r6
 8019f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f84:	4688      	mov	r8, r1
 8019f86:	89e0      	ldrh	r0, [r4, #14]
 8019f88:	2101      	movs	r1, #1
 8019f8a:	4617      	mov	r7, r2
 8019f8c:	f000 fc44 	bl	801a818 <uxr_seq_num_add>
 8019f90:	6823      	ldr	r3, [r4, #0]
 8019f92:	81e0      	strh	r0, [r4, #14]
 8019f94:	8028      	strh	r0, [r5, #0]
 8019f96:	4630      	mov	r0, r6
 8019f98:	f8c8 3000 	str.w	r3, [r8]
 8019f9c:	6863      	ldr	r3, [r4, #4]
 8019f9e:	603b      	str	r3, [r7, #0]
 8019fa0:	7b23      	ldrb	r3, [r4, #12]
 8019fa2:	6063      	str	r3, [r4, #4]
 8019fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019fa8 <on_full_output_buffer>:
 8019fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019faa:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 8019fae:	460c      	mov	r4, r1
 8019fb0:	6803      	ldr	r3, [r0, #0]
 8019fb2:	4605      	mov	r5, r0
 8019fb4:	7b26      	ldrb	r6, [r4, #12]
 8019fb6:	e9d1 1200 	ldrd	r1, r2, [r1]
 8019fba:	fbb2 f2fc 	udiv	r2, r2, ip
 8019fbe:	eba3 0e01 	sub.w	lr, r3, r1
 8019fc2:	6903      	ldr	r3, [r0, #16]
 8019fc4:	fbbe fef2 	udiv	lr, lr, r2
 8019fc8:	f10e 0e01 	add.w	lr, lr, #1
 8019fcc:	fa1f fe8e 	uxth.w	lr, lr
 8019fd0:	fbbe f7fc 	udiv	r7, lr, ip
 8019fd4:	fb0c ec17 	mls	ip, ip, r7, lr
 8019fd8:	fa1f fc8c 	uxth.w	ip, ip
 8019fdc:	fb02 fc0c 	mul.w	ip, r2, ip
 8019fe0:	f851 200c 	ldr.w	r2, [r1, ip]
 8019fe4:	44b4      	add	ip, r6
 8019fe6:	1b92      	subs	r2, r2, r6
 8019fe8:	f10c 0c08 	add.w	ip, ip, #8
 8019fec:	3a04      	subs	r2, #4
 8019fee:	4461      	add	r1, ip
 8019ff0:	f7f6 fbc4 	bl	801077c <ucdr_init_buffer_origin>
 8019ff4:	4628      	mov	r0, r5
 8019ff6:	4622      	mov	r2, r4
 8019ff8:	4902      	ldr	r1, [pc, #8]	; (801a004 <on_full_output_buffer+0x5c>)
 8019ffa:	f7f6 fb9b 	bl	8010734 <ucdr_set_on_full_buffer_callback>
 8019ffe:	2000      	movs	r0, #0
 801a000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a002:	bf00      	nop
 801a004:	08019fa9 	.word	0x08019fa9

0801a008 <uxr_init_output_reliable_stream>:
 801a008:	b530      	push	{r4, r5, lr}
 801a00a:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801a00e:	8103      	strh	r3, [r0, #8]
 801a010:	7304      	strb	r4, [r0, #12]
 801a012:	e9c0 1200 	strd	r1, r2, [r0]
 801a016:	b1e3      	cbz	r3, 801a052 <uxr_init_output_reliable_stream+0x4a>
 801a018:	600c      	str	r4, [r1, #0]
 801a01a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a01e:	f1bc 0f01 	cmp.w	ip, #1
 801a022:	d916      	bls.n	801a052 <uxr_init_output_reliable_stream+0x4a>
 801a024:	f04f 0e01 	mov.w	lr, #1
 801a028:	6843      	ldr	r3, [r0, #4]
 801a02a:	f10e 0501 	add.w	r5, lr, #1
 801a02e:	7b04      	ldrb	r4, [r0, #12]
 801a030:	6801      	ldr	r1, [r0, #0]
 801a032:	fbbe f2fc 	udiv	r2, lr, ip
 801a036:	fbb3 f3fc 	udiv	r3, r3, ip
 801a03a:	fb0c e212 	mls	r2, ip, r2, lr
 801a03e:	fa1f fe85 	uxth.w	lr, r5
 801a042:	b292      	uxth	r2, r2
 801a044:	fb02 f303 	mul.w	r3, r2, r3
 801a048:	50cc      	str	r4, [r1, r3]
 801a04a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a04e:	45f4      	cmp	ip, lr
 801a050:	d8ea      	bhi.n	801a028 <uxr_init_output_reliable_stream+0x20>
 801a052:	4b07      	ldr	r3, [pc, #28]	; (801a070 <uxr_init_output_reliable_stream+0x68>)
 801a054:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a058:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801a05c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801a060:	f8c0 300e 	str.w	r3, [r0, #14]
 801a064:	2300      	movs	r3, #0
 801a066:	8242      	strh	r2, [r0, #18]
 801a068:	8403      	strh	r3, [r0, #32]
 801a06a:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801a06e:	bd30      	pop	{r4, r5, pc}
 801a070:	ffff0000 	.word	0xffff0000
 801a074:	00000000 	.word	0x00000000

0801a078 <uxr_reset_output_reliable_stream>:
 801a078:	8901      	ldrh	r1, [r0, #8]
 801a07a:	b510      	push	{r4, lr}
 801a07c:	b1b1      	cbz	r1, 801a0ac <uxr_reset_output_reliable_stream+0x34>
 801a07e:	f04f 0e00 	mov.w	lr, #0
 801a082:	46f4      	mov	ip, lr
 801a084:	6843      	ldr	r3, [r0, #4]
 801a086:	f10e 0e01 	add.w	lr, lr, #1
 801a08a:	7b04      	ldrb	r4, [r0, #12]
 801a08c:	fbbc f2f1 	udiv	r2, ip, r1
 801a090:	fbb3 f3f1 	udiv	r3, r3, r1
 801a094:	fb01 c212 	mls	r2, r1, r2, ip
 801a098:	fa1f fc8e 	uxth.w	ip, lr
 801a09c:	b292      	uxth	r2, r2
 801a09e:	fb02 f303 	mul.w	r3, r2, r3
 801a0a2:	6802      	ldr	r2, [r0, #0]
 801a0a4:	50d4      	str	r4, [r2, r3]
 801a0a6:	8901      	ldrh	r1, [r0, #8]
 801a0a8:	4561      	cmp	r1, ip
 801a0aa:	d8eb      	bhi.n	801a084 <uxr_reset_output_reliable_stream+0xc>
 801a0ac:	4b08      	ldr	r3, [pc, #32]	; (801a0d0 <uxr_reset_output_reliable_stream+0x58>)
 801a0ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a0b2:	ed9f 7b05 	vldr	d7, [pc, #20]	; 801a0c8 <uxr_reset_output_reliable_stream+0x50>
 801a0b6:	f8c0 300e 	str.w	r3, [r0, #14]
 801a0ba:	2300      	movs	r3, #0
 801a0bc:	8242      	strh	r2, [r0, #18]
 801a0be:	8403      	strh	r3, [r0, #32]
 801a0c0:	ed80 7b06 	vstr	d7, [r0, #24]
 801a0c4:	bd10      	pop	{r4, pc}
 801a0c6:	bf00      	nop
 801a0c8:	ffffffff 	.word	0xffffffff
 801a0cc:	7fffffff 	.word	0x7fffffff
 801a0d0:	ffff0000 	.word	0xffff0000

0801a0d4 <uxr_prepare_reliable_buffer_to_write>:
 801a0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a0d8:	4604      	mov	r4, r0
 801a0da:	b091      	sub	sp, #68	; 0x44
 801a0dc:	8900      	ldrh	r0, [r0, #8]
 801a0de:	468b      	mov	fp, r1
 801a0e0:	89e6      	ldrh	r6, [r4, #14]
 801a0e2:	9204      	str	r2, [sp, #16]
 801a0e4:	6865      	ldr	r5, [r4, #4]
 801a0e6:	6823      	ldr	r3, [r4, #0]
 801a0e8:	f894 900c 	ldrb.w	r9, [r4, #12]
 801a0ec:	fbb6 f2f0 	udiv	r2, r6, r0
 801a0f0:	fbb5 f5f0 	udiv	r5, r5, r0
 801a0f4:	fb00 6212 	mls	r2, r0, r2, r6
 801a0f8:	1f2f      	subs	r7, r5, #4
 801a0fa:	b292      	uxth	r2, r2
 801a0fc:	fb05 3202 	mla	r2, r5, r2, r3
 801a100:	1d11      	adds	r1, r2, #4
 801a102:	f8d2 8000 	ldr.w	r8, [r2]
 801a106:	9103      	str	r1, [sp, #12]
 801a108:	2800      	cmp	r0, #0
 801a10a:	f000 814a 	beq.w	801a3a2 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801a10e:	f04f 0c00 	mov.w	ip, #0
 801a112:	46e2      	mov	sl, ip
 801a114:	4661      	mov	r1, ip
 801a116:	f10c 0c01 	add.w	ip, ip, #1
 801a11a:	fbb1 f2f0 	udiv	r2, r1, r0
 801a11e:	fb00 1212 	mls	r2, r0, r2, r1
 801a122:	fa1f f18c 	uxth.w	r1, ip
 801a126:	b292      	uxth	r2, r2
 801a128:	fb05 f202 	mul.w	r2, r5, r2
 801a12c:	589a      	ldr	r2, [r3, r2]
 801a12e:	454a      	cmp	r2, r9
 801a130:	d103      	bne.n	801a13a <uxr_prepare_reliable_buffer_to_write+0x66>
 801a132:	f10a 0a01 	add.w	sl, sl, #1
 801a136:	fa1f fa8a 	uxth.w	sl, sl
 801a13a:	4281      	cmp	r1, r0
 801a13c:	d3eb      	bcc.n	801a116 <uxr_prepare_reliable_buffer_to_write+0x42>
 801a13e:	4640      	mov	r0, r8
 801a140:	2104      	movs	r1, #4
 801a142:	f8cd a014 	str.w	sl, [sp, #20]
 801a146:	f7f6 fb25 	bl	8010794 <ucdr_alignment>
 801a14a:	4480      	add	r8, r0
 801a14c:	eb08 020b 	add.w	r2, r8, fp
 801a150:	42ba      	cmp	r2, r7
 801a152:	f240 80ca 	bls.w	801a2ea <uxr_prepare_reliable_buffer_to_write+0x216>
 801a156:	7b22      	ldrb	r2, [r4, #12]
 801a158:	445a      	add	r2, fp
 801a15a:	42ba      	cmp	r2, r7
 801a15c:	f240 80b2 	bls.w	801a2c4 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801a160:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801a164:	b2bb      	uxth	r3, r7
 801a166:	eba2 0209 	sub.w	r2, r2, r9
 801a16a:	441a      	add	r2, r3
 801a16c:	b292      	uxth	r2, r2
 801a16e:	fb0a f902 	mul.w	r9, sl, r2
 801a172:	9205      	str	r2, [sp, #20]
 801a174:	45d9      	cmp	r9, fp
 801a176:	9206      	str	r2, [sp, #24]
 801a178:	f0c0 80b3 	bcc.w	801a2e2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a17c:	f108 0204 	add.w	r2, r8, #4
 801a180:	42ba      	cmp	r2, r7
 801a182:	f080 80da 	bcs.w	801a33a <uxr_prepare_reliable_buffer_to_write+0x266>
 801a186:	f1a3 0904 	sub.w	r9, r3, #4
 801a18a:	9b05      	ldr	r3, [sp, #20]
 801a18c:	eba9 0908 	sub.w	r9, r9, r8
 801a190:	fa1f f989 	uxth.w	r9, r9
 801a194:	ebab 0b09 	sub.w	fp, fp, r9
 801a198:	fbbb f2f3 	udiv	r2, fp, r3
 801a19c:	fb03 b312 	mls	r3, r3, r2, fp
 801a1a0:	2b00      	cmp	r3, #0
 801a1a2:	f040 80c4 	bne.w	801a32e <uxr_prepare_reliable_buffer_to_write+0x25a>
 801a1a6:	b293      	uxth	r3, r2
 801a1a8:	4553      	cmp	r3, sl
 801a1aa:	f200 809a 	bhi.w	801a2e2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	f000 80f9 	beq.w	801a3a6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801a1b4:	f8cd 801c 	str.w	r8, [sp, #28]
 801a1b8:	f04f 0a00 	mov.w	sl, #0
 801a1bc:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801a1c0:	f10d 0b20 	add.w	fp, sp, #32
 801a1c4:	9505      	str	r5, [sp, #20]
 801a1c6:	461d      	mov	r5, r3
 801a1c8:	e000      	b.n	801a1cc <uxr_prepare_reliable_buffer_to_write+0xf8>
 801a1ca:	46c1      	mov	r9, r8
 801a1cc:	8922      	ldrh	r2, [r4, #8]
 801a1ce:	4658      	mov	r0, fp
 801a1d0:	6863      	ldr	r3, [r4, #4]
 801a1d2:	f10a 0a01 	add.w	sl, sl, #1
 801a1d6:	fbb6 f1f2 	udiv	r1, r6, r2
 801a1da:	fbb3 f3f2 	udiv	r3, r3, r2
 801a1de:	fb02 6111 	mls	r1, r2, r1, r6
 801a1e2:	463a      	mov	r2, r7
 801a1e4:	b289      	uxth	r1, r1
 801a1e6:	fb03 f101 	mul.w	r1, r3, r1
 801a1ea:	6823      	ldr	r3, [r4, #0]
 801a1ec:	3104      	adds	r1, #4
 801a1ee:	4419      	add	r1, r3
 801a1f0:	2300      	movs	r3, #0
 801a1f2:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801a1f6:	f8cd c000 	str.w	ip, [sp]
 801a1fa:	f7f6 fab5 	bl	8010768 <ucdr_init_buffer_origin_offset>
 801a1fe:	464a      	mov	r2, r9
 801a200:	2300      	movs	r3, #0
 801a202:	210d      	movs	r1, #13
 801a204:	4658      	mov	r0, fp
 801a206:	f7f7 ff77 	bl	80120f8 <uxr_buffer_submessage_header>
 801a20a:	8921      	ldrh	r1, [r4, #8]
 801a20c:	6863      	ldr	r3, [r4, #4]
 801a20e:	4630      	mov	r0, r6
 801a210:	fbb6 f2f1 	udiv	r2, r6, r1
 801a214:	fbb3 f3f1 	udiv	r3, r3, r1
 801a218:	fb01 6212 	mls	r2, r1, r2, r6
 801a21c:	2101      	movs	r1, #1
 801a21e:	b292      	uxth	r2, r2
 801a220:	fb02 f303 	mul.w	r3, r2, r3
 801a224:	6822      	ldr	r2, [r4, #0]
 801a226:	50d7      	str	r7, [r2, r3]
 801a228:	f000 faf6 	bl	801a818 <uxr_seq_num_add>
 801a22c:	4606      	mov	r6, r0
 801a22e:	fa1f f38a 	uxth.w	r3, sl
 801a232:	429d      	cmp	r5, r3
 801a234:	d8c9      	bhi.n	801a1ca <uxr_prepare_reliable_buffer_to_write+0xf6>
 801a236:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801a23a:	9d05      	ldr	r5, [sp, #20]
 801a23c:	8920      	ldrh	r0, [r4, #8]
 801a23e:	463a      	mov	r2, r7
 801a240:	6863      	ldr	r3, [r4, #4]
 801a242:	fbb6 f1f0 	udiv	r1, r6, r0
 801a246:	fbb3 f3f0 	udiv	r3, r3, r0
 801a24a:	fb00 6111 	mls	r1, r0, r1, r6
 801a24e:	4658      	mov	r0, fp
 801a250:	b289      	uxth	r1, r1
 801a252:	fb01 f303 	mul.w	r3, r1, r3
 801a256:	6821      	ldr	r1, [r4, #0]
 801a258:	3304      	adds	r3, #4
 801a25a:	4419      	add	r1, r3
 801a25c:	2300      	movs	r3, #0
 801a25e:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801a262:	9700      	str	r7, [sp, #0]
 801a264:	f7f6 fa80 	bl	8010768 <ucdr_init_buffer_origin_offset>
 801a268:	9f06      	ldr	r7, [sp, #24]
 801a26a:	4658      	mov	r0, fp
 801a26c:	2302      	movs	r3, #2
 801a26e:	b2ba      	uxth	r2, r7
 801a270:	210d      	movs	r1, #13
 801a272:	f7f7 ff41 	bl	80120f8 <uxr_buffer_submessage_header>
 801a276:	f108 0104 	add.w	r1, r8, #4
 801a27a:	9b03      	ldr	r3, [sp, #12]
 801a27c:	f1a5 0208 	sub.w	r2, r5, #8
 801a280:	8925      	ldrh	r5, [r4, #8]
 801a282:	440b      	add	r3, r1
 801a284:	eba2 0208 	sub.w	r2, r2, r8
 801a288:	fbb6 f0f5 	udiv	r0, r6, r5
 801a28c:	4619      	mov	r1, r3
 801a28e:	6863      	ldr	r3, [r4, #4]
 801a290:	fb05 6010 	mls	r0, r5, r0, r6
 801a294:	fbb3 f3f5 	udiv	r3, r3, r5
 801a298:	b280      	uxth	r0, r0
 801a29a:	6825      	ldr	r5, [r4, #0]
 801a29c:	fb00 f303 	mul.w	r3, r0, r3
 801a2a0:	7b20      	ldrb	r0, [r4, #12]
 801a2a2:	3004      	adds	r0, #4
 801a2a4:	4438      	add	r0, r7
 801a2a6:	50e8      	str	r0, [r5, r3]
 801a2a8:	9d04      	ldr	r5, [sp, #16]
 801a2aa:	4628      	mov	r0, r5
 801a2ac:	f7f6 fa6e 	bl	801078c <ucdr_init_buffer>
 801a2b0:	4628      	mov	r0, r5
 801a2b2:	4622      	mov	r2, r4
 801a2b4:	493d      	ldr	r1, [pc, #244]	; (801a3ac <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801a2b6:	f7f6 fa3d 	bl	8010734 <ucdr_set_on_full_buffer_callback>
 801a2ba:	2001      	movs	r0, #1
 801a2bc:	81e6      	strh	r6, [r4, #14]
 801a2be:	b011      	add	sp, #68	; 0x44
 801a2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2c4:	2101      	movs	r1, #1
 801a2c6:	89e0      	ldrh	r0, [r4, #14]
 801a2c8:	f000 faa6 	bl	801a818 <uxr_seq_num_add>
 801a2cc:	4605      	mov	r5, r0
 801a2ce:	8921      	ldrh	r1, [r4, #8]
 801a2d0:	8a60      	ldrh	r0, [r4, #18]
 801a2d2:	f000 faa1 	bl	801a818 <uxr_seq_num_add>
 801a2d6:	4601      	mov	r1, r0
 801a2d8:	4628      	mov	r0, r5
 801a2da:	f000 faa5 	bl	801a828 <uxr_seq_num_cmp>
 801a2de:	2800      	cmp	r0, #0
 801a2e0:	dd44      	ble.n	801a36c <uxr_prepare_reliable_buffer_to_write+0x298>
 801a2e2:	2000      	movs	r0, #0
 801a2e4:	b011      	add	sp, #68	; 0x44
 801a2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2ea:	8921      	ldrh	r1, [r4, #8]
 801a2ec:	8a60      	ldrh	r0, [r4, #18]
 801a2ee:	9205      	str	r2, [sp, #20]
 801a2f0:	f000 fa92 	bl	801a818 <uxr_seq_num_add>
 801a2f4:	4601      	mov	r1, r0
 801a2f6:	4630      	mov	r0, r6
 801a2f8:	f000 fa96 	bl	801a828 <uxr_seq_num_cmp>
 801a2fc:	2800      	cmp	r0, #0
 801a2fe:	9a05      	ldr	r2, [sp, #20]
 801a300:	dcef      	bgt.n	801a2e2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a302:	8925      	ldrh	r5, [r4, #8]
 801a304:	e9d4 7300 	ldrd	r7, r3, [r4]
 801a308:	fbb6 f4f5 	udiv	r4, r6, r5
 801a30c:	fbb3 f3f5 	udiv	r3, r3, r5
 801a310:	fb05 6414 	mls	r4, r5, r4, r6
 801a314:	b2a4      	uxth	r4, r4
 801a316:	fb04 f303 	mul.w	r3, r4, r3
 801a31a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801a31e:	50fa      	str	r2, [r7, r3]
 801a320:	2300      	movs	r3, #0
 801a322:	f8cd 8000 	str.w	r8, [sp]
 801a326:	f7f6 fa1f 	bl	8010768 <ucdr_init_buffer_origin_offset>
 801a32a:	2001      	movs	r0, #1
 801a32c:	e7da      	b.n	801a2e4 <uxr_prepare_reliable_buffer_to_write+0x210>
 801a32e:	3201      	adds	r2, #1
 801a330:	9306      	str	r3, [sp, #24]
 801a332:	b293      	uxth	r3, r2
 801a334:	4553      	cmp	r3, sl
 801a336:	d8d4      	bhi.n	801a2e2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a338:	e739      	b.n	801a1ae <uxr_prepare_reliable_buffer_to_write+0xda>
 801a33a:	4630      	mov	r0, r6
 801a33c:	2101      	movs	r1, #1
 801a33e:	9307      	str	r3, [sp, #28]
 801a340:	f000 fa6a 	bl	801a818 <uxr_seq_num_add>
 801a344:	4606      	mov	r6, r0
 801a346:	8920      	ldrh	r0, [r4, #8]
 801a348:	6862      	ldr	r2, [r4, #4]
 801a34a:	fbb6 f1f0 	udiv	r1, r6, r0
 801a34e:	fbb2 f2f0 	udiv	r2, r2, r0
 801a352:	fb00 6111 	mls	r1, r0, r1, r6
 801a356:	b289      	uxth	r1, r1
 801a358:	fb01 f202 	mul.w	r2, r1, r2
 801a35c:	6821      	ldr	r1, [r4, #0]
 801a35e:	3204      	adds	r2, #4
 801a360:	188b      	adds	r3, r1, r2
 801a362:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801a366:	9303      	str	r3, [sp, #12]
 801a368:	9b07      	ldr	r3, [sp, #28]
 801a36a:	e70c      	b.n	801a186 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801a36c:	8921      	ldrh	r1, [r4, #8]
 801a36e:	6863      	ldr	r3, [r4, #4]
 801a370:	9804      	ldr	r0, [sp, #16]
 801a372:	fbb5 f2f1 	udiv	r2, r5, r1
 801a376:	fbb3 f3f1 	udiv	r3, r3, r1
 801a37a:	fb01 5212 	mls	r2, r1, r2, r5
 801a37e:	6821      	ldr	r1, [r4, #0]
 801a380:	b292      	uxth	r2, r2
 801a382:	fb02 f303 	mul.w	r3, r2, r3
 801a386:	7b22      	ldrb	r2, [r4, #12]
 801a388:	3304      	adds	r3, #4
 801a38a:	445a      	add	r2, fp
 801a38c:	4419      	add	r1, r3
 801a38e:	f841 2c04 	str.w	r2, [r1, #-4]
 801a392:	7b23      	ldrb	r3, [r4, #12]
 801a394:	9300      	str	r3, [sp, #0]
 801a396:	2300      	movs	r3, #0
 801a398:	f7f6 f9e6 	bl	8010768 <ucdr_init_buffer_origin_offset>
 801a39c:	2001      	movs	r0, #1
 801a39e:	81e5      	strh	r5, [r4, #14]
 801a3a0:	e7a0      	b.n	801a2e4 <uxr_prepare_reliable_buffer_to_write+0x210>
 801a3a2:	4682      	mov	sl, r0
 801a3a4:	e6cb      	b.n	801a13e <uxr_prepare_reliable_buffer_to_write+0x6a>
 801a3a6:	f10d 0b20 	add.w	fp, sp, #32
 801a3aa:	e747      	b.n	801a23c <uxr_prepare_reliable_buffer_to_write+0x168>
 801a3ac:	08019fa9 	.word	0x08019fa9

0801a3b0 <uxr_prepare_next_reliable_buffer_to_send>:
 801a3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3b2:	4604      	mov	r4, r0
 801a3b4:	461d      	mov	r5, r3
 801a3b6:	460f      	mov	r7, r1
 801a3b8:	8a00      	ldrh	r0, [r0, #16]
 801a3ba:	2101      	movs	r1, #1
 801a3bc:	4616      	mov	r6, r2
 801a3be:	f000 fa2b 	bl	801a818 <uxr_seq_num_add>
 801a3c2:	8028      	strh	r0, [r5, #0]
 801a3c4:	8922      	ldrh	r2, [r4, #8]
 801a3c6:	6863      	ldr	r3, [r4, #4]
 801a3c8:	fbb0 f1f2 	udiv	r1, r0, r2
 801a3cc:	fbb3 f3f2 	udiv	r3, r3, r2
 801a3d0:	fb02 0c11 	mls	ip, r2, r1, r0
 801a3d4:	89e1      	ldrh	r1, [r4, #14]
 801a3d6:	fa1f fc8c 	uxth.w	ip, ip
 801a3da:	fb0c fc03 	mul.w	ip, ip, r3
 801a3de:	6823      	ldr	r3, [r4, #0]
 801a3e0:	f10c 0c04 	add.w	ip, ip, #4
 801a3e4:	4463      	add	r3, ip
 801a3e6:	603b      	str	r3, [r7, #0]
 801a3e8:	6823      	ldr	r3, [r4, #0]
 801a3ea:	449c      	add	ip, r3
 801a3ec:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801a3f0:	6033      	str	r3, [r6, #0]
 801a3f2:	f000 fa19 	bl	801a828 <uxr_seq_num_cmp>
 801a3f6:	2800      	cmp	r0, #0
 801a3f8:	dd01      	ble.n	801a3fe <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801a3fa:	2000      	movs	r0, #0
 801a3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3fe:	7b23      	ldrb	r3, [r4, #12]
 801a400:	6832      	ldr	r2, [r6, #0]
 801a402:	429a      	cmp	r2, r3
 801a404:	d9f9      	bls.n	801a3fa <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a406:	8a61      	ldrh	r1, [r4, #18]
 801a408:	8a20      	ldrh	r0, [r4, #16]
 801a40a:	f000 fa09 	bl	801a820 <uxr_seq_num_sub>
 801a40e:	8923      	ldrh	r3, [r4, #8]
 801a410:	4283      	cmp	r3, r0
 801a412:	d0f2      	beq.n	801a3fa <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a414:	8828      	ldrh	r0, [r5, #0]
 801a416:	89e3      	ldrh	r3, [r4, #14]
 801a418:	8220      	strh	r0, [r4, #16]
 801a41a:	4298      	cmp	r0, r3
 801a41c:	d001      	beq.n	801a422 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801a41e:	2001      	movs	r0, #1
 801a420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a422:	2101      	movs	r1, #1
 801a424:	f000 f9f8 	bl	801a818 <uxr_seq_num_add>
 801a428:	4603      	mov	r3, r0
 801a42a:	2001      	movs	r0, #1
 801a42c:	81e3      	strh	r3, [r4, #14]
 801a42e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a430 <uxr_update_output_stream_heartbeat_timestamp>:
 801a430:	b570      	push	{r4, r5, r6, lr}
 801a432:	8a01      	ldrh	r1, [r0, #16]
 801a434:	4604      	mov	r4, r0
 801a436:	8a40      	ldrh	r0, [r0, #18]
 801a438:	4615      	mov	r5, r2
 801a43a:	461e      	mov	r6, r3
 801a43c:	f000 f9f4 	bl	801a828 <uxr_seq_num_cmp>
 801a440:	2800      	cmp	r0, #0
 801a442:	db07      	blt.n	801a454 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801a444:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a448:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801a44c:	2000      	movs	r0, #0
 801a44e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801a452:	bd70      	pop	{r4, r5, r6, pc}
 801a454:	f894 0020 	ldrb.w	r0, [r4, #32]
 801a458:	b940      	cbnz	r0, 801a46c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801a45a:	2301      	movs	r3, #1
 801a45c:	f884 3020 	strb.w	r3, [r4, #32]
 801a460:	3564      	adds	r5, #100	; 0x64
 801a462:	f146 0600 	adc.w	r6, r6, #0
 801a466:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801a46a:	bd70      	pop	{r4, r5, r6, pc}
 801a46c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801a470:	4295      	cmp	r5, r2
 801a472:	eb76 0303 	sbcs.w	r3, r6, r3
 801a476:	db04      	blt.n	801a482 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801a478:	1c43      	adds	r3, r0, #1
 801a47a:	2001      	movs	r0, #1
 801a47c:	f884 3020 	strb.w	r3, [r4, #32]
 801a480:	e7ee      	b.n	801a460 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801a482:	2000      	movs	r0, #0
 801a484:	e7ec      	b.n	801a460 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801a486:	bf00      	nop

0801a488 <uxr_begin_output_nack_buffer_it>:
 801a488:	8a40      	ldrh	r0, [r0, #18]
 801a48a:	4770      	bx	lr

0801a48c <uxr_next_reliable_nack_buffer_to_send>:
 801a48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a490:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 801a494:	b197      	cbz	r7, 801a4bc <uxr_next_reliable_nack_buffer_to_send+0x30>
 801a496:	4680      	mov	r8, r0
 801a498:	460d      	mov	r5, r1
 801a49a:	4616      	mov	r6, r2
 801a49c:	461c      	mov	r4, r3
 801a49e:	8818      	ldrh	r0, [r3, #0]
 801a4a0:	2101      	movs	r1, #1
 801a4a2:	f000 f9b9 	bl	801a818 <uxr_seq_num_add>
 801a4a6:	8020      	strh	r0, [r4, #0]
 801a4a8:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801a4ac:	f000 f9bc 	bl	801a828 <uxr_seq_num_cmp>
 801a4b0:	2800      	cmp	r0, #0
 801a4b2:	dd06      	ble.n	801a4c2 <uxr_next_reliable_nack_buffer_to_send+0x36>
 801a4b4:	2300      	movs	r3, #0
 801a4b6:	461f      	mov	r7, r3
 801a4b8:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 801a4bc:	4638      	mov	r0, r7
 801a4be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a4c2:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801a4c6:	8820      	ldrh	r0, [r4, #0]
 801a4c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a4cc:	fbb0 f3f2 	udiv	r3, r0, r2
 801a4d0:	fbb1 fcf2 	udiv	ip, r1, r2
 801a4d4:	fb02 0313 	mls	r3, r2, r3, r0
 801a4d8:	b29b      	uxth	r3, r3
 801a4da:	fb03 fc0c 	mul.w	ip, r3, ip
 801a4de:	f8d8 3000 	ldr.w	r3, [r8]
 801a4e2:	f10c 0c04 	add.w	ip, ip, #4
 801a4e6:	4463      	add	r3, ip
 801a4e8:	602b      	str	r3, [r5, #0]
 801a4ea:	f8d8 3000 	ldr.w	r3, [r8]
 801a4ee:	4463      	add	r3, ip
 801a4f0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801a4f4:	6033      	str	r3, [r6, #0]
 801a4f6:	f898 200c 	ldrb.w	r2, [r8, #12]
 801a4fa:	429a      	cmp	r2, r3
 801a4fc:	d0d0      	beq.n	801a4a0 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801a4fe:	e7dd      	b.n	801a4bc <uxr_next_reliable_nack_buffer_to_send+0x30>

0801a500 <uxr_process_acknack>:
 801a500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a502:	4604      	mov	r4, r0
 801a504:	460e      	mov	r6, r1
 801a506:	4610      	mov	r0, r2
 801a508:	2101      	movs	r1, #1
 801a50a:	f000 f989 	bl	801a820 <uxr_seq_num_sub>
 801a50e:	8a61      	ldrh	r1, [r4, #18]
 801a510:	f000 f986 	bl	801a820 <uxr_seq_num_sub>
 801a514:	b1c8      	cbz	r0, 801a54a <uxr_process_acknack+0x4a>
 801a516:	4605      	mov	r5, r0
 801a518:	2700      	movs	r7, #0
 801a51a:	2101      	movs	r1, #1
 801a51c:	8a60      	ldrh	r0, [r4, #18]
 801a51e:	f000 f97b 	bl	801a818 <uxr_seq_num_add>
 801a522:	8923      	ldrh	r3, [r4, #8]
 801a524:	6862      	ldr	r2, [r4, #4]
 801a526:	3701      	adds	r7, #1
 801a528:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801a52c:	6821      	ldr	r1, [r4, #0]
 801a52e:	42bd      	cmp	r5, r7
 801a530:	8260      	strh	r0, [r4, #18]
 801a532:	fbb0 fef3 	udiv	lr, r0, r3
 801a536:	fbb2 f2f3 	udiv	r2, r2, r3
 801a53a:	fb03 031e 	mls	r3, r3, lr, r0
 801a53e:	b29b      	uxth	r3, r3
 801a540:	fb02 f303 	mul.w	r3, r2, r3
 801a544:	f841 c003 	str.w	ip, [r1, r3]
 801a548:	d1e7      	bne.n	801a51a <uxr_process_acknack+0x1a>
 801a54a:	3e00      	subs	r6, #0
 801a54c:	f04f 0300 	mov.w	r3, #0
 801a550:	bf18      	it	ne
 801a552:	2601      	movne	r6, #1
 801a554:	f884 3020 	strb.w	r3, [r4, #32]
 801a558:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801a55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a55e:	bf00      	nop

0801a560 <uxr_is_output_up_to_date>:
 801a560:	8a01      	ldrh	r1, [r0, #16]
 801a562:	8a40      	ldrh	r0, [r0, #18]
 801a564:	b508      	push	{r3, lr}
 801a566:	f000 f95f 	bl	801a828 <uxr_seq_num_cmp>
 801a56a:	fab0 f080 	clz	r0, r0
 801a56e:	0940      	lsrs	r0, r0, #5
 801a570:	bd08      	pop	{r3, pc}
 801a572:	bf00      	nop

0801a574 <get_available_free_slots>:
 801a574:	8901      	ldrh	r1, [r0, #8]
 801a576:	b1e1      	cbz	r1, 801a5b2 <get_available_free_slots+0x3e>
 801a578:	6843      	ldr	r3, [r0, #4]
 801a57a:	f04f 0c00 	mov.w	ip, #0
 801a57e:	b530      	push	{r4, r5, lr}
 801a580:	fbb3 fef1 	udiv	lr, r3, r1
 801a584:	6805      	ldr	r5, [r0, #0]
 801a586:	4662      	mov	r2, ip
 801a588:	7b04      	ldrb	r4, [r0, #12]
 801a58a:	4660      	mov	r0, ip
 801a58c:	f10c 0c01 	add.w	ip, ip, #1
 801a590:	fbb2 f3f1 	udiv	r3, r2, r1
 801a594:	fb01 2313 	mls	r3, r1, r3, r2
 801a598:	fa1f f28c 	uxth.w	r2, ip
 801a59c:	b29b      	uxth	r3, r3
 801a59e:	fb0e f303 	mul.w	r3, lr, r3
 801a5a2:	58eb      	ldr	r3, [r5, r3]
 801a5a4:	429c      	cmp	r4, r3
 801a5a6:	d101      	bne.n	801a5ac <get_available_free_slots+0x38>
 801a5a8:	3001      	adds	r0, #1
 801a5aa:	b280      	uxth	r0, r0
 801a5ac:	428a      	cmp	r2, r1
 801a5ae:	d3ed      	bcc.n	801a58c <get_available_free_slots+0x18>
 801a5b0:	bd30      	pop	{r4, r5, pc}
 801a5b2:	4608      	mov	r0, r1
 801a5b4:	4770      	bx	lr
 801a5b6:	bf00      	nop

0801a5b8 <uxr_buffer_request_data>:
 801a5b8:	b530      	push	{r4, r5, lr}
 801a5ba:	b095      	sub	sp, #84	; 0x54
 801a5bc:	4604      	mov	r4, r0
 801a5be:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801a5c0:	9303      	str	r3, [sp, #12]
 801a5c2:	2d00      	cmp	r5, #0
 801a5c4:	f88d 301c 	strb.w	r3, [sp, #28]
 801a5c8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801a5cc:	f04f 0200 	mov.w	r2, #0
 801a5d0:	bf14      	ite	ne
 801a5d2:	2101      	movne	r1, #1
 801a5d4:	4611      	moveq	r1, r2
 801a5d6:	f88d 201d 	strb.w	r2, [sp, #29]
 801a5da:	f88d 201e 	strb.w	r2, [sp, #30]
 801a5de:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801a5e2:	d021      	beq.n	801a628 <uxr_buffer_request_data+0x70>
 801a5e4:	686b      	ldr	r3, [r5, #4]
 801a5e6:	2210      	movs	r2, #16
 801a5e8:	6829      	ldr	r1, [r5, #0]
 801a5ea:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 801a5ee:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 801a5f2:	2308      	movs	r3, #8
 801a5f4:	2100      	movs	r1, #0
 801a5f6:	4620      	mov	r0, r4
 801a5f8:	e9cd 3100 	strd	r3, r1, [sp]
 801a5fc:	ab0c      	add	r3, sp, #48	; 0x30
 801a5fe:	9905      	ldr	r1, [sp, #20]
 801a600:	f7f7 face 	bl	8011ba0 <uxr_prepare_stream_to_write_submessage>
 801a604:	b918      	cbnz	r0, 801a60e <uxr_buffer_request_data+0x56>
 801a606:	4604      	mov	r4, r0
 801a608:	4620      	mov	r0, r4
 801a60a:	b015      	add	sp, #84	; 0x54
 801a60c:	bd30      	pop	{r4, r5, pc}
 801a60e:	9904      	ldr	r1, [sp, #16]
 801a610:	aa06      	add	r2, sp, #24
 801a612:	4620      	mov	r0, r4
 801a614:	f7f7 fc00 	bl	8011e18 <uxr_init_base_object_request>
 801a618:	4604      	mov	r4, r0
 801a61a:	a906      	add	r1, sp, #24
 801a61c:	a80c      	add	r0, sp, #48	; 0x30
 801a61e:	f7f8 ff33 	bl	8013488 <uxr_serialize_READ_DATA_Payload>
 801a622:	4620      	mov	r0, r4
 801a624:	b015      	add	sp, #84	; 0x54
 801a626:	bd30      	pop	{r4, r5, pc}
 801a628:	2208      	movs	r2, #8
 801a62a:	e7e2      	b.n	801a5f2 <uxr_buffer_request_data+0x3a>

0801a62c <uxr_buffer_cancel_data>:
 801a62c:	b510      	push	{r4, lr}
 801a62e:	2300      	movs	r3, #0
 801a630:	b094      	sub	sp, #80	; 0x50
 801a632:	4604      	mov	r4, r0
 801a634:	9205      	str	r2, [sp, #20]
 801a636:	9301      	str	r3, [sp, #4]
 801a638:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a63c:	f88d 301e 	strb.w	r3, [sp, #30]
 801a640:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 801a644:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 801a648:	2308      	movs	r3, #8
 801a64a:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801a64e:	2201      	movs	r2, #1
 801a650:	9300      	str	r3, [sp, #0]
 801a652:	ab0c      	add	r3, sp, #48	; 0x30
 801a654:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 801a658:	2210      	movs	r2, #16
 801a65a:	f7f7 faa1 	bl	8011ba0 <uxr_prepare_stream_to_write_submessage>
 801a65e:	b918      	cbnz	r0, 801a668 <uxr_buffer_cancel_data+0x3c>
 801a660:	4604      	mov	r4, r0
 801a662:	4620      	mov	r0, r4
 801a664:	b014      	add	sp, #80	; 0x50
 801a666:	bd10      	pop	{r4, pc}
 801a668:	9905      	ldr	r1, [sp, #20]
 801a66a:	aa06      	add	r2, sp, #24
 801a66c:	4620      	mov	r0, r4
 801a66e:	f7f7 fbd3 	bl	8011e18 <uxr_init_base_object_request>
 801a672:	4604      	mov	r4, r0
 801a674:	a906      	add	r1, sp, #24
 801a676:	a80c      	add	r0, sp, #48	; 0x30
 801a678:	f7f8 ff06 	bl	8013488 <uxr_serialize_READ_DATA_Payload>
 801a67c:	4620      	mov	r0, r4
 801a67e:	b014      	add	sp, #80	; 0x50
 801a680:	bd10      	pop	{r4, pc}
 801a682:	bf00      	nop

0801a684 <read_submessage_format>:
 801a684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a688:	b095      	sub	sp, #84	; 0x54
 801a68a:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 801a68e:	b113      	cbz	r3, 801a696 <read_submessage_format+0x12>
 801a690:	b015      	add	sp, #84	; 0x54
 801a692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a696:	4606      	mov	r6, r0
 801a698:	981c      	ldr	r0, [sp, #112]	; 0x70
 801a69a:	460c      	mov	r4, r1
 801a69c:	4615      	mov	r5, r2
 801a69e:	9004      	str	r0, [sp, #16]
 801a6a0:	4699      	mov	r9, r3
 801a6a2:	981d      	ldr	r0, [sp, #116]	; 0x74
 801a6a4:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 801a6a8:	9005      	str	r0, [sp, #20]
 801a6aa:	a80c      	add	r0, sp, #48	; 0x30
 801a6ac:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801a6b0:	1a52      	subs	r2, r2, r1
 801a6b2:	f7f6 f86b 	bl	801078c <ucdr_init_buffer>
 801a6b6:	a80c      	add	r0, sp, #48	; 0x30
 801a6b8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801a6bc:	f7f6 f83a 	bl	8010734 <ucdr_set_on_full_buffer_callback>
 801a6c0:	69e2      	ldr	r2, [r4, #28]
 801a6c2:	b19a      	cbz	r2, 801a6ec <read_submessage_format+0x68>
 801a6c4:	f1b8 0f07 	cmp.w	r8, #7
 801a6c8:	f882 9014 	strb.w	r9, [r2, #20]
 801a6cc:	d040      	beq.n	801a750 <read_submessage_format+0xcc>
 801a6ce:	f1b8 0f08 	cmp.w	r8, #8
 801a6d2:	d02e      	beq.n	801a732 <read_submessage_format+0xae>
 801a6d4:	f1b8 0f06 	cmp.w	r8, #6
 801a6d8:	d011      	beq.n	801a6fe <read_submessage_format+0x7a>
 801a6da:	2301      	movs	r3, #1
 801a6dc:	7513      	strb	r3, [r2, #20]
 801a6de:	4629      	mov	r1, r5
 801a6e0:	4620      	mov	r0, r4
 801a6e2:	f7f6 f8a7 	bl	8010834 <ucdr_advance_buffer>
 801a6e6:	b015      	add	sp, #84	; 0x54
 801a6e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a6ec:	f1b8 0f07 	cmp.w	r8, #7
 801a6f0:	d02e      	beq.n	801a750 <read_submessage_format+0xcc>
 801a6f2:	f1b8 0f08 	cmp.w	r8, #8
 801a6f6:	d01c      	beq.n	801a732 <read_submessage_format+0xae>
 801a6f8:	f1b8 0f06 	cmp.w	r8, #6
 801a6fc:	d1ef      	bne.n	801a6de <read_submessage_format+0x5a>
 801a6fe:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 801a702:	f1b8 0f00 	cmp.w	r8, #0
 801a706:	d011      	beq.n	801a72c <read_submessage_format+0xa8>
 801a708:	ab0c      	add	r3, sp, #48	; 0x30
 801a70a:	9501      	str	r5, [sp, #4]
 801a70c:	463a      	mov	r2, r7
 801a70e:	4630      	mov	r0, r6
 801a710:	9300      	str	r3, [sp, #0]
 801a712:	2306      	movs	r3, #6
 801a714:	f88d 3016 	strb.w	r3, [sp, #22]
 801a718:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 801a71c:	9302      	str	r3, [sp, #8]
 801a71e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 801a722:	47c0      	blx	r8
 801a724:	2301      	movs	r3, #1
 801a726:	69e2      	ldr	r2, [r4, #28]
 801a728:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801a72c:	2a00      	cmp	r2, #0
 801a72e:	d1d4      	bne.n	801a6da <read_submessage_format+0x56>
 801a730:	e7d5      	b.n	801a6de <read_submessage_format+0x5a>
 801a732:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 801a736:	2b00      	cmp	r3, #0
 801a738:	d0f8      	beq.n	801a72c <read_submessage_format+0xa8>
 801a73a:	a80c      	add	r0, sp, #48	; 0x30
 801a73c:	a906      	add	r1, sp, #24
 801a73e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801a742:	f7f8 ff6d 	bl	8013620 <uxr_deserialize_SampleIdentity>
 801a746:	b9a0      	cbnz	r0, 801a772 <read_submessage_format+0xee>
 801a748:	69e2      	ldr	r2, [r4, #28]
 801a74a:	2a00      	cmp	r2, #0
 801a74c:	d1c5      	bne.n	801a6da <read_submessage_format+0x56>
 801a74e:	e7c6      	b.n	801a6de <read_submessage_format+0x5a>
 801a750:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 801a754:	b13b      	cbz	r3, 801a766 <read_submessage_format+0xe2>
 801a756:	a906      	add	r1, sp, #24
 801a758:	a80c      	add	r0, sp, #48	; 0x30
 801a75a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801a75e:	f7f8 fc33 	bl	8012fc8 <uxr_deserialize_BaseObjectRequest>
 801a762:	bb60      	cbnz	r0, 801a7be <read_submessage_format+0x13a>
 801a764:	69e2      	ldr	r2, [r4, #28]
 801a766:	68a3      	ldr	r3, [r4, #8]
 801a768:	442b      	add	r3, r5
 801a76a:	60a3      	str	r3, [r4, #8]
 801a76c:	2a00      	cmp	r2, #0
 801a76e:	d1b4      	bne.n	801a6da <read_submessage_format+0x56>
 801a770:	e7b5      	b.n	801a6de <read_submessage_format+0x5a>
 801a772:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a774:	a80c      	add	r0, sp, #48	; 0x30
 801a776:	eba8 0803 	sub.w	r8, r8, r3
 801a77a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801a77e:	44a8      	add	r8, r5
 801a780:	1a52      	subs	r2, r2, r1
 801a782:	f7f6 f803 	bl	801078c <ucdr_init_buffer>
 801a786:	a80c      	add	r0, sp, #48	; 0x30
 801a788:	fa1f f888 	uxth.w	r8, r8
 801a78c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801a790:	f7f5 ffd0 	bl	8010734 <ucdr_set_on_full_buffer_callback>
 801a794:	ab0c      	add	r3, sp, #48	; 0x30
 801a796:	2108      	movs	r1, #8
 801a798:	f8cd 8004 	str.w	r8, [sp, #4]
 801a79c:	9300      	str	r3, [sp, #0]
 801a79e:	463a      	mov	r2, r7
 801a7a0:	f88d 1016 	strb.w	r1, [sp, #22]
 801a7a4:	ab06      	add	r3, sp, #24
 801a7a6:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 801a7aa:	4630      	mov	r0, r6
 801a7ac:	9102      	str	r1, [sp, #8]
 801a7ae:	9905      	ldr	r1, [sp, #20]
 801a7b0:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 801a7b4:	47b8      	blx	r7
 801a7b6:	2301      	movs	r3, #1
 801a7b8:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801a7bc:	e7c4      	b.n	801a748 <read_submessage_format+0xc4>
 801a7be:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801a7c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a7c4:	a80c      	add	r0, sp, #48	; 0x30
 801a7c6:	1a52      	subs	r2, r2, r1
 801a7c8:	eba8 0803 	sub.w	r8, r8, r3
 801a7cc:	f7f5 ffde 	bl	801078c <ucdr_init_buffer>
 801a7d0:	a80c      	add	r0, sp, #48	; 0x30
 801a7d2:	44a8      	add	r8, r5
 801a7d4:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801a7d8:	f7f5 ffac 	bl	8010734 <ucdr_set_on_full_buffer_callback>
 801a7dc:	ab0c      	add	r3, sp, #48	; 0x30
 801a7de:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801a7e2:	fa1f f888 	uxth.w	r8, r8
 801a7e6:	9300      	str	r3, [sp, #0]
 801a7e8:	463a      	mov	r2, r7
 801a7ea:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801a7ee:	4630      	mov	r0, r6
 801a7f0:	f8cd 8004 	str.w	r8, [sp, #4]
 801a7f4:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801a7f8:	2107      	movs	r1, #7
 801a7fa:	f88d 1016 	strb.w	r1, [sp, #22]
 801a7fe:	b29b      	uxth	r3, r3
 801a800:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 801a804:	9102      	str	r1, [sp, #8]
 801a806:	9905      	ldr	r1, [sp, #20]
 801a808:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 801a80c:	47b8      	blx	r7
 801a80e:	2301      	movs	r3, #1
 801a810:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 801a814:	e7a6      	b.n	801a764 <read_submessage_format+0xe0>
 801a816:	bf00      	nop

0801a818 <uxr_seq_num_add>:
 801a818:	4408      	add	r0, r1
 801a81a:	b280      	uxth	r0, r0
 801a81c:	4770      	bx	lr
 801a81e:	bf00      	nop

0801a820 <uxr_seq_num_sub>:
 801a820:	1a40      	subs	r0, r0, r1
 801a822:	b280      	uxth	r0, r0
 801a824:	4770      	bx	lr
 801a826:	bf00      	nop

0801a828 <uxr_seq_num_cmp>:
 801a828:	4288      	cmp	r0, r1
 801a82a:	d011      	beq.n	801a850 <uxr_seq_num_cmp+0x28>
 801a82c:	d309      	bcc.n	801a842 <uxr_seq_num_cmp+0x1a>
 801a82e:	4288      	cmp	r0, r1
 801a830:	d910      	bls.n	801a854 <uxr_seq_num_cmp+0x2c>
 801a832:	1a40      	subs	r0, r0, r1
 801a834:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801a838:	bfd4      	ite	le
 801a83a:	2001      	movle	r0, #1
 801a83c:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 801a840:	4770      	bx	lr
 801a842:	1a0b      	subs	r3, r1, r0
 801a844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a848:	daf1      	bge.n	801a82e <uxr_seq_num_cmp+0x6>
 801a84a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a84e:	4770      	bx	lr
 801a850:	2000      	movs	r0, #0
 801a852:	4770      	bx	lr
 801a854:	2001      	movs	r0, #1
 801a856:	4770      	bx	lr

0801a858 <uxr_init_framing_io>:
 801a858:	2300      	movs	r3, #0
 801a85a:	7041      	strb	r1, [r0, #1]
 801a85c:	7003      	strb	r3, [r0, #0]
 801a85e:	8583      	strh	r3, [r0, #44]	; 0x2c
 801a860:	4770      	bx	lr
 801a862:	bf00      	nop

0801a864 <uxr_write_framed_msg>:
 801a864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a868:	4617      	mov	r7, r2
 801a86a:	7842      	ldrb	r2, [r0, #1]
 801a86c:	460e      	mov	r6, r1
 801a86e:	b083      	sub	sp, #12
 801a870:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 801a874:	469b      	mov	fp, r3
 801a876:	237e      	movs	r3, #126	; 0x7e
 801a878:	4604      	mov	r4, r0
 801a87a:	2901      	cmp	r1, #1
 801a87c:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 801a880:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801a884:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 801a888:	f240 8115 	bls.w	801aab6 <uxr_write_framed_msg+0x252>
 801a88c:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801a890:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 801a894:	2202      	movs	r2, #2
 801a896:	2901      	cmp	r1, #1
 801a898:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801a89c:	d952      	bls.n	801a944 <uxr_write_framed_msg+0xe0>
 801a89e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a8a0:	2103      	movs	r1, #3
 801a8a2:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 801a8a6:	b2dd      	uxtb	r5, r3
 801a8a8:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801a8ac:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801a8b0:	2a01      	cmp	r2, #1
 801a8b2:	d95c      	bls.n	801a96e <uxr_write_framed_msg+0x10a>
 801a8b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a8b6:	1862      	adds	r2, r4, r1
 801a8b8:	3101      	adds	r1, #1
 801a8ba:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801a8be:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 801a8c2:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801a8c6:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801a8ca:	2a01      	cmp	r2, #1
 801a8cc:	d961      	bls.n	801a992 <uxr_write_framed_msg+0x12e>
 801a8ce:	1c4a      	adds	r2, r1, #1
 801a8d0:	4421      	add	r1, r4
 801a8d2:	b2d2      	uxtb	r2, r2
 801a8d4:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 801a8d8:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	d06a      	beq.n	801a9b6 <uxr_write_framed_msg+0x152>
 801a8e0:	f04f 0800 	mov.w	r8, #0
 801a8e4:	46c1      	mov	r9, r8
 801a8e6:	e016      	b.n	801a916 <uxr_write_framed_msg+0xb2>
 801a8e8:	2a29      	cmp	r2, #41	; 0x29
 801a8ea:	d868      	bhi.n	801a9be <uxr_write_framed_msg+0x15a>
 801a8ec:	18a0      	adds	r0, r4, r2
 801a8ee:	3201      	adds	r2, #1
 801a8f0:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801a8f4:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801a8f8:	ea88 0101 	eor.w	r1, r8, r1
 801a8fc:	4b7d      	ldr	r3, [pc, #500]	; (801aaf4 <uxr_write_framed_msg+0x290>)
 801a8fe:	f109 0901 	add.w	r9, r9, #1
 801a902:	b2c9      	uxtb	r1, r1
 801a904:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 801a908:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 801a90c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a90e:	454b      	cmp	r3, r9
 801a910:	d969      	bls.n	801a9e6 <uxr_write_framed_msg+0x182>
 801a912:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801a916:	f81b 1009 	ldrb.w	r1, [fp, r9]
 801a91a:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 801a91e:	2801      	cmp	r0, #1
 801a920:	d8e2      	bhi.n	801a8e8 <uxr_write_framed_msg+0x84>
 801a922:	1c50      	adds	r0, r2, #1
 801a924:	b2c0      	uxtb	r0, r0
 801a926:	2829      	cmp	r0, #41	; 0x29
 801a928:	d849      	bhi.n	801a9be <uxr_write_framed_msg+0x15a>
 801a92a:	18a0      	adds	r0, r4, r2
 801a92c:	f04f 037d 	mov.w	r3, #125	; 0x7d
 801a930:	3202      	adds	r2, #2
 801a932:	f081 0520 	eor.w	r5, r1, #32
 801a936:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801a93a:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 801a93e:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801a942:	e7d9      	b.n	801a8f8 <uxr_write_framed_msg+0x94>
 801a944:	2104      	movs	r1, #4
 801a946:	f04f 0c03 	mov.w	ip, #3
 801a94a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a94c:	4422      	add	r2, r4
 801a94e:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 801a952:	44a4      	add	ip, r4
 801a954:	b2dd      	uxtb	r5, r3
 801a956:	f080 0020 	eor.w	r0, r0, #32
 801a95a:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 801a95e:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801a962:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 801a966:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801a96a:	2a01      	cmp	r2, #1
 801a96c:	d8a2      	bhi.n	801a8b4 <uxr_write_framed_msg+0x50>
 801a96e:	1862      	adds	r2, r4, r1
 801a970:	207d      	movs	r0, #125	; 0x7d
 801a972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a974:	f085 0520 	eor.w	r5, r5, #32
 801a978:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 801a97c:	3102      	adds	r1, #2
 801a97e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801a982:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 801a986:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801a98a:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801a98e:	2a01      	cmp	r2, #1
 801a990:	d89d      	bhi.n	801a8ce <uxr_write_framed_msg+0x6a>
 801a992:	1c4d      	adds	r5, r1, #1
 801a994:	1c8a      	adds	r2, r1, #2
 801a996:	f080 0020 	eor.w	r0, r0, #32
 801a99a:	4421      	add	r1, r4
 801a99c:	fa54 f585 	uxtab	r5, r4, r5
 801a9a0:	b2d2      	uxtb	r2, r2
 801a9a2:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 801a9a6:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 801a9aa:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 801a9ae:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801a9b2:	2b00      	cmp	r3, #0
 801a9b4:	d194      	bne.n	801a8e0 <uxr_write_framed_msg+0x7c>
 801a9b6:	4619      	mov	r1, r3
 801a9b8:	f8ad 3004 	strh.w	r3, [sp, #4]
 801a9bc:	e019      	b.n	801a9f2 <uxr_write_framed_msg+0x18e>
 801a9be:	2500      	movs	r5, #0
 801a9c0:	e000      	b.n	801a9c4 <uxr_write_framed_msg+0x160>
 801a9c2:	b160      	cbz	r0, 801a9de <uxr_write_framed_msg+0x17a>
 801a9c4:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801a9c8:	1b52      	subs	r2, r2, r5
 801a9ca:	4653      	mov	r3, sl
 801a9cc:	4638      	mov	r0, r7
 801a9ce:	4421      	add	r1, r4
 801a9d0:	47b0      	blx	r6
 801a9d2:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801a9d6:	4405      	add	r5, r0
 801a9d8:	4295      	cmp	r5, r2
 801a9da:	d3f2      	bcc.n	801a9c2 <uxr_write_framed_msg+0x15e>
 801a9dc:	d066      	beq.n	801aaac <uxr_write_framed_msg+0x248>
 801a9de:	2000      	movs	r0, #0
 801a9e0:	b003      	add	sp, #12
 801a9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9e6:	fa5f f188 	uxtb.w	r1, r8
 801a9ea:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801a9ee:	f8ad 8004 	strh.w	r8, [sp, #4]
 801a9f2:	f04f 0900 	mov.w	r9, #0
 801a9f6:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 801a9fa:	46c8      	mov	r8, r9
 801a9fc:	e013      	b.n	801aa26 <uxr_write_framed_msg+0x1c2>
 801a9fe:	2a29      	cmp	r2, #41	; 0x29
 801aa00:	d824      	bhi.n	801aa4c <uxr_write_framed_msg+0x1e8>
 801aa02:	18a3      	adds	r3, r4, r2
 801aa04:	3201      	adds	r2, #1
 801aa06:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 801aa0a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801aa0e:	f109 0901 	add.w	r9, r9, #1
 801aa12:	f1b9 0f02 	cmp.w	r9, #2
 801aa16:	d02d      	beq.n	801aa74 <uxr_write_framed_msg+0x210>
 801aa18:	f109 0308 	add.w	r3, r9, #8
 801aa1c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801aa20:	446b      	add	r3, sp
 801aa22:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 801aa26:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 801aa2a:	2b01      	cmp	r3, #1
 801aa2c:	d8e7      	bhi.n	801a9fe <uxr_write_framed_msg+0x19a>
 801aa2e:	1c53      	adds	r3, r2, #1
 801aa30:	b2db      	uxtb	r3, r3
 801aa32:	2b29      	cmp	r3, #41	; 0x29
 801aa34:	d80a      	bhi.n	801aa4c <uxr_write_framed_msg+0x1e8>
 801aa36:	18a3      	adds	r3, r4, r2
 801aa38:	f081 0120 	eor.w	r1, r1, #32
 801aa3c:	3202      	adds	r2, #2
 801aa3e:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 801aa42:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 801aa46:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801aa4a:	e7e0      	b.n	801aa0e <uxr_write_framed_msg+0x1aa>
 801aa4c:	2500      	movs	r5, #0
 801aa4e:	e001      	b.n	801aa54 <uxr_write_framed_msg+0x1f0>
 801aa50:	2800      	cmp	r0, #0
 801aa52:	d0c4      	beq.n	801a9de <uxr_write_framed_msg+0x17a>
 801aa54:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801aa58:	1b52      	subs	r2, r2, r5
 801aa5a:	4653      	mov	r3, sl
 801aa5c:	4638      	mov	r0, r7
 801aa5e:	4421      	add	r1, r4
 801aa60:	47b0      	blx	r6
 801aa62:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801aa66:	4405      	add	r5, r0
 801aa68:	4295      	cmp	r5, r2
 801aa6a:	d3f1      	bcc.n	801aa50 <uxr_write_framed_msg+0x1ec>
 801aa6c:	d1b7      	bne.n	801a9de <uxr_write_framed_msg+0x17a>
 801aa6e:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 801aa72:	e7d1      	b.n	801aa18 <uxr_write_framed_msg+0x1b4>
 801aa74:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801aa78:	b19a      	cbz	r2, 801aaa2 <uxr_write_framed_msg+0x23e>
 801aa7a:	2500      	movs	r5, #0
 801aa7c:	e001      	b.n	801aa82 <uxr_write_framed_msg+0x21e>
 801aa7e:	2800      	cmp	r0, #0
 801aa80:	d0ad      	beq.n	801a9de <uxr_write_framed_msg+0x17a>
 801aa82:	f105 0138 	add.w	r1, r5, #56	; 0x38
 801aa86:	1b52      	subs	r2, r2, r5
 801aa88:	4653      	mov	r3, sl
 801aa8a:	4638      	mov	r0, r7
 801aa8c:	4421      	add	r1, r4
 801aa8e:	47b0      	blx	r6
 801aa90:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 801aa94:	4405      	add	r5, r0
 801aa96:	4295      	cmp	r5, r2
 801aa98:	d3f1      	bcc.n	801aa7e <uxr_write_framed_msg+0x21a>
 801aa9a:	d1a0      	bne.n	801a9de <uxr_write_framed_msg+0x17a>
 801aa9c:	2300      	movs	r3, #0
 801aa9e:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801aaa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aaa4:	b298      	uxth	r0, r3
 801aaa6:	b003      	add	sp, #12
 801aaa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aaac:	f04f 0300 	mov.w	r3, #0
 801aab0:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801aab4:	e72a      	b.n	801a90c <uxr_write_framed_msg+0xa8>
 801aab6:	217d      	movs	r1, #125	; 0x7d
 801aab8:	f082 0220 	eor.w	r2, r2, #32
 801aabc:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 801aac0:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801aac4:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 801aac8:	2203      	movs	r2, #3
 801aaca:	2901      	cmp	r1, #1
 801aacc:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801aad0:	d803      	bhi.n	801aada <uxr_write_framed_msg+0x276>
 801aad2:	2105      	movs	r1, #5
 801aad4:	f04f 0c04 	mov.w	ip, #4
 801aad8:	e737      	b.n	801a94a <uxr_write_framed_msg+0xe6>
 801aada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aadc:	2104      	movs	r1, #4
 801aade:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 801aae2:	b2dd      	uxtb	r5, r3
 801aae4:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 801aae8:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801aaec:	2a01      	cmp	r2, #1
 801aaee:	f63f aee1 	bhi.w	801a8b4 <uxr_write_framed_msg+0x50>
 801aaf2:	e73c      	b.n	801a96e <uxr_write_framed_msg+0x10a>
 801aaf4:	0801f0fc 	.word	0x0801f0fc

0801aaf8 <uxr_framing_read_transport>:
 801aaf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aafc:	4604      	mov	r4, r0
 801aafe:	b085      	sub	sp, #20
 801ab00:	4692      	mov	sl, r2
 801ab02:	4689      	mov	r9, r1
 801ab04:	461d      	mov	r5, r3
 801ab06:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801ab08:	f7f7 fb3c 	bl	8012184 <uxr_millis>
 801ab0c:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801ab10:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 801ab14:	4680      	mov	r8, r0
 801ab16:	42ba      	cmp	r2, r7
 801ab18:	d05f      	beq.n	801abda <uxr_framing_read_transport+0xe2>
 801ab1a:	d817      	bhi.n	801ab4c <uxr_framing_read_transport+0x54>
 801ab1c:	3f01      	subs	r7, #1
 801ab1e:	1aba      	subs	r2, r7, r2
 801ab20:	2700      	movs	r7, #0
 801ab22:	b2d2      	uxtb	r2, r2
 801ab24:	42b2      	cmp	r2, r6
 801ab26:	d81a      	bhi.n	801ab5e <uxr_framing_read_transport+0x66>
 801ab28:	19d3      	adds	r3, r2, r7
 801ab2a:	42b3      	cmp	r3, r6
 801ab2c:	d852      	bhi.n	801abd4 <uxr_framing_read_transport+0xdc>
 801ab2e:	b9d2      	cbnz	r2, 801ab66 <uxr_framing_read_transport+0x6e>
 801ab30:	2600      	movs	r6, #0
 801ab32:	f7f7 fb27 	bl	8012184 <uxr_millis>
 801ab36:	682b      	ldr	r3, [r5, #0]
 801ab38:	eba0 0008 	sub.w	r0, r0, r8
 801ab3c:	1a1b      	subs	r3, r3, r0
 801ab3e:	4630      	mov	r0, r6
 801ab40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ab44:	602b      	str	r3, [r5, #0]
 801ab46:	b005      	add	sp, #20
 801ab48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab4c:	2f00      	cmp	r7, #0
 801ab4e:	d060      	beq.n	801ac12 <uxr_framing_read_transport+0x11a>
 801ab50:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 801ab54:	3f01      	subs	r7, #1
 801ab56:	b2d2      	uxtb	r2, r2
 801ab58:	b2ff      	uxtb	r7, r7
 801ab5a:	42b2      	cmp	r2, r6
 801ab5c:	d9e4      	bls.n	801ab28 <uxr_framing_read_transport+0x30>
 801ab5e:	b2f2      	uxtb	r2, r6
 801ab60:	2700      	movs	r7, #0
 801ab62:	2a00      	cmp	r2, #0
 801ab64:	d0e4      	beq.n	801ab30 <uxr_framing_read_transport+0x38>
 801ab66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ab68:	4650      	mov	r0, sl
 801ab6a:	9203      	str	r2, [sp, #12]
 801ab6c:	9300      	str	r3, [sp, #0]
 801ab6e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801ab72:	682b      	ldr	r3, [r5, #0]
 801ab74:	3102      	adds	r1, #2
 801ab76:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 801ac1c <uxr_framing_read_transport+0x124>
 801ab7a:	4421      	add	r1, r4
 801ab7c:	47c8      	blx	r9
 801ab7e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801ab82:	4606      	mov	r6, r0
 801ab84:	4403      	add	r3, r0
 801ab86:	0859      	lsrs	r1, r3, #1
 801ab88:	fbab 2101 	umull	r2, r1, fp, r1
 801ab8c:	222a      	movs	r2, #42	; 0x2a
 801ab8e:	0889      	lsrs	r1, r1, #2
 801ab90:	fb02 3111 	mls	r1, r2, r1, r3
 801ab94:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 801ab98:	2800      	cmp	r0, #0
 801ab9a:	d0c9      	beq.n	801ab30 <uxr_framing_read_transport+0x38>
 801ab9c:	9a03      	ldr	r2, [sp, #12]
 801ab9e:	4290      	cmp	r0, r2
 801aba0:	d1c7      	bne.n	801ab32 <uxr_framing_read_transport+0x3a>
 801aba2:	2f00      	cmp	r7, #0
 801aba4:	d0c5      	beq.n	801ab32 <uxr_framing_read_transport+0x3a>
 801aba6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801aba8:	3102      	adds	r1, #2
 801abaa:	463a      	mov	r2, r7
 801abac:	4650      	mov	r0, sl
 801abae:	4421      	add	r1, r4
 801abb0:	9300      	str	r3, [sp, #0]
 801abb2:	2300      	movs	r3, #0
 801abb4:	47c8      	blx	r9
 801abb6:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 801abba:	4406      	add	r6, r0
 801abbc:	1813      	adds	r3, r2, r0
 801abbe:	085a      	lsrs	r2, r3, #1
 801abc0:	fbab 1b02 	umull	r1, fp, fp, r2
 801abc4:	222a      	movs	r2, #42	; 0x2a
 801abc6:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 801abca:	fb02 331b 	mls	r3, r2, fp, r3
 801abce:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801abd2:	e7ae      	b.n	801ab32 <uxr_framing_read_transport+0x3a>
 801abd4:	1ab6      	subs	r6, r6, r2
 801abd6:	b2f7      	uxtb	r7, r6
 801abd8:	e7a9      	b.n	801ab2e <uxr_framing_read_transport+0x36>
 801abda:	2300      	movs	r3, #0
 801abdc:	2e28      	cmp	r6, #40	; 0x28
 801abde:	85a3      	strh	r3, [r4, #44]	; 0x2c
 801abe0:	d9bd      	bls.n	801ab5e <uxr_framing_read_transport+0x66>
 801abe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801abe4:	2229      	movs	r2, #41	; 0x29
 801abe6:	1ca1      	adds	r1, r4, #2
 801abe8:	4650      	mov	r0, sl
 801abea:	9300      	str	r3, [sp, #0]
 801abec:	682b      	ldr	r3, [r5, #0]
 801abee:	47c8      	blx	r9
 801abf0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801abf4:	4606      	mov	r6, r0
 801abf6:	212a      	movs	r1, #42	; 0x2a
 801abf8:	4403      	add	r3, r0
 801abfa:	4808      	ldr	r0, [pc, #32]	; (801ac1c <uxr_framing_read_transport+0x124>)
 801abfc:	085a      	lsrs	r2, r3, #1
 801abfe:	fba0 0202 	umull	r0, r2, r0, r2
 801ac02:	0892      	lsrs	r2, r2, #2
 801ac04:	fb01 3312 	mls	r3, r1, r2, r3
 801ac08:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801ac0c:	2e00      	cmp	r6, #0
 801ac0e:	d08f      	beq.n	801ab30 <uxr_framing_read_transport+0x38>
 801ac10:	e78f      	b.n	801ab32 <uxr_framing_read_transport+0x3a>
 801ac12:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 801ac16:	b2d2      	uxtb	r2, r2
 801ac18:	e784      	b.n	801ab24 <uxr_framing_read_transport+0x2c>
 801ac1a:	bf00      	nop
 801ac1c:	30c30c31 	.word	0x30c30c31

0801ac20 <uxr_read_framed_msg>:
 801ac20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac24:	461e      	mov	r6, r3
 801ac26:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 801ac2a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 801ac2e:	b083      	sub	sp, #12
 801ac30:	4604      	mov	r4, r0
 801ac32:	4688      	mov	r8, r1
 801ac34:	429d      	cmp	r5, r3
 801ac36:	4691      	mov	r9, r2
 801ac38:	f000 818c 	beq.w	801af54 <uxr_read_framed_msg+0x334>
 801ac3c:	7823      	ldrb	r3, [r4, #0]
 801ac3e:	4dc3      	ldr	r5, [pc, #780]	; (801af4c <uxr_read_framed_msg+0x32c>)
 801ac40:	4fc3      	ldr	r7, [pc, #780]	; (801af50 <uxr_read_framed_msg+0x330>)
 801ac42:	2b07      	cmp	r3, #7
 801ac44:	d8fd      	bhi.n	801ac42 <uxr_read_framed_msg+0x22>
 801ac46:	e8df f013 	tbh	[pc, r3, lsl #1]
 801ac4a:	011c      	.short	0x011c
 801ac4c:	00d900fb 	.word	0x00d900fb
 801ac50:	008f00ba 	.word	0x008f00ba
 801ac54:	00320051 	.word	0x00320051
 801ac58:	0008      	.short	0x0008
 801ac5a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801ac5e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801ac62:	4299      	cmp	r1, r3
 801ac64:	f000 814d 	beq.w	801af02 <uxr_read_framed_msg+0x2e2>
 801ac68:	18e2      	adds	r2, r4, r3
 801ac6a:	7892      	ldrb	r2, [r2, #2]
 801ac6c:	2a7d      	cmp	r2, #125	; 0x7d
 801ac6e:	f000 81b8 	beq.w	801afe2 <uxr_read_framed_msg+0x3c2>
 801ac72:	3301      	adds	r3, #1
 801ac74:	212a      	movs	r1, #42	; 0x2a
 801ac76:	2a7e      	cmp	r2, #126	; 0x7e
 801ac78:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801ac7c:	fba5 c000 	umull	ip, r0, r5, r0
 801ac80:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801ac84:	fb01 3310 	mls	r3, r1, r0, r3
 801ac88:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801ac8c:	f000 8257 	beq.w	801b13e <uxr_read_framed_msg+0x51e>
 801ac90:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801ac92:	2000      	movs	r0, #0
 801ac94:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 801ac96:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801ac9a:	7020      	strb	r0, [r4, #0]
 801ac9c:	b29b      	uxth	r3, r3
 801ac9e:	4299      	cmp	r1, r3
 801aca0:	86a3      	strh	r3, [r4, #52]	; 0x34
 801aca2:	f000 8178 	beq.w	801af96 <uxr_read_framed_msg+0x376>
 801aca6:	2000      	movs	r0, #0
 801aca8:	b003      	add	sp, #12
 801acaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acae:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801acb2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801acb6:	4298      	cmp	r0, r3
 801acb8:	f000 8132 	beq.w	801af20 <uxr_read_framed_msg+0x300>
 801acbc:	18e2      	adds	r2, r4, r3
 801acbe:	7891      	ldrb	r1, [r2, #2]
 801acc0:	297d      	cmp	r1, #125	; 0x7d
 801acc2:	f000 8170 	beq.w	801afa6 <uxr_read_framed_msg+0x386>
 801acc6:	3301      	adds	r3, #1
 801acc8:	202a      	movs	r0, #42	; 0x2a
 801acca:	297e      	cmp	r1, #126	; 0x7e
 801accc:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801acd0:	fba5 c202 	umull	ip, r2, r5, r2
 801acd4:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801acd8:	fb00 3312 	mls	r3, r0, r2, r3
 801acdc:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801ace0:	f000 821d 	beq.w	801b11e <uxr_read_framed_msg+0x4fe>
 801ace4:	2307      	movs	r3, #7
 801ace6:	86a1      	strh	r1, [r4, #52]	; 0x34
 801ace8:	7023      	strb	r3, [r4, #0]
 801acea:	e7aa      	b.n	801ac42 <uxr_read_framed_msg+0x22>
 801acec:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801acee:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 801acf2:	459e      	cmp	lr, r3
 801acf4:	d827      	bhi.n	801ad46 <uxr_read_framed_msg+0x126>
 801acf6:	e032      	b.n	801ad5e <uxr_read_framed_msg+0x13e>
 801acf8:	fba5 b101 	umull	fp, r1, r5, r1
 801acfc:	f89c c002 	ldrb.w	ip, [ip, #2]
 801ad00:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 801ad04:	0889      	lsrs	r1, r1, #2
 801ad06:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 801ad0a:	fb0b 0111 	mls	r1, fp, r1, r0
 801ad0e:	f000 80d4 	beq.w	801aeba <uxr_read_framed_msg+0x29a>
 801ad12:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801ad16:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 801ad1a:	f000 80cb 	beq.w	801aeb4 <uxr_read_framed_msg+0x294>
 801ad1e:	f806 c003 	strb.w	ip, [r6, r3]
 801ad22:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801ad24:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801ad26:	ea80 010c 	eor.w	r1, r0, ip
 801ad2a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 801ad2e:	3301      	adds	r3, #1
 801ad30:	b2c9      	uxtb	r1, r1
 801ad32:	b29b      	uxth	r3, r3
 801ad34:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 801ad38:	4573      	cmp	r3, lr
 801ad3a:	8663      	strh	r3, [r4, #50]	; 0x32
 801ad3c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 801ad40:	86e2      	strh	r2, [r4, #54]	; 0x36
 801ad42:	f080 811d 	bcs.w	801af80 <uxr_read_framed_msg+0x360>
 801ad46:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801ad4a:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 801ad4e:	1c50      	adds	r0, r2, #1
 801ad50:	eb04 0c02 	add.w	ip, r4, r2
 801ad54:	4592      	cmp	sl, r2
 801ad56:	ea4f 0150 	mov.w	r1, r0, lsr #1
 801ad5a:	d1cd      	bne.n	801acf8 <uxr_read_framed_msg+0xd8>
 801ad5c:	459e      	cmp	lr, r3
 801ad5e:	f040 8114 	bne.w	801af8a <uxr_read_framed_msg+0x36a>
 801ad62:	2306      	movs	r3, #6
 801ad64:	7023      	strb	r3, [r4, #0]
 801ad66:	e76c      	b.n	801ac42 <uxr_read_framed_msg+0x22>
 801ad68:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801ad6c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801ad70:	4298      	cmp	r0, r3
 801ad72:	f000 80c6 	beq.w	801af02 <uxr_read_framed_msg+0x2e2>
 801ad76:	18e2      	adds	r2, r4, r3
 801ad78:	7891      	ldrb	r1, [r2, #2]
 801ad7a:	297d      	cmp	r1, #125	; 0x7d
 801ad7c:	f000 8193 	beq.w	801b0a6 <uxr_read_framed_msg+0x486>
 801ad80:	3301      	adds	r3, #1
 801ad82:	202a      	movs	r0, #42	; 0x2a
 801ad84:	297e      	cmp	r1, #126	; 0x7e
 801ad86:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801ad8a:	fba5 c202 	umull	ip, r2, r5, r2
 801ad8e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801ad92:	fb00 3312 	mls	r3, r0, r2, r3
 801ad96:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801ad9a:	f000 81d0 	beq.w	801b13e <uxr_read_framed_msg+0x51e>
 801ad9e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 801ada0:	2000      	movs	r0, #0
 801ada2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801ada6:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ada8:	8660      	strh	r0, [r4, #50]	; 0x32
 801adaa:	b29b      	uxth	r3, r3
 801adac:	86e0      	strh	r0, [r4, #54]	; 0x36
 801adae:	428b      	cmp	r3, r1
 801adb0:	8623      	strh	r3, [r4, #48]	; 0x30
 801adb2:	f240 80e2 	bls.w	801af7a <uxr_read_framed_msg+0x35a>
 801adb6:	7020      	strb	r0, [r4, #0]
 801adb8:	b003      	add	sp, #12
 801adba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adbe:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801adc2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801adc6:	4298      	cmp	r0, r3
 801adc8:	f000 80aa 	beq.w	801af20 <uxr_read_framed_msg+0x300>
 801adcc:	18e2      	adds	r2, r4, r3
 801adce:	7891      	ldrb	r1, [r2, #2]
 801add0:	297d      	cmp	r1, #125	; 0x7d
 801add2:	f000 8186 	beq.w	801b0e2 <uxr_read_framed_msg+0x4c2>
 801add6:	3301      	adds	r3, #1
 801add8:	202a      	movs	r0, #42	; 0x2a
 801adda:	297e      	cmp	r1, #126	; 0x7e
 801addc:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801ade0:	fba5 c202 	umull	ip, r2, r5, r2
 801ade4:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801ade8:	fb00 3312 	mls	r3, r0, r2, r3
 801adec:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801adf0:	f000 8195 	beq.w	801b11e <uxr_read_framed_msg+0x4fe>
 801adf4:	2304      	movs	r3, #4
 801adf6:	8621      	strh	r1, [r4, #48]	; 0x30
 801adf8:	7023      	strb	r3, [r4, #0]
 801adfa:	e722      	b.n	801ac42 <uxr_read_framed_msg+0x22>
 801adfc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 801ae00:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801ae04:	4290      	cmp	r0, r2
 801ae06:	f000 80b4 	beq.w	801af72 <uxr_read_framed_msg+0x352>
 801ae0a:	18a3      	adds	r3, r4, r2
 801ae0c:	7899      	ldrb	r1, [r3, #2]
 801ae0e:	297d      	cmp	r1, #125	; 0x7d
 801ae10:	f000 8107 	beq.w	801b022 <uxr_read_framed_msg+0x402>
 801ae14:	3201      	adds	r2, #1
 801ae16:	232a      	movs	r3, #42	; 0x2a
 801ae18:	297e      	cmp	r1, #126	; 0x7e
 801ae1a:	ea4f 0052 	mov.w	r0, r2, lsr #1
 801ae1e:	fba5 c000 	umull	ip, r0, r5, r0
 801ae22:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801ae26:	fb03 2210 	mls	r2, r3, r0, r2
 801ae2a:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801ae2e:	f000 818a 	beq.w	801b146 <uxr_read_framed_msg+0x526>
 801ae32:	7863      	ldrb	r3, [r4, #1]
 801ae34:	428b      	cmp	r3, r1
 801ae36:	bf0c      	ite	eq
 801ae38:	2303      	moveq	r3, #3
 801ae3a:	2300      	movne	r3, #0
 801ae3c:	7023      	strb	r3, [r4, #0]
 801ae3e:	e700      	b.n	801ac42 <uxr_read_framed_msg+0x22>
 801ae40:	2300      	movs	r3, #0
 801ae42:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801ae46:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 801ae4a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801ae4e:	4299      	cmp	r1, r3
 801ae50:	d06a      	beq.n	801af28 <uxr_read_framed_msg+0x308>
 801ae52:	18e2      	adds	r2, r4, r3
 801ae54:	7890      	ldrb	r0, [r2, #2]
 801ae56:	287d      	cmp	r0, #125	; 0x7d
 801ae58:	f000 8100 	beq.w	801b05c <uxr_read_framed_msg+0x43c>
 801ae5c:	3301      	adds	r3, #1
 801ae5e:	212a      	movs	r1, #42	; 0x2a
 801ae60:	287e      	cmp	r0, #126	; 0x7e
 801ae62:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 801ae66:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801ae6a:	fba5 c202 	umull	ip, r2, r5, r2
 801ae6e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801ae72:	fb01 3312 	mls	r3, r1, r2, r3
 801ae76:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801ae7a:	d055      	beq.n	801af28 <uxr_read_framed_msg+0x308>
 801ae7c:	2302      	movs	r3, #2
 801ae7e:	7023      	strb	r3, [r4, #0]
 801ae80:	e6df      	b.n	801ac42 <uxr_read_framed_msg+0x22>
 801ae82:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 801ae86:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 801ae8a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801ae8e:	1c5a      	adds	r2, r3, #1
 801ae90:	459c      	cmp	ip, r3
 801ae92:	eb04 0103 	add.w	r1, r4, r3
 801ae96:	ea4f 0352 	mov.w	r3, r2, lsr #1
 801ae9a:	f43f af04 	beq.w	801aca6 <uxr_read_framed_msg+0x86>
 801ae9e:	fba5 0303 	umull	r0, r3, r5, r3
 801aea2:	7889      	ldrb	r1, [r1, #2]
 801aea4:	089b      	lsrs	r3, r3, #2
 801aea6:	297e      	cmp	r1, #126	; 0x7e
 801aea8:	fb0e 2313 	mls	r3, lr, r3, r2
 801aeac:	b2db      	uxtb	r3, r3
 801aeae:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801aeb2:	d1ec      	bne.n	801ae8e <uxr_read_framed_msg+0x26e>
 801aeb4:	2301      	movs	r3, #1
 801aeb6:	7023      	strb	r3, [r4, #0]
 801aeb8:	e6c3      	b.n	801ac42 <uxr_read_framed_msg+0x22>
 801aeba:	1c50      	adds	r0, r2, #1
 801aebc:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 801aec0:	3202      	adds	r2, #2
 801aec2:	0841      	lsrs	r1, r0, #1
 801aec4:	fba5 c101 	umull	ip, r1, r5, r1
 801aec8:	0889      	lsrs	r1, r1, #2
 801aeca:	fb0b 0111 	mls	r1, fp, r1, r0
 801aece:	1860      	adds	r0, r4, r1
 801aed0:	b2c9      	uxtb	r1, r1
 801aed2:	458a      	cmp	sl, r1
 801aed4:	f43f af42 	beq.w	801ad5c <uxr_read_framed_msg+0x13c>
 801aed8:	0851      	lsrs	r1, r2, #1
 801aeda:	7880      	ldrb	r0, [r0, #2]
 801aedc:	fba5 a101 	umull	sl, r1, r5, r1
 801aee0:	287e      	cmp	r0, #126	; 0x7e
 801aee2:	f080 0c20 	eor.w	ip, r0, #32
 801aee6:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801aeea:	fb0b 2211 	mls	r2, fp, r1, r2
 801aeee:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801aef2:	f47f af14 	bne.w	801ad1e <uxr_read_framed_msg+0xfe>
 801aef6:	459e      	cmp	lr, r3
 801aef8:	f43f af33 	beq.w	801ad62 <uxr_read_framed_msg+0x142>
 801aefc:	2301      	movs	r3, #1
 801aefe:	7023      	strb	r3, [r4, #0]
 801af00:	e69f      	b.n	801ac42 <uxr_read_framed_msg+0x22>
 801af02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801af04:	9300      	str	r3, [sp, #0]
 801af06:	2301      	movs	r3, #1
 801af08:	9301      	str	r3, [sp, #4]
 801af0a:	464a      	mov	r2, r9
 801af0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801af0e:	4641      	mov	r1, r8
 801af10:	4620      	mov	r0, r4
 801af12:	f7ff fdf1 	bl	801aaf8 <uxr_framing_read_transport>
 801af16:	2800      	cmp	r0, #0
 801af18:	f43f aec5 	beq.w	801aca6 <uxr_read_framed_msg+0x86>
 801af1c:	7823      	ldrb	r3, [r4, #0]
 801af1e:	e690      	b.n	801ac42 <uxr_read_framed_msg+0x22>
 801af20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801af22:	9300      	str	r3, [sp, #0]
 801af24:	2302      	movs	r3, #2
 801af26:	e7ef      	b.n	801af08 <uxr_read_framed_msg+0x2e8>
 801af28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801af2a:	464a      	mov	r2, r9
 801af2c:	4641      	mov	r1, r8
 801af2e:	4620      	mov	r0, r4
 801af30:	9300      	str	r3, [sp, #0]
 801af32:	2304      	movs	r3, #4
 801af34:	9301      	str	r3, [sp, #4]
 801af36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801af38:	f7ff fdde 	bl	801aaf8 <uxr_framing_read_transport>
 801af3c:	2800      	cmp	r0, #0
 801af3e:	d1ed      	bne.n	801af1c <uxr_read_framed_msg+0x2fc>
 801af40:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801af44:	2b7e      	cmp	r3, #126	; 0x7e
 801af46:	d0e9      	beq.n	801af1c <uxr_read_framed_msg+0x2fc>
 801af48:	e6ad      	b.n	801aca6 <uxr_read_framed_msg+0x86>
 801af4a:	bf00      	nop
 801af4c:	30c30c31 	.word	0x30c30c31
 801af50:	0801f0fc 	.word	0x0801f0fc
 801af54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801af56:	9300      	str	r3, [sp, #0]
 801af58:	2305      	movs	r3, #5
 801af5a:	9301      	str	r3, [sp, #4]
 801af5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801af5e:	f7ff fdcb 	bl	801aaf8 <uxr_framing_read_transport>
 801af62:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801af66:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801af6a:	429a      	cmp	r2, r3
 801af6c:	f43f ae9b 	beq.w	801aca6 <uxr_read_framed_msg+0x86>
 801af70:	e664      	b.n	801ac3c <uxr_read_framed_msg+0x1c>
 801af72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801af74:	9300      	str	r3, [sp, #0]
 801af76:	2303      	movs	r3, #3
 801af78:	e7c6      	b.n	801af08 <uxr_read_framed_msg+0x2e8>
 801af7a:	2305      	movs	r3, #5
 801af7c:	7023      	strb	r3, [r4, #0]
 801af7e:	e660      	b.n	801ac42 <uxr_read_framed_msg+0x22>
 801af80:	f43f aeef 	beq.w	801ad62 <uxr_read_framed_msg+0x142>
 801af84:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801af88:	d094      	beq.n	801aeb4 <uxr_read_framed_msg+0x294>
 801af8a:	ebae 0303 	sub.w	r3, lr, r3
 801af8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801af90:	3302      	adds	r3, #2
 801af92:	9200      	str	r2, [sp, #0]
 801af94:	e7b8      	b.n	801af08 <uxr_read_framed_msg+0x2e8>
 801af96:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801af9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801af9c:	7013      	strb	r3, [r2, #0]
 801af9e:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 801afa0:	b003      	add	sp, #12
 801afa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afa6:	1c59      	adds	r1, r3, #1
 801afa8:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801afac:	084a      	lsrs	r2, r1, #1
 801afae:	fba5 e202 	umull	lr, r2, r5, r2
 801afb2:	0892      	lsrs	r2, r2, #2
 801afb4:	fb0c 1212 	mls	r2, ip, r2, r1
 801afb8:	b2d1      	uxtb	r1, r2
 801afba:	4288      	cmp	r0, r1
 801afbc:	d0b0      	beq.n	801af20 <uxr_read_framed_msg+0x300>
 801afbe:	3302      	adds	r3, #2
 801afc0:	4422      	add	r2, r4
 801afc2:	7891      	ldrb	r1, [r2, #2]
 801afc4:	085a      	lsrs	r2, r3, #1
 801afc6:	fba5 0202 	umull	r0, r2, r5, r2
 801afca:	297e      	cmp	r1, #126	; 0x7e
 801afcc:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801afd0:	fb0c 3312 	mls	r3, ip, r2, r3
 801afd4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801afd8:	f000 80a1 	beq.w	801b11e <uxr_read_framed_msg+0x4fe>
 801afdc:	f081 0120 	eor.w	r1, r1, #32
 801afe0:	e680      	b.n	801ace4 <uxr_read_framed_msg+0xc4>
 801afe2:	f103 0c01 	add.w	ip, r3, #1
 801afe6:	202a      	movs	r0, #42	; 0x2a
 801afe8:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801afec:	fba5 e202 	umull	lr, r2, r5, r2
 801aff0:	0892      	lsrs	r2, r2, #2
 801aff2:	fb00 c212 	mls	r2, r0, r2, ip
 801aff6:	fa5f fc82 	uxtb.w	ip, r2
 801affa:	4561      	cmp	r1, ip
 801affc:	d081      	beq.n	801af02 <uxr_read_framed_msg+0x2e2>
 801affe:	3302      	adds	r3, #2
 801b000:	4422      	add	r2, r4
 801b002:	0859      	lsrs	r1, r3, #1
 801b004:	7892      	ldrb	r2, [r2, #2]
 801b006:	fba5 c101 	umull	ip, r1, r5, r1
 801b00a:	2a7e      	cmp	r2, #126	; 0x7e
 801b00c:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801b010:	fb00 3311 	mls	r3, r0, r1, r3
 801b014:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801b018:	f000 8091 	beq.w	801b13e <uxr_read_framed_msg+0x51e>
 801b01c:	f082 0220 	eor.w	r2, r2, #32
 801b020:	e636      	b.n	801ac90 <uxr_read_framed_msg+0x70>
 801b022:	1c51      	adds	r1, r2, #1
 801b024:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801b028:	084b      	lsrs	r3, r1, #1
 801b02a:	fba5 e303 	umull	lr, r3, r5, r3
 801b02e:	089b      	lsrs	r3, r3, #2
 801b030:	fb0c 1313 	mls	r3, ip, r3, r1
 801b034:	b2d9      	uxtb	r1, r3
 801b036:	4288      	cmp	r0, r1
 801b038:	d09b      	beq.n	801af72 <uxr_read_framed_msg+0x352>
 801b03a:	3202      	adds	r2, #2
 801b03c:	4423      	add	r3, r4
 801b03e:	0850      	lsrs	r0, r2, #1
 801b040:	789b      	ldrb	r3, [r3, #2]
 801b042:	fba5 1000 	umull	r1, r0, r5, r0
 801b046:	2b7e      	cmp	r3, #126	; 0x7e
 801b048:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801b04c:	fb0c 2210 	mls	r2, ip, r0, r2
 801b050:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 801b054:	d077      	beq.n	801b146 <uxr_read_framed_msg+0x526>
 801b056:	f083 0120 	eor.w	r1, r3, #32
 801b05a:	e6ea      	b.n	801ae32 <uxr_read_framed_msg+0x212>
 801b05c:	f103 0c01 	add.w	ip, r3, #1
 801b060:	202a      	movs	r0, #42	; 0x2a
 801b062:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801b066:	fba5 e202 	umull	lr, r2, r5, r2
 801b06a:	0892      	lsrs	r2, r2, #2
 801b06c:	fb00 c212 	mls	r2, r0, r2, ip
 801b070:	fa5f fc82 	uxtb.w	ip, r2
 801b074:	4561      	cmp	r1, ip
 801b076:	f43f af57 	beq.w	801af28 <uxr_read_framed_msg+0x308>
 801b07a:	3302      	adds	r3, #2
 801b07c:	4422      	add	r2, r4
 801b07e:	7891      	ldrb	r1, [r2, #2]
 801b080:	085a      	lsrs	r2, r3, #1
 801b082:	fba5 c202 	umull	ip, r2, r5, r2
 801b086:	297e      	cmp	r1, #126	; 0x7e
 801b088:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801b08c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801b090:	fb00 3312 	mls	r3, r0, r2, r3
 801b094:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801b098:	f43f af46 	beq.w	801af28 <uxr_read_framed_msg+0x308>
 801b09c:	f081 0120 	eor.w	r1, r1, #32
 801b0a0:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 801b0a4:	e6ea      	b.n	801ae7c <uxr_read_framed_msg+0x25c>
 801b0a6:	1c59      	adds	r1, r3, #1
 801b0a8:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801b0ac:	084a      	lsrs	r2, r1, #1
 801b0ae:	fba5 e202 	umull	lr, r2, r5, r2
 801b0b2:	0892      	lsrs	r2, r2, #2
 801b0b4:	fb0c 1212 	mls	r2, ip, r2, r1
 801b0b8:	b2d1      	uxtb	r1, r2
 801b0ba:	4288      	cmp	r0, r1
 801b0bc:	f43f af21 	beq.w	801af02 <uxr_read_framed_msg+0x2e2>
 801b0c0:	3302      	adds	r3, #2
 801b0c2:	4422      	add	r2, r4
 801b0c4:	7891      	ldrb	r1, [r2, #2]
 801b0c6:	085a      	lsrs	r2, r3, #1
 801b0c8:	fba5 0202 	umull	r0, r2, r5, r2
 801b0cc:	297e      	cmp	r1, #126	; 0x7e
 801b0ce:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801b0d2:	fb0c 3312 	mls	r3, ip, r2, r3
 801b0d6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801b0da:	d030      	beq.n	801b13e <uxr_read_framed_msg+0x51e>
 801b0dc:	f081 0120 	eor.w	r1, r1, #32
 801b0e0:	e65d      	b.n	801ad9e <uxr_read_framed_msg+0x17e>
 801b0e2:	1c59      	adds	r1, r3, #1
 801b0e4:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801b0e8:	084a      	lsrs	r2, r1, #1
 801b0ea:	fba5 e202 	umull	lr, r2, r5, r2
 801b0ee:	0892      	lsrs	r2, r2, #2
 801b0f0:	fb0c 1212 	mls	r2, ip, r2, r1
 801b0f4:	b2d1      	uxtb	r1, r2
 801b0f6:	4288      	cmp	r0, r1
 801b0f8:	f43f af12 	beq.w	801af20 <uxr_read_framed_msg+0x300>
 801b0fc:	3302      	adds	r3, #2
 801b0fe:	4422      	add	r2, r4
 801b100:	7891      	ldrb	r1, [r2, #2]
 801b102:	085a      	lsrs	r2, r3, #1
 801b104:	fba5 0202 	umull	r0, r2, r5, r2
 801b108:	297e      	cmp	r1, #126	; 0x7e
 801b10a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801b10e:	fb0c 3312 	mls	r3, ip, r2, r3
 801b112:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801b116:	d002      	beq.n	801b11e <uxr_read_framed_msg+0x4fe>
 801b118:	f081 0120 	eor.w	r1, r1, #32
 801b11c:	e66a      	b.n	801adf4 <uxr_read_framed_msg+0x1d4>
 801b11e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b120:	9300      	str	r3, [sp, #0]
 801b122:	2302      	movs	r3, #2
 801b124:	9301      	str	r3, [sp, #4]
 801b126:	464a      	mov	r2, r9
 801b128:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b12a:	4641      	mov	r1, r8
 801b12c:	4620      	mov	r0, r4
 801b12e:	f7ff fce3 	bl	801aaf8 <uxr_framing_read_transport>
 801b132:	2800      	cmp	r0, #0
 801b134:	f47f aef2 	bne.w	801af1c <uxr_read_framed_msg+0x2fc>
 801b138:	2301      	movs	r3, #1
 801b13a:	7023      	strb	r3, [r4, #0]
 801b13c:	e581      	b.n	801ac42 <uxr_read_framed_msg+0x22>
 801b13e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b140:	9300      	str	r3, [sp, #0]
 801b142:	2301      	movs	r3, #1
 801b144:	e7ee      	b.n	801b124 <uxr_read_framed_msg+0x504>
 801b146:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b148:	9300      	str	r3, [sp, #0]
 801b14a:	2303      	movs	r3, #3
 801b14c:	e7ea      	b.n	801b124 <uxr_read_framed_msg+0x504>
 801b14e:	bf00      	nop

0801b150 <rcl_get_automatic_discovery_range>:
 801b150:	b530      	push	{r4, r5, lr}
 801b152:	2300      	movs	r3, #0
 801b154:	b083      	sub	sp, #12
 801b156:	9301      	str	r3, [sp, #4]
 801b158:	b1c0      	cbz	r0, 801b18c <rcl_get_automatic_discovery_range+0x3c>
 801b15a:	4604      	mov	r4, r0
 801b15c:	a901      	add	r1, sp, #4
 801b15e:	4818      	ldr	r0, [pc, #96]	; (801b1c0 <rcl_get_automatic_discovery_range+0x70>)
 801b160:	f7fc fbf6 	bl	8017950 <rcutils_get_env>
 801b164:	b110      	cbz	r0, 801b16c <rcl_get_automatic_discovery_range+0x1c>
 801b166:	2001      	movs	r0, #1
 801b168:	b003      	add	sp, #12
 801b16a:	bd30      	pop	{r4, r5, pc}
 801b16c:	9d01      	ldr	r5, [sp, #4]
 801b16e:	782b      	ldrb	r3, [r5, #0]
 801b170:	b13b      	cbz	r3, 801b182 <rcl_get_automatic_discovery_range+0x32>
 801b172:	4914      	ldr	r1, [pc, #80]	; (801b1c4 <rcl_get_automatic_discovery_range+0x74>)
 801b174:	4628      	mov	r0, r5
 801b176:	f7e5 f863 	bl	8000240 <strcmp>
 801b17a:	b950      	cbnz	r0, 801b192 <rcl_get_automatic_discovery_range+0x42>
 801b17c:	2301      	movs	r3, #1
 801b17e:	7023      	strb	r3, [r4, #0]
 801b180:	e7f2      	b.n	801b168 <rcl_get_automatic_discovery_range+0x18>
 801b182:	2303      	movs	r3, #3
 801b184:	2000      	movs	r0, #0
 801b186:	7023      	strb	r3, [r4, #0]
 801b188:	b003      	add	sp, #12
 801b18a:	bd30      	pop	{r4, r5, pc}
 801b18c:	200b      	movs	r0, #11
 801b18e:	b003      	add	sp, #12
 801b190:	bd30      	pop	{r4, r5, pc}
 801b192:	490d      	ldr	r1, [pc, #52]	; (801b1c8 <rcl_get_automatic_discovery_range+0x78>)
 801b194:	4628      	mov	r0, r5
 801b196:	f7e5 f853 	bl	8000240 <strcmp>
 801b19a:	b168      	cbz	r0, 801b1b8 <rcl_get_automatic_discovery_range+0x68>
 801b19c:	490b      	ldr	r1, [pc, #44]	; (801b1cc <rcl_get_automatic_discovery_range+0x7c>)
 801b19e:	4628      	mov	r0, r5
 801b1a0:	f7e5 f84e 	bl	8000240 <strcmp>
 801b1a4:	2800      	cmp	r0, #0
 801b1a6:	d0ec      	beq.n	801b182 <rcl_get_automatic_discovery_range+0x32>
 801b1a8:	4909      	ldr	r1, [pc, #36]	; (801b1d0 <rcl_get_automatic_discovery_range+0x80>)
 801b1aa:	4628      	mov	r0, r5
 801b1ac:	f7e5 f848 	bl	8000240 <strcmp>
 801b1b0:	b910      	cbnz	r0, 801b1b8 <rcl_get_automatic_discovery_range+0x68>
 801b1b2:	2304      	movs	r3, #4
 801b1b4:	7023      	strb	r3, [r4, #0]
 801b1b6:	e7d7      	b.n	801b168 <rcl_get_automatic_discovery_range+0x18>
 801b1b8:	2302      	movs	r3, #2
 801b1ba:	2000      	movs	r0, #0
 801b1bc:	7023      	strb	r3, [r4, #0]
 801b1be:	e7d3      	b.n	801b168 <rcl_get_automatic_discovery_range+0x18>
 801b1c0:	0801f2fc 	.word	0x0801f2fc
 801b1c4:	0801f31c 	.word	0x0801f31c
 801b1c8:	0801f320 	.word	0x0801f320
 801b1cc:	0801f32c 	.word	0x0801f32c
 801b1d0:	0801f334 	.word	0x0801f334

0801b1d4 <rcl_automatic_discovery_range_to_string>:
 801b1d4:	2804      	cmp	r0, #4
 801b1d6:	d803      	bhi.n	801b1e0 <rcl_automatic_discovery_range_to_string+0xc>
 801b1d8:	4b02      	ldr	r3, [pc, #8]	; (801b1e4 <rcl_automatic_discovery_range_to_string+0x10>)
 801b1da:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801b1de:	4770      	bx	lr
 801b1e0:	2000      	movs	r0, #0
 801b1e2:	4770      	bx	lr
 801b1e4:	0801f424 	.word	0x0801f424

0801b1e8 <rcl_get_discovery_static_peers>:
 801b1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b1ec:	2300      	movs	r3, #0
 801b1ee:	b08e      	sub	sp, #56	; 0x38
 801b1f0:	9306      	str	r3, [sp, #24]
 801b1f2:	2900      	cmp	r1, #0
 801b1f4:	d04b      	beq.n	801b28e <rcl_get_discovery_static_peers+0xa6>
 801b1f6:	4605      	mov	r5, r0
 801b1f8:	2800      	cmp	r0, #0
 801b1fa:	d048      	beq.n	801b28e <rcl_get_discovery_static_peers+0xa6>
 801b1fc:	460c      	mov	r4, r1
 801b1fe:	482c      	ldr	r0, [pc, #176]	; (801b2b0 <rcl_get_discovery_static_peers+0xc8>)
 801b200:	a906      	add	r1, sp, #24
 801b202:	f7fc fba5 	bl	8017950 <rcutils_get_env>
 801b206:	b118      	cbz	r0, 801b210 <rcl_get_discovery_static_peers+0x28>
 801b208:	2001      	movs	r0, #1
 801b20a:	b00e      	add	sp, #56	; 0x38
 801b20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b210:	9b06      	ldr	r3, [sp, #24]
 801b212:	2b00      	cmp	r3, #0
 801b214:	d0f8      	beq.n	801b208 <rcl_get_discovery_static_peers+0x20>
 801b216:	af07      	add	r7, sp, #28
 801b218:	4638      	mov	r0, r7
 801b21a:	f000 fc73 	bl	801bb04 <rcutils_get_zero_initialized_string_array>
 801b21e:	f104 0308 	add.w	r3, r4, #8
 801b222:	9703      	str	r7, [sp, #12]
 801b224:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b228:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b22c:	213b      	movs	r1, #59	; 0x3b
 801b22e:	9806      	ldr	r0, [sp, #24]
 801b230:	e894 000c 	ldmia.w	r4, {r2, r3}
 801b234:	f000 fba8 	bl	801b988 <rcutils_split>
 801b238:	2800      	cmp	r0, #0
 801b23a:	d1e5      	bne.n	801b208 <rcl_get_discovery_static_peers+0x20>
 801b23c:	4622      	mov	r2, r4
 801b23e:	9907      	ldr	r1, [sp, #28]
 801b240:	4628      	mov	r0, r5
 801b242:	f000 fcaf 	bl	801bba4 <rmw_discovery_options_init>
 801b246:	4604      	mov	r4, r0
 801b248:	bb78      	cbnz	r0, 801b2aa <rcl_get_discovery_static_peers+0xc2>
 801b24a:	9e07      	ldr	r6, [sp, #28]
 801b24c:	b336      	cbz	r6, 801b29c <rcl_get_discovery_static_peers+0xb4>
 801b24e:	f8dd a020 	ldr.w	sl, [sp, #32]
 801b252:	4680      	mov	r8, r0
 801b254:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 801b258:	ea4f 2904 	mov.w	r9, r4, lsl #8
 801b25c:	4608      	mov	r0, r1
 801b25e:	9105      	str	r1, [sp, #20]
 801b260:	f7e5 f84e 	bl	8000300 <strlen>
 801b264:	28ff      	cmp	r0, #255	; 0xff
 801b266:	9905      	ldr	r1, [sp, #20]
 801b268:	d815      	bhi.n	801b296 <rcl_get_discovery_static_peers+0xae>
 801b26a:	6868      	ldr	r0, [r5, #4]
 801b26c:	f44f 7280 	mov.w	r2, #256	; 0x100
 801b270:	eb00 2004 	add.w	r0, r0, r4, lsl #8
 801b274:	3401      	adds	r4, #1
 801b276:	f001 fa84 	bl	801c782 <strncpy>
 801b27a:	686b      	ldr	r3, [r5, #4]
 801b27c:	9e07      	ldr	r6, [sp, #28]
 801b27e:	444b      	add	r3, r9
 801b280:	42b4      	cmp	r4, r6
 801b282:	f883 80ff 	strb.w	r8, [r3, #255]	; 0xff
 801b286:	d209      	bcs.n	801b29c <rcl_get_discovery_static_peers+0xb4>
 801b288:	f8dd a020 	ldr.w	sl, [sp, #32]
 801b28c:	e7e2      	b.n	801b254 <rcl_get_discovery_static_peers+0x6c>
 801b28e:	200b      	movs	r0, #11
 801b290:	b00e      	add	sp, #56	; 0x38
 801b292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b296:	3401      	adds	r4, #1
 801b298:	42b4      	cmp	r4, r6
 801b29a:	d3db      	bcc.n	801b254 <rcl_get_discovery_static_peers+0x6c>
 801b29c:	4638      	mov	r0, r7
 801b29e:	f000 fc4f 	bl	801bb40 <rcutils_string_array_fini>
 801b2a2:	3800      	subs	r0, #0
 801b2a4:	bf18      	it	ne
 801b2a6:	2001      	movne	r0, #1
 801b2a8:	e7af      	b.n	801b20a <rcl_get_discovery_static_peers+0x22>
 801b2aa:	f7f9 f94f 	bl	801454c <rcl_convert_rmw_ret_to_rcl_ret>
 801b2ae:	e7ac      	b.n	801b20a <rcl_get_discovery_static_peers+0x22>
 801b2b0:	0801f344 	.word	0x0801f344

0801b2b4 <rcl_get_default_domain_id>:
 801b2b4:	b530      	push	{r4, r5, lr}
 801b2b6:	2300      	movs	r3, #0
 801b2b8:	b083      	sub	sp, #12
 801b2ba:	9300      	str	r3, [sp, #0]
 801b2bc:	b1d0      	cbz	r0, 801b2f4 <rcl_get_default_domain_id+0x40>
 801b2be:	4604      	mov	r4, r0
 801b2c0:	4669      	mov	r1, sp
 801b2c2:	4815      	ldr	r0, [pc, #84]	; (801b318 <rcl_get_default_domain_id+0x64>)
 801b2c4:	f7fc fb44 	bl	8017950 <rcutils_get_env>
 801b2c8:	4602      	mov	r2, r0
 801b2ca:	b110      	cbz	r0, 801b2d2 <rcl_get_default_domain_id+0x1e>
 801b2cc:	2001      	movs	r0, #1
 801b2ce:	b003      	add	sp, #12
 801b2d0:	bd30      	pop	{r4, r5, pc}
 801b2d2:	9b00      	ldr	r3, [sp, #0]
 801b2d4:	b18b      	cbz	r3, 801b2fa <rcl_get_default_domain_id+0x46>
 801b2d6:	7818      	ldrb	r0, [r3, #0]
 801b2d8:	2800      	cmp	r0, #0
 801b2da:	d0f8      	beq.n	801b2ce <rcl_get_default_domain_id+0x1a>
 801b2dc:	a901      	add	r1, sp, #4
 801b2de:	4618      	mov	r0, r3
 801b2e0:	9201      	str	r2, [sp, #4]
 801b2e2:	f001 f881 	bl	801c3e8 <strtoul>
 801b2e6:	4605      	mov	r5, r0
 801b2e8:	b150      	cbz	r0, 801b300 <rcl_get_default_domain_id+0x4c>
 801b2ea:	1c43      	adds	r3, r0, #1
 801b2ec:	d00d      	beq.n	801b30a <rcl_get_default_domain_id+0x56>
 801b2ee:	2000      	movs	r0, #0
 801b2f0:	6025      	str	r5, [r4, #0]
 801b2f2:	e7ec      	b.n	801b2ce <rcl_get_default_domain_id+0x1a>
 801b2f4:	200b      	movs	r0, #11
 801b2f6:	b003      	add	sp, #12
 801b2f8:	bd30      	pop	{r4, r5, pc}
 801b2fa:	4618      	mov	r0, r3
 801b2fc:	b003      	add	sp, #12
 801b2fe:	bd30      	pop	{r4, r5, pc}
 801b300:	9b01      	ldr	r3, [sp, #4]
 801b302:	781b      	ldrb	r3, [r3, #0]
 801b304:	2b00      	cmp	r3, #0
 801b306:	d0f2      	beq.n	801b2ee <rcl_get_default_domain_id+0x3a>
 801b308:	e7e0      	b.n	801b2cc <rcl_get_default_domain_id+0x18>
 801b30a:	f001 fb0f 	bl	801c92c <__errno>
 801b30e:	6803      	ldr	r3, [r0, #0]
 801b310:	2b22      	cmp	r3, #34	; 0x22
 801b312:	d1ec      	bne.n	801b2ee <rcl_get_default_domain_id+0x3a>
 801b314:	e7da      	b.n	801b2cc <rcl_get_default_domain_id+0x18>
 801b316:	bf00      	nop
 801b318:	0801f438 	.word	0x0801f438

0801b31c <rcl_expand_topic_name>:
 801b31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b320:	b08d      	sub	sp, #52	; 0x34
 801b322:	4698      	mov	r8, r3
 801b324:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b326:	9207      	str	r2, [sp, #28]
 801b328:	2b00      	cmp	r3, #0
 801b32a:	bf18      	it	ne
 801b32c:	f1b8 0f00 	cmpne.w	r8, #0
 801b330:	bf0c      	ite	eq
 801b332:	2301      	moveq	r3, #1
 801b334:	2300      	movne	r3, #0
 801b336:	2a00      	cmp	r2, #0
 801b338:	bf08      	it	eq
 801b33a:	f043 0301 	orreq.w	r3, r3, #1
 801b33e:	2900      	cmp	r1, #0
 801b340:	bf08      	it	eq
 801b342:	f043 0301 	orreq.w	r3, r3, #1
 801b346:	2b00      	cmp	r3, #0
 801b348:	d13d      	bne.n	801b3c6 <rcl_expand_topic_name+0xaa>
 801b34a:	fab0 f280 	clz	r2, r0
 801b34e:	4604      	mov	r4, r0
 801b350:	0952      	lsrs	r2, r2, #5
 801b352:	2800      	cmp	r0, #0
 801b354:	d037      	beq.n	801b3c6 <rcl_expand_topic_name+0xaa>
 801b356:	460f      	mov	r7, r1
 801b358:	a90b      	add	r1, sp, #44	; 0x2c
 801b35a:	f000 fa51 	bl	801b800 <rcl_validate_topic_name>
 801b35e:	4605      	mov	r5, r0
 801b360:	bb68      	cbnz	r0, 801b3be <rcl_expand_topic_name+0xa2>
 801b362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b364:	2b00      	cmp	r3, #0
 801b366:	d137      	bne.n	801b3d8 <rcl_expand_topic_name+0xbc>
 801b368:	4602      	mov	r2, r0
 801b36a:	a90b      	add	r1, sp, #44	; 0x2c
 801b36c:	4638      	mov	r0, r7
 801b36e:	f7fc ff69 	bl	8018244 <rmw_validate_node_name>
 801b372:	bb68      	cbnz	r0, 801b3d0 <rcl_expand_topic_name+0xb4>
 801b374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b376:	2b00      	cmp	r3, #0
 801b378:	d133      	bne.n	801b3e2 <rcl_expand_topic_name+0xc6>
 801b37a:	462a      	mov	r2, r5
 801b37c:	a90b      	add	r1, sp, #44	; 0x2c
 801b37e:	9807      	ldr	r0, [sp, #28]
 801b380:	f7fc ff42 	bl	8018208 <rmw_validate_namespace>
 801b384:	bb20      	cbnz	r0, 801b3d0 <rcl_expand_topic_name+0xb4>
 801b386:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801b388:	2d00      	cmp	r5, #0
 801b38a:	f040 80a2 	bne.w	801b4d2 <rcl_expand_topic_name+0x1b6>
 801b38e:	217b      	movs	r1, #123	; 0x7b
 801b390:	4620      	mov	r0, r4
 801b392:	f001 f9d7 	bl	801c744 <strchr>
 801b396:	7823      	ldrb	r3, [r4, #0]
 801b398:	4681      	mov	r9, r0
 801b39a:	bb20      	cbnz	r0, 801b3e6 <rcl_expand_topic_name+0xca>
 801b39c:	2b2f      	cmp	r3, #47	; 0x2f
 801b39e:	d122      	bne.n	801b3e6 <rcl_expand_topic_name+0xca>
 801b3a0:	ab19      	add	r3, sp, #100	; 0x64
 801b3a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b3a6:	ab16      	add	r3, sp, #88	; 0x58
 801b3a8:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b3ac:	4620      	mov	r0, r4
 801b3ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b3b0:	f7fc fc30 	bl	8017c14 <rcutils_strdup>
 801b3b4:	2800      	cmp	r0, #0
 801b3b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b3b8:	bf08      	it	eq
 801b3ba:	250a      	moveq	r5, #10
 801b3bc:	6018      	str	r0, [r3, #0]
 801b3be:	4628      	mov	r0, r5
 801b3c0:	b00d      	add	sp, #52	; 0x34
 801b3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3c6:	250b      	movs	r5, #11
 801b3c8:	4628      	mov	r0, r5
 801b3ca:	b00d      	add	sp, #52	; 0x34
 801b3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3d0:	f7f9 f8bc 	bl	801454c <rcl_convert_rmw_ret_to_rcl_ret>
 801b3d4:	4605      	mov	r5, r0
 801b3d6:	e7f2      	b.n	801b3be <rcl_expand_topic_name+0xa2>
 801b3d8:	2567      	movs	r5, #103	; 0x67
 801b3da:	4628      	mov	r0, r5
 801b3dc:	b00d      	add	sp, #52	; 0x34
 801b3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3e2:	25c9      	movs	r5, #201	; 0xc9
 801b3e4:	e7eb      	b.n	801b3be <rcl_expand_topic_name+0xa2>
 801b3e6:	2b7e      	cmp	r3, #126	; 0x7e
 801b3e8:	d075      	beq.n	801b4d6 <rcl_expand_topic_name+0x1ba>
 801b3ea:	f1b9 0f00 	cmp.w	r9, #0
 801b3ee:	f000 80c2 	beq.w	801b576 <rcl_expand_topic_name+0x25a>
 801b3f2:	2300      	movs	r3, #0
 801b3f4:	46a2      	mov	sl, r4
 801b3f6:	461e      	mov	r6, r3
 801b3f8:	9508      	str	r5, [sp, #32]
 801b3fa:	4655      	mov	r5, sl
 801b3fc:	9409      	str	r4, [sp, #36]	; 0x24
 801b3fe:	46b2      	mov	sl, r6
 801b400:	464c      	mov	r4, r9
 801b402:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801b406:	2c00      	cmp	r4, #0
 801b408:	f000 80ae 	beq.w	801b568 <rcl_expand_topic_name+0x24c>
 801b40c:	217d      	movs	r1, #125	; 0x7d
 801b40e:	4628      	mov	r0, r5
 801b410:	f001 f998 	bl	801c744 <strchr>
 801b414:	eba0 0904 	sub.w	r9, r0, r4
 801b418:	4621      	mov	r1, r4
 801b41a:	4869      	ldr	r0, [pc, #420]	; (801b5c0 <rcl_expand_topic_name+0x2a4>)
 801b41c:	f109 0601 	add.w	r6, r9, #1
 801b420:	4632      	mov	r2, r6
 801b422:	f001 f99c 	bl	801c75e <strncmp>
 801b426:	2800      	cmp	r0, #0
 801b428:	d051      	beq.n	801b4ce <rcl_expand_topic_name+0x1b2>
 801b42a:	4632      	mov	r2, r6
 801b42c:	4621      	mov	r1, r4
 801b42e:	4865      	ldr	r0, [pc, #404]	; (801b5c4 <rcl_expand_topic_name+0x2a8>)
 801b430:	f001 f995 	bl	801c75e <strncmp>
 801b434:	b128      	cbz	r0, 801b442 <rcl_expand_topic_name+0x126>
 801b436:	4632      	mov	r2, r6
 801b438:	4621      	mov	r1, r4
 801b43a:	4863      	ldr	r0, [pc, #396]	; (801b5c8 <rcl_expand_topic_name+0x2ac>)
 801b43c:	f001 f98f 	bl	801c75e <strncmp>
 801b440:	bb38      	cbnz	r0, 801b492 <rcl_expand_topic_name+0x176>
 801b442:	46d9      	mov	r9, fp
 801b444:	ab18      	add	r3, sp, #96	; 0x60
 801b446:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b44a:	ab16      	add	r3, sp, #88	; 0x58
 801b44c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b450:	4620      	mov	r0, r4
 801b452:	4631      	mov	r1, r6
 801b454:	cb0c      	ldmia	r3, {r2, r3}
 801b456:	f7fc fc03 	bl	8017c60 <rcutils_strndup>
 801b45a:	4604      	mov	r4, r0
 801b45c:	2800      	cmp	r0, #0
 801b45e:	f000 80a3 	beq.w	801b5a8 <rcl_expand_topic_name+0x28c>
 801b462:	464a      	mov	r2, r9
 801b464:	4628      	mov	r0, r5
 801b466:	ab16      	add	r3, sp, #88	; 0x58
 801b468:	4621      	mov	r1, r4
 801b46a:	f7fc fad3 	bl	8017a14 <rcutils_repl_str>
 801b46e:	991a      	ldr	r1, [sp, #104]	; 0x68
 801b470:	4605      	mov	r5, r0
 801b472:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b474:	4620      	mov	r0, r4
 801b476:	4798      	blx	r3
 801b478:	4650      	mov	r0, sl
 801b47a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b47c:	991a      	ldr	r1, [sp, #104]	; 0x68
 801b47e:	4798      	blx	r3
 801b480:	2d00      	cmp	r5, #0
 801b482:	d06c      	beq.n	801b55e <rcl_expand_topic_name+0x242>
 801b484:	217b      	movs	r1, #123	; 0x7b
 801b486:	4628      	mov	r0, r5
 801b488:	f001 f95c 	bl	801c744 <strchr>
 801b48c:	46aa      	mov	sl, r5
 801b48e:	4604      	mov	r4, r0
 801b490:	e7b9      	b.n	801b406 <rcl_expand_topic_name+0xea>
 801b492:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801b496:	1c61      	adds	r1, r4, #1
 801b498:	4640      	mov	r0, r8
 801b49a:	f7fc fcdd 	bl	8017e58 <rcutils_string_map_getn>
 801b49e:	4681      	mov	r9, r0
 801b4a0:	2800      	cmp	r0, #0
 801b4a2:	d1cf      	bne.n	801b444 <rcl_expand_topic_name+0x128>
 801b4a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b4a6:	aa18      	add	r2, sp, #96	; 0x60
 801b4a8:	2569      	movs	r5, #105	; 0x69
 801b4aa:	6018      	str	r0, [r3, #0]
 801b4ac:	ab16      	add	r3, sp, #88	; 0x58
 801b4ae:	ca07      	ldmia	r2, {r0, r1, r2}
 801b4b0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b4b4:	4631      	mov	r1, r6
 801b4b6:	4620      	mov	r0, r4
 801b4b8:	cb0c      	ldmia	r3, {r2, r3}
 801b4ba:	f7fc fbd1 	bl	8017c60 <rcutils_strndup>
 801b4be:	991a      	ldr	r1, [sp, #104]	; 0x68
 801b4c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b4c2:	4798      	blx	r3
 801b4c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b4c6:	991a      	ldr	r1, [sp, #104]	; 0x68
 801b4c8:	4650      	mov	r0, sl
 801b4ca:	4798      	blx	r3
 801b4cc:	e777      	b.n	801b3be <rcl_expand_topic_name+0xa2>
 801b4ce:	46b9      	mov	r9, r7
 801b4d0:	e7b8      	b.n	801b444 <rcl_expand_topic_name+0x128>
 801b4d2:	25ca      	movs	r5, #202	; 0xca
 801b4d4:	e773      	b.n	801b3be <rcl_expand_topic_name+0xa2>
 801b4d6:	9e07      	ldr	r6, [sp, #28]
 801b4d8:	4630      	mov	r0, r6
 801b4da:	f7e4 ff11 	bl	8000300 <strlen>
 801b4de:	4a3b      	ldr	r2, [pc, #236]	; (801b5cc <rcl_expand_topic_name+0x2b0>)
 801b4e0:	4b3b      	ldr	r3, [pc, #236]	; (801b5d0 <rcl_expand_topic_name+0x2b4>)
 801b4e2:	9603      	str	r6, [sp, #12]
 801b4e4:	2801      	cmp	r0, #1
 801b4e6:	bf18      	it	ne
 801b4e8:	4613      	movne	r3, r2
 801b4ea:	9704      	str	r7, [sp, #16]
 801b4ec:	9302      	str	r3, [sp, #8]
 801b4ee:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801b4f0:	9300      	str	r3, [sp, #0]
 801b4f2:	1c63      	adds	r3, r4, #1
 801b4f4:	9305      	str	r3, [sp, #20]
 801b4f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801b4fa:	9301      	str	r3, [sp, #4]
 801b4fc:	ab16      	add	r3, sp, #88	; 0x58
 801b4fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b500:	f7fc fa4e 	bl	80179a0 <rcutils_format_string_limit>
 801b504:	4606      	mov	r6, r0
 801b506:	b350      	cbz	r0, 801b55e <rcl_expand_topic_name+0x242>
 801b508:	f1b9 0f00 	cmp.w	r9, #0
 801b50c:	d005      	beq.n	801b51a <rcl_expand_topic_name+0x1fe>
 801b50e:	217b      	movs	r1, #123	; 0x7b
 801b510:	46b2      	mov	sl, r6
 801b512:	f001 f917 	bl	801c744 <strchr>
 801b516:	4681      	mov	r9, r0
 801b518:	e76e      	b.n	801b3f8 <rcl_expand_topic_name+0xdc>
 801b51a:	7833      	ldrb	r3, [r6, #0]
 801b51c:	2b2f      	cmp	r3, #47	; 0x2f
 801b51e:	d01b      	beq.n	801b558 <rcl_expand_topic_name+0x23c>
 801b520:	9c07      	ldr	r4, [sp, #28]
 801b522:	4620      	mov	r0, r4
 801b524:	f7e4 feec 	bl	8000300 <strlen>
 801b528:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801b52c:	4a29      	ldr	r2, [pc, #164]	; (801b5d4 <rcl_expand_topic_name+0x2b8>)
 801b52e:	9301      	str	r3, [sp, #4]
 801b530:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801b532:	9604      	str	r6, [sp, #16]
 801b534:	9300      	str	r3, [sp, #0]
 801b536:	4b28      	ldr	r3, [pc, #160]	; (801b5d8 <rcl_expand_topic_name+0x2bc>)
 801b538:	9403      	str	r4, [sp, #12]
 801b53a:	2801      	cmp	r0, #1
 801b53c:	bf18      	it	ne
 801b53e:	4613      	movne	r3, r2
 801b540:	9302      	str	r3, [sp, #8]
 801b542:	ab16      	add	r3, sp, #88	; 0x58
 801b544:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b546:	f7fc fa2b 	bl	80179a0 <rcutils_format_string_limit>
 801b54a:	4603      	mov	r3, r0
 801b54c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b54e:	4630      	mov	r0, r6
 801b550:	991a      	ldr	r1, [sp, #104]	; 0x68
 801b552:	461e      	mov	r6, r3
 801b554:	4790      	blx	r2
 801b556:	b116      	cbz	r6, 801b55e <rcl_expand_topic_name+0x242>
 801b558:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b55a:	601e      	str	r6, [r3, #0]
 801b55c:	e72f      	b.n	801b3be <rcl_expand_topic_name+0xa2>
 801b55e:	2300      	movs	r3, #0
 801b560:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801b562:	250a      	movs	r5, #10
 801b564:	6013      	str	r3, [r2, #0]
 801b566:	e72a      	b.n	801b3be <rcl_expand_topic_name+0xa2>
 801b568:	4653      	mov	r3, sl
 801b56a:	4656      	mov	r6, sl
 801b56c:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801b570:	2b00      	cmp	r3, #0
 801b572:	d1d2      	bne.n	801b51a <rcl_expand_topic_name+0x1fe>
 801b574:	7823      	ldrb	r3, [r4, #0]
 801b576:	2b2f      	cmp	r3, #47	; 0x2f
 801b578:	d01e      	beq.n	801b5b8 <rcl_expand_topic_name+0x29c>
 801b57a:	9e07      	ldr	r6, [sp, #28]
 801b57c:	4630      	mov	r0, r6
 801b57e:	f7e4 febf 	bl	8000300 <strlen>
 801b582:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b584:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801b588:	9603      	str	r6, [sp, #12]
 801b58a:	9404      	str	r4, [sp, #16]
 801b58c:	e9cd 2300 	strd	r2, r3, [sp]
 801b590:	4a10      	ldr	r2, [pc, #64]	; (801b5d4 <rcl_expand_topic_name+0x2b8>)
 801b592:	4b11      	ldr	r3, [pc, #68]	; (801b5d8 <rcl_expand_topic_name+0x2bc>)
 801b594:	2801      	cmp	r0, #1
 801b596:	bf18      	it	ne
 801b598:	4613      	movne	r3, r2
 801b59a:	9302      	str	r3, [sp, #8]
 801b59c:	ab16      	add	r3, sp, #88	; 0x58
 801b59e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b5a0:	f7fc f9fe 	bl	80179a0 <rcutils_format_string_limit>
 801b5a4:	4606      	mov	r6, r0
 801b5a6:	e7d6      	b.n	801b556 <rcl_expand_topic_name+0x23a>
 801b5a8:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 801b5ac:	4650      	mov	r0, sl
 801b5ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b5b0:	6014      	str	r4, [r2, #0]
 801b5b2:	250a      	movs	r5, #10
 801b5b4:	4798      	blx	r3
 801b5b6:	e702      	b.n	801b3be <rcl_expand_topic_name+0xa2>
 801b5b8:	2300      	movs	r3, #0
 801b5ba:	461e      	mov	r6, r3
 801b5bc:	e7cc      	b.n	801b558 <rcl_expand_topic_name+0x23c>
 801b5be:	bf00      	nop
 801b5c0:	0801f450 	.word	0x0801f450
 801b5c4:	0801f458 	.word	0x0801f458
 801b5c8:	0801f460 	.word	0x0801f460
 801b5cc:	0801f448 	.word	0x0801f448
 801b5d0:	0801e5a8 	.word	0x0801e5a8
 801b5d4:	0801ea48 	.word	0x0801ea48
 801b5d8:	0801e5b8 	.word	0x0801e5b8

0801b5dc <rcl_get_default_topic_name_substitutions>:
 801b5dc:	2800      	cmp	r0, #0
 801b5de:	bf0c      	ite	eq
 801b5e0:	200b      	moveq	r0, #11
 801b5e2:	2000      	movne	r0, #0
 801b5e4:	4770      	bx	lr
 801b5e6:	bf00      	nop

0801b5e8 <rcl_get_zero_initialized_guard_condition>:
 801b5e8:	4a03      	ldr	r2, [pc, #12]	; (801b5f8 <rcl_get_zero_initialized_guard_condition+0x10>)
 801b5ea:	4603      	mov	r3, r0
 801b5ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b5f0:	e883 0003 	stmia.w	r3, {r0, r1}
 801b5f4:	4618      	mov	r0, r3
 801b5f6:	4770      	bx	lr
 801b5f8:	0801f46c 	.word	0x0801f46c

0801b5fc <rcl_guard_condition_init>:
 801b5fc:	b082      	sub	sp, #8
 801b5fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b600:	b087      	sub	sp, #28
 801b602:	4604      	mov	r4, r0
 801b604:	460d      	mov	r5, r1
 801b606:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 801b60a:	f10d 0c04 	add.w	ip, sp, #4
 801b60e:	e9ce 2300 	strd	r2, r3, [lr]
 801b612:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b616:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b61a:	f8de 3000 	ldr.w	r3, [lr]
 801b61e:	a801      	add	r0, sp, #4
 801b620:	f8cc 3000 	str.w	r3, [ip]
 801b624:	f7f2 fb10 	bl	800dc48 <rcutils_allocator_is_valid>
 801b628:	b354      	cbz	r4, 801b680 <rcl_guard_condition_init+0x84>
 801b62a:	f080 0301 	eor.w	r3, r0, #1
 801b62e:	b2db      	uxtb	r3, r3
 801b630:	bb33      	cbnz	r3, 801b680 <rcl_guard_condition_init+0x84>
 801b632:	6866      	ldr	r6, [r4, #4]
 801b634:	b9ee      	cbnz	r6, 801b672 <rcl_guard_condition_init+0x76>
 801b636:	b31d      	cbz	r5, 801b680 <rcl_guard_condition_init+0x84>
 801b638:	4628      	mov	r0, r5
 801b63a:	f7f8 ffa5 	bl	8014588 <rcl_context_is_valid>
 801b63e:	b308      	cbz	r0, 801b684 <rcl_guard_condition_init+0x88>
 801b640:	9b01      	ldr	r3, [sp, #4]
 801b642:	201c      	movs	r0, #28
 801b644:	9905      	ldr	r1, [sp, #20]
 801b646:	4798      	blx	r3
 801b648:	4607      	mov	r7, r0
 801b64a:	6060      	str	r0, [r4, #4]
 801b64c:	b310      	cbz	r0, 801b694 <rcl_guard_condition_init+0x98>
 801b64e:	6828      	ldr	r0, [r5, #0]
 801b650:	3028      	adds	r0, #40	; 0x28
 801b652:	f000 fbbb 	bl	801bdcc <rmw_create_guard_condition>
 801b656:	6038      	str	r0, [r7, #0]
 801b658:	6860      	ldr	r0, [r4, #4]
 801b65a:	6807      	ldr	r7, [r0, #0]
 801b65c:	b1a7      	cbz	r7, 801b688 <rcl_guard_condition_init+0x8c>
 801b65e:	2301      	movs	r3, #1
 801b660:	ac01      	add	r4, sp, #4
 801b662:	f100 0708 	add.w	r7, r0, #8
 801b666:	7103      	strb	r3, [r0, #4]
 801b668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b66a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801b66c:	6823      	ldr	r3, [r4, #0]
 801b66e:	603b      	str	r3, [r7, #0]
 801b670:	e000      	b.n	801b674 <rcl_guard_condition_init+0x78>
 801b672:	2664      	movs	r6, #100	; 0x64
 801b674:	4630      	mov	r0, r6
 801b676:	b007      	add	sp, #28
 801b678:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801b67c:	b002      	add	sp, #8
 801b67e:	4770      	bx	lr
 801b680:	260b      	movs	r6, #11
 801b682:	e7f7      	b.n	801b674 <rcl_guard_condition_init+0x78>
 801b684:	2665      	movs	r6, #101	; 0x65
 801b686:	e7f5      	b.n	801b674 <rcl_guard_condition_init+0x78>
 801b688:	9b02      	ldr	r3, [sp, #8]
 801b68a:	2601      	movs	r6, #1
 801b68c:	9905      	ldr	r1, [sp, #20]
 801b68e:	4798      	blx	r3
 801b690:	6067      	str	r7, [r4, #4]
 801b692:	e7ef      	b.n	801b674 <rcl_guard_condition_init+0x78>
 801b694:	260a      	movs	r6, #10
 801b696:	e7ed      	b.n	801b674 <rcl_guard_condition_init+0x78>

0801b698 <rcl_guard_condition_init_from_rmw>:
 801b698:	b082      	sub	sp, #8
 801b69a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b69e:	b086      	sub	sp, #24
 801b6a0:	4604      	mov	r4, r0
 801b6a2:	460e      	mov	r6, r1
 801b6a4:	4615      	mov	r5, r2
 801b6a6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801b6aa:	f10d 0e04 	add.w	lr, sp, #4
 801b6ae:	f84c 3f04 	str.w	r3, [ip, #4]!
 801b6b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b6b6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801b6ba:	f8dc 3000 	ldr.w	r3, [ip]
 801b6be:	a801      	add	r0, sp, #4
 801b6c0:	f8ce 3000 	str.w	r3, [lr]
 801b6c4:	f7f2 fac0 	bl	800dc48 <rcutils_allocator_is_valid>
 801b6c8:	f080 0301 	eor.w	r3, r0, #1
 801b6cc:	b2db      	uxtb	r3, r3
 801b6ce:	bb3b      	cbnz	r3, 801b720 <rcl_guard_condition_init_from_rmw+0x88>
 801b6d0:	b334      	cbz	r4, 801b720 <rcl_guard_condition_init_from_rmw+0x88>
 801b6d2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801b6d6:	f1b8 0f00 	cmp.w	r8, #0
 801b6da:	d11a      	bne.n	801b712 <rcl_guard_condition_init_from_rmw+0x7a>
 801b6dc:	b305      	cbz	r5, 801b720 <rcl_guard_condition_init_from_rmw+0x88>
 801b6de:	4628      	mov	r0, r5
 801b6e0:	f7f8 ff52 	bl	8014588 <rcl_context_is_valid>
 801b6e4:	b1f0      	cbz	r0, 801b724 <rcl_guard_condition_init_from_rmw+0x8c>
 801b6e6:	9b01      	ldr	r3, [sp, #4]
 801b6e8:	201c      	movs	r0, #28
 801b6ea:	9905      	ldr	r1, [sp, #20]
 801b6ec:	4798      	blx	r3
 801b6ee:	4607      	mov	r7, r0
 801b6f0:	6060      	str	r0, [r4, #4]
 801b6f2:	b320      	cbz	r0, 801b73e <rcl_guard_condition_init_from_rmw+0xa6>
 801b6f4:	b1c6      	cbz	r6, 801b728 <rcl_guard_condition_init_from_rmw+0x90>
 801b6f6:	6006      	str	r6, [r0, #0]
 801b6f8:	f880 8004 	strb.w	r8, [r0, #4]
 801b6fc:	ac01      	add	r4, sp, #4
 801b6fe:	f107 0c08 	add.w	ip, r7, #8
 801b702:	2500      	movs	r5, #0
 801b704:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b706:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b70a:	6823      	ldr	r3, [r4, #0]
 801b70c:	f8cc 3000 	str.w	r3, [ip]
 801b710:	e000      	b.n	801b714 <rcl_guard_condition_init_from_rmw+0x7c>
 801b712:	2564      	movs	r5, #100	; 0x64
 801b714:	4628      	mov	r0, r5
 801b716:	b006      	add	sp, #24
 801b718:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b71c:	b002      	add	sp, #8
 801b71e:	4770      	bx	lr
 801b720:	250b      	movs	r5, #11
 801b722:	e7f7      	b.n	801b714 <rcl_guard_condition_init_from_rmw+0x7c>
 801b724:	2565      	movs	r5, #101	; 0x65
 801b726:	e7f5      	b.n	801b714 <rcl_guard_condition_init_from_rmw+0x7c>
 801b728:	6828      	ldr	r0, [r5, #0]
 801b72a:	3028      	adds	r0, #40	; 0x28
 801b72c:	f000 fb4e 	bl	801bdcc <rmw_create_guard_condition>
 801b730:	6038      	str	r0, [r7, #0]
 801b732:	6867      	ldr	r7, [r4, #4]
 801b734:	683e      	ldr	r6, [r7, #0]
 801b736:	b126      	cbz	r6, 801b742 <rcl_guard_condition_init_from_rmw+0xaa>
 801b738:	2301      	movs	r3, #1
 801b73a:	713b      	strb	r3, [r7, #4]
 801b73c:	e7de      	b.n	801b6fc <rcl_guard_condition_init_from_rmw+0x64>
 801b73e:	250a      	movs	r5, #10
 801b740:	e7e8      	b.n	801b714 <rcl_guard_condition_init_from_rmw+0x7c>
 801b742:	9b02      	ldr	r3, [sp, #8]
 801b744:	4638      	mov	r0, r7
 801b746:	9905      	ldr	r1, [sp, #20]
 801b748:	2501      	movs	r5, #1
 801b74a:	4798      	blx	r3
 801b74c:	6066      	str	r6, [r4, #4]
 801b74e:	e7e1      	b.n	801b714 <rcl_guard_condition_init_from_rmw+0x7c>

0801b750 <rcl_guard_condition_fini>:
 801b750:	b570      	push	{r4, r5, r6, lr}
 801b752:	b082      	sub	sp, #8
 801b754:	b1f0      	cbz	r0, 801b794 <rcl_guard_condition_fini+0x44>
 801b756:	6843      	ldr	r3, [r0, #4]
 801b758:	4604      	mov	r4, r0
 801b75a:	b163      	cbz	r3, 801b776 <rcl_guard_condition_fini+0x26>
 801b75c:	6818      	ldr	r0, [r3, #0]
 801b75e:	68de      	ldr	r6, [r3, #12]
 801b760:	6999      	ldr	r1, [r3, #24]
 801b762:	b160      	cbz	r0, 801b77e <rcl_guard_condition_fini+0x2e>
 801b764:	791d      	ldrb	r5, [r3, #4]
 801b766:	b965      	cbnz	r5, 801b782 <rcl_guard_condition_fini+0x32>
 801b768:	4618      	mov	r0, r3
 801b76a:	47b0      	blx	r6
 801b76c:	2300      	movs	r3, #0
 801b76e:	4628      	mov	r0, r5
 801b770:	6063      	str	r3, [r4, #4]
 801b772:	b002      	add	sp, #8
 801b774:	bd70      	pop	{r4, r5, r6, pc}
 801b776:	461d      	mov	r5, r3
 801b778:	4628      	mov	r0, r5
 801b77a:	b002      	add	sp, #8
 801b77c:	bd70      	pop	{r4, r5, r6, pc}
 801b77e:	4605      	mov	r5, r0
 801b780:	e7f2      	b.n	801b768 <rcl_guard_condition_fini+0x18>
 801b782:	9101      	str	r1, [sp, #4]
 801b784:	f000 fb38 	bl	801bdf8 <rmw_destroy_guard_condition>
 801b788:	1e05      	subs	r5, r0, #0
 801b78a:	6863      	ldr	r3, [r4, #4]
 801b78c:	9901      	ldr	r1, [sp, #4]
 801b78e:	bf18      	it	ne
 801b790:	2501      	movne	r5, #1
 801b792:	e7e9      	b.n	801b768 <rcl_guard_condition_fini+0x18>
 801b794:	250b      	movs	r5, #11
 801b796:	4628      	mov	r0, r5
 801b798:	b002      	add	sp, #8
 801b79a:	bd70      	pop	{r4, r5, r6, pc}

0801b79c <rcl_guard_condition_get_default_options>:
 801b79c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b79e:	b087      	sub	sp, #28
 801b7a0:	4606      	mov	r6, r0
 801b7a2:	4c0b      	ldr	r4, [pc, #44]	; (801b7d0 <rcl_guard_condition_get_default_options+0x34>)
 801b7a4:	4668      	mov	r0, sp
 801b7a6:	f7f2 fa41 	bl	800dc2c <rcutils_get_default_allocator>
 801b7aa:	46ee      	mov	lr, sp
 801b7ac:	46a4      	mov	ip, r4
 801b7ae:	4625      	mov	r5, r4
 801b7b0:	4634      	mov	r4, r6
 801b7b2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b7b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b7ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b7bc:	f8de 7000 	ldr.w	r7, [lr]
 801b7c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b7c2:	4630      	mov	r0, r6
 801b7c4:	f8cc 7000 	str.w	r7, [ip]
 801b7c8:	6027      	str	r7, [r4, #0]
 801b7ca:	b007      	add	sp, #28
 801b7cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b7ce:	bf00      	nop
 801b7d0:	20010b70 	.word	0x20010b70

0801b7d4 <rcl_trigger_guard_condition>:
 801b7d4:	b148      	cbz	r0, 801b7ea <rcl_trigger_guard_condition+0x16>
 801b7d6:	b508      	push	{r3, lr}
 801b7d8:	6843      	ldr	r3, [r0, #4]
 801b7da:	b143      	cbz	r3, 801b7ee <rcl_trigger_guard_condition+0x1a>
 801b7dc:	6818      	ldr	r0, [r3, #0]
 801b7de:	f000 fb1f 	bl	801be20 <rmw_trigger_guard_condition>
 801b7e2:	3800      	subs	r0, #0
 801b7e4:	bf18      	it	ne
 801b7e6:	2001      	movne	r0, #1
 801b7e8:	bd08      	pop	{r3, pc}
 801b7ea:	200b      	movs	r0, #11
 801b7ec:	4770      	bx	lr
 801b7ee:	200b      	movs	r0, #11
 801b7f0:	bd08      	pop	{r3, pc}
 801b7f2:	bf00      	nop

0801b7f4 <rcl_guard_condition_get_rmw_handle>:
 801b7f4:	b110      	cbz	r0, 801b7fc <rcl_guard_condition_get_rmw_handle+0x8>
 801b7f6:	6840      	ldr	r0, [r0, #4]
 801b7f8:	b100      	cbz	r0, 801b7fc <rcl_guard_condition_get_rmw_handle+0x8>
 801b7fa:	6800      	ldr	r0, [r0, #0]
 801b7fc:	4770      	bx	lr
 801b7fe:	bf00      	nop

0801b800 <rcl_validate_topic_name>:
 801b800:	2800      	cmp	r0, #0
 801b802:	f000 8089 	beq.w	801b918 <rcl_validate_topic_name+0x118>
 801b806:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b80a:	460e      	mov	r6, r1
 801b80c:	2900      	cmp	r1, #0
 801b80e:	f000 8085 	beq.w	801b91c <rcl_validate_topic_name+0x11c>
 801b812:	4604      	mov	r4, r0
 801b814:	4617      	mov	r7, r2
 801b816:	f7e4 fd73 	bl	8000300 <strlen>
 801b81a:	b1b0      	cbz	r0, 801b84a <rcl_validate_topic_name+0x4a>
 801b81c:	f894 e000 	ldrb.w	lr, [r4]
 801b820:	f8df c160 	ldr.w	ip, [pc, #352]	; 801b984 <rcl_validate_topic_name+0x184>
 801b824:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801b828:	f013 0304 	ands.w	r3, r3, #4
 801b82c:	d139      	bne.n	801b8a2 <rcl_validate_topic_name+0xa2>
 801b82e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801b832:	f814 2008 	ldrb.w	r2, [r4, r8]
 801b836:	2a2f      	cmp	r2, #47	; 0x2f
 801b838:	d10f      	bne.n	801b85a <rcl_validate_topic_name+0x5a>
 801b83a:	2202      	movs	r2, #2
 801b83c:	6032      	str	r2, [r6, #0]
 801b83e:	b3a7      	cbz	r7, 801b8aa <rcl_validate_topic_name+0xaa>
 801b840:	4618      	mov	r0, r3
 801b842:	f8c7 8000 	str.w	r8, [r7]
 801b846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b84a:	2301      	movs	r3, #1
 801b84c:	6033      	str	r3, [r6, #0]
 801b84e:	b367      	cbz	r7, 801b8aa <rcl_validate_topic_name+0xaa>
 801b850:	2300      	movs	r3, #0
 801b852:	4618      	mov	r0, r3
 801b854:	603b      	str	r3, [r7, #0]
 801b856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b85a:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 801b85e:	461d      	mov	r5, r3
 801b860:	4619      	mov	r1, r3
 801b862:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801b866:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 801b86a:	f1b9 0f09 	cmp.w	r9, #9
 801b86e:	d91f      	bls.n	801b8b0 <rcl_validate_topic_name+0xb0>
 801b870:	f022 0920 	bic.w	r9, r2, #32
 801b874:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 801b878:	f1b9 0f19 	cmp.w	r9, #25
 801b87c:	d918      	bls.n	801b8b0 <rcl_validate_topic_name+0xb0>
 801b87e:	2a5f      	cmp	r2, #95	; 0x5f
 801b880:	d024      	beq.n	801b8cc <rcl_validate_topic_name+0xcc>
 801b882:	2a2f      	cmp	r2, #47	; 0x2f
 801b884:	d058      	beq.n	801b938 <rcl_validate_topic_name+0x138>
 801b886:	2a7e      	cmp	r2, #126	; 0x7e
 801b888:	d04a      	beq.n	801b920 <rcl_validate_topic_name+0x120>
 801b88a:	2a7b      	cmp	r2, #123	; 0x7b
 801b88c:	d05b      	beq.n	801b946 <rcl_validate_topic_name+0x146>
 801b88e:	2a7d      	cmp	r2, #125	; 0x7d
 801b890:	d169      	bne.n	801b966 <rcl_validate_topic_name+0x166>
 801b892:	2d00      	cmp	r5, #0
 801b894:	d15c      	bne.n	801b950 <rcl_validate_topic_name+0x150>
 801b896:	2305      	movs	r3, #5
 801b898:	6033      	str	r3, [r6, #0]
 801b89a:	b137      	cbz	r7, 801b8aa <rcl_validate_topic_name+0xaa>
 801b89c:	2000      	movs	r0, #0
 801b89e:	6039      	str	r1, [r7, #0]
 801b8a0:	e7d9      	b.n	801b856 <rcl_validate_topic_name+0x56>
 801b8a2:	2304      	movs	r3, #4
 801b8a4:	6033      	str	r3, [r6, #0]
 801b8a6:	2f00      	cmp	r7, #0
 801b8a8:	d1d2      	bne.n	801b850 <rcl_validate_topic_name+0x50>
 801b8aa:	2000      	movs	r0, #0
 801b8ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8b0:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b8b4:	0752      	lsls	r2, r2, #29
 801b8b6:	d509      	bpl.n	801b8cc <rcl_validate_topic_name+0xcc>
 801b8b8:	2900      	cmp	r1, #0
 801b8ba:	bf0c      	ite	eq
 801b8bc:	2200      	moveq	r2, #0
 801b8be:	f005 0201 	andne.w	r2, r5, #1
 801b8c2:	b11a      	cbz	r2, 801b8cc <rcl_validate_topic_name+0xcc>
 801b8c4:	1e4d      	subs	r5, r1, #1
 801b8c6:	429d      	cmp	r5, r3
 801b8c8:	d031      	beq.n	801b92e <rcl_validate_topic_name+0x12e>
 801b8ca:	4615      	mov	r5, r2
 801b8cc:	3101      	adds	r1, #1
 801b8ce:	4288      	cmp	r0, r1
 801b8d0:	d1c7      	bne.n	801b862 <rcl_validate_topic_name+0x62>
 801b8d2:	2d00      	cmp	r5, #0
 801b8d4:	d142      	bne.n	801b95c <rcl_validate_topic_name+0x15c>
 801b8d6:	4628      	mov	r0, r5
 801b8d8:	2301      	movs	r3, #1
 801b8da:	e00c      	b.n	801b8f6 <rcl_validate_topic_name+0xf6>
 801b8dc:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 801b8e0:	d101      	bne.n	801b8e6 <rcl_validate_topic_name+0xe6>
 801b8e2:	2801      	cmp	r0, #1
 801b8e4:	d047      	beq.n	801b976 <rcl_validate_topic_name+0x176>
 801b8e6:	1c5a      	adds	r2, r3, #1
 801b8e8:	428b      	cmp	r3, r1
 801b8ea:	f100 0001 	add.w	r0, r0, #1
 801b8ee:	f104 0401 	add.w	r4, r4, #1
 801b8f2:	4613      	mov	r3, r2
 801b8f4:	d22e      	bcs.n	801b954 <rcl_validate_topic_name+0x154>
 801b8f6:	4580      	cmp	r8, r0
 801b8f8:	d0f5      	beq.n	801b8e6 <rcl_validate_topic_name+0xe6>
 801b8fa:	7822      	ldrb	r2, [r4, #0]
 801b8fc:	2a2f      	cmp	r2, #47	; 0x2f
 801b8fe:	d1ed      	bne.n	801b8dc <rcl_validate_topic_name+0xdc>
 801b900:	7862      	ldrb	r2, [r4, #1]
 801b902:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b906:	0752      	lsls	r2, r2, #29
 801b908:	d5ed      	bpl.n	801b8e6 <rcl_validate_topic_name+0xe6>
 801b90a:	2204      	movs	r2, #4
 801b90c:	6032      	str	r2, [r6, #0]
 801b90e:	2f00      	cmp	r7, #0
 801b910:	d0cb      	beq.n	801b8aa <rcl_validate_topic_name+0xaa>
 801b912:	2000      	movs	r0, #0
 801b914:	603b      	str	r3, [r7, #0]
 801b916:	e79e      	b.n	801b856 <rcl_validate_topic_name+0x56>
 801b918:	200b      	movs	r0, #11
 801b91a:	4770      	bx	lr
 801b91c:	200b      	movs	r0, #11
 801b91e:	e79a      	b.n	801b856 <rcl_validate_topic_name+0x56>
 801b920:	2900      	cmp	r1, #0
 801b922:	d0d3      	beq.n	801b8cc <rcl_validate_topic_name+0xcc>
 801b924:	2306      	movs	r3, #6
 801b926:	6033      	str	r3, [r6, #0]
 801b928:	2f00      	cmp	r7, #0
 801b92a:	d1b7      	bne.n	801b89c <rcl_validate_topic_name+0x9c>
 801b92c:	e7bd      	b.n	801b8aa <rcl_validate_topic_name+0xaa>
 801b92e:	2309      	movs	r3, #9
 801b930:	6033      	str	r3, [r6, #0]
 801b932:	2f00      	cmp	r7, #0
 801b934:	d1b2      	bne.n	801b89c <rcl_validate_topic_name+0x9c>
 801b936:	e7b8      	b.n	801b8aa <rcl_validate_topic_name+0xaa>
 801b938:	2d00      	cmp	r5, #0
 801b93a:	d0c7      	beq.n	801b8cc <rcl_validate_topic_name+0xcc>
 801b93c:	2308      	movs	r3, #8
 801b93e:	6033      	str	r3, [r6, #0]
 801b940:	2f00      	cmp	r7, #0
 801b942:	d1ab      	bne.n	801b89c <rcl_validate_topic_name+0x9c>
 801b944:	e7b1      	b.n	801b8aa <rcl_validate_topic_name+0xaa>
 801b946:	2d00      	cmp	r5, #0
 801b948:	d1f8      	bne.n	801b93c <rcl_validate_topic_name+0x13c>
 801b94a:	460b      	mov	r3, r1
 801b94c:	2501      	movs	r5, #1
 801b94e:	e7bd      	b.n	801b8cc <rcl_validate_topic_name+0xcc>
 801b950:	2500      	movs	r5, #0
 801b952:	e7bb      	b.n	801b8cc <rcl_validate_topic_name+0xcc>
 801b954:	2300      	movs	r3, #0
 801b956:	4618      	mov	r0, r3
 801b958:	6033      	str	r3, [r6, #0]
 801b95a:	e77c      	b.n	801b856 <rcl_validate_topic_name+0x56>
 801b95c:	2205      	movs	r2, #5
 801b95e:	6032      	str	r2, [r6, #0]
 801b960:	2f00      	cmp	r7, #0
 801b962:	d1d6      	bne.n	801b912 <rcl_validate_topic_name+0x112>
 801b964:	e7a1      	b.n	801b8aa <rcl_validate_topic_name+0xaa>
 801b966:	2d00      	cmp	r5, #0
 801b968:	bf14      	ite	ne
 801b96a:	2308      	movne	r3, #8
 801b96c:	2303      	moveq	r3, #3
 801b96e:	6033      	str	r3, [r6, #0]
 801b970:	2f00      	cmp	r7, #0
 801b972:	d193      	bne.n	801b89c <rcl_validate_topic_name+0x9c>
 801b974:	e799      	b.n	801b8aa <rcl_validate_topic_name+0xaa>
 801b976:	2307      	movs	r3, #7
 801b978:	6033      	str	r3, [r6, #0]
 801b97a:	2f00      	cmp	r7, #0
 801b97c:	d095      	beq.n	801b8aa <rcl_validate_topic_name+0xaa>
 801b97e:	2301      	movs	r3, #1
 801b980:	e7c7      	b.n	801b912 <rcl_validate_topic_name+0x112>
 801b982:	bf00      	nop
 801b984:	0801f630 	.word	0x0801f630

0801b988 <rcutils_split>:
 801b988:	b082      	sub	sp, #8
 801b98a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b98e:	b08d      	sub	sp, #52	; 0x34
 801b990:	ac16      	add	r4, sp, #88	; 0x58
 801b992:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801b994:	e884 000c 	stmia.w	r4, {r2, r3}
 801b998:	2f00      	cmp	r7, #0
 801b99a:	f000 80a8 	beq.w	801baee <rcutils_split+0x166>
 801b99e:	4605      	mov	r5, r0
 801b9a0:	2800      	cmp	r0, #0
 801b9a2:	d07e      	beq.n	801baa2 <rcutils_split+0x11a>
 801b9a4:	7803      	ldrb	r3, [r0, #0]
 801b9a6:	2b00      	cmp	r3, #0
 801b9a8:	d07b      	beq.n	801baa2 <rcutils_split+0x11a>
 801b9aa:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 801b9ae:	460e      	mov	r6, r1
 801b9b0:	9203      	str	r2, [sp, #12]
 801b9b2:	f107 0408 	add.w	r4, r7, #8
 801b9b6:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 801b9ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801b9be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b9c0:	4628      	mov	r0, r5
 801b9c2:	f8c4 b000 	str.w	fp, [r4]
 801b9c6:	f7e4 fc9b 	bl	8000300 <strlen>
 801b9ca:	782c      	ldrb	r4, [r5, #0]
 801b9cc:	182b      	adds	r3, r5, r0
 801b9ce:	1ba4      	subs	r4, r4, r6
 801b9d0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801b9d4:	fab4 f484 	clz	r4, r4
 801b9d8:	42b3      	cmp	r3, r6
 801b9da:	bf14      	ite	ne
 801b9dc:	4680      	movne	r8, r0
 801b9de:	f1a0 0801 	subeq.w	r8, r0, #1
 801b9e2:	2001      	movs	r0, #1
 801b9e4:	0964      	lsrs	r4, r4, #5
 801b9e6:	6038      	str	r0, [r7, #0]
 801b9e8:	4544      	cmp	r4, r8
 801b9ea:	d26b      	bcs.n	801bac4 <rcutils_split+0x13c>
 801b9ec:	192b      	adds	r3, r5, r4
 801b9ee:	eb05 0108 	add.w	r1, r5, r8
 801b9f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b9f6:	42b2      	cmp	r2, r6
 801b9f8:	d101      	bne.n	801b9fe <rcutils_split+0x76>
 801b9fa:	3001      	adds	r0, #1
 801b9fc:	6038      	str	r0, [r7, #0]
 801b9fe:	4299      	cmp	r1, r3
 801ba00:	d1f7      	bne.n	801b9f2 <rcutils_split+0x6a>
 801ba02:	9b03      	ldr	r3, [sp, #12]
 801ba04:	0080      	lsls	r0, r0, #2
 801ba06:	4659      	mov	r1, fp
 801ba08:	4798      	blx	r3
 801ba0a:	4603      	mov	r3, r0
 801ba0c:	6078      	str	r0, [r7, #4]
 801ba0e:	2800      	cmp	r0, #0
 801ba10:	d05f      	beq.n	801bad2 <rcutils_split+0x14a>
 801ba12:	f04f 0a00 	mov.w	sl, #0
 801ba16:	46a1      	mov	r9, r4
 801ba18:	e002      	b.n	801ba20 <rcutils_split+0x98>
 801ba1a:	3401      	adds	r4, #1
 801ba1c:	45a0      	cmp	r8, r4
 801ba1e:	d922      	bls.n	801ba66 <rcutils_split+0xde>
 801ba20:	5d2a      	ldrb	r2, [r5, r4]
 801ba22:	42b2      	cmp	r2, r6
 801ba24:	d1f9      	bne.n	801ba1a <rcutils_split+0x92>
 801ba26:	45a1      	cmp	r9, r4
 801ba28:	eba4 0209 	sub.w	r2, r4, r9
 801ba2c:	d032      	beq.n	801ba94 <rcutils_split+0x10c>
 801ba2e:	4659      	mov	r1, fp
 801ba30:	1c90      	adds	r0, r2, #2
 801ba32:	9302      	str	r3, [sp, #8]
 801ba34:	9b03      	ldr	r3, [sp, #12]
 801ba36:	9201      	str	r2, [sp, #4]
 801ba38:	4798      	blx	r3
 801ba3a:	9a01      	ldr	r2, [sp, #4]
 801ba3c:	9b02      	ldr	r3, [sp, #8]
 801ba3e:	1c51      	adds	r1, r2, #1
 801ba40:	687a      	ldr	r2, [r7, #4]
 801ba42:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 801ba46:	eb05 0309 	add.w	r3, r5, r9
 801ba4a:	f852 002a 	ldr.w	r0, [r2, sl, lsl #2]
 801ba4e:	2800      	cmp	r0, #0
 801ba50:	d04f      	beq.n	801baf2 <rcutils_split+0x16a>
 801ba52:	4a2b      	ldr	r2, [pc, #172]	; (801bb00 <rcutils_split+0x178>)
 801ba54:	f10a 0a01 	add.w	sl, sl, #1
 801ba58:	f000 fd92 	bl	801c580 <sniprintf>
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	3401      	adds	r4, #1
 801ba60:	45a0      	cmp	r8, r4
 801ba62:	46a1      	mov	r9, r4
 801ba64:	d8dc      	bhi.n	801ba20 <rcutils_split+0x98>
 801ba66:	45a1      	cmp	r9, r4
 801ba68:	d039      	beq.n	801bade <rcutils_split+0x156>
 801ba6a:	eba4 0409 	sub.w	r4, r4, r9
 801ba6e:	4659      	mov	r1, fp
 801ba70:	9301      	str	r3, [sp, #4]
 801ba72:	1ca0      	adds	r0, r4, #2
 801ba74:	9b03      	ldr	r3, [sp, #12]
 801ba76:	4798      	blx	r3
 801ba78:	9b01      	ldr	r3, [sp, #4]
 801ba7a:	4a21      	ldr	r2, [pc, #132]	; (801bb00 <rcutils_split+0x178>)
 801ba7c:	1c61      	adds	r1, r4, #1
 801ba7e:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 801ba82:	eb05 0309 	add.w	r3, r5, r9
 801ba86:	6878      	ldr	r0, [r7, #4]
 801ba88:	2500      	movs	r5, #0
 801ba8a:	f850 002a 	ldr.w	r0, [r0, sl, lsl #2]
 801ba8e:	f000 fd77 	bl	801c580 <sniprintf>
 801ba92:	e011      	b.n	801bab8 <rcutils_split+0x130>
 801ba94:	683a      	ldr	r2, [r7, #0]
 801ba96:	2100      	movs	r1, #0
 801ba98:	3a01      	subs	r2, #1
 801ba9a:	603a      	str	r2, [r7, #0]
 801ba9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801baa0:	e7dd      	b.n	801ba5e <rcutils_split+0xd6>
 801baa2:	ac04      	add	r4, sp, #16
 801baa4:	a804      	add	r0, sp, #16
 801baa6:	f000 f82d 	bl	801bb04 <rcutils_get_zero_initialized_string_array>
 801baaa:	2500      	movs	r5, #0
 801baac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801baae:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801bab0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801bab4:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 801bab8:	4628      	mov	r0, r5
 801baba:	b00d      	add	sp, #52	; 0x34
 801babc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bac0:	b002      	add	sp, #8
 801bac2:	4770      	bx	lr
 801bac4:	9b03      	ldr	r3, [sp, #12]
 801bac6:	4659      	mov	r1, fp
 801bac8:	2004      	movs	r0, #4
 801baca:	4798      	blx	r3
 801bacc:	4603      	mov	r3, r0
 801bace:	6078      	str	r0, [r7, #4]
 801bad0:	b928      	cbnz	r0, 801bade <rcutils_split+0x156>
 801bad2:	4638      	mov	r0, r7
 801bad4:	f000 f834 	bl	801bb40 <rcutils_string_array_fini>
 801bad8:	b970      	cbnz	r0, 801baf8 <rcutils_split+0x170>
 801bada:	2502      	movs	r5, #2
 801badc:	e7ec      	b.n	801bab8 <rcutils_split+0x130>
 801bade:	683a      	ldr	r2, [r7, #0]
 801bae0:	2100      	movs	r1, #0
 801bae2:	3a01      	subs	r2, #1
 801bae4:	460d      	mov	r5, r1
 801bae6:	603a      	str	r2, [r7, #0]
 801bae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 801baec:	e7e4      	b.n	801bab8 <rcutils_split+0x130>
 801baee:	250b      	movs	r5, #11
 801baf0:	e7e2      	b.n	801bab8 <rcutils_split+0x130>
 801baf2:	f8c7 a000 	str.w	sl, [r7]
 801baf6:	e7ec      	b.n	801bad2 <rcutils_split+0x14a>
 801baf8:	2502      	movs	r5, #2
 801bafa:	f7f2 f8c9 	bl	800dc90 <rcutils_reset_error>
 801bafe:	e7db      	b.n	801bab8 <rcutils_split+0x130>
 801bb00:	0801e5ac 	.word	0x0801e5ac

0801bb04 <rcutils_get_zero_initialized_string_array>:
 801bb04:	b570      	push	{r4, r5, r6, lr}
 801bb06:	b086      	sub	sp, #24
 801bb08:	4606      	mov	r6, r0
 801bb0a:	4c0c      	ldr	r4, [pc, #48]	; (801bb3c <rcutils_get_zero_initialized_string_array+0x38>)
 801bb0c:	4668      	mov	r0, sp
 801bb0e:	f7f2 f861 	bl	800dbd4 <rcutils_get_zero_initialized_allocator>
 801bb12:	46ee      	mov	lr, sp
 801bb14:	f104 0508 	add.w	r5, r4, #8
 801bb18:	46a4      	mov	ip, r4
 801bb1a:	4634      	mov	r4, r6
 801bb1c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801bb20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801bb22:	f8de 3000 	ldr.w	r3, [lr]
 801bb26:	602b      	str	r3, [r5, #0]
 801bb28:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801bb2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801bb2e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801bb32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801bb36:	4630      	mov	r0, r6
 801bb38:	b006      	add	sp, #24
 801bb3a:	bd70      	pop	{r4, r5, r6, pc}
 801bb3c:	20010b84 	.word	0x20010b84

0801bb40 <rcutils_string_array_fini>:
 801bb40:	b328      	cbz	r0, 801bb8e <rcutils_string_array_fini+0x4e>
 801bb42:	b570      	push	{r4, r5, r6, lr}
 801bb44:	4604      	mov	r4, r0
 801bb46:	6840      	ldr	r0, [r0, #4]
 801bb48:	b1e0      	cbz	r0, 801bb84 <rcutils_string_array_fini+0x44>
 801bb4a:	f104 0008 	add.w	r0, r4, #8
 801bb4e:	f7f2 f87b 	bl	800dc48 <rcutils_allocator_is_valid>
 801bb52:	b1c0      	cbz	r0, 801bb86 <rcutils_string_array_fini+0x46>
 801bb54:	6823      	ldr	r3, [r4, #0]
 801bb56:	b1c3      	cbz	r3, 801bb8a <rcutils_string_array_fini+0x4a>
 801bb58:	2500      	movs	r5, #0
 801bb5a:	6860      	ldr	r0, [r4, #4]
 801bb5c:	462e      	mov	r6, r5
 801bb5e:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 801bb62:	68e3      	ldr	r3, [r4, #12]
 801bb64:	69a1      	ldr	r1, [r4, #24]
 801bb66:	4798      	blx	r3
 801bb68:	e9d4 3000 	ldrd	r3, r0, [r4]
 801bb6c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 801bb70:	3501      	adds	r5, #1
 801bb72:	429d      	cmp	r5, r3
 801bb74:	d3f3      	bcc.n	801bb5e <rcutils_string_array_fini+0x1e>
 801bb76:	68e3      	ldr	r3, [r4, #12]
 801bb78:	69a1      	ldr	r1, [r4, #24]
 801bb7a:	4798      	blx	r3
 801bb7c:	2300      	movs	r3, #0
 801bb7e:	4618      	mov	r0, r3
 801bb80:	e9c4 3300 	strd	r3, r3, [r4]
 801bb84:	bd70      	pop	{r4, r5, r6, pc}
 801bb86:	200b      	movs	r0, #11
 801bb88:	bd70      	pop	{r4, r5, r6, pc}
 801bb8a:	6860      	ldr	r0, [r4, #4]
 801bb8c:	e7f3      	b.n	801bb76 <rcutils_string_array_fini+0x36>
 801bb8e:	200b      	movs	r0, #11
 801bb90:	4770      	bx	lr
 801bb92:	bf00      	nop

0801bb94 <rmw_get_zero_initialized_discovery_options>:
 801bb94:	b510      	push	{r4, lr}
 801bb96:	4604      	mov	r4, r0
 801bb98:	2220      	movs	r2, #32
 801bb9a:	2100      	movs	r1, #0
 801bb9c:	f000 fdca 	bl	801c734 <memset>
 801bba0:	4620      	mov	r0, r4
 801bba2:	bd10      	pop	{r4, pc}

0801bba4 <rmw_discovery_options_init>:
 801bba4:	b570      	push	{r4, r5, r6, lr}
 801bba6:	b318      	cbz	r0, 801bbf0 <rmw_discovery_options_init+0x4c>
 801bba8:	4604      	mov	r4, r0
 801bbaa:	4610      	mov	r0, r2
 801bbac:	460e      	mov	r6, r1
 801bbae:	4615      	mov	r5, r2
 801bbb0:	f7f2 f84a 	bl	800dc48 <rcutils_allocator_is_valid>
 801bbb4:	b1e0      	cbz	r0, 801bbf0 <rmw_discovery_options_init+0x4c>
 801bbb6:	68a3      	ldr	r3, [r4, #8]
 801bbb8:	b9d3      	cbnz	r3, 801bbf0 <rmw_discovery_options_init+0x4c>
 801bbba:	6863      	ldr	r3, [r4, #4]
 801bbbc:	b9c3      	cbnz	r3, 801bbf0 <rmw_discovery_options_init+0x4c>
 801bbbe:	7823      	ldrb	r3, [r4, #0]
 801bbc0:	b90b      	cbnz	r3, 801bbc6 <rmw_discovery_options_init+0x22>
 801bbc2:	2302      	movs	r3, #2
 801bbc4:	7023      	strb	r3, [r4, #0]
 801bbc6:	b1a6      	cbz	r6, 801bbf2 <rmw_discovery_options_init+0x4e>
 801bbc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 801bbcc:	4630      	mov	r0, r6
 801bbce:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
 801bbd2:	4798      	blx	r3
 801bbd4:	6060      	str	r0, [r4, #4]
 801bbd6:	b170      	cbz	r0, 801bbf6 <rmw_discovery_options_init+0x52>
 801bbd8:	f104 0c0c 	add.w	ip, r4, #12
 801bbdc:	60a6      	str	r6, [r4, #8]
 801bbde:	2600      	movs	r6, #0
 801bbe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bbe2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bbe6:	682b      	ldr	r3, [r5, #0]
 801bbe8:	4630      	mov	r0, r6
 801bbea:	f8cc 3000 	str.w	r3, [ip]
 801bbee:	bd70      	pop	{r4, r5, r6, pc}
 801bbf0:	260b      	movs	r6, #11
 801bbf2:	4630      	mov	r0, r6
 801bbf4:	bd70      	pop	{r4, r5, r6, pc}
 801bbf6:	260a      	movs	r6, #10
 801bbf8:	e7fb      	b.n	801bbf2 <rmw_discovery_options_init+0x4e>
 801bbfa:	bf00      	nop

0801bbfc <on_status>:
 801bbfc:	b082      	sub	sp, #8
 801bbfe:	b002      	add	sp, #8
 801bc00:	4770      	bx	lr
 801bc02:	bf00      	nop

0801bc04 <on_topic>:
 801bc04:	4a23      	ldr	r2, [pc, #140]	; (801bc94 <on_topic+0x90>)
 801bc06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc0a:	6812      	ldr	r2, [r2, #0]
 801bc0c:	b094      	sub	sp, #80	; 0x50
 801bc0e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801bc10:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801bc14:	9113      	str	r1, [sp, #76]	; 0x4c
 801bc16:	9312      	str	r3, [sp, #72]	; 0x48
 801bc18:	b3c2      	cbz	r2, 801bc8c <on_topic+0x88>
 801bc1a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801bc1e:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801bc22:	e001      	b.n	801bc28 <on_topic+0x24>
 801bc24:	6852      	ldr	r2, [r2, #4]
 801bc26:	b38a      	cbz	r2, 801bc8c <on_topic+0x88>
 801bc28:	6894      	ldr	r4, [r2, #8]
 801bc2a:	8aa3      	ldrh	r3, [r4, #20]
 801bc2c:	428b      	cmp	r3, r1
 801bc2e:	d1f9      	bne.n	801bc24 <on_topic+0x20>
 801bc30:	7da3      	ldrb	r3, [r4, #22]
 801bc32:	4283      	cmp	r3, r0
 801bc34:	d1f6      	bne.n	801bc24 <on_topic+0x20>
 801bc36:	2248      	movs	r2, #72	; 0x48
 801bc38:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801bc3c:	4668      	mov	r0, sp
 801bc3e:	f000 feaa 	bl	801c996 <memcpy>
 801bc42:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801bc46:	4620      	mov	r0, r4
 801bc48:	cb0c      	ldmia	r3, {r2, r3}
 801bc4a:	f7f2 fc39 	bl	800e4c0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801bc4e:	4607      	mov	r7, r0
 801bc50:	b1e0      	cbz	r0, 801bc8c <on_topic+0x88>
 801bc52:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801bc56:	462a      	mov	r2, r5
 801bc58:	4630      	mov	r0, r6
 801bc5a:	f108 0110 	add.w	r1, r8, #16
 801bc5e:	f7f3 f8f5 	bl	800ee4c <ucdr_deserialize_array_uint8_t>
 801bc62:	b930      	cbnz	r0, 801bc72 <on_topic+0x6e>
 801bc64:	4639      	mov	r1, r7
 801bc66:	480c      	ldr	r0, [pc, #48]	; (801bc98 <on_topic+0x94>)
 801bc68:	b014      	add	sp, #80	; 0x50
 801bc6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bc6e:	f7fc bb59 	b.w	8018324 <put_memory>
 801bc72:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801bc76:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801bc7a:	f7fd fd7f 	bl	801977c <rmw_uros_epoch_nanos>
 801bc7e:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 801bc82:	2305      	movs	r3, #5
 801bc84:	e942 0102 	strd	r0, r1, [r2, #-8]
 801bc88:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801bc8c:	b014      	add	sp, #80	; 0x50
 801bc8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc92:	bf00      	nop
 801bc94:	200103a4 	.word	0x200103a4
 801bc98:	20010394 	.word	0x20010394

0801bc9c <on_request>:
 801bc9c:	4824      	ldr	r0, [pc, #144]	; (801bd30 <on_request+0x94>)
 801bc9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bca2:	6800      	ldr	r0, [r0, #0]
 801bca4:	b094      	sub	sp, #80	; 0x50
 801bca6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801bca8:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801bcac:	9113      	str	r1, [sp, #76]	; 0x4c
 801bcae:	2800      	cmp	r0, #0
 801bcb0:	d03b      	beq.n	801bd2a <on_request+0x8e>
 801bcb2:	461d      	mov	r5, r3
 801bcb4:	e001      	b.n	801bcba <on_request+0x1e>
 801bcb6:	6840      	ldr	r0, [r0, #4]
 801bcb8:	b3b8      	cbz	r0, 801bd2a <on_request+0x8e>
 801bcba:	6884      	ldr	r4, [r0, #8]
 801bcbc:	8b21      	ldrh	r1, [r4, #24]
 801bcbe:	4291      	cmp	r1, r2
 801bcc0:	d1f9      	bne.n	801bcb6 <on_request+0x1a>
 801bcc2:	2248      	movs	r2, #72	; 0x48
 801bcc4:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801bcc8:	4668      	mov	r0, sp
 801bcca:	f000 fe64 	bl	801c996 <memcpy>
 801bcce:	f104 0320 	add.w	r3, r4, #32
 801bcd2:	4620      	mov	r0, r4
 801bcd4:	cb0c      	ldmia	r3, {r2, r3}
 801bcd6:	f7f2 fbf3 	bl	800e4c0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801bcda:	4680      	mov	r8, r0
 801bcdc:	b328      	cbz	r0, 801bd2a <on_request+0x8e>
 801bcde:	4630      	mov	r0, r6
 801bce0:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801bce4:	463a      	mov	r2, r7
 801bce6:	f106 0110 	add.w	r1, r6, #16
 801bcea:	f7f3 f8af 	bl	800ee4c <ucdr_deserialize_array_uint8_t>
 801bcee:	b930      	cbnz	r0, 801bcfe <on_request+0x62>
 801bcf0:	4641      	mov	r1, r8
 801bcf2:	4810      	ldr	r0, [pc, #64]	; (801bd34 <on_request+0x98>)
 801bcf4:	b014      	add	sp, #80	; 0x50
 801bcf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bcfa:	f7fc bb13 	b.w	8018324 <put_memory>
 801bcfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801bd00:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 801bd04:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801bd08:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801bd0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801bd10:	e895 0003 	ldmia.w	r5, {r0, r1}
 801bd14:	e88c 0003 	stmia.w	ip, {r0, r1}
 801bd18:	f7fd fd30 	bl	801977c <rmw_uros_epoch_nanos>
 801bd1c:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801bd20:	2303      	movs	r3, #3
 801bd22:	e942 0102 	strd	r0, r1, [r2, #-8]
 801bd26:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801bd2a:	b014      	add	sp, #80	; 0x50
 801bd2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd30:	20010374 	.word	0x20010374
 801bd34:	20010394 	.word	0x20010394

0801bd38 <on_reply>:
 801bd38:	4822      	ldr	r0, [pc, #136]	; (801bdc4 <on_reply+0x8c>)
 801bd3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bd3e:	6800      	ldr	r0, [r0, #0]
 801bd40:	b094      	sub	sp, #80	; 0x50
 801bd42:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801bd44:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801bd48:	9113      	str	r1, [sp, #76]	; 0x4c
 801bd4a:	b3b8      	cbz	r0, 801bdbc <on_reply+0x84>
 801bd4c:	461d      	mov	r5, r3
 801bd4e:	e001      	b.n	801bd54 <on_reply+0x1c>
 801bd50:	6840      	ldr	r0, [r0, #4]
 801bd52:	b398      	cbz	r0, 801bdbc <on_reply+0x84>
 801bd54:	6884      	ldr	r4, [r0, #8]
 801bd56:	8b21      	ldrh	r1, [r4, #24]
 801bd58:	4291      	cmp	r1, r2
 801bd5a:	d1f9      	bne.n	801bd50 <on_reply+0x18>
 801bd5c:	2248      	movs	r2, #72	; 0x48
 801bd5e:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801bd62:	4668      	mov	r0, sp
 801bd64:	f000 fe17 	bl	801c996 <memcpy>
 801bd68:	f104 0320 	add.w	r3, r4, #32
 801bd6c:	4620      	mov	r0, r4
 801bd6e:	cb0c      	ldmia	r3, {r2, r3}
 801bd70:	f7f2 fba6 	bl	800e4c0 <rmw_uxrce_get_static_input_buffer_for_entity>
 801bd74:	4680      	mov	r8, r0
 801bd76:	b308      	cbz	r0, 801bdbc <on_reply+0x84>
 801bd78:	4630      	mov	r0, r6
 801bd7a:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801bd7e:	463a      	mov	r2, r7
 801bd80:	f106 0110 	add.w	r1, r6, #16
 801bd84:	f7f3 f862 	bl	800ee4c <ucdr_deserialize_array_uint8_t>
 801bd88:	b930      	cbnz	r0, 801bd98 <on_reply+0x60>
 801bd8a:	4641      	mov	r1, r8
 801bd8c:	480e      	ldr	r0, [pc, #56]	; (801bdc8 <on_reply+0x90>)
 801bd8e:	b014      	add	sp, #80	; 0x50
 801bd90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bd94:	f7fc bac6 	b.w	8018324 <put_memory>
 801bd98:	2200      	movs	r2, #0
 801bd9a:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801bd9e:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801bda2:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 801bda6:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 801bdaa:	f7fd fce7 	bl	801977c <rmw_uros_epoch_nanos>
 801bdae:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801bdb2:	2304      	movs	r3, #4
 801bdb4:	e942 0102 	strd	r0, r1, [r2, #-8]
 801bdb8:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801bdbc:	b014      	add	sp, #80	; 0x50
 801bdbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bdc2:	bf00      	nop
 801bdc4:	2000b9c0 	.word	0x2000b9c0
 801bdc8:	20010394 	.word	0x20010394

0801bdcc <rmw_create_guard_condition>:
 801bdcc:	b538      	push	{r3, r4, r5, lr}
 801bdce:	4605      	mov	r5, r0
 801bdd0:	4808      	ldr	r0, [pc, #32]	; (801bdf4 <rmw_create_guard_condition+0x28>)
 801bdd2:	f7fc fa97 	bl	8018304 <get_memory>
 801bdd6:	4603      	mov	r3, r0
 801bdd8:	b148      	cbz	r0, 801bdee <rmw_create_guard_condition+0x22>
 801bdda:	6884      	ldr	r4, [r0, #8]
 801bddc:	2300      	movs	r3, #0
 801bdde:	61e5      	str	r5, [r4, #28]
 801bde0:	7423      	strb	r3, [r4, #16]
 801bde2:	f7fc fb15 	bl	8018410 <rmw_get_implementation_identifier>
 801bde6:	f104 0314 	add.w	r3, r4, #20
 801bdea:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801bdee:	4618      	mov	r0, r3
 801bdf0:	bd38      	pop	{r3, r4, r5, pc}
 801bdf2:	bf00      	nop
 801bdf4:	20010334 	.word	0x20010334

0801bdf8 <rmw_destroy_guard_condition>:
 801bdf8:	b508      	push	{r3, lr}
 801bdfa:	4b08      	ldr	r3, [pc, #32]	; (801be1c <rmw_destroy_guard_condition+0x24>)
 801bdfc:	6819      	ldr	r1, [r3, #0]
 801bdfe:	b911      	cbnz	r1, 801be06 <rmw_destroy_guard_condition+0xe>
 801be00:	e00a      	b.n	801be18 <rmw_destroy_guard_condition+0x20>
 801be02:	6849      	ldr	r1, [r1, #4]
 801be04:	b141      	cbz	r1, 801be18 <rmw_destroy_guard_condition+0x20>
 801be06:	688b      	ldr	r3, [r1, #8]
 801be08:	3314      	adds	r3, #20
 801be0a:	4298      	cmp	r0, r3
 801be0c:	d1f9      	bne.n	801be02 <rmw_destroy_guard_condition+0xa>
 801be0e:	4803      	ldr	r0, [pc, #12]	; (801be1c <rmw_destroy_guard_condition+0x24>)
 801be10:	f7fc fa88 	bl	8018324 <put_memory>
 801be14:	2000      	movs	r0, #0
 801be16:	bd08      	pop	{r3, pc}
 801be18:	2001      	movs	r0, #1
 801be1a:	bd08      	pop	{r3, pc}
 801be1c:	20010334 	.word	0x20010334

0801be20 <rmw_trigger_guard_condition>:
 801be20:	b160      	cbz	r0, 801be3c <rmw_trigger_guard_condition+0x1c>
 801be22:	b510      	push	{r4, lr}
 801be24:	4604      	mov	r4, r0
 801be26:	6800      	ldr	r0, [r0, #0]
 801be28:	f7f2 fd5e 	bl	800e8e8 <is_uxrce_rmw_identifier_valid>
 801be2c:	b908      	cbnz	r0, 801be32 <rmw_trigger_guard_condition+0x12>
 801be2e:	2001      	movs	r0, #1
 801be30:	bd10      	pop	{r4, pc}
 801be32:	6863      	ldr	r3, [r4, #4]
 801be34:	2201      	movs	r2, #1
 801be36:	2000      	movs	r0, #0
 801be38:	741a      	strb	r2, [r3, #16]
 801be3a:	bd10      	pop	{r4, pc}
 801be3c:	2001      	movs	r0, #1
 801be3e:	4770      	bx	lr

0801be40 <expf>:
 801be40:	ee10 2a10 	vmov	r2, s0
 801be44:	f240 412a 	movw	r1, #1066	; 0x42a
 801be48:	f3c2 530a 	ubfx	r3, r2, #20, #11
 801be4c:	428b      	cmp	r3, r1
 801be4e:	b430      	push	{r4, r5}
 801be50:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801be54:	d92a      	bls.n	801beac <expf+0x6c>
 801be56:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 801be5a:	d058      	beq.n	801bf0e <expf+0xce>
 801be5c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801be60:	d303      	bcc.n	801be6a <expf+0x2a>
 801be62:	ee30 0a00 	vadd.f32	s0, s0, s0
 801be66:	bc30      	pop	{r4, r5}
 801be68:	4770      	bx	lr
 801be6a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801bf14 <expf+0xd4>
 801be6e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801be72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be76:	dd03      	ble.n	801be80 <expf+0x40>
 801be78:	bc30      	pop	{r4, r5}
 801be7a:	2000      	movs	r0, #0
 801be7c:	f000 b876 	b.w	801bf6c <__math_oflowf>
 801be80:	eddf 7a25 	vldr	s15, [pc, #148]	; 801bf18 <expf+0xd8>
 801be84:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801be88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be8c:	d503      	bpl.n	801be96 <expf+0x56>
 801be8e:	bc30      	pop	{r4, r5}
 801be90:	2000      	movs	r0, #0
 801be92:	f000 b85f 	b.w	801bf54 <__math_uflowf>
 801be96:	eddf 7a21 	vldr	s15, [pc, #132]	; 801bf1c <expf+0xdc>
 801be9a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801be9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bea2:	d503      	bpl.n	801beac <expf+0x6c>
 801bea4:	bc30      	pop	{r4, r5}
 801bea6:	2000      	movs	r0, #0
 801bea8:	f000 b85a 	b.w	801bf60 <__math_may_uflowf>
 801beac:	4b1c      	ldr	r3, [pc, #112]	; (801bf20 <expf+0xe0>)
 801beae:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801beb2:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 801beb6:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 801beba:	eeb0 7b44 	vmov.f64	d7, d4
 801bebe:	eea5 7b06 	vfma.f64	d7, d5, d6
 801bec2:	ee17 0a10 	vmov	r0, s14
 801bec6:	ee37 7b44 	vsub.f64	d7, d7, d4
 801beca:	f000 021f 	and.w	r2, r0, #31
 801bece:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801bed2:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 801bed6:	ee27 4b07 	vmul.f64	d4, d7, d7
 801beda:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 801bede:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 801bee2:	eea5 6b07 	vfma.f64	d6, d5, d7
 801bee6:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 801beea:	684d      	ldr	r5, [r1, #4]
 801beec:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 801bef0:	2100      	movs	r1, #0
 801bef2:	190a      	adds	r2, r1, r4
 801bef4:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 801bef8:	eea5 0b07 	vfma.f64	d0, d5, d7
 801befc:	ec43 2b17 	vmov	d7, r2, r3
 801bf00:	eea6 0b04 	vfma.f64	d0, d6, d4
 801bf04:	ee20 0b07 	vmul.f64	d0, d0, d7
 801bf08:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801bf0c:	e7ab      	b.n	801be66 <expf+0x26>
 801bf0e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 801bf24 <expf+0xe4>
 801bf12:	e7a8      	b.n	801be66 <expf+0x26>
 801bf14:	42b17217 	.word	0x42b17217
 801bf18:	c2cff1b4 	.word	0xc2cff1b4
 801bf1c:	c2ce8ecf 	.word	0xc2ce8ecf
 801bf20:	0801f478 	.word	0x0801f478
 801bf24:	00000000 	.word	0x00000000

0801bf28 <with_errnof>:
 801bf28:	b513      	push	{r0, r1, r4, lr}
 801bf2a:	4604      	mov	r4, r0
 801bf2c:	ed8d 0a01 	vstr	s0, [sp, #4]
 801bf30:	f000 fcfc 	bl	801c92c <__errno>
 801bf34:	ed9d 0a01 	vldr	s0, [sp, #4]
 801bf38:	6004      	str	r4, [r0, #0]
 801bf3a:	b002      	add	sp, #8
 801bf3c:	bd10      	pop	{r4, pc}

0801bf3e <xflowf>:
 801bf3e:	b130      	cbz	r0, 801bf4e <xflowf+0x10>
 801bf40:	eef1 7a40 	vneg.f32	s15, s0
 801bf44:	ee27 0a80 	vmul.f32	s0, s15, s0
 801bf48:	2022      	movs	r0, #34	; 0x22
 801bf4a:	f7ff bfed 	b.w	801bf28 <with_errnof>
 801bf4e:	eef0 7a40 	vmov.f32	s15, s0
 801bf52:	e7f7      	b.n	801bf44 <xflowf+0x6>

0801bf54 <__math_uflowf>:
 801bf54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801bf5c <__math_uflowf+0x8>
 801bf58:	f7ff bff1 	b.w	801bf3e <xflowf>
 801bf5c:	10000000 	.word	0x10000000

0801bf60 <__math_may_uflowf>:
 801bf60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801bf68 <__math_may_uflowf+0x8>
 801bf64:	f7ff bfeb 	b.w	801bf3e <xflowf>
 801bf68:	1a200000 	.word	0x1a200000

0801bf6c <__math_oflowf>:
 801bf6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801bf74 <__math_oflowf+0x8>
 801bf70:	f7ff bfe5 	b.w	801bf3e <xflowf>
 801bf74:	70000000 	.word	0x70000000

0801bf78 <calloc>:
 801bf78:	4b02      	ldr	r3, [pc, #8]	; (801bf84 <calloc+0xc>)
 801bf7a:	460a      	mov	r2, r1
 801bf7c:	4601      	mov	r1, r0
 801bf7e:	6818      	ldr	r0, [r3, #0]
 801bf80:	f000 b802 	b.w	801bf88 <_calloc_r>
 801bf84:	200021d8 	.word	0x200021d8

0801bf88 <_calloc_r>:
 801bf88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bf8a:	fba1 2402 	umull	r2, r4, r1, r2
 801bf8e:	b94c      	cbnz	r4, 801bfa4 <_calloc_r+0x1c>
 801bf90:	4611      	mov	r1, r2
 801bf92:	9201      	str	r2, [sp, #4]
 801bf94:	f000 f886 	bl	801c0a4 <_malloc_r>
 801bf98:	9a01      	ldr	r2, [sp, #4]
 801bf9a:	4605      	mov	r5, r0
 801bf9c:	b930      	cbnz	r0, 801bfac <_calloc_r+0x24>
 801bf9e:	4628      	mov	r0, r5
 801bfa0:	b003      	add	sp, #12
 801bfa2:	bd30      	pop	{r4, r5, pc}
 801bfa4:	220c      	movs	r2, #12
 801bfa6:	6002      	str	r2, [r0, #0]
 801bfa8:	2500      	movs	r5, #0
 801bfaa:	e7f8      	b.n	801bf9e <_calloc_r+0x16>
 801bfac:	4621      	mov	r1, r4
 801bfae:	f000 fbc1 	bl	801c734 <memset>
 801bfb2:	e7f4      	b.n	801bf9e <_calloc_r+0x16>

0801bfb4 <getenv>:
 801bfb4:	b507      	push	{r0, r1, r2, lr}
 801bfb6:	4b04      	ldr	r3, [pc, #16]	; (801bfc8 <getenv+0x14>)
 801bfb8:	4601      	mov	r1, r0
 801bfba:	aa01      	add	r2, sp, #4
 801bfbc:	6818      	ldr	r0, [r3, #0]
 801bfbe:	f000 f805 	bl	801bfcc <_findenv_r>
 801bfc2:	b003      	add	sp, #12
 801bfc4:	f85d fb04 	ldr.w	pc, [sp], #4
 801bfc8:	200021d8 	.word	0x200021d8

0801bfcc <_findenv_r>:
 801bfcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfd0:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801c040 <_findenv_r+0x74>
 801bfd4:	4607      	mov	r7, r0
 801bfd6:	4689      	mov	r9, r1
 801bfd8:	4616      	mov	r6, r2
 801bfda:	f000 fd09 	bl	801c9f0 <__env_lock>
 801bfde:	f8da 4000 	ldr.w	r4, [sl]
 801bfe2:	b134      	cbz	r4, 801bff2 <_findenv_r+0x26>
 801bfe4:	464b      	mov	r3, r9
 801bfe6:	4698      	mov	r8, r3
 801bfe8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bfec:	b13a      	cbz	r2, 801bffe <_findenv_r+0x32>
 801bfee:	2a3d      	cmp	r2, #61	; 0x3d
 801bff0:	d1f9      	bne.n	801bfe6 <_findenv_r+0x1a>
 801bff2:	4638      	mov	r0, r7
 801bff4:	f000 fd02 	bl	801c9fc <__env_unlock>
 801bff8:	2000      	movs	r0, #0
 801bffa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bffe:	eba8 0809 	sub.w	r8, r8, r9
 801c002:	46a3      	mov	fp, r4
 801c004:	f854 0b04 	ldr.w	r0, [r4], #4
 801c008:	2800      	cmp	r0, #0
 801c00a:	d0f2      	beq.n	801bff2 <_findenv_r+0x26>
 801c00c:	4642      	mov	r2, r8
 801c00e:	4649      	mov	r1, r9
 801c010:	f000 fba5 	bl	801c75e <strncmp>
 801c014:	2800      	cmp	r0, #0
 801c016:	d1f4      	bne.n	801c002 <_findenv_r+0x36>
 801c018:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801c01c:	eb03 0508 	add.w	r5, r3, r8
 801c020:	f813 3008 	ldrb.w	r3, [r3, r8]
 801c024:	2b3d      	cmp	r3, #61	; 0x3d
 801c026:	d1ec      	bne.n	801c002 <_findenv_r+0x36>
 801c028:	f8da 3000 	ldr.w	r3, [sl]
 801c02c:	ebab 0303 	sub.w	r3, fp, r3
 801c030:	109b      	asrs	r3, r3, #2
 801c032:	4638      	mov	r0, r7
 801c034:	6033      	str	r3, [r6, #0]
 801c036:	f000 fce1 	bl	801c9fc <__env_unlock>
 801c03a:	1c68      	adds	r0, r5, #1
 801c03c:	e7dd      	b.n	801bffa <_findenv_r+0x2e>
 801c03e:	bf00      	nop
 801c040:	20000000 	.word	0x20000000

0801c044 <malloc>:
 801c044:	4b02      	ldr	r3, [pc, #8]	; (801c050 <malloc+0xc>)
 801c046:	4601      	mov	r1, r0
 801c048:	6818      	ldr	r0, [r3, #0]
 801c04a:	f000 b82b 	b.w	801c0a4 <_malloc_r>
 801c04e:	bf00      	nop
 801c050:	200021d8 	.word	0x200021d8

0801c054 <free>:
 801c054:	4b02      	ldr	r3, [pc, #8]	; (801c060 <free+0xc>)
 801c056:	4601      	mov	r1, r0
 801c058:	6818      	ldr	r0, [r3, #0]
 801c05a:	f000 bcd5 	b.w	801ca08 <_free_r>
 801c05e:	bf00      	nop
 801c060:	200021d8 	.word	0x200021d8

0801c064 <sbrk_aligned>:
 801c064:	b570      	push	{r4, r5, r6, lr}
 801c066:	4e0e      	ldr	r6, [pc, #56]	; (801c0a0 <sbrk_aligned+0x3c>)
 801c068:	460c      	mov	r4, r1
 801c06a:	6831      	ldr	r1, [r6, #0]
 801c06c:	4605      	mov	r5, r0
 801c06e:	b911      	cbnz	r1, 801c076 <sbrk_aligned+0x12>
 801c070:	f000 fc3a 	bl	801c8e8 <_sbrk_r>
 801c074:	6030      	str	r0, [r6, #0]
 801c076:	4621      	mov	r1, r4
 801c078:	4628      	mov	r0, r5
 801c07a:	f000 fc35 	bl	801c8e8 <_sbrk_r>
 801c07e:	1c43      	adds	r3, r0, #1
 801c080:	d00a      	beq.n	801c098 <sbrk_aligned+0x34>
 801c082:	1cc4      	adds	r4, r0, #3
 801c084:	f024 0403 	bic.w	r4, r4, #3
 801c088:	42a0      	cmp	r0, r4
 801c08a:	d007      	beq.n	801c09c <sbrk_aligned+0x38>
 801c08c:	1a21      	subs	r1, r4, r0
 801c08e:	4628      	mov	r0, r5
 801c090:	f000 fc2a 	bl	801c8e8 <_sbrk_r>
 801c094:	3001      	adds	r0, #1
 801c096:	d101      	bne.n	801c09c <sbrk_aligned+0x38>
 801c098:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801c09c:	4620      	mov	r0, r4
 801c09e:	bd70      	pop	{r4, r5, r6, pc}
 801c0a0:	20010ba4 	.word	0x20010ba4

0801c0a4 <_malloc_r>:
 801c0a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c0a8:	1ccd      	adds	r5, r1, #3
 801c0aa:	f025 0503 	bic.w	r5, r5, #3
 801c0ae:	3508      	adds	r5, #8
 801c0b0:	2d0c      	cmp	r5, #12
 801c0b2:	bf38      	it	cc
 801c0b4:	250c      	movcc	r5, #12
 801c0b6:	2d00      	cmp	r5, #0
 801c0b8:	4607      	mov	r7, r0
 801c0ba:	db01      	blt.n	801c0c0 <_malloc_r+0x1c>
 801c0bc:	42a9      	cmp	r1, r5
 801c0be:	d905      	bls.n	801c0cc <_malloc_r+0x28>
 801c0c0:	230c      	movs	r3, #12
 801c0c2:	603b      	str	r3, [r7, #0]
 801c0c4:	2600      	movs	r6, #0
 801c0c6:	4630      	mov	r0, r6
 801c0c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c0cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801c1a0 <_malloc_r+0xfc>
 801c0d0:	f000 f868 	bl	801c1a4 <__malloc_lock>
 801c0d4:	f8d8 3000 	ldr.w	r3, [r8]
 801c0d8:	461c      	mov	r4, r3
 801c0da:	bb5c      	cbnz	r4, 801c134 <_malloc_r+0x90>
 801c0dc:	4629      	mov	r1, r5
 801c0de:	4638      	mov	r0, r7
 801c0e0:	f7ff ffc0 	bl	801c064 <sbrk_aligned>
 801c0e4:	1c43      	adds	r3, r0, #1
 801c0e6:	4604      	mov	r4, r0
 801c0e8:	d155      	bne.n	801c196 <_malloc_r+0xf2>
 801c0ea:	f8d8 4000 	ldr.w	r4, [r8]
 801c0ee:	4626      	mov	r6, r4
 801c0f0:	2e00      	cmp	r6, #0
 801c0f2:	d145      	bne.n	801c180 <_malloc_r+0xdc>
 801c0f4:	2c00      	cmp	r4, #0
 801c0f6:	d048      	beq.n	801c18a <_malloc_r+0xe6>
 801c0f8:	6823      	ldr	r3, [r4, #0]
 801c0fa:	4631      	mov	r1, r6
 801c0fc:	4638      	mov	r0, r7
 801c0fe:	eb04 0903 	add.w	r9, r4, r3
 801c102:	f000 fbf1 	bl	801c8e8 <_sbrk_r>
 801c106:	4581      	cmp	r9, r0
 801c108:	d13f      	bne.n	801c18a <_malloc_r+0xe6>
 801c10a:	6821      	ldr	r1, [r4, #0]
 801c10c:	1a6d      	subs	r5, r5, r1
 801c10e:	4629      	mov	r1, r5
 801c110:	4638      	mov	r0, r7
 801c112:	f7ff ffa7 	bl	801c064 <sbrk_aligned>
 801c116:	3001      	adds	r0, #1
 801c118:	d037      	beq.n	801c18a <_malloc_r+0xe6>
 801c11a:	6823      	ldr	r3, [r4, #0]
 801c11c:	442b      	add	r3, r5
 801c11e:	6023      	str	r3, [r4, #0]
 801c120:	f8d8 3000 	ldr.w	r3, [r8]
 801c124:	2b00      	cmp	r3, #0
 801c126:	d038      	beq.n	801c19a <_malloc_r+0xf6>
 801c128:	685a      	ldr	r2, [r3, #4]
 801c12a:	42a2      	cmp	r2, r4
 801c12c:	d12b      	bne.n	801c186 <_malloc_r+0xe2>
 801c12e:	2200      	movs	r2, #0
 801c130:	605a      	str	r2, [r3, #4]
 801c132:	e00f      	b.n	801c154 <_malloc_r+0xb0>
 801c134:	6822      	ldr	r2, [r4, #0]
 801c136:	1b52      	subs	r2, r2, r5
 801c138:	d41f      	bmi.n	801c17a <_malloc_r+0xd6>
 801c13a:	2a0b      	cmp	r2, #11
 801c13c:	d917      	bls.n	801c16e <_malloc_r+0xca>
 801c13e:	1961      	adds	r1, r4, r5
 801c140:	42a3      	cmp	r3, r4
 801c142:	6025      	str	r5, [r4, #0]
 801c144:	bf18      	it	ne
 801c146:	6059      	strne	r1, [r3, #4]
 801c148:	6863      	ldr	r3, [r4, #4]
 801c14a:	bf08      	it	eq
 801c14c:	f8c8 1000 	streq.w	r1, [r8]
 801c150:	5162      	str	r2, [r4, r5]
 801c152:	604b      	str	r3, [r1, #4]
 801c154:	4638      	mov	r0, r7
 801c156:	f104 060b 	add.w	r6, r4, #11
 801c15a:	f000 f829 	bl	801c1b0 <__malloc_unlock>
 801c15e:	f026 0607 	bic.w	r6, r6, #7
 801c162:	1d23      	adds	r3, r4, #4
 801c164:	1af2      	subs	r2, r6, r3
 801c166:	d0ae      	beq.n	801c0c6 <_malloc_r+0x22>
 801c168:	1b9b      	subs	r3, r3, r6
 801c16a:	50a3      	str	r3, [r4, r2]
 801c16c:	e7ab      	b.n	801c0c6 <_malloc_r+0x22>
 801c16e:	42a3      	cmp	r3, r4
 801c170:	6862      	ldr	r2, [r4, #4]
 801c172:	d1dd      	bne.n	801c130 <_malloc_r+0x8c>
 801c174:	f8c8 2000 	str.w	r2, [r8]
 801c178:	e7ec      	b.n	801c154 <_malloc_r+0xb0>
 801c17a:	4623      	mov	r3, r4
 801c17c:	6864      	ldr	r4, [r4, #4]
 801c17e:	e7ac      	b.n	801c0da <_malloc_r+0x36>
 801c180:	4634      	mov	r4, r6
 801c182:	6876      	ldr	r6, [r6, #4]
 801c184:	e7b4      	b.n	801c0f0 <_malloc_r+0x4c>
 801c186:	4613      	mov	r3, r2
 801c188:	e7cc      	b.n	801c124 <_malloc_r+0x80>
 801c18a:	230c      	movs	r3, #12
 801c18c:	603b      	str	r3, [r7, #0]
 801c18e:	4638      	mov	r0, r7
 801c190:	f000 f80e 	bl	801c1b0 <__malloc_unlock>
 801c194:	e797      	b.n	801c0c6 <_malloc_r+0x22>
 801c196:	6025      	str	r5, [r4, #0]
 801c198:	e7dc      	b.n	801c154 <_malloc_r+0xb0>
 801c19a:	605b      	str	r3, [r3, #4]
 801c19c:	deff      	udf	#255	; 0xff
 801c19e:	bf00      	nop
 801c1a0:	20010ba0 	.word	0x20010ba0

0801c1a4 <__malloc_lock>:
 801c1a4:	4801      	ldr	r0, [pc, #4]	; (801c1ac <__malloc_lock+0x8>)
 801c1a6:	f000 bbec 	b.w	801c982 <__retarget_lock_acquire_recursive>
 801c1aa:	bf00      	nop
 801c1ac:	20010ce9 	.word	0x20010ce9

0801c1b0 <__malloc_unlock>:
 801c1b0:	4801      	ldr	r0, [pc, #4]	; (801c1b8 <__malloc_unlock+0x8>)
 801c1b2:	f000 bbe7 	b.w	801c984 <__retarget_lock_release_recursive>
 801c1b6:	bf00      	nop
 801c1b8:	20010ce9 	.word	0x20010ce9

0801c1bc <srand>:
 801c1bc:	b538      	push	{r3, r4, r5, lr}
 801c1be:	4b10      	ldr	r3, [pc, #64]	; (801c200 <srand+0x44>)
 801c1c0:	681d      	ldr	r5, [r3, #0]
 801c1c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c1c4:	4604      	mov	r4, r0
 801c1c6:	b9b3      	cbnz	r3, 801c1f6 <srand+0x3a>
 801c1c8:	2018      	movs	r0, #24
 801c1ca:	f7ff ff3b 	bl	801c044 <malloc>
 801c1ce:	4602      	mov	r2, r0
 801c1d0:	6328      	str	r0, [r5, #48]	; 0x30
 801c1d2:	b920      	cbnz	r0, 801c1de <srand+0x22>
 801c1d4:	4b0b      	ldr	r3, [pc, #44]	; (801c204 <srand+0x48>)
 801c1d6:	480c      	ldr	r0, [pc, #48]	; (801c208 <srand+0x4c>)
 801c1d8:	2146      	movs	r1, #70	; 0x46
 801c1da:	f000 fbeb 	bl	801c9b4 <__assert_func>
 801c1de:	490b      	ldr	r1, [pc, #44]	; (801c20c <srand+0x50>)
 801c1e0:	4b0b      	ldr	r3, [pc, #44]	; (801c210 <srand+0x54>)
 801c1e2:	e9c0 1300 	strd	r1, r3, [r0]
 801c1e6:	4b0b      	ldr	r3, [pc, #44]	; (801c214 <srand+0x58>)
 801c1e8:	6083      	str	r3, [r0, #8]
 801c1ea:	230b      	movs	r3, #11
 801c1ec:	8183      	strh	r3, [r0, #12]
 801c1ee:	2100      	movs	r1, #0
 801c1f0:	2001      	movs	r0, #1
 801c1f2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801c1f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801c1f8:	2200      	movs	r2, #0
 801c1fa:	611c      	str	r4, [r3, #16]
 801c1fc:	615a      	str	r2, [r3, #20]
 801c1fe:	bd38      	pop	{r3, r4, r5, pc}
 801c200:	200021d8 	.word	0x200021d8
 801c204:	0801f5c0 	.word	0x0801f5c0
 801c208:	0801f5d7 	.word	0x0801f5d7
 801c20c:	abcd330e 	.word	0xabcd330e
 801c210:	e66d1234 	.word	0xe66d1234
 801c214:	0005deec 	.word	0x0005deec

0801c218 <rand>:
 801c218:	4b16      	ldr	r3, [pc, #88]	; (801c274 <rand+0x5c>)
 801c21a:	b510      	push	{r4, lr}
 801c21c:	681c      	ldr	r4, [r3, #0]
 801c21e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801c220:	b9b3      	cbnz	r3, 801c250 <rand+0x38>
 801c222:	2018      	movs	r0, #24
 801c224:	f7ff ff0e 	bl	801c044 <malloc>
 801c228:	4602      	mov	r2, r0
 801c22a:	6320      	str	r0, [r4, #48]	; 0x30
 801c22c:	b920      	cbnz	r0, 801c238 <rand+0x20>
 801c22e:	4b12      	ldr	r3, [pc, #72]	; (801c278 <rand+0x60>)
 801c230:	4812      	ldr	r0, [pc, #72]	; (801c27c <rand+0x64>)
 801c232:	2152      	movs	r1, #82	; 0x52
 801c234:	f000 fbbe 	bl	801c9b4 <__assert_func>
 801c238:	4911      	ldr	r1, [pc, #68]	; (801c280 <rand+0x68>)
 801c23a:	4b12      	ldr	r3, [pc, #72]	; (801c284 <rand+0x6c>)
 801c23c:	e9c0 1300 	strd	r1, r3, [r0]
 801c240:	4b11      	ldr	r3, [pc, #68]	; (801c288 <rand+0x70>)
 801c242:	6083      	str	r3, [r0, #8]
 801c244:	230b      	movs	r3, #11
 801c246:	8183      	strh	r3, [r0, #12]
 801c248:	2100      	movs	r1, #0
 801c24a:	2001      	movs	r0, #1
 801c24c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801c250:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c252:	480e      	ldr	r0, [pc, #56]	; (801c28c <rand+0x74>)
 801c254:	690b      	ldr	r3, [r1, #16]
 801c256:	694c      	ldr	r4, [r1, #20]
 801c258:	4a0d      	ldr	r2, [pc, #52]	; (801c290 <rand+0x78>)
 801c25a:	4358      	muls	r0, r3
 801c25c:	fb02 0004 	mla	r0, r2, r4, r0
 801c260:	fba3 3202 	umull	r3, r2, r3, r2
 801c264:	3301      	adds	r3, #1
 801c266:	eb40 0002 	adc.w	r0, r0, r2
 801c26a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801c26e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801c272:	bd10      	pop	{r4, pc}
 801c274:	200021d8 	.word	0x200021d8
 801c278:	0801f5c0 	.word	0x0801f5c0
 801c27c:	0801f5d7 	.word	0x0801f5d7
 801c280:	abcd330e 	.word	0xabcd330e
 801c284:	e66d1234 	.word	0xe66d1234
 801c288:	0005deec 	.word	0x0005deec
 801c28c:	5851f42d 	.word	0x5851f42d
 801c290:	4c957f2d 	.word	0x4c957f2d

0801c294 <realloc>:
 801c294:	4b02      	ldr	r3, [pc, #8]	; (801c2a0 <realloc+0xc>)
 801c296:	460a      	mov	r2, r1
 801c298:	4601      	mov	r1, r0
 801c29a:	6818      	ldr	r0, [r3, #0]
 801c29c:	f000 b802 	b.w	801c2a4 <_realloc_r>
 801c2a0:	200021d8 	.word	0x200021d8

0801c2a4 <_realloc_r>:
 801c2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c2a8:	4680      	mov	r8, r0
 801c2aa:	4614      	mov	r4, r2
 801c2ac:	460e      	mov	r6, r1
 801c2ae:	b921      	cbnz	r1, 801c2ba <_realloc_r+0x16>
 801c2b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c2b4:	4611      	mov	r1, r2
 801c2b6:	f7ff bef5 	b.w	801c0a4 <_malloc_r>
 801c2ba:	b92a      	cbnz	r2, 801c2c8 <_realloc_r+0x24>
 801c2bc:	f000 fba4 	bl	801ca08 <_free_r>
 801c2c0:	4625      	mov	r5, r4
 801c2c2:	4628      	mov	r0, r5
 801c2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c2c8:	f000 fbea 	bl	801caa0 <_malloc_usable_size_r>
 801c2cc:	4284      	cmp	r4, r0
 801c2ce:	4607      	mov	r7, r0
 801c2d0:	d802      	bhi.n	801c2d8 <_realloc_r+0x34>
 801c2d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c2d6:	d812      	bhi.n	801c2fe <_realloc_r+0x5a>
 801c2d8:	4621      	mov	r1, r4
 801c2da:	4640      	mov	r0, r8
 801c2dc:	f7ff fee2 	bl	801c0a4 <_malloc_r>
 801c2e0:	4605      	mov	r5, r0
 801c2e2:	2800      	cmp	r0, #0
 801c2e4:	d0ed      	beq.n	801c2c2 <_realloc_r+0x1e>
 801c2e6:	42bc      	cmp	r4, r7
 801c2e8:	4622      	mov	r2, r4
 801c2ea:	4631      	mov	r1, r6
 801c2ec:	bf28      	it	cs
 801c2ee:	463a      	movcs	r2, r7
 801c2f0:	f000 fb51 	bl	801c996 <memcpy>
 801c2f4:	4631      	mov	r1, r6
 801c2f6:	4640      	mov	r0, r8
 801c2f8:	f000 fb86 	bl	801ca08 <_free_r>
 801c2fc:	e7e1      	b.n	801c2c2 <_realloc_r+0x1e>
 801c2fe:	4635      	mov	r5, r6
 801c300:	e7df      	b.n	801c2c2 <_realloc_r+0x1e>
	...

0801c304 <_strtoul_l.constprop.0>:
 801c304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c308:	4f36      	ldr	r7, [pc, #216]	; (801c3e4 <_strtoul_l.constprop.0+0xe0>)
 801c30a:	4686      	mov	lr, r0
 801c30c:	460d      	mov	r5, r1
 801c30e:	4628      	mov	r0, r5
 801c310:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c314:	5d3e      	ldrb	r6, [r7, r4]
 801c316:	f016 0608 	ands.w	r6, r6, #8
 801c31a:	d1f8      	bne.n	801c30e <_strtoul_l.constprop.0+0xa>
 801c31c:	2c2d      	cmp	r4, #45	; 0x2d
 801c31e:	d130      	bne.n	801c382 <_strtoul_l.constprop.0+0x7e>
 801c320:	782c      	ldrb	r4, [r5, #0]
 801c322:	2601      	movs	r6, #1
 801c324:	1c85      	adds	r5, r0, #2
 801c326:	2b00      	cmp	r3, #0
 801c328:	d057      	beq.n	801c3da <_strtoul_l.constprop.0+0xd6>
 801c32a:	2b10      	cmp	r3, #16
 801c32c:	d109      	bne.n	801c342 <_strtoul_l.constprop.0+0x3e>
 801c32e:	2c30      	cmp	r4, #48	; 0x30
 801c330:	d107      	bne.n	801c342 <_strtoul_l.constprop.0+0x3e>
 801c332:	7828      	ldrb	r0, [r5, #0]
 801c334:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801c338:	2858      	cmp	r0, #88	; 0x58
 801c33a:	d149      	bne.n	801c3d0 <_strtoul_l.constprop.0+0xcc>
 801c33c:	786c      	ldrb	r4, [r5, #1]
 801c33e:	2310      	movs	r3, #16
 801c340:	3502      	adds	r5, #2
 801c342:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801c346:	2700      	movs	r7, #0
 801c348:	fbb8 f8f3 	udiv	r8, r8, r3
 801c34c:	fb03 f908 	mul.w	r9, r3, r8
 801c350:	ea6f 0909 	mvn.w	r9, r9
 801c354:	4638      	mov	r0, r7
 801c356:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801c35a:	f1bc 0f09 	cmp.w	ip, #9
 801c35e:	d815      	bhi.n	801c38c <_strtoul_l.constprop.0+0x88>
 801c360:	4664      	mov	r4, ip
 801c362:	42a3      	cmp	r3, r4
 801c364:	dd23      	ble.n	801c3ae <_strtoul_l.constprop.0+0xaa>
 801c366:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801c36a:	d007      	beq.n	801c37c <_strtoul_l.constprop.0+0x78>
 801c36c:	4580      	cmp	r8, r0
 801c36e:	d31b      	bcc.n	801c3a8 <_strtoul_l.constprop.0+0xa4>
 801c370:	d101      	bne.n	801c376 <_strtoul_l.constprop.0+0x72>
 801c372:	45a1      	cmp	r9, r4
 801c374:	db18      	blt.n	801c3a8 <_strtoul_l.constprop.0+0xa4>
 801c376:	fb00 4003 	mla	r0, r0, r3, r4
 801c37a:	2701      	movs	r7, #1
 801c37c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c380:	e7e9      	b.n	801c356 <_strtoul_l.constprop.0+0x52>
 801c382:	2c2b      	cmp	r4, #43	; 0x2b
 801c384:	bf04      	itt	eq
 801c386:	782c      	ldrbeq	r4, [r5, #0]
 801c388:	1c85      	addeq	r5, r0, #2
 801c38a:	e7cc      	b.n	801c326 <_strtoul_l.constprop.0+0x22>
 801c38c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801c390:	f1bc 0f19 	cmp.w	ip, #25
 801c394:	d801      	bhi.n	801c39a <_strtoul_l.constprop.0+0x96>
 801c396:	3c37      	subs	r4, #55	; 0x37
 801c398:	e7e3      	b.n	801c362 <_strtoul_l.constprop.0+0x5e>
 801c39a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801c39e:	f1bc 0f19 	cmp.w	ip, #25
 801c3a2:	d804      	bhi.n	801c3ae <_strtoul_l.constprop.0+0xaa>
 801c3a4:	3c57      	subs	r4, #87	; 0x57
 801c3a6:	e7dc      	b.n	801c362 <_strtoul_l.constprop.0+0x5e>
 801c3a8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801c3ac:	e7e6      	b.n	801c37c <_strtoul_l.constprop.0+0x78>
 801c3ae:	1c7b      	adds	r3, r7, #1
 801c3b0:	d106      	bne.n	801c3c0 <_strtoul_l.constprop.0+0xbc>
 801c3b2:	2322      	movs	r3, #34	; 0x22
 801c3b4:	f8ce 3000 	str.w	r3, [lr]
 801c3b8:	4638      	mov	r0, r7
 801c3ba:	b932      	cbnz	r2, 801c3ca <_strtoul_l.constprop.0+0xc6>
 801c3bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c3c0:	b106      	cbz	r6, 801c3c4 <_strtoul_l.constprop.0+0xc0>
 801c3c2:	4240      	negs	r0, r0
 801c3c4:	2a00      	cmp	r2, #0
 801c3c6:	d0f9      	beq.n	801c3bc <_strtoul_l.constprop.0+0xb8>
 801c3c8:	b107      	cbz	r7, 801c3cc <_strtoul_l.constprop.0+0xc8>
 801c3ca:	1e69      	subs	r1, r5, #1
 801c3cc:	6011      	str	r1, [r2, #0]
 801c3ce:	e7f5      	b.n	801c3bc <_strtoul_l.constprop.0+0xb8>
 801c3d0:	2430      	movs	r4, #48	; 0x30
 801c3d2:	2b00      	cmp	r3, #0
 801c3d4:	d1b5      	bne.n	801c342 <_strtoul_l.constprop.0+0x3e>
 801c3d6:	2308      	movs	r3, #8
 801c3d8:	e7b3      	b.n	801c342 <_strtoul_l.constprop.0+0x3e>
 801c3da:	2c30      	cmp	r4, #48	; 0x30
 801c3dc:	d0a9      	beq.n	801c332 <_strtoul_l.constprop.0+0x2e>
 801c3de:	230a      	movs	r3, #10
 801c3e0:	e7af      	b.n	801c342 <_strtoul_l.constprop.0+0x3e>
 801c3e2:	bf00      	nop
 801c3e4:	0801f630 	.word	0x0801f630

0801c3e8 <strtoul>:
 801c3e8:	4613      	mov	r3, r2
 801c3ea:	460a      	mov	r2, r1
 801c3ec:	4601      	mov	r1, r0
 801c3ee:	4802      	ldr	r0, [pc, #8]	; (801c3f8 <strtoul+0x10>)
 801c3f0:	6800      	ldr	r0, [r0, #0]
 801c3f2:	f7ff bf87 	b.w	801c304 <_strtoul_l.constprop.0>
 801c3f6:	bf00      	nop
 801c3f8:	200021d8 	.word	0x200021d8

0801c3fc <std>:
 801c3fc:	2300      	movs	r3, #0
 801c3fe:	b510      	push	{r4, lr}
 801c400:	4604      	mov	r4, r0
 801c402:	e9c0 3300 	strd	r3, r3, [r0]
 801c406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c40a:	6083      	str	r3, [r0, #8]
 801c40c:	8181      	strh	r1, [r0, #12]
 801c40e:	6643      	str	r3, [r0, #100]	; 0x64
 801c410:	81c2      	strh	r2, [r0, #14]
 801c412:	6183      	str	r3, [r0, #24]
 801c414:	4619      	mov	r1, r3
 801c416:	2208      	movs	r2, #8
 801c418:	305c      	adds	r0, #92	; 0x5c
 801c41a:	f000 f98b 	bl	801c734 <memset>
 801c41e:	4b0d      	ldr	r3, [pc, #52]	; (801c454 <std+0x58>)
 801c420:	6263      	str	r3, [r4, #36]	; 0x24
 801c422:	4b0d      	ldr	r3, [pc, #52]	; (801c458 <std+0x5c>)
 801c424:	62a3      	str	r3, [r4, #40]	; 0x28
 801c426:	4b0d      	ldr	r3, [pc, #52]	; (801c45c <std+0x60>)
 801c428:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c42a:	4b0d      	ldr	r3, [pc, #52]	; (801c460 <std+0x64>)
 801c42c:	6323      	str	r3, [r4, #48]	; 0x30
 801c42e:	4b0d      	ldr	r3, [pc, #52]	; (801c464 <std+0x68>)
 801c430:	6224      	str	r4, [r4, #32]
 801c432:	429c      	cmp	r4, r3
 801c434:	d006      	beq.n	801c444 <std+0x48>
 801c436:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801c43a:	4294      	cmp	r4, r2
 801c43c:	d002      	beq.n	801c444 <std+0x48>
 801c43e:	33d0      	adds	r3, #208	; 0xd0
 801c440:	429c      	cmp	r4, r3
 801c442:	d105      	bne.n	801c450 <std+0x54>
 801c444:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c44c:	f000 ba98 	b.w	801c980 <__retarget_lock_init_recursive>
 801c450:	bd10      	pop	{r4, pc}
 801c452:	bf00      	nop
 801c454:	0801c5e9 	.word	0x0801c5e9
 801c458:	0801c60b 	.word	0x0801c60b
 801c45c:	0801c643 	.word	0x0801c643
 801c460:	0801c667 	.word	0x0801c667
 801c464:	20010ba8 	.word	0x20010ba8

0801c468 <stdio_exit_handler>:
 801c468:	4a02      	ldr	r2, [pc, #8]	; (801c474 <stdio_exit_handler+0xc>)
 801c46a:	4903      	ldr	r1, [pc, #12]	; (801c478 <stdio_exit_handler+0x10>)
 801c46c:	4803      	ldr	r0, [pc, #12]	; (801c47c <stdio_exit_handler+0x14>)
 801c46e:	f000 b869 	b.w	801c544 <_fwalk_sglue>
 801c472:	bf00      	nop
 801c474:	20002180 	.word	0x20002180
 801c478:	0801d18d 	.word	0x0801d18d
 801c47c:	2000218c 	.word	0x2000218c

0801c480 <cleanup_stdio>:
 801c480:	6841      	ldr	r1, [r0, #4]
 801c482:	4b0c      	ldr	r3, [pc, #48]	; (801c4b4 <cleanup_stdio+0x34>)
 801c484:	4299      	cmp	r1, r3
 801c486:	b510      	push	{r4, lr}
 801c488:	4604      	mov	r4, r0
 801c48a:	d001      	beq.n	801c490 <cleanup_stdio+0x10>
 801c48c:	f000 fe7e 	bl	801d18c <_fflush_r>
 801c490:	68a1      	ldr	r1, [r4, #8]
 801c492:	4b09      	ldr	r3, [pc, #36]	; (801c4b8 <cleanup_stdio+0x38>)
 801c494:	4299      	cmp	r1, r3
 801c496:	d002      	beq.n	801c49e <cleanup_stdio+0x1e>
 801c498:	4620      	mov	r0, r4
 801c49a:	f000 fe77 	bl	801d18c <_fflush_r>
 801c49e:	68e1      	ldr	r1, [r4, #12]
 801c4a0:	4b06      	ldr	r3, [pc, #24]	; (801c4bc <cleanup_stdio+0x3c>)
 801c4a2:	4299      	cmp	r1, r3
 801c4a4:	d004      	beq.n	801c4b0 <cleanup_stdio+0x30>
 801c4a6:	4620      	mov	r0, r4
 801c4a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c4ac:	f000 be6e 	b.w	801d18c <_fflush_r>
 801c4b0:	bd10      	pop	{r4, pc}
 801c4b2:	bf00      	nop
 801c4b4:	20010ba8 	.word	0x20010ba8
 801c4b8:	20010c10 	.word	0x20010c10
 801c4bc:	20010c78 	.word	0x20010c78

0801c4c0 <global_stdio_init.part.0>:
 801c4c0:	b510      	push	{r4, lr}
 801c4c2:	4b0b      	ldr	r3, [pc, #44]	; (801c4f0 <global_stdio_init.part.0+0x30>)
 801c4c4:	4c0b      	ldr	r4, [pc, #44]	; (801c4f4 <global_stdio_init.part.0+0x34>)
 801c4c6:	4a0c      	ldr	r2, [pc, #48]	; (801c4f8 <global_stdio_init.part.0+0x38>)
 801c4c8:	601a      	str	r2, [r3, #0]
 801c4ca:	4620      	mov	r0, r4
 801c4cc:	2200      	movs	r2, #0
 801c4ce:	2104      	movs	r1, #4
 801c4d0:	f7ff ff94 	bl	801c3fc <std>
 801c4d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801c4d8:	2201      	movs	r2, #1
 801c4da:	2109      	movs	r1, #9
 801c4dc:	f7ff ff8e 	bl	801c3fc <std>
 801c4e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801c4e4:	2202      	movs	r2, #2
 801c4e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c4ea:	2112      	movs	r1, #18
 801c4ec:	f7ff bf86 	b.w	801c3fc <std>
 801c4f0:	20010ce0 	.word	0x20010ce0
 801c4f4:	20010ba8 	.word	0x20010ba8
 801c4f8:	0801c469 	.word	0x0801c469

0801c4fc <__sfp_lock_acquire>:
 801c4fc:	4801      	ldr	r0, [pc, #4]	; (801c504 <__sfp_lock_acquire+0x8>)
 801c4fe:	f000 ba40 	b.w	801c982 <__retarget_lock_acquire_recursive>
 801c502:	bf00      	nop
 801c504:	20010cea 	.word	0x20010cea

0801c508 <__sfp_lock_release>:
 801c508:	4801      	ldr	r0, [pc, #4]	; (801c510 <__sfp_lock_release+0x8>)
 801c50a:	f000 ba3b 	b.w	801c984 <__retarget_lock_release_recursive>
 801c50e:	bf00      	nop
 801c510:	20010cea 	.word	0x20010cea

0801c514 <__sinit>:
 801c514:	b510      	push	{r4, lr}
 801c516:	4604      	mov	r4, r0
 801c518:	f7ff fff0 	bl	801c4fc <__sfp_lock_acquire>
 801c51c:	6a23      	ldr	r3, [r4, #32]
 801c51e:	b11b      	cbz	r3, 801c528 <__sinit+0x14>
 801c520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c524:	f7ff bff0 	b.w	801c508 <__sfp_lock_release>
 801c528:	4b04      	ldr	r3, [pc, #16]	; (801c53c <__sinit+0x28>)
 801c52a:	6223      	str	r3, [r4, #32]
 801c52c:	4b04      	ldr	r3, [pc, #16]	; (801c540 <__sinit+0x2c>)
 801c52e:	681b      	ldr	r3, [r3, #0]
 801c530:	2b00      	cmp	r3, #0
 801c532:	d1f5      	bne.n	801c520 <__sinit+0xc>
 801c534:	f7ff ffc4 	bl	801c4c0 <global_stdio_init.part.0>
 801c538:	e7f2      	b.n	801c520 <__sinit+0xc>
 801c53a:	bf00      	nop
 801c53c:	0801c481 	.word	0x0801c481
 801c540:	20010ce0 	.word	0x20010ce0

0801c544 <_fwalk_sglue>:
 801c544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c548:	4607      	mov	r7, r0
 801c54a:	4688      	mov	r8, r1
 801c54c:	4614      	mov	r4, r2
 801c54e:	2600      	movs	r6, #0
 801c550:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c554:	f1b9 0901 	subs.w	r9, r9, #1
 801c558:	d505      	bpl.n	801c566 <_fwalk_sglue+0x22>
 801c55a:	6824      	ldr	r4, [r4, #0]
 801c55c:	2c00      	cmp	r4, #0
 801c55e:	d1f7      	bne.n	801c550 <_fwalk_sglue+0xc>
 801c560:	4630      	mov	r0, r6
 801c562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c566:	89ab      	ldrh	r3, [r5, #12]
 801c568:	2b01      	cmp	r3, #1
 801c56a:	d907      	bls.n	801c57c <_fwalk_sglue+0x38>
 801c56c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c570:	3301      	adds	r3, #1
 801c572:	d003      	beq.n	801c57c <_fwalk_sglue+0x38>
 801c574:	4629      	mov	r1, r5
 801c576:	4638      	mov	r0, r7
 801c578:	47c0      	blx	r8
 801c57a:	4306      	orrs	r6, r0
 801c57c:	3568      	adds	r5, #104	; 0x68
 801c57e:	e7e9      	b.n	801c554 <_fwalk_sglue+0x10>

0801c580 <sniprintf>:
 801c580:	b40c      	push	{r2, r3}
 801c582:	b530      	push	{r4, r5, lr}
 801c584:	4b17      	ldr	r3, [pc, #92]	; (801c5e4 <sniprintf+0x64>)
 801c586:	1e0c      	subs	r4, r1, #0
 801c588:	681d      	ldr	r5, [r3, #0]
 801c58a:	b09d      	sub	sp, #116	; 0x74
 801c58c:	da08      	bge.n	801c5a0 <sniprintf+0x20>
 801c58e:	238b      	movs	r3, #139	; 0x8b
 801c590:	602b      	str	r3, [r5, #0]
 801c592:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c596:	b01d      	add	sp, #116	; 0x74
 801c598:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c59c:	b002      	add	sp, #8
 801c59e:	4770      	bx	lr
 801c5a0:	f44f 7302 	mov.w	r3, #520	; 0x208
 801c5a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c5a8:	bf14      	ite	ne
 801c5aa:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801c5ae:	4623      	moveq	r3, r4
 801c5b0:	9304      	str	r3, [sp, #16]
 801c5b2:	9307      	str	r3, [sp, #28]
 801c5b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c5b8:	9002      	str	r0, [sp, #8]
 801c5ba:	9006      	str	r0, [sp, #24]
 801c5bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c5c0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c5c2:	ab21      	add	r3, sp, #132	; 0x84
 801c5c4:	a902      	add	r1, sp, #8
 801c5c6:	4628      	mov	r0, r5
 801c5c8:	9301      	str	r3, [sp, #4]
 801c5ca:	f000 facb 	bl	801cb64 <_svfiprintf_r>
 801c5ce:	1c43      	adds	r3, r0, #1
 801c5d0:	bfbc      	itt	lt
 801c5d2:	238b      	movlt	r3, #139	; 0x8b
 801c5d4:	602b      	strlt	r3, [r5, #0]
 801c5d6:	2c00      	cmp	r4, #0
 801c5d8:	d0dd      	beq.n	801c596 <sniprintf+0x16>
 801c5da:	9b02      	ldr	r3, [sp, #8]
 801c5dc:	2200      	movs	r2, #0
 801c5de:	701a      	strb	r2, [r3, #0]
 801c5e0:	e7d9      	b.n	801c596 <sniprintf+0x16>
 801c5e2:	bf00      	nop
 801c5e4:	200021d8 	.word	0x200021d8

0801c5e8 <__sread>:
 801c5e8:	b510      	push	{r4, lr}
 801c5ea:	460c      	mov	r4, r1
 801c5ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c5f0:	f000 f968 	bl	801c8c4 <_read_r>
 801c5f4:	2800      	cmp	r0, #0
 801c5f6:	bfab      	itete	ge
 801c5f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c5fa:	89a3      	ldrhlt	r3, [r4, #12]
 801c5fc:	181b      	addge	r3, r3, r0
 801c5fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c602:	bfac      	ite	ge
 801c604:	6563      	strge	r3, [r4, #84]	; 0x54
 801c606:	81a3      	strhlt	r3, [r4, #12]
 801c608:	bd10      	pop	{r4, pc}

0801c60a <__swrite>:
 801c60a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c60e:	461f      	mov	r7, r3
 801c610:	898b      	ldrh	r3, [r1, #12]
 801c612:	05db      	lsls	r3, r3, #23
 801c614:	4605      	mov	r5, r0
 801c616:	460c      	mov	r4, r1
 801c618:	4616      	mov	r6, r2
 801c61a:	d505      	bpl.n	801c628 <__swrite+0x1e>
 801c61c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c620:	2302      	movs	r3, #2
 801c622:	2200      	movs	r2, #0
 801c624:	f000 f93c 	bl	801c8a0 <_lseek_r>
 801c628:	89a3      	ldrh	r3, [r4, #12]
 801c62a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c62e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c632:	81a3      	strh	r3, [r4, #12]
 801c634:	4632      	mov	r2, r6
 801c636:	463b      	mov	r3, r7
 801c638:	4628      	mov	r0, r5
 801c63a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c63e:	f000 b963 	b.w	801c908 <_write_r>

0801c642 <__sseek>:
 801c642:	b510      	push	{r4, lr}
 801c644:	460c      	mov	r4, r1
 801c646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c64a:	f000 f929 	bl	801c8a0 <_lseek_r>
 801c64e:	1c43      	adds	r3, r0, #1
 801c650:	89a3      	ldrh	r3, [r4, #12]
 801c652:	bf15      	itete	ne
 801c654:	6560      	strne	r0, [r4, #84]	; 0x54
 801c656:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c65a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c65e:	81a3      	strheq	r3, [r4, #12]
 801c660:	bf18      	it	ne
 801c662:	81a3      	strhne	r3, [r4, #12]
 801c664:	bd10      	pop	{r4, pc}

0801c666 <__sclose>:
 801c666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c66a:	f000 b8b3 	b.w	801c7d4 <_close_r>

0801c66e <_vsniprintf_r>:
 801c66e:	b530      	push	{r4, r5, lr}
 801c670:	4614      	mov	r4, r2
 801c672:	2c00      	cmp	r4, #0
 801c674:	b09b      	sub	sp, #108	; 0x6c
 801c676:	4605      	mov	r5, r0
 801c678:	461a      	mov	r2, r3
 801c67a:	da05      	bge.n	801c688 <_vsniprintf_r+0x1a>
 801c67c:	238b      	movs	r3, #139	; 0x8b
 801c67e:	6003      	str	r3, [r0, #0]
 801c680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c684:	b01b      	add	sp, #108	; 0x6c
 801c686:	bd30      	pop	{r4, r5, pc}
 801c688:	f44f 7302 	mov.w	r3, #520	; 0x208
 801c68c:	f8ad 300c 	strh.w	r3, [sp, #12]
 801c690:	bf14      	ite	ne
 801c692:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801c696:	4623      	moveq	r3, r4
 801c698:	9302      	str	r3, [sp, #8]
 801c69a:	9305      	str	r3, [sp, #20]
 801c69c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c6a0:	9100      	str	r1, [sp, #0]
 801c6a2:	9104      	str	r1, [sp, #16]
 801c6a4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c6a8:	4669      	mov	r1, sp
 801c6aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c6ac:	f000 fa5a 	bl	801cb64 <_svfiprintf_r>
 801c6b0:	1c43      	adds	r3, r0, #1
 801c6b2:	bfbc      	itt	lt
 801c6b4:	238b      	movlt	r3, #139	; 0x8b
 801c6b6:	602b      	strlt	r3, [r5, #0]
 801c6b8:	2c00      	cmp	r4, #0
 801c6ba:	d0e3      	beq.n	801c684 <_vsniprintf_r+0x16>
 801c6bc:	9b00      	ldr	r3, [sp, #0]
 801c6be:	2200      	movs	r2, #0
 801c6c0:	701a      	strb	r2, [r3, #0]
 801c6c2:	e7df      	b.n	801c684 <_vsniprintf_r+0x16>

0801c6c4 <vsniprintf>:
 801c6c4:	b507      	push	{r0, r1, r2, lr}
 801c6c6:	9300      	str	r3, [sp, #0]
 801c6c8:	4613      	mov	r3, r2
 801c6ca:	460a      	mov	r2, r1
 801c6cc:	4601      	mov	r1, r0
 801c6ce:	4803      	ldr	r0, [pc, #12]	; (801c6dc <vsniprintf+0x18>)
 801c6d0:	6800      	ldr	r0, [r0, #0]
 801c6d2:	f7ff ffcc 	bl	801c66e <_vsniprintf_r>
 801c6d6:	b003      	add	sp, #12
 801c6d8:	f85d fb04 	ldr.w	pc, [sp], #4
 801c6dc:	200021d8 	.word	0x200021d8

0801c6e0 <memcmp>:
 801c6e0:	b510      	push	{r4, lr}
 801c6e2:	3901      	subs	r1, #1
 801c6e4:	4402      	add	r2, r0
 801c6e6:	4290      	cmp	r0, r2
 801c6e8:	d101      	bne.n	801c6ee <memcmp+0xe>
 801c6ea:	2000      	movs	r0, #0
 801c6ec:	e005      	b.n	801c6fa <memcmp+0x1a>
 801c6ee:	7803      	ldrb	r3, [r0, #0]
 801c6f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c6f4:	42a3      	cmp	r3, r4
 801c6f6:	d001      	beq.n	801c6fc <memcmp+0x1c>
 801c6f8:	1b18      	subs	r0, r3, r4
 801c6fa:	bd10      	pop	{r4, pc}
 801c6fc:	3001      	adds	r0, #1
 801c6fe:	e7f2      	b.n	801c6e6 <memcmp+0x6>

0801c700 <memmove>:
 801c700:	4288      	cmp	r0, r1
 801c702:	b510      	push	{r4, lr}
 801c704:	eb01 0402 	add.w	r4, r1, r2
 801c708:	d902      	bls.n	801c710 <memmove+0x10>
 801c70a:	4284      	cmp	r4, r0
 801c70c:	4623      	mov	r3, r4
 801c70e:	d807      	bhi.n	801c720 <memmove+0x20>
 801c710:	1e43      	subs	r3, r0, #1
 801c712:	42a1      	cmp	r1, r4
 801c714:	d008      	beq.n	801c728 <memmove+0x28>
 801c716:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c71a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c71e:	e7f8      	b.n	801c712 <memmove+0x12>
 801c720:	4402      	add	r2, r0
 801c722:	4601      	mov	r1, r0
 801c724:	428a      	cmp	r2, r1
 801c726:	d100      	bne.n	801c72a <memmove+0x2a>
 801c728:	bd10      	pop	{r4, pc}
 801c72a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c72e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c732:	e7f7      	b.n	801c724 <memmove+0x24>

0801c734 <memset>:
 801c734:	4402      	add	r2, r0
 801c736:	4603      	mov	r3, r0
 801c738:	4293      	cmp	r3, r2
 801c73a:	d100      	bne.n	801c73e <memset+0xa>
 801c73c:	4770      	bx	lr
 801c73e:	f803 1b01 	strb.w	r1, [r3], #1
 801c742:	e7f9      	b.n	801c738 <memset+0x4>

0801c744 <strchr>:
 801c744:	b2c9      	uxtb	r1, r1
 801c746:	4603      	mov	r3, r0
 801c748:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c74c:	b11a      	cbz	r2, 801c756 <strchr+0x12>
 801c74e:	428a      	cmp	r2, r1
 801c750:	d1f9      	bne.n	801c746 <strchr+0x2>
 801c752:	4618      	mov	r0, r3
 801c754:	4770      	bx	lr
 801c756:	2900      	cmp	r1, #0
 801c758:	bf18      	it	ne
 801c75a:	2300      	movne	r3, #0
 801c75c:	e7f9      	b.n	801c752 <strchr+0xe>

0801c75e <strncmp>:
 801c75e:	b510      	push	{r4, lr}
 801c760:	b16a      	cbz	r2, 801c77e <strncmp+0x20>
 801c762:	3901      	subs	r1, #1
 801c764:	1884      	adds	r4, r0, r2
 801c766:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c76a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801c76e:	429a      	cmp	r2, r3
 801c770:	d103      	bne.n	801c77a <strncmp+0x1c>
 801c772:	42a0      	cmp	r0, r4
 801c774:	d001      	beq.n	801c77a <strncmp+0x1c>
 801c776:	2a00      	cmp	r2, #0
 801c778:	d1f5      	bne.n	801c766 <strncmp+0x8>
 801c77a:	1ad0      	subs	r0, r2, r3
 801c77c:	bd10      	pop	{r4, pc}
 801c77e:	4610      	mov	r0, r2
 801c780:	e7fc      	b.n	801c77c <strncmp+0x1e>

0801c782 <strncpy>:
 801c782:	b510      	push	{r4, lr}
 801c784:	3901      	subs	r1, #1
 801c786:	4603      	mov	r3, r0
 801c788:	b132      	cbz	r2, 801c798 <strncpy+0x16>
 801c78a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c78e:	f803 4b01 	strb.w	r4, [r3], #1
 801c792:	3a01      	subs	r2, #1
 801c794:	2c00      	cmp	r4, #0
 801c796:	d1f7      	bne.n	801c788 <strncpy+0x6>
 801c798:	441a      	add	r2, r3
 801c79a:	2100      	movs	r1, #0
 801c79c:	4293      	cmp	r3, r2
 801c79e:	d100      	bne.n	801c7a2 <strncpy+0x20>
 801c7a0:	bd10      	pop	{r4, pc}
 801c7a2:	f803 1b01 	strb.w	r1, [r3], #1
 801c7a6:	e7f9      	b.n	801c79c <strncpy+0x1a>

0801c7a8 <strstr>:
 801c7a8:	780a      	ldrb	r2, [r1, #0]
 801c7aa:	b570      	push	{r4, r5, r6, lr}
 801c7ac:	b96a      	cbnz	r2, 801c7ca <strstr+0x22>
 801c7ae:	bd70      	pop	{r4, r5, r6, pc}
 801c7b0:	429a      	cmp	r2, r3
 801c7b2:	d109      	bne.n	801c7c8 <strstr+0x20>
 801c7b4:	460c      	mov	r4, r1
 801c7b6:	4605      	mov	r5, r0
 801c7b8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801c7bc:	2b00      	cmp	r3, #0
 801c7be:	d0f6      	beq.n	801c7ae <strstr+0x6>
 801c7c0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801c7c4:	429e      	cmp	r6, r3
 801c7c6:	d0f7      	beq.n	801c7b8 <strstr+0x10>
 801c7c8:	3001      	adds	r0, #1
 801c7ca:	7803      	ldrb	r3, [r0, #0]
 801c7cc:	2b00      	cmp	r3, #0
 801c7ce:	d1ef      	bne.n	801c7b0 <strstr+0x8>
 801c7d0:	4618      	mov	r0, r3
 801c7d2:	e7ec      	b.n	801c7ae <strstr+0x6>

0801c7d4 <_close_r>:
 801c7d4:	b538      	push	{r3, r4, r5, lr}
 801c7d6:	4d06      	ldr	r5, [pc, #24]	; (801c7f0 <_close_r+0x1c>)
 801c7d8:	2300      	movs	r3, #0
 801c7da:	4604      	mov	r4, r0
 801c7dc:	4608      	mov	r0, r1
 801c7de:	602b      	str	r3, [r5, #0]
 801c7e0:	f7e6 fb4d 	bl	8002e7e <_close>
 801c7e4:	1c43      	adds	r3, r0, #1
 801c7e6:	d102      	bne.n	801c7ee <_close_r+0x1a>
 801c7e8:	682b      	ldr	r3, [r5, #0]
 801c7ea:	b103      	cbz	r3, 801c7ee <_close_r+0x1a>
 801c7ec:	6023      	str	r3, [r4, #0]
 801c7ee:	bd38      	pop	{r3, r4, r5, pc}
 801c7f0:	20010ce4 	.word	0x20010ce4

0801c7f4 <_reclaim_reent>:
 801c7f4:	4b29      	ldr	r3, [pc, #164]	; (801c89c <_reclaim_reent+0xa8>)
 801c7f6:	681b      	ldr	r3, [r3, #0]
 801c7f8:	4283      	cmp	r3, r0
 801c7fa:	b570      	push	{r4, r5, r6, lr}
 801c7fc:	4604      	mov	r4, r0
 801c7fe:	d04b      	beq.n	801c898 <_reclaim_reent+0xa4>
 801c800:	69c3      	ldr	r3, [r0, #28]
 801c802:	b143      	cbz	r3, 801c816 <_reclaim_reent+0x22>
 801c804:	68db      	ldr	r3, [r3, #12]
 801c806:	2b00      	cmp	r3, #0
 801c808:	d144      	bne.n	801c894 <_reclaim_reent+0xa0>
 801c80a:	69e3      	ldr	r3, [r4, #28]
 801c80c:	6819      	ldr	r1, [r3, #0]
 801c80e:	b111      	cbz	r1, 801c816 <_reclaim_reent+0x22>
 801c810:	4620      	mov	r0, r4
 801c812:	f000 f8f9 	bl	801ca08 <_free_r>
 801c816:	6961      	ldr	r1, [r4, #20]
 801c818:	b111      	cbz	r1, 801c820 <_reclaim_reent+0x2c>
 801c81a:	4620      	mov	r0, r4
 801c81c:	f000 f8f4 	bl	801ca08 <_free_r>
 801c820:	69e1      	ldr	r1, [r4, #28]
 801c822:	b111      	cbz	r1, 801c82a <_reclaim_reent+0x36>
 801c824:	4620      	mov	r0, r4
 801c826:	f000 f8ef 	bl	801ca08 <_free_r>
 801c82a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c82c:	b111      	cbz	r1, 801c834 <_reclaim_reent+0x40>
 801c82e:	4620      	mov	r0, r4
 801c830:	f000 f8ea 	bl	801ca08 <_free_r>
 801c834:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c836:	b111      	cbz	r1, 801c83e <_reclaim_reent+0x4a>
 801c838:	4620      	mov	r0, r4
 801c83a:	f000 f8e5 	bl	801ca08 <_free_r>
 801c83e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801c840:	b111      	cbz	r1, 801c848 <_reclaim_reent+0x54>
 801c842:	4620      	mov	r0, r4
 801c844:	f000 f8e0 	bl	801ca08 <_free_r>
 801c848:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801c84a:	b111      	cbz	r1, 801c852 <_reclaim_reent+0x5e>
 801c84c:	4620      	mov	r0, r4
 801c84e:	f000 f8db 	bl	801ca08 <_free_r>
 801c852:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801c854:	b111      	cbz	r1, 801c85c <_reclaim_reent+0x68>
 801c856:	4620      	mov	r0, r4
 801c858:	f000 f8d6 	bl	801ca08 <_free_r>
 801c85c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801c85e:	b111      	cbz	r1, 801c866 <_reclaim_reent+0x72>
 801c860:	4620      	mov	r0, r4
 801c862:	f000 f8d1 	bl	801ca08 <_free_r>
 801c866:	6a23      	ldr	r3, [r4, #32]
 801c868:	b1b3      	cbz	r3, 801c898 <_reclaim_reent+0xa4>
 801c86a:	4620      	mov	r0, r4
 801c86c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c870:	4718      	bx	r3
 801c872:	5949      	ldr	r1, [r1, r5]
 801c874:	b941      	cbnz	r1, 801c888 <_reclaim_reent+0x94>
 801c876:	3504      	adds	r5, #4
 801c878:	69e3      	ldr	r3, [r4, #28]
 801c87a:	2d80      	cmp	r5, #128	; 0x80
 801c87c:	68d9      	ldr	r1, [r3, #12]
 801c87e:	d1f8      	bne.n	801c872 <_reclaim_reent+0x7e>
 801c880:	4620      	mov	r0, r4
 801c882:	f000 f8c1 	bl	801ca08 <_free_r>
 801c886:	e7c0      	b.n	801c80a <_reclaim_reent+0x16>
 801c888:	680e      	ldr	r6, [r1, #0]
 801c88a:	4620      	mov	r0, r4
 801c88c:	f000 f8bc 	bl	801ca08 <_free_r>
 801c890:	4631      	mov	r1, r6
 801c892:	e7ef      	b.n	801c874 <_reclaim_reent+0x80>
 801c894:	2500      	movs	r5, #0
 801c896:	e7ef      	b.n	801c878 <_reclaim_reent+0x84>
 801c898:	bd70      	pop	{r4, r5, r6, pc}
 801c89a:	bf00      	nop
 801c89c:	200021d8 	.word	0x200021d8

0801c8a0 <_lseek_r>:
 801c8a0:	b538      	push	{r3, r4, r5, lr}
 801c8a2:	4d07      	ldr	r5, [pc, #28]	; (801c8c0 <_lseek_r+0x20>)
 801c8a4:	4604      	mov	r4, r0
 801c8a6:	4608      	mov	r0, r1
 801c8a8:	4611      	mov	r1, r2
 801c8aa:	2200      	movs	r2, #0
 801c8ac:	602a      	str	r2, [r5, #0]
 801c8ae:	461a      	mov	r2, r3
 801c8b0:	f7e6 fb0c 	bl	8002ecc <_lseek>
 801c8b4:	1c43      	adds	r3, r0, #1
 801c8b6:	d102      	bne.n	801c8be <_lseek_r+0x1e>
 801c8b8:	682b      	ldr	r3, [r5, #0]
 801c8ba:	b103      	cbz	r3, 801c8be <_lseek_r+0x1e>
 801c8bc:	6023      	str	r3, [r4, #0]
 801c8be:	bd38      	pop	{r3, r4, r5, pc}
 801c8c0:	20010ce4 	.word	0x20010ce4

0801c8c4 <_read_r>:
 801c8c4:	b538      	push	{r3, r4, r5, lr}
 801c8c6:	4d07      	ldr	r5, [pc, #28]	; (801c8e4 <_read_r+0x20>)
 801c8c8:	4604      	mov	r4, r0
 801c8ca:	4608      	mov	r0, r1
 801c8cc:	4611      	mov	r1, r2
 801c8ce:	2200      	movs	r2, #0
 801c8d0:	602a      	str	r2, [r5, #0]
 801c8d2:	461a      	mov	r2, r3
 801c8d4:	f7e6 fa9a 	bl	8002e0c <_read>
 801c8d8:	1c43      	adds	r3, r0, #1
 801c8da:	d102      	bne.n	801c8e2 <_read_r+0x1e>
 801c8dc:	682b      	ldr	r3, [r5, #0]
 801c8de:	b103      	cbz	r3, 801c8e2 <_read_r+0x1e>
 801c8e0:	6023      	str	r3, [r4, #0]
 801c8e2:	bd38      	pop	{r3, r4, r5, pc}
 801c8e4:	20010ce4 	.word	0x20010ce4

0801c8e8 <_sbrk_r>:
 801c8e8:	b538      	push	{r3, r4, r5, lr}
 801c8ea:	4d06      	ldr	r5, [pc, #24]	; (801c904 <_sbrk_r+0x1c>)
 801c8ec:	2300      	movs	r3, #0
 801c8ee:	4604      	mov	r4, r0
 801c8f0:	4608      	mov	r0, r1
 801c8f2:	602b      	str	r3, [r5, #0]
 801c8f4:	f7e6 faf8 	bl	8002ee8 <_sbrk>
 801c8f8:	1c43      	adds	r3, r0, #1
 801c8fa:	d102      	bne.n	801c902 <_sbrk_r+0x1a>
 801c8fc:	682b      	ldr	r3, [r5, #0]
 801c8fe:	b103      	cbz	r3, 801c902 <_sbrk_r+0x1a>
 801c900:	6023      	str	r3, [r4, #0]
 801c902:	bd38      	pop	{r3, r4, r5, pc}
 801c904:	20010ce4 	.word	0x20010ce4

0801c908 <_write_r>:
 801c908:	b538      	push	{r3, r4, r5, lr}
 801c90a:	4d07      	ldr	r5, [pc, #28]	; (801c928 <_write_r+0x20>)
 801c90c:	4604      	mov	r4, r0
 801c90e:	4608      	mov	r0, r1
 801c910:	4611      	mov	r1, r2
 801c912:	2200      	movs	r2, #0
 801c914:	602a      	str	r2, [r5, #0]
 801c916:	461a      	mov	r2, r3
 801c918:	f7e6 fa95 	bl	8002e46 <_write>
 801c91c:	1c43      	adds	r3, r0, #1
 801c91e:	d102      	bne.n	801c926 <_write_r+0x1e>
 801c920:	682b      	ldr	r3, [r5, #0]
 801c922:	b103      	cbz	r3, 801c926 <_write_r+0x1e>
 801c924:	6023      	str	r3, [r4, #0]
 801c926:	bd38      	pop	{r3, r4, r5, pc}
 801c928:	20010ce4 	.word	0x20010ce4

0801c92c <__errno>:
 801c92c:	4b01      	ldr	r3, [pc, #4]	; (801c934 <__errno+0x8>)
 801c92e:	6818      	ldr	r0, [r3, #0]
 801c930:	4770      	bx	lr
 801c932:	bf00      	nop
 801c934:	200021d8 	.word	0x200021d8

0801c938 <__libc_init_array>:
 801c938:	b570      	push	{r4, r5, r6, lr}
 801c93a:	4d0d      	ldr	r5, [pc, #52]	; (801c970 <__libc_init_array+0x38>)
 801c93c:	4c0d      	ldr	r4, [pc, #52]	; (801c974 <__libc_init_array+0x3c>)
 801c93e:	1b64      	subs	r4, r4, r5
 801c940:	10a4      	asrs	r4, r4, #2
 801c942:	2600      	movs	r6, #0
 801c944:	42a6      	cmp	r6, r4
 801c946:	d109      	bne.n	801c95c <__libc_init_array+0x24>
 801c948:	4d0b      	ldr	r5, [pc, #44]	; (801c978 <__libc_init_array+0x40>)
 801c94a:	4c0c      	ldr	r4, [pc, #48]	; (801c97c <__libc_init_array+0x44>)
 801c94c:	f000 ff00 	bl	801d750 <_init>
 801c950:	1b64      	subs	r4, r4, r5
 801c952:	10a4      	asrs	r4, r4, #2
 801c954:	2600      	movs	r6, #0
 801c956:	42a6      	cmp	r6, r4
 801c958:	d105      	bne.n	801c966 <__libc_init_array+0x2e>
 801c95a:	bd70      	pop	{r4, r5, r6, pc}
 801c95c:	f855 3b04 	ldr.w	r3, [r5], #4
 801c960:	4798      	blx	r3
 801c962:	3601      	adds	r6, #1
 801c964:	e7ee      	b.n	801c944 <__libc_init_array+0xc>
 801c966:	f855 3b04 	ldr.w	r3, [r5], #4
 801c96a:	4798      	blx	r3
 801c96c:	3601      	adds	r6, #1
 801c96e:	e7f2      	b.n	801c956 <__libc_init_array+0x1e>
 801c970:	0801f7a8 	.word	0x0801f7a8
 801c974:	0801f7a8 	.word	0x0801f7a8
 801c978:	0801f7a8 	.word	0x0801f7a8
 801c97c:	0801f7c0 	.word	0x0801f7c0

0801c980 <__retarget_lock_init_recursive>:
 801c980:	4770      	bx	lr

0801c982 <__retarget_lock_acquire_recursive>:
 801c982:	4770      	bx	lr

0801c984 <__retarget_lock_release_recursive>:
 801c984:	4770      	bx	lr

0801c986 <strcpy>:
 801c986:	4603      	mov	r3, r0
 801c988:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c98c:	f803 2b01 	strb.w	r2, [r3], #1
 801c990:	2a00      	cmp	r2, #0
 801c992:	d1f9      	bne.n	801c988 <strcpy+0x2>
 801c994:	4770      	bx	lr

0801c996 <memcpy>:
 801c996:	440a      	add	r2, r1
 801c998:	4291      	cmp	r1, r2
 801c99a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801c99e:	d100      	bne.n	801c9a2 <memcpy+0xc>
 801c9a0:	4770      	bx	lr
 801c9a2:	b510      	push	{r4, lr}
 801c9a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c9a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c9ac:	4291      	cmp	r1, r2
 801c9ae:	d1f9      	bne.n	801c9a4 <memcpy+0xe>
 801c9b0:	bd10      	pop	{r4, pc}
	...

0801c9b4 <__assert_func>:
 801c9b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c9b6:	4614      	mov	r4, r2
 801c9b8:	461a      	mov	r2, r3
 801c9ba:	4b09      	ldr	r3, [pc, #36]	; (801c9e0 <__assert_func+0x2c>)
 801c9bc:	681b      	ldr	r3, [r3, #0]
 801c9be:	4605      	mov	r5, r0
 801c9c0:	68d8      	ldr	r0, [r3, #12]
 801c9c2:	b14c      	cbz	r4, 801c9d8 <__assert_func+0x24>
 801c9c4:	4b07      	ldr	r3, [pc, #28]	; (801c9e4 <__assert_func+0x30>)
 801c9c6:	9100      	str	r1, [sp, #0]
 801c9c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c9cc:	4906      	ldr	r1, [pc, #24]	; (801c9e8 <__assert_func+0x34>)
 801c9ce:	462b      	mov	r3, r5
 801c9d0:	f000 fc04 	bl	801d1dc <fiprintf>
 801c9d4:	f000 fc14 	bl	801d200 <abort>
 801c9d8:	4b04      	ldr	r3, [pc, #16]	; (801c9ec <__assert_func+0x38>)
 801c9da:	461c      	mov	r4, r3
 801c9dc:	e7f3      	b.n	801c9c6 <__assert_func+0x12>
 801c9de:	bf00      	nop
 801c9e0:	200021d8 	.word	0x200021d8
 801c9e4:	0801f730 	.word	0x0801f730
 801c9e8:	0801f73d 	.word	0x0801f73d
 801c9ec:	0801f76b 	.word	0x0801f76b

0801c9f0 <__env_lock>:
 801c9f0:	4801      	ldr	r0, [pc, #4]	; (801c9f8 <__env_lock+0x8>)
 801c9f2:	f7ff bfc6 	b.w	801c982 <__retarget_lock_acquire_recursive>
 801c9f6:	bf00      	nop
 801c9f8:	20010ce8 	.word	0x20010ce8

0801c9fc <__env_unlock>:
 801c9fc:	4801      	ldr	r0, [pc, #4]	; (801ca04 <__env_unlock+0x8>)
 801c9fe:	f7ff bfc1 	b.w	801c984 <__retarget_lock_release_recursive>
 801ca02:	bf00      	nop
 801ca04:	20010ce8 	.word	0x20010ce8

0801ca08 <_free_r>:
 801ca08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ca0a:	2900      	cmp	r1, #0
 801ca0c:	d044      	beq.n	801ca98 <_free_r+0x90>
 801ca0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ca12:	9001      	str	r0, [sp, #4]
 801ca14:	2b00      	cmp	r3, #0
 801ca16:	f1a1 0404 	sub.w	r4, r1, #4
 801ca1a:	bfb8      	it	lt
 801ca1c:	18e4      	addlt	r4, r4, r3
 801ca1e:	f7ff fbc1 	bl	801c1a4 <__malloc_lock>
 801ca22:	4a1e      	ldr	r2, [pc, #120]	; (801ca9c <_free_r+0x94>)
 801ca24:	9801      	ldr	r0, [sp, #4]
 801ca26:	6813      	ldr	r3, [r2, #0]
 801ca28:	b933      	cbnz	r3, 801ca38 <_free_r+0x30>
 801ca2a:	6063      	str	r3, [r4, #4]
 801ca2c:	6014      	str	r4, [r2, #0]
 801ca2e:	b003      	add	sp, #12
 801ca30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ca34:	f7ff bbbc 	b.w	801c1b0 <__malloc_unlock>
 801ca38:	42a3      	cmp	r3, r4
 801ca3a:	d908      	bls.n	801ca4e <_free_r+0x46>
 801ca3c:	6825      	ldr	r5, [r4, #0]
 801ca3e:	1961      	adds	r1, r4, r5
 801ca40:	428b      	cmp	r3, r1
 801ca42:	bf01      	itttt	eq
 801ca44:	6819      	ldreq	r1, [r3, #0]
 801ca46:	685b      	ldreq	r3, [r3, #4]
 801ca48:	1949      	addeq	r1, r1, r5
 801ca4a:	6021      	streq	r1, [r4, #0]
 801ca4c:	e7ed      	b.n	801ca2a <_free_r+0x22>
 801ca4e:	461a      	mov	r2, r3
 801ca50:	685b      	ldr	r3, [r3, #4]
 801ca52:	b10b      	cbz	r3, 801ca58 <_free_r+0x50>
 801ca54:	42a3      	cmp	r3, r4
 801ca56:	d9fa      	bls.n	801ca4e <_free_r+0x46>
 801ca58:	6811      	ldr	r1, [r2, #0]
 801ca5a:	1855      	adds	r5, r2, r1
 801ca5c:	42a5      	cmp	r5, r4
 801ca5e:	d10b      	bne.n	801ca78 <_free_r+0x70>
 801ca60:	6824      	ldr	r4, [r4, #0]
 801ca62:	4421      	add	r1, r4
 801ca64:	1854      	adds	r4, r2, r1
 801ca66:	42a3      	cmp	r3, r4
 801ca68:	6011      	str	r1, [r2, #0]
 801ca6a:	d1e0      	bne.n	801ca2e <_free_r+0x26>
 801ca6c:	681c      	ldr	r4, [r3, #0]
 801ca6e:	685b      	ldr	r3, [r3, #4]
 801ca70:	6053      	str	r3, [r2, #4]
 801ca72:	440c      	add	r4, r1
 801ca74:	6014      	str	r4, [r2, #0]
 801ca76:	e7da      	b.n	801ca2e <_free_r+0x26>
 801ca78:	d902      	bls.n	801ca80 <_free_r+0x78>
 801ca7a:	230c      	movs	r3, #12
 801ca7c:	6003      	str	r3, [r0, #0]
 801ca7e:	e7d6      	b.n	801ca2e <_free_r+0x26>
 801ca80:	6825      	ldr	r5, [r4, #0]
 801ca82:	1961      	adds	r1, r4, r5
 801ca84:	428b      	cmp	r3, r1
 801ca86:	bf04      	itt	eq
 801ca88:	6819      	ldreq	r1, [r3, #0]
 801ca8a:	685b      	ldreq	r3, [r3, #4]
 801ca8c:	6063      	str	r3, [r4, #4]
 801ca8e:	bf04      	itt	eq
 801ca90:	1949      	addeq	r1, r1, r5
 801ca92:	6021      	streq	r1, [r4, #0]
 801ca94:	6054      	str	r4, [r2, #4]
 801ca96:	e7ca      	b.n	801ca2e <_free_r+0x26>
 801ca98:	b003      	add	sp, #12
 801ca9a:	bd30      	pop	{r4, r5, pc}
 801ca9c:	20010ba0 	.word	0x20010ba0

0801caa0 <_malloc_usable_size_r>:
 801caa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801caa4:	1f18      	subs	r0, r3, #4
 801caa6:	2b00      	cmp	r3, #0
 801caa8:	bfbc      	itt	lt
 801caaa:	580b      	ldrlt	r3, [r1, r0]
 801caac:	18c0      	addlt	r0, r0, r3
 801caae:	4770      	bx	lr

0801cab0 <__ssputs_r>:
 801cab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cab4:	688e      	ldr	r6, [r1, #8]
 801cab6:	461f      	mov	r7, r3
 801cab8:	42be      	cmp	r6, r7
 801caba:	680b      	ldr	r3, [r1, #0]
 801cabc:	4682      	mov	sl, r0
 801cabe:	460c      	mov	r4, r1
 801cac0:	4690      	mov	r8, r2
 801cac2:	d82c      	bhi.n	801cb1e <__ssputs_r+0x6e>
 801cac4:	898a      	ldrh	r2, [r1, #12]
 801cac6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801caca:	d026      	beq.n	801cb1a <__ssputs_r+0x6a>
 801cacc:	6965      	ldr	r5, [r4, #20]
 801cace:	6909      	ldr	r1, [r1, #16]
 801cad0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cad4:	eba3 0901 	sub.w	r9, r3, r1
 801cad8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801cadc:	1c7b      	adds	r3, r7, #1
 801cade:	444b      	add	r3, r9
 801cae0:	106d      	asrs	r5, r5, #1
 801cae2:	429d      	cmp	r5, r3
 801cae4:	bf38      	it	cc
 801cae6:	461d      	movcc	r5, r3
 801cae8:	0553      	lsls	r3, r2, #21
 801caea:	d527      	bpl.n	801cb3c <__ssputs_r+0x8c>
 801caec:	4629      	mov	r1, r5
 801caee:	f7ff fad9 	bl	801c0a4 <_malloc_r>
 801caf2:	4606      	mov	r6, r0
 801caf4:	b360      	cbz	r0, 801cb50 <__ssputs_r+0xa0>
 801caf6:	6921      	ldr	r1, [r4, #16]
 801caf8:	464a      	mov	r2, r9
 801cafa:	f7ff ff4c 	bl	801c996 <memcpy>
 801cafe:	89a3      	ldrh	r3, [r4, #12]
 801cb00:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801cb04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cb08:	81a3      	strh	r3, [r4, #12]
 801cb0a:	6126      	str	r6, [r4, #16]
 801cb0c:	6165      	str	r5, [r4, #20]
 801cb0e:	444e      	add	r6, r9
 801cb10:	eba5 0509 	sub.w	r5, r5, r9
 801cb14:	6026      	str	r6, [r4, #0]
 801cb16:	60a5      	str	r5, [r4, #8]
 801cb18:	463e      	mov	r6, r7
 801cb1a:	42be      	cmp	r6, r7
 801cb1c:	d900      	bls.n	801cb20 <__ssputs_r+0x70>
 801cb1e:	463e      	mov	r6, r7
 801cb20:	6820      	ldr	r0, [r4, #0]
 801cb22:	4632      	mov	r2, r6
 801cb24:	4641      	mov	r1, r8
 801cb26:	f7ff fdeb 	bl	801c700 <memmove>
 801cb2a:	68a3      	ldr	r3, [r4, #8]
 801cb2c:	1b9b      	subs	r3, r3, r6
 801cb2e:	60a3      	str	r3, [r4, #8]
 801cb30:	6823      	ldr	r3, [r4, #0]
 801cb32:	4433      	add	r3, r6
 801cb34:	6023      	str	r3, [r4, #0]
 801cb36:	2000      	movs	r0, #0
 801cb38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cb3c:	462a      	mov	r2, r5
 801cb3e:	f7ff fbb1 	bl	801c2a4 <_realloc_r>
 801cb42:	4606      	mov	r6, r0
 801cb44:	2800      	cmp	r0, #0
 801cb46:	d1e0      	bne.n	801cb0a <__ssputs_r+0x5a>
 801cb48:	6921      	ldr	r1, [r4, #16]
 801cb4a:	4650      	mov	r0, sl
 801cb4c:	f7ff ff5c 	bl	801ca08 <_free_r>
 801cb50:	230c      	movs	r3, #12
 801cb52:	f8ca 3000 	str.w	r3, [sl]
 801cb56:	89a3      	ldrh	r3, [r4, #12]
 801cb58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cb5c:	81a3      	strh	r3, [r4, #12]
 801cb5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cb62:	e7e9      	b.n	801cb38 <__ssputs_r+0x88>

0801cb64 <_svfiprintf_r>:
 801cb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb68:	4698      	mov	r8, r3
 801cb6a:	898b      	ldrh	r3, [r1, #12]
 801cb6c:	061b      	lsls	r3, r3, #24
 801cb6e:	b09d      	sub	sp, #116	; 0x74
 801cb70:	4607      	mov	r7, r0
 801cb72:	460d      	mov	r5, r1
 801cb74:	4614      	mov	r4, r2
 801cb76:	d50e      	bpl.n	801cb96 <_svfiprintf_r+0x32>
 801cb78:	690b      	ldr	r3, [r1, #16]
 801cb7a:	b963      	cbnz	r3, 801cb96 <_svfiprintf_r+0x32>
 801cb7c:	2140      	movs	r1, #64	; 0x40
 801cb7e:	f7ff fa91 	bl	801c0a4 <_malloc_r>
 801cb82:	6028      	str	r0, [r5, #0]
 801cb84:	6128      	str	r0, [r5, #16]
 801cb86:	b920      	cbnz	r0, 801cb92 <_svfiprintf_r+0x2e>
 801cb88:	230c      	movs	r3, #12
 801cb8a:	603b      	str	r3, [r7, #0]
 801cb8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cb90:	e0d0      	b.n	801cd34 <_svfiprintf_r+0x1d0>
 801cb92:	2340      	movs	r3, #64	; 0x40
 801cb94:	616b      	str	r3, [r5, #20]
 801cb96:	2300      	movs	r3, #0
 801cb98:	9309      	str	r3, [sp, #36]	; 0x24
 801cb9a:	2320      	movs	r3, #32
 801cb9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cba0:	f8cd 800c 	str.w	r8, [sp, #12]
 801cba4:	2330      	movs	r3, #48	; 0x30
 801cba6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801cd4c <_svfiprintf_r+0x1e8>
 801cbaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cbae:	f04f 0901 	mov.w	r9, #1
 801cbb2:	4623      	mov	r3, r4
 801cbb4:	469a      	mov	sl, r3
 801cbb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cbba:	b10a      	cbz	r2, 801cbc0 <_svfiprintf_r+0x5c>
 801cbbc:	2a25      	cmp	r2, #37	; 0x25
 801cbbe:	d1f9      	bne.n	801cbb4 <_svfiprintf_r+0x50>
 801cbc0:	ebba 0b04 	subs.w	fp, sl, r4
 801cbc4:	d00b      	beq.n	801cbde <_svfiprintf_r+0x7a>
 801cbc6:	465b      	mov	r3, fp
 801cbc8:	4622      	mov	r2, r4
 801cbca:	4629      	mov	r1, r5
 801cbcc:	4638      	mov	r0, r7
 801cbce:	f7ff ff6f 	bl	801cab0 <__ssputs_r>
 801cbd2:	3001      	adds	r0, #1
 801cbd4:	f000 80a9 	beq.w	801cd2a <_svfiprintf_r+0x1c6>
 801cbd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cbda:	445a      	add	r2, fp
 801cbdc:	9209      	str	r2, [sp, #36]	; 0x24
 801cbde:	f89a 3000 	ldrb.w	r3, [sl]
 801cbe2:	2b00      	cmp	r3, #0
 801cbe4:	f000 80a1 	beq.w	801cd2a <_svfiprintf_r+0x1c6>
 801cbe8:	2300      	movs	r3, #0
 801cbea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801cbee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cbf2:	f10a 0a01 	add.w	sl, sl, #1
 801cbf6:	9304      	str	r3, [sp, #16]
 801cbf8:	9307      	str	r3, [sp, #28]
 801cbfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cbfe:	931a      	str	r3, [sp, #104]	; 0x68
 801cc00:	4654      	mov	r4, sl
 801cc02:	2205      	movs	r2, #5
 801cc04:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cc08:	4850      	ldr	r0, [pc, #320]	; (801cd4c <_svfiprintf_r+0x1e8>)
 801cc0a:	f7e3 fb29 	bl	8000260 <memchr>
 801cc0e:	9a04      	ldr	r2, [sp, #16]
 801cc10:	b9d8      	cbnz	r0, 801cc4a <_svfiprintf_r+0xe6>
 801cc12:	06d0      	lsls	r0, r2, #27
 801cc14:	bf44      	itt	mi
 801cc16:	2320      	movmi	r3, #32
 801cc18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cc1c:	0711      	lsls	r1, r2, #28
 801cc1e:	bf44      	itt	mi
 801cc20:	232b      	movmi	r3, #43	; 0x2b
 801cc22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cc26:	f89a 3000 	ldrb.w	r3, [sl]
 801cc2a:	2b2a      	cmp	r3, #42	; 0x2a
 801cc2c:	d015      	beq.n	801cc5a <_svfiprintf_r+0xf6>
 801cc2e:	9a07      	ldr	r2, [sp, #28]
 801cc30:	4654      	mov	r4, sl
 801cc32:	2000      	movs	r0, #0
 801cc34:	f04f 0c0a 	mov.w	ip, #10
 801cc38:	4621      	mov	r1, r4
 801cc3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cc3e:	3b30      	subs	r3, #48	; 0x30
 801cc40:	2b09      	cmp	r3, #9
 801cc42:	d94d      	bls.n	801cce0 <_svfiprintf_r+0x17c>
 801cc44:	b1b0      	cbz	r0, 801cc74 <_svfiprintf_r+0x110>
 801cc46:	9207      	str	r2, [sp, #28]
 801cc48:	e014      	b.n	801cc74 <_svfiprintf_r+0x110>
 801cc4a:	eba0 0308 	sub.w	r3, r0, r8
 801cc4e:	fa09 f303 	lsl.w	r3, r9, r3
 801cc52:	4313      	orrs	r3, r2
 801cc54:	9304      	str	r3, [sp, #16]
 801cc56:	46a2      	mov	sl, r4
 801cc58:	e7d2      	b.n	801cc00 <_svfiprintf_r+0x9c>
 801cc5a:	9b03      	ldr	r3, [sp, #12]
 801cc5c:	1d19      	adds	r1, r3, #4
 801cc5e:	681b      	ldr	r3, [r3, #0]
 801cc60:	9103      	str	r1, [sp, #12]
 801cc62:	2b00      	cmp	r3, #0
 801cc64:	bfbb      	ittet	lt
 801cc66:	425b      	neglt	r3, r3
 801cc68:	f042 0202 	orrlt.w	r2, r2, #2
 801cc6c:	9307      	strge	r3, [sp, #28]
 801cc6e:	9307      	strlt	r3, [sp, #28]
 801cc70:	bfb8      	it	lt
 801cc72:	9204      	strlt	r2, [sp, #16]
 801cc74:	7823      	ldrb	r3, [r4, #0]
 801cc76:	2b2e      	cmp	r3, #46	; 0x2e
 801cc78:	d10c      	bne.n	801cc94 <_svfiprintf_r+0x130>
 801cc7a:	7863      	ldrb	r3, [r4, #1]
 801cc7c:	2b2a      	cmp	r3, #42	; 0x2a
 801cc7e:	d134      	bne.n	801ccea <_svfiprintf_r+0x186>
 801cc80:	9b03      	ldr	r3, [sp, #12]
 801cc82:	1d1a      	adds	r2, r3, #4
 801cc84:	681b      	ldr	r3, [r3, #0]
 801cc86:	9203      	str	r2, [sp, #12]
 801cc88:	2b00      	cmp	r3, #0
 801cc8a:	bfb8      	it	lt
 801cc8c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801cc90:	3402      	adds	r4, #2
 801cc92:	9305      	str	r3, [sp, #20]
 801cc94:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801cd5c <_svfiprintf_r+0x1f8>
 801cc98:	7821      	ldrb	r1, [r4, #0]
 801cc9a:	2203      	movs	r2, #3
 801cc9c:	4650      	mov	r0, sl
 801cc9e:	f7e3 fadf 	bl	8000260 <memchr>
 801cca2:	b138      	cbz	r0, 801ccb4 <_svfiprintf_r+0x150>
 801cca4:	9b04      	ldr	r3, [sp, #16]
 801cca6:	eba0 000a 	sub.w	r0, r0, sl
 801ccaa:	2240      	movs	r2, #64	; 0x40
 801ccac:	4082      	lsls	r2, r0
 801ccae:	4313      	orrs	r3, r2
 801ccb0:	3401      	adds	r4, #1
 801ccb2:	9304      	str	r3, [sp, #16]
 801ccb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ccb8:	4825      	ldr	r0, [pc, #148]	; (801cd50 <_svfiprintf_r+0x1ec>)
 801ccba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ccbe:	2206      	movs	r2, #6
 801ccc0:	f7e3 face 	bl	8000260 <memchr>
 801ccc4:	2800      	cmp	r0, #0
 801ccc6:	d038      	beq.n	801cd3a <_svfiprintf_r+0x1d6>
 801ccc8:	4b22      	ldr	r3, [pc, #136]	; (801cd54 <_svfiprintf_r+0x1f0>)
 801ccca:	bb1b      	cbnz	r3, 801cd14 <_svfiprintf_r+0x1b0>
 801cccc:	9b03      	ldr	r3, [sp, #12]
 801ccce:	3307      	adds	r3, #7
 801ccd0:	f023 0307 	bic.w	r3, r3, #7
 801ccd4:	3308      	adds	r3, #8
 801ccd6:	9303      	str	r3, [sp, #12]
 801ccd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ccda:	4433      	add	r3, r6
 801ccdc:	9309      	str	r3, [sp, #36]	; 0x24
 801ccde:	e768      	b.n	801cbb2 <_svfiprintf_r+0x4e>
 801cce0:	fb0c 3202 	mla	r2, ip, r2, r3
 801cce4:	460c      	mov	r4, r1
 801cce6:	2001      	movs	r0, #1
 801cce8:	e7a6      	b.n	801cc38 <_svfiprintf_r+0xd4>
 801ccea:	2300      	movs	r3, #0
 801ccec:	3401      	adds	r4, #1
 801ccee:	9305      	str	r3, [sp, #20]
 801ccf0:	4619      	mov	r1, r3
 801ccf2:	f04f 0c0a 	mov.w	ip, #10
 801ccf6:	4620      	mov	r0, r4
 801ccf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ccfc:	3a30      	subs	r2, #48	; 0x30
 801ccfe:	2a09      	cmp	r2, #9
 801cd00:	d903      	bls.n	801cd0a <_svfiprintf_r+0x1a6>
 801cd02:	2b00      	cmp	r3, #0
 801cd04:	d0c6      	beq.n	801cc94 <_svfiprintf_r+0x130>
 801cd06:	9105      	str	r1, [sp, #20]
 801cd08:	e7c4      	b.n	801cc94 <_svfiprintf_r+0x130>
 801cd0a:	fb0c 2101 	mla	r1, ip, r1, r2
 801cd0e:	4604      	mov	r4, r0
 801cd10:	2301      	movs	r3, #1
 801cd12:	e7f0      	b.n	801ccf6 <_svfiprintf_r+0x192>
 801cd14:	ab03      	add	r3, sp, #12
 801cd16:	9300      	str	r3, [sp, #0]
 801cd18:	462a      	mov	r2, r5
 801cd1a:	4b0f      	ldr	r3, [pc, #60]	; (801cd58 <_svfiprintf_r+0x1f4>)
 801cd1c:	a904      	add	r1, sp, #16
 801cd1e:	4638      	mov	r0, r7
 801cd20:	f3af 8000 	nop.w
 801cd24:	1c42      	adds	r2, r0, #1
 801cd26:	4606      	mov	r6, r0
 801cd28:	d1d6      	bne.n	801ccd8 <_svfiprintf_r+0x174>
 801cd2a:	89ab      	ldrh	r3, [r5, #12]
 801cd2c:	065b      	lsls	r3, r3, #25
 801cd2e:	f53f af2d 	bmi.w	801cb8c <_svfiprintf_r+0x28>
 801cd32:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cd34:	b01d      	add	sp, #116	; 0x74
 801cd36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd3a:	ab03      	add	r3, sp, #12
 801cd3c:	9300      	str	r3, [sp, #0]
 801cd3e:	462a      	mov	r2, r5
 801cd40:	4b05      	ldr	r3, [pc, #20]	; (801cd58 <_svfiprintf_r+0x1f4>)
 801cd42:	a904      	add	r1, sp, #16
 801cd44:	4638      	mov	r0, r7
 801cd46:	f000 f879 	bl	801ce3c <_printf_i>
 801cd4a:	e7eb      	b.n	801cd24 <_svfiprintf_r+0x1c0>
 801cd4c:	0801f76c 	.word	0x0801f76c
 801cd50:	0801f776 	.word	0x0801f776
 801cd54:	00000000 	.word	0x00000000
 801cd58:	0801cab1 	.word	0x0801cab1
 801cd5c:	0801f772 	.word	0x0801f772

0801cd60 <_printf_common>:
 801cd60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cd64:	4616      	mov	r6, r2
 801cd66:	4699      	mov	r9, r3
 801cd68:	688a      	ldr	r2, [r1, #8]
 801cd6a:	690b      	ldr	r3, [r1, #16]
 801cd6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801cd70:	4293      	cmp	r3, r2
 801cd72:	bfb8      	it	lt
 801cd74:	4613      	movlt	r3, r2
 801cd76:	6033      	str	r3, [r6, #0]
 801cd78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801cd7c:	4607      	mov	r7, r0
 801cd7e:	460c      	mov	r4, r1
 801cd80:	b10a      	cbz	r2, 801cd86 <_printf_common+0x26>
 801cd82:	3301      	adds	r3, #1
 801cd84:	6033      	str	r3, [r6, #0]
 801cd86:	6823      	ldr	r3, [r4, #0]
 801cd88:	0699      	lsls	r1, r3, #26
 801cd8a:	bf42      	ittt	mi
 801cd8c:	6833      	ldrmi	r3, [r6, #0]
 801cd8e:	3302      	addmi	r3, #2
 801cd90:	6033      	strmi	r3, [r6, #0]
 801cd92:	6825      	ldr	r5, [r4, #0]
 801cd94:	f015 0506 	ands.w	r5, r5, #6
 801cd98:	d106      	bne.n	801cda8 <_printf_common+0x48>
 801cd9a:	f104 0a19 	add.w	sl, r4, #25
 801cd9e:	68e3      	ldr	r3, [r4, #12]
 801cda0:	6832      	ldr	r2, [r6, #0]
 801cda2:	1a9b      	subs	r3, r3, r2
 801cda4:	42ab      	cmp	r3, r5
 801cda6:	dc26      	bgt.n	801cdf6 <_printf_common+0x96>
 801cda8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801cdac:	1e13      	subs	r3, r2, #0
 801cdae:	6822      	ldr	r2, [r4, #0]
 801cdb0:	bf18      	it	ne
 801cdb2:	2301      	movne	r3, #1
 801cdb4:	0692      	lsls	r2, r2, #26
 801cdb6:	d42b      	bmi.n	801ce10 <_printf_common+0xb0>
 801cdb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801cdbc:	4649      	mov	r1, r9
 801cdbe:	4638      	mov	r0, r7
 801cdc0:	47c0      	blx	r8
 801cdc2:	3001      	adds	r0, #1
 801cdc4:	d01e      	beq.n	801ce04 <_printf_common+0xa4>
 801cdc6:	6823      	ldr	r3, [r4, #0]
 801cdc8:	6922      	ldr	r2, [r4, #16]
 801cdca:	f003 0306 	and.w	r3, r3, #6
 801cdce:	2b04      	cmp	r3, #4
 801cdd0:	bf02      	ittt	eq
 801cdd2:	68e5      	ldreq	r5, [r4, #12]
 801cdd4:	6833      	ldreq	r3, [r6, #0]
 801cdd6:	1aed      	subeq	r5, r5, r3
 801cdd8:	68a3      	ldr	r3, [r4, #8]
 801cdda:	bf0c      	ite	eq
 801cddc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cde0:	2500      	movne	r5, #0
 801cde2:	4293      	cmp	r3, r2
 801cde4:	bfc4      	itt	gt
 801cde6:	1a9b      	subgt	r3, r3, r2
 801cde8:	18ed      	addgt	r5, r5, r3
 801cdea:	2600      	movs	r6, #0
 801cdec:	341a      	adds	r4, #26
 801cdee:	42b5      	cmp	r5, r6
 801cdf0:	d11a      	bne.n	801ce28 <_printf_common+0xc8>
 801cdf2:	2000      	movs	r0, #0
 801cdf4:	e008      	b.n	801ce08 <_printf_common+0xa8>
 801cdf6:	2301      	movs	r3, #1
 801cdf8:	4652      	mov	r2, sl
 801cdfa:	4649      	mov	r1, r9
 801cdfc:	4638      	mov	r0, r7
 801cdfe:	47c0      	blx	r8
 801ce00:	3001      	adds	r0, #1
 801ce02:	d103      	bne.n	801ce0c <_printf_common+0xac>
 801ce04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ce08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce0c:	3501      	adds	r5, #1
 801ce0e:	e7c6      	b.n	801cd9e <_printf_common+0x3e>
 801ce10:	18e1      	adds	r1, r4, r3
 801ce12:	1c5a      	adds	r2, r3, #1
 801ce14:	2030      	movs	r0, #48	; 0x30
 801ce16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ce1a:	4422      	add	r2, r4
 801ce1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ce20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ce24:	3302      	adds	r3, #2
 801ce26:	e7c7      	b.n	801cdb8 <_printf_common+0x58>
 801ce28:	2301      	movs	r3, #1
 801ce2a:	4622      	mov	r2, r4
 801ce2c:	4649      	mov	r1, r9
 801ce2e:	4638      	mov	r0, r7
 801ce30:	47c0      	blx	r8
 801ce32:	3001      	adds	r0, #1
 801ce34:	d0e6      	beq.n	801ce04 <_printf_common+0xa4>
 801ce36:	3601      	adds	r6, #1
 801ce38:	e7d9      	b.n	801cdee <_printf_common+0x8e>
	...

0801ce3c <_printf_i>:
 801ce3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ce40:	7e0f      	ldrb	r7, [r1, #24]
 801ce42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ce44:	2f78      	cmp	r7, #120	; 0x78
 801ce46:	4691      	mov	r9, r2
 801ce48:	4680      	mov	r8, r0
 801ce4a:	460c      	mov	r4, r1
 801ce4c:	469a      	mov	sl, r3
 801ce4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801ce52:	d807      	bhi.n	801ce64 <_printf_i+0x28>
 801ce54:	2f62      	cmp	r7, #98	; 0x62
 801ce56:	d80a      	bhi.n	801ce6e <_printf_i+0x32>
 801ce58:	2f00      	cmp	r7, #0
 801ce5a:	f000 80d4 	beq.w	801d006 <_printf_i+0x1ca>
 801ce5e:	2f58      	cmp	r7, #88	; 0x58
 801ce60:	f000 80c0 	beq.w	801cfe4 <_printf_i+0x1a8>
 801ce64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ce68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ce6c:	e03a      	b.n	801cee4 <_printf_i+0xa8>
 801ce6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ce72:	2b15      	cmp	r3, #21
 801ce74:	d8f6      	bhi.n	801ce64 <_printf_i+0x28>
 801ce76:	a101      	add	r1, pc, #4	; (adr r1, 801ce7c <_printf_i+0x40>)
 801ce78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ce7c:	0801ced5 	.word	0x0801ced5
 801ce80:	0801cee9 	.word	0x0801cee9
 801ce84:	0801ce65 	.word	0x0801ce65
 801ce88:	0801ce65 	.word	0x0801ce65
 801ce8c:	0801ce65 	.word	0x0801ce65
 801ce90:	0801ce65 	.word	0x0801ce65
 801ce94:	0801cee9 	.word	0x0801cee9
 801ce98:	0801ce65 	.word	0x0801ce65
 801ce9c:	0801ce65 	.word	0x0801ce65
 801cea0:	0801ce65 	.word	0x0801ce65
 801cea4:	0801ce65 	.word	0x0801ce65
 801cea8:	0801cfed 	.word	0x0801cfed
 801ceac:	0801cf15 	.word	0x0801cf15
 801ceb0:	0801cfa7 	.word	0x0801cfa7
 801ceb4:	0801ce65 	.word	0x0801ce65
 801ceb8:	0801ce65 	.word	0x0801ce65
 801cebc:	0801d00f 	.word	0x0801d00f
 801cec0:	0801ce65 	.word	0x0801ce65
 801cec4:	0801cf15 	.word	0x0801cf15
 801cec8:	0801ce65 	.word	0x0801ce65
 801cecc:	0801ce65 	.word	0x0801ce65
 801ced0:	0801cfaf 	.word	0x0801cfaf
 801ced4:	682b      	ldr	r3, [r5, #0]
 801ced6:	1d1a      	adds	r2, r3, #4
 801ced8:	681b      	ldr	r3, [r3, #0]
 801ceda:	602a      	str	r2, [r5, #0]
 801cedc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801cee0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801cee4:	2301      	movs	r3, #1
 801cee6:	e09f      	b.n	801d028 <_printf_i+0x1ec>
 801cee8:	6820      	ldr	r0, [r4, #0]
 801ceea:	682b      	ldr	r3, [r5, #0]
 801ceec:	0607      	lsls	r7, r0, #24
 801ceee:	f103 0104 	add.w	r1, r3, #4
 801cef2:	6029      	str	r1, [r5, #0]
 801cef4:	d501      	bpl.n	801cefa <_printf_i+0xbe>
 801cef6:	681e      	ldr	r6, [r3, #0]
 801cef8:	e003      	b.n	801cf02 <_printf_i+0xc6>
 801cefa:	0646      	lsls	r6, r0, #25
 801cefc:	d5fb      	bpl.n	801cef6 <_printf_i+0xba>
 801cefe:	f9b3 6000 	ldrsh.w	r6, [r3]
 801cf02:	2e00      	cmp	r6, #0
 801cf04:	da03      	bge.n	801cf0e <_printf_i+0xd2>
 801cf06:	232d      	movs	r3, #45	; 0x2d
 801cf08:	4276      	negs	r6, r6
 801cf0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cf0e:	485a      	ldr	r0, [pc, #360]	; (801d078 <_printf_i+0x23c>)
 801cf10:	230a      	movs	r3, #10
 801cf12:	e012      	b.n	801cf3a <_printf_i+0xfe>
 801cf14:	682b      	ldr	r3, [r5, #0]
 801cf16:	6820      	ldr	r0, [r4, #0]
 801cf18:	1d19      	adds	r1, r3, #4
 801cf1a:	6029      	str	r1, [r5, #0]
 801cf1c:	0605      	lsls	r5, r0, #24
 801cf1e:	d501      	bpl.n	801cf24 <_printf_i+0xe8>
 801cf20:	681e      	ldr	r6, [r3, #0]
 801cf22:	e002      	b.n	801cf2a <_printf_i+0xee>
 801cf24:	0641      	lsls	r1, r0, #25
 801cf26:	d5fb      	bpl.n	801cf20 <_printf_i+0xe4>
 801cf28:	881e      	ldrh	r6, [r3, #0]
 801cf2a:	4853      	ldr	r0, [pc, #332]	; (801d078 <_printf_i+0x23c>)
 801cf2c:	2f6f      	cmp	r7, #111	; 0x6f
 801cf2e:	bf0c      	ite	eq
 801cf30:	2308      	moveq	r3, #8
 801cf32:	230a      	movne	r3, #10
 801cf34:	2100      	movs	r1, #0
 801cf36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801cf3a:	6865      	ldr	r5, [r4, #4]
 801cf3c:	60a5      	str	r5, [r4, #8]
 801cf3e:	2d00      	cmp	r5, #0
 801cf40:	bfa2      	ittt	ge
 801cf42:	6821      	ldrge	r1, [r4, #0]
 801cf44:	f021 0104 	bicge.w	r1, r1, #4
 801cf48:	6021      	strge	r1, [r4, #0]
 801cf4a:	b90e      	cbnz	r6, 801cf50 <_printf_i+0x114>
 801cf4c:	2d00      	cmp	r5, #0
 801cf4e:	d04b      	beq.n	801cfe8 <_printf_i+0x1ac>
 801cf50:	4615      	mov	r5, r2
 801cf52:	fbb6 f1f3 	udiv	r1, r6, r3
 801cf56:	fb03 6711 	mls	r7, r3, r1, r6
 801cf5a:	5dc7      	ldrb	r7, [r0, r7]
 801cf5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801cf60:	4637      	mov	r7, r6
 801cf62:	42bb      	cmp	r3, r7
 801cf64:	460e      	mov	r6, r1
 801cf66:	d9f4      	bls.n	801cf52 <_printf_i+0x116>
 801cf68:	2b08      	cmp	r3, #8
 801cf6a:	d10b      	bne.n	801cf84 <_printf_i+0x148>
 801cf6c:	6823      	ldr	r3, [r4, #0]
 801cf6e:	07de      	lsls	r6, r3, #31
 801cf70:	d508      	bpl.n	801cf84 <_printf_i+0x148>
 801cf72:	6923      	ldr	r3, [r4, #16]
 801cf74:	6861      	ldr	r1, [r4, #4]
 801cf76:	4299      	cmp	r1, r3
 801cf78:	bfde      	ittt	le
 801cf7a:	2330      	movle	r3, #48	; 0x30
 801cf7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801cf80:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801cf84:	1b52      	subs	r2, r2, r5
 801cf86:	6122      	str	r2, [r4, #16]
 801cf88:	f8cd a000 	str.w	sl, [sp]
 801cf8c:	464b      	mov	r3, r9
 801cf8e:	aa03      	add	r2, sp, #12
 801cf90:	4621      	mov	r1, r4
 801cf92:	4640      	mov	r0, r8
 801cf94:	f7ff fee4 	bl	801cd60 <_printf_common>
 801cf98:	3001      	adds	r0, #1
 801cf9a:	d14a      	bne.n	801d032 <_printf_i+0x1f6>
 801cf9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cfa0:	b004      	add	sp, #16
 801cfa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cfa6:	6823      	ldr	r3, [r4, #0]
 801cfa8:	f043 0320 	orr.w	r3, r3, #32
 801cfac:	6023      	str	r3, [r4, #0]
 801cfae:	4833      	ldr	r0, [pc, #204]	; (801d07c <_printf_i+0x240>)
 801cfb0:	2778      	movs	r7, #120	; 0x78
 801cfb2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801cfb6:	6823      	ldr	r3, [r4, #0]
 801cfb8:	6829      	ldr	r1, [r5, #0]
 801cfba:	061f      	lsls	r7, r3, #24
 801cfbc:	f851 6b04 	ldr.w	r6, [r1], #4
 801cfc0:	d402      	bmi.n	801cfc8 <_printf_i+0x18c>
 801cfc2:	065f      	lsls	r7, r3, #25
 801cfc4:	bf48      	it	mi
 801cfc6:	b2b6      	uxthmi	r6, r6
 801cfc8:	07df      	lsls	r7, r3, #31
 801cfca:	bf48      	it	mi
 801cfcc:	f043 0320 	orrmi.w	r3, r3, #32
 801cfd0:	6029      	str	r1, [r5, #0]
 801cfd2:	bf48      	it	mi
 801cfd4:	6023      	strmi	r3, [r4, #0]
 801cfd6:	b91e      	cbnz	r6, 801cfe0 <_printf_i+0x1a4>
 801cfd8:	6823      	ldr	r3, [r4, #0]
 801cfda:	f023 0320 	bic.w	r3, r3, #32
 801cfde:	6023      	str	r3, [r4, #0]
 801cfe0:	2310      	movs	r3, #16
 801cfe2:	e7a7      	b.n	801cf34 <_printf_i+0xf8>
 801cfe4:	4824      	ldr	r0, [pc, #144]	; (801d078 <_printf_i+0x23c>)
 801cfe6:	e7e4      	b.n	801cfb2 <_printf_i+0x176>
 801cfe8:	4615      	mov	r5, r2
 801cfea:	e7bd      	b.n	801cf68 <_printf_i+0x12c>
 801cfec:	682b      	ldr	r3, [r5, #0]
 801cfee:	6826      	ldr	r6, [r4, #0]
 801cff0:	6961      	ldr	r1, [r4, #20]
 801cff2:	1d18      	adds	r0, r3, #4
 801cff4:	6028      	str	r0, [r5, #0]
 801cff6:	0635      	lsls	r5, r6, #24
 801cff8:	681b      	ldr	r3, [r3, #0]
 801cffa:	d501      	bpl.n	801d000 <_printf_i+0x1c4>
 801cffc:	6019      	str	r1, [r3, #0]
 801cffe:	e002      	b.n	801d006 <_printf_i+0x1ca>
 801d000:	0670      	lsls	r0, r6, #25
 801d002:	d5fb      	bpl.n	801cffc <_printf_i+0x1c0>
 801d004:	8019      	strh	r1, [r3, #0]
 801d006:	2300      	movs	r3, #0
 801d008:	6123      	str	r3, [r4, #16]
 801d00a:	4615      	mov	r5, r2
 801d00c:	e7bc      	b.n	801cf88 <_printf_i+0x14c>
 801d00e:	682b      	ldr	r3, [r5, #0]
 801d010:	1d1a      	adds	r2, r3, #4
 801d012:	602a      	str	r2, [r5, #0]
 801d014:	681d      	ldr	r5, [r3, #0]
 801d016:	6862      	ldr	r2, [r4, #4]
 801d018:	2100      	movs	r1, #0
 801d01a:	4628      	mov	r0, r5
 801d01c:	f7e3 f920 	bl	8000260 <memchr>
 801d020:	b108      	cbz	r0, 801d026 <_printf_i+0x1ea>
 801d022:	1b40      	subs	r0, r0, r5
 801d024:	6060      	str	r0, [r4, #4]
 801d026:	6863      	ldr	r3, [r4, #4]
 801d028:	6123      	str	r3, [r4, #16]
 801d02a:	2300      	movs	r3, #0
 801d02c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d030:	e7aa      	b.n	801cf88 <_printf_i+0x14c>
 801d032:	6923      	ldr	r3, [r4, #16]
 801d034:	462a      	mov	r2, r5
 801d036:	4649      	mov	r1, r9
 801d038:	4640      	mov	r0, r8
 801d03a:	47d0      	blx	sl
 801d03c:	3001      	adds	r0, #1
 801d03e:	d0ad      	beq.n	801cf9c <_printf_i+0x160>
 801d040:	6823      	ldr	r3, [r4, #0]
 801d042:	079b      	lsls	r3, r3, #30
 801d044:	d413      	bmi.n	801d06e <_printf_i+0x232>
 801d046:	68e0      	ldr	r0, [r4, #12]
 801d048:	9b03      	ldr	r3, [sp, #12]
 801d04a:	4298      	cmp	r0, r3
 801d04c:	bfb8      	it	lt
 801d04e:	4618      	movlt	r0, r3
 801d050:	e7a6      	b.n	801cfa0 <_printf_i+0x164>
 801d052:	2301      	movs	r3, #1
 801d054:	4632      	mov	r2, r6
 801d056:	4649      	mov	r1, r9
 801d058:	4640      	mov	r0, r8
 801d05a:	47d0      	blx	sl
 801d05c:	3001      	adds	r0, #1
 801d05e:	d09d      	beq.n	801cf9c <_printf_i+0x160>
 801d060:	3501      	adds	r5, #1
 801d062:	68e3      	ldr	r3, [r4, #12]
 801d064:	9903      	ldr	r1, [sp, #12]
 801d066:	1a5b      	subs	r3, r3, r1
 801d068:	42ab      	cmp	r3, r5
 801d06a:	dcf2      	bgt.n	801d052 <_printf_i+0x216>
 801d06c:	e7eb      	b.n	801d046 <_printf_i+0x20a>
 801d06e:	2500      	movs	r5, #0
 801d070:	f104 0619 	add.w	r6, r4, #25
 801d074:	e7f5      	b.n	801d062 <_printf_i+0x226>
 801d076:	bf00      	nop
 801d078:	0801f77d 	.word	0x0801f77d
 801d07c:	0801f78e 	.word	0x0801f78e

0801d080 <__sflush_r>:
 801d080:	898a      	ldrh	r2, [r1, #12]
 801d082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d086:	4605      	mov	r5, r0
 801d088:	0710      	lsls	r0, r2, #28
 801d08a:	460c      	mov	r4, r1
 801d08c:	d458      	bmi.n	801d140 <__sflush_r+0xc0>
 801d08e:	684b      	ldr	r3, [r1, #4]
 801d090:	2b00      	cmp	r3, #0
 801d092:	dc05      	bgt.n	801d0a0 <__sflush_r+0x20>
 801d094:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d096:	2b00      	cmp	r3, #0
 801d098:	dc02      	bgt.n	801d0a0 <__sflush_r+0x20>
 801d09a:	2000      	movs	r0, #0
 801d09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d0a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d0a2:	2e00      	cmp	r6, #0
 801d0a4:	d0f9      	beq.n	801d09a <__sflush_r+0x1a>
 801d0a6:	2300      	movs	r3, #0
 801d0a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d0ac:	682f      	ldr	r7, [r5, #0]
 801d0ae:	6a21      	ldr	r1, [r4, #32]
 801d0b0:	602b      	str	r3, [r5, #0]
 801d0b2:	d032      	beq.n	801d11a <__sflush_r+0x9a>
 801d0b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d0b6:	89a3      	ldrh	r3, [r4, #12]
 801d0b8:	075a      	lsls	r2, r3, #29
 801d0ba:	d505      	bpl.n	801d0c8 <__sflush_r+0x48>
 801d0bc:	6863      	ldr	r3, [r4, #4]
 801d0be:	1ac0      	subs	r0, r0, r3
 801d0c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d0c2:	b10b      	cbz	r3, 801d0c8 <__sflush_r+0x48>
 801d0c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d0c6:	1ac0      	subs	r0, r0, r3
 801d0c8:	2300      	movs	r3, #0
 801d0ca:	4602      	mov	r2, r0
 801d0cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d0ce:	6a21      	ldr	r1, [r4, #32]
 801d0d0:	4628      	mov	r0, r5
 801d0d2:	47b0      	blx	r6
 801d0d4:	1c43      	adds	r3, r0, #1
 801d0d6:	89a3      	ldrh	r3, [r4, #12]
 801d0d8:	d106      	bne.n	801d0e8 <__sflush_r+0x68>
 801d0da:	6829      	ldr	r1, [r5, #0]
 801d0dc:	291d      	cmp	r1, #29
 801d0de:	d82b      	bhi.n	801d138 <__sflush_r+0xb8>
 801d0e0:	4a29      	ldr	r2, [pc, #164]	; (801d188 <__sflush_r+0x108>)
 801d0e2:	410a      	asrs	r2, r1
 801d0e4:	07d6      	lsls	r6, r2, #31
 801d0e6:	d427      	bmi.n	801d138 <__sflush_r+0xb8>
 801d0e8:	2200      	movs	r2, #0
 801d0ea:	6062      	str	r2, [r4, #4]
 801d0ec:	04d9      	lsls	r1, r3, #19
 801d0ee:	6922      	ldr	r2, [r4, #16]
 801d0f0:	6022      	str	r2, [r4, #0]
 801d0f2:	d504      	bpl.n	801d0fe <__sflush_r+0x7e>
 801d0f4:	1c42      	adds	r2, r0, #1
 801d0f6:	d101      	bne.n	801d0fc <__sflush_r+0x7c>
 801d0f8:	682b      	ldr	r3, [r5, #0]
 801d0fa:	b903      	cbnz	r3, 801d0fe <__sflush_r+0x7e>
 801d0fc:	6560      	str	r0, [r4, #84]	; 0x54
 801d0fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d100:	602f      	str	r7, [r5, #0]
 801d102:	2900      	cmp	r1, #0
 801d104:	d0c9      	beq.n	801d09a <__sflush_r+0x1a>
 801d106:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d10a:	4299      	cmp	r1, r3
 801d10c:	d002      	beq.n	801d114 <__sflush_r+0x94>
 801d10e:	4628      	mov	r0, r5
 801d110:	f7ff fc7a 	bl	801ca08 <_free_r>
 801d114:	2000      	movs	r0, #0
 801d116:	6360      	str	r0, [r4, #52]	; 0x34
 801d118:	e7c0      	b.n	801d09c <__sflush_r+0x1c>
 801d11a:	2301      	movs	r3, #1
 801d11c:	4628      	mov	r0, r5
 801d11e:	47b0      	blx	r6
 801d120:	1c41      	adds	r1, r0, #1
 801d122:	d1c8      	bne.n	801d0b6 <__sflush_r+0x36>
 801d124:	682b      	ldr	r3, [r5, #0]
 801d126:	2b00      	cmp	r3, #0
 801d128:	d0c5      	beq.n	801d0b6 <__sflush_r+0x36>
 801d12a:	2b1d      	cmp	r3, #29
 801d12c:	d001      	beq.n	801d132 <__sflush_r+0xb2>
 801d12e:	2b16      	cmp	r3, #22
 801d130:	d101      	bne.n	801d136 <__sflush_r+0xb6>
 801d132:	602f      	str	r7, [r5, #0]
 801d134:	e7b1      	b.n	801d09a <__sflush_r+0x1a>
 801d136:	89a3      	ldrh	r3, [r4, #12]
 801d138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d13c:	81a3      	strh	r3, [r4, #12]
 801d13e:	e7ad      	b.n	801d09c <__sflush_r+0x1c>
 801d140:	690f      	ldr	r7, [r1, #16]
 801d142:	2f00      	cmp	r7, #0
 801d144:	d0a9      	beq.n	801d09a <__sflush_r+0x1a>
 801d146:	0793      	lsls	r3, r2, #30
 801d148:	680e      	ldr	r6, [r1, #0]
 801d14a:	bf08      	it	eq
 801d14c:	694b      	ldreq	r3, [r1, #20]
 801d14e:	600f      	str	r7, [r1, #0]
 801d150:	bf18      	it	ne
 801d152:	2300      	movne	r3, #0
 801d154:	eba6 0807 	sub.w	r8, r6, r7
 801d158:	608b      	str	r3, [r1, #8]
 801d15a:	f1b8 0f00 	cmp.w	r8, #0
 801d15e:	dd9c      	ble.n	801d09a <__sflush_r+0x1a>
 801d160:	6a21      	ldr	r1, [r4, #32]
 801d162:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d164:	4643      	mov	r3, r8
 801d166:	463a      	mov	r2, r7
 801d168:	4628      	mov	r0, r5
 801d16a:	47b0      	blx	r6
 801d16c:	2800      	cmp	r0, #0
 801d16e:	dc06      	bgt.n	801d17e <__sflush_r+0xfe>
 801d170:	89a3      	ldrh	r3, [r4, #12]
 801d172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d176:	81a3      	strh	r3, [r4, #12]
 801d178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d17c:	e78e      	b.n	801d09c <__sflush_r+0x1c>
 801d17e:	4407      	add	r7, r0
 801d180:	eba8 0800 	sub.w	r8, r8, r0
 801d184:	e7e9      	b.n	801d15a <__sflush_r+0xda>
 801d186:	bf00      	nop
 801d188:	dfbffffe 	.word	0xdfbffffe

0801d18c <_fflush_r>:
 801d18c:	b538      	push	{r3, r4, r5, lr}
 801d18e:	690b      	ldr	r3, [r1, #16]
 801d190:	4605      	mov	r5, r0
 801d192:	460c      	mov	r4, r1
 801d194:	b913      	cbnz	r3, 801d19c <_fflush_r+0x10>
 801d196:	2500      	movs	r5, #0
 801d198:	4628      	mov	r0, r5
 801d19a:	bd38      	pop	{r3, r4, r5, pc}
 801d19c:	b118      	cbz	r0, 801d1a6 <_fflush_r+0x1a>
 801d19e:	6a03      	ldr	r3, [r0, #32]
 801d1a0:	b90b      	cbnz	r3, 801d1a6 <_fflush_r+0x1a>
 801d1a2:	f7ff f9b7 	bl	801c514 <__sinit>
 801d1a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d1aa:	2b00      	cmp	r3, #0
 801d1ac:	d0f3      	beq.n	801d196 <_fflush_r+0xa>
 801d1ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d1b0:	07d0      	lsls	r0, r2, #31
 801d1b2:	d404      	bmi.n	801d1be <_fflush_r+0x32>
 801d1b4:	0599      	lsls	r1, r3, #22
 801d1b6:	d402      	bmi.n	801d1be <_fflush_r+0x32>
 801d1b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d1ba:	f7ff fbe2 	bl	801c982 <__retarget_lock_acquire_recursive>
 801d1be:	4628      	mov	r0, r5
 801d1c0:	4621      	mov	r1, r4
 801d1c2:	f7ff ff5d 	bl	801d080 <__sflush_r>
 801d1c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d1c8:	07da      	lsls	r2, r3, #31
 801d1ca:	4605      	mov	r5, r0
 801d1cc:	d4e4      	bmi.n	801d198 <_fflush_r+0xc>
 801d1ce:	89a3      	ldrh	r3, [r4, #12]
 801d1d0:	059b      	lsls	r3, r3, #22
 801d1d2:	d4e1      	bmi.n	801d198 <_fflush_r+0xc>
 801d1d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d1d6:	f7ff fbd5 	bl	801c984 <__retarget_lock_release_recursive>
 801d1da:	e7dd      	b.n	801d198 <_fflush_r+0xc>

0801d1dc <fiprintf>:
 801d1dc:	b40e      	push	{r1, r2, r3}
 801d1de:	b503      	push	{r0, r1, lr}
 801d1e0:	4601      	mov	r1, r0
 801d1e2:	ab03      	add	r3, sp, #12
 801d1e4:	4805      	ldr	r0, [pc, #20]	; (801d1fc <fiprintf+0x20>)
 801d1e6:	f853 2b04 	ldr.w	r2, [r3], #4
 801d1ea:	6800      	ldr	r0, [r0, #0]
 801d1ec:	9301      	str	r3, [sp, #4]
 801d1ee:	f000 f837 	bl	801d260 <_vfiprintf_r>
 801d1f2:	b002      	add	sp, #8
 801d1f4:	f85d eb04 	ldr.w	lr, [sp], #4
 801d1f8:	b003      	add	sp, #12
 801d1fa:	4770      	bx	lr
 801d1fc:	200021d8 	.word	0x200021d8

0801d200 <abort>:
 801d200:	b508      	push	{r3, lr}
 801d202:	2006      	movs	r0, #6
 801d204:	f000 fa04 	bl	801d610 <raise>
 801d208:	2001      	movs	r0, #1
 801d20a:	f7e5 fdf5 	bl	8002df8 <_exit>

0801d20e <__sfputc_r>:
 801d20e:	6893      	ldr	r3, [r2, #8]
 801d210:	3b01      	subs	r3, #1
 801d212:	2b00      	cmp	r3, #0
 801d214:	b410      	push	{r4}
 801d216:	6093      	str	r3, [r2, #8]
 801d218:	da08      	bge.n	801d22c <__sfputc_r+0x1e>
 801d21a:	6994      	ldr	r4, [r2, #24]
 801d21c:	42a3      	cmp	r3, r4
 801d21e:	db01      	blt.n	801d224 <__sfputc_r+0x16>
 801d220:	290a      	cmp	r1, #10
 801d222:	d103      	bne.n	801d22c <__sfputc_r+0x1e>
 801d224:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d228:	f000 b934 	b.w	801d494 <__swbuf_r>
 801d22c:	6813      	ldr	r3, [r2, #0]
 801d22e:	1c58      	adds	r0, r3, #1
 801d230:	6010      	str	r0, [r2, #0]
 801d232:	7019      	strb	r1, [r3, #0]
 801d234:	4608      	mov	r0, r1
 801d236:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d23a:	4770      	bx	lr

0801d23c <__sfputs_r>:
 801d23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d23e:	4606      	mov	r6, r0
 801d240:	460f      	mov	r7, r1
 801d242:	4614      	mov	r4, r2
 801d244:	18d5      	adds	r5, r2, r3
 801d246:	42ac      	cmp	r4, r5
 801d248:	d101      	bne.n	801d24e <__sfputs_r+0x12>
 801d24a:	2000      	movs	r0, #0
 801d24c:	e007      	b.n	801d25e <__sfputs_r+0x22>
 801d24e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d252:	463a      	mov	r2, r7
 801d254:	4630      	mov	r0, r6
 801d256:	f7ff ffda 	bl	801d20e <__sfputc_r>
 801d25a:	1c43      	adds	r3, r0, #1
 801d25c:	d1f3      	bne.n	801d246 <__sfputs_r+0xa>
 801d25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d260 <_vfiprintf_r>:
 801d260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d264:	460d      	mov	r5, r1
 801d266:	b09d      	sub	sp, #116	; 0x74
 801d268:	4614      	mov	r4, r2
 801d26a:	4698      	mov	r8, r3
 801d26c:	4606      	mov	r6, r0
 801d26e:	b118      	cbz	r0, 801d278 <_vfiprintf_r+0x18>
 801d270:	6a03      	ldr	r3, [r0, #32]
 801d272:	b90b      	cbnz	r3, 801d278 <_vfiprintf_r+0x18>
 801d274:	f7ff f94e 	bl	801c514 <__sinit>
 801d278:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d27a:	07d9      	lsls	r1, r3, #31
 801d27c:	d405      	bmi.n	801d28a <_vfiprintf_r+0x2a>
 801d27e:	89ab      	ldrh	r3, [r5, #12]
 801d280:	059a      	lsls	r2, r3, #22
 801d282:	d402      	bmi.n	801d28a <_vfiprintf_r+0x2a>
 801d284:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d286:	f7ff fb7c 	bl	801c982 <__retarget_lock_acquire_recursive>
 801d28a:	89ab      	ldrh	r3, [r5, #12]
 801d28c:	071b      	lsls	r3, r3, #28
 801d28e:	d501      	bpl.n	801d294 <_vfiprintf_r+0x34>
 801d290:	692b      	ldr	r3, [r5, #16]
 801d292:	b99b      	cbnz	r3, 801d2bc <_vfiprintf_r+0x5c>
 801d294:	4629      	mov	r1, r5
 801d296:	4630      	mov	r0, r6
 801d298:	f000 f93a 	bl	801d510 <__swsetup_r>
 801d29c:	b170      	cbz	r0, 801d2bc <_vfiprintf_r+0x5c>
 801d29e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d2a0:	07dc      	lsls	r4, r3, #31
 801d2a2:	d504      	bpl.n	801d2ae <_vfiprintf_r+0x4e>
 801d2a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d2a8:	b01d      	add	sp, #116	; 0x74
 801d2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2ae:	89ab      	ldrh	r3, [r5, #12]
 801d2b0:	0598      	lsls	r0, r3, #22
 801d2b2:	d4f7      	bmi.n	801d2a4 <_vfiprintf_r+0x44>
 801d2b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d2b6:	f7ff fb65 	bl	801c984 <__retarget_lock_release_recursive>
 801d2ba:	e7f3      	b.n	801d2a4 <_vfiprintf_r+0x44>
 801d2bc:	2300      	movs	r3, #0
 801d2be:	9309      	str	r3, [sp, #36]	; 0x24
 801d2c0:	2320      	movs	r3, #32
 801d2c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d2c6:	f8cd 800c 	str.w	r8, [sp, #12]
 801d2ca:	2330      	movs	r3, #48	; 0x30
 801d2cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801d480 <_vfiprintf_r+0x220>
 801d2d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d2d4:	f04f 0901 	mov.w	r9, #1
 801d2d8:	4623      	mov	r3, r4
 801d2da:	469a      	mov	sl, r3
 801d2dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d2e0:	b10a      	cbz	r2, 801d2e6 <_vfiprintf_r+0x86>
 801d2e2:	2a25      	cmp	r2, #37	; 0x25
 801d2e4:	d1f9      	bne.n	801d2da <_vfiprintf_r+0x7a>
 801d2e6:	ebba 0b04 	subs.w	fp, sl, r4
 801d2ea:	d00b      	beq.n	801d304 <_vfiprintf_r+0xa4>
 801d2ec:	465b      	mov	r3, fp
 801d2ee:	4622      	mov	r2, r4
 801d2f0:	4629      	mov	r1, r5
 801d2f2:	4630      	mov	r0, r6
 801d2f4:	f7ff ffa2 	bl	801d23c <__sfputs_r>
 801d2f8:	3001      	adds	r0, #1
 801d2fa:	f000 80a9 	beq.w	801d450 <_vfiprintf_r+0x1f0>
 801d2fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d300:	445a      	add	r2, fp
 801d302:	9209      	str	r2, [sp, #36]	; 0x24
 801d304:	f89a 3000 	ldrb.w	r3, [sl]
 801d308:	2b00      	cmp	r3, #0
 801d30a:	f000 80a1 	beq.w	801d450 <_vfiprintf_r+0x1f0>
 801d30e:	2300      	movs	r3, #0
 801d310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801d314:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d318:	f10a 0a01 	add.w	sl, sl, #1
 801d31c:	9304      	str	r3, [sp, #16]
 801d31e:	9307      	str	r3, [sp, #28]
 801d320:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d324:	931a      	str	r3, [sp, #104]	; 0x68
 801d326:	4654      	mov	r4, sl
 801d328:	2205      	movs	r2, #5
 801d32a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d32e:	4854      	ldr	r0, [pc, #336]	; (801d480 <_vfiprintf_r+0x220>)
 801d330:	f7e2 ff96 	bl	8000260 <memchr>
 801d334:	9a04      	ldr	r2, [sp, #16]
 801d336:	b9d8      	cbnz	r0, 801d370 <_vfiprintf_r+0x110>
 801d338:	06d1      	lsls	r1, r2, #27
 801d33a:	bf44      	itt	mi
 801d33c:	2320      	movmi	r3, #32
 801d33e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d342:	0713      	lsls	r3, r2, #28
 801d344:	bf44      	itt	mi
 801d346:	232b      	movmi	r3, #43	; 0x2b
 801d348:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d34c:	f89a 3000 	ldrb.w	r3, [sl]
 801d350:	2b2a      	cmp	r3, #42	; 0x2a
 801d352:	d015      	beq.n	801d380 <_vfiprintf_r+0x120>
 801d354:	9a07      	ldr	r2, [sp, #28]
 801d356:	4654      	mov	r4, sl
 801d358:	2000      	movs	r0, #0
 801d35a:	f04f 0c0a 	mov.w	ip, #10
 801d35e:	4621      	mov	r1, r4
 801d360:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d364:	3b30      	subs	r3, #48	; 0x30
 801d366:	2b09      	cmp	r3, #9
 801d368:	d94d      	bls.n	801d406 <_vfiprintf_r+0x1a6>
 801d36a:	b1b0      	cbz	r0, 801d39a <_vfiprintf_r+0x13a>
 801d36c:	9207      	str	r2, [sp, #28]
 801d36e:	e014      	b.n	801d39a <_vfiprintf_r+0x13a>
 801d370:	eba0 0308 	sub.w	r3, r0, r8
 801d374:	fa09 f303 	lsl.w	r3, r9, r3
 801d378:	4313      	orrs	r3, r2
 801d37a:	9304      	str	r3, [sp, #16]
 801d37c:	46a2      	mov	sl, r4
 801d37e:	e7d2      	b.n	801d326 <_vfiprintf_r+0xc6>
 801d380:	9b03      	ldr	r3, [sp, #12]
 801d382:	1d19      	adds	r1, r3, #4
 801d384:	681b      	ldr	r3, [r3, #0]
 801d386:	9103      	str	r1, [sp, #12]
 801d388:	2b00      	cmp	r3, #0
 801d38a:	bfbb      	ittet	lt
 801d38c:	425b      	neglt	r3, r3
 801d38e:	f042 0202 	orrlt.w	r2, r2, #2
 801d392:	9307      	strge	r3, [sp, #28]
 801d394:	9307      	strlt	r3, [sp, #28]
 801d396:	bfb8      	it	lt
 801d398:	9204      	strlt	r2, [sp, #16]
 801d39a:	7823      	ldrb	r3, [r4, #0]
 801d39c:	2b2e      	cmp	r3, #46	; 0x2e
 801d39e:	d10c      	bne.n	801d3ba <_vfiprintf_r+0x15a>
 801d3a0:	7863      	ldrb	r3, [r4, #1]
 801d3a2:	2b2a      	cmp	r3, #42	; 0x2a
 801d3a4:	d134      	bne.n	801d410 <_vfiprintf_r+0x1b0>
 801d3a6:	9b03      	ldr	r3, [sp, #12]
 801d3a8:	1d1a      	adds	r2, r3, #4
 801d3aa:	681b      	ldr	r3, [r3, #0]
 801d3ac:	9203      	str	r2, [sp, #12]
 801d3ae:	2b00      	cmp	r3, #0
 801d3b0:	bfb8      	it	lt
 801d3b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801d3b6:	3402      	adds	r4, #2
 801d3b8:	9305      	str	r3, [sp, #20]
 801d3ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801d490 <_vfiprintf_r+0x230>
 801d3be:	7821      	ldrb	r1, [r4, #0]
 801d3c0:	2203      	movs	r2, #3
 801d3c2:	4650      	mov	r0, sl
 801d3c4:	f7e2 ff4c 	bl	8000260 <memchr>
 801d3c8:	b138      	cbz	r0, 801d3da <_vfiprintf_r+0x17a>
 801d3ca:	9b04      	ldr	r3, [sp, #16]
 801d3cc:	eba0 000a 	sub.w	r0, r0, sl
 801d3d0:	2240      	movs	r2, #64	; 0x40
 801d3d2:	4082      	lsls	r2, r0
 801d3d4:	4313      	orrs	r3, r2
 801d3d6:	3401      	adds	r4, #1
 801d3d8:	9304      	str	r3, [sp, #16]
 801d3da:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d3de:	4829      	ldr	r0, [pc, #164]	; (801d484 <_vfiprintf_r+0x224>)
 801d3e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d3e4:	2206      	movs	r2, #6
 801d3e6:	f7e2 ff3b 	bl	8000260 <memchr>
 801d3ea:	2800      	cmp	r0, #0
 801d3ec:	d03f      	beq.n	801d46e <_vfiprintf_r+0x20e>
 801d3ee:	4b26      	ldr	r3, [pc, #152]	; (801d488 <_vfiprintf_r+0x228>)
 801d3f0:	bb1b      	cbnz	r3, 801d43a <_vfiprintf_r+0x1da>
 801d3f2:	9b03      	ldr	r3, [sp, #12]
 801d3f4:	3307      	adds	r3, #7
 801d3f6:	f023 0307 	bic.w	r3, r3, #7
 801d3fa:	3308      	adds	r3, #8
 801d3fc:	9303      	str	r3, [sp, #12]
 801d3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d400:	443b      	add	r3, r7
 801d402:	9309      	str	r3, [sp, #36]	; 0x24
 801d404:	e768      	b.n	801d2d8 <_vfiprintf_r+0x78>
 801d406:	fb0c 3202 	mla	r2, ip, r2, r3
 801d40a:	460c      	mov	r4, r1
 801d40c:	2001      	movs	r0, #1
 801d40e:	e7a6      	b.n	801d35e <_vfiprintf_r+0xfe>
 801d410:	2300      	movs	r3, #0
 801d412:	3401      	adds	r4, #1
 801d414:	9305      	str	r3, [sp, #20]
 801d416:	4619      	mov	r1, r3
 801d418:	f04f 0c0a 	mov.w	ip, #10
 801d41c:	4620      	mov	r0, r4
 801d41e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d422:	3a30      	subs	r2, #48	; 0x30
 801d424:	2a09      	cmp	r2, #9
 801d426:	d903      	bls.n	801d430 <_vfiprintf_r+0x1d0>
 801d428:	2b00      	cmp	r3, #0
 801d42a:	d0c6      	beq.n	801d3ba <_vfiprintf_r+0x15a>
 801d42c:	9105      	str	r1, [sp, #20]
 801d42e:	e7c4      	b.n	801d3ba <_vfiprintf_r+0x15a>
 801d430:	fb0c 2101 	mla	r1, ip, r1, r2
 801d434:	4604      	mov	r4, r0
 801d436:	2301      	movs	r3, #1
 801d438:	e7f0      	b.n	801d41c <_vfiprintf_r+0x1bc>
 801d43a:	ab03      	add	r3, sp, #12
 801d43c:	9300      	str	r3, [sp, #0]
 801d43e:	462a      	mov	r2, r5
 801d440:	4b12      	ldr	r3, [pc, #72]	; (801d48c <_vfiprintf_r+0x22c>)
 801d442:	a904      	add	r1, sp, #16
 801d444:	4630      	mov	r0, r6
 801d446:	f3af 8000 	nop.w
 801d44a:	4607      	mov	r7, r0
 801d44c:	1c78      	adds	r0, r7, #1
 801d44e:	d1d6      	bne.n	801d3fe <_vfiprintf_r+0x19e>
 801d450:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d452:	07d9      	lsls	r1, r3, #31
 801d454:	d405      	bmi.n	801d462 <_vfiprintf_r+0x202>
 801d456:	89ab      	ldrh	r3, [r5, #12]
 801d458:	059a      	lsls	r2, r3, #22
 801d45a:	d402      	bmi.n	801d462 <_vfiprintf_r+0x202>
 801d45c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d45e:	f7ff fa91 	bl	801c984 <__retarget_lock_release_recursive>
 801d462:	89ab      	ldrh	r3, [r5, #12]
 801d464:	065b      	lsls	r3, r3, #25
 801d466:	f53f af1d 	bmi.w	801d2a4 <_vfiprintf_r+0x44>
 801d46a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d46c:	e71c      	b.n	801d2a8 <_vfiprintf_r+0x48>
 801d46e:	ab03      	add	r3, sp, #12
 801d470:	9300      	str	r3, [sp, #0]
 801d472:	462a      	mov	r2, r5
 801d474:	4b05      	ldr	r3, [pc, #20]	; (801d48c <_vfiprintf_r+0x22c>)
 801d476:	a904      	add	r1, sp, #16
 801d478:	4630      	mov	r0, r6
 801d47a:	f7ff fcdf 	bl	801ce3c <_printf_i>
 801d47e:	e7e4      	b.n	801d44a <_vfiprintf_r+0x1ea>
 801d480:	0801f76c 	.word	0x0801f76c
 801d484:	0801f776 	.word	0x0801f776
 801d488:	00000000 	.word	0x00000000
 801d48c:	0801d23d 	.word	0x0801d23d
 801d490:	0801f772 	.word	0x0801f772

0801d494 <__swbuf_r>:
 801d494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d496:	460e      	mov	r6, r1
 801d498:	4614      	mov	r4, r2
 801d49a:	4605      	mov	r5, r0
 801d49c:	b118      	cbz	r0, 801d4a6 <__swbuf_r+0x12>
 801d49e:	6a03      	ldr	r3, [r0, #32]
 801d4a0:	b90b      	cbnz	r3, 801d4a6 <__swbuf_r+0x12>
 801d4a2:	f7ff f837 	bl	801c514 <__sinit>
 801d4a6:	69a3      	ldr	r3, [r4, #24]
 801d4a8:	60a3      	str	r3, [r4, #8]
 801d4aa:	89a3      	ldrh	r3, [r4, #12]
 801d4ac:	071a      	lsls	r2, r3, #28
 801d4ae:	d525      	bpl.n	801d4fc <__swbuf_r+0x68>
 801d4b0:	6923      	ldr	r3, [r4, #16]
 801d4b2:	b31b      	cbz	r3, 801d4fc <__swbuf_r+0x68>
 801d4b4:	6823      	ldr	r3, [r4, #0]
 801d4b6:	6922      	ldr	r2, [r4, #16]
 801d4b8:	1a98      	subs	r0, r3, r2
 801d4ba:	6963      	ldr	r3, [r4, #20]
 801d4bc:	b2f6      	uxtb	r6, r6
 801d4be:	4283      	cmp	r3, r0
 801d4c0:	4637      	mov	r7, r6
 801d4c2:	dc04      	bgt.n	801d4ce <__swbuf_r+0x3a>
 801d4c4:	4621      	mov	r1, r4
 801d4c6:	4628      	mov	r0, r5
 801d4c8:	f7ff fe60 	bl	801d18c <_fflush_r>
 801d4cc:	b9e0      	cbnz	r0, 801d508 <__swbuf_r+0x74>
 801d4ce:	68a3      	ldr	r3, [r4, #8]
 801d4d0:	3b01      	subs	r3, #1
 801d4d2:	60a3      	str	r3, [r4, #8]
 801d4d4:	6823      	ldr	r3, [r4, #0]
 801d4d6:	1c5a      	adds	r2, r3, #1
 801d4d8:	6022      	str	r2, [r4, #0]
 801d4da:	701e      	strb	r6, [r3, #0]
 801d4dc:	6962      	ldr	r2, [r4, #20]
 801d4de:	1c43      	adds	r3, r0, #1
 801d4e0:	429a      	cmp	r2, r3
 801d4e2:	d004      	beq.n	801d4ee <__swbuf_r+0x5a>
 801d4e4:	89a3      	ldrh	r3, [r4, #12]
 801d4e6:	07db      	lsls	r3, r3, #31
 801d4e8:	d506      	bpl.n	801d4f8 <__swbuf_r+0x64>
 801d4ea:	2e0a      	cmp	r6, #10
 801d4ec:	d104      	bne.n	801d4f8 <__swbuf_r+0x64>
 801d4ee:	4621      	mov	r1, r4
 801d4f0:	4628      	mov	r0, r5
 801d4f2:	f7ff fe4b 	bl	801d18c <_fflush_r>
 801d4f6:	b938      	cbnz	r0, 801d508 <__swbuf_r+0x74>
 801d4f8:	4638      	mov	r0, r7
 801d4fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d4fc:	4621      	mov	r1, r4
 801d4fe:	4628      	mov	r0, r5
 801d500:	f000 f806 	bl	801d510 <__swsetup_r>
 801d504:	2800      	cmp	r0, #0
 801d506:	d0d5      	beq.n	801d4b4 <__swbuf_r+0x20>
 801d508:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801d50c:	e7f4      	b.n	801d4f8 <__swbuf_r+0x64>
	...

0801d510 <__swsetup_r>:
 801d510:	b538      	push	{r3, r4, r5, lr}
 801d512:	4b2a      	ldr	r3, [pc, #168]	; (801d5bc <__swsetup_r+0xac>)
 801d514:	4605      	mov	r5, r0
 801d516:	6818      	ldr	r0, [r3, #0]
 801d518:	460c      	mov	r4, r1
 801d51a:	b118      	cbz	r0, 801d524 <__swsetup_r+0x14>
 801d51c:	6a03      	ldr	r3, [r0, #32]
 801d51e:	b90b      	cbnz	r3, 801d524 <__swsetup_r+0x14>
 801d520:	f7fe fff8 	bl	801c514 <__sinit>
 801d524:	89a3      	ldrh	r3, [r4, #12]
 801d526:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d52a:	0718      	lsls	r0, r3, #28
 801d52c:	d422      	bmi.n	801d574 <__swsetup_r+0x64>
 801d52e:	06d9      	lsls	r1, r3, #27
 801d530:	d407      	bmi.n	801d542 <__swsetup_r+0x32>
 801d532:	2309      	movs	r3, #9
 801d534:	602b      	str	r3, [r5, #0]
 801d536:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d53a:	81a3      	strh	r3, [r4, #12]
 801d53c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d540:	e034      	b.n	801d5ac <__swsetup_r+0x9c>
 801d542:	0758      	lsls	r0, r3, #29
 801d544:	d512      	bpl.n	801d56c <__swsetup_r+0x5c>
 801d546:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d548:	b141      	cbz	r1, 801d55c <__swsetup_r+0x4c>
 801d54a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d54e:	4299      	cmp	r1, r3
 801d550:	d002      	beq.n	801d558 <__swsetup_r+0x48>
 801d552:	4628      	mov	r0, r5
 801d554:	f7ff fa58 	bl	801ca08 <_free_r>
 801d558:	2300      	movs	r3, #0
 801d55a:	6363      	str	r3, [r4, #52]	; 0x34
 801d55c:	89a3      	ldrh	r3, [r4, #12]
 801d55e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d562:	81a3      	strh	r3, [r4, #12]
 801d564:	2300      	movs	r3, #0
 801d566:	6063      	str	r3, [r4, #4]
 801d568:	6923      	ldr	r3, [r4, #16]
 801d56a:	6023      	str	r3, [r4, #0]
 801d56c:	89a3      	ldrh	r3, [r4, #12]
 801d56e:	f043 0308 	orr.w	r3, r3, #8
 801d572:	81a3      	strh	r3, [r4, #12]
 801d574:	6923      	ldr	r3, [r4, #16]
 801d576:	b94b      	cbnz	r3, 801d58c <__swsetup_r+0x7c>
 801d578:	89a3      	ldrh	r3, [r4, #12]
 801d57a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d57e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d582:	d003      	beq.n	801d58c <__swsetup_r+0x7c>
 801d584:	4621      	mov	r1, r4
 801d586:	4628      	mov	r0, r5
 801d588:	f000 f884 	bl	801d694 <__smakebuf_r>
 801d58c:	89a0      	ldrh	r0, [r4, #12]
 801d58e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d592:	f010 0301 	ands.w	r3, r0, #1
 801d596:	d00a      	beq.n	801d5ae <__swsetup_r+0x9e>
 801d598:	2300      	movs	r3, #0
 801d59a:	60a3      	str	r3, [r4, #8]
 801d59c:	6963      	ldr	r3, [r4, #20]
 801d59e:	425b      	negs	r3, r3
 801d5a0:	61a3      	str	r3, [r4, #24]
 801d5a2:	6923      	ldr	r3, [r4, #16]
 801d5a4:	b943      	cbnz	r3, 801d5b8 <__swsetup_r+0xa8>
 801d5a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d5aa:	d1c4      	bne.n	801d536 <__swsetup_r+0x26>
 801d5ac:	bd38      	pop	{r3, r4, r5, pc}
 801d5ae:	0781      	lsls	r1, r0, #30
 801d5b0:	bf58      	it	pl
 801d5b2:	6963      	ldrpl	r3, [r4, #20]
 801d5b4:	60a3      	str	r3, [r4, #8]
 801d5b6:	e7f4      	b.n	801d5a2 <__swsetup_r+0x92>
 801d5b8:	2000      	movs	r0, #0
 801d5ba:	e7f7      	b.n	801d5ac <__swsetup_r+0x9c>
 801d5bc:	200021d8 	.word	0x200021d8

0801d5c0 <_raise_r>:
 801d5c0:	291f      	cmp	r1, #31
 801d5c2:	b538      	push	{r3, r4, r5, lr}
 801d5c4:	4604      	mov	r4, r0
 801d5c6:	460d      	mov	r5, r1
 801d5c8:	d904      	bls.n	801d5d4 <_raise_r+0x14>
 801d5ca:	2316      	movs	r3, #22
 801d5cc:	6003      	str	r3, [r0, #0]
 801d5ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d5d2:	bd38      	pop	{r3, r4, r5, pc}
 801d5d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801d5d6:	b112      	cbz	r2, 801d5de <_raise_r+0x1e>
 801d5d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d5dc:	b94b      	cbnz	r3, 801d5f2 <_raise_r+0x32>
 801d5de:	4620      	mov	r0, r4
 801d5e0:	f000 f830 	bl	801d644 <_getpid_r>
 801d5e4:	462a      	mov	r2, r5
 801d5e6:	4601      	mov	r1, r0
 801d5e8:	4620      	mov	r0, r4
 801d5ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d5ee:	f000 b817 	b.w	801d620 <_kill_r>
 801d5f2:	2b01      	cmp	r3, #1
 801d5f4:	d00a      	beq.n	801d60c <_raise_r+0x4c>
 801d5f6:	1c59      	adds	r1, r3, #1
 801d5f8:	d103      	bne.n	801d602 <_raise_r+0x42>
 801d5fa:	2316      	movs	r3, #22
 801d5fc:	6003      	str	r3, [r0, #0]
 801d5fe:	2001      	movs	r0, #1
 801d600:	e7e7      	b.n	801d5d2 <_raise_r+0x12>
 801d602:	2400      	movs	r4, #0
 801d604:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d608:	4628      	mov	r0, r5
 801d60a:	4798      	blx	r3
 801d60c:	2000      	movs	r0, #0
 801d60e:	e7e0      	b.n	801d5d2 <_raise_r+0x12>

0801d610 <raise>:
 801d610:	4b02      	ldr	r3, [pc, #8]	; (801d61c <raise+0xc>)
 801d612:	4601      	mov	r1, r0
 801d614:	6818      	ldr	r0, [r3, #0]
 801d616:	f7ff bfd3 	b.w	801d5c0 <_raise_r>
 801d61a:	bf00      	nop
 801d61c:	200021d8 	.word	0x200021d8

0801d620 <_kill_r>:
 801d620:	b538      	push	{r3, r4, r5, lr}
 801d622:	4d07      	ldr	r5, [pc, #28]	; (801d640 <_kill_r+0x20>)
 801d624:	2300      	movs	r3, #0
 801d626:	4604      	mov	r4, r0
 801d628:	4608      	mov	r0, r1
 801d62a:	4611      	mov	r1, r2
 801d62c:	602b      	str	r3, [r5, #0]
 801d62e:	f7e5 fbd3 	bl	8002dd8 <_kill>
 801d632:	1c43      	adds	r3, r0, #1
 801d634:	d102      	bne.n	801d63c <_kill_r+0x1c>
 801d636:	682b      	ldr	r3, [r5, #0]
 801d638:	b103      	cbz	r3, 801d63c <_kill_r+0x1c>
 801d63a:	6023      	str	r3, [r4, #0]
 801d63c:	bd38      	pop	{r3, r4, r5, pc}
 801d63e:	bf00      	nop
 801d640:	20010ce4 	.word	0x20010ce4

0801d644 <_getpid_r>:
 801d644:	f7e5 bbc0 	b.w	8002dc8 <_getpid>

0801d648 <__swhatbuf_r>:
 801d648:	b570      	push	{r4, r5, r6, lr}
 801d64a:	460c      	mov	r4, r1
 801d64c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d650:	2900      	cmp	r1, #0
 801d652:	b096      	sub	sp, #88	; 0x58
 801d654:	4615      	mov	r5, r2
 801d656:	461e      	mov	r6, r3
 801d658:	da0d      	bge.n	801d676 <__swhatbuf_r+0x2e>
 801d65a:	89a3      	ldrh	r3, [r4, #12]
 801d65c:	f013 0f80 	tst.w	r3, #128	; 0x80
 801d660:	f04f 0100 	mov.w	r1, #0
 801d664:	bf0c      	ite	eq
 801d666:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801d66a:	2340      	movne	r3, #64	; 0x40
 801d66c:	2000      	movs	r0, #0
 801d66e:	6031      	str	r1, [r6, #0]
 801d670:	602b      	str	r3, [r5, #0]
 801d672:	b016      	add	sp, #88	; 0x58
 801d674:	bd70      	pop	{r4, r5, r6, pc}
 801d676:	466a      	mov	r2, sp
 801d678:	f000 f848 	bl	801d70c <_fstat_r>
 801d67c:	2800      	cmp	r0, #0
 801d67e:	dbec      	blt.n	801d65a <__swhatbuf_r+0x12>
 801d680:	9901      	ldr	r1, [sp, #4]
 801d682:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801d686:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801d68a:	4259      	negs	r1, r3
 801d68c:	4159      	adcs	r1, r3
 801d68e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d692:	e7eb      	b.n	801d66c <__swhatbuf_r+0x24>

0801d694 <__smakebuf_r>:
 801d694:	898b      	ldrh	r3, [r1, #12]
 801d696:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d698:	079d      	lsls	r5, r3, #30
 801d69a:	4606      	mov	r6, r0
 801d69c:	460c      	mov	r4, r1
 801d69e:	d507      	bpl.n	801d6b0 <__smakebuf_r+0x1c>
 801d6a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d6a4:	6023      	str	r3, [r4, #0]
 801d6a6:	6123      	str	r3, [r4, #16]
 801d6a8:	2301      	movs	r3, #1
 801d6aa:	6163      	str	r3, [r4, #20]
 801d6ac:	b002      	add	sp, #8
 801d6ae:	bd70      	pop	{r4, r5, r6, pc}
 801d6b0:	ab01      	add	r3, sp, #4
 801d6b2:	466a      	mov	r2, sp
 801d6b4:	f7ff ffc8 	bl	801d648 <__swhatbuf_r>
 801d6b8:	9900      	ldr	r1, [sp, #0]
 801d6ba:	4605      	mov	r5, r0
 801d6bc:	4630      	mov	r0, r6
 801d6be:	f7fe fcf1 	bl	801c0a4 <_malloc_r>
 801d6c2:	b948      	cbnz	r0, 801d6d8 <__smakebuf_r+0x44>
 801d6c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d6c8:	059a      	lsls	r2, r3, #22
 801d6ca:	d4ef      	bmi.n	801d6ac <__smakebuf_r+0x18>
 801d6cc:	f023 0303 	bic.w	r3, r3, #3
 801d6d0:	f043 0302 	orr.w	r3, r3, #2
 801d6d4:	81a3      	strh	r3, [r4, #12]
 801d6d6:	e7e3      	b.n	801d6a0 <__smakebuf_r+0xc>
 801d6d8:	89a3      	ldrh	r3, [r4, #12]
 801d6da:	6020      	str	r0, [r4, #0]
 801d6dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d6e0:	81a3      	strh	r3, [r4, #12]
 801d6e2:	9b00      	ldr	r3, [sp, #0]
 801d6e4:	6163      	str	r3, [r4, #20]
 801d6e6:	9b01      	ldr	r3, [sp, #4]
 801d6e8:	6120      	str	r0, [r4, #16]
 801d6ea:	b15b      	cbz	r3, 801d704 <__smakebuf_r+0x70>
 801d6ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d6f0:	4630      	mov	r0, r6
 801d6f2:	f000 f81d 	bl	801d730 <_isatty_r>
 801d6f6:	b128      	cbz	r0, 801d704 <__smakebuf_r+0x70>
 801d6f8:	89a3      	ldrh	r3, [r4, #12]
 801d6fa:	f023 0303 	bic.w	r3, r3, #3
 801d6fe:	f043 0301 	orr.w	r3, r3, #1
 801d702:	81a3      	strh	r3, [r4, #12]
 801d704:	89a3      	ldrh	r3, [r4, #12]
 801d706:	431d      	orrs	r5, r3
 801d708:	81a5      	strh	r5, [r4, #12]
 801d70a:	e7cf      	b.n	801d6ac <__smakebuf_r+0x18>

0801d70c <_fstat_r>:
 801d70c:	b538      	push	{r3, r4, r5, lr}
 801d70e:	4d07      	ldr	r5, [pc, #28]	; (801d72c <_fstat_r+0x20>)
 801d710:	2300      	movs	r3, #0
 801d712:	4604      	mov	r4, r0
 801d714:	4608      	mov	r0, r1
 801d716:	4611      	mov	r1, r2
 801d718:	602b      	str	r3, [r5, #0]
 801d71a:	f7e5 fbbc 	bl	8002e96 <_fstat>
 801d71e:	1c43      	adds	r3, r0, #1
 801d720:	d102      	bne.n	801d728 <_fstat_r+0x1c>
 801d722:	682b      	ldr	r3, [r5, #0]
 801d724:	b103      	cbz	r3, 801d728 <_fstat_r+0x1c>
 801d726:	6023      	str	r3, [r4, #0]
 801d728:	bd38      	pop	{r3, r4, r5, pc}
 801d72a:	bf00      	nop
 801d72c:	20010ce4 	.word	0x20010ce4

0801d730 <_isatty_r>:
 801d730:	b538      	push	{r3, r4, r5, lr}
 801d732:	4d06      	ldr	r5, [pc, #24]	; (801d74c <_isatty_r+0x1c>)
 801d734:	2300      	movs	r3, #0
 801d736:	4604      	mov	r4, r0
 801d738:	4608      	mov	r0, r1
 801d73a:	602b      	str	r3, [r5, #0]
 801d73c:	f7e5 fbbb 	bl	8002eb6 <_isatty>
 801d740:	1c43      	adds	r3, r0, #1
 801d742:	d102      	bne.n	801d74a <_isatty_r+0x1a>
 801d744:	682b      	ldr	r3, [r5, #0]
 801d746:	b103      	cbz	r3, 801d74a <_isatty_r+0x1a>
 801d748:	6023      	str	r3, [r4, #0]
 801d74a:	bd38      	pop	{r3, r4, r5, pc}
 801d74c:	20010ce4 	.word	0x20010ce4

0801d750 <_init>:
 801d750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d752:	bf00      	nop
 801d754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d756:	bc08      	pop	{r3}
 801d758:	469e      	mov	lr, r3
 801d75a:	4770      	bx	lr

0801d75c <_fini>:
 801d75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d75e:	bf00      	nop
 801d760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d762:	bc08      	pop	{r3}
 801d764:	469e      	mov	lr, r3
 801d766:	4770      	bx	lr
